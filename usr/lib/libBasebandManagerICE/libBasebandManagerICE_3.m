void sub_1C5B2EE10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_56c38_ZTSNSt3__110shared_ptrI10BootModuleEE72c21_ZTSN8dispatch5groupE(void *a1, void *a2)
{
  uint64_t v2 = a2[8];
  a1[7] = a2[7];
  a1[8] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  v3 = a2[9];
  a1[9] = v3;
  if (v3) {
    dispatch_retain(v3);
  }
}

void __destroy_helper_block_e8_56c38_ZTSNSt3__110shared_ptrI10BootModuleEE72c21_ZTSN8dispatch5groupE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 72);
  if (v2) {
    dispatch_release(v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void BootModule::setVoiceCall_sync(BootModule *this, char a2)
{
  v3 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v3 || (uint64_t v5 = *((void *)this + 15), (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  v9 = *((void *)this + 52);
  v10 = *((void *)this + 17);
  v11 = operator new(0x20uLL);
  void *v11 = this;
  v11[1] = v5;
  v11[2] = v7;
  *((unsigned char *)v11 + 24) = a2;
  dispatch_group_notify_f(v9, v10, v11, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setVoiceCall_sync(BOOL)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setVoiceCall_sync(BOOL)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);

  std::__shared_weak_count::__release_weak(v7);
}

void sub_1C5B2EFDC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void BootModule::setRat1_sync(void *a1, int a2)
{
  v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  v9 = a1[52];
  v10 = a1[17];
  v11 = operator new(0x20uLL);
  void *v11 = a1;
  v11[1] = v5;
  v11[2] = v7;
  *((_DWORD *)v11 + 6) = a2;
  dispatch_group_notify_f(v9, v10, v11, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setRat1_sync(abm::RadioAccessTechnology)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setRat1_sync(abm::RadioAccessTechnology)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);

  std::__shared_weak_count::__release_weak(v7);
}

void sub_1C5B2F0EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void BootModule::setRat2_sync(void *a1, int a2)
{
  v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  v9 = a1[52];
  v10 = a1[17];
  v11 = operator new(0x20uLL);
  void *v11 = a1;
  v11[1] = v5;
  v11[2] = v7;
  *((_DWORD *)v11 + 6) = a2;
  dispatch_group_notify_f(v9, v10, v11, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setRat2_sync(abm::RadioAccessTechnology)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setRat2_sync(abm::RadioAccessTechnology)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);

  std::__shared_weak_count::__release_weak(v7);
}

void sub_1C5B2F1FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void BootModule::setPLMN1_sync(void *a1, uint64_t a2)
{
  v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(void *)&long long v12 = a1;
  *((void *)&v12 + 1) = v5;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  v9 = a1[52];
  v10 = a1[17];
  v11 = (std::string *)operator new(0x30uLL);
  *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__r.__words[2] = (std::string::size_type)v7;
  v11[1] = __p;
  memset(&__p, 0, sizeof(__p));
  dispatch_group_notify_f(v9, v10, v11, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setPLMN1_sync(std::string)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setPLMN1_sync(std::string)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1C5B2F380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11)
  {
    std::__shared_weak_count::__release_weak(a11);
    std::__shared_weak_count::__release_weak(v11);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v11);
  _Unwind_Resume(a1);
}

uint64_t BootModule::setPLMN1_sync(std::string)::$_0::~$_0(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v2) {
      return a1;
    }
    goto LABEL_3;
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
LABEL_3:
  }
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void BootModule::setPLMN2_sync(void *a1, uint64_t a2)
{
  v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(void *)&long long v12 = a1;
  *((void *)&v12 + 1) = v5;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  v9 = a1[52];
  v10 = a1[17];
  v11 = (std::string *)operator new(0x30uLL);
  *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__r.__words[2] = (std::string::size_type)v7;
  v11[1] = __p;
  memset(&__p, 0, sizeof(__p));
  dispatch_group_notify_f(v9, v10, v11, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setPLMN2_sync(std::string)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setPLMN2_sync(std::string)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1C5B2F570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11)
  {
    std::__shared_weak_count::__release_weak(a11);
    std::__shared_weak_count::__release_weak(v11);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v11);
  _Unwind_Resume(a1);
}

void BootModule::setCellId_sync(void *a1, uint64_t a2, int a3)
{
  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v7 = a1[15], (v8 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v9 = v8;
  p_shared_weak_owners = &v8->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  v11 = a1[52];
  long long v12 = a1[17];
  v13 = operator new(0x28uLL);
  void *v13 = a1;
  v13[1] = v7;
  v13[2] = v9;
  v13[3] = a2;
  *((_DWORD *)v13 + 8) = a3;
  dispatch_group_notify_f(v11, v12, v13, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setCellId_sync(unsigned long long,BootModule::SimSlotIndex)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setCellId_sync(unsigned long long,BootModule::SimSlotIndex)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);

  std::__shared_weak_count::__release_weak(v9);
}

void sub_1C5B2F6AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void BootModule::setAreaCode_sync(void *a1, uint64_t a2, int a3)
{
  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v7 = a1[15], (v8 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v9 = v8;
  p_shared_weak_owners = &v8->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  v11 = a1[52];
  long long v12 = a1[17];
  v13 = operator new(0x28uLL);
  void *v13 = a1;
  v13[1] = v7;
  v13[2] = v9;
  v13[3] = a2;
  *((_DWORD *)v13 + 8) = a3;
  dispatch_group_notify_f(v11, v12, v13, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setAreaCode_sync(unsigned long long,BootModule::SimSlotIndex)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setAreaCode_sync(unsigned long long,BootModule::SimSlotIndex)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);

  std::__shared_weak_count::__release_weak(v9);
}

void sub_1C5B2F7C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void *std::sub_match<std::__wrap_iter<char const*>>::str[abi:ne180100](void *result, uint64_t *a2)
{
  uint64_t v2 = result;
  if (!*((unsigned char *)a2 + 16))
  {
    *result = 0;
    result[1] = 0;
    result[2] = 0;
    return result;
  }
  uint64_t v4 = *a2;
  v3 = (char *)a2[1];
  unint64_t v5 = (unint64_t)&v3[-*a2];
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 <= 0x16)
  {
    *((unsigned char *)result + 23) = v5;
    if ((char *)v4 != v3) {
      goto LABEL_5;
    }
LABEL_15:
    *(unsigned char *)uint64_t v2 = 0;
    return result;
  }
  uint64_t v12 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17) {
    uint64_t v12 = v5 | 7;
  }
  uint64_t v13 = v12 + 1;
  result = operator new(v12 + 1);
  v2[1] = v5;
  v2[2] = v13 | 0x8000000000000000;
  *uint64_t v2 = result;
  uint64_t v2 = result;
  if ((char *)v4 == v3) {
    goto LABEL_15;
  }
LABEL_5:
  if (v5 < 0x20 || (unint64_t)v2 - v4 < 0x20)
  {
    v6 = v2;
    uint64_t v7 = (char *)v4;
  }
  else
  {
    v6 = (char *)v2 + (v5 & 0xFFFFFFFFFFFFFFE0);
    uint64_t v7 = (char *)(v4 + (v5 & 0xFFFFFFFFFFFFFFE0));
    v8 = (long long *)(v4 + 16);
    v9 = v2 + 2;
    unint64_t v10 = v5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v11 = *v8;
      *(v9 - 1) = *(v8 - 1);
      _OWORD *v9 = v11;
      v8 += 2;
      v9 += 2;
      v10 -= 32;
    }
    while (v10);
    if (v5 == (v5 & 0x7FFFFFFFFFFFFFE0)) {
      goto LABEL_18;
    }
  }
  do
  {
    char v14 = *v7++;
    *v6++ = v14;
  }
  while (v7 != v3);
LABEL_18:
  unsigned char *v6 = 0;
  return result;
}

void *ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F210DDD0;
  MEMORY[0x1C87940C0](a1 + 1);
  return a1;
}

void ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F210DDD0;
  MEMORY[0x1C87940C0](a1 + 1);

  operator delete(a1);
}

void std::__shared_ptr_pointer<BootModule *,std::shared_ptr<BootModule> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModule>(BootModule*)::{lambda(BootModule *)#1},std::allocator<BootModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<BootModule *,std::shared_ptr<BootModule> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModule>(BootModule*)::{lambda(BootModule *)#1},std::allocator<BootModule>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<BootModule *,std::shared_ptr<BootModule> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModule>(BootModule*)::{lambda(BootModule *)#1},std::allocator<BootModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI10BootModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI10BootModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI10BootModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI10BootModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

uint64_t std::shared_ptr<BootModule> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModule>(BootModule*)::{lambda(BootModule*)#1}::operator() const(BootModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ctu::SharedLoggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F210DDD0;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void _ZZN8dispatch6detail12group_notifyIZZZN10BootModule12requestResetE9ResetInfoNS_5blockIU13block_pointerFviNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEEUb_EUb0_E3__0EEvP16dispatch_group_sP16dispatch_queue_sOT_NS5_17integral_constantIbLb0EEEENUlPvE_8__invokeESO_(char *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)__p + 2);
  if (!v2) {
    goto LABEL_15;
  }
  uint64_t v3 = *(void *)__p;
  uint64_t v4 = std::__shared_weak_count::lock(v2);
  if (!v4) {
    goto LABEL_15;
  }
  unint64_t v5 = v4;
  if (!*((void *)__p + 1)) {
    goto LABEL_13;
  }
  ResetInfo::ResetInfo(&v12, (const ResetInfo *)(__p + 24));
  v6 = (const void *)*((void *)__p + 17);
  if (v6) {
    uint64_t v7 = _Block_copy(v6);
  }
  else {
    uint64_t v7 = 0;
  }
  long long v11 = v7;
  BootModule::handleReset_sync(v3, (uint64_t)&v12, &v11);
  if (v7) {
    _Block_release(v7);
  }
  if (v18 < 0)
  {
    operator delete(__pa);
    if ((v16 & 0x80000000) == 0)
    {
LABEL_11:
      if ((v14 & 0x80000000) == 0) {
        goto LABEL_12;
      }
LABEL_33:
      operator delete(v13);
      if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_13:
        if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_15;
        }
        goto LABEL_14;
      }
      goto LABEL_34;
    }
  }
  else if ((v16 & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(v15);
  if (v14 < 0) {
    goto LABEL_33;
  }
LABEL_12:
  if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_13;
  }
LABEL_34:
  operator delete(v12.__r_.__value_.__l.__data_);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_14:
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_15:
  v8 = *((void *)__p + 18);
  if (v8) {
    dispatch_release(v8);
  }
  v9 = (const void *)*((void *)__p + 17);
  if (v9) {
    _Block_release(v9);
  }
  if (__p[135] < 0)
  {
    operator delete(*((void **)__p + 14));
    if ((__p[95] & 0x80000000) == 0)
    {
LABEL_21:
      if ((__p[71] & 0x80000000) == 0) {
        goto LABEL_22;
      }
      goto LABEL_28;
    }
  }
  else if ((__p[95] & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(*((void **)__p + 9));
  if ((__p[71] & 0x80000000) == 0)
  {
LABEL_22:
    if ((__p[47] & 0x80000000) == 0) {
      goto LABEL_23;
    }
LABEL_29:
    operator delete(*((void **)__p + 3));
    unint64_t v10 = (std::__shared_weak_count *)*((void *)__p + 2);
    if (!v10) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
LABEL_28:
  operator delete(*((void **)__p + 6));
  if (__p[47] < 0) {
    goto LABEL_29;
  }
LABEL_23:
  unint64_t v10 = (std::__shared_weak_count *)*((void *)__p + 2);
  if (v10) {
LABEL_24:
  }
    std::__shared_weak_count::__release_weak(v10);
LABEL_25:
  operator delete(__p);
}

void sub_1C5B2FD68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (v14) {
    _Block_release(v14);
  }
  ResetInfo::~ResetInfo(&a11);
  if (atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    char v16 = v11[18];
    if (!v16) {
      goto LABEL_5;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    char v16 = v11[18];
    if (!v16)
    {
LABEL_5:
      v17 = (const void *)v11[17];
      if (!v17)
      {
LABEL_10:
        ResetInfo::~ResetInfo(v13);
        char v18 = (std::__shared_weak_count *)v11[2];
        if (v18) {
          std::__shared_weak_count::__release_weak(v18);
        }
        operator delete(v11);
        _Unwind_Resume(a1);
      }
LABEL_9:
      _Block_release(v17);
      goto LABEL_10;
    }
  }
  dispatch_release(v16);
  v17 = (const void *)v11[17];
  if (!v17) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ctu::SharedSynchronizable<BootModule>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F210DE98;
  block[5] = v5;
  std::string v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = a2;
  dispatch_async(v8, block);
  unint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c39_ZTSNSt3__110shared_ptrIK10BootModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__110shared_ptrIK10BootModuleEE(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void *___ZNK3ctu20SharedSynchronizableI10BootModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb1_EUb2_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v2 = *(uint64_t **)a1;
  uint64_t v3 = (const char *)*MEMORY[0x1E4F4C1B0];
  uint64_t v4 = **(void **)a1;
  if (!xpc_dictionary_get_value(*(xpc_object_t *)(*(void *)a1 + 8), (const char *)*MEMORY[0x1E4F4C1B0])) {
    goto LABEL_26;
  }
  xpc_object_t value = xpc_dictionary_get_value((xpc_object_t)v2[1], v3);
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  int v6 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object.__r_.__value_.__l.__data_);
  if (!v6)
  {
    v8 = *(NSObject **)(v4 + 440);
    *(void *)(v4 + 440) = 0;
    if (!v8) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  uint64_t v7 = *(NSObject **)(v4 + 432);
  if (v7)
  {
    dispatch_retain(*(dispatch_object_t *)(v4 + 432));
    dispatch_suspend(v7);
  }
  v8 = *(NSObject **)(v4 + 440);
  *(void *)(v4 + 440) = v7;
  if (v8)
  {
LABEL_11:
    dispatch_resume(v8);
    dispatch_release(v8);
  }
LABEL_12:
  BootModule::setVoiceCall_sync((BootModule *)v4, v6);
  v9 = (const void *)*MEMORY[0x1E4F4C220];
  size_t v10 = strlen((const char *)*MEMORY[0x1E4F4C220]);
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  long long v11 = (void *)v10;
  if (v10 >= 0x17)
  {
    uint64_t v14 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v14 = v10 | 7;
    }
    uint64_t v15 = v14 + 1;
    std::string v12 = (void **)operator new(v14 + 1);
    __dst[1] = v11;
    unint64_t v59 = v15 | 0x8000000000000000;
    __dst[0] = v12;
LABEL_20:
    memmove(v12, v9, (size_t)v11);
    *((unsigned char *)v11 + (void)v12) = 0;
    uint64_t v13 = (void *)v2[1];
    xpc_object_t v57 = v13;
    if (v13) {
      goto LABEL_16;
    }
LABEL_21:
    xpc_object_t v57 = xpc_null_create();
    goto LABEL_22;
  }
  HIBYTE(v59) = v10;
  std::string v12 = __dst;
  if (v10) {
    goto LABEL_20;
  }
  LOBYTE(__dst[0]) = 0;
  uint64_t v13 = (void *)v2[1];
  xpc_object_t v57 = v13;
  if (!v13) {
    goto LABEL_21;
  }
LABEL_16:
  xpc_retain(v13);
LABEL_22:
  aBlock = 0;
  Service::broadcastEvent(v4, (uint64_t)__dst, &v57, (const void **)&aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(v57);
  xpc_object_t v57 = 0;
  if (SHIBYTE(v59) < 0) {
    operator delete(__dst[0]);
  }
LABEL_26:
  char v16 = (const char *)*MEMORY[0x1E4F4D2E0];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E4F4D2E0]))
  {
    xpc_object_t v17 = xpc_dictionary_get_value((xpc_object_t)v2[1], v16);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    if (v17) {
      xpc_retain(v17);
    }
    else {
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    int v18 = xpc::dyn_cast_or_default((xpc *)&object, (const object *)0xFFFFFFFFLL);
    xpc_release(object.__r_.__value_.__l.__data_);
    BootModule::setRat1_sync((void *)v4, v18);
  }
  v19 = (const char *)*MEMORY[0x1E4F4D2E8];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E4F4D2E8]))
  {
    xpc_object_t v20 = xpc_dictionary_get_value((xpc_object_t)v2[1], v19);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
    if (v20) {
      xpc_retain(v20);
    }
    else {
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    int v21 = xpc::dyn_cast_or_default((xpc *)&object, (const object *)0xFFFFFFFFLL);
    xpc_release(object.__r_.__value_.__l.__data_);
    BootModule::setRat2_sync((void *)v4, v21);
  }
  v22 = (const char *)*MEMORY[0x1E4F4D320];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E4F4D320]))
  {
    memset(&object, 170, sizeof(object));
    xpc_object_t v23 = xpc_dictionary_get_value((xpc_object_t)v2[1], v22);
    xpc_object_t v54 = v23;
    if (v23) {
      xpc_retain(v23);
    }
    else {
      xpc_object_t v54 = xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)&object, (xpc *)&v54, (const object *)"", v24);
    xpc_release(v54);
    if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v53, object.__r_.__value_.__l.__data_, object.__r_.__value_.__l.__size_);
    }
    else {
      std::string v53 = object;
    }
    BootModule::setPLMN1_sync((void *)v4, (uint64_t)&v53);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v53.__r_.__value_.__l.__data_);
      if ((SHIBYTE(object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_45;
      }
    }
    else if ((SHIBYTE(object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_45;
    }
    operator delete(object.__r_.__value_.__l.__data_);
  }
LABEL_45:
  v25 = (const char *)*MEMORY[0x1E4F4D328];
  if (!xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E4F4D328])) {
    goto LABEL_56;
  }
  memset(&object, 170, sizeof(object));
  xpc_object_t v26 = xpc_dictionary_get_value((xpc_object_t)v2[1], v25);
  xpc_object_t v54 = v26;
  if (v26) {
    xpc_retain(v26);
  }
  else {
    xpc_object_t v54 = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)&object, (xpc *)&v54, (const object *)"", v27);
  xpc_release(v54);
  if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, object.__r_.__value_.__l.__data_, object.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = object;
  }
  BootModule::setPLMN2_sync((void *)v4, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_56;
    }
  }
  else if ((SHIBYTE(object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_56;
  }
  operator delete(object.__r_.__value_.__l.__data_);
LABEL_56:
  v28 = (const char *)*MEMORY[0x1E4F4C0D0];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E4F4C0D0]))
  {
    xpc_object_t v29 = xpc_dictionary_get_value((xpc_object_t)v2[1], v28);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
    if (v29) {
      xpc_retain(v29);
    }
    else {
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    uint64_t v30 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object.__r_.__value_.__l.__data_);
    BootModule::setCellId_sync((void *)v4, v30, 0);
  }
  v31 = (const char *)*MEMORY[0x1E4F4C0D8];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E4F4C0D8]))
  {
    xpc_object_t v32 = xpc_dictionary_get_value((xpc_object_t)v2[1], v31);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
    if (v32) {
      xpc_retain(v32);
    }
    else {
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    uint64_t v33 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object.__r_.__value_.__l.__data_);
    BootModule::setCellId_sync((void *)v4, v33, 1);
  }
  v34 = (const char *)*MEMORY[0x1E4F4C160];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E4F4C160]))
  {
    xpc_object_t v35 = xpc_dictionary_get_value((xpc_object_t)v2[1], v34);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
    if (v35) {
      xpc_retain(v35);
    }
    else {
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    uint64_t v36 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object.__r_.__value_.__l.__data_);
    BootModule::setAreaCode_sync((void *)v4, v36, 0);
  }
  v37 = (const char *)*MEMORY[0x1E4F4C168];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E4F4C168]))
  {
    xpc_object_t v38 = xpc_dictionary_get_value((xpc_object_t)v2[1], v37);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
    if (v38) {
      xpc_retain(v38);
    }
    else {
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    uint64_t v39 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object.__r_.__value_.__l.__data_);
    BootModule::setAreaCode_sync((void *)v4, v39, 1);
  }
  v40 = (const char *)*MEMORY[0x1E4F4D308];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E4F4D308])
    || xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E4F4D310]))
  {
    xpc_object_t v41 = xpc_dictionary_get_value((xpc_object_t)v2[1], v40);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
    if (v41) {
      xpc_retain(v41);
    }
    else {
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    char v42 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object.__r_.__value_.__l.__data_);
    if ((v42 & 1) == 0)
    {
      xpc_object_t v43 = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E4F4D310]);
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
      if (v43) {
        xpc_retain(v43);
      }
      else {
        object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      }
      int v44 = xpc::dyn_cast_or_default((xpc *)&object, 0);
      xpc_release(object.__r_.__value_.__l.__data_);
      if (!v44)
      {
        v46 = *(NSObject **)(v4 + 440);
        *(void *)(v4 + 440) = 0;
        if (!v46) {
          goto LABEL_92;
        }
        goto LABEL_91;
      }
    }
    v45 = *(NSObject **)(v4 + 432);
    if (v45)
    {
      dispatch_retain(*(dispatch_object_t *)(v4 + 432));
      dispatch_suspend(v45);
    }
    v46 = *(NSObject **)(v4 + 440);
    *(void *)(v4 + 440) = v45;
    if (v46)
    {
LABEL_91:
      dispatch_resume(v46);
      dispatch_release(v46);
    }
  }
LABEL_92:
  if (v2[2])
  {
    xpc_object_t v47 = xpc_null_create();
    uint64_t v48 = v2[2];
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
    xpc_object_t v49 = xpc_null_create();
    (*(void (**)(uint64_t, void, std::string *))(v48 + 16))(v48, 0, &object);
    xpc_release(object.__r_.__value_.__l.__data_);
    xpc_release(v49);
    v50 = (const void *)v2[2];
    if (v50) {
      _Block_release(v50);
    }
  }
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v51 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v51 && !atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
  }
  operator delete(a1);
}

void sub_1C5B307CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,xpc_object_t object,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *aBlock,xpc_object_t a30)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  uint64_t v33 = *(const void **)(v31 + 16);
  if (v33) {
    _Block_release(v33);
  }
  xpc_release(*(xpc_object_t *)(v31 + 8));
  operator delete((void *)v31);
  v34 = (std::__shared_weak_count *)v30[2];
  if (v34)
  {
    if (!atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  operator delete(v30);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<BootModule>::execute_wrapped<BootModule::initialize(dispatch::group_session)::$_0>(BootModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<BootModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<BootModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(BootModule ***)a1;
  BootModule::finishInitialization_sync(**(BootModule ***)a1);
  operator delete(v2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = (void *)a1;
  }
  else
  {
    uint64_t v4 = (void *)a1;
  }
  operator delete(v4);
}

void sub_1C5B30B04(_Unwind_Exception *a1)
{
  operator delete(v2);
  uint64_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<BootModule>::execute_wrapped<BootModule::start(dispatch::group_session)::$_0>(BootModule::start(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<BootModule::start(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<BootModule::start(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[3];
  uint64_t v4 = *(NSObject **)(v3 + 136);
  dispatch_object_t object = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  GetABMLogServer(&v33);
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  uint64_t v5 = off_1EBBDC878;
  if (!off_1EBBDC878)
  {
    ABMServer::create_default_global(&v37);
    long long v6 = *(_OWORD *)&v37.__r_.__value_.__l.__data_;
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = 0uLL;
    uint64_t v7 = (std::__shared_weak_count *)*(&off_1EBBDC878 + 1);
    off_1EBBDC878 = v6;
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    size = (std::__shared_weak_count *)v37.__r_.__value_.__l.__size_;
    if (v37.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v37.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
    uint64_t v5 = off_1EBBDC878;
  }
  v9 = (std::__shared_weak_count *)*(&off_1EBBDC878 + 1);
  if (*(&off_1EBBDC878 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDC878 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  ResetDetection::create(&object, &v33, *(void *)(*(void *)v5 + 208), (uint64_t *)&v36);
  long long v10 = v36;
  long long v36 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v3 + 184);
  *(_OWORD *)(v3 + 176) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  std::string v12 = (std::__shared_weak_count *)*((void *)&v36 + 1);
  if (*((void *)&v36 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v36 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v13 = v34;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (object) {
    dispatch_release(object);
  }
  uint64_t v14 = *(void *)(v3 + 176);
  v37.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
  v37.__r_.__value_.__l.__size_ = 0x40000000;
  v37.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN14ResetDetection5startEv_block_invoke;
  xpc_object_t v38 = &__block_descriptor_tmp_3;
  uint64_t v39 = v14;
  ctu::SharedSynchronizable<ResetDetection>::execute_wrapped((uint64_t *)(v14 + 72), (uint64_t)&v37);
  uint64_t v15 = v2[2];
  if (v15)
  {
    dispatch_retain((dispatch_object_t)v2[2]);
    dispatch_group_enter(v15);
  }
  char v16 = *(NSObject **)(v3 + 208);
  *(void *)(v3 + 208) = v15;
  if (v16)
  {
    dispatch_group_leave(v16);
    dispatch_release(v16);
  }
  *(void *)&long long v36 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v36 + 1) = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v3 + 80))(&v36, v3);
  uint64_t v17 = v36;
  if ((void)v36)
  {
    dispatch_object_t v32 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
    int v18 = (char *)operator new(0x38uLL);
    strcpy(v18, "com.apple.AppleBasebandManager.RadioNotReady.Bootup");
    uint64_t v19 = capabilities::abs::bootupAssertionTimeoutScalingFactor((capabilities::abs *)v18);
    uint64_t v20 = *(void *)(v17 + 104);
    std::string::__init_copy_ctor_external(&v37, v18, 0x33uLL);
    (*(void (**)(dispatch_object_t *__return_ptr, uint64_t, std::string *, uint64_t))(*(void *)v20 + 24))(&v32, v20, &v37, 180000 * v19);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    operator delete(v18);
    uint64_t v22 = *v2;
    uint64_t v21 = v2[1];
    if (v21) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 16), 1uLL, memory_order_relaxed);
    }
    dispatch_object_t v23 = v32;
    if (v32)
    {
      dispatch_retain(v32);
      v24 = v32;
    }
    else
    {
      v24 = 0;
    }
    v25 = *(NSObject **)(v3 + 136);
    xpc_object_t v26 = operator new(0x20uLL);
    *xpc_object_t v26 = v3;
    v26[1] = v22;
    v26[2] = v21;
    v26[3] = v23;
    dispatch_group_notify_f(v24, v25, v26, (dispatch_function_t)dispatch::detail::group_notify<BootModule::start(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,BootModule::start(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1} &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
    if (v32) {
      dispatch_release(v32);
    }
  }
  v27 = (std::__shared_weak_count *)*((void *)&v36 + 1);
  if (*((void *)&v36 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v36 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  v28 = v2[2];
  if (v28)
  {
    dispatch_group_leave(v28);
    xpc_object_t v29 = v2[2];
    if (v29) {
      dispatch_release(v29);
    }
  }
  uint64_t v30 = (std::__shared_weak_count *)v2[1];
  if (v30) {
    std::__shared_weak_count::__release_weak(v30);
  }
  operator delete(v2);
  uint64_t v31 = (std::__shared_weak_count *)a1[2];
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  operator delete(a1);
}

void sub_1C5B3109C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t a9, uint64_t a10, std::__shared_weak_count *a11, dispatch_object_t object, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  if (a11 && !atomic_fetch_add(&a11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
    std::__shared_weak_count::__release_weak(a11);
  }
  if (object) {
    dispatch_release(object);
  }
  dispatch_object_t v23 = v21[2];
  if (v23)
  {
    dispatch_group_leave(v23);
    v24 = v21[2];
    if (v24) {
      dispatch_release(v24);
    }
  }
  v25 = (std::__shared_weak_count *)v21[1];
  if (v25) {
    std::__shared_weak_count::__release_weak(v25);
  }
  operator delete(v21);
  xpc_object_t v26 = (std::__shared_weak_count *)v20[2];
  if (v26)
  {
    if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  operator delete(v20);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<BootModule::start(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,BootModule::start(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1} &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(BootModule **__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (!v2) {
    goto LABEL_31;
  }
  uint64_t v3 = *__p;
  uint64_t v4 = std::__shared_weak_count::lock(v2);
  if (!v4) {
    goto LABEL_31;
  }
  uint64_t v5 = v4;
  long long v6 = __p[1];
  if (v6)
  {
    if (*((_DWORD *)v3 + 114))
    {
      uint64_t v7 = *MEMORY[0x1E4F1CF80];
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x1E4F4C688], (const __CFString **)*MEMORY[0x1E4F4CBC8], v7, v9);
      long long v10 = (const void *)*MEMORY[0x1E4F4CEF8];
      size_t v11 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
      if (v11 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      std::string v12 = (void *)v11;
      if (v11 >= 0x17)
      {
        uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17) {
          uint64_t v14 = v11 | 7;
        }
        uint64_t v15 = v14 + 1;
        uint64_t v13 = (void **)operator new(v14 + 1);
        __dst[1] = v12;
        unint64_t v25 = v15 | 0x8000000000000000;
        __dst[0] = v13;
      }
      else
      {
        HIBYTE(v25) = v11;
        uint64_t v13 = __dst;
        if (!v11)
        {
          LOBYTE(__dst[0]) = 0;
          if (!Mutable) {
            goto LABEL_17;
          }
LABEL_15:
          CFTypeID v16 = CFGetTypeID(Mutable);
          if (v16 == CFDictionaryGetTypeID())
          {
            CFTypeRef cf = Mutable;
            CFRetain(Mutable);
LABEL_18:
            v20[0] = MEMORY[0x1E4F143A8];
            v20[1] = 1174405120;
            v20[2] = ___ZZZN10BootModule5startEN8dispatch13group_sessionEENK3__0clEvENKUlvE_clEv_block_invoke;
            v20[3] = &__block_descriptor_tmp_217;
            v20[4] = v3;
            v20[5] = v6;
            uint64_t v21 = v5;
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
            aBlock = _Block_copy(v20);
            Service::broadcastEvent((uint64_t)v3, (uint64_t)__dst, &cf, (const void **)&aBlock);
            if (aBlock) {
              _Block_release(aBlock);
            }
            if (cf) {
              CFRelease(cf);
            }
            if (SHIBYTE(v25) < 0) {
              operator delete(__dst[0]);
            }
            uint64_t v17 = v21;
            if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
            if (Mutable) {
              CFRelease(Mutable);
            }
            goto LABEL_29;
          }
LABEL_17:
          CFTypeRef cf = 0;
          goto LABEL_18;
        }
      }
      memmove(v13, v10, (size_t)v12);
      *((unsigned char *)v12 + (void)v13) = 0;
      if (!Mutable) {
        goto LABEL_17;
      }
      goto LABEL_15;
    }
    BootModule::reportStatisticsHardResetTime_sync(v3);
    BootModule::boot_sync(v3);
  }
LABEL_29:
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_31:
  int v18 = __p[3];
  if (v18) {
    dispatch_release(v18);
  }
  uint64_t v19 = (std::__shared_weak_count *)__p[2];
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  operator delete(__p);
}

void sub_1C5B315C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, CFTypeRef cf, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a15 && !atomic_fetch_add(&a15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a15->__on_zero_shared)(a15);
    std::__shared_weak_count::__release_weak(a15);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    v27 = v23[3];
    if (!v27) {
      goto LABEL_14;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    v27 = v23[3];
    if (!v27)
    {
LABEL_14:
      v28 = (std::__shared_weak_count *)v23[2];
      if (!v28) {
        goto LABEL_15;
      }
      goto LABEL_18;
    }
  }
  dispatch_release(v27);
  v28 = (std::__shared_weak_count *)v23[2];
  if (!v28)
  {
LABEL_15:
    operator delete(v23);
    _Unwind_Resume(a1);
  }
LABEL_18:
  std::__shared_weak_count::__release_weak(v28);
  operator delete(v23);
  _Unwind_Resume(a1);
}

void ___ZZZN10BootModule5startEN8dispatch13group_sessionEENK3__0clEvENKUlvE_clEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 0x40000000;
  v2[2] = ___ZZZN10BootModule5startEN8dispatch13group_sessionEENK3__0clEvENKUlvE_clEv_block_invoke_2;
  v2[3] = &__block_descriptor_tmp_214;
  v2[4] = v1;
  ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v1 + 120), (uint64_t)v2);
}

void ___ZZZN10BootModule5startEN8dispatch13group_sessionEENK3__0clEvENKUlvE_clEv_block_invoke_2(uint64_t a1)
{
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedIZZNS3_21handleBootFailed_syncENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEUb4_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNS6_10unique_ptrISE_NS6_14default_deleteISE_EEEEENUlPvE_8__invokeESN_(void *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)*a1;
  if (*(_DWORD *)(*a1 + 24))
  {
    uint64_t v3 = *(NSObject **)(*v2 + 88);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      xpc::object::to_string((uint64_t *)__p, (xpc::object *)(v2 + 4));
      uint64_t v4 = v8 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      long long v10 = v4;
      _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Dumping logs failed: %s", buf, 0xCu);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  xpc_release((xpc_object_t)v2[4]);
  v2[4] = 0;
  uint64_t v5 = (std::__shared_weak_count *)v2[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(v2);
  long long v6 = (std::__shared_weak_count *)a1[2];
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  operator delete(a1);
}

void sub_1C5B31910(_Unwind_Exception *a1)
{
  xpc_release(*v3);
  v2[4] = 0;
  uint64_t v5 = (std::__shared_weak_count *)v2[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(v2);
  long long v6 = (std::__shared_weak_count *)v1[2];
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C5B319C8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedIZZNS3_22checkFSSyncStatus_syncENS_5blockIU13block_pointerFvbbEEEEUb5_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISB_NSG_14default_deleteISB_EEEEENUlPvE_8__invokeESL_(xpc_object_t **a1)
{
  uint64_t v2 = *a1;
  if (*(_DWORD *)*a1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 1;
  }
  else
  {
    xpc_object_t value = xpc_dictionary_get_value(v2[1], (const char *)*MEMORY[0x1E4F4C590]);
    xpc_object_t object = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    uint64_t v3 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
    xpc_object_t v6 = xpc_dictionary_get_value(v2[1], (const char *)*MEMORY[0x1E4F4C598]);
    xpc_object_t object = v6;
    if (v6) {
      xpc_retain(v6);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    uint64_t v4 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  uint64_t v7 = (void (**)(xpc_object_t, uint64_t, uint64_t))v2[2];
  if (v7)
  {
    v7[2](v7, v3, v4);
    xpc_object_t v8 = v2[2];
    if (v8) {
      _Block_release(v8);
    }
  }
  xpc_release(v2[1]);
  operator delete(v2);
  CFAllocatorRef v9 = (std::__shared_weak_count *)a1[2];
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  operator delete(a1);
}

void sub_1C5B31B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  uint64_t v13 = *(const void **)(v11 + 16);
  if (v13) {
    _Block_release(v13);
  }
  xpc_release(*(xpc_object_t *)(v11 + 8));
  operator delete((void *)v11);
  uint64_t v14 = (std::__shared_weak_count *)v10[2];
  if (v14)
  {
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<BootModule::setVoiceCall_sync(BOOL)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setVoiceCall_sync(BOOL)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t *__p)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    uint64_t v3 = *__p;
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (__p[1])
      {
        int v6 = *((unsigned __int8 *)__p + 24);
        *(unsigned char *)(v3 + 288) = v6;
        uint64_t v7 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          xpc_object_t v8 = "YES";
          if (!v6) {
            xpc_object_t v8 = "NO";
          }
          int v10 = 136315138;
          uint64_t v11 = v8;
          _os_log_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_DEFAULT, "#I Voice Call: %s", (uint8_t *)&v10, 0xCu);
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    CFAllocatorRef v9 = (std::__shared_weak_count *)__p[2];
    if (v9) {
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(__p);
}

void dispatch::detail::group_notify<BootModule::setRat1_sync(abm::RadioAccessTechnology)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setRat1_sync(abm::RadioAccessTechnology)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(void *__p)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    uint64_t v3 = *__p;
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (__p[1])
      {
        *(_DWORD *)(v3 + 296) = *((_DWORD *)__p + 6);
        int v6 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          abm::asString();
          uint64_t v7 = v11 >= 0 ? &__pa : (void **)__pa;
          int v8 = *((_DWORD *)__p + 6);
          *(_DWORD *)buf = 136315394;
          uint64_t v13 = v7;
          __int16 v14 = 1024;
          int v15 = v8;
          _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#I RAT1: %s (%d)", buf, 0x12u);
          if (v11 < 0) {
            operator delete(__pa);
          }
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    CFAllocatorRef v9 = (std::__shared_weak_count *)__p[2];
    if (v9) {
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(__p);
}

void sub_1C5B31E9C(_Unwind_Exception *a1)
{
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v4 = (std::__shared_weak_count *)v1[2];
    if (!v4) {
      goto LABEL_3;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v4 = (std::__shared_weak_count *)v1[2];
    if (!v4)
    {
LABEL_3:
      operator delete(v1);
      _Unwind_Resume(a1);
    }
  }
  std::__shared_weak_count::__release_weak(v4);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<BootModule::setRat2_sync(abm::RadioAccessTechnology)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setRat2_sync(abm::RadioAccessTechnology)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(void *__p)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    uint64_t v3 = *__p;
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (__p[1])
      {
        *(_DWORD *)(v3 + 344) = *((_DWORD *)__p + 6);
        int v6 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          abm::asString();
          uint64_t v7 = v11 >= 0 ? &__pa : (void **)__pa;
          int v8 = *((_DWORD *)__p + 6);
          *(_DWORD *)buf = 136315394;
          uint64_t v13 = v7;
          __int16 v14 = 1024;
          int v15 = v8;
          _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#I RAT2: %s (%d)", buf, 0x12u);
          if (v11 < 0) {
            operator delete(__pa);
          }
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    CFAllocatorRef v9 = (std::__shared_weak_count *)__p[2];
    if (v9) {
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(__p);
}

void sub_1C5B3207C(_Unwind_Exception *a1)
{
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v4 = (std::__shared_weak_count *)v1[2];
    if (!v4) {
      goto LABEL_3;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v4 = (std::__shared_weak_count *)v1[2];
    if (!v4)
    {
LABEL_3:
      operator delete(v1);
      _Unwind_Resume(a1);
    }
  }
  std::__shared_weak_count::__release_weak(v4);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<BootModule::setPLMN1_sync(std::string)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setPLMN1_sync(std::string)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(char *__p)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)*((void *)__p + 2);
  if (!v2) {
    goto LABEL_21;
  }
  uint64_t v3 = *(void *)__p;
  uint64_t v4 = std::__shared_weak_count::lock(v2);
  if (!v4) {
    goto LABEL_21;
  }
  uint64_t v5 = v4;
  if (*((void *)__p + 1))
  {
    int v6 = __p + 24;
    uint64_t v7 = (void **)(v3 + 304);
    if ((char *)(v3 + 304) != __p + 24)
    {
      char v8 = __p[47];
      if (*(char *)(v3 + 327) < 0)
      {
        if (v8 >= 0) {
          int v10 = __p + 24;
        }
        else {
          int v10 = (char *)*((void *)__p + 3);
        }
        if (v8 >= 0) {
          size_t v11 = __p[47];
        }
        else {
          size_t v11 = *((void *)__p + 4);
        }
        std::string::__assign_no_alias<false>(v7, v10, v11);
      }
      else if (__p[47] < 0)
      {
        std::string::__assign_no_alias<true>(v7, *((void **)__p + 3), *((void *)__p + 4));
      }
      else
      {
        long long v9 = *v6;
        *(void *)(v3 + 320) = *((void *)__p + 5);
        *(_OWORD *)uint64_t v7 = v9;
      }
    }
    uint64_t v12 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      if (__p[47] < 0) {
        int v6 = *(_OWORD **)v6;
      }
      int v14 = 136315138;
      int v15 = v6;
      _os_log_impl(&dword_1C59C6000, v12, OS_LOG_TYPE_DEFAULT, "#I PLMN1: %s", (uint8_t *)&v14, 0xCu);
    }
  }
  if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_21:
    if ((__p[47] & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (__p[47] < 0) {
LABEL_22:
  }
    operator delete(*((void **)__p + 3));
LABEL_23:
  uint64_t v13 = (std::__shared_weak_count *)*((void *)__p + 2);
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  operator delete(__p);
}

void sub_1C5B3228C(_Unwind_Exception *a1)
{
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*(char *)(v1 + 47) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v5 = *(std::__shared_weak_count **)(v1 + 16);
      if (!v5) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  operator delete(*v3);
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 16);
  if (!v5)
  {
LABEL_4:
    operator delete((void *)v1);
    _Unwind_Resume(a1);
  }
LABEL_7:
  std::__shared_weak_count::__release_weak(v5);
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<BootModule::setPLMN2_sync(std::string)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setPLMN2_sync(std::string)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(char *__p)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)*((void *)__p + 2);
  if (!v2) {
    goto LABEL_21;
  }
  uint64_t v3 = *(void *)__p;
  uint64_t v4 = std::__shared_weak_count::lock(v2);
  if (!v4) {
    goto LABEL_21;
  }
  uint64_t v5 = v4;
  if (*((void *)__p + 1))
  {
    int v6 = __p + 24;
    uint64_t v7 = (void **)(v3 + 352);
    if ((char *)(v3 + 352) != __p + 24)
    {
      char v8 = __p[47];
      if (*(char *)(v3 + 375) < 0)
      {
        if (v8 >= 0) {
          int v10 = __p + 24;
        }
        else {
          int v10 = (char *)*((void *)__p + 3);
        }
        if (v8 >= 0) {
          size_t v11 = __p[47];
        }
        else {
          size_t v11 = *((void *)__p + 4);
        }
        std::string::__assign_no_alias<false>(v7, v10, v11);
      }
      else if (__p[47] < 0)
      {
        std::string::__assign_no_alias<true>(v7, *((void **)__p + 3), *((void *)__p + 4));
      }
      else
      {
        long long v9 = *v6;
        *(void *)(v3 + 368) = *((void *)__p + 5);
        *(_OWORD *)uint64_t v7 = v9;
      }
    }
    uint64_t v12 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      if (__p[47] < 0) {
        int v6 = *(_OWORD **)v6;
      }
      int v14 = 136315138;
      int v15 = v6;
      _os_log_impl(&dword_1C59C6000, v12, OS_LOG_TYPE_DEFAULT, "#I PLMN2: %s", (uint8_t *)&v14, 0xCu);
    }
  }
  if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_21:
    if ((__p[47] & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (__p[47] < 0) {
LABEL_22:
  }
    operator delete(*((void **)__p + 3));
LABEL_23:
  uint64_t v13 = (std::__shared_weak_count *)*((void *)__p + 2);
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  operator delete(__p);
}

void sub_1C5B324B4(_Unwind_Exception *a1)
{
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*(char *)(v1 + 47) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v5 = *(std::__shared_weak_count **)(v1 + 16);
      if (!v5) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  operator delete(*v3);
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 16);
  if (!v5)
  {
LABEL_4:
    operator delete((void *)v1);
    _Unwind_Resume(a1);
  }
LABEL_7:
  std::__shared_weak_count::__release_weak(v5);
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<BootModule::setCellId_sync(unsigned long long,BootModule::SimSlotIndex)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setCellId_sync(unsigned long long,BootModule::SimSlotIndex)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(void *__p)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    uint64_t v3 = *__p;
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (__p[1])
      {
        uint64_t v6 = __p[3];
        unsigned int v7 = *((_DWORD *)__p + 8);
        *(void *)(v3 + 48 * v7 + 328) = v6;
        char v8 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          v10[0] = 67109376;
          v10[1] = v7 + 1;
          __int16 v11 = 2048;
          uint64_t v12 = v6;
          _os_log_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_DEFAULT, "#I CellId%d: %llu", (uint8_t *)v10, 0x12u);
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    long long v9 = (std::__shared_weak_count *)__p[2];
    if (v9) {
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(__p);
}

void dispatch::detail::group_notify<BootModule::setAreaCode_sync(unsigned long long,BootModule::SimSlotIndex)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setAreaCode_sync(unsigned long long,BootModule::SimSlotIndex)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(void *__p)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    uint64_t v3 = *__p;
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (__p[1])
      {
        uint64_t v6 = __p[3];
        unsigned int v7 = *((_DWORD *)__p + 8);
        *(void *)(v3 + 48 * v7 + 336) = v6;
        char v8 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          v10[0] = 67109376;
          v10[1] = v7 + 1;
          __int16 v11 = 2048;
          uint64_t v12 = v6;
          _os_log_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_DEFAULT, "#I AreaCode%d: %llu", (uint8_t *)v10, 0x12u);
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    long long v9 = (std::__shared_weak_count *)__p[2];
    if (v9) {
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(__p);
}

void dispatch::async<void ctu::SharedSynchronizable<BootModule>::execute_wrapped<BootModule::bbResetFlag(BOOL)::$_0>(BootModule::bbResetFlag(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<BootModule::bbResetFlag(BOOL)::$_0,dispatch_queue_s *::default_delete<BootModule::bbResetFlag(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke(NSObject ****a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  if (*((unsigned char *)*a1 + 8))
  {
    uint64_t v4 = v3[52];
    if (v4)
    {
      dispatch_retain(v3[52]);
      dispatch_group_enter(v4);
    }
    uint64_t v5 = v3[53];
    v3[53] = v4;
    if (v5)
    {
      dispatch_group_leave(v5);
      dispatch_release(v5);
    }
    uint64_t v6 = v3[11];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v13 = 0;
      unsigned int v7 = "#I The baseband reset was detected.";
      char v8 = (uint8_t *)&v13;
LABEL_12:
      _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, v7, v8, 2u);
    }
  }
  else
  {
    long long v9 = v3[53];
    v3[53] = 0;
    if (v9)
    {
      dispatch_group_leave(v9);
      dispatch_release(v9);
    }
    uint64_t v6 = v3[11];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v12 = 0;
      unsigned int v7 = "#I The baseband reset-flag is reset.";
      char v8 = (uint8_t *)&v12;
      goto LABEL_12;
    }
  }
  int v10 = v3[55];
  v3[55] = 0;
  if (v10)
  {
    dispatch_resume(v10);
    dispatch_release(v10);
  }
  operator delete(v2);
  __int16 v11 = (std::__shared_weak_count *)a1[2];
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(a1);
}

uint64_t __cxx_global_var_init_172()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

uint64_t __cxx_global_var_init_173()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<HealthEventDB>::~PthreadMutexGuardPolicy, &ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

uint64_t __cxx_global_var_init_174()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

uint64_t __cxx_global_var_init_175()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

void StatsModule::create(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v4 = operator new(0xE8uLL);
  uint64_t v5 = (uint64_t)v4;
  uint64_t v6 = *a1;
  unsigned int v7 = (std::__shared_weak_count *)a1[1];
  v11[0] = v6;
  v11[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  StatsModule::StatsModule((uint64_t)v4, v11);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<StatsModule>::shared_ptr[abi:ne180100]<StatsModule,std::shared_ptr<StatsModule> ctu::SharedSynchronizable<StatsModule>::make_shared_ptr<StatsModule>(StatsModule*)::{lambda(StatsModule*)#1},void>(a2, v5);
  ctu::Loggable<StatsModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2 + 48);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = *a2;
  uint64_t v9 = *a2 + 120;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 0x40000000;
  v12[2] = ___ZN11StatsModule4initEv_block_invoke;
  v12[3] = &__block_descriptor_tmp_12;
  v12[4] = v8;
  __int16 v13 = v12;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI11StatsModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_31;
  block[4] = v9;
  block[5] = &v13;
  int v10 = *(NSObject **)(v8 + 136);
  if (*(void *)(v8 + 144)) {
    dispatch_async_and_wait(v10, block);
  }
  else {
    dispatch_sync(v10, block);
  }
}

void sub_1C5B32BAC(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v2);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(a1);
}

void StatsModule::init(StatsModule *this)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN11StatsModule4initEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_12;
  v3[4] = this;
  uint64_t v4 = v3;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI11StatsModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_31;
  block[4] = (char *)this + 120;
  block[5] = &v4;
  uint64_t v2 = (char *)this + 136;
  uint64_t v1 = *((void *)this + 17);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

uint64_t StatsModule::StatsModule(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1F2112348;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(void *)a1 = &unk_1F2103EC0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &unk_1F2103EC0;
  }
  *(void *)a1 = &unk_1F210DF08;
  *(void *)(a1 + 48) = &unk_1F210DF78;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v12, "com.apple.telephony.abm", "stats.mod");
  GetABMLogServer(&v10);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v6 = dispatch_queue_create_with_target_V2("stats.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v6, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v6);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = v6;
  if (v6)
  {
    dispatch_retain(v6);
    *(void *)(a1 + 144) = 0;
    dispatch_release(v6);
  }
  else
  {
    *(void *)(a1 + 144) = 0;
  }
  *(void *)(a1 + 48) = &unk_1F210E0F8;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v14);
  *(void *)(a1 + 56) = &unk_1F2102CB8;
  unsigned int v7 = v11;
  *(void *)(a1 + 104) = v10;
  *(void *)(a1 + 112) = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v13);
  *(void *)(a1 + 48) = &unk_1F210E188;
  uint64_t v8 = v11;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v12);
  *(void *)a1 = &unk_1F210DF08;
  *(void *)(a1 + 48) = &unk_1F210DF78;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = a1 + 184;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  return a1;
}

void sub_1C5B32F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a15);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a13);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v16);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  Service::~Service(v15);
  _Unwind_Resume(a1);
}

void sub_1C5B32FC4(_Unwind_Exception *a1)
{
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void StatsModule::~StatsModule(StatsModule *this)
{
  *(void *)this = &unk_1F210DF08;
  *((void *)this + 6) = &unk_1F210DF78;
  uint64_t v2 = *((void *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v16, 2u);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = (char *)this + 56;
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 26);
    if (!v5) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v4 = (char *)this + 56;
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 26);
    if (!v5) {
      goto LABEL_9;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_9:
  std::__tree<std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>,std::__map_value_compare<awd::AppID,std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>,std::less<awd::AppID>,true>,std::allocator<std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>>>::destroy(*((void **)this + 23));
  uint64_t v6 = *((void *)this + 19);
  if (v6)
  {
    uint64_t v7 = *((void *)this + 20);
    uint64_t v8 = (void *)*((void *)this + 19);
    if (v7 != v6)
    {
      do
      {
        if (*(char *)(v7 - 1) < 0) {
          operator delete(*(void **)(v7 - 24));
        }
        v7 -= 24;
      }
      while (v7 != v6);
      uint64_t v8 = (void *)*((void *)this + 19);
    }
    *((void *)this + 20) = v6;
    operator delete(v8);
  }
  *((void *)this + 6) = &unk_1F210E0F8;
  MEMORY[0x1C87940C0](v4);
  uint64_t v9 = *((void *)this + 18);
  if (v9) {
    dispatch_release(v9);
  }
  uint64_t v10 = *((void *)this + 17);
  if (v10) {
    dispatch_release(v10);
  }
  __int16 v11 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  *(void *)this = &unk_1F2112348;
  uint64_t v12 = *((void *)this + 3);
  if (v12)
  {
    uint64_t v13 = *((void *)this + 4);
    int v14 = (void *)*((void *)this + 3);
    if (v13 != v12)
    {
      do
      {
        if (*(char *)(v13 - 1) < 0) {
          operator delete(*(void **)(v13 - 24));
        }
        v13 -= 24;
      }
      while (v13 != v12);
      int v14 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v12;
    operator delete(v14);
  }
  int v15 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
}

{
  void *v1;
  uint64_t vars8;

  StatsModule::~StatsModule(this);

  operator delete(v1);
}

void non-virtual thunk to'StatsModule::~StatsModule(StatsModule *this)
{
}

{
  void *v1;
  uint64_t vars8;

  StatsModule::~StatsModule((StatsModule *)((char *)this - 48));

  operator delete(v1);
}

const char *StatsModule::getName(StatsModule *this)
{
  return "stats.mod";
}

void ___ZN11StatsModule4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(StatsModule **)(a1 + 32);
  uint64_t v2 = *((void *)v1 + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_debug_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEBUG, "#D Initializing", v3, 2u);
    StatsModule::initializeStats_sync(v1);
  }
  else
  {
    StatsModule::initializeStats_sync(v1);
  }
}

void StatsModule::initializeStats_sync(StatsModule *this)
{
  StatsModule::addStatsToModule_sync((uint64_t)this, 0);
  StatsAWD::create((uint64_t *)&v9);
  long long v2 = v9;
  long long v9 = 0uLL;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 26);
  *(_OWORD *)((char *)this + 200) = v2;
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v9 + 1);
  if (*((void *)&v9 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (AnalyticsHelper *)operator new(0x80uLL);
  AnalyticsHelper::AnalyticsHelper(v5);
  *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<AnalyticsHelper>::shared_ptr[abi:ne180100]<AnalyticsHelper,std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper*)#1},void>(&v9, (uint64_t)v5);
  ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(v9);
  long long v6 = v9;
  long long v9 = 0uLL;
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 28);
  *(_OWORD *)((char *)this + 216) = v6;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)&v9 + 1);
  if (*((void *)&v9 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1C5B334D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned char *StatsModule::getShutdownStages@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = operator new(1uLL);
  *a1 = v3;
  unsigned char *v3 = 3;
  uint64_t result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void StatsModule::shutdown(uint64_t a1, char a2, NSObject **a3)
{
  uint64_t v4 = (uint64_t *)(a1 + 120);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 1174405120;
  v6[2] = ___ZN11StatsModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v6[3] = &__block_descriptor_tmp_3_2;
  uint64_t v5 = *a3;
  dispatch_group_t group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(group);
  }
  char v8 = a2;
  ctu::SharedSynchronizable<StatsModule>::execute_wrapped(v4, (uint64_t)v6);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void StatsModule::initialize(uint64_t a1, NSObject **a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 1174405120;
  v5[2] = ___ZN11StatsModule10initializeEN8dispatch13group_sessionE_block_invoke;
  v5[3] = &__block_descriptor_tmp_6_9;
  uint64_t v3 = *a2;
  uint64_t v4 = (uint64_t *)(a1 + 120);
  v5[4] = a1;
  dispatch_group_t group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(group);
  }
  ctu::SharedSynchronizable<StatsModule>::execute_wrapped(v4, (uint64_t)v5);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void ___ZN11StatsModule10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  long long v2 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v2 || (v3 = *(void *)(v1 + 120), (uint64_t v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  long long v6 = (const void *)*MEMORY[0x1E4F4C738];
  size_t v7 = strlen((const char *)*MEMORY[0x1E4F4C738]);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  char v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    long long v9 = (void **)operator new(v10 + 1);
    __dst[1] = v8;
    unint64_t v17 = v11 | 0x8000000000000000;
    __dst[0] = v9;
    goto LABEL_12;
  }
  HIBYTE(v17) = v7;
  long long v9 = __dst;
  if (v7) {
LABEL_12:
  }
    memmove(v9, v6, (size_t)v8);
  *((unsigned char *)v8 + (void)v9) = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11StatsModule10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_5_12;
  aBlock[4] = v1;
  aBlock[5] = v3;
  int v14 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = _Block_copy(aBlock);
  int v15 = v12;
  Service::registerCommandHandler(v1, (uint64_t)__dst, &v15);
  if (v12) {
    _Block_release(v12);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(__dst[0]);
  }
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C5B338C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (v24) {
    _Block_release(v24);
  }
  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_5:
      std::__shared_weak_count::__release_weak(v23);
      _Unwind_Resume(a1);
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  std::__shared_weak_count::__release_weak(v23);
  _Unwind_Resume(a1);
}

void sub_1C5B33924(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void ___ZN11StatsModule10initializeEN8dispatch13group_sessionE_block_invoke_2(void *a1, void *a2, void *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  size_t v7 = (void *)a1[4];
  char v8 = std::__shared_weak_count::lock(v4);
  v27 = v8;
  if (!v8) {
    return;
  }
  long long v9 = v8;
  uint64_t v10 = a1[5];
  if (!v10) {
    goto LABEL_18;
  }
  if (MEMORY[0x1C8795EB0](*a2) != MEMORY[0x1E4F14590])
  {
    uint64_t v11 = v7[11];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v26 = *MEMORY[0x1E4F4C738];
      *(_DWORD *)xpc_object_t object = 136315138;
      *(void *)&object[4] = v26;
      _os_log_error_impl(&dword_1C59C6000, v11, OS_LOG_TYPE_ERROR, "No input is given for %s", object, 0xCu);
      if (!*a3)
      {
LABEL_18:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
    }
    else if (!*a3)
    {
      goto LABEL_18;
    }
    xpc_object_t v12 = xpc_null_create();
    uint64_t v13 = (void (**)(const void *, uint64_t, unsigned char *))*a3;
    *(void *)xpc_object_t object = v12;
    xpc_object_t v14 = xpc_null_create();
    v13[2](v13, 3760250880, object);
    xpc_release(*(xpc_object_t *)object);
    xpc_release(v14);
    goto LABEL_18;
  }
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v15 = (xpc_object_t)*a2;
  if (v15)
  {
    xpc_retain(v15);
    uint64_t v16 = (void (**)(const void *, uint64_t, unsigned char *))*a3;
    if (*a3) {
      goto LABEL_10;
    }
  }
  else
  {
    xpc_object_t v15 = xpc_null_create();
    uint64_t v16 = (void (**)(const void *, uint64_t, unsigned char *))*a3;
    if (*a3)
    {
LABEL_10:
      unint64_t v17 = _Block_copy(v16);
      int v18 = (std::__shared_weak_count *)v7[16];
      if (!v18) {
LABEL_23:
      }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_14;
    }
  }
  unint64_t v17 = 0;
  int v18 = (std::__shared_weak_count *)v7[16];
  if (!v18) {
    goto LABEL_23;
  }
LABEL_14:
  uint64_t v19 = v7[15];
  uint64_t v20 = std::__shared_weak_count::lock(v18);
  if (!v20) {
    goto LABEL_23;
  }
  uint64_t v21 = v20;
  uint64_t v22 = operator new(0x28uLL);
  void *v22 = v7;
  v22[1] = v10;
  v22[2] = v9;
  v22[3] = v15;
  xpc_object_t v23 = xpc_null_create();
  v22[4] = v17;
  v24 = v7[17];
  atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  unint64_t v25 = operator new(0x18uLL);
  void *v25 = v22;
  v25[1] = v19;
  v25[2] = v21;
  dispatch_async_f(v24, v25, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11StatsModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
  if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  xpc_release(v23);
  long long v9 = v27;
  if (v27) {
    goto LABEL_18;
  }
}

void sub_1C5B33BEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11StatsModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11StatsModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

BOOL StatsModule::reportStats_sync(uint64_t a1, int a2, xpc_object_t *a3)
{
  xpc_object_t v5 = *a3;
  char v8 = v5;
  if (v5)
  {
    xpc_retain(v5);
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    char v8 = v5;
  }
  BOOL updated = StatsModule::updateData_sync(a1, a2, &v8);
  xpc_release(v5);
  return updated;
}

void sub_1C5B33D04(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

BOOL StatsModule::updateData_sync(uint64_t a1, int a2, void **a3)
{
  CFTypeRef cf = 0;
  CFTypeRef v50 = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  uint64_t v6 = off_1EBBDCA58;
  if (!off_1EBBDCA58)
  {
    SharedData::create_default_global(__p);
    long long v7 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    char v8 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
    off_1EBBDCA58 = v7;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    long long v9 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    uint64_t v6 = off_1EBBDCA58;
  }
  uint64_t v10 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
  if (*(&off_1EBBDCA58 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA58 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  if (a2)
  {
    qmemcpy(__p, "UNKNOWN", 7);
    uint64_t v11 = 7;
    char v12 = 7;
  }
  else
  {
    qmemcpy(__p, "Boot Statistics", 15);
    uint64_t v11 = 15;
    char v12 = 15;
  }
  *((unsigned char *)__p + v11) = 0;
  char v48 = v12;
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 40));
  Preferences::getPreference<__CFDictionary const*>((uint64_t (***)(void, uint64_t))v6, (const char *)__p, &cf);
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 40));
  if (v48 < 0)
  {
    operator delete(__p[0]);
    if (!v10) {
      goto LABEL_19;
    }
  }
  else if (!v10)
  {
LABEL_19:
    CFTypeRef v13 = cf;
    if (!cf) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  CFTypeRef v13 = cf;
  if (cf) {
LABEL_20:
  }
    CFRetain(v13);
LABEL_21:
  CFTypeRef v14 = v50;
  CFTypeRef v50 = v13;
  if (v14) {
    CFRelease(v14);
  }
  uint64_t v16 = (uint64_t **)(a1 + 184);
  xpc_object_t v15 = *(uint64_t **)(a1 + 184);
  unint64_t v45 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v46 = 0xAAAAAAAAAAAAAAAALL;
  if (v15)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v17 = v15;
        int v18 = *((_DWORD *)v15 + 8);
        if (v18 <= a2) {
          break;
        }
        xpc_object_t v15 = (uint64_t *)*v17;
        uint64_t v16 = (uint64_t **)v17;
        if (!*v17) {
          goto LABEL_30;
        }
      }
      if (v18 >= a2) {
        break;
      }
      xpc_object_t v15 = (uint64_t *)v17[1];
      if (!v15)
      {
        uint64_t v16 = (uint64_t **)(v17 + 1);
        goto LABEL_30;
      }
    }
    long long v36 = v17 + 5;
    unint64_t v23 = v17[5];
    uint64_t v22 = (std::__shared_weak_count *)v36[1];
    unint64_t v45 = v23;
    unint64_t v46 = (unint64_t)v22;
    if (v22) {
      goto LABEL_33;
    }
  }
  else
  {
    unint64_t v17 = (uint64_t *)(a1 + 184);
LABEL_30:
    uint64_t v19 = operator new(0x38uLL);
    *((_DWORD *)v19 + 8) = a2;
    *((void *)v19 + 5) = 0;
    *((void *)v19 + 6) = 0;
    *(void *)uint64_t v19 = 0;
    *((void *)v19 + 1) = 0;
    *((void *)v19 + 2) = v17;
    *uint64_t v16 = (uint64_t *)v19;
    uint64_t v20 = **(void **)(a1 + 176);
    uint64_t v21 = (uint64_t *)v19;
    if (v20)
    {
      *(void *)(a1 + 176) = v20;
      uint64_t v21 = *v16;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 184), v21);
    ++*(void *)(a1 + 192);
    unint64_t v23 = *((void *)v19 + 5);
    uint64_t v22 = (std::__shared_weak_count *)*((void *)v19 + 6);
    unint64_t v45 = v23;
    unint64_t v46 = (unint64_t)v22;
    if (v22) {
LABEL_33:
    }
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v23) {
    goto LABEL_63;
  }
  CFTypeRef v24 = v50;
  CFTypeRef v44 = v50;
  if (v50) {
    CFRetain(v50);
  }
  unint64_t v25 = *a3;
  xpc_object_t object = v25;
  if (v25) {
    xpc_retain(v25);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(void **__return_ptr, unint64_t, CFTypeRef *, xpc_object_t *))(*(void *)v23 + 56))(__p, v23, &v44, &object);
  uint64_t v26 = __p[0];
  CFTypeRef v50 = __p[0];
  __p[0] = 0;
  if (v24)
  {
    CFRelease(v24);
    if (__p[0]) {
      CFRelease(__p[0]);
    }
  }
  xpc_release(object);
  xpc_object_t object = 0;
  if (v44) {
    CFRelease(v44);
  }
  if (!(v26
       ? ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get
       : 0))
  {
LABEL_63:
    BOOL v35 = 0;
    if (!v22) {
      goto LABEL_80;
    }
    goto LABEL_79;
  }
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  uint64_t v28 = off_1EBBDCA58;
  if (!off_1EBBDCA58)
  {
    SharedData::create_default_global(__p);
    long long v29 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v30 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
    off_1EBBDCA58 = v29;
    if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
    uint64_t v31 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
    uint64_t v28 = off_1EBBDCA58;
  }
  dispatch_object_t v32 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
  if (*(&off_1EBBDCA58 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA58 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  if (a2)
  {
    qmemcpy(__p, "UNKNOWN", 7);
    uint64_t v33 = 7;
    char v34 = 7;
  }
  else
  {
    qmemcpy(__p, "Boot Statistics", 15);
    uint64_t v33 = 15;
    char v34 = 15;
  }
  *((unsigned char *)__p + v33) = 0;
  char v48 = v34;
  CFTypeRef v37 = v50;
  os_unfair_lock_lock((os_unfair_lock_t)(v28 + 40));
  if (v48 >= 0) {
    xpc_object_t v38 = __p;
  }
  else {
    xpc_object_t v38 = (void **)__p[0];
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v51, (const char *)v38);
  CFStringRef v39 = (const __CFString *)v51[0];
  v51[1] = v37;
  if (v37)
  {
    CFRetain(v37);
    CFStringRef v40 = (const __CFString *)*MEMORY[0x1E4F1D3E0];
    CFPreferencesSetValue(v39, v37, *(CFStringRef *)(v28 + 8), *(CFStringRef *)(v28 + 16), (CFStringRef)*MEMORY[0x1E4F1D3E0]);
    BOOL v35 = CFPreferencesSynchronize(*(CFStringRef *)(v28 + 8), *(CFStringRef *)(v28 + 16), v40) != 0;
    CFRelease(v37);
    MEMORY[0x1C8794290](v51);
    os_unfair_lock_unlock((os_unfair_lock_t)(v28 + 40));
    if ((v48 & 0x80000000) == 0) {
      goto LABEL_73;
    }
LABEL_76:
    operator delete(__p[0]);
    if (!v32) {
      goto LABEL_78;
    }
LABEL_77:
    if (!atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      uint64_t v22 = (std::__shared_weak_count *)v46;
      if (!v46) {
        goto LABEL_80;
      }
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  BOOL v35 = 0;
  MEMORY[0x1C8794290](v51);
  os_unfair_lock_unlock((os_unfair_lock_t)(v28 + 40));
  if (v48 < 0) {
    goto LABEL_76;
  }
LABEL_73:
  if (v32) {
    goto LABEL_77;
  }
LABEL_78:
  uint64_t v22 = (std::__shared_weak_count *)v46;
  if (!v46) {
    goto LABEL_80;
  }
LABEL_79:
  if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    CFTypeRef v41 = v50;
    if (!v50) {
      return v35;
    }
    goto LABEL_81;
  }
LABEL_80:
  CFTypeRef v41 = v50;
  if (v50) {
LABEL_81:
  }
    CFRelease(v41);
  return v35;
}

void sub_1C5B34374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,const void *a21)
{
}

void sub_1C5B34454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void StatsModule::getAllStats_sync(StatsModule *this@<X0>, __CFDictionary **a2@<X8>)
{
  uint64_t v28 = 0;
  uint64_t v4 = *MEMORY[0x1E4F1CF80];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v6 = Mutable;
  if (Mutable) {
    uint64_t v28 = Mutable;
  }
  long long v7 = (char *)*((void *)this + 22);
  char v8 = (char *)this + 184;
  if (v7 != (char *)this + 184)
  {
    CFTypeRef v24 = a2;
    while (1)
    {
      v27 = 0;
      pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
      uint64_t v9 = off_1EBBDCA58;
      if (off_1EBBDCA58)
      {
        uint64_t v10 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
        if (!*(&off_1EBBDCA58 + 1)) {
          goto LABEL_9;
        }
LABEL_8:
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        goto LABEL_9;
      }
      SharedData::create_default_global(__p);
      long long v13 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      CFTypeRef v14 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
      off_1EBBDCA58 = v13;
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        xpc_object_t v15 = (std::__shared_weak_count *)__p[1];
        if (!__p[1]) {
          goto LABEL_37;
        }
      }
      else
      {
        xpc_object_t v15 = (std::__shared_weak_count *)__p[1];
        if (!__p[1]) {
          goto LABEL_37;
        }
      }
      if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
LABEL_37:
      uint64_t v9 = off_1EBBDCA58;
      uint64_t v10 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
      if (*(&off_1EBBDCA58 + 1)) {
        goto LABEL_8;
      }
LABEL_9:
      pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
      if (*((_DWORD *)v7 + 8))
      {
        qmemcpy(__p, "UNKNOWN", 7);
        uint64_t v11 = 7;
        char v12 = 7;
      }
      else
      {
        qmemcpy(__p, "Boot Statistics", 15);
        uint64_t v11 = 15;
        char v12 = 15;
      }
      *((unsigned char *)__p + v11) = 0;
      char v26 = v12;
      os_unfair_lock_lock((os_unfair_lock_t)(v9 + 40));
      Preferences::getPreference<__CFDictionary const*>((uint64_t (***)(void, uint64_t))v9, (const char *)__p, &v27);
      os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 40));
      if (v26 < 0)
      {
        operator delete(__p[0]);
        if (!v10) {
          goto LABEL_22;
        }
      }
      else if (!v10)
      {
        goto LABEL_22;
      }
      if (atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_22:
        unint64_t v17 = v27;
        if (!v27) {
          goto LABEL_29;
        }
        goto LABEL_23;
      }
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      unint64_t v17 = v27;
      if (!v27) {
        goto LABEL_29;
      }
LABEL_23:
      if (*((_DWORD *)v7 + 8))
      {
        qmemcpy(__p, "UNKNOWN", 7);
        uint64_t v18 = 7;
        char v19 = 7;
      }
      else
      {
        qmemcpy(__p, "Boot Statistics", 15);
        uint64_t v18 = 15;
        char v19 = 15;
      }
      *((unsigned char *)__p + v18) = 0;
      char v26 = v19;
      ctu::cf::insert<char const*,__CFDictionary const*>(v28, (const __CFString **)__p, v17, v4, v16);
      if ((v26 & 0x80000000) == 0)
      {
LABEL_29:
        uint64_t v20 = (char *)*((void *)v7 + 1);
        if (!v20) {
          goto LABEL_33;
        }
        goto LABEL_30;
      }
      operator delete(__p[0]);
      uint64_t v20 = (char *)*((void *)v7 + 1);
      if (!v20)
      {
        do
        {
LABEL_33:
          uint64_t v21 = (char *)*((void *)v7 + 2);
          BOOL v22 = *(void *)v21 == (void)v7;
          long long v7 = v21;
        }
        while (!v22);
        goto LABEL_5;
      }
      do
      {
LABEL_30:
        uint64_t v21 = v20;
        uint64_t v20 = *(char **)v20;
      }
      while (v20);
LABEL_5:
      long long v7 = v21;
      if (v21 == v8)
      {
        uint64_t v6 = v28;
        a2 = v24;
        break;
      }
    }
  }
  if (v6 && (CFTypeID v23 = CFGetTypeID(v6), v23 == CFDictionaryGetTypeID()))
  {
    *a2 = v6;
    CFRetain(v6);
  }
  else
  {
    *a2 = 0;
    if (!v6) {
      return;
    }
  }
  CFRelease(v6);
}

void sub_1C5B347F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, const void *a19)
{
}

void StatsModule::addStatsToModule_sync(uint64_t a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v21 = 0;
  BOOL v22 = 0;
  Stats::create(a2, __p);
  uint64_t v4 = __p[0];
  xpc_object_t v5 = (atomic_ullong *)__p[1];
  uint64_t v21 = __p[0];
  BOOL v22 = (std::__shared_weak_count *)__p[1];
  if (__p[0])
  {
    int v6 = *((_DWORD *)__p[0] + 26);
    char v8 = (uint64_t **)(a1 + 184);
    long long v7 = *(uint64_t **)(a1 + 184);
    if (v7)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = (uint64_t **)v7;
          int v10 = *((_DWORD *)v7 + 8);
          if (v6 >= v10) {
            break;
          }
          long long v7 = *v9;
          char v8 = v9;
          if (!*v9) {
            goto LABEL_9;
          }
        }
        if (v10 >= v6) {
          break;
        }
        long long v7 = v9[1];
        if (!v7)
        {
          char v8 = v9 + 1;
          goto LABEL_9;
        }
      }
      uint64_t v11 = v9;
      if (!__p[1]) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v9 = (uint64_t **)(a1 + 184);
LABEL_9:
      uint64_t v11 = operator new(0x38uLL);
      *((_DWORD *)v11 + 8) = v6;
      *((void *)v11 + 5) = 0;
      *((void *)v11 + 6) = 0;
      *(void *)uint64_t v11 = 0;
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 2) = v9;
      char *v8 = (uint64_t *)v11;
      uint64_t v12 = **(void **)(a1 + 176);
      long long v13 = (uint64_t *)v11;
      if (v12)
      {
        *(void *)(a1 + 176) = v12;
        long long v13 = *v8;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 184), v13);
      ++*(void *)(a1 + 192);
      uint64_t v4 = v21;
      xpc_object_t v5 = (atomic_ullong *)v22;
      if (!v22) {
        goto LABEL_13;
      }
    }
    atomic_fetch_add_explicit(v5 + 1, 1uLL, memory_order_relaxed);
LABEL_13:
    CFTypeRef v14 = (std::__shared_weak_count *)*((void *)v11 + 6);
    *((void *)v11 + 5) = v4;
    *((void *)v11 + 6) = v5;
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    goto LABEL_17;
  }
  xpc_object_t v15 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    if (a2)
    {
      qmemcpy(__p, "UNKNOWN", 7);
      uint64_t v17 = 7;
      char v18 = 7;
    }
    else
    {
      qmemcpy(__p, "Boot Statistics", 15);
      uint64_t v17 = 15;
      char v18 = 15;
    }
    *((unsigned char *)__p + v17) = 0;
    char v20 = v18;
    *(_DWORD *)buf = 136315138;
    CFTypeRef v24 = __p;
    _os_log_error_impl(&dword_1C59C6000, v15, OS_LOG_TYPE_ERROR, "Failed to create stats of %s", buf, 0xCu);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
  }
LABEL_17:
  CFAllocatorRef v16 = v22;
  if (v22)
  {
    if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_1C5B34AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C5B34AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void StatsModule::updateAnalyticsData_sync(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 216);
  if (v2)
  {
    uint64_t v3 = *a2;
    xpc_object_t object = v3;
    if (v3 && MEMORY[0x1C8795EB0](v3) == MEMORY[0x1E4F14590]) {
      xpc_retain(v3);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    AnalyticsHelper::updateData(v2, &object);
    xpc_release(object);
  }
  else
  {
    uint64_t v4 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_ERROR, "Analytics object has not created yet", buf, 2u);
    }
  }
}

void sub_1C5B34BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t ctu::Loggable<StatsModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<StatsModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (const char *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 16))();
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    char v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<StatsModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<StatsModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F210E0F8;
  MEMORY[0x1C87940C0](a1 + 1);
  return a1;
}

void ctu::Loggable<StatsModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F210E0F8;
  MEMORY[0x1C87940C0](a1 + 1);

  operator delete(a1);
}

void ctu::Loggable<StatsModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1C5B34E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C5B34EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<StatsModule>::shared_ptr[abi:ne180100]<StatsModule,std::shared_ptr<StatsModule> ctu::SharedSynchronizable<StatsModule>::make_shared_ptr<StatsModule>(StatsModule*)::{lambda(StatsModule*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210E138;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 120) = a2;
      *(void *)(a2 + 128) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 120) = a2;
  *(void *)(a2 + 128) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C5B34FE0(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<StatsModule> ctu::SharedSynchronizable<StatsModule>::make_shared_ptr<StatsModule>(StatsModule*)::{lambda(StatsModule*)#1}::operator() const(StatsModule*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C5B35008(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<StatsModule *,std::shared_ptr<StatsModule> ctu::SharedSynchronizable<StatsModule>::make_shared_ptr<StatsModule>(StatsModule*)::{lambda(StatsModule *)#1},std::allocator<StatsModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<StatsModule *,std::shared_ptr<StatsModule> ctu::SharedSynchronizable<StatsModule>::make_shared_ptr<StatsModule>(StatsModule*)::{lambda(StatsModule *)#1},std::allocator<StatsModule>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<StatsModule *,std::shared_ptr<StatsModule> ctu::SharedSynchronizable<StatsModule>::make_shared_ptr<StatsModule>(StatsModule*)::{lambda(StatsModule *)#1},std::allocator<StatsModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI11StatsModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI11StatsModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI11StatsModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI11StatsModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

uint64_t std::shared_ptr<StatsModule> ctu::SharedSynchronizable<StatsModule>::make_shared_ptr<StatsModule>(StatsModule*)::{lambda(StatsModule*)#1}::operator() const(StatsModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *ctu::SharedLoggable<StatsModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F210E0F8;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ctu::SharedLoggable<StatsModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F210E0F8;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void *___ZNK3ctu20SharedSynchronizableI11StatsModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void ctu::SharedSynchronizable<StatsModule>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  char v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI11StatsModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F210E1C0;
  block[5] = v5;
  uint64_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = a2;
  dispatch_async(v8, block);
  int v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI11StatsModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrIK11StatsModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrIK11StatsModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11StatsModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v31 = v2;
  uint64_t v3 = *(void *)v2;
  uint64_t v4 = (const char *)*MEMORY[0x1E4F4C190];
  if (xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E4F4C190]))
  {
    xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E4F4C188]);
    xpc_object_t v6 = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t v6 = xpc_null_create();
    }
    uint64_t v9 = MEMORY[0x1C8795EB0](v6);
    uint64_t v10 = MEMORY[0x1E4F14590];
    if (v9 != MEMORY[0x1E4F14590] && MEMORY[0x1C8795EB0](v6) != MEMORY[0x1E4F14568])
    {
      uint64_t v11 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        _os_log_error_impl(&dword_1C59C6000, v11, OS_LOG_TYPE_ERROR, "Data type should be dictionary/array", (uint8_t *)__p, 2u);
      }
      BOOL v8 = 0;
      goto LABEL_36;
    }
    memset(__p, 170, 24);
    xpc_object_t v12 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), v4);
    xpc_object_t object = v12;
    if (v12) {
      xpc_retain(v12);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)__p, (xpc *)&object, (const object *)"", v13);
    xpc_release(object);
    int v14 = SHIBYTE(__p[2]);
    if (SHIBYTE(__p[2]) >= 0) {
      size_t v15 = HIBYTE(__p[2]);
    }
    else {
      size_t v15 = (size_t)__p[1];
    }
    if (v15 != strlen((const char *)*MEMORY[0x1E4F4D330])
      || (SHIBYTE(__p[2]) >= 0 ? (CFAllocatorRef v16 = __p) : (CFAllocatorRef v16 = (void **)__p[0]),
          memcmp(v16, (const void *)*MEMORY[0x1E4F4D330], v15)))
    {
      if (v15 == strlen((const char *)*MEMORY[0x1E4F4D2D0])
        && (v14 >= 0 ? (uint64_t v17 = __p) : (uint64_t v17 = (void **)__p[0]), !memcmp(v17, (const void *)*MEMORY[0x1E4F4D2D0], v15)))
      {
        xpc_object_t v25 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E4F4C258]);
        xpc_object_t object = v25;
        if (v25) {
          xpc_retain(v25);
        }
        else {
          xpc_object_t object = xpc_null_create();
        }
        int v29 = xpc::dyn_cast_or_default((xpc *)&object, 0);
        xpc_release(object);
        xpc_object_t object = v6;
        if (v6)
        {
          xpc_retain(v6);
          xpc_object_t v30 = v6;
        }
        else
        {
          xpc_object_t v30 = xpc_null_create();
          xpc_object_t object = v30;
        }
        StatsModule::reportAWD_sync(v3, v29, &object);
        xpc_release(v30);
      }
      else
      {
        if (v15 != strlen((const char *)*MEMORY[0x1E4F4C158])
          || (v14 >= 0 ? (char v18 = __p) : (char v18 = (void **)__p[0]), memcmp(v18, (const void *)*MEMORY[0x1E4F4C158], v15)))
        {
          BOOL v8 = 0;
          if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
          {
LABEL_36:
            xpc_release(v6);
            goto LABEL_37;
          }
LABEL_35:
          operator delete(__p[0]);
          goto LABEL_36;
        }
        xpc_object_t object = v6;
        if (v6)
        {
          xpc_retain(v6);
          xpc_object_t v26 = v6;
        }
        else
        {
          xpc_object_t v26 = xpc_null_create();
          xpc_object_t object = v26;
        }
        StatsModule::updateAnalyticsData_sync(v3, &object);
        xpc_release(v26);
      }
      xpc_object_t object = 0;
      BOOL v8 = 1;
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
        goto LABEL_36;
      }
      goto LABEL_35;
    }
    xpc_object_t v24 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E4F4C258]);
    xpc_object_t object = v24;
    if (v24) {
      xpc_retain(v24);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    int v27 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
    xpc_object_t object = v6;
    if (v6 && MEMORY[0x1C8795EB0](v6) == v10)
    {
      xpc_retain(v6);
      xpc_object_t v28 = v6;
    }
    else
    {
      xpc_object_t v28 = xpc_null_create();
      xpc_object_t object = v28;
    }
    BOOL v8 = StatsModule::reportStats_sync(v3, v27, &object);
    xpc_release(v28);
    xpc_object_t object = 0;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  uint64_t v7 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__p[0]) = 0;
    _os_log_error_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_ERROR, "Stats type is missing!", (uint8_t *)__p, 2u);
  }
  BOOL v8 = 0;
LABEL_37:
  if (*(void *)(v2 + 32))
  {
    if (v8) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = 3760250880;
    }
    xpc_object_t v20 = xpc_null_create();
    uint64_t v21 = *(void *)(v2 + 32);
    __p[0] = v20;
    xpc_object_t v22 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, void **))(v21 + 16))(v21, v19, __p);
    xpc_release(__p[0]);
    xpc_release(v22);
  }
  _ZNSt3__110unique_ptrIZZZN11StatsModule10initializeEN8dispatch13group_sessionEEUb_EUb0_E3__0NS_14default_deleteIS4_EEED1B8ne180100Ev(&v31);
  CFTypeID v23 = (std::__shared_weak_count *)a1[2];
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  operator delete(a1);
}

void sub_1C5B358B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  xpc_release(v18);
  xpc_object_t object = 0;
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(v17);
  _ZNSt3__110unique_ptrIZZZN11StatsModule10initializeEN8dispatch13group_sessionEEUb_EUb0_E3__0NS_14default_deleteIS4_EEED1B8ne180100Ev(&a9);
  xpc_object_t v20 = (std::__shared_weak_count *)v16[2];
  if (v20)
  {
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t *_ZNSt3__110unique_ptrIZZZN11StatsModule10initializeEN8dispatch13group_sessionEEUb_EUb0_E3__0NS_14default_deleteIS4_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(const void **)(v2 + 32);
    if (v3) {
      _Block_release(v3);
    }
    xpc_release(*(xpc_object_t *)(v2 + 24));
    *(void *)(v2 + 24) = 0;
    uint64_t v4 = *(std::__shared_weak_count **)(v2 + 16);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t __cxx_global_var_init_9()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

const char *CPMSModule::getName(CPMSModule *this)
{
  return "cpms.mod";
}

void CPMSModule::create(uint64_t *a1@<X0>, void *a2@<X8>)
{
  if (capabilities::abs::getCPMSVariant((capabilities::abs *)a1) == 1)
  {
    *a2 = 0;
    a2[1] = 0;
    uint64_t v4 = operator new(0x1B8uLL);
    uint64_t v5 = v4;
    uint64_t v6 = *a1;
    uint64_t v7 = (std::__shared_weak_count *)a1[1];
    v22[0] = v6;
    v22[1] = (uint64_t)v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    CPMSModule::CPMSModule((uint64_t)v4, v22);
    CFTypeID v23 = v5;
    unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
    BOOL v8 = (std::__shared_weak_count *)operator new(0x20uLL);
    v8->__shared_owners_ = 0;
    p_shared_owners = &v8->__shared_owners_;
    v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210E5B0;
    v8->__shared_weak_owners_ = 0;
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
    unint64_t v24 = (unint64_t)v8;
    uint64_t v10 = (std::__shared_weak_count *)*((void *)v5 + 16);
    if (v10)
    {
      if (v10->__shared_owners_ != -1) {
        goto LABEL_13;
      }
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *((void *)v5 + 15) = v5;
      *((void *)v5 + 16) = v8;
      std::__shared_weak_count::__release_weak(v10);
      if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_13;
      }
    }
    else
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *((void *)v5 + 15) = v5;
      *((void *)v5 + 16) = v8;
      if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_13:
        xpc_object_t v12 = v23;
        if (v23[13])
        {
          long long v13 = (std::__shared_weak_count *)v23[16];
          if (!v13 || (uint64_t v14 = v23[15], (v15 = std::__shared_weak_count::lock(v13)) == 0)) {
            std::__throw_bad_weak_ptr[abi:ne180100]();
          }
          CFAllocatorRef v16 = v15;
          *(void *)buf = v14;
          xpc_object_t v28 = v15;
          ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v12 + 7));
          uint64_t v17 = v14 + 48;
          if (!v14) {
            uint64_t v17 = 0;
          }
          uint64_t v25 = v17;
          xpc_object_t v26 = v16;
          *(void *)buf = 0;
          xpc_object_t v28 = 0;
          ctu::TrackedLogger::registerLoggerToServer();
          char v18 = v26;
          if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
          uint64_t v19 = v28;
          if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
          xpc_object_t v12 = v23;
        }
        unint64_t v20 = v24;
        *a2 = v12;
        a2[1] = v20;
        if (v7) {
          std::__shared_weak_count::__release_weak(v7);
        }
        if (!v12)
        {
          uint64_t v21 = GetOsLogContext()[1];
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1C59C6000, v21, OS_LOG_TYPE_DEFAULT, "Failed to create CPMS Module!", buf, 2u);
          }
        }
        return;
      }
    }
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    goto LABEL_13;
  }
  uint64_t v11 = GetOsLogContext()[1];
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C59C6000, v11, OS_LOG_TYPE_DEFAULT, "User-space CPMS not supported!", buf, 2u);
  }
  *a2 = 0;
  a2[1] = 0;
}

void sub_1C5B35E08()
{
}

void sub_1C5B35E68()
{
}

void sub_1C5B35E78()
{
}

void sub_1C5B35E84(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t CPMSModule::CPMSModule(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1F2112348;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(void *)a1 = &unk_1F210CD08;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &unk_1F210CD08;
  }
  *(void *)a1 = &unk_1F210E200;
  *(void *)(a1 + 48) = &unk_1F210E270;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v12, "com.apple.telephony.abm", "cpms.mod");
  GetABMLogServer(&v10);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v6 = dispatch_queue_create_with_target_V2("cpms.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v6, QOS_CLASS_UTILITY, 0);
  dispatch_activate(v6);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = v6;
  if (v6)
  {
    dispatch_retain(v6);
    *(void *)(a1 + 144) = 0;
    dispatch_release(v6);
  }
  else
  {
    *(void *)(a1 + 144) = 0;
  }
  *(void *)(a1 + 48) = &unk_1F210E570;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v14);
  *(void *)(a1 + 56) = &unk_1F2102CB8;
  uint64_t v7 = v11;
  *(void *)(a1 + 104) = v10;
  *(void *)(a1 + 112) = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v13);
  *(void *)(a1 + 48) = &unk_1F210E600;
  BOOL v8 = v11;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v12);
  *(void *)a1 = &unk_1F210E200;
  *(void *)(a1 + 48) = &unk_1F210E270;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 240) = a1 + 248;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(void *)(a1 + 229) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 272) = a1 + 280;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 304) = a1 + 312;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = a1 + 344;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = a1 + 376;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = a1 + 408;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = TelephonyBasebandCreateController();
  return a1;
}

void sub_1C5B3623C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v23 = v14;
  unint64_t v20 = v15;
  PowerBudget::~PowerBudget(v19);
  PowerBudget::~PowerBudget(v18);
  PowerBudget::~PowerBudget(v17);
  PowerBudget::~PowerBudget(v16);
  PowerBudget::~PowerBudget(v13);
  PowerBudget::~PowerBudget(v20);
  uint64_t v22 = *((void *)v10 + 28);
  *((void *)v10 + 28) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v23);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](a10);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v12);
  ctu::SharedLoggable<CPMSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v11);
  Service::~Service(v10);
  _Unwind_Resume(a1);
}

void sub_1C5B362D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v12 = va_arg(va3, void);
  uint64_t v14 = va_arg(va3, void);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v4);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  Service::~Service(v3);
  _Unwind_Resume(a1);
}

void sub_1C5B3631C(_Unwind_Exception *a1)
{
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void *ctu::SharedLoggable<CPMSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F210E570;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1F210E570;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void CPMSModule::~CPMSModule(CPMSModule *this)
{
  *(void *)this = &unk_1F210E200;
  *((void *)this + 6) = &unk_1F210E270;
  uint64_t v2 = *((void *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)CFAllocatorRef v16 = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v16, 2u);
  }
  uint64_t v3 = (const void *)*((void *)this + 54);
  if (v3) {
    CFRelease(v3);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 400, *((void **)this + 51));
  *((void *)this + 51) = 0;
  *((void *)this + 52) = 0;
  *((void *)this + 50) = (char *)this + 408;

  *((void *)this + 53) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 400, *((void **)this + 51));
  *((void *)this + 51) = 0;
  *((void *)this + 52) = 0;
  *((void *)this + 50) = (char *)this + 408;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 368, *((void **)this + 47));
  *((void *)this + 47) = 0;
  *((void *)this + 48) = 0;
  *((void *)this + 46) = (char *)this + 376;

  *((void *)this + 49) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 368, *((void **)this + 47));
  *((void *)this + 47) = 0;
  *((void *)this + 48) = 0;
  *((void *)this + 46) = (char *)this + 376;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 336, *((void **)this + 43));
  *((void *)this + 43) = 0;
  *((void *)this + 44) = 0;
  *((void *)this + 42) = (char *)this + 344;

  *((void *)this + 45) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 336, *((void **)this + 43));
  *((void *)this + 43) = 0;
  *((void *)this + 44) = 0;
  *((void *)this + 42) = (char *)this + 344;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 304, *((void **)this + 39));
  *((void *)this + 39) = 0;
  *((void *)this + 40) = 0;
  *((void *)this + 38) = (char *)this + 312;

  *((void *)this + 41) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 304, *((void **)this + 39));
  *((void *)this + 39) = 0;
  *((void *)this + 40) = 0;
  *((void *)this + 38) = (char *)this + 312;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 272, *((void **)this + 35));
  *((void *)this + 35) = 0;
  *((void *)this + 36) = 0;
  *((void *)this + 34) = (char *)this + 280;

  *((void *)this + 37) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 272, *((void **)this + 35));
  uint64_t v4 = (void *)*((void *)this + 31);
  *((void *)this + 34) = (char *)this + 280;
  *((void *)this + 35) = 0;
  *((void *)this + 36) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 240, v4);
  *((void *)this + 30) = (char *)this + 248;
  *((void *)this + 31) = 0;
  *((void *)this + 32) = 0;

  *((void *)this + 33) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 240, *((void **)this + 31));
  *((void *)this + 31) = 0;
  *((void *)this + 32) = 0;
  *((void *)this + 30) = (char *)this + 248;
  uint64_t v5 = *((void *)this + 28);
  *((void *)this + 28) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 20);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  *((void *)this + 6) = &unk_1F210E570;
  MEMORY[0x1C87940C0]((char *)this + 56);
  uint64_t v9 = *((void *)this + 18);
  if (v9) {
    dispatch_release(v9);
  }
  uint64_t v10 = *((void *)this + 17);
  if (v10) {
    dispatch_release(v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  *(void *)this = &unk_1F2112348;
  uint64_t v12 = *((void *)this + 3);
  if (v12)
  {
    uint64_t v13 = *((void *)this + 4);
    uint64_t v14 = (void *)*((void *)this + 3);
    if (v13 != v12)
    {
      do
      {
        if (*(char *)(v13 - 1) < 0) {
          operator delete(*(void **)(v13 - 24));
        }
        v13 -= 24;
      }
      while (v13 != v12);
      uint64_t v14 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v12;
    operator delete(v14);
  }
  size_t v15 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
}

{
  void *v1;
  uint64_t vars8;

  CPMSModule::~CPMSModule(this);

  operator delete(v1);
}

void non-virtual thunk to'CPMSModule::~CPMSModule(CPMSModule *this)
{
}

{
  void *v1;
  uint64_t vars8;

  CPMSModule::~CPMSModule((CPMSModule *)((char *)this - 48));

  operator delete(v1);
}

void CPMSModule::shutdown(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = operator new(0x10uLL);
  void *v8 = a1;
  v8[1] = v3;
  uint64_t v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  _DWORD v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<CPMSModule>::execute_wrapped<CPMSModule::shutdown(dispatch::group_session)::$_0>(CPMSModule::shutdown(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CPMSModule::shutdown(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<CPMSModule::shutdown(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void CPMSModule::initialize(void *a1, NSObject **a2)
{
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3321888768;
  uint64_t v11[2] = ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke;
  v11[3] = &__block_descriptor_48_e8_40c30_ZTSN8dispatch13group_sessionE_e5_v8__0l;
  uint64_t v3 = *a2;
  v11[4] = a1;
  dispatch_group_t group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(group);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = a1[17];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3321888768;
  block[2] = ___ZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F210E698;
  block[5] = v5;
  uint64_t v14 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = v11;
  dispatch_async(v8, block);
  uint64_t v10 = v14;
  if (!v14 || atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_9:
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v2 || (v3 = *(void *)(v1 + 120), (uint64_t v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v7 = (const void *)off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)__dst, v6);
    long long v8 = *(_OWORD *)__dst;
    *(_OWORD *)__dst = 0uLL;
    uint64_t v9 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v8;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    uint64_t v10 = *(std::__shared_weak_count **)&__dst[8];
    if (*(void *)&__dst[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&__dst[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    uint64_t v7 = (const void *)off_1EBBDCA08;
  }
  v81[1] = v7;
  v82 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(long long *__return_ptr, const void *))(*(void *)v7 + 104))(&v83, v7);
  long long v11 = v83;
  long long v83 = 0uLL;
  uint64_t v12 = *(std::__shared_weak_count **)(v1 + 200);
  *(_OWORD *)(v1 + 192) = v11;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  uint64_t v13 = (std::__shared_weak_count *)*((void *)&v83 + 1);
  if (*((void *)&v83 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v83 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (!v82 || atomic_fetch_add(&v82->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (*(void *)(v1 + 192)) {
      goto LABEL_24;
    }
LABEL_112:
    v63 = *(NSObject **)(v1 + 88);
    if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__dst = 0;
      _os_log_error_impl(&dword_1C59C6000, v63, OS_LOG_TYPE_ERROR, "Failed to create CPMS Command Driver", __dst, 2u);
    }
    goto LABEL_114;
  }
  ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
  std::__shared_weak_count::__release_weak(v82);
  if (!*(void *)(v1 + 192)) {
    goto LABEL_112;
  }
LABEL_24:
  uint64_t v14 = (const void *)*MEMORY[0x1E4F4C2F0];
  size_t v15 = strlen((const char *)*MEMORY[0x1E4F4C2F0]);
  if (v15 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v16 = v15;
  if (v15 >= 0x17)
  {
    uint64_t v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v18 = v15 | 7;
    }
    uint64_t v19 = v18 + 1;
    uint64_t v17 = operator new(v18 + 1);
    *(void *)&__dst[8] = v16;
    *(void *)&__dst[16] = v19 | 0x8000000000000000;
    *(void *)__dst = v17;
    goto LABEL_31;
  }
  __dst[23] = v15;
  uint64_t v17 = __dst;
  if (v15) {
LABEL_31:
  }
    memmove(v17, v14, v16);
  v17[v16] = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke_3;
  aBlock[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  aBlock[4] = v1;
  aBlock[5] = v3;
  v80 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unint64_t v20 = _Block_copy(aBlock);
  v81[0] = v20;
  Service::registerCommandHandler(v1, (uint64_t)__dst, v81);
  if (v20) {
    _Block_release(v20);
  }
  if ((__dst[23] & 0x80000000) != 0) {
    operator delete(*(void **)__dst);
  }
  uint64_t v21 = (const void *)*MEMORY[0x1E4F4CEF0];
  size_t v22 = strlen((const char *)*MEMORY[0x1E4F4CEF0]);
  if (v22 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v23 = v22;
  if (v22 >= 0x17)
  {
    uint64_t v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17) {
      uint64_t v25 = v22 | 7;
    }
    uint64_t v26 = v25 + 1;
    unint64_t v24 = operator new(v25 + 1);
    *(void *)&__dst[8] = v23;
    *(void *)&__dst[16] = v26 | 0x8000000000000000;
    *(void *)__dst = v24;
    goto LABEL_43;
  }
  __dst[23] = v22;
  unint64_t v24 = __dst;
  if (v22) {
LABEL_43:
  }
    memmove(v24, v21, v23);
  v24[v23] = 0;
  v76[0] = MEMORY[0x1E4F143A8];
  v76[1] = 3321888768;
  v76[2] = ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke_5;
  v76[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v76[4] = v1;
  v76[5] = v3;
  v77 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  int v27 = _Block_copy(v76);
  v78 = v27;
  Service::registerCommandHandler(v1, (uint64_t)__dst, &v78);
  if (v27) {
    _Block_release(v27);
  }
  if ((__dst[23] & 0x80000000) != 0) {
    operator delete(*(void **)__dst);
  }
  xpc_object_t v28 = (const void *)*MEMORY[0x1E4F4C6C0];
  size_t v29 = strlen((const char *)*MEMORY[0x1E4F4C6C0]);
  if (v29 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v30 = v29;
  if (v29 >= 0x17)
  {
    uint64_t v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17) {
      uint64_t v32 = v29 | 7;
    }
    uint64_t v33 = v32 + 1;
    uint64_t v31 = operator new(v32 + 1);
    *(void *)&__dst[8] = v30;
    *(void *)&__dst[16] = v33 | 0x8000000000000000;
    *(void *)__dst = v31;
    goto LABEL_55;
  }
  __dst[23] = v29;
  uint64_t v31 = __dst;
  if (v29) {
LABEL_55:
  }
    memmove(v31, v28, v30);
  v31[v30] = 0;
  v73[0] = MEMORY[0x1E4F143A8];
  v73[1] = 3321888768;
  v73[2] = ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke_2;
  v73[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v73[4] = v1;
  v73[5] = v3;
  v74 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  char v34 = _Block_copy(v73);
  v75 = v34;
  Service::registerCommandHandler(v1, (uint64_t)__dst, &v75);
  if (v34) {
    _Block_release(v34);
  }
  if ((__dst[23] & 0x80000000) != 0) {
    operator delete(*(void **)__dst);
  }
  BOOL v35 = (const void *)*MEMORY[0x1E4F4C280];
  size_t v36 = strlen((const char *)*MEMORY[0x1E4F4C280]);
  if (v36 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v37 = v36;
  if (v36 >= 0x17)
  {
    uint64_t v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17) {
      uint64_t v39 = v36 | 7;
    }
    uint64_t v40 = v39 + 1;
    xpc_object_t v38 = operator new(v39 + 1);
    *(void *)&__dst[8] = v37;
    *(void *)&__dst[16] = v40 | 0x8000000000000000;
    *(void *)__dst = v38;
    goto LABEL_67;
  }
  __dst[23] = v36;
  xpc_object_t v38 = __dst;
  if (v36) {
LABEL_67:
  }
    memmove(v38, v35, v37);
  v38[v37] = 0;
  v70[0] = MEMORY[0x1E4F143A8];
  v70[1] = 3321888768;
  v70[2] = ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke_3;
  v70[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v70[4] = v1;
  v70[5] = v3;
  v71 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  CFTypeRef v41 = _Block_copy(v70);
  v72 = v41;
  Service::registerCommandHandler(v1, (uint64_t)__dst, &v72);
  if (v41) {
    _Block_release(v41);
  }
  if ((__dst[23] & 0x80000000) != 0) {
    operator delete(*(void **)__dst);
  }
  char v42 = (const void *)*MEMORY[0x1E4F4C228];
  size_t v43 = strlen((const char *)*MEMORY[0x1E4F4C228]);
  if (v43 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v44 = v43;
  if (v43 >= 0x17)
  {
    uint64_t v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17) {
      uint64_t v46 = v43 | 7;
    }
    uint64_t v47 = v46 + 1;
    unint64_t v45 = operator new(v46 + 1);
    *(void *)&__dst[8] = v44;
    *(void *)&__dst[16] = v47 | 0x8000000000000000;
    *(void *)__dst = v45;
    goto LABEL_79;
  }
  __dst[23] = v43;
  unint64_t v45 = __dst;
  if (v43) {
LABEL_79:
  }
    memmove(v45, v42, v44);
  v45[v44] = 0;
  v67[0] = MEMORY[0x1E4F143A8];
  v67[1] = 3321888768;
  v67[2] = ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke_4;
  v67[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v67[4] = v1;
  v67[5] = v3;
  v68 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  char v48 = _Block_copy(v67);
  v69 = v48;
  Service::registerCommandHandler(v1, (uint64_t)__dst, &v69);
  if (v48) {
    _Block_release(v48);
  }
  if ((__dst[23] & 0x80000000) != 0) {
    operator delete(*(void **)__dst);
  }
  GetABMLogServer(&v65);
  ctu::DispatchTimerService::create();
  long long v49 = *(_OWORD *)__dst;
  *(_OWORD *)__dst = 0uLL;
  CFTypeRef v50 = *(std::__shared_weak_count **)(v1 + 216);
  *(_OWORD *)(v1 + 208) = v49;
  if (v50 && !atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
  }
  v51 = *(std::__shared_weak_count **)&__dst[8];
  if (*(void *)&__dst[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&__dst[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
  }
  v52 = v66;
  if (v66 && !atomic_fetch_add(&v66->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
    std::__shared_weak_count::__release_weak(v52);
  }
  uint64_t v53 = [MEMORY[0x1E4F56670] sharedCPMSAgent];
  *(void *)(v1 + 168) = v53;
  if (v53)
  {
    if ((CPMSModule::initPowerConfig_sync((id *)v1) & 1) == 0)
    {
      v62 = *(NSObject **)(v1 + 88);
      if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__dst = 0;
        _os_log_error_impl(&dword_1C59C6000, v62, OS_LOG_TYPE_ERROR, "Failed to initialization of CPMS power config.", __dst, 2u);
        v61 = v68;
        if (!v68) {
          goto LABEL_103;
        }
        goto LABEL_102;
      }
LABEL_101:
      v61 = v68;
      if (!v68)
      {
LABEL_103:
        if (v71) {
          std::__shared_weak_count::__release_weak(v71);
        }
        if (v74) {
          std::__shared_weak_count::__release_weak(v74);
        }
        if (v77) {
          std::__shared_weak_count::__release_weak(v77);
        }
        if (v80) {
          std::__shared_weak_count::__release_weak(v80);
        }
LABEL_114:
        std::__shared_weak_count::__release_weak(v5);
        return;
      }
LABEL_102:
      std::__shared_weak_count::__release_weak(v61);
      goto LABEL_103;
    }
    xpc_object_t v54 = *(std::__shared_weak_count **)(v1 + 128);
    if (v54)
    {
      uint64_t v55 = *(void *)(v1 + 120);
      v56 = std::__shared_weak_count::lock(v54);
      if (v56)
      {
        xpc_object_t v57 = v56;
        v58 = operator new(8uLL);
        void *v58 = v1;
        unint64_t v59 = *(NSObject **)(v1 + 136);
        atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
        v60 = operator new(0x18uLL);
        void *v60 = v58;
        v60[1] = v55;
        v60[2] = v57;
        dispatch_async_f(v59, v60, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZNS3_10initializeENS_13group_sessionEEUb_E3__5EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
        if (!atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
          v61 = v68;
          if (!v68) {
            goto LABEL_103;
          }
          goto LABEL_102;
        }
        goto LABEL_101;
      }
    }
LABEL_125:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v64 = GetOsLogContext()[1];
  if (os_log_type_enabled(v64, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)__dst = 136315906;
    *(void *)&__dst[4] = "ABM ASSERT";
    *(_WORD *)&__dst[12] = 2080;
    *(void *)&__dst[14] = "fCPMSAgent";
    *(_WORD *)&__dst[22] = 2080;
    v85 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Serve"
          "r/CPMS/CPMSModule.mm";
    __int16 v86 = 1024;
    int v87 = 232;
    _os_log_fault_impl(&dword_1C59C6000, v64, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", __dst, 0x26u);
    __break(1u);
    goto LABEL_125;
  }
  __break(1u);
}

void sub_1C5B3764C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,std::__shared_weak_count *a41)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1C5B37854()
{
}

void ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke_3(void *a1, uint64_t a2, const void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = (void *)a1[4];
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      long long v8 = v7;
      uint64_t v9 = a1[5];
      if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v9) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v8);
        if (!v9) {
          return;
        }
      }
      uint64_t v11 = a1[5];
      uint64_t v10 = (std::__shared_weak_count *)a1[6];
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (*a3)
      {
        uint64_t v12 = _Block_copy(*a3);
        uint64_t v13 = (std::__shared_weak_count *)v6[16];
        if (!v13) {
LABEL_23:
        }
          std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      else
      {
        uint64_t v12 = 0;
        uint64_t v13 = (std::__shared_weak_count *)v6[16];
        if (!v13) {
          goto LABEL_23;
        }
      }
      uint64_t v14 = v6[15];
      size_t v15 = std::__shared_weak_count::lock(v13);
      if (!v15) {
        goto LABEL_23;
      }
      size_t v16 = v15;
      uint64_t v17 = operator new(0x20uLL);
      uint64_t v18 = v17;
      void *v17 = v11;
      v17[1] = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v17[2] = v6;
      v17[3] = v12;
      uint64_t v19 = v6[17];
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v20 = operator new(0x18uLL);
      *unint64_t v20 = v18;
      v20[1] = v14;
      v20[2] = v16;
      dispatch_async_f(v19, v20, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
      if (atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v10) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
        if (!v10) {
          return;
        }
      }
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke_5(void *a1, xpc_object_t *a2, const void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = (void *)a1[4];
    long long v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = a1[5];
      if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v10) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v9);
        if (!v10) {
          return;
        }
      }
      xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C170]);
      xpc_object_t object = value;
      if (value) {
        xpc_retain(value);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      int v12 = xpc::dyn_cast_or_default((xpc *)&object, 0);
      xpc_release(object);
      uint64_t v14 = a1[5];
      uint64_t v13 = (std::__shared_weak_count *)a1[6];
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (*a3)
      {
        size_t v15 = _Block_copy(*a3);
        size_t v16 = (std::__shared_weak_count *)v7[16];
        if (!v16) {
LABEL_24:
        }
          std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      else
      {
        size_t v15 = 0;
        size_t v16 = (std::__shared_weak_count *)v7[16];
        if (!v16) {
          goto LABEL_24;
        }
      }
      uint64_t v17 = v7[15];
      uint64_t v18 = std::__shared_weak_count::lock(v16);
      if (!v18) {
        goto LABEL_24;
      }
      uint64_t v19 = v18;
      unint64_t v20 = operator new(0x28uLL);
      uint64_t v21 = v20;
      *unint64_t v20 = v14;
      v20[1] = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v20[2] = v7;
      *((_DWORD *)v20 + 6) = v12;
      v20[4] = v15;
      size_t v22 = v7[17];
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      size_t v23 = operator new(0x18uLL);
      *size_t v23 = v21;
      v23[1] = v17;
      v23[2] = v19;
      dispatch_async_f(v22, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
      if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      if (v13) {
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
}

void sub_1C5B37C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke_2(void *a1, uint64_t a2, const void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = (void *)a1[4];
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      long long v8 = v7;
      uint64_t v9 = a1[5];
      if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v9) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v8);
        if (!v9) {
          return;
        }
      }
      uint64_t v11 = a1[5];
      uint64_t v10 = (std::__shared_weak_count *)a1[6];
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (*a3)
      {
        int v12 = _Block_copy(*a3);
        uint64_t v13 = (std::__shared_weak_count *)v6[16];
        if (!v13) {
LABEL_23:
        }
          std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      else
      {
        int v12 = 0;
        uint64_t v13 = (std::__shared_weak_count *)v6[16];
        if (!v13) {
          goto LABEL_23;
        }
      }
      uint64_t v14 = v6[15];
      size_t v15 = std::__shared_weak_count::lock(v13);
      if (!v15) {
        goto LABEL_23;
      }
      size_t v16 = v15;
      uint64_t v17 = operator new(0x20uLL);
      uint64_t v18 = v17;
      void *v17 = v11;
      v17[1] = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v17[2] = v6;
      v17[3] = v12;
      uint64_t v19 = v6[17];
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v20 = operator new(0x18uLL);
      *unint64_t v20 = v18;
      v20[1] = v14;
      v20[2] = v16;
      dispatch_async_f(v19, v20, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb2_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
      if (atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v10) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
        if (!v10) {
          return;
        }
      }
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke_3(void *a1, xpc_object_t *a2, const void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = (void *)a1[4];
  long long v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  uint64_t v10 = a1[5];
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v10) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10) {
      return;
    }
  }
  uint64_t v12 = a1[5];
  uint64_t v11 = (std::__shared_weak_count *)a1[6];
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v13 = *a2;
  if (v13)
  {
    xpc_retain(v13);
    uint64_t v14 = *a3;
    if (*a3) {
      goto LABEL_11;
    }
  }
  else
  {
    xpc_object_t v13 = xpc_null_create();
    uint64_t v14 = *a3;
    if (*a3)
    {
LABEL_11:
      size_t v15 = _Block_copy(v14);
      size_t v16 = (std::__shared_weak_count *)v7[16];
      if (!v16) {
LABEL_25:
      }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_15;
    }
  }
  size_t v15 = 0;
  size_t v16 = (std::__shared_weak_count *)v7[16];
  if (!v16) {
    goto LABEL_25;
  }
LABEL_15:
  uint64_t v17 = v7[15];
  uint64_t v18 = std::__shared_weak_count::lock(v16);
  if (!v18) {
    goto LABEL_25;
  }
  uint64_t v19 = v18;
  unint64_t v20 = operator new(0x28uLL);
  uint64_t v21 = v20;
  *unint64_t v20 = v12;
  v20[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  v20[2] = v7;
  v20[3] = v13;
  xpc_object_t v22 = xpc_null_create();
  v21[4] = v15;
  size_t v23 = v7[17];
  atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  unint64_t v24 = operator new(0x18uLL);
  void *v24 = v21;
  v24[1] = v17;
  v24[2] = v19;
  dispatch_async_f(v23, v24, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
  if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  xpc_release(v22);
  if (v11)
  {
    std::__shared_weak_count::__release_weak(v11);
  }
}

void ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke_4(void *a1, uint64_t a2, const void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = a1[4];
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      long long v8 = v7;
      uint64_t v9 = a1[5];
      if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v9) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v8);
        if (!v9) {
          return;
        }
      }
      uint64_t v10 = *a3;
      if (*a3)
      {
        xpc_object_t v13 = 0;
        aBlock = _Block_copy(v10);
        CPMSModule::getCurrentPower(v6, &v13, (uint64_t *)&aBlock);
        if (aBlock) {
          _Block_release(aBlock);
        }
      }
      else
      {
        uint64_t v11 = *(NSObject **)(v6 + 88);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1C59C6000, v11, OS_LOG_TYPE_ERROR, "Expected response handler", buf, 2u);
        }
      }
    }
  }
}

void sub_1C5B38188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  _Unwind_Resume(exception_object);
}

void CPMSModule::getCurrentPower(uint64_t a1, NSObject **a2, uint64_t *a3)
{
  uint64_t v37 = 0;
  xpc_object_t v38 = &v37;
  uint64_t v39 = 0x2020000000;
  char v40 = 0;
  uint64_t v33 = 0;
  char v34 = &v33;
  uint64_t v35 = 0x2020000000;
  char v36 = 0;
  uint64_t v6 = a1 + 120;
  v32[0] = MEMORY[0x1E4F143A8];
  v32[1] = 3221225472;
  v32[2] = ___ZN10CPMSModule15getCurrentPowerEN8dispatch13group_sessionENS0_5blockIU13block_pointerFviN3xpc4dictEEEE_block_invoke;
  v32[3] = &unk_1E651C028;
  v32[5] = &v33;
  v32[6] = a1;
  v32[4] = &v37;
  CFTypeRef v41 = v32;
  block = (void *)MEMORY[0x1E4F143A8];
  uint64_t v43 = 3221225472;
  size_t v44 = ___ZNK3ctu20SharedSynchronizableI10CPMSModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  unint64_t v45 = &__block_descriptor_48_e5_v8__0l;
  uint64_t v46 = a1 + 120;
  uint64_t v47 = (xpc_object_t *)&v41;
  uint64_t v8 = a1 + 136;
  uint64_t v7 = *(NSObject **)(a1 + 136);
  if (*(void *)(v8 + 8))
  {
    dispatch_async_and_wait(v7, &block);
    if (!*((unsigned char *)v38 + 24)) {
      goto LABEL_28;
    }
  }
  else
  {
    dispatch_sync(v7, &block);
    if (!*((unsigned char *)v38 + 24)) {
      goto LABEL_28;
    }
  }
  if (*((unsigned char *)v34 + 24))
  {
    uint64_t v9 = *(std::__shared_weak_count **)(a1 + 128);
    if (!v9 || (uint64_t v10 = *(void *)(a1 + 120), (v11 = std::__shared_weak_count::lock(v9)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v12 = v11;
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v13 = *(void *)(a1 + 192);
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3321888768;
    aBlock[2] = ___ZN10CPMSModule15getCurrentPowerEN8dispatch13group_sessionENS0_5blockIU13block_pointerFviN3xpc4dictEEEE_block_invoke_2;
    aBlock[3] = &__block_descriptor_72_e8_40c30_ZTSN8dispatch13group_sessionE48c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE64c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_e1095_v32__0_BudgetData__map_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int___std::less_abm::BasebandCPMSPowerBudgetScale___std::allocator_std::pair_const_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int________tree_std::__value_type_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int____std::__map_value_compare_abm::BasebandCPMSPowerBudgetScale__std::__value_type_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int____std::less_abm::BasebandCPMSPowerBudgetScale____std::allocator_std::__value_type_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int______v___compressed_pair_std::__tree_end_node_std::__tree_node_base_void________std::allocator_std::__tree_node_std::__value_type_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int____void_________tree_end_node_std::__tree_node_base_void________v_____compressed_pair_unsigned_long__std::__map_value_compare_abm::BasebandCPMSPowerBudgetScale__std::__value_type_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int____std::less_abm::BasebandCPMSPowerBudgetScale____Q____8l;
    uint64_t v14 = *a2;
    aBlock[4] = a1;
    dispatch_group_t group = v14;
    if (v14)
    {
      dispatch_retain(v14);
      dispatch_group_enter(group);
    }
    uint64_t v27 = v10;
    xpc_object_t v28 = v12;
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    size_t v15 = (void *)*a3;
    if (*a3) {
      size_t v15 = _Block_copy(v15);
    }
    size_t v29 = v15;
    size_t v16 = _Block_copy(aBlock);
    uint64_t v17 = *(NSObject **)(a1 + 136);
    if (v17) {
      dispatch_retain(v17);
    }
    size_t v30 = v16;
    dispatch_object_t object = v17;
    (*(void (**)(uint64_t, void **))(*(void *)v13 + 40))(v13, &v30);
    if (object) {
      dispatch_release(object);
    }
    if (v30) {
      _Block_release(v30);
    }
    if (v29) {
      _Block_release(v29);
    }
    if (v28) {
      std::__shared_weak_count::__release_weak(v28);
    }
    if (group)
    {
      dispatch_group_leave(group);
      if (group) {
        dispatch_release(group);
      }
    }
    std::__shared_weak_count::__release_weak(v12);
    goto LABEL_40;
  }
LABEL_28:
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 3221225472;
  v24[2] = ___ZN10CPMSModule15getCurrentPowerEN8dispatch13group_sessionENS0_5blockIU13block_pointerFviN3xpc4dictEEEE_block_invoke_77;
  v24[3] = &unk_1E651C028;
  v24[4] = &v37;
  v24[5] = &v33;
  v24[6] = a1;
  CFTypeRef v41 = v24;
  block = (void *)MEMORY[0x1E4F143A8];
  uint64_t v43 = 3221225472;
  size_t v44 = ___ZNK3ctu20SharedSynchronizableI10CPMSModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  unint64_t v45 = &__block_descriptor_48_e5_v8__0l;
  uint64_t v46 = v6;
  uint64_t v47 = (xpc_object_t *)&v41;
  uint64_t v18 = *(NSObject **)(a1 + 136);
  if (*(void *)(a1 + 144))
  {
    dispatch_async_and_wait(v18, &block);
    if (!*a3) {
      goto LABEL_40;
    }
  }
  else
  {
    dispatch_sync(v18, &block);
    if (!*a3) {
      goto LABEL_40;
    }
  }
  NSDict = (ctu *)PowerBudget::getNSDict((id *)(a1 + 400));
  ctu::cf_to_xpc((uint64_t *)&v41, NSDict, v20);
  xpc_object_t v21 = v41;
  block = v41;
  uint64_t v22 = MEMORY[0x1E4F14590];
  if (v41 && MEMORY[0x1C8795EB0](v41) == v22)
  {
    xpc_retain(v21);
  }
  else
  {
    xpc_object_t v21 = xpc_null_create();
    block = v21;
  }
  xpc_release(v41);
  if (MEMORY[0x1C8795EB0](v21) == v22) {
    int v23 = 0;
  }
  else {
    int v23 = -534716416;
  }
  LODWORD(v41) = v23;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, (unsigned int *)&v41, &block);
  xpc_release(block);
LABEL_40:
  _Block_object_dispose(&v33, 8);
  _Block_object_dispose(&v37, 8);
}

void sub_1C5B385E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,dispatch_group_t group,uint64_t a22,std::__shared_weak_count *a23,void *aBlock,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  dispatch::callback<void({block_pointer})(BudgetData)>::~callback((uint64_t)&a25);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a23) {
    std::__shared_weak_count::__release_weak(a23);
  }
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  std::__shared_weak_count::__release_weak(v34);
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose((const void *)(v35 - 168), 8);
  _Unwind_Resume(a1);
}

uint64_t CPMSModule::initPowerConfig_sync(id *this)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  memset(&__p, 170, sizeof(__p));
  CPMSModule::getCPMSBudgetPlistPath((CPMSModule *)this, (void **)&__p.__r_.__value_.__l.__data_);
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v44, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v44 = __p;
  }
  util::readPlistToCFDictionary((uint64_t)&v44, &cf);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  uint64_t v2 = (void *)cf;
  id v3 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  long long v42 = 0u;
  long long v43 = 0u;
  long long v41 = 0u;
  long long v40 = 0u;
  uint64_t v4 = [v2 countByEnumeratingWithState:&v40 objects:v51 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v41;
    uint64_t v32 = (void *)*MEMORY[0x1E4F566D0];
    uint64_t v33 = (void *)*MEMORY[0x1E4F566C0];
    char v34 = (void *)*MEMORY[0x1E4F566A0];
    unsigned int v31 = 5000;
    uint64_t v6 = (void *)*MEMORY[0x1E4F566B0];
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v41 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v8 = *(void **)(*((void *)&v40 + 1) + 8 * i);
        if ([v8 isEqualToString:@"CPMSPowerTimeScale1s"])
        {
          CPMSModule::initPowerConfig_sync(void)::$_1::operator()((uint64_t)this, v6, (void *)[v2 valueForKey:v8], v3);
        }
        else if ([v8 isEqualToString:@"CPMSPowerTimeScale100ms"])
        {
          CPMSModule::initPowerConfig_sync(void)::$_1::operator()((uint64_t)this, v34, (void *)[v2 valueForKey:v8], v3);
        }
        else if ([v8 isEqualToString:@"CPMSPowerTimeScaleInstantaneous"])
        {
          CPMSModule::initPowerConfig_sync(void)::$_1::operator()((uint64_t)this, v33, (void *)[v2 valueForKey:v8], v3);
        }
        else if ([v8 isEqualToString:@"CPMSPowerTimeScaleThermal"])
        {
          CPMSModule::initPowerConfig_sync(void)::$_1::operator()((uint64_t)this, v32, (void *)[v2 valueForKey:v8], v3);
        }
        else if ([v8 isEqualToString:@"CPMSPowerBudgetPeriodms"])
        {
          unsigned int v31 = [[(id)objc_msgSend(v2, "valueForKey:", v8) intValue];
        }
      }
      uint64_t v4 = [v2 countByEnumeratingWithState:&v40 objects:v51 count:16];
    }
    while (v4);
  }
  else
  {
    unsigned int v31 = 5000;
  }
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)(this + 30), this[46], this + 47);

  this[33] = (id)[this[49] copy];
  uint64_t v9 = this[11];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = [((id)objc_msgSend(v3, "description")) UTF8String];
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v10;
    _os_log_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEFAULT, "#I Power budget config to be registered with CPMS %s", buf, 0xCu);
    uint64_t v9 = this[11];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    PowerBudget::to_string((PowerBudget *)(this + 34), buf);
    if (v48 >= 0) {
      uint64_t v11 = buf;
    }
    else {
      uint64_t v11 = *(unsigned char **)buf;
    }
    *(_DWORD *)long long v49 = 136315138;
    CFTypeRef v50 = v11;
    _os_log_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEFAULT, "#I Min default budget %s", v49, 0xCu);
    if (v48 < 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v9 = this[11];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    PowerBudget::to_string((PowerBudget *)(this + 38), buf);
    if (v48 >= 0) {
      uint64_t v12 = buf;
    }
    else {
      uint64_t v12 = *(unsigned char **)buf;
    }
    *(_DWORD *)long long v49 = 136315138;
    CFTypeRef v50 = v12;
    _os_log_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEFAULT, "#I Max default budget %s", v49, 0xCu);
    if (v48 < 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v9 = this[11];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    PowerBudget::to_string((PowerBudget *)(this + 42), buf);
    if (v48 >= 0) {
      uint64_t v13 = buf;
    }
    else {
      uint64_t v13 = *(unsigned char **)buf;
    }
    *(_DWORD *)long long v49 = 136315138;
    CFTypeRef v50 = v13;
    _os_log_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEFAULT, "#I Idle default budget %s", v49, 0xCu);
    if (v48 < 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v9 = this[11];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    PowerBudget::to_string((PowerBudget *)(this + 46), buf);
    if (v48 >= 0) {
      uint64_t v14 = buf;
    }
    else {
      uint64_t v14 = *(unsigned char **)buf;
    }
    *(_DWORD *)long long v49 = 136315138;
    CFTypeRef v50 = v14;
    _os_log_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEFAULT, "#I Low default budget %s", v49, 0xCu);
    if (v48 < 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v9 = this[11];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v31;
    _os_log_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEFAULT, "#I Power budget update period (ms) %u", buf, 8u);
    uint64_t v9 = this[11];
  }
  BOOL v15 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (v15)
  {
    int v16 = capabilities::abs::supportsCPMSConnectedState((capabilities::abs *)v15);
    uint64_t v17 = " not";
    if (v16) {
      uint64_t v17 = "";
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v17;
    _os_log_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEFAULT, "#I Connected state evaluation is%s supported", buf, 0xCu);
  }
  uint64_t v18 = (std::__shared_weak_count *)this[16];
  if (!v18 || (v19 = this[15], (unint64_t v20 = std::__shared_weak_count::lock(v18)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v21 = v20;
  p_shared_weak_owners = &v20->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v21);
  }
  v38[0] = MEMORY[0x1E4F143A8];
  v38[1] = 3321888768;
  v38[2] = ___ZN10CPMSModule20initPowerConfig_syncEv_block_invoke;
  v38[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e22_v16__0__NSDictionary_8l;
  v38[4] = this;
  v38[5] = v19;
  uint64_t v39 = v21;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  this[22] = v38;
  uint64_t v35 = 0;
  v36[0] = MEMORY[0x1E4F143A8];
  v36[1] = 3321888768;
  v36[2] = ___ZN10CPMSModule20initPowerConfig_syncEv_block_invoke_51;
  v36[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e19___NSDictionary_8__0l;
  v36[4] = this;
  v36[5] = v19;
  uint64_t v37 = v21;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  this[23] = v36;
  id v23 = objc_alloc_init(MEMORY[0x1E4F56680]);
  [v23 setClientId:4];
  [v23 setPowerLevels:v3];
  [v23 setIsContinuous:1];
  [v23 setNotificationCallback:this[22]];
  [v23 setGetCurrentPower:this[23]];
  [v23 setPowerBudgetUpdateMinimumPeriod:v31];
  uint64_t v24 = [this[21] registerClientWithDescription:v23 error:&v35];
  uint64_t v25 = v24;
  uint64_t v26 = v35;
  if (v35) {
    char v27 = 0;
  }
  else {
    char v27 = v24;
  }
  if ((v27 & 1) == 0)
  {
    xpc_object_t v28 = this[11];
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      CPMSModule::getErrorMsg(v26, (uint64_t)buf);
      size_t v30 = v48 >= 0 ? buf : *(unsigned char **)buf;
      *(_DWORD *)long long v49 = 136315138;
      CFTypeRef v50 = v30;
      _os_log_error_impl(&dword_1C59C6000, v28, OS_LOG_TYPE_ERROR, "Failed to register CPMS: %s", v49, 0xCu);
      if (v48 < 0) {
        operator delete(*(void **)buf);
      }
    }
  }

  if (v37) {
    std::__shared_weak_count::__release_weak(v37);
  }
  if (v39) {
    std::__shared_weak_count::__release_weak(v39);
  }
  std::__shared_weak_count::__release_weak(v21);
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v25;
}

void sub_1C5B38EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,char a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a50 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CPMSModule::finishInitialization_sync(CPMSModule *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v2 || (v3 = *((void *)this + 15), (uint64_t v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (const char *)(*(uint64_t (**)(CPMSModule *))(*(void *)this + 16))(this);
  size_t v7 = strlen(v6);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    uint64_t v9 = (void **)operator new(v10 + 1);
    __dst[1] = v8;
    unint64_t v68 = v11 | 0x8000000000000000;
    __dst[0] = v9;
  }
  else
  {
    HIBYTE(v68) = v7;
    uint64_t v9 = __dst;
    if (!v7) {
      goto LABEL_13;
    }
  }
  memmove(v9, v6, (size_t)v8);
LABEL_13:
  *((unsigned char *)v8 + (void)v9) = 0;
  v66 = 0;
  AppleBasebandManager::create();
  long long v12 = v69;
  long long v69 = 0uLL;
  uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 20);
  *(_OWORD *)((char *)this + 152) = v12;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)&v69 + 1);
  if (!*((void *)&v69 + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v69 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    BOOL v15 = v66;
    if (!v66) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  BOOL v15 = v66;
  if (v66) {
LABEL_19:
  }
    CFRelease(v15);
LABEL_20:
  if (SHIBYTE(v68) < 0) {
    operator delete(__dst[0]);
  }
  int v16 = (const void *)*MEMORY[0x1E4F4CEF8];
  size_t v17 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
  if (v17 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v18 = (void *)v17;
  if (v17 >= 0x17)
  {
    uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v20 = v17 | 7;
    }
    uint64_t v21 = v20 + 1;
    id v19 = (void **)operator new(v20 + 1);
    v64[1] = v18;
    unint64_t v65 = v21 | 0x8000000000000000;
    v64[0] = v19;
    goto LABEL_29;
  }
  HIBYTE(v65) = v17;
  id v19 = v64;
  if (v17) {
LABEL_29:
  }
    memmove(v19, v16, (size_t)v18);
  *((unsigned char *)v18 + (void)v19) = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10CPMSModule25finishInitialization_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e70_v24__0_shared_ptr_abm::client::Event____Event_____shared_weak_count__8l;
  aBlock[4] = this;
  void aBlock[5] = v3;
  v61 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v22 = _Block_copy(aBlock);
  id v23 = *((void *)this + 17);
  if (v23) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  v62 = v22;
  dispatch_object_t v63 = v23;
  AppleBasebandManager::setEventHandler();
  if (v63) {
    dispatch_release(v63);
  }
  if (v62) {
    _Block_release(v62);
  }
  if (SHIBYTE(v65) < 0) {
    operator delete(v64[0]);
  }
  uint64_t v24 = (const void *)*MEMORY[0x1E4F4D0F8];
  size_t v25 = strlen((const char *)*MEMORY[0x1E4F4D0F8]);
  if (v25 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v26 = (void *)v25;
  if (v25 >= 0x17)
  {
    uint64_t v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17) {
      uint64_t v28 = v25 | 7;
    }
    uint64_t v29 = v28 + 1;
    char v27 = operator new(v28 + 1);
    __p[1] = v26;
    unint64_t v59 = v29 | 0x8000000000000000;
    __p[0] = v27;
    goto LABEL_45;
  }
  HIBYTE(v59) = v25;
  char v27 = __p;
  if (v25) {
LABEL_45:
  }
    memmove(v27, v24, (size_t)v26);
  *((unsigned char *)v26 + (void)v27) = 0;
  v54[0] = MEMORY[0x1E4F143A8];
  v54[1] = 3321888768;
  v54[2] = ___ZN10CPMSModule25finishInitialization_syncEv_block_invoke_15;
  v54[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e70_v24__0_shared_ptr_abm::client::Event____Event_____shared_weak_count__8l;
  v54[4] = this;
  v54[5] = v3;
  uint64_t v55 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v30 = _Block_copy(v54);
  unsigned int v31 = *((void *)this + 17);
  if (v31) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  v56 = v30;
  dispatch_object_t object = v31;
  AppleBasebandManager::setEventHandler();
  if (object) {
    dispatch_release(object);
  }
  if (v56) {
    _Block_release(v56);
  }
  if (SHIBYTE(v59) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v32 = (const void *)*MEMORY[0x1E4F4CDF0];
  size_t v33 = strlen((const char *)*MEMORY[0x1E4F4CDF0]);
  if (v33 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  char v34 = (void *)v33;
  if (v33 >= 0x17)
  {
    uint64_t v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17) {
      uint64_t v36 = v33 | 7;
    }
    uint64_t v37 = v36 + 1;
    uint64_t v35 = operator new(v36 + 1);
    v52[1] = v34;
    unint64_t v53 = v37 | 0x8000000000000000;
    v52[0] = v35;
    goto LABEL_61;
  }
  HIBYTE(v53) = v33;
  uint64_t v35 = v52;
  if (v33) {
LABEL_61:
  }
    memmove(v35, v32, (size_t)v34);
  *((unsigned char *)v34 + (void)v35) = 0;
  v48[0] = MEMORY[0x1E4F143A8];
  v48[1] = 3321888768;
  v48[2] = ___ZN10CPMSModule25finishInitialization_syncEv_block_invoke_2;
  v48[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e70_v24__0_shared_ptr_abm::client::Event____Event_____shared_weak_count__8l;
  v48[4] = this;
  v48[5] = v3;
  long long v49 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v38 = _Block_copy(v48);
  uint64_t v39 = *((void *)this + 17);
  if (v39) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  CFTypeRef v50 = v38;
  dispatch_object_t v51 = v39;
  AppleBasebandManager::setEventHandler();
  if (v51) {
    dispatch_release(v51);
  }
  if (v50) {
    _Block_release(v50);
  }
  if (SHIBYTE(v53) < 0) {
    operator delete(v52[0]);
  }
  long long v40 = (config::hw *)AppleBasebandManager::eventsOn(*((AppleBasebandManager **)this + 19));
  if ((config::hw::watch(v40) & 1) == 0)
  {
    uint64_t v41 = *((void *)this + 24);
    v44[0] = MEMORY[0x1E4F143A8];
    v44[1] = 3321888768;
    v44[2] = ___ZN10CPMSModule25finishInitialization_syncEv_block_invoke_18;
    v44[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e1095_v32__0_BudgetData__map_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int___std::less_abm::BasebandCPMSPowerBudgetScale___std::allocator_std::pair_const_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int________tree_std::__value_type_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int____std::__map_value_compare_abm::BasebandCPMSPowerBudgetScale__std::__value_type_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int____std::less_abm::BasebandCPMSPowerBudgetScale____std::allocator_std::__value_type_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int______v___compressed_pair_std::__tree_end_node_std::__tree_node_base_void________std::allocator_std::__tree_node_std::__value_type_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int____void_________tree_end_node_std::__tree_node_base_void________v_____compressed_pair_unsigned_long__std::__map_value_compare_abm::BasebandCPMSPowerBudgetScale__std::__value_type_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int____std::less_abm::BasebandCPMSPowerBudgetScale____Q____8l;
    v44[4] = this;
    v44[5] = v3;
    unint64_t v45 = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    long long v42 = _Block_copy(v44);
    long long v43 = *((void *)this + 17);
    if (v43) {
      dispatch_retain(v43);
    }
    uint64_t v46 = v42;
    dispatch_object_t v47 = v43;
    (*(void (**)(uint64_t, void **))(*(void *)v41 + 32))(v41, &v46);
    if (v47) {
      dispatch_release(v47);
    }
    if (v46) {
      _Block_release(v46);
    }
    if (v45) {
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v49) {
    std::__shared_weak_count::__release_weak(v49);
  }
  if (v55) {
    std::__shared_weak_count::__release_weak(v55);
  }
  if (v61) {
    std::__shared_weak_count::__release_weak(v61);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C5B3963C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  dispatch::callback<void({block_pointer})(BudgetData)>::~callback((uint64_t)&a17);
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  if (a25) {
    std::__shared_weak_count::__release_weak(a25);
  }
  if (a40) {
    std::__shared_weak_count::__release_weak(a40);
  }
  dispatch_object_t v51 = *(std::__shared_weak_count **)(v49 - 208);
  if (v51)
  {
    std::__shared_weak_count::__release_weak(v51);
    std::__shared_weak_count::__release_weak(v48);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v48);
  _Unwind_Resume(a1);
}

void ___ZN10CPMSModule25finishInitialization_syncEv_block_invoke(void *a1, abm::client::Event **a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      size_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      CFDictionaryRef v30 = (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL;
      abm::client::Event::getData((uint64_t *)&v30, *a2);
      CFDictionaryRef v9 = v30;
      if (v30) {
        uint64_t v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        uint64_t v10 = 0;
      }
      if (!v10) {
        goto LABEL_39;
      }
      int v11 = *(unsigned __int8 *)(v5 + 232);
      v29[0] = 0xAAAAAAAAAAAAAAAALL;
      v29[1] = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v29, v30);
      memset(__p, 170, sizeof(__p));
      long long v12 = (const void *)*MEMORY[0x1E4F4CAF0];
      size_t v13 = strlen((const char *)*MEMORY[0x1E4F4CAF0]);
      if (v13 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = (void *)v13;
      if (v13 >= 0x17)
      {
        uint64_t v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v13 | 7) != 0x17) {
          uint64_t v16 = v13 | 7;
        }
        uint64_t v17 = v16 + 1;
        BOOL v15 = (void **)operator new(v16 + 1);
        __dst[1] = v14;
        unint64_t v27 = v17 | 0x8000000000000000;
        __dst[0] = v15;
      }
      else
      {
        HIBYTE(v27) = v13;
        BOOL v15 = __dst;
        if (!v13) {
          goto LABEL_19;
        }
      }
      memmove(v15, v12, (size_t)v14);
LABEL_19:
      uint64_t v18 = (const char *)*MEMORY[0x1E4F4C688];
      *((unsigned char *)v14 + (void)v15) = 0;
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v31, v18);
      ctu::cf::map_adapter::getString();
      MEMORY[0x1C8794290](&v31);
      if (SHIBYTE(v27) < 0) {
        operator delete(__dst[0]);
      }
      if (SHIBYTE(__p[2]) >= 0) {
        size_t v19 = HIBYTE(__p[2]);
      }
      else {
        size_t v19 = (size_t)__p[1];
      }
      if (v19 == strlen((const char *)*MEMORY[0x1E4F4CAE8]))
      {
        if (SHIBYTE(__p[2]) >= 0) {
          uint64_t v20 = __p;
        }
        else {
          uint64_t v20 = (void **)__p[0];
        }
        uint64_t v21 = (config::hw *)memcmp(v20, (const void *)*MEMORY[0x1E4F4CAE8], v19);
        *(unsigned char *)(v5 + 232) = v21 == 0;
        if (!v21)
        {
          uint64_t v22 = (capabilities::abs *)config::hw::watch(v21);
          if ((v22 & 1) == 0)
          {
            id v23 = (capabilities::abs *)capabilities::abs::supportsSMCThermalReport(v22);
            if (v23)
            {
              uint64_t v24 = capabilities::abs::SMCThermalReportInterval(v23);
              size_t v25 = 0;
              CPMSModule::configureThermalReportFrequency_sync((void *)v5, v24, &v25);
            }
            (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v5 + 192) + 48))(*(void *)(v5 + 192), 1, 5);
          }
        }
      }
      else
      {
        *(unsigned char *)(v5 + 232) = 0;
      }
      if (*(unsigned __int8 *)(v5 + 232) != v11) {
        CPMSModule::evaluatePowerBudgetNeed_sync((CPMSModule *)v5);
      }
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      MEMORY[0x1C87942E0](v29);
      CFDictionaryRef v9 = v30;
LABEL_39:
      if (v9) {
        CFRelease(v9);
      }
    }
  }
}

void sub_1C5B39A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a22 < 0)
  {
    operator delete(__p);
    MEMORY[0x1C87942E0](&a23);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v23 - 64));
    _Unwind_Resume(a1);
  }
  MEMORY[0x1C87942E0](&a23);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v23 - 64));
  _Unwind_Resume(a1);
}

void CPMSModule::configureThermalReportFrequency_sync(void *a1, uint64_t a2, void **a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v7 = a1[15], (v8 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  CFDictionaryRef v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  int v10 = capabilities::abs::supportsSMCThermalReport((capabilities::abs *)v8);
  int v11 = a1[11];
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    long long v12 = "Thermal Monitor";
    if (v10) {
      long long v12 = "SMC";
    }
    *(_DWORD *)buf = 136315138;
    uint64_t v32 = v12;
    _os_log_impl(&dword_1C59C6000, v11, OS_LOG_TYPE_DEFAULT, "#I Thermal Report to %s", buf, 0xCu);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10CPMSModule36configureThermalReportFrequency_syncEjN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_block_invoke;
  aBlock[3] = &__block_descriptor_57_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e226_v32__0_vector_abm::ThermalSensorData__std::allocator_abm::ThermalSensorData_____ThermalSensorData___ThermalSensorData____compressed_pair_abm::ThermalSensorData____std::allocator_abm::ThermalSensorData_____ThermalSensorData___8l;
  aBlock[4] = a1;
  void aBlock[5] = v7;
  uint64_t v29 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  char v30 = v10;
  size_t v13 = _Block_copy(aBlock);
  uint64_t v14 = v13;
  uint64_t v15 = a1[24];
  if (v10) {
    uint64_t v16 = 2;
  }
  else {
    uint64_t v16 = 1;
  }
  if (v13) {
    uint64_t v17 = _Block_copy(v13);
  }
  else {
    uint64_t v17 = 0;
  }
  unint64_t v27 = v17;
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3321888768;
  v21[2] = ___ZN10CPMSModule36configureThermalReportFrequency_syncEjN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_block_invoke_74;
  v21[3] = &__block_descriptor_68_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_e44_v16__0_CFSharedRef___CFError______CFError__8l;
  v21[4] = a1;
  v21[5] = v7;
  uint64_t v22 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  int v24 = a2;
  uint64_t v18 = *a3;
  if (*a3) {
    uint64_t v18 = _Block_copy(v18);
  }
  uint64_t v23 = v18;
  size_t v19 = _Block_copy(v21);
  uint64_t v20 = a1[17];
  if (v20) {
    dispatch_retain(v20);
  }
  size_t v25 = v19;
  dispatch_object_t object = v20;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void **, void **))(*(void *)v15 + 64))(v15, v16, a2, &v27, &v25);
  if (object) {
    dispatch_release(object);
  }
  if (v25) {
    _Block_release(v25);
  }
  if (v27) {
    _Block_release(v27);
  }
  if (v23) {
    _Block_release(v23);
  }
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
  if (v14) {
    _Block_release(v14);
  }
  if (v29) {
    std::__shared_weak_count::__release_weak(v29);
  }
  std::__shared_weak_count::__release_weak(v9);
}

void sub_1C5B39DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void CPMSModule::evaluatePowerBudgetNeed_sync(CPMSModule *this)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 11);
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    uint64_t v4 = "true";
    if (*((unsigned char *)this + 235)) {
      uint64_t v5 = "true";
    }
    else {
      uint64_t v5 = "false";
    }
    int v6 = *((unsigned __int8 *)this + 232);
    if (*((unsigned char *)this + 233)) {
      uint64_t v7 = "true";
    }
    else {
      uint64_t v7 = "false";
    }
    *(_DWORD *)buf = 136315650;
    uint64_t v28 = v5;
    if (!v6) {
      uint64_t v4 = "false";
    }
    __int16 v29 = 2080;
    char v30 = v7;
    __int16 v31 = 2080;
    uint64_t v32 = v4;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Evaluating power budget need; IsConnected(debounce)=%s, IsOnline=%s IsReady=%s",
      buf,
      0x20u);
  }
  uint64_t v8 = (capabilities::abs *)capabilities::abs::supportsCPMSConnectedState((capabilities::abs *)v3);
  if (v8 && *((unsigned char *)this + 235) && *((unsigned char *)this + 232) && *((unsigned char *)this + 233))
  {
    CFDictionaryRef v9 = v25;
    v25[0] = 0;
    v25[1] = 0;
    int v24 = v25;
    uint64_t v26 = 0;
    if ((void **)((char *)this + 304) != &v24) {
      std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v24, *((void **)this + 38), (void *)this + 39);
    }
    uint64_t v26 = [*((id *)this + 41) copy];
    int v10 = &v24;
    CPMSModule::reportPowerBudgetNeed_sync((uint64_t)this, (PowerBudget *)&v24);
  }
  else if (*((unsigned char *)this + 232))
  {
    if (*((unsigned char *)this + 233))
    {
      int v11 = capabilities::abs::supportsCPMSConnectedState(v8);
      CFDictionaryRef v9 = v22;
      uint64_t v12 = 304;
      if (v11)
      {
        uint64_t v12 = 336;
        size_t v13 = (char *)this + 336;
      }
      else
      {
        size_t v13 = (char *)this + 304;
      }
      v22[0] = 0;
      v22[1] = 0;
      uint64_t v21 = v22;
      uint64_t v23 = 0;
      if (v13 != (char *)&v21) {
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v21, *(void **)((char *)this + v12), (void *)v13 + 1);
      }
      uint64_t v23 = [*((id *)v13 + 3) copy];
      int v10 = &v21;
      CPMSModule::reportPowerBudgetNeed_sync((uint64_t)this, (PowerBudget *)&v21);
    }
    else
    {
      CFDictionaryRef v9 = v19;
      v19[0] = 0;
      v19[1] = 0;
      uint64_t v18 = v19;
      uint64_t v20 = 0;
      if ((void **)((char *)this + 368) != &v18) {
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v18, *((void **)this + 46), (void *)this + 47);
      }
      uint64_t v20 = [*((id *)this + 49) copy];
      int v10 = &v18;
      CPMSModule::reportPowerBudgetNeed_sync((uint64_t)this, (PowerBudget *)&v18);
    }
  }
  else
  {
    CFDictionaryRef v9 = &v15;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v14 = &v15;
    uint64_t v17 = 0;
    if ((uint64_t **)((char *)this + 368) != &v14) {
      std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v14, *((void **)this + 46), (void *)this + 47);
    }
    uint64_t v17 = [*((id *)this + 49) copy:v14, v15, v16, v17];
    int v10 = &v14;
    CPMSModule::reportPowerBudgetNeed_sync((uint64_t)this, (PowerBudget *)&v14);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v10, v10[1]);
  v10[1] = 0;
  _DWORD v10[2] = 0;
  const void *v10 = v9;

  v10[3] = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v10, v10[1]);
  v10[1] = 0;
  _DWORD v10[2] = 0;
  const void *v10 = v9;
}

void sub_1C5B3A138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  PowerBudget::~PowerBudget((PowerBudget *)va);
  _Unwind_Resume(a1);
}

void sub_1C5B3A14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  PowerBudget::~PowerBudget((PowerBudget *)va);
  _Unwind_Resume(a1);
}

void sub_1C5B3A160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,void *a22)
{
}

void sub_1C5B3A178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *a14)
{
}

void sub_1C5B3A190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C5B3A1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  PowerBudget::~PowerBudget((PowerBudget *)va);
  _Unwind_Resume(a1);
}

void sub_1C5B3A1B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_1C5B3A1D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *a18)
{
}

void sub_1C5B3A1E8(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN10CPMSModule25finishInitialization_syncEv_block_invoke_15(void *a1, abm::client::Event **a2)
{
  BOOL v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = (unsigned __int8 *)a1[4];
    int v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      abm::client::Event::getData((uint64_t *)&cf, *a2);
      CFTypeRef v9 = cf;
      if (cf) {
        int v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        int v10 = 0;
      }
      if (v10)
      {
        v14[0] = 0xAAAAAAAAAAAAAAAALL;
        v14[1] = 0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v14, (const __CFDictionary *)cf);
        int v11 = v5[233];
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v16, (const char *)*MEMORY[0x1E4F4CB50]);
        char Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v14, v16);
        MEMORY[0x1C8794290](&v16);
        int v13 = Int == 0;
        v5[233] = v13;
        if (v11 != v13) {
          CPMSModule::evaluatePowerBudgetNeed_sync((CPMSModule *)v5);
        }
        MEMORY[0x1C87942E0](v14);
        CFTypeRef v9 = cf;
      }
      if (v9) {
        CFRelease(v9);
      }
    }
  }
}

void ___ZN10CPMSModule25finishInitialization_syncEv_block_invoke_2(void *a1, abm::client::Event **a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  BOOL v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    int v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      abm::client::Event::getData((uint64_t *)&cf, *a2);
      CFTypeRef v9 = cf;
      if (cf) {
        int v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        int v10 = 0;
      }
      if (v10)
      {
        v20[0] = 0xAAAAAAAAAAAAAAAALL;
        v20[1] = 0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v20, (const __CFDictionary *)cf);
        int v11 = *(unsigned __int8 *)(v5 + 234);
        memset(v19, 170, sizeof(v19));
        uint64_t v12 = (const char *)*MEMORY[0x1E4F4CD50];
        long long __p = 0uLL;
        uint64_t v24 = 0;
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v22, v12);
        ctu::cf::map_adapter::getString();
        MEMORY[0x1C8794290](&v22);
        if (SHIBYTE(v24) < 0) {
          operator delete((void *)__p);
        }
        if (SHIBYTE(v19[2]) >= 0) {
          size_t v13 = HIBYTE(v19[2]);
        }
        else {
          size_t v13 = (size_t)v19[1];
        }
        if (v13 == strlen((const char *)*MEMORY[0x1E4F4D0C0]))
        {
          if (SHIBYTE(v19[2]) >= 0) {
            uint64_t v14 = v19;
          }
          else {
            uint64_t v14 = (void **)v19[0];
          }
          BOOL v15 = memcmp(v14, (const void *)*MEMORY[0x1E4F4D0C0], v13) == 0;
        }
        else
        {
          BOOL v15 = 0;
        }
        *(unsigned char *)(v5 + 234) = v15;
        uint64_t v16 = *(NSObject **)(v5 + 88);
        BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG);
        if (v17)
        {
          uint64_t v18 = "disconnected";
          if (v15) {
            uint64_t v18 = "connected";
          }
          LODWORD(__p) = 136315138;
          *(void *)((char *)&__p + 4) = v18;
          _os_log_debug_impl(&dword_1C59C6000, v16, OS_LOG_TYPE_DEBUG, "#D Baseband is in %s state", (uint8_t *)&__p, 0xCu);
        }
        if (capabilities::abs::supportsCPMSConnectedState((capabilities::abs *)v17)
          && *(unsigned __int8 *)(v5 + 234) != v11)
        {
          CPMSModule::debounceConnectedState_sync((CPMSModule *)v5);
        }
        if (SHIBYTE(v19[2]) < 0) {
          operator delete(v19[0]);
        }
        MEMORY[0x1C87942E0](v20);
        CFTypeRef v9 = cf;
      }
      if (v9) {
        CFRelease(v9);
      }
    }
  }
}

void sub_1C5B3A618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void CPMSModule::debounceConnectedState_sync(CPMSModule *this)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 11);
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG);
  if (v3)
  {
    if (*((unsigned char *)this + 234)) {
      uint64_t v7 = "connected";
    }
    else {
      uint64_t v7 = "idle";
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_debug_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEBUG, "#D Baseband is in %s state", buf, 0xCu);
    if (*((unsigned char *)this + 234)) {
      goto LABEL_3;
    }
  }
  else if (*((unsigned char *)this + 234))
  {
LABEL_3:
    uint64_t v4 = *((void *)this + 28);
    if (v4)
    {
      uint64_t v5 = *((void *)this + 11);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_DEBUG, "#D Cancelling idle timer", buf, 2u);
        uint64_t v4 = *((void *)this + 28);
      }
      (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
      uint64_t v6 = *((void *)this + 28);
      *((void *)this + 28) = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
    }
    if (!*((unsigned char *)this + 235))
    {
      *((unsigned char *)this + 235) = 1;
      CPMSModule::evaluatePowerBudgetNeed_sync(this);
    }
    return;
  }
  uint64_t v8 = capabilities::abs::CPMSDebounceTimer((capabilities::abs *)v3);
  CFTypeRef v9 = *((void *)this + 11);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    *(void *)&uint8_t buf[4] = v8;
    _os_log_debug_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEBUG, "#D Starting idle timer for %lld secs", buf, 0xCu);
    int v10 = (std::__shared_weak_count *)*((void *)this + 16);
    if (!v10) {
LABEL_35:
    }
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    int v10 = (std::__shared_weak_count *)*((void *)this + 16);
    if (!v10) {
      goto LABEL_35;
    }
  }
  uint64_t v11 = *((void *)this + 15);
  uint64_t v12 = std::__shared_weak_count::lock(v10);
  if (!v12) {
    goto LABEL_35;
  }
  size_t v13 = v12;
  atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = *((void *)this + 26);
  char v24 = 16;
  strcpy(__p, "Idle state timer");
  BOOL v15 = *((void *)this + 17);
  dispatch_object_t object = v15;
  if (v15) {
    dispatch_retain(v15);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10CPMSModule27debounceConnectedState_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e5_v8__0l;
  aBlock[4] = this;
  void aBlock[5] = v11;
  uint64_t v20 = v13;
  atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v21 = _Block_copy(aBlock);
  ctu::TimerService::createOneShotTimer(v14, (uint64_t)__p, 0, 1000000 * v8, &object, &v21);
  uint64_t v16 = *(void *)buf;
  *(void *)buf = 0;
  uint64_t v17 = *((void *)this + 28);
  *((void *)this + 28) = v16;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    uint64_t v18 = *(void *)buf;
    *(void *)buf = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  if (v21) {
    _Block_release(v21);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v24 < 0) {
    operator delete(*(void **)__p);
  }
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  std::__shared_weak_count::__release_weak(v13);
}

void sub_1C5B3AA68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *aBlock, dispatch_object_t object, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN10CPMSModule25finishInitialization_syncEv_block_invoke_18(void *a1, void **a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  BOOL v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      uint64_t v17 = &v18;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      id v20 = 0;
      if (&v17 != a2) {
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v17, *a2, a2 + 1);
      }
      CFTypeRef v9 = *(NSObject **)(v5 + 88);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        PowerBudget::to_string((PowerBudget *)&v17, __p);
        if (v16 >= 0) {
          int v10 = __p;
        }
        else {
          int v10 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136315138;
        uint64_t v22 = v10;
        _os_log_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEFAULT, "#I Baseband power budget need is %s", buf, 0xCu);
        if (v16 < 0) {
          operator delete(__p[0]);
        }
      }
      uint64_t v11 = &v12;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      id v14 = 0;
      std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v11, v17, &v18);
      id v14 = (id)[v20 copy];
      CPMSModule::reportPowerBudgetNeed_sync(v5, (PowerBudget *)&v11);
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v11, v12);
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v11 = &v12;

      id v14 = 0;
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v11, v12);
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v11 = &v12;
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v17, v18);
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v17 = &v18;

      id v20 = 0;
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v17, v18);
    }
  }
}

void sub_1C5B3ACF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  PowerBudget::~PowerBudget((PowerBudget *)va);
  _Unwind_Resume(a1);
}

void CPMSModule::reportPowerBudgetNeed_sync(uint64_t a1, PowerBudget *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  int v4 = *(unsigned __int8 *)(a1 + 236);
  uint64_t v5 = *(NSObject **)(a1 + 88);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      PowerBudget::to_string(a2, __p);
      if (v31 >= 0) {
        uint64_t v7 = __p;
      }
      else {
        uint64_t v7 = *(unsigned char **)__p;
      }
      *(_DWORD *)buf = 136315138;
      uint64_t v33 = v7;
      _os_log_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_DEFAULT, "#I Brick mode is still enabled; ignoring power budget request for %s",
        buf,
        0xCu);
      if (v31 < 0) {
        operator delete(*(void **)__p);
      }
    }
  }
  else
  {
    if (v6)
    {
      *(_DWORD *)long long __p = 138412290;
      *(void *)&__p[4] = PowerBudget::getNSDict((id *)a2);
      _os_log_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_DEFAULT, "#I Reporting to CPMS with power budget need %@", __p, 0xCu);
    }
    uint64_t v8 = (NSDictionary *)[*(id *)(a1 + 168) copyPowerBudgetForRequest:PowerBudget::getNSDict((id *)a2) forClient:4 error:0];
    if (v8)
    {
      CFTypeRef v9 = (id *)(a1 + 240);
      PowerBudget::fill((id *)(a1 + 240), v8);
      int v10 = *(NSObject **)(a1 + 88);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        PowerBudget::to_string((PowerBudget *)(a1 + 240), __p);
        uint64_t v11 = v31 >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)buf = 136315138;
        uint64_t v33 = v11;
        _os_log_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_DEFAULT, "#I CPMS responded with power budget allocation %s", buf, 0xCu);
        if (v31 < 0) {
          operator delete(*(void **)__p);
        }
      }
      char v24 = &v25;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      id v27 = 0;
      if (v9 != (id *)&v24) {
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v24, *(void **)(a1 + 240), (void *)(a1 + 248));
      }
      id v27 = (id)[*(id *)(a1 + 264) copy];
      int v12 = [*(id *)(a1 + 168) acknowledgePowerBudget:PowerBudget::getNSDict((id *)&v24) forClientId:4 error:0];
      uint64_t v13 = *(NSObject **)(a1 + 88);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        id NSDict = PowerBudget::getNSDict((id *)&v24);
        BOOL v15 = "failed";
        if (v12) {
          BOOL v15 = "succeeded";
        }
        *(_DWORD *)long long __p = 136315394;
        *(void *)&__p[4] = v15;
        __int16 v29 = 2112;
        id v30 = NSDict;
        _os_log_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_DEFAULT, "#I Acked CPMS %s for power budget %@", __p, 0x16u);
      }
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v24, v25);
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      char v24 = &v25;

      id v27 = 0;
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v24, v25);
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      id v23 = 0;
      char v24 = &v25;
      *((void *)&v21 + 1) = 0;
      uint64_t v22 = 0;
      *(void *)&long long v21 = (char *)&v21 + 8;
      if (v9 != (id *)&v21) {
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v21, *(void **)(a1 + 240), (void *)(a1 + 248));
      }
      id v23 = (id)[*(id *)(a1 + 264) copy];
      CPMSModule::evaluateBrickMode_sync(a1, &v21);
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v21, *((void **)&v21 + 1));
      *((void *)&v21 + 1) = 0;
      uint64_t v22 = 0;
      *(void *)&long long v21 = (char *)&v21 + 8;

      id v23 = 0;
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v21, *((void **)&v21 + 1));
      *((void *)&v21 + 1) = 0;
      uint64_t v22 = 0;
      id v20 = 0;
      *(void *)&long long v21 = (char *)&v21 + 8;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v17 = &v18;
      if (v9 != (id *)&v17) {
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v17, *(void **)(a1 + 240), (void *)(a1 + 248));
      }
      id v20 = [[*(id *)(a1 + 264) copy];
      CPMSModule::sendPowerBudgetToBB_sync(a1, &v17);
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v17, v18);
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v17 = &v18;

      id v20 = 0;
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v17, v18);
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v17 = &v18;
    }
    else
    {
      char v16 = *(NSObject **)(a1 + 88);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long __p = 0;
        _os_log_error_impl(&dword_1C59C6000, v16, OS_LOG_TYPE_ERROR, "Reporting to CPMS with power budget need failed", __p, 2u);
      }
    }
  }
}

void sub_1C5B3B174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t dispatch::callback<void({block_pointer})(BudgetData)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void CPMSModule::getErrorMsg(NSError *a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a2 + 16) = 0xAAAAAAAAAAAAAAAALL;
  *(unsigned char *)(a2 + 23) = 13;
  strcpy((char *)a2, "Unknown error");
  if (a1)
  {
    uint64_t v5 = [(NSError *)a1 localizedDescription];
    if ([(NSError *)a1 localizedFailureReason]) {
      BOOL v6 = [(NSError *)a1 localizedFailureReason];
    }
    else {
      BOOL v6 = [[(NSString *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "localizedStringForKey:value:table:", @"Not found localizedFailureReason", &stru_1F2112A48, 0);
    }
    std::string::__assign_external((std::string *)a2, (const std::string::value_type *)[[NSString stringWithFormat:@"%@: %@", v5, v6] UTF8String]);
  }
}

void sub_1C5B3B334(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN10CPMSModule27debounceConnectedState_syncEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    int v4 = std::__shared_weak_count::lock(v2);
    CFTypeRef v9 = v4;
    if (v4)
    {
      uint64_t v5 = v4;
      if (!a1[5]) {
        goto LABEL_7;
      }
      BOOL v6 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t v7 = 0;
        _os_log_debug_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEBUG, "#D Idle timer expired", v7, 2u);
        if (*(unsigned char *)(v3 + 234))
        {
LABEL_7:
          if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
          return;
        }
      }
      else if (*(unsigned char *)(v3 + 234))
      {
        goto LABEL_7;
      }
      *(unsigned char *)(v3 + 235) = 0;
      CPMSModule::evaluatePowerBudgetNeed_sync((CPMSModule *)v3);
      goto LABEL_7;
    }
  }
}

void sub_1C5B3B458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void CPMSModule::sendPowerBudgetToBB_sync(uint64_t a1, void **a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  int v3 = *(unsigned __int8 *)(a1 + 236);
  if (!*(unsigned char *)(a1 + 236) && *(unsigned char *)(a1 + 232) && *(unsigned char *)(a1 + 233))
  {
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 128);
    if (!v5 || (uint64_t v7 = *(void *)(a1 + 120), (v8 = std::__shared_weak_count::lock(v5)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    CFTypeRef v9 = v8;
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v9);
    }
    uint64_t v10 = *(void *)(a1 + 192);
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v25 = &v26;
    if (&v25 != a2) {
      std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v25, *a2, a2 + 1);
    }
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3321888768;
    v17[2] = ___ZN10CPMSModule24sendPowerBudgetToBB_syncE11PowerBudget_block_invoke;
    v17[3] = &__block_descriptor_88_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE56c17_ZTS11PowerBudget_e44_v16__0_CFSharedRef___CFError______CFError__8l;
    v17[4] = a1;
    v17[5] = v7;
    uint64_t v18 = v9;
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v19 = &v20;
    id v20 = 0;
    uint64_t v21 = 0;
    id v22 = 0;
    if (&v19 != a2) {
      std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v19, *a2, a2 + 1);
    }
    id v22 = (id)[a2[3] copy];
    uint64_t v11 = _Block_copy(v17);
    int v12 = *(NSObject **)(a1 + 136);
    if (v12) {
      dispatch_retain(v12);
    }
    aBlock = v11;
    dispatch_object_t object = v12;
    (*(void (**)(uint64_t, void ***, void **))(*(void *)v10 + 24))(v10, &v25, &aBlock);
    if (object) {
      dispatch_release(object);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v25, v26);
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v25 = &v26;
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v19, v20);
    id v20 = 0;
    uint64_t v21 = 0;
    uint64_t v19 = &v20;

    id v22 = 0;
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v19, v20);
    id v20 = 0;
    uint64_t v21 = 0;
    uint64_t v19 = &v20;
    if (v18) {
      std::__shared_weak_count::__release_weak(v18);
    }
    std::__shared_weak_count::__release_weak(v9);
  }
  else
  {
    int v4 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v13 = "true";
      if (v3) {
        id v14 = "true";
      }
      else {
        id v14 = "false";
      }
      int v15 = *(unsigned __int8 *)(a1 + 233);
      if (*(unsigned char *)(a1 + 232)) {
        char v16 = "true";
      }
      else {
        char v16 = "false";
      }
      *(_DWORD *)buf = 136315650;
      __int16 v29 = v14;
      __int16 v30 = 2080;
      if (!v15) {
        uint64_t v13 = "false";
      }
      char v31 = v16;
      __int16 v32 = 2080;
      uint64_t v33 = v13;
      _os_log_debug_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEBUG, "#D Not sending budget to BB due to this condition: BrickMode: %s, Baseband is ready: %s, Baseband is online: %s", buf, 0x20u);
    }
  }
}

void sub_1C5B3B770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN10CPMSModule24sendPowerBudgetToBB_syncE11PowerBudget_block_invoke(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  int v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    BOOL v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      CFTypeRef v9 = *(NSObject **)(v5 + 88);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        if (*a2) {
          uint64_t v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v10 = 0;
        }
        if (v10) {
          uint64_t v11 = "failed";
        }
        else {
          uint64_t v11 = "succeeded";
        }
        PowerBudget::to_string((PowerBudget *)(a1 + 7), __p);
        if (v14 >= 0) {
          int v12 = __p;
        }
        else {
          int v12 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136315394;
        char v16 = v11;
        __int16 v17 = 2080;
        uint64_t v18 = v12;
        _os_log_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEFAULT, "#I Sent power budget to baseband %s for %s", buf, 0x16u);
        if (v14 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE56c17_ZTS11PowerBudget(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  a1[8] = 0;
  a1[7] = a1 + 8;
  a1[9] = 0;
  a1[10] = 0;
  if ((void *)a2 != a1) {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)(a1 + 7), *(void **)(a2 + 56), (void *)(a2 + 64));
  }
  uint64_t result = [*(id *)(a2 + 80) copy];
  a1[10] = result;
  return result;
}

void sub_1C5B3BA04(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v2, *(void **)(v1 + 64));
  *(void *)(v1 + 64) = 0;
  *(void *)(v1 + 72) = 0;
  *(void *)(v1 + 56) = v3;
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 48);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE56c17_ZTS11PowerBudget(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = a1 + 56;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(a1 + 56, *(void **)(a1 + 64));
  *(void *)(v2 - 8) = v2;
  *(void *)uint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;

  *(void *)(a1 + 80) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v3, *(void **)(a1 + 64));
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = v2;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void CPMSModule::ackPowerBudgetToCPMS_sync(uint64_t a1, id *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v4 = [*(id *)(a1 + 168) acknowledgePowerBudget:PowerBudget::getNSDict(a2) forClientId:4 error:0];
  uint64_t v5 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    if (v4) {
      BOOL v6 = "succeeded";
    }
    else {
      BOOL v6 = "failed";
    }
    int v7 = 136315394;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    id NSDict = PowerBudget::getNSDict(a2);
    _os_log_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_DEFAULT, "#I Acked CPMS %s for power budget %@", (uint8_t *)&v7, 0x16u);
  }
}

void CPMSModule::getCPMSBudgetPlistPath(CPMSModule *this@<X0>, void **a2@<X8>)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  memset(a2, 170, 24);
  v36.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
  *(_OWORD *)&v36.__r_.__value_.__r.__words[1] = xmmword_1C5BCB4E0;
  strcpy(v36.__r_.__value_.__l.__data_, "/System/Library/PrivateFrameworks/AppleBasebandManager.framework/");
  qmemcpy(v29, "anager.frameworks/AppleBasebandMPrivateFramework/System/Library/", sizeof(v29));
  char v35 = 12;
  strcpy(__s, "cpms.budgets");
  int v4 = std::string::append(&v36, __s, 0xCuLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  char v33 = 10;
  strcpy((char *)v32, ".override.");
  BOOL v6 = std::string::append(&v37, (const std::string::value_type *)v32, 0xAuLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  unsigned int v8 = capabilities::radio::product((capabilities::radio *)v6);
  std::to_string(&v39, v8);
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v9 = &v39;
  }
  else {
    __int16 v9 = (std::string *)v39.__r_.__value_.__r.__words[0];
  }
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v39.__r_.__value_.__l.__size_;
  }
  uint64_t v11 = std::string::append(&v38, (const std::string::value_type *)v9, size);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v40.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  char v31 = 6;
  strcpy(v30, ".plist");
  uint64_t v13 = std::string::append(&v40, v30, 6uLL);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  a2[2] = (void *)v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)a2 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (v31 < 0)
  {
    operator delete(*(void **)v30);
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_20;
    }
  }
  else if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v40.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(v39.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_11:
    if ((v33 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(v38.__r_.__value_.__l.__data_);
  if ((v33 & 0x80000000) == 0)
  {
LABEL_12:
    if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(v32[0]);
  if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_13:
    if ((v35 & 0x80000000) == 0) {
      goto LABEL_14;
    }
LABEL_24:
    operator delete(*(void **)__s);
    if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
LABEL_23:
  operator delete(v37.__r_.__value_.__l.__data_);
  if (v35 < 0) {
    goto LABEL_24;
  }
LABEL_14:
  if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_15;
  }
LABEL_25:
  operator delete(v36.__r_.__value_.__l.__data_);
LABEL_15:
  uint64_t v15 = ctu::fs::file_exists();
  if (v15) {
    goto LABEL_35;
  }
  if (config::hw::watch((config::hw *)v15))
  {
    char v16 = operator new(0x48uLL);
    v37.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
    *(_OWORD *)&v37.__r_.__value_.__r.__words[1] = xmmword_1C5BCB4E0;
    v16[32] = 47;
    *(_OWORD *)char v16 = v29[3];
    *((_OWORD *)v16 + 1) = v29[2];
    *((_OWORD *)v16 + 2) = v29[1];
    *((_OWORD *)v16 + 3) = v29[0];
    *((unsigned char *)&v36.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&v36, "cpms.budgets");
    __int16 v17 = std::string::append(&v37, (const std::string::value_type *)&v36, 0xCuLL);
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    char v35 = 6;
    strcpy(__s, ".watch");
    uint64_t v19 = std::string::append(&v38, __s, 6uLL);
  }
  else
  {
    id v22 = operator new(0x48uLL);
    v37.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
    *(_OWORD *)&v37.__r_.__value_.__r.__words[1] = xmmword_1C5BCB4E0;
    v22[32] = 47;
    *(_OWORD *)id v22 = v29[3];
    *((_OWORD *)v22 + 1) = v29[2];
    *((_OWORD *)v22 + 2) = v29[1];
    *((_OWORD *)v22 + 3) = v29[0];
    *((unsigned char *)&v36.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&v36, "cpms.budgets");
    id v23 = std::string::append(&v37, (const std::string::value_type *)&v36, 0xCuLL);
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    char v35 = 7;
    strcpy(__s, ".iphone");
    uint64_t v19 = std::string::append(&v38, __s, 7uLL);
  }
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v40.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  char v33 = 6;
  strcpy((char *)v32, ".plist");
  uint64_t v21 = std::string::append(&v40, (const std::string::value_type *)v32, 6uLL);
  std::string::size_type v25 = v21->__r_.__value_.__r.__words[0];
  v39.__r_.__value_.__r.__words[0] = v21->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v39.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
  char v26 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (*((char *)a2 + 23) < 0) {
    operator delete(*a2);
  }
  *a2 = (void *)v25;
  a2[1] = (void *)v39.__r_.__value_.__r.__words[0];
  *(void **)((char *)a2 + 15) = *(void **)((char *)v39.__r_.__value_.__r.__words + 7);
  *((unsigned char *)a2 + 23) = v26;
  if (v33 < 0)
  {
    operator delete(v32[0]);
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_31:
      if ((v35 & 0x80000000) == 0) {
        goto LABEL_32;
      }
      goto LABEL_43;
    }
  }
  else if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(v40.__r_.__value_.__l.__data_);
  if ((v35 & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_44;
  }
LABEL_43:
  operator delete(*(void **)__s);
  if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_33:
    if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_45;
  }
LABEL_44:
  operator delete(v38.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_34:
    if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_46;
  }
LABEL_45:
  operator delete(v36.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_35:
    uint64_t v27 = *((void *)this + 11);
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    goto LABEL_36;
  }
LABEL_46:
  operator delete(v37.__r_.__value_.__l.__data_);
  uint64_t v27 = *((void *)this + 11);
  if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
    return;
  }
LABEL_36:
  if (*((char *)a2 + 23) >= 0) {
    std::string::size_type v28 = (std::string::size_type)a2;
  }
  else {
    std::string::size_type v28 = (std::string::size_type)*a2;
  }
  LODWORD(v40.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)v40.__r_.__value_.__r.__words + 4) = v28;
  _os_log_impl(&dword_1C59C6000, v27, OS_LOG_TYPE_DEFAULT, "#I CPMS Power Budget List: %s", (uint8_t *)&v40, 0xCu);
}

void sub_1C5B3C1A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v49 - 73) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a36 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(char *)(v49 - 73) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v49 - 96));
  if ((a36 & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v49 - 121) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a31);
  if ((*(char *)(v49 - 121) & 0x80000000) == 0)
  {
LABEL_5:
    if ((a42 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*(void **)(v49 - 144));
  if ((a42 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a48 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a37);
  if ((a48 & 0x80000000) == 0)
  {
LABEL_7:
    if ((*(char *)(v48 + 23) & 0x80000000) == 0) {
LABEL_16:
    }
      _Unwind_Resume(exception_object);
LABEL_15:
    operator delete(*(void **)v48);
    goto LABEL_16;
  }
LABEL_14:
  operator delete(a43);
  if ((*(char *)(v48 + 23) & 0x80000000) == 0) {
    goto LABEL_16;
  }
  goto LABEL_15;
}

uint64_t *CPMSModule::initPowerConfig_sync(void)::$_1::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v8 = *MEMORY[0x1E4F566B0];
  if ([a2 isEqualToString:*MEMORY[0x1E4F566B0]])
  {
    id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    [v9 addObject:[a3 valueForKey:@"Min"]];
    [v9 addObject:[a3 valueForKey:@"Max"]];
    [a4 setObject:v9 forKey:v8];
    int v10 = [(id)[a3 valueForKey:@"Min"] unsignedIntValue];
    uint64_t v11 = *(uint64_t **)(a1 + 280);
    if (v11)
    {
      while (1)
      {
        long long v12 = (uint64_t **)v11;
        if (!*((unsigned char *)v11 + 28)) {
          break;
        }
        uint64_t v11 = (uint64_t *)*v11;
        if (!*v12) {
          goto LABEL_85;
        }
      }
      v75 = v11;
    }
    else
    {
      long long v12 = (uint64_t **)(a1 + 280);
LABEL_85:
      v75 = operator new(0x28uLL);
      v75[28] = 0;
      v75[32] = 0;
      v75[36] = 0;
      *(void *)v75 = 0;
      *((void *)v75 + 1) = 0;
      *((void *)v75 + 2) = v12;
      *long long v12 = (uint64_t *)v75;
      uint64_t v76 = **(void **)(a1 + 272);
      v77 = (uint64_t *)v75;
      if (v76)
      {
        *(void *)(a1 + 272) = v76;
        v77 = *v12;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 280), v77);
      ++*(void *)(a1 + 288);
    }
    *((_DWORD *)v75 + 8) = v10;
    v75[36] = 1;
    int v78 = [[a3 valueForKey:@"Max"] unsignedIntValue];
    v79 = *(uint64_t **)(a1 + 312);
    if (v79)
    {
      while (1)
      {
        v80 = (uint64_t **)v79;
        if (!*((unsigned char *)v79 + 28)) {
          break;
        }
        v79 = (uint64_t *)*v79;
        if (!*v80) {
          goto LABEL_94;
        }
      }
      v81 = v79;
    }
    else
    {
      v80 = (uint64_t **)(a1 + 312);
LABEL_94:
      v81 = operator new(0x28uLL);
      v81[28] = 0;
      v81[32] = 0;
      v81[36] = 0;
      *(void *)v81 = 0;
      *((void *)v81 + 1) = 0;
      *((void *)v81 + 2) = v80;
      std::__shared_weak_count *v80 = (uint64_t *)v81;
      uint64_t v82 = **(void **)(a1 + 304);
      long long v83 = (uint64_t *)v81;
      if (v82)
      {
        *(void *)(a1 + 304) = v82;
        long long v83 = *v80;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 312), v83);
      ++*(void *)(a1 + 320);
    }
    *((_DWORD *)v81 + 8) = v78;
    v81[36] = 1;
    uint64_t result = (uint64_t *)[((id)objc_msgSend(a3, "valueForKey:", @"Idle")) unsignedIntValue];
    int v84 = (int)result;
    v85 = *(uint64_t **)(a1 + 344);
    if (v85)
    {
      while (1)
      {
        __int16 v86 = (uint64_t **)v85;
        if (!*((unsigned char *)v85 + 28)) {
          break;
        }
        v85 = (uint64_t *)*v85;
        if (!*v86) {
          goto LABEL_103;
        }
      }
      *((_DWORD *)v85 + 8) = result;
      *((unsigned char *)v85 + 36) = 1;
      v90 = *(unsigned __int8 ***)(a1 + 376);
      if (v90) {
        goto LABEL_106;
      }
    }
    else
    {
      __int16 v86 = (uint64_t **)(a1 + 344);
LABEL_103:
      int v87 = operator new(0x28uLL);
      v87[28] = 0;
      v87[32] = 0;
      v87[36] = 0;
      *(void *)int v87 = 0;
      *((void *)v87 + 1) = 0;
      *((void *)v87 + 2) = v86;
      *__int16 v86 = (uint64_t *)v87;
      uint64_t v88 = **(void **)(a1 + 336);
      v89 = (uint64_t *)v87;
      if (v88)
      {
        *(void *)(a1 + 336) = v88;
        v89 = *v86;
      }
      uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 344), v89);
      ++*(void *)(a1 + 352);
      *((_DWORD *)v87 + 8) = v84;
      v87[36] = 1;
      v90 = *(unsigned __int8 ***)(a1 + 376);
      if (v90)
      {
LABEL_106:
        while (1)
        {
          uint64_t v41 = v90;
          if (!*((unsigned char *)v90 + 28)) {
            break;
          }
          v90 = (unsigned __int8 **)*v90;
          if (!*v41) {
            goto LABEL_111;
          }
        }
        long long v42 = v90;
        goto LABEL_277;
      }
    }
    uint64_t v41 = (unsigned __int8 **)(a1 + 376);
LABEL_111:
    unint64_t v45 = (unsigned __int8 *)operator new(0x28uLL);
    v45[28] = 0;
    v45[32] = 0;
    v45[36] = 0;
    *(void *)unint64_t v45 = 0;
    *((void *)v45 + 1) = 0;
    *((void *)v45 + 2) = v41;
    *uint64_t v41 = v45;
    uint64_t v91 = **(void **)(a1 + 368);
    if (!v91) {
      goto LABEL_112;
    }
LABEL_275:
    *(void *)(a1 + 368) = v91;
    long long v42 = (unsigned __int8 **)v45;
    unint64_t v45 = *v41;
    goto LABEL_276;
  }
  uint64_t v13 = *MEMORY[0x1E4F566A0];
  if ([a2 isEqualToString:*MEMORY[0x1E4F566A0]])
  {
    id v14 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    [v14 addObject:[a3 valueForKey:@"Min"]];
    [v14 addObject:[a3 valueForKey:@"Max"]];
    [a4 setObject:v14 forKey:v13];
    int v15 = [[a3 valueForKey:@"Min"] unsignedIntValue];
    char v16 = *(unsigned __int8 **)(a1 + 280);
    if (v16)
    {
      while (1)
      {
        while (1)
        {
          long long v18 = v16;
          unsigned int v19 = v16[28];
          if (v19 < 2) {
            break;
          }
          char v16 = (unsigned __int8 *)*v18;
          __int16 v17 = (uint64_t **)v18;
          if (!*v18) {
            goto LABEL_14;
          }
        }
        if (v19) {
          break;
        }
        char v16 = (unsigned __int8 *)v18[1];
        if (!v16)
        {
          __int16 v17 = (uint64_t **)(v18 + 1);
          goto LABEL_14;
        }
      }
    }
    else
    {
      __int16 v17 = (uint64_t **)(a1 + 280);
      long long v18 = (void *)(a1 + 280);
LABEL_14:
      long long v20 = v18;
      long long v18 = operator new(0x28uLL);
      *((unsigned char *)v18 + 28) = 1;
      *((unsigned char *)v18 + 32) = 0;
      *((unsigned char *)v18 + 36) = 0;
      *long long v18 = 0;
      v18[1] = 0;
      v18[2] = v20;
      std::string *v17 = v18;
      uint64_t v21 = **(void **)(a1 + 272);
      id v22 = v18;
      if (v21)
      {
        *(void *)(a1 + 272) = v21;
        id v22 = *v17;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 280), v22);
      ++*(void *)(a1 + 288);
    }
    *((_DWORD *)v18 + 8) = v15;
    *((unsigned char *)v18 + 36) = 1;
    int v23 = [[a3 valueForKey:@"Max"] unsignedIntValue];
    long long v24 = *(unsigned __int8 **)(a1 + 312);
    if (v24)
    {
      while (1)
      {
        while (1)
        {
          char v26 = v24;
          unsigned int v27 = v24[28];
          if (v27 < 2) {
            break;
          }
          long long v24 = (unsigned __int8 *)*v26;
          std::string::size_type v25 = (uint64_t **)v26;
          if (!*v26) {
            goto LABEL_24;
          }
        }
        if (v27) {
          break;
        }
        long long v24 = (unsigned __int8 *)v26[1];
        if (!v24)
        {
          std::string::size_type v25 = (uint64_t **)(v26 + 1);
          goto LABEL_24;
        }
      }
    }
    else
    {
      std::string::size_type v25 = (uint64_t **)(a1 + 312);
      char v26 = (void *)(a1 + 312);
LABEL_24:
      std::string::size_type v28 = v26;
      char v26 = operator new(0x28uLL);
      *((unsigned char *)v26 + 28) = 1;
      *((unsigned char *)v26 + 32) = 0;
      *((unsigned char *)v26 + 36) = 0;
      *char v26 = 0;
      v26[1] = 0;
      v26[2] = v28;
      void *v25 = v26;
      uint64_t v29 = **(void **)(a1 + 304);
      __int16 v30 = v26;
      if (v29)
      {
        *(void *)(a1 + 304) = v29;
        __int16 v30 = *v25;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 312), v30);
      ++*(void *)(a1 + 320);
    }
    *((_DWORD *)v26 + 8) = v23;
    *((unsigned char *)v26 + 36) = 1;
    uint64_t result = (uint64_t *)[((id)objc_msgSend(a3, "valueForKey:", @"Idle")) unsignedIntValue];
    int v32 = (int)result;
    char v33 = *(unsigned __int8 **)(a1 + 344);
    if (v33)
    {
      while (1)
      {
        while (1)
        {
          char v35 = v33;
          unsigned int v36 = v33[28];
          if (v36 < 2) {
            break;
          }
          char v33 = (unsigned __int8 *)*v35;
          uint64_t v34 = (uint64_t **)v35;
          if (!*v35) {
            goto LABEL_34;
          }
        }
        if (v36) {
          break;
        }
        char v33 = (unsigned __int8 *)v35[1];
        if (!v33)
        {
          uint64_t v34 = (uint64_t **)(v35 + 1);
          goto LABEL_34;
        }
      }
    }
    else
    {
      uint64_t v34 = (uint64_t **)(a1 + 344);
      char v35 = (void *)(a1 + 344);
LABEL_34:
      std::string v37 = v35;
      char v35 = operator new(0x28uLL);
      *((unsigned char *)v35 + 28) = 1;
      *((unsigned char *)v35 + 32) = 0;
      *((unsigned char *)v35 + 36) = 0;
      *char v35 = 0;
      v35[1] = 0;
      v35[2] = v37;
      void *v34 = v35;
      uint64_t v38 = **(void **)(a1 + 336);
      std::string v39 = v35;
      if (v38)
      {
        *(void *)(a1 + 336) = v38;
        std::string v39 = *v34;
      }
      uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 344), v39);
      ++*(void *)(a1 + 352);
    }
    *((_DWORD *)v35 + 8) = v32;
    *((unsigned char *)v35 + 36) = 1;
    std::string v40 = *(unsigned __int8 **)(a1 + 376);
    if (v40)
    {
      while (1)
      {
        while (1)
        {
          long long v42 = (unsigned __int8 **)v40;
          unsigned int v43 = v40[28];
          if (v43 < 2) {
            break;
          }
          std::string v40 = *v42;
          uint64_t v41 = v42;
          if (!*v42) {
            goto LABEL_44;
          }
        }
        if (v43) {
          goto LABEL_277;
        }
        std::string v40 = v42[1];
        if (!v40)
        {
          uint64_t v41 = v42 + 1;
          goto LABEL_44;
        }
      }
    }
    uint64_t v41 = (unsigned __int8 **)(a1 + 376);
    long long v42 = (unsigned __int8 **)(a1 + 376);
LABEL_44:
    std::string v44 = (unsigned __int8 *)operator new(0x28uLL);
    unint64_t v45 = v44;
    v44[28] = 1;
  }
  else
  {
    uint64_t v46 = *MEMORY[0x1E4F566C0];
    if ([a2 isEqualToString:*MEMORY[0x1E4F566C0]])
    {
      id v47 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      [v47 addObject:[a3 valueForKey:@"Min"]];
      [v47 addObject:[a3 valueForKey:@"Max"]];
      [a4 setObject:v47 forKey:v46];
      int v48 = [[a3 valueForKey:@"Min"] unsignedIntValue];
      uint64_t v49 = *(unsigned __int8 **)(a1 + 280);
      if (v49)
      {
        while (1)
        {
          while (1)
          {
            dispatch_object_t v51 = v49;
            unsigned int v52 = v49[28];
            if (v52 < 3) {
              break;
            }
            uint64_t v49 = (unsigned __int8 *)*v51;
            CFTypeRef v50 = (uint64_t **)v51;
            if (!*v51) {
              goto LABEL_53;
            }
          }
          if (v52 == 2) {
            break;
          }
          uint64_t v49 = (unsigned __int8 *)v51[1];
          if (!v49)
          {
            CFTypeRef v50 = (uint64_t **)(v51 + 1);
            goto LABEL_53;
          }
        }
      }
      else
      {
        CFTypeRef v50 = (uint64_t **)(a1 + 280);
        dispatch_object_t v51 = (void *)(a1 + 280);
LABEL_53:
        unint64_t v53 = v51;
        dispatch_object_t v51 = operator new(0x28uLL);
        *((unsigned char *)v51 + 28) = 2;
        *((unsigned char *)v51 + 32) = 0;
        *((unsigned char *)v51 + 36) = 0;
        void *v51 = 0;
        v51[1] = 0;
        void v51[2] = v53;
        void *v50 = v51;
        uint64_t v54 = **(void **)(a1 + 272);
        uint64_t v55 = v51;
        if (v54)
        {
          *(void *)(a1 + 272) = v54;
          uint64_t v55 = *v50;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 280), v55);
        ++*(void *)(a1 + 288);
      }
      *((_DWORD *)v51 + 8) = v48;
      *((unsigned char *)v51 + 36) = 1;
      int v56 = [[a3 valueForKey:@"Max"] unsignedIntValue];
      xpc_object_t v57 = *(unsigned __int8 **)(a1 + 312);
      if (v57)
      {
        while (1)
        {
          while (1)
          {
            unint64_t v59 = v57;
            unsigned int v60 = v57[28];
            if (v60 < 3) {
              break;
            }
            xpc_object_t v57 = (unsigned __int8 *)*v59;
            v58 = (uint64_t **)v59;
            if (!*v59) {
              goto LABEL_63;
            }
          }
          if (v60 == 2) {
            break;
          }
          xpc_object_t v57 = (unsigned __int8 *)v59[1];
          if (!v57)
          {
            v58 = (uint64_t **)(v59 + 1);
            goto LABEL_63;
          }
        }
      }
      else
      {
        v58 = (uint64_t **)(a1 + 312);
        unint64_t v59 = (void *)(a1 + 312);
LABEL_63:
        v61 = v59;
        unint64_t v59 = operator new(0x28uLL);
        *((unsigned char *)v59 + 28) = 2;
        *((unsigned char *)v59 + 32) = 0;
        *((unsigned char *)v59 + 36) = 0;
        *unint64_t v59 = 0;
        v59[1] = 0;
        v59[2] = v61;
        void *v58 = v59;
        uint64_t v62 = **(void **)(a1 + 304);
        dispatch_object_t v63 = v59;
        if (v62)
        {
          *(void *)(a1 + 304) = v62;
          dispatch_object_t v63 = *v58;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 312), v63);
        ++*(void *)(a1 + 320);
      }
      *((_DWORD *)v59 + 8) = v56;
      *((unsigned char *)v59 + 36) = 1;
      uint64_t result = (uint64_t *)[[(id)objc_msgSend(a3, "valueForKey:", @"Idle") unsignedIntValue];
      int v64 = (int)result;
      unint64_t v65 = *(unsigned __int8 **)(a1 + 344);
      if (v65)
      {
        while (1)
        {
          while (1)
          {
            v67 = v65;
            unsigned int v68 = v65[28];
            if (v68 < 3) {
              break;
            }
            unint64_t v65 = (unsigned __int8 *)*v67;
            v66 = (uint64_t **)v67;
            if (!*v67) {
              goto LABEL_73;
            }
          }
          if (v68 == 2) {
            break;
          }
          unint64_t v65 = (unsigned __int8 *)v67[1];
          if (!v65)
          {
            v66 = (uint64_t **)(v67 + 1);
            goto LABEL_73;
          }
        }
      }
      else
      {
        v66 = (uint64_t **)(a1 + 344);
        v67 = (void *)(a1 + 344);
LABEL_73:
        long long v69 = v67;
        v67 = operator new(0x28uLL);
        *((unsigned char *)v67 + 28) = 2;
        *((unsigned char *)v67 + 32) = 0;
        *((unsigned char *)v67 + 36) = 0;
        void *v67 = 0;
        v67[1] = 0;
        v67[2] = v69;
        const void *v66 = v67;
        uint64_t v70 = **(void **)(a1 + 336);
        v71 = v67;
        if (v70)
        {
          *(void *)(a1 + 336) = v70;
          v71 = *v66;
        }
        uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 344), v71);
        ++*(void *)(a1 + 352);
      }
      *((_DWORD *)v67 + 8) = v64;
      *((unsigned char *)v67 + 36) = 1;
      v72 = *(unsigned __int8 **)(a1 + 376);
      if (v72)
      {
        while (1)
        {
          while (1)
          {
            long long v42 = (unsigned __int8 **)v72;
            unsigned int v73 = v72[28];
            if (v73 < 3) {
              break;
            }
            v72 = *v42;
            uint64_t v41 = v42;
            if (!*v42) {
              goto LABEL_83;
            }
          }
          if (v73 == 2) {
            goto LABEL_277;
          }
          v72 = v42[1];
          if (!v72)
          {
            uint64_t v41 = v42 + 1;
            goto LABEL_83;
          }
        }
      }
      uint64_t v41 = (unsigned __int8 **)(a1 + 376);
      long long v42 = (unsigned __int8 **)(a1 + 376);
LABEL_83:
      std::string v44 = (unsigned __int8 *)operator new(0x28uLL);
      unint64_t v45 = v44;
      char v74 = 2;
    }
    else
    {
      uint64_t result = (uint64_t *)[a2 isEqualToString:*MEMORY[0x1E4F566D0]];
      if (!result) {
        return result;
      }
      int v92 = [[a3 valueForKey:@"Min"] unsignedIntValue];
      v93 = (uint64_t **)(a1 + 280);
      v94 = *(unsigned __int8 **)(a1 + 280);
      v95 = (uint64_t **)(a1 + 280);
      v96 = (void *)(a1 + 280);
      if (v94)
      {
        while (1)
        {
          while (1)
          {
            v96 = v94;
            unsigned int v97 = v94[28];
            if (v97 < 0xB) {
              break;
            }
            v94 = (unsigned __int8 *)*v96;
            v95 = (uint64_t **)v96;
            if (!*v96) {
              goto LABEL_122;
            }
          }
          if (v97 == 10) {
            break;
          }
          v94 = (unsigned __int8 *)v96[1];
          if (!v94)
          {
            v95 = (uint64_t **)(v96 + 1);
            goto LABEL_122;
          }
        }
      }
      else
      {
LABEL_122:
        v98 = v96;
        v96 = operator new(0x28uLL);
        *((unsigned char *)v96 + 28) = 10;
        *((unsigned char *)v96 + 32) = 0;
        *((unsigned char *)v96 + 36) = 0;
        void *v96 = 0;
        v96[1] = 0;
        v96[2] = v98;
        *v95 = v96;
        uint64_t v99 = **(void **)(a1 + 272);
        v100 = v96;
        if (v99)
        {
          *(void *)(a1 + 272) = v99;
          v100 = *v95;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 280), v100);
        ++*(void *)(a1 + 288);
      }
      *((_DWORD *)v96 + 8) = v92;
      *((unsigned char *)v96 + 36) = 1;
      int v101 = [[a3 valueForKey:@"Max"] unsignedIntValue];
      v102 = (uint64_t **)(a1 + 312);
      v103 = *(unsigned __int8 **)(a1 + 312);
      v104 = (uint64_t **)(a1 + 312);
      v105 = (void *)(a1 + 312);
      if (v103)
      {
        while (1)
        {
          while (1)
          {
            v105 = v103;
            unsigned int v106 = v103[28];
            if (v106 < 0xB) {
              break;
            }
            v103 = (unsigned __int8 *)*v105;
            v104 = (uint64_t **)v105;
            if (!*v105) {
              goto LABEL_132;
            }
          }
          if (v106 == 10) {
            break;
          }
          v103 = (unsigned __int8 *)v105[1];
          if (!v103)
          {
            v104 = (uint64_t **)(v105 + 1);
            goto LABEL_132;
          }
        }
      }
      else
      {
LABEL_132:
        v107 = v105;
        v105 = operator new(0x28uLL);
        *((unsigned char *)v105 + 28) = 10;
        *((unsigned char *)v105 + 32) = 0;
        *((unsigned char *)v105 + 36) = 0;
        void *v105 = 0;
        v105[1] = 0;
        v105[2] = v107;
        *v104 = v105;
        uint64_t v108 = **(void **)(a1 + 304);
        v109 = v105;
        if (v108)
        {
          *(void *)(a1 + 304) = v108;
          v109 = *v104;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 312), v109);
        ++*(void *)(a1 + 320);
      }
      *((_DWORD *)v105 + 8) = v101;
      *((unsigned char *)v105 + 36) = 1;
      int v110 = [[a3 valueForKey:@"Idle"] unsignedIntValue];
      v111 = (uint64_t **)(a1 + 344);
      v112 = *(unsigned __int8 **)(a1 + 344);
      v113 = (uint64_t **)(a1 + 344);
      v114 = (void *)(a1 + 344);
      if (v112)
      {
        while (1)
        {
          while (1)
          {
            v114 = v112;
            unsigned int v115 = v112[28];
            if (v115 < 0xB) {
              break;
            }
            v112 = (unsigned __int8 *)*v114;
            v113 = (uint64_t **)v114;
            if (!*v114) {
              goto LABEL_142;
            }
          }
          if (v115 == 10) {
            break;
          }
          v112 = (unsigned __int8 *)v114[1];
          if (!v112)
          {
            v113 = (uint64_t **)(v114 + 1);
            goto LABEL_142;
          }
        }
      }
      else
      {
LABEL_142:
        v116 = v114;
        v114 = operator new(0x28uLL);
        *((unsigned char *)v114 + 28) = 10;
        *((unsigned char *)v114 + 32) = 0;
        *((unsigned char *)v114 + 36) = 0;
        void *v114 = 0;
        v114[1] = 0;
        v114[2] = v116;
        *v113 = v114;
        uint64_t v117 = **(void **)(a1 + 336);
        v118 = v114;
        if (v117)
        {
          *(void *)(a1 + 336) = v117;
          v118 = *v113;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 344), v118);
        ++*(void *)(a1 + 352);
      }
      *((_DWORD *)v114 + 8) = v110;
      *((unsigned char *)v114 + 36) = 1;
      uint64_t v41 = (unsigned __int8 **)(a1 + 376);
      v119 = *(unsigned __int8 **)(a1 + 376);
      v120 = (uint64_t **)(a1 + 376);
      v121 = (void *)(a1 + 376);
      if (v119)
      {
        while (1)
        {
          while (1)
          {
            v121 = v119;
            unsigned int v122 = v119[28];
            if (v122 < 0xB) {
              break;
            }
            v119 = (unsigned __int8 *)*v121;
            v120 = (uint64_t **)v121;
            if (!*v121) {
              goto LABEL_152;
            }
          }
          if (v122 == 10) {
            break;
          }
          v119 = (unsigned __int8 *)v121[1];
          if (!v119)
          {
            v120 = (uint64_t **)(v121 + 1);
            goto LABEL_152;
          }
        }
      }
      else
      {
LABEL_152:
        v123 = v121;
        v121 = operator new(0x28uLL);
        *((unsigned char *)v121 + 28) = 10;
        *((unsigned char *)v121 + 32) = 0;
        *((unsigned char *)v121 + 36) = 0;
        void *v121 = 0;
        v121[1] = 0;
        v121[2] = v123;
        *v120 = v121;
        uint64_t v124 = **(void **)(a1 + 368);
        v125 = v121;
        if (v124)
        {
          *(void *)(a1 + 368) = v124;
          v125 = *v120;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 376), v125);
        ++*(void *)(a1 + 384);
      }
      *((_DWORD *)v121 + 8) = 1;
      *((unsigned char *)v121 + 36) = 1;
      int v126 = [(id)[a3 valueForKey:@"Min"] unsignedIntValue];
      v127 = *v93;
      v128 = (uint64_t **)(a1 + 280);
      v129 = (uint64_t **)(a1 + 280);
      if (*v93)
      {
        while (1)
        {
          while (1)
          {
            v129 = (uint64_t **)v127;
            unsigned int v130 = *((unsigned __int8 *)v127 + 28);
            if (v130 < 0xC) {
              break;
            }
            v127 = *v129;
            v128 = v129;
            if (!*v129) {
              goto LABEL_162;
            }
          }
          if (v130 == 11) {
            break;
          }
          v127 = v129[1];
          if (!v127)
          {
            v128 = v129 + 1;
            goto LABEL_162;
          }
        }
      }
      else
      {
LABEL_162:
        v131 = (uint64_t *)v129;
        v129 = (uint64_t **)operator new(0x28uLL);
        *((unsigned char *)v129 + 28) = 11;
        *((unsigned char *)v129 + 32) = 0;
        *((unsigned char *)v129 + 36) = 0;
        *v129 = 0;
        v129[1] = 0;
        v129[2] = v131;
        *v128 = (uint64_t *)v129;
        uint64_t v132 = **(void **)(a1 + 272);
        v133 = (uint64_t *)v129;
        if (v132)
        {
          *(void *)(a1 + 272) = v132;
          v133 = *v128;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 280), v133);
        ++*(void *)(a1 + 288);
      }
      *((_DWORD *)v129 + 8) = v126;
      *((unsigned char *)v129 + 36) = 1;
      int v134 = [[a3 valueForKey:@"Max"] unsignedIntValue];
      v135 = *v102;
      v136 = (uint64_t **)(a1 + 312);
      v137 = (uint64_t **)(a1 + 312);
      if (*v102)
      {
        while (1)
        {
          while (1)
          {
            v137 = (uint64_t **)v135;
            unsigned int v138 = *((unsigned __int8 *)v135 + 28);
            if (v138 < 0xC) {
              break;
            }
            v135 = *v137;
            v136 = v137;
            if (!*v137) {
              goto LABEL_172;
            }
          }
          if (v138 == 11) {
            break;
          }
          v135 = v137[1];
          if (!v135)
          {
            v136 = v137 + 1;
            goto LABEL_172;
          }
        }
      }
      else
      {
LABEL_172:
        v139 = (uint64_t *)v137;
        v137 = (uint64_t **)operator new(0x28uLL);
        *((unsigned char *)v137 + 28) = 11;
        *((unsigned char *)v137 + 32) = 0;
        *((unsigned char *)v137 + 36) = 0;
        *v137 = 0;
        v137[1] = 0;
        v137[2] = v139;
        *v136 = (uint64_t *)v137;
        uint64_t v140 = **(void **)(a1 + 304);
        v141 = (uint64_t *)v137;
        if (v140)
        {
          *(void *)(a1 + 304) = v140;
          v141 = *v136;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 312), v141);
        ++*(void *)(a1 + 320);
      }
      *((_DWORD *)v137 + 8) = v134;
      *((unsigned char *)v137 + 36) = 1;
      int v142 = [[a3 valueForKey:@"Idle"] unsignedIntValue];
      v143 = *v111;
      v144 = (uint64_t **)(a1 + 344);
      v145 = (uint64_t **)(a1 + 344);
      if (*v111)
      {
        while (1)
        {
          while (1)
          {
            v145 = (uint64_t **)v143;
            unsigned int v146 = *((unsigned __int8 *)v143 + 28);
            if (v146 < 0xC) {
              break;
            }
            v143 = *v145;
            v144 = v145;
            if (!*v145) {
              goto LABEL_182;
            }
          }
          if (v146 == 11) {
            break;
          }
          v143 = v145[1];
          if (!v143)
          {
            v144 = v145 + 1;
            goto LABEL_182;
          }
        }
      }
      else
      {
LABEL_182:
        v147 = (uint64_t *)v145;
        v145 = (uint64_t **)operator new(0x28uLL);
        *((unsigned char *)v145 + 28) = 11;
        *((unsigned char *)v145 + 32) = 0;
        *((unsigned char *)v145 + 36) = 0;
        *v145 = 0;
        v145[1] = 0;
        v145[2] = v147;
        *v144 = (uint64_t *)v145;
        uint64_t v148 = **(void **)(a1 + 336);
        v149 = (uint64_t *)v145;
        if (v148)
        {
          *(void *)(a1 + 336) = v148;
          v149 = *v144;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 344), v149);
        ++*(void *)(a1 + 352);
      }
      *((_DWORD *)v145 + 8) = v142;
      *((unsigned char *)v145 + 36) = 1;
      v150 = *v41;
      v151 = (uint64_t **)(a1 + 376);
      v152 = (void *)(a1 + 376);
      if (*v41)
      {
        while (1)
        {
          while (1)
          {
            v152 = v150;
            unsigned int v153 = v150[28];
            if (v153 < 0xC) {
              break;
            }
            v150 = (unsigned __int8 *)*v152;
            v151 = (uint64_t **)v152;
            if (!*v152) {
              goto LABEL_192;
            }
          }
          if (v153 == 11) {
            break;
          }
          v150 = (unsigned __int8 *)v152[1];
          if (!v150)
          {
            v151 = (uint64_t **)(v152 + 1);
            goto LABEL_192;
          }
        }
      }
      else
      {
LABEL_192:
        v154 = v152;
        v152 = operator new(0x28uLL);
        *((unsigned char *)v152 + 28) = 11;
        *((unsigned char *)v152 + 32) = 0;
        *((unsigned char *)v152 + 36) = 0;
        void *v152 = 0;
        v152[1] = 0;
        v152[2] = v154;
        *v151 = v152;
        uint64_t v155 = **(void **)(a1 + 368);
        v156 = v152;
        if (v155)
        {
          *(void *)(a1 + 368) = v155;
          v156 = *v151;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 376), v156);
        ++*(void *)(a1 + 384);
      }
      *((_DWORD *)v152 + 8) = 1;
      *((unsigned char *)v152 + 36) = 1;
      int v157 = [[a3 valueForKey:@"Min"] unsignedIntValue];
      v158 = (unsigned __int8 *)*v93;
      v159 = (uint64_t **)(a1 + 280);
      v160 = (void *)(a1 + 280);
      if (*v93)
      {
        while (1)
        {
          while (1)
          {
            v160 = v158;
            unsigned int v161 = v158[28];
            if (v161 < 0xD) {
              break;
            }
            v158 = (unsigned __int8 *)*v160;
            v159 = (uint64_t **)v160;
            if (!*v160) {
              goto LABEL_202;
            }
          }
          if (v161 == 12) {
            break;
          }
          v158 = (unsigned __int8 *)v160[1];
          if (!v158)
          {
            v159 = (uint64_t **)(v160 + 1);
            goto LABEL_202;
          }
        }
      }
      else
      {
LABEL_202:
        v162 = v160;
        v160 = operator new(0x28uLL);
        *((unsigned char *)v160 + 28) = 12;
        *((unsigned char *)v160 + 32) = 0;
        *((unsigned char *)v160 + 36) = 0;
        void *v160 = 0;
        v160[1] = 0;
        v160[2] = v162;
        *v159 = v160;
        uint64_t v163 = **(void **)(a1 + 272);
        v164 = v160;
        if (v163)
        {
          *(void *)(a1 + 272) = v163;
          v164 = *v159;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 280), v164);
        ++*(void *)(a1 + 288);
      }
      *((_DWORD *)v160 + 8) = v157;
      *((unsigned char *)v160 + 36) = 1;
      int v165 = [[a3 valueForKey:@"Max"] unsignedIntValue];
      v166 = (unsigned __int8 *)*v102;
      v167 = (uint64_t **)(a1 + 312);
      v168 = (void *)(a1 + 312);
      if (*v102)
      {
        while (1)
        {
          while (1)
          {
            v168 = v166;
            unsigned int v169 = v166[28];
            if (v169 < 0xD) {
              break;
            }
            v166 = (unsigned __int8 *)*v168;
            v167 = (uint64_t **)v168;
            if (!*v168) {
              goto LABEL_212;
            }
          }
          if (v169 == 12) {
            break;
          }
          v166 = (unsigned __int8 *)v168[1];
          if (!v166)
          {
            v167 = (uint64_t **)(v168 + 1);
            goto LABEL_212;
          }
        }
      }
      else
      {
LABEL_212:
        v170 = v168;
        v168 = operator new(0x28uLL);
        *((unsigned char *)v168 + 28) = 12;
        *((unsigned char *)v168 + 32) = 0;
        *((unsigned char *)v168 + 36) = 0;
        void *v168 = 0;
        v168[1] = 0;
        v168[2] = v170;
        *v167 = v168;
        uint64_t v171 = **(void **)(a1 + 304);
        v172 = v168;
        if (v171)
        {
          *(void *)(a1 + 304) = v171;
          v172 = *v167;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 312), v172);
        ++*(void *)(a1 + 320);
      }
      *((_DWORD *)v168 + 8) = v165;
      *((unsigned char *)v168 + 36) = 1;
      int v173 = [[a3 valueForKey:@"Idle"] unsignedIntValue];
      v174 = (unsigned __int8 *)*v111;
      v175 = (uint64_t **)(a1 + 344);
      v176 = (void *)(a1 + 344);
      if (*v111)
      {
        while (1)
        {
          while (1)
          {
            v176 = v174;
            unsigned int v177 = v174[28];
            if (v177 < 0xD) {
              break;
            }
            v174 = (unsigned __int8 *)*v176;
            v175 = (uint64_t **)v176;
            if (!*v176) {
              goto LABEL_222;
            }
          }
          if (v177 == 12) {
            break;
          }
          v174 = (unsigned __int8 *)v176[1];
          if (!v174)
          {
            v175 = (uint64_t **)(v176 + 1);
            goto LABEL_222;
          }
        }
      }
      else
      {
LABEL_222:
        v178 = v176;
        v176 = operator new(0x28uLL);
        *((unsigned char *)v176 + 28) = 12;
        *((unsigned char *)v176 + 32) = 0;
        *((unsigned char *)v176 + 36) = 0;
        void *v176 = 0;
        v176[1] = 0;
        v176[2] = v178;
        *v175 = v176;
        uint64_t v179 = **(void **)(a1 + 336);
        v180 = v176;
        if (v179)
        {
          *(void *)(a1 + 336) = v179;
          v180 = *v175;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 344), v180);
        ++*(void *)(a1 + 352);
      }
      *((_DWORD *)v176 + 8) = v173;
      *((unsigned char *)v176 + 36) = 1;
      v181 = *v41;
      v182 = (uint64_t **)(a1 + 376);
      v183 = (void *)(a1 + 376);
      if (*v41)
      {
        while (1)
        {
          while (1)
          {
            v183 = v181;
            unsigned int v184 = v181[28];
            if (v184 < 0xD) {
              break;
            }
            v181 = (unsigned __int8 *)*v183;
            v182 = (uint64_t **)v183;
            if (!*v183) {
              goto LABEL_232;
            }
          }
          if (v184 == 12) {
            break;
          }
          v181 = (unsigned __int8 *)v183[1];
          if (!v181)
          {
            v182 = (uint64_t **)(v183 + 1);
            goto LABEL_232;
          }
        }
      }
      else
      {
LABEL_232:
        v185 = v183;
        v183 = operator new(0x28uLL);
        *((unsigned char *)v183 + 28) = 12;
        *((unsigned char *)v183 + 32) = 0;
        *((unsigned char *)v183 + 36) = 0;
        void *v183 = 0;
        v183[1] = 0;
        v183[2] = v185;
        *v182 = v183;
        uint64_t v186 = **(void **)(a1 + 368);
        v187 = v183;
        if (v186)
        {
          *(void *)(a1 + 368) = v186;
          v187 = *v182;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 376), v187);
        ++*(void *)(a1 + 384);
      }
      *((_DWORD *)v183 + 8) = 1;
      *((unsigned char *)v183 + 36) = 1;
      int v188 = [[a3 valueForKey:@"Min"] unsignedIntValue];
      v189 = (unsigned __int8 *)*v93;
      v190 = (void *)(a1 + 280);
      if (*v93)
      {
        while (1)
        {
          while (1)
          {
            v190 = v189;
            unsigned int v191 = v189[28];
            if (v191 < 0xE) {
              break;
            }
            v189 = (unsigned __int8 *)*v190;
            v93 = (uint64_t **)v190;
            if (!*v190) {
              goto LABEL_242;
            }
          }
          if (v191 == 13) {
            break;
          }
          v189 = (unsigned __int8 *)v190[1];
          if (!v189)
          {
            v93 = (uint64_t **)(v190 + 1);
            goto LABEL_242;
          }
        }
      }
      else
      {
LABEL_242:
        v192 = v190;
        v190 = operator new(0x28uLL);
        *((unsigned char *)v190 + 28) = 13;
        *((unsigned char *)v190 + 32) = 0;
        *((unsigned char *)v190 + 36) = 0;
        void *v190 = 0;
        v190[1] = 0;
        v190[2] = v192;
        *v93 = v190;
        uint64_t v193 = **(void **)(a1 + 272);
        v194 = v190;
        if (v193)
        {
          *(void *)(a1 + 272) = v193;
          v194 = *v93;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 280), v194);
        ++*(void *)(a1 + 288);
      }
      *((_DWORD *)v190 + 8) = v188;
      *((unsigned char *)v190 + 36) = 1;
      int v195 = [[a3 valueForKey:@"Max"] unsignedIntValue];
      v196 = (unsigned __int8 *)*v102;
      v197 = (void *)(a1 + 312);
      if (*v102)
      {
        while (1)
        {
          while (1)
          {
            v197 = v196;
            unsigned int v198 = v196[28];
            if (v198 < 0xE) {
              break;
            }
            v196 = (unsigned __int8 *)*v197;
            v102 = (uint64_t **)v197;
            if (!*v197) {
              goto LABEL_252;
            }
          }
          if (v198 == 13) {
            break;
          }
          v196 = (unsigned __int8 *)v197[1];
          if (!v196)
          {
            v102 = (uint64_t **)(v197 + 1);
            goto LABEL_252;
          }
        }
      }
      else
      {
LABEL_252:
        v199 = v197;
        v197 = operator new(0x28uLL);
        *((unsigned char *)v197 + 28) = 13;
        *((unsigned char *)v197 + 32) = 0;
        *((unsigned char *)v197 + 36) = 0;
        void *v197 = 0;
        v197[1] = 0;
        v197[2] = v199;
        *v102 = v197;
        uint64_t v200 = **(void **)(a1 + 304);
        v201 = v197;
        if (v200)
        {
          *(void *)(a1 + 304) = v200;
          v201 = *v102;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 312), v201);
        ++*(void *)(a1 + 320);
      }
      *((_DWORD *)v197 + 8) = v195;
      *((unsigned char *)v197 + 36) = 1;
      uint64_t result = (uint64_t *)[((id)objc_msgSend(a3, "valueForKey:", @"Idle")) unsignedIntValue];
      int v202 = (int)result;
      v203 = (unsigned __int8 *)*v111;
      v204 = (void *)(a1 + 344);
      if (*v111)
      {
        while (1)
        {
          while (1)
          {
            v204 = v203;
            unsigned int v205 = v203[28];
            if (v205 < 0xE) {
              break;
            }
            v203 = (unsigned __int8 *)*v204;
            v111 = (uint64_t **)v204;
            if (!*v204) {
              goto LABEL_262;
            }
          }
          if (v205 == 13) {
            break;
          }
          v203 = (unsigned __int8 *)v204[1];
          if (!v203)
          {
            v111 = (uint64_t **)(v204 + 1);
            goto LABEL_262;
          }
        }
      }
      else
      {
LABEL_262:
        v206 = v204;
        v204 = operator new(0x28uLL);
        *((unsigned char *)v204 + 28) = 13;
        *((unsigned char *)v204 + 32) = 0;
        *((unsigned char *)v204 + 36) = 0;
        void *v204 = 0;
        v204[1] = 0;
        v204[2] = v206;
        *v111 = v204;
        uint64_t v207 = **(void **)(a1 + 336);
        v208 = v204;
        if (v207)
        {
          *(void *)(a1 + 336) = v207;
          v208 = *v111;
        }
        uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 344), v208);
        ++*(void *)(a1 + 352);
      }
      *((_DWORD *)v204 + 8) = v202;
      *((unsigned char *)v204 + 36) = 1;
      v209 = *v41;
      long long v42 = (unsigned __int8 **)(a1 + 376);
      if (*v41)
      {
        while (1)
        {
          while (1)
          {
            long long v42 = (unsigned __int8 **)v209;
            unsigned int v210 = v209[28];
            if (v210 < 0xE) {
              break;
            }
            v209 = *v42;
            uint64_t v41 = v42;
            if (!*v42) {
              goto LABEL_272;
            }
          }
          if (v210 == 13) {
            goto LABEL_277;
          }
          v209 = v42[1];
          if (!v209)
          {
            uint64_t v41 = v42 + 1;
            break;
          }
        }
      }
LABEL_272:
      std::string v44 = (unsigned __int8 *)operator new(0x28uLL);
      unint64_t v45 = v44;
      char v74 = 13;
    }
    v44[28] = v74;
  }
  v44[32] = 0;
  v44[36] = 0;
  *(void *)std::string v44 = 0;
  *((void *)v44 + 1) = 0;
  *((void *)v44 + 2) = v42;
  *uint64_t v41 = v44;
  uint64_t v91 = **(void **)(a1 + 368);
  if (v91) {
    goto LABEL_275;
  }
LABEL_112:
  long long v42 = (unsigned __int8 **)v45;
LABEL_276:
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 376), (uint64_t *)v45);
  ++*(void *)(a1 + 384);
LABEL_277:
  *((_DWORD *)v42 + 8) = 1;
  *((unsigned char *)v42 + 36) = 1;
  return result;
}

void ___ZN10CPMSModule20initPowerConfig_syncEv_block_invoke(void *a1, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    long long v5 = (void *)a1[4];
    BOOL v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      long long v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      uint64_t v9 = [a2 copy];
      int v10 = (std::__shared_weak_count *)v5[16];
      if (!v10 || (v11 = v5[15], (long long v12 = std::__shared_weak_count::lock(v10)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      uint64_t v13 = v12;
      id v14 = operator new(0x10uLL);
      *id v14 = v9;
      v14[1] = v5;
      int v15 = v5[17];
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      char v16 = operator new(0x18uLL);
      *char v16 = v14;
      v16[1] = v11;
      v16[2] = v13;
      dispatch_async_f(v15, v16, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZNS3_20initPowerConfig_syncEvEUb4_E3__8EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_);
      if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
}

NSObject *___ZN10CPMSModule20initPowerConfig_syncEv_block_invoke_51(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (void *)a1[4];
  int v4 = (capabilities::abs *)std::__shared_weak_count::lock(v2);
  __int16 v17 = v4;
  if (!v4) {
    return 0;
  }
  long long v5 = (std::__shared_weak_count *)v4;
  if (!a1[5])
  {
    long long v7 = 0;
    goto LABEL_25;
  }
  if (!capabilities::abs::supportsCPMSGetPowerFromBB(v4)) {
    goto LABEL_21;
  }
  BOOL v6 = dispatch_group_create();
  long long v7 = v6;
  if (v6)
  {
    dispatch_retain(v6);
    dispatch_group_enter(v7);
    dispatch_retain(v7);
    dispatch_group_enter(v7);
  }
  aBlock = 0;
  int v15 = v7;
  CPMSModule::getCurrentPower((uint64_t)v3, &v15, (uint64_t *)&aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v7)
  {
    dispatch_group_leave(v7);
    dispatch_release(v7);
    dispatch_group_leave(v7);
    dispatch_release(v7);
  }
  dispatch_time_t v8 = dispatch_time(0, 3000000000);
  if (!dispatch_group_wait(v7, v8))
  {
    if (v7) {
      dispatch_release(v7);
    }
LABEL_21:
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = ___ZN10CPMSModule20initPowerConfig_syncEv_block_invoke_52;
    v12[3] = &__block_descriptor_40_e19___NSDictionary_8__0l;
    v12[4] = v3;
    uint64_t v13 = v12;
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    v18[2] = ___ZNK3ctu20SharedSynchronizableI10CPMSModuleE20execute_wrapped_syncIU13block_pointerFP12NSDictionaryvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
    v18[3] = &__block_descriptor_48_e19___NSDictionary_8__0l;
    v18[4] = v3 + 15;
    v18[5] = &v13;
    unsigned int v19 = v18;
    uint64_t v11 = v3[17];
    if (v3[18])
    {
      unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
      uint64_t block = MEMORY[0x1E4F143A8];
      uint64_t v21 = 3221225472;
      id v22 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFP12NSDictionaryvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke;
      int v23 = &__block_descriptor_48_e5_v8__0l;
      long long v24 = &v26;
      std::string::size_type v25 = &v19;
      dispatch_async_and_wait(v11, &block);
    }
    else
    {
      unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
      uint64_t block = MEMORY[0x1E4F143A8];
      uint64_t v21 = 3221225472;
      id v22 = ___ZN8dispatch9sync_implIRU13block_pointerFP12NSDictionaryvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke;
      int v23 = &__block_descriptor_48_e5_v8__0l;
      long long v24 = &v26;
      std::string::size_type v25 = &v19;
      dispatch_sync(v11, &block);
    }
    long long v7 = v26;
    goto LABEL_25;
  }
  uint64_t v9 = v3[11];
  if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    if (!v7) {
      goto LABEL_25;
    }
    goto LABEL_14;
  }
  LOWORD(block) = 0;
  _os_log_error_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_ERROR, "Timeout for getting power estimation", (uint8_t *)&block, 2u);
  if (v7)
  {
LABEL_14:
    dispatch_release(v7);
    long long v7 = 0;
  }
LABEL_25:
  if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v7;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return v7;
}

void sub_1C5B3DD1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *aBlock, uint64_t a17, char a18)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v18)
  {
    dispatch_group_leave(v18);
    dispatch_release(v18);
    dispatch_group_leave(v18);
    dispatch_release(v18);
    dispatch_release(v18);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

id ___ZN10CPMSModule20initPowerConfig_syncEv_block_invoke_52(uint64_t a1)
{
  return PowerBudget::getNSDict((id *)(*(void *)(a1 + 32) + 400));
}

void CPMSModule::evaluateBrickMode_sync(uint64_t a1, long long *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (!config::hw::watch((config::hw *)a1)) {
    return;
  }
  unsigned __int8 v28 = 0;
  *((void *)&buf + 1) = 0;
  uint64_t v32 = 0;
  *(void *)&long long buf = (char *)&buf + 8;
  if (&buf == a2)
  {
    int v4 = (char *)&buf + 8;
  }
  else
  {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&buf, *(void **)a2, (void *)a2 + 1);
    int v4 = (char *)buf;
  }
  long long v5 = (void (**)(void *))&unk_1F210E6D8;
  v29[0] = &unk_1F210E6D8;
  v29[1] = &v28;
  __int16 v30 = v29;
  if (v4 == (char *)&buf + 8) {
    goto LABEL_20;
  }
  BOOL v6 = v29;
  while ((*(unsigned int (**)(void *, char *, char *))(*v6 + 48))(v6, v4 + 28, v4 + 32))
  {
    long long v7 = (char *)*((void *)v4 + 1);
    dispatch_time_t v8 = v4;
    if (v7)
    {
      do
      {
        int v4 = v7;
        long long v7 = *(char **)v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        int v4 = (char *)*((void *)v8 + 2);
        BOOL v9 = *(void *)v4 == (void)v8;
        dispatch_time_t v8 = v4;
      }
      while (!v9);
    }
    if (v4 == (char *)&buf + 8) {
      break;
    }
    BOOL v6 = v30;
    if (!v30) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
  }
  if (v30 == v29)
  {
    long long v5 = (void (**)(void *))v29[0];
LABEL_20:
    v5[4](v29);
    goto LABEL_21;
  }
  if (v30) {
    (*(void (**)(void))(*v30 + 40))();
  }
LABEL_21:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&buf, *((void **)&buf + 1));
  int v10 = v28;
  if (*(unsigned __int8 *)(a1 + 236) == v28) {
    return;
  }
  *(unsigned char *)(a1 + 236) = v28;
  uint64_t v11 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    long long v12 = "enabled";
    if (!v10) {
      long long v12 = "disabled";
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v12;
    _os_log_impl(&dword_1C59C6000, v11, OS_LOG_TYPE_DEFAULT, "#I Brick mode is %s", (uint8_t *)&buf, 0xCu);
  }
  *(void *)&long long buf = 0;
  uint64_t v13 = *MEMORY[0x1E4F1CF80];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable) {
    *(void *)&long long buf = Mutable;
  }
  ctu::cf::insert<char const*,BOOL>(Mutable, (const __CFString **)*MEMORY[0x1E4F4C628], *(unsigned __int8 *)(a1 + 236), v13, v15);
  char v16 = (const void *)*MEMORY[0x1E4F4C330];
  size_t v17 = strlen((const char *)*MEMORY[0x1E4F4C330]);
  if (v17 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  long long v18 = (void *)v17;
  if (v17 >= 0x17)
  {
    uint64_t v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v21 = v17 | 7;
    }
    uint64_t v22 = v21 + 1;
    unsigned int v19 = (void **)operator new(v21 + 1);
    __dst[1] = v18;
    unint64_t v27 = v22 | 0x8000000000000000;
    __dst[0] = v19;
  }
  else
  {
    HIBYTE(v27) = v17;
    unsigned int v19 = __dst;
    if (!v17)
    {
      LOBYTE(__dst[0]) = 0;
      long long v20 = (const void *)buf;
      if (!(void)buf) {
        goto LABEL_39;
      }
      goto LABEL_37;
    }
  }
  memmove(v19, v16, (size_t)v18);
  *((unsigned char *)v18 + (void)v19) = 0;
  long long v20 = (const void *)buf;
  if (!(void)buf)
  {
LABEL_39:
    CFTypeRef cf = 0;
    goto LABEL_40;
  }
LABEL_37:
  CFTypeID v23 = CFGetTypeID(v20);
  if (v23 != CFDictionaryGetTypeID()) {
    goto LABEL_39;
  }
  CFTypeRef cf = v20;
  CFRetain(v20);
LABEL_40:
  aBlock = 0;
  Service::broadcastEvent(a1, (uint64_t)__dst, &cf, (const void **)&aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(v27) < 0)
  {
    operator delete(__dst[0]);
    if (!v20) {
      return;
    }
  }
  else if (!v20)
  {
    return;
  }
  CFRelease(v20);
}

void sub_1C5B3E130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::function<BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void CPMSModule::reportThermalDataToSMC_sync(uint64_t a1, float **a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDCD58, memory_order_acquire) & 1) == 0)
  {
    long long v20 = (capabilities::abs *)__cxa_guard_acquire(&qword_1EBBDCD58);
    if (v20)
    {
      dword_1EBBDCD54 = capabilities::abs::thermalSensorMaxCount(v20);
      __cxa_guard_release(&qword_1EBBDCD58);
    }
  }
  int v29 = 0;
  long long v28 = 0u;
  long long v27 = 0u;
  long long v26 = 0u;
  long long v25 = 0u;
  long long v24 = 0u;
  long long v23 = 0u;
  long long v22 = 0u;
  int v4 = dword_1EBBDCD54;
  if (dword_1EBBDCD54 == 2)
  {
    char v5 = 2;
    int v6 = 2;
  }
  else
  {
    if (dword_1EBBDCD54 != 3)
    {
      CFAllocatorRef v15 = *(NSObject **)(a1 + 88);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)char v31 = v4;
        _os_log_error_impl(&dword_1C59C6000, v15, OS_LOG_TYPE_ERROR, "Failed to find the SMC Exchange BB version with the number of sensor capability %u", buf, 8u);
      }
      return;
    }
    char v5 = 1;
    int v6 = 1;
  }
  v21[1] = v5;
  v21[0] = dword_1EBBDCD54;
  int v7 = _MergedGlobals_5++;
  v21[2] = v7;
  v21[3] = 0;
  dispatch_time_t v8 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)char v31 = v6;
    _os_log_debug_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_DEBUG, "#D Thermal Report to SMC: Version: %u", buf, 8u);
    dispatch_time_t v8 = *(NSObject **)(a1 + 88);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
LABEL_8:
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_9;
      }
      goto LABEL_23;
    }
  }
  else if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    goto LABEL_8;
  }
  *(_DWORD *)long long buf = 67109120;
  *(_DWORD *)char v31 = v4;
  _os_log_debug_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_DEBUG, "#D Thermal Report to SMC: Number of Sensors: %u", buf, 8u);
  dispatch_time_t v8 = *(NSObject **)(a1 + 88);
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
LABEL_9:
    BOOL v9 = *a2;
    int v10 = (unsigned __int8 *)a2[1];
    if (*a2 != (float *)v10) {
      goto LABEL_10;
    }
LABEL_24:
    int v17 = TelephonyBasebandReportThermalData();
    long long v18 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v19 = "Failed";
      if (v17) {
        unsigned int v19 = "Succeeded";
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)char v31 = v19;
      *(_WORD *)&v31[8] = 1024;
      *(_DWORD *)&v31[10] = 255;
      _os_log_impl(&dword_1C59C6000, v18, OS_LOG_TYPE_DEFAULT, "#I %s to report the thermal data to SMC, result: %u", buf, 0x12u);
    }
    return;
  }
LABEL_23:
  *(_DWORD *)long long buf = 67109120;
  *(_DWORD *)char v31 = v7;
  _os_log_debug_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_DEBUG, "#D Thermal Report to SMC: Sequence Number: %u", buf, 8u);
  BOOL v9 = *a2;
  int v10 = (unsigned __int8 *)a2[1];
  if (*a2 == (float *)v10) {
    goto LABEL_24;
  }
LABEL_10:
  unsigned int v11 = dword_1EBBDCD54;
  while (1)
  {
    unsigned int v12 = *(unsigned __int8 *)v9;
    if (v11 <= v12) {
      break;
    }
    float v13 = v9[1];
    *(float *)&v21[4 * *(unsigned __int8 *)v9 + 4] = v13;
    id v14 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)char v31 = v12;
      *(_WORD *)&v31[4] = 2048;
      *(double *)&v31[6] = v13;
      _os_log_debug_impl(&dword_1C59C6000, v14, OS_LOG_TYPE_DEBUG, "#D Thermal Report to SMC: Sensor ID: %d, Sensor Data: %f", buf, 0x12u);
      unsigned int v11 = dword_1EBBDCD54;
      v9 += 2;
      if (v9 == (float *)v10) {
        goto LABEL_24;
      }
    }
    else
    {
      v9 += 2;
      if (v9 == (float *)v10) {
        goto LABEL_24;
      }
    }
  }
  char v16 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)char v31 = v12;
    *(_WORD *)&v31[4] = 1024;
    *(_DWORD *)&v31[6] = v11;
    _os_log_error_impl(&dword_1C59C6000, v16, OS_LOG_TYPE_ERROR, "Sensor ID (%d) cannot exceed the max number of sensors (%u) in the device", buf, 0xEu);
  }
}

void sub_1C5B3E67C(_Unwind_Exception *a1)
{
}

void ___ZN10CPMSModule36configureThermalReportFrequency_syncEjN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_block_invoke(uint64_t a1, float **a2)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int v7 = v6;
      uint64_t v8 = *(void *)(a1 + 40);
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      BOOL v9 = *a2;
      int v10 = a2[1];
      if (*a2 != v10)
      {
        if (*(unsigned char *)(a1 + 56))
        {
          unsigned int v11 = *(NSObject **)(v5 + 88);
          if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
          {
            if (v9 != v10) {
              goto LABEL_14;
            }
            goto LABEL_63;
          }
          *(_WORD *)long long buf = 0;
          _os_log_debug_impl(&dword_1C59C6000, v11, OS_LOG_TYPE_DEBUG, "#D Reporting thermal data to SMC:", buf, 2u);
          BOOL v9 = *a2;
          int v10 = a2[1];
          if (*a2 == v10)
          {
LABEL_63:
            CPMSModule::reportThermalDataToSMC_sync(v5, a2);
            return;
          }
          while (1)
          {
LABEL_14:
            unsigned int v12 = *(NSObject **)(v5 + 88);
            if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
            {
              int v19 = *(unsigned __int8 *)v9;
              *(_DWORD *)long long buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v19;
              _os_log_debug_impl(&dword_1C59C6000, v12, OS_LOG_TYPE_DEBUG, "#D Sensor ID: %d", buf, 8u);
              unsigned int v12 = *(NSObject **)(v5 + 88);
              int v20 = *(unsigned __int8 *)(a1 + 56);
              BOOL v14 = os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG);
              if (v20)
              {
LABEL_16:
                if (v14)
                {
                  double v15 = v9[1];
                  *(_DWORD *)long long buf = 134217984;
                  *(double *)&uint8_t buf[4] = v15;
                  char v16 = v12;
                  int v17 = "#D Sensor Data (float): %f";
                  uint32_t v18 = 12;
LABEL_21:
                  _os_log_debug_impl(&dword_1C59C6000, v16, OS_LOG_TYPE_DEBUG, v17, buf, v18);
                  goto LABEL_13;
                }
                goto LABEL_13;
              }
            }
            else
            {
              int v13 = *(unsigned __int8 *)(a1 + 56);
              BOOL v14 = os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG);
              if (v13) {
                goto LABEL_16;
              }
            }
            if (v14)
            {
              int v21 = *((_DWORD *)v9 + 1);
              *(_DWORD *)long long buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v21;
              char v16 = v12;
              int v17 = "#D Sensor Data (int32): %d";
              uint32_t v18 = 8;
              goto LABEL_21;
            }
LABEL_13:
            v9 += 2;
            if (v9 == v10) {
              goto LABEL_63;
            }
          }
        }
        xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
        xpc_object_t v23 = xpc_dictionary_create(0, 0, 0);
        xpc_object_t v24 = v23;
        uint64_t v25 = MEMORY[0x1E4F14590];
        if (v23)
        {
          xpc_object_t xdict = v23;
        }
        else
        {
          xpc_object_t v24 = xpc_null_create();
          xpc_object_t xdict = v24;
          if (!v24)
          {
            xpc_object_t v26 = xpc_null_create();
            xpc_object_t v24 = 0;
            goto LABEL_31;
          }
        }
        if (MEMORY[0x1C8795EB0](v24) == v25)
        {
          xpc_retain(v24);
          goto LABEL_32;
        }
        xpc_object_t v26 = xpc_null_create();
LABEL_31:
        xpc_object_t xdict = v26;
LABEL_32:
        xpc_release(v24);
        if (MEMORY[0x1C8795EB0](xdict) != v25)
        {
          long long v27 = *(NSObject **)(v5 + 88);
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            _os_log_error_impl(&dword_1C59C6000, v27, OS_LOG_TYPE_ERROR, "Failed to create xpc dictionary!", buf, 2u);
          }
LABEL_61:
          xpc_release(xdict);
          return;
        }
        xpc_object_t v28 = xpc_data_create(*a2, (char *)a2[1] - (char *)*a2);
        if (!v28) {
          xpc_object_t v28 = xpc_null_create();
        }
        xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C260], v28);
        xpc_object_t v29 = xpc_null_create();
        xpc_release(v28);
        xpc_release(v29);
        __int16 v30 = *(NSObject **)(v5 + 88);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
        {
          xpc::dict::to_debug_string((xpc::dict *)&xdict, buf);
          std::string v40 = v47 >= 0 ? buf : *(unsigned char **)buf;
          *(_DWORD *)dispatch_object_t object = 136315138;
          *(void *)&object[4] = v40;
          _os_log_debug_impl(&dword_1C59C6000, v30, OS_LOG_TYPE_DEBUG, "#D Reporting thermal data to Thermal Monitor: %s", object, 0xCu);
          if (v47 < 0) {
            operator delete(*(void **)buf);
          }
        }
        char v31 = (const void *)*MEMORY[0x1E4F4C470];
        size_t v32 = strlen((const char *)*MEMORY[0x1E4F4C470]);
        if (v32 >= 0x7FFFFFFFFFFFFFF8) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        uint64_t v33 = (void *)v32;
        if (v32 >= 0x17)
        {
          uint64_t v35 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v32 | 7) != 0x17) {
            uint64_t v35 = v32 | 7;
          }
          uint64_t v36 = v35 + 1;
          uint64_t v34 = (void **)operator new(v35 + 1);
          __dst[1] = v33;
          unint64_t v44 = v36 | 0x8000000000000000;
          __dst[0] = v34;
        }
        else
        {
          HIBYTE(v44) = v32;
          uint64_t v34 = __dst;
          if (!v32) {
            goto LABEL_46;
          }
        }
        memmove(v34, v31, (size_t)v33);
LABEL_46:
        *((unsigned char *)v33 + (void)v34) = 0;
        *(void *)dispatch_object_t object = xdict;
        if (xdict) {
          xpc_retain(xdict);
        }
        else {
          *(void *)dispatch_object_t object = xpc_null_create();
        }
        xpc::bridge((uint64_t *)buf, (xpc *)object, v37);
        uint64_t v38 = *(const void **)buf;
        if (*(void *)buf && (CFTypeID v39 = CFGetTypeID(*(CFTypeRef *)buf), v39 == CFDictionaryGetTypeID()))
        {
          CFTypeRef cf = v38;
          CFRetain(v38);
        }
        else
        {
          CFTypeRef cf = 0;
        }
        aBlock = 0;
        Service::broadcastEvent(v5, (uint64_t)__dst, &cf, (const void **)&aBlock);
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (cf) {
          CFRelease(cf);
        }
        if (*(void *)buf) {
          CFRelease(*(CFTypeRef *)buf);
        }
        xpc_release(*(xpc_object_t *)object);
        if (SHIBYTE(v44) < 0) {
          operator delete(__dst[0]);
        }
        goto LABEL_61;
      }
      long long v22 = *(NSObject **)(v5 + 88);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1C59C6000, v22, OS_LOG_TYPE_DEFAULT, "#I Thermal Data is empty!", buf, 2u);
      }
    }
  }
}

void sub_1C5B3EC1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *aBlock, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,xpc_object_t object,char a22,uint64_t a23,uint64_t a24,uint64_t a25,xpc_object_t a26)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN10CPMSModule36configureThermalReportFrequency_syncEjN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_block_invoke_74(uint64_t a1, void *a2)
{
  object[1] = *(xpc_object_t *)MEMORY[0x1E4F143B8];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int v7 = v6;
      uint64_t v8 = *(void *)(a1 + 40);
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      if (*a2) {
        BOOL v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      }
      else {
        BOOL v9 = 0;
      }
      if (!v9 && (int v10 = *(NSObject **)(v5 + 88), os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)))
      {
        int v17 = *(_DWORD *)(a1 + 64);
        LODWORD(object[0]) = 67109120;
        HIDWORD(object[0]) = v17;
        _os_log_debug_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_DEBUG, "#D Thermal Report Interval (%u ms) is set.", (uint8_t *)object, 8u);
        if (!*(void *)(a1 + 56)) {
          return;
        }
      }
      else if (!*(void *)(a1 + 56))
      {
        return;
      }
      if (*a2) {
        unsigned int v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      }
      else {
        unsigned int v11 = 0;
      }
      if (v11)
      {
        xpc_object_t v12 = xpc_null_create();
        uint64_t v13 = *(void *)(a1 + 56);
        object[0] = v12;
        xpc_object_t v14 = xpc_null_create();
        (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v13 + 16))(v13, 3760250880, object);
      }
      else
      {
        xpc_object_t v15 = xpc_null_create();
        uint64_t v16 = *(void *)(a1 + 56);
        object[0] = v15;
        xpc_object_t v14 = xpc_null_create();
        (*(void (**)(uint64_t, void, xpc_object_t *))(v16 + 16))(v16, 0, object);
      }
      xpc_release(object[0]);
      xpc_release(v14);
    }
  }
}

void sub_1C5B3EED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *__copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t result = (void *)a2[7];
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void *___ZN10CPMSModule15getCurrentPowerEN8dispatch13group_sessionENS0_5blockIU13block_pointerFviN3xpc4dictEEEE_block_invoke(void *result)
{
  uint64_t v1 = result[6];
  *(unsigned char *)(*(void *)(result[4] + 8) + 24) = *(unsigned char *)(v1 + 234);
  *(unsigned char *)(*(void *)(result[5] + 8) + 24) = *(unsigned char *)(v1 + 233);
  return result;
}

void ___ZN10CPMSModule15getCurrentPowerEN8dispatch13group_sessionENS0_5blockIU13block_pointerFviN3xpc4dictEEEE_block_invoke_2(void *a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[7];
  if (v3)
  {
    uint64_t v5 = a1[4];
    int v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int v7 = v6;
      uint64_t v8 = a1[6];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      BOOL v9 = (id *)(v5 + 400);

      *(void *)(v5 + 424) = 0;
      if (v5 + 400 != a2) {
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>(v5 + 400, *(void **)a2, (void *)(a2 + 8));
      }
      int v10 = *(NSObject **)(v5 + 88);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        PowerBudget::to_string((PowerBudget *)(v5 + 400), __p);
        int v18 = v23;
        int v19 = (xpc_object_t *)__p[0];
        id NSDict = PowerBudget::getNSDict(v9);
        int v21 = __p;
        if (v18 < 0) {
          int v21 = v19;
        }
        *(_DWORD *)dispatch_object_t object = 136315394;
        *(void *)&object[4] = v21;
        __int16 v25 = 2112;
        id v26 = NSDict;
        _os_log_debug_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_DEBUG, "#D Current power estimation in baseband side: %s, and reporting back to CPMS: %@", object, 0x16u);
        if (v23 < 0) {
          operator delete(__p[0]);
        }
      }
      uint64_t v12 = a1[8];
      unsigned int v11 = a1 + 8;
      if (v12)
      {
        uint64_t v13 = (ctu *)PowerBudget::getNSDict(v9);
        ctu::cf_to_xpc((uint64_t *)object, v13, v14);
        xpc_object_t v15 = *(xpc_object_t *)object;
        __p[0] = *(xpc_object_t *)object;
        uint64_t v16 = MEMORY[0x1E4F14590];
        if (*(void *)object && MEMORY[0x1C8795EB0](*(void *)object) == v16)
        {
          xpc_retain(v15);
        }
        else
        {
          xpc_object_t v15 = xpc_null_create();
          __p[0] = v15;
        }
        xpc_release(*(xpc_object_t *)object);
        if (MEMORY[0x1C8795EB0](v15) == v16) {
          int v17 = 0;
        }
        else {
          int v17 = -534716416;
        }
        *(_DWORD *)dispatch_object_t object = v17;
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v11, (unsigned int *)object, __p);
        xpc_release(__p[0]);
      }
    }
  }
}

void sub_1C5B3F230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE64c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(void *a1, void *a2)
{
  int v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    uint64_t v5 = a1[5];
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t result = (void *)a2[8];
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  a1[8] = result;
  return result;
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE64c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(void *a1)
{
  uint64_t v2 = (const void *)a1[8];
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[7];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  int v4 = a1[5];
  if (v4)
  {
    dispatch_group_leave(v4);
    uint64_t v5 = a1[5];
    if (v5)
    {
      dispatch_release(v5);
    }
  }
}

void ___ZN10CPMSModule15getCurrentPowerEN8dispatch13group_sessionENS0_5blockIU13block_pointerFviN3xpc4dictEEEE_block_invoke_77(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[6];
  uint64_t v3 = (id *)(v2 + 400);
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>(v2 + 400, *(void **)(v2 + 336), (void *)(v2 + 344));

  *(void *)(v2 + 424) = [*(id *)(v2 + 360) copy];
  int v4 = *(NSObject **)(v2 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = a1[5];
    if (*(unsigned char *)(*(void *)(a1[4] + 8) + 24)) {
      uint64_t v6 = "true";
    }
    else {
      uint64_t v6 = "false";
    }
    if (*(unsigned char *)(*(void *)(v5 + 8) + 24)) {
      int v7 = "true";
    }
    else {
      int v7 = "false";
    }
    int v8 = 136315650;
    BOOL v9 = v6;
    __int16 v10 = 2080;
    unsigned int v11 = v7;
    __int16 v12 = 2112;
    id NSDict = PowerBudget::getNSDict(v3);
    _os_log_debug_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEBUG, "#D Because baseband is not in traffic(%s) or online(%s), reporting idle power estimation back to CPMS: %@", (uint8_t *)&v8, 0x20u);
  }
}

uint64_t ctu::Loggable<CPMSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<CPMSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (const char *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 16))();
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    int v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<CPMSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<CPMSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F210E570;
  MEMORY[0x1C87940C0](a1 + 1);
  return a1;
}

void ctu::Loggable<CPMSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F210E570;
  MEMORY[0x1C87940C0](a1 + 1);

  operator delete(a1);
}

void std::__shared_ptr_pointer<CPMSModule *,std::shared_ptr<CPMSModule> ctu::SharedSynchronizable<CPMSModule>::make_shared_ptr<CPMSModule>(CPMSModule*)::{lambda(CPMSModule *)#1},std::allocator<CPMSModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<CPMSModule *,std::shared_ptr<CPMSModule> ctu::SharedSynchronizable<CPMSModule>::make_shared_ptr<CPMSModule>(CPMSModule*)::{lambda(CPMSModule *)#1},std::allocator<CPMSModule>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<CPMSModule *,std::shared_ptr<CPMSModule> ctu::SharedSynchronizable<CPMSModule>::make_shared_ptr<CPMSModule>(CPMSModule*)::{lambda(CPMSModule *)#1},std::allocator<CPMSModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI10CPMSModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI10CPMSModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI10CPMSModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI10CPMSModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

uint64_t std::shared_ptr<CPMSModule> ctu::SharedSynchronizable<CPMSModule>::make_shared_ptr<CPMSModule>(CPMSModule*)::{lambda(CPMSModule*)#1}::operator() const(CPMSModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ctu::SharedLoggable<CPMSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F210E570;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<CPMSModule>::execute_wrapped<CPMSModule::shutdown(dispatch::group_session)::$_0>(CPMSModule::shutdown(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CPMSModule::shutdown(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<CPMSModule::shutdown(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(config::hw *a1)
{
  uint64_t v2 = *(void **)a1;
  unint64_t v3 = **(void ***)a1;
  if ((config::hw::watch(a1) & 1) == 0)
  {
    uint64_t v4 = v3[24];
    if (v4) {
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)v4 + 48))(v4, 0, 5);
    }
  }
  size_t v5 = (std::__shared_weak_count *)v3[20];
  v3[19] = 0;
  v3[20] = 0;
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = v2[1];
  if (v6)
  {
    dispatch_group_leave(v6);
    uint64_t v7 = v2[1];
    if (v7) {
      dispatch_release(v7);
    }
  }
  operator delete(v2);
  int v8 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    BOOL v9 = a1;
  }
  else
  {
    BOOL v9 = a1;
  }
  operator delete(v9);
}

void sub_1C5B3F938(_Unwind_Exception *a1)
{
  uint64_t v4 = v2[1];
  if (v4)
  {
    dispatch_group_leave(v4);
    size_t v5 = v2[1];
    if (v5) {
      dispatch_release(v5);
    }
  }
  operator delete(v2);
  uint64_t v6 = (std::__shared_weak_count *)v1[2];
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v4 = *(void **)(*a1 + 16);
  unint64_t v3 = *(void **)(*a1 + 24);
  if (v3)
  {
    uint64_t v5 = v4[24];
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3321888768;
    v13[2] = ___ZZZZN10CPMSModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__1clEv_block_invoke;
    v13[3] = &__block_descriptor_64_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_e172_v32__0_vector_abm::BasebandThermalID__std::allocator_abm::BasebandThermalID____C_C___compressed_pair_abm::BasebandThermalID____std::allocator_abm::BasebandThermalID____C__8l;
    v13[4] = v4;
    v13[5] = *v2;
    uint64_t v6 = (std::__shared_weak_count *)v2[1];
    uint64_t v14 = v6;
    if (!v6
      || (atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed), (unint64_t v3 = (void *)v2[3]) != 0))
    {
      unint64_t v3 = _Block_copy(v3);
    }
    xpc_object_t v15 = v3;
    uint64_t v7 = _Block_copy(v13);
    int v8 = v4[17];
    if (v8) {
      dispatch_retain(v8);
    }
    aBlock = v7;
    dispatch_object_t object = v8;
    (*(void (**)(uint64_t, void **))(*(void *)v5 + 56))(v5, &aBlock);
    if (object) {
      dispatch_release(object);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v15) {
      _Block_release(v15);
    }
    if (v14)
    {
      std::__shared_weak_count::__release_weak(v14);
      BOOL v9 = (const void *)v2[3];
      if (!v9) {
        goto LABEL_19;
      }
LABEL_18:
      _Block_release(v9);
      goto LABEL_19;
    }
LABEL_17:
    BOOL v9 = (const void *)v2[3];
    if (!v9) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  __int16 v10 = v4[11];
  if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
    goto LABEL_17;
  }
  LOWORD(v13[0]) = 0;
  _os_log_error_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_ERROR, "Expected response handler", (uint8_t *)v13, 2u);
  BOOL v9 = (const void *)v2[3];
  if (v9) {
    goto LABEL_18;
  }
LABEL_19:
  unsigned int v11 = (std::__shared_weak_count *)v2[1];
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(v2);
  __int16 v12 = (std::__shared_weak_count *)a1[2];
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  operator delete(a1);
}

void sub_1C5B3FBC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *a16, void *aBlock, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a16) {
    _Block_release(a16);
  }
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  int v21 = (const void *)v19[3];
  if (v21) {
    _Block_release(v21);
  }
  long long v22 = (std::__shared_weak_count *)v19[1];
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
  operator delete(v19);
  char v23 = (std::__shared_weak_count *)v18[2];
  if (v23)
  {
    if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  operator delete(v18);
  _Unwind_Resume(a1);
}

void ___ZZZZN10CPMSModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__1clEv_block_invoke(void *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = a1[4];
  uint64_t v6 = std::__shared_weak_count::lock(v3);
  if (!v6) {
    return;
  }
  uint64_t v7 = v6;
  uint64_t v8 = a1[5];
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v8) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
    if (!v8) {
      return;
    }
  }
  xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v10 = v9;
  uint64_t v11 = MEMORY[0x1E4F14590];
  if (v9)
  {
    xpc_object_t v24 = v9;
  }
  else
  {
    xpc_object_t v10 = xpc_null_create();
    xpc_object_t v24 = v10;
    if (!v10)
    {
      xpc_object_t v12 = xpc_null_create();
      xpc_object_t v10 = 0;
      goto LABEL_14;
    }
  }
  if (MEMORY[0x1C8795EB0](v10) != v11)
  {
    xpc_object_t v12 = xpc_null_create();
LABEL_14:
    xpc_object_t v24 = v12;
    goto LABEL_15;
  }
  xpc_retain(v10);
LABEL_15:
  xpc_release(v10);
  uint64_t v13 = v24;
  if (MEMORY[0x1C8795EB0](v24) == v11)
  {
    uint64_t v17 = *(void *)(a2 + 8);
    if (*(void *)a2 == v17)
    {
      int v20 = *(NSObject **)(v5 + 88);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(object[0]) = 0;
        _os_log_impl(&dword_1C59C6000, v20, OS_LOG_TYPE_DEFAULT, "#I Thermal IDs are empty!", (uint8_t *)object, 2u);
      }
      xpc_object_t v21 = xpc_null_create();
      uint64_t v22 = a1[7];
      object[0] = v21;
      xpc_object_t v23 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v22 + 16))(v22, 3760250880, object);
      xpc_release(object[0]);
      xpc_release(v23);
    }
    else
    {
      xpc_object_t v18 = xpc_data_create(*(const void **)a2, v17 - *(void *)a2);
      if (!v18) {
        xpc_object_t v18 = xpc_null_create();
      }
      xpc_dictionary_set_value(v24, (const char *)*MEMORY[0x1E4F4C1E0], v18);
      xpc_object_t v19 = xpc_null_create();
      xpc_release(v18);
      xpc_release(v19);
      LODWORD(object[0]) = 0;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 7, (unsigned int *)object, &v24);
      uint64_t v13 = v24;
    }
  }
  else
  {
    xpc_object_t v14 = xpc_null_create();
    uint64_t v15 = a1[7];
    object[0] = v14;
    xpc_object_t v16 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v15 + 16))(v15, 3760250880, object);
    xpc_release(object[0]);
    xpc_release(v16);
  }
  xpc_release(v13);
}

void sub_1C5B3FEEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v12);
  xpc_release(v11);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v2 = (void *)*a1;
  unint64_t v3 = *(void **)(*a1 + 16);
  uint64_t v4 = *(unsigned int *)(*a1 + 24);
  uint64_t v5 = *(const void **)(*a1 + 32);
  if (v5) {
    uint64_t v6 = _Block_copy(v5);
  }
  else {
    uint64_t v6 = 0;
  }
  xpc_object_t v10 = v6;
  CPMSModule::configureThermalReportFrequency_sync(v3, v4, &v10);
  if (v6) {
    _Block_release(v6);
  }
  uint64_t v7 = (const void *)v2[4];
  if (v7) {
    _Block_release(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)v2[1];
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(v2);
  xpc_object_t v9 = (std::__shared_weak_count *)a1[2];
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }

  operator delete(a1);
}

void sub_1C5B40094(_Unwind_Exception *a1)
{
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v5 = (const void *)v2[4];
  if (v5) {
    _Block_release(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)v2[1];
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  operator delete(v2);
  uint64_t v7 = (std::__shared_weak_count *)v1[2];
  if (v7)
  {
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb2_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v4 = *(void **)(*a1 + 16);
  unint64_t v3 = *(void **)(*a1 + 24);
  if (v3)
  {
    uint64_t v5 = v4[24];
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3321888768;
    v13[2] = ___ZZZZN10CPMSModule10initializeEN8dispatch13group_sessionEEUb_EUb2_ENK3__3clEv_block_invoke;
    v13[3] = &__block_descriptor_64_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_e240_v32__0_vector_abm::PowerMitigationData__std::allocator_abm::PowerMitigationData_____PowerMitigationData___PowerMitigationData____compressed_pair_abm::PowerMitigationData____std::allocator_abm::PowerMitigationData_____PowerMitigationData___8l;
    v13[4] = v4;
    v13[5] = *v2;
    uint64_t v6 = (std::__shared_weak_count *)v2[1];
    xpc_object_t v14 = v6;
    if (!v6
      || (atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed), (unint64_t v3 = (void *)v2[3]) != 0))
    {
      unint64_t v3 = _Block_copy(v3);
    }
    uint64_t v15 = v3;
    uint64_t v7 = _Block_copy(v13);
    uint64_t v8 = v4[17];
    if (v8) {
      dispatch_retain(v8);
    }
    aBlock = v7;
    dispatch_object_t object = v8;
    (*(void (**)(uint64_t, void **))(*(void *)v5 + 72))(v5, &aBlock);
    if (object) {
      dispatch_release(object);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v15) {
      _Block_release(v15);
    }
    if (v14)
    {
      std::__shared_weak_count::__release_weak(v14);
      xpc_object_t v9 = (const void *)v2[3];
      if (!v9) {
        goto LABEL_19;
      }
LABEL_18:
      _Block_release(v9);
      goto LABEL_19;
    }
LABEL_17:
    xpc_object_t v9 = (const void *)v2[3];
    if (!v9) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  xpc_object_t v10 = v4[11];
  if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
    goto LABEL_17;
  }
  LOWORD(v13[0]) = 0;
  _os_log_error_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_ERROR, "Expected response handler", (uint8_t *)v13, 2u);
  xpc_object_t v9 = (const void *)v2[3];
  if (v9) {
    goto LABEL_18;
  }
LABEL_19:
  uint64_t v11 = (std::__shared_weak_count *)v2[1];
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(v2);
  xpc_object_t v12 = (std::__shared_weak_count *)a1[2];
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  operator delete(a1);
}

void sub_1C5B40334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *a16, void *aBlock, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a16) {
    _Block_release(a16);
  }
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  xpc_object_t v21 = (const void *)v19[3];
  if (v21) {
    _Block_release(v21);
  }
  uint64_t v22 = (std::__shared_weak_count *)v19[1];
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
  operator delete(v19);
  xpc_object_t v23 = (std::__shared_weak_count *)v18[2];
  if (v23)
  {
    if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  operator delete(v18);
  _Unwind_Resume(a1);
}

void ___ZZZZN10CPMSModule10initializeEN8dispatch13group_sessionEEUb_EUb2_ENK3__3clEv_block_invoke(void *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = a1[4];
  uint64_t v6 = std::__shared_weak_count::lock(v3);
  if (!v6) {
    return;
  }
  uint64_t v7 = v6;
  uint64_t v8 = a1[5];
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v8) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
    if (!v8) {
      return;
    }
  }
  xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v10 = v9;
  uint64_t v11 = MEMORY[0x1E4F14590];
  if (v9)
  {
    xpc_object_t v24 = v9;
  }
  else
  {
    xpc_object_t v10 = xpc_null_create();
    xpc_object_t v24 = v10;
    if (!v10)
    {
      xpc_object_t v12 = xpc_null_create();
      xpc_object_t v10 = 0;
      goto LABEL_14;
    }
  }
  if (MEMORY[0x1C8795EB0](v10) != v11)
  {
    xpc_object_t v12 = xpc_null_create();
LABEL_14:
    xpc_object_t v24 = v12;
    goto LABEL_15;
  }
  xpc_retain(v10);
LABEL_15:
  xpc_release(v10);
  uint64_t v13 = v24;
  if (MEMORY[0x1C8795EB0](v24) == v11)
  {
    uint64_t v17 = *(void *)(a2 + 8);
    if (*(void *)a2 == v17)
    {
      int v20 = *(NSObject **)(v5 + 88);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(object[0]) = 0;
        _os_log_impl(&dword_1C59C6000, v20, OS_LOG_TYPE_DEFAULT, "#I Power Mitigation Data are empty!", (uint8_t *)object, 2u);
      }
      xpc_object_t v21 = xpc_null_create();
      uint64_t v22 = a1[7];
      object[0] = v21;
      xpc_object_t v23 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v22 + 16))(v22, 3760250880, object);
      xpc_release(object[0]);
      xpc_release(v23);
    }
    else
    {
      xpc_object_t v18 = xpc_data_create(*(const void **)a2, v17 - *(void *)a2);
      if (!v18) {
        xpc_object_t v18 = xpc_null_create();
      }
      xpc_dictionary_set_value(v24, (const char *)*MEMORY[0x1E4F4C930], v18);
      xpc_object_t v19 = xpc_null_create();
      xpc_release(v18);
      xpc_release(v19);
      LODWORD(object[0]) = 0;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 7, (unsigned int *)object, &v24);
      uint64_t v13 = v24;
    }
  }
  else
  {
    xpc_object_t v14 = xpc_null_create();
    uint64_t v15 = a1[7];
    object[0] = v14;
    xpc_object_t v16 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v15 + 16))(v15, 3760250880, object);
    xpc_release(object[0]);
    xpc_release(v16);
  }
  xpc_release(v13);
}

void sub_1C5B4065C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v12);
  xpc_release(v11);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 16);
  if (MEMORY[0x1C8795EB0](*(void *)(*a1 + 24)) != MEMORY[0x1E4F14590] || (uint64_t v8 = *(void **)(v2 + 24)) == 0)
  {
    uint64_t v4 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      LOWORD(object) = 0;
      _os_log_error_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_ERROR, "Expected intput/response handler", (uint8_t *)&object, 2u);
      if (!*(void *)(v2 + 32)) {
        goto LABEL_49;
      }
    }
    else if (!*(void *)(v2 + 32))
    {
      goto LABEL_49;
    }
    xpc_object_t v5 = xpc_null_create();
    uint64_t v6 = *(void *)(v2 + 32);
    xpc_object_t object = v5;
    xpc_object_t v7 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, 3760250880, &object);
    xpc_release(object);
    xpc_release(v7);
    goto LABEL_49;
  }
  memset(__p, 170, sizeof(__p));
  xpc_object_t value = xpc_dictionary_get_value(v8, (const char *)*MEMORY[0x1E4F4C698]);
  *(void *)CFTypeRef v50 = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    *(void *)CFTypeRef v50 = xpc_null_create();
  }
  xpc_object_t object = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  std::string v40 = v1;
  uint64_t v42 = v2;
  xpc::dyn_cast_or_default();
  xpc_release(*(xpc_object_t *)v50);
  xpc_object_t v10 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E4F4C2C8]);
  xpc_object_t v11 = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    xpc_object_t v11 = xpc_null_create();
  }
  uint64_t v41 = v11;
  bytes_ptr = xpc_data_get_bytes_ptr(v11);
  int64_t length = xpc_data_get_length(v11);
  uint64_t v14 = length;
  if (length >= 4)
  {
    uint64_t v15 = (char *)operator new(length & 0xFFFFFFFFFFFFFFFCLL);
    memcpy(v15, bytes_ptr, v14 & 0xFFFFFFFFFFFFFFFCLL);
    xpc_object_t v16 = &v15[4 * (v14 >> 2)];
    uint64_t v17 = (unsigned __int8 *)__p[0];
    unsigned int v43 = (unsigned __int8 *)__p[1];
    if (__p[0] == __p[1]) {
      goto LABEL_41;
    }
LABEL_16:
    unint64_t v18 = 0;
    xpc_object_t v19 = (uint64_t **)(v3 + 248);
    unint64_t v44 = (v16 - v15) >> 2;
    do
    {
      unsigned int v20 = *v17;
      xpc_object_t v21 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        abm::asString();
        if (v44 <= v18) {
          std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
        }
        p_xpc_object_t object = &object;
        if (v47 < 0) {
          p_xpc_object_t object = object;
        }
        int v23 = *(_DWORD *)&v15[4 * v18];
        *(_DWORD *)CFTypeRef v50 = 136315394;
        *(void *)&v50[4] = p_object;
        __int16 v51 = 1024;
        int v52 = v23;
        _os_log_impl(&dword_1C59C6000, v21, OS_LOG_TYPE_DEFAULT, "#I Budget Scale: %s, value: %d", v50, 0x12u);
        if (SHIBYTE(v47) < 0) {
          operator delete(object);
        }
      }
      if (v44 <= v18) {
        std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
      }
      if (v20 <= 0xD && ((1 << v20) & 0x3C07) != 0)
      {
        __int16 v25 = v15;
        int v26 = *(_DWORD *)&v15[4 * v18];
        uint64_t v27 = *v19;
        xpc_object_t v28 = (uint64_t **)(v3 + 248);
        xpc_object_t v29 = (uint64_t **)(v3 + 248);
        if (*v19)
        {
          while (1)
          {
            while (1)
            {
              xpc_object_t v29 = (uint64_t **)v27;
              unsigned int v30 = *((unsigned __int8 *)v27 + 28);
              if (v30 <= v20) {
                break;
              }
              uint64_t v27 = *v29;
              xpc_object_t v28 = v29;
              if (!*v29) {
                goto LABEL_38;
              }
            }
            if (v30 >= v20) {
              break;
            }
            uint64_t v27 = v29[1];
            if (!v27)
            {
              xpc_object_t v28 = v29 + 1;
              goto LABEL_38;
            }
          }
          char v31 = v29;
        }
        else
        {
LABEL_38:
          char v31 = operator new(0x28uLL);
          v31[28] = v20;
          v31[32] = 0;
          v31[36] = 0;
          *(void *)char v31 = 0;
          *((void *)v31 + 1) = 0;
          *((void *)v31 + 2) = v29;
          void *v28 = (uint64_t *)v31;
          uint64_t v32 = **(void **)(v3 + 240);
          uint64_t v33 = (uint64_t *)v31;
          if (v32)
          {
            *(void *)(v3 + 240) = v32;
            uint64_t v33 = *v28;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 248), v33);
          ++*(void *)(v3 + 256);
        }
        *((_DWORD *)v31 + 8) = v26;
        v31[36] = 1;
        uint64_t v15 = v25;
      }
      ++v18;
      ++v17;
    }
    while (v17 != v43);
    goto LABEL_41;
  }
  uint64_t v15 = 0;
  xpc_object_t v16 = 0;
  uint64_t v17 = (unsigned __int8 *)__p[0];
  unsigned int v43 = (unsigned __int8 *)__p[1];
  if (__p[0] != __p[1]) {
    goto LABEL_16;
  }
LABEL_41:
  xpc_object_t object = &v46;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  id v48 = 0;
  if ((xpc_object_t *)(v3 + 240) != &object) {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&object, *(void **)(v3 + 240), (void *)(v3 + 248));
  }
  id v48 = (id)[*(id *)(v3 + 264) copy];
  uint64_t v2 = v42;
  CPMSModule::sendPowerBudgetToBB_sync(v3, (void **)&object);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&object, v46);
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  xpc_object_t object = &v46;

  id v48 = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&object, v46);
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  xpc_object_t object = &v46;
  uint64_t v1 = v40;
  if (*(void *)(v42 + 32))
  {
    xpc_object_t v34 = xpc_null_create();
    uint64_t v35 = *(void *)(v42 + 32);
    *(void *)CFTypeRef v50 = v34;
    xpc_object_t v36 = xpc_null_create();
    (*(void (**)(uint64_t, void, unsigned char *))(v35 + 16))(v35, 0, v50);
    xpc_release(*(xpc_object_t *)v50);
    xpc_release(v36);
  }
  if (v15) {
    operator delete(v15);
  }
  xpc_release(v41);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_49:
  std::string v37 = *(const void **)(v2 + 32);
  if (v37) {
    _Block_release(v37);
  }
  xpc_release(*(xpc_object_t *)(v2 + 24));
  *(void *)(v2 + 24) = 0;
  uint64_t v38 = *(std::__shared_weak_count **)(v2 + 8);
  if (v38) {
    std::__shared_weak_count::__release_weak(v38);
  }
  operator delete((void *)v2);
  CFTypeID v39 = (std::__shared_weak_count *)v1[2];
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  operator delete(v1);
}

void sub_1C5B40C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, xpc_object_t object, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, xpc_object_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,xpc_object_t a25)
{
  xpc_release(object);
  if (__p) {
    operator delete(__p);
  }
  if (a12)
  {
    int v26 = (const void *)*((void *)a12 + 4);
    if (v26) {
      _Block_release(v26);
    }
    xpc_release(*((xpc_object_t *)a12 + 3));
    *((void *)a12 + 3) = 0;
    uint64_t v27 = (std::__shared_weak_count *)*((void *)a12 + 1);
    if (v27) {
      std::__shared_weak_count::__release_weak(v27);
    }
    operator delete(a12);
  }
  xpc_object_t v28 = (std::__shared_weak_count *)a10[2];
  if (v28)
  {
    if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  operator delete(a10);
  _Unwind_Resume(a1);
}

void sub_1C5B40E68(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]()
{
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZNS3_10initializeENS_13group_sessionEEUb_E3__5EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t a1)
{
  uint64_t v2 = *(CPMSModule ***)a1;
  uint64_t v3 = **(CPMSModule ***)a1;
  CPMSModule::finishInitialization_sync(v3);
  CPMSModule::evaluatePowerBudgetNeed_sync(v3);
  operator delete(v2);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    xpc_object_t v5 = (void *)a1;
  }
  else
  {
    xpc_object_t v5 = (void *)a1;
  }
  operator delete(v5);
}

void sub_1C5B40F60(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  operator delete(v3);
  xpc_object_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c39_ZTSNSt3__110shared_ptrIK10CPMSModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__110shared_ptrIK10CPMSModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZNS3_20initPowerConfig_syncEvEUb4_E3__8EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(NSDictionary ***)a1;
  uint64_t v3 = **(NSDictionary ***)a1;
  if (!v3) {
    goto LABEL_17;
  }
  uint64_t v4 = (uint64_t)v2[1];
  xpc_object_t v5 = *(NSObject **)(v4 + 88);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v3;
    _os_log_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_DEFAULT, "#I Given budget from CPMS is %@", (uint8_t *)&buf, 0xCu);
    uint64_t v3 = *v2;
  }
  PowerBudget::fill((id *)(v4 + 240), v3);
  *(void *)&long long buf = (char *)&buf + 8;
  *((void *)&buf + 1) = 0;
  uint64_t v25 = 0;
  id v26 = 0;
  PowerBudget::fill((id *)&buf, *v2);
  uint64_t v6 = *(NSObject **)(v4 + 88);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    PowerBudget::to_string((PowerBudget *)&buf, &__p);
    int v7 = SHIBYTE(v18);
    uint64_t v8 = (void **)__p;
    PowerBudget::to_string((PowerBudget *)(v4 + 240), v22);
    p_p = &__p;
    if (v7 < 0) {
      p_p = v8;
    }
    if (v22[23] >= 0) {
      xpc_object_t v10 = v22;
    }
    else {
      xpc_object_t v10 = *(unsigned char **)v22;
    }
    *(_DWORD *)unsigned int v20 = 136315394;
    *(void *)&v20[4] = p_p;
    *(_WORD *)&v20[12] = 2080;
    *(void *)&v20[14] = v10;
    _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#I Budget from CPMS: %s, Cached Budgets: %s", v20, 0x16u);
    if ((v22[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v22);
      if ((SHIBYTE(v18) & 0x80000000) == 0) {
        goto LABEL_12;
      }
    }
    else if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete(__p);
  }
LABEL_12:
  long long __p = &v17;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  id v19 = 0;
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&__p, (void *)buf, (void *)&buf + 1);
  id v19 = (id)[v26 copy];
  int v11 = [*(id *)(v4 + 168) acknowledgePowerBudget:PowerBudget::getNSDict(&__p) forClientId:4 error:0];
  xpc_object_t v12 = *(NSObject **)(v4 + 88);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    id NSDict = PowerBudget::getNSDict(&__p);
    uint64_t v14 = "failed";
    if (v11) {
      uint64_t v14 = "succeeded";
    }
    *(_DWORD *)uint64_t v22 = 136315394;
    *(void *)&v22[4] = v14;
    *(_WORD *)&v22[12] = 2112;
    *(void *)&v22[14] = NSDict;
    _os_log_impl(&dword_1C59C6000, v12, OS_LOG_TYPE_DEFAULT, "#I Acked CPMS %s for power budget %@", v22, 0x16u);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&__p, v17);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  long long __p = &v17;

  id v19 = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&__p, v17);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  long long __p = &v17;
  id v23 = 0;
  *(void *)uint64_t v22 = &v22[8];
  *(_OWORD *)&v22[8] = 0uLL;
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)v22, (void *)buf, (void *)&buf + 1);
  id v23 = (id)[v26 copy];
  CPMSModule::evaluateBrickMode_sync(v4, (long long *)v22);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v22, *(void **)&v22[8]);
  *(_OWORD *)&v22[8] = 0uLL;
  *(void *)uint64_t v22 = &v22[8];

  id v23 = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v22, *(void **)&v22[8]);
  *(_OWORD *)&v22[8] = 0uLL;
  id v21 = 0;
  *(void *)uint64_t v22 = &v22[8];
  *(_OWORD *)&v20[8] = 0uLL;
  *(void *)unsigned int v20 = &v20[8];
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)v20, (void *)buf, (void *)&buf + 1);
  id v21 = (id)[v26 copy];
  CPMSModule::sendPowerBudgetToBB_sync(v4, (void **)v20);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v20, *(void **)&v20[8]);
  *(_OWORD *)&v20[8] = 0uLL;
  *(void *)unsigned int v20 = &v20[8];

  id v21 = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v20, *(void **)&v20[8]);
  *(_OWORD *)&v20[8] = 0uLL;
  *(void *)unsigned int v20 = &v20[8];

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&buf, *((void **)&buf + 1));
  *((void *)&buf + 1) = 0;
  uint64_t v25 = 0;
  *(void *)&long long buf = (char *)&buf + 8;

  id v26 = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&buf, *((void **)&buf + 1));
LABEL_17:
  operator delete(v2);
  uint64_t v15 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  operator delete(a1);
}

void sub_1C5B41488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  PowerBudget::~PowerBudget((PowerBudget *)&a24);
  operator delete(v25);
  uint64_t v27 = (std::__shared_weak_count *)v24[2];
  if (v27)
  {
    if (!atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  operator delete(v24);
  _Unwind_Resume(a1);
}

void *___ZNK3ctu20SharedSynchronizableI10CPMSModuleE20execute_wrapped_syncIU13block_pointerFP12NSDictionaryvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

uint64_t ___ZN8dispatch9sync_implIRU13block_pointerFP12NSDictionaryvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(void **)(a1 + 32) = result;
  return result;
}

uint64_t ___ZN8dispatch19async_and_wait_implIRU13block_pointerFP12NSDictionaryvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(void **)(a1 + 32) = result;
  return result;
}

void *std::__function::__func<CPMSModule::evaluateBrickMode_sync(PowerBudget)::$_0,std::allocator<CPMSModule::evaluateBrickMode_sync(PowerBudget)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F210E6D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CPMSModule::evaluateBrickMode_sync(PowerBudget)::$_0,std::allocator<CPMSModule::evaluateBrickMode_sync(PowerBudget)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F210E6D8;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<CPMSModule::evaluateBrickMode_sync(PowerBudget)::$_0,std::allocator<CPMSModule::evaluateBrickMode_sync(PowerBudget)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a3 + 4)) {
    return 1;
  }
  uint64_t v3 = *(BOOL **)(a1 + 8);
  BOOL result = *(_DWORD *)a3 != 0;
  BOOL *v3 = *(_DWORD *)a3 == 0;
  return result;
}

uint64_t std::__function::__func<CPMSModule::evaluateBrickMode_sync(PowerBudget)::$_0,std::allocator<CPMSModule::evaluateBrickMode_sync(PowerBudget)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN10CPMSModule22evaluateBrickMode_syncE11PowerBudgetE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN10CPMSModule22evaluateBrickMode_syncE11PowerBudgetE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN10CPMSModule22evaluateBrickMode_syncE11PowerBudgetE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN10CPMSModule22evaluateBrickMode_syncE11PowerBudgetE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<CPMSModule::evaluateBrickMode_sync(PowerBudget)::$_0,std::allocator<CPMSModule::evaluateBrickMode_sync(PowerBudget)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::target_type()
{
}

void *___ZNK3ctu20SharedSynchronizableI10CPMSModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

uint64_t __cxx_global_var_init_78()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

BOOL prop::bbipc::get(char *a1, uint64_t a2)
{
  uint64_t v4 = (const void *)*MEMORY[0x1E4F4C390];
  size_t v5 = strlen((const char *)*MEMORY[0x1E4F4C390]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    int v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  int v7 = __dst;
  if (v5) {
LABEL_8:
  }
    memmove(v7, v4, (size_t)v6);
  *((unsigned char *)v6 + (void)v7) = 0;
  BOOL v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  return v10;
}

void sub_1C5B418A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::compression::get(char *a1, uint64_t a2)
{
  uint64_t v4 = (const void *)*MEMORY[0x1E4F4C398];
  size_t v5 = strlen((const char *)*MEMORY[0x1E4F4C398]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    int v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  int v7 = __dst;
  if (v5) {
LABEL_8:
  }
    memmove(v7, v4, (size_t)v6);
  *((unsigned char *)v6 + (void)v7) = 0;
  BOOL v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  return v10;
}

void sub_1C5B419AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::ttr::get(char *a1, uint64_t a2)
{
  uint64_t v4 = (const void *)*MEMORY[0x1E4F4C300];
  size_t v5 = strlen((const char *)*MEMORY[0x1E4F4C300]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    int v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  int v7 = __dst;
  if (v5) {
LABEL_8:
  }
    memmove(v7, v4, (size_t)v6);
  *((unsigned char *)v6 + (void)v7) = 0;
  BOOL v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  return v10;
}

void sub_1C5B41AB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::logfilter::get(char *a1, uint64_t a2)
{
  uint64_t v4 = (const void *)*MEMORY[0x1E4F4C138];
  size_t v5 = strlen((const char *)*MEMORY[0x1E4F4C138]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    int v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  int v7 = __dst;
  if (v5) {
LABEL_8:
  }
    memmove(v7, v4, (size_t)v6);
  *((unsigned char *)v6 + (void)v7) = 0;
  BOOL v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  return v10;
}

void sub_1C5B41BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::systemlogs::get(char *a1, uint64_t a2)
{
  uint64_t v4 = (const void *)*MEMORY[0x1E4F4C2F8];
  size_t v5 = strlen((const char *)*MEMORY[0x1E4F4C2F8]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    int v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  int v7 = __dst;
  if (v5) {
LABEL_8:
  }
    memmove(v7, v4, (size_t)v6);
  *((unsigned char *)v6 + (void)v7) = 0;
  BOOL v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  return v10;
}

void sub_1C5B41CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::profile::get(char *a1, uint64_t a2)
{
  uint64_t v4 = (const void *)*MEMORY[0x1E4F4C1B8];
  size_t v5 = strlen((const char *)*MEMORY[0x1E4F4C1B8]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    int v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  int v7 = __dst;
  if (v5) {
LABEL_8:
  }
    memmove(v7, v4, (size_t)v6);
  *((unsigned char *)v6 + (void)v7) = 0;
  BOOL v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  return v10;
}

void sub_1C5B41DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::tailspin::get(char *a1, uint64_t a2)
{
  uint64_t v4 = (const void *)*MEMORY[0x1E4F4C210];
  size_t v5 = strlen((const char *)*MEMORY[0x1E4F4C210]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    int v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  int v7 = __dst;
  if (v5) {
LABEL_8:
  }
    memmove(v7, v4, (size_t)v6);
  *((unsigned char *)v6 + (void)v7) = 0;
  BOOL v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  return v10;
}

void sub_1C5B41ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::tracesettings::get(char *a1, uint64_t a2)
{
  uint64_t v4 = (const void *)*MEMORY[0x1E4F4C208];
  size_t v5 = strlen((const char *)*MEMORY[0x1E4F4C208]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    int v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  int v7 = __dst;
  if (v5) {
LABEL_8:
  }
    memmove(v7, v4, (size_t)v6);
  *((unsigned char *)v6 + (void)v7) = 0;
  BOOL v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  return v10;
}

void sub_1C5B41FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::set(char *a1, char *a2, char *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a1[23] < 0)
  {
    uint64_t v6 = *(const char **)a1;
    if (strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4C1F8])
      && strcasecmp(v6, (const char *)*MEMORY[0x1E4F4D2F0])
      && strcasecmp(v6, (const char *)*MEMORY[0x1E4F4F980])
      && strcasecmp(v6, (const char *)*MEMORY[0x1E4F4F978]))
    {
      if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C200]))
      {
        if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4D338]) && strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C288]))
        {
          if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C390]))
          {
            if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C398]))
            {
              if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C300]))
              {
                if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C138]))
                {
                  if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C2F8]))
                  {
                    if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C1B8]))
                    {
                      if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C210]))
                      {
LABEL_16:
                        if (!strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C208]))
                        {
                          return prop::tracesettings::set(a2, (uint64_t)a3);
                        }
                        else
                        {
                          int v7 = GetOsLogContext()[1];
                          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
                          {
                            if (a1[23] >= 0) {
                              uint64_t v9 = a1;
                            }
                            else {
                              uint64_t v9 = *(char **)a1;
                            }
                            if (a2[23] >= 0) {
                              BOOL v10 = a2;
                            }
                            else {
                              BOOL v10 = *(char **)a2;
                            }
                            if (a3[23] >= 0) {
                              int v11 = a3;
                            }
                            else {
                              int v11 = *(char **)a3;
                            }
                            int v12 = 136315906;
                            unint64_t v13 = "prop";
                            __int16 v14 = 2080;
                            uint64_t v15 = v9;
                            __int16 v16 = 2080;
                            uint64_t v17 = v10;
                            __int16 v18 = 2080;
                            id v19 = v11;
                            _os_log_error_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_ERROR, "%s: set: Invalid domain; domain='%s' key='%s' value='%s'",
                              (uint8_t *)&v12,
                              0x2Au);
                          }
                          return 0;
                        }
                      }
                      goto LABEL_33;
                    }
                    goto LABEL_60;
                  }
                  goto LABEL_57;
                }
                goto LABEL_54;
              }
              goto LABEL_51;
            }
            goto LABEL_48;
          }
          goto LABEL_45;
        }
        goto LABEL_39;
      }
      goto LABEL_42;
    }
  }
  else if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C1F8]) {
         && strcasecmp(a1, (const char *)*MEMORY[0x1E4F4D2F0])
  }
         && strcasecmp(a1, (const char *)*MEMORY[0x1E4F4F980])
         && strcasecmp(a1, (const char *)*MEMORY[0x1E4F4F978]))
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C200]))
    {
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4D338]) && strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C288]))
      {
        if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C390]))
        {
          if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C398]))
          {
            if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C300]))
            {
              if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C138]))
              {
                if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C2F8]))
                {
                  if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C1B8]))
                  {
                    uint64_t v6 = a1;
                    if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C210])) {
                      goto LABEL_16;
                    }
LABEL_33:
                    return prop::tailspin::set((uint64_t)a2, a3);
                  }
LABEL_60:
                  return prop::profile::set(a2, a3);
                }
LABEL_57:
                return prop::systemlogs::set(a2, a3);
              }
LABEL_54:
              return prop::logfilter::set(a2, a3);
            }
LABEL_51:
            return prop::ttr::set(a2, a3);
          }
LABEL_48:
          return prop::compression::set(a2, a3);
        }
LABEL_45:
        return prop::bbipc::set(a2, a3);
      }
LABEL_39:
      return prop::ipc::set(a2, a3);
    }
LABEL_42:
    return prop::coredump::set((uint64_t)a2, a3);
  }

  return prop::bbtrace::set(a2, a3);
}

uint64_t prop::bbtrace::set(char *a1, const char *a2)
{
  uint64_t v2 = a2;
  uint64_t v108 = *MEMORY[0x1E4F143B8];
  memset(&v103, 170, sizeof(v103));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v103, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    if (v2[23] < 0) {
      uint64_t v2 = *(const char **)v2;
    }
    if (strcmp(v2, "default")) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string v103 = *(std::string *)a2;
    if (strcmp(a2, "default")) {
      goto LABEL_8;
    }
  }
  if (!defaults::bbtrace::get(a1, (std::string::size_type *)&v103)) {
    goto LABEL_259;
  }
LABEL_8:
  int v4 = a1[23];
  if ((v4 & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C2D8]))
    {
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C380]))
      {
        if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C5B8]))
        {
          if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C198]))
          {
            if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4CCD0]))
            {
              if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C490]))
              {
                if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C428]))
                {
                  size_t v5 = (char *)*MEMORY[0x1E4F4C2E0];
                  uint64_t v6 = a1;
                  if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C2E0])) {
                    goto LABEL_17;
                  }
                  goto LABEL_33;
                }
LABEL_97:
                *(_DWORD *)__dst = -1431655766;
                if (!util::convert<int>(&v103, __dst, 0)) {
                  goto LABEL_259;
                }
                int v47 = *(_DWORD *)__dst;
                std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x1E4F4D2F0]);
                LODWORD(__p.__r_.__value_.__l.__data_) = v47;
                uint64_t v36 = prop::file::set<unsigned int>((const void **)__dst, (uint64_t)a1, (unsigned int *)&__p);
LABEL_109:
                uint64_t v12 = v36;
LABEL_110:
                if ((__dst[23] & 0x80000000) != 0) {
                  operator delete(*(void **)__dst);
                }
                goto LABEL_260;
              }
LABEL_83:
              std::string v37 = (const void *)*MEMORY[0x1E4F4D2F0];
              size_t v38 = strlen((const char *)*MEMORY[0x1E4F4D2F0]);
              if (v38 > 0x7FFFFFFFFFFFFFF7) {
                std::string::__throw_length_error[abi:ne180100]();
              }
              size_t v39 = v38;
              if (v38 >= 0x17)
              {
                uint64_t v48 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v38 | 7) != 0x17) {
                  uint64_t v48 = v38 | 7;
                }
                uint64_t v49 = v48 + 1;
                std::string v40 = operator new(v48 + 1);
                *(void *)&__dst[8] = v39;
                *(void *)&__dst[16] = v49 | 0x8000000000000000;
                *(void *)__dst = v40;
              }
              else
              {
                __dst[23] = v38;
                std::string v40 = __dst;
                if (!v38) {
                  goto LABEL_103;
                }
              }
              memmove(v40, v37, v39);
LABEL_103:
              v40[v39] = 0;
              uint64_t v36 = prop::file::set<std::string>((const void **)__dst, (uint64_t)a1, (uint64_t)&v103);
              goto LABEL_109;
            }
LABEL_69:
            *(_DWORD *)__dst = -1431655766;
            if (!util::convert<int>(&v103, __dst, 0)) {
              goto LABEL_259;
            }
            int v28 = *(_DWORD *)__dst;
            xpc_object_t v29 = (const void *)*MEMORY[0x1E4F4D2F0];
            size_t v30 = strlen((const char *)*MEMORY[0x1E4F4D2F0]);
            if (v30 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            size_t v31 = v30;
            if (v30 >= 0x17)
            {
              uint64_t v50 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v30 | 7) != 0x17) {
                uint64_t v50 = v30 | 7;
              }
              uint64_t v51 = v50 + 1;
              uint64_t v32 = operator new(v50 + 1);
              *(void *)&__dst[8] = v31;
              *(void *)&__dst[16] = v51 | 0x8000000000000000;
              *(void *)__dst = v32;
            }
            else
            {
              __dst[23] = v30;
              uint64_t v32 = __dst;
              if (!v30) {
                goto LABEL_108;
              }
            }
            memmove(v32, v29, v31);
LABEL_108:
            v32[v31] = 0;
            LODWORD(__p.__r_.__value_.__l.__data_) = v28;
            uint64_t v36 = prop::file::set<unsigned int>((const void **)__dst, (uint64_t)a1, (unsigned int *)&__p);
            goto LABEL_109;
          }
LABEL_59:
          LODWORD(__p.__r_.__value_.__l.__data_) = -1431655766;
          uint64_t v22 = (capabilities::radio *)util::convert<int>(&v103, &__p, 0);
          int v23 = (int)v22;
          xpc_object_t v24 = (capabilities::radio *)capabilities::radio::maverick(v22);
          if (v24)
          {
            if (LODWORD(__p.__r_.__value_.__l.__data_) < 5) {
              char v25 = v23;
            }
            else {
              char v25 = 0;
            }
            if ((v25 & 1) == 0) {
              goto LABEL_259;
            }
          }
          else
          {
            int v33 = capabilities::radio::ice(v24);
            if ((v33 & v23) == 1)
            {
              uint64_t v12 = 0;
              if (LODWORD(__p.__r_.__value_.__l.__data_) > 6 || ((1 << __p.__r_.__value_.__s.__data_[0]) & 0x45) == 0) {
                goto LABEL_260;
              }
            }
            else if ((v23 & ~v33) != 1)
            {
              goto LABEL_259;
            }
          }
          uint64_t v41 = (const void *)*MEMORY[0x1E4F4D2F0];
          size_t v42 = strlen((const char *)*MEMORY[0x1E4F4D2F0]);
          if (v42 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          size_t v43 = v42;
          if (v42 >= 0x17)
          {
            uint64_t v45 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v42 | 7) != 0x17) {
              uint64_t v45 = v42 | 7;
            }
            uint64_t v46 = v45 + 1;
            unint64_t v44 = operator new(v45 + 1);
            *(void *)&__dst[8] = v43;
            *(void *)&__dst[16] = v46 | 0x8000000000000000;
            *(void *)__dst = v44;
          }
          else
          {
            __dst[23] = v42;
            unint64_t v44 = __dst;
            if (!v42) {
              goto LABEL_96;
            }
          }
          memmove(v44, v41, v43);
LABEL_96:
          v44[v43] = 0;
          uint64_t v36 = prop::file::set<int>((const void **)__dst, (uint64_t)a1, (int *)&__p);
          goto LABEL_109;
        }
LABEL_50:
        __p.__r_.__value_.__s.__data_[0] = -86;
        if (!util::convert<BOOL>(&v103, (BOOL *)&__p, 0)) {
          goto LABEL_259;
        }
        __int16 v14 = (const void *)*MEMORY[0x1E4F4D2F0];
        size_t v19 = strlen((const char *)*MEMORY[0x1E4F4D2F0]);
        if (v19 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v16 = v19;
        if (v19 >= 0x17)
        {
          uint64_t v34 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v19 | 7) != 0x17) {
            uint64_t v34 = v19 | 7;
          }
          uint64_t v35 = v34 + 1;
          uint64_t v17 = operator new(v34 + 1);
          *(void *)&__dst[8] = v16;
          *(void *)&__dst[16] = v35 | 0x8000000000000000;
          *(void *)__dst = v17;
        }
        else
        {
          __dst[23] = v19;
          uint64_t v17 = __dst;
          if (!v19) {
            goto LABEL_82;
          }
        }
        goto LABEL_81;
      }
LABEL_45:
      __p.__r_.__value_.__s.__data_[0] = -86;
      if (!util::convert<BOOL>(&v103, (BOOL *)&__p, 0)) {
        goto LABEL_259;
      }
      __int16 v14 = (const void *)*MEMORY[0x1E4F4D2F0];
      size_t v18 = strlen((const char *)*MEMORY[0x1E4F4D2F0]);
      if (v18 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v16 = v18;
      if (v18 >= 0x17)
      {
        uint64_t v26 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v18 | 7) != 0x17) {
          uint64_t v26 = v18 | 7;
        }
        uint64_t v27 = v26 + 1;
        uint64_t v17 = operator new(v26 + 1);
        *(void *)&__dst[8] = v16;
        *(void *)&__dst[16] = v27 | 0x8000000000000000;
        *(void *)__dst = v17;
      }
      else
      {
        __dst[23] = v18;
        uint64_t v17 = __dst;
        if (!v18) {
          goto LABEL_82;
        }
      }
      goto LABEL_81;
    }
LABEL_40:
    __p.__r_.__value_.__s.__data_[0] = -86;
    if (!util::convert<BOOL>(&v103, (BOOL *)&__p, 0)) {
      goto LABEL_259;
    }
    __int16 v14 = (const void *)*MEMORY[0x1E4F4D2F0];
    size_t v15 = strlen((const char *)*MEMORY[0x1E4F4D2F0]);
    if (v15 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v16 = v15;
    if (v15 >= 0x17)
    {
      uint64_t v20 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17) {
        uint64_t v20 = v15 | 7;
      }
      uint64_t v21 = v20 + 1;
      uint64_t v17 = operator new(v20 + 1);
      *(void *)&__dst[8] = v16;
      *(void *)&__dst[16] = v21 | 0x8000000000000000;
      *(void *)__dst = v17;
    }
    else
    {
      __dst[23] = v15;
      uint64_t v17 = __dst;
      if (!v15) {
        goto LABEL_82;
      }
    }
LABEL_81:
    memmove(v17, v14, v16);
LABEL_82:
    v17[v16] = 0;
    uint64_t v36 = prop::file::set<BOOL>((const void **)__dst, (uint64_t)a1, (unsigned __int8 *)&__p);
    goto LABEL_109;
  }
  uint64_t v6 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4C2D8])) {
    goto LABEL_40;
  }
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C380])) {
    goto LABEL_45;
  }
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C5B8])) {
    goto LABEL_50;
  }
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C198])) {
    goto LABEL_59;
  }
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E4F4CCD0])) {
    goto LABEL_69;
  }
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C490])) {
    goto LABEL_83;
  }
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C428])) {
    goto LABEL_97;
  }
  size_t v5 = (char *)*MEMORY[0x1E4F4C2E0];
  if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C2E0]))
  {
LABEL_17:
    int v7 = (capabilities::radio *)strcasecmp(v6, (const char *)*MEMORY[0x1E4F47280]);
    if (!v7)
    {
      int v52 = (capabilities::radio *)capabilities::radio::maverick(v7);
      if (v52 & 1) != 0 || (capabilities::radio::ice(v52))
      {
        *(_DWORD *)__dst = -1431655766;
        if ((util::convert<int>(&v103, __dst, 0) & 1) == 0) {
          goto LABEL_259;
        }
        int v53 = *(_DWORD *)__dst;
        if (*(_DWORD *)__dst > 2u) {
          goto LABEL_259;
        }
        std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x1E4F4D2F0]);
        LODWORD(__p.__r_.__value_.__l.__data_) = v53;
        uint64_t v36 = prop::file::set<unsigned int>((const void **)__dst, (uint64_t)a1, (unsigned int *)&__p);
        goto LABEL_109;
      }
      LOBYTE(v4) = a1[23];
    }
    uint64_t v8 = *(const char **)a1;
    if ((v4 & 0x80u) == 0) {
      uint64_t v9 = a1;
    }
    else {
      uint64_t v9 = *(const char **)a1;
    }
    BOOL v10 = (capabilities::radio *)strcasecmp(v9, (const char *)*MEMORY[0x1E4F47270]);
    if (!v10)
    {
      if (capabilities::radio::maverick(v10))
      {
        __p.__r_.__value_.__s.__data_[0] = -86;
        if (util::convert<BOOL>(&v103, (BOOL *)&__p, 0)) {
          goto LABEL_257;
        }
        goto LABEL_259;
      }
      LOBYTE(v4) = a1[23];
      uint64_t v8 = *(const char **)a1;
    }
    if ((v4 & 0x80u) == 0) {
      uint64_t v54 = a1;
    }
    else {
      uint64_t v54 = v8;
    }
    uint64_t v55 = (capabilities::radio *)strcasecmp(v54, (const char *)*MEMORY[0x1E4F47268]);
    if (!v55)
    {
      if (capabilities::radio::maverick(v55))
      {
        __p.__r_.__value_.__s.__data_[0] = -86;
        if (util::convert<BOOL>(&v103, (BOOL *)&__p, 0)) {
          goto LABEL_257;
        }
        goto LABEL_259;
      }
      LOBYTE(v4) = a1[23];
      uint64_t v8 = *(const char **)a1;
    }
    if ((v4 & 0x80u) == 0) {
      int v56 = a1;
    }
    else {
      int v56 = v8;
    }
    xpc_object_t v57 = (capabilities::radio *)strcasecmp(v56, (const char *)*MEMORY[0x1E4F47288]);
    if (!v57)
    {
      if (capabilities::radio::maverick(v57))
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = -1431655766;
        if (!util::convert<unsigned int>(&v103, &__p)) {
          goto LABEL_259;
        }
        std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x1E4F4D2F0]);
        uint64_t v36 = prop::file::set<unsigned int>((const void **)__dst, (uint64_t)a1, (unsigned int *)&__p);
        goto LABEL_109;
      }
      LOBYTE(v4) = a1[23];
      uint64_t v8 = *(const char **)a1;
    }
    if ((v4 & 0x80u) == 0) {
      v58 = a1;
    }
    else {
      v58 = v8;
    }
    unint64_t v59 = (capabilities::radio *)strcasecmp(v58, (const char *)*MEMORY[0x1E4F47290]);
    if (!v59)
    {
      if (capabilities::radio::maverick(v59))
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = -1431655766;
        if (!diag::config::asEnum()) {
          goto LABEL_259;
        }
        std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x1E4F4D2F0]);
        int data = (int)__p.__r_.__value_.__l.__data_;
        uint64_t v36 = prop::file::set<unsigned int>((const void **)__dst, (uint64_t)a1, (unsigned int *)&data);
        goto LABEL_109;
      }
      LOBYTE(v4) = a1[23];
    }
    if ((v4 & 0x80) != 0)
    {
      unsigned int v60 = *(const char **)a1;
      if (strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F47278]))
      {
LABEL_145:
        v61 = (const char *)*MEMORY[0x1E4F4CCC8];
        uint64_t v62 = (capabilities::radio *)strcasecmp(v60, (const char *)*MEMORY[0x1E4F4CCC8]);
        if (!v62)
        {
          if (capabilities::radio::maverick(v62))
          {
LABEL_233:
            std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x1E4F4D2F0]);
            uint64_t v36 = prop::file::set<std::string>((const void **)__dst, (uint64_t)a1, (uint64_t)&v103);
            goto LABEL_109;
          }
          LOBYTE(v4) = a1[23];
        }
        if ((v4 & 0x80) != 0)
        {
          dispatch_object_t v63 = *(const char **)a1;
          if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4CEA8])) {
            goto LABEL_233;
          }
        }
        else
        {
          dispatch_object_t v63 = a1;
          if (!strcasecmp(a1, (const char *)*MEMORY[0x1E4F4CEA8])) {
            goto LABEL_233;
          }
        }
        int v64 = (capabilities::radio *)strcasecmp(v63, (const char *)*MEMORY[0x1E4F47260]);
        if (!v64)
        {
          if (capabilities::radio::maverick(v64)) {
            goto LABEL_233;
          }
          LOBYTE(v4) = a1[23];
        }
        if ((v4 & 0x80u) == 0) {
          unint64_t v65 = a1;
        }
        else {
          unint64_t v65 = *(const char **)a1;
        }
        v66 = (const char *)*MEMORY[0x1E4F4CAA8];
        v67 = (capabilities::radio *)strcasecmp(v65, (const char *)*MEMORY[0x1E4F4CAA8]);
        if (!v67)
        {
          if (capabilities::radio::maverick(v67)) {
            goto LABEL_233;
          }
          LOBYTE(v4) = a1[23];
        }
        if ((v4 & 0x80) != 0)
        {
          unsigned int v68 = *(const char **)a1;
          if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4CD88])) {
            goto LABEL_233;
          }
        }
        else
        {
          unsigned int v68 = a1;
          if (!strcasecmp(a1, (const char *)*MEMORY[0x1E4F4CD88])) {
            goto LABEL_233;
          }
        }
        long long v69 = (capabilities::radio *)strcasecmp(v68, v61);
        if (!v69)
        {
          if (capabilities::radio::ice(v69)) {
            goto LABEL_233;
          }
          LOBYTE(v4) = a1[23];
        }
        if ((v4 & 0x80u) == 0) {
          uint64_t v70 = a1;
        }
        else {
          uint64_t v70 = *(const char **)a1;
        }
        v71 = (capabilities::radio *)strcasecmp(v70, v66);
        if (!v71)
        {
          if (capabilities::radio::ice(v71)) {
            goto LABEL_233;
          }
          LOBYTE(v4) = a1[23];
        }
        if ((v4 & 0x80) != 0)
        {
          v72 = *(const char **)a1;
          if (strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4F9A8]))
          {
LABEL_182:
            unsigned int v73 = (capabilities::radio *)strcasecmp(v72, (const char *)*MEMORY[0x1E4F4F998]);
            if (!v73)
            {
              if (capabilities::radio::ice(v73))
              {
                LODWORD(__p.__r_.__value_.__l.__data_) = -1431655766;
                int v74 = util::convert<int>(&v103, &__p, 0);
                if (LODWORD(__p.__r_.__value_.__l.__data_) < 0x65) {
                  int v75 = v74;
                }
                else {
                  int v75 = 0;
                }
                if (v75 != 1) {
                  goto LABEL_259;
                }
                goto LABEL_202;
              }
              LOBYTE(v4) = a1[23];
            }
            uint64_t v76 = *(const char **)a1;
            if ((v4 & 0x80u) == 0) {
              v77 = a1;
            }
            else {
              v77 = *(const char **)a1;
            }
            int v78 = (capabilities::radio *)strcasecmp(v77, (const char *)*MEMORY[0x1E4F4F990]);
            if (!v78)
            {
              if (capabilities::radio::ice(v78))
              {
                LODWORD(__p.__r_.__value_.__l.__data_) = -1431655766;
                int v79 = util::convert<int>(&v103, &__p, 0);
                if (LODWORD(__p.__r_.__value_.__l.__data_) < 0x65) {
                  int v80 = v79;
                }
                else {
                  int v80 = 0;
                }
                if (v80 != 1) {
                  goto LABEL_259;
                }
                goto LABEL_202;
              }
              LOBYTE(v4) = a1[23];
              uint64_t v76 = *(const char **)a1;
            }
            if ((v4 & 0x80u) == 0) {
              v81 = a1;
            }
            else {
              v81 = v76;
            }
            uint64_t v82 = (capabilities::radio *)strcasecmp(v81, (const char *)*MEMORY[0x1E4F4F988]);
            if (!v82)
            {
              if (capabilities::radio::ice(v82)) {
                goto LABEL_233;
              }
              LOBYTE(v4) = a1[23];
            }
            if ((v4 & 0x80) != 0)
            {
              long long v83 = *(const char **)a1;
              if (strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4D248]))
              {
                if (!strcasecmp(v83, (const char *)*MEMORY[0x1E4F4D200])
                  || !strcasecmp(v83, (const char *)*MEMORY[0x1E4F4D208]))
                {
                  goto LABEL_233;
                }
                if (strcasecmp(v83, (const char *)*MEMORY[0x1E4F4C378]))
                {
                  if (!strcasecmp(v83, (const char *)*MEMORY[0x1E4F4C940])
                    || !strcasecmp(v83, (const char *)*MEMORY[0x1E4F4CAB8]))
                  {
                    goto LABEL_233;
                  }
LABEL_218:
                  if (!strcasecmp(v83, (const char *)*MEMORY[0x1E4F4CEA0]))
                  {
                    __p.__r_.__value_.__s.__data_[0] = -86;
                    if (util::convert<BOOL>(&v103, (BOOL *)&__p, 0))
                    {
LABEL_257:
                      std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x1E4F4D2F0]);
                      uint64_t v36 = prop::file::set<BOOL>((const void **)__dst, (uint64_t)a1, (unsigned __int8 *)&__p);
                      goto LABEL_109;
                    }
LABEL_259:
                    uint64_t v12 = 0;
                    goto LABEL_260;
                  }
                  int v84 = GetOsLogContext()[1];
                  if (!os_log_type_enabled(v84, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_259;
                  }
                  uint64_t v85 = *MEMORY[0x1E4F4D2F0];
                  if (a1[23] >= 0) {
                    __int16 v86 = a1;
                  }
                  else {
                    __int16 v86 = *(char **)a1;
                  }
                  int v87 = &v103;
                  if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    int v87 = (std::string *)v103.__r_.__value_.__r.__words[0];
                  }
                  *(_DWORD *)__dst = 136315906;
                  *(void *)&__dst[4] = "prop";
                  *(_WORD *)&__dst[12] = 2080;
                  *(void *)&__dst[14] = v85;
                  *(_WORD *)&__dst[22] = 2080;
                  v105 = v86;
                  __int16 v106 = 2080;
                  v107 = v87;
                  uint64_t v88 = "%s: [bbtrace] set: Invalid key; domain='%s' key='%s' value='%s'";
                  v89 = v84;
                  uint32_t v90 = 42;
LABEL_226:
                  _os_log_error_impl(&dword_1C59C6000, v89, OS_LOG_TYPE_ERROR, v88, __dst, v90);
                  goto LABEL_259;
                }
LABEL_238:
                int data = -1431655766;
                uint64_t v91 = (capabilities::radio *)util::convert<unsigned int>(&v103, &data);
                if (v91)
                {
                  unsigned int v92 = data;
                  v93 = (capabilities::abs *)capabilities::radio::vendor(v91);
                  shouldUseMinBasebandTransportIOReadSize = (capabilities::radio *)capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v93);
                  if (shouldUseMinBasebandTransportIOReadSize) {
                    unsigned int v95 = 0x4000;
                  }
                  else {
                    unsigned int v95 = 0x8000;
                  }
                  if (v92 >= v95)
                  {
                    if (!v92)
                    {
                      v98 = GetOsLogContext()[1];
                      if (!os_log_type_enabled(v98, OS_LOG_TYPE_ERROR)) {
                        goto LABEL_259;
                      }
                      *(_WORD *)__dst = 0;
                      uint64_t v88 = "file size cannot be 0";
                      v89 = v98;
                      uint32_t v90 = 2;
                      goto LABEL_226;
                    }
                  }
                  else
                  {
                    v96 = (capabilities::abs *)capabilities::radio::vendor(shouldUseMinBasebandTransportIOReadSize);
                    if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v96)) {
                      unsigned int v92 = 0x4000;
                    }
                    else {
                      unsigned int v92 = 0x8000;
                    }
                  }
                  int data = 1 << (__clz(v92) ^ 0x1F);
                  std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x1E4F4D2F0]);
                  uint64_t v91 = (capabilities::radio *)prop::file::set<unsigned int>((const void **)__dst, (uint64_t)a1, (unsigned int *)&data);
                  int v97 = (int)v91;
                  if ((__dst[23] & 0x80000000) != 0) {
                    operator delete(*(void **)__dst);
                  }
                }
                else
                {
                  int v97 = 0;
                }
                int __val = capabilities::trace::defaultHistorySizeMB(v91);
                std::string::basic_string[abi:ne180100]<0>(__dst, v5);
                prop::bbtrace::get<int>(__dst, &__val);
                if ((__dst[23] & 0x80000000) != 0) {
                  operator delete(*(void **)__dst);
                }
                if (v97)
                {
                  std::string::basic_string[abi:ne180100]<0>(__dst, v5);
                  std::to_string(&__p, __val);
                  uint64_t v12 = prop::bbtrace::set(__dst, &__p);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__p.__r_.__value_.__l.__data_);
                  }
                  goto LABEL_110;
                }
                goto LABEL_259;
              }
            }
            else if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4D248]))
            {
              if (!strcasecmp(a1, (const char *)*MEMORY[0x1E4F4D200])
                || !strcasecmp(a1, (const char *)*MEMORY[0x1E4F4D208]))
              {
                goto LABEL_233;
              }
              if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C378]))
              {
                if (!strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C940])) {
                  goto LABEL_233;
                }
                long long v83 = a1;
                if (!strcasecmp(a1, (const char *)*MEMORY[0x1E4F4CAB8])) {
                  goto LABEL_233;
                }
                goto LABEL_218;
              }
              goto LABEL_238;
            }
            __p.__r_.__value_.__s.__data_[0] = 0;
            if (util::convert<BOOL>(&v103, (BOOL *)&__p, 0)) {
              goto LABEL_257;
            }
            goto LABEL_259;
          }
        }
        else
        {
          v72 = a1;
          if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4F9A8])) {
            goto LABEL_182;
          }
        }
        __p.__r_.__value_.__s.__data_[0] = -86;
        if (util::convert<BOOL>(&v103, (BOOL *)&__p, 0)) {
          goto LABEL_257;
        }
        goto LABEL_259;
      }
    }
    else
    {
      unsigned int v60 = a1;
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F47278])) {
        goto LABEL_145;
      }
    }
    __p.__r_.__value_.__s.__data_[0] = -86;
    if (util::convert<BOOL>(&v103, (BOOL *)&__p, 0)) {
      goto LABEL_257;
    }
    goto LABEL_259;
  }
LABEL_33:
  LODWORD(__p.__r_.__value_.__l.__data_) = -1431655766;
  int v11 = (capabilities::trace *)util::convert<int>(&v103, &__p, 0);
  uint64_t v12 = (uint64_t)v11;
  if (SLODWORD(__p.__r_.__value_.__l.__data_) < 0) {
    int v13 = (int)v11;
  }
  else {
    int v13 = 0;
  }
  if (v13 == 1) {
    LODWORD(__p.__r_.__value_.__l.__data_) = capabilities::trace::defaultHistorySizeMB(v11);
  }
  if (v12)
  {
LABEL_202:
    std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x1E4F4D2F0]);
    uint64_t v36 = prop::file::set<int>((const void **)__dst, (uint64_t)a1, (int *)&__p);
    goto LABEL_109;
  }
LABEL_260:
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v103.__r_.__value_.__l.__data_);
  }
  return v12;
}

void sub_1C5B43A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::coredump::set(uint64_t a1, char *a2)
{
  uint64_t v2 = a2;
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  memset(&v18, 170, sizeof(v18));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    if (v2[23] < 0) {
      uint64_t v2 = *(char **)v2;
    }
    if (strcasecmp(v2, "default")) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string v18 = *(std::string *)a2;
    if (strcasecmp(a2, "default")) {
      goto LABEL_8;
    }
  }
  if (!defaults::coredump::get((const char *)a1, (uint64_t)&v18)) {
    goto LABEL_24;
  }
LABEL_8:
  if (*(char *)(a1 + 23) >= 0) {
    int v4 = (const char *)a1;
  }
  else {
    int v4 = *(const char **)a1;
  }
  if (strcasecmp(v4, (const char *)*MEMORY[0x1E4F4C2D8]))
  {
    size_t v5 = GetOsLogContext()[1];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *MEMORY[0x1E4F4C200];
      if (*(char *)(a1 + 23) >= 0) {
        int v7 = (const char *)a1;
      }
      else {
        int v7 = *(const char **)a1;
      }
      uint64_t v8 = &v18;
      if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v8 = (std::string *)v18.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 136315906;
      *(void *)&uint8_t buf[4] = "prop";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v6;
      *(_WORD *)&buf[22] = 2080;
      uint64_t v20 = v7;
      __int16 v21 = 2080;
      uint64_t v22 = v8;
      _os_log_error_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_ERROR, "%s: [coredump] set: Invalid key; domain='%s' key='%s' value='%s'",
        buf,
        0x2Au);
    }
    goto LABEL_24;
  }
  char v17 = -86;
  if (!util::convert<BOOL>(&v18, (BOOL *)&v17, 0))
  {
LABEL_24:
    uint64_t v13 = 0;
    goto LABEL_25;
  }
  uint64_t v9 = (const void *)*MEMORY[0x1E4F4C200];
  size_t v10 = strlen((const char *)*MEMORY[0x1E4F4C200]);
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v11 = v10;
  if (v10 >= 0x17)
  {
    uint64_t v15 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v15 = v10 | 7;
    }
    uint64_t v16 = v15 + 1;
    uint64_t v12 = operator new(v15 + 1);
    *(void *)&uint8_t buf[8] = v11;
    *(void *)&uint8_t buf[16] = v16 | 0x8000000000000000;
    *(void *)long long buf = v12;
    goto LABEL_31;
  }
  buf[23] = v10;
  uint64_t v12 = buf;
  if (v10) {
LABEL_31:
  }
    memmove(v12, v9, v11);
  v12[v11] = 0;
  uint64_t v13 = prop::file::set<BOOL>((const void **)buf, a1, (unsigned __int8 *)&v17);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
LABEL_25:
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  return v13;
}

void sub_1C5B43EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::ipc::set(char *a1, char *a2)
{
  uint64_t v2 = a2;
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  memset(&v28, 170, sizeof(v28));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    if (v2[23] < 0) {
      uint64_t v2 = *(char **)v2;
    }
    if (strcasecmp(v2, "default")) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string v28 = *(std::string *)a2;
    if (strcasecmp(a2, "default")) {
      goto LABEL_8;
    }
  }
  if (!defaults::ipc::get(a1, (uint64_t)&v28)) {
    goto LABEL_35;
  }
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C2D8]))
    {
      int v4 = a1;
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C2E0])) {
        goto LABEL_11;
      }
      goto LABEL_22;
    }
LABEL_30:
    LOBYTE(v27) = -86;
    if (util::convert<BOOL>(&v28, (BOOL *)&v27, 0))
    {
      uint64_t v16 = (const void *)*MEMORY[0x1E4F4D338];
      size_t v17 = strlen((const char *)*MEMORY[0x1E4F4D338]);
      if (v17 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v18 = v17;
      if (v17 >= 0x17)
      {
        uint64_t v22 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v17 | 7) != 0x17) {
          uint64_t v22 = v17 | 7;
        }
        uint64_t v23 = v22 + 1;
        size_t v19 = operator new(v22 + 1);
        *(void *)&uint8_t buf[8] = v18;
        *(void *)&uint8_t buf[16] = v23 | 0x8000000000000000;
        *(void *)long long buf = v19;
      }
      else
      {
        buf[23] = v17;
        size_t v19 = buf;
        if (!v17) {
          goto LABEL_43;
        }
      }
      memmove(v19, v16, v18);
LABEL_43:
      v19[v18] = 0;
      uint64_t v24 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v27);
      goto LABEL_49;
    }
LABEL_35:
    uint64_t v20 = 0;
    goto LABEL_36;
  }
  int v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4C2D8])) {
    goto LABEL_30;
  }
  if (strcasecmp(v4, (const char *)*MEMORY[0x1E4F4C2E0]))
  {
LABEL_11:
    size_t v5 = (capabilities::ipc *)strcasecmp(v4, "BufferCount");
    if (v5 || (capabilities::ipc::supportsPCI(v5) & 1) == 0)
    {
      uint64_t v6 = GetOsLogContext()[1];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        uint64_t v7 = *MEMORY[0x1E4F4D338];
        if (a1[23] >= 0) {
          uint64_t v8 = a1;
        }
        else {
          uint64_t v8 = *(char **)a1;
        }
        uint64_t v9 = &v28;
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v9 = (std::string *)v28.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)long long buf = 136315906;
        *(void *)&uint8_t buf[4] = "prop";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v7;
        *(_WORD *)&buf[22] = 2080;
        size_t v30 = v8;
        __int16 v31 = 2080;
        uint64_t v32 = v9;
        _os_log_error_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_ERROR, "%s: [ipc] set: Invalid key; domain='%s' key='%s' value='%s'",
          buf,
          0x2Au);
      }
    }
    goto LABEL_35;
  }
LABEL_22:
  int v27 = -1431655766;
  int v10 = util::convert<int>(&v28, &v27, 0);
  if (v27 >= 0) {
    int v11 = v10;
  }
  else {
    int v11 = 0;
  }
  if (v11 != 1) {
    goto LABEL_35;
  }
  uint64_t v12 = (const void *)*MEMORY[0x1E4F4D338];
  size_t v13 = strlen((const char *)*MEMORY[0x1E4F4D338]);
  if (v13 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v14 = v13;
  if (v13 >= 0x17)
  {
    uint64_t v25 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v25 = v13 | 7;
    }
    uint64_t v26 = v25 + 1;
    uint64_t v15 = operator new(v25 + 1);
    *(void *)&uint8_t buf[8] = v14;
    *(void *)&uint8_t buf[16] = v26 | 0x8000000000000000;
    *(void *)long long buf = v15;
  }
  else
  {
    buf[23] = v13;
    uint64_t v15 = buf;
    if (!v13) {
      goto LABEL_48;
    }
  }
  memmove(v15, v12, v14);
LABEL_48:
  v15[v14] = 0;
  uint64_t v24 = prop::file::set<int>((const void **)buf, (uint64_t)a1, &v27);
LABEL_49:
  uint64_t v20 = v24;
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
LABEL_36:
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  return v20;
}

void sub_1C5B442C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::bbipc::set(char *a1, char *a2)
{
  uint64_t v2 = a2;
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  memset(&v31, 170, sizeof(v31));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    if (v2[23] < 0) {
      uint64_t v2 = *(char **)v2;
    }
    if (strcasecmp(v2, "default")) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string v31 = *(std::string *)a2;
    if (strcasecmp(a2, "default")) {
      goto LABEL_8;
    }
  }
  if (!defaults::bbipc::get(a1, (uint64_t)&v31)) {
    goto LABEL_36;
  }
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C2D8]))
    {
      int v4 = a1;
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C388])) {
        goto LABEL_11;
      }
LABEL_21:
      int v30 = -1431655766;
      if (!util::convert<int>(&v31, &v30, 0)) {
        goto LABEL_36;
      }
      uint64_t v9 = (const void *)*MEMORY[0x1E4F4C390];
      size_t v10 = strlen((const char *)*MEMORY[0x1E4F4C390]);
      if (v10 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v11 = v10;
      if (v10 >= 0x17)
      {
        uint64_t v25 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v10 | 7) != 0x17) {
          uint64_t v25 = v10 | 7;
        }
        uint64_t v26 = v25 + 1;
        uint64_t v12 = operator new(v25 + 1);
        *(void *)&uint8_t buf[8] = v11;
        *(void *)&uint8_t buf[16] = v26 | 0x8000000000000000;
        *(void *)long long buf = v12;
      }
      else
      {
        buf[23] = v10;
        uint64_t v12 = buf;
        if (!v10) {
          goto LABEL_47;
        }
      }
      memmove(v12, v9, v11);
LABEL_47:
      v12[v11] = 0;
      uint64_t v24 = prop::file::set<int>((const void **)buf, (uint64_t)a1, &v30);
      goto LABEL_53;
    }
LABEL_26:
    LOBYTE(v30) = -86;
    if (!util::convert<BOOL>(&v31, (BOOL *)&v30, 0)) {
      goto LABEL_36;
    }
    size_t v13 = (const void *)*MEMORY[0x1E4F4C390];
    size_t v14 = strlen((const char *)*MEMORY[0x1E4F4C390]);
    if (v14 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v15 = v14;
    if (v14 >= 0x17)
    {
      uint64_t v22 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17) {
        uint64_t v22 = v14 | 7;
      }
      uint64_t v23 = v22 + 1;
      uint64_t v16 = operator new(v22 + 1);
      *(void *)&uint8_t buf[8] = v15;
      *(void *)&uint8_t buf[16] = v23 | 0x8000000000000000;
      *(void *)long long buf = v16;
    }
    else
    {
      buf[23] = v14;
      uint64_t v16 = buf;
      if (!v14) {
        goto LABEL_42;
      }
    }
    memmove(v16, v13, v15);
LABEL_42:
    v16[v15] = 0;
    uint64_t v24 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v30);
    goto LABEL_53;
  }
  int v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4C2D8])) {
    goto LABEL_26;
  }
  if (!strcasecmp(v4, (const char *)*MEMORY[0x1E4F4C388])) {
    goto LABEL_21;
  }
LABEL_11:
  if (!strcasecmp(v4, (const char *)*MEMORY[0x1E4F4C5C0]))
  {
    int v30 = -1431655766;
    if (!util::convert<unsigned int>(&v31, &v30)) {
      goto LABEL_36;
    }
    size_t v17 = (const void *)*MEMORY[0x1E4F4C390];
    size_t v18 = strlen((const char *)*MEMORY[0x1E4F4C390]);
    if (v18 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v19 = v18;
    if (v18 >= 0x17)
    {
      uint64_t v27 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17) {
        uint64_t v27 = v18 | 7;
      }
      uint64_t v28 = v27 + 1;
      uint64_t v20 = operator new(v27 + 1);
      *(void *)&uint8_t buf[8] = v19;
      *(void *)&uint8_t buf[16] = v28 | 0x8000000000000000;
      *(void *)long long buf = v20;
    }
    else
    {
      buf[23] = v18;
      uint64_t v20 = buf;
      if (!v18) {
        goto LABEL_52;
      }
    }
    memmove(v20, v17, v19);
LABEL_52:
    v20[v19] = 0;
    uint64_t v24 = prop::file::set<unsigned int>((const void **)buf, (uint64_t)a1, (unsigned int *)&v30);
LABEL_53:
    uint64_t v21 = v24;
    if ((buf[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)buf);
      if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return v21;
      }
    }
    else if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      return v21;
    }
LABEL_57:
    operator delete(v31.__r_.__value_.__l.__data_);
    return v21;
  }
  size_t v5 = GetOsLogContext()[1];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = *MEMORY[0x1E4F4C390];
    if (a1[23] >= 0) {
      uint64_t v7 = a1;
    }
    else {
      uint64_t v7 = *(char **)a1;
    }
    uint64_t v8 = &v31;
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v8 = (std::string *)v31.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)long long buf = 136315906;
    *(void *)&uint8_t buf[4] = "prop";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v6;
    *(_WORD *)&buf[22] = 2080;
    uint64_t v33 = v7;
    __int16 v34 = 2080;
    uint64_t v35 = v8;
    _os_log_error_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_ERROR, "%s: [bbipc] set: Invalid key; domain='%s' key='%s' value='%s'",
      buf,
      0x2Au);
  }
LABEL_36:
  uint64_t v21 = 0;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_57;
  }
  return v21;
}

void sub_1C5B447BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::compression::set(char *a1, char *a2)
{
  uint64_t v2 = a2;
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  memset(&v27, 170, sizeof(v27));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    if (v2[23] < 0) {
      uint64_t v2 = *(char **)v2;
    }
    if (strcasecmp(v2, "default")) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string v27 = *(std::string *)a2;
    if (strcasecmp(a2, "default")) {
      goto LABEL_8;
    }
  }
  if (!defaults::compression::get(a1, (uint64_t)&v27)) {
    goto LABEL_42;
  }
LABEL_8:
  int v4 = a1[23];
  size_t v5 = *(const char **)a1;
  if (v4 >= 0) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(const char **)a1;
  }
  if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F47258]))
  {
    uint64_t v7 = 0;
    goto LABEL_26;
  }
  int v26 = 0;
  if (util::convert<int>(&v27, &v26, 0))
  {
    uint64_t v8 = (const void *)*MEMORY[0x1E4F4C398];
    size_t v9 = strlen((const char *)*MEMORY[0x1E4F4C398]);
    if (v9 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v10 = v9;
    if (v9 >= 0x17)
    {
      uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17) {
        uint64_t v12 = v9 | 7;
      }
      uint64_t v13 = v12 + 1;
      size_t v11 = operator new(v12 + 1);
      *(void *)&__dst[8] = v10;
      *(void *)&__dst[16] = v13 | 0x8000000000000000;
      *(void *)__dst = v11;
    }
    else
    {
      __dst[23] = v9;
      size_t v11 = __dst;
      if (!v9)
      {
LABEL_23:
        v11[v10] = 0;
        uint64_t v7 = prop::file::set<int>((const void **)__dst, (uint64_t)a1, &v26);
        if ((__dst[23] & 0x80000000) != 0) {
          operator delete(*(void **)__dst);
        }
        goto LABEL_25;
      }
    }
    memmove(v11, v8, v10);
    goto LABEL_23;
  }
  uint64_t v7 = 0;
LABEL_25:
  LOBYTE(v4) = a1[23];
  size_t v5 = *(const char **)a1;
LABEL_26:
  if ((v4 & 0x80u) == 0) {
    size_t v14 = a1;
  }
  else {
    size_t v14 = v5;
  }
  if (strcasecmp(v14, (const char *)*MEMORY[0x1E4F47108]))
  {
    size_t v15 = GetOsLogContext()[1];
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *MEMORY[0x1E4F4C398];
      if (a1[23] >= 0) {
        size_t v17 = a1;
      }
      else {
        size_t v17 = *(char **)a1;
      }
      size_t v18 = &v27;
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        size_t v18 = (std::string *)v27.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)__dst = 136315906;
      *(void *)&__dst[4] = "prop";
      *(_WORD *)&__dst[12] = 2080;
      *(void *)&__dst[14] = v16;
      *(_WORD *)&__dst[22] = 2080;
      xpc_object_t v29 = v17;
      __int16 v30 = 2080;
      std::string v31 = v18;
      _os_log_error_impl(&dword_1C59C6000, v15, OS_LOG_TYPE_ERROR, "%s: [compression] set: Invalid key; domain='%s' key='%s' value='%s'",
        __dst,
        0x2Au);
    }
    goto LABEL_49;
  }
  LOBYTE(v26) = 1;
  if (!util::convert<BOOL>(&v27, (BOOL *)&v26, 0))
  {
LABEL_42:
    uint64_t v7 = 0;
    goto LABEL_49;
  }
  size_t v19 = (const void *)*MEMORY[0x1E4F4C398];
  size_t v20 = strlen((const char *)*MEMORY[0x1E4F4C398]);
  if (v20 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v21 = v20;
  if (v20 >= 0x17)
  {
    uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17) {
      uint64_t v23 = v20 | 7;
    }
    uint64_t v24 = v23 + 1;
    uint64_t v22 = operator new(v23 + 1);
    *(void *)&__dst[8] = v21;
    *(void *)&__dst[16] = v24 | 0x8000000000000000;
    *(void *)__dst = v22;
    goto LABEL_46;
  }
  __dst[23] = v20;
  uint64_t v22 = __dst;
  if (v20) {
LABEL_46:
  }
    memmove(v22, v19, v21);
  v22[v21] = 0;
  uint64_t v7 = prop::file::set<BOOL>((const void **)__dst, (uint64_t)a1, (unsigned __int8 *)&v26);
  if ((__dst[23] & 0x80000000) != 0) {
    operator delete(*(void **)__dst);
  }
LABEL_49:
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  return v7;
}

void sub_1C5B44BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::ttr::set(char *a1, char *a2)
{
  uint64_t v2 = a2;
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  memset(&v25, 170, sizeof(v25));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    if (v2[23] < 0) {
      uint64_t v2 = *(char **)v2;
    }
    if (strcasecmp(v2, "default")) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string v25 = *(std::string *)a2;
    if (strcasecmp(a2, "default")) {
      goto LABEL_8;
    }
  }
  if (!defaults::ttr::get(a1, (uint64_t)&v25)) {
    goto LABEL_35;
  }
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    int v4 = a1;
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C198])) {
      goto LABEL_10;
    }
LABEL_19:
    unsigned int v24 = -1431655766;
    int v9 = util::convert<unsigned int>(&v25, &v24);
    if (v24 < 4) {
      int v10 = v9;
    }
    else {
      int v10 = 0;
    }
    if (v10 == 1)
    {
      size_t v11 = (const void *)*MEMORY[0x1E4F4C300];
      size_t v12 = strlen((const char *)*MEMORY[0x1E4F4C300]);
      if (v12 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v13 = v12;
      if (v12 >= 0x17)
      {
        uint64_t v20 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v20 = v12 | 7;
        }
        uint64_t v21 = v20 + 1;
        size_t v14 = operator new(v20 + 1);
        *(void *)&uint8_t buf[8] = v13;
        *(void *)&uint8_t buf[16] = v21 | 0x8000000000000000;
        *(void *)long long buf = v14;
      }
      else
      {
        buf[23] = v12;
        size_t v14 = buf;
        if (!v12) {
          goto LABEL_47;
        }
      }
      goto LABEL_46;
    }
LABEL_35:
    uint64_t v18 = 0;
    goto LABEL_36;
  }
  int v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4C198])) {
    goto LABEL_19;
  }
LABEL_10:
  if (strcasecmp(v4, (const char *)*MEMORY[0x1E4F4CD80]))
  {
    size_t v5 = GetOsLogContext()[1];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *MEMORY[0x1E4F4C300];
      if (a1[23] >= 0) {
        uint64_t v7 = a1;
      }
      else {
        uint64_t v7 = *(char **)a1;
      }
      uint64_t v8 = &v25;
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v8 = (std::string *)v25.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 136315906;
      *(void *)&uint8_t buf[4] = "prop";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v6;
      *(_WORD *)&buf[22] = 2080;
      std::string v27 = v7;
      __int16 v28 = 2080;
      xpc_object_t v29 = v8;
      _os_log_error_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_ERROR, "%s: [ttr] set: Invalid key; domain='%s' key='%s' value='%s'",
        buf,
        0x2Au);
    }
    goto LABEL_35;
  }
  unsigned int v24 = -1431655766;
  int v15 = util::convert<unsigned int>(&v25, &v24);
  if (v24) {
    int v16 = v15;
  }
  else {
    int v16 = 0;
  }
  if (v16 != 1) {
    goto LABEL_35;
  }
  size_t v11 = (const void *)*MEMORY[0x1E4F4C300];
  size_t v17 = strlen((const char *)*MEMORY[0x1E4F4C300]);
  if (v17 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v13 = v17;
  if (v17 >= 0x17)
  {
    uint64_t v22 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v22 = v17 | 7;
    }
    uint64_t v23 = v22 + 1;
    size_t v14 = operator new(v22 + 1);
    *(void *)&uint8_t buf[8] = v13;
    *(void *)&uint8_t buf[16] = v23 | 0x8000000000000000;
    *(void *)long long buf = v14;
    goto LABEL_46;
  }
  buf[23] = v17;
  size_t v14 = buf;
  if (v17) {
LABEL_46:
  }
    memmove(v14, v11, v13);
LABEL_47:
  v14[v13] = 0;
  uint64_t v18 = prop::file::set<unsigned int>((const void **)buf, (uint64_t)a1, &v24);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
LABEL_36:
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  return v18;
}

void sub_1C5B44FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::logfilter::set(char *a1, char *a2)
{
  uint64_t v2 = a2;
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  memset(&v32, 170, sizeof(v32));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    if (v2[23] < 0) {
      uint64_t v2 = *(char **)v2;
    }
    if (strcasecmp(v2, "default")) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string v32 = *(std::string *)a2;
    if (strcasecmp(a2, "default")) {
      goto LABEL_8;
    }
  }
  if (!defaults::logfilter::get(a1, (uint64_t)&v32)) {
    goto LABEL_42;
  }
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C6C8]))
    {
      int v4 = a1;
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C950])) {
        goto LABEL_11;
      }
LABEL_21:
      int v31 = -1431655766;
      int v9 = util::convert<int>(&v32, &v31, 0);
      if (v31 > -2) {
        int v10 = v9;
      }
      else {
        int v10 = 0;
      }
      if (v10 != 1) {
        goto LABEL_42;
      }
      size_t v11 = (const void *)*MEMORY[0x1E4F4C138];
      size_t v12 = strlen((const char *)*MEMORY[0x1E4F4C138]);
      if (v12 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v13 = v12;
      if (v12 >= 0x17)
      {
        uint64_t v26 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v26 = v12 | 7;
        }
        uint64_t v27 = v26 + 1;
        size_t v14 = operator new(v26 + 1);
        *(void *)&uint8_t buf[8] = v13;
        *(void *)&uint8_t buf[16] = v27 | 0x8000000000000000;
        *(void *)long long buf = v14;
      }
      else
      {
        buf[23] = v12;
        size_t v14 = buf;
        if (!v12) {
          goto LABEL_48;
        }
      }
LABEL_47:
      memmove(v14, v11, v13);
LABEL_48:
      v14[v13] = 0;
      uint64_t v25 = prop::file::set<int>((const void **)buf, (uint64_t)a1, &v31);
      goto LABEL_58;
    }
LABEL_29:
    int v31 = -1431655766;
    int v15 = util::convert<int>(&v32, &v31, 0);
    if (v31 > -2) {
      int v16 = v15;
    }
    else {
      int v16 = 0;
    }
    if (v16 != 1) {
      goto LABEL_42;
    }
    size_t v11 = (const void *)*MEMORY[0x1E4F4C138];
    size_t v17 = strlen((const char *)*MEMORY[0x1E4F4C138]);
    if (v17 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v13 = v17;
    if (v17 >= 0x17)
    {
      uint64_t v23 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17) {
        uint64_t v23 = v17 | 7;
      }
      uint64_t v24 = v23 + 1;
      size_t v14 = operator new(v23 + 1);
      *(void *)&uint8_t buf[8] = v13;
      *(void *)&uint8_t buf[16] = v24 | 0x8000000000000000;
      *(void *)long long buf = v14;
    }
    else
    {
      buf[23] = v17;
      size_t v14 = buf;
      if (!v17) {
        goto LABEL_48;
      }
    }
    goto LABEL_47;
  }
  int v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4C6C8])) {
    goto LABEL_29;
  }
  if (!strcasecmp(v4, (const char *)*MEMORY[0x1E4F4C950])) {
    goto LABEL_21;
  }
LABEL_11:
  if (!strcasecmp(v4, (const char *)*MEMORY[0x1E4F4D268]))
  {
    LOBYTE(v31) = 1;
    if (!util::convert<BOOL>(&v32, (BOOL *)&v31, 0)) {
      goto LABEL_42;
    }
    uint64_t v18 = (const void *)*MEMORY[0x1E4F4C138];
    size_t v19 = strlen((const char *)*MEMORY[0x1E4F4C138]);
    if (v19 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v20 = v19;
    if (v19 >= 0x17)
    {
      uint64_t v28 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v19 | 7) != 0x17) {
        uint64_t v28 = v19 | 7;
      }
      uint64_t v29 = v28 + 1;
      uint64_t v21 = operator new(v28 + 1);
      *(void *)&uint8_t buf[8] = v20;
      *(void *)&uint8_t buf[16] = v29 | 0x8000000000000000;
      *(void *)long long buf = v21;
    }
    else
    {
      buf[23] = v19;
      uint64_t v21 = buf;
      if (!v19) {
        goto LABEL_57;
      }
    }
    memmove(v21, v18, v20);
LABEL_57:
    v21[v20] = 0;
    uint64_t v25 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v31);
LABEL_58:
    uint64_t v22 = v25;
    if ((buf[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)buf);
      if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return v22;
      }
    }
    else if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      return v22;
    }
LABEL_62:
    operator delete(v32.__r_.__value_.__l.__data_);
    return v22;
  }
  size_t v5 = GetOsLogContext()[1];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = *MEMORY[0x1E4F4C138];
    if (a1[23] >= 0) {
      uint64_t v7 = a1;
    }
    else {
      uint64_t v7 = *(char **)a1;
    }
    uint64_t v8 = &v32;
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v8 = (std::string *)v32.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)long long buf = 136315906;
    *(void *)&uint8_t buf[4] = "prop";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v6;
    *(_WORD *)&buf[22] = 2080;
    __int16 v34 = v7;
    __int16 v35 = 2080;
    uint64_t v36 = v8;
    _os_log_error_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_ERROR, "%s: [logfilter] set: Invalid key; domain='%s' key='%s' value='%s'",
      buf,
      0x2Au);
  }
LABEL_42:
  uint64_t v22 = 0;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_62;
  }
  return v22;
}

void sub_1C5B454D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::systemlogs::set(char *a1, char *a2)
{
  uint64_t v2 = a2;
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  memset(&v35, 170, sizeof(v35));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    if (v2[23] < 0) {
      uint64_t v2 = *(char **)v2;
    }
    if (strcasecmp(v2, "default")) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string v35 = *(std::string *)a2;
    if (strcasecmp(a2, "default")) {
      goto LABEL_8;
    }
  }
  if (!defaults::systemlogs::get(a1, (uint64_t)&v35)) {
    goto LABEL_46;
  }
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C198]))
    {
      int v4 = a1;
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C2E0])) {
        goto LABEL_11;
      }
LABEL_21:
      unsigned int v34 = -1431655766;
      int v9 = util::convert<int>(&v35, &v34, 0);
      if ((int)v34 > 0) {
        int v10 = v9;
      }
      else {
        int v10 = 0;
      }
      if (v10 != 1) {
        goto LABEL_46;
      }
      size_t v11 = (const void *)*MEMORY[0x1E4F4C2F8];
      size_t v12 = strlen((const char *)*MEMORY[0x1E4F4C2F8]);
      if (v12 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v13 = v12;
      if (v12 >= 0x17)
      {
        uint64_t v27 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v27 = v12 | 7;
        }
        uint64_t v28 = v27 + 1;
        size_t v14 = operator new(v27 + 1);
        *(void *)&uint8_t buf[8] = v13;
        *(void *)&uint8_t buf[16] = v28 | 0x8000000000000000;
        *(void *)long long buf = v14;
      }
      else
      {
        buf[23] = v12;
        size_t v14 = buf;
        if (!v12) {
          goto LABEL_54;
        }
      }
      memmove(v14, v11, v13);
LABEL_54:
      v14[v13] = 0;
      uint64_t v29 = prop::file::set<int>((const void **)buf, (uint64_t)a1, (int *)&v34);
      goto LABEL_65;
    }
LABEL_29:
    unsigned int v34 = -1431655766;
    if (TelephonyUtilIsInternalBuild()) {
      int IsCarrierBuild = 1;
    }
    else {
      int IsCarrierBuild = TelephonyUtilIsCarrierBuild();
    }
    if (!util::convert<unsigned int>(&v35, &v34)) {
      goto LABEL_46;
    }
    unsigned int v16 = IsCarrierBuild ? 3 : 2;
    if (v34 >= v16) {
      goto LABEL_46;
    }
    size_t v17 = (const void *)*MEMORY[0x1E4F4C2F8];
    size_t v18 = strlen((const char *)*MEMORY[0x1E4F4C2F8]);
    if (v18 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v19 = v18;
    if (v18 >= 0x17)
    {
      uint64_t v30 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17) {
        uint64_t v30 = v18 | 7;
      }
      uint64_t v31 = v30 + 1;
      size_t v20 = operator new(v30 + 1);
      *(void *)&uint8_t buf[8] = v19;
      *(void *)&uint8_t buf[16] = v31 | 0x8000000000000000;
      *(void *)long long buf = v20;
    }
    else
    {
      buf[23] = v18;
      size_t v20 = buf;
      if (!v18) {
        goto LABEL_59;
      }
    }
    memmove(v20, v17, v19);
LABEL_59:
    v20[v19] = 0;
    uint64_t v29 = prop::file::set<unsigned int>((const void **)buf, (uint64_t)a1, &v34);
    goto LABEL_65;
  }
  int v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4C198])) {
    goto LABEL_29;
  }
  if (!strcasecmp(v4, (const char *)*MEMORY[0x1E4F4C2E0])) {
    goto LABEL_21;
  }
LABEL_11:
  if (strcasecmp(v4, (const char *)*MEMORY[0x1E4F4CBA8]))
  {
    size_t v5 = GetOsLogContext()[1];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *MEMORY[0x1E4F4C2F8];
      if (a1[23] >= 0) {
        uint64_t v7 = a1;
      }
      else {
        uint64_t v7 = *(char **)a1;
      }
      uint64_t v8 = &v35;
      if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v8 = (std::string *)v35.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 136315906;
      *(void *)&uint8_t buf[4] = "prop";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v6;
      *(_WORD *)&buf[22] = 2080;
      uint64_t v37 = v7;
      __int16 v38 = 2080;
      size_t v39 = v8;
      _os_log_error_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_ERROR, "%s: [systemlogs] set: Invalid key; domain='%s' key='%s' value='%s'",
        buf,
        0x2Au);
    }
    goto LABEL_46;
  }
  LOBYTE(v34) = -86;
  if (!util::convert<BOOL>(&v35, (BOOL *)&v34, 0))
  {
LABEL_46:
    uint64_t v25 = 0;
    goto LABEL_47;
  }
  uint64_t v21 = (const void *)*MEMORY[0x1E4F4C2F8];
  size_t v22 = strlen((const char *)*MEMORY[0x1E4F4C2F8]);
  if (v22 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v23 = v22;
  if (v22 >= 0x17)
  {
    uint64_t v32 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17) {
      uint64_t v32 = v22 | 7;
    }
    uint64_t v33 = v32 + 1;
    uint64_t v24 = operator new(v32 + 1);
    *(void *)&uint8_t buf[8] = v23;
    *(void *)&uint8_t buf[16] = v33 | 0x8000000000000000;
    *(void *)long long buf = v24;
  }
  else
  {
    buf[23] = v22;
    uint64_t v24 = buf;
    if (!v22) {
      goto LABEL_64;
    }
  }
  memmove(v24, v21, v23);
LABEL_64:
  v24[v23] = 0;
  uint64_t v29 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v34);
LABEL_65:
  uint64_t v25 = v29;
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
LABEL_47:
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  return v25;
}

void sub_1C5B45A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::profile::set(char *a1, char *a2)
{
  uint64_t v2 = a2;
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  memset(&v25, 170, sizeof(v25));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    if (v2[23] < 0) {
      uint64_t v2 = *(char **)v2;
    }
    if (strcasecmp(v2, "default")) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string v25 = *(std::string *)a2;
    if (strcasecmp(a2, "default")) {
      goto LABEL_8;
    }
  }
  if (!defaults::profile::get(a1, (uint64_t)&v25)) {
    goto LABEL_29;
  }
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    int v4 = a1;
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C0E0])) {
      goto LABEL_10;
    }
LABEL_19:
    LOBYTE(v24) = -86;
    if (!util::convert<BOOL>(&v25, (BOOL *)&v24, 0)) {
      goto LABEL_29;
    }
    int v9 = (const void *)*MEMORY[0x1E4F4C1B8];
    size_t v10 = strlen((const char *)*MEMORY[0x1E4F4C1B8]);
    if (v10 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v11 = v10;
    if (v10 >= 0x17)
    {
      uint64_t v19 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17) {
        uint64_t v19 = v10 | 7;
      }
      uint64_t v20 = v19 + 1;
      size_t v12 = operator new(v19 + 1);
      *(void *)&uint8_t buf[8] = v11;
      *(void *)&uint8_t buf[16] = v20 | 0x8000000000000000;
      *(void *)long long buf = v12;
    }
    else
    {
      buf[23] = v10;
      size_t v12 = buf;
      if (!v10) {
        goto LABEL_37;
      }
    }
    memmove(v12, v9, v11);
LABEL_37:
    v12[v11] = 0;
    uint64_t v21 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v24);
    goto LABEL_43;
  }
  int v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4C0E0])) {
    goto LABEL_19;
  }
LABEL_10:
  if (strcasecmp(v4, (const char *)*MEMORY[0x1E4F4D220]))
  {
    size_t v5 = GetOsLogContext()[1];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *MEMORY[0x1E4F4C1B8];
      if (a1[23] >= 0) {
        uint64_t v7 = a1;
      }
      else {
        uint64_t v7 = *(char **)a1;
      }
      uint64_t v8 = &v25;
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v8 = (std::string *)v25.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 136315906;
      *(void *)&uint8_t buf[4] = "prop";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v6;
      *(_WORD *)&buf[22] = 2080;
      uint64_t v27 = v7;
      __int16 v28 = 2080;
      uint64_t v29 = v8;
      _os_log_error_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_ERROR, "%s: [profile] set: Invalid key; domain='%s' key='%s' value='%s'",
        buf,
        0x2Au);
    }
    goto LABEL_29;
  }
  int v24 = -1431655766;
  if (!util::convert<int>(&v25, &v24, 0))
  {
LABEL_29:
    uint64_t v17 = 0;
    goto LABEL_30;
  }
  size_t v13 = (const void *)*MEMORY[0x1E4F4C1B8];
  size_t v14 = strlen((const char *)*MEMORY[0x1E4F4C1B8]);
  if (v14 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v15 = v14;
  if (v14 >= 0x17)
  {
    uint64_t v22 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v22 = v14 | 7;
    }
    uint64_t v23 = v22 + 1;
    unsigned int v16 = operator new(v22 + 1);
    *(void *)&uint8_t buf[8] = v15;
    *(void *)&uint8_t buf[16] = v23 | 0x8000000000000000;
    *(void *)long long buf = v16;
  }
  else
  {
    buf[23] = v14;
    unsigned int v16 = buf;
    if (!v14) {
      goto LABEL_42;
    }
  }
  memmove(v16, v13, v15);
LABEL_42:
  v16[v15] = 0;
  uint64_t v21 = prop::file::set<std::string>((const void **)buf, (uint64_t)a1, (uint64_t)&v25);
LABEL_43:
  uint64_t v17 = v21;
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
LABEL_30:
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  return v17;
}

void sub_1C5B45DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::tailspin::set(uint64_t a1, char *a2)
{
  uint64_t v2 = a2;
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  memset(&v18, 170, sizeof(v18));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    if (v2[23] < 0) {
      uint64_t v2 = *(char **)v2;
    }
    if (strcasecmp(v2, "default")) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string v18 = *(std::string *)a2;
    if (strcasecmp(a2, "default")) {
      goto LABEL_8;
    }
  }
  if (!defaults::tailspin::get((const char *)a1, (uint64_t)&v18)) {
    goto LABEL_24;
  }
LABEL_8:
  if (*(char *)(a1 + 23) >= 0) {
    int v4 = (const char *)a1;
  }
  else {
    int v4 = *(const char **)a1;
  }
  if (strcasecmp(v4, (const char *)*MEMORY[0x1E4F4C0E0]))
  {
    size_t v5 = GetOsLogContext()[1];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *MEMORY[0x1E4F4C210];
      if (*(char *)(a1 + 23) >= 0) {
        uint64_t v7 = (const char *)a1;
      }
      else {
        uint64_t v7 = *(const char **)a1;
      }
      uint64_t v8 = &v18;
      if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v8 = (std::string *)v18.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 136315906;
      *(void *)&uint8_t buf[4] = "prop";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v6;
      *(_WORD *)&buf[22] = 2080;
      uint64_t v20 = v7;
      __int16 v21 = 2080;
      uint64_t v22 = v8;
      _os_log_error_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_ERROR, "%s: [tailspin] set: Invalid key; domain='%s' key='%s' value='%s'",
        buf,
        0x2Au);
    }
    goto LABEL_24;
  }
  char v17 = -86;
  if (!util::convert<BOOL>(&v18, (BOOL *)&v17, 0))
  {
LABEL_24:
    uint64_t v13 = 0;
    goto LABEL_25;
  }
  int v9 = (const void *)*MEMORY[0x1E4F4C210];
  size_t v10 = strlen((const char *)*MEMORY[0x1E4F4C210]);
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v11 = v10;
  if (v10 >= 0x17)
  {
    uint64_t v15 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v15 = v10 | 7;
    }
    uint64_t v16 = v15 + 1;
    size_t v12 = operator new(v15 + 1);
    *(void *)&uint8_t buf[8] = v11;
    *(void *)&uint8_t buf[16] = v16 | 0x8000000000000000;
    *(void *)long long buf = v12;
    goto LABEL_31;
  }
  buf[23] = v10;
  size_t v12 = buf;
  if (v10) {
LABEL_31:
  }
    memmove(v12, v9, v11);
  v12[v11] = 0;
  uint64_t v13 = prop::file::set<BOOL>((const void **)buf, a1, (unsigned __int8 *)&v17);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
LABEL_25:
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  return v13;
}

void sub_1C5B460FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::tracesettings::set(char *a1, uint64_t a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  memset(&v30, 170, sizeof(v30));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v30 = *(std::string *)a2;
  }
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4CAA0]))
    {
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4CB98]))
      {
        unint64_t v3 = a1;
        if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C5C8])) {
          goto LABEL_8;
        }
LABEL_19:
        uint64_t v8 = (const void *)*MEMORY[0x1E4F4C208];
        size_t v9 = strlen((const char *)*MEMORY[0x1E4F4C208]);
        if (v9 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v10 = v9;
        if (v9 >= 0x17)
        {
          uint64_t v24 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v9 | 7) != 0x17) {
            uint64_t v24 = v9 | 7;
          }
          uint64_t v25 = v24 + 1;
          size_t v11 = operator new(v24 + 1);
          *(void *)&uint8_t buf[8] = v10;
          *(void *)&uint8_t buf[16] = v25 | 0x8000000000000000;
          *(void *)long long buf = v11;
        }
        else
        {
          buf[23] = v9;
          size_t v11 = buf;
          if (!v9) {
            goto LABEL_36;
          }
        }
LABEL_35:
        memmove(v11, v8, v10);
LABEL_36:
        v11[v10] = 0;
        uint64_t v19 = prop::file::set<std::string>((const void **)buf, (uint64_t)a1, (uint64_t)&v30);
        goto LABEL_57;
      }
LABEL_28:
      uint64_t v8 = (const void *)*MEMORY[0x1E4F4C208];
      size_t v16 = strlen((const char *)*MEMORY[0x1E4F4C208]);
      if (v16 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v10 = v16;
      if (v16 >= 0x17)
      {
        uint64_t v17 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17) {
          uint64_t v17 = v16 | 7;
        }
        uint64_t v18 = v17 + 1;
        size_t v11 = operator new(v17 + 1);
        *(void *)&uint8_t buf[8] = v10;
        *(void *)&uint8_t buf[16] = v18 | 0x8000000000000000;
        *(void *)long long buf = v11;
      }
      else
      {
        buf[23] = v16;
        size_t v11 = buf;
        if (!v16) {
          goto LABEL_36;
        }
      }
      goto LABEL_35;
    }
LABEL_23:
    int v29 = -1431655766;
    if (!util::convert<int>(&v30, &v29, 0)) {
      goto LABEL_46;
    }
    size_t v12 = (const void *)*MEMORY[0x1E4F4C208];
    size_t v13 = strlen((const char *)*MEMORY[0x1E4F4C208]);
    if (v13 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v14 = v13;
    if (v13 >= 0x17)
    {
      uint64_t v20 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17) {
        uint64_t v20 = v13 | 7;
      }
      uint64_t v21 = v20 + 1;
      uint64_t v15 = operator new(v20 + 1);
      *(void *)&uint8_t buf[8] = v14;
      *(void *)&uint8_t buf[16] = v21 | 0x8000000000000000;
      *(void *)long long buf = v15;
    }
    else
    {
      buf[23] = v13;
      uint64_t v15 = buf;
      if (!v13) {
        goto LABEL_56;
      }
    }
LABEL_55:
    memmove(v15, v12, v14);
LABEL_56:
    v15[v14] = 0;
    uint64_t v19 = prop::file::set<int>((const void **)buf, (uint64_t)a1, &v29);
LABEL_57:
    uint64_t v23 = v19;
    if ((buf[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)buf);
      if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return v23;
      }
    }
    else if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      return v23;
    }
LABEL_61:
    operator delete(v30.__r_.__value_.__l.__data_);
    return v23;
  }
  unint64_t v3 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4CAA0])) {
    goto LABEL_23;
  }
  if (!strcasecmp(v3, (const char *)*MEMORY[0x1E4F4CB98])) {
    goto LABEL_28;
  }
  if (!strcasecmp(v3, (const char *)*MEMORY[0x1E4F4C5C8])) {
    goto LABEL_19;
  }
LABEL_8:
  if (!strcasecmp(v3, (const char *)*MEMORY[0x1E4F4C938]))
  {
    int v29 = -1431655766;
    if (!util::convert<int>(&v30, &v29, 0)) {
      goto LABEL_46;
    }
    size_t v12 = (const void *)*MEMORY[0x1E4F4C208];
    size_t v22 = strlen((const char *)*MEMORY[0x1E4F4C208]);
    if (v22 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v14 = v22;
    if (v22 >= 0x17)
    {
      uint64_t v26 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v22 | 7) != 0x17) {
        uint64_t v26 = v22 | 7;
      }
      uint64_t v27 = v26 + 1;
      uint64_t v15 = operator new(v26 + 1);
      *(void *)&uint8_t buf[8] = v14;
      *(void *)&uint8_t buf[16] = v27 | 0x8000000000000000;
      *(void *)long long buf = v15;
    }
    else
    {
      buf[23] = v22;
      uint64_t v15 = buf;
      if (!v22) {
        goto LABEL_56;
      }
    }
    goto LABEL_55;
  }
  int v4 = GetOsLogContext()[1];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = *MEMORY[0x1E4F4C208];
    if (a1[23] >= 0) {
      uint64_t v6 = a1;
    }
    else {
      uint64_t v6 = *(char **)a1;
    }
    uint64_t v7 = &v30;
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v7 = (std::string *)v30.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)long long buf = 136315906;
    *(void *)&uint8_t buf[4] = "prop";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v5;
    *(_WORD *)&buf[22] = 2080;
    uint64_t v32 = v6;
    __int16 v33 = 2080;
    unsigned int v34 = v7;
    _os_log_error_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_ERROR, "%s: [tracesettings] set: Invalid key; domain='%s' key='%s' value='%s'",
      buf,
      0x2Au);
  }
LABEL_46:
  uint64_t v23 = 0;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_61;
  }
  return v23;
}

void sub_1C5B4664C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::file::set<BOOL>(const void **a1, uint64_t a2, unsigned __int8 *a3)
{
  memset(__p, 170, 24);
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = (size_t)a1[1];
  }
  unint64_t v5 = v4 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v4 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 >= 0x17)
  {
    uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v10 = v5 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4) {
      goto LABEL_15;
    }
  }
  if (v3 >= 0) {
    size_t v12 = a1;
  }
  else {
    size_t v12 = *a1;
  }
  memmove(p_dst, v12, v4);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 46;
  int v13 = *(char *)(a2 + 23);
  if (v13 >= 0) {
    size_t v14 = (const std::string::value_type *)a2;
  }
  else {
    size_t v14 = *(const std::string::value_type **)a2;
  }
  if (v13 >= 0) {
    std::string::size_type v15 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v15 = *(void *)(a2 + 8);
  }
  size_t v16 = std::string::append(&__dst, v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  xpc_object_t __p[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v18 = (void **)((char *)__p + HIBYTE(__p[2]));
  }
  else {
    uint64_t v18 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
  }
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v19 = __p;
  }
  else {
    uint64_t v19 = (void **)__p[0];
  }
  for (; v19 != v18; uint64_t v19 = (void **)((char *)v19 + 1))
    *(unsigned char *)uint64_t v19 = __tolower(*(char *)v19);
  std::to_string(&__dst, *a3);
  long long v20 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  std::string::size_type v21 = __dst.__r_.__value_.__r.__words[2];
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!(void)xmmword_1EBBDC7D8)
  {
    uint64_t v23 = operator new(0x18uLL);
    MEMORY[0x1C87942F0](v23, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
    size_t v22 = operator new(0x20uLL);
    void *v22 = &unk_1F210A638;
    v22[1] = 0;
    void v22[2] = 0;
    v22[3] = v23;
    uint64_t v24 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDC7D8 + 1);
    *(void *)&xmmword_1EBBDC7D8 = v23;
    *((void *)&xmmword_1EBBDC7D8 + 1) = v22;
    if (!v24)
    {
      *(void *)&long long v30 = v23;
      *((void *)&v30 + 1) = v22;
      goto LABEL_38;
    }
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  size_t v22 = (void *)*((void *)&xmmword_1EBBDC7D8 + 1);
  LODWORD(v23) = xmmword_1EBBDC7D8;
  long long v30 = xmmword_1EBBDC7D8;
  if (*((void *)&xmmword_1EBBDC7D8 + 1)) {
LABEL_38:
  }
    atomic_fetch_add_explicit(v22 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if ((v21 & 0x8000000000000000) == 0)
  {
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v20;
    v29.__r_.__value_.__r.__words[2] = v21;
LABEL_42:
    std::string __dst = v29;
    goto LABEL_43;
  }
  std::string::__init_copy_ctor_external(&v29, (const std::string::value_type *)v20, *((std::string::size_type *)&v20 + 1));
  if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_42;
  }
  std::string::__init_copy_ctor_external(&__dst, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
LABEL_43:
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v25 = (char *)__p;
  }
  else {
    uint64_t v25 = (char *)__p[0];
  }
  uint64_t v26 = ctu::cf::plist_adapter::set<std::string>((int)v23, (uint64_t)&__dst, v25);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_48;
    }
LABEL_51:
    operator delete(v29.__r_.__value_.__l.__data_);
    uint64_t v27 = (std::__shared_weak_count *)*((void *)&v30 + 1);
    if (!*((void *)&v30 + 1)) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_51;
  }
LABEL_48:
  uint64_t v27 = (std::__shared_weak_count *)*((void *)&v30 + 1);
  if (!*((void *)&v30 + 1))
  {
LABEL_53:
    if ((v21 & 0x8000000000000000) == 0) {
      goto LABEL_54;
    }
LABEL_57:
    operator delete((void *)v20);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      return v26;
    }
LABEL_58:
    operator delete(__p[0]);
    return v26;
  }
LABEL_52:
  if (atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_53;
  }
  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
  std::__shared_weak_count::__release_weak(v27);
  if ((v21 & 0x8000000000000000) != 0) {
    goto LABEL_57;
  }
LABEL_54:
  if (SHIBYTE(__p[2]) < 0) {
    goto LABEL_58;
  }
  return v26;
}

void sub_1C5B46A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (v31 < 0) {
    operator delete(v30);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t prop::file::set<int>(const void **a1, uint64_t a2, int *a3)
{
  memset(__p, 170, 24);
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = (size_t)a1[1];
  }
  unint64_t v5 = v4 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v4 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 >= 0x17)
  {
    uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v10 = v5 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4) {
      goto LABEL_15;
    }
  }
  if (v3 >= 0) {
    size_t v12 = a1;
  }
  else {
    size_t v12 = *a1;
  }
  memmove(p_dst, v12, v4);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 46;
  int v13 = *(char *)(a2 + 23);
  if (v13 >= 0) {
    size_t v14 = (const std::string::value_type *)a2;
  }
  else {
    size_t v14 = *(const std::string::value_type **)a2;
  }
  if (v13 >= 0) {
    std::string::size_type v15 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v15 = *(void *)(a2 + 8);
  }
  size_t v16 = std::string::append(&__dst, v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  xpc_object_t __p[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v18 = (void **)((char *)__p + HIBYTE(__p[2]));
  }
  else {
    uint64_t v18 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
  }
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v19 = __p;
  }
  else {
    uint64_t v19 = (void **)__p[0];
  }
  for (; v19 != v18; uint64_t v19 = (void **)((char *)v19 + 1))
    *(unsigned char *)uint64_t v19 = __tolower(*(char *)v19);
  std::to_string(&__dst, *a3);
  long long v20 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  std::string::size_type v21 = __dst.__r_.__value_.__r.__words[2];
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!(void)xmmword_1EBBDC7D8)
  {
    uint64_t v23 = operator new(0x18uLL);
    MEMORY[0x1C87942F0](v23, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
    size_t v22 = operator new(0x20uLL);
    void *v22 = &unk_1F210A638;
    v22[1] = 0;
    void v22[2] = 0;
    v22[3] = v23;
    uint64_t v24 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDC7D8 + 1);
    *(void *)&xmmword_1EBBDC7D8 = v23;
    *((void *)&xmmword_1EBBDC7D8 + 1) = v22;
    if (!v24)
    {
      *(void *)&long long v30 = v23;
      *((void *)&v30 + 1) = v22;
      goto LABEL_38;
    }
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  size_t v22 = (void *)*((void *)&xmmword_1EBBDC7D8 + 1);
  LODWORD(v23) = xmmword_1EBBDC7D8;
  long long v30 = xmmword_1EBBDC7D8;
  if (*((void *)&xmmword_1EBBDC7D8 + 1)) {
LABEL_38:
  }
    atomic_fetch_add_explicit(v22 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if ((v21 & 0x8000000000000000) == 0)
  {
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v20;
    v29.__r_.__value_.__r.__words[2] = v21;
LABEL_42:
    std::string __dst = v29;
    goto LABEL_43;
  }
  std::string::__init_copy_ctor_external(&v29, (const std::string::value_type *)v20, *((std::string::size_type *)&v20 + 1));
  if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_42;
  }
  std::string::__init_copy_ctor_external(&__dst, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
LABEL_43:
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v25 = (char *)__p;
  }
  else {
    uint64_t v25 = (char *)__p[0];
  }
  uint64_t v26 = ctu::cf::plist_adapter::set<std::string>((int)v23, (uint64_t)&__dst, v25);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_48;
    }
LABEL_51:
    operator delete(v29.__r_.__value_.__l.__data_);
    uint64_t v27 = (std::__shared_weak_count *)*((void *)&v30 + 1);
    if (!*((void *)&v30 + 1)) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_51;
  }
LABEL_48:
  uint64_t v27 = (std::__shared_weak_count *)*((void *)&v30 + 1);
  if (!*((void *)&v30 + 1))
  {
LABEL_53:
    if ((v21 & 0x8000000000000000) == 0) {
      goto LABEL_54;
    }
LABEL_57:
    operator delete((void *)v20);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      return v26;
    }
LABEL_58:
    operator delete(__p[0]);
    return v26;
  }
LABEL_52:
  if (atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_53;
  }
  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
  std::__shared_weak_count::__release_weak(v27);
  if ((v21 & 0x8000000000000000) != 0) {
    goto LABEL_57;
  }
LABEL_54:
  if (SHIBYTE(__p[2]) < 0) {
    goto LABEL_58;
  }
  return v26;
}

void sub_1C5B46EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (v31 < 0) {
    operator delete(v30);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t prop::file::set<unsigned int>(const void **a1, uint64_t a2, unsigned int *a3)
{
  memset(__p, 170, 24);
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = (size_t)a1[1];
  }
  unint64_t v5 = v4 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v4 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 >= 0x17)
  {
    uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v10 = v5 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4) {
      goto LABEL_15;
    }
  }
  if (v3 >= 0) {
    size_t v12 = a1;
  }
  else {
    size_t v12 = *a1;
  }
  memmove(p_dst, v12, v4);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 46;
  int v13 = *(char *)(a2 + 23);
  if (v13 >= 0) {
    size_t v14 = (const std::string::value_type *)a2;
  }
  else {
    size_t v14 = *(const std::string::value_type **)a2;
  }
  if (v13 >= 0) {
    std::string::size_type v15 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v15 = *(void *)(a2 + 8);
  }
  size_t v16 = std::string::append(&__dst, v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  xpc_object_t __p[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v18 = (void **)((char *)__p + HIBYTE(__p[2]));
  }
  else {
    uint64_t v18 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
  }
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v19 = __p;
  }
  else {
    uint64_t v19 = (void **)__p[0];
  }
  for (; v19 != v18; uint64_t v19 = (void **)((char *)v19 + 1))
    *(unsigned char *)uint64_t v19 = __tolower(*(char *)v19);
  std::to_string(&__dst, *a3);
  long long v20 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  std::string::size_type v21 = __dst.__r_.__value_.__r.__words[2];
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!(void)xmmword_1EBBDC7D8)
  {
    uint64_t v23 = operator new(0x18uLL);
    MEMORY[0x1C87942F0](v23, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
    size_t v22 = operator new(0x20uLL);
    void *v22 = &unk_1F210A638;
    v22[1] = 0;
    void v22[2] = 0;
    v22[3] = v23;
    uint64_t v24 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDC7D8 + 1);
    *(void *)&xmmword_1EBBDC7D8 = v23;
    *((void *)&xmmword_1EBBDC7D8 + 1) = v22;
    if (!v24)
    {
      *(void *)&long long v30 = v23;
      *((void *)&v30 + 1) = v22;
      goto LABEL_38;
    }
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  size_t v22 = (void *)*((void *)&xmmword_1EBBDC7D8 + 1);
  LODWORD(v23) = xmmword_1EBBDC7D8;
  long long v30 = xmmword_1EBBDC7D8;
  if (*((void *)&xmmword_1EBBDC7D8 + 1)) {
LABEL_38:
  }
    atomic_fetch_add_explicit(v22 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if ((v21 & 0x8000000000000000) == 0)
  {
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v20;
    v29.__r_.__value_.__r.__words[2] = v21;
LABEL_42:
    std::string __dst = v29;
    goto LABEL_43;
  }
  std::string::__init_copy_ctor_external(&v29, (const std::string::value_type *)v20, *((std::string::size_type *)&v20 + 1));
  if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_42;
  }
  std::string::__init_copy_ctor_external(&__dst, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
LABEL_43:
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v25 = (char *)__p;
  }
  else {
    uint64_t v25 = (char *)__p[0];
  }
  uint64_t v26 = ctu::cf::plist_adapter::set<std::string>((int)v23, (uint64_t)&__dst, v25);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_48;
    }
LABEL_51:
    operator delete(v29.__r_.__value_.__l.__data_);
    uint64_t v27 = (std::__shared_weak_count *)*((void *)&v30 + 1);
    if (!*((void *)&v30 + 1)) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_51;
  }
LABEL_48:
  uint64_t v27 = (std::__shared_weak_count *)*((void *)&v30 + 1);
  if (!*((void *)&v30 + 1))
  {
LABEL_53:
    if ((v21 & 0x8000000000000000) == 0) {
      goto LABEL_54;
    }
LABEL_57:
    operator delete((void *)v20);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      return v26;
    }
LABEL_58:
    operator delete(__p[0]);
    return v26;
  }
LABEL_52:
  if (atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_53;
  }
  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
  std::__shared_weak_count::__release_weak(v27);
  if ((v21 & 0x8000000000000000) != 0) {
    goto LABEL_57;
  }
LABEL_54:
  if (SHIBYTE(__p[2]) < 0) {
    goto LABEL_58;
  }
  return v26;
}

void sub_1C5B47318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (v31 < 0) {
    operator delete(v30);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t prop::file::set<std::string>(const void **a1, uint64_t a2, uint64_t a3)
{
  memset(v29, 170, 24);
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = (size_t)a1[1];
  }
  unint64_t v5 = v4 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v4 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 >= 0x17)
  {
    uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v10 = v5 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4) {
      goto LABEL_15;
    }
  }
  if (v3 >= 0) {
    size_t v12 = a1;
  }
  else {
    size_t v12 = *a1;
  }
  memmove(p_dst, v12, v4);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 46;
  int v13 = *(char *)(a2 + 23);
  if (v13 >= 0) {
    size_t v14 = (const std::string::value_type *)a2;
  }
  else {
    size_t v14 = *(const std::string::value_type **)a2;
  }
  if (v13 >= 0) {
    std::string::size_type v15 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v15 = *(void *)(a2 + 8);
  }
  size_t v16 = std::string::append(&__dst, v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  void v29[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string v29 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29[2]) >= 0) {
    uint64_t v18 = (void **)((char *)v29 + HIBYTE(v29[2]));
  }
  else {
    uint64_t v18 = (void **)((char *)v29[0] + (unint64_t)v29[1]);
  }
  if (SHIBYTE(v29[2]) >= 0) {
    uint64_t v19 = v29;
  }
  else {
    uint64_t v19 = (void **)v29[0];
  }
  for (; v19 != v18; uint64_t v19 = (void **)((char *)v19 + 1))
    *(unsigned char *)uint64_t v19 = __tolower(*(char *)v19);
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!(void)xmmword_1EBBDC7D8)
  {
    std::string::size_type v21 = operator new(0x18uLL);
    MEMORY[0x1C87942F0](v21, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
    long long v20 = operator new(0x20uLL);
    *long long v20 = &unk_1F210A638;
    v20[1] = 0;
    void v20[2] = 0;
    v20[3] = v21;
    size_t v22 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDC7D8 + 1);
    *(void *)&xmmword_1EBBDC7D8 = v21;
    *((void *)&xmmword_1EBBDC7D8 + 1) = v20;
    if (!v22)
    {
      *(void *)&long long v28 = v21;
      *((void *)&v28 + 1) = v20;
      goto LABEL_38;
    }
    if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  long long v20 = (void *)*((void *)&xmmword_1EBBDC7D8 + 1);
  LODWORD(v21) = xmmword_1EBBDC7D8;
  long long v28 = xmmword_1EBBDC7D8;
  if (*((void *)&xmmword_1EBBDC7D8 + 1)) {
LABEL_38:
  }
    atomic_fetch_add_explicit(v20 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string __dst = __p;
  }
  if (SHIBYTE(v29[2]) >= 0) {
    uint64_t v23 = (char *)v29;
  }
  else {
    uint64_t v23 = (char *)v29[0];
  }
  uint64_t v24 = ctu::cf::plist_adapter::set<std::string>((int)v21, (uint64_t)&__dst, v23);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_50:
      uint64_t v25 = (std::__shared_weak_count *)*((void *)&v28 + 1);
      if (!*((void *)&v28 + 1)) {
        goto LABEL_55;
      }
      goto LABEL_54;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_50;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  uint64_t v25 = (std::__shared_weak_count *)*((void *)&v28 + 1);
  if (!*((void *)&v28 + 1)) {
    goto LABEL_55;
  }
LABEL_54:
  if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    if ((SHIBYTE(v29[2]) & 0x80000000) == 0) {
      return v24;
    }
    goto LABEL_56;
  }
LABEL_55:
  if (SHIBYTE(v29[2]) < 0) {
LABEL_56:
  }
    operator delete(v29[0]);
  return v24;
}

void sub_1C5B47768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t util::convert<unsigned int>(const std::string *a1, _DWORD *a2)
{
  if ((SHIBYTE(a1->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    LODWORD(v4) = strcasecmp((const char *)a1, "false");
    if (!v4) {
      goto LABEL_29;
    }
    LODWORD(v4) = strcasecmp((const char *)a1, "off");
    if (!v4) {
      goto LABEL_29;
    }
    LODWORD(v4) = strcasecmp((const char *)a1, "no");
    if (!v4) {
      goto LABEL_29;
    }
    if (strcasecmp((const char *)a1, "true")
      && strcasecmp((const char *)a1, "on")
      && strcasecmp((const char *)a1, "yes")
      && strcasecmp((const char *)a1, "full")
      && strcasecmp((const char *)a1, "streaming"))
    {
      unint64_t v5 = (const char *)a1;
      if (!strcasecmp((const char *)a1, "lite")) {
        goto LABEL_30;
      }
      goto LABEL_21;
    }
LABEL_28:
    LODWORD(v4) = 1;
    goto LABEL_29;
  }
  unint64_t v5 = (const char *)a1->__r_.__value_.__r.__words[0];
  LODWORD(v4) = strcasecmp(a1->__r_.__value_.__l.__data_, "false");
  if (!v4) {
    goto LABEL_29;
  }
  LODWORD(v4) = strcasecmp(v5, "off");
  if (!v4) {
    goto LABEL_29;
  }
  LODWORD(v4) = strcasecmp(v5, "no");
  if (!v4) {
    goto LABEL_29;
  }
  if (!strcasecmp(v5, "true")
    || !strcasecmp(v5, "on")
    || !strcasecmp(v5, "yes")
    || !strcasecmp(v5, "full")
    || !strcasecmp(v5, "streaming"))
  {
    goto LABEL_28;
  }
  if (!strcasecmp(v5, "lite"))
  {
LABEL_30:
    LODWORD(v4) = 2;
    goto LABEL_29;
  }
LABEL_21:
  if (!strcasecmp(v5, "background")) {
    goto LABEL_30;
  }
  size_t __idx = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v4 = std::stol(a1, &__idx, 0);
  std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  if (__idx != size || (v4 & 0x8000000000000000) != 0 || HIDWORD(v4)) {
    return 0;
  }
LABEL_29:
  *a2 = v4;
  return 1;
}

uint64_t sub_1C5B47A4C(void *a1)
{
  return 0;
}

void prop::bbtrace::get<int>(char *a1, _DWORD *a2)
{
  memset(&__p, 0, sizeof(__p));
  if (prop::bbtrace::get(a1, (uint64_t)&__p)) {
    util::convert<int>(&__p, a2, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5B47AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::tracesettings::anyEnabled(prop::tracesettings *this, const char *a2)
{
  if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C1F8], a2)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C2F8], v2)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C200], v3)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4D338], v4)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C288], v5)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C390], v6))
  {
    return 1;
  }
  size_t v9 = (prop::tracesettings *)*MEMORY[0x1E4F4C210];

  return prop::tracesettings::enabled(v9, v7);
}

BOOL prop::tracesettings::isContinuous(prop::tracesettings *this, const char *a2)
{
  if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C1F8], a2)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4D338], v2))
  {
    return 1;
  }
  unint64_t v5 = (prop::tracesettings *)*MEMORY[0x1E4F4C288];

  return prop::tracesettings::enabled(v5, v3);
}

BOOL prop::tracesettings::mobileBasebandServicesEnabled(prop::tracesettings *this, const char *a2)
{
  if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C1F8], a2)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4D338], v2))
  {
    return 1;
  }
  unint64_t v5 = (prop::tracesettings *)*MEMORY[0x1E4F4C288];

  return prop::tracesettings::enabled(v5, v3);
}

uint64_t __cxx_global_var_init_10()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ServerLogging>::~PthreadMutexGuardPolicy, &ctu::Singleton<ServerLogging,ServerLogging,ctu::PthreadMutexGuardPolicy<ServerLogging>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

const char *AccessorySimulatorDelegate::getName(AccessorySimulatorDelegate *this)
{
  return "AccessorySimulator.delegate";
}

uint64_t AccessorySimulatorDelegate::create@<X0>(void *a1@<X0>, NSObject **a2@<X1>, std::__shared_weak_count_vtbl **a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  size_t v16 = 0;
  long long v17 = 0;
  uint64_t v6 = (std::__shared_weak_count_vtbl *)operator new(0x80uLL);
  uint64_t v7 = a1[3];
  if (!v7) {
    goto LABEL_4;
  }
  if ((void *)v7 != a1)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
LABEL_4:
    uint64_t v19 = (void *)v7;
    goto LABEL_6;
  }
  uint64_t v19 = v18;
  (*(void (**)(void *, void *))(*a1 + 24))(a1, v18);
LABEL_6:
  uint64_t v8 = *a2;
  std::string::size_type v15 = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  AccessorySimulatorDelegate::AccessorySimulatorDelegate((uint64_t)v6, v18, &v15);
  uint64_t v11 = (std::__shared_weak_count *)operator new(0x20uLL);
  v11->__shared_owners_ = 0;
  p_shared_owners = &v11->__shared_owners_;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210E800;
  v11->__shared_weak_owners_ = 0;
  v11[1].__vftable = v6;
  on_zero_shared = (std::__shared_weak_count *)v6->__on_zero_shared;
  if (!on_zero_shared)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
    v6->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (on_zero_shared->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
    v6->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
    std::__shared_weak_count::__release_weak(on_zero_shared);
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_13:
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
LABEL_14:
  size_t v16 = v6;
  long long v17 = v11;
  if (v8) {
    dispatch_release(v8);
  }
  if (v19 == v18)
  {
    (*(void (**)(void *))(v18[0] + 32))(v18);
  }
  else if (v19)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*v19 + 40))(v19, v9, v10);
  }
  uint64_t result = (*((uint64_t (**)(std::__shared_weak_count_vtbl *))v6->~__shared_weak_count + 7))(v6);
  *a3 = v6;
  a3[1] = (std::__shared_weak_count_vtbl *)v11;
  return result;
}

void sub_1C5B47F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  operator delete(v12);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t AccessorySimulatorDelegate::AccessorySimulatorDelegate(uint64_t a1, void *a2, NSObject **a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1F210E768;
  unint64_t v5 = (void *)a2[3];
  if (v5)
  {
    if (v5 == a2)
    {
      uint64_t v11 = v10;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v10);
    }
    else
    {
      uint64_t v11 = (void *)(*(uint64_t (**)(void *))(*v5 + 16))(v5);
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v6 = *a3;
  uint64_t v9 = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  uint64_t v7 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  AccessoriesDelegateBase::AccessoriesDelegateBase(a1, (uint64_t)v10, &v9, v7);
  if (v6) {
    dispatch_release(v6);
  }
  if (v11 == v10)
  {
    (*(void (**)(void *))(v10[0] + 32))(v10);
  }
  else if (v11)
  {
    (*(void (**)(void *))(*v11 + 40))(v11);
  }
  *(void *)a1 = &unk_1F210E768;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 1065353216;
  return a1;
}

void sub_1C5B481B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    dispatch_release(v10);
  }
  std::function<void ()(ctu::cf::CFSharedRef<__CFError>,std::vector<abm::AccessoryInfo>)>::~function(&a10);
  _Unwind_Resume(a1);
}

void AccessorySimulatorDelegate::~AccessorySimulatorDelegate(AccessorySimulatorDelegate *this)
{
  *(void *)this = &unk_1F210E768;
  uint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    do
    {
      int v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = (void *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v4) {
    operator delete(v4);
  }

  AccessoriesDelegateBase::~AccessoriesDelegateBase(this);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1F210E768;
  uint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    do
    {
      int v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = (void *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v4) {
    operator delete(v4);
  }

  AccessoriesDelegateBase::~AccessoriesDelegateBase(this);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t vars8;

  *(void *)this = &unk_1F210E768;
  uint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    do
    {
      int v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = (void *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v4) {
    operator delete(v4);
  }
  AccessoriesDelegateBase::~AccessoriesDelegateBase(this);

  operator delete(v5);
}

uint64_t AccessorySimulatorDelegate::handleServerCommand(uint64_t a1, unsigned __int8 *a2, void **a3)
{
  uint64_t v6 = (const void *)*MEMORY[0x1E4F4D1E0];
  size_t v7 = strlen((const char *)*MEMORY[0x1E4F4D1E0]);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
LABEL_71:
  }
    std::string::__throw_length_error[abi:ne180100]();
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (void **)operator new(v10 + 1);
    size_t v50 = v8;
    int64_t v51 = v11 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v51) = v7;
  p_dst = (void **)&__dst;
  if (v7) {
LABEL_8:
  }
    memmove(p_dst, v6, v8);
  BOOL v12 = 0;
  *((unsigned char *)p_dst + v8) = 0;
  uint64_t v13 = a2[23];
  if ((v13 & 0x80u) == 0) {
    uint64_t v14 = a2[23];
  }
  else {
    uint64_t v14 = *((void *)a2 + 1);
  }
  size_t v15 = HIBYTE(v51);
  int v16 = SHIBYTE(v51);
  if (v51 < 0) {
    size_t v15 = v50;
  }
  if (v14 != v15)
  {
LABEL_28:
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_32;
  }
  if (v51 >= 0) {
    long long v17 = (void **)&__dst;
  }
  else {
    long long v17 = __dst;
  }
  if ((v13 & 0x80) != 0)
  {
    BOOL v12 = memcmp(*(const void **)a2, v17, *((void *)a2 + 1)) == 0;
    goto LABEL_28;
  }
  if (a2[23])
  {
    uint64_t v18 = v13 - 1;
    uint64_t v19 = a2;
    do
    {
      int v21 = *v19++;
      int v20 = v21;
      int v23 = *(unsigned __int8 *)v17;
      long long v17 = (void **)((char *)v17 + 1);
      int v22 = v23;
      BOOL v24 = v18-- != 0;
      char v25 = v24;
      BOOL v12 = v20 == v22;
    }
    while (v20 == v22 && (v25 & 1) != 0);
    goto LABEL_28;
  }
  BOOL v12 = 1;
  if ((SHIBYTE(v51) & 0x80000000) == 0)
  {
LABEL_29:
    if (!v12) {
      goto LABEL_37;
    }
    goto LABEL_33;
  }
LABEL_32:
  operator delete(__dst);
  if (!v12) {
    goto LABEL_37;
  }
LABEL_33:
  v47[0] = MEMORY[0x1E4F143A8];
  v47[1] = 1174405120;
  v47[2] = ___ZN26AccessorySimulatorDelegate19handleServerCommandENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3xpc4dictE_block_invoke;
  v47[3] = &__block_descriptor_tmp_38;
  uint64_t v26 = *a3;
  v47[4] = a1;
  xpc_object_t object = v26;
  if (v26) {
    xpc_retain(v26);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v47);
  xpc_release(object);
  xpc_object_t object = 0;
LABEL_37:
  uint64_t v27 = (const void *)*MEMORY[0x1E4F4D1A8];
  size_t v28 = strlen((const char *)*MEMORY[0x1E4F4D1A8]);
  if (v28 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_71;
  }
  size_t v29 = v28;
  if (v28 >= 0x17)
  {
    uint64_t v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17) {
      uint64_t v31 = v28 | 7;
    }
    uint64_t v32 = v31 + 1;
    long long v30 = (void **)operator new(v31 + 1);
    size_t v50 = v29;
    int64_t v51 = v32 | 0x8000000000000000;
    std::string __dst = v30;
    goto LABEL_44;
  }
  HIBYTE(v51) = v28;
  long long v30 = (void **)&__dst;
  if (v28) {
LABEL_44:
  }
    memmove(v30, v27, v29);
  BOOL v33 = 0;
  *((unsigned char *)v30 + v29) = 0;
  uint64_t v34 = a2[23];
  if ((v34 & 0x80u) == 0) {
    uint64_t v35 = a2[23];
  }
  else {
    uint64_t v35 = *((void *)a2 + 1);
  }
  size_t v36 = HIBYTE(v51);
  int v37 = SHIBYTE(v51);
  if (v51 < 0) {
    size_t v36 = v50;
  }
  if (v35 != v36)
  {
LABEL_64:
    if ((v37 & 0x80000000) == 0) {
      goto LABEL_65;
    }
LABEL_69:
    operator delete(__dst);
    if (!v33) {
      return v12;
    }
    goto LABEL_66;
  }
  if (v51 >= 0) {
    __int16 v38 = (void **)&__dst;
  }
  else {
    __int16 v38 = __dst;
  }
  if ((v34 & 0x80) != 0)
  {
    BOOL v33 = memcmp(*(const void **)a2, v38, *((void *)a2 + 1)) == 0;
    goto LABEL_64;
  }
  if (a2[23])
  {
    uint64_t v39 = v34 - 1;
    do
    {
      int v41 = *a2++;
      int v40 = v41;
      int v43 = *(unsigned __int8 *)v38;
      __int16 v38 = (void **)((char *)v38 + 1);
      int v42 = v43;
      BOOL v24 = v39-- != 0;
      char v44 = v24;
      BOOL v33 = v40 == v42;
    }
    while (v40 == v42 && (v44 & 1) != 0);
    goto LABEL_64;
  }
  BOOL v33 = 1;
  if (SHIBYTE(v51) < 0) {
    goto LABEL_69;
  }
LABEL_65:
  if (v33)
  {
LABEL_66:
    v46[0] = MEMORY[0x1E4F143A8];
    v46[1] = 0x40000000;
    v46[2] = ___ZN26AccessorySimulatorDelegate19handleServerCommandENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3xpc4dictE_block_invoke_3;
    v46[3] = &__block_descriptor_tmp_4;
    v46[4] = a1;
    ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v46);
    return 1;
  }
  return v12;
}

void ___ZN26AccessorySimulatorDelegate19handleServerCommandENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3xpc4dictE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(void **)(a1 + 40);
  xpc_object_t object = v1;
  CFTypeRef v73 = 0;
  if (v1) {
    xpc_retain(v1);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  uint64_t v3 = abm::AccessoryInfo::create();
  int v5 = v4;
  xpc_release(object);
  xpc_object_t object = 0;
  unint64_t v6 = (unsigned __int16)v3;
  unint64_t v7 = *(void *)(v2 + 96);
  if ((v3 & 0xFFFF0000) != 0x10000)
  {
    if (v7)
    {
      uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
      v10.i16[0] = vaddlv_u8(v10);
      if (v10.u32[0] > 1uLL)
      {
        unint64_t v11 = (unsigned __int16)v3;
        if (v7 <= (unsigned __int16)v3) {
          unint64_t v11 = (unsigned __int16)v3 % v7;
        }
      }
      else
      {
        unint64_t v11 = (v7 - 1) & (unsigned __int16)v3;
      }
      uint64_t v19 = *(void ***)(*(void *)(v2 + 88) + 8 * v11);
      if (v19)
      {
        int v20 = (unsigned __int16 *)*v19;
        if (*v19)
        {
          if (v10.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v22 = *((void *)v20 + 1);
              if (v22 == (unsigned __int16)v3)
              {
                if (v20[8] == (unsigned __int16)v3) {
                  goto LABEL_121;
                }
              }
              else if ((v22 & (v7 - 1)) != v11)
              {
                goto LABEL_48;
              }
              int v20 = *(unsigned __int16 **)v20;
              if (!v20) {
                goto LABEL_48;
              }
            }
          }
          do
          {
            unint64_t v21 = *((void *)v20 + 1);
            if (v21 == (unsigned __int16)v3)
            {
              if (v20[8] == (unsigned __int16)v3) {
                goto LABEL_121;
              }
            }
            else
            {
              if (v21 >= v7) {
                v21 %= v7;
              }
              if (v21 != v11) {
                break;
              }
            }
            int v20 = *(unsigned __int16 **)v20;
          }
          while (v20);
        }
      }
    }
    else
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAAALL;
    }
LABEL_48:
    int v20 = (unsigned __int16 *)operator new(0x20uLL);
    *(void *)int v20 = 0;
    *((void *)v20 + 1) = (unsigned __int16)v3;
    v20[8] = v3;
    v20[9] = -1;
    *(void *)(v20 + 10) = 0;
    v20[14] = 0;
    float v23 = (float)(unint64_t)(*(void *)(v2 + 112) + 1);
    float v24 = *(float *)(v2 + 120);
    if (v7 && (float)(v24 * (float)v7) >= v23)
    {
      uint64_t v25 = *(void *)(v2 + 88);
      uint64_t v26 = *(void **)(v25 + 8 * v11);
      if (v26)
      {
LABEL_51:
        *(void *)int v20 = *v26;
        goto LABEL_119;
      }
LABEL_113:
      *(void *)int v20 = *(void *)(v2 + 104);
      *(void *)(v2 + 104) = v20;
      *(void *)(v25 + 8 * v11) = v2 + 104;
      if (!*(void *)v20)
      {
LABEL_120:
        ++*(void *)(v2 + 112);
LABEL_121:
        CFTypeRef v18 = 0;
        *(void *)(v20 + 9) = v3;
        *(_DWORD *)(v20 + 13) = v5;
        goto LABEL_122;
      }
      unint64_t v52 = *(void *)(*(void *)v20 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v52 >= v7) {
          v52 %= v7;
        }
      }
      else
      {
        v52 &= v7 - 1;
      }
      uint64_t v26 = (void *)(*(void *)(v2 + 88) + 8 * v52);
LABEL_119:
      *uint64_t v26 = v20;
      goto LABEL_120;
    }
    BOOL v27 = 1;
    if (v7 >= 3) {
      BOOL v27 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v28 = v27 | (2 * v7);
    unint64_t v29 = vcvtps_u32_f32(v23 / v24);
    if (v28 <= v29) {
      size_t prime = v29;
    }
    else {
      size_t prime = v28;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(v2 + 96);
    }
    if (prime > v7)
    {
LABEL_62:
      if (prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v31 = operator new(8 * prime);
      uint64_t v32 = *(void **)(v2 + 88);
      *(void *)(v2 + 88) = v31;
      if (v32) {
        operator delete(v32);
      }
      uint64_t v33 = 0;
      *(void *)(v2 + 96) = prime;
      do
        *(void *)(*(void *)(v2 + 88) + 8 * v33++) = 0;
      while (prime != v33);
      uint64_t v35 = v2 + 104;
      uint64_t v34 = *(void **)(v2 + 104);
      if (!v34) {
        goto LABEL_94;
      }
      size_t v36 = v34[1];
      size_t v37 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        size_t v38 = v36 & v37;
        *(void *)(*(void *)(v2 + 88) + 8 * v38) = v35;
        for (uint64_t i = (void *)*v34; *v34; uint64_t i = (void *)*v34)
        {
          size_t v40 = i[1] & v37;
          if (v40 == v38)
          {
            uint64_t v34 = i;
          }
          else
          {
            uint64_t v41 = *(void *)(v2 + 88);
            if (*(void *)(v41 + 8 * v40))
            {
              void *v34 = *i;
              uint64_t v42 = 8 * v40;
              *uint64_t i = **(void **)(*(void *)(v2 + 88) + v42);
              **(void **)(*(void *)(v2 + 88) + v42) = i;
            }
            else
            {
              *(void *)(v41 + 8 * v40) = v34;
              uint64_t v34 = i;
              size_t v38 = v40;
            }
          }
        }
        goto LABEL_94;
      }
      if (v36 >= prime) {
        v36 %= prime;
      }
      *(void *)(*(void *)(v2 + 88) + 8 * v36) = v35;
      uint64_t v46 = (void *)*v34;
      if (!*v34)
      {
LABEL_94:
        unint64_t v7 = prime;
        if ((prime & (prime - 1)) != 0) {
          goto LABEL_95;
        }
        goto LABEL_112;
      }
      while (1)
      {
        size_t v48 = v46[1];
        if (v48 >= prime) {
          v48 %= prime;
        }
        if (v48 == v36) {
          goto LABEL_88;
        }
        uint64_t v49 = *(void *)(v2 + 88);
        if (*(void *)(v49 + 8 * v48))
        {
          void *v34 = *v46;
          uint64_t v47 = 8 * v48;
          void *v46 = **(void **)(*(void *)(v2 + 88) + v47);
          **(void **)(*(void *)(v2 + 88) + v47) = v46;
          uint64_t v46 = v34;
LABEL_88:
          uint64_t v34 = v46;
          uint64_t v46 = (void *)*v46;
          if (!v46) {
            goto LABEL_94;
          }
        }
        else
        {
          *(void *)(v49 + 8 * v48) = v34;
          uint64_t v34 = v46;
          uint64_t v46 = (void *)*v46;
          size_t v36 = v48;
          if (!v46) {
            goto LABEL_94;
          }
        }
      }
    }
    if (prime < v7)
    {
      unint64_t v43 = vcvtps_u32_f32((float)*(unint64_t *)(v2 + 112) / *(float *)(v2 + 120));
      if (v7 < 3 || (uint8x8_t v44 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v44.i16[0] = vaddlv_u8(v44), v44.u32[0] > 1uLL))
      {
        unint64_t v43 = std::__next_prime(v43);
      }
      else
      {
        uint64_t v45 = 1 << -(char)__clz(v43 - 1);
        if (v43 >= 2) {
          unint64_t v43 = v45;
        }
      }
      if (prime <= v43) {
        size_t prime = v43;
      }
      if (prime < v7)
      {
        if (!prime)
        {
          int64_t v51 = *(void **)(v2 + 88);
          *(void *)(v2 + 88) = 0;
          if (v51) {
            operator delete(v51);
          }
          unint64_t v7 = 0;
          *(void *)(v2 + 96) = 0;
          goto LABEL_112;
        }
        goto LABEL_62;
      }
      unint64_t v7 = *(void *)(v2 + 96);
    }
    if ((v7 & (v7 - 1)) != 0)
    {
LABEL_95:
      if (v7 <= (unsigned __int16)v3)
      {
        unint64_t v11 = (unsigned __int16)v3 % v7;
        uint64_t v25 = *(void *)(v2 + 88);
        uint64_t v26 = *(void **)(v25 + 8 * v11);
        if (v26) {
          goto LABEL_51;
        }
      }
      else
      {
        unint64_t v11 = (unsigned __int16)v3;
        uint64_t v25 = *(void *)(v2 + 88);
        uint64_t v26 = *(void **)(v25 + 8 * (unsigned __int16)v3);
        if (v26) {
          goto LABEL_51;
        }
      }
      goto LABEL_113;
    }
LABEL_112:
    unint64_t v11 = (v7 - 1) & (unsigned __int16)v3;
    uint64_t v25 = *(void *)(v2 + 88);
    uint64_t v26 = *(void **)(v25 + 8 * v11);
    if (v26) {
      goto LABEL_51;
    }
    goto LABEL_113;
  }
  if (!v7) {
    goto LABEL_29;
  }
  uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v9 = (unsigned __int16)v3;
    if (v7 <= (unsigned __int16)v3) {
      unint64_t v9 = (unsigned __int16)v3 % v7;
    }
  }
  else
  {
    unint64_t v9 = (v7 - 1) & (unsigned __int16)v3;
  }
  uint64_t v12 = *(void *)(v2 + 88);
  uint64_t v13 = *(uint64_t ****)(v12 + 8 * v9);
  if (!v13 || (uint64_t v14 = *v13) == 0)
  {
LABEL_29:
    std::string __p = operator new(0x48uLL);
    long long v70 = xmmword_1C5BCB840;
    strcpy((char *)__p, "Invalid AccessoryID, could not find in cached accessory dictionary");
    (*(void (**)(CFTypeRef *__return_ptr, uint64_t, void **, uint64_t))(*(void *)v2 + 48))(&cf, v2, &__p, 5);
    CFTypeRef v18 = cf;
    CFTypeRef v73 = cf;
    CFTypeRef cf = 0;
    if (SHIBYTE(v70) < 0) {
      operator delete(__p);
    }
    goto LABEL_122;
  }
  unint64_t v15 = v7 - 1;
  if (v8.u32[0] < 2uLL)
  {
    while (1)
    {
      int v16 = v14[1];
      if (v16 == (uint64_t *)(unsigned __int16)v3)
      {
        if (*((unsigned __int16 *)v14 + 8) == (unsigned __int16)v3) {
          goto LABEL_100;
        }
      }
      else if (((unint64_t)v16 & v15) != v9)
      {
        goto LABEL_29;
      }
      uint64_t v14 = (uint64_t **)*v14;
      if (!v14) {
        goto LABEL_29;
      }
    }
  }
  while (1)
  {
    unint64_t v17 = (unint64_t)v14[1];
    if (v17 == (unsigned __int16)v3) {
      break;
    }
    if (v17 >= v7) {
      v17 %= v7;
    }
    if (v17 != v9) {
      goto LABEL_29;
    }
LABEL_24:
    uint64_t v14 = (uint64_t **)*v14;
    if (!v14) {
      goto LABEL_29;
    }
  }
  if (*((unsigned __int16 *)v14 + 8) != (unsigned __int16)v3) {
    goto LABEL_24;
  }
LABEL_100:
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v50 = (unsigned __int16)v3;
    if (v7 <= (unsigned __int16)v3) {
      unint64_t v50 = (unsigned __int16)v3 % v7;
    }
  }
  else
  {
    unint64_t v50 = (v7 - 1) & (unsigned __int16)v3;
  }
  uint64_t v55 = *(void ***)(v12 + 8 * v50);
  if (!v55 || (int v56 = *v55) == 0)
  {
LABEL_151:
    CFTypeRef v18 = 0;
    goto LABEL_122;
  }
  if (v8.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v57 = v56[1];
      if (v57 == (unsigned __int16)v3)
      {
        if (*((unsigned __int16 *)v56 + 8) == (unsigned __int16)v3) {
          goto LABEL_152;
        }
      }
      else if ((v57 & v15) != v50)
      {
        goto LABEL_151;
      }
      CFTypeRef v18 = 0;
      int v56 = (void *)*v56;
      if (!v56) {
        goto LABEL_122;
      }
    }
  }
  while (2)
  {
    unint64_t v58 = v56[1];
    if (v58 != (unsigned __int16)v3)
    {
      if (v58 >= v7) {
        v58 %= v7;
      }
      if (v58 != v50) {
        goto LABEL_151;
      }
      goto LABEL_146;
    }
    if (*((unsigned __int16 *)v56 + 8) != (unsigned __int16)v3)
    {
LABEL_146:
      CFTypeRef v18 = 0;
      int v56 = (void *)*v56;
      if (!v56) {
        goto LABEL_122;
      }
      continue;
    }
    break;
  }
LABEL_152:
  if (v8.u32[0] > 1uLL)
  {
    if (v7 <= (unsigned __int16)v3) {
      unint64_t v6 = (unsigned __int16)v3 % v7;
    }
  }
  else
  {
    unint64_t v6 = v15 & (unsigned __int16)v3;
  }
  unint64_t v59 = *(void **)(v12 + 8 * v6);
  do
  {
    unsigned int v60 = v59;
    unint64_t v59 = (void *)*v59;
  }
  while (v59 != v56);
  if (v60 == (void *)(v2 + 104)) {
    goto LABEL_169;
  }
  unint64_t v61 = v60[1];
  if (v8.u32[0] > 1uLL)
  {
    if (v61 >= v7) {
      v61 %= v7;
    }
  }
  else
  {
    v61 &= v15;
  }
  if (v61 != v6)
  {
LABEL_169:
    if (!*v56) {
      goto LABEL_170;
    }
    unint64_t v62 = *(void *)(*v56 + 8);
    if (v8.u32[0] > 1uLL)
    {
      if (v62 >= v7) {
        v62 %= v7;
      }
    }
    else
    {
      v62 &= v15;
    }
    if (v62 != v6) {
LABEL_170:
    }
      *(void *)(v12 + 8 * v6) = 0;
  }
  uint64_t v63 = *v56;
  if (*v56)
  {
    unint64_t v64 = *(void *)(v63 + 8);
    if (v8.u32[0] > 1uLL)
    {
      if (v64 >= v7) {
        v64 %= v7;
      }
    }
    else
    {
      v64 &= v15;
    }
    if (v64 != v6)
    {
      *(void *)(*(void *)(v2 + 88) + 8 * v64) = v60;
      uint64_t v63 = *v56;
    }
  }
  void *v60 = v63;
  void *v56 = 0;
  --*(void *)(v2 + 112);
  operator delete(v56);
  CFTypeRef v18 = 0;
LABEL_122:
  if (*(unsigned char *)(v2 + 80) && *(void *)(v2 + 72))
  {
    CFTypeRef v68 = v18;
    if (v18) {
      CFRetain(v18);
    }
    int v53 = operator new(0xCuLL);
    v66 = v53 + 3;
    v67 = (char *)(v53 + 3);
    *(void *)int v53 = v3;
    v53[2] = v5;
    unint64_t v65 = v53;
    uint64_t v54 = *(void *)(v2 + 72);
    if (!v54) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, CFTypeRef *, void **))(*(void *)v54 + 48))(v54, &v68, &v65);
    if (v65)
    {
      v66 = v65;
      operator delete(v65);
    }
    if (v68) {
      CFRelease(v68);
    }
  }
  if (v18) {
    CFRelease(v18);
  }
}

void sub_1C5B48F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, const void *a18)
{
  operator delete(v18);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a18);
  _Unwind_Resume(a1);
}

void sub_1C5B48FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  int v5 = va_arg(va1, const void *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1C5B48FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, xpc_object_t object,const void *a21)
{
  if (a18 < 0)
  {
    operator delete(__p);
    ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a21);
    _Unwind_Resume(a1);
  }
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a21);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_40c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v3;
  if (v3) {
    return xpc_retain(v3);
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c15_ZTSN3xpc4dictE(uint64_t a1)
{
  *(void *)(a1 + 40) = 0;
}

void ___ZN26AccessorySimulatorDelegate19handleServerCommandENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3xpc4dictE_block_invoke_3(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 80))
  {
    uint64_t v2 = *(uint64_t **)(v1 + 104);
    if (v2)
    {
      uint64_t v3 = *(void *)(v1 + 72);
      if (v3)
      {
        *((_WORD *)v2 + 10) = 1;
LABEL_5:
        uint64_t v9 = *(uint64_t *)((char *)v2 + 18);
        int v10 = *(_DWORD *)((char *)v2 + 26);
        std::string __p = 0;
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        CFTypeRef cf = 0;
        int v4 = operator new(0xCuLL);
        uint64_t v12 = v4 + 3;
        uint64_t v13 = (char *)(v4 + 3);
        *(void *)int v4 = v9;
        v4[2] = v10;
        std::string __p = v4;
        (*(void (**)(uint64_t, CFTypeRef *, void **))(*(void *)v3 + 48))(v3, &cf, &__p);
        if (__p)
        {
          uint64_t v12 = __p;
          operator delete(__p);
        }
        if (cf) {
          CFRelease(cf);
        }
        while (1)
        {
          uint64_t v2 = (uint64_t *)*v2;
          if (!v2) {
            break;
          }
          uint64_t v3 = *(void *)(v1 + 72);
          *((_WORD *)v2 + 10) = 1;
          if (v3) {
            goto LABEL_5;
          }
        }
      }
      else
      {
        do
        {
          *((_WORD *)v2 + 10) = 1;
          uint64_t v2 = (uint64_t *)*v2;
        }
        while (v2);
      }
    }
  }
  if (*(void *)(v1 + 112))
  {
    int v5 = *(void **)(v1 + 104);
    if (v5)
    {
      do
      {
        unint64_t v6 = (void *)*v5;
        operator delete(v5);
        int v5 = v6;
      }
      while (v6);
    }
    *(void *)(v1 + 104) = 0;
    uint64_t v7 = *(void *)(v1 + 96);
    if (v7)
    {
      for (uint64_t i = 0; i != v7; ++i)
        *(void *)(*(void *)(v1 + 88) + 8 * i) = 0;
    }
    *(void *)(v1 + 112) = 0;
  }
}

void sub_1C5B4922C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, const void *a14)
{
  if (__p)
  {
    operator delete(__p);
    ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a14);
    _Unwind_Resume(a1);
  }
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a14);
  _Unwind_Resume(a1);
}

void AccessorySimulatorDelegate::start(AccessorySimulatorDelegate *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___ZN26AccessorySimulatorDelegate5startEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_5_3;
  v1[4] = this;
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

void ___ZN26AccessorySimulatorDelegate5startEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(NSObject **)(v1 + 40);
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      LOWORD(v8) = 0;
      _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Already started", (uint8_t *)&v8, 2u);
    }
  }
  else
  {
    if (v4)
    {
      LOWORD(v8) = 0;
      _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Starting", (uint8_t *)&v8, 2u);
    }
    *(unsigned char *)(v1 + 80) = 1;
    int v5 = *(uint64_t **)(v1 + 104);
    if (v5)
    {
      uint64_t v6 = *(void *)(v1 + 72);
      if (v6)
      {
LABEL_8:
        uint64_t v8 = *(uint64_t *)((char *)v5 + 18);
        int v9 = *(_DWORD *)((char *)v5 + 26);
        std::string __p = 0;
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        CFTypeRef cf = 0;
        uint64_t v7 = operator new(0xCuLL);
        uint64_t v11 = v7 + 3;
        uint64_t v12 = (char *)(v7 + 3);
        *(void *)uint64_t v7 = v8;
        v7[2] = v9;
        std::string __p = v7;
        (*(void (**)(uint64_t, CFTypeRef *, void **))(*(void *)v6 + 48))(v6, &cf, &__p);
        if (__p)
        {
          uint64_t v11 = __p;
          operator delete(__p);
        }
        if (cf) {
          CFRelease(cf);
        }
        while (1)
        {
          int v5 = (uint64_t *)*v5;
          if (!v5) {
            break;
          }
          uint64_t v6 = *(void *)(v1 + 72);
          if (v6) {
            goto LABEL_8;
          }
        }
      }
      else
      {
        do
          int v5 = (uint64_t *)*v5;
        while (v5);
      }
    }
  }
}

void sub_1C5B49450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, const void *a14)
{
  if (__p)
  {
    operator delete(__p);
    ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a14);
    _Unwind_Resume(a1);
  }
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a14);
  _Unwind_Resume(a1);
}

void AccessorySimulatorDelegate::stop(AccessorySimulatorDelegate *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___ZN26AccessorySimulatorDelegate4stopEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_6_3;
  v1[4] = this;
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

void ___ZN26AccessorySimulatorDelegate4stopEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(NSObject **)(v1 + 40);
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Stopping", buf, 2u);
    }
    *(unsigned char *)(v1 + 80) = 0;
  }
  else if (v4)
  {
    *(_WORD *)int v5 = 0;
    _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Already stopped", v5, 2u);
  }
}

void std::__shared_ptr_pointer<AccessorySimulatorDelegate *,std::shared_ptr<AccessorySimulatorDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<AccessorySimulatorDelegate>(AccessorySimulatorDelegate*)::{lambda(AccessorySimulatorDelegate *)#1},std::allocator<AccessorySimulatorDelegate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<AccessorySimulatorDelegate *,std::shared_ptr<AccessorySimulatorDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<AccessorySimulatorDelegate>(AccessorySimulatorDelegate*)::{lambda(AccessorySimulatorDelegate *)#1},std::allocator<AccessorySimulatorDelegate>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<AccessorySimulatorDelegate *,std::shared_ptr<AccessorySimulatorDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<AccessorySimulatorDelegate>(AccessorySimulatorDelegate*)::{lambda(AccessorySimulatorDelegate *)#1},std::allocator<AccessorySimulatorDelegate>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI26AccessorySimulatorDelega"
                     "teEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI26AccessorySimu"
                                "latorDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI26AccessorySimulatorDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI26AccessorySimulatorDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<AccessorySimulatorDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<AccessorySimulatorDelegate>(AccessorySimulatorDelegate*)::{lambda(AccessorySimulatorDelegate*)#1}::operator() const(AccessorySimulatorDelegate*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t *GetOsLogContext(void)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDCD68, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBBDCD68))
  {
    qword_1EBBDCD88 = 0;
    qword_1EBBDCD80 = 0;
    __cxa_atexit(MEMORY[0x1E4FBA188], &qword_1EBBDCD80, &dword_1C59C6000);
    __cxa_guard_release(&qword_1EBBDCD68);
  }
  if (_MergedGlobals_6 != -1) {
    dispatch_once(&_MergedGlobals_6, &__block_literal_global_3);
  }
  return &qword_1EBBDCD80;
}

void ___Z15GetOsLogContextv_block_invoke()
{
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v0, "com.apple.telephony.abm", "global");
  ctu::OsLogContext::operator=();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v0);
}

void *GetGlobalLogger(void *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDCD78, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBBDCD78))
  {
    MEMORY[0x1C8794170](&unk_1EBBDCD90);
    __cxa_atexit(MEMORY[0x1E4FBA190], &unk_1EBBDCD90, &dword_1C59C6000);
    __cxa_guard_release(&qword_1EBBDCD78);
  }
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 1174405120;
  v5[2] = ___Z15GetGlobalLoggerNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v5[3] = &__block_descriptor_tmp_3_3;
  int v2 = (std::__shared_weak_count *)a1[1];
  v5[4] = *a1;
  uint64_t v6 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (qword_1EBBDCD70 == -1)
  {
    unint64_t v3 = v6;
    if (!v6) {
      return &unk_1EBBDCD90;
    }
  }
  else
  {
    dispatch_once(&qword_1EBBDCD70, v5);
    unint64_t v3 = v6;
    if (!v6) {
      return &unk_1EBBDCD90;
    }
  }
  if (atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return &unk_1EBBDCD90;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return &unk_1EBBDCD90;
}

void sub_1C5B49910(_Unwind_Exception *a1)
{
}

void ___Z15GetGlobalLoggerNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDCD68, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBBDCD68))
  {
    qword_1EBBDCD88 = 0;
    qword_1EBBDCD80 = 0;
    __cxa_atexit(MEMORY[0x1E4FBA188], &qword_1EBBDCD80, &dword_1C59C6000);
    __cxa_guard_release(&qword_1EBBDCD68);
  }
  if (_MergedGlobals_6 != -1) {
    dispatch_once(&_MergedGlobals_6, &__block_literal_global_3);
  }
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v5, (const ctu::OsLogContext *)&qword_1EBBDCD80);
  MEMORY[0x1C8794160](v6, v5, a1 + 32);
  ctu::LoggerCommonBase::operator=();
  uint64_t v3 = v7;
  uint64_t v2 = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  BOOL v4 = (std::__shared_weak_count *)qword_1EBBDCDC8;
  qword_1EBBDCDC0 = v3;
  qword_1EBBDCDC8 = v2;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  MEMORY[0x1C8794180](v6);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v5);
}

void sub_1C5B49A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t __copy_helper_block_e8_32c42_ZTSNSt3__110shared_ptrIN3ctu9LogServerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c42_ZTSNSt3__110shared_ptrIN3ctu9LogServerEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void *PPMManager::create@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  BOOL v4 = operator new(0x28uLL);
  xpc_object_t result = std::__shared_ptr_emplace<PPMManager>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<ctu::LogServer> &,std::allocator<PPMManager>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1C5B49B74(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

const char *PPMManager::getName(PPMManager *this)
{
  return "ppm.mgr";
}

void *PPMManager::PPMManager(void *a1, uint64_t *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v15 = *a2;
  int v16 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v5 = operator new(0x68uLL);
  uint64_t v6 = v5;
  v5[1] = 0;
  v5[2] = 0;
  *int v5 = &unk_1F210E8A0;
  uint64_t v7 = v5 + 3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v5[3] = &unk_1F210E960;
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 8;
  strcpy((char *)&__p, "ppm.hdlr");
  ctu::LoggerCommonBase::LoggerCommonBase();
  void v6[4] = &unk_1F2102CB8;
  v6[10] = v4;
  v6[11] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v6[3] = &unk_1F210E8F0;
  v6[12] = 0;
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  id v18 = 0;
  uint64_t v8 = [[MEMORY[0x1E4FBA110] sharedInstanceWithClientRepresentation:@"com.apple.duet.ppm-attr.bsbd" error:&v18]
  int v9 = (NSError *)v18;
  int v10 = (void *)v6[12];
  v6[12] = v8;

  if (v9 || !v6[12])
  {
    uint64_t v11 = v6[8];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      PPMHandler::getErrorMsg(&__p, v9);
      uint64_t v12 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)long long buf = 136315138;
      int v20 = v12;
      _os_log_error_impl(&dword_1C59C6000, v11, OS_LOG_TYPE_ERROR, "Failed to get PPM instance: %s", buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }

  uint64_t v13 = (std::__shared_weak_count *)a1[1];
  *a1 = v7;
  a1[1] = v6;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  return a1;
}

void sub_1C5B49F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

void sub_1C5B49F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (v20)
  {
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v19);
  operator delete(v22);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v18);
  _Unwind_Resume(a1);
}

void sub_1C5B49FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void PPMManager::start(PPMHandler **this)
{
}

void PPMHandler::start(PPMHandler *this)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)*((void *)this + 9);
  id v9 = 0;
  char v3 = [v2 activityStartedWithLevel:&unk_1F2113C08 options:0 error:&v9];
  uint64_t v4 = (NSError *)v9;
  if (v4) {
    char v5 = 0;
  }
  else {
    char v5 = v3;
  }
  if ((v5 & 1) == 0)
  {
    uint64_t v6 = *((void *)this + 5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      PPMHandler::getErrorMsg(&__p, v4);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 136315138;
      uint64_t v11 = p_p;
      _os_log_error_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_ERROR, "Failed to set PPM activity started level: %s", buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_1C5B4A0F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PPMManager::reportTelemetry(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  char v3 = *a2;
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  PPMHandler::reportTelemetry(v2, &object);
  xpc_release(object);
}

void sub_1C5B4A164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void PPMHandler::reportTelemetry(uint64_t a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (MEMORY[0x1C8795EB0](*a2) != MEMORY[0x1E4F14590]) {
    return;
  }
  uint64_t v4 = (void *)*a2;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)xpc_object_t object = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    *(void *)xpc_object_t object = xpc_null_create();
  }
  xpc::bridge((uint64_t *)&cf, (xpc *)object, v5);
  uint64_t v6 = (const void *)cf.__r_.__value_.__r.__words[0];
  if (cf.__r_.__value_.__r.__words[0])
  {
    CFTypeID v7 = CFGetTypeID(cf.__r_.__value_.__l.__data_);
    if (v7 == CFDictionaryGetTypeID())
    {
      unint64_t v15 = (unint64_t)v6;
      CFRetain(v6);
      uint64_t v8 = (const void *)cf.__r_.__value_.__r.__words[0];
      if (!cf.__r_.__value_.__r.__words[0]) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
  uint64_t v6 = 0;
  unint64_t v15 = 0;
  uint64_t v8 = (const void *)cf.__r_.__value_.__r.__words[0];
  if (cf.__r_.__value_.__r.__words[0]) {
LABEL_10:
  }
    CFRelease(v8);
LABEL_11:
  xpc_release(*(xpc_object_t *)object);
  id v9 = *(void **)(a1 + 72);
  id v14 = 0;
  [v9 pushTelemetryToPPM:v6 error:&v14];
  int v10 = (NSError *)v14;
  if (v10)
  {
    uint64_t v11 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      PPMHandler::getErrorMsg(&cf, v10);
      uint64_t v12 = (cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &cf
          : (std::string *)cf.__r_.__value_.__r.__words[0];
      *(_DWORD *)xpc_object_t object = 136315138;
      *(void *)&object[4] = v12;
      _os_log_error_impl(&dword_1C59C6000, v11, OS_LOG_TYPE_ERROR, "Failed to report telemetry to PPM: %s", object, 0xCu);
      if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(cf.__r_.__value_.__l.__data_);
      }
    }
  }
  if (v6) {
    CFRelease(v6);
  }
}

void sub_1C5B4A328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, xpc_object_t object)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void PPMManager::shutdown(PPMHandler **this)
{
}

void PPMHandler::shutdown(PPMHandler *this)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)*((void *)this + 9);
  id v15 = 0;
  char v3 = [v2 activityStoppedWithLevel:0 options:0 error:&v15];
  uint64_t v4 = (NSError *)v15;
  if (v4) {
    char v5 = 0;
  }
  else {
    char v5 = v3;
  }
  if ((v5 & 1) == 0)
  {
    uint64_t v6 = *((void *)this + 5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      PPMHandler::getErrorMsg(&__p, v4);
      uint64_t v11 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)long long buf = 136315138;
      uint64_t v17 = v11;
      _os_log_error_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_ERROR, "Failed to set PPM activity stopped level: %s", buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  CFTypeID v7 = (void *)*((void *)this + 9);
  uint64_t v13 = v4;
  [v7 endInteraction:&v13];
  uint64_t v8 = v13;

  if (v8) {
    char v9 = 0;
  }
  else {
    char v9 = v3;
  }
  if ((v9 & 1) == 0)
  {
    int v10 = *((void *)this + 5);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      PPMHandler::getErrorMsg(&__p, v8);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 136315138;
      uint64_t v17 = p_p;
      _os_log_error_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_ERROR, "Failed to end interaction: %s", buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_1C5B4A564(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<PPMHandler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210E8A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PPMHandler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210E8A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<PPMHandler>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void PPMHandler::~PPMHandler(id *this)
{
  *this = &unk_1F210E960;
  MEMORY[0x1C87940C0](this + 1);
}

{
  uint64_t vars8;

  *this = &unk_1F210E960;
  MEMORY[0x1C87940C0](this + 1);

  operator delete(this);
}

uint64_t ctu::Loggable<PPMHandler,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

void ctu::Loggable<PPMHandler,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 8;
  strcpy(a1, "ppm.hdlr");
}

uint64_t ctu::Loggable<PPMHandler,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<PPMHandler,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F210E960;
  MEMORY[0x1C87940C0](a1 + 1);
  return a1;
}

void ctu::Loggable<PPMHandler,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F210E960;
  MEMORY[0x1C87940C0](a1 + 1);

  operator delete(a1);
}

void PPMHandler::getErrorMsg(std::string *this, NSError *a2)
{
  char v3 = a2;
  this->__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  this->__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
  *((unsigned char *)&this->__r_.__value_.__s + 23) = 13;
  strcpy((char *)this, "Unknown error");
  if (v3)
  {
    int v10 = v3;
    uint64_t v4 = [(NSError *)v3 localizedDescription];
    char v5 = [(NSError *)v10 localizedFailureReason];
    if (v5)
    {
      uint64_t v6 = [(NSError *)v10 localizedFailureReason];
    }
    else
    {
      CFTypeID v7 = [MEMORY[0x1E4F28B50] mainBundle];
      uint64_t v6 = [v7 localizedStringForKey:@"Not found localizedFailureReason" value:&stru_1F2112A48 table:0];
    }
    uint64_t v8 = [NSString stringWithFormat:@"%@: %@", v4, v6];

    id v9 = v8;
    std::string::__assign_external(this, (const std::string::value_type *)[v9 UTF8String]);

    char v3 = v10;
  }
}

void sub_1C5B4A8D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  int v16 = v15;

  if (*(char *)(v12 + 23) < 0) {
    operator delete(*(void **)v12);
  }

  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<PPMManager>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<ctu::LogServer> &,std::allocator<PPMManager>,0>(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F210E9A0;
  char v3 = a1 + 3;
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  v6[0] = *a2;
  v6[1] = (uint64_t)v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  PPMManager::PPMManager(v3, v6);
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C5B4AA18(_Unwind_Exception *a1)
{
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<PPMManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210E9A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PPMManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210E9A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<PPMManager>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t abm::ParseWakeDataIce(xpc_object_t *a1, xpc_object_t *a2)
{
  uint64_t v4 = MEMORY[0x1C8795EB0](*a1);
  uint64_t v5 = MEMORY[0x1E4F14590];
  if (v4 != MEMORY[0x1E4F14590] || MEMORY[0x1C8795EB0](*a2) != v5) {
    return 0;
  }
  xpc_object_t v7 = xpc_string_create((const char *)*MEMORY[0x1E4F4C3A8]);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C408], v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  id v9 = (const char *)*MEMORY[0x1E4F4C910];
  xpc_object_t value = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x1E4F4C910]);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  int v11 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  xpc_object_t v12 = xpc_int64_create(v11);
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, v9, v12);
  xpc_object_t v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  id v14 = (const char *)*MEMORY[0x1E4F4C560];
  xpc_object_t v15 = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x1E4F4C560]);
  if (v15)
  {
    xpc_object_t v16 = v15;
    xpc_retain(v15);
  }
  else
  {
    xpc_object_t v16 = xpc_null_create();
  }
  uint64_t v17 = MEMORY[0x1C8795EB0](v16);
  uint64_t v18 = MEMORY[0x1E4F145D8];
  if (v17 != MEMORY[0x1E4F145D8])
  {
    if (v16)
    {
      xpc_retain(v16);
      xpc_object_t v19 = v16;
    }
    else
    {
      xpc_object_t v19 = xpc_null_create();
    }
    xpc_dictionary_set_value(*a2, v14, v19);
    xpc_object_t v20 = xpc_null_create();
    xpc_release(v19);
    xpc_release(v20);
  }
  switch(v11)
  {
    case 1:
      xpc_object_t v21 = xpc_string_create((const char *)*MEMORY[0x1E4F4C700]);
      if (!v21) {
        xpc_object_t v21 = xpc_null_create();
      }
      xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C568], v21);
      xpc_object_t v22 = xpc_null_create();
      xpc_release(v21);
      xpc_release(v22);
      xpc_object_t v23 = xpc_string_create((const char *)*MEMORY[0x1E4F4CBD0]);
      if (!v23) {
        xpc_object_t v23 = xpc_null_create();
      }
      goto LABEL_58;
    case 2:
      xpc_object_t v32 = xpc_string_create((const char *)*MEMORY[0x1E4F4C700]);
      if (!v32) {
        xpc_object_t v32 = xpc_null_create();
      }
      xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C568], v32);
      xpc_object_t v33 = xpc_null_create();
      xpc_release(v32);
      xpc_release(v33);
      xpc_object_t v23 = xpc_string_create((const char *)*MEMORY[0x1E4F4C998]);
      if (!v23) {
        xpc_object_t v23 = xpc_null_create();
      }
      goto LABEL_58;
    case 3:
      xpc_object_t v24 = xpc_string_create((const char *)*MEMORY[0x1E4F4C9A0]);
      if (!v24) {
        xpc_object_t v24 = xpc_null_create();
      }
      xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C568], v24);
      xpc_object_t v25 = xpc_null_create();
      xpc_release(v24);
      xpc_release(v25);
      xpc_object_t v26 = xpc_string_create((const char *)*MEMORY[0x1E4F4C838]);
      if (!v26) {
        xpc_object_t v26 = xpc_null_create();
      }
      xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C918], v26);
      xpc_object_t v27 = xpc_null_create();
      xpc_release(v26);
      xpc_release(v27);
      if (MEMORY[0x1C8795EB0](v16) != v18)
      {
        xpc_object_t v45 = v16;
        xpc_object_t v46 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
        if (v16) {
          xpc_retain(v16);
        }
        else {
          xpc_object_t v45 = xpc_null_create();
        }
        abm::_ParseIceARI(&v46);
        xpc_release(v45);
        xpc_object_t v45 = 0;
        xpc::dict::dict(&v43, &v46);
        size_t v40 = (void *)*MEMORY[0x1E4F4CC78];
        object[0] = a2;
        object[1] = v40;
        xpc::dict::object_proxy::operator=((uint64_t)object, &v43, &v44);
        xpc_release(v44);
        xpc_object_t v44 = 0;
        xpc_release(v43);
        xpc_object_t v43 = 0;
        xpc_release(v46);
      }
      goto LABEL_63;
    case 4:
      xpc_object_t v34 = *a1;
      xpc_object_t v41 = v34;
      if (v34) {
        xpc_retain(v34);
      }
      else {
        xpc_object_t v41 = xpc_null_create();
      }
      abm::ParseWakeDataIP(&v41, a2);
      xpc_release(v41);
      xpc_object_t v41 = 0;
      goto LABEL_63;
    case 5:
      xpc_object_t v28 = xpc_string_create((const char *)*MEMORY[0x1E4F4C618]);
      if (!v28) {
        xpc_object_t v28 = xpc_null_create();
      }
      xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C568], v28);
      xpc_object_t v29 = xpc_null_create();
      xpc_release(v28);
      xpc_release(v29);
      xpc_object_t v23 = xpc_string_create((const char *)*MEMORY[0x1E4F4C960]);
      if (!v23) {
        xpc_object_t v23 = xpc_null_create();
      }
      goto LABEL_58;
    case 6:
      xpc_object_t v35 = xpc_string_create((const char *)*MEMORY[0x1E4F4C708]);
      if (!v35) {
        xpc_object_t v35 = xpc_null_create();
      }
      xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C568], v35);
      xpc_object_t v36 = xpc_null_create();
      xpc_release(v35);
      xpc_release(v36);
      xpc_object_t v23 = xpc_string_create((const char *)*MEMORY[0x1E4F4C850]);
      if (!v23) {
        xpc_object_t v23 = xpc_null_create();
      }
      goto LABEL_58;
    case 7:
      xpc_object_t v37 = xpc_string_create((const char *)*MEMORY[0x1E4F4C700]);
      if (!v37) {
        xpc_object_t v37 = xpc_null_create();
      }
      xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C568], v37);
      xpc_object_t v38 = xpc_null_create();
      xpc_release(v37);
      xpc_release(v38);
      xpc_object_t v23 = xpc_string_create((const char *)*MEMORY[0x1E4F4C840]);
      if (!v23) {
        xpc_object_t v23 = xpc_null_create();
      }
      goto LABEL_58;
    default:
      xpc_object_t v30 = xpc_string_create((const char *)*MEMORY[0x1E4F4C9A8]);
      if (!v30) {
        xpc_object_t v30 = xpc_null_create();
      }
      xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C568], v30);
      xpc_object_t v31 = xpc_null_create();
      xpc_release(v30);
      xpc_release(v31);
      xpc_object_t v23 = xpc_string_create((const char *)*MEMORY[0x1E4F4CEC0]);
      if (!v23) {
        xpc_object_t v23 = xpc_null_create();
      }
LABEL_58:
      xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C918], v23);
      xpc_object_t v39 = xpc_null_create();
      xpc_release(v23);
      xpc_release(v39);
LABEL_63:
      xpc_release(v16);
      uint64_t result = 1;
      break;
  }
  return result;
}

void sub_1C5B4B2F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, xpc_object_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v15);
  _Unwind_Resume(a1);
}

void abm::_ParseIceARI(xpc_object_t *a1)
{
  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      xpc_object_t v4 = xpc_null_create();
      xpc_object_t v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8795EB0](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  xpc_object_t v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  unint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&value[1] = 0xAAAAAAAAAAAAAAAALL;
  std::string __p = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  xpc::dyn_cast_or_default();
  xpc_object_t v5 = xpc_BOOL_create(1);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a1, (const char *)*MEMORY[0x1E4F4D110], v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  unint64_t v8 = *(void *)&value[1];
  operator delete(*(void **)&value[1]);
}

void sub_1C5B4B9A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a11) {
    operator delete(a11);
  }
  xpc::dict::~dict(v19);
  _Unwind_Resume(a1);
}

void CMHandDetectionDelegate::create(NSObject **a1@<X0>, NSObject **a2@<X1>, void *a3@<X8>)
{
  pthread_mutex_lock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  xpc_object_t v6 = unk_1EBBDC788;
  if (!unk_1EBBDC788)
  {
    xpc_object_t v7 = operator new(1uLL);
    unint64_t v8 = operator new(0x20uLL);
    void *v8 = &unk_1F2112060;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = v7;
    unint64_t v9 = (std::__shared_weak_count *)off_1EBBDC790;
    unk_1EBBDC788 = v7;
    off_1EBBDC790 = v8;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    xpc_object_t v6 = unk_1EBBDC788;
  }
  int v10 = (std::__shared_weak_count *)off_1EBBDC790;
  v17[0] = v6;
  v17[1] = (dispatch_object_t)off_1EBBDC790;
  if (off_1EBBDC790) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDC790 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  char isCMHandDetectionSupported = Capabilities::isCMHandDetectionSupported((Capabilities *)v6);
  char v12 = isCMHandDetectionSupported;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (v12) {
      goto LABEL_11;
    }
LABEL_21:
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  if ((isCMHandDetectionSupported & 1) == 0) {
    goto LABEL_21;
  }
LABEL_11:
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v13 = operator new(0x28uLL);
  v13[1] = 0;
  v13[2] = 0;
  void *v13 = &unk_1F210EA70;
  id v14 = v13 + 3;
  xpc_object_t v15 = *a1;
  v17[0] = v15;
  if (v15) {
    dispatch_retain(v15);
  }
  xpc_object_t v16 = *a2;
  uint64_t v18 = v16;
  if (v16) {
    dispatch_retain(v16);
  }
  CMHandDetectionDelegate::CMHandDetectionDelegate(v14, v17, &v18);
  if (v16) {
    dispatch_release(v16);
  }
  if (v15) {
    dispatch_release(v15);
  }
  *a3 = v14;
  a3[1] = v13;
}

void sub_1C5B4BCB0(_Unwind_Exception *a1)
{
  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1C5B4BCDC(_Unwind_Exception *a1)
{
  if (v1)
  {
    dispatch_release(v1);
    if (!v2)
    {
LABEL_3:
      std::__shared_weak_count::~__shared_weak_count(v3);
      operator delete(v5);
      _Unwind_Resume(a1);
    }
  }
  else if (!v2)
  {
    goto LABEL_3;
  }
  dispatch_release(v2);
  std::__shared_weak_count::~__shared_weak_count(v3);
  operator delete(v6);
  _Unwind_Resume(a1);
}

void sub_1C5B4BD24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *CMHandDetectionDelegate::CMHandDetectionDelegate(void *a1, dispatch_object_t *a2, NSObject **a3)
{
  xpc_object_t v5 = *a2;
  if (*a2) {
    dispatch_retain(*a2);
  }
  xpc_object_t v6 = *a3;
  if (v6) {
    dispatch_retain(v6);
  }
  *a1 = 0;
  a1[1] = 0;
  if ([MEMORY[0x1E4F221C0] isCallHandednessAvailable])
  {
    xpc_object_t v7 = operator new(0x40uLL);
    if (v5) {
      dispatch_retain(v5);
    }
    if (v6) {
      dispatch_retain(v6);
    }
    *(void *)xpc_object_t v7 = 0;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = v5;
    if (v5) {
      dispatch_retain(v5);
    }
    *((void *)v7 + 3) = v6;
    if (v6) {
      dispatch_retain(v6);
    }
    *((void *)v7 + 4) = 0;
    *((void *)v7 + 6) = 0;
    *((unsigned char *)v7 + 56) = 0;
    *((void *)v7 + 4) = objc_alloc_init(MEMORY[0x1E4F221C0]);
    unint64_t v8 = (std::__shared_weak_count *)operator new(0x20uLL);
    v8->__shared_owners_ = 0;
    p_shared_owners = &v8->__shared_owners_;
    v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210E9F0;
    v8->__shared_weak_owners_ = 0;
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
    int v10 = (std::__shared_weak_count *)*((void *)v7 + 1);
    if (v10)
    {
      if (v10->__shared_owners_ != -1) {
        goto LABEL_20;
      }
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)xpc_object_t v7 = v7;
      *((void *)v7 + 1) = v8;
      std::__shared_weak_count::__release_weak(v10);
      if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_20;
      }
    }
    else
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)xpc_object_t v7 = v7;
      *((void *)v7 + 1) = v8;
      if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_20:
        *a1 = v7;
        a1[1] = v8;
        if (v6) {
          dispatch_release(v6);
        }
        if (v5) {
          dispatch_release(v5);
        }
        goto LABEL_24;
      }
    }
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    goto LABEL_20;
  }
LABEL_24:
  if (v6) {
    dispatch_release(v6);
  }
  if (v5) {
    dispatch_release(v5);
  }
  return a1;
}

void sub_1C5B4BF04(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[2], v1, (dispatch_function_t)std::shared_ptr<CMHandDetectionHandler> ctu::SharedSynchronizable<CMHandDetectionHandler>::make_shared_ptr<CMHandDetectionHandler>(CMHandDetectionHandler*)::{lambda(CMHandDetectionHandler*)#1}::operator() const(CMHandDetectionHandler*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C5B4BF2C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  if (v3)
  {
    dispatch_release(v3);
    if (!v1) {
      goto LABEL_3;
    }
  }
  else if (!v1)
  {
    goto LABEL_3;
  }
  dispatch_release(v1);
LABEL_3:
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v2);
  if (v3)
  {
    dispatch_release(v3);
    if (!v1) {
LABEL_5:
    }
      _Unwind_Resume(a1);
  }
  else if (!v1)
  {
    goto LABEL_5;
  }
  dispatch_release(v1);
  _Unwind_Resume(a1);
}

void CMHandDetectionDelegate::~CMHandDetectionDelegate(CMHandDetectionDelegate *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;

  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t CMHandDetectionDelegate::isSupported(CMHandDetectionDelegate *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDCDD8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_1EBBDCDD8))
  {
    return _MergedGlobals_7;
  }
  pthread_mutex_lock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  uint64_t v2 = (Capabilities *)unk_1EBBDC788;
  if (!unk_1EBBDC788)
  {
    Capabilities::create_default_global(&v6);
    std::shared_ptr<Capabilities>::operator=[abi:ne180100](&v6);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&v6);
    uint64_t v2 = (Capabilities *)unk_1EBBDC788;
  }
  xpc_object_t v4 = v2;
  xpc_object_t v5 = off_1EBBDC790;
  if (off_1EBBDC790) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDC790 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  if (Capabilities::isCMHandDetectionSupported(v2)) {
    char v3 = [MEMORY[0x1E4F221C0] isCallHandednessAvailable:v4, v5];
  }
  else {
    char v3 = 0;
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&v4);
  _MergedGlobals_7 = v3;
  __cxa_guard_release(&qword_1EBBDCDD8);
  return _MergedGlobals_7;
}

void sub_1C5B4C1D8(_Unwind_Exception *a1)
{
}

void CMHandDetectionDelegate::start(uint64_t **this)
{
  ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::start(void)::{lambda(void)#1}>(*this, &v1);
}

void CMHandDetectionDelegate::stop(uint64_t **this)
{
  ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::stop(void)::{lambda(void)#1}>(*this, &v1);
}

void CMHandDetectionDelegate::registerCallback(uint64_t **a1, const void **a2)
{
  uint64_t v2 = *a1;
  if (!*a2)
  {
    xpc_object_t v4 = 0;
    xpc_object_t v7 = *a1;
LABEL_6:
    char v5 = 1;
    aBlock = 0;
    ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1}>(v2, (uint64_t)&v7);
    long long v6 = aBlock;
    if (!aBlock) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  char v3 = _Block_copy(*a2);
  xpc_object_t v4 = v3;
  xpc_object_t v7 = v2;
  if (!v3) {
    goto LABEL_6;
  }
  char v5 = 0;
  aBlock = _Block_copy(v3);
  ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1}>(v2, (uint64_t)&v7);
  long long v6 = aBlock;
  if (aBlock) {
LABEL_7:
  }
    _Block_release(v6);
LABEL_8:
  if ((v5 & 1) == 0) {
    _Block_release(v4);
  }
}

void CMHandDetectionDelegate::shutdown(uint64_t **this)
{
  ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::shutdown(void)::{lambda(void)#1}>(*this, &v1);
}

const char *CMHandDetectionDelegate::toString(unsigned int a1)
{
  if (a1 > 2) {
    return "Unknown Hand Detection";
  }
  else {
    return off_1E651C0E8[a1];
  }
}

void std::__shared_ptr_pointer<CMHandDetectionHandler *,std::shared_ptr<CMHandDetectionHandler> ctu::SharedSynchronizable<CMHandDetectionHandler>::make_shared_ptr<CMHandDetectionHandler>(CMHandDetectionHandler*)::{lambda(CMHandDetectionHandler *)#1},std::allocator<CMHandDetectionHandler>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<CMHandDetectionHandler *,std::shared_ptr<CMHandDetectionHandler> ctu::SharedSynchronizable<CMHandDetectionHandler>::make_shared_ptr<CMHandDetectionHandler>(CMHandDetectionHandler*)::{lambda(CMHandDetectionHandler *)#1},std::allocator<CMHandDetectionHandler>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<CMHandDetectionHandler *,std::shared_ptr<CMHandDetectionHandler> ctu::SharedSynchronizable<CMHandDetectionHandler>::make_shared_ptr<CMHandDetectionHandler>(CMHandDetectionHandler*)::{lambda(CMHandDetectionHandler *)#1},std::allocator<CMHandDetectionHandler>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI22CMHandDetectionHandlerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI22CMHandDetectionHandlerE15make_shared_ptrIS1_EENSt3__110sh"
                                "ared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI22CMHandDetectionHandlerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI22CMHandDetectionHandlerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void std::shared_ptr<CMHandDetectionHandler> ctu::SharedSynchronizable<CMHandDetectionHandler>::make_shared_ptr<CMHandDetectionHandler>(CMHandDetectionHandler*)::{lambda(CMHandDetectionHandler*)#1}::operator() const(CMHandDetectionHandler*)::{lambda(void *)#1}::__invoke(void *__p)
{
  if (__p)
  {
    uint64_t v2 = (const void *)__p[6];
    if (v2) {
      _Block_release(v2);
    }
    unint64_t v3 = __p[3];
    if (v3) {
      dispatch_release(v3);
    }
    xpc_object_t v4 = __p[2];
    if (v4) {
      dispatch_release(v4);
    }
    char v5 = (std::__shared_weak_count *)__p[1];
    if (v5) {
      std::__shared_weak_count::__release_weak(v5);
    }
    operator delete(__p);
  }
}

void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::start(void)::{lambda(void)#1}>(uint64_t *a1, void *a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  unint64_t v8 = operator new(8uLL);
  void *v8 = *a2;
  unint64_t v9 = a1[2];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  int v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  _DWORD v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::start(void)::{lambda(void)#1}>(CMHandDetectionHandler::start(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CMHandDetectionHandler::start(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<CMHandDetectionHandler::start(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::start(void)::{lambda(void)#1}>(CMHandDetectionHandler::start(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CMHandDetectionHandler::start(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<CMHandDetectionHandler::start(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  xpc_object_t v4 = *(void **)(v3 + 32);
  if (v4 && !*(unsigned char *)(v3 + 56))
  {
    [v4 startCallHandednessUpdates];
    *(unsigned char *)(v3 + 56) = 1;
  }
  operator delete(v2);
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    long long v6 = a1;
  }
  else
  {
    long long v6 = a1;
  }
  operator delete(v6);
}

void sub_1C5B4C6A0(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  operator delete(v3);
  uint64_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::stop(void)::{lambda(void)#1}>(uint64_t *a1, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  unint64_t v8 = operator new(8uLL);
  void *v8 = *a2;
  unint64_t v9 = a1[2];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  int v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  _DWORD v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::stop(void)::{lambda(void)#1}>(CMHandDetectionHandler::stop(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CMHandDetectionHandler::stop(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<CMHandDetectionHandler::stop(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::stop(void)::{lambda(void)#1}>(CMHandDetectionHandler::stop(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CMHandDetectionHandler::stop(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<CMHandDetectionHandler::stop(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  xpc_object_t v4 = *(void **)(v3 + 32);
  if (v4 && *(unsigned char *)(v3 + 56))
  {
    [v4 stopCallHandednessUpdates];
    *(unsigned char *)(v3 + 56) = 0;
  }
  operator delete(v2);
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    long long v6 = a1;
  }
  else
  {
    long long v6 = a1;
  }
  operator delete(v6);
}

void sub_1C5B4C8E0(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  operator delete(v3);
  uint64_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  unint64_t v8 = operator new(0x10uLL);
  _OWORD *v8 = *(_OWORD *)a2;
  *(void *)(a2 + 8) = 0;
  unint64_t v9 = a1[2];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  int v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  _DWORD v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1}>(CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1},dispatch_queue_s *::default_delete<CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1}>(CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1},dispatch_queue_s *::default_delete<CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(uint64_t ***a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  if (!v3[4] || !v2[1]) {
    goto LABEL_17;
  }
  xpc_object_t v4 = (std::__shared_weak_count *)v3[1];
  if (!v4 || (uint64_t v5 = *v3, (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    unint64_t v8 = v2[1];
    if (!v8) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  unint64_t v8 = v2[1];
  if (v8) {
LABEL_9:
  }
    unint64_t v8 = (uint64_t *)_Block_copy(v8);
LABEL_10:
  unint64_t v9 = (const void *)v3[6];
  v3[6] = (uint64_t)v8;
  if (v9) {
    _Block_release(v9);
  }
  int v10 = objc_alloc_init(CMHandDetectionDelegateInternal);
  void v3[5] = (uint64_t)v10;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3321888768;
  v13[2] = ___ZZN22CMHandDetectionHandler16registerCallbackEN8dispatch5blockIU13block_pointerFvN23CMHandDetectionDelegate21CMHandDetectionResultEEEEENKUlvE_clEv_block_invoke;
  v13[3] = &__block_descriptor_56_e8_40c47_ZTSNSt3__18weak_ptrI22CMHandDetectionHandlerEE_e8_v16__0q8l;
  v13[4] = v3;
  v13[5] = v5;
  id v14 = v7;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  aBlock = _Block_copy(v13);
  [(CMHandDetectionDelegateInternal *)v10 registerHandler:&aBlock];
  if (aBlock) {
    _Block_release(aBlock);
  }
  [(id)v3[4] setDelegate:v3[5]];
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  std::__shared_weak_count::__release_weak(v7);
LABEL_17:
  uint64_t v11 = v2[1];
  if (v11) {
    _Block_release(v11);
  }
  operator delete(v2);
  char v12 = (std::__shared_weak_count *)a1[2];
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  operator delete(a1);
}

void sub_1C5B4CC58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  std::__shared_weak_count::__release_weak(v18);
  xpc_object_t v20 = (const void *)v17[1];
  if (v20) {
    _Block_release(v20);
  }
  operator delete(v17);
  xpc_object_t v21 = (std::__shared_weak_count *)v16[2];
  if (v21)
  {
    if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

void ___ZZN22CMHandDetectionHandler16registerCallbackEN8dispatch5blockIU13block_pointerFvN23CMHandDetectionDelegate21CMHandDetectionResultEEEEENKUlvE_clEv_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = (uint64_t *)a1[4];
    long long v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      xpc_object_t v7 = v6;
      if (!a1[5]) {
        goto LABEL_16;
      }
      unint64_t v8 = (std::__shared_weak_count *)v5[1];
      if (!v8 || (v9 = *v5, (int v10 = std::__shared_weak_count::lock(v8)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      uint64_t v11 = v10;
      char v12 = operator new(0x10uLL);
      *char v12 = v5;
      v12[1] = a2;
      xpc_object_t v13 = v5[2];
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      id v14 = operator new(0x18uLL);
      *id v14 = v12;
      v14[1] = v9;
      void v14[2] = v11;
      dispatch_async_f(v13, v14, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI22CMHandDetectionHandlerE15execute_wrappedIZZZNS3_16registerCallbackENS_5blockIU13block_pointerFvN23CMHandDetectionDelegate21CMHandDetectionResultEEEEENKUlvE_clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISE_NSJ_14default_deleteISE_EEEEENUlPvE_8__invokeESO_);
      if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
        if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          return;
        }
      }
      else
      {
LABEL_16:
        if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          return;
        }
      }
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

uint64_t __copy_helper_block_e8_40c47_ZTSNSt3__18weak_ptrI22CMHandDetectionHandlerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c47_ZTSNSt3__18weak_ptrI22CMHandDetectionHandlerEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI22CMHandDetectionHandlerE15execute_wrappedIZZZNS3_16registerCallbackENS_5blockIU13block_pointerFvN23CMHandDetectionDelegate21CMHandDetectionResultEEEEENKUlvE_clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISE_NSJ_14default_deleteISE_EEEEENUlPvE_8__invokeESO_(void *a1)
{
  uint64_t v2 = (void *)*a1;
  (*(void (**)(void))(*(void *)(*(void *)*a1 + 48) + 16))();
  operator delete(v2);
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    xpc_object_t v4 = a1;
  }
  else
  {
    xpc_object_t v4 = a1;
  }
  operator delete(v4);
}

void sub_1C5B4CF8C(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  operator delete(v3);
  uint64_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::shutdown(void)::{lambda(void)#1}>(uint64_t *a1, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  unint64_t v8 = operator new(8uLL);
  void *v8 = *a2;
  uint64_t v9 = a1[2];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  int v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  _DWORD v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::shutdown(void)::{lambda(void)#1}>(CMHandDetectionHandler::shutdown(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CMHandDetectionHandler::shutdown(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<CMHandDetectionHandler::shutdown(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::shutdown(void)::{lambda(void)#1}>(CMHandDetectionHandler::shutdown(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CMHandDetectionHandler::shutdown(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<CMHandDetectionHandler::shutdown(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  xpc_object_t v4 = *(void **)(v3 + 32);
  if (v4)
  {

    *(void *)(v3 + 32) = 0;
  }
  operator delete(v2);
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    long long v6 = a1;
  }
  else
  {
    long long v6 = a1;
  }
  operator delete(v6);
}

void sub_1C5B4D1C4(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  operator delete(v3);
  uint64_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<Capabilities>::operator=[abi:ne180100](long long *a1)
{
  long long v1 = *a1;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v2 = (std::__shared_weak_count *)off_1EBBDC790;
  unk_1EBBDC788 = v1;
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void std::__shared_ptr_emplace<CMHandDetectionDelegate>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210EA70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CMHandDetectionDelegate>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210EA70;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<CMHandDetectionDelegate>::__on_zero_shared(uint64_t a1)
{
  long long v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ClientGetLogServer(void *a1@<X8>)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZL19ClientLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_14;
  block[4] = &qword_1EBBDCDE8;
  if (_MergedGlobals_8 == -1)
  {
    uint64_t v2 = unk_1EBBDCDF0;
    *a1 = qword_1EBBDCDE8;
    a1[1] = v2;
    if (!v2) {
      return;
    }
  }
  else
  {
    dispatch_once(&_MergedGlobals_8, block);
    uint64_t v2 = unk_1EBBDCDF0;
    *a1 = qword_1EBBDCDE8;
    a1[1] = v2;
    if (!v2) {
      return;
    }
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
}

uint64_t ___ZL19ClientLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  *(void *)std::string __p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_1C5BCAD80;
  strcpy(*(char **)__p, "AppleBasebandManagerClientLog");
  ctu::LogServer::create();
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = v24;
  long long v24 = 0uLL;
  xpc_object_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)uint64_t v2 = v3;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = (std::__shared_weak_count *)*((void *)&v24 + 1);
    if (!*((void *)&v24 + 1)) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v5 = (std::__shared_weak_count *)*((void *)&v24 + 1);
    if (!*((void *)&v24 + 1)) {
      goto LABEL_5;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_5:
  if ((__p[23] & 0x80000000) != 0) {
LABEL_6:
  }
    operator delete(*(void **)__p);
LABEL_7:
  unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v22[7] = v6;
  v22[8] = v6;
  v22[5] = v6;
  v22[6] = v6;
  v22[3] = v6;
  v22[4] = v6;
  v22[1] = v6;
  void v22[2] = v6;
  long long v21 = v6;
  v22[0] = v6;
  *(_OWORD *)xpc_object_t v19 = v6;
  long long v20 = v6;
  long long v17 = v6;
  long long v18 = v6;
  *(_OWORD *)std::string __p = v6;
  *(_OWORD *)&__p[16] = v6;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
  xpc_object_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"/tmp/ABM.", 9);
  unint64_t v8 = getprogname();
  size_t v9 = strlen(v8);
  int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
  LOBYTE(v24) = 46;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&v24, 1);
  getpid();
  std::ostream::operator<<();
  uint64_t v11 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v11->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_1F210C978;
  *(void *)&long long v24 = v11;
  char v12 = (std::__shared_weak_count *)operator new(0x20uLL);
  v12->__shared_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210C9E0;
  v12->__shared_weak_owners_ = 0;
  v12[1].__vftable = v11;
  *((void *)&v24 + 1) = v12;
  xpc_object_t v15 = v12;
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  ctu::LogServer::addWriter();
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  ctu::LogServer::start(**(ctu::LogServer ***)(a1 + 32));
  ctu::LogServer::setEnabled(**(ctu::LogServer ***)(a1 + 32));
  xpc_object_t v13 = (std::__shared_weak_count *)*((void *)&v24 + 1);
  if (*((void *)&v24 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v24 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  *(void *)std::string __p = *MEMORY[0x1E4FBA418];
  *(void *)&__p[*(void *)(*(void *)__p - 24)] = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *(void *)&__p[8] = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v20) < 0) {
    operator delete(v19[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C8795140](v22);
}

void sub_1C5B4D87C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v16 - 48);
  std::ostringstream::~ostringstream((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void CellularCertModule::create(capabilities::abs *a1@<X0>, void *a2@<X8>)
{
  if ((capabilities::abs::supportsCellularCert(a1) & 1) == 0
    || (TelephonyUtilIsInternalBuild() & 1) == 0 && (TelephonyUtilIsCarrierBuild() & 1) == 0)
  {
    *a2 = 0;
    a2[1] = 0;
    return;
  }
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = operator new(0xC8uLL);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)a1;
  xpc_object_t v7 = (std::__shared_weak_count *)*((void *)a1 + 1);
  v22[0] = v6;
  v22[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  CellularCertModule::CellularCertModule((uint64_t)v4, v22);
  *a2 = v5;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v8 = (std::__shared_weak_count *)operator new(0x20uLL);
  v8->__shared_owners_ = 0;
  p_shared_owners = &v8->__shared_owners_;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210EC60;
  v8->__shared_weak_owners_ = 0;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  a2[1] = v8;
  int v10 = (std::__shared_weak_count *)*((void *)v5 + 16);
  if (v10)
  {
    if (v10->__shared_owners_ != -1) {
      goto LABEL_13;
    }
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v5 + 15) = v5;
    *((void *)v5 + 16) = v8;
    std::__shared_weak_count::__release_weak(v10);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *((void *)v5 + 15) = v5;
  *((void *)v5 + 16) = v8;
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_12:
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_13:
  uint64_t v11 = (void *)*a2;
  if (*(void *)(*a2 + 104))
  {
    char v12 = (std::__shared_weak_count *)v11[16];
    if (!v12 || (uint64_t v13 = v11[15], (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    xpc_object_t v15 = v14;
    uint64_t block = v13;
    uint64_t v24 = (uint64_t)v14;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v11 + 7));
    uint64_t v16 = v13 + 48;
    if (!v13) {
      uint64_t v16 = 0;
    }
    uint64_t v29 = v16;
    xpc_object_t v30 = v15;
    uint64_t block = 0;
    uint64_t v24 = 0;
    ctu::TrackedLogger::registerLoggerToServer();
    long long v17 = v30;
    if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    long long v18 = (std::__shared_weak_count *)v24;
    if (v24 && !atomic_fetch_add((atomic_ullong *volatile)(v24 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v19 = *a2;
  uint64_t v20 = *a2 + 120;
  uint64_t block = MEMORY[0x1E4F143A8];
  uint64_t v24 = 0x40000000;
  xpc_object_t v25 = ___ZNK3ctu20SharedSynchronizableI18CellularCertModuleE20execute_wrapped_syncIZNS1_4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  xpc_object_t v26 = &__block_descriptor_tmp_15;
  uint64_t v27 = v20;
  xpc_object_t v28 = &v29;
  uint64_t v29 = v19;
  long long v21 = *(NSObject **)(v19 + 136);
  if (*(void *)(v19 + 144)) {
    dispatch_async_and_wait(v21, &block);
  }
  else {
    dispatch_sync(v21, &block);
  }
}

void sub_1C5B4DBB8()
{
}

void sub_1C5B4DC04()
{
}

void sub_1C5B4DC14()
{
}

void CellularCertModule::init(CellularCertModule *this)
{
  long long v3 = this;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI18CellularCertModuleE20execute_wrapped_syncIZNS1_4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  block[3] = &__block_descriptor_tmp_15;
  block[4] = (char *)this + 120;
  void block[5] = &v3;
  uint64_t v2 = (char *)this + 136;
  long long v1 = *((void *)this + 17);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

void CellularCertModule::~CellularCertModule(CellularCertModule *this)
{
  *(void *)this = &unk_1F210EAC0;
  *((void *)this + 6) = &unk_1F210EB30;
  uint64_t v2 = *((void *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v14 = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v14, 2u);
  }
  long long v3 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    xpc_object_t v4 = (char *)this + 56;
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 22);
    if (!v5) {
      goto LABEL_9;
    }
  }
  else
  {
    xpc_object_t v4 = (char *)this + 56;
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 22);
    if (!v5) {
      goto LABEL_9;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_9:
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 20);
  if (!v6 || atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    *((void *)this + 6) = &unk_1F210EC20;
    MEMORY[0x1C87940C0](v4);
    xpc_object_t v7 = *((void *)this + 18);
    if (!v7) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  *((void *)this + 6) = &unk_1F210EC20;
  MEMORY[0x1C87940C0](v4);
  xpc_object_t v7 = *((void *)this + 18);
  if (v7) {
LABEL_12:
  }
    dispatch_release(v7);
LABEL_13:
  unint64_t v8 = *((void *)this + 17);
  if (v8) {
    dispatch_release(v8);
  }
  size_t v9 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  *(void *)this = &unk_1F2112348;
  uint64_t v10 = *((void *)this + 3);
  if (v10)
  {
    uint64_t v11 = *((void *)this + 4);
    char v12 = (void *)*((void *)this + 3);
    if (v11 != v10)
    {
      do
      {
        if (*(char *)(v11 - 1) < 0) {
          operator delete(*(void **)(v11 - 24));
        }
        v11 -= 24;
      }
      while (v11 != v10);
      char v12 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v10;
    operator delete(v12);
  }
  uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
}

{
  void *v1;
  uint64_t vars8;

  CellularCertModule::~CellularCertModule(this);

  operator delete(v1);
}

void *ctu::SharedLoggable<CellularCertModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F210EC20;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1F210EC20;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void non-virtual thunk to'CellularCertModule::~CellularCertModule(CellularCertModule *this)
{
}

{
  void *v1;
  uint64_t vars8;

  CellularCertModule::~CellularCertModule((CellularCertModule *)((char *)this - 48));

  operator delete(v1);
}

const char *CellularCertModule::getName(CellularCertModule *this)
{
  return "cellularcert.mod";
}

uint64_t CellularCertModule::CellularCertModule(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  xpc_object_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1F2112348;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(void *)a1 = &unk_1F2103EC0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &unk_1F2103EC0;
  }
  *(void *)a1 = &unk_1F210EAC0;
  *(void *)(a1 + 48) = &unk_1F210EB30;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v21, "com.apple.telephony.abm", "cellularcert.mod");
  GetABMLogServer(&v19);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v6 = dispatch_queue_create_with_target_V2("cellularcert.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v6, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v6);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = v6;
  if (v6)
  {
    dispatch_retain(v6);
    *(void *)(a1 + 144) = 0;
    dispatch_release(v6);
  }
  else
  {
    *(void *)(a1 + 144) = 0;
  }
  *(void *)(a1 + 48) = &unk_1F210EC20;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v24);
  *(void *)(a1 + 56) = &unk_1F2102CB8;
  xpc_object_t v7 = v20;
  *(void *)(a1 + 104) = v19;
  *(void *)(a1 + 112) = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v23);
  *(void *)(a1 + 48) = &unk_1F210ECB0;
  unint64_t v8 = v20;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v21);
  *(void *)a1 = &unk_1F210EAC0;
  *(void *)(a1 + 48) = &unk_1F210EB30;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  size_t v9 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v10 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v24, v9);
    long long v11 = v24;
    long long v24 = 0uLL;
    char v12 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v11;
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v13 = (std::__shared_weak_count *)*((void *)&v24 + 1);
    if (*((void *)&v24 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v24 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    uint64_t v10 = off_1EBBDCA08;
  }
  uint64_t v21 = v10;
  xpc_object_t v22 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v10 + 152))(&v23, v10);
  long long v14 = v23;
  long long v23 = 0uLL;
  xpc_object_t v15 = *(std::__shared_weak_count **)(a1 + 176);
  *(_OWORD *)(a1 + 168) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = (std::__shared_weak_count *)*((void *)&v23 + 1);
  if (*((void *)&v23 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v23 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  long long v17 = v22;
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  return a1;
}

void sub_1C5B4E4F8(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v5);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v4);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v3);
  ctu::SharedLoggable<CellularCertModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v2);
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void sub_1C5B4E558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a15);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a13);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v16);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  Service::~Service(v15);
  _Unwind_Resume(a1);
}

void sub_1C5B4E59C(_Unwind_Exception *a1)
{
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

unsigned char *CellularCertModule::getShutdownStages@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = operator new(1uLL);
  *a1 = v3;
  unsigned char *v3 = 3;
  uint64_t result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void CellularCertModule::shutdown(void *a1, uint64_t a2, dispatch_object_t *a3)
{
  uint64_t v4 = *a3;
  if (*a3)
  {
    dispatch_retain(*a3);
    dispatch_group_enter(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[16];
  if (!v5 || (v6 = a1[15], (xpc_object_t v7 = std::__shared_weak_count::lock(v5)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v8 = v7;
  size_t v9 = operator new(0x10uLL);
  void *v9 = a1;
  v9[1] = v4;
  uint64_t v10 = a1[17];
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v11 = operator new(0x18uLL);
  void *v11 = v9;
  v11[1] = v6;
  uint64_t v11[2] = v8;
  dispatch_async_f(v10, v11, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<CellularCertModule>::execute_wrapped<CellularCertModule::shutdown(ShutdownStage,dispatch::group_session)::$_0>(CellularCertModule::shutdown(ShutdownStage,dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CellularCertModule::shutdown(ShutdownStage,dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<CellularCertModule::shutdown(ShutdownStage,dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void CellularCertModule::initialize(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  unint64_t v8 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v8);
  }
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v9 = (std::__shared_weak_count *)a1[16];
  if (!v9 || (uint64_t v10 = a1[15], (v11 = std::__shared_weak_count::lock(v9)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  char v12 = v11;
  uint64_t v13 = operator new(0x20uLL);
  void *v13 = a1;
  v13[1] = v8;
  v13[2] = v5;
  v13[3] = v7;
  long long v14 = a1[17];
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v15 = operator new(0x18uLL);
  void *v15 = v13;
  v15[1] = v10;
  v15[2] = v12;
  dispatch_async_f(v14, v15, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<CellularCertModule>::execute_wrapped<CellularCertModule::initialize(dispatch::group_session)::$_0>(CellularCertModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CellularCertModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<CellularCertModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }

  std::__shared_weak_count::__release_weak(v7);
}

void CellularCertModule::start(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  unint64_t v8 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v8);
  }
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v9 = (std::__shared_weak_count *)a1[16];
  if (!v9 || (uint64_t v10 = a1[15], (v11 = std::__shared_weak_count::lock(v9)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  char v12 = v11;
  uint64_t v13 = operator new(0x20uLL);
  void *v13 = a1;
  v13[1] = v8;
  v13[2] = v5;
  v13[3] = v7;
  long long v14 = a1[17];
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v15 = operator new(0x18uLL);
  void *v15 = v13;
  v15[1] = v10;
  v15[2] = v12;
  dispatch_async_f(v14, v15, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<CellularCertModule>::execute_wrapped<CellularCertModule::start(dispatch::group_session)::$_0>(CellularCertModule::start(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CellularCertModule::start(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<CellularCertModule::start(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }

  std::__shared_weak_count::__release_weak(v7);
}

void CellularCertModule::sleep(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  unint64_t v8 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v8);
  }
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v9 = (std::__shared_weak_count *)a1[16];
  if (!v9 || (uint64_t v10 = a1[15], (v11 = std::__shared_weak_count::lock(v9)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  char v12 = v11;
  uint64_t v13 = operator new(0x20uLL);
  void *v13 = a1;
  v13[1] = v8;
  v13[2] = v5;
  v13[3] = v7;
  long long v14 = a1[17];
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v15 = operator new(0x18uLL);
  void *v15 = v13;
  v15[1] = v10;
  v15[2] = v12;
  dispatch_async_f(v14, v15, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<CellularCertModule>::execute_wrapped<CellularCertModule::sleep(dispatch::group_session)::$_0>(CellularCertModule::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CellularCertModule::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<CellularCertModule::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }

  std::__shared_weak_count::__release_weak(v7);
}

void CellularCertModule::wake(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  unint64_t v8 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v8);
  }
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v9 = (std::__shared_weak_count *)a1[16];
  if (!v9 || (uint64_t v10 = a1[15], (v11 = std::__shared_weak_count::lock(v9)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  char v12 = v11;
  uint64_t v13 = operator new(0x20uLL);
  void *v13 = a1;
  v13[1] = v8;
  v13[2] = v5;
  v13[3] = v7;
  long long v14 = a1[17];
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v15 = operator new(0x18uLL);
  void *v15 = v13;
  v15[1] = v10;
  v15[2] = v12;
  dispatch_async_f(v14, v15, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<CellularCertModule>::execute_wrapped<CellularCertModule::wake(dispatch::group_session)::$_0>(CellularCertModule::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CellularCertModule::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<CellularCertModule::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }

  std::__shared_weak_count::__release_weak(v7);
}

void CellularCertModule::bootstrapTest_sync(CellularCertModule *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *((void *)this + 11);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Send request to initialize test", v5, 2u);
  }
  CellularCertClient::bootstrapTest(*((CellularCertClient **)this + 23), a2);
}

void CellularCertModule::shutdownTest_sync(CellularCertModule *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *((void *)this + 11);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Send request to shutdown test", v5, 2u);
  }
  CellularCertClient::shutdownTest(*((CellularCertClient **)this + 23), a2);
}

void CellularCertModule::configureTest_sync(uint64_t a1@<X0>, xpc_object_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#I Send request to configure test", buf, 2u);
  }
  uint64_t v7 = *(void *)(a1 + 184);
  xpc_object_t v8 = *a2;
  xpc_object_t v9 = v8;
  if (v8)
  {
    xpc_retain(v8);
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t v9 = v8;
  }
  CellularCertClient::configureTest(v7, &v9, a3);
  xpc_release(v8);
}

void sub_1C5B4EEF8(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

uint64_t ctu::Loggable<CellularCertModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<CellularCertModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (const char *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 16))();
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    xpc_object_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<CellularCertModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<CellularCertModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F210EC20;
  MEMORY[0x1C87940C0](a1 + 1);
  return a1;
}

void ctu::Loggable<CellularCertModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F210EC20;
  MEMORY[0x1C87940C0](a1 + 1);

  operator delete(a1);
}

void std::__shared_ptr_pointer<CellularCertModule *,std::shared_ptr<CellularCertModule> ctu::SharedSynchronizable<CellularCertModule>::make_shared_ptr<CellularCertModule>(CellularCertModule*)::{lambda(CellularCertModule *)#1},std::allocator<CellularCertModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<CellularCertModule *,std::shared_ptr<CellularCertModule> ctu::SharedSynchronizable<CellularCertModule>::make_shared_ptr<CellularCertModule>(CellularCertModule*)::{lambda(CellularCertModule *)#1},std::allocator<CellularCertModule>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<CellularCertModule *,std::shared_ptr<CellularCertModule> ctu::SharedSynchronizable<CellularCertModule>::make_shared_ptr<CellularCertModule>(CellularCertModule*)::{lambda(CellularCertModule *)#1},std::allocator<CellularCertModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI18CellularCertModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI18CellularCertModuleE15make_shared_ptrIS1_EENSt3__110shared"
                                "_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI18CellularCertModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI18CellularCertModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<CellularCertModule> ctu::SharedSynchronizable<CellularCertModule>::make_shared_ptr<CellularCertModule>(CellularCertModule*)::{lambda(CellularCertModule*)#1}::operator() const(CellularCertModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ctu::SharedLoggable<CellularCertModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F210EC20;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void ___ZNK3ctu20SharedSynchronizableI18CellularCertModuleE20execute_wrapped_syncIZNS1_4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v2 = (ctu::OsLogLogger *)operator new(0x18uLL);
  ctu::OsLogLogger::OsLogLogger(v2, "com.apple.telephony.abm", "cellularcert.client");
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  std::shared_ptr<CellularCertClient>::shared_ptr[abi:ne180100]<CellularCertClient,void>(&v13, (uint64_t)v2);
  long long v3 = v13;
  long long v13 = 0uLL;
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 192);
  *(_OWORD *)(v1 + 184) = v3;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  size_t v5 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v6 || (uint64_t v7 = *(void *)(v1 + 120), (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v9 = v8;
  p_shared_weak_owners = &v8->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v19 = (const void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v20 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v13 = MEMORY[0x1E4F143A8];
  *((void *)&v13 + 1) = 1174405120;
  long long v14 = ___ZZN18CellularCertModule4initEvENK3__0clEv_block_invoke;
  xpc_object_t v15 = &__block_descriptor_tmp_29_4;
  uint64_t v16 = v1;
  uint64_t v17 = v7;
  long long v18 = v9;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  long long v11 = _Block_copy(&v13);
  char v12 = *(NSObject **)(v1 + 136);
  if (v12) {
    dispatch_retain(*(dispatch_object_t *)(v1 + 136));
  }
  uint64_t v19 = v11;
  dispatch_object_t v20 = v12;
  (*(void (**)(void, const void **))(**(void **)(v1 + 168) + 48))(*(void *)(v1 + 168), &v19);
  if (v20) {
    dispatch_release(v20);
  }
  if (v19) {
    _Block_release(v19);
  }
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  std::__shared_weak_count::__release_weak(v9);
}

void sub_1C5B4F4A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  long long v18 = *(NSObject **)(v16 - 40);
  if (v18) {
    dispatch_release(v18);
  }
  uint64_t v19 = *(const void **)(v16 - 48);
  if (v19) {
    _Block_release(v19);
  }
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  std::__shared_weak_count::__release_weak(v15);
  _Unwind_Resume(a1);
}

void sub_1C5B4F4E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZZN18CellularCertModule4initEvENK3__0clEv_block_invoke(void *a1, const char *a2, xpc_object_t *a3)
{
  uint64_t v4 = a1[4];
  uint64_t v76 = 0;
  v77 = 0;
  size_t v5 = (std::__shared_weak_count *)a1[6];
  if (!v5) {
    goto LABEL_96;
  }
  v77 = std::__shared_weak_count::lock(v5);
  if (!v77) {
    return;
  }
  uint64_t v76 = a1[5];
  if (!v76) {
    goto LABEL_96;
  }
  size_t v8 = strlen(a2);
  if (v8 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v11 = v8 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (unint64_t *)operator new(v11 + 1);
    xpc_object_t object = v9;
    int64_t v75 = v12 | 0x8000000000000000;
    unint64_t __dst = (unint64_t)p_dst;
    goto LABEL_11;
  }
  HIBYTE(v75) = v8;
  p_dst = &__dst;
  if (v8) {
LABEL_11:
  }
    memcpy(p_dst, a2, (size_t)v9);
  *((unsigned char *)v9 + (void)p_dst) = 0;
  long long v13 = abm::kCommandCellularCertBootstrap;
  size_t v14 = strlen(abm::kCommandCellularCertBootstrap);
  if (v14 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v15 = v14;
  if (v14 >= 0x17)
  {
    uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v17 = v14 | 7;
    }
    uint64_t v18 = v17 + 1;
    uint64_t v16 = operator new(v17 + 1);
    size_t v71 = v15;
    int64_t v72 = v18 | 0x8000000000000000;
    *(void *)long long buf = v16;
    goto LABEL_19;
  }
  HIBYTE(v72) = v14;
  uint64_t v16 = buf;
  if (v14) {
LABEL_19:
  }
    memmove(v16, v13, v15);
  *((unsigned char *)v16 + v15) = 0;
  int v19 = SHIBYTE(v75);
  dispatch_object_t v20 = (void *)__dst;
  if (v75 >= 0) {
    uint64_t v21 = (const char *)&__dst;
  }
  else {
    uint64_t v21 = (const char *)__dst;
  }
  int v22 = SHIBYTE(v72);
  long long v23 = *(uint8_t **)buf;
  if (v72 >= 0) {
    long long v24 = buf;
  }
  else {
    long long v24 = *(uint8_t **)buf;
  }
  int v25 = strcasecmp(v21, (const char *)v24);
  if (v22 < 0)
  {
    operator delete(v23);
    if ((v19 & 0x80000000) == 0)
    {
LABEL_28:
      if (v25) {
        goto LABEL_29;
      }
LABEL_35:
      unint64_t __dst = 0xAAAAAAAAAAAAAAAALL;
      xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      uint64_t v29 = v76;
      xpc_object_t v30 = *(NSObject **)(v76 + 88);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1C59C6000, v30, OS_LOG_TYPE_DEFAULT, "#I Send request to initialize test", buf, 2u);
      }
      CellularCertClient::bootstrapTest(*(CellularCertClient **)(v29 + 184), (uint64_t)&__dst);
      (*(void (**)(void, void))(**(void **)(v4 + 168) + 56))(*(void *)(v4 + 168), __dst);
      xpc_release(object);
      goto LABEL_96;
    }
  }
  else if ((v19 & 0x80000000) == 0)
  {
    goto LABEL_28;
  }
  operator delete(v20);
  if (!v25) {
    goto LABEL_35;
  }
LABEL_29:
  size_t v26 = strlen(a2);
  if (v26 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v27 = (void *)v26;
  if (v26 >= 0x17)
  {
    uint64_t v31 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17) {
      uint64_t v31 = v26 | 7;
    }
    uint64_t v32 = v31 + 1;
    xpc_object_t v28 = (unint64_t *)operator new(v31 + 1);
    xpc_object_t object = v27;
    int64_t v75 = v32 | 0x8000000000000000;
    unint64_t __dst = (unint64_t)v28;
    goto LABEL_41;
  }
  HIBYTE(v75) = v26;
  xpc_object_t v28 = &__dst;
  if (v26) {
LABEL_41:
  }
    memcpy(v28, a2, (size_t)v27);
  *((unsigned char *)v27 + (void)v28) = 0;
  xpc_object_t v33 = abm::kCommandCellularCertShutdown;
  size_t v34 = strlen(abm::kCommandCellularCertShutdown);
  if (v34 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v35 = v34;
  if (v34 >= 0x17)
  {
    uint64_t v37 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v34 | 7) != 0x17) {
      uint64_t v37 = v34 | 7;
    }
    uint64_t v38 = v37 + 1;
    xpc_object_t v36 = operator new(v37 + 1);
    size_t v71 = v35;
    int64_t v72 = v38 | 0x8000000000000000;
    *(void *)long long buf = v36;
    goto LABEL_49;
  }
  HIBYTE(v72) = v34;
  xpc_object_t v36 = buf;
  if (v34) {
LABEL_49:
  }
    memmove(v36, v33, v35);
  *((unsigned char *)v36 + v35) = 0;
  int v39 = SHIBYTE(v75);
  size_t v40 = (void *)__dst;
  if (v75 >= 0) {
    xpc_object_t v41 = (const char *)&__dst;
  }
  else {
    xpc_object_t v41 = (const char *)__dst;
  }
  int v42 = SHIBYTE(v72);
  xpc_object_t v43 = *(uint8_t **)buf;
  if (v72 >= 0) {
    xpc_object_t v44 = buf;
  }
  else {
    xpc_object_t v44 = *(uint8_t **)buf;
  }
  int v45 = strcasecmp(v41, (const char *)v44);
  if (v42 < 0)
  {
    operator delete(v43);
    if ((v39 & 0x80000000) == 0)
    {
LABEL_58:
      if (v45) {
        goto LABEL_59;
      }
LABEL_65:
      unint64_t __dst = 0xAAAAAAAAAAAAAAAALL;
      xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      uint64_t v49 = v76;
      unint64_t v50 = *(NSObject **)(v76 + 88);
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1C59C6000, v50, OS_LOG_TYPE_DEFAULT, "#I Send request to shutdown test", buf, 2u);
      }
      CellularCertClient::shutdownTest(*(CellularCertClient **)(v49 + 184), (uint64_t)&__dst);
      (*(void (**)(void, void))(**(void **)(v4 + 168) + 56))(*(void *)(v4 + 168), __dst);
      xpc_release(object);
      goto LABEL_96;
    }
  }
  else if ((v39 & 0x80000000) == 0)
  {
    goto LABEL_58;
  }
  operator delete(v40);
  if (!v45) {
    goto LABEL_65;
  }
LABEL_59:
  size_t v46 = strlen(a2);
  if (v46 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v47 = (void *)v46;
  if (v46 >= 0x17)
  {
    uint64_t v51 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v46 | 7) != 0x17) {
      uint64_t v51 = v46 | 7;
    }
    uint64_t v52 = v51 + 1;
    size_t v48 = (unint64_t *)operator new(v51 + 1);
    xpc_object_t object = v47;
    int64_t v75 = v52 | 0x8000000000000000;
    unint64_t __dst = (unint64_t)v48;
    goto LABEL_71;
  }
  HIBYTE(v75) = v46;
  size_t v48 = &__dst;
  if (v46) {
LABEL_71:
  }
    memcpy(v48, a2, (size_t)v47);
  *((unsigned char *)v47 + (void)v48) = 0;
  int v53 = abm::kCommandCellularCertConfigure;
  size_t v54 = strlen(abm::kCommandCellularCertConfigure);
  if (v54 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v55 = v54;
  if (v54 >= 0x17)
  {
    uint64_t v57 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v54 | 7) != 0x17) {
      uint64_t v57 = v54 | 7;
    }
    uint64_t v58 = v57 + 1;
    int v56 = operator new(v57 + 1);
    size_t v71 = v55;
    int64_t v72 = v58 | 0x8000000000000000;
    *(void *)long long buf = v56;
    goto LABEL_79;
  }
  HIBYTE(v72) = v54;
  int v56 = buf;
  if (v54) {
LABEL_79:
  }
    memmove(v56, v53, v55);
  *((unsigned char *)v56 + v55) = 0;
  int v59 = SHIBYTE(v75);
  unsigned int v60 = (void *)__dst;
  if (v75 >= 0) {
    unint64_t v61 = (const char *)&__dst;
  }
  else {
    unint64_t v61 = (const char *)__dst;
  }
  int v62 = SHIBYTE(v72);
  uint64_t v63 = *(uint8_t **)buf;
  if (v72 >= 0) {
    unint64_t v64 = buf;
  }
  else {
    unint64_t v64 = *(uint8_t **)buf;
  }
  int v65 = strcasecmp(v61, (const char *)v64);
  if (v62 < 0)
  {
    operator delete(v63);
    if ((v59 & 0x80000000) == 0)
    {
LABEL_88:
      if (!v65) {
        goto LABEL_92;
      }
      goto LABEL_96;
    }
  }
  else if ((v59 & 0x80000000) == 0)
  {
    goto LABEL_88;
  }
  operator delete(v60);
  if (!v65)
  {
LABEL_92:
    unint64_t __dst = 0xAAAAAAAAAAAAAAAALL;
    xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    uint64_t v66 = v76;
    xpc_object_t v67 = *a3;
    xpc_object_t v69 = v67;
    if (v67)
    {
      xpc_retain(v67);
    }
    else
    {
      xpc_object_t v67 = xpc_null_create();
      xpc_object_t v69 = v67;
    }
    CellularCertModule::configureTest_sync(v66, &v69, (uint64_t)&__dst);
    xpc_release(v67);
    xpc_object_t v69 = 0;
    (*(void (**)(void, void))(**(void **)(v4 + 168) + 64))(*(void *)(v4 + 168), __dst);
    xpc_release(object);
  }
LABEL_96:
  CFTypeRef v68 = v77;
  if (v77)
  {
    if (!atomic_fetch_add(&v77->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
}

void sub_1C5B4FB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, xpc_object_t object, int a16, __int16 a17, char a18, char a19, char a20)
{
}

uint64_t __copy_helper_block_e8_40c43_ZTSNSt3__18weak_ptrI18CellularCertModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c43_ZTSNSt3__18weak_ptrI18CellularCertModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<CellularCertModule>::execute_wrapped<CellularCertModule::shutdown(ShutdownStage,dispatch::group_session)::$_0>(CellularCertModule::shutdown(ShutdownStage,dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CellularCertModule::shutdown(ShutdownStage,dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<CellularCertModule::shutdown(ShutdownStage,dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)size_t v8 = 0;
    _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Send request to shutdown test", v8, 2u);
  }
  CellularCertClient::shutdownTest(*(CellularCertClient **)(v3 + 184), (uint64_t)v8);
  xpc_release(object);
  size_t v5 = v2[1];
  if (v5)
  {
    dispatch_group_leave(v5);
    uint64_t v6 = v2[1];
    if (v6) {
      dispatch_release(v6);
    }
  }
  operator delete(v2);
  uint64_t v7 = (std::__shared_weak_count *)a1[2];
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  operator delete(a1);
}

void sub_1C5B4FD80(_Unwind_Exception *a1)
{
  uint64_t v4 = v2[1];
  if (v4)
  {
    dispatch_group_leave(v4);
    size_t v5 = v2[1];
    if (v5) {
      dispatch_release(v5);
    }
  }
  operator delete(v2);
  uint64_t v6 = (std::__shared_weak_count *)v1[2];
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<CellularCertModule>::execute_wrapped<CellularCertModule::initialize(dispatch::group_session)::$_0>(CellularCertModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CellularCertModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<CellularCertModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *(uint64_t **)a1;
  uint64_t v3 = **(void **)a1;
  uint64_t v4 = abm::kCommandCellularCertBootstrap;
  size_t v5 = strlen(abm::kCommandCellularCertBootstrap);
  if (v5 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    uint64_t v43 = v6;
    unint64_t v44 = v9 | 0x8000000000000000;
    unint64_t __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v44) = v5;
  p_dst = (void **)&__dst;
  if (v5) {
LABEL_8:
  }
    memmove(p_dst, v4, v6);
  *((unsigned char *)p_dst + v6) = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZZN18CellularCertModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_34_2;
  aBlock[4] = v3;
  void aBlock[5] = v2[2];
  uint64_t v10 = (std::__shared_weak_count *)v2[3];
  uint64_t v51 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = _Block_copy(aBlock);
  uint64_t v52 = v11;
  Service::registerCommandHandler(v3, (uint64_t)&__dst, &v52);
  if (v11) {
    _Block_release(v11);
  }
  if (SHIBYTE(v44) < 0) {
    operator delete(__dst);
  }
  uint64_t v12 = abm::kCommandCellularCertShutdown;
  size_t v13 = strlen(abm::kCommandCellularCertShutdown);
  if (v13 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v14 = v13;
  if (v13 >= 0x17)
  {
    uint64_t v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v16 = v13 | 7;
    }
    uint64_t v17 = v16 + 1;
    p_p = operator new(v16 + 1);
    uint64_t v33 = v14;
    unint64_t v34 = v17 | 0x8000000000000000;
    std::string __p = p_p;
    goto LABEL_22;
  }
  HIBYTE(v34) = v13;
  p_p = &__p;
  if (v13) {
LABEL_22:
  }
    memmove(p_p, v12, v14);
  *((unsigned char *)p_p + v14) = 0;
  unint64_t __dst = (void **)MEMORY[0x1E4F143A8];
  uint64_t v43 = 1174405120;
  unint64_t v44 = (unint64_t)___ZZN18CellularCertModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_35;
  int v45 = &__block_descriptor_tmp_38_4;
  uint64_t v46 = v3;
  uint64_t v47 = v2[2];
  uint64_t v18 = (std::__shared_weak_count *)v2[3];
  size_t v48 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  int v19 = _Block_copy(&__dst);
  uint64_t v49 = v19;
  Service::registerCommandHandler(v3, (uint64_t)&__p, &v49);
  if (v19) {
    _Block_release(v19);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(__p);
  }
  dispatch_object_t v20 = abm::kCommandCellularCertConfigure;
  size_t v21 = strlen(abm::kCommandCellularCertConfigure);
  if (v21 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v22 = (void *)v21;
  if (v21 >= 0x17)
  {
    uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v24 = v21 | 7;
    }
    uint64_t v25 = v24 + 1;
    long long v23 = operator new(v24 + 1);
    v40[1] = v22;
    unint64_t v41 = v25 | 0x8000000000000000;
    v40[0] = v23;
    goto LABEL_36;
  }
  HIBYTE(v41) = v21;
  long long v23 = v40;
  if (v21) {
LABEL_36:
  }
    memmove(v23, v20, (size_t)v22);
  *((unsigned char *)v22 + (void)v23) = 0;
  std::string __p = (void *)MEMORY[0x1E4F143A8];
  uint64_t v33 = 1174405120;
  unint64_t v34 = (unint64_t)___ZZN18CellularCertModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_39;
  size_t v35 = &__block_descriptor_tmp_42_3;
  uint64_t v36 = v3;
  uint64_t v37 = v2[2];
  size_t v26 = (std::__shared_weak_count *)v2[3];
  uint64_t v38 = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v27 = _Block_copy(&__p);
  int v39 = v27;
  Service::registerCommandHandler(v3, (uint64_t)v40, &v39);
  if (v27) {
    _Block_release(v27);
  }
  if (SHIBYTE(v41) < 0) {
    operator delete(v40[0]);
  }
  if (v38) {
    std::__shared_weak_count::__release_weak(v38);
  }
  if (v48) {
    std::__shared_weak_count::__release_weak(v48);
  }
  if (v51) {
    std::__shared_weak_count::__release_weak(v51);
  }
  xpc_object_t v28 = (std::__shared_weak_count *)v2[3];
  if (v28) {
    std::__shared_weak_count::__release_weak(v28);
  }
  uint64_t v29 = v2[1];
  if (v29)
  {
    dispatch_group_leave(v29);
    xpc_object_t v30 = v2[1];
    if (v30) {
      dispatch_release(v30);
    }
  }
  operator delete(v2);
  uint64_t v31 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  operator delete(a1);
}

void sub_1C5B5027C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,std::__shared_weak_count *a44)
{
  if (v46) {
    _Block_release(v46);
  }
  if (a19)
  {
    std::__shared_weak_count::__release_weak(a19);
    if ((a26 & 0x80000000) == 0)
    {
LABEL_5:
      size_t v48 = a36;
      if (!a36)
      {
LABEL_10:
        if (a44) {
          std::__shared_weak_count::__release_weak(a44);
        }
        uint64_t v49 = (std::__shared_weak_count *)v45[3];
        if (v49) {
          std::__shared_weak_count::__release_weak(v49);
        }
        unint64_t v50 = v45[1];
        if (v50)
        {
          dispatch_group_leave(v50);
          uint64_t v51 = v45[1];
          if (v51) {
            dispatch_release(v51);
          }
        }
        operator delete(v45);
        uint64_t v52 = (std::__shared_weak_count *)v44[2];
        if (v52)
        {
          if (!atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        operator delete(v44);
        _Unwind_Resume(a1);
      }
LABEL_9:
      std::__shared_weak_count::__release_weak(v48);
      goto LABEL_10;
    }
  }
  else if ((a26 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  size_t v48 = a36;
  if (!a36) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZZN18CellularCertModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke(void *a1, uint64_t a2, const void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = a1[4];
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = (void *)a1[5];
      if (!v9) {
        goto LABEL_19;
      }
      if (*a3)
      {
        uint64_t v10 = _Block_copy(*a3);
        uint64_t v11 = (std::__shared_weak_count *)v9[16];
        if (!v11) {
LABEL_16:
        }
          std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      else
      {
        uint64_t v10 = 0;
        uint64_t v11 = (std::__shared_weak_count *)v9[16];
        if (!v11) {
          goto LABEL_16;
        }
      }
      uint64_t v12 = v9[15];
      size_t v13 = std::__shared_weak_count::lock(v11);
      if (!v13) {
        goto LABEL_16;
      }
      size_t v14 = v13;
      size_t v15 = operator new(0x10uLL);
      void *v15 = v6;
      v15[1] = v10;
      uint64_t v16 = v9[17];
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v17 = operator new(0x18uLL);
      void *v17 = v15;
      v17[1] = v12;
      dispatch_object_t v17[2] = v14;
      dispatch_async_f(v16, v17, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI18CellularCertModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
      if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          return;
        }
      }
      else
      {
LABEL_19:
        if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          return;
        }
      }
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void ___ZZN18CellularCertModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_35(void *a1, uint64_t a2, const void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = a1[4];
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = (void *)a1[5];
      if (!v9) {
        goto LABEL_19;
      }
      if (*a3)
      {
        uint64_t v10 = _Block_copy(*a3);
        uint64_t v11 = (std::__shared_weak_count *)v9[16];
        if (!v11) {
LABEL_16:
        }
          std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      else
      {
        uint64_t v10 = 0;
        uint64_t v11 = (std::__shared_weak_count *)v9[16];
        if (!v11) {
          goto LABEL_16;
        }
      }
      uint64_t v12 = v9[15];
      size_t v13 = std::__shared_weak_count::lock(v11);
      if (!v13) {
        goto LABEL_16;
      }
      size_t v14 = v13;
      size_t v15 = operator new(0x10uLL);
      void *v15 = v6;
      v15[1] = v10;
      uint64_t v16 = v9[17];
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v17 = operator new(0x18uLL);
      void *v17 = v15;
      v17[1] = v12;
      dispatch_object_t v17[2] = v14;
      dispatch_async_f(v16, v17, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI18CellularCertModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb0_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
      if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          return;
        }
      }
      else
      {
LABEL_19:
        if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          return;
        }
      }
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void ___ZZN18CellularCertModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_39(void *a1, xpc_object_t *a2, const void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  uint64_t v10 = (void *)a1[5];
  if (v10)
  {
    xpc_object_t v11 = *a2;
    if (v11)
    {
      xpc_retain(v11);
      uint64_t v12 = *a3;
      if (*a3) {
        goto LABEL_6;
      }
    }
    else
    {
      xpc_object_t v11 = xpc_null_create();
      uint64_t v12 = *a3;
      if (*a3)
      {
LABEL_6:
        size_t v13 = _Block_copy(v12);
        size_t v14 = (std::__shared_weak_count *)v10[16];
        if (!v14) {
LABEL_19:
        }
          std::__throw_bad_weak_ptr[abi:ne180100]();
        goto LABEL_10;
      }
    }
    size_t v13 = 0;
    size_t v14 = (std::__shared_weak_count *)v10[16];
    if (!v14) {
      goto LABEL_19;
    }
LABEL_10:
    uint64_t v15 = v10[15];
    uint64_t v16 = std::__shared_weak_count::lock(v14);
    if (!v16) {
      goto LABEL_19;
    }
    uint64_t v17 = v16;
    uint64_t v18 = operator new(0x18uLL);
    *uint64_t v18 = v7;
    v18[1] = v11;
    xpc_object_t v19 = xpc_null_create();
    v18[2] = v13;
    dispatch_object_t v20 = v10[17];
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    size_t v21 = operator new(0x18uLL);
    *size_t v21 = v18;
    v21[1] = v15;
    v21[2] = v17;
    dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI18CellularCertModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb1_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    xpc_release(v19);
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI18CellularCertModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  uint64_t v4 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v8[0]) = 0;
    _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Send request to initialize test", (uint8_t *)v8, 2u);
  }
  CellularCertClient::bootstrapTest(*(CellularCertClient **)(v3 + 184), (uint64_t)&v9);
  size_t v5 = (const void **)(v2 + 1);
  if ((_BYTE)v9) {
    unsigned int v6 = 0;
  }
  else {
    unsigned int v6 = -534716416;
  }
  v8[0] = v6;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v2 + 1, v8, &object);
  xpc_release(object);
  if (*v5) {
    _Block_release(*v5);
  }
  operator delete(v2);
  uint64_t v7 = (std::__shared_weak_count *)a1[2];
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  operator delete(a1);
}

void sub_1C5B50A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  xpc_release(object);
  uint64_t v15 = (const void *)v13[1];
  if (v15) {
    _Block_release(v15);
  }
  operator delete(v13);
  uint64_t v16 = (std::__shared_weak_count *)v12[2];
  if (v16)
  {
    if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  operator delete(v12);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI18CellularCertModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb0_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  uint64_t v4 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v8[0]) = 0;
    _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Send request to shutdown test", (uint8_t *)v8, 2u);
  }
  CellularCertClient::shutdownTest(*(CellularCertClient **)(v3 + 184), (uint64_t)&v9);
  size_t v5 = (const void **)(v2 + 1);
  if ((_BYTE)v9) {
    unsigned int v6 = 0;
  }
  else {
    unsigned int v6 = -534716416;
  }
  v8[0] = v6;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v2 + 1, v8, &object);
  xpc_release(object);
  if (*v5) {
    _Block_release(*v5);
  }
  operator delete(v2);
  uint64_t v7 = (std::__shared_weak_count *)a1[2];
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  operator delete(a1);
}

void sub_1C5B50BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  xpc_release(object);
  uint64_t v15 = (const void *)v13[1];
  if (v15) {
    _Block_release(v15);
  }
  operator delete(v13);
  uint64_t v16 = (std::__shared_weak_count *)v12[2];
  if (v16)
  {
    if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  operator delete(v12);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI18CellularCertModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb1_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t v2 = *(uint64_t **)a1;
  uint64_t v3 = **(void **)a1;
  unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = (xpc_object_t)v2[1];
  xpc_object_t v9 = v4;
  if (v4)
  {
    xpc_retain(v4);
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v9 = v4;
  }
  CellularCertModule::configureTest_sync(v3, &v9, (uint64_t)&v10);
  xpc_release(v4);
  xpc_object_t v9 = 0;
  size_t v5 = (const void **)(v2 + 2);
  if ((_BYTE)v10) {
    unsigned int v6 = 0;
  }
  else {
    unsigned int v6 = -534716416;
  }
  unsigned int v8 = v6;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v2 + 2, &v8, &object);
  xpc_release(object);
  if (*v5) {
    _Block_release(*v5);
  }
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  operator delete(a1);
}

void sub_1C5B50DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  xpc_release(object);
  uint64_t v15 = *(const void **)(v13 + 16);
  if (v15) {
    _Block_release(v15);
  }
  xpc_release(*(xpc_object_t *)(v13 + 8));
  operator delete((void *)v13);
  uint64_t v16 = (std::__shared_weak_count *)v12[2];
  if (v16)
  {
    if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  operator delete(v12);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<CellularCertModule>::execute_wrapped<CellularCertModule::start(dispatch::group_session)::$_0>(CellularCertModule::start(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CellularCertModule::start(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<CellularCertModule::start(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (std::__shared_weak_count *)(*a1)[3];
  if (!v3) {
    goto LABEL_82;
  }
  uint64_t v4 = *v2;
  size_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    goto LABEL_82;
  }
  unsigned int v6 = v5;
  if (v2[2])
  {
    uint64_t v7 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    size_t v8 = strlen(v7);
    if (v8 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    xpc_object_t v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17) {
        uint64_t v11 = v8 | 7;
      }
      uint64_t v12 = v11 + 1;
      unint64_t v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      unint64_t v72 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v72) = v8;
      unint64_t v10 = __dst;
      if (!v8) {
        goto LABEL_12;
      }
    }
    memmove(v10, v7, (size_t)v9);
LABEL_12:
    *((unsigned char *)v9 + (void)v10) = 0;
    long long v70 = 0;
    AppleBasebandManager::create();
    long long v13 = aBlock;
    long long aBlock = 0uLL;
    size_t v14 = *(std::__shared_weak_count **)(v4 + 160);
    *(_OWORD *)(v4 + 152) = v13;
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      uint64_t v15 = (std::__shared_weak_count *)*((void *)&aBlock + 1);
      if (!*((void *)&aBlock + 1)) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v15 = (std::__shared_weak_count *)*((void *)&aBlock + 1);
      if (!*((void *)&aBlock + 1)) {
        goto LABEL_16;
      }
    }
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      uint64_t v16 = v70;
      if (!v70)
      {
LABEL_18:
        if (SHIBYTE(v72) < 0) {
          operator delete(__dst[0]);
        }
        uint64_t v17 = (const void *)*MEMORY[0x1E4F4CEF8];
        size_t v18 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
        if (v18 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        xpc_object_t v19 = (void *)v18;
        if (v18 >= 0x17)
        {
          uint64_t v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v18 | 7) != 0x17) {
            uint64_t v21 = v18 | 7;
          }
          uint64_t v22 = v21 + 1;
          dispatch_object_t v20 = (void **)operator new(v21 + 1);
          v68[1] = v19;
          unint64_t v69 = v22 | 0x8000000000000000;
          v68[0] = v20;
        }
        else
        {
          HIBYTE(v69) = v18;
          dispatch_object_t v20 = v68;
          if (!v18)
          {
LABEL_28:
            *((unsigned char *)v19 + (void)v20) = 0;
            *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
            *((void *)&aBlock + 1) = 1174405120;
            unint64_t v61 = ___ZZN18CellularCertModule5startEN8dispatch13group_sessionEENK3__0clEv_block_invoke;
            int v62 = &__block_descriptor_tmp_46_0;
            uint64_t v63 = v4;
            uint64_t v64 = v2[2];
            long long v23 = (std::__shared_weak_count *)v2[3];
            int v65 = v23;
            if (v23) {
              atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v24 = _Block_copy(&aBlock);
            uint64_t v25 = *(NSObject **)(v4 + 136);
            if (v25) {
              dispatch_retain(*(dispatch_object_t *)(v4 + 136));
            }
            uint64_t v66 = v24;
            dispatch_object_t v67 = v25;
            AppleBasebandManager::setEventHandler();
            if (v67) {
              dispatch_release(v67);
            }
            if (v66) {
              _Block_release(v66);
            }
            if (SHIBYTE(v69) < 0) {
              operator delete(v68[0]);
            }
            size_t v26 = (const void *)*MEMORY[0x1E4F4CD28];
            size_t v27 = strlen((const char *)*MEMORY[0x1E4F4CD28]);
            if (v27 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            xpc_object_t v28 = (void *)v27;
            if (v27 >= 0x17)
            {
              uint64_t v30 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v27 | 7) != 0x17) {
                uint64_t v30 = v27 | 7;
              }
              uint64_t v31 = v30 + 1;
              uint64_t v29 = operator new(v30 + 1);
              __p[1] = v28;
              unint64_t v59 = v31 | 0x8000000000000000;
              __p[0] = v29;
            }
            else
            {
              HIBYTE(v59) = v27;
              uint64_t v29 = __p;
              if (!v27)
              {
LABEL_46:
                *((unsigned char *)v28 + (void)v29) = 0;
                v54[0] = MEMORY[0x1E4F143A8];
                v54[1] = 1174405120;
                v54[2] = ___ZZN18CellularCertModule5startEN8dispatch13group_sessionEENK3__0clEv_block_invoke_47;
                v54[3] = &__block_descriptor_tmp_50_1;
                v54[4] = v4;
                v54[5] = v2[2];
                uint64_t v32 = (std::__shared_weak_count *)v2[3];
                size_t v55 = v32;
                if (v32) {
                  atomic_fetch_add_explicit(&v32->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                }
                uint64_t v33 = _Block_copy(v54);
                unint64_t v34 = *(NSObject **)(v4 + 136);
                if (v34) {
                  dispatch_retain(*(dispatch_object_t *)(v4 + 136));
                }
                int v56 = v33;
                dispatch_object_t object = v34;
                AppleBasebandManager::setEventHandler();
                if (object) {
                  dispatch_release(object);
                }
                if (v56) {
                  _Block_release(v56);
                }
                if (SHIBYTE(v59) < 0) {
                  operator delete(__p[0]);
                }
                size_t v35 = (const void *)*MEMORY[0x1E4F4CB10];
                size_t v36 = strlen((const char *)*MEMORY[0x1E4F4CB10]);
                if (v36 > 0x7FFFFFFFFFFFFFF7) {
                  std::string::__throw_length_error[abi:ne180100]();
                }
                uint64_t v37 = (void *)v36;
                if (v36 >= 0x17)
                {
                  uint64_t v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v36 | 7) != 0x17) {
                    uint64_t v39 = v36 | 7;
                  }
                  uint64_t v40 = v39 + 1;
                  uint64_t v38 = operator new(v39 + 1);
                  v52[1] = v37;
                  unint64_t v53 = v40 | 0x8000000000000000;
                  v52[0] = v38;
                }
                else
                {
                  HIBYTE(v53) = v36;
                  uint64_t v38 = v52;
                  if (!v36) {
                    goto LABEL_64;
                  }
                }
                memmove(v38, v35, (size_t)v37);
LABEL_64:
                *((unsigned char *)v37 + (void)v38) = 0;
                v48[0] = MEMORY[0x1E4F143A8];
                v48[1] = 1174405120;
                v48[2] = ___ZZN18CellularCertModule5startEN8dispatch13group_sessionEENK3__0clEv_block_invoke_51;
                v48[3] = &__block_descriptor_tmp_54_2;
                v48[4] = v4;
                v48[5] = v2[2];
                unint64_t v41 = (std::__shared_weak_count *)v2[3];
                uint64_t v49 = v41;
                if (v41) {
                  atomic_fetch_add_explicit(&v41->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                }
                int v42 = _Block_copy(v48);
                uint64_t v43 = *(NSObject **)(v4 + 136);
                if (v43) {
                  dispatch_retain(*(dispatch_object_t *)(v4 + 136));
                }
                unint64_t v50 = v42;
                dispatch_object_t v51 = v43;
                AppleBasebandManager::setEventHandler();
                if (v51) {
                  dispatch_release(v51);
                }
                if (v50) {
                  _Block_release(v50);
                }
                if (SHIBYTE(v53) < 0) {
                  operator delete(v52[0]);
                }
                AppleBasebandManager::eventsOn(*(AppleBasebandManager **)(v4 + 152));
                if (v49) {
                  std::__shared_weak_count::__release_weak(v49);
                }
                if (v55) {
                  std::__shared_weak_count::__release_weak(v55);
                }
                if (v65) {
                  std::__shared_weak_count::__release_weak(v65);
                }
                goto LABEL_80;
              }
            }
            memmove(v29, v26, (size_t)v28);
            goto LABEL_46;
          }
        }
        memmove(v20, v17, (size_t)v19);
        goto LABEL_28;
      }
LABEL_17:
      CFRelease(v16);
      goto LABEL_18;
    }
LABEL_16:
    uint64_t v16 = v70;
    if (!v70) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
LABEL_80:
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_82:
  unint64_t v44 = (std::__shared_weak_count *)v2[3];
  if (v44) {
    std::__shared_weak_count::__release_weak(v44);
  }
  int v45 = v2[1];
  if (v45)
  {
    dispatch_group_leave(v45);
    uint64_t v46 = v2[1];
    if (v46) {
      dispatch_release(v46);
    }
  }
  operator delete(v2);
  uint64_t v47 = (std::__shared_weak_count *)a1[2];
  if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
  operator delete(a1);
}

void sub_1C5B51520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, dispatch_object_t object, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,void *a31,dispatch_object_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (a30) {
    std::__shared_weak_count::__release_weak(a30);
  }
  if (a45) {
    std::__shared_weak_count::__release_weak(a45);
  }
  if (atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v49 = (std::__shared_weak_count *)v46[3];
    if (v49)
    {
LABEL_9:
      std::__shared_weak_count::__release_weak(v49);
      unint64_t v50 = v46[1];
      if (!v50) {
        goto LABEL_15;
      }
LABEL_13:
      dispatch_group_leave(v50);
      dispatch_object_t v51 = v46[1];
      if (v51) {
        dispatch_release(v51);
      }
LABEL_15:
      operator delete(v46);
      uint64_t v52 = (std::__shared_weak_count *)v45[2];
      if (v52)
      {
        if (!atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      operator delete(v45);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
    uint64_t v49 = (std::__shared_weak_count *)v46[3];
    if (v49) {
      goto LABEL_9;
    }
  }
  unint64_t v50 = v46[1];
  if (!v50) {
    goto LABEL_15;
  }
  goto LABEL_13;
}

void ___ZZN18CellularCertModule5startEN8dispatch13group_sessionEENK3__0clEv_block_invoke(void *a1, abm::client::Event **a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    unsigned int v6 = std::__shared_weak_count::lock(v3);
    uint64_t v17 = v6;
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[5])
      {
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        abm::client::Event::getData((uint64_t *)&cf, *a2);
        CFTypeRef v8 = cf;
        if (cf) {
          xpc_object_t v9 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
        }
        else {
          xpc_object_t v9 = 0;
        }
        if (v9)
        {
          v14[0] = 0xAAAAAAAAAAAAAAAALL;
          v14[1] = 0xAAAAAAAAAAAAAAAALL;
          ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v14, (const __CFDictionary *)cf);
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v13 = 0;
          ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v18, (const char *)*MEMORY[0x1E4F4C688]);
          ctu::cf::map_adapter::getString();
          MEMORY[0x1C8794290](&v18);
          *(_OWORD *)std::string __p = *(_OWORD *)buf;
          uint64_t v13 = v20;
          unint64_t v10 = *(NSObject **)(v5 + 88);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v11 = __p;
            if (v13 < 0) {
              uint64_t v11 = (void **)__p[0];
            }
            *(_DWORD *)long long buf = 136315138;
            *(void *)&uint8_t buf[4] = v11;
            _os_log_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_DEFAULT, "#I Boot state is %s", buf, 0xCu);
          }
          if (SHIBYTE(v13) < 0) {
            operator delete(__p[0]);
          }
          MEMORY[0x1C87942E0](v14);
          CFTypeRef v8 = cf;
        }
        if (v8) {
          CFRelease(v8);
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1C5B5191C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZZN18CellularCertModule5startEN8dispatch13group_sessionEENK3__0clEv_block_invoke_47(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        unsigned int v6 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v7 = 0;
          _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#I Reset Detected", v7, 2u);
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void ___ZZN18CellularCertModule5startEN8dispatch13group_sessionEENK3__0clEv_block_invoke_51(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        unsigned int v6 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v7 = 0;
          _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#I Dump state begin", v7, 2u);
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void dispatch::async<void ctu::SharedSynchronizable<CellularCertModule>::execute_wrapped<CellularCertModule::sleep(dispatch::group_session)::$_0>(CellularCertModule::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CellularCertModule::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<CellularCertModule::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (std::__shared_weak_count *)(*a1)[3];
  if (v3)
  {
    uint64_t v4 = *v2;
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      unsigned int v6 = v5;
      if (v2[2])
      {
        uint64_t v7 = *(NSObject **)(v4 + 88);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v12 = 0;
          _os_log_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_DEFAULT, "#I Sleep", v12, 2u);
        }
      }
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    CFTypeRef v8 = (std::__shared_weak_count *)v2[3];
    if (v8) {
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  xpc_object_t v9 = v2[1];
  if (v9)
  {
    dispatch_group_leave(v9);
    unint64_t v10 = v2[1];
    if (v10) {
      dispatch_release(v10);
    }
  }
  operator delete(v2);
  uint64_t v11 = (std::__shared_weak_count *)a1[2];
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<CellularCertModule>::execute_wrapped<CellularCertModule::wake(dispatch::group_session)::$_0>(CellularCertModule::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CellularCertModule::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<CellularCertModule::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (std::__shared_weak_count *)(*a1)[3];
  if (v3)
  {
    uint64_t v4 = *v2;
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      unsigned int v6 = v5;
      if (v2[2])
      {
        uint64_t v7 = *(NSObject **)(v4 + 88);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v12 = 0;
          _os_log_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_DEFAULT, "#I Wake", v12, 2u);
        }
      }
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    CFTypeRef v8 = (std::__shared_weak_count *)v2[3];
    if (v8) {
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  xpc_object_t v9 = v2[1];
  if (v9)
  {
    dispatch_group_leave(v9);
    unint64_t v10 = v2[1];
    if (v10) {
      dispatch_release(v10);
    }
  }
  operator delete(v2);
  uint64_t v11 = (std::__shared_weak_count *)a1[2];
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(a1);
}

uint64_t __cxx_global_var_init_3_0()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

const char *IOKitAccessoriesDelegate::getName(IOKitAccessoriesDelegate *this)
{
  return "IOKitAccessories.delegate";
}

uint64_t IOKitAccessoriesDelegate::create@<X0>(void *a1@<X0>, NSObject **a2@<X1>, std::__shared_weak_count_vtbl **a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  unsigned int v6 = (std::__shared_weak_count_vtbl *)operator new(0xB8uLL);
  uint64_t v7 = a1[3];
  if (!v7) {
    goto LABEL_4;
  }
  if ((void *)v7 != a1)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
LABEL_4:
    xpc_object_t v19 = (void *)v7;
    goto LABEL_6;
  }
  xpc_object_t v19 = v18;
  (*(void (**)(void *, void *))(*a1 + 24))(a1, v18);
LABEL_6:
  CFTypeRef v8 = *a2;
  uint64_t v15 = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  IOKitAccessoriesDelegate::IOKitAccessoriesDelegate((uint64_t)v6, v18, &v15);
  uint64_t v11 = (std::__shared_weak_count *)operator new(0x20uLL);
  v11->__shared_owners_ = 0;
  p_shared_owners = &v11->__shared_owners_;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210EF08;
  v11->__shared_weak_owners_ = 0;
  v11[1].__vftable = v6;
  on_zero_shared = (std::__shared_weak_count *)v6->__on_zero_shared;
  if (!on_zero_shared)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
    v6->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (on_zero_shared->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
    v6->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
    std::__shared_weak_count::__release_weak(on_zero_shared);
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_13:
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
LABEL_14:
  uint64_t v16 = v6;
  uint64_t v17 = v11;
  if (v8) {
    dispatch_release(v8);
  }
  if (v19 == v18)
  {
    (*(void (**)(void *))(v18[0] + 32))(v18);
  }
  else if (v19)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*v19 + 40))(v19, v9, v10);
  }
  uint64_t result = (*((uint64_t (**)(std::__shared_weak_count_vtbl *))v6->~__shared_weak_count + 7))(v6);
  *a3 = v6;
  a3[1] = (std::__shared_weak_count_vtbl *)v11;
  return result;
}

void sub_1C5B5209C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  operator delete(v12);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t IOKitAccessoriesDelegate::IOKitAccessoriesDelegate(uint64_t a1, void *a2, NSObject **a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1F210EE40;
  uint64_t v5 = (void *)a2[3];
  if (v5)
  {
    if (v5 == a2)
    {
      xpc_object_t v19 = v18;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v18);
    }
    else
    {
      xpc_object_t v19 = (void *)(*(uint64_t (**)(void *))(*v5 + 16))(v5);
    }
  }
  else
  {
    xpc_object_t v19 = 0;
  }
  unsigned int v6 = *a3;
  uint64_t v16 = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  uint64_t v7 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  AccessoriesDelegateBase::AccessoriesDelegateBase(a1, (uint64_t)v18, &v16, v7);
  if (v6) {
    dispatch_release(v6);
  }
  if (v19 == v18)
  {
    (*(void (**)(void *))(v18[0] + 32))(v18);
  }
  else if (v19)
  {
    (*(void (**)(void))(*v19 + 40))();
  }
  *(void *)a1 = &unk_1F210EE40;
  GetABMLogServer(&v14);
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  if (!off_1EBBDC878)
  {
    ABMServer::create_default_global(&v17);
    long long v8 = v17;
    long long v17 = 0uLL;
    uint64_t v9 = (std::__shared_weak_count *)*(&off_1EBBDC878 + 1);
    off_1EBBDC878 = v8;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    uint64_t v10 = (std::__shared_weak_count *)*((void *)&v17 + 1);
    if (*((void *)&v17 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  uint64_t v11 = (std::__shared_weak_count *)*(&off_1EBBDC878 + 1);
  if (*(&off_1EBBDC878 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDC878 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  ctu::iokit::Controller::create();
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = v15;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 176) = 1065353216;
  return a1;
}

void sub_1C5B524B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  AccessoriesDelegateBase::~AccessoriesDelegateBase(v4);
  _Unwind_Resume(a1);
}

void sub_1C5B52510(_Unwind_Exception *a1)
{
  AccessoriesDelegateBase::~AccessoriesDelegateBase(v1);
  _Unwind_Resume(a1);
}

void sub_1C5B52524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  xpc_object_t v19 = v18;
  if (v19) {
    dispatch_release(v19);
  }
  std::function<void ()(ctu::cf::CFSharedRef<__CFError>,std::vector<abm::AccessoryInfo>)>::~function(&a18);
  _Unwind_Resume(a1);
}

void IOKitAccessoriesDelegate::~IOKitAccessoriesDelegate(IOKitAccessoriesDelegate *this)
{
  *(void *)this = &unk_1F210EE40;
  uint64_t v2 = (void *)*((void *)this + 20);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)*((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 15);
  if (v5)
  {
    do
    {
      unsigned int v6 = (void *)*v5;
      operator delete(v5);
      uint64_t v5 = v6;
    }
    while (v6);
  }
  uint64_t v7 = (void *)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v7) {
    operator delete(v7);
  }
  long long v8 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    uint64_t v9 = this;
  }
  else
  {
    uint64_t v9 = this;
  }
  AccessoriesDelegateBase::~AccessoriesDelegateBase(v9);
}

{
  void *v1;
  uint64_t vars8;

  IOKitAccessoriesDelegate::~IOKitAccessoriesDelegate(this);

  operator delete(v1);
}

void IOKitAccessoriesDelegate::init(IOKitAccessoriesDelegate *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___ZN24IOKitAccessoriesDelegate4initEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_16;
  v1[4] = this;
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

double ___ZN24IOKitAccessoriesDelegate4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32) + 104;
  int v7 = 2;
  uint64_t v2 = std::__hash_table<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::__unordered_map_hasher<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::__unordered_map_equal<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::allocator<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>>>::__emplace_unique_key_args<ctu::iokit::TelephonyIOKitPowerSource,std::piecewise_construct_t const&,std::tuple<ctu::iokit::TelephonyIOKitPowerSource&&>,std::tuple<>>(v1, 2u, &v7);
  *(void *)((char *)v2 + 20) = 0x2000000000004;
  *((_DWORD *)v2 + 7) = 0x10000;
  int v7 = 8;
  uint64_t v3 = std::__hash_table<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::__unordered_map_hasher<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::__unordered_map_equal<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::allocator<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>>>::__emplace_unique_key_args<ctu::iokit::TelephonyIOKitPowerSource,std::piecewise_construct_t const&,std::tuple<ctu::iokit::TelephonyIOKitPowerSource&&>,std::tuple<>>(v1, 8u, &v7);
  *(void *)((char *)v3 + 20) = 0x3000000000000;
  *((_DWORD *)v3 + 7) = 0;
  int v7 = 4;
  uint64_t v4 = std::__hash_table<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::__unordered_map_hasher<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::__unordered_map_equal<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::allocator<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>>>::__emplace_unique_key_args<ctu::iokit::TelephonyIOKitPowerSource,std::piecewise_construct_t const&,std::tuple<ctu::iokit::TelephonyIOKitPowerSource&&>,std::tuple<>>(v1, 4u, &v7);
  *(void *)((char *)v4 + 20) = 0x300000000000FLL;
  *((_DWORD *)v4 + 7) = 0;
  int v7 = 32;
  uint64_t v5 = std::__hash_table<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::__unordered_map_hasher<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::__unordered_map_equal<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::allocator<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>>>::__emplace_unique_key_args<ctu::iokit::TelephonyIOKitPowerSource,std::piecewise_construct_t const&,std::tuple<ctu::iokit::TelephonyIOKitPowerSource&&>,std::tuple<>>(v1, 0x20u, &v7);
  *(void *)&double result = 0x3000000000010;
  *(void *)((char *)v5 + 20) = 0x3000000000010;
  *((_DWORD *)v5 + 7) = 0;
  return result;
}

void IOKitAccessoriesDelegate::start(IOKitAccessoriesDelegate *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___ZN24IOKitAccessoriesDelegate5startEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_12;
  v1[4] = this;
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

void ___ZN24IOKitAccessoriesDelegate5startEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(NSObject **)(v1 + 40);
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Already started", buf, 2u);
    }
  }
  else
  {
    if (v4)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Starting", buf, 2u);
    }
    *(unsigned char *)(v1 + 80) = 1;
    uint64_t v5 = *(std::__shared_weak_count **)(v1 + 16);
    if (!v5 || (v6 = *(void *)(v1 + 8), (int v7 = std::__shared_weak_count::lock(v5)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    long long v8 = v7;
    p_shared_weak_owners = &v7->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v8);
    }
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN24IOKitAccessoriesDelegate5startEv_block_invoke_2;
    aBlock[3] = &__block_descriptor_tmp_5_13;
    aBlock[4] = v1;
    void aBlock[5] = v6;
    uint64_t v20 = v8;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    uint64_t v10 = (capabilities::abs *)_Block_copy(aBlock);
    uint64_t v11 = *(NSObject **)(v1 + 24);
    if (v11) {
      dispatch_retain(*(dispatch_object_t *)(v1 + 24));
    }
    uint64_t v21 = v10;
    dispatch_object_t v22 = v11;
    ctu::iokit::Controller::setPowerSourceCallback();
    if (v22) {
      dispatch_release(v22);
    }
    uint64_t v12 = v21;
    if (v21) {
      _Block_release(v21);
    }
    if (capabilities::abs::supportsDisplayCoverAccessory(v12))
    {
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 1174405120;
      v15[2] = ___ZN24IOKitAccessoriesDelegate5startEv_block_invoke_6;
      v15[3] = &__block_descriptor_tmp_11_3;
      v15[4] = v1;
      v15[5] = v6;
      uint64_t v16 = v8;
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v13 = _Block_copy(v15);
      uint64_t v14 = *(NSObject **)(v1 + 24);
      if (v14) {
        dispatch_retain(*(dispatch_object_t *)(v1 + 24));
      }
      long long v17 = v13;
      dispatch_object_t object = v14;
      ctu::iokit::Controller::registerForDisplayCoverStateChanged();
      if (object) {
        dispatch_release(object);
      }
      if (v17) {
        _Block_release(v17);
      }
      if (v16) {
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if (v20) {
      std::__shared_weak_count::__release_weak(v20);
    }
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_1C5B52AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitDisplayCoverState)>::~callback((uint64_t)&a16);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    size_t v26 = a24;
    if (!a24)
    {
LABEL_3:
      std::__shared_weak_count::__release_weak(v24);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    size_t v26 = a24;
    if (!a24) {
      goto LABEL_3;
    }
  }
  std::__shared_weak_count::__release_weak(v26);
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void ___ZN24IOKitAccessoriesDelegate5startEv_block_invoke_2(void *a1, int a2)
{
  uint64_t v158 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v4 = a1[4];
  uint64_t v5 = std::__shared_weak_count::lock(v3);
  uint64_t v155 = v5;
  if (!v5) {
    return;
  }
  if (!a1[5])
  {
    size_t v48 = v5;
    goto LABEL_287;
  }
  CFTypeRef v153 = 0;
  uint64_t v6 = *(uint64_t **)(v4 + 120);
  if (v6)
  {
    char v7 = 0;
    __int16 v8 = 0;
    __int16 v125 = 0;
    __int16 v9 = 0;
    __int16 v10 = 0;
    __int16 v11 = 0;
    uint64_t v12 = (uint64_t *)(v4 + 144);
    unsigned int v122 = (void *)(v4 + 160);
    __int16 v124 = -1;
    while (1)
    {
      unint64_t v13 = *((unsigned int *)v6 + 4);
      if ((v13 & a2) != 0) {
        break;
      }
LABEL_7:
      uint64_t v6 = (uint64_t *)*v6;
      if (!v6) {
        goto LABEL_105;
      }
    }
    int8x8_t v14 = *(int8x8_t *)(v4 + 152);
    if (v14)
    {
      uint8x8_t v15 = (uint8x8_t)vcnt_s8(v14);
      v15.i16[0] = vaddlv_u8(v15);
      if (v15.u32[0] > 1uLL)
      {
        unint64_t v16 = *((unsigned int *)v6 + 4);
        if (*(void *)&v14 <= v13) {
          unint64_t v16 = v13 % *(void *)&v14;
        }
      }
      else
      {
        unint64_t v16 = (v14.i32[0] - 1) & v13;
      }
      long long v17 = *(uint64_t ***)(*v12 + 8 * v16);
      if (v17)
      {
        uint64_t v18 = *v17;
        if (v18)
        {
          if (v15.u32[0] < 2uLL)
          {
            uint64_t v19 = *(void *)&v14 - 1;
            while (1)
            {
              uint64_t v21 = v18[1];
              if (v21 == v13)
              {
                if (*((_DWORD *)v18 + 4) == v13) {
                  goto LABEL_6;
                }
              }
              else if ((v21 & v19) != v16)
              {
                goto LABEL_30;
              }
              uint64_t v18 = (uint64_t *)*v18;
              if (!v18) {
                goto LABEL_30;
              }
            }
          }
          do
          {
            unint64_t v20 = v18[1];
            if (v20 == v13)
            {
              if (*((_DWORD *)v18 + 4) == v13) {
                goto LABEL_6;
              }
            }
            else
            {
              if (v20 >= *(void *)&v14) {
                v20 %= *(void *)&v14;
              }
              if (v20 != v16) {
                break;
              }
            }
            uint64_t v18 = (uint64_t *)*v18;
          }
          while (v18);
        }
      }
    }
LABEL_30:
    dispatch_object_t v22 = *(NSObject **)(v4 + 40);
    BOOL v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
    if (v23)
    {
      ctu::iokit::asString();
      uint64_t v24 = __p;
      if (SBYTE7(v133) < 0) {
        uint64_t v24 = (void **)__p[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
      _os_log_impl(&dword_1C59C6000, v22, OS_LOG_TYPE_DEFAULT, "#I Power Source attached: %s", (uint8_t *)&buf, 0xCu);
      if (SBYTE7(v133) < 0) {
        operator delete(__p[0]);
      }
    }
    __int16 v124 = *((_WORD *)v6 + 10);
    __int16 v125 = *((_WORD *)v6 + 12);
    __int16 v9 = *((_WORD *)v6 + 13);
    __int16 v10 = *((_WORD *)v6 + 14);
    capabilities::abs::supportedSARFeatures((capabilities::abs *)v23);
    if (capabilities::abs::operator&()) {
      __int16 v25 = 2;
    }
    else {
      __int16 v25 = 1;
    }
    unint64_t v26 = *((unsigned int *)v6 + 4);
    unint64_t v27 = *(void *)(v4 + 152);
    if (v27)
    {
      uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v27);
      v28.i16[0] = vaddlv_u8(v28);
      if (v28.u32[0] > 1uLL)
      {
        unint64_t v29 = *((unsigned int *)v6 + 4);
        if (v27 <= v26) {
          unint64_t v29 = v26 % v27;
        }
      }
      else
      {
        unint64_t v29 = (v27 - 1) & v26;
      }
      uint64_t v30 = *(void ***)(*v12 + 8 * v29);
      if (v30)
      {
        uint64_t v31 = *v30;
        if (*v30)
        {
          if (v28.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v33 = v31[1];
              if (v33 == v26)
              {
                if (*((_DWORD *)v31 + 4) == v26) {
                  goto LABEL_97;
                }
              }
              else if ((v33 & (v27 - 1)) != v29)
              {
                goto LABEL_59;
              }
              uint64_t v31 = (void *)*v31;
              if (!v31) {
                goto LABEL_59;
              }
            }
          }
          do
          {
            unint64_t v32 = v31[1];
            if (v32 == v26)
            {
              if (*((_DWORD *)v31 + 4) == v26) {
                goto LABEL_97;
              }
            }
            else
            {
              if (v32 >= v27) {
                v32 %= v27;
              }
              if (v32 != v29) {
                break;
              }
            }
            uint64_t v31 = (void *)*v31;
          }
          while (v31);
        }
      }
    }
    else
    {
      unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
    }
LABEL_59:
    uint64_t v31 = operator new(0x20uLL);
    void *v31 = 0;
    v31[1] = v26;
    *((_DWORD *)v31 + 4) = *((_DWORD *)v6 + 4);
    *((_WORD *)v31 + 10) = -1;
    *(void *)((char *)v31 + 22) = 0;
    *((_WORD *)v31 + 15) = 0;
    float v34 = (float)(unint64_t)(*(void *)(v4 + 168) + 1);
    float v35 = *(float *)(v4 + 176);
    if (v27 && (float)(v35 * (float)v27) >= v34)
    {
      unint64_t v26 = v29;
    }
    else
    {
      BOOL v36 = (v27 & (v27 - 1)) != 0;
      if (v27 < 3) {
        BOOL v36 = 1;
      }
      unint64_t v37 = v36 | (2 * v27);
      unint64_t v38 = vcvtps_u32_f32(v34 / v35);
      if (v37 <= v38) {
        size_t prime = v38;
      }
      else {
        size_t prime = v37;
      }
      if (prime == 1)
      {
        size_t prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        size_t prime = std::__next_prime(prime);
        unint64_t v27 = *(void *)(v4 + 152);
      }
      if (prime > v27) {
        goto LABEL_72;
      }
      if (prime < v27)
      {
        unint64_t v40 = vcvtps_u32_f32((float)*(unint64_t *)(v4 + 168) / *(float *)(v4 + 176));
        if (v27 < 3 || (uint8x8_t v41 = (uint8x8_t)vcnt_s8((int8x8_t)v27), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
        {
          unint64_t v40 = std::__next_prime(v40);
        }
        else
        {
          uint64_t v42 = 1 << -(char)__clz(v40 - 1);
          if (v40 >= 2) {
            unint64_t v40 = v42;
          }
        }
        if (prime <= v40) {
          size_t prime = v40;
        }
        if (prime < v27) {
LABEL_72:
        }
          std::__hash_table<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::__unordered_map_hasher<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::__unordered_map_equal<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::allocator<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>>>::__do_rehash<true>(v4 + 144, prime);
      }
      unint64_t v27 = *(void *)(v4 + 152);
      if ((v27 & (v27 - 1)) != 0)
      {
        if (v27 <= v26) {
          v26 %= v27;
        }
      }
      else
      {
        unint64_t v26 = (v27 - 1) & v26;
      }
    }
    uint64_t v43 = *v12;
    unint64_t v44 = *(void **)(*v12 + 8 * v26);
    if (v44)
    {
      void *v31 = *v44;
    }
    else
    {
      void *v31 = *v122;
      *unsigned int v122 = v31;
      *(void *)(v43 + 8 * v26) = v122;
      if (!*v31)
      {
LABEL_96:
        ++*(void *)(v4 + 168);
LABEL_97:
        *((_WORD *)v31 + 10) = v124;
        __int16 v8 = 2;
        *((_WORD *)v31 + 11) = 2;
        *((_WORD *)v31 + 12) = v125;
        *((_WORD *)v31 + 13) = v9;
        *((_WORD *)v31 + 14) = v10;
        __int16 v11 = v25;
        *((_WORD *)v31 + 15) = v25;
        uint64_t v46 = *(void *)(v4 + 72);
        if (v46)
        {
          v151 = 0;
          CFTypeRef v152 = 0;
          v149 = 0;
          v150 = 0;
          uint64_t v47 = operator new(0xCuLL);
          v150 = v47 + 6;
          v151 = v47 + 6;
          *uint64_t v47 = v124;
          v47[1] = 2;
          v47[2] = v125;
          v47[3] = v9;
          v47[4] = v10;
          void v47[5] = v25;
          v149 = v47;
          (*(void (**)(uint64_t, CFTypeRef *, void **))(*(void *)v46 + 48))(v46, &v152, &v149);
          if (v149)
          {
            v150 = v149;
            operator delete(v149);
          }
          if (v152) {
            CFRelease(v152);
          }
          char v7 = 1;
          __int16 v8 = 2;
        }
        else
        {
LABEL_6:
          char v7 = 1;
        }
        goto LABEL_7;
      }
      unint64_t v45 = *(void *)(*v31 + 8);
      if ((v27 & (v27 - 1)) != 0)
      {
        if (v45 >= v27) {
          v45 %= v27;
        }
      }
      else
      {
        v45 &= v27 - 1;
      }
      unint64_t v44 = (void *)(*v12 + 8 * v45);
    }
    *unint64_t v44 = v31;
    goto LABEL_96;
  }
  __int16 v11 = 0;
  __int16 v10 = 0;
  __int16 v9 = 0;
  __int16 v8 = 0;
  char v7 = 0;
  __int16 v124 = -1;
  __int16 v125 = 0;
LABEL_105:
  __int16 v121 = v8;
  uint64_t v49 = *(uint64_t **)(v4 + 160);
  v123 = (void *)(v4 + 160);
  if (!v49)
  {
    unint64_t v50 = 0;
    if ((a2 & 1) == 0) {
      goto LABEL_208;
    }
    goto LABEL_213;
  }
  __int16 v118 = v11;
  __int16 v119 = v9;
  __int16 v120 = v10;
  unint64_t v50 = 0;
  dispatch_object_t v51 = 0;
  uint64_t v52 = 0;
  unint64_t v53 = 0;
  do
  {
    if ((v49[2] & a2) == 0)
    {
      size_t v54 = *(NSObject **)(v4 + 40);
      BOOL v55 = os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT);
      if (v55)
      {
        ctu::iokit::asString();
        int v56 = __p;
        if (SBYTE7(v133) < 0) {
          int v56 = (void **)__p[0];
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v56;
        _os_log_impl(&dword_1C59C6000, v54, OS_LOG_TYPE_DEFAULT, "#I Power Source detached: %s", (uint8_t *)&buf, 0xCu);
        if (SBYTE7(v133) < 0) {
          operator delete(__p[0]);
        }
      }
      *((_WORD *)v49 + 11) = 1;
      capabilities::abs::supportedSARFeatures((capabilities::abs *)v55);
      if (capabilities::abs::operator&()) {
        __int16 v57 = 2;
      }
      else {
        __int16 v57 = 1;
      }
      *((_WORD *)v49 + 15) = v57;
      if (v53 < v52)
      {
        *(_DWORD *)unint64_t v53 = *((_DWORD *)v49 + 4);
        uint64_t v58 = (uint64_t)(v53 + 4);
        if (!*(void *)(v4 + 72))
        {
LABEL_107:
          char v7 = 1;
          unint64_t v53 = (char *)v58;
          goto LABEL_108;
        }
LABEL_138:
        CFTypeRef v148 = v153;
        if (v153) {
          CFRetain(v153);
        }
        __p[0] = *(void **)((char *)v49 + 20);
        LODWORD(__p[1]) = *((_DWORD *)v49 + 7);
        v145 = 0;
        unsigned int v146 = 0;
        v147 = 0;
        dispatch_object_t v67 = (void **)operator new(0xCuLL);
        unsigned int v146 = (void **)((char *)v67 + 12);
        v147 = (char *)v67 + 12;
        *((_DWORD *)v67 + 2) = __p[1];
        char *v67 = __p[0];
        v145 = v67;
        uint64_t v68 = *(void *)(v4 + 72);
        if (!v68) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, CFTypeRef *, void ***))(*(void *)v68 + 48))(v68, &v148, &v145);
        if (v145)
        {
          unsigned int v146 = v145;
          operator delete(v145);
        }
        if (v148) {
          CFRelease(v148);
        }
        goto LABEL_107;
      }
      uint64_t v59 = (v53 - v51) >> 2;
      unint64_t v60 = v59 + 1;
      if ((unint64_t)(v59 + 1) >> 62) {
        std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
      }
      if ((v52 - v51) >> 1 > v60) {
        unint64_t v60 = (v52 - v51) >> 1;
      }
      if ((unint64_t)(v52 - v51) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v61 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v61 = v60;
      }
      if (v61)
      {
        if (v61 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        int v62 = operator new(4 * v61);
        unint64_t v50 = &v62[4 * v59];
        *(_DWORD *)unint64_t v50 = *((_DWORD *)v49 + 4);
        uint64_t v58 = (uint64_t)(v50 + 4);
        int64_t v63 = v53 - v51;
        if (v53 == v51)
        {
LABEL_135:
          uint64_t v52 = &v62[4 * v61];
          if (v51) {
            operator delete(v51);
          }
          dispatch_object_t v51 = v50;
          if (!*(void *)(v4 + 72)) {
            goto LABEL_107;
          }
          goto LABEL_138;
        }
      }
      else
      {
        int v62 = 0;
        unint64_t v50 = (char *)(4 * v59);
        *(_DWORD *)(4 * v59) = *((_DWORD *)v49 + 4);
        uint64_t v58 = 4 * v59 + 4;
        int64_t v63 = v53 - v51;
        if (v53 == v51) {
          goto LABEL_135;
        }
      }
      unint64_t v64 = v63 - 4;
      if (v64 >= 0xBC)
      {
        unint64_t v69 = (v53 - 4 - v51) & 0xFFFFFFFFFFFFFFFCLL;
        if (&v62[v53 - v51 - 4 - v69] > &v62[v53 - v51 - 4])
        {
          int v65 = v53;
        }
        else if (&v53[-v69 - 4] > v53 - 4)
        {
          int v65 = v53;
        }
        else if ((unint64_t)(v51 - v62) >= 0x20)
        {
          uint64_t v70 = (v64 >> 2) + 1;
          uint64_t v71 = 4 * (v70 & 0x7FFFFFFFFFFFFFF8);
          int v65 = &v53[-v71];
          v50 -= v71;
          unint64_t v72 = &v62[4 * v59 - 16];
          CFTypeRef v73 = v53 - 16;
          uint64_t v74 = v70 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v75 = *(_OWORD *)v73;
            *(v72 - 1) = *((_OWORD *)v73 - 1);
            _OWORD *v72 = v75;
            v72 -= 2;
            v73 -= 32;
            v74 -= 8;
          }
          while (v74);
          if (v70 == (v70 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_135;
          }
        }
        else
        {
          int v65 = v53;
        }
      }
      else
      {
        int v65 = v53;
      }
      do
      {
        int v66 = *((_DWORD *)v65 - 1);
        v65 -= 4;
        *((_DWORD *)v50 - 1) = v66;
        v50 -= 4;
      }
      while (v65 != v51);
      goto LABEL_135;
    }
LABEL_108:
    uint64_t v49 = (uint64_t *)*v49;
  }
  while (v49);
  if (v50 == v53)
  {
    __int16 v9 = v119;
    __int16 v10 = v120;
    __int16 v11 = v118;
    if ((a2 & 1) == 0) {
      goto LABEL_208;
    }
    goto LABEL_213;
  }
  int8x8_t v76 = *(int8x8_t *)(v4 + 152);
  __int16 v9 = v119;
  __int16 v10 = v120;
  __int16 v11 = v118;
  if (v76)
  {
    v77 = v50;
LABEL_159:
    unint64_t v78 = *(unsigned int *)v77;
    uint8x8_t v79 = (uint8x8_t)vcnt_s8(v76);
    v79.i16[0] = vaddlv_u8(v79);
    if (v79.u32[0] > 1uLL)
    {
      unint64_t v80 = *(unsigned int *)v77;
      if (*(void *)&v76 <= v78) {
        unint64_t v80 = v78 % *(void *)&v76;
      }
    }
    else
    {
      unint64_t v80 = (v76.i32[0] - 1) & v78;
    }
    uint64_t v81 = *(void *)(v4 + 144);
    uint64_t v82 = *(_DWORD ***)(v81 + 8 * v80);
    if (v82)
    {
      long long v83 = *v82;
      if (*v82)
      {
        uint64_t v84 = *(void *)&v76 - 1;
        if (v79.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v85 = *((void *)v83 + 1);
            if (v85 == v78)
            {
              if (v83[4] == v78) {
                goto LABEL_179;
              }
            }
            else if ((v85 & v84) != v80)
            {
              goto LABEL_206;
            }
            long long v83 = *(_DWORD **)v83;
            if (!v83) {
              goto LABEL_206;
            }
          }
        }
        do
        {
          unint64_t v86 = *((void *)v83 + 1);
          if (v86 == v78)
          {
            if (v83[4] == v78)
            {
LABEL_179:
              if (v79.u32[0] > 1uLL)
              {
                if (*(void *)&v76 <= v78) {
                  v78 %= *(void *)&v76;
                }
              }
              else
              {
                v78 &= v84;
              }
              int v87 = *(void **)(v81 + 8 * v78);
              do
              {
                uint64_t v88 = v87;
                int v87 = (void *)*v87;
              }
              while (v87 != (void *)v83);
              if (v88 == v123) {
                goto LABEL_196;
              }
              unint64_t v89 = v88[1];
              if (v79.u32[0] > 1uLL)
              {
                if (v89 >= *(void *)&v76) {
                  v89 %= *(void *)&v76;
                }
              }
              else
              {
                v89 &= v84;
              }
              if (v89 != v78)
              {
LABEL_196:
                if (!*(void *)v83) {
                  goto LABEL_197;
                }
                unint64_t v90 = *(void *)(*(void *)v83 + 8);
                if (v79.u32[0] > 1uLL)
                {
                  if (v90 >= *(void *)&v76) {
                    v90 %= *(void *)&v76;
                  }
                }
                else
                {
                  v90 &= v84;
                }
                if (v90 != v78) {
LABEL_197:
                }
                  *(void *)(v81 + 8 * v78) = 0;
              }
              uint64_t v91 = *(void *)v83;
              if (*(void *)v83)
              {
                unint64_t v92 = *(void *)(v91 + 8);
                if (v79.u32[0] > 1uLL)
                {
                  if (v92 >= *(void *)&v76) {
                    v92 %= *(void *)&v76;
                  }
                }
                else
                {
                  v92 &= v84;
                }
                if (v92 != v78)
                {
                  *(void *)(*(void *)(v4 + 144) + 8 * v92) = v88;
                  uint64_t v91 = *(void *)v83;
                }
              }
              *uint64_t v88 = v91;
              *(void *)long long v83 = 0;
              --*(void *)(v4 + 168);
              operator delete(v83);
              break;
            }
          }
          else
          {
            if (v86 >= *(void *)&v76) {
              v86 %= *(void *)&v76;
            }
            if (v86 != v80) {
              break;
            }
          }
          long long v83 = *(_DWORD **)v83;
        }
        while (v83);
      }
    }
LABEL_206:
    while (1)
    {
      v77 += 4;
      if (v77 == v53) {
        break;
      }
      int8x8_t v76 = *(int8x8_t *)(v4 + 152);
      if (v76) {
        goto LABEL_159;
      }
    }
  }
  if (a2)
  {
LABEL_213:
    if (*(void *)(v4 + 168))
    {
      v96 = *(NSObject **)(v4 + 40);
      uint64_t v97 = os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT);
      if (v97)
      {
        ctu::iokit::asString();
        v98 = (SBYTE7(v133) & 0x80u) == 0 ? __p : (void **)__p[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v98;
        _os_log_impl(&dword_1C59C6000, v96, OS_LOG_TYPE_DEFAULT, "#I Power Source: %s", (uint8_t *)&buf, 0xCu);
        if (SBYTE7(v133) < 0) {
          operator delete(__p[0]);
        }
      }
      uint64_t v99 = (void *)*v123;
      if (*v123)
      {
        do
        {
          while ((v99[2] & a2) != 0)
          {
            uint64_t v99 = (void *)*v99;
            if (!v99) {
              goto LABEL_209;
            }
          }
          *((_WORD *)v99 + 11) = 1;
          capabilities::abs::supportedSARFeatures((capabilities::abs *)v97);
          uint64_t v97 = capabilities::abs::operator&();
          if (v97) {
            __int16 v100 = 2;
          }
          else {
            __int16 v100 = 1;
          }
          *((_WORD *)v99 + 15) = v100;
          if (*(void *)(v4 + 72))
          {
            CFTypeRef v144 = v153;
            if (v153) {
              CFRetain(v153);
            }
            __p[0] = *(void **)((char *)v99 + 20);
            LODWORD(__p[1]) = *((_DWORD *)v99 + 7);
            v141 = 0;
            int v142 = 0;
            v143 = 0;
            int v101 = (void **)operator new(0xCuLL);
            int v142 = (char *)v101 + 12;
            v143 = (char *)v101 + 12;
            *((_DWORD *)v101 + 2) = __p[1];
            *int v101 = __p[0];
            v141 = v101;
            uint64_t v102 = *(void *)(v4 + 72);
            if (!v102) {
              std::__throw_bad_function_call[abi:ne180100]();
            }
            (*(void (**)(uint64_t, CFTypeRef *, void **))(*(void *)v102 + 48))(v102, &v144, &v141);
            if (v141)
            {
              int v142 = v141;
              operator delete(v141);
            }
            uint64_t v97 = (uint64_t)v144;
            if (v144) {
              CFRelease(v144);
            }
          }
          uint64_t v99 = (void *)*v99;
        }
        while (v99);
      }
      if (*(void *)(v4 + 168))
      {
        std::string v103 = (void *)*v123;
        if (*v123)
        {
          do
          {
            v104 = (void *)*v103;
            operator delete(v103);
            std::string v103 = v104;
          }
          while (v104);
        }
        *(void *)(v4 + 160) = 0;
        uint64_t v105 = *(void *)(v4 + 152);
        if (v105)
        {
          for (uint64_t i = 0; i != v105; ++i)
            *(void *)(*(void *)(v4 + 144) + 8 * i) = 0;
        }
        *(void *)(v4 + 168) = 0;
      }
    }
    goto LABEL_282;
  }
LABEL_208:
  if (v7) {
    goto LABEL_282;
  }
LABEL_209:
  unint64_t v140 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v93 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v93 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v139[7] = v93;
  v139[8] = v93;
  v139[5] = v93;
  v139[6] = v93;
  v139[3] = v93;
  v139[4] = v93;
  v139[1] = v93;
  v139[2] = v93;
  long long v138 = v93;
  v139[0] = v93;
  *(_OWORD *)v136 = v93;
  long long v137 = v93;
  long long v134 = v93;
  long long v135 = v93;
  *(_OWORD *)std::string __p = v93;
  long long v133 = v93;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unexpected Power Source event: ", 31);
  std::ostream::operator<<();
  memset(&buf, 170, sizeof(buf));
  if ((BYTE8(v138) & 0x10) != 0)
  {
    uint64_t v107 = v138;
    if ((unint64_t)v138 < *((void *)&v135 + 1))
    {
      *(void *)&long long v138 = *((void *)&v135 + 1);
      uint64_t v107 = *((void *)&v135 + 1);
    }
    uint64_t v108 = (const void *)v135;
    std::string::size_type v94 = v107 - v135;
    if ((unint64_t)(v107 - v135) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_259;
    }
  }
  else
  {
    if ((BYTE8(v138) & 8) == 0)
    {
      std::string::size_type v94 = 0;
      *((unsigned char *)&buf.__r_.__value_.__s + 23) = 0;
      p_std::string buf = &buf;
      goto LABEL_255;
    }
    uint64_t v108 = (const void *)*((void *)&v133 + 1);
    std::string::size_type v94 = *((void *)&v134 + 1) - *((void *)&v133 + 1);
    if (*((void *)&v134 + 1) - *((void *)&v133 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_259:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v94 >= 0x17)
  {
    uint64_t v109 = (v94 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v94 | 7) != 0x17) {
      uint64_t v109 = v94 | 7;
    }
    uint64_t v110 = v109 + 1;
    p_std::string buf = (std::string *)operator new(v109 + 1);
    buf.__r_.__value_.__l.__size_ = v94;
    buf.__r_.__value_.__r.__words[2] = v110 | 0x8000000000000000;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
    goto LABEL_254;
  }
  *((unsigned char *)&buf.__r_.__value_.__s + 23) = v94;
  p_std::string buf = &buf;
  if (v94) {
LABEL_254:
  }
    memmove(p_buf, v108, v94);
LABEL_255:
  p_buf->__r_.__value_.__s.__data_[v94] = 0;
  v111 = *(NSObject **)(v4 + 40);
  if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
  {
    v113 = &buf;
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      v113 = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)v156 = 136315138;
    *(void *)&v156[4] = v113;
    _os_log_error_impl(&dword_1C59C6000, v111, OS_LOG_TYPE_ERROR, "%s", v156, 0xCu);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_263;
    }
LABEL_257:
    std::string v131 = buf;
    __int16 v112 = v121;
  }
  else
  {
    if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_257;
    }
LABEL_263:
    std::string::__init_copy_ctor_external(&v131, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
    __int16 v112 = v121;
  }
  (*(void (**)(unsigned char *__return_ptr, uint64_t, std::string *, uint64_t))(*(void *)v4 + 48))(v156, v4, &v131, 5);
  CFTypeRef v114 = v153;
  unsigned int v115 = *(const void **)v156;
  CFTypeRef v153 = *(CFTypeRef *)v156;
  *(void *)v156 = 0;
  if (v114)
  {
    CFRelease(v114);
    if (*(void *)v156) {
      CFRelease(*(CFTypeRef *)v156);
    }
  }
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v131.__r_.__value_.__l.__data_);
  }
  if (*(void *)(v4 + 72))
  {
    CFTypeRef cf = v115;
    if (v115) {
      CFRetain(v115);
    }
    v116 = operator new(0xCuLL);
    v128 = v116 + 6;
    v129 = v116 + 6;
    _WORD *v116 = v124;
    v116[1] = v112;
    v116[2] = v125;
    v116[3] = v9;
    v116[4] = v10;
    v116[5] = v11;
    v127 = v116;
    uint64_t v117 = *(void *)(v4 + 72);
    if (!v117) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, CFTypeRef *, void **))(*(void *)v117 + 48))(v117, &cf, &v127);
    if (v127)
    {
      v128 = v127;
      operator delete(v127);
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  __p[0] = *(void **)MEMORY[0x1E4FBA418];
  *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x1E4FBA418] + 24);
  __p[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
  if (SHIBYTE(v137) < 0) {
    operator delete(v136[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C8795140](v139);
LABEL_282:
  if (v50) {
    operator delete(v50);
  }
  if (v153) {
    CFRelease(v153);
  }
  size_t v48 = v155;
  if (v155)
  {
LABEL_287:
    if (!atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
}

void sub_1C5B53C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62)
{
  if (*(char *)(v63 - 105) < 0) {
    operator delete(*(void **)(v63 - 128));
  }
  std::ostringstream::~ostringstream((uint64_t)&a28);
  if (v62) {
    operator delete(v62);
  }
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)(v63 - 168));
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v63 - 160);
  _Unwind_Resume(a1);
}

void ___ZN24IOKitAccessoriesDelegate5startEv_block_invoke_6(void *a1, unsigned int a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = (void *)a1[4];
  uint64_t v6 = std::__shared_weak_count::lock(v3);
  float v34 = v6;
  if (!v6) {
    return;
  }
  if (!a1[5])
  {
    __int16 v10 = v6;
LABEL_52:
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return;
  }
  CFTypeRef cf = 0;
  if (a2 < 4)
  {
    unint64_t v7 = 0x4000300010002uLL >> (16 * a2);
    __int16 v8 = v5[5];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = ctu::iokit::asString();
      _os_log_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_DEFAULT, "#I Display Cover event: %s", buf, 0xCu);
    }
    __int16 v9 = 0;
    if (!v5[9]) {
      goto LABEL_49;
    }
LABEL_42:
    CFTypeRef v29 = v9;
    if (v9) {
      CFRetain(v9);
    }
    uint64_t v24 = (char *)operator new(0xCuLL);
    unint64_t v27 = v24 + 12;
    uint8x8_t v28 = v24 + 12;
    *(_WORD *)uint64_t v24 = 13;
    *((_WORD *)v24 + 1) = v7;
    *(void *)(v24 + 4) = 0;
    unint64_t v26 = v24;
    uint64_t v25 = v5[9];
    if (!v25) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, CFTypeRef *, void **))(*(void *)v25 + 48))(v25, &v29, &v26);
    if (v26)
    {
      unint64_t v27 = v26;
      operator delete(v26);
    }
    if (v29) {
      CFRelease(v29);
    }
    goto LABEL_49;
  }
  unint64_t v44 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v43[7] = v11;
  v43[8] = v11;
  v43[5] = v11;
  v43[6] = v11;
  v43[3] = v11;
  v43[4] = v11;
  v43[1] = v11;
  v43[2] = v11;
  long long v42 = v11;
  v43[0] = v11;
  *(_OWORD *)std::string __p = v11;
  long long v41 = v11;
  long long v38 = v11;
  long long v39 = v11;
  *(_OWORD *)std::string buf = v11;
  long long v37 = v11;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"Unexpected Display Cover event: ", 32);
  unint64_t v13 = (const char *)ctu::iokit::asString();
  size_t v14 = strlen(v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
  memset(&__dst, 170, sizeof(__dst));
  if ((BYTE8(v42) & 0x10) != 0)
  {
    uint64_t v17 = v42;
    if ((unint64_t)v42 < *((void *)&v39 + 1))
    {
      *(void *)&long long v42 = *((void *)&v39 + 1);
      uint64_t v17 = *((void *)&v39 + 1);
    }
    uint64_t v18 = (const void *)v39;
    std::string::size_type v15 = v17 - v39;
    if ((unint64_t)(v17 - v39) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_27;
    }
  }
  else
  {
    if ((BYTE8(v42) & 8) == 0)
    {
      std::string::size_type v15 = 0;
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 0;
      p_dst = &__dst;
      goto LABEL_23;
    }
    uint64_t v18 = (const void *)*((void *)&v37 + 1);
    std::string::size_type v15 = *((void *)&v38 + 1) - *((void *)&v37 + 1);
    if (*((void *)&v38 + 1) - *((void *)&v37 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_27:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v15 >= 0x17)
  {
    uint64_t v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v19 = v15 | 7;
    }
    uint64_t v20 = v19 + 1;
    p_dst = (std::string *)operator new(v19 + 1);
    __dst.__r_.__value_.__l.__size_ = v15;
    __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_22;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v15;
  p_dst = &__dst;
  if (v15) {
LABEL_22:
  }
    memmove(p_dst, v18, v15);
LABEL_23:
  p_dst->__r_.__value_.__s.__data_[v15] = 0;
  uint64_t v21 = v5[5];
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    dispatch_object_t v22 = &__dst;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      dispatch_object_t v22 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)float v35 = 136315138;
    *(void *)&v35[4] = v22;
    _os_log_error_impl(&dword_1C59C6000, v21, OS_LOG_TYPE_ERROR, "%s", v35, 0xCu);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_25;
    }
LABEL_31:
    std::string::__init_copy_ctor_external(&v30, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    goto LABEL_32;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_31;
  }
LABEL_25:
  std::string v30 = __dst;
LABEL_32:
  (*(void (**)(unsigned char *__return_ptr, void *, std::string *, uint64_t))(*v5 + 48))(v35, v5, &v30, 5);
  CFTypeRef v23 = cf;
  __int16 v9 = *(const void **)v35;
  CFTypeRef cf = *(CFTypeRef *)v35;
  *(void *)float v35 = 0;
  if (v23)
  {
    CFRelease(v23);
    if (*(void *)v35) {
      CFRelease(*(CFTypeRef *)v35);
    }
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  *(void *)std::string buf = *MEMORY[0x1E4FBA418];
  *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *(void *)&uint8_t buf[8] = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v41) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C8795140](v43);
  LOWORD(v7) = 0;
  if (v5[9]) {
    goto LABEL_42;
  }
LABEL_49:
  if (v9) {
    CFRelease(v9);
  }
  __int16 v10 = v34;
  if (v34) {
    goto LABEL_52;
  }
}

void sub_1C5B54348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,const void *a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a33);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a26);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitDisplayCoverState)>::~callback(uint64_t a1)
{
  int v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void IOKitAccessoriesDelegate::stop(IOKitAccessoriesDelegate *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___ZN24IOKitAccessoriesDelegate4stopEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_13_1;
  v1[4] = this;
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

void ___ZN24IOKitAccessoriesDelegate4stopEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(NSObject **)(v1 + 40);
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Stopping", buf, 2u);
    }
    *(unsigned char *)(v1 + 80) = 0;
    uint64_t v5 = (void *)ctu::iokit::Controller::stopPowerSourceNotifications(*(ctu::iokit::Controller **)(v1 + 88));
    if (*(void *)(v1 + 168))
    {
      uint64_t v5 = *(void **)(v1 + 160);
      if (v5)
      {
        do
        {
          uint64_t v6 = (void *)*v5;
          operator delete(v5);
          uint64_t v5 = v6;
        }
        while (v6);
      }
      *(void *)(v1 + 160) = 0;
      uint64_t v7 = *(void *)(v1 + 152);
      if (v7)
      {
        for (uint64_t i = 0; i != v7; ++i)
          *(void *)(*(void *)(v1 + 144) + 8 * i) = 0;
      }
      *(void *)(v1 + 168) = 0;
    }
    if (capabilities::abs::supportsDisplayCoverAccessory((capabilities::abs *)v5)) {
      ctu::iokit::Controller::stopDisplayCoverStateNotifications(*(ctu::iokit::Controller **)(v1 + 88));
    }
  }
  else if (v4)
  {
    *(_WORD *)__int16 v9 = 0;
    _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Already stopped", v9, 2u);
  }
}

void std::__shared_ptr_pointer<IOKitAccessoriesDelegate *,std::shared_ptr<IOKitAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<IOKitAccessoriesDelegate>(IOKitAccessoriesDelegate*)::{lambda(IOKitAccessoriesDelegate *)#1},std::allocator<IOKitAccessoriesDelegate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<IOKitAccessoriesDelegate *,std::shared_ptr<IOKitAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<IOKitAccessoriesDelegate>(IOKitAccessoriesDelegate*)::{lambda(IOKitAccessoriesDelegate *)#1},std::allocator<IOKitAccessoriesDelegate>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<IOKitAccessoriesDelegate *,std::shared_ptr<IOKitAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<IOKitAccessoriesDelegate>(IOKitAccessoriesDelegate*)::{lambda(IOKitAccessoriesDelegate *)#1},std::allocator<IOKitAccessoriesDelegate>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI24IOKitAccessoriesDelegate"
                     "EENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI24IOKitAccessor"
                                "iesDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI24IOKitAccessoriesDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI24IOKitAccessoriesDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<IOKitAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<IOKitAccessoriesDelegate>(IOKitAccessoriesDelegate*)::{lambda(IOKitAccessoriesDelegate*)#1}::operator() const(IOKitAccessoriesDelegate*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::__unordered_map_hasher<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::__unordered_map_equal<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::allocator<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>>>::__emplace_unique_key_args<ctu::iokit::TelephonyIOKitPowerSource,std::piecewise_construct_t const&,std::tuple<ctu::iokit::TelephonyIOKitPowerSource&&>,std::tuple<>>(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v5 = a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v8 = a2;
      if (v6 <= a2) {
        unint64_t v8 = a2 % v6;
      }
    }
    else
    {
      unint64_t v8 = (v6 - 1) & a2;
    }
    __int16 v9 = *(void ***)(*(void *)a1 + 8 * v8);
    if (v9)
    {
      __int16 v10 = *v9;
      if (*v9)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2) {
                return v10;
              }
            }
            else if ((v12 & (v6 - 1)) != v8)
            {
              goto LABEL_22;
            }
            __int16 v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v6) {
              v11 %= v6;
            }
            if (v11 != v8) {
              break;
            }
          }
          __int16 v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  }
LABEL_22:
  __int16 v10 = operator new(0x20uLL);
  void *v10 = 0;
  v10[1] = v5;
  *((_DWORD *)v10 + 4) = *a3;
  *((_WORD *)v10 + 10) = -1;
  *(void *)((char *)v10 + 22) = 0;
  *((_WORD *)v10 + 15) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (v6 && (float)(v14 * (float)v6) >= v13)
  {
    unint64_t v5 = v8;
  }
  else
  {
    BOOL v15 = 1;
    if (v6 >= 3) {
      BOOL v15 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v6);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t prime = v17;
    }
    else {
      size_t prime = v16;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v6 = *(void *)(a1 + 8);
    }
    if (prime > v6) {
      goto LABEL_35;
    }
    if (prime < v6)
    {
      unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v6 < 3 || (uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        unint64_t v19 = std::__next_prime(v19);
      }
      else
      {
        uint64_t v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2) {
          unint64_t v19 = v21;
        }
      }
      if (prime <= v19) {
        size_t prime = v19;
      }
      if (prime < v6) {
LABEL_35:
      }
        std::__hash_table<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::__unordered_map_hasher<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::__unordered_map_equal<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::allocator<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5) {
        v5 %= v6;
      }
    }
    else
    {
      unint64_t v5 = (v6 - 1) & v5;
    }
  }
  uint64_t v22 = *(void *)a1;
  CFTypeRef v23 = *(void **)(*(void *)a1 + 8 * v5);
  if (v23)
  {
    void *v10 = *v23;
LABEL_58:
    *CFTypeRef v23 = v10;
    goto LABEL_59;
  }
  void *v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    unint64_t v24 = *(void *)(*v10 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v24 >= v6) {
        v24 %= v6;
      }
    }
    else
    {
      v24 &= v6 - 1;
    }
    CFTypeRef v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1C5B54988(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::__unordered_map_hasher<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::__unordered_map_equal<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::allocator<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (!a2)
  {
    BOOL v15 = *(void **)a1;
    *(void *)a1 = 0;
    if (v15) {
      operator delete(v15);
    }
    *(void *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  BOOL v4 = operator new(8 * a2);
  unint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = 0;
  *(void *)(a1 + 8) = a2;
  do
    *(void *)(*(void *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  uint64_t v8 = a1 + 16;
  uint8x8_t v7 = *(void **)(a1 + 16);
  if (v7)
  {
    unint64_t v9 = v7[1];
    unint64_t v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      uint64_t v11 = v9 & v10;
      *(void *)(*(void *)a1 + 8 * v11) = v8;
      while (1)
      {
        uint64_t v12 = (void *)*v7;
        if (!*v7) {
          break;
        }
        uint64_t v13 = v12[1] & v10;
        if (v13 == v11)
        {
          uint8x8_t v7 = (void *)*v7;
        }
        else if (*(void *)(*(void *)a1 + 8 * v13))
        {
          void *v7 = *v12;
          uint64_t v14 = 8 * v13;
          *uint64_t v12 = **(void **)(*(void *)a1 + v14);
          **(void **)(*(void *)a1 + v14) = v12;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v13) = v7;
          uint8x8_t v7 = v12;
          uint64_t v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2) {
      v9 %= a2;
    }
    *(void *)(*(void *)a1 + 8 * v9) = v8;
    unint64_t v16 = (void *)*v7;
    if (*v7)
    {
      while (1)
      {
        unint64_t v18 = v16[1];
        if (v18 >= a2) {
          v18 %= a2;
        }
        if (v18 == v9) {
          goto LABEL_25;
        }
        if (*(void *)(*(void *)a1 + 8 * v18))
        {
          void *v7 = *v16;
          uint64_t v17 = 8 * v18;
          *unint64_t v16 = **(void **)(*(void *)a1 + v17);
          **(void **)(*(void *)a1 + v17) = v16;
          unint64_t v16 = v7;
LABEL_25:
          uint8x8_t v7 = v16;
          unint64_t v16 = (void *)*v16;
          if (!v16) {
            return;
          }
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v18) = v7;
          uint8x8_t v7 = v16;
          unint64_t v16 = (void *)*v16;
          unint64_t v9 = v18;
          if (!v16) {
            return;
          }
        }
      }
    }
  }
}

void AntennaModule::create(uint64_t *a1@<X0>, NSObject ***a2@<X8>)
{
  BOOL v4 = dispatch_workloop_create("antenna.wl");
  *a2 = (NSObject **)0xAAAAAAAAAAAAAAAALL;
  a2[1] = (NSObject **)0xAAAAAAAAAAAAAAAALL;
  unint64_t v5 = operator new(0xC0uLL);
  uint64_t v6 = *a1;
  uint8x8_t v7 = (std::__shared_weak_count *)a1[1];
  v9[0] = v6;
  v9[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  AntennaModule::AntennaModule((uint64_t)v5, v9, &v8);
  *a2 = (NSObject **)0xAAAAAAAAAAAAAAAALL;
  a2[1] = (NSObject **)0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<AntennaModule>::shared_ptr[abi:ne180100]<AntennaModule,std::shared_ptr<AntennaModule> ctu::SharedSynchronizable<AntennaModule>::make_shared_ptr<AntennaModule>(AntennaModule*)::{lambda(AntennaModule*)#1},void>(a2, (uint64_t)v5);
  ctu::Loggable<AntennaModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync((uint64_t)(*a2 + 6));
  if (v4) {
    dispatch_release(v4);
  }
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  AntennaModule::init(*a2);
  if (v4)
  {
    dispatch_release(v4);
  }
}

void sub_1C5B54C9C(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v3);
  if (v1)
  {
    dispatch_release(v1);
    if (!v2) {
      goto LABEL_3;
    }
  }
  else if (!v2)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v2);
LABEL_3:
  if (!v1) {
    _Unwind_Resume(a1);
  }
  dispatch_release(v1);
  _Unwind_Resume(a1);
}

void AntennaModule::init(NSObject **this)
{
  BOOL v4 = (AntennaModule *)this;
  if (this[18])
  {
    if (dispatch_workloop_is_current())
    {
      AntennaModule::init(void)::$_0::operator()((uint64_t)this);
      return;
    }
    BOOL v2 = this[18] == 0;
  }
  else
  {
    BOOL v2 = 1;
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI13AntennaModuleE20execute_wrapped_syncIZNS1_4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  block[3] = &__block_descriptor_tmp_74;
  block[4] = this + 15;
  void block[5] = &v4;
  uint64_t v3 = this[17];
  if (v2) {
    dispatch_sync(v3, block);
  }
  else {
    dispatch_async_and_wait(v3, block);
  }
}

const char *AntennaModule::getName(AntennaModule *this)
{
  return "antenna.mod";
}

uint64_t AntennaModule::AntennaModule(uint64_t a1, uint64_t *a2, NSObject **a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1F2112348;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v6);
    *(void *)a1 = &unk_1F2103EC0;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &unk_1F2103EC0;
  }
  *(void *)a1 = &unk_1F210EF58;
  *(void *)(a1 + 48) = &unk_1F210EFC8;
  uint8x8_t v7 = *a3;
  uint64_t v8 = (uint64_t (**)(void))&unk_1F210EF58;
  if (v7)
  {
    dispatch_retain(v7);
    uint64_t v8 = *(uint64_t (***)(void))a1;
  }
  unint64_t v9 = (const char *)v8[2](a1);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v17, "com.apple.telephony.abm", v9);
  GetABMLogServer(&v15);
  if (v7) {
    dispatch_retain(v7);
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v11 = dispatch_queue_create_with_target_V2("antenna.mod", initially_inactive, v7);
  dispatch_set_qos_class_floor(v11, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v11);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  *(void *)(a1 + 144) = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  if (v11) {
    dispatch_release(v11);
  }
  if (v7) {
    dispatch_release(v7);
  }
  *(void *)(a1 + 48) = &unk_1F210F2C8;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v19);
  *(void *)(a1 + 56) = &unk_1F2102CB8;
  uint64_t v12 = v16;
  *(void *)(a1 + 104) = v15;
  *(void *)(a1 + 112) = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v18);
  *(void *)(a1 + 48) = &unk_1F210F358;
  uint64_t v13 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v17);
  if (v7) {
    dispatch_release(v7);
  }
  *(void *)a1 = &unk_1F210EF58;
  *(void *)(a1 + 48) = &unk_1F210EFC8;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 184) = 0;
  return a1;
}

void sub_1C5B5511C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a15);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a13);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v17);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  if (v16) {
    dispatch_release(v16);
  }
  Service::~Service(v15);
  _Unwind_Resume(a1);
}

void AntennaModule::~AntennaModule(AntennaModule *this)
{
  *(void *)this = &unk_1F210EF58;
  *((void *)this + 6) = &unk_1F210EFC8;
  BOOL v2 = *((void *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v15[0] = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", (uint8_t *)v15, 2u);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    BOOL v4 = (char *)this + 56;
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 21);
    if (!v5) {
      goto LABEL_9;
    }
  }
  else
  {
    BOOL v4 = (char *)this + 56;
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 21);
    if (!v5) {
      goto LABEL_9;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_9:
  uint64_t v6 = (void **)*((void *)this + 19);
  if (v6)
  {
    do
    {
      uint64_t v13 = (void **)*v6;
      if (*((char *)v6 + 31) < 0) {
        operator delete(v6[1]);
      }
      operator delete(v6);
      uint64_t v6 = v13;
    }
    while (v13);
  }
  *((void *)this + 19) = 0;
  *((void *)this + 6) = &unk_1F210F2C8;
  MEMORY[0x1C87940C0](v4);
  uint8x8_t v7 = *((void *)this + 18);
  if (v7) {
    dispatch_release(v7);
  }
  uint64_t v8 = *((void *)this + 17);
  if (v8) {
    dispatch_release(v8);
  }
  unint64_t v9 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  *(void *)this = &unk_1F2112348;
  uint64_t v10 = *((void *)this + 3);
  if (v10)
  {
    uint64_t v11 = *((void *)this + 4);
    uint64_t v12 = (void *)*((void *)this + 3);
    if (v11 != v10)
    {
      do
      {
        if (*(char *)(v11 - 1) < 0) {
          operator delete(*(void **)(v11 - 24));
        }
        v11 -= 24;
      }
      while (v11 != v10);
      uint64_t v12 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v10;
    operator delete(v12);
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
}

{
  void *v1;
  uint64_t vars8;

  AntennaModule::~AntennaModule(this);

  operator delete(v1);
}

void non-virtual thunk to'AntennaModule::~AntennaModule(AntennaModule *this)
{
}

{
  void *v1;
  uint64_t vars8;

  AntennaModule::~AntennaModule((AntennaModule *)((char *)this - 48));

  operator delete(v1);
}

_WORD *AntennaModule::getShutdownStages@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = operator new(2uLL);
  *a1 = v3;
  _WORD *v3 = 770;
  double result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void AntennaModule::shutdown(uint64_t a1, int a2, NSObject **a3)
{
  if (a2 != 3)
  {
    if (a2 != 2) {
      return;
    }
    uint64_t v3 = (uint64_t *)(a1 + 120);
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 1174405120;
    _DWORD v10[2] = ___ZN13AntennaModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
    void v10[3] = &__block_descriptor_tmp_39;
    BOOL v4 = *a3;
    v10[4] = a1;
    dispatch_group_t group = v4;
    if (v4)
    {
      dispatch_retain(v4);
      dispatch_group_enter(group);
    }
    ctu::SharedSynchronizable<AntennaModule>::execute_wrapped(v3, (uint64_t)v10);
    if (!group) {
      return;
    }
    dispatch_group_leave(group);
    uint64_t v5 = group;
    if (!group) {
      return;
    }
LABEL_12:
    dispatch_release(v5);
    return;
  }
  uint64_t v6 = (uint64_t *)(a1 + 120);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1174405120;
  v8[2] = ___ZN13AntennaModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_5;
  v8[3] = &__block_descriptor_tmp_8_2;
  uint8x8_t v7 = *a3;
  unsigned int v8[4] = a1;
  dispatch_group_t object = v7;
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(object);
  }
  ctu::SharedSynchronizable<AntennaModule>::execute_wrapped(v6, (uint64_t)v8);
  if (object)
  {
    dispatch_group_leave(object);
    uint64_t v5 = object;
    if (object) {
      goto LABEL_12;
    }
  }
}

void ___ZN13AntennaModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = **(antenna::Service::Internal ***)(*(void *)(a1 + 32) + 176);
  if (v1) {
    antenna::Service::Internal::shutdown(v1);
  }
}

void ___ZN13AntennaModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_5(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  BOOL v2 = *(std::__shared_weak_count **)(v1 + 168);
  *(void *)(v1 + 160) = 0;
  *(void *)(v1 + 168) = 0;
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void AntennaModule::initialize(uint64_t *a1, NSObject **a2)
{
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  uint64_t v11[2] = ___ZN13AntennaModule10initializeEN8dispatch13group_sessionE_block_invoke;
  v11[3] = &__block_descriptor_tmp_25_1;
  uint64_t v3 = *a2;
  v11[4] = a1;
  dispatch_group_t group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(group);
  }
  ctu::SharedSynchronizable<AntennaModule>::execute_wrapped(a1 + 15, (uint64_t)v11);
  BOOL v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint8x8_t v7 = v6;
  uint64_t v8 = operator new(8uLL);
  void *v8 = a1;
  unint64_t v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  _DWORD v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<AntennaModule>::execute_wrapped<AntennaModule::initialize(dispatch::group_session)::$_0>(AntennaModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<AntennaModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<AntennaModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void ___ZN13AntennaModule10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  BOOL v2 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v2 || (v3 = *(void *)(v1 + 120), (BOOL v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (const void *)*MEMORY[0x1E4F4C640];
  size_t v7 = strlen((const char *)*MEMORY[0x1E4F4C640]);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (void **)operator new(v10 + 1);
    size_t v47 = v8;
    unint64_t v48 = v11 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_12;
  }
  HIBYTE(v48) = v7;
  p_dst = (void **)&__dst;
  if (v7) {
LABEL_12:
  }
    memmove(p_dst, v6, v8);
  *((unsigned char *)p_dst + v8) = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN13AntennaModule10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_10_2;
  aBlock[4] = v1;
  void aBlock[5] = v3;
  unint64_t v44 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = _Block_copy(aBlock);
  uint64_t v45 = v12;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v45);
  if (v12) {
    _Block_release(v12);
  }
  if (SHIBYTE(v48) < 0) {
    operator delete(__dst);
  }
  uint64_t v13 = (const void *)*MEMORY[0x1E4F4C318];
  size_t v14 = strlen((const char *)*MEMORY[0x1E4F4C318]);
  if (v14 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v15 = v14;
  if (v14 >= 0x17)
  {
    uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v17 = v14 | 7;
    }
    uint64_t v18 = v17 + 1;
    unint64_t v16 = (void **)operator new(v17 + 1);
    size_t v47 = v15;
    unint64_t v48 = v18 | 0x8000000000000000;
    std::string __dst = v16;
    goto LABEL_24;
  }
  HIBYTE(v48) = v14;
  unint64_t v16 = (void **)&__dst;
  if (v14) {
LABEL_24:
  }
    memmove(v16, v13, v15);
  *((unsigned char *)v16 + v15) = 0;
  v40[0] = MEMORY[0x1E4F143A8];
  v40[1] = 1174405120;
  v40[2] = ___ZN13AntennaModule10initializeEN8dispatch13group_sessionE_block_invoke_11;
  v40[3] = &__block_descriptor_tmp_14_3;
  v40[4] = v1;
  v40[5] = v3;
  long long v41 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unint64_t v19 = _Block_copy(v40);
  long long v42 = v19;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v42);
  if (v19) {
    _Block_release(v19);
  }
  if (SHIBYTE(v48) < 0) {
    operator delete(__dst);
  }
  uint8x8_t v20 = (const void *)*MEMORY[0x1E4F4CC20];
  size_t v21 = strlen((const char *)*MEMORY[0x1E4F4CC20]);
  if (v21 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v22 = v21;
  if (v21 >= 0x17)
  {
    uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v24 = v21 | 7;
    }
    uint64_t v25 = v24 + 1;
    CFTypeRef v23 = (void **)operator new(v24 + 1);
    size_t v47 = v22;
    unint64_t v48 = v25 | 0x8000000000000000;
    std::string __dst = v23;
    goto LABEL_36;
  }
  HIBYTE(v48) = v21;
  CFTypeRef v23 = (void **)&__dst;
  if (v21) {
LABEL_36:
  }
    memmove(v23, v20, v22);
  *((unsigned char *)v23 + v22) = 0;
  v37[0] = MEMORY[0x1E4F143A8];
  v37[1] = 1174405120;
  v37[2] = ___ZN13AntennaModule10initializeEN8dispatch13group_sessionE_block_invoke_15;
  v37[3] = &__block_descriptor_tmp_18_3;
  v37[4] = v1;
  v37[5] = v3;
  long long v38 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unint64_t v26 = _Block_copy(v37);
  long long v39 = v26;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v39);
  if (v26) {
    _Block_release(v26);
  }
  if (SHIBYTE(v48) < 0) {
    operator delete(__dst);
  }
  unint64_t v27 = (const void *)*MEMORY[0x1E4F4CC10];
  size_t v28 = strlen((const char *)*MEMORY[0x1E4F4CC10]);
  if (v28 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v29 = v28;
  if (v28 >= 0x17)
  {
    uint64_t v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17) {
      uint64_t v31 = v28 | 7;
    }
    uint64_t v32 = v31 + 1;
    std::string v30 = (void **)operator new(v31 + 1);
    size_t v47 = v29;
    unint64_t v48 = v32 | 0x8000000000000000;
    std::string __dst = v30;
    goto LABEL_48;
  }
  HIBYTE(v48) = v28;
  std::string v30 = (void **)&__dst;
  if (v28) {
LABEL_48:
  }
    memmove(v30, v27, v29);
  *((unsigned char *)v30 + v29) = 0;
  v34[0] = MEMORY[0x1E4F143A8];
  v34[1] = 1174405120;
  v34[2] = ___ZN13AntennaModule10initializeEN8dispatch13group_sessionE_block_invoke_19;
  v34[3] = &__block_descriptor_tmp_22_0;
  v34[4] = v1;
  v34[5] = v3;
  float v35 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v33 = _Block_copy(v34);
  BOOL v36 = v33;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v36);
  if (v33) {
    _Block_release(v33);
  }
  if (SHIBYTE(v48) < 0) {
    operator delete(__dst);
  }
  if (v35) {
    std::__shared_weak_count::__release_weak(v35);
  }
  if (v38) {
    std::__shared_weak_count::__release_weak(v38);
  }
  if (v41) {
    std::__shared_weak_count::__release_weak(v41);
  }
  if (v44) {
    std::__shared_weak_count::__release_weak(v44);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C5B55D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
  if (v33) {
    _Block_release(v33);
  }
  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    if ((*(char *)(v34 - 97) & 0x80000000) == 0)
    {
LABEL_5:
      BOOL v36 = a24;
      if (!a24)
      {
LABEL_10:
        if (a32) {
          std::__shared_weak_count::__release_weak(a32);
        }
        long long v37 = *(std::__shared_weak_count **)(v34 - 136);
        if (v37)
        {
          std::__shared_weak_count::__release_weak(v37);
          std::__shared_weak_count::__release_weak(v32);
          _Unwind_Resume(a1);
        }
        std::__shared_weak_count::__release_weak(v32);
        _Unwind_Resume(a1);
      }
LABEL_9:
      std::__shared_weak_count::__release_weak(v36);
      goto LABEL_10;
    }
  }
  else if ((*(char *)(v34 - 97) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v34 - 120));
  BOOL v36 = a24;
  if (!a24) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

uint64_t __copy_helper_block_e8_40c38_ZTSNSt3__18weak_ptrI13AntennaModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c38_ZTSNSt3__18weak_ptrI13AntennaModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN13AntennaModule10initializeEN8dispatch13group_sessionE_block_invoke_11(void *a1, xpc_object_t *a2, const void **a3)
{
  BOOL v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  size_t v7 = (void *)a1[4];
  size_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  unint64_t v9 = v8;
  uint64_t v10 = a1[5];
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v10) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10) {
      return;
    }
  }
  xpc_object_t v11 = *a2;
  if (v11)
  {
    xpc_retain(v11);
    uint64_t v12 = *a3;
    if (*a3) {
      goto LABEL_9;
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    uint64_t v12 = *a3;
    if (*a3)
    {
LABEL_9:
      uint64_t v13 = _Block_copy(v12);
      size_t v14 = (std::__shared_weak_count *)v7[16];
      if (!v14) {
LABEL_18:
      }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_13;
    }
  }
  uint64_t v13 = 0;
  size_t v14 = (std::__shared_weak_count *)v7[16];
  if (!v14) {
    goto LABEL_18;
  }
LABEL_13:
  uint64_t v15 = v7[15];
  unint64_t v16 = std::__shared_weak_count::lock(v14);
  if (!v16) {
    goto LABEL_18;
  }
  uint64_t v17 = v16;
  uint64_t v18 = operator new(0x18uLL);
  *uint64_t v18 = v7;
  v18[1] = v11;
  xpc_object_t v19 = xpc_null_create();
  v18[2] = v13;
  uint8x8_t v20 = v7[17];
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  size_t v21 = operator new(0x18uLL);
  *size_t v21 = v18;
  v21[1] = v15;
  v21[2] = v17;
  dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI13AntennaModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
}

void ___ZN13AntennaModule10initializeEN8dispatch13group_sessionE_block_invoke_15(void *a1, xpc_object_t *a2, const void **a3)
{
  BOOL v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  size_t v7 = (void *)a1[4];
  size_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  unint64_t v9 = v8;
  uint64_t v10 = a1[5];
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v10) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10) {
      return;
    }
  }
  xpc_object_t v11 = *a2;
  if (v11)
  {
    xpc_retain(v11);
    uint64_t v12 = *a3;
    if (*a3) {
      goto LABEL_9;
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    uint64_t v12 = *a3;
    if (*a3)
    {
LABEL_9:
      uint64_t v13 = _Block_copy(v12);
      size_t v14 = (std::__shared_weak_count *)v7[16];
      if (!v14) {
LABEL_18:
      }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_13;
    }
  }
  uint64_t v13 = 0;
  size_t v14 = (std::__shared_weak_count *)v7[16];
  if (!v14) {
    goto LABEL_18;
  }
LABEL_13:
  uint64_t v15 = v7[15];
  unint64_t v16 = std::__shared_weak_count::lock(v14);
  if (!v16) {
    goto LABEL_18;
  }
  uint64_t v17 = v16;
  uint64_t v18 = operator new(0x18uLL);
  *uint64_t v18 = v7;
  v18[1] = v11;
  xpc_object_t v19 = xpc_null_create();
  v18[2] = v13;
  uint8x8_t v20 = v7[17];
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  size_t v21 = operator new(0x18uLL);
  *size_t v21 = v18;
  v21[1] = v15;
  v21[2] = v17;
  dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI13AntennaModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb2_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
}

void ___ZN13AntennaModule10initializeEN8dispatch13group_sessionE_block_invoke_19(void *a1, xpc_object_t *a2, const void **a3)
{
  BOOL v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  size_t v7 = (void *)a1[4];
  size_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  unint64_t v9 = v8;
  uint64_t v10 = a1[5];
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v10) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10) {
      return;
    }
  }
  xpc_object_t v11 = *a2;
  if (v11)
  {
    xpc_retain(v11);
    uint64_t v12 = *a3;
    if (*a3) {
      goto LABEL_9;
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    uint64_t v12 = *a3;
    if (*a3)
    {
LABEL_9:
      uint64_t v13 = _Block_copy(v12);
      size_t v14 = (std::__shared_weak_count *)v7[16];
      if (!v14) {
LABEL_18:
      }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_13;
    }
  }
  uint64_t v13 = 0;
  size_t v14 = (std::__shared_weak_count *)v7[16];
  if (!v14) {
    goto LABEL_18;
  }
LABEL_13:
  uint64_t v15 = v7[15];
  unint64_t v16 = std::__shared_weak_count::lock(v14);
  if (!v16) {
    goto LABEL_18;
  }
  uint64_t v17 = v16;
  uint64_t v18 = operator new(0x18uLL);
  *uint64_t v18 = v7;
  v18[1] = v11;
  xpc_object_t v19 = xpc_null_create();
  v18[2] = v13;
  uint8x8_t v20 = v7[17];
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  size_t v21 = operator new(0x18uLL);
  *size_t v21 = v18;
  v21[1] = v15;
  v21[2] = v17;
  dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI13AntennaModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
}

void AntennaModule::finishInitialization_sync(std::__shared_weak_count **this)
{
  uint64_t v2 = (const char *)((uint64_t (*)(std::__shared_weak_count **))(*this)->__shared_weak_owners_)(this);
  size_t v3 = strlen(v2);
  if (v3 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  BOOL v4 = (void *)v3;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v5 = (void **)operator new(v6 + 1);
    __dst[1] = v4;
    unint64_t v74 = v7 | 0x8000000000000000;
    __dst[0] = v5;
  }
  else
  {
    HIBYTE(v74) = v3;
    uint64_t v5 = __dst;
    if (!v3) {
      goto LABEL_9;
    }
  }
  memmove(v5, v2, (size_t)v4);
LABEL_9:
  *((unsigned char *)v4 + (void)v5) = 0;
  unint64_t v72 = 0;
  AppleBasebandManager::create();
  long long v8 = v75;
  long long v75 = 0uLL;
  unint64_t v9 = this[21];
  *((_OWORD *)this + 10) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)&v75 + 1);
  if (!*((void *)&v75 + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v75 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    xpc_object_t v11 = v72;
    if (!v72) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  xpc_object_t v11 = v72;
  if (v72) {
LABEL_15:
  }
    CFRelease(v11);
LABEL_16:
  if (SHIBYTE(v74) < 0) {
    operator delete(__dst[0]);
  }
  uint64_t v12 = this[16];
  if (!v12 || (uint64_t v13 = this[15], (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v15 = v14;
  atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v15);
  }
  unint64_t v16 = (const void *)*MEMORY[0x1E4F4CB10];
  size_t v17 = strlen((const char *)*MEMORY[0x1E4F4CB10]);
  if (v17 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v18 = (void *)v17;
  if (v17 >= 0x17)
  {
    uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v20 = v17 | 7;
    }
    uint64_t v21 = v20 + 1;
    xpc_object_t v19 = (void **)operator new(v20 + 1);
    v70[1] = v18;
    unint64_t v71 = v21 | 0x8000000000000000;
    v70[0] = v19;
    goto LABEL_29;
  }
  HIBYTE(v71) = v17;
  xpc_object_t v19 = v70;
  if (v17) {
LABEL_29:
  }
    memmove(v19, v16, (size_t)v18);
  *((unsigned char *)v18 + (void)v19) = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN13AntennaModule25finishInitialization_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_29_5;
  aBlock[4] = this;
  void aBlock[5] = v13;
  dispatch_object_t v67 = v15;
  atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v22 = _Block_copy(aBlock);
  CFTypeRef v23 = this[17];
  if (v23) {
    dispatch_retain((dispatch_object_t)this[17]);
  }
  uint64_t v68 = v22;
  dispatch_object_t v69 = v23;
  AppleBasebandManager::setEventHandler();
  if (v69) {
    dispatch_release(v69);
  }
  if (v68) {
    _Block_release(v68);
  }
  if (SHIBYTE(v71) < 0) {
    operator delete(v70[0]);
  }
  uint64_t v24 = (const void *)*MEMORY[0x1E4F4CB18];
  size_t v25 = strlen((const char *)*MEMORY[0x1E4F4CB18]);
  if (v25 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v26 = (void *)v25;
  if (v25 >= 0x17)
  {
    uint64_t v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17) {
      uint64_t v28 = v25 | 7;
    }
    uint64_t v29 = v28 + 1;
    unint64_t v27 = operator new(v28 + 1);
    __p[1] = v26;
    unint64_t v65 = v29 | 0x8000000000000000;
    __p[0] = v27;
    goto LABEL_45;
  }
  HIBYTE(v65) = v25;
  unint64_t v27 = __p;
  if (v25) {
LABEL_45:
  }
    memmove(v27, v24, (size_t)v26);
  *((unsigned char *)v26 + (void)v27) = 0;
  v60[0] = MEMORY[0x1E4F143A8];
  v60[1] = 1174405120;
  v60[2] = ___ZN13AntennaModule25finishInitialization_syncEv_block_invoke_30;
  v60[3] = &__block_descriptor_tmp_33_4;
  v60[4] = this;
  v60[5] = v13;
  unint64_t v61 = v15;
  atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::string v30 = _Block_copy(v60);
  uint64_t v31 = this[17];
  if (v31) {
    dispatch_retain((dispatch_object_t)this[17]);
  }
  int v62 = v30;
  dispatch_object_t object = v31;
  AppleBasebandManager::setEventHandler();
  if (object) {
    dispatch_release(object);
  }
  if (v62) {
    _Block_release(v62);
  }
  if (SHIBYTE(v65) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v32 = (const void *)*MEMORY[0x1E4F4CEF8];
  size_t v33 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
  if (v33 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v34 = (void *)v33;
  if (v33 >= 0x17)
  {
    uint64_t v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17) {
      uint64_t v36 = v33 | 7;
    }
    uint64_t v37 = v36 + 1;
    float v35 = operator new(v36 + 1);
    v58[1] = v34;
    unint64_t v59 = v37 | 0x8000000000000000;
    v58[0] = v35;
    goto LABEL_61;
  }
  HIBYTE(v59) = v33;
  float v35 = v58;
  if (v33) {
LABEL_61:
  }
    memmove(v35, v32, (size_t)v34);
  *((unsigned char *)v34 + (void)v35) = 0;
  v54[0] = MEMORY[0x1E4F143A8];
  v54[1] = 1174405120;
  v54[2] = ___ZN13AntennaModule25finishInitialization_syncEv_block_invoke_34;
  v54[3] = &__block_descriptor_tmp_37_5;
  v54[4] = this;
  v54[5] = v13;
  BOOL v55 = v15;
  atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  long long v38 = _Block_copy(v54);
  long long v39 = this[17];
  if (v39) {
    dispatch_retain((dispatch_object_t)this[17]);
  }
  int v56 = v38;
  dispatch_object_t v57 = v39;
  AppleBasebandManager::setEventHandler();
  if (v57) {
    dispatch_release(v57);
  }
  if (v56) {
    _Block_release(v56);
  }
  if (SHIBYTE(v59) < 0) {
    operator delete(v58[0]);
  }
  unint64_t v40 = (const void *)*MEMORY[0x1E4F4C220];
  size_t v41 = strlen((const char *)*MEMORY[0x1E4F4C220]);
  if (v41 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  long long v42 = (void *)v41;
  if (v41 >= 0x17)
  {
    uint64_t v44 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v41 | 7) != 0x17) {
      uint64_t v44 = v41 | 7;
    }
    uint64_t v45 = v44 + 1;
    uint64_t v43 = operator new(v44 + 1);
    v52[1] = v42;
    unint64_t v53 = v45 | 0x8000000000000000;
    v52[0] = v43;
    goto LABEL_77;
  }
  HIBYTE(v53) = v41;
  uint64_t v43 = v52;
  if (v41) {
LABEL_77:
  }
    memmove(v43, v40, (size_t)v42);
  *((unsigned char *)v42 + (void)v43) = 0;
  v48[0] = MEMORY[0x1E4F143A8];
  v48[1] = 1174405120;
  v48[2] = ___ZN13AntennaModule25finishInitialization_syncEv_block_invoke_38;
  v48[3] = &__block_descriptor_tmp_41_2;
  v48[4] = this;
  v48[5] = v13;
  uint64_t v49 = v15;
  atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v46 = _Block_copy(v48);
  size_t v47 = this[17];
  if (v47) {
    dispatch_retain((dispatch_object_t)this[17]);
  }
  unint64_t v50 = v46;
  dispatch_object_t v51 = v47;
  AppleBasebandManager::setEventHandler();
  if (v51) {
    dispatch_release(v51);
  }
  if (v50) {
    _Block_release(v50);
  }
  if (SHIBYTE(v53) < 0) {
    operator delete(v52[0]);
  }
  AppleBasebandManager::eventsOn((AppleBasebandManager *)this[20]);
  if (v49) {
    std::__shared_weak_count::__release_weak(v49);
  }
  if (v55) {
    std::__shared_weak_count::__release_weak(v55);
  }
  if (v61) {
    std::__shared_weak_count::__release_weak(v61);
  }
  if (v67) {
    std::__shared_weak_count::__release_weak(v67);
  }
  std::__shared_weak_count::__release_weak(v15);
}

void sub_1C5B56B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,char a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (a30) {
    std::__shared_weak_count::__release_weak(a30);
  }
  if (a45) {
    std::__shared_weak_count::__release_weak(a45);
  }
  int v56 = *(std::__shared_weak_count **)(v54 - 192);
  if (v56) {
    std::__shared_weak_count::__release_weak(v56);
  }
  std::__shared_weak_count::__release_weak(v53);
  _Unwind_Resume(a1);
}

void ___ZN13AntennaModule25finishInitialization_syncEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    BOOL v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = a1[5];
      if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v6) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6) {
          return;
        }
      }
      uint64_t v7 = *(antenna::Service::Internal ***)(v3 + 176);
      if (v7)
      {
        long long v8 = *v7;
        if (*v7)
        {
          antenna::Service::Internal::dumpState(v8);
        }
      }
    }
  }
}

void ___ZN13AntennaModule25finishInitialization_syncEv_block_invoke_30(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    BOOL v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = a1[5];
      if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v6) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6) {
          return;
        }
      }
      uint64_t v7 = *(antenna::Service::Internal ***)(v3 + 176);
      if (v7)
      {
        long long v8 = *v7;
        if (*v7)
        {
          antenna::Service::Internal::dumpState(v8);
        }
      }
    }
  }
}

void ___ZN13AntennaModule25finishInitialization_syncEv_block_invoke_34(void *a1, abm::client::Event **a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      if (*(void *)(v5 + 176))
      {
        CFDictionaryRef v24 = (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL;
        abm::client::Event::getData((uint64_t *)&v24, *a2);
        CFDictionaryRef v9 = v24;
        if (v24) {
          uint64_t v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
        }
        else {
          uint64_t v10 = 0;
        }
        if (v10)
        {
          v23[0] = 0xAAAAAAAAAAAAAAAALL;
          v23[1] = 0xAAAAAAAAAAAAAAAALL;
          ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v23, v24);
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v22 = 0;
          ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v25, (const char *)*MEMORY[0x1E4F4C688]);
          ctu::cf::map_adapter::getString();
          MEMORY[0x1C8794290](&v25);
          uint64_t v22 = v20;
          *(_OWORD *)std::string __p = v19;
          if (v20 >= 0) {
            size_t v11 = HIBYTE(v20);
          }
          else {
            size_t v11 = *((void *)&v19 + 1);
          }
          if (v11 == strlen((const char *)*MEMORY[0x1E4F4CAE8])
            && (v20 >= 0 ? (uint64_t v12 = __p) : (uint64_t v12 = (void **)__p[0]), !memcmp(v12, (const void *)*MEMORY[0x1E4F4CAE8], v11)))
          {
            uint64_t v18 = **(antenna::Service::Internal ***)(v5 + 176);
            if (v18) {
              antenna::Service::Internal::startService(v18);
            }
          }
          else if (v11 == strlen((const char *)*MEMORY[0x1E4F4CCD8]) {
                 && (v20 >= 0 ? (uint64_t v13 = __p) : (uint64_t v13 = (void **)__p[0]),
          }
                     !memcmp(v13, (const void *)*MEMORY[0x1E4F4CCD8], v11))
                 || v11 == strlen((const char *)*MEMORY[0x1E4F4CEB8])
                 && (v20 >= 0 ? (size_t v14 = __p) : (size_t v14 = (void **)__p[0]),
                     !memcmp(v14, (const void *)*MEMORY[0x1E4F4CEB8], v11))
                 || v11 == strlen((const char *)*MEMORY[0x1E4F4C6E0])
                 && (v20 >= 0 ? (uint64_t v15 = __p) : (uint64_t v15 = (void **)__p[0]),
                     !memcmp(v15, (const void *)*MEMORY[0x1E4F4C6E0], v11))
                 || v11 == strlen((const char *)*MEMORY[0x1E4F4CAF0])
                 && (v20 >= 0 ? (unint64_t v16 = __p) : (unint64_t v16 = (void **)__p[0]),
                     !memcmp(v16, (const void *)*MEMORY[0x1E4F4CAF0], v11)))
          {
            size_t v17 = **(antenna::Service::Internal ***)(v5 + 176);
            if (v17) {
              antenna::Service::Internal::stopService(v17);
            }
          }
          if (SHIBYTE(v22) < 0) {
            operator delete(__p[0]);
          }
          MEMORY[0x1C87942E0](v23);
          CFDictionaryRef v9 = v24;
        }
        if (v9) {
          CFRelease(v9);
        }
      }
    }
  }
}

void ___ZN13AntennaModule25finishInitialization_syncEv_block_invoke_38(void *a1, abm::client::Event **a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      if (*(void *)(v5 + 176))
      {
        *(void *)std::string buf = 0xAAAAAAAAAAAAAAAALL;
        abm::client::Event::getData((uint64_t *)buf, *a2);
        if (*(void *)buf) {
          uint64_t v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
        }
        else {
          uint64_t v10 = 0;
        }
        if (v10)
        {
          ctu::cf_to_xpc((uint64_t *)object, *(ctu **)buf, v9);
          xpc_object_t v11 = object[0];
          if (object[0] && MEMORY[0x1C8795EB0](object[0]) == MEMORY[0x1E4F14590]) {
            xpc_retain(v11);
          }
          else {
            xpc_object_t v11 = xpc_null_create();
          }
          xpc_release(object[0]);
          xpc_object_t value = xpc_dictionary_get_value(v11, (const char *)*MEMORY[0x1E4F4C1B0]);
          object[0] = value;
          if (value) {
            xpc_retain(value);
          }
          else {
            object[0] = xpc_null_create();
          }
          int v15 = xpc::dyn_cast_or_default((xpc *)object, 0);
          xpc_release(object[0]);
          unint64_t v16 = *(antenna::Service **)(v5 + 176);
          if (v15) {
            antenna::Service::callActive(v16);
          }
          else {
            antenna::Service::callInactive(v16);
          }
          xpc_release(v11);
        }
        else
        {
          uint64_t v13 = *(NSObject **)(v5 + 88);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            LOWORD(object[0]) = 0;
            _os_log_error_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_ERROR, "No input is given for voice call active state", (uint8_t *)object, 2u);
          }
        }
        if (*(void *)buf) {
          CFRelease(*(CFTypeRef *)buf);
        }
      }
      else
      {
        uint64_t v12 = *(NSObject **)(v5 + 88);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_error_impl(&dword_1C59C6000, v12, OS_LOG_TYPE_ERROR, "Antenna Service has not created yet.", buf, 2u);
        }
      }
    }
  }
}

void sub_1C5B57334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, const void *a11)
{
  xpc_release(v11);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a11);
  _Unwind_Resume(a1);
}

void AntennaModule::sleep(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  BOOL v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = operator new(0x10uLL);
  void *v8 = a1;
  v8[1] = v3;
  CFDictionaryRef v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  _DWORD v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<AntennaModule>::execute_wrapped<AntennaModule::sleep(dispatch::group_session)::$_0>(AntennaModule::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<AntennaModule::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<AntennaModule::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void AntennaModule::wake(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  BOOL v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = operator new(0x10uLL);
  void *v8 = a1;
  v8[1] = v3;
  CFDictionaryRef v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  _DWORD v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<AntennaModule>::execute_wrapped<AntennaModule::wake(dispatch::group_session)::$_0>(AntennaModule::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<AntennaModule::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<AntennaModule::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void AntennaModule::setPreference_sync<std::string>(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!(void)xmmword_1EBBDC7D8)
  {
    uint64_t v7 = operator new(0x18uLL);
    MEMORY[0x1C87942F0](v7, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
    uint64_t v6 = operator new(0x20uLL);
    void *v6 = &unk_1F210A638;
    v6[1] = 0;
    uint64_t v6[2] = 0;
    v6[3] = v7;
    uint64_t v8 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDC7D8 + 1);
    *(void *)&xmmword_1EBBDC7D8 = v7;
    *((void *)&xmmword_1EBBDC7D8 + 1) = v6;
    if (!v8)
    {
      *(void *)&long long v23 = v7;
      *((void *)&v23 + 1) = v6;
      goto LABEL_8;
    }
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  uint64_t v6 = (void *)*((void *)&xmmword_1EBBDC7D8 + 1);
  LODWORD(v7) = xmmword_1EBBDC7D8;
  long long v23 = xmmword_1EBBDC7D8;
  if (*((void *)&xmmword_1EBBDC7D8 + 1)) {
LABEL_8:
  }
    atomic_fetch_add_explicit(v6 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  int v9 = *((char *)a2 + 23);
  if (v9 >= 0) {
    size_t v10 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v10 = (size_t)a2[1];
  }
  unint64_t v11 = v10 + 16;
  memset(buf, 170, sizeof(buf));
  if (v10 + 16 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v11 >= 0x17)
  {
    uint64_t v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v13 = v11 | 7;
    }
    uint64_t v14 = v13 + 1;
    int v15 = operator new(v13 + 1);
    *(void *)&uint8_t buf[8] = v10 + 16;
    *(void *)&uint8_t buf[16] = v14 | 0x8000000000000000;
    *(void *)std::string buf = v15;
    _OWORD *v15 = *(_OWORD *)"AntennaSetting::";
    uint64_t v12 = (uint8_t *)(v15 + 1);
LABEL_20:
    if (v9 >= 0) {
      unint64_t v16 = a2;
    }
    else {
      unint64_t v16 = *a2;
    }
    memmove(v12, v16, v10);
    v12[v10] = 0;
    if ((*(char *)(a3 + 23) & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_24;
  }
  uint64_t v12 = &buf[16];
  *(void *)&uint8_t buf[16] = 0;
  buf[23] = v10 + 16;
  *(_OWORD *)std::string buf = *(_OWORD *)"AntennaSetting::";
  if (v10) {
    goto LABEL_20;
  }
  uint8_t buf[16] = 0;
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
LABEL_16:
    std::string __p = *(std::string *)a3;
    goto LABEL_25;
  }
LABEL_24:
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
LABEL_25:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v24, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v24 = __p;
  }
  if ((buf[23] & 0x80u) == 0) {
    size_t v17 = (char *)buf;
  }
  else {
    size_t v17 = *(char **)buf;
  }
  char v18 = ctu::cf::plist_adapter::set<std::string>((int)v7, (uint64_t)&v24, v17);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v24.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_33:
      if (((char)buf[23] & 0x80000000) == 0) {
        goto LABEL_34;
      }
      goto LABEL_38;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_33;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (((char)buf[23] & 0x80000000) == 0)
  {
LABEL_34:
    long long v19 = (std::__shared_weak_count *)*((void *)&v23 + 1);
    if (!*((void *)&v23 + 1)) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(*(void **)buf);
  long long v19 = (std::__shared_weak_count *)*((void *)&v23 + 1);
  if (!*((void *)&v23 + 1)) {
    goto LABEL_40;
  }
LABEL_39:
  if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    if (v18) {
      return;
    }
    goto LABEL_41;
  }
LABEL_40:
  if (v18) {
    return;
  }
LABEL_41:
  uint64_t v20 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = *(_OWORD *)"AntennaSetting::";
    v24.__r_.__value_.__r.__words[2] = 0x1000000000000000;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v21 = a2;
    }
    else {
      uint64_t v21 = (void *)*a2;
    }
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = &v24;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v21;
    _os_log_error_impl(&dword_1C59C6000, v20, OS_LOG_TYPE_ERROR, "Failed to set property with %s%s", buf, 0x16u);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C5B57984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a30 & 0x80000000) == 0)
    {
LABEL_3:
      std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if ((a30 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a25);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1C5B57A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void AntennaModule::setPreference_sync<int>(uint64_t a1, const void **a2, int a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!(void)xmmword_1EBBDC7D8)
  {
    uint64_t v7 = (CFStringRef *)operator new(0x18uLL);
    MEMORY[0x1C87942F0](v7, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
    uint64_t v6 = operator new(0x20uLL);
    void *v6 = &unk_1F210A638;
    v6[1] = 0;
    uint64_t v6[2] = 0;
    v6[3] = v7;
    uint64_t v8 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDC7D8 + 1);
    *(void *)&xmmword_1EBBDC7D8 = v7;
    *((void *)&xmmword_1EBBDC7D8 + 1) = v6;
    if (!v8)
    {
      *(void *)std::string buf = v7;
      *(void *)&uint8_t buf[8] = v6;
      goto LABEL_8;
    }
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  uint64_t v6 = (void *)*((void *)&xmmword_1EBBDC7D8 + 1);
  uint64_t v7 = (CFStringRef *)xmmword_1EBBDC7D8;
  *(_OWORD *)std::string buf = xmmword_1EBBDC7D8;
  if (*((void *)&xmmword_1EBBDC7D8 + 1)) {
LABEL_8:
  }
    atomic_fetch_add_explicit(v6 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  int v9 = *((char *)a2 + 23);
  if (v9 >= 0) {
    size_t v10 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v10 = (size_t)a2[1];
  }
  unint64_t v11 = v10 + 16;
  memset(__p, 170, sizeof(__p));
  if (v10 + 16 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v11 >= 0x17)
  {
    uint64_t v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v13 = v11 | 7;
    }
    uint64_t v14 = v13 + 1;
    int v15 = (void **)operator new(v13 + 1);
    __p[1] = (void *)(v10 + 16);
    xpc_object_t __p[2] = (void *)(v14 | 0x8000000000000000);
    __p[0] = v15;
    *(_OWORD *)int v15 = *(_OWORD *)"AntennaSetting::";
    uint64_t v12 = v15 + 2;
  }
  else
  {
    uint64_t v12 = &__p[2];
    xpc_object_t __p[2] = 0;
    HIBYTE(__p[2]) = v10 + 16;
    *(_OWORD *)std::string __p = *(_OWORD *)"AntennaSetting::";
    if (!v10) {
      goto LABEL_23;
    }
  }
  if (v9 >= 0) {
    unint64_t v16 = a2;
  }
  else {
    unint64_t v16 = *a2;
  }
  memmove(v12, v16, v10);
LABEL_23:
  *((unsigned char *)v12 + v10) = 0;
  if (SHIBYTE(__p[2]) >= 0) {
    size_t v17 = __p;
  }
  else {
    size_t v17 = (void **)__p[0];
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v27, (const char *)v17);
  CFStringRef v18 = (const __CFString *)v27[0];
  CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  int valuePtr = a3;
  CFNumberRef v20 = CFNumberCreate(v19, kCFNumberIntType, &valuePtr);
  v27[1] = v20;
  if (v20)
  {
    CFStringRef v21 = (const __CFString *)*MEMORY[0x1E4F1D3E0];
    CFPreferencesSetValue(v18, v20, v7[1], v7[2], (CFStringRef)*MEMORY[0x1E4F1D3E0]);
    BOOL v22 = CFPreferencesSynchronize(v7[1], v7[2], v21) != 0;
    CFRelease(v20);
    MEMORY[0x1C8794290](v27);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
  }
  else
  {
    BOOL v22 = 0;
    MEMORY[0x1C8794290](v27);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    {
LABEL_28:
      long long v23 = *(std::__shared_weak_count **)&buf[8];
      if (!*(void *)&buf[8]) {
        goto LABEL_33;
      }
      goto LABEL_32;
    }
  }
  operator delete(__p[0]);
  long long v23 = *(std::__shared_weak_count **)&buf[8];
  if (!*(void *)&buf[8]) {
    goto LABEL_33;
  }
LABEL_32:
  if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    if (v22) {
      return;
    }
    goto LABEL_34;
  }
LABEL_33:
  if (v22) {
    return;
  }
LABEL_34:
  std::string v24 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)std::string __p = *(_OWORD *)"AntennaSetting::";
    xpc_object_t __p[2] = (void *)0x1000000000000000;
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v25 = a2;
    }
    else {
      uint64_t v25 = (void *)*a2;
    }
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = __p;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v25;
    _os_log_error_impl(&dword_1C59C6000, v24, OS_LOG_TYPE_ERROR, "Failed to set property with %s%s", buf, 0x16u);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }
}

void AntennaModule::setPreference_sync<unsigned int>(uint64_t a1, const void **a2, unsigned int a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!(void)xmmword_1EBBDC7D8)
  {
    uint64_t v7 = operator new(0x18uLL);
    MEMORY[0x1C87942F0](v7, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
    uint64_t v6 = operator new(0x20uLL);
    void *v6 = &unk_1F210A638;
    v6[1] = 0;
    uint64_t v6[2] = 0;
    v6[3] = v7;
    uint64_t v8 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDC7D8 + 1);
    *(void *)&xmmword_1EBBDC7D8 = v7;
    *((void *)&xmmword_1EBBDC7D8 + 1) = v6;
    if (!v8)
    {
      *(void *)std::string buf = v7;
      *(void *)&uint8_t buf[8] = v6;
      goto LABEL_8;
    }
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  uint64_t v6 = (void *)*((void *)&xmmword_1EBBDC7D8 + 1);
  uint64_t v7 = (void *)xmmword_1EBBDC7D8;
  *(_OWORD *)std::string buf = xmmword_1EBBDC7D8;
  if (*((void *)&xmmword_1EBBDC7D8 + 1)) {
LABEL_8:
  }
    atomic_fetch_add_explicit(v6 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  int v9 = *((char *)a2 + 23);
  if (v9 >= 0) {
    size_t v10 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v10 = (size_t)a2[1];
  }
  unint64_t v11 = v10 + 16;
  memset(__p, 170, sizeof(__p));
  if (v10 + 16 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v11 >= 0x17)
  {
    uint64_t v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v13 = v11 | 7;
    }
    uint64_t v14 = v13 + 1;
    int v15 = (void **)operator new(v13 + 1);
    __p[1] = (void *)(v10 + 16);
    xpc_object_t __p[2] = (void *)(v14 | 0x8000000000000000);
    __p[0] = v15;
    *(_OWORD *)int v15 = *(_OWORD *)"AntennaSetting::";
    uint64_t v12 = v15 + 2;
  }
  else
  {
    uint64_t v12 = &__p[2];
    xpc_object_t __p[2] = 0;
    HIBYTE(__p[2]) = v10 + 16;
    *(_OWORD *)std::string __p = *(_OWORD *)"AntennaSetting::";
    if (!v10) {
      goto LABEL_23;
    }
  }
  if (v9 >= 0) {
    unint64_t v16 = a2;
  }
  else {
    unint64_t v16 = *a2;
  }
  memmove(v12, v16, v10);
LABEL_23:
  *((unsigned char *)v12 + v10) = 0;
  if (SHIBYTE(__p[2]) >= 0) {
    size_t v17 = __p;
  }
  else {
    size_t v17 = (void **)__p[0];
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v23, (const char *)v17);
  BOOL v18 = ctu::cf::plist_adapter::set<unsigned int>((uint64_t)v7, a3, v23, 1);
  MEMORY[0x1C8794290](&v23);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  CFAllocatorRef v19 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    if (v18) {
      return;
    }
  }
  else if (v18)
  {
    return;
  }
  CFNumberRef v20 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)std::string __p = *(_OWORD *)"AntennaSetting::";
    xpc_object_t __p[2] = (void *)0x1000000000000000;
    if (*((char *)a2 + 23) >= 0) {
      CFStringRef v21 = a2;
    }
    else {
      CFStringRef v21 = (void *)*a2;
    }
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = __p;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v21;
    _os_log_error_impl(&dword_1C59C6000, v20, OS_LOG_TYPE_ERROR, "Failed to set property with %s%s", buf, 0x16u);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }
}

void AntennaModule::initializeProperty(AntennaModule *this)
{
  for (uint64_t i = (uint64_t *)*((void *)this + 19); i; uint64_t i = (uint64_t *)*i)
  {
    memset(&v13, 170, sizeof(v13));
    if (*((char *)i + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v13, (const std::string::value_type *)i[1], i[2]);
      unint64_t v11 = this;
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_8:
        std::string::__init_copy_ctor_external(&__p, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
        goto LABEL_9;
      }
    }
    else
    {
      long long v3 = *(_OWORD *)(i + 1);
      v13.__r_.__value_.__r.__words[2] = i[3];
      *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v3;
      unint64_t v11 = this;
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_8;
      }
    }
    std::string __p = v13;
LABEL_9:
    BOOL v4 = (std::__shared_weak_count *)*((void *)this + 16);
    if (!v4 || (uint64_t v5 = *((void *)this + 15), (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v7 = v6;
    uint64_t v8 = (char *)operator new(0x20uLL);
    *(void *)uint64_t v8 = v11;
    *(std::string *)(v8 + 8) = __p;
    memset(&__p, 0, sizeof(__p));
    int v9 = *((void *)this + 17);
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    size_t v10 = operator new(0x18uLL);
    void *v10 = v8;
    v10[1] = v5;
    _DWORD v10[2] = v7;
    dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<AntennaModule>::execute_wrapped<AntennaModule::initializeProperty(void)::$_0>(AntennaModule::initializeProperty(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<AntennaModule::initializeProperty(void)::$_0,dispatch_queue_s *::default_delete<AntennaModule::initializeProperty(void)::$_0>>)::{lambda(void *)#1}::__invoke);
    if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_13;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_13:
        if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_17;
        }
        continue;
      }
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
LABEL_17:
    }
      operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_1C5B5848C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AntennaModule::initializeProperty_sync(uint64_t a1, uint64_t a2)
{
  xpc_object_t v396 = xpc_null_create();
  BOOL v4 = (const void *)*MEMORY[0x1E4F4CAF8];
  size_t v5 = strlen((const char *)*MEMORY[0x1E4F4CAF8]);
  size_t v6 = v5;
  size_t v7 = *(unsigned __int8 *)(a2 + 23);
  if (*(char *)(a2 + 23) < 0)
  {
    if (v5 == -1) {
      goto LABEL_775;
    }
    int v9 = *(const void **)a2;
    size_t v8 = *(void *)(a2 + 8);
  }
  else
  {
    size_t v8 = *(unsigned __int8 *)(a2 + 23);
    int v9 = (const void *)a2;
    if (v6 == -1) {
LABEL_775:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v8 >= v6) {
    size_t v10 = v6;
  }
  else {
    size_t v10 = v8;
  }
  BOOL v11 = !memcmp(v9, v4, v10) && v8 == v6;
  uint64_t v12 = MEMORY[0x1E4F14590];
  if (v11)
  {
    v393 = 0;
    uint64_t v394 = 0;
    uint64_t v395 = 0;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    if (!qword_1EBBDC7D8)
    {
      CFAllocatorRef v19 = (uint64_t (***)(void *, int64_t))operator new(0x18uLL);
      MEMORY[0x1C87942F0](v19, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
      BOOL v18 = operator new(0x20uLL);
      *BOOL v18 = &unk_1F210A638;
      v18[1] = 0;
      v18[2] = 0;
      void v18[3] = v19;
      uint64_t v29 = (std::__shared_weak_count *)off_1EBBDC7E0;
      qword_1EBBDC7D8 = (uint64_t)v19;
      off_1EBBDC7E0 = v18;
      if (!v29)
      {
        __p[0] = v19;
        __p[1] = v18;
        goto LABEL_61;
      }
      if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    CFAllocatorRef v19 = (uint64_t (***)(void *, int64_t))qword_1EBBDC7D8;
    BOOL v18 = off_1EBBDC7E0;
    __p[0] = (void *)qword_1EBBDC7D8;
    __p[1] = off_1EBBDC7E0;
    if (!off_1EBBDC7E0)
    {
LABEL_62:
      pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
      int v39 = *(char *)(a2 + 23);
      if (v39 >= 0) {
        size_t v40 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        size_t v40 = *(void *)(a2 + 8);
      }
      unint64_t v41 = v40 + 16;
      memset(__dst, 170, 24);
      if (v40 + 16 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v41 >= 0x17)
      {
        uint64_t v43 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v41 | 7) != 0x17) {
          uint64_t v43 = v41 | 7;
        }
        uint64_t v44 = v43 + 1;
        uint64_t v45 = operator new(v43 + 1);
        *((void *)&__dst[0] + 1) = v40 + 16;
        *(void *)&__dst[1] = v44 | 0x8000000000000000;
        *(void *)&__dst[0] = v45;
        _OWORD *v45 = *(_OWORD *)"AntennaSetting::";
        long long v42 = v45 + 1;
      }
      else
      {
        long long v42 = &__dst[1];
        *(void *)&__dst[1] = 0;
        BYTE7(__dst[1]) = v40 + 16;
        __dst[0] = *(_OWORD *)"AntennaSetting::";
        if (!v40) {
          goto LABEL_76;
        }
      }
      if (v39 >= 0) {
        uint64_t v46 = (const void *)a2;
      }
      else {
        uint64_t v46 = *(const void **)a2;
      }
      memmove(v42, v46, v40);
LABEL_76:
      *((unsigned char *)v42 + v40) = 0;
      if ((SBYTE7(__dst[1]) & 0x80u) == 0) {
        size_t v47 = (const char *)__dst;
      }
      else {
        size_t v47 = *(const char **)&__dst[0];
      }
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&value, v47);
      unint64_t v48 = (const void *)(**v19)(v19, value);
      if (v48)
      {
        int v49 = ctu::cf::assign();
        CFRelease(v48);
        MEMORY[0x1C8794290](&value);
        if ((SBYTE7(__dst[1]) & 0x80000000) == 0) {
          goto LABEL_81;
        }
      }
      else
      {
        int v49 = 0;
        MEMORY[0x1C8794290](&value);
        if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
        {
LABEL_81:
          unint64_t v50 = (std::__shared_weak_count *)__p[1];
          if (!__p[1]) {
            goto LABEL_86;
          }
          goto LABEL_85;
        }
      }
      operator delete(*(void **)&__dst[0]);
      unint64_t v50 = (std::__shared_weak_count *)__p[1];
      if (!__p[1]) {
        goto LABEL_86;
      }
LABEL_85:
      if (!atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
        if (!v49) {
          goto LABEL_769;
        }
LABEL_87:
        xpc_object_t v51 = xpc_dictionary_create(0, 0, 0);
        if (v51 || (xpc_object_t v51 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C8795EB0](v51) == v12)
          {
            xpc_retain(v51);
            xpc_object_t v52 = v51;
          }
          else
          {
            xpc_object_t v52 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v52 = xpc_null_create();
          xpc_object_t v51 = 0;
        }
        xpc_release(v51);
        xpc_object_t v76 = xpc_null_create();
        v77 = v396;
        xpc_object_t v396 = v52;
        xpc_release(v77);
        xpc_release(v76);
        xpc_object_t v78 = xpc_string_create((const char *)v4);
        if (!v78) {
          xpc_object_t v78 = xpc_null_create();
        }
        xpc_dictionary_set_value(v396, (const char *)*MEMORY[0x1E4F4C878], v78);
        xpc_object_t v79 = xpc_null_create();
        xpc_release(v78);
        xpc_release(v79);
        xpc_object_t v80 = xpc_dictionary_create(0, 0, 0);
        if (v80 || (xpc_object_t v80 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C8795EB0](v80) == v12)
          {
            xpc_retain(v80);
            xpc_object_t v81 = v80;
          }
          else
          {
            xpc_object_t v81 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v81 = xpc_null_create();
          xpc_object_t v80 = 0;
        }
        xpc_release(v80);
        if (v395 >= 0) {
          uint64_t v82 = (const char *)&v393;
        }
        else {
          uint64_t v82 = v393;
        }
        xpc_object_t v83 = xpc_string_create(v82);
        if (!v83) {
          xpc_object_t v83 = xpc_null_create();
        }
        xpc_dictionary_set_value(v81, (const char *)*MEMORY[0x1E4F4D290], v83);
        xpc_object_t v84 = xpc_null_create();
        xpc_release(v83);
        xpc_release(v84);
        if (v81)
        {
LABEL_476:
          xpc_retain(v81);
          xpc_object_t v234 = v81;
LABEL_478:
          xpc_dictionary_set_value(v396, (const char *)*MEMORY[0x1E4F4C628], v234);
          xpc_object_t v235 = xpc_null_create();
          xpc_release(v234);
          xpc_release(v235);
          xpc_release(v81);
          goto LABEL_769;
        }
LABEL_477:
        xpc_object_t v234 = xpc_null_create();
        goto LABEL_478;
      }
LABEL_86:
      if (!v49) {
        goto LABEL_769;
      }
      goto LABEL_87;
    }
LABEL_61:
    atomic_fetch_add_explicit(v18 + 1, 1uLL, memory_order_relaxed);
    goto LABEL_62;
  }
  std::string v13 = (const char *)*MEMORY[0x1E4F4C508];
  size_t v14 = strlen((const char *)*MEMORY[0x1E4F4C508]);
  size_t v15 = v14;
  if ((v7 & 0x80) != 0)
  {
    if (v14 == -1) {
      goto LABEL_776;
    }
    size_t v17 = *(const void **)a2;
    size_t v16 = *(void *)(a2 + 8);
  }
  else
  {
    size_t v16 = v7;
    size_t v17 = (const void *)a2;
    if (v15 == -1) {
LABEL_776:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v16 >= v15) {
    size_t v20 = v15;
  }
  else {
    size_t v20 = v16;
  }
  if (!memcmp(v17, v13, v20) && v16 == v15)
  {
    v393 = 0;
    uint64_t v394 = 0;
    uint64_t v395 = 0;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    if (!qword_1EBBDC7D8)
    {
      uint64_t v28 = (uint64_t (***)(void *, int64_t))operator new(0x18uLL);
      MEMORY[0x1C87942F0](v28, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
      unint64_t v27 = operator new(0x20uLL);
      void *v27 = &unk_1F210A638;
      v27[1] = 0;
      void v27[2] = 0;
      v27[3] = v28;
      long long v38 = (std::__shared_weak_count *)off_1EBBDC7E0;
      qword_1EBBDC7D8 = (uint64_t)v28;
      off_1EBBDC7E0 = v27;
      if (!v38)
      {
        __p[0] = v28;
        __p[1] = v27;
        goto LABEL_114;
      }
      if (!atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    uint64_t v28 = (uint64_t (***)(void *, int64_t))qword_1EBBDC7D8;
    unint64_t v27 = off_1EBBDC7E0;
    __p[0] = (void *)qword_1EBBDC7D8;
    __p[1] = off_1EBBDC7E0;
    if (!off_1EBBDC7E0)
    {
LABEL_115:
      pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
      int v62 = *(char *)(a2 + 23);
      if (v62 >= 0) {
        size_t v63 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        size_t v63 = *(void *)(a2 + 8);
      }
      unint64_t v64 = v63 + 16;
      memset(__dst, 170, 24);
      if (v63 + 16 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v64 >= 0x17)
      {
        uint64_t v66 = (v64 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v64 | 7) != 0x17) {
          uint64_t v66 = v64 | 7;
        }
        uint64_t v67 = v66 + 1;
        uint64_t v68 = operator new(v66 + 1);
        *((void *)&__dst[0] + 1) = v63 + 16;
        *(void *)&__dst[1] = v67 | 0x8000000000000000;
        *(void *)&__dst[0] = v68;
        _OWORD *v68 = *(_OWORD *)"AntennaSetting::";
        unint64_t v65 = v68 + 1;
      }
      else
      {
        unint64_t v65 = &__dst[1];
        *(void *)&__dst[1] = 0;
        BYTE7(__dst[1]) = v63 + 16;
        __dst[0] = *(_OWORD *)"AntennaSetting::";
        if (!v63) {
          goto LABEL_129;
        }
      }
      if (v62 >= 0) {
        dispatch_object_t v69 = (const void *)a2;
      }
      else {
        dispatch_object_t v69 = *(const void **)a2;
      }
      memmove(v65, v69, v63);
LABEL_129:
      *((unsigned char *)v65 + v63) = 0;
      if ((SBYTE7(__dst[1]) & 0x80u) == 0) {
        uint64_t v70 = (const char *)__dst;
      }
      else {
        uint64_t v70 = *(const char **)&__dst[0];
      }
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&value, v70);
      unint64_t v71 = (const void *)(**v28)(v28, value);
      if (v71)
      {
        int v72 = ctu::cf::assign();
        CFRelease(v71);
        MEMORY[0x1C8794290](&value);
        if ((SBYTE7(__dst[1]) & 0x80000000) == 0) {
          goto LABEL_134;
        }
      }
      else
      {
        int v72 = 0;
        MEMORY[0x1C8794290](&value);
        if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
        {
LABEL_134:
          CFTypeRef v73 = (std::__shared_weak_count *)__p[1];
          if (!__p[1]) {
            goto LABEL_139;
          }
          goto LABEL_138;
        }
      }
      operator delete(*(void **)&__dst[0]);
      CFTypeRef v73 = (std::__shared_weak_count *)__p[1];
      if (!__p[1]) {
        goto LABEL_139;
      }
LABEL_138:
      if (!atomic_fetch_add(&v73->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
        if (!v72) {
          goto LABEL_769;
        }
LABEL_140:
        xpc_object_t v74 = xpc_dictionary_create(0, 0, 0);
        if (v74 || (xpc_object_t v74 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C8795EB0](v74) == v12)
          {
            xpc_retain(v74);
            xpc_object_t v75 = v74;
          }
          else
          {
            xpc_object_t v75 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v75 = xpc_null_create();
          xpc_object_t v74 = 0;
        }
        xpc_release(v74);
        xpc_object_t v108 = xpc_null_create();
        uint64_t v109 = v396;
        xpc_object_t v396 = v75;
        xpc_release(v109);
        xpc_release(v108);
        xpc_object_t v110 = xpc_string_create(v13);
        if (!v110) {
          xpc_object_t v110 = xpc_null_create();
        }
        xpc_dictionary_set_value(v396, (const char *)*MEMORY[0x1E4F4C878], v110);
        xpc_object_t v111 = xpc_null_create();
        xpc_release(v110);
        xpc_release(v111);
        if (v395 >= 0) {
          __int16 v112 = (const char *)&v393;
        }
        else {
          __int16 v112 = v393;
        }
        xpc_object_t v113 = xpc_string_create(v112);
        if (!v113) {
          xpc_object_t v113 = xpc_null_create();
        }
        xpc_dictionary_set_value(v396, (const char *)*MEMORY[0x1E4F4C628], v113);
        xpc_object_t v114 = xpc_null_create();
        xpc_release(v113);
        xpc_release(v114);
        goto LABEL_769;
      }
LABEL_139:
      if (!v72) {
        goto LABEL_769;
      }
      goto LABEL_140;
    }
LABEL_114:
    atomic_fetch_add_explicit(v27 + 1, 1uLL, memory_order_relaxed);
    goto LABEL_115;
  }
  BOOL v22 = (const void *)*MEMORY[0x1E4F4C710];
  size_t v23 = strlen((const char *)*MEMORY[0x1E4F4C710]);
  size_t v24 = v23;
  if ((v7 & 0x80) == 0)
  {
    size_t v25 = v7;
    if (v23 != -1)
    {
      if (v7 >= v23) {
        size_t v26 = v23;
      }
      else {
        size_t v26 = v7;
      }
      if (memcmp((const void *)a2, v22, v26)) {
        goto LABEL_50;
      }
LABEL_46:
      if (v25 != v24) {
        goto LABEL_50;
      }
      v393 = 0;
      uint64_t v394 = 0;
      uint64_t v395 = 0;
      pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
      if (!qword_1EBBDC7D8)
      {
        uint64_t v32 = (uint64_t (***)(void *, int64_t))operator new(0x18uLL);
        MEMORY[0x1C87942F0](v32, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
        uint64_t v31 = operator new(0x20uLL);
        void *v31 = &unk_1F210A638;
        v31[1] = 0;
        v31[2] = 0;
        v31[3] = v32;
        unint64_t v61 = (std::__shared_weak_count *)off_1EBBDC7E0;
        qword_1EBBDC7D8 = (uint64_t)v32;
        off_1EBBDC7E0 = v31;
        if (!v61)
        {
          __p[0] = v32;
          __p[1] = v31;
          goto LABEL_179;
        }
        if (!atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      uint64_t v32 = (uint64_t (***)(void *, int64_t))qword_1EBBDC7D8;
      uint64_t v31 = off_1EBBDC7E0;
      __p[0] = (void *)qword_1EBBDC7D8;
      __p[1] = off_1EBBDC7E0;
      if (!off_1EBBDC7E0)
      {
LABEL_180:
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        int v94 = *(char *)(a2 + 23);
        if (v94 >= 0) {
          size_t v95 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          size_t v95 = *(void *)(a2 + 8);
        }
        unint64_t v96 = v95 + 16;
        memset(__dst, 170, 24);
        if (v95 + 16 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v96 >= 0x17)
        {
          uint64_t v98 = (v96 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v96 | 7) != 0x17) {
            uint64_t v98 = v96 | 7;
          }
          uint64_t v99 = v98 + 1;
          __int16 v100 = operator new(v98 + 1);
          *((void *)&__dst[0] + 1) = v95 + 16;
          *(void *)&__dst[1] = v99 | 0x8000000000000000;
          *(void *)&__dst[0] = v100;
          _OWORD *v100 = *(_OWORD *)"AntennaSetting::";
          uint64_t v97 = v100 + 1;
        }
        else
        {
          uint64_t v97 = &__dst[1];
          *(void *)&__dst[1] = 0;
          BYTE7(__dst[1]) = v95 + 16;
          __dst[0] = *(_OWORD *)"AntennaSetting::";
          if (!v95) {
            goto LABEL_194;
          }
        }
        if (v94 >= 0) {
          int v101 = (const void *)a2;
        }
        else {
          int v101 = *(const void **)a2;
        }
        memmove(v97, v101, v95);
LABEL_194:
        *((unsigned char *)v97 + v95) = 0;
        if ((SBYTE7(__dst[1]) & 0x80u) == 0) {
          uint64_t v102 = (const char *)__dst;
        }
        else {
          uint64_t v102 = *(const char **)&__dst[0];
        }
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&value, v102);
        std::string v103 = (const void *)(**v32)(v32, value);
        if (v103)
        {
          int v104 = ctu::cf::assign();
          CFRelease(v103);
          MEMORY[0x1C8794290](&value);
          if ((SBYTE7(__dst[1]) & 0x80000000) == 0) {
            goto LABEL_199;
          }
        }
        else
        {
          int v104 = 0;
          MEMORY[0x1C8794290](&value);
          if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
          {
LABEL_199:
            uint64_t v105 = (std::__shared_weak_count *)__p[1];
            if (!__p[1]) {
              goto LABEL_205;
            }
            goto LABEL_203;
          }
        }
        operator delete(*(void **)&__dst[0]);
        uint64_t v105 = (std::__shared_weak_count *)__p[1];
        if (!__p[1]) {
          goto LABEL_205;
        }
LABEL_203:
        if (!atomic_fetch_add(&v105->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
          std::__shared_weak_count::__release_weak(v105);
        }
LABEL_205:
        if (!v104) {
          goto LABEL_769;
        }
        xpc_object_t v106 = xpc_dictionary_create(0, 0, 0);
        if (v106 || (xpc_object_t v106 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C8795EB0](v106) == v12)
          {
            xpc_retain(v106);
            xpc_object_t v107 = v106;
          }
          else
          {
            xpc_object_t v107 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v107 = xpc_null_create();
          xpc_object_t v106 = 0;
        }
        xpc_release(v106);
        xpc_object_t v137 = xpc_null_create();
        long long v138 = v396;
        xpc_object_t v396 = v107;
        xpc_release(v138);
        xpc_release(v137);
        xpc_object_t v139 = xpc_string_create((const char *)v22);
        if (!v139) {
          xpc_object_t v139 = xpc_null_create();
        }
        xpc_dictionary_set_value(v396, (const char *)*MEMORY[0x1E4F4C878], v139);
        xpc_object_t v140 = xpc_null_create();
        xpc_release(v139);
        xpc_release(v140);
        xpc_object_t v141 = xpc_dictionary_create(0, 0, 0);
        if (v141 || (xpc_object_t v141 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C8795EB0](v141) == v12)
          {
            xpc_retain(v141);
            xpc_object_t v81 = v141;
          }
          else
          {
            xpc_object_t v81 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v81 = xpc_null_create();
          xpc_object_t v141 = 0;
        }
        xpc_release(v141);
        if (v395 >= 0) {
          int v142 = (const char *)&v393;
        }
        else {
          int v142 = v393;
        }
        xpc_object_t v143 = xpc_string_create(v142);
        if (!v143) {
          xpc_object_t v143 = xpc_null_create();
        }
        xpc_dictionary_set_value(v81, (const char *)*MEMORY[0x1E4F4D0C8], v143);
        xpc_object_t v144 = xpc_null_create();
        xpc_release(v143);
        xpc_release(v144);
        if (v81) {
          goto LABEL_476;
        }
        goto LABEL_477;
      }
LABEL_179:
      atomic_fetch_add_explicit(v31 + 1, 1uLL, memory_order_relaxed);
      goto LABEL_180;
    }
LABEL_778:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v23 == -1) {
    goto LABEL_778;
  }
  size_t v25 = *(void *)(a2 + 8);
  if (v25 >= v23) {
    size_t v30 = v23;
  }
  else {
    size_t v30 = *(void *)(a2 + 8);
  }
  if (!memcmp(*(const void **)a2, v22, v30)) {
    goto LABEL_46;
  }
LABEL_50:
  size_t v33 = (const void *)*MEMORY[0x1E4F4C868];
  size_t v34 = strlen((const char *)*MEMORY[0x1E4F4C868]);
  size_t v35 = v34;
  if ((v7 & 0x80) == 0)
  {
    size_t v36 = v7;
    if (v34 != -1)
    {
      if (v7 >= v34) {
        size_t v37 = v34;
      }
      else {
        size_t v37 = v7;
      }
      if (memcmp((const void *)a2, v33, v37)) {
        goto LABEL_103;
      }
LABEL_99:
      if (v36 != v35) {
        goto LABEL_103;
      }
      v393 = 0;
      uint64_t v394 = 0;
      uint64_t v395 = 0;
      pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
      if (!qword_1EBBDC7D8)
      {
        BOOL v55 = (uint64_t (***)(void *, int64_t))operator new(0x18uLL);
        MEMORY[0x1C87942F0](v55, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
        uint64_t v54 = operator new(0x20uLL);
        *uint64_t v54 = &unk_1F210A638;
        v54[1] = 0;
        v54[2] = 0;
        v54[3] = v55;
        long long v93 = (std::__shared_weak_count *)off_1EBBDC7E0;
        qword_1EBBDC7D8 = (uint64_t)v55;
        off_1EBBDC7E0 = v54;
        if (!v93)
        {
          __p[0] = v55;
          __p[1] = v54;
          goto LABEL_238;
        }
        if (!atomic_fetch_add(&v93->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
          std::__shared_weak_count::__release_weak(v93);
        }
      }
      BOOL v55 = (uint64_t (***)(void *, int64_t))qword_1EBBDC7D8;
      uint64_t v54 = off_1EBBDC7E0;
      __p[0] = (void *)qword_1EBBDC7D8;
      __p[1] = off_1EBBDC7E0;
      if (!off_1EBBDC7E0)
      {
LABEL_239:
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        int v123 = *(char *)(a2 + 23);
        if (v123 >= 0) {
          size_t v124 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          size_t v124 = *(void *)(a2 + 8);
        }
        unint64_t v125 = v124 + 16;
        memset(__dst, 170, 24);
        if (v124 + 16 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v125 >= 0x17)
        {
          uint64_t v127 = (v125 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v125 | 7) != 0x17) {
            uint64_t v127 = v125 | 7;
          }
          uint64_t v128 = v127 + 1;
          v129 = operator new(v127 + 1);
          *((void *)&__dst[0] + 1) = v124 + 16;
          *(void *)&__dst[1] = v128 | 0x8000000000000000;
          *(void *)&__dst[0] = v129;
          _OWORD *v129 = *(_OWORD *)"AntennaSetting::";
          int v126 = v129 + 1;
        }
        else
        {
          int v126 = &__dst[1];
          *(void *)&__dst[1] = 0;
          BYTE7(__dst[1]) = v124 + 16;
          __dst[0] = *(_OWORD *)"AntennaSetting::";
          if (!v124) {
            goto LABEL_253;
          }
        }
        if (v123 >= 0) {
          unsigned int v130 = (const void *)a2;
        }
        else {
          unsigned int v130 = *(const void **)a2;
        }
        memmove(v126, v130, v124);
LABEL_253:
        *((unsigned char *)v126 + v124) = 0;
        if ((SBYTE7(__dst[1]) & 0x80u) == 0) {
          std::string v131 = (const char *)__dst;
        }
        else {
          std::string v131 = *(const char **)&__dst[0];
        }
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&value, v131);
        uint64_t v132 = (const void *)(**v55)(v55, value);
        if (v132)
        {
          int v133 = ctu::cf::assign();
          CFRelease(v132);
          MEMORY[0x1C8794290](&value);
          if ((SBYTE7(__dst[1]) & 0x80000000) == 0) {
            goto LABEL_258;
          }
        }
        else
        {
          int v133 = 0;
          MEMORY[0x1C8794290](&value);
          if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
          {
LABEL_258:
            long long v134 = (std::__shared_weak_count *)__p[1];
            if (!__p[1]) {
              goto LABEL_264;
            }
            goto LABEL_262;
          }
        }
        operator delete(*(void **)&__dst[0]);
        long long v134 = (std::__shared_weak_count *)__p[1];
        if (!__p[1]) {
          goto LABEL_264;
        }
LABEL_262:
        if (!atomic_fetch_add(&v134->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
          std::__shared_weak_count::__release_weak(v134);
        }
LABEL_264:
        if (!v133) {
          goto LABEL_769;
        }
        xpc_object_t v135 = xpc_dictionary_create(0, 0, 0);
        if (v135 || (xpc_object_t v135 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C8795EB0](v135) == v12)
          {
            xpc_retain(v135);
            xpc_object_t v136 = v135;
          }
          else
          {
            xpc_object_t v136 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v136 = xpc_null_create();
          xpc_object_t v135 = 0;
        }
        xpc_release(v135);
        xpc_object_t v169 = xpc_null_create();
        v170 = v396;
        xpc_object_t v396 = v136;
        xpc_release(v170);
        xpc_release(v169);
        xpc_object_t v171 = xpc_string_create((const char *)v33);
        if (!v171) {
          xpc_object_t v171 = xpc_null_create();
        }
        xpc_dictionary_set_value(v396, (const char *)*MEMORY[0x1E4F4C878], v171);
        xpc_object_t v172 = xpc_null_create();
        xpc_release(v171);
        xpc_release(v172);
        xpc_object_t v173 = xpc_dictionary_create(0, 0, 0);
        if (v173 || (xpc_object_t v173 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C8795EB0](v173) == v12)
          {
            xpc_retain(v173);
            xpc_object_t v81 = v173;
          }
          else
          {
            xpc_object_t v81 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v81 = xpc_null_create();
          xpc_object_t v173 = 0;
        }
        xpc_release(v173);
        if (v395 >= 0) {
          v174 = (const char *)&v393;
        }
        else {
          v174 = v393;
        }
        xpc_object_t v175 = xpc_string_create(v174);
        if (!v175) {
          xpc_object_t v175 = xpc_null_create();
        }
        xpc_dictionary_set_value(v81, (const char *)*MEMORY[0x1E4F4D140], v175);
        xpc_object_t v176 = xpc_null_create();
        xpc_release(v175);
        xpc_release(v176);
        if (v81) {
          goto LABEL_476;
        }
        goto LABEL_477;
      }
LABEL_238:
      atomic_fetch_add_explicit(v54 + 1, 1uLL, memory_order_relaxed);
      goto LABEL_239;
    }
LABEL_780:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v34 == -1) {
    goto LABEL_780;
  }
  size_t v36 = *(void *)(a2 + 8);
  if (v36 >= v34) {
    size_t v53 = v34;
  }
  else {
    size_t v53 = *(void *)(a2 + 8);
  }
  if (!memcmp(*(const void **)a2, v33, v53)) {
    goto LABEL_99;
  }
LABEL_103:
  int v56 = (const void *)*MEMORY[0x1E4F4CFA8];
  size_t v57 = strlen((const char *)*MEMORY[0x1E4F4CFA8]);
  size_t v58 = v57;
  if ((v7 & 0x80) == 0)
  {
    size_t v59 = v7;
    if (v57 != -1)
    {
      if (v7 >= v57) {
        size_t v60 = v57;
      }
      else {
        size_t v60 = v7;
      }
      if (memcmp((const void *)a2, v56, v60)) {
        goto LABEL_172;
      }
LABEL_168:
      if (v59 != v58) {
        goto LABEL_172;
      }
      v393 = 0;
      uint64_t v394 = 0;
      uint64_t v395 = 0;
      pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
      if (!qword_1EBBDC7D8)
      {
        int v87 = (uint64_t (***)(void *, int64_t))operator new(0x18uLL);
        MEMORY[0x1C87942F0](v87, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
        unint64_t v86 = operator new(0x20uLL);
        *unint64_t v86 = &unk_1F210A638;
        v86[1] = 0;
        v86[2] = 0;
        v86[3] = v87;
        unsigned int v122 = (std::__shared_weak_count *)off_1EBBDC7E0;
        qword_1EBBDC7D8 = (uint64_t)v87;
        off_1EBBDC7E0 = v86;
        if (!v122)
        {
          __p[0] = v87;
          __p[1] = v86;
          goto LABEL_309;
        }
        if (!atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
          std::__shared_weak_count::__release_weak(v122);
        }
      }
      int v87 = (uint64_t (***)(void *, int64_t))qword_1EBBDC7D8;
      unint64_t v86 = off_1EBBDC7E0;
      __p[0] = (void *)qword_1EBBDC7D8;
      __p[1] = off_1EBBDC7E0;
      if (!off_1EBBDC7E0)
      {
LABEL_310:
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        int v156 = *(char *)(a2 + 23);
        if (v156 >= 0) {
          size_t v157 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          size_t v157 = *(void *)(a2 + 8);
        }
        unint64_t v158 = v157 + 16;
        memset(__dst, 170, 24);
        if (v157 + 16 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v158 >= 0x17)
        {
          uint64_t v160 = (v158 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v158 | 7) != 0x17) {
            uint64_t v160 = v158 | 7;
          }
          uint64_t v161 = v160 + 1;
          v162 = operator new(v160 + 1);
          *((void *)&__dst[0] + 1) = v157 + 16;
          *(void *)&__dst[1] = v161 | 0x8000000000000000;
          *(void *)&__dst[0] = v162;
          _OWORD *v162 = *(_OWORD *)"AntennaSetting::";
          v159 = v162 + 1;
        }
        else
        {
          v159 = &__dst[1];
          *(void *)&__dst[1] = 0;
          BYTE7(__dst[1]) = v157 + 16;
          __dst[0] = *(_OWORD *)"AntennaSetting::";
          if (!v157) {
            goto LABEL_324;
          }
        }
        if (v156 >= 0) {
          uint64_t v163 = (const void *)a2;
        }
        else {
          uint64_t v163 = *(const void **)a2;
        }
        memmove(v159, v163, v157);
LABEL_324:
        *((unsigned char *)v159 + v157) = 0;
        if ((SBYTE7(__dst[1]) & 0x80u) == 0) {
          v164 = (const char *)__dst;
        }
        else {
          v164 = *(const char **)&__dst[0];
        }
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&value, v164);
        int v165 = (const void *)(**v87)(v87, value);
        if (v165)
        {
          int v166 = ctu::cf::assign();
          CFRelease(v165);
        }
        else
        {
          int v166 = 0;
        }
        MEMORY[0x1C8794290](&value);
        if (SBYTE7(__dst[1]) < 0) {
          operator delete(*(void **)&__dst[0]);
        }
        if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
        {
          (*(void (**)(void *))(*(void *)__p[1] + 16))(__p[1]);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p[1]);
        }
        if (!v166) {
          goto LABEL_769;
        }
        xpc_object_t v167 = xpc_dictionary_create(0, 0, 0);
        if (v167 || (xpc_object_t v167 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C8795EB0](v167) == v12)
          {
            xpc_retain(v167);
            xpc_object_t v168 = v167;
          }
          else
          {
            xpc_object_t v168 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v168 = xpc_null_create();
          xpc_object_t v167 = 0;
        }
        xpc_release(v167);
        xpc_object_t v226 = xpc_null_create();
        v227 = v396;
        xpc_object_t v396 = v168;
        xpc_release(v227);
        xpc_release(v226);
        xpc_object_t v228 = xpc_string_create((const char *)v56);
        if (!v228) {
          xpc_object_t v228 = xpc_null_create();
        }
        xpc_dictionary_set_value(v396, (const char *)*MEMORY[0x1E4F4C878], v228);
        xpc_object_t v229 = xpc_null_create();
        xpc_release(v228);
        xpc_release(v229);
        xpc_object_t v230 = xpc_dictionary_create(0, 0, 0);
        if (v230 || (xpc_object_t v230 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C8795EB0](v230) == v12)
          {
            xpc_retain(v230);
            xpc_object_t v81 = v230;
          }
          else
          {
            xpc_object_t v81 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v81 = xpc_null_create();
          xpc_object_t v230 = 0;
        }
        xpc_release(v230);
        if (v395 >= 0) {
          v231 = (const char *)&v393;
        }
        else {
          v231 = v393;
        }
        xpc_object_t v232 = xpc_string_create(v231);
        if (!v232) {
          xpc_object_t v232 = xpc_null_create();
        }
        xpc_dictionary_set_value(v81, (const char *)*MEMORY[0x1E4F4D270], v232);
        xpc_object_t v233 = xpc_null_create();
        xpc_release(v232);
        xpc_release(v233);
        if (v81) {
          goto LABEL_476;
        }
        goto LABEL_477;
      }
LABEL_309:
      atomic_fetch_add_explicit(v86 + 1, 1uLL, memory_order_relaxed);
      goto LABEL_310;
    }
LABEL_782:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v57 == -1) {
    goto LABEL_782;
  }
  size_t v59 = *(void *)(a2 + 8);
  if (v59 >= v57) {
    size_t v85 = v57;
  }
  else {
    size_t v85 = *(void *)(a2 + 8);
  }
  if (!memcmp(*(const void **)a2, v56, v85)) {
    goto LABEL_168;
  }
LABEL_172:
  uint64_t v88 = (const char *)*MEMORY[0x1E4F4CFD0];
  size_t v89 = strlen((const char *)*MEMORY[0x1E4F4CFD0]);
  size_t v90 = v89;
  if ((v7 & 0x80) != 0)
  {
    if (v89 == -1) {
      goto LABEL_784;
    }
    unint64_t v92 = *(const void **)a2;
    size_t v91 = *(void *)(a2 + 8);
  }
  else
  {
    size_t v91 = v7;
    unint64_t v92 = (const void *)a2;
    if (v90 == -1) {
LABEL_784:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v91 >= v90) {
    size_t v115 = v90;
  }
  else {
    size_t v115 = v91;
  }
  if (!memcmp(v92, v88, v115) && v91 == v90)
  {
    xpc_object_t v116 = xpc_dictionary_create(0, 0, 0);
    if (v116 || (xpc_object_t v116 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C8795EB0](v116) == v12)
      {
        xpc_retain(v116);
        xpc_object_t v117 = v116;
      }
      else
      {
        xpc_object_t v117 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v117 = xpc_null_create();
      xpc_object_t v116 = 0;
    }
    xpc_release(v116);
    xpc_object_t v194 = xpc_null_create();
    int v195 = v396;
    xpc_object_t v396 = v117;
    xpc_release(v195);
    xpc_release(v194);
    v393 = 0;
    uint64_t v394 = 0;
    uint64_t v395 = 0;
    xpc_object_t v196 = xpc_string_create(v88);
    if (!v196) {
      xpc_object_t v196 = xpc_null_create();
    }
    xpc_dictionary_set_value(v396, (const char *)*MEMORY[0x1E4F4C878], v196);
    xpc_object_t v197 = xpc_null_create();
    xpc_release(v196);
    xpc_release(v197);
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    unsigned int v198 = (uint64_t (***)(void *, int64_t))qword_1EBBDC7D8;
    if (!qword_1EBBDC7D8)
    {
      ABMProperties::create_default_global((ABMProperties *)__dst);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
      std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
      unsigned int v198 = (uint64_t (***)(void *, int64_t))qword_1EBBDC7D8;
    }
    v199 = (std::__shared_weak_count *)off_1EBBDC7E0;
    __p[0] = v198;
    __p[1] = off_1EBBDC7E0;
    if (off_1EBBDC7E0) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDC7E0 + 1, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    uint64_t v200 = (const void *)*MEMORY[0x1E4F4C308];
    size_t v201 = strlen((const char *)*MEMORY[0x1E4F4C308]);
    unint64_t v202 = v201 + 16;
    memset(__dst, 170, 24);
    if (v201 + 16 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v203 = v201;
    if (v202 >= 0x17)
    {
      uint64_t v205 = (v202 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v202 | 7) != 0x17) {
        uint64_t v205 = v202 | 7;
      }
      uint64_t v206 = v205 + 1;
      uint64_t v207 = operator new(v205 + 1);
      *((void *)&__dst[0] + 1) = v202;
      *(void *)&__dst[1] = v206 | 0x8000000000000000;
      *(void *)&__dst[0] = v207;
      *uint64_t v207 = *(_OWORD *)"AntennaSetting::";
      v204 = v207 + 1;
    }
    else
    {
      v204 = &__dst[1];
      *(void *)&__dst[1] = 0;
      BYTE7(__dst[1]) = v201 + 16;
      __dst[0] = *(_OWORD *)"AntennaSetting::";
      if (!v201)
      {
LABEL_413:
        *((unsigned char *)v204 + v203) = 0;
        if ((SBYTE7(__dst[1]) & 0x80u) == 0) {
          v208 = (const char *)__dst;
        }
        else {
          v208 = *(const char **)&__dst[0];
        }
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&value, v208);
        v209 = (const void *)(**v198)(v198, value);
        if (v209)
        {
          int v210 = ctu::cf::assign();
          CFRelease(v209);
        }
        else
        {
          int v210 = 0;
        }
        MEMORY[0x1C8794290](&value);
        if (SBYTE7(__dst[1]) < 0) {
          operator delete(*(void **)&__dst[0]);
        }
        if (v199 && !atomic_fetch_add(&v199->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
          std::__shared_weak_count::__release_weak(v199);
        }
        if (v210)
        {
          if (v395 >= 0) {
            v211 = (const char *)&v393;
          }
          else {
            v211 = v393;
          }
          xpc_object_t v390 = xpc_string_create(v211);
          if (!v390) {
            xpc_object_t v390 = xpc_null_create();
          }
          *(void *)&__dst[0] = &v396;
          *((void *)&__dst[0] + 1) = v200;
          xpc::dict::object_proxy::operator=((uint64_t)__dst, &v390, &v391);
          xpc_release(v391);
          xpc_object_t v391 = 0;
          xpc_release(v390);
          xpc_object_t v390 = 0;
        }
        pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v212 = (uint64_t (***)(void *, int64_t))qword_1EBBDC7D8;
        if (!qword_1EBBDC7D8)
        {
          ABMProperties::create_default_global((ABMProperties *)__dst);
          std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
          std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
          v212 = (uint64_t (***)(void *, int64_t))qword_1EBBDC7D8;
        }
        v213 = (std::__shared_weak_count *)off_1EBBDC7E0;
        __p[0] = v212;
        __p[1] = off_1EBBDC7E0;
        if (off_1EBBDC7E0) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDC7E0 + 1, 1uLL, memory_order_relaxed);
        }
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v214 = (const void *)*MEMORY[0x1E4F4C4F0];
        size_t v215 = strlen((const char *)*MEMORY[0x1E4F4C4F0]);
        unint64_t v216 = v215 + 16;
        memset(__dst, 170, 24);
        if (v215 + 16 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v217 = v215;
        if (v216 >= 0x17)
        {
          uint64_t v219 = (v216 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v216 | 7) != 0x17) {
            uint64_t v219 = v216 | 7;
          }
          uint64_t v220 = v219 + 1;
          v221 = operator new(v219 + 1);
          *((void *)&__dst[0] + 1) = v216;
          *(void *)&__dst[1] = v220 | 0x8000000000000000;
          *(void *)&__dst[0] = v221;
          _OWORD *v221 = *(_OWORD *)"AntennaSetting::";
          v218 = v221 + 1;
        }
        else
        {
          v218 = &__dst[1];
          *(void *)&__dst[1] = 0;
          BYTE7(__dst[1]) = v215 + 16;
          __dst[0] = *(_OWORD *)"AntennaSetting::";
          if (!v215) {
            goto LABEL_443;
          }
        }
        memmove(v218, v214, v217);
LABEL_443:
        *((unsigned char *)v218 + v217) = 0;
        if ((SBYTE7(__dst[1]) & 0x80u) == 0) {
          v222 = (const char *)__dst;
        }
        else {
          v222 = *(const char **)&__dst[0];
        }
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&value, v222);
        v223 = (const void *)(**v212)(v212, value);
        if (v223)
        {
          int v224 = ctu::cf::assign();
          CFRelease(v223);
        }
        else
        {
          int v224 = 0;
        }
        MEMORY[0x1C8794290](&value);
        if (SBYTE7(__dst[1]) < 0) {
          operator delete(*(void **)&__dst[0]);
        }
        if (v213 && !atomic_fetch_add(&v213->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
          std::__shared_weak_count::__release_weak(v213);
        }
        if (v224)
        {
          if (v395 >= 0) {
            v225 = (const char *)&v393;
          }
          else {
            v225 = v393;
          }
          xpc_object_t v388 = xpc_string_create(v225);
          if (!v388) {
            xpc_object_t v388 = xpc_null_create();
          }
          *(void *)&__dst[0] = &v396;
          *((void *)&__dst[0] + 1) = v214;
          xpc::dict::object_proxy::operator=((uint64_t)__dst, &v388, &v389);
          xpc_release(v389);
          xpc_object_t v389 = 0;
          xpc_release(v388);
          xpc_object_t v388 = 0;
        }
        goto LABEL_769;
      }
    }
    memmove(v204, v200, v203);
    goto LABEL_413;
  }
  size_t v118 = strlen((const char *)*MEMORY[0x1E4F4C808]);
  size_t v119 = v118;
  if ((v7 & 0x80) != 0)
  {
    if (v118 == -1) {
      goto LABEL_786;
    }
    __int16 v121 = *(const void **)a2;
    size_t v120 = *(void *)(a2 + 8);
  }
  else
  {
    size_t v120 = v7;
    __int16 v121 = (const void *)a2;
    if (v119 == -1) {
LABEL_786:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v120 >= v119) {
    size_t v145 = v119;
  }
  else {
    size_t v145 = v120;
  }
  if (!memcmp(v121, (const void *)*MEMORY[0x1E4F4C808], v145) && v120 == v119)
  {
    v393 = 0;
    uint64_t v394 = 0;
    uint64_t v395 = 0;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    unsigned int v146 = (uint64_t (***)(void *, int64_t))qword_1EBBDC7D8;
    if (!qword_1EBBDC7D8)
    {
      ABMProperties::create_default_global((ABMProperties *)__dst);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
      std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
      unsigned int v146 = (uint64_t (***)(void *, int64_t))qword_1EBBDC7D8;
    }
    v147 = (std::__shared_weak_count *)off_1EBBDC7E0;
    __p[0] = v146;
    __p[1] = off_1EBBDC7E0;
    if (off_1EBBDC7E0) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDC7E0 + 1, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    int v148 = *(char *)(a2 + 23);
    if (v148 >= 0) {
      size_t v149 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      size_t v149 = *(void *)(a2 + 8);
    }
    unint64_t v150 = v149 + 16;
    memset(__dst, 170, 24);
    if (v149 + 16 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v150 >= 0x17)
    {
      uint64_t v177 = (v150 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v150 | 7) != 0x17) {
        uint64_t v177 = v150 | 7;
      }
      uint64_t v178 = v177 + 1;
      uint64_t v179 = operator new(v177 + 1);
      *((void *)&__dst[0] + 1) = v149 + 16;
      *(void *)&__dst[1] = v178 | 0x8000000000000000;
      *(void *)&__dst[0] = v179;
      *uint64_t v179 = *(_OWORD *)"AntennaSetting::";
      v151 = v179 + 1;
    }
    else
    {
      v151 = &__dst[1];
      *(void *)&__dst[1] = 0;
      BYTE7(__dst[1]) = v149 + 16;
      __dst[0] = *(_OWORD *)"AntennaSetting::";
      if (!v149) {
        goto LABEL_365;
      }
    }
    if (v148 >= 0) {
      v180 = (const void *)a2;
    }
    else {
      v180 = *(const void **)a2;
    }
    memmove(v151, v180, v149);
LABEL_365:
    *((unsigned char *)v151 + v149) = 0;
    if ((SBYTE7(__dst[1]) & 0x80u) == 0) {
      v181 = (const char *)__dst;
    }
    else {
      v181 = *(const char **)&__dst[0];
    }
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&value, v181);
    v182 = (const void *)(**v146)(v146, value);
    if (v182)
    {
      int v183 = ctu::cf::assign();
      CFRelease(v182);
    }
    else
    {
      int v183 = 0;
    }
    MEMORY[0x1C8794290](&value);
    if (SBYTE7(__dst[1]) < 0) {
      operator delete(*(void **)&__dst[0]);
    }
    if (v147 && !atomic_fetch_add(&v147->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
    if (!v183) {
      goto LABEL_769;
    }
    xpc_object_t v192 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v193 = v192;
    if (v192)
    {
      *(void *)&__dst[0] = v192;
    }
    else
    {
      xpc_object_t v193 = xpc_null_create();
      *(void *)&__dst[0] = v193;
      if (!v193)
      {
        xpc_object_t v245 = xpc_null_create();
        xpc_object_t v193 = 0;
        goto LABEL_526;
      }
    }
    if (MEMORY[0x1C8795EB0](v193) == v12)
    {
      xpc_retain(v193);
LABEL_527:
      xpc_release(v193);
      xpc::dict::operator=(&v396, (xpc_object_t *)__dst);
      xpc_release(*(xpc_object_t *)&__dst[0]);
      if (*(char *)(a2 + 23) >= 0) {
        v251 = (const char *)a2;
      }
      else {
        v251 = *(const char **)a2;
      }
      xpc_object_t v386 = xpc_string_create(v251);
      if (!v386) {
        xpc_object_t v386 = xpc_null_create();
      }
      uint64_t v252 = *MEMORY[0x1E4F4C878];
      *(void *)&__dst[0] = &v396;
      *((void *)&__dst[0] + 1) = v252;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v386, &v387);
      xpc_release(v387);
      xpc_object_t v387 = 0;
      xpc_release(v386);
      xpc_object_t v386 = 0;
      if (v395 >= 0) {
        v253 = (const char *)&v393;
      }
      else {
        v253 = v393;
      }
      xpc_object_t v384 = xpc_string_create(v253);
      if (!v384) {
        xpc_object_t v384 = xpc_null_create();
      }
      uint64_t v254 = *MEMORY[0x1E4F4C628];
      *(void *)&__dst[0] = &v396;
      *((void *)&__dst[0] + 1) = v254;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v384, &v385);
      xpc_release(v385);
      xpc_object_t v385 = 0;
      xpc_release(v384);
      xpc_object_t v384 = 0;
      goto LABEL_769;
    }
    xpc_object_t v245 = xpc_null_create();
LABEL_526:
    *(void *)&__dst[0] = v245;
    goto LABEL_527;
  }
  size_t v152 = strlen((const char *)*MEMORY[0x1E4F4CFA0]);
  size_t v153 = v152;
  if ((v7 & 0x80) != 0)
  {
    if (v152 == -1) {
      goto LABEL_789;
    }
    uint64_t v155 = *(const void **)a2;
    size_t v154 = *(void *)(a2 + 8);
  }
  else
  {
    size_t v154 = v7;
    uint64_t v155 = (const void *)a2;
    if (v153 == -1) {
LABEL_789:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v154 >= v153) {
    size_t v184 = v153;
  }
  else {
    size_t v184 = v154;
  }
  if (!memcmp(v155, (const void *)*MEMORY[0x1E4F4CFA0], v184) && v154 == v153)
  {
    v393 = 0;
    uint64_t v394 = 0;
    uint64_t v395 = 0;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v185 = (void *)qword_1EBBDC7D8;
    if (!qword_1EBBDC7D8)
    {
      ABMProperties::create_default_global((ABMProperties *)__dst);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
      std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
      v185 = (void *)qword_1EBBDC7D8;
    }
    __p[0] = v185;
    __p[1] = off_1EBBDC7E0;
    if (off_1EBBDC7E0) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDC7E0 + 1, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", (const void **)a2);
    int v186 = Preferences::getPreference<std::string>((uint64_t (***)(void, uint64_t))__p[0], (const char *)__dst);
    if (SBYTE7(__dst[1]) < 0) {
      operator delete(*(void **)&__dst[0]);
    }
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    if (!v186) {
      goto LABEL_769;
    }
    xpc_object_t v187 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v188 = v187;
    if (v187)
    {
      *(void *)&__dst[0] = v187;
    }
    else
    {
      xpc_object_t v188 = xpc_null_create();
      *(void *)&__dst[0] = v188;
      if (!v188)
      {
        xpc_object_t v250 = xpc_null_create();
        xpc_object_t v188 = 0;
        goto LABEL_561;
      }
    }
    if (MEMORY[0x1C8795EB0](v188) == v12)
    {
      xpc_retain(v188);
LABEL_562:
      xpc_release(v188);
      xpc::dict::operator=(&v396, (xpc_object_t *)__dst);
      xpc_release(*(xpc_object_t *)&__dst[0]);
      if (*(char *)(a2 + 23) >= 0) {
        v264 = (const char *)a2;
      }
      else {
        v264 = *(const char **)a2;
      }
      xpc_object_t v382 = xpc_string_create(v264);
      if (!v382) {
        xpc_object_t v382 = xpc_null_create();
      }
      uint64_t v265 = *MEMORY[0x1E4F4C878];
      *(void *)&__dst[0] = &v396;
      *((void *)&__dst[0] + 1) = v265;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v382, &v383);
      xpc_release(v383);
      xpc_object_t v383 = 0;
      xpc_release(v382);
      xpc_object_t v382 = 0;
      if (v395 >= 0) {
        v266 = (const char *)&v393;
      }
      else {
        v266 = v393;
      }
      xpc_object_t v380 = xpc_string_create(v266);
      if (!v380) {
        xpc_object_t v380 = xpc_null_create();
      }
      uint64_t v267 = *MEMORY[0x1E4F4C628];
      *(void *)&__dst[0] = &v396;
      *((void *)&__dst[0] + 1) = v267;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v380, &v381);
      xpc_release(v381);
      xpc_object_t v381 = 0;
      xpc_release(v380);
      xpc_object_t v380 = 0;
      goto LABEL_769;
    }
    xpc_object_t v250 = xpc_null_create();
LABEL_561:
    *(void *)&__dst[0] = v250;
    goto LABEL_562;
  }
  size_t v189 = strlen((const char *)*MEMORY[0x1E4F4CF90]);
  size_t v190 = v189;
  if ((v7 & 0x80) != 0)
  {
    if (v189 == -1) {
      goto LABEL_791;
    }
    unsigned int v191 = *(const void **)a2;
    size_t v7 = *(void *)(a2 + 8);
  }
  else
  {
    unsigned int v191 = (const void *)a2;
    if (v190 == -1) {
LABEL_791:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v7 >= v190) {
    size_t v236 = v190;
  }
  else {
    size_t v236 = v7;
  }
  if (!memcmp(v191, (const void *)*MEMORY[0x1E4F4CF90], v236) && v7 == v190)
  {
    v393 = 0;
    uint64_t v394 = 0;
    uint64_t v395 = 0;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v237 = (void *)qword_1EBBDC7D8;
    if (!qword_1EBBDC7D8)
    {
      ABMProperties::create_default_global((ABMProperties *)__dst);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
      std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
      v237 = (void *)qword_1EBBDC7D8;
    }
    __p[0] = v237;
    __p[1] = off_1EBBDC7E0;
    if (off_1EBBDC7E0) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDC7E0 + 1, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", (const void **)a2);
    int v238 = Preferences::getPreference<std::string>((uint64_t (***)(void, uint64_t))__p[0], (const char *)__dst);
    if (SBYTE7(__dst[1]) < 0) {
      operator delete(*(void **)&__dst[0]);
    }
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    if (!v238) {
      goto LABEL_769;
    }
    xpc_object_t v239 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v240 = v239;
    if (v239)
    {
      *(void *)&__dst[0] = v239;
    }
    else
    {
      xpc_object_t v240 = xpc_null_create();
      *(void *)&__dst[0] = v240;
      if (!v240)
      {
        xpc_object_t v259 = xpc_null_create();
        xpc_object_t v240 = 0;
        goto LABEL_577;
      }
    }
    if (MEMORY[0x1C8795EB0](v240) == v12)
    {
      xpc_retain(v240);
LABEL_578:
      xpc_release(v240);
      xpc::dict::operator=(&v396, (xpc_object_t *)__dst);
      xpc_release(*(xpc_object_t *)&__dst[0]);
      if (*(char *)(a2 + 23) >= 0) {
        v269 = (const char *)a2;
      }
      else {
        v269 = *(const char **)a2;
      }
      xpc_object_t v378 = xpc_string_create(v269);
      if (!v378) {
        xpc_object_t v378 = xpc_null_create();
      }
      uint64_t v270 = *MEMORY[0x1E4F4C878];
      *(void *)&__dst[0] = &v396;
      *((void *)&__dst[0] + 1) = v270;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v378, &v379);
      xpc_release(v379);
      xpc_object_t v379 = 0;
      xpc_release(v378);
      xpc_object_t v378 = 0;
      if (v395 >= 0) {
        v271 = (const char *)&v393;
      }
      else {
        v271 = v393;
      }
      xpc_object_t v376 = xpc_string_create(v271);
      if (!v376) {
        xpc_object_t v376 = xpc_null_create();
      }
      uint64_t v272 = *MEMORY[0x1E4F4C628];
      *(void *)&__dst[0] = &v396;
      *((void *)&__dst[0] + 1) = v272;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v376, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v376);
      xpc_object_t v376 = 0;
      goto LABEL_769;
    }
    xpc_object_t v259 = xpc_null_create();
LABEL_577:
    *(void *)&__dst[0] = v259;
    goto LABEL_578;
  }
  if (!std::string::compare((const std::string *)a2, (const std::string::value_type *)*MEMORY[0x1E4F4C810]))
  {
    v393 = 0;
    uint64_t v394 = 0;
    uint64_t v395 = 0;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v246 = (void *)qword_1EBBDC7D8;
    if (!qword_1EBBDC7D8)
    {
      ABMProperties::create_default_global((ABMProperties *)__dst);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
      std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
      v246 = (void *)qword_1EBBDC7D8;
    }
    __p[0] = v246;
    __p[1] = off_1EBBDC7E0;
    if (off_1EBBDC7E0) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDC7E0 + 1, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", (const void **)a2);
    int v247 = Preferences::getPreference<std::string>((uint64_t (***)(void, uint64_t))__p[0], (const char *)__dst);
    if (SBYTE7(__dst[1]) < 0) {
      operator delete(*(void **)&__dst[0]);
    }
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    if (!v247) {
      goto LABEL_769;
    }
    xpc_object_t v248 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v249 = v248;
    if (v248)
    {
      *(void *)&__dst[0] = v248;
    }
    else
    {
      xpc_object_t v249 = xpc_null_create();
      *(void *)&__dst[0] = v249;
      if (!v249)
      {
        xpc_object_t v268 = xpc_null_create();
        xpc_object_t v249 = 0;
        goto LABEL_598;
      }
    }
    if (MEMORY[0x1C8795EB0](v249) == v12)
    {
      xpc_retain(v249);
LABEL_599:
      xpc_release(v249);
      xpc::dict::operator=(&v396, (xpc_object_t *)__dst);
      xpc_release(*(xpc_object_t *)&__dst[0]);
      if (*(char *)(a2 + 23) >= 0) {
        v275 = (const char *)a2;
      }
      else {
        v275 = *(const char **)a2;
      }
      xpc_object_t v374 = xpc_string_create(v275);
      if (!v374) {
        xpc_object_t v374 = xpc_null_create();
      }
      uint64_t v276 = *MEMORY[0x1E4F4C878];
      *(void *)&__dst[0] = &v396;
      *((void *)&__dst[0] + 1) = v276;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v374, &v375);
      xpc_release(v375);
      xpc_object_t v375 = 0;
      xpc_release(v374);
      xpc_object_t v374 = 0;
      if (v395 >= 0) {
        v277 = (const char *)&v393;
      }
      else {
        v277 = v393;
      }
      xpc_object_t v372 = xpc_string_create(v277);
      if (!v372) {
        xpc_object_t v372 = xpc_null_create();
      }
      uint64_t v278 = *MEMORY[0x1E4F4C628];
      *(void *)&__dst[0] = &v396;
      *((void *)&__dst[0] + 1) = v278;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v372, &v373);
      xpc_release(v373);
      xpc_object_t v373 = 0;
      xpc_release(v372);
      xpc_object_t v372 = 0;
      goto LABEL_769;
    }
    xpc_object_t v268 = xpc_null_create();
LABEL_598:
    *(void *)&__dst[0] = v268;
    goto LABEL_599;
  }
  if (!std::string::compare((const std::string *)a2, (const std::string::value_type *)*MEMORY[0x1E4F4D018]))
  {
    v393 = 0;
    uint64_t v394 = 0;
    uint64_t v395 = 0;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v255 = (void *)qword_1EBBDC7D8;
    if (!qword_1EBBDC7D8)
    {
      ABMProperties::create_default_global((ABMProperties *)__dst);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
      std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
      v255 = (void *)qword_1EBBDC7D8;
    }
    __p[0] = v255;
    __p[1] = off_1EBBDC7E0;
    if (off_1EBBDC7E0) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDC7E0 + 1, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", (const void **)a2);
    int v256 = Preferences::getPreference<std::string>((uint64_t (***)(void, uint64_t))__p[0], (const char *)__dst);
    if (SBYTE7(__dst[1]) < 0) {
      operator delete(*(void **)&__dst[0]);
    }
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    if (!v256) {
      goto LABEL_769;
    }
    xpc_object_t v257 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v258 = v257;
    if (v257)
    {
      *(void *)&__dst[0] = v257;
    }
    else
    {
      xpc_object_t v258 = xpc_null_create();
      *(void *)&__dst[0] = v258;
      if (!v258)
      {
        xpc_object_t v273 = xpc_null_create();
        xpc_object_t v258 = 0;
        goto LABEL_615;
      }
    }
    if (MEMORY[0x1C8795EB0](v258) == v12)
    {
      xpc_retain(v258);
LABEL_616:
      xpc_release(v258);
      xpc::dict::operator=(&v396, (xpc_object_t *)__dst);
      xpc_release(*(xpc_object_t *)&__dst[0]);
      if (*(char *)(a2 + 23) >= 0) {
        v280 = (const char *)a2;
      }
      else {
        v280 = *(const char **)a2;
      }
      xpc_object_t v370 = xpc_string_create(v280);
      if (!v370) {
        xpc_object_t v370 = xpc_null_create();
      }
      uint64_t v281 = *MEMORY[0x1E4F4C878];
      *(void *)&__dst[0] = &v396;
      *((void *)&__dst[0] + 1) = v281;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v370, &v371);
      xpc_release(v371);
      xpc_object_t v371 = 0;
      xpc_release(v370);
      xpc_object_t v370 = 0;
      if (v395 >= 0) {
        v282 = (const char *)&v393;
      }
      else {
        v282 = v393;
      }
      xpc_object_t v368 = xpc_string_create(v282);
      if (!v368) {
        xpc_object_t v368 = xpc_null_create();
      }
      uint64_t v283 = *MEMORY[0x1E4F4C628];
      *(void *)&__dst[0] = &v396;
      *((void *)&__dst[0] + 1) = v283;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v368, &v369);
      xpc_release(v369);
      xpc_object_t v369 = 0;
      xpc_release(v368);
      xpc_object_t v368 = 0;
      if (v395 >= 0) {
        v284 = (const char *)&v393;
      }
      else {
        v284 = v393;
      }
      size_t v285 = strlen((const char *)*MEMORY[0x1E4F4CB08]);
      if (!strncasecmp(v284, (const char *)*MEMORY[0x1E4F4CB08], v285))
      {
        LODWORD(value) = 0;
        pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v286 = (void *)qword_1EBBDC7D8;
        if (!qword_1EBBDC7D8)
        {
          ABMProperties::create_default_global((ABMProperties *)__dst);
          std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
          std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
          v286 = (void *)qword_1EBBDC7D8;
        }
        __p[0] = v286;
        __p[1] = off_1EBBDC7E0;
        if (off_1EBBDC7E0) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDC7E0 + 1, 1uLL, memory_order_relaxed);
        }
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v287 = (uint64_t (***)(void, uint64_t))__p[0];
        uint64_t v288 = *MEMORY[0x1E4F4D278];
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", (char *)*MEMORY[0x1E4F4D278]);
        Preferences::getPreference<unsigned int>(v287, (const char *)__dst, (ctu::cf *)&value);
        if (SBYTE7(__dst[1]) < 0) {
          operator delete(*(void **)&__dst[0]);
        }
        std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        xpc_object_t v366 = xpc_int64_create(value);
        if (!v366) {
          xpc_object_t v366 = xpc_null_create();
        }
        *(void *)&__dst[0] = &v396;
        *((void *)&__dst[0] + 1) = v288;
        xpc::dict::object_proxy::operator=((uint64_t)__dst, &v366, &v367);
        xpc_release(v367);
        xpc_object_t v367 = 0;
        xpc_release(v366);
        xpc_object_t v366 = 0;
        pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v289 = (void *)qword_1EBBDC7D8;
        if (!qword_1EBBDC7D8)
        {
          ABMProperties::create_default_global((ABMProperties *)__dst);
          std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
          std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
          v289 = (void *)qword_1EBBDC7D8;
        }
        __p[0] = v289;
        __p[1] = off_1EBBDC7E0;
        if (off_1EBBDC7E0) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDC7E0 + 1, 1uLL, memory_order_relaxed);
        }
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v290 = (uint64_t (***)(void, uint64_t))__p[0];
        uint64_t v291 = *MEMORY[0x1E4F4D230];
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", (char *)*MEMORY[0x1E4F4D230]);
        Preferences::getPreference<unsigned int>(v290, (const char *)__dst, (ctu::cf *)&value);
        if (SBYTE7(__dst[1]) < 0) {
          operator delete(*(void **)&__dst[0]);
        }
        std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        xpc_object_t v364 = xpc_int64_create(value);
        if (!v364) {
          xpc_object_t v364 = xpc_null_create();
        }
        *(void *)&__dst[0] = &v396;
        *((void *)&__dst[0] + 1) = v291;
        xpc::dict::object_proxy::operator=((uint64_t)__dst, &v364, &v365);
        xpc_release(v365);
        xpc_object_t v365 = 0;
        xpc_release(v364);
        xpc_object_t v364 = 0;
        pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v292 = (void *)qword_1EBBDC7D8;
        if (!qword_1EBBDC7D8)
        {
          ABMProperties::create_default_global((ABMProperties *)__dst);
          std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
          std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
          v292 = (void *)qword_1EBBDC7D8;
        }
        __p[0] = v292;
        __p[1] = off_1EBBDC7E0;
        if (off_1EBBDC7E0) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDC7E0 + 1, 1uLL, memory_order_relaxed);
        }
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v293 = (uint64_t (***)(void, uint64_t))__p[0];
        uint64_t v294 = *MEMORY[0x1E4F4D080];
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", (char *)*MEMORY[0x1E4F4D080]);
        Preferences::getPreference<unsigned int>(v293, (const char *)__dst, (ctu::cf *)&value);
        if (SBYTE7(__dst[1]) < 0) {
          operator delete(*(void **)&__dst[0]);
        }
        std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        xpc_object_t v362 = xpc_int64_create(value);
        if (!v362) {
          xpc_object_t v362 = xpc_null_create();
        }
        *(void *)&__dst[0] = &v396;
        *((void *)&__dst[0] + 1) = v294;
        xpc::dict::object_proxy::operator=((uint64_t)__dst, &v362, &v363);
        xpc_release(v363);
        xpc_object_t v363 = 0;
        xpc_release(v362);
        xpc_object_t v362 = 0;
        pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v295 = (void *)qword_1EBBDC7D8;
        if (!qword_1EBBDC7D8)
        {
          ABMProperties::create_default_global((ABMProperties *)__dst);
          std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
          std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
          v295 = (void *)qword_1EBBDC7D8;
        }
        __p[0] = v295;
        __p[1] = off_1EBBDC7E0;
        if (off_1EBBDC7E0) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDC7E0 + 1, 1uLL, memory_order_relaxed);
        }
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v296 = (uint64_t (***)(void, uint64_t))__p[0];
        uint64_t v297 = *MEMORY[0x1E4F4D078];
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", (char *)*MEMORY[0x1E4F4D078]);
        Preferences::getPreference<unsigned int>(v296, (const char *)__dst, (ctu::cf *)&value);
        if (SBYTE7(__dst[1]) < 0) {
          operator delete(*(void **)&__dst[0]);
        }
        std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        xpc_object_t v360 = xpc_int64_create(value);
        if (!v360) {
          xpc_object_t v360 = xpc_null_create();
        }
        *(void *)&__dst[0] = &v396;
        *((void *)&__dst[0] + 1) = v297;
        xpc::dict::object_proxy::operator=((uint64_t)__dst, &v360, &v361);
        xpc_release(v361);
        xpc_object_t v361 = 0;
        xpc_release(v360);
        xpc_object_t v360 = 0;
      }
      goto LABEL_769;
    }
    xpc_object_t v273 = xpc_null_create();
LABEL_615:
    *(void *)&__dst[0] = v273;
    goto LABEL_616;
  }
  if (!std::string::compare((const std::string *)a2, "kSetWorkoutInfo"))
  {
    v393 = 0;
    uint64_t v394 = 0;
    uint64_t v395 = 0;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v260 = (void *)qword_1EBBDC7D8;
    if (!qword_1EBBDC7D8)
    {
      ABMProperties::create_default_global((ABMProperties *)__dst);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
      std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
      v260 = (void *)qword_1EBBDC7D8;
    }
    __p[0] = v260;
    __p[1] = off_1EBBDC7E0;
    if (off_1EBBDC7E0) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDC7E0 + 1, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", (const void **)a2);
    int v261 = Preferences::getPreference<std::string>((uint64_t (***)(void, uint64_t))__p[0], (const char *)__dst);
    if (SBYTE7(__dst[1]) < 0) {
      operator delete(*(void **)&__dst[0]);
    }
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    if (!v261) {
      goto LABEL_769;
    }
    xpc_object_t v262 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v263 = v262;
    if (v262)
    {
      *(void *)&__dst[0] = v262;
    }
    else
    {
      xpc_object_t v263 = xpc_null_create();
      *(void *)&__dst[0] = v263;
      if (!v263)
      {
        xpc_object_t v274 = xpc_null_create();
        xpc_object_t v263 = 0;
        goto LABEL_665;
      }
    }
    if (MEMORY[0x1C8795EB0](v263) == v12)
    {
      xpc_retain(v263);
LABEL_666:
      xpc_release(v263);
      xpc::dict::operator=(&v396, (xpc_object_t *)__dst);
      xpc_release(*(xpc_object_t *)&__dst[0]);
      if (*(char *)(a2 + 23) >= 0) {
        v298 = (const char *)a2;
      }
      else {
        v298 = *(const char **)a2;
      }
      xpc_object_t v358 = xpc_string_create(v298);
      if (!v358) {
        xpc_object_t v358 = xpc_null_create();
      }
      uint64_t v299 = *MEMORY[0x1E4F4C878];
      *(void *)&__dst[0] = &v396;
      *((void *)&__dst[0] + 1) = v299;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v358, &v359);
      xpc_release(v359);
      xpc_object_t v359 = 0;
      xpc_release(v358);
      xpc_object_t v358 = 0;
      if (v395 >= 0) {
        v300 = (const char *)&v393;
      }
      else {
        v300 = v393;
      }
      xpc_object_t v356 = xpc_string_create(v300);
      if (!v356) {
        xpc_object_t v356 = xpc_null_create();
      }
      uint64_t v301 = *MEMORY[0x1E4F4C628];
      *(void *)&__dst[0] = &v396;
      *((void *)&__dst[0] + 1) = v301;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v356, &v357);
      xpc_release(v357);
      xpc_object_t v357 = 0;
      xpc_release(v356);
      xpc_object_t v356 = 0;
      if (v395 >= 0) {
        v302 = (const char *)&v393;
      }
      else {
        v302 = v393;
      }
      if (!strncasecmp(v302, "OVERRIDE", 8uLL))
      {
        LODWORD(value) = 0;
        pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v303 = (void *)qword_1EBBDC7D8;
        if (!qword_1EBBDC7D8)
        {
          ABMProperties::create_default_global((ABMProperties *)__dst);
          std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
          std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
          v303 = (void *)qword_1EBBDC7D8;
        }
        __p[0] = v303;
        __p[1] = off_1EBBDC7E0;
        if (off_1EBBDC7E0) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDC7E0 + 1, 1uLL, memory_order_relaxed);
        }
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v304 = (uint64_t (***)(void, uint64_t))__p[0];
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", "kKeyWorkoutType");
        Preferences::getPreference<unsigned int>(v304, (const char *)__dst, (ctu::cf *)&value);
        if (SBYTE7(__dst[1]) < 0) {
          operator delete(*(void **)&__dst[0]);
        }
        std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        xpc_object_t v354 = xpc_int64_create(value);
        if (!v354) {
          xpc_object_t v354 = xpc_null_create();
        }
        *(void *)&__dst[0] = &v396;
        *((void *)&__dst[0] + 1) = "kKeyWorkoutType";
        xpc::dict::object_proxy::operator=((uint64_t)__dst, &v354, &v355);
        xpc_release(v355);
        xpc_object_t v355 = 0;
        xpc_release(v354);
        xpc_object_t v354 = 0;
        LODWORD(v347) = 0;
        pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v305 = (void *)qword_1EBBDC7D8;
        if (!qword_1EBBDC7D8)
        {
          ABMProperties::create_default_global((ABMProperties *)__dst);
          std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
          std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
          v305 = (void *)qword_1EBBDC7D8;
        }
        __p[0] = v305;
        __p[1] = off_1EBBDC7E0;
        if (off_1EBBDC7E0) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDC7E0 + 1, 1uLL, memory_order_relaxed);
        }
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v306 = (uint64_t (***)(void, uint64_t))__p[0];
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", "kKeyWorkoutState");
        Preferences::getPreference<unsigned int>(v306, (const char *)__dst, (ctu::cf *)&v347);
        if (SBYTE7(__dst[1]) < 0) {
          operator delete(*(void **)&__dst[0]);
        }
        std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        *(void *)&v352[1] = xpc_int64_create(v347);
        if (!*(void *)&v352[1]) {
          *(void *)&v352[1] = xpc_null_create();
        }
        *(void *)&__dst[0] = &v396;
        *((void *)&__dst[0] + 1) = "kKeyWorkoutState";
        xpc::dict::object_proxy::operator=((uint64_t)__dst, (xpc_object_t *)&v352[1], &v353);
        xpc_release(v353);
        xpc_object_t v353 = 0;
        xpc_release(*(xpc_object_t *)&v352[1]);
        memset(v352, 0, sizeof(v352));
        pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v307 = (void *)qword_1EBBDC7D8;
        if (!qword_1EBBDC7D8)
        {
          ABMProperties::create_default_global((ABMProperties *)__dst);
          std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
          std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
          v307 = (void *)qword_1EBBDC7D8;
        }
        __p[0] = v307;
        __p[1] = off_1EBBDC7E0;
        if (off_1EBBDC7E0) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDC7E0 + 1, 1uLL, memory_order_relaxed);
        }
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v308 = (uint64_t (***)(void, uint64_t))__p[0];
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", "kKeyWorkoutLocation");
        Preferences::getPreference<unsigned int>(v308, (const char *)__dst, (ctu::cf *)v352);
        if (SBYTE7(__dst[1]) < 0) {
          operator delete(*(void **)&__dst[0]);
        }
        std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        *(void *)&v350[1] = xpc_int64_create(v352[0]);
        if (!*(void *)&v350[1]) {
          *(void *)&v350[1] = xpc_null_create();
        }
        *(void *)&__dst[0] = &v396;
        *((void *)&__dst[0] + 1) = "kKeyWorkoutLocation";
        xpc::dict::object_proxy::operator=((uint64_t)__dst, (xpc_object_t *)&v350[1], &v351);
        xpc_release(v351);
        xpc_object_t v351 = 0;
        xpc_release(*(xpc_object_t *)&v350[1]);
        memset(v350, 0, sizeof(v350));
        pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v309 = (void *)qword_1EBBDC7D8;
        if (!qword_1EBBDC7D8)
        {
          ABMProperties::create_default_global((ABMProperties *)__dst);
          std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
          std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
          v309 = (void *)qword_1EBBDC7D8;
        }
        __p[0] = v309;
        __p[1] = off_1EBBDC7E0;
        if (off_1EBBDC7E0) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDC7E0 + 1, 1uLL, memory_order_relaxed);
        }
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v310 = (uint64_t (***)(void, uint64_t))__p[0];
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", "kKeySwimLocation");
        Preferences::getPreference<unsigned int>(v310, (const char *)__dst, (ctu::cf *)v350);
        if (SBYTE7(__dst[1]) < 0) {
          operator delete(*(void **)&__dst[0]);
        }
        std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        xpc_object_t v348 = xpc_int64_create(v350[0]);
        if (!v348) {
          xpc_object_t v348 = xpc_null_create();
        }
        *(void *)&__dst[0] = &v396;
        *((void *)&__dst[0] + 1) = "kKeySwimLocation";
        xpc::dict::object_proxy::operator=((uint64_t)__dst, &v348, &v349);
        xpc_release(v349);
        xpc_object_t v349 = 0;
        xpc_release(v348);
        xpc_object_t v348 = 0;
      }
      goto LABEL_769;
    }
    xpc_object_t v274 = xpc_null_create();
LABEL_665:
    *(void *)&__dst[0] = v274;
    goto LABEL_666;
  }
  if (std::string::compare((const std::string *)a2, (const std::string::value_type *)*MEMORY[0x1E4F4C108])) {
    goto LABEL_771;
  }
  v393 = 0;
  uint64_t v394 = 0;
  uint64_t v395 = 0;
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  v241 = (void *)qword_1EBBDC7D8;
  if (!qword_1EBBDC7D8)
  {
    ABMProperties::create_default_global((ABMProperties *)__dst);
    std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
    v241 = (void *)qword_1EBBDC7D8;
  }
  __p[0] = v241;
  __p[1] = off_1EBBDC7E0;
  if (off_1EBBDC7E0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDC7E0 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", (const void **)a2);
  int v242 = Preferences::getPreference<std::string>((uint64_t (***)(void, uint64_t))__p[0], (const char *)__dst);
  if (SBYTE7(__dst[1]) < 0) {
    operator delete(*(void **)&__dst[0]);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__p);
  if (v242)
  {
    xpc_object_t v243 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v244 = v243;
    if (v243)
    {
      *(void *)&__dst[0] = v243;
    }
    else
    {
      xpc_object_t v244 = xpc_null_create();
      *(void *)&__dst[0] = v244;
      if (!v244)
      {
        xpc_object_t v279 = xpc_null_create();
        xpc_object_t v244 = 0;
        goto LABEL_714;
      }
    }
    if (MEMORY[0x1C8795EB0](v244) == v12)
    {
      xpc_retain(v244);
      goto LABEL_715;
    }
    xpc_object_t v279 = xpc_null_create();
LABEL_714:
    *(void *)&__dst[0] = v279;
LABEL_715:
    xpc_release(v244);
    xpc::dict::operator=(&v396, (xpc_object_t *)__dst);
    xpc_release(*(xpc_object_t *)&__dst[0]);
    int64_t v347 = 0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v311 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v312 = v311;
    if (v311)
    {
      int64_t v347 = (int64_t)v311;
    }
    else
    {
      xpc_object_t v312 = xpc_null_create();
      int64_t v347 = (int64_t)v312;
      if (!v312)
      {
        xpc_object_t v313 = xpc_null_create();
        xpc_object_t v312 = 0;
        goto LABEL_722;
      }
    }
    if (MEMORY[0x1C8795EB0](v312) == v12)
    {
      xpc_retain(v312);
      goto LABEL_723;
    }
    xpc_object_t v313 = xpc_null_create();
LABEL_722:
    int64_t v347 = (int64_t)v313;
LABEL_723:
    xpc_release(v312);
    if (*(char *)(a2 + 23) >= 0) {
      v314 = (const char *)a2;
    }
    else {
      v314 = *(const char **)a2;
    }
    xpc_object_t v345 = xpc_string_create(v314);
    if (!v345) {
      xpc_object_t v345 = xpc_null_create();
    }
    uint64_t v315 = *MEMORY[0x1E4F4C878];
    *(void *)&__dst[0] = &v396;
    *((void *)&__dst[0] + 1) = v315;
    xpc::dict::object_proxy::operator=((uint64_t)__dst, &v345, &v346);
    xpc_release(v346);
    xpc_object_t v346 = 0;
    xpc_release(v345);
    xpc_object_t v345 = 0;
    memset(__dst, 170, 24);
    std::string::basic_string[abi:ne180100]<0>(__dst, "");
    v352[0] = 0x7FFF;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    int64_t v316 = qword_1EBBDC7D8;
    if (!qword_1EBBDC7D8)
    {
      ABMProperties::create_default_global((ABMProperties *)__p);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100]((long long *)__p);
      std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      int64_t v316 = qword_1EBBDC7D8;
    }
    int64_t value = v316;
    v344 = off_1EBBDC7E0;
    if (off_1EBBDC7E0) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDC7E0 + 1, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v317 = (uint64_t (***)(void, uint64_t))value;
    v318 = (void *)*MEMORY[0x1E4F4CCB0];
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, (const void **)"AntennaSetting::", (char *)*MEMORY[0x1E4F4CCB0]);
    Preferences::getPreference<std::string>(v317, (const char *)__p);
    if (v342 < 0) {
      operator delete(__p[0]);
    }
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&value);
    if (SBYTE7(__dst[1]) < 0)
    {
      if (*((void *)&__dst[0] + 1))
      {
        v319 = *(const char **)&__dst[0];
        goto LABEL_739;
      }
    }
    else if (BYTE7(__dst[1]))
    {
      v319 = (const char *)__dst;
LABEL_739:
      xpc_object_t v339 = xpc_string_create(v319);
      if (!v339) {
        xpc_object_t v339 = xpc_null_create();
      }
      __p[0] = &v347;
      __p[1] = v318;
      xpc::dict::object_proxy::operator=((uint64_t)__p, &v339, &v340);
      xpc_release(v340);
      xpc_object_t v340 = 0;
      xpc_release(v339);
      xpc_object_t v339 = 0;
    }
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    int64_t v320 = qword_1EBBDC7D8;
    if (!qword_1EBBDC7D8)
    {
      ABMProperties::create_default_global((ABMProperties *)__p);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100]((long long *)__p);
      std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      int64_t v320 = qword_1EBBDC7D8;
    }
    int64_t value = v320;
    v344 = off_1EBBDC7E0;
    if (off_1EBBDC7E0) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDC7E0 + 1, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v321 = (uint64_t (***)(void, uint64_t))value;
    v322 = (void *)*MEMORY[0x1E4F4C460];
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, (const void **)"AntennaSetting::", (char *)*MEMORY[0x1E4F4C460]);
    Preferences::getPreference<unsigned int>(v321, (const char *)__p, (ctu::cf *)v352);
    if (v342 < 0) {
      operator delete(__p[0]);
    }
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&value);
    xpc_object_t v337 = xpc_int64_create(v352[0]);
    if (!v337) {
      xpc_object_t v337 = xpc_null_create();
    }
    __p[0] = &v347;
    __p[1] = v322;
    xpc::dict::object_proxy::operator=((uint64_t)__p, &v337, &v338);
    xpc_release(v338);
    xpc_object_t v338 = 0;
    xpc_release(v337);
    xpc_object_t v337 = 0;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    int64_t v323 = qword_1EBBDC7D8;
    if (!qword_1EBBDC7D8)
    {
      ABMProperties::create_default_global((ABMProperties *)__p);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100]((long long *)__p);
      std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      int64_t v323 = qword_1EBBDC7D8;
    }
    int64_t value = v323;
    v344 = off_1EBBDC7E0;
    if (off_1EBBDC7E0) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDC7E0 + 1, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v324 = (uint64_t (***)(void, uint64_t))value;
    v325 = (void *)*MEMORY[0x1E4F4C620];
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, (const void **)"AntennaSetting::", (char *)*MEMORY[0x1E4F4C620]);
    Preferences::getPreference<unsigned int>(v324, (const char *)__p, (ctu::cf *)v352);
    if (v342 < 0) {
      operator delete(__p[0]);
    }
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&value);
    xpc_object_t v335 = xpc_int64_create(v352[0]);
    if (!v335) {
      xpc_object_t v335 = xpc_null_create();
    }
    __p[0] = &v347;
    __p[1] = v325;
    xpc::dict::object_proxy::operator=((uint64_t)__p, &v335, &v336);
    xpc_release(v336);
    xpc_object_t v336 = 0;
    xpc_release(v335);
    xpc_object_t v335 = 0;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    int64_t v326 = qword_1EBBDC7D8;
    if (!qword_1EBBDC7D8)
    {
      ABMProperties::create_default_global((ABMProperties *)__p);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100]((long long *)__p);
      std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      int64_t v326 = qword_1EBBDC7D8;
    }
    int64_t value = v326;
    v344 = off_1EBBDC7E0;
    if (off_1EBBDC7E0) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDC7E0 + 1, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v327 = (uint64_t (***)(void, uint64_t))value;
    v328 = (void *)*MEMORY[0x1E4F4C290];
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, (const void **)"AntennaSetting::", (char *)*MEMORY[0x1E4F4C290]);
    Preferences::getPreference<unsigned int>(v327, (const char *)__p, (ctu::cf *)v352);
    if (v342 < 0) {
      operator delete(__p[0]);
    }
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&value);
    xpc_object_t v333 = xpc_int64_create(v352[0]);
    if (!v333) {
      xpc_object_t v333 = xpc_null_create();
    }
    __p[0] = &v347;
    __p[1] = v328;
    xpc::dict::object_proxy::operator=((uint64_t)__p, &v333, &v334);
    xpc_release(v334);
    xpc_object_t v334 = 0;
    xpc_release(v333);
    xpc_object_t v333 = 0;
    xpc::dict::dict(&v331, (void **)&v347);
    v329 = (void *)*MEMORY[0x1E4F4C628];
    __p[0] = &v396;
    __p[1] = v329;
    xpc::dict::object_proxy::operator=((uint64_t)__p, &v331, &v332);
    xpc_release(v332);
    xpc_object_t v332 = 0;
    xpc_release(v331);
    xpc_object_t v331 = 0;
    if (SBYTE7(__dst[1]) < 0) {
      operator delete(*(void **)&__dst[0]);
    }
    xpc_release((xpc_object_t)v347);
  }
LABEL_769:
  if (SHIBYTE(v395) < 0) {
    operator delete(v393);
  }
LABEL_771:
  if (MEMORY[0x1C8795EB0](v396) == v12)
  {
    v330 = **(antenna::Service::Internal ***)(a1 + 176);
    if (v330) {
      antenna::Service::Internal::antennaSetProperty(v330, &v396);
    }
  }
  xpc_release(v396);
}

void sub_1C5B5BF60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,xpc_object_t object)
{
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (*(char *)(v29 - 89) < 0) {
    operator delete(*(void **)(v29 - 112));
  }
  xpc_release(*(xpc_object_t *)(v29 - 88));
  _Unwind_Resume(a1);
}

uint64_t Preferences::getPreference<std::string>(uint64_t (***a1)(void, uint64_t), const char *a2)
{
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v6, a2);
  long long v3 = (const void *)(**a1)(a1, v6);
  if (v3)
  {
    uint64_t v4 = ctu::cf::assign();
    CFRelease(v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  MEMORY[0x1C8794290](&v6);
  return v4;
}

void *std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *__dst, const void **a2, const void **a3)
{
  long long v3 = __dst;
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  int v6 = *((char *)a3 + 23);
  if (v6 >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  unint64_t v8 = v7 + v5;
  memset(__dst, 170, 24);
  if (v7 + v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v8 <= 0x16)
  {
    __dst[1] = 0;
    long long __dst[2] = 0;
    *std::string __dst = 0;
    *((unsigned char *)__dst + 23) = v8;
    if (!v5) {
      goto LABEL_18;
    }
    goto LABEL_14;
  }
  uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v8 | 7) != 0x17) {
    uint64_t v11 = v8 | 7;
  }
  uint64_t v12 = v11 + 1;
  std::string __dst = operator new(v11 + 1);
  v3[1] = v8;
  v3[2] = v12 | 0x8000000000000000;
  void *v3 = __dst;
  long long v3 = __dst;
  if (v5)
  {
LABEL_14:
    if (v4 >= 0) {
      std::string v13 = a2;
    }
    else {
      std::string v13 = *a2;
    }
    std::string __dst = memmove(v3, v13, v5);
  }
LABEL_18:
  size_t v14 = (char *)v3 + v5;
  if (v7)
  {
    if (v6 >= 0) {
      size_t v15 = a3;
    }
    else {
      size_t v15 = *a3;
    }
    std::string __dst = memmove(v14, v15, v7);
  }
  v14[v7] = 0;
  return __dst;
}

void *std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, const void **a2, char *__s)
{
  int v6 = *((char *)a2 + 23);
  if (v6 >= 0) {
    size_t v7 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v7 = (size_t)a2[1];
  }
  double result = (void *)strlen(__s);
  unint64_t v9 = (unint64_t)result + v7;
  memset(a1, 170, 24);
  if ((unint64_t)result + v7 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v10 = (size_t)result;
  if (v9 <= 0x16)
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    *((unsigned char *)a1 + 23) = v9;
    if (!v7) {
      goto LABEL_15;
    }
LABEL_11:
    if (v6 >= 0) {
      std::string v13 = a2;
    }
    else {
      std::string v13 = *a2;
    }
    double result = memmove(a1, v13, v7);
    goto LABEL_15;
  }
  uint64_t v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v9 | 7) != 0x17) {
    uint64_t v11 = v9 | 7;
  }
  uint64_t v12 = v11 + 1;
  double result = operator new(v11 + 1);
  a1[1] = v9;
  a1[2] = v12 | 0x8000000000000000;
  *a1 = result;
  a1 = result;
  if (v7) {
    goto LABEL_11;
  }
LABEL_15:
  size_t v14 = (char *)a1 + v7;
  if (v10) {
    double result = memmove(v14, __s, v10);
  }
  v14[v10] = 0;
  return result;
}

void AntennaModule::reportTransmitState(AntennaModule *this, void **a2)
{
  CFTypeRef v21 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  long long v3 = *a2;
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc::bridge((uint64_t *)&cf, (xpc *)&object, v4);
  CFTypeRef v5 = cf;
  if (!cf || (CFTypeID v6 = CFGetTypeID(cf), v6 != CFDictionaryGetTypeID()))
  {
    CFTypeRef v5 = 0;
    CFTypeRef v21 = 0;
    CFTypeRef v7 = cf;
    if (!cf) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  CFTypeRef v21 = v5;
  CFRetain(v5);
  CFTypeRef v7 = cf;
  if (cf) {
LABEL_9:
  }
    CFRelease(v7);
LABEL_10:
  xpc_release(object);
  if (v5) {
    unint64_t v8 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    unint64_t v8 = 0;
  }
  if (!v8) {
    goto LABEL_29;
  }
  unint64_t v9 = (const void *)*MEMORY[0x1E4F4CDF0];
  size_t v10 = strlen((const char *)*MEMORY[0x1E4F4CDF0]);
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = (void *)v10;
  if (v10 >= 0x17)
  {
    uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v13 = v10 | 7;
    }
    uint64_t v14 = v13 + 1;
    uint64_t v12 = (void **)operator new(v13 + 1);
    __dst[1] = v11;
    unint64_t v18 = v14 | 0x8000000000000000;
    __dst[0] = v12;
LABEL_22:
    memmove(v12, v9, (size_t)v11);
    *((unsigned char *)v11 + (void)v12) = 0;
    CFTypeRef v5 = v21;
    CFTypeRef v16 = v21;
    if (!v21) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  HIBYTE(v18) = v10;
  uint64_t v12 = __dst;
  if (v10) {
    goto LABEL_22;
  }
  LOBYTE(__dst[0]) = 0;
  CFTypeRef v5 = v21;
  CFTypeRef v16 = v21;
  if (v21) {
LABEL_23:
  }
    CFRetain(v5);
LABEL_24:
  long long aBlock = 0;
  Service::broadcastEvent((uint64_t)this, (uint64_t)__dst, &v16, (const void **)&aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v16) {
    CFRelease(v16);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_29:
    if (!v5) {
      return;
    }
    goto LABEL_30;
  }
  operator delete(__dst[0]);
  if (v5) {
LABEL_30:
  }
    CFRelease(v5);
}

void sub_1C5B5CF58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, const void *a19)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  if (a16 < 0) {
    operator delete(__p);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a19);
  _Unwind_Resume(a1);
}

void sub_1C5B5CFA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object, char a15)
{
}

void AntennaModule::releasePowerAssertion(AntennaModule *this)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v6 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr))(*(void *)this + 80))(&v5);
  unint64_t v1 = v5;
  if (v5)
  {
    uint64_t v2 = (char *)operator new(0x28uLL);
    strcpy(v2, "com.apple.AppleBasebandManager.Antenna");
    uint64_t v3 = *(void *)(v1 + 104);
    std::string::__init_copy_ctor_external(&v7, v2, 0x26uLL);
    (*(void (**)(uint64_t, std::string *))(*(void *)v3 + 32))(v3, &v7);
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v7.__r_.__value_.__l.__data_);
    }
    operator delete(v2);
  }
  int v4 = (std::__shared_weak_count *)v6;
  if (v6)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v6 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1C5B5D104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  operator delete(v17);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_1C5B5D138(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void AntennaModule::createPowerAssertion(AntennaModule *this)
{
  unint64_t v6 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr))(*(void *)this + 80))(&v6);
  unint64_t v1 = v6;
  if (v6)
  {
    uint64_t v2 = (char *)operator new(0x28uLL);
    strcpy(v2, "com.apple.AppleBasebandManager.Antenna");
    uint64_t v3 = *(void *)(v1 + 104);
    std::string::__init_copy_ctor_external(&v8, v2, 0x26uLL);
    (*(void (**)(dispatch_object_t *__return_ptr, uint64_t, std::string *, void))(*(void *)v3 + 24))(&object, v3, &v8, 0);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
    if (object) {
      dispatch_release(object);
    }
    operator delete(v2);
  }
  int v4 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v7 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1C5B5D294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  operator delete(v17);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_1C5B5D2C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void AntennaModule::processCallback(AntennaModule *this, xpc_object_t *a2)
{
  int v4 = (const char *)*MEMORY[0x1E4F4C7D8];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C7D8]))
  {
    memset(__s1, 170, sizeof(__s1));
    xpc_object_t value = xpc_dictionary_get_value(*a2, v4);
    object[0] = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      object[0] = xpc_null_create();
    }
    xpc::dyn_cast_or_default(__s1, (xpc *)object, (const object *)"", v6);
    xpc_release(object[0]);
    size_t v7 = strlen((const char *)*MEMORY[0x1E4F4C750]);
    unint64_t v8 = v7;
    unsigned __int8 v9 = HIBYTE(__s1[2]);
    if (SHIBYTE(__s1[2]) < 0)
    {
      if (v7 != -1)
      {
        uint64_t v11 = (uint64_t *)__s1[0];
        unint64_t v10 = __s1[1];
LABEL_10:
        if (v10 >= v8) {
          size_t v12 = v8;
        }
        else {
          size_t v12 = v10;
        }
        if (!memcmp(v11, (const void *)*MEMORY[0x1E4F4C750], v12) && v10 == v8)
        {
          AntennaModule::reportTransmitState(this, a2);
          unsigned __int8 v9 = HIBYTE(__s1[2]);
        }
        uint64_t v14 = (const void *)*MEMORY[0x1E4F4C310];
        size_t v15 = strlen((const char *)*MEMORY[0x1E4F4C310]);
        size_t v16 = v15;
        if ((v9 & 0x80) != 0)
        {
          if (v15 != -1)
          {
            uint64_t v17 = __s1[1];
            if (__s1[1] >= v15) {
              size_t v19 = v15;
            }
            else {
              size_t v19 = __s1[1];
            }
            if (memcmp((const void *)__s1[0], v14, v19)) {
              goto LABEL_43;
            }
            goto LABEL_31;
          }
        }
        else if (v15 != -1)
        {
          uint64_t v17 = v9;
          if (v9 >= v15) {
            size_t v18 = v15;
          }
          else {
            size_t v18 = v9;
          }
          if (memcmp(__s1, v14, v18)) {
            goto LABEL_43;
          }
LABEL_31:
          if (v17 != v16)
          {
LABEL_43:
            if ((v9 & 0x80) != 0) {
              operator delete((void *)__s1[0]);
            }
            return;
          }
          size_t v20 = (const void *)*MEMORY[0x1E4F4C738];
          size_t v21 = strlen((const char *)*MEMORY[0x1E4F4C738]);
          if (v21 >= 0x7FFFFFFFFFFFFFF8) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          BOOL v22 = (void *)v21;
          if (v21 >= 0x17)
          {
            uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v21 | 7) != 0x17) {
              uint64_t v24 = v21 | 7;
            }
            uint64_t v25 = v24 + 1;
            size_t v23 = operator new(v24 + 1);
            object[1] = v22;
            unint64_t v31 = v25 | 0x8000000000000000;
            object[0] = v23;
          }
          else
          {
            HIBYTE(v31) = v21;
            size_t v23 = object;
            if (!v21) {
              goto LABEL_40;
            }
          }
          memmove(v23, v20, (size_t)v22);
LABEL_40:
          *((unsigned char *)v22 + (void)v23) = 0;
          uint64_t v26 = *MEMORY[0x1E4F4C338];
          v28[0] = a2;
          v28[1] = v26;
          xpc::dict::object_proxy::operator xpc::dict((uint64_t)v28, &v29);
          unint64_t v27 = 0;
          Service::runCommand((uint64_t)this, (uint64_t)object, &v29, &v27);
          xpc_release(v29);
          xpc_object_t v29 = 0;
          if (SHIBYTE(v31) < 0) {
            operator delete(object[0]);
          }
          unsigned __int8 v9 = HIBYTE(__s1[2]);
          goto LABEL_43;
        }
        std::string::__throw_out_of_range[abi:ne180100]();
      }
    }
    else if (v7 != -1)
    {
      unint64_t v10 = HIBYTE(__s1[2]);
      uint64_t v11 = __s1;
      goto LABEL_10;
    }
    std::string::__throw_out_of_range[abi:ne180100]();
  }
}

void sub_1C5B5D574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0)
  {
    operator delete(a19);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::Loggable<AntennaModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<AntennaModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (const char *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 16))();
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    unint64_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<AntennaModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<AntennaModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F210F2C8;
  MEMORY[0x1C87940C0](a1 + 1);
  return a1;
}

void ctu::Loggable<AntennaModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F210F2C8;
  MEMORY[0x1C87940C0](a1 + 1);

  operator delete(a1);
}

void **xpc::dict::operator=(void **a1, xpc_object_t object)
{
  if (object)
  {
    xpc_object_t v3 = object;
    xpc_retain(object);
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
  }
  int v4 = *a1;
  *a1 = v3;
  xpc_release(v4);
  return a1;
}

void ctu::Loggable<AntennaModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    xpc_object_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1C5B5D8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C5B5D908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<AntennaModule>::shared_ptr[abi:ne180100]<AntennaModule,std::shared_ptr<AntennaModule> ctu::SharedSynchronizable<AntennaModule>::make_shared_ptr<AntennaModule>(AntennaModule*)::{lambda(AntennaModule*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210F308;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 120) = a2;
      *(void *)(a2 + 128) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 120) = a2;
  *(void *)(a2 + 128) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C5B5DA34(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<AntennaModule> ctu::SharedSynchronizable<AntennaModule>::make_shared_ptr<AntennaModule>(AntennaModule*)::{lambda(AntennaModule*)#1}::operator() const(AntennaModule*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C5B5DA5C(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<AntennaModule *,std::shared_ptr<AntennaModule> ctu::SharedSynchronizable<AntennaModule>::make_shared_ptr<AntennaModule>(AntennaModule*)::{lambda(AntennaModule *)#1},std::allocator<AntennaModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<AntennaModule *,std::shared_ptr<AntennaModule> ctu::SharedSynchronizable<AntennaModule>::make_shared_ptr<AntennaModule>(AntennaModule*)::{lambda(AntennaModule *)#1},std::allocator<AntennaModule>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<AntennaModule *,std::shared_ptr<AntennaModule> ctu::SharedSynchronizable<AntennaModule>::make_shared_ptr<AntennaModule>(AntennaModule*)::{lambda(AntennaModule *)#1},std::allocator<AntennaModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI13AntennaModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI13AntennaModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrI"
                                "T_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI13AntennaModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI13AntennaModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<AntennaModule> ctu::SharedSynchronizable<AntennaModule>::make_shared_ptr<AntennaModule>(AntennaModule*)::{lambda(AntennaModule*)#1}::operator() const(AntennaModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *ctu::SharedLoggable<AntennaModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F210F2C8;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ctu::SharedLoggable<AntennaModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F210F2C8;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void AntennaModule::init(void)::$_0::operator()(uint64_t a1)
{
  uint64_t v157 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing", buf, 2u);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v3 || (v4 = *(void *)(a1 + 120), (size_t v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v6 = v5;
  p_shared_weak_owners = &v5->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v128 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v129 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZZN13AntennaModule4initEvENK3__0clEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_73_1;
  aBlock[4] = a1;
  void aBlock[5] = v4;
  uint64_t v127 = v6;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  unint64_t v8 = _Block_copy(aBlock);
  unsigned __int8 v9 = *(NSObject **)(a1 + 136);
  if (v9) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
  }
  uint64_t v128 = v8;
  dispatch_object_t v129 = v9;
  unint64_t v10 = operator new(0x10uLL);
  GetABMLogServer(&v124);
  if (v8)
  {
    unsigned int v122 = _Block_copy(v8);
    dispatch_object_t v123 = v9;
    if (!v9) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  unsigned int v122 = 0;
  dispatch_object_t v123 = v9;
  if (v9) {
LABEL_11:
  }
    dispatch_retain(v9);
LABEL_12:
  uint64_t v11 = *(NSObject **)(a1 + 144);
  dispatch_object_t object = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  antenna::Service::Service(v10, &v124, (uint64_t)&v122, &object);
  size_t v12 = operator new(0x20uLL);
  *size_t v12 = &unk_1F210F3C8;
  v12[1] = 0;
  v12[2] = 0;
  v12[3] = v10;
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 184);
  *(void *)(a1 + 176) = v10;
  *(void *)(a1 + 184) = v12;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v123) {
    dispatch_release(v123);
  }
  if (v122) {
    _Block_release(v122);
  }
  uint64_t v14 = v125;
  if (v125 && !atomic_fetch_add(&v125->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  size_t v15 = (const void *)*MEMORY[0x1E4F4CAF8];
  size_t v16 = strlen((const char *)*MEMORY[0x1E4F4CAF8]);
  if (v16 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v17 = v16;
  if (v16 >= 0x17)
  {
    uint64_t v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v19 = v16 | 7;
    }
    uint64_t v20 = v19 + 1;
    size_t v18 = operator new(v19 + 1);
    size_t v131 = v17;
    unint64_t v132 = v20 | 0x8000000000000000;
    *(void *)std::string buf = v18;
    goto LABEL_33;
  }
  HIBYTE(v132) = v16;
  size_t v18 = buf;
  if (v16) {
LABEL_33:
  }
    memmove(v18, v15, v17);
  *((unsigned char *)v18 + v17) = 0;
  size_t v21 = v133;
  BOOL v22 = (const void *)*MEMORY[0x1E4F4C508];
  size_t v23 = strlen((const char *)*MEMORY[0x1E4F4C508]);
  if (v23 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v24 = (void *)v23;
  if (v23 >= 0x17)
  {
    uint64_t v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17) {
      uint64_t v25 = v23 | 7;
    }
    uint64_t v26 = v25 + 1;
    unint64_t v27 = operator new(v25 + 1);
    v133[1] = v24;
    unint64_t v134 = v26 | 0x8000000000000000;
    v133[0] = v27;
    size_t v21 = (void **)v27;
    goto LABEL_41;
  }
  HIBYTE(v134) = v23;
  if (v23) {
LABEL_41:
  }
    memmove(v21, v22, (size_t)v24);
  *((unsigned char *)v24 + (void)v21) = 0;
  uint64_t v28 = v135;
  xpc_object_t v29 = (const void *)*MEMORY[0x1E4F4C710];
  size_t v30 = strlen((const char *)*MEMORY[0x1E4F4C710]);
  if (v30 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v31 = (void *)v30;
  if (v30 >= 0x17)
  {
    uint64_t v32 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17) {
      uint64_t v32 = v30 | 7;
    }
    uint64_t v33 = v32 + 1;
    size_t v34 = operator new(v32 + 1);
    v135[1] = v31;
    unint64_t v136 = v33 | 0x8000000000000000;
    v135[0] = v34;
    uint64_t v28 = (void **)v34;
    goto LABEL_49;
  }
  HIBYTE(v136) = v30;
  if (v30) {
LABEL_49:
  }
    memmove(v28, v29, (size_t)v31);
  *((unsigned char *)v31 + (void)v28) = 0;
  size_t v35 = v137;
  size_t v36 = (const void *)*MEMORY[0x1E4F4C868];
  size_t v37 = strlen((const char *)*MEMORY[0x1E4F4C868]);
  if (v37 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  long long v38 = (void *)v37;
  if (v37 >= 0x17)
  {
    uint64_t v39 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v37 | 7) != 0x17) {
      uint64_t v39 = v37 | 7;
    }
    uint64_t v40 = v39 + 1;
    unint64_t v41 = operator new(v39 + 1);
    v137[1] = v38;
    unint64_t v138 = v40 | 0x8000000000000000;
    v137[0] = v41;
    size_t v35 = (void **)v41;
    goto LABEL_57;
  }
  HIBYTE(v138) = v37;
  if (v37) {
LABEL_57:
  }
    memmove(v35, v36, (size_t)v38);
  *((unsigned char *)v38 + (void)v35) = 0;
  long long v42 = v139;
  uint64_t v43 = (const void *)*MEMORY[0x1E4F4CFA8];
  size_t v44 = strlen((const char *)*MEMORY[0x1E4F4CFA8]);
  if (v44 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v45 = (void *)v44;
  if (v44 >= 0x17)
  {
    uint64_t v46 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v44 | 7) != 0x17) {
      uint64_t v46 = v44 | 7;
    }
    uint64_t v47 = v46 + 1;
    unint64_t v48 = operator new(v46 + 1);
    v139[1] = v45;
    unint64_t v140 = v47 | 0x8000000000000000;
    v139[0] = v48;
    long long v42 = (void **)v48;
    goto LABEL_65;
  }
  HIBYTE(v140) = v44;
  if (v44) {
LABEL_65:
  }
    memmove(v42, v43, (size_t)v45);
  *((unsigned char *)v45 + (void)v42) = 0;
  int v49 = v141;
  unint64_t v50 = (const void *)*MEMORY[0x1E4F4CFD0];
  size_t v51 = strlen((const char *)*MEMORY[0x1E4F4CFD0]);
  if (v51 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v52 = (void *)v51;
  if (v51 >= 0x17)
  {
    uint64_t v53 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v51 | 7) != 0x17) {
      uint64_t v53 = v51 | 7;
    }
    uint64_t v54 = v53 + 1;
    BOOL v55 = operator new(v53 + 1);
    v141[1] = v52;
    unint64_t v142 = v54 | 0x8000000000000000;
    v141[0] = v55;
    int v49 = (void **)v55;
    goto LABEL_73;
  }
  HIBYTE(v142) = v51;
  if (v51) {
LABEL_73:
  }
    memmove(v49, v50, (size_t)v52);
  *((unsigned char *)v52 + (void)v49) = 0;
  int v56 = v143;
  size_t v57 = (const void *)*MEMORY[0x1E4F4C808];
  size_t v58 = strlen((const char *)*MEMORY[0x1E4F4C808]);
  if (v58 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v59 = (void *)v58;
  if (v58 >= 0x17)
  {
    uint64_t v60 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v58 | 7) != 0x17) {
      uint64_t v60 = v58 | 7;
    }
    uint64_t v61 = v60 + 1;
    int v62 = operator new(v60 + 1);
    v143[1] = v59;
    unint64_t v144 = v61 | 0x8000000000000000;
    v143[0] = v62;
    int v56 = (void **)v62;
    goto LABEL_81;
  }
  HIBYTE(v144) = v58;
  if (v58) {
LABEL_81:
  }
    memmove(v56, v57, (size_t)v59);
  *((unsigned char *)v59 + (void)v56) = 0;
  size_t v63 = v145;
  unint64_t v64 = (const void *)*MEMORY[0x1E4F4CFA0];
  size_t v65 = strlen((const char *)*MEMORY[0x1E4F4CFA0]);
  if (v65 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v66 = (void *)v65;
  if (v65 >= 0x17)
  {
    uint64_t v67 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v65 | 7) != 0x17) {
      uint64_t v67 = v65 | 7;
    }
    uint64_t v68 = v67 + 1;
    dispatch_object_t v69 = operator new(v67 + 1);
    v145[1] = v66;
    unint64_t v146 = v68 | 0x8000000000000000;
    v145[0] = v69;
    size_t v63 = (void **)v69;
    goto LABEL_89;
  }
  HIBYTE(v146) = v65;
  if (v65) {
LABEL_89:
  }
    memmove(v63, v64, (size_t)v66);
  *((unsigned char *)v66 + (void)v63) = 0;
  uint64_t v70 = v147;
  unint64_t v71 = (const void *)*MEMORY[0x1E4F4CF90];
  size_t v72 = strlen((const char *)*MEMORY[0x1E4F4CF90]);
  if (v72 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  CFTypeRef v73 = (void *)v72;
  if (v72 >= 0x17)
  {
    uint64_t v74 = (v72 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v72 | 7) != 0x17) {
      uint64_t v74 = v72 | 7;
    }
    uint64_t v75 = v74 + 1;
    xpc_object_t v76 = operator new(v74 + 1);
    v147[1] = v73;
    unint64_t v148 = v75 | 0x8000000000000000;
    v147[0] = v76;
    uint64_t v70 = (void **)v76;
    goto LABEL_97;
  }
  HIBYTE(v148) = v72;
  if (v72) {
LABEL_97:
  }
    memmove(v70, v71, (size_t)v73);
  *((unsigned char *)v73 + (void)v70) = 0;
  v77 = v149;
  xpc_object_t v78 = (const void *)*MEMORY[0x1E4F4C810];
  size_t v79 = strlen((const char *)*MEMORY[0x1E4F4C810]);
  if (v79 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v80 = (void *)v79;
  if (v79 >= 0x17)
  {
    uint64_t v81 = (v79 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v79 | 7) != 0x17) {
      uint64_t v81 = v79 | 7;
    }
    uint64_t v82 = v81 + 1;
    xpc_object_t v83 = operator new(v81 + 1);
    v149[1] = v80;
    unint64_t v150 = v82 | 0x8000000000000000;
    v149[0] = v83;
    v77 = (void **)v83;
    goto LABEL_105;
  }
  HIBYTE(v150) = v79;
  if (v79) {
LABEL_105:
  }
    memmove(v77, v78, (size_t)v80);
  *((unsigned char *)v80 + (void)v77) = 0;
  xpc_object_t v84 = v151;
  size_t v85 = (const void *)*MEMORY[0x1E4F4D018];
  size_t v86 = strlen((const char *)*MEMORY[0x1E4F4D018]);
  if (v86 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v87 = (void *)v86;
  if (v86 >= 0x17)
  {
    uint64_t v88 = (v86 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v86 | 7) != 0x17) {
      uint64_t v88 = v86 | 7;
    }
    uint64_t v89 = v88 + 1;
    size_t v90 = operator new(v88 + 1);
    v151[1] = v87;
    unint64_t v152 = v89 | 0x8000000000000000;
    v151[0] = v90;
    xpc_object_t v84 = (void **)v90;
    goto LABEL_113;
  }
  HIBYTE(v152) = v86;
  if (v86) {
LABEL_113:
  }
    memmove(v84, v85, (size_t)v87);
  *((unsigned char *)v87 + (void)v84) = 0;
  char v154 = 15;
  strcpy((char *)v153, "kSetWorkoutInfo");
  size_t v91 = __p;
  unint64_t v92 = (const void *)*MEMORY[0x1E4F4C108];
  size_t v93 = strlen((const char *)*MEMORY[0x1E4F4C108]);
  if (v93 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v94 = (void *)v93;
  if (v93 >= 0x17)
  {
    uint64_t v109 = (v93 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v93 | 7) != 0x17) {
      uint64_t v109 = v93 | 7;
    }
    uint64_t v110 = v109 + 1;
    xpc_object_t v111 = operator new(v109 + 1);
    __p[1] = v94;
    unint64_t v156 = v110 | 0x8000000000000000;
    __p[0] = v111;
    size_t v91 = (void **)v111;
  }
  else
  {
    HIBYTE(v156) = v93;
    if (!v93)
    {
      LOBYTE(__p[0]) = 0;
      unint64_t v96 = (void **)(a1 + 152);
      size_t v95 = *(uint64_t **)(a1 + 152);
      if (v95) {
        goto LABEL_118;
      }
LABEL_145:
      uint64_t v98 = 0;
      goto LABEL_149;
    }
  }
  memmove(v91, v92, (size_t)v94);
  *((unsigned char *)v94 + (void)v91) = 0;
  unint64_t v96 = (void **)(a1 + 152);
  size_t v95 = *(uint64_t **)(a1 + 152);
  if (!v95) {
    goto LABEL_145;
  }
LABEL_118:
  uint64_t v97 = 0;
  uint64_t v98 = 0;
  do
  {
    uint64_t v99 = &buf[v97];
    __int16 v100 = (void **)(v95 + 1);
    if (&buf[v97] != (uint8_t *)(v95 + 1))
    {
      signed __int8 v101 = v99[23];
      if (*((char *)v95 + 31) < 0)
      {
        if (v101 >= 0) {
          std::string v103 = &buf[v97];
        }
        else {
          std::string v103 = *(uint8_t **)&buf[v97];
        }
        if (v101 >= 0) {
          size_t v104 = v99[23];
        }
        else {
          size_t v104 = *(void *)&buf[v97 + 8];
        }
        std::string::__assign_no_alias<false>(v100, v103, v104);
      }
      else if ((v99[23] & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v100, *(void **)&buf[v97], *(void *)&buf[v97 + 8]);
      }
      else
      {
        long long v102 = *(_OWORD *)v99;
        v95[3] = *((void *)v99 + 2);
        *(_OWORD *)__int16 v100 = v102;
      }
    }
    unint64_t v96 = (void **)*v96;
    size_t v95 = (uint64_t *)*v95;
    ++v98;
    uint64_t v105 = v97 + 24;
    if (!v95) {
      break;
    }
    BOOL v106 = v97 == 288;
    v97 += 24;
  }
  while (!v106);
  if (v95)
  {
    if (v96)
    {
      xpc_object_t v107 = (void **)*v96;
      if (*v96)
      {
        NSObject *v96 = 0;
        do
        {
          xpc_object_t v108 = (void **)*v107;
          if (*((char *)v107 + 31) < 0) {
            operator delete(v107[1]);
          }
          operator delete(v107);
          xpc_object_t v107 = v108;
        }
        while (v108);
      }
    }
    goto LABEL_154;
  }
  if (v105 == 312) {
    goto LABEL_154;
  }
LABEL_149:
  __int16 v112 = operator new(0x20uLL);
  xpc_object_t v113 = &buf[24 * v98];
  void *v112 = 0;
  xpc_object_t v114 = (std::string *)(v112 + 1);
  if ((char)v113[23] < 0)
  {
    std::string::__init_copy_ctor_external(v114, *(const std::string::value_type **)v113, *((void *)v113 + 1));
  }
  else
  {
    *(_OWORD *)&v114->__r_.__value_.__l.__data_ = *(_OWORD *)v113;
    v112[3] = *((void *)v113 + 2);
  }
  size_t v115 = v112;
  uint64_t v116 = v98 - 12;
  if (v98 != 12)
  {
    xpc_object_t v117 = &v133[3 * v98];
    size_t v118 = v112;
    do
    {
      size_t v115 = operator new(0x20uLL);
      *size_t v115 = 0;
      size_t v120 = (std::string *)(v115 + 1);
      if (*((char *)v117 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v120, (const std::string::value_type *)*v117, (std::string::size_type)v117[1]);
      }
      else
      {
        *(_OWORD *)&v120->__r_.__value_.__l.__data_ = *(_OWORD *)v117;
        v115[3] = v117[2];
      }
      void *v118 = v115;
      v117 += 3;
      size_t v118 = v115;
    }
    while (!__CFADD__(v116++, 1));
  }
  *size_t v115 = *v96;
  NSObject *v96 = v112;
LABEL_154:
  if (SHIBYTE(v156) < 0)
  {
    operator delete(__p[0]);
    if ((v154 & 0x80000000) == 0)
    {
LABEL_156:
      if ((SHIBYTE(v152) & 0x80000000) == 0) {
        goto LABEL_157;
      }
      goto LABEL_176;
    }
  }
  else if ((v154 & 0x80000000) == 0)
  {
    goto LABEL_156;
  }
  operator delete(v153[0]);
  if ((SHIBYTE(v152) & 0x80000000) == 0)
  {
LABEL_157:
    if ((SHIBYTE(v150) & 0x80000000) == 0) {
      goto LABEL_158;
    }
    goto LABEL_177;
  }
LABEL_176:
  operator delete(v151[0]);
  if ((SHIBYTE(v150) & 0x80000000) == 0)
  {
LABEL_158:
    if ((SHIBYTE(v148) & 0x80000000) == 0) {
      goto LABEL_159;
    }
    goto LABEL_178;
  }
LABEL_177:
  operator delete(v149[0]);
  if ((SHIBYTE(v148) & 0x80000000) == 0)
  {
LABEL_159:
    if ((SHIBYTE(v146) & 0x80000000) == 0) {
      goto LABEL_160;
    }
    goto LABEL_179;
  }
LABEL_178:
  operator delete(v147[0]);
  if ((SHIBYTE(v146) & 0x80000000) == 0)
  {
LABEL_160:
    if ((SHIBYTE(v144) & 0x80000000) == 0) {
      goto LABEL_161;
    }
    goto LABEL_180;
  }
LABEL_179:
  operator delete(v145[0]);
  if ((SHIBYTE(v144) & 0x80000000) == 0)
  {
LABEL_161:
    if ((SHIBYTE(v142) & 0x80000000) == 0) {
      goto LABEL_162;
    }
    goto LABEL_181;
  }
LABEL_180:
  operator delete(v143[0]);
  if ((SHIBYTE(v142) & 0x80000000) == 0)
  {
LABEL_162:
    if ((SHIBYTE(v140) & 0x80000000) == 0) {
      goto LABEL_163;
    }
    goto LABEL_182;
  }
LABEL_181:
  operator delete(v141[0]);
  if ((SHIBYTE(v140) & 0x80000000) == 0)
  {
LABEL_163:
    if ((SHIBYTE(v138) & 0x80000000) == 0) {
      goto LABEL_164;
    }
    goto LABEL_183;
  }
LABEL_182:
  operator delete(v139[0]);
  if ((SHIBYTE(v138) & 0x80000000) == 0)
  {
LABEL_164:
    if ((SHIBYTE(v136) & 0x80000000) == 0) {
      goto LABEL_165;
    }
    goto LABEL_184;
  }
LABEL_183:
  operator delete(v137[0]);
  if ((SHIBYTE(v136) & 0x80000000) == 0)
  {
LABEL_165:
    if ((SHIBYTE(v134) & 0x80000000) == 0) {
      goto LABEL_166;
    }
LABEL_185:
    operator delete(v133[0]);
    if ((SHIBYTE(v132) & 0x80000000) == 0) {
      goto LABEL_167;
    }
    goto LABEL_186;
  }
LABEL_184:
  operator delete(v135[0]);
  if (SHIBYTE(v134) < 0) {
    goto LABEL_185;
  }
LABEL_166:
  if ((SHIBYTE(v132) & 0x80000000) == 0) {
    goto LABEL_167;
  }
LABEL_186:
  operator delete(*(void **)buf);
LABEL_167:
  AntennaModule::initializeProperty((AntennaModule *)a1);
  if (v129) {
    dispatch_release(v129);
  }
  if (v128) {
    _Block_release(v128);
  }
  if (v127) {
    std::__shared_weak_count::__release_weak(v127);
  }
  std::__shared_weak_count::__release_weak(v6);
}

void sub_1C5B5E8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  operator delete(v81);
  if (a80 < 0)
  {
    operator delete(__p);
    if ((a78 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a78 & 0x80000000) == 0)
  {
LABEL_3:
    if (a76 < 0) {
      goto LABEL_4;
    }
    goto LABEL_17;
  }
  operator delete(a77);
  if (a76 < 0)
  {
LABEL_4:
    operator delete(a75);
    if ((a74 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  if ((a74 & 0x80000000) == 0)
  {
LABEL_5:
    if (a72 < 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a73);
  if (a72 < 0)
  {
LABEL_6:
    operator delete(a71);
    if ((a70 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  if ((a70 & 0x80000000) == 0)
  {
LABEL_7:
    if (a64 < 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a65);
  if (a64 < 0)
  {
LABEL_8:
    operator delete(a59);
    if ((a58 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  if ((a58 & 0x80000000) == 0)
  {
LABEL_9:
    if (a52 < 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a53);
  if (a52 < 0)
  {
LABEL_10:
    operator delete(a47);
    if ((a46 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_23:
  if ((a46 & 0x80000000) == 0)
  {
LABEL_11:
    if (a40 < 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_24:
  operator delete(a41);
  if (a40 < 0)
  {
LABEL_12:
    operator delete(a35);
    if ((a34 & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }
LABEL_25:
  if ((a34 & 0x80000000) == 0)
  {
LABEL_13:
    if ((a28 & 0x80000000) == 0)
    {
LABEL_28:
      dispatch::callback<void({block_pointer})(xpc::dict)>::~callback((uint64_t)&a21);
      if (a20) {
        std::__shared_weak_count::__release_weak(a20);
      }
      std::__shared_weak_count::__release_weak(v80);
      _Unwind_Resume(a1);
    }
LABEL_27:
    operator delete(a23);
    goto LABEL_28;
  }
LABEL_26:
  operator delete(a29);
  if ((a28 & 0x80000000) == 0) {
    goto LABEL_28;
  }
  goto LABEL_27;
}

void sub_1C5B5E8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a80 < 0)
  {
    operator delete(a79);
    if ((a78 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a78 & 0x80000000) == 0)
  {
LABEL_3:
    if (a76 < 0) {
      goto LABEL_4;
    }
    goto LABEL_17;
  }
  operator delete(a77);
  if (a76 < 0)
  {
LABEL_4:
    operator delete(a75);
    if ((a74 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  if ((a74 & 0x80000000) == 0)
  {
LABEL_5:
    if (a72 < 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a73);
  if (a72 < 0)
  {
LABEL_6:
    operator delete(a71);
    if ((a70 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  if ((a70 & 0x80000000) == 0)
  {
LABEL_7:
    if (a64 < 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a65);
  if (a64 < 0)
  {
LABEL_8:
    operator delete(a59);
    if ((a58 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  if ((a58 & 0x80000000) == 0)
  {
LABEL_9:
    if (a52 < 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a53);
  if (a52 < 0)
  {
LABEL_10:
    operator delete(a47);
    if ((a46 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_23:
  if ((a46 & 0x80000000) == 0)
  {
LABEL_11:
    if (a40 < 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_24:
  operator delete(a41);
  if (a40 < 0)
  {
LABEL_12:
    operator delete(a35);
    if ((a34 & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }
LABEL_25:
  if ((a34 & 0x80000000) == 0)
  {
LABEL_13:
    if ((a28 & 0x80000000) == 0)
    {
LABEL_28:
      dispatch::callback<void({block_pointer})(xpc::dict)>::~callback((uint64_t)&a21);
      if (a20) {
        std::__shared_weak_count::__release_weak(a20);
      }
      std::__shared_weak_count::__release_weak(v80);
      _Unwind_Resume(a1);
    }
LABEL_27:
    operator delete(a23);
    goto LABEL_28;
  }
LABEL_26:
  operator delete(a29);
  if ((a28 & 0x80000000) == 0) {
    goto LABEL_28;
  }
  goto LABEL_27;
}

void sub_1C5B5E98C(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C5B5E994);
  }
  JUMPOUT(0x1C5B5EB38);
}

void sub_1C5B5E9D0()
{
}

void sub_1C5B5EB48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  while (1)
  {
    if (*((char *)v23 - 1) < 0) {
      operator delete(*(v23 - 3));
    }
    v23 -= 3;
    if (v23 == (void **)&a23) {
      JUMPOUT(0x1C5B5EB0CLL);
    }
  }
}

void ___ZZN13AntennaModule4initEvENK3__0clEv_block_invoke(void *a1, xpc_object_t *a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    size_t v5 = (AntennaModule *)a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      AntennaModule::processCallback(v5, a2);
    }
  }
}

void std::__shared_ptr_pointer<antenna::Service *,std::shared_ptr<antenna::Service>::__shared_ptr_default_delete<antenna::Service,antenna::Service>,std::allocator<antenna::Service>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<antenna::Service *,std::shared_ptr<antenna::Service>::__shared_ptr_default_delete<antenna::Service,antenna::Service>,std::allocator<antenna::Service>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count ***)(a1 + 24);
  if (v1)
  {
    uint64_t v2 = v1[1];
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      unint64_t v3 = v1;
    }
    else
    {
      unint64_t v3 = v1;
    }
    operator delete(v3);
  }
}

uint64_t std::__shared_ptr_pointer<antenna::Service *,std::shared_ptr<antenna::Service>::__shared_ptr_default_delete<antenna::Service,antenna::Service>,std::allocator<antenna::Service>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C5BCC29FLL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C5BCC29FLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C5BCC29FLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C5BCC29FLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void ___ZNK3ctu20SharedSynchronizableI13AntennaModuleE20execute_wrapped_syncIZNS1_4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke(uint64_t a1)
{
}

void ctu::SharedSynchronizable<AntennaModule>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI13AntennaModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F210F410;
  void block[5] = v5;
  size_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = a2;
  dispatch_async(v8, block);
  unint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI13AntennaModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c42_ZTSNSt3__110shared_ptrIK13AntennaModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c42_ZTSNSt3__110shared_ptrIK13AntennaModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI13AntennaModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = 3760250880;
  if (MEMORY[0x1C8795EB0]((*a1)[1]) == MEMORY[0x1E4F14590])
  {
    uint64_t v5 = *(CMOnBodyDelegate ****)(v3 + 176);
    if (v5)
    {
      uint64_t v6 = (ctu *)v2[1];
      unint64_t v10 = v6;
      if (v6)
      {
        xpc_retain(v6);
      }
      else
      {
        uint64_t v6 = (ctu *)xpc_null_create();
        unint64_t v10 = v6;
      }
      antenna::Service::setMotionThresholds(v5, &v10);
      xpc_release(v6);
      uint64_t v4 = 0;
      unint64_t v10 = 0;
    }
  }
  uint64_t v7 = v2[2];
  xpc_object_t object = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v7 + 16))(v7, v4, &object);
  xpc_release(object);
  uint64_t v8 = (const void *)v2[2];
  if (v8) {
    _Block_release(v8);
  }
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  unsigned __int8 v9 = (std::__shared_weak_count *)a1[2];
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  operator delete(a1);
}

void sub_1C5B5F0D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  uint64_t v13 = v12;
  xpc_release(v13);
  size_t v15 = *(const void **)(v11 + 16);
  if (v15) {
    _Block_release(v15);
  }
  xpc_release(*(xpc_object_t *)(v11 + 8));
  operator delete((void *)v11);
  size_t v16 = (std::__shared_weak_count *)v10[2];
  if (v16)
  {
    if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI13AntennaModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  unsigned int v11 = -534716416;
  xpc_object_t v4 = xpc_null_create();
  xpc_object_t v10 = v4;
  if (MEMORY[0x1C8795EB0](v2[1]) == MEMORY[0x1E4F14590])
  {
    uint64_t v5 = *(NSObject ****)(v3 + 176);
    if (v5)
    {
      antenna::Service::antennaGetProperty(v5, (void **)v2 + 1, &object);
      xpc_object_t v6 = object;
      xpc_object_t object = xpc_null_create();
      xpc_object_t v10 = v6;
      xpc_release(v4);
      xpc_release(object);
      unsigned int v11 = 0;
    }
  }
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(v2 + 2, &v11, &v10);
  xpc_release(v10);
  uint64_t v7 = (const void *)v2[2];
  if (v7) {
    _Block_release(v7);
  }
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  uint64_t v8 = (std::__shared_weak_count *)a1[2];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(a1);
}

void sub_1C5B5F2D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  xpc_release(v14);
  size_t v16 = (const void *)v12[2];
  if (v16) {
    _Block_release(v16);
  }
  xpc_release(*v13);
  operator delete(v12);
  size_t v17 = (std::__shared_weak_count *)v11[2];
  if (v17)
  {
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  operator delete(v11);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<AntennaModule>::execute_wrapped<AntennaModule::initialize(dispatch::group_session)::$_0>(AntennaModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<AntennaModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<AntennaModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count ****)a1;
  AntennaModule::finishInitialization_sync(**(std::__shared_weak_count ****)a1);
  operator delete(v2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    xpc_object_t v4 = (void *)a1;
  }
  else
  {
    xpc_object_t v4 = (void *)a1;
  }
  operator delete(v4);
}

void sub_1C5B5F434(_Unwind_Exception *a1)
{
  operator delete(v2);
  xpc_object_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<AntennaModule>::execute_wrapped<AntennaModule::sleep(dispatch::group_session)::$_0>(AntennaModule::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<AntennaModule::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<AntennaModule::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(antenna::Service::Internal ***)(*(void *)*a1 + 176);
  if (v3 && *v3) {
    antenna::Service::Internal::enterLowPower(*v3);
  }
  xpc_object_t v4 = v2[1];
  if (v4)
  {
    dispatch_group_leave(v4);
    uint64_t v5 = v2[1];
    if (v5) {
      dispatch_release(v5);
    }
  }
  operator delete(v2);
  xpc_object_t v6 = (std::__shared_weak_count *)a1[2];
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v7 = a1;
  }
  else
  {
    uint64_t v7 = a1;
  }
  operator delete(v7);
}

void dispatch::async<void ctu::SharedSynchronizable<AntennaModule>::execute_wrapped<AntennaModule::wake(dispatch::group_session)::$_0>(AntennaModule::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<AntennaModule::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<AntennaModule::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(antenna::Service::Internal ***)(*(void *)*a1 + 176);
  if (v3 && *v3) {
    antenna::Service::Internal::exitLowPower(*v3);
  }
  xpc_object_t v4 = v2[1];
  if (v4)
  {
    dispatch_group_leave(v4);
    uint64_t v5 = v2[1];
    if (v5) {
      dispatch_release(v5);
    }
  }
  operator delete(v2);
  xpc_object_t v6 = (std::__shared_weak_count *)a1[2];
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v7 = a1;
  }
  else
  {
    uint64_t v7 = a1;
  }
  operator delete(v7);
}

void dispatch::async<void ctu::SharedSynchronizable<AntennaModule>::execute_wrapped<AntennaModule::initializeProperty(void)::$_0>(AntennaModule::initializeProperty(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<AntennaModule::initializeProperty(void)::$_0,dispatch_queue_s *::default_delete<AntennaModule::initializeProperty(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)a1;
  uint64_t v3 = (void **)(*(void *)a1 + 8);
  AntennaModule::initializeProperty_sync(**(void **)a1, (uint64_t)v3);
  if (*((char *)v2 + 31) < 0) {
    operator delete(*v3);
  }
  operator delete(v2);
  xpc_object_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = (void *)a1;
  }
  else
  {
    uint64_t v5 = (void *)a1;
  }
  operator delete(v5);
}

void sub_1C5B5F71C(_Unwind_Exception *a1)
{
  if (v2[31] < 0) {
    operator delete(*v3);
  }
  operator delete(v2);
  uint64_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *ABMProperties::create_default_global(ABMProperties *this)
{
  uint64_t v2 = operator new(0x18uLL);
  MEMORY[0x1C87942F0](v2, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
  *(void *)this = v2;
  size_t result = operator new(0x20uLL);
  *size_t result = &unk_1F210A638;
  result[1] = 0;
  result[2] = 0;
  result[3] = v2;
  *((void *)this + 1) = result;
  return result;
}

void std::shared_ptr<ABMProperties>::operator=[abi:ne180100](long long *a1)
{
  long long v1 = *a1;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v2 = (std::__shared_weak_count *)off_1EBBDC7E0;
  *(_OWORD *)&qword_1EBBDC7D8 = v1;
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

uint64_t __cxx_global_var_init_44()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

uint64_t __cxx_global_var_init_45()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

void LogTracker::create(uint64_t *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = operator new(0xE0uLL);
  uint64_t v5 = (uint64_t)v4;
  uint64_t v6 = *a1;
  uint64_t v7 = (std::__shared_weak_count *)a1[1];
  v8[0] = v6;
  v8[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  LogTracker::LogTracker((uint64_t)v4, v8);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<LogTracker>::shared_ptr[abi:ne180100]<LogTracker,std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker*)#1},void>(a2, v5);
  ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2 + 48);
  if (v7)
  {
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_1C5B5FA10(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v2);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t LogTracker::LogTracker(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  xpc_object_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1F2112348;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(void *)a1 = &unk_1F210CD08;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &unk_1F210CD08;
  }
  *(void *)a1 = &unk_1F210F450;
  *(void *)(a1 + 48) = &unk_1F210F4C0;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v12, "com.apple.telephony.abm", "logtracker.mod");
  GetABMLogServer(&v10);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v6 = dispatch_queue_create_with_target_V2("logtracker.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v6, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v6);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = v6;
  if (v6)
  {
    dispatch_retain(v6);
    *(void *)(a1 + 144) = 0;
    dispatch_release(v6);
  }
  else
  {
    *(void *)(a1 + 144) = 0;
  }
  *(void *)(a1 + 48) = &unk_1F210F7C0;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v14);
  *(void *)(a1 + 56) = &unk_1F2102CB8;
  uint64_t v7 = v11;
  *(void *)(a1 + 104) = v10;
  *(void *)(a1 + 112) = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v13);
  *(void *)(a1 + 48) = &unk_1F210F850;
  uint64_t v8 = v11;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v12);
  *(void *)a1 = &unk_1F210F450;
  *(void *)(a1 + 48) = &unk_1F210F4C0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 152) = a1 + 160;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 208) = 0;
  return a1;
}

void sub_1C5B5FD14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a15);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a13);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v16);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  Service::~Service(v15);
  _Unwind_Resume(a1);
}

void sub_1C5B5FD58(_Unwind_Exception *a1)
{
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void LogTracker::~LogTracker(LogTracker *this)
{
  *(void *)this = &unk_1F210F450;
  *((void *)this + 6) = &unk_1F210F4C0;
  uint64_t v2 = *((void *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v13, 2u);
  }
  uint64_t v3 = *((void *)this + 26);
  if (v3) {
    dispatch_release(v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)*((void *)this + 24);
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v5 = *((void *)this + 22);
    if (!v5) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  uint64_t v5 = *((void *)this + 22);
  if (v5) {
LABEL_8:
  }
    dispatch_release(v5);
LABEL_9:
  std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::destroy(*((void *)this + 20));
  *((void *)this + 6) = &unk_1F210F7C0;
  MEMORY[0x1C87940C0]((char *)this + 56);
  uint64_t v6 = *((void *)this + 18);
  if (v6) {
    dispatch_release(v6);
  }
  uint64_t v7 = *((void *)this + 17);
  if (v7) {
    dispatch_release(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  *(void *)this = &unk_1F2112348;
  uint64_t v9 = *((void *)this + 3);
  if (v9)
  {
    uint64_t v10 = *((void *)this + 4);
    unsigned int v11 = (void *)*((void *)this + 3);
    if (v10 != v9)
    {
      do
      {
        if (*(char *)(v10 - 1) < 0) {
          operator delete(*(void **)(v10 - 24));
        }
        v10 -= 24;
      }
      while (v10 != v9);
      unsigned int v11 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v9;
    operator delete(v11);
  }
  size_t v12 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
}

{
  void *v1;
  uint64_t vars8;

  LogTracker::~LogTracker(this);

  operator delete(v1);
}

void non-virtual thunk to'LogTracker::~LogTracker(LogTracker *this)
{
}

{
  void *v1;
  uint64_t vars8;

  LogTracker::~LogTracker((LogTracker *)((char *)this - 48));

  operator delete(v1);
}

const char *LogTracker::getName(LogTracker *this)
{
  return "logtracker.mod";
}

void LogTracker::initialize(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v9 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)a1[16];
  if (!v10 || (v11 = a1[15], (size_t v12 = std::__shared_weak_count::lock(v10)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v13 = v12;
  uint64_t v14 = operator new(0x20uLL);
  *uint64_t v14 = v5;
  v14[1] = v7;
  void v14[2] = a1;
  v14[3] = v9;
  size_t v15 = a1[17];
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  size_t v16 = operator new(0x18uLL);
  *size_t v16 = v14;
  v16[1] = v11;
  v16[2] = v13;
  dispatch_async_f(v15, v16, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<LogTracker>::execute_wrapped<LogTracker::initialize(dispatch::group_session)::$_0>(LogTracker::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<LogTracker::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<LogTracker::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  size_t v17 = (std::__shared_weak_count *)a1[16];
  if (!v17 || (uint64_t v18 = a1[15], (v19 = std::__shared_weak_count::lock(v17)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v20 = v19;
  size_t v21 = operator new(8uLL);
  *size_t v21 = a1;
  BOOL v22 = a1[17];
  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  size_t v23 = operator new(0x18uLL);
  *size_t v23 = v21;
  v23[1] = v18;
  void v23[2] = v20;
  dispatch_async_f(v22, v23, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<LogTracker>::execute_wrapped<LogTracker::initialize(dispatch::group_session)::$_1>(LogTracker::initialize(dispatch::group_session)::$_1 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<LogTracker::initialize(dispatch::group_session)::$_1,dispatch_queue_s *::default_delete<LogTracker::initialize(dispatch::group_session)::$_1>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }

  std::__shared_weak_count::__release_weak(v7);
}

void LogTracker::finishInitialization_sync(LogTracker *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v2 || (v3 = *((void *)this + 15), (xpc_object_t v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (const char *)(*(uint64_t (**)(LogTracker *))(*(void *)this + 16))(this);
  size_t v7 = strlen(v6);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    uint64_t v9 = (void **)operator new(v10 + 1);
    __dst[1] = v8;
    unint64_t v33 = v11 | 0x8000000000000000;
    __dst[0] = v9;
  }
  else
  {
    HIBYTE(v33) = v7;
    uint64_t v9 = __dst;
    if (!v7) {
      goto LABEL_13;
    }
  }
  memmove(v9, v6, (size_t)v8);
LABEL_13:
  *((unsigned char *)v8 + (void)v9) = 0;
  CFTypeRef cf = 0;
  AppleBasebandManager::create();
  long long v12 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 24);
  *(_OWORD *)((char *)this + 184) = v12;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = *(std::__shared_weak_count **)&buf[8];
  if (!*(void *)&buf[8]
    || atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    CFTypeRef v15 = cf;
    if (!cf) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  CFTypeRef v15 = cf;
  if (cf) {
LABEL_19:
  }
    CFRelease(v15);
LABEL_20:
  if (SHIBYTE(v33) < 0)
  {
    operator delete(__dst[0]);
    if (*((void *)this + 23))
    {
LABEL_22:
      size_t v16 = (const void *)*MEMORY[0x1E4F4C830];
      size_t v17 = strlen((const char *)*MEMORY[0x1E4F4C830]);
      if (v17 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      uint64_t v18 = (void *)v17;
      if (v17 >= 0x17)
      {
        uint64_t v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v17 | 7) != 0x17) {
          uint64_t v21 = v17 | 7;
        }
        uint64_t v22 = v21 + 1;
        uint64_t v19 = operator new(v21 + 1);
        __p[1] = v18;
        unint64_t v30 = v22 | 0x8000000000000000;
        __p[0] = v19;
      }
      else
      {
        HIBYTE(v30) = v17;
        uint64_t v19 = __p;
        if (!v17) {
          goto LABEL_33;
        }
      }
      memmove(v19, v16, (size_t)v18);
LABEL_33:
      *((unsigned char *)v18 + (void)v19) = 0;
      v25[0] = MEMORY[0x1E4F143A8];
      v25[1] = 3321888768;
      void v25[2] = ___ZN10LogTracker25finishInitialization_syncEv_block_invoke;
      v25[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e70_v24__0_shared_ptr_abm::client::Event____Event_____shared_weak_count__8l;
      v25[4] = this;
      v25[5] = v3;
      uint64_t v26 = v5;
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      size_t v23 = _Block_copy(v25);
      uint64_t v24 = *((void *)this + 17);
      if (v24) {
        dispatch_retain(*((dispatch_object_t *)this + 17));
      }
      long long aBlock = v23;
      dispatch_object_t object = v24;
      AppleBasebandManager::setEventHandler();
      if (object) {
        dispatch_release(object);
      }
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (SHIBYTE(v30) < 0) {
        operator delete(__p[0]);
      }
      AppleBasebandManager::eventsOn(*((AppleBasebandManager **)this + 23));
      if (v26) {
        std::__shared_weak_count::__release_weak(v26);
      }
      goto LABEL_43;
    }
  }
  else if (*((void *)this + 23))
  {
    goto LABEL_22;
  }
  uint64_t v20 = *((void *)this + 11);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl(&dword_1C59C6000, v20, OS_LOG_TYPE_ERROR, "Failed to create AppleBasebandManager instance", buf, 2u);
  }
LABEL_43:
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C5B605C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    std::__shared_weak_count::__release_weak(v30);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v30);
  _Unwind_Resume(a1);
}

void ___ZN10LogTracker25finishInitialization_syncEv_block_invoke(void *a1, abm::client::Event **a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    unint64_t v27 = v6;
    if (v6)
    {
      if (!a1[5])
      {
        uint64_t v18 = v6;
LABEL_43:
        if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
        return;
      }
      CFDictionaryRef v25 = (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL;
      abm::client::Event::getData((uint64_t *)&v25, *a2);
      if (v25) {
        size_t v7 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        size_t v7 = 0;
      }
      if (v7)
      {
        v24[0] = 0xAAAAAAAAAAAAAAAALL;
        v24[1] = 0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v24, v25);
        memset(buf, 170, sizeof(buf));
        uint64_t v8 = (const char *)*MEMORY[0x1E4F4C898];
        char v22 = 0;
        LOBYTE(__p[0]) = 0;
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v20, v8);
        ctu::cf::map_adapter::getString();
        MEMORY[0x1C8794290](v20);
        if (v22 < 0) {
          operator delete(__p[0]);
        }
        uint8_t v9 = buf[23];
        if ((buf[23] & 0x80u) == 0) {
          size_t v10 = buf[23];
        }
        else {
          size_t v10 = *(void *)&buf[8];
        }
        if (v10 == strlen((const char *)*MEMORY[0x1E4F4D1E8]))
        {
          uint64_t v11 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
          if (!memcmp(v11, (const void *)*MEMORY[0x1E4F4D1E8], v10))
          {
            long long v12 = *(NSObject **)(v5 + 88);
            if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(__p[0]) = 0;
              _os_log_impl(&dword_1C59C6000, v12, OS_LOG_TYPE_DEFAULT, "#I Cleaning up log dump db due to change in hardware model", (uint8_t *)__p, 2u);
            }
            pthread_mutex_lock(&ctu::Singleton<LogDumpDB,LogDumpDB,ctu::PthreadMutexGuardPolicy<LogDumpDB>>::sInstance);
            uint64_t v13 = (LogDumpDB *)xmmword_1EBBDCAA8;
            if (!(void)xmmword_1EBBDCAA8)
            {
              LogDumpDB::create_default_global((LogDumpDB *)__p);
              long long v14 = *(_OWORD *)__p;
              __p[0] = 0;
              __p[1] = 0;
              CFTypeRef v15 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDCAA8 + 1);
              xmmword_1EBBDCAA8 = v14;
              if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                std::__shared_weak_count::__release_weak(v15);
              }
              size_t v16 = (std::__shared_weak_count *)__p[1];
              if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                std::__shared_weak_count::__release_weak(v16);
              }
              uint64_t v13 = (LogDumpDB *)xmmword_1EBBDCAA8;
            }
            size_t v17 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDCAA8 + 1);
            v20[0] = v13;
            v20[1] = *((void *)&xmmword_1EBBDCAA8 + 1);
            if (*((void *)&xmmword_1EBBDCAA8 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1EBBDCAA8 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            pthread_mutex_unlock(&ctu::Singleton<LogDumpDB,LogDumpDB,ctu::PthreadMutexGuardPolicy<LogDumpDB>>::sInstance);
            LogDumpDB::clearDB(v13);
            if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
            uint8_t v9 = buf[23];
          }
        }
        if ((v9 & 0x80) != 0) {
          operator delete(*(void **)buf);
        }
        MEMORY[0x1C87942E0](v24);
      }
      else
      {
        uint64_t v19 = *(NSObject **)(v5 + 88);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl(&dword_1C59C6000, v19, OS_LOG_TYPE_DEFAULT, "#I Empty info passed", buf, 2u);
        }
      }
      if (v25) {
        CFRelease(v25);
      }
      uint64_t v18 = v27;
      if (v27) {
        goto LABEL_43;
      }
    }
  }
}

void sub_1C5B609EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  pthread_mutex_unlock(&ctu::Singleton<LogDumpDB,LogDumpDB,ctu::PthreadMutexGuardPolicy<LogDumpDB>>::sInstance);
  if (a23 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C87942E0](&a24);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v24 - 56));
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v24 - 48);
  _Unwind_Resume(a1);
}

void sub_1C5B60A7C(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void LogTracker::shutdown(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v7 = v6;
  uint64_t v8 = operator new(0x10uLL);
  void *v8 = a1;
  v8[1] = v3;
  uint8_t v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  size_t v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  _DWORD v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<LogTracker>::execute_wrapped<LogTracker::shutdown(dispatch::group_session)::$_0>(LogTracker::shutdown(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<LogTracker::shutdown(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<LogTracker::shutdown(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void LogTracker::dumpLogInternal_sync(uint64_t a1, xpc_object_t *a2, const void **a3)
{
  BOOL v50 = 0;
  uint64_t v6 = (const void *)*MEMORY[0x1E4F4C2D8];
  size_t v7 = strlen((const char *)*MEMORY[0x1E4F4C2D8]);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    uint8_t v9 = (void **)operator new(v10 + 1);
    __dst[1] = v8;
    unint64_t v49 = v11 | 0x8000000000000000;
    __dst[0] = v9;
    goto LABEL_8;
  }
  HIBYTE(v49) = v7;
  uint8_t v9 = __dst;
  if (v7) {
LABEL_8:
  }
    memmove(v9, v6, (size_t)v8);
  *((unsigned char *)v8 + (void)v9) = 0;
  memset(&v51, 0, sizeof(v51));
  if (prop::tailspin::get((char *)__dst, (uint64_t)&v51)) {
    util::convert<BOOL>(&v51, &v50, 0);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v51.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v49) & 0x80000000) == 0)
    {
LABEL_13:
      long long v12 = &loc_1C5BC2000;
      if (v50) {
        goto LABEL_14;
      }
LABEL_23:
      BOOL v50 = 0;
      goto LABEL_30;
    }
  }
  else if ((SHIBYTE(v49) & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(__dst[0]);
  long long v12 = (void *)&loc_1C5BC2000;
  if (!v50) {
    goto LABEL_23;
  }
LABEL_14:
  int IsInternalBuild = TelephonyUtilIsInternalBuild();
  BOOL v50 = IsInternalBuild;
  if (IsInternalBuild)
  {
    long long v14 = *(NSObject **)(a1 + 208);
    if (v14)
    {
      dispatch_retain(*(dispatch_object_t *)(a1 + 208));
      dispatch_group_enter(v14);
    }
    global_queue = dispatch_get_global_queue(21, 0);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = v12[304];
    block[2] = ___ZN10LogTracker20dumpLogInternal_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke;
    block[3] = &__block_descriptor_57_e8_40c30_ZTSN8dispatch13group_sessionE48c15_ZTSN3xpc4dictE_e5_v8__0l;
    block[4] = a1;
    dispatch_group_t group = v14;
    if (v14)
    {
      dispatch_retain(v14);
      dispatch_group_enter(group);
    }
    xpc_object_t v16 = *a2;
    xpc_object_t object = v16;
    if (v16) {
      xpc_retain(v16);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    BOOL v47 = v50;
    dispatch_async(global_queue, block);
    xpc_release(object);
    xpc_object_t object = 0;
    if (group)
    {
      dispatch_group_leave(group);
      if (group) {
        dispatch_release(group);
      }
    }
    if (v14)
    {
      dispatch_group_leave(v14);
      dispatch_release(v14);
    }
  }
LABEL_30:
  size_t v17 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v17 || (uint64_t v18 = *(void *)(a1 + 120), (v19 = std::__shared_weak_count::lock(v17)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v20 = v19;
  p_shared_weak_owners = &v19->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v20);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = v12[304];
  aBlock[2] = ___ZN10LogTracker20dumpLogInternal_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke_6;
  aBlock[3] = &__block_descriptor_72_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c15_ZTSN3xpc4dictE_e28_v20__0i8_dict__object__v__12l;
  aBlock[4] = a1;
  void aBlock[5] = v18;
  unint64_t v41 = v20;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  if (*a3)
  {
    char v22 = _Block_copy(*a3);
    xpc_object_t v23 = *a2;
    long long v42 = v22;
    xpc_object_t v43 = v23;
    if (v23)
    {
LABEL_36:
      xpc_retain(v23);
      goto LABEL_39;
    }
  }
  else
  {
    xpc_object_t v23 = *a2;
    long long v42 = 0;
    xpc_object_t v43 = v23;
    if (v23) {
      goto LABEL_36;
    }
  }
  xpc_object_t v43 = xpc_null_create();
LABEL_39:
  uint64_t v24 = _Block_copy(aBlock);
  CFDictionaryRef v25 = (const void *)*MEMORY[0x1E4F4CF48];
  size_t v26 = strlen((const char *)*MEMORY[0x1E4F4CF48]);
  if (v26 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v27 = v26;
  if (v26 >= 0x17)
  {
    uint64_t v31 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17) {
      uint64_t v31 = v26 | 7;
    }
    uint64_t v32 = v31 + 1;
    uint64_t v28 = (std::string *)operator new(v31 + 1);
    v51.__r_.__value_.__l.__size_ = v27;
    v51.__r_.__value_.__r.__words[2] = v32 | 0x8000000000000000;
    v51.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
  }
  else
  {
    *((unsigned char *)&v51.__r_.__value_.__s + 23) = v26;
    uint64_t v28 = &v51;
    if (!v26)
    {
      v51.__r_.__value_.__s.__data_[0] = 0;
      xpc_object_t v29 = *a2;
      xpc_object_t v39 = v29;
      if (v29) {
        goto LABEL_43;
      }
LABEL_49:
      xpc_object_t v29 = xpc_null_create();
      xpc_object_t v39 = v29;
      if (v24) {
        goto LABEL_44;
      }
      goto LABEL_50;
    }
  }
  memmove(v28, v25, v27);
  v28->__r_.__value_.__s.__data_[v27] = 0;
  xpc_object_t v29 = *a2;
  xpc_object_t v39 = v29;
  if (!v29) {
    goto LABEL_49;
  }
LABEL_43:
  xpc_retain(v29);
  if (v24)
  {
LABEL_44:
    unint64_t v30 = _Block_copy(v24);
    goto LABEL_51;
  }
LABEL_50:
  unint64_t v30 = 0;
LABEL_51:
  long long v38 = v30;
  Service::runCommand(a1, (uint64_t)&v51, &v39, &v38);
  if (v30) {
    _Block_release(v30);
  }
  xpc_release(v29);
  xpc_object_t v39 = 0;
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4CA98]);
  v51.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
  if (value) {
    xpc_retain(value);
  }
  else {
    v51.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  size_t v35 = xpc::dyn_cast_or_default((uint64_t *)__p, (xpc *)&v51, (const object *)"", v34);
  LogTracker::sendUserNotificationForDump((uint64_t)v35, (const void **)__p);
  if (v37 < 0) {
    operator delete(__p[0]);
  }
  xpc_release(v51.__r_.__value_.__l.__data_);
  if (v24) {
    _Block_release(v24);
  }
  xpc_release(v43);
  xpc_object_t v43 = 0;
  if (v42) {
    _Block_release(v42);
  }
  if (v41) {
    std::__shared_weak_count::__release_weak(v41);
  }
  std::__shared_weak_count::__release_weak(v20);
}

void sub_1C5B610E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,void *aBlock,xpc_object_t object)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  xpc_release(*(xpc_object_t *)(v28 - 104));
  if (v27) {
    _Block_release(v27);
  }
  xpc_release(object);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a24) {
    std::__shared_weak_count::__release_weak(a24);
  }
  std::__shared_weak_count::__release_weak(v26);
  _Unwind_Resume(a1);
}

void sub_1C5B611B4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 81) < 0) {
    operator delete(*(void **)(v1 - 104));
  }
  if (*(char *)(v1 - 113) < 0) {
    operator delete(*(void **)(v1 - 136));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN10LogTracker20dumpLogInternal_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 208);
  uint64_t v6 = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(v3);
  }
  xpc_object_t v4 = *(xpc_object_t *)(a1 + 48);
  xpc_object_t v5 = v4;
  if (v4)
  {
    xpc_retain(v4);
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v5 = v4;
  }
  LogTracker::diagnosticToolsLog_sync(v2, &v6, &v5, *(unsigned __int8 *)(a1 + 56));
  xpc_release(v4);
  if (v3)
  {
    dispatch_group_leave(v3);
    dispatch_release(v3);
  }
}

void sub_1C5B612A8(_Unwind_Exception *a1)
{
  xpc_release(v2);
  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(a1);
}

void LogTracker::diagnosticToolsLog_sync(uint64_t a1, NSObject **a2, xpc_object_t *a3, int a4)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  memset(v88, 170, sizeof(v88));
  xpc_object_t value = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4C4C8]);
  *(void *)&long long object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    *(void *)&long long object = xpc_null_create();
  }
  Timestamp::Timestamp((Timestamp *)buf);
  Timestamp::asString(v9, 0, 9, v87);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v87[2]) < 0) {
    operator delete((void *)v87[0]);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)buf, *(void **)&buf[8]);
  xpc_release((xpc_object_t)object);
  memset(v87, 170, sizeof(v87));
  xpc_object_t v10 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4C7F8]);
  *(void *)std::string buf = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    *(void *)std::string buf = xpc_null_create();
  }
  xpc::dyn_cast_or_default(v87, (xpc *)buf, (const object *)*MEMORY[0x1E4F4F928], v11);
  xpc_release(*(xpc_object_t *)buf);
  long long v12 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = "NO";
    if (a4) {
      uint64_t v13 = "YES";
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v13;
    _os_log_impl(&dword_1C59C6000, v12, OS_LOG_TYPE_DEFAULT, "#I Tailspin: %s", buf, 0xCu);
    long long v12 = *(NSObject **)(a1 + 88);
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    long long v14 = v87;
    if (v87[2] < 0) {
      long long v14 = (uint64_t *)v87[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v14;
    _os_log_impl(&dword_1C59C6000, v12, OS_LOG_TYPE_DEFAULT, "#I DumpPath: %s", buf, 0xCu);
  }
  unint64_t v85 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v86 = 0xAAAAAAAAAAAAAAAALL;
  GetABMLogServer(&v83);
  abm::HelperClient::create();
  CFTypeRef v15 = v84;
  if (v84 && !atomic_fetch_add(&v84->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (v85) {
      goto LABEL_20;
    }
  }
  else if (v85)
  {
LABEL_20:
    xpc_object_t v16 = *(std::__shared_weak_count **)(a1 + 128);
    if (!v16 || (v17 = *(void *)(a1 + 120), (uint64_t v18 = std::__shared_weak_count::lock(v16)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v19 = v18;
    p_shared_weak_owners = &v18->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v19);
    }
    uint64_t v81 = (const void *)0xAAAAAAAAAAAAAAAALL;
    dispatch_object_t v82 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3321888768;
    aBlock[2] = ___ZN10LogTracker23diagnosticToolsLog_syncEN8dispatch13group_sessionEN3xpc4dictEb_block_invoke;
    aBlock[3] = &__block_descriptor_64_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
    aBlock[4] = a1;
    void aBlock[5] = v17;
    size_t v79 = v19;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    uint64_t v21 = *a2;
    dispatch_group_t group = v21;
    if (v21)
    {
      dispatch_retain(v21);
      dispatch_group_enter(group);
    }
    char v22 = _Block_copy(aBlock);
    xpc_object_t v23 = *(NSObject **)(a1 + 136);
    if (v23) {
      dispatch_retain(*(dispatch_object_t *)(a1 + 136));
    }
    uint64_t v81 = v22;
    dispatch_object_t v82 = v23;
    if (!a4) {
      goto LABEL_117;
    }
    xpc_object_t v24 = xpc_dictionary_create(0, 0, 0);
    uint64_t v25 = MEMORY[0x1E4F14590];
    if (v24 || (xpc_object_t v24 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C8795EB0](v24) == v25)
      {
        xpc_retain(v24);
        xpc_object_t v26 = v24;
      }
      else
      {
        xpc_object_t v26 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v26 = xpc_null_create();
      xpc_object_t v24 = 0;
    }
    xpc_release(v24);
    if (MEMORY[0x1C8795EB0](v26) != v25)
    {
      uint64_t v28 = *(NSObject **)(a1 + 88);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_error_impl(&dword_1C59C6000, v28, OS_LOG_TYPE_ERROR, "Failed to create an input dictionary", buf, 2u);
      }
LABEL_116:
      xpc_release(v26);
      xpc_object_t v23 = v82;
LABEL_117:
      if (v23) {
        dispatch_release(v23);
      }
      if (v81) {
        _Block_release(v81);
      }
      if (group)
      {
        dispatch_group_leave(group);
        if (group) {
          dispatch_release(group);
        }
      }
      if (v79) {
        std::__shared_weak_count::__release_weak(v79);
      }
      std::__shared_weak_count::__release_weak(v19);
      goto LABEL_127;
    }
    xpc_object_t v29 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4CBA0]);
    *(void *)std::string buf = v29;
    if (v29) {
      xpc_retain(v29);
    }
    else {
      *(void *)std::string buf = xpc_null_create();
    }
    int v30 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    xpc_release(*(xpc_object_t *)buf);
    memset(buf, 170, sizeof(buf));
    xpc_object_t v31 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4CA98]);
    *(void *)&long long object = v31;
    if (v31) {
      xpc_retain(v31);
    }
    else {
      *(void *)&long long object = xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)buf, (xpc *)&object, (const object *)"", v32);
    xpc_release((xpc_object_t)object);
    if ((buf[23] & 0x80u) == 0) {
      unint64_t v33 = buf;
    }
    else {
      unint64_t v33 = *(uint8_t **)buf;
    }
    xpc_object_t v34 = xpc_string_create((const char *)v33);
    if (!v34) {
      xpc_object_t v34 = xpc_null_create();
    }
    xpc_dictionary_set_value(v26, (const char *)*MEMORY[0x1E4F47160], v34);
    xpc_object_t v35 = xpc_null_create();
    xpc_release(v34);
    xpc_release(v35);
    xpc_object_t v36 = xpc_int64_create(v30);
    if (!v36) {
      xpc_object_t v36 = xpc_null_create();
    }
    xpc_dictionary_set_value(v26, (const char *)*MEMORY[0x1E4F470A8], v36);
    xpc_object_t v37 = xpc_null_create();
    xpc_release(v36);
    xpc_release(v37);
    long long v38 = (const void *)*MEMORY[0x1E4F4F918];
    size_t v39 = strlen((const char *)*MEMORY[0x1E4F4F918]);
    if (v39 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v40 = v39;
    if (v39 >= 0x17)
    {
      uint64_t v42 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v39 | 7) != 0x17) {
        uint64_t v42 = v39 | 7;
      }
      uint64_t v43 = v42 + 1;
      p_dst = (std::string *)operator new(v42 + 1);
      __dst.__r_.__value_.__l.__size_ = v40;
      __dst.__r_.__value_.__r.__words[2] = v43 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v39;
      p_dst = &__dst;
      if (!v39)
      {
LABEL_62:
        p_dst->__r_.__value_.__s.__data_[v40] = 0;
        if (v87[2] >= 0) {
          size_t v44 = (const std::string::value_type *)v87;
        }
        else {
          size_t v44 = (const std::string::value_type *)v87[0];
        }
        if (v87[2] >= 0) {
          std::string::size_type v45 = HIBYTE(v87[2]);
        }
        else {
          std::string::size_type v45 = v87[1];
        }
        uint64_t v46 = std::string::insert(&__dst, 0, v44, v45);
        long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
        v74.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v47;
        v46->__r_.__value_.__l.__size_ = 0;
        v46->__r_.__value_.__r.__words[2] = 0;
        v46->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v88[2]) >= 0) {
          unint64_t v48 = (const std::string::value_type *)v88;
        }
        else {
          unint64_t v48 = (const std::string::value_type *)v88[0];
        }
        if (SHIBYTE(v88[2]) >= 0) {
          std::string::size_type v49 = HIBYTE(v88[2]);
        }
        else {
          std::string::size_type v49 = (std::string::size_type)v88[1];
        }
        BOOL v50 = std::string::append(&v74, v48, v49);
        long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        v75.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        xpc_object_t v52 = (const void *)*MEMORY[0x1E4F4F908];
        size_t v53 = strlen((const char *)*MEMORY[0x1E4F4F908]);
        if (v53 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v54 = v53;
        if (v53 >= 0x17)
        {
          uint64_t v56 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v53 | 7) != 0x17) {
            uint64_t v56 = v53 | 7;
          }
          uint64_t v57 = v56 + 1;
          p_p = operator new(v56 + 1);
          size_t v71 = v54;
          int64_t v72 = v57 | 0x8000000000000000;
          std::string __p = p_p;
        }
        else
        {
          HIBYTE(v72) = v53;
          p_p = &__p;
          if (!v53)
          {
LABEL_82:
            *((unsigned char *)p_p + v54) = 0;
            if (v72 >= 0) {
              size_t v58 = (const std::string::value_type *)&__p;
            }
            else {
              size_t v58 = (const std::string::value_type *)__p;
            }
            if (v72 >= 0) {
              std::string::size_type v59 = HIBYTE(v72);
            }
            else {
              std::string::size_type v59 = v71;
            }
            uint64_t v60 = std::string::append(&v75, v58, v59);
            long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
            int64_t v77 = v60->__r_.__value_.__r.__words[2];
            long long object = v61;
            v60->__r_.__value_.__l.__size_ = 0;
            v60->__r_.__value_.__r.__words[2] = 0;
            v60->__r_.__value_.__r.__words[0] = 0;
            if (v77 >= 0) {
              p_long long object = (const char *)&object;
            }
            else {
              p_long long object = (const char *)object;
            }
            xpc_object_t v63 = xpc_string_create(p_object);
            if (!v63) {
              xpc_object_t v63 = xpc_null_create();
            }
            xpc_dictionary_set_value(v26, (const char *)*MEMORY[0x1E4F47098], v63);
            xpc_object_t v64 = xpc_null_create();
            xpc_release(v63);
            xpc_release(v64);
            if (SHIBYTE(v77) < 0)
            {
              operator delete((void *)object);
              if ((SHIBYTE(v72) & 0x80000000) == 0)
              {
LABEL_95:
                if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_96;
                }
                goto LABEL_103;
              }
            }
            else if ((SHIBYTE(v72) & 0x80000000) == 0)
            {
              goto LABEL_95;
            }
            operator delete(__p);
            if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_96:
              if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_97;
              }
              goto LABEL_104;
            }
LABEL_103:
            operator delete(v75.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_97:
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_98;
              }
              goto LABEL_105;
            }
LABEL_104:
            operator delete(v74.__r_.__value_.__l.__data_);
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_98:
              xpc_object_t v69 = v26;
              if (v26) {
                goto LABEL_99;
              }
              goto LABEL_106;
            }
LABEL_105:
            operator delete(__dst.__r_.__value_.__l.__data_);
            xpc_object_t v69 = v26;
            if (v26)
            {
LABEL_99:
              xpc_retain(v26);
              size_t v65 = (void *)v81;
              if (!v81) {
                goto LABEL_108;
              }
              goto LABEL_107;
            }
LABEL_106:
            xpc_object_t v69 = xpc_null_create();
            size_t v65 = (void *)v81;
            if (!v81)
            {
LABEL_108:
              uint64_t v67 = v65;
              uint64_t v68 = v82;
              if (v82) {
                dispatch_retain(v82);
              }
              abm::HelperClient::perform();
              if (v68) {
                dispatch_release(v68);
              }
              if (v67) {
                _Block_release(v67);
              }
              xpc_release(v69);
              if ((char)buf[23] < 0) {
                operator delete(*(void **)buf);
              }
              goto LABEL_116;
            }
LABEL_107:
            size_t v65 = _Block_copy(v65);
            goto LABEL_108;
          }
        }
        memmove(p_p, v52, v54);
        goto LABEL_82;
      }
    }
    memmove(p_dst, v38, v40);
    goto LABEL_62;
  }
  std::string::size_type v27 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl(&dword_1C59C6000, v27, OS_LOG_TYPE_ERROR, "Failed to create helper client object", buf, 2u);
  }
LABEL_127:
  uint64_t v66 = (std::__shared_weak_count *)v86;
  if (v86 && !atomic_fetch_add((atomic_ullong *volatile)(v86 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
    std::__shared_weak_count::__release_weak(v66);
    if ((SHIBYTE(v87[2]) & 0x80000000) == 0)
    {
LABEL_130:
      if ((SHIBYTE(v88[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_134:
      operator delete(v88[0]);
      return;
    }
  }
  else if ((SHIBYTE(v87[2]) & 0x80000000) == 0)
  {
    goto LABEL_130;
  }
  operator delete((void *)v87[0]);
  if (SHIBYTE(v88[2]) < 0) {
    goto LABEL_134;
  }
}

void sub_1C5B61CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,xpc_object_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,std::__shared_weak_count *a49,dispatch_group_t group)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

xpc_object_t __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  xpc_object_t v4 = *(NSObject **)(a2 + 40);
  *(void *)(a1 + 40) = v4;
  if (v4)
  {
    dispatch_retain(v4);
    xpc_object_t v5 = *(NSObject **)(a1 + 40);
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  uint64_t v6 = *(void **)(a2 + 48);
  *(void *)(a1 + 48) = v6;
  if (v6) {
    return xpc_retain(v6);
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 48) = result;
  return result;
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(void *)(a1 + 48) = 0;
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 40);
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

void ___ZN10LogTracker20dumpLogInternal_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke_6(void *a1, int a2, xpc_object_t *a3)
{
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  size_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  uint64_t v10 = a1[5];
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v10) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10) {
      return;
    }
  }
  xpc_object_t v11 = *a3;
  if (*a3)
  {
    xpc_retain(*a3);
    long long v12 = (const void *)a1[7];
    if (v12) {
      goto LABEL_9;
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    long long v12 = (const void *)a1[7];
    if (v12)
    {
LABEL_9:
      uint64_t v13 = _Block_copy(v12);
      xpc_object_t v14 = (xpc_object_t)a1[8];
      if (v14) {
        goto LABEL_10;
      }
LABEL_14:
      xpc_object_t v14 = xpc_null_create();
      CFTypeRef v15 = (std::__shared_weak_count *)v7[16];
      if (!v15) {
        goto LABEL_27;
      }
      goto LABEL_15;
    }
  }
  uint64_t v13 = 0;
  xpc_object_t v14 = (xpc_object_t)a1[8];
  if (!v14) {
    goto LABEL_14;
  }
LABEL_10:
  xpc_retain(v14);
  CFTypeRef v15 = (std::__shared_weak_count *)v7[16];
  if (!v15) {
LABEL_27:
  }
    std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_15:
  uint64_t v16 = v7[15];
  uint64_t v17 = std::__shared_weak_count::lock(v15);
  if (!v17) {
    goto LABEL_27;
  }
  uint64_t v18 = v17;
  uint64_t v19 = operator new(0x28uLL);
  *(void *)uint64_t v19 = v7;
  void v19[2] = a2;
  *((void *)v19 + 2) = v11;
  xpc_object_t v20 = xpc_null_create();
  if (!v13)
  {
    *((void *)v19 + 3) = 0;
    *((void *)v19 + 4) = v14;
    if (v14) {
      goto LABEL_18;
    }
LABEL_20:
    *((void *)v19 + 4) = xpc_null_create();
    goto LABEL_21;
  }
  *((void *)v19 + 3) = _Block_copy(v13);
  *((void *)v19 + 4) = v14;
  if (!v14) {
    goto LABEL_20;
  }
LABEL_18:
  xpc_retain(v14);
LABEL_21:
  uint64_t v21 = v7[17];
  atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  char v22 = operator new(0x18uLL);
  void *v22 = v19;
  v22[1] = v16;
  uint64_t v22[2] = v18;
  dispatch_async_f(v21, v22, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZNS3_20dumpLogInternal_syncEN3xpc4dictENS_5blockIU13block_pointerFviS7_EEEEUb_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSI_14default_deleteISD_EEEEENUlPvE_8__invokeESN_);
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  xpc_release(v14);
  if (v13) {
    _Block_release(v13);
  }
  xpc_release(v20);
}

xpc_object_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c15_ZTSN3xpc4dictE(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v5 = (const void *)a2[7];
  if (v5)
  {
    uint64_t v6 = _Block_copy(v5);
    size_t v7 = (void *)a2[8];
    a1[7] = v6;
    a1[8] = v7;
    if (v7) {
      return xpc_retain(v7);
    }
  }
  else
  {
    size_t v7 = (void *)a2[8];
    a1[7] = 0;
    a1[8] = v7;
    if (v7) {
      return xpc_retain(v7);
    }
  }
  xpc_object_t result = xpc_null_create();
  a1[8] = result;
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 64));
  *(void *)(a1 + 64) = 0;
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void LogTracker::sendUserNotificationForDump(uint64_t a1, const void **a2)
{
  uint64_t v3 = (const void *)*MEMORY[0x1E4F4C198];
  size_t v4 = strlen((const char *)*MEMORY[0x1E4F4C198]);
  if (v4 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    p_dst = (void **)operator new(v7 + 1);
    unint64_t v31 = v5;
    unint64_t v32 = v8 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v32) = v4;
  p_dst = (void **)&__dst;
  if (v4) {
LABEL_8:
  }
    memmove(p_dst, v3, v5);
  *((unsigned char *)p_dst + v5) = 0;
  memset(&__p, 0, sizeof(__p));
  int v9 = -1431655766;
  if (prop::ttr::get((char *)&__dst, (uint64_t)&__p))
  {
    *(_DWORD *)std::string::size_type v27 = -1431655766;
    if (util::convert<int>(&__p, v27, 0)) {
      int v9 = *(_DWORD *)v27;
    }
    else {
      int v9 = -1431655766;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v32) & 0x80000000) == 0) {
      goto LABEL_15;
    }
  }
  else if ((SHIBYTE(v32) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(__dst);
LABEL_15:
  unint64_t v31 = 0xAAAAAAAAAA005D73;
  unint64_t v32 = 0xAAAAAAAAAAAAAAALL;
  std::string __dst = *(void ***)"[Settings]";
  if (TelephonyUtilIsInternalBuild()) {
    int IsCarrierBuild = 1;
  }
  else {
    int IsCarrierBuild = TelephonyUtilIsCarrierBuild();
  }
  if (IsCarrierBuild && v9)
  {
    size_t v11 = *((unsigned __int8 *)a2 + 23);
    if ((*((char *)a2 + 23) & 0x80000000) == 0)
    {
      if (v11 >= 0xA) {
        size_t v12 = 10;
      }
      else {
        size_t v12 = *((unsigned __int8 *)a2 + 23);
      }
      int v13 = memcmp(a2, &__dst, v12);
      if (v12 != 10) {
        return;
      }
LABEL_32:
      if (v13) {
        return;
      }
      memset(&v29[16], 0, 32);
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0u;
      v29[23] = 22;
      qmemcpy(v29, "Telephony_Dump_Started", 22);
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&__p, "LogDump");
      if ((v11 & 0x80) != 0)
      {
        if (a2[1])
        {
LABEL_35:
          if ((v11 & 0x80u) == 0) {
            size_t v15 = v11;
          }
          else {
            size_t v15 = (size_t)a2[1];
          }
          unint64_t v16 = v15 + 8;
          memset(v27, 170, sizeof(v27));
          if (v15 + 8 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          if (v16 >= 0x17)
          {
            uint64_t v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v16 | 7) != 0x17) {
              uint64_t v18 = v16 | 7;
            }
            uint64_t v19 = v18 + 1;
            xpc_object_t v20 = operator new(v18 + 1);
            *(void *)&v27[8] = v15 + 8;
            *(void *)&v27[16] = v19 | 0x8000000000000000;
            *(void *)std::string::size_type v27 = v20;
            *xpc_object_t v20 = 0x203A6E6F73616552;
            uint64_t v17 = v20 + 1;
          }
          else
          {
            uint64_t v17 = &v27[8];
            *(void *)&v27[16] = 0;
            v27[23] = v15 + 8;
            *(_OWORD *)std::string::size_type v27 = 0x203A6E6F73616552uLL;
            if (!v15) {
              goto LABEL_51;
            }
          }
          if ((v11 & 0x80u) == 0) {
            uint64_t v21 = a2;
          }
          else {
            uint64_t v21 = *a2;
          }
          memmove(v17, v21, v15);
LABEL_51:
          v17[v15] = 0;
          *(void *)&v29[40] = *(void *)&v27[16];
          *(_OWORD *)&v29[24] = *(_OWORD *)v27;
          std::string v23 = __p;
          *(_OWORD *)xpc_object_t v24 = *(_OWORD *)v29;
          uint64_t v25 = *(void *)&v29[16];
          if ((v27[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)&v29[24], *(std::string::size_type *)&v29[32]);
            int v22 = 1;
LABEL_54:
            support::ui::showNotification(0, (uint64_t)&v23, 0);
            if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v26.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v25) & 0x80000000) == 0)
              {
LABEL_56:
                if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_57;
                }
                goto LABEL_62;
              }
            }
            else if ((SHIBYTE(v25) & 0x80000000) == 0)
            {
              goto LABEL_56;
            }
            operator delete(v24[0]);
            if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_57:
              if (!v22) {
                return;
              }
              goto LABEL_58;
            }
LABEL_62:
            operator delete(v23.__r_.__value_.__l.__data_);
            if (!v22) {
              return;
            }
LABEL_58:
            operator delete(*(void **)&v29[24]);
            return;
          }
LABEL_52:
          int v22 = 0;
          std::string v26 = *(std::string *)&v29[24];
          goto LABEL_54;
        }
      }
      else if (v11)
      {
        goto LABEL_35;
      }
      std::string v23 = __p;
      *(_OWORD *)xpc_object_t v24 = *(_OWORD *)v29;
      uint64_t v25 = *(void *)&v29[16];
      goto LABEL_52;
    }
    if ((unint64_t)a2[1] >= 0xA) {
      size_t v14 = 10;
    }
    else {
      size_t v14 = (size_t)a2[1];
    }
    int v13 = memcmp(*a2, &__dst, v14);
    if (v14 == 10) {
      goto LABEL_32;
    }
  }
}

void sub_1C5B6278C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
LABEL_3:
    support::ui::NotificationInfo::~NotificationInfo(&a27);
    _Unwind_Resume(a1);
  }
  operator delete(a9);
  support::ui::NotificationInfo::~NotificationInfo(&a27);
  _Unwind_Resume(a1);
}

void sub_1C5B627D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  support::ui::NotificationInfo::~NotificationInfo((void **)va);
  _Unwind_Resume(a1);
}

void sub_1C5B627EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
}

void sub_1C5B6280C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v26 - 81) < 0) {
    operator delete(*(void **)(v26 - 104));
  }
  _Unwind_Resume(exception_object);
}

void LogTracker::moveBasebandServicesLog_sync(void *a1, NSObject **a2, xpc_object_t *a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6 || (xpc_object_t v6 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v6) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v6);
      xpc_object_t v7 = v6;
    }
    else
    {
      xpc_object_t v7 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v7 = xpc_null_create();
    xpc_object_t v6 = 0;
  }
  xpc_release(v6);
  xpc_object_t v8 = xpc_array_create(0, 0);
  if (v8 || (xpc_object_t v8 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v8) == MEMORY[0x1E4F14568])
    {
      xpc_retain(v8);
      xpc_object_t v9 = v8;
    }
    else
    {
      xpc_object_t v9 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v9 = xpc_null_create();
    xpc_object_t v8 = 0;
  }
  xpc_release(v8);
  xpc_object_t v10 = xpc_int64_create(7);
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x1E4F471E8], v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  xpc_object_t value = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4C7F8]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  size_t v44 = 0;
  dispatch_object_t v45 = 0;
  uint64_t v46 = 0;
  xpc::dyn_cast_or_default();
  if (v43 >= 0) {
    p_p = (const char *)&__p;
  }
  else {
    p_p = (const char *)__p;
  }
  xpc_object_t v14 = xpc_string_create(p_p);
  if (!v14) {
    xpc_object_t v14 = xpc_null_create();
  }
  xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x1E4F470F8], v14);
  xpc_object_t v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  if (v43 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  xpc_object_t v16 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4C4C8]);
  xpc_object_t object = v16;
  if (v16) {
    xpc_retain(v16);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  size_t v44 = 0;
  dispatch_object_t v45 = 0;
  uint64_t v46 = 0;
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v46) < 0) {
    operator delete(v44);
  }
  if (v43 >= 0) {
    uint64_t v17 = (const char *)&__p;
  }
  else {
    uint64_t v17 = (const char *)__p;
  }
  xpc_object_t v18 = xpc_string_create(v17);
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_array_append_value(v9, v18);
  xpc_release(v18);
  if (v43 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  if (v9)
  {
    xpc_retain(v9);
    xpc_object_t v19 = v9;
  }
  else
  {
    xpc_object_t v19 = xpc_null_create();
  }
  xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x1E4F47168], v19);
  xpc_object_t v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  uint64_t v21 = (std::__shared_weak_count *)a1[16];
  if (!v21 || (v22 = a1[15], (std::string v23 = std::__shared_weak_count::lock(v21)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v24 = v23;
  p_shared_weak_owners = &v23->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v24);
  }
  size_t v44 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v45 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10LogTracker28moveBasebandServicesLog_syncEN8dispatch13group_sessionEN3xpc4dictE_block_invoke;
  aBlock[3] = &__block_descriptor_56_e8_32c35_ZTSNSt3__18weak_ptrI10LogTrackerEE48c31_ZTSKN8dispatch13group_sessionE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  aBlock[4] = v22;
  long long v38 = v24;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v26 = *a2;
  dispatch_group_t group = v26;
  if (v26)
  {
    dispatch_retain(v26);
    dispatch_group_enter(group);
  }
  std::string::size_type v27 = _Block_copy(aBlock);
  uint64_t v28 = a1[17];
  if (v28) {
    dispatch_retain(v28);
  }
  size_t v44 = v27;
  dispatch_object_t v45 = v28;
  std::string __p = (void *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
  GetABMLogServer(&v35);
  abm::HelperClient::create();
  xpc_object_t v29 = v36;
  if (!v36 || atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    xpc_object_t v34 = v7;
    if (v7) {
      goto LABEL_51;
    }
LABEL_54:
    xpc_object_t v34 = xpc_null_create();
    int v30 = v44;
    if (!v44) {
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
  std::__shared_weak_count::__release_weak(v29);
  xpc_object_t v34 = v7;
  if (!v7) {
    goto LABEL_54;
  }
LABEL_51:
  xpc_retain(v7);
  int v30 = v44;
  if (v44) {
LABEL_55:
  }
    int v30 = _Block_copy(v30);
LABEL_56:
  unint64_t v32 = v30;
  unint64_t v33 = v45;
  if (v45) {
    dispatch_retain(v45);
  }
  abm::HelperClient::perform();
  if (v33) {
    dispatch_release(v33);
  }
  if (v32) {
    _Block_release(v32);
  }
  xpc_release(v34);
  unint64_t v31 = (std::__shared_weak_count *)v42;
  if (v42 && !atomic_fetch_add((atomic_ullong *volatile)(v42 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  if (v45) {
    dispatch_release(v45);
  }
  if (v44) {
    _Block_release(v44);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if (v38) {
    std::__shared_weak_count::__release_weak(v38);
  }
  std::__shared_weak_count::__release_weak(v24);
  xpc_release(v9);
  xpc_release(v7);
}

void sub_1C5B62E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,dispatch_group_t group,xpc_object_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a10);
  xpc_release(object);
  xpc_object_t object = 0;
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback(v31 - 88);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if (a20) {
    std::__shared_weak_count::__release_weak(a20);
  }
  std::__shared_weak_count::__release_weak(v30);
  xpc_release(v29);
  xpc_release(v28);
  _Unwind_Resume(a1);
}

void ___ZN10LogTracker28moveBasebandServicesLog_syncEN8dispatch13group_sessionEN3xpc4dictE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    uint64_t v2 = std::__shared_weak_count::lock(v1);
    if (v2)
    {
      uint64_t v3 = v2;
      if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

void __copy_helper_block_e8_32c35_ZTSNSt3__18weak_ptrI10LogTrackerEE48c31_ZTSKN8dispatch13group_sessionE(void *a1, void *a2)
{
  uint64_t v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  size_t v4 = a2[6];
  a1[6] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    size_t v5 = a1[6];
    if (v5)
    {
      dispatch_group_enter(v5);
    }
  }
}

void __destroy_helper_block_e8_32c35_ZTSNSt3__18weak_ptrI10LogTrackerEE48c31_ZTSKN8dispatch13group_sessionE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 48);
    if (v3) {
      dispatch_release(v3);
    }
  }
  size_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void LogTracker::getConfiguration(LogTracker *this@<X0>, xpc_object_t *a2@<X8>)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  uint64_t v5 = MEMORY[0x1E4F14590];
  if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v4) == v5)
    {
      xpc_retain(v4);
      xpc_object_t v6 = v4;
    }
    else
    {
      xpc_object_t v6 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v4 = 0;
  }
  xpc_release(v4);
  if (MEMORY[0x1C8795EB0](v6) != v5)
  {
    xpc_object_t v7 = *((void *)this + 11);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_ERROR, "Failed to create config dictionary", (uint8_t *)&__p, 2u);
    }
    *a2 = xpc_null_create();
    goto LABEL_239;
  }
  unint64_t v111 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v112 = 0xAAAAAAAAAAAAAALL;
  *(void *)&value[1] = 0xAAAAAAAAAAAAAA00;
  value[0] = 0;
  BOOL v113 = 0;
  xpc_object_t v8 = (const void *)*MEMORY[0x1E4F4C2D8];
  size_t v9 = strlen((const char *)*MEMORY[0x1E4F4C2D8]);
  if (v9 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v12 = v9 | 7;
    }
    uint64_t v13 = v12 + 1;
    xpc_object_t v11 = operator new(v12 + 1);
    size_t v108 = v10;
    unint64_t v109 = v13 | 0x8000000000000000;
    xpc_object_t v107 = v11;
    goto LABEL_18;
  }
  HIBYTE(v109) = v9;
  xpc_object_t v11 = &v107;
  if (v9) {
LABEL_18:
  }
    memmove(v11, v8, v10);
  *((unsigned char *)v11 + v10) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::coredump::get((char *)&v107, (uint64_t)&__p))
  {
    int v14 = util::convert<BOOL>(&__p, &v113, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_24;
    }
  }
  else
  {
    int v14 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_24;
    }
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_24:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v14) {
      goto LABEL_34;
    }
  }
  else if (!v14)
  {
    goto LABEL_34;
  }
  if (v113) {
    xpc_object_t v15 = "enabled";
  }
  else {
    xpc_object_t v15 = "disabled";
  }
  xpc_object_t v16 = xpc_string_create(v15);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4D008], v16);
  xpc_object_t v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
LABEL_34:
  BOOL v113 = 0;
  size_t v18 = strlen((const char *)v8);
  if (v18 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v19 = v18;
  if (v18 >= 0x17)
  {
    uint64_t v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17) {
      uint64_t v21 = v18 | 7;
    }
    uint64_t v22 = v21 + 1;
    xpc_object_t v20 = operator new(v21 + 1);
    size_t v108 = v19;
    unint64_t v109 = v22 | 0x8000000000000000;
    xpc_object_t v107 = v20;
    goto LABEL_41;
  }
  HIBYTE(v109) = v18;
  xpc_object_t v20 = &v107;
  if (v18) {
LABEL_41:
  }
    memmove(v20, v8, v19);
  *((unsigned char *)v20 + v19) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::bbtrace::get((char *)&v107, (uint64_t)&__p))
  {
    int v23 = util::convert<BOOL>(&__p, &v113, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_47;
    }
  }
  else
  {
    int v23 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_47;
    }
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_47:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v23) {
      goto LABEL_57;
    }
  }
  else if (!v23)
  {
    goto LABEL_57;
  }
  if (v113) {
    xpc_object_t v24 = "enabled";
  }
  else {
    xpc_object_t v24 = "disabled";
  }
  xpc_object_t v25 = xpc_string_create(v24);
  if (!v25) {
    xpc_object_t v25 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4D178], v25);
  xpc_object_t v26 = xpc_null_create();
  xpc_release(v25);
  xpc_release(v26);
LABEL_57:
  if (SHIBYTE(v112) < 0)
  {
    unint64_t v111 = 0;
    std::string::size_type v27 = *(unsigned char **)&value[1];
  }
  else
  {
    HIBYTE(v112) = 0;
    std::string::size_type v27 = &value[1];
  }
  unsigned char *v27 = 0;
  uint64_t v28 = (const void *)*MEMORY[0x1E4F4C198];
  size_t v29 = strlen((const char *)*MEMORY[0x1E4F4C198]);
  if (v29 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v30 = v29;
  if (v29 >= 0x17)
  {
    uint64_t v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17) {
      uint64_t v32 = v29 | 7;
    }
    uint64_t v33 = v32 + 1;
    p_p = (std::string *)operator new(v32 + 1);
    __p.__r_.__value_.__l.__size_ = v30;
    __p.__r_.__value_.__r.__words[2] = v33 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    goto LABEL_67;
  }
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = v29;
  p_p = &__p;
  if (v29) {
LABEL_67:
  }
    memmove(p_p, v28, v30);
  p_p->__r_.__value_.__s.__data_[v30] = 0;
  BOOL v34 = prop::bbtrace::get((char *)&__p, (uint64_t)&value[1]);
  BOOL v35 = v34;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v35) {
      goto LABEL_78;
    }
  }
  else if (!v34)
  {
    goto LABEL_78;
  }
  if (v112 >= 0) {
    xpc_object_t v36 = (const char *)&value[1];
  }
  else {
    xpc_object_t v36 = *(const char **)&value[1];
  }
  xpc_object_t v37 = xpc_string_create(v36);
  if (!v37) {
    xpc_object_t v37 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4CFF8], v37);
  xpc_object_t v38 = xpc_null_create();
  xpc_release(v37);
  xpc_release(v38);
LABEL_78:
  BOOL v113 = 0;
  size_t v39 = (const void *)*MEMORY[0x1E4F47280];
  size_t v40 = strlen((const char *)*MEMORY[0x1E4F47280]);
  if (v40 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v41 = v40;
  if (v40 >= 0x17)
  {
    uint64_t v43 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17) {
      uint64_t v43 = v40 | 7;
    }
    uint64_t v44 = v43 + 1;
    unint64_t v42 = operator new(v43 + 1);
    size_t v108 = v41;
    unint64_t v109 = v44 | 0x8000000000000000;
    xpc_object_t v107 = v42;
    goto LABEL_85;
  }
  HIBYTE(v109) = v40;
  unint64_t v42 = &v107;
  if (v40) {
LABEL_85:
  }
    memmove(v42, v39, v41);
  *((unsigned char *)v42 + v41) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::bbtrace::get((char *)&v107, (uint64_t)&__p))
  {
    int v45 = util::convert<BOOL>(&__p, &v113, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_91;
    }
  }
  else
  {
    int v45 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_91;
    }
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_91:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v45) {
      goto LABEL_101;
    }
  }
  else if (!v45)
  {
    goto LABEL_101;
  }
  if (v113) {
    uint64_t v46 = "enabled";
  }
  else {
    uint64_t v46 = "disabled";
  }
  xpc_object_t v47 = xpc_string_create(v46);
  if (!v47) {
    xpc_object_t v47 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4D2B0], v47);
  xpc_object_t v48 = xpc_null_create();
  xpc_release(v47);
  xpc_release(v48);
LABEL_101:
  if (SHIBYTE(v112) < 0)
  {
    unint64_t v111 = 0;
    std::string::size_type v49 = *(unsigned char **)&value[1];
  }
  else
  {
    HIBYTE(v112) = 0;
    std::string::size_type v49 = &value[1];
  }
  *std::string::size_type v49 = 0;
  BOOL v50 = (const void *)*MEMORY[0x1E4F4CCC8];
  size_t v51 = strlen((const char *)*MEMORY[0x1E4F4CCC8]);
  if (v51 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v52 = v51;
  if (v51 >= 0x17)
  {
    uint64_t v54 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v51 | 7) != 0x17) {
      uint64_t v54 = v51 | 7;
    }
    uint64_t v55 = v54 + 1;
    size_t v53 = (std::string *)operator new(v54 + 1);
    __p.__r_.__value_.__l.__size_ = v52;
    __p.__r_.__value_.__r.__words[2] = v55 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
    goto LABEL_111;
  }
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = v51;
  size_t v53 = &__p;
  if (v51) {
LABEL_111:
  }
    memmove(v53, v50, v52);
  v53->__r_.__value_.__s.__data_[v52] = 0;
  BOOL v56 = prop::bbtrace::get((char *)&__p, (uint64_t)&value[1]);
  BOOL v57 = v56;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v57) {
      goto LABEL_122;
    }
  }
  else if (!v56)
  {
    goto LABEL_122;
  }
  if (v112 >= 0) {
    size_t v58 = (const char *)&value[1];
  }
  else {
    size_t v58 = *(const char **)&value[1];
  }
  xpc_object_t v59 = xpc_string_create(v58);
  if (!v59) {
    xpc_object_t v59 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4D1C8], v59);
  xpc_object_t v60 = xpc_null_create();
  xpc_release(v59);
  xpc_release(v60);
LABEL_122:
  BOOL v113 = 0;
  size_t v61 = strlen((const char *)v8);
  if (v61 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v62 = v61;
  if (v61 >= 0x17)
  {
    uint64_t v64 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v61 | 7) != 0x17) {
      uint64_t v64 = v61 | 7;
    }
    uint64_t v65 = v64 + 1;
    xpc_object_t v63 = operator new(v64 + 1);
    size_t v108 = v62;
    unint64_t v109 = v65 | 0x8000000000000000;
    xpc_object_t v107 = v63;
    goto LABEL_129;
  }
  HIBYTE(v109) = v61;
  xpc_object_t v63 = &v107;
  if (v61) {
LABEL_129:
  }
    memmove(v63, v8, v62);
  *((unsigned char *)v63 + v62) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::ipc::get((char *)&v107, (uint64_t)&__p))
  {
    int v66 = util::convert<BOOL>(&__p, &v113, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_135;
    }
  }
  else
  {
    int v66 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_135;
    }
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_135:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v66) {
      goto LABEL_145;
    }
  }
  else if (!v66)
  {
    goto LABEL_145;
  }
  if (v113) {
    uint64_t v67 = "enabled";
  }
  else {
    uint64_t v67 = "disabled";
  }
  xpc_object_t v68 = xpc_string_create(v67);
  if (!v68) {
    xpc_object_t v68 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4CE78], v68);
  xpc_object_t v69 = xpc_null_create();
  xpc_release(v68);
  xpc_release(v69);
LABEL_145:
  BOOL v113 = 0;
  size_t v70 = strlen((const char *)v8);
  if (v70 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v71 = v70;
  if (v70 >= 0x17)
  {
    uint64_t v73 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v70 | 7) != 0x17) {
      uint64_t v73 = v70 | 7;
    }
    uint64_t v74 = v73 + 1;
    int64_t v72 = operator new(v73 + 1);
    size_t v108 = v71;
    unint64_t v109 = v74 | 0x8000000000000000;
    xpc_object_t v107 = v72;
    goto LABEL_152;
  }
  HIBYTE(v109) = v70;
  int64_t v72 = &v107;
  if (v70) {
LABEL_152:
  }
    memmove(v72, v8, v71);
  *((unsigned char *)v72 + v71) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::bbipc::get((char *)&v107, (uint64_t)&__p))
  {
    int v75 = util::convert<BOOL>(&__p, &v113, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_158;
    }
  }
  else
  {
    int v75 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_158;
    }
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_158:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v75) {
      goto LABEL_168;
    }
  }
  else if (!v75)
  {
    goto LABEL_168;
  }
  if (v113) {
    xpc_object_t v76 = "enabled";
  }
  else {
    xpc_object_t v76 = "disabled";
  }
  xpc_object_t v77 = xpc_string_create(v76);
  if (!v77) {
    xpc_object_t v77 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4CE80], v77);
  xpc_object_t v78 = xpc_null_create();
  xpc_release(v77);
  xpc_release(v78);
LABEL_168:
  BOOL v113 = 0;
  size_t v79 = strlen((const char *)v8);
  if (v79 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v80 = v79;
  if (v79 >= 0x17)
  {
    uint64_t v82 = (v79 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v79 | 7) != 0x17) {
      uint64_t v82 = v79 | 7;
    }
    uint64_t v83 = v82 + 1;
    uint64_t v81 = operator new(v82 + 1);
    size_t v108 = v80;
    unint64_t v109 = v83 | 0x8000000000000000;
    xpc_object_t v107 = v81;
    goto LABEL_175;
  }
  HIBYTE(v109) = v79;
  uint64_t v81 = &v107;
  if (v79) {
LABEL_175:
  }
    memmove(v81, v8, v80);
  *((unsigned char *)v81 + v80) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::tailspin::get((char *)&v107, (uint64_t)&__p))
  {
    int v84 = util::convert<BOOL>(&__p, &v113, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_181;
    }
  }
  else
  {
    int v84 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_181;
    }
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_181:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v84) {
      goto LABEL_191;
    }
  }
  else if (!v84)
  {
    goto LABEL_191;
  }
  if (v113) {
    unint64_t v85 = "enabled";
  }
  else {
    unint64_t v85 = "disabled";
  }
  xpc_object_t v86 = xpc_string_create(v85);
  if (!v86) {
    xpc_object_t v86 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4D010], v86);
  xpc_object_t v87 = xpc_null_create();
  xpc_release(v86);
  xpc_release(v87);
LABEL_191:
  uint64_t IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0 || (uint64_t IsInternalBuild = TelephonyUtilIsCarrierBuild(), IsInternalBuild)) {
    int CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
  }
  else {
    int CompressionMode = 2;
  }
  uint64_t v90 = (const void *)*MEMORY[0x1E4F47258];
  size_t v91 = strlen((const char *)*MEMORY[0x1E4F47258]);
  if (v91 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v92 = v91;
  if (v91 >= 0x17)
  {
    uint64_t v94 = (v91 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v91 | 7) != 0x17) {
      uint64_t v94 = v91 | 7;
    }
    uint64_t v95 = v94 + 1;
    size_t v93 = operator new(v94 + 1);
    size_t v108 = v92;
    unint64_t v109 = v95 | 0x8000000000000000;
    xpc_object_t v107 = v93;
  }
  else
  {
    HIBYTE(v109) = v91;
    size_t v93 = &v107;
    if (!v91) {
      goto LABEL_203;
    }
  }
  memmove(v93, v90, v92);
LABEL_203:
  *((unsigned char *)v93 + v92) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::compression::get((char *)&v107, (uint64_t)&__p))
  {
    int v114 = -1431655766;
    if (util::convert<int>(&__p, &v114, 0)) {
      int CompressionMode = v114;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v109) & 0x80000000) == 0) {
      goto LABEL_208;
    }
  }
  else if ((SHIBYTE(v109) & 0x80000000) == 0)
  {
    goto LABEL_208;
  }
  operator delete(v107);
LABEL_208:
  std::to_string(&__p, CompressionMode);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v96 = &__p;
  }
  else {
    unint64_t v96 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v97 = xpc_string_create((const char *)v96);
  if (!v97) {
    xpc_object_t v97 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4D000], v97);
  xpc_object_t v98 = xpc_null_create();
  xpc_release(v97);
  xpc_release(v98);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  value[0] = 0;
  size_t v99 = strlen((const char *)v28);
  if (v99 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v100 = v99;
  if (v99 >= 0x17)
  {
    uint64_t v102 = (v99 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v99 | 7) != 0x17) {
      uint64_t v102 = v99 | 7;
    }
    uint64_t v103 = v102 + 1;
    signed __int8 v101 = operator new(v102 + 1);
    size_t v108 = v100;
    unint64_t v109 = v103 | 0x8000000000000000;
    xpc_object_t v107 = v101;
    goto LABEL_222;
  }
  HIBYTE(v109) = v99;
  signed __int8 v101 = &v107;
  if (v99) {
LABEL_222:
  }
    memmove(v101, v28, v100);
  *((unsigned char *)v101 + v100) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::systemlogs::get((char *)&v107, (uint64_t)&__p))
  {
    int v104 = util::convert<int>(&__p, value, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_228;
    }
  }
  else
  {
    int v104 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_228;
    }
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_228:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v104) {
      goto LABEL_237;
    }
LABEL_234:
    xpc_object_t v105 = xpc_int64_create(value[0]);
    if (!v105) {
      xpc_object_t v105 = xpc_null_create();
    }
    xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4CF70], v105);
    xpc_object_t v106 = xpc_null_create();
    xpc_release(v105);
    xpc_release(v106);
    goto LABEL_237;
  }
  if (v104) {
    goto LABEL_234;
  }
LABEL_237:
  *a2 = v6;
  xpc_object_t v6 = xpc_null_create();
  if (SHIBYTE(v112) < 0) {
    operator delete(*(void **)&value[1]);
  }
LABEL_239:
  xpc_release(v6);
}

void sub_1C5B64010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  xpc_release(v28);
  _Unwind_Resume(a1);
}

void sub_1C5B640CC()
{
}

void LogTracker::copyPreference(uint64_t a1@<X0>, const void **a2@<X1>, xpc_object_t *a3@<X8>)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  uint64_t v7 = MEMORY[0x1E4F14590];
  if (v6 || (xpc_object_t v6 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v6) == v7)
    {
      xpc_retain(v6);
      xpc_object_t v8 = v6;
    }
    else
    {
      xpc_object_t v8 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t v6 = 0;
  }
  xpc_release(v6);
  if (MEMORY[0x1C8795EB0](v8) != v7)
  {
    size_t v9 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_ERROR, "Failed to create preference dictionary", buf, 2u);
    }
    *a3 = xpc_null_create();
    goto LABEL_39;
  }
  int v10 = *((char *)a2 + 23);
  if (v10 >= 0) {
    size_t v11 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v11 = (size_t)a2[1];
  }
  unint64_t v12 = v11 + 34;
  memset(buf, 170, 24);
  if (v11 + 34 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v12 > 0x16)
  {
    uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v14 = v12 | 7;
    }
    *(void *)&uint8_t buf[8] = v11 + 34;
    *(void *)&uint8_t buf[16] = (v14 + 1) | 0x8000000000000000;
    *(void *)std::string buf = operator new(v14 + 1);
    qmemcpy(*(void **)buf, "/var/wireless/Library/Preferences/", 34);
    uint64_t v13 = (unsigned char *)(*(void *)buf + 34);
    if (!v11) {
      goto LABEL_24;
    }
  }
  else
  {
    qmemcpy(buf, "/var/wireless/Library/Preferences/", sizeof(buf));
    uint64_t v13 = v23;
  }
  if (v10 >= 0) {
    xpc_object_t v15 = a2;
  }
  else {
    xpc_object_t v15 = *a2;
  }
  memmove(v13, v15, v11);
LABEL_24:
  v13[v11] = 0;
  if (ctu::fs::file_exists())
  {
    if ((buf[23] & 0x80000000) != 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)buf, *(std::string::size_type *)&buf[8]);
    }
    else {
      std::string __p = *(std::string *)buf;
    }
    util::readPlistToCFDictionary((uint64_t)&__p, &cf);
    ctu::cf_to_xpc((uint64_t *)&object, (ctu *)cf, v17);
    xpc_object_t v16 = object;
    if (object && MEMORY[0x1C8795EB0](object) == v7) {
      xpc_retain(v16);
    }
    else {
      xpc_object_t v16 = xpc_null_create();
    }
    xpc_object_t v18 = xpc_null_create();
    xpc_release(v8);
    xpc_release(v18);
    xpc_release(object);
    xpc_object_t object = 0;
    if (cf) {
      CFRelease(cf);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    xpc_object_t v16 = v8;
  }
  *a3 = v16;
  xpc_object_t v8 = xpc_null_create();
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
LABEL_39:
  xpc_release(v8);
}

void sub_1C5B643C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  xpc_release(v23);
  _Unwind_Resume(a1);
}

void ___ZN10LogTracker23diagnosticToolsLog_syncEN8dispatch13group_sessionEN3xpc4dictEb_block_invoke(void *a1, unsigned int *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      uint64_t v9 = *a2;
      int v10 = *(NSObject **)(v5 + 88);
      if (v9)
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          TelephonyXPC::Result::toString(v9, (uint64_t)__p);
          if (v13 >= 0) {
            size_t v11 = __p;
          }
          else {
            size_t v11 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136315138;
          xpc_object_t v15 = v11;
          _os_log_error_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_ERROR, "Failed to collect logs. Result: %s", buf, 0xCu);
          if (v13 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_debug_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_DEBUG, "#D The log has been created", (uint8_t *)__p, 2u);
      }
    }
  }
}

void __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v4 = a2[7];
  a1[7] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    uint64_t v5 = a1[7];
    if (v5)
    {
      dispatch_group_enter(v5);
    }
  }
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 56);
    if (v3) {
      dispatch_release(v3);
    }
  }
  xpc_object_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void LogTracker::systemLog_sync(uint64_t a1, dispatch_object_t *a2, xpc_object_t *a3, void *a4)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  xpc_object_t value = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4C2F8]);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  int v9 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  int v10 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v10 || (v11 = *(void *)(a1 + 120), (unint64_t v12 = std::__shared_weak_count::lock(v10)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  char v13 = v12;
  p_shared_weak_owners = &v12->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  size_t v70 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v71 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10LogTracker14systemLog_syncEN8dispatch13group_sessionEN3xpc4dictENSt3__18functionIFvbS3_EEE_block_invoke;
  aBlock[3] = &__block_descriptor_100_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c30_ZTSN8dispatch13group_sessionE64c38_ZTSNSt3__18functionIFvbN3xpc4dictEEEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  aBlock[4] = a1;
  void aBlock[5] = v11;
  int v75 = v13;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  dispatch_object_t v76 = *a2;
  if (v76)
  {
    dispatch_retain(v76);
    if (v76) {
      dispatch_group_enter(v76);
    }
  }
  uint64_t v15 = a4[3];
  if (!v15) {
    goto LABEL_14;
  }
  if ((void *)v15 != a4)
  {
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 16))(v15);
LABEL_14:
    xpc_object_t v78 = (void *)v15;
    goto LABEL_16;
  }
  xpc_object_t v78 = v77;
  (*(void (**)(void *, void *))(*a4 + 24))(a4, v77);
LABEL_16:
  int v79 = v9;
  uint64_t v16 = _Block_copy(aBlock);
  xpc_object_t v17 = *(NSObject **)(a1 + 136);
  if (v17) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
  }
  size_t v70 = v16;
  dispatch_object_t v71 = v17;
  memset(object, 170, sizeof(object));
  xpc_object_t v18 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4C4C8]);
  v61[0] = v18;
  if (v18) {
    xpc_retain(v18);
  }
  else {
    v61[0] = xpc_null_create();
  }
  Timestamp::Timestamp((Timestamp *)v67);
  Timestamp::asString((uint64_t)v67, 0, 9, __p);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v67, (void *)v67[1]);
  xpc_release(v61[0]);
  memset(__p, 170, sizeof(__p));
  xpc_object_t v19 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4C7F8]);
  v67[0] = v19;
  if (v19) {
    xpc_retain(v19);
  }
  else {
    v67[0] = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)__p, (xpc *)v67, (const object *)*MEMORY[0x1E4F4F928], v20);
  xpc_release(v67[0]);
  memset(v67, 170, sizeof(v67));
  xpc_object_t v21 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4CA98]);
  v61[0] = v21;
  if (v21) {
    xpc_retain(v21);
  }
  else {
    v61[0] = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)v67, (xpc *)v61, (const object *)"", v22);
  xpc_release(v61[0]);
  unint64_t v65 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v66 = 0xAAAAAAAAAAAAAAAALL;
  GetABMLogServer(&v63);
  abm::HelperClient::create();
  int v23 = v64;
  if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  xpc_object_t v24 = xpc_dictionary_create(0, 0, 0);
  if (v24 || (xpc_object_t v24 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v24) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v24);
      xpc_object_t v25 = v24;
    }
    else
    {
      xpc_object_t v25 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v25 = xpc_null_create();
    xpc_object_t v24 = 0;
  }
  xpc_release(v24);
  if (SHIBYTE(object[2]) >= 0) {
    xpc_object_t v26 = object;
  }
  else {
    xpc_object_t v26 = (xpc_object_t *)object[0];
  }
  xpc_object_t v27 = xpc_string_create((const char *)v26);
  if (!v27) {
    xpc_object_t v27 = xpc_null_create();
  }
  xpc_dictionary_set_value(v25, (const char *)*MEMORY[0x1E4F47178], v27);
  xpc_object_t v28 = xpc_null_create();
  xpc_release(v27);
  xpc_release(v28);
  if (SHIBYTE(v67[2]) >= 0) {
    size_t v29 = v67;
  }
  else {
    size_t v29 = (xpc_object_t *)v67[0];
  }
  xpc_object_t v30 = xpc_string_create((const char *)v29);
  if (!v30) {
    xpc_object_t v30 = xpc_null_create();
  }
  xpc_dictionary_set_value(v25, (const char *)*MEMORY[0x1E4F47160], v30);
  xpc_object_t v31 = xpc_null_create();
  xpc_release(v30);
  xpc_release(v31);
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v32 = __p;
  }
  else {
    uint64_t v32 = (void **)__p[0];
  }
  xpc_object_t v33 = xpc_string_create((const char *)v32);
  if (!v33) {
    xpc_object_t v33 = xpc_null_create();
  }
  xpc_dictionary_set_value(v25, (const char *)*MEMORY[0x1E4F47098], v33);
  xpc_object_t v34 = xpc_null_create();
  xpc_release(v33);
  xpc_release(v34);
  v61[0] = 0;
  v61[1] = 0;
  uint64_t v62 = 0;
  BOOL v35 = (const void *)*MEMORY[0x1E4F4C2E0];
  size_t v36 = strlen((const char *)*MEMORY[0x1E4F4C2E0]);
  if (v36 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v37 = v36;
  if (v36 >= 0x17)
  {
    uint64_t v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17) {
      uint64_t v39 = v36 | 7;
    }
    uint64_t v40 = v39 + 1;
    p_dst = (long long *)operator new(v39 + 1);
    *((void *)&__dst + 1) = v37;
    unint64_t v73 = v40 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_60;
  }
  HIBYTE(v73) = v36;
  p_dst = &__dst;
  if (v36) {
LABEL_60:
  }
    memmove(p_dst, v35, v37);
  *((unsigned char *)p_dst + v37) = 0;
  prop::systemlogs::get((char *)&__dst, (uint64_t)v61);
  if (SHIBYTE(v73) < 0) {
    operator delete((void *)__dst);
  }
  if (v62 >= 0) {
    size_t v41 = v61;
  }
  else {
    size_t v41 = (xpc_object_t *)v61[0];
  }
  xpc_object_t v42 = xpc_string_create((const char *)v41);
  if (!v42) {
    xpc_object_t v42 = xpc_null_create();
  }
  xpc_dictionary_set_value(v25, (const char *)*MEMORY[0x1E4F47090], v42);
  xpc_object_t v43 = xpc_null_create();
  xpc_release(v42);
  xpc_release(v43);
  uint64_t v44 = *(NSObject **)(a1 + 88);
  if (!os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
  {
    if (v9 != 2) {
      goto LABEL_70;
    }
LABEL_111:
    xpc_object_t v50 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4CBA8]);
    *(void *)&long long __dst = v50;
    if (v50) {
      xpc_retain(v50);
    }
    else {
      *(void *)&long long __dst = xpc_null_create();
    }
    char v51 = xpc::dyn_cast_or_default((xpc *)&__dst, 0);
    xpc_object_t v52 = xpc_BOOL_create(v51);
    if (!v52) {
      xpc_object_t v52 = xpc_null_create();
    }
    xpc_dictionary_set_value(v25, (const char *)*MEMORY[0x1E4F47220], v52);
    xpc_object_t v53 = xpc_null_create();
    xpc_release(v52);
    xpc_release(v53);
    xpc_release((xpc_object_t)__dst);
    xpc_object_t v57 = v25;
    if (v25)
    {
      xpc_retain(v25);
      uint64_t v54 = v70;
      if (!v70)
      {
LABEL_121:
        uint64_t v55 = v54;
        BOOL v56 = v71;
        if (v71) {
          dispatch_retain(v71);
        }
        abm::HelperClient::perform();
        if (v56) {
          dispatch_release(v56);
        }
        if (v55) {
          _Block_release(v55);
        }
        xpc_release(v57);
        if (SHIBYTE(v62) < 0) {
          goto LABEL_84;
        }
        goto LABEL_85;
      }
    }
    else
    {
      xpc_object_t v57 = xpc_null_create();
      uint64_t v54 = v70;
      if (!v70) {
        goto LABEL_121;
      }
    }
    uint64_t v54 = _Block_copy(v54);
    goto LABEL_121;
  }
  uint64_t v49 = abm::helper::asString();
  LODWORD(__dst) = 136315138;
  *(void *)((char *)&__dst + 4) = v49;
  _os_log_debug_impl(&dword_1C59C6000, v44, OS_LOG_TYPE_DEBUG, "#D System Logs: %s", (uint8_t *)&__dst, 0xCu);
  if (v9 == 2) {
    goto LABEL_111;
  }
LABEL_70:
  if (v9 != 1) {
    goto LABEL_83;
  }
  xpc_object_t v60 = v25;
  if (v25)
  {
    xpc_retain(v25);
    int v45 = v70;
    if (!v70) {
      goto LABEL_76;
    }
    goto LABEL_75;
  }
  xpc_object_t v60 = xpc_null_create();
  int v45 = v70;
  if (v70) {
LABEL_75:
  }
    int v45 = _Block_copy(v45);
LABEL_76:
  size_t v58 = v45;
  xpc_object_t v59 = v71;
  if (v71) {
    dispatch_retain(v71);
  }
  abm::HelperClient::perform();
  if (v59) {
    dispatch_release(v59);
  }
  if (v58) {
    _Block_release(v58);
  }
  xpc_release(v60);
LABEL_83:
  if (SHIBYTE(v62) < 0) {
LABEL_84:
  }
    operator delete(v61[0]);
LABEL_85:
  xpc_release(v25);
  uint64_t v46 = (std::__shared_weak_count *)v66;
  if (v66 && !atomic_fetch_add((atomic_ullong *volatile)(v66 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
    if ((SHIBYTE(v67[2]) & 0x80000000) == 0)
    {
LABEL_88:
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
        goto LABEL_89;
      }
      goto LABEL_107;
    }
  }
  else if ((SHIBYTE(v67[2]) & 0x80000000) == 0)
  {
    goto LABEL_88;
  }
  operator delete(v67[0]);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
LABEL_89:
    if ((SHIBYTE(object[2]) & 0x80000000) == 0) {
      goto LABEL_90;
    }
    goto LABEL_108;
  }
LABEL_107:
  operator delete(__p[0]);
  if ((SHIBYTE(object[2]) & 0x80000000) == 0)
  {
LABEL_90:
    xpc_object_t v47 = v71;
    if (!v71) {
      goto LABEL_92;
    }
    goto LABEL_91;
  }
LABEL_108:
  operator delete(object[0]);
  xpc_object_t v47 = v71;
  if (v71) {
LABEL_91:
  }
    dispatch_release(v47);
LABEL_92:
  if (v70) {
    _Block_release(v70);
  }
  if (v78 == v77)
  {
    (*(void (**)(void *))(v77[0] + 32))(v77);
    xpc_object_t v48 = v76;
    if (!v76) {
      goto LABEL_102;
    }
    goto LABEL_100;
  }
  if (v78) {
    (*(void (**)(void))(*v78 + 40))();
  }
  xpc_object_t v48 = v76;
  if (v76)
  {
LABEL_100:
    dispatch_group_leave(v48);
    if (v76) {
      dispatch_release(v76);
    }
  }
LABEL_102:
  if (v75) {
    std::__shared_weak_count::__release_weak(v75);
  }
  std::__shared_weak_count::__release_weak(v13);
}

void sub_1C5B650A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, char a12, uint64_t a13, xpc_object_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,xpc_object_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,xpc_object_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,uint64_t a44,xpc_object_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN10LogTracker14systemLog_syncEN8dispatch13group_sessionEN3xpc4dictENSt3__18functionIFvbS3_EEE_block_invoke(void *a1, unsigned int *a2, void **a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  int v9 = v8;
  uint64_t v10 = a1[5];
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v10) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10) {
      return;
    }
  }
  if (a1[11])
  {
    int v11 = *a2;
    unint64_t v12 = *a3;
    xpc_object_t object = v12;
    if (v12)
    {
      xpc_retain(v12);
      LOBYTE(__p[0]) = v11 == 0;
      uint64_t v13 = a1[11];
      if (v13)
      {
LABEL_10:
        (*(void (**)(uint64_t, void **, xpc_object_t *))(*(void *)v13 + 48))(v13, __p, &object);
        xpc_release(object);
        xpc_object_t object = 0;
        goto LABEL_11;
      }
    }
    else
    {
      xpc_object_t object = xpc_null_create();
      LOBYTE(__p[0]) = v11 == 0;
      uint64_t v13 = a1[11];
      if (v13) {
        goto LABEL_10;
      }
    }
    std::__throw_bad_function_call[abi:ne180100]();
  }
LABEL_11:
  if (*a2)
  {
    uint64_t v14 = *(NSObject **)(v7 + 88);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = abm::helper::asString();
      TelephonyXPC::Result::toString(*a2, (uint64_t)__p);
      if (v18 >= 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315394;
      uint64_t v21 = v15;
      __int16 v22 = 2080;
      int v23 = v16;
      _os_log_error_impl(&dword_1C59C6000, v14, OS_LOG_TYPE_ERROR, "Failed to collect system logs mode: %s result: %s", buf, 0x16u);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_1C5B65554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c30_ZTSN8dispatch13group_sessionE64c38_ZTSNSt3__18functionIFvbN3xpc4dictEEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a2[7];
  a1[7] = v5;
  if (v5)
  {
    dispatch_retain(v5);
    xpc_object_t v6 = a1[7];
    if (v6) {
      dispatch_group_enter(v6);
    }
  }
  uint64_t result = a2[11];
  if (!result) {
    goto LABEL_9;
  }
  if ((void *)result != a2 + 8)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
LABEL_9:
    a1[11] = result;
    return result;
  }
  a1[11] = a1 + 8;
  return (*(uint64_t (**)(void))(*(void *)a2[11] + 24))(a2[11]);
}

void sub_1C5B65658(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(NSObject **)(v1 + 56);
  if (v3)
  {
    dispatch_group_leave(v3);
    uint64_t v4 = *(NSObject **)(v1 + 56);
    if (v4) {
      dispatch_release(v4);
    }
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 48);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c30_ZTSN8dispatch13group_sessionE64c38_ZTSNSt3__18functionIFvbN3xpc4dictEEEE(void *a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = (void *)a1[11];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
    uint64_t v4 = a1[7];
    if (!v4) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  if (v3) {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  uint64_t v4 = a1[7];
  if (v4)
  {
LABEL_7:
    dispatch_group_leave(v4);
    uint64_t v5 = a1[7];
    if (v5) {
      dispatch_release(v5);
    }
  }
LABEL_9:
  xpc_object_t v6 = (std::__shared_weak_count *)a1[6];
  if (v6)
  {
    std::__shared_weak_count::__release_weak(v6);
  }
}

void *std::function<void ()(BOOL,xpc::dict)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void LogTracker::archiveLogs_sync(void *a1, NSObject **a2, xpc_object_t *a3)
{
  xpc_object_t value = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4D210]);
  *(void *)std::string buf = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    *(void *)std::string buf = xpc_null_create();
  }
  uint64_t IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0 || (uint64_t IsInternalBuild = TelephonyUtilIsCarrierBuild(), IsInternalBuild)) {
    uint64_t CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
  }
  else {
    uint64_t CompressionMode = 2;
  }
  int v9 = xpc::dyn_cast_or_default((xpc *)buf, (const object *)CompressionMode);
  xpc_release(*(xpc_object_t *)buf);
  if (!v9)
  {
    int v11 = a1[11];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_1C59C6000, v11, OS_LOG_TYPE_ERROR, "Compression is disabled!", buf, 2u);
    }
    return;
  }
  xpc_object_t v10 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4CF88]);
  *(void *)std::string buf = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    *(void *)std::string buf = xpc_null_create();
  }
  char v12 = xpc::dyn_cast_or_default((xpc *)buf, 0);
  xpc_release(*(xpc_object_t *)buf);
  memset(buf, 170, 24);
  xpc_object_t v13 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4C4C8]);
  xpc_object_t object = v13;
  if (v13) {
    xpc_retain(v13);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  Timestamp::Timestamp((Timestamp *)&v49);
  Timestamp::asString((uint64_t)&v49, 0, 9, v51);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v51[2]) < 0) {
    operator delete((void *)v51[0]);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v49, v50);
  xpc_release(object);
  memset(v51, 170, sizeof(v51));
  xpc_object_t v14 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4C7F8]);
  xpc_object_t v49 = v14;
  if (v14) {
    xpc_retain(v14);
  }
  else {
    xpc_object_t v49 = xpc_null_create();
  }
  xpc::dyn_cast_or_default(v51, (xpc *)&v49, (const object *)*MEMORY[0x1E4F4F928], v15);
  xpc_release(v49);
  uint64_t v16 = (std::__shared_weak_count *)a1[16];
  if (!v16 || (v17 = a1[15], (char v18 = std::__shared_weak_count::lock(v16)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v19 = v18;
  p_shared_weak_owners = &v18->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v19);
  }
  xpc_object_t v49 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v50 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10LogTracker16archiveLogs_syncEN8dispatch13group_sessionEN3xpc4dictE_block_invoke;
  aBlock[3] = &__block_descriptor_64_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  aBlock[4] = a1;
  void aBlock[5] = v17;
  xpc_object_t v47 = v19;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v21 = *a2;
  dispatch_group_t group = v21;
  if (v21)
  {
    dispatch_retain(v21);
    dispatch_group_enter(group);
  }
  __int16 v22 = _Block_copy(aBlock);
  int v23 = a1[17];
  if (v23) {
    dispatch_retain(v23);
  }
  xpc_object_t v49 = v22;
  dispatch_object_t v50 = v23;
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  unint64_t v45 = 0xAAAAAAAAAAAAAAAALL;
  GetABMLogServer(&v42);
  abm::HelperClient::create();
  uint64_t v24 = v43;
  if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  xpc_object_t v25 = xpc_dictionary_create(0, 0, 0);
  if (v25 || (xpc_object_t v25 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v25) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v25);
      xpc_object_t v26 = v25;
    }
    else
    {
      xpc_object_t v26 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v26 = xpc_null_create();
    xpc_object_t v25 = 0;
  }
  xpc_release(v25);
  if (v51[2] >= 0) {
    xpc_object_t v27 = (const char *)v51;
  }
  else {
    xpc_object_t v27 = (const char *)v51[0];
  }
  xpc_object_t v28 = xpc_string_create(v27);
  if (!v28) {
    xpc_object_t v28 = xpc_null_create();
  }
  xpc_dictionary_set_value(v26, (const char *)*MEMORY[0x1E4F47190], v28);
  xpc_object_t v29 = xpc_null_create();
  xpc_release(v28);
  xpc_release(v29);
  if ((buf[23] & 0x80u) == 0) {
    xpc_object_t v30 = buf;
  }
  else {
    xpc_object_t v30 = *(uint8_t **)buf;
  }
  xpc_object_t v31 = xpc_string_create((const char *)v30);
  if (!v31) {
    xpc_object_t v31 = xpc_null_create();
  }
  xpc_dictionary_set_value(v26, (const char *)*MEMORY[0x1E4F47178], v31);
  xpc_object_t v32 = xpc_null_create();
  xpc_release(v31);
  xpc_release(v32);
  xpc_object_t v33 = xpc_int64_create(v9);
  if (!v33) {
    xpc_object_t v33 = xpc_null_create();
  }
  xpc_dictionary_set_value(v26, (const char *)*MEMORY[0x1E4F47258], v33);
  xpc_object_t v34 = xpc_null_create();
  xpc_release(v33);
  xpc_release(v34);
  xpc_object_t v35 = xpc_BOOL_create(v12);
  if (!v35) {
    xpc_object_t v35 = xpc_null_create();
  }
  xpc_dictionary_set_value(v26, (const char *)*MEMORY[0x1E4F47108], v35);
  xpc_object_t v36 = xpc_null_create();
  xpc_release(v35);
  xpc_release(v36);
  xpc_object_t v41 = v26;
  if (v26)
  {
    xpc_retain(v26);
    xpc_object_t v37 = v49;
    if (!v49) {
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  xpc_object_t v41 = xpc_null_create();
  xpc_object_t v37 = v49;
  if (v49) {
LABEL_57:
  }
    xpc_object_t v37 = _Block_copy(v37);
LABEL_58:
  uint64_t v39 = v37;
  uint64_t v40 = v50;
  if (v50) {
    dispatch_retain(v50);
  }
  abm::HelperClient::perform();
  if (v40) {
    dispatch_release(v40);
  }
  if (v39) {
    _Block_release(v39);
  }
  xpc_release(v41);
  xpc_release(v26);
  xpc_object_t v38 = (std::__shared_weak_count *)v45;
  if (v45 && !atomic_fetch_add((atomic_ullong *volatile)(v45 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  if (v50) {
    dispatch_release(v50);
  }
  if (v49) {
    _Block_release(v49);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if (v47) {
    std::__shared_weak_count::__release_weak(v47);
  }
  std::__shared_weak_count::__release_weak(v19);
  if ((SHIBYTE(v51[2]) & 0x80000000) == 0)
  {
    if (((char)buf[23] & 0x80000000) == 0) {
      return;
    }
LABEL_80:
    operator delete(*(void **)buf);
    return;
  }
  operator delete((void *)v51[0]);
  if ((char)buf[23] < 0) {
    goto LABEL_80;
  }
}

void sub_1C5B65E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, char a13, uint64_t a14, xpc_object_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,dispatch_group_t group,xpc_object_t a25,uint64_t a26)
{
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a10);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v27);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a25);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if (a23) {
    std::__shared_weak_count::__release_weak(a23);
  }
  std::__shared_weak_count::__release_weak(v26);
  if (*(char *)(v28 - 97) < 0) {
    operator delete(*(void **)(v28 - 120));
  }
  if (*(char *)(v28 - 73) < 0)
  {
    operator delete(*(void **)(v28 - 96));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN10LogTracker16archiveLogs_syncEN8dispatch13group_sessionEN3xpc4dictE_block_invoke(void *a1, unsigned int *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      uint64_t v9 = *a2;
      xpc_object_t v10 = *(NSObject **)(v5 + 88);
      if (v9)
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          TelephonyXPC::Result::toString(v9, (uint64_t)__p);
          if (v13 >= 0) {
            int v11 = __p;
          }
          else {
            int v11 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136315138;
          uint64_t v15 = v11;
          _os_log_error_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_ERROR, "Compression failed. Result: %s", buf, 0xCu);
          if (v13 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_debug_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_DEBUG, "#D Compression is done.", (uint8_t *)__p, 2u);
      }
    }
  }
}

void LogTracker::processLogarchive_sync(void *a1, NSObject **a2, const char *a3, void *a4)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (std::__shared_weak_count *)a1[16];
  if (!v5 || (v9 = a1[15], (xpc_object_t v10 = std::__shared_weak_count::lock(v5)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v11 = v10;
  p_shared_weak_owners = &v10->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
  }
  xpc_object_t v49 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10LogTracker22processLogarchive_syncEN8dispatch13group_sessionENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_8functionIFvbEEE_block_invoke;
  aBlock[3] = &__block_descriptor_96_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE64c27_ZTSNSt3__18functionIFvbEEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  aBlock[4] = a1;
  void aBlock[5] = v9;
  xpc_object_t v52 = v11;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  char v13 = *a2;
  dispatch_group_t group = v13;
  if (v13)
  {
    dispatch_retain(v13);
    dispatch_group_enter(group);
  }
  uint64_t v14 = a4[3];
  if (v14)
  {
    if ((void *)v14 == a4)
    {
      uint64_t v55 = v54;
      (*(void (**)(void *, void *))(*a4 + 24))(a4, v54);
      goto LABEL_12;
    }
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 16))(v14);
  }
  uint64_t v55 = (void *)v14;
LABEL_12:
  uint64_t v15 = _Block_copy(aBlock);
  uint64_t v16 = a1[17];
  if (v16) {
    dispatch_retain(v16);
  }
  xpc_object_t v49 = v15;
  dispatch_object_t object = v16;
  unint64_t v47 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v48 = 0xAAAAAAAAAAAAAAAALL;
  GetABMLogServer(&v45);
  abm::HelperClient::create();
  uint64_t v17 = v46;
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_object_t v18 = xpc_dictionary_create(0, 0, 0);
  if (v18 || (xpc_object_t v18 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v18) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v18);
      xpc_object_t v19 = v18;
    }
    else
    {
      xpc_object_t v19 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v19 = xpc_null_create();
    xpc_object_t v18 = 0;
  }
  xpc_release(v18);
  unint64_t v20 = *((unsigned __int8 *)a3 + 23);
  if (a3[23] < 0)
  {
    uint64_t v21 = *(const char **)a3;
    uint64_t v22 = *((void *)a3 + 1);
  }
  else
  {
    uint64_t v21 = a3;
    uint64_t v22 = *((unsigned __int8 *)a3 + 23);
  }
  int v23 = v21 - 1;
  do
  {
    if (!v22)
    {
      unint64_t v25 = 0;
      memset(__dst, 170, sizeof(__dst));
      if ((v20 & 0x80) != 0) {
        goto LABEL_82;
      }
LABEL_31:
      xpc_object_t v26 = a3;
      if (v25 <= v20)
      {
        size_t v27 = v20 - v25;
        if (v20 - v25 >= 0x7FFFFFFFFFFFFFF8) {
          goto LABEL_84;
        }
        goto LABEL_33;
      }
LABEL_86:
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    int v24 = v23[v22--];
  }
  while (v24 != 92 && v24 != 47);
  unint64_t v25 = v22 + 1;
  memset(__dst, 170, sizeof(__dst));
  if ((v20 & 0x80) == 0) {
    goto LABEL_31;
  }
LABEL_82:
  unint64_t v20 = *((void *)a3 + 1);
  if (v20 < v25) {
    goto LABEL_86;
  }
  xpc_object_t v26 = *(const char **)a3;
  size_t v27 = v20 - v25;
  if (v20 - v25 >= 0x7FFFFFFFFFFFFFF8) {
LABEL_84:
  }
    std::string::__throw_length_error[abi:ne180100]();
LABEL_33:
  if (v27 >= 0x17)
  {
    uint64_t v37 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17) {
      uint64_t v37 = v27 | 7;
    }
    uint64_t v38 = v37 + 1;
    uint64_t v28 = (void **)operator new(v37 + 1);
    __dst[1] = (void *)v27;
    long long __dst[2] = (void *)(v38 | 0x8000000000000000);
    __dst[0] = v28;
LABEL_51:
    memmove(v28, &v26[v25], v27);
    *((unsigned char *)v28 + v27) = 0;
    if (a3[23] < 0) {
      goto LABEL_52;
    }
    goto LABEL_36;
  }
  HIBYTE(__dst[2]) = v27;
  uint64_t v28 = __dst;
  if (v20 != v25) {
    goto LABEL_51;
  }
  *((unsigned char *)__dst + v27) = 0;
  if ((a3[23] & 0x80000000) == 0) {
    goto LABEL_36;
  }
LABEL_52:
  a3 = *(const char **)a3;
LABEL_36:
  xpc_object_t v29 = xpc_string_create(a3);
  if (!v29) {
    xpc_object_t v29 = xpc_null_create();
  }
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E4F47190], v29);
  xpc_object_t v30 = xpc_null_create();
  xpc_release(v29);
  xpc_release(v30);
  if (SHIBYTE(__dst[2]) >= 0) {
    xpc_object_t v31 = (const char *)__dst;
  }
  else {
    xpc_object_t v31 = (const char *)__dst[0];
  }
  xpc_object_t v32 = xpc_string_create(v31);
  if (!v32) {
    xpc_object_t v32 = xpc_null_create();
  }
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E4F471C0], v32);
  xpc_object_t v33 = xpc_null_create();
  xpc_release(v32);
  xpc_release(v33);
  xpc_object_t v34 = xpc_int64_create(2);
  if (!v34) {
    xpc_object_t v34 = xpc_null_create();
  }
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E4F47258], v34);
  xpc_object_t v35 = xpc_null_create();
  xpc_release(v34);
  xpc_release(v35);
  xpc_object_t v43 = v19;
  if (!v19)
  {
    xpc_object_t v43 = xpc_null_create();
    xpc_object_t v36 = v49;
    if (!v49) {
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  xpc_retain(v19);
  xpc_object_t v36 = v49;
  if (v49) {
LABEL_54:
  }
    xpc_object_t v36 = _Block_copy(v36);
LABEL_55:
  xpc_object_t v41 = v36;
  uint64_t v42 = object;
  if (object) {
    dispatch_retain(object);
  }
  abm::HelperClient::perform();
  if (v42) {
    dispatch_release(v42);
  }
  if (v41) {
    _Block_release(v41);
  }
  xpc_release(v43);
  if (SHIBYTE(__dst[2]) < 0) {
    operator delete(__dst[0]);
  }
  xpc_release(v19);
  uint64_t v39 = (std::__shared_weak_count *)v48;
  if (v48 && !atomic_fetch_add((atomic_ullong *volatile)(v48 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v49) {
    _Block_release(v49);
  }
  if (v55 == v54)
  {
    (*(void (**)(void *))(v54[0] + 32))(v54);
    uint64_t v40 = group;
    if (!group) {
      goto LABEL_78;
    }
    goto LABEL_76;
  }
  if (v55) {
    (*(void (**)(void))(*v55 + 40))();
  }
  uint64_t v40 = group;
  if (group)
  {
LABEL_76:
    dispatch_group_leave(v40);
    if (group) {
      dispatch_release(group);
    }
  }
LABEL_78:
  if (v52) {
    std::__shared_weak_count::__release_weak(v52);
  }
  std::__shared_weak_count::__release_weak(v11);
}

void sub_1C5B66870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,dispatch_group_t group)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN10LogTracker22processLogarchive_syncEN8dispatch13group_sessionENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_8functionIFvbEEE_block_invoke(void *a1, _DWORD *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      uint64_t v9 = a1[11];
      if (v9)
      {
        LOBYTE(__p[0]) = *a2 == 0;
        (*(void (**)(uint64_t, void **))(*(void *)v9 + 48))(v9, __p);
      }
      uint64_t v10 = *a2;
      int v11 = *(NSObject **)(v5 + 88);
      if (v10)
      {
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          TelephonyXPC::Result::toString(v10, (uint64_t)__p);
          if (v14 >= 0) {
            char v12 = __p;
          }
          else {
            char v12 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136315138;
          uint64_t v16 = v12;
          _os_log_error_impl(&dword_1C59C6000, v11, OS_LOG_TYPE_ERROR, "Logarchive compression failed. Result: %s", buf, 0xCu);
          if (v14 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_debug_impl(&dword_1C59C6000, v11, OS_LOG_TYPE_DEBUG, "#D Logarchive compression is done.", (uint8_t *)__p, 2u);
      }
    }
  }
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE64c27_ZTSNSt3__18functionIFvbEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a2[7];
  a1[7] = v5;
  if (v5)
  {
    dispatch_retain(v5);
    xpc_object_t v6 = a1[7];
    if (v6) {
      dispatch_group_enter(v6);
    }
  }
  uint64_t result = a2[11];
  if (!result) {
    goto LABEL_9;
  }
  if ((void *)result != a2 + 8)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
LABEL_9:
    a1[11] = result;
    return result;
  }
  a1[11] = a1 + 8;
  return (*(uint64_t (**)(void))(*(void *)a2[11] + 24))(a2[11]);
}

void sub_1C5B66C70(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(NSObject **)(v1 + 56);
  if (v3)
  {
    dispatch_group_leave(v3);
    uint64_t v4 = *(NSObject **)(v1 + 56);
    if (v4) {
      dispatch_release(v4);
    }
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 48);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE64c27_ZTSNSt3__18functionIFvbEEE(void *a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = (void *)a1[11];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
    uint64_t v4 = a1[7];
    if (!v4) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  if (v3) {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  uint64_t v4 = a1[7];
  if (v4)
  {
LABEL_7:
    dispatch_group_leave(v4);
    uint64_t v5 = a1[7];
    if (v5) {
      dispatch_release(v5);
    }
  }
LABEL_9:
  xpc_object_t v6 = (std::__shared_weak_count *)a1[6];
  if (v6)
  {
    std::__shared_weak_count::__release_weak(v6);
  }
}

void *std::function<void ()(BOOL)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void LogTracker::jsonSummary_sync(void *a1, NSObject **a2, xpc_object_t *a3)
{
  if (TelephonyUtilIsInternalBuild() & 1) != 0 || (TelephonyUtilIsCarrierBuild())
  {
    xpc_object_t v6 = (const void *)*MEMORY[0x1E4F4C888];
    size_t v7 = strlen((const char *)*MEMORY[0x1E4F4C888]);
    if (v7 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (void *)v7;
    if (v7 >= 0x17)
    {
      uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17) {
        uint64_t v10 = v7 | 7;
      }
      uint64_t v11 = v10 + 1;
      uint64_t v9 = (void **)operator new(v10 + 1);
      __dst[1] = v8;
      unint64_t v31 = v11 | 0x8000000000000000;
      __dst[0] = v9;
    }
    else
    {
      HIBYTE(v31) = v7;
      uint64_t v9 = __dst;
      if (!v7) {
        goto LABEL_11;
      }
    }
    memmove(v9, v6, (size_t)v8);
LABEL_11:
    *((unsigned char *)v8 + (void)v9) = 0;
    long long aBlock = 0;
    CFTypeRef cf = 0;
    Service::broadcastEvent((uint64_t)a1, (uint64_t)__dst, &cf, (const void **)&aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (SHIBYTE(v31) < 0) {
      operator delete(__dst[0]);
    }
    char v12 = (std::__shared_weak_count *)a1[16];
    if (!v12 || (uint64_t v13 = a1[15], (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v15 = v14;
    p_shared_weak_owners = &v14->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v15);
    }
    uint64_t v23 = v13;
    int v24 = v15;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    uint64_t v17 = *a2;
    unint64_t v25 = v17;
    if (v17)
    {
      dispatch_retain(v17);
      dispatch_group_enter(v17);
    }
    xpc_object_t v18 = *a3;
    xpc_object_t v26 = v18;
    if (v18)
    {
      xpc_retain(v18);
    }
    else
    {
      xpc_object_t v18 = xpc_null_create();
      xpc_object_t v26 = v18;
    }
    size_t v27 = a1;
    xpc_object_t v19 = a1[22];
    unint64_t v20 = a1[17];
    uint64_t v21 = operator new(0x28uLL);
    *uint64_t v21 = v13;
    v21[1] = v15;
    uint64_t v23 = 0;
    int v24 = 0;
    v21[2] = v17;
    if (v17)
    {
      dispatch_retain(v17);
      dispatch_group_enter(v17);
    }
    v21[3] = v18;
    if (v18) {
      xpc_retain(v18);
    }
    else {
      v21[3] = xpc_null_create();
    }
    unsigned char v21[4] = a1;
    dispatch_group_notify_f(v19, v20, v21, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0>(dispatch_group_s *,dispatch_queue_s *,LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
    xpc_release(v18);
    if (v17)
    {
      dispatch_group_leave(v17);
      dispatch_release(v17);
    }
    std::__shared_weak_count::__release_weak(v15);
    return;
  }
  uint64_t v22 = a1[11];
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v23) = 0;
    _os_log_error_impl(&dword_1C59C6000, v22, OS_LOG_TYPE_ERROR, "JSON summary is not supported!", (uint8_t *)&v23, 2u);
  }
}

void sub_1C5B670BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0::~$_0((uint64_t)&a9);
  std::__shared_weak_count::__release_weak(v9);
  _Unwind_Resume(a1);
}

void sub_1C5B670DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, const void *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a15);
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0::~$_0(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 24));
  *(void *)(a1 + 24) = 0;
  uint64_t v2 = *(NSObject **)(a1 + 16);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 16);
    if (v3) {
      dispatch_release(v3);
    }
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

uint64_t LogTracker::postLogCollectionSupported(LogTracker *this)
{
  if (TelephonyUtilIsInternalBuild()) {
    return 1;
  }

  return TelephonyUtilIsCarrierBuild();
}

void LogTracker::postLogCollectionExternal_sync(void *a1, xpc_object_t *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[26];
  dispatch_object_t v31 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  xpc_object_t v30 = *a2;
  xpc_object_t v5 = v30;
  if (v30)
  {
    xpc_retain(v30);
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v30 = v5;
  }
  xpc_object_t v34 = 0;
  LogTracker::systemLog_sync((uint64_t)a1, &v31, &v30, v33);
  if (v34 == v33)
  {
    (*(void (**)(void *))(v33[0] + 32))(v33);
  }
  else if (v34)
  {
    (*(void (**)(void *))(*v34 + 40))(v34);
  }
  xpc_release(v5);
  xpc_object_t v30 = 0;
  if (v4)
  {
    dispatch_group_leave(v4);
    dispatch_release(v4);
  }
  xpc_object_t v6 = (std::__shared_weak_count *)a1[16];
  if (!v6 || (uint64_t v7 = a1[15], (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  p_shared_weak_owners = &v8->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v28 = v8;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    xpc_object_t v11 = *a2;
    xpc_object_t v29 = *a2;
    if (*a2)
    {
LABEL_16:
      xpc_retain(v11);
      goto LABEL_19;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    uint64_t v28 = v9;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    xpc_object_t v11 = *a2;
    xpc_object_t v29 = *a2;
    if (*a2) {
      goto LABEL_16;
    }
  }
  xpc_object_t v11 = xpc_null_create();
  xpc_object_t v29 = v11;
LABEL_19:
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v12 = *a2;
  xpc_object_t v25 = *a2;
  if (*a2)
  {
    xpc_retain(v12);
    xpc_object_t v26 = v9;
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    object_8 = v11;
    if (v11) {
      goto LABEL_21;
    }
  }
  else
  {
    xpc_object_t v12 = xpc_null_create();
    xpc_object_t v25 = v12;
    xpc_object_t v26 = v9;
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    object_8 = v11;
    if (v11)
    {
LABEL_21:
      xpc_retain(v11);
      xpc_object_t v13 = *a2;
      uint64_t v17 = a1;
      xpc_object_t v18 = *a2;
      if (*a2) {
        goto LABEL_22;
      }
      goto LABEL_27;
    }
  }
  xpc_object_t v11 = xpc_null_create();
  object_8 = v11;
  xpc_object_t v13 = *a2;
  uint64_t v17 = a1;
  xpc_object_t v18 = *a2;
  if (*a2)
  {
LABEL_22:
    xpc_retain(v13);
    *(void *)&long long v19 = v7;
    *((void *)&v19 + 1) = v9;
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    unint64_t v20 = a1;
    xpc_object_t v21 = v12;
    if (v12) {
      goto LABEL_23;
    }
LABEL_28:
    xpc_object_t v21 = xpc_null_create();
    *(void *)&long long v22 = v7;
    *((void *)&v22 + 1) = v9;
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v23 = a1;
    xpc_object_t v24 = v11;
    if (v11) {
      goto LABEL_24;
    }
    goto LABEL_29;
  }
LABEL_27:
  xpc_object_t v18 = xpc_null_create();
  *(void *)&long long v19 = v7;
  *((void *)&v19 + 1) = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unint64_t v20 = a1;
  xpc_object_t v21 = v12;
  if (!v12) {
    goto LABEL_28;
  }
LABEL_23:
  xpc_retain(v12);
  *(void *)&long long v22 = v7;
  *((void *)&v22 + 1) = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v23 = a1;
  xpc_object_t v24 = v11;
  if (v11)
  {
LABEL_24:
    xpc_retain(v11);
    goto LABEL_30;
  }
LABEL_29:
  xpc_object_t v24 = xpc_null_create();
LABEL_30:
  char v14 = a1[26];
  uint64_t v15 = a1[17];
  uint64_t v32 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v16 = operator new(0x50uLL);
  *uint64_t v16 = v17;
  v16[1] = v18;
  if (v18) {
    xpc_retain(v18);
  }
  else {
    v16[1] = xpc_null_create();
  }
  *((_OWORD *)v16 + 1) = v19;
  v16[4] = v20;
  v16[5] = v21;
  if (v21) {
    xpc_retain(v21);
  }
  else {
    v16[5] = xpc_null_create();
  }
  *((_OWORD *)v16 + 3) = v22;
  v16[8] = v23;
  v16[9] = v24;
  if (v24) {
    xpc_retain(v24);
  }
  else {
    v16[9] = xpc_null_create();
  }
  uint64_t v32 = 0;
  dispatch_group_notify_f(v14, v15, v16, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>>::~unique_ptr[abi:ne180100](&v32);
  xpc_release(v24);
  xpc_release(v21);
  xpc_release(v18);
  xpc_release(object_8);
  std::__shared_weak_count::__release_weak(v26);
  xpc_release(v25);
  std::__shared_weak_count::__release_weak(v9);
  xpc_release(v29);
  std::__shared_weak_count::__release_weak(v28);
  std::__shared_weak_count::__release_weak(v9);
}

void sub_1C5B67610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2::~$_2(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 72));
  *(void *)(a1 + 72) = 0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  xpc_release(*(xpc_object_t *)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  return a1;
}

uint64_t LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1::~$_1(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(void *)(a1 + 56) = 0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  xpc_release(*(xpc_object_t *)(a1 + 24));
  *(void *)(a1 + 24) = 0;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_0::~$_0(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 24));
  *(void *)(a1 + 24) = 0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void LogTracker::postLogCollectionInternal_sync(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v199 = *MEMORY[0x1E4F143B8];
  memset(v184, 170, sizeof(v184));
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C6A0]);
  object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  xpc_object_t v141 = (char *)*MEMORY[0x1E4F4C820];
  xpc::dyn_cast_or_default((uint64_t *)v184, (xpc *)object, (const object *)*MEMORY[0x1E4F4C820], v5);
  xpc_release(object[0].__r_.__value_.__l.__data_);
  memset(v183, 170, sizeof(v183));
  xpc_object_t v6 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x1E4F4C690]);
  object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)v183, (xpc *)object, (const object *)"", v7);
  xpc_release(object[0].__r_.__value_.__l.__data_);
  memset(v182, 170, sizeof(v182));
  xpc_object_t v8 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x1E4F4CA38]);
  object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  if (v8) {
    xpc_retain(v8);
  }
  else {
    object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)v182, (xpc *)object, (const object *)"", v9);
  xpc_release(object[0].__r_.__value_.__l.__data_);
  memset(&v181, 170, sizeof(v181));
  uint64_t v10 = (const char *)*MEMORY[0x1E4F4CA98];
  xpc_object_t v11 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x1E4F4CA98]);
  object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
  if (v11) {
    xpc_retain(v11);
  }
  else {
    object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)&v181, (xpc *)object, (const object *)"", v12);
  xpc_release(object[0].__r_.__value_.__l.__data_);
  memset(&__s, 170, sizeof(__s));
  xpc_object_t v13 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x1E4F4C4C8]);
  __p[0] = v13;
  if (v13) {
    xpc_retain(v13);
  }
  else {
    __p[0] = xpc_null_create();
  }
  Timestamp::Timestamp((Timestamp *)__dst);
  Timestamp::asString((uint64_t)__dst, 0, 9, object);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(object[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(object[0].__r_.__value_.__l.__data_);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)__dst, *(void **)&__dst[8]);
  xpc_release(__p[0]);
  xpc_object_t v14 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x1E4F4C180]);
  object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
  if (v14) {
    xpc_retain(v14);
  }
  else {
    object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  int v15 = xpc::dyn_cast_or_default((xpc *)object, (const object *)7);
  xpc_release(object[0].__r_.__value_.__l.__data_);
  memset(&v179, 170, sizeof(v179));
  xpc_object_t v16 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x1E4F4C8D8]);
  object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
  if (v16) {
    xpc_retain(v16);
  }
  else {
    object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)&v179, (xpc *)object, (const object *)"", v17);
  xpc_release(object[0].__r_.__value_.__l.__data_);
  xpc_object_t v18 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x1E4F4D210]);
  object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
  if (v18) {
    xpc_retain(v18);
  }
  else {
    object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  uint64_t IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0 || (uint64_t IsInternalBuild = TelephonyUtilIsCarrierBuild(), IsInternalBuild)) {
    uint64_t CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
  }
  else {
    uint64_t CompressionMode = 2;
  }
  int v142 = xpc::dyn_cast_or_default((xpc *)object, (const object *)CompressionMode);
  xpc_release(object[0].__r_.__value_.__l.__data_);
  char v178 = 1;
  xpc_object_t v21 = (const void *)*MEMORY[0x1E4F4D268];
  size_t v22 = strlen((const char *)*MEMORY[0x1E4F4D268]);
  if (v22 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v23 = v22;
  uint64_t v143 = a1;
  if (v22 >= 0x17)
  {
    uint64_t v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17) {
      uint64_t v25 = v22 | 7;
    }
    uint64_t v26 = v25 + 1;
    xpc_object_t v24 = operator new(v25 + 1);
    *(void *)&__dst[8] = v23;
    *(void *)&__dst[16] = v26 | 0x8000000000000000;
    *(void *)long long __dst = v24;
    goto LABEL_38;
  }
  __dst[23] = v22;
  xpc_object_t v24 = __dst;
  if (v22) {
LABEL_38:
  }
    memmove(v24, v21, v23);
  v24[v23] = 0;
  memset(object, 0, 24);
  if (prop::logfilter::get(__dst, (uint64_t)object)) {
    util::convert<BOOL>(object, (BOOL *)&v178, 0);
  }
  size_t v27 = (void *)a1;
  if (SHIBYTE(object[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(object[0].__r_.__value_.__l.__data_);
    if ((__dst[23] & 0x80000000) == 0)
    {
LABEL_43:
      if (v178) {
        goto LABEL_44;
      }
      goto LABEL_48;
    }
  }
  else if ((__dst[23] & 0x80000000) == 0)
  {
    goto LABEL_43;
  }
  operator delete(*(void **)__dst);
  if (v178)
  {
LABEL_44:
    *(void *)&long long v28 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)xpc_object_t v188 = v28;
    *(_OWORD *)&object[3].__r_.__value_.__r.__words[1] = v28;
    *(_OWORD *)&object[2].__r_.__value_.__r.__words[2] = v28;
    *(_OWORD *)&object[2].__r_.__value_.__l.__data_ = v28;
    *(_OWORD *)&object[1].__r_.__value_.__r.__words[1] = v28;
    *(_OWORD *)&object[0].__r_.__value_.__r.__words[2] = v28;
    *(_OWORD *)&object[0].__r_.__value_.__l.__data_ = v28;
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v177, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    }
    else {
      std::string v177 = __s;
    }
    if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v176, v179.__r_.__value_.__l.__data_, v179.__r_.__value_.__l.__size_);
    }
    else {
      std::string v176 = v179;
    }
    ResetInfo::ResetInfo(object, (long long *)v183, (long long *)v182, (long long *)&v181, (uint64_t)&v177, v15, (long long *)&v176);
    if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v176.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v177.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_56;
      }
    }
    else if ((SHIBYTE(v177.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_56;
    }
    operator delete(v177.__r_.__value_.__l.__data_);
LABEL_56:
    pthread_mutex_lock(&ctu::Singleton<LogDumpDB,LogDumpDB,ctu::PthreadMutexGuardPolicy<LogDumpDB>>::sInstance);
    xpc_object_t v30 = (void *)xmmword_1EBBDCAA8;
    if (!(void)xmmword_1EBBDCAA8)
    {
      LogDumpDB::create_default_global((LogDumpDB *)__dst);
      long long v31 = *(_OWORD *)__dst;
      *(_OWORD *)long long __dst = 0uLL;
      uint64_t v32 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDCAA8 + 1);
      xmmword_1EBBDCAA8 = v31;
      if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
      xpc_object_t v33 = *(std::__shared_weak_count **)&__dst[8];
      if (*(void *)&__dst[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&__dst[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
      xpc_object_t v30 = (void *)xmmword_1EBBDCAA8;
    }
    xpc_object_t v34 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDCAA8 + 1);
    __p[0] = v30;
    __p[1] = *((xpc_object_t *)&xmmword_1EBBDCAA8 + 1);
    if (*((void *)&xmmword_1EBBDCAA8 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1EBBDCAA8 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<LogDumpDB,LogDumpDB,ctu::PthreadMutexGuardPolicy<LogDumpDB>>::sInstance);
    BOOL isDuplicated = LogDumpDB::isDuplicated((uint64_t)v30, (uint64_t)object, 1200);
    BOOL v36 = isDuplicated;
    if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
      if (v36)
      {
LABEL_69:
        std::string::append(&v181, " (duplicated signature detected)", 0x20uLL);
        if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v37 = &v181;
        }
        else {
          uint64_t v37 = (std::string *)v181.__r_.__value_.__r.__words[0];
        }
        xpc_object_t v38 = xpc_string_create((const char *)v37);
        if (!v38) {
          xpc_object_t v38 = xpc_null_create();
        }
        xpc_dictionary_set_value(*v2, v10, v38);
        xpc_object_t v39 = xpc_null_create();
        xpc_release(v38);
        xpc_release(v39);
        if ((v188[15] & 0x80000000) != 0)
        {
          operator delete((void *)object[3].__r_.__value_.__r.__words[2]);
          if ((SHIBYTE(object[2].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_76:
            if ((SHIBYTE(object[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_77;
            }
            goto LABEL_139;
          }
        }
        else if ((SHIBYTE(object[2].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_76;
        }
        operator delete(object[2].__r_.__value_.__l.__data_);
        if ((SHIBYTE(object[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_77:
          if ((SHIBYTE(object[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_78:
            char v40 = 1;
            goto LABEL_96;
          }
LABEL_140:
          operator delete(object[0].__r_.__value_.__l.__data_);
          goto LABEL_78;
        }
LABEL_139:
        operator delete(object[1].__r_.__value_.__l.__data_);
        if ((SHIBYTE(object[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_78;
        }
        goto LABEL_140;
      }
    }
    else if (isDuplicated)
    {
      goto LABEL_69;
    }
    if ((v188[15] & 0x80000000) != 0)
    {
      operator delete((void *)object[3].__r_.__value_.__r.__words[2]);
      if ((SHIBYTE(object[2].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_84:
        if ((SHIBYTE(object[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_85;
        }
        goto LABEL_135;
      }
    }
    else if ((SHIBYTE(object[2].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_84;
    }
    operator delete(object[2].__r_.__value_.__l.__data_);
    if ((SHIBYTE(object[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_85:
      if ((SHIBYTE(object[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_86;
      }
LABEL_136:
      operator delete(object[0].__r_.__value_.__l.__data_);
      goto LABEL_86;
    }
LABEL_135:
    operator delete(object[1].__r_.__value_.__l.__data_);
    if ((SHIBYTE(object[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_86;
    }
    goto LABEL_136;
  }
LABEL_48:
  xpc_object_t v29 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(object[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C59C6000, v29, OS_LOG_TYPE_DEFAULT, "#I Duplicated Signature Detection is disabled", (uint8_t *)object, 2u);
  }
LABEL_86:
  if (SHIBYTE(v184[2]) >= 0) {
    size_t v41 = HIBYTE(v184[2]);
  }
  else {
    size_t v41 = (size_t)v184[1];
  }
  if (v41 == strlen(v141))
  {
    if (SHIBYTE(v184[2]) >= 0) {
      uint64_t v42 = v184;
    }
    else {
      uint64_t v42 = (std::string::value_type **)v184[0];
    }
    char v40 = 0;
    if (!memcmp(v42, v141, v41))
    {
      xpc_object_t v43 = (const char *)*MEMORY[0x1E4F4C2F8];
      goto LABEL_220;
    }
  }
  else
  {
    char v40 = 0;
  }
LABEL_96:
  memset(v157, 170, 24);
  xpc_object_t v44 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x1E4F4C7F8]);
  object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
  if (v44) {
    xpc_retain(v44);
  }
  else {
    object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)v157, (xpc *)object, (const object *)*MEMORY[0x1E4F4F928], v45);
  xpc_release(object[0].__r_.__value_.__l.__data_);
  if (!v142)
  {
    unint64_t v194 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v50 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v50 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v193 = v50;
    long long v192 = v50;
    *(_OWORD *)&v191[16] = v50;
    *(_OWORD *)unsigned int v191 = v50;
    long long v190 = v50;
    *(_OWORD *)&v189[32] = v50;
    *(_OWORD *)&v189[16] = v50;
    *(_OWORD *)size_t v189 = v50;
    *(_OWORD *)&v188[16] = v50;
    *(_OWORD *)xpc_object_t v188 = v50;
    *(_OWORD *)&object[3].__r_.__value_.__r.__words[1] = v50;
    *(_OWORD *)&object[2].__r_.__value_.__r.__words[2] = v50;
    *(_OWORD *)&object[2].__r_.__value_.__l.__data_ = v50;
    *(_OWORD *)&object[1].__r_.__value_.__r.__words[1] = v50;
    *(_OWORD *)&object[0].__r_.__value_.__r.__words[2] = v50;
    *(_OWORD *)&object[0].__r_.__value_.__l.__data_ = v50;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)object);
    char v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(object, (uint64_t)".*(", 3);
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_s = &__s;
    }
    else {
      p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    }
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __s.__r_.__value_.__l.__size_;
    }
    uint64_t v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)p_s, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)").*", 3);
    *(void *)&long long v55 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v55 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&__dst[32] = v55;
    *(_OWORD *)size_t v145 = v55;
    *(_OWORD *)long long __dst = v55;
    *(_OWORD *)&__dst[16] = v55;
    if ((v188[8] & 0x10) != 0)
    {
      std::string::size_type v58 = *(void *)v188;
      if (*(void *)v188 < object[2].__r_.__value_.__l.__size_)
      {
        *(void *)xpc_object_t v188 = object[2].__r_.__value_.__l.__size_;
        std::string::size_type v58 = object[2].__r_.__value_.__l.__size_;
      }
      std::string::pointer data = object[2].__r_.__value_.__l.__data_;
      size_t v56 = v58 - object[2].__r_.__value_.__r.__words[0];
      if (v58 - object[2].__r_.__value_.__r.__words[0] > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_142;
      }
    }
    else
    {
      if ((v188[8] & 8) == 0)
      {
        size_t v56 = 0;
        BYTE7(v149) = 0;
        xpc_object_t v57 = __p;
        goto LABEL_125;
      }
      std::string::pointer data = object[1].__r_.__value_.__l.__data_;
      size_t v56 = object[1].__r_.__value_.__r.__words[2] - object[1].__r_.__value_.__r.__words[0];
      if (object[1].__r_.__value_.__r.__words[2] - object[1].__r_.__value_.__r.__words[0] > 0x7FFFFFFFFFFFFFF7) {
LABEL_142:
      }
        std::string::__throw_length_error[abi:ne180100]();
    }
    if (v56 >= 0x17)
    {
      uint64_t v60 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v56 | 7) != 0x17) {
        uint64_t v60 = v56 | 7;
      }
      uint64_t v61 = v60 + 1;
      xpc_object_t v57 = operator new(v60 + 1);
      __p[1] = (xpc_object_t)v56;
      *(void *)&long long v149 = v61 | 0x8000000000000000;
      __p[0] = v57;
    }
    else
    {
      BYTE7(v149) = v56;
      xpc_object_t v57 = __p;
      if (!v56)
      {
LABEL_125:
        *((unsigned char *)v57 + v56) = 0;
        std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)__dst, (uint64_t)__p, 0);
        if (SBYTE7(v149) < 0) {
          operator delete(__p[0]);
        }
        uint64_t v163 = 0;
        v162 = 0;
        *(void *)v164 = 0;
        std::locale::locale(&v170, (const std::locale *)__dst);
        long long v171 = *(_OWORD *)&__dst[8];
        long long v172 = *(_OWORD *)&__dst[24];
        uint64_t v173 = *(void *)&__dst[40];
        v174 = (std::__shared_weak_count *)v145[0];
        if (v145[0]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)v145[0] + 1, 1uLL, memory_order_relaxed);
        }
        xpc_object_t v175 = v145[1];
        ctu::fs::get_filtered_files();
        char v139 = v40;
        unint64_t v140 = v2;
        uint64_t v62 = v174;
        if (v174 && !atomic_fetch_add(&v174->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
          std::locale::~locale(&v170);
          uint64_t v63 = (std::__shared_weak_count *)v162;
          uint64_t v64 = v163;
          if ((v157[23] & 0x80000000) == 0) {
            goto LABEL_132;
          }
        }
        else
        {
          std::locale::~locale(&v170);
          uint64_t v63 = (std::__shared_weak_count *)v162;
          uint64_t v64 = v163;
          if ((v157[23] & 0x80000000) == 0)
          {
LABEL_132:
            std::string v168 = *(std::string *)v157;
            goto LABEL_145;
          }
        }
        std::string::__init_copy_ctor_external(&v168, *(const std::string::value_type **)v157, *(std::string::size_type *)&v157[8]);
LABEL_145:
        uint64_t v169 = v143;
        if (v63 == v64)
        {
LABEL_199:
          size_t v93 = (void *)v168.__r_.__value_.__r.__words[0];
          int v94 = SHIBYTE(v168.__r_.__value_.__r.__words[2]);
          memset(&v168, 0, sizeof(v168));
          if (v94 < 0)
          {
            operator delete(v93);
            if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v168.__r_.__value_.__l.__data_);
            }
          }
          uint64_t v95 = (std::__shared_weak_count *)v162;
          uint64_t v2 = v140;
          if (v162)
          {
            unint64_t v96 = v163;
            xpc_object_t v97 = v162;
            if (v163 != v162)
            {
              do
              {
                if (SHIBYTE(v96[-1].__shared_weak_owners_) < 0) {
                  operator delete(v96[-1].__vftable);
                }
                --v96;
              }
              while (v96 != v95);
              xpc_object_t v97 = v162;
            }
            uint64_t v163 = v95;
            operator delete(v97);
          }
          xpc_object_t v98 = (std::__shared_weak_count *)v145[0];
          if (v145[0] && !atomic_fetch_add((atomic_ullong *volatile)v145[0] + 1, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
            std::__shared_weak_count::__release_weak(v98);
          }
          std::locale::~locale((std::locale *)__dst);
          object[0].__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA418];
          *(std::string::size_type *)((char *)object[0].__r_.__value_.__r.__words
                                    + *(void *)(object[0].__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
          object[0].__r_.__value_.__l.__size_ = MEMORY[0x1E4FBA470] + 16;
          if (SHIBYTE(object[3].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(object[3].__r_.__value_.__l.__data_);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x1C8795140](&v188[16]);
          char v40 = v139;
          goto LABEL_216;
        }
        while (1)
        {
          uint64_t v65 = v169;
          int v66 = SHIBYTE(v168.__r_.__value_.__r.__words[2]);
          if ((v168.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v67 = HIBYTE(v168.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v67 = v168.__r_.__value_.__l.__size_;
          }
          unint64_t v68 = v67 + 1;
          memset(v155, 170, 24);
          if (v67 + 1 > 0x7FFFFFFFFFFFFFF7) {
LABEL_333:
          }
            std::string::__throw_length_error[abi:ne180100]();
          if (v68 >= 0x17)
          {
            uint64_t v70 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v68 | 7) != 0x17) {
              uint64_t v70 = v68 | 7;
            }
            uint64_t v71 = v70 + 1;
            xpc_object_t v69 = operator new(v70 + 1);
            *(void *)&v155[16] = v71 | 0x8000000000000000;
            *(void *)uint64_t v155 = v69;
            *(void *)&v155[8] = v67 + 1;
            size_t v27 = (void *)v143;
          }
          else
          {
            memset(v155, 0, 24);
            xpc_object_t v69 = v155;
            v155[23] = v67 + 1;
            if (!v67) {
              goto LABEL_163;
            }
          }
          if (v66 >= 0) {
            int64_t v72 = &v168;
          }
          else {
            int64_t v72 = (std::string *)v168.__r_.__value_.__r.__words[0];
          }
          memmove(v69, v72, v67);
LABEL_163:
          *(_WORD *)&v69[v67] = 47;
          int shared_weak_owners_high = SHIBYTE(v63->__shared_weak_owners_);
          if (shared_weak_owners_high >= 0) {
            uint64_t v74 = (const std::string::value_type *)v63;
          }
          else {
            uint64_t v74 = (const std::string::value_type *)v63->__vftable;
          }
          if (shared_weak_owners_high >= 0) {
            std::string::size_type shared_owners = HIBYTE(v63->__shared_weak_owners_);
          }
          else {
            std::string::size_type shared_owners = v63->__shared_owners_;
          }
          dispatch_object_t v76 = std::string::append((std::string *)v155, v74, shared_owners);
          long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
          *(void *)&long long v149 = *((void *)&v76->__r_.__value_.__l + 2);
          *(_OWORD *)std::string __p = v77;
          v76->__r_.__value_.__l.__size_ = 0;
          v76->__r_.__value_.__r.__words[2] = 0;
          v76->__r_.__value_.__r.__words[0] = 0;
          int v78 = ctu::fs::remove_dir();
          if (SBYTE7(v149) < 0)
          {
            operator delete(__p[0]);
            if ((v155[23] & 0x80000000) != 0)
            {
LABEL_174:
              operator delete(*(void **)v155);
              int v79 = *(NSObject **)(v65 + 88);
              if (!os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_148;
              }
              goto LABEL_175;
            }
          }
          else if ((v155[23] & 0x80000000) != 0)
          {
            goto LABEL_174;
          }
          int v79 = *(NSObject **)(v65 + 88);
          if (!os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_148;
          }
LABEL_175:
          int v80 = SHIBYTE(v168.__r_.__value_.__r.__words[2]);
          if ((v168.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v81 = HIBYTE(v168.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v81 = v168.__r_.__value_.__l.__size_;
          }
          unint64_t v82 = v81 + 1;
          memset(v155, 170, 24);
          if (v81 + 1 > 0x7FFFFFFFFFFFFFF7) {
            goto LABEL_333;
          }
          if (v82 >= 0x17)
          {
            uint64_t v84 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v82 | 7) != 0x17) {
              uint64_t v84 = v82 | 7;
            }
            uint64_t v85 = v84 + 1;
            uint64_t v83 = operator new(v84 + 1);
            *(void *)&v155[16] = v85 | 0x8000000000000000;
            *(void *)uint64_t v155 = v83;
            *(void *)&v155[8] = v81 + 1;
          }
          else
          {
            memset(v155, 0, 24);
            uint64_t v83 = v155;
            v155[23] = v81 + 1;
            if (!v81) {
              goto LABEL_189;
            }
          }
          if (v80 >= 0) {
            xpc_object_t v86 = &v168;
          }
          else {
            xpc_object_t v86 = (std::string *)v168.__r_.__value_.__r.__words[0];
          }
          memmove(v83, v86, v81);
LABEL_189:
          *(_WORD *)&v83[v81] = 47;
          if (v63->__shared_weak_owners_ >= 0) {
            xpc_object_t v87 = (const char *)v63;
          }
          else {
            xpc_object_t v87 = (const char *)v63->__vftable;
          }
          size_t v88 = strlen(v87);
          uint64_t v89 = std::string::append((std::string *)v155, v87, v88);
          long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
          *(void *)&long long v149 = *((void *)&v89->__r_.__value_.__l + 2);
          *(_OWORD *)std::string __p = v90;
          v89->__r_.__value_.__l.__size_ = 0;
          v89->__r_.__value_.__r.__words[2] = 0;
          v89->__r_.__value_.__r.__words[0] = 0;
          size_t v91 = "Failed";
          if (v78) {
            size_t v91 = "Succeeded";
          }
          size_t v92 = __p;
          if (SBYTE7(v149) < 0) {
            size_t v92 = (xpc_object_t *)__p[0];
          }
          *(_DWORD *)std::string buf = 136315394;
          xpc_object_t v196 = v91;
          __int16 v197 = 2080;
          unsigned int v198 = v92;
          _os_log_impl(&dword_1C59C6000, v79, OS_LOG_TYPE_DEFAULT, "#I %s to remove path: %s", buf, 0x16u);
          size_t v27 = (void *)v143;
          if (SBYTE7(v149) < 0)
          {
            operator delete(__p[0]);
            if ((v155[23] & 0x80000000) != 0) {
              goto LABEL_198;
            }
          }
          else if ((v155[23] & 0x80000000) != 0)
          {
LABEL_198:
            operator delete(*(void **)v155);
          }
LABEL_148:
          if (++v63 == v64) {
            goto LABEL_199;
          }
        }
      }
    }
    memmove(v57, data, v56);
    goto LABEL_125;
  }
  int v46 = ctu::fs::remove_dir();
  unint64_t v47 = *(NSObject **)(v143 + 88);
  if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v48 = "Failed";
    if (v46) {
      unint64_t v48 = "Succeeded";
    }
    xpc_object_t v49 = v157;
    if (v157[23] < 0) {
      xpc_object_t v49 = *(unsigned char **)v157;
    }
    LODWORD(object[0].__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)object[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v48;
    WORD2(object[0].__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&object[0].__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v49;
    _os_log_impl(&dword_1C59C6000, v47, OS_LOG_TYPE_DEFAULT, "#I %s to remove dump path: %s", (uint8_t *)object, 0x16u);
  }
LABEL_216:
  xpc_object_t v99 = xpc_int64_create(0);
  if (!v99) {
    xpc_object_t v99 = xpc_null_create();
  }
  xpc_object_t v43 = (const char *)*MEMORY[0x1E4F4C2F8];
  xpc_dictionary_set_value(*v2, (const char *)*MEMORY[0x1E4F4C2F8], v99);
  xpc_object_t v100 = xpc_null_create();
  xpc_release(v99);
  xpc_release(v100);
  if ((v157[23] & 0x80000000) != 0) {
    operator delete(*(void **)v157);
  }
LABEL_220:
  xpc_object_t v101 = xpc_dictionary_get_value(*v2, v43);
  object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v101;
  if (v101) {
    xpc_retain(v101);
  }
  else {
    object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  int v102 = xpc::dyn_cast_or_default((xpc *)object, 0);
  char v103 = v40;
  int v104 = v2;
  xpc_release(object[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v184[2]) >= 0) {
    size_t v105 = HIBYTE(v184[2]);
  }
  else {
    size_t v105 = (size_t)v184[1];
  }
  if (v105 == strlen(v141))
  {
    xpc_object_t v106 = SHIBYTE(v184[2]) >= 0 ? v184 : (std::string::value_type **)v184[0];
    if (!memcmp(v106, v141, v105) && v102 != 2)
    {
      xpc_object_t v107 = v27[26];
      dispatch_object_t v167 = v107;
      if (v107)
      {
        dispatch_retain(v107);
        dispatch_group_enter(v107);
      }
      xpc_object_t v108 = *v104;
      xpc_object_t v166 = v108;
      if (v108)
      {
        xpc_retain(v108);
      }
      else
      {
        xpc_object_t v108 = xpc_null_create();
        xpc_object_t v166 = v108;
      }
      int v186 = 0;
      LogTracker::systemLog_sync((uint64_t)v27, &v167, &v166, v185);
      if (v186 == v185)
      {
        (*(void (**)(void *))(v185[0] + 32))(v185);
      }
      else if (v186)
      {
        (*(void (**)(void))(*v186 + 40))();
      }
      xpc_release(v108);
      xpc_object_t v166 = 0;
      if (v107)
      {
        dispatch_group_leave(v107);
        dispatch_release(v107);
      }
    }
  }
  unint64_t v109 = (std::__shared_weak_count *)v27[16];
  if (!v109 || (uint64_t v110 = (void *)v27[15], (v111 = std::__shared_weak_count::lock(v109)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v112 = v111;
  p_shared_weak_owners = &v111->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v111->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v111->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
    std::__shared_weak_count::__release_weak(v112);
  }
  v165.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v114 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v114 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v164[16] = v114;
  *(_OWORD *)&v165.__r_.__value_.__l.__data_ = v114;
  *(_OWORD *)v164 = v114;
  v162 = v110;
  uint64_t v163 = v112;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  *(void *)v164 = v27;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)&v164[8], __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)&v164[8] = __s;
  }
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v165, v181.__r_.__value_.__l.__data_, v181.__r_.__value_.__l.__size_);
  }
  else {
    std::string v165 = v181;
  }
  *(void *)&long long v115 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v115 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)uint64_t v161 = v115;
  *(_OWORD *)&v161[16] = v115;
  long long v159 = v115;
  long long v160 = v115;
  *(_OWORD *)&v157[16] = v115;
  long long v158 = v115;
  *(void *)uint64_t v157 = v110;
  *(void *)&v157[8] = v112;
  atomic_fetch_add_explicit(&v112->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)&v157[16] = v27;
  v157[24] = v103;
  *(_DWORD *)&v157[28] = v102;
  xpc_object_t v116 = *v104;
  *(void *)&long long v158 = v116;
  if (v116)
  {
    xpc_retain(v116);
    xpc_object_t v117 = v163;
    *((void *)&v158 + 1) = v162;
    *(void *)&long long v159 = v163;
    if (!v163) {
      goto LABEL_256;
    }
    goto LABEL_255;
  }
  *(void *)&long long v158 = xpc_null_create();
  xpc_object_t v117 = v163;
  *((void *)&v158 + 1) = v162;
  *(void *)&long long v159 = v163;
  if (v163) {
LABEL_255:
  }
    atomic_fetch_add_explicit(&v117->__shared_weak_owners_, 1uLL, memory_order_relaxed);
LABEL_256:
  *((void *)&v159 + 1) = *(void *)v164;
  if ((v164[31] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v160, *(const std::string::value_type **)&v164[8], *(std::string::size_type *)&v164[16]);
  }
  else
  {
    long long v160 = *(_OWORD *)&v164[8];
    *(void *)uint64_t v161 = *(void *)&v164[24];
  }
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)&v161[8], v165.__r_.__value_.__l.__data_, v165.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)&v161[8] = v165;
  }
  *(void *)&long long v118 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v118 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v156[5] = v118;
  v156[6] = v118;
  v156[3] = v118;
  v156[4] = v118;
  v156[1] = v118;
  v156[2] = v118;
  *(_OWORD *)&v155[16] = v118;
  v156[0] = v118;
  *(void *)uint64_t v155 = v110;
  *(void *)&v155[8] = v112;
  atomic_fetch_add_explicit(&v112->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v119 = *v104;
  *(void *)&v155[16] = v27;
  *(void *)&v155[24] = v119;
  if (v119) {
    xpc_retain(v119);
  }
  else {
    *(void *)&v155[24] = xpc_null_create();
  }
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::$_2((uint64_t)v156, (uint64_t)v157);
  *(void *)&long long v120 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v120 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v154[5] = v120;
  v154[6] = v120;
  v154[3] = v120;
  v154[4] = v120;
  v154[1] = v120;
  v154[2] = v120;
  long long v153 = v120;
  v154[0] = v120;
  *(_OWORD *)v151 = v120;
  long long v152 = v120;
  long long v149 = v120;
  *(_OWORD *)unint64_t v150 = v120;
  __p[0] = v110;
  __p[1] = v112;
  atomic_fetch_add_explicit(&v112->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)&long long v149 = v27;
  DWORD2(v149) = v142;
  BYTE12(v149) = v103;
  if (SHIBYTE(v184[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v150, v184[0], (std::string::size_type)v184[1]);
  }
  else
  {
    *(_OWORD *)unint64_t v150 = *(_OWORD *)v184;
    v151[0] = v184[2];
  }
  xpc_object_t v121 = *v104;
  v151[1] = v121;
  if (v121)
  {
    xpc_retain(v121);
    uint64_t v122 = *(void *)&v155[8];
    long long v152 = *(_OWORD *)v155;
    if (!*(void *)&v155[8]) {
      goto LABEL_273;
    }
    goto LABEL_272;
  }
  v151[1] = xpc_null_create();
  uint64_t v122 = *(void *)&v155[8];
  long long v152 = *(_OWORD *)v155;
  if (*(void *)&v155[8]) {
LABEL_272:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v122 + 16), 1uLL, memory_order_relaxed);
LABEL_273:
  long long v153 = *(_OWORD *)&v155[16];
  if (*(void *)&v155[24]) {
    xpc_retain(*(xpc_object_t *)&v155[24]);
  }
  else {
    *((void *)&v153 + 1) = xpc_null_create();
  }
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::$_2((uint64_t)v154, (uint64_t)v156);
  *(void *)&long long v123 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v123 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v147[7] = v123;
  v147[8] = v123;
  v147[5] = v123;
  v147[6] = v123;
  v147[3] = v123;
  v147[4] = v123;
  v147[1] = v123;
  v147[2] = v123;
  *(_OWORD *)unint64_t v146 = v123;
  v147[0] = v123;
  *(_OWORD *)&__dst[32] = v123;
  *(_OWORD *)size_t v145 = v123;
  *(_OWORD *)&__dst[16] = v123;
  xpc_object_t v124 = *v104;
  *(void *)long long __dst = v27;
  *(void *)&__dst[8] = v124;
  if (v124) {
    xpc_retain(v124);
  }
  else {
    *(void *)&__dst[8] = xpc_null_create();
  }
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4((uint64_t)&__dst[16], (uint64_t)__p);
  *(void *)&long long v193 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v125 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v125 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v192 = v125;
  *(_OWORD *)&v191[16] = v125;
  *(_OWORD *)unsigned int v191 = v125;
  long long v190 = v125;
  *(_OWORD *)&v189[32] = v125;
  *(_OWORD *)&v189[16] = v125;
  *(_OWORD *)size_t v189 = v125;
  *(_OWORD *)&v188[16] = v125;
  *(_OWORD *)xpc_object_t v188 = v125;
  *(_OWORD *)&object[3].__r_.__value_.__r.__words[1] = v125;
  *(_OWORD *)&object[2].__r_.__value_.__r.__words[2] = v125;
  *(_OWORD *)&object[2].__r_.__value_.__l.__data_ = v125;
  *(_OWORD *)&object[1].__r_.__value_.__r.__words[1] = v125;
  *(_OWORD *)&object[0].__r_.__value_.__r.__words[2] = v125;
  object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v110;
  object[0].__r_.__value_.__l.__size_ = (std::string::size_type)v112;
  atomic_fetch_add_explicit(&v112->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  object[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v27;
  *(_OWORD *)&object[1].__r_.__value_.__l.__data_ = *(_OWORD *)__dst;
  if (*(void *)&__dst[8]) {
    xpc_retain(*(xpc_object_t *)&__dst[8]);
  }
  else {
    object[1].__r_.__value_.__l.__size_ = (std::string::size_type)xpc_null_create();
  }
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4((uint64_t)&object[1].__r_.__value_.__r.__words[2], (uint64_t)&__dst[16]);
  int v126 = v27[26];
  uint64_t v127 = v27[17];
  uint64_t v128 = (char *)operator new(0xF8uLL);
  long long v129 = *(_OWORD *)&object[0].__r_.__value_.__l.__data_;
  long long v130 = *(_OWORD *)&object[0].__r_.__value_.__r.__words[2];
  *(_OWORD *)&object[0].__r_.__value_.__l.__data_ = 0uLL;
  *(_OWORD *)uint64_t v128 = v129;
  *((_OWORD *)v128 + 1) = v130;
  size_t v131 = (void *)object[1].__r_.__value_.__l.__size_;
  *((void *)v128 + 4) = object[1].__r_.__value_.__l.__size_;
  if (v131) {
    xpc_retain(v131);
  }
  else {
    *((void *)v128 + 4) = xpc_null_create();
  }
  *(_OWORD *)(v128 + 40) = *(_OWORD *)&object[1].__r_.__value_.__r.__words[2];
  object[1].__r_.__value_.__r.__words[2] = 0;
  object[2].__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v132 = object[3].__r_.__value_.__r.__words[2];
  *((void *)v128 + 7) = object[2].__r_.__value_.__l.__size_;
  *(void *)(v128 + 61) = *(std::string::size_type *)((char *)&object[2].__r_.__value_.__r.__words[1] + 5);
  *(_OWORD *)(v128 + 72) = *(_OWORD *)&object[3].__r_.__value_.__l.__data_;
  memset(&object[3], 0, sizeof(std::string));
  int v133 = *(void **)v188;
  *((void *)v128 + 11) = v132;
  *((void *)v128 + 12) = v133;
  if (v133) {
    xpc_retain(v133);
  }
  else {
    *((void *)v128 + 12) = xpc_null_create();
  }
  *(_OWORD *)(v128 + 104) = *(_OWORD *)&v188[8];
  *(void *)&v188[16] = 0;
  *(void *)&v188[8] = 0;
  unint64_t v134 = *(void **)v189;
  *((void *)v128 + 15) = *(void *)&v188[24];
  *((void *)v128 + 16) = v134;
  if (v134) {
    xpc_retain(v134);
  }
  else {
    *((void *)v128 + 16) = xpc_null_create();
  }
  *(_OWORD *)(v128 + 136) = *(_OWORD *)&v189[8];
  *(void *)&v189[16] = 0;
  *(void *)&v189[8] = 0;
  *(_OWORD *)(v128 + 152) = *(_OWORD *)&v189[24];
  xpc_object_t v135 = *(void **)&v189[40];
  *((void *)v128 + 21) = *(void *)&v189[40];
  if (v135) {
    xpc_retain(v135);
  }
  else {
    *((void *)v128 + 21) = xpc_null_create();
  }
  uint64_t v136 = *(void *)&v191[24];
  *((void *)v128 + 24) = *(void *)v191;
  *((_OWORD *)v128 + 11) = v190;
  long long v190 = 0uLL;
  *(_OWORD *)(v128 + 200) = *(_OWORD *)&v191[8];
  *((void *)v128 + 27) = v136;
  *(void *)&v191[16] = 0;
  *(void *)&v191[8] = 0;
  *((_OWORD *)v128 + 14) = v192;
  *((void *)v128 + 30) = v193;
  *(void *)&v191[24] = 0;
  long long v192 = 0uLL;
  *(void *)&long long v193 = 0;
  dispatch_group_notify_f(v126, v127, v128, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6::~$_6((uint64_t)object);
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)v147);
  xpc_release(v146[1]);
  v146[1] = 0;
  if (SHIBYTE(v146[0]) < 0) {
    operator delete(v145[0]);
  }
  if (*(void *)&__dst[24]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&__dst[24]);
  }
  xpc_release(*(xpc_object_t *)&__dst[8]);
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)&v152);
  xpc_release(v151[1]);
  v151[1] = 0;
  if (SHIBYTE(v151[0]) < 0) {
    operator delete(v150[0]);
  }
  if (__p[1]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p[1]);
  }
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)v155);
  if ((v161[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v161[8]);
    if ((v161[7] & 0x80000000) == 0)
    {
LABEL_306:
      xpc_object_t v137 = (std::__shared_weak_count *)v159;
      if (!(void)v159) {
        goto LABEL_308;
      }
      goto LABEL_307;
    }
  }
  else if ((v161[7] & 0x80000000) == 0)
  {
    goto LABEL_306;
  }
  operator delete((void *)v160);
  xpc_object_t v137 = (std::__shared_weak_count *)v159;
  if ((void)v159) {
LABEL_307:
  }
    std::__shared_weak_count::__release_weak(v137);
LABEL_308:
  xpc_release((xpc_object_t)v158);
  *(void *)&long long v158 = 0;
  if (*(void *)&v157[8]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v157[8]);
  }
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v165.__r_.__value_.__l.__data_);
    if ((v164[31] & 0x80000000) == 0)
    {
LABEL_312:
      unint64_t v138 = v163;
      if (!v163) {
        goto LABEL_314;
      }
      goto LABEL_313;
    }
  }
  else if ((v164[31] & 0x80000000) == 0)
  {
    goto LABEL_312;
  }
  operator delete(*(void **)&v164[8]);
  unint64_t v138 = v163;
  if (v163) {
LABEL_313:
  }
    std::__shared_weak_count::__release_weak(v138);
LABEL_314:
  std::__shared_weak_count::__release_weak(v112);
  if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v179.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_316:
      if ((SHIBYTE(v181.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_317;
      }
      goto LABEL_329;
    }
  }
  else if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_316;
  }
  operator delete(__s.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v181.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_317:
    if ((SHIBYTE(v182[2]) & 0x80000000) == 0) {
      goto LABEL_318;
    }
    goto LABEL_330;
  }
LABEL_329:
  operator delete(v181.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v182[2]) & 0x80000000) == 0)
  {
LABEL_318:
    if ((SHIBYTE(v183[2]) & 0x80000000) == 0) {
      goto LABEL_319;
    }
    goto LABEL_331;
  }
LABEL_330:
  operator delete(v182[0]);
  if ((SHIBYTE(v183[2]) & 0x80000000) == 0)
  {
LABEL_319:
    if ((SHIBYTE(v184[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_332:
    operator delete(v184[0]);
    return;
  }
LABEL_331:
  operator delete(v183[0]);
  if (SHIBYTE(v184[2]) < 0) {
    goto LABEL_332;
  }
}

void sub_1C5B691C4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1C5B69718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a50 < 0)
  {
    operator delete(__p);
    if (SLOBYTE(STACK[0x20F]) < 0)
    {
LABEL_5:
      operator delete(a73);
      if ((SLOBYTE(STACK[0x367]) & 0x80000000) == 0) {
        JUMPOUT(0x1C5B69688);
      }
      JUMPOUT(0x1C5B69680);
    }
  }
  else if (SLOBYTE(STACK[0x20F]) < 0)
  {
    goto LABEL_5;
  }
  JUMPOUT(0x1C5B69678);
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::$_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  xpc_object_t v5 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v5;
  if (v5)
  {
    xpc_retain(v5);
    uint64_t v6 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = v6;
    if (!v6) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  *(void *)(a1 + 32) = xpc_null_create();
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  if (v6) {
LABEL_5:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
LABEL_6:
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 64), *(const std::string::value_type **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v7;
  }
  xpc_object_t v8 = (std::string *)(a1 + 88);
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 88), *(void *)(a2 + 96));
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  return a1;
}

void sub_1C5B69868(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 48);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  xpc_release(*(xpc_object_t *)(v1 + 32));
  *(void *)(v1 + 32) = 0;
  xpc_object_t v5 = *(std::__shared_weak_count **)(v1 + 8);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 21) = *(void *)(a2 + 21);
  *(void *)(a1 + 16) = v5;
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v6;
  }
  long long v7 = *(void **)(a2 + 56);
  *(void *)(a1 + 56) = v7;
  if (v7)
  {
    xpc_retain(v7);
    uint64_t v8 = *(void *)(a2 + 72);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = v8;
    if (!v8) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  *(void *)(a1 + 56) = xpc_null_create();
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  if (v8) {
LABEL_8:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
LABEL_9:
  long long v9 = *(void **)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v9;
  if (v9) {
    xpc_retain(v9);
  }
  else {
    *(void *)(a1 + 88) = xpc_null_create();
  }
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::$_2(a1 + 96, a2 + 96);
  return a1;
}

void sub_1C5B699A8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (!v3) {
    _Unwind_Resume(exception_object);
  }
  std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6::~$_6(uint64_t a1)
{
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(a1 + 104);
  xpc_release(*(xpc_object_t *)(a1 + 96));
  *(void *)(a1 + 96) = 0;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  xpc_release(*(xpc_object_t *)(a1 + 32));
  *(void *)(a1 + 32) = 0;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5::~$_5(uint64_t a1)
{
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(a1 + 80);
  xpc_release(*(xpc_object_t *)(a1 + 72));
  *(void *)(a1 + 72) = 0;
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  xpc_release(*(xpc_object_t *)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  return a1;
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::~$_4(uint64_t a1)
{
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(a1 + 64);
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(void *)(a1 + 56) = 0;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    if ((*(char *)(a1 + 119) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
      if (!v2) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 96));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
LABEL_4:
  }
    std::__shared_weak_count::__release_weak(v2);
LABEL_5:
  xpc_release(*(xpc_object_t *)(a1 + 64));
  *(void *)(a1 + 64) = 0;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  xpc_release(*(xpc_object_t *)(a1 + 24));
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::~$_2(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0)
  {
    operator delete(*(void **)(a1 + 88));
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
      if (!v2) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 64));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
LABEL_4:
  }
    std::__shared_weak_count::__release_weak(v2);
LABEL_5:
  xpc_release(*(xpc_object_t *)(a1 + 32));
  *(void *)(a1 + 32) = 0;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_1::~$_1(uint64_t a1)
{
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    operator delete(*(void **)(a1 + 24));
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v2) {
      return a1;
    }
    goto LABEL_4;
  }
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
LABEL_4:
  }
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

uint64_t LogTracker::markPurgeable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  unint64_t v78 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v77[7] = v6;
  v77[8] = v6;
  v77[5] = v6;
  v77[6] = v6;
  void v77[3] = v6;
  v77[4] = v6;
  v77[1] = v6;
  v77[2] = v6;
  long long v76 = v6;
  v77[0] = v6;
  *(_OWORD *)uint64_t v74 = v6;
  long long v75 = v6;
  long long v72 = v6;
  long long v73 = v6;
  long long v70 = v6;
  long long v71 = v6;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v70);
  long long v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v70, (uint64_t)".*(", 3);
  int v8 = *(char *)(a3 + 23);
  if (v8 >= 0) {
    uint64_t v9 = a3;
  }
  else {
    uint64_t v9 = *(void *)a3;
  }
  if (v8 >= 0) {
    uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v10 = *(void *)(a3 + 8);
  }
  xpc_object_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)").*", 3);
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v68[32] = v12;
  long long v69 = v12;
  *(_OWORD *)unint64_t v68 = v12;
  *(_OWORD *)&v68[16] = v12;
  if ((BYTE8(v76) & 0x10) != 0)
  {
    uint64_t v15 = v76;
    if ((unint64_t)v76 < *((void *)&v73 + 1))
    {
      *(void *)&long long v76 = *((void *)&v73 + 1);
      uint64_t v15 = *((void *)&v73 + 1);
    }
    xpc_object_t v16 = (const void *)v73;
    __darwin_ino64_t v13 = v15 - v73;
    if ((unint64_t)(v15 - v73) > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_29;
    }
  }
  else
  {
    if ((BYTE8(v76) & 8) == 0)
    {
      __darwin_ino64_t v13 = 0;
      HIBYTE(__dst.st_gid) = 0;
      p_dst = &__dst;
      goto LABEL_20;
    }
    xpc_object_t v16 = (const void *)*((void *)&v71 + 1);
    __darwin_ino64_t v13 = *((void *)&v72 + 1) - *((void *)&v71 + 1);
    if (*((void *)&v72 + 1) - *((void *)&v71 + 1) > 0x7FFFFFFFFFFFFFF7uLL) {
LABEL_29:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v13 >= 0x17)
  {
    uint64_t v17 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v17 = v13 | 7;
    }
    uint64_t v18 = v17 + 1;
    p_dst = (stat *)operator new(v17 + 1);
    *(void *)&__dst.st_uid = v18 | 0x8000000000000000;
    *(void *)&__dst.st_dev = p_dst;
    __dst.st_ino = v13;
    goto LABEL_19;
  }
  HIBYTE(__dst.st_gid) = v13;
  p_dst = &__dst;
  if (v13) {
LABEL_19:
  }
    memmove(p_dst, v16, v13);
LABEL_20:
  *((unsigned char *)&p_dst->st_dev + v13) = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v68, (uint64_t)&__dst, 0);
  if (SHIBYTE(__dst.st_gid) < 0) {
    operator delete(*(void **)&__dst.st_dev);
  }
  uint64_t v65 = 0;
  int v66 = 0;
  uint64_t v67 = 0;
  std::locale::locale(&v59, (const std::locale *)v68);
  long long v60 = *(_OWORD *)&v68[8];
  long long v61 = *(_OWORD *)&v68[24];
  uint64_t v62 = *(void *)&v68[40];
  uint64_t v63 = (std::__shared_weak_count *)v69;
  if ((void)v69) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v69 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v64 = *((void *)&v69 + 1);
  ctu::fs::get_filtered_files();
  long long v19 = v63;
  if (v63 && !atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    std::locale::~locale(&v59);
    unint64_t v20 = (void **)v65;
    xpc_object_t v21 = v66;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
      goto LABEL_27;
    }
  }
  else
  {
    std::locale::~locale(&v59);
    unint64_t v20 = (void **)v65;
    xpc_object_t v21 = v66;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_27:
      std::string v57 = *(std::string *)a2;
      goto LABEL_32;
    }
  }
  std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
LABEL_32:
  uint64_t v58 = a1;
  while (v20 != v21)
  {
    uint64_t v23 = v58;
    xpc_object_t v24 = (void *)*((unsigned __int8 *)v20 + 23);
    int v25 = (char)v24;
    if ((char)v24 < 0) {
      xpc_object_t v24 = v20[1];
    }
    if (v24 == (void *)2)
    {
      if (v25 >= 0) {
        size_t v27 = v20;
      }
      else {
        size_t v27 = *v20;
      }
      if (*v27 == 11822) {
        goto LABEL_38;
      }
    }
    else if (v24 == (void *)1)
    {
      uint64_t v26 = v25 >= 0 ? v20 : (void **)*v20;
      if (*(unsigned char *)v26 == 46) {
        goto LABEL_38;
      }
    }
    memset(&__sz, 170, sizeof(__sz));
    int v28 = SHIBYTE(v57.__r_.__value_.__r.__words[2]);
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v57.__r_.__value_.__l.__size_;
    }
    unint64_t v30 = size + 1;
    memset(&__dst, 170, 24);
    if (size + 1 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v30 >= 0x17)
    {
      uint64_t v32 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17) {
        uint64_t v32 = v30 | 7;
      }
      uint64_t v33 = v32 + 1;
      long long v31 = (stat *)operator new(v32 + 1);
      *(void *)&__dst.st_uid = v33 | 0x8000000000000000;
      *(void *)&__dst.st_dev = v31;
      __dst.st_ino = size + 1;
    }
    else
    {
      memset(&__dst, 0, 24);
      long long v31 = &__dst;
      HIBYTE(__dst.st_gid) = size + 1;
      if (!size) {
        goto LABEL_66;
      }
    }
    if (v28 >= 0) {
      xpc_object_t v34 = &v57;
    }
    else {
      xpc_object_t v34 = (std::string *)v57.__r_.__value_.__r.__words[0];
    }
    memmove(v31, v34, size);
LABEL_66:
    *(_WORD *)((char *)&v31->st_dev + size) = 47;
    int v35 = *((char *)v20 + 23);
    if (v35 >= 0) {
      BOOL v36 = (const std::string::value_type *)v20;
    }
    else {
      BOOL v36 = (const std::string::value_type *)*v20;
    }
    if (v35 >= 0) {
      std::string::size_type v37 = *((unsigned __int8 *)v20 + 23);
    }
    else {
      std::string::size_type v37 = (std::string::size_type)v20[1];
    }
    xpc_object_t v38 = std::string::append((std::string *)&__dst, v36, v37);
    long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    __sz.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__sz.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.st_gid) < 0) {
      operator delete(*(void **)&__dst.st_dev);
    }
    v40.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v40.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&__dst.st_blksize_t size = v40;
    *(timespec *)__dst.st_qspare = v40;
    __dst.st_birthtimespec = v40;
    *(timespec *)&__dst.st_size_t size = v40;
    __dst.st_mtimespec = v40;
    __dst.st_ctimespec = v40;
    *(timespec *)&__dst.st_uid = v40;
    __dst.st_atimespec = v40;
    *(timespec *)&__dst.st_dev = v40;
    if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_sz = &__sz;
    }
    else {
      p_sz = (std::string *)__sz.__r_.__value_.__r.__words[0];
    }
    if (!stat((const char *)p_sz, &__dst))
    {
      uint64_t v42 = (__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__sz
          : (std::string *)__sz.__r_.__value_.__r.__words[0];
      xpc_object_t v43 = opendir((const char *)v42);
      xpc_object_t v44 = v43;
      if (v43)
      {
        uint64_t v45 = readdir(v43);
        closedir(v44);
        if (v45)
        {
          if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__dst, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)&__dst.st_dev = *(_OWORD *)&__sz.__r_.__value_.__l.__data_;
            *(void *)&__dst.st_uid = *((void *)&__sz.__r_.__value_.__l + 2);
          }
          char v81 = 2;
          strcpy((char *)__p, ".*");
          LogTracker::markPurgeable(v23, &__dst, __p);
          if (v81 < 0)
          {
            operator delete(__p[0]);
            if ((SHIBYTE(__dst.st_gid) & 0x80000000) == 0) {
              goto LABEL_78;
            }
          }
          else if ((SHIBYTE(__dst.st_gid) & 0x80000000) == 0)
          {
            goto LABEL_78;
          }
          operator delete(*(void **)&__dst.st_dev);
        }
      }
    }
LABEL_78:
    if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v79, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
    }
    else {
      std::string v79 = __sz;
    }
    BOOL v46 = util::markPurgeableFile((uint64_t *)&v79);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v79.__r_.__value_.__l.__data_);
      unint64_t v47 = *(NSObject **)(v23 + 88);
      unint64_t v48 = v47;
      if (v46)
      {
LABEL_90:
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
        {
          if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v22 = &__sz;
          }
          else {
            size_t v22 = (std::string *)__sz.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)std::string buf = 136315138;
          uint64_t v85 = v22;
          _os_log_impl(&dword_1C59C6000, v47, OS_LOG_TYPE_DEFAULT, "#I %s is marked to be purgeable", buf, 0xCu);
          if ((SHIBYTE(__sz.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_38;
          }
          goto LABEL_95;
        }
        goto LABEL_94;
      }
    }
    else
    {
      unint64_t v47 = *(NSObject **)(v23 + 88);
      unint64_t v48 = v47;
      if (v46) {
        goto LABEL_90;
      }
    }
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        xpc_object_t v49 = &__sz;
      }
      else {
        xpc_object_t v49 = (std::string *)__sz.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v85 = v49;
      _os_log_error_impl(&dword_1C59C6000, v47, OS_LOG_TYPE_ERROR, "Failed to mark %s to be purgeable", buf, 0xCu);
      if ((SHIBYTE(__sz.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_38;
      }
LABEL_95:
      operator delete(__sz.__r_.__value_.__l.__data_);
      goto LABEL_38;
    }
LABEL_94:
    if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_95;
    }
LABEL_38:
    v20 += 3;
  }
  long long v50 = (void *)v57.__r_.__value_.__r.__words[0];
  int v51 = SHIBYTE(v57.__r_.__value_.__r.__words[2]);
  memset(&v57, 0, sizeof(v57));
  if (v51 < 0)
  {
    operator delete(v50);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
  }
  xpc_object_t v52 = (void **)v65;
  if (v65)
  {
    xpc_object_t v53 = v66;
    uint64_t v54 = v65;
    if (v66 != v65)
    {
      do
      {
        if (*((char *)v53 - 1) < 0) {
          operator delete(*(v53 - 3));
        }
        v53 -= 3;
      }
      while (v53 != v52);
      uint64_t v54 = v65;
    }
    int v66 = v52;
    operator delete(v54);
  }
  long long v55 = (std::__shared_weak_count *)v69;
  if ((void)v69 && !atomic_fetch_add((atomic_ullong *volatile)(v69 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
  }
  std::locale::~locale((std::locale *)v68);
  *(void *)&long long v70 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v70 + *(void *)(v70 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v70 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v75) < 0) {
    operator delete(v74[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C8795140](v77);
}

void sub_1C5B6A51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::locale a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,std::locale a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void LogTracker::houseKeepingLogs_sync(uint64_t a1, const char *a2)
{
  if (TelephonyUtilIsInternalBuild() & 1) != 0 || (TelephonyUtilIsCarrierBuild()) {
    goto LABEL_15;
  }
  uint64_t v4 = (const void *)*MEMORY[0x1E4F4F928];
  size_t v5 = strlen((const char *)*MEMORY[0x1E4F4F928]);
  if (v5 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  long long v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    long long v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v45 = v9 | 0x8000000000000000;
    __dst[0] = v7;
LABEL_11:
    memmove(v7, v4, (size_t)v6);
    *((unsigned char *)v6 + (void)v7) = 0;
    if ((a2[23] & 0x80000000) == 0) {
      goto LABEL_7;
    }
LABEL_12:
    std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    goto LABEL_13;
  }
  HIBYTE(v45) = v5;
  long long v7 = __dst;
  if (v5) {
    goto LABEL_11;
  }
  LOBYTE(__dst[0]) = 0;
  if (a2[23] < 0) {
    goto LABEL_12;
  }
LABEL_7:
  std::string v43 = *(std::string *)a2;
LABEL_13:
  LogTracker::markPurgeable(a1, (uint64_t)__dst, (uint64_t)&v43);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v43.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v45) & 0x80000000) == 0) {
      goto LABEL_15;
    }
  }
  else if ((SHIBYTE(v45) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(__dst[0]);
LABEL_15:
  uint64_t v10 = (const void *)*MEMORY[0x1E4F4F940];
  size_t v11 = strlen((const char *)*MEMORY[0x1E4F4F940]);
  if (v11 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  long long v12 = (void *)v11;
  if (v11 >= 0x17)
  {
    uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v14 = v11 | 7;
    }
    uint64_t v15 = v14 + 1;
    __darwin_ino64_t v13 = operator new(v14 + 1);
    __p[1] = v12;
    unint64_t v42 = v15 | 0x8000000000000000;
    __p[0] = v13;
LABEL_23:
    memmove(v13, v10, (size_t)v12);
    *((unsigned char *)v12 + (void)v13) = 0;
    if ((a2[23] & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_24;
  }
  HIBYTE(v42) = v11;
  __darwin_ino64_t v13 = __p;
  if (v11) {
    goto LABEL_23;
  }
  LOBYTE(__p[0]) = 0;
  if ((a2[23] & 0x80000000) == 0)
  {
LABEL_19:
    std::string v40 = *(std::string *)a2;
    goto LABEL_25;
  }
LABEL_24:
  std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)a2, *((void *)a2 + 1));
LABEL_25:
  LogTracker::markPurgeable(a1, (uint64_t)__p, (uint64_t)&v40);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v40.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v42) & 0x80000000) == 0) {
      goto LABEL_27;
    }
  }
  else if ((SHIBYTE(v42) & 0x80000000) == 0)
  {
    goto LABEL_27;
  }
  operator delete(__p[0]);
LABEL_27:
  xpc_object_t v16 = (const void *)*MEMORY[0x1E4F4F960];
  size_t v17 = strlen((const char *)*MEMORY[0x1E4F4F960]);
  if (v17 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v18 = (void *)v17;
  if (v17 >= 0x17)
  {
    uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v20 = v17 | 7;
    }
    uint64_t v21 = v20 + 1;
    long long v19 = operator new(v20 + 1);
    v38[1] = v18;
    unint64_t v39 = v21 | 0x8000000000000000;
    v38[0] = v19;
LABEL_35:
    memmove(v19, v16, (size_t)v18);
    *((unsigned char *)v18 + (void)v19) = 0;
    if ((a2[23] & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_36;
  }
  HIBYTE(v39) = v17;
  long long v19 = v38;
  if (v17) {
    goto LABEL_35;
  }
  LOBYTE(v38[0]) = 0;
  if ((a2[23] & 0x80000000) == 0)
  {
LABEL_31:
    std::string v37 = *(std::string *)a2;
    goto LABEL_37;
  }
LABEL_36:
  std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)a2, *((void *)a2 + 1));
LABEL_37:
  LogTracker::markPurgeable(a1, (uint64_t)v38, (uint64_t)&v37);
  if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v39) & 0x80000000) == 0) {
      goto LABEL_39;
    }
LABEL_44:
    operator delete(v38[0]);
    if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C1F8], v24)) {
      goto LABEL_47;
    }
    goto LABEL_45;
  }
  operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39) < 0) {
    goto LABEL_44;
  }
LABEL_39:
  if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C1F8], v22)) {
    goto LABEL_47;
  }
LABEL_45:
  if (!prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4D338], v23)
    && !prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C288], v25))
  {
    return;
  }
LABEL_47:
  xpc_object_t v26 = xpc_dictionary_create(0, 0, 0);
  if (v26 || (xpc_object_t v26 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v26) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v26);
      xpc_object_t v27 = v26;
    }
    else
    {
      xpc_object_t v27 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v27 = xpc_null_create();
    xpc_object_t v26 = 0;
  }
  xpc_release(v26);
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  xpc_object_t v28 = xpc_string_create(a2);
  if (!v28) {
    xpc_object_t v28 = xpc_null_create();
  }
  xpc_dictionary_set_value(v27, (const char *)*MEMORY[0x1E4F47178], v28);
  xpc_object_t v29 = xpc_null_create();
  xpc_release(v28);
  xpc_release(v29);
  unint64_t v35 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v36 = 0xAAAAAAAAAAAAAAAALL;
  GetABMLogServer(&v33);
  abm::HelperClient::create();
  unint64_t v30 = v34;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
    xpc_object_t v32 = v27;
    if (v27) {
      goto LABEL_60;
    }
LABEL_62:
    xpc_object_t v32 = xpc_null_create();
    goto LABEL_63;
  }
  xpc_object_t v32 = v27;
  if (!v27) {
    goto LABEL_62;
  }
LABEL_60:
  xpc_retain(v27);
LABEL_63:
  abm::HelperClient::perform();
  xpc_release(v32);
  long long v31 = (std::__shared_weak_count *)v36;
  if (v36)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v36 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  xpc_release(v27);
}

void sub_1C5B6AB94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (*(char *)(v40 - 65) < 0) {
    operator delete(*(void **)(v40 - 88));
  }
  _Unwind_Resume(exception_object);
}

BOOL LogTracker::isDefaultCarrierProfileInstalled(LogTracker *this)
{
  int v10 = -1431655766;
  uint64_t v1 = (const void *)*MEMORY[0x1E4F4D220];
  size_t v2 = strlen((const char *)*MEMORY[0x1E4F4D220]);
  if (v2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v3 = (void *)v2;
  if (v2 >= 0x17)
  {
    uint64_t v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17) {
      uint64_t v5 = v2 | 7;
    }
    uint64_t v6 = v5 + 1;
    uint64_t v4 = (void **)operator new(v5 + 1);
    __dst[1] = v3;
    unint64_t v9 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_8;
  }
  HIBYTE(v9) = v2;
  uint64_t v4 = __dst;
  if (v2) {
LABEL_8:
  }
    memmove(v4, v1, (size_t)v3);
  *((unsigned char *)v3 + (void)v4) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::profile::get((char *)__dst, (uint64_t)&__p)) {
    util::convert<int>(&__p, &v10, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v9) & 0x80000000) == 0) {
      return v10 != 0;
    }
LABEL_15:
    operator delete(__dst[0]);
    return v10 != 0;
  }
  if (SHIBYTE(v9) < 0) {
    goto LABEL_15;
  }
  return v10 != 0;
}

void sub_1C5B6ADC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void LogTracker::getLoggingConfig(xpc_object_t *a1@<X8>)
{
  v21.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
  *(_OWORD *)&v21.__r_.__value_.__r.__words[1] = xmmword_1C5BC8B10;
  strcpy(v21.__r_.__value_.__l.__data_, "/System/Library/PrivateFrameworks/ABMHelper.framework/");
  uint64_t v3 = (char *)operator new(0x20uLL);
  strcpy(v3, "com.apple.commcenter.logconfig");
  uint64_t v4 = std::string::append(&v21, v3, 0x1EuLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (config::hw::watch((config::hw *)v4))
  {
    strcpy(__s, ".watchos");
    unsigned int v6 = 8;
  }
  else
  {
    strcpy(__s, ".ios");
    unsigned int v6 = 4;
  }
  char v20 = v6;
  long long v7 = std::string::append(&v22, __s, v6);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  unint64_t v9 = std::string::append(&v23, ".plist", 6uLL);
  int v10 = (std::string::value_type *)v9->__r_.__value_.__r.__words[0];
  std::string::size_type size = v9->__r_.__value_.__l.__size_;
  std::string::size_type v12 = v9->__r_.__value_.__r.__words[2];
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v23.__r_.__value_.__l.__data_);
    if ((v20 & 0x80000000) == 0)
    {
LABEL_6:
      if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_7;
      }
      goto LABEL_12;
    }
  }
  else if ((v20 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)__s);
  if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_7:
    operator delete(v3);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_8;
    }
LABEL_13:
    operator delete(v21.__r_.__value_.__l.__data_);
    if ((v12 & 0x8000000000000000) == 0) {
      goto LABEL_9;
    }
LABEL_14:
    std::string::__init_copy_ctor_external(&v18, v10, size);
    goto LABEL_15;
  }
LABEL_12:
  operator delete(v22.__r_.__value_.__l.__data_);
  operator delete(v3);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_13;
  }
LABEL_8:
  if ((v12 & 0x8000000000000000) != 0) {
    goto LABEL_14;
  }
LABEL_9:
  v18.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
  v18.__r_.__value_.__l.__size_ = size;
  v18.__r_.__value_.__r.__words[2] = v12;
LABEL_15:
  util::readPlistToCFDictionary((uint64_t)&v18, &v22);
  uint64_t v14 = (void *)v22.__r_.__value_.__r.__words[0];
  if (!v22.__r_.__value_.__r.__words[0]
    || (CFTypeID v15 = CFGetTypeID(v22.__r_.__value_.__l.__data_), v15 != CFDictionaryGetTypeID()))
  {
    uint64_t v14 = 0;
    v23.__r_.__value_.__r.__words[0] = 0;
    xpc_object_t v16 = (const void *)v22.__r_.__value_.__r.__words[0];
    if (!v22.__r_.__value_.__r.__words[0]) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
  CFRetain(v14);
  xpc_object_t v16 = (const void *)v22.__r_.__value_.__r.__words[0];
  if (v22.__r_.__value_.__r.__words[0]) {
LABEL_20:
  }
    CFRelease(v16);
LABEL_21:
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  ctu::cf_to_xpc((uint64_t *)&v22, (ctu *)v14, v13);
  size_t v17 = (void *)v22.__r_.__value_.__r.__words[0];
  *a1 = (xpc_object_t)v22.__r_.__value_.__r.__words[0];
  if (v17 && MEMORY[0x1C8795EB0](v17) == MEMORY[0x1E4F14590]) {
    xpc_retain(v17);
  }
  else {
    *a1 = xpc_null_create();
  }
  xpc_release(v22.__r_.__value_.__l.__data_);
  if (v14) {
    CFRelease(v14);
  }
  if ((v12 & 0x8000000000000000) != 0) {
    operator delete(v10);
  }
}

void sub_1C5B6B0CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (v34 < 0) {
    operator delete(v33);
  }
  _Unwind_Resume(exception_object);
}

void LogTracker::checkLoggingVersion_sync(NSObject **this)
{
  v64[3] = *MEMORY[0x1E4F143B8];
  if (!capabilities::trace::allowed((capabilities::trace *)this)) {
    return;
  }
  xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  LogTracker::getLoggingConfig(&xdict);
  int v61 = 0;
  memset(&v60, 0, sizeof(v60));
  size_t v2 = (const void *)*MEMORY[0x1E4F4C208];
  size_t v3 = strlen((const char *)*MEMORY[0x1E4F4C208]);
  if (v3 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v4 = v3;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    p_dst = (long long *)operator new(v6 + 1);
    *((void *)&__dst + 1) = v4;
    v64[0] = v7 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_9;
  }
  HIBYTE(v64[0]) = v3;
  p_dst = &__dst;
  if (v3) {
LABEL_9:
  }
    memmove(p_dst, v2, v4);
  *((unsigned char *)p_dst + v4) = 0;
  long long v8 = (const void *)*MEMORY[0x1E4F4CAA0];
  size_t v9 = strlen((const char *)*MEMORY[0x1E4F4CAA0]);
  if (v9 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v10 = (void *)v9;
  if (v9 >= 0x17)
  {
    uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v12 = v9 | 7;
    }
    uint64_t v13 = v12 + 1;
    size_t v11 = operator new(v12 + 1);
    __p[1] = v10;
    unint64_t v59 = v13 | 0x8000000000000000;
    __p[0] = v11;
    goto LABEL_17;
  }
  HIBYTE(v59) = v9;
  size_t v11 = __p;
  if (v9) {
LABEL_17:
  }
    memmove(v11, v8, (size_t)v10);
  *((unsigned char *)v10 + (void)v11) = 0;
  BOOL v14 = prop::get((char *)&__dst, (char *)__p, (uint64_t)&v60);
  if (SHIBYTE(v59) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v64[0]) & 0x80000000) == 0)
    {
LABEL_20:
      if (v14) {
        goto LABEL_21;
      }
      goto LABEL_25;
    }
  }
  else if ((SHIBYTE(v64[0]) & 0x80000000) == 0)
  {
    goto LABEL_20;
  }
  operator delete((void *)__dst);
  if (v14)
  {
LABEL_21:
    util::convert<int>(&v60, &v61, 0);
    xpc_object_t value = xpc_dictionary_get_value(xdict, "LoggingConfigVersion");
    *(void *)&long long __dst = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      *(void *)&long long __dst = xpc_null_create();
    }
    int v18 = xpc::dyn_cast_or_default((xpc *)&__dst, 0);
    xpc_release((xpc_object_t)__dst);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    {
      *v60.__r_.__value_.__l.__data_ = 0;
      v60.__r_.__value_.__l.__size_ = 0;
      int v57 = 0;
      size_t v19 = strlen((const char *)v2);
      if (v19 <= 0x7FFFFFFFFFFFFFF7)
      {
LABEL_30:
        size_t v20 = v19;
        if (v19 >= 0x17)
        {
          uint64_t v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v19 | 7) != 0x17) {
            uint64_t v22 = v19 | 7;
          }
          uint64_t v23 = v22 + 1;
          std::string v21 = (long long *)operator new(v22 + 1);
          *((void *)&__dst + 1) = v20;
          v64[0] = v23 | 0x8000000000000000;
          *(void *)&long long __dst = v21;
        }
        else
        {
          HIBYTE(v64[0]) = v19;
          std::string v21 = &__dst;
          if (!v19)
          {
LABEL_37:
            *((unsigned char *)v21 + v20) = 0;
            xpc_object_t v24 = (const char *)*MEMORY[0x1E4F4C938];
            size_t v25 = strlen((const char *)*MEMORY[0x1E4F4C938]);
            if (v25 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            xpc_object_t v26 = (void *)v25;
            if (v25 >= 0x17)
            {
              uint64_t v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v25 | 7) != 0x17) {
                uint64_t v28 = v25 | 7;
              }
              uint64_t v29 = v28 + 1;
              xpc_object_t v27 = operator new(v28 + 1);
              __p[1] = v26;
              unint64_t v59 = v29 | 0x8000000000000000;
              __p[0] = v27;
            }
            else
            {
              HIBYTE(v59) = v25;
              xpc_object_t v27 = __p;
              if (!v25)
              {
LABEL_45:
                *((unsigned char *)v26 + (void)v27) = 0;
                BOOL v30 = prop::get((char *)&__dst, (char *)__p, (uint64_t)&v60);
                if (SHIBYTE(v59) < 0)
                {
                  operator delete(__p[0]);
                  if ((SHIBYTE(v64[0]) & 0x80000000) == 0)
                  {
LABEL_47:
                    if (v30)
                    {
LABEL_48:
                      long long v31 = (capabilities::radio *)util::convert<int>(&v60, &v57, 0);
                      int v32 = capabilities::radio::product(v31);
                      uint64_t v33 = this[11];
                      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
                      {
                        *(void *)&long long __dst = __PAIR64__(v61, 67109888);
                        WORD4(__dst) = 1024;
                        *(_DWORD *)((char *)&__dst + 10) = v18;
                        HIWORD(__dst) = 1024;
                        LODWORD(v64[0]) = v57;
                        WORD2(v64[0]) = 1024;
                        *(_DWORD *)((char *)v64 + 6) = v32;
                        _os_log_impl(&dword_1C59C6000, v33, OS_LOG_TYPE_DEFAULT, "#I Stored Logging Version: %d, Default Logging Version: %d, Stored Product ID: %d, Current Product ID: %d", (uint8_t *)&__dst, 0x1Au);
                      }
                      if (v61 < v18 || v57 != v32)
                      {
                        uint64_t v34 = this[11];
                        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
                        {
                          LOWORD(__dst) = 0;
                          _os_log_impl(&dword_1C59C6000, v34, OS_LOG_TYPE_DEFAULT, "#I Updating Log Configuration", (uint8_t *)&__dst, 2u);
                        }
                        xpc_object_t object = xdict;
                        if (xdict) {
                          xpc_retain(xdict);
                        }
                        else {
                          xpc_object_t object = xpc_null_create();
                        }
                        v55[23] = 13;
                        strcpy(v55, "Not Specified");
                        LogTracker::updateLoggingSettings_sync(this, 2, (std::string::size_type *)&object, (uint64_t)v55);
                        xpc_release(object);
                        xpc_object_t object = 0;
                        xpc_object_t v35 = xpc_dictionary_create(0, 0, 0);
                        if (v35 || (xpc_object_t v35 = xpc_null_create()) != 0)
                        {
                          if (MEMORY[0x1C8795EB0](v35) == MEMORY[0x1E4F14590])
                          {
                            xpc_retain(v35);
                            xpc_object_t v36 = v35;
                          }
                          else
                          {
                            xpc_object_t v36 = xpc_null_create();
                          }
                        }
                        else
                        {
                          xpc_object_t v36 = xpc_null_create();
                          xpc_object_t v35 = 0;
                        }
                        xpc_release(v35);
                        xpc_object_t v37 = xpc_string_create((const char *)v2);
                        if (!v37) {
                          xpc_object_t v37 = xpc_null_create();
                        }
                        xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x1E4F4C1A0], v37);
                        xpc_object_t v38 = xpc_null_create();
                        xpc_release(v37);
                        xpc_release(v38);
                        xpc_object_t v39 = xpc_string_create((const char *)v8);
                        if (!v39) {
                          xpc_object_t v39 = xpc_null_create();
                        }
                        uint64_t v40 = (const char *)*MEMORY[0x1E4F4C6A8];
                        xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x1E4F4C6A8], v39);
                        xpc_object_t v41 = xpc_null_create();
                        xpc_release(v39);
                        xpc_release(v41);
                        __p[0] = 0;
                        __p[1] = 0;
                        unint64_t v59 = 0;
                        std::to_string((std::string *)&__dst, v18);
                        *(_OWORD *)std::string __p = __dst;
                        unint64_t v59 = v64[0];
                        if (v64[0] >= 0) {
                          unint64_t v42 = __p;
                        }
                        else {
                          unint64_t v42 = (void **)__p[0];
                        }
                        xpc_object_t v43 = xpc_string_create((const char *)v42);
                        if (!v43) {
                          xpc_object_t v43 = xpc_null_create();
                        }
                        xpc_object_t v44 = (const char *)*MEMORY[0x1E4F4C800];
                        xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x1E4F4C800], v43);
                        xpc_object_t v45 = xpc_null_create();
                        xpc_release(v43);
                        xpc_release(v45);
                        if (SHIBYTE(v59) < 0) {
                          operator delete(__p[0]);
                        }
                        xpc_object_t v54 = v36;
                        if (v36) {
                          xpc_retain(v36);
                        }
                        else {
                          xpc_object_t v54 = xpc_null_create();
                        }
                        long long aBlock = 0;
                        LogTracker::setProperty_sync(this, &v54, (uint64_t *)&aBlock);
                        if (aBlock) {
                          _Block_release(aBlock);
                        }
                        xpc_release(v54);
                        xpc_object_t v54 = 0;
                        xpc_object_t v46 = xpc_string_create(v24);
                        if (!v46) {
                          xpc_object_t v46 = xpc_null_create();
                        }
                        xpc_dictionary_set_value(v36, v40, v46);
                        xpc_object_t v47 = xpc_null_create();
                        xpc_release(v46);
                        xpc_release(v47);
                        __p[0] = 0;
                        __p[1] = 0;
                        unint64_t v59 = 0;
                        std::to_string((std::string *)&__dst, v32);
                        *(_OWORD *)std::string __p = __dst;
                        unint64_t v59 = v64[0];
                        if (v64[0] >= 0) {
                          unint64_t v48 = __p;
                        }
                        else {
                          unint64_t v48 = (void **)__p[0];
                        }
                        xpc_object_t v49 = xpc_string_create((const char *)v48);
                        if (!v49) {
                          xpc_object_t v49 = xpc_null_create();
                        }
                        xpc_dictionary_set_value(v36, v44, v49);
                        xpc_object_t v50 = xpc_null_create();
                        xpc_release(v49);
                        xpc_release(v50);
                        if (SHIBYTE(v59) < 0) {
                          operator delete(__p[0]);
                        }
                        xpc_object_t v52 = v36;
                        if (v36) {
                          xpc_retain(v36);
                        }
                        else {
                          xpc_object_t v52 = xpc_null_create();
                        }
                        int v51 = 0;
                        LogTracker::setProperty_sync(this, &v52, (uint64_t *)&v51);
                        if (v51) {
                          _Block_release(v51);
                        }
                        xpc_release(v52);
                        xpc_object_t v52 = 0;
                        xpc_release(v36);
                      }
                      goto LABEL_101;
                    }
LABEL_60:
                    xpc_object_t v16 = this[11];
                    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
                    {
                      LOWORD(__dst) = 0;
                      size_t v17 = "Failed to get stored Device ID";
                      goto LABEL_62;
                    }
                    goto LABEL_101;
                  }
                }
                else if ((SHIBYTE(v64[0]) & 0x80000000) == 0)
                {
                  goto LABEL_47;
                }
                operator delete((void *)__dst);
                if (v30) {
                  goto LABEL_48;
                }
                goto LABEL_60;
              }
            }
            memmove(v27, v24, (size_t)v26);
            goto LABEL_45;
          }
        }
        memmove(v21, v2, v20);
        goto LABEL_37;
      }
    }
    else
    {
      v60.__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&v60.__r_.__value_.__s + 23) = 0;
      int v57 = 0;
      size_t v19 = strlen((const char *)v2);
      if (v19 <= 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_30;
      }
    }
    std::string::__throw_length_error[abi:ne180100]();
  }
LABEL_25:
  xpc_object_t v16 = this[11];
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__dst) = 0;
    size_t v17 = "Failed to get stored version";
LABEL_62:
    _os_log_error_impl(&dword_1C59C6000, v16, OS_LOG_TYPE_ERROR, v17, (uint8_t *)&__dst, 2u);
  }
LABEL_101:
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  xpc_release(xdict);
}

void sub_1C5B6BA48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, xpc_object_t object, void *a12, xpc_object_t a13, uint64_t a14, uint64_t a15, uint64_t a16, xpc_object_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,xpc_object_t a32)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t LogTracker::updateLoggingSettings_sync(void *a1, int a2, std::string::size_type *a3, uint64_t a4)
{
  uint64_t v8 = MEMORY[0x1C8795EB0](*a3);
  uint64_t v9 = MEMORY[0x1E4F14590];
  if (v8 != MEMORY[0x1E4F14590])
  {
    LogTracker::getLoggingConfig((xpc_object_t *)&v55.__r_.__value_.__l.__data_);
    std::string::size_type v10 = v55.__r_.__value_.__r.__words[0];
    xpc_object_t v11 = xpc_null_create();
    uint64_t v12 = (void *)*a3;
    *a3 = v10;
    xpc_release(v12);
    xpc_release(v11);
  }
  int v56 = a2;
  memset(&v55, 170, sizeof(v55));
  LogTracker::validateSelectedConfig_sync((uint64_t)a1, &v56, &v55);
  xpc_object_t v54 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v13 = &v55;
  }
  else {
    uint64_t v13 = (std::string *)v55.__r_.__value_.__r.__words[0];
  }
  v51.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v51.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
  xpc::dict::object_proxy::operator xpc::dict((uint64_t)&v51, &v54);
  xpc_object_t v14 = v54;
  applier[0] = MEMORY[0x1E4F143A8];
  applier[1] = 3321888768;
  applier[2] = ___ZN10LogTracker26updateLoggingSettings_syncEN3abm6helper13LoggingConfigEN3xpc4dictENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE_block_invoke;
  applier[3] = &__block_descriptor_64_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE_e13_B24__0r_8_v16l;
  applier[4] = a1;
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v53 = *(std::string *)a4;
  }
  xpc_dictionary_apply(v14, applier);
  if (!TelephonyUtilIsCarrierBuild() || (TelephonyUtilIsInternalBuild() & 1) != 0)
  {
LABEL_68:
    if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_70;
    }
    goto LABEL_69;
  }
  memset(&v51, 0, sizeof(v51));
  xpc_object_t v15 = xpc_dictionary_create(0, 0, 0);
  if (v15 || (xpc_object_t v15 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v15) == v9)
    {
      xpc_retain(v15);
      xpc_object_t v16 = v15;
    }
    else
    {
      xpc_object_t v16 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v16 = xpc_null_create();
    xpc_object_t v15 = 0;
  }
  xpc_release(v15);
  BOOL isDefaultCarrierProfileInstalled = LogTracker::isDefaultCarrierProfileInstalled(v17);
  int v19 = v56;
  if (v56 == 1 && isDefaultCarrierProfileInstalled)
  {
    std::string::__assign_external(&v51, (const std::string::value_type *)*MEMORY[0x1E4F471D0]);
    std::string v21 = a1[11];
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      uint64_t v22 = "#D Uninstall a profile";
      goto LABEL_76;
    }
LABEL_30:
    xpc_object_t v27 = (std::__shared_weak_count *)a1[16];
    if (!v27) {
      goto LABEL_77;
    }
    goto LABEL_31;
  }
  BOOL v23 = LogTracker::isDefaultCarrierProfileInstalled((LogTracker *)isDefaultCarrierProfileInstalled);
  char v24 = v19 != 2 || v23;
  if (v24) {
    goto LABEL_67;
  }
  xpc_object_t v25 = xpc_BOOL_create(1);
  if (!v25) {
    xpc_object_t v25 = xpc_null_create();
  }
  xpc_dictionary_set_value(v16, (const char *)*MEMORY[0x1E4F47220], v25);
  xpc_object_t v26 = xpc_null_create();
  xpc_release(v25);
  xpc_release(v26);
  std::string::__assign_external(&v51, (const std::string::value_type *)*MEMORY[0x1E4F471B8]);
  std::string v21 = a1[11];
  if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_30;
  }
  *(_WORD *)std::string buf = 0;
  uint64_t v22 = "#D Install a profile";
LABEL_76:
  _os_log_debug_impl(&dword_1C59C6000, v21, OS_LOG_TYPE_DEBUG, v22, buf, 2u);
  xpc_object_t v27 = (std::__shared_weak_count *)a1[16];
  if (!v27) {
LABEL_77:
  }
    std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_31:
  uint64_t v28 = a1[15];
  uint64_t v29 = std::__shared_weak_count::lock(v27);
  if (!v29) {
    goto LABEL_77;
  }
  BOOL v30 = v29;
  p_shared_weak_owners = &v29->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v29->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v30);
  }
  memset(buf, 170, sizeof(buf));
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10LogTracker26updateLoggingSettings_syncEN3abm6helper13LoggingConfigEN3xpc4dictENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE_block_invoke_45;
  aBlock[3] = &__block_descriptor_80_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  aBlock[4] = a1;
  void aBlock[5] = v28;
  unint64_t v48 = v30;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v51;
  }
  int v32 = _Block_copy(aBlock);
  uint64_t v33 = a1[17];
  if (v33) {
    dispatch_retain(v33);
  }
  *(void *)std::string buf = v32;
  *(void *)&uint8_t buf[8] = v33;
  unint64_t v45 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v46 = 0xAAAAAAAAAAAAAAAALL;
  GetABMLogServer(&v43);
  abm::HelperClient::create();
  uint64_t v34 = v44;
  if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  xpc_object_t v35 = xpc_string_create((const char *)*MEMORY[0x1E4F47250]);
  if (!v35) {
    xpc_object_t v35 = xpc_null_create();
  }
  xpc_dictionary_set_value(v16, (const char *)*MEMORY[0x1E4F470D8], v35);
  xpc_object_t v36 = xpc_null_create();
  xpc_release(v35);
  xpc_release(v36);
  xpc_object_t v42 = v16;
  if (v16)
  {
    xpc_retain(v16);
    xpc_object_t v37 = *(void **)buf;
    if (!*(void *)buf) {
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  xpc_object_t v42 = xpc_null_create();
  xpc_object_t v37 = *(void **)buf;
  if (*(void *)buf) {
LABEL_48:
  }
    xpc_object_t v37 = _Block_copy(v37);
LABEL_49:
  uint64_t v40 = v37;
  xpc_object_t v41 = *(NSObject **)&buf[8];
  if (*(void *)&buf[8]) {
    dispatch_retain(*(dispatch_object_t *)&buf[8]);
  }
  abm::HelperClient::perform();
  if (v41) {
    dispatch_release(v41);
  }
  if (v40) {
    _Block_release(v40);
  }
  xpc_release(v42);
  xpc_object_t v38 = (std::__shared_weak_count *)v46;
  if (v46 && !atomic_fetch_add((atomic_ullong *volatile)(v46 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  if (*(void *)&buf[8]) {
    dispatch_release(*(dispatch_object_t *)&buf[8]);
  }
  if (*(void *)buf) {
    _Block_release(*(const void **)buf);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v48) {
    std::__shared_weak_count::__release_weak(v48);
  }
  std::__shared_weak_count::__release_weak(v30);
LABEL_67:
  xpc_release(v16);
  if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_68;
  }
  operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
LABEL_69:
  }
    operator delete(v53.__r_.__value_.__l.__data_);
LABEL_70:
  xpc_release(v54);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_1C5B6C288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a23) {
    std::__shared_weak_count::__release_weak(a23);
  }
  std::__shared_weak_count::__release_weak(v49);
  xpc_release(v48);
  if (a37 < 0) {
    operator delete(__p);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  xpc_release(*(xpc_object_t *)(v50 - 120));
  if (*(char *)(v50 - 89) < 0) {
    operator delete(*(void **)(v50 - 112));
  }
  _Unwind_Resume(a1);
}

void LogTracker::setProperty_sync(void *a1, xpc_object_t *a2, uint64_t *a3)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v7 = v6;
  if (v6)
  {
    uint64_t v62 = v6;
  }
  else
  {
    xpc_object_t v7 = xpc_null_create();
    uint64_t v62 = v7;
    if (!v7)
    {
      xpc_object_t v8 = xpc_null_create();
      xpc_object_t v7 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8795EB0](v7) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v7);
    goto LABEL_9;
  }
  xpc_object_t v8 = xpc_null_create();
LABEL_8:
  uint64_t v62 = v8;
LABEL_9:
  xpc_release(v7);
  memset(&v61, 170, sizeof(v61));
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C1A0]);
  v60[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    v60[0] = xpc_null_create();
  }
  long long buf = 0uLL;
  unint64_t v64 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(v60[0]);
  memset(v60, 170, sizeof(v60));
  xpc_object_t v10 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C6A8]);
  object[0] = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    object[0] = xpc_null_create();
  }
  long long buf = 0uLL;
  unint64_t v64 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  memset(object, 170, sizeof(object));
  xpc_object_t v11 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C800]);
  xpc_object_t v58 = v11;
  if (v11) {
    xpc_retain(v11);
  }
  else {
    xpc_object_t v58 = xpc_null_create();
  }
  long long buf = 0uLL;
  unint64_t v64 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(v58);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v57, v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
  }
  else {
    std::string v57 = v61;
  }
  char isSupported = abm::trace::isSupported();
  char v13 = isSupported;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v57.__r_.__value_.__l.__data_);
    if (v13)
    {
LABEL_23:
      LODWORD(v58) = -534716416;
      xpc_object_t v14 = *a2;
      xpc_object_t v51 = v14;
      if (v14)
      {
        xpc_retain(v14);
      }
      else
      {
        xpc_object_t v14 = xpc_null_create();
        xpc_object_t v51 = v14;
      }
      BOOL isInternalProperty_sync = LogTracker::isInternalProperty_sync((uint64_t)a1, &v51, &v62, &v58);
      xpc_release(v14);
      xpc_object_t v51 = 0;
      if (isInternalProperty_sync)
      {
        if (*a3) {
          dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(a3, (unsigned int *)&v58, &v62);
        }
        goto LABEL_89;
      }
      if ((*(unsigned int (**)(void *))(*a1 + 88))(a1))
      {
        int v18 = prop::set((char *)&v61, (char *)v60, (char *)object);
        if (*a3)
        {
          if (v18) {
            uint64_t v19 = 0;
          }
          else {
            uint64_t v19 = 3760250880;
          }
          xpc_object_t v20 = xpc_null_create();
          uint64_t v21 = *a3;
          *(void *)&long long buf = v20;
          xpc_object_t v22 = xpc_null_create();
          (*(void (**)(uint64_t, uint64_t, long long *))(v21 + 16))(v21, v19, &buf);
          xpc_release((xpc_object_t)buf);
          xpc_release(v22);
        }
        goto LABEL_89;
      }
      xpc_object_t v38 = (const void *)*MEMORY[0x1E4F4D070];
      size_t v39 = strlen((const char *)*MEMORY[0x1E4F4D070]);
      if (v39 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v40 = v39;
      if (v39 >= 0x17)
      {
        uint64_t v42 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v39 | 7) != 0x17) {
          uint64_t v42 = v39 | 7;
        }
        uint64_t v43 = v42 + 1;
        p_long long buf = (long long *)operator new(v42 + 1);
        *((void *)&buf + 1) = v40;
        unint64_t v64 = v43 | 0x8000000000000000;
        *(void *)&long long buf = p_buf;
      }
      else
      {
        HIBYTE(v64) = v39;
        p_long long buf = &buf;
        if (!v39) {
          goto LABEL_78;
        }
      }
      memmove(p_buf, v38, v40);
LABEL_78:
      *((unsigned char *)p_buf + v40) = 0;
      xpc_object_t v44 = *a2;
      xpc_object_t v50 = v44;
      if (v44)
      {
        xpc_retain(v44);
      }
      else
      {
        xpc_object_t v44 = xpc_null_create();
        xpc_object_t v50 = v44;
      }
      v47[0] = MEMORY[0x1E4F143A8];
      v47[1] = 3321888768;
      v47[2] = ___ZN10LogTracker16setProperty_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke;
      v47[3] = &__block_descriptor_40_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_e28_v20__0i8_dict__object__v__12l;
      unint64_t v45 = (void *)*a3;
      if (*a3) {
        unint64_t v45 = _Block_copy(v45);
      }
      unint64_t v48 = v45;
      unint64_t v46 = _Block_copy(v47);
      xpc_object_t v49 = v46;
      Service::runCommand((uint64_t)a1, (uint64_t)&buf, &v50, &v49);
      if (v46) {
        _Block_release(v46);
      }
      xpc_release(v44);
      xpc_object_t v50 = 0;
      if (SHIBYTE(v64) < 0) {
        operator delete((void *)buf);
      }
      if (v48) {
        _Block_release(v48);
      }
      goto LABEL_89;
    }
  }
  else if (isSupported)
  {
    goto LABEL_23;
  }
  xpc_object_t v58 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v15 = *a2;
  xpc_object_t v56 = v15;
  if (v15) {
    xpc_retain(v15);
  }
  else {
    xpc_object_t v56 = xpc_null_create();
  }
  xpc::bridge((uint64_t *)&buf, (xpc *)&v56, v16);
  BOOL v23 = (void *)buf;
  if (!(void)buf || (CFTypeID v24 = CFGetTypeID((CFTypeRef)buf), v24 != CFDictionaryGetTypeID()))
  {
    xpc_object_t v58 = 0;
    xpc_object_t v25 = (const void *)buf;
    if (!(void)buf) {
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  xpc_object_t v58 = v23;
  CFRetain(v23);
  xpc_object_t v25 = (const void *)buf;
  if ((void)buf) {
LABEL_44:
  }
    CFRelease(v25);
LABEL_45:
  xpc_release(v56);
  xpc_object_t v26 = (const void *)*MEMORY[0x1E4F4CB20];
  size_t v27 = strlen((const char *)*MEMORY[0x1E4F4CB20]);
  if (v27 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v28 = (void *)v27;
  if (v27 >= 0x17)
  {
    uint64_t v31 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17) {
      uint64_t v31 = v27 | 7;
    }
    uint64_t v32 = v31 + 1;
    uint64_t v29 = (void **)operator new(v31 + 1);
    __dst[1] = v28;
    unint64_t v55 = v32 | 0x8000000000000000;
    __dst[0] = v29;
LABEL_53:
    memmove(v29, v26, (size_t)v28);
    *((unsigned char *)v28 + (void)v29) = 0;
    xpc_object_t v30 = v58;
    CFTypeRef cf = v58;
    if (!v58) {
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  HIBYTE(v55) = v27;
  uint64_t v29 = __dst;
  if (v27) {
    goto LABEL_53;
  }
  LOBYTE(__dst[0]) = 0;
  xpc_object_t v30 = v58;
  CFTypeRef cf = v58;
  if (v58) {
LABEL_54:
  }
    CFRetain(v30);
LABEL_55:
  long long aBlock = 0;
  Service::broadcastEvent((uint64_t)a1, (uint64_t)__dst, &cf, (const void **)&aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(v55) < 0)
  {
    operator delete(__dst[0]);
    uint64_t v33 = a1[11];
    if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
LABEL_61:
      if (!*a3) {
        goto LABEL_63;
      }
      goto LABEL_62;
    }
  }
  else
  {
    uint64_t v33 = a1[11];
    if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_61;
    }
  }
  xpc_object_t v37 = &v61;
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    xpc_object_t v37 = (std::string *)v61.__r_.__value_.__r.__words[0];
  }
  LODWORD(buf) = 136315138;
  *(void *)((char *)&buf + 4) = v37;
  _os_log_debug_impl(&dword_1C59C6000, v33, OS_LOG_TYPE_DEBUG, "#D The property (%s) not supported in setting", (uint8_t *)&buf, 0xCu);
  if (!*a3) {
    goto LABEL_63;
  }
LABEL_62:
  xpc_object_t v34 = xpc_null_create();
  uint64_t v35 = *a3;
  *(void *)&long long buf = v34;
  xpc_object_t v36 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, long long *))(v35 + 16))(v35, 3760250884, &buf);
  xpc_release((xpc_object_t)buf);
  xpc_release(v36);
LABEL_63:
  if (v30) {
    CFRelease(v30);
  }
LABEL_89:
  if ((SHIBYTE(object[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v60[2]) & 0x80000000) == 0) {
      goto LABEL_91;
    }
LABEL_94:
    operator delete(v60[0]);
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_92;
    }
LABEL_95:
    operator delete(v61.__r_.__value_.__l.__data_);
    goto LABEL_92;
  }
  operator delete(object[0]);
  if (SHIBYTE(v60[2]) < 0) {
    goto LABEL_94;
  }
LABEL_91:
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_95;
  }
LABEL_92:
  xpc_release(v62);
}

void sub_1C5B6CB1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *aBlock, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,xpc_object_t object,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,xpc_object_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void LogTracker::validateSelectedConfig_sync(uint64_t a1@<X0>, _DWORD *a2@<X1>, std::string *a3@<X8>)
{
  memset(a3, 170, sizeof(std::string));
  xpc_object_t v6 = (const char *)abm::helper::asString();
  size_t v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    uint64_t v9 = operator new(v10 + 1);
    a3->__r_.__value_.__l.__size_ = v8;
    a3->__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    a3->__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
LABEL_9:
    memmove(v9, v6, v8);
    *((unsigned char *)v9 + v8) = 0;
    if (*a2 != 5) {
      return;
    }
    goto LABEL_10;
  }
  *((unsigned char *)&a3->__r_.__value_.__s + 23) = v7;
  uint64_t v9 = a3;
  if (v7) {
    goto LABEL_9;
  }
  a3->__r_.__value_.__s.__data_[0] = 0;
  if (*a2 != 5) {
    return;
  }
LABEL_10:
  *a2 = 2;
  uint64_t v12 = (const std::string::value_type *)abm::helper::asString();
  std::string::__assign_external(a3, v12);
  char v13 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)xpc_object_t v14 = 0;
    _os_log_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_DEFAULT, "#I Update the logging config to Default as the requested logging config is not supported", v14, 2u);
  }
}

void sub_1C5B6CEF4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN10LogTracker26updateLoggingSettings_syncEN3abm6helper13LoggingConfigEN3xpc4dictENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE_block_invoke(uint64_t a1, uint64_t a2, xpc_object_t object)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (object)
  {
    xpc_object_t v6 = object;
    xpc_retain(object);
    goto LABEL_4;
  }
  xpc_object_t v6 = xpc_null_create();
  if (v6)
  {
LABEL_4:
    if (MEMORY[0x1C8795EB0](v6) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v6);
      xpc_object_t v7 = v6;
    }
    else
    {
      xpc_object_t v7 = xpc_null_create();
    }
    goto LABEL_8;
  }
  xpc_object_t v7 = xpc_null_create();
  xpc_object_t v6 = 0;
LABEL_8:
  xpc_release(v6);
  applier[0] = MEMORY[0x1E4F143A8];
  applier[1] = 3321888768;
  applier[2] = ___ZN10LogTracker26updateLoggingSettings_syncEN3abm6helper13LoggingConfigEN3xpc4dictENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE_block_invoke_2;
  applier[3] = &__block_descriptor_72_e8_48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE_e13_B24__0r_8_v16l;
  applier[4] = v5;
  void applier[5] = a2;
  if (*(char *)(a1 + 63) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
  }
  else {
    std::string __p = *(std::string *)(a1 + 40);
  }
  xpc_dictionary_apply(v7, applier);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  xpc_release(v7);
  return 1;
}

void sub_1C5B6D054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  xpc_release(v21);
  _Unwind_Resume(a1);
}

uint64_t ___ZN10LogTracker26updateLoggingSettings_syncEN3abm6helper13LoggingConfigEN3xpc4dictENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE_block_invoke_2(uint64_t a1, const char *a2, xpc_object_t a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  xpc_object_t v6 = *(void **)(a1 + 32);
  xpc_object_t v7 = v6[11];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v19 = *(void *)(a1 + 40);
    xpc_object_t v24 = a3;
    if (a3) {
      xpc_retain(a3);
    }
    else {
      xpc_object_t v24 = xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)__p, (xpc *)&v24, (const object *)"", v20);
    if (v26 >= 0) {
      uint64_t v21 = __p;
    }
    else {
      uint64_t v21 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136315650;
    uint64_t v28 = v19;
    __int16 v29 = 2080;
    xpc_object_t v30 = a2;
    __int16 v31 = 2080;
    uint64_t v32 = v21;
    _os_log_debug_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_DEBUG, "#D tracename: %s, traceKey: %s, traceValue: %s", buf, 0x20u);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
    xpc_release(v24);
  }
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  if (v8 || (xpc_object_t v8 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v8) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v8);
      xpc_object_t v9 = v8;
    }
    else
    {
      xpc_object_t v9 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v9 = xpc_null_create();
    xpc_object_t v8 = 0;
  }
  xpc_release(v8);
  xpc_object_t v10 = xpc_string_create(*(const char **)(a1 + 40));
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E4F4C1A0], v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  xpc_object_t v12 = xpc_string_create(a2);
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E4F4C6A8], v12);
  xpc_object_t v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  if (a3) {
    xpc_retain(a3);
  }
  else {
    a3 = xpc_null_create();
  }
  xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E4F4C800], a3);
  xpc_object_t v14 = xpc_null_create();
  xpc_release(a3);
  xpc_release(v14);
  xpc_object_t v15 = (const char *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    xpc_object_t v15 = *(const char **)v15;
  }
  xpc_object_t v16 = xpc_string_create(v15);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E4F4D120], v16);
  xpc_object_t v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  xpc_object_t object = v9;
  if (v9) {
    xpc_retain(v9);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  long long aBlock = 0;
  LogTracker::setProperty_sync(v6, &object, (uint64_t *)&aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v9);
  return 1;
}

void sub_1C5B6D3B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, xpc_object_t a10, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN10LogTracker26updateLoggingSettings_syncEN3abm6helper13LoggingConfigEN3xpc4dictENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE_block_invoke_45(uint64_t a1, int *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  size_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      xpc_object_t v7 = v6;
      uint64_t v8 = *(void *)(a1 + 40);
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8)
      {
        int v9 = *a2;
        xpc_object_t v10 = *(NSObject **)(v5 + 88);
        if (v9)
        {
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            xpc_object_t v11 = (void *)(a1 + 56);
            if (*(char *)(a1 + 79) < 0) {
              xpc_object_t v11 = (void *)*v11;
            }
            int v13 = 136315138;
            xpc_object_t v14 = v11;
            _os_log_error_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_ERROR, "Failed to %s", (uint8_t *)&v13, 0xCu);
          }
        }
        else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          xpc_object_t v12 = (void *)(a1 + 56);
          if (*(char *)(a1 + 79) < 0) {
            xpc_object_t v12 = (void *)*v12;
          }
          int v13 = 136315138;
          xpc_object_t v14 = v12;
          _os_log_debug_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_DEBUG, "#D Succeeded to %s", (uint8_t *)&v13, 0xCu);
        }
      }
    }
  }
}

void __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  size_t v4 = (std::string *)(a1 + 7);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 56);
    a1[9] = *(void *)(a2 + 72);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
}

void sub_1C5B6D6B4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
  {
    operator delete(*(void **)(a1 + 56));
    size_t v2 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v2) {
      return;
    }
  }
  else
  {
    size_t v2 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v2) {
      return;
    }
  }

  std::__shared_weak_count::__release_weak(v2);
}

void ___ZN10LogTracker16setProperty_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke(uint64_t a1, unsigned int a2, void **a3)
{
  unsigned int v5 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = (uint64_t *)(a1 + 32);
  if (v4) {
    dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(v3, &v5, a3);
  }
}

uint64_t ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (const char *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 16))();
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

uint64_t ctu::PthreadMutexGuardPolicy<LogDumpDB>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  size_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void *ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F210F7C0;
  MEMORY[0x1C87940C0](a1 + 1);
  return a1;
}

void ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F210F7C0;
  MEMORY[0x1C87940C0](a1 + 1);

  operator delete(a1);
}

void ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (size_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1C5B6DAE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C5B6DAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<LogTracker>::shared_ptr[abi:ne180100]<LogTracker,std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_std::string::size_type shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210F800;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 120) = a2;
      *(void *)(a2 + 128) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 120) = a2;
  *(void *)(a2 + 128) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C5B6DC28(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker*)#1}::operator() const(LogTracker*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C5B6DC50(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<LogTracker *,std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker *)#1},std::allocator<LogTracker>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<LogTracker *,std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker *)#1},std::allocator<LogTracker>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<LogTracker *,std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker *)#1},std::allocator<LogTracker>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI10LogTrackerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI10LogTrackerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI10LogTrackerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI10LogTrackerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

uint64_t std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker*)#1}::operator() const(LogTracker*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *ctu::SharedLoggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F210F7C0;
  MEMORY[0x1C87940C0](a1 + 1);
  size_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ctu::SharedLoggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F210F7C0;
  MEMORY[0x1C87940C0](a1 + 1);
  size_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<LogTracker>::execute_wrapped<LogTracker::initialize(dispatch::group_session)::$_0>(LogTracker::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<LogTracker::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<LogTracker::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v175 = *MEMORY[0x1E4F143B8];
  size_t v2 = (uint64_t *)*a1;
  uint64_t v3 = *(void *)(*a1 + 16);
  LogTracker::checkLoggingVersion_sync((NSObject **)v3);
  dispatch_group_t v4 = dispatch_group_create();
  size_t v5 = *(NSObject **)(v3 + 176);
  *(void *)(v3 + 176) = v4;
  if (v5) {
    dispatch_release(v5);
  }
  dispatch_group_t v7 = dispatch_group_create();
  uint64_t v8 = *(NSObject **)(v3 + 208);
  *(void *)(v3 + 208) = v7;
  if (v8) {
    dispatch_release(v8);
  }
  *(unsigned char *)(v3 + 216) = 0;
  if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C1F8], v6)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4D338], v9)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C288], v10))
  {
    memset(v170, 170, 16);
    GetABMLogServer(&v168);
    size_t v105 = v1;
    abm::HelperClient::create();
    xpc_object_t v11 = v169;
    if (v169 && !atomic_fetch_add(&v169->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      xpc_object_t v12 = *(NSObject **)(v3 + 88);
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_12;
      }
    }
    else
    {
      xpc_object_t v12 = *(NSObject **)(v3 + 88);
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
LABEL_12:
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 3321888768;
        aBlock[2] = ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke;
        aBlock[3] = &__block_descriptor_64_e8_40c30_ZTSN8dispatch13group_sessionE48c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
        aBlock[4] = v3;
        int v13 = v2[3];
        dispatch_object_t v165 = v13;
        if (v13)
        {
          dispatch_retain(v13);
          if (v165) {
            dispatch_group_enter(v165);
          }
        }
        uint64_t v166 = *(void *)v170;
        dispatch_object_t v167 = *(std::__shared_weak_count **)&v170[8];
        if (*(void *)&v170[8]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v170[8] + 8), 1uLL, memory_order_relaxed);
        }
        xpc_object_t v14 = _Block_copy(aBlock);
        uint64_t v15 = *(NSObject **)(v3 + 136);
        if (v15) {
          dispatch_retain(*(dispatch_object_t *)(v3 + 136));
        }
        xpc_object_t v16 = xpc_dictionary_create(0, 0, 0);
        if (v16 || (xpc_object_t v16 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C8795EB0](v16) == MEMORY[0x1E4F14590])
          {
            xpc_retain(v16);
            xpc_object_t v17 = v16;
          }
          else
          {
            xpc_object_t v17 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v17 = xpc_null_create();
          xpc_object_t v16 = 0;
        }
        xpc_release(v16);
        xpc_object_t v18 = xpc_int64_create(5000);
        if (!v18) {
          xpc_object_t v18 = xpc_null_create();
        }
        xpc_dictionary_set_value(v17, (const char *)*MEMORY[0x1E4F470A0], v18);
        xpc_object_t v19 = xpc_null_create();
        xpc_release(v18);
        xpc_release(v19);
        xpc_object_t v20 = (const void *)*MEMORY[0x1E4F4C198];
        size_t v21 = strlen((const char *)*MEMORY[0x1E4F4C198]);
        int v104 = v14;
        if (v21 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v22 = v21;
        if (v21 >= 0x17)
        {
          uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v21 | 7) != 0x17) {
            uint64_t v24 = v21 | 7;
          }
          uint64_t v25 = v24 + 1;
          p_dst = (std::locale::__imp *)operator new(v24 + 1);
          size_t v147 = v22;
          unint64_t v148 = v25 | 0x8000000000000000;
          __dst.__locale_ = p_dst;
        }
        else
        {
          HIBYTE(v148) = v21;
          p_dst = (std::locale::__imp *)&__dst;
          if (!v21)
          {
LABEL_37:
            *((unsigned char *)p_dst + v22) = 0;
            memset(&buf, 0, sizeof(buf));
            int v26 = -1431655766;
            int v27 = -1431655766;
            if (prop::bbtrace::get((char *)&__dst, (uint64_t)&buf))
            {
              LODWORD(__p) = -1431655766;
              if (util::convert<int>(&buf, &__p, 0)) {
                int v27 = (int)__p;
              }
              else {
                int v27 = -1431655766;
              }
            }
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(buf.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v148) & 0x80000000) == 0) {
                goto LABEL_43;
              }
            }
            else if ((SHIBYTE(v148) & 0x80000000) == 0)
            {
              goto LABEL_43;
            }
            operator delete(__dst.__locale_);
LABEL_43:
            uint64_t v28 = (const void *)*MEMORY[0x1E4F4C428];
            size_t v29 = strlen((const char *)*MEMORY[0x1E4F4C428]);
            if (v29 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            size_t v30 = v29;
            if (v29 >= 0x17)
            {
              uint64_t v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v29 | 7) != 0x17) {
                uint64_t v32 = v29 | 7;
              }
              uint64_t v33 = v32 + 1;
              __int16 v31 = (std::locale::__imp *)operator new(v32 + 1);
              size_t v147 = v30;
              unint64_t v148 = v33 | 0x8000000000000000;
              __dst.__locale_ = v31;
            }
            else
            {
              HIBYTE(v148) = v29;
              __int16 v31 = (std::locale::__imp *)&__dst;
              if (!v29)
              {
LABEL_51:
                *((unsigned char *)v31 + v30) = 0;
                memset(&buf, 0, sizeof(buf));
                if (prop::bbtrace::get((char *)&__dst, (uint64_t)&buf))
                {
                  LODWORD(__p) = -1431655766;
                  if (util::convert<int>(&buf, &__p, 0)) {
                    int v26 = (int)__p;
                  }
                  else {
                    int v26 = -1431655766;
                  }
                }
                if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(buf.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(v148) & 0x80000000) == 0)
                  {
LABEL_57:
                    if (v27 != 4)
                    {
LABEL_68:
                      xpc_object_t v161 = v17;
                      uint64_t v35 = v104;
                      if (v17)
                      {
                        xpc_retain(v17);
                        uint64_t v1 = v105;
                        if (v104) {
                          goto LABEL_70;
                        }
                      }
                      else
                      {
                        uint64_t v1 = v105;
                        xpc_object_t v161 = xpc_null_create();
                        if (v104)
                        {
LABEL_70:
                          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)_Block_copy(v104);
                          buf.__r_.__value_.__l.__size_ = (std::string::size_type)v15;
                          if (!v15)
                          {
LABEL_72:
                            abm::HelperClient::perform();
                            if (buf.__r_.__value_.__l.__size_) {
                              dispatch_release((dispatch_object_t)buf.__r_.__value_.__l.__size_);
                            }
                            if (buf.__r_.__value_.__r.__words[0]) {
                              _Block_release(buf.__r_.__value_.__l.__data_);
                            }
                            xpc_release(v161);
                            xpc_object_t v161 = 0;
LABEL_100:
                            xpc_release(v17);
                            if (v15) {
                              dispatch_release(v15);
                            }
                            if (v35) {
                              _Block_release(v35);
                            }
                            size_t v39 = v167;
                            if (v167 && !atomic_fetch_add(&v167->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                            {
                              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                              std::__shared_weak_count::__release_weak(v39);
                            }
                            if (v165)
                            {
                              dispatch_group_leave(v165);
                              if (v165) {
                                dispatch_release(v165);
                              }
                            }
                            size_t v40 = *(std::__shared_weak_count **)&v170[8];
                            if (*(void *)&v170[8]
                              && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v170[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
                            {
                              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                              std::__shared_weak_count::__release_weak(v40);
                            }
                            goto LABEL_113;
                          }
LABEL_71:
                          dispatch_retain(v15);
                          goto LABEL_72;
                        }
                      }
                      buf.__r_.__value_.__r.__words[0] = 0;
                      buf.__r_.__value_.__l.__size_ = (std::string::size_type)v15;
                      if (!v15) {
                        goto LABEL_72;
                      }
                      goto LABEL_71;
                    }
LABEL_63:
                    if (v26 != 1) {
                      goto LABEL_68;
                    }
                    xpc_object_t v34 = *(NSObject **)(v3 + 88);
                    uint64_t v35 = v104;
                    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
                    {
                      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                      _os_log_impl(&dword_1C59C6000, v34, OS_LOG_TYPE_DEFAULT, "#N Cellular Logging was detected before initiating LogTracker. The service needs to be paused in boot-up.", (uint8_t *)&buf, 2u);
                    }
                    xpc_object_t v163 = v17;
                    if (v17) {
                      xpc_retain(v17);
                    }
                    else {
                      xpc_object_t v163 = xpc_null_create();
                    }
                    buf.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
                    buf.__r_.__value_.__l.__size_ = 3321888768;
                    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_90;
                    uint64_t v155 = &__block_descriptor_72_e8_32c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE48c15_ZTSN3xpc4dictE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN12TelephonyXPC6ResultEN3xpc4dictEEEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
                    uint64_t v156 = *(void *)v170;
                    uint64_t v157 = *(std::__shared_weak_count **)&v170[8];
                    uint64_t v1 = v105;
                    if (*(void *)&v170[8]) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v170[8] + 8), 1uLL, memory_order_relaxed);
                    }
                    xpc_object_t v158 = v17;
                    if (v17)
                    {
                      xpc_retain(v17);
                      if (v104) {
                        goto LABEL_85;
                      }
                    }
                    else
                    {
                      xpc_object_t v158 = xpc_null_create();
                      if (v104)
                      {
LABEL_85:
                        long long v159 = _Block_copy(v104);
                        dispatch_object_t v160 = v15;
                        if (!v15)
                        {
LABEL_87:
                          xpc_object_t v36 = _Block_copy(&buf);
                          xpc_object_t v37 = *(NSObject **)(v3 + 136);
                          if (v37) {
                            dispatch_retain(*(dispatch_object_t *)(v3 + 136));
                          }
                          xpc_object_t v161 = v36;
                          dispatch_object_t v162 = v37;
                          abm::HelperClient::perform();
                          if (v162) {
                            dispatch_release(v162);
                          }
                          if (v161) {
                            _Block_release(v161);
                          }
                          xpc_release(v163);
                          xpc_object_t v163 = 0;
                          if (v160) {
                            dispatch_release(v160);
                          }
                          if (v159) {
                            _Block_release(v159);
                          }
                          xpc_release(v158);
                          xpc_object_t v158 = 0;
                          xpc_object_t v38 = v157;
                          if (v157 && !atomic_fetch_add(&v157->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                          {
                            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                            std::__shared_weak_count::__release_weak(v38);
                          }
                          goto LABEL_100;
                        }
LABEL_86:
                        dispatch_retain(v15);
                        goto LABEL_87;
                      }
                    }
                    long long v159 = 0;
                    dispatch_object_t v160 = v15;
                    if (!v15) {
                      goto LABEL_87;
                    }
                    goto LABEL_86;
                  }
                }
                else if ((SHIBYTE(v148) & 0x80000000) == 0)
                {
                  goto LABEL_57;
                }
                operator delete(__dst.__locale_);
                if (v27 != 4) {
                  goto LABEL_68;
                }
                goto LABEL_63;
              }
            }
            memmove(v31, v28, v30);
            goto LABEL_51;
          }
        }
        memmove(p_dst, v20, v22);
        goto LABEL_37;
      }
    }
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C59C6000, v12, OS_LOG_TYPE_DEFAULT, "#I ABM is initializing; reinit traces in helper",
      (uint8_t *)&buf,
      2u);
    goto LABEL_12;
  }
LABEL_113:
  xpc_object_t v41 = (const char **)MEMORY[0x1E4F4F928];
  strlen((const char *)*MEMORY[0x1E4F4F928]);
  ctu::fs::create_directory();
  uint64_t v42 = (const char **)MEMORY[0x1E4F4F940];
  uint64_t v43 = (const void *)*MEMORY[0x1E4F4F940];
  size_t v44 = strlen((const char *)*MEMORY[0x1E4F4F940]);
  if (v44 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_236;
  }
  unint64_t v45 = (void *)v44;
  if (v44 >= 0x17)
  {
    uint64_t v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v44 | 7) != 0x17) {
      uint64_t v47 = v44 | 7;
    }
    uint64_t v48 = v47 + 1;
    unint64_t v46 = operator new(v47 + 1);
    v152[1] = v45;
    unint64_t v153 = v48 | 0x8000000000000000;
    v152[0] = v46;
    goto LABEL_120;
  }
  HIBYTE(v153) = v44;
  unint64_t v46 = v152;
  if (v44) {
LABEL_120:
  }
    memmove(v46, v43, (size_t)v45);
  *((unsigned char *)v45 + (void)v46) = 0;
  xpc_object_t v49 = *v41;
  size_t v50 = strlen(*v41);
  if (v50 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v51 = (void *)v50;
  if (v50 >= 0x17)
  {
    uint64_t v53 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v50 | 7) != 0x17) {
      uint64_t v53 = v50 | 7;
    }
    uint64_t v54 = v53 + 1;
    xpc_object_t v52 = operator new(v53 + 1);
    v150[1] = v51;
    unint64_t v151 = v54 | 0x8000000000000000;
    v150[0] = v52;
  }
  else
  {
    HIBYTE(v151) = v50;
    xpc_object_t v52 = v150;
    if (!v50) {
      goto LABEL_129;
    }
  }
  memmove(v52, v49, (size_t)v51);
LABEL_129:
  *((unsigned char *)v51 + (void)v52) = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&__dst, "[^\\.].*", 0);
  util::moveDirContent((std::string::size_type)v152, (uint64_t)v150, 1u, 1, (uint64_t)&__dst);
  unint64_t v55 = v149;
  if (!v149 || atomic_fetch_add(&v149->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    std::locale::~locale(&__dst);
    if ((SHIBYTE(v151) & 0x80000000) == 0) {
      goto LABEL_132;
    }
LABEL_229:
    operator delete(v150[0]);
    if ((SHIBYTE(v153) & 0x80000000) == 0) {
      goto LABEL_133;
    }
    goto LABEL_230;
  }
  ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
  std::__shared_weak_count::__release_weak(v55);
  std::locale::~locale(&__dst);
  if (SHIBYTE(v151) < 0) {
    goto LABEL_229;
  }
LABEL_132:
  if ((SHIBYTE(v153) & 0x80000000) == 0) {
    goto LABEL_133;
  }
LABEL_230:
  operator delete(v152[0]);
LABEL_133:
  strlen(*v42);
  ctu::fs::create_directory();
  xpc_object_t v56 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
  {
    std::string v57 = *v42;
    xpc_object_t v58 = *v41;
    *(_DWORD *)std::locale v170 = 136315394;
    *(void *)&v170[4] = v57;
    *(_WORD *)&v170[12] = 2080;
    *(void *)&v170[14] = v58;
    _os_log_impl(&dword_1C59C6000, v56, OS_LOG_TYPE_DEFAULT, "#I Moved %s/*/* -> %s/", v170, 0x16u);
  }
  unint64_t v59 = (const void *)*MEMORY[0x1E4F4CC18];
  size_t v60 = strlen((const char *)*MEMORY[0x1E4F4CC18]);
  if (v60 > 0x7FFFFFFFFFFFFFF7) {
LABEL_236:
  }
    std::string::__throw_length_error[abi:ne180100]();
  size_t v61 = v60;
  if (v60 >= 0x17)
  {
    uint64_t v63 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v60 | 7) != 0x17) {
      uint64_t v63 = v60 | 7;
    }
    uint64_t v64 = v63 + 1;
    p_p = operator new(v63 + 1);
    uint64_t v138 = v61;
    unint64_t v139 = v64 | 0x8000000000000000;
    std::string __p = p_p;
    goto LABEL_142;
  }
  HIBYTE(v139) = v60;
  p_p = &__p;
  if (v60) {
LABEL_142:
  }
    memmove(p_p, v59, v61);
  *((unsigned char *)p_p + v61) = 0;
  *(void *)std::locale v170 = MEMORY[0x1E4F143A8];
  *(void *)&v170[8] = 3321888768;
  *(void *)&v170[16] = ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_93;
  long long v171 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  uint64_t v172 = v3;
  uint64_t v173 = *v2;
  uint64_t v65 = (std::__shared_weak_count *)v2[1];
  v174 = v65;
  if (v65) {
    atomic_fetch_add_explicit(&v65->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  int v66 = _Block_copy(v170);
  size_t v145 = v66;
  Service::registerCommandHandler(v3, (uint64_t)&__p, &v145);
  if (v66) {
    _Block_release(v66);
  }
  if (SHIBYTE(v139) < 0) {
    operator delete(__p);
  }
  uint64_t v67 = (const void *)*MEMORY[0x1E4F4C9F0];
  size_t v68 = strlen((const char *)*MEMORY[0x1E4F4C9F0]);
  if (v68 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v69 = v68;
  if (v68 >= 0x17)
  {
    uint64_t v71 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v68 | 7) != 0x17) {
      uint64_t v71 = v68 | 7;
    }
    uint64_t v72 = v71 + 1;
    long long v70 = operator new(v71 + 1);
    uint64_t v130 = v69;
    unint64_t v131 = v72 | 0x8000000000000000;
    long long v129 = v70;
    goto LABEL_156;
  }
  HIBYTE(v131) = v68;
  long long v70 = &v129;
  if (v68) {
LABEL_156:
  }
    memmove(v70, v67, v69);
  *((unsigned char *)v70 + v69) = 0;
  std::string __p = (void *)MEMORY[0x1E4F143A8];
  uint64_t v138 = 3321888768;
  unint64_t v139 = (unint64_t)___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_98;
  unint64_t v140 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  uint64_t v141 = v3;
  uint64_t v142 = *v2;
  long long v73 = (std::__shared_weak_count *)v2[1];
  uint64_t v143 = v73;
  if (v73) {
    atomic_fetch_add_explicit(&v73->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v74 = _Block_copy(&__p);
  unint64_t v144 = v74;
  Service::registerCommandHandler(v3, (uint64_t)&v129, &v144);
  if (v74) {
    _Block_release(v74);
  }
  if (SHIBYTE(v131) < 0) {
    operator delete(v129);
  }
  long long v75 = (const void *)*MEMORY[0x1E4F4C748];
  size_t v76 = strlen((const char *)*MEMORY[0x1E4F4C748]);
  if (v76 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v77 = v76;
  if (v76 >= 0x17)
  {
    uint64_t v79 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v76 | 7) != 0x17) {
      uint64_t v79 = v76 | 7;
    }
    uint64_t v80 = v79 + 1;
    unint64_t v78 = operator new(v79 + 1);
    uint64_t v122 = v77;
    unint64_t v123 = v80 | 0x8000000000000000;
    xpc_object_t v121 = v78;
    goto LABEL_170;
  }
  HIBYTE(v123) = v76;
  unint64_t v78 = &v121;
  if (v76) {
LABEL_170:
  }
    memmove(v78, v75, v77);
  *((unsigned char *)v78 + v77) = 0;
  long long v129 = (void *)MEMORY[0x1E4F143A8];
  uint64_t v130 = 3321888768;
  unint64_t v131 = (unint64_t)___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2;
  std::string::size_type v132 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  uint64_t v133 = v3;
  uint64_t v134 = *v2;
  char v81 = (std::__shared_weak_count *)v2[1];
  xpc_object_t v135 = v81;
  if (v81) {
    atomic_fetch_add_explicit(&v81->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v82 = _Block_copy(&v129);
  uint64_t v136 = v82;
  Service::registerCommandHandler(v3, (uint64_t)&v121, &v136);
  if (v82) {
    _Block_release(v82);
  }
  if (SHIBYTE(v123) < 0) {
    operator delete(v121);
  }
  uint64_t v83 = (const void *)*MEMORY[0x1E4F4C9F8];
  size_t v84 = strlen((const char *)*MEMORY[0x1E4F4C9F8]);
  if (v84 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v85 = v84;
  if (v84 >= 0x17)
  {
    uint64_t v87 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v84 | 7) != 0x17) {
      uint64_t v87 = v84 | 7;
    }
    uint64_t v88 = v87 + 1;
    uint64_t v86 = operator new(v87 + 1);
    uint64_t v114 = v85;
    unint64_t v115 = v88 | 0x8000000000000000;
    BOOL v113 = v86;
    goto LABEL_184;
  }
  HIBYTE(v115) = v84;
  uint64_t v86 = &v113;
  if (v84) {
LABEL_184:
  }
    memmove(v86, v83, v85);
  *((unsigned char *)v86 + v85) = 0;
  xpc_object_t v121 = (void *)MEMORY[0x1E4F143A8];
  uint64_t v122 = 3321888768;
  unint64_t v123 = (unint64_t)___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_3;
  xpc_object_t v124 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  uint64_t v125 = v3;
  uint64_t v126 = *v2;
  uint64_t v89 = (std::__shared_weak_count *)v2[1];
  uint64_t v127 = v89;
  if (v89) {
    atomic_fetch_add_explicit(&v89->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  long long v90 = _Block_copy(&v121);
  uint64_t v128 = v90;
  Service::registerCommandHandler(v3, (uint64_t)&v113, &v128);
  if (v90) {
    _Block_release(v90);
  }
  if (SHIBYTE(v115) < 0) {
    operator delete(v113);
  }
  size_t v91 = (const void *)*MEMORY[0x1E4F4C9E8];
  size_t v92 = strlen((const char *)*MEMORY[0x1E4F4C9E8]);
  if (v92 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v93 = v92;
  if (v92 >= 0x17)
  {
    uint64_t v95 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v92 | 7) != 0x17) {
      uint64_t v95 = v92 | 7;
    }
    uint64_t v96 = v95 + 1;
    int v94 = operator new(v95 + 1);
    uint64_t v107 = v93;
    unint64_t v108 = v96 | 0x8000000000000000;
    xpc_object_t v106 = v94;
    goto LABEL_198;
  }
  HIBYTE(v108) = v92;
  int v94 = &v106;
  if (v92) {
LABEL_198:
  }
    memmove(v94, v91, v93);
  *((unsigned char *)v94 + v93) = 0;
  BOOL v113 = (void *)MEMORY[0x1E4F143A8];
  uint64_t v114 = 3321888768;
  unint64_t v115 = (unint64_t)___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_4;
  xpc_object_t v116 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  uint64_t v117 = v3;
  uint64_t v118 = *v2;
  xpc_object_t v97 = (std::__shared_weak_count *)v2[1];
  xpc_object_t v119 = v97;
  if (v97) {
    atomic_fetch_add_explicit(&v97->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v98 = _Block_copy(&v113);
  long long v120 = v98;
  Service::registerCommandHandler(v3, (uint64_t)&v106, &v120);
  if (v98) {
    _Block_release(v98);
  }
  if (SHIBYTE(v108) < 0) {
    operator delete(v106);
  }
  dispatch_get_global_queue(0, 0);
  xpc_object_t v106 = (void *)MEMORY[0x1E4F143A8];
  uint64_t v107 = 3321888768;
  unint64_t v108 = (unint64_t)___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_5;
  unint64_t v109 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e103___os_state_data_s_I___b32I__os_state_data_decoder_s__64c__64c___64c__0C__16__0__os_state_hints_s_I_II_8l;
  uint64_t v110 = v3;
  uint64_t v111 = *v2;
  xpc_object_t v99 = (std::__shared_weak_count *)v2[1];
  uint64_t v112 = v99;
  if (v99) {
    atomic_fetch_add_explicit(&v99->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)(v3 + 200) = os_state_add_handler();
  if (v112) {
    std::__shared_weak_count::__release_weak(v112);
  }
  if (v119) {
    std::__shared_weak_count::__release_weak(v119);
  }
  if (v127) {
    std::__shared_weak_count::__release_weak(v127);
  }
  if (v135) {
    std::__shared_weak_count::__release_weak(v135);
  }
  if (v143) {
    std::__shared_weak_count::__release_weak(v143);
  }
  if (v174) {
    std::__shared_weak_count::__release_weak(v174);
  }
  xpc_object_t v100 = v2[3];
  if (v100)
  {
    dispatch_group_leave(v100);
    xpc_object_t v101 = v2[3];
    if (v101) {
      dispatch_release(v101);
    }
  }
  int v102 = (std::__shared_weak_count *)v2[1];
  if (v102) {
    std::__shared_weak_count::__release_weak(v102);
  }
  operator delete(v2);
  char v103 = (std::__shared_weak_count *)v1[2];
  if (v103 && !atomic_fetch_add(&v103->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
    std::__shared_weak_count::__release_weak(v103);
  }
  operator delete(v1);
}

void sub_1C5B6EFE0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)size_t v2 = 0;
    _os_log_impl(&dword_1C59C6000, v1, OS_LOG_TYPE_DEFAULT, "#I Reinit traces complete", v2, 2u);
  }
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE(void *a1, void *a2)
{
  dispatch_group_t v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    size_t v5 = a1[5];
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE(uint64_t a1)
{
  size_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(NSObject **)(a1 + 40);
    if (!v3) {
      return;
    }
  }
  else
  {
    uint64_t v3 = *(NSObject **)(a1 + 40);
    if (!v3) {
      return;
    }
  }
  dispatch_group_leave(v3);
  dispatch_group_t v4 = *(NSObject **)(a1 + 40);
  if (v4)
  {
    dispatch_release(v4);
  }
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_90(void *a1)
{
  size_t v2 = (void *)a1[6];
  xpc_object_t v7 = v2;
  if (!v2)
  {
    xpc_object_t v7 = xpc_null_create();
    uint64_t v3 = (void *)a1[7];
    if (!v3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  xpc_retain(v2);
  uint64_t v3 = (void *)a1[7];
  if (v3) {
LABEL_5:
  }
    uint64_t v3 = _Block_copy(v3);
LABEL_6:
  dispatch_group_t v4 = a1[8];
  long long aBlock = v3;
  xpc_object_t object = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  abm::HelperClient::perform();
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(v7);
}

void sub_1C5B6F74C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
}

void __copy_helper_block_e8_32c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE48c15_ZTSN3xpc4dictE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN12TelephonyXPC6ResultEN3xpc4dictEEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[5];
  a1[4] = a2[4];
  a1[5] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  size_t v5 = (void *)a2[6];
  a1[6] = v5;
  if (!v5)
  {
    a1[6] = xpc_null_create();
    uint64_t v6 = (void *)a2[7];
    if (!v6) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  xpc_retain(v5);
  uint64_t v6 = (void *)a2[7];
  if (v6) {
LABEL_7:
  }
    uint64_t v6 = _Block_copy(v6);
LABEL_8:
  xpc_object_t v7 = a2[8];
  a1[7] = v6;
  a1[8] = v7;
  if (v7)
  {
    dispatch_retain(v7);
  }
}

void __destroy_helper_block_e8_32c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE48c15_ZTSN3xpc4dictE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN12TelephonyXPC6ResultEN3xpc4dictEEEE(uint64_t a1)
{
  size_t v2 = *(NSObject **)(a1 + 64);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 56);
  if (v3) {
    _Block_release(v3);
  }
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(void *)(a1 + 48) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_93(void *a1, xpc_object_t *a2, const void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  xpc_object_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  int v9 = v8;
  uint64_t v10 = a1[5];
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v10) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10) {
      return;
    }
  }
  xpc_object_t v11 = *a2;
  if (v11)
  {
    xpc_retain(v11);
    xpc_object_t v12 = *a3;
    if (*a3) {
      goto LABEL_9;
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    xpc_object_t v12 = *a3;
    if (*a3)
    {
LABEL_9:
      int v13 = _Block_copy(v12);
      xpc_object_t v14 = (std::__shared_weak_count *)v7[16];
      if (!v14) {
LABEL_18:
      }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_13;
    }
  }
  int v13 = 0;
  xpc_object_t v14 = (std::__shared_weak_count *)v7[16];
  if (!v14) {
    goto LABEL_18;
  }
LABEL_13:
  uint64_t v15 = v7[15];
  xpc_object_t v16 = std::__shared_weak_count::lock(v14);
  if (!v16) {
    goto LABEL_18;
  }
  xpc_object_t v17 = v16;
  xpc_object_t v18 = operator new(0x18uLL);
  *xpc_object_t v18 = v11;
  xpc_object_t v19 = xpc_null_create();
  v18[1] = v7;
  v18[2] = v13;
  xpc_object_t v20 = v7[17];
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  size_t v21 = operator new(0x18uLL);
  *size_t v21 = v18;
  v21[1] = v15;
  v21[2] = v17;
  dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb1_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_98(void *a1, xpc_object_t *a2, const void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  xpc_object_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  int v9 = v8;
  uint64_t v10 = a1[5];
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v10) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10) {
      return;
    }
  }
  xpc_object_t v11 = *a2;
  if (v11)
  {
    xpc_retain(v11);
    xpc_object_t v12 = *a3;
    if (*a3) {
      goto LABEL_9;
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    xpc_object_t v12 = *a3;
    if (*a3)
    {
LABEL_9:
      int v13 = _Block_copy(v12);
      xpc_object_t v14 = (std::__shared_weak_count *)v7[16];
      if (!v14) {
LABEL_18:
      }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_13;
    }
  }
  int v13 = 0;
  xpc_object_t v14 = (std::__shared_weak_count *)v7[16];
  if (!v14) {
    goto LABEL_18;
  }
LABEL_13:
  uint64_t v15 = v7[15];
  xpc_object_t v16 = std::__shared_weak_count::lock(v14);
  if (!v16) {
    goto LABEL_18;
  }
  xpc_object_t v17 = v16;
  xpc_object_t v18 = operator new(0x18uLL);
  *xpc_object_t v18 = v11;
  xpc_object_t v19 = xpc_null_create();
  v18[1] = v7;
  v18[2] = v13;
  xpc_object_t v20 = v7[17];
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  size_t v21 = operator new(0x18uLL);
  *size_t v21 = v18;
  v21[1] = v15;
  v21[2] = v17;
  dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb2_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2(void *a1, xpc_object_t *a2, const void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  xpc_object_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  int v9 = v8;
  uint64_t v10 = a1[5];
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v10) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10) {
      return;
    }
  }
  xpc_object_t v11 = *a2;
  if (v11)
  {
    xpc_retain(v11);
    xpc_object_t v12 = *a3;
    if (*a3) {
      goto LABEL_9;
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    xpc_object_t v12 = *a3;
    if (*a3)
    {
LABEL_9:
      int v13 = _Block_copy(v12);
      uint64_t v15 = a1[5];
      xpc_object_t v14 = (std::__shared_weak_count *)a1[6];
      if (!v14) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
  int v13 = 0;
  uint64_t v15 = a1[5];
  xpc_object_t v14 = (std::__shared_weak_count *)a1[6];
  if (v14) {
LABEL_10:
  }
    atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
LABEL_11:
  xpc_object_t v16 = (std::__shared_weak_count *)v7[16];
  if (!v16 || (v17 = v7[15], (xpc_object_t v18 = std::__shared_weak_count::lock(v16)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v19 = v18;
  xpc_object_t v20 = operator new(0x28uLL);
  *xpc_object_t v20 = v11;
  xpc_object_t v21 = xpc_null_create();
  v20[1] = v7;
  void v20[2] = v13;
  v20[3] = v15;
  v20[4] = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  size_t v22 = v7[17];
  atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  BOOL v23 = operator new(0x18uLL);
  *BOOL v23 = v20;
  v23[1] = v17;
  void v23[2] = v19;
  dispatch_async_f(v22, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb3_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  xpc_release(v21);
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_3(void *a1, xpc_object_t *a2, const void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  xpc_object_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  int v9 = v8;
  uint64_t v10 = a1[5];
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v10) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10) {
      return;
    }
  }
  xpc_object_t v11 = *a2;
  if (v11)
  {
    xpc_retain(v11);
    xpc_object_t v12 = *a3;
    if (*a3) {
      goto LABEL_9;
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    xpc_object_t v12 = *a3;
    if (*a3)
    {
LABEL_9:
      int v13 = _Block_copy(v12);
      xpc_object_t v14 = (std::__shared_weak_count *)v7[16];
      if (!v14) {
LABEL_18:
      }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_13;
    }
  }
  int v13 = 0;
  xpc_object_t v14 = (std::__shared_weak_count *)v7[16];
  if (!v14) {
    goto LABEL_18;
  }
LABEL_13:
  uint64_t v15 = v7[15];
  xpc_object_t v16 = std::__shared_weak_count::lock(v14);
  if (!v16) {
    goto LABEL_18;
  }
  uint64_t v17 = v16;
  xpc_object_t v18 = operator new(0x18uLL);
  *xpc_object_t v18 = v7;
  v18[1] = v11;
  xpc_object_t v19 = xpc_null_create();
  v18[2] = v13;
  xpc_object_t v20 = v7[17];
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v21 = operator new(0x18uLL);
  *xpc_object_t v21 = v18;
  v21[1] = v15;
  v21[2] = v17;
  dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb4_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_4(void *a1, xpc_object_t *a2, const void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  xpc_object_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  int v9 = v8;
  uint64_t v10 = a1[5];
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v10) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10) {
      return;
    }
  }
  xpc_object_t v11 = *a2;
  if (v11)
  {
    xpc_retain(v11);
    xpc_object_t v12 = *a3;
    if (*a3) {
      goto LABEL_9;
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    xpc_object_t v12 = *a3;
    if (*a3)
    {
LABEL_9:
      int v13 = _Block_copy(v12);
      xpc_object_t v14 = (std::__shared_weak_count *)v7[16];
      if (!v14) {
LABEL_18:
      }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_13;
    }
  }
  int v13 = 0;
  xpc_object_t v14 = (std::__shared_weak_count *)v7[16];
  if (!v14) {
    goto LABEL_18;
  }
LABEL_13:
  uint64_t v15 = v7[15];
  xpc_object_t v16 = std::__shared_weak_count::lock(v14);
  if (!v16) {
    goto LABEL_18;
  }
  uint64_t v17 = v16;
  xpc_object_t v18 = operator new(0x18uLL);
  *xpc_object_t v18 = v7;
  v18[1] = v11;
  xpc_object_t v19 = xpc_null_create();
  v18[2] = v13;
  xpc_object_t v20 = v7[17];
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v21 = operator new(0x18uLL);
  *xpc_object_t v21 = v18;
  v21[1] = v15;
  v21[2] = v17;
  dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb5_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
}

uint64_t ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_5(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    size_t v5 = (void *)a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      xpc_object_t v7 = v6;
      uint64_t v8 = a1[5];
      if (v8 && *(_DWORD *)(a2 + 16) == 3)
      {
        v17[0] = MEMORY[0x1E4F143A8];
        v17[1] = 3321888768;
        dispatch_object_t v17[2] = ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_6;
        v17[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e5_v8__0l;
        v17[4] = v5;
        v17[5] = v8;
        int v9 = (std::__shared_weak_count *)a1[6];
        xpc_object_t v18 = v9;
        if (v9) {
          atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v10 = (std::__shared_weak_count *)v5[16];
        if (!v10 || (v11 = v5[15], (xpc_object_t v12 = std::__shared_weak_count::lock(v10)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        int v13 = v12;
        xpc_object_t v14 = v5[17];
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3321888768;
        block[2] = ___ZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedEU13block_pointerFvvE_block_invoke;
        block[3] = &unk_1F210F9F8;
        void block[5] = v11;
        xpc_object_t v20 = v13;
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        block[4] = v17;
        dispatch_async(v14, block);
        uint64_t v15 = v20;
        if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        if (v18) {
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  return 0;
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_6(uint64_t a1)
{
  size_t v22 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v23 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_7;
  aBlock[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  long long v11 = *(_OWORD *)(a1 + 32);
  long long v20 = v11;
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  xpc_object_t v21 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  size_t v2 = _Block_copy(aBlock);
  uint64_t v3 = *(NSObject **)(v11 + 136);
  if (v3) {
    dispatch_retain(*(dispatch_object_t *)(v11 + 136));
  }
  size_t v22 = v2;
  dispatch_object_t v23 = v3;
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  GetABMLogServer(&v15);
  abm::HelperClient::create();
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
  if (v5 || (xpc_object_t v5 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v5) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v5);
      xpc_object_t v6 = v5;
    }
    else
    {
      xpc_object_t v6 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v5 = 0;
  }
  xpc_release(v5);
  xpc_object_t v7 = xpc_int64_create(1500);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F470A0], v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  xpc_object_t v14 = v6;
  if (!v6)
  {
    xpc_object_t v14 = xpc_null_create();
    int v9 = v22;
    if (!v22) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  xpc_retain(v6);
  int v9 = v22;
  if (v22) {
LABEL_20:
  }
    int v9 = _Block_copy(v9);
LABEL_21:
  xpc_object_t v12 = v9;
  xpc_object_t object = v23;
  if (v23) {
    dispatch_retain(v23);
  }
  abm::HelperClient::perform();
  if (object) {
    dispatch_release(object);
  }
  if (v12) {
    _Block_release(v12);
  }
  xpc_release(v14);
  xpc_release(v6);
  uint64_t v10 = (std::__shared_weak_count *)v18;
  if (v18 && !atomic_fetch_add((atomic_ullong *volatile)(v18 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (v23) {
    dispatch_release(v23);
  }
  if (v22) {
    _Block_release(v22);
  }
  if (v21) {
    std::__shared_weak_count::__release_weak(v21);
  }
}

void sub_1C5B706A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, xpc_object_t object, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a11);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v24);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback(v25 - 48);
  if (a24) {
    std::__shared_weak_count::__release_weak(a24);
  }
  _Unwind_Resume(a1);
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_7(void *a1, _DWORD *a2, xpc_object_t *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    xpc_object_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      int v9 = v8;
      uint64_t v10 = a1[5];
      if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v10) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v9);
        if (!v10) {
          return;
        }
      }
      if (*a2 || MEMORY[0x1C8795EB0](*a3) != MEMORY[0x1E4F14590]) {
        goto LABEL_13;
      }
      xpc_object_t value = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F47258]);
      xpc_object_t object = value;
      if (value) {
        xpc_retain(value);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      int v12 = xpc::dyn_cast_or_default((xpc *)&object, 0);
      xpc_release(object);
      if ((v12 - 3) < 0xFFFFFFFE)
      {
LABEL_13:
        int v13 = (const void *)*MEMORY[0x1E4F4CB18];
        size_t v14 = strlen((const char *)*MEMORY[0x1E4F4CB18]);
        if (v14 >= 0x7FFFFFFFFFFFFFF8) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = (void *)v14;
        if (v14 >= 0x17)
        {
          uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v14 | 7) != 0x17) {
            uint64_t v17 = v14 | 7;
          }
          uint64_t v18 = v17 + 1;
          xpc_object_t v16 = (void **)operator new(v17 + 1);
          __dst[1] = v15;
          unint64_t v22 = v18 | 0x8000000000000000;
          __dst[0] = v16;
        }
        else
        {
          HIBYTE(v22) = v14;
          xpc_object_t v16 = __dst;
          if (!v14) {
            goto LABEL_21;
          }
        }
        memmove(v16, v13, (size_t)v15);
LABEL_21:
        *((unsigned char *)v15 + (void)v16) = 0;
        long long aBlock = 0;
        CFTypeRef cf = 0;
        Service::broadcastEvent(v7, (uint64_t)__dst, &cf, (const void **)&aBlock);
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (cf) {
          CFRelease(cf);
        }
        if (SHIBYTE(v22) < 0) {
          operator delete(__dst[0]);
        }
      }
    }
  }
}

void sub_1C5B70924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, xpc_object_t object)
{
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb1_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t v1 = a1;
  xpc_object_t object[3] = *(xpc_object_t *)MEMORY[0x1E4F143B8];
  size_t v2 = (xpc_object_t *)*a1;
  uint64_t v3 = *(void *)(*a1 + 8);
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v4) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v4);
      xpc_object_t v50 = v4;
    }
    else
    {
      xpc_object_t v50 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v50 = xpc_null_create();
    xpc_object_t v4 = 0;
  }
  xpc_release(v4);
  memset(v55, 170, sizeof(v55));
  xpc_object_t v51 = v2;
  xpc_object_t value = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x1E4F4C5A8]);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  __p[0] = 0;
  __p[1] = 0;
  *(void *)&long long v53 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  xpc_object_t v6 = *(uint64_t **)(v3 + 152);
  uint64_t v7 = (uint64_t **)(v3 + 160);
  if (v6 == (uint64_t *)(v3 + 160)) {
    goto LABEL_44;
  }
  char v8 = 0;
  do
  {
    unint64_t v54 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)std::string __p = v9;
    long long v53 = v9;
    if (*((char *)v6 + 55) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v6[4], v6[5]);
    }
    else
    {
      *(_OWORD *)std::string __p = *((_OWORD *)v6 + 2);
      *(void *)&long long v53 = v6[6];
    }
    unint64_t v10 = v6[8];
    *((void *)&v53 + 1) = v6[7];
    unint64_t v54 = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    if ((SBYTE7(v53) & 0x80u) == 0) {
      long long v11 = __p;
    }
    else {
      long long v11 = (void **)__p[0];
    }
    if (SHIBYTE(v55[2]) >= 0) {
      int v12 = v55;
    }
    else {
      int v12 = (void **)v55[0];
    }
    int v13 = strcasecmp((const char *)v11, (const char *)v12);
    if (v13)
    {
      size_t v14 = (std::__shared_weak_count *)v54;
      if (!v54) {
        goto LABEL_31;
      }
    }
    else
    {
      uint64_t v15 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        LODWORD(object[0]) = 136315138;
        *(xpc_object_t *)((char *)object + 4) = v12;
        _os_log_error_impl(&dword_1C59C6000, v15, OS_LOG_TYPE_ERROR, "Failed to register: %s is already registered.", (uint8_t *)object, 0xCu);
        char v8 = 1;
        size_t v14 = (std::__shared_weak_count *)v54;
        if (!v54) {
          goto LABEL_31;
        }
      }
      else
      {
        char v8 = 1;
        size_t v14 = (std::__shared_weak_count *)v54;
        if (!v54) {
          goto LABEL_31;
        }
      }
    }
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
LABEL_31:
    if (SBYTE7(v53) < 0) {
      operator delete(__p[0]);
    }
    if (!v13) {
      break;
    }
    xpc_object_t v16 = (uint64_t *)v6[1];
    if (v16)
    {
      do
      {
        uint64_t v17 = (uint64_t **)v16;
        xpc_object_t v16 = (uint64_t *)*v16;
      }
      while (v16);
    }
    else
    {
      do
      {
        uint64_t v17 = (uint64_t **)v6[2];
        BOOL v18 = *v17 == v6;
        xpc_object_t v6 = (uint64_t *)v17;
      }
      while (!v18);
    }
    xpc_object_t v6 = (uint64_t *)v17;
  }
  while (v17 != v7);
  if (v8)
  {
    uint64_t v19 = 3760250880;
    long long v20 = v51;
    goto LABEL_89;
  }
LABEL_44:
  xpc_object_t v21 = (std::__shared_weak_count *)operator new(0x28uLL);
  v21->__shared_owners_ = 0;
  v21->__shared_weak_owners_ = 0;
  v21->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210F9B0;
  unint64_t v22 = *(NSObject **)(v3 + 176);
  if (v22)
  {
    dispatch_retain(*(dispatch_object_t *)(v3 + 176));
    dispatch_group_enter(v22);
  }
  v21[1].__vftable = (std::__shared_weak_count_vtbl *)xpc_null_create();
  v21[1].__shared_owners_ = (uint64_t)v22;
  if (v22)
  {
    dispatch_retain(v22);
    std::string::size_type shared_owners = v21[1].__shared_owners_;
    if (shared_owners) {
      dispatch_group_enter(shared_owners);
    }
    dispatch_group_leave(v22);
    dispatch_release(v22);
  }
  p_std::string::size_type shared_owners = &v21->__shared_owners_;
  uint64_t v24 = v1;
  uint64_t v25 = v3;
  int v26 = *v7;
  int v27 = (uint64_t **)(v3 + 160);
  if (*v7)
  {
    if (SHIBYTE(v55[2]) >= 0) {
      uint64_t v28 = v55;
    }
    else {
      uint64_t v28 = (void **)v55[0];
    }
    if (SHIBYTE(v55[2]) >= 0) {
      size_t v29 = (void *)HIBYTE(v55[2]);
    }
    else {
      size_t v29 = v55[1];
    }
    while (1)
    {
      int v27 = (uint64_t **)v26;
      uint64_t v32 = (uint64_t *)v26[4];
      size_t v30 = v26 + 4;
      __int16 v31 = v32;
      int v33 = *((char *)v30 + 23);
      if (v33 >= 0) {
        xpc_object_t v34 = v30;
      }
      else {
        xpc_object_t v34 = v31;
      }
      if (v33 >= 0) {
        size_t v35 = *((unsigned __int8 *)v30 + 23);
      }
      else {
        size_t v35 = v30[1];
      }
      if (v35 >= (unint64_t)v29) {
        size_t v36 = (size_t)v29;
      }
      else {
        size_t v36 = v35;
      }
      int v37 = memcmp(v28, v34, v36);
      if (v37)
      {
        if (v37 < 0) {
          goto LABEL_57;
        }
LABEL_71:
        int v38 = memcmp(v34, v28, v36);
        if (v38)
        {
          if ((v38 & 0x80000000) == 0) {
            goto LABEL_83;
          }
        }
        else if (v35 >= (unint64_t)v29)
        {
LABEL_83:
          size_t v39 = (char *)v27;
          long long v20 = v51;
          uint64_t v1 = v24;
          goto LABEL_84;
        }
        int v26 = v27[1];
        if (!v26)
        {
          uint64_t v7 = v27 + 1;
          break;
        }
      }
      else
      {
        if ((unint64_t)v29 >= v35) {
          goto LABEL_71;
        }
LABEL_57:
        int v26 = *v27;
        uint64_t v7 = v27;
        if (!*v27) {
          break;
        }
      }
    }
  }
  size_t v39 = (char *)operator new(0x48uLL);
  size_t v40 = (std::string *)(v39 + 32);
  uint64_t v1 = v24;
  if (SHIBYTE(v55[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v40, (const std::string::value_type *)v55[0], (std::string::size_type)v55[1]);
  }
  else
  {
    *(_OWORD *)&v40->__r_.__value_.__l.__data_ = *(_OWORD *)v55;
    *((void **)v39 + 6) = v55[2];
  }
  *((void *)v39 + 7) = 0;
  *((void *)v39 + 8) = 0;
  *(void *)size_t v39 = 0;
  *((void *)v39 + 1) = 0;
  *((void *)v39 + 2) = v27;
  std::__shared_weak_count *v7 = (uint64_t *)v39;
  uint64_t v41 = **(void **)(v25 + 152);
  uint64_t v42 = (uint64_t *)v39;
  if (v41)
  {
    *(void *)(v25 + 152) = v41;
    uint64_t v42 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v25 + 160), v42);
  ++*(void *)(v25 + 168);
  long long v20 = v51;
LABEL_84:
  atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v43 = (std::__shared_weak_count *)*((void *)v39 + 8);
  *((void *)v39 + 7) = v21 + 1;
  *((void *)v39 + 8) = v21;
  if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_87:
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  else if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
    goto LABEL_87;
  }
  uint64_t v19 = 0;
LABEL_89:
  xpc_object_t v44 = xpc_null_create();
  unint64_t v45 = (void (**)(xpc_object_t, uint64_t, void **))v20[2];
  __p[0] = v44;
  xpc_object_t v46 = xpc_null_create();
  v45[2](v45, v19, __p);
  xpc_release(__p[0]);
  xpc_release(v46);
  if (SHIBYTE(v55[2]) < 0) {
    operator delete(v55[0]);
  }
  xpc_release(v50);
  xpc_object_t v47 = v20[2];
  if (v47) {
    _Block_release(v47);
  }
  xpc_release(*v20);
  operator delete(v20);
  uint64_t v48 = (std::__shared_weak_count *)v1[2];
  if (v48 && !atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
  operator delete(v1);
}

void sub_1C5B70FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, atomic_ullong *a11, uint64_t a12, xpc_object_t object, xpc_object_t *a14, xpc_object_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,xpc_object_t a29)
{
  uint64_t v32 = v30;
  operator delete(v32);
  if (!atomic_fetch_add(a11, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  xpc_object_t v34 = a14[2];
  if (v34) {
    _Block_release(v34);
  }
  xpc_release(*a14);
  operator delete(a14);
  size_t v35 = (std::__shared_weak_count *)v29[2];
  if (v35)
  {
    if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  operator delete(v29);
  _Unwind_Resume(a1);
}

void sub_1C5B7116C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void std::__shared_ptr_emplace<LogTrackerDomainInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210F9B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LogTrackerDomainInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210F9B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<LogTrackerDomainInfo>::__on_zero_shared(uint64_t a1)
{
  size_t v2 = *(NSObject **)(a1 + 32);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 32);
    if (v3) {
      dispatch_release(v3);
    }
  }
  xpc_release(*(xpc_object_t *)(a1 + 24));
  *(void *)(a1 + 24) = 0;
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb2_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  __p[3] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 8);
  memset(v34, 170, sizeof(v34));
  xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)v2, (const char *)*MEMORY[0x1E4F4C5A8]);
  *(void *)xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    *(void *)xpc_object_t object = xpc_null_create();
  }
  memset(__p, 0, 24);
  xpc::dyn_cast_or_default();
  xpc_release(*(xpc_object_t *)object);
  xpc_object_t v5 = *(void **)(v3 + 152);
  if (v5 != (void *)(v3 + 160))
  {
    if (SHIBYTE(v34[2]) >= 0) {
      xpc_object_t v6 = v34;
    }
    else {
      xpc_object_t v6 = (void **)v34[0];
    }
    while (1)
    {
      uint64_t v7 = *((char *)v5 + 55) >= 0 ? (const char *)(v5 + 4) : (const char *)v5[4];
      if (!strcasecmp(v7, (const char *)v6)) {
        break;
      }
      char v8 = (void *)v5[1];
      if (v8)
      {
        do
        {
          long long v9 = v8;
          char v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          long long v9 = (void *)v5[2];
          BOOL v10 = *v9 == (void)v5;
          xpc_object_t v5 = v9;
        }
        while (!v10);
      }
      xpc_object_t v5 = v9;
      if (v9 == (void *)(v3 + 160)) {
        goto LABEL_19;
      }
    }
    uint64_t v15 = (void *)v5[7];
    size_t v14 = (std::__shared_weak_count *)v5[8];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    xpc_object_t v16 = (void *)*MEMORY[0x1E4F4C1D0];
    __p[0] = (void *)v2;
    __p[1] = v16;
    xpc::dict::object_proxy::operator xpc::dict((uint64_t)__p, object);
    uint64_t v17 = *(void *)object;
    *(void *)xpc_object_t object = xpc_null_create();
    BOOL v18 = (void *)*v15;
    void *v15 = v17;
    xpc_release(v18);
    xpc_release(*(xpc_object_t *)object);
    uint64_t v19 = v15[1];
    v15[1] = 0;
    if (v19)
    {
      dispatch_group_leave(v19);
      dispatch_release(v19);
    }
    long long v20 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      int v26 = v34;
      if (SHIBYTE(v34[2]) < 0) {
        int v26 = (void **)v34[0];
      }
      LODWORD(__p[0]) = 136315138;
      *(void **)((char *)__p + 4) = v26;
      _os_log_debug_impl(&dword_1C59C6000, v20, OS_LOG_TYPE_DEBUG, "#D Received log domain: %s", (uint8_t *)__p, 0xCu);
      long long v20 = *(NSObject **)(v3 + 88);
      if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_29;
      }
    }
    else if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
LABEL_29:
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        uint64_t v11 = 0;
      }
      else
      {
        uint64_t v11 = 0;
      }
      goto LABEL_33;
    }
    int v27 = (char *)MEMORY[0x1C8795DE0](*v15);
    memset(__p, 170, 24);
    size_t v28 = strlen(v27);
    if (v28 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v29 = (void *)v28;
    if (v28 >= 0x17)
    {
      uint64_t v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v28 | 7) != 0x17) {
        uint64_t v31 = v28 | 7;
      }
      uint64_t v32 = v31 + 1;
      size_t v30 = operator new(v31 + 1);
      __p[1] = v29;
      xpc_object_t __p[2] = (void *)(v32 | 0x8000000000000000);
      __p[0] = v30;
    }
    else
    {
      HIBYTE(__p[2]) = v28;
      size_t v30 = __p;
      if (!v28) {
        goto LABEL_53;
      }
    }
    memcpy(v30, v27, (size_t)v29);
LABEL_53:
    *((unsigned char *)v29 + (void)v30) = 0;
    free(v27);
    int v33 = __p;
    if (SHIBYTE(__p[2]) < 0) {
      int v33 = (void **)__p[0];
    }
    *(_DWORD *)xpc_object_t object = 136315138;
    *(void *)&xpc_object_t object[4] = v33;
    _os_log_debug_impl(&dword_1C59C6000, v20, OS_LOG_TYPE_DEBUG, "#D Received log summary: %s", object, 0xCu);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_29;
  }
LABEL_19:
  uint64_t v11 = 3760250880;
  int v12 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    int v13 = v34;
    if (SHIBYTE(v34[2]) < 0) {
      int v13 = (void **)v34[0];
    }
    LODWORD(__p[0]) = 136315138;
    *(void **)((char *)__p + 4) = v13;
    _os_log_error_impl(&dword_1C59C6000, v12, OS_LOG_TYPE_ERROR, "Failed to find log summary domain with %s", (uint8_t *)__p, 0xCu);
  }
LABEL_33:
  xpc_object_t v21 = xpc_null_create();
  uint64_t v22 = *(void *)(v2 + 16);
  __p[0] = v21;
  xpc_object_t v23 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, void **))(v22 + 16))(v22, v11, __p);
  xpc_release(__p[0]);
  xpc_release(v23);
  if ((SHIBYTE(v34[2]) & 0x80000000) == 0)
  {
    uint64_t v24 = *(const void **)(v2 + 16);
    if (!v24) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  operator delete(v34[0]);
  uint64_t v24 = *(const void **)(v2 + 16);
  if (v24) {
LABEL_37:
  }
    _Block_release(v24);
LABEL_38:
  xpc_release(*(xpc_object_t *)v2);
  operator delete((void *)v2);
  uint64_t v25 = (std::__shared_weak_count *)a1[2];
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  operator delete(a1);
}

void sub_1C5B716F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, xpc_object_t a16, uint64_t a17, xpc_object_t object, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb3_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 8);
  xpc_object_t v4 = _os_activity_create(&dword_1C59C6000, "Dump trace", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
  state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
  os_activity_scope_enter(v4, &state);
  os_activity_scope_leave(&state);
  memset(v48, 170, sizeof(v48));
  xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)v2, (const char *)*MEMORY[0x1E4F4C268]);
  state.opaque[0] = (uint64_t)value;
  if (value) {
    xpc_retain(value);
  }
  else {
    state.opaque[0] = (uint64_t)xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)v48, (xpc *)&state, (const object *)*MEMORY[0x1E4F4C630], v6);
  xpc_release((xpc_object_t)state.opaque[0]);
  memset(__p, 170, sizeof(__p));
  uint64_t v7 = (const char *)*MEMORY[0x1E4F4CA98];
  xpc_object_t v8 = xpc_dictionary_get_value(*(xpc_object_t *)v2, (const char *)*MEMORY[0x1E4F4CA98]);
  state.opaque[0] = (uint64_t)v8;
  if (v8) {
    xpc_retain(v8);
  }
  else {
    state.opaque[0] = (uint64_t)xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)__p, (xpc *)&state, (const object *)"", v9);
  xpc_release((xpc_object_t)state.opaque[0]);
  BOOL v10 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = __p;
    if (SHIBYTE(__p[2]) < 0) {
      uint64_t v11 = (void **)__p[0];
    }
    LODWORD(state.opaque[0]) = 136315138;
    *(uint64_t *)((char *)state.opaque + 4) = (uint64_t)v11;
    _os_log_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_DEFAULT, "#I Dumping log with Reason: \"%s\"", (uint8_t *)&state, 0xCu);
  }
  if (SHIBYTE(v48[2]) >= 0) {
    size_t v12 = HIBYTE(v48[2]);
  }
  else {
    size_t v12 = (size_t)v48[1];
  }
  if (v12 != strlen((const char *)*MEMORY[0x1E4F4CD08])
    || (SHIBYTE(v48[2]) >= 0 ? (int v13 = v48) : (int v13 = (void **)v48[0]),
        memcmp(v13, (const void *)*MEMORY[0x1E4F4CD08], v12)))
  {
    size_t v14 = *(NSObject **)v2;
    xpc_object_t v46 = v14;
    if (v14)
    {
      xpc_retain(v14);
      uint64_t v15 = *(const void **)(v2 + 16);
      if (v15)
      {
LABEL_21:
        xpc_object_t v16 = _Block_copy(v15);
LABEL_24:
        unint64_t v45 = v16;
        LogTracker::dumpLogInternal_sync(v3, (xpc_object_t *)&v46, &v45);
        if (v16) {
          _Block_release(v16);
        }
        xpc_release(v14);
        xpc_object_t v46 = 0;
        goto LABEL_27;
      }
    }
    else
    {
      size_t v14 = xpc_null_create();
      xpc_object_t v46 = v14;
      uint64_t v15 = *(const void **)(v2 + 16);
      if (v15) {
        goto LABEL_21;
      }
    }
    xpc_object_t v16 = 0;
    goto LABEL_24;
  }
  xpc_object_t v24 = xpc_string_create((const char *)*MEMORY[0x1E4F4F948]);
  if (!v24) {
    xpc_object_t v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)v2, v7, v24);
  xpc_object_t v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  xpc_object_t v26 = xpc_null_create();
  uint64_t v27 = *(void *)(v2 + 16);
  state.opaque[0] = (uint64_t)v26;
  xpc_object_t v28 = xpc_null_create();
  (*(void (**)(uint64_t, void, os_activity_scope_state_s *))(v27 + 16))(v27, 0, &state);
  xpc_release((xpc_object_t)state.opaque[0]);
  xpc_release(v28);
  xpc_object_t v29 = *(xpc_object_t *)v2;
  unint64_t v45 = v29;
  xpc_object_t v46 = 0;
  if (v29)
  {
    xpc_retain(v29);
  }
  else
  {
    xpc_object_t v29 = xpc_null_create();
    unint64_t v45 = v29;
  }
  LogTracker::jsonSummary_sync((void *)v3, &v46, (xpc_object_t *)&v45);
  xpc_release(v29);
  unint64_t v45 = 0;
LABEL_27:
  if (!TelephonyUtilIsCarrierBuild()) {
    goto LABEL_70;
  }
  uint64_t IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0 || LogTracker::isDefaultCarrierProfileInstalled((LogTracker *)IsInternalBuild)) {
    goto LABEL_70;
  }
  state.opaque[0] = MEMORY[0x1E4F143A8];
  state.opaque[1] = 3321888768;
  xpc_object_t v50 = ___ZZZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEvEUb3_ENKUlvE_clEv_block_invoke;
  xpc_object_t v51 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  uint64_t v52 = v3;
  uint64_t v53 = *(void *)(v2 + 24);
  BOOL v18 = *(std::__shared_weak_count **)(v2 + 32);
  unint64_t v54 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = _Block_copy(&state);
  long long v20 = *(NSObject **)(v3 + 136);
  if (v20) {
    dispatch_retain(*(dispatch_object_t *)(v3 + 136));
  }
  unint64_t v43 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v44 = 0xAAAAAAAAAAAAAAAALL;
  GetABMLogServer(&v41);
  abm::HelperClient::create();
  xpc_object_t v21 = v42;
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  xpc_object_t v22 = xpc_dictionary_create(0, 0, 0);
  if (v22 || (xpc_object_t v22 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v22) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v22);
      xpc_object_t v23 = v22;
    }
    else
    {
      xpc_object_t v23 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v23 = xpc_null_create();
    xpc_object_t v22 = 0;
  }
  xpc_release(v22);
  xpc_object_t v30 = xpc_string_create((const char *)*MEMORY[0x1E4F47250]);
  if (!v30) {
    xpc_object_t v30 = xpc_null_create();
  }
  xpc_dictionary_set_value(v23, (const char *)*MEMORY[0x1E4F470D8], v30);
  xpc_object_t v31 = xpc_null_create();
  xpc_release(v30);
  xpc_release(v31);
  xpc_object_t v32 = xpc_BOOL_create(1);
  if (!v32) {
    xpc_object_t v32 = xpc_null_create();
  }
  xpc_dictionary_set_value(v23, (const char *)*MEMORY[0x1E4F47220], v32);
  xpc_object_t v33 = xpc_null_create();
  xpc_release(v32);
  xpc_release(v33);
  xpc_object_t v40 = v23;
  if (v23)
  {
    xpc_retain(v23);
    if (v19) {
      goto LABEL_55;
    }
LABEL_86:
    long long aBlock = 0;
    xpc_object_t object = v20;
    if (!v20) {
      goto LABEL_57;
    }
    goto LABEL_56;
  }
  xpc_object_t v40 = xpc_null_create();
  if (!v19) {
    goto LABEL_86;
  }
LABEL_55:
  long long aBlock = _Block_copy(v19);
  xpc_object_t object = v20;
  if (v20) {
LABEL_56:
  }
    dispatch_retain(v20);
LABEL_57:
  abm::HelperClient::perform();
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(v40);
  xpc_release(v23);
  xpc_object_t v34 = (std::__shared_weak_count *)v44;
  if (v44 && !atomic_fetch_add((atomic_ullong *volatile)(v44 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  if (v20) {
    dispatch_release(v20);
  }
  if (v19) {
    _Block_release(v19);
  }
  if (v54) {
    std::__shared_weak_count::__release_weak(v54);
  }
LABEL_70:
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v48[2]) & 0x80000000) == 0) {
      goto LABEL_72;
    }
LABEL_75:
    operator delete(v48[0]);
    if (!v4) {
      goto LABEL_77;
    }
    goto LABEL_76;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v48[2]) < 0) {
    goto LABEL_75;
  }
LABEL_72:
  if (v4) {
LABEL_76:
  }
    os_release(v4);
LABEL_77:
  size_t v35 = *(std::__shared_weak_count **)(v2 + 32);
  if (v35) {
    std::__shared_weak_count::__release_weak(v35);
  }
  size_t v36 = *(const void **)(v2 + 16);
  if (v36) {
    _Block_release(v36);
  }
  xpc_release(*(xpc_object_t *)v2);
  operator delete((void *)v2);
  int v37 = (std::__shared_weak_count *)a1[2];
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  operator delete(a1);
}

void sub_1C5B71F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, dispatch_object_t object, xpc_object_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,xpc_object_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEvEUb3_ENKUlvE_clEv_block_invoke(void *a1, unsigned int *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      uint64_t v9 = *a2;
      if (v9)
      {
        BOOL v10 = *(NSObject **)(v5 + 88);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          TelephonyXPC::Result::toString(v9, (uint64_t)__p);
          if (v13 >= 0) {
            uint64_t v11 = __p;
          }
          else {
            uint64_t v11 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136315138;
          uint64_t v15 = v11;
          _os_log_error_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_ERROR, "Failed to install profile. Result: %s", buf, 0xCu);
          if (v13 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb4_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void **)*a1;
  xpc_object_t v4 = *(xpc_object_t *)(*a1 + 8);
  xpc_object_t v43 = v4;
  if (!v4)
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v43 = v4;
    uint64_t v5 = (void *)v2[2];
    if (!v5) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  xpc_retain(v4);
  uint64_t v5 = (void *)v2[2];
  if (v5) {
LABEL_5:
  }
    uint64_t v5 = _Block_copy(v5);
LABEL_6:
  long long aBlock = v5;
  LogTracker::setProperty_sync(v3, &v43, (uint64_t *)&aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(v4);
  xpc_object_t v43 = 0;
  memset(v41, 170, sizeof(v41));
  xpc_object_t value = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E4F4C1A0]);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  memset(&__dst, 0, sizeof(__dst));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  xpc_release(object[0]);
  memset(object, 170, sizeof(object));
  xpc_object_t v7 = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E4F4C6A8]);
  v39[0] = v7;
  if (v7) {
    xpc_retain(v7);
  }
  else {
    v39[0] = xpc_null_create();
  }
  memset(&__dst, 0, sizeof(__dst));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  xpc_release(v39[0]);
  memset(v39, 170, sizeof(v39));
  xpc_object_t v8 = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E4F4C800]);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  if (v8) {
    xpc_retain(v8);
  }
  else {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  memset(&__dst, 0, sizeof(__dst));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  xpc_release(__p.__r_.__value_.__l.__data_);
  uint64_t v9 = (const void *)*MEMORY[0x1E4F4C208];
  size_t v10 = strlen((const char *)*MEMORY[0x1E4F4C208]);
  if (v10 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v11 = v10;
  if (v10 >= 0x17)
  {
    uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v13 = v10 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (std::string *)operator new(v13 + 1);
    __dst.__r_.__value_.__l.__size_ = v11;
    __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_30;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v10;
  p_dst = &__dst;
  if (v10) {
LABEL_30:
  }
    memmove(p_dst, v9, v11);
  p_dst->__r_.__value_.__s.__data_[v11] = 0;
  if (SHIBYTE(v41[2]) >= 0) {
    uint64_t v15 = v41;
  }
  else {
    uint64_t v15 = (void **)v41[0];
  }
  char v16 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v17 = &__dst;
  }
  else {
    uint64_t v17 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if (strcasecmp((const char *)v15, (const char *)v17))
  {
    BOOL v19 = 0;
    if ((v16 & 0x80) == 0) {
      goto LABEL_39;
    }
LABEL_59:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (!v19) {
      goto LABEL_75;
    }
    goto LABEL_60;
  }
  long long v20 = (const void *)*MEMORY[0x1E4F4CB98];
  size_t v21 = strlen((const char *)*MEMORY[0x1E4F4CB98]);
  if (v21 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v22 = v21;
  if (v21 >= 0x17)
  {
    uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v24 = v21 | 7;
    }
    uint64_t v25 = v24 + 1;
    p_p = (std::string *)operator new(v24 + 1);
    __p.__r_.__value_.__l.__size_ = v22;
    __p.__r_.__value_.__r.__words[2] = v25 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    goto LABEL_48;
  }
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = v21;
  p_p = &__p;
  if (v21) {
LABEL_48:
  }
    memmove(p_p, v20, v22);
  p_p->__r_.__value_.__s.__data_[v22] = 0;
  if (SHIBYTE(object[2]) >= 0) {
    xpc_object_t v26 = object;
  }
  else {
    xpc_object_t v26 = (xpc_object_t *)object[0];
  }
  int v27 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  xpc_object_t v28 = (void *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    xpc_object_t v29 = &__p;
  }
  else {
    xpc_object_t v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  BOOL v19 = strcasecmp((const char *)v26, (const char *)v29) == 0;
  if (v27 < 0)
  {
    operator delete(v28);
    if ((*((unsigned char *)&__dst.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_59;
    }
  }
  else if ((*((unsigned char *)&__dst.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    goto LABEL_59;
  }
LABEL_39:
  if (!v19) {
    goto LABEL_75;
  }
LABEL_60:
  if (SHIBYTE(v39[2]) >= 0) {
    xpc_object_t v30 = v39;
  }
  else {
    xpc_object_t v30 = (xpc_object_t *)v39[0];
  }
  int v31 = abm::helper::asEnum((abm::helper *)v30, v18);
  xpc_object_t v32 = v3[11];
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
  {
    size_t v36 = v39;
    if (SHIBYTE(v39[2]) < 0) {
      size_t v36 = (xpc_object_t *)v39[0];
    }
    LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
    _os_log_debug_impl(&dword_1C59C6000, v32, OS_LOG_TYPE_DEBUG, "#D Selected Config: %s", (uint8_t *)&__dst, 0xCu);
  }
  memset(&__p, 170, sizeof(__p));
  xpc_object_t v33 = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E4F4D120]);
  xpc_object_t v37 = v33;
  if (v33) {
    xpc_retain(v33);
  }
  else {
    xpc_object_t v37 = xpc_null_create();
  }
  memset(&__dst, 0, sizeof(__dst));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  xpc_release(v37);
  xpc_object_t v37 = xpc_null_create();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string __dst = __p;
  }
  LogTracker::updateLoggingSettings_sync(v3, v31, (std::string::size_type *)&v37, (uint64_t)&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  xpc_release(v37);
  xpc_object_t v37 = 0;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_75:
    if ((SHIBYTE(v39[2]) & 0x80000000) == 0) {
      goto LABEL_76;
    }
    goto LABEL_81;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v39[2]) & 0x80000000) == 0)
  {
LABEL_76:
    if ((SHIBYTE(object[2]) & 0x80000000) == 0) {
      goto LABEL_77;
    }
    goto LABEL_82;
  }
LABEL_81:
  operator delete(v39[0]);
  if ((SHIBYTE(object[2]) & 0x80000000) == 0)
  {
LABEL_77:
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_78;
    }
    goto LABEL_83;
  }
LABEL_82:
  operator delete(object[0]);
  if ((SHIBYTE(v41[2]) & 0x80000000) == 0)
  {
LABEL_78:
    xpc_object_t v34 = (const void *)v2[2];
    if (!v34) {
      goto LABEL_85;
    }
    goto LABEL_84;
  }
LABEL_83:
  operator delete(v41[0]);
  xpc_object_t v34 = (const void *)v2[2];
  if (v34) {
LABEL_84:
  }
    _Block_release(v34);
LABEL_85:
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  size_t v35 = (std::__shared_weak_count *)a1[2];
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  operator delete(a1);
}

void sub_1C5B72980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, xpc_object_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,xpc_object_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *aBlock)
{
  xpc_release(object);
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  int v38 = *(const void **)(v36 + 16);
  if (v38) {
    _Block_release(v38);
  }
  xpc_release(*(xpc_object_t *)(v36 + 8));
  operator delete((void *)v36);
  size_t v39 = (std::__shared_weak_count *)v35[2];
  if (v39)
  {
    if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  operator delete(v35);
  _Unwind_Resume(a1);
}

void sub_1C5B72B90(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t ___ZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c39_ZTSNSt3__110shared_ptrIK10LogTrackerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__110shared_ptrIK10LogTrackerEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<LogTracker>::execute_wrapped<LogTracker::initialize(dispatch::group_session)::$_1>(LogTracker::initialize(dispatch::group_session)::$_1 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<LogTracker::initialize(dispatch::group_session)::$_1,dispatch_queue_s *::default_delete<LogTracker::initialize(dispatch::group_session)::$_1>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(LogTracker ***)a1;
  LogTracker::finishInitialization_sync(**(LogTracker ***)a1);
  operator delete(v2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    xpc_object_t v4 = (void *)a1;
  }
  else
  {
    xpc_object_t v4 = (void *)a1;
  }
  operator delete(v4);
}

void sub_1C5B72D10(_Unwind_Exception *a1)
{
  operator delete(v2);
  xpc_object_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *LogDumpDB::create_default_global(LogDumpDB *this)
{
  uint64_t v2 = operator new(0x30uLL);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(v2 + 2), "com.apple.telephony.abm", "Log Dump History");
  *(void *)uint64_t v2 = &unk_1F21065F0;
  v2[4] = 10;
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  LogDumpDB::init((LogDumpDB *)v2);
  *(void *)this = v2;
  size_t result = operator new(0x20uLL);
  *size_t result = &unk_1F210FA38;
  result[1] = 0;
  result[2] = 0;
  result[3] = v2;
  *((void *)this + 1) = result;
  return result;
}

void sub_1C5B72E38(_Unwind_Exception *a1)
{
  void *v1 = v3;
  uint64_t v6 = v1[3];
  if (v6)
  {
    uint64_t v7 = v1[4];
    xpc_object_t v8 = (void *)v1[3];
    if (v7 != v6)
    {
      do
        ResetInfo::~ResetInfo((void **)(v7 - 112));
      while (v7 != v6);
      xpc_object_t v8 = *v4;
    }
    v1[4] = v6;
    operator delete(v8);
  }
  MEMORY[0x1C8794100](v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C5B72EC0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<LogDumpDB *,std::shared_ptr<LogDumpDB>::__shared_ptr_default_delete<LogDumpDB,LogDumpDB>,std::allocator<LogDumpDB>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<LogDumpDB *,std::shared_ptr<LogDumpDB>::__shared_ptr_default_delete<LogDumpDB,LogDumpDB>,std::allocator<LogDumpDB>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 24);
  if (!v1) {
    return;
  }
  void *v1 = &unk_1F21065F0;
  uint64_t v2 = v1[3];
  if (v2)
  {
    uint64_t v3 = v1[4];
    xpc_object_t v4 = (void *)v1[3];
    if (v3 == v2)
    {
LABEL_17:
      v1[4] = v2;
      operator delete(v4);
      goto LABEL_18;
    }
    while (1)
    {
      if (*(char *)(v3 - 1) < 0)
      {
        operator delete(*(void **)(v3 - 24));
        if ((*(char *)(v3 - 41) & 0x80000000) == 0)
        {
LABEL_8:
          if ((*(char *)(v3 - 65) & 0x80000000) == 0) {
            goto LABEL_9;
          }
          goto LABEL_13;
        }
      }
      else if ((*(char *)(v3 - 41) & 0x80000000) == 0)
      {
        goto LABEL_8;
      }
      operator delete(*(void **)(v3 - 64));
      if ((*(char *)(v3 - 65) & 0x80000000) == 0)
      {
LABEL_9:
        if (*(char *)(v3 - 89) < 0) {
          goto LABEL_14;
        }
        goto LABEL_5;
      }
LABEL_13:
      operator delete(*(void **)(v3 - 88));
      if (*(char *)(v3 - 89) < 0) {
LABEL_14:
      }
        operator delete(*(void **)(v3 - 112));
LABEL_5:
      v3 -= 112;
      if (v3 == v2)
      {
        xpc_object_t v4 = (void *)v1[3];
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  MEMORY[0x1C8794100](v1 + 1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<LogDumpDB *,std::shared_ptr<LogDumpDB>::__shared_ptr_default_delete<LogDumpDB,LogDumpDB>,std::allocator<LogDumpDB>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C5BCC5EALL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C5BCC5EALL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C5BCC5EALL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C5BCC5EALL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void dispatch::async<void ctu::SharedSynchronizable<LogTracker>::execute_wrapped<LogTracker::shutdown(dispatch::group_session)::$_0>(LogTracker::shutdown(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<LogTracker::shutdown(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<LogTracker::shutdown(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void **)*a1;
  if (v3[25])
  {
    os_state_remove_handler();
    v3[25] = 0;
  }
  xpc_object_t v4 = (std::__shared_weak_count *)v3[24];
  v3[23] = 0;
  v3[24] = 0;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = v2[1];
    if (!v5) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v5 = v2[1];
    if (!v5) {
      goto LABEL_9;
    }
  }
  dispatch_group_leave(v5);
  uint64_t v6 = v2[1];
  if (v6) {
    dispatch_release(v6);
  }
LABEL_9:
  operator delete(v2);
  uint64_t v7 = (std::__shared_weak_count *)a1[2];
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    xpc_object_t v8 = a1;
  }
  else
  {
    xpc_object_t v8 = a1;
  }
  operator delete(v8);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZNS3_20dumpLogInternal_syncEN3xpc4dictENS_5blockIU13block_pointerFviS7_EEEEUb_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSI_14default_deleteISD_EEEEENUlPvE_8__invokeESN_(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v135 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  *(void *)&value[1] = v2;
  uint64_t v3 = *(void **)v2;
  xpc_object_t v4 = _os_activity_create(&dword_1C59C6000, "Dump finished", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  state.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  state.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  os_activity_scope_enter(v4, (os_activity_scope_state_t)&state);
  os_activity_scope_leave((os_activity_scope_state_t)&state);
  uint64_t v5 = v3[11];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(_DWORD *)(v2 + 8);
    LODWORD(state.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(state.__r_.__value_.__r.__words[0]) = v6;
    _os_log_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_DEFAULT, "#I Log dump has finished. The result: 0x%x", (uint8_t *)&state, 8u);
  }
  memset(__p, 170, sizeof(__p));
  uint64_t v7 = (const char *)*MEMORY[0x1E4F4C4C8];
  xpc_object_t v8 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 16), (const char *)*MEMORY[0x1E4F4C4C8]);
  v129.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  if (v8) {
    xpc_retain(v8);
  }
  else {
    v129.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  Timestamp::Timestamp((Timestamp *)__s1);
  Timestamp::asString((uint64_t)__s1, 0, 9, &state);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(state.__r_.__value_.__l.__data_);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)__s1, (void *)__s1[1]);
  xpc_release(v129.__r_.__value_.__l.__data_);
  xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v10 = v9;
  uint64_t v11 = MEMORY[0x1E4F14590];
  if (v9)
  {
    xpc_object_t xdict = v9;
  }
  else
  {
    xpc_object_t v10 = xpc_null_create();
    xpc_object_t xdict = v10;
    if (!v10)
    {
      xpc_object_t v12 = xpc_null_create();
      xpc_object_t v10 = 0;
      goto LABEL_15;
    }
  }
  if (MEMORY[0x1C8795EB0](v10) == v11)
  {
    xpc_retain(v10);
    goto LABEL_16;
  }
  xpc_object_t v12 = xpc_null_create();
LABEL_15:
  xpc_object_t xdict = v12;
LABEL_16:
  xpc_release(v10);
  uint64_t v13 = (const object **)MEMORY[0x1E4F4F928];
  xpc_object_t v14 = xpc_string_create((const char *)*MEMORY[0x1E4F4F928]);
  if (!v14) {
    xpc_object_t v14 = xpc_null_create();
  }
  uint64_t v15 = (const char *)*MEMORY[0x1E4F4C7F8];
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C7F8], v14);
  xpc_object_t v16 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v16);
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v17 = __p;
  }
  else {
    uint64_t v17 = (void **)__p[0];
  }
  xpc_object_t v18 = xpc_string_create((const char *)v17);
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, v7, v18);
  xpc_object_t v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  int v20 = *(_DWORD *)(v2 + 8);
  if (v20 == -534716414) {
    int v20 = -534716415;
  }
  LODWORD(state.__r_.__value_.__l.__data_) = v20;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(v2 + 24), (unsigned int *)&state, &xdict);
  xpc_object_t v21 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 32), (const char *)*MEMORY[0x1E4F4C1E8]);
  state.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
  if (v21) {
    xpc_retain(v21);
  }
  else {
    state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  int v22 = xpc::dyn_cast_or_default((xpc *)&state, 0);
  xpc_release(state.__r_.__value_.__l.__data_);
  if (!v22)
  {
    memset(__s1, 170, 24);
    xpc_object_t v25 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 32), (const char *)*MEMORY[0x1E4F4C268]);
    state.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    if (v25) {
      xpc_retain(v25);
    }
    else {
      state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)__s1, (xpc *)&state, (const object *)*MEMORY[0x1E4F4C630], v26);
    xpc_release(state.__r_.__value_.__l.__data_);
    xpc_object_t v32 = (const void *)*MEMORY[0x1E4F4C4F8];
    xpc_object_t v33 = (xpc_object_t)strlen((const char *)*MEMORY[0x1E4F4C4F8]);
    xpc_object_t v34 = v33;
    if (SHIBYTE(__s1[2]) < 0)
    {
      if (v33 != (xpc_object_t)-1)
      {
        xpc_object_t v35 = __s1[1];
        if (__s1[1] >= v33) {
          xpc_object_t v37 = v33;
        }
        else {
          xpc_object_t v37 = __s1[1];
        }
        if (memcmp(__s1[0], v32, (size_t)v37)) {
          goto LABEL_58;
        }
        goto LABEL_55;
      }
    }
    else if (v33 != (xpc_object_t)-1)
    {
      xpc_object_t v35 = (xpc_object_t)HIBYTE(__s1[2]);
      if (HIBYTE(__s1[2]) >= (unint64_t)v33) {
        size_t v36 = (size_t)v33;
      }
      else {
        size_t v36 = HIBYTE(__s1[2]);
      }
      if (memcmp(__s1, v32, v36)) {
        goto LABEL_58;
      }
LABEL_55:
      if (v35 == v34)
      {
        int v38 = v3[11];
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(state.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1C59C6000, v38, OS_LOG_TYPE_DEFAULT, "#I Baseband Log collection will not trigger the post log collection", (uint8_t *)&state, 2u);
        }
        goto LABEL_221;
      }
LABEL_58:
      xpc_object_t v39 = xpc_null_create();
      if (MEMORY[0x1C8795EB0](*(void *)(v2 + 16)) != v11 || *(_DWORD *)(v2 + 8))
      {
        uint64_t v125 = v4;
        xpc_object_t v40 = *(xpc_object_t *)(v2 + 32);
        if (v40)
        {
          xpc_retain(*(xpc_object_t *)(v2 + 32));
        }
        else
        {
          xpc_object_t v40 = xpc_null_create();
          if (!v40)
          {
            xpc_object_t v123 = xpc_null_create();
            xpc_object_t v40 = 0;
            goto LABEL_69;
          }
        }
        if (MEMORY[0x1C8795EB0](v40) == v11)
        {
          xpc_retain(v40);
          xpc_object_t v123 = v40;
        }
        else
        {
          xpc_object_t v123 = xpc_null_create();
        }
LABEL_69:
        xpc_object_t v42 = xpc_null_create();
        xpc_release(v39);
        xpc_release(v42);
        xpc_release(v40);
        xpc_object_t v43 = (const void *)*MEMORY[0x1E4F4C198];
        size_t v44 = strlen((const char *)*MEMORY[0x1E4F4C198]);
        xpc_object_t v124 = v1;
        if (v44 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        std::string::size_type v45 = v44;
        if (v44 >= 0x17)
        {
          uint64_t v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v44 | 7) != 0x17) {
            uint64_t v47 = v44 | 7;
          }
          uint64_t v48 = v47 + 1;
          xpc_object_t v46 = (std::string *)operator new(v47 + 1);
          v129.__r_.__value_.__l.__size_ = v45;
          v129.__r_.__value_.__r.__words[2] = v48 | 0x8000000000000000;
          v129.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
        }
        else
        {
          *((unsigned char *)&v129.__r_.__value_.__s + 23) = v44;
          xpc_object_t v46 = &v129;
          if (!v44)
          {
LABEL_77:
            v46->__r_.__value_.__s.__data_[v45] = 0;
            memset(&state, 0, sizeof(state));
            if (prop::systemlogs::get((char *)&v129, (uint64_t)&state))
            {
              v132[0] = -1431655766;
              if (util::convert<int>(&state, v132, 0)) {
                xpc_object_t v49 = (const object *)v132[0];
              }
              else {
                xpc_object_t v49 = 0;
              }
              if ((SHIBYTE(state.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_85:
                if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v129.__r_.__value_.__l.__data_);
                }
                xpc_object_t v50 = (char *)*MEMORY[0x1E4F4C2F8];
                xpc_object_t v51 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 32), (const char *)*MEMORY[0x1E4F4C2F8]);
                state.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
                if (v51) {
                  xpc_retain(v51);
                }
                else {
                  state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
                }
                value[0] = xpc::dyn_cast_or_default((xpc *)&state, v49);
                xpc_release(state.__r_.__value_.__l.__data_);
                if ((TelephonyUtilIsInternalBuild() & 1) == 0)
                {
                  char IsCarrierBuild = TelephonyUtilIsCarrierBuild();
                  char v53 = value[0] == 2 ? IsCarrierBuild : 1;
                  if ((v53 & 1) == 0)
                  {
                    unint64_t v54 = v3[11];
                    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
                    {
                      LOWORD(state.__r_.__value_.__l.__data_) = 0;
                      _os_log_error_impl(&dword_1C59C6000, v54, OS_LOG_TYPE_ERROR, "Detected an internal log dump with SYSDIAGNOSE mode in customer build, overriding to OFF", (uint8_t *)&state, 2u);
                    }
                    value[0] = 0;
                  }
                }
                uint64_t IsInternalBuild = TelephonyUtilIsInternalBuild();
                if ((IsInternalBuild & 1) != 0
                  || (uint64_t IsInternalBuild = TelephonyUtilIsCarrierBuild(), IsInternalBuild))
                {
                  uint64_t CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
                }
                else
                {
                  uint64_t CompressionMode = 2;
                }
                std::string v57 = (const void *)*MEMORY[0x1E4F47258];
                size_t v58 = strlen((const char *)*MEMORY[0x1E4F47258]);
                if (v58 > 0x7FFFFFFFFFFFFFF7) {
                  std::string::__throw_length_error[abi:ne180100]();
                }
                std::string::size_type v59 = v58;
                if (v58 >= 0x17)
                {
                  uint64_t v61 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v58 | 7) != 0x17) {
                    uint64_t v61 = v58 | 7;
                  }
                  uint64_t v62 = v61 + 1;
                  size_t v60 = (std::string *)operator new(v61 + 1);
                  v129.__r_.__value_.__l.__size_ = v59;
                  v129.__r_.__value_.__r.__words[2] = v62 | 0x8000000000000000;
                  v129.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
                }
                else
                {
                  *((unsigned char *)&v129.__r_.__value_.__s + 23) = v58;
                  size_t v60 = &v129;
                  if (!v58)
                  {
LABEL_110:
                    v60->__r_.__value_.__s.__data_[v59] = 0;
                    memset(&state, 0, sizeof(state));
                    if (prop::compression::get((char *)&v129, (uint64_t)&state))
                    {
                      v132[0] = -1431655766;
                      if (util::convert<int>(&state, v132, 0)) {
                        uint64_t CompressionMode = v132[0];
                      }
                      else {
                        uint64_t CompressionMode = CompressionMode;
                      }
                    }
                    if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(state.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_116:
                        uint64_t v63 = (const char **)MEMORY[0x1E4F4D210];
                        key = v50;
                        if (value[0] == 2)
                        {
LABEL_117:
                          int v64 = 0;
                          BOOL v128 = 0;
                          char v65 = 1;
                          goto LABEL_140;
                        }
LABEL_120:
                        xpc_object_t v66 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 32), *v63);
                        state.__r_.__value_.__r.__words[0] = (std::string::size_type)v66;
                        if (v66) {
                          xpc_retain(v66);
                        }
                        else {
                          state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
                        }
                        int v64 = xpc::dyn_cast_or_default((xpc *)&state, (const object *)CompressionMode);
                        xpc_release(state.__r_.__value_.__l.__data_);
                        BOOL v128 = 0;
                        if (!v64)
                        {
                          char v65 = 1;
                          goto LABEL_140;
                        }
                        uint64_t v67 = (const void *)*MEMORY[0x1E4F47108];
                        size_t v68 = strlen((const char *)*MEMORY[0x1E4F47108]);
                        if (v68 > 0x7FFFFFFFFFFFFFF7) {
                          std::string::__throw_length_error[abi:ne180100]();
                        }
                        std::string::size_type v69 = v68;
                        if (v68 >= 0x17)
                        {
                          uint64_t v71 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v68 | 7) != 0x17) {
                            uint64_t v71 = v68 | 7;
                          }
                          uint64_t v72 = v71 + 1;
                          long long v70 = (std::string *)operator new(v71 + 1);
                          v129.__r_.__value_.__l.__size_ = v69;
                          v129.__r_.__value_.__r.__words[2] = v72 | 0x8000000000000000;
                          v129.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
                        }
                        else
                        {
                          *((unsigned char *)&v129.__r_.__value_.__s + 23) = v68;
                          long long v70 = &v129;
                          if (!v68) {
                            goto LABEL_133;
                          }
                        }
                        memmove(v70, v67, v69);
LABEL_133:
                        v70->__r_.__value_.__s.__data_[v69] = 0;
                        memset(&state, 0, sizeof(state));
                        if (prop::compression::get((char *)&v129, (uint64_t)&state)) {
                          util::convert<BOOL>(&state, &v128, 0);
                        }
                        if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(state.__r_.__value_.__l.__data_);
                        }
                        if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v129.__r_.__value_.__l.__data_);
                        }
                        char v65 = 0;
LABEL_140:
                        char v127 = 1;
                        long long v73 = (const char *)*MEMORY[0x1E4F4CBA8];
                        size_t v74 = strlen((const char *)*MEMORY[0x1E4F4CBA8]);
                        if (v74 > 0x7FFFFFFFFFFFFFF7) {
                          std::string::__throw_length_error[abi:ne180100]();
                        }
                        std::string::size_type v75 = v74;
                        if (v74 >= 0x17)
                        {
                          uint64_t v77 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v74 | 7) != 0x17) {
                            uint64_t v77 = v74 | 7;
                          }
                          uint64_t v78 = v77 + 1;
                          size_t v76 = (std::string *)operator new(v77 + 1);
                          v129.__r_.__value_.__l.__size_ = v75;
                          v129.__r_.__value_.__r.__words[2] = v78 | 0x8000000000000000;
                          v129.__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
                        }
                        else
                        {
                          *((unsigned char *)&v129.__r_.__value_.__s + 23) = v74;
                          size_t v76 = &v129;
                          if (!v74)
                          {
LABEL_148:
                            v76->__r_.__value_.__s.__data_[v75] = 0;
                            memset(&state, 0, sizeof(state));
                            if (prop::systemlogs::get((char *)&v129, (uint64_t)&state)) {
                              util::convert<BOOL>(&state, (BOOL *)&v127, 0);
                            }
                            if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0)
                            {
                              operator delete(state.__r_.__value_.__l.__data_);
                              if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                                goto LABEL_152;
                              }
                            }
                            else if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                            {
                              goto LABEL_152;
                            }
                            operator delete(v129.__r_.__value_.__l.__data_);
LABEL_152:
                            xpc_object_t v79 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 32), v73);
                            state.__r_.__value_.__r.__words[0] = (std::string::size_type)v79;
                            uint64_t v80 = v123;
                            if (v79) {
                              xpc_retain(v79);
                            }
                            else {
                              state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
                            }
                            char v127 = xpc::dyn_cast_or_default((xpc *)&state, (const object *)v127);
                            xpc_release(state.__r_.__value_.__l.__data_);
                            xpc_object_t v121 = v73;
                            memset(&state, 170, sizeof(state));
                            char v81 = (const void *)*MEMORY[0x1E4F4F928];
                            size_t v82 = strlen((const char *)*MEMORY[0x1E4F4F928]);
                            if (v82 > 0x7FFFFFFFFFFFFFF7) {
                              std::string::__throw_length_error[abi:ne180100]();
                            }
                            std::string::size_type v83 = v82;
                            int v84 = v64;
                            if (v82 >= 0x17)
                            {
                              uint64_t v86 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v82 | 7) != 0x17) {
                                uint64_t v86 = v82 | 7;
                              }
                              uint64_t v87 = v86 + 1;
                              p_std::string state = operator new(v86 + 1);
                              state.__r_.__value_.__l.__size_ = v83;
                              state.__r_.__value_.__r.__words[2] = v87 | 0x8000000000000000;
                              state.__r_.__value_.__r.__words[0] = (std::string::size_type)p_state;
                              xpc_object_t v4 = v125;
                            }
                            else
                            {
                              *((unsigned char *)&state.__r_.__value_.__s + 23) = v82;
                              p_std::string state = &state;
                              xpc_object_t v4 = v125;
                              if (!v82)
                              {
                                state.__r_.__value_.__s.__data_[0] = 0;
                                uint64_t v1 = v124;
                                if (v65) {
                                  goto LABEL_189;
                                }
                                goto LABEL_166;
                              }
                            }
                            memmove(p_state, v81, v83);
                            *((unsigned char *)p_state + v83) = 0;
                            uint64_t v1 = v124;
                            if (v65)
                            {
LABEL_189:
                              xpc_object_t v102 = xpc_int64_create(value[0]);
                              if (!v102) {
                                xpc_object_t v102 = xpc_null_create();
                              }
                              xpc_dictionary_set_value(v80, key, v102);
                              xpc_object_t v103 = xpc_null_create();
                              xpc_release(v102);
                              xpc_release(v103);
                              xpc_object_t v104 = xpc_int64_create(v84);
                              if (!v104) {
                                xpc_object_t v104 = xpc_null_create();
                              }
                              xpc_dictionary_set_value(v80, (const char *)*MEMORY[0x1E4F4D210], v104);
                              xpc_object_t v105 = xpc_null_create();
                              xpc_release(v104);
                              xpc_release(v105);
                              xpc_object_t v106 = xpc_BOOL_create(v128);
                              if (!v106) {
                                xpc_object_t v106 = xpc_null_create();
                              }
                              xpc_dictionary_set_value(v80, (const char *)*MEMORY[0x1E4F4CF88], v106);
                              xpc_object_t v107 = xpc_null_create();
                              xpc_release(v106);
                              xpc_release(v107);
                              if ((state.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                unint64_t v108 = &state;
                              }
                              else {
                                unint64_t v108 = (std::string *)state.__r_.__value_.__r.__words[0];
                              }
                              xpc_object_t v109 = xpc_string_create((const char *)v108);
                              if (!v109) {
                                xpc_object_t v109 = xpc_null_create();
                              }
                              xpc_dictionary_set_value(v80, v15, v109);
                              xpc_object_t v110 = xpc_null_create();
                              xpc_release(v109);
                              xpc_release(v110);
                              if (SHIBYTE(__p[2]) >= 0) {
                                uint64_t v111 = __p;
                              }
                              else {
                                uint64_t v111 = (void **)__p[0];
                              }
                              xpc_object_t v112 = xpc_string_create((const char *)v111);
                              if (!v112) {
                                xpc_object_t v112 = xpc_null_create();
                              }
                              xpc_dictionary_set_value(v80, v7, v112);
                              xpc_object_t v113 = xpc_null_create();
                              xpc_release(v112);
                              xpc_release(v113);
                              xpc_object_t v114 = xpc_BOOL_create(v127);
                              if (!v114) {
                                xpc_object_t v114 = xpc_null_create();
                              }
                              xpc_dictionary_set_value(v80, v121, v114);
                              xpc_object_t v115 = xpc_null_create();
                              xpc_release(v114);
                              xpc_release(v115);
                              ctu::fs::create_directory();
                              if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0) {
                                operator delete(state.__r_.__value_.__l.__data_);
                              }
                              xpc_object_t v116 = v80;
                              goto LABEL_210;
                            }
LABEL_166:
                            if ((TelephonyUtilIsInternalBuild() & 1) != 0
                              || TelephonyUtilIsCarrierBuild())
                            {
                              long long v120 = v3;
                              uint64_t v88 = (const void *)*MEMORY[0x1E4F4F940];
                              size_t v89 = strlen((const char *)*MEMORY[0x1E4F4F940]);
                              int v90 = SHIBYTE(__p[2]);
                              if (SHIBYTE(__p[2]) >= 0) {
                                size_t v91 = HIBYTE(__p[2]);
                              }
                              else {
                                size_t v91 = (size_t)__p[1];
                              }
                              std::string::size_type v92 = v91 + v89;
                              memset(&v129, 170, sizeof(v129));
                              if (v91 + v89 > 0x7FFFFFFFFFFFFFF7) {
                                std::string::__throw_length_error[abi:ne180100]();
                              }
                              size_t v93 = v89;
                              if (v92 > 0x16)
                              {
                                uint64_t v95 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
                                if ((v92 | 7) != 0x17) {
                                  uint64_t v95 = v92 | 7;
                                }
                                uint64_t v96 = v95 + 1;
                                int v94 = (std::string *)operator new(v95 + 1);
                                v129.__r_.__value_.__l.__size_ = v92;
                                v129.__r_.__value_.__r.__words[2] = v96 | 0x8000000000000000;
                                v129.__r_.__value_.__r.__words[0] = (std::string::size_type)v94;
                              }
                              else
                              {
                                memset(&v129, 0, sizeof(v129));
                                int v94 = &v129;
                                *((unsigned char *)&v129.__r_.__value_.__s + 23) = v91 + v89;
                              }
                              if (v93) {
                                memcpy(v94, v88, v93);
                              }
                              xpc_object_t v97 = (char *)v94 + v93;
                              if (v91)
                              {
                                if (v90 >= 0) {
                                  xpc_object_t v98 = __p;
                                }
                                else {
                                  xpc_object_t v98 = (void **)__p[0];
                                }
                                memmove(v97, v98, v91);
                              }
                              v97[v91] = 0;
                              uint64_t v1 = v124;
                              xpc_object_t v4 = v125;
                              xpc_object_t v99 = std::string::append(&v129, "/", 1uLL);
                              std::string::size_type v100 = v99->__r_.__value_.__r.__words[0];
                              *(void *)std::string::size_type v132 = v99->__r_.__value_.__l.__size_;
                              *(void *)((char *)&v132[1] + 3) = *(std::string::size_type *)((char *)&v99->__r_.__value_.__r.__words[1]
                                                                                            + 7);
                              char v101 = HIBYTE(v99->__r_.__value_.__r.__words[2]);
                              v99->__r_.__value_.__l.__size_ = 0;
                              v99->__r_.__value_.__r.__words[2] = 0;
                              v99->__r_.__value_.__r.__words[0] = 0;
                              if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0) {
                                operator delete(state.__r_.__value_.__l.__data_);
                              }
                              state.__r_.__value_.__r.__words[0] = v100;
                              state.__r_.__value_.__l.__size_ = *(void *)v132;
                              *(std::string::size_type *)((char *)&state.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v132[1] + 3);
                              *((unsigned char *)&state.__r_.__value_.__s + 23) = v101;
                              if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
                                operator delete(v129.__r_.__value_.__l.__data_);
                              }
                              uint64_t v3 = v120;
                              uint64_t v80 = v123;
                            }
                            goto LABEL_189;
                          }
                        }
                        memmove(v76, v73, v75);
                        goto LABEL_148;
                      }
                    }
                    else if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
                      goto LABEL_116;
                    }
                    operator delete(v129.__r_.__value_.__l.__data_);
                    uint64_t v63 = (const char **)MEMORY[0x1E4F4D210];
                    key = v50;
                    if (value[0] == 2) {
                      goto LABEL_117;
                    }
                    goto LABEL_120;
                  }
                }
                memmove(v60, v57, v59);
                goto LABEL_110;
              }
            }
            else
            {
              xpc_object_t v49 = 0;
              if ((SHIBYTE(state.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_85;
              }
            }
            operator delete(state.__r_.__value_.__l.__data_);
            goto LABEL_85;
          }
        }
        memmove(v46, v43, v45);
        goto LABEL_77;
      }
      xpc_object_t v41 = *(xpc_object_t *)(v2 + 16);
      if (v41)
      {
        xpc_retain(*(xpc_object_t *)(v2 + 16));
      }
      else
      {
        xpc_object_t v41 = xpc_null_create();
        if (!v41)
        {
          xpc_object_t v118 = xpc_null_create();
          xpc_object_t v41 = 0;
LABEL_238:
          xpc_object_t v119 = xpc_null_create();
          xpc_release(v39);
          xpc_release(v119);
          xpc_release(v41);
          xpc_object_t v116 = v118;
LABEL_210:
          if ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
          {
            state.__r_.__value_.__r.__words[0] = (std::string::size_type)v116;
            if (v116) {
              xpc_retain(v116);
            }
            else {
              state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            }
            LogTracker::postLogCollectionInternal_sync((uint64_t)v3, (xpc_object_t *)&state.__r_.__value_.__l.__data_);
            xpc_release(state.__r_.__value_.__l.__data_);
          }
          else
          {
            state.__r_.__value_.__r.__words[0] = (std::string::size_type)v116;
            if (v116) {
              xpc_retain(v116);
            }
            else {
              state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            }
            LogTracker::postLogCollectionExternal_sync(v3, (xpc_object_t *)&state.__r_.__value_.__l.__data_);
            xpc_release(state.__r_.__value_.__l.__data_);
          }
          state.__r_.__value_.__r.__words[0] = 0;
          xpc_release(v116);
LABEL_221:
          if ((SHIBYTE(__s1[2]) & 0x80000000) == 0) {
            goto LABEL_224;
          }
          xpc_object_t v31 = __s1[0];
          goto LABEL_223;
        }
      }
      if (MEMORY[0x1C8795EB0](v41) == v11)
      {
        xpc_retain(v41);
        xpc_object_t v118 = v41;
      }
      else
      {
        xpc_object_t v118 = xpc_null_create();
      }
      goto LABEL_238;
    }
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  memset(&state, 170, sizeof(state));
  xpc_object_t v23 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 16), v15);
  __s1[0] = v23;
  if (v23) {
    xpc_retain(v23);
  }
  else {
    __s1[0] = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)&state, (xpc *)__s1, *v13, v24);
  xpc_release(__s1[0]);
  int v27 = ctu::fs::remove_dir();
  xpc_object_t v28 = v3[11];
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    xpc_object_t v29 = "Failed";
    if (v27) {
      xpc_object_t v29 = "Succeeded";
    }
    xpc_object_t v30 = &state;
    if ((state.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      xpc_object_t v30 = (std::string *)state.__r_.__value_.__r.__words[0];
    }
    LODWORD(__s1[0]) = 136315394;
    *(xpc_object_t *)((char *)__s1 + 4) = (xpc_object_t)v29;
    WORD2(__s1[1]) = 2080;
    *(xpc_object_t *)((char *)&__s1[1] + 6) = v30;
    _os_log_impl(&dword_1C59C6000, v28, OS_LOG_TYPE_DEFAULT, "#I User requested to clear logs, %s to remove dump path: %s", (uint8_t *)__s1, 0x16u);
  }
  if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0)
  {
    xpc_object_t v31 = (xpc_object_t)state.__r_.__value_.__r.__words[0];
LABEL_223:
    operator delete(v31);
  }
LABEL_224:
  xpc_release(xdict);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if (!v4) {
      goto LABEL_229;
    }
    goto LABEL_228;
  }
  operator delete(__p[0]);
  if (v4) {
LABEL_228:
  }
    os_release(v4);
LABEL_229:
  _ZNSt3__110unique_ptrIZZN10LogTracker20dumpLogInternal_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS3_EEEEUb_E3__3NS_14default_deleteIS9_EEED1B8ne180100Ev((uint64_t *)&value[1]);
  uint64_t v117 = (std::__shared_weak_count *)v1[2];
  if (v117 && !atomic_fetch_add(&v117->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
    std::__shared_weak_count::__release_weak(v117);
  }
  operator delete(v1);
}

void sub_1C5B74298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, void *a13, void *a14, uint64_t a15, char a16, uint64_t a17, xpc_object_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,xpc_object_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t *_ZNSt3__110unique_ptrIZZN10LogTracker20dumpLogInternal_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS3_EEEEUb_E3__3NS_14default_deleteIS9_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 32));
    *(void *)(v2 + 32) = 0;
    uint64_t v3 = *(const void **)(v2 + 24);
    if (v3) {
      _Block_release(v3);
    }
    xpc_release(*(xpc_object_t *)(v2 + 16));
    operator delete((void *)v2);
  }
  return a1;
}

void dispatch::detail::group_notify<LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0>(dispatch_group_s *,dispatch_queue_s *,LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0::operator()((uint64_t *)a1);
  if (a1)
  {
    xpc_release(*(xpc_object_t *)(a1 + 24));
    *(void *)(a1 + 24) = 0;
    uint64_t v2 = *(NSObject **)(a1 + 16);
    if (v2)
    {
      dispatch_group_leave(v2);
      uint64_t v3 = *(NSObject **)(a1 + 16);
      if (v3) {
        dispatch_release(v3);
      }
    }
    xpc_object_t v4 = *(std::__shared_weak_count **)(a1 + 8);
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete((void *)a1);
  }
}

void sub_1C5B747A0(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    xpc_release(*(xpc_object_t *)(v1 + 24));
    *(void *)(v1 + 24) = 0;
    uint64_t v3 = *(NSObject **)(v1 + 16);
    if (v3)
    {
      dispatch_group_leave(v3);
      xpc_object_t v4 = *(NSObject **)(v1 + 16);
      if (v4) {
        dispatch_release(v4);
      }
    }
    uint64_t v5 = *(std::__shared_weak_count **)(v1 + 8);
    if (v5) {
      std::__shared_weak_count::__release_weak(v5);
    }
    operator delete((void *)v1);
  }
  _Unwind_Resume(exception_object);
}

void LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0::operator()(uint64_t *a1)
{
  uint64_t v169 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  if (!v2) {
    return;
  }
  uint64_t v3 = a1[4];
  xpc_object_t v4 = std::__shared_weak_count::lock(v2);
  if (!v4) {
    return;
  }
  uint64_t v5 = v4;
  uint64_t v6 = *a1;
  if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v6) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
    if (!v6) {
      return;
    }
  }
  memset(v164, 170, sizeof(v164));
  xpc_object_t v7 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x1E4F4C4C8]);
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
  if (v7) {
    xpc_retain(v7);
  }
  else {
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  Timestamp::Timestamp((Timestamp *)v163);
  Timestamp::asString(v8, 0, 9, &applier);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(applier.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(applier.__r_.__value_.__l.__data_);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v163, (void *)v163[1]);
  xpc_release(object.__r_.__value_.__l.__data_);
  memset(v163, 170, sizeof(v163));
  xpc_object_t v9 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x1E4F4C268]);
  applier.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
  if (v9) {
    xpc_retain(v9);
  }
  else {
    applier.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  xpc::dyn_cast_or_default(v163, (xpc *)&applier, (const object *)"", v10);
  xpc_release(applier.__r_.__value_.__l.__data_);
  memset(&object, 170, sizeof(object));
  uint64_t v11 = (const void *)*MEMORY[0x1E4F4F918];
  size_t v12 = strlen((const char *)*MEMORY[0x1E4F4F918]);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v15 = v12 | 7;
    }
    uint64_t v16 = v15 + 1;
    p_std::string object = (std::string *)operator new(v15 + 1);
    object.__r_.__value_.__l.__size_ = v13;
    object.__r_.__value_.__r.__words[2] = v16 | 0x8000000000000000;
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)p_object;
    goto LABEL_22;
  }
  *((unsigned char *)&object.__r_.__value_.__s + 23) = v12;
  p_std::string object = &object;
  if (v12) {
LABEL_22:
  }
    memmove(p_object, v11, v13);
  p_object->__r_.__value_.__s.__data_[v13] = 0;
  if (v163[2] >= 0) {
    uint64_t v17 = (const char *)v163;
  }
  else {
    uint64_t v17 = (const char *)v163[0];
  }
  size_t v18 = strlen((const char *)*MEMORY[0x1E4F4CD08]);
  if (!strncasecmp((const char *)*MEMORY[0x1E4F4CD08], v17, v18)) {
    std::string::__assign_external(&object, (const std::string::value_type *)*MEMORY[0x1E4F4F938]);
  }
  xpc_object_t v19 = (const char **)MEMORY[0x1E4F4F928];
  int v20 = (const void *)*MEMORY[0x1E4F4F928];
  size_t v21 = strlen((const char *)*MEMORY[0x1E4F4F928]);
  if (v21 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v22 = v21;
  if (v21 >= 0x17)
  {
    uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v24 = v21 | 7;
    }
    uint64_t v25 = v24 + 1;
    p_dst = (std::string *)operator new(v24 + 1);
    __dst.__r_.__value_.__l.__size_ = v22;
    __dst.__r_.__value_.__r.__words[2] = v25 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_35;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v21;
  p_dst = &__dst;
  if (v21) {
LABEL_35:
  }
    memmove(p_dst, v20, v22);
  p_dst->__r_.__value_.__s.__data_[v22] = 0;
  if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    xpc_object_t v26 = &object;
  }
  else {
    xpc_object_t v26 = (std::string *)object.__r_.__value_.__r.__words[0];
  }
  if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(object.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = object.__r_.__value_.__l.__size_;
  }
  xpc_object_t v28 = std::string::append(&__dst, (const std::string::value_type *)v26, size);
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v160.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v160.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v164[2]) >= 0) {
    xpc_object_t v30 = (const std::string::value_type *)v164;
  }
  else {
    xpc_object_t v30 = (const std::string::value_type *)v164[0];
  }
  if (SHIBYTE(v164[2]) >= 0) {
    std::string::size_type v31 = HIBYTE(v164[2]);
  }
  else {
    std::string::size_type v31 = (std::string::size_type)v164[1];
  }
  xpc_object_t v32 = std::string::append(&v160, v30, v31);
  long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  applier.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&applier.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  xpc_object_t v34 = (const void *)*MEMORY[0x1E4F4F958];
  size_t v35 = strlen((const char *)*MEMORY[0x1E4F4F958]);
  if (v35 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v36 = v35;
  if (v35 >= 0x17)
  {
    uint64_t v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17) {
      uint64_t v38 = v35 | 7;
    }
    uint64_t v39 = v38 + 1;
    p_p = operator new(v38 + 1);
    size_t v157 = v36;
    int64_t v158 = v39 | 0x8000000000000000;
    std::string __p = p_p;
    goto LABEL_55;
  }
  HIBYTE(v158) = v35;
  p_p = &__p;
  if (v35) {
LABEL_55:
  }
    memmove(p_p, v34, v36);
  *((unsigned char *)p_p + v36) = 0;
  if (v158 >= 0) {
    xpc_object_t v40 = (const std::string::value_type *)&__p;
  }
  else {
    xpc_object_t v40 = (const std::string::value_type *)__p;
  }
  if (v158 >= 0) {
    std::string::size_type v41 = HIBYTE(v158);
  }
  else {
    std::string::size_type v41 = v157;
  }
  xpc_object_t v42 = std::string::append(&applier, v40, v41);
  long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  v161.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v161.__r_.__value_.__l.__data_ = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v158) < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(applier.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_64:
      if ((SHIBYTE(v160.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_65;
      }
LABEL_72:
      operator delete(v160.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_66;
      }
LABEL_73:
      operator delete(__dst.__r_.__value_.__l.__data_);
      goto LABEL_66;
    }
  }
  else if ((SHIBYTE(applier.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_64;
  }
  operator delete(applier.__r_.__value_.__l.__data_);
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_72;
  }
LABEL_65:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_73;
  }
LABEL_66:
  xpc_object_t v44 = xpc_dictionary_create(0, 0, 0);
  uint64_t v45 = MEMORY[0x1E4F14590];
  if (v44 || (xpc_object_t v44 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v44) == v45)
    {
      xpc_retain(v44);
      xpc_object_t v46 = v44;
    }
    else
    {
      xpc_object_t v46 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v46 = xpc_null_create();
    xpc_object_t v44 = 0;
  }
  xpc_release(v44);
  if (MEMORY[0x1C8795EB0](v46) == v45)
  {
    xpc_object_t v47 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x1E4F4CA98]);
    v160.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
    if (v47) {
      xpc_retain(v47);
    }
    else {
      v160.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)&applier, (xpc *)&v160, (const object *)"", v48);
    if ((applier.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string applier = &applier;
    }
    else {
      p_std::string applier = (std::string *)applier.__r_.__value_.__r.__words[0];
    }
    xpc_object_t v50 = xpc_string_create((const char *)p_applier);
    if (!v50) {
      xpc_object_t v50 = xpc_null_create();
    }
    xpc_dictionary_set_value(v46, (const char *)*MEMORY[0x1E4F4CA90], v50);
    xpc_object_t v51 = xpc_null_create();
    xpc_release(v50);
    xpc_release(v51);
    if (SHIBYTE(applier.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(applier.__r_.__value_.__l.__data_);
    }
    xpc_release(v160.__r_.__value_.__l.__data_);
    if (SHIBYTE(v164[2]) >= 0) {
      uint64_t v52 = (const char *)v164;
    }
    else {
      uint64_t v52 = (const char *)v164[0];
    }
    xpc_object_t v53 = xpc_string_create(v52);
    if (!v53) {
      xpc_object_t v53 = xpc_null_create();
    }
    xpc_dictionary_set_value(v46, (const char *)*MEMORY[0x1E4F4C7F0], v53);
    xpc_object_t v54 = xpc_null_create();
    xpc_release(v53);
    xpc_release(v54);
    xpc_object_t v55 = xpc_string_create(*v19);
    if (!v55) {
      xpc_object_t v55 = xpc_null_create();
    }
    xpc_dictionary_set_value(v46, (const char *)*MEMORY[0x1E4F4C7E8], v55);
    xpc_object_t v56 = xpc_null_create();
    xpc_release(v55);
    xpc_release(v56);
    if (v163[2] >= 0) {
      std::string v57 = (const char *)v163;
    }
    else {
      std::string v57 = (const char *)v163[0];
    }
    xpc_object_t v58 = xpc_string_create(v57);
    if (!v58) {
      xpc_object_t v58 = xpc_null_create();
    }
    xpc_dictionary_set_value(v46, (const char *)*MEMORY[0x1E4F4CB88], v58);
    xpc_object_t v59 = xpc_null_create();
    xpc_release(v58);
    xpc_release(v59);
    xpc_object_t v60 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x1E4F4C6A0]);
    v160.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
    if (v60) {
      xpc_retain(v60);
    }
    else {
      v160.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)&applier, (xpc *)&v160, (const object *)"", v61);
    if ((applier.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v62 = &applier;
    }
    else {
      uint64_t v62 = (std::string *)applier.__r_.__value_.__r.__words[0];
    }
    xpc_object_t v63 = xpc_string_create((const char *)v62);
    if (!v63) {
      xpc_object_t v63 = xpc_null_create();
    }
    xpc_dictionary_set_value(v46, (const char *)*MEMORY[0x1E4F4CCC0], v63);
    xpc_object_t v64 = xpc_null_create();
    xpc_release(v63);
    xpc_release(v64);
    if (SHIBYTE(applier.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(applier.__r_.__value_.__l.__data_);
    }
    xpc_release(v160.__r_.__value_.__l.__data_);
    memset(&applier, 170, sizeof(applier));
    char v65 = (const char *)*MEMORY[0x1E4F4C690];
    xpc_object_t v66 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x1E4F4C690]);
    v160.__r_.__value_.__r.__words[0] = (std::string::size_type)v66;
    if (v66) {
      xpc_retain(v66);
    }
    else {
      v160.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)&applier, (xpc *)&v160, (const object *)"", v67);
    xpc_release(v160.__r_.__value_.__l.__data_);
    if ((applier.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v68 = &applier;
    }
    else {
      size_t v68 = (std::string *)applier.__r_.__value_.__r.__words[0];
    }
    size_t v69 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
    if (!strncasecmp((const char *)v68, (const char *)*MEMORY[0x1E4F4C6E8], v69))
    {
      xpc_object_t v70 = xpc_dictionary_get_value((xpc_object_t)a1[3], v65);
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
      if (v70) {
        xpc_retain(v70);
      }
      else {
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      }
      xpc::dyn_cast_or_default((uint64_t *)&v160, (xpc *)&__dst, (const object *)"", v71);
      if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v72 = &v160;
      }
      else {
        uint64_t v72 = (std::string *)v160.__r_.__value_.__r.__words[0];
      }
      xpc_object_t v73 = xpc_string_create((const char *)v72);
      if (!v73) {
        xpc_object_t v73 = xpc_null_create();
      }
      xpc_dictionary_set_value(v46, (const char *)*MEMORY[0x1E4F4CB80], v73);
      xpc_object_t v74 = xpc_null_create();
      xpc_release(v73);
      xpc_release(v74);
      if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v160.__r_.__value_.__l.__data_);
      }
      xpc_release(__dst.__r_.__value_.__l.__data_);
      xpc_object_t v75 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x1E4F4CA38]);
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v75;
      if (v75) {
        xpc_retain(v75);
      }
      else {
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      }
      xpc::dyn_cast_or_default((uint64_t *)&v160, (xpc *)&__dst, (const object *)"", v76);
      if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v77 = &v160;
      }
      else {
        uint64_t v77 = (std::string *)v160.__r_.__value_.__r.__words[0];
      }
      xpc_object_t v78 = xpc_string_create((const char *)v77);
      if (!v78) {
        xpc_object_t v78 = xpc_null_create();
      }
      xpc_dictionary_set_value(v46, (const char *)*MEMORY[0x1E4F4CE88], v78);
      xpc_object_t v79 = xpc_null_create();
      xpc_release(v78);
      xpc_release(v79);
      if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v160.__r_.__value_.__l.__data_);
      }
      xpc_release(__dst.__r_.__value_.__l.__data_);
      xpc_object_t v80 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x1E4F4C8D8]);
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
      if (v80) {
        xpc_retain(v80);
      }
      else {
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      }
      xpc::dyn_cast_or_default((uint64_t *)&v160, (xpc *)&__dst, (const object *)"", v81);
      if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v82 = &v160;
      }
      else {
        size_t v82 = (std::string *)v160.__r_.__value_.__r.__words[0];
      }
      xpc_object_t v83 = xpc_string_create((const char *)v82);
      if (!v83) {
        xpc_object_t v83 = xpc_null_create();
      }
      xpc_dictionary_set_value(v46, (const char *)*MEMORY[0x1E4F4CD60], v83);
      xpc_object_t v84 = xpc_null_create();
      xpc_release(v83);
      xpc_release(v84);
      if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v160.__r_.__value_.__l.__data_);
      }
      xpc_release(__dst.__r_.__value_.__l.__data_);
    }
    xpc_object_t v85 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x1E4F4C8E8]);
    v160.__r_.__value_.__r.__words[0] = (std::string::size_type)v85;
    if (v85) {
      xpc_retain(v85);
    }
    else {
      v160.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    char v86 = xpc::dyn_cast_or_default((xpc *)&v160, 0);
    xpc_object_t v87 = xpc_BOOL_create(v86);
    if (!v87) {
      xpc_object_t v87 = xpc_null_create();
    }
    xpc_dictionary_set_value(v46, (const char *)*MEMORY[0x1E4F4CB78], v87);
    xpc_object_t v88 = xpc_null_create();
    xpc_release(v87);
    xpc_release(v88);
    xpc_release(v160.__r_.__value_.__l.__data_);
    xpc_object_t v89 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x1E4F4C900]);
    v160.__r_.__value_.__r.__words[0] = (std::string::size_type)v89;
    if (v89) {
      xpc_retain(v89);
    }
    else {
      v160.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    char v90 = xpc::dyn_cast_or_default((xpc *)&v160, 0);
    xpc_object_t v91 = xpc_BOOL_create(v90);
    if (!v91) {
      xpc_object_t v91 = xpc_null_create();
    }
    std::string::size_type v92 = (const char *)*MEMORY[0x1E4F4CA88];
    xpc_dictionary_set_value(v46, (const char *)*MEMORY[0x1E4F4CA88], v91);
    xpc_object_t v93 = xpc_null_create();
    xpc_release(v91);
    xpc_release(v93);
    xpc_release(v160.__r_.__value_.__l.__data_);
    xpc_object_t v94 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x1E4F4C8F8]);
    v160.__r_.__value_.__r.__words[0] = (std::string::size_type)v94;
    if (v94) {
      xpc_retain(v94);
    }
    else {
      v160.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    char v95 = xpc::dyn_cast_or_default((xpc *)&v160, 0);
    xpc_object_t v96 = xpc_BOOL_create(v95);
    if (!v96) {
      xpc_object_t v96 = xpc_null_create();
    }
    xpc_object_t v97 = (const char *)*MEMORY[0x1E4F4CA80];
    xpc_dictionary_set_value(v46, (const char *)*MEMORY[0x1E4F4CA80], v96);
    xpc_object_t v98 = xpc_null_create();
    xpc_release(v96);
    xpc_release(v98);
    xpc_release(v160.__r_.__value_.__l.__data_);
    if (*(unsigned char *)(v3 + 216))
    {
      xpc_object_t v99 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v160.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C59C6000, v99, OS_LOG_TYPE_DEFAULT, "#I Setting SCD and COF flags due to problem reaching helper daemon during shutdown", (uint8_t *)&v160, 2u);
      }
      xpc_object_t v100 = xpc_BOOL_create(1);
      if (!v100) {
        xpc_object_t v100 = xpc_null_create();
      }
      xpc_dictionary_set_value(v46, v92, v100);
      xpc_object_t v101 = xpc_null_create();
      xpc_release(v100);
      xpc_release(v101);
      xpc_object_t v102 = xpc_BOOL_create(1);
      if (!v102) {
        xpc_object_t v102 = xpc_null_create();
      }
      xpc_dictionary_set_value(v46, v97, v102);
      xpc_object_t v103 = xpc_null_create();
      xpc_release(v102);
      xpc_release(v103);
    }
    if (SHIBYTE(applier.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(applier.__r_.__value_.__l.__data_);
    }
  }
  std::string __p = (void *)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v104 = operator new(0x30uLL);
  char v154 = v104;
  long long v155 = xmmword_1C5BCC2F0;
  strcpy((char *)v104, "com.apple.AppleBasebandManager.data.plist");
  LogTracker::copyPreference(v3, &v154, &__p);
  operator delete(v104);
  xpc_object_t v105 = *(void **)(v3 + 152);
  if (v105 != (void *)(v3 + 160))
  {
    do
    {
      xpc_object_t v107 = (xpc_object_t *)v105[7];
      xpc_object_t v108 = *v107;
      if (*v107)
      {
        xpc_retain(*v107);
        xpc_object_t v109 = (const char *)(v105 + 4);
        if (*((char *)v105 + 55) < 0) {
          goto LABEL_189;
        }
      }
      else
      {
        xpc_object_t v108 = xpc_null_create();
        xpc_object_t v109 = (const char *)(v105 + 4);
        if (*((char *)v105 + 55) < 0) {
LABEL_189:
        }
          xpc_object_t v109 = *(const char **)v109;
      }
      xpc_dictionary_set_value(__p, v109, v108);
      xpc_object_t v110 = xpc_null_create();
      xpc_release(v108);
      xpc_release(v110);
      xpc_object_t v111 = xpc_null_create();
      xpc_object_t v112 = (void **)v105[7];
      xpc_object_t v113 = xpc_null_create();
      xpc_object_t v114 = *v112;
      std::__shared_weak_count *v112 = v111;
      xpc_release(v114);
      xpc_release(v113);
      xpc_object_t v115 = *(NSObject **)(v3 + 176);
      if (v115)
      {
        dispatch_retain(*(dispatch_object_t *)(v3 + 176));
        dispatch_group_enter(v115);
      }
      uint64_t v116 = v105[7];
      uint64_t v117 = *(NSObject **)(v116 + 8);
      *(void *)(v116 + 8) = v115;
      if (v117)
      {
        dispatch_group_leave(v117);
        dispatch_release(v117);
      }
      xpc_object_t v118 = (void *)v105[1];
      if (v118)
      {
        do
        {
          xpc_object_t v119 = v118;
          xpc_object_t v118 = (void *)*v118;
        }
        while (v118);
      }
      else
      {
        do
        {
          xpc_object_t v119 = (void *)v105[2];
          BOOL v120 = *v119 == (void)v105;
          xpc_object_t v105 = v119;
        }
        while (!v120);
      }
      xpc_object_t v105 = v119;
    }
    while (v119 != (void *)(v3 + 160));
  }
  v160.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v160.__r_.__value_.__l.__size_ = (std::string::size_type)"HealthEventDB";
  xpc::dict::object_proxy::operator xpc::dict((uint64_t)&v160, &__dst);
  if (MEMORY[0x1C8795EB0](__dst.__r_.__value_.__r.__words[0]) == v45)
  {
    xpc_object_t v121 = xpc_dictionary_create(0, 0, 0);
    if (v121 || (xpc_object_t v121 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C8795EB0](v121) == v45)
      {
        xpc_retain(v121);
        xpc_object_t v122 = v121;
      }
      else
      {
        xpc_object_t v122 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v122 = xpc_null_create();
      xpc_object_t v121 = 0;
    }
    xpc_release(v121);
    if (MEMORY[0x1C8795EB0](v122) == v45)
    {
      xpc_object_t v123 = (void *)__dst.__r_.__value_.__r.__words[0];
      applier.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
      applier.__r_.__value_.__l.__size_ = 3321888768;
      applier.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZL28purgeArraysWithinDictByLastXRKN3xpc4dictEj_block_invoke;
      uint64_t v166 = &__block_descriptor_44_e8_32c15_ZTSN3xpc4dictE_e13_B24__0r_8_v16l;
      xpc_object_t v167 = v122;
      if (v122) {
        xpc_retain(v122);
      }
      else {
        xpc_object_t v167 = xpc_null_create();
      }
      int v168 = 10;
      xpc_dictionary_apply(v123, &applier);
      xpc_object_t v124 = xpc_null_create();
      xpc_release(v167);
      xpc_object_t v167 = 0;
      xpc_object_t v106 = v122;
      xpc_object_t v122 = v124;
    }
    else
    {
      xpc_object_t v106 = xpc_null_create();
    }
    xpc_release(v122);
  }
  else
  {
    xpc_object_t v106 = xpc_null_create();
  }
  xpc_dictionary_set_value(__p, "HealthEventDB", v106);
  xpc_object_t v125 = xpc_null_create();
  xpc_release(v106);
  xpc_release(v125);
  xpc_release(__dst.__r_.__value_.__l.__data_);
  if (v46)
  {
    xpc_retain(v46);
    xpc_object_t v126 = v46;
  }
  else
  {
    xpc_object_t v126 = xpc_null_create();
  }
  xpc_dictionary_set_value(__p, (const char *)*MEMORY[0x1E4F4C6B0], v126);
  xpc_object_t v127 = xpc_null_create();
  xpc_release(v126);
  xpc_release(v127);
  LogTracker::getConfiguration((LogTracker *)v3, &value);
  xpc_object_t v128 = value;
  xpc_dictionary_set_value(__p, (const char *)*MEMORY[0x1E4F4C948], value);
  xpc_object_t v129 = xpc_null_create();
  xpc_object_t value = v129;
  xpc_release(v128);
  xpc_release(v129);
  xpc_object_t value = 0;
  uint64_t v130 = operator new(0x28uLL);
  unint64_t v150 = v130;
  long long v151 = xmmword_1C5BCC300;
  strcpy((char *)v130, "com.apple.AppleBasebandManager.plist");
  LogTracker::copyPreference(v3, &v150, &v152);
  xpc_object_t v131 = v152;
  xpc_dictionary_set_value(__p, (const char *)*MEMORY[0x1E4F4CD90], v152);
  xpc_object_t v132 = xpc_null_create();
  xpc_object_t v152 = v132;
  xpc_release(v131);
  xpc_release(v132);
  xpc_object_t v152 = 0;
  operator delete(v130);
  uint64_t v133 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  std::string::size_type v134 = off_1EBBDC9B8;
  if (!off_1EBBDC9B8)
  {
    ctu::Gestalt::create_default_global((uint64_t *)&v160, v133);
    long long v135 = *(_OWORD *)&v160.__r_.__value_.__l.__data_;
    *(_OWORD *)&v160.__r_.__value_.__l.__data_ = 0uLL;
    uint64_t v136 = (std::__shared_weak_count *)*(&off_1EBBDC9B8 + 1);
    off_1EBBDC9B8 = v135;
    if (v136 && !atomic_fetch_add(&v136->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
    xpc_object_t v137 = (std::__shared_weak_count *)v160.__r_.__value_.__l.__size_;
    if (v160.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v160.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
    std::string::size_type v134 = off_1EBBDC9B8;
  }
  uint64_t v138 = (std::__shared_weak_count *)*(&off_1EBBDC9B8 + 1);
  __dst.__r_.__value_.__r.__words[0] = v134;
  __dst.__r_.__value_.__l.__size_ = *(&off_1EBBDC9B8 + 1);
  if (*(&off_1EBBDC9B8 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDC9B8 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(void *)v134 + 80))(&applier, v134);
  if ((applier.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v139 = &applier;
  }
  else {
    unint64_t v139 = (std::string *)applier.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v140 = xpc_string_create((const char *)v139);
  if (!v140) {
    xpc_object_t v140 = xpc_null_create();
  }
  xpc_dictionary_set_value(__p, (const char *)*MEMORY[0x1E4F4CBB0], v140);
  xpc_object_t v141 = xpc_null_create();
  xpc_release(v140);
  xpc_release(v141);
  if (SHIBYTE(applier.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(applier.__r_.__value_.__l.__data_);
    if (!v138) {
      goto LABEL_226;
    }
  }
  else if (!v138)
  {
LABEL_226:
    uint64_t v142 = __p;
    xpc_object_t v149 = __p;
    if (__p) {
      goto LABEL_227;
    }
LABEL_230:
    xpc_object_t v149 = xpc_null_create();
    int v143 = SHIBYTE(v161.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(v161.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_228;
    }
    goto LABEL_231;
  }
  if (atomic_fetch_add(&v138->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_226;
  }
  ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
  std::__shared_weak_count::__release_weak(v138);
  uint64_t v142 = __p;
  xpc_object_t v149 = __p;
  if (!__p) {
    goto LABEL_230;
  }
LABEL_227:
  xpc_retain(v142);
  int v143 = SHIBYTE(v161.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(v161.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_228:
    std::string v148 = v161;
    goto LABEL_232;
  }
LABEL_231:
  std::string::__init_copy_ctor_external(&v148, v161.__r_.__value_.__l.__data_, v161.__r_.__value_.__l.__size_);
LABEL_232:
  unsigned __int8 v144 = util::writeJSON();
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v148.__r_.__value_.__l.__data_);
  }
  xpc_release(v149);
  xpc_object_t v149 = 0;
  size_t v145 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v145, OS_LOG_TYPE_DEFAULT))
  {
    if (((MEMORY[0x1C8795EB0](__p) == v45) & v144) != 0) {
      unint64_t v146 = "Succeeded";
    }
    else {
      unint64_t v146 = "Failed";
    }
    size_t v147 = (std::string *)v161.__r_.__value_.__r.__words[0];
    if (v143 >= 0) {
      size_t v147 = &v161;
    }
    LODWORD(applier.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)applier.__r_.__value_.__r.__words + 4) = (std::string::size_type)v146;
    WORD2(applier.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&applier.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v147;
    _os_log_impl(&dword_1C59C6000, v145, OS_LOG_TYPE_DEFAULT, "#I %s to generate log summary: %s", (uint8_t *)&applier, 0x16u);
  }
  xpc_release(__p);
  xpc_release(v46);
  if ((SHIBYTE(v161.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_243;
    }
LABEL_247:
    operator delete(object.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v163[2]) & 0x80000000) == 0)
    {
LABEL_244:
      if ((SHIBYTE(v164[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_249:
      operator delete(v164[0]);
      return;
    }
    goto LABEL_248;
  }
  operator delete(v161.__r_.__value_.__l.__data_);
  if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_247;
  }
LABEL_243:
  if ((SHIBYTE(v163[2]) & 0x80000000) == 0) {
    goto LABEL_244;
  }
LABEL_248:
  operator delete((void *)v163[0]);
  if (SHIBYTE(v164[2]) < 0) {
    goto LABEL_249;
  }
}

void sub_1C5B75BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, xpc_object_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,xpc_object_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,xpc_object_t object,uint64_t a31,int a32,__int16 a33,char a34,char a35,xpc_object_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,xpc_object_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t ___ZL28purgeArraysWithinDictByLastXRKN3xpc4dictEj_block_invoke(uint64_t a1, const char *a2, void *a3)
{
  xpc_object_t v3 = a3;
  uint64_t v6 = MEMORY[0x1C8795EB0](a3);
  uint64_t v7 = MEMORY[0x1E4F14568];
  if (v6 == MEMORY[0x1E4F14568])
  {
    if (v3)
    {
      xpc_retain(v3);
    }
    else
    {
      xpc_object_t v3 = xpc_null_create();
      if (!v3)
      {
        xpc_object_t v9 = xpc_null_create();
        xpc_object_t v3 = 0;
LABEL_13:
        xpc_release(v3);
        if (MEMORY[0x1C8795EB0](v9) == v7) {
          size_t count = xpc_array_get_count(v9);
        }
        else {
          size_t count = 0;
        }
        if (count < *(unsigned int *)(a1 + 40))
        {
LABEL_57:
          xpc_release(v9);
          return 1;
        }
        if (MEMORY[0x1C8795EB0](v9) == v7) {
          size_t v11 = xpc_array_get_count(v9);
        }
        else {
          size_t v11 = 0;
        }
        xpc_object_t v12 = xpc_array_create(0, 0);
        if (v12 || (xpc_object_t v12 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C8795EB0](v12) == v7)
          {
            xpc_retain(v12);
            xpc_object_t v13 = v12;
          }
          else
          {
            xpc_object_t v13 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v13 = xpc_null_create();
          xpc_object_t v12 = 0;
        }
        xpc_release(v12);
        if (v9)
        {
          xpc_retain(v9);
          xpc_object_t v14 = v9;
        }
        else
        {
          xpc_object_t v14 = xpc_null_create();
          if (!v14)
          {
            xpc_object_t v14 = xpc_null_create();
            uint64_t v15 = 0;
            goto LABEL_30;
          }
        }
        xpc_retain(v14);
        uint64_t v15 = v14;
LABEL_30:
        int v27 = a2;
        xpc_release(v15);
        for (size_t i = 0; ; ++i)
        {
          if (v9)
          {
            xpc_retain(v9);
            xpc_object_t v18 = v9;
          }
          else
          {
            xpc_object_t v18 = xpc_null_create();
          }
          if (MEMORY[0x1C8795EB0](v9) == v7)
          {
            size_t v19 = xpc_array_get_count(v9);
            if (!v18)
            {
LABEL_40:
              xpc_object_t v20 = xpc_null_create();
              goto LABEL_41;
            }
          }
          else
          {
            size_t v19 = 0;
            if (!v18) {
              goto LABEL_40;
            }
          }
          xpc_retain(v18);
          xpc_object_t v20 = v18;
LABEL_41:
          xpc_release(v18);
          xpc_release(v20);
          if (i == v19 && v14 == v20)
          {
            xpc_release(v14);
            if (v13)
            {
              xpc_retain(v13);
              xpc_object_t v24 = v13;
            }
            else
            {
              xpc_object_t v24 = xpc_null_create();
            }
            xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 32), v27, v24);
            xpc_object_t v25 = xpc_null_create();
            xpc_release(v24);
            xpc_release(v25);
            xpc_release(v13);
            goto LABEL_57;
          }
          if (v11 <= *(unsigned int *)(a1 + 40))
          {
            xpc_object_t value = xpc_array_get_value(v14, i);
            xpc_object_t object = value;
            if (value) {
              xpc_retain(value);
            }
            else {
              xpc_object_t object = xpc_null_create();
            }
            int v22 = xpc::dyn_cast_or_default((xpc *)&object, 0);
            xpc_object_t v23 = xpc_int64_create(v22);
            if (!v23) {
              xpc_object_t v23 = xpc_null_create();
            }
            xpc_array_append_value(v13, v23);
            xpc_release(v23);
            xpc_release(object);
          }
          else
          {
            --v11;
          }
          if (v14)
          {
            xpc_retain(v14);
            xpc_object_t v17 = v14;
          }
          else
          {
            xpc_object_t v17 = xpc_null_create();
          }
          xpc_release(v17);
        }
      }
    }
    if (MEMORY[0x1C8795EB0](v3) == v7)
    {
      xpc_retain(v3);
      xpc_object_t v9 = v3;
    }
    else
    {
      xpc_object_t v9 = xpc_null_create();
    }
    goto LABEL_13;
  }
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 32), a2, v3);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v8);
  return 1;
}

void sub_1C5B76530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(v10);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 72));
    *(void *)(v2 + 72) = 0;
    xpc_object_t v3 = *(std::__shared_weak_count **)(v2 + 56);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    xpc_release(*(xpc_object_t *)(v2 + 40));
    *(void *)(v2 + 40) = 0;
    xpc_object_t v4 = *(std::__shared_weak_count **)(v2 + 24);
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
    xpc_release(*(xpc_object_t *)(v2 + 8));
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *dispatch::detail::group_notify<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t a1, const char *a2)
{
  uint64_t v16 = a1;
  xpc_object_t v3 = *(void **)a1;
  if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C1F8], a2)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4D338], v4)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C288], v5))
  {
    uint64_t v6 = v3[26];
    xpc_object_t v18 = v6;
    if (v6)
    {
      dispatch_retain(v6);
      dispatch_group_enter(v6);
    }
    xpc_object_t v7 = *(xpc_object_t *)(a1 + 8);
    xpc_object_t v17 = v7;
    if (v7)
    {
      xpc_retain(v7);
    }
    else
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v17 = v7;
    }
    LogTracker::moveBasebandServicesLog_sync(v3, &v18, &v17);
    xpc_release(v7);
    if (v6)
    {
      dispatch_group_leave(v6);
      dispatch_release(v6);
    }
  }
  xpc_object_t v8 = v3[26];
  xpc_object_t v9 = v3[17];
  xpc_object_t v10 = operator new(0x40uLL);
  uint64_t v11 = *(void *)(a1 + 24);
  void *v10 = *(void *)(a1 + 16);
  v10[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v12 = *(void **)(a1 + 40);
  _DWORD v10[2] = *(void *)(a1 + 32);
  void v10[3] = v12;
  if (v12)
  {
    xpc_retain(v12);
    uint64_t v13 = *(void *)(a1 + 56);
    v10[4] = *(void *)(a1 + 48);
    void v10[5] = v13;
    if (!v13) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  void v10[3] = xpc_null_create();
  uint64_t v13 = *(void *)(a1 + 56);
  v10[4] = *(void *)(a1 + 48);
  void v10[5] = v13;
  if (v13) {
LABEL_15:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 16), 1uLL, memory_order_relaxed);
LABEL_16:
  xpc_object_t v14 = *(void **)(a1 + 72);
  v10[6] = *(void *)(a1 + 64);
  v10[7] = v14;
  if (v14) {
    xpc_retain(v14);
  }
  else {
    v10[7] = xpc_null_create();
  }
  dispatch_group_notify_f(v8, v9, v10, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  return std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>>::~unique_ptr[abi:ne180100](&v16);
}

void sub_1C5B7680C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  xpc_release(v11);
  if (v10)
  {
    dispatch_group_leave(v10);
    dispatch_release(v10);
    std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>>::~unique_ptr[abi:ne180100](&a10);
    _Unwind_Resume(a1);
  }
  std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::detail::group_notify<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v26 = a1;
  uint64_t v4 = a1 + 8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  xpc_object_t v3 = *(void **)(v4 + 8);
  if (!v2)
  {
    uint64_t v6 = 0;
    goto LABEL_7;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v2);
  uint64_t v6 = v5;
  if (!v5 || !*(void *)a1)
  {
LABEL_7:
    xpc_object_t v8 = (const void *)*MEMORY[0x1E4F4CDF8];
    size_t v9 = strlen((const char *)*MEMORY[0x1E4F4CDF8]);
    if (v9 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    xpc_object_t v10 = (void *)v9;
    if (v9 >= 0x17)
    {
      uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17) {
        uint64_t v12 = v9 | 7;
      }
      uint64_t v13 = v12 + 1;
      uint64_t v11 = (void **)operator new(v12 + 1);
      __dst[1] = v10;
      unint64_t v32 = v13 | 0x8000000000000000;
      __dst[0] = v11;
    }
    else
    {
      HIBYTE(v32) = v9;
      uint64_t v11 = __dst;
      if (!v9) {
        goto LABEL_15;
      }
    }
    memmove(v11, v8, (size_t)v10);
LABEL_15:
    *((unsigned char *)v10 + (void)v11) = 0;
    long long aBlock = 0;
    CFTypeRef cf = 0;
    Service::broadcastEvent((uint64_t)v3, (uint64_t)__dst, &cf, (const void **)&aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (SHIBYTE(v32) < 0)
    {
      operator delete(__dst[0]);
      if (!v6) {
        return std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>>::~unique_ptr[abi:ne180100](&v26);
      }
    }
    else if (!v6)
    {
      return std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>>::~unique_ptr[abi:ne180100](&v26);
    }
    if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>>::~unique_ptr[abi:ne180100](&v26);
    }
    char v7 = 1;
    goto LABEL_25;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    char v7 = 0;
LABEL_25:
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (v7) {
      return std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>>::~unique_ptr[abi:ne180100](&v26);
    }
  }
  xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 24), (const char *)*MEMORY[0x1E4F4D210]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  uint64_t IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0 || (uint64_t IsInternalBuild = TelephonyUtilIsCarrierBuild(), IsInternalBuild)) {
    uint64_t CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
  }
  else {
    uint64_t CompressionMode = 2;
  }
  int v17 = xpc::dyn_cast_or_default((xpc *)&object, (const object *)CompressionMode);
  xpc_release(object);
  if (v17)
  {
    xpc_object_t v18 = v3[26];
    xpc_object_t object = v18;
    if (v18)
    {
      dispatch_retain(v18);
      dispatch_group_enter(v18);
    }
    xpc_object_t v19 = *(xpc_object_t *)(a1 + 24);
    xpc_object_t v27 = v19;
    if (v19)
    {
      xpc_retain(v19);
    }
    else
    {
      xpc_object_t v19 = xpc_null_create();
      xpc_object_t v27 = v19;
    }
    LogTracker::archiveLogs_sync(v3, (NSObject **)&object, &v27);
    xpc_release(v19);
    xpc_object_t v27 = 0;
    if (v18)
    {
      dispatch_group_leave(v18);
      dispatch_release(v18);
    }
  }
  xpc_object_t v20 = v3[26];
  size_t v21 = v3[17];
  int v22 = operator new(0x20uLL);
  uint64_t v23 = *(void *)(a1 + 40);
  void *v22 = *(void *)(a1 + 32);
  v22[1] = v23;
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v24 = *(void **)(a1 + 56);
  uint64_t v22[2] = *(void *)(a1 + 48);
  v22[3] = v24;
  if (v24) {
    xpc_retain(v24);
  }
  else {
    v22[3] = xpc_null_create();
  }
  dispatch_group_notify_f(v20, v21, v22, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_0 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_0 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  return std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>>::~unique_ptr[abi:ne180100](&v26);
}

void sub_1C5B76B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, void *aBlock, CFTypeRef cf, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  xpc_release(v20);
  if (v19)
  {
    dispatch_group_leave(v19);
    dispatch_release(v19);
    std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>>::~unique_ptr[abi:ne180100](&a9);
    _Unwind_Resume(a1);
  }
  std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 56));
    *(void *)(v2 + 56) = 0;
    xpc_object_t v3 = *(std::__shared_weak_count **)(v2 + 40);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    xpc_release(*(xpc_object_t *)(v2 + 24));
    *(void *)(v2 + 24) = 0;
    uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete((void *)v2);
  }
  return a1;
}

void dispatch::detail::group_notify<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_0 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_0 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(char *a1)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1 + 8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)a1 + 1);
  uint64_t v3 = *((void *)v4 + 1);
  uint64_t v5 = (const char **)MEMORY[0x1E4F4CDF8];
  if (!v2)
  {
    char v7 = 0;
    goto LABEL_7;
  }
  uint64_t v6 = std::__shared_weak_count::lock(v2);
  char v7 = v6;
  if (!v6 || !*(void *)a1)
  {
LABEL_7:
    size_t v9 = *v5;
    size_t v10 = strlen(*v5);
    if (v10 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = (void *)v10;
    if (v10 >= 0x17)
    {
      uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17) {
        uint64_t v13 = v10 | 7;
      }
      uint64_t v14 = v13 + 1;
      uint64_t v12 = (void **)operator new(v13 + 1);
      __dst[1] = v11;
      unint64_t v53 = v14 | 0x8000000000000000;
      __dst[0] = v12;
    }
    else
    {
      HIBYTE(v53) = v10;
      uint64_t v12 = __dst;
      if (!v10) {
        goto LABEL_15;
      }
    }
    memmove(v12, v9, (size_t)v11);
LABEL_15:
    *((unsigned char *)v11 + (void)v12) = 0;
    long long aBlock = 0;
    CFTypeRef cf = 0;
    Service::broadcastEvent(v3, (uint64_t)__dst, &cf, (const void **)&aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (SHIBYTE(v53) < 0)
    {
      operator delete(__dst[0]);
      if (!v7) {
        goto LABEL_80;
      }
    }
    else if (!v7)
    {
      goto LABEL_80;
    }
    if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_80;
    }
    char v8 = 1;
    goto LABEL_25;
  }
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_26;
  }
  char v8 = 0;
LABEL_25:
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (v8) {
    goto LABEL_80;
  }
LABEL_26:
  memset(v49, 170, sizeof(v49));
  uint64_t v15 = (const char *)*MEMORY[0x1E4F4CA98];
  xpc_object_t value = xpc_dictionary_get_value(*((xpc_object_t *)a1 + 3), (const char *)*MEMORY[0x1E4F4CA98]);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)v49, (xpc *)object, (const object *)"", v17);
  xpc_release(object[0]);
  memset(object, 170, sizeof(object));
  xpc_object_t v18 = (const char *)*MEMORY[0x1E4F4C4C8];
  xpc_object_t v19 = xpc_dictionary_get_value(*((xpc_object_t *)a1 + 3), (const char *)*MEMORY[0x1E4F4C4C8]);
  xpc_object_t v47 = v19;
  if (v19) {
    xpc_retain(v19);
  }
  else {
    xpc_object_t v47 = xpc_null_create();
  }
  Timestamp::Timestamp((Timestamp *)&buf);
  Timestamp::asString(v20, 0, 9, __p);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v46) < 0) {
    operator delete(__p[0]);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&buf, *((void **)&buf + 1));
  xpc_release(v47);
  xpc_object_t v21 = xpc_dictionary_create(0, 0, 0);
  if (v21 || (xpc_object_t v21 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v21) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v21);
      xpc_object_t v22 = v21;
    }
    else
    {
      xpc_object_t v22 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v22 = xpc_null_create();
    xpc_object_t v21 = 0;
  }
  xpc_release(v21);
  if (SHIBYTE(object[2]) >= 0) {
    uint64_t v23 = object;
  }
  else {
    uint64_t v23 = (xpc_object_t *)object[0];
  }
  xpc_object_t v24 = xpc_string_create((const char *)v23);
  if (!v24) {
    xpc_object_t v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(v22, v18, v24);
  xpc_object_t v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  if (SHIBYTE(v49[2]) >= 0) {
    uint64_t v26 = v49;
  }
  else {
    uint64_t v26 = (void **)v49[0];
  }
  xpc_object_t v27 = xpc_string_create((const char *)v26);
  if (!v27) {
    xpc_object_t v27 = xpc_null_create();
  }
  xpc_dictionary_set_value(v22, v15, v27);
  xpc_object_t v28 = xpc_null_create();
  xpc_release(v27);
  xpc_release(v28);
  xpc_object_t v29 = xpc_string_create((const char *)*MEMORY[0x1E4F4F928]);
  if (!v29) {
    xpc_object_t v29 = xpc_null_create();
  }
  xpc_dictionary_set_value(v22, (const char *)*MEMORY[0x1E4F4C7F8], v29);
  xpc_object_t v30 = xpc_null_create();
  xpc_release(v29);
  xpc_release(v30);
  std::string::size_type v31 = *v5;
  size_t v32 = strlen(*v5);
  if (v32 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  long long v33 = (void *)v32;
  if (v32 >= 0x17)
  {
    uint64_t v36 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17) {
      uint64_t v36 = v32 | 7;
    }
    uint64_t v37 = v36 + 1;
    xpc_object_t v34 = operator new(v36 + 1);
    __p[1] = v33;
    unint64_t v46 = v37 | 0x8000000000000000;
    __p[0] = v34;
LABEL_60:
    memmove(v34, v31, (size_t)v33);
    *((unsigned char *)v33 + (void)v34) = 0;
    xpc_object_t v44 = v22;
    if (v22) {
      goto LABEL_56;
    }
    goto LABEL_61;
  }
  HIBYTE(v46) = v32;
  xpc_object_t v34 = __p;
  if (v32) {
    goto LABEL_60;
  }
  LOBYTE(__p[0]) = 0;
  xpc_object_t v44 = v22;
  if (v22)
  {
LABEL_56:
    xpc_retain(v22);
    goto LABEL_62;
  }
LABEL_61:
  xpc_object_t v44 = xpc_null_create();
LABEL_62:
  xpc::bridge((uint64_t *)&buf, (xpc *)&v44, v35);
  uint64_t v38 = (void *)buf;
  if ((void)buf && (CFTypeID v39 = CFGetTypeID((CFTypeRef)buf), v39 == CFDictionaryGetTypeID()))
  {
    xpc_object_t v47 = v38;
    CFRetain(v38);
  }
  else
  {
    xpc_object_t v47 = 0;
  }
  long long v43 = 0;
  Service::broadcastEvent(v3, (uint64_t)__p, (const void **)&v47, (const void **)&v43);
  if (v43) {
    _Block_release(v43);
  }
  if (v47) {
    CFRelease(v47);
  }
  if ((void)buf) {
    CFRelease((CFTypeRef)buf);
  }
  xpc_release(v44);
  if (SHIBYTE(v46) < 0) {
    operator delete(__p[0]);
  }
  xpc_object_t v40 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
  {
    std::string::size_type v41 = object;
    if (SHIBYTE(object[2]) < 0) {
      std::string::size_type v41 = (xpc_object_t *)object[0];
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v41;
    _os_log_impl(&dword_1C59C6000, v40, OS_LOG_TYPE_DEFAULT, "#I TracePostProcessingEnd with timestamp[%s]", (uint8_t *)&buf, 0xCu);
  }
  xpc_release(v22);
  if (SHIBYTE(object[2]) < 0)
  {
    operator delete(object[0]);
    if ((SHIBYTE(v49[2]) & 0x80000000) == 0) {
      goto LABEL_80;
    }
  }
  else if ((SHIBYTE(v49[2]) & 0x80000000) == 0)
  {
    goto LABEL_80;
  }
  operator delete(v49[0]);
LABEL_80:
  xpc_release(*((xpc_object_t *)a1 + 3));
  *((void *)a1 + 3) = 0;
  xpc_object_t v42 = (std::__shared_weak_count *)*((void *)a1 + 1);
  if (v42) {
    std::__shared_weak_count::__release_weak(v42);
  }
  operator delete(a1);
}

void sub_1C5B772AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, xpc_object_t object, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, CFTypeRef cf, xpc_object_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,CFTypeRef a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (xpc_object_t v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v3) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v3);
      xpc_object_t v4 = v3;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v3 = 0;
  }
  xpc_release(v3);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3__6clEv_block_invoke;
  aBlock[3] = &__block_descriptor_280_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c67_ZTSZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEE3__5_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  uint64_t v6 = *a1;
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  void aBlock[4] = v2;
  void aBlock[5] = v6;
  xpc_object_t v21 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  char v7 = (void *)a1[4];
  uint64_t v22 = a1[3];
  xpc_object_t v23 = v7;
  if (v7) {
    xpc_retain(v7);
  }
  else {
    xpc_object_t v23 = xpc_null_create();
  }
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4((uint64_t)&v24, (uint64_t)(a1 + 5));
  char v8 = _Block_copy(aBlock);
  size_t v9 = *(NSObject **)(v2 + 136);
  if (v9) {
    dispatch_retain(v9);
  }
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  GetABMLogServer(&v16);
  abm::HelperClient::create();
  size_t v10 = v17;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    xpc_object_t v15 = v4;
    if (v4)
    {
LABEL_17:
      xpc_retain(v4);
      if (v8) {
        goto LABEL_18;
      }
      goto LABEL_40;
    }
  }
  else
  {
    xpc_object_t v15 = v4;
    if (v4) {
      goto LABEL_17;
    }
  }
  xpc_object_t v15 = xpc_null_create();
  if (v8)
  {
LABEL_18:
    uint64_t v13 = _Block_copy(v8);
    xpc_object_t object = v9;
    if (!v9) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_40:
  uint64_t v13 = 0;
  xpc_object_t object = v9;
  if (v9) {
LABEL_19:
  }
    dispatch_retain(v9);
LABEL_20:
  abm::HelperClient::perform();
  if (object) {
    dispatch_release(object);
  }
  if (v13) {
    _Block_release(v13);
  }
  xpc_release(v15);
  uint64_t v11 = (std::__shared_weak_count *)v19;
  if (v19 && !atomic_fetch_add((atomic_ullong *volatile)(v19 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v9) {
    dispatch_release(v9);
  }
  if (v8) {
    _Block_release(v8);
  }
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)&v29);
  xpc_release(v28);
  xpc_object_t v28 = 0;
  if (v27 < 0) {
    operator delete(__p);
  }
  if (v25) {
    std::__shared_weak_count::__release_weak(v25);
  }
  xpc_release(v23);
  xpc_object_t v23 = 0;
  if (v21) {
    std::__shared_weak_count::__release_weak(v21);
  }
  xpc_release(v4);
  uint64_t v12 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6::~$_6((uint64_t)a1);
  operator delete(v12);
}

void sub_1C5B7784C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, dispatch_object_t object, xpc_object_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,xpc_object_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,xpc_object_t a35,uint64_t a36)
{
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(a11);
  if (a15 && !atomic_fetch_add(&a15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a15->__on_zero_shared)(a15);
    std::__shared_weak_count::__release_weak(a15);
  }
  if (v39) {
    dispatch_release(v39);
  }
  if (v38) {
    _Block_release(v38);
  }
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)&a36);
  xpc_release(a35);
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a26) {
    std::__shared_weak_count::__release_weak(a26);
  }
  xpc_release(a24);
  if (a22) {
    std::__shared_weak_count::__release_weak(a22);
  }
  xpc_release(v37);
  std::string::size_type v41 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6::~$_6(v36);
  operator delete(v41);
  _Unwind_Resume(a1);
}

void ___ZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3__6clEv_block_invoke(void *a1, unsigned int *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  xpc_object_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      char v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      uint64_t v9 = *a2;
      size_t v10 = *(NSObject **)(v5 + 88);
      if (v9)
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          TelephonyXPC::Result::toString(v9, (uint64_t)__p);
          int v17 = v19 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)long long buf = 136315138;
          xpc_object_t v21 = v17;
          _os_log_error_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_ERROR, "Unable to reach baseband tracing task (error: %s)", buf, 0xCu);
          if (v19 < 0) {
            operator delete(__p[0]);
          }
        }
        char v11 = 1;
      }
      else
      {
        BOOL v12 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
        char v11 = 0;
        if (v12)
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_DEFAULT, "#I Successfully reached baseband tracing task", (uint8_t *)__p, 2u);
          char v11 = 0;
        }
      }
      *(unsigned char *)(v5 + 216) = v11;
      uint64_t v13 = *(NSObject **)(v5 + 208);
      uint64_t v14 = *(NSObject **)(v5 + 136);
      xpc_object_t v15 = operator new(0xE0uLL);
      uint64_t v16 = (void *)a1[8];
      void *v15 = a1[7];
      v15[1] = v16;
      if (v16) {
        xpc_retain(v16);
      }
      else {
        v15[1] = xpc_null_create();
      }
      LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4((uint64_t)(v15 + 2), (uint64_t)(a1 + 9));
      dispatch_group_notify_f(v13, v14, v15, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
    }
  }
}

void sub_1C5B77B94(_Unwind_Exception *a1)
{
  xpc_release(v1[1]);
  v1[1] = 0;
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C5B77BB4(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c67_ZTSZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEE3__5(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (void *)a2[8];
  a1[7] = a2[7];
  a1[8] = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    a1[8] = xpc_null_create();
  }
  return LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4((uint64_t)(a1 + 9), (uint64_t)(a2 + 9));
}

void sub_1C5B77C38(_Unwind_Exception *a1)
{
  xpc_release(*(xpc_object_t *)(v1 + 64));
  *(void *)(v1 + 64) = 0;
  xpc_object_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c67_ZTSZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEE3__5(uint64_t a1)
{
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(a1 + 136);
  xpc_release(*(xpc_object_t *)(a1 + 128));
  *(void *)(a1 + 128) = 0;
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  xpc_release(*(xpc_object_t *)(a1 + 64));
  *(void *)(a1 + 64) = 0;
  xpc_object_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

uint64_t *dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t a1, const char *a2)
{
  uint64_t v12 = a1;
  xpc_object_t v3 = *(void **)a1;
  if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C1F8], a2)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4D338], v4)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C288], v5))
  {
    uint64_t v6 = v3[26];
    uint64_t v14 = v6;
    if (v6)
    {
      dispatch_retain(v6);
      dispatch_group_enter(v6);
    }
    xpc_object_t v7 = *(xpc_object_t *)(a1 + 8);
    xpc_object_t v13 = v7;
    if (v7)
    {
      xpc_retain(v7);
    }
    else
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v13 = v7;
    }
    LogTracker::moveBasebandServicesLog_sync(v3, &v14, &v13);
    xpc_release(v7);
    if (v6)
    {
      dispatch_group_leave(v6);
      dispatch_release(v6);
    }
  }
  uint64_t v8 = v3[26];
  uint64_t v9 = v3[17];
  size_t v10 = operator new(0xD0uLL);
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4((uint64_t)v10, a1 + 16);
  dispatch_group_notify_f(v8, v9, v10, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  return std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const>>::~unique_ptr[abi:ne180100](&v12);
}

void sub_1C5B77E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  xpc_release(v11);
  if (v10)
  {
    dispatch_group_leave(v10);
    dispatch_release(v10);
    std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const>>::~unique_ptr[abi:ne180100](&a10);
    _Unwind_Resume(a1);
  }
  std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(v2 + 80);
    xpc_release(*(xpc_object_t *)(v2 + 72));
    *(void *)(v2 + 72) = 0;
    if (*(char *)(v2 + 71) < 0) {
      operator delete(*(void **)(v2 + 48));
    }
    xpc_object_t v3 = *(std::__shared_weak_count **)(v2 + 24);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    xpc_release(*(xpc_object_t *)(v2 + 8));
    operator delete((void *)v2);
  }
  return a1;
}

void dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(char *a1)
{
  uint64_t v4 = a1 + 8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)a1 + 1);
  xpc_object_t v3 = (void *)*((void *)v4 + 1);
  if (!v2)
  {
    uint64_t v6 = 0;
    goto LABEL_7;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v2);
  uint64_t v6 = v5;
  if (!v5 || !*(void *)a1)
  {
LABEL_7:
    uint64_t v8 = (const void *)*MEMORY[0x1E4F4CDF8];
    size_t v9 = strlen((const char *)*MEMORY[0x1E4F4CDF8]);
    if (v9 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v10 = (void *)v9;
    if (v9 >= 0x17)
    {
      uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17) {
        uint64_t v12 = v9 | 7;
      }
      uint64_t v13 = v12 + 1;
      char v11 = (void **)operator new(v12 + 1);
      __dst[1] = v10;
      unint64_t v30 = v13 | 0x8000000000000000;
      __dst[0] = v11;
    }
    else
    {
      HIBYTE(v30) = v9;
      char v11 = __dst;
      if (!v9) {
        goto LABEL_15;
      }
    }
    memmove(v11, v8, (size_t)v10);
LABEL_15:
    *((unsigned char *)v10 + (void)v11) = 0;
    long long aBlock = 0;
    CFTypeRef cf = 0;
    Service::broadcastEvent((uint64_t)v3, (uint64_t)__dst, &cf, (const void **)&aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (SHIBYTE(v30) < 0)
    {
      operator delete(__dst[0]);
      if (!v6) {
        goto LABEL_49;
      }
    }
    else if (!v6)
    {
      goto LABEL_49;
    }
    if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_49;
    }
    char v7 = 1;
    goto LABEL_25;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    char v7 = 0;
LABEL_25:
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (v7) {
      goto LABEL_49;
    }
  }
  if (*((_DWORD *)a1 + 6) && !a1[28])
  {
    int v14 = a1[55];
    size_t v15 = v14 >= 0 ? a1[55] : *((void *)a1 + 5);
    if (v15 == strlen((const char *)*MEMORY[0x1E4F4C820]))
    {
      uint64_t v16 = v14 >= 0 ? a1 + 32 : (char *)*((void *)a1 + 4);
      if (!memcmp(v16, (const void *)*MEMORY[0x1E4F4C820], v15))
      {
        int v17 = v3[26];
        uint64_t v26 = v17;
        if (v17)
        {
          dispatch_retain(v17);
          dispatch_group_enter(v17);
        }
        xpc_object_t v18 = (xpc_object_t)*((void *)a1 + 7);
        xpc_object_t v25 = v18;
        if (v18)
        {
          xpc_retain(v18);
        }
        else
        {
          xpc_object_t v18 = xpc_null_create();
          xpc_object_t v25 = v18;
        }
        LogTracker::archiveLogs_sync(v3, &v26, &v25);
        xpc_release(v18);
        xpc_object_t v25 = 0;
        if (v17)
        {
          dispatch_group_leave(v17);
          dispatch_release(v17);
        }
      }
    }
  }
  char v19 = v3[26];
  uint64_t v20 = v3[17];
  xpc_object_t v21 = operator new(0x90uLL);
  uint64_t v22 = *((void *)a1 + 9);
  *xpc_object_t v21 = *((void *)a1 + 8);
  v21[1] = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v23 = (void *)*((void *)a1 + 11);
  v21[2] = *((void *)a1 + 10);
  v21[3] = v23;
  if (v23) {
    xpc_retain(v23);
  }
  else {
    v21[3] = xpc_null_create();
  }
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::$_2((uint64_t)(v21 + 4), (uint64_t)(a1 + 96));
  dispatch_group_notify_f(v19, v20, v21, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
LABEL_49:
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)(a1 + 64));
  xpc_release(*((xpc_object_t *)a1 + 7));
  *((void *)a1 + 7) = 0;
  if (a1[55] < 0) {
    operator delete(*((void **)a1 + 4));
  }
  uint64_t v24 = (std::__shared_weak_count *)*((void *)a1 + 1);
  if (v24) {
    std::__shared_weak_count::__release_weak(v24);
  }
  operator delete(a1);
}

void sub_1C5B7820C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, CFTypeRef cf, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  xpc_release(v21);
  if (v20)
  {
    dispatch_group_leave(v20);
    dispatch_release(v20);
  }
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(v19 + 64);
  xpc_release(*(xpc_object_t *)(v19 + 56));
  *(void *)(v19 + 56) = 0;
  if (*(char *)(v19 + 55) < 0)
  {
    operator delete(*(void **)(v19 + 32));
    xpc_object_t v23 = *(std::__shared_weak_count **)(v19 + 8);
    if (!v23)
    {
LABEL_5:
      operator delete((void *)v19);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    xpc_object_t v23 = *(std::__shared_weak_count **)(v19 + 8);
    if (!v23) {
      goto LABEL_5;
    }
  }
  std::__shared_weak_count::__release_weak(v23);
  operator delete((void *)v19);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v4 = a1 + 1;
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  xpc_object_t v3 = (void *)v4[1];
  if (!v2)
  {
    uint64_t v6 = 0;
    goto LABEL_7;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v2);
  uint64_t v6 = v5;
  if (!v5 || !*a1)
  {
LABEL_7:
    uint64_t v8 = (const void *)*MEMORY[0x1E4F4CDF8];
    size_t v9 = strlen((const char *)*MEMORY[0x1E4F4CDF8]);
    if (v9 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v10 = (void *)v9;
    if (v9 >= 0x17)
    {
      uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17) {
        uint64_t v12 = v9 | 7;
      }
      uint64_t v13 = v12 + 1;
      char v11 = (void **)operator new(v12 + 1);
      __dst[1] = v10;
      unint64_t v25 = v13 | 0x8000000000000000;
      __dst[0] = v11;
    }
    else
    {
      HIBYTE(v25) = v9;
      char v11 = __dst;
      if (!v9) {
        goto LABEL_15;
      }
    }
    memmove(v11, v8, (size_t)v10);
LABEL_15:
    *((unsigned char *)v10 + (void)v11) = 0;
    long long aBlock = 0;
    CFTypeRef cf = 0;
    Service::broadcastEvent((uint64_t)v3, (uint64_t)__dst, &cf, (const void **)&aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (SHIBYTE(v25) < 0)
    {
      operator delete(__dst[0]);
      if (!v6) {
        goto LABEL_34;
      }
    }
    else if (!v6)
    {
      goto LABEL_34;
    }
    if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_34;
    }
    char v7 = 1;
    goto LABEL_25;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    char v7 = 0;
LABEL_25:
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (v7) {
      goto LABEL_34;
    }
  }
  int v14 = v3[26];
  xpc_object_t v21 = v14;
  if (v14)
  {
    dispatch_retain(v14);
    dispatch_group_enter(v14);
  }
  xpc_object_t v15 = (xpc_object_t)a1[3];
  xpc_object_t v20 = v15;
  if (v15)
  {
    xpc_retain(v15);
  }
  else
  {
    xpc_object_t v15 = xpc_null_create();
    xpc_object_t v20 = v15;
  }
  LogTracker::jsonSummary_sync(v3, &v21, &v20);
  xpc_release(v15);
  if (v14)
  {
    dispatch_group_leave(v14);
    dispatch_release(v14);
  }
  uint64_t v16 = v3[26];
  int v17 = v3[17];
  xpc_object_t v18 = operator new(0x70uLL);
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::$_2((uint64_t)v18, (uint64_t)(a1 + 4));
  dispatch_group_notify_f(v16, v17, v18, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
LABEL_34:
  uint64_t v19 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)a1);
  operator delete(v19);
}

void sub_1C5B785A4(_Unwind_Exception *a1)
{
  operator delete(v2);
  uint64_t v4 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void sub_1C5B785C4(_Unwind_Exception *a1)
{
  xpc_object_t v3 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_1C5B785E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, CFTypeRef cf, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  xpc_release(v21);
  if (v20)
  {
    dispatch_group_leave(v20);
    dispatch_release(v20);
    xpc_object_t v23 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(v19);
    operator delete(v23);
    _Unwind_Resume(a1);
  }
  uint64_t v24 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(v19);
  operator delete(v24);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v25 = a1;
  uint64_t v4 = a1 + 8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v3 = *(void *)(v4 + 8);
  if (!v2)
  {
    uint64_t v6 = 0;
    goto LABEL_7;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v2);
  uint64_t v6 = v5;
  if (!v5 || !*(void *)a1)
  {
LABEL_7:
    uint64_t v8 = (const void *)*MEMORY[0x1E4F4CDF8];
    size_t v9 = strlen((const char *)*MEMORY[0x1E4F4CDF8]);
    if (v9 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v10 = (void *)v9;
    if (v9 >= 0x17)
    {
      uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17) {
        uint64_t v12 = v9 | 7;
      }
      uint64_t v13 = v12 + 1;
      char v11 = (void **)operator new(v12 + 1);
      __dst[1] = v10;
      unint64_t v31 = v13 | 0x8000000000000000;
      __dst[0] = v11;
    }
    else
    {
      HIBYTE(v31) = v9;
      char v11 = __dst;
      if (!v9) {
        goto LABEL_15;
      }
    }
    memmove(v11, v8, (size_t)v10);
LABEL_15:
    *((unsigned char *)v10 + (void)v11) = 0;
    long long aBlock = 0;
    CFTypeRef cf = 0;
    Service::broadcastEvent(v3, (uint64_t)__dst, &cf, (const void **)&aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (SHIBYTE(v31) < 0)
    {
      operator delete(__dst[0]);
      if (!v6) {
        return std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const>>::~unique_ptr[abi:ne180100](&v25);
      }
    }
    else if (!v6)
    {
      return std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const>>::~unique_ptr[abi:ne180100](&v25);
    }
    if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const>>::~unique_ptr[abi:ne180100](&v25);
    }
    char v7 = 1;
    goto LABEL_25;
  }
  if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_26;
  }
  char v7 = 0;
LABEL_25:
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (v7) {
    return std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const>>::~unique_ptr[abi:ne180100](&v25);
  }
LABEL_26:
  if (!*(unsigned char *)(a1 + 24))
  {
    if (*(_DWORD *)(a1 + 28) != 2)
    {
      int v17 = *(void **)(a1 + 32);
      xpc_object_t object = v17;
      if (v17) {
        xpc_retain(v17);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      std::string __p = 0;
      uint64_t v33 = 0;
      xpc_object_t v34 = 0;
      TapToRadar::createRadarIfPossible(&object, (uint64_t)&__p);
      if (SHIBYTE(v34) < 0) {
        operator delete(__p);
      }
      xpc_release(object);
      xpc_object_t object = 0;
      goto LABEL_49;
    }
    int v14 = *(NSObject **)(v3 + 208);
    xpc_object_t object = v14;
    if (v14)
    {
      dispatch_retain(v14);
      dispatch_group_enter(v14);
    }
    xpc_object_t v15 = *(xpc_object_t *)(a1 + 32);
    xpc_object_t v26 = v15;
    if (v15)
    {
      xpc_retain(v15);
      xpc_object_t v16 = *(xpc_object_t *)(a1 + 32);
      if (v16)
      {
LABEL_32:
        xpc_retain(v16);
        xpc_object_t v34 = v16;
        p_p = 0;
        std::string __p = &unk_1F210FAE8;
        uint64_t v33 = v3;
        goto LABEL_33;
      }
    }
    else
    {
      xpc_object_t v15 = xpc_null_create();
      xpc_object_t v26 = v15;
      xpc_object_t v16 = *(xpc_object_t *)(a1 + 32);
      if (v16) {
        goto LABEL_32;
      }
    }
    xpc_object_t v16 = xpc_null_create();
    xpc_object_t v34 = v16;
    p_p = 0;
    std::string __p = &unk_1F210FAE8;
    uint64_t v33 = v3;
    if (!v16)
    {
      xpc_object_t v34 = xpc_null_create();
      goto LABEL_39;
    }
LABEL_33:
    xpc_retain(v16);
LABEL_39:
    p_p = &__p;
    LogTracker::systemLog_sync(v3, (dispatch_object_t *)&object, &v26, &__p);
    if (p_p == &__p)
    {
      (*((void (**)(void **))__p + 4))(&__p);
    }
    else if (p_p)
    {
      (*((void (**)(void))*p_p + 5))();
    }
    xpc_release(v16);
    xpc_release(v15);
    if (v14)
    {
      dispatch_group_leave(v14);
      dispatch_release(v14);
    }
  }
LABEL_49:
  xpc_object_t v18 = *(NSObject **)(v3 + 208);
  uint64_t v19 = *(NSObject **)(v3 + 136);
  xpc_object_t v20 = (std::string *)operator new(0x48uLL);
  xpc_object_t v21 = v20;
  std::string::size_type v22 = *(void *)(a1 + 48);
  v20->__r_.__value_.__r.__words[0] = *(void *)(a1 + 40);
  v20->__r_.__value_.__l.__size_ = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 16), 1uLL, memory_order_relaxed);
  }
  v20->__r_.__value_.__r.__words[2] = *(void *)(a1 + 56);
  if (*(char *)(a1 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v20 + 1, *(const std::string::value_type **)(a1 + 64), *(void *)(a1 + 72));
  }
  else
  {
    *(_OWORD *)&v20[1].__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 64);
    v20[1].__r_.__value_.__r.__words[2] = *(void *)(a1 + 80);
  }
  xpc_object_t v23 = v21 + 2;
  if (*(char *)(a1 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)(a1 + 88), *(void *)(a1 + 96));
  }
  else
  {
    *(_OWORD *)&v23->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 88);
    v21[2].__r_.__value_.__r.__words[2] = *(void *)(a1 + 104);
  }
  dispatch_group_notify_f(v18, v19, v21, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_1 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_1 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  return std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const>>::~unique_ptr[abi:ne180100](&v25);
}

void sub_1C5B78B00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, void *aBlock, CFTypeRef cf, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (!v2) {
    return a1;
  }
  if ((*(char *)(v2 + 111) & 0x80000000) == 0)
  {
    if ((*(char *)(v2 + 87) & 0x80000000) == 0) {
      goto LABEL_4;
    }
LABEL_11:
    operator delete(*(void **)(v2 + 64));
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 48);
    if (!v3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  operator delete(*(void **)(v2 + 88));
  if (*(char *)(v2 + 87) < 0) {
    goto LABEL_11;
  }
LABEL_4:
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 48);
  if (v3) {
LABEL_5:
  }
    std::__shared_weak_count::__release_weak(v3);
LABEL_6:
  xpc_release(*(xpc_object_t *)(v2 + 32));
  *(void *)(v2 + 32) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  operator delete((void *)v2);
  return a1;
}

uint64_t std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F210FAE8;
  xpc_release(*(xpc_object_t *)(a1 + 16));
  *(void *)(a1 + 16) = 0;
  return a1;
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::~__func(xpc_object_t *a1)
{
  *a1 = &unk_1F210FAE8;
  xpc_release(a1[2]);

  operator delete(a1);
}

void *std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 16);
  *uint64_t v2 = &unk_1F210FAE8;
  v2[1] = v4;
  v2[2] = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    v2[2] = xpc_null_create();
  }
  return v2;
}

xpc_object_t std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::__clone(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void **)(a1 + 16);
  *a2 = &unk_1F210FAE8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    return xpc_retain(v2);
  }
  xpc_object_t result = xpc_null_create();
  a2[2] = result;
  return result;
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::destroy(uint64_t a1)
{
  *(void *)(a1 + 16) = 0;
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::destroy_deallocate(xpc_object_t *a1)
{
  xpc_release(a1[2]);

  operator delete(a1);
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::operator()(uint64_t a1, unsigned __int8 *a2, void **a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  int v4 = *a2;
  uint64_t v5 = *a3;
  *a3 = xpc_null_create();
  uint64_t v6 = *(void **)(a1 + 8);
  if (v4)
  {
    memset(&v29, 170, sizeof(v29));
    xpc_object_t value = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E4F470D0]);
    *(void *)long long buf = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      *(void *)long long buf = xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)&v29, (xpc *)buf, (const object *)"", v8);
    xpc_release(*(xpc_object_t *)buf);
    size_t v10 = (char *)*MEMORY[0x1E4F4F930];
    char v11 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v12 = &v29;
    }
    else {
      uint64_t v12 = (std::string *)v29.__r_.__value_.__r.__words[0];
    }
    int64_t v13 = strlen((const char *)*MEMORY[0x1E4F4F930]);
    if (v13)
    {
      int64_t v14 = v13;
      int64_t size = v29.__r_.__value_.__l.__size_;
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int64_t size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
      }
      if (size >= v13)
      {
        int v17 = (char *)v12 + size;
        int v18 = *v10;
        uint64_t v19 = v12;
        do
        {
          int64_t v20 = size - v14;
          if (v20 == -1) {
            break;
          }
          xpc_object_t v21 = (char *)memchr(v19, v18, v20 + 1);
          if (!v21) {
            break;
          }
          std::string::size_type v22 = v21;
          if (!memcmp(v21, v10, v14))
          {
            if (v22 == v17 || v22 - (char *)v12 == -1) {
              break;
            }
            goto LABEL_26;
          }
          uint64_t v19 = (std::string *)(v22 + 1);
          int64_t size = v17 - (v22 + 1);
        }
        while (size >= v14);
      }
      xpc_object_t v16 = *(void **)(a1 + 16);
      *(void *)long long buf = v16;
      if (v16) {
        xpc_retain(v16);
      }
      else {
        *(void *)long long buf = xpc_null_create();
      }
      TapToRadar::createRadarIfPossible((xpc_object_t *)buf, (uint64_t)&v29);
      xpc_release(*(xpc_object_t *)buf);
      *(void *)long long buf = 0;
      goto LABEL_44;
    }
LABEL_26:
    xpc_object_t v23 = v6[26];
    xpc_object_t v28 = v23;
    if (v23)
    {
      dispatch_retain(v23);
      dispatch_group_enter(v23);
      char v11 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
    }
    if (v11 < 0) {
      std::string::__init_copy_ctor_external(&__p, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v29;
    }
    xpc_object_t v24 = *(xpc_object_t *)(a1 + 16);
    if (v24)
    {
      xpc_retain(v24);
      size_t v32 = 0;
      *(void *)long long buf = &unk_1F210FB68;
      xpc_object_t v31 = v24;
    }
    else
    {
      xpc_object_t v24 = xpc_null_create();
      size_t v32 = 0;
      *(void *)long long buf = &unk_1F210FB68;
      xpc_object_t v31 = v24;
      if (!v24)
      {
        xpc_object_t v31 = xpc_null_create();
        goto LABEL_36;
      }
    }
    xpc_retain(v24);
LABEL_36:
    size_t v32 = buf;
    LogTracker::processLogarchive_sync(v6, &v28, (const char *)&__p, buf);
    if (v32 == buf)
    {
      (*(void (**)(uint8_t *))(*(void *)buf + 32))(buf);
    }
    else if (v32)
    {
      (*(void (**)(uint8_t *, uint64_t, uint64_t))(*(void *)v32 + 40))(v32, v25, v26);
    }
    xpc_release(v24);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v23)
    {
      dispatch_group_leave(v23);
      dispatch_release(v23);
    }
LABEL_44:
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    goto LABEL_46;
  }
  size_t v9 = v6[11];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_ERROR, "Failed to collect sysdiagnose!", buf, 2u);
  }
LABEL_46:
  xpc_release(v5);
}

void sub_1C5B792CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,xpc_object_t object,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (v27)
  {
    dispatch_group_leave(v27);
    dispatch_release(v27);
  }
  if (a22 < 0) {
    operator delete(__p);
  }
  xpc_release(v26);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvEUlbS1_E_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvEUlbS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvEUlbS1_E_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvEUlbS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::target_type()
{
}

uint64_t std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F210FB68;
  xpc_release(*(xpc_object_t *)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  return a1;
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func(xpc_object_t *a1)
{
  *a1 = &unk_1F210FB68;
  xpc_release(a1[1]);

  operator delete(a1);
}

void *std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  unint64_t v3 = *(void **)(a1 + 8);
  *uint64_t v2 = &unk_1F210FB68;
  v2[1] = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    v2[1] = xpc_null_create();
  }
  return v2;
}

xpc_object_t std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  *a2 = &unk_1F210FB68;
  a2[1] = v2;
  if (v2) {
    return xpc_retain(v2);
  }
  xpc_object_t result = xpc_null_create();
  a2[1] = result;
  return result;
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::destroy(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::destroy_deallocate(xpc_object_t *a1)
{
  xpc_release(a1[1]);

  operator delete(a1);
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  xpc_object_t object = v1;
  if (v1) {
    xpc_retain(v1);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v3 = 0;
  TapToRadar::createRadarIfPossible(&object, (uint64_t)__p);
  if (SHIBYTE(v3) < 0) {
    operator delete(__p[0]);
  }
  xpc_release(object);
}

void sub_1C5B796D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, xpc_object_t object)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvENKUlbS1_E_clEbS1_EUlbE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvENKUlbS1_E_clEbS1_EUlbE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvENKUlbS1_E_clEbS1_EUlbE_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvENKUlbS1_E_clEbS1_EUlbE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::target_type()
{
}

void dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_1 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_1 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(char *a1)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  int v4 = a1 + 8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)a1 + 1);
  uint64_t v3 = *((void *)v4 + 1);
  uint64_t v5 = (const char **)MEMORY[0x1E4F4CDF8];
  if (!v2)
  {
    char v7 = 0;
    goto LABEL_7;
  }
  uint64_t v6 = std::__shared_weak_count::lock(v2);
  char v7 = v6;
  if (!v6 || !*(void *)a1)
  {
LABEL_7:
    size_t v9 = *v5;
    size_t v10 = strlen(*v5);
    if (v10 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    char v11 = (void *)v10;
    if (v10 >= 0x17)
    {
      uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17) {
        uint64_t v13 = v10 | 7;
      }
      uint64_t v14 = v13 + 1;
      uint64_t v12 = (void **)operator new(v13 + 1);
      __dst[1] = v11;
      unint64_t v46 = v14 | 0x8000000000000000;
      __dst[0] = v12;
    }
    else
    {
      HIBYTE(v46) = v10;
      uint64_t v12 = __dst;
      if (!v10) {
        goto LABEL_15;
      }
    }
    memmove(v12, v9, (size_t)v11);
LABEL_15:
    *((unsigned char *)v11 + (void)v12) = 0;
    long long aBlock = 0;
    CFTypeRef cf = 0;
    Service::broadcastEvent(v3, (uint64_t)__dst, &cf, (const void **)&aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (SHIBYTE(v46) < 0)
    {
      operator delete(__dst[0]);
      if (!v7) {
        goto LABEL_74;
      }
    }
    else if (!v7)
    {
      goto LABEL_74;
    }
    if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_74;
    }
    char v8 = 1;
    goto LABEL_25;
  }
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_26;
  }
  char v8 = 0;
LABEL_25:
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (v8) {
    goto LABEL_74;
  }
LABEL_26:
  xpc_object_t v15 = xpc_dictionary_create(0, 0, 0);
  if (v15 || (xpc_object_t v15 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v15) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v15);
      xpc_object_t v16 = v15;
    }
    else
    {
      xpc_object_t v16 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v16 = xpc_null_create();
    xpc_object_t v15 = 0;
  }
  xpc_release(v15);
  int v17 = (const char **)(a1 + 24);
  int v18 = a1 + 24;
  if (a1[47] < 0) {
    int v18 = *v17;
  }
  xpc_object_t v19 = xpc_string_create(v18);
  if (!v19) {
    xpc_object_t v19 = xpc_null_create();
  }
  xpc_dictionary_set_value(v16, (const char *)*MEMORY[0x1E4F4C4C8], v19);
  xpc_object_t v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  xpc_object_t v21 = a1 + 48;
  if (a1[71] < 0) {
    xpc_object_t v21 = *(const char **)v21;
  }
  xpc_object_t v22 = xpc_string_create(v21);
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  xpc_dictionary_set_value(v16, (const char *)*MEMORY[0x1E4F4CA98], v22);
  xpc_object_t v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  xpc_object_t v24 = xpc_string_create((const char *)*MEMORY[0x1E4F4F928]);
  if (!v24) {
    xpc_object_t v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(v16, (const char *)*MEMORY[0x1E4F4C7F8], v24);
  xpc_object_t v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  uint64_t v26 = *v5;
  size_t v27 = strlen(*v5);
  if (v27 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v28 = (void *)v27;
  if (v27 >= 0x17)
  {
    uint64_t v31 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17) {
      uint64_t v31 = v27 | 7;
    }
    uint64_t v32 = v31 + 1;
    std::string v29 = operator new(v31 + 1);
    __p[1] = v28;
    unint64_t v42 = v32 | 0x8000000000000000;
    __p[0] = v29;
LABEL_50:
    memmove(v29, v26, (size_t)v28);
    *((unsigned char *)v28 + (void)v29) = 0;
    xpc_object_t object = v16;
    if (v16) {
      goto LABEL_46;
    }
LABEL_51:
    xpc_object_t object = xpc_null_create();
    goto LABEL_52;
  }
  HIBYTE(v42) = v27;
  std::string v29 = __p;
  if (v27) {
    goto LABEL_50;
  }
  LOBYTE(__p[0]) = 0;
  xpc_object_t object = v16;
  if (!v16) {
    goto LABEL_51;
  }
LABEL_46:
  xpc_retain(v16);
LABEL_52:
  xpc::bridge((uint64_t *)&v47, (xpc *)&object, v30);
  uint64_t v33 = (const void *)v47.__r_.__value_.__r.__words[0];
  if (v47.__r_.__value_.__r.__words[0]
    && (CFTypeID v34 = CFGetTypeID(v47.__r_.__value_.__l.__data_), v34 == CFDictionaryGetTypeID()))
  {
    CFTypeRef v40 = v33;
    CFRetain(v33);
  }
  else
  {
    CFTypeRef v40 = 0;
  }
  uint64_t v38 = 0;
  Service::broadcastEvent(v3, (uint64_t)__p, &v40, (const void **)&v38);
  if (v38) {
    _Block_release(v38);
  }
  if (v40) {
    CFRelease(v40);
  }
  if (v47.__r_.__value_.__r.__words[0]) {
    CFRelease(v47.__r_.__value_.__l.__data_);
  }
  xpc_release(object);
  if ((SHIBYTE(v42) & 0x80000000) == 0)
  {
    size_t v35 = *(NSObject **)(v3 + 88);
    if (!os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_64;
    }
LABEL_67:
    std::string::size_type v36 = (std::string::size_type)(a1 + 24);
    if (a1[47] < 0) {
      std::string::size_type v36 = (std::string::size_type)*v17;
    }
    LODWORD(v47.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v47.__r_.__value_.__r.__words + 4) = v36;
    _os_log_impl(&dword_1C59C6000, v35, OS_LOG_TYPE_DEFAULT, "#I TracePostProcessingEnd with timestamp[%s]", (uint8_t *)&v47, 0xCu);
    if ((a1[47] & 0x80000000) == 0) {
      goto LABEL_65;
    }
LABEL_70:
    std::string::__init_copy_ctor_external(&v47, *((const std::string::value_type **)a1 + 3), *((void *)a1 + 4));
    goto LABEL_71;
  }
  operator delete(__p[0]);
  size_t v35 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_67;
  }
LABEL_64:
  if (a1[47] < 0) {
    goto LABEL_70;
  }
LABEL_65:
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = *(_OWORD *)v17;
  v47.__r_.__value_.__r.__words[2] = *((void *)a1 + 5);
LABEL_71:
  LogTracker::houseKeepingLogs_sync(v3, (const char *)&v47);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  xpc_release(v16);
LABEL_74:
  if ((a1[71] & 0x80000000) == 0)
  {
    if ((a1[47] & 0x80000000) == 0) {
      goto LABEL_76;
    }
LABEL_80:
    operator delete(*((void **)a1 + 3));
    uint64_t v37 = (std::__shared_weak_count *)*((void *)a1 + 1);
    if (!v37) {
      goto LABEL_78;
    }
    goto LABEL_77;
  }
  operator delete(*((void **)a1 + 6));
  if (a1[47] < 0) {
    goto LABEL_80;
  }
LABEL_76:
  uint64_t v37 = (std::__shared_weak_count *)*((void *)a1 + 1);
  if (v37) {
LABEL_77:
  }
    std::__shared_weak_count::__release_weak(v37);
LABEL_78:
  operator delete(a1);
}

void sub_1C5B79CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, xpc_object_t object, CFTypeRef cf, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, CFTypeRef a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __cxx_global_var_init_13()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<LogDumpDB>::~PthreadMutexGuardPolicy, &ctu::Singleton<LogDumpDB,LogDumpDB,ctu::PthreadMutexGuardPolicy<LogDumpDB>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

uint64_t __cxx_global_var_init_48()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::Gestalt>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

uint64_t AccessoriesDelegateBase::AccessoriesDelegateBase(uint64_t a1, uint64_t a2, NSObject **a3, char *a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v7 = a1 + 8;
  char v8 = *a3;
  *(void *)(v7 + 16) = *a3;
  if (v8) {
    dispatch_retain(v8);
  }
  *(void *)(a1 + 32) = 0;
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 40), "com.apple.telephony.abm", a4);
  *(void *)a1 = &unk_1F210FC08;
  uint64_t v9 = a1 + 48;
  uint64_t v10 = *(void *)(a2 + 24);
  if (!v10) {
    goto LABEL_6;
  }
  if (v10 != a2)
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v9);
LABEL_6:
    *(void *)(a1 + 72) = v10;
    *(unsigned char *)(a1 + 80) = 0;
    return a1;
  }
  *(void *)(a1 + 72) = v9;
  (*(void (**)(void))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24));
  *(unsigned char *)(a1 + 80) = 0;
  return a1;
}

void sub_1C5B7A060(_Unwind_Exception *a1)
{
  ctu::SharedLoggable<AccessoriesDelegateBase,ctu::OsLogLogger>::~SharedLoggable(v1);
  _Unwind_Resume(a1);
}

void sub_1C5B7A074(_Unwind_Exception *a1)
{
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v1);
  _Unwind_Resume(a1);
}

void *ctu::SharedLoggable<AccessoriesDelegateBase,ctu::OsLogLogger>::~SharedLoggable(void *a1)
{
  MEMORY[0x1C8794100](a1 + 4);
  uint64_t v2 = a1[3];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[2];
  if (v3) {
    dispatch_release(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void AccessoriesDelegateBase::~AccessoriesDelegateBase(AccessoriesDelegateBase *this)
{
  *(void *)this = &unk_1F210FC08;
  uint64_t v2 = (char *)this + 48;
  uint64_t v3 = (char *)*((void *)this + 9);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    MEMORY[0x1C8794100]((char *)this + 40);
    int v4 = *((void *)this + 4);
    if (v4) {
LABEL_5:
    }
      dispatch_release(v4);
  }
  else
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    MEMORY[0x1C8794100]((char *)this + 40);
    int v4 = *((void *)this + 4);
    if (v4) {
      goto LABEL_5;
    }
  }
  uint64_t v5 = *((void *)this + 3);
  if (v5) {
    dispatch_release(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
}

uint64_t AccessoriesDelegateBase::createError@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, CFIndex a3@<X2>, CFErrorRef *a4@<X8>)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  unint64_t v37 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v36[7] = v8;
  v36[8] = v8;
  v36[5] = v8;
  void v36[6] = v8;
  v36[3] = v8;
  v36[4] = v8;
  v36[1] = v8;
  v36[2] = v8;
  long long v35 = v8;
  v36[0] = v8;
  *(_OWORD *)std::string __p = v8;
  long long v34 = v8;
  long long v31 = v8;
  long long v32 = v8;
  long long v29 = v8;
  long long v30 = v8;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v29);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"\n", 1);
  uint64_t v10 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  size_t v11 = strlen(v10);
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)":\n", 2);
  int v14 = *(char *)(a2 + 23);
  if (v14 >= 0) {
    uint64_t v15 = a2;
  }
  else {
    uint64_t v15 = *(void *)a2;
  }
  if (v14 >= 0) {
    uint64_t v16 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v16 = *(void *)(a2 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
  unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
  if ((BYTE8(v35) & 0x10) != 0)
  {
    uint64_t v18 = v35;
    if ((unint64_t)v35 < *((void *)&v32 + 1))
    {
      *(void *)&long long v35 = *((void *)&v32 + 1);
      uint64_t v18 = *((void *)&v32 + 1);
    }
    xpc_object_t v19 = (const void *)v32;
    std::string::size_type v20 = v18 - v32;
    if ((unint64_t)(v18 - v32) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_40;
    }
  }
  else
  {
    if ((BYTE8(v35) & 8) == 0)
    {
      *((unsigned char *)&v27.__r_.__value_.__s + 23) = 0;
      v27.__r_.__value_.__s.__data_[0] = 0;
      int v17 = 0;
LABEL_16:
      std::string v40 = v27;
      goto LABEL_22;
    }
    xpc_object_t v19 = (const void *)*((void *)&v30 + 1);
    std::string::size_type v20 = *((void *)&v31 + 1) - *((void *)&v30 + 1);
    if (*((void *)&v31 + 1) - *((void *)&v30 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_40:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v20 >= 0x17)
  {
    uint64_t v22 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17) {
      uint64_t v22 = v20 | 7;
    }
    uint64_t v23 = v22 + 1;
    xpc_object_t v21 = (std::string *)operator new(v22 + 1);
    v27.__r_.__value_.__l.__size_ = v20;
    v27.__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
    v27.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
LABEL_20:
    memmove(v21, v19, v20);
    v21->__r_.__value_.__s.__data_[v20] = 0;
    int v17 = SHIBYTE(v27.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_21;
  }
  *((unsigned char *)&v27.__r_.__value_.__s + 23) = v20;
  xpc_object_t v21 = &v27;
  if (v20) {
    goto LABEL_20;
  }
  v27.__r_.__value_.__s.__data_[0] = 0;
  int v17 = SHIBYTE(v27.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_16;
  }
LABEL_21:
  std::string::__init_copy_ctor_external(&v40, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
LABEL_22:
  uint64_t v38 = 0;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v41, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
  }
  else {
    std::string v41 = v40;
  }
  CFTypeID v39 = 0;
  CFAllocatorRef v24 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (ctu::cf::convert_copy()) {
    xpc_object_t v25 = v39;
  }
  else {
    xpc_object_t v25 = 0;
  }
  if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    unint64_t v28 = (unint64_t)v25;
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_30;
    }
LABEL_37:
    operator delete(v40.__r_.__value_.__l.__data_);
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_38;
  }
  operator delete(v41.__r_.__value_.__l.__data_);
  unint64_t v28 = (unint64_t)v25;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_37;
  }
LABEL_30:
  if ((v17 & 0x80000000) == 0) {
    goto LABEL_31;
  }
LABEL_38:
  operator delete(v27.__r_.__value_.__l.__data_);
LABEL_31:
  v41.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4F1D140];
  v40.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
  *a4 = (CFErrorRef)0xAAAAAAAAAAAAAAAALL;
  *a4 = CFErrorCreateWithUserInfoKeysAndValues(v24, (CFErrorDomain)*MEMORY[0x1E4F1D160], a3, (const void *const *)&v41.__r_.__value_.__l.__data_, (const void *const *)&v40.__r_.__value_.__l.__data_, 1);
  if (v25) {
    CFRelease(v25);
  }
  *(void *)&long long v29 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v29 + *(void *)(v29 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v29 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v34) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C8795140](v36);
}

void sub_1C5B7A5DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16)
{
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef((const void **)(v17 - 144));
  if (*(char *)(v17 - 105) < 0)
  {
    operator delete(*(void **)(v17 - 128));
    if ((v16 & 0x80000000) == 0)
    {
LABEL_3:
      std::ostringstream::~ostringstream((uint64_t)&a14);
      _Unwind_Resume(a1);
    }
  }
  else if ((v16 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_1C5B7A6B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C5B7A6CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AccessoriesDelegateBase::handleServerCommand()
{
  return 0;
}

void sub_1C5B7A8C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5B7A8F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5B7AB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  long long v8 = va_arg(va1, const void *);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, const void *);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef((const void **)va2);

  _Unwind_Resume(a1);
}

void sub_1C5B7AC50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef(&a9);
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef(&a10);

  _Unwind_Resume(a1);
}

void *__copy_helper_atomic_property_(void **a1, const void **a2)
{
  *a1 = _Block_copy(*a2);
  uint64_t result = _Block_copy(a2[1]);
  a1[1] = result;
  return result;
}

uint64_t __assign_helper_atomic_property_(uint64_t a1, const void **a2)
{
  int v4 = _Block_copy(*a2);
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;

  *(void *)(a1 + 8) = _Block_copy(a2[1]);

  return MEMORY[0x1F41817F8]();
}

void sub_1C5B7ADAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

const char *CoreAccessoriesDelegate::getName(CoreAccessoriesDelegate *this)
{
  return "CoreAccessories.delegate";
}

uint64_t CoreAccessoriesDelegate::create@<X0>(void *a1@<X0>, NSObject **a2@<X1>, std::__shared_weak_count_vtbl **a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int v16 = 0;
  uint64_t v17 = 0;
  uint64_t v6 = (std::__shared_weak_count_vtbl *)operator new(0x90uLL);
  uint64_t v7 = a1[3];
  if (!v7) {
    goto LABEL_4;
  }
  if ((void *)v7 != a1)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
LABEL_4:
    xpc_object_t v19 = (void *)v7;
    goto LABEL_6;
  }
  xpc_object_t v19 = v18;
  (*(void (**)(void *, void *))(*a1 + 24))(a1, v18);
LABEL_6:
  long long v8 = *a2;
  uint64_t v15 = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  CoreAccessoriesDelegate::CoreAccessoriesDelegate((uint64_t)v6, v18, &v15);
  size_t v11 = (std::__shared_weak_count *)operator new(0x20uLL);
  v11->__shared_owners_ = 0;
  p_std::string::size_type shared_owners = &v11->__shared_owners_;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210FE18;
  v11->__shared_weak_owners_ = 0;
  v11[1].__vftable = v6;
  on_zero_shared = (std::__shared_weak_count *)v6->__on_zero_shared;
  if (!on_zero_shared)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
    v6->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (on_zero_shared->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
    v6->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
    std::__shared_weak_count::__release_weak(on_zero_shared);
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_13:
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
LABEL_14:
  int v16 = v6;
  uint64_t v17 = v11;
  if (v8) {
    dispatch_release(v8);
  }
  if (v19 == v18)
  {
    (*(void (**)(void *))(v18[0] + 32))(v18);
  }
  else if (v19)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*v19 + 40))(v19, v9, v10);
  }
  uint64_t result = (*((uint64_t (**)(std::__shared_weak_count_vtbl *))v6->~__shared_weak_count + 7))(v6);
  *a3 = v6;
  a3[1] = (std::__shared_weak_count_vtbl *)v11;
  return result;
}

void sub_1C5B7B0DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  operator delete(v12);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t CoreAccessoriesDelegate::CoreAccessoriesDelegate(uint64_t a1, void *a2, NSObject **a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1F210FCF0;
  uint64_t v5 = (void *)a2[3];
  if (v5)
  {
    if (v5 == a2)
    {
      uint64_t v12 = v11;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v11);
    }
    else
    {
      uint64_t v12 = (void *)(*(uint64_t (**)(void *))(*v5 + 16))(v5);
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v6 = *a3;
  uint64_t v10 = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  uint64_t v7 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  AccessoriesDelegateBase::AccessoriesDelegateBase(a1, (uint64_t)v11, &v10, v7);
  if (v6) {
    dispatch_release(v6);
  }
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void *))(*v12 + 40))(v12);
  }
  *(void *)a1 = &unk_1F210FCF0;
  long long v8 = operator new(0x20uLL);
  v8[1] = 0;
  uint64_t v8[2] = 0;
  void *v8 = &unk_1F210FE68;
  v8[3] = 0;
  *(void *)(a1 + 88) = v8 + 3;
  *(void *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  return a1;
}

void sub_1C5B7B390(_Unwind_Exception *a1)
{
  AccessoriesDelegateBase::~AccessoriesDelegateBase(v1);
  _Unwind_Resume(a1);
}

void sub_1C5B7B3A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    dispatch_release(v10);
  }
  std::function<void ()(ctu::cf::CFSharedRef<__CFError>,std::vector<abm::AccessoryInfo>)>::~function(&a10);
  _Unwind_Resume(a1);
}

void CoreAccessoriesDelegate::~CoreAccessoriesDelegate(CoreAccessoriesDelegate *this)
{
  *(void *)this = &unk_1F210FCF0;
  uint64_t v2 = (void **)*((void *)this + 15);
  if (v2)
  {
    do
    {
      uint64_t v6 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v6;
    }
    while (v6);
  }
  uint64_t v3 = (void *)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v3) {
    operator delete(v3);
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = this;
  }
  else
  {
    uint64_t v5 = this;
  }
  AccessoriesDelegateBase::~AccessoriesDelegateBase(v5);
}

{
  void *v1;
  uint64_t vars8;

  CoreAccessoriesDelegate::~CoreAccessoriesDelegate(this);

  operator delete(v1);
}

void CoreAccessoriesDelegate::init(CoreAccessoriesDelegate *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 3221225472;
  v1[2] = ___ZN23CoreAccessoriesDelegate4initEv_block_invoke;
  v1[3] = &__block_descriptor_40_e5_v8__0l;
  v1[4] = this;
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

void ___ZN23CoreAccessoriesDelegate4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = (std::__shared_weak_count *)v1[2];
  if (!v2 || (v3 = v1[1], (int v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  p_shared_weak_owners = &v4->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN23CoreAccessoriesDelegate4initEv_block_invoke_2;
  aBlock[3] = &__block_descriptor_56_ea8_32c49_ZTSKZZN23CoreAccessoriesDelegate4initEvEUb_E3__0_e160_v40__0_CFSharedRef_const___CFString______CFString__8_CFSharedRef_const___CFString______CFString__16i24i28_CFSharedRef_const___CFDictionary______CFDictionary__32l;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  void aBlock[4] = v1;
  void aBlock[5] = v3;
  uint64_t v20 = v5;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v7 = _Block_copy(aBlock);
  std::__shared_weak_count::__release_weak(v5);
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3321888768;
  dispatch_object_t v17[2] = ___ZN23CoreAccessoriesDelegate4initEv_block_invoke_111;
  v17[3] = &__block_descriptor_56_ea8_32c49_ZTSKZZN23CoreAccessoriesDelegate4initEvEUb_E3__1_e52_v16__0_CFSharedRef_const___CFString______CFString__8l;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  v17[4] = v1;
  v17[5] = v3;
  uint64_t v18 = v5;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  long long v8 = _Block_copy(v17);
  std::__shared_weak_count::__release_weak(v5);
  uint64_t v9 = (void **)v1[11];
  uint64_t v10 = _Block_copy(v7);
  size_t v11 = _Block_copy(v8);
  uint64_t v12 = [AccessoryDetection alloc];
  uint64_t v13 = _Block_copy(v10);
  int v14 = _Block_copy(v11);
  if (v12)
  {
    uint64_t v15 = -[AccessoryDetection initWithCallback:](v12, "initWithCallback:", v13, v14);
  }
  else
  {

    uint64_t v15 = 0;
  }
  int v16 = *v9;
  void *v9 = (void *)v15;

  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }

  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C5B7B784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    unint64_t v28 = a22;
    if (!a22)
    {
LABEL_3:

      std::__shared_weak_count::__release_weak(v22);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    unint64_t v28 = a22;
    if (!a22) {
      goto LABEL_3;
    }
  }
  std::__shared_weak_count::__release_weak(v28);

  std::__shared_weak_count::__release_weak(v22);
  _Unwind_Resume(a1);
}

void ___ZN23CoreAccessoriesDelegate4initEv_block_invoke_2(void *a1, const void **a2, const void **a3, int a4, int a5, const void **a6)
{
  uint64_t v7 = (std::__shared_weak_count *)a1[6];
  if (v7)
  {
    uint64_t v13 = a1[4];
    int v14 = std::__shared_weak_count::lock(v7);
    if (v14)
    {
      uint64_t v15 = v14;
      if (a1[5])
      {
        v19[0] = MEMORY[0x1E4F143A8];
        v19[1] = 3321888768;
        void v19[2] = ___ZZZN23CoreAccessoriesDelegate4initEvEUb_ENK3__0clEN3ctu2cf11CFSharedRefIK10__CFStringEES6_27ACCEndpoint_TransportType_t20ACCConnection_Type_tNS3_IK14__CFDictionaryEE_block_invoke;
        v19[3] = &__block_descriptor_72_ea8_40c41_ZTSN3ctu2cf11CFSharedRefIK10__CFStringEE48c41_ZTSN3ctu2cf11CFSharedRefIK10__CFStringEE56c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_e5_v8__0l;
        int v16 = *a2;
        v19[4] = v13;
        CFTypeRef v20 = v16;
        if (v16) {
          CFRetain(v16);
        }
        uint64_t v17 = *a3;
        CFTypeRef v21 = v17;
        if (v17) {
          CFRetain(v17);
        }
        uint64_t v18 = *a6;
        CFTypeRef cf = v18;
        if (v18) {
          CFRetain(v18);
        }
        int v23 = a4;
        int v24 = a5;
        ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)(v13 + 8), (uint64_t)v19);
        if (cf) {
          CFRelease(cf);
        }
        if (v21) {
          CFRelease(v21);
        }
        if (v20) {
          CFRelease(v20);
        }
      }
      if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
}

uint64_t __copy_helper_block_ea8_32c49_ZTSKZZN23CoreAccessoriesDelegate4initEvEUb_E3__0(uint64_t result, uint64_t a2)
{
  *(_OWORD *)(result + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_32c49_ZTSKZZN23CoreAccessoriesDelegate4initEvEUb_E3__0(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN23CoreAccessoriesDelegate4initEv_block_invoke_111(void *a1, const void **a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[5])
      {
        v9[0] = MEMORY[0x1E4F143A8];
        v9[1] = 3321888768;
        uint64_t v9[2] = ___ZZZN23CoreAccessoriesDelegate4initEvEUb_ENK3__1clEN3ctu2cf11CFSharedRefIK10__CFStringEE_block_invoke;
        v9[3] = &__block_descriptor_48_ea8_40c41_ZTSN3ctu2cf11CFSharedRefIK10__CFStringEE_e5_v8__0l;
        long long v8 = *a2;
        v9[4] = v5;
        CFTypeRef cf = v8;
        if (v8) {
          CFRetain(v8);
        }
        ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)(v5 + 8), (uint64_t)v9);
        if (cf) {
          CFRelease(cf);
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

uint64_t __copy_helper_block_ea8_32c49_ZTSKZZN23CoreAccessoriesDelegate4initEvEUb_E3__1(uint64_t result, uint64_t a2)
{
  *(_OWORD *)(result + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_32c49_ZTSKZZN23CoreAccessoriesDelegate4initEvEUb_E3__1(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void CoreAccessoriesDelegate::start(CoreAccessoriesDelegate *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 3221225472;
  v1[2] = ___ZN23CoreAccessoriesDelegate5startEv_block_invoke;
  v1[3] = &__block_descriptor_40_e5_v8__0l;
  v1[4] = this;
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

void ___ZN23CoreAccessoriesDelegate5startEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(NSObject **)(v1 + 40);
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Already started", v5, 2u);
    }
  }
  else
  {
    if (v4)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Starting", buf, 2u);
    }
    *(unsigned char *)(v1 + 80) = 1;
    [**(id **)(v1 + 88) start];
  }
}

void CoreAccessoriesDelegate::stop(CoreAccessoriesDelegate *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 3221225472;
  v1[2] = ___ZN23CoreAccessoriesDelegate4stopEv_block_invoke;
  v1[3] = &__block_descriptor_40_e5_v8__0l;
  v1[4] = this;
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

void ___ZN23CoreAccessoriesDelegate4stopEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(NSObject **)(v1 + 40);
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Stopping", buf, 2u);
    }
    *(unsigned char *)(v1 + 80) = 0;
    [**(id **)(v1 + 88) stop];
    if (*(void *)(v1 + 128))
    {
      uint64_t v5 = *(void ***)(v1 + 120);
      if (v5)
      {
        do
        {
          long long v8 = (void **)*v5;
          if (*((char *)v5 + 39) < 0) {
            operator delete(v5[2]);
          }
          operator delete(v5);
          uint64_t v5 = v8;
        }
        while (v8);
      }
      *(void *)(v1 + 120) = 0;
      uint64_t v6 = *(void *)(v1 + 112);
      if (v6)
      {
        for (uint64_t i = 0; i != v6; ++i)
          *(void *)(*(void *)(v1 + 104) + 8 * i) = 0;
      }
      *(void *)(v1 + 128) = 0;
    }
  }
  else if (v4)
  {
    v9[0] = 0;
    _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Already stopped", (uint8_t *)v9, 2u);
  }
}

void ___ZZZN23CoreAccessoriesDelegate4initEvEUb_ENK3__0clEN3ctu2cf11CFSharedRefIK10__CFStringEES6_27ACCEndpoint_TransportType_t20ACCConnection_Type_tNS3_IK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  int v2 = 0;
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  CFTypeRef v74 = 0;
  uint64_t v3 = *(void **)(a1 + 32);
  if (*(void *)(a1 + 40)) {
    BOOL v4 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4
    || (HIBYTE(v73[2]) = 21,
        strcpy((char *)v73, "Invalid endpoint UUID"),
        (*(void (**)(std::string *__return_ptr, void *, void **, uint64_t))(*v3 + 48))(&buf, v3, v73, 5),
        int v2 = (const void *)buf.__r_.__value_.__r.__words[0],
        CFTypeRef v74 = (CFTypeRef)buf.__r_.__value_.__r.__words[0],
        buf.__r_.__value_.__r.__words[0] = 0,
        (SHIBYTE(v73[2]) & 0x80000000) == 0))
  {
    std::string::size_type v5 = *(void *)(a1 + 48);
    if (v5) {
      uint64_t v6 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
    }
    else {
      uint64_t v6 = 0;
    }
    if (v6) {
      goto LABEL_10;
    }
LABEL_22:
    uint64_t v71 = (char *)operator new(0x19uLL);
    long long v72 = xmmword_1C5BC51F0;
    strcpy(v71, "Invalid connection UUID");
    (*(void (**)(std::string *__return_ptr, void *, char **, uint64_t))(*v3 + 48))(&buf, v3, &v71, 5);
    std::string::size_type v14 = buf.__r_.__value_.__r.__words[0];
    CFTypeRef v74 = (CFTypeRef)buf.__r_.__value_.__r.__words[0];
    buf.__r_.__value_.__r.__words[0] = 0;
    if (v2)
    {
      CFRelease(v2);
      if (buf.__r_.__value_.__r.__words[0]) {
        CFRelease(buf.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(v72) < 0)
    {
      operator delete(v71);
      if (*(void *)(a1 + 56)) {
        int v16 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        int v16 = 0;
      }
      if (v16) {
        goto LABEL_42;
      }
    }
    else
    {
      if (*(void *)(a1 + 56)) {
        uint64_t v15 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        uint64_t v15 = 0;
      }
      if (v15) {
        goto LABEL_42;
      }
    }
    int v2 = (const void *)v14;
    goto LABEL_36;
  }
  operator delete(v73[0]);
  std::string::size_type v5 = *(void *)(a1 + 48);
  if (v5) {
    uint64_t v13 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
  }
  else {
    uint64_t v13 = 0;
  }
  if (!v13) {
    goto LABEL_22;
  }
LABEL_10:
  uint64_t v7 = *(void *)(a1 + 56);
  if (v7) {
    long long v8 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    long long v8 = 0;
  }
  if (!v8)
  {
LABEL_36:
    std::string __p = operator new(0x20uLL);
    long long v70 = xmmword_1C5BCAD80;
    strcpy((char *)__p, "Invalid connection properties");
    (*(void (**)(std::string *__return_ptr, void *, void **, uint64_t))(*v3 + 48))(&buf, v3, &__p, 5);
    CFTypeRef v74 = (CFTypeRef)buf.__r_.__value_.__r.__words[0];
    buf.__r_.__value_.__r.__words[0] = 0;
    if (v2)
    {
      CFRelease(v2);
      if (buf.__r_.__value_.__r.__words[0]) {
        CFRelease(buf.__r_.__value_.__l.__data_);
      }
    }
    if ((SHIBYTE(v70) & 0x80000000) == 0) {
      goto LABEL_42;
    }
    uint64_t v17 = (char *)__p;
    goto LABEL_41;
  }
  if (!v4) {
    goto LABEL_42;
  }
  uint64_t v9 = v3[5];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    std::string::size_type v10 = *(void *)(a1 + 40);
    uint64_t v11 = *(unsigned int *)(a1 + 64);
    if (v11 > 0xD) {
      uint64_t v12 = "Unknown";
    }
    else {
      uint64_t v12 = transportTypeToString(ACCEndpoint_TransportType_t)::transportTypes[v11];
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 138413058;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v10;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v5;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
    size_t v76 = v12;
    __int16 v77 = 2112;
    uint64_t v78 = v7;
    _os_log_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEFAULT, "#I Accessory attached:\n    endpoint UUID:      %@\n    connection UUID:    %@\n    transport:         %s\n    properties:        \n%@", (uint8_t *)&buf, 0x2Au);
  }
  int v26 = *(_DWORD *)(a1 + 64);
  if (v26 == 13)
  {
    uint64_t v33 = *(const void **)(a1 + 56);
    char v65 = v33;
    if (v33)
    {
      CFRetain(v33);
      LODWORD(buf.__r_.__value_.__l.__data_) = 0;
      if (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
      {
        CFTypeID v39 = (const void *)*MEMORY[0x1E4F5B1D8];
        if (CFDictionaryContainsKey((CFDictionaryRef)v33, (const void *)*MEMORY[0x1E4F5B1D8]))
        {
          CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v33, v39);
          CFNumberRef v20 = Value;
          if (!Value)
          {
            uint64_t v42 = v33;
            __int16 v18 = 0;
            __int16 v19 = 0;
            goto LABEL_103;
          }
          CFTypeID v41 = CFGetTypeID(Value);
          if (v41 == CFNumberGetTypeID() && CFNumberGetValue(v20, kCFNumberIntType, &buf))
          {
            uint64_t v42 = v33;
            __int16 v18 = 0;
            __int16 v22 = -1;
            __int16 v43 = 2056;
            __int16 v44 = 3;
            __int16 v19 = 0;
            LOWORD(v20) = 0;
            __int16 v21 = 0;
            char v45 = 0;
            switch(buf.__r_.__value_.__s.__data_[0])
            {
              case 0x39:
              case 0x93:
                __int16 v44 = 0;
                __int16 v18 = 3;
                __int16 v43 = 2055;
                goto LABEL_167;
              case 0x3A:
              case 0x3B:
              case 0x3C:
              case 0x3D:
              case 0x3E:
              case 0x3F:
              case 0x40:
              case 0x41:
              case 0x46:
              case 0x47:
              case 0x48:
              case 0x49:
              case 0x4A:
              case 0x4B:
              case 0x4F:
              case 0x50:
              case 0x51:
              case 0x52:
              case 0x59:
              case 0x5A:
              case 0x5B:
              case 0x5C:
              case 0x5D:
              case 0x5E:
              case 0x5F:
              case 0x60:
              case 0x61:
              case 0x62:
              case 0x63:
              case 0x64:
              case 0x65:
              case 0x66:
              case 0x67:
              case 0x68:
              case 0x69:
              case 0x6A:
              case 0x6B:
              case 0x6C:
              case 0x6D:
              case 0x6E:
              case 0x6F:
              case 0x70:
              case 0x71:
              case 0x73:
              case 0x74:
              case 0x75:
              case 0x76:
              case 0x77:
              case 0x78:
              case 0x79:
              case 0x7A:
              case 0x7B:
              case 0x7C:
              case 0x7D:
              case 0x7E:
              case 0x7F:
              case 0x82:
              case 0x83:
              case 0x84:
              case 0x86:
              case 0x87:
              case 0x89:
              case 0x8A:
              case 0x8B:
              case 0x8C:
              case 0x8D:
              case 0x8E:
              case 0x8F:
              case 0x90:
              case 0x91:
              case 0x92:
                break;
              case 0x42:
                __int16 v44 = 0;
                __int16 v18 = 3;
                __int16 v43 = 2053;
                goto LABEL_167;
              case 0x43:
              case 0x44:
              case 0x45:
              case 0x85:
                __int16 v18 = 0;
                __int16 v43 = 2050;
                goto LABEL_167;
              case 0x4C:
              case 0x4D:
              case 0x4E:
                __int16 v18 = 0;
                __int16 v43 = 2049;
                goto LABEL_166;
              case 0x53:
              case 0x54:
              case 0x55:
              case 0x81:
                __int16 v18 = 0;
                __int16 v43 = 2048;
                __int16 v44 = 2;
                goto LABEL_167;
              case 0x56:
                __int16 v18 = 0;
                __int16 v43 = 2051;
                goto LABEL_166;
              case 0x57:
                __int16 v18 = 0;
                __int16 v43 = 2052;
LABEL_166:
                __int16 v44 = 1;
                goto LABEL_167;
              case 0x58:
                __int16 v18 = 0;
                __int16 v43 = 2052;
                __int16 v44 = 4;
                goto LABEL_167;
              case 0x72:
                goto LABEL_167;
              case 0x80:
                __int16 v18 = 0;
                __int16 v43 = 2057;
                __int16 v44 = 4;
                goto LABEL_167;
              case 0x88:
                __int16 v44 = 0;
                __int16 v18 = 3;
                __int16 v43 = 2054;
LABEL_167:
                LOWORD(v20) = v18;
                char v45 = 1;
                __int16 v21 = 2;
                __int16 v19 = 3;
                __int16 v18 = v44;
                __int16 v22 = v43;
                break;
              default:
                __int16 v19 = 0;
                LOWORD(v20) = 0;
                __int16 v21 = 0;
                char v45 = 0;
                break;
            }
LABEL_104:
            if (v42) {
              CFRelease(v42);
            }
            if ((v45 & 1) == 0)
            {
              xpc_object_t v63 = operator new(0x28uLL);
              long long v64 = xmmword_1C5BCAD60;
              strcpy((char *)v63, "Error parsing NFC Accessory properties");
              (*(void (**)(std::string *__return_ptr, void *, void **, uint64_t))(*v3 + 48))(&buf, v3, &v63, 5);
              CFTypeRef v74 = (CFTypeRef)buf.__r_.__value_.__r.__words[0];
              buf.__r_.__value_.__r.__words[0] = 0;
              if (v2)
              {
                CFRelease(v2);
                if (buf.__r_.__value_.__r.__words[0]) {
                  CFRelease(buf.__r_.__value_.__l.__data_);
                }
              }
              if (SHIBYTE(v64) < 0) {
                operator delete(v63);
              }
              goto LABEL_43;
            }
            goto LABEL_119;
          }
        }
      }
    }
    else
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 0;
    }
    uint64_t v42 = v33;
    __int16 v18 = 0;
    __int16 v19 = 0;
    LOWORD(v20) = 0;
LABEL_103:
    __int16 v21 = 0;
    char v45 = 0;
    __int16 v22 = -1;
    goto LABEL_104;
  }
  if (v26 != 7)
  {
    if (v26 == 5)
    {
      std::string v27 = *(const void **)(a1 + 56);
      size_t v68 = v27;
      if (!v27
        || (CFRetain(v27),
            !ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get))
      {
        __int16 v19 = 0;
        LOWORD(v20) = 0;
        __int16 v21 = 0;
        char v37 = 0;
        __int16 v22 = -1;
        if (!v27) {
          goto LABEL_117;
        }
        goto LABEL_116;
      }
      unint64_t v28 = (const void *)*MEMORY[0x1E4F5B1B0];
      if (CFDictionaryContainsKey((CFDictionaryRef)v27, (const void *)*MEMORY[0x1E4F5B1B0])
        && (CFStringRef v29 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v27, v28), (v30 = v29) != 0)
        && (CFTypeID v31 = CFGetTypeID(v29), v31 == CFStringGetTypeID()))
      {
        if (CFEqual(v30, @"A1749"))
        {
          LOWORD(v20) = 0;
          __int16 v19 = 1;
          __int16 v22 = 1;
          goto LABEL_157;
        }
        if (CFEqual(v30, @"A1605")
          || CFEqual(v30, @"A1717"))
        {
          LOWORD(v20) = 0;
          __int16 v22 = 5;
          goto LABEL_156;
        }
        if (CFEqual(v30, @"A1748"))
        {
          LOWORD(v20) = 0;
          __int16 v22 = 2;
          goto LABEL_156;
        }
        __int16 v19 = -1;
      }
      else
      {
        __int16 v19 = 0;
      }
      long long v34 = (const void *)*MEMORY[0x1E4F5B1C8];
      if (CFDictionaryContainsKey((CFDictionaryRef)v27, (const void *)*MEMORY[0x1E4F5B1C8]))
      {
        CFNumberRef v35 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v27, v34);
        CFNumberRef v20 = v35;
        if (!v35)
        {
LABEL_115:
          __int16 v21 = 0;
          char v37 = 0;
          __int16 v22 = -1;
          goto LABEL_116;
        }
        CFTypeID v36 = CFGetTypeID(v35);
        if (v36 == CFStringGetTypeID())
        {
          if (CFStringCompare((CFStringRef)v20, @"B292", 0))
          {
            if (CFStringCompare((CFStringRef)v20, @"A2308", 0)
              && CFStringCompare((CFStringRef)v20, @"A2309", 0))
            {
              LOWORD(v20) = 0;
              __int16 v21 = 0;
              char v37 = 0;
              __int16 v19 = -1;
              __int16 v22 = -1;
LABEL_116:
              CFRelease(v27);
LABEL_117:
              if ((v37 & 1) == 0)
              {
                xpc_object_t v66 = operator new(0x30uLL);
                long long v67 = xmmword_1C5BCAD90;
                strcpy((char *)v66, "Error parsing Generic Accessory properties");
                (*(void (**)(std::string *__return_ptr, void *, void **, uint64_t))(*v3 + 48))(&buf, v3, &v66, 5);
                CFTypeRef v74 = (CFTypeRef)buf.__r_.__value_.__r.__words[0];
                buf.__r_.__value_.__r.__words[0] = 0;
                if (v2)
                {
                  CFRelease(v2);
                  if (buf.__r_.__value_.__r.__words[0]) {
                    CFRelease(buf.__r_.__value_.__l.__data_);
                  }
                }
                if (SHIBYTE(v67) < 0) {
                  operator delete(v66);
                }
                __int16 v18 = 0;
                goto LABEL_43;
              }
              __int16 v18 = 0;
              goto LABEL_119;
            }
            LOWORD(v20) = 0;
            __int16 v22 = 12;
            __int16 v19 = 4;
LABEL_157:
            char v37 = 1;
            __int16 v21 = 2;
            goto LABEL_116;
          }
          LOWORD(v20) = 2;
          __int16 v22 = 4;
LABEL_156:
          __int16 v19 = 1;
          goto LABEL_157;
        }
      }
      LOWORD(v20) = 0;
      goto LABEL_115;
    }
    xpc_object_t v59 = (char *)operator new(0x28uLL);
    long long v60 = xmmword_1C5BCC300;
    strcpy(v59, "Unsupported accessory transport type");
    (*(void (**)(std::string *__return_ptr, void *, char **, uint64_t))(*v3 + 48))(&buf, v3, &v59, 5);
    CFTypeRef v74 = (CFTypeRef)buf.__r_.__value_.__r.__words[0];
    buf.__r_.__value_.__r.__words[0] = 0;
    if (v2)
    {
      CFRelease(v2);
      if (buf.__r_.__value_.__r.__words[0]) {
        CFRelease(buf.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(v60) < 0)
    {
      uint64_t v17 = v59;
LABEL_41:
      operator delete(v17);
    }
LABEL_42:
    __int16 v18 = 0;
    __int16 v19 = 0;
    LOWORD(v20) = 0;
    __int16 v21 = 0;
    __int16 v22 = -1;
    goto LABEL_43;
  }
  if (*(_DWORD *)(a1 + 68) == 3)
  {
    long long v32 = *(const void **)(a1 + 56);
    if (v32)
    {
      CFRetain(*(CFTypeRef *)(a1 + 56));
      CFRelease(v32);
    }
    __int16 v18 = 0;
    LOWORD(v20) = 0;
    __int16 v21 = 2;
    __int16 v22 = 12;
    __int16 v19 = 4;
  }
  else
  {
    uint64_t v61 = operator new(0x28uLL);
    long long v62 = xmmword_1C5BCAD70;
    strcpy((char *)v61, "Unsupported AID Bus connection type");
    (*(void (**)(std::string *__return_ptr, void *, void **, uint64_t))(*v3 + 48))(&buf, v3, &v61, 5);
    std::string::size_type v38 = buf.__r_.__value_.__r.__words[0];
    CFTypeRef v74 = (CFTypeRef)buf.__r_.__value_.__r.__words[0];
    buf.__r_.__value_.__r.__words[0] = 0;
    if (v2)
    {
      CFRelease(v2);
      if (buf.__r_.__value_.__r.__words[0]) {
        CFRelease(buf.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(v62) < 0) {
      operator delete(v61);
    }
    __int16 v18 = 0;
    __int16 v19 = 0;
    LOWORD(v20) = 0;
    __int16 v21 = 0;
    __int16 v22 = -1;
    int v2 = (const void *)v38;
  }
LABEL_119:
  memset(&buf, 0, sizeof(buf));
  ctu::cf::assign();
  std::string v58 = buf;
  if (!std::__hash_table<std::__hash_value_type<std::string,abm::AccessoryInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,abm::AccessoryInfo>>>::find<std::string>(v3 + 13, (uint64_t)&v58))
  {
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
    uint64_t v52 = std::__hash_table<std::__hash_value_type<std::string,abm::AccessoryInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,abm::AccessoryInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v3 + 13), (uint64_t)&v58, (long long **)&buf);
    *((_WORD *)v52 + 20) = v22;
    *((_WORD *)v52 + 21) = v21;
    *((_WORD *)v52 + 22) = 0;
    *((_WORD *)v52 + 23) = (_WORD)v20;
    *((_WORD *)v52 + 24) = v18;
    *((_WORD *)v52 + 25) = v19;
    if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_145;
  }
  *((unsigned char *)&buf.__r_.__value_.__s + 23) = 21;
  strcpy((char *)&buf, "Duplicate accessory: ");
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v46 = &v58;
  }
  else {
    unint64_t v46 = (std::string *)v58.__r_.__value_.__r.__words[0];
  }
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v58.__r_.__value_.__l.__size_;
  }
  uint64_t v48 = std::string::append(&buf, (const std::string::value_type *)v46, size);
  xpc_object_t v49 = (std::string::value_type *)v48->__r_.__value_.__r.__words[0];
  std::string::size_type v50 = v48->__r_.__value_.__l.__size_;
  std::string::size_type v51 = v48->__r_.__value_.__r.__words[2];
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if ((v51 & 0x8000000000000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v57, v49, v50);
  }
  else
  {
    v57.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
    v57.__r_.__value_.__l.__size_ = v50;
    v57.__r_.__value_.__r.__words[2] = v51;
  }
  (*(void (**)(std::string *__return_ptr, void *, std::string *, uint64_t))(*v3 + 48))(&buf, v3, &v57, 5);
  CFTypeRef v74 = (CFTypeRef)buf.__r_.__value_.__r.__words[0];
  buf.__r_.__value_.__r.__words[0] = 0;
  if (v2)
  {
    CFRelease(v2);
    if (buf.__r_.__value_.__r.__words[0]) {
      CFRelease(buf.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v57.__r_.__value_.__l.__data_);
    if ((v51 & 0x8000000000000000) == 0)
    {
LABEL_144:
      if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_43;
      }
      goto LABEL_145;
    }
  }
  else if ((v51 & 0x8000000000000000) == 0)
  {
    goto LABEL_144;
  }
  operator delete(v49);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
LABEL_145:
  }
    operator delete(v58.__r_.__value_.__l.__data_);
LABEL_43:
  CFTypeRef v23 = v74;
  if (v3[9])
  {
    CFTypeRef cf = v74;
    if (v74) {
      CFRetain(v74);
    }
    int v24 = operator new(0xCuLL);
    xpc_object_t v54 = v24 + 6;
    uint64_t v55 = v24 + 6;
    _WORD *v24 = v22;
    v24[1] = v21;
    void v24[2] = 0;
    v24[3] = (_WORD)v20;
    v24[4] = v18;
    v24[5] = v19;
    unint64_t v53 = v24;
    uint64_t v25 = v3[9];
    if (!v25) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, CFTypeRef *, void **))(*(void *)v25 + 48))(v25, &cf, &v53);
    if (v53)
    {
      xpc_object_t v54 = v53;
      operator delete(v53);
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  if (v23) {
    CFRelease(v23);
  }
}

void sub_1C5B7CAB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get(uint64_t a1)
{
  return *(void *)a1;
}

CFTypeRef __copy_helper_block_ea8_40c41_ZTSN3ctu2cf11CFSharedRefIK10__CFStringEE48c41_ZTSN3ctu2cf11CFSharedRefIK10__CFStringEE56c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(void *a1, void *a2)
{
  BOOL v4 = (const void *)a2[5];
  a1[5] = v4;
  if (v4) {
    CFRetain(v4);
  }
  std::string::size_type v5 = (const void *)a2[6];
  a1[6] = v5;
  if (v5) {
    CFRetain(v5);
  }
  CFTypeRef result = (CFTypeRef)a2[7];
  a1[7] = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_ea8_40c41_ZTSN3ctu2cf11CFSharedRefIK10__CFStringEE48c41_ZTSN3ctu2cf11CFSharedRefIK10__CFStringEE56c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(void *a1)
{
  int v2 = (const void *)a1[7];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[6];
  if (v3) {
    CFRelease(v3);
  }
  BOOL v4 = (const void *)a1[5];
  if (v4) {
    CFRelease(v4);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,abm::AccessoryInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,abm::AccessoryInfo>>>::find<std::string>(void *a1, uint64_t a2)
{
  int v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        int v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v21 == v8)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          CFTypeRef result = 0;
          uint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v17 == v8)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        CFTypeRef result = 0;
        uint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,abm::AccessoryInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,abm::AccessoryInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, long long **a3)
{
  unint64_t v4 = (unsigned char *)a2;
  unint64_t v6 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v7 = v6;
  }
  unint64_t v8 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v58, (uint64_t *)a2, v7);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v12 = v8;
      if (v8 >= v10) {
        unint64_t v12 = v8 % v10;
      }
    }
    else
    {
      unint64_t v12 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      char v14 = *v13;
      if (*v13)
      {
        char v15 = v4[23];
        if (v15 >= 0) {
          uint64_t v16 = v4[23];
        }
        else {
          uint64_t v16 = *((void *)v4 + 1);
        }
        if (v15 < 0) {
          unint64_t v4 = *(unsigned char **)v4;
        }
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v9)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v4, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v4[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v10 - 1)) != v12)
            {
              goto LABEL_51;
            }
            char v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v9)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v4, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v4[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v10) {
              v17 %= v10;
            }
            if (v17 != v12) {
              break;
            }
          }
          char v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
  else
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  }
LABEL_51:
  char v25 = (void *)(a1 + 16);
  unint64_t v59 = 0xAAAAAAAAAAAAAA00;
  int v26 = (char *)operator new(0x38uLL);
  v58[0] = v26;
  v58[1] = a1 + 16;
  *(void *)int v26 = 0;
  *((void *)v26 + 1) = v9;
  std::string v27 = (std::string *)(v26 + 16);
  unint64_t v28 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    *((void *)v26 + 4) = *((void *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  *((_WORD *)v26 + 20) = -1;
  *(void *)(v26 + 42) = 0;
  *((_WORD *)v26 + 25) = 0;
  LOBYTE(v59) = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v10 || (float)(v31 * (float)v10) < v30)
  {
    BOOL v34 = 1;
    if (v10 >= 3) {
      BOOL v34 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v10);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    if (prime > v10)
    {
LABEL_68:
      if (prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      std::string::size_type v38 = operator new(8 * prime);
      CFTypeID v39 = *(void **)a1;
      *(void *)a1 = v38;
      if (v39) {
        operator delete(v39);
      }
      uint64_t v40 = 0;
      *(void *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v40++) = 0;
      while (prime != v40);
      CFTypeID v41 = (void *)*v25;
      if (!*v25) {
        goto LABEL_100;
      }
      size_t v42 = v41[1];
      size_t v43 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        size_t v44 = v42 & v43;
        *(void *)(*(void *)a1 + 8 * v44) = v25;
        for (uint64_t i = (void *)*v41; *v41; uint64_t i = (void *)*v41)
        {
          size_t v46 = i[1] & v43;
          if (v46 == v44)
          {
            CFTypeID v41 = i;
          }
          else if (*(void *)(*(void *)a1 + 8 * v46))
          {
            *CFTypeID v41 = *i;
            uint64_t v47 = 8 * v46;
            *uint64_t i = **(void **)(*(void *)a1 + v47);
            **(void **)(*(void *)a1 + v47) = i;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v46) = v41;
            CFTypeID v41 = i;
            size_t v44 = v46;
          }
        }
        goto LABEL_100;
      }
      if (v42 >= prime) {
        v42 %= prime;
      }
      *(void *)(*(void *)a1 + 8 * v42) = v25;
      std::string::size_type v51 = (void *)*v41;
      if (!*v41)
      {
LABEL_100:
        unint64_t v10 = prime;
        uint64_t v54 = prime - 1;
        if ((prime & (prime - 1)) != 0) {
          goto LABEL_101;
        }
        goto LABEL_116;
      }
      while (1)
      {
        size_t v53 = v51[1];
        if (v53 >= prime) {
          v53 %= prime;
        }
        if (v53 == v42) {
          goto LABEL_94;
        }
        if (*(void *)(*(void *)a1 + 8 * v53))
        {
          *CFTypeID v41 = *v51;
          uint64_t v52 = 8 * v53;
          void *v51 = **(void **)(*(void *)a1 + v52);
          **(void **)(*(void *)a1 + v52) = v51;
          std::string::size_type v51 = v41;
LABEL_94:
          CFTypeID v41 = v51;
          std::string::size_type v51 = (void *)*v51;
          if (!v51) {
            goto LABEL_100;
          }
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v53) = v41;
          CFTypeID v41 = v51;
          std::string::size_type v51 = (void *)*v51;
          size_t v42 = v53;
          if (!v51) {
            goto LABEL_100;
          }
        }
      }
    }
    if (prime < v10)
    {
      unint64_t v48 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v49 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v49.i16[0] = vaddlv_u8(v49), v49.u32[0] > 1uLL))
      {
        unint64_t v48 = std::__next_prime(v48);
      }
      else
      {
        uint64_t v50 = 1 << -(char)__clz(v48 - 1);
        if (v48 >= 2) {
          unint64_t v48 = v50;
        }
      }
      if (prime <= v48) {
        size_t prime = v48;
      }
      if (prime < v10)
      {
        if (!prime)
        {
          uint64_t v55 = *(void **)a1;
          *(void *)a1 = 0;
          if (v55) {
            operator delete(v55);
          }
          unint64_t v10 = 0;
          *(void *)(a1 + 8) = 0;
          uint64_t v54 = -1;
          goto LABEL_116;
        }
        goto LABEL_68;
      }
      unint64_t v10 = *(void *)(a1 + 8);
    }
    uint64_t v54 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
LABEL_101:
      if (v9 >= v10)
      {
        unint64_t v12 = v9 % v10;
        long long v32 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        uint64_t v33 = (void *)v58[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v12 = v9;
        long long v32 = *(void **)(*(void *)a1 + 8 * v9);
        uint64_t v33 = (void *)v58[0];
        if (v32) {
          goto LABEL_57;
        }
      }
LABEL_117:
      *uint64_t v33 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v58[0];
      *(void *)(*(void *)a1 + 8 * v12) = v25;
      if (*(void *)v58[0])
      {
        unint64_t v56 = *(void *)(*(void *)v58[0] + 8);
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v56 >= v10) {
            v56 %= v10;
          }
        }
        else
        {
          v56 &= v10 - 1;
        }
        *(void *)(*(void *)a1 + 8 * v56) = v58[0];
      }
      goto LABEL_123;
    }
LABEL_116:
    unint64_t v12 = v54 & v9;
    long long v32 = *(void **)(*(void *)a1 + 8 * (v54 & v9));
    uint64_t v33 = (void *)v58[0];
    if (v32) {
      goto LABEL_57;
    }
    goto LABEL_117;
  }
  long long v32 = *(void **)(*(void *)a1 + 8 * v12);
  uint64_t v33 = (void *)v58[0];
  if (!v32) {
    goto LABEL_117;
  }
LABEL_57:
  *uint64_t v33 = *v32;
  *long long v32 = v58[0];
LABEL_123:
  char v14 = (uint64_t *)v58[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1C5B7D700(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::string,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1C5B7D714(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::string,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ___ZZZN23CoreAccessoriesDelegate4initEvEUb_ENK3__1clEN3ctu2cf11CFSharedRefIK10__CFStringEE_block_invoke(uint64_t a1)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  CFTypeRef v34 = 0;
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    uint64_t v3 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    unint64_t v4 = v1[5];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 138412290;
      *(void *)&uint8_t buf[4] = v2;
      _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Accessory detached:\n    UUID:          %@\n", buf, 0xCu);
    }
    memset(buf, 0, sizeof(buf));
    uint64_t v36 = 0;
    ctu::cf::assign();
    *(_OWORD *)float v30 = *(_OWORD *)buf;
    uint64_t v31 = v36;
    unint64_t v5 = v1 + 13;
    if (std::__hash_table<std::__hash_value_type<std::string,abm::AccessoryInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,abm::AccessoryInfo>>>::find<std::string>(v1 + 13, (uint64_t)v30))
    {
      *(void *)std::string buf = v30;
      unint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,abm::AccessoryInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,abm::AccessoryInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v1 + 13), (uint64_t)v30, (long long **)buf);
      __int16 v7 = *((_WORD *)v6 + 20);
      uint64_t v23 = *(uint64_t *)((char *)v6 + 44);
      unint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,abm::AccessoryInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,abm::AccessoryInfo>>>::find<std::string>(v1 + 13, (uint64_t)v30);
      if (v8)
      {
        unint64_t v9 = v8;
        int8x8_t v10 = (int8x8_t)v1[14];
        unint64_t v11 = v8[1];
        uint8x8_t v12 = (uint8x8_t)vcnt_s8(v10);
        v12.i16[0] = vaddlv_u8(v12);
        if (v12.u32[0] > 1uLL)
        {
          if (v11 >= *(void *)&v10) {
            v11 %= *(void *)&v10;
          }
        }
        else
        {
          v11 &= *(void *)&v10 - 1;
        }
        char v15 = *(uint64_t **)(*v5 + 8 * v11);
        do
        {
          uint64_t v16 = v15;
          char v15 = (uint64_t *)*v15;
        }
        while (v15 != v8);
        if (v16 == v1 + 15) {
          goto LABEL_34;
        }
        unint64_t v17 = v16[1];
        if (v12.u32[0] > 1uLL)
        {
          if (v17 >= *(void *)&v10) {
            v17 %= *(void *)&v10;
          }
        }
        else
        {
          v17 &= *(void *)&v10 - 1;
        }
        if (v17 != v11)
        {
LABEL_34:
          if (!*v8) {
            goto LABEL_35;
          }
          unint64_t v18 = *(void *)(*v8 + 8);
          if (v12.u32[0] > 1uLL)
          {
            if (v18 >= *(void *)&v10) {
              v18 %= *(void *)&v10;
            }
          }
          else
          {
            v18 &= *(void *)&v10 - 1;
          }
          if (v18 != v11) {
LABEL_35:
          }
            *(void *)(*v5 + 8 * v11) = 0;
        }
        uint64_t v19 = *v8;
        if (*v8)
        {
          unint64_t v20 = *(void *)(v19 + 8);
          if (v12.u32[0] > 1uLL)
          {
            if (v20 >= *(void *)&v10) {
              v20 %= *(void *)&v10;
            }
          }
          else
          {
            v20 &= *(void *)&v10 - 1;
          }
          if (v20 != v11)
          {
            *(void *)(*v5 + 8 * v20) = v16;
            uint64_t v19 = *v8;
          }
        }
        *uint64_t v16 = v19;
        uint64_t *v8 = 0;
        --v1[16];
        if (*((char *)v8 + 39) < 0) {
          operator delete((void *)v8[2]);
        }
        operator delete(v9);
      }
      uint64_t v13 = 0;
      __int16 v14 = 1;
      if ((SHIBYTE(v31) & 0x80000000) == 0) {
        goto LABEL_47;
      }
    }
    else
    {
      std::string __p = operator new(0x40uLL);
      long long v29 = xmmword_1C5BCC960;
      strcpy((char *)__p, "Invalid UUID, could not find in cached accessory dictionary");
      (*(void (**)(uint8_t *__return_ptr, void *, void **, uint64_t))(*v1 + 48))(buf, v1, &__p, 5);
      uint64_t v13 = *(const void **)buf;
      CFTypeRef v34 = *(CFTypeRef *)buf;
      *(void *)std::string buf = 0;
      if (SHIBYTE(v29) < 0) {
        operator delete(__p);
      }
      __int16 v14 = 0;
      uint64_t v23 = 0;
      __int16 v7 = -1;
      if ((SHIBYTE(v31) & 0x80000000) == 0)
      {
LABEL_47:
        if (!v1[9]) {
          goto LABEL_55;
        }
        goto LABEL_48;
      }
    }
    operator delete(v30[0]);
    if (!v1[9]) {
      goto LABEL_55;
    }
    goto LABEL_48;
  }
  char v33 = 12;
  strcpy((char *)v32, "Invalid UUID");
  (*(void (**)(uint8_t *__return_ptr, void *, void **, uint64_t))(*v1 + 48))(buf, v1, v32, 5);
  uint64_t v13 = *(const void **)buf;
  CFTypeRef v34 = *(CFTypeRef *)buf;
  *(void *)std::string buf = 0;
  if (v33 < 0) {
    operator delete(v32[0]);
  }
  __int16 v14 = 0;
  uint64_t v23 = 0;
  __int16 v7 = -1;
  if (v1[9])
  {
LABEL_48:
    CFTypeRef cf = v13;
    if (v13) {
      CFRetain(v13);
    }
    uint64_t v21 = (char *)operator new(0xCuLL);
    char v25 = v21 + 12;
    int v26 = v21 + 12;
    *(_WORD *)uint64_t v21 = v7;
    *((_WORD *)v21 + 1) = v14;
    *(void *)(v21 + 4) = v23;
    uint64_t v24 = v21;
    uint64_t v22 = v1[9];
    if (!v22) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, CFTypeRef *, void **))(*(void *)v22 + 48))(v22, &cf, &v24);
    if (v24)
    {
      char v25 = v24;
      operator delete(v24);
    }
    if (cf) {
      CFRelease(cf);
    }
  }
LABEL_55:
  if (v34) {
    CFRelease(v34);
  }
}

void sub_1C5B7DBB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)(v27 - 72));
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_ea8_40c41_ZTSN3ctu2cf11CFSharedRefIK10__CFStringEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_ea8_40c41_ZTSN3ctu2cf11CFSharedRefIK10__CFStringEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 40);
  if (v1) {
    CFRelease(v1);
  }
}

void std::__shared_ptr_pointer<CoreAccessoriesDelegate *,std::shared_ptr<CoreAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<CoreAccessoriesDelegate>(CoreAccessoriesDelegate*)::{lambda(CoreAccessoriesDelegate *)#1},std::allocator<CoreAccessoriesDelegate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<CoreAccessoriesDelegate *,std::shared_ptr<CoreAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<CoreAccessoriesDelegate>(CoreAccessoriesDelegate*)::{lambda(CoreAccessoriesDelegate *)#1},std::allocator<CoreAccessoriesDelegate>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<CoreAccessoriesDelegate *,std::shared_ptr<CoreAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<CoreAccessoriesDelegate>(CoreAccessoriesDelegate*)::{lambda(CoreAccessoriesDelegate *)#1},std::allocator<CoreAccessoriesDelegate>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI23CoreAccessoriesDelegateE"
                     "ENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI23CoreAccessori"
                                "esDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI23CoreAccessoriesDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI23CoreAccessoriesDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<CoreAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<CoreAccessoriesDelegate>(CoreAccessoriesDelegate*)::{lambda(CoreAccessoriesDelegate*)#1}::operator() const(CoreAccessoriesDelegate*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_emplace<AccessoryDetectionManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210FE68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AccessoryDetectionManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210FE68;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<AccessoryDetectionManager>::__on_zero_shared(uint64_t a1)
{
}

void ServerClientState::ServerClientState(ServerClientState *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
}

{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
}

void ***ServerClientState::setCheckedIn(void ***result, void **a2)
{
  uint64_t v2 = *result;
  if (*result == a2) {
    goto LABEL_5;
  }
  if (*((char *)v2 + 23) < 0)
  {
    size_t v4 = (size_t)a2[1];
    if (*((char *)a2 + 23) >= 0)
    {
      size_t v5 = *((unsigned __int8 *)a2 + 23);
    }
    else
    {
      a2 = (void **)*a2;
      size_t v5 = v4;
    }
    CFTypeRef result = (void ***)std::string::__assign_no_alias<false>(*result, a2, v5);
    *((unsigned char *)v2 + 24) = 1;
  }
  else
  {
    if ((*((unsigned char *)a2 + 23) & 0x80) == 0)
    {
      long long v3 = *(_OWORD *)a2;
      v2[2] = a2[2];
      *(_OWORD *)uint64_t v2 = v3;
LABEL_5:
      *((unsigned char *)v2 + 24) = 1;
      return result;
    }
    CFTypeRef result = (void ***)std::string::__assign_no_alias<true>(*result, *a2, (size_t)a2[1]);
    *((unsigned char *)v2 + 24) = 1;
  }
  return result;
}

BOOL ServerClientState::isNotificationRegistered_sync(uint64_t *a1, const void **a2)
{
  uint64_t v2 = *a1;
  return v2 + 40 != (void)std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>(*a1 + 32, a2);
}

void ServerClientState::getName(ServerClientState *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *(long long **)this;
  if (*(char *)(*(void *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v2, *((void *)v2 + 1));
  }
  else
  {
    long long v3 = *v2;
    a2->__r_.__value_.__r.__words[2] = *((void *)v2 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

void ServerClientState::State::registerNotificationApplier(ServerClientState::State *this, uint64_t **a2, void *a3)
{
  long long v6 = 0uLL;
  uint64_t v7 = 0;
  ctu::cf::assign();
  *(_OWORD *)std::string __p = 0uLL;
  uint64_t v5 = 0;
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(a2 + 4, (const void **)__p, (uint64_t)__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C5B7DF9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ServerClientState::State::unregisterNotificationApplier(ServerClientState::State *this, void *a2, void *a3)
{
  long long v14 = 0uLL;
  uint64_t v15 = 0;
  ctu::cf::assign();
  *(_OWORD *)std::string __p = 0uLL;
  uint64_t v13 = 0;
  size_t v4 = (uint64_t **)(a2 + 4);
  uint64_t v5 = std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>((uint64_t)(a2 + 4), (const void **)__p);
  long long v6 = v5;
  if (a2 + 5 != v5)
  {
    uint64_t v7 = (uint64_t *)v5[1];
    if (v7)
    {
      do
      {
        unint64_t v8 = v7;
        uint64_t v7 = (uint64_t *)*v7;
      }
      while (v7);
    }
    else
    {
      unint64_t v9 = v5;
      do
      {
        unint64_t v8 = (uint64_t *)v9[2];
        BOOL v10 = *v8 == (void)v9;
        unint64_t v9 = v8;
      }
      while (!v10);
    }
    if (*v4 == v5) {
      NSObject *v4 = v8;
    }
    unint64_t v11 = (uint64_t *)a2[5];
    --a2[6];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v11, v6);
    if (*((char *)v6 + 55) < 0) {
      operator delete((void *)v6[4]);
    }
    operator delete(v6);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C5B7E0D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<ServerClientState::State *,std::shared_ptr<ServerClientState::State>::__shared_ptr_default_delete<ServerClientState::State,ServerClientState::State>,std::allocator<ServerClientState::State>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<ServerClientState::State *,std::shared_ptr<ServerClientState::State>::__shared_ptr_default_delete<ServerClientState::State,ServerClientState::State>,std::allocator<ServerClientState::State>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C5BCCBA9) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C5BCCBA9 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C5BCCBA9)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C5BCCBA9 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

const char *ABMGetProjectVersion(void)
{
  return "AppleBasebandManager-AppleBasebandServices_Manager-1211";
}

void sub_1C5B7E478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_1C5B7E67C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if ((a21 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_1C5B7E6B0(void *a1)
{
}

void sub_1C5B7E6BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if ((a14 & 0x80000000) == 0) {
    JUMPOUT(0x1C5B7E690);
  }
  JUMPOUT(0x1C5B7E688);
}

void sub_1C5B7EE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,std::locale a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  if (a44 < 0) {
    operator delete(__p);
  }
  std::vector<std::string>::~vector[abi:ne180100](&a57);
  std::vector<std::string>::~vector[abi:ne180100](v57);
  _Unwind_Resume(a1);
}

void sub_1C5B7F0D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  _Unwind_Resume(exception_object);
}

void sub_1C5B7F324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_1C5B7F958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::list<std::string>::~list(va);
  _Unwind_Resume(a1);
}

void sub_1C5B7F96C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *a15, uint64_t a16)
{
  operator delete(v17);
  if (a16)
  {
    uint64_t v19 = a14;
    uint64_t v20 = (uint64_t)a15;
    uint64_t v21 = *a15;
    *(void *)(v21 + 8) = *(void *)(a14 + 8);
    **(void **)(v19 + 8) = v21;
    a16 = 0;
    if ((uint64_t *)v20 != &a14)
    {
      do
      {
        uint64_t v22 = *(uint64_t **)(v20 + 8);
        if (*(char *)(v20 + 39) < 0) {
          operator delete(*(void **)(v20 + 16));
        }
        operator delete((void *)v20);
        uint64_t v20 = (uint64_t)v22;
      }
      while (v22 != &a14);
    }
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

void sub_1C5B7FE30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      support::ui::NotificationInfo::~NotificationInfo(&a26);
      _Unwind_Resume(a1);
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  support::ui::NotificationInfo::~NotificationInfo(&a26);
  _Unwind_Resume(a1);
}

void sub_1C5B7FE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  support::ui::NotificationInfo::~NotificationInfo((void **)va);
  _Unwind_Resume(a1);
}

void sub_1C5B7FEA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
}

void sub_1C5B7FEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  support::ui::NotificationInfo::~NotificationInfo((void **)va1);
  _Unwind_Resume(a1);
}

void sub_1C5B7FED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  support::ui::NotificationInfo::~NotificationInfo((void **)va);
  _Unwind_Resume(a1);
}

void sub_1C5B7FEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  support::ui::NotificationInfo::~NotificationInfo((void **)va);
  _Unwind_Resume(a1);
}

void sub_1C5B800B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
  {
    operator delete(__p);
    if ((a25 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a19 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a25 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a20);
  if ((a19 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a14);
  _Unwind_Resume(exception_object);
}

void sub_1C5B809B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, xpc_object_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,xpc_object_t object,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,xpc_object_t a27,xpc_object_t a28,char a29,uint64_t a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1C5B80C08(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c16_ZTSN3xpc5arrayE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v3;
  if (v3) {
    return xpc_retain(v3);
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c16_ZTSN3xpc5arrayE(uint64_t a1)
{
  *(void *)(a1 + 32) = 0;
}

void __copy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE112c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
    uint64_t v5 = (std::string *)(a1 + 64);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
    uint64_t v5 = (std::string *)(a1 + 64);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0)
    {
LABEL_3:
      long long v6 = *(_OWORD *)(a2 + 64);
      v5->__r_.__value_.__r.__words[2] = *(void *)(a2 + 80);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 64), *(void *)(a2 + 72));
LABEL_6:
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 88), *(const std::string::value_type **)(a2 + 88), *(void *)(a2 + 96));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = v7;
  }
  unint64_t v8 = (std::string *)(a1 + 112);
  if (*(char *)(a2 + 135) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 112), *(void *)(a2 + 120));
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 112);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
}

void sub_1C5B80DA4(_Unwind_Exception *exception_object)
{
  if (v2[111] < 0)
  {
    operator delete(*v4);
    if ((v2[87] & 0x80000000) == 0)
    {
LABEL_3:
      if ((v2[63] & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((v2[87] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  if ((v2[63] & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE112c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 135) < 0)
  {
    operator delete(*(void **)(a1 + 112));
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 87) & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(*(void **)(a1 + 64));
      if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
        return;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
    return;
  }
LABEL_9:
  uint64_t v2 = *(void **)(a1 + 40);

  operator delete(v2);
}

uint64_t TapToRadar::getMode(TapToRadar *this)
{
  uint64_t v1 = +[ABMTapToRadar sharedInstance];

  return [(ABMTapToRadar *)v1 getMode];
}

uint64_t TapToRadar::setMode(uint64_t a1)
{
  uint64_t v2 = +[ABMTapToRadar sharedInstance];

  return [(ABMTapToRadar *)v2 setMode:a1];
}

void TapToRadar::createRadarIfPossible(xpc_object_t *a1, uint64_t a2)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  if (((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
    && [+[ABMTapToRadar sharedInstance] getMode])
  {
    unsigned int v50 = -1431655766;
    xpc_object_t value = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x1E4F4C180]);
    *(void *)std::string buf = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      *(void *)std::string buf = xpc_null_create();
    }
    unsigned int v5 = xpc::dyn_cast_or_default((xpc *)buf, (const object *)7);
    xpc_release(*(xpc_object_t *)buf);
    unsigned int v50 = v5;
    memset(v49, 170, sizeof(v49));
    xpc_object_t v6 = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x1E4F4C4C8]);
    *(void *)std::string buf = v6;
    if (v6) {
      xpc_retain(v6);
    }
    else {
      *(void *)std::string buf = xpc_null_create();
    }
    xpc::dyn_cast_or_default(v49, (xpc *)buf, (const object *)"", v7);
    xpc_release(*(xpc_object_t *)buf);
    memset(&v48, 170, sizeof(v48));
    xpc_object_t v8 = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x1E4F4CA98]);
    *(void *)std::string buf = v8;
    if (v8) {
      xpc_retain(v8);
    }
    else {
      *(void *)std::string buf = xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)&v48, (xpc *)buf, (const object *)"", v9);
    xpc_release(*(xpc_object_t *)buf);
    memset(__p, 170, sizeof(__p));
    xpc_object_t v10 = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x1E4F4C8D8]);
    *(void *)std::string buf = v10;
    if (v10) {
      xpc_retain(v10);
    }
    else {
      *(void *)std::string buf = xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)__p, (xpc *)buf, (const object *)"", v11);
    xpc_release(*(xpc_object_t *)buf);
    memset(&v46, 170, sizeof(v46));
    char v12 = HIBYTE(__p[2]);
    if (SHIBYTE(__p[2]) >= 0) {
      uint64_t v13 = (void *)HIBYTE(__p[2]);
    }
    else {
      uint64_t v13 = __p[1];
    }
    long long v14 = (std::string *)__p;
    if (!v13)
    {
      long long v14 = &v48;
      char v12 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
    }
    if (v12 < 0)
    {
      if (v13) {
        std::string::size_type size = __p[1];
      }
      else {
        std::string::size_type size = (void *)v48.__r_.__value_.__l.__size_;
      }
      std::string::__init_copy_ctor_external(&v46, v14->__r_.__value_.__l.__data_, (std::string::size_type)size);
    }
    else
    {
      std::string v46 = *v14;
    }
    uint64_t v16 = (const void *)*MEMORY[0x1E4F4F918];
    size_t v17 = strlen((const char *)*MEMORY[0x1E4F4F918]);
    int v18 = SHIBYTE(v49[2]);
    if (v49[2] >= 0) {
      size_t v19 = HIBYTE(v49[2]);
    }
    else {
      size_t v19 = v49[1];
    }
    std::string::size_type v20 = v19 + v17;
    memset(&__dst, 170, sizeof(__dst));
    if (v19 + v17 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v21 = v17;
    if (v20 > 0x16)
    {
      uint64_t v25 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17) {
        uint64_t v25 = v20 | 7;
      }
      uint64_t v26 = v25 + 1;
      p_dst = (std::string *)operator new(v25 + 1);
      __dst.__r_.__value_.__l.__size_ = v20;
      __dst.__r_.__value_.__r.__words[2] = v26 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      if (!v21)
      {
LABEL_34:
        if (v19)
        {
          if (v18 >= 0) {
            uint64_t v23 = v49;
          }
          else {
            uint64_t v23 = (uint64_t *)v49[0];
          }
          memmove((char *)p_dst + v21, v23, v19);
        }
        p_dst->__r_.__value_.__s.__data_[v21 + v19] = 0;
        xpc_object_t v24 = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x1E4F4C8E8]);
        *(void *)std::string buf = v24;
        if (v24) {
          xpc_retain(v24);
        }
        else {
          *(void *)std::string buf = xpc_null_create();
        }
        uint64_t v27 = xpc::dyn_cast_or_default((xpc *)buf, 0);
        xpc_release(*(xpc_object_t *)buf);
        GetABMLogServer(&v43);
        unint64_t v28 = *((void *)GetGlobalLogger(&v43) + 4);
        long long v29 = v44;
        if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
          if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_52;
          }
        }
        else if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          goto LABEL_52;
        }
        int v30 = [+[ABMTapToRadar sharedInstance] getMode];
        uint64_t v31 = &v46;
        if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v31 = (std::string *)v46.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v30;
        __int16 v52 = 1024;
        unsigned int v53 = v50;
        __int16 v54 = 2080;
        uint64_t v55 = v31;
        __int16 v56 = 1024;
        int v57 = v27;
        _os_log_impl(&dword_1C59C6000, v28, OS_LOG_TYPE_DEFAULT, "#I check TTR: mode[%d], radar type[%d], title[%s], MTBF=%d", buf, 0x1Eu);
LABEL_52:
        uint64_t v32 = HIBYTE(v49[2]);
        if (v49[2] < 0) {
          uint64_t v32 = v49[1];
        }
        if (!v32) {
          goto LABEL_83;
        }
        char v33 = (config::hw *)[+[ABMTapToRadar sharedInstance] checkNotificationCriteria:&v50 :&v46 :v27];
        if (!v33) {
          goto LABEL_83;
        }
        if ((config::hw::watch(v33) & 1) == 0)
        {
          uint64_t v36 = +[ABMTapToRadar sharedInstance];
          uint64_t v37 = v50;
          if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v42, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
          }
          else {
            std::string v42 = v48;
          }
          [(ABMTapToRadar *)v36 showUserNotification:v37 dumpReason:&v42];
          if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v42.__r_.__value_.__l.__data_);
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_84;
            }
            goto LABEL_70;
          }
          goto LABEL_83;
        }
        CFTypeRef v34 = +[ABMTapToRadar sharedInstance];
        uint64_t v35 = v50;
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v41, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
          if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(&v40, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
LABEL_65:
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v39, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
            }
            else {
              std::string v39 = __dst;
            }
            if (*(char *)(a2 + 23) < 0) {
              std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
            }
            else {
              std::string v38 = *(std::string *)a2;
            }
            [(ABMTapToRadar *)v34 showNotification:v35 :&v41 :&v40 :&v39 :&v38];
            if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v38.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_81:
                if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_82;
                }
LABEL_91:
                operator delete(v40.__r_.__value_.__l.__data_);
                if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
                  goto LABEL_92;
                }
LABEL_83:
                if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_84;
                }
                goto LABEL_70;
              }
            }
            else if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_81;
            }
            operator delete(v39.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_82:
              if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_83;
              }
LABEL_92:
              operator delete(v41.__r_.__value_.__l.__data_);
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_84:
                if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_85:
                  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
                  {
LABEL_86:
                    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_87:
                      if ((SHIBYTE(v49[2]) & 0x80000000) == 0) {
                        return;
                      }
LABEL_74:
                      operator delete((void *)v49[0]);
                      return;
                    }
LABEL_73:
                    operator delete(v48.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v49[2]) & 0x80000000) == 0) {
                      return;
                    }
                    goto LABEL_74;
                  }
LABEL_72:
                  operator delete(__p[0]);
                  if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    goto LABEL_87;
                  }
                  goto LABEL_73;
                }
LABEL_71:
                operator delete(v46.__r_.__value_.__l.__data_);
                if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
                  goto LABEL_86;
                }
                goto LABEL_72;
              }
LABEL_70:
              operator delete(__dst.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_85;
              }
              goto LABEL_71;
            }
            goto LABEL_91;
          }
        }
        else
        {
          std::string v41 = v46;
        }
        std::string v40 = v46;
        goto LABEL_65;
      }
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
      p_dst = &__dst;
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v19 + v17;
      if (!v17) {
        goto LABEL_34;
      }
    }
    memcpy(p_dst, v16, v21);
    goto LABEL_34;
  }
}

void sub_1C5B815E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a50 < 0)
  {
    operator delete(a45);
    if ((a56 & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else if ((a56 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a63 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  operator delete(a51);
  if ((a63 & 0x80000000) == 0)
  {
LABEL_7:
    if (*(char *)(v63 - 177) < 0) {
      operator delete(*(void **)(v63 - 200));
    }
    if (*(char *)(v63 - 153) < 0) {
      operator delete(*(void **)(v63 - 176));
    }
    _Unwind_Resume(a1);
  }
LABEL_6:
  operator delete(a58);
  goto LABEL_7;
}

std::string *std::vector<std::string>::__emplace_back_slow_path<std::string const&>(char **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  long long v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    long long v9 = (char *)operator new(24 * v8);
  }
  else
  {
    long long v9 = 0;
  }
  xpc_object_t v10 = (std::string *)&v9[24 * v5];
  uint64_t v16 = v10;
  size_t v17 = v10;
  int v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    uint64_t v3 = *a1;
    long long v4 = a1[1];
    xpc_object_t v10 = v16;
    uint64_t v11 = v17 + 1;
    if (v4 == *a1)
    {
LABEL_17:
      uint64_t v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v10->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    uint64_t v11 = v10 + 1;
    if (v4 == v3) {
      goto LABEL_17;
    }
  }
  do
  {
    long long v12 = *(_OWORD *)(v4 - 24);
    v10[-1].__r_.__value_.__r.__words[2] = *((void *)v4 - 1);
    *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = v12;
    --v10;
    *((void *)v4 - 2) = 0;
    *((void *)v4 - 1) = 0;
    *((void *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  uint64_t v13 = *a1;
  uint64_t v3 = a1[1];
LABEL_18:
  *a1 = (char *)v10;
  a1[1] = (char *)v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    long long v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0) {
        operator delete(*v14);
      }
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    uint64_t v3 = v13;
  }
  if (v3) {
    operator delete(v3);
  }
  return v11;
}

void sub_1C5B819C8(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void Simulator::create(uint64_t *a1@<X0>, void *a2@<X8>)
{
  long long v4 = operator new(0xB0uLL);
  uint64_t v5 = (uint64_t)v4;
  uint64_t v6 = *a1;
  long long v7 = (std::__shared_weak_count *)a1[1];
  v8[0] = v6;
  v8[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  Simulator::Simulator((uint64_t)v4, v8);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<Simulator>::shared_ptr[abi:ne180100]<Simulator,std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator*)#1},void>(a2, v5);
  ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2 + 48);
  if (v7)
  {
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_1C5B81AA0(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v2);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t Simulator::Simulator(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  long long v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1F2112348;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(void *)a1 = &unk_1F2103EC0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &unk_1F2103EC0;
  }
  *(void *)a1 = &unk_1F210FF90;
  *(void *)(a1 + 48) = &unk_1F2110000;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v12, "com.apple.telephony.abm", "simulator");
  GetABMLogServer(&v10);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v6 = dispatch_queue_create_with_target_V2("simulator", initially_inactive, 0);
  dispatch_set_qos_class_floor(v6, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v6);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = v6;
  if (v6)
  {
    dispatch_retain(v6);
    *(void *)(a1 + 144) = 0;
    dispatch_release(v6);
  }
  else
  {
    *(void *)(a1 + 144) = 0;
  }
  *(void *)(a1 + 48) = &unk_1F21101E0;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v14);
  *(void *)(a1 + 56) = &unk_1F2102CB8;
  long long v7 = v11;
  *(void *)(a1 + 104) = v10;
  *(void *)(a1 + 112) = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v13);
  *(void *)(a1 + 48) = &unk_1F2110270;
  unint64_t v8 = v11;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v12);
  *(void *)a1 = &unk_1F210FF90;
  *(void *)(a1 + 48) = &unk_1F2110000;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 168) = 0;
  return a1;
}

void sub_1C5B81D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a15);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a13);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v16);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  Service::~Service(v15);
  _Unwind_Resume(a1);
}

void sub_1C5B81DD4(_Unwind_Exception *a1)
{
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

const char *Simulator::getName(Simulator *this)
{
  return "simulator";
}

void Simulator::initialize(uint64_t *a1, NSObject **a2)
{
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  uint64_t v11[2] = ___ZN9Simulator10initializeEN8dispatch13group_sessionE_block_invoke;
  void v11[3] = &__block_descriptor_tmp_5_14;
  uint64_t v3 = *a2;
  v11[4] = a1;
  dispatch_group_t group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(group);
  }
  ctu::SharedSynchronizable<Simulator>::execute_wrapped(a1 + 15, (uint64_t)v11);
  long long v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v7 = v6;
  unint64_t v8 = operator new(8uLL);
  void *v8 = a1;
  long long v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  _DWORD v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<Simulator>::execute_wrapped<Simulator::initialize(dispatch::group_session)::$_0>(Simulator::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<Simulator::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<Simulator::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void ___ZN9Simulator10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v2 || (v3 = *(void *)(v1 + 120), (long long v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (const void *)*MEMORY[0x1E4F4D0F0];
  size_t v7 = strlen((const char *)*MEMORY[0x1E4F4D0F0]);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    long long v9 = (void **)operator new(v10 + 1);
    __dst[1] = v8;
    unint64_t v17 = v11 | 0x8000000000000000;
    __dst[0] = v9;
    goto LABEL_12;
  }
  HIBYTE(v17) = v7;
  long long v9 = __dst;
  if (v7) {
LABEL_12:
  }
    memmove(v9, v6, (size_t)v8);
  *((unsigned char *)v8 + (void)v9) = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN9Simulator10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_4_3;
  void aBlock[4] = v1;
  void aBlock[5] = v3;
  long long v14 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  long long v12 = _Block_copy(aBlock);
  uint64_t v15 = v12;
  Service::registerCommandHandler(v1, (uint64_t)__dst, &v15);
  if (v12) {
    _Block_release(v12);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(__dst[0]);
  }
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C5B82144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (v24) {
    _Block_release(v24);
  }
  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_5:
      std::__shared_weak_count::__release_weak(v23);
      _Unwind_Resume(a1);
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  std::__shared_weak_count::__release_weak(v23);
  _Unwind_Resume(a1);
}

void sub_1C5B821A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void ___ZN9Simulator10initializeEN8dispatch13group_sessionE_block_invoke_2(void *a1, void **a2, void **a3)
{
  long long v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    unint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      long long v9 = v8;
      if (!a1[5])
      {
LABEL_12:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 1174405120;
      v12[2] = ___ZN9Simulator10initializeEN8dispatch13group_sessionE_block_invoke_3;
      v12[3] = &__block_descriptor_tmp_40;
      uint64_t v10 = *a2;
      v12[4] = v7;
      xpc_object_t object = v10;
      if (v10)
      {
        xpc_retain(v10);
        uint64_t v11 = *a3;
        if (!*a3) {
          goto LABEL_9;
        }
      }
      else
      {
        xpc_object_t object = xpc_null_create();
        uint64_t v11 = *a3;
        if (!*a3)
        {
LABEL_9:
          long long aBlock = v11;
          ctu::SharedSynchronizable<Simulator>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v12);
          if (aBlock) {
            _Block_release(aBlock);
          }
          xpc_release(object);
          xpc_object_t object = 0;
          goto LABEL_12;
        }
      }
      uint64_t v11 = _Block_copy(v11);
      goto LABEL_9;
    }
  }
}

void ___ZN9Simulator10initializeEN8dispatch13group_sessionE_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x1E4F4CE90]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  int v4 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  if ((v4 | 0xE0000000) != 0xE0000270) {
    *(unsigned char *)(v2 + 168) = (v4 | 0xE0000000) == -536870272;
  }
  xpc_object_t v5 = xpc_null_create();
  uint64_t v6 = *(void *)(a1 + 48);
  xpc_object_t object = v5;
  xpc_object_t v7 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, 3760250880, &object);
  xpc_release(object);
  xpc_release(v7);
}

void sub_1C5B82404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

uint64_t Simulator::handleSimulatedPowerNotification_sync(Simulator *this, int a2)
{
  if (a2 != -536870288) {
    *((unsigned char *)this + 168) = a2 == -536870272;
  }
  return 0;
}

uint64_t __copy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9SimulatorEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9SimulatorEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void Simulator::finishInitialization_sync(std::__shared_weak_count **this)
{
  uint64_t v2 = (const char *)((uint64_t (*)(std::__shared_weak_count **))(*this)->__shared_weak_owners_)(this);
  size_t v3 = strlen(v2);
  if (v3 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v4 = (void *)v3;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    xpc_object_t v5 = (void **)operator new(v6 + 1);
    __dst[1] = v4;
    unint64_t v32 = v7 | 0x8000000000000000;
    __dst[0] = v5;
  }
  else
  {
    HIBYTE(v32) = v3;
    xpc_object_t v5 = __dst;
    if (!v3) {
      goto LABEL_9;
    }
  }
  memmove(v5, v2, (size_t)v4);
LABEL_9:
  *((unsigned char *)v4 + (void)v5) = 0;
  CFTypeRef cf = 0;
  AppleBasebandManager::create();
  long long v8 = v33;
  long long v33 = 0uLL;
  long long v9 = this[20];
  *(_OWORD *)(this + 19) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)&v33 + 1);
  if (!*((void *)&v33 + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v33 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    CFTypeRef v11 = cf;
    if (!cf) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  CFTypeRef v11 = cf;
  if (cf) {
LABEL_15:
  }
    CFRelease(v11);
LABEL_16:
  if (SHIBYTE(v32) < 0) {
    operator delete(__dst[0]);
  }
  long long v12 = this[16];
  if (!v12 || (uint64_t v13 = this[15], (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v15 = v14;
  atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = (const void *)*MEMORY[0x1E4F4CD28];
  size_t v17 = strlen((const char *)*MEMORY[0x1E4F4CD28]);
  if (v17 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v18 = (void *)v17;
  if (v17 >= 0x17)
  {
    uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v20 = v17 | 7;
    }
    uint64_t v21 = v20 + 1;
    size_t v19 = operator new(v20 + 1);
    __p[1] = v18;
    unint64_t v29 = v21 | 0x8000000000000000;
    __p[0] = v19;
    goto LABEL_29;
  }
  HIBYTE(v29) = v17;
  size_t v19 = __p;
  if (v17) {
LABEL_29:
  }
    memmove(v19, v16, (size_t)v18);
  *((unsigned char *)v18 + (void)v19) = 0;
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 1174405120;
  void v24[2] = ___ZN9Simulator25finishInitialization_syncEv_block_invoke;
  v24[3] = &__block_descriptor_tmp_9_6;
  v24[4] = this;
  v24[5] = v13;
  uint64_t v25 = v15;
  atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v22 = _Block_copy(v24);
  uint64_t v23 = this[17];
  if (v23) {
    dispatch_retain((dispatch_object_t)this[17]);
  }
  long long aBlock = v22;
  dispatch_object_t object = v23;
  AppleBasebandManager::setEventHandler();
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete(__p[0]);
  }
  AppleBasebandManager::eventsOn((AppleBasebandManager *)this[19]);
  if (v25) {
    std::__shared_weak_count::__release_weak(v25);
  }
  std::__shared_weak_count::__release_weak(v15);
}

void sub_1C5B82830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  std::__shared_weak_count::__release_weak(v30);
  _Unwind_Resume(a1);
}

void ___ZN9Simulator25finishInitialization_syncEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      xpc_object_t v5 = v4;
      if (a1[5] && *(unsigned char *)(v3 + 168))
      {
        uint64_t v6 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v7 = 0;
          _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#I Baseband reset during simulated low power, simulating exit low power", v7, 2u);
        }
        *(unsigned char *)(v3 + 168) = 0;
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

unsigned char *Simulator::getShutdownStages@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = operator new(1uLL);
  *a1 = v3;
  unsigned char *v3 = 3;
  xpc_object_t result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void Simulator::shutdown(uint64_t a1, char a2, NSObject **a3)
{
  int v4 = (uint64_t *)(a1 + 120);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 1174405120;
  uint64_t v6[2] = ___ZN9Simulator8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v6[3] = &__block_descriptor_tmp_10_3;
  xpc_object_t v5 = *a3;
  dispatch_group_t group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(group);
  }
  char v8 = a2;
  ctu::SharedSynchronizable<Simulator>::execute_wrapped(v4, (uint64_t)v6);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void Simulator::~Simulator(Simulator *this)
{
  Simulator::~Simulator(this);

  operator delete(v1);
}

{
  std::__shared_weak_count *v2;
  NSObject *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;

  *(void *)this = &unk_1F210FF90;
  *((void *)this + 6) = &unk_1F2110000;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 20);
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    *((void *)this + 6) = &unk_1F21101E0;
    MEMORY[0x1C87940C0]((char *)this + 56);
    uint64_t v3 = *((void *)this + 18);
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  *((void *)this + 6) = &unk_1F21101E0;
  MEMORY[0x1C87940C0]((char *)this + 56);
  uint64_t v3 = *((void *)this + 18);
  if (v3) {
LABEL_4:
  }
    dispatch_release(v3);
LABEL_5:
  int v4 = *((void *)this + 17);
  if (v4) {
    dispatch_release(v4);
  }
  xpc_object_t v5 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  *(void *)this = &unk_1F2112348;
  uint64_t v6 = *((void *)this + 3);
  if (v6)
  {
    uint64_t v7 = *((void *)this + 4);
    char v8 = (void *)*((void *)this + 3);
    if (v7 != v6)
    {
      do
      {
        if (*(char *)(v7 - 1) < 0) {
          operator delete(*(void **)(v7 - 24));
        }
        v7 -= 24;
      }
      while (v7 != v6);
      char v8 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v6;
    operator delete(v8);
  }
  long long v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
}

void non-virtual thunk to'Simulator::~Simulator(Simulator *this)
{
}

{
  void *v1;
  uint64_t vars8;

  Simulator::~Simulator((Simulator *)((char *)this - 48));

  operator delete(v1);
}

uint64_t ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (const char *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 16))();
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    char v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F21101E0;
  MEMORY[0x1C87940C0](a1 + 1);
  return a1;
}

void ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F21101E0;
  MEMORY[0x1C87940C0](a1 + 1);

  operator delete(a1);
}

void ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1C5B82F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C5B82F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<Simulator>::shared_ptr[abi:ne180100]<Simulator,std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_std::string::size_type shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2110220;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 120) = a2;
      *(void *)(a2 + 128) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 120) = a2;
  *(void *)(a2 + 128) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C5B8307C(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator*)#1}::operator() const(Simulator*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C5B830A4(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<Simulator *,std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator *)#1},std::allocator<Simulator>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<Simulator *,std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator *)#1},std::allocator<Simulator>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<Simulator *,std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator *)#1},std::allocator<Simulator>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI9SimulatorE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI9SimulatorE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI9SimulatorE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI9SimulatorE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

uint64_t std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator*)#1}::operator() const(Simulator*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *ctu::SharedLoggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F21101E0;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ctu::SharedLoggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F21101E0;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void ctu::SharedSynchronizable<Simulator>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  char v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI9SimulatorE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F21102A8;
  void block[5] = v5;
  long long v12 = v7;
  p_std::string::size_type shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI9SimulatorE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c37_ZTSNSt3__110shared_ptrIK9SimulatorEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c37_ZTSNSt3__110shared_ptrIK9SimulatorEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<Simulator>::execute_wrapped<Simulator::initialize(dispatch::group_session)::$_0>(Simulator::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<Simulator::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<Simulator::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count ****)a1;
  Simulator::finishInitialization_sync(**(std::__shared_weak_count ****)a1);
  operator delete(v2);
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    int v4 = (void *)a1;
  }
  else
  {
    int v4 = (void *)a1;
  }
  operator delete(v4);
}

void sub_1C5B83544(_Unwind_Exception *a1)
{
  operator delete(v2);
  int v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_14()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

char *abm::data::getDataPropertyNameFromDict(xpc_object_t *a1)
{
  if (MEMORY[0x1C8795EB0](*a1) != MEMORY[0x1E4F14590]) {
    return "Unknown";
  }
  xpc_object_t value = xpc_dictionary_get_value(*a1, "kDataProperty");
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  unsigned int v3 = xpc::dyn_cast_or_default((xpc *)&object, (const object *)5);
  xpc_release(object);
  if (v3 < 5) {
    return off_1E651C2B0[v3];
  }
  else {
    return "Unknown";
  }
}

void sub_1C5B8369C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t abm::data::getDataPropertyTypeFromDict(xpc_object_t *a1)
{
  if (MEMORY[0x1C8795EB0](*a1) != MEMORY[0x1E4F14590]) {
    return 5;
  }
  xpc_object_t value = xpc_dictionary_get_value(*a1, "kDataProperty");
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  unsigned int v4 = xpc::dyn_cast_or_default((xpc *)&object, (const object *)5);
  xpc_release(object);
  if (v4 >= 5) {
    return 5;
  }
  else {
    return v4;
  }
}

void sub_1C5B8375C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void abm::data::DataAggregationProtocol::toDict(abm::data::DataAggregationProtocol *this@<X0>, void **a2@<X8>)
{
  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8795EB0](v5) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v7 = xpc_int64_create(0);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  char v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  xpc_object_t v10 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kDataAggregationProtocol", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataAggregationProtocol::addToDict(abm::data::DataAggregationProtocol *this, xpc_object_t *a2)
{
  xpc_object_t v3 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, "kDataAggregationProtocol", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

const char *abm::data::DataAggregationProtocol::asString(abm::data::DataAggregationProtocol *this)
{
  uint64_t v1 = *((int *)this + 3);
  if (v1 > 2) {
    return "unknown";
  }
  else {
    return off_1E651C2D8[v1];
  }
}

void abm::data::DataProperty<abm::data::DataAggregationProtocol>::createDictForGet(xpc_object_t *a1@<X8>)
{
  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      xpc_object_t v4 = xpc_null_create();
      xpc_object_t v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8795EB0](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  xpc_object_t v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  xpc_object_t v5 = xpc_int64_create(0);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataAggregationProtocol>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1F21102E8;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x1C8795EB0](*a1) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(*a1, "kDataAggregationProtocol"))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a1, "kDataAggregationProtocol");
    xpc_object_t object = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    int v5 = xpc::dyn_cast_or_default((xpc *)&object, (const object *)3);
    xpc_release(object);
    if (v5)
    {
      if (v5 == 1)
      {
        *(_DWORD *)(a2 + 12) = 1;
      }
      else if (v5 == 2)
      {
        *(_DWORD *)(a2 + 12) = 2;
      }
      else
      {
        *(unsigned char *)(a2 + 8) = 0;
        *(_DWORD *)(a2 + 12) = 3;
      }
    }
    else
    {
      *(_DWORD *)(a2 + 12) = 0;
    }
  }
  else
  {
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void sub_1C5B83BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t abm::data::DataProperty<abm::data::DataAggregationProtocol>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1F21102E8;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (result >= 3)
  {
    *(unsigned char *)(a2 + 8) = 0;
    uint64_t result = 3;
  }
  *(_DWORD *)(a2 + 12) = result;
  return result;
}

void abm::data::DataAggregationMaxDatagrams::toDict(abm::data::DataAggregationMaxDatagrams *this@<X0>, void **a2@<X8>)
{
  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8795EB0](v5) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v7 = xpc_int64_create(1);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  char v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  xpc_object_t v10 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kDataAggregationMaxDatagrams", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataAggregationMaxDatagrams::addToDict(abm::data::DataAggregationMaxDatagrams *this, xpc_object_t *a2)
{
  xpc_object_t v3 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, "kDataAggregationMaxDatagrams", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void abm::data::DataProperty<abm::data::DataAggregationMaxDatagrams>::createDictForGet(xpc_object_t *a1@<X8>)
{
  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      xpc_object_t v4 = xpc_null_create();
      xpc_object_t v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8795EB0](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  xpc_object_t v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  xpc_object_t v5 = xpc_int64_create(1);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataAggregationMaxDatagrams>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1F2110330;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x1C8795EB0](*a1) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(*a1, "kDataAggregationMaxDatagrams"))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a1, "kDataAggregationMaxDatagrams");
    xpc_object_t object = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(_DWORD *)(a2 + 12) = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  else
  {
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void sub_1C5B83FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t abm::data::DataProperty<abm::data::DataAggregationMaxDatagrams>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1F2110330;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  *(_DWORD *)(a2 + 12) = result;
  return result;
}

void abm::data::DataAggregationMaxSize::toDict(abm::data::DataAggregationMaxSize *this@<X0>, void **a2@<X8>)
{
  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8795EB0](v5) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v7 = xpc_int64_create(2);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  char v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  xpc_object_t v10 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kDataAggregationMaxSize", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataAggregationMaxSize::addToDict(abm::data::DataAggregationMaxSize *this, xpc_object_t *a2)
{
  xpc_object_t v3 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, "kDataAggregationMaxSize", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void abm::data::DataProperty<abm::data::DataAggregationMaxSize>::createDictForGet(xpc_object_t *a1@<X8>)
{
  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      xpc_object_t v4 = xpc_null_create();
      xpc_object_t v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8795EB0](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  xpc_object_t v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  xpc_object_t v5 = xpc_int64_create(2);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataAggregationMaxSize>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1F2110378;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x1C8795EB0](*a1) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(*a1, "kDataAggregationMaxSize"))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a1, "kDataAggregationMaxSize");
    xpc_object_t object = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(_DWORD *)(a2 + 12) = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  else
  {
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void sub_1C5B843F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t abm::data::DataProperty<abm::data::DataAggregationMaxSize>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1F2110378;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  *(_DWORD *)(a2 + 12) = result;
  return result;
}

void abm::data::DataFlowControl::toDict(abm::data::DataFlowControl *this@<X0>, void **a2@<X8>)
{
  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8795EB0](v5) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v7 = xpc_int64_create(3);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  char v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  xpc_object_t v10 = xpc_BOOL_create(*((unsigned char *)this + 9));
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kDataFlowControl", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataFlowControl::addToDict(abm::data::DataFlowControl *this, xpc_object_t *a2)
{
  xpc_object_t v3 = xpc_BOOL_create(*((unsigned char *)this + 9));
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, "kDataFlowControl", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void abm::data::DataProperty<abm::data::DataFlowControl>::createDictForGet(xpc_object_t *a1@<X8>)
{
  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      xpc_object_t v4 = xpc_null_create();
      xpc_object_t v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8795EB0](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  xpc_object_t v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  xpc_object_t v5 = xpc_int64_create(3);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataFlowControl>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1F21103C0;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x1C8795EB0](*a1) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(*a1, "kDataFlowControl"))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a1, "kDataFlowControl");
    xpc_object_t object = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(unsigned char *)(a2 + 9) = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  else
  {
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void sub_1C5B847FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t abm::data::DataProperty<abm::data::DataFlowControl>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1F21103C0;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  *(unsigned char *)(a2 + 9) = result != 0;
  return result;
}

void abm::data::DataPowerSave::toDict(abm::data::DataPowerSave *this@<X0>, void **a2@<X8>)
{
  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8795EB0](v5) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v7 = xpc_int64_create(4);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  char v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  xpc_object_t v10 = xpc_BOOL_create(*((unsigned char *)this + 9));
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kDataPowerSave", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataPowerSave::addToDict(abm::data::DataPowerSave *this, xpc_object_t *a2)
{
  xpc_object_t v3 = xpc_BOOL_create(*((unsigned char *)this + 9));
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, "kDataPowerSave", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void abm::data::DataProperty<abm::data::DataPowerSave>::createDictForGet(xpc_object_t *a1@<X8>)
{
  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      xpc_object_t v4 = xpc_null_create();
      xpc_object_t v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8795EB0](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  xpc_object_t v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  xpc_object_t v5 = xpc_int64_create(4);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataPowerSave>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1F2110408;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x1C8795EB0](*a1) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(*a1, "kDataPowerSave"))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a1, "kDataPowerSave");
    xpc_object_t object = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(unsigned char *)(a2 + 9) = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  else
  {
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void sub_1C5B84C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t abm::data::DataProperty<abm::data::DataPowerSave>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1F2110408;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  *(unsigned char *)(a2 + 9) = result != 0;
  return result;
}

uint64_t HealthEvent::HealthEvent(uint64_t result, char a2, uint64_t a3)
{
  *(void *)uint64_t result = &unk_1F2107A48;
  *(unsigned char *)(result + 8) = a2;
  *(void *)(result + 16) = a3;
  return result;
}

{
  *(void *)uint64_t result = &unk_1F2107A48;
  *(unsigned char *)(result + 8) = a2;
  *(void *)(result + 16) = a3;
  return result;
}

uint64_t HealthEvent::HealthEvent(uint64_t a1, char a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F2107A48;
  *(unsigned char *)(a1 + 8) = a2;
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  *(void *)(a1 + 16) = Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a1;
}

{
  std::string __p;

  *(void *)a1 = &unk_1F2107A48;
  *(unsigned char *)(a1 + 8) = a2;
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  *(void *)(a1 + 16) = Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5B84D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5B84E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HealthEvent::getType(HealthEvent *this)
{
  return *((char *)this + 8);
}

void HealthEvent::getTime(HealthEvent *this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 2);
  xpc_object_t v4 = operator new(0x38uLL);
  v4[8] = 0;
  *(void *)xpc_object_t v4 = 0;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = v6;
  xpc_object_t v5 = v4;
  v6[0] = v4;
  *((unsigned char *)v4 + 24) = 1;
  v6[1] = (void *)1;
  *((void *)v4 + 5) = v3;
  *((void *)v4 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v5, 0, 9, a2);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v5, v6[0]);
}

void sub_1C5B84EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t HealthEvent::getChronoTime(HealthEvent *this)
{
  return *((void *)this + 2);
}

uint64_t HealthEvent::setType(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2;
  return result;
}

void HealthEvent::setTime(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  *(void *)(a1 + 16) = Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5B84F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HealthEvent::setTime(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  return result;
}

uint64_t HealthEvent::asString@<X0>(HealthEvent *this@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v37 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v36[7] = v4;
  v36[8] = v4;
  v36[5] = v4;
  void v36[6] = v4;
  v36[3] = v4;
  v36[4] = v4;
  v36[1] = v4;
  v36[2] = v4;
  long long v35 = v4;
  v36[0] = v4;
  *(_OWORD *)long long v33 = v4;
  long long v34 = v4;
  long long v31 = v4;
  long long v32 = v4;
  long long v29 = v4;
  long long v30 = v4;
  long long v28 = v4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v28);
  xpc_object_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"HealthEvent { Type='", 20);
  switch(*((unsigned char *)this + 8))
  {
    case 1:
      uint64_t v6 = 12;
      v27[23] = 12;
      *(_DWORD *)&v27[8] = 1701999980;
      xpc_object_t v7 = "boot failure";
      goto LABEL_7;
    case 2:
      char v8 = (char *)operator new(0x19uLL);
      *(void *)uint64_t v27 = v8;
      *(_OWORD *)&v27[8] = xmmword_1C5BC51F0;
      strcpy(v8, "boot attempts exhausted");
      uint64_t v6 = 23;
      goto LABEL_10;
    case 3:
      uint64_t v6 = 12;
      v27[23] = 12;
      *(_DWORD *)&v27[8] = 1936942435;
      xpc_object_t v7 = "ping success";
      goto LABEL_7;
    case 4:
      uint64_t v6 = 12;
      v27[23] = 12;
      *(_DWORD *)&v27[8] = 1701999980;
      xpc_object_t v7 = "ping failure";
LABEL_7:
      *(void *)uint64_t v27 = *(void *)v7;
      v27[12] = 0;
      break;
    case 5:
      uint64_t v6 = 11;
      v27[23] = 11;
      strcpy(v27, "erasing efs");
      break;
    default:
      uint64_t v6 = 7;
      v27[23] = 7;
      strcpy(v27, "unknown");
      break;
  }
  char v8 = v27;
LABEL_10:
  xpc_object_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v8, v6);
  xpc_object_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"' Time='", 8);
  uint64_t v11 = *((void *)this + 2);
  std::string v39 = 0;
  uint64_t v40 = 0;
  std::string v38 = &v39;
  long long v12 = operator new(0x38uLL);
  v12[8] = 0;
  *(void *)long long v12 = 0;
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = &v39;
  std::string v38 = (void **)v12;
  std::string v39 = v12;
  *((unsigned char *)v12 + 24) = 1;
  uint64_t v40 = 1;
  *((void *)v12 + 5) = v11;
  *((void *)v12 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v38, 0, 9, __p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v38, v39);
  if ((v26 & 0x80u) == 0) {
    uint64_t v13 = __p;
  }
  else {
    uint64_t v13 = (void **)__p[0];
  }
  if ((v26 & 0x80u) == 0) {
    uint64_t v14 = v26;
  }
  else {
    uint64_t v14 = (uint64_t)__p[1];
  }
  uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v13, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"' }", 3);
  if ((char)v26 < 0)
  {
    operator delete(__p[0]);
    if ((v27[23] & 0x80000000) == 0)
    {
LABEL_18:
      char v16 = BYTE8(v35);
      if ((BYTE8(v35) & 0x10) == 0) {
        goto LABEL_19;
      }
LABEL_23:
      uint64_t v18 = v35;
      if ((unint64_t)v35 < *((void *)&v32 + 1))
      {
        *(void *)&long long v35 = *((void *)&v32 + 1);
        uint64_t v18 = *((void *)&v32 + 1);
      }
      size_t v19 = (const void *)v32;
      size_t v17 = v18 - v32;
      if ((unint64_t)(v18 - v32) >= 0x7FFFFFFFFFFFFFF8) {
        goto LABEL_37;
      }
      goto LABEL_26;
    }
  }
  else if ((v27[23] & 0x80000000) == 0)
  {
    goto LABEL_18;
  }
  operator delete(*(void **)v27);
  char v16 = BYTE8(v35);
  if ((BYTE8(v35) & 0x10) != 0) {
    goto LABEL_23;
  }
LABEL_19:
  if ((v16 & 8) == 0)
  {
    size_t v17 = 0;
    a2[23] = 0;
    goto LABEL_33;
  }
  size_t v19 = (const void *)*((void *)&v30 + 1);
  size_t v17 = *((void *)&v31 + 1) - *((void *)&v30 + 1);
  if (*((void *)&v31 + 1) - *((void *)&v30 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_37:
  }
    std::string::__throw_length_error[abi:ne180100]();
LABEL_26:
  if (v17 >= 0x17)
  {
    uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v20 = v17 | 7;
    }
    uint64_t v21 = v20 + 1;
    uint64_t v22 = operator new(v20 + 1);
    *((void *)a2 + 1) = v17;
    *((void *)a2 + 2) = v21 | 0x8000000000000000;
    *(void *)a2 = v22;
    a2 = v22;
    goto LABEL_32;
  }
  a2[23] = v17;
  if (v17) {
LABEL_32:
  }
    memmove(a2, v19, v17);
LABEL_33:
  a2[v17] = 0;
  *(void *)&long long v28 = *MEMORY[0x1E4FBA408];
  uint64_t v23 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)&v28 + *(void *)(v28 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(void *)&long long v29 = v23;
  *((void *)&v29 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v34) < 0) {
    operator delete(v33[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C8795140](v36);
}

void sub_1C5B8540C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C5B85420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v21 - 72, *(void **)(v21 - 64));
  if (a20 < 0)
  {
    operator delete(__p);
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
    _Unwind_Resume(a1);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_1C5B854A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

char *HealthEvent::toString@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  switch((int)result)
  {
    case 1:
      *(unsigned char *)(a2 + 23) = 12;
      strcpy((char *)a2, "boot failure");
      break;
    case 2:
      uint64_t result = (char *)operator new(0x19uLL);
      *(void *)a2 = result;
      *(_OWORD *)(a2 + 8) = xmmword_1C5BC51F0;
      strcpy(result, "boot attempts exhausted");
      break;
    case 3:
      *(unsigned char *)(a2 + 23) = 12;
      strcpy((char *)a2, "ping success");
      break;
    case 4:
      *(unsigned char *)(a2 + 23) = 12;
      strcpy((char *)a2, "ping failure");
      break;
    case 5:
      *(unsigned char *)(a2 + 23) = 11;
      strcpy((char *)a2, "erasing efs");
      break;
    default:
      *(unsigned char *)(a2 + 23) = 7;
      strcpy((char *)a2, "unknown");
      break;
  }
  return result;
}

void ServerLogging::~ServerLogging(ServerLogging *this)
{
  xpc_object_t v2 = *((void *)this + 9);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 9));
    *((void *)this + 9) = 0;
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if ((*((char *)this + 71) & 0x80000000) == 0)
    {
LABEL_6:
      if ((*((char *)this + 47) & 0x80000000) == 0) {
        goto LABEL_7;
      }
      goto LABEL_12;
    }
  }
  else if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*((void **)this + 6));
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
LABEL_7:
    long long v4 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v4) {
      return;
    }
    goto LABEL_8;
  }
LABEL_12:
  operator delete(*((void **)this + 3));
  long long v4 = (std::__shared_weak_count *)*((void *)this + 1);
  if (!v4) {
    return;
  }
LABEL_8:
  std::__shared_weak_count::__release_weak(v4);
}

uint64_t ServerLogging::ServerLogging(uint64_t a1, long long *a2, long long *a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(a1 + 40) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 24) = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    *(void *)(a1 + 64) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 48) = v6;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  xpc_object_t v7 = (os_unfair_lock_s *)off_1EBBDCA58;
  if (!off_1EBBDCA58)
  {
    SharedData::create_default_global(&v24);
    long long v8 = v24;
    long long v24 = 0uLL;
    xpc_object_t v9 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
    off_1EBBDCA58 = v8;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    xpc_object_t v10 = (std::__shared_weak_count *)*((void *)&v24 + 1);
    if (*((void *)&v24 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v24 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    xpc_object_t v7 = (os_unfair_lock_s *)off_1EBBDCA58;
  }
  uint64_t v22 = v7;
  uint64_t v23 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
  if (*(&off_1EBBDCA58 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA58 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  uint64_t v11 = (const void *)*MEMORY[0x1E4F4F950];
  size_t v12 = strlen((const char *)*MEMORY[0x1E4F4F950]);
  if (v12 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v13 = (void *)v12;
  if (v12 >= 0x17)
  {
    uint64_t v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v15 = v12 | 7;
    }
    uint64_t v16 = v15 + 1;
    uint64_t v14 = (void **)operator new(v15 + 1);
    __dst[1] = v13;
    unint64_t v21 = v16 | 0x8000000000000000;
    __dst[0] = v14;
LABEL_25:
    memmove(v14, v11, (size_t)v13);
    *((unsigned char *)v13 + (void)v14) = 0;
    if ((*((char *)a3 + 23) & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_26;
  }
  HIBYTE(v21) = v12;
  uint64_t v14 = __dst;
  if (v12) {
    goto LABEL_25;
  }
  LOBYTE(__dst[0]) = 0;
  if ((*((char *)a3 + 23) & 0x80000000) == 0)
  {
LABEL_21:
    std::string __p = *(std::string *)a3;
    goto LABEL_27;
  }
LABEL_26:
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *((void *)a3 + 1));
LABEL_27:
  *(void *)&long long v24 = __dst;
  *((void *)&v24 + 1) = &__p;
  uint64_t v25 = v7;
  os_unfair_lock_lock(v7 + 10);
  SharedData::setPreference<std::string>(std::string const&,std::string)::{lambda(void)#1}::operator()((char **)&v24);
  os_unfair_lock_unlock(v7 + 10);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v21) & 0x80000000) == 0) {
      goto LABEL_29;
    }
LABEL_32:
    operator delete(__dst[0]);
    size_t v17 = v23;
    if (!v23) {
      return a1;
    }
    goto LABEL_33;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21) < 0) {
    goto LABEL_32;
  }
LABEL_29:
  size_t v17 = v23;
  if (!v23) {
    return a1;
  }
LABEL_33:
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  return a1;
}

void sub_1C5B85A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](v21);
  if (*(char *)(v18 + 71) < 0)
  {
    operator delete(*v20);
    if ((*(char *)(v18 + 47) & 0x80000000) == 0)
    {
LABEL_5:
      uint64_t v23 = *(std::__shared_weak_count **)(v18 + 8);
      if (!v23) {
        goto LABEL_6;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(v18 + 47) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*v19);
  uint64_t v23 = *(std::__shared_weak_count **)(v18 + 8);
  if (!v23) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_9:
  std::__shared_weak_count::__release_weak(v23);
  _Unwind_Resume(a1);
}

void ServerLogging::init(os_unfair_lock_s *this)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 0x40000000;
  v2[2] = ___ZN13ServerLogging4initEv_block_invoke;
  v2[3] = &__block_descriptor_tmp_17;
  v2[4] = this;
  uint64_t v1 = this + 4;
  os_unfair_lock_lock(this + 4);
  ___ZN13ServerLogging4initEv_block_invoke((uint64_t)v2);
  os_unfair_lock_unlock(v1);
}

ctu::LogServer *___ZN13ServerLogging4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(ServerLogging **)(a1 + 32);
  xpc_object_t v2 = ServerLogging::monitorSnapshotPath_sync(v1);
  *((void *)v1 + 9) = v2;
  ServerLogging::clearScratchFolders_sync((ServerLogging *)v2);
  uint64_t result = (ctu::LogServer *)*((void *)v1 + 10);
  if (result)
  {
    return (ctu::LogServer *)ctu::LogServer::setEnabled(result);
  }
  return result;
}

NSObject *ServerLogging::monitorSnapshotPath_sync(ServerLogging *this)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (char *)this + 48;
  xpc_object_t v2 = (const char *)*((void *)this + 6);
  v4.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v4.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v19.st_blkstd::string::size_type size = v4;
  *(timespec *)v19.st_qspare = v4;
  v19.st_birthtimespec = v4;
  *(timespec *)&v19.st_std::string::size_type size = v4;
  v19.st_mtimespec = v4;
  v19.st_ctimespec = v4;
  *(timespec *)&v19.st_uid = v4;
  v19.st_atimespec = v4;
  *(timespec *)&v19.st_dev = v4;
  if (*((char *)this + 71) >= 0) {
    long long v5 = (char *)this + 48;
  }
  else {
    long long v5 = v2;
  }
  if (stat(v5, &v19))
  {
    long long v6 = GetOsLogContext()[1];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      xpc_object_t v7 = v3;
      if (*((char *)this + 71) < 0) {
        xpc_object_t v7 = *(const char **)v3;
      }
      v19.st_dev = 136315138;
      *(void *)&v19.st_mode = v7;
      _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "Snapshot path [%s] was not found, so recreating it\n", (uint8_t *)&v19, 0xCu);
    }
    support::fs::createDir(v3, 0x1EDu, 1);
  }
  if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    unsigned int v8 = open(v3, 0x8000);
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    return 0;
  }
  unsigned int v8 = open(*(const char **)v3, 0x8000);
  if ((v8 & 0x80000000) != 0) {
    return 0;
  }
LABEL_12:
  int v9 = v8;
  uintptr_t v10 = v8;
  global_queue = dispatch_get_global_queue(17, 0);
  size_t v12 = dispatch_source_create(MEMORY[0x1E4F144A8], v10, 0x21uLL, global_queue);
  uint64_t v13 = v12;
  if (v12)
  {
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 0x40000000;
    handler[2] = ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke;
    handler[3] = &__block_descriptor_tmp_7;
    handler[4] = this;
    int v18 = v9;
    dispatch_source_set_event_handler(v12, handler);
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 0x40000000;
    v15[2] = ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke_8;
    v15[3] = &__block_descriptor_tmp_9_0;
    int v16 = v9;
    dispatch_source_set_cancel_handler(v13, v15);
    dispatch_activate(v13);
  }
  else
  {
    close(v9);
  }
  return v13;
}

void ServerLogging::clearScratchFolders_sync(ServerLogging *this)
{
  uint64_t v1 = (const void *)*MEMORY[0x1E4F4F910];
  size_t v2 = strlen((const char *)*MEMORY[0x1E4F4F910]);
  if (v2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v3 = (void *)v2;
  if (v2 >= 0x17)
  {
    uint64_t v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17) {
      uint64_t v5 = v2 | 7;
    }
    uint64_t v6 = v5 + 1;
    timespec v4 = (void **)operator new(v5 + 1);
    __dst[1] = v3;
    unint64_t v10 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_8;
  }
  HIBYTE(v10) = v2;
  timespec v4 = __dst;
  if (v2) {
LABEL_8:
  }
    memmove(v4, v1, (size_t)v3);
  *((unsigned char *)v3 + (void)v4) = 0;
  support::fs::createDir((const char *)__dst, 0x1EDu, 1);
  if (SHIBYTE(v10) < 0) {
    operator delete(__dst[0]);
  }
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_async(global_queue, &__block_literal_global_5);
  capabilities::abs::logScratchPath((uint64_t *)__dst, v8);
  support::fs::createDir((const char *)__dst, 0x1EDu, 1);
  if (SHIBYTE(v10) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_1C5B85F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

ctu::LogServer *ServerLogging::init_sync(ServerLogging *this)
{
  uint64_t result = (ctu::LogServer *)*((void *)this + 10);
  if (result) {
    return (ctu::LogServer *)ctu::LogServer::setEnabled(result);
  }
  return result;
}

void ServerLogging::registerLogServer(os_unfair_lock_s *a1, uint64_t *a2)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 1174405120;
  xpc_object_t v7 = ___ZN13ServerLogging17registerLogServerENSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  unsigned int v8 = &__block_descriptor_tmp_3_4;
  uint64_t v3 = *a2;
  size_t v2 = (std::__shared_weak_count *)a2[1];
  int v9 = a1;
  uint64_t v10 = v3;
  uint64_t v11 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  timespec v4 = a1 + 4;
  os_unfair_lock_lock(a1 + 4);
  v7(v6);
  os_unfair_lock_unlock(v4);
  uint64_t v5 = v11;
  if (v11)
  {
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

ctu::LogServer *___ZN13ServerLogging17registerLogServerENSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(void *a1)
{
  uint64_t v3 = a1[4];
  uint64_t result = (ctu::LogServer *)a1[5];
  uint64_t v4 = a1[6];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v3 + 88);
  *(void *)(v3 + 80) = result;
  *(void *)(v3 + 88) = v4;
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t result = *(ctu::LogServer **)(v3 + 80);
  }
  if (result)
  {
    return (ctu::LogServer *)ctu::LogServer::setEnabled(result);
  }
  return result;
}

uint64_t __copy_helper_block_e8_40c42_ZTSNSt3__110shared_ptrIN3ctu9LogServerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c42_ZTSNSt3__110shared_ptrIN3ctu9LogServerEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ServerLogging::snapshot(os_unfair_lock_s *a1, const void **a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 1174405120;
  uint64_t v6 = ___ZN13ServerLogging8snapshotEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  xpc_object_t v7 = &__block_descriptor_tmp_4_4;
  uint64_t v3 = *a2;
  unsigned int v8 = a1;
  CFTypeRef cf = v3;
  if (v3) {
    CFRetain(v3);
  }
  uint64_t v4 = a1 + 4;
  os_unfair_lock_lock(v4);
  v6((uint64_t)v5);
  os_unfair_lock_unlock(v4);
  if (cf) {
    CFRelease(cf);
  }
}

void ___ZN13ServerLogging8snapshotEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 40);
  if (v1)
  {
    CFRetain(*(CFTypeRef *)(a1 + 40));
    CFRelease(v1);
  }
}

void ___ZN13ServerLogging24clearScratchFolders_syncEv_block_invoke()
{
  v0 = (const void *)*MEMORY[0x1E4F4F910];
  size_t v1 = strlen((const char *)*MEMORY[0x1E4F4F910]);
  if (v1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v2 = (void *)v1;
  if (v1 >= 0x17)
  {
    uint64_t v4 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1 | 7) != 0x17) {
      uint64_t v4 = v1 | 7;
    }
    uint64_t v5 = v4 + 1;
    uint64_t v3 = (void **)operator new(v4 + 1);
    __dst[1] = v2;
    unint64_t v7 = v5 | 0x8000000000000000;
    __dst[0] = v3;
    goto LABEL_8;
  }
  HIBYTE(v7) = v1;
  uint64_t v3 = __dst;
  if (v1) {
LABEL_8:
  }
    memmove(v3, v0, (size_t)v2);
  *((unsigned char *)v2 + (void)v3) = 0;
  support::fs::removeDirContents((const char *)__dst, 0);
  if (SHIBYTE(v7) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_1C5B863CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ServerLogging::backupFolders_sync(capabilities::abs *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 8) = 0;
  unint64_t v7 = (std::string::size_type *)(a4 + 8);
  *(void *)a4 = 0;
  *(void *)(a4 + 16) = 0;
  capabilities::abs::logScratchPath((uint64_t *)&__p, a1);
  v8.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v8.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v40.st_blkstd::string::size_type size = v8;
  *(timespec *)v40.st_qspare = v8;
  v40.st_birthtimespec = v8;
  *(timespec *)&v40.st_std::string::size_type size = v8;
  v40.st_mtimespec = v8;
  v40.st_ctimespec = v8;
  *(timespec *)&v40.st_uid = v8;
  v40.st_atimespec = v8;
  *(timespec *)&v40.st_dev = v8;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (stat((const char *)p_p, &v40))
  {
    LODWORD(v10) = 0;
  }
  else
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &__p;
    }
    else {
      uint64_t v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    size_t v12 = opendir((const char *)v11);
    uint64_t v10 = v12;
    if (v12)
    {
      uint64_t v13 = readdir(v12);
      closedir(v10);
      LODWORD(v10) = v13 != 0;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v10) {
      return;
    }
  }
  else if (!v10)
  {
    return;
  }
  int v14 = *((char *)a2 + 23);
  if (v14 >= 0) {
    size_t v15 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v15 = (size_t)a2[1];
  }
  unint64_t v16 = v15 + 7;
  memset(&__p, 170, sizeof(__p));
  if (v15 + 7 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v16 >= 0x17)
  {
    uint64_t v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v18 = v16 | 7;
    }
    uint64_t v19 = v18 + 1;
    size_t v17 = (std::string *)operator new(v18 + 1);
    __p.__r_.__value_.__l.__size_ = v15 + 7;
    __p.__r_.__value_.__r.__words[2] = v19 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
  }
  else
  {
    memset(&__p, 0, sizeof(__p));
    size_t v17 = &__p;
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = v15 + 7;
    if (!v15) {
      goto LABEL_29;
    }
  }
  if (v14 >= 0) {
    uint64_t v20 = a2;
  }
  else {
    uint64_t v20 = *a2;
  }
  memmove(v17, v20, v15);
LABEL_29:
  strcpy((char *)v17 + v15, "log-bb-");
  Timestamp::Timestamp((Timestamp *)v35);
  Timestamp::asString((uint64_t)v35, 0, 9, v37);
  if ((v38 & 0x80u) == 0) {
    uint64_t v21 = v37;
  }
  else {
    uint64_t v21 = (void **)v37[0];
  }
  if ((v38 & 0x80u) == 0) {
    std::string::size_type v22 = v38;
  }
  else {
    std::string::size_type v22 = (std::string::size_type)v37[1];
  }
  uint64_t v23 = std::string::append(&__p, (const std::string::value_type *)v21, v22);
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  *(void *)&v40.st_uid = *((void *)&v23->__r_.__value_.__l + 2);
  *(_OWORD *)&v40.st_dev = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  int v25 = *(char *)(a3 + 23);
  if (v25 >= 0) {
    unsigned __int8 v26 = (const std::string::value_type *)a3;
  }
  else {
    unsigned __int8 v26 = *(const std::string::value_type **)a3;
  }
  if (v25 >= 0) {
    std::string::size_type v27 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v27 = *(void *)(a3 + 8);
  }
  long long v28 = std::string::append((std::string *)&v40, v26, v27);
  std::string::size_type v29 = v28->__r_.__value_.__r.__words[0];
  std::string::size_type *v7 = v28->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v7 + 7) = *(std::string::size_type *)((char *)&v28->__r_.__value_.__r.__words[1]
                                                                          + 7);
  char v30 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  int st_gid_high = SHIBYTE(v40.st_gid);
  *(void *)a4 = v29;
  *(unsigned char *)(a4 + 23) = v30;
  if ((st_gid_high & 0x80000000) == 0)
  {
    if (((char)v38 & 0x80000000) == 0) {
      goto LABEL_43;
    }
LABEL_48:
    operator delete(v37[0]);
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v35, v36);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_49;
  }
  operator delete(*(void **)&v40.st_dev);
  if ((char)v38 < 0) {
    goto LABEL_48;
  }
LABEL_43:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v35, v36);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_44;
  }
LABEL_49:
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_44:
  capabilities::abs::logScratchPath((uint64_t *)&v40.st_dev, v32);
  support::fs::moveDirUnique((const char *)&v40, a4, (uint64_t)&v33);
  if ((v34 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v40.st_gid) & 0x80000000) == 0) {
      return;
    }
LABEL_51:
    operator delete(*(void **)&v40.st_dev);
    return;
  }
  operator delete(v33);
  if (SHIBYTE(v40.st_gid) < 0) {
    goto LABEL_51;
  }
}

void sub_1C5B866E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (v33 < 0) {
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = GetOsLogContext()[1];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = (void *)(v2 + 48);
    if (*(char *)(v2 + 71) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    int v6 = 136315138;
    unint64_t v7 = v4;
    _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "Snapshot path [%s] was removed\n", (uint8_t *)&v6, 0xCu);
  }
  dispatch_release(*(dispatch_object_t *)(v2 + 72));
  *(void *)(v2 + 72) = 0;
  close(*(_DWORD *)(a1 + 40));
  uint64_t result = ServerLogging::monitorSnapshotPath_sync((ServerLogging *)v2);
  *(void *)(v2 + 72) = result;
  return result;
}

uint64_t ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke_8(uint64_t a1)
{
  return close(*(_DWORD *)(a1 + 32));
}

uint64_t ctu::PthreadMutexGuardPolicy<ServerLogging>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1C5BCAD80;
  strcpy(__p.__r_.__value_.__l.__data_, "AppleBasebandManagerServerLog");
  ctu::LogServer::create();
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)&v27.__r_.__value_.__l.__data_;
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = 0uLL;
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)uint64_t v2 = v3;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    std::string::size_type size = (std::__shared_weak_count *)v27.__r_.__value_.__l.__size_;
    if (!v27.__r_.__value_.__l.__size_)
    {
LABEL_5:
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else
  {
    std::string::size_type size = (std::__shared_weak_count *)v27.__r_.__value_.__l.__size_;
    if (!v27.__r_.__value_.__l.__size_) {
      goto LABEL_5;
    }
  }
  if (atomic_fetch_add(&size->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_5;
  }
  ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
  std::__shared_weak_count::__release_weak(size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_6:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_7:
  ctu::LogServer::start(**(ctu::LogServer ***)(a1 + 32));
  int v6 = (capabilities::abs *)pthread_mutex_lock(&ctu::Singleton<ServerLogging,ServerLogging,ctu::PthreadMutexGuardPolicy<ServerLogging>>::sInstance);
  unint64_t v7 = (os_unfair_lock_s *)qword_1EBBDC828;
  if (qword_1EBBDC828) {
    goto LABEL_31;
  }
  capabilities::abs::logScratchPath((uint64_t *)&__p, v6);
  size_t v8 = strlen((const char *)kDaemonLogScratchDir);
  int v9 = std::string::append(&__p, (const std::string::value_type *)kDaemonLogScratchDir, v8);
  std::string v27 = *v9;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  memset(v26, 170, sizeof(v26));
  capabilities::abs::logSnapshotPath((uint64_t *)v26, (capabilities::abs *)v9);
  uint64_t v10 = operator new(0x60uLL);
  ServerLogging::ServerLogging((uint64_t)v10, (long long *)&v27, (long long *)v26);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
  uint64_t v11 = (std::__shared_weak_count *)operator new(0x20uLL);
  v11->__shared_owners_ = 0;
  p_std::string::size_type shared_owners = &v11->__shared_owners_;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F21104D0;
  v11->__shared_weak_owners_ = 0;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)v10;
  __p.__r_.__value_.__r.__words[0] = 0;
  uint64_t v13 = (std::__shared_weak_count *)*((void *)v10 + 1);
  if (!v13)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)uint64_t v10 = v10;
    *((void *)v10 + 1) = v11;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v13->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)uint64_t v10 = v10;
    *((void *)v10 + 1) = v11;
    std::__shared_weak_count::__release_weak(v13);
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_19:
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
LABEL_20:
  if (__p.__r_.__value_.__r.__words[0])
  {
    ServerLogging::~ServerLogging((ServerLogging *)__p.__r_.__value_.__l.__data_);
    operator delete(v14);
  }
  __p.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
  __p.__r_.__value_.__l.__size_ = 0x40000000;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN13ServerLogging4initEv_block_invoke;
  std::string::size_type v29 = &__block_descriptor_tmp_17;
  char v30 = (uint64_t *)v10;
  os_unfair_lock_lock((os_unfair_lock_t)v10 + 4);
  ((void (*)(std::string *))__p.__r_.__value_.__r.__words[2])(&__p);
  os_unfair_lock_unlock((os_unfair_lock_t)v10 + 4);
  if (SHIBYTE(v26[2]) < 0)
  {
    operator delete(v26[0]);
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_24:
      size_t v15 = (std::__shared_weak_count *)off_1EBBDC830;
      qword_1EBBDC828 = (uint64_t)v10;
      off_1EBBDC830 = v11;
      if (!v15) {
        goto LABEL_30;
      }
LABEL_28:
      if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
      goto LABEL_30;
    }
  }
  else if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_24;
  }
  operator delete(v27.__r_.__value_.__l.__data_);
  size_t v15 = (std::__shared_weak_count *)off_1EBBDC830;
  qword_1EBBDC828 = (uint64_t)v10;
  off_1EBBDC830 = v11;
  if (v15) {
    goto LABEL_28;
  }
LABEL_30:
  unint64_t v7 = (os_unfair_lock_s *)qword_1EBBDC828;
LABEL_31:
  unint64_t v16 = (std::__shared_weak_count *)off_1EBBDC830;
  if (off_1EBBDC830) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDC830 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ServerLogging,ServerLogging,ctu::PthreadMutexGuardPolicy<ServerLogging>>::sInstance);
  size_t v17 = *(uint64_t **)(a1 + 32);
  uint64_t v18 = (std::__shared_weak_count *)v17[1];
  v25[0] = *v17;
  v25[1] = (uint64_t)v18;
  if (v18)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    ServerLogging::registerLogServer(v7, v25);
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  else
  {
    ServerLogging::registerLogServer(v7, v25);
  }
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  uint64_t v19 = *(uint64_t **)(a1 + 32);
  uint64_t v21 = *v19;
  uint64_t v20 = (std::__shared_weak_count *)v19[1];
  uint64_t v23 = v21;
  long long v24 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __p.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
  __p.__r_.__value_.__l.__size_ = 0x40000000;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN3abm5debugL14sLogServerInitERNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  std::string::size_type v29 = &__block_descriptor_tmp_5;
  char v30 = &v23;
  if (abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    std::string::size_type v22 = v24;
    if (!v24) {
      return;
    }
  }
  else
  {
    dispatch_once(&abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &__p);
    std::string::size_type v22 = v24;
    if (!v24) {
      return;
    }
  }
  if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
}

void sub_1C5B86EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  pthread_mutex_unlock(&ctu::Singleton<ServerLogging,ServerLogging,ctu::PthreadMutexGuardPolicy<ServerLogging>>::sInstance);
  _Unwind_Resume(a1);
}

ServerLogging **std::unique_ptr<ServerLogging>::~unique_ptr[abi:ne180100](ServerLogging **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    ServerLogging::~ServerLogging(v2);
    operator delete(v3);
  }
  return a1;
}

void std::__shared_ptr_pointer<ServerLogging *,std::shared_ptr<ServerLogging>::__shared_ptr_default_delete<ServerLogging,ServerLogging>,std::allocator<ServerLogging>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ServerLogging *,std::shared_ptr<ServerLogging>::__shared_ptr_default_delete<ServerLogging,ServerLogging>,std::allocator<ServerLogging>>::__on_zero_shared(uint64_t a1)
{
  size_t v1 = *(ServerLogging **)(a1 + 24);
  if (v1)
  {
    ServerLogging::~ServerLogging(v1);
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<ServerLogging *,std::shared_ptr<ServerLogging>::__shared_ptr_default_delete<ServerLogging,ServerLogging>,std::allocator<ServerLogging>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C5BCD044) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C5BCD044 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C5BCD044)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C5BCD044 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t __cxx_global_var_init_15()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

void PowerBudget::PowerBudget(PowerBudget *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
}

{
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
}

void PowerBudget::PowerBudget(PowerBudget *this, NSDictionary *a2)
{
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  PowerBudget::fill((id *)this, a2);
}

{
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  PowerBudget::fill((id *)this, a2);
}

void sub_1C5B87150(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(void **)(v1 + 8));
  *(void *)(v1 + 8) = 0;
  *(void *)(v1 + 16) = 0;
  *(void *)uint64_t v1 = v3;
  _Unwind_Resume(a1);
}

void PowerBudget::fill(id *this, NSDictionary *a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];

  this[3] = 0;
  if (a2)
  {
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    NSUInteger v4 = [(NSDictionary *)a2 countByEnumeratingWithState:&v40 objects:v44 count:16];
    if (v4)
    {
      uint64_t v36 = *MEMORY[0x1E4F566A0];
      uint64_t v37 = *(void *)v41;
      uint64_t v34 = *MEMORY[0x1E4F566C0];
      uint64_t v35 = *MEMORY[0x1E4F566B0];
      uint64_t v5 = (uint64_t **)(this + 1);
      do
      {
        for (uint64_t i = 0; i != v4; ++i)
        {
          if (*(void *)v41 != v37) {
            objc_enumerationMutation(a2);
          }
          unint64_t v7 = *(void **)(*((void *)&v40 + 1) + 8 * i);
          id v8 = [(NSDictionary *)a2 objectForKeyedSubscript:v7];
          if (v8)
          {
            int v9 = [v8 integerValue];
            if ([v7 isEqualToString:v36])
            {
              unsigned int v10 = 1;
              uint64_t v11 = *v5;
              size_t v12 = (uint64_t **)(this + 1);
              uint64_t v13 = (uint64_t **)(this + 1);
              if (*v5) {
                goto LABEL_54;
              }
LABEL_58:
              long long v31 = operator new(0x28uLL);
              v31[28] = v10;
              v31[32] = 0;
              v31[36] = 0;
              *(void *)long long v31 = 0;
              *((void *)v31 + 1) = 0;
              *((void *)v31 + 2) = v13;
              *size_t v12 = (uint64_t *)v31;
              long long v32 = *(void **)*this;
              int v33 = (uint64_t *)v31;
              if (v32)
              {
                *this = v32;
                int v33 = *v12;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)this[1], v33);
              this[2] = (char *)this[2] + 1;
              goto LABEL_6;
            }
            if ([v7 isEqualToString:v35])
            {
              unsigned int v10 = 0;
              uint64_t v11 = *v5;
              size_t v12 = (uint64_t **)(this + 1);
              uint64_t v13 = (uint64_t **)(this + 1);
              if (*v5) {
                goto LABEL_54;
              }
              goto LABEL_58;
            }
            if ([v7 isEqualToString:v34])
            {
              unsigned int v10 = 2;
              uint64_t v11 = *v5;
              size_t v12 = (uint64_t **)(this + 1);
              uint64_t v13 = (uint64_t **)(this + 1);
              if (*v5) {
                goto LABEL_54;
              }
              goto LABEL_58;
            }
            int v14 = NSString;
            PowerBudget::asString(10, (char *)__p);
            if (v39 >= 0) {
              size_t v15 = __p;
            }
            else {
              size_t v15 = (void **)__p[0];
            }
            char v16 = [v7 isEqualToString:[v14 stringWithUTF8String:v15]];
            char v17 = v16;
            if (v39 < 0)
            {
              operator delete(__p[0]);
              if (v17)
              {
LABEL_25:
                unsigned int v10 = 10;
                uint64_t v11 = *v5;
                size_t v12 = (uint64_t **)(this + 1);
                uint64_t v13 = (uint64_t **)(this + 1);
                if (*v5) {
                  goto LABEL_54;
                }
                goto LABEL_58;
              }
            }
            else if (v16)
            {
              goto LABEL_25;
            }
            uint64_t v18 = NSString;
            PowerBudget::asString(11, (char *)__p);
            if (v39 >= 0) {
              uint64_t v19 = __p;
            }
            else {
              uint64_t v19 = (void **)__p[0];
            }
            char v20 = [v7 isEqualToString:[v18 stringWithUTF8String:v19]];
            char v21 = v20;
            if (v39 < 0)
            {
              operator delete(__p[0]);
              if (v21)
              {
LABEL_33:
                unsigned int v10 = 11;
                uint64_t v11 = *v5;
                size_t v12 = (uint64_t **)(this + 1);
                uint64_t v13 = (uint64_t **)(this + 1);
                if (*v5) {
                  goto LABEL_54;
                }
                goto LABEL_58;
              }
            }
            else if (v20)
            {
              goto LABEL_33;
            }
            std::string::size_type v22 = NSString;
            PowerBudget::asString(12, (char *)__p);
            if (v39 >= 0) {
              uint64_t v23 = __p;
            }
            else {
              uint64_t v23 = (void **)__p[0];
            }
            char v24 = [v7 isEqualToString:[v22 stringWithUTF8String:v23]];
            char v25 = v24;
            if (v39 < 0)
            {
              operator delete(__p[0]);
              if (v25)
              {
LABEL_41:
                unsigned int v10 = 12;
                uint64_t v11 = *v5;
                size_t v12 = (uint64_t **)(this + 1);
                uint64_t v13 = (uint64_t **)(this + 1);
                if (*v5) {
                  goto LABEL_54;
                }
                goto LABEL_58;
              }
            }
            else if (v24)
            {
              goto LABEL_41;
            }
            unsigned __int8 v26 = NSString;
            PowerBudget::asString(13, (char *)__p);
            if (v39 >= 0) {
              std::string v27 = __p;
            }
            else {
              std::string v27 = (void **)__p[0];
            }
            char v28 = [v7 isEqualToString:[v26 stringWithUTF8String:v27]];
            char v29 = v28;
            if (v39 < 0)
            {
              operator delete(__p[0]);
              if (v29)
              {
LABEL_51:
                unsigned int v10 = 13;
                uint64_t v11 = *v5;
                size_t v12 = (uint64_t **)(this + 1);
                uint64_t v13 = (uint64_t **)(this + 1);
                if (!*v5) {
                  goto LABEL_58;
                }
                while (1)
                {
LABEL_54:
                  while (1)
                  {
                    uint64_t v13 = (uint64_t **)v11;
                    unsigned int v30 = *((unsigned __int8 *)v11 + 28);
                    if (v30 <= v10) {
                      break;
                    }
                    uint64_t v11 = *v13;
                    size_t v12 = v13;
                    if (!*v13) {
                      goto LABEL_58;
                    }
                  }
                  if (v30 >= v10) {
                    break;
                  }
                  uint64_t v11 = v13[1];
                  if (!v11)
                  {
                    size_t v12 = v13 + 1;
                    goto LABEL_58;
                  }
                }
                long long v31 = v13;
LABEL_6:
                *((_DWORD *)v31 + 8) = v9;
                v31[36] = 1;
                continue;
              }
            }
            else if (v28)
            {
              goto LABEL_51;
            }
          }
        }
        NSUInteger v4 = [(NSDictionary *)a2 countByEnumeratingWithState:&v40 objects:v44 count:16];
      }
      while (v4);
    }
  }
}

void sub_1C5B87598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5B8760C(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(void **)(v1 + 8));
  *(void *)(v1 + 8) = 0;
  *(void *)(v1 + 16) = 0;
  *(void *)uint64_t v1 = v3;
  _Unwind_Resume(a1);
}

void PowerBudget::~PowerBudget(PowerBudget *this)
{
  uint64_t v2 = (void *)((char *)this + 8);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this, *((void **)this + 1));
  *(void *)this = v2;
  *((void *)this + 2) = 0;
  *uint64_t v2 = 0;

  *((void *)this + 3) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this, *((void **)this + 1));
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = v2;
}

{
  void *v2;

  uint64_t v2 = (void *)((char *)this + 8);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this, *((void **)this + 1));
  *(void *)this = v2;
  *((void *)this + 2) = 0;
  *uint64_t v2 = 0;

  *((void *)this + 3) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this, *((void **)this + 1));
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = v2;
}

void PowerBudget::PowerBudget(PowerBudget *this, const PowerBudget *a2)
{
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (a2 != this) {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)this, *(void **)a2, (void *)a2 + 1);
  }
  *((void *)this + 3) = [*((id *)a2 + 3) copy];
}

{
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (a2 != this) {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)this, *(void **)a2, (void *)a2 + 1);
  }
  *((void *)this + 3) = [*((id *)a2 + 3) copy];
}

void sub_1C5B87754(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(void **)(v1 + 8));
  *(void *)(v1 + 8) = 0;
  *(void *)(v1 + 16) = 0;
  *(void *)uint64_t v1 = v2;
  _Unwind_Resume(a1);
}

void sub_1C5B877D8(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(void **)(v1 + 8));
  *(void *)(v1 + 8) = 0;
  *(void *)(v1 + 16) = 0;
  *(void *)uint64_t v1 = v2;
  _Unwind_Resume(a1);
}

uint64_t PowerBudget::PowerBudget(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  long long v7 = 0u;
  int v6 = &v7;
  *(void *)a1 = a1 + 8;
  if (a2 != a1) {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>(a1, *(void **)a2, (void *)(a2 + 8));
  }
  if (&v6 != (long long **)a2) {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>(a2, v6, &v7);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v6, (void *)v7);
  uint64_t v4 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = v4;
  return a1;
}

void sub_1C5B878A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a10, a11);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v11, *(void **)(v11 + 8));
  *(void *)(v11 + 8) = 0;
  *(void *)(v11 + 16) = 0;
  *(void *)uint64_t v11 = v12;
  _Unwind_Resume(a1);
}

uint64_t PowerBudget::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>(a1, *(void **)a2, (void *)(a2 + 8));

    *(void *)(a1 + 24) = [*(id *)(a2 + 24) copy];
  }
  return a1;
}

void PowerBudget::PowerBudget(PowerBudget *this, BudgetData *a2)
{
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 3) = 0;
  if (a2 != this) {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)this, *(void **)a2, (void *)a2 + 1);
  }
}

{
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 3) = 0;
  if (a2 != this) {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)this, *(void **)a2, (void *)a2 + 1);
  }
}

void sub_1C5B87988(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(void **)(v1 + 8));
  *(void *)(v1 + 8) = 0;
  *(void *)(v1 + 16) = 0;
  *(void *)uint64_t v1 = v2;
  _Unwind_Resume(a1);
}

void PowerBudget::fill(id *this, id *a2)
{
  this[3] = 0;
  if (a2 != this)
  {
    uint64_t v4 = *a2;
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)this, v4, a2 + 1);
  }
}

void sub_1C5B87A64(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(void **)(v1 + 8));
  *(void *)(v1 + 8) = 0;
  *(void *)(v1 + 16) = 0;
  *(void *)uint64_t v1 = v2;
  _Unwind_Resume(a1);
}

void *PowerBudget::PowerBudget(void *a1, void *a2)
{
  a1[1] = 0;
  *a1 = a1 + 1;
  a1[2] = 0;
  a1[3] = 0;
  a1[3] = 0;
  if (a2 != a1) {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)a1, (void *)*a2, a2 + 1);
  }
  return a1;
}

{
  a1[1] = 0;
  *a1 = a1 + 1;
  a1[2] = 0;
  a1[3] = 0;
  a1[3] = 0;
  if (a2 != a1) {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)a1, (void *)*a2, a2 + 1);
  }
  return a1;
}

void sub_1C5B87AE0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(void **)(v1 + 8));
  *(void *)(v1 + 8) = 0;
  *(void *)(v1 + 16) = 0;
  *(void *)uint64_t v1 = v2;
  _Unwind_Resume(a1);
}

void PowerBudget::fill(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  if (a2 != a1)
  {
    uint64_t v4 = *(void **)a2;
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>(a1, v4, (void *)(a2 + 8));
  }
}

void sub_1C5B87BBC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(void **)(v1 + 8));
  *(void *)(v1 + 8) = 0;
  *(void *)(v1 + 16) = 0;
  *(void *)uint64_t v1 = v2;
  _Unwind_Resume(a1);
}

id PowerBudget::getNSDict(id *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];

  this[3] = 0;
  uint64_t v2 = (void (**)(void *))&unk_1F2110520;
  v9[0] = &unk_1F2110520;
  v9[1] = this;
  unsigned int v10 = v9;
  uint64_t v3 = (id *)*this;
  if (*this == this + 1) {
    goto LABEL_16;
  }
  uint64_t v4 = v9;
  while ((*(unsigned int (**)(void *, uint64_t, id *))(*v4 + 48))(v4, (uint64_t)v3 + 28, v3 + 4))
  {
    uint64_t v5 = (id *)v3[1];
    int v6 = v3;
    if (v5)
    {
      do
      {
        uint64_t v3 = v5;
        uint64_t v5 = (id *)*v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        uint64_t v3 = (id *)v6[2];
        BOOL v7 = *v3 == v6;
        int v6 = v3;
      }
      while (!v7);
    }
    if (v3 == this + 1) {
      break;
    }
    uint64_t v4 = v10;
    if (!v10) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
  }
  if (v10 == v9)
  {
    uint64_t v2 = (void (**)(void *))v9[0];
LABEL_16:
    v2[4](v9);
    return this[3];
  }
  if (v10) {
    (*(void (**)(void))(*v10 + 40))();
  }
  return this[3];
}

void sub_1C5B87D5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1C5B87D70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void PowerBudget::getData(PowerBudget *this@<X0>, PowerBudget *a2@<X8>)
{
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 1) = 0;
  *(void *)a2 = (char *)a2 + 8;
  if (a2 != this) {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)a2, *(void **)this, (void *)this + 1);
  }
}

void sub_1C5B87DC8(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t PowerBudget::get(uint64_t **a1, unsigned int a2)
{
  char v2 = a2;
  uint64_t v5 = a1 + 1;
  uint64_t v4 = (unsigned __int8 *)a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        int v6 = v4;
        unsigned int v7 = v4[28];
        if (v7 <= a2) {
          break;
        }
        uint64_t v4 = (unsigned __int8 *)*v6;
        uint64_t v5 = (uint64_t **)v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      if (v7 >= a2) {
        break;
      }
      uint64_t v4 = (unsigned __int8 *)v6[1];
      if (!v4)
      {
        uint64_t v5 = (uint64_t **)(v6 + 1);
        goto LABEL_8;
      }
    }
  }
  else
  {
    int v6 = a1 + 1;
LABEL_8:
    id v8 = v6;
    int v6 = operator new(0x28uLL);
    *((unsigned char *)v6 + 28) = v2;
    *((unsigned char *)v6 + 32) = 0;
    *((unsigned char *)v6 + 36) = 0;
    void *v6 = 0;
    v6[1] = 0;
    void v6[2] = v8;
    *uint64_t v5 = v6;
    int v9 = (uint64_t *)**a1;
    unsigned int v10 = v6;
    if (v9)
    {
      *a1 = v9;
      unsigned int v10 = *v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6[4];
}

uint64_t *PowerBudget::set(uint64_t *result, unsigned int a2, int a3)
{
  if (a2 <= 0xD)
  {
    char v3 = a2;
    if (((1 << a2) & 0x3C07) != 0)
    {
      uint64_t v5 = result;
      unsigned int v7 = (uint64_t **)(result + 1);
      int v6 = (unsigned __int8 *)result[1];
      if (v6)
      {
        while (1)
        {
          while (1)
          {
            id v8 = v6;
            unsigned int v9 = v6[28];
            if (v9 <= a2) {
              break;
            }
            int v6 = (unsigned __int8 *)*v8;
            unsigned int v7 = (uint64_t **)v8;
            if (!*v8) {
              goto LABEL_10;
            }
          }
          if (v9 >= a2) {
            break;
          }
          int v6 = (unsigned __int8 *)v8[1];
          if (!v6)
          {
            unsigned int v7 = (uint64_t **)(v8 + 1);
            goto LABEL_10;
          }
        }
      }
      else
      {
        id v8 = result + 1;
LABEL_10:
        unsigned int v10 = v8;
        id v8 = operator new(0x28uLL);
        *((unsigned char *)v8 + 28) = v3;
        *((unsigned char *)v8 + 32) = 0;
        *((unsigned char *)v8 + 36) = 0;
        void *v8 = 0;
        v8[1] = 0;
        uint64_t v8[2] = v10;
        void *v7 = v8;
        uint64_t v11 = *(void *)*v5;
        uint64_t v12 = v8;
        if (v11)
        {
          *uint64_t v5 = v11;
          uint64_t v12 = *v7;
        }
        uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[1], v12);
        ++v5[2];
      }
      *((_DWORD *)v8 + 8) = a3;
      *((unsigned char *)v8 + 36) = 1;
    }
  }
  return result;
}

void PowerBudget::asString(int a1@<W0>, char *a2@<X8>)
{
  char v2 = a2;
  switch(a1)
  {
    case 0:
      char v3 = (id *)MEMORY[0x1E4F566B0];
      goto LABEL_5;
    case 1:
      char v3 = (id *)MEMORY[0x1E4F566A0];
      goto LABEL_5;
    case 2:
      char v3 = (id *)MEMORY[0x1E4F566C0];
LABEL_5:
      uint64_t v4 = (const char *)[*v3 UTF8String];
      size_t v5 = strlen(v4);
      if (v5 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v6 = v5;
      if (v5 >= 0x17)
      {
        uint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v5 | 7) != 0x17) {
          uint64_t v7 = v5 | 7;
        }
        uint64_t v8 = v7 + 1;
        unsigned int v9 = (char *)operator new(v7 + 1);
        *((void *)v2 + 1) = v6;
        *((void *)v2 + 2) = v8 | 0x8000000000000000;
        *(void *)char v2 = v9;
        char v2 = v9;
      }
      else
      {
        v2[23] = v5;
        if (!v5) {
          goto LABEL_13;
        }
      }
      memmove(v2, v4, v6);
LABEL_13:
      v2[v6] = 0;
      return;
    case 10:
      unsigned int v10 = (const char *)[(id)*MEMORY[0x1E4F566D0] UTF8String];
      size_t v11 = strlen(v10);
      if (v11 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_56;
      }
      std::string::size_type v12 = v11;
      if (v11 >= 0x17)
      {
        uint64_t v26 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17) {
          uint64_t v26 = v11 | 7;
        }
        uint64_t v27 = v26 + 1;
        p_dst = (std::string *)operator new(v26 + 1);
        __dst.__r_.__value_.__l.__size_ = v12;
        __dst.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v11;
        p_dst = &__dst;
        if (!v11) {
          goto LABEL_35;
        }
      }
      memmove(p_dst, v10, v12);
LABEL_35:
      p_dst->__r_.__value_.__s.__data_[v12] = 0;
      char v28 = std::string::append(&__dst, ".", 1uLL);
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      size_t v30 = strlen((const char *)*MEMORY[0x1E4F4C458]);
      long long v31 = std::string::append(&v49, (const std::string::value_type *)*MEMORY[0x1E4F4C458], v30);
      goto LABEL_51;
    case 11:
      int v14 = (const char *)[(id)*MEMORY[0x1E4F566D0] UTF8String];
      size_t v15 = strlen(v14);
      if (v15 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_56;
      }
      std::string::size_type v16 = v15;
      if (v15 >= 0x17)
      {
        uint64_t v32 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v15 | 7) != 0x17) {
          uint64_t v32 = v15 | 7;
        }
        uint64_t v33 = v32 + 1;
        char v17 = (std::string *)operator new(v32 + 1);
        __dst.__r_.__value_.__l.__size_ = v16;
        __dst.__r_.__value_.__r.__words[2] = v33 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v15;
        char v17 = &__dst;
        if (!v15) {
          goto LABEL_40;
        }
      }
      memmove(v17, v14, v16);
LABEL_40:
      v17->__r_.__value_.__s.__data_[v16] = 0;
      uint64_t v34 = std::string::append(&__dst, ".", 1uLL);
      long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      size_t v36 = strlen((const char *)*MEMORY[0x1E4F4C440]);
      long long v31 = std::string::append(&v49, (const std::string::value_type *)*MEMORY[0x1E4F4C440], v36);
      goto LABEL_51;
    case 12:
      uint64_t v18 = (const char *)[(id)*MEMORY[0x1E4F566D0] UTF8String];
      size_t v19 = strlen(v18);
      if (v19 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_56;
      }
      std::string::size_type v20 = v19;
      if (v19 >= 0x17)
      {
        uint64_t v37 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v19 | 7) != 0x17) {
          uint64_t v37 = v19 | 7;
        }
        uint64_t v38 = v37 + 1;
        char v21 = (std::string *)operator new(v37 + 1);
        __dst.__r_.__value_.__l.__size_ = v20;
        __dst.__r_.__value_.__r.__words[2] = v38 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v19;
        char v21 = &__dst;
        if (!v19) {
          goto LABEL_45;
        }
      }
      memmove(v21, v18, v20);
LABEL_45:
      v21->__r_.__value_.__s.__data_[v20] = 0;
      char v39 = std::string::append(&__dst, ".", 1uLL);
      long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      size_t v41 = strlen((const char *)*MEMORY[0x1E4F4C448]);
      long long v31 = std::string::append(&v49, (const std::string::value_type *)*MEMORY[0x1E4F4C448], v41);
      goto LABEL_51;
    case 13:
      std::string::size_type v22 = (const char *)[(id)*MEMORY[0x1E4F566D0] UTF8String];
      size_t v23 = strlen(v22);
      if (v23 > 0x7FFFFFFFFFFFFFF7) {
LABEL_56:
      }
        std::string::__throw_length_error[abi:ne180100]();
      std::string::size_type v24 = v23;
      if (v23 >= 0x17)
      {
        uint64_t v42 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v23 | 7) != 0x17) {
          uint64_t v42 = v23 | 7;
        }
        uint64_t v43 = v42 + 1;
        char v25 = (std::string *)operator new(v42 + 1);
        __dst.__r_.__value_.__l.__size_ = v24;
        __dst.__r_.__value_.__r.__words[2] = v43 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v23;
        char v25 = &__dst;
        if (!v23) {
          goto LABEL_50;
        }
      }
      memmove(v25, v22, v24);
LABEL_50:
      v25->__r_.__value_.__s.__data_[v24] = 0;
      size_t v44 = std::string::append(&__dst, ".", 1uLL);
      long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      size_t v46 = strlen((const char *)*MEMORY[0x1E4F4C450]);
      long long v31 = std::string::append(&v49, (const std::string::value_type *)*MEMORY[0x1E4F4C450], v46);
LABEL_51:
      long long v47 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      *((void *)v2 + 2) = *((void *)&v31->__r_.__value_.__l + 2);
      *(_OWORD *)char v2 = v47;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v49.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return;
        }
      }
      else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        return;
      }
      operator delete(__dst.__r_.__value_.__l.__data_);
      return;
    default:
      a2[23] = 7;
      strcpy(a2, "Unknown");
      return;
  }
}

void sub_1C5B884CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a10);
  _Unwind_Resume(a1);
}

void sub_1C5B88544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    JUMPOUT(0x1C5B88534);
  }
  JUMPOUT(0x1C5B88524);
}

uint64_t PowerBudget::to_string@<X0>(PowerBudget *this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v29[7] = v4;
  v29[8] = v4;
  v29[5] = v4;
  v29[6] = v4;
  void v29[3] = v4;
  _OWORD v29[4] = v4;
  v29[1] = v4;
  void v29[2] = v4;
  long long v28 = v4;
  v29[0] = v4;
  *(_OWORD *)std::string __p = v4;
  long long v27 = v4;
  long long v24 = v4;
  *(_OWORD *)__src = v4;
  long long v22 = v4;
  long long v23 = v4;
  long long v21 = v4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"{ ", 2);
  size_t v5 = (void (**)(void *))&unk_1F21105A0;
  v31[0] = &unk_1F21105A0;
  v31[1] = &v21;
  uint64_t v32 = v31;
  uint64_t v8 = *(char **)this;
  size_t v6 = (char *)this + 8;
  uint64_t v7 = v8;
  if (v8 == v6) {
    goto LABEL_16;
  }
  unsigned int v9 = v31;
  while ((*(unsigned int (**)(void *, char *, void *))(*v9 + 48))(v9, v7 + 28, (void *)v7 + 4))
  {
    unsigned int v10 = (char *)*((void *)v7 + 1);
    size_t v11 = v7;
    if (v10)
    {
      do
      {
        uint64_t v7 = v10;
        unsigned int v10 = *(char **)v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        uint64_t v7 = (char *)*((void *)v11 + 2);
        BOOL v12 = *(void *)v7 == (void)v11;
        size_t v11 = v7;
      }
      while (!v12);
    }
    if (v7 == v6) {
      break;
    }
    unsigned int v9 = v32;
    if (!v32) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
  }
  if (v32 == v31)
  {
    size_t v5 = (void (**)(void *))v31[0];
LABEL_16:
    v5[4](v31);
    goto LABEL_17;
  }
  if (v32) {
    (*(void (**)(void *))(*v32 + 40))(v32);
  }
LABEL_17:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"}", 1);
  if ((BYTE8(v28) & 0x10) != 0)
  {
    int v14 = (unsigned char *)v28;
    if ((void *)v28 < __src[1])
    {
      *(void **)&long long v28 = __src[1];
      int v14 = __src[1];
    }
    size_t v15 = __src[0];
    size_t v13 = v14 - (char *)__src[0];
    if ((unint64_t)(v14 - (char *)__src[0]) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_34;
    }
  }
  else
  {
    if ((BYTE8(v28) & 8) == 0)
    {
      size_t v13 = 0;
      a2[23] = 0;
      goto LABEL_30;
    }
    size_t v15 = (const void *)*((void *)&v23 + 1);
    size_t v13 = *((void *)&v24 + 1) - *((void *)&v23 + 1);
    if (*((void *)&v24 + 1) - *((void *)&v23 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_34:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v13 >= 0x17)
  {
    uint64_t v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v16 = v13 | 7;
    }
    uint64_t v17 = v16 + 1;
    uint64_t v18 = operator new(v16 + 1);
    *((void *)a2 + 1) = v13;
    *((void *)a2 + 2) = v17 | 0x8000000000000000;
    *(void *)a2 = v18;
    a2 = v18;
    goto LABEL_29;
  }
  a2[23] = v13;
  if (v13) {
LABEL_29:
  }
    memmove(a2, v15, v13);
LABEL_30:
  a2[v13] = 0;
  *(void *)&long long v21 = *MEMORY[0x1E4FBA408];
  uint64_t v19 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)&v21 + *(void *)(v21 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(void *)&long long v22 = v19;
  *((void *)&v22 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v27) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C8795140](v29);
}

void sub_1C5B8894C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C5B88960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::function<BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::~function((void *)(v9 - 88));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *std::__function::__func<PowerBudget::getNSDict(void)::$_0,std::allocator<PowerBudget::getNSDict(void)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F2110520;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<PowerBudget::getNSDict(void)::$_0,std::allocator<PowerBudget::getNSDict(void)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2110520;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<PowerBudget::getNSDict(void)::$_0,std::allocator<PowerBudget::getNSDict(void)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::operator()(uint64_t a1, char *a2, unsigned int *a3)
{
  if (*((unsigned char *)a3 + 4))
  {
    uint64_t v5 = *(void *)(a1 + 8);
    id v6 = *(id *)(v5 + 24);
    if (!v6)
    {
      id v6 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      *(void *)(v5 + 24) = v6;
      unint64_t v7 = *a2;
      if (v7 > 2) {
        return 1;
      }
      goto LABEL_4;
    }
    unint64_t v7 = *a2;
    if (v7 <= 2) {
LABEL_4:
    }
      [v6 setValue:[NSNumber numberWithInt:*a3] forKey:*((void **)&unk_1E651C390 + v7)];
  }
  return 1;
}

uint64_t std::__function::__func<PowerBudget::getNSDict(void)::$_0,std::allocator<PowerBudget::getNSDict(void)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN11PowerBudget9getNSDictEvE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN11PowerBudget9getNSDictEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN11PowerBudget9getNSDictEvE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN11PowerBudget9getNSDictEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<PowerBudget::getNSDict(void)::$_0,std::allocator<PowerBudget::getNSDict(void)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::target_type()
{
}

void *std::__function::__func<PowerBudget::to_string(void)::$_0,std::allocator<PowerBudget::to_string(void)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F21105A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<PowerBudget::to_string(void)::$_0,std::allocator<PowerBudget::to_string(void)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F21105A0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<PowerBudget::to_string(void)::$_0,std::allocator<PowerBudget::to_string(void)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::operator()(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  if (!*(unsigned char *)(a3 + 4)) {
    return 1;
  }
  uint64_t v3 = (void *)(*(void *)(a1 + 8) + 16);
  PowerBudget::asString(*a2, (char *)__p);
  long long v4 = (v10 & 0x80u) == 0 ? __p : (void **)__p[0];
  uint64_t v5 = (v10 & 0x80u) == 0 ? (void *)v10 : __p[1];
  id v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, (uint64_t)v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" = ", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", ", 2);
  if (((char)v10 & 0x80000000) == 0) {
    return 1;
  }
  operator delete(__p[0]);
  return 1;
}

void sub_1C5B88C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<PowerBudget::to_string(void)::$_0,std::allocator<PowerBudget::to_string(void)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK11PowerBudget9to_stringEvE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZNK11PowerBudget9to_stringEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK11PowerBudget9to_stringEvE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK11PowerBudget9to_stringEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<PowerBudget::to_string(void)::$_0,std::allocator<PowerBudget::to_string(void)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::target_type()
{
}

void CircularFileLogWriter::create(long long *a1@<X0>, void *a2@<X8>)
{
  long long v4 = operator new(0xB8uLL);
  CircularFileLogWriter::CircularFileLogWriter((uint64_t)v4, a1);
  *a2 = v4;
  uint64_t v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v5->__shared_owners_ = 0;
  p_std::string::size_type shared_owners = &v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2110710;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  a2[1] = v5;
  unint64_t v7 = (std::__shared_weak_count *)*((void *)v4 + 2);
  if (v7)
  {
    if (v7->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v4 + 1) = v4;
    *((void *)v4 + 2) = v5;
    std::__shared_weak_count::__release_weak(v7);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v4 + 1) = v4;
    *((void *)v4 + 2) = v5;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);

  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C5B88E1C(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<CircularFileLogWriter> ctu::SharedSynchronizable<CircularFileLogWriter>::make_shared_ptr<CircularFileLogWriter>(CircularFileLogWriter*)::{lambda(CircularFileLogWriter*)#1}::operator() const(CircularFileLogWriter*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C5B88E44(_Unwind_Exception *a1)
{
}

void sub_1C5B88E58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t CircularFileLogWriter::CircularFileLogWriter(uint64_t a1, long long *a2)
{
  *(void *)a1 = MEMORY[0x1E4FBA1A8] + 16;
  long long v4 = dispatch_queue_create("CircularFileLogWriter", 0);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v4;
  if (v4)
  {
    uint64_t v5 = v4;
    dispatch_retain(v4);
    *(void *)(a1 + 32) = 0;
    dispatch_release(v5);
    *(void *)a1 = &unk_1F2110620;
    *(void *)(a1 + 40) = 0;
    id v6 = (std::string *)(a1 + 48);
    if ((*((char *)a2 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      long long v7 = *a2;
      v6->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
      goto LABEL_6;
    }
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &unk_1F2110620;
    id v6 = (std::string *)(a1 + 48);
    if ((*((char *)a2 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a2, *((void *)a2 + 1));
LABEL_6:
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 72), *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v8 = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 88) = *((void *)a2 + 5);
    *(_OWORD *)(a1 + 72) = v8;
  }
  uint64_t v9 = (std::string *)(a1 + 96);
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v10 = a2[3];
    *(void *)(a1 + 112) = *((void *)a2 + 8);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  long long v11 = *(long long *)((char *)a2 + 72);
  *(unsigned char *)(a1 + 136) = *((unsigned char *)a2 + 88);
  *(_OWORD *)(a1 + 120) = v11;
  *(void *)(a1 + 144) = 1;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  return a1;
}

void sub_1C5B88FF0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 95) < 0)
  {
    operator delete(*v4);
    if ((*(char *)(v1 + 71) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v6 = *(void *)(v1 + 40);
      *(void *)(v1 + 40) = 0;
      if (!v6) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v1 + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  uint64_t v6 = *(void *)(v1 + 40);
  *(void *)(v1 + 40) = 0;
  if (!v6)
  {
LABEL_4:
    ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v2);
    _Unwind_Resume(a1);
  }
LABEL_7:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v2);
  _Unwind_Resume(a1);
}

void CircularFileLogWriter::open(CircularFileLogWriter *this)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN21CircularFileLogWriter4openEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_18;
  v3[4] = this;
  long long v4 = v3;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_21_0;
  block[4] = (char *)this + 8;
  void block[5] = &v4;
  uint64_t v2 = (char *)this + 24;
  uint64_t v1 = *((void *)this + 3);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

void ___ZN21CircularFileLogWriter4openEv_block_invoke(uint64_t a1)
{
  v39[2] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  *(_DWORD *)(v1 + 152) = 0;
  *(_DWORD *)(v1 + 156) = 0;
  if (*(void *)(v1 + 40))
  {
    std::ostream::flush();
    uint64_t v2 = *(void **)(v1 + 40);
    if (!std::filebuf::close()) {
      std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), *(_DWORD *)((char *)v2 + *(void *)(*v2 - 24) + 32) | 4);
    }
    uint64_t v3 = *(void *)(v1 + 40);
    *(void *)(v1 + 40) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  else
  {
    *(void *)(v1 + 40) = 0;
  }
  *(void *)(v1 + 144) = *(void *)(v1 + 120) / *(void *)(v1 + 128);
  int v4 = *(char *)(v1 + 95);
  if (v4 >= 0) {
    size_t v5 = *(unsigned __int8 *)(v1 + 95);
  }
  else {
    size_t v5 = *(void *)(v1 + 80);
  }
  unint64_t v6 = v5 + 8;
  memset(&__dst, 170, sizeof(__dst));
  if (v5 + 8 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  long long v7 = (void **)(v1 + 72);
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v5 + 8;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5 + 8;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v4 >= 0) {
    long long v11 = (void *)(v1 + 72);
  }
  else {
    long long v11 = *v7;
  }
  memmove(p_dst, v11, v5);
LABEL_21:
  strcpy((char *)p_dst + v5, "/latest-");
  int v12 = *(char *)(v1 + 71);
  if (v12 >= 0) {
    size_t v13 = (const std::string::value_type *)(v1 + 48);
  }
  else {
    size_t v13 = *(const std::string::value_type **)(v1 + 48);
  }
  if (v12 >= 0) {
    std::string::size_type v14 = *(unsigned __int8 *)(v1 + 71);
  }
  else {
    std::string::size_type v14 = *(void *)(v1 + 56);
  }
  size_t v15 = std::string::append(&__dst, v13, v14);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  *(void *)&v38.st_uid = *((void *)&v15->__r_.__value_.__l + 2);
  *(_OWORD *)&v38.st_dev = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  int v17 = *(char *)(v1 + 119);
  if (v17 >= 0) {
    uint64_t v18 = (const std::string::value_type *)(v1 + 96);
  }
  else {
    uint64_t v18 = *(const std::string::value_type **)(v1 + 96);
  }
  if (v17 >= 0) {
    std::string::size_type v19 = *(unsigned __int8 *)(v1 + 119);
  }
  else {
    std::string::size_type v19 = *(void *)(v1 + 104);
  }
  std::string::size_type v20 = std::string::append((std::string *)&v38, v18, v19);
  std::string::size_type v21 = v20->__r_.__value_.__r.__words[0];
  v39[0] = v20->__r_.__value_.__l.__size_;
  *(void *)((char *)v39 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
  char v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(v1 + 183) < 0) {
    operator delete(*(void **)(v1 + 160));
  }
  uint64_t v23 = v39[0];
  *(void *)(v1 + 160) = v21;
  *(void *)(v1 + 168) = v23;
  *(void *)(v1 + 175) = *(void *)((char *)v39 + 7);
  *(unsigned char *)(v1 + 183) = v22;
  if (SHIBYTE(v38.st_gid) < 0)
  {
    operator delete(*(void **)&v38.st_dev);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_37;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_37:
  int v24 = *(char *)(v1 + 95);
  if (v24 >= 0) {
    size_t v25 = *(unsigned __int8 *)(v1 + 95);
  }
  else {
    size_t v25 = *(void *)(v1 + 80);
  }
  unint64_t v26 = v25 + 1;
  memset(&v38, 170, 24);
  if (v25 + 1 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v26 >= 0x17)
  {
    uint64_t v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17) {
      uint64_t v30 = v26 | 7;
    }
    uint64_t v31 = v30 + 1;
    long long v27 = (char *)operator new(v30 + 1);
    v38.st_ino = v25 + 1;
    *(void *)&v38.st_uid = v31 | 0x8000000000000000;
    *(void *)&v38.st_dev = v27;
  }
  else
  {
    memset(&v38, 0, 24);
    long long v27 = (char *)&v38;
    HIBYTE(v38.st_gid) = v25 + 1;
    if (!v25)
    {
      LOWORD(v38.st_dev) = 47;
      if ((v24 & 0x80000000) == 0) {
        goto LABEL_44;
      }
      goto LABEL_57;
    }
  }
  if (v24 >= 0) {
    uint64_t v32 = (void *)(v1 + 72);
  }
  else {
    uint64_t v32 = *v7;
  }
  memmove(v27, v32, v25);
  *(_WORD *)&v27[v25] = 47;
  if (v24 < 0) {
LABEL_57:
  }
    operator delete(*v7);
LABEL_44:
  *(_OWORD *)long long v7 = *(_OWORD *)&v38.st_dev;
  *(void *)(v1 + 88) = *(void *)&v38.st_uid;
  v28.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v28.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v38.st_blkstd::string::size_type size = v28;
  *(timespec *)v38.st_qspare = v28;
  v38.st_birthtimespec = v28;
  *(timespec *)&v38.st_std::string::size_type size = v28;
  v38.st_mtimespec = v28;
  v38.st_ctimespec = v28;
  *(timespec *)&v38.st_uid = v28;
  v38.st_atimespec = v28;
  *(timespec *)&v38.st_dev = v28;
  if (*(char *)(v1 + 95) >= 0) {
    long long v29 = (const char *)(v1 + 72);
  }
  else {
    long long v29 = *(const char **)(v1 + 72);
  }
  if (!stat(v29, &v38)
    && (*(char *)(v1 + 95) >= 0 ? (uint64_t v33 = (const char *)(v1 + 72)) : (uint64_t v33 = *(const char **)(v1 + 72)),
        (v34 = opendir(v33), (long long v35 = v34) != 0) && (v36 = readdir(v34), closedir(v35), v36)))
  {
    CircularFileLogWriter::getFileIndex_sync((CircularFileLogWriter *)v1, (unsigned int *)(v1 + 156), (unsigned int *)(v1 + 152));
  }
  else
  {
    support::fs::createDir((const char *)(v1 + 72), 0x1EDu, 1);
  }
  CircularFileLogWriter::openNewLog_sync((CircularFileLogWriter *)v1);
}

void sub_1C5B89578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CircularFileLogWriter::close_sync(CircularFileLogWriter *this)
{
  *((void *)this + 19) = 0;
  uint64_t result = *((void *)this + 5);
  if (!result)
  {
    *((void *)this + 5) = 0;
    return result;
  }
  std::ostream::flush();
  uint64_t v3 = (void *)*((void *)this + 5);
  if (std::filebuf::close())
  {
    uint64_t result = *((void *)this + 5);
    *((void *)this + 5) = 0;
    if (!result) {
      return result;
    }
  }
  else
  {
    std::ios_base::clear((std::ios_base *)((char *)v3 + *(void *)(*v3 - 24)), *(_DWORD *)((char *)v3 + *(void *)(*v3 - 24) + 32) | 4);
    uint64_t result = *((void *)this + 5);
    *((void *)this + 5) = 0;
    if (!result) {
      return result;
    }
  }
  int v4 = *(uint64_t (**)(void))(*(void *)result + 8);

  return v4();
}

void CircularFileLogWriter::getFileIndex_sync(CircularFileLogWriter *this, unsigned int *a2, unsigned int *a3)
{
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v62 = v6;
  long long v63 = v6;
  *(_OWORD *)&v60[0].__locale_ = v6;
  long long v61 = v6;
  v50[23] = 10;
  strcpy(v50, "([0-9]{8})");
  int v7 = *((char *)this + 119);
  if (v7 >= 0) {
    long long v8 = (char *)this + 96;
  }
  else {
    long long v8 = (const std::string::value_type *)*((void *)this + 12);
  }
  if (v7 >= 0) {
    std::string::size_type v9 = *((unsigned __int8 *)this + 119);
  }
  else {
    std::string::size_type v9 = *((void *)this + 13);
  }
  uint64_t v10 = std::string::append((std::string *)v50, v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  __str[0].__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str[0].__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v60, (uint64_t)__str, 0);
  if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str[0].__r_.__value_.__l.__data_);
    if ((v50[23] & 0x80000000) == 0) {
      goto LABEL_9;
    }
LABEL_66:
    operator delete(*(void **)v50);
    goto LABEL_9;
  }
  if ((v50[23] & 0x80000000) != 0) {
    goto LABEL_66;
  }
LABEL_9:
  std::string __p = 0;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  support::fs::readDir((const char *)this + 72, (uint64_t)&__p);
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v51 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v53 = 0xAAAAAAAAAAAAAA00;
  long long v55 = v12;
  uint64_t v52 = 0;
  long long v54 = 0uLL;
  LOBYTE(v55) = 0;
  BYTE8(v55) = 0;
  uint64_t v56 = 0;
  memset(v50, 0, sizeof(v50));
  size_t v13 = (std::sub_match<const char *> *)__p;
  std::string::size_type v14 = v58;
  if (__p == v58)
  {
    *a2 = 0;
    *a3 = 0;
    size_t v44 = (std::sub_match<const char *> *)__p;
    if (!__p) {
      goto LABEL_63;
    }
    goto LABEL_68;
  }
  long long v47 = a2;
  unsigned int v15 = 0;
  unsigned int v16 = 0;
  char v17 = 1;
  do
  {
    *(void *)&long long v18 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v70 = v18;
    unint64_t v67 = 0xAAAAAAAAAAAAAA00;
    __str[1].__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    LOBYTE(v70) = 0;
    BYTE8(v70) = 0;
    uint64_t v71 = 0;
    memset(__str, 0, 41);
    second = (const char *)*((unsigned __int8 *)&v13->matched + 7);
    if ((char)second >= 0) {
      first = v13;
    }
    else {
      first = (std::sub_match<const char *> *)v13->first;
    }
    if ((char)second < 0) {
      second = v13->second;
    }
    int v21 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v60, first, (std::sub_match<const char *> *)&second[(void)first], (std::vector<std::csub_match> *)__str, 0);
    char v22 = (const char *)*((unsigned __int8 *)&v13->matched + 7);
    if ((char)v22 >= 0) {
      uint64_t v23 = (uint64_t)v13;
    }
    else {
      uint64_t v23 = (uint64_t)v13->first;
    }
    if ((char)v22 < 0) {
      char v22 = v13->second;
    }
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)v50, v23, (std::sub_match<std::__wrap_iter<const char *>> *)&v22[v23], (uint64_t *)__str, 0);
    if (__str[0].__r_.__value_.__r.__words[0])
    {
      __str[0].__r_.__value_.__l.__size_ = __str[0].__r_.__value_.__r.__words[0];
      operator delete(__str[0].__r_.__value_.__l.__data_);
    }
    if (v21)
    {
      memset(__str, 170, 24);
      int v24 = &v51;
      if (*(void *)&v50[8] != *(void *)v50) {
        int v24 = (long long *)(*(void *)v50 + 16);
      }
      if (!*(unsigned char *)v24)
      {
        memset(__str, 0, 24);
LABEL_50:
        unsigned int v41 = std::stoul(__str, 0, 10);
        if (v17) {
          unsigned int v42 = v41;
        }
        else {
          unsigned int v42 = v16;
        }
        if (v42 >= v41) {
          unsigned int v16 = v41;
        }
        else {
          unsigned int v16 = v42;
        }
        if (v15 < v41) {
          unsigned int v15 = v41 + 1;
        }
        if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str[0].__r_.__value_.__l.__data_);
        }
        char v17 = 0;
        goto LABEL_12;
      }
      char v48 = v17;
      unsigned int v49 = v15;
      unsigned int v25 = v16;
      unint64_t v26 = (uint64_t *)&v50[24];
      if (*(void *)&v50[8] != *(void *)v50) {
        unint64_t v26 = *(uint64_t **)v50;
      }
      uint64_t v27 = *v26;
      timespec v28 = (std::string::value_type **)(*(void *)v50 + 8);
      if (*(void *)&v50[8] == *(void *)v50) {
        timespec v28 = (std::string::value_type **)&v50[32];
      }
      long long v29 = *v28;
      std::string::size_type v30 = (std::string::size_type)&(*v28)[-v27];
      if (v30 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v30 > 0x16)
      {
        uint64_t v38 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v30 | 7) != 0x17) {
          uint64_t v38 = v30 | 7;
        }
        uint64_t v39 = v38 + 1;
        uint64_t v31 = (std::string *)operator new(v38 + 1);
        __str[0].__r_.__value_.__l.__size_ = v30;
        __str[0].__r_.__value_.__r.__words[2] = v39 | 0x8000000000000000;
        __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
        if ((std::string::value_type *)v27 != v29) {
          goto LABEL_36;
        }
      }
      else
      {
        *((unsigned char *)&__str[0].__r_.__value_.__s + 23) = *(unsigned char *)v28 - v27;
        uint64_t v31 = __str;
        if ((std::string::value_type *)v27 != v29)
        {
LABEL_36:
          if (v30 < 0x20 || (unint64_t)v31 - v27 < 0x20)
          {
            uint64_t v32 = v31;
            uint64_t v33 = (std::string::value_type *)v27;
          }
          else
          {
            uint64_t v32 = (std::string *)((char *)v31 + (v30 & 0xFFFFFFFFFFFFFFE0));
            uint64_t v33 = (std::string::value_type *)(v27 + (v30 & 0xFFFFFFFFFFFFFFE0));
            uint64_t v34 = (long long *)(v27 + 16);
            long long v35 = &v31->__r_.__value_.__r.__words[2];
            unint64_t v36 = v30 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v37 = *v34;
              *((_OWORD *)v35 - 1) = *(v34 - 1);
              *(_OWORD *)long long v35 = v37;
              v34 += 2;
              v35 += 4;
              v36 -= 32;
            }
            while (v36);
            if (v30 == (v30 & 0x7FFFFFFFFFFFFFE0)) {
              goto LABEL_49;
            }
          }
          do
          {
            std::string::value_type v40 = *v33++;
            v32->__r_.__value_.__s.__data_[0] = v40;
            uint64_t v32 = (std::string *)((char *)v32 + 1);
          }
          while (v33 != v29);
LABEL_49:
          v32->__r_.__value_.__s.__data_[0] = 0;
          unsigned int v16 = v25;
          char v17 = v48;
          unsigned int v15 = v49;
          goto LABEL_50;
        }
      }
      uint64_t v32 = v31;
      goto LABEL_49;
    }
LABEL_12:
    ++v13;
  }
  while (v13 != v14);
  uint64_t v43 = *(void **)v50;
  *long long v47 = v16;
  *a3 = v15;
  if (v43)
  {
    *(void *)&v50[8] = v43;
    operator delete(v43);
  }
  size_t v44 = (std::sub_match<const char *> *)__p;
  if (!__p)
  {
LABEL_63:
    long long v45 = (std::__shared_weak_count *)v63;
    if (!(void)v63) {
      goto LABEL_77;
    }
LABEL_75:
    if (!atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
    goto LABEL_77;
  }
LABEL_68:
  size_t v46 = (void **)v58;
  if (v58 == v44)
  {
    uint64_t v58 = v44;
    operator delete(v44);
    long long v45 = (std::__shared_weak_count *)v63;
    if (!(void)v63) {
      goto LABEL_77;
    }
    goto LABEL_75;
  }
  do
  {
    if (*((char *)v46 - 1) < 0) {
      operator delete(*(v46 - 3));
    }
    v46 -= 3;
  }
  while (v46 != (void **)v44);
  uint64_t v58 = v44;
  operator delete(__p);
  long long v45 = (std::__shared_weak_count *)v63;
  if ((void)v63) {
    goto LABEL_75;
  }
LABEL_77:
  std::locale::~locale(v60);
}

void sub_1C5B89B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,std::locale a36)
{
}

void CircularFileLogWriter::openNewLog_sync(CircularFileLogWriter *this)
{
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 0;
    int v4 = (char *)this + 160;
    size_t v5 = (char *)this + 160;
    if ((*((char *)this + 183) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_31;
  }
  std::ostream::flush();
  uint64_t v2 = (void *)*((void *)this + 5);
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), *(_DWORD *)((char *)v2 + *(void *)(*v2 - 24) + 32) | 4);
  }
  uint64_t v3 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (char *)this + 160;
  size_t v5 = (char *)this + 160;
  if (*((char *)this + 183) < 0) {
LABEL_31:
  }
    size_t v5 = *(const char **)v4;
LABEL_7:
  unlink(v5);
  uint64_t v6 = *((unsigned int *)this + 38);
  *((_DWORD *)this + 38) = v6 + 1;
  CircularFileLogWriter::generateFileName_sync(this, v6, &v20);
  int v7 = *((char *)this + 95);
  if (v7 >= 0) {
    long long v8 = (char *)this + 72;
  }
  else {
    long long v8 = (const std::string::value_type *)*((void *)this + 9);
  }
  if (v7 >= 0) {
    std::string::size_type v9 = *((unsigned __int8 *)this + 95);
  }
  else {
    std::string::size_type v9 = *((void *)this + 10);
  }
  uint64_t v10 = std::string::insert(&v20, 0, v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  std::string::size_type v22 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  long long v12 = operator new(0x238uLL);
  uint64_t v13 = MEMORY[0x1E4FBA468] + 64;
  v12[52] = MEMORY[0x1E4FBA468] + 64;
  uint64_t v14 = *(void *)(MEMORY[0x1E4FBA400] + 16);
  uint64_t v15 = *(void *)(MEMORY[0x1E4FBA400] + 8);
  *long long v12 = v15;
  *(void *)((char *)v12 + *(void *)(v15 - 24)) = v14;
  unsigned int v16 = (std::ios_base *)((char *)v12 + *(void *)(*v12 - 24));
  std::ios_base::init(v16, v12 + 1);
  uint64_t v17 = MEMORY[0x1E4FBA468] + 24;
  v16[1].__vftable = 0;
  v16[1].__fmtflags_ = -1;
  *long long v12 = v17;
  v12[52] = v13;
  MEMORY[0x1C8794EB0](v12 + 1);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)), *(_DWORD *)((char *)v12 + *(void *)(*v12 - 24) + 32) | 4);
  }
  uint64_t v18 = *((void *)this + 5);
  *((void *)this + 5) = v12;
  if (v18)
  {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    long long v12 = (void *)*((void *)this + 5);
  }
  if (v12[16])
  {
    support::fs::getFileName(&v20);
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v19 = &v20;
    }
    else {
      std::string::size_type v19 = (std::string *)v20.__r_.__value_.__r.__words[0];
    }
    if (*((char *)this + 183) < 0) {
      int v4 = *(const char **)v4;
    }
    symlink((const char *)v19, v4);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
  }
  CircularFileLogWriter::clearOldLogs_sync(this);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C5B89F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void CircularFileLogWriter::close(CircularFileLogWriter *this)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN21CircularFileLogWriter5closeEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_4_0;
  v3[4] = this;
  int v4 = v3;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_21_0;
  block[4] = (char *)this + 8;
  void block[5] = &v4;
  uint64_t v2 = (char *)this + 24;
  uint64_t v1 = *((void *)this + 3);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

uint64_t ___ZN21CircularFileLogWriter5closeEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(void *)(v1 + 152) = 0;
  uint64_t result = *(void *)(v1 + 40);
  if (!result)
  {
    *(void *)(v1 + 40) = 0;
    return result;
  }
  std::ostream::flush();
  uint64_t v3 = *(void **)(v1 + 40);
  if (std::filebuf::close())
  {
    uint64_t result = *(void *)(v1 + 40);
    *(void *)(v1 + 40) = 0;
    if (!result) {
      return result;
    }
  }
  else
  {
    std::ios_base::clear((std::ios_base *)((char *)v3 + *(void *)(*v3 - 24)), *(_DWORD *)((char *)v3 + *(void *)(*v3 - 24) + 32) | 4);
    uint64_t result = *(void *)(v1 + 40);
    *(void *)(v1 + 40) = 0;
    if (!result) {
      return result;
    }
  }
  int v4 = *(uint64_t (**)(void))(*(void *)result + 8);

  return v4();
}

void CircularFileLogWriter::clear(CircularFileLogWriter *this)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN21CircularFileLogWriter5clearEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_5_5;
  v3[4] = this;
  int v4 = v3;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_21_0;
  block[4] = (char *)this + 8;
  void block[5] = &v4;
  uint64_t v2 = (char *)this + 24;
  uint64_t v1 = *((void *)this + 3);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

uint64_t ___ZN21CircularFileLogWriter5clearEv_block_invoke(uint64_t a1)
{
  return CircularFileLogWriter::clear_sync(*(CircularFileLogWriter **)(a1 + 32));
}

uint64_t CircularFileLogWriter::clear_sync(CircularFileLogWriter *this)
{
  *((void *)this + 19) = 0;
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 0;
    goto LABEL_8;
  }
  std::ostream::flush();
  uint64_t v2 = (void *)*((void *)this + 5);
  if (!std::filebuf::close())
  {
    std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), *(_DWORD *)((char *)v2 + *(void *)(*v2 - 24) + 32) | 4);
    uint64_t v3 = *((void *)this + 5);
    *((void *)this + 5) = 0;
    if (!v3) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v3 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
LABEL_7:
  }
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
LABEL_8:
  int v4 = (const char **)((char *)this + 160);
  if (*((char *)this + 183) < 0)
  {
    unlink(*v4);
    size_t v5 = (char *)this + 72;
  }
  else
  {
    unlink((const char *)v4);
    size_t v5 = (char *)this + 72;
  }
  return support::fs::removeDir(v5);
}

void CircularFileLogWriter::write(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN21CircularFileLogWriter5writeENSt3__110shared_ptrIN3ctu10LogMessageEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_6_10;
  uint64_t v5 = *a2;
  int v4 = (std::__shared_weak_count *)a2[1];
  v7[4] = a1;
  v7[5] = v5;
  long long v8 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::SharedSynchronizable<CircularFileLogWriter>::execute_wrapped(v3, (uint64_t)v7);
  uint64_t v6 = v8;
  if (v8)
  {
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void ___ZN21CircularFileLogWriter5writeENSt3__110shared_ptrIN3ctu10LogMessageEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  v4[0] = a1[5];
  v4[1] = (uint64_t)v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CircularFileLogWriter::write_sync(v2, v4);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_1C5B8A48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t CircularFileLogWriter::write_sync(uint64_t result, uint64_t *a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (!*a2) {
    return result;
  }
  uint64_t v3 = (CircularFileLogWriter *)result;
  uint64_t v4 = *(void *)(result + 40);
  if (!v4 || !*(void *)(v4 + 128)) {
    return result;
  }
  if (*(char *)(v2 + 71) < 0)
  {
    unint64_t v6 = *(void *)(v2 + 56) + 1;
    if (v6 < 2) {
      return result;
    }
  }
  else
  {
    unint64_t v6 = *(unsigned __int8 *)(v2 + 71) + 1;
    if (v6 < 2) {
      return result;
    }
  }
  unint64_t v43 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v42[7] = v7;
  v42[8] = v7;
  v42[5] = v7;
  v42[6] = v7;
  v42[3] = v7;
  v42[4] = v7;
  v42[1] = v7;
  v42[2] = v7;
  long long v41 = v7;
  v42[0] = v7;
  *(_OWORD *)std::string __p = v7;
  long long v40 = v7;
  long long v37 = v7;
  long long v38 = v7;
  long long v35 = v7;
  long long v36 = v7;
  long long v34 = v7;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v34);
  uint64_t v8 = v35;
  *(_DWORD *)((char *)&v35 + *(void *)(v35 - 24) + 8) |= 4u;
  *(void *)((char *)&v35 + *(void *)(v8 - 24) + 16) = 3;
  std::string::size_type v9 = (void *)std::ostream::operator<<();
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" [", 2);
  LOBYTE(__dst.__locale_) = ctu::asChar();
  long long v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&__dst, 1);
  long long v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"] ", 2);
  int v13 = *(char *)(*a2 + 47);
  if (v13 >= 0) {
    uint64_t v14 = *a2 + 24;
  }
  else {
    uint64_t v14 = *(void *)(*a2 + 24);
  }
  if (v13 >= 0) {
    uint64_t v15 = *(unsigned __int8 *)(*a2 + 47);
  }
  else {
    uint64_t v15 = *(void *)(*a2 + 32);
  }
  unsigned int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
  uint64_t v17 = (char *)&v35 + *(void *)(v35 - 24);
  if ((v17[32] & 5) != 0)
  {
    unint64_t v18 = v6 - 1;
    unint64_t v19 = *((void *)v3 + 16);
    if (v6 - 1 > v19) {
      goto LABEL_52;
    }
LABEL_18:
    uint64_t v20 = *((void *)v3 + 5) + *(void *)(**((void **)v3 + 5) - 24);
    if ((*(unsigned char *)(v20 + 32) & 5) != 0)
    {
      if (v18 - 1 <= v19)
      {
LABEL_23:
        if (*(char *)(*a2 + 71) < 0)
        {
          if (*(void *)(*a2 + 56)) {
            goto LABEL_27;
          }
        }
        else if (*(unsigned char *)(*a2 + 71))
        {
LABEL_27:
          int v21 = (void *)*((void *)v3 + 5);
          char v22 = BYTE8(v41);
          if ((BYTE8(v41) & 0x10) == 0)
          {
LABEL_28:
            if ((v22 & 8) == 0)
            {
              size_t v23 = 0;
              HIBYTE(v46) = 0;
              p_dst = (std::locale::__imp *)&__dst;
              goto LABEL_43;
            }
            unint64_t v26 = (const void **)&v36 + 1;
            uint64_t v25 = *((void *)&v37 + 1);
LABEL_35:
            uint64_t v27 = *v26;
            size_t v23 = v25 - (void)*v26;
            if (v23 >= 0x7FFFFFFFFFFFFFF8) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            if (v23 >= 0x17)
            {
              uint64_t v28 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v23 | 7) != 0x17) {
                uint64_t v28 = v23 | 7;
              }
              uint64_t v29 = v28 + 1;
              p_dst = (std::locale::__imp *)operator new(v28 + 1);
              size_t v45 = v23;
              int64_t v46 = v29 | 0x8000000000000000;
              __dst.__locale_ = p_dst;
            }
            else
            {
              HIBYTE(v46) = v25 - *(unsigned char *)v26;
              p_dst = (std::locale::__imp *)&__dst;
              if (!v23) {
                goto LABEL_43;
              }
            }
            memmove(p_dst, v27, v23);
LABEL_43:
            *((unsigned char *)p_dst + v23) = 0;
            if (v46 >= 0) {
              locale = (std::locale::__imp *)&__dst;
            }
            else {
              locale = __dst.__locale_;
            }
            if (v46 >= 0) {
              uint64_t v31 = HIBYTE(v46);
            }
            else {
              uint64_t v31 = v45;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)locale, v31);
            if (SHIBYTE(v46) < 0) {
              operator delete(__dst.__locale_);
            }
            std::ostream::write();
            std::ios_base::getloc((const std::ios_base *)(*((void *)v3 + 5) + *(void *)(**((void **)v3 + 5) - 24)));
            uint64_t v32 = std::locale::use_facet(&__dst, MEMORY[0x1E4FBA258]);
            ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
            std::locale::~locale(&__dst);
            std::ostream::put();
            std::ostream::flush();
            goto LABEL_52;
          }
LABEL_31:
          uint64_t v25 = v41;
          if ((unint64_t)v41 < *((void *)&v38 + 1))
          {
            *(void *)&long long v41 = *((void *)&v38 + 1);
            uint64_t v25 = *((void *)&v38 + 1);
          }
          unint64_t v26 = (const void **)&v38;
          goto LABEL_35;
        }
        int v21 = (void *)*((void *)v3 + 5);
        char v22 = BYTE8(v41);
        if ((BYTE8(v41) & 0x10) == 0) {
          goto LABEL_28;
        }
        goto LABEL_31;
      }
    }
    else
    {
      (*(void (**)(std::locale *__return_ptr))(**(void **)(v20 + 40) + 32))(&__dst);
      if (v47 + v18 <= *((void *)v3 + 16)) {
        goto LABEL_23;
      }
    }
    CircularFileLogWriter::openNewLog_sync(v3);
    goto LABEL_23;
  }
  (*(void (**)(std::locale *__return_ptr))(**((void **)v17 + 5) + 32))(&__dst);
  unint64_t v18 = v47 + v6;
  unint64_t v19 = *((void *)v3 + 16);
  if (v47 + v6 <= v19) {
    goto LABEL_18;
  }
LABEL_52:
  *(void *)&long long v34 = *MEMORY[0x1E4FBA408];
  uint64_t v33 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)&v34 + *(void *)(v34 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(void *)&long long v35 = v33;
  *((void *)&v35 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v40) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C8795140](v42);
}

void sub_1C5B8AABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C5B8AAD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C5B8AAE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C5B8AAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v9 - 217) < 0)
  {
    operator delete(*(void **)(v9 - 240));
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c44_ZTSNSt3__110shared_ptrIN3ctu10LogMessageEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c44_ZTSNSt3__110shared_ptrIN3ctu10LogMessageEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void CircularFileLogWriter::write(CircularFileLogWriter *this, const char *a2, uint64_t a3)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  void v5[2] = ___ZN21CircularFileLogWriter5writeEPKcm_block_invoke;
  v5[3] = &__block_descriptor_tmp_7_0;
  v5[4] = this;
  void v5[5] = a2;
  v5[6] = a3;
  unint64_t v6 = v5;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_21_0;
  block[4] = (char *)this + 8;
  void block[5] = &v6;
  uint64_t v4 = (char *)this + 24;
  uint64_t v3 = *((void *)this + 3);
  if (*((void *)v4 + 1)) {
    dispatch_async_and_wait(v3, block);
  }
  else {
    dispatch_sync(v3, block);
  }
}

uint64_t ___ZN21CircularFileLogWriter5writeEPKcm_block_invoke(uint64_t a1)
{
  return CircularFileLogWriter::write_sync(*(void *)(a1 + 32), *(const char **)(a1 + 40), *(void *)(a1 + 48));
}

uint64_t CircularFileLogWriter::write_sync(uint64_t this, const char *a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v3 = a3;
    if (a3)
    {
      uint64_t v4 = (CircularFileLogWriter *)this;
      uint64_t v5 = *(void **)(this + 40);
      if (v5)
      {
        if (v5[16])
        {
          unint64_t v6 = a2;
          if (*(unsigned char *)(this + 136))
          {
            while (1)
            {
              uint64_t v9 = (char *)v5 + *(void *)(*v5 - 24);
              if ((v9[32] & 5) != 0)
              {
                unint64_t v10 = *((void *)v4 + 16);
                if (v3 - 1 <= v10) {
                  goto LABEL_20;
                }
              }
              else
              {
                (*(void (**)(void *__return_ptr))(**((void **)v9 + 5) + 32))(v13);
                unint64_t v10 = *((void *)v4 + 16);
                if (v14 + v3 <= v10) {
                  goto LABEL_20;
                }
              }
              uint64_t v11 = *((void *)v4 + 5) + *(void *)(**((void **)v4 + 5) - 24);
              if ((*(unsigned char *)(v11 + 32) & 5) != 0) {
                break;
              }
              (*(void (**)(void *__return_ptr))(**(void **)(v11 + 40) + 32))(v13);
              uint64_t v7 = v14;
              if (v10 != v14) {
                goto LABEL_8;
              }
LABEL_9:
              CircularFileLogWriter::openNewLog_sync(v4);
              uint64_t v5 = (void *)*((void *)v4 + 5);
            }
            uint64_t v7 = -1;
LABEL_8:
            unint64_t v8 = v10 - v7;
            std::ostream::write();
            v6 += v8;
            v3 -= v8;
            goto LABEL_9;
          }
          long long v12 = (char *)v5 + *(void *)(*v5 - 24);
          if ((v12[32] & 5) != 0)
          {
            if ((unint64_t)(a3 - 1) <= *(void *)(this + 128)) {
              goto LABEL_20;
            }
          }
          else
          {
            (*(void (**)(void *__return_ptr))(**((void **)v12 + 5) + 32))(v13);
            if ((unint64_t)(v14 + v3) <= *((void *)v4 + 16))
            {
LABEL_20:
              this = *((void *)v4 + 5);
              if (this) {
                return std::ostream::write();
              }
              return this;
            }
          }
          CircularFileLogWriter::openNewLog_sync(v4);
          goto LABEL_20;
        }
      }
    }
  }
  return this;
}

void CircularFileLogWriter::setCapacity(CircularFileLogWriter *this, uint64_t a2)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 0x40000000;
  v2[2] = ___ZN21CircularFileLogWriter11setCapacityEm_block_invoke;
  v2[3] = &__block_descriptor_tmp_8;
  v2[4] = this;
  void v2[5] = a2;
  ctu::SharedSynchronizable<CircularFileLogWriter>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v2);
}

void ___ZN21CircularFileLogWriter11setCapacityEm_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(CircularFileLogWriter **)(a1 + 32);
  unint64_t v2 = *(void *)(a1 + 40);
  *((void *)v1 + 15) = v2;
  *((void *)v1 + 18) = v2 / *((void *)v1 + 16);
  CircularFileLogWriter::clearOldLogs_sync(v1);
}

void CircularFileLogWriter::clearOldLogs_sync(CircularFileLogWriter *this)
{
  unsigned int v1 = *((_DWORD *)this + 39);
  if (*((void *)this + 18) < (unint64_t)(*((_DWORD *)this + 38) - v1))
  {
    uint64_t v3 = (char *)this + 72;
    do
    {
      *((_DWORD *)this + 39) = v1 + 1;
      CircularFileLogWriter::generateFileName_sync(this, v1, &v12);
      int v4 = *((char *)this + 95);
      if (v4 >= 0) {
        uint64_t v5 = v3;
      }
      else {
        uint64_t v5 = (const std::string::value_type *)*((void *)this + 9);
      }
      if (v4 >= 0) {
        std::string::size_type v6 = *((unsigned __int8 *)this + 95);
      }
      else {
        std::string::size_type v6 = *((void *)this + 10);
      }
      uint64_t v7 = std::string::insert(&v12, 0, v5, v6);
      std::string v13 = *v7;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v12.__r_.__value_.__l.__data_);
      }
      int v9 = SHIBYTE(v13.__r_.__value_.__r.__words[2]);
      unint64_t v10 = (void *)v13.__r_.__value_.__r.__words[0];
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v11 = (const std::__fs::filesystem::path *)&v13;
      }
      else {
        uint64_t v11 = (const std::__fs::filesystem::path *)v13.__r_.__value_.__r.__words[0];
      }
      if (remove(v11, v8)) {
        unlink((const char *)v11);
      }
      if (v9 < 0) {
        operator delete(v10);
      }
      unsigned int v1 = *((_DWORD *)this + 39);
    }
    while (*((void *)this + 18) < (unint64_t)(*((_DWORD *)this + 38) - v1));
  }
}

void sub_1C5B8B0E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CircularFileLogWriter::closeRunningLog_sync(CircularFileLogWriter *this)
{
  uint64_t result = *((void *)this + 5);
  if (!result)
  {
    *((void *)this + 5) = 0;
    return result;
  }
  std::ostream::flush();
  uint64_t v3 = (void *)*((void *)this + 5);
  if (std::filebuf::close())
  {
    uint64_t result = *((void *)this + 5);
    *((void *)this + 5) = 0;
    if (!result) {
      return result;
    }
  }
  else
  {
    std::ios_base::clear((std::ios_base *)((char *)v3 + *(void *)(*v3 - 24)), *(_DWORD *)((char *)v3 + *(void *)(*v3 - 24) + 32) | 4);
    uint64_t result = *((void *)this + 5);
    *((void *)this + 5) = 0;
    if (!result) {
      return result;
    }
  }
  int v4 = *(uint64_t (**)(void))(*(void *)result + 8);

  return v4();
}

void CircularFileLogWriter::generateFileName_sync(CircularFileLogWriter *this@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v27 = v5;
  long long v28 = v5;
  *(_OWORD *)std::string __s = v5;
  long long v26 = v5;
  sprintf(__s, "%08zu", a2);
  int v6 = *((char *)this + 71);
  if (v6 >= 0) {
    size_t v7 = *((unsigned __int8 *)this + 71);
  }
  else {
    size_t v7 = *((void *)this + 7);
  }
  unint64_t v8 = v7 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v7 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v8 >= 0x17)
  {
    uint64_t v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v10 = v8 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v7 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v7 + 1;
    if (!v7) {
      goto LABEL_15;
    }
  }
  if (v6 >= 0) {
    std::string v12 = (char *)this + 48;
  }
  else {
    std::string v12 = (char *)*((void *)this + 6);
  }
  memmove(p_dst, v12, v7);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v7) = 46;
  size_t v13 = strlen(__s);
  uint64_t v14 = std::string::append(&__dst, __s, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  unint64_t v18 = (const std::string::value_type *)*((void *)this + 12);
  uint64_t v17 = (char *)this + 96;
  unsigned int v16 = v18;
  int v19 = v17[23];
  if (v19 >= 0) {
    uint64_t v20 = v17;
  }
  else {
    uint64_t v20 = v16;
  }
  if (v19 >= 0) {
    std::string::size_type v21 = v17[23];
  }
  else {
    std::string::size_type v21 = *((void *)v17 + 1);
  }
  char v22 = std::string::append(&v24, v20, v21);
  *a3 = *v22;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_25:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_25;
  }
}

void sub_1C5B8B3B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void CircularFileLogWriter::~CircularFileLogWriter(void **this)
{
  CircularFileLogWriter::~CircularFileLogWriter(this);

  operator delete(v1);
}

{
  void *v2;
  NSObject *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;

  *this = &unk_1F2110620;
  if (*((char *)this + 183) < 0)
  {
    operator delete(this[20]);
    if ((*((char *)this + 119) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 95) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((*((char *)this + 119) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[12]);
  if ((*((char *)this + 95) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*((char *)this + 71) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(this[9]);
  if ((*((char *)this + 71) & 0x80000000) == 0)
  {
LABEL_5:
    unint64_t v2 = this[5];
    this[5] = 0;
    if (!v2) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_17:
  operator delete(this[6]);
  unint64_t v2 = this[5];
  this[5] = 0;
  if (v2) {
LABEL_6:
  }
    (*(void (**)(void *))(*(void *)v2 + 8))(v2);
LABEL_7:
  uint64_t v3 = this[4];
  if (v3) {
    dispatch_release(v3);
  }
  int v4 = this[3];
  if (v4) {
    dispatch_release(v4);
  }
  long long v5 = (std::__shared_weak_count *)this[2];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void std::__shared_ptr_pointer<CircularFileLogWriter *,std::shared_ptr<CircularFileLogWriter> ctu::SharedSynchronizable<CircularFileLogWriter>::make_shared_ptr<CircularFileLogWriter>(CircularFileLogWriter*)::{lambda(CircularFileLogWriter *)#1},std::allocator<CircularFileLogWriter>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<CircularFileLogWriter *,std::shared_ptr<CircularFileLogWriter> ctu::SharedSynchronizable<CircularFileLogWriter>::make_shared_ptr<CircularFileLogWriter>(CircularFileLogWriter*)::{lambda(CircularFileLogWriter *)#1},std::allocator<CircularFileLogWriter>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<CircularFileLogWriter *,std::shared_ptr<CircularFileLogWriter> ctu::SharedSynchronizable<CircularFileLogWriter>::make_shared_ptr<CircularFileLogWriter>(CircularFileLogWriter*)::{lambda(CircularFileLogWriter *)#1},std::allocator<CircularFileLogWriter>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI21CircularFileLogWriterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI21CircularFileLogWriterE15make_shared_ptrIS1_EENSt3__110sha"
                                "red_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI21CircularFileLogWriterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI21CircularFileLogWriterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<CircularFileLogWriter> ctu::SharedSynchronizable<CircularFileLogWriter>::make_shared_ptr<CircularFileLogWriter>(CircularFileLogWriter*)::{lambda(CircularFileLogWriter*)#1}::operator() const(CircularFileLogWriter*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void ctu::SharedSynchronizable<CircularFileLogWriter>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v7 = v6;
  unint64_t v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F2110758;
  void block[5] = v5;
  std::string v12 = v7;
  p_std::string::size_type shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c50_ZTSNSt3__110shared_ptrIK21CircularFileLogWriterEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c50_ZTSNSt3__110shared_ptrIK21CircularFileLogWriterEE(uint64_t a1)
{
  unsigned int v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

PowerStats *PowerStats::create@<X0>(PowerStats **a1@<X8>)
{
  unint64_t v3 = (PowerStats *)operator new(0x88uLL);
  PowerStats::PowerStats(v3);
  *a1 = v3;
  uint64_t result = (PowerStats *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F2110798;
  *((void *)result + 1) = 0;
  *((void *)result + 2) = 0;
  *((void *)result + 3) = v3;
  a1[1] = result;
  return result;
}

void sub_1C5B8B87C(_Unwind_Exception *a1)
{
  PowerStats::~PowerStats(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_1C5B8B894(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void PowerStats::PowerStats(PowerStats *this)
{
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v7, "com.apple.telephony.abm", "power.stats");
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger(this, (const ctu::OsLogLogger *)v8);
  MEMORY[0x1C8794100](v8);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v7);
  *(_OWORD *)((char *)this + 120) = 0u;
  *((void *)this + 6) = 0;
  *((void *)this + 5) = (char *)this + 48;
  *(void *)((char *)this + 92) = 0x200000001;
  *((_DWORD *)this + 25) = -536870144;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 40, 0);
  *((void *)this + 5) = (char *)this + 48;
  *((void *)this + 7) = 0;
  *((void *)this + 6) = 0;
  char v6 = 11;
  strcpy((char *)__p, "power.stats");
  AppleBasebandManager::create();
  long long v2 = v7;
  long long v7 = 0uLL;
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 16);
  *(_OWORD *)((char *)this + 120) = v2;
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  int v4 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C5B8BA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)&a9);
  if (a15 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v17);
  dispatch::callback<void({block_pointer})(xpc::dict)>::~callback(v18);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v16, *(void **)(v15 + 48));
  MEMORY[0x1C8794100](v15);
  _Unwind_Resume(a1);
}

const char *PowerStats::getName(PowerStats *this)
{
  return "power.stats";
}

void PowerStats::clear(PowerStats *this)
{
  long long v2 = (void *)((char *)this + 48);
  unsigned int v1 = (void *)*((void *)this + 6);
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  *((void *)this + 3) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 40, v1);
  *(v2 - 1) = v2;
  *long long v2 = 0;
  v2[1] = 0;
}

void PowerStats::~PowerStats(PowerStats *this)
{
  long long v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  unint64_t v3 = *((void *)this + 14);
  if (v3) {
    dispatch_release(v3);
  }
  int v4 = (const void *)*((void *)this + 13);
  if (v4) {
    _Block_release(v4);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 40, *((void **)this + 6));

  JUMPOUT(0x1C8794100);
}

void PowerStats::gotAssertion(uint64_t a1, uint64_t a2, int a3)
{
  *(unsigned char *)(a1 + 88) = 1;
  int v4 = *(_DWORD *)(a1 + 96);
  if (v4 == 1)
  {
    ++*(_DWORD *)(a1 + 16);
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v6 = *(std::string *)a2;
    }
    uint64_t v5 = &v6;
    PowerStats::submitLowPowerEventMetric_sync(a1, 0, 1u, (const char *)&v6);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_18;
    }
  }
  else if (!v4)
  {
    if (a3 == 1)
    {
      ++*(_DWORD *)(a1 + 12);
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v8 = *(std::string *)a2;
      }
      uint64_t v5 = &v8;
      PowerStats::submitLowPowerEventMetric_sync(a1, 2u, 0, (const char *)&v8);
      if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
LABEL_18:
      }
        operator delete(v5->__r_.__value_.__l.__data_);
    }
    else
    {
      ++*(_DWORD *)(a1 + 8);
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v7 = *(std::string *)a2;
      }
      uint64_t v5 = &v7;
      PowerStats::submitLowPowerEventMetric_sync(a1, 0, 0, (const char *)&v7);
      if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_18;
      }
    }
  }
}

void PowerStats::submitLowPowerEventMetric_sync(uint64_t a1, unsigned int a2, unsigned int a3, const char *a4)
{
  std::string v8 = *(NSObject **)a1;
  if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v30[0]) = 0;
    _os_log_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_DEFAULT, "#I Submitting AWD of low power event stats", (uint8_t *)v30, 2u);
  }
  xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
  uint64_t v10 = MEMORY[0x1E4F14590];
  if (v9 || (xpc_object_t v9 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v9) == v10)
    {
      xpc_retain(v9);
      xpc_object_t v11 = v9;
    }
    else
    {
      xpc_object_t v11 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    xpc_object_t v9 = 0;
  }
  xpc_release(v9);
  xpc_object_t v12 = xpc_dictionary_create(0, 0, 0);
  if (v12 || (xpc_object_t v12 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v12) == v10)
    {
      xpc_retain(v12);
      xpc_object_t v13 = v12;
    }
    else
    {
      xpc_object_t v13 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v13 = xpc_null_create();
    xpc_object_t v12 = 0;
  }
  xpc_release(v12);
  xpc_object_t v14 = xpc_int64_create(a2);
  if (!v14) {
    xpc_object_t v14 = xpc_null_create();
  }
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E4F4C668], v14);
  xpc_object_t v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  xpc_object_t v16 = xpc_int64_create(a3);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E4F4C678], v16);
  xpc_object_t v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  if (a4[23] < 0) {
    a4 = *(const char **)a4;
  }
  xpc_object_t v18 = xpc_string_create(a4);
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E4F4C3C0], v18);
  xpc_object_t v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  xpc_object_t v20 = xpc_string_create((const char *)*MEMORY[0x1E4F4D2D0]);
  if (!v20) {
    xpc_object_t v20 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E4F4C190], v20);
  xpc_object_t v21 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v21);
  xpc_object_t v22 = xpc_int64_create(524464);
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E4F4C258], v22);
  xpc_object_t v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  if (v13)
  {
    xpc_retain(v13);
    xpc_object_t v24 = v13;
  }
  else
  {
    xpc_object_t v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E4F4C188], v24);
  xpc_object_t v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  if (*(void *)(a1 + 104) && *(void *)(a1 + 112))
  {
    if (v11)
    {
      xpc_retain(v11);
      xpc_object_t v26 = v11;
      long long v27 = *(const void **)(a1 + 104);
      if (v27)
      {
LABEL_34:
        long long v28 = _Block_copy(v27);
        goto LABEL_37;
      }
    }
    else
    {
      xpc_object_t v26 = xpc_null_create();
      long long v27 = *(const void **)(a1 + 104);
      if (v27) {
        goto LABEL_34;
      }
    }
    long long v28 = 0;
LABEL_37:
    uint64_t v29 = *(NSObject **)(a1 + 112);
    v30[0] = MEMORY[0x1E4F143A8];
    v30[1] = 1174405120;
    v30[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc4dictEEEclIJS2_EEEvDpT__block_invoke_0;
    v30[3] = &__block_descriptor_tmp_41;
    if (v28)
    {
      long long aBlock = _Block_copy(v28);
      xpc_object_t object = v26;
      if (v26)
      {
LABEL_39:
        xpc_retain(v26);
LABEL_42:
        dispatch_async(v29, v30);
        xpc_release(object);
        xpc_object_t object = 0;
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v28) {
          _Block_release(v28);
        }
        xpc_release(v26);
        goto LABEL_47;
      }
    }
    else
    {
      long long aBlock = 0;
      xpc_object_t object = v26;
      if (v26) {
        goto LABEL_39;
      }
    }
    xpc_object_t object = xpc_null_create();
    goto LABEL_42;
  }
LABEL_47:
  xpc_release(v13);
  xpc_release(v11);
}

uint64_t PowerStats::noPendingAssertion(uint64_t this)
{
  *(unsigned char *)(this + 88) = 0;
  return this;
}

void PowerStats::reportSystemStateChange(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  *(_DWORD *)(a1 + 100) = *((_DWORD *)a3 + 2);
  *(void *)(a1 + 92) = v4;
  int v5 = *((_DWORD *)a3 + 2);
  if (v5 != -536870112)
  {
    if (v5 != -536870272) {
      return;
    }
    if (*((_DWORD *)a3 + 1) == 1)
    {
      if (*(unsigned char *)(a1 + 88))
      {
        std::string v6 = *(NSObject **)a1;
        if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#I Forced sleep while power assertion(s) held ", buf, 2u);
        }
        ++*(_DWORD *)(a1 + 20);
        char v16 = 0;
        LOBYTE(__p) = 0;
        PowerStats::submitLowPowerEventMetric_sync(a1, 1u, 1u, (const char *)&__p);
        if (v16 < 0) {
          operator delete(__p);
        }
      }
      ++*(_DWORD *)(a1 + 28);
      uint64_t SystemTime = TelephonyUtilGetSystemTime();
      *(void *)(a1 + 72) = SystemTime;
      uint64_t v8 = *(void *)(a1 + 64);
      if (!v8) {
        return;
      }
    }
    else
    {
      ++*(_DWORD *)(a1 + 32);
      uint64_t SystemTime = TelephonyUtilGetSystemTime();
      *(void *)(a1 + 72) = SystemTime;
      uint64_t v8 = *(void *)(a1 + 64);
      if (!v8) {
        return;
      }
    }
    *(_DWORD *)(a1 + 80) = ((int)SystemTime - (int)v8) / 0x3E8u;
    return;
  }
  ++*(_DWORD *)(a1 + 24);
  uint64_t v10 = TelephonyUtilGetSystemTime();
  *(void *)(a1 + 64) = v10;
  uint64_t v11 = *(void *)(a1 + 72);
  if (v11)
  {
    unsigned int v12 = ((int)v10 - (int)v11) / 0x3E8u;
    *(_DWORD *)(a1 + 84) = v12;
  }
  else
  {
    unsigned int v12 = *(_DWORD *)(a1 + 84);
  }
  unsigned int v13 = *(_DWORD *)(a2 + 4) == 1;
  unsigned int v14 = *(_DWORD *)(a1 + 80);

  PowerStats::submitWakeInfoMetric_sync(a1, v13, v12, v14);
}

void PowerStats::submitWakeInfoMetric_sync(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v8 = *(NSObject **)a1;
  if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v30[0]) = 0;
    _os_log_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_DEFAULT, "#I Submitting AWD of wake info", (uint8_t *)v30, 2u);
  }
  xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
  uint64_t v10 = MEMORY[0x1E4F14590];
  if (v9 || (xpc_object_t v9 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v9) == v10)
    {
      xpc_retain(v9);
      xpc_object_t v11 = v9;
    }
    else
    {
      xpc_object_t v11 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    xpc_object_t v9 = 0;
  }
  xpc_release(v9);
  xpc_object_t v12 = xpc_dictionary_create(0, 0, 0);
  if (v12 || (xpc_object_t v12 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v12) == v10)
    {
      xpc_retain(v12);
      xpc_object_t v13 = v12;
    }
    else
    {
      xpc_object_t v13 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v13 = xpc_null_create();
    xpc_object_t v12 = 0;
  }
  xpc_release(v12);
  xpc_object_t v14 = xpc_int64_create(a2);
  if (!v14) {
    xpc_object_t v14 = xpc_null_create();
  }
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E4F4CB28], v14);
  xpc_object_t v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  xpc_object_t v16 = xpc_int64_create(a3);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E4F4CF00], v16);
  xpc_object_t v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  xpc_object_t v18 = xpc_int64_create(a4);
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E4F4CE00], v18);
  xpc_object_t v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  xpc_object_t v20 = xpc_string_create((const char *)*MEMORY[0x1E4F4D2D0]);
  if (!v20) {
    xpc_object_t v20 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E4F4C190], v20);
  xpc_object_t v21 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v21);
  xpc_object_t v22 = xpc_int64_create(524465);
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E4F4C258], v22);
  xpc_object_t v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  if (v13)
  {
    xpc_retain(v13);
    xpc_object_t v24 = v13;
  }
  else
  {
    xpc_object_t v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E4F4C188], v24);
  xpc_object_t v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  if (*(void *)(a1 + 104) && *(void *)(a1 + 112))
  {
    if (v11)
    {
      xpc_retain(v11);
      xpc_object_t v26 = v11;
      long long v27 = *(const void **)(a1 + 104);
      if (v27)
      {
LABEL_32:
        long long v28 = _Block_copy(v27);
        goto LABEL_35;
      }
    }
    else
    {
      xpc_object_t v26 = xpc_null_create();
      long long v27 = *(const void **)(a1 + 104);
      if (v27) {
        goto LABEL_32;
      }
    }
    long long v28 = 0;
LABEL_35:
    uint64_t v29 = *(NSObject **)(a1 + 112);
    v30[0] = MEMORY[0x1E4F143A8];
    v30[1] = 1174405120;
    v30[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc4dictEEEclIJS2_EEEvDpT__block_invoke_0;
    v30[3] = &__block_descriptor_tmp_41;
    if (v28)
    {
      long long aBlock = _Block_copy(v28);
      xpc_object_t object = v26;
      if (v26)
      {
LABEL_37:
        xpc_retain(v26);
LABEL_40:
        dispatch_async(v29, v30);
        xpc_release(object);
        xpc_object_t object = 0;
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v28) {
          _Block_release(v28);
        }
        xpc_release(v26);
        goto LABEL_45;
      }
    }
    else
    {
      long long aBlock = 0;
      xpc_object_t object = v26;
      if (v26) {
        goto LABEL_37;
      }
    }
    xpc_object_t object = xpc_null_create();
    goto LABEL_40;
  }
LABEL_45:
  xpc_release(v13);
  xpc_release(v11);
}

void PowerStats::setPowerdownMessage(uint64_t a1, xpc_object_t *a2)
{
  CFArrayRef theArray = (CFArrayRef)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t value = xpc_dictionary_get_value(*a2, abm::kKeyPowerDownMessageList[0]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc::bridge((uint64_t *)cf, (xpc *)&object, v4);
  CFArrayRef v5 = (const __CFArray *)cf[0];
  if (cf[0])
  {
    CFTypeID v6 = CFGetTypeID(cf[0]);
    if (v6 == CFArrayGetTypeID())
    {
      CFArrayRef theArray = v5;
      CFRetain(v5);
      CFTypeRef v7 = cf[0];
      if (!cf[0]) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }
  CFArrayRef v5 = 0;
  CFArrayRef theArray = 0;
  CFTypeRef v7 = cf[0];
  if (cf[0]) {
LABEL_9:
  }
    CFRelease(v7);
LABEL_10:
  xpc_release(object);
  CFIndex v8 = 0;
  xpc_object_t v9 = (uint64_t **)(a1 + 48);
  while (1)
  {
    CFIndex Count = CFArrayGetCount(v5);
    CFArrayRef v5 = theArray;
    if (Count <= v8) {
      break;
    }
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v8);
    CFDictionaryRef v12 = ValueAtIndex;
    if (!ValueAtIndex) {
      goto LABEL_13;
    }
    cf[0] = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    cf[1] = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    CFTypeID v13 = CFGetTypeID(ValueAtIndex);
    if (v13 == CFDictionaryGetTypeID()) {
      CFDictionaryRef v14 = v12;
    }
    else {
      CFDictionaryRef v14 = 0;
    }
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)cf, v14);
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&object, abm::kKeyPowerDownMessageQMISvc[0]);
    unsigned int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)cf, (const __CFString *)object);
    MEMORY[0x1C8794290](&object);
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&object, abm::kKeyPowerDownMessageId[0]);
    uint64_t v16 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)cf, (const __CFString *)object);
    MEMORY[0x1C8794290](&object);
    xpc_object_t v17 = *v9;
    xpc_object_t v18 = (uint64_t **)(a1 + 48);
    xpc_object_t v19 = (uint64_t *)(a1 + 48);
    if (*v9)
    {
      while (1)
      {
        while (1)
        {
          xpc_object_t v19 = v17;
          unsigned int v20 = *((_DWORD *)v17 + 7);
          if (Int == v20) {
            break;
          }
          if (Int >= v20)
          {
            if (v20 >= Int) {
              char v24 = 1;
            }
            else {
              char v24 = -1;
            }
            if ((v24 & 0x80) == 0) {
              goto LABEL_40;
            }
            goto LABEL_36;
          }
LABEL_21:
          xpc_object_t v17 = (uint64_t *)*v19;
          xpc_object_t v18 = (uint64_t **)v19;
          if (!*v19) {
            goto LABEL_38;
          }
        }
        unsigned int v21 = *((_DWORD *)v19 + 8);
        if (v16 < v21) {
          goto LABEL_21;
        }
        BOOL v22 = v21 == v16;
        if (v21 >= v16) {
          char v23 = 1;
        }
        else {
          char v23 = -1;
        }
        if (v22) {
          char v23 = 0;
        }
        if ((v23 & 0x80) == 0)
        {
LABEL_40:
          xpc_object_t v25 = (char *)v19;
          goto LABEL_12;
        }
LABEL_36:
        xpc_object_t v17 = (uint64_t *)v19[1];
        if (!v17)
        {
          xpc_object_t v18 = (uint64_t **)(v19 + 1);
          break;
        }
      }
    }
LABEL_38:
    xpc_object_t v25 = (char *)operator new(0x28uLL);
    *(void *)(v25 + 28) = Int | (unint64_t)(v16 << 32);
    *((_DWORD *)v25 + 9) = 0;
    *(void *)xpc_object_t v25 = 0;
    *((void *)v25 + 1) = 0;
    *((void *)v25 + 2) = v19;
    *xpc_object_t v18 = (uint64_t *)v25;
    uint64_t v26 = **(void **)(a1 + 40);
    long long v27 = (uint64_t *)v25;
    if (v26)
    {
      *(void *)(a1 + 40) = v26;
      long long v27 = *v18;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 48), v27);
    ++*(void *)(a1 + 56);
    CFArrayRef v5 = theArray;
LABEL_12:
    ++*((_DWORD *)v25 + 9);
    MEMORY[0x1C87942E0](cf);
LABEL_13:
    ++v8;
  }
  if (theArray) {
    CFRelease(theArray);
  }
}

void sub_1C5B8CBBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, xpc_object_t object)
{
}

void PowerStats::submitLowPowerStatsMetric_sync(os_log_t *this)
{
  long long v2 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Submitting AWD of low power stats", buf, 2u);
  }
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (xpc_object_t v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v3) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v3);
      xpc_object_t v4 = v3;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v3 = 0;
  }
  xpc_release(v3);
  xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
  if (v5 || (xpc_object_t v5 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v5) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v5);
      xpc_object_t v6 = v5;
    }
    else
    {
      xpc_object_t v6 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v5 = 0;
  }
  xpc_release(v5);
  xpc_object_t v7 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4CD38], v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  xpc_object_t v9 = xpc_int64_create((*((_DWORD *)this + 4) + *((_DWORD *)this + 2)));
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4C670], v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  xpc_object_t v11 = xpc_int64_create(*((unsigned int *)this + 5));
  if (!v11) {
    xpc_object_t v11 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4CA20], v11);
  xpc_object_t v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  xpc_object_t v13 = xpc_int64_create(*((unsigned int *)this + 6));
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4C350], v13);
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  xpc_object_t v15 = xpc_int64_create(*((unsigned int *)this + 8));
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4C790], v15);
  xpc_object_t v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  xpc_object_t v17 = xpc_int64_create(*((unsigned int *)this + 7));
  if (!v17) {
    xpc_object_t v17 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4C8A8], v17);
  xpc_object_t v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  xpc_object_t v19 = xpc_array_create(0, 0);
  if (v19 || (xpc_object_t v19 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v19) == MEMORY[0x1E4F14568])
    {
      xpc_retain(v19);
      xpc_object_t v20 = v19;
    }
    else
    {
      xpc_object_t v20 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v20 = xpc_null_create();
    xpc_object_t v19 = 0;
  }
  xpc_release(v19);
  xpc_object_t xarray = v20;
  int v57 = v4;
  xpc_object_t xdict = v6;
  os_log_t v21 = this[5];
  uint64_t v56 = this;
  BOOL v22 = (this + 6);
  if (v21 == (os_log_t)(this + 6))
  {
    unsigned int v23 = 0;
  }
  else
  {
    unsigned int v23 = 0;
    key = (char *)*MEMORY[0x1E4F4CA18];
    long long v60 = (char *)*MEMORY[0x1E4F4C8B8];
    uint64_t v59 = (char *)*MEMORY[0x1E4F4C348];
    char v24 = (const char *)*MEMORY[0x1E4F4C340];
    do
    {
      int64_t isa_high = HIDWORD(v21[3].isa);
      int64_t isa_low = LODWORD(v21[4].isa);
      int64_t v27 = HIDWORD(v21[4].isa);
      xpc_object_t v28 = xpc_dictionary_create(0, 0, 0);
      if (v28 || (xpc_object_t v28 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C8795EB0](v28) == MEMORY[0x1E4F14590])
        {
          xpc_retain(v28);
          xpc_object_t v29 = v28;
        }
        else
        {
          xpc_object_t v29 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v29 = xpc_null_create();
        xpc_object_t v28 = 0;
      }
      xpc_release(v28);
      xpc_object_t v30 = xpc_int64_create(0);
      if (!v30) {
        xpc_object_t v30 = xpc_null_create();
      }
      xpc_dictionary_set_value(v29, key, v30);
      xpc_object_t v31 = xpc_null_create();
      xpc_release(v30);
      xpc_release(v31);
      xpc_object_t v32 = xpc_int64_create(isa_high);
      if (!v32) {
        xpc_object_t v32 = xpc_null_create();
      }
      xpc_dictionary_set_value(v29, v60, v32);
      xpc_object_t v33 = xpc_null_create();
      xpc_release(v32);
      xpc_release(v33);
      xpc_object_t v34 = xpc_int64_create(isa_low);
      if (!v34) {
        xpc_object_t v34 = xpc_null_create();
      }
      xpc_dictionary_set_value(v29, v59, v34);
      xpc_object_t v35 = xpc_null_create();
      xpc_release(v34);
      xpc_release(v35);
      xpc_object_t v36 = xpc_int64_create(v27);
      if (!v36) {
        xpc_object_t v36 = xpc_null_create();
      }
      xpc_dictionary_set_value(v29, v24, v36);
      xpc_object_t v37 = xpc_null_create();
      xpc_release(v36);
      xpc_release(v37);
      xpc_array_append_value(xarray, v29);
      xpc_release(v29);
      isa = v21[1].isa;
      if (isa)
      {
        do
        {
          uint64_t v39 = isa;
          isa = isa->isa;
        }
        while (isa);
      }
      else
      {
        do
        {
          uint64_t v39 = v21[2].isa;
          BOOL v40 = v39->isa == (Class)v21;
          os_log_t v21 = v39;
        }
        while (!v40);
      }
      v23 += v27;
      os_log_t v21 = v39;
    }
    while (v39 != v22);
  }
  if (xarray)
  {
    xpc_retain(xarray);
    xpc_object_t v41 = xarray;
    unsigned int v42 = xdict;
  }
  else
  {
    unsigned int v42 = xdict;
    xpc_object_t v41 = xpc_null_create();
  }
  xpc_dictionary_set_value(v42, (const char *)*MEMORY[0x1E4F4C8B0], v41);
  xpc_object_t v43 = xpc_null_create();
  xpc_release(v41);
  xpc_release(v43);
  xpc_object_t v44 = xpc_int64_create(v23);
  if (!v44) {
    xpc_object_t v44 = xpc_null_create();
  }
  xpc_dictionary_set_value(v42, (const char *)*MEMORY[0x1E4F4CC40], v44);
  xpc_object_t v45 = xpc_null_create();
  xpc_release(v44);
  xpc_release(v45);
  xpc_object_t v46 = xpc_string_create((const char *)*MEMORY[0x1E4F4D2D0]);
  if (!v46) {
    xpc_object_t v46 = xpc_null_create();
  }
  xpc_dictionary_set_value(v57, (const char *)*MEMORY[0x1E4F4C190], v46);
  xpc_object_t v47 = xpc_null_create();
  xpc_release(v46);
  xpc_release(v47);
  xpc_object_t v48 = xpc_int64_create(524466);
  if (!v48) {
    xpc_object_t v48 = xpc_null_create();
  }
  xpc_dictionary_set_value(v57, (const char *)*MEMORY[0x1E4F4C258], v48);
  xpc_object_t v49 = xpc_null_create();
  xpc_release(v48);
  xpc_release(v49);
  if (v42)
  {
    xpc_retain(v42);
    xpc_object_t v50 = v42;
  }
  else
  {
    xpc_object_t v50 = xpc_null_create();
  }
  xpc_dictionary_set_value(v57, (const char *)*MEMORY[0x1E4F4C188], v50);
  xpc_object_t v51 = xpc_null_create();
  xpc_release(v50);
  xpc_release(v51);
  if (v56[13] && v56[14])
  {
    if (v57)
    {
      xpc_retain(v57);
      xpc_object_t v52 = v57;
      os_log_t v53 = v56[13];
      if (v53)
      {
LABEL_73:
        long long v54 = _Block_copy(v53);
        goto LABEL_76;
      }
    }
    else
    {
      xpc_object_t v52 = xpc_null_create();
      os_log_t v53 = v56[13];
      if (v53) {
        goto LABEL_73;
      }
    }
    long long v54 = 0;
LABEL_76:
    long long v55 = v56[14];
    *(void *)std::string buf = MEMORY[0x1E4F143A8];
    uint64_t v64 = 1174405120;
    uint64_t v65 = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc4dictEEEclIJS2_EEEvDpT__block_invoke_0;
    uint64_t v66 = &__block_descriptor_tmp_41;
    if (v54)
    {
      long long aBlock = _Block_copy(v54);
      xpc_object_t object = v52;
      if (v52)
      {
LABEL_78:
        xpc_retain(v52);
LABEL_81:
        dispatch_async(v55, buf);
        xpc_release(object);
        xpc_object_t object = 0;
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v54) {
          _Block_release(v54);
        }
        xpc_release(v52);
        goto LABEL_86;
      }
    }
    else
    {
      long long aBlock = 0;
      xpc_object_t object = v52;
      if (v52) {
        goto LABEL_78;
      }
    }
    xpc_object_t object = xpc_null_create();
    goto LABEL_81;
  }
LABEL_86:
  xpc_release(xarray);
  xpc_release(v42);
  xpc_release(v57);
}

void sub_1C5B8D5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t a11, xpc_object_t a12, uint64_t a13, uint64_t a14, uint64_t a15, xpc_object_t object)
{
  xpc_release(v16);
  xpc_release(object);
  xpc_release(a12);
  xpc_release(a11);
  _Unwind_Resume(a1);
}

void PowerStats::reportStats(os_log_t *this, int a2)
{
  if (a2 == 524466) {
    PowerStats::submitLowPowerStatsMetric_sync(this);
  }
}

void PowerStats::registerStatsHandler(uint64_t a1, uint64_t a2)
{
  xpc_object_t v4 = *(void **)a2;
  if (*(void *)a2) {
    xpc_object_t v4 = _Block_copy(v4);
  }
  xpc_object_t v5 = *(const void **)(a1 + 104);
  *(void *)(a1 + 104) = v4;
  if (v5) {
    _Block_release(v5);
  }
  xpc_object_t v6 = *(NSObject **)(a2 + 8);
  if (v6) {
    dispatch_retain(v6);
  }
  xpc_object_t v7 = *(NSObject **)(a1 + 112);
  *(void *)(a1 + 112) = v6;
  if (v7)
  {
    dispatch_release(v7);
  }
}

void PowerStats::dumpState(os_log_t *this)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  long long v2 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I --------------- ABM Power state ---------------", buf, 2u);
    long long v2 = *this;
    xpc_object_t v3 = &loc_1C5BC2000;
    if (!os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
    {
LABEL_3:
      xpc_object_t v4 = "N5boost8signals26detail26foreign_weak_ptr_impl_baseE" + 7;
      if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else
  {
    xpc_object_t v3 = (void *)&loc_1C5BC2000;
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_3;
    }
  }
  int v7 = *((_DWORD *)this + 3);
  *(_DWORD *)std::string buf = v3[338];
  int v24 = v7;
  _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Idle sleep reverted due to BB events: %u", buf, 8u);
  long long v2 = *this;
  xpc_object_t v4 = "8signals26detail26foreign_weak_ptr_impl_baseE";
  if (!os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
LABEL_4:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  int v8 = *((_DWORD *)this + 2);
  int v9 = *((_DWORD *)this + 4);
  *(_DWORD *)std::string buf = *((void *)v4 + 217);
  int v24 = v8;
  __int16 v25 = 1024;
  int v26 = v9;
  _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I BB events deferred on idle sleep: %u, on forced sleep: %u", buf, 0xEu);
  long long v2 = *this;
  if (!os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
LABEL_5:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  int v10 = *((_DWORD *)this + 5);
  *(_DWORD *)std::string buf = v3[338];
  int v24 = v10;
  _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Forced sleep during BB event handling: %u", buf, 8u);
  long long v2 = *this;
  if (!os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
LABEL_6:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  int v12 = *((_DWORD *)this + 7);
  int v11 = *((_DWORD *)this + 8);
  int v13 = *((_DWORD *)this + 6);
  *(_DWORD *)std::string buf = 67109632;
  int v24 = v11;
  __int16 v25 = 1024;
  int v26 = v12;
  __int16 v27 = 1024;
  int v28 = v13;
  _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Number of idle sleeps: %u, forced sleeps: %u, wakes: %u", buf, 0x14u);
  long long v2 = *this;
  if (!os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
LABEL_7:
    os_log_t v5 = this[5];
    xpc_object_t v6 = (this + 6);
    if (v5 == (os_log_t)(this + 6)) {
      return;
    }
    goto LABEL_17;
  }
LABEL_14:
  int v14 = *((_DWORD *)this + 20);
  int v15 = *((_DWORD *)this + 21);
  *(_DWORD *)std::string buf = *((void *)v4 + 217);
  int v24 = v14;
  __int16 v25 = 1024;
  int v26 = v15;
  _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Last wake duration: %u, sleep duration: %u", buf, 0xEu);
  os_log_t v5 = this[5];
  xpc_object_t v6 = (this + 6);
  if (v5 == (os_log_t)(this + 6)) {
    return;
  }
  do
  {
LABEL_17:
    xpc_object_t v16 = *this;
    if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
    {
      int isa = (int)v5[4].isa;
      int isa_high = HIDWORD(v5[4].isa);
      int v19 = HIDWORD(v5[3].isa);
      *(_DWORD *)std::string buf = 67109632;
      int v24 = v19;
      __int16 v25 = 1024;
      int v26 = isa;
      __int16 v27 = 1024;
      int v28 = isa_high;
      _os_log_impl(&dword_1C59C6000, v16, OS_LOG_TYPE_DEFAULT, "#I Received message QMI_SVC 0x%x, ID 0x%x, %u times after powerdown", buf, 0x14u);
    }
    xpc_object_t v20 = v5[1].isa;
    if (v20)
    {
      do
      {
        os_log_t v21 = v20;
        xpc_object_t v20 = v20->isa;
      }
      while (v20);
    }
    else
    {
      do
      {
        os_log_t v21 = v5[2].isa;
        BOOL v22 = v21->isa == (Class)v5;
        os_log_t v5 = v21;
      }
      while (!v22);
    }
    os_log_t v5 = v21;
  }
  while (v21 != v6);
}

void std::__shared_ptr_pointer<PowerStats *,std::shared_ptr<PowerStats>::__shared_ptr_default_delete<PowerStats,PowerStats>,std::allocator<PowerStats>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<PowerStats *,std::shared_ptr<PowerStats>::__shared_ptr_default_delete<PowerStats,PowerStats>,std::allocator<PowerStats>>::__on_zero_shared(uint64_t a1)
{
  unsigned int v1 = *(PowerStats **)(a1 + 24);
  if (v1)
  {
    PowerStats::~PowerStats(v1);
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<PowerStats *,std::shared_ptr<PowerStats>::__shared_ptr_default_delete<PowerStats,PowerStats>,std::allocator<PowerStats>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C5BCD412) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C5BCD412 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C5BCD412)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C5BCD412 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc4dictEEEclIJS2_EEEvDpT__block_invoke_0(uint64_t a1)
{
}

uint64_t __cxx_global_var_init_16()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

void BootControllerLegacy::BootControllerLegacy(BootControllerLegacy *this)
{
  BootController::BootController(this);
  *(void *)(v1 + 88) = 0;
  *(void *)(v1 + 96) = 0;
  *(void *)uint64_t v1 = &unk_1F2110818;
  *(unsigned char *)(v1 + 104) = 1;
}

{
  uint64_t v1;

  BootController::BootController(this);
  *(void *)(v1 + 88) = 0;
  *(void *)(v1 + 96) = 0;
  *(void *)uint64_t v1 = &unk_1F2110818;
  *(unsigned char *)(v1 + 104) = 1;
}

BOOL BootControllerLegacy::prepare(capabilities::radio *a1, std::string *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  memset(__p, 170, sizeof(__p));
  capabilities::radio::personalizedFirmwarePath((uint64_t *)__p, a1);
  v4.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v4.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v12.st_blkstd::string::size_type size = v4;
  *(timespec *)v12.st_qspare = v4;
  v12.st_birthtimespec = v4;
  *(timespec *)&v12.st_std::string::size_type size = v4;
  v12.st_mtimespec = v4;
  v12.st_ctimespec = v4;
  *(timespec *)&v12.st_uid = v4;
  v12.st_atimespec = v4;
  *(timespec *)&v12.st_dev = v4;
  if (SHIBYTE(__p[2]) >= 0) {
    os_log_t v5 = __p;
  }
  else {
    os_log_t v5 = (void **)__p[0];
  }
  int v6 = stat((const char *)v5, &v12);
  if (v6)
  {
    int v7 = *((void *)a1 + 5);
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      int v10 = __p;
      if (SHIBYTE(__p[2]) < 0) {
        int v10 = (void **)__p[0];
      }
      v12.st_dev = 136315138;
      *(void *)&v12.st_mode = v10;
      _os_log_error_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_ERROR, "Failed to find the firmware in \"%s\"", (uint8_t *)&v12, 0xCu);
    }
    capabilities::trace::allowed((capabilities::trace *)v8);
    std::string::__assign_external(a2, "Baseband Firmware Path Not Found", 0x20uLL);
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return v6 == 0;
}

void sub_1C5B8DD98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BootControllerLegacy::bootModem(uint64_t a1, uint64_t a2)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  unint64_t v54 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v55 = 0xAAAAAAAAAAAAAAAALL;
  timespec v4 = (ctu::XpcJetsamAssertion *)pthread_mutex_lock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
  uint64_t v5 = xmmword_1EBBDC918;
  if (!(void)xmmword_1EBBDC918)
  {
    ctu::XpcJetsamAssertion::create_default_global((uint64_t *)values, v4);
    long long v6 = *(_OWORD *)values;
    values[0] = 0;
    values[1] = 0;
    int v7 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDC918 + 1);
    xmmword_1EBBDC918 = v6;
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    BOOL v8 = (std::__shared_weak_count *)values[1];
    if (values[1] && !atomic_fetch_add((atomic_ullong *volatile)values[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    uint64_t v5 = xmmword_1EBBDC918;
  }
  int v9 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDC918 + 1);
  *(void *)std::string buf = v5;
  *(void *)&uint8_t buf[8] = *((void *)&xmmword_1EBBDC918 + 1);
  if (*((void *)&xmmword_1EBBDC918 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1EBBDC918 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
  char v53 = 13;
  strcpy((char *)__p, "Booting modem");
  ctu::XpcJetsamAssertion::createActivity();
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  BYTE5(v51[2]) = -86;
  HIWORD(v51[2]) = 5290;
  strcpy((char *)v51, "boot::debugArguments");
  if (*(char *)(a2 + 23) < 0)
  {
    *(void *)(a2 + 8) = 7;
    int v10 = *(char **)a2;
  }
  else
  {
    *(unsigned char *)(a2 + 23) = 7;
    int v10 = (char *)a2;
  }
  strcpy(v10, "unknown");
  CFTypeRef cf = 0;
  int v11 = (const void *)BBUpdaterExtremeCreate();
  if (!v11)
  {
    std::string::__assign_external((std::string *)a2, "failed creating BBUpdaterExtremeRef", 0x23uLL);
    int v19 = (unsigned char *)(a1 + 104);
    if (*(unsigned char *)(a1 + 104)) {
      goto LABEL_78;
    }
    goto LABEL_61;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_11, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_11))
  {
    __cxa_atexit((void (*)(void *))std::weak_ptr<BootControllerLegacy>::~weak_ptr, &qword_1EBBDCE50, &dword_1C59C6000);
    __cxa_guard_release(&_MergedGlobals_11);
  }
  stat v12 = *(std::__shared_weak_count **)(a1 + 96);
  if (!v12 || (uint64_t v13 = *(void *)(a1 + 88), (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v15 = v14;
  atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v16 = (std::__shared_weak_count *)qword_1EBBDCE58;
  qword_1EBBDCE50 = v13;
  qword_1EBBDCE58 = (uint64_t)v15;
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!(void)xmmword_1EBBDC7D8)
  {
    xpc_object_t v18 = (uint64_t (***)(void *, void))operator new(0x18uLL);
    MEMORY[0x1C87942F0](v18, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
    xpc_object_t v17 = (atomic_ullong *)operator new(0x20uLL);
    atomic_ullong *v17 = (atomic_ullong)&unk_1F210A638;
    v17[1] = 0;
    dispatch_object_t v17[2] = 0;
    v17[3] = (atomic_ullong)v18;
    xpc_object_t v20 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDC7D8 + 1);
    *(void *)&xmmword_1EBBDC7D8 = v18;
    *((void *)&xmmword_1EBBDC7D8 + 1) = v17;
    if (!v20)
    {
      values[0] = v18;
      values[1] = v17;
      goto LABEL_34;
    }
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  xpc_object_t v17 = (atomic_ullong *)*((void *)&xmmword_1EBBDC7D8 + 1);
  xpc_object_t v18 = (uint64_t (***)(void *, void))xmmword_1EBBDC7D8;
  *(_OWORD *)values = xmmword_1EBBDC7D8;
  if (*((void *)&xmmword_1EBBDC7D8 + 1)) {
LABEL_34:
  }
    atomic_fetch_add_explicit(v17 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (SHIBYTE(v51[2]) >= 0) {
    os_log_t v21 = (const char *)v51;
  }
  else {
    os_log_t v21 = (const char *)v51[0];
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)buf, v21);
  BOOL v22 = (__CFString *)(**v18)(v18, *(void *)buf);
  unsigned int v23 = v22;
  if (v22)
  {
    CFTypeID v24 = CFGetTypeID(v22);
    CFTypeID TypeID = CFStringGetTypeID();
    CFRelease(v23);
    MEMORY[0x1C8794290](buf);
    if (v24 == TypeID)
    {
      int v26 = (std::__shared_weak_count *)values[1];
      if (!values[1]) {
        goto LABEL_46;
      }
      goto LABEL_44;
    }
  }
  else
  {
    MEMORY[0x1C8794290](buf);
  }
  unsigned int v23 = @"-l 0xffffffdf -v 0 -N";
  int v26 = (std::__shared_weak_count *)values[1];
  if (!values[1]) {
    goto LABEL_46;
  }
LABEL_44:
  if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
LABEL_46:
  xpc_object_t v49 = v23;
  CFRetain(v23);
  int valuePtr = 1;
  CFAllocatorRef v27 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v28 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
  CFNumberRef v47 = v28;
  uint64_t v29 = *MEMORY[0x1E4F1CFD0];
  values[0] = *(void **)MEMORY[0x1E4F1CFD0];
  values[1] = v28;
  if (!*(unsigned char *)(a1 + 80)) {
    uint64_t v29 = *MEMORY[0x1E4F1CFC8];
  }
  int v57 = v23;
  uint64_t v58 = v29;
  CFDictionaryRef v30 = CFDictionaryCreate(v27, (const void **)&BootControllerLegacy::bootModem(std::string &)::keys, (const void **)values, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionaryRef v46 = v30;
  int v31 = BBUpdaterSetOptions();
  if (!v31)
  {
    memset(buf, 0, sizeof(buf));
    long long v60 = 0;
    ctu::cf::assign();
    *(_OWORD *)xpc_object_t v44 = *(_OWORD *)buf;
    xpc_object_t v45 = v60;
    xpc_object_t v32 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      unsigned int v42 = v44;
      if (SHIBYTE(v45) < 0) {
        unsigned int v42 = (CFTypeRef *)v44[0];
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v42;
      _os_log_error_impl(&dword_1C59C6000, v32, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
      if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      {
LABEL_54:
        *(_OWORD *)a2 = *(_OWORD *)v44;
        *(void *)(a2 + 16) = v45;
        CFRelease(cf);
        CFTypeRef cf = 0;
        if (!v30) {
          goto LABEL_56;
        }
        goto LABEL_55;
      }
    }
    else if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
      goto LABEL_54;
    }
    operator delete(*(void **)a2);
    goto LABEL_54;
  }
  if (v30) {
LABEL_55:
  }
    CFRelease(v30);
LABEL_56:
  if (v28) {
    CFRelease(v28);
  }
  CFRelease(v23);
  int v19 = (unsigned char *)(a1 + 104);
  if (!*(unsigned char *)(a1 + 104))
  {
LABEL_61:
    if (TelephonyBasebandPowerOnModem())
    {
      v44[0] = 0;
      goto LABEL_63;
    }
    if (*(char *)(a2 + 23) < 0)
    {
      *(void *)(a2 + 8) = 21;
      xpc_object_t v37 = *(char **)a2;
    }
    else
    {
      *(unsigned char *)(a2 + 23) = 21;
      xpc_object_t v37 = (char *)a2;
    }
    strcpy(v37, "failed power on modem");
LABEL_78:
    v44[0] = 0;
    goto LABEL_79;
  }
  v44[0] = 0;
  if (!v31)
  {
LABEL_79:
    long long v38 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v39 = (void *)a2;
      }
      else {
        uint64_t v39 = *(void **)a2;
      }
      LODWORD(values[0]) = 136446210;
      *(void **)((char *)values + 4) = v39;
      _os_log_impl(&dword_1C59C6000, v38, OS_LOG_TYPE_DEFAULT, "#I boot failed due to %{public}s", (uint8_t *)values, 0xCu);
    }
    uint64_t v35 = 0;
    unsigned char *v19 = 0;
    CFTypeRef v36 = v44[0];
    if (v44[0]) {
      goto LABEL_85;
    }
    goto LABEL_86;
  }
LABEL_63:
  int v33 = BBUpdaterExecCommand();
  if (!v33 && cf)
  {
    values[0] = 0;
    values[1] = 0;
    int v57 = 0;
    ctu::cf::assign();
    *(_OWORD *)std::string buf = *(_OWORD *)values;
    long long v60 = v57;
    xpc_object_t v34 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      xpc_object_t v43 = buf;
      if (SHIBYTE(v60) < 0) {
        xpc_object_t v43 = *(uint8_t **)buf;
      }
      LODWORD(values[0]) = 136315138;
      *(void **)((char *)values + 4) = v43;
      _os_log_error_impl(&dword_1C59C6000, v34, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)values, 0xCu);
      if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
        goto LABEL_68;
      }
    }
    else if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_68:
      *(_OWORD *)a2 = *(_OWORD *)buf;
      *(void *)(a2 + 16) = v60;
      CFRelease(cf);
      CFTypeRef cf = 0;
      goto LABEL_79;
    }
    operator delete(*(void **)a2);
    goto LABEL_68;
  }
  if (!v33) {
    goto LABEL_79;
  }
  if (!v44[0])
  {
    std::string::__assign_external((std::string *)a2, "BBUpdaterExecCommand failed returning output", 0x2CuLL);
    goto LABEL_79;
  }
  BootControllerLegacy::printOutput((BootControllerLegacy *)a1, v44[0]);
  values[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  values[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)values, (const __CFDictionary *)v44[0]);
  if ((ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)values, @"done") & 1) == 0)
  {
    std::string::__assign_external((std::string *)a2, "output did not return done", 0x1AuLL);
    MEMORY[0x1C87942E0](values);
    goto LABEL_79;
  }
  MEMORY[0x1C87942E0](values);
  *(unsigned char *)(a1 + 80) = 0;
  uint64_t v35 = 1;
  unsigned char *v19 = 0;
  CFTypeRef v36 = v44[0];
  if (v44[0])
  {
LABEL_85:
    CFRelease(v36);
    v44[0] = 0;
  }
LABEL_86:
  if (v11) {
    CFRelease(v11);
  }
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  BOOL v40 = (std::__shared_weak_count *)v55;
  if (v55 && !atomic_fetch_add((atomic_ullong *volatile)(v55 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  return v35;
}

void sub_1C5B8E730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  _Unwind_Resume(a1);
}

void BootControllerLegacy::handleError(BootControllerLegacy *this@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  memset(a2, 170, 24);
  long long v7 = 0uLL;
  uint64_t v8 = 0;
  ctu::cf::assign();
  *a2 = 0uLL;
  *((void *)a2 + 2) = v8;
  uint64_t v5 = *((void *)this + 5);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)a2 + 23) >= 0) {
      long long v6 = a2;
    }
    else {
      long long v6 = *(_OWORD **)a2;
    }
    LODWORD(v7) = 136315138;
    *(void *)((char *)&v7 + 4) = v6;
    _os_log_error_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v7, 0xCu);
  }
}

void sub_1C5B8E984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void BootControllerLegacy::printOutput(BootControllerLegacy *this, CFTypeRef cf)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  CFStringRef v3 = CFCopyDescription(cf);
  uint64_t v7 = 0;
  CFStringRef v8 = v3;
  __p[0] = 0;
  __p[1] = 0;
  ctu::cf::assign();
  timespec v4 = *((void *)this + 5);
  if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    if ((SHIBYTE(v7) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_8:
    operator delete(__p[0]);
    if (!v3) {
      return;
    }
    goto LABEL_9;
  }
  uint64_t v5 = __p;
  if (v7 < 0) {
    uint64_t v5 = (void **)__p[0];
  }
  *(_DWORD *)std::string buf = 136315138;
  int v10 = v5;
  _os_log_error_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
  if (SHIBYTE(v7) < 0) {
    goto LABEL_8;
  }
LABEL_3:
  if (v3) {
LABEL_9:
  }
    CFRelease(v3);
}

void sub_1C5B8EA9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void BootControllerLegacy::~BootControllerLegacy(BootControllerLegacy *this)
{
  long long v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1F2111FC0;
  CFStringRef v3 = (const void *)*((void *)this + 9);
  if (v3) {
    CFRelease(v3);
  }
  *(void *)this = &unk_1F210B810;
  MEMORY[0x1C87940C0]((char *)this + 8);
}

{
  std::__shared_weak_count *v2;
  const void *v3;
  uint64_t vars8;

  long long v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1F2111FC0;
  CFStringRef v3 = (const void *)*((void *)this + 9);
  if (v3) {
    CFRelease(v3);
  }
  *(void *)this = &unk_1F210B810;
  MEMORY[0x1C87940C0]((char *)this + 8);

  operator delete(this);
}

uint64_t std::weak_ptr<BootControllerLegacy>::~weak_ptr(uint64_t a1)
{
  long long v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t __cxx_global_var_init_17()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

uint64_t __cxx_global_var_init_30()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

const char *AccessoryModule::getName(AccessoryModule *this)
{
  return "accessories-new.mod";
}

void AccessoryModule::create(capabilities::abs *a1@<X0>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  timespec v4 = (capabilities::abs *)capabilities::abs::supportsAccessoryModule(a1);
  if ((v4 & 1) == 0)
  {
    capabilities::abs::supportedSARFeatures(v4);
    if (!capabilities::abs::operator&()) {
      return;
    }
  }
  uint64_t v5 = (std::__shared_weak_count_vtbl *)operator new(0xA8uLL);
  long long v6 = v5;
  uint64_t v7 = *(void *)a1;
  CFStringRef v8 = (std::__shared_weak_count *)*((void *)a1 + 1);
  v13[0] = v7;
  v13[1] = (uint64_t)v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  AccessoryModule::AccessoryModule((uint64_t)v5, v13);
  uint64_t v9 = (std::__shared_weak_count *)operator new(0x20uLL);
  v9->__shared_owners_ = 0;
  p_std::string::size_type shared_owners = &v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2110AC0;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = v6;
  on_zero_shared = (std::__shared_weak_count *)v6[1].__on_zero_shared;
  if (on_zero_shared)
  {
    if (on_zero_shared->__shared_owners_ != -1) {
      goto LABEL_11;
    }
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
    v6[1].__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v9;
    std::__shared_weak_count::__release_weak(on_zero_shared);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  v6[1].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
  v6[1].__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v9;
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_10:
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_11:
  *a2 = v6;
  a2[1] = (std::__shared_weak_count_vtbl *)v9;
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 0x40000000;
  void v14[2] = ___ZN15AccessoryModule4initEv_block_invoke;
  v14[3] = &__block_descriptor_tmp_19;
  v14[4] = v6;
  int v15 = v14;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI15AccessoryModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_50;
  block[4] = (char *)v6 + 48;
  void block[5] = &v15;
  get_deleter = v6[1].__get_deleter;
  if (v6[1].__on_zero_shared_weak) {
    dispatch_async_and_wait(get_deleter, block);
  }
  else {
    dispatch_sync(get_deleter, block);
  }
}

void sub_1C5B8EEB8(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[8], v1, (dispatch_function_t)std::shared_ptr<AccessoryModule> ctu::SharedSynchronizable<AccessoryModule>::make_shared_ptr<AccessoryModule>(AccessoryModule*)::{lambda(AccessoryModule*)#1}::operator() const(AccessoryModule*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C5B8EEE0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1C5B8EF38(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1C5B8EF4C(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AccessoryModule::init(AccessoryModule *this)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN15AccessoryModule4initEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_19;
  v3[4] = this;
  timespec v4 = v3;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI15AccessoryModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_50;
  block[4] = (char *)this + 48;
  void block[5] = &v4;
  long long v2 = (char *)this + 64;
  uint64_t v1 = *((void *)this + 8);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

uint64_t AccessoryModule::AccessoryModule(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  timespec v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1F2112348;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(void *)a1 = &unk_1F2103EC0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &unk_1F2103EC0;
  }
  *(void *)a1 = &unk_1F21108E8;
  uint64_t v5 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
  long long v6 = dispatch_queue_create("accessories-new.mod", v5);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = v6;
  if (v6)
  {
    uint64_t v7 = v6;
    dispatch_retain(v6);
    *(void *)(a1 + 72) = 0;
    dispatch_release(v7);
  }
  else
  {
    *(void *)(a1 + 72) = 0;
  }
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 80), "com.apple.telephony.abm", "accessories-new.mod");
  *(void *)a1 = &unk_1F21108E8;
  *(void *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 120) = 0;
  return a1;
}

void sub_1C5B8F1A0(_Unwind_Exception *a1)
{
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v2);
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void AccessoryModule::~AccessoryModule(AccessoryModule *this)
{
  *(void *)this = &unk_1F21108E8;
  long long v2 = (char *)this + 80;
  uint64_t v3 = *((void *)this + 10);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v17[0] = 0;
    _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Gone", (uint8_t *)v17, 2u);
  }
  timespec v4 = (AccessoryModule *)*((void *)this + 19);
  if (v4 == (AccessoryModule *)((char *)this + 128))
  {
    (*(void (**)(char *))(*((void *)this + 16) + 32))((char *)this + 128);
    uint64_t v5 = (char *)*((void *)this + 13);
    if (!v5) {
      goto LABEL_7;
    }
  }
  else
  {
    if (v4) {
      (*(void (**)(AccessoryModule *))(*(void *)v4 + 40))(v4);
    }
    uint64_t v5 = (char *)*((void *)this + 13);
    if (!v5)
    {
LABEL_7:
      long long v6 = (std::__shared_weak_count *)*((void *)this + 12);
      if (!v6) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
  }
  uint64_t v7 = (char *)*((void *)this + 14);
  CFStringRef v8 = v5;
  if (v7 != v5)
  {
    do
    {
      uint64_t v9 = (std::__shared_weak_count *)*((void *)v7 - 1);
      if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
      v7 -= 16;
    }
    while (v7 != v5);
    CFStringRef v8 = (char *)*((void *)this + 13);
  }
  *((void *)this + 14) = v5;
  operator delete(v8);
  long long v6 = (std::__shared_weak_count *)*((void *)this + 12);
  if (!v6)
  {
LABEL_19:
    MEMORY[0x1C8794100](v2);
    int v10 = *((void *)this + 9);
    if (!v10) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
LABEL_18:
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  MEMORY[0x1C8794100](v2);
  int v10 = *((void *)this + 9);
  if (v10) {
LABEL_20:
  }
    dispatch_release(v10);
LABEL_21:
  uint64_t v11 = *((void *)this + 8);
  if (v11) {
    dispatch_release(v11);
  }
  stat v12 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  *(void *)this = &unk_1F2112348;
  uint64_t v13 = *((void *)this + 3);
  if (v13)
  {
    uint64_t v14 = *((void *)this + 4);
    int v15 = (void *)*((void *)this + 3);
    if (v14 != v13)
    {
      do
      {
        if (*(char *)(v14 - 1) < 0) {
          operator delete(*(void **)(v14 - 24));
        }
        v14 -= 24;
      }
      while (v14 != v13);
      int v15 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v13;
    operator delete(v15);
  }
  xpc_object_t v16 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
}

{
  void *v1;
  uint64_t vars8;

  AccessoryModule::~AccessoryModule(this);

  operator delete(v1);
}

unsigned char *AccessoryModule::getShutdownStages@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = operator new(1uLL);
  *a1 = v3;
  unsigned char *v3 = 3;
  uint64_t result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void ___ZN15AccessoryModule4initEv_block_invoke(uint64_t a1)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void **)(a1 + 32);
  long long v2 = v1[10];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing", buf, 2u);
  }
  uint64_t v3 = (std::__shared_weak_count *)v1[7];
  if (!v3 || (v4 = v1[6], (uint64_t v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v6 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1EBBDC7D8)
  {
    CFStringRef v8 = (uint64_t (***)(void, uint64_t))operator new(0x18uLL);
    MEMORY[0x1C87942F0](v8, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
    uint64_t v7 = operator new(0x20uLL);
    void *v7 = &unk_1F210A638;
    v7[1] = 0;
    v7[2] = 0;
    v7[3] = v8;
    uint64_t v9 = (std::__shared_weak_count *)off_1EBBDC7E0;
    qword_1EBBDC7D8 = (uint64_t)v8;
    off_1EBBDC7E0 = v7;
    if (!v9)
    {
      uint64_t v45 = (uint64_t)v8;
      CFDictionaryRef v46 = (std::__shared_weak_count *)v7;
      goto LABEL_14;
    }
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  CFStringRef v8 = (uint64_t (***)(void, uint64_t))qword_1EBBDC7D8;
  uint64_t v7 = off_1EBBDC7E0;
  uint64_t v45 = qword_1EBBDC7D8;
  CFDictionaryRef v46 = (std::__shared_weak_count *)off_1EBBDC7E0;
  if (off_1EBBDC7E0) {
LABEL_14:
  }
    atomic_fetch_add_explicit(v7 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  int v10 = (const void *)*MEMORY[0x1E4F4CAE0];
  size_t v11 = strlen((const char *)*MEMORY[0x1E4F4CAE0]);
  if (v11 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v12 = v11;
  if (v11 >= 0x17)
  {
    uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v14 = v11 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v13 = operator new(v14 + 1);
    unint64_t v54 = (std::__shared_weak_count *)v12;
    unint64_t v55 = (std::__shared_weak_count_vtbl *)(v15 | 0x8000000000000000);
    *(void *)std::string buf = v13;
    goto LABEL_22;
  }
  HIBYTE(v55) = v11;
  uint64_t v13 = buf;
  if (v11) {
LABEL_22:
  }
    memmove(v13, v10, v12);
  *((unsigned char *)v13 + v12) = 0;
  xpc_object_t v16 = v1 + 20;
  char v17 = Preferences::getPreference<BOOL>(v8, (const char *)buf, (ctu::cf *)(v1 + 20));
  if (SHIBYTE(v55) < 0)
  {
    operator delete(*(void **)buf);
    xpc_object_t v18 = v46;
    if (!v46) {
      goto LABEL_28;
    }
  }
  else
  {
    xpc_object_t v18 = v46;
    if (!v46) {
      goto LABEL_28;
    }
  }
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (v17) {
      goto LABEL_31;
    }
    goto LABEL_29;
  }
LABEL_28:
  if (v17) {
    goto LABEL_31;
  }
LABEL_29:
  int v19 = v1[10];
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl(&dword_1C59C6000, v19, OS_LOG_TYPE_ERROR, "Failed getting AccessorySimulate status from ABMProperties", buf, 2u);
  }
LABEL_31:
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v56 = 0;
  xpc_object_t v20 = (uint8_t *)operator new(0x20uLL);
  *(void *)xpc_object_t v20 = &unk_1F2110B48;
  *((void *)v20 + 1) = v1;
  *((void *)v20 + 2) = v4;
  *((void *)v20 + 3) = v6;
  uint64_t v56 = v20;
  os_log_t v21 = v1 + 16;
  unsigned int v23 = v1 + 19;
  BOOL v22 = (void *)v1[19];
  v1[19] = 0;
  if (v22 == v1 + 16)
  {
    (*(void (**)(void *))(*v21 + 32))(v1 + 16);
    CFTypeID v24 = v56;
    __int16 v25 = (uint8_t **)(v1 + 19);
    if (!v56)
    {
LABEL_39:
      char *v25 = 0;
      goto LABEL_43;
    }
  }
  else
  {
    if (v22) {
      (*(void (**)(void *))(*v22 + 40))(v22);
    }
    CFTypeID v24 = v56;
    __int16 v25 = (uint8_t **)(v1 + 19);
    if (!v56) {
      goto LABEL_39;
    }
  }
  if (v24 != buf)
  {
    __int16 v25 = &v56;
    *unsigned int v23 = (uint64_t)v24;
    goto LABEL_39;
  }
  *unsigned int v23 = (uint64_t)v21;
  (*(void (**)(uint8_t *, void *))(*(void *)buf + 24))(buf, v1 + 16);
LABEL_43:
  if (v56 == buf)
  {
    (*(void (**)(uint8_t *))(*(void *)buf + 32))(buf);
    if (*v16) {
      goto LABEL_47;
    }
LABEL_52:
    uint64_t v27 = *v23;
    if (*v23)
    {
      if ((void *)v27 == v21)
      {
        xpc_object_t v52 = v51;
        (*(void (**)(void *, void *))(*v21 + 24))(v1 + 16, v51);
LABEL_67:
        int v31 = v1[8];
        dispatch_object_t v43 = v31;
        if (v31) {
          dispatch_retain(v31);
        }
        CoreAccessoriesDelegate::create(v51, &v43, (std::__shared_weak_count_vtbl **)buf);
        uint64_t v32 = *v23;
        if (*v23)
        {
          if ((void *)v32 == v21)
          {
            xpc_object_t v50 = v49;
            (*(void (**)(void *, void *))(*v21 + 24))(v1 + 16, v49);
LABEL_74:
            int v33 = v1[8];
            dispatch_object_t v42 = v33;
            if (v33) {
              dispatch_retain(v33);
            }
            IOKitAccessoriesDelegate::create(v49, &v42, &v55);
            uint64_t v34 = *v23;
            if (*v23)
            {
              if ((void *)v34 == v21)
              {
                xpc_object_t v48 = v47;
                (*(void (**)(void *, void *))(*v21 + 24))(v1 + 16, v47);
LABEL_81:
                uint64_t v35 = v1[8];
                dispatch_object_t v41 = v35;
                if (v35) {
                  dispatch_retain(v35);
                }
                IOPortUSBCAccessoriesDelegate::create(v47, &v41, &v57);
                std::vector<std::shared_ptr<AccessoriesDelegateBase>>::__assign_with_size[abi:ne180100]<std::shared_ptr<AccessoriesDelegateBase> const*,std::shared_ptr<AccessoriesDelegateBase> const*>((uint64_t)(v1 + 13), buf, &v59, 3uLL);
                CFTypeRef v36 = v58;
                if (v58 && !atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                  std::__shared_weak_count::__release_weak(v36);
                }
                xpc_object_t v37 = (std::__shared_weak_count *)v56;
                if (v56 && !atomic_fetch_add((atomic_ullong *volatile)v56 + 1, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                  std::__shared_weak_count::__release_weak(v37);
                }
                long long v38 = v54;
                if (v54 && !atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                  std::__shared_weak_count::__release_weak(v38);
                }
                if (v41) {
                  dispatch_release(v41);
                }
                if (v48 == v47)
                {
                  (*(void (**)(void *))(v47[0] + 32))(v47);
                  uint64_t v39 = v42;
                  if (v42) {
LABEL_98:
                  }
                    dispatch_release(v39);
                }
                else
                {
                  if (v48) {
                    (*(void (**)(void))(*v48 + 40))();
                  }
                  uint64_t v39 = v42;
                  if (v42) {
                    goto LABEL_98;
                  }
                }
                if (v50 == v49)
                {
                  (*(void (**)(void *))(v49[0] + 32))(v49);
                  BOOL v40 = v43;
                  if (v43) {
LABEL_103:
                  }
                    dispatch_release(v40);
                }
                else
                {
                  if (v50) {
                    (*(void (**)(void))(*v50 + 40))();
                  }
                  BOOL v40 = v43;
                  if (v43) {
                    goto LABEL_103;
                  }
                }
                CFDictionaryRef v30 = v52;
                if (v52 == v51)
                {
                  (*(void (**)(void *))(v51[0] + 32))(v51);
                  goto LABEL_112;
                }
                goto LABEL_105;
              }
              uint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 16))(v34);
            }
            xpc_object_t v48 = (void *)v34;
            goto LABEL_81;
          }
          uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 16))(v32);
        }
        xpc_object_t v50 = (void *)v32;
        goto LABEL_74;
      }
      uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 16))(v27);
    }
    xpc_object_t v52 = (void *)v27;
    goto LABEL_67;
  }
  if (v56) {
    (*(void (**)(void))(*(void *)v56 + 40))();
  }
  if (!*v16) {
    goto LABEL_52;
  }
LABEL_47:
  uint64_t v26 = *v23;
  if (!*v23)
  {
LABEL_50:
    uint64_t v61 = (void *)v26;
    goto LABEL_57;
  }
  if ((void *)v26 != v21)
  {
    uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 16))(v26);
    goto LABEL_50;
  }
  uint64_t v61 = v60;
  (*(void (**)(void *, void *))(*v21 + 24))(v1 + 16, v60);
LABEL_57:
  CFNumberRef v28 = v1[8];
  dispatch_object_t object = v28;
  if (v28) {
    dispatch_retain(v28);
  }
  AccessorySimulatorDelegate::create(v60, &object, (std::__shared_weak_count_vtbl **)buf);
  std::vector<std::shared_ptr<AccessoriesDelegateBase>>::__assign_with_size[abi:ne180100]<std::shared_ptr<AccessoriesDelegateBase> const*,std::shared_ptr<AccessoriesDelegateBase> const*>((uint64_t)(v1 + 13), buf, &v55, 1uLL);
  uint64_t v29 = v54;
  if (v54 && !atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  if (object) {
    dispatch_release(object);
  }
  CFDictionaryRef v30 = v61;
  if (v61 == v60)
  {
    (*(void (**)(void *))(v60[0] + 32))(v60);
    goto LABEL_112;
  }
LABEL_105:
  if (v30) {
    (*(void (**)(void *))(*v30 + 40))(v30);
  }
LABEL_112:
  std::__shared_weak_count::__release_weak(v6);
}

void sub_1C5B8FEC4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void sub_1C5B8FED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object, dispatch_object_t a10, dispatch_object_t a11, dispatch_object_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AccessoryModule::shutdown(uint64_t a1, uint64_t a2, NSObject **a3)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 1174405120;
  void v6[2] = ___ZN15AccessoryModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v6[3] = &__block_descriptor_tmp_4_5;
  uint64_t v4 = *a3;
  uint64_t v5 = (uint64_t *)(a1 + 48);
  void v6[4] = a1;
  dispatch_group_t group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(group);
  }
  ctu::SharedSynchronizable<AccessoryModule>::execute_wrapped(v5, (uint64_t)v6);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void ___ZN15AccessoryModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  long long v2 = *(std::__shared_weak_count **)(v1 + 96);
  *(void *)(v1 + 88) = 0;
  *(void *)(v1 + 96) = 0;
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void AccessoryModule::initialize(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[7];
  if (!v4 || (uint64_t v5 = a1[6], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  CFStringRef v8 = operator new(0x10uLL);
  void *v8 = a1;
  v8[1] = v3;
  uint64_t v9 = a1[8];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  int v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  _DWORD v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<AccessoryModule>::execute_wrapped<AccessoryModule::initialize(dispatch::group_session)::$_0>(AccessoryModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<AccessoryModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<AccessoryModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void AccessoryModule::finishInitialization_sync(std::__shared_weak_count **this)
{
  long long v2 = (const char *)((uint64_t (*)(std::__shared_weak_count **))(*this)->__shared_weak_owners_)(this);
  size_t v3 = strlen(v2);
  if (v3 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v4 = (void *)v3;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v5 = (void **)operator new(v6 + 1);
    __dst[1] = v4;
    unint64_t v32 = v7 | 0x8000000000000000;
    __dst[0] = v5;
  }
  else
  {
    HIBYTE(v32) = v3;
    uint64_t v5 = __dst;
    if (!v3) {
      goto LABEL_9;
    }
  }
  memmove(v5, v2, (size_t)v4);
LABEL_9:
  *((unsigned char *)v4 + (void)v5) = 0;
  CFTypeRef cf = 0;
  AppleBasebandManager::create();
  long long v8 = v33;
  long long v33 = 0uLL;
  uint64_t v9 = this[12];
  *(_OWORD *)(this + 11) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  int v10 = (std::__shared_weak_count *)*((void *)&v33 + 1);
  if (!*((void *)&v33 + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v33 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    CFTypeRef v11 = cf;
    if (!cf) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  CFTypeRef v11 = cf;
  if (cf) {
LABEL_15:
  }
    CFRelease(v11);
LABEL_16:
  if (SHIBYTE(v32) < 0) {
    operator delete(__dst[0]);
  }
  size_t v12 = this[7];
  if (!v12 || (uint64_t v13 = this[6], (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v15 = v14;
  atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v15);
  }
  xpc_object_t v16 = (const void *)*MEMORY[0x1E4F4CEF8];
  size_t v17 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
  if (v17 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v18 = (void *)v17;
  if (v17 >= 0x17)
  {
    uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v20 = v17 | 7;
    }
    uint64_t v21 = v20 + 1;
    int v19 = operator new(v20 + 1);
    __p[1] = v18;
    unint64_t v29 = v21 | 0x8000000000000000;
    __p[0] = v19;
    goto LABEL_29;
  }
  HIBYTE(v29) = v17;
  int v19 = __p;
  if (v17) {
LABEL_29:
  }
    memmove(v19, v16, (size_t)v18);
  *((unsigned char *)v18 + (void)v19) = 0;
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 1174405120;
  void v24[2] = ___ZN15AccessoryModule25finishInitialization_syncEv_block_invoke;
  v24[3] = &__block_descriptor_tmp_6_11;
  v24[4] = this;
  v24[5] = v13;
  __int16 v25 = v15;
  atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  BOOL v22 = _Block_copy(v24);
  unsigned int v23 = this[8];
  if (v23) {
    dispatch_retain((dispatch_object_t)this[8]);
  }
  long long aBlock = v22;
  dispatch_object_t object = v23;
  AppleBasebandManager::setEventHandler();
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete(__p[0]);
  }
  AppleBasebandManager::eventsOn((AppleBasebandManager *)this[11]);
  if (v25) {
    std::__shared_weak_count::__release_weak(v25);
  }
  std::__shared_weak_count::__release_weak(v15);
}

void sub_1C5B90664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  std::__shared_weak_count::__release_weak(v30);
  _Unwind_Resume(a1);
}

void ___ZN15AccessoryModule25finishInitialization_syncEv_block_invoke(void *a1, abm::client::Event **a2)
{
  size_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = (void *)a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    uint64_t v27 = v6;
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[5])
      {
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        abm::client::Event::getData((uint64_t *)&cf, *a2);
        CFTypeRef v8 = cf;
        if (cf) {
          uint64_t v9 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
        }
        else {
          uint64_t v9 = 0;
        }
        if (v9)
        {
          v24[0] = 0xAAAAAAAAAAAAAAAALL;
          v24[1] = 0xAAAAAAAAAAAAAAAALL;
          ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v24, (const __CFDictionary *)cf);
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v23 = 0;
          ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v28, (const char *)*MEMORY[0x1E4F4C688]);
          ctu::cf::map_adapter::getString();
          MEMORY[0x1C8794290](&v28);
          uint64_t v23 = v21;
          *(_OWORD *)std::string __p = v20;
          if (v21 >= 0) {
            size_t v10 = HIBYTE(v21);
          }
          else {
            size_t v10 = *((void *)&v20 + 1);
          }
          if (v10 == strlen((const char *)*MEMORY[0x1E4F4CAE8])
            && (v21 >= 0 ? (CFTypeRef v11 = __p) : (CFTypeRef v11 = (void **)__p[0]), !memcmp(v11, (const void *)*MEMORY[0x1E4F4CAE8], v10)))
          {
            size_t v17 = v5[10];
            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(v20) = 0;
              _os_log_impl(&dword_1C59C6000, v17, OS_LOG_TYPE_DEFAULT, "#I Starting all delegates", (uint8_t *)&v20, 2u);
            }
            uint64_t v18 = v5[13];
            for (uint64_t i = v5[14]; v18 != i; v18 += 16)
              (*(void (**)(void))(**(void **)v18 + 32))();
          }
          else if (v10 == strlen((const char *)*MEMORY[0x1E4F4CCD8]) {
                 && (v21 >= 0 ? (size_t v12 = __p) : (size_t v12 = (void **)__p[0]),
          }
                     !memcmp(v12, (const void *)*MEMORY[0x1E4F4CCD8], v10))
                 || v10 == strlen((const char *)*MEMORY[0x1E4F4CF28])
                 && (v21 >= 0 ? (uint64_t v13 = __p) : (uint64_t v13 = (void **)__p[0]),
                     !memcmp(v13, (const void *)*MEMORY[0x1E4F4CF28], v10)))
          {
            uint64_t v14 = v5[10];
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(v20) = 0;
              _os_log_impl(&dword_1C59C6000, v14, OS_LOG_TYPE_DEFAULT, "#I Stopping all delegates", (uint8_t *)&v20, 2u);
            }
            uint64_t v15 = v5[13];
            for (uint64_t j = v5[14]; v15 != j; v15 += 16)
              (*(void (**)(void))(**(void **)v15 + 40))();
          }
          if (SHIBYTE(v23) < 0) {
            operator delete(__p[0]);
          }
          MEMORY[0x1C87942E0](v24);
          CFTypeRef v8 = cf;
        }
        if (v8) {
          CFRelease(v8);
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void AccessoryModule::startDelegates_sync(AccessoryModule *this)
{
  long long v2 = *((void *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Starting all delegates", v6, 2u);
  }
  uint64_t v4 = (uint64_t *)*((void *)this + 13);
  size_t v3 = (uint64_t *)*((void *)this + 14);
  while (v4 != v3)
  {
    uint64_t v5 = *v4;
    v4 += 2;
    (*(void (**)(uint64_t))(*(void *)v5 + 32))(v5);
  }
}

void AccessoryModule::stopDelegates_sync(AccessoryModule *this)
{
  long long v2 = *((void *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Stopping all delegates", v6, 2u);
  }
  uint64_t v4 = (uint64_t *)*((void *)this + 13);
  size_t v3 = (uint64_t *)*((void *)this + 14);
  while (v4 != v3)
  {
    uint64_t v5 = *v4;
    v4 += 2;
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
  }
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__18weak_ptrI15AccessoryModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c40_ZTSNSt3__18weak_ptrI15AccessoryModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void AccessoryModule::handleAccessoryConnectionEvent_sync(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 56);
  uint64_t v6 = (uint64_t *)(a1 + 48);
  if (!v5 || (size_t v10 = std::__shared_weak_count::lock(v5)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  CFTypeRef v11 = v10;
  atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v12 = *a2;
    if (v12) {
      uint64_t v13 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      uint64_t v13 = 0;
    }
    if (v13)
    {
LABEL_8:
      uint64_t v14 = *(NSObject **)(a1 + 80);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v12;
        _os_log_error_impl(&dword_1C59C6000, v14, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&buf, 0xCu);
      }
      goto LABEL_77;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
    uint64_t v12 = *a2;
    if (v12) {
      uint64_t v15 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      uint64_t v15 = 0;
    }
    if (v15) {
      goto LABEL_8;
    }
  }
  uint64_t v68 = (capabilities::abs *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v69 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN15AccessoryModule35handleAccessoryConnectionEvent_syncEN3ctu2cf11CFSharedRefI9__CFErrorEENSt3__16vectorIN3abm13AccessoryInfoENS5_9allocatorIS8_EEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_10_4;
  void aBlock[4] = a1;
  void aBlock[5] = v7;
  unint64_t v67 = v11;
  atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v16 = (capabilities::abs *)_Block_copy(aBlock);
  size_t v17 = v16;
  uint64_t v18 = *(NSObject **)(a1 + 64);
  if (v18) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 64));
  }
  uint64_t v68 = v17;
  dispatch_object_t v69 = v18;
  capabilities::abs::supportedSARFeatures(v16);
  if (!capabilities::abs::operator&())
  {
    unint64_t v64 = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v65 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
    BOOL v22 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    uint64_t v23 = off_1EBBDCA08;
    if (!off_1EBBDCA08)
    {
      CommandDriverFactory::create_default_global((uint64_t *)&buf, v22);
      long long v24 = buf;
      long long buf = 0uLL;
      __int16 v25 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
      off_1EBBDCA08 = v24;
      if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
      uint64_t v26 = (std::__shared_weak_count *)*((void *)&buf + 1);
      if (*((void *)&buf + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
      uint64_t v23 = off_1EBBDCA08;
    }
    uint64_t v27 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    uint64_t v55 = v23;
    uint64_t v56 = *(&off_1EBBDCA08 + 1);
    if (*(&off_1EBBDCA08 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v23 + 16))(&v57, v23);
    unint64_t v64 = 0;
    uint64_t v65 = 0;
    if (v58)
    {
      uint64_t v65 = std::__shared_weak_count::lock(v58);
      if (v65) {
        unint64_t v64 = v57;
      }
      if (v58) {
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    unint64_t v28 = v64;
    if (v64)
    {
      std::string __p = 0;
      char v53 = 0;
      unint64_t v54 = 0;
      CFDictionaryRef v30 = *(const void **)a3;
      uint64_t v29 = *(void *)(a3 + 8);
      int64_t v31 = v29 - *(void *)a3;
      if (v29 != *(void *)a3)
      {
        if (0xAAAAAAAAAAAAAAABLL * (v31 >> 2) > 0x1555555555555555) {
          std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
        }
        std::string __p = operator new(v31);
        unint64_t v54 = (char *)__p + 4 * (v31 >> 2);
        memcpy(__p, v30, v31);
        char v53 = v54;
      }
      unint64_t v32 = v68;
      if (v68) {
        unint64_t v32 = _Block_copy(v68);
      }
      xpc_object_t v50 = v32;
      dispatch_object_t object = v69;
      if (v69) {
        dispatch_retain(v69);
      }
      (*(void (**)(unint64_t, void **, void **))(*(void *)v28 + 376))(v28, &__p, &v50);
      if (object) {
        dispatch_release(object);
      }
      if (v50) {
        _Block_release(v50);
      }
      if (__p)
      {
        char v53 = __p;
        operator delete(__p);
      }
    }
    long long v33 = v65;
    if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
    goto LABEL_66;
  }
  xpc_object_t v19 = xpc_dictionary_create(0, 0, 0);
  uint64_t v20 = MEMORY[0x1E4F14590];
  if (v19 || (xpc_object_t v19 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v19) == v20)
    {
      xpc_retain(v19);
      xpc_object_t v21 = v19;
    }
    else
    {
      xpc_object_t v21 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v21 = xpc_null_create();
    xpc_object_t v19 = 0;
  }
  xpc_release(v19);
  uint64_t v34 = MEMORY[0x1C8795EB0](v21);
  if (v34 != v20)
  {
    uint64_t v35 = *(NSObject **)(a1 + 80);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl(&dword_1C59C6000, v35, OS_LOG_TYPE_ERROR, "Failed to create accessory input dictionary!", (uint8_t *)&buf, 2u);
    }
    goto LABEL_61;
  }
  xpc_object_t v38 = xpc_data_create(*(const void **)a3, *(void *)(a3 + 8) - *(void *)a3);
  if (!v38) {
    xpc_object_t v38 = xpc_null_create();
  }
  xpc_dictionary_set_value(v21, (const char *)*MEMORY[0x1E4F4C358], v38);
  xpc_object_t v39 = xpc_null_create();
  xpc_release(v38);
  xpc_release(v39);
  unint64_t v64 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v65 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  BOOL v40 = (const void *)*MEMORY[0x1E4F4CB00];
  size_t v41 = strlen((const char *)*MEMORY[0x1E4F4CB00]);
  if (v41 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v42 = v41;
  if (v41 >= 0x17)
  {
    uint64_t v44 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v41 | 7) != 0x17) {
      uint64_t v44 = v41 | 7;
    }
    uint64_t v45 = v44 + 1;
    p_long long buf = (long long *)operator new(v44 + 1);
    *((void *)&buf + 1) = v42;
    unint64_t v71 = v45 | 0x8000000000000000;
    *(void *)&long long buf = p_buf;
    uint64_t v20 = MEMORY[0x1E4F14590];
  }
  else
  {
    HIBYTE(v71) = v41;
    p_long long buf = &buf;
    if (!v41) {
      goto LABEL_88;
    }
  }
  memmove(p_buf, v40, v42);
LABEL_88:
  *((unsigned char *)p_buf + v42) = 0;
  xpc_object_t v63 = v21;
  if (v21) {
    xpc_retain(v21);
  }
  else {
    xpc_object_t v63 = xpc_null_create();
  }
  uint64_t v61 = 0;
  dispatch_object_t v62 = 0;
  abm::client::Command::create();
  xpc_release(v63);
  xpc_object_t v63 = 0;
  if (SHIBYTE(v71) < 0) {
    operator delete((void *)buf);
  }
  unint64_t v59 = v64;
  long long v60 = v65;
  if (v65) {
    atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AppleBasebandManager::perform();
  if (v60 && !atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
  if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
    std::__shared_weak_count::__release_weak(v65);
  }
LABEL_61:
  xpc_release(v21);
  if (v34 == v20)
  {
LABEL_66:
    v46[0] = MEMORY[0x1E4F143A8];
    v46[1] = 1174405120;
    v46[2] = ___ZN15AccessoryModule35handleAccessoryConnectionEvent_syncEN3ctu2cf11CFSharedRefI9__CFErrorEENSt3__16vectorIN3abm13AccessoryInfoENS5_9allocatorIS8_EEEE_block_invoke_11;
    v46[3] = &__block_descriptor_tmp_21_3;
    v46[4] = a1;
    CFNumberRef v47 = 0;
    xpc_object_t v48 = 0;
    xpc_object_t v49 = 0;
    CFTypeRef v36 = *(const void **)a3;
    int64_t v37 = *(void *)(a3 + 8) - *(void *)a3;
    if (v37)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v37 >> 2) > 0x1555555555555555) {
        std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
      }
      CFNumberRef v47 = operator new(v37);
      xpc_object_t v49 = (char *)v47 + 4 * (v37 >> 2);
      memcpy(v47, v36, v37);
      xpc_object_t v48 = v49;
    }
    ctu::SharedSynchronizable<AccessoryModule>::execute_wrapped(v6, (uint64_t)v46);
    if (v47)
    {
      xpc_object_t v48 = v47;
      operator delete(v47);
    }
    if (v69) {
      dispatch_release(v69);
    }
    if (v68) {
      _Block_release(v68);
    }
    goto LABEL_75;
  }
  if (v69) {
    dispatch_release(v69);
  }
  if (v68) {
    _Block_release(v68);
  }
LABEL_75:
  if (v67) {
    std::__shared_weak_count::__release_weak(v67);
  }
LABEL_77:
  std::__shared_weak_count::__release_weak(v11);
}

void sub_1C5B914C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,xpc_object_t object,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN15AccessoryModule35handleAccessoryConnectionEvent_syncEN3ctu2cf11CFSharedRefI9__CFErrorEENSt3__16vectorIN3abm13AccessoryInfoENS5_9allocatorIS8_EEEE_block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  size_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[5])
      {
        uint64_t v8 = *a2;
        if (*a2) {
          uint64_t v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v9 = 0;
        }
        size_t v10 = *(NSObject **)(v5 + 80);
        if (v9)
        {
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            int v11 = 138412290;
            uint64_t v12 = v8;
            _os_log_error_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_ERROR, "Failed sending accessory info update: %@", (uint8_t *)&v11, 0xCu);
          }
        }
        else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v11) = 0;
          _os_log_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_DEFAULT, "#I Success sending accessory info update", (uint8_t *)&v11, 2u);
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

uint64_t ___ZN15AccessoryModule35handleAccessoryConnectionEvent_syncEN3ctu2cf11CFSharedRefI9__CFErrorEENSt3__16vectorIN3abm13AccessoryInfoENS5_9allocatorIS8_EEEE_block_invoke_11(void *a1)
{
  uint64_t v129 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[4];
  unint64_t v126 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v125[7] = v3;
  v125[8] = v3;
  v125[5] = v3;
  v125[6] = v3;
  v125[3] = v3;
  v125[4] = v3;
  v125[1] = v3;
  v125[2] = v3;
  long long v124 = v3;
  v125[0] = v3;
  *(_OWORD *)std::string __p = v3;
  long long v123 = v3;
  long long v120 = v3;
  long long v121 = v3;
  long long v118 = v3;
  long long v119 = v3;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v118);
  uint64_t v4 = a1[5];
  uint64_t v110 = a1[6];
  if (v4 != v110)
  {
    key = (char *)*MEMORY[0x1E4F4C498];
    xpc_object_t v108 = (char *)*MEMORY[0x1E4F4C580];
    xpc_object_t v107 = (char *)*MEMORY[0x1E4F4C570];
    xpc_object_t v106 = (char *)*MEMORY[0x1E4F4C578];
    xpc_object_t v105 = (char *)*MEMORY[0x1E4F4C920];
    xpc_object_t v104 = (char *)*MEMORY[0x1E4F4CB70];
    string = (char *)*MEMORY[0x1E4F4C4C0];
    xpc_object_t v102 = (char *)*MEMORY[0x1E4F4C540];
    xpc_object_t v101 = (char *)*MEMORY[0x1E4F4C7B0];
    int v112 = 1;
    xpc_object_t v99 = (char *)*MEMORY[0x1E4F4CE40];
    xpc_object_t v100 = (char *)*MEMORY[0x1E4F4C548];
    xpc_object_t v97 = (char *)*MEMORY[0x1E4F4CB40];
    xpc_object_t v98 = (char *)*MEMORY[0x1E4F4C3C8];
    char v95 = (char *)*MEMORY[0x1E4F4C190];
    xpc_object_t v96 = (char *)*MEMORY[0x1E4F4C158];
    xpc_object_t v94 = (char *)*MEMORY[0x1E4F4C188];
    std::string __s = (char *)*MEMORY[0x1E4F4C738];
    uint64_t v93 = v2;
    while (1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v118, (uint64_t)"[", 1);
      uint64_t v5 = (void *)std::ostream::operator<<();
      uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"] Accessory Info:", 17);
      LOBYTE(__dst) = 10;
      uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&__dst, 1);
      uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"    ", 4);
      uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"ID:           ", 14);
      size_t v10 = (const char *)abm::asString();
      size_t v11 = strlen(v10);
      uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
      LOBYTE(__dst) = 10;
      uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&__dst, 1);
      uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"    ", 4);
      uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"State:        ", 14);
      xpc_object_t v16 = (const char *)abm::asString();
      size_t v17 = strlen(v16);
      uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
      LOBYTE(__dst) = 10;
      xpc_object_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)&__dst, 1);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"    ", 4);
      xpc_object_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Color:        ", 14);
      BOOL v22 = (const char *)abm::asString();
      size_t v23 = strlen(v22);
      long long v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
      LOBYTE(__dst) = 10;
      __int16 v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)&__dst, 1);
      uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"    ", 4);
      uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Power:        ", 14);
      unint64_t v28 = (const char *)abm::asString();
      size_t v29 = strlen(v28);
      CFDictionaryRef v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
      LOBYTE(__dst) = 10;
      int64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)&__dst, 1);
      unint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"    ", 4);
      long long v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Material:     ", 14);
      uint64_t v34 = (const char *)abm::asString();
      size_t v35 = strlen(v34);
      CFTypeRef v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v34, v35);
      LOBYTE(__dst) = 10;
      int64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)&__dst, 1);
      xpc_object_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"    ", 4);
      xpc_object_t v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Connection:   ", 14);
      BOOL v40 = (const char *)abm::asString();
      size_t v41 = strlen(v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v40, v41);
      size_t v42 = *(NSObject **)(v2 + 80);
      if (!os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_23;
      }
      if ((BYTE8(v124) & 0x10) != 0) {
        break;
      }
      if ((BYTE8(v124) & 8) != 0)
      {
        uint64_t v45 = *((void *)&v120 + 1);
        CFDictionaryRef v46 = (const void **)&v119 + 1;
        goto LABEL_10;
      }
      size_t v43 = 0;
      HIBYTE(v117) = 0;
      p_dst = (void **)&__dst;
LABEL_19:
      *((unsigned char *)p_dst + v43) = 0;
      xpc_object_t v50 = (void **)&__dst;
      if (v117 < 0) {
        xpc_object_t v50 = __dst;
      }
      *(_DWORD *)long long buf = 136315138;
      xpc_object_t v128 = v50;
      _os_log_impl(&dword_1C59C6000, v42, OS_LOG_TYPE_DEFAULT, "#I Sending accessory info update:\n%s", buf, 0xCu);
      if (SHIBYTE(v117) < 0) {
        operator delete(__dst);
      }
LABEL_23:
      xpc_object_t v51 = xpc_dictionary_create(0, 0, 0);
      if (v51 || (xpc_object_t v51 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C8795EB0](v51) == MEMORY[0x1E4F14590])
        {
          xpc_retain(v51);
          xpc_object_t v52 = v51;
        }
        else
        {
          xpc_object_t v52 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v52 = xpc_null_create();
        xpc_object_t v51 = 0;
      }
      xpc_release(v51);
      char v53 = (const char *)abm::asString();
      xpc_object_t v54 = xpc_string_create(v53);
      if (!v54) {
        xpc_object_t v54 = xpc_null_create();
      }
      xpc_dictionary_set_value(v52, key, v54);
      xpc_object_t v55 = xpc_null_create();
      xpc_release(v54);
      xpc_release(v55);
      uint64_t v56 = (const char *)abm::asString();
      xpc_object_t v57 = xpc_string_create(v56);
      if (!v57) {
        xpc_object_t v57 = xpc_null_create();
      }
      xpc_dictionary_set_value(v52, v108, v57);
      xpc_object_t v58 = xpc_null_create();
      xpc_release(v57);
      xpc_release(v58);
      unint64_t v59 = (const char *)abm::asString();
      xpc_object_t v60 = xpc_string_create(v59);
      if (!v60) {
        xpc_object_t v60 = xpc_null_create();
      }
      xpc_dictionary_set_value(v52, v107, v60);
      xpc_object_t v61 = xpc_null_create();
      xpc_release(v60);
      xpc_release(v61);
      dispatch_object_t v62 = (const char *)abm::asString();
      xpc_object_t v63 = xpc_string_create(v62);
      if (!v63) {
        xpc_object_t v63 = xpc_null_create();
      }
      xpc_dictionary_set_value(v52, v106, v63);
      xpc_object_t v64 = xpc_null_create();
      xpc_release(v63);
      xpc_release(v64);
      uint64_t v65 = (const char *)abm::asString();
      xpc_object_t v66 = xpc_string_create(v65);
      if (!v66) {
        xpc_object_t v66 = xpc_null_create();
      }
      xpc_dictionary_set_value(v52, v105, v66);
      xpc_object_t v67 = xpc_null_create();
      xpc_release(v66);
      xpc_release(v67);
      uint64_t v68 = (const char *)abm::asString();
      xpc_object_t v69 = xpc_string_create(v68);
      if (!v69) {
        xpc_object_t v69 = xpc_null_create();
      }
      xpc_dictionary_set_value(v52, v104, v69);
      xpc_object_t v70 = xpc_null_create();
      xpc_release(v69);
      xpc_release(v70);
      xpc_object_t v71 = xpc_dictionary_create(0, 0, 0);
      if (v71 || (xpc_object_t v71 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C8795EB0](v71) == MEMORY[0x1E4F14590])
        {
          xpc_retain(v71);
          xpc_object_t v72 = v71;
        }
        else
        {
          xpc_object_t v72 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v72 = xpc_null_create();
        xpc_object_t v71 = 0;
      }
      xpc_release(v71);
      xpc_object_t v73 = xpc_string_create(string);
      if (!v73) {
        xpc_object_t v73 = xpc_null_create();
      }
      xpc_dictionary_set_value(v72, v102, v73);
      xpc_object_t v74 = xpc_null_create();
      xpc_release(v73);
      xpc_release(v74);
      xpc_object_t v75 = xpc_string_create(v101);
      if (!v75) {
        xpc_object_t v75 = xpc_null_create();
      }
      xpc_dictionary_set_value(v72, v100, v75);
      xpc_object_t v76 = xpc_null_create();
      xpc_release(v75);
      xpc_release(v76);
      xpc_object_t v77 = xpc_string_create(v99);
      if (!v77) {
        xpc_object_t v77 = xpc_null_create();
      }
      xpc_dictionary_set_value(v72, v98, v77);
      xpc_object_t v78 = xpc_null_create();
      xpc_release(v77);
      xpc_release(v78);
      if (v52)
      {
        xpc_retain(v52);
        xpc_object_t v79 = v52;
      }
      else
      {
        xpc_object_t v79 = xpc_null_create();
      }
      xpc_dictionary_set_value(v72, v97, v79);
      xpc_object_t v80 = xpc_null_create();
      xpc_release(v79);
      xpc_release(v80);
      xpc_object_t v81 = xpc_dictionary_create(0, 0, 0);
      if (v81 || (xpc_object_t v81 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C8795EB0](v81) == MEMORY[0x1E4F14590])
        {
          xpc_retain(v81);
          xpc_object_t v82 = v81;
        }
        else
        {
          xpc_object_t v82 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v82 = xpc_null_create();
        xpc_object_t v81 = 0;
      }
      xpc_release(v81);
      xpc_object_t v83 = xpc_string_create(v96);
      if (!v83) {
        xpc_object_t v83 = xpc_null_create();
      }
      xpc_dictionary_set_value(v82, v95, v83);
      xpc_object_t v84 = xpc_null_create();
      xpc_release(v83);
      xpc_release(v84);
      if (v72)
      {
        xpc_retain(v72);
        xpc_object_t v85 = v72;
      }
      else
      {
        xpc_object_t v85 = xpc_null_create();
      }
      xpc_dictionary_set_value(v82, v94, v85);
      xpc_object_t v86 = xpc_null_create();
      xpc_release(v85);
      xpc_release(v86);
      size_t v87 = strlen(__s);
      if (v87 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v88 = v87;
      if (v87 >= 0x17)
      {
        uint64_t v90 = (v87 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v87 | 7) != 0x17) {
          uint64_t v90 = v87 | 7;
        }
        uint64_t v91 = v90 + 1;
        xpc_object_t v89 = (void **)operator new(v90 + 1);
        size_t v116 = v88;
        int64_t v117 = v91 | 0x8000000000000000;
        std::string __dst = v89;
        uint64_t v2 = v93;
      }
      else
      {
        HIBYTE(v117) = v87;
        xpc_object_t v89 = (void **)&__dst;
        if (!v87)
        {
          LOBYTE(__dst) = 0;
          xpc_object_t object = v82;
          if (!v82) {
            goto LABEL_76;
          }
          goto LABEL_71;
        }
      }
      memmove(v89, __s, v88);
      *((unsigned char *)v89 + v88) = 0;
      xpc_object_t object = v82;
      if (!v82)
      {
LABEL_76:
        xpc_object_t object = xpc_null_create();
        goto LABEL_77;
      }
LABEL_71:
      xpc_retain(v82);
LABEL_77:
      xpc_object_t v113 = 0;
      Service::runCommand(v2, (uint64_t)&__dst, &object, &v113);
      xpc_release(object);
      xpc_object_t object = 0;
      if (SHIBYTE(v117) < 0) {
        operator delete(__dst);
      }
      xpc_release(v82);
      xpc_release(v72);
      xpc_release(v52);
      ++v112;
      v4 += 12;
      if (v4 == v110) {
        goto LABEL_80;
      }
    }
    uint64_t v45 = v124;
    CFDictionaryRef v46 = (const void **)&v121;
    if ((unint64_t)v124 < *((void *)&v121 + 1))
    {
      *(void *)&long long v124 = *((void *)&v121 + 1);
      uint64_t v45 = *((void *)&v121 + 1);
      CFDictionaryRef v46 = (const void **)&v121;
    }
LABEL_10:
    CFNumberRef v47 = *v46;
    size_t v43 = v45 - (void)*v46;
    if (v43 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v43 >= 0x17)
    {
      uint64_t v48 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v43 | 7) != 0x17) {
        uint64_t v48 = v43 | 7;
      }
      uint64_t v49 = v48 + 1;
      p_dst = (void **)operator new(v48 + 1);
      size_t v116 = v43;
      int64_t v117 = v49 | 0x8000000000000000;
      std::string __dst = p_dst;
    }
    else
    {
      HIBYTE(v117) = v45 - *(unsigned char *)v46;
      p_dst = (void **)&__dst;
      if (!v43) {
        goto LABEL_18;
      }
    }
    memmove(p_dst, v47, v43);
LABEL_18:
    uint64_t v2 = v93;
    goto LABEL_19;
  }
LABEL_80:
  *(void *)&long long v118 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v118 + *(void *)(v118 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v118 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v123) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C8795140](v125);
}

void sub_1C5B92384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,xpc_object_t object,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44)
{
}

void *__copy_helper_block_e8_40c61_ZTSNSt3__16vectorIN3abm13AccessoryInfoENS_9allocatorIS2_EEEE(void *result, uint64_t a2)
{
  result[5] = 0;
  result[6] = 0;
  result[7] = 0;
  long long v3 = *(unsigned char **)(a2 + 40);
  uint64_t v2 = *(unsigned char **)(a2 + 48);
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    uint64_t v5 = result;
    if (0xAAAAAAAAAAAAAAABLL * (v4 >> 2) >= 0x1555555555555556) {
      std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)operator new(v4);
    void v5[5] = v6;
    v5[6] = v6;
    uint64_t v7 = &v6[4 * (v4 >> 2)];
    void v5[7] = v7;
    uint64_t result = memcpy(v6, v3, v4);
    v5[6] = v7;
  }
  return result;
}

void sub_1C5B92608(_Unwind_Exception *exception_object)
{
  int64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 48) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c61_ZTSNSt3__16vectorIN3abm13AccessoryInfoENS_9allocatorIS2_EEEE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void std::vector<std::shared_ptr<AccessoriesDelegateBase>>::__assign_with_size[abi:ne180100]<std::shared_ptr<AccessoriesDelegateBase> const*,std::shared_ptr<AccessoriesDelegateBase> const*>(uint64_t a1, void *a2, void *a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(char **)a1;
  if (__sz > (v8 - *(void *)a1) >> 4)
  {
    if (v9)
    {
      size_t v10 = *(char **)(a1 + 8);
      size_t v11 = *(char **)a1;
      if (v10 != v9)
      {
        do
        {
          uint64_t v12 = (std::__shared_weak_count *)*((void *)v10 - 1);
          if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
          v10 -= 16;
        }
        while (v10 != v9);
        size_t v11 = *(char **)a1;
      }
      *(void *)(a1 + 8) = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    uint64_t v23 = v8 >> 3;
    if (v8 >> 3 <= __sz) {
      uint64_t v23 = __sz;
    }
    BOOL v24 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
    if (!v24) {
      unint64_t v25 = v23;
    }
    if (v25 >> 60) {
      std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v26 = 2 * v25;
    uint64_t v27 = operator new(16 * v25);
    *(void *)a1 = v27;
    *(void *)(a1 + 8) = v27;
    for (*(void *)(a1 + 16) = &v27[v26]; v6 != a3; v6 += 2)
    {
      uint64_t v28 = v6[1];
      void *v27 = *v6;
      v27[1] = v28;
      if (v28) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
      }
      v27 += 2;
    }
    *(void *)(a1 + 8) = v27;
    return;
  }
  uint64_t v13 = *(char **)(a1 + 8);
  unint64_t v14 = (v13 - v9) >> 4;
  if (v14 >= __sz)
  {
    if (a2 == a3)
    {
      xpc_object_t v19 = *(char **)a1;
      if (v13 == v9)
      {
LABEL_54:
        *(void *)(a1 + 8) = v19;
        return;
      }
    }
    else
    {
      xpc_object_t v19 = *(char **)a1;
      do
      {
        uint64_t v21 = *v6;
        uint64_t v20 = v6[1];
        if (v20) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
        }
        BOOL v22 = (std::__shared_weak_count *)*((void *)v9 + 1);
        *(void *)uint64_t v9 = v21;
        *((void *)v9 + 1) = v20;
        if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
        v19 += 16;
        v6 += 2;
        v9 += 16;
      }
      while (v6 != a3);
      uint64_t v13 = *(char **)(a1 + 8);
      if (v13 == v19) {
        goto LABEL_54;
      }
    }
    do
    {
      unint64_t v32 = (std::__shared_weak_count *)*((void *)v13 - 1);
      if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
      v13 -= 16;
    }
    while (v13 != v19);
    goto LABEL_54;
  }
  uint64_t v15 = &a2[2 * v14];
  if (v13 != v9)
  {
    do
    {
      uint64_t v17 = *v6;
      uint64_t v16 = v6[1];
      if (v16) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v18 = (std::__shared_weak_count *)*((void *)v9 + 1);
      *(void *)uint64_t v9 = v17;
      *((void *)v9 + 1) = v16;
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      v6 += 2;
      v9 += 16;
    }
    while (v6 != v15);
    uint64_t v9 = *(char **)(a1 + 8);
  }
  size_t v29 = v9;
  if (v15 != a3)
  {
    size_t v29 = v9;
    CFDictionaryRef v30 = v9;
    do
    {
      uint64_t v31 = v15[1];
      *(void *)CFDictionaryRef v30 = *v15;
      *((void *)v30 + 1) = v31;
      if (v31) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
      }
      v29 += 16;
      v15 += 2;
      v30 += 16;
    }
    while (v15 != a3);
  }
  *(void *)(a1 + 8) = v29;
}

void std::__shared_ptr_pointer<AccessoryModule *,std::shared_ptr<AccessoryModule> ctu::SharedSynchronizable<AccessoryModule>::make_shared_ptr<AccessoryModule>(AccessoryModule*)::{lambda(AccessoryModule *)#1},std::allocator<AccessoryModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<AccessoryModule *,std::shared_ptr<AccessoryModule> ctu::SharedSynchronizable<AccessoryModule>::make_shared_ptr<AccessoryModule>(AccessoryModule*)::{lambda(AccessoryModule *)#1},std::allocator<AccessoryModule>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<AccessoryModule *,std::shared_ptr<AccessoryModule> ctu::SharedSynchronizable<AccessoryModule>::make_shared_ptr<AccessoryModule>(AccessoryModule*)::{lambda(AccessoryModule *)#1},std::allocator<AccessoryModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI15AccessoryModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI15AccessoryModuleE15make_shared_ptrIS1_EENSt3__110shared_pt"
                                "rIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI15AccessoryModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI15AccessoryModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<AccessoryModule> ctu::SharedSynchronizable<AccessoryModule>::make_shared_ptr<AccessoryModule>(AccessoryModule*)::{lambda(AccessoryModule*)#1}::operator() const(AccessoryModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ctu::SharedSynchronizable<AccessoryModule>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI15AccessoryModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F2110B08;
  void block[5] = v5;
  uint64_t v12 = v7;
  p_std::string::size_type shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = a2;
  dispatch_async(v8, block);
  size_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI15AccessoryModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c44_ZTSNSt3__110shared_ptrIK15AccessoryModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c44_ZTSNSt3__110shared_ptrIK15AccessoryModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void *_ZNSt3__110__function6__funcIZZN15AccessoryModule4initEvEUb_E3__0NS_9allocatorIS3_EEFvN3ctu2cf11CFSharedRefI9__CFErrorEENS_6vectorIN3abm13AccessoryInfoENS4_ISD_EEEEEED1Ev(void *a1)
{
  *a1 = &unk_1F2110B48;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZZN15AccessoryModule4initEvEUb_E3__0NS_9allocatorIS3_EEFvN3ctu2cf11CFSharedRefI9__CFErrorEENS_6vectorIN3abm13AccessoryInfoENS4_ISD_EEEEEED0Ev(void *__p)
{
  *std::string __p = &unk_1F2110B48;
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

char *_ZNKSt3__110__function6__funcIZZN15AccessoryModule4initEvEUb_E3__0NS_9allocatorIS3_EEFvN3ctu2cf11CFSharedRefI9__CFErrorEENS_6vectorIN3abm13AccessoryInfoENS4_ISD_EEEEEE7__cloneEv(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F2110B48;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN15AccessoryModule4initEvEUb_E3__0NS_9allocatorIS3_EEFvN3ctu2cf11CFSharedRefI9__CFErrorEENS_6vectorIN3abm13AccessoryInfoENS4_ISD_EEEEEE7__cloneEPNS0_6__baseISG_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F2110B48;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZZN15AccessoryModule4initEvEUb_E3__0NS_9allocatorIS3_EEFvN3ctu2cf11CFSharedRefI9__CFErrorEENS_6vectorIN3abm13AccessoryInfoENS4_ISD_EEEEEE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZNSt3__110__function6__funcIZZN15AccessoryModule4initEvEUb_E3__0NS_9allocatorIS3_EEFvN3ctu2cf11CFSharedRefI9__CFErrorEENS_6vectorIN3abm13AccessoryInfoENS4_ISD_EEEEEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZZN15AccessoryModule4initEvEUb_E3__0NS_9allocatorIS3_EEFvN3ctu2cf11CFSharedRefI9__CFErrorEENS_6vectorIN3abm13AccessoryInfoENS4_ISD_EEEEEEclEOSA_OSF_(void *a1, const void **a2, uint64_t a3)
{
  int64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *(unsigned char **)a3;
  uint64_t v6 = *(unsigned char **)(a3 + 8);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  uint64_t v7 = (std::__shared_weak_count *)a1[3];
  if (v7)
  {
    uint64_t v8 = a1[1];
    uint64_t v9 = std::__shared_weak_count::lock(v7);
    if (v9)
    {
      size_t v10 = v9;
      if (a1[2])
      {
        v14[0] = MEMORY[0x1E4F143A8];
        v14[1] = 1174405120;
        void v14[2] = ___ZZZN15AccessoryModule4initEvEUb_ENK3__0clEN3ctu2cf11CFSharedRefI9__CFErrorEENSt3__16vectorIN3abm13AccessoryInfoENS6_9allocatorIS9_EEEE_block_invoke;
        v14[3] = &__block_descriptor_tmp_49;
        v14[4] = v8;
        CFTypeRef cf = v4;
        if (v4) {
          CFRetain(v4);
        }
        std::string __p = 0;
        uint64_t v17 = 0;
        uint64_t v18 = 0;
        int64_t v11 = v6 - v5;
        if (v6 != v5)
        {
          if (0xAAAAAAAAAAAAAAABLL * (v11 >> 2) >= 0x1555555555555556) {
            std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v12 = (char *)operator new(v11);
          uint64_t v13 = &v12[4 * (v11 >> 2)];
          std::string __p = v12;
          uint64_t v18 = v13;
          memcpy(v12, v5, v11);
          uint64_t v17 = v13;
        }
        ctu::SharedSynchronizable<AccessoryModule>::execute_wrapped((uint64_t *)(v8 + 48), (uint64_t)v14);
        if (__p)
        {
          uint64_t v17 = __p;
          operator delete(__p);
        }
        if (cf) {
          CFRelease(cf);
        }
      }
      if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  if (v5) {
    operator delete(v5);
  }
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1C5B93000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, CFTypeRef cf, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v18) {
      goto LABEL_7;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    if (!v18)
    {
LABEL_7:
      if (!v17) {
LABEL_12:
      }
        _Unwind_Resume(exception_object);
LABEL_11:
      CFRelease(v17);
      goto LABEL_12;
    }
  }
  operator delete(v18);
  if (!v17) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

uint64_t _ZNKSt3__110__function6__funcIZZN15AccessoryModule4initEvEUb_E3__0NS_9allocatorIS3_EEFvN3ctu2cf11CFSharedRefI9__CFErrorEENS_6vectorIN3abm13AccessoryInfoENS4_ISD_EEEEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZN15AccessoryModule4initEvEUb_E3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZZN15AccessoryModule4initEvEUb_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN15AccessoryModule4initEvEUb_E3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN15AccessoryModule4initEvEUb_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN15AccessoryModule4initEvEUb_E3__0NS_9allocatorIS3_EEFvN3ctu2cf11CFSharedRefI9__CFErrorEENS_6vectorIN3abm13AccessoryInfoENS4_ISD_EEEEEE11target_typeEv()
{
  return &_ZTIZZN15AccessoryModule4initEvEUb_E3__0;
}

void ___ZZZN15AccessoryModule4initEvEUb_ENK3__0clEN3ctu2cf11CFSharedRefI9__CFErrorEENSt3__16vectorIN3abm13AccessoryInfoENS6_9allocatorIS9_EEEE_block_invoke(void *a1)
{
  uint64_t v3 = a1[4];
  uint64_t v2 = (const void *)a1[5];
  int64_t v11 = v2;
  if (v2) {
    CFRetain(v2);
  }
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  size_t v10 = 0;
  uint64_t v5 = (unsigned char *)a1[6];
  int64_t v4 = (unsigned char *)a1[7];
  int64_t v6 = v4 - v5;
  if (v4 == v5)
  {
    uint64_t v7 = 0;
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v6 >> 2) >= 0x1555555555555556) {
      std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(v6);
    uint64_t v8 = v7;
    size_t v10 = &v7[4 * (v6 >> 2)];
    memcpy(v7, v5, v6);
    uint64_t v9 = v10;
  }
  AccessoryModule::handleAccessoryConnectionEvent_sync(v3, (uint64_t *)&v11, (uint64_t)&v8);
  if (v7) {
    operator delete(v7);
  }
  if (v2) {
    CFRelease(v2);
  }
}

void sub_1C5B93208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12)
{
  if (v12) {
    operator delete(v12);
  }
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a12);
  _Unwind_Resume(a1);
}

const void *__copy_helper_block_e8_40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE48c61_ZTSNSt3__16vectorIN3abm13AccessoryInfoENS_9allocatorIS2_EEEE(void *a1, void *a2)
{
  uint64_t result = (const void *)a2[5];
  a1[5] = result;
  if (result) {
    uint64_t result = CFRetain(result);
  }
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  int64_t v6 = (unsigned char *)a2[6];
  uint64_t v5 = (unsigned char *)a2[7];
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 2) >= 0x1555555555555556) {
      std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(v7);
    a1[6] = v8;
    a1[7] = v8;
    uint64_t v9 = &v8[4 * (v7 >> 2)];
    a1[8] = v9;
    uint64_t result = memcpy(v8, v6, v7);
    a1[7] = v9;
  }
  return result;
}

void sub_1C5B932FC(_Unwind_Exception *a1)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 56) = v5;
    operator delete(v5);
  }
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(v2);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE48c61_ZTSNSt3__16vectorIN3abm13AccessoryInfoENS_9allocatorIS2_EEEE(void *a1)
{
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (const void *)a1[5];
  if (v3) {
    CFRelease(v3);
  }
}

void *___ZNK3ctu20SharedSynchronizableI15AccessoryModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void dispatch::async<void ctu::SharedSynchronizable<AccessoryModule>::execute_wrapped<AccessoryModule::initialize(dispatch::group_session)::$_0>(AccessoryModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<AccessoryModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<AccessoryModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *(uint64_t **)a1;
  uint64_t v3 = **(void **)a1;
  int64_t v4 = *(std::__shared_weak_count **)(v3 + 56);
  if (!v4 || (uint64_t v5 = *(void *)(v3 + 48), (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int64_t v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = (const void *)*MEMORY[0x1E4F4D150];
  size_t v9 = strlen((const char *)*MEMORY[0x1E4F4D150]);
  if (v9 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v12 = v9 | 7;
    }
    uint64_t v13 = v12 + 1;
    p_dst = (void **)operator new(v12 + 1);
    uint64_t v43 = v10;
    unint64_t v44 = v13 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_12;
  }
  HIBYTE(v44) = v9;
  p_dst = (void **)&__dst;
  if (v9) {
LABEL_12:
  }
    memmove(p_dst, v8, v10);
  *((unsigned char *)p_dst + v10) = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_56_5;
  void aBlock[4] = v3;
  void aBlock[5] = v5;
  xpc_object_t v51 = v7;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unint64_t v14 = _Block_copy(aBlock);
  xpc_object_t v52 = v14;
  Service::registerCommandHandler(v3, (uint64_t)&__dst, &v52);
  if (v14) {
    _Block_release(v14);
  }
  if (SHIBYTE(v44) < 0) {
    operator delete(__dst);
  }
  uint64_t v15 = (const void *)*MEMORY[0x1E4F4D160];
  size_t v16 = strlen((const char *)*MEMORY[0x1E4F4D160]);
  if (v16 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v17 = v16;
  if (v16 >= 0x17)
  {
    uint64_t v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v19 = v16 | 7;
    }
    uint64_t v20 = v19 + 1;
    p_p = operator new(v19 + 1);
    uint64_t v33 = v17;
    unint64_t v34 = v20 | 0x8000000000000000;
    std::string __p = p_p;
    goto LABEL_24;
  }
  HIBYTE(v34) = v16;
  p_p = &__p;
  if (v16) {
LABEL_24:
  }
    memmove(p_p, v15, v17);
  *((unsigned char *)p_p + v17) = 0;
  std::string __dst = (void **)MEMORY[0x1E4F143A8];
  uint64_t v43 = 1174405120;
  unint64_t v44 = (unint64_t)___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_57;
  uint64_t v45 = &__block_descriptor_tmp_70_0;
  uint64_t v46 = v3;
  uint64_t v47 = v5;
  uint64_t v48 = v7;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v21 = _Block_copy(&__dst);
  uint64_t v49 = v21;
  Service::registerCommandHandler(v3, (uint64_t)&__p, &v49);
  if (v21) {
    _Block_release(v21);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(__p);
  }
  BOOL v22 = (const void *)*MEMORY[0x1E4F4CC00];
  size_t v23 = strlen((const char *)*MEMORY[0x1E4F4CC00]);
  if (v23 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  BOOL v24 = (void *)v23;
  if (v23 >= 0x17)
  {
    uint64_t v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17) {
      uint64_t v26 = v23 | 7;
    }
    uint64_t v27 = v26 + 1;
    unint64_t v25 = operator new(v26 + 1);
    v40[1] = v24;
    unint64_t v41 = v27 | 0x8000000000000000;
    v40[0] = v25;
    goto LABEL_36;
  }
  HIBYTE(v41) = v23;
  unint64_t v25 = v40;
  if (v23) {
LABEL_36:
  }
    memmove(v25, v22, (size_t)v24);
  *((unsigned char *)v24 + (void)v25) = 0;
  std::string __p = (void *)MEMORY[0x1E4F143A8];
  uint64_t v33 = 1174405120;
  unint64_t v34 = (unint64_t)___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_71;
  size_t v35 = &__block_descriptor_tmp_78_0;
  uint64_t v36 = v3;
  uint64_t v37 = v5;
  xpc_object_t v38 = v7;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v28 = _Block_copy(&__p);
  xpc_object_t v39 = v28;
  Service::registerCommandHandler(v3, (uint64_t)v40, &v39);
  if (v28) {
    _Block_release(v28);
  }
  if (SHIBYTE(v41) < 0) {
    operator delete(v40[0]);
  }
  AccessoryModule::finishInitialization_sync((std::__shared_weak_count **)v3);
  if (v38) {
    std::__shared_weak_count::__release_weak(v38);
  }
  if (v48) {
    std::__shared_weak_count::__release_weak(v48);
  }
  if (v51) {
    std::__shared_weak_count::__release_weak(v51);
  }
  std::__shared_weak_count::__release_weak(v7);
  size_t v29 = v2[1];
  if (v29)
  {
    dispatch_group_leave(v29);
    CFDictionaryRef v30 = v2[1];
    if (v30) {
      dispatch_release(v30);
    }
  }
  operator delete(v2);
  uint64_t v31 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  operator delete(a1);
}

void sub_1C5B93834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,std::__shared_weak_count *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43)
{
  if (a18) {
    std::__shared_weak_count::__release_weak(a18);
  }
  if (a35) {
    std::__shared_weak_count::__release_weak(a35);
  }
  if (a43) {
    std::__shared_weak_count::__release_weak(a43);
  }
  std::__shared_weak_count::__release_weak(v45);
  uint64_t v47 = v44[1];
  if (v47)
  {
    dispatch_group_leave(v47);
    uint64_t v48 = v44[1];
    if (v48) {
      dispatch_release(v48);
    }
  }
  operator delete(v44);
  uint64_t v49 = (std::__shared_weak_count *)v43[2];
  if (v49)
  {
    if (!atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  operator delete(v43);
  _Unwind_Resume(a1);
}

void ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke(void *a1, uint64_t a2, void **a3)
{
  int64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = a1[4];
    int64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      if (a1[5])
      {
        v10[0] = MEMORY[0x1E4F143A8];
        v10[1] = 1174405120;
        _DWORD v10[2] = ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2;
        void v10[3] = &__block_descriptor_tmp_52_3;
        v10[4] = v6;
        size_t v9 = *a3;
        if (*a3) {
          size_t v9 = _Block_copy(v9);
        }
        long long aBlock = v9;
        ctu::SharedSynchronizable<AccessoryModule>::execute_wrapped((uint64_t *)(v6 + 48), (uint64_t)v10);
        if (aBlock) {
          _Block_release(aBlock);
        }
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v2 + 88))(v2))
  {
    LOWORD(v26) = abm::AccessorySimulate::create((abm::AccessorySimulate *)*(unsigned __int8 *)(v2 + 160));
    abm::AccessorySimulate::toDict((uint64_t *)&__dst, (abm::AccessorySimulate *)&v26);
    uint64_t v7 = *(void *)(a1 + 40);
    object[0] = __dst.__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    (*(void (**)(uint64_t, void, xpc_object_t *))(v7 + 16))(v7, 0, object);
    xpc_release(object[0]);
    xpc_release(__dst.__r_.__value_.__l.__data_);
    return;
  }
  memset(object, 170, 24);
  uint64_t v3 = (const void *)*MEMORY[0x1E4F4D150];
  size_t v4 = strlen((const char *)*MEMORY[0x1E4F4D150]);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v8 = v4 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_10;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
  p_dst = &__dst;
  if (v4) {
LABEL_10:
  }
    memmove(p_dst, v3, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  size_t v10 = (char *)operator new(0x28uLL);
  strcpy(v10, " rejected; ABM is shutting down ");
  int64_t v11 = std::string::append(&__dst, v10, 0x20uLL);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  xpc_object_t object[2] = (xpc_object_t)v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)xpc_object_t object = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  operator delete(v10);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    uint64_t v13 = *(NSObject **)(v2 + 80);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_13;
    }
LABEL_16:
    size_t v16 = object;
    if (SHIBYTE(object[2]) < 0) {
      size_t v16 = (xpc_object_t *)object[0];
    }
    LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
    _os_log_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
    uint64_t v17 = *(void *)(a1 + 40);
    unint64_t v14 = (uint64_t *)(a1 + 40);
    if (!v17) {
      goto LABEL_35;
    }
    goto LABEL_19;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  uint64_t v13 = *(NSObject **)(v2 + 80);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_16;
  }
LABEL_13:
  uint64_t v15 = *(void *)(a1 + 40);
  unint64_t v14 = (uint64_t *)(a1 + 40);
  if (v15)
  {
LABEL_19:
    __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    xpc_object_t v18 = (xpc_object_t)HIBYTE(object[2]);
    if (SHIBYTE(object[2]) < 0) {
      xpc_object_t v18 = object[1];
    }
    if (v18)
    {
      xpc_object_t v19 = xpc_dictionary_create(0, 0, 0);
      if (v19 || (xpc_object_t v19 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C8795EB0](v19) == MEMORY[0x1E4F14590])
        {
          xpc_retain(v19);
          xpc_object_t v20 = v19;
        }
        else
        {
          xpc_object_t v20 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v20 = xpc_null_create();
        xpc_object_t v19 = 0;
      }
      xpc_release(v19);
      xpc_object_t v21 = xpc_null_create();
      BOOL v22 = (void *)__dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
      xpc_release(v22);
      xpc_release(v21);
      if (SHIBYTE(object[2]) >= 0) {
        size_t v23 = object;
      }
      else {
        size_t v23 = (xpc_object_t *)object[0];
      }
      xpc_object_t v24 = xpc_string_create((const char *)v23);
      if (!v24) {
        xpc_object_t v24 = xpc_null_create();
      }
      xpc_dictionary_set_value(v20, (const char *)*MEMORY[0x1E4F4C240], v24);
      xpc_object_t v25 = xpc_null_create();
      xpc_release(v24);
      xpc_release(v25);
    }
    unsigned int v26 = -534716415;
    dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v14, &v26, (void **)&__dst.__r_.__value_.__l.__data_);
    xpc_release(__dst.__r_.__value_.__l.__data_);
  }
LABEL_35:
  if (SHIBYTE(object[2]) < 0) {
    operator delete(object[0]);
  }
}

void sub_1C5B93E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, xpc_object_t object, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_57(void *a1, void **a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      if (!a1[5])
      {
LABEL_11:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 1174405120;
      v12[2] = ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2_58;
      v12[3] = &__block_descriptor_tmp_67_2;
      v12[4] = v7;
      if (*a3)
      {
        size_t v10 = _Block_copy(*a3);
        int64_t v11 = *a2;
        long long aBlock = v10;
        xpc_object_t object = v11;
        if (v11)
        {
LABEL_6:
          xpc_retain(v11);
          goto LABEL_9;
        }
      }
      else
      {
        int64_t v11 = *a2;
        long long aBlock = 0;
        xpc_object_t object = v11;
        if (v11) {
          goto LABEL_6;
        }
      }
      xpc_object_t object = xpc_null_create();
LABEL_9:
      ctu::SharedSynchronizable<AccessoryModule>::execute_wrapped((uint64_t *)(v7 + 48), (uint64_t)v12);
      xpc_release(object);
      xpc_object_t object = 0;
      if (aBlock) {
        _Block_release(aBlock);
      }
      goto LABEL_11;
    }
  }
}

void ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2_58(void *a1)
{
  __p[3] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)a1[4];
  if (!(*(unsigned int (**)(uint64_t *))(*v2 + 88))(v2))
  {
    uint64_t v7 = (void *)a1[6];
    xpc_object_t object = v7;
    if (v7) {
      xpc_retain(v7);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    __int16 v16 = abm::AccessorySimulate::create();
    xpc_release(object);
    xpc_object_t object = 0;
    if ((v16 & 0x100) == 0)
    {
      uint64_t v17 = 3760250880;
      xpc_object_t v18 = v2[10];
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        xpc_object_t v19 = "Failed setting AccessorySimulate status, bad argument";
LABEL_105:
        _os_log_error_impl(&dword_1C59C6000, v18, OS_LOG_TYPE_ERROR, v19, (uint8_t *)__p, 2u);
        goto LABEL_102;
      }
      goto LABEL_102;
    }
    int v20 = v16 & 1;
    if (v20 == *((unsigned __int8 *)v2 + 160))
    {
LABEL_21:
      uint64_t v17 = 0;
      goto LABEL_102;
    }
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    if (!(void)xmmword_1EBBDC7D8)
    {
      uint64_t v27 = operator new(0x18uLL);
      MEMORY[0x1C87942F0](v27, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
      unsigned int v26 = operator new(0x20uLL);
      *unsigned int v26 = &unk_1F210A638;
      v26[1] = 0;
      v26[2] = 0;
      v26[3] = v27;
      uint64_t v28 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDC7D8 + 1);
      *(void *)&xmmword_1EBBDC7D8 = v27;
      *((void *)&xmmword_1EBBDC7D8 + 1) = v26;
      if (!v28)
      {
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
        __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
        goto LABEL_51;
      }
      if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    unsigned int v26 = (void *)*((void *)&xmmword_1EBBDC7D8 + 1);
    uint64_t v27 = (void *)xmmword_1EBBDC7D8;
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = xmmword_1EBBDC7D8;
    if (!*((void *)&xmmword_1EBBDC7D8 + 1))
    {
LABEL_52:
      pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
      unint64_t v34 = (const char *)*MEMORY[0x1E4F4CAE0];
      size_t v35 = strlen((const char *)*MEMORY[0x1E4F4CAE0]);
      if (v35 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      uint64_t v36 = (void *)v35;
      if (v35 >= 0x17)
      {
        uint64_t v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v35 | 7) != 0x17) {
          uint64_t v38 = v35 | 7;
        }
        uint64_t v39 = v38 + 1;
        uint64_t v37 = operator new(v38 + 1);
        __p[1] = v36;
        xpc_object_t __p[2] = (void *)(v39 | 0x8000000000000000);
        __p[0] = v37;
      }
      else
      {
        HIBYTE(__p[2]) = v35;
        uint64_t v37 = __p;
        if (!v35)
        {
LABEL_60:
          *((unsigned char *)v36 + (void)v37) = 0;
          if (SHIBYTE(__p[2]) >= 0) {
            BOOL v40 = (char *)__p;
          }
          else {
            BOOL v40 = (char *)__p[0];
          }
          BOOL v41 = ctu::cf::plist_adapter::set<BOOL>((uint64_t)v27, v20, v40, 1);
          if (SHIBYTE(__p[2]) < 0) {
            operator delete(__p[0]);
          }
          if (__dst.__r_.__value_.__l.__size_
            && !atomic_fetch_add((atomic_ullong *volatile)(__dst.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            (*(void (**)(std::string::size_type))(*(void *)__dst.__r_.__value_.__l.__size_ + 16))(__dst.__r_.__value_.__l.__size_);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
          }
          if (!v41) {
            goto LABEL_101;
          }
          pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
          if (!(void)xmmword_1EBBDC7D8)
          {
            uint64_t v43 = (uint64_t (***)(void, uint64_t))operator new(0x18uLL);
            MEMORY[0x1C87942F0](v43, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
            size_t v42 = operator new(0x20uLL);
            *size_t v42 = &unk_1F210A638;
            v42[1] = 0;
            v42[2] = 0;
            v42[3] = v43;
            unint64_t v44 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDC7D8 + 1);
            *(void *)&xmmword_1EBBDC7D8 = v43;
            *((void *)&xmmword_1EBBDC7D8 + 1) = v42;
            if (!v44)
            {
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
              __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v42;
              goto LABEL_76;
            }
            if (!atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          size_t v42 = (void *)*((void *)&xmmword_1EBBDC7D8 + 1);
          uint64_t v43 = (uint64_t (***)(void, uint64_t))xmmword_1EBBDC7D8;
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = xmmword_1EBBDC7D8;
          if (!*((void *)&xmmword_1EBBDC7D8 + 1))
          {
LABEL_77:
            pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
            size_t v45 = strlen(v34);
            if (v45 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            uint64_t v46 = (void *)v45;
            if (v45 >= 0x17)
            {
              uint64_t v48 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v45 | 7) != 0x17) {
                uint64_t v48 = v45 | 7;
              }
              uint64_t v49 = v48 + 1;
              uint64_t v47 = operator new(v48 + 1);
              __p[1] = v46;
              xpc_object_t __p[2] = (void *)(v49 | 0x8000000000000000);
              __p[0] = v47;
            }
            else
            {
              HIBYTE(__p[2]) = v45;
              uint64_t v47 = __p;
              if (!v45)
              {
LABEL_85:
                *((unsigned char *)v46 + (void)v47) = 0;
                int v50 = Preferences::getPreference<BOOL>(v43, (const char *)__p, (ctu::cf *)(v2 + 20));
                if (SHIBYTE(__p[2]) < 0) {
                  operator delete(__p[0]);
                }
                if (__dst.__r_.__value_.__l.__size_
                  && !atomic_fetch_add((atomic_ullong *volatile)(__dst.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
                {
                  (*(void (**)(std::string::size_type))(*(void *)__dst.__r_.__value_.__l.__size_ + 16))(__dst.__r_.__value_.__l.__size_);
                  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
                }
                if (v50)
                {
                  int v51 = *((unsigned __int8 *)v2 + 160);
                  if (v20 == v51)
                  {
                    xpc_object_t v52 = v2[10];
                    if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
                    {
                      char v53 = "Enabling";
                      if (!v51) {
                        char v53 = "Disabling";
                      }
                      LODWORD(__p[0]) = 136315138;
                      *(void **)((char *)__p + 4) = (void *)v53;
                      _os_log_impl(&dword_1C59C6000, v52, OS_LOG_TYPE_DEFAULT, "#I %s accessory simulation", (uint8_t *)__p, 0xCu);
                      xpc_object_t v52 = v2[10];
                    }
                    if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
                    {
                      LOWORD(__p[0]) = 0;
                      _os_log_impl(&dword_1C59C6000, v52, OS_LOG_TYPE_DEFAULT, "#I Stopping all delegates", (uint8_t *)__p, 2u);
                    }
                    uint64_t v54 = v2[13];
                    for (uint64_t i = v2[14]; v54 != i; v54 += 16)
                      (*(void (**)(void))(**(void **)v54 + 40))();
                    v59[0] = MEMORY[0x1E4F143A8];
                    v59[1] = 0x40000000;
                    v59[2] = ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_61;
                    v59[3] = &__block_descriptor_tmp_66_0;
                    v59[4] = v2;
                    ctu::SharedSynchronizable<AccessoryModule>::execute_wrapped(v2 + 6, (uint64_t)v59);
                    goto LABEL_21;
                  }
                }
LABEL_101:
                uint64_t v17 = 3760250880;
                xpc_object_t v18 = v2[10];
                if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
                {
                  LOWORD(__p[0]) = 0;
                  xpc_object_t v19 = "Failed setting AccessorySimulate status to preferences";
                  goto LABEL_105;
                }
LABEL_102:
                xpc_object_t v56 = xpc_null_create();
                uint64_t v57 = a1[5];
                __p[0] = v56;
                xpc_object_t v58 = xpc_null_create();
                (*(void (**)(uint64_t, uint64_t, void **))(v57 + 16))(v57, v17, __p);
                xpc_release(__p[0]);
                xpc_release(v58);
                return;
              }
            }
            memmove(v47, v34, (size_t)v46);
            goto LABEL_85;
          }
LABEL_76:
          atomic_fetch_add_explicit(v42 + 1, 1uLL, memory_order_relaxed);
          goto LABEL_77;
        }
      }
      memmove(v37, v34, (size_t)v36);
      goto LABEL_60;
    }
LABEL_51:
    atomic_fetch_add_explicit(v26 + 1, 1uLL, memory_order_relaxed);
    goto LABEL_52;
  }
  memset(__p, 170, 24);
  uint64_t v3 = (const void *)*MEMORY[0x1E4F4D160];
  size_t v4 = strlen((const char *)*MEMORY[0x1E4F4D160]);
  if (v4 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v8 = v4 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_11;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
  p_dst = &__dst;
  if (v4) {
LABEL_11:
  }
    memmove(p_dst, v3, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  size_t v10 = (char *)operator new(0x28uLL);
  strcpy(v10, " rejected; ABM is shutting down ");
  int64_t v11 = std::string::append(&__dst, v10, 0x20uLL);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  xpc_object_t __p[2] = (void *)v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  operator delete(v10);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    uint64_t v13 = v2[10];
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
LABEL_23:
    xpc_object_t v21 = __p;
    if (SHIBYTE(__p[2]) < 0) {
      xpc_object_t v21 = (void **)__p[0];
    }
    LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v21;
    _os_log_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
    uint64_t v22 = a1[5];
    unint64_t v14 = a1 + 5;
    if (!v22) {
      goto LABEL_48;
    }
    goto LABEL_26;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  uint64_t v13 = v2[10];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_23;
  }
LABEL_14:
  uint64_t v15 = a1[5];
  unint64_t v14 = a1 + 5;
  if (v15)
  {
LABEL_26:
    __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    size_t v23 = (void *)HIBYTE(__p[2]);
    if (SHIBYTE(__p[2]) < 0) {
      size_t v23 = __p[1];
    }
    if (v23)
    {
      xpc_object_t v24 = xpc_dictionary_create(0, 0, 0);
      if (v24 || (xpc_object_t v24 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C8795EB0](v24) == MEMORY[0x1E4F14590])
        {
          xpc_retain(v24);
          xpc_object_t v25 = v24;
        }
        else
        {
          xpc_object_t v25 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v25 = xpc_null_create();
        xpc_object_t v24 = 0;
      }
      xpc_release(v24);
      xpc_object_t v29 = xpc_null_create();
      CFDictionaryRef v30 = (void *)__dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
      xpc_release(v30);
      xpc_release(v29);
      if (SHIBYTE(__p[2]) >= 0) {
        uint64_t v31 = __p;
      }
      else {
        uint64_t v31 = (void **)__p[0];
      }
      xpc_object_t v32 = xpc_string_create((const char *)v31);
      if (!v32) {
        xpc_object_t v32 = xpc_null_create();
      }
      xpc_dictionary_set_value(v25, (const char *)*MEMORY[0x1E4F4C240], v32);
      xpc_object_t v33 = xpc_null_create();
      xpc_release(v32);
      xpc_release(v33);
    }
    unsigned int v61 = -534716415;
    dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v14, &v61, (void **)&__dst.__r_.__value_.__l.__data_);
    xpc_release(__dst.__r_.__value_.__l.__data_);
  }
LABEL_48:
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_61(uint64_t a1)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 160))
  {
    uint64_t v2 = *(void *)(v1 + 152);
    if (v2)
    {
      if (v2 == v1 + 128)
      {
        xpc_object_t v63 = v62;
        (*(void (**)(uint64_t, void *))(*(void *)v2 + 24))(v2, v62);
LABEL_11:
        std::string::size_type v5 = *(NSObject **)(v1 + 64);
        dispatch_object_t object = v5;
        if (v5) {
          dispatch_retain(v5);
        }
        AccessorySimulatorDelegate::create(v62, &object, (std::__shared_weak_count_vtbl **)buf);
        std::vector<std::shared_ptr<AccessoriesDelegateBase>>::__assign_with_size[abi:ne180100]<std::shared_ptr<AccessoriesDelegateBase> const*,std::shared_ptr<AccessoriesDelegateBase> const*>(v1 + 104, buf, &v49, 1uLL);
        uint64_t v6 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8]
          && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        if (object) {
          dispatch_release(object);
        }
        uint64_t v7 = v63;
        if (v63 == v62)
        {
          (*(void (**)(void *))(v62[0] + 32))(v62);
          if (!*(void *)(v1 + 88)) {
            return;
          }
          goto LABEL_48;
        }
        goto LABEL_45;
      }
      uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2);
    }
    xpc_object_t v63 = (void *)v2;
    goto LABEL_11;
  }
  uint64_t v3 = v1 + 128;
  uint64_t v4 = *(void *)(v1 + 152);
  if (!v4) {
    goto LABEL_9;
  }
  if (v4 != v3)
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
LABEL_9:
    unsigned int v61 = (void *)v4;
    goto LABEL_22;
  }
  unsigned int v61 = v60;
  (*(void (**)(uint64_t, void *))(*(void *)v3 + 24))(v1 + 128, v60);
LABEL_22:
  uint64_t v8 = *(NSObject **)(v1 + 64);
  dispatch_object_t v46 = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  CoreAccessoriesDelegate::create(v60, &v46, (std::__shared_weak_count_vtbl **)buf);
  uint64_t v9 = *(void *)(v1 + 152);
  if (!v9) {
    goto LABEL_27;
  }
  if (v9 != v3)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
LABEL_27:
    unint64_t v59 = (void *)v9;
    goto LABEL_29;
  }
  unint64_t v59 = v58;
  (*(void (**)(uint64_t, void *))(*(void *)v3 + 24))(v1 + 128, v58);
LABEL_29:
  size_t v10 = *(NSObject **)(v1 + 64);
  dispatch_object_t v45 = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  IOKitAccessoriesDelegate::create(v58, &v45, (std::__shared_weak_count_vtbl **)&v49);
  std::vector<std::shared_ptr<AccessoriesDelegateBase>>::__assign_with_size[abi:ne180100]<std::shared_ptr<AccessoriesDelegateBase> const*,std::shared_ptr<AccessoriesDelegateBase> const*>(v1 + 104, buf, &v50, 2uLL);
  int64_t v11 = (std::__shared_weak_count *)*((void *)&v49 + 1);
  if (*((void *)&v49 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v49 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (v45) {
    dispatch_release(v45);
  }
  if (v59 == v58)
  {
    (*(void (**)(void *))(v58[0] + 32))(v58);
    uint64_t v13 = v46;
    if (v46) {
LABEL_43:
    }
      dispatch_release(v13);
  }
  else
  {
    if (v59) {
      (*(void (**)(void *))(*v59 + 40))(v59);
    }
    uint64_t v13 = v46;
    if (v46) {
      goto LABEL_43;
    }
  }
  uint64_t v7 = v61;
  if (v61 == v60)
  {
    (*(void (**)(void *))(v60[0] + 32))(v60);
    if (!*(void *)(v1 + 88)) {
      return;
    }
LABEL_48:
    unint64_t v14 = *(NSObject **)(v1 + 80);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C59C6000, v14, OS_LOG_TYPE_DEFAULT, "#I Requesting modem soft reset due to accessory mode change", buf, 2u);
    }
    xpc_object_t v15 = xpc_dictionary_create(0, 0, 0);
    if (v15 || (xpc_object_t v15 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C8795EB0](v15) == MEMORY[0x1E4F14590])
      {
        xpc_retain(v15);
        xpc_object_t v16 = v15;
      }
      else
      {
        xpc_object_t v16 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v16 = xpc_null_create();
      xpc_object_t v15 = 0;
    }
    xpc_release(v15);
    xpc_object_t v17 = xpc_string_create((const char *)*MEMORY[0x1E4F4C6F0]);
    if (!v17) {
      xpc_object_t v17 = xpc_null_create();
    }
    xpc_dictionary_set_value(v16, (const char *)*MEMORY[0x1E4F4C690], v17);
    xpc_object_t v18 = xpc_null_create();
    xpc_release(v17);
    xpc_release(v18);
    xpc_object_t v19 = xpc_string_create((const char *)*MEMORY[0x1E4F4D138]);
    if (!v19) {
      xpc_object_t v19 = xpc_null_create();
    }
    xpc_dictionary_set_value(v16, (const char *)*MEMORY[0x1E4F4CA38], v19);
    xpc_object_t v20 = xpc_null_create();
    xpc_release(v19);
    xpc_release(v20);
    unint64_t v57 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v21 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v56[7] = v21;
    v56[8] = v21;
    v56[5] = v21;
    v56[6] = v21;
    v56[3] = v21;
    v56[4] = v21;
    v56[1] = v21;
    v56[2] = v21;
    long long v55 = v21;
    v56[0] = v21;
    *(_OWORD *)std::string __p = v21;
    long long v54 = v21;
    long long v51 = v21;
    long long v52 = v21;
    long long v49 = v21;
    long long v50 = v21;
    *(_OWORD *)long long buf = v21;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v49, (uint64_t)"User requested to ", 18);
    if (*(unsigned char *)(v1 + 160)) {
      uint64_t v22 = "enable";
    }
    else {
      uint64_t v22 = "disable";
    }
    if (*(unsigned char *)(v1 + 160)) {
      uint64_t v23 = 6;
    }
    else {
      uint64_t v23 = 7;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v49, (uint64_t)v22, v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v49, (uint64_t)"Accessory Simulation", 20);
    if ((BYTE8(v55) & 0x10) != 0)
    {
      uint64_t v26 = v55;
      if ((unint64_t)v55 < *((void *)&v52 + 1))
      {
        *(void *)&long long v55 = *((void *)&v52 + 1);
        uint64_t v26 = *((void *)&v52 + 1);
      }
      uint64_t v27 = (const void *)v52;
      size_t v24 = v26 - v52;
      if ((unint64_t)(v26 - v52) > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_107;
      }
    }
    else
    {
      if ((BYTE8(v55) & 8) == 0)
      {
        size_t v24 = 0;
        HIBYTE(v44) = 0;
        p_dst = (void **)&__dst;
        goto LABEL_83;
      }
      uint64_t v27 = (const void *)*((void *)&v50 + 1);
      size_t v24 = *((void *)&v51 + 1) - *((void *)&v50 + 1);
      if (*((void *)&v51 + 1) - *((void *)&v50 + 1) > 0x7FFFFFFFFFFFFFF7uLL) {
LABEL_107:
      }
        std::string::__throw_length_error[abi:ne180100]();
    }
    if (v24 >= 0x17)
    {
      uint64_t v28 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v24 | 7) != 0x17) {
        uint64_t v28 = v24 | 7;
      }
      uint64_t v29 = v28 + 1;
      p_dst = (void **)operator new(v28 + 1);
      size_t v43 = v24;
      int64_t v44 = v29 | 0x8000000000000000;
      std::string __dst = p_dst;
    }
    else
    {
      HIBYTE(v44) = v24;
      p_dst = (void **)&__dst;
      if (!v24)
      {
LABEL_83:
        *((unsigned char *)p_dst + v24) = 0;
        if (v44 >= 0) {
          CFDictionaryRef v30 = (const char *)&__dst;
        }
        else {
          CFDictionaryRef v30 = (const char *)__dst;
        }
        xpc_object_t v31 = xpc_string_create(v30);
        if (!v31) {
          xpc_object_t v31 = xpc_null_create();
        }
        xpc_dictionary_set_value(v16, (const char *)*MEMORY[0x1E4F4C8F0], v31);
        xpc_object_t v32 = xpc_null_create();
        xpc_release(v31);
        xpc_release(v32);
        if (SHIBYTE(v44) < 0) {
          operator delete(__dst);
        }
        xpc_object_t v33 = (const void *)*MEMORY[0x1E4F4C638];
        size_t v34 = strlen((const char *)*MEMORY[0x1E4F4C638]);
        if (v34 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v35 = v34;
        if (v34 >= 0x17)
        {
          uint64_t v37 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v34 | 7) != 0x17) {
            uint64_t v37 = v34 | 7;
          }
          uint64_t v38 = v37 + 1;
          uint64_t v36 = (void **)operator new(v37 + 1);
          size_t v43 = v35;
          int64_t v44 = v38 | 0x8000000000000000;
          std::string __dst = v36;
        }
        else
        {
          HIBYTE(v44) = v34;
          uint64_t v36 = (void **)&__dst;
          if (!v34)
          {
            LOBYTE(__dst) = 0;
            xpc_object_t v41 = v16;
            if (v16)
            {
LABEL_94:
              xpc_retain(v16);
LABEL_100:
              BOOL v40 = 0;
              Service::runCommand(v1, (uint64_t)&__dst, &v41, &v40);
              xpc_release(v41);
              xpc_object_t v41 = 0;
              if (SHIBYTE(v44) < 0) {
                operator delete(__dst);
              }
              *(void *)long long buf = *MEMORY[0x1E4FBA408];
              uint64_t v39 = *(void *)(MEMORY[0x1E4FBA408] + 72);
              *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x1E4FBA408] + 64);
              *(void *)&long long v49 = v39;
              *((void *)&v49 + 1) = MEMORY[0x1E4FBA470] + 16;
              if (SHIBYTE(v54) < 0) {
                operator delete(__p[1]);
              }
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              MEMORY[0x1C8795140](v56);
              xpc_release(v16);
              return;
            }
LABEL_99:
            xpc_object_t v41 = xpc_null_create();
            goto LABEL_100;
          }
        }
        memmove(v36, v33, v35);
        *((unsigned char *)v36 + v35) = 0;
        xpc_object_t v41 = v16;
        if (v16) {
          goto LABEL_94;
        }
        goto LABEL_99;
      }
    }
    memmove(p_dst, v27, v24);
    goto LABEL_83;
  }
LABEL_45:
  if (v7) {
    (*(void (**)(void *))(*v7 + 40))(v7);
  }
  if (*(void *)(v1 + 88)) {
    goto LABEL_48;
  }
}

void sub_1C5B95578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, dispatch_object_t object, dispatch_object_t a18, dispatch_object_t a19, char a20)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_71(void *a1, void **a2, const void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      if (!a1[5])
      {
LABEL_11:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 1174405120;
      v12[2] = ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2_72;
      v12[3] = &__block_descriptor_tmp_75_2;
      v12[4] = v7;
      if (*a3)
      {
        size_t v10 = _Block_copy(*a3);
        int64_t v11 = *a2;
        long long aBlock = v10;
        xpc_object_t object = v11;
        if (v11)
        {
LABEL_6:
          xpc_retain(v11);
          goto LABEL_9;
        }
      }
      else
      {
        int64_t v11 = *a2;
        long long aBlock = 0;
        xpc_object_t object = v11;
        if (v11) {
          goto LABEL_6;
        }
      }
      xpc_object_t object = xpc_null_create();
LABEL_9:
      ctu::SharedSynchronizable<AccessoryModule>::execute_wrapped((uint64_t *)(v7 + 48), (uint64_t)v12);
      xpc_release(object);
      xpc_object_t object = 0;
      if (aBlock) {
        _Block_release(aBlock);
      }
      goto LABEL_11;
    }
  }
}

void ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2_72(void *a1)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)a1[4];
  if ((*(unsigned int (**)(void *))(*v2 + 88))(v2))
  {
    memset(__p, 170, 24);
    uint64_t v3 = (const void *)*MEMORY[0x1E4F4CC00];
    size_t v4 = strlen((const char *)*MEMORY[0x1E4F4CC00]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v5 = v4;
    if (v4 >= 0x17)
    {
      uint64_t v11 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17) {
        uint64_t v11 = v4 | 7;
      }
      uint64_t v12 = v11 + 1;
      p_dst = (std::string *)operator new(v11 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_14:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        uint64_t v13 = (char *)operator new(0x28uLL);
        strcpy(v13, " rejected; ABM is shutting down ");
        unint64_t v14 = std::string::append(&__dst, v13, 0x20uLL);
        long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        xpc_object_t __p[2] = (void *)v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        operator delete(v13);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          xpc_object_t v16 = v2[10];
          if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
LABEL_16:
            uint64_t v18 = a1[5];
            xpc_object_t v17 = a1 + 5;
            if (!v18)
            {
LABEL_62:
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              return;
            }
LABEL_22:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            long long v21 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0) {
              long long v21 = __p[1];
            }
            if (v21)
            {
              xpc_object_t v22 = xpc_dictionary_create(0, 0, 0);
              if (v22 || (xpc_object_t v22 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8795EB0](v22) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v22);
                  xpc_object_t v23 = v22;
                }
                else
                {
                  xpc_object_t v23 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v23 = xpc_null_create();
                xpc_object_t v22 = 0;
              }
              xpc_release(v22);
              xpc_object_t v34 = xpc_null_create();
              size_t v35 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
              xpc_release(v35);
              xpc_release(v34);
              if (SHIBYTE(__p[2]) >= 0) {
                uint64_t v36 = __p;
              }
              else {
                uint64_t v36 = (void **)__p[0];
              }
              xpc_object_t v37 = xpc_string_create((const char *)v36);
              if (!v37) {
                xpc_object_t v37 = xpc_null_create();
              }
              xpc_dictionary_set_value(v23, (const char *)*MEMORY[0x1E4F4C240], v37);
              xpc_object_t v38 = xpc_null_create();
              xpc_release(v37);
              xpc_release(v38);
            }
            LODWORD(object) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v17, (unsigned int *)&object, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_62;
          }
        }
        else
        {
          xpc_object_t v16 = v2[10];
          if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_16;
          }
        }
        xpc_object_t v19 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          xpc_object_t v19 = (void **)__p[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v19;
        _os_log_impl(&dword_1C59C6000, v16, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        uint64_t v20 = a1[5];
        xpc_object_t v17 = a1 + 5;
        if (!v20) {
          goto LABEL_62;
        }
        goto LABEL_22;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_14;
  }
  uint64_t v7 = 3760250880;
  uint64_t v8 = (xpc_object_t *)(a1 + 6);
  if (MEMORY[0x1C8795EB0](a1[6]) == MEMORY[0x1E4F14590])
  {
    uint64_t v9 = (const char *)*MEMORY[0x1E4F4CC00];
    if (xpc_dictionary_get_value(*v8, (const char *)*MEMORY[0x1E4F4CC00]))
    {
      memset(&__dst, 170, sizeof(__dst));
      xpc_object_t value = xpc_dictionary_get_value(*v8, v9);
      xpc_object_t object = value;
      if (value) {
        xpc_retain(value);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      __p[1] = 0;
      xpc_object_t __p[2] = 0;
      xpc::dyn_cast_or_default();
      xpc_release(object);
      xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      __p[0] = a1 + 6;
      size_t v24 = &__dst;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        size_t v24 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      __p[1] = v24;
      xpc::dict::object_proxy::operator xpc::dict((uint64_t)__p, &object);
      xpc_object_t v25 = (uint64_t *)v2[13];
      uint64_t v26 = (uint64_t *)v2[14];
      if (v25 == v26)
      {
        int v30 = 0;
      }
      else
      {
        int v27 = 0;
        do
        {
          uint64_t v28 = *v25;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v40, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
          }
          else {
            std::string v40 = __dst;
          }
          xpc_object_t v39 = object;
          if (object) {
            xpc_retain(object);
          }
          else {
            xpc_object_t v39 = xpc_null_create();
          }
          int v29 = (*(uint64_t (**)(uint64_t, std::string *, xpc_object_t *))(*(void *)v28 + 24))(v28, &v40, &v39);
          xpc_release(v39);
          xpc_object_t v39 = 0;
          if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v40.__r_.__value_.__l.__data_);
          }
          if (v29) {
            int v27 = 1;
          }
          v25 += 2;
        }
        while (v25 != v26);
        int v30 = v27;
      }
      xpc_release(object);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      if (v30) {
        uint64_t v7 = 0;
      }
      else {
        uint64_t v7 = 3760250880;
      }
    }
  }
  xpc_object_t v31 = xpc_null_create();
  uint64_t v32 = a1[5];
  __p[0] = v31;
  xpc_object_t v33 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, void **))(v32 + 16))(v32, v7, __p);
  xpc_release(__p[0]);
  xpc_release(v33);
}

void sub_1C5B95DBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, xpc_object_t object, xpc_object_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t __cxx_global_var_init_22()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

uint64_t __cxx_global_var_init_23()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::Gestalt>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

void abm::AWDHelperSetConnection(uint64_t *a1)
{
  uint64_t v1 = a1[1];
  uint64_t v5 = *a1;
  uint64_t v6 = (std::__shared_weak_count *)v1;
  if (v1) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 8), 1uLL, memory_order_relaxed);
  }
  abm::AWDHelper::create(&v5, &v7);
  pthread_mutex_lock(&ctu::Singleton<abm::AWDHelper,abm::AWDHelper,ctu::PthreadMutexGuardPolicy<abm::AWDHelper>>::sInstance);
  uint64_t v2 = (std::__shared_weak_count *)off_1EBBDC8D0;
  *(_OWORD *)&qword_1EBBDC8C8 = v7;
  long long v7 = 0uLL;
  pthread_mutex_unlock(&ctu::Singleton<abm::AWDHelper,abm::AWDHelper,ctu::PthreadMutexGuardPolicy<abm::AWDHelper>>::sInstance);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  size_t v4 = v6;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1C5B960E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C5B96104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t abm::isWISServerAvailable(abm *this)
{
  return 1;
}

void abm::AWDHelper::create(uint64_t *a1@<X0>, void *a2@<X8>)
{
  size_t v4 = operator new(0x10uLL);
  uint64_t v5 = v4;
  uint64_t v6 = *a1;
  long long v7 = (std::__shared_weak_count *)a1[1];
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    void *v4 = v6;
    v4[1] = v7;
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    void *v4 = v6;
    v4[1] = 0;
  }
  *a2 = v4;
  uint64_t v8 = operator new(0x20uLL);
  void *v8 = &unk_1F2110D28;
  v8[1] = 0;
  uint64_t v8[2] = 0;
  v8[3] = v5;
  a2[1] = v8;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_1C5B9621C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (v9)
  {
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(v10);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void abm::AWDHelperGetConnection(void *a1@<X8>)
{
  pthread_mutex_lock(&ctu::Singleton<abm::AWDHelper,abm::AWDHelper,ctu::PthreadMutexGuardPolicy<abm::AWDHelper>>::sInstance);
  uint64_t v3 = (void *)qword_1EBBDC8C8;
  if (!qword_1EBBDC8C8)
  {
    size_t v4 = (wis::WISServerConnection *)operator new(0x10uLL);
    wis::WISServerConnection::WISServerConnection(v4);
    xpc_object_t v16 = v4;
    uint64_t v5 = (std::__shared_weak_count *)operator new(0x20uLL);
    v5->__shared_owners_ = 0;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2110D78;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
    xpc_object_t v17 = v5;
    unint64_t v14 = v4;
    long long v15 = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    abm::AWDHelper::create((uint64_t *)&v14, &v13);
    uint64_t v6 = v15;
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    long long v7 = v17;
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    long long v8 = v13;
    long long v13 = 0uLL;
    uint64_t v9 = (std::__shared_weak_count *)off_1EBBDC8D0;
    *(_OWORD *)&qword_1EBBDC8C8 = v8;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    size_t v10 = (std::__shared_weak_count *)*((void *)&v13 + 1);
    if (*((void *)&v13 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    uint64_t v3 = (void *)qword_1EBBDC8C8;
  }
  uint64_t v11 = (std::__shared_weak_count *)off_1EBBDC8D0;
  if (off_1EBBDC8D0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDC8D0 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<abm::AWDHelper,abm::AWDHelper,ctu::PthreadMutexGuardPolicy<abm::AWDHelper>>::sInstance);
  uint64_t v12 = v3[1];
  *a1 = *v3;
  a1[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  if (v11)
  {
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1C5B964E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  pthread_mutex_unlock(&ctu::Singleton<abm::AWDHelper,abm::AWDHelper,ctu::PthreadMutexGuardPolicy<abm::AWDHelper>>::sInstance);
  _Unwind_Resume(a1);
}

uint64_t ctu::PthreadMutexGuardPolicy<abm::AWDHelper>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void std::__shared_ptr_pointer<abm::AWDHelper *,std::shared_ptr<abm::AWDHelper>::__shared_ptr_default_delete<abm::AWDHelper,abm::AWDHelper>,std::allocator<abm::AWDHelper>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<abm::AWDHelper *,std::shared_ptr<abm::AWDHelper>::__shared_ptr_default_delete<abm::AWDHelper,abm::AWDHelper>,std::allocator<abm::AWDHelper>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count ***)(a1 + 24);
  if (v1)
  {
    uint64_t v2 = v1[1];
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      uint64_t v3 = v1;
    }
    else
    {
      uint64_t v3 = v1;
    }
    operator delete(v3);
  }
}

uint64_t std::__shared_ptr_pointer<abm::AWDHelper *,std::shared_ptr<abm::AWDHelper>::__shared_ptr_default_delete<abm::AWDHelper,abm::AWDHelper>,std::allocator<abm::AWDHelper>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C5BCD85DLL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C5BCD85DLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C5BCD85DLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C5BCD85DLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::__shared_ptr_pointer<wis::WISServerConnection *,std::shared_ptr<wis::WISServerConnection>::__shared_ptr_default_delete<wis::WISServerConnection,wis::WISServerConnection>,std::allocator<wis::WISServerConnection>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<wis::WISServerConnection *,std::shared_ptr<wis::WISServerConnection>::__shared_ptr_default_delete<wis::WISServerConnection,wis::WISServerConnection>,std::allocator<wis::WISServerConnection>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(wis::WISServerConnection **)(a1 + 24);
  if (v1)
  {
    wis::WISServerConnection::~WISServerConnection(v1);
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<wis::WISServerConnection *,std::shared_ptr<wis::WISServerConnection>::__shared_ptr_default_delete<wis::WISServerConnection,wis::WISServerConnection>,std::allocator<wis::WISServerConnection>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C5BCD933) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C5BCD933 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C5BCD933)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C5BCD933 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t __cxx_global_var_init_18()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<abm::AWDHelper>::~PthreadMutexGuardPolicy, &ctu::Singleton<abm::AWDHelper,abm::AWDHelper,ctu::PthreadMutexGuardPolicy<abm::AWDHelper>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

BOOL BasebandStats::initFromDisk(BasebandStats *this)
{
  size_t v24 = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  uint64_t v2 = off_1EBBDCA58;
  if (!off_1EBBDCA58)
  {
    SharedData::create_default_global(__p);
    long long v3 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v4 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
    off_1EBBDCA58 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = off_1EBBDCA58;
  }
  uint64_t v6 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
  if (*(&off_1EBBDCA58 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA58 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  char v23 = 13;
  strcpy((char *)__p, "HealthEventDB");
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 40));
  Preferences::getPreference<__CFDictionary const*>((uint64_t (***)(void, uint64_t))v2, (const char *)__p, &v24);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 40));
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    long long v7 = v24;
    if (v24) {
      goto LABEL_16;
    }
    return 0;
  }
  long long v7 = v24;
  if (!v24) {
    return 0;
  }
LABEL_16:
  unsigned char v21[4] = v7;
  CFRetain(v7);
  __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)__p, (const __CFDictionary *)v7);
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v21, "KeyBasebandStats");
  long long v8 = (__CFString *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)__p, v21[0]);
  MEMORY[0x1C8794290](v21);
  v21[3] = v8;
  if (v8) {
    uint64_t v9 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    uint64_t v9 = 0;
  }
  BOOL v10 = v9 != 0;
  if (v9)
  {
    v21[2] = v8;
    if (v8) {
      CFRetain(v8);
    }
    v21[0] = (__CFString *)0xAAAAAAAAAAAAAAAALL;
    v21[1] = (__CFString *)0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v21, (const __CFDictionary *)v8);
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v25, (const char *)*MEMORY[0x1E4F4CF20]);
    int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v21, v25);
    uint64_t v12 = (ctu::cf::MakeCFString *)MEMORY[0x1C8794290](&v25);
    *((void *)this + 1) = Int;
    ctu::cf::MakeCFString::MakeCFString(v12, (const char *)*MEMORY[0x1E4F4CF78]);
    int v13 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v21, v25);
    unint64_t v14 = (ctu::cf::MakeCFString *)MEMORY[0x1C8794290](&v25);
    *((void *)this + 2) = v13;
    ctu::cf::MakeCFString::MakeCFString(v14, (const char *)*MEMORY[0x1E4F4CD70]);
    int v15 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v21, v25);
    xpc_object_t v16 = (ctu::cf::MakeCFString *)MEMORY[0x1C8794290](&v25);
    *((_DWORD *)this + 8) = v15;
    ctu::cf::MakeCFString::MakeCFString(v16, (const char *)*MEMORY[0x1E4F4CD78]);
    int v17 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v21, v25);
    uint64_t v18 = (ctu::cf::MakeCFString *)MEMORY[0x1C8794290](&v25);
    *((_DWORD *)this + 9) = v17;
    ctu::cf::MakeCFString::MakeCFString(v18, (const char *)*MEMORY[0x1E4F4CE98]);
    unsigned int v19 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v21, v25);
    MEMORY[0x1C8794290](&v25);
    *((void *)this + 3) = v19;
    MEMORY[0x1C87942E0](v21);
    if (v8) {
      CFRelease(v8);
    }
  }
  if (v8) {
    CFRelease(v8);
  }
  MEMORY[0x1C87942E0](__p);
  CFRelease(v7);
  return v10;
}

void sub_1C5B96C50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va4, a2);
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  long long v7 = va_arg(va2, const void *);
  va_copy(va3, va2);
  uint64_t v9 = va_arg(va3, const void *);
  va_copy(va4, va3);
  uint64_t v11 = va_arg(va4, const void *);
  MEMORY[0x1C8794290](v2 - 56);
  MEMORY[0x1C87942E0]((uint64_t *)va);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va2);
  MEMORY[0x1C87942E0](va4);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va3);
  _Unwind_Resume(a1);
}

void BasebandStats::updateStats(uint64_t a1@<X0>, xpc_object_t *a2@<X1>, __CFDictionary **a3@<X8>)
{
  uint64_t v6 = (const char *)*MEMORY[0x1E4F4CF20];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4CF20]))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a2, v6);
    xpc_object_t object = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(void *)(a1 + 8) = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
    if (!*(void *)(a1 + 24)) {
      *(void *)(a1 + 24) = *(void *)(a1 + 8);
    }
  }
  long long v8 = (const char *)*MEMORY[0x1E4F4CF78];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4CF78]))
  {
    xpc_object_t v9 = xpc_dictionary_get_value(*a2, v8);
    xpc_object_t object = v9;
    if (v9) {
      xpc_retain(v9);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(void *)(a1 + 16) = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  BOOL v10 = (const char *)*MEMORY[0x1E4F4CD70];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4CD70]))
  {
    xpc_object_t v11 = xpc_dictionary_get_value(*a2, v10);
    xpc_object_t object = v11;
    if (v11) {
      xpc_retain(v11);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(_DWORD *)(a1 + 32) = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  uint64_t v12 = (const char *)*MEMORY[0x1E4F4CD78];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4CD78]))
  {
    xpc_object_t v13 = xpc_dictionary_get_value(*a2, v12);
    xpc_object_t object = v13;
    if (v13) {
      xpc_retain(v13);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(_DWORD *)(a1 + 36) = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  unint64_t v14 = (const char *)*MEMORY[0x1E4F4CE98];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4CE98]))
  {
    xpc_object_t v15 = xpc_dictionary_get_value(*a2, v14);
    xpc_object_t object = v15;
    if (v15) {
      xpc_retain(v15);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(void *)(a1 + 24) = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  BasebandStats::getCurrentBasebandStats((BasebandStats *)a1, a3);
}

void sub_1C5B96F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void BasebandStats::getCurrentBasebandStats(BasebandStats *this@<X0>, __CFDictionary **a2@<X8>)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  long long v7 = Mutable;
  if (Mutable)
  {
    ctu::cf::update<char const*,long>(Mutable, (const __CFString **)*MEMORY[0x1E4F4CF20], *((const void **)this + 1), v4, v6);
    ctu::cf::update<char const*,long>(v7, (const __CFString **)*MEMORY[0x1E4F4CF78], *((const void **)this + 2), v4, v8);
    ctu::cf::update<char const*,unsigned int>(v7, (const __CFString **)*MEMORY[0x1E4F4CD70], *((_DWORD *)this + 8), v4, v9);
    ctu::cf::update<char const*,unsigned int>(v7, (const __CFString **)*MEMORY[0x1E4F4CD78], *((_DWORD *)this + 9), v4, v10);
    ctu::cf::update<char const*,long>(v7, (const __CFString **)*MEMORY[0x1E4F4CE98], *((const void **)this + 3), v4, v11);
    CFTypeID v12 = CFGetTypeID(v7);
    if (v12 == CFDictionaryGetTypeID())
    {
      *a2 = v7;
      CFRetain(v7);
    }
    else
    {
      *a2 = 0;
    }
    CFRelease(v7);
  }
  else
  {
    *a2 = 0;
  }
}

void sub_1C5B97118(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_19()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

BOOL CommCenterStats::initFromDisk(CommCenterStats *this)
{
  uint64_t v18 = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  uint64_t v2 = off_1EBBDCA58;
  if (!off_1EBBDCA58)
  {
    SharedData::create_default_global(__p);
    long long v3 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    CFAllocatorRef v4 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
    off_1EBBDCA58 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = off_1EBBDCA58;
  }
  CFAllocatorRef v6 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
  if (*(&off_1EBBDCA58 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA58 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  char v17 = 13;
  strcpy((char *)__p, "HealthEventDB");
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 40));
  Preferences::getPreference<__CFDictionary const*>((uint64_t (***)(void, uint64_t))v2, (const char *)__p, &v18);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 40));
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    long long v7 = v18;
    if (v18)
    {
LABEL_16:
      void v15[4] = v7;
      CFRetain(v7);
      __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
      __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)__p, (const __CFDictionary *)v7);
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v15, "KeyCommCenterStats");
      CFAllocatorRef v8 = (__CFString *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)__p, v15[0]);
      MEMORY[0x1C8794290](v15);
      v15[3] = v8;
      if (v8) {
        CFAllocatorRef v9 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        CFAllocatorRef v9 = 0;
      }
      BOOL v10 = v9 != 0;
      if (v9)
      {
        v15[2] = v8;
        if (v8) {
          CFRetain(v8);
        }
        v15[0] = (__CFString *)0xAAAAAAAAAAAAAAAALL;
        v15[1] = (__CFString *)0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v15, (const __CFDictionary *)v8);
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v19, "KeyCommCenterStatsLaunchCount");
        int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v15, v19);
        CFTypeID v12 = (ctu::cf::MakeCFString *)MEMORY[0x1C8794290](&v19);
        *((_DWORD *)this + 2) = Int;
        ctu::cf::MakeCFString::MakeCFString(v12, "KeyCommCenterStatsFirstLaunchTime");
        int v13 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v15, v19);
        MEMORY[0x1C8794290](&v19);
        *((void *)this + 3) = v13;
        ++*((_DWORD *)this + 2);
        *((void *)this + 2) = time(0);
        MEMORY[0x1C87942E0](v15);
        if (!v8) {
          goto LABEL_28;
        }
        CFRelease(v8);
      }
      else
      {
        ++*((_DWORD *)this + 2);
        *((void *)this + 2) = time(0);
        if (!v8)
        {
LABEL_28:
          MEMORY[0x1C87942E0](__p);
          CFRelease(v7);
          return v10;
        }
      }
      CFRelease(v8);
      goto LABEL_28;
    }
  }
  else
  {
    long long v7 = v18;
    if (v18) {
      goto LABEL_16;
    }
  }
  ++*((_DWORD *)this + 2);
  BOOL v10 = 0;
  *((void *)this + 2) = time(0);
  return v10;
}

void sub_1C5B974C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  CFAllocatorRef v6 = va_arg(va1, const void *);
  va_copy(va2, va1);
  CFAllocatorRef v8 = va_arg(va2, const void *);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  MEMORY[0x1C87942E0](va2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

void CommCenterStats::getStats(const void **this@<X0>, __CFDictionary **a2@<X8>)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    *a2 = 0;
    return;
  }
  long long v7 = (const void *)*((unsigned int *)this + 2);
  int valuePtr = 0;
  ctu::cf::convert_copy((ctu::cf *)&valuePtr, (const __CFString **)"KeyCommCenterStatsLaunchCount", (const char *)0x8000100, (uint64_t)v4, v5);
  CFAllocatorRef v8 = valuePtr;
  int valuePtr = v7;
  CFNumberRef v9 = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
  CFNumberRef v11 = v9;
  if (v8 && v9)
  {
    CFDictionaryAddValue(Mutable, v8, v9);
LABEL_7:
    CFRelease(v11);
    goto LABEL_8;
  }
  if (v9) {
    goto LABEL_7;
  }
LABEL_8:
  if (v8) {
    CFRelease(v8);
  }
  ctu::cf::insert<char const*,long>(Mutable, (const __CFString **)"KeyCommCenterStatsLastLaunchTime", this[2], v4, v10);
  ctu::cf::insert<char const*,long>(Mutable, (const __CFString **)"KeyCommCenterStatsFirstLaunchTime", this[3], v4, v12);
  CFTypeID v13 = CFGetTypeID(Mutable);
  if (v13 == CFDictionaryGetTypeID())
  {
    *a2 = Mutable;
    CFRetain(Mutable);
  }
  else
  {
    *a2 = 0;
  }
  CFRelease(Mutable);
}

void sub_1C5B9771C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10, const void *a11)
{
}

void sub_1C5B97754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void CommCenterStats::updateStats(uint64_t a1@<X0>, xpc_object_t *a2@<X1>, __CFDictionary **a3@<X8>)
{
  if (xpc_dictionary_get_value(*a2, "KeyCommCenterStatsLaunchCount"))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a2, "KeyCommCenterStatsLaunchCount");
    xpc_object_t object = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(_DWORD *)(a1 + 8) = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  if (xpc_dictionary_get_value(*a2, "KeyCommCenterStatsLastLaunchTime"))
  {
    xpc_object_t v7 = xpc_dictionary_get_value(*a2, "KeyCommCenterStatsLastLaunchTime");
    xpc_object_t object = v7;
    if (v7) {
      xpc_retain(v7);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(void *)(a1 + 16) = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  if (xpc_dictionary_get_value(*a2, "KeyCommCenterStatsFirstLaunchTime"))
  {
    xpc_object_t v8 = xpc_dictionary_get_value(*a2, "KeyCommCenterStatsFirstLaunchTime");
    xpc_object_t object = v8;
    if (v8) {
      xpc_retain(v8);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(void *)(a1 + 24) = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  CommCenterStats::getStats((const void **)a1, a3);
}

void sub_1C5B978B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ctu::cf::insert<char const*,long>(__CFDictionary *a1, const __CFString **a2, const void *a3, const __CFAllocator *a4, const __CFAllocator *a5)
{
  int valuePtr = 0;
  ctu::cf::convert_copy((ctu::cf *)&valuePtr, a2, (const char *)0x8000100, (uint64_t)a4, a5);
  xpc_object_t v8 = valuePtr;
  int valuePtr = a3;
  CFNumberRef v9 = CFNumberCreate(a4, kCFNumberLongType, &valuePtr);
  CFNumberRef v10 = v9;
  if (v8) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    if (!v9) {
      goto LABEL_8;
    }
  }
  else
  {
    CFDictionaryAddValue(a1, v8, v9);
  }
  CFRelease(v10);
LABEL_8:
  if (v8) {
    CFRelease(v8);
  }
}

void sub_1C5B979B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  long long v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1C5B979D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_20()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

BasebandTransportICE *BasebandTransportICE::BasebandTransportICE(BasebandTransportICE *a1, uint64_t *a2, NSObject **a3)
{
  CFAllocatorRef v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v9 = *a2;
  CFNumberRef v10 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CFAllocatorRef v5 = *a3;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  BasebandTransport::BasebandTransport((uint64_t)a1, &v9, &object);
  if (object) {
    dispatch_release(object);
  }
  CFAllocatorRef v6 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(void *)a1 = &unk_1F2110E78;
  *((void *)a1 + 54) = 0;
  *((void *)a1 + 58) = 0;
  *((void *)a1 + 62) = 0;
  *((void *)a1 + 63) = 0;
  *((void *)a1 + 64) = dispatch_queue_create("BasebandTransportARI", 0);
  BasebandTransportICE::configurePhysical(a1);
  return a1;
}

void sub_1C5B97B44(_Unwind_Exception *a1)
{
  CFAllocatorRef v6 = *((void *)v1 + 64);
  if (v6) {
    dispatch_release(v6);
  }
  std::function<BOOL ()(void)>::~function(v4);
  std::function<BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::~function(v3);
  std::function<BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::~function(v2);
  BasebandTransport::~BasebandTransport(v1);
  _Unwind_Resume(a1);
}

void sub_1C5B97B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, char a11)
{
  if (object) {
    dispatch_release(object);
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void **BasebandTransportICE::configurePhysical(BasebandTransportICE *this)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v4) = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I using physical pipe...", (uint8_t *)&v4, 2u);
  }
  CFAllocatorRef v4 = (void (**)(void **))&unk_1F2111138;
  CFAllocatorRef v5 = this;
  CFAllocatorRef v6 = (void **)&v4;
  std::__function::__value_func<BOOL ()(void)>::swap[abi:ne180100](&v4, (void *)this + 59);
  if (v6 == (void **)&v4)
  {
    v4[4]((void **)&v4);
  }
  else if (v6)
  {
    (*((void (**)(void))*v6 + 5))();
  }
  CFAllocatorRef v4 = (void (**)(void **))&unk_1F21111B8;
  CFAllocatorRef v5 = this;
  CFAllocatorRef v6 = (void **)&v4;
  std::__function::__value_func<BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::swap[abi:ne180100](&v4, (void *)this + 55);
  if (v6 == (void **)&v4)
  {
    v4[4]((void **)&v4);
  }
  else if (v6)
  {
    (*((void (**)(void))*v6 + 5))();
  }
  CFAllocatorRef v4 = (void (**)(void **))&unk_1F2111238;
  CFAllocatorRef v5 = this;
  CFAllocatorRef v6 = (void **)&v4;
  std::__function::__value_func<BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::swap[abi:ne180100](&v4, (void *)this + 51);
  uint64_t result = v6;
  if (v6 == (void **)&v4) {
    return (void **)((uint64_t (*)(void **))v4[4])((void **)&v4);
  }
  if (v6) {
    return (void **)(*((uint64_t (**)(void))*v6 + 5))();
  }
  return result;
}

void *std::function<BOOL ()(void)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void *std::function<BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void *std::function<BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void **BasebandTransportICE::configureARIPipe(BasebandTransportICE *this)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v4) = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I using ARI client pipe...", (uint8_t *)&v4, 2u);
  }
  CFAllocatorRef v4 = (void (**)(void **))&unk_1F2110F88;
  CFAllocatorRef v5 = this;
  CFAllocatorRef v6 = (void **)&v4;
  std::__function::__value_func<BOOL ()(void)>::swap[abi:ne180100](&v4, (void *)this + 59);
  if (v6 == (void **)&v4)
  {
    v4[4]((void **)&v4);
  }
  else if (v6)
  {
    (*((void (**)(void))*v6 + 5))();
  }
  CFAllocatorRef v4 = (void (**)(void **))&unk_1F2111018;
  CFAllocatorRef v6 = (void **)&v4;
  std::__function::__value_func<BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::swap[abi:ne180100](&v4, (void *)this + 55);
  if (v6 == (void **)&v4)
  {
    v4[4]((void **)&v4);
  }
  else if (v6)
  {
    (*((void (**)(void))*v6 + 5))();
  }
  CFAllocatorRef v4 = (void (**)(void **))&unk_1F21110A8;
  CFAllocatorRef v5 = this;
  CFAllocatorRef v6 = (void **)&v4;
  std::__function::__value_func<BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::swap[abi:ne180100](&v4, (void *)this + 51);
  uint64_t result = v6;
  if (v6 == (void **)&v4) {
    return (void **)((uint64_t (*)(void **))v4[4])((void **)&v4);
  }
  if (v6) {
    return (void **)(*((uint64_t (**)(void))*v6 + 5))();
  }
  return result;
}

uint64_t BasebandTransportICE::open(BasebandTransport *a1, uint64_t *a2, const void **a3)
{
  if (*(_DWORD *)a2 == 8)
  {
    uint64_t v6 = *a2;
    v25[1] = *((_OWORD *)a2 + 1);
    uint64_t v26 = a2[4];
    *(void *)&v25[0] = v6;
    *((void *)&v25[0] + 1) = 1;
    uint64_t v7 = (void *)*a3;
    if (*a3) {
      uint64_t v7 = _Block_copy(v7);
    }
    size_t v24 = v7;
    BOOL v8 = BasebandTransport::open(a1, v25, &v24);
    if (v24) {
      _Block_release(v24);
    }
    if (v8)
    {
      BOOL v9 = 1;
    }
    else
    {
      CFAllocatorRef v12 = *((void *)a1 + 5);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1C59C6000, v12, OS_LOG_TYPE_DEFAULT, "#I Physical transport not available.  Trying ARI pipe...", buf, 2u);
      }
      long long v13 = *((_OWORD *)a2 + 1);
      v21[0] = *(_OWORD *)a2;
      v21[1] = v13;
      uint64_t v22 = a2[4];
      if (*a3) {
        unint64_t v14 = _Block_copy(*a3);
      }
      else {
        unint64_t v14 = 0;
      }
      uint64_t v20 = v14;
      BOOL v15 = BasebandTransportICE::openARIClientPipe((uint64_t)a1, v21, &v20);
      if (v14) {
        _Block_release(v14);
      }
      if (v15)
      {
        BasebandTransportICE::configureARIPipe(a1);
        return 1;
      }
      BOOL v9 = 0;
    }
  }
  else
  {
    long long v10 = *((_OWORD *)a2 + 1);
    v18[0] = *(_OWORD *)a2;
    v18[1] = v10;
    uint64_t v19 = a2[4];
    BOOL v11 = (void *)*a3;
    if (*a3) {
      BOOL v11 = _Block_copy(v11);
    }
    long long aBlock = v11;
    BOOL v9 = BasebandTransport::open(a1, v18, &aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
  }
  BasebandTransportICE::configurePhysical(a1);
  return v9;
}

void sub_1C5B98378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (v10) {
    _Block_release(v10);
  }
  _Unwind_Resume(exception_object);
}

BOOL BasebandTransportICE::openARIClientPipe(uint64_t a1, long long *a2, void **a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  long long v6 = *a2;
  long long v7 = a2[1];
  *(unsigned char *)(a1 + 136) = *((unsigned char *)a2 + 32);
  *(_OWORD *)(a1 + 120) = v7;
  *(_OWORD *)(a1 + 104) = v6;
  BOOL v8 = *a3;
  if (*a3) {
    BOOL v8 = _Block_copy(v8);
  }
  BOOL v9 = *(const void **)(a1 + 144);
  *(void *)(a1 + 144) = v8;
  if (v9) {
    _Block_release(v9);
  }
  *(_DWORD *)(a1 + 504) = 0;
  long long v10 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v10 || (v11 = *(void *)(a1 + 72), (CFAllocatorRef v12 = std::__shared_weak_count::lock(v10)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v13 = v12;
  unint64_t v14 = (int *)(a1 + 504);
  atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  int v15 = AriHost::RegisterClient((AriHost *)"ipc.bb", (const char *)(a1 + 504), *(int **)(a1 + 512), (dispatch_queue_s *)(1000 * *((_DWORD *)a2 + 2)));
  if (v15)
  {
    BOOL v16 = 0;
    char v17 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
  }
  else
  {
    v22[0] = v11;
    v22[1] = v13;
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    long long v3 = v22;
    BOOL v16 = AriHost::SetRTEventHandler() == 0;
    char v17 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
  }
  uint64_t v18 = "fail";
  int v19 = *v14;
  if (v16) {
    uint64_t v18 = "success";
  }
  *(_DWORD *)long long buf = 136315394;
  size_t v24 = v18;
  __int16 v25 = 1024;
  int v26 = v19;
  _os_log_impl(&dword_1C59C6000, v17, OS_LOG_TYPE_DEFAULT, "#I ARI pipe open %s ctx 0x%x", buf, 0x12u);
LABEL_14:
  if (!v15)
  {
    uint64_t v20 = (std::__shared_weak_count *)v3[1];
    if (v20) {
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  std::__shared_weak_count::__release_weak(v13);
  return v16;
}

void sub_1C5B98628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  std::__shared_weak_count::__release_weak(v16);
  _Unwind_Resume(a1);
}

uint64_t BasebandTransportICE::write(BasebandTransportICE *this, const unsigned __int8 *a2, uint64_t a3, unsigned int *a4, char a5, int a6)
{
  CFAllocatorRef v12 = a2;
  long long v10 = a4;
  uint64_t v11 = a3;
  char v9 = a5;
  int v8 = a6;
  uint64_t v6 = *((void *)this + 54);
  if (!v6) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, const unsigned __int8 **, uint64_t *, unsigned int **, char *, int *))(*(void *)v6 + 48))(v6, &v12, &v11, &v10, &v9, &v8);
}

uint64_t BasebandTransportICE::read(BasebandTransportICE *this, unsigned __int8 *a2, uint64_t a3, unsigned int *a4, char a5, int a6)
{
  CFAllocatorRef v12 = a2;
  long long v10 = a4;
  uint64_t v11 = a3;
  char v9 = a5;
  int v8 = a6;
  uint64_t v6 = *((void *)this + 58);
  if (!v6) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, unsigned __int8 **, uint64_t *, unsigned int **, char *, int *))(*(void *)v6 + 48))(v6, &v12, &v11, &v10, &v9, &v8);
}

uint64_t BasebandTransportICE::close_sync(BasebandTransportICE *this)
{
  uint64_t v1 = *((void *)this + 62);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t ___ZN20BasebandTransportICE17openARIClientPipeEN17BasebandTransport10ParametersEN8dispatch5blockIU13block_pointerFvPhjEEE_block_invoke(void *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = a1[4];
  CFAllocatorRef v4 = std::__shared_weak_count::lock(v2);
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  CFAllocatorRef v5 = v4;
  if (a1[5])
  {
    uint64_t v6 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = "ipc.bb";
      _os_log_error_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_ERROR, "Got AriHost::ARI_RT_REINIT callback for %s", __p, 0xCu);
    }
    char v10 = 6;
    strcpy(__p, "ipc.bb");
    AriHost::ReRegisterClient();
    if (v10 < 0)
    {
      operator delete(*(void **)__p);
      uint64_t v7 = 0;
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_14:
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      uint64_t v7 = 0;
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_14;
      }
    }
  }
  else
  {
    uint64_t v7 = 0xFFFFFFFFLL;
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_14;
    }
  }
  return v7;
}

void sub_1C5B98928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL BasebandTransportICE::writeARIClientPipe(BasebandTransportICE *this, const unsigned __int8 *a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v5 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v5 || (int v8 = std::__shared_weak_count::lock(v5)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  char v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (*((_DWORD *)this + 127))
    {
LABEL_5:
      atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      int started = AriHost::Send();
      uint64_t v11 = v9;
      goto LABEL_6;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (*((_DWORD *)this + 127)) {
      goto LABEL_5;
    }
  }
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  int started = AriHost::StartStream();
  uint64_t v11 = v9;
LABEL_6:
  std::__shared_weak_count::__release_weak(v11);
  if (started)
  {
    CFAllocatorRef v12 = *((void *)this + 5);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v15 = a3;
      _os_log_error_impl(&dword_1C59C6000, v12, OS_LOG_TYPE_ERROR, "Failed to send %zu bytes on ARI pipe", buf, 0xCu);
    }
  }
  else if (a4)
  {
    *a4 = a3;
  }
  std::__shared_weak_count::__release_weak(v9);
  return started == 0;
}

void sub_1C5B98BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  std::__shared_weak_count::__release_weak(v22);
  _Unwind_Resume(a1);
}

uint64_t ___ZN20BasebandTransportICE18writeARIClientPipeEPKhmPjbj_block_invoke(void *a1, uint64_t a2, int a3)
{
  CFAllocatorRef v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = a1[4];
  int v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return 0xFFFFFFFFLL;
  }
  char v9 = v8;
  if (a1[5])
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___ZN20BasebandTransportICE18writeARIClientPipeEPKhmPjbj_block_invoke_2;
    block[3] = &__block_descriptor_tmp_5_6;
    block[4] = v7;
    void block[5] = a2;
    int v13 = a3;
    dispatch_async(*(dispatch_queue_t *)(v7 + 152), block);
    uint64_t v10 = 0;
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v10 = 0xFFFFFFFFLL;
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_8:
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v10;
}

void ___ZN20BasebandTransportICE18writeARIClientPipeEPKhmPjbj_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 128);
  if (v3)
  {
    std::string __p = 0;
    CFAllocatorRef v12 = 0;
    uint64_t v13 = 0;
    (*(void (**)(uint64_t, void, void, void **))(*(void *)v3 + 8))(v3, *(void *)(a1 + 40), *(unsigned int *)(a1 + 48), &__p);
    CFAllocatorRef v4 = __p;
    size_t v5 = v12 - (unsigned char *)__p;
    if (*(unsigned char *)(v2 + 136))
    {
      uint64_t v6 = malloc_type_malloc(v12 - (unsigned char *)__p, 0x6FF6341AuLL);
      memcpy(v6, v4, v5);
    }
    (*(void (**)(void))(*(void *)(v2 + 144) + 16))();
    if (__p)
    {
      CFAllocatorRef v12 = __p;
      operator delete(__p);
    }
  }
  else
  {
    uint64_t v7 = *(const void **)(a1 + 40);
    size_t v8 = *(unsigned int *)(a1 + 48);
    if (*(unsigned char *)(v2 + 136))
    {
      char v9 = malloc_type_malloc(v8, 0x6FF6341AuLL);
      memcpy(v9, v7, v8);
    }
    uint64_t v10 = *(void (**)(void))(*(void *)(v2 + 144) + 16);
    v10();
  }
}

void sub_1C5B98E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BasebandTransportICE::sendToDataHandler(BasebandTransportICE *this, unsigned __int8 *a2, size_t size)
{
  if (*((unsigned char *)this + 136))
  {
    uint64_t v6 = malloc_type_malloc(size, 0x6FF6341AuLL);
    memcpy(v6, a2, size);
    uint64_t v7 = *(uint64_t (**)(void))(*((void *)this + 18) + 16);
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(void))(*((void *)this + 18) + 16);
  }
  return v7();
}

uint64_t ___ZN20BasebandTransportICE18writeARIClientPipeEPKhmPjbj_block_invoke_10(void *a1, AriMsg *a2, unsigned int a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = a1[4];
  size_t v8 = std::__shared_weak_count::lock(v4);
  char v17 = v8;
  if (!v8) {
    return 0xFFFFFFFFLL;
  }
  char v9 = v8;
  if (!a1[5])
  {
    uint64_t v12 = 0xFFFFFFFFLL;
    if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return v12;
    }
    goto LABEL_11;
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN20BasebandTransportICE18writeARIClientPipeEPKhmPjbj_block_invoke_2_11;
  block[3] = &__block_descriptor_tmp_12_0;
  block[4] = v7;
  void block[5] = a2;
  unsigned int v15 = a3;
  dispatch_async(*(dispatch_queue_t *)(v7 + 152), block);
  int BufCtx = AriMsg::GetBufCtx(a2, (const unsigned __int8 *)a3);
  *(_DWORD *)(v7 + 508) = BufCtx;
  uint64_t v11 = *(NSObject **)(v7 + 40);
  uint64_t v12 = 0;
  if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    if (atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return v12;
    }
LABEL_11:
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    return v12;
  }
  *(_DWORD *)long long buf = 67109120;
  int v19 = BufCtx;
  _os_log_impl(&dword_1C59C6000, v11, OS_LOG_TYPE_DEFAULT, "#I bypass will use ctx id 0x%x", buf, 8u);
  uint64_t v12 = 0;
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_11;
  }
  return v12;
}

void sub_1C5B99108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN20BasebandTransportICE18writeARIClientPipeEPKhmPjbj_block_invoke_2_11(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 128);
  if (v3)
  {
    std::string __p = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    (*(void (**)(uint64_t, void, void, void **))(*(void *)v3 + 8))(v3, *(void *)(a1 + 40), *(unsigned int *)(a1 + 48), &__p);
    CFAllocatorRef v4 = __p;
    size_t v5 = v12 - (unsigned char *)__p;
    if (*(unsigned char *)(v2 + 136))
    {
      uint64_t v6 = malloc_type_malloc(v12 - (unsigned char *)__p, 0x6FF6341AuLL);
      memcpy(v6, v4, v5);
    }
    (*(void (**)(void))(*(void *)(v2 + 144) + 16))();
    if (__p)
    {
      uint64_t v12 = __p;
      operator delete(__p);
    }
  }
  else
  {
    uint64_t v7 = *(const void **)(a1 + 40);
    size_t v8 = *(unsigned int *)(a1 + 48);
    if (*(unsigned char *)(v2 + 136))
    {
      char v9 = malloc_type_malloc(v8, 0x6FF6341AuLL);
      memcpy(v9, v7, v8);
    }
    uint64_t v10 = *(void (**)(void))(*(void *)(v2 + 144) + 16);
    v10();
  }
}

void sub_1C5B99268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BasebandTransportICE::closeARIClientPipe_sync(BasebandTransportICE *this)
{
  *((_DWORD *)this + 127) = 0;
  AriHost::DeregisterClient((AriHost *)*((unsigned int *)this + 126));
  *((_DWORD *)this + 126) = 0;
  return 1;
}

void BasebandTransportICE::~BasebandTransportICE(BasebandTransportICE *this)
{
  BasebandTransportICE::~BasebandTransportICE(this);

  operator delete(v1);
}

{
  NSObject *v2;
  BasebandTransportICE *v3;
  char *v4;
  BasebandTransportICE *v5;
  char *v6;
  BasebandTransportICE *v7;
  BasebandTransport *v8;
  uint64_t vars8;

  *(void *)this = &unk_1F2110E78;
  uint64_t v2 = *((void *)this + 64);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (BasebandTransportICE *)*((void *)this + 62);
  if (v3 == (BasebandTransportICE *)((char *)this + 472))
  {
    (*(void (**)(char *))(*((void *)this + 59) + 32))((char *)this + 472);
    CFAllocatorRef v4 = (char *)this + 440;
    size_t v5 = (BasebandTransportICE *)*((void *)this + 58);
    if (v5 != (BasebandTransportICE *)((char *)this + 440)) {
      goto LABEL_7;
    }
  }
  else
  {
    if (v3) {
      (*(void (**)(BasebandTransportICE *))(*(void *)v3 + 40))(v3);
    }
    CFAllocatorRef v4 = (char *)this + 440;
    size_t v5 = (BasebandTransportICE *)*((void *)this + 58);
    if (v5 != (BasebandTransportICE *)((char *)this + 440))
    {
LABEL_7:
      if (v5) {
        (*(void (**)(BasebandTransportICE *))(*(void *)v5 + 40))(v5);
      }
      uint64_t v6 = (char *)this + 408;
      uint64_t v7 = (BasebandTransportICE *)*((void *)this + 54);
      if (v7 != (BasebandTransportICE *)((char *)this + 408)) {
        goto LABEL_10;
      }
      goto LABEL_17;
    }
  }
  (*(void (**)(char *))(*(void *)v4 + 32))(v4);
  uint64_t v6 = (char *)this + 408;
  uint64_t v7 = (BasebandTransportICE *)*((void *)this + 54);
  if (v7 != (BasebandTransportICE *)((char *)this + 408))
  {
LABEL_10:
    if (v7) {
      (*(void (**)(BasebandTransportICE *))(*(void *)v7 + 40))(v7);
    }
    size_t v8 = this;
    goto LABEL_14;
  }
LABEL_17:
  (*(void (**)(char *))(*(void *)v6 + 32))(v6);
  size_t v8 = this;

LABEL_14:
  BasebandTransport::~BasebandTransport(v8);
}

void *std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_0,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_0>,BOOL ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F2110F88;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_0,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_0>,BOOL ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2110F88;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_0,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_0>,BOOL ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  AriHost::EndStream((AriHost *)*(unsigned int *)(v1 + 508));
  *(_DWORD *)(v1 + 508) = 0;
  AriHost::DeregisterClient((AriHost *)*(unsigned int *)(v1 + 504));
  *(_DWORD *)(v1 + 504) = 0;
  return 1;
}

uint64_t std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_0,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_0>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN20BasebandTransportICE16configureARIPipeEvE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN20BasebandTransportICE16configureARIPipeEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN20BasebandTransportICE16configureARIPipeEvE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN20BasebandTransportICE16configureARIPipeEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_0,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_0>,BOOL ()(void)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(void)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    unint64_t v3 = result;
    CFAllocatorRef v4 = (void *)result[3];
    size_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        memset(v6, 170, 24);
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1C5B99874(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_1,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F2111018;
  return result;
}

void std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_1,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F2111018;
}

uint64_t std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_1,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD **a4)
{
  **a4 = 0;
  return 0;
}

uint64_t std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_1,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN20BasebandTransportICE16configureARIPipeEvE3$_1") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN20BasebandTransportICE16configureARIPipeEvE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN20BasebandTransportICE16configureARIPipeEvE3$_1")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN20BasebandTransportICE16configureARIPipeEvE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_1,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    unint64_t v3 = result;
    CFAllocatorRef v4 = (void *)result[3];
    size_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        memset(v6, 170, 24);
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1C5B99C0C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_2,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F21110A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_2,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F21110A8;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_2,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned int **a4)
{
  CFAllocatorRef v4 = *(BasebandTransportICE **)(a1 + 8);
  uint64_t v5 = *a2;
  uint64_t v6 = *a3;
  uint64_t v7 = *a4;
  v21[0] = 0;
  v21[1] = v21;
  long long v21[2] = 0x4002000000;
  v21[3] = __Block_byref_object_copy__6;
  unsigned char v21[4] = __Block_byref_object_dispose__6;
  std::string __p = 0;
  char v23 = 0;
  uint64_t v24 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x2000000000;
  uint64_t v20 = v5;
  uint64_t v13 = 0;
  unint64_t v14 = &v13;
  uint64_t v15 = 0x2000000000;
  uint64_t v16 = v6;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 0x40000000;
  v12[2] = ___ZZN20BasebandTransportICE16configureARIPipeEvENK3__2clEPKhmPjbj_block_invoke;
  v12[3] = &unk_1E651C510;
  v12[8] = v5;
  v12[9] = v6;
  v12[4] = v21;
  void v12[5] = &v17;
  v12[6] = &v13;
  v12[7] = v4;
  __int16 v25 = v12;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke_0;
  block[3] = &__block_descriptor_tmp_39_0;
  block[4] = (char *)v4 + 72;
  void block[5] = &v25;
  size_t v8 = *((void *)v4 + 11);
  if (*((void *)v4 + 12))
  {
    dispatch_async_and_wait(v8, block);
    uint64_t v9 = v14[3];
    if (v9)
    {
LABEL_3:
      BOOL v10 = BasebandTransportICE::writeARIClientPipe(v4, (const unsigned __int8 *)v18[3], v9, v7);
      goto LABEL_6;
    }
  }
  else
  {
    dispatch_sync(v8, block);
    uint64_t v9 = v14[3];
    if (v9) {
      goto LABEL_3;
    }
  }
  BOOL v10 = 1;
LABEL_6:
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);
  _Block_object_dispose(v21, 8);
  if (__p)
  {
    char v23 = __p;
    operator delete(__p);
  }
  return v10;
}

void sub_1C5B99E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  if (__p)
  {
    a34 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_2,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN20BasebandTransportICE16configureARIPipeEvE3$_2") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN20BasebandTransportICE16configureARIPipeEvE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN20BasebandTransportICE16configureARIPipeEvE3$_2")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN20BasebandTransportICE16configureARIPipeEvE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_2,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::target_type()
{
}

uint64_t (***___ZZN20BasebandTransportICE16configureARIPipeEvENK3__2clEPKhmPjbj_block_invoke(void *a1))(void, void, void, uint64_t)
{
  uint64_t result = *(uint64_t (****)(void, void, void, uint64_t))(a1[7] + 128);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void, void, void, uint64_t))(**result)(result, a1[8], a1[9], *(void *)(a1[4] + 8) + 40);
    *(void *)(*(void *)(a1[5] + 8) + 24) = *(void *)(*(void *)(a1[4] + 8) + 40);
    *(void *)(*(void *)(a1[6] + 8) + 24) = *(void *)(*(void *)(a1[4] + 8) + 48)
                                                 - *(void *)(*(void *)(a1[4] + 8) + 40);
  }
  return result;
}

void *___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke_0(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void *std::__function::__value_func<BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    unint64_t v3 = result;
    CFAllocatorRef v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        memset(v6, 170, 24);
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1C5B9A250(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_0,std::allocator<BasebandTransportICE::configurePhysical(void)::$_0>,BOOL ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F2111138;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_0,std::allocator<BasebandTransportICE::configurePhysical(void)::$_0>,BOOL ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2111138;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_0,std::allocator<BasebandTransportICE::configurePhysical(void)::$_0>,BOOL ()(void)>::operator()(uint64_t a1)
{
  return BasebandTransport::close_sync(*(BasebandTransport **)(a1 + 8));
}

uint64_t std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_0,std::allocator<BasebandTransportICE::configurePhysical(void)::$_0>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN20BasebandTransportICE17configurePhysicalEvE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN20BasebandTransportICE17configurePhysicalEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN20BasebandTransportICE17configurePhysicalEvE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN20BasebandTransportICE17configurePhysicalEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_0,std::allocator<BasebandTransportICE::configurePhysical(void)::$_0>,BOOL ()(void)>::target_type()
{
}

void *std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_1,std::allocator<BasebandTransportICE::configurePhysical(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F21111B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_1,std::allocator<BasebandTransportICE::configurePhysical(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F21111B8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_1,std::allocator<BasebandTransportICE::configurePhysical(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::operator()(uint64_t a1, unsigned __int8 **a2, unint64_t *a3, unsigned int **a4)
{
  return BasebandTransport::read(*(BasebandTransport **)(a1 + 8), *a2, *a3, *a4);
}

uint64_t std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_1,std::allocator<BasebandTransportICE::configurePhysical(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN20BasebandTransportICE17configurePhysicalEvE3$_1") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN20BasebandTransportICE17configurePhysicalEvE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN20BasebandTransportICE17configurePhysicalEvE3$_1")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN20BasebandTransportICE17configurePhysicalEvE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_1,std::allocator<BasebandTransportICE::configurePhysical(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::target_type()
{
}

void *std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_2,std::allocator<BasebandTransportICE::configurePhysical(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F2111238;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_2,std::allocator<BasebandTransportICE::configurePhysical(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2111238;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_2,std::allocator<BasebandTransportICE::configurePhysical(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::operator()(uint64_t a1, const unsigned __int8 **a2, uint64_t *a3, unsigned int **a4)
{
  return BasebandTransport::write(*(BasebandTransport **)(a1 + 8), *a2, *a3, *a4);
}

uint64_t std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_2,std::allocator<BasebandTransportICE::configurePhysical(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN20BasebandTransportICE17configurePhysicalEvE3$_2") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN20BasebandTransportICE17configurePhysicalEvE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN20BasebandTransportICE17configurePhysicalEvE3$_2")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN20BasebandTransportICE17configurePhysicalEvE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_2,std::allocator<BasebandTransportICE::configurePhysical(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::target_type()
{
}

void *util::GuaranteedCallback::GuaranteedCallback(void *a1, const void **a2, NSObject **a3, uint64_t a4)
{
  *a1 = 0;
  a1[1] = 0;
  if (*a2)
  {
    uint64_t v7 = _Block_copy(*a2);
    size_t v8 = *a3;
    if (!v8) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v7 = 0;
  size_t v8 = *a3;
  if (*a3) {
LABEL_3:
  }
    dispatch_retain(v8);
LABEL_4:
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = a4;
  a1[5] = 0;
  dispatch_source_t v9 = dispatch_source_create(MEMORY[0x1E4F14490], 1uLL, 0, 0);
  BOOL v10 = a1[5];
  a1[5] = v9;
  if (v10) {
    dispatch_release(v10);
  }
  a1[6] = 0;
  return a1;
}

{
  void *v7;
  NSObject *v8;
  dispatch_source_t v9;
  NSObject *v10;

  *a1 = 0;
  a1[1] = 0;
  if (*a2)
  {
    uint64_t v7 = _Block_copy(*a2);
    size_t v8 = *a3;
    if (!v8) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v7 = 0;
  size_t v8 = *a3;
  if (*a3) {
LABEL_3:
  }
    dispatch_retain(v8);
LABEL_4:
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = a4;
  a1[5] = 0;
  dispatch_source_t v9 = dispatch_source_create(MEMORY[0x1E4F14490], 1uLL, 0, 0);
  BOOL v10 = a1[5];
  a1[5] = v9;
  if (v10) {
    dispatch_release(v10);
  }
  a1[6] = 0;
  return a1;
}

void util::GuaranteedCallback::~GuaranteedCallback(dispatch_source_t *this)
{
  dispatch_source_cancel(this[5]);
  uint64_t v2 = this[5];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = this[3];
  if (v3) {
    dispatch_release(v3);
  }
  dispatch_source_t v4 = this[2];
  if (v4) {
    _Block_release(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)this[1];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

{
  NSObject *v2;
  NSObject *v3;
  dispatch_source_t v4;
  std::__shared_weak_count *v5;

  dispatch_source_cancel(this[5]);
  uint64_t v2 = this[5];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = this[3];
  if (v3) {
    dispatch_release(v3);
  }
  dispatch_source_t v4 = this[2];
  if (v4) {
    _Block_release(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)this[1];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void util::GuaranteedCallback::create(void **a1@<X0>, dispatch_object_t *a2@<X1>, uint64_t a3@<X2>, util::GuaranteedCallback **a4@<X8>)
{
  *a4 = (util::GuaranteedCallback *)0xAAAAAAAAAAAAAAAALL;
  a4[1] = (util::GuaranteedCallback *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v7 = *a1;
  size_t v8 = (std::__shared_weak_count *)operator new(0x50uLL);
  v8->__shared_owners_ = 0;
  p_std::string::size_type shared_owners = &v8->__shared_owners_;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2111318;
  if (v7) {
    uint64_t v7 = _Block_copy(v7);
  }
  BOOL v10 = *a2;
  if (*a2) {
    dispatch_retain(*a2);
  }
  if (v7)
  {
    uint64_t v11 = _Block_copy(v7);
    uint64_t v12 = (util::GuaranteedCallback *)&v8[1];
    if (!v10) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v11 = 0;
  uint64_t v12 = (util::GuaranteedCallback *)&v8[1];
  if (v10) {
LABEL_7:
  }
    dispatch_retain(v10);
LABEL_8:
  *(void *)uint64_t v12 = 0;
  *((void *)v12 + 1) = 0;
  if (v11)
  {
    uint64_t v13 = _Block_copy(v11);
    if (!v10) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v13 = 0;
  if (v10) {
LABEL_10:
  }
    dispatch_retain(v10);
LABEL_11:
  v8[1].__shared_weak_owners_ = (uint64_t)v13;
  v8[2].__vftable = (std::__shared_weak_count_vtbl *)v10;
  v8[2].__shared_owners_ = a3;
  v8[2].__shared_weak_owners_ = 0;
  dispatch_source_t v14 = dispatch_source_create(MEMORY[0x1E4F14490], 1uLL, 0, 0);
  shared_weak_owners = v8[2].__shared_weak_owners_;
  v8[2].__shared_weak_owners_ = (uint64_t)v14;
  if (shared_weak_owners) {
    dispatch_release(shared_weak_owners);
  }
  v8[3].__vftable = 0;
  if (v10) {
    dispatch_release(v10);
  }
  if (v11) {
    _Block_release(v11);
  }
  if (v10) {
    dispatch_release(v10);
  }
  if (v7) {
    _Block_release(v7);
  }
  std::string::size_type shared_owners = (std::__shared_weak_count *)v8[1].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v8[1].__vftable = (std::__shared_weak_count_vtbl *)&v8[1];
      v8[1].__shared_owners_ = (uint64_t)v8;
      std::__shared_weak_count::__release_weak(shared_owners);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_30;
      }
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)&v8[1];
    v8[1].__shared_owners_ = (uint64_t)v8;
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_30:
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *a4 = v12;
  a4[1] = (util::GuaranteedCallback *)v8;
  util::GuaranteedCallback::start(v12);
}

void sub_1C5B9A9B4(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void util::GuaranteedCallback::start(util::GuaranteedCallback *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 1);
  if (!v2 || (v3 = *(void *)this, (dispatch_source_t v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  p_shared_weak_owners = &v4->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v7 = *((void *)this + 5);
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 1174405120;
  handler[2] = ___ZN4util18GuaranteedCallback5startEv_block_invoke;
  handler[3] = &__block_descriptor_tmp_43;
  handler[4] = this;
  void handler[5] = v3;
  uint64_t v11 = v5;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  dispatch_source_set_event_handler(v7, handler);
  size_t v8 = *((void *)this + 5);
  dispatch_time_t v9 = dispatch_time(0, 1000000 * *((void *)this + 4));
  dispatch_source_set_timer(v8, v9, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
  dispatch_activate(*((dispatch_object_t *)this + 5));
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void ___ZN4util18GuaranteedCallback5startEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (!v2) {
    return;
  }
  uint64_t v3 = a1[4];
  dispatch_source_t v4 = std::__shared_weak_count::lock(v2);
  int v26 = v4;
  if (!v4) {
    return;
  }
  if (!a1[5])
  {
    dispatch_time_t v9 = v4;
LABEL_27:
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    return;
  }
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v23[7] = v5;
  v23[8] = v5;
  v23[5] = v5;
  unsigned char v23[6] = v5;
  v23[3] = v5;
  v23[4] = v5;
  v23[1] = v5;
  void v23[2] = v5;
  v23[0] = v5;
  long long v21 = v5;
  long long v22 = v5;
  long long v19 = v5;
  *(_OWORD *)std::string __p = v5;
  long long v17 = v5;
  long long v18 = v5;
  long long v16 = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"gave up after ", 14);
  uint64_t v6 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" milliseconds", 13);
  if ((BYTE8(v22) & 0x10) != 0)
  {
    uint64_t v10 = v22;
    if ((unint64_t)v22 < *((void *)&v19 + 1))
    {
      *(void *)&long long v22 = *((void *)&v19 + 1);
      uint64_t v10 = *((void *)&v19 + 1);
    }
    uint64_t v11 = (const void *)v19;
    std::string::size_type v7 = v10 - v19;
    if ((unint64_t)(v10 - v19) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_31;
    }
  }
  else
  {
    if ((BYTE8(v22) & 8) == 0)
    {
      std::string::size_type v7 = 0;
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 0;
      p_dst = &__dst;
      goto LABEL_18;
    }
    uint64_t v11 = (const void *)*((void *)&v17 + 1);
    std::string::size_type v7 = *((void *)&v18 + 1) - *((void *)&v17 + 1);
    if (*((void *)&v18 + 1) - *((void *)&v17 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_31:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v7 >= 0x17)
  {
    uint64_t v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v12 = v7 | 7;
    }
    uint64_t v13 = v12 + 1;
    p_dst = (std::string *)operator new(v12 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_17;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v7;
  p_dst = &__dst;
  if (v7) {
LABEL_17:
  }
    memmove(p_dst, v11, v7);
LABEL_18:
  p_dst->__r_.__value_.__s.__data_[v7] = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZN4util18GuaranteedCallback3runEiNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_3_5;
  block[4] = v3;
  int v29 = -534716413;
  int v14 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v28, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  }
  else {
    std::string v28 = __dst;
  }
  if (*(void *)(v3 + 48) == -1)
  {
    if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_23;
    }
LABEL_33:
    operator delete(v28.__r_.__value_.__l.__data_);
    if ((v14 & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_34;
  }
  dispatch_once((dispatch_once_t *)(v3 + 48), block);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_33;
  }
LABEL_23:
  if ((v14 & 0x80000000) == 0) {
    goto LABEL_24;
  }
LABEL_34:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_24:
  *(void *)&long long v16 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v16 + *(void *)(v16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v16 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C8795140](v23);
  dispatch_time_t v9 = v26;
  if (v26) {
    goto LABEL_27;
  }
}

void sub_1C5B9AEAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  operator delete(v13);
  std::ostringstream::~ostringstream((uint64_t)&a13);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v14 - 136);
  _Unwind_Resume(a1);
}

void sub_1C5B9AED0(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1 - 136);
  _Unwind_Resume(a1);
}

void sub_1C5B9AEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v5 - 136);
  _Unwind_Resume(a1);
}

void util::GuaranteedCallback::run(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = (dispatch_once_t *)(a1 + 48);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZN4util18GuaranteedCallback3runEiNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_3_5;
  block[4] = a1;
  int v6 = a2;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    if (*v3 == -1)
    {
LABEL_3:
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_7:
      operator delete(__p.__r_.__value_.__l.__data_);
      return;
    }
  }
  else
  {
    std::string __p = *(std::string *)a3;
    if (*v3 == -1) {
      goto LABEL_3;
    }
  }
  dispatch_once(v3, block);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_7;
  }
}

uint64_t __copy_helper_block_e8_40c50_ZTSNSt3__18weak_ptrIN4util18GuaranteedCallbackEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c50_ZTSNSt3__18weak_ptrIN4util18GuaranteedCallbackEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN4util18GuaranteedCallback3runEiNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(_DWORD *)(a1 + 64);
  if (*(char *)(a1 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
    uint64_t v3 = *(const void **)(v1 + 16);
    if (v3) {
      goto LABEL_3;
    }
  }
  else
  {
    std::string v9 = *(std::string *)(a1 + 40);
    uint64_t v3 = *(const void **)(v1 + 16);
    if (v3)
    {
LABEL_3:
      dispatch_source_t v4 = _Block_copy(v3);
      goto LABEL_6;
    }
  }
  dispatch_source_t v4 = 0;
LABEL_6:
  uint64_t v5 = *(NSObject **)(v1 + 24);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEclIJiS7_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_10_5;
  if (v4)
  {
    long long aBlock = _Block_copy(v4);
    int v13 = v2;
    if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_8:
      std::string __p = v9;
      goto LABEL_11;
    }
  }
  else
  {
    long long aBlock = 0;
    int v13 = v2;
    if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_8;
    }
  }
  std::string::__init_copy_ctor_external(&__p, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
LABEL_11:
  dispatch_async(v5, block);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    int v6 = aBlock;
    if (!aBlock) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  int v6 = aBlock;
  if (aBlock) {
LABEL_15:
  }
    _Block_release(v6);
LABEL_16:
  if (v4) {
    _Block_release(v4);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v9.__r_.__value_.__l.__data_);
    std::string::size_type v7 = *(const void **)(v1 + 16);
    *(void *)(v1 + 16) = 0;
    if (!v7) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  std::string::size_type v7 = *(const void **)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v7) {
LABEL_22:
  }
    _Block_release(v7);
LABEL_23:
  size_t v8 = *(NSObject **)(v1 + 24);
  *(void *)(v1 + 24) = 0;
  if (v8) {
    dispatch_release(v8);
  }
}

void sub_1C5B9B1B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v19) {
    _Block_release(v19);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<util::GuaranteedCallback::create(dispatch::block<void({block_pointer})(int,std::string)>,dispatch::queue,std::chrono::duration<long long,std::ratio<1l,1000l>>)::wrapper,std::allocator<util::GuaranteedCallback::create(dispatch::block<void({block_pointer})(int,std::string)>,dispatch::queue,std::chrono::duration<long long,std::ratio<1l,1000l>>)::wrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2111318;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<util::GuaranteedCallback::create(dispatch::block<void({block_pointer})(int,std::string)>,dispatch::queue,std::chrono::duration<long long,std::ratio<1l,1000l>>)::wrapper,std::allocator<util::GuaranteedCallback::create(dispatch::block<void({block_pointer})(int,std::string)>,dispatch::queue,std::chrono::duration<long long,std::ratio<1l,1000l>>)::wrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2111318;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<util::GuaranteedCallback::create(dispatch::block<void({block_pointer})(int,std::string)>,dispatch::queue,std::chrono::duration<long long,std::ratio<1l,1000l>>)::wrapper,std::allocator<util::GuaranteedCallback::create(dispatch::block<void({block_pointer})(int,std::string)>,dispatch::queue,std::chrono::duration<long long,std::ratio<1l,1000l>>)::wrapper>>::__on_zero_shared(uint64_t a1)
{
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 64));
  int v2 = *(NSObject **)(a1 + 64);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(NSObject **)(a1 + 48);
  if (v3) {
    dispatch_release(v3);
  }
  dispatch_source_t v4 = *(const void **)(a1 + 40);
  if (v4) {
    _Block_release(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 32);
  if (v5)
  {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void ___ZNK8dispatch8callbackIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEclIJiS7_EEEvDpT__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(unsigned int *)(a1 + 64);
  if (*(char *)(a1 + 63) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
  }
  else {
    std::string __p = *(std::string *)(a1 + 40);
  }
  (*(void (**)(uint64_t, uint64_t, std::string *))(v1 + 16))(v1, v2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5B9B378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const char *abm::asString(unsigned int a1)
{
  if (a1 > 9) {
    return "Unknown";
  }
  else {
    return off_1E651C588[a1];
  }
}

{
  if (a1 > 3) {
    return "Unknown";
  }
  else {
    return off_1E651C5D8[a1];
  }
}

const char *abm::asString(int a1)
{
  if ((a1 - 1) > 2) {
    return "Unknown";
  }
  else {
    return off_1E651C5F8[a1 - 1];
  }
}

{
  if ((a1 - 1) > 2) {
    return "Unknown";
  }
  else {
    return off_1E651C610[a1 - 1];
  }
}

void *support::log::delegate::context::create@<X0>(support::log::delegate::context *this@<X0>, void *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v5 = operator new(0x10uLL);
  *uint64_t v5 = &unk_1F2111398;
  v5[1] = this;
  *a2 = v5;
  uint64_t result = operator new(0x20uLL);
  *uint64_t result = &unk_1F21115C0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  a2[1] = result;
  return result;
}

void sub_1C5B9B4B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *support::log::delegate::context::context(void *this, void *a2)
{
  *this = &unk_1F2111398;
  this[1] = a2;
  return this;
}

{
  *this = &unk_1F2111398;
  this[1] = a2;
  return this;
}

uint64_t support::log::delegate::delegate(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  *(void *)uint64_t result = &unk_1F21113B8;
  *(void *)(result + 8) = v3;
  *(void *)(result + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(result + 24) = 1;
  return result;
}

uint64_t support::log::delegate::get_context@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  if (*(unsigned char *)(this + 24))
  {
    uint64_t v2 = *(void *)(this + 16);
    *(void *)a2 = *(void *)(this + 8);
    *(void *)(a2 + 8) = v2;
    if (v2) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)(a2 + 16) = 1;
  }
  return this;
}

uint64_t support::log::manager::parameters::parameters(uint64_t result, char a2)
{
  *(void *)uint64_t result = &unk_1F21113E8;
  *(unsigned char *)(result + 8) = a2;
  return result;
}

{
  *(void *)uint64_t result = &unk_1F21113E8;
  *(unsigned char *)(result + 8) = a2;
  return result;
}

uint64_t support::log::manager::parameters::parameters(uint64_t this)
{
  *(void *)this = &unk_1F21113E8;
  *(unsigned char *)(this + 8) = 3;
  return this;
}

{
  *(void *)this = &unk_1F21113E8;
  *(unsigned char *)(this + 8) = 3;
  return this;
}

uint64_t support::log::manager::parameters::set_defaults(uint64_t this)
{
  *(unsigned char *)(this + 8) = 3;
  return this;
}

uint64_t support::log::manager::manager(uint64_t a1, std::string *a2, uint64_t a3, void *a4)
{
  *(void *)a1 = &unk_1F2111400;
  *(void *)(a1 + 8) = 850045863;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  std::string v18 = *a2;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  char v17 = 12;
  strcpy(__s, ".log_manager");
  std::string::size_type v7 = std::string::append(&v18, __s, 0xCuLL);
  size_t v8 = (const char *)(a1 + 72);
  long long v9 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  *(void *)(a1 + 88) = *((void *)&v7->__r_.__value_.__l + 2);
  *(_OWORD *)(a1 + 72) = v9;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if ((v17 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_8:
    operator delete(v18.__r_.__value_.__l.__data_);
    if ((*(char *)(a1 + 95) & 0x80000000) == 0) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  operator delete(*(void **)__s);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_8;
  }
LABEL_3:
  if ((*(char *)(a1 + 95) & 0x80000000) == 0) {
    goto LABEL_4;
  }
LABEL_9:
  size_t v8 = *(const char **)v8;
LABEL_4:
  *(void *)(a1 + 96) = os_log_create("com.apple.telephony.basebandservices", v8);
  *(void *)(a1 + 104) = &unk_1F21113E8;
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a3 + 8);
  *(void *)(a1 + 120) = a1 + 120;
  *(void *)(a1 + 128) = a1 + 120;
  *(void *)(a1 + 136) = 0;
  uint64_t v10 = a4[2];
  if (v10)
  {
    uint64_t v12 = *a4;
    uint64_t v11 = (uint64_t *)a4[1];
    uint64_t v13 = *v11;
    *(void *)(v13 + 8) = *(void *)(*a4 + 8);
    **(void **)(v12 + 8) = v13;
    uint64_t v14 = *(void *)(a1 + 120);
    *(void *)(v14 + 8) = v11;
    uint64_t *v11 = v14;
    *(void *)(a1 + 120) = v12;
    *(void *)(v12 + 8) = a1 + 120;
    *(void *)(a1 + 136) = v10;
    a4[2] = 0;
  }
  return a1;
}

void sub_1C5B9B7C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      std::mutex::~mutex(v21);
      _Unwind_Resume(a1);
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  std::mutex::~mutex(v21);
  _Unwind_Resume(a1);
}

uint64_t support::log::manager::manager(uint64_t a1, std::string *a2, uint64_t a3, uint64_t *a4)
{
  std::string __p = *a2;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  uint64_t v15 = (uint64_t)&v15;
  long long v16 = &v15;
  uint64_t v17 = 0;
  support::log::manager::manager(a1, &__p, a3, &v15);
  if (v17)
  {
    uint64_t v6 = v15;
    std::string::size_type v7 = v16;
    uint64_t v8 = *v16;
    *(void *)(v8 + 8) = *(void *)(v15 + 8);
    **(void **)(v6 + 8) = v8;
    uint64_t v17 = 0;
    if (v7 != &v15)
    {
      do
      {
        uint64_t v10 = (uint64_t *)v7[1];
        uint64_t v9 = v7[2];
        v7[2] = 0;
        if (v9) {
          (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
        operator delete(v7);
        std::string::size_type v7 = v10;
      }
      while (v10 != &v15);
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*a4) {
      return a1;
    }
    goto LABEL_10;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (*a4)
  {
LABEL_10:
    std::mutex::lock((std::mutex *)(a1 + 8));
    uint64_t v11 = operator new(0x18uLL);
    uint64_t v12 = *a4;
    *a4 = 0;
    uint64_t v13 = *(void *)(a1 + 120);
    v11[1] = a1 + 120;
    uint64_t v11[2] = v12;
    void *v11 = v13;
    *(void *)(v13 + 8) = v11;
    *(void *)(a1 + 120) = v11;
    ++*(void *)(a1 + 136);
    std::mutex::unlock((std::mutex *)(a1 + 8));
  }
  return a1;
}

{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::string __p;

  std::string __p = *a2;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  uint64_t v15 = (uint64_t)&v15;
  long long v16 = &v15;
  uint64_t v17 = 0;
  support::log::manager::manager(a1, &__p, a3, &v15);
  if (v17)
  {
    uint64_t v6 = v15;
    std::string::size_type v7 = v16;
    uint64_t v8 = *v16;
    *(void *)(v8 + 8) = *(void *)(v15 + 8);
    **(void **)(v6 + 8) = v8;
    uint64_t v17 = 0;
    if (v7 != &v15)
    {
      do
      {
        uint64_t v10 = (uint64_t *)v7[1];
        uint64_t v9 = v7[2];
        v7[2] = 0;
        if (v9) {
          (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
        operator delete(v7);
        std::string::size_type v7 = v10;
      }
      while (v10 != &v15);
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*a4) {
      return a1;
    }
    goto LABEL_10;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (*a4)
  {
LABEL_10:
    std::mutex::lock((std::mutex *)(a1 + 8));
    uint64_t v11 = operator new(0x18uLL);
    uint64_t v12 = *a4;
    *a4 = 0;
    uint64_t v13 = *(void *)(a1 + 120);
    v11[1] = a1 + 120;
    uint64_t v11[2] = v12;
    void *v11 = v13;
    *(void *)(v13 + 8) = v11;
    *(void *)(a1 + 120) = v11;
    ++*(void *)(a1 + 136);
    std::mutex::unlock((std::mutex *)(a1 + 8));
  }
  return a1;
}

void sub_1C5B9B96C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v2);
  support::log::manager::~manager(v1);
  _Unwind_Resume(a1);
}

void sub_1C5B9B990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::list<std::unique_ptr<support::log::delegate>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        std::string::size_type v7 = (uint64_t *)v3[1];
        uint64_t v6 = v3[2];
        v3[2] = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
        operator delete(v3);
        uint64_t v3 = v7;
      }
      while (v7 != a1);
    }
  }
  return a1;
}

void support::log::manager::add_delegate(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (void *)a1;
  uint64_t v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  uint64_t v5 = operator new(0x18uLL);
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = v3[15];
  v3 += 15;
  v5[1] = v3;
  void v5[2] = v6;
  *uint64_t v5 = v7;
  *(void *)(v7 + 8) = v5;
  void *v3 = v5;
  ++v3[2];

  std::mutex::unlock(v4);
}

void sub_1C5B9BAD0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void support::log::manager::~manager(support::log::manager *this)
{
  *(void *)this = &unk_1F2111400;
  if (*((void *)this + 17))
  {
    uint64_t v2 = (char *)this + 120;
    uint64_t v3 = *((void *)this + 15);
    uint64_t v4 = (char *)*((void *)this + 16);
    uint64_t v5 = *(void *)v4;
    *(void *)(v5 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v5;
    *((void *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        uint64_t v7 = (char *)*((void *)v4 + 1);
        uint64_t v6 = *((void *)v4 + 2);
        *((void *)v4 + 2) = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
        operator delete(v4);
        uint64_t v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  *(void *)this = &unk_1F2111400;
  if (*((void *)this + 17))
  {
    uint64_t v2 = (char *)this + 120;
    uint64_t v3 = *((void *)this + 15);
    uint64_t v4 = (char *)*((void *)this + 16);
    uint64_t v5 = *(void *)v4;
    *(void *)(v5 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v5;
    *((void *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        uint64_t v7 = (char *)*((void *)v4 + 1);
        uint64_t v6 = *((void *)v4 + 2);
        *((void *)v4 + 2) = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
        operator delete(v4);
        uint64_t v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t vars8;

  *(void *)this = &unk_1F2111400;
  if (*((void *)this + 17))
  {
    uint64_t v2 = (char *)this + 120;
    uint64_t v3 = *((void *)this + 15);
    uint64_t v4 = (char *)*((void *)this + 16);
    uint64_t v5 = *(void *)v4;
    *(void *)(v5 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v5;
    *((void *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        uint64_t v7 = (char *)*((void *)v4 + 1);
        uint64_t v6 = *((void *)v4 + 2);
        *((void *)v4 + 2) = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
        operator delete(v4);
        uint64_t v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));

  operator delete(this);
}

void sub_1C5B9BD10(_Unwind_Exception *a1)
{
  std::mutex::unlock(v2);
  support::log::manager::~manager(v1);
  _Unwind_Resume(a1);
}

void sub_1C5B9BD34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void support::log::manager::create(std::string *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = operator new(0x90uLL);
  std::string __p = *a1;
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  support::log::manager::manager((uint64_t)v8, &__p, a2, a3);
  *a4 = v8;
  uint64_t v9 = operator new(0x20uLL);
  void *v9 = &unk_1F21116A8;
  v9[1] = 0;
  uint64_t v9[2] = 0;
  void v9[3] = v8;
  a4[1] = v9;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v10 = (void *)__p.__r_.__value_.__r.__words[0];
    operator delete(v10);
  }
}

void sub_1C5B9BF14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void support::log::manager::create(std::string *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = operator new(0x90uLL);
  std::string __p = *a1;
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  support::log::manager::manager((uint64_t)v8, &__p, a2, a3);
  *a4 = v8;
  uint64_t v9 = operator new(0x20uLL);
  void *v9 = &unk_1F21116A8;
  v9[1] = 0;
  uint64_t v9[2] = 0;
  void v9[3] = v8;
  a4[1] = v9;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v10 = (void *)__p.__r_.__value_.__r.__words[0];
    operator delete(v10);
  }
}

void sub_1C5B9C064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t support::log::manager::get_level(support::log::manager *this)
{
  return *((unsigned __int8 *)this + 112);
}

void support::log::manager::set_level(uint64_t a1, unsigned int a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  uint64_t v5 = *(NSObject **)(a1 + 96);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v6 = *(unsigned __int8 *)(a1 + 112);
    if (v6 > 6)
    {
      uint64_t v7 = "???";
      if (a2 > 6) {
        goto LABEL_4;
      }
    }
    else
    {
      if (a2 > 6)
      {
LABEL_4:
        uint64_t v8 = "???";
LABEL_7:
        int v9 = 136315394;
        uint64_t v10 = v7;
        __int16 v11 = 2080;
        uint64_t v12 = v8;
        _os_log_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_DEFAULT, "setting log level %s -> %s", (uint8_t *)&v9, 0x16u);
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  *(unsigned char *)(a1 + 112) = a2;
  std::mutex::unlock(v4);
}

uint64_t support::log::manager::get_log_buffer(support::log::manager *this)
{
  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (!qword_1EA3D6B78)
  {
    uint64_t v1 = (char *)operator new(0xA8uLL);
    *((void *)v1 + 1) = 0;
    *((void *)v1 + 2) = 0;
    *(void *)uint64_t v1 = &unk_1F2111610;
    uint64_t v2 = (uint64_t)(v1 + 24);
    *((void *)v1 + 3) = &unk_1F2111660;
    *((void *)v1 + 4) = 850045863;
    *(_OWORD *)(v1 + 40) = 0u;
    *(_OWORD *)(v1 + 56) = 0u;
    *(_OWORD *)(v1 + 72) = 0u;
    *((void *)v1 + 14) = 0;
    *((void *)v1 + 13) = 0;
    *((void *)v1 + 11) = 0;
    *((void *)v1 + 12) = v1 + 104;
    *(_OWORD *)(v1 + 120) = 0u;
    *(_OWORD *)(v1 + 136) = 0u;
    *(_OWORD *)(v1 + 152) = 0u;
    uint64_t v3 = (std::__shared_weak_count *)off_1EA3D6B80;
    qword_1EA3D6B78 = (uint64_t)(v1 + 24);
    off_1EA3D6B80 = v1;
    if (!v3) {
      goto LABEL_7;
    }
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  uint64_t v2 = qword_1EA3D6B78;
  uint64_t v1 = (char *)off_1EA3D6B80;
  if (off_1EA3D6B80) {
LABEL_7:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)v1 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  std::mutex::lock((std::mutex *)(v2 + 8));
  uint64_t v4 = *(void *)(v2 + 136);
  if (v4)
  {
    uint64_t v5 = (void *)(v2 + 128);
    unint64_t v6 = *(void ***)(v2 + 104);
    uint64_t v7 = (*(void **)((char *)v6 + ((*(void *)(v2 + 128) >> 6) & 0x3FFFFFFFFFFFFF8)))[*(void *)(v2 + 128) & 0x1FFLL];
    unint64_t v8 = *(void *)(v2 + 128) + 1;
    *(void *)(v2 + 128) = v8;
    *(void *)(v2 + 136) = v4 - 1;
    if (v8 >= 0x400)
    {
      operator delete(*v6);
      *(void *)(v2 + 104) += 8;
      uint64_t v9 = -512;
LABEL_22:
      *v5 += v9;
    }
  }
  else
  {
    uint64_t v10 = malloc_type_malloc(0x400uLL, 0x45F1E4C6uLL);
    uint64_t v7 = (uint64_t)v10;
    if (v10)
    {
      uint64_t v12 = (uint64_t **)(v2 + 80);
      __int16 v11 = *(uint64_t **)(v2 + 80);
      if (!v11)
      {
        uint64_t v13 = (uint64_t **)(v2 + 80);
LABEL_19:
        uint64_t v15 = (uint64_t *)operator new(0x28uLL);
        void v15[4] = v7;
        uint64_t *v15 = 0;
        v15[1] = 0;
        v15[2] = (uint64_t)v13;
        *uint64_t v12 = v15;
        uint64_t v16 = **(void **)(v2 + 72);
        if (v16)
        {
          *(void *)(v2 + 72) = v16;
          uint64_t v15 = *v12;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 80), v15);
        uint64_t v5 = (void *)(v2 + 88);
        uint64_t v9 = 1;
        goto LABEL_22;
      }
      while (1)
      {
        while (1)
        {
          uint64_t v13 = (uint64_t **)v11;
          unint64_t v14 = v11[4];
          if ((unint64_t)v10 >= v14) {
            break;
          }
          __int16 v11 = *v13;
          uint64_t v12 = v13;
          if (!*v13) {
            goto LABEL_19;
          }
        }
        if (v14 >= (unint64_t)v10) {
          break;
        }
        __int16 v11 = v13[1];
        if (!v11)
        {
          uint64_t v12 = v13 + 1;
          goto LABEL_19;
        }
      }
    }
  }
  std::mutex::unlock((std::mutex *)(v2 + 8));
  if (!v1 || atomic_fetch_add((atomic_ullong *volatile)v1 + 1, 0xFFFFFFFFFFFFFFFFLL)) {
    return v7;
  }
  (*(void (**)(char *))(*(void *)v1 + 16))(v1);
  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v1);
  return v7;
}

void sub_1C5B9C490(_Unwind_Exception *a1)
{
}

void support::log::manager::release_log_buffer(support::log::manager *this, char *a2)
{
  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (qword_1EA3D6B78) {
    goto LABEL_2;
  }
  uint64_t v3 = (char *)operator new(0xA8uLL);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = 0;
  *(void *)uint64_t v3 = &unk_1F2111610;
  uint64_t v4 = (uint64_t)(v3 + 24);
  *((void *)v3 + 3) = &unk_1F2111660;
  *((void *)v3 + 4) = 850045863;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *((void *)v3 + 14) = 0;
  *((void *)v3 + 13) = 0;
  *((void *)v3 + 11) = 0;
  *((void *)v3 + 12) = v3 + 104;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  uint64_t v5 = (std::__shared_weak_count *)off_1EA3D6B80;
  qword_1EA3D6B78 = (uint64_t)(v3 + 24);
  off_1EA3D6B80 = v3;
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
LABEL_2:
    uint64_t v4 = qword_1EA3D6B78;
    uint64_t v3 = (char *)off_1EA3D6B80;
    if (!off_1EA3D6B80) {
      goto LABEL_8;
    }
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)v3 + 1, 1uLL, memory_order_relaxed);
LABEL_8:
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  unint64_t v8 = *(void **)(v4 + 80);
  uint64_t v7 = v4 + 80;
  unint64_t v6 = v8;
  if (!v8) {
    goto LABEL_19;
  }
  uint64_t v9 = (void *)v7;
  do
  {
    unint64_t v10 = v6[4];
    BOOL v11 = v10 >= (unint64_t)a2;
    if (v10 >= (unint64_t)a2) {
      uint64_t v12 = v6;
    }
    else {
      uint64_t v12 = v6 + 1;
    }
    if (v11) {
      uint64_t v9 = v6;
    }
    unint64_t v6 = (void *)*v12;
  }
  while (*v12);
  if (v9 == (void *)v7 || v9[4] > (unint64_t)a2) {
LABEL_19:
  }
    uint64_t v9 = (void *)v7;
  if (!v3 || atomic_fetch_add((atomic_ullong *volatile)v3 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (v9 != (void *)v7) {
      goto LABEL_23;
    }
LABEL_27:
    free(a2);
    return;
  }
  (*(void (**)(char *))(*(void *)v3 + 16))(v3);
  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v3);
  if (v9 == (void *)v7) {
    goto LABEL_27;
  }
LABEL_23:
  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (!qword_1EA3D6B78)
  {
    uint64_t v13 = (char *)operator new(0xA8uLL);
    *((void *)v13 + 1) = 0;
    *((void *)v13 + 2) = 0;
    *(void *)uint64_t v13 = &unk_1F2111610;
    *((void *)v13 + 3) = &unk_1F2111660;
    *((void *)v13 + 4) = 850045863;
    *(_OWORD *)(v13 + 40) = 0u;
    *(_OWORD *)(v13 + 56) = 0u;
    *(_OWORD *)(v13 + 72) = 0u;
    *((void *)v13 + 14) = 0;
    *((void *)v13 + 13) = 0;
    *((void *)v13 + 11) = 0;
    *((void *)v13 + 12) = v13 + 104;
    *(_OWORD *)(v13 + 120) = 0u;
    *(_OWORD *)(v13 + 136) = 0u;
    *(_OWORD *)(v13 + 152) = 0u;
    unint64_t v14 = (std::__shared_weak_count *)off_1EA3D6B80;
    qword_1EA3D6B78 = (uint64_t)(v13 + 24);
    off_1EA3D6B80 = v13;
    if (!v14)
    {
      long long v135 = (std::__shared_weak_count *)v13;
      goto LABEL_34;
    }
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  uint64_t v13 = (char *)off_1EA3D6B80;
  long long v135 = (std::__shared_weak_count *)off_1EA3D6B80;
  if (off_1EA3D6B80) {
LABEL_34:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)v13 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (qword_1EA3D6B78) {
    goto LABEL_36;
  }
  uint64_t v15 = (char *)operator new(0xA8uLL);
  *((void *)v15 + 1) = 0;
  *((void *)v15 + 2) = 0;
  *(void *)uint64_t v15 = &unk_1F2111610;
  uint64_t v16 = (uint64_t)(v15 + 24);
  *((void *)v15 + 3) = &unk_1F2111660;
  *((void *)v15 + 4) = 850045863;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_OWORD *)(v15 + 72) = 0u;
  *((void *)v15 + 14) = 0;
  *((void *)v15 + 13) = 0;
  *((void *)v15 + 11) = 0;
  *((void *)v15 + 12) = v15 + 104;
  *(_OWORD *)(v15 + 120) = 0u;
  *(_OWORD *)(v15 + 136) = 0u;
  *(_OWORD *)(v15 + 152) = 0u;
  uint64_t v17 = (std::__shared_weak_count *)off_1EA3D6B80;
  qword_1EA3D6B78 = (uint64_t)(v15 + 24);
  off_1EA3D6B80 = v15;
  if (v17)
  {
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
LABEL_36:
    uint64_t v16 = qword_1EA3D6B78;
    uint64_t v15 = (char *)off_1EA3D6B80;
    uint64_t v136 = (std::__shared_weak_count *)off_1EA3D6B80;
    if (!off_1EA3D6B80) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  uint64_t v136 = (std::__shared_weak_count *)v15;
LABEL_42:
  atomic_fetch_add_explicit((atomic_ullong *volatile)v15 + 1, 1uLL, memory_order_relaxed);
LABEL_43:
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  std::string v18 = (std::mutex *)(v16 + 8);
  std::mutex::lock((std::mutex *)(v16 + 8));
  long long v19 = *(void **)(v16 + 80);
  if (!v19) {
    goto LABEL_175;
  }
  uint64_t v20 = v16 + 80;
  do
  {
    unint64_t v21 = v19[4];
    BOOL v22 = v21 >= (unint64_t)a2;
    if (v21 >= (unint64_t)a2) {
      char v23 = v19;
    }
    else {
      char v23 = v19 + 1;
    }
    if (v22) {
      uint64_t v20 = (uint64_t)v19;
    }
    long long v19 = (void *)*v23;
  }
  while (*v23);
  if (v20 == v16 + 80 || *(void *)(v20 + 32) > (unint64_t)a2)
  {
LABEL_175:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "attempting to put back a buffer the instance does not own");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v24 = *(char **)(v16 + 112);
  __int16 v25 = *(char **)(v16 + 104);
  uint64_t v26 = v24 - v25;
  if (v24 == v25) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = ((v24 - v25) << 6) - 1;
  }
  unint64_t v29 = *(void *)(v16 + 128);
  uint64_t v28 = *(void *)(v16 + 136);
  unint64_t v30 = v28 + v29;
  if (v27 != v28 + v29) {
    goto LABEL_151;
  }
  if (v29 >= 0x200)
  {
    *(void *)(v16 + 128) = v29 - 512;
    xpc_object_t v31 = v25 + 8;
    uint64_t v32 = *(void *)v25;
    *(void *)(v16 + 104) = v25 + 8;
    if (v24 != *(char **)(v16 + 120))
    {
LABEL_148:
      *(void *)unint64_t v24 = v32;
      goto LABEL_149;
    }
    xpc_object_t v33 = *(char **)(v16 + 96);
    if (v31 > v33)
    {
      uint64_t v34 = (v31 - v33) >> 3;
      if (v34 >= -1) {
        uint64_t v35 = v34 + 1;
      }
      else {
        uint64_t v35 = v34 + 2;
      }
      uint64_t v36 = v35 >> 1;
      uint64_t v37 = -v36;
      xpc_object_t v38 = &v31[-8 * v36];
      int64_t v39 = v24 - v31;
      if (v24 != v31)
      {
        memmove(&v31[-8 * v36], v31, v24 - v31);
        unint64_t v24 = *(char **)(v16 + 104);
      }
      std::string v40 = &v24[8 * v37];
      unint64_t v24 = &v38[v39];
      *(void *)(v16 + 104) = v40;
      *(void *)(v16 + 112) = &v38[v39];
      goto LABEL_148;
    }
    if (v24 == v33) {
      unint64_t v52 = 1;
    }
    else {
      unint64_t v52 = (v24 - v33) >> 2;
    }
    if (!(v52 >> 61))
    {
      char v53 = (char *)operator new(8 * v52);
      long long v54 = &v53[8 * (v52 >> 2)];
      int64_t v56 = v24 - v31;
      BOOL v55 = v24 == v31;
      unint64_t v24 = v54;
      if (v55) {
        goto LABEL_146;
      }
      unint64_t v24 = &v54[v56 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v57 = v56 - 8;
      if (v57 >= 0x38)
      {
        xpc_object_t v109 = &v53[8 * (v52 >> 2)];
        xpc_object_t v58 = v109;
        if ((unint64_t)(v109 - v31) >= 0x20)
        {
          uint64_t v110 = (v57 >> 3) + 1;
          uint64_t v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
          xpc_object_t v58 = &v54[v111];
          v31 += v111;
          int v112 = (long long *)(v25 + 24);
          xpc_object_t v113 = v109 + 16;
          uint64_t v114 = v110 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v115 = *v112;
            *(v113 - 1) = *(v112 - 1);
            _OWORD *v113 = v115;
            v112 += 2;
            v113 += 2;
            v114 -= 4;
          }
          while (v114);
          if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_146:
            *(void *)(v16 + 96) = v53;
            *(void *)(v16 + 104) = v54;
            *(void *)(v16 + 112) = v24;
            *(void *)(v16 + 120) = &v53[8 * v52];
            if (v33)
            {
              operator delete(v33);
              unint64_t v24 = *(char **)(v16 + 112);
            }
            goto LABEL_148;
          }
        }
      }
      else
      {
        xpc_object_t v58 = &v53[8 * (v52 >> 2)];
      }
      do
      {
        uint64_t v116 = *(void *)v31;
        v31 += 8;
        *(void *)xpc_object_t v58 = v116;
        v58 += 8;
      }
      while (v58 != v24);
      goto LABEL_146;
    }
LABEL_177:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v41 = v26 >> 3;
  size_t v42 = *(char **)(v16 + 120);
  size_t v43 = *(char **)(v16 + 96);
  if (v26 >> 3 >= (unint64_t)((v42 - v43) >> 3))
  {
    if (v42 == v43) {
      unint64_t v46 = 1;
    }
    else {
      unint64_t v46 = (v42 - v43) >> 2;
    }
    if (!(v46 >> 61))
    {
      uint64_t v47 = (char *)operator new(8 * v46);
      uint64_t v48 = operator new(0x1000uLL);
      long long v49 = &v47[8 * v41];
      long long v50 = &v47[8 * v46];
      if (v41 == v46)
      {
        std::string::size_type v134 = v48;
        if (v26 < 1)
        {
          if (v24 == v25) {
            unint64_t v60 = 1;
          }
          else {
            unint64_t v60 = v26 >> 2;
          }
          if (v60 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          long long v49 = (char *)operator new(8 * v60);
          long long v50 = &v49[8 * v60];
          operator delete(v47);
          __int16 v25 = *(char **)(v16 + 104);
          unint64_t v24 = *(char **)(v16 + 112);
          uint64_t v47 = v49;
        }
        else
        {
          unint64_t v51 = v41 + 2;
          if (v41 >= -1) {
            unint64_t v51 = v41 + 1;
          }
          v49 -= 8 * (v51 >> 1);
        }
        uint64_t v48 = v134;
      }
      *(void *)long long v49 = v48;
      unsigned int v61 = v49 + 8;
      if (v24 != v25)
      {
        do
        {
          if (v49 == v47)
          {
            if (v61 >= v50)
            {
              if (v50 == v47) {
                unint64_t v68 = 1;
              }
              else {
                unint64_t v68 = (v50 - v47) >> 2;
              }
              if (v68 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              xpc_object_t v69 = (char *)operator new(8 * v68);
              xpc_object_t v70 = v69;
              unint64_t v71 = (v68 + 3) >> 2;
              long long v49 = &v69[8 * v71];
              int64_t v72 = v61 - v47;
              BOOL v55 = v61 == v47;
              unsigned int v61 = v49;
              if (!v55)
              {
                unsigned int v61 = &v49[v72 & 0xFFFFFFFFFFFFFFF8];
                unint64_t v73 = v72 - 8;
                xpc_object_t v74 = &v69[8 * v71];
                xpc_object_t v75 = v47;
                if (v73 < 0x38) {
                  goto LABEL_181;
                }
                uint64_t v76 = 8 * v71;
                xpc_object_t v74 = &v69[8 * v71];
                xpc_object_t v75 = v47;
                if ((unint64_t)(v74 - v47) < 0x20) {
                  goto LABEL_181;
                }
                uint64_t v77 = (v73 >> 3) + 1;
                uint64_t v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
                xpc_object_t v74 = &v49[v78];
                xpc_object_t v75 = &v47[v78];
                xpc_object_t v79 = (long long *)(v47 + 16);
                xpc_object_t v80 = &v69[v76 + 16];
                uint64_t v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v82 = *v79;
                  *((_OWORD *)v80 - 1) = *(v79 - 1);
                  *(_OWORD *)xpc_object_t v80 = v82;
                  v79 += 2;
                  v80 += 32;
                  v81 -= 4;
                }
                while (v81);
                if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_181:
                  do
                  {
                    uint64_t v83 = *(void *)v75;
                    v75 += 8;
                    *(void *)xpc_object_t v74 = v83;
                    v74 += 8;
                  }
                  while (v74 != v61);
                }
              }
              long long v50 = &v69[8 * v68];
              operator delete(v47);
              uint64_t v47 = v70;
            }
            else
            {
              uint64_t v64 = (v50 - v61) >> 3;
              if (v64 >= -1) {
                uint64_t v65 = v64 + 1;
              }
              else {
                uint64_t v65 = v64 + 2;
              }
              uint64_t v66 = v65 >> 1;
              long long v49 = &v47[8 * (v65 >> 1)];
              xpc_object_t v67 = v47;
              if (v61 != v47)
              {
                memmove(v49, v47, v61 - v47);
                xpc_object_t v67 = v61;
              }
              unsigned int v61 = (char *)v67 + 8 * v66;
            }
          }
          uint64_t v63 = *((void *)v24 - 1);
          v24 -= 8;
          *((void *)v49 - 1) = v63;
          v49 -= 8;
        }
        while (v24 != *(char **)(v16 + 104));
      }
      dispatch_object_t v62 = *(void **)(v16 + 96);
      *(void *)(v16 + 96) = v47;
      *(void *)(v16 + 104) = v49;
      *(void *)(v16 + 112) = v61;
      *(void *)(v16 + 120) = v50;
      std::string v18 = (std::mutex *)(v16 + 8);
      if (v62) {
        operator delete(v62);
      }
      goto LABEL_150;
    }
    goto LABEL_177;
  }
  uint64_t v44 = operator new(0x1000uLL);
  dispatch_object_t v45 = v44;
  if (v42 == v24)
  {
    if (v25 == v43)
    {
      if (v24 == v25) {
        unint64_t v84 = 1;
      }
      else {
        unint64_t v84 = (v42 - v25) >> 2;
      }
      if (v84 >> 61) {
        goto LABEL_177;
      }
      xpc_object_t v85 = (char *)operator new(8 * v84);
      unint64_t v86 = (v84 + 3) >> 2;
      unint64_t v59 = &v85[8 * v86];
      size_t v87 = v59;
      if (v24 != v25)
      {
        size_t v87 = &v59[8 * v41];
        size_t v88 = &v85[8 * v86];
        xpc_object_t v89 = v25;
        if ((unint64_t)(v26 - 8) < 0x38) {
          goto LABEL_182;
        }
        uint64_t v90 = &v85[8 * v86];
        size_t v88 = v90;
        xpc_object_t v89 = v25;
        if ((unint64_t)(v90 - v25) < 0x20) {
          goto LABEL_182;
        }
        unint64_t v91 = ((unint64_t)(v26 - 8) >> 3) + 1;
        uint64_t v92 = 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
        size_t v88 = &v59[v92];
        xpc_object_t v89 = &v25[v92];
        uint64_t v93 = (long long *)(v25 + 16);
        xpc_object_t v94 = v90 + 16;
        uint64_t v95 = v91 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v96 = *v93;
          *(v94 - 1) = *(v93 - 1);
          _OWORD *v94 = v96;
          v93 += 2;
          v94 += 2;
          v95 -= 4;
        }
        while (v95);
        if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_182:
          do
          {
            uint64_t v97 = *(void *)v89;
            v89 += 8;
            *(void *)size_t v88 = v97;
            v88 += 8;
          }
          while (v88 != v87);
        }
      }
      *(void *)(v16 + 96) = v85;
      *(void *)(v16 + 104) = v59;
      *(void *)(v16 + 112) = v87;
      *(void *)(v16 + 120) = &v85[8 * v84];
      if (v25)
      {
        operator delete(v25);
        unint64_t v59 = *(char **)(v16 + 104);
      }
    }
    else
    {
      unint64_t v59 = v25;
    }
    *((void *)v59 - 1) = v45;
    xpc_object_t v98 = *(char **)(v16 + 104);
    xpc_object_t v99 = *(char **)(v16 + 112);
    *(void *)(v16 + 104) = v98 - 8;
    uint64_t v100 = *((void *)v98 - 1);
    *(void *)(v16 + 104) = v98;
    if (v99 != *(char **)(v16 + 120)) {
      goto LABEL_133;
    }
    xpc_object_t v101 = *(char **)(v16 + 96);
    if (v98 > v101)
    {
      uint64_t v102 = (v98 - v101) >> 3;
      if (v102 >= -1) {
        uint64_t v103 = v102 + 1;
      }
      else {
        uint64_t v103 = v102 + 2;
      }
      uint64_t v104 = v103 >> 1;
      uint64_t v105 = -v104;
      xpc_object_t v106 = &v98[-8 * v104];
      size_t v107 = v99 - v98;
      if (v107)
      {
        memmove(&v98[-8 * v104], v98, v107);
        xpc_object_t v98 = *(char **)(v16 + 104);
      }
      xpc_object_t v108 = &v106[v107];
      *(void *)(v16 + 104) = &v98[8 * v105];
      *(void *)(v16 + 112) = v108;
      *(void *)xpc_object_t v108 = v100;
      goto LABEL_149;
    }
    if (v99 == v101) {
      unint64_t v118 = 1;
    }
    else {
      unint64_t v118 = (v99 - v101) >> 2;
    }
    if (v118 >> 61) {
      goto LABEL_177;
    }
    long long v119 = (char *)operator new(8 * v118);
    long long v120 = &v119[8 * (v118 >> 2)];
    int64_t v121 = v99 - v98;
    BOOL v55 = v99 == v98;
    xpc_object_t v99 = v120;
    if (!v55)
    {
      xpc_object_t v99 = &v120[v121 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v122 = v121 - 8;
      if (v122 < 0x38)
      {
        long long v123 = &v119[8 * (v118 >> 2)];
        do
        {
LABEL_172:
          uint64_t v132 = *(void *)v98;
          v98 += 8;
          *(void *)long long v123 = v132;
          v123 += 8;
        }
        while (v123 != v99);
        goto LABEL_173;
      }
      long long v124 = &v119[8 * (v118 >> 2)];
      long long v123 = v124;
      if ((unint64_t)(v124 - v98) < 0x20) {
        goto LABEL_172;
      }
      uint64_t v125 = (v122 >> 3) + 1;
      uint64_t v126 = 8 * (v125 & 0x3FFFFFFFFFFFFFFCLL);
      long long v123 = &v120[v126];
      xpc_object_t v127 = &v98[v126];
      xpc_object_t v128 = (long long *)(v98 + 16);
      uint64_t v129 = v124 + 16;
      uint64_t v130 = v125 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v131 = *v128;
        *(v129 - 1) = *(v128 - 1);
        _OWORD *v129 = v131;
        v128 += 2;
        v129 += 2;
        v130 -= 4;
      }
      while (v130);
      xpc_object_t v98 = v127;
      if (v125 != (v125 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_172;
      }
    }
LABEL_173:
    *(void *)(v16 + 96) = v119;
    *(void *)(v16 + 104) = v120;
    *(void *)(v16 + 112) = v99;
    *(void *)(v16 + 120) = &v119[8 * v118];
    if (v101)
    {
      operator delete(v101);
      xpc_object_t v99 = *(char **)(v16 + 112);
    }
LABEL_133:
    *(void *)xpc_object_t v99 = v100;
    goto LABEL_149;
  }
  *(void *)unint64_t v24 = v44;
LABEL_149:
  *(void *)(v16 + 112) += 8;
LABEL_150:
  __int16 v25 = *(char **)(v16 + 104);
  uint64_t v28 = *(void *)(v16 + 136);
  unint64_t v30 = *(void *)(v16 + 128) + v28;
LABEL_151:
  *(void *)(*(void *)&v25[(v30 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v30 & 0x1FF)) = a2;
  *(void *)(v16 + 136) = v28 + 1;
  std::mutex::unlock(v18);
  if (v136 && !atomic_fetch_add(&v136->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
    std::__shared_weak_count::__release_weak(v136);
    int64_t v117 = v135;
    if (!v135) {
      return;
    }
  }
  else
  {
    int64_t v117 = v135;
    if (!v135) {
      return;
    }
  }
  if (!atomic_fetch_add(&v117->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
    std::__shared_weak_count::__release_weak(v117);
  }
}

void sub_1C5B9D0F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, std::mutex *a10, char a11, uint64_t a12, char a13)
{
  operator delete(__p);
  operator delete(v13);
  std::mutex::unlock(a10);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void support::log::manager::add_delegates(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2 != a2)
  {
    uint64_t v5 = (std::mutex *)(a1 + 8);
    uint64_t v6 = a1 + 120;
    do
    {
      std::mutex::lock(v5);
      uint64_t v7 = operator new(0x18uLL);
      uint64_t v8 = *(void *)(v2 + 16);
      *(void *)(v2 + 16) = 0;
      v7[1] = v6;
      v7[2] = v8;
      uint64_t v9 = *(void *)(a1 + 120);
      void *v7 = v9;
      *(void *)(v9 + 8) = v7;
      *(void *)(a1 + 120) = v7;
      ++*(void *)(a1 + 136);
      std::mutex::unlock(v5);
      uint64_t v2 = *(void *)(v2 + 8);
    }
    while (v2 != a2);
  }
}

void sub_1C5B9D264(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void support::log::manager::set_defaults(support::log::manager *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  *((unsigned char *)this + 112) = 3;
  if (*((void *)this + 17))
  {
    uint64_t v3 = (char *)this + 120;
    uint64_t v4 = *((void *)this + 15);
    uint64_t v5 = (char *)*((void *)this + 16);
    uint64_t v6 = *(void *)v5;
    *(void *)(v6 + 8) = *(void *)(v4 + 8);
    **(void **)(v4 + 8) = v6;
    *((void *)this + 17) = 0;
    if (v5 != (char *)this + 120)
    {
      do
      {
        uint64_t v8 = (char *)*((void *)v5 + 1);
        uint64_t v7 = *((void *)v5 + 2);
        *((void *)v5 + 2) = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
        }
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v3);
    }
  }

  std::mutex::unlock(v2);
}

void support::log::manager::message_delegates(support::log::manager *a1, uint64_t a2, char *a3)
{
  uint64_t v4 = (void *)((char *)a1 + 120);
  uint64_t v5 = *((void *)a1 + 16);
  if ((support::log::manager *)v5 != (support::log::manager *)((char *)a1 + 120))
  {
    do
    {
      a1 = (support::log::manager *)(***(uint64_t (****)(void, uint64_t, char *))(v5 + 16))(*(void *)(v5 + 16), a2, a3);
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while ((void *)v5 != v4);
  }

  support::log::manager::release_log_buffer(a1, a3);
}

void support::log::stdout_delegate::create(uint64_t *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v4 = operator new(0x20uLL);
  uint64_t v5 = v4;
  uint64_t v6 = *a1;
  uint64_t v7 = (std::__shared_weak_count *)a1[1];
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  void *v4 = &unk_1F21113B8;
  v4[1] = v6;
  uint64_t v4[2] = v7;
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((unsigned char *)v4 + 24) = 1;
    std::__shared_weak_count::__release_weak(v7);
    *uint64_t v5 = &unk_1F2111430;
    std::__shared_weak_count::__release_weak(v7);
    *a2 = v5;
  }
  else
  {
    *((unsigned char *)v4 + 24) = 1;
    void *v4 = &unk_1F2111430;
    *a2 = v4;
  }
}

uint64_t support::log::stdout_delegate::stdout_delegate(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1F21113B8;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(unsigned char *)(a1 + 24) = 1;
    std::__shared_weak_count::__release_weak(v3);
  }
  else
  {
    *(unsigned char *)(a1 + 24) = 1;
  }
  *(void *)a1 = &unk_1F2111430;
  return a1;
}

{
  std::__shared_weak_count *v3;
  uint64_t v4;

  uint64_t v4 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1F21113B8;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(unsigned char *)(a1 + 24) = 1;
    std::__shared_weak_count::__release_weak(v3);
  }
  else
  {
    *(unsigned char *)(a1 + 24) = 1;
  }
  *(void *)a1 = &unk_1F2111430;
  return a1;
}

double support::log::stdout_delegate::create@<D0>(void *a1@<X8>)
{
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v3 = operator new(0x20uLL);
  double result = 0.0;
  _OWORD *v3 = 0u;
  v3[1] = 0u;
  *(void *)uint64_t v3 = &unk_1F2111430;
  *a1 = v3;
  return result;
}

void support::log::stdout_delegate::message(uint64_t a1, uint64_t a2, const char *a3)
{
  if (a3)
  {
    memset(v6, 170, sizeof(v6));
    (*(void (**)(void *__return_ptr))(*(void *)a1 + 24))(v6);
    if (LOBYTE(v6[2]))
    {
      if (!v6[1]) {
        return;
      }
      uint64_t v4 = std::__shared_weak_count::lock((std::__shared_weak_count *)v6[1]);
      if (v4)
      {
        uint64_t v5 = v4;
        if (v6[0]) {
          fprintf((FILE *)*MEMORY[0x1E4F143D8], "%s\n", a3);
        }
        if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x1E4F143D8], "%s\n", a3);
    }
    if (LOBYTE(v6[2]))
    {
      if (v6[1]) {
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v6[1]);
      }
    }
  }
}

support::log::manager_global *support::log::manager_global::manager_global(support::log::manager_global *this)
{
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&__p, "global");
  uint64_t v10 = 0;
  BOOL v11 = &unk_1F21113E8;
  char v12 = 3;
  uint64_t v8 = (uint64_t)&v8;
  uint64_t v9 = &v8;
  support::log::manager::manager((uint64_t)this, &__p, (uint64_t)&v11, &v8);
  if (v10)
  {
    uint64_t v2 = v8;
    uint64_t v3 = v9;
    uint64_t v4 = *v9;
    *(void *)(v4 + 8) = *(void *)(v8 + 8);
    **(void **)(v2 + 8) = v4;
    uint64_t v10 = 0;
    if (v3 != &v8)
    {
      do
      {
        uint64_t v7 = (uint64_t *)v3[1];
        uint64_t v6 = v3[2];
        v3[2] = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
        operator delete(v3);
        uint64_t v3 = v7;
      }
      while (v7 != &v8);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)this = &unk_1F2111460;
  return this;
}

void sub_1C5B9D8E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *support::log::client::descriptor::descriptor(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = &unk_1F2111490;
  uint64_t descriptor_instance = support::log::global_client_descriptor_manager::get_descriptor_instance(a2, a3);
  a1[1] = descriptor_instance;
  a1[2] = descriptor_instance;
  a1[3] = descriptor_instance + 8;
  a1[4] = descriptor_instance + 32;
  a1[5] = descriptor_instance + 56;
  return a1;
}

{
  uint64_t descriptor_instance;

  *a1 = &unk_1F2111490;
  uint64_t descriptor_instance = support::log::global_client_descriptor_manager::get_descriptor_instance(a2, a3);
  a1[1] = descriptor_instance;
  a1[2] = descriptor_instance;
  a1[3] = descriptor_instance + 8;
  a1[4] = descriptor_instance + 32;
  a1[5] = descriptor_instance + 56;
  return a1;
}

uint64_t support::log::global_client_descriptor_manager::get_descriptor_instance(uint64_t a1, uint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_12, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_12))
  {
    *(_OWORD *)&qword_1EBBDCE78 = 0u;
    *(_OWORD *)&qword_1EBBDCE68 = 0u;
    dword_1EBBDCE88 = 1065353216;
    __cxa_guard_release(&_MergedGlobals_12);
  }
  std::mutex::lock(&support::log::global_client_descriptor_manager::get_descriptor_instance(std::string const&,std::string const&)::sMutex);
  memset(__p, 170, sizeof(__p));
  int v4 = *(char *)(a1 + 23);
  if (v4 >= 0) {
    size_t v5 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v5 = *(void *)(a1 + 8);
  }
  unint64_t v6 = v5 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v5 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v6 >= 0x17)
  {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v5 + 1;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5 + 1;
    if (!v5) {
      goto LABEL_16;
    }
  }
  if (v4 >= 0) {
    uint64_t v10 = (const std::string::value_type *)a1;
  }
  else {
    uint64_t v10 = *(const std::string::value_type **)a1;
  }
  memmove(p_dst, v10, v5);
LABEL_16:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v5) = 44;
  int v11 = *(char *)(a2 + 23);
  if (v11 >= 0) {
    char v12 = (const std::string::value_type *)a2;
  }
  else {
    char v12 = *(const std::string::value_type **)a2;
  }
  if (v11 >= 0) {
    std::string::size_type v13 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v13 = *(void *)(a2 + 8);
  }
  unint64_t v14 = std::string::append(&__dst, v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  xpc_object_t __p[2] = (void *)v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(__p)) {
      goto LABEL_156;
    }
  }
  else if (std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(__p))
  {
    goto LABEL_156;
  }
  uint64_t v16 = (char *)operator new(0x40uLL);
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v72 = *(std::string *)a1;
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v71, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v71 = *(std::string *)a2;
  }
  *(void *)uint64_t v16 = &unk_1F2111590;
  uint64_t v17 = v16 + 8;
  *(std::string *)(v16 + 8) = v72;
  memset(&v72, 0, sizeof(v72));
  *(std::string *)(v16 + 32) = v71;
  memset(&v71, 0, sizeof(v71));
  if (v16[31] < 0)
  {
    uint64_t v17 = *(const char **)v17;
    std::string v18 = v16 + 32;
    if ((v16[55] & 0x80000000) == 0) {
      goto LABEL_34;
    }
  }
  else
  {
    std::string v18 = v16 + 32;
    if ((v16[55] & 0x80000000) == 0) {
      goto LABEL_34;
    }
  }
  std::string v18 = *(const char **)v18;
LABEL_34:
  *((void *)v16 + 7) = os_log_create(v17, v18);
  if (SHIBYTE(__p[2]) >= 0) {
    long long v19 = (uint64_t *)__p;
  }
  else {
    long long v19 = (uint64_t *)__p[0];
  }
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v20 = HIBYTE(__p[2]);
  }
  else {
    unint64_t v20 = (unint64_t)__p[1];
  }
  unint64_t v21 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&__dst, v19, v20);
  unint64_t v22 = v21;
  unint64_t v23 = qword_1EBBDCE70;
  if (qword_1EBBDCE70)
  {
    uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EBBDCE70);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      unint64_t v25 = v21;
      if (v21 >= qword_1EBBDCE70) {
        unint64_t v25 = v21 % qword_1EBBDCE70;
      }
    }
    else
    {
      unint64_t v25 = (qword_1EBBDCE70 - 1) & v21;
    }
    uint64_t v26 = *(uint64_t ***)(qword_1EBBDCE68 + 8 * v25);
    if (v26)
    {
      uint64_t v27 = *v26;
      if (*v26)
      {
        if (SHIBYTE(__p[2]) >= 0) {
          uint64_t v28 = (void *)HIBYTE(__p[2]);
        }
        else {
          uint64_t v28 = __p[1];
        }
        if (SHIBYTE(__p[2]) >= 0) {
          unint64_t v29 = __p;
        }
        else {
          unint64_t v29 = (void **)__p[0];
        }
        if (v24.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v35 = v27[1];
            if (v35 == v22)
            {
              uint64_t v36 = *((unsigned __int8 *)v27 + 39);
              if ((v36 & 0x80u) == 0) {
                uint64_t v37 = (void *)*((unsigned __int8 *)v27 + 39);
              }
              else {
                uint64_t v37 = (void *)v27[3];
              }
              if (v37 == v28)
              {
                xpc_object_t v38 = (const void **)(v27 + 2);
                if ((v36 & 0x80) != 0)
                {
                  if (!memcmp(*v38, v29, v27[3])) {
                    goto LABEL_154;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v27 + 39)) {
                    goto LABEL_154;
                  }
                  int64_t v39 = v29;
                  while (*(unsigned __int8 *)v38 == *(unsigned __int8 *)v39)
                  {
                    xpc_object_t v38 = (const void **)((char *)v38 + 1);
                    int64_t v39 = (void **)((char *)v39 + 1);
                    if (!--v36) {
                      goto LABEL_154;
                    }
                  }
                }
              }
            }
            else if ((v35 & (v23 - 1)) != v25)
            {
              goto LABEL_90;
            }
            uint64_t v27 = (uint64_t *)*v27;
            if (!v27) {
              goto LABEL_90;
            }
          }
        }
        do
        {
          unint64_t v30 = v27[1];
          if (v30 == v22)
          {
            uint64_t v31 = *((unsigned __int8 *)v27 + 39);
            if ((v31 & 0x80u) == 0) {
              uint64_t v32 = (void *)*((unsigned __int8 *)v27 + 39);
            }
            else {
              uint64_t v32 = (void *)v27[3];
            }
            if (v32 == v28)
            {
              xpc_object_t v33 = (const void **)(v27 + 2);
              if ((v31 & 0x80) != 0)
              {
                if (!memcmp(*v33, v29, v27[3])) {
                  goto LABEL_154;
                }
              }
              else
              {
                if (!*((unsigned char *)v27 + 39)) {
                  goto LABEL_154;
                }
                uint64_t v34 = v29;
                while (*(unsigned __int8 *)v33 == *(unsigned __int8 *)v34)
                {
                  xpc_object_t v33 = (const void **)((char *)v33 + 1);
                  uint64_t v34 = (void **)((char *)v34 + 1);
                  if (!--v31) {
                    goto LABEL_154;
                  }
                }
              }
            }
          }
          else
          {
            if (v30 >= v23) {
              v30 %= v23;
            }
            if (v30 != v25) {
              break;
            }
          }
          uint64_t v27 = (uint64_t *)*v27;
        }
        while (v27);
      }
    }
  }
  else
  {
    unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
  }
LABEL_90:
  __dst.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAA00;
  std::string v40 = (char *)operator new(0x30uLL);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)&qword_1EBBDCE78;
  *(void *)std::string v40 = 0;
  *((void *)v40 + 1) = v22;
  uint64_t v41 = (std::string *)(v40 + 16);
  if (SHIBYTE(__p[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v41, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
  }
  else
  {
    *(_OWORD *)&v41->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *((void **)v40 + 4) = __p[2];
  }
  *((void *)v40 + 5) = v16;
  __dst.__r_.__value_.__s.__data_[16] = 1;
  float v42 = (float)(unint64_t)(qword_1EBBDCE80 + 1);
  if (!v23 || (float)(*(float *)&dword_1EBBDCE88 * (float)v23) < v42)
  {
    BOOL v45 = 1;
    if (v23 >= 3) {
      BOOL v45 = (v23 & (v23 - 1)) != 0;
    }
    unint64_t v46 = v45 | (2 * v23);
    unint64_t v47 = vcvtps_u32_f32(v42 / *(float *)&dword_1EBBDCE88);
    if (v46 <= v47) {
      unint64_t prime = v47;
    }
    else {
      unint64_t prime = v46;
    }
    if (prime == 1)
    {
      unint64_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      unint64_t prime = std::__next_prime(prime);
    }
    unint64_t v23 = qword_1EBBDCE70;
    if (prime > qword_1EBBDCE70) {
      goto LABEL_107;
    }
    if (prime >= qword_1EBBDCE70) {
      goto LABEL_140;
    }
    unint64_t v59 = vcvtps_u32_f32((float)(unint64_t)qword_1EBBDCE80 / *(float *)&dword_1EBBDCE88);
    if ((unint64_t)qword_1EBBDCE70 < 3
      || (uint8x8_t v60 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EBBDCE70), v60.i16[0] = vaddlv_u8(v60), v60.u32[0] > 1uLL))
    {
      unint64_t v59 = std::__next_prime(v59);
    }
    else
    {
      uint64_t v61 = 1 << -(char)__clz(v59 - 1);
      if (v59 >= 2) {
        unint64_t v59 = v61;
      }
    }
    if (prime <= v59) {
      unint64_t prime = v59;
    }
    if (prime >= v23)
    {
      unint64_t v23 = qword_1EBBDCE70;
    }
    else
    {
      if (prime)
      {
LABEL_107:
        if (prime >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        long long v49 = operator new(8 * prime);
        long long v50 = (void *)qword_1EBBDCE68;
        qword_1EBBDCE68 = (uint64_t)v49;
        if (v50) {
          operator delete(v50);
        }
        uint64_t v51 = 0;
        qword_1EBBDCE70 = prime;
        do
          *(void *)(qword_1EBBDCE68 + 8 * v51++) = 0;
        while (prime != v51);
        unint64_t v52 = (void **)qword_1EBBDCE78;
        if (!qword_1EBBDCE78) {
          goto LABEL_139;
        }
        unint64_t v53 = *(void *)(qword_1EBBDCE78 + 8);
        unint64_t v54 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          unint64_t v55 = v53 & v54;
          *(void *)(qword_1EBBDCE68 + 8 * v55) = &qword_1EBBDCE78;
          for (uint64_t i = *v52; *v52; uint64_t i = *v52)
          {
            unint64_t v57 = i[1] & v54;
            if (v57 == v55)
            {
              unint64_t v52 = (void **)i;
            }
            else if (*(void *)(qword_1EBBDCE68 + 8 * v57))
            {
              NSObject *v52 = (void *)*i;
              uint64_t v58 = 8 * v57;
              *uint64_t i = **(void **)(qword_1EBBDCE68 + v58);
              **(void **)(qword_1EBBDCE68 + v58) = i;
            }
            else
            {
              *(void *)(qword_1EBBDCE68 + 8 * v57) = v52;
              unint64_t v52 = (void **)i;
              unint64_t v55 = v57;
            }
          }
LABEL_139:
          unint64_t v23 = prime;
          goto LABEL_140;
        }
        if (v53 >= prime) {
          v53 %= prime;
        }
        *(void *)(qword_1EBBDCE68 + 8 * v53) = &qword_1EBBDCE78;
        dispatch_object_t v62 = *v52;
        if (!*v52) {
          goto LABEL_139;
        }
        while (1)
        {
          unint64_t v64 = v62[1];
          if (v64 >= prime) {
            v64 %= prime;
          }
          if (v64 == v53) {
            goto LABEL_133;
          }
          if (*(void *)(qword_1EBBDCE68 + 8 * v64))
          {
            NSObject *v52 = (void *)*v62;
            uint64_t v63 = 8 * v64;
            void *v62 = **(void **)(qword_1EBBDCE68 + v63);
            **(void **)(qword_1EBBDCE68 + v63) = v62;
            dispatch_object_t v62 = v52;
LABEL_133:
            unint64_t v52 = (void **)v62;
            dispatch_object_t v62 = (void *)*v62;
            if (!v62) {
              goto LABEL_139;
            }
          }
          else
          {
            *(void *)(qword_1EBBDCE68 + 8 * v64) = v52;
            unint64_t v52 = (void **)v62;
            dispatch_object_t v62 = (void *)*v62;
            unint64_t v53 = v64;
            if (!v62) {
              goto LABEL_139;
            }
          }
        }
      }
      xpc_object_t v70 = (void *)qword_1EBBDCE68;
      qword_1EBBDCE68 = 0;
      if (v70) {
        operator delete(v70);
      }
      unint64_t v23 = 0;
      qword_1EBBDCE70 = 0;
    }
LABEL_140:
    unint64_t v65 = v23 - 1;
    if ((v23 & (v23 - 1)) != 0)
    {
      if (v22 >= v23)
      {
        unint64_t v25 = v22 % v23;
        size_t v43 = *(void **)(qword_1EBBDCE68 + 8 * (v22 % v23));
        uint64_t v44 = (void *)__dst.__r_.__value_.__r.__words[0];
        if (v43) {
          goto LABEL_96;
        }
      }
      else
      {
        unint64_t v25 = v22;
        size_t v43 = *(void **)(qword_1EBBDCE68 + 8 * v22);
        uint64_t v44 = (void *)__dst.__r_.__value_.__r.__words[0];
        if (v43) {
          goto LABEL_96;
        }
      }
    }
    else
    {
      unint64_t v25 = v65 & v22;
      size_t v43 = *(void **)(qword_1EBBDCE68 + 8 * (v65 & v22));
      uint64_t v44 = (void *)__dst.__r_.__value_.__r.__words[0];
      if (v43) {
        goto LABEL_96;
      }
    }
LABEL_142:
    *uint64_t v44 = qword_1EBBDCE78;
    qword_1EBBDCE78 = __dst.__r_.__value_.__r.__words[0];
    *(void *)(qword_1EBBDCE68 + 8 * v25) = &qword_1EBBDCE78;
    if (*(void *)__dst.__r_.__value_.__l.__data_)
    {
      unint64_t v66 = *(void *)(*(void *)__dst.__r_.__value_.__l.__data_ + 8);
      if ((v23 & (v23 - 1)) != 0)
      {
        if (v66 >= v23) {
          v66 %= v23;
        }
      }
      else
      {
        v66 &= v23 - 1;
      }
      *(void *)(qword_1EBBDCE68 + 8 * v66) = __dst.__r_.__value_.__r.__words[0];
    }
    goto LABEL_153;
  }
  size_t v43 = *(void **)(qword_1EBBDCE68 + 8 * v25);
  uint64_t v44 = (void *)__dst.__r_.__value_.__r.__words[0];
  if (!v43) {
    goto LABEL_142;
  }
LABEL_96:
  *uint64_t v44 = *v43;
  *size_t v43 = __dst.__r_.__value_.__r.__words[0];
LABEL_153:
  ++qword_1EBBDCE80;
LABEL_154:
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v71.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_156:
      xpc_object_t v67 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(__p);
      if (v67) {
        goto LABEL_157;
      }
LABEL_162:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
  }
  else if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_156;
  }
  operator delete(v72.__r_.__value_.__l.__data_);
  xpc_object_t v67 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(__p);
  if (!v67) {
    goto LABEL_162;
  }
LABEL_157:
  uint64_t v68 = v67[5];
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  std::mutex::unlock(&support::log::global_client_descriptor_manager::get_descriptor_instance(std::string const&,std::string const&)::sMutex);
  return v68;
}

void sub_1C5B9E240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
LABEL_3:
    if ((a28 & 0x80000000) == 0)
    {
LABEL_8:
      std::mutex::unlock(&support::log::global_client_descriptor_manager::get_descriptor_instance(std::string const&,std::string const&)::sMutex);
      _Unwind_Resume(a1);
    }
LABEL_7:
    operator delete(a23);
    std::mutex::unlock(&support::log::global_client_descriptor_manager::get_descriptor_instance(std::string const&,std::string const&)::sMutex);
    _Unwind_Resume(a1);
  }
  operator delete(a16);
  if ((a28 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

BOOL support::log::client::descriptor::operator==(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 16) == *(void *)(a2 + 16);
}

void *support::log::client::client(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = &unk_1F21114B0;
  *(_OWORD *)char v12 = *(_OWORD *)a2;
  uint64_t v13 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v11 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  a1[1] = &unk_1F2111490;
  uint64_t descriptor_instance = support::log::global_client_descriptor_manager::get_descriptor_instance((uint64_t)v12, (uint64_t)__p);
  a1[2] = descriptor_instance;
  a1[3] = descriptor_instance;
  a1[4] = descriptor_instance + 8;
  a1[5] = descriptor_instance + 32;
  a1[6] = descriptor_instance + 56;
  if ((SHIBYTE(v11) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    operator delete(v12[0]);
    if (a4) {
      goto LABEL_4;
    }
LABEL_7:
    pthread_mutex_lock(&ctu::Singleton<support::log::manager_global,support::log::manager_global,ctu::PthreadMutexGuardPolicy<support::log::manager_global>>::sInstance);
    if (!qword_1EA3D6BC8)
    {
      uint64_t v7 = operator new(0xA8uLL);
      v7[1] = 0;
      v7[2] = 0;
      void *v7 = &unk_1F21116F8;
      a4 = (uint64_t)(v7 + 3);
      support::log::manager_global::manager_global((support::log::manager_global *)(v7 + 3));
      uint64_t v8 = (std::__shared_weak_count *)off_1EA3D6BD0;
      qword_1EA3D6BC8 = (uint64_t)(v7 + 3);
      off_1EA3D6BD0 = v7;
      if (!v8)
      {
LABEL_13:
        atomic_fetch_add_explicit(v7 + 1, 1uLL, memory_order_relaxed);
LABEL_14:
        pthread_mutex_unlock(&ctu::Singleton<support::log::manager_global,support::log::manager_global,ctu::PthreadMutexGuardPolicy<support::log::manager_global>>::sInstance);
        a1[7] = a4;
        a1[8] = v7;
        goto LABEL_15;
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    a4 = qword_1EA3D6BC8;
    uint64_t v7 = off_1EA3D6BD0;
    if (!off_1EA3D6BD0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v13) < 0) {
    goto LABEL_6;
  }
LABEL_3:
  if (!a4) {
    goto LABEL_7;
  }
LABEL_4:
  a1[7] = 0;
  a1[8] = 0;
LABEL_15:
  a1[9] = a4;
  return a1;
}

void sub_1C5B9E588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__shared_weak_count::~__shared_weak_count(v21);
  operator delete(v23);
  pthread_mutex_unlock(&ctu::Singleton<support::log::manager_global,support::log::manager_global,ctu::PthreadMutexGuardPolicy<support::log::manager_global>>::sInstance);
  _Unwind_Resume(a1);
}

void *support::log::client::client(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  *a1 = &unk_1F21114B0;
  *(_OWORD *)char v12 = *(_OWORD *)a2;
  uint64_t v13 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v11 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  a1[1] = &unk_1F2111490;
  uint64_t descriptor_instance = support::log::global_client_descriptor_manager::get_descriptor_instance((uint64_t)v12, (uint64_t)__p);
  a1[2] = descriptor_instance;
  a1[3] = descriptor_instance;
  a1[4] = descriptor_instance + 8;
  a1[5] = descriptor_instance + 32;
  a1[6] = descriptor_instance + 56;
  if ((SHIBYTE(v11) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    operator delete(v12[0]);
    uint64_t v7 = *a4;
    uint64_t v8 = a4[1];
    a1[7] = *a4;
    a1[8] = v8;
    if (!v8) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v13) < 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v7 = *a4;
  uint64_t v8 = a4[1];
  a1[7] = *a4;
  a1[8] = v8;
  if (v8)
  {
LABEL_4:
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v7 = a1[7];
  }
LABEL_5:
  a1[9] = v7;
  return a1;
}

void sub_1C5B9E704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void *support::log::client::client(void *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v6 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  support::log::client::client(a1, (uint64_t)v7, (uint64_t)__p, 0);
  if (SHIBYTE(v6) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v8) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(v7[0]);
  return a1;
}

{
  void *__p[2];
  uint64_t v6;
  void *v7[2];
  uint64_t v8;

  *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v6 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  support::log::client::client(a1, (uint64_t)v7, (uint64_t)__p, 0);
  if (SHIBYTE(v6) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v8) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(v7[0]);
  return a1;
}

void sub_1C5B9E7EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_1C5B9E8D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t support::log::client::get_manager(support::log::client *this)
{
  return *((void *)this + 9);
}

uint64_t support::log::client::get_descriptor(support::log::client *this)
{
  return (uint64_t)this + 8;
}

void support::log::stdout_delegate::~stdout_delegate(support::log::stdout_delegate *this)
{
  *(void *)this = &unk_1F21113B8;
  if (*((unsigned char *)this + 24))
  {
    uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
    if (v1) {
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F21113B8;
  if (*((unsigned char *)this + 24))
  {
    uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  operator delete(this);
}

BOOL support::log::manager::should_log(uint64_t a1, unsigned int a2, os_log_t oslog)
{
  return *(unsigned __int8 *)(a1 + 112) >= a2 || os_log_type_enabled(oslog, support::log::sOSLogLevel[a2]);
}

uint64_t ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t ctu::PthreadMutexGuardPolicy<support::log::buffer>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t ctu::PthreadMutexGuardPolicy<support::log::manager_global>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void support::log::manager_global::~manager_global(support::log::manager_global *this)
{
  *(void *)this = &unk_1F2111400;
  if (*((void *)this + 17))
  {
    uint64_t v2 = (char *)this + 120;
    uint64_t v3 = *((void *)this + 15);
    int v4 = (char *)*((void *)this + 16);
    uint64_t v5 = *(void *)v4;
    *(void *)(v5 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v5;
    *((void *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        uint64_t v7 = (char *)*((void *)v4 + 1);
        uint64_t v6 = *((void *)v4 + 2);
        *((void *)v4 + 2) = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
        operator delete(v4);
        int v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t vars8;

  *(void *)this = &unk_1F2111400;
  if (*((void *)this + 17))
  {
    uint64_t v2 = (char *)this + 120;
    uint64_t v3 = *((void *)this + 15);
    int v4 = (char *)*((void *)this + 16);
    uint64_t v5 = *(void *)v4;
    *(void *)(v5 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v5;
    *((void *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        uint64_t v7 = (char *)*((void *)v4 + 1);
        uint64_t v6 = *((void *)v4 + 2);
        *((void *)v4 + 2) = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
        operator delete(v4);
        int v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));

  operator delete(this);
}

void support::log::client::~client(support::log::client *this)
{
  *(void *)this = &unk_1F21114B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void support::log::client::~client(std::__shared_weak_count **this)
{
  uint64_t v1 = (support::log::client *)this;
  *this = (std::__shared_weak_count *)&unk_1F21114B0;
  uint64_t v2 = this[8];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    this = (std::__shared_weak_count **)v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  operator delete(this);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(void *a1)
{
  uint64_t v1 = a1;
  int v2 = *((char *)a1 + 23);
  if (v2 >= 0) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = (uint64_t *)*a1;
  }
  if (v2 >= 0) {
    unint64_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    unint64_t v4 = a1[1];
  }
  unint64_t v5 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v24, v3, v4);
  unint64_t v6 = qword_1EBBDCE70;
  if (!qword_1EBBDCE70) {
    return 0;
  }
  unint64_t v7 = v5;
  uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EBBDCE70);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v9 = v5;
    if (v5 >= qword_1EBBDCE70) {
      unint64_t v9 = v5 % qword_1EBBDCE70;
    }
  }
  else
  {
    unint64_t v9 = (qword_1EBBDCE70 - 1) & v5;
  }
  uint64_t v11 = *(uint64_t ***)(qword_1EBBDCE68 + 8 * v9);
  if (v11)
  {
    char v12 = *v11;
    if (*v11)
    {
      char v13 = v1[23];
      if (v13 >= 0) {
        uint64_t v14 = v1[23];
      }
      else {
        uint64_t v14 = *((void *)v1 + 1);
      }
      if (v13 < 0) {
        uint64_t v1 = *(unsigned char **)v1;
      }
      if (v8.u32[0] < 2uLL)
      {
        uint64_t v15 = qword_1EBBDCE70 - 1;
        while (1)
        {
          uint64_t v20 = v12[1];
          if (v20 == v7)
          {
            uint64_t v21 = *((unsigned __int8 *)v12 + 39);
            if ((v21 & 0x80u) == 0) {
              uint64_t v22 = *((unsigned __int8 *)v12 + 39);
            }
            else {
              uint64_t v22 = v12[3];
            }
            if (v22 == v14)
            {
              if ((v21 & 0x80) != 0)
              {
                if (!memcmp((const void *)v12[2], v1, v12[3])) {
                  return v12;
                }
              }
              else
              {
                if (!*((unsigned char *)v12 + 39)) {
                  return v12;
                }
                uint64_t v23 = 0;
                while (*((unsigned __int8 *)v12 + v23 + 16) == v1[v23])
                {
                  if (v21 == ++v23) {
                    return v12;
                  }
                }
              }
            }
          }
          else if ((v20 & v15) != v9)
          {
            return 0;
          }
          double result = 0;
          char v12 = (uint64_t *)*v12;
          if (!v12) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v16 = v12[1];
        if (v16 == v7)
        {
          uint64_t v17 = *((unsigned __int8 *)v12 + 39);
          if ((v17 & 0x80u) == 0) {
            uint64_t v18 = *((unsigned __int8 *)v12 + 39);
          }
          else {
            uint64_t v18 = v12[3];
          }
          if (v18 == v14)
          {
            if ((v17 & 0x80) != 0)
            {
              if (!memcmp((const void *)v12[2], v1, v12[3])) {
                return v12;
              }
            }
            else
            {
              if (!*((unsigned char *)v12 + 39)) {
                return v12;
              }
              uint64_t v19 = 0;
              while (*((unsigned __int8 *)v12 + v19 + 16) == v1[v19])
              {
                if (v17 == ++v19) {
                  return v12;
                }
              }
            }
          }
        }
        else
        {
          if (v16 >= v6) {
            v16 %= v6;
          }
          if (v16 != v9) {
            return 0;
          }
        }
        double result = 0;
        char v12 = (uint64_t *)*v12;
        if (!v12) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(void *)(v2 + 40);
      *(void *)(v2 + 40) = 0;
      if (v3) {
        (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      }
      if (*(char *)(v2 + 39) < 0) {
        operator delete(*(void **)(v2 + 16));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

void support::log::global_client_descriptor::~global_client_descriptor(void **this)
{
  *this = &unk_1F2111590;
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    if ((*((char *)this + 31) & 0x80000000) == 0) {
      return;
    }
LABEL_5:
    operator delete(this[1]);
    return;
  }
  operator delete(this[4]);
  if (*((char *)this + 31) < 0) {
    goto LABEL_5;
  }
}

{
  support::log::global_client_descriptor *v2;
  uint64_t vars8;

  *this = &unk_1F2111590;
  if (*((char *)this + 55) < 0)
  {
    operator delete(this[4]);
    if ((*((char *)this + 31) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = (support::log::global_client_descriptor *)this;
      goto LABEL_5;
    }
  }
  else if ((*((char *)this + 31) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[1]);
  uint64_t v2 = (support::log::global_client_descriptor *)this;

LABEL_5:
  operator delete(v2);
}

void std::__shared_ptr_pointer<support::log::delegate::context *,std::shared_ptr<support::log::delegate::context>::__shared_ptr_default_delete<support::log::delegate::context,support::log::delegate::context>,std::allocator<support::log::delegate::context>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<support::log::delegate::context *,std::shared_ptr<support::log::delegate::context>::__shared_ptr_default_delete<support::log::delegate::context,support::log::delegate::context>,std::allocator<support::log::delegate::context>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<support::log::delegate::context *,std::shared_ptr<support::log::delegate::context>::__shared_ptr_default_delete<support::log::delegate::context,support::log::delegate::context>,std::allocator<support::log::delegate::context>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C5BCE0E1) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C5BCE0E1 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C5BCE0E1)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C5BCE0E1 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::__shared_ptr_emplace<support::log::buffer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2111610;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<support::log::buffer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2111610;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<support::log::buffer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void support::log::buffer::~buffer(support::log::buffer *this)
{
  *(void *)this = &unk_1F2111660;
  uint64_t v2 = (char *)*((void *)this + 9);
  uint64_t v3 = (char *)this + 80;
  if (v2 != (char *)this + 80)
  {
    do
    {
      free(*((void **)v2 + 4));
      unint64_t v4 = (char *)*((void *)v2 + 1);
      if (v4)
      {
        do
        {
          unint64_t v5 = v4;
          unint64_t v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          unint64_t v5 = (char *)*((void *)v2 + 2);
          BOOL v6 = *(void *)v5 == (void)v2;
          uint64_t v2 = v5;
        }
        while (!v6);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  std::deque<std::tuple<unsigned int,BOOL>>::~deque[abi:ne180100]((uint64_t)this + 96);
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(*((void **)this + 10));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  BOOL v6;
  uint64_t vars8;

  *(void *)this = &unk_1F2111660;
  uint64_t v2 = (char *)*((void *)this + 9);
  uint64_t v3 = (char *)this + 80;
  if (v2 != (char *)this + 80)
  {
    do
    {
      free(*((void **)v2 + 4));
      unint64_t v4 = (char *)*((void *)v2 + 1);
      if (v4)
      {
        do
        {
          unint64_t v5 = v4;
          unint64_t v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          unint64_t v5 = (char *)*((void *)v2 + 2);
          BOOL v6 = *(void *)v5 == (void)v2;
          uint64_t v2 = v5;
        }
        while (!v6);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  std::deque<std::tuple<unsigned int,BOOL>>::~deque[abi:ne180100]((uint64_t)this + 96);
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(*((void **)this + 10));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));

  operator delete(this);
}

void std::__shared_ptr_pointer<support::log::manager *,std::shared_ptr<support::log::manager>::__shared_ptr_default_delete<support::log::manager,support::log::manager>,std::allocator<support::log::manager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<support::log::manager *,std::shared_ptr<support::log::manager>::__shared_ptr_default_delete<support::log::manager,support::log::manager>,std::allocator<support::log::manager>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<support::log::manager *,std::shared_ptr<support::log::manager>::__shared_ptr_default_delete<support::log::manager,support::log::manager>,std::allocator<support::log::manager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C5BCE26DLL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C5BCE26DLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C5BCE26DLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C5BCE26DLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::__shared_ptr_emplace<support::log::manager_global>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F21116F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<support::log::manager_global>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F21116F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<support::log::manager_global>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t __cxx_global_var_init_21()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::shared_stdio,support::log::shared_stdio,ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

uint64_t awd::metrics::protobuf_ShutdownFile_CCMetricsABMPower_2eproto(awd::metrics *this)
{
  if (awd::metrics::CommCenterPowerVotingRecord::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)awd::metrics::CommCenterPowerVotingRecord::default_instance_ + 8))(awd::metrics::CommCenterPowerVotingRecord::default_instance_);
  }
  if (awd::metrics::CommCenterPowerTransitionSuccess::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)awd::metrics::CommCenterPowerTransitionSuccess::default_instance_ + 8))(awd::metrics::CommCenterPowerTransitionSuccess::default_instance_);
  }
  if (awd::metrics::CommCenterPowerTransitionFailure::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)awd::metrics::CommCenterPowerTransitionFailure::default_instance_ + 8))(awd::metrics::CommCenterPowerTransitionFailure::default_instance_);
  }
  if (awd::metrics::CommCenterMissedMTMessage::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)awd::metrics::CommCenterMissedMTMessage::default_instance_ + 8))(awd::metrics::CommCenterMissedMTMessage::default_instance_);
  }
  if (awd::metrics::CommCenterLowPowerEvent::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)awd::metrics::CommCenterLowPowerEvent::default_instance_ + 8))(awd::metrics::CommCenterLowPowerEvent::default_instance_);
  }
  if (awd::metrics::CommCenterWakeInfo::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)awd::metrics::CommCenterWakeInfo::default_instance_ + 8))(awd::metrics::CommCenterWakeInfo::default_instance_);
  }
  if (awd::metrics::CommCenterLowPowerStats::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)awd::metrics::CommCenterLowPowerStats::default_instance_ + 8))(awd::metrics::CommCenterLowPowerStats::default_instance_);
  }
  uint64_t result = awd::metrics::CommCenterWakeReasonInfo::default_instance_;
  if (awd::metrics::CommCenterWakeReasonInfo::default_instance_)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)awd::metrics::CommCenterWakeReasonInfo::default_instance_ + 8);
    return v2();
  }
  return result;
}

void awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(awd::metrics *this, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(void)::already_here & 1) == 0)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(void)::already_here = 1;
    wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Server/AWD/Generated/CCMetricsABMPower.pb.cc", a4);
    unint64_t v4 = operator new(0x18uLL);
    v4[1] = 0;
    uint64_t v4[2] = 0;
    void *v4 = &unk_1F2111748;
    awd::metrics::CommCenterPowerVotingRecord::default_instance_ = (uint64_t)v4;
    unint64_t v5 = operator new(0x38uLL);
    void v5[5] = 0;
    v5[6] = 0;
    *unint64_t v5 = &unk_1F21117C0;
    v5[1] = 0;
    void v5[2] = 0;
    v5[3] = 0;
    *((_DWORD *)v5 + 8) = 0;
    awd::metrics::CommCenterPowerTransitionSuccess::default_instance_ = (uint64_t)v5;
    BOOL v6 = operator new(0x38uLL);
    void v6[5] = 0;
    v6[6] = 0;
    void *v6 = &unk_1F2111838;
    v6[1] = 0;
    void v6[2] = 0;
    void v6[3] = 0;
    *((_DWORD *)v6 + 8) = 0;
    awd::metrics::CommCenterPowerTransitionFailure::default_instance_ = (uint64_t)v6;
    unint64_t v7 = operator new(0x20uLL);
    void *v7 = &unk_1F21118B0;
    v7[1] = 0;
    v7[2] = 0;
    v7[3] = 0;
    awd::metrics::CommCenterMissedMTMessage::default_instance_ = (uint64_t)v7;
    uint8x8_t v8 = operator new(0x28uLL);
    void *v8 = &unk_1F2111928;
    v8[1] = 0;
    uint64_t v9 = MEMORY[0x1E4FBA920];
    uint64_t v8[2] = 0;
    v8[3] = v9;
    unsigned int v8[4] = 0;
    awd::metrics::CommCenterLowPowerEvent::default_instance_ = (uint64_t)v8;
    uint64_t v10 = operator new(0x28uLL);
    void *v10 = &unk_1F21119A0;
    v10[1] = 0;
    _DWORD v10[2] = 0;
    void v10[3] = 0;
    *((_DWORD *)v10 + 8) = 0;
    awd::metrics::CommCenterWakeInfo::default_instance_ = (uint64_t)v10;
    uint64_t v11 = (char *)operator new(0x50uLL);
    *(void *)uint64_t v11 = &unk_1F2111A18;
    *((void *)v11 + 8) = 0;
    *((_DWORD *)v11 + 18) = 0;
    *(_OWORD *)(v11 + 8) = 0u;
    *(_OWORD *)(v11 + 24) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    *((_DWORD *)v11 + 14) = 0;
    awd::metrics::CommCenterLowPowerStats::default_instance_ = (uint64_t)v11;
    char v12 = operator new(0x68uLL);
    *char v12 = &unk_1F2111A90;
    v12[1] = 0;
    *((_WORD *)v12 + 26) = 0;
    v12[2] = v9;
    v12[3] = v9;
    *((_DWORD *)v12 + 12) = 0;
    v12[4] = v9;
    void v12[5] = v9;
    v12[7] = v9;
    v12[8] = v9;
    v12[9] = v9;
    void v12[10] = 0;
    v12[11] = 0;
    *((_DWORD *)v12 + 24) = 0;
    awd::metrics::CommCenterWakeReasonInfo::default_instance_ = (uint64_t)v12;
    MEMORY[0x1F4181D28](awd::metrics::protobuf_ShutdownFile_CCMetricsABMPower_2eproto);
  }
}

void *awd::metrics::CommCenterPowerVotingRecord::CommCenterPowerVotingRecord(void *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F2111748;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F2111748;
  return this;
}

uint64_t awd::metrics::CommCenterPowerTransitionSuccess::CommCenterPowerTransitionSuccess(uint64_t this)
{
  *(void *)(this + 40) = 0;
  *(void *)(this + 48) = 0;
  *(void *)this = &unk_1F21117C0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)(this + 40) = 0;
  *(void *)(this + 48) = 0;
  *(void *)this = &unk_1F21117C0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterPowerTransitionFailure::CommCenterPowerTransitionFailure(uint64_t this)
{
  *(void *)(this + 40) = 0;
  *(void *)(this + 48) = 0;
  *(void *)this = &unk_1F2111838;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)(this + 40) = 0;
  *(void *)(this + 48) = 0;
  *(void *)this = &unk_1F2111838;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void *awd::metrics::CommCenterMissedMTMessage::CommCenterMissedMTMessage(void *this)
{
  *this = &unk_1F21118B0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &unk_1F21118B0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void *awd::metrics::CommCenterLowPowerEvent::CommCenterLowPowerEvent(void *this)
{
  uint64_t v1 = MEMORY[0x1E4FBA920];
  *this = &unk_1F2111928;
  this[1] = 0;
  this[2] = 0;
  this[3] = v1;
  this[4] = 0;
  return this;
}

{
  uint64_t v1;

  uint64_t v1 = MEMORY[0x1E4FBA920];
  *this = &unk_1F2111928;
  this[1] = 0;
  this[2] = 0;
  this[3] = v1;
  this[4] = 0;
  return this;
}

uint64_t awd::metrics::CommCenterWakeInfo::CommCenterWakeInfo(uint64_t this)
{
  *(void *)this = &unk_1F21119A0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = &unk_1F21119A0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

double awd::metrics::CommCenterLowPowerStats::CommCenterLowPowerStats(awd::metrics::CommCenterLowPowerStats *this)
{
  *(void *)this = &unk_1F2111A18;
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F2111A18;
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  return result;
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::CommCenterWakeReasonInfo(uint64_t this)
{
  *(void *)this = &unk_1F2111A90;
  *(void *)(this + 8) = 0;
  uint64_t v1 = MEMORY[0x1E4FBA920];
  *(_WORD *)(this + 52) = 0;
  *(void *)(this + 16) = v1;
  *(void *)(this + 24) = v1;
  *(_DWORD *)(this + 48) = 0;
  *(void *)(this + 32) = v1;
  *(void *)(this + 40) = v1;
  *(void *)(this + 56) = v1;
  *(void *)(this + 64) = v1;
  *(void *)(this + 72) = v1;
  *(void *)(this + 80) = 0;
  *(void *)(this + 88) = 0;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

{
  uint64_t v1;

  *(void *)this = &unk_1F2111A90;
  *(void *)(this + 8) = 0;
  uint64_t v1 = MEMORY[0x1E4FBA920];
  *(_WORD *)(this + 52) = 0;
  *(void *)(this + 16) = v1;
  *(void *)(this + 24) = v1;
  *(_DWORD *)(this + 48) = 0;
  *(void *)(this + 32) = v1;
  *(void *)(this + 40) = v1;
  *(void *)(this + 56) = v1;
  *(void *)(this + 64) = v1;
  *(void *)(this + 72) = v1;
  *(void *)(this + 80) = 0;
  *(void *)(this + 88) = 0;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

BOOL awd::metrics::CommCenterMissedMTType_IsValid(awd::metrics *this)
{
  return this < 3;
}

BOOL awd::metrics::CommCenterSleepType_IsValid(awd::metrics *this)
{
  return this < 2;
}

BOOL awd::metrics::CommCenterLowPowerEventType_IsValid(awd::metrics *this)
{
  return this < 3;
}

uint64_t awd::metrics::CommCenterPowerVotingRecord::SharedCtor(uint64_t this)
{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  return this;
}

awd::metrics::CommCenterPowerVotingRecord *awd::metrics::CommCenterPowerVotingRecord::CommCenterPowerVotingRecord(awd::metrics::CommCenterPowerVotingRecord *this, const awd::metrics::CommCenterPowerVotingRecord *a2)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1F2111748;
  awd::metrics::CommCenterPowerVotingRecord::MergeFrom(this, a2);
  return this;
}

{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1F2111748;
  awd::metrics::CommCenterPowerVotingRecord::MergeFrom(this, a2);
  return this;
}

void sub_1C5B9FF9C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterPowerVotingRecord::MergeFrom(awd::metrics::CommCenterPowerVotingRecord *this, const awd::metrics::CommCenterPowerVotingRecord *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  LOBYTE(v4) = *((unsigned char *)a2 + 20);
  if ((_BYTE)v4)
  {
    if (*((unsigned char *)a2 + 20))
    {
      int v5 = *((_DWORD *)a2 + 2);
      *((_DWORD *)this + 5) |= 1u;
      *((_DWORD *)this + 2) = v5;
      int v4 = *((_DWORD *)a2 + 5);
    }
    if ((v4 & 2) != 0)
    {
      int v6 = *((_DWORD *)a2 + 3);
      *((_DWORD *)this + 5) |= 2u;
      *((_DWORD *)this + 3) = v6;
    }
  }
}

void sub_1C5BA005C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C5BA0070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C5BA00CC(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterPowerVotingRecord::~CommCenterPowerVotingRecord(awd::metrics::CommCenterPowerVotingRecord *this)
{
  *(void *)this = &unk_1F2111748;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(void *)this = &unk_1F2111748;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  void *v1;
  uint64_t vars8;

  *(void *)this = &unk_1F2111748;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);

  operator delete(v1);
}

uint64_t awd::metrics::CommCenterPowerVotingRecord::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 16) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterPowerVotingRecord::default_instance(awd::metrics::CommCenterPowerVotingRecord *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = awd::metrics::CommCenterPowerVotingRecord::default_instance_;
  if (!awd::metrics::CommCenterPowerVotingRecord::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterPowerVotingRecord::default_instance_;
  }
  return result;
}

void *awd::metrics::CommCenterPowerVotingRecord::New(awd::metrics::CommCenterPowerVotingRecord *this)
{
  uint64_t result = operator new(0x18uLL);
  result[1] = 0;
  result[2] = 0;
  *uint64_t result = &unk_1F2111748;
  return result;
}

uint64_t awd::metrics::CommCenterPowerVotingRecord::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 20)) {
    *(void *)(this + 8) = 0;
  }
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterPowerVotingRecord::MergePartialFromCodedStream(awd::metrics::CommCenterPowerVotingRecord *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  int v4 = (unsigned int *)((char *)this + 8);
  int v5 = (unsigned int *)((char *)this + 12);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        int v6 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v6 >= *((void *)a2 + 2) || *v6 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v6;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((void *)a2 + 1) = v6 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        uint64_t v11 = (char *)*((void *)a2 + 1);
        unint64_t v9 = *((void *)a2 + 2);
        if ((unint64_t)v11 >= v9 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!result) {
            return result;
          }
          char v12 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v9 = *((void *)a2 + 2);
          *((_DWORD *)this + 5) |= 1u;
          if ((unint64_t)v12 < v9) {
            goto LABEL_23;
          }
        }
        else
        {
          unsigned int *v4 = *v11;
          char v12 = v11 + 1;
          *((void *)a2 + 1) = v12;
          *((_DWORD *)this + 5) |= 1u;
          if ((unint64_t)v12 < v9)
          {
LABEL_23:
            if (*v12 == 16)
            {
              uint64_t v10 = v12 + 1;
              *((void *)a2 + 1) = v10;
              if ((unint64_t)v10 < v9) {
                goto LABEL_25;
              }
LABEL_28:
              uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
              if (!result) {
                return result;
              }
              uint64_t v15 = *((void *)a2 + 1);
              uint64_t v14 = *((void *)a2 + 2);
              *((_DWORD *)this + 5) |= 2u;
              if (v15 == v14) {
                goto LABEL_30;
              }
            }
          }
        }
      }
      if (TagFallback >> 3 != 2) {
        break;
      }
      int v8 = TagFallback & 7;
      if ((TagFallback & 7) != 0) {
        goto LABEL_18;
      }
      uint64_t v10 = (unsigned __int8 *)*((void *)a2 + 1);
      unint64_t v9 = *((void *)a2 + 2);
      if ((unint64_t)v10 >= v9) {
        goto LABEL_28;
      }
LABEL_25:
      if ((char)*v10 < 0) {
        goto LABEL_28;
      }
      *int v5 = *v10;
      char v13 = (char *)(v10 + 1);
      *((void *)a2 + 1) = v13;
      *((_DWORD *)this + 5) |= 2u;
      if (v13 == (char *)v9)
      {
LABEL_30:
        if (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10))
        {
          *((_DWORD *)a2 + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)a2 + 36) = 1;
          return result;
        }
      }
    }
    int v8 = TagFallback & 7;
LABEL_18:
    if (v8 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
  }
    }
}

uint64_t awd::metrics::CommCenterPowerVotingRecord::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 20);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 20);
  }
  if ((v6 & 2) != 0)
  {
    uint64_t v7 = *(unsigned int *)(v5 + 12);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, (uint64_t)a2, a4);
  }
  return this;
}

uint64_t awd::metrics::CommCenterPowerVotingRecord::ByteSize(awd::metrics::CommCenterPowerVotingRecord *this)
{
  char v2 = *((unsigned char *)this + 20);
  if (!v2)
  {
    uint64_t v3 = 0;
    goto LABEL_6;
  }
  if ((*((unsigned char *)this + 20) & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_11;
    }
LABEL_6:
    *((_DWORD *)this + 4) = v3;
    return v3;
  }
  uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
  if (v5 < 0x80)
  {
    uint64_t v3 = 2;
    if ((v2 & 2) != 0) {
      goto LABEL_11;
    }
    goto LABEL_6;
  }
  uint64_t v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
  if ((*((_DWORD *)this + 5) & 2) == 0) {
    goto LABEL_6;
  }
LABEL_11:
  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
  if (v6 >= 0x80) {
    uint64_t v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6)
  }
       + 1
       + v3;
  else {
    uint64_t v7 = (v3 + 2);
  }
  *((_DWORD *)this + 4) = v7;
  return v7;
}

void awd::metrics::CommCenterPowerVotingRecord::CopyFrom(awd::metrics::CommCenterPowerVotingRecord *this, const awd::metrics::CommCenterPowerVotingRecord *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterPowerVotingRecord *))(*(void *)this + 32))(this);
    awd::metrics::CommCenterPowerVotingRecord::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterPowerVotingRecord::IsInitialized(awd::metrics::CommCenterPowerVotingRecord *this)
{
  return 1;
}

awd::metrics::CommCenterPowerVotingRecord *awd::metrics::CommCenterPowerVotingRecord::Swap(awd::metrics::CommCenterPowerVotingRecord *this, awd::metrics::CommCenterPowerVotingRecord *a2)
{
  if (a2 != this)
  {
    int v2 = *((_DWORD *)this + 2);
    *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v2;
    int v3 = *((_DWORD *)this + 3);
    *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = v3;
    int v4 = *((_DWORD *)this + 5);
    *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v4;
    int v5 = *((_DWORD *)this + 4);
    *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v5;
  }
  return this;
}

char *awd::metrics::CommCenterPowerVotingRecord::GetTypeName@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1C5BCE320;
  strcpy(result, "awd.metrics.CommCenterPowerVotingRecord");
  return result;
}

void *awd::metrics::CommCenterPowerTransitionSuccess::SharedCtor(void *this)
{
  this[1] = 0;
  this[5] = 0;
  this[6] = 0;
  return this;
}

awd::metrics::CommCenterPowerTransitionSuccess *awd::metrics::CommCenterPowerTransitionSuccess::CommCenterPowerTransitionSuccess(awd::metrics::CommCenterPowerTransitionSuccess *this, const awd::metrics::CommCenterPowerTransitionSuccess *a2)
{
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *(void *)this = &unk_1F21117C0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  awd::metrics::CommCenterPowerTransitionSuccess::MergeFrom(this, a2);
  return this;
}

{
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *(void *)this = &unk_1F21117C0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  awd::metrics::CommCenterPowerTransitionSuccess::MergeFrom(this, a2);
  return this;
}

void sub_1C5BA06A4(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::RepeatedPtrField<awd::metrics::CrashReasonType>::~RepeatedPtrField((uint64_t)v1 + 16);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterPowerTransitionSuccess::MergeFrom(awd::metrics::CommCenterPowerTransitionSuccess *this, const awd::metrics::CommCenterPowerTransitionSuccess *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v16);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::metrics::CommCenterPowerTransitionSuccess *)((char *)this + 16));
  if (*((int *)a2 + 6) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      while (1)
      {
        int v8 = *(const awd::metrics::CommCenterPowerVotingRecord **)(*((void *)a2 + 2) + 8 * v4);
        int v9 = *((_DWORD *)this + 7);
        uint64_t v10 = *((int *)this + 6);
        if ((int)v10 >= v9) {
          break;
        }
        uint64_t v11 = *((void *)this + 2);
        *((_DWORD *)this + 6) = v10 + 1;
        awd::metrics::CommCenterPowerVotingRecord::MergeFrom(*(awd::metrics::CommCenterPowerVotingRecord **)(v11 + 8 * v10), v8);
        if (++v4 >= *((int *)a2 + 6)) {
          goto LABEL_11;
        }
      }
      if (v9 == *((_DWORD *)this + 8))
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::metrics::CommCenterPowerTransitionSuccess *)((char *)this + 16));
        int v9 = *((_DWORD *)this + 7);
      }
      *((_DWORD *)this + 7) = v9 + 1;
      int v5 = (awd::metrics::CommCenterPowerVotingRecord *)operator new(0x18uLL);
      *((void *)v5 + 1) = 0;
      *((void *)v5 + 2) = 0;
      *(void *)int v5 = &unk_1F2111748;
      uint64_t v6 = *((void *)this + 2);
      uint64_t v7 = *((int *)this + 6);
      *((_DWORD *)this + 6) = v7 + 1;
      *(void *)(v6 + 8 * v7) = v5;
      awd::metrics::CommCenterPowerVotingRecord::MergeFrom(v5, v8);
      ++v4;
    }
    while (v4 < *((int *)a2 + 6));
  }
LABEL_11:
  LOBYTE(v12) = *((unsigned char *)a2 + 52);
  if ((_BYTE)v12)
  {
    if (*((unsigned char *)a2 + 52))
    {
      int v14 = *((_DWORD *)a2 + 2);
      *((_DWORD *)this + 13) |= 1u;
      *((_DWORD *)this + 2) = v14;
      int v12 = *((_DWORD *)a2 + 13);
      if ((v12 & 2) == 0)
      {
LABEL_14:
        if ((v12 & 8) == 0) {
          return;
        }
        goto LABEL_15;
      }
    }
    else if ((*((unsigned char *)a2 + 52) & 2) == 0)
    {
      goto LABEL_14;
    }
    int v15 = *((_DWORD *)a2 + 3);
    *((_DWORD *)this + 13) |= 2u;
    *((_DWORD *)this + 3) = v15;
    if ((*((_DWORD *)a2 + 13) & 8) == 0) {
      return;
    }
LABEL_15:
    uint64_t v13 = *((void *)a2 + 5);
    *((_DWORD *)this + 13) |= 8u;
    *((void *)this + 5) = v13;
  }
}

void sub_1C5BA0890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C5BA08A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C5BA0910(_Unwind_Exception *a1)
{
  int v3 = *(_DWORD *)(v1 + 28);
  if (v3 >= 1)
  {
    for (uint64_t i = 0; i < v3; ++i)
    {
      uint64_t v5 = *(void *)(*(void *)(v1 + 16) + 8 * i);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        int v3 = *(_DWORD *)(v1 + 28);
      }
    }
  }
  uint64_t v6 = *(void **)(v1 + 16);
  if (v6) {
    operator delete[](v6);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterPowerTransitionSuccess::~CommCenterPowerTransitionSuccess(awd::metrics::CommCenterPowerTransitionSuccess *this)
{
  *(void *)this = &unk_1F21117C0;
  int v2 = *((_DWORD *)this + 7);
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(*((void *)this + 2) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        int v2 = *((_DWORD *)this + 7);
      }
    }
  }
  uint64_t v5 = (void *)*((void *)this + 2);
  if (v5) {
    operator delete[](v5);
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;
  uint64_t vars8;

  *(void *)this = &unk_1F21117C0;
  int v2 = *((_DWORD *)this + 7);
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(*((void *)this + 2) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        int v2 = *((_DWORD *)this + 7);
      }
    }
  }
  uint64_t v5 = (void *)*((void *)this + 2);
  if (v5) {
    operator delete[](v5);
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t vars8;

  *(void *)this = &unk_1F21117C0;
  int v2 = *((_DWORD *)this + 7);
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(*((void *)this + 2) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        int v2 = *((_DWORD *)this + 7);
      }
    }
  }
  uint64_t v5 = (void *)*((void *)this + 2);
  if (v5) {
    operator delete[](v5);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);

  operator delete(v6);
}

uint64_t awd::metrics::CommCenterPowerTransitionSuccess::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterPowerTransitionSuccess::default_instance(awd::metrics::CommCenterPowerTransitionSuccess *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = awd::metrics::CommCenterPowerTransitionSuccess::default_instance_;
  if (!awd::metrics::CommCenterPowerTransitionSuccess::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterPowerTransitionSuccess::default_instance_;
  }
  return result;
}

void *awd::metrics::CommCenterPowerTransitionSuccess::New(awd::metrics::CommCenterPowerTransitionSuccess *this)
{
  uint64_t result = operator new(0x38uLL);
  result[5] = 0;
  result[6] = 0;
  *uint64_t result = &unk_1F21117C0;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  *((_DWORD *)result + 8) = 0;
  return result;
}

uint64_t awd::metrics::CommCenterPowerTransitionSuccess::Clear(uint64_t this)
{
  uint64_t v1 = this;
  if (*(unsigned char *)(this + 52))
  {
    *(void *)(this + 8) = 0;
    *(void *)(this + 40) = 0;
  }
  if (*(int *)(this + 24) >= 1)
  {
    uint64_t v2 = 0;
    do
    {
      uint64_t v3 = *(void *)(*(void *)(v1 + 16) + 8 * v2);
      this = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 24));
  }
  *(_DWORD *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 52) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterPowerTransitionSuccess::MergePartialFromCodedStream(awd::metrics::CommCenterPowerTransitionSuccess *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4 = (unsigned int *)((char *)this + 8);
  uint64_t v5 = (unsigned int *)((char *)this + 12);
  uint64_t v6 = (awd::metrics::CommCenterPowerTransitionSuccess *)((char *)this + 16);
  uint64_t v7 = (unint64_t *)((char *)this + 40);
  while (1)
  {
LABEL_2:
    int v8 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v8 >= *((void *)a2 + 2) || *v8 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v8;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v8 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_21;
        }
        int v12 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!result) {
            return result;
          }
          uint64_t v13 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v11 = *((void *)a2 + 2);
          *((_DWORD *)this + 13) |= 1u;
          if ((unint64_t)v13 >= v11) {
            continue;
          }
        }
        else
        {
          unsigned int *v4 = *v12;
          uint64_t v13 = v12 + 1;
          *((void *)a2 + 1) = v13;
          *((_DWORD *)this + 13) |= 1u;
          if ((unint64_t)v13 >= v11) {
            continue;
          }
        }
        if (*v13 != 16) {
          continue;
        }
        int v14 = v13 + 1;
        *((void *)a2 + 1) = v14;
        if ((unint64_t)v14 >= v11) {
          goto LABEL_33;
        }
        goto LABEL_30;
      case 2u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_21;
        }
        int v14 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v14 >= v11) {
          goto LABEL_33;
        }
LABEL_30:
        if (*v14 < 0)
        {
LABEL_33:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!result) {
            return result;
          }
          uint64_t v22 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v23 = *((void *)a2 + 2);
          *((_DWORD *)this + 13) |= 2u;
          if ((unint64_t)v22 >= v23) {
            continue;
          }
        }
        else
        {
          *uint64_t v5 = *v14;
          uint64_t v22 = v14 + 1;
          *((void *)a2 + 1) = v22;
          *((_DWORD *)this + 13) |= 2u;
          if ((unint64_t)v22 >= v11) {
            continue;
          }
        }
        if (*v22 != 26) {
          continue;
        }
        break;
      case 3u:
        int v10 = TagFallback & 7;
        if (v10 != 2) {
          goto LABEL_21;
        }
        int v15 = *((_DWORD *)this + 7);
        uint64_t v16 = *((int *)this + 6);
        if ((int)v16 < v15) {
          goto LABEL_19;
        }
        goto LABEL_37;
      case 4u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_21;
        }
        uint64_t v20 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v19 = *((void *)a2 + 2);
        if ((unint64_t)v20 >= v19) {
          goto LABEL_56;
        }
        goto LABEL_53;
      default:
        int v10 = TagFallback & 7;
LABEL_21:
        if (v10 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
        continue;
        }
    }
    do
    {
      *((void *)a2 + 1) = v22 + 1;
      int v15 = *((_DWORD *)this + 7);
      uint64_t v16 = *((int *)this + 6);
      if ((int)v16 < v15)
      {
LABEL_19:
        uint64_t v17 = *((void *)this + 2);
        *((_DWORD *)this + 6) = v16 + 1;
        uint64_t v18 = *(awd::metrics::CommCenterPowerVotingRecord **)(v17 + 8 * v16);
      }
      else
      {
LABEL_37:
        if (v15 == *((_DWORD *)this + 8))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6);
          int v15 = *((_DWORD *)this + 7);
        }
        *((_DWORD *)this + 7) = v15 + 1;
        uint64_t v18 = (awd::metrics::CommCenterPowerVotingRecord *)operator new(0x18uLL);
        *((void *)v18 + 1) = 0;
        *((void *)v18 + 2) = 0;
        *(void *)uint64_t v18 = &unk_1F2111748;
        uint64_t v24 = *((void *)this + 2);
        uint64_t v25 = *((int *)this + 6);
        *((_DWORD *)this + 6) = v25 + 1;
        *(void *)(v24 + 8 * v25) = v18;
      }
      unsigned int v36 = -1431655766;
      uint64_t v26 = (char *)*((void *)a2 + 1);
      if ((unint64_t)v26 >= *((void *)a2 + 2) || *v26 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v36)) {
          return 0;
        }
      }
      else
      {
        unsigned int v36 = *v26;
        *((void *)a2 + 1) = v26 + 1;
      }
      int v27 = *((_DWORD *)a2 + 14);
      int v28 = *((_DWORD *)a2 + 15);
      *((_DWORD *)a2 + 14) = v27 + 1;
      if (v27 >= v28) {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
      if (!awd::metrics::CommCenterPowerVotingRecord::MergePartialFromCodedStream(v18, a2)
        || !*((unsigned char *)a2 + 36))
      {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
      int v29 = *((_DWORD *)a2 + 14);
      BOOL v30 = __OFSUB__(v29, 1);
      int v31 = v29 - 1;
      if (v31 < 0 == v30) {
        *((_DWORD *)a2 + 14) = v31;
      }
      uint64_t v22 = (unsigned char *)*((void *)a2 + 1);
      unint64_t v19 = *((void *)a2 + 2);
      if ((unint64_t)v22 >= v19) {
        goto LABEL_2;
      }
      int v32 = *v22;
    }
    while (v32 == 26);
    if (v32 != 32) {
      continue;
    }
    uint64_t v20 = v22 + 1;
    *((void *)a2 + 1) = v20;
    if ((unint64_t)v20 >= v19) {
      break;
    }
LABEL_53:
    if ((char)*v20 < 0) {
      break;
    }
    unint64_t *v7 = *v20;
    xpc_object_t v33 = (char *)(v20 + 1);
    *((void *)a2 + 1) = v33;
    *((_DWORD *)this + 13) |= 8u;
    if (v33 == (char *)v19) {
      goto LABEL_58;
    }
  }
LABEL_56:
  uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v7);
  if (result)
  {
    uint64_t v35 = *((void *)a2 + 1);
    uint64_t v34 = *((void *)a2 + 2);
    *((_DWORD *)this + 13) |= 8u;
    if (v35 != v34) {
      goto LABEL_2;
    }
LABEL_58:
    if (!*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10)) {
      goto LABEL_2;
    }
    *((_DWORD *)a2 + 8) = 0;
    uint64_t result = 1;
    *((unsigned char *)a2 + 36) = 1;
  }
  return result;
}

uint64_t awd::metrics::CommCenterPowerTransitionSuccess::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 52);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 52) & 2) == 0)
    {
LABEL_3:
      if (*(int *)(v5 + 24) < 1) {
        goto LABEL_9;
      }
      goto LABEL_7;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 12), (uint64_t)a2, a4);
  if (*(int *)(v5 + 24) < 1) {
    goto LABEL_9;
  }
LABEL_7:
  uint64_t v7 = 0;
  do
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(void *)(*(void *)(v5 + 16) + 8 * v7++), a2, a4);
  while (v7 < *(int *)(v5 + 24));
LABEL_9:
  if ((*(unsigned char *)(v5 + 52) & 8) != 0)
  {
    uint64_t v8 = *(void *)(v5 + 40);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v8, (uint64_t)a2, a4);
  }
  return this;
}

uint64_t awd::metrics::CommCenterPowerTransitionSuccess::ByteSize(awd::metrics::CommCenterPowerTransitionSuccess *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 52);
  if (!(_BYTE)v2)
  {
    int v6 = *((_DWORD *)this + 6);
    uint64_t v5 = v6;
    if (v6 < 1) {
      goto LABEL_35;
    }
    goto LABEL_18;
  }
  if ((*((unsigned char *)this + 52) & 1) == 0)
  {
    int v3 = 0;
    if ((*((unsigned char *)this + 52) & 2) == 0) {
      goto LABEL_4;
    }
LABEL_13:
    uint64_t v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
    if (v8 >= 0x80)
    {
      v3 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8) + 1;
      if ((*((_DWORD *)this + 13) & 8) != 0) {
        goto LABEL_17;
      }
    }
    else
    {
      v3 += 2;
      if ((v2 & 8) != 0) {
        goto LABEL_17;
      }
    }
LABEL_5:
    int v4 = *((_DWORD *)this + 6);
    uint64_t v5 = (v4 + v3);
    if (v4 < 1) {
      goto LABEL_35;
    }
    goto LABEL_18;
  }
  uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
  if (v7 >= 0x80)
  {
    int v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7) + 1;
    int v2 = *((_DWORD *)this + 13);
    if ((v2 & 2) != 0) {
      goto LABEL_13;
    }
  }
  else
  {
    int v3 = 2;
    if ((v2 & 2) != 0) {
      goto LABEL_13;
    }
  }
LABEL_4:
  if ((v2 & 8) == 0) {
    goto LABEL_5;
  }
LABEL_17:
  int v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                   + 5));
  int v10 = *((_DWORD *)this + 6);
  uint64_t v5 = (v10 + v3 + v9 + 1);
  if (v10 >= 1)
  {
LABEL_18:
    for (uint64_t i = 0; i < *((int *)this + 6); ++i)
    {
      while (1)
      {
        uint64_t v13 = *(void *)(*((void *)this + 2) + 8 * i);
        if (!*(unsigned char *)(v13 + 20))
        {
          LODWORD(v12) = 0;
          *(_DWORD *)(v13 + 16) = 0;
          goto LABEL_20;
        }
        if (*(unsigned char *)(v13 + 20)) {
          break;
        }
        uint64_t v12 = 0;
        if ((*(unsigned char *)(v13 + 20) & 2) == 0) {
          goto LABEL_24;
        }
LABEL_30:
        int v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(v13 + 12);
        if (v15 < 0x80)
        {
          uint64_t v12 = (v12 + 2);
          *(_DWORD *)(v13 + 16) = v12;
          if (v12 >= 0x80) {
            goto LABEL_34;
          }
          goto LABEL_20;
        }
        uint64_t v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15)
            + 1
            + v12;
        *(_DWORD *)(v13 + 16) = v12;
        if (v12 < 0x80) {
          goto LABEL_20;
        }
LABEL_34:
        uint64_t v5 = v12
           + v5
           + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v12);
        if (++i >= *((int *)this + 6)) {
          goto LABEL_35;
        }
      }
      int v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(v13 + 8);
      if (v14 >= 0x80)
      {
        uint64_t v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14) + 1;
        if ((*(_DWORD *)(v13 + 20) & 2) != 0) {
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v12 = 2;
        if ((*(unsigned char *)(v13 + 20) & 2) != 0) {
          goto LABEL_30;
        }
      }
LABEL_24:
      *(_DWORD *)(v13 + 16) = v12;
      if (v12 >= 0x80) {
        goto LABEL_34;
      }
LABEL_20:
      uint64_t v5 = (v12 + v5 + 1);
    }
  }
LABEL_35:
  *((_DWORD *)this + 12) = v5;
  return v5;
}

void awd::metrics::CommCenterPowerTransitionSuccess::CopyFrom(awd::metrics::CommCenterPowerTransitionSuccess *this, const awd::metrics::CommCenterPowerTransitionSuccess *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterPowerTransitionSuccess *))(*(void *)this + 32))(this);
    awd::metrics::CommCenterPowerTransitionSuccess::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterPowerTransitionSuccess::IsInitialized(awd::metrics::CommCenterPowerTransitionSuccess *this)
{
  return 1;
}

awd::metrics::CommCenterPowerTransitionSuccess *awd::metrics::CommCenterPowerTransitionSuccess::Swap(awd::metrics::CommCenterPowerTransitionSuccess *this, awd::metrics::CommCenterPowerTransitionSuccess *a2)
{
  if (a2 != this)
  {
    int v3 = this;
    int v4 = *((_DWORD *)this + 2);
    *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v4;
    int v5 = *((_DWORD *)this + 3);
    *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = v5;
    this = (awd::metrics::CommCenterPowerTransitionSuccess *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    uint64_t v6 = *((void *)v3 + 5);
    *((void *)v3 + 5) = *((void *)a2 + 5);
    *((void *)a2 + 5) = v6;
    LODWORD(v6) = *((_DWORD *)v3 + 13);
    *((_DWORD *)v3 + 13) = *((_DWORD *)a2 + 13);
    *((_DWORD *)a2 + 13) = v6;
    LODWORD(v6) = *((_DWORD *)v3 + 12);
    *((_DWORD *)v3 + 12) = *((_DWORD *)a2 + 12);
    *((_DWORD *)a2 + 12) = v6;
  }
  return this;
}

double awd::metrics::CommCenterPowerTransitionSuccess::GetTypeName@<D0>(uint64_t a1@<X8>)
{
  int v3 = (char *)operator new(0x30uLL);
  *(void *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_1C5BCE330;
  strcpy(v3, "awd.metrics.CommCenterPowerTransitionSuccess");
  return *(double *)"ransitionSuccess";
}

void *awd::metrics::CommCenterPowerTransitionFailure::SharedCtor(void *this)
{
  this[1] = 0;
  this[5] = 0;
  this[6] = 0;
  return this;
}

awd::metrics::CommCenterPowerTransitionFailure *awd::metrics::CommCenterPowerTransitionFailure::CommCenterPowerTransitionFailure(awd::metrics::CommCenterPowerTransitionFailure *this, const awd::metrics::CommCenterPowerTransitionFailure *a2)
{
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *(void *)this = &unk_1F2111838;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  awd::metrics::CommCenterPowerTransitionFailure::MergeFrom(this, a2);
  return this;
}

{
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *(void *)this = &unk_1F2111838;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  awd::metrics::CommCenterPowerTransitionFailure::MergeFrom(this, a2);
  return this;
}

void sub_1C5BA1558(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::RepeatedPtrField<awd::metrics::CrashReasonType>::~RepeatedPtrField((uint64_t)v1 + 16);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterPowerTransitionFailure::MergeFrom(awd::metrics::CommCenterPowerTransitionFailure *this, const awd::metrics::CommCenterPowerTransitionFailure *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v16);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::metrics::CommCenterPowerTransitionFailure *)((char *)this + 16));
  if (*((int *)a2 + 6) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      while (1)
      {
        uint64_t v8 = *(const awd::metrics::CommCenterPowerVotingRecord **)(*((void *)a2 + 2) + 8 * v4);
        int v9 = *((_DWORD *)this + 7);
        uint64_t v10 = *((int *)this + 6);
        if ((int)v10 >= v9) {
          break;
        }
        uint64_t v11 = *((void *)this + 2);
        *((_DWORD *)this + 6) = v10 + 1;
        awd::metrics::CommCenterPowerVotingRecord::MergeFrom(*(awd::metrics::CommCenterPowerVotingRecord **)(v11 + 8 * v10), v8);
        if (++v4 >= *((int *)a2 + 6)) {
          goto LABEL_11;
        }
      }
      if (v9 == *((_DWORD *)this + 8))
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::metrics::CommCenterPowerTransitionFailure *)((char *)this + 16));
        int v9 = *((_DWORD *)this + 7);
      }
      *((_DWORD *)this + 7) = v9 + 1;
      int v5 = (awd::metrics::CommCenterPowerVotingRecord *)operator new(0x18uLL);
      *((void *)v5 + 1) = 0;
      *((void *)v5 + 2) = 0;
      *(void *)int v5 = &unk_1F2111748;
      uint64_t v6 = *((void *)this + 2);
      uint64_t v7 = *((int *)this + 6);
      *((_DWORD *)this + 6) = v7 + 1;
      *(void *)(v6 + 8 * v7) = v5;
      awd::metrics::CommCenterPowerVotingRecord::MergeFrom(v5, v8);
      ++v4;
    }
    while (v4 < *((int *)a2 + 6));
  }
LABEL_11:
  LOBYTE(v12) = *((unsigned char *)a2 + 52);
  if ((_BYTE)v12)
  {
    if (*((unsigned char *)a2 + 52))
    {
      int v14 = *((_DWORD *)a2 + 2);
      *((_DWORD *)this + 13) |= 1u;
      *((_DWORD *)this + 2) = v14;
      int v12 = *((_DWORD *)a2 + 13);
      if ((v12 & 2) == 0)
      {
LABEL_14:
        if ((v12 & 8) == 0) {
          return;
        }
        goto LABEL_15;
      }
    }
    else if ((*((unsigned char *)a2 + 52) & 2) == 0)
    {
      goto LABEL_14;
    }
    int v15 = *((_DWORD *)a2 + 3);
    *((_DWORD *)this + 13) |= 2u;
    *((_DWORD *)this + 3) = v15;
    if ((*((_DWORD *)a2 + 13) & 8) == 0) {
      return;
    }
LABEL_15:
    uint64_t v13 = *((void *)a2 + 5);
    *((_DWORD *)this + 13) |= 8u;
    *((void *)this + 5) = v13;
  }
}

void sub_1C5BA1744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C5BA1758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C5BA17C4(_Unwind_Exception *a1)
{
  int v3 = *(_DWORD *)(v1 + 28);
  if (v3 >= 1)
  {
    for (uint64_t i = 0; i < v3; ++i)
    {
      uint64_t v5 = *(void *)(*(void *)(v1 + 16) + 8 * i);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        int v3 = *(_DWORD *)(v1 + 28);
      }
    }
  }
  uint64_t v6 = *(void **)(v1 + 16);
  if (v6) {
    operator delete[](v6);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterPowerTransitionFailure::~CommCenterPowerTransitionFailure(awd::metrics::CommCenterPowerTransitionFailure *this)
{
  *(void *)this = &unk_1F2111838;
  int v2 = *((_DWORD *)this + 7);
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(*((void *)this + 2) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        int v2 = *((_DWORD *)this + 7);
      }
    }
  }
  uint64_t v5 = (void *)*((void *)this + 2);
  if (v5) {
    operator delete[](v5);
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;
  uint64_t vars8;

  *(void *)this = &unk_1F2111838;
  int v2 = *((_DWORD *)this + 7);
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(*((void *)this + 2) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        int v2 = *((_DWORD *)this + 7);
      }
    }
  }
  uint64_t v5 = (void *)*((void *)this + 2);
  if (v5) {
    operator delete[](v5);
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t vars8;

  *(void *)this = &unk_1F2111838;
  int v2 = *((_DWORD *)this + 7);
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(*((void *)this + 2) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        int v2 = *((_DWORD *)this + 7);
      }
    }
  }
  uint64_t v5 = (void *)*((void *)this + 2);
  if (v5) {
    operator delete[](v5);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);

  operator delete(v6);
}

uint64_t awd::metrics::CommCenterPowerTransitionFailure::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterPowerTransitionFailure::default_instance(awd::metrics::CommCenterPowerTransitionFailure *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = awd::metrics::CommCenterPowerTransitionFailure::default_instance_;
  if (!awd::metrics::CommCenterPowerTransitionFailure::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterPowerTransitionFailure::default_instance_;
  }
  return result;
}

void *awd::metrics::CommCenterPowerTransitionFailure::New(awd::metrics::CommCenterPowerTransitionFailure *this)
{
  uint64_t result = operator new(0x38uLL);
  result[5] = 0;
  result[6] = 0;
  *uint64_t result = &unk_1F2111838;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  *((_DWORD *)result + 8) = 0;
  return result;
}

uint64_t awd::metrics::CommCenterPowerTransitionFailure::Clear(uint64_t this)
{
  uint64_t v1 = this;
  if (*(unsigned char *)(this + 52))
  {
    *(void *)(this + 8) = 0;
    *(void *)(this + 40) = 0;
  }
  if (*(int *)(this + 24) >= 1)
  {
    uint64_t v2 = 0;
    do
    {
      uint64_t v3 = *(void *)(*(void *)(v1 + 16) + 8 * v2);
      this = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 24));
  }
  *(_DWORD *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 52) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterPowerTransitionFailure::MergePartialFromCodedStream(awd::metrics::CommCenterPowerTransitionFailure *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4 = (unsigned int *)((char *)this + 8);
  uint64_t v5 = (unsigned int *)((char *)this + 12);
  uint64_t v6 = (awd::metrics::CommCenterPowerTransitionFailure *)((char *)this + 16);
  uint64_t v7 = (unint64_t *)((char *)this + 40);
  while (1)
  {
LABEL_2:
    uint64_t v8 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v8 >= *((void *)a2 + 2) || *v8 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v8;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v8 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_21;
        }
        int v12 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!result) {
            return result;
          }
          uint64_t v13 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v11 = *((void *)a2 + 2);
          *((_DWORD *)this + 13) |= 1u;
          if ((unint64_t)v13 >= v11) {
            continue;
          }
        }
        else
        {
          unsigned int *v4 = *v12;
          uint64_t v13 = v12 + 1;
          *((void *)a2 + 1) = v13;
          *((_DWORD *)this + 13) |= 1u;
          if ((unint64_t)v13 >= v11) {
            continue;
          }
        }
        if (*v13 != 16) {
          continue;
        }
        int v14 = v13 + 1;
        *((void *)a2 + 1) = v14;
        if ((unint64_t)v14 >= v11) {
          goto LABEL_33;
        }
        goto LABEL_30;
      case 2u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_21;
        }
        int v14 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v14 >= v11) {
          goto LABEL_33;
        }
LABEL_30:
        if (*v14 < 0)
        {
LABEL_33:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!result) {
            return result;
          }
          uint64_t v22 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v23 = *((void *)a2 + 2);
          *((_DWORD *)this + 13) |= 2u;
          if ((unint64_t)v22 >= v23) {
            continue;
          }
        }
        else
        {
          *uint64_t v5 = *v14;
          uint64_t v22 = v14 + 1;
          *((void *)a2 + 1) = v22;
          *((_DWORD *)this + 13) |= 2u;
          if ((unint64_t)v22 >= v11) {
            continue;
          }
        }
        if (*v22 != 26) {
          continue;
        }
        break;
      case 3u:
        int v10 = TagFallback & 7;
        if (v10 != 2) {
          goto LABEL_21;
        }
        int v15 = *((_DWORD *)this + 7);
        uint64_t v16 = *((int *)this + 6);
        if ((int)v16 < v15) {
          goto LABEL_19;
        }
        goto LABEL_37;
      case 4u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_21;
        }
        uint64_t v20 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v19 = *((void *)a2 + 2);
        if ((unint64_t)v20 >= v19) {
          goto LABEL_56;
        }
        goto LABEL_53;
      default:
        int v10 = TagFallback & 7;
LABEL_21:
        if (v10 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
        continue;
        }
    }
    do
    {
      *((void *)a2 + 1) = v22 + 1;
      int v15 = *((_DWORD *)this + 7);
      uint64_t v16 = *((int *)this + 6);
      if ((int)v16 < v15)
      {
LABEL_19:
        uint64_t v17 = *((void *)this + 2);
        *((_DWORD *)this + 6) = v16 + 1;
        uint64_t v18 = *(awd::metrics::CommCenterPowerVotingRecord **)(v17 + 8 * v16);
      }
      else
      {
LABEL_37:
        if (v15 == *((_DWORD *)this + 8))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6);
          int v15 = *((_DWORD *)this + 7);
        }
        *((_DWORD *)this + 7) = v15 + 1;
        uint64_t v18 = (awd::metrics::CommCenterPowerVotingRecord *)operator new(0x18uLL);
        *((void *)v18 + 1) = 0;
        *((void *)v18 + 2) = 0;
        *(void *)uint64_t v18 = &unk_1F2111748;
        uint64_t v24 = *((void *)this + 2);
        uint64_t v25 = *((int *)this + 6);
        *((_DWORD *)this + 6) = v25 + 1;
        *(void *)(v24 + 8 * v25) = v18;
      }
      unsigned int v36 = -1431655766;
      uint64_t v26 = (char *)*((void *)a2 + 1);
      if ((unint64_t)v26 >= *((void *)a2 + 2) || *v26 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v36)) {
          return 0;
        }
      }
      else
      {
        unsigned int v36 = *v26;
        *((void *)a2 + 1) = v26 + 1;
      }
      int v27 = *((_DWORD *)a2 + 14);
      int v28 = *((_DWORD *)a2 + 15);
      *((_DWORD *)a2 + 14) = v27 + 1;
      if (v27 >= v28) {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
      if (!awd::metrics::CommCenterPowerVotingRecord::MergePartialFromCodedStream(v18, a2)
        || !*((unsigned char *)a2 + 36))
      {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
      int v29 = *((_DWORD *)a2 + 14);
      BOOL v30 = __OFSUB__(v29, 1);
      int v31 = v29 - 1;
      if (v31 < 0 == v30) {
        *((_DWORD *)a2 + 14) = v31;
      }
      uint64_t v22 = (unsigned char *)*((void *)a2 + 1);
      unint64_t v19 = *((void *)a2 + 2);
      if ((unint64_t)v22 >= v19) {
        goto LABEL_2;
      }
      int v32 = *v22;
    }
    while (v32 == 26);
    if (v32 != 32) {
      continue;
    }
    uint64_t v20 = v22 + 1;
    *((void *)a2 + 1) = v20;
    if ((unint64_t)v20 >= v19) {
      break;
    }
LABEL_53:
    if ((char)*v20 < 0) {
      break;
    }
    unint64_t *v7 = *v20;
    xpc_object_t v33 = (char *)(v20 + 1);
    *((void *)a2 + 1) = v33;
    *((_DWORD *)this + 13) |= 8u;
    if (v33 == (char *)v19) {
      goto LABEL_58;
    }
  }
LABEL_56:
  uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v7);
  if (result)
  {
    uint64_t v35 = *((void *)a2 + 1);
    uint64_t v34 = *((void *)a2 + 2);
    *((_DWORD *)this + 13) |= 8u;
    if (v35 != v34) {
      goto LABEL_2;
    }
LABEL_58:
    if (!*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10)) {
      goto LABEL_2;
    }
    *((_DWORD *)a2 + 8) = 0;
    uint64_t result = 1;
    *((unsigned char *)a2 + 36) = 1;
  }
  return result;
}

uint64_t awd::metrics::CommCenterPowerTransitionFailure::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 52);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 52) & 2) == 0)
    {
LABEL_3:
      if (*(int *)(v5 + 24) < 1) {
        goto LABEL_9;
      }
      goto LABEL_7;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 12), (uint64_t)a2, a4);
  if (*(int *)(v5 + 24) < 1) {
    goto LABEL_9;
  }
LABEL_7:
  uint64_t v7 = 0;
  do
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(void *)(*(void *)(v5 + 16) + 8 * v7++), a2, a4);
  while (v7 < *(int *)(v5 + 24));
LABEL_9:
  if ((*(unsigned char *)(v5 + 52) & 8) != 0)
  {
    uint64_t v8 = *(void *)(v5 + 40);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v8, (uint64_t)a2, a4);
  }
  return this;
}

uint64_t awd::metrics::CommCenterPowerTransitionFailure::ByteSize(awd::metrics::CommCenterPowerTransitionFailure *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 52);
  if (!(_BYTE)v2)
  {
    int v6 = *((_DWORD *)this + 6);
    uint64_t v5 = v6;
    if (v6 < 1) {
      goto LABEL_35;
    }
    goto LABEL_18;
  }
  if ((*((unsigned char *)this + 52) & 1) == 0)
  {
    int v3 = 0;
    if ((*((unsigned char *)this + 52) & 2) == 0) {
      goto LABEL_4;
    }
LABEL_13:
    uint64_t v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
    if (v8 >= 0x80)
    {
      v3 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8) + 1;
      if ((*((_DWORD *)this + 13) & 8) != 0) {
        goto LABEL_17;
      }
    }
    else
    {
      v3 += 2;
      if ((v2 & 8) != 0) {
        goto LABEL_17;
      }
    }
LABEL_5:
    int v4 = *((_DWORD *)this + 6);
    uint64_t v5 = (v4 + v3);
    if (v4 < 1) {
      goto LABEL_35;
    }
    goto LABEL_18;
  }
  uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
  if (v7 >= 0x80)
  {
    int v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7) + 1;
    int v2 = *((_DWORD *)this + 13);
    if ((v2 & 2) != 0) {
      goto LABEL_13;
    }
  }
  else
  {
    int v3 = 2;
    if ((v2 & 2) != 0) {
      goto LABEL_13;
    }
  }
LABEL_4:
  if ((v2 & 8) == 0) {
    goto LABEL_5;
  }
LABEL_17:
  int v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                   + 5));
  int v10 = *((_DWORD *)this + 6);
  uint64_t v5 = (v10 + v3 + v9 + 1);
  if (v10 >= 1)
  {
LABEL_18:
    for (uint64_t i = 0; i < *((int *)this + 6); ++i)
    {
      while (1)
      {
        uint64_t v13 = *(void *)(*((void *)this + 2) + 8 * i);
        if (!*(unsigned char *)(v13 + 20))
        {
          LODWORD(v12) = 0;
          *(_DWORD *)(v13 + 16) = 0;
          goto LABEL_20;
        }
        if (*(unsigned char *)(v13 + 20)) {
          break;
        }
        uint64_t v12 = 0;
        if ((*(unsigned char *)(v13 + 20) & 2) == 0) {
          goto LABEL_24;
        }
LABEL_30:
        int v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(v13 + 12);
        if (v15 < 0x80)
        {
          uint64_t v12 = (v12 + 2);
          *(_DWORD *)(v13 + 16) = v12;
          if (v12 >= 0x80) {
            goto LABEL_34;
          }
          goto LABEL_20;
        }
        uint64_t v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15)
            + 1
            + v12;
        *(_DWORD *)(v13 + 16) = v12;
        if (v12 < 0x80) {
          goto LABEL_20;
        }
LABEL_34:
        uint64_t v5 = v12
           + v5
           + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v12);
        if (++i >= *((int *)this + 6)) {
          goto LABEL_35;
        }
      }
      int v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(v13 + 8);
      if (v14 >= 0x80)
      {
        uint64_t v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14) + 1;
        if ((*(_DWORD *)(v13 + 20) & 2) != 0) {
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v12 = 2;
        if ((*(unsigned char *)(v13 + 20) & 2) != 0) {
          goto LABEL_30;
        }
      }
LABEL_24:
      *(_DWORD *)(v13 + 16) = v12;
      if (v12 >= 0x80) {
        goto LABEL_34;
      }
LABEL_20:
      uint64_t v5 = (v12 + v5 + 1);
    }
  }
LABEL_35:
  *((_DWORD *)this + 12) = v5;
  return v5;
}

void awd::metrics::CommCenterPowerTransitionFailure::CopyFrom(awd::metrics::CommCenterPowerTransitionFailure *this, const awd::metrics::CommCenterPowerTransitionFailure *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterPowerTransitionFailure *))(*(void *)this + 32))(this);
    awd::metrics::CommCenterPowerTransitionFailure::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterPowerTransitionFailure::IsInitialized(awd::metrics::CommCenterPowerTransitionFailure *this)
{
  return 1;
}

awd::metrics::CommCenterPowerTransitionFailure *awd::metrics::CommCenterPowerTransitionFailure::Swap(awd::metrics::CommCenterPowerTransitionFailure *this, awd::metrics::CommCenterPowerTransitionFailure *a2)
{
  if (a2 != this)
  {
    int v3 = this;
    int v4 = *((_DWORD *)this + 2);
    *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v4;
    int v5 = *((_DWORD *)this + 3);
    *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = v5;
    this = (awd::metrics::CommCenterPowerTransitionFailure *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    uint64_t v6 = *((void *)v3 + 5);
    *((void *)v3 + 5) = *((void *)a2 + 5);
    *((void *)a2 + 5) = v6;
    LODWORD(v6) = *((_DWORD *)v3 + 13);
    *((_DWORD *)v3 + 13) = *((_DWORD *)a2 + 13);
    *((_DWORD *)a2 + 13) = v6;
    LODWORD(v6) = *((_DWORD *)v3 + 12);
    *((_DWORD *)v3 + 12) = *((_DWORD *)a2 + 12);
    *((_DWORD *)a2 + 12) = v6;
  }
  return this;
}

double awd::metrics::CommCenterPowerTransitionFailure::GetTypeName@<D0>(uint64_t a1@<X8>)
{
  int v3 = (char *)operator new(0x30uLL);
  *(void *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_1C5BCE330;
  strcpy(v3, "awd.metrics.CommCenterPowerTransitionFailure");
  return *(double *)"ransitionFailure";
}

void *awd::metrics::CommCenterMissedMTMessage::SharedCtor(void *this)
{
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

awd::metrics::CommCenterMissedMTMessage *awd::metrics::CommCenterMissedMTMessage::CommCenterMissedMTMessage(awd::metrics::CommCenterMissedMTMessage *this, const awd::metrics::CommCenterMissedMTMessage *a2)
{
  *(void *)this = &unk_1F21118B0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  awd::metrics::CommCenterMissedMTMessage::MergeFrom(this, a2);
  return this;
}

{
  *(void *)this = &unk_1F21118B0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  awd::metrics::CommCenterMissedMTMessage::MergeFrom(this, a2);
  return this;
}

void sub_1C5BA23FC(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterMissedMTMessage::MergeFrom(awd::metrics::CommCenterMissedMTMessage *this, const awd::metrics::CommCenterMissedMTMessage *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *((unsigned char *)a2 + 28);
  if ((_BYTE)v4)
  {
    if (*((unsigned char *)a2 + 28))
    {
      int v6 = *((_DWORD *)a2 + 2);
      *((_DWORD *)this + 7) |= 1u;
      *((_DWORD *)this + 2) = v6;
      int v4 = *((_DWORD *)a2 + 7);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_12;
      }
    }
    else if ((*((unsigned char *)a2 + 28) & 2) == 0)
    {
      goto LABEL_6;
    }
    int v7 = *((_DWORD *)a2 + 3);
    *((_DWORD *)this + 7) |= 2u;
    *((_DWORD *)this + 3) = v7;
    int v4 = *((_DWORD *)a2 + 7);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0) {
        return;
      }
      goto LABEL_8;
    }
LABEL_12:
    int v8 = *((_DWORD *)a2 + 4);
    *((_DWORD *)this + 7) |= 4u;
    *((_DWORD *)this + 4) = v8;
    if ((*((_DWORD *)a2 + 7) & 8) == 0) {
      return;
    }
LABEL_8:
    int v5 = *((_DWORD *)a2 + 5);
    *((_DWORD *)this + 7) |= 8u;
    *((_DWORD *)this + 5) = v5;
  }
}

void sub_1C5BA2504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C5BA2518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C5BA2574(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterMissedMTMessage::~CommCenterMissedMTMessage(awd::metrics::CommCenterMissedMTMessage *this)
{
  *(void *)this = &unk_1F21118B0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(void *)this = &unk_1F21118B0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  void *v1;
  uint64_t vars8;

  *(void *)this = &unk_1F21118B0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);

  operator delete(v1);
}

uint64_t awd::metrics::CommCenterMissedMTMessage::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterMissedMTMessage::default_instance(awd::metrics::CommCenterMissedMTMessage *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = awd::metrics::CommCenterMissedMTMessage::default_instance_;
  if (!awd::metrics::CommCenterMissedMTMessage::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterMissedMTMessage::default_instance_;
  }
  return result;
}

void *awd::metrics::CommCenterMissedMTMessage::New(awd::metrics::CommCenterMissedMTMessage *this)
{
  uint64_t result = operator new(0x20uLL);
  *uint64_t result = &unk_1F21118B0;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t awd::metrics::CommCenterMissedMTMessage::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 28))
  {
    *(void *)(this + 8) = 0;
    *(void *)(this + 16) = 0;
  }
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterMissedMTMessage::MergePartialFromCodedStream(awd::metrics::CommCenterMissedMTMessage *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  int v4 = (unsigned int *)((char *)this + 8);
  int v5 = (unsigned int *)((char *)this + 12);
  int v6 = (unsigned int *)((char *)this + 16);
  int v7 = (unsigned int *)((char *)this + 20);
  while (2)
  {
    int v8 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v8 >= *((void *)a2 + 2) || *v8 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v8;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v8 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_21;
        }
        uint64_t v12 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!result) {
            return result;
          }
          uint64_t v13 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v11 = *((void *)a2 + 2);
          *((_DWORD *)this + 7) |= 1u;
          if ((unint64_t)v13 >= v11) {
            continue;
          }
        }
        else
        {
          unsigned int *v4 = *v12;
          uint64_t v13 = v12 + 1;
          *((void *)a2 + 1) = v13;
          *((_DWORD *)this + 7) |= 1u;
          if ((unint64_t)v13 >= v11) {
            continue;
          }
        }
        if (*v13 != 16) {
          continue;
        }
        int v14 = v13 + 1;
        *((void *)a2 + 1) = v14;
        if ((unint64_t)v14 >= v11) {
          goto LABEL_33;
        }
        goto LABEL_30;
      case 2u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_21;
        }
        int v14 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v14 >= v11) {
          goto LABEL_33;
        }
LABEL_30:
        if ((*v14 & 0x80000000) == 0)
        {
          *int v5 = *v14;
          uint64_t v17 = v14 + 1;
          *((void *)a2 + 1) = v17;
          *((_DWORD *)this + 7) |= 2u;
          if ((unint64_t)v17 < v11) {
            goto LABEL_35;
          }
          continue;
        }
LABEL_33:
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
        if (!result) {
          return result;
        }
        uint64_t v17 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        *((_DWORD *)this + 7) |= 2u;
        if ((unint64_t)v17 >= v11) {
          continue;
        }
LABEL_35:
        if (*v17 != 24) {
          continue;
        }
        int v15 = v17 + 1;
        *((void *)a2 + 1) = v15;
        if ((unint64_t)v15 >= v11) {
          goto LABEL_40;
        }
LABEL_37:
        if ((*v15 & 0x80000000) == 0)
        {
          unsigned int *v6 = *v15;
          uint64_t v18 = v15 + 1;
          *((void *)a2 + 1) = v18;
          *((_DWORD *)this + 7) |= 4u;
          if ((unint64_t)v18 < v11) {
            goto LABEL_42;
          }
          continue;
        }
LABEL_40:
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
        if (!result) {
          return result;
        }
        uint64_t v18 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        *((_DWORD *)this + 7) |= 4u;
        if ((unint64_t)v18 >= v11) {
          continue;
        }
LABEL_42:
        if (*v18 != 32) {
          continue;
        }
        uint64_t v16 = v18 + 1;
        *((void *)a2 + 1) = v16;
        if ((unint64_t)v16 >= v11) {
          goto LABEL_47;
        }
LABEL_44:
        if ((*v16 & 0x80000000) == 0)
        {
          unsigned int *v7 = *v16;
          unint64_t v19 = (unsigned __int8 *)(v16 + 1);
          *((void *)a2 + 1) = v19;
          *((_DWORD *)this + 7) |= 8u;
          if (v19 == (unsigned __int8 *)v11) {
            goto LABEL_49;
          }
          continue;
        }
LABEL_47:
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
        if (!result) {
          return result;
        }
        uint64_t v21 = *((void *)a2 + 1);
        uint64_t v20 = *((void *)a2 + 2);
        *((_DWORD *)this + 7) |= 8u;
        if (v21 != v20) {
          continue;
        }
LABEL_49:
        if (!*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10)) {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)a2 + 36) = 1;
        return result;
      case 3u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_21;
        }
        int v15 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v15 >= v11) {
          goto LABEL_40;
        }
        goto LABEL_37;
      case 4u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_21;
        }
        uint64_t v16 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v16 >= v11) {
          goto LABEL_47;
        }
        goto LABEL_44;
      default:
        int v10 = TagFallback & 7;
LABEL_21:
        if (v10 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback))continue; {
        return 0;
        }
    }
  }
}

unsigned int *awd::metrics::CommCenterMissedMTMessage::SerializeWithCachedSizes(unsigned int *this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int v5 = this;
  unsigned int v6 = this[7];
  if (v6)
  {
    this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, this[2], (uint64_t)a2, a4);
    unsigned int v6 = v5[7];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[4], (uint64_t)a2, a4);
      if ((v5[7] & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[3], (uint64_t)a2, a4);
  unsigned int v6 = v5[7];
  if ((v6 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v6 & 8) == 0) {
    return this;
  }
LABEL_9:
  uint64_t v7 = v5[5];

  return (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v7, (uint64_t)a2, a4);
}

uint64_t awd::metrics::CommCenterMissedMTMessage::ByteSize(awd::metrics::CommCenterMissedMTMessage *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 28);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
    goto LABEL_6;
  }
  if (*((unsigned char *)this + 28))
  {
    int v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
    if (v5 >= 0x80)
    {
      uint64_t v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
      int v2 = *((_DWORD *)this + 7);
      if ((v2 & 2) == 0) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v3 = 2;
      if ((v2 & 2) == 0) {
        goto LABEL_15;
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 28) & 2) == 0) {
      goto LABEL_15;
    }
  }
  unsigned int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
  if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6) + 1;
    int v2 = *((_DWORD *)this + 7);
  }
  else
  {
    int v7 = 2;
  }
  uint64_t v3 = (v7 + v3);
LABEL_15:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) != 0) {
      goto LABEL_22;
    }
LABEL_6:
    *((_DWORD *)this + 6) = v3;
    return v3;
  }
  int v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
  if (v8 < 0x80)
  {
    uint64_t v3 = (v3 + 2);
    if ((v2 & 8) != 0) {
      goto LABEL_22;
    }
    goto LABEL_6;
  }
  uint64_t v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8)
     + 1
     + v3;
  if ((*((_DWORD *)this + 7) & 8) == 0) {
    goto LABEL_6;
  }
LABEL_22:
  int v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
  if (v9 >= 0x80) {
    uint64_t v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9)
  }
        + 1
        + v3;
  else {
    uint64_t v10 = (v3 + 2);
  }
  *((_DWORD *)this + 6) = v10;
  return v10;
}

void awd::metrics::CommCenterMissedMTMessage::CopyFrom(awd::metrics::CommCenterMissedMTMessage *this, const awd::metrics::CommCenterMissedMTMessage *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterMissedMTMessage *))(*(void *)this + 32))(this);
    awd::metrics::CommCenterMissedMTMessage::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterMissedMTMessage::IsInitialized(awd::metrics::CommCenterMissedMTMessage *this)
{
  return 1;
}

awd::metrics::CommCenterMissedMTMessage *awd::metrics::CommCenterMissedMTMessage::Swap(awd::metrics::CommCenterMissedMTMessage *this, awd::metrics::CommCenterMissedMTMessage *a2)
{
  if (a2 != this)
  {
    int v2 = *((_DWORD *)this + 2);
    *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v2;
    int v3 = *((_DWORD *)this + 3);
    *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = v3;
    int v4 = *((_DWORD *)this + 4);
    *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v4;
    int v5 = *((_DWORD *)this + 5);
    *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v5;
    int v6 = *((_DWORD *)this + 7);
    *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v6;
    int v7 = *((_DWORD *)this + 6);
    *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v7;
  }
  return this;
}

char *awd::metrics::CommCenterMissedMTMessage::GetTypeName@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1C5BCE340;
  strcpy(result, "awd.metrics.CommCenterMissedMTMessage");
  return result;
}

void *awd::metrics::CommCenterLowPowerEvent::SharedCtor(void *this)
{
  this[1] = 0;
  this[2] = 0;
  this[3] = MEMORY[0x1E4FBA920];
  this[4] = 0;
  return this;
}

awd::metrics::CommCenterLowPowerEvent *awd::metrics::CommCenterLowPowerEvent::CommCenterLowPowerEvent(awd::metrics::CommCenterLowPowerEvent *this, const awd::metrics::CommCenterLowPowerEvent *a2)
{
  *(void *)this = &unk_1F2111928;
  *((void *)this + 1) = 0;
  uint64_t v3 = MEMORY[0x1E4FBA920];
  *((void *)this + 2) = 0;
  *((void *)this + 3) = v3;
  *((void *)this + 4) = 0;
  awd::metrics::CommCenterLowPowerEvent::MergeFrom(this, a2);
  return this;
}

{
  uint64_t v3;

  *(void *)this = &unk_1F2111928;
  *((void *)this + 1) = 0;
  uint64_t v3 = MEMORY[0x1E4FBA920];
  *((void *)this + 2) = 0;
  *((void *)this + 3) = v3;
  *((void *)this + 4) = 0;
  awd::metrics::CommCenterLowPowerEvent::MergeFrom(this, a2);
  return this;
}

void sub_1C5BA2D78(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterLowPowerEvent::MergeFrom(awd::metrics::CommCenterLowPowerEvent *this, const awd::metrics::CommCenterLowPowerEvent *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  LOBYTE(v4) = *((unsigned char *)a2 + 36);
  if ((_BYTE)v4)
  {
    if (*((unsigned char *)a2 + 36))
    {
      uint64_t v5 = *((void *)a2 + 1);
      *((_DWORD *)this + 9) |= 1u;
      *((void *)this + 1) = v5;
      int v4 = *((_DWORD *)a2 + 9);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_11;
      }
    }
    else if ((*((unsigned char *)a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    int v6 = *((_DWORD *)a2 + 4);
    *((_DWORD *)this + 9) |= 2u;
    *((_DWORD *)this + 4) = v6;
    int v4 = *((_DWORD *)a2 + 9);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0) {
        return;
      }
LABEL_12:
      int v8 = (void **)*((void *)a2 + 3);
      *((_DWORD *)this + 9) |= 8u;
      int v9 = (void **)*((void *)this + 3);
      if (v9 == (void **)MEMORY[0x1E4FBA920])
      {
        int v9 = (void **)operator new(0x18uLL);
        v9[1] = 0;
        uint64_t v9[2] = 0;
        wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9 = 0;
        *((void *)this + 3) = v9;
      }
      if (v9 != v8)
      {
        char v10 = *((unsigned char *)v8 + 23);
        if (*((char *)v9 + 23) < 0)
        {
          if (v10 >= 0) {
            uint64_t v12 = v8;
          }
          else {
            uint64_t v12 = *v8;
          }
          if (v10 >= 0) {
            size_t v13 = *((unsigned __int8 *)v8 + 23);
          }
          else {
            size_t v13 = (size_t)v8[1];
          }
          std::string::__assign_no_alias<false>(v9, v12, v13);
        }
        else if ((*((unsigned char *)v8 + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v9, *v8, (size_t)v8[1]);
        }
        else
        {
          long long v11 = *(_OWORD *)v8;
          uint64_t v9[2] = v8[2];
          *(_OWORD *)int v9 = v11;
        }
      }
      return;
    }
LABEL_11:
    int v7 = *((_DWORD *)a2 + 5);
    *((_DWORD *)this + 9) |= 4u;
    *((_DWORD *)this + 5) = v7;
    if ((*((_DWORD *)a2 + 9) & 8) == 0) {
      return;
    }
    goto LABEL_12;
  }
}

void sub_1C5BA2F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C5BA2F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C5BA2F94(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterLowPowerEvent::~CommCenterLowPowerEvent(awd::metrics::CommCenterLowPowerEvent *this)
{
  *(void *)this = &unk_1F2111928;
  uint64_t v2 = *((void *)this + 3);
  if (v2 != MEMORY[0x1E4FBA920] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    operator delete((void *)v2);
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1F2111928;
  uint64_t v2 = *((void *)this + 3);
  if (v2 != MEMORY[0x1E4FBA920] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    operator delete((void *)v2);
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t v2;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1F2111928;
  uint64_t v2 = *((void *)this + 3);
  if (v2 != MEMORY[0x1E4FBA920] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    operator delete((void *)v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);

  operator delete(v4);
}

void awd::metrics::CommCenterLowPowerEvent::SharedDtor(awd::metrics::CommCenterLowPowerEvent *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1 != MEMORY[0x1E4FBA920] && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      operator delete(*(void **)v1);
      uint64_t v3 = (void *)v1;
    }
    else
    {
      uint64_t v3 = (void *)*((void *)this + 3);
    }
    operator delete(v3);
  }
}

uint64_t awd::metrics::CommCenterLowPowerEvent::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterLowPowerEvent::default_instance(awd::metrics::CommCenterLowPowerEvent *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = awd::metrics::CommCenterLowPowerEvent::default_instance_;
  if (!awd::metrics::CommCenterLowPowerEvent::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterLowPowerEvent::default_instance_;
  }
  return result;
}

void *awd::metrics::CommCenterLowPowerEvent::New(awd::metrics::CommCenterLowPowerEvent *this)
{
  uint64_t result = operator new(0x28uLL);
  uint64_t v2 = MEMORY[0x1E4FBA920];
  *uint64_t result = &unk_1F2111928;
  result[1] = 0;
  result[2] = 0;
  result[3] = v2;
  result[4] = 0;
  return result;
}

uint64_t awd::metrics::CommCenterLowPowerEvent::Clear(uint64_t this)
{
  char v1 = *(unsigned char *)(this + 36);
  if (!v1) {
    goto LABEL_6;
  }
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  if ((v1 & 8) == 0) {
    goto LABEL_6;
  }
  uint64_t v2 = *(void *)(this + 24);
  if (v2 == MEMORY[0x1E4FBA920]) {
    goto LABEL_6;
  }
  if ((*(char *)(v2 + 23) & 0x80000000) == 0)
  {
    *(unsigned char *)uint64_t v2 = 0;
    *(unsigned char *)(v2 + 23) = 0;
LABEL_6:
    *(_DWORD *)(this + 36) = 0;
    return this;
  }
  **(unsigned char **)uint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterLowPowerEvent::MergePartialFromCodedStream(awd::metrics::CommCenterLowPowerEvent *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  int v4 = (unint64_t *)((char *)this + 8);
  uint64_t v5 = (unsigned int *)((char *)this + 16);
  int v6 = (unsigned int *)((char *)this + 20);
  uint64_t v7 = MEMORY[0x1E4FBA920];
  while (2)
  {
    int v8 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v8 >= *((void *)a2 + 2) || *v8 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v8;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v8 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_28;
        }
        uint64_t v12 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v12 < v11 && (*v12 & 0x80000000) == 0)
        {
          unint64_t *v4 = *v12;
          size_t v13 = v12 + 1;
          *((void *)a2 + 1) = v13;
          *((_DWORD *)this + 9) |= 1u;
          if ((unint64_t)v13 >= v11) {
            continue;
          }
          goto LABEL_33;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
        if (result)
        {
          size_t v13 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v11 = *((void *)a2 + 2);
          *((_DWORD *)this + 9) |= 1u;
          if ((unint64_t)v13 >= v11) {
            continue;
          }
LABEL_33:
          if (*v13 != 16) {
            continue;
          }
          int v14 = v13 + 1;
          *((void *)a2 + 1) = v14;
          if ((unint64_t)v14 >= v11) {
            goto LABEL_38;
          }
          goto LABEL_35;
        }
        break;
      case 2u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_28;
        }
        int v14 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v14 >= v11) {
          goto LABEL_38;
        }
LABEL_35:
        if (*v14 < 0)
        {
LABEL_38:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!result) {
            return result;
          }
          uint64_t v18 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v11 = *((void *)a2 + 2);
          *((_DWORD *)this + 9) |= 2u;
          if ((unint64_t)v18 >= v11) {
            continue;
          }
        }
        else
        {
          *uint64_t v5 = *v14;
          uint64_t v18 = v14 + 1;
          *((void *)a2 + 1) = v18;
          *((_DWORD *)this + 9) |= 2u;
          if ((unint64_t)v18 >= v11) {
            continue;
          }
        }
        if (*v18 != 24) {
          continue;
        }
        int v15 = v18 + 1;
        *((void *)a2 + 1) = v15;
        if ((unint64_t)v15 >= v11) {
          goto LABEL_45;
        }
LABEL_42:
        if (*v15 < 0)
        {
LABEL_45:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!result) {
            return result;
          }
          unint64_t v19 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v21 = *((void *)a2 + 2);
          int v20 = *((_DWORD *)this + 9) | 4;
          *((_DWORD *)this + 9) = v20;
          if ((unint64_t)v19 >= v21) {
            continue;
          }
        }
        else
        {
          unsigned int *v6 = *v15;
          unint64_t v19 = v15 + 1;
          *((void *)a2 + 1) = v19;
          int v20 = *((_DWORD *)this + 9) | 4;
          *((_DWORD *)this + 9) = v20;
          if ((unint64_t)v19 >= v11) {
            continue;
          }
        }
        if (*v19 == 34)
        {
          *((void *)a2 + 1) = v19 + 1;
          *((_DWORD *)this + 9) = v20 | 8;
          if (*((void *)this + 3) == v7)
          {
LABEL_22:
            uint64_t v16 = operator new(0x18uLL);
            v16[1] = 0;
            v16[2] = 0;
            *uint64_t v16 = 0;
            *((void *)this + 3) = v16;
          }
LABEL_23:
          uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
          if (!result) {
            return result;
          }
          if (*((void *)a2 + 1) == *((void *)a2 + 2)
            && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            uint64_t result = 1;
            *((unsigned char *)a2 + 36) = 1;
            return result;
          }
        }
        continue;
      case 3u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_28;
        }
        int v15 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v15 >= v11) {
          goto LABEL_45;
        }
        goto LABEL_42;
      case 4u:
        int v10 = TagFallback & 7;
        if (v10 != 2) {
          goto LABEL_28;
        }
        *((_DWORD *)this + 9) |= 8u;
        if (*((void *)this + 3) == v7) {
          goto LABEL_22;
        }
        goto LABEL_23;
      default:
        int v10 = TagFallback & 7;
LABEL_28:
        if (v10 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
        continue;
        }
    }
    return result;
  }
}

uint64_t awd::metrics::CommCenterLowPowerEvent::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = (unsigned int *)this;
  unsigned int v6 = *(_DWORD *)(this + 36);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 8), (uint64_t)a2, a4);
    unsigned int v6 = v5[9];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[5], (uint64_t)a2, a4);
      if ((v5[9] & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[4], (uint64_t)a2, a4);
  unsigned int v6 = v5[9];
  if ((v6 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v6 & 8) == 0) {
    return this;
  }
LABEL_9:

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
}

uint64_t awd::metrics::CommCenterLowPowerEvent::ByteSize(awd::metrics::CommCenterLowPowerEvent *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 36);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
    goto LABEL_6;
  }
  if (*((unsigned char *)this + 36))
  {
    uint64_t v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 1))
       + 1;
    int v2 = *((_DWORD *)this + 9);
    if ((v2 & 2) == 0) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 36) & 2) == 0) {
      goto LABEL_12;
    }
  }
  uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
  if (v5 >= 0x80)
  {
    int v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
    int v2 = *((_DWORD *)this + 9);
  }
  else
  {
    int v6 = 2;
  }
  uint64_t v3 = (v6 + v3);
LABEL_12:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) != 0) {
      goto LABEL_19;
    }
LABEL_6:
    *((_DWORD *)this + 8) = v3;
    return v3;
  }
  uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
  if (v7 < 0x80)
  {
    uint64_t v3 = (v3 + 2);
    if ((v2 & 8) != 0) {
      goto LABEL_19;
    }
    goto LABEL_6;
  }
  uint64_t v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7)
     + 1
     + v3;
  if ((*((_DWORD *)this + 9) & 8) == 0) {
    goto LABEL_6;
  }
LABEL_19:
  uint64_t v8 = *((void *)this + 3);
  int v9 = *(unsigned __int8 *)(v8 + 23);
  char v10 = v9;
  uint64_t v11 = *(void *)(v8 + 8);
  if ((v9 & 0x80u) == 0) {
    unint64_t v12 = *(unsigned __int8 *)(v8 + 23);
  }
  else {
    unint64_t v12 = v11;
  }
  if (v12 >= 0x80)
  {
    int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v12);
    int v9 = *(unsigned __int8 *)(v8 + 23);
    uint64_t v11 = *(void *)(v8 + 8);
    char v10 = *(unsigned char *)(v8 + 23);
  }
  else
  {
    int v13 = 1;
  }
  if (v10 < 0) {
    int v9 = v11;
  }
  int v14 = v3 + v13 + v9;
  *((_DWORD *)this + 8) = v14 + 1;
  return (v14 + 1);
}

void awd::metrics::CommCenterLowPowerEvent::CopyFrom(awd::metrics::CommCenterLowPowerEvent *this, const awd::metrics::CommCenterLowPowerEvent *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterLowPowerEvent *))(*(void *)this + 32))(this);
    awd::metrics::CommCenterLowPowerEvent::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterLowPowerEvent::IsInitialized(awd::metrics::CommCenterLowPowerEvent *this)
{
  return 1;
}

uint64_t awd::metrics::CommCenterLowPowerEvent::Swap(uint64_t this, awd::metrics::CommCenterLowPowerEvent *a2)
{
  if (a2 != (awd::metrics::CommCenterLowPowerEvent *)this)
  {
    uint64_t v2 = *(void *)(this + 8);
    *(void *)(this + 8) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 20);
    *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v2;
    uint64_t v3 = *(void *)(this + 24);
    *(void *)(this + 24) = *((void *)a2 + 3);
    *((void *)a2 + 3) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 36);
    *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 32);
    *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v3;
  }
  return this;
}

char *awd::metrics::CommCenterLowPowerEvent::GetTypeName@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1C5BCAD70;
  strcpy(result, "awd.metrics.CommCenterLowPowerEvent");
  return result;
}

uint64_t awd::metrics::CommCenterWakeInfo::SharedCtor(uint64_t this)
{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(void *)(this + 24) = 0;
  return this;
}

awd::metrics::CommCenterWakeInfo *awd::metrics::CommCenterWakeInfo::CommCenterWakeInfo(awd::metrics::CommCenterWakeInfo *this, const awd::metrics::CommCenterWakeInfo *a2)
{
  *(void *)this = &unk_1F21119A0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  awd::metrics::CommCenterWakeInfo::MergeFrom(this, a2);
  return this;
}

{
  *(void *)this = &unk_1F21119A0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  awd::metrics::CommCenterWakeInfo::MergeFrom(this, a2);
  return this;
}

void sub_1C5BA3978(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterWakeInfo::MergeFrom(awd::metrics::CommCenterWakeInfo *this, const awd::metrics::CommCenterWakeInfo *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *((unsigned char *)a2 + 32);
  if ((_BYTE)v4)
  {
    if (*((unsigned char *)a2 + 32))
    {
      uint64_t v6 = *((void *)a2 + 1);
      *((_DWORD *)this + 8) |= 1u;
      *((void *)this + 1) = v6;
      int v4 = *((_DWORD *)a2 + 8);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_12;
      }
    }
    else if ((*((unsigned char *)a2 + 32) & 2) == 0)
    {
      goto LABEL_6;
    }
    int v7 = *((_DWORD *)a2 + 4);
    *((_DWORD *)this + 8) |= 2u;
    *((_DWORD *)this + 4) = v7;
    int v4 = *((_DWORD *)a2 + 8);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0) {
        return;
      }
      goto LABEL_8;
    }
LABEL_12:
    int v8 = *((_DWORD *)a2 + 5);
    *((_DWORD *)this + 8) |= 4u;
    *((_DWORD *)this + 5) = v8;
    if ((*((_DWORD *)a2 + 8) & 8) == 0) {
      return;
    }
LABEL_8:
    int v5 = *((_DWORD *)a2 + 6);
    *((_DWORD *)this + 8) |= 8u;
    *((_DWORD *)this + 6) = v5;
  }
}

void sub_1C5BA3A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C5BA3A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C5BA3AF4(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterWakeInfo::~CommCenterWakeInfo(awd::metrics::CommCenterWakeInfo *this)
{
  *(void *)this = &unk_1F21119A0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(void *)this = &unk_1F21119A0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  void *v1;
  uint64_t vars8;

  *(void *)this = &unk_1F21119A0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);

  operator delete(v1);
}

uint64_t awd::metrics::CommCenterWakeInfo::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 28) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterWakeInfo::default_instance(awd::metrics::CommCenterWakeInfo *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = awd::metrics::CommCenterWakeInfo::default_instance_;
  if (!awd::metrics::CommCenterWakeInfo::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterWakeInfo::default_instance_;
  }
  return result;
}

void *awd::metrics::CommCenterWakeInfo::New(awd::metrics::CommCenterWakeInfo *this)
{
  uint64_t result = operator new(0x28uLL);
  *uint64_t result = &unk_1F21119A0;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  *((_DWORD *)result + 8) = 0;
  return result;
}

uint64_t awd::metrics::CommCenterWakeInfo::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 32))
  {
    *(void *)(this + 8) = 0;
    *(void *)(this + 16) = 0;
    *(_DWORD *)(this + 24) = 0;
  }
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterWakeInfo::MergePartialFromCodedStream(awd::metrics::CommCenterWakeInfo *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  int v4 = (unint64_t *)((char *)this + 8);
  int v5 = (unsigned int *)((char *)this + 16);
  uint64_t v6 = (unsigned int *)((char *)this + 20);
  int v7 = (unsigned int *)((char *)this + 24);
  while (2)
  {
    int v8 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v8 >= *((void *)a2 + 2) || *v8 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v8;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v8 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_21;
        }
        unint64_t v12 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
          if (!result) {
            return result;
          }
          int v13 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v11 = *((void *)a2 + 2);
          *((_DWORD *)this + 8) |= 1u;
          if ((unint64_t)v13 >= v11) {
            continue;
          }
        }
        else
        {
          unint64_t *v4 = *v12;
          int v13 = v12 + 1;
          *((void *)a2 + 1) = v13;
          *((_DWORD *)this + 8) |= 1u;
          if ((unint64_t)v13 >= v11) {
            continue;
          }
        }
        if (*v13 != 16) {
          continue;
        }
        int v14 = v13 + 1;
        *((void *)a2 + 1) = v14;
        if ((unint64_t)v14 >= v11) {
          goto LABEL_33;
        }
        goto LABEL_30;
      case 2u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_21;
        }
        int v14 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v14 >= v11) {
          goto LABEL_33;
        }
LABEL_30:
        if ((*v14 & 0x80000000) == 0)
        {
          *int v5 = *v14;
          uint64_t v17 = v14 + 1;
          *((void *)a2 + 1) = v17;
          *((_DWORD *)this + 8) |= 2u;
          if ((unint64_t)v17 < v11) {
            goto LABEL_35;
          }
          continue;
        }
LABEL_33:
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
        if (!result) {
          return result;
        }
        uint64_t v17 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        *((_DWORD *)this + 8) |= 2u;
        if ((unint64_t)v17 >= v11) {
          continue;
        }
LABEL_35:
        if (*v17 != 24) {
          continue;
        }
        int v15 = v17 + 1;
        *((void *)a2 + 1) = v15;
        if ((unint64_t)v15 >= v11) {
          goto LABEL_40;
        }
LABEL_37:
        if ((*v15 & 0x80000000) == 0)
        {
          unsigned int *v6 = *v15;
          uint64_t v18 = v15 + 1;
          *((void *)a2 + 1) = v18;
          *((_DWORD *)this + 8) |= 4u;
          if ((unint64_t)v18 < v11) {
            goto LABEL_42;
          }
          continue;
        }
LABEL_40:
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
        if (!result) {
          return result;
        }
        uint64_t v18 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        *((_DWORD *)this + 8) |= 4u;
        if ((unint64_t)v18 >= v11) {
          continue;
        }
LABEL_42:
        if (*v18 != 32) {
          continue;
        }
        uint64_t v16 = v18 + 1;
        *((void *)a2 + 1) = v16;
        if ((unint64_t)v16 >= v11) {
          goto LABEL_47;
        }
LABEL_44:
        if ((*v16 & 0x80000000) == 0)
        {
          unsigned int *v7 = *v16;
          unint64_t v19 = (unsigned __int8 *)(v16 + 1);
          *((void *)a2 + 1) = v19;
          *((_DWORD *)this + 8) |= 8u;
          if (v19 == (unsigned __int8 *)v11) {
            goto LABEL_49;
          }
          continue;
        }
LABEL_47:
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
        if (!result) {
          return result;
        }
        uint64_t v21 = *((void *)a2 + 1);
        uint64_t v20 = *((void *)a2 + 2);
        *((_DWORD *)this + 8) |= 8u;
        if (v21 != v20) {
          continue;
        }
LABEL_49:
        if (!*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10)) {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)a2 + 36) = 1;
        return result;
      case 3u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_21;
        }
        int v15 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v15 >= v11) {
          goto LABEL_40;
        }
        goto LABEL_37;
      case 4u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_21;
        }
        uint64_t v16 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v16 >= v11) {
          goto LABEL_47;
        }
        goto LABEL_44;
      default:
        int v10 = TagFallback & 7;
LABEL_21:
        if (v10 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback))continue; {
        return 0;
        }
    }
  }
}

uint64_t awd::metrics::CommCenterWakeInfo::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int v5 = (unsigned int *)this;
  unsigned int v6 = *(_DWORD *)(this + 32);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 8), (uint64_t)a2, a4);
    unsigned int v6 = v5[8];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[5], (uint64_t)a2, a4);
      if ((v5[8] & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[4], (uint64_t)a2, a4);
  unsigned int v6 = v5[8];
  if ((v6 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v6 & 8) == 0) {
    return this;
  }
LABEL_9:
  uint64_t v7 = v5[6];

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v7, (uint64_t)a2, a4);
}

uint64_t awd::metrics::CommCenterWakeInfo::ByteSize(awd::metrics::CommCenterWakeInfo *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 32);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
    goto LABEL_6;
  }
  if (*((unsigned char *)this + 32))
  {
    uint64_t v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 1))
       + 1;
    int v2 = *((_DWORD *)this + 8);
    if ((v2 & 2) == 0) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 32) & 2) == 0) {
      goto LABEL_12;
    }
  }
  int v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
  if (v5 >= 0x80)
  {
    int v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
    int v2 = *((_DWORD *)this + 8);
  }
  else
  {
    int v6 = 2;
  }
  uint64_t v3 = (v6 + v3);
LABEL_12:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) != 0) {
      goto LABEL_19;
    }
LABEL_6:
    *((_DWORD *)this + 7) = v3;
    return v3;
  }
  uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
  if (v7 < 0x80)
  {
    uint64_t v3 = (v3 + 2);
    if ((v2 & 8) != 0) {
      goto LABEL_19;
    }
    goto LABEL_6;
  }
  uint64_t v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7)
     + 1
     + v3;
  if ((*((_DWORD *)this + 8) & 8) == 0) {
    goto LABEL_6;
  }
LABEL_19:
  int v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  if (v8 >= 0x80) {
    uint64_t v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8)
  }
       + 1
       + v3;
  else {
    uint64_t v9 = (v3 + 2);
  }
  *((_DWORD *)this + 7) = v9;
  return v9;
}

void awd::metrics::CommCenterWakeInfo::CopyFrom(awd::metrics::CommCenterWakeInfo *this, const awd::metrics::CommCenterWakeInfo *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterWakeInfo *))(*(void *)this + 32))(this);
    awd::metrics::CommCenterWakeInfo::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterWakeInfo::IsInitialized(awd::metrics::CommCenterWakeInfo *this)
{
  return 1;
}

uint64_t awd::metrics::CommCenterWakeInfo::Swap(uint64_t this, awd::metrics::CommCenterWakeInfo *a2)
{
  if (a2 != (awd::metrics::CommCenterWakeInfo *)this)
  {
    uint64_t v2 = *(void *)(this + 8);
    *(void *)(this + 8) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 20);
    *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 32);
    *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 28);
    *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v2;
  }
  return this;
}

double awd::metrics::CommCenterWakeInfo::GetTypeName@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (char *)operator new(0x20uLL);
  *(void *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_1C5BC6F80;
  strcpy(v3, "awd.metrics.CommCenterWakeInfo");
  return *(double *)"mmCenterWakeInfo";
}

double awd::metrics::CommCenterLowPowerStats::SharedCtor(awd::metrics::CommCenterLowPowerStats *this)
{
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

awd::metrics::CommCenterLowPowerStats *awd::metrics::CommCenterLowPowerStats::CommCenterLowPowerStats(awd::metrics::CommCenterLowPowerStats *this, const awd::metrics::CommCenterLowPowerStats *a2)
{
  *(void *)this = &unk_1F2111A18;
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  awd::metrics::CommCenterLowPowerStats::MergeFrom(this, a2);
  return this;
}

{
  *(void *)this = &unk_1F2111A18;
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  awd::metrics::CommCenterLowPowerStats::MergeFrom(this, a2);
  return this;
}

void sub_1C5BA4308(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::RepeatedPtrField<awd::metrics::CrashReasonType>::~RepeatedPtrField((uint64_t)v1 + 40);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterLowPowerStats::MergeFrom(awd::metrics::CommCenterLowPowerStats *this, const awd::metrics::CommCenterLowPowerStats *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v21);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::metrics::CommCenterLowPowerStats *)((char *)this + 40));
  if (*((int *)a2 + 12) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      while (1)
      {
        int v8 = *(const awd::metrics::CommCenterMissedMTMessage **)(*((void *)a2 + 5) + 8 * v4);
        int v9 = *((_DWORD *)this + 13);
        uint64_t v10 = *((int *)this + 12);
        if ((int)v10 >= v9) {
          break;
        }
        uint64_t v11 = *((void *)this + 5);
        *((_DWORD *)this + 12) = v10 + 1;
        awd::metrics::CommCenterMissedMTMessage::MergeFrom(*(awd::metrics::CommCenterMissedMTMessage **)(v11 + 8 * v10), v8);
        if (++v4 >= *((int *)a2 + 12)) {
          goto LABEL_11;
        }
      }
      if (v9 == *((_DWORD *)this + 14))
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::metrics::CommCenterLowPowerStats *)((char *)this + 40));
        int v9 = *((_DWORD *)this + 13);
      }
      *((_DWORD *)this + 13) = v9 + 1;
      int v5 = (awd::metrics::CommCenterMissedMTMessage *)operator new(0x20uLL);
      *(void *)int v5 = &unk_1F21118B0;
      *((void *)v5 + 1) = 0;
      *((void *)v5 + 2) = 0;
      *((void *)v5 + 3) = 0;
      uint64_t v6 = *((void *)this + 5);
      uint64_t v7 = *((int *)this + 12);
      *((_DWORD *)this + 12) = v7 + 1;
      *(void *)(v6 + 8 * v7) = v5;
      awd::metrics::CommCenterMissedMTMessage::MergeFrom(v5, v8);
      ++v4;
    }
    while (v4 < *((int *)a2 + 12));
  }
LABEL_11:
  LOBYTE(v12) = *((unsigned char *)a2 + 72);
  if ((_BYTE)v12)
  {
    if (*((unsigned char *)a2 + 72))
    {
      uint64_t v14 = *((void *)a2 + 1);
      *((_DWORD *)this + 18) |= 1u;
      *((void *)this + 1) = v14;
      int v12 = *((_DWORD *)a2 + 18);
      if ((v12 & 2) == 0)
      {
LABEL_14:
        if ((v12 & 4) == 0) {
          goto LABEL_15;
        }
        goto LABEL_24;
      }
    }
    else if ((*((unsigned char *)a2 + 72) & 2) == 0)
    {
      goto LABEL_14;
    }
    int v15 = *((_DWORD *)a2 + 4);
    *((_DWORD *)this + 18) |= 2u;
    *((_DWORD *)this + 4) = v15;
    int v12 = *((_DWORD *)a2 + 18);
    if ((v12 & 4) == 0)
    {
LABEL_15:
      if ((v12 & 8) == 0) {
        goto LABEL_16;
      }
      goto LABEL_25;
    }
LABEL_24:
    int v16 = *((_DWORD *)a2 + 5);
    *((_DWORD *)this + 18) |= 4u;
    *((_DWORD *)this + 5) = v16;
    int v12 = *((_DWORD *)a2 + 18);
    if ((v12 & 8) == 0)
    {
LABEL_16:
      if ((v12 & 0x10) == 0) {
        goto LABEL_17;
      }
      goto LABEL_26;
    }
LABEL_25:
    int v17 = *((_DWORD *)a2 + 6);
    *((_DWORD *)this + 18) |= 8u;
    *((_DWORD *)this + 6) = v17;
    int v12 = *((_DWORD *)a2 + 18);
    if ((v12 & 0x10) == 0)
    {
LABEL_17:
      if ((v12 & 0x20) == 0) {
        goto LABEL_18;
      }
      goto LABEL_27;
    }
LABEL_26:
    int v18 = *((_DWORD *)a2 + 7);
    *((_DWORD *)this + 18) |= 0x10u;
    *((_DWORD *)this + 7) = v18;
    int v12 = *((_DWORD *)a2 + 18);
    if ((v12 & 0x20) == 0)
    {
LABEL_18:
      if ((v12 & 0x40) == 0) {
        goto LABEL_19;
      }
      goto LABEL_28;
    }
LABEL_27:
    int v19 = *((_DWORD *)a2 + 8);
    *((_DWORD *)this + 18) |= 0x20u;
    *((_DWORD *)this + 8) = v19;
    int v12 = *((_DWORD *)a2 + 18);
    if ((v12 & 0x40) == 0)
    {
LABEL_19:
      if ((v12 & 0x80) == 0) {
        return;
      }
      goto LABEL_20;
    }
LABEL_28:
    int v20 = *((_DWORD *)a2 + 9);
    *((_DWORD *)this + 18) |= 0x40u;
    *((_DWORD *)this + 9) = v20;
    if ((*((_DWORD *)a2 + 18) & 0x80) == 0) {
      return;
    }
LABEL_20:
    int v13 = *((_DWORD *)a2 + 16);
    *((_DWORD *)this + 18) |= 0x80u;
    *((_DWORD *)this + 16) = v13;
  }
}

void sub_1C5BA4594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C5BA45A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C5BA4624(_Unwind_Exception *a1)
{
  int v3 = *(_DWORD *)(v1 + 52);
  if (v3 >= 1)
  {
    for (uint64_t i = 0; i < v3; ++i)
    {
      uint64_t v5 = *(void *)(*(void *)(v1 + 40) + 8 * i);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        int v3 = *(_DWORD *)(v1 + 52);
      }
    }
  }
  uint64_t v6 = *(void **)(v1 + 40);
  if (v6) {
    operator delete[](v6);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterLowPowerStats::~CommCenterLowPowerStats(awd::metrics::CommCenterLowPowerStats *this)
{
  *(void *)this = &unk_1F2111A18;
  int v2 = *((_DWORD *)this + 13);
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(*((void *)this + 5) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        int v2 = *((_DWORD *)this + 13);
      }
    }
  }
  uint64_t v5 = (void *)*((void *)this + 5);
  if (v5) {
    operator delete[](v5);
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;
  uint64_t vars8;

  *(void *)this = &unk_1F2111A18;
  int v2 = *((_DWORD *)this + 13);
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(*((void *)this + 5) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        int v2 = *((_DWORD *)this + 13);
      }
    }
  }
  uint64_t v5 = (void *)*((void *)this + 5);
  if (v5) {
    operator delete[](v5);
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t vars8;

  *(void *)this = &unk_1F2111A18;
  int v2 = *((_DWORD *)this + 13);
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(*((void *)this + 5) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        int v2 = *((_DWORD *)this + 13);
      }
    }
  }
  uint64_t v5 = (void *)*((void *)this + 5);
  if (v5) {
    operator delete[](v5);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);

  operator delete(v6);
}

uint64_t awd::metrics::CommCenterLowPowerStats::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 68) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterLowPowerStats::default_instance(awd::metrics::CommCenterLowPowerStats *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = awd::metrics::CommCenterLowPowerStats::default_instance_;
  if (!awd::metrics::CommCenterLowPowerStats::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterLowPowerStats::default_instance_;
  }
  return result;
}

double awd::metrics::CommCenterLowPowerStats::New(awd::metrics::CommCenterLowPowerStats *this)
{
  uint64_t v1 = (char *)operator new(0x50uLL);
  *(void *)uint64_t v1 = &unk_1F2111A18;
  *((void *)v1 + 8) = 0;
  *((_DWORD *)v1 + 18) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *((_DWORD *)v1 + 14) = 0;
  return result;
}

uint64_t awd::metrics::CommCenterLowPowerStats::Clear(uint64_t this)
{
  uint64_t v1 = this;
  if (*(unsigned char *)(this + 72))
  {
    *(_DWORD *)(this + 64) = 0;
    *(_OWORD *)(this + 8) = 0u;
    *(_OWORD *)(this + 24) = 0u;
  }
  if (*(int *)(this + 48) >= 1)
  {
    uint64_t v2 = 0;
    do
    {
      uint64_t v3 = *(void *)(*(void *)(v1 + 40) + 8 * v2);
      this = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 48));
  }
  *(_DWORD *)(v1 + 48) = 0;
  *(_DWORD *)(v1 + 72) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterLowPowerStats::MergePartialFromCodedStream(awd::metrics::CommCenterLowPowerStats *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unint64_t v47 = (unsigned int *)((char *)this + 16);
  uint64_t v4 = (unsigned int *)((char *)this + 20);
  uint64_t v5 = (unsigned int *)((char *)this + 24);
  uint64_t v6 = (unsigned int *)((char *)this + 28);
  uint64_t v7 = (unsigned int *)((char *)this + 32);
  int v8 = (unsigned int *)((char *)this + 36);
  int v9 = (unsigned int *)((char *)this + 64);
  BOOL v45 = (unint64_t *)((char *)this + 8);
  unint64_t v46 = (awd::metrics::CommCenterLowPowerStats *)((char *)this + 40);
LABEL_2:
  while (2)
  {
    uint64_t v10 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v10 >= *((void *)a2 + 2) || *v10 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v10;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v10 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_34;
        }
        uint64_t v14 = (char *)*((void *)a2 + 1);
        unint64_t v13 = *((void *)a2 + 2);
        if ((unint64_t)v14 >= v13 || *v14 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v45);
          if (!result) {
            return result;
          }
          int v15 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v13 = *((void *)a2 + 2);
          *((_DWORD *)this + 18) |= 1u;
          if ((unint64_t)v15 >= v13) {
            continue;
          }
        }
        else
        {
          unint64_t *v45 = *v14;
          int v15 = v14 + 1;
          *((void *)a2 + 1) = v15;
          *((_DWORD *)this + 18) |= 1u;
          if ((unint64_t)v15 >= v13) {
            continue;
          }
        }
        if (*v15 != 16) {
          continue;
        }
        int v16 = v15 + 1;
        *((void *)a2 + 1) = v16;
        if ((unint64_t)v16 >= v13) {
          goto LABEL_44;
        }
        goto LABEL_41;
      case 2u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_34;
        }
        int v16 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v13 = *((void *)a2 + 2);
        if ((unint64_t)v16 >= v13) {
          goto LABEL_44;
        }
LABEL_41:
        if ((char)*v16 < 0)
        {
LABEL_44:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v47);
          if (!result) {
            return result;
          }
          uint64_t v24 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v13 = *((void *)a2 + 2);
          *((_DWORD *)this + 18) |= 2u;
          if ((unint64_t)v24 < v13) {
            goto LABEL_46;
          }
          continue;
        }
        *unint64_t v47 = *v16;
        uint64_t v24 = v16 + 1;
        *((void *)a2 + 1) = v24;
        *((_DWORD *)this + 18) |= 2u;
        if ((unint64_t)v24 >= v13) {
          continue;
        }
LABEL_46:
        if (*v24 != 24) {
          continue;
        }
        int v17 = v24 + 1;
        *((void *)a2 + 1) = v17;
        if ((unint64_t)v17 >= v13) {
          goto LABEL_51;
        }
LABEL_48:
        if ((char)*v17 < 0)
        {
LABEL_51:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!result) {
            return result;
          }
          uint64_t v25 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v13 = *((void *)a2 + 2);
          *((_DWORD *)this + 18) |= 4u;
          if ((unint64_t)v25 < v13) {
            goto LABEL_53;
          }
          continue;
        }
        unsigned int *v4 = *v17;
        uint64_t v25 = v17 + 1;
        *((void *)a2 + 1) = v25;
        *((_DWORD *)this + 18) |= 4u;
        if ((unint64_t)v25 >= v13) {
          continue;
        }
LABEL_53:
        if (*v25 != 32) {
          continue;
        }
        int v18 = v25 + 1;
        *((void *)a2 + 1) = v18;
        if ((unint64_t)v18 >= v13) {
          goto LABEL_58;
        }
LABEL_55:
        if ((char)*v18 < 0)
        {
LABEL_58:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!result) {
            return result;
          }
          uint64_t v26 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v13 = *((void *)a2 + 2);
          *((_DWORD *)this + 18) |= 8u;
          if ((unint64_t)v26 < v13) {
            goto LABEL_60;
          }
          continue;
        }
        *uint64_t v5 = *v18;
        uint64_t v26 = v18 + 1;
        *((void *)a2 + 1) = v26;
        *((_DWORD *)this + 18) |= 8u;
        if ((unint64_t)v26 >= v13) {
          continue;
        }
LABEL_60:
        if (*v26 != 40) {
          continue;
        }
        int v19 = v26 + 1;
        *((void *)a2 + 1) = v19;
        if ((unint64_t)v19 >= v13) {
          goto LABEL_65;
        }
LABEL_62:
        if ((char)*v19 < 0)
        {
LABEL_65:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!result) {
            return result;
          }
          int v27 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v13 = *((void *)a2 + 2);
          *((_DWORD *)this + 18) |= 0x10u;
          if ((unint64_t)v27 < v13) {
            goto LABEL_67;
          }
          continue;
        }
        unsigned int *v6 = *v19;
        int v27 = v19 + 1;
        *((void *)a2 + 1) = v27;
        *((_DWORD *)this + 18) |= 0x10u;
        if ((unint64_t)v27 >= v13) {
          continue;
        }
LABEL_67:
        if (*v27 != 48) {
          continue;
        }
        int v20 = v27 + 1;
        *((void *)a2 + 1) = v20;
        if ((unint64_t)v20 >= v13) {
          goto LABEL_72;
        }
LABEL_69:
        if ((char)*v20 < 0)
        {
LABEL_72:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!result) {
            return result;
          }
          int v28 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v13 = *((void *)a2 + 2);
          *((_DWORD *)this + 18) |= 0x20u;
          if ((unint64_t)v28 < v13) {
            goto LABEL_74;
          }
          continue;
        }
        unsigned int *v7 = *v20;
        int v28 = v20 + 1;
        *((void *)a2 + 1) = v28;
        *((_DWORD *)this + 18) |= 0x20u;
        if ((unint64_t)v28 >= v13) {
          continue;
        }
LABEL_74:
        if (*v28 != 56) {
          continue;
        }
        uint64_t v21 = v28 + 1;
        *((void *)a2 + 1) = v21;
LABEL_76:
        if ((unint64_t)v21 >= v13 || (char)*v21 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
          if (!result) {
            return result;
          }
          int v29 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v13 = *((void *)a2 + 2);
          *((_DWORD *)this + 18) |= 0x40u;
          if ((unint64_t)v29 < v13) {
            goto LABEL_82;
          }
          continue;
        }
        unsigned int *v8 = *v21;
        int v29 = v21 + 1;
        *((void *)a2 + 1) = v29;
        *((_DWORD *)this + 18) |= 0x40u;
        if ((unint64_t)v29 >= v13) {
          continue;
        }
LABEL_82:
        if (*v29 != 64) {
          continue;
        }
        uint64_t v22 = v29 + 1;
        *((void *)a2 + 1) = v22;
LABEL_84:
        if ((unint64_t)v22 >= v13 || (char)*v22 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v9);
          if (!result) {
            return result;
          }
          BOOL v30 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v31 = *((void *)a2 + 2);
          *((_DWORD *)this + 18) |= 0x80u;
          if ((unint64_t)v30 < v31) {
            goto LABEL_90;
          }
          continue;
        }
        unsigned int *v9 = *v22;
        BOOL v30 = v22 + 1;
        *((void *)a2 + 1) = v30;
        *((_DWORD *)this + 18) |= 0x80u;
        if ((unint64_t)v30 >= v13) {
          continue;
        }
LABEL_90:
        if (*v30 != 74) {
          continue;
        }
        while (1)
        {
          *((void *)a2 + 1) = v30 + 1;
LABEL_92:
          int v32 = *((_DWORD *)this + 13);
          uint64_t v33 = *((int *)this + 12);
          if ((int)v33 >= v32)
          {
            if (v32 == *((_DWORD *)this + 14))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v46);
              int v32 = *((_DWORD *)this + 13);
            }
            *((_DWORD *)this + 13) = v32 + 1;
            uint64_t v35 = (awd::metrics::CommCenterMissedMTMessage *)operator new(0x20uLL);
            *(void *)uint64_t v35 = &unk_1F21118B0;
            *((void *)v35 + 1) = 0;
            *((void *)v35 + 2) = 0;
            *((void *)v35 + 3) = 0;
            uint64_t v36 = *((void *)this + 5);
            uint64_t v37 = *((int *)this + 12);
            *((_DWORD *)this + 12) = v37 + 1;
            *(void *)(v36 + 8 * v37) = v35;
          }
          else
          {
            uint64_t v34 = *((void *)this + 5);
            *((_DWORD *)this + 12) = v33 + 1;
            uint64_t v35 = *(awd::metrics::CommCenterMissedMTMessage **)(v34 + 8 * v33);
          }
          unsigned int v48 = -1431655766;
          xpc_object_t v38 = (char *)*((void *)a2 + 1);
          if ((unint64_t)v38 >= *((void *)a2 + 2) || *v38 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v48))return 0; {
          }
            }
          else
          {
            unsigned int v48 = *v38;
            *((void *)a2 + 1) = v38 + 1;
          }
          int v39 = *((_DWORD *)a2 + 14);
          int v40 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v39 + 1;
          if (v39 >= v40) {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
          if (!awd::metrics::CommCenterMissedMTMessage::MergePartialFromCodedStream(v35, a2)
            || !*((unsigned char *)a2 + 36))
          {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
          int v41 = *((_DWORD *)a2 + 14);
          BOOL v42 = __OFSUB__(v41, 1);
          int v43 = v41 - 1;
          if (v43 < 0 == v42) {
            *((_DWORD *)a2 + 14) = v43;
          }
          BOOL v30 = (unsigned char *)*((void *)a2 + 1);
          uint64_t v44 = (unsigned char *)*((void *)a2 + 2);
          if (v30 >= v44 || *v30 != 74)
          {
            if (v30 == v44 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
            {
              *((_DWORD *)a2 + 8) = 0;
              uint64_t result = 1;
              *((unsigned char *)a2 + 36) = 1;
              return result;
            }
            goto LABEL_2;
          }
        }
      case 3u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_34;
        }
        int v17 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v13 = *((void *)a2 + 2);
        if ((unint64_t)v17 >= v13) {
          goto LABEL_51;
        }
        goto LABEL_48;
      case 4u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_34;
        }
        int v18 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v13 = *((void *)a2 + 2);
        if ((unint64_t)v18 >= v13) {
          goto LABEL_58;
        }
        goto LABEL_55;
      case 5u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_34;
        }
        int v19 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v13 = *((void *)a2 + 2);
        if ((unint64_t)v19 >= v13) {
          goto LABEL_65;
        }
        goto LABEL_62;
      case 6u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_34;
        }
        int v20 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v13 = *((void *)a2 + 2);
        if ((unint64_t)v20 >= v13) {
          goto LABEL_72;
        }
        goto LABEL_69;
      case 7u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_34;
        }
        uint64_t v21 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v13 = *((void *)a2 + 2);
        goto LABEL_76;
      case 8u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_34;
        }
        uint64_t v22 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v13 = *((void *)a2 + 2);
        goto LABEL_84;
      case 9u:
        int v12 = TagFallback & 7;
        if (v12 != 2) {
          goto LABEL_34;
        }
        goto LABEL_92;
      default:
        int v12 = TagFallback & 7;
LABEL_34:
        if (v12 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t awd::metrics::CommCenterLowPowerStats::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 72);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 72);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 16), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned int *)(v5 + 20), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned int *)(v5 + 24), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned int *)(v5 + 28), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned int *)(v5 + 32), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(unsigned int *)(v5 + 36), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 72) & 0x80) == 0)
  {
LABEL_9:
    if (*(int *)(v5 + 48) < 1) {
      return this;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned int *)(v5 + 64), (uint64_t)a2, a4);
  if (*(int *)(v5 + 48) < 1) {
    return this;
  }
LABEL_19:
  uint64_t v7 = 0;
  do
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(void *)(*(void *)(v5 + 40) + 8 * v7++), a2, a4);
  while (v7 < *(int *)(v5 + 48));
  return this;
}

uint64_t awd::metrics::CommCenterLowPowerStats::ByteSize(awd::metrics::CommCenterLowPowerStats *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 72);
  if (!(_BYTE)v2)
  {
    int v4 = *((_DWORD *)this + 12);
    uint64_t v5 = v4;
    if (v4 < 1) {
      goto LABEL_48;
    }
    goto LABEL_44;
  }
  if (*((unsigned char *)this + 72))
  {
    int v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                     + 1))
       + 1;
    int v2 = *((_DWORD *)this + 18);
    if ((v2 & 2) == 0) {
      goto LABEL_12;
    }
  }
  else
  {
    int v3 = 0;
    if ((*((unsigned char *)this + 72) & 2) == 0) {
      goto LABEL_12;
    }
  }
  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
  if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6) + 1;
    int v2 = *((_DWORD *)this + 18);
  }
  else
  {
    int v7 = 2;
  }
  v3 += v7;
LABEL_12:
  if ((v2 & 4) != 0)
  {
    int v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
    if (v9 >= 0x80)
    {
      int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9);
      int v2 = *((_DWORD *)this + 18);
      v3 += v10 + 1;
      if ((v2 & 8) != 0) {
        goto LABEL_24;
      }
    }
    else
    {
      v3 += 2;
      if ((v2 & 8) != 0) {
        goto LABEL_24;
      }
    }
LABEL_14:
    if ((v2 & 0x10) == 0) {
      goto LABEL_15;
    }
LABEL_28:
    unint64_t v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
    if (v13 >= 0x80)
    {
      int v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13);
      int v2 = *((_DWORD *)this + 18);
      v3 += v14 + 1;
      if ((v2 & 0x20) != 0) {
        goto LABEL_32;
      }
    }
    else
    {
      v3 += 2;
      if ((v2 & 0x20) != 0) {
        goto LABEL_32;
      }
    }
LABEL_16:
    if ((v2 & 0x40) == 0) {
      goto LABEL_17;
    }
LABEL_36:
    int v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 9);
    if (v17 >= 0x80)
    {
      v3 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17) + 1;
      if ((*((_DWORD *)this + 18) & 0x80) != 0) {
        goto LABEL_40;
      }
    }
    else
    {
      v3 += 2;
      if ((v2 & 0x80) != 0) {
        goto LABEL_40;
      }
    }
LABEL_18:
    int v8 = *((_DWORD *)this + 12);
    uint64_t v5 = (v8 + v3);
    if (v8 < 1) {
      goto LABEL_48;
    }
    goto LABEL_44;
  }
  if ((v2 & 8) == 0) {
    goto LABEL_14;
  }
LABEL_24:
  uint64_t v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  if (v11 >= 0x80)
  {
    int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11);
    int v2 = *((_DWORD *)this + 18);
    v3 += v12 + 1;
    if ((v2 & 0x10) != 0) {
      goto LABEL_28;
    }
  }
  else
  {
    v3 += 2;
    if ((v2 & 0x10) != 0) {
      goto LABEL_28;
    }
  }
LABEL_15:
  if ((v2 & 0x20) == 0) {
    goto LABEL_16;
  }
LABEL_32:
  int v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
  if (v15 >= 0x80)
  {
    int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15);
    int v2 = *((_DWORD *)this + 18);
    v3 += v16 + 1;
    if ((v2 & 0x40) != 0) {
      goto LABEL_36;
    }
  }
  else
  {
    v3 += 2;
    if ((v2 & 0x40) != 0) {
      goto LABEL_36;
    }
  }
LABEL_17:
  if ((v2 & 0x80) == 0) {
    goto LABEL_18;
  }
LABEL_40:
  int v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 16);
  if (v18 >= 0x80)
  {
    int v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18);
    int v21 = *((_DWORD *)this + 12);
    uint64_t v5 = (v21 + v20 + 1 + v3);
    if (v21 < 1) {
      goto LABEL_48;
    }
  }
  else
  {
    int v19 = *((_DWORD *)this + 12);
    uint64_t v5 = (v19 + v3 + 2);
    if (v19 < 1) {
      goto LABEL_48;
    }
  }
LABEL_44:
  uint64_t v22 = 0;
  do
  {
    while (1)
    {
      unint64_t v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::metrics::CommCenterMissedMTMessage::ByteSize(*(awd::metrics::CommCenterMissedMTMessage **)(*((void *)this + 5) + 8 * v22));
      if (v23 < 0x80) {
        break;
      }
      uint64_t v5 = v23
         + v5
         + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23);
      if (++v22 >= *((int *)this + 12)) {
        goto LABEL_48;
      }
    }
    uint64_t v5 = (v23 + v5 + 1);
    ++v22;
  }
  while (v22 < *((int *)this + 12));
LABEL_48:
  *((_DWORD *)this + 17) = v5;
  return v5;
}

void awd::metrics::CommCenterLowPowerStats::CopyFrom(awd::metrics::CommCenterLowPowerStats *this, const awd::metrics::CommCenterLowPowerStats *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterLowPowerStats *))(*(void *)this + 32))(this);
    awd::metrics::CommCenterLowPowerStats::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterLowPowerStats::IsInitialized(awd::metrics::CommCenterLowPowerStats *this)
{
  return 1;
}

uint64_t awd::metrics::CommCenterLowPowerStats::Swap(uint64_t this, awd::metrics::CommCenterLowPowerStats *a2)
{
  if (a2 != (awd::metrics::CommCenterLowPowerStats *)this)
  {
    uint64_t v3 = this;
    uint64_t v4 = *(void *)(this + 8);
    *(void *)(this + 8) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 20);
    *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 28);
    *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 32);
    *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 36);
    *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 64);
    *(_DWORD *)(this + 64) = *((_DWORD *)a2 + 16);
    *((_DWORD *)a2 + 16) = v4;
    this = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    int v5 = *(_DWORD *)(v3 + 72);
    *(_DWORD *)(v3 + 72) = *((_DWORD *)a2 + 18);
    *((_DWORD *)a2 + 18) = v5;
    int v6 = *(_DWORD *)(v3 + 68);
    *(_DWORD *)(v3 + 68) = *((_DWORD *)a2 + 17);
    *((_DWORD *)a2 + 17) = v6;
  }
  return this;
}

char *awd::metrics::CommCenterLowPowerStats::GetTypeName@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1C5BCAD70;
  strcpy(result, "awd.metrics.CommCenterLowPowerStats");
  return result;
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::SharedCtor(uint64_t this)
{
  uint64_t v1 = MEMORY[0x1E4FBA920];
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = v1;
  *(_WORD *)(this + 52) = 0;
  *(_DWORD *)(this + 48) = 0;
  *(void *)(this + 24) = v1;
  *(void *)(this + 32) = v1;
  *(void *)(this + 40) = v1;
  *(void *)(this + 56) = v1;
  *(void *)(this + 64) = v1;
  *(void *)(this + 72) = v1;
  *(void *)(this + 80) = 0;
  *(void *)(this + 88) = 0;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

awd::metrics::CommCenterWakeReasonInfo *awd::metrics::CommCenterWakeReasonInfo::CommCenterWakeReasonInfo(awd::metrics::CommCenterWakeReasonInfo *this, const awd::metrics::CommCenterWakeReasonInfo *a2)
{
  *(void *)this = &unk_1F2111A90;
  *((void *)this + 1) = 0;
  uint64_t v3 = MEMORY[0x1E4FBA920];
  *((_WORD *)this + 26) = 0;
  *((void *)this + 2) = v3;
  *((void *)this + 3) = v3;
  *((_DWORD *)this + 12) = 0;
  *((void *)this + 4) = v3;
  *((void *)this + 5) = v3;
  *((void *)this + 7) = v3;
  *((void *)this + 8) = v3;
  *((void *)this + 9) = v3;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
  awd::metrics::CommCenterWakeReasonInfo::MergeFrom(this, a2);
  return this;
}

{
  uint64_t v3;

  *(void *)this = &unk_1F2111A90;
  *((void *)this + 1) = 0;
  uint64_t v3 = MEMORY[0x1E4FBA920];
  *((_WORD *)this + 26) = 0;
  *((void *)this + 2) = v3;
  *((void *)this + 3) = v3;
  *((_DWORD *)this + 12) = 0;
  *((void *)this + 4) = v3;
  *((void *)this + 5) = v3;
  *((void *)this + 7) = v3;
  *((void *)this + 8) = v3;
  *((void *)this + 9) = v3;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
  awd::metrics::CommCenterWakeReasonInfo::MergeFrom(this, a2);
  return this;
}

void sub_1C5BA570C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterWakeReasonInfo::MergeFrom(awd::metrics::CommCenterWakeReasonInfo *this, const awd::metrics::CommCenterWakeReasonInfo *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v60);
  }
  LOBYTE(v4) = *((unsigned char *)a2 + 96);
  if (!(_BYTE)v4)
  {
LABEL_91:
    int v39 = *((_DWORD *)a2 + 24);
    if ((v39 & 0xFF00) == 0) {
      return;
    }
    goto LABEL_92;
  }
  if (*((unsigned char *)a2 + 96))
  {
    uint64_t v5 = *((void *)a2 + 1);
    *((_DWORD *)this + 24) |= 1u;
    *((void *)this + 1) = v5;
    int v4 = *((_DWORD *)a2 + 24);
  }
  int v6 = (void **)MEMORY[0x1E4FBA920];
  if ((v4 & 2) != 0)
  {
    int v7 = (void **)*((void *)a2 + 2);
    *((_DWORD *)this + 24) |= 2u;
    int v8 = (void **)*((void *)this + 2);
    if (v8 == v6)
    {
      int v8 = (void **)operator new(0x18uLL);
      v8[1] = 0;
      uint64_t v8[2] = 0;
      unsigned int *v8 = 0;
      *((void *)this + 2) = v8;
    }
    if (v8 != v7)
    {
      char v9 = *((unsigned char *)v7 + 23);
      if ((*((char *)v8 + 23) & 0x80000000) == 0)
      {
        if ((*((unsigned char *)v7 + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v8, *v7, (size_t)v7[1]);
          int v11 = *((_DWORD *)a2 + 24);
          if ((v11 & 4) == 0) {
            goto LABEL_23;
          }
        }
        else
        {
          long long v10 = *(_OWORD *)v7;
          uint64_t v8[2] = v7[2];
          *(_OWORD *)int v8 = v10;
          int v11 = *((_DWORD *)a2 + 24);
          if ((v11 & 4) == 0) {
            goto LABEL_23;
          }
        }
        goto LABEL_22;
      }
      if (v9 >= 0) {
        int v12 = v7;
      }
      else {
        int v12 = *v7;
      }
      if (v9 >= 0) {
        size_t v13 = *((unsigned __int8 *)v7 + 23);
      }
      else {
        size_t v13 = (size_t)v7[1];
      }
      std::string::__assign_no_alias<false>(v8, v12, v13);
    }
  }
  int v11 = *((_DWORD *)a2 + 24);
  if ((v11 & 4) != 0)
  {
LABEL_22:
    char v14 = *((unsigned char *)a2 + 52);
    *((_DWORD *)this + 24) |= 4u;
    *((unsigned char *)this + 52) = v14;
    int v11 = *((_DWORD *)a2 + 24);
  }
LABEL_23:
  if ((v11 & 8) != 0)
  {
    int v15 = (void **)*((void *)a2 + 3);
    *((_DWORD *)this + 24) |= 8u;
    int v16 = (void **)*((void *)this + 3);
    if (v16 == v6)
    {
      int v16 = (void **)operator new(0x18uLL);
      v16[1] = 0;
      v16[2] = 0;
      *int v16 = 0;
      *((void *)this + 3) = v16;
    }
    if (v16 != v15)
    {
      char v17 = *((unsigned char *)v15 + 23);
      if ((*((char *)v16 + 23) & 0x80000000) == 0)
      {
        if ((*((unsigned char *)v15 + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v16, *v15, (size_t)v15[1]);
          int v19 = *((_DWORD *)a2 + 24);
          if ((v19 & 0x10) == 0) {
            goto LABEL_40;
          }
        }
        else
        {
          long long v18 = *(_OWORD *)v15;
          v16[2] = v15[2];
          *(_OWORD *)int v16 = v18;
          int v19 = *((_DWORD *)a2 + 24);
          if ((v19 & 0x10) == 0) {
            goto LABEL_40;
          }
        }
        goto LABEL_39;
      }
      if (v17 >= 0) {
        int v20 = v15;
      }
      else {
        int v20 = *v15;
      }
      if (v17 >= 0) {
        size_t v21 = *((unsigned __int8 *)v15 + 23);
      }
      else {
        size_t v21 = (size_t)v15[1];
      }
      std::string::__assign_no_alias<false>(v16, v20, v21);
    }
  }
  int v19 = *((_DWORD *)a2 + 24);
  if ((v19 & 0x10) != 0)
  {
LABEL_39:
    int v22 = *((_DWORD *)a2 + 12);
    *((_DWORD *)this + 24) |= 0x10u;
    *((_DWORD *)this + 12) = v22;
    int v19 = *((_DWORD *)a2 + 24);
  }
LABEL_40:
  if ((v19 & 0x20) == 0) {
    goto LABEL_55;
  }
  unint64_t v23 = (void **)*((void *)a2 + 4);
  *((_DWORD *)this + 24) |= 0x20u;
  uint64_t v24 = (void **)*((void *)this + 4);
  if (v24 == v6)
  {
    uint64_t v24 = (void **)operator new(0x18uLL);
    v24[1] = 0;
    void v24[2] = 0;
    unsigned char *v24 = 0;
    *((void *)this + 4) = v24;
  }
  if (v24 == v23)
  {
LABEL_55:
    if ((*((unsigned char *)a2 + 96) & 0x40) == 0) {
      goto LABEL_76;
    }
    goto LABEL_56;
  }
  char v25 = *((unsigned char *)v23 + 23);
  if (*((char *)v24 + 23) < 0)
  {
    if (v25 >= 0) {
      int v27 = v23;
    }
    else {
      int v27 = *v23;
    }
    if (v25 >= 0) {
      size_t v28 = *((unsigned __int8 *)v23 + 23);
    }
    else {
      size_t v28 = (size_t)v23[1];
    }
    std::string::__assign_no_alias<false>(v24, v27, v28);
    goto LABEL_55;
  }
  if ((*((unsigned char *)v23 + 23) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v24, *v23, (size_t)v23[1]);
    if ((*((unsigned char *)a2 + 96) & 0x40) == 0) {
      goto LABEL_76;
    }
  }
  else
  {
    long long v26 = *(_OWORD *)v23;
    void v24[2] = v23[2];
    *(_OWORD *)uint64_t v24 = v26;
    if ((*((unsigned char *)a2 + 96) & 0x40) == 0) {
      goto LABEL_76;
    }
  }
LABEL_56:
  int v29 = (void **)*((void *)a2 + 5);
  *((_DWORD *)this + 24) |= 0x40u;
  BOOL v30 = (void **)*((void *)this + 5);
  if (v30 == v6)
  {
    BOOL v30 = (void **)operator new(0x18uLL);
    v30[1] = 0;
    v30[2] = 0;
    *BOOL v30 = 0;
    *((void *)this + 5) = v30;
  }
  if (v30 != v29)
  {
    char v31 = *((unsigned char *)v29 + 23);
    if (*((char *)v30 + 23) < 0)
    {
      if (v31 >= 0) {
        uint64_t v33 = v29;
      }
      else {
        uint64_t v33 = *v29;
      }
      if (v31 >= 0) {
        size_t v34 = *((unsigned __int8 *)v29 + 23);
      }
      else {
        size_t v34 = (size_t)v29[1];
      }
      std::string::__assign_no_alias<false>(v30, v33, v34);
    }
    else if ((*((unsigned char *)v29 + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v30, *v29, (size_t)v29[1]);
    }
    else
    {
      long long v32 = *(_OWORD *)v29;
      v30[2] = v29[2];
      *(_OWORD *)BOOL v30 = v32;
    }
  }
LABEL_76:
  if ((*((unsigned char *)a2 + 96) & 0x80) == 0) {
    goto LABEL_91;
  }
  uint64_t v35 = (void **)*((void *)a2 + 7);
  *((_DWORD *)this + 24) |= 0x80u;
  uint64_t v36 = (void **)*((void *)this + 7);
  if (v36 == v6)
  {
    uint64_t v36 = (void **)operator new(0x18uLL);
    v36[1] = 0;
    v36[2] = 0;
    *uint64_t v36 = 0;
    *((void *)this + 7) = v36;
  }
  if (v36 == v35) {
    goto LABEL_91;
  }
  char v37 = *((unsigned char *)v35 + 23);
  if (*((char *)v36 + 23) < 0)
  {
    if (v37 >= 0) {
      int v40 = v35;
    }
    else {
      int v40 = *v35;
    }
    if (v37 >= 0) {
      size_t v41 = *((unsigned __int8 *)v35 + 23);
    }
    else {
      size_t v41 = (size_t)v35[1];
    }
    std::string::__assign_no_alias<false>(v36, v40, v41);
    goto LABEL_91;
  }
  if ((*((unsigned char *)v35 + 23) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v36, *v35, (size_t)v35[1]);
    int v39 = *((_DWORD *)a2 + 24);
    if ((v39 & 0xFF00) == 0) {
      return;
    }
  }
  else
  {
    long long v38 = *(_OWORD *)v35;
    v36[2] = v35[2];
    *(_OWORD *)uint64_t v36 = v38;
    int v39 = *((_DWORD *)a2 + 24);
    if ((v39 & 0xFF00) == 0) {
      return;
    }
  }
LABEL_92:
  if ((v39 & 0x100) != 0)
  {
    BOOL v42 = (void **)*((void *)a2 + 8);
    *((_DWORD *)this + 24) |= 0x100u;
    int v43 = (void **)*((void *)this + 8);
    if (v43 == (void **)MEMORY[0x1E4FBA920])
    {
      int v43 = (void **)operator new(0x18uLL);
      v43[1] = 0;
      v43[2] = 0;
      *int v43 = 0;
      *((void *)this + 8) = v43;
    }
    if (v43 != v42)
    {
      char v44 = *((unsigned char *)v42 + 23);
      if ((*((char *)v43 + 23) & 0x80000000) == 0)
      {
        if ((*((unsigned char *)v42 + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v43, *v42, (size_t)v42[1]);
          int v46 = *((_DWORD *)a2 + 24);
          if ((v46 & 0x200) == 0) {
            goto LABEL_109;
          }
        }
        else
        {
          long long v45 = *(_OWORD *)v42;
          v43[2] = v42[2];
          *(_OWORD *)int v43 = v45;
          int v46 = *((_DWORD *)a2 + 24);
          if ((v46 & 0x200) == 0) {
            goto LABEL_109;
          }
        }
        goto LABEL_108;
      }
      if (v44 >= 0) {
        unint64_t v47 = v42;
      }
      else {
        unint64_t v47 = *v42;
      }
      if (v44 >= 0) {
        size_t v48 = *((unsigned __int8 *)v42 + 23);
      }
      else {
        size_t v48 = (size_t)v42[1];
      }
      std::string::__assign_no_alias<false>(v43, v47, v48);
    }
  }
  int v46 = *((_DWORD *)a2 + 24);
  if ((v46 & 0x200) != 0)
  {
LABEL_108:
    int v49 = *((_DWORD *)a2 + 20);
    *((_DWORD *)this + 24) |= 0x200u;
    *((_DWORD *)this + 20) = v49;
    int v46 = *((_DWORD *)a2 + 24);
  }
LABEL_109:
  if ((v46 & 0x400) == 0) {
    goto LABEL_124;
  }
  long long v50 = (void **)*((void *)a2 + 9);
  *((_DWORD *)this + 24) |= 0x400u;
  uint64_t v51 = (void **)*((void *)this + 9);
  if (v51 == (void **)MEMORY[0x1E4FBA920])
  {
    uint64_t v51 = (void **)operator new(0x18uLL);
    v51[1] = 0;
    void v51[2] = 0;
    std::__shared_weak_count *v51 = 0;
    *((void *)this + 9) = v51;
  }
  if (v51 == v50)
  {
LABEL_124:
    int v54 = *((_DWORD *)a2 + 24);
    if ((v54 & 0x800) != 0) {
      goto LABEL_133;
    }
    goto LABEL_125;
  }
  char v52 = *((unsigned char *)v50 + 23);
  if (*((char *)v51 + 23) < 0)
  {
    if (v52 >= 0) {
      unint64_t v55 = v50;
    }
    else {
      unint64_t v55 = *v50;
    }
    if (v52 >= 0) {
      size_t v56 = *((unsigned __int8 *)v50 + 23);
    }
    else {
      size_t v56 = (size_t)v50[1];
    }
    std::string::__assign_no_alias<false>(v51, v55, v56);
    goto LABEL_124;
  }
  if ((*((unsigned char *)v50 + 23) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v51, *v50, (size_t)v50[1]);
    int v54 = *((_DWORD *)a2 + 24);
    if ((v54 & 0x800) != 0) {
      goto LABEL_133;
    }
LABEL_125:
    if ((v54 & 0x1000) != 0) {
      goto LABEL_134;
    }
    goto LABEL_126;
  }
  long long v53 = *(_OWORD *)v50;
  void v51[2] = v50[2];
  *(_OWORD *)uint64_t v51 = v53;
  int v54 = *((_DWORD *)a2 + 24);
  if ((v54 & 0x800) == 0) {
    goto LABEL_125;
  }
LABEL_133:
  int v57 = *((_DWORD *)a2 + 21);
  *((_DWORD *)this + 24) |= 0x800u;
  *((_DWORD *)this + 21) = v57;
  int v54 = *((_DWORD *)a2 + 24);
  if ((v54 & 0x1000) != 0)
  {
LABEL_134:
    int v58 = *((_DWORD *)a2 + 22);
    *((_DWORD *)this + 24) |= 0x1000u;
    *((_DWORD *)this + 22) = v58;
    if ((*((_DWORD *)a2 + 24) & 0x2000) != 0) {
      goto LABEL_135;
    }
    return;
  }
LABEL_126:
  if ((v54 & 0x2000) != 0)
  {
LABEL_135:
    char v59 = *((unsigned char *)a2 + 53);
    *((_DWORD *)this + 24) |= 0x2000u;
    *((unsigned char *)this + 53) = v59;
  }
}

void sub_1C5BA5CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C5BA5CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C5BA5D4C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterWakeReasonInfo::~CommCenterWakeReasonInfo(awd::metrics::CommCenterWakeReasonInfo *this)
{
  *(void *)this = &unk_1F2111A90;
  awd::metrics::CommCenterWakeReasonInfo::SharedDtor(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F2111A90;
  awd::metrics::CommCenterWakeReasonInfo::SharedDtor(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F2111A90;
  awd::metrics::CommCenterWakeReasonInfo::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);

  operator delete(v2);
}

void awd::metrics::CommCenterWakeReasonInfo::SharedDtor(awd::metrics::CommCenterWakeReasonInfo *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = MEMORY[0x1E4FBA920];
  if (v2 == MEMORY[0x1E4FBA920] || v2 == 0)
  {
    uint64_t v5 = *((void *)this + 3);
    if (v5 != MEMORY[0x1E4FBA920] && v5 != 0) {
      goto LABEL_29;
    }
LABEL_11:
    uint64_t v7 = *((void *)this + 4);
    if (v7 != v3 && v7 != 0) {
      goto LABEL_35;
    }
LABEL_16:
    uint64_t v9 = *((void *)this + 5);
    if (v9 != v3 && v9 != 0) {
      goto LABEL_41;
    }
LABEL_21:
    uint64_t v11 = *((void *)this + 7);
    if (v11 == v3) {
      goto LABEL_48;
    }
    goto LABEL_44;
  }
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  operator delete((void *)v2);
  uint64_t v5 = *((void *)this + 3);
  if (v5 == v3 || v5 == 0) {
    goto LABEL_11;
  }
LABEL_29:
  if (*(char *)(v5 + 23) < 0) {
    operator delete(*(void **)v5);
  }
  operator delete((void *)v5);
  uint64_t v7 = *((void *)this + 4);
  if (v7 == v3 || v7 == 0) {
    goto LABEL_16;
  }
LABEL_35:
  if (*(char *)(v7 + 23) < 0) {
    operator delete(*(void **)v7);
  }
  operator delete((void *)v7);
  uint64_t v9 = *((void *)this + 5);
  if (v9 == v3 || v9 == 0) {
    goto LABEL_21;
  }
LABEL_41:
  if (*(char *)(v9 + 23) < 0) {
    operator delete(*(void **)v9);
  }
  operator delete((void *)v9);
  uint64_t v11 = *((void *)this + 7);
  if (v11 != v3)
  {
LABEL_44:
    if (v11)
    {
      if (*(char *)(v11 + 23) < 0) {
        operator delete(*(void **)v11);
      }
      operator delete((void *)v11);
    }
  }
LABEL_48:
  uint64_t v15 = *((void *)this + 8);
  if (v15 != v3 && v15)
  {
    if (*(char *)(v15 + 23) < 0) {
      operator delete(*(void **)v15);
    }
    operator delete((void *)v15);
  }
  uint64_t v16 = *((void *)this + 9);
  if (v16 != v3 && v16)
  {
    if (*(char *)(v16 + 23) < 0)
    {
      operator delete(*(void **)v16);
      char v17 = (void *)v16;
    }
    else
    {
      char v17 = (void *)v16;
    }
    operator delete(v17);
  }
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 92) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::default_instance(awd::metrics::CommCenterWakeReasonInfo *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = awd::metrics::CommCenterWakeReasonInfo::default_instance_;
  if (!awd::metrics::CommCenterWakeReasonInfo::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterWakeReasonInfo::default_instance_;
  }
  return result;
}

void *awd::metrics::CommCenterWakeReasonInfo::New(awd::metrics::CommCenterWakeReasonInfo *this)
{
  uint64_t result = operator new(0x68uLL);
  *uint64_t result = &unk_1F2111A90;
  result[1] = 0;
  uint64_t v2 = MEMORY[0x1E4FBA920];
  *((_WORD *)result + 26) = 0;
  result[2] = v2;
  result[3] = v2;
  *((_DWORD *)result + 12) = 0;
  result[4] = v2;
  result[5] = v2;
  result[7] = v2;
  result[8] = v2;
  result[9] = v2;
  result[10] = 0;
  result[11] = 0;
  *((_DWORD *)result + 24) = 0;
  return result;
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::Clear(uint64_t this)
{
  char v1 = *(unsigned char *)(this + 96);
  if (!v1) {
    goto LABEL_28;
  }
  *(void *)(this + 8) = 0;
  uint64_t v2 = MEMORY[0x1E4FBA920];
  if ((v1 & 2) == 0 || (uint64_t v3 = *(void *)(this + 16), v3 == MEMORY[0x1E4FBA920]))
  {
LABEL_6:
    *(unsigned char *)(this + 52) = 0;
    if ((*(unsigned char *)(this + 96) & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_7;
  }
  if ((*(char *)(v3 + 23) & 0x80000000) == 0)
  {
    *(unsigned char *)uint64_t v3 = 0;
    *(unsigned char *)(v3 + 23) = 0;
    goto LABEL_6;
  }
  **(unsigned char **)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  *(unsigned char *)(this + 52) = 0;
  if ((*(unsigned char *)(this + 96) & 8) == 0) {
    goto LABEL_13;
  }
LABEL_7:
  uint64_t v4 = *(void *)(this + 24);
  if (v4 != v2)
  {
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
    }
  }
LABEL_13:
  *(_DWORD *)(this + 48) = 0;
  if ((*(unsigned char *)(this + 96) & 0x20) == 0 || (uint64_t v5 = *(void *)(this + 32), v5 == v2))
  {
LABEL_17:
    if ((*(unsigned char *)(this + 96) & 0x40) == 0) {
      goto LABEL_24;
    }
    goto LABEL_18;
  }
  if ((*(char *)(v5 + 23) & 0x80000000) == 0)
  {
    *(unsigned char *)uint64_t v5 = 0;
    *(unsigned char *)(v5 + 23) = 0;
    goto LABEL_17;
  }
  **(unsigned char **)uint64_t v5 = 0;
  *(void *)(v5 + 8) = 0;
  if ((*(unsigned char *)(this + 96) & 0x40) == 0) {
    goto LABEL_24;
  }
LABEL_18:
  uint64_t v6 = *(void *)(this + 40);
  if (v6 != v2)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      **(unsigned char **)uint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v6 = 0;
      *(unsigned char *)(v6 + 23) = 0;
    }
  }
LABEL_24:
  if ((*(unsigned char *)(this + 96) & 0x80) != 0)
  {
    uint64_t v7 = *(void *)(this + 56);
    if (v7 != v2)
    {
      if (*(char *)(v7 + 23) < 0)
      {
        **(unsigned char **)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        int v8 = *(_DWORD *)(this + 96);
        if ((v8 & 0xFF00) != 0) {
          goto LABEL_29;
        }
LABEL_39:
        *(_DWORD *)(this + 96) = 0;
        return this;
      }
      *(unsigned char *)uint64_t v7 = 0;
      *(unsigned char *)(v7 + 23) = 0;
    }
  }
LABEL_28:
  int v8 = *(_DWORD *)(this + 96);
  if ((v8 & 0xFF00) == 0) {
    goto LABEL_39;
  }
LABEL_29:
  if ((v8 & 0x100) != 0)
  {
    uint64_t v9 = *(void *)(this + 64);
    if (v9 != MEMORY[0x1E4FBA920])
    {
      if (*(char *)(v9 + 23) < 0)
      {
        **(unsigned char **)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        *(_DWORD *)(this + 80) = 0;
        if ((*(unsigned char *)(this + 97) & 4) == 0) {
          goto LABEL_41;
        }
        goto LABEL_34;
      }
      *(unsigned char *)uint64_t v9 = 0;
      *(unsigned char *)(v9 + 23) = 0;
    }
  }
  *(_DWORD *)(this + 80) = 0;
  if ((*(unsigned char *)(this + 97) & 4) == 0)
  {
LABEL_41:
    *(_DWORD *)(this + 84) = 0;
    *(_DWORD *)(this + 88) = 0;
    *(unsigned char *)(this + 53) = 0;
    *(_DWORD *)(this + 96) = 0;
    return this;
  }
LABEL_34:
  uint64_t v10 = *(void *)(this + 72);
  if (v10 == MEMORY[0x1E4FBA920]) {
    goto LABEL_41;
  }
  if (*(char *)(v10 + 23) < 0)
  {
    **(unsigned char **)uint64_t v10 = 0;
    *(void *)(v10 + 8) = 0;
  }
  else
  {
    *(unsigned char *)uint64_t v10 = 0;
    *(unsigned char *)(v10 + 23) = 0;
  }
  *(_DWORD *)(this + 84) = 0;
  *(_DWORD *)(this + 88) = 0;
  *(unsigned char *)(this + 53) = 0;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::MergePartialFromCodedStream(awd::metrics::CommCenterWakeReasonInfo *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4 = (unint64_t *)((char *)this + 8);
  uint64_t v5 = (unsigned int *)((char *)this + 48);
  uint64_t v6 = (unsigned int *)((char *)this + 80);
  uint64_t v7 = (unsigned int *)((char *)this + 84);
  int v8 = (unsigned int *)((char *)this + 88);
  uint64_t v9 = MEMORY[0x1E4FBA920];
  while (2)
  {
    uint64_t v10 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v10 >= *((void *)a2 + 2) || *v10 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v10;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v10 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_89;
        }
        char v14 = (char *)*((void *)a2 + 1);
        unint64_t v13 = *((void *)a2 + 2);
        if ((unint64_t)v14 < v13 && (*v14 & 0x80000000) == 0)
        {
          unint64_t *v4 = *v14;
          uint64_t v15 = v14 + 1;
          *((void *)a2 + 1) = v15;
          int v16 = *((_DWORD *)this + 24) | 1;
          *((_DWORD *)this + 24) = v16;
          if ((unint64_t)v15 >= v13) {
            continue;
          }
          goto LABEL_132;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
        if (result)
        {
          uint64_t v15 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v55 = *((void *)a2 + 2);
          int v16 = *((_DWORD *)this + 24) | 1;
          *((_DWORD *)this + 24) = v16;
          if ((unint64_t)v15 >= v55) {
            continue;
          }
LABEL_132:
          if (*v15 != 18) {
            continue;
          }
          *((void *)a2 + 1) = v15 + 1;
          *((_DWORD *)this + 24) = v16 | 2;
          if (*((void *)this + 2) != v9) {
            goto LABEL_17;
          }
          goto LABEL_16;
        }
        break;
      case 2u:
        int v12 = TagFallback & 7;
        if (v12 != 2) {
          goto LABEL_89;
        }
        *((_DWORD *)this + 24) |= 2u;
        if (*((void *)this + 2) == v9)
        {
LABEL_16:
          char v17 = operator new(0x18uLL);
          v17[1] = 0;
          dispatch_object_t v17[2] = 0;
          void *v17 = 0;
          *((void *)this + 2) = v17;
        }
LABEL_17:
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        int v20 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v19 = *((void *)a2 + 2);
        if ((unint64_t)v20 >= v19 || *v20 != 24) {
          continue;
        }
        size_t v21 = v20 + 1;
        *((void *)a2 + 1) = v21;
LABEL_23:
        unsigned int v57 = -1431655766;
        if ((unint64_t)v21 >= v19 || *v21 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v57);
          if (!result) {
            return result;
          }
          unsigned int v22 = v57;
          unint64_t v23 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v19 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v22 = *v21;
          unint64_t v23 = v21 + 1;
          *((void *)a2 + 1) = v23;
        }
        *((unsigned char *)this + 52) = v22 != 0;
        int v54 = *((_DWORD *)this + 24) | 4;
        *((_DWORD *)this + 24) = v54;
        if ((unint64_t)v23 >= v19 || *v23 != 34) {
          continue;
        }
        *((void *)a2 + 1) = v23 + 1;
        *((_DWORD *)this + 24) = v54 | 8;
        if (*((void *)this + 3) == v9)
        {
LABEL_28:
          uint64_t v24 = operator new(0x18uLL);
          v24[1] = 0;
          void v24[2] = 0;
          void *v24 = 0;
          *((void *)this + 3) = v24;
        }
LABEL_29:
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        long long v26 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v25 = *((void *)a2 + 2);
        if ((unint64_t)v26 >= v25 || *v26 != 40) {
          continue;
        }
        int v27 = v26 + 1;
        *((void *)a2 + 1) = v27;
        if ((unint64_t)v27 >= v25) {
          goto LABEL_106;
        }
LABEL_36:
        if (*v27 < 0)
        {
LABEL_106:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!result) {
            return result;
          }
          size_t v28 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v51 = *((void *)a2 + 2);
          int v29 = *((_DWORD *)this + 24) | 0x10;
          *((_DWORD *)this + 24) = v29;
          if ((unint64_t)v28 >= v51) {
            continue;
          }
        }
        else
        {
          *uint64_t v5 = *v27;
          size_t v28 = v27 + 1;
          *((void *)a2 + 1) = v28;
          int v29 = *((_DWORD *)this + 24) | 0x10;
          *((_DWORD *)this + 24) = v29;
          if ((unint64_t)v28 >= v25) {
            continue;
          }
        }
        if (*v28 != 50) {
          continue;
        }
        *((void *)a2 + 1) = v28 + 1;
        *((_DWORD *)this + 24) = v29 | 0x20;
        if (*((void *)this + 4) == v9)
        {
LABEL_41:
          BOOL v30 = operator new(0x18uLL);
          v30[1] = 0;
          v30[2] = 0;
          *BOOL v30 = 0;
          *((void *)this + 4) = v30;
        }
LABEL_42:
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        char v31 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v31 >= *((void *)a2 + 2) || *v31 != 58) {
          continue;
        }
        *((void *)a2 + 1) = v31 + 1;
LABEL_47:
        *((_DWORD *)this + 24) |= 0x40u;
        if (*((void *)this + 5) == v9)
        {
          long long v32 = operator new(0x18uLL);
          v32[1] = 0;
          v32[2] = 0;
          *long long v32 = 0;
          *((void *)this + 5) = v32;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        uint64_t v33 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v33 >= *((void *)a2 + 2) || *v33 != 66) {
          continue;
        }
        *((void *)a2 + 1) = v33 + 1;
LABEL_54:
        *((_DWORD *)this + 24) |= 0x80u;
        if (*((void *)this + 7) == v9)
        {
          size_t v34 = operator new(0x18uLL);
          v34[1] = 0;
          v34[2] = 0;
          void *v34 = 0;
          *((void *)this + 7) = v34;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        uint64_t v35 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v35 >= *((void *)a2 + 2) || *v35 != 74) {
          continue;
        }
        *((void *)a2 + 1) = v35 + 1;
LABEL_61:
        *((_DWORD *)this + 24) |= 0x100u;
        if (*((void *)this + 8) == v9)
        {
          uint64_t v36 = operator new(0x18uLL);
          v36[1] = 0;
          v36[2] = 0;
          *uint64_t v36 = 0;
          *((void *)this + 8) = v36;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        long long v38 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v37 = *((void *)a2 + 2);
        if ((unint64_t)v38 >= v37 || *v38 != 80) {
          continue;
        }
        int v39 = v38 + 1;
        *((void *)a2 + 1) = v39;
        if ((unint64_t)v39 >= v37) {
          goto LABEL_93;
        }
LABEL_70:
        if (*v39 < 0)
        {
LABEL_93:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!result) {
            return result;
          }
          int v40 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v49 = *((void *)a2 + 2);
          int v41 = *((_DWORD *)this + 24) | 0x200;
          *((_DWORD *)this + 24) = v41;
          if ((unint64_t)v40 >= v49) {
            continue;
          }
        }
        else
        {
          unsigned int *v6 = *v39;
          int v40 = v39 + 1;
          *((void *)a2 + 1) = v40;
          int v41 = *((_DWORD *)this + 24) | 0x200;
          *((_DWORD *)this + 24) = v41;
          if ((unint64_t)v40 >= v37) {
            continue;
          }
        }
        if (*v40 != 90) {
          continue;
        }
        *((void *)a2 + 1) = v40 + 1;
        *((_DWORD *)this + 24) = v41 | 0x400;
        if (*((void *)this + 9) == v9)
        {
LABEL_75:
          BOOL v42 = operator new(0x18uLL);
          v42[1] = 0;
          v42[2] = 0;
          *BOOL v42 = 0;
          *((void *)this + 9) = v42;
        }
LABEL_76:
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        char v44 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v43 = *((void *)a2 + 2);
        if ((unint64_t)v44 >= v43 || *v44 != 96) {
          continue;
        }
        long long v45 = v44 + 1;
        *((void *)a2 + 1) = v45;
        if ((unint64_t)v45 >= v43) {
          goto LABEL_98;
        }
LABEL_83:
        if (*v45 < 0)
        {
LABEL_98:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!result) {
            return result;
          }
          int v46 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v43 = *((void *)a2 + 2);
          *((_DWORD *)this + 24) |= 0x800u;
          if ((unint64_t)v46 >= v43) {
            continue;
          }
        }
        else
        {
          unsigned int *v7 = *v45;
          int v46 = v45 + 1;
          *((void *)a2 + 1) = v46;
          *((_DWORD *)this + 24) |= 0x800u;
          if ((unint64_t)v46 >= v43) {
            continue;
          }
        }
        if (*v46 != 104) {
          continue;
        }
        unint64_t v47 = v46 + 1;
        *((void *)a2 + 1) = v47;
LABEL_102:
        if ((unint64_t)v47 >= v43 || *v47 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
          if (!result) {
            return result;
          }
          long long v50 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v43 = *((void *)a2 + 2);
          *((_DWORD *)this + 24) |= 0x1000u;
          if ((unint64_t)v50 >= v43) {
            continue;
          }
        }
        else
        {
          unsigned int *v8 = *v47;
          long long v50 = v47 + 1;
          *((void *)a2 + 1) = v50;
          *((_DWORD *)this + 24) |= 0x1000u;
          if ((unint64_t)v50 >= v43) {
            continue;
          }
        }
        if (*v50 == 112)
        {
          size_t v48 = v50 + 1;
          *((void *)a2 + 1) = v48;
LABEL_115:
          unsigned int v56 = -1431655766;
          if ((unint64_t)v48 >= v43 || *v48 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v56);
            if (!result) {
              return result;
            }
            unsigned int v52 = v56;
            long long v53 = (unsigned __int8 *)*((void *)a2 + 1);
            unint64_t v43 = *((void *)a2 + 2);
          }
          else
          {
            unsigned int v52 = *v48;
            long long v53 = (unsigned __int8 *)(v48 + 1);
            *((void *)a2 + 1) = v53;
          }
          *((unsigned char *)this + 53) = v52 != 0;
          *((_DWORD *)this + 24) |= 0x2000u;
          if (v53 == (unsigned __int8 *)v43 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            uint64_t result = 1;
            *((unsigned char *)a2 + 36) = 1;
            return result;
          }
        }
        continue;
      case 3u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_89;
        }
        size_t v21 = (char *)*((void *)a2 + 1);
        unint64_t v19 = *((void *)a2 + 2);
        goto LABEL_23;
      case 4u:
        int v12 = TagFallback & 7;
        if (v12 != 2) {
          goto LABEL_89;
        }
        *((_DWORD *)this + 24) |= 8u;
        if (*((void *)this + 3) == v9) {
          goto LABEL_28;
        }
        goto LABEL_29;
      case 5u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_89;
        }
        int v27 = (char *)*((void *)a2 + 1);
        unint64_t v25 = *((void *)a2 + 2);
        if ((unint64_t)v27 < v25) {
          goto LABEL_36;
        }
        goto LABEL_106;
      case 6u:
        int v12 = TagFallback & 7;
        if (v12 != 2) {
          goto LABEL_89;
        }
        *((_DWORD *)this + 24) |= 0x20u;
        if (*((void *)this + 4) == v9) {
          goto LABEL_41;
        }
        goto LABEL_42;
      case 7u:
        int v12 = TagFallback & 7;
        if (v12 == 2) {
          goto LABEL_47;
        }
        goto LABEL_89;
      case 8u:
        int v12 = TagFallback & 7;
        if (v12 == 2) {
          goto LABEL_54;
        }
        goto LABEL_89;
      case 9u:
        int v12 = TagFallback & 7;
        if (v12 == 2) {
          goto LABEL_61;
        }
        goto LABEL_89;
      case 0xAu:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_89;
        }
        int v39 = (char *)*((void *)a2 + 1);
        unint64_t v37 = *((void *)a2 + 2);
        if ((unint64_t)v39 < v37) {
          goto LABEL_70;
        }
        goto LABEL_93;
      case 0xBu:
        int v12 = TagFallback & 7;
        if (v12 != 2) {
          goto LABEL_89;
        }
        *((_DWORD *)this + 24) |= 0x400u;
        if (*((void *)this + 9) == v9) {
          goto LABEL_75;
        }
        goto LABEL_76;
      case 0xCu:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_89;
        }
        long long v45 = (char *)*((void *)a2 + 1);
        unint64_t v43 = *((void *)a2 + 2);
        if ((unint64_t)v45 < v43) {
          goto LABEL_83;
        }
        goto LABEL_98;
      case 0xDu:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_89;
        }
        unint64_t v47 = (char *)*((void *)a2 + 1);
        unint64_t v43 = *((void *)a2 + 2);
        goto LABEL_102;
      case 0xEu:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_89;
        }
        size_t v48 = (char *)*((void *)a2 + 1);
        unint64_t v43 = *((void *)a2 + 2);
        goto LABEL_115;
      default:
        int v12 = TagFallback & 7;
LABEL_89:
        if (v12 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 96);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 96);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 52), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned int *)(v5 + 48), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(unsigned int *)(v5 + 80), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
LABEL_28:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, *(unsigned int *)(v5 + 88), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 96) & 0x2000) == 0) {
      return this;
    }
    goto LABEL_29;
  }
LABEL_27:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(unsigned int *)(v5 + 84), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x1000) != 0) {
    goto LABEL_28;
  }
LABEL_14:
  if ((v6 & 0x2000) == 0) {
    return this;
  }
LABEL_29:
  uint64_t v7 = *(unsigned __int8 *)(v5 + 53);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, v7, (uint64_t)a2, a4);
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::ByteSize(awd::metrics::CommCenterWakeReasonInfo *this)
{
  int v2 = *((_DWORD *)this + 24);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
    if ((v2 & 0xFF00) == 0) {
      goto LABEL_106;
    }
LABEL_67:
    if ((v2 & 0x100) != 0)
    {
      uint64_t v36 = *((void *)this + 8);
      int v37 = *(unsigned __int8 *)(v36 + 23);
      char v38 = v37;
      uint64_t v39 = *(void *)(v36 + 8);
      if ((v37 & 0x80u) == 0) {
        unint64_t v40 = *(unsigned __int8 *)(v36 + 23);
      }
      else {
        unint64_t v40 = v39;
      }
      if (v40 >= 0x80)
      {
        int v41 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v40);
        int v37 = *(unsigned __int8 *)(v36 + 23);
        uint64_t v39 = *(void *)(v36 + 8);
        int v2 = *((_DWORD *)this + 24);
        char v38 = *(unsigned char *)(v36 + 23);
      }
      else
      {
        int v41 = 1;
      }
      if (v38 < 0) {
        int v37 = v39;
      }
      LODWORD(v3) = v3 + v41 + v37 + 1;
      if ((v2 & 0x200) == 0)
      {
LABEL_69:
        if ((v2 & 0x400) == 0) {
          goto LABEL_70;
        }
LABEL_86:
        uint64_t v44 = *((void *)this + 9);
        int v45 = *(unsigned __int8 *)(v44 + 23);
        char v46 = v45;
        uint64_t v47 = *(void *)(v44 + 8);
        if ((v45 & 0x80u) == 0) {
          unint64_t v48 = *(unsigned __int8 *)(v44 + 23);
        }
        else {
          unint64_t v48 = v47;
        }
        if (v48 >= 0x80)
        {
          int v49 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v48);
          int v45 = *(unsigned __int8 *)(v44 + 23);
          uint64_t v47 = *(void *)(v44 + 8);
          int v2 = *((_DWORD *)this + 24);
          char v46 = *(unsigned char *)(v44 + 23);
        }
        else
        {
          int v49 = 1;
        }
        if (v46 < 0) {
          int v45 = v47;
        }
        LODWORD(v3) = v3 + v49 + v45 + 1;
        if ((v2 & 0x800) == 0)
        {
LABEL_71:
          if ((v2 & 0x1000) == 0) {
            goto LABEL_103;
          }
          goto LABEL_99;
        }
LABEL_95:
        long long v50 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 21);
        if (v50 >= 0x80)
        {
          int v51 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v50);
          int v2 = *((_DWORD *)this + 24);
          LODWORD(v3) = v51 + 1 + v3;
          if ((v2 & 0x1000) == 0) {
            goto LABEL_103;
          }
        }
        else
        {
          LODWORD(v3) = v3 + 2;
          if ((v2 & 0x1000) == 0)
          {
LABEL_103:
            if ((v2 & 0x2000) != 0) {
              uint64_t v3 = (v3 + 2);
            }
            else {
              uint64_t v3 = v3;
            }
            goto LABEL_106;
          }
        }
LABEL_99:
        unsigned int v52 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 22);
        if (v52 >= 0x80)
        {
          int v53 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v52) + 1;
          int v2 = *((_DWORD *)this + 24);
        }
        else
        {
          int v53 = 2;
        }
        LODWORD(v3) = v53 + v3;
        goto LABEL_103;
      }
    }
    else if ((v2 & 0x200) == 0)
    {
      goto LABEL_69;
    }
    BOOL v42 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 20);
    if (v42 >= 0x80)
    {
      int v43 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v42);
      int v2 = *((_DWORD *)this + 24);
      LODWORD(v3) = v43 + 1 + v3;
      if ((v2 & 0x400) != 0) {
        goto LABEL_86;
      }
    }
    else
    {
      LODWORD(v3) = v3 + 2;
      if ((v2 & 0x400) != 0) {
        goto LABEL_86;
      }
    }
LABEL_70:
    if ((v2 & 0x800) == 0) {
      goto LABEL_71;
    }
    goto LABEL_95;
  }
  if (v2)
  {
    LODWORD(v3) = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                              + 1))
                + 1;
    int v2 = *((_DWORD *)this + 24);
    if ((v2 & 2) == 0) {
      goto LABEL_17;
    }
  }
  else
  {
    LODWORD(v3) = 0;
    if ((v2 & 2) == 0) {
      goto LABEL_17;
    }
  }
  uint64_t v4 = *((void *)this + 2);
  int v5 = *(unsigned __int8 *)(v4 + 23);
  char v6 = v5;
  uint64_t v7 = *(void *)(v4 + 8);
  if ((v5 & 0x80u) == 0) {
    unint64_t v8 = *(unsigned __int8 *)(v4 + 23);
  }
  else {
    unint64_t v8 = v7;
  }
  if (v8 >= 0x80)
  {
    int v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8);
    int v5 = *(unsigned __int8 *)(v4 + 23);
    uint64_t v7 = *(void *)(v4 + 8);
    int v2 = *((_DWORD *)this + 24);
    char v6 = *(unsigned char *)(v4 + 23);
  }
  else
  {
    int v9 = 1;
  }
  if (v6 < 0) {
    int v5 = v7;
  }
  LODWORD(v3) = v3 + v9 + v5 + 1;
LABEL_17:
  if ((v2 & 4) != 0) {
    uint64_t v3 = (v3 + 2);
  }
  else {
    uint64_t v3 = v3;
  }
  if ((v2 & 8) == 0)
  {
    if ((v2 & 0x10) == 0) {
      goto LABEL_22;
    }
LABEL_36:
    int v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 12);
    if (v16 >= 0x80)
    {
      int v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16);
      int v2 = *((_DWORD *)this + 24);
      uint64_t v3 = (v3 + v17 + 1);
      if ((v2 & 0x20) != 0) {
        goto LABEL_40;
      }
    }
    else
    {
      uint64_t v3 = (v3 + 2);
      if ((v2 & 0x20) != 0) {
        goto LABEL_40;
      }
    }
LABEL_23:
    if ((v2 & 0x40) == 0) {
      goto LABEL_24;
    }
    goto LABEL_49;
  }
  uint64_t v10 = *((void *)this + 3);
  int v11 = *(unsigned __int8 *)(v10 + 23);
  char v12 = v11;
  uint64_t v13 = *(void *)(v10 + 8);
  if ((v11 & 0x80u) == 0) {
    unint64_t v14 = *(unsigned __int8 *)(v10 + 23);
  }
  else {
    unint64_t v14 = v13;
  }
  if (v14 >= 0x80)
  {
    int v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v14);
    int v11 = *(unsigned __int8 *)(v10 + 23);
    uint64_t v13 = *(void *)(v10 + 8);
    int v2 = *((_DWORD *)this + 24);
    char v12 = *(unsigned char *)(v10 + 23);
  }
  else
  {
    int v15 = 1;
  }
  if (v12 < 0) {
    int v11 = v13;
  }
  uint64_t v3 = (v3 + v15 + v11 + 1);
  if ((v2 & 0x10) != 0) {
    goto LABEL_36;
  }
LABEL_22:
  if ((v2 & 0x20) == 0) {
    goto LABEL_23;
  }
LABEL_40:
  uint64_t v18 = *((void *)this + 4);
  int v19 = *(unsigned __int8 *)(v18 + 23);
  char v20 = v19;
  uint64_t v21 = *(void *)(v18 + 8);
  if ((v19 & 0x80u) == 0) {
    unint64_t v22 = *(unsigned __int8 *)(v18 + 23);
  }
  else {
    unint64_t v22 = v21;
  }
  if (v22 >= 0x80)
  {
    int v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v22);
    int v19 = *(unsigned __int8 *)(v18 + 23);
    uint64_t v21 = *(void *)(v18 + 8);
    int v2 = *((_DWORD *)this + 24);
    char v20 = *(unsigned char *)(v18 + 23);
  }
  else
  {
    int v23 = 1;
  }
  if (v20 < 0) {
    int v19 = v21;
  }
  uint64_t v3 = (v3 + v23 + v19 + 1);
  if ((v2 & 0x40) == 0)
  {
LABEL_24:
    if ((v2 & 0x80) == 0) {
      goto LABEL_25;
    }
    goto LABEL_58;
  }
LABEL_49:
  uint64_t v24 = *((void *)this + 5);
  int v25 = *(unsigned __int8 *)(v24 + 23);
  char v26 = v25;
  uint64_t v27 = *(void *)(v24 + 8);
  if ((v25 & 0x80u) == 0) {
    unint64_t v28 = *(unsigned __int8 *)(v24 + 23);
  }
  else {
    unint64_t v28 = v27;
  }
  if (v28 >= 0x80)
  {
    int v29 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v28);
    int v25 = *(unsigned __int8 *)(v24 + 23);
    uint64_t v27 = *(void *)(v24 + 8);
    int v2 = *((_DWORD *)this + 24);
    char v26 = *(unsigned char *)(v24 + 23);
  }
  else
  {
    int v29 = 1;
  }
  if (v26 < 0) {
    int v25 = v27;
  }
  uint64_t v3 = (v3 + v29 + v25 + 1);
  if ((v2 & 0x80) == 0)
  {
LABEL_25:
    if ((v2 & 0xFF00) == 0) {
      goto LABEL_106;
    }
    goto LABEL_67;
  }
LABEL_58:
  uint64_t v30 = *((void *)this + 7);
  int v31 = *(unsigned __int8 *)(v30 + 23);
  char v32 = v31;
  uint64_t v33 = *(void *)(v30 + 8);
  if ((v31 & 0x80u) == 0) {
    unint64_t v34 = *(unsigned __int8 *)(v30 + 23);
  }
  else {
    unint64_t v34 = v33;
  }
  if (v34 >= 0x80)
  {
    int v35 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v34);
    int v31 = *(unsigned __int8 *)(v30 + 23);
    uint64_t v33 = *(void *)(v30 + 8);
    int v2 = *((_DWORD *)this + 24);
    char v32 = *(unsigned char *)(v30 + 23);
  }
  else
  {
    int v35 = 1;
  }
  if (v32 < 0) {
    int v31 = v33;
  }
  uint64_t v3 = (v3 + v35 + v31 + 1);
  if ((v2 & 0xFF00) != 0) {
    goto LABEL_67;
  }
LABEL_106:
  *((_DWORD *)this + 23) = v3;
  return v3;
}

void awd::metrics::CommCenterWakeReasonInfo::CopyFrom(awd::metrics::CommCenterWakeReasonInfo *this, const awd::metrics::CommCenterWakeReasonInfo *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterWakeReasonInfo *))(*(void *)this + 32))(this);
    awd::metrics::CommCenterWakeReasonInfo::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::IsInitialized(awd::metrics::CommCenterWakeReasonInfo *this)
{
  return 1;
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::Swap(uint64_t this, awd::metrics::CommCenterWakeReasonInfo *a2)
{
  if (a2 != (awd::metrics::CommCenterWakeReasonInfo *)this)
  {
    uint64_t v2 = *(void *)(this + 8);
    uint64_t v3 = *(void *)(this + 16);
    uint64_t v4 = *((void *)a2 + 2);
    *(void *)(this + 8) = *((void *)a2 + 1);
    *(void *)(this + 16) = v4;
    *((void *)a2 + 1) = v2;
    *((void *)a2 + 2) = v3;
    LOBYTE(v2) = *(unsigned char *)(this + 52);
    *(unsigned char *)(this + 52) = *((unsigned char *)a2 + 52);
    *((unsigned char *)a2 + 52) = v2;
    uint64_t v5 = *(void *)(this + 24);
    *(void *)(this + 24) = *((void *)a2 + 3);
    *((void *)a2 + 3) = v5;
    LODWORD(v5) = *(_DWORD *)(this + 48);
    *(_DWORD *)(this + 48) = *((_DWORD *)a2 + 12);
    *((_DWORD *)a2 + 12) = v5;
    uint64_t v6 = *(void *)(this + 32);
    *(void *)(this + 32) = *((void *)a2 + 4);
    *((void *)a2 + 4) = v6;
    uint64_t v7 = *(void *)(this + 40);
    *(void *)(this + 40) = *((void *)a2 + 5);
    *((void *)a2 + 5) = v7;
    uint64_t v8 = *(void *)(this + 56);
    *(void *)(this + 56) = *((void *)a2 + 7);
    *((void *)a2 + 7) = v8;
    uint64_t v9 = *(void *)(this + 64);
    *(void *)(this + 64) = *((void *)a2 + 8);
    *((void *)a2 + 8) = v9;
    LODWORD(v9) = *(_DWORD *)(this + 80);
    *(_DWORD *)(this + 80) = *((_DWORD *)a2 + 20);
    *((_DWORD *)a2 + 20) = v9;
    uint64_t v10 = *(void *)(this + 72);
    *(void *)(this + 72) = *((void *)a2 + 9);
    *((void *)a2 + 9) = v10;
    LODWORD(v10) = *(_DWORD *)(this + 84);
    *(_DWORD *)(this + 84) = *((_DWORD *)a2 + 21);
    *((_DWORD *)a2 + 21) = v10;
    LODWORD(v10) = *(_DWORD *)(this + 88);
    *(_DWORD *)(this + 88) = *((_DWORD *)a2 + 22);
    *((_DWORD *)a2 + 22) = v10;
    LOBYTE(v10) = *(unsigned char *)(this + 53);
    *(unsigned char *)(this + 53) = *((unsigned char *)a2 + 53);
    *((unsigned char *)a2 + 53) = v10;
    LODWORD(v10) = *(_DWORD *)(this + 96);
    *(_DWORD *)(this + 96) = *((_DWORD *)a2 + 24);
    *((_DWORD *)a2 + 24) = v10;
    LODWORD(v10) = *(_DWORD *)(this + 92);
    *(_DWORD *)(this + 92) = *((_DWORD *)a2 + 23);
    *((_DWORD *)a2 + 23) = v10;
  }
  return this;
}

char *awd::metrics::CommCenterWakeReasonInfo::GetTypeName@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1C5BCC300;
  strcpy(result, "awd.metrics.CommCenterWakeReasonInfo");
  return result;
}

uint64_t awd::metrics::CommCenterPowerVotingRecord::GetCachedSize(awd::metrics::CommCenterPowerVotingRecord *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t awd::metrics::CommCenterPowerTransitionSuccess::GetCachedSize(awd::metrics::CommCenterPowerTransitionSuccess *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t awd::metrics::CommCenterPowerTransitionFailure::GetCachedSize(awd::metrics::CommCenterPowerTransitionFailure *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t awd::metrics::CommCenterMissedMTMessage::GetCachedSize(awd::metrics::CommCenterMissedMTMessage *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t awd::metrics::CommCenterLowPowerEvent::GetCachedSize(awd::metrics::CommCenterLowPowerEvent *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t awd::metrics::CommCenterWakeInfo::GetCachedSize(awd::metrics::CommCenterWakeInfo *this)
{
  return *((unsigned int *)this + 7);
}

uint64_t awd::metrics::CommCenterLowPowerStats::GetCachedSize(awd::metrics::CommCenterLowPowerStats *this)
{
  return *((unsigned int *)this + 17);
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::GetCachedSize(awd::metrics::CommCenterWakeReasonInfo *this)
{
  return *((unsigned int *)this + 23);
}

void StatsAWD::create(uint64_t *a1@<X8>)
{
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v3 = (StatsAWD *)operator new(0x78uLL);
  StatsAWD::StatsAWD(v3);
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<StatsAWD>::shared_ptr[abi:ne180100]<StatsAWD,std::shared_ptr<StatsAWD> ctu::SharedSynchronizable<StatsAWD>::make_shared_ptr<StatsAWD>(StatsAWD*)::{lambda(StatsAWD*)#1},void>(a1, (uint64_t)v3);
  ctu::Loggable<StatsAWD,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a1);
  uint64_t v4 = *a1;
  if (*a1)
  {
    abm::AWDHelperGetConnection(&v8);
    long long v5 = v8;
    long long v8 = 0uLL;
    uint64_t v6 = *(std::__shared_weak_count **)(v4 + 112);
    *(_OWORD *)(v4 + 104) = v5;
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    uint64_t v7 = (std::__shared_weak_count *)*((void *)&v8 + 1);
    if (*((void *)&v8 + 1))
    {
      if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v8 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1C5BA73EC(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1C5BA7400(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1C5BA7414(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void StatsAWD::init(StatsAWD *this)
{
  abm::AWDHelperGetConnection(&v5);
  long long v2 = v5;
  long long v5 = 0uLL;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 14);
  *(_OWORD *)((char *)this + 104) = v2;
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = (std::__shared_weak_count *)*((void *)&v5 + 1);
    if (!*((void *)&v5 + 1)) {
      return;
    }
  }
  else
  {
    uint64_t v4 = (std::__shared_weak_count *)*((void *)&v5 + 1);
    if (!*((void *)&v5 + 1)) {
      return;
    }
  }
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void StatsAWD::StatsAWD(StatsAWD *this)
{
  *(void *)this = &unk_1F2111BC8;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v8, "com.apple.telephony.abm", "stats.awd");
  GetABMLogServer(&v6);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v3 = dispatch_queue_create_with_target_V2("stats.awd", initially_inactive, 0);
  dispatch_set_qos_class_floor(v3, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v3);
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    *((void *)this + 12) = 0;
    dispatch_release(v3);
  }
  else
  {
    *((void *)this + 12) = 0;
  }
  *(void *)this = &unk_1F2111C98;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
  *((void *)this + 1) = &unk_1F2102CB8;
  uint64_t v4 = v7;
  *((void *)this + 7) = v6;
  *((void *)this + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v9);
  *(void *)this = &unk_1F2111D28;
  long long v5 = v7;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v8);
  *(void *)this = &unk_1F2111BC8;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
}

void sub_1C5BA76E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a15);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a13);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v15);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  _Unwind_Resume(a1);
}

void sub_1C5BA771C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  _Unwind_Resume(a1);
}

const char *StatsAWD::getName(StatsAWD *this)
{
  return "stats.awd";
}

void StatsAWD::~StatsAWD(StatsAWD *this)
{
  *(void *)this = &unk_1F2111BC8;
  long long v2 = (std::__shared_weak_count *)*((void *)this + 14);
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    *(void *)this = &unk_1F2111C98;
    MEMORY[0x1C87940C0]((char *)this + 8);
    uint64_t v3 = *((void *)this + 12);
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  *(void *)this = &unk_1F2111C98;
  MEMORY[0x1C87940C0]((char *)this + 8);
  uint64_t v3 = *((void *)this + 12);
  if (v3) {
LABEL_4:
  }
    dispatch_release(v3);
LABEL_5:
  uint64_t v4 = *((void *)this + 11);
  if (v4) {
    dispatch_release(v4);
  }
  long long v5 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

{
  void *v1;
  uint64_t vars8;

  StatsAWD::~StatsAWD(this);

  operator delete(v1);
}

void StatsAWD::submit_sync(uint64_t a1, int a2, xpc_object_t *a3)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 104))
  {
    uint64_t v10 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    int v11 = "Failed: AWD connection setup failed";
    char v12 = v10;
    uint32_t v13 = 2;
    goto LABEL_137;
  }
  SharedMetricFactory = (wis::MetricFactory *)wis::MetricFactory::getSharedMetricFactory((wis::MetricFactory *)a1);
  uint64_t v7 = wis::MetricFactory::newMetricContainerWithIdentifier(SharedMetricFactory);
  uint64_t v61 = (wis::MetricContainer *)v7;
  if (!v7)
  {
    unint64_t v14 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = a2;
      _os_log_debug_impl(&dword_1C59C6000, v14, OS_LOG_TYPE_DEBUG, "#D Failed to get the metric of 0x%x", buf, 8u);
    }
    return;
  }
  long long v8 = (wis::MetricContainer *)v7;
  if (a2 <= 524463)
  {
    switch(a2)
    {
      case 524310:
        xpc_object_t v9 = *a3;
        if (*a3) {
          xpc_retain(*a3);
        }
        else {
          xpc_object_t v9 = xpc_null_create();
        }
        int v17 = (char *)operator new(0x48uLL);
        uint64_t v22 = MEMORY[0x1E4FBA920];
        *(void *)int v17 = &unk_1F210D298;
        *((void *)v17 + 1) = v22;
        *((_WORD *)v17 + 20) = 0;
        *((void *)v17 + 2) = 0;
        *((void *)v17 + 3) = v22;
        *((void *)v17 + 4) = v22;
        *((_DWORD *)v17 + 11) = 0;
        *((void *)v17 + 6) = v22;
        *((void *)v17 + 7) = 0;
        *((void *)v17 + 8) = 0;
        *(void *)long long buf = v17;
        *(void *)unint64_t v64 = v9;
        if (v9 && MEMORY[0x1C8795EB0](v9) == MEMORY[0x1E4F14590])
        {
          xpc_retain(v9);
          xpc_object_t v39 = v9;
        }
        else
        {
          xpc_object_t v39 = xpc_null_create();
          *(void *)unint64_t v64 = v39;
        }
        BOOL v55 = StatsAWD::fillMetric_sync(a1, (uint64_t *)buf, (xpc_object_t *)v64);
        xpc_release(v39);
        if (v55)
        {
          if (v17[69])
          {
            uint64_t WISTimestamp = *((void *)v17 + 7);
          }
          else
          {
            uint64_t WISTimestamp = wis::getWISTimestamp(v56);
            *((_DWORD *)v17 + 17) |= 0x100u;
            *((void *)v17 + 7) = WISTimestamp;
          }
          wis::MetricContainer::storeMetric(v61, WISTimestamp, *(unsigned int *)v61, (const wireless_diagnostics::google::protobuf::MessageLite *)v17);
        }
        break;
      case 524365:
        xpc_object_t v9 = *a3;
        if (*a3) {
          xpc_retain(*a3);
        }
        else {
          xpc_object_t v9 = xpc_null_create();
        }
        int v17 = (char *)operator new(0x30uLL);
        *(void *)int v17 = &unk_1F210D0B8;
        *((void *)v17 + 1) = 0;
        *((void *)v17 + 5) = 0;
        *((void *)v17 + 2) = 0;
        *((void *)v17 + 3) = 0;
        *((_DWORD *)v17 + 8) = 0;
        *(void *)long long buf = v17;
        *(void *)unint64_t v64 = v9;
        if (v9)
        {
          xpc_retain(v9);
          xpc_object_t v27 = v9;
        }
        else
        {
          xpc_object_t v27 = xpc_null_create();
          *(void *)unint64_t v64 = v27;
        }
        int v49 = StatsAWD::fillMetric_sync(a1, (int **)buf, v64);
        xpc_release(v27);
        if (v49)
        {
          if (v17[44])
          {
            uint64_t v51 = *((void *)v17 + 1);
          }
          else
          {
            uint64_t v51 = wis::getWISTimestamp(v50);
            *((_DWORD *)v17 + 11) |= 1u;
            *((void *)v17 + 1) = v51;
          }
          wis::MetricContainer::storeMetric(v61, v51, *(unsigned int *)v61, (const wireless_diagnostics::google::protobuf::MessageLite *)v17);
        }
        break;
      case 524384:
        xpc_object_t v9 = *a3;
        if (*a3) {
          xpc_retain(*a3);
        }
        else {
          xpc_object_t v9 = xpc_null_create();
        }
        int v17 = (char *)operator new(0x30uLL);
        *(void *)int v17 = &unk_1F210CFC8;
        *((void *)v17 + 1) = 0;
        *((void *)v17 + 4) = 0;
        *((_DWORD *)v17 + 10) = 0;
        *((void *)v17 + 2) = 0;
        *(void *)(v17 + 21) = 0;
        *(void *)long long buf = v17;
        *(void *)unint64_t v64 = v9;
        if (v9)
        {
          xpc_retain(v9);
          xpc_object_t v20 = v9;
        }
        else
        {
          xpc_object_t v20 = xpc_null_create();
          *(void *)unint64_t v64 = v20;
        }
        int v33 = StatsAWD::fillMetric_sync(a1, (uint64_t *)buf, v64);
        xpc_release(v20);
        if (v33)
        {
          if (v17[40])
          {
            uint64_t v35 = *((void *)v17 + 1);
          }
          else
          {
            uint64_t v35 = wis::getWISTimestamp(v34);
            *((_DWORD *)v17 + 10) |= 1u;
            *((void *)v17 + 1) = v35;
          }
          wis::MetricContainer::storeMetric(v61, v35, *(unsigned int *)v61, (const wireless_diagnostics::google::protobuf::MessageLite *)v17);
        }
        break;
      default:
LABEL_32:
        int v15 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = a2;
          _os_log_error_impl(&dword_1C59C6000, v15, OS_LOG_TYPE_ERROR, "Failed to setup metric id (0x%x)", buf, 8u);
        }
        wis::MetricContainer::~MetricContainer(v8);
        goto LABEL_133;
    }
  }
  else
  {
    switch(a2)
    {
      case 524464:
        xpc_object_t v9 = *a3;
        if (*a3) {
          xpc_retain(*a3);
        }
        else {
          xpc_object_t v9 = xpc_null_create();
        }
        int v17 = (char *)operator new(0x28uLL);
        *(void *)int v17 = &unk_1F2111928;
        *((void *)v17 + 1) = 0;
        uint64_t v18 = MEMORY[0x1E4FBA920];
        *((void *)v17 + 2) = 0;
        *((void *)v17 + 3) = v18;
        *((void *)v17 + 4) = 0;
        *(void *)long long buf = v17;
        *(void *)unint64_t v64 = v9;
        if (v9)
        {
          xpc_retain(v9);
          xpc_object_t v19 = v9;
        }
        else
        {
          xpc_object_t v19 = xpc_null_create();
          *(void *)unint64_t v64 = v19;
        }
        int v30 = StatsAWD::fillMetric_sync(a1, (uint64_t *)buf, v64);
        xpc_release(v19);
        if (v30)
        {
          if (v17[36])
          {
            uint64_t v32 = *((void *)v17 + 1);
          }
          else
          {
            uint64_t v32 = wis::getWISTimestamp(v31);
            *((_DWORD *)v17 + 9) |= 1u;
            *((void *)v17 + 1) = v32;
          }
          wis::MetricContainer::storeMetric(v61, v32, *(unsigned int *)v61, (const wireless_diagnostics::google::protobuf::MessageLite *)v17);
        }
        break;
      case 524465:
        xpc_object_t v9 = *a3;
        if (*a3) {
          xpc_retain(*a3);
        }
        else {
          xpc_object_t v9 = xpc_null_create();
        }
        int v17 = (char *)operator new(0x28uLL);
        *((void *)v17 + 1) = 0;
        *(void *)int v17 = &unk_1F21119A0;
        *((void *)v17 + 2) = 0;
        *((void *)v17 + 3) = 0;
        *((_DWORD *)v17 + 8) = 0;
        *(void *)long long buf = v17;
        *(void *)unint64_t v64 = v9;
        if (v9)
        {
          xpc_retain(v9);
          xpc_object_t v23 = v9;
        }
        else
        {
          xpc_object_t v23 = xpc_null_create();
          *(void *)unint64_t v64 = v23;
        }
        int v40 = StatsAWD::fillMetric_sync(a1, (uint64_t *)buf, v64);
        xpc_release(v23);
        if (v40)
        {
          if (v17[32])
          {
            uint64_t v42 = *((void *)v17 + 1);
          }
          else
          {
            uint64_t v42 = wis::getWISTimestamp(v41);
            *((_DWORD *)v17 + 8) |= 1u;
            *((void *)v17 + 1) = v42;
          }
          wis::MetricContainer::storeMetric(v61, v42, *(unsigned int *)v61, (const wireless_diagnostics::google::protobuf::MessageLite *)v17);
        }
        break;
      case 524466:
        xpc_object_t v9 = *a3;
        if (*a3) {
          xpc_retain(*a3);
        }
        else {
          xpc_object_t v9 = xpc_null_create();
        }
        int v17 = (char *)operator new(0x50uLL);
        *(void *)int v17 = &unk_1F2111A18;
        *(_OWORD *)(v17 + 8) = 0u;
        *((void *)v17 + 8) = 0;
        *((_DWORD *)v17 + 18) = 0;
        *(_OWORD *)(v17 + 24) = 0u;
        *(_OWORD *)(v17 + 40) = 0u;
        *((_DWORD *)v17 + 14) = 0;
        *(void *)long long buf = v17;
        *(void *)unint64_t v64 = v9;
        if (v9)
        {
          xpc_retain(v9);
          xpc_object_t v24 = v9;
        }
        else
        {
          xpc_object_t v24 = xpc_null_create();
          *(void *)unint64_t v64 = v24;
        }
        int v43 = StatsAWD::fillMetric_sync(a1, (int **)buf, (void **)v64);
        xpc_release(v24);
        if (v43)
        {
          if (v17[72])
          {
            uint64_t v45 = *((void *)v17 + 1);
          }
          else
          {
            uint64_t v45 = wis::getWISTimestamp(v44);
            *((_DWORD *)v17 + 18) |= 1u;
            *((void *)v17 + 1) = v45;
          }
          wis::MetricContainer::storeMetric(v61, v45, *(unsigned int *)v61, (const wireless_diagnostics::google::protobuf::MessageLite *)v17);
        }
        break;
      case 524467:
        xpc_object_t v9 = *a3;
        if (*a3) {
          xpc_retain(*a3);
        }
        else {
          xpc_object_t v9 = xpc_null_create();
        }
        int v17 = (char *)operator new(0x68uLL);
        *(void *)int v17 = &unk_1F2111A90;
        *((void *)v17 + 1) = 0;
        uint64_t v25 = MEMORY[0x1E4FBA920];
        *((_WORD *)v17 + 26) = 0;
        *((void *)v17 + 2) = v25;
        *((void *)v17 + 3) = v25;
        *((_DWORD *)v17 + 12) = 0;
        *((void *)v17 + 4) = v25;
        *((void *)v17 + 5) = v25;
        *((void *)v17 + 7) = v25;
        *((void *)v17 + 8) = v25;
        *((void *)v17 + 9) = v25;
        *((void *)v17 + 10) = 0;
        *((void *)v17 + 11) = 0;
        *((_DWORD *)v17 + 24) = 0;
        *(void *)long long buf = v17;
        *(void *)unint64_t v64 = v9;
        if (v9)
        {
          xpc_retain(v9);
          xpc_object_t v26 = v9;
        }
        else
        {
          xpc_object_t v26 = xpc_null_create();
          *(void *)unint64_t v64 = v26;
        }
        BOOL v46 = StatsAWD::fillMetric_sync(a1, (uint64_t *)buf, v64);
        xpc_release(v26);
        if (v46)
        {
          if (v17[96])
          {
            uint64_t v48 = *((void *)v17 + 1);
          }
          else
          {
            uint64_t v48 = wis::getWISTimestamp(v47);
            *((_DWORD *)v17 + 24) |= 1u;
            *((void *)v17 + 1) = v48;
          }
          wis::MetricContainer::storeMetric(v61, v48, *(unsigned int *)v61, (const wireless_diagnostics::google::protobuf::MessageLite *)v17);
        }
        break;
      default:
        if (a2 == 524539)
        {
          xpc_object_t v9 = *a3;
          if (*a3) {
            xpc_retain(*a3);
          }
          else {
            xpc_object_t v9 = xpc_null_create();
          }
          int v17 = (char *)operator new(0x28uLL);
          *(void *)int v17 = &unk_1F210D130;
          *((void *)v17 + 1) = 0;
          uint64_t v28 = MEMORY[0x1E4FBA920];
          *((void *)v17 + 2) = MEMORY[0x1E4FBA920];
          *((void *)v17 + 3) = v28;
          *((void *)v17 + 4) = 0;
          *(void *)long long buf = v17;
          *(void *)unint64_t v64 = v9;
          if (v9)
          {
            xpc_retain(v9);
            xpc_object_t v29 = v9;
          }
          else
          {
            xpc_object_t v29 = xpc_null_create();
            *(void *)unint64_t v64 = v29;
          }
          int v52 = StatsAWD::fillMetric_sync(a1, (uint64_t *)buf, v64);
          xpc_release(v29);
          if (v52)
          {
            if (v17[36])
            {
              uint64_t v54 = *((void *)v17 + 1);
            }
            else
            {
              uint64_t v54 = wis::getWISTimestamp(v53);
              *((_DWORD *)v17 + 9) |= 1u;
              *((void *)v17 + 1) = v54;
            }
            wis::MetricContainer::storeMetric(v61, v54, *(unsigned int *)v61, (const wireless_diagnostics::google::protobuf::MessageLite *)v17);
          }
        }
        else
        {
          if (a2 != 524584) {
            goto LABEL_32;
          }
          xpc_object_t v9 = *a3;
          if (*a3) {
            xpc_retain(*a3);
          }
          else {
            xpc_object_t v9 = xpc_null_create();
          }
          int v17 = (char *)operator new(0x20uLL);
          *(void *)int v17 = &unk_1F210D220;
          *((void *)v17 + 1) = 0;
          *((void *)v17 + 2) = 0;
          *((void *)v17 + 3) = 0;
          *(void *)long long buf = v17;
          *(void *)unint64_t v64 = v9;
          if (v9)
          {
            xpc_retain(v9);
            xpc_object_t v21 = v9;
          }
          else
          {
            xpc_object_t v21 = xpc_null_create();
            *(void *)unint64_t v64 = v21;
          }
          int v36 = StatsAWD::fillMetric_sync(a1, (uint64_t *)buf, v64);
          xpc_release(v21);
          if (v36)
          {
            if (v17[28])
            {
              uint64_t v38 = *((void *)v17 + 1);
            }
            else
            {
              uint64_t v38 = wis::getWISTimestamp(v37);
              *((_DWORD *)v17 + 7) |= 1u;
              *((void *)v17 + 1) = v38;
            }
            wis::MetricContainer::storeMetric(v61, v38, *(unsigned int *)v61, (const wireless_diagnostics::google::protobuf::MessageLite *)v17);
          }
        }
        break;
    }
  }
  (*(void (**)(char *))(*(void *)v17 + 8))(v17);
  xpc_release(v9);
  int v58 = wis::WISServerConnection::SubmitMetric(*(wis::WISServerConnection **)(a1 + 104), v61);
  char v59 = *(NSObject **)(a1 + 40);
  if (!v58)
  {
    if (!os_log_type_enabled(v59, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    int v11 = "Failed to submit metric id (0x%x)";
    char v12 = v59;
    uint32_t v13 = 8;
LABEL_137:
    _os_log_error_impl(&dword_1C59C6000, v12, OS_LOG_TYPE_ERROR, v11, buf, v13);
    return;
  }
  if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
  {
    xpc::object::to_string((uint64_t *)buf, (xpc::object *)a3);
    uint8x8_t v60 = v63 >= 0 ? buf : *(uint8_t **)buf;
    *(_DWORD *)unint64_t v64 = 67109378;
    *(_DWORD *)&void v64[4] = a2;
    __int16 v65 = 2082;
    unint64_t v66 = v60;
    _os_log_impl(&dword_1C59C6000, v59, OS_LOG_TYPE_DEFAULT, "#I Submitted AWD metric (0x%x) with data: %{public}s", v64, 0x12u);
    if (v63 < 0)
    {
      int v16 = *(void **)buf;
LABEL_133:
      operator delete(v16);
    }
  }
}

void sub_1C5BA8568(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  xpc_release(v2);
  std::unique_ptr<wis::MetricContainer>::~unique_ptr[abi:ne180100]((wis::MetricContainer **)va);
  _Unwind_Resume(a1);
}

wis::MetricContainer **std::unique_ptr<wis::MetricContainer>::~unique_ptr[abi:ne180100](wis::MetricContainer **a1)
{
  long long v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    wis::MetricContainer::~MetricContainer(v2);
    operator delete(v3);
  }
  return a1;
}

uint64_t StatsAWD::fillMetric_sync(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  xpc_object_t v5 = (xpc_object_t)*a3;
  uint64_t v6 = MEMORY[0x1E4F14590];
  if (*a3 && MEMORY[0x1C8795EB0](*a3) == v6) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t v5 = xpc_null_create();
  }
  if (MEMORY[0x1C8795EB0](v5) != v6)
  {
    uint64_t v7 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LOWORD(object[0]) = 0;
      _os_log_error_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_ERROR, "Failed: Expected data needs to be dictionary in boot time handling", (uint8_t *)object, 2u);
    }
    goto LABEL_14;
  }
  long long v8 = (const char *)*MEMORY[0x1E4F4C3B0];
  if (!xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E4F4C3B0])
    || (xpc_object_t v9 = (const char *)*MEMORY[0x1E4F4C478], !xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E4F4C478]))
    || (uint64_t v10 = (const char *)*MEMORY[0x1E4F4C3B8], !xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E4F4C3B8])))
  {
    uint32_t v13 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
LABEL_14:
      uint64_t v14 = 0;
      goto LABEL_15;
    }
    xpc_object_t v23 = (char *)MEMORY[0x1C8795DE0](v5);
    memset(object, 170, 24);
    size_t v24 = strlen(v23);
    if (v24 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v25 = (void *)v24;
    if (v24 >= 0x17)
    {
      uint64_t v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v24 | 7) != 0x17) {
        uint64_t v27 = v24 | 7;
      }
      uint64_t v28 = v27 + 1;
      xpc_object_t v26 = operator new(v27 + 1);
      object[1] = v25;
      xpc_object_t object[2] = (xpc_object_t)(v28 | 0x8000000000000000);
      object[0] = v26;
    }
    else
    {
      HIBYTE(object[2]) = v24;
      xpc_object_t v26 = object;
      if (!v24) {
        goto LABEL_32;
      }
    }
    memcpy(v26, v23, (size_t)v25);
LABEL_32:
    *((unsigned char *)v25 + (void)v26) = 0;
    free(v23);
    xpc_object_t v29 = object;
    if (SHIBYTE(object[2]) < 0) {
      xpc_object_t v29 = (xpc_object_t *)object[0];
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v32 = v29;
    _os_log_error_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_ERROR, "Failed: One of elements of boot time is missing: %s", buf, 0xCu);
    if (SHIBYTE(object[2]) < 0) {
      operator delete(object[0]);
    }
    goto LABEL_14;
  }
  uint64_t v11 = *a2;
  xpc_object_t value = xpc_dictionary_get_value(v5, v8);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  int v16 = xpc::dyn_cast_or_default((xpc *)object, 0);
  *(_DWORD *)(v11 + 40) |= 4u;
  *(_DWORD *)(v11 + 24) = v16;
  xpc_release(object[0]);
  uint64_t v17 = *a2;
  xpc_object_t v18 = xpc_dictionary_get_value(v5, v9);
  object[0] = v18;
  if (v18) {
    xpc_retain(v18);
  }
  else {
    object[0] = xpc_null_create();
  }
  int v19 = xpc::dyn_cast_or_default((xpc *)object, 0);
  *(_DWORD *)(v17 + 40) |= 2u;
  *(void *)(v17 + 16) = v19;
  xpc_release(object[0]);
  uint64_t v20 = *a2;
  xpc_object_t v21 = xpc_dictionary_get_value(v5, v10);
  object[0] = v21;
  if (v21) {
    xpc_retain(v21);
  }
  else {
    object[0] = xpc_null_create();
  }
  char v22 = xpc::dyn_cast_or_default((xpc *)object, 0);
  *(_DWORD *)(v20 + 40) |= 8u;
  *(unsigned char *)(v20 + 28) = v22;
  xpc_release(object[0]);
  uint64_t v14 = 1;
LABEL_15:
  xpc_release(v5);
  return v14;
}

{
  xpc_object_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  xpc_object_t value;
  NSObject *v13;
  uint64_t v14;
  int v16;
  uint64_t v17;
  xpc_object_t v18;
  int v19;
  uint64_t v20;
  xpc_object_t v21;
  const char *v22;
  xpc_object_t *v23;
  void *v24;
  long long v25;
  xpc_object_t *v26;
  xpc_object_t v27;
  char *v28;
  size_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  xpc_object_t *v34;
  xpc_object_t object[4];
  unsigned char v36[24];
  uint64_t v37;

  int v37 = *MEMORY[0x1E4F143B8];
  xpc_object_t v5 = (xpc_object_t)*a3;
  uint64_t v6 = MEMORY[0x1E4F14590];
  if (*a3 && MEMORY[0x1C8795EB0](*a3) == v6) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t v5 = xpc_null_create();
  }
  if (MEMORY[0x1C8795EB0](v5) != v6)
  {
    uint64_t v7 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LOWORD(object[0]) = 0;
      _os_log_error_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_ERROR, "Failed: Expected data needs to be dictionary in low power event handling", (uint8_t *)object, 2u);
    }
    goto LABEL_14;
  }
  long long v8 = (const char *)*MEMORY[0x1E4F4C668];
  if (!xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E4F4C668])
    || (xpc_object_t v9 = (const char *)*MEMORY[0x1E4F4C678], !xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E4F4C678]))
    || (uint64_t v10 = (const char *)*MEMORY[0x1E4F4C3C0], !xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E4F4C3C0])))
  {
    uint32_t v13 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
LABEL_14:
      uint64_t v14 = 0;
      goto LABEL_15;
    }
    uint64_t v28 = (char *)MEMORY[0x1C8795DE0](v5);
    memset(object, 170, 24);
    xpc_object_t v29 = strlen(v28);
    if (v29 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    int v30 = (void *)v29;
    if (v29 >= 0x17)
    {
      uint64_t v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v29 | 7) != 0x17) {
        uint64_t v32 = v29 | 7;
      }
      uint64_t v33 = v32 + 1;
      int v31 = operator new(v32 + 1);
      object[1] = v30;
      xpc_object_t object[2] = (xpc_object_t)(v33 | 0x8000000000000000);
      object[0] = v31;
    }
    else
    {
      HIBYTE(object[2]) = v29;
      int v31 = object;
      if (!v29) {
        goto LABEL_48;
      }
    }
    memcpy(v31, v28, (size_t)v30);
LABEL_48:
    *((unsigned char *)v30 + (void)v31) = 0;
    free(v28);
    unint64_t v34 = object;
    if (SHIBYTE(object[2]) < 0) {
      unint64_t v34 = (xpc_object_t *)object[0];
    }
    *(_DWORD *)int v36 = 136315138;
    *(void *)&v36[4] = v34;
    _os_log_error_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_ERROR, "Failed: One of elements of low power event is missing: %s", v36, 0xCu);
    if (SHIBYTE(object[2]) < 0) {
      operator delete(object[0]);
    }
    goto LABEL_14;
  }
  uint64_t v11 = *a2;
  xpc_object_t value = xpc_dictionary_get_value(v5, v8);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  int v16 = xpc::dyn_cast_or_default((xpc *)object, 0);
  *(_DWORD *)(v11 + 36) |= 2u;
  *(_DWORD *)(v11 + 16) = v16;
  xpc_release(object[0]);
  uint64_t v17 = *a2;
  xpc_object_t v18 = xpc_dictionary_get_value(v5, v9);
  object[0] = v18;
  if (v18) {
    xpc_retain(v18);
  }
  else {
    object[0] = xpc_null_create();
  }
  int v19 = xpc::dyn_cast_or_default((xpc *)object, 0);
  *(_DWORD *)(v17 + 36) |= 4u;
  *(_DWORD *)(v17 + 20) = v19;
  xpc_release(object[0]);
  uint64_t v20 = *a2;
  xpc_object_t v21 = xpc_dictionary_get_value(v5, v10);
  *(void *)int v36 = v21;
  if (v21) {
    xpc_retain(v21);
  }
  else {
    *(void *)int v36 = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)object, (xpc *)v36, (const object *)"", v22);
  *(_DWORD *)(v20 + 36) |= 8u;
  xpc_object_t v23 = *(xpc_object_t **)(v20 + 24);
  if (v23 == (xpc_object_t *)MEMORY[0x1E4FBA920])
  {
    xpc_object_t v23 = (xpc_object_t *)operator new(0x18uLL);
    *xpc_object_t v23 = 0;
    v23[1] = 0;
    void v23[2] = 0;
    *(void *)(v20 + 24) = v23;
    size_t v24 = (void *)HIBYTE(object[2]);
    if ((*((char *)v23 + 23) & 0x80000000) == 0)
    {
LABEL_26:
      if ((v24 & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v23, object[0], (size_t)object[1]);
      }
      else
      {
        uint64_t v25 = *(_OWORD *)object;
        void v23[2] = object[2];
        *(_OWORD *)xpc_object_t v23 = v25;
      }
      goto LABEL_41;
    }
LABEL_29:
    if ((char)v24 >= 0) {
      xpc_object_t v26 = object;
    }
    else {
      xpc_object_t v26 = (xpc_object_t *)object[0];
    }
    if ((char)v24 >= 0) {
      uint64_t v27 = v24;
    }
    else {
      uint64_t v27 = object[1];
    }
    std::string::__assign_no_alias<false>(v23, v26, (size_t)v27);
    goto LABEL_41;
  }
  if (v23 != object)
  {
    size_t v24 = (void *)HIBYTE(object[2]);
    if ((*((char *)v23 + 23) & 0x80000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_29;
  }
LABEL_41:
  if (SHIBYTE(object[2]) < 0) {
    operator delete(object[0]);
  }
  xpc_release(*(xpc_object_t *)v36);
  uint64_t v14 = 1;
LABEL_15:
  xpc_release(v5);
  return v14;
}

{
  xpc_object_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  xpc_object_t value;
  NSObject *v13;
  uint64_t v14;
  int v16;
  uint64_t v17;
  xpc_object_t v18;
  int v19;
  uint64_t v20;
  xpc_object_t v21;
  int v22;
  char *v23;
  size_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  xpc_object_t *v29;
  xpc_object_t object[4];
  uint8_t buf[4];
  xpc_object_t *v32;
  uint64_t v33;

  uint64_t v33 = *MEMORY[0x1E4F143B8];
  xpc_object_t v5 = (xpc_object_t)*a3;
  uint64_t v6 = MEMORY[0x1E4F14590];
  if (*a3 && MEMORY[0x1C8795EB0](*a3) == v6) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t v5 = xpc_null_create();
  }
  if (MEMORY[0x1C8795EB0](v5) != v6)
  {
    uint64_t v7 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LOWORD(object[0]) = 0;
      _os_log_error_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_ERROR, "Failed: Expected data needs to be dictionary in wake info handling", (uint8_t *)object, 2u);
    }
    goto LABEL_14;
  }
  long long v8 = (const char *)*MEMORY[0x1E4F4CB28];
  if (!xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E4F4CB28])
    || (xpc_object_t v9 = (const char *)*MEMORY[0x1E4F4CF00], !xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E4F4CF00]))
    || (uint64_t v10 = (const char *)*MEMORY[0x1E4F4CE00], !xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E4F4CE00])))
  {
    uint32_t v13 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
LABEL_14:
      uint64_t v14 = 0;
      goto LABEL_15;
    }
    xpc_object_t v23 = (char *)MEMORY[0x1C8795DE0](v5);
    memset(object, 170, 24);
    size_t v24 = strlen(v23);
    if (v24 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v25 = (void *)v24;
    if (v24 >= 0x17)
    {
      uint64_t v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v24 | 7) != 0x17) {
        uint64_t v27 = v24 | 7;
      }
      uint64_t v28 = v27 + 1;
      xpc_object_t v26 = operator new(v27 + 1);
      object[1] = v25;
      xpc_object_t object[2] = (xpc_object_t)(v28 | 0x8000000000000000);
      object[0] = v26;
    }
    else
    {
      HIBYTE(object[2]) = v24;
      xpc_object_t v26 = object;
      if (!v24) {
        goto LABEL_32;
      }
    }
    memcpy(v26, v23, (size_t)v25);
LABEL_32:
    *((unsigned char *)v25 + (void)v26) = 0;
    free(v23);
    xpc_object_t v29 = object;
    if (SHIBYTE(object[2]) < 0) {
      xpc_object_t v29 = (xpc_object_t *)object[0];
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v32 = v29;
    _os_log_error_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_ERROR, "Failed: One of elements of wake info is missing: %s", buf, 0xCu);
    if (SHIBYTE(object[2]) < 0) {
      operator delete(object[0]);
    }
    goto LABEL_14;
  }
  uint64_t v11 = *a2;
  xpc_object_t value = xpc_dictionary_get_value(v5, v8);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  int v16 = xpc::dyn_cast_or_default((xpc *)object, 0);
  *(_DWORD *)(v11 + 32) |= 2u;
  *(_DWORD *)(v11 + 16) = v16;
  xpc_release(object[0]);
  uint64_t v17 = *a2;
  xpc_object_t v18 = xpc_dictionary_get_value(v5, v9);
  object[0] = v18;
  if (v18) {
    xpc_retain(v18);
  }
  else {
    object[0] = xpc_null_create();
  }
  int v19 = xpc::dyn_cast_or_default((xpc *)object, 0);
  *(_DWORD *)(v17 + 32) |= 4u;
  *(_DWORD *)(v17 + 20) = v19;
  xpc_release(object[0]);
  uint64_t v20 = *a2;
  xpc_object_t v21 = xpc_dictionary_get_value(v5, v10);
  object[0] = v21;
  if (v21) {
    xpc_retain(v21);
  }
  else {
    object[0] = xpc_null_create();
  }
  char v22 = xpc::dyn_cast_or_default((xpc *)object, 0);
  *(_DWORD *)(v20 + 32) |= 8u;
  *(_DWORD *)(v20 + 24) = v22;
  xpc_release(object[0]);
  uint64_t v14 = 1;
LABEL_15:
  xpc_release(v5);
  return v14;
}

{
  xpc_object_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  xpc_object_t value;
  const char *v12;
  NSObject *v13;
  uint64_t v14;
  void **v16;
  void **v17;
  void *v18;
  long long v19;
  void **v20;
  void *v21;
  uint64_t v22;
  xpc_object_t v23;
  const char *v24;
  void **v25;
  void *v26;
  long long v27;
  void **v28;
  void *v29;
  char *v30;
  size_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  void *__p[4];
  unsigned char object[24];
  uint64_t v39;

  xpc_object_t v39 = *MEMORY[0x1E4F143B8];
  xpc_object_t v5 = (xpc_object_t)*a3;
  uint64_t v6 = MEMORY[0x1E4F14590];
  if (*a3 && MEMORY[0x1C8795EB0](*a3) == v6) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t v5 = xpc_null_create();
  }
  if (MEMORY[0x1C8795EB0](v5) != v6)
  {
    uint64_t v7 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_error_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_ERROR, "Failed: Expected data needs to be dictionary in bb trace handling", (uint8_t *)__p, 2u);
    }
    goto LABEL_13;
  }
  long long v8 = (const char *)*MEMORY[0x1E4F4C8C8];
  if (!xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E4F4C8C8])
    || (xpc_object_t v9 = (const char *)*MEMORY[0x1E4F4CB30], !xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E4F4CB30])))
  {
    uint32_t v13 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
LABEL_13:
      uint64_t v14 = 0;
      goto LABEL_14;
    }
    int v30 = (char *)MEMORY[0x1C8795DE0](v5);
    memset(__p, 170, 24);
    int v31 = strlen(v30);
    if (v31 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v32 = (void *)v31;
    if (v31 >= 0x17)
    {
      unint64_t v34 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v31 | 7) != 0x17) {
        unint64_t v34 = v31 | 7;
      }
      uint64_t v35 = v34 + 1;
      uint64_t v33 = operator new(v34 + 1);
      __p[1] = v32;
      xpc_object_t __p[2] = (void *)(v35 | 0x8000000000000000);
      __p[0] = v33;
    }
    else
    {
      HIBYTE(__p[2]) = v31;
      uint64_t v33 = __p;
      if (!v31) {
        goto LABEL_60;
      }
    }
    memcpy(v33, v30, (size_t)v32);
LABEL_60:
    *((unsigned char *)v32 + (void)v33) = 0;
    free(v30);
    int v36 = __p;
    if (SHIBYTE(__p[2]) < 0) {
      int v36 = (void **)__p[0];
    }
    *(_DWORD *)dispatch_object_t object = 136315138;
    *(void *)&xpc_object_t object[4] = v36;
    _os_log_error_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_ERROR, "Failed: One of elements of bb trace is missing: %s", object, 0xCu);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_13;
  }
  uint64_t v10 = *a2;
  xpc_object_t value = xpc_dictionary_get_value(v5, v8);
  *(void *)dispatch_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    *(void *)dispatch_object_t object = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)__p, (xpc *)object, (const object *)"", v12);
  *(_DWORD *)(v10 + 36) |= 2u;
  int v16 = *(void ***)(v10 + 16);
  uint64_t v17 = (void **)MEMORY[0x1E4FBA920];
  if (v16 == (void **)MEMORY[0x1E4FBA920])
  {
    int v16 = (void **)operator new(0x18uLL);
    *int v16 = 0;
    v16[1] = 0;
    v16[2] = 0;
    *(void *)(v10 + 16) = v16;
    xpc_object_t v18 = (void *)HIBYTE(__p[2]);
    if ((*((char *)v16 + 23) & 0x80000000) == 0)
    {
LABEL_19:
      if ((v18 & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v16, __p[0], (size_t)__p[1]);
      }
      else
      {
        int v19 = *(_OWORD *)__p;
        v16[2] = __p[2];
        *(_OWORD *)int v16 = v19;
      }
      goto LABEL_30;
    }
  }
  else
  {
    if (v16 == __p) {
      goto LABEL_30;
    }
    xpc_object_t v18 = (void *)HIBYTE(__p[2]);
    if ((*((char *)v16 + 23) & 0x80000000) == 0) {
      goto LABEL_19;
    }
  }
  if ((char)v18 >= 0) {
    uint64_t v20 = __p;
  }
  else {
    uint64_t v20 = (void **)__p[0];
  }
  if ((char)v18 >= 0) {
    xpc_object_t v21 = v18;
  }
  else {
    xpc_object_t v21 = __p[1];
  }
  std::string::__assign_no_alias<false>(v16, v20, (size_t)v21);
LABEL_30:
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  xpc_release(*(xpc_object_t *)object);
  char v22 = *a2;
  xpc_object_t v23 = xpc_dictionary_get_value(v5, v9);
  *(void *)dispatch_object_t object = v23;
  if (v23) {
    xpc_retain(v23);
  }
  else {
    *(void *)dispatch_object_t object = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)__p, (xpc *)object, (const object *)"", v24);
  *(_DWORD *)(v22 + 36) |= 4u;
  uint64_t v25 = *(void ***)(v22 + 24);
  if (v25 == v17)
  {
    uint64_t v25 = (void **)operator new(0x18uLL);
    void *v25 = 0;
    v25[1] = 0;
    long long v25[2] = 0;
    *(void *)(v22 + 24) = v25;
    xpc_object_t v26 = (void *)HIBYTE(__p[2]);
    if ((*((char *)v25 + 23) & 0x80000000) == 0)
    {
LABEL_38:
      if ((v26 & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v25, __p[0], (size_t)__p[1]);
      }
      else
      {
        uint64_t v27 = *(_OWORD *)__p;
        long long v25[2] = __p[2];
        *(_OWORD *)uint64_t v25 = v27;
      }
      goto LABEL_49;
    }
LABEL_41:
    if ((char)v26 >= 0) {
      uint64_t v28 = __p;
    }
    else {
      uint64_t v28 = (void **)__p[0];
    }
    if ((char)v26 >= 0) {
      xpc_object_t v29 = v26;
    }
    else {
      xpc_object_t v29 = __p[1];
    }
    std::string::__assign_no_alias<false>(v25, v28, (size_t)v29);
    goto LABEL_49;
  }
  if (v25 != __p)
  {
    xpc_object_t v26 = (void *)HIBYTE(__p[2]);
    if ((*((char *)v25 + 23) & 0x80000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_41;
  }
LABEL_49:
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  xpc_release(*(xpc_object_t *)object);
  uint64_t v14 = 1;
LABEL_14:
  xpc_release(v5);
  return v14;
}

{
  xpc_object_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  xpc_object_t value;
  NSObject *v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  xpc_object_t v17;
  int v18;
  char *v19;
  size_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  xpc_object_t *v25;
  xpc_object_t object[4];
  uint8_t buf[4];
  xpc_object_t *v28;
  uint64_t v29;

  xpc_object_t v29 = *MEMORY[0x1E4F143B8];
  xpc_object_t v5 = (xpc_object_t)*a3;
  uint64_t v6 = MEMORY[0x1E4F14590];
  if (*a3 && MEMORY[0x1C8795EB0](*a3) == v6) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t v5 = xpc_null_create();
  }
  if (MEMORY[0x1C8795EB0](v5) != v6)
  {
    uint64_t v7 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LOWORD(object[0]) = 0;
      _os_log_error_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_ERROR, "Failed: Expected data needs to be dictionary in Accessory Information reporting.", (uint8_t *)object, 2u);
    }
    goto LABEL_13;
  }
  long long v8 = (const char *)*MEMORY[0x1E4F4C528];
  if (!xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E4F4C528])
    || (xpc_object_t v9 = (const char *)*MEMORY[0x1E4F4C650], !xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E4F4C650])))
  {
    char v12 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
LABEL_13:
      uint32_t v13 = 0;
      goto LABEL_14;
    }
    int v19 = (char *)MEMORY[0x1C8795DE0](v5);
    memset(object, 170, 24);
    uint64_t v20 = strlen(v19);
    if (v20 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    xpc_object_t v21 = (void *)v20;
    if (v20 >= 0x17)
    {
      xpc_object_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17) {
        xpc_object_t v23 = v20 | 7;
      }
      size_t v24 = v23 + 1;
      char v22 = operator new(v23 + 1);
      object[1] = v21;
      xpc_object_t object[2] = (xpc_object_t)(v24 | 0x8000000000000000);
      object[0] = v22;
    }
    else
    {
      HIBYTE(object[2]) = v20;
      char v22 = object;
      if (!v20) {
        goto LABEL_28;
      }
    }
    memcpy(v22, v19, (size_t)v21);
LABEL_28:
    *((unsigned char *)v21 + (void)v22) = 0;
    free(v19);
    uint64_t v25 = object;
    if (SHIBYTE(object[2]) < 0) {
      uint64_t v25 = (xpc_object_t *)object[0];
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v28 = v25;
    _os_log_error_impl(&dword_1C59C6000, v12, OS_LOG_TYPE_ERROR, "Failed: One of elements is missing in Accessory Information reporting: %s", buf, 0xCu);
    if (SHIBYTE(object[2]) < 0) {
      operator delete(object[0]);
    }
    goto LABEL_13;
  }
  uint64_t v10 = *a2;
  xpc_object_t value = xpc_dictionary_get_value(v5, v8);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  int v15 = xpc::dyn_cast_or_default((xpc *)object, 0);
  *(_DWORD *)(v10 + 28) |= 2u;
  *(_DWORD *)(v10 + 16) = v15;
  xpc_release(object[0]);
  int v16 = *a2;
  uint64_t v17 = xpc_dictionary_get_value(v5, v9);
  object[0] = v17;
  if (v17) {
    xpc_retain(v17);
  }
  else {
    object[0] = xpc_null_create();
  }
  xpc_object_t v18 = xpc::dyn_cast_or_default((xpc *)object, 0);
  *(_DWORD *)(v16 + 28) |= 4u;
  *(_DWORD *)(v16 + 20) = v18;
  xpc_release(object[0]);
  uint32_t v13 = 1;
LABEL_14:
  xpc_release(v5);
  return v13;
}