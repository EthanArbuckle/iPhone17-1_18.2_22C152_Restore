void sub_1C5A3BF88(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3BF94(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3BFA0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3BFAC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3BFB8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3BFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  if (a2)
  {
    v57 = *v55;
    if (*v55)
    {
      uint64_t v58 = (uint64_t)v55[1];
      v59 = *v55;
      if ((void *)v58 != v57)
      {
        do
        {
          v58 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v58);
        }
        while ((void *)v58 != v57);
        v59 = *v55;
      }
      v55[1] = v57;
      operator delete(v59);
    }
    operator delete(v55);
    boost::signals2::detail::connection_body_base::~connection_body_base(v56);
    operator delete(v56);
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&a55);
    boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~slot(&a39);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~DispatchSlot((uint64_t)&a37);
    JUMPOUT(0x1C5A3C998);
  }
  _Unwind_Resume(a1);
}

void sub_1C5A3C00C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3C018(_Unwind_Exception *a1)
{
}

void sub_1C5A3C02C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3C038(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3C044(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3C050(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3C05C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  if (a2)
  {
    boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)&a55);
    (*(void (**)(uint64_t))(*(void *)v55 + 8))(v55);
    std::__shared_weak_count::__release_weak(a13);
    JUMPOUT(0x1C5A3C988);
  }
  _Unwind_Resume(a1);
}

void sub_1C5A3C078(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3C084(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3C090(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3C09C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3C0A8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3C0B4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3C0C0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3C0CC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3C0D8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3C0E4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3C0F0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3C0FC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3C108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    v11 = (atomic_uint *)__p[3];
    if (v11)
    {
      if (atomic_fetch_add(v11 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v11 + 16))(v11);
        if (atomic_fetch_add(v11 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v11 + 24))(v11);
        }
      }
    }
    v12 = (atomic_uint *)__p[1];
    if (v12 && atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v12 + 16))(v12);
      if (atomic_fetch_add(v12 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v12 + 24))(v12);
      }
    }
    operator delete(__p);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1C5A3C230(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3C23C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3C248(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (a2)
  {
    __cxa_end_catch();
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&a55);
    boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~slot(&a39);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~DispatchSlot((uint64_t)&a37);
    JUMPOUT(0x1C5A3C998);
  }
  _Unwind_Resume(a1);
}

void sub_1C5A3C258(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3C264(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy((void *)v2[4]);
    if (v2[2])
    {
      v3 = (void *)*v2;
      v4 = (uint64_t *)v2[1];
      uint64_t v5 = *v4;
      *(void *)(v5 + 8) = *(void *)(*v2 + 8);
      *(void *)v3[1] = v5;
      v2[2] = 0;
      if (v4 != v2)
      {
        do
        {
          v6 = (uint64_t *)v4[1];
          v7 = (atomic_uint *)v4[3];
          if (v7 && atomic_fetch_add(v7 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v7 + 16))(v7);
            if (atomic_fetch_add(v7 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v7 + 24))(v7);
            }
          }
          operator delete(v4);
          v4 = v6;
        }
        while (v6 != v2);
      }
    }
    operator delete(v2);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1C5A3C354(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3C360(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (a2)
  {
    __cxa_end_catch();
    v11 = (atomic_uint *)a11[1];
    if (v11)
    {
      if (atomic_fetch_add(v11 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v11 + 16))(v11);
        if (atomic_fetch_add(v11 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v11 + 24))(v11);
        }
      }
    }
    operator delete(a11);
    JUMPOUT(0x1C5A3C980);
  }
  _Unwind_Resume(a1);
}

void sub_1C5A3C3F4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3C400(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3C40C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (a2)
  {
    operator delete(a11);
    JUMPOUT(0x1C5A3C980);
  }
  _Unwind_Resume(a1);
}

void sub_1C5A3C418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a60 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1C5A3C434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,char a25,uint64_t a26,char a27)
{
  if (a24)
  {
    std::__shared_weak_count::__release_weak(a24);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_1C5A3C464(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3C470(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1C5A3C4B0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (a2)
  {
    __cxa_end_catch();
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&a55);
    boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~slot(&a39);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~DispatchSlot((uint64_t)&a37);
    JUMPOUT(0x1C5A3C998);
  }
  _Unwind_Resume(a1);
}

void sub_1C5A3C4C0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3C4CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    unint64_t v12 = (unint64_t)v11[3];
    if (v12)
    {
      if ((v12 & 1) == 0)
      {
        v13 = *(void (**)(void **, void **, uint64_t))(v12 & 0xFFFFFFFFFFFFFFFELL);
        if (v13) {
          v13(v11 + 4, v11 + 4, 2);
        }
      }
      v11[3] = 0;
    }
    v14 = *v11;
    if (*v11)
    {
      uint64_t v15 = (uint64_t)v11[1];
      v16 = *v11;
      if ((void *)v15 != v14)
      {
        do
        {
          v15 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v15);
        }
        while ((void *)v15 != v14);
        v16 = *v11;
      }
      v11[1] = v14;
      operator delete(v16);
    }
    operator delete(v11);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1C5A3C554(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3C560(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, boost::signals2::detail::connection_body_base *a11)
{
  if (a2)
  {
    __cxa_end_catch();
    v11 = (atomic_uint *)*((void *)a11 + 5);
    if (v11)
    {
      if (atomic_fetch_add(v11 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v11 + 16))(v11);
        if (atomic_fetch_add(v11 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v11 + 24))(v11);
        }
      }
    }
    boost::signals2::detail::connection_body_base::~connection_body_base(a11);
    JUMPOUT(0x1C5A3C8BCLL);
  }
  _Unwind_Resume(a1);
}

void sub_1C5A3C5F4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3C600(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3C60C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C5A3C618);
  }
  _Unwind_Resume(a1);
}

void sub_1C5A3C624(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C5A3C630);
  }
  _Unwind_Resume(a1);
}

void sub_1C5A3C63C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    unint64_t v2 = STACK[0x218];
    if (STACK[0x218])
    {
      if ((uint64_t)(STACK[0x220] - 1) >= 0)
      {
        unint64_t v3 = v2 + 16 * STACK[0x220];
        do
        {
          v4 = *(atomic_uint **)(v3 - 8);
          if (v4)
          {
            if (atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
              if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
              }
            }
          }
          v3 -= 16;
        }
        while (v3 > v2);
      }
      if (STACK[0x210] >= 0xB) {
        operator delete((void *)STACK[0x218]);
      }
    }
    JUMPOUT(0x1C5A3C988);
  }
  _Unwind_Resume(a1);
}

void sub_1C5A3C704(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3C710(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C5A3C718);
  }
  _Unwind_Resume(a1);
}

void sub_1C5A3C744(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C5A3C74CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1C5A3C758(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3C778(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3C784(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (a2)
  {
    boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::~shared_ptr((uint64_t)&a51);
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&a55);
    boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~slot(&a39);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~DispatchSlot((uint64_t)&a37);
    JUMPOUT(0x1C5A3C998);
  }
  _Unwind_Resume(a1);
}

void sub_1C5A3C79C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3C7AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char *__p,char *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (a2)
  {
    boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::~function1(&a55);
    boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>::~function(&a51);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~DispatchSlot((uint64_t)&a49);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~DispatchSlot((uint64_t)&a47);
    if (a42)
    {
      if ((a42 & 1) == 0)
      {
        uint64_t v55 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(a42 & 0xFFFFFFFFFFFFFFFELL);
        if (v55) {
          v55(&a43, &a43, 2);
        }
      }
    }
    if (__p)
    {
      v56 = a40;
      v57 = __p;
      if (a40 != __p)
      {
        do
        {
          v56 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)v56);
        }
        while (v56 != __p);
        v57 = __p;
      }
      operator delete(v57);
    }
    JUMPOUT(0x1C5A3C990);
  }
  _Unwind_Resume(a1);
}

void sub_1C5A3C840(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3C84C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3C85C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3C868(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(v3);
    std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>::~list(v2);
    operator delete(v2);
    JUMPOUT(0x1C5A3C8BCLL);
  }
  _Unwind_Resume(a1);
}

void sub_1C5A3C964(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A3C970(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (!a2) {
    JUMPOUT(0x1C5A3C978);
  }
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock(&a55);
  boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~slot(&a39);
  ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~DispatchSlot(&a37);
  JUMPOUT(0x1C5A3C998);
}

void TraceManager::handleDumpLogsIndication_sync(uint64_t a1, const __CFDictionary **a2)
{
  v4 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Received Dump logs indication from Baseband", buf, 2u);
  }
  memset(buf, 170, 24);
  Timestamp::Timestamp((Timestamp *)buf);
  memset(&__dst, 170, sizeof(__dst));
  uint64_t v5 = (const void *)*MEMORY[0x1E4F4C140];
  size_t v6 = strlen((const char *)*MEMORY[0x1E4F4C140]);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v15 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v15 = v6 | 7;
    }
    uint64_t v16 = v15 + 1;
    p_dst = (std::string *)operator new(v15 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v16 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v6;
    p_dst = &__dst;
    if (!v6)
    {
      __dst.__r_.__value_.__s.__data_[0] = 0;
      CFDictionaryRef v9 = *a2;
      if (*a2) {
        v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        v10 = 0;
      }
      if (v10) {
        goto LABEL_10;
      }
      goto LABEL_21;
    }
  }
  memmove(p_dst, v5, v7);
  p_dst->__r_.__value_.__s.__data_[v7] = 0;
  CFDictionaryRef v9 = *a2;
  if (*a2) {
    v17 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    v17 = 0;
  }
  if (v17)
  {
LABEL_10:
    v49[0] = 0xAAAAAAAAAAAAAAAALL;
    v49[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v49, v9);
    v11 = (const void *)*MEMORY[0x1E4F4C1C8];
    size_t v12 = strlen((const char *)*MEMORY[0x1E4F4C1C8]);
    if (v12 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    v13 = (void *)v12;
    if (v12 >= 0x17)
    {
      uint64_t v19 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17) {
        uint64_t v19 = v12 | 7;
      }
      uint64_t v20 = v19 + 1;
      v14 = operator new(v19 + 1);
      __p[1] = v13;
      unint64_t v47 = v20 | 0x8000000000000000;
      __p[0] = v14;
    }
    else
    {
      HIBYTE(v47) = v12;
      v14 = __p;
      if (!v12)
      {
LABEL_26:
        *((unsigned char *)v13 + (void)v14) = 0;
        ctu::cf::map_adapter::getString();
        if (SHIBYTE(v48[2]) >= 0) {
          v21 = v48;
        }
        else {
          v21 = (void **)v48[0];
        }
        if (SHIBYTE(v48[2]) >= 0) {
          std::string::size_type v22 = HIBYTE(v48[2]);
        }
        else {
          std::string::size_type v22 = (std::string::size_type)v48[1];
        }
        std::string::append(&__dst, (const std::string::value_type *)v21, v22);
        if (SHIBYTE(v48[2]) < 0)
        {
          operator delete(v48[0]);
          if ((SHIBYTE(v47) & 0x80000000) == 0) {
            goto LABEL_34;
          }
        }
        else if ((SHIBYTE(v47) & 0x80000000) == 0)
        {
          goto LABEL_34;
        }
        operator delete(__p[0]);
LABEL_34:
        memset(v48, 170, sizeof(v48));
        HIBYTE(v47) = 0;
        LOBYTE(__p[0]) = 0;
        ctu::cf::map_adapter::getString();
        if (SHIBYTE(v47) < 0) {
          operator delete(__p[0]);
        }
        LODWORD(__p[0]) = 1;
        v23 = (const char *)radio::asString();
        v24 = v23;
        int v25 = SHIBYTE(v48[2]);
        if (SHIBYTE(v48[2]) >= 0) {
          size_t v26 = HIBYTE(v48[2]);
        }
        else {
          size_t v26 = (size_t)v48[1];
        }
        if (v26 == strlen(v23))
        {
          if (SHIBYTE(v48[2]) >= 0) {
            v27 = v48;
          }
          else {
            v27 = (void **)v48[0];
          }
          if (!memcmp(v27, v24, v26)) {
            int64_t v18 = 5;
          }
          else {
            int64_t v18 = 2;
          }
          if ((v25 & 0x80000000) == 0) {
            goto LABEL_50;
          }
        }
        else
        {
          int64_t v18 = 2;
          if ((SHIBYTE(v48[2]) & 0x80000000) == 0)
          {
LABEL_50:
            MEMORY[0x1C87942E0](v49);
            goto LABEL_51;
          }
        }
        operator delete(v48[0]);
        goto LABEL_50;
      }
    }
    memmove(v14, v11, (size_t)v13);
    goto LABEL_26;
  }
LABEL_21:
  int64_t v18 = 2;
LABEL_51:
  xpc_object_t v28 = xpc_dictionary_create(0, 0, 0);
  if (v28 || (xpc_object_t v28 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v28) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v28);
      xpc_object_t v29 = v28;
    }
    else
    {
      xpc_object_t v29 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v29 = xpc_null_create();
    xpc_object_t v28 = 0;
  }
  xpc_release(v28);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v30 = &__dst;
  }
  else {
    v30 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v31 = xpc_string_create((const char *)v30);
  if (!v31) {
    xpc_object_t v31 = xpc_null_create();
  }
  xpc_dictionary_set_value(v29, (const char *)*MEMORY[0x1E4F4CA98], v31);
  xpc_object_t v32 = xpc_null_create();
  xpc_release(v31);
  xpc_release(v32);
  xpc_object_t v33 = xpc_int64_create(v18);
  if (!v33) {
    xpc_object_t v33 = xpc_null_create();
  }
  xpc_dictionary_set_value(v29, (const char *)*MEMORY[0x1E4F4C180], v33);
  xpc_object_t v34 = xpc_null_create();
  xpc_release(v33);
  xpc_release(v34);
  Timestamp::asString((uint64_t)buf, 0, 9, v48);
  if (SHIBYTE(v48[2]) >= 0) {
    v35 = v48;
  }
  else {
    v35 = (void **)v48[0];
  }
  xpc_object_t v36 = xpc_string_create((const char *)v35);
  if (!v36) {
    xpc_object_t v36 = xpc_null_create();
  }
  xpc_dictionary_set_value(v29, (const char *)*MEMORY[0x1E4F4C4C8], v36);
  xpc_object_t v37 = xpc_null_create();
  xpc_release(v36);
  xpc_release(v37);
  if (SHIBYTE(v48[2]) < 0) {
    operator delete(v48[0]);
  }
  v38 = (const void *)*MEMORY[0x1E4F4C748];
  size_t v39 = strlen((const char *)*MEMORY[0x1E4F4C748]);
  if (v39 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  v40 = (void *)v39;
  if (v39 >= 0x17)
  {
    uint64_t v42 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v39 | 7) != 0x17) {
      uint64_t v42 = v39 | 7;
    }
    uint64_t v43 = v42 + 1;
    v41 = operator new(v42 + 1);
    v48[1] = v40;
    v48[2] = (void *)(v43 | 0x8000000000000000);
    v48[0] = v41;
LABEL_81:
    memmove(v41, v38, (size_t)v40);
    *((unsigned char *)v40 + (void)v41) = 0;
    xpc_object_t object = v29;
    if (v29) {
      goto LABEL_77;
    }
    goto LABEL_82;
  }
  HIBYTE(v48[2]) = v39;
  v41 = v48;
  if (v39) {
    goto LABEL_81;
  }
  LOBYTE(v48[0]) = 0;
  xpc_object_t object = v29;
  if (v29)
  {
LABEL_77:
    xpc_retain(v29);
    goto LABEL_83;
  }
LABEL_82:
  xpc_object_t object = xpc_null_create();
LABEL_83:
  v44 = 0;
  Service::runCommand(a1, (uint64_t)v48, &object, &v44);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(v48[2]) < 0) {
    operator delete(v48[0]);
  }
  xpc_release(v29);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)buf, *(void **)&buf[8]);
}

void sub_1C5A3CF78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C87942E0](&a24);
  if (a31 < 0)
  {
    operator delete(a26);
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v31 - 96, *(void **)(v31 - 88));
    _Unwind_Resume(a1);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v31 - 96, *(void **)(v31 - 88));
  _Unwind_Resume(a1);
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    size_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    size_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void ___ZN12TraceManager4initEv_block_invoke_2(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  unint64_t v2 = (const void *)*MEMORY[0x1E4F4F910];
  size_t v3 = strlen((const char *)*MEMORY[0x1E4F4F910]);
  if (v3 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v4 = v3;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    p_p = operator new(v6 + 1);
    *(void *)&long long v19 = v4;
    *((void *)&v19 + 1) = v7 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_8;
  }
  HIBYTE(v19) = v3;
  p_p = &__p;
  if (v3) {
LABEL_8:
  }
    memmove(p_p, v2, v4);
  *((unsigned char *)p_p + v4) = 0;
  uint64_t v8 = (config::hw *)support::fs::removeDirContents((const char *)&__p, 0);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  if (config::hw::watch(v8)
    && (TelephonyUtilIsInternalBuild() & 1) == 0
    && (TelephonyUtilIsCarrierBuild() & 1) == 0)
  {
    CFDictionaryRef v9 = (const void *)*MEMORY[0x1E4F4F928];
    size_t v10 = strlen((const char *)*MEMORY[0x1E4F4F928]);
    if (v10 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v11 = v10;
    if (v10 >= 0x17)
    {
      uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17) {
        uint64_t v13 = v10 | 7;
      }
      uint64_t v14 = v13 + 1;
      size_t v12 = operator new(v13 + 1);
      *(void *)&long long v19 = v11;
      *((void *)&v19 + 1) = v14 | 0x8000000000000000;
      __p = v12;
    }
    else
    {
      HIBYTE(v19) = v10;
      size_t v12 = &__p;
      if (!v10) {
        goto LABEL_22;
      }
    }
    memmove(v12, v9, v11);
LABEL_22:
    *((unsigned char *)v12 + v11) = 0;
    int v15 = support::fs::removeDirContents((const char *)&__p, 0x708uLL);
    if (SHIBYTE(v19) < 0) {
      operator delete(__p);
    }
    uint64_t v16 = *(NSObject **)(v1 + 88);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v17 = "failed";
      if (v15) {
        v17 = "success";
      }
      __p = (void *)0x1E04000202;
      LOWORD(v19) = 2080;
      *(void *)((char *)&v19 + 2) = v17;
      _os_log_impl(&dword_1C59C6000, v16, OS_LOG_TYPE_DEFAULT, "#I Deleting telephony log files older than %d mins %s", (uint8_t *)&__p, 0x12u);
    }
  }
}

void sub_1C5A3D398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void TraceManager::setupDumpLogsIndication_sync(NSObject **this)
{
  if (!capabilities::trace::supportsDumpLogIndication((capabilities::trace *)this)) {
    return;
  }
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v14 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v2 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v3 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)buf, v2);
    long long v4 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    size_t v5 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v4;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    uint64_t v3 = off_1EBBDCA08;
  }
  uint64_t v7 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v3 + 16))(&v11, v3);
  unint64_t v13 = 0;
  uint64_t v14 = 0;
  if (v12)
  {
    uint64_t v14 = std::__shared_weak_count::lock(v12);
    if (v14) {
      unint64_t v13 = v11;
    }
    if (v12) {
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    unint64_t v8 = v13;
    if (v13) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v8 = v13;
    if (v13)
    {
LABEL_20:
      CFDictionaryRef v9 = this[11];
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEFAULT, "#I Enabling Dump logs indication", buf, 2u);
      }
      (*(void (**)(unint64_t))(*(void *)v8 + 200))(v8);
    }
  }
  size_t v10 = v14;
  if (v14)
  {
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1C5A3D658(_Unwind_Exception *a1)
{
}

void sub_1C5A3D674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C5A3D688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void **xpc::dict::dict(void **a1, void **a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    *a1 = xpc_null_create();
  }
  return a1;
}

void xpc::dict::~dict(xpc_object_t *this)
{
  *this = 0;
}

const char *TraceManager::getName(TraceManager *this)
{
  return "trace.mgr";
}

char *TraceManager::getShutdownStages@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = (char *)operator new(3uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *(_WORD *)result = 512;
  result[2] = 3;
  *a1 = result;
  return result;
}

void TraceManager::shutdown(uint64_t a1, int a2, NSObject **a3)
{
  if (a2 == 3)
  {
    uint64_t v6 = (uint64_t *)(a1 + 120);
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 1174405120;
    v10[2] = ___ZN12TraceManager8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_14;
    v10[3] = &__block_descriptor_tmp_17_0;
    uint64_t v7 = *a3;
    v10[4] = a1;
    dispatch_group_t group = v7;
    if (v7)
    {
      dispatch_retain(v7);
      dispatch_group_enter(group);
    }
    ctu::SharedSynchronizable<TraceManager>::execute_wrapped(v6, (uint64_t)v10);
    if (group)
    {
      dispatch_group_leave(group);
      size_t v5 = group;
      if (group) {
        goto LABEL_18;
      }
    }
  }
  else
  {
    if (a2 != 2)
    {
      if (a2) {
        return;
      }
      uint64_t v3 = (uint64_t *)(a1 + 120);
      v14[0] = MEMORY[0x1E4F143A8];
      v14[1] = 1174405120;
      v14[2] = ___ZN12TraceManager8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
      v14[3] = &__block_descriptor_tmp_9_1;
      long long v4 = *a3;
      v14[4] = a1;
      dispatch_group_t v15 = v4;
      if (v4)
      {
        dispatch_retain(v4);
        dispatch_group_enter(v15);
      }
      ctu::SharedSynchronizable<TraceManager>::execute_wrapped(v3, (uint64_t)v14);
      if (!v15) {
        return;
      }
      dispatch_group_leave(v15);
      size_t v5 = v15;
      if (!v15) {
        return;
      }
LABEL_18:
      dispatch_release(v5);
      return;
    }
    unint64_t v8 = (uint64_t *)(a1 + 120);
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 1174405120;
    v12[2] = ___ZN12TraceManager8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_10;
    v12[3] = &__block_descriptor_tmp_13_3;
    CFDictionaryRef v9 = *a3;
    v12[4] = a1;
    dispatch_group_t object = v9;
    if (v9)
    {
      dispatch_retain(v9);
      dispatch_group_enter(object);
    }
    ctu::SharedSynchronizable<TraceManager>::execute_wrapped(v8, (uint64_t)v12);
    if (object)
    {
      dispatch_group_leave(object);
      size_t v5 = object;
      if (object) {
        goto LABEL_18;
      }
    }
  }
}

void ___ZN12TraceManager8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 32);
  xpc_object_t v3 = xpc_null_create();
  uint64_t v4 = *MEMORY[0x1E4F47130];
  size_t v5 = *(NSObject **)(a1 + 40);
  uint64_t v7 = v5;
  xpc_object_t object = v3;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v5);
  }
  v6[0] = 0;
  v6[1] = 0;
  TraceManager::runOnHelper_sync(v2, (const char *)9, v4, 0x1F40u, 0, &object, &v7, v6);
  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }
  xpc_release(object);
}

void sub_1C5A3DA0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a9);
  if (v12)
  {
    dispatch_group_leave(v12);
    dispatch_release(v12);
  }
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback(uint64_t a1)
{
  unint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void ___ZN12TraceManager8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_10(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (xpc_object_t v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v3) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v3);
      xpc_object_t v4 = v3;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v3 = 0;
  }
  xpc_release(v3);
  size_t v5 = (const char *)(v2 + 168);
  if (*(char *)(v2 + 191) < 0) {
    size_t v5 = *(const char **)v5;
  }
  xpc_object_t v6 = xpc_string_create(v5);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E4F4C488], v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  xpc_object_t object = v4;
  if (v4)
  {
    xpc_retain(v4);
    uint64_t v8 = *MEMORY[0x1E4F471A8];
    CFDictionaryRef v9 = *(NSObject **)(a1 + 40);
    unint64_t v11 = v9;
    if (!v9) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  xpc_object_t object = xpc_null_create();
  uint64_t v8 = *MEMORY[0x1E4F471A8];
  CFDictionaryRef v9 = *(NSObject **)(a1 + 40);
  unint64_t v11 = v9;
  if (v9)
  {
LABEL_13:
    dispatch_retain(v9);
    dispatch_group_enter(v9);
  }
LABEL_14:
  v10[0] = 0;
  v10[1] = 0;
  TraceManager::runOnHelper_sync((void *)v2, (const char *)9, v8, 0x1388u, 0, &object, &v11, v10);
  if (v9)
  {
    dispatch_group_leave(v9);
    dispatch_release(v9);
  }
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v4);
}

void sub_1C5A3DC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a9);
  if (v13)
  {
    dispatch_group_leave(v13);
    dispatch_release(v13);
  }
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v12);
  _Unwind_Resume(a1);
}

void ___ZN12TraceManager8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_14(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 160);
  *(void *)(v1 + 152) = 0;
  *(void *)(v1 + 160) = 0;
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void TraceManager::initialize(uint64_t *a1, NSObject **a2)
{
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  v11[2] = ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke;
  v11[3] = &__block_descriptor_tmp_45_0;
  xpc_object_t v3 = *a2;
  v11[4] = a1;
  dispatch_group_t group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(group);
  }
  ctu::SharedSynchronizable<TraceManager>::execute_wrapped(a1 + 15, (uint64_t)v11);
  xpc_object_t v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  uint64_t v8 = operator new(8uLL);
  *uint64_t v8 = a1;
  CFDictionaryRef v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  size_t v10 = operator new(0x18uLL);
  *size_t v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<TraceManager>::execute_wrapped<TraceManager::initialize(dispatch::group_session)::$_0>(TraceManager::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TraceManager::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TraceManager::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v2 || (uint64_t v3 = *(void *)(v1 + 120), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  TraceManager::initTraceHelper_sync((TraceManager *)v1);
  xpc_object_t v6 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v6 || (uint64_t v7 = *(void *)(v1 + 120), (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  CFDictionaryRef v9 = v8;
  size_t v10 = (const char **)MEMORY[0x1E4F4CA68];
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  unint64_t v11 = *v10;
  size_t v12 = *(NSObject **)(v1 + 136);
  if (v12) {
    dispatch_retain(*(dispatch_object_t *)(v1 + 136));
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_19;
  aBlock[4] = v1;
  if (v11)
  {
    if (v12)
    {
      unint64_t v13 = _Block_copy(aBlock);
      uint64_t v14 = v13;
      dispatch_object_t v54 = v12;
      std::string __dst = (void **)MEMORY[0x1E4F143A8];
      uint64_t v48 = 1174405120;
      unint64_t v49 = (unint64_t)___ZN9analytics29registerCallbackForTimedEventI12TraceManagerEEvPKcNS_9TimerTypeENSt3__18weak_ptrIT_EEN8dispatch5queueEU13block_pointerFvNS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEE_block_invoke;
      v50 = &__block_descriptor_tmp_163;
      uint64_t v51 = v7;
      v52 = v9;
      atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      if (v13) {
        dispatch_group_t v15 = _Block_copy(v13);
      }
      else {
        dispatch_group_t v15 = 0;
      }
      v53 = v15;
      analytics::registerCallbackForTimedEventImpl(v11);
      if (v54) {
        dispatch_release(v54);
      }
      if (v53) {
        _Block_release(v53);
      }
      if (v52) {
        std::__shared_weak_count::__release_weak(v52);
      }
      if (v14) {
        _Block_release(v14);
      }
    }
  }
  else if (v12)
  {
    dispatch_release(v12);
  }
  std::__shared_weak_count::__release_weak(v9);
  uint64_t v16 = (const void *)*MEMORY[0x1E4F4D070];
  size_t v17 = strlen((const char *)*MEMORY[0x1E4F4D070]);
  if (v17 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v18 = v17;
  if (v17 >= 0x17)
  {
    uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v20 = v17 | 7;
    }
    uint64_t v21 = v20 + 1;
    p_dst = (void **)operator new(v20 + 1);
    uint64_t v48 = v18;
    unint64_t v49 = v21 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_33;
  }
  HIBYTE(v49) = v17;
  p_dst = (void **)&__dst;
  if (v17) {
LABEL_33:
  }
    memmove(p_dst, v16, v18);
  *((unsigned char *)p_dst + v18) = 0;
  v43[0] = MEMORY[0x1E4F143A8];
  v43[1] = 1174405120;
  v43[2] = ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_3;
  v43[3] = &__block_descriptor_tmp_26_0;
  v43[4] = v1;
  v43[5] = v3;
  v44 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::string::size_type v22 = _Block_copy(v43);
  v45 = v22;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v45);
  if (v22) {
    _Block_release(v22);
  }
  if (SHIBYTE(v49) < 0) {
    operator delete(__dst);
  }
  v23 = (const void *)*MEMORY[0x1E4F4D060];
  size_t v24 = strlen((const char *)*MEMORY[0x1E4F4D060]);
  if (v24 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v25 = v24;
  if (v24 >= 0x17)
  {
    uint64_t v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17) {
      uint64_t v27 = v24 | 7;
    }
    uint64_t v28 = v27 + 1;
    size_t v26 = (void **)operator new(v27 + 1);
    uint64_t v48 = v25;
    unint64_t v49 = v28 | 0x8000000000000000;
    std::string __dst = v26;
    goto LABEL_45;
  }
  HIBYTE(v49) = v24;
  size_t v26 = (void **)&__dst;
  if (v24) {
LABEL_45:
  }
    memmove(v26, v23, v25);
  *((unsigned char *)v26 + v25) = 0;
  v40[0] = MEMORY[0x1E4F143A8];
  v40[1] = 1174405120;
  v40[2] = ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_27;
  v40[3] = &__block_descriptor_tmp_36_0;
  v40[4] = v1;
  v40[5] = v3;
  v41 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v29 = _Block_copy(v40);
  uint64_t v42 = v29;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v42);
  if (v29) {
    _Block_release(v29);
  }
  if (SHIBYTE(v49) < 0) {
    operator delete(__dst);
  }
  v30 = (const void *)*MEMORY[0x1E4F4CF48];
  size_t v31 = strlen((const char *)*MEMORY[0x1E4F4CF48]);
  if (v31 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v32 = v31;
  if (v31 >= 0x17)
  {
    uint64_t v34 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31 | 7) != 0x17) {
      uint64_t v34 = v31 | 7;
    }
    uint64_t v35 = v34 + 1;
    xpc_object_t v33 = (void **)operator new(v34 + 1);
    uint64_t v48 = v32;
    unint64_t v49 = v35 | 0x8000000000000000;
    std::string __dst = v33;
    goto LABEL_57;
  }
  HIBYTE(v49) = v31;
  xpc_object_t v33 = (void **)&__dst;
  if (v31) {
LABEL_57:
  }
    memmove(v33, v30, v32);
  *((unsigned char *)v33 + v32) = 0;
  v37[0] = MEMORY[0x1E4F143A8];
  v37[1] = 1174405120;
  v37[2] = ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_37;
  v37[3] = &__block_descriptor_tmp_42_0;
  v37[4] = v1;
  v37[5] = v3;
  v38 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v36 = _Block_copy(v37);
  size_t v39 = v36;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v39);
  if (v36) {
    _Block_release(v36);
  }
  if (SHIBYTE(v49) < 0) {
    operator delete(__dst);
  }
  if (v38) {
    std::__shared_weak_count::__release_weak(v38);
  }
  if (v41) {
    std::__shared_weak_count::__release_weak(v41);
  }
  if (v44) {
    std::__shared_weak_count::__release_weak(v44);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C5A3E484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
  xpc_object_t v37 = *(const void **)(v35 - 112);
  if (v37) {
    _Block_release(v37);
  }
  v38 = *(std::__shared_weak_count **)(v35 - 120);
  if (v38)
  {
    std::__shared_weak_count::__release_weak(v38);
    size_t v39 = *(NSObject **)(v35 - 104);
    if (!v39)
    {
LABEL_5:
      if (!v34)
      {
LABEL_10:
        std::__shared_weak_count::__release_weak(v33);
        std::__shared_weak_count::__release_weak(v32);
        _Unwind_Resume(a1);
      }
LABEL_9:
      _Block_release(v34);
      goto LABEL_10;
    }
  }
  else
  {
    size_t v39 = *(NSObject **)(v35 - 104);
    if (!v39) {
      goto LABEL_5;
    }
  }
  dispatch_release(v39);
  if (!v34) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void sub_1C5A3E5EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void TraceManager::initTraceHelper_sync(TraceManager *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v2 || (uint64_t v3 = *((void *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  p_shared_weak_owners = &v4->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  dispatch_group_t v15 = (const void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v16 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN12TraceManager20initTraceHelper_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_99;
  aBlock[4] = this;
  void aBlock[5] = v3;
  uint64_t v14 = v5;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v7 = _Block_copy(aBlock);
  uint64_t v8 = *((void *)this + 17);
  if (v8) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  dispatch_group_t v15 = v7;
  dispatch_object_t v16 = v8;
  if (!v7)
  {
    size_t v10 = 0;
    xpc_object_t object = v8;
    if (!v8) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  size_t v10 = _Block_copy(v7);
  xpc_object_t object = v8;
  if (v8) {
LABEL_9:
  }
    dispatch_retain(v8);
LABEL_10:
  abm::HelperClient::registerForHelperReady();
  CFDictionaryRef v9 = (std::__shared_weak_count *)*((void *)this + 31);
  *((_OWORD *)this + 15) = v12;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v10) {
    _Block_release(v10);
  }
  if (v16) {
    dispatch_release(v16);
  }
  if (v15) {
    _Block_release(v15);
  }
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C5A3E850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a9);
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback(v21 - 48);
  if (a20) {
    std::__shared_weak_count::__release_weak(a20);
  }
  std::__shared_weak_count::__release_weak(v20);
  _Unwind_Resume(a1);
}

void ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  uint64_t v3 = MEMORY[0x1E4F14590];
  if (v2 || (xpc_object_t v2 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v2) == v3)
    {
      xpc_retain(v2);
      xpc_object_t v4 = v2;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v2 = 0;
  }
  xpc_release(v2);
  xpc_object_t v5 = xpc_string_create((const char *)*MEMORY[0x1E4F4C1F8]);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E4F4C1A0], v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  uint64_t v7 = (const char *)*MEMORY[0x1E4F4C2D8];
  xpc_object_t v8 = xpc_string_create((const char *)*MEMORY[0x1E4F4C2D8]);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E4F4C6A8], v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  __val[0] = 0;
  size_t v10 = strlen(v7);
  if (v10 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v11 = (void *)v10;
  if (v10 >= 0x17)
  {
    uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v13 = v10 | 7;
    }
    uint64_t v14 = v13 + 1;
    long long v12 = (xpc_object_t *)operator new(v13 + 1);
    __dst[1] = v11;
    unint64_t v33 = v14 | 0x8000000000000000;
    __dst[0] = v12;
    goto LABEL_18;
  }
  HIBYTE(v33) = v10;
  long long v12 = __dst;
  if (v10) {
LABEL_18:
  }
    memmove(v12, v7, (size_t)v11);
  *((unsigned char *)v11 + (void)v12) = 0;
  memset(&__val[1], 0, 24);
  if (prop::bbtrace::get((char *)__dst, (uint64_t)&__val[1])) {
    util::convert<BOOL>((const std::string *)&__val[1], __val, 0);
  }
  if (__val[24] < 0)
  {
    operator delete(*(void **)&__val[1]);
    if ((SHIBYTE(v33) & 0x80000000) == 0) {
      goto LABEL_23;
    }
  }
  else if ((SHIBYTE(v33) & 0x80000000) == 0)
  {
    goto LABEL_23;
  }
  operator delete(__dst[0]);
LABEL_23:
  std::to_string((std::string *)&__val[1], __val[0]);
  if (__val[24] >= 0) {
    dispatch_group_t v15 = (const char *)&__val[1];
  }
  else {
    dispatch_group_t v15 = *(const char **)&__val[1];
  }
  xpc_object_t v16 = xpc_string_create(v15);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E4F4C800], v16);
  xpc_object_t v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  if (__val[24] < 0) {
    operator delete(*(void **)&__val[1]);
  }
  abm::asString();
  if (__val[24] >= 0) {
    size_t v18 = (const char *)&__val[1];
  }
  else {
    size_t v18 = *(const char **)&__val[1];
  }
  xpc_object_t v19 = xpc_string_create(v18);
  if (!v19) {
    xpc_object_t v19 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E4F4D120], v19);
  xpc_object_t v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  if (__val[24] < 0)
  {
    operator delete(*(void **)&__val[1]);
    xpc_object_t object = v4;
    __dst[0] = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    uint64_t v21 = *(TraceCAReporter **)(v1 + 304);
    if (v4) {
      goto LABEL_37;
    }
  }
  else
  {
    xpc_object_t object = v4;
    __dst[0] = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    uint64_t v21 = *(TraceCAReporter **)(v1 + 304);
    if (v4)
    {
LABEL_37:
      xpc_retain(v4);
      goto LABEL_42;
    }
  }
  xpc_object_t object = xpc_null_create();
LABEL_42:
  TraceCAReporter::prepTraceStats(v21, &object, __dst);
  xpc_release(object);
  xpc_object_t object = 0;
  if (MEMORY[0x1C8795EB0](__dst[0]) != v3) {
    goto LABEL_55;
  }
  std::string::size_type v22 = (const void *)*MEMORY[0x1E4F4C738];
  size_t v23 = strlen((const char *)*MEMORY[0x1E4F4C738]);
  if (v23 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v24 = v23;
  if (v23 >= 0x17)
  {
    uint64_t v27 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17) {
      uint64_t v27 = v23 | 7;
    }
    uint64_t v28 = v27 + 1;
    size_t v25 = (BOOL *)operator new(v27 + 1);
    *(void *)&__val[9] = v24;
    *(void *)&__val[17] = v28 | 0x8000000000000000;
    *(void *)&__val[1] = v25;
LABEL_51:
    memmove(v25, v22, v24);
    v25[v24] = 0;
    xpc_object_t v26 = __dst[0];
    xpc_object_t v30 = __dst[0];
    if (__dst[0]) {
      goto LABEL_47;
    }
    goto LABEL_52;
  }
  __val[24] = v23;
  size_t v25 = &__val[1];
  if (v23) {
    goto LABEL_51;
  }
  __val[1] = 0;
  xpc_object_t v26 = __dst[0];
  xpc_object_t v30 = __dst[0];
  if (__dst[0])
  {
LABEL_47:
    xpc_retain(v26);
    goto LABEL_53;
  }
LABEL_52:
  xpc_object_t v26 = xpc_null_create();
  xpc_object_t v30 = v26;
LABEL_53:
  xpc_object_t v29 = 0;
  Service::runCommand(v1, (uint64_t)&__val[1], &v30, &v29);
  xpc_release(v26);
  xpc_object_t v30 = 0;
  if (__val[24] < 0) {
    operator delete(*(void **)&__val[1]);
  }
LABEL_55:
  xpc_release(__dst[0]);
  xpc_release(v4);
}

void sub_1C5A3ECF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t a11, xpc_object_t object, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  xpc_release(v25);
  if (a24 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  xpc_release(v24);
  _Unwind_Resume(a1);
}

void ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_3(void *a1, void **a2, void **a3)
{
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    xpc_object_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      xpc_object_t v9 = v8;
      uint64_t v10 = a1[5];
      if (!v10) {
        goto LABEL_14;
      }
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 1174405120;
      v15[2] = ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_4;
      v15[3] = &__block_descriptor_tmp_24_0;
      unint64_t v11 = *a2;
      v15[4] = v7;
      xpc_object_t object = v11;
      if (v11)
      {
        xpc_retain(v11);
        long long v12 = *a3;
        if (!*a3) {
          goto LABEL_9;
        }
      }
      else
      {
        xpc_object_t object = xpc_null_create();
        long long v12 = *a3;
        if (!*a3)
        {
LABEL_9:
          aBlock = v12;
          uint64_t v18 = v10;
          xpc_object_t v19 = v9;
          atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
          ctu::SharedSynchronizable<TraceManager>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v15);
          uint64_t v13 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
            uint64_t v14 = aBlock;
            if (!aBlock) {
              goto LABEL_13;
            }
          }
          else
          {
            uint64_t v14 = aBlock;
            if (!aBlock)
            {
LABEL_13:
              xpc_release(object);
              xpc_object_t object = 0;
LABEL_14:
              if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
                std::__shared_weak_count::__release_weak(v9);
              }
              return;
            }
          }
          _Block_release(v14);
          goto LABEL_13;
        }
      }
      long long v12 = _Block_copy(v12);
      goto LABEL_9;
    }
  }
}

void ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_4(uint64_t a1)
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  memset(&v109, 170, sizeof(v109));
  uint64_t v2 = *(void *)(a1 + 32);
  xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x1E4F4C1A0]);
  v108[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    v108[0] = xpc_null_create();
  }
  memset(buf, 0, sizeof(buf));
  xpc::dyn_cast_or_default();
  xpc_release(v108[0]);
  memset(v108, 170, sizeof(v108));
  xpc_object_t v4 = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x1E4F4C6A8]);
  v107[0] = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    v107[0] = xpc_null_create();
  }
  memset(buf, 0, sizeof(buf));
  xpc::dyn_cast_or_default();
  xpc_release(v107[0]);
  memset(v107, 170, sizeof(v107));
  xpc_object_t v5 = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x1E4F4C800]);
  v110.__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    v110.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  memset(buf, 0, sizeof(buf));
  xpc::dyn_cast_or_default();
  xpc_release(v110.__r_.__value_.__l.__data_);
  xpc_object_t v6 = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x1E4F4D180]);
  *(void *)buf = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    *(void *)buf = xpc_null_create();
  }
  int v7 = xpc::dyn_cast_or_default((xpc *)buf, 0);
  xpc_release(*(xpc_object_t *)buf);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v106, v109.__r_.__value_.__l.__data_, v109.__r_.__value_.__l.__size_);
  }
  else {
    std::string v106 = v109;
  }
  char isSupported = abm::trace::isSupported();
  char v9 = isSupported;
  if ((SHIBYTE(v106.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (isSupported) {
      goto LABEL_18;
    }
LABEL_24:
    v110.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v14 = *(void **)(a1 + 40);
    xpc_object_t object = v14;
    if (v14) {
      xpc_retain(v14);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    xpc::bridge((uint64_t *)buf, (xpc *)&object, v15);
    xpc_object_t v19 = *(const void **)buf;
    if (*(void *)buf && (CFTypeID v20 = CFGetTypeID(*(CFTypeRef *)buf), v20 == CFDictionaryGetTypeID()))
    {
      v110.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
      CFRetain(v19);
      uint64_t v21 = *(const void **)buf;
      if (!*(void *)buf)
      {
LABEL_37:
        xpc_release(object);
        std::string::size_type v22 = (const void *)*MEMORY[0x1E4F4CB20];
        size_t v23 = strlen((const char *)*MEMORY[0x1E4F4CB20]);
        if (v23 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v24 = (void *)v23;
        if (v23 >= 0x17)
        {
          uint64_t v27 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v23 | 7) != 0x17) {
            uint64_t v27 = v23 | 7;
          }
          uint64_t v28 = v27 + 1;
          size_t v25 = (void **)operator new(v27 + 1);
          __dst[1] = v24;
          unint64_t v104 = v28 | 0x8000000000000000;
          __dst[0] = v25;
        }
        else
        {
          HIBYTE(v104) = v23;
          size_t v25 = __dst;
          if (!v23)
          {
            LOBYTE(__dst[0]) = 0;
            xpc_object_t v26 = (const void *)v110.__r_.__value_.__r.__words[0];
            CFTypeRef cf = (CFTypeRef)v110.__r_.__value_.__r.__words[0];
            if (!v110.__r_.__value_.__r.__words[0])
            {
LABEL_47:
              aBlock = 0;
              Service::broadcastEvent(v2, (uint64_t)__dst, &cf, (const void **)&aBlock);
              if (aBlock) {
                _Block_release(aBlock);
              }
              if (cf) {
                CFRelease(cf);
              }
              if (SHIBYTE(v104) < 0)
              {
                operator delete(__dst[0]);
                xpc_object_t v29 = *(NSObject **)(v2 + 88);
                if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
                {
LABEL_53:
                  if (!*(void *)(a1 + 48)) {
                    goto LABEL_55;
                  }
                  goto LABEL_54;
                }
              }
              else
              {
                xpc_object_t v29 = *(NSObject **)(v2 + 88);
                if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_53;
                }
              }
              unint64_t v33 = &v109;
              if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                unint64_t v33 = (std::string *)v109.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)buf = 136315138;
              *(void *)&buf[4] = v33;
              _os_log_error_impl(&dword_1C59C6000, v29, OS_LOG_TYPE_ERROR, "Trace not supported: %s", buf, 0xCu);
              if (!*(void *)(a1 + 48)) {
                goto LABEL_55;
              }
LABEL_54:
              xpc_object_t v30 = xpc_null_create();
              uint64_t v31 = *(void *)(a1 + 48);
              *(void *)buf = v30;
              xpc_object_t v32 = xpc_null_create();
              (*(void (**)(uint64_t, uint64_t, uint8_t *))(v31 + 16))(v31, 3760250884, buf);
              xpc_release(*(xpc_object_t *)buf);
              xpc_release(v32);
LABEL_55:
              if (v26) {
                CFRelease(v26);
              }
LABEL_166:
              if ((SHIBYTE(v107[2]) & 0x80000000) == 0) {
                goto LABEL_167;
              }
              goto LABEL_171;
            }
LABEL_46:
            CFRetain(v26);
            goto LABEL_47;
          }
        }
        memmove(v25, v22, (size_t)v24);
        *((unsigned char *)v24 + (void)v25) = 0;
        xpc_object_t v26 = (const void *)v110.__r_.__value_.__r.__words[0];
        CFTypeRef cf = (CFTypeRef)v110.__r_.__value_.__r.__words[0];
        if (!v110.__r_.__value_.__r.__words[0]) {
          goto LABEL_47;
        }
        goto LABEL_46;
      }
    }
    else
    {
      v110.__r_.__value_.__r.__words[0] = 0;
      uint64_t v21 = *(const void **)buf;
      if (!*(void *)buf) {
        goto LABEL_37;
      }
    }
    CFRelease(v21);
    goto LABEL_37;
  }
  operator delete(v106.__r_.__value_.__l.__data_);
  if ((v9 & 1) == 0) {
    goto LABEL_24;
  }
LABEL_18:
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v2 + 88))(v2))
  {
    xpc_object_t v16 = xpc_dictionary_create(0, 0, 0);
    uint64_t v17 = MEMORY[0x1E4F14590];
    if (v16 || (xpc_object_t v16 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C8795EB0](v16) == v17)
      {
        xpc_retain(v16);
        xpc_object_t v18 = v16;
      }
      else
      {
        xpc_object_t v18 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v18 = xpc_null_create();
      xpc_object_t v16 = 0;
    }
    xpc_release(v16);
    xpc_object_t v47 = xpc_int64_create(5000);
    if (!v47) {
      xpc_object_t v47 = xpc_null_create();
    }
    xpc_dictionary_set_value(v18, (const char *)*MEMORY[0x1E4F470A0], v47);
    xpc_object_t v48 = xpc_null_create();
    xpc_release(v47);
    xpc_release(v48);
    if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v49 = &v109;
    }
    else {
      unint64_t v49 = (std::string *)v109.__r_.__value_.__r.__words[0];
    }
    xpc_object_t v50 = xpc_string_create((const char *)v49);
    if (!v50) {
      xpc_object_t v50 = xpc_null_create();
    }
    xpc_dictionary_set_value(v18, (const char *)*MEMORY[0x1E4F470B8], v50);
    xpc_object_t v51 = xpc_null_create();
    xpc_release(v50);
    xpc_release(v51);
    if (SHIBYTE(v108[2]) >= 0) {
      v52 = (const char *)v108;
    }
    else {
      v52 = (const char *)v108[0];
    }
    xpc_object_t v53 = xpc_string_create(v52);
    if (!v53) {
      xpc_object_t v53 = xpc_null_create();
    }
    xpc_dictionary_set_value(v18, (const char *)*MEMORY[0x1E4F470E0], v53);
    xpc_object_t v54 = xpc_null_create();
    xpc_release(v53);
    xpc_release(v54);
    if (SHIBYTE(v107[2]) >= 0) {
      uint64_t v55 = (const char *)v107;
    }
    else {
      uint64_t v55 = (const char *)v107[0];
    }
    xpc_object_t v56 = xpc_string_create(v55);
    if (!v56) {
      xpc_object_t v56 = xpc_null_create();
    }
    xpc_dictionary_set_value(v18, (const char *)*MEMORY[0x1E4F47118], v56);
    xpc_object_t v57 = xpc_null_create();
    xpc_release(v56);
    xpc_release(v57);
    if (v7)
    {
      uint64_t v58 = *(NSObject **)(v2 + 88);
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_1C59C6000, v58, OS_LOG_TYPE_DEBUG, "#D Request to set property with completion", buf, 2u);
      }
      memset(buf, 170, 16);
      v97[0] = MEMORY[0x1E4F143A8];
      v97[1] = 1174405120;
      v97[2] = ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_21;
      v97[3] = &__block_descriptor_tmp_23_1;
      uint64_t v60 = *(void *)(a1 + 56);
      v59 = *(std::__shared_weak_count **)(a1 + 64);
      v97[4] = v2;
      v97[5] = v60;
      v98 = v59;
      if (v59) {
        atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v61 = *(const void **)(a1 + 48);
      if (v61)
      {
        v62 = _Block_copy(v61);
        v63 = *(void **)(a1 + 40);
        v99 = v62;
        xpc_object_t v100 = v63;
        if (v63)
        {
LABEL_107:
          xpc_retain(v63);
          goto LABEL_112;
        }
      }
      else
      {
        v63 = *(void **)(a1 + 40);
        v99 = 0;
        xpc_object_t v100 = v63;
        if (v63) {
          goto LABEL_107;
        }
      }
      xpc_object_t v100 = xpc_null_create();
LABEL_112:
      v64 = _Block_copy(v97);
      uint64_t v65 = *(void *)(v2 + 136);
      if (v65) {
        dispatch_retain(*(dispatch_object_t *)(v2 + 136));
      }
      *(void *)buf = v64;
      *(void *)&buf[8] = v65;
      xpc_object_t v96 = v18;
      if (v18)
      {
        xpc_retain(v18);
        v64 = *(void **)buf;
        v95 = 0;
        if (*(void *)buf)
        {
LABEL_116:
          v66 = _Block_copy(v64);
LABEL_122:
          uint64_t v70 = *MEMORY[0x1E4F47150];
          v71 = *(NSObject **)&buf[8];
          v94[0] = v66;
          v94[1] = *(void **)&buf[8];
          if (*(void *)&buf[8]) {
            dispatch_retain(*(dispatch_object_t *)&buf[8]);
          }
          TraceManager::runOnHelper_sync((void *)v2, (const char *)9, v70, 0, 1, &v96, &v95, v94);
          if (v71) {
            dispatch_release(v71);
          }
          if (v66) {
            _Block_release(v66);
          }
          xpc_release(v96);
          xpc_object_t v96 = 0;
          if (v71) {
            dispatch_release(v71);
          }
          if (v64) {
            _Block_release(v64);
          }
          xpc_release(v100);
          xpc_object_t v100 = 0;
          if (v99) {
            _Block_release(v99);
          }
          v72 = v98;
          if (v98 && !atomic_fetch_add(&v98->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
LABEL_156:
          xpc_release(v18);
          goto LABEL_166;
        }
      }
      else
      {
        v95 = 0;
        xpc_object_t v96 = xpc_null_create();
        if (v64) {
          goto LABEL_116;
        }
      }
      v66 = 0;
      goto LABEL_122;
    }
    xpc_object_t v93 = v18;
    if (v18) {
      xpc_retain(v18);
    }
    else {
      xpc_object_t v93 = xpc_null_create();
    }
    uint64_t v67 = *MEMORY[0x1E4F47150];
    v91[1] = 0;
    v92 = 0;
    v91[0] = 0;
    TraceManager::runOnHelper_sync((void *)v2, (const char *)9, v67, 0, 1, &v93, &v92, v91);
    xpc_release(v93);
    xpc_object_t v93 = 0;
    v110.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    v68 = *(TraceCAReporter **)(v2 + 304);
    v69 = *(void **)(a1 + 40);
    xpc_object_t v90 = v69;
    if (v69) {
      xpc_retain(v69);
    }
    else {
      xpc_object_t v90 = xpc_null_create();
    }
    TraceCAReporter::prepTraceStats(v68, &v90, (xpc_object_t *)&v110.__r_.__value_.__l.__data_);
    xpc_release(v90);
    xpc_object_t v90 = 0;
    if (MEMORY[0x1C8795EB0](v110.__r_.__value_.__r.__words[0]) != v17)
    {
LABEL_153:
      if (*(void *)(a1 + 48))
      {
        xpc_object_t v80 = xpc_null_create();
        uint64_t v81 = *(void *)(a1 + 48);
        *(void *)buf = v80;
        xpc_object_t v82 = xpc_null_create();
        (*(void (**)(uint64_t, void, uint8_t *))(v81 + 16))(v81, 0, buf);
        xpc_release(*(xpc_object_t *)buf);
        xpc_release(v82);
      }
      xpc_release(v110.__r_.__value_.__l.__data_);
      goto LABEL_156;
    }
    v73 = (const void *)*MEMORY[0x1E4F4C738];
    size_t v74 = strlen((const char *)*MEMORY[0x1E4F4C738]);
    if (v74 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v75 = v74;
    if (v74 >= 0x17)
    {
      uint64_t v77 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v74 | 7) != 0x17) {
        uint64_t v77 = v74 | 7;
      }
      uint64_t v78 = v77 + 1;
      v76 = operator new(v77 + 1);
      *(void *)&buf[8] = v75;
      *(void *)&uint8_t buf[16] = v78 | 0x8000000000000000;
      *(void *)buf = v76;
    }
    else
    {
      buf[23] = v74;
      v76 = buf;
      if (!v74)
      {
LABEL_148:
        v76[v75] = 0;
        xpc_object_t v79 = (xpc_object_t)v110.__r_.__value_.__r.__words[0];
        std::string::size_type v89 = v110.__r_.__value_.__r.__words[0];
        if (v110.__r_.__value_.__r.__words[0])
        {
          xpc_retain(v110.__r_.__value_.__l.__data_);
        }
        else
        {
          xpc_object_t v79 = xpc_null_create();
          std::string::size_type v89 = (std::string::size_type)v79;
        }
        v88 = 0;
        Service::runCommand(v2, (uint64_t)buf, (xpc_object_t *)&v89, &v88);
        xpc_release(v79);
        std::string::size_type v89 = 0;
        if ((char)buf[23] < 0) {
          operator delete(*(void **)buf);
        }
        goto LABEL_153;
      }
    }
    memmove(v76, v73, v75);
    goto LABEL_148;
  }
  memset(buf, 170, sizeof(buf));
  uint64_t v10 = (const void *)*MEMORY[0x1E4F4C9F8];
  size_t v11 = strlen((const char *)*MEMORY[0x1E4F4C9F8]);
  if (v11 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v12 = v11;
  if (v11 >= 0x17)
  {
    uint64_t v34 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v34 = v11 | 7;
    }
    uint64_t v35 = v34 + 1;
    uint64_t v13 = operator new(v34 + 1);
    v110.__r_.__value_.__l.__size_ = v12;
    v110.__r_.__value_.__r.__words[2] = v35 | 0x8000000000000000;
    v110.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
    goto LABEL_65;
  }
  *((unsigned char *)&v110.__r_.__value_.__s + 23) = v11;
  uint64_t v13 = &v110;
  if (v11) {
LABEL_65:
  }
    memmove(v13, v10, v12);
  *((unsigned char *)v13 + v12) = 0;
  xpc_object_t v36 = (char *)operator new(0x28uLL);
  strcpy(v36, " rejected; ABM is shutting down ");
  xpc_object_t v37 = std::string::append(&v110, v36, 0x20uLL);
  long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  *(void *)&uint8_t buf[16] = *((void *)&v37->__r_.__value_.__l + 2);
  *(_OWORD *)buf = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  operator delete(v36);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v110.__r_.__value_.__l.__data_);
    size_t v39 = *(NSObject **)(v2 + 88);
    if (!os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
LABEL_68:
      uint64_t v41 = *(void *)(a1 + 48);
      v40 = (uint64_t *)(a1 + 48);
      if (!v41) {
        goto LABEL_165;
      }
      goto LABEL_74;
    }
  }
  else
  {
    size_t v39 = *(NSObject **)(v2 + 88);
    if (!os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_68;
    }
  }
  uint64_t v42 = buf;
  if ((buf[23] & 0x80u) != 0) {
    uint64_t v42 = *(uint8_t **)buf;
  }
  LODWORD(v110.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)v110.__r_.__value_.__r.__words + 4) = (std::string::size_type)v42;
  _os_log_impl(&dword_1C59C6000, v39, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&v110, 0xCu);
  uint64_t v43 = *(void *)(a1 + 48);
  v40 = (uint64_t *)(a1 + 48);
  if (v43)
  {
LABEL_74:
    v110.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    v110.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    uint64_t v44 = buf[23];
    if ((buf[23] & 0x80u) != 0) {
      uint64_t v44 = *(void *)&buf[8];
    }
    if (v44)
    {
      xpc_object_t v45 = xpc_dictionary_create(0, 0, 0);
      if (v45 || (xpc_object_t v45 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C8795EB0](v45) == MEMORY[0x1E4F14590])
        {
          xpc_retain(v45);
          xpc_object_t v46 = v45;
        }
        else
        {
          xpc_object_t v46 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v46 = xpc_null_create();
        xpc_object_t v45 = 0;
      }
      xpc_release(v45);
      xpc_object_t v83 = xpc_null_create();
      v84 = (void *)v110.__r_.__value_.__r.__words[0];
      v110.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
      xpc_release(v84);
      xpc_release(v83);
      if ((buf[23] & 0x80u) == 0) {
        v85 = buf;
      }
      else {
        v85 = *(uint8_t **)buf;
      }
      xpc_object_t v86 = xpc_string_create((const char *)v85);
      if (!v86) {
        xpc_object_t v86 = xpc_null_create();
      }
      xpc_dictionary_set_value(v46, (const char *)*MEMORY[0x1E4F4C240], v86);
      xpc_object_t v87 = xpc_null_create();
      xpc_release(v86);
      xpc_release(v87);
    }
    LODWORD(object) = -534716415;
    dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v40, (unsigned int *)&object, (void **)&v110.__r_.__value_.__l.__data_);
    xpc_release(v110.__r_.__value_.__l.__data_);
  }
LABEL_165:
  if (((char)buf[23] & 0x80000000) == 0) {
    goto LABEL_166;
  }
  operator delete(*(void **)buf);
  if ((SHIBYTE(v107[2]) & 0x80000000) == 0)
  {
LABEL_167:
    if ((SHIBYTE(v108[2]) & 0x80000000) == 0) {
      goto LABEL_168;
    }
    goto LABEL_172;
  }
LABEL_171:
  operator delete(v107[0]);
  if ((SHIBYTE(v108[2]) & 0x80000000) == 0)
  {
LABEL_168:
    if ((SHIBYTE(v109.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_173:
    operator delete(v109.__r_.__value_.__l.__data_);
    return;
  }
LABEL_172:
  operator delete(v108[0]);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_173;
  }
}

void sub_1C5A3FD88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t a11, char a12, uint64_t a13, uint64_t a14, xpc_object_t a15, char a16, uint64_t a17, uint64_t a18, xpc_object_t object, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *aBlock,xpc_object_t a28,void *a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,xpc_object_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void **xpc::dict::operator=(void **a1, xpc_object_t *a2)
{
  xpc_object_t v3 = *a2;
  *a2 = xpc_null_create();
  xpc_object_t v4 = *a1;
  *a1 = v3;
  xpc_release(v4);
  return a1;
}

void ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_21(void *a1, int *a2)
{
  uint64_t v4 = a1[4];
  xpc_object_t v5 = *(NSObject **)(v4 + 88);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_DEBUG, "#D Set property completion called", buf, 2u);
    if (!a1[7]) {
      return;
    }
  }
  else if (!a1[7])
  {
    return;
  }
  int v6 = *a2;
  if (!*a2)
  {
    int v7 = *(TraceCAReporter **)(v4 + 304);
    xpc_object_t v8 = (void *)a1[8];
    xpc_object_t object = v8;
    xpc_object_t v26 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    if (v8) {
      xpc_retain(v8);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    TraceCAReporter::prepTraceStats(v7, &object, &v26);
    xpc_release(object);
    xpc_object_t object = 0;
    if (MEMORY[0x1C8795EB0](v26) != MEMORY[0x1E4F14590])
    {
LABEL_23:
      xpc_release(v26);
      int v6 = *a2;
      goto LABEL_24;
    }
    char v9 = (const void *)*MEMORY[0x1E4F4C738];
    size_t v10 = strlen((const char *)*MEMORY[0x1E4F4C738]);
    if (v10 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v11 = v10;
    if (v10 >= 0x17)
    {
      uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17) {
        uint64_t v13 = v10 | 7;
      }
      uint64_t v14 = v13 + 1;
      std::string::size_type v12 = operator new(v13 + 1);
      size_t v23 = v11;
      unint64_t v24 = v14 | 0x8000000000000000;
      *(void *)buf = v12;
    }
    else
    {
      HIBYTE(v24) = v10;
      std::string::size_type v12 = buf;
      if (!v10)
      {
LABEL_18:
        v12[v11] = 0;
        xpc_object_t v15 = v26;
        xpc_object_t v21 = v26;
        if (v26)
        {
          xpc_retain(v26);
        }
        else
        {
          xpc_object_t v15 = xpc_null_create();
          xpc_object_t v21 = v15;
        }
        CFTypeID v20 = 0;
        Service::runCommand(v4, (uint64_t)buf, &v21, &v20);
        xpc_release(v15);
        xpc_object_t v21 = 0;
        if (SHIBYTE(v24) < 0) {
          operator delete(*(void **)buf);
        }
        goto LABEL_23;
      }
    }
    memmove(v12, v9, v11);
    goto LABEL_18;
  }
LABEL_24:
  if (v6) {
    uint64_t v16 = 3760250880;
  }
  else {
    uint64_t v16 = 0;
  }
  xpc_object_t v17 = xpc_null_create();
  uint64_t v18 = a1[7];
  *(void *)buf = v17;
  xpc_object_t v19 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(v18 + 16))(v18, v16, buf);
  xpc_release(*(xpc_object_t *)buf);
  xpc_release(v19);
}

void sub_1C5A40428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, xpc_object_t a18, xpc_object_t object)
{
  xpc_release(v19);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrI12TraceManagerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c15_ZTSN3xpc4dictE(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v5 = (const void *)a2[7];
  if (v5)
  {
    int v6 = _Block_copy(v5);
    int v7 = (void *)a2[8];
    a1[7] = v6;
    a1[8] = v7;
    if (v7) {
      return xpc_retain(v7);
    }
  }
  else
  {
    int v7 = (void *)a2[8];
    a1[7] = 0;
    a1[8] = v7;
    if (v7) {
      return xpc_retain(v7);
    }
  }
  xpc_object_t result = xpc_null_create();
  a1[8] = result;
  return result;
}

void __destroy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrI12TraceManagerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 64));
  *(void *)(a1 + 64) = 0;
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
    _Block_release(v2);
  }
  xpc_object_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void *dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::callback(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v4 = _Block_copy(v4);
  }
  xpc_object_t v5 = *(NSObject **)(a2 + 8);
  *a1 = v4;
  a1[1] = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  return a1;
}

void *__copy_helper_block_e8_40c15_ZTSN3xpc4dictE48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE56c40_ZTSNSt3__110shared_ptrI12TraceManagerEE(void *a1, void *a2)
{
  uint64_t v4 = (void *)a2[5];
  a1[5] = v4;
  if (!v4)
  {
    a1[5] = xpc_null_create();
    xpc_object_t result = (void *)a2[6];
    if (!result) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  xpc_retain(v4);
  xpc_object_t result = (void *)a2[6];
  if (result) {
LABEL_5:
  }
    xpc_object_t result = _Block_copy(result);
LABEL_6:
  uint64_t v7 = a2[7];
  uint64_t v6 = a2[8];
  a1[6] = result;
  a1[7] = v7;
  a1[8] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c15_ZTSN3xpc4dictE48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE56c40_ZTSNSt3__110shared_ptrI12TraceManagerEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    xpc_object_t v3 = *(const void **)(a1 + 48);
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  xpc_object_t v3 = *(const void **)(a1 + 48);
  if (v3) {
LABEL_4:
  }
    _Block_release(v3);
LABEL_5:
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
}

uint64_t __copy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12TraceManagerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12TraceManagerEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_27(void *a1, void **a2, void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = a1[4];
  xpc_object_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  char v9 = v8;
  uint64_t v10 = a1[5];
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v10) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10) {
      return;
    }
  }
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 1174405120;
  v13[2] = ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_2_28;
  v13[3] = &__block_descriptor_tmp_33_0;
  size_t v11 = *a2;
  v13[4] = v7;
  xpc_object_t object = v11;
  if (v11)
  {
    xpc_retain(v11);
    std::string::size_type v12 = *a3;
    if (!*a3) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  xpc_object_t object = xpc_null_create();
  std::string::size_type v12 = *a3;
  if (*a3) {
LABEL_11:
  }
    std::string::size_type v12 = _Block_copy(v12);
LABEL_12:
  aBlock = v12;
  ctu::SharedSynchronizable<TraceManager>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v13);
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(object);
}

void ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_2_28(uint64_t a1)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  memset(&v48, 170, sizeof(v48));
  uint64_t v2 = *(void *)(a1 + 32);
  xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x1E4F4C1A0]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  long long v49 = 0uLL;
  uint64_t v50 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(object);
  memset(__p, 170, sizeof(__p));
  xpc_object_t v4 = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x1E4F4C6A8]);
  xpc_object_t object = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  long long v49 = 0uLL;
  uint64_t v50 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(object);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v46, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
  }
  else {
    std::string v46 = v48;
  }
  char isSupported = abm::trace::isSupported();
  char v6 = isSupported;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v46.__r_.__value_.__l.__data_);
    if (v6)
    {
LABEL_12:
      xpc_object_t object = 0;
      p_xpc_object_t object = &object;
      uint64_t v42 = 0x3002000000;
      uint64_t v43 = __Block_byref_object_copy__1;
      uint64_t v7 = *(void **)(a1 + 40);
      uint64_t v44 = __Block_byref_object_dispose__1;
      xpc_object_t v45 = v7;
      if (v7) {
        xpc_retain(v7);
      }
      else {
        xpc_object_t v45 = xpc_null_create();
      }
      *(void *)&long long v49 = 0;
      *((void *)&v49 + 1) = &v49;
      uint64_t v50 = 0x4002000000;
      xpc_object_t v51 = __Block_byref_object_copy__29;
      v52 = __Block_byref_object_dispose__30;
      v53[0] = 0;
      v53[1] = 0;
      uint64_t v54 = 0;
      if (prop::get((char *)&v48, (char *)__p, (uint64_t)v53))
      {
        std::string::size_type v12 = (const char *)(*((void *)&v49 + 1) + 40);
        if (*(char *)(*((void *)&v49 + 1) + 63) < 0) {
          std::string::size_type v12 = *(const char **)v12;
        }
        xpc_object_t v13 = xpc_string_create(v12);
        if (!v13) {
          xpc_object_t v13 = xpc_null_create();
        }
        xpc_dictionary_set_value(p_object[5], (const char *)*MEMORY[0x1E4F4C800], v13);
        xpc_object_t v14 = xpc_null_create();
        xpc_release(v13);
        xpc_release(v14);
        *(_DWORD *)buf = 0;
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 48), (unsigned int *)buf, p_object + 5);
LABEL_63:
        _Block_object_dispose(&v49, 8);
        if (SHIBYTE(v54) < 0) {
          operator delete(v53[0]);
        }
        _Block_object_dispose(&object, 8);
        xpc_release(v45);
        goto LABEL_66;
      }
      xpc_object_t v15 = *(NSObject **)(v2 + 88);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1C59C6000, v15, OS_LOG_TYPE_DEFAULT, "#I Checking with abm-helper daemon", buf, 2u);
      }
      xpc_object_t v16 = xpc_dictionary_create(0, 0, 0);
      if (v16 || (xpc_object_t v16 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C8795EB0](v16) == MEMORY[0x1E4F14590])
        {
          xpc_retain(v16);
          xpc_object_t v17 = v16;
        }
        else
        {
          xpc_object_t v17 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v17 = xpc_null_create();
        xpc_object_t v16 = 0;
      }
      xpc_release(v16);
      xpc_object_t v18 = xpc_int64_create(1500);
      if (!v18) {
        xpc_object_t v18 = xpc_null_create();
      }
      xpc_dictionary_set_value(v17, (const char *)*MEMORY[0x1E4F470A0], v18);
      xpc_object_t v19 = xpc_null_create();
      xpc_release(v18);
      xpc_release(v19);
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        CFTypeID v20 = &v48;
      }
      else {
        CFTypeID v20 = (std::string *)v48.__r_.__value_.__r.__words[0];
      }
      xpc_object_t v21 = xpc_string_create((const char *)v20);
      if (!v21) {
        xpc_object_t v21 = xpc_null_create();
      }
      xpc_dictionary_set_value(v17, (const char *)*MEMORY[0x1E4F470B8], v21);
      xpc_object_t v22 = xpc_null_create();
      xpc_release(v21);
      xpc_release(v22);
      if (SHIBYTE(__p[2]) >= 0) {
        size_t v23 = __p;
      }
      else {
        size_t v23 = (void **)__p[0];
      }
      xpc_object_t v24 = xpc_string_create((const char *)v23);
      if (!v24) {
        xpc_object_t v24 = xpc_null_create();
      }
      xpc_dictionary_set_value(v17, (const char *)*MEMORY[0x1E4F470E0], v24);
      xpc_object_t v25 = xpc_null_create();
      xpc_release(v24);
      xpc_release(v25);
      memset(buf, 170, sizeof(buf));
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1174405120;
      aBlock[2] = ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_31;
      aBlock[3] = &unk_1F2105BC0;
      aBlock[4] = &v49;
      void aBlock[5] = &object;
      xpc_object_t v26 = *(void **)(a1 + 48);
      if (v26) {
        xpc_object_t v26 = _Block_copy(v26);
      }
      long long v38 = v26;
      uint64_t v27 = _Block_copy(aBlock);
      uint64_t v28 = *(void *)(v2 + 136);
      if (v28) {
        dispatch_retain(*(dispatch_object_t *)(v2 + 136));
      }
      *(void *)buf = v27;
      *(void *)&uint8_t buf[8] = v28;
      xpc_object_t v36 = v17;
      if (v17)
      {
        xpc_retain(v17);
        uint64_t v27 = *(void **)buf;
        uint64_t v35 = 0;
        if (*(void *)buf) {
          goto LABEL_50;
        }
      }
      else
      {
        uint64_t v35 = 0;
        xpc_object_t v36 = xpc_null_create();
        if (v27)
        {
LABEL_50:
          xpc_object_t v29 = _Block_copy(v27);
          uint64_t v30 = *MEMORY[0x1E4F47148];
          uint64_t v31 = *(NSObject **)&buf[8];
          unint64_t v33 = v29;
          uint64_t v34 = *(void *)&buf[8];
          if (!*(void *)&buf[8])
          {
LABEL_52:
            TraceManager::runOnHelper_sync((void *)v2, (const char *)9, v30, 0, 1, &v36, &v35, &v33);
            if (v31) {
              dispatch_release(v31);
            }
            if (v29) {
              _Block_release(v29);
            }
            xpc_release(v36);
            xpc_object_t v36 = 0;
            if (v31) {
              dispatch_release(v31);
            }
            if (v27) {
              _Block_release(v27);
            }
            if (v38) {
              _Block_release(v38);
            }
            xpc_release(v17);
            goto LABEL_63;
          }
LABEL_51:
          dispatch_retain(v31);
          goto LABEL_52;
        }
      }
      xpc_object_t v29 = 0;
      uint64_t v30 = *MEMORY[0x1E4F47148];
      uint64_t v31 = *(NSObject **)&buf[8];
      unint64_t v33 = 0;
      uint64_t v34 = *(void *)&buf[8];
      if (!*(void *)&buf[8]) {
        goto LABEL_52;
      }
      goto LABEL_51;
    }
  }
  else if (isSupported)
  {
    goto LABEL_12;
  }
  xpc_object_t v8 = *(NSObject **)(v2 + 88);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    xpc_object_t v32 = &v48;
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      xpc_object_t v32 = (std::string *)v48.__r_.__value_.__r.__words[0];
    }
    LODWORD(v49) = 136315138;
    *(void *)((char *)&v49 + 4) = v32;
    _os_log_error_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_ERROR, "Trace not supported: %s", (uint8_t *)&v49, 0xCu);
  }
  xpc_object_t v9 = xpc_null_create();
  uint64_t v10 = *(void *)(a1 + 48);
  *(void *)&long long v49 = v9;
  xpc_object_t v11 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, long long *))(v10 + 16))(v10, 3760250884, &v49);
  xpc_release((xpc_object_t)v49);
  xpc_release(v11);
LABEL_66:
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_70:
    operator delete(v48.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_70;
  }
}

void sub_1C5A40F90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, xpc_object_t object, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *aBlock,char a21,uint64_t a22,xpc_object_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,xpc_object_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

__n128 __Block_byref_object_copy__29(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__30(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

void ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_31(void *a1, _DWORD *a2, xpc_object_t *a3)
{
  if (!*a2 && MEMORY[0x1C8795EB0](*a3) == MEMORY[0x1E4F14590])
  {
    xpc_object_t value = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F47118]);
    xpc_object_t v16 = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t v16 = xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)object, (xpc *)&v16, (const object *)"", v9);
    uint64_t v10 = *(void *)(a1[4] + 8);
    uint64_t v11 = v10 + 40;
    if (*(char *)(v10 + 63) < 0) {
      operator delete(*(void **)v11);
    }
    *(_OWORD *)uint64_t v11 = *(_OWORD *)object;
    *(void *)(v11 + 16) = v18;
    HIBYTE(v18) = 0;
    LOBYTE(object[0]) = 0;
    xpc_release(v16);
    uint64_t v12 = *(void *)(a1[4] + 8);
    xpc_object_t v13 = (const char *)(v12 + 40);
    if (*(char *)(v12 + 63) < 0) {
      xpc_object_t v13 = *(const char **)v13;
    }
    xpc_object_t v14 = xpc_string_create(v13);
    if (!v14) {
      xpc_object_t v14 = xpc_null_create();
    }
    xpc_dictionary_set_value(*(xpc_object_t *)(*(void *)(a1[5] + 8) + 40), (const char *)*MEMORY[0x1E4F4C800], v14);
    xpc_object_t v15 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v15);
    LODWORD(object[0]) = 0;
    dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, (unsigned int *)object, (void **)(*(void *)(a1[5] + 8) + 40));
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    uint64_t v6 = a1[6];
    object[0] = v5;
    xpc_object_t v7 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, 3760250880, object);
    xpc_release(object[0]);
    xpc_release(v7);
  }
}

void sub_1C5A41388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10)
{
}

void *__copy_helper_block_e8_48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  __n128 result = *(void **)(a2 + 48);
  if (result) {
    __n128 result = _Block_copy(result);
  }
  *(void *)(a1 + 48) = result;
  return result;
}

void __destroy_helper_block_e8_48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 48);
  if (v1) {
    _Block_release(v1);
  }
}

void ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_37(void *a1, void **a2, const void **a3)
{
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    xpc_object_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      xpc_object_t v9 = v8;
      uint64_t v10 = a1[5];
      if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v10) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v9);
        if (!v10) {
          return;
        }
      }
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 1174405120;
      v13[2] = ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_2_38;
      v13[3] = &__block_descriptor_tmp_39_2;
      v13[4] = v7;
      if (*a3)
      {
        uint64_t v11 = _Block_copy(*a3);
        uint64_t v12 = *a2;
        aBlock = v11;
        xpc_object_t object = v12;
        if (v12)
        {
LABEL_9:
          xpc_retain(v12);
          goto LABEL_12;
        }
      }
      else
      {
        uint64_t v12 = *a2;
        aBlock = 0;
        xpc_object_t object = v12;
        if (v12) {
          goto LABEL_9;
        }
      }
      xpc_object_t object = xpc_null_create();
LABEL_12:
      ctu::SharedSynchronizable<TraceManager>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v13);
      xpc_release(object);
      xpc_object_t object = 0;
      if (aBlock) {
        _Block_release(aBlock);
      }
    }
  }
}

void ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_2_38(uint64_t a1)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 32);
  if (!(*(unsigned int (**)(void *))(*v2 + 88))(v2))
  {
    memset(__p, 170, 24);
    xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 48), (const char *)*MEMORY[0x1E4F4C268]);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
    if (value) {
      xpc_retain(value);
    }
    else {
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)__p, (xpc *)&__dst, (const object *)*MEMORY[0x1E4F4C630], v8);
    xpc_release(__dst.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p[2]) >= 0) {
      size_t v17 = HIBYTE(__p[2]);
    }
    else {
      size_t v17 = (size_t)__p[1];
    }
    if (v17 != strlen((const char *)*MEMORY[0x1E4F4C4F8])
      || (SHIBYTE(__p[2]) >= 0 ? (uint64_t v18 = __p) : (uint64_t v18 = (void **)__p[0]),
          memcmp(v18, (const void *)*MEMORY[0x1E4F4C4F8], v17)))
    {
      xpc_object_t v19 = *(xpc_object_t *)(a1 + 48);
      xpc_object_t v35 = v19;
      if (v19)
      {
        xpc_retain(v19);
        CFTypeID v20 = *(const void **)(a1 + 40);
        if (v20)
        {
LABEL_27:
          xpc_object_t v21 = (void (**)(void *, uint64_t, stat *))_Block_copy(v20);
LABEL_41:
          uint64_t v34 = v21;
          TraceManager::collectLogs_sync(v2, &v35, &v34);
          if (v21) {
            _Block_release(v21);
          }
          xpc_release(v19);
          goto LABEL_61;
        }
      }
      else
      {
        xpc_object_t v19 = xpc_null_create();
        xpc_object_t v35 = v19;
        CFTypeID v20 = *(const void **)(a1 + 40);
        if (v20) {
          goto LABEL_27;
        }
      }
      xpc_object_t v21 = 0;
      goto LABEL_41;
    }
    xpc_object_t v27 = *(xpc_object_t *)(a1 + 48);
    xpc_object_t v37 = v27;
    if (v27)
    {
      xpc_retain(v27);
      uint64_t v28 = *(void **)(a1 + 40);
      if (!v28) {
        goto LABEL_50;
      }
    }
    else
    {
      xpc_object_t v27 = xpc_null_create();
      xpc_object_t v37 = v27;
      uint64_t v28 = *(void **)(a1 + 40);
      if (!v28)
      {
LABEL_50:
        aBlock = v28;
        TraceManager::collectBasebandLogs_sync((uint64_t)v2, &v37, (uint64_t *)&aBlock);
        if (aBlock) {
          _Block_release(aBlock);
        }
        xpc_release(v27);
        goto LABEL_61;
      }
    }
    uint64_t v28 = _Block_copy(v28);
    goto LABEL_50;
  }
  memset(__p, 170, 24);
  xpc_object_t v3 = (const void *)*MEMORY[0x1E4F4C748];
  size_t v4 = strlen((const char *)*MEMORY[0x1E4F4C748]);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v9 = v4 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
    p_dst = &__dst;
    if (!v4) {
      goto LABEL_12;
    }
  }
  memmove(p_dst, v3, v5);
LABEL_12:
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  uint64_t v11 = (char *)operator new(0x28uLL);
  strcpy(v11, " rejected; ABM is shutting down ");
  uint64_t v12 = std::string::append(&__dst, v11, 0x20uLL);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  __p[2] = (void *)v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  operator delete(v11);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    xpc_object_t v14 = v2[11];
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
LABEL_14:
      uint64_t v16 = *(void *)(a1 + 40);
      xpc_object_t v15 = (uint64_t *)(a1 + 40);
      if (!v16) {
        goto LABEL_61;
      }
      goto LABEL_32;
    }
  }
  else
  {
    xpc_object_t v14 = v2[11];
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
  }
  xpc_object_t v22 = __p;
  if (SHIBYTE(__p[2]) < 0) {
    xpc_object_t v22 = (void **)__p[0];
  }
  LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v22;
  _os_log_impl(&dword_1C59C6000, v14, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
  uint64_t v23 = *(void *)(a1 + 40);
  xpc_object_t v15 = (uint64_t *)(a1 + 40);
  if (v23)
  {
LABEL_32:
    __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    xpc_object_t v24 = (void *)HIBYTE(__p[2]);
    if (SHIBYTE(__p[2]) < 0) {
      xpc_object_t v24 = __p[1];
    }
    if (v24)
    {
      xpc_object_t v25 = xpc_dictionary_create(0, 0, 0);
      if (v25 || (xpc_object_t v25 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C8795EB0](v25) == MEMORY[0x1E4F14590])
        {
          xpc_retain(v25);
          xpc_object_t v26 = v25;
        }
        else
        {
          xpc_object_t v26 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v26 = xpc_null_create();
        xpc_object_t v25 = 0;
      }
      xpc_release(v25);
      xpc_object_t v29 = xpc_null_create();
      uint64_t v30 = (void *)__dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
      xpc_release(v30);
      xpc_release(v29);
      if (SHIBYTE(__p[2]) >= 0) {
        uint64_t v31 = __p;
      }
      else {
        uint64_t v31 = (void **)__p[0];
      }
      xpc_object_t v32 = xpc_string_create((const char *)v31);
      if (!v32) {
        xpc_object_t v32 = xpc_null_create();
      }
      xpc_dictionary_set_value(v26, (const char *)*MEMORY[0x1E4F4C240], v32);
      xpc_object_t v33 = xpc_null_create();
      xpc_release(v32);
      xpc_release(v33);
    }
    unsigned int v38 = -534716415;
    dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v15, &v38, (void **)&__dst.__r_.__value_.__l.__data_);
    xpc_release(__dst.__r_.__value_.__l.__data_);
  }
LABEL_61:
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C5A41A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,xpc_object_t object,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void TraceManager::collectBasebandLogs_sync(uint64_t a1, xpc_object_t *a2, uint64_t *a3)
{
  uint64_t v142 = *MEMORY[0x1E4F143B8];
  if (MEMORY[0x1C8795EB0](*a2) != MEMORY[0x1E4F14590])
  {
    xpc_object_t v6 = xpc_null_create();
    uint64_t v7 = *a3;
    *(void *)xpc_object_t object = v6;
    xpc_object_t v8 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, unsigned char *))(v7 + 16))(v7, 3760250880, object);
    xpc_release(*(xpc_object_t *)object);
    xpc_release(v8);
    return;
  }
  memset(v137, 170, sizeof(v137));
  uint64_t v9 = (const __CFString **)*MEMORY[0x1E4F4C268];
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C268]);
  *(void *)xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    *(void *)xpc_object_t object = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)v137, (xpc *)object, (const object *)*MEMORY[0x1E4F4C4F8], v11);
  xpc_release(*(xpc_object_t *)object);
  memset(&v136, 170, sizeof(v136));
  v108 = (const __CFString **)*MEMORY[0x1E4F4C4C8];
  xpc_object_t v12 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C4C8]);
  v135.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
  if (v12) {
    xpc_retain(v12);
  }
  else {
    v135.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  Timestamp::Timestamp((Timestamp *)&__dst);
  Timestamp::asString(v13, 0, 9, object);
  xpc::dyn_cast_or_default();
  if ((object[23] & 0x80000000) != 0) {
    operator delete(*(void **)object);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&__dst, (void *)__dst.__r_.__value_.__l.__size_);
  xpc_release(v135.__r_.__value_.__l.__data_);
  memset(&v135, 170, sizeof(v135));
  xpc_object_t v14 = (const __CFString **)*MEMORY[0x1E4F4CA98];
  xpc_object_t v15 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4CA98]);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  if (v15) {
    xpc_retain(v15);
  }
  else {
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  memset(object, 0, 24);
  xpc::dyn_cast_or_default();
  if ((object[23] & 0x80000000) != 0) {
    operator delete(*(void **)object);
  }
  xpc_release(__dst.__r_.__value_.__l.__data_);
  uint64_t IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0 || (uint64_t IsInternalBuild = TelephonyUtilIsCarrierBuild(), IsInternalBuild)) {
    uint64_t CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
  }
  else {
    uint64_t CompressionMode = 2;
  }
  BOOL v134 = 0;
  uint64_t v18 = (const void *)*MEMORY[0x1E4F47258];
  size_t v19 = strlen((const char *)*MEMORY[0x1E4F47258]);
  if (v19 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v20 = v19;
  if (v19 >= 0x17)
  {
    uint64_t v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17) {
      uint64_t v22 = v19 | 7;
    }
    uint64_t v23 = v22 + 1;
    p_dst = (std::string *)operator new(v22 + 1);
    __dst.__r_.__value_.__l.__size_ = v20;
    __dst.__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_27;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v19;
  p_dst = &__dst;
  if (v19) {
LABEL_27:
  }
    memmove(p_dst, v18, v20);
  p_dst->__r_.__value_.__s.__data_[v20] = 0;
  memset(object, 0, 24);
  if (prop::compression::get((char *)&__dst, (uint64_t)object))
  {
    LODWORD(v140[0]) = -1431655766;
    if (util::convert<int>((const std::string *)object, v140, 0)) {
      uint64_t CompressionMode = LODWORD(v140[0]);
    }
    else {
      uint64_t CompressionMode = CompressionMode;
    }
  }
  if ((object[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)object);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_34;
    }
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_34;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_34:
  xpc_object_t v24 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4D210]);
  *(void *)xpc_object_t object = v24;
  if (v24) {
    xpc_retain(v24);
  }
  else {
    *(void *)xpc_object_t object = xpc_null_create();
  }
  int v25 = xpc::dyn_cast_or_default((xpc *)object, (const object *)CompressionMode);
  xpc_release(*(xpc_object_t *)object);
  if (v25)
  {
    BOOL v134 = 0;
    xpc_object_t v26 = (const void *)*MEMORY[0x1E4F47108];
    size_t v27 = strlen((const char *)*MEMORY[0x1E4F47108]);
    if (v27 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v28 = v27;
    if (v27 >= 0x17)
    {
      uint64_t v30 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v27 | 7) != 0x17) {
        uint64_t v30 = v27 | 7;
      }
      uint64_t v31 = v30 + 1;
      xpc_object_t v29 = (std::string *)operator new(v30 + 1);
      __dst.__r_.__value_.__l.__size_ = v28;
      __dst.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v27;
      xpc_object_t v29 = &__dst;
      if (!v27)
      {
LABEL_48:
        v29->__r_.__value_.__s.__data_[v28] = 0;
        memset(object, 0, 24);
        if (prop::compression::get((char *)&__dst, (uint64_t)object)) {
          util::convert<BOOL>((const std::string *)object, &v134, 0);
        }
        if ((object[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)object);
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_52;
          }
        }
        else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_52:
          xpc_object_t v32 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4CF88]);
          *(void *)xpc_object_t object = v32;
          if (v32) {
            xpc_retain(v32);
          }
          else {
            *(void *)xpc_object_t object = xpc_null_create();
          }
          BOOL v134 = xpc::dyn_cast_or_default((xpc *)object, (const object *)v134);
          xpc_release(*(xpc_object_t *)object);
          goto LABEL_58;
        }
        operator delete(__dst.__r_.__value_.__l.__data_);
        goto LABEL_52;
      }
    }
    memmove(v29, v26, v28);
    goto LABEL_48;
  }
LABEL_58:
  std::string::size_type size = HIBYTE(v135.__r_.__value_.__r.__words[2]);
  if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v135.__r_.__value_.__l.__size_;
  }
  if (!size) {
    std::string::__assign_external(&v135, (const std::string::value_type *)*MEMORY[0x1E4F4C1C8]);
  }
  v132 = (ctu *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v133 = 0xAAAAAAAAAAAAAAAALL;
  GetABMLogServer(&v130);
  abm::HelperClient::create();
  uint64_t v34 = v131;
  if (v131 && !atomic_fetch_add(&v131->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t xdict = xpc_null_create();
  xpc_object_t v35 = xpc_dictionary_create(0, 0, 0);
  if (v35 || (xpc_object_t v35 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v35) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v35);
      xpc_object_t v36 = v35;
    }
    else
    {
      xpc_object_t v36 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v36 = xpc_null_create();
    xpc_object_t v35 = 0;
  }
  xpc_release(v35);
  xpc_object_t v37 = xpc_int64_create(1500);
  if (!v37) {
    xpc_object_t v37 = xpc_null_create();
  }
  xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x1E4F470A0], v37);
  xpc_object_t v38 = xpc_null_create();
  xpc_release(v37);
  xpc_release(v38);
  *(void *)&long long v39 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v39 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)xpc_object_t object = v39;
  *(_OWORD *)&object[16] = v39;
  xpc_object_t v127 = v36;
  if (v36) {
    xpc_retain(v36);
  }
  else {
    xpc_object_t v127 = xpc_null_create();
  }
  abm::HelperClient::perform();
  xpc_release(v127);
  xpc_object_t v127 = 0;
  xpc_object_t v126 = xpc_null_create();
  if (*(_DWORD *)object || MEMORY[0x1C8795EB0](xdict) != MEMORY[0x1E4F14590] || !*(void *)(a1 + 256))
  {
LABEL_78:
    xpc_release(v126);
    if ((object[31] & 0x80000000) != 0) {
      operator delete(*(void **)&object[8]);
    }
    xpc_release(v36);
    xpc_release(xdict);
    v107 = (void **)a3;
    v40 = (std::__shared_weak_count *)v133;
    if (v133 && !atomic_fetch_add((atomic_ullong *volatile)(v133 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
    uint64_t v41 = (const char **)MEMORY[0x1E4F4F928];
    uint64_t v42 = (const void *)*MEMORY[0x1E4F4F928];
    size_t v43 = strlen((const char *)*MEMORY[0x1E4F4F928]);
    if (v43 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v44 = v43;
    if (v43 >= 0x17)
    {
      uint64_t v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v43 | 7) != 0x17) {
        uint64_t v46 = v43 | 7;
      }
      uint64_t v47 = v46 + 1;
      xpc_object_t v45 = operator new(v46 + 1);
      *(void *)&object[8] = v44;
      *(void *)&object[16] = v47 | 0x8000000000000000;
      *(void *)xpc_object_t object = v45;
    }
    else
    {
      object[23] = v43;
      xpc_object_t v45 = object;
      if (!v43)
      {
LABEL_91:
        v45[v44] = 0;
        support::fs::createDir(object, 0x1EDu, 1);
        if ((object[23] & 0x80000000) != 0) {
          operator delete(*(void **)object);
        }
        v132 = 0;
        uint64_t v48 = *MEMORY[0x1E4F1CF80];
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        xpc_object_t v51 = Mutable;
        if (Mutable) {
          v132 = Mutable;
        }
        if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external((std::string *)object, v135.__r_.__value_.__l.__data_, v135.__r_.__value_.__l.__size_);
        }
        else {
          *(std::string *)xpc_object_t object = v135;
        }
        ctu::cf::insert<char const*,std::string>(v51, v14, (uint64_t)object, v48, v50);
        if ((object[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)object);
          if ((SHIBYTE(v136.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_100;
          }
        }
        else if ((SHIBYTE(v136.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_100:
          *(std::string *)xpc_object_t object = v136;
          goto LABEL_103;
        }
        std::string::__init_copy_ctor_external((std::string *)object, v136.__r_.__value_.__l.__data_, v136.__r_.__value_.__l.__size_);
LABEL_103:
        ctu::cf::insert<char const*,std::string>(v51, v108, (uint64_t)object, v48, v52);
        if ((object[23] & 0x80000000) != 0) {
          operator delete(*(void **)object);
        }
        memset(&__dst, 170, sizeof(__dst));
        xpc_object_t v53 = *v41;
        size_t v54 = strlen(*v41);
        if (v54 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        std::string::size_type v55 = v54;
        if (v54 >= 0x17)
        {
          uint64_t v57 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v54 | 7) != 0x17) {
            uint64_t v57 = v54 | 7;
          }
          uint64_t v58 = v57 + 1;
          xpc_object_t v56 = (std::string *)operator new(v57 + 1);
          __dst.__r_.__value_.__l.__size_ = v55;
          __dst.__r_.__value_.__r.__words[2] = v58 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
        }
        else
        {
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v54;
          xpc_object_t v56 = &__dst;
          if (!v54)
          {
            __dst.__r_.__value_.__s.__data_[0] = 0;
            if (!v25) {
              goto LABEL_131;
            }
LABEL_114:
            uint64_t v59 = a1;
            int v60 = v25;
            std::string v109 = v9;
            v61 = (const void *)*MEMORY[0x1E4F4F940];
            size_t v62 = strlen((const char *)*MEMORY[0x1E4F4F940]);
            int v63 = SHIBYTE(v136.__r_.__value_.__r.__words[2]);
            if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t v64 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
            }
            else {
              size_t v64 = v136.__r_.__value_.__l.__size_;
            }
            unint64_t v65 = v64 + v62;
            memset(object, 170, 24);
            if (v64 + v62 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            size_t v66 = v62;
            if (v65 > 0x16)
            {
              uint64_t v86 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v65 | 7) != 0x17) {
                uint64_t v86 = v65 | 7;
              }
              uint64_t v87 = v86 + 1;
              uint64_t v67 = operator new(v86 + 1);
              *(void *)&object[8] = v65;
              *(void *)&object[16] = v87 | 0x8000000000000000;
              *(void *)xpc_object_t object = v67;
              int v25 = v60;
              if (!v66) {
                goto LABEL_121;
              }
            }
            else
            {
              memset(object, 0, 24);
              uint64_t v67 = object;
              object[23] = v64 + v62;
              int v25 = v60;
              if (!v62)
              {
LABEL_121:
                a1 = v59;
                if (v64)
                {
                  if (v63 >= 0) {
                    v68 = &v136;
                  }
                  else {
                    v68 = (std::string *)v136.__r_.__value_.__r.__words[0];
                  }
                  memmove(&v67[v66], v68, v64);
                }
                v67[v66 + v64] = 0;
                v69 = std::string::append((std::string *)object, "/", 1uLL);
                std::string::size_type v70 = v69->__r_.__value_.__r.__words[0];
                v140[0] = (const void *)v69->__r_.__value_.__l.__size_;
                *(const void **)((char *)v140 + 7) = *(const void **)((char *)&v69->__r_.__value_.__r.__words[1] + 7);
                char v71 = HIBYTE(v69->__r_.__value_.__r.__words[2]);
                v69->__r_.__value_.__l.__size_ = 0;
                v69->__r_.__value_.__r.__words[2] = 0;
                v69->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__dst.__r_.__value_.__l.__data_);
                }
                __dst.__r_.__value_.__r.__words[0] = v70;
                __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v140[0];
                *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v140 + 7);
                *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v71;
                if ((object[23] & 0x80000000) != 0) {
                  operator delete(*(void **)object);
                }
                uint64_t v9 = v109;
LABEL_131:
                support::fs::createDir((const char *)&__dst, 0x1EDu, 1);
                v73 = v132;
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                  std::string::__init_copy_ctor_external((std::string *)object, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
                }
                else {
                  *(std::string *)xpc_object_t object = __dst;
                }
                ctu::cf::insert<char const*,std::string>(v73, (const __CFString **)*MEMORY[0x1E4F4C7F8], (uint64_t)object, v48, v72);
                if ((object[23] & 0x80000000) != 0)
                {
                  operator delete(*(void **)object);
                  if ((v137[23] & 0x80000000) == 0) {
                    goto LABEL_136;
                  }
                }
                else if ((v137[23] & 0x80000000) == 0)
                {
LABEL_136:
                  *(_OWORD *)xpc_object_t object = *(_OWORD *)v137;
                  *(void *)&object[16] = *(void *)&v137[16];
                  goto LABEL_139;
                }
                std::string::__init_copy_ctor_external((std::string *)object, *(const std::string::value_type **)v137, *(std::string::size_type *)&v137[8]);
LABEL_139:
                ctu::cf::insert<char const*,std::string>(v73, v9, (uint64_t)object, v48, v74);
                if ((object[23] & 0x80000000) != 0) {
                  operator delete(*(void **)object);
                }
                size_t v75 = *(std::__shared_weak_count **)(a1 + 128);
                if (!v75 || (v76 = *(void *)(a1 + 120), (uint64_t v77 = std::__shared_weak_count::lock(v75)) == 0)) {
                  std::__throw_bad_weak_ptr[abi:ne180100]();
                }
                uint64_t v78 = v77;
                p_shared_weak_owners = &v77->__shared_weak_owners_;
                atomic_fetch_add_explicit(&v77->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                if (!atomic_fetch_add(&v77->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                  std::__shared_weak_count::__release_weak(v78);
                }
                memset(object, 170, 16);
                aBlock[0] = MEMORY[0x1E4F143A8];
                aBlock[1] = 1174405120;
                aBlock[2] = ___ZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke;
                aBlock[3] = &__block_descriptor_tmp_51_0;
                aBlock[4] = a1;
                void aBlock[5] = v76;
                v115 = v78;
                atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
                xpc_object_t v80 = *v107;
                if (*v107) {
                  xpc_object_t v80 = _Block_copy(v80);
                }
                v116 = v80;
                if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
                  std::string::__init_copy_ctor_external(&v117, v136.__r_.__value_.__l.__data_, v136.__r_.__value_.__l.__size_);
                }
                else {
                  std::string v117 = v136;
                }
                int v119 = v25;
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                  std::string::__init_copy_ctor_external(&v118, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
                }
                else {
                  std::string v118 = __dst;
                }
                BOOL v120 = v134;
                xpc_object_t v82 = _Block_copy(aBlock);
                xpc_object_t v83 = *(NSObject **)(a1 + 136);
                if (v83) {
                  dispatch_retain(*(dispatch_object_t *)(a1 + 136));
                }
                *(void *)xpc_object_t object = v82;
                *(void *)&object[8] = v83;
                v84 = v132;
                ctu::cf_to_xpc((uint64_t *)v140, v132, v81);
                xpc_object_t v85 = (xpc_object_t)v140[0];
                if (v140[0] && MEMORY[0x1C8795EB0](v140[0]) == MEMORY[0x1E4F14590]) {
                  xpc_retain(v85);
                }
                else {
                  xpc_object_t v85 = xpc_null_create();
                }
                xpc_release((xpc_object_t)v140[0]);
                v88 = (const char *)(a1 + 168);
                if (*(char *)(a1 + 191) < 0) {
                  v88 = *(const char **)v88;
                }
                xpc_object_t v89 = xpc_string_create(v88);
                if (!v89) {
                  xpc_object_t v89 = xpc_null_create();
                }
                xpc_dictionary_set_value(v85, (const char *)*MEMORY[0x1E4F4C488], v89);
                xpc_object_t v90 = xpc_null_create();
                xpc_release(v89);
                xpc_release(v90);
                xpc_object_t v113 = v85;
                if (v85)
                {
                  xpc_retain(v85);
                  uint64_t v112 = 0;
                  if (v82) {
                    goto LABEL_169;
                  }
                }
                else
                {
                  uint64_t v112 = 0;
                  xpc_object_t v113 = xpc_null_create();
                  if (v82)
                  {
LABEL_169:
                    v91 = _Block_copy(v82);
                    uint64_t v92 = *MEMORY[0x1E4F47210];
                    std::string v110 = v91;
                    v111 = v83;
                    if (!v83) {
                      goto LABEL_171;
                    }
                    goto LABEL_170;
                  }
                }
                v91 = 0;
                uint64_t v92 = *MEMORY[0x1E4F47210];
                std::string v110 = 0;
                v111 = v83;
                if (!v83)
                {
LABEL_171:
                  TraceManager::runOnHelper_sync((void *)a1, (const char *)9, v92, 0x1388u, 1, &v113, &v112, &v110);
                  if (v83) {
                    dispatch_release(v83);
                  }
                  if (v91) {
                    _Block_release(v91);
                  }
                  xpc_release(v113);
                  xpc_object_t v113 = 0;
                  xpc_release(v85);
                  if (v83) {
                    dispatch_release(v83);
                  }
                  if (v82) {
                    _Block_release(v82);
                  }
                  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
                  {
                    operator delete(v118.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v117.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_181:
                      xpc_object_t v93 = v116;
                      if (!v116)
                      {
LABEL_189:
                        if (v115) {
                          std::__shared_weak_count::__release_weak(v115);
                        }
                        std::__shared_weak_count::__release_weak(v78);
                        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                        {
                          operator delete(__dst.__r_.__value_.__l.__data_);
                          if (!v84) {
                            goto LABEL_196;
                          }
                        }
                        else if (!v84)
                        {
LABEL_196:
                          if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
                            goto LABEL_236;
                          }
LABEL_197:
                          if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
                            goto LABEL_237;
                          }
                          goto LABEL_198;
                        }
                        CFRelease(v84);
                        goto LABEL_196;
                      }
LABEL_188:
                      _Block_release(v93);
                      goto LABEL_189;
                    }
                  }
                  else if ((SHIBYTE(v117.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
                    goto LABEL_181;
                  }
                  operator delete(v117.__r_.__value_.__l.__data_);
                  xpc_object_t v93 = v116;
                  if (!v116) {
                    goto LABEL_189;
                  }
                  goto LABEL_188;
                }
LABEL_170:
                dispatch_retain(v83);
                goto LABEL_171;
              }
            }
            memcpy(v67, v61, v66);
            goto LABEL_121;
          }
        }
        memmove(v56, v53, v55);
        v56->__r_.__value_.__s.__data_[v55] = 0;
        if (!v25) {
          goto LABEL_131;
        }
        goto LABEL_114;
      }
    }
    memmove(v45, v42, v44);
    goto LABEL_91;
  }
  memset(v140, 170, sizeof(v140));
  xpc_object_t v94 = xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E4F47178]);
  v125[0] = v94;
  if (v94) {
    xpc_retain(v94);
  }
  else {
    v125[0] = xpc_null_create();
  }
  memset(&__dst, 0, sizeof(__dst));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  xpc_release(v125[0]);
  v95 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v96 = *(void *)(*(void *)(a1 + 256) + 16);
    LODWORD(__dst.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(__dst.__r_.__value_.__r.__words[0]) = v96;
    _os_log_impl(&dword_1C59C6000, v95, OS_LOG_TYPE_DEFAULT, "#I Baseband Log tracker size: %d", (uint8_t *)&__dst, 8u);
  }
  v125[0] = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v125[1] = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  BBLogTracker::getLog(*(void *)(a1 + 256), v140, (uint64_t *)v125);
  xpc_object_t v97 = v125[0];
  if (!v125[0])
  {
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)v125);
    if (SHIBYTE(v140[2]) < 0) {
      operator delete((void *)v140[0]);
    }
    goto LABEL_78;
  }
  v98 = *(NSObject **)(a1 + 88);
  BOOL v99 = os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT);
  uint64_t v100 = MEMORY[0x1E4F14590];
  if (v99)
  {
    asString((uint64_t)v97, &__dst);
    v101 = (__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__dst
         : (std::string *)__dst.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    v139 = v101;
    _os_log_impl(&dword_1C59C6000, v98, OS_LOG_TYPE_DEFAULT, "#I Log tracker info: %s", buf, 0xCu);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
  }
  xpc_object_t v102 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v103 = v102;
  if (v102)
  {
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v102;
  }
  else
  {
    xpc_object_t v103 = xpc_null_create();
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v103;
    if (!v103)
    {
      xpc_object_t v104 = xpc_null_create();
      xpc_object_t v103 = 0;
      goto LABEL_224;
    }
  }
  if (MEMORY[0x1C8795EB0](v103) == v100)
  {
    xpc_retain(v103);
    goto LABEL_225;
  }
  xpc_object_t v104 = xpc_null_create();
LABEL_224:
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v104;
LABEL_225:
  xpc_release(v103);
  xpc::dict::operator=(&v126, (xpc_object_t *)&__dst.__r_.__value_.__l.__data_);
  xpc_release(__dst.__r_.__value_.__l.__data_);
  xpc_object_t v123 = xpc_string_create((const char *)*MEMORY[0x1E4F4F928]);
  if (!v123) {
    xpc_object_t v123 = xpc_null_create();
  }
  std::string::size_type v105 = *MEMORY[0x1E4F4C7F8];
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
  __dst.__r_.__value_.__l.__size_ = v105;
  xpc::dict::object_proxy::operator=((uint64_t)&__dst, &v123, &v124);
  xpc_release(v124);
  xpc_object_t v124 = 0;
  xpc_release(v123);
  xpc_object_t v123 = 0;
  std::string v106 = (const char *)v125[0];
  if (*((char *)v125[0] + 23) < 0) {
    std::string v106 = *(const char **)v125[0];
  }
  xpc_object_t v121 = xpc_string_create(v106);
  if (!v121) {
    xpc_object_t v121 = xpc_null_create();
  }
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v108;
  xpc::dict::object_proxy::operator=((uint64_t)&__dst, &v121, &v122);
  xpc_release(v122);
  xpc_object_t v122 = 0;
  xpc_release(v121);
  xpc_object_t v121 = 0;
  LODWORD(__dst.__r_.__value_.__l.__data_) = 0;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, (unsigned int *)&__dst, &v126);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)v125);
  if (SHIBYTE(v140[2]) < 0) {
    operator delete((void *)v140[0]);
  }
  xpc_release(v126);
  if ((object[31] & 0x80000000) != 0) {
    operator delete(*(void **)&object[8]);
  }
  xpc_release(v36);
  xpc_release(xdict);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&v132);
  if ((SHIBYTE(v135.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_197;
  }
LABEL_236:
  operator delete(v135.__r_.__value_.__l.__data_);
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_237:
    operator delete(v136.__r_.__value_.__l.__data_);
    if ((v137[23] & 0x80000000) != 0) {
      goto LABEL_238;
    }
    return;
  }
LABEL_198:
  if ((v137[23] & 0x80000000) != 0) {
LABEL_238:
  }
    operator delete(*(void **)v137);
}

void sub_1C5A42D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, xpc_object_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,void *aBlock,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,xpc_object_t a41,uint64_t a42,xpc_object_t object,xpc_object_t a44,xpc_object_t a45,void *__p,int a47,__int16 a48,char a49,char a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,xpc_object_t a56,char a57,uint64_t a58,char a59)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void TraceManager::collectLogs_sync(void *a1, xpc_object_t *a2, void (***a3)(void *, uint64_t, stat *))
{
  size_t v4 = a2;
  uint64_t v229 = *MEMORY[0x1E4F143B8];
  if (MEMORY[0x1C8795EB0](*a2) != MEMORY[0x1E4F14590])
  {
    xpc_object_t v6 = xpc_null_create();
    uint64_t v7 = *a3;
    *(void *)&v228.st_dev = v6;
    xpc_object_t v8 = xpc_null_create();
    v7[2](v7, 3760250880, &v228);
    xpc_release(*(xpc_object_t *)&v228.st_dev);
    xpc_release(v8);
    return;
  }
  memset(__sz, 170, sizeof(__sz));
  uint64_t v9 = (const __CFString **)*MEMORY[0x1E4F4C268];
  xpc_object_t value = xpc_dictionary_get_value(*v4, (const char *)*MEMORY[0x1E4F4C268]);
  *(void *)&v228.st_dev = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    *(void *)&v228.st_dev = xpc_null_create();
  }
  xpc_object_t v12 = (char *)*MEMORY[0x1E4F4C630];
  xpc::dyn_cast_or_default((uint64_t *)__sz, (xpc *)&v228, (const object *)*MEMORY[0x1E4F4C630], v11);
  xpc_release(*(xpc_object_t *)&v228.st_dev);
  memset(v224, 170, sizeof(v224));
  uint64_t v13 = (const __CFString **)*MEMORY[0x1E4F4C4C8];
  xpc_object_t v14 = xpc_dictionary_get_value(*v4, (const char *)*MEMORY[0x1E4F4C4C8]);
  v222[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
  if (v14) {
    xpc_retain(v14);
  }
  else {
    v222[1].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  Timestamp::Timestamp((Timestamp *)v223);
  Timestamp::asString((uint64_t)v223, 0, 9, &v228);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v228.st_gid) < 0) {
    operator delete(*(void **)&v228.st_dev);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v223, (void *)v223[1]);
  xpc_release(v222[1].__r_.__value_.__l.__data_);
  memset(v223, 170, sizeof(v223));
  xpc_object_t v15 = (const __CFString **)*MEMORY[0x1E4F4C690];
  xpc_object_t v16 = xpc_dictionary_get_value(*v4, (const char *)*MEMORY[0x1E4F4C690]);
  v222[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
  if (v16) {
    xpc_retain(v16);
  }
  else {
    v222[1].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  memset(&v228, 0, 24);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v228.st_gid) < 0) {
    operator delete(*(void **)&v228.st_dev);
  }
  xpc_release(v222[1].__r_.__value_.__l.__data_);
  memset(&v222[1], 170, sizeof(std::string));
  size_t v17 = (const __CFString **)*MEMORY[0x1E4F4CA38];
  xpc_object_t v18 = xpc_dictionary_get_value(*v4, (const char *)*MEMORY[0x1E4F4CA38]);
  v222[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
  if (v18) {
    xpc_retain(v18);
  }
  else {
    v222[0].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  memset(&v228, 0, 24);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v228.st_gid) < 0) {
    operator delete(*(void **)&v228.st_dev);
  }
  xpc_release(v222[0].__r_.__value_.__l.__data_);
  memset(v222, 170, 24);
  size_t v19 = (const __CFString **)*MEMORY[0x1E4F4CA98];
  xpc_object_t v20 = xpc_dictionary_get_value(*v4, (const char *)*MEMORY[0x1E4F4CA98]);
  __dst[0] = v20;
  if (v20) {
    xpc_retain(v20);
  }
  else {
    __dst[0] = xpc_null_create();
  }
  memset(&v228, 0, 24);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v228.st_gid) < 0) {
    operator delete(*(void **)&v228.st_dev);
  }
  xpc_release(__dst[0]);
  xpc_object_t v21 = (const __CFString **)*MEMORY[0x1E4F4C180];
  xpc_object_t v22 = xpc_dictionary_get_value(*v4, (const char *)*MEMORY[0x1E4F4C180]);
  *(void *)&v228.st_dev = v22;
  if (v22) {
    xpc_retain(v22);
  }
  else {
    *(void *)&v228.st_dev = xpc_null_create();
  }
  v191 = v19;
  __s = v12;
  int v185 = xpc::dyn_cast_or_default((xpc *)&v228, (const object *)7);
  v186 = v21;
  v190 = v13;
  v188 = v17;
  xpc_release(*(xpc_object_t *)&v228.st_dev);
  char v221 = 1;
  __src = (void *)*MEMORY[0x1E4F4D268];
  size_t v23 = strlen((const char *)*MEMORY[0x1E4F4D268]);
  if (v23 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v24 = (void *)v23;
  v187 = v15;
  v189 = v9;
  if (v23 >= 0x17)
  {
    uint64_t v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17) {
      uint64_t v26 = v23 | 7;
    }
    uint64_t v27 = v26 + 1;
    int v25 = operator new(v26 + 1);
    xpc_object_t __dst[2] = (xpc_object_t)(v27 | 0x8000000000000000);
    __dst[0] = v25;
    __dst[1] = v24;
    goto LABEL_36;
  }
  HIBYTE(__dst[2]) = v23;
  int v25 = __dst;
  if (v23) {
LABEL_36:
  }
    memmove(v25, __src, (size_t)v24);
  *((unsigned char *)v24 + (void)v25) = 0;
  memset(&v228, 0, 24);
  if (prop::logfilter::get((char *)__dst, (uint64_t)&v228)) {
    util::convert<BOOL>((const std::string *)&v228, (BOOL *)&v221, 0);
  }
  if (SHIBYTE(v228.st_gid) < 0)
  {
    operator delete(*(void **)&v228.st_dev);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0) {
      goto LABEL_41;
    }
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_41;
  }
  operator delete(__dst[0]);
LABEL_41:
  xpc_object_t v28 = xpc_dictionary_get_value(*v4, (const char *)__src);
  *(void *)&v228.st_dev = v28;
  if (v28) {
    xpc_retain(v28);
  }
  else {
    *(void *)&v228.st_dev = xpc_null_create();
  }
  char v221 = xpc::dyn_cast_or_default((xpc *)&v228, (const object *)v221);
  xpc_release(*(xpc_object_t *)&v228.st_dev);
  uint64_t IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0 || (uint64_t IsInternalBuild = TelephonyUtilIsCarrierBuild(), IsInternalBuild)) {
    uint64_t CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
  }
  else {
    uint64_t CompressionMode = 2;
  }
  BOOL v220 = 0;
  uint64_t v31 = (const void *)*MEMORY[0x1E4F47258];
  size_t v32 = strlen((const char *)*MEMORY[0x1E4F47258]);
  if (v32 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v33 = (void *)v32;
  if (v32 >= 0x17)
  {
    uint64_t v35 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17) {
      uint64_t v35 = v32 | 7;
    }
    uint64_t v36 = v35 + 1;
    uint64_t v34 = operator new(v35 + 1);
    xpc_object_t __dst[2] = (xpc_object_t)(v36 | 0x8000000000000000);
    __dst[0] = v34;
    __dst[1] = v33;
    goto LABEL_57;
  }
  HIBYTE(__dst[2]) = v32;
  uint64_t v34 = __dst;
  if (v32) {
LABEL_57:
  }
    memmove(v34, v31, (size_t)v33);
  *((unsigned char *)v33 + (void)v34) = 0;
  memset(&v228, 0, 24);
  if (prop::compression::get((char *)__dst, (uint64_t)&v228))
  {
    LODWORD(v226.__r_.__value_.__l.__data_) = -1431655766;
    if (util::convert<int>((const std::string *)&v228, &v226, 0)) {
      uint64_t CompressionMode = LODWORD(v226.__r_.__value_.__l.__data_);
    }
    else {
      uint64_t CompressionMode = CompressionMode;
    }
  }
  if (SHIBYTE(v228.st_gid) < 0)
  {
    operator delete(*(void **)&v228.st_dev);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0) {
      goto LABEL_64;
    }
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_64;
  }
  operator delete(__dst[0]);
LABEL_64:
  v184 = (const __CFString **)*MEMORY[0x1E4F4D210];
  xpc_object_t v37 = xpc_dictionary_get_value(*v4, (const char *)*MEMORY[0x1E4F4D210]);
  *(void *)&v228.st_dev = v37;
  if (v37) {
    xpc_retain(v37);
  }
  else {
    *(void *)&v228.st_dev = xpc_null_create();
  }
  int v38 = xpc::dyn_cast_or_default((xpc *)&v228, (const object *)CompressionMode);
  xpc_release(*(xpc_object_t *)&v228.st_dev);
  if (v38)
  {
    BOOL v220 = 0;
    long long v39 = (const void *)*MEMORY[0x1E4F47108];
    size_t v40 = strlen((const char *)*MEMORY[0x1E4F47108]);
    if (v40 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v41 = (void *)v40;
    if (v40 >= 0x17)
    {
      uint64_t v43 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v40 | 7) != 0x17) {
        uint64_t v43 = v40 | 7;
      }
      uint64_t v44 = v43 + 1;
      uint64_t v42 = operator new(v43 + 1);
      xpc_object_t __dst[2] = (xpc_object_t)(v44 | 0x8000000000000000);
      __dst[0] = v42;
      __dst[1] = v41;
    }
    else
    {
      HIBYTE(__dst[2]) = v40;
      uint64_t v42 = __dst;
      if (!v40)
      {
LABEL_78:
        *((unsigned char *)v41 + (void)v42) = 0;
        memset(&v228, 0, 24);
        if (prop::compression::get((char *)__dst, (uint64_t)&v228)) {
          util::convert<BOOL>((const std::string *)&v228, &v220, 0);
        }
        if (SHIBYTE(v228.st_gid) < 0)
        {
          operator delete(*(void **)&v228.st_dev);
          if ((SHIBYTE(__dst[2]) & 0x80000000) == 0) {
            goto LABEL_82;
          }
        }
        else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
        {
LABEL_82:
          xpc_object_t v45 = xpc_dictionary_get_value(*v4, (const char *)*MEMORY[0x1E4F4CF88]);
          *(void *)&v228.st_dev = v45;
          if (v45) {
            xpc_retain(v45);
          }
          else {
            *(void *)&v228.st_dev = xpc_null_create();
          }
          BOOL v220 = xpc::dyn_cast_or_default((xpc *)&v228, (const object *)v220);
          xpc_release(*(xpc_object_t *)&v228.st_dev);
          goto LABEL_88;
        }
        operator delete(__dst[0]);
        goto LABEL_82;
      }
    }
    memmove(v42, v39, (size_t)v41);
    goto LABEL_78;
  }
LABEL_88:
  char v219 = 1;
  key = (char *)*MEMORY[0x1E4F4CBA8];
  size_t v46 = strlen((const char *)*MEMORY[0x1E4F4CBA8]);
  if (v46 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v47 = (void *)v46;
  if (v46 >= 0x17)
  {
    uint64_t v49 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v46 | 7) != 0x17) {
      uint64_t v49 = v46 | 7;
    }
    uint64_t v50 = v49 + 1;
    uint64_t v48 = operator new(v49 + 1);
    xpc_object_t __dst[2] = (xpc_object_t)(v50 | 0x8000000000000000);
    __dst[0] = v48;
    __dst[1] = v47;
    goto LABEL_95;
  }
  HIBYTE(__dst[2]) = v46;
  uint64_t v48 = __dst;
  if (v46) {
LABEL_95:
  }
    memmove(v48, key, (size_t)v47);
  *((unsigned char *)v47 + (void)v48) = 0;
  memset(&v228, 0, 24);
  if (prop::systemlogs::get((char *)__dst, (uint64_t)&v228)) {
    util::convert<BOOL>((const std::string *)&v228, (BOOL *)&v219, 0);
  }
  if (SHIBYTE(v228.st_gid) < 0)
  {
    operator delete(*(void **)&v228.st_dev);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0) {
      goto LABEL_100;
    }
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_100;
  }
  operator delete(__dst[0]);
LABEL_100:
  xpc_object_t v51 = xpc_dictionary_get_value(*v4, key);
  *(void *)&v228.st_dev = v51;
  if (v51) {
    xpc_retain(v51);
  }
  else {
    *(void *)&v228.st_dev = xpc_null_create();
  }
  char v219 = xpc::dyn_cast_or_default((xpc *)&v228, (const object *)v219);
  xpc_release(*(xpc_object_t *)&v228.st_dev);
  std::string::size_type size = HIBYTE(v222[0].__r_.__value_.__r.__words[2]);
  if ((v222[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v222[0].__r_.__value_.__l.__size_;
  }
  if (!size) {
    std::string::__assign_external(v222, (const std::string::value_type *)*MEMORY[0x1E4F4C1C8]);
  }
  xpc_object_t v53 = (const void *)*MEMORY[0x1E4F4C198];
  size_t v54 = strlen((const char *)*MEMORY[0x1E4F4C198]);
  if (v54 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v55 = (void *)v54;
  if (v54 >= 0x17)
  {
    uint64_t v57 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v54 | 7) != 0x17) {
      uint64_t v57 = v54 | 7;
    }
    uint64_t v58 = v57 + 1;
    xpc_object_t v56 = operator new(v57 + 1);
    xpc_object_t __dst[2] = (xpc_object_t)(v58 | 0x8000000000000000);
    __dst[0] = v56;
    __dst[1] = v55;
    goto LABEL_116;
  }
  HIBYTE(__dst[2]) = v54;
  xpc_object_t v56 = __dst;
  if (v54) {
LABEL_116:
  }
    memmove(v56, v53, (size_t)v55);
  *((unsigned char *)v55 + (void)v56) = 0;
  memset(&v228, 0, 24);
  if (!prop::systemlogs::get((char *)__dst, (uint64_t)&v228))
  {
    unsigned int data = 0;
    if ((SHIBYTE(v228.st_gid) & 0x80000000) == 0) {
      goto LABEL_125;
    }
    goto LABEL_124;
  }
  LODWORD(v226.__r_.__value_.__l.__data_) = -1431655766;
  if (util::convert<int>((const std::string *)&v228, &v226, 0)) {
    unsigned int data = v226.__r_.__value_.__l.__data_;
  }
  else {
    unsigned int data = 0;
  }
  if (SHIBYTE(v228.st_gid) < 0) {
LABEL_124:
  }
    operator delete(*(void **)&v228.st_dev);
LABEL_125:
  if (SHIBYTE(__dst[2]) < 0) {
    operator delete(__dst[0]);
  }
  v183 = (const __CFString **)*MEMORY[0x1E4F4C2F8];
  xpc_object_t v60 = xpc_dictionary_get_value(*v4, (const char *)*MEMORY[0x1E4F4C2F8]);
  *(void *)&v228.st_dev = v60;
  if (v60) {
    xpc_retain(v60);
  }
  else {
    *(void *)&v228.st_dev = xpc_null_create();
  }
  int v61 = xpc::dyn_cast_or_default((xpc *)&v228, (const object *)data);
  xpc_release(*(xpc_object_t *)&v228.st_dev);
  if ((TelephonyUtilIsInternalBuild() & 1) != 0
    || ((IsCarrierBuild = TelephonyUtilIsCarrierBuild(), v61 != 2) ? (char v63 = 1) : (char v63 = IsCarrierBuild), (v63 & 1) != 0))
  {
    if (v61 == 2)
    {
      size_t v64 = (uint64_t **)a1[32];
      if (v64)
      {
        unint64_t v65 = a1[11];
        if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
        {
          abm::helper::asString();
          if ((v228.st_gid & 0x80000000) == 0) {
            size_t v66 = &v228;
          }
          else {
            size_t v66 = *(stat **)&v228.st_dev;
          }
          LODWORD(__dst[0]) = 136315138;
          *(xpc_object_t *)((char *)__dst + 4) = v66;
          _os_log_impl(&dword_1C59C6000, v65, OS_LOG_TYPE_DEFAULT, "#I Detected a log dump with sysdiagnose mode, overriding compression mode to %s", (uint8_t *)__dst, 0xCu);
          if (SHIBYTE(v228.st_gid) < 0) {
            operator delete(*(void **)&v228.st_dev);
          }
          size_t v64 = (uint64_t **)a1[32];
        }
        BBLogTracker::addLog(v64, (long long *)v224, 2, (uint64_t)__sz);
        uint64_t v67 = (uint64_t *)a1[32];
        if ((unint64_t)v67[2] >= 0xB)
        {
          do
            std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::erase(v67, *v67);
          while ((unint64_t)v67[2] > 0xA);
        }
        int v38 = 0;
      }
      int v182 = 2;
    }
    else
    {
      int v182 = v61;
    }
  }
  else
  {
    v68 = a1[11];
    if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v228.st_dev) = 0;
      _os_log_error_impl(&dword_1C59C6000, v68, OS_LOG_TYPE_ERROR, "Detected a log dump with SYSDIAGNOSE mode in customer build, overriding to OFF", (uint8_t *)&v228, 2u);
    }
    int v182 = 0;
  }
  memset(__dst, 170, 24);
  v69 = (const void *)*MEMORY[0x1E4F4F928];
  size_t v70 = strlen((const char *)*MEMORY[0x1E4F4F928]);
  if (v70 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  char v71 = (void *)v70;
  if (v70 >= 0x17)
  {
    uint64_t v73 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v70 | 7) != 0x17) {
      uint64_t v73 = v70 | 7;
    }
    uint64_t v74 = v73 + 1;
    CFAllocatorRef v72 = operator new(v73 + 1);
    xpc_object_t __dst[2] = (xpc_object_t)(v74 | 0x8000000000000000);
    __dst[0] = v72;
    __dst[1] = v71;
LABEL_160:
    memmove(v72, v69, (size_t)v71);
    *((unsigned char *)v71 + (void)v72) = 0;
    if (!v38) {
      goto LABEL_177;
    }
    goto LABEL_161;
  }
  HIBYTE(__dst[2]) = v70;
  CFAllocatorRef v72 = __dst;
  if (v70) {
    goto LABEL_160;
  }
  LOBYTE(__dst[0]) = 0;
  if (!v38) {
    goto LABEL_177;
  }
LABEL_161:
  size_t v75 = v4;
  int v76 = v38;
  v181 = a3;
  uint64_t v77 = a1;
  uint64_t v78 = (const void *)*MEMORY[0x1E4F4F940];
  size_t v79 = strlen((const char *)*MEMORY[0x1E4F4F940]);
  int v80 = SHIBYTE(v224[2]);
  if (SHIBYTE(v224[2]) >= 0) {
    size_t v81 = HIBYTE(v224[2]);
  }
  else {
    size_t v81 = (size_t)v224[1];
  }
  __darwin_ino64_t v82 = v81 + v79;
  memset(&v228, 170, 24);
  if (v81 + v79 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v83 = v79;
  if (v82 > 0x16)
  {
    uint64_t v92 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v82 | 7) != 0x17) {
      uint64_t v92 = v82 | 7;
    }
    uint64_t v93 = v92 + 1;
    v84 = (char *)operator new(v92 + 1);
    v228.st_ino = v82;
    *(void *)&v228.st_uid = v93 | 0x8000000000000000;
    *(void *)&v228.st_dev = v84;
    int v38 = v76;
    if (!v83) {
      goto LABEL_168;
    }
    goto LABEL_167;
  }
  memset(&v228, 0, 24);
  v84 = (char *)&v228;
  HIBYTE(v228.st_gid) = v81 + v79;
  int v38 = v76;
  if (v79) {
LABEL_167:
  }
    memcpy(v84, v78, v83);
LABEL_168:
  xpc_object_t v85 = &v84[v83];
  size_t v4 = v75;
  if (v81)
  {
    if (v80 >= 0) {
      uint64_t v86 = v224;
    }
    else {
      uint64_t v86 = (void **)v224[0];
    }
    memmove(v85, v86, v81);
  }
  v85[v81] = 0;
  uint64_t v87 = std::string::append((std::string *)&v228, "/", 1uLL);
  v88 = (void *)v87->__r_.__value_.__r.__words[0];
  v226.__r_.__value_.__r.__words[0] = v87->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v226.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v87->__r_.__value_.__r.__words[1] + 7);
  char v89 = HIBYTE(v87->__r_.__value_.__r.__words[2]);
  v87->__r_.__value_.__l.__size_ = 0;
  v87->__r_.__value_.__r.__words[2] = 0;
  v87->__r_.__value_.__r.__words[0] = 0;
  a1 = v77;
  if (SHIBYTE(__dst[2]) < 0) {
    operator delete(__dst[0]);
  }
  __dst[0] = v88;
  __dst[1] = v226.__r_.__value_.__l.__data_;
  *(xpc_object_t *)((char *)&__dst[1] + 7) = *(xpc_object_t *)((char *)v226.__r_.__value_.__r.__words + 7);
  HIBYTE(__dst[2]) = v89;
  a3 = v181;
  if (SHIBYTE(v228.st_gid) < 0) {
    operator delete(*(void **)&v228.st_dev);
  }
LABEL_177:
  support::fs::createDir((const char *)__dst, 0x1EDu, 1);
  if ((__sz[2] & 0x8000000000000000) == 0) {
    size_t v90 = HIBYTE(__sz[2]);
  }
  else {
    size_t v90 = __sz[1];
  }
  if (v90 == strlen(__s))
  {
    v91 = (__sz[2] & 0x8000000000000000) == 0 ? __sz : (std::string::size_type *)__sz[0];
    if (!memcmp(v91, __s, v90))
    {
      char v218 = 9;
      strcpy((char *)__p, "StateDump");
      if (SHIBYTE(v222[0].__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v216, v222[0].__r_.__value_.__l.__data_, v222[0].__r_.__value_.__l.__size_);
      }
      else {
        std::string v216 = v222[0];
      }
      TraceManager::submitTraceMetric_sync((uint64_t)a1, (const char *)__p, (const char *)&v216);
      if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v216.__r_.__value_.__l.__data_);
      }
      if (v218 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  memset(&v226, 0, sizeof(v226));
  TraceFilter::determineFilterAction(&v226);
  xpc_object_t v94 = (const void *)*MEMORY[0x1E4F4C820];
  size_t v95 = strlen((const char *)*MEMORY[0x1E4F4C820]);
  if (v95 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  __darwin_ino64_t v96 = v95;
  if (v95 >= 0x17)
  {
    uint64_t v99 = (v95 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v95 | 7) != 0x17) {
      uint64_t v99 = v95 | 7;
    }
    uint64_t v100 = v99 + 1;
    xpc_object_t v97 = operator new(v99 + 1);
    v228.st_ino = v96;
    *(void *)&v228.st_uid = v100 | 0x8000000000000000;
    *(void *)&v228.st_dev = v97;
  }
  else
  {
    HIBYTE(v228.st_gid) = v95;
    xpc_object_t v97 = &v228;
    if (!v95)
    {
      int v98 = v38;
      goto LABEL_204;
    }
  }
  int v98 = v38;
  memmove(v97, v94, v96);
LABEL_204:
  *((unsigned char *)v97 + v96) = 0;
  int st_gid_high = SHIBYTE(v228.st_gid);
  xpc_object_t v102 = *(void **)&v228.st_dev;
  if ((v228.st_gid & 0x80000000) == 0) {
    xpc_object_t v103 = &v228;
  }
  else {
    xpc_object_t v103 = *(stat **)&v228.st_dev;
  }
  if ((v226.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    xpc_object_t v104 = &v226;
  }
  else {
    xpc_object_t v104 = (std::string *)v226.__r_.__value_.__r.__words[0];
  }
  size_t v105 = strlen((const char *)v94);
  int v106 = strncasecmp((const char *)v103, (const char *)v104, v105);
  int v107 = v106;
  if (st_gid_high < 0)
  {
    operator delete(v102);
    int v108 = v98;
    if (!v107) {
      goto LABEL_215;
    }
    goto LABEL_214;
  }
  int v108 = v98;
  if (v106) {
LABEL_214:
  }
    std::string::append(v222, " (some logs are dropped due to not enough space on device!)", 0x3BuLL);
LABEL_215:
  std::string v109 = a1[11];
  if (os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT))
  {
    std::string v110 = &v226;
    if ((v226.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string v110 = (std::string *)v226.__r_.__value_.__r.__words[0];
    }
    v228.st_dev = 136315138;
    *(void *)&v228.st_mode = v110;
    _os_log_impl(&dword_1C59C6000, v109, OS_LOG_TYPE_DEFAULT, "#I Trace filter '%s'", (uint8_t *)&v228, 0xCu);
  }
  CFTypeRef cf = 0;
  CFAllocatorRef v111 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  v114 = Mutable;
  if (Mutable) {
    CFTypeRef cf = Mutable;
  }
  if (SHIBYTE(v222[0].__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v228, v222[0].__r_.__value_.__l.__data_, v222[0].__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v228.st_dev = *(_OWORD *)&v222[0].__r_.__value_.__l.__data_;
    *(void *)&v228.st_uid = *((void *)&v222[0].__r_.__value_.__l + 2);
  }
  ctu::cf::insert<char const*,std::string>(v114, v191, (uint64_t)&v228, (uint64_t)v111, v113);
  if (SHIBYTE(v228.st_gid) < 0)
  {
    operator delete(*(void **)&v228.st_dev);
    if ((SHIBYTE(v224[2]) & 0x80000000) == 0) {
      goto LABEL_226;
    }
  }
  else if ((SHIBYTE(v224[2]) & 0x80000000) == 0)
  {
LABEL_226:
    *(_OWORD *)&v228.st_dev = *(_OWORD *)v224;
    *(void **)&v228.st_uid = v224[2];
    goto LABEL_229;
  }
  std::string::__init_copy_ctor_external((std::string *)&v228, (const std::string::value_type *)v224[0], (std::string::size_type)v224[1]);
LABEL_229:
  ctu::cf::insert<char const*,std::string>(v114, v190, (uint64_t)&v228, (uint64_t)v111, v115);
  if (SHIBYTE(v228.st_gid) < 0)
  {
    operator delete(*(void **)&v228.st_dev);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0) {
      goto LABEL_231;
    }
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
LABEL_231:
    *(_OWORD *)&v228.st_dev = *(_OWORD *)__dst;
    *(xpc_object_t *)&v228.st_uid = __dst[2];
    goto LABEL_234;
  }
  std::string::__init_copy_ctor_external((std::string *)&v228, (const std::string::value_type *)__dst[0], (std::string::size_type)__dst[1]);
LABEL_234:
  ctu::cf::insert<char const*,std::string>(v114, (const __CFString **)*MEMORY[0x1E4F4C7F8], (uint64_t)&v228, (uint64_t)v111, v116);
  if (SHIBYTE(v228.st_gid) < 0)
  {
    operator delete(*(void **)&v228.st_dev);
    if ((SHIBYTE(__sz[2]) & 0x80000000) == 0) {
      goto LABEL_236;
    }
  }
  else if ((SHIBYTE(__sz[2]) & 0x80000000) == 0)
  {
LABEL_236:
    *(_OWORD *)&v228.st_dev = *(_OWORD *)__sz;
    *(void *)&v228.st_uid = __sz[2];
    goto LABEL_239;
  }
  std::string::__init_copy_ctor_external((std::string *)&v228, (const std::string::value_type *)__sz[0], __sz[1]);
LABEL_239:
  ctu::cf::insert<char const*,std::string>(v114, v189, (uint64_t)&v228, (uint64_t)v111, v117);
  if (SHIBYTE(v228.st_gid) < 0)
  {
    operator delete(*(void **)&v228.st_dev);
    if ((SHIBYTE(v226.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_241;
    }
  }
  else if ((SHIBYTE(v226.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_241:
    *(_OWORD *)&v228.st_dev = *(_OWORD *)&v226.__r_.__value_.__l.__data_;
    *(void *)&v228.st_uid = *((void *)&v226.__r_.__value_.__l + 2);
    goto LABEL_244;
  }
  std::string::__init_copy_ctor_external((std::string *)&v228, v226.__r_.__value_.__l.__data_, v226.__r_.__value_.__l.__size_);
LABEL_244:
  ctu::cf::insert<char const*,std::string>(v114, (const __CFString **)*MEMORY[0x1E4F4C6A0], (uint64_t)&v228, (uint64_t)v111, v118);
  if (SHIBYTE(v228.st_gid) < 0)
  {
    operator delete(*(void **)&v228.st_dev);
    if ((SHIBYTE(v223[2]) & 0x80000000) == 0) {
      goto LABEL_246;
    }
  }
  else if ((SHIBYTE(v223[2]) & 0x80000000) == 0)
  {
LABEL_246:
    *(_OWORD *)&v228.st_dev = *(_OWORD *)v223;
    *(void **)&v228.st_uid = v223[2];
    goto LABEL_249;
  }
  std::string::__init_copy_ctor_external((std::string *)&v228, (const std::string::value_type *)v223[0], (std::string::size_type)v223[1]);
LABEL_249:
  ctu::cf::insert<char const*,std::string>(v114, v187, (uint64_t)&v228, (uint64_t)v111, v119);
  if (SHIBYTE(v228.st_gid) < 0)
  {
    operator delete(*(void **)&v228.st_dev);
    if ((SHIBYTE(v222[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_251;
    }
  }
  else if ((SHIBYTE(v222[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_251:
    *(_OWORD *)&v228.st_dev = *(_OWORD *)&v222[1].__r_.__value_.__l.__data_;
    *(void *)&v228.st_uid = *((void *)&v222[1].__r_.__value_.__l + 2);
    goto LABEL_254;
  }
  std::string::__init_copy_ctor_external((std::string *)&v228, v222[1].__r_.__value_.__l.__data_, v222[1].__r_.__value_.__l.__size_);
LABEL_254:
  ctu::cf::insert<char const*,std::string>(v114, v188, (uint64_t)&v228, (uint64_t)v111, v120);
  if (SHIBYTE(v228.st_gid) < 0) {
    operator delete(*(void **)&v228.st_dev);
  }
  ctu::cf::insert<char const*,int>(v114, v186, v185, v111, v121);
  ctu::cf::insert<char const*,int>(v114, v184, v108, v111, v122);
  ctu::cf::insert<char const*,BOOL>(v114, (const __CFString **)*MEMORY[0x1E4F4CF88], v220, (uint64_t)v111, v123);
  ctu::cf::insert<char const*,int>(v114, v183, v182, v111, v124);
  ctu::cf::insert<char const*,BOOL>(v114, (const __CFString **)key, v219, (uint64_t)v111, v125);
  xpc_object_t v126 = (const __CFString **)*MEMORY[0x1E4F4C8E8];
  xpc_object_t v127 = xpc_dictionary_get_value(*v4, (const char *)*MEMORY[0x1E4F4C8E8]);
  *(void *)&v228.st_dev = v127;
  if (v127) {
    xpc_retain(v127);
  }
  else {
    *(void *)&v228.st_dev = xpc_null_create();
  }
  int v128 = xpc::dyn_cast_or_default((xpc *)&v228, 0);
  ctu::cf::insert<char const*,BOOL>(v114, v126, v128, (uint64_t)v111, v129);
  xpc_release(*(xpc_object_t *)&v228.st_dev);
  uint64_t v130 = (const __CFString **)*MEMORY[0x1E4F4C900];
  xpc_object_t v131 = xpc_dictionary_get_value(*v4, (const char *)*MEMORY[0x1E4F4C900]);
  *(void *)&v228.st_dev = v131;
  if (v131) {
    xpc_retain(v131);
  }
  else {
    *(void *)&v228.st_dev = xpc_null_create();
  }
  int v132 = xpc::dyn_cast_or_default((xpc *)&v228, 0);
  ctu::cf::insert<char const*,BOOL>(v114, v130, v132, (uint64_t)v111, v133);
  xpc_release(*(xpc_object_t *)&v228.st_dev);
  BOOL v134 = (const __CFString **)*MEMORY[0x1E4F4C8F8];
  xpc_object_t v135 = xpc_dictionary_get_value(*v4, (const char *)*MEMORY[0x1E4F4C8F8]);
  *(void *)&v228.st_dev = v135;
  if (v135) {
    xpc_retain(v135);
  }
  else {
    *(void *)&v228.st_dev = xpc_null_create();
  }
  int v136 = xpc::dyn_cast_or_default((xpc *)&v228, 0);
  ctu::cf::insert<char const*,BOOL>(v114, v134, v136, (uint64_t)v111, v137);
  xpc_release(*(xpc_object_t *)&v228.st_dev);
  ctu::cf::insert<char const*,BOOL>(v114, (const __CFString **)__src, v221, (uint64_t)v111, v138);
  unint64_t v213 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v214 = 0xAAAAAAAAAAAAAAAALL;
  GetABMLogServer(&v211);
  abm::HelperClient::create();
  v139 = v212;
  if (v212 && !atomic_fetch_add(&v212->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
    std::__shared_weak_count::__release_weak(v139);
  }
  xpc_object_t v140 = xpc_dictionary_create(0, 0, 0);
  if (v140 || (xpc_object_t v140 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v140) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v140);
      xpc_object_t v141 = v140;
    }
    else
    {
      xpc_object_t v141 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v141 = xpc_null_create();
    xpc_object_t v140 = 0;
  }
  xpc_release(v140);
  xpc_object_t v210 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v142 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v143 = v142;
  if (v142)
  {
    xpc_object_t v210 = v142;
  }
  else
  {
    xpc_object_t v143 = xpc_null_create();
    xpc_object_t v210 = v143;
    if (!v143)
    {
      xpc_object_t v144 = xpc_null_create();
      xpc_object_t v143 = 0;
      goto LABEL_281;
    }
  }
  if (MEMORY[0x1C8795EB0](v143) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v143);
    goto LABEL_282;
  }
  xpc_object_t v144 = xpc_null_create();
LABEL_281:
  xpc_object_t v210 = v144;
LABEL_282:
  xpc_release(v143);
  xpc_object_t v145 = xpc_int64_create(1500);
  if (!v145) {
    xpc_object_t v145 = xpc_null_create();
  }
  xpc_dictionary_set_value(v141, (const char *)*MEMORY[0x1E4F470A0], v145);
  xpc_object_t v146 = xpc_null_create();
  xpc_release(v145);
  xpc_release(v146);
  if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C1F8], v147)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4D338], v148)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C288], v149))
  {
    v150 = (const __CFString ***)MEMORY[0x1E4F4F968];
    v151 = (const void *)*MEMORY[0x1E4F4F968];
    size_t v152 = strlen((const char *)*MEMORY[0x1E4F4F968]);
    if (v152 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    v153 = (void *)v152;
    if (v152 >= 0x17)
    {
      uint64_t v155 = (v152 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v152 | 7) != 0x17) {
        uint64_t v155 = v152 | 7;
      }
      uint64_t v156 = v155 + 1;
      v154 = operator new(v155 + 1);
      v208[1] = v153;
      int64_t v209 = v156 | 0x8000000000000000;
      v208[0] = v154;
    }
    else
    {
      HIBYTE(v209) = v152;
      v154 = v208;
      if (!v152)
      {
LABEL_295:
        *((unsigned char *)v153 + (void)v154) = 0;
        v157.tv_sec = 0xAAAAAAAAAAAAAAAALL;
        v157.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
        *(timespec *)&v228.st_blkstd::string::size_type size = v157;
        *(timespec *)v228.st_qspare = v157;
        v228.st_birthtimespec = v157;
        *(timespec *)&v228.st_std::string::size_type size = v157;
        v228.st_mtimespec = v157;
        v228.st_ctimespec = v157;
        *(timespec *)&v228.st_uid = v157;
        v228.st_atimespec = v157;
        *(timespec *)&v228.st_dev = v157;
        if (v209 >= 0) {
          v158 = v208;
        }
        else {
          v158 = (void **)v208[0];
        }
        int v159 = stat((const char *)v158, &v228);
        int v161 = v159;
        if (SHIBYTE(v209) < 0)
        {
          operator delete(v208[0]);
          if (v161) {
            goto LABEL_300;
          }
        }
        else if (v159)
        {
LABEL_300:
          *(void *)&long long v162 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v162 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&v228.st_dev = v162;
          *(_OWORD *)&v228.st_uid = v162;
          xpc_object_t v207 = v141;
          if (v141) {
            xpc_retain(v141);
          }
          else {
            xpc_object_t v207 = xpc_null_create();
          }
          abm::HelperClient::perform();
          xpc_release(v207);
          xpc_object_t v207 = 0;
          if (!v228.st_dev) {
            ctu::cf::insert<char const*,char const*>((__CFDictionary *)cf, (const __CFString **)*MEMORY[0x1E4F4D2B8], *v150, (uint64_t)v111, v163);
          }
          if (*((char *)&v228.st_rdev + 7) < 0) {
            operator delete((void *)v228.st_ino);
          }
          goto LABEL_311;
        }
        ctu::cf::insert<char const*,char const*>((__CFDictionary *)cf, (const __CFString **)*MEMORY[0x1E4F4D2B8], *v150, (uint64_t)v111, v160);
        goto LABEL_311;
      }
    }
    memmove(v154, v151, (size_t)v153);
    goto LABEL_295;
  }
  v164 = a1[11];
  if (os_log_type_enabled(v164, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v228.st_dev) = 0;
    _os_log_impl(&dword_1C59C6000, v164, OS_LOG_TYPE_DEFAULT, "#I mobile BasebandServices path is disabled as baseband log is off", (uint8_t *)&v228, 2u);
  }
LABEL_311:
  v165 = (std::__shared_weak_count *)a1[16];
  *(void *)&v228.st_dev = a1[15];
  if (!v165 || (v228.st_ino = (__darwin_ino64_t)std::__shared_weak_count::lock(v165)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v166 = (const void *)*MEMORY[0x1E4F4CB10];
  size_t v167 = strlen((const char *)*MEMORY[0x1E4F4CB10]);
  if (v167 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  v168 = (void *)v167;
  if (v167 >= 0x17)
  {
    uint64_t v171 = (v167 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v167 | 7) != 0x17) {
      uint64_t v171 = v167 | 7;
    }
    uint64_t v172 = v171 + 1;
    v169 = operator new(v171 + 1);
    v205[1] = v168;
    unint64_t v206 = v172 | 0x8000000000000000;
    v205[0] = v169;
LABEL_321:
    memmove(v169, v166, (size_t)v168);
    *((unsigned char *)v168 + (void)v169) = 0;
    CFTypeRef v170 = cf;
    if (!cf) {
      goto LABEL_324;
    }
    goto LABEL_322;
  }
  HIBYTE(v206) = v167;
  v169 = v205;
  if (v167) {
    goto LABEL_321;
  }
  LOBYTE(v205[0]) = 0;
  CFTypeRef v170 = cf;
  if (!cf) {
    goto LABEL_324;
  }
LABEL_322:
  CFTypeID v173 = CFGetTypeID(v170);
  if (v173 == CFDictionaryGetTypeID())
  {
    CFTypeRef v204 = v170;
    CFRetain(v170);
    goto LABEL_325;
  }
LABEL_324:
  CFTypeRef v204 = 0;
LABEL_325:
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN12TraceManager16collectLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_50_0;
  aBlock[4] = a1;
  long long v196 = *(_OWORD *)&v228.st_dev;
  if (v228.st_ino) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v228.st_ino + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v197 = v213;
  v198 = (std::__shared_weak_count *)v214;
  if (v214) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v214 + 8), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v199 = v141;
  if (!v141)
  {
    xpc_object_t v199 = xpc_null_create();
    CFTypeRef v200 = v170;
    if (!v170) {
      goto LABEL_334;
    }
    goto LABEL_333;
  }
  xpc_retain(v141);
  CFTypeRef v170 = cf;
  CFTypeRef v200 = cf;
  if (cf) {
LABEL_333:
  }
    CFRetain(v170);
LABEL_334:
  v174 = *a3;
  if (*a3) {
    v174 = _Block_copy(v174);
  }
  v201 = v174;
  if (SHIBYTE(v222[0].__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v202, v222[0].__r_.__value_.__l.__data_, v222[0].__r_.__value_.__l.__size_);
  }
  else {
    std::string v202 = v222[0];
  }
  v203 = _Block_copy(aBlock);
  Service::broadcastEvent((uint64_t)a1, (uint64_t)v205, &v204, (const void **)&v203);
  if (v203) {
    _Block_release(v203);
  }
  if (v204) {
    CFRelease(v204);
  }
  if ((SHIBYTE(v206) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v202.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_345;
    }
LABEL_348:
    operator delete(v202.__r_.__value_.__l.__data_);
    v175 = v201;
    if (!v201) {
      goto LABEL_350;
    }
    goto LABEL_349;
  }
  operator delete(v205[0]);
  if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_348;
  }
LABEL_345:
  v175 = v201;
  if (v201) {
LABEL_349:
  }
    _Block_release(v175);
LABEL_350:
  if (v200) {
    CFRelease(v200);
  }
  xpc_release(v199);
  xpc_object_t v199 = 0;
  v176 = v198;
  if (v198 && !atomic_fetch_add(&v198->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
    std::__shared_weak_count::__release_weak(v176);
  }
  v177 = (std::__shared_weak_count *)*((void *)&v196 + 1);
  if (*((void *)&v196 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v196 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
    std::__shared_weak_count::__release_weak(v177);
  }
  st_ino = (std::__shared_weak_count *)v228.st_ino;
  if (v228.st_ino && !atomic_fetch_add((atomic_ullong *volatile)(v228.st_ino + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))st_ino->__on_zero_shared)(st_ino);
    std::__shared_weak_count::__release_weak(st_ino);
  }
  xpc_release(v210);
  xpc_release(v141);
  v179 = (std::__shared_weak_count *)v214;
  if (!v214 || atomic_fetch_add((atomic_ullong *volatile)(v214 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    CFTypeRef v180 = cf;
    if (!cf) {
      goto LABEL_365;
    }
    goto LABEL_364;
  }
  ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
  std::__shared_weak_count::__release_weak(v179);
  CFTypeRef v180 = cf;
  if (cf) {
LABEL_364:
  }
    CFRelease(v180);
LABEL_365:
  if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v226.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
    {
LABEL_367:
      if ((SHIBYTE(v222[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_368;
      }
      goto LABEL_375;
    }
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_367;
  }
  operator delete(__dst[0]);
  if ((SHIBYTE(v222[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_368:
    if ((SHIBYTE(v222[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_369;
    }
    goto LABEL_376;
  }
LABEL_375:
  operator delete(v222[0].__r_.__value_.__l.__data_);
  if ((SHIBYTE(v222[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_369:
    if ((SHIBYTE(v223[2]) & 0x80000000) == 0) {
      goto LABEL_370;
    }
    goto LABEL_377;
  }
LABEL_376:
  operator delete(v222[1].__r_.__value_.__l.__data_);
  if ((SHIBYTE(v223[2]) & 0x80000000) == 0)
  {
LABEL_370:
    if ((SHIBYTE(v224[2]) & 0x80000000) == 0) {
      goto LABEL_371;
    }
    goto LABEL_378;
  }
LABEL_377:
  operator delete(v223[0]);
  if ((SHIBYTE(v224[2]) & 0x80000000) == 0)
  {
LABEL_371:
    if ((SHIBYTE(__sz[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_379:
    operator delete((void *)__sz[0]);
    return;
  }
LABEL_378:
  operator delete(v224[0]);
  if (SHIBYTE(__sz[2]) < 0) {
    goto LABEL_379;
  }
}

void sub_1C5A44D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,xpc_object_t a32,uint64_t a33,void *aBlock,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,xpc_object_t a43,void *a44,uint64_t a45,uint64_t a46,xpc_object_t object,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  if (a62 < 0) {
    operator delete(__p);
  }
  if (SLOBYTE(STACK[0x247]) < 0) {
    operator delete((void *)STACK[0x230]);
  }
  if (a69 < 0) {
    operator delete(a64);
  }
  if (a72 < 0) {
    operator delete(a70);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE48c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  size_t v4 = *(const void **)(a2 + 40);
  if (v4)
  {
    std::string::size_type v5 = _Block_copy(v4);
    xpc_object_t v6 = *(void **)(a2 + 48);
    *(void *)(a1 + 40) = v5;
    *(void *)(a1 + 48) = v6;
    if (v6) {
      return xpc_retain(v6);
    }
  }
  else
  {
    xpc_object_t v6 = *(void **)(a2 + 48);
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = v6;
    if (v6) {
      return xpc_retain(v6);
    }
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 48) = result;
  return result;
}

void __destroy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE48c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(void *)(a1 + 48) = 0;
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2) {
    _Block_release(v2);
  }
}

void TraceManager::submitTraceMetric_sync(uint64_t a1, const char *a2, const char *a3)
{
  xpc_object_t v3 = *(NSObject **)(a1 + 88);
  if (*(void *)(a1 + 152))
  {
    if (os_log_type_enabled(*(os_log_t *)(a1 + 88), OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Submitting AWD of trace stats", buf, 2u);
    }
    xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
    uint64_t v8 = MEMORY[0x1E4F14590];
    if (v7 || (xpc_object_t v7 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C8795EB0](v7) == v8)
      {
        xpc_retain(v7);
        xpc_object_t v9 = v7;
      }
      else
      {
        xpc_object_t v9 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v9 = xpc_null_create();
      xpc_object_t v7 = 0;
    }
    xpc_release(v7);
    xpc_object_t v10 = xpc_dictionary_create(0, 0, 0);
    if (v10 || (xpc_object_t v10 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C8795EB0](v10) == v8)
      {
        xpc_retain(v10);
        xpc_object_t v11 = v10;
      }
      else
      {
        xpc_object_t v11 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v11 = xpc_null_create();
      xpc_object_t v10 = 0;
    }
    xpc_release(v10);
    if (a2[23] < 0) {
      a2 = *(const char **)a2;
    }
    xpc_object_t v12 = xpc_string_create(a2);
    if (!v12) {
      xpc_object_t v12 = xpc_null_create();
    }
    xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E4F4C8C8], v12);
    xpc_object_t v13 = xpc_null_create();
    xpc_release(v12);
    xpc_release(v13);
    if (a3[23] < 0) {
      a3 = *(const char **)a3;
    }
    xpc_object_t v14 = xpc_string_create(a3);
    if (!v14) {
      xpc_object_t v14 = xpc_null_create();
    }
    xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E4F4CB30], v14);
    xpc_object_t v15 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v15);
    xpc_object_t v16 = xpc_string_create((const char *)*MEMORY[0x1E4F4D2D0]);
    if (!v16) {
      xpc_object_t v16 = xpc_null_create();
    }
    xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E4F4C190], v16);
    xpc_object_t v17 = xpc_null_create();
    xpc_release(v16);
    xpc_release(v17);
    xpc_object_t v18 = xpc_int64_create(524539);
    if (!v18) {
      xpc_object_t v18 = xpc_null_create();
    }
    xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E4F4C258], v18);
    xpc_object_t v19 = xpc_null_create();
    xpc_release(v18);
    xpc_release(v19);
    if (v11)
    {
      xpc_retain(v11);
      xpc_object_t v20 = v11;
    }
    else
    {
      xpc_object_t v20 = xpc_null_create();
    }
    xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E4F4C188], v20);
    xpc_object_t v21 = xpc_null_create();
    xpc_release(v20);
    xpc_release(v21);
    xpc_object_t v22 = (const void *)*MEMORY[0x1E4F4C738];
    size_t v23 = strlen((const char *)*MEMORY[0x1E4F4C738]);
    if (v23 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v24 = v23;
    if (v23 >= 0x17)
    {
      uint64_t v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v23 | 7) != 0x17) {
        uint64_t v26 = v23 | 7;
      }
      uint64_t v27 = v26 + 1;
      int v25 = operator new(v26 + 1);
      size_t v31 = v24;
      unint64_t v32 = v27 | 0x8000000000000000;
      *(void *)buf = v25;
    }
    else
    {
      HIBYTE(v32) = v23;
      int v25 = buf;
      if (!v23)
      {
        buf[0] = 0;
        xpc_object_t object = v9;
        if (v9)
        {
LABEL_37:
          xpc_retain(v9);
LABEL_43:
          xpc_object_t v28 = 0;
          Service::runCommand(a1, (uint64_t)buf, &object, &v28);
          xpc_release(object);
          xpc_object_t object = 0;
          if (SHIBYTE(v32) < 0) {
            operator delete(*(void **)buf);
          }
          xpc_release(v11);
          xpc_release(v9);
          return;
        }
LABEL_42:
        xpc_object_t object = xpc_null_create();
        goto LABEL_43;
      }
    }
    memmove(v25, v22, v24);
    *((unsigned char *)v25 + v24) = 0;
    xpc_object_t object = v9;
    if (v9) {
      goto LABEL_37;
    }
    goto LABEL_42;
  }
  if (os_log_type_enabled(*(os_log_t *)(a1 + 88), OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_ERROR, "Baseband manager is not ready yet", buf, 2u);
  }
}

void sub_1C5A457DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  xpc_release(object);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(v17);
  xpc_release(v16);
  _Unwind_Resume(a1);
}

uint64_t ___ZN12TraceManager16collectLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  std::string::size_type v3 = *(void *)(a1 + 64);
  std::string::size_type v20 = *(void *)(a1 + 56);
  std::string::size_type v21 = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  size_t v4 = *(void **)(a1 + 72);
  xpc_object_t object = v4;
  if (!v4)
  {
    xpc_object_t object = xpc_null_create();
    std::string::size_type v5 = *(const void **)(a1 + 80);
    size_t v23 = v2;
    size_t v24 = v5;
    if (!v5) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  xpc_retain(v4);
  std::string::size_type v5 = *(const void **)(a1 + 80);
  size_t v23 = v2;
  size_t v24 = v5;
  if (v5) {
LABEL_7:
  }
    CFRetain(v5);
LABEL_8:
  xpc_object_t v6 = *(void **)(a1 + 88);
  if (v6) {
    xpc_object_t v6 = _Block_copy(v6);
  }
  aBlock = v6;
  if (*(char *)(a1 + 119) < 0) {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)(a1 + 96), *(void *)(a1 + 104));
  }
  else {
    std::string v26 = *(std::string *)(a1 + 96);
  }
  xpc_object_t v7 = (std::__shared_weak_count *)v2[16];
  if (!v7 || (v8 = v2[15], (xpc_object_t v9 = std::__shared_weak_count::lock(v7)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v10 = v9;
  xpc_object_t v11 = (std::string *)operator new(0x48uLL);
  std::string::size_type v12 = v21;
  v11->__r_.__value_.__r.__words[0] = v20;
  v11->__r_.__value_.__l.__size_ = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v13 = object;
  v11->__r_.__value_.__r.__words[2] = (std::string::size_type)object;
  if (!v13)
  {
    v11->__r_.__value_.__r.__words[2] = (std::string::size_type)xpc_null_create();
    xpc_object_t v14 = v24;
    v11[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
    v11[1].__r_.__value_.__l.__size_ = (std::string::size_type)v14;
    if (!v14) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  xpc_retain(v13);
  xpc_object_t v14 = v24;
  v11[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
  v11[1].__r_.__value_.__l.__size_ = (std::string::size_type)v14;
  if (v14) {
LABEL_21:
  }
    CFRetain(v14);
LABEL_22:
  xpc_object_t v15 = aBlock;
  if (aBlock) {
    xpc_object_t v15 = _Block_copy(aBlock);
  }
  v11[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v15;
  xpc_object_t v16 = v11 + 2;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v16, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
    v11[2].__r_.__value_.__r.__words[2] = v26.__r_.__value_.__r.__words[2];
  }
  xpc_object_t v17 = v2[17];
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v18 = operator new(0x18uLL);
  *xpc_object_t v18 = v11;
  v18[1] = v8;
  v18[2] = v10;
  dispatch_async_f(v17, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI12TraceManagerE15execute_wrappedIZZNS3_16collectLogs_syncEN3xpc4dictENS_5blockIU13block_pointerFviS7_EEEEUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSI_14default_deleteISD_EEEEENUlPvE_8__invokeESN_);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return _ZZZN12TraceManager16collectLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb0_EN3__1D1Ev((uint64_t)&v20);
}

void sub_1C5A45AB4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, uint64_t a13, uint64_t a14, void *aBlock)
{
  xpc_object_t v17 = *(const void **)(v15 + 40);
  if (v17) {
    _Block_release(v17);
  }
  xpc_object_t v18 = *(const void **)(v15 + 32);
  if (v18) {
    CFRelease(v18);
  }
  xpc_release(*(xpc_object_t *)(v15 + 16));
  *(void *)(v15 + 16) = 0;
  xpc_object_t v19 = *(std::__shared_weak_count **)(v15 + 8);
  if (v19)
  {
    if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      __clang_call_terminate(a1);
    }
  }
  __clang_call_terminate(a1);
}

uint64_t _ZZZN12TraceManager16collectLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb0_EN3__1D1Ev(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    uint64_t v2 = *(const void **)(a1 + 40);
    if (!v2) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2) {
LABEL_5:
  }
    _Block_release(v2);
LABEL_6:
  std::string::size_type v3 = *(const void **)(a1 + 32);
  if (v3) {
    CFRelease(v3);
  }
  xpc_release(*(xpc_object_t *)(a1 + 16));
  *(void *)(a1 + 16) = 0;
  size_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void __copy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrI12TraceManagerEE56c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE72c15_ZTSN3xpc4dictE80c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE88c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE96c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  std::string::size_type v4 = *(void *)(a2 + 48);
  a1[1].__r_.__value_.__r.__words[2] = *(void *)(a2 + 40);
  a1[2].__r_.__value_.__r.__words[0] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::size_type v5 = *(void *)(a2 + 64);
  a1[2].__r_.__value_.__l.__size_ = *(void *)(a2 + 56);
  a1[2].__r_.__value_.__r.__words[2] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v6 = *(void **)(a2 + 72);
  a1[3].__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
  if (!v6)
  {
    a1[3].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    xpc_object_t v7 = *(const void **)(a2 + 80);
    a1[3].__r_.__value_.__l.__size_ = (std::string::size_type)v7;
    if (!v7) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  xpc_retain(v6);
  xpc_object_t v7 = *(const void **)(a2 + 80);
  a1[3].__r_.__value_.__l.__size_ = (std::string::size_type)v7;
  if (v7) {
LABEL_9:
  }
    CFRetain(v7);
LABEL_10:
  uint64_t v8 = *(void **)(a2 + 88);
  if (v8) {
    uint64_t v8 = _Block_copy(v8);
  }
  a1[3].__r_.__value_.__r.__words[2] = (std::string::size_type)v8;
  xpc_object_t v9 = a1 + 4;
  if (*(char *)(a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a2 + 96), *(void *)(a2 + 104));
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 96);
    a1[4].__r_.__value_.__r.__words[2] = *(void *)(a2 + 112);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
}

void sub_1C5A45D60(_Unwind_Exception *a1)
{
  xpc_object_t v7 = *(const void **)(v3 + 88);
  if (v7) {
    _Block_release(v7);
  }
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v5);
  xpc::dict::~dict(v4);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrI12TraceManagerEE56c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE72c15_ZTSN3xpc4dictE80c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE88c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE96c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    uint64_t v2 = *(const void **)(a1 + 88);
    if (!v2) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v2 = *(const void **)(a1 + 88);
  if (v2) {
LABEL_5:
  }
    _Block_release(v2);
LABEL_6:
  uint64_t v3 = *(const void **)(a1 + 80);
  if (v3) {
    CFRelease(v3);
  }
  xpc_release(*(xpc_object_t *)(a1 + 72));
  *(void *)(a1 + 72) = 0;
  std::string::size_type v4 = *(std::__shared_weak_count **)(a1 + 64);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    std::string::size_type v5 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v5) {
      return;
    }
  }
  else
  {
    std::string::size_type v5 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v5) {
      return;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void ___ZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  __p.__r_.__value_.__r.__words[0] = 0;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v3)
  {
    std::string::size_type v5 = 0;
LABEL_7:
    xpc_object_t v7 = xpc_null_create();
    uint64_t v8 = *(void *)(a1 + 56);
    xpc_object_t v31 = v7;
    xpc_object_t v9 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v8 + 16))(v8, 3760250880, &v31);
    xpc_release(v31);
    xpc_release(v9);
    if (!v5 || atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
    char v6 = 1;
    goto LABEL_10;
  }
  std::string::size_type v4 = std::__shared_weak_count::lock(v3);
  std::string::size_type v5 = v4;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
  if (!v4 || !*(void *)(a1 + 40)) {
    goto LABEL_7;
  }
  if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_11;
  }
  char v6 = 0;
LABEL_10:
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (v6) {
    return;
  }
LABEL_11:
  if (*(char *)(a1 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 64), *(void *)(a1 + 72));
    long long v10 = *(void **)(a1 + 56);
    if (!v10) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  std::string __p = *(std::string *)(a1 + 64);
  long long v10 = *(void **)(a1 + 56);
  if (v10) {
LABEL_15:
  }
    long long v10 = _Block_copy(v10);
LABEL_16:
  aBlock = v10;
  int v26 = *(_DWORD *)(a1 + 112);
  xpc_object_t v11 = *(std::__shared_weak_count **)(a1 + 48);
  uint64_t v27 = *(void *)(a1 + 40);
  xpc_object_t v28 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a1 + 111) < 0) {
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)(a1 + 88), *(void *)(a1 + 96));
  }
  else {
    std::string v29 = *(std::string *)(a1 + 88);
  }
  char v30 = *(unsigned char *)(a1 + 116);
  std::string::size_type v12 = (std::__shared_weak_count *)v2[16];
  if (!v12 || (uint64_t v13 = v2[15], (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v15 = v14;
  xpc_object_t v16 = (char *)operator new(0x60uLL);
  xpc_object_t v17 = v16;
  *(void *)xpc_object_t v16 = v2;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)(v16 + 8), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)(v16 + 8) = __p;
  }
  xpc_object_t v18 = aBlock;
  if (aBlock) {
    xpc_object_t v18 = _Block_copy(aBlock);
  }
  *((void *)v17 + 4) = v18;
  *((_DWORD *)v17 + 10) = v26;
  xpc_object_t v19 = v28;
  *((void *)v17 + 6) = v27;
  *((void *)v17 + 7) = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::size_type v20 = (std::string *)(v17 + 64);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v20, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)&v29.__r_.__value_.__l.__data_;
    *((void *)v17 + 10) = *((void *)&v29.__r_.__value_.__l + 2);
  }
  v17[88] = v30;
  std::string::size_type v21 = v2[17];
  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v22 = operator new(0x18uLL);
  *xpc_object_t v22 = v17;
  v22[1] = v13;
  v22[2] = v15;
  dispatch_async_f(v21, v22, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI12TraceManagerE15execute_wrappedIZZNS3_24collectBasebandLogs_syncEN3xpc4dictENS_5blockIU13block_pointerFviS7_EEEEUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSI_14default_deleteISD_EEEEENUlPvE_8__invokeESN_);
  if (atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
LABEL_43:
    operator delete(v29.__r_.__value_.__l.__data_);
    size_t v23 = v28;
    if (!v28) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_43;
  }
LABEL_35:
  size_t v23 = v28;
  if (v28) {
LABEL_36:
  }
    std::__shared_weak_count::__release_weak(v23);
LABEL_37:
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5A4620C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *aBlock, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  size_t v23 = *(std::__shared_weak_count **)(v20 + 56);
  if (v23) {
    std::__shared_weak_count::__release_weak(v23);
  }
  size_t v24 = *(const void **)(v20 + 32);
  if (v24) {
    _Block_release(v24);
  }
  if (*(char *)(v20 + 31) < 0)
  {
    operator delete(*v21);
    __clang_call_terminate(a1);
  }
  __clang_call_terminate(a1);
}

void __copy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12TraceManagerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  std::string::size_type v5 = *(void **)(a2 + 56);
  if (v5) {
    std::string::size_type v5 = _Block_copy(v5);
  }
  *(void *)(a1 + 56) = v5;
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 64), *(const std::string::value_type **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v6;
  }
  xpc_object_t v7 = (std::string *)(a1 + 88);
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 88), *(void *)(a2 + 96));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
}

void sub_1C5A46390(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  uint64_t v4 = *(const void **)(v1 + 56);
  if (v4) {
    _Block_release(v4);
  }
  std::string::size_type v5 = *(std::__shared_weak_count **)(v1 + 48);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12TraceManagerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 87) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    operator delete(*(void **)(a1 + 64));
    uint64_t v2 = *(const void **)(a1 + 56);
    if (!v2) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
LABEL_7:
  }
    _Block_release(v2);
LABEL_8:
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void TraceManager::start(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  long long v8 = operator new(0x10uLL);
  *long long v8 = v3;
  v8[1] = a1;
  xpc_object_t v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v10 = operator new(0x18uLL);
  *long long v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<TraceManager>::execute_wrapped<TraceManager::start(dispatch::group_session)::$_0>(TraceManager::start(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TraceManager::start(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TraceManager::start(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void TraceManager::finishInitialization_sync(std::__shared_weak_count **this)
{
  uint64_t v2 = (const char *)((uint64_t (*)(std::__shared_weak_count **))(*this)->__shared_weak_owners_)(this);
  size_t v3 = strlen(v2);
  if (v3 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v4 = (void *)v3;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v5 = (void **)operator new(v6 + 1);
    __dst[1] = v4;
    unint64_t v60 = v7 | 0x8000000000000000;
    __dst[0] = v5;
  }
  else
  {
    HIBYTE(v60) = v3;
    uint64_t v5 = __dst;
    if (!v3) {
      goto LABEL_9;
    }
  }
  memmove(v5, v2, (size_t)v4);
LABEL_9:
  *((unsigned char *)v4 + (void)v5) = 0;
  uint64_t v58 = 0;
  AppleBasebandManager::create();
  long long v8 = v61;
  long long v61 = 0uLL;
  xpc_object_t v9 = this[20];
  *(_OWORD *)(this + 19) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)&v61 + 1);
  if (!*((void *)&v61 + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v61 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    xpc_object_t v11 = v58;
    if (!v58) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  xpc_object_t v11 = v58;
  if (v58) {
LABEL_15:
  }
    CFRelease(v11);
LABEL_16:
  if (SHIBYTE(v60) < 0) {
    operator delete(__dst[0]);
  }
  std::string::size_type v12 = this[16];
  if (!v12 || (uint64_t v13 = this[15], (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v15 = v14;
  atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v15);
  }
  xpc_object_t v16 = (const void *)*MEMORY[0x1E4F4CEF8];
  size_t v17 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
  if (v17 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v18 = (void *)v17;
  if (v17 >= 0x17)
  {
    uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v20 = v17 | 7;
    }
    uint64_t v21 = v20 + 1;
    xpc_object_t v19 = (void **)operator new(v20 + 1);
    v56[1] = v18;
    unint64_t v57 = v21 | 0x8000000000000000;
    v56[0] = v19;
    goto LABEL_29;
  }
  HIBYTE(v57) = v17;
  xpc_object_t v19 = v56;
  if (v17) {
LABEL_29:
  }
    memmove(v19, v16, (size_t)v18);
  *((unsigned char *)v18 + (void)v19) = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_82;
  aBlock[4] = this;
  void aBlock[5] = v13;
  xpc_object_t v53 = v15;
  atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v22 = _Block_copy(aBlock);
  size_t v23 = this[17];
  if (v23) {
    dispatch_retain((dispatch_object_t)this[17]);
  }
  size_t v54 = v22;
  dispatch_object_t v55 = v23;
  AppleBasebandManager::setEventHandler();
  if (v55) {
    dispatch_release(v55);
  }
  if (v54) {
    _Block_release(v54);
  }
  if (SHIBYTE(v57) < 0) {
    operator delete(v56[0]);
  }
  size_t v24 = (const void *)*MEMORY[0x1E4F4CB10];
  size_t v25 = strlen((const char *)*MEMORY[0x1E4F4CB10]);
  if (v25 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v26 = (void *)v25;
  if (v25 >= 0x17)
  {
    uint64_t v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17) {
      uint64_t v28 = v25 | 7;
    }
    uint64_t v29 = v28 + 1;
    uint64_t v27 = operator new(v28 + 1);
    __p[1] = v26;
    unint64_t v51 = v29 | 0x8000000000000000;
    __p[0] = v27;
    goto LABEL_45;
  }
  HIBYTE(v51) = v25;
  uint64_t v27 = __p;
  if (v25) {
LABEL_45:
  }
    memmove(v27, v24, (size_t)v26);
  *((unsigned char *)v26 + (void)v27) = 0;
  v46[0] = MEMORY[0x1E4F143A8];
  v46[1] = 1174405120;
  v46[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_83;
  v46[3] = &__block_descriptor_tmp_88_0;
  v46[4] = this;
  v46[5] = v13;
  uint64_t v47 = v15;
  atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  char v30 = _Block_copy(v46);
  xpc_object_t v31 = this[17];
  if (v31) {
    dispatch_retain((dispatch_object_t)this[17]);
  }
  uint64_t v48 = v30;
  dispatch_object_t object = v31;
  AppleBasebandManager::setEventHandler();
  if (object) {
    dispatch_release(object);
  }
  if (v48) {
    _Block_release(v48);
  }
  if (SHIBYTE(v51) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v32 = (const void *)*MEMORY[0x1E4F4CB18];
  size_t v33 = strlen((const char *)*MEMORY[0x1E4F4CB18]);
  if (v33 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v34 = (void *)v33;
  if (v33 >= 0x17)
  {
    uint64_t v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17) {
      uint64_t v36 = v33 | 7;
    }
    uint64_t v37 = v36 + 1;
    uint64_t v35 = operator new(v36 + 1);
    v44[1] = v34;
    unint64_t v45 = v37 | 0x8000000000000000;
    v44[0] = v35;
    goto LABEL_61;
  }
  HIBYTE(v45) = v33;
  uint64_t v35 = v44;
  if (v33) {
LABEL_61:
  }
    memmove(v35, v32, (size_t)v34);
  *((unsigned char *)v34 + (void)v35) = 0;
  v40[0] = MEMORY[0x1E4F143A8];
  v40[1] = 1174405120;
  v40[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_89;
  v40[3] = &__block_descriptor_tmp_93;
  v40[4] = this;
  v40[5] = v13;
  uint64_t v41 = v15;
  atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  int v38 = _Block_copy(v40);
  long long v39 = this[17];
  if (v39) {
    dispatch_retain((dispatch_object_t)this[17]);
  }
  uint64_t v42 = v38;
  dispatch_object_t v43 = v39;
  AppleBasebandManager::setEventHandler();
  if (v43) {
    dispatch_release(v43);
  }
  if (v42) {
    _Block_release(v42);
  }
  if (SHIBYTE(v45) < 0) {
    operator delete(v44[0]);
  }
  AppleBasebandManager::eventsOn((AppleBasebandManager *)this[19]);
  if (v41) {
    std::__shared_weak_count::__release_weak(v41);
  }
  if (v47) {
    std::__shared_weak_count::__release_weak(v47);
  }
  if (v53) {
    std::__shared_weak_count::__release_weak(v53);
  }
  std::__shared_weak_count::__release_weak(v15);
}

void sub_1C5A46B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (a30) {
    std::__shared_weak_count::__release_weak(a30);
  }
  if (a45) {
    std::__shared_weak_count::__release_weak(a45);
  }
  std::__shared_weak_count::__release_weak(v45);
  _Unwind_Resume(a1);
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v287 = *MEMORY[0x1E4F143B8];
  size_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = a1[4];
  uint64_t v6 = std::__shared_weak_count::lock(v3);
  v284 = v6;
  if (!v6) {
    return;
  }
  uint64_t v7 = v6;
  uint64_t v8 = a1[5];
  uint64_t v283 = v8;
  if (!v8)
  {
LABEL_447:
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    return;
  }
  CFDictionaryRef v282 = (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL;
  abm::client::Event::getData((uint64_t *)&v282, *(abm::client::Event **)a2);
  CFDictionaryRef v9 = v282;
  if (v282) {
    long long v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    long long v10 = 0;
  }
  if (v10)
  {
    v281[0] = 0xAAAAAAAAAAAAAAAALL;
    v281[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v281, v282);
    memset(v280, 170, sizeof(v280));
    xpc_object_t v11 = (const char *)*MEMORY[0x1E4F4C688];
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&buf, (const char *)*MEMORY[0x1E4F4C688]);
    ctu::cf::map_adapter::getString();
    MEMORY[0x1C8794290](&buf);
    std::string::size_type v12 = (void **)(v5 + 192);
    if ((unsigned char *)(v5 + 192) != v280)
    {
      if (*(char *)(v5 + 215) < 0)
      {
        if (v280[23] >= 0) {
          uint64_t v13 = v280;
        }
        else {
          uint64_t v13 = *(unsigned char **)v280;
        }
        if (v280[23] >= 0) {
          size_t v14 = v280[23];
        }
        else {
          size_t v14 = *(void *)&v280[8];
        }
        std::string::__assign_no_alias<false>(v12, v13, v14);
      }
      else if ((v280[23] & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v12, *(void **)v280, *(size_t *)&v280[8]);
      }
      else
      {
        *(_OWORD *)std::string::size_type v12 = *(_OWORD *)v280;
        *(void *)(v5 + 208) = *(void *)&v280[16];
      }
    }
    uint64_t v15 = *(NSObject **)(v5 + 88);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      xpc_object_t v16 = v280;
      if (v280[23] < 0) {
        xpc_object_t v16 = *(unsigned char **)v280;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
      _os_log_impl(&dword_1C59C6000, v15, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&buf, 0xCu);
    }
    int v17 = v280[23];
    if (v280[23] >= 0) {
      size_t v18 = v280[23];
    }
    else {
      size_t v18 = *(void *)&v280[8];
    }
    if (v18 != strlen((const char *)*MEMORY[0x1E4F4CCD8])
      || (v280[23] >= 0 ? (xpc_object_t v19 = v280) : (xpc_object_t v19 = *(unsigned char **)v280), memcmp(v19, (const void *)*MEMORY[0x1E4F4CCD8], v18)))
    {
      uint64_t v20 = (const char *)*MEMORY[0x1E4F4C958];
      if (v18 == strlen((const char *)*MEMORY[0x1E4F4C958]))
      {
        uint64_t v21 = v17 >= 0 ? v280 : *(unsigned char **)v280;
        if (!memcmp(v21, v20, v18))
        {
          memset(&buf, 170, 16);
          v243[0] = MEMORY[0x1E4F143A8];
          v243[1] = 1174405120;
          v243[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_59;
          v243[3] = &__block_descriptor_tmp_62_0;
          v243[4] = v5;
          v243[5] = v8;
          v244 = v7;
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          long long v39 = *(std::__shared_weak_count **)(a2 + 8);
          v245 = *(abm::client::Event **)a2;
          v246 = v39;
          if (v39) {
            atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          size_t v40 = _Block_copy(v243);
          std::string::size_type v41 = *(void *)(v5 + 136);
          if (v41) {
            dispatch_retain(*(dispatch_object_t *)(v5 + 136));
          }
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
          buf.__r_.__value_.__l.__size_ = v41;
          xpc_object_t v42 = xpc_dictionary_create(0, 0, 0);
          if (v42 || (xpc_object_t v42 = xpc_null_create()) != 0)
          {
            if (MEMORY[0x1C8795EB0](v42) == MEMORY[0x1E4F14590])
            {
              xpc_retain(v42);
              xpc_object_t v43 = v42;
            }
            else
            {
              xpc_object_t v43 = xpc_null_create();
            }
          }
          else
          {
            xpc_object_t v43 = xpc_null_create();
            xpc_object_t v42 = 0;
          }
          xpc_release(v42);
          xpc_object_t v76 = xpc_string_create(v20);
          if (!v76) {
            xpc_object_t v76 = xpc_null_create();
          }
          xpc_dictionary_set_value(v43, v11, v76);
          xpc_object_t v77 = xpc_null_create();
          xpc_release(v76);
          xpc_release(v77);
          xpc_object_t v242 = v43;
          if (v43) {
            xpc_retain(v43);
          }
          else {
            xpc_object_t v242 = xpc_null_create();
          }
          v241 = 0;
          if (buf.__r_.__value_.__r.__words[0]) {
            uint64_t v78 = _Block_copy(buf.__r_.__value_.__l.__data_);
          }
          else {
            uint64_t v78 = 0;
          }
          uint64_t v79 = *MEMORY[0x1E4F47188];
          std::string::size_type size = buf.__r_.__value_.__l.__size_;
          v240[0] = v78;
          v240[1] = (void *)buf.__r_.__value_.__l.__size_;
          if (buf.__r_.__value_.__l.__size_) {
            dispatch_retain((dispatch_object_t)buf.__r_.__value_.__l.__size_);
          }
          TraceManager::runOnHelper_sync((void *)v5, (const char *)9, v79, 0x1388u, 0, &v242, &v241, v240);
          if (size) {
            dispatch_release(size);
          }
          if (v78) {
            _Block_release(v78);
          }
          xpc_release(v242);
          xpc_object_t v242 = 0;
          xpc_release(v43);
          if (buf.__r_.__value_.__l.__size_) {
            dispatch_release((dispatch_object_t)buf.__r_.__value_.__l.__size_);
          }
          if (buf.__r_.__value_.__r.__words[0]) {
            _Block_release(buf.__r_.__value_.__l.__data_);
          }
          size_t v81 = v246;
          if (v246 && !atomic_fetch_add(&v246->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
            std::__shared_weak_count::__release_weak(v81);
          }
          __darwin_ino64_t v82 = v244;
          if (!v244) {
            goto LABEL_441;
          }
LABEL_252:
          if (!atomic_fetch_add(&v82->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
          goto LABEL_441;
        }
      }
      xpc_object_t v22 = (const void *)*MEMORY[0x1E4F4CAE8];
      if (v18 != strlen((const char *)*MEMORY[0x1E4F4CAE8])
        || (v17 >= 0 ? (size_t v23 = v280) : (size_t v23 = *(unsigned char **)v280), memcmp(v23, v22, v18)))
      {
        if (v18 == strlen((const char *)*MEMORY[0x1E4F4C6E0]))
        {
          size_t v24 = v17 >= 0 ? v280 : *(unsigned char **)v280;
          if (!memcmp(v24, (const void *)*MEMORY[0x1E4F4C6E0], v18))
          {
            v279[0] = (void *)0xAAAAAAAAAAAAAAAALL;
            v279[1] = (void *)0xAAAAAAAAAAAAAAAALL;
            aBlock[0] = MEMORY[0x1E4F143A8];
            aBlock[1] = 1174405120;
            aBlock[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_71;
            aBlock[3] = &__block_descriptor_tmp_74_0;
            aBlock[4] = v5;
            v226[0] = v8;
            v226[1] = v7;
            atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v25 = *(void *)(a2 + 8);
            v227[0] = *(void *)a2;
            v227[1] = v25;
            if (v25) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
            }
            int v26 = _Block_copy(aBlock);
            uint64_t v27 = *(void **)(v5 + 136);
            if (v27) {
              dispatch_retain(*(dispatch_object_t *)(v5 + 136));
            }
            v279[0] = v26;
            v279[1] = v27;
            LODWORD(v278.__r_.__value_.__l.__data_) = -1431655766;
            uint64_t v28 = (char *)std::string::basic_string[abi:ne180100]<0>(&buf, (char *)*MEMORY[0x1E4F4C198]);
            prop::bbtrace::get<diag::config::Mode>(v28, (int *)&v278);
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf.__r_.__value_.__l.__data_);
            }
            LODWORD(__dst[0]) = -1431655766;
            uint64_t v29 = (char *)std::string::basic_string[abi:ne180100]<0>(&buf, (char *)*MEMORY[0x1E4F4C428]);
            prop::bbtrace::get<abm::traceOwnership>(v29, (int *)__dst);
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf.__r_.__value_.__l.__data_);
            }
            if (LODWORD(v278.__r_.__value_.__l.__data_) == 4 && LODWORD(__dst[0]) == 1)
            {
              char v30 = *(NSObject **)(v5 + 88);
              if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
              {
                LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                _os_log_impl(&dword_1C59C6000, v30, OS_LOG_TYPE_DEFAULT, "#N Baseband is dead while Cellular Logging is running. Cellular Logging will be stopped.", (uint8_t *)&buf, 2u);
              }
              v223 = 0;
              xpc_object_t object = xpc_null_create();
              v220[0] = MEMORY[0x1E4F143A8];
              v220[1] = 1174405120;
              v220[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_75;
              v220[3] = &__block_descriptor_tmp_78;
              v220[4] = v5;
              dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::callback(v221, (uint64_t)v279);
              xpc_object_t v31 = _Block_copy(v220);
              uint64_t v32 = *MEMORY[0x1E4F47208];
              size_t v33 = *(void **)(v5 + 136);
              if (v33) {
                dispatch_retain(*(dispatch_object_t *)(v5 + 136));
              }
              v222[0] = v31;
              v222[1] = v33;
              TraceManager::runOnHelper_sync((void *)v5, (const char *)0xA, v32, 0x1388u, 1, &object, &v223, v222);
              dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)v222);
              xpc_release(object);
              xpc_object_t object = 0;
              dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)v221);
            }
            else
            {
              xpc_object_t v62 = xpc_null_create();
              uint64_t v63 = *MEMORY[0x1E4F47128];
              char v218 = 0;
              xpc_object_t v219 = v62;
              dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::callback(v217, (uint64_t)v279);
              TraceManager::runOnHelper_sync((void *)v5, (const char *)9, v63, 0x7D0u, 0, &v219, &v218, v217);
              dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)v217);
              xpc_release(v219);
              xpc_object_t v219 = 0;
            }
            dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)v279);
            std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)v227);
            std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)v226);
          }
        }
LABEL_441:
        if ((v280[23] & 0x80000000) != 0) {
          operator delete(*(void **)v280);
        }
        MEMORY[0x1C87942E0](v281);
        CFDictionaryRef v9 = v282;
        goto LABEL_444;
      }
      TraceManager::updateBasebandFWInfo((TraceManager *)v5);
      v278.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
      v278.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
      v236[0] = MEMORY[0x1E4F143A8];
      v236[1] = 1174405120;
      v236[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_63;
      v236[3] = &__block_descriptor_tmp_66_1;
      v236[4] = v5;
      v236[5] = v8;
      v237 = v7;
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v44 = *(std::__shared_weak_count **)(a2 + 8);
      v238 = *(abm::client::Event **)a2;
      v239 = v44;
      if (v44) {
        atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v45 = _Block_copy(v236);
      std::string::size_type v46 = *(void *)(v5 + 136);
      if (v46) {
        dispatch_retain(*(dispatch_object_t *)(v5 + 136));
      }
      v278.__r_.__value_.__r.__words[0] = (std::string::size_type)v45;
      v278.__r_.__value_.__l.__size_ = v46;
      __dst[0] = (void *)0xAAAAAAAAAAAAAAAALL;
      xpc_object_t v47 = xpc_dictionary_create(0, 0, 0);
      xpc_object_t v48 = v47;
      if (v47)
      {
        __dst[0] = v47;
      }
      else
      {
        xpc_object_t v48 = xpc_null_create();
        __dst[0] = v48;
        if (!v48)
        {
          xpc_object_t v64 = xpc_null_create();
          xpc_object_t v48 = 0;
          goto LABEL_200;
        }
      }
      if (MEMORY[0x1C8795EB0](v48) == MEMORY[0x1E4F14590])
      {
        xpc_retain(v48);
        goto LABEL_201;
      }
      xpc_object_t v64 = xpc_null_create();
LABEL_200:
      __dst[0] = v64;
LABEL_201:
      xpc_release(v48);
      xpc_object_t v100 = xpc_string_create((const char *)v22);
      if (!v100) {
        xpc_object_t v100 = xpc_null_create();
      }
      xpc_dictionary_set_value(__dst[0], v11, v100);
      xpc_object_t v101 = xpc_null_create();
      xpc_release(v100);
      xpc_release(v101);
      xpc_object_t v102 = (const void *)*MEMORY[0x1E4F4C198];
      size_t v103 = strlen((const char *)*MEMORY[0x1E4F4C198]);
      if (v103 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      xpc_object_t v104 = (void *)v103;
      if (v103 >= 0x17)
      {
        uint64_t v106 = (v103 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v103 | 7) != 0x17) {
          uint64_t v106 = v103 | 7;
        }
        uint64_t v107 = v106 + 1;
        size_t v105 = (void **)operator new(v106 + 1);
        v279[1] = v104;
        v279[2] = (void *)(v107 | 0x8000000000000000);
        v279[0] = v105;
      }
      else
      {
        HIBYTE(v279[2]) = v103;
        size_t v105 = v279;
        if (!v103)
        {
LABEL_211:
          *((unsigned char *)v104 + (void)v105) = 0;
          memset(&buf, 0, sizeof(buf));
          int v108 = -1431655766;
          int v109 = -1431655766;
          if (prop::bbtrace::get((char *)v279, (uint64_t)&buf))
          {
            LODWORD(__p) = -1431655766;
            if (util::convert<int>(&buf, &__p, 0)) {
              int v109 = (int)__p;
            }
            else {
              int v109 = -1431655766;
            }
          }
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v279[2]) < 0) {
            operator delete(v279[0]);
          }
          std::string v110 = (const void *)*MEMORY[0x1E4F4C428];
          size_t v111 = strlen((const char *)*MEMORY[0x1E4F4C428]);
          if (v111 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          uint64_t v112 = (void *)v111;
          if (v111 >= 0x17)
          {
            uint64_t v114 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v111 | 7) != 0x17) {
              uint64_t v114 = v111 | 7;
            }
            uint64_t v115 = v114 + 1;
            CFAllocatorRef v113 = (void **)operator new(v114 + 1);
            v279[1] = v112;
            v279[2] = (void *)(v115 | 0x8000000000000000);
            v279[0] = v113;
          }
          else
          {
            HIBYTE(v279[2]) = v111;
            CFAllocatorRef v113 = v279;
            if (!v111)
            {
LABEL_227:
              *((unsigned char *)v112 + (void)v113) = 0;
              memset(&buf, 0, sizeof(buf));
              if (prop::bbtrace::get((char *)v279, (uint64_t)&buf))
              {
                LODWORD(__p) = -1431655766;
                if (util::convert<int>(&buf, &__p, 0)) {
                  int v108 = (int)__p;
                }
                else {
                  int v108 = -1431655766;
                }
              }
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(buf.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v279[2]) & 0x80000000) == 0)
                {
LABEL_233:
                  CFAllocatorRef v116 = (uint64_t *)MEMORY[0x1E4F47138];
                  if (v109 != 4) {
                    goto LABEL_243;
                  }
LABEL_237:
                  if (v108 == 1)
                  {
                    CFAllocatorRef v117 = *(NSObject **)(v5 + 88);
                    if (os_log_type_enabled(v117, OS_LOG_TYPE_DEFAULT))
                    {
                      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                      _os_log_impl(&dword_1C59C6000, v117, OS_LOG_TYPE_DEFAULT, "#N Resume notification will be sent to cellular logging after all traces are started.", (uint8_t *)&buf, 2u);
                    }
                    v234 = 0;
                    xpc_object_t v235 = xpc_null_create();
                    v231[0] = MEMORY[0x1E4F143A8];
                    v231[1] = 1174405120;
                    v231[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_67;
                    v231[3] = &__block_descriptor_tmp_70;
                    v231[4] = v5;
                    dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::callback(v232, (uint64_t)&v278);
                    CFAllocatorRef v118 = _Block_copy(v231);
                    uint64_t v119 = *v116;
                    CFAllocatorRef v120 = *(void **)(v5 + 136);
                    if (v120) {
                      dispatch_retain(*(dispatch_object_t *)(v5 + 136));
                    }
                    v233[0] = v118;
                    v233[1] = v120;
                    TraceManager::runOnHelper_sync((void *)v5, (const char *)9, v119, 0x1388u, 0, &v235, &v234, v233);
                    dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)v233);
                    xpc_release(v235);
                    xpc_object_t v235 = 0;
                    dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)v232);
LABEL_244:
                    TraceManager::setupDumpLogsIndication_sync((NSObject **)v5);
                    xpc_release(__dst[0]);
                    if (v278.__r_.__value_.__l.__size_) {
                      dispatch_release((dispatch_object_t)v278.__r_.__value_.__l.__size_);
                    }
                    if (v278.__r_.__value_.__r.__words[0]) {
                      _Block_release(v278.__r_.__value_.__l.__data_);
                    }
                    CFAllocatorRef v122 = v239;
                    if (v239 && !atomic_fetch_add(&v239->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                      std::__shared_weak_count::__release_weak(v122);
                    }
                    __darwin_ino64_t v82 = v237;
                    if (!v237) {
                      goto LABEL_441;
                    }
                    goto LABEL_252;
                  }
LABEL_243:
                  uint64_t v121 = *v116;
                  xpc::dict::dict(&v230, __dst);
                  uint64_t v229 = 0;
                  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::callback(v228, (uint64_t)&v278);
                  TraceManager::runOnHelper_sync((void *)v5, (const char *)9, v121, 0x1388u, 0, &v230, &v229, v228);
                  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)v228);
                  xpc_release(v230);
                  xpc_object_t v230 = 0;
                  goto LABEL_244;
                }
              }
              else if ((SHIBYTE(v279[2]) & 0x80000000) == 0)
              {
                goto LABEL_233;
              }
              operator delete(v279[0]);
              CFAllocatorRef v116 = (uint64_t *)MEMORY[0x1E4F47138];
              if (v109 != 4) {
                goto LABEL_243;
              }
              goto LABEL_237;
            }
          }
          memmove(v113, v110, (size_t)v112);
          goto LABEL_227;
        }
      }
      memmove(v105, v102, (size_t)v104);
      goto LABEL_211;
    }
    memset(v279, 170, sizeof(v279));
    uint64_t v34 = (const char *)*MEMORY[0x1E4F4C690];
    memset(&buf, 0, sizeof(buf));
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v278, v34);
    ctu::cf::map_adapter::getString();
    MEMORY[0x1C8794290](&v278);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    memset(&v278, 170, sizeof(v278));
    uint64_t v35 = (const std::string::value_type *)*MEMORY[0x1E4F4C1C8];
    size_t v36 = strlen((const char *)*MEMORY[0x1E4F4C1C8]);
    if (v36 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v37 = v36;
    if (v36 >= 0x17)
    {
      uint64_t v49 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v36 | 7) != 0x17) {
        uint64_t v49 = v36 | 7;
      }
      uint64_t v50 = v49 + 1;
      p_std::string buf = (std::string *)operator new(v49 + 1);
      buf.__r_.__value_.__l.__size_ = v37;
      buf.__r_.__value_.__r.__words[2] = v50 | 0x8000000000000000;
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
    }
    else
    {
      *((unsigned char *)&buf.__r_.__value_.__s + 23) = v36;
      p_std::string buf = &buf;
      if (!v36)
      {
LABEL_86:
        unint64_t v51 = (const char *)*MEMORY[0x1E4F4C8F0];
        p_buf->__r_.__value_.__s.__data_[v37] = 0;
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)__dst, v51);
        ctu::cf::map_adapter::getString();
        MEMORY[0x1C8794290](__dst);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        CFAllocatorRef v52 = (const char *)*MEMORY[0x1E4F4C180];
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&buf, (const char *)*MEMORY[0x1E4F4C180]);
        int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v281, (const __CFString *)buf.__r_.__value_.__l.__data_);
        MEMORY[0x1C8794290](&buf);
        std::string::size_type v53 = HIBYTE(v278.__r_.__value_.__r.__words[2]);
        if ((v278.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v53 = v278.__r_.__value_.__l.__size_;
        }
        if (!v53) {
          std::string::__assign_external(&v278, v35);
        }
        size_t v54 = (const void *)*MEMORY[0x1E4F4C6E8];
        int v55 = SHIBYTE(v279[2]);
        if (SHIBYTE(v279[2]) >= 0) {
          size_t v56 = HIBYTE(v279[2]);
        }
        else {
          size_t v56 = (size_t)v279[1];
        }
        if (v56 != strlen((const char *)*MEMORY[0x1E4F4C6E8])
          || (SHIBYTE(v279[2]) >= 0 ? (unint64_t v57 = v279) : (unint64_t v57 = (void **)v279[0]), memcmp(v57, v54, v56)))
        {
          uint64_t v58 = (const void *)*MEMORY[0x1E4F4C6F0];
          if (v56 != strlen((const char *)*MEMORY[0x1E4F4C6F0])
            || (v55 >= 0 ? (uint64_t v59 = v279) : (uint64_t v59 = (void **)v279[0]), memcmp(v59, v58, v56)))
          {
            unint64_t v60 = *(NSObject **)(v5 + 88);
            if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
            {
              long long v61 = (void **)v279[0];
              if (v55 >= 0) {
                long long v61 = v279;
              }
              LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v61;
              _os_log_impl(&dword_1C59C6000, v60, OS_LOG_TYPE_DEFAULT, "#I Invalid reset type [%s]", (uint8_t *)&buf, 0xCu);
            }
LABEL_437:
            if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v278.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v279[2]) < 0) {
              operator delete(v279[0]);
            }
            goto LABEL_441;
          }
          dispatch_object_t v272 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
          std::string __p = (void *)0xAAAAAAAAAAAAAAAALL;
          v258[0] = MEMORY[0x1E4F143A8];
          v258[1] = 1174405120;
          v258[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_55;
          v258[3] = &__block_descriptor_tmp_56_2;
          v258[4] = v5;
          v258[5] = v283;
          v259 = v284;
          if (v284) {
            atomic_fetch_add_explicit(&v284->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v69 = *(std::__shared_weak_count **)(a2 + 8);
          v260 = *(abm::client::Event **)a2;
          v261 = v69;
          if (v69) {
            atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          size_t v70 = _Block_copy(v258);
          char v71 = *(NSObject **)(v5 + 136);
          if (v71) {
            dispatch_retain(*(dispatch_object_t *)(v5 + 136));
          }
          std::string __p = v70;
          dispatch_object_t v272 = v71;
          CFAllocatorRef v72 = (const void *)*MEMORY[0x1E4F4C198];
          size_t v73 = strlen((const char *)*MEMORY[0x1E4F4C198]);
          if (v73 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          uint64_t v74 = (void *)v73;
          if (v73 >= 0x17)
          {
            uint64_t v123 = (v73 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v73 | 7) != 0x17) {
              uint64_t v123 = v73 | 7;
            }
            uint64_t v124 = v123 + 1;
            size_t v75 = (void **)operator new(v123 + 1);
            xpc_object_t __dst[2] = (void *)(v124 | 0x8000000000000000);
            __dst[0] = v75;
            __dst[1] = v74;
          }
          else
          {
            HIBYTE(__dst[2]) = v73;
            size_t v75 = __dst;
            if (!v73)
            {
LABEL_258:
              *((unsigned char *)v74 + (void)v75) = 0;
              memset(&buf, 0, sizeof(buf));
              int v125 = -1431655766;
              if (prop::bbtrace::get((char *)__dst, (uint64_t)&buf))
              {
                LODWORD(v285) = -1431655766;
                if (util::convert<int>(&buf, &v285, 0)) {
                  int v125 = v285;
                }
                else {
                  int v125 = -1431655766;
                }
              }
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(buf.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(__dst[2]) < 0) {
                operator delete(__dst[0]);
              }
              xpc_object_t v126 = (const void *)*MEMORY[0x1E4F4C428];
              size_t v127 = strlen((const char *)*MEMORY[0x1E4F4C428]);
              if (v127 > 0x7FFFFFFFFFFFFFF7) {
                std::string::__throw_length_error[abi:ne180100]();
              }
              int v128 = (void *)v127;
              if (v127 >= 0x17)
              {
                uint64_t v130 = (v127 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v127 | 7) != 0x17) {
                  uint64_t v130 = v127 | 7;
                }
                uint64_t v131 = v130 + 1;
                CFAllocatorRef v129 = (void **)operator new(v130 + 1);
                xpc_object_t __dst[2] = (void *)(v131 | 0x8000000000000000);
                __dst[0] = v129;
                __dst[1] = v128;
              }
              else
              {
                HIBYTE(__dst[2]) = v127;
                CFAllocatorRef v129 = __dst;
                if (!v127)
                {
LABEL_274:
                  *((unsigned char *)v128 + (void)v129) = 0;
                  memset(&buf, 0, sizeof(buf));
                  int v132 = -1431655766;
                  if (prop::bbtrace::get((char *)__dst, (uint64_t)&buf))
                  {
                    LODWORD(v285) = -1431655766;
                    if (util::convert<int>(&buf, &v285, 0)) {
                      int v132 = v285;
                    }
                    else {
                      int v132 = -1431655766;
                    }
                  }
                  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(buf.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(__dst[2]) < 0) {
                    operator delete(__dst[0]);
                  }
                  CFAllocatorRef v133 = (const void *)*MEMORY[0x1E4F4F9B0];
                  size_t v134 = strlen((const char *)*MEMORY[0x1E4F4F9B0]);
                  if (v134 > 0x7FFFFFFFFFFFFFF7) {
                    std::string::__throw_length_error[abi:ne180100]();
                  }
                  xpc_object_t v135 = (void *)v134;
                  if (v134 >= 0x17)
                  {
                    uint64_t v137 = (v134 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v134 | 7) != 0x17) {
                      uint64_t v137 = v134 | 7;
                    }
                    uint64_t v138 = v137 + 1;
                    int v136 = (void **)operator new(v137 + 1);
                    xpc_object_t __dst[2] = (void *)(v138 | 0x8000000000000000);
                    __dst[0] = v136;
                    __dst[1] = v135;
                  }
                  else
                  {
                    HIBYTE(__dst[2]) = v134;
                    int v136 = __dst;
                    if (!v134)
                    {
LABEL_290:
                      *((unsigned char *)v135 + (void)v136) = 0;
                      memset(&buf, 0, sizeof(buf));
                      if (prop::bbtrace::get((char *)__dst, (uint64_t)&buf))
                      {
                        LODWORD(v285) = -1431655766;
                        if (util::convert<int>(&buf, &v285, 0)) {
                          int v139 = v285;
                        }
                        else {
                          int v139 = 0;
                        }
                      }
                      else
                      {
                        int v139 = 0;
                      }
                      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                      {
                        operator delete(buf.__r_.__value_.__l.__data_);
                        if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
                        {
LABEL_297:
                          if (v125 != 4) {
                            goto LABEL_333;
                          }
LABEL_327:
                          if (v132 == 1)
                          {
                            v153 = *(NSObject **)(v5 + 88);
                            if (os_log_type_enabled(v153, OS_LOG_TYPE_DEFAULT))
                            {
                              LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                              _os_log_impl(&dword_1C59C6000, v153, OS_LOG_TYPE_DEFAULT, "#N Soft reset detected while Cellular Logging is running. Cellular Logging will be paused.", (uint8_t *)&buf, 2u);
                            }
                            xpc_object_t v257 = xpc_null_create();
                            v256 = 0;
                            v253[0] = MEMORY[0x1E4F143A8];
                            v253[1] = 1174405120;
                            v253[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_57;
                            v253[3] = &__block_descriptor_tmp_58_0;
                            v253[4] = v5;
                            dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::callback(v254, (uint64_t)&__p);
                            v154 = _Block_copy(v253);
                            uint64_t v155 = *MEMORY[0x1E4F47228];
                            uint64_t v156 = *(void **)(v5 + 136);
                            if (v156) {
                              dispatch_retain(*(dispatch_object_t *)(v5 + 136));
                            }
                            v255[0] = v154;
                            v255[1] = v156;
                            TraceManager::runOnHelper_sync((void *)v5, (const char *)0xA, v155, 0x1388u, 1, &v257, &v256, v255);
                            dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)v255);
                            xpc_release(v257);
                            xpc_object_t v257 = 0;
                            dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)v254);
LABEL_337:
                            size_t v159 = strlen((const char *)v58);
                            if (v159 > 0x7FFFFFFFFFFFFFF7) {
                              std::string::__throw_length_error[abi:ne180100]();
                            }
                            CFAllocatorRef v160 = (void *)v159;
                            if (v159 >= 0x17)
                            {
                              uint64_t v162 = (v159 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v159 | 7) != 0x17) {
                                uint64_t v162 = v159 | 7;
                              }
                              uint64_t v163 = v162 + 1;
                              int v161 = operator new(v162 + 1);
                              unint64_t v249 = v163 | 0x8000000000000000;
                              v248[0] = v161;
                              v248[1] = v160;
                            }
                            else
                            {
                              HIBYTE(v249) = v159;
                              int v161 = v248;
                              if (!v159)
                              {
LABEL_345:
                                *((unsigned char *)v160 + (void)v161) = 0;
                                if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0) {
                                  std::string::__init_copy_ctor_external(&v247, v278.__r_.__value_.__l.__data_, v278.__r_.__value_.__l.__size_);
                                }
                                else {
                                  std::string v247 = v278;
                                }
                                TraceManager::submitTraceMetric_sync(v5, (const char *)v248, (const char *)&v247);
                                if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
                                {
                                  operator delete(v247.__r_.__value_.__l.__data_);
                                  if ((SHIBYTE(v249) & 0x80000000) == 0)
                                  {
LABEL_350:
                                    v164 = v272;
                                    if (!v272)
                                    {
LABEL_352:
                                      if (__p) {
                                        _Block_release(__p);
                                      }
                                      v165 = v261;
                                      if (v261 && !atomic_fetch_add(&v261->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                      {
                                        ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                                        std::__shared_weak_count::__release_weak(v165);
                                      }
                                      v166 = v259;
                                      if (v259 && !atomic_fetch_add(&v259->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                      {
                                        ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                                        std::__shared_weak_count::__release_weak(v166);
                                      }
                                      goto LABEL_437;
                                    }
LABEL_351:
                                    dispatch_release(v164);
                                    goto LABEL_352;
                                  }
                                }
                                else if ((SHIBYTE(v249) & 0x80000000) == 0)
                                {
                                  goto LABEL_350;
                                }
                                operator delete(v248[0]);
                                v164 = v272;
                                if (!v272) {
                                  goto LABEL_352;
                                }
                                goto LABEL_351;
                              }
                            }
                            memmove(v161, v58, (size_t)v160);
                            goto LABEL_345;
                          }
LABEL_333:
                          if (v132 | v125 || v139 != 3)
                          {
                            xpc_object_t v157 = xpc_null_create();
                            uint64_t v158 = *MEMORY[0x1E4F47128];
                            xpc_object_t v252 = v157;
                            v251 = 0;
                            dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::callback(v250, (uint64_t)&__p);
                            TraceManager::runOnHelper_sync((void *)v5, (const char *)9, v158, 0x1388u, 0, &v252, &v251, v250);
                            dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)v250);
                            xpc_release(v252);
                            xpc_object_t v252 = 0;
                          }
                          else
                          {
                            notify_post("com.apple.cellularlogging.bbreset");
                          }
                          goto LABEL_337;
                        }
                      }
                      else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
                      {
                        goto LABEL_297;
                      }
                      operator delete(__dst[0]);
                      if (v125 != 4) {
                        goto LABEL_333;
                      }
                      goto LABEL_327;
                    }
                  }
                  memmove(v136, v133, (size_t)v135);
                  goto LABEL_290;
                }
              }
              memmove(v129, v126, (size_t)v128);
              goto LABEL_274;
            }
          }
          memmove(v75, v72, (size_t)v74);
          goto LABEL_258;
        }
        unint64_t v65 = (const void *)*MEMORY[0x1E4F4C198];
        size_t v66 = strlen((const char *)*MEMORY[0x1E4F4C198]);
        if (v66 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        uint64_t v67 = (void *)v66;
        if (v66 >= 0x17)
        {
          uint64_t v83 = (v66 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v66 | 7) != 0x17) {
            uint64_t v83 = v66 | 7;
          }
          uint64_t v84 = v83 + 1;
          v68 = (void **)operator new(v83 + 1);
          xpc_object_t __dst[2] = (void *)(v84 | 0x8000000000000000);
          __dst[0] = v68;
          __dst[1] = v67;
        }
        else
        {
          HIBYTE(__dst[2]) = v66;
          v68 = __dst;
          if (!v66)
          {
LABEL_158:
            *((unsigned char *)v67 + (void)v68) = 0;
            memset(&buf, 0, sizeof(buf));
            int v85 = -1431655766;
            if (prop::bbtrace::get((char *)__dst, (uint64_t)&buf))
            {
              LODWORD(__p) = -1431655766;
              if (util::convert<int>(&buf, &__p, 0)) {
                int v85 = (int)__p;
              }
              else {
                int v85 = -1431655766;
              }
            }
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__dst[2]) < 0) {
              operator delete(__dst[0]);
            }
            uint64_t v86 = (const void *)*MEMORY[0x1E4F4C428];
            size_t v87 = strlen((const char *)*MEMORY[0x1E4F4C428]);
            if (v87 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            v88 = (void *)v87;
            v215 = (const char *)v54;
            if (v87 >= 0x17)
            {
              uint64_t v90 = (v87 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v87 | 7) != 0x17) {
                uint64_t v90 = v87 | 7;
              }
              uint64_t v91 = v90 + 1;
              char v89 = (void **)operator new(v90 + 1);
              xpc_object_t __dst[2] = (void *)(v91 | 0x8000000000000000);
              __dst[0] = v89;
              __dst[1] = v88;
            }
            else
            {
              HIBYTE(__dst[2]) = v87;
              char v89 = __dst;
              if (!v87)
              {
LABEL_174:
                *((unsigned char *)v88 + (void)v89) = 0;
                memset(&buf, 0, sizeof(buf));
                int v92 = -1431655766;
                if (prop::bbtrace::get((char *)__dst, (uint64_t)&buf))
                {
                  LODWORD(__p) = -1431655766;
                  if (util::convert<int>(&buf, &__p, 0)) {
                    int v92 = (int)__p;
                  }
                  else {
                    int v92 = -1431655766;
                  }
                }
                if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(buf.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(__dst[2]) < 0) {
                  operator delete(__dst[0]);
                }
                uint64_t v93 = (const void *)*MEMORY[0x1E4F4F9B0];
                size_t v94 = strlen((const char *)*MEMORY[0x1E4F4F9B0]);
                if (v94 > 0x7FFFFFFFFFFFFFF7) {
                  std::string::__throw_length_error[abi:ne180100]();
                }
                size_t v95 = (void *)v94;
                if (v94 >= 0x17)
                {
                  uint64_t v97 = (v94 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v94 | 7) != 0x17) {
                    uint64_t v97 = v94 | 7;
                  }
                  uint64_t v98 = v97 + 1;
                  __darwin_ino64_t v96 = (void **)operator new(v97 + 1);
                  xpc_object_t __dst[2] = (void *)(v98 | 0x8000000000000000);
                  __dst[0] = v96;
                  __dst[1] = v95;
                }
                else
                {
                  HIBYTE(__dst[2]) = v94;
                  __darwin_ino64_t v96 = __dst;
                  if (!v94)
                  {
LABEL_190:
                    *((unsigned char *)v95 + (void)v96) = 0;
                    memset(&buf, 0, sizeof(buf));
                    if (prop::bbtrace::get((char *)__dst, (uint64_t)&buf))
                    {
                      LODWORD(__p) = -1431655766;
                      if (util::convert<int>(&buf, &__p, 0)) {
                        int v99 = (int)__p;
                      }
                      else {
                        int v99 = 0;
                      }
                    }
                    else
                    {
                      int v99 = 0;
                    }
                    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(buf.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
                      {
LABEL_197:
                        if (v85 != 4) {
                          goto LABEL_305;
                        }
LABEL_301:
                        if (v92 == 1)
                        {
                          xpc_object_t v140 = *(NSObject **)(v5 + 88);
                          if (os_log_type_enabled(v140, OS_LOG_TYPE_DEFAULT))
                          {
                            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                            _os_log_impl(&dword_1C59C6000, v140, OS_LOG_TYPE_DEFAULT, "#N Hard reset detected while Cellular Logging is running. Cellular Logging will be paused.", (uint8_t *)&buf, 2u);
                          }
                          xpc_object_t v141 = xpc_null_create();
                          uint64_t v142 = *MEMORY[0x1E4F47228];
                          xpc_object_t v276 = v141;
                          v275 = 0;
                          v274[1] = 0;
                          v274[0] = 0;
                          TraceManager::runOnHelper_sync((void *)v5, (const char *)0xA, v142, 0x1388u, 1, &v276, &v275, v274);
                          xpc_release(v276);
                          xpc_object_t v276 = 0;
LABEL_308:
                          memset(&buf, 170, sizeof(buf));
                          xpc_object_t v143 = (const char *)*MEMORY[0x1E4F4CA38];
                          memset(__dst, 0, sizeof(__dst));
                          ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, v143);
                          ctu::cf::map_adapter::getString();
                          MEMORY[0x1C8794290](&__p);
                          if (SHIBYTE(__dst[2]) < 0) {
                            operator delete(__dst[0]);
                          }
                          memset(__dst, 170, sizeof(__dst));
                          xpc_object_t v144 = (const void *)*MEMORY[0x1E4F4C3A0];
                          size_t v145 = strlen((const char *)*MEMORY[0x1E4F4C3A0]);
                          if (v145 > 0x7FFFFFFFFFFFFFF7) {
                            std::string::__throw_length_error[abi:ne180100]();
                          }
                          xpc_object_t v146 = v145;
                          if (v145 >= 0x17)
                          {
                            uint64_t v148 = (v145 & 0xFFFFFFFFFFFFFFF8) + 8;
                            if ((v145 | 7) != 0x17) {
                              uint64_t v148 = v145 | 7;
                            }
                            uint64_t v149 = v148 + 1;
                            p_p = operator new(v148 + 1);
                            unint64_t v273 = v149 | 0x8000000000000000;
                            std::string __p = p_p;
                            dispatch_object_t v272 = v146;
                          }
                          else
                          {
                            HIBYTE(v273) = v145;
                            p_p = &__p;
                            if (!v145)
                            {
LABEL_318:
                              v150 = (const char *)*MEMORY[0x1E4F4C4C8];
                              *((unsigned char *)&v146->isa + (void)p_p) = 0;
                              ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v285, v150);
                              ctu::cf::map_adapter::getString();
                              MEMORY[0x1C8794290](&v285);
                              if (SHIBYTE(v273) < 0) {
                                operator delete(__p);
                              }
                              xpc_object_t v151 = xpc_dictionary_create(0, 0, 0);
                              if (v151 || (xpc_object_t v151 = xpc_null_create()) != 0)
                              {
                                if (MEMORY[0x1C8795EB0](v151) == MEMORY[0x1E4F14590])
                                {
                                  xpc_retain(v151);
                                  xpc_object_t v152 = v151;
                                }
                                else
                                {
                                  xpc_object_t v152 = xpc_null_create();
                                }
                              }
                              else
                              {
                                xpc_object_t v152 = xpc_null_create();
                                xpc_object_t v151 = 0;
                              }
                              xpc_release(v151);
                              if (SHIBYTE(v279[2]) >= 0) {
                                size_t v167 = (const char *)v279;
                              }
                              else {
                                size_t v167 = (const char *)v279[0];
                              }
                              xpc_object_t v168 = xpc_string_create(v167);
                              if (!v168) {
                                xpc_object_t v168 = xpc_null_create();
                              }
                              xpc_dictionary_set_value(v152, v34, v168);
                              xpc_object_t v169 = xpc_null_create();
                              xpc_release(v168);
                              xpc_release(v169);
                              if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                CFTypeRef v170 = &buf;
                              }
                              else {
                                CFTypeRef v170 = (std::string *)buf.__r_.__value_.__r.__words[0];
                              }
                              xpc_object_t v171 = xpc_string_create((const char *)v170);
                              if (!v171) {
                                xpc_object_t v171 = xpc_null_create();
                              }
                              xpc_dictionary_set_value(v152, v143, v171);
                              xpc_object_t v172 = xpc_null_create();
                              xpc_release(v171);
                              xpc_release(v172);
                              if ((v278.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                CFTypeID v173 = &v278;
                              }
                              else {
                                CFTypeID v173 = (std::string *)v278.__r_.__value_.__r.__words[0];
                              }
                              xpc_object_t v174 = xpc_string_create((const char *)v173);
                              if (!v174) {
                                xpc_object_t v174 = xpc_null_create();
                              }
                              xpc_dictionary_set_value(v152, (const char *)*MEMORY[0x1E4F4CA98], v174);
                              xpc_object_t v175 = xpc_null_create();
                              xpc_release(v174);
                              xpc_release(v175);
                              if (SHIBYTE(__dst[2]) >= 0) {
                                v176 = (const char *)__dst;
                              }
                              else {
                                v176 = (const char *)__dst[0];
                              }
                              xpc_object_t v177 = xpc_string_create(v176);
                              if (!v177) {
                                xpc_object_t v177 = xpc_null_create();
                              }
                              xpc_dictionary_set_value(v152, v150, v177);
                              xpc_object_t v178 = xpc_null_create();
                              xpc_release(v177);
                              xpc_release(v178);
                              xpc_object_t v179 = xpc_string_create((const char *)*MEMORY[0x1E4F4D0D8]);
                              if (!v179) {
                                xpc_object_t v179 = xpc_null_create();
                              }
                              xpc_dictionary_set_value(v152, (const char *)*MEMORY[0x1E4F4C268], v179);
                              xpc_object_t v180 = xpc_null_create();
                              xpc_release(v179);
                              xpc_release(v180);
                              xpc_object_t v181 = xpc_int64_create(Int);
                              if (!v181) {
                                xpc_object_t v181 = xpc_null_create();
                              }
                              xpc_dictionary_set_value(v152, v52, v181);
                              xpc_object_t v182 = xpc_null_create();
                              xpc_release(v181);
                              xpc_release(v182);
                              v183 = (const char *)*MEMORY[0x1E4F4C8E8];
                              ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, (const char *)*MEMORY[0x1E4F4C8E8]);
                              char Bool = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v281, (const __CFString *)__p);
                              MEMORY[0x1C8794290](&__p);
                              xpc_object_t v185 = xpc_BOOL_create(Bool);
                              if (!v185) {
                                xpc_object_t v185 = xpc_null_create();
                              }
                              xpc_dictionary_set_value(v152, v183, v185);
                              xpc_object_t v186 = xpc_null_create();
                              xpc_release(v185);
                              xpc_release(v186);
                              v187 = (const char *)*MEMORY[0x1E4F4C900];
                              ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, (const char *)*MEMORY[0x1E4F4C900]);
                              char v188 = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v281, (const __CFString *)__p);
                              MEMORY[0x1C8794290](&__p);
                              xpc_object_t v189 = xpc_BOOL_create(v188);
                              if (!v189) {
                                xpc_object_t v189 = xpc_null_create();
                              }
                              xpc_dictionary_set_value(v152, v187, v189);
                              xpc_object_t v190 = xpc_null_create();
                              xpc_release(v189);
                              xpc_release(v190);
                              v191 = (const char *)*MEMORY[0x1E4F4C8F8];
                              ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, (const char *)*MEMORY[0x1E4F4C8F8]);
                              char v192 = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v281, (const __CFString *)__p);
                              MEMORY[0x1C8794290](&__p);
                              xpc_object_t v193 = xpc_BOOL_create(v192);
                              if (!v193) {
                                xpc_object_t v193 = xpc_null_create();
                              }
                              xpc_dictionary_set_value(v152, v191, v193);
                              xpc_object_t v194 = xpc_null_create();
                              xpc_release(v193);
                              xpc_release(v194);
                              v195 = *(std::__shared_weak_count **)(v5 + 128);
                              if (!v195
                                || (uint64_t v196 = *(void *)(v5 + 120), (v197 = std::__shared_weak_count::lock(v195)) == 0))
                              {
                                std::__throw_bad_weak_ptr[abi:ne180100]();
                              }
                              v198 = v197;
                              atomic_fetch_add_explicit(&v197->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                              if (!atomic_fetch_add(&v197->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                              {
                                ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
                                std::__shared_weak_count::__release_weak(v198);
                              }
                              xpc_object_t v199 = (const void *)*MEMORY[0x1E4F4C748];
                              size_t v200 = strlen((const char *)*MEMORY[0x1E4F4C748]);
                              if (v200 > 0x7FFFFFFFFFFFFFF7) {
                                std::string::__throw_length_error[abi:ne180100]();
                              }
                              v201 = v200;
                              if (v200 >= 0x17)
                              {
                                uint64_t v203 = (v200 & 0xFFFFFFFFFFFFFFF8) + 8;
                                if ((v200 | 7) != 0x17) {
                                  uint64_t v203 = v200 | 7;
                                }
                                uint64_t v204 = v203 + 1;
                                std::string v202 = operator new(v203 + 1);
                                unint64_t v273 = v204 | 0x8000000000000000;
                                std::string __p = v202;
                                dispatch_object_t v272 = v201;
                              }
                              else
                              {
                                HIBYTE(v273) = v200;
                                std::string v202 = &__p;
                                if (!v200)
                                {
LABEL_406:
                                  *((unsigned char *)&v201->isa + (void)v202) = 0;
                                  xpc_object_t v270 = v152;
                                  if (v152) {
                                    xpc_retain(v152);
                                  }
                                  else {
                                    xpc_object_t v270 = xpc_null_create();
                                  }
                                  v265[0] = MEMORY[0x1E4F143A8];
                                  v265[1] = 1174405120;
                                  v265[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_52;
                                  v265[3] = &__block_descriptor_tmp_54_0;
                                  unint64_t v206 = *(abm::client::Event **)a2;
                                  v205 = *(std::__shared_weak_count **)(a2 + 8);
                                  v265[4] = v5;
                                  v265[5] = v206;
                                  v266 = v205;
                                  if (v205) {
                                    atomic_fetch_add_explicit(&v205->__shared_owners_, 1uLL, memory_order_relaxed);
                                  }
                                  uint64_t v267 = v196;
                                  v268 = v198;
                                  atomic_fetch_add_explicit(&v198->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                                  xpc_object_t v207 = _Block_copy(v265);
                                  v269 = v207;
                                  Service::runCommand(v5, (uint64_t)&__p, &v270, &v269);
                                  if (v207) {
                                    _Block_release(v207);
                                  }
                                  xpc_release(v270);
                                  xpc_object_t v270 = 0;
                                  if (SHIBYTE(v273) < 0) {
                                    operator delete(__p);
                                  }
                                  size_t v208 = strlen(v215);
                                  if (v208 > 0x7FFFFFFFFFFFFFF7) {
                                    std::string::__throw_length_error[abi:ne180100]();
                                  }
                                  int64_t v209 = (void *)v208;
                                  if (v208 >= 0x17)
                                  {
                                    uint64_t v211 = (v208 & 0xFFFFFFFFFFFFFFF8) + 8;
                                    if ((v208 | 7) != 0x17) {
                                      uint64_t v211 = v208 | 7;
                                    }
                                    uint64_t v212 = v211 + 1;
                                    xpc_object_t v210 = operator new(v211 + 1);
                                    unint64_t v264 = v212 | 0x8000000000000000;
                                    v263[0] = v210;
                                    v263[1] = v209;
                                  }
                                  else
                                  {
                                    HIBYTE(v264) = v208;
                                    xpc_object_t v210 = v263;
                                    if (!v208)
                                    {
LABEL_423:
                                      *((unsigned char *)v209 + (void)v210) = 0;
                                      if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0) {
                                        std::string::__init_copy_ctor_external(&v262, v278.__r_.__value_.__l.__data_, v278.__r_.__value_.__l.__size_);
                                      }
                                      else {
                                        std::string v262 = v278;
                                      }
                                      TraceManager::submitTraceMetric_sync(v5, (const char *)v263, (const char *)&v262);
                                      if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
                                      {
                                        operator delete(v262.__r_.__value_.__l.__data_);
                                        if ((SHIBYTE(v264) & 0x80000000) == 0)
                                        {
LABEL_428:
                                          unint64_t v213 = v268;
                                          if (!v268) {
                                            goto LABEL_430;
                                          }
                                          goto LABEL_429;
                                        }
                                      }
                                      else if ((SHIBYTE(v264) & 0x80000000) == 0)
                                      {
                                        goto LABEL_428;
                                      }
                                      operator delete(v263[0]);
                                      unint64_t v213 = v268;
                                      if (!v268)
                                      {
LABEL_430:
                                        unint64_t v214 = v266;
                                        if (v266 && !atomic_fetch_add(&v266->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                        {
                                          ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
                                          std::__shared_weak_count::__release_weak(v214);
                                        }
                                        std::__shared_weak_count::__release_weak(v198);
                                        xpc_release(v152);
                                        if (SHIBYTE(__dst[2]) < 0) {
                                          operator delete(__dst[0]);
                                        }
                                        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                                          operator delete(buf.__r_.__value_.__l.__data_);
                                        }
                                        goto LABEL_437;
                                      }
LABEL_429:
                                      std::__shared_weak_count::__release_weak(v213);
                                      goto LABEL_430;
                                    }
                                  }
                                  memmove(v210, v215, (size_t)v209);
                                  goto LABEL_423;
                                }
                              }
                              memmove(v202, v199, (size_t)v201);
                              goto LABEL_406;
                            }
                          }
                          memmove(p_p, v144, (size_t)v146);
                          goto LABEL_318;
                        }
LABEL_305:
                        if (!(v92 | v85) && v99 == 3) {
                          notify_post("com.apple.cellularlogging.bbreset");
                        }
                        goto LABEL_308;
                      }
                    }
                    else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
                    {
                      goto LABEL_197;
                    }
                    operator delete(__dst[0]);
                    if (v85 != 4) {
                      goto LABEL_305;
                    }
                    goto LABEL_301;
                  }
                }
                memmove(v96, v93, (size_t)v95);
                goto LABEL_190;
              }
            }
            memmove(v89, v86, (size_t)v88);
            goto LABEL_174;
          }
        }
        memmove(v68, v65, (size_t)v67);
        goto LABEL_158;
      }
    }
    memmove(p_buf, v35, v37);
    goto LABEL_86;
  }
LABEL_444:
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v7 = v284;
  if (v284) {
    goto LABEL_447;
  }
}

void sub_1C5A48FE0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1C5A49674()
{
}

void sub_1C5A4967C()
{
}

void prop::bbtrace::get<diag::config::Mode>(char *a1, int *a2)
{
  memset(&__p, 0, sizeof(__p));
  if (prop::bbtrace::get(a1, (uint64_t)&__p))
  {
    int v4 = -1431655766;
    if (util::convert<int>(&__p, &v4, 0)) {
      *a2 = v4;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5A49704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void prop::bbtrace::get<abm::traceOwnership>(char *a1, int *a2)
{
  memset(&__p, 0, sizeof(__p));
  if (prop::bbtrace::get(a1, (uint64_t)&__p))
  {
    int v4 = -1431655766;
    if (util::convert<int>(&__p, &v4, 0)) {
      *a2 = v4;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5A497A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL TraceManager::isCellullarLoggingStreamingMode(uint64_t a1, int a2, int a3, int a4)
{
  return !(a3 | a2) && a4 == 3;
}

uint64_t TraceManager::postBBResetNotification(TraceManager *this)
{
  return notify_post("com.apple.cellularlogging.bbreset");
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_52(void *a1, int a2, xpc_object_t *a3)
{
  int v4 = (std::__shared_weak_count *)a1[8];
  if (!v4) {
    return;
  }
  uint64_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  CFDictionaryRef v9 = v8;
  uint64_t v10 = a1[7];
  if (v10)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    xpc_object_t v11 = *a3;
    if (*a3)
    {
      xpc_retain(*a3);
      uint64_t v13 = a1[5];
      std::string::size_type v12 = (std::__shared_weak_count *)a1[6];
      if (!v12) {
        goto LABEL_7;
      }
    }
    else
    {
      xpc_object_t v11 = xpc_null_create();
      uint64_t v13 = a1[5];
      std::string::size_type v12 = (std::__shared_weak_count *)a1[6];
      if (!v12)
      {
LABEL_7:
        size_t v14 = (std::__shared_weak_count *)v7[16];
        if (!v14 || (uint64_t v15 = v7[15], (v16 = std::__shared_weak_count::lock(v14)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        int v17 = v16;
        size_t v18 = operator new(0x38uLL);
        *size_t v18 = v7;
        v18[1] = v10;
        v18[2] = v9;
        *((_DWORD *)v18 + 6) = a2;
        v18[4] = v11;
        xpc_object_t v19 = xpc_null_create();
        v18[5] = v13;
        v18[6] = v12;
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v20 = v7[17];
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v21 = operator new(0x18uLL);
        *uint64_t v21 = v18;
        v21[1] = v15;
        v21[2] = v17;
        dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI12TraceManagerE15execute_wrappedIZZZNS3_25finishInitialization_syncEvEUb2_EUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_);
        if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
        if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
        xpc_release(v19);
        goto LABEL_17;
      }
    }
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_7;
  }
LABEL_17:
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void *__copy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrIN3abm6client5EventEEE56c37_ZTSNSt3__18weak_ptrI12TraceManagerEE(void *result, void *a2)
{
  uint64_t v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[8];
  result[7] = a2[7];
  result[8] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrIN3abm6client5EventEEE56c37_ZTSNSt3__18weak_ptrI12TraceManagerEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_55(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_1C59C6000, v1, OS_LOG_TYPE_DEFAULT, "#I Abort complete", v2, 2u);
  }
}

void *__copy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrI12TraceManagerEE56c45_ZTSNSt3__110shared_ptrIN3abm6client5EventEEE(void *result, void *a2)
{
  uint64_t v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[8];
  result[7] = a2[7];
  result[8] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrI12TraceManagerEE56c45_ZTSNSt3__110shared_ptrIN3abm6client5EventEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v3) {
      return;
    }
  }
  else
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v3) {
      return;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_57(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  CFDictionaryRef v9 = 0;
  xpc_object_t object = xpc_null_create();
  uint64_t v3 = (const void *)a1[5];
  if (v3)
  {
    int v4 = _Block_copy(v3);
    uint64_t v5 = *MEMORY[0x1E4F47128];
    uint64_t v6 = a1[6];
    uint64_t v7 = v4;
    uint64_t v8 = v6;
    if (!v6) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  int v4 = 0;
  uint64_t v5 = *MEMORY[0x1E4F47128];
  uint64_t v6 = a1[6];
  uint64_t v7 = 0;
  uint64_t v8 = v6;
  if (v6) {
LABEL_3:
  }
    dispatch_retain(v6);
LABEL_4:
  TraceManager::runOnHelper_sync(v2, (const char *)9, v5, 0x1388u, 0, &object, &v9, &v7);
  if (v6) {
    dispatch_release(v6);
  }
  if (v4) {
    _Block_release(v4);
  }
  xpc_release(object);
}

void sub_1C5A49D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
}

void __copy_helper_block_e8_40c79_ZTSN8dispatch8callbackIU13block_pointerFvN12TelephonyXPC6ResultEN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)(a2 + 40);
  if (v4) {
    int v4 = _Block_copy(v4);
  }
  uint64_t v5 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  if (v5)
  {
    dispatch_retain(v5);
  }
}

void __destroy_helper_block_e8_40c79_ZTSN8dispatch8callbackIU13block_pointerFvN12TelephonyXPC6ResultEN3xpc4dictEEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_59(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_1C59C6000, v1, OS_LOG_TYPE_DEFAULT, "#I Prepare complete", v2, 2u);
  }
}

void TraceManager::updateBasebandFWInfo(TraceManager *this)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2 || (xpc_object_t v2 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v2) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v2);
      xpc_object_t v3 = v2;
    }
    else
    {
      xpc_object_t v3 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v2 = 0;
  }
  xpc_release(v2);
  int v4 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v4 || (uint64_t v5 = *((void *)this + 15), (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = (const void *)*MEMORY[0x1E4F4CF40];
  size_t v9 = strlen((const char *)*MEMORY[0x1E4F4CF40]);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v10 = (void *)v9;
  if (v9 >= 0x17)
  {
    uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v12 = v9 | 7;
    }
    uint64_t v13 = v12 + 1;
    xpc_object_t v11 = (void **)operator new(v12 + 1);
    __dst[1] = v10;
    unint64_t v20 = v13 | 0x8000000000000000;
    __dst[0] = v11;
LABEL_19:
    memmove(v11, v8, (size_t)v10);
    *((unsigned char *)v10 + (void)v11) = 0;
    xpc_object_t object = v3;
    if (v3) {
      goto LABEL_15;
    }
    goto LABEL_20;
  }
  HIBYTE(v20) = v9;
  xpc_object_t v11 = __dst;
  if (v9) {
    goto LABEL_19;
  }
  LOBYTE(__dst[0]) = 0;
  xpc_object_t object = v3;
  if (v3)
  {
LABEL_15:
    xpc_retain(v3);
    goto LABEL_21;
  }
LABEL_20:
  xpc_object_t object = xpc_null_create();
LABEL_21:
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 1174405120;
  v15[2] = ___ZN12TraceManager20updateBasebandFWInfoEv_block_invoke;
  v15[3] = &__block_descriptor_tmp_96_0;
  v15[4] = this;
  void v15[5] = v5;
  xpc_object_t v16 = v7;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v14 = _Block_copy(v15);
  int v17 = v14;
  Service::runCommand((uint64_t)this, (uint64_t)__dst, &object, &v17);
  if (v14) {
    _Block_release(v14);
  }
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(v20) < 0) {
    operator delete(__dst[0]);
  }
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  std::__shared_weak_count::__release_weak(v7);
  xpc_release(v3);
}

void sub_1C5A4A0E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, xpc_object_t object, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (v25) {
    _Block_release(v25);
  }
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  xpc_release(object);
  if (a23 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_weak(v24);
  xpc_release(v23);
  _Unwind_Resume(a1);
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_63(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)xpc_object_t v2 = 0;
    _os_log_impl(&dword_1C59C6000, v1, OS_LOG_TYPE_DEFAULT, "#I Start complete", v2, 2u);
  }
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_67(void *a1)
{
  xpc_object_t v2 = (void *)a1[4];
  size_t v9 = 0;
  xpc_object_t object = xpc_null_create();
  xpc_object_t v3 = (const void *)a1[5];
  if (v3)
  {
    int v4 = _Block_copy(v3);
    uint64_t v5 = *MEMORY[0x1E4F47238];
    uint64_t v6 = a1[6];
    uint64_t v7 = v4;
    uint64_t v8 = v6;
    if (!v6) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  int v4 = 0;
  uint64_t v5 = *MEMORY[0x1E4F47238];
  uint64_t v6 = a1[6];
  uint64_t v7 = 0;
  uint64_t v8 = v6;
  if (v6) {
LABEL_3:
  }
    dispatch_retain(v6);
LABEL_4:
  TraceManager::runOnHelper_sync(v2, (const char *)0xA, v5, 0x1388u, 1, &object, &v9, &v7);
  if (v6) {
    dispatch_release(v6);
  }
  if (v4) {
    _Block_release(v4);
  }
  xpc_release(object);
}

void sub_1C5A4A2A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_71(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)xpc_object_t v2 = 0;
    _os_log_impl(&dword_1C59C6000, v1, OS_LOG_TYPE_DEFAULT, "#I Abort complete", v2, 2u);
  }
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_75(void *a1)
{
  xpc_object_t v2 = (void *)a1[4];
  size_t v9 = 0;
  xpc_object_t object = xpc_null_create();
  xpc_object_t v3 = (const void *)a1[5];
  if (v3)
  {
    int v4 = _Block_copy(v3);
    uint64_t v5 = *MEMORY[0x1E4F47128];
    uint64_t v6 = a1[6];
    uint64_t v7 = v4;
    uint64_t v8 = v6;
    if (!v6) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  int v4 = 0;
  uint64_t v5 = *MEMORY[0x1E4F47128];
  uint64_t v6 = a1[6];
  uint64_t v7 = 0;
  uint64_t v8 = v6;
  if (v6) {
LABEL_3:
  }
    dispatch_retain(v6);
LABEL_4:
  TraceManager::runOnHelper_sync(v2, (const char *)9, v5, 0x7D0u, 0, &object, &v9, &v7);
  if (v6) {
    dispatch_release(v6);
  }
  if (v4) {
    _Block_release(v4);
  }
  xpc_release(object);
}

void sub_1C5A4A404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_83(void *a1, uint64_t a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  xpc_object_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = (char *)a1[4];
  uint64_t v6 = std::__shared_weak_count::lock(v3);
  int v38 = v6;
  if (!v6) {
    return;
  }
  uint64_t v7 = v6;
  uint64_t v8 = a1[5];
  uint64_t v37 = v8;
  if (!v8)
  {
LABEL_51:
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    return;
  }
  size_t v9 = *((void *)v5 + 11);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    abm::client::Event::name((uint64_t *)&__p, *(abm::client::Event **)a2);
    uint64_t v10 = v40 >= 0 ? &__p : (long long *)__p;
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v10;
    _os_log_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEFAULT, "#I Received event %s", buf, 0xCu);
    if (v40 < 0) {
      operator delete((void *)__p);
    }
  }
  if ((*(unsigned int (**)(char *))(*(void *)v5 + 88))(v5))
  {
    xpc_object_t v11 = *((void *)v5 + 11);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *MEMORY[0x1E4F4CB10];
      LODWORD(__p) = 136315138;
      *(void *)((char *)&__p + 4) = v12;
      _os_log_impl(&dword_1C59C6000, v11, OS_LOG_TYPE_DEFAULT, "#I Server going down. Skipping event %s", (uint8_t *)&__p, 0xCu);
    }
    goto LABEL_51;
  }
  *(void *)std::string buf = 0xAAAAAAAAAAAAAAAALL;
  abm::client::Event::getData((uint64_t *)buf, *(abm::client::Event **)a2);
  uint64_t v13 = *(const void **)buf;
  if (*(void *)buf) {
    size_t v14 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    size_t v14 = 0;
  }
  if (v14)
  {
    *(void *)&long long __p = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&__p + 1) = 0xAAAAAAAAAAAAAAAALL;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_84;
    aBlock[3] = &__block_descriptor_tmp_85;
    xpc_object_t v16 = *(abm::client::Event **)a2;
    uint64_t v15 = *(std::__shared_weak_count **)(a2 + 8);
    aBlock[4] = v5;
    void aBlock[5] = v16;
    uint64_t v34 = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v35 = v8;
    size_t v36 = v7;
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    size_t v18 = _Block_copy(aBlock);
    xpc_object_t v19 = *((void *)v5 + 17);
    if (v19) {
      dispatch_retain(*((dispatch_object_t *)v5 + 17));
    }
    *(void *)&long long __p = v18;
    *((void *)&__p + 1) = v19;
    ctu::cf_to_xpc((uint64_t *)&object, *(ctu **)buf, v17);
    xpc_object_t v20 = object;
    if (object && MEMORY[0x1C8795EB0](object) == MEMORY[0x1E4F14590]) {
      xpc_retain(v20);
    }
    else {
      xpc_object_t v20 = xpc_null_create();
    }
    xpc_release(object);
    uint64_t v21 = v5 + 168;
    if (v5[191] < 0) {
      uint64_t v21 = *(const char **)v21;
    }
    xpc_object_t v22 = xpc_string_create(v21);
    if (!v22) {
      xpc_object_t v22 = xpc_null_create();
    }
    xpc_dictionary_set_value(v20, (const char *)*MEMORY[0x1E4F4C488], v22);
    xpc_object_t v23 = xpc_null_create();
    xpc_release(v22);
    xpc_release(v23);
    xpc_object_t v31 = v20;
    if (v20)
    {
      xpc_retain(v20);
      char v30 = 0;
      if (v18) {
        goto LABEL_31;
      }
    }
    else
    {
      char v30 = 0;
      xpc_object_t v31 = xpc_null_create();
      if (v18)
      {
LABEL_31:
        size_t v24 = _Block_copy(v18);
        uint64_t v25 = *MEMORY[0x1E4F47140];
        uint64_t v28 = v24;
        uint64_t v29 = v19;
        if (!v19)
        {
LABEL_33:
          TraceManager::runOnHelper_sync(v5, (const char *)9, v25, 0x1388u, 1, &v31, &v30, &v28);
          if (v19) {
            dispatch_release(v19);
          }
          if (v24) {
            _Block_release(v24);
          }
          xpc_release(v31);
          xpc_object_t v31 = 0;
          xpc_release(v20);
          if (v19) {
            dispatch_release(v19);
          }
          if (v18) {
            _Block_release(v18);
          }
          int v26 = v36;
          if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
          uint64_t v27 = v34;
          if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
          uint64_t v13 = *(const void **)buf;
          goto LABEL_48;
        }
LABEL_32:
        dispatch_retain(v19);
        goto LABEL_33;
      }
    }
    size_t v24 = 0;
    uint64_t v25 = *MEMORY[0x1E4F47140];
    uint64_t v28 = 0;
    uint64_t v29 = v19;
    if (!v19) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
LABEL_48:
  if (v13) {
    CFRelease(v13);
  }
  uint64_t v7 = v38;
  if (v38) {
    goto LABEL_51;
  }
}

void sub_1C5A4A8DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_84(uint64_t a1, _DWORD *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  xpc_object_t v3 = *(NSObject **)(*(void *)(a1 + 32) + 88);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v4 = *a2 == 0;
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Snapshot : Snapshot complete. Success = %d", (uint8_t *)v5, 8u);
  }
}

void *__copy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrIN3abm6client5EventEEE56c40_ZTSNSt3__110shared_ptrI12TraceManagerEE(void *result, void *a2)
{
  uint64_t v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[8];
  result[7] = a2[7];
  result[8] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrIN3abm6client5EventEEE56c40_ZTSNSt3__110shared_ptrI12TraceManagerEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v3) {
      return;
    }
  }
  else
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v3) {
      return;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_89(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (void *)a1[4];
    BOOL v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = a1[5];
      if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v6) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6) {
          return;
        }
      }
      xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
      if (v7 || (xpc_object_t v7 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C8795EB0](v7) == MEMORY[0x1E4F14590])
        {
          xpc_retain(v7);
          xpc_object_t v8 = v7;
        }
        else
        {
          xpc_object_t v8 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v8 = xpc_null_create();
        xpc_object_t v7 = 0;
      }
      xpc_release(v7);
      xpc_object_t v9 = xpc_string_create("Trace state for sysdiagnose");
      if (!v9) {
        xpc_object_t v9 = xpc_null_create();
      }
      xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E4F47160], v9);
      xpc_object_t v10 = xpc_null_create();
      xpc_release(v9);
      xpc_release(v10);
      xpc_object_t object = v8;
      if (v8) {
        xpc_retain(v8);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      uint64_t v11 = *MEMORY[0x1E4F47110];
      v12[1] = 0;
      uint64_t v13 = 0;
      v12[0] = 0;
      TraceManager::runOnHelper_sync(v3, (const char *)9, v11, 0x1388u, 1, &object, &v13, v12);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v8);
    }
  }
}

void sub_1C5A4AD14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a9);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v12);
  _Unwind_Resume(a1);
}

void TraceManager::sleep(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  BOOL v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  xpc_object_t v8 = operator new(0x10uLL);
  *xpc_object_t v8 = a1;
  v8[1] = v3;
  xpc_object_t v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v10 = operator new(0x18uLL);
  *xpc_object_t v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<TraceManager>::execute_wrapped<TraceManager::sleep(dispatch::group_session)::$_0>(TraceManager::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TraceManager::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TraceManager::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void TraceManager::wake(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  BOOL v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  xpc_object_t v8 = operator new(0x10uLL);
  *xpc_object_t v8 = a1;
  v8[1] = v3;
  xpc_object_t v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v10 = operator new(0x18uLL);
  *xpc_object_t v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<TraceManager>::execute_wrapped<TraceManager::wake(dispatch::group_session)::$_0>(TraceManager::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TraceManager::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TraceManager::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ___ZN12TraceManager20updateBasebandFWInfoEv_block_invoke(void *a1, int a2, xpc_object_t *a3)
{
  BOOL v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    xpc_object_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      xpc_object_t v9 = v8;
      uint64_t v10 = a1[5];
      if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (a2) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v9);
        if (a2) {
          return;
        }
      }
      if (v10)
      {
        xpc_object_t value = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4C488]);
        xpc_object_t object = value;
        if (value) {
          xpc_retain(value);
        }
        else {
          xpc_object_t object = xpc_null_create();
        }
        xpc::dyn_cast_or_default((uint64_t *)&v15, (xpc *)&object, (const object *)"", v12);
        uint64_t v13 = (void **)(v7 + 168);
        if (*(char *)(v7 + 191) < 0) {
          operator delete(*v13);
        }
        *(_OWORD *)uint64_t v13 = v15;
        *(void *)(v7 + 184) = v16;
        HIBYTE(v16) = 0;
        LOBYTE(v15) = 0;
        xpc_release(object);
      }
    }
  }
}

void sub_1C5A4B0BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
}

void ___ZN12TraceManager16runOnHelper_syncEN3abm6helper6TaskIDEPKcjbN3xpc4dictEN8dispatch13group_sessionENS7_8callbackIU13block_pointerFvN12TelephonyXPC6ResultES6_EEE_block_invoke(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    BOOL v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = a1[5];
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
      }
      if (v6)
      {
        uint64_t v7 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v8 = abm::helper::asString();
          uint64_t v9 = a1[10];
          int v10 = 136315394;
          uint64_t v11 = v8;
          __int16 v12 = 2080;
          uint64_t v13 = v9;
          _os_log_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_DEFAULT, "#I %s:%s: complete", (uint8_t *)&v10, 0x16u);
        }
      }
    }
  }
}

void __copy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12TraceManagerEE56c30_ZTSN8dispatch13group_sessionE64c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a2[7];
  a1[7] = v5;
  if (v5)
  {
    dispatch_retain(v5);
    uint64_t v6 = a1[7];
    if (v6) {
      dispatch_group_enter(v6);
    }
  }
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
}

void __destroy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12TraceManagerEE56c30_ZTSN8dispatch13group_sessionE64c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[9];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = a1[7];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = a1[7];
    if (!v3) {
      goto LABEL_7;
    }
  }
  dispatch_group_leave(v3);
  uint64_t v4 = a1[7];
  if (v4) {
    dispatch_release(v4);
  }
LABEL_7:
  uint64_t v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    std::__shared_weak_count::__release_weak(v5);
  }
}

uint64_t ctu::Loggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (const char *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 16))();
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F21060D0;
  MEMORY[0x1C87940C0](a1 + 1);
  return a1;
}

void ctu::Loggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F21060D0;
  MEMORY[0x1C87940C0](a1 + 1);

  operator delete(a1);
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = this->__r_.__value_.__r.__words[2];
    unint64_t v8 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (__n > v8)
    {
      size_t v11 = 0x7FFFFFFFFFFFFFF7;
      if (0x7FFFFFFFFFFFFFF7 - (v10 & 0x7FFFFFFFFFFFFFFFLL) >= __n - v8)
      {
        uint64_t v9 = (std::string *)this->__r_.__value_.__r.__words[0];
        if (v8 > 0x3FFFFFFFFFFFFFF2)
        {
LABEL_15:
          uint64_t v7 = operator new(v11);
          memcpy(v7, __s, __n);
          if (v8 != 22) {
            operator delete(v9);
          }
          this->__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
          this->__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
LABEL_23:
          this->__r_.__value_.__l.__size_ = __n;
          goto LABEL_24;
        }
LABEL_8:
        std::string::size_type v12 = 2 * v8;
        if (__n > 2 * v8) {
          std::string::size_type v12 = __n;
        }
        uint64_t v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v13 = v12 | 7;
        }
        if (v12 >= 0x17) {
          size_t v11 = v13 + 1;
        }
        else {
          size_t v11 = 23;
        }
        goto LABEL_15;
      }
LABEL_25:
      std::string::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = HIBYTE(v10);
    uint64_t v7 = (void *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    uint64_t v7 = this;
    if (__n > 0x16)
    {
      if (__n - 0x7FFFFFFFFFFFFFF7 >= 0x800000000000001FLL)
      {
        unint64_t v8 = 22;
        uint64_t v9 = this;
        goto LABEL_8;
      }
      goto LABEL_25;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0) {
    goto LABEL_23;
  }
  *((unsigned char *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
LABEL_24:
  *((unsigned char *)v7 + __n) = 0;
  return this;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4 = strlen(__s);

  return std::string::__assign_external(this, __s, v4);
}

void ctu::Loggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1C5A4B768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C5A4B784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<TraceManager>::shared_ptr[abi:ne180100]<TraceManager,std::shared_ptr<TraceManager> ctu::SharedSynchronizable<TraceManager>::make_shared_ptr<TraceManager>(TraceManager*)::{lambda(TraceManager*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  size_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2106110;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  unint64_t v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 120) = a2;
      *(void *)(a2 + 128) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 120) = a2;
  *(void *)(a2 + 128) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C5A4B8B0(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<TraceManager> ctu::SharedSynchronizable<TraceManager>::make_shared_ptr<TraceManager>(TraceManager*)::{lambda(TraceManager*)#1}::operator() const(TraceManager*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C5A4B8D8(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<TraceManager *,std::shared_ptr<TraceManager> ctu::SharedSynchronizable<TraceManager>::make_shared_ptr<TraceManager>(TraceManager*)::{lambda(TraceManager *)#1},std::allocator<TraceManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<TraceManager *,std::shared_ptr<TraceManager> ctu::SharedSynchronizable<TraceManager>::make_shared_ptr<TraceManager>(TraceManager*)::{lambda(TraceManager *)#1},std::allocator<TraceManager>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<TraceManager *,std::shared_ptr<TraceManager> ctu::SharedSynchronizable<TraceManager>::make_shared_ptr<TraceManager>(TraceManager*)::{lambda(TraceManager *)#1},std::allocator<TraceManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI12TraceManagerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI12TraceManagerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT"
                                "_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI12TraceManagerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI12TraceManagerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<TraceManager> ctu::SharedSynchronizable<TraceManager>::make_shared_ptr<TraceManager>(TraceManager*)::{lambda(TraceManager*)#1}::operator() const(TraceManager*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ctu::SharedLoggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F21060D0;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  size_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void std::__shared_ptr_pointer<BBLogTracker *,std::shared_ptr<BBLogTracker>::__shared_ptr_default_delete<BBLogTracker,BBLogTracker>,std::allocator<BBLogTracker>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<BBLogTracker *,std::shared_ptr<BBLogTracker>::__shared_ptr_default_delete<BBLogTracker,BBLogTracker>,std::allocator<BBLogTracker>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 24);
  if (v1)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::destroy(v1[1]);
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<BBLogTracker *,std::shared_ptr<BBLogTracker>::__shared_ptr_default_delete<BBLogTracker,BBLogTracker>,std::allocator<BBLogTracker>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C5BC5C42) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C5BC5C42 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C5BC5C42)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C5BC5C42 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::destroy(uint64_t a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::destroy(*(void *)(a1 + 8));
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      {
LABEL_5:
        uint64_t v3 = (void *)a1;
LABEL_7:
        operator delete(v3);
        return;
      }
    }
    else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
      goto LABEL_5;
    }
    operator delete(*(void **)(a1 + 32));
    uint64_t v3 = (void *)a1;
    goto LABEL_7;
  }
}

void ___ZN3ctu20SharedSynchronizableI12TraceManagerE13connect_eventIN5boost8signals26signalIFvNS_2cf11CFSharedRefIK14__CFDictionaryEEENS5_19optional_last_valueIvEEiNSt3__14lessIiEENS4_8functionISC_EENSI_IFvRKNS5_10connectionESB_EEENS5_5mutexEEES1_vJSB_EEEDTcl7connectfp_cvNSF_10shared_ptrIS1_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSV_SX_E_block_invoke(void *a1, const void **a2)
{
  uint64_t v3 = (void (*)(void *, CFTypeRef *))a1[5];
  uint64_t v2 = a1[6];
  size_t v4 = (void *)(a1[4] + (v2 >> 1) - 120);
  if (v2)
  {
    uint64_t v3 = *(void (**)(void *, CFTypeRef *))(*v4 + v3);
    size_t v5 = *a2;
    CFTypeRef cf = v5;
    if (!v5) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  size_t v5 = *a2;
  CFTypeRef cf = v5;
  if (v5) {
LABEL_5:
  }
    CFRetain(v5);
LABEL_6:
  v3(v4, &cf);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C5A4BD2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void **boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~slot(void **a1)
{
  unint64_t v2 = (unint64_t)a1[3];
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 4, a1 + 4, 2);
      }
    }
    a1[3] = 0;
  }
  size_t v4 = *a1;
  if (*a1)
  {
    uint64_t v5 = (uint64_t)a1[1];
    unint64_t v6 = *a1;
    if ((void *)v5 != v4)
    {
      do
      {
        v5 -= 24;
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
      }
      while ((void *)v5 != v4);
      unint64_t v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
  }
  return a1;
}

uint64_t ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~DispatchSlot(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)a1);
  unint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::~shared_ptr(uint64_t a1)
{
  unint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    unint64_t v2 = (atomic_uint *)v1[3];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = (atomic_uint *)v1[1];
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        unint64_t v6 = (atomic_uint *)v3[3];
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy((void *)v1[4]);
    if (v1[2])
    {
      uint64_t v2 = (void *)*v1;
      uint64_t v3 = (uint64_t *)v1[1];
      uint64_t v4 = *v3;
      *(void *)(v4 + 8) = *(void *)(*v1 + 8);
      *(void *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          uint64_t v5 = (uint64_t *)v3[1];
          unint64_t v6 = (atomic_uint *)v3[3];
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          operator delete(v3);
          uint64_t v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  uint64_t v1 = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>::~connection_body(a1);

  operator delete(v1);
}

BOOL boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>::connected(uint64_t a1)
{
  v19[3] = *MEMORY[0x1E4F143B8];
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14[8] = v2;
  v14[9] = v2;
  v14[6] = v2;
  v14[7] = v2;
  v14[4] = v2;
  void v14[5] = v2;
  v14[2] = v2;
  v14[3] = v2;
  v14[0] = v2;
  v14[1] = v2;
  uint64_t v3 = *(pthread_mutex_t **)(a1 + 48);
  unint64_t v15 = 10;
  uint64_t v16 = (char *)v14;
  uint64_t v17 = 0;
  size_t v18 = v3;
  pthread_mutex_lock(v3);
  uint64_t v4 = *(uint64_t **)(a1 + 32);
  if (v4)
  {
    uint64_t v5 = *v4;
    if (*v4 != v4[1])
    {
      while (1)
      {
        memset(v19, 170, 24);
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>(v5, (uint64_t)v19);
        if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        {
          if (!(*(unsigned int (**)(void))(**(void **)(v5 + 8) + 24))(*(void *)(v5 + 8))) {
            goto LABEL_6;
          }
        }
        else
        {
          uint64_t v6 = *(void *)(v5 + 16);
          if (v6 && atomic_load_explicit((atomic_uint *volatile)(v6 + 8), memory_order_acquire))
          {
LABEL_6:
            char v7 = 0;
            if (LODWORD(v19[0]) == SLODWORD(v19[0]) >> 31) {
              goto LABEL_13;
            }
            goto LABEL_7;
          }
        }
        if (*(unsigned char *)(a1 + 24))
        {
          *(unsigned char *)(a1 + 24) = 0;
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)a1, v14);
        }
        char v7 = 1;
        if (LODWORD(v19[0]) == SLODWORD(v19[0]) >> 31)
        {
LABEL_13:
          unint64_t v8 = (atomic_uint *)v19[2];
          if (v19[2])
          {
            if (atomic_fetch_add((atomic_uint *volatile)(v19[2] + 8), 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v8 + 16))(v8);
              if (atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
              }
            }
          }
          goto LABEL_17;
        }
LABEL_7:
        if (v19[1]) {
          (*(void (**)(void))(*(void *)v19[1] + 8))(v19[1]);
        }
LABEL_17:
        if ((v7 & 1) == 0)
        {
          v5 += 24;
          if (v5 != *(void *)(*(void *)(a1 + 32) + 8)) {
            continue;
          }
        }
        break;
      }
    }
  }
  int v9 = *(unsigned __int8 *)(a1 + 24);
  pthread_mutex_unlock(v18);
  unint64_t v10 = v16;
  if (v16)
  {
    if (v17 - 1 >= 0)
    {
      size_t v11 = &v16[16 * v17];
      do
      {
        std::string::size_type v12 = (atomic_uint *)*((void *)v11 - 1);
        if (v12)
        {
          if (atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v12 + 16))(v12);
            if (atomic_fetch_add(v12 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v12 + 24))(v12);
            }
          }
        }
        v11 -= 16;
      }
      while (v11 > v10);
    }
    if (v15 >= 0xB) {
      operator delete(v16);
    }
  }
  return v9 != 0;
}

void sub_1C5A4C58C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>::lock(uint64_t a1)
{
  return pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>::unlock(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>::release_slot@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 40);
  long long v2 = (void *)(result + 32);
  *a2 = *(void *)(result + 32);
  a2[1] = v3;
  if (v3)
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed);
    uint64_t v4 = *(atomic_uint **)(result + 40);
    void *v2 = 0;
    *(void *)(result + 40) = 0;
    if (v4 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
    {
      size_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
      if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
        return (*(uint64_t (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
      }
    }
  }
  else
  {
    void *v2 = 0;
    *(void *)(result + 40) = 0;
  }
  return result;
}

void boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void ***)(a1 + 16);
  if (v1)
  {
    unint64_t v2 = (unint64_t)v1[3];
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        uint64_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3) {
          v3(v1 + 4, v1 + 4, 2);
        }
      }
      v1[3] = 0;
    }
    uint64_t v4 = *v1;
    if (*v1)
    {
      uint64_t v5 = (uint64_t)v1[1];
      uint64_t v6 = *v1;
      if ((void *)v5 != v4)
      {
        do
        {
          v5 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
        }
        while ((void *)v5 != v4);
        uint64_t v6 = *v1;
      }
      v1[1] = v4;
      operator delete(v6);
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>>::get_untyped_deleter()
{
  return 0;
}

void *boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  *a1 = &unk_1F21062B0;
  unint64_t v2 = (atomic_uint *)a1[7];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  uint64_t v3 = (atomic_uint *)a1[5];
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
  }
  *a1 = &unk_1F2102D60;
  uint64_t v4 = (atomic_uint *)a1[2];
  if (v4 && atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
  }
  return a1;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>::~function(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

void boost::detail::function::functor_manager<ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>>::manage(uint64_t a1, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      int v9 = (const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v9 == (const char *)(0x80000001C5BC608BLL & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v9, (const char *)(0x80000001C5BC608BLL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = a1;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      dispatch_release(*(dispatch_object_t *)a2);
      unint64_t v8 = (const void *)*((void *)a2 + 1);
      if (v8) {
LABEL_9:
      }
        _Block_release(v8);
    }
  }
  else
  {
    uint64_t v6 = *(NSObject **)a1;
    char v7 = *(void **)(a1 + 8);
    *(void *)a2 = *(void *)a1;
    if (v7)
    {
      char v7 = _Block_copy(v7);
      uint64_t v6 = *(NSObject **)a2;
    }
    *((void *)a2 + 1) = v7;
    dispatch_retain(v6);
    if (a3 == 1)
    {
      dispatch_release(*(dispatch_object_t *)a1);
      unint64_t v8 = *(const void **)(a1 + 8);
      if (v8) {
        goto LABEL_9;
      }
    }
  }
}

void boost::detail::function::void_function_obj_invoker1<ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>,void,ctu::cf::CFSharedRef<__CFDictionary const>>::invoke(uint64_t a1, const void **a2)
{
  uint64_t v2 = *a2;
  xpc_object_t v22 = *a2;
  *a2 = 0;
  uint64_t v4 = *(NSObject **)a1;
  uint64_t v3 = *(const void **)(a1 + 8);
  if (!v3)
  {
    uint64_t v6 = 0;
LABEL_10:
    char v17 = 1;
    *(void *)&long long v23 = 0;
    if (!v2) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  uint64_t v5 = _Block_copy(v3);
  uint64_t v6 = v5;
  if (!v5) {
    goto LABEL_10;
  }
  char v7 = _Block_copy(v5);
  unint64_t v8 = v7;
  if (!v7)
  {
    char v17 = 0;
    *(void *)&long long v23 = 0;
    if (!v2) {
      goto LABEL_23;
    }
LABEL_22:
    CFRetain(v2);
    goto LABEL_23;
  }
  int v9 = _Block_copy(v7);
  unint64_t v10 = v9;
  if (v9)
  {
    size_t v11 = _Block_copy(v9);
    std::string::size_type v12 = v11;
    if (v11)
    {
      uint64_t v13 = _Block_copy(v11);
      uint64_t v14 = v13;
      if (v13)
      {
        unint64_t v15 = _Block_copy(v13);
        uint64_t v16 = v15;
        if (v15)
        {
          *(void *)&long long v23 = _Block_copy(v15);
          _Block_release(v16);
        }
        else
        {
          *(void *)&long long v23 = 0;
        }
        _Block_release(v14);
      }
      else
      {
        *(void *)&long long v23 = 0;
      }
      _Block_release(v12);
    }
    else
    {
      *(void *)&long long v23 = 0;
    }
    _Block_release(v10);
  }
  else
  {
    *(void *)&long long v23 = 0;
  }
  _Block_release(v8);
  char v17 = 0;
  if (v2) {
    goto LABEL_22;
  }
LABEL_23:
  size_t v18 = operator new(8uLL);
  *size_t v18 = v2;
  if (v2) {
    CFRetain(v2);
  }
  xpc_object_t v19 = (char *)operator new(0x20uLL);
  xpc_object_t v20 = v19;
  *(void *)xpc_object_t v19 = 0;
  if (boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>)::stored_vtable)
  {
    *(void *)xpc_object_t v19 = boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>)::stored_vtable;
    if (boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>)::stored_vtable)
    {
      *(_OWORD *)(v19 + 8) = v23;
      *((void *)v19 + 3) = v24;
    }
    else
    {
      (*(void (**)(long long *, char *, void))((unint64_t)boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>)::stored_vtable & 0xFFFFFFFFFFFFFFFELL))(&v23, v19 + 8, 0);
    }
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEES8__block_invoke;
  block[3] = &__block_descriptor_tmp_138;
  block[4] = v20;
  block[5] = v18;
  dispatch_async(v4, block);
  if (v2) {
    CFRelease(v2);
  }
  if (boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>)::stored_vtable)
  {
    if ((boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>)::stored_vtable & 1) == 0)
    {
      uint64_t v21 = *(void (**)(long long *, long long *, uint64_t))((unint64_t)boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>)::stored_vtable & 0xFFFFFFFFFFFFFFFELL);
      if (v21) {
        v21(&v23, &v23, 2);
      }
    }
  }
  if ((v17 & 1) == 0)
  {
    _Block_release(v6);
    uint64_t v2 = v22;
  }
  if (v2) {
    CFRelease(v2);
  }
}

void sub_1C5A4CE64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, uint64_t a11)
{
  operator delete(v12);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>::~function(&a11);
  if ((v13 & 1) == 0) {
    _Block_release(v11);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)&a9);
  _Unwind_Resume(a1);
}

void ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEES8__block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = **(std::runtime_error_vtbl ***)(a1 + 40);
  if (v3) {
    CFRetain(v3);
  }
  if (!*v2)
  {
    std::runtime_error::runtime_error(&cf, "call to empty boost::function");
    cf.__vftable = (std::runtime_error_vtbl *)&unk_1F21031B0;
    boost::throw_exception<boost::bad_function_call>(&cf);
  }
  uint64_t v4 = *(void (**)(void *, std::runtime_error *))((*v2 & 0xFFFFFFFFFFFFFFFELL) + 8);
  cf.__vftable = v3;
  v4(v2 + 1, &cf);
  if (cf.__vftable) {
    CFRelease(cf.__vftable);
  }
  uint64_t v5 = *(uint64_t **)(a1 + 32);
  if (v5)
  {
    uint64_t v6 = *v5;
    if (*v5)
    {
      if ((v6 & 1) == 0)
      {
        char v7 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 & 0xFFFFFFFFFFFFFFFELL);
        if (v7) {
          v7(v5 + 1, v5 + 1, 2);
        }
      }
      *uint64_t v5 = 0;
    }
    operator delete(v5);
  }
  unint64_t v8 = *(CFTypeRef **)(a1 + 40);
  if (v8)
  {
    if (*v8) {
      CFRelease(*v8);
    }
    operator delete(v8);
  }
}

void sub_1C5A4CFD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, std::runtime_error a11)
{
}

void sub_1C5A4CFF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1C5A4D00C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void boost::detail::function::functor_manager<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>::manage(void **a1, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      unint64_t v8 = (const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x80000001C5BC60EFLL & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x80000001C5BC60EFLL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = a1;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      char v7 = *(void **)a2;
      if (*(void *)a2) {
LABEL_9:
      }
        _Block_release(v7);
    }
  }
  else
  {
    uint64_t v6 = *a1;
    if (*a1) {
      uint64_t v6 = _Block_copy(v6);
    }
    *(void *)a2 = v6;
    if (a3 == 1)
    {
      char v7 = *a1;
      if (*a1) {
        goto LABEL_9;
      }
    }
  }
}

void boost::detail::function::void_function_obj_invoker1<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>,void,ctu::cf::CFSharedRef<__CFDictionary const>>::invoke(uint64_t *a1, CFTypeRef *a2)
{
  uint64_t v2 = *a1;
  CFTypeRef cf = *a2;
  *a2 = 0;
  (*(void (**)(void))(v2 + 16))();
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C5A4D178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::move_assign(uint64_t result, uint64_t *a2)
{
  if (a2 != (uint64_t *)result)
  {
    uint64_t v2 = a2;
    uint64_t v3 = (uint64_t *)result;
    uint64_t v4 = *a2;
    if (*a2)
    {
      *(void *)uint64_t result = v4;
      if (v4)
      {
        long long v7 = *(_OWORD *)(a2 + 1);
        *(void *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      uint64_t v5 = *(void *)result;
      if (!*(void *)result) {
        return result;
      }
      if ((v5 & 1) == 0)
      {
        uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6) {
          uint64_t result = v6(result + 8, result + 8, 2);
        }
      }
      uint64_t v2 = v3;
    }
    uint64_t *v2 = 0;
  }
  return result;
}

void sub_1C5A4D230(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_rethrow();
}

void sub_1C5A4D240(_Unwind_Exception *a1)
{
}

uint64_t *boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::~function1(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

void *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<TraceManager>>::~foreign_weak_ptr_impl(void *a1)
{
  *a1 = &unk_1F2106408;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<TraceManager>>::~foreign_weak_ptr_impl(void *__p)
{
  void *__p = &unk_1F2106408;
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<TraceManager>>::lock(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = 0;
LABEL_6:
  long long v7 = operator new(0x18uLL);
  void *v7 = &unk_1F2106458;
  v7[1] = v6;
  v7[2] = v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    *a2 = v7;
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    *a2 = v7;
  }
}

void sub_1C5A4D464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<TraceManager>>::expired(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  return !v1 || *(void *)(v1 + 8) == -1;
}

void *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<TraceManager>>::clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F2106408;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<TraceManager>>::~foreign_shared_ptr_impl(void *result)
{
  uint64_t v1 = result;
  void *result = &unk_1F2106458;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<TraceManager>>::~foreign_shared_ptr_impl(void *__p)
{
  uint64_t v1 = __p;
  void *__p = &unk_1F2106458;
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    long long __p = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  operator delete(__p);
}

void *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<TraceManager>>::clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F2106458;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *___ZNK3ctu20SharedSynchronizableI12TraceManagerE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

uint64_t ___ZNK3ctu20SharedSynchronizableI12TraceManagerE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c41_ZTSNSt3__110shared_ptrIK12TraceManagerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c41_ZTSNSt3__110shared_ptrIK12TraceManagerEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN9analytics29registerCallbackForTimedEventI12TraceManagerEEvPKcNS_9TimerTypeENSt3__18weak_ptrIT_EEN8dispatch5queueEU13block_pointerFvNS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEE_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      if (!a1[4]) {
        goto LABEL_14;
      }
      uint64_t v7 = a1[6];
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v8 = *(std::string *)a2;
      }
      (*(void (**)(uint64_t, std::string *))(v7 + 16))(v7, &v8);
      if ((SHIBYTE(v8.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_14:
        if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          return;
        }
LABEL_11:
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        return;
      }
      operator delete(v8.__r_.__value_.__l.__data_);
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_11;
      }
    }
  }
}

void sub_1C5A4D868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C5A4D87C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c37_ZTSNSt3__18weak_ptrI12TraceManagerEE48c106_ZTSN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(void *a1, void *a2)
{
  uint64_t v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t result = (void *)a2[6];
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  a1[6] = result;
  return result;
}

void __destroy_helper_block_e8_32c37_ZTSNSt3__18weak_ptrI12TraceManagerEE48c106_ZTSN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<TraceManager>::execute_wrapped<TraceManager::initialize(dispatch::group_session)::$_0>(TraceManager::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TraceManager::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TraceManager::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count ****)a1;
  TraceManager::finishInitialization_sync(**(std::__shared_weak_count ****)a1);
  operator delete(v2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = (void *)a1;
  }
  else
  {
    uint64_t v4 = (void *)a1;
  }
  operator delete(v4);
}

void sub_1C5A4D9FC(_Unwind_Exception *a1)
{
  operator delete(v2);
  uint64_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ctu::cf::insert<char const*,std::string>(__CFDictionary *a1, const __CFString **a2, uint64_t a3, uint64_t a4, const __CFAllocator *a5)
{
  xpc_object_t value = 0;
  ctu::cf::convert_copy((ctu::cf *)&value, a2, (const char *)0x8000100, a4, a5);
  uint64_t v6 = value;
  xpc_object_t value = 0;
  ctu::cf::convert_copy();
  uint64_t v7 = value;
  if (v6) {
    BOOL v8 = value == 0;
  }
  else {
    BOOL v8 = 1;
  }
  uint64_t v9 = !v8;
  if (v8)
  {
    if (!value) {
      goto LABEL_11;
    }
  }
  else
  {
    CFDictionaryAddValue(a1, v6, value);
  }
  CFRelease(v7);
LABEL_11:
  if (v6) {
    CFRelease(v6);
  }
  return v9;
}

void sub_1C5A4DB14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1C5A4DB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<char const*,int>(__CFDictionary *a1, const __CFString **a2, int a3, const __CFAllocator *a4, const __CFAllocator *a5)
{
  CFNumberRef v12 = 0;
  ctu::cf::convert_copy((ctu::cf *)&v12, a2, (const char *)0x8000100, (uint64_t)a4, a5);
  CFNumberRef v8 = v12;
  int valuePtr = a3;
  CFNumberRef v9 = CFNumberCreate(a4, kCFNumberIntType, &valuePtr);
  CFNumberRef v10 = v9;
  CFNumberRef v12 = v9;
  if (v8) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    if (!v9) {
      goto LABEL_8;
    }
  }
  else
  {
    CFDictionaryAddValue(a1, v8, v9);
  }
  CFRelease(v10);
LABEL_8:
  if (v8) {
    CFRelease(v8);
  }
}

void sub_1C5A4DBF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1C5A4DC18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ctu::cf::insert<char const*,BOOL>(__CFDictionary *a1, const __CFString **a2, int a3, uint64_t a4, const __CFAllocator *a5)
{
  key = 0;
  ctu::cf::convert_copy((ctu::cf *)&key, a2, (const char *)0x8000100, a4, a5);
  uint64_t v7 = key;
  CFNumberRef v8 = (void **)MEMORY[0x1E4F1CFD0];
  if (!a3) {
    CFNumberRef v8 = (void **)MEMORY[0x1E4F1CFC8];
  }
  CFNumberRef v9 = *v8;
  key = *v8;
  if (v7) {
    BOOL v10 = v9 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  uint64_t v11 = !v10;
  if (v10)
  {
    if (!v9) {
      goto LABEL_13;
    }
  }
  else
  {
    CFDictionaryAddValue(a1, v7, v9);
  }
  CFRelease(v9);
LABEL_13:
  if (v7) {
    CFRelease(v7);
  }
  return v11;
}

void sub_1C5A4DCDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

uint64_t ctu::cf::insert<char const*,char const*>(__CFDictionary *a1, const __CFString **a2, const __CFString **a3, uint64_t a4, const __CFAllocator *a5)
{
  xpc_object_t value = 0;
  ctu::cf::convert_copy((ctu::cf *)&value, a2, (const char *)0x8000100, a4, a5);
  CFNumberRef v8 = value;
  xpc_object_t value = 0;
  ctu::cf::convert_copy((ctu::cf *)&value, a3, (const char *)0x8000100, a4, v9);
  BOOL v10 = value;
  if (v8) {
    BOOL v11 = value == 0;
  }
  else {
    BOOL v11 = 1;
  }
  uint64_t v12 = !v11;
  if (v11)
  {
    if (!value) {
      goto LABEL_11;
    }
  }
  else
  {
    CFDictionaryAddValue(a1, v8, value);
  }
  CFRelease(v10);
LABEL_11:
  if (v8) {
    CFRelease(v8);
  }
  return v12;
}

void sub_1C5A4DDB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1C5A4DDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI12TraceManagerE15execute_wrappedIZZNS3_16collectLogs_syncEN3xpc4dictENS_5blockIU13block_pointerFviS7_EEEEUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSI_14default_deleteISD_EEEEENUlPvE_8__invokeESN_(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 24);
  memset(&v56, 0, sizeof(v56));
  xpc_object_t v55 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  uint64_t v6 = MEMORY[0x1E4F14590];
  if (v4)
  {
    xpc_object_t v55 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v55 = v5;
    if (!v5)
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8795EB0](v5) == v6)
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v7 = xpc_null_create();
LABEL_8:
  xpc_object_t v55 = v7;
LABEL_9:
  xpc_release(v5);
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)long long __p = v8;
  long long v54 = v8;
  CFAllocatorRef v9 = *(void **)(v2 + 16);
  xpc_object_t object = v9;
  if (v9) {
    xpc_retain(v9);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  abm::HelperClient::perform();
  xpc_release(object);
  xpc_object_t object = 0;
  BOOL v11 = (const char **)MEMORY[0x1E4F471C8];
  uint64_t v12 = (uint64_t *)MEMORY[0x1E4F1CF80];
  if (!LODWORD(__p[0]) && MEMORY[0x1C8795EB0](v55) == v6)
  {
    xpc_object_t value = xpc_dictionary_get_value(v55, *v11);
    xpc_object_t aBlock = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t aBlock = xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)&v42, (xpc *)&aBlock, (const object *)"", v14);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
    std::string v56 = v42;
    *((unsigned char *)&v42.__r_.__value_.__s + 23) = 0;
    v42.__r_.__value_.__s.__data_[0] = 0;
    xpc_release(aBlock);
    if (ResetInfo::reasonMatchesAtLeastOneApplicablePattern(2, (uint64_t)&v56, (long long **)(*(void *)(v3 + 288) + 48)))ctu::cf::update<char const*,BOOL>(*(__CFDictionary **)(v2 + 32), (const __CFString **)*MEMORY[0x1E4F4C900], 1, *v12, v15); {
    if (ResetInfo::reasonMatchesAtLeastOneApplicablePattern(4, (uint64_t)&v56, (long long **)(*(void *)(v3 + 288) + 48)))ctu::cf::update<char const*,BOOL>(*(__CFDictionary **)(v2 + 32), (const __CFString **)*MEMORY[0x1E4F4C8F8], 1, *v12, v10);
    }
  }
  uint64_t v16 = *(__CFDictionary **)(v2 + 32);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v42, v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
  }
  else {
    std::string v42 = v56;
  }
  ctu::cf::insert<char const*,std::string>(v16, (const __CFString **)*MEMORY[0x1E4F4C8D8], (uint64_t)&v42, *v12, v10);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  xpc_object_t v17 = xpc_string_create("");
  if (!v17) {
    xpc_object_t v17 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(v2 + 16), *v11, v17);
  xpc_object_t v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  xpc_object_t v19 = *(void **)(v2 + 16);
  xpc_object_t v51 = v19;
  if (v19) {
    xpc_retain(v19);
  }
  else {
    xpc_object_t v51 = xpc_null_create();
  }
  xpc_object_t aBlock = 0;
  dispatch_object_t v50 = 0;
  abm::HelperClient::perform();
  if (v50) {
    dispatch_release(v50);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(v51);
  xpc_object_t v51 = 0;
  xpc_object_t v20 = *(std::__shared_weak_count **)(v3 + 128);
  if (!v20 || (v21 = *(void *)(v3 + 120), (xpc_object_t v22 = std::__shared_weak_count::lock(v20)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v23 = v22;
  p_shared_weak_owners = &v22->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v23);
  }
  v42.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
  v42.__r_.__value_.__l.__size_ = 1174405120;
  v42.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZZZN12TraceManager16collectLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb0_ENK3__1clEv_block_invoke;
  xpc_object_t v43 = &__block_descriptor_tmp_165;
  uint64_t v44 = v3;
  uint64_t v45 = v21;
  std::string::size_type v46 = v23;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v25 = *(void **)(v2 + 40);
  if (v25) {
    uint64_t v25 = _Block_copy(v25);
  }
  xpc_object_t v47 = v25;
  int v26 = *(const void **)(v2 + 32);
  CFTypeRef cf = v26;
  if (v26) {
    CFRetain(v26);
  }
  uint64_t v27 = _Block_copy(&v42);
  uint64_t v28 = *(NSObject **)(v3 + 136);
  if (v28) {
    dispatch_retain(*(dispatch_object_t *)(v3 + 136));
  }
  xpc_object_t v29 = xpc_dictionary_create(0, 0, 0);
  if (v29 || (xpc_object_t v29 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v29) == v6)
    {
      xpc_retain(v29);
      xpc_object_t v30 = v29;
    }
    else
    {
      xpc_object_t v30 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v30 = xpc_null_create();
    xpc_object_t v29 = 0;
  }
  xpc_release(v29);
  xpc_object_t v31 = (const char *)(v2 + 48);
  if (*(char *)(v2 + 71) < 0) {
    xpc_object_t v31 = *(const char **)v31;
  }
  xpc_object_t v32 = xpc_string_create(v31);
  if (!v32) {
    xpc_object_t v32 = xpc_null_create();
  }
  xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x1E4F47160], v32);
  xpc_object_t v33 = xpc_null_create();
  xpc_release(v32);
  xpc_release(v33);
  xpc_object_t v41 = v30;
  if (v30)
  {
    xpc_retain(v30);
    char v40 = 0;
    if (v27) {
      goto LABEL_59;
    }
  }
  else
  {
    char v40 = 0;
    xpc_object_t v41 = xpc_null_create();
    if (v27)
    {
LABEL_59:
      uint64_t v34 = _Block_copy(v27);
      uint64_t v35 = *MEMORY[0x1E4F47110];
      int v38 = v34;
      long long v39 = v28;
      if (!v28) {
        goto LABEL_61;
      }
      goto LABEL_60;
    }
  }
  uint64_t v34 = 0;
  uint64_t v35 = *MEMORY[0x1E4F47110];
  int v38 = 0;
  long long v39 = v28;
  if (v28) {
LABEL_60:
  }
    dispatch_retain(v28);
LABEL_61:
  TraceManager::runOnHelper_sync((void *)v3, (const char *)9, v35, 0, 1, &v41, &v40, &v38);
  if (v28) {
    dispatch_release(v28);
  }
  if (v34) {
    _Block_release(v34);
  }
  xpc_release(v41);
  xpc_object_t v41 = 0;
  xpc_release(v30);
  if (v28) {
    dispatch_release(v28);
  }
  if (v27) {
    _Block_release(v27);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v47) {
    _Block_release(v47);
  }
  if (v46) {
    std::__shared_weak_count::__release_weak(v46);
  }
  std::__shared_weak_count::__release_weak(v23);
  if (SHIBYTE(v54) < 0) {
    operator delete(__p[1]);
  }
  xpc_release(v55);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  size_t v36 = (void *)_ZZZN12TraceManager16collectLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb0_EN3__1D1Ev(v2);
  operator delete(v36);
  uint64_t v37 = (std::__shared_weak_count *)a1[2];
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  operator delete(a1);
}

void sub_1C5A4E448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,void *aBlock,CFTypeRef cf,uint64_t a25,xpc_object_t object,dispatch_object_t a27,xpc_object_t a28,xpc_object_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  xpc_release(object);
  if (a36 < 0) {
    operator delete(__p);
  }
  xpc_release(*(xpc_object_t *)(v38 - 120));
  if (*(char *)(v38 - 89) < 0) {
    operator delete(*(void **)(v38 - 112));
  }
  char v40 = (void *)_ZZZN12TraceManager16collectLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb0_EN3__1D1Ev(v37);
  operator delete(v40);
  xpc_object_t v41 = (std::__shared_weak_count *)v36[2];
  if (v41)
  {
    if (!atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  operator delete(v36);
  _Unwind_Resume(a1);
}

void ___ZZZN12TraceManager16collectLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb0_ENK3__1clEv_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3 || (uint64_t v28 = std::__shared_weak_count::lock(v3)) == 0 || (v27 = a1[5]) == 0)
  {
    xpc_object_t v9 = xpc_null_create();
    uint64_t v10 = a1[7];
    xpc_object_t v29 = v9;
    xpc_object_t v11 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v10 + 16))(v10, 3760250880, &v29);
    xpc_release(v29);
    xpc_release(v11);
    goto LABEL_10;
  }
  xpc_object_t v4 = (const void *)*MEMORY[0x1E4F4C8A0];
  size_t v5 = strlen((const char *)*MEMORY[0x1E4F4C8A0]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v13 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v13 = v5 | 7;
    }
    uint64_t v14 = v13 + 1;
    xpc_object_t v7 = (void **)operator new(v13 + 1);
    __dst[1] = v6;
    unint64_t v26 = v14 | 0x8000000000000000;
    __dst[0] = v7;
LABEL_17:
    memmove(v7, v4, (size_t)v6);
    *((unsigned char *)v6 + (void)v7) = 0;
    long long v8 = (const void *)a1[8];
    if (!v8) {
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  HIBYTE(v26) = v5;
  xpc_object_t v7 = __dst;
  if (v5) {
    goto LABEL_17;
  }
  LOBYTE(__dst[0]) = 0;
  long long v8 = (const void *)a1[8];
  if (!v8) {
    goto LABEL_20;
  }
LABEL_18:
  CFTypeID v15 = CFGetTypeID(v8);
  if (v15 == CFDictionaryGetTypeID())
  {
    CFTypeRef cf = v8;
    CFRetain(v8);
    goto LABEL_21;
  }
LABEL_20:
  CFTypeRef cf = 0;
LABEL_21:
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 1174405120;
  v20[2] = ___ZZZN12TraceManager16collectLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb0_ENK3__1clEv_block_invoke_2;
  v20[3] = &__block_descriptor_tmp_164;
  uint64_t v16 = (const void *)a1[7];
  if (!v16)
  {
    xpc_object_t v18 = (const void *)a1[8];
    uint64_t v21 = 0;
    CFTypeRef v22 = v18;
    if (!v18) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  xpc_object_t v17 = _Block_copy(v16);
  xpc_object_t v18 = (const void *)a1[8];
  uint64_t v21 = v17;
  CFTypeRef v22 = v18;
  if (v18) {
LABEL_25:
  }
    CFRetain(v18);
LABEL_26:
  xpc_object_t aBlock = _Block_copy(v20);
  Service::broadcastEvent(v2, (uint64_t)__dst, &cf, (const void **)&aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(v26) < 0)
  {
    operator delete(__dst[0]);
    CFTypeRef v19 = v22;
    if (!v22) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  CFTypeRef v19 = v22;
  if (v22) {
LABEL_34:
  }
    CFRelease(v19);
LABEL_35:
  if (v21) {
    _Block_release(v21);
  }
LABEL_10:
  uint64_t v12 = v28;
  if (v28)
  {
    if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1C5A4E960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *aBlock, const void *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v22);
  if (a13) {
    _Block_release(a13);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a16);
  if (a22 < 0)
  {
    operator delete(__p);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v23 - 72);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v23 - 72);
  _Unwind_Resume(a1);
}

void ___ZZZN12TraceManager16collectLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb0_ENK3__1clEv_block_invoke_2(uint64_t a1, const void *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 32);
  unsigned int v4 = 0;
  ctu::cf_to_xpc((uint64_t *)&object, *(ctu **)(a1 + 40), a2);
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::object>(v2, &v4, &object);
  xpc_release(object);
}

void sub_1C5A4EA64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
}

void dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::object>(uint64_t *a1, unsigned int *a2, void **a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  size_t v5 = *a3;
  xpc_object_t object = v5;
  if (v5 && MEMORY[0x1C8795EB0](v5) == MEMORY[0x1E4F14590]) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v3 + 16))(v3, v4, &object);
  xpc_release(object);
}

void sub_1C5A4EB14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

CFTypeRef __copy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const void **)(a2 + 32);
  if (!v4)
  {
    CFTypeRef result = *(CFTypeRef *)(a2 + 40);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = result;
    if (!result) {
      return result;
    }
    return CFRetain(result);
  }
  size_t v5 = _Block_copy(v4);
  CFTypeRef result = *(CFTypeRef *)(a2 + 40);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 32);
  if (v3) {
    _Block_release(v3);
  }
}

CFTypeRef __copy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12TraceManagerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  size_t v5 = (const void *)a2[7];
  if (!v5)
  {
    CFTypeRef result = (CFTypeRef)a2[8];
    a1[7] = 0;
    a1[8] = result;
    if (!result) {
      return result;
    }
    return CFRetain(result);
  }
  uint64_t v6 = _Block_copy(v5);
  CFTypeRef result = (CFTypeRef)a2[8];
  a1[7] = v6;
  a1[8] = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12TraceManagerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(void *a1)
{
  uint64_t v2 = (const void *)a1[8];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[7];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI12TraceManagerE15execute_wrappedIZZNS3_24collectBasebandLogs_syncEN3xpc4dictENS_5blockIU13block_pointerFviS7_EEEEUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSI_14default_deleteISD_EEEEENUlPvE_8__invokeESN_(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v30 = v2;
  uint64_t v3 = *(void *)v2;
  uint64_t v4 = *(NSObject **)(*(void *)v2 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Snapshot of baseband trace complete", buf, 2u);
  }
  size_t v5 = (const char *)(v2 + 8);
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)xpc_object_t v48 = v6;
  *(_OWORD *)&v48[16] = v6;
  if (*(char *)(v2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v48, *(const std::string::value_type **)(v2 + 8), *(void *)(v2 + 16));
  }
  else
  {
    long long v7 = *(_OWORD *)v5;
    *(void *)&v48[16] = *(void *)(v2 + 24);
    *(_OWORD *)xpc_object_t v48 = v7;
  }
  long long v8 = *(void **)(v2 + 32);
  if (v8) {
    long long v8 = _Block_copy(v8);
  }
  *(void *)&v48[24] = v8;
  if (!*(_DWORD *)(v2 + 40))
  {
    _ZZZZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb1_ENK3__2clEvENKUlvE_clEv((uint64_t)v48);
    goto LABEL_65;
  }
  *(void *)std::string buf = MEMORY[0x1E4F143A8];
  uint64_t v39 = 1174405120;
  char v40 = ___ZZZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb1_ENK3__2clEv_block_invoke;
  xpc_object_t v41 = &__block_descriptor_tmp_166;
  uint64_t v10 = *(void *)(v2 + 48);
  xpc_object_t v9 = *(std::__shared_weak_count **)(v2 + 56);
  uint64_t v42 = v3;
  uint64_t v43 = v10;
  uint64_t v44 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v11 = *(void **)(v2 + 32);
  if (v11) {
    xpc_object_t v11 = _Block_copy(v11);
  }
  uint64_t v45 = v11;
  if ((v48[23] & 0x80000000) != 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v48, *(std::string::size_type *)&v48[8]);
  }
  else {
    std::string __p = *(std::string *)v48;
  }
  uint64_t v12 = *(void **)&v48[24];
  if (*(void *)&v48[24]) {
    uint64_t v12 = _Block_copy(*(const void **)&v48[24]);
  }
  xpc_object_t v47 = v12;
  uint64_t v13 = _Block_copy(buf);
  uint64_t v14 = *(NSObject **)(v3 + 136);
  if (v14) {
    dispatch_retain(v14);
  }
  xpc_object_t v15 = xpc_dictionary_create(0, 0, 0);
  if (v15 || (xpc_object_t v15 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v15) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v15);
      xpc_object_t v16 = v15;
    }
    else
    {
      xpc_object_t v16 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v16 = xpc_null_create();
    xpc_object_t v15 = 0;
  }
  xpc_release(v15);
  if (*(char *)(v2 + 31) < 0) {
    size_t v5 = *(const char **)v5;
  }
  xpc_object_t v17 = xpc_string_create(v5);
  if (!v17) {
    xpc_object_t v17 = xpc_null_create();
  }
  xpc_dictionary_set_value(v16, (const char *)*MEMORY[0x1E4F47178], v17);
  xpc_object_t v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  CFTypeRef v19 = (const char *)(v2 + 64);
  if (*(char *)(v2 + 87) < 0) {
    CFTypeRef v19 = *(const char **)v19;
  }
  xpc_object_t v20 = xpc_string_create(v19);
  if (!v20) {
    xpc_object_t v20 = xpc_null_create();
  }
  xpc_dictionary_set_value(v16, (const char *)*MEMORY[0x1E4F47190], v20);
  xpc_object_t v21 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v21);
  xpc_object_t v22 = xpc_int64_create(*(int *)(v2 + 40));
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  xpc_dictionary_set_value(v16, (const char *)*MEMORY[0x1E4F47258], v22);
  xpc_object_t v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  xpc_object_t v24 = xpc_BOOL_create(*(unsigned char *)(v2 + 88));
  if (!v24) {
    xpc_object_t v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(v16, (const char *)*MEMORY[0x1E4F47108], v24);
  xpc_object_t v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  unint64_t v36 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v37 = 0xAAAAAAAAAAAAAAAALL;
  GetABMLogServer(&v34);
  abm::HelperClient::create();
  unint64_t v26 = v35;
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    xpc_object_t v33 = v16;
    if (v16)
    {
LABEL_42:
      xpc_retain(v16);
      if (v13) {
        goto LABEL_43;
      }
      goto LABEL_75;
    }
  }
  else
  {
    xpc_object_t v33 = v16;
    if (v16) {
      goto LABEL_42;
    }
  }
  xpc_object_t v33 = xpc_null_create();
  if (v13)
  {
LABEL_43:
    xpc_object_t aBlock = _Block_copy(v13);
    dispatch_object_t object = v14;
    if (!v14) {
      goto LABEL_45;
    }
    goto LABEL_44;
  }
LABEL_75:
  xpc_object_t aBlock = 0;
  dispatch_object_t object = v14;
  if (v14) {
LABEL_44:
  }
    dispatch_retain(v14);
LABEL_45:
  abm::HelperClient::perform();
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(v33);
  xpc_object_t v33 = 0;
  uint64_t v27 = (std::__shared_weak_count *)v37;
  if (v37 && !atomic_fetch_add((atomic_ullong *volatile)(v37 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  xpc_release(v16);
  if (v14) {
    dispatch_release(v14);
  }
  if (v13) {
    _Block_release(v13);
  }
  if (v47) {
    _Block_release(v47);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    uint64_t v28 = v45;
    if (!v45) {
      goto LABEL_63;
    }
    goto LABEL_62;
  }
  uint64_t v28 = v45;
  if (v45) {
LABEL_62:
  }
    _Block_release(v28);
LABEL_63:
  if (v44) {
    std::__shared_weak_count::__release_weak(v44);
  }
LABEL_65:
  if (*(void *)&v48[24]) {
    _Block_release(*(const void **)&v48[24]);
  }
  if ((v48[23] & 0x80000000) != 0) {
    operator delete(*(void **)v48);
  }
  _ZNSt3__110unique_ptrIZZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS3_EEEEUb1_E3__2NS_14default_deleteIS9_EEED1B8ne180100Ev(&v30);
  xpc_object_t v29 = (std::__shared_weak_count *)a1[2];
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  operator delete(a1);
}

void sub_1C5A4F240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, dispatch_object_t object, xpc_object_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *aBlock,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a23) {
    std::__shared_weak_count::__release_weak(a23);
  }
  uint64_t v34 = *(const void **)(v32 - 72);
  if (v34) {
    _Block_release(v34);
  }
  if (*(char *)(v32 - 73) < 0) {
    operator delete(*(void **)(v32 - 96));
  }
  _ZNSt3__110unique_ptrIZZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS3_EEEEUb1_E3__2NS_14default_deleteIS9_EEED1B8ne180100Ev(&a9);
  uint64_t v35 = (std::__shared_weak_count *)v31[2];
  if (v35)
  {
    if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  operator delete(v31);
  _Unwind_Resume(a1);
}

uint64_t *_ZNSt3__110unique_ptrIZZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS3_EEEEUb1_E3__2NS_14default_deleteIS9_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 87) < 0) {
      operator delete(*(void **)(v2 + 64));
    }
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 56);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = *(const void **)(v2 + 32);
    if (v4) {
      _Block_release(v4);
    }
    if (*(char *)(v2 + 31) < 0) {
      operator delete(*(void **)(v2 + 8));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void _ZZZZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb1_ENK3__2clEvENKUlvE_clEv(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v3 = v2;
  if (v2)
  {
    xpc_object_t xdict = v2;
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t xdict = v3;
    if (!v3)
    {
      xpc_object_t v4 = xpc_null_create();
      xpc_object_t v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8795EB0](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  xpc_object_t v4 = xpc_null_create();
LABEL_8:
  xpc_object_t xdict = v4;
LABEL_9:
  xpc_release(v3);
  xpc_object_t v5 = xpc_string_create((const char *)*MEMORY[0x1E4F4F928]);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C7F8], v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  long long v7 = (const char *)a1;
  if (*(char *)(a1 + 23) < 0) {
    long long v7 = *(const char **)a1;
  }
  xpc_object_t v8 = xpc_string_create(v7);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C4C8], v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  unsigned int v10 = 0;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 24), &v10, &xdict);
  xpc_release(xdict);
}

void sub_1C5A4F654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ___ZZZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb1_ENK3__2clEv_block_invoke(void *a1, unsigned int *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[4];
  uint64_t v15 = 0;
  xpc_object_t v16 = 0;
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
  {
    xpc_object_t v6 = 0;
    goto LABEL_12;
  }
  xpc_object_t v6 = std::__shared_weak_count::lock(v4);
  xpc_object_t v16 = v6;
  if (!v6 || (uint64_t v15 = a1[5]) == 0)
  {
LABEL_12:
    xpc_object_t v10 = xpc_null_create();
    uint64_t v11 = a1[7];
    __p[0] = v10;
    xpc_object_t v12 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, void **))(v11 + 16))(v11, 3760250880, __p);
    xpc_release(__p[0]);
    xpc_release(v12);
    if (!v6) {
      return;
    }
    goto LABEL_17;
  }
  uint64_t v7 = *a2;
  xpc_object_t v8 = *(NSObject **)(v3 + 88);
  if (v7)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      TelephonyXPC::Result::toString(v7, (uint64_t)__p);
      if (v14 >= 0) {
        xpc_object_t v9 = __p;
      }
      else {
        xpc_object_t v9 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315138;
      xpc_object_t v18 = v9;
      _os_log_error_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_ERROR, "Failed to archive logs. Result: %s", buf, 0xCu);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  else if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(__p[0]) = 0;
    _os_log_debug_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_DEBUG, "#D Compression is done.", (uint8_t *)__p, 2u);
  }
  _ZZZZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb1_ENK3__2clEvENKUlvE_clEv((uint64_t)(a1 + 8));
LABEL_17:
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1C5A4F884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_1C5A4F8C8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t TelephonyXPC::Result::toString@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  switch(result)
  {
    case 0xE020E000:
      *(unsigned char *)(a2 + 23) = 14;
      strcpy((char *)a2, "kInternalError");
      return result;
    case 0xE020E001:
      *(unsigned char *)(a2 + 23) = 12;
      strcpy((char *)a2, "kServerError");
      return result;
    case 0xE020E002:
      xpc_object_t v2 = "kCommandError";
      goto LABEL_12;
    case 0xE020E003:
      *(unsigned char *)(a2 + 23) = 8;
      strcpy((char *)a2, "kTimeout");
      return result;
    case 0xE020E004:
      xpc_object_t v2 = "kNotSupported";
      goto LABEL_12;
    case 0xE020E005:
      *(unsigned char *)(a2 + 23) = 6;
      strcpy((char *)a2, "kRetry");
      return result;
    case 0xE020E006:
      *(unsigned char *)(a2 + 23) = 17;
      strcpy((char *)a2, "kPermissionDenied");
      return result;
    case 0xE020E007:
      xpc_object_t v2 = "kNotAvailable";
LABEL_12:
      *(unsigned char *)(a2 + 23) = 13;
      *(void *)a2 = *(void *)v2;
      *(void *)(a2 + 5) = *(void *)(v2 + 5);
      *(unsigned char *)(a2 + 13) = 0;
      break;
    default:
      if (result)
      {
        *(unsigned char *)(a2 + 23) = 17;
        strcpy((char *)a2, "kInvalidErrorCode");
      }
      else
      {
        *(unsigned char *)(a2 + 23) = 8;
        strcpy((char *)a2, "kSuccess");
      }
      break;
  }
  return result;
}

void *__copy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12TraceManagerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c124_ZTSZZZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb1_ENK3__2clEvEUlvE_(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v5 = *(void **)(a2 + 56);
  if (v5) {
    xpc_object_t v5 = _Block_copy(v5);
  }
  a1[7] = v5;
  xpc_object_t v6 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 64);
    a1[10] = *(void *)(a2 + 80);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  CFTypeRef result = *(void **)(a2 + 88);
  if (result) {
    CFTypeRef result = _Block_copy(result);
  }
  a1[11] = result;
  return result;
}

void sub_1C5A4FB10(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 + 56);
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 48);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12TraceManagerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c124_ZTSZZZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb1_ENK3__2clEvEUlvE_(uint64_t a1)
{
  xpc_object_t v2 = *(const void **)(a1 + 88);
  if (v2) {
    _Block_release(v2);
  }
  if (*(char *)(a1 + 87) < 0)
  {
    operator delete(*(void **)(a1 + 64));
    uint64_t v3 = *(const void **)(a1 + 56);
    if (!v3) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v3 = *(const void **)(a1 + 56);
  if (v3) {
LABEL_7:
  }
    _Block_release(v3);
LABEL_8:
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<TraceManager>::execute_wrapped<TraceManager::start(dispatch::group_session)::$_0>(TraceManager::start(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TraceManager::start(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TraceManager::start(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(dispatch_group_t **__p)
{
  xpc_object_t v2 = *__p;
  if (*__p)
  {
    if (*v2)
    {
      dispatch_group_leave(*v2);
      if (*v2) {
        dispatch_release(*v2);
      }
    }
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)__p[2];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = __p;
  }
  else
  {
    uint64_t v4 = __p;
  }
  operator delete(v4);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI12TraceManagerE15execute_wrappedIZZZNS3_25finishInitialization_syncEvEUb2_EUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_(void *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  xpc_object_t v2 = (_DWORD *)*a1;
  xpc_object_t v6 = v2;
  if (v2[6])
  {
    uint64_t v3 = *(NSObject **)(*(void *)v2 + 88);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      xpc::object::to_string((uint64_t *)__p, (xpc::object *)(v2 + 8));
      xpc_object_t v5 = v8 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136315138;
      xpc_object_t v10 = v5;
      _os_log_error_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_ERROR, "Dump state failed: %s", buf, 0xCu);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  _ZNSt3__110unique_ptrIZZZN12TraceManager25finishInitialization_syncEvEUb2_EUb3_E3__4NS_14default_deleteIS2_EEED1B8ne180100Ev((uint64_t *)&v6);
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  operator delete(a1);
}

void sub_1C5A4FDC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _ZNSt3__110unique_ptrIZZZN12TraceManager25finishInitialization_syncEvEUb2_EUb3_E3__4NS_14default_deleteIS2_EEED1B8ne180100Ev(&a9);
  uint64_t v11 = (std::__shared_weak_count *)v9[2];
  if (v11)
  {
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t *_ZNSt3__110unique_ptrIZZZN12TraceManager25finishInitialization_syncEvEUb2_EUb3_E3__4NS_14default_deleteIS2_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 48);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    xpc_release(*(xpc_object_t *)(v2 + 32));
    *(void *)(v2 + 32) = 0;
    uint64_t v4 = *(std::__shared_weak_count **)(v2 + 16);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete((void *)v2);
  }
  return a1;
}

void dispatch::async<void ctu::SharedSynchronizable<TraceManager>::execute_wrapped<TraceManager::sleep(dispatch::group_session)::$_0>(TraceManager::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TraceManager::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TraceManager::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Helper sleep requested", (uint8_t *)&__p, 2u);
  }
  xpc_object_t v5 = (const void *)*MEMORY[0x1E4F4C198];
  size_t v6 = strlen((const char *)*MEMORY[0x1E4F4C198]);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
LABEL_69:
  }
    std::string::__throw_length_error[abi:ne180100]();
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (void **)operator new(v9 + 1);
    size_t v39 = v7;
    unint64_t v40 = v10 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_10;
  }
  HIBYTE(v40) = v6;
  p_dst = (void **)&__dst;
  if (v6) {
LABEL_10:
  }
    memmove(p_dst, v5, v7);
  *((unsigned char *)p_dst + v7) = 0;
  memset(&__p, 0, sizeof(__p));
  int v11 = -1431655766;
  int v12 = -1431655766;
  if (prop::bbtrace::get((char *)&__dst, (uint64_t)&__p))
  {
    LODWORD(object) = -1431655766;
    if (util::convert<int>(&__p, &object, 0)) {
      int v12 = (int)object;
    }
    else {
      int v12 = -1431655766;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v40) & 0x80000000) == 0) {
      goto LABEL_17;
    }
  }
  else if ((SHIBYTE(v40) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete(__dst);
LABEL_17:
  uint64_t v13 = (const void *)*MEMORY[0x1E4F4C428];
  size_t v14 = strlen((const char *)*MEMORY[0x1E4F4C428]);
  if (v14 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_69;
  }
  size_t v15 = v14;
  if (v14 >= 0x17)
  {
    uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v17 = v14 | 7;
    }
    uint64_t v18 = v17 + 1;
    xpc_object_t v16 = (void **)operator new(v17 + 1);
    size_t v39 = v15;
    unint64_t v40 = v18 | 0x8000000000000000;
    std::string __dst = v16;
    goto LABEL_24;
  }
  HIBYTE(v40) = v14;
  xpc_object_t v16 = (void **)&__dst;
  if (v14) {
LABEL_24:
  }
    memmove(v16, v13, v15);
  *((unsigned char *)v16 + v15) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::bbtrace::get((char *)&__dst, (uint64_t)&__p))
  {
    LODWORD(object) = -1431655766;
    if (util::convert<int>(&__p, &object, 0)) {
      int v11 = (int)object;
    }
    else {
      int v11 = -1431655766;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v40) & 0x80000000) == 0)
    {
LABEL_31:
      if (v12 != 4) {
        goto LABEL_42;
      }
      goto LABEL_37;
    }
  }
  else if ((SHIBYTE(v40) & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(__dst);
  if (v12 != 4)
  {
LABEL_42:
    xpc_object_t v23 = (void **)xpc_null_create();
    uint64_t v24 = *MEMORY[0x1E4F47200];
    xpc_object_t v25 = v2[1];
    xpc_object_t object = v25;
    std::string __dst = v23;
    if (v25)
    {
      dispatch_retain(v25);
      dispatch_group_enter(v25);
    }
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    TraceManager::runOnHelper_sync((void *)v3, (const char *)9, v24, 0x61A8u, 0, (xpc_object_t *)&__dst, (NSObject **)&object, (void **)&__p.__r_.__value_.__l.__data_);
    if (v25)
    {
      dispatch_group_leave(v25);
      dispatch_release(v25);
    }
    xpc_release(__dst);
    goto LABEL_62;
  }
LABEL_37:
  if (v11 != 1) {
    goto LABEL_42;
  }
  uint64_t v19 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C59C6000, v19, OS_LOG_TYPE_DEFAULT, "#I Cellular Logging should be paused and the other traces will hanlde enter low power.", (uint8_t *)&__p, 2u);
  }
  xpc_object_t v20 = xpc_null_create();
  xpc_object_t v21 = v2[1];
  unint64_t v36 = v21;
  xpc_object_t object = v20;
  if (v21)
  {
    dispatch_retain(v21);
    dispatch_group_enter(v21);
    xpc_object_t v22 = v2[1];
  }
  else
  {
    xpc_object_t v22 = 0;
  }
  __p.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
  __p.__r_.__value_.__l.__size_ = 1174405120;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZZN12TraceManager5sleepEN8dispatch13group_sessionEENK3__0clEv_block_invoke;
  xpc_object_t v33 = &__block_descriptor_tmp_179_0;
  uint64_t v34 = v3;
  dispatch_group_t group = v22;
  if (v22)
  {
    dispatch_retain(v22);
    if (group) {
      dispatch_group_enter(group);
    }
  }
  unint64_t v26 = (void **)_Block_copy(&__p);
  uint64_t v27 = *MEMORY[0x1E4F47228];
  uint64_t v28 = *(NSObject **)(v3 + 136);
  if (v28) {
    dispatch_retain(*(dispatch_object_t *)(v3 + 136));
  }
  std::string __dst = v26;
  size_t v39 = (size_t)v28;
  TraceManager::runOnHelper_sync((void *)v3, (const char *)0xA, v27, 0x1388u, 1, &object, &v36, (void **)&__dst);
  if (v28) {
    dispatch_release(v28);
  }
  if (v26) {
    _Block_release(v26);
  }
  if (v21)
  {
    dispatch_group_leave(v21);
    dispatch_release(v21);
  }
  xpc_release(object);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
LABEL_62:
  xpc_object_t v29 = v2[1];
  if (v29)
  {
    dispatch_group_leave(v29);
    uint64_t v30 = v2[1];
    if (v30) {
      dispatch_release(v30);
    }
  }
  operator delete(v2);
  xpc_object_t v31 = (std::__shared_weak_count *)a1[2];
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  operator delete(a1);
}

void sub_1C5A503D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, dispatch_group_t group, uint64_t a18, uint64_t a19, xpc_object_t object,xpc_object_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (v30) {
    dispatch_release(v30);
  }
  if (v29) {
    _Block_release(v29);
  }
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  if (v28)
  {
    dispatch_group_leave(v28);
    dispatch_release(v28);
  }
  xpc_release(object);
  uint64_t v32 = v27[1];
  if (v32)
  {
    dispatch_group_leave(v32);
    xpc_object_t v33 = v27[1];
    if (v33) {
      dispatch_release(v33);
    }
  }
  operator delete(v27);
  uint64_t v34 = (std::__shared_weak_count *)v26[2];
  if (v34)
  {
    if (!atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  operator delete(v26);
  _Unwind_Resume(a1);
}

void ___ZZN12TraceManager5sleepEN8dispatch13group_sessionEENK3__0clEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  xpc_object_t v3 = xpc_null_create();
  uint64_t v4 = *MEMORY[0x1E4F47200];
  xpc_object_t v5 = *(NSObject **)(a1 + 40);
  size_t v7 = v5;
  xpc_object_t object = v3;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v5);
  }
  v6[0] = 0;
  v6[1] = 0;
  TraceManager::runOnHelper_sync(v2, (const char *)9, v4, 0x61A8u, 0, &object, &v7, v6);
  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }
  xpc_release(object);
}

void sub_1C5A505BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a9);
  if (v12)
  {
    dispatch_group_leave(v12);
    dispatch_release(v12);
  }
  xpc_release(object);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<TraceManager>::execute_wrapped<TraceManager::wake(dispatch::group_session)::$_0>(TraceManager::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TraceManager::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TraceManager::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Helper wake requested", (uint8_t *)&__p, 2u);
  }
  xpc_object_t v5 = (const void *)*MEMORY[0x1E4F4C198];
  size_t v6 = strlen((const char *)*MEMORY[0x1E4F4C198]);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
LABEL_60:
  }
    std::string::__throw_length_error[abi:ne180100]();
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (void **)operator new(v9 + 1);
    size_t v38 = v7;
    unint64_t v39 = v10 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_10;
  }
  HIBYTE(v39) = v6;
  p_dst = (void **)&__dst;
  if (v6) {
LABEL_10:
  }
    memmove(p_dst, v5, v7);
  *((unsigned char *)p_dst + v7) = 0;
  memset(&__p, 0, sizeof(__p));
  int v11 = -1431655766;
  int v12 = -1431655766;
  if (prop::bbtrace::get((char *)&__dst, (uint64_t)&__p))
  {
    LODWORD(object) = -1431655766;
    if (util::convert<int>(&__p, &object, 0)) {
      int v12 = (int)object;
    }
    else {
      int v12 = -1431655766;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v39) & 0x80000000) == 0) {
      goto LABEL_17;
    }
  }
  else if ((SHIBYTE(v39) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete(__dst);
LABEL_17:
  uint64_t v13 = (const void *)*MEMORY[0x1E4F4C428];
  size_t v14 = strlen((const char *)*MEMORY[0x1E4F4C428]);
  if (v14 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_60;
  }
  size_t v15 = v14;
  if (v14 >= 0x17)
  {
    uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v17 = v14 | 7;
    }
    uint64_t v18 = v17 + 1;
    xpc_object_t v16 = (void **)operator new(v17 + 1);
    size_t v38 = v15;
    unint64_t v39 = v18 | 0x8000000000000000;
    std::string __dst = v16;
    goto LABEL_24;
  }
  HIBYTE(v39) = v14;
  xpc_object_t v16 = (void **)&__dst;
  if (v14) {
LABEL_24:
  }
    memmove(v16, v13, v15);
  *((unsigned char *)v16 + v15) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::bbtrace::get((char *)&__dst, (uint64_t)&__p))
  {
    LODWORD(object) = -1431655766;
    if (util::convert<int>(&__p, &object, 0)) {
      int v11 = (int)object;
    }
    else {
      int v11 = -1431655766;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v39) & 0x80000000) == 0)
    {
LABEL_31:
      uint64_t v19 = (uint64_t *)MEMORY[0x1E4F471E0];
      if (v12 != 4) {
        goto LABEL_52;
      }
      goto LABEL_37;
    }
  }
  else if ((SHIBYTE(v39) & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(__dst);
  uint64_t v19 = (uint64_t *)MEMORY[0x1E4F471E0];
  if (v12 != 4)
  {
LABEL_52:
    unint64_t v26 = (void **)xpc_null_create();
    uint64_t v27 = *v19;
    xpc_object_t object = 0;
    std::string __dst = v26;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    TraceManager::runOnHelper_sync((void *)v3, (const char *)9, v27, 0x1388u, 0, (xpc_object_t *)&__dst, (NSObject **)&object, (void **)&__p.__r_.__value_.__l.__data_);
    xpc_release(__dst);
    goto LABEL_53;
  }
LABEL_37:
  if (v11 != 1) {
    goto LABEL_52;
  }
  xpc_object_t v20 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C59C6000, v20, OS_LOG_TYPE_DEFAULT, "#I The other traces will handle exit low power first, then the Cellular Logging should be resumed.", (uint8_t *)&__p, 2u);
  }
  xpc_object_t v21 = xpc_null_create();
  uint64_t v35 = 0;
  xpc_object_t object = v21;
  __p.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
  __p.__r_.__value_.__l.__size_ = 1174405120;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZZN12TraceManager4wakeEN8dispatch13group_sessionEENK3__0clEv_block_invoke;
  uint64_t v32 = &__block_descriptor_tmp_182;
  uint64_t v33 = v3;
  xpc_object_t v22 = v2[1];
  dispatch_group_t group = v22;
  if (v22)
  {
    dispatch_retain(v22);
    if (group) {
      dispatch_group_enter(group);
    }
  }
  xpc_object_t v23 = (void **)_Block_copy(&__p);
  uint64_t v24 = *v19;
  xpc_object_t v25 = *(NSObject **)(v3 + 136);
  if (v25) {
    dispatch_retain(*(dispatch_object_t *)(v3 + 136));
  }
  std::string __dst = v23;
  size_t v38 = (size_t)v25;
  TraceManager::runOnHelper_sync((void *)v3, (const char *)9, v24, 0x1388u, 0, &object, &v35, (void **)&__dst);
  if (v25) {
    dispatch_release(v25);
  }
  if (v23) {
    _Block_release(v23);
  }
  xpc_release(object);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
LABEL_53:
  uint64_t v28 = v2[1];
  if (v28)
  {
    dispatch_group_leave(v28);
    xpc_object_t v29 = v2[1];
    if (v29) {
      dispatch_release(v29);
    }
  }
  operator delete(v2);
  uint64_t v30 = (std::__shared_weak_count *)a1[2];
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  operator delete(a1);
}

void sub_1C5A50A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, dispatch_group_t group, uint64_t a18, uint64_t a19, xpc_object_t object,xpc_object_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (v29) {
    dispatch_release(v29);
  }
  if (v28) {
    _Block_release(v28);
  }
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  xpc_release(object);
  xpc_object_t v31 = v27[1];
  if (v31)
  {
    dispatch_group_leave(v31);
    uint64_t v32 = v27[1];
    if (v32) {
      dispatch_release(v32);
    }
  }
  operator delete(v27);
  uint64_t v33 = (std::__shared_weak_count *)v26[2];
  if (v33)
  {
    if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  operator delete(v26);
  _Unwind_Resume(a1);
}

void ___ZZN12TraceManager4wakeEN8dispatch13group_sessionEENK3__0clEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  xpc_object_t v2 = xpc_null_create();
  uint64_t v3 = *MEMORY[0x1E4F47238];
  xpc_object_t v5 = 0;
  xpc_object_t object = v2;
  v4[0] = 0;
  v4[1] = 0;
  TraceManager::runOnHelper_sync(v1, (const char *)0xA, v3, 0x1388u, 1, &object, &v5, v4);
  xpc_release(object);
}

void sub_1C5A50BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
}

uint64_t __cxx_global_var_init_102()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

void LogDumpDB::LogDumpDB(LogDumpDB *this)
{
  *(void *)this = &unk_1F21065F0;
  *((_DWORD *)this + 4) = 10;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  LogDumpDB::init(this);
}

{
  ctu::OsLogLogger::OsLogLogger((LogDumpDB *)((char *)this + 8), "com.apple.telephony.abm", "Log Dump History");
  *(void *)this = &unk_1F21065F0;
  *((_DWORD *)this + 4) = 10;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  LogDumpDB::init(this);
}

void sub_1C5A50CC4(_Unwind_Exception *a1)
{
  std::vector<ResetInfo>::~vector[abi:ne180100](v2);
  MEMORY[0x1C8794100](v1);
  _Unwind_Resume(a1);
}

void LogDumpDB::init(LogDumpDB *this)
{
  unint64_t v36 = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  uint64_t v2 = off_1EBBDCA58;
  if (!off_1EBBDCA58)
  {
    SharedData::create_default_global(__p);
    long long v3 = *(_OWORD *)__p;
    *(void *)std::string __p = 0;
    *(void *)&__p[8] = 0;
    uint64_t v4 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
    off_1EBBDCA58 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    xpc_object_t v5 = *(std::__shared_weak_count **)&__p[8];
    if (*(void *)&__p[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&__p[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = off_1EBBDCA58;
  }
  size_t v6 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
  if (*(&off_1EBBDCA58 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA58 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  __p[23] = 16;
  strcpy(__p, "Log Dump History");
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 40));
  Preferences::getPreference<__CFArray const*>((uint64_t (***)(void, uint64_t))v2, __p, &v36);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 40));
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    size_t v7 = v36;
    uint64_t v35 = v36;
    if (!v36) {
      goto LABEL_71;
    }
  }
  else
  {
    size_t v7 = v36;
    uint64_t v35 = v36;
    if (!v36) {
      goto LABEL_71;
    }
  }
  CFRetain(v7);
  if (ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get)
  {
    uint64_t Count = CFArrayGetCount((CFArrayRef)v7);
    if (Count)
    {
      CFIndex v8 = 0;
      uint64_t v19 = (char *)*MEMORY[0x1E4F4C4C8];
      uint64_t v9 = (const char *)*MEMORY[0x1E4F4CA98];
      uint64_t v10 = (const char *)*MEMORY[0x1E4F4C690];
      int v11 = (const char *)*MEMORY[0x1E4F4CA38];
      int v12 = (const char *)*MEMORY[0x1E4F4C8D8];
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v7, v8);
        size_t v14 = ValueAtIndex;
        if (ValueAtIndex && (CFTypeID v15 = CFGetTypeID(ValueAtIndex), v15 == CFDictionaryGetTypeID()))
        {
          uint64_t v34 = v14;
          CFRetain(v14);
        }
        else
        {
          size_t v14 = 0;
          uint64_t v34 = 0;
        }
        v33[0] = 0xAAAAAAAAAAAAAAAALL;
        v33[1] = 0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v33, (const __CFDictionary *)v14);
        memset((char *)&v32[1] + 8, 170, 24);
        memset(__p, 0, 24);
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v32, v19);
        ctu::cf::map_adapter::getString();
        MEMORY[0x1C8794290](v32);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        memset(v32, 170, 24);
        memset(__p, 0, 24);
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v31, v9);
        ctu::cf::map_adapter::getString();
        MEMORY[0x1C8794290](v31);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        memset(v31, 170, sizeof(v31));
        memset(__p, 0, 24);
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v30, v10);
        ctu::cf::map_adapter::getString();
        MEMORY[0x1C8794290](v30);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        memset(v30, 170, sizeof(v30));
        memset(__p, 0, 24);
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v29, v11);
        ctu::cf::map_adapter::getString();
        MEMORY[0x1C8794290](&v29);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        memset(&v29, 170, sizeof(v29));
        memset(__p, 0, 24);
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v37, v12);
        ctu::cf::map_adapter::getString();
        MEMORY[0x1C8794290](v37);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)uint64_t v27 = v16;
        long long v28 = v16;
        *(_OWORD *)xpc_object_t v25 = v16;
        long long v26 = v16;
        *(_OWORD *)&__p[16] = v16;
        long long v24 = v16;
        *(_OWORD *)std::string __p = v16;
        if (SHIBYTE(v32[2]) < 0) {
          std::string::__init_copy_ctor_external(&v22, *((const std::string::value_type **)&v32[1] + 1), *(std::string::size_type *)&v32[2]);
        }
        else {
          std::string v22 = *(std::string *)((char *)&v32[1] + 8);
        }
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v21, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
        }
        else {
          std::string v21 = v29;
        }
        ResetInfo::ResetInfo((std::string *)__p, (long long *)v31, (long long *)v30, v32, (uint64_t)&v22, 7, (long long *)&v21);
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v21.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_45:
            uint64_t v17 = (std::string *)*((void *)this + 4);
            if ((unint64_t)v17 < *((void *)this + 5)) {
              goto LABEL_46;
            }
            goto LABEL_49;
          }
        }
        else if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_45;
        }
        operator delete(v22.__r_.__value_.__l.__data_);
        uint64_t v17 = (std::string *)*((void *)this + 4);
        if ((unint64_t)v17 < *((void *)this + 5))
        {
LABEL_46:
          ResetInfo::ResetInfo(v17, (const ResetInfo *)__p);
          uint64_t v18 = &v17[4].__r_.__value_.__s.__data_[16];
          *((void *)this + 4) = (char *)v17 + 112;
          goto LABEL_50;
        }
LABEL_49:
        uint64_t v18 = std::vector<ResetInfo>::__push_back_slow_path<ResetInfo const&>((void *)this + 3, (const ResetInfo *)__p);
LABEL_50:
        *((void *)this + 4) = v18;
        if (SHIBYTE(v28) < 0)
        {
          operator delete(v27[1]);
          if ((SBYTE7(v26) & 0x80000000) == 0)
          {
LABEL_52:
            if ((SHIBYTE(v24) & 0x80000000) == 0) {
              goto LABEL_53;
            }
            goto LABEL_63;
          }
        }
        else if ((SBYTE7(v26) & 0x80000000) == 0)
        {
          goto LABEL_52;
        }
        operator delete(v25[0]);
        if ((SHIBYTE(v24) & 0x80000000) == 0)
        {
LABEL_53:
          if ((__p[23] & 0x80000000) == 0) {
            goto LABEL_54;
          }
          goto LABEL_64;
        }
LABEL_63:
        operator delete(*(void **)&__p[24]);
        if ((__p[23] & 0x80000000) == 0)
        {
LABEL_54:
          if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_55;
          }
          goto LABEL_65;
        }
LABEL_64:
        operator delete(*(void **)__p);
        if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_55:
          if ((SHIBYTE(v30[2]) & 0x80000000) == 0) {
            goto LABEL_56;
          }
          goto LABEL_66;
        }
LABEL_65:
        operator delete(v29.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v30[2]) & 0x80000000) == 0)
        {
LABEL_56:
          if ((v31[23] & 0x80000000) == 0) {
            goto LABEL_57;
          }
          goto LABEL_67;
        }
LABEL_66:
        operator delete(v30[0]);
        if ((v31[23] & 0x80000000) == 0)
        {
LABEL_57:
          if ((SBYTE7(v32[1]) & 0x80000000) == 0) {
            goto LABEL_58;
          }
          goto LABEL_68;
        }
LABEL_67:
        operator delete(*(void **)v31);
        if ((SBYTE7(v32[1]) & 0x80000000) == 0)
        {
LABEL_58:
          if ((SHIBYTE(v32[2]) & 0x80000000) == 0) {
            goto LABEL_59;
          }
          goto LABEL_69;
        }
LABEL_68:
        operator delete(*(void **)&v32[0]);
        if ((SHIBYTE(v32[2]) & 0x80000000) == 0)
        {
LABEL_59:
          MEMORY[0x1C87942E0](v33);
          if (!v14) {
            goto LABEL_22;
          }
LABEL_70:
          CFRelease(v14);
          goto LABEL_22;
        }
LABEL_69:
        operator delete(*((void **)&v32[1] + 1));
        MEMORY[0x1C87942E0](v33);
        if (v14) {
          goto LABEL_70;
        }
LABEL_22:
        ++v8;
      }
      while (Count != v8);
    }
  }
LABEL_71:
  if (v7) {
    CFRelease(v7);
  }
}

void sub_1C5A5132C(_Unwind_Exception *a1)
{
}

void sub_1C5A5134C(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_1C5A51370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a25 < 0)
  {
    operator delete(__p);
    if ((a50 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((a50 & 0x80000000) == 0)
  {
LABEL_6:
    if (a56 < 0) {
      operator delete(a51);
    }
    if (*(char *)(v56 - 193) < 0) {
      operator delete(*(void **)(v56 - 216));
    }
    if (*(char *)(v56 - 169) < 0) {
      operator delete(*(void **)(v56 - 192));
    }
    if (*(char *)(v56 - 145) < 0) {
      operator delete(*(void **)(v56 - 168));
    }
    MEMORY[0x1C87942E0](v56 - 144);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v56 - 128));
    ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v56 - 120));
    _Unwind_Resume(a1);
  }
  operator delete(a45);
  goto LABEL_6;
}

void **std::vector<ResetInfo>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    long long v3 = (void **)a1[1];
    uint64_t v4 = *a1;
    if (v3 == v2)
    {
LABEL_15:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if ((*((char *)v3 - 41) & 0x80000000) == 0)
        {
LABEL_7:
          if ((*((char *)v3 - 65) & 0x80000000) == 0) {
            goto LABEL_8;
          }
          goto LABEL_12;
        }
      }
      else if ((*((char *)v3 - 41) & 0x80000000) == 0)
      {
        goto LABEL_7;
      }
      operator delete(*(v3 - 8));
      if ((*((char *)v3 - 65) & 0x80000000) == 0)
      {
LABEL_8:
        if (*((char *)v3 - 89) < 0) {
          goto LABEL_13;
        }
        goto LABEL_4;
      }
LABEL_12:
      operator delete(*(v3 - 11));
      if (*((char *)v3 - 89) < 0) {
LABEL_13:
      }
        operator delete(*(v3 - 14));
LABEL_4:
      v3 -= 14;
      if (v3 == v2)
      {
        uint64_t v4 = *a1;
        goto LABEL_15;
      }
    }
  }
  return a1;
}

void sub_1C5A5168C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  uint64_t v9 = v4;
  size_t v6 = (void **)*v4;
  if (*v4)
  {
    size_t v7 = *(void ***)(v2 + 32);
    CFIndex v8 = *v4;
    if (v7 != v6)
    {
      do
        ResetInfo::~ResetInfo(v7 - 14);
      while (v7 != v6);
      CFIndex v8 = *v9;
    }
    *(void *)(v2 + 32) = v6;
    operator delete(v8);
  }
  MEMORY[0x1C8794100](v1);
  _Unwind_Resume(a1);
}

BOOL LogDumpDB::isDuplicated(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v32 = 0;
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string v31 = *(std::string *)(a2 + 24);
  }
  int v6 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v31.__r_.__value_.__l.__size_;
  }
  if (size != strlen((const char *)*MEMORY[0x1E4F4D138]))
  {
    BOOL v9 = 0;
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_16;
    }
LABEL_14:
    if (!v9) {
      goto LABEL_17;
    }
    return 0;
  }
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFIndex v8 = &v31;
  }
  else {
    CFIndex v8 = (std::string *)v31.__r_.__value_.__r.__words[0];
  }
  BOOL v9 = memcmp(v8, (const void *)*MEMORY[0x1E4F4D138], size) == 0;
  if ((v6 & 0x80000000) == 0) {
    goto LABEL_14;
  }
LABEL_16:
  operator delete(v31.__r_.__value_.__l.__data_);
  if (v9) {
    return 0;
  }
LABEL_17:
  int v11 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v31.__r_.__value_.__l.__data_) = 0;
    _os_log_debug_impl(&dword_1C59C6000, v11, OS_LOG_TYPE_DEBUG, "#D Checking if log dump is duplicated", (uint8_t *)&v31, 2u);
  }
  int v12 = *(const ResetInfo **)(a1 + 24);
  uint64_t v13 = *(const ResetInfo **)(a1 + 32);
  v22[0] = &v32;
  v22[1] = a1;
  ResetInfo::ResetInfo(&v23, (const ResetInfo *)a2);
  uint64_t v30 = a3;
  if (v12 != v13)
  {
    while (!LogDumpDB::isDuplicated(ResetInfo const&,std::chrono::duration<long long,std::ratio<1l,1l>>)::$_0::operator()((uint64_t)v22, v12))
    {
      int v12 = (const ResetInfo *)((char *)v12 + 112);
      if (v12 == v13)
      {
        int v12 = v13;
        goto LABEL_29;
      }
    }
    if (v12 != v13)
    {
      for (i = (char *)v12 + 112; i != (char *)v13; i += 112)
      {
        if (!LogDumpDB::isDuplicated(ResetInfo const&,std::chrono::duration<long long,std::ratio<1l,1l>>)::$_0::operator()((uint64_t)v22, (const ResetInfo *)i))
        {
          ResetInfo::operator=((char *)v12, i);
          int v12 = (const ResetInfo *)((char *)v12 + 112);
        }
      }
    }
  }
LABEL_29:
  if (v29 < 0)
  {
    operator delete(__p);
    if ((v27 & 0x80000000) == 0)
    {
LABEL_31:
      if ((v25 & 0x80000000) == 0) {
        goto LABEL_32;
      }
      goto LABEL_38;
    }
  }
  else if ((v27 & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(v26);
  if ((v25 & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v24);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_39:
    operator delete(v23.__r_.__value_.__l.__data_);
    CFTypeID v15 = *(const ResetInfo **)(a1 + 32);
    if (v12 == v15) {
      goto LABEL_34;
    }
    while (1)
    {
LABEL_42:
      if (v15 == v12)
      {
        *(void *)(a1 + 32) = v12;
        if (!v32) {
          goto LABEL_53;
        }
        goto LABEL_54;
      }
      if (*((char *)v15 - 1) < 0)
      {
        operator delete(*((void **)v15 - 3));
        if ((*((char *)v15 - 41) & 0x80000000) == 0)
        {
LABEL_45:
          if (*((char *)v15 - 65) < 0) {
            goto LABEL_50;
          }
          goto LABEL_46;
        }
      }
      else if ((*((char *)v15 - 41) & 0x80000000) == 0)
      {
        goto LABEL_45;
      }
      operator delete(*((void **)v15 - 8));
      if (*((char *)v15 - 65) < 0)
      {
LABEL_50:
        operator delete(*((void **)v15 - 11));
        if ((*((char *)v15 - 89) & 0x80000000) == 0) {
          goto LABEL_41;
        }
        goto LABEL_51;
      }
LABEL_46:
      if ((*((char *)v15 - 89) & 0x80000000) == 0) {
        goto LABEL_41;
      }
LABEL_51:
      operator delete(*((void **)v15 - 14));
LABEL_41:
      CFTypeID v15 = (const ResetInfo *)((char *)v15 - 112);
    }
  }
LABEL_33:
  CFTypeID v15 = *(const ResetInfo **)(a1 + 32);
  if (v12 != v15) {
    goto LABEL_42;
  }
LABEL_34:
  if (v32) {
    goto LABEL_54;
  }
LABEL_53:
  long long v16 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v31.__r_.__value_.__l.__data_) = 0;
    _os_log_debug_impl(&dword_1C59C6000, v16, OS_LOG_TYPE_DEBUG, "#D Not found duplicated log", (uint8_t *)&v31, 2u);
    int v12 = *(const ResetInfo **)(a1 + 32);
    if ((unint64_t)v12 < *(void *)(a1 + 40)) {
      goto LABEL_55;
    }
LABEL_57:
    uint64_t v17 = std::vector<ResetInfo>::__push_back_slow_path<ResetInfo const&>((void *)(a1 + 24), (const ResetInfo *)a2);
    goto LABEL_58;
  }
LABEL_54:
  if ((unint64_t)v12 >= *(void *)(a1 + 40)) {
    goto LABEL_57;
  }
LABEL_55:
  ResetInfo::ResetInfo((std::string *)v12, (const ResetInfo *)a2);
  uint64_t v17 = (char *)v12 + 112;
  *(void *)(a1 + 32) = (char *)v12 + 112;
LABEL_58:
  *(void *)(a1 + 32) = v17;
  uint64_t v18 = *(char **)(a1 + 24);
  if (0x6DB6DB6DB6DB6DB7 * ((v17 - v18) >> 4) <= (unint64_t)*(unsigned int *)(a1 + 16)) {
    goto LABEL_76;
  }
  if (v18 + 112 == v17)
  {
    uint64_t v19 = *(std::string::value_type **)(a1 + 24);
  }
  else
  {
    uint64_t v19 = *(std::string::value_type **)(a1 + 24);
    do
    {
      xpc_object_t v20 = v18 + 112;
      v19 += 112;
      std::string v21 = ResetInfo::operator=(v18, v18 + 112) + 224;
      uint64_t v18 = v20;
    }
    while (v21 != v17);
    uint64_t v17 = *(std::string::value_type **)(a1 + 32);
  }
  while (v17 != v19)
  {
    if (*(v17 - 1) < 0)
    {
      operator delete(*((void **)v17 - 3));
      if ((*(v17 - 41) & 0x80000000) == 0)
      {
LABEL_68:
        if (*(v17 - 65) < 0) {
          goto LABEL_73;
        }
        goto LABEL_69;
      }
    }
    else if ((*(v17 - 41) & 0x80000000) == 0)
    {
      goto LABEL_68;
    }
    operator delete(*((void **)v17 - 8));
    if (*(v17 - 65) < 0)
    {
LABEL_73:
      operator delete(*((void **)v17 - 11));
      if ((*(v17 - 89) & 0x80000000) == 0) {
        goto LABEL_64;
      }
      goto LABEL_74;
    }
LABEL_69:
    if ((*(v17 - 89) & 0x80000000) == 0) {
      goto LABEL_64;
    }
LABEL_74:
    operator delete(*((void **)v17 - 14));
LABEL_64:
    v17 -= 112;
  }
  *(void *)(a1 + 32) = v19;
LABEL_76:
  LogDumpDB::commitToDisk((LogDumpDB *)a1);
  return v32 != 0;
}

void sub_1C5A51B68(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

void sub_1C5A51B70(_Unwind_Exception *a1)
{
  ResetInfo::~ResetInfo(v1);
  _Unwind_Resume(a1);
}

void sub_1C5A51B84(_Unwind_Exception *a1)
{
  ResetInfo::~ResetInfo(v1);
  _Unwind_Resume(a1);
}

void LogDumpDB::commitToDisk(LogDumpDB *this)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  CFMutableArrayRef cf = 0;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  uint64_t v4 = Mutable;
  if (Mutable) {
    CFMutableArrayRef cf = Mutable;
  }
  int v6 = (long long *)*((void *)this + 3);
  xpc_object_t v5 = (long long *)*((void *)this + 4);
  long long v28 = this;
  if (v6 != v5)
  {
    std::string v31 = (const __CFString **)*MEMORY[0x1E4F4C4C8];
    uint64_t v30 = (const __CFString **)*MEMORY[0x1E4F4C690];
    char v29 = (const __CFString **)*MEMORY[0x1E4F4CA38];
    size_t v7 = (const __CFString **)*MEMORY[0x1E4F4CA98];
    CFIndex v8 = (const __CFString **)*MEMORY[0x1E4F4C8D8];
    do
    {
      BOOL v9 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t v10 = *((void *)v6 + 9);
      int v11 = operator new(0x38uLL);
      v11[8] = 0;
      *(void *)int v11 = 0;
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 2) = &v35.__r_.__value_.__l.__size_;
      v35.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
      v35.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
      *((unsigned char *)v11 + 24) = 1;
      v35.__r_.__value_.__r.__words[2] = 1;
      *((void *)v11 + 5) = v10;
      *((void *)v11 + 6) = 0xAAAAAAAA00000000;
      Timestamp::asString((uint64_t)&v35, 0, 9, &__p);
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v35, (void *)v35.__r_.__value_.__l.__size_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v35, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v35 = __p;
      }
      ctu::cf::insert<char const*,std::string>(v9, v31, (uint64_t)&v35, (uint64_t)v2, v12);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v35.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_11:
          if ((*((char *)v6 + 23) & 0x80000000) == 0) {
            goto LABEL_12;
          }
          goto LABEL_15;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_11;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((*((char *)v6 + 23) & 0x80000000) == 0)
      {
LABEL_12:
        long long v14 = *v6;
        __p.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v14;
        goto LABEL_16;
      }
LABEL_15:
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v6, *((void *)v6 + 1));
LABEL_16:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v35, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v35 = __p;
      }
      ctu::cf::insert<char const*,std::string>(v9, v30, (uint64_t)&v35, (uint64_t)v2, v13);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v35.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_21:
          if ((*((char *)v6 + 47) & 0x80000000) == 0) {
            goto LABEL_22;
          }
          goto LABEL_25;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_21;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((*((char *)v6 + 47) & 0x80000000) == 0)
      {
LABEL_22:
        long long v16 = *(long long *)((char *)v6 + 24);
        __p.__r_.__value_.__r.__words[2] = *((void *)v6 + 5);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v16;
        goto LABEL_26;
      }
LABEL_25:
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v6 + 3), *((void *)v6 + 4));
LABEL_26:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v35, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v35 = __p;
      }
      ctu::cf::insert<char const*,std::string>(v9, v29, (uint64_t)&v35, (uint64_t)v2, v15);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v35.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_31:
          if ((*((char *)v6 + 71) & 0x80000000) == 0) {
            goto LABEL_32;
          }
          goto LABEL_35;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_31;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((*((char *)v6 + 71) & 0x80000000) == 0)
      {
LABEL_32:
        long long v18 = v6[3];
        __p.__r_.__value_.__r.__words[2] = *((void *)v6 + 8);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v18;
        goto LABEL_36;
      }
LABEL_35:
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v6 + 6), *((void *)v6 + 7));
LABEL_36:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v35, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v35 = __p;
      }
      ctu::cf::insert<char const*,std::string>(v9, v7, (uint64_t)&v35, (uint64_t)v2, v17);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v35.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_41:
          if ((*((char *)v6 + 111) & 0x80000000) == 0) {
            goto LABEL_42;
          }
          goto LABEL_45;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_41;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((*((char *)v6 + 111) & 0x80000000) == 0)
      {
LABEL_42:
        long long v20 = *(long long *)((char *)v6 + 88);
        __p.__r_.__value_.__r.__words[2] = *((void *)v6 + 13);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
        goto LABEL_46;
      }
LABEL_45:
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v6 + 11), *((void *)v6 + 12));
LABEL_46:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v35, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v35 = __p;
      }
      ctu::cf::insert<char const*,std::string>(v9, v8, (uint64_t)&v35, (uint64_t)v2, v19);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v35.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_54:
        }
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_54;
      }
      CFArrayAppendValue(v4, v9);
      if (v9) {
        CFRelease(v9);
      }
      v6 += 7;
    }
    while (v6 != v5);
  }
  std::string v21 = *((void *)v28 + 1);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(v35.__r_.__value_.__l.__data_) = 138412290;
    *(std::string::size_type *)((char *)v35.__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
    _os_log_debug_impl(&dword_1C59C6000, v21, OS_LOG_TYPE_DEBUG, "#D Current tracking list: %@", (uint8_t *)&v35, 0xCu);
  }
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  std::string v22 = (os_unfair_lock_s *)off_1EBBDCA58;
  if (!off_1EBBDCA58)
  {
    SharedData::create_default_global(&v35);
    long long v23 = *(_OWORD *)&v35.__r_.__value_.__l.__data_;
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = 0uLL;
    long long v24 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
    off_1EBBDCA58 = v23;
    if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    size_t size = (std::__shared_weak_count *)v35.__r_.__value_.__l.__size_;
    if (v35.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v35.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
    std::string v22 = (os_unfair_lock_s *)off_1EBBDCA58;
  }
  long long v26 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
  if (*(&off_1EBBDCA58 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA58 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 16;
  strcpy((char *)&__p, "Log Dump History");
  CFMutableArrayRef v34 = cf;
  v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v35.__r_.__value_.__l.__size_ = (std::string::size_type)&v34;
  v35.__r_.__value_.__r.__words[2] = (std::string::size_type)v22;
  ctu::SharedLockable<SharedData>::execute_sync<BOOL SharedData::setPreference<__CFArray *>(std::string const&,__CFArray *)::{lambda(void)#1}>(v22 + 6, (uint64_t *)&v35);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    CFMutableArrayRef v27 = cf;
    if (!cf) {
      return;
    }
  }
  else
  {
    CFMutableArrayRef v27 = cf;
    if (!cf) {
      return;
    }
  }
  CFRelease(v27);
}

void sub_1C5A521DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
}

const char *LogDumpDB::getName(LogDumpDB *this)
{
  return "Log Dump History";
}

BOOL LogDumpDB::checkIfDuplicatedSignature(LogDumpDB *this, const ResetInfo *a2, const ResetInfo *a3)
{
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  if (*((char *)a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v94, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else {
    std::string v94 = *(std::string *)a3;
  }
  if (*((char *)a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v96, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else {
    std::string v96 = *(std::string *)a2;
  }
  int v6 = SHIBYTE(v96.__r_.__value_.__r.__words[2]);
  size_t v7 = (void *)v96.__r_.__value_.__r.__words[0];
  char v8 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v94.__r_.__value_.__l.__size_;
  }
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v10 = &v94;
  }
  else {
    uint64_t v10 = (std::string *)v94.__r_.__value_.__r.__words[0];
  }
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v11 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v11 = v96.__r_.__value_.__l.__size_;
  }
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFAllocatorRef v12 = &v96;
  }
  else {
    CFAllocatorRef v12 = (std::string *)v96.__r_.__value_.__r.__words[0];
  }
  if (v11 >= size) {
    size_t v13 = size;
  }
  else {
    size_t v13 = v11;
  }
  BOOL v14 = memcmp(v10, v12, v13) == 0;
  BOOL v15 = v11 == size && v14;
  if (v6 < 0)
  {
    operator delete(v7);
    if ((*((unsigned char *)&v94.__r_.__value_.__s + 23) & 0x80) == 0)
    {
LABEL_27:
      if (v15) {
        goto LABEL_28;
      }
LABEL_32:
      long long v16 = *((void *)this + 1);
      BOOL result = os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG);
      if (!result) {
        return result;
      }
      LOWORD(v94.__r_.__value_.__l.__data_) = 0;
      long long v18 = "#D Two reset types are not same. No need to check duplicated signature";
      goto LABEL_34;
    }
  }
  else if ((v8 & 0x80) == 0)
  {
    goto LABEL_27;
  }
  operator delete(v94.__r_.__value_.__l.__data_);
  if (!v15) {
    goto LABEL_32;
  }
LABEL_28:
  if (*((char *)a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v94, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else {
    std::string v94 = *(std::string *)a3;
  }
  size_t v19 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
  std::string::size_type v20 = v19;
  char v21 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v19 != -1)
    {
      std::string v22 = &v94;
      std::string::size_type v23 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
      goto LABEL_41;
    }
LABEL_254:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v19 == -1) {
    goto LABEL_254;
  }
  std::string::size_type v23 = v94.__r_.__value_.__l.__size_;
  std::string v22 = (std::string *)v94.__r_.__value_.__r.__words[0];
LABEL_41:
  if (v23 >= v20) {
    size_t v24 = v20;
  }
  else {
    size_t v24 = v23;
  }
  BOOL v25 = memcmp(v22, (const void *)*MEMORY[0x1E4F4C6E8], v24) == 0;
  BOOL v26 = v23 == v20 && v25;
  if ((v21 & 0x80) == 0)
  {
    if (v26) {
      goto LABEL_49;
    }
LABEL_53:
    if (*((char *)a2 + 71) < 0) {
      std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
    }
    else {
      std::string v94 = *(std::string *)((unsigned char *)a2 + 2);
    }
    long long v28 = (_OWORD *)((char *)a3 + 48);
    if (*((char *)a3 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(&v96, *((const std::string::value_type **)a3 + 6), *((void *)a3 + 7));
    }
    else
    {
      *(_OWORD *)&v96.__r_.__value_.__l.__data_ = *v28;
      v96.__r_.__value_.__r.__words[2] = *((void *)a3 + 8);
    }
    *(void *)std::string __dst = operator new(0x68uLL);
    *(_OWORD *)&__dst[8] = xmmword_1C5BC6200;
    strcpy(*(char **)__dst, "(Power assertion watchdog fired for 'com.apple.AppleBasebandManager.RadioNotReady.Bootup'; Timeout =).*");
    int v29 = util::compareTwoStringsWithPattern((uint64_t)&v94, (uint64_t)&v96, (uint64_t)__dst);
    if ((__dst[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__dst);
      if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_61:
        if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_62;
        }
        goto LABEL_121;
      }
    }
    else if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_61;
    }
    operator delete(v96.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_62:
      if (!v29) {
        return 0;
      }
      goto LABEL_122;
    }
LABEL_121:
    operator delete(v94.__r_.__value_.__l.__data_);
    if (!v29) {
      return 0;
    }
LABEL_122:
    dispatch_object_t v50 = *((void *)this + 1);
    if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG)) {
      return 1;
    }
    if (*((char *)a3 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 6), *((void *)a3 + 7));
    }
    else
    {
      *(_OWORD *)&v94.__r_.__value_.__l.__data_ = *v28;
      v94.__r_.__value_.__r.__words[2] = *((void *)a3 + 8);
    }
    uint64_t v91 = &v94;
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v91 = (std::string *)v94.__r_.__value_.__r.__words[0];
    }
    LODWORD(v96.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v96.__r_.__value_.__r.__words + 4) = (std::string::size_type)v91;
LABEL_244:
    _os_log_debug_impl(&dword_1C59C6000, v50, OS_LOG_TYPE_DEBUG, "#D This is duplicated signature based on the dump reason: \"%s\"", (uint8_t *)&v96, 0xCu);
    if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 1;
    }
    operator delete(v94.__r_.__value_.__l.__data_);
    return 1;
  }
  operator delete(v94.__r_.__value_.__l.__data_);
  if (!v26) {
    goto LABEL_53;
  }
LABEL_49:
  CFMutableArrayRef v27 = *((void *)this + 1);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a3 + 111) < 0) {
      std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 11), *((void *)a3 + 12));
    }
    else {
      std::string v94 = *(std::string *)((char *)a3 + 88);
    }
    int v75 = SHIBYTE(v94.__r_.__value_.__r.__words[2]);
    std::string::size_type v76 = v94.__r_.__value_.__r.__words[0];
    if (*((char *)a2 + 111) < 0) {
      std::string::__init_copy_ctor_external(&v96, *((const std::string::value_type **)a2 + 11), *((void *)a2 + 12));
    }
    else {
      std::string v96 = *(std::string *)((char *)a2 + 88);
    }
    xpc_object_t v77 = &v94;
    if (v75 < 0) {
      xpc_object_t v77 = (std::string *)v76;
    }
    uint64_t v78 = &v96;
    if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v78 = (std::string *)v96.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string __dst = 136315394;
    *(void *)&xpc_object_t __dst[4] = v77;
    *(_WORD *)&__dst[12] = 2080;
    *(void *)&__dst[14] = v78;
    _os_log_debug_impl(&dword_1C59C6000, v27, OS_LOG_TYPE_DEBUG, "#D Comparing current reason, \"%s\", and the recorded reason, \"%s\"", __dst, 0x16u);
    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v96.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v94.__r_.__value_.__l.__data_);
    }
  }
  if (*((char *)a3 + 111) < 0) {
    std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 11), *((void *)a3 + 12));
  }
  else {
    std::string v94 = *(std::string *)((char *)a3 + 88);
  }
  if (*((char *)a2 + 111) < 0) {
    std::string::__init_copy_ctor_external(&v96, *((const std::string::value_type **)a2 + 11), *((void *)a2 + 12));
  }
  else {
    std::string v96 = *(std::string *)((char *)a2 + 88);
  }
  int v30 = SHIBYTE(v96.__r_.__value_.__r.__words[2]);
  std::string v31 = (void *)v96.__r_.__value_.__r.__words[0];
  char v32 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v33 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v33 = v94.__r_.__value_.__l.__size_;
  }
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFMutableArrayRef v34 = &v94;
  }
  else {
    CFMutableArrayRef v34 = (std::string *)v94.__r_.__value_.__r.__words[0];
  }
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v35 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v35 = v96.__r_.__value_.__l.__size_;
  }
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v36 = &v96;
  }
  else {
    uint64_t v36 = (std::string *)v96.__r_.__value_.__r.__words[0];
  }
  if (v35 >= v33) {
    size_t v37 = v33;
  }
  else {
    size_t v37 = v35;
  }
  BOOL v38 = memcmp(v34, v36, v37) == 0;
  BOOL v39 = v35 == v33 && v38;
  if ((v30 & 0x80000000) == 0)
  {
    if ((v32 & 0x80) == 0) {
      goto LABEL_88;
    }
LABEL_116:
    operator delete(v94.__r_.__value_.__l.__data_);
    if (v39) {
      goto LABEL_89;
    }
    goto LABEL_117;
  }
  operator delete(v31);
  if ((*((unsigned char *)&v94.__r_.__value_.__s + 23) & 0x80) != 0) {
    goto LABEL_116;
  }
LABEL_88:
  if (!v39)
  {
LABEL_117:
    long long v16 = *((void *)this + 1);
    BOOL result = os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG);
    if (!result) {
      return result;
    }
    LOWORD(v94.__r_.__value_.__l.__data_) = 0;
    long long v18 = "#D Two crash reasons are not identical. No need to check duplicated signature";
LABEL_34:
    _os_log_debug_impl(&dword_1C59C6000, v16, OS_LOG_TYPE_DEBUG, v18, (uint8_t *)&v94, 2u);
    return 0;
  }
LABEL_89:
  uint64_t v40 = 0;
  xpc_object_t v41 = (_OWORD *)((char *)a3 + 48);
  do
  {
    if (*((char *)a2 + 71) < 0) {
      std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
    }
    else {
      std::string v94 = *(std::string *)((unsigned char *)a2 + 2);
    }
    if (*((char *)a3 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(&v96, *((const std::string::value_type **)a3 + 6), *((void *)a3 + 7));
    }
    else
    {
      *(_OWORD *)&v96.__r_.__value_.__l.__data_ = *v41;
      v96.__r_.__value_.__r.__words[2] = *((void *)a3 + 8);
    }
    uint64_t v42 = abm::kInterestingHardResetReasonSignatures[v40];
    size_t v43 = strlen(v42);
    if (v43 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v44 = v43;
    if (v43 >= 0x17)
    {
      uint64_t v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v43 | 7) != 0x17) {
        uint64_t v46 = v43 | 7;
      }
      uint64_t v47 = v46 + 1;
      uint64_t v45 = operator new(v46 + 1);
      *(void *)&__dst[8] = v44;
      *(void *)&__dst[16] = v47 | 0x8000000000000000;
      *(void *)std::string __dst = v45;
LABEL_103:
      memmove(v45, v42, v44);
      goto LABEL_104;
    }
    __dst[23] = v43;
    uint64_t v45 = __dst;
    if (v43) {
      goto LABEL_103;
    }
LABEL_104:
    v45[v44] = 0;
    int v48 = util::compareTwoStringsWithPattern((uint64_t)&v94, (uint64_t)&v96, (uint64_t)__dst);
    if ((__dst[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__dst);
      if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_106:
        if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_107;
        }
        goto LABEL_111;
      }
    }
    else if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_106;
    }
    operator delete(v96.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_107:
      if (v48) {
        goto LABEL_125;
      }
      goto LABEL_112;
    }
LABEL_111:
    operator delete(v94.__r_.__value_.__l.__data_);
    if (v48)
    {
LABEL_125:
      dispatch_object_t v50 = *((void *)this + 1);
      if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG)) {
        return 1;
      }
      if (*((char *)a3 + 71) < 0)
      {
        std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 6), *((void *)a3 + 7));
      }
      else
      {
        *(_OWORD *)&v94.__r_.__value_.__l.__data_ = *v41;
        v94.__r_.__value_.__r.__words[2] = *((void *)a3 + 8);
      }
      int v92 = &v94;
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v92 = (std::string *)v94.__r_.__value_.__r.__words[0];
      }
      LODWORD(v96.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v96.__r_.__value_.__r.__words + 4) = (std::string::size_type)v92;
      goto LABEL_244;
    }
LABEL_112:
    ++v40;
  }
  while (v40 != 8);
  if (*((char *)a3 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 11), *((void *)a3 + 12));
    uint64_t v49 = (std::string *)((char *)a3 + 88);
  }
  else
  {
    uint64_t v49 = (std::string *)((char *)a3 + 88);
    std::string v94 = *(std::string *)((char *)a3 + 88);
  }
  int v51 = SHIBYTE(v94.__r_.__value_.__r.__words[2]);
  CFAllocatorRef v52 = (void *)v94.__r_.__value_.__r.__words[0];
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v53 = &v94;
  }
  else {
    std::string::size_type v53 = (std::string *)v94.__r_.__value_.__r.__words[0];
  }
  int64_t v54 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int64_t v54 = v94.__r_.__value_.__l.__size_;
  }
  xpc_object_t v55 = (char *)v53 + v54;
  if (v54 >= 17)
  {
    uint64_t v58 = v53;
    unint64_t v57 = this;
    do
    {
      uint64_t v56 = (char *)memchr(v58, 67, v54 - 16);
      if (!v56) {
        break;
      }
      if (*(void *)v56 == 0x63206D6F74737543 && *((void *)v56 + 1) == 0x7079742068736172 && v56[16] == 101) {
        goto LABEL_146;
      }
      uint64_t v58 = (std::string *)(v56 + 1);
      int64_t v54 = v55 - (char *)v58;
    }
    while (v55 - (char *)v58 > 16);
    uint64_t v56 = v55;
  }
  else
  {
    uint64_t v56 = (char *)v53 + v54;
    unint64_t v57 = this;
  }
LABEL_146:
  BOOL v62 = v56 == v55 || v56 - (char *)v53 == -1;
  if (v51 < 0) {
    operator delete(v52);
  }
  if (v62)
  {
    if (*((char *)a3 + 111) < 0)
    {
      std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 11), *((void *)a3 + 12));
      uint64_t v49 = (std::string *)((char *)a3 + 88);
    }
    else
    {
      std::string v94 = *v49;
    }
    int v64 = SHIBYTE(v94.__r_.__value_.__r.__words[2]);
    unint64_t v65 = (void *)v94.__r_.__value_.__r.__words[0];
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v66 = &v94;
    }
    else {
      size_t v66 = (std::string *)v94.__r_.__value_.__r.__words[0];
    }
    int64_t v67 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int64_t v67 = v94.__r_.__value_.__l.__size_;
    }
    v68 = (char *)v66 + v67;
    if (v67 >= 18)
    {
      size_t v70 = v66;
      unint64_t v57 = this;
      do
      {
        v69 = (char *)memchr(v70, 67, v67 - 17);
        if (!v69) {
          break;
        }
        if (*(void *)v69 == 0x7274206873617243
          && *((void *)v69 + 1) == 0x2064657265676769
          && *((_WORD *)v69 + 8) == 31074)
        {
          goto LABEL_179;
        }
        size_t v70 = (std::string *)(v69 + 1);
        int64_t v67 = v68 - (char *)v70;
      }
      while (v68 - (char *)v70 >= 18);
      v69 = v68;
    }
    else
    {
      v69 = (char *)v66 + v67;
      unint64_t v57 = this;
    }
LABEL_179:
    BOOL v74 = v69 == v68 || v69 - (char *)v66 == -1;
    if (v64 < 0) {
      operator delete(v65);
    }
    if (v74)
    {
      if (*((char *)a3 + 111) < 0)
      {
        std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 11), *((void *)a3 + 12));
        uint64_t v49 = (std::string *)((char *)a3 + 88);
      }
      else
      {
        std::string v94 = *v49;
      }
      int v79 = SHIBYTE(v94.__r_.__value_.__r.__words[2]);
      int v80 = (void *)v94.__r_.__value_.__r.__words[0];
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v81 = &v94;
      }
      else {
        size_t v81 = (std::string *)v94.__r_.__value_.__r.__words[0];
      }
      int64_t v82 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int64_t v82 = v94.__r_.__value_.__l.__size_;
      }
      uint64_t v83 = (char *)v81 + v82;
      if (v82 >= 14)
      {
        int v85 = v81;
        unint64_t v57 = this;
        do
        {
          uint64_t v84 = (char *)memchr(v85, 67, v82 - 13);
          if (!v84) {
            break;
          }
          if (*(void *)v84 == 0x6E69206873617243 && *(void *)(v84 + 6) == 0x64657463656A6E69) {
            goto LABEL_219;
          }
          int v85 = (std::string *)(v84 + 1);
          int64_t v82 = v83 - (char *)v85;
        }
        while (v83 - (char *)v85 >= 14);
        uint64_t v84 = v83;
      }
      else
      {
        uint64_t v84 = (char *)v81 + v82;
        unint64_t v57 = this;
      }
LABEL_219:
      BOOL v88 = v84 == v83 || v84 - (char *)v81 == -1;
      if (v79 < 0) {
        operator delete(v80);
      }
      if (v88)
      {
        char v89 = *((void *)v57 + 1);
        if (os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v94.__r_.__value_.__l.__data_) = 0;
          _os_log_debug_impl(&dword_1C59C6000, v89, OS_LOG_TYPE_DEBUG, "#D The crash reason has duplicated signature", (uint8_t *)&v94, 2u);
        }
        return 1;
      }
      uint64_t v63 = "Crash injected";
    }
    else
    {
      uint64_t v63 = "Crash triggered by";
    }
  }
  else
  {
    uint64_t v63 = "Custom crash type";
  }
  uint64_t v90 = *((void *)v57 + 1);
  BOOL result = os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG);
  if (!result) {
    return result;
  }
  if (*((char *)a3 + 111) < 0) {
    std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 11), *((void *)a3 + 12));
  }
  else {
    std::string v94 = *v49;
  }
  uint64_t v93 = &v94;
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v93 = (std::string *)v94.__r_.__value_.__r.__words[0];
  }
  LODWORD(v96.__r_.__value_.__l.__data_) = 136315394;
  *(std::string::size_type *)((char *)v96.__r_.__value_.__r.__words + 4) = (std::string::size_type)v93;
  WORD2(v96.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&v96.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v63;
  _os_log_debug_impl(&dword_1C59C6000, v90, OS_LOG_TYPE_DEBUG, "#D This is NOT duplicated signature based on the crash reason: \"%s\" has \"%s\"", (uint8_t *)&v96, 0x16u);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v94.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_1C5A52E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void LogDumpDB::clearDB(LogDumpDB *this)
{
  CFTypeRef cf = 0;
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Mutable) {
    CFTypeRef cf = Mutable;
  }
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  long long v3 = (os_unfair_lock_s *)off_1EBBDCA58;
  if (!off_1EBBDCA58)
  {
    SharedData::create_default_global(buf);
    long long v4 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    xpc_object_t v5 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
    off_1EBBDCA58 = v4;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    int v6 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    long long v3 = (os_unfair_lock_s *)off_1EBBDCA58;
  }
  size_t v7 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
  if (*(&off_1EBBDCA58 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA58 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  char v12 = 16;
  strcpy(__p, "Log Dump History");
  CFTypeRef v16 = cf;
  *(void *)std::string buf = __p;
  *(void *)&uint8_t buf[8] = &v16;
  BOOL v15 = v3;
  ctu::SharedLockable<SharedData>::execute_sync<BOOL SharedData::setPreference<__CFArray *>(std::string const&,__CFArray *)::{lambda(void)#1}>(v3 + 6, (uint64_t *)buf);
  if (v12 < 0) {
    operator delete(*(void **)__p);
  }
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = *((void *)this + 3);
  for (uint64_t i = *((void *)this + 4); i != v8; i -= 112)
  {
    if (*(char *)(i - 1) < 0)
    {
      operator delete(*(void **)(i - 24));
      if ((*(char *)(i - 41) & 0x80000000) == 0)
      {
LABEL_23:
        if (*(char *)(i - 65) < 0) {
          goto LABEL_28;
        }
        goto LABEL_24;
      }
    }
    else if ((*(char *)(i - 41) & 0x80000000) == 0)
    {
      goto LABEL_23;
    }
    operator delete(*(void **)(i - 64));
    if (*(char *)(i - 65) < 0)
    {
LABEL_28:
      operator delete(*(void **)(i - 88));
      if ((*(char *)(i - 89) & 0x80000000) == 0) {
        continue;
      }
      goto LABEL_29;
    }
LABEL_24:
    if ((*(char *)(i - 89) & 0x80000000) == 0) {
      continue;
    }
LABEL_29:
    operator delete(*(void **)(i - 112));
  }
  *((void *)this + 4) = v8;
  uint64_t v10 = *((void *)this + 1);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_DEFAULT, "#I Log Dump DB is cleared", buf, 2u);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C5A531A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

std::string::value_type *std::vector<ResetInfo>::__push_back_slow_path<ResetInfo const&>(void *a1, const ResetInfo *a2)
{
  uint64_t v2 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[1] - *a1) >> 4);
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x249249249249249) {
    std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(a1[2] - *a1) >> 4) > v3) {
    unint64_t v3 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(a1[2] - *a1) >> 4);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[2] - *a1) >> 4)) >= 0x124924924924924) {
    unint64_t v6 = 0x249249249249249;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0x249249249249249) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    size_t v7 = (char *)operator new(112 * v6);
  }
  else
  {
    size_t v7 = 0;
  }
  BOOL v15 = (std::string *)&v7[112 * v2];
  *((void *)&v16 + 1) = &v7[112 * v6];
  ResetInfo::ResetInfo(v15, a2);
  uint64_t v8 = 0;
  uint64_t v10 = (void **)*a1;
  for (uint64_t i = a1[1];
        (void **)(i + v8) != v10;
        ResetInfo::ResetInfo((std::string *)((char *)v15 + v8), (const ResetInfo *)(v8 + i)))
  {
    v8 -= 112;
  }
  std::string::size_type v11 = (char *)v15 + v8;
  char v12 = (void **)*a1;
  size_t v13 = (void **)a1[1];
  *a1 = v11;
  *(void *)&long long v16 = (char *)v15 + 112;
  *(_OWORD *)(a1 + 1) = v16;
  while (v13 != v12)
  {
    if (*((char *)v13 - 1) < 0)
    {
      operator delete(*(v13 - 3));
      if ((*((char *)v13 - 41) & 0x80000000) == 0)
      {
LABEL_19:
        if (*((char *)v13 - 65) < 0) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
    }
    else if ((*((char *)v13 - 41) & 0x80000000) == 0)
    {
      goto LABEL_19;
    }
    operator delete(*(v13 - 8));
    if (*((char *)v13 - 65) < 0)
    {
LABEL_24:
      operator delete(*(v13 - 11));
      if ((*((char *)v13 - 89) & 0x80000000) == 0) {
        goto LABEL_15;
      }
      goto LABEL_25;
    }
LABEL_20:
    if ((*((char *)v13 - 89) & 0x80000000) == 0) {
      goto LABEL_15;
    }
LABEL_25:
    operator delete(*(v13 - 14));
LABEL_15:
    v13 -= 14;
  }
  if (v12) {
    operator delete(v12);
  }
  return &v15[4].__r_.__value_.__s.__data_[16];
}

void sub_1C5A533A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__split_buffer<ResetInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<ResetInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 112;
    if (*(char *)(i - 1) < 0)
    {
      operator delete(*(void **)(i - 24));
      if ((*(char *)(i - 41) & 0x80000000) == 0)
      {
LABEL_6:
        if (*(char *)(i - 65) < 0) {
          goto LABEL_11;
        }
        goto LABEL_7;
      }
    }
    else if ((*(char *)(i - 41) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(*(void **)(i - 64));
    if (*(char *)(i - 65) < 0)
    {
LABEL_11:
      operator delete(*(void **)(i - 88));
      if ((*(char *)(i - 89) & 0x80000000) == 0) {
        continue;
      }
      goto LABEL_12;
    }
LABEL_7:
    if ((*(char *)(i - 89) & 0x80000000) == 0) {
      continue;
    }
LABEL_12:
    operator delete(*(void **)(i - 112));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

BOOL LogDumpDB::isDuplicated(ResetInfo const&,std::chrono::duration<long long,std::ratio<1l,1l>>)::$_0::operator()(uint64_t a1, const ResetInfo *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  long long v4 = *(LogDumpDB **)(a1 + 8);
  BOOL v5 = LogDumpDB::checkIfDuplicatedSignature(v4, a2, (const ResetInfo *)(a1 + 16));
  if (v5)
  {
    uint64_t v6 = *((void *)a2 + 9);
    if (*(void *)(a1 + 88) - v6 < *(void *)(a1 + 128))
    {
      size_t v7 = *((void *)v4 + 1);
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
LABEL_23:
        **(unsigned char **)a1 = 1;
        return v5;
      }
      uint64_t v8 = operator new(0x38uLL);
      v8[8] = 0;
      *(void *)uint64_t v8 = 0;
      *((void *)v8 + 1) = 0;
      *((void *)v8 + 2) = &v24.__r_.__value_.__l.__size_;
      v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
      v24.__r_.__value_.__l.__size_ = (std::string::size_type)v8;
      *((unsigned char *)v8 + 24) = 1;
      v24.__r_.__value_.__r.__words[2] = 1;
      *((void *)v8 + 5) = v6;
      *((void *)v8 + 6) = 0xAAAAAAAA00000000;
      BOOL v9 = v22;
      Timestamp::asString((uint64_t)&v24, 0, 9, v22);
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v24, (void *)v24.__r_.__value_.__l.__size_);
      if (v23 < 0) {
        BOOL v9 = (void **)v22[0];
      }
      uint64_t v10 = *(void *)(a1 + 88);
      std::string::size_type v11 = operator new(0x38uLL);
      v11[8] = 0;
      *(void *)std::string::size_type v11 = 0;
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 2) = &v24.__r_.__value_.__l.__size_;
      v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
      v24.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
      *((unsigned char *)v11 + 24) = 1;
      v24.__r_.__value_.__r.__words[2] = 1;
      *((void *)v11 + 5) = v10;
      *((void *)v11 + 6) = 0xAAAAAAAA00000000;
      Timestamp::asString((uint64_t)&v24, 0, 9, v20);
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v24, (void *)v24.__r_.__value_.__l.__size_);
      if (v21 >= 0) {
        char v12 = v20;
      }
      else {
        char v12 = (void **)v20[0];
      }
      uint64_t v13 = *(void *)(a1 + 88);
      if (*(char *)(a1 + 87) < 0) {
        std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)(a1 + 64), *(void *)(a1 + 72));
      }
      else {
        std::string v24 = *(std::string *)(a1 + 64);
      }
      int v14 = SHIBYTE(v24.__r_.__value_.__r.__words[2]);
      std::string::size_type v15 = v24.__r_.__value_.__r.__words[0];
      if (*(char *)(a1 + 127) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 104), *(void *)(a1 + 112));
      }
      else {
        std::string __p = *(std::string *)(a1 + 104);
      }
      long long v16 = &v24;
      if (v14 < 0) {
        long long v16 = (std::string *)v15;
      }
      p_p = &__p;
      *(_DWORD *)std::string buf = 136316418;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      BOOL v26 = v9;
      __int16 v27 = 2050;
      uint64_t v28 = v6;
      __int16 v29 = 2080;
      int v30 = v12;
      __int16 v31 = 2050;
      uint64_t v32 = v13;
      __int16 v33 = 2082;
      CFMutableArrayRef v34 = v16;
      __int16 v35 = 2082;
      uint64_t v36 = p_p;
      _os_log_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_DEFAULT, "#I Found duplicated log at timestamp: %s[%{public}llu], new log timestamp: %s[%{public}llu], dump reason: %{public}s, crash reason: %{public}s", buf, 0x3Eu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_21:
          if ((v21 & 0x80000000) == 0) {
            goto LABEL_22;
          }
          goto LABEL_27;
        }
      }
      else if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_21;
      }
      operator delete(v24.__r_.__value_.__l.__data_);
      if ((v21 & 0x80000000) == 0)
      {
LABEL_22:
        if ((v23 & 0x80000000) == 0) {
          goto LABEL_23;
        }
LABEL_28:
        operator delete(v22[0]);
        goto LABEL_23;
      }
LABEL_27:
      operator delete(v20[0]);
      if ((v23 & 0x80000000) == 0) {
        goto LABEL_23;
      }
      goto LABEL_28;
    }
  }
  return v5;
}

void sub_1C5A5378C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a18 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a24 & 0x80000000) == 0) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(a19);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a18 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a13);
  if ((a24 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

char *ResetInfo::operator=(char *a1, char *a2)
{
  if (a1 == a2) {
    return a1;
  }
  unint64_t v3 = a2;
  if ((a1[23] & 0x80000000) == 0)
  {
    if (a2[23] < 0)
    {
      std::string::__assign_no_alias<true>(a1, *(void **)a2, *((void *)a2 + 1));
      BOOL v5 = (void **)(a1 + 24);
      uint64_t v6 = v3 + 24;
      size_t v7 = v3[47];
      if (a1[47] < 0) {
        goto LABEL_14;
      }
    }
    else
    {
      long long v4 = *(_OWORD *)a2;
      *((void *)a1 + 2) = *((void *)a2 + 2);
      *(_OWORD *)a1 = v4;
      BOOL v5 = (void **)(a1 + 24);
      uint64_t v6 = a2 + 24;
      size_t v7 = a2[47];
      if (a1[47] < 0) {
        goto LABEL_14;
      }
    }
LABEL_10:
    if ((v7 & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v5, *((void **)v3 + 3), *((void *)v3 + 4));
      uint64_t v10 = (void **)(a1 + 48);
      std::string::size_type v11 = v3 + 48;
      size_t v12 = v3[71];
      if (a1[71] < 0) {
        goto LABEL_24;
      }
    }
    else
    {
      long long v9 = *(_OWORD *)v6;
      _DWORD v5[2] = (void *)*((void *)v6 + 2);
      *(_OWORD *)BOOL v5 = v9;
      uint64_t v10 = (void **)(a1 + 48);
      std::string::size_type v11 = v3 + 48;
      size_t v12 = v3[71];
      if (a1[71] < 0) {
        goto LABEL_24;
      }
    }
LABEL_21:
    if ((v12 & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v10, *((void **)v3 + 6), *((void *)v3 + 7));
    }
    else
    {
      long long v15 = *(_OWORD *)v11;
      v10[2] = (void *)v11[2];
      *(_OWORD *)uint64_t v10 = v15;
    }
    goto LABEL_32;
  }
  if (a2[23] >= 0)
  {
    size_t v8 = a2[23];
  }
  else
  {
    a2 = *(char **)a2;
    size_t v8 = *((void *)v3 + 1);
  }
  std::string::__assign_no_alias<false>((void **)a1, a2, v8);
  BOOL v5 = (void **)(a1 + 24);
  uint64_t v6 = v3 + 24;
  size_t v7 = v3[47];
  if ((a1[47] & 0x80000000) == 0) {
    goto LABEL_10;
  }
LABEL_14:
  if ((v7 & 0x80u) == 0) {
    uint64_t v13 = v6;
  }
  else {
    uint64_t v13 = (void *)*((void *)v3 + 3);
  }
  if ((v7 & 0x80u) == 0) {
    size_t v14 = v7;
  }
  else {
    size_t v14 = *((void *)v3 + 4);
  }
  std::string::__assign_no_alias<false>(v5, v13, v14);
  uint64_t v10 = (void **)(a1 + 48);
  std::string::size_type v11 = v3 + 48;
  size_t v12 = v3[71];
  if ((a1[71] & 0x80000000) == 0) {
    goto LABEL_21;
  }
LABEL_24:
  if ((v12 & 0x80u) == 0) {
    long long v16 = v11;
  }
  else {
    long long v16 = (void *)*((void *)v3 + 6);
  }
  if ((v12 & 0x80u) == 0) {
    size_t v17 = v12;
  }
  else {
    size_t v17 = *((void *)v3 + 7);
  }
  std::string::__assign_no_alias<false>(v10, v16, v17);
LABEL_32:
  uint64_t v18 = *((void *)v3 + 9);
  *((_DWORD *)a1 + 20) = *((_DWORD *)v3 + 20);
  *((void *)a1 + 9) = v18;
  size_t v19 = (void **)(a1 + 88);
  char v20 = v3[111];
  if (a1[111] < 0)
  {
    if (v20 >= 0) {
      char v23 = v3 + 88;
    }
    else {
      char v23 = (void *)*((void *)v3 + 11);
    }
    if (v20 >= 0) {
      size_t v24 = v3[111];
    }
    else {
      size_t v24 = *((void *)v3 + 12);
    }
    std::string::__assign_no_alias<false>(v19, v23, v24);
    return a1;
  }
  else
  {
    if ((v3[111] & 0x80) == 0)
    {
      long long v21 = *(_OWORD *)(v3 + 88);
      *((void *)a1 + 13) = *((void *)v3 + 13);
      *(_OWORD *)size_t v19 = v21;
      return a1;
    }
    std::string::__assign_no_alias<true>(v19, *((void **)v3 + 11), *((void *)v3 + 12));
    return a1;
  }
}

void ResetInfo::ResetInfo(std::string *this, const ResetInfo *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    BOOL v5 = this + 1;
    if ((*((char *)a2 + 47) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    BOOL v5 = this + 1;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      long long v6 = *(_OWORD *)((char *)a2 + 24);
      v5->__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
LABEL_6:
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v7;
  }
  std::string::size_type v8 = *((void *)a2 + 9);
  LODWORD(this[3].__r_.__value_.__r.__words[1]) = *((_DWORD *)a2 + 20);
  this[3].__r_.__value_.__r.__words[0] = v8;
  long long v9 = (std::string *)((char *)this + 88);
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 11), *((void *)a2 + 12));
  }
  else
  {
    long long v10 = *(_OWORD *)((char *)a2 + 88);
    this[4].__r_.__value_.__l.__size_ = *((void *)a2 + 13);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
}

void sub_1C5A53B1C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

BOOL Preferences::getPreference<__CFArray const*>(uint64_t (***a1)(void, uint64_t), const char *a2, void *a3)
{
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v11, a2);
  BOOL v5 = (const void *)(**a1)(a1, v11);
  long long v6 = v5;
  if (v5)
  {
    CFTypeID v7 = CFGetTypeID(v5);
    BOOL v8 = v7 == CFArrayGetTypeID();
    BOOL v9 = v8;
    if (v8) {
      *a3 = v6;
    }
    CFRelease(v6);
  }
  else
  {
    BOOL v9 = 0;
  }
  MEMORY[0x1C8794290](&v11);
  return v9;
}

BOOL ctu::SharedLockable<SharedData>::execute_sync<BOOL SharedData::setPreference<__CFArray *>(std::string const&,__CFArray *)::{lambda(void)#1}>(os_unfair_lock_s *a1, uint64_t *a2)
{
  unint64_t v3 = a1 + 4;
  os_unfair_lock_lock(a1 + 4);
  uint64_t v4 = a2[2];
  uint64_t v5 = *a2;
  long long v6 = *(const void **)a2[1];
  if (*(char *)(v5 + 23) >= 0) {
    CFTypeID v7 = (const char *)v5;
  }
  else {
    CFTypeID v7 = *(const char **)v5;
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v10, v7);
  BOOL v8 = ctu::cf::plist_adapter::set<__CFArray *>(v4, v6, v10, 1);
  MEMORY[0x1C8794290](&v10);
  os_unfair_lock_unlock(v3);
  return v8;
}

BOOL ctu::cf::plist_adapter::set<__CFArray *>(uint64_t a1, CFTypeRef cf, const __CFString *a3, int a4)
{
  if (!cf) {
    return 0;
  }
  CFRetain(cf);
  CFStringRef v8 = (const __CFString *)*MEMORY[0x1E4F1D3E0];
  CFPreferencesSetValue(a3, cf, *(CFStringRef *)(a1 + 8), *(CFStringRef *)(a1 + 16), (CFStringRef)*MEMORY[0x1E4F1D3E0]);
  if (a4) {
    BOOL v9 = CFPreferencesSynchronize(*(CFStringRef *)(a1 + 8), *(CFStringRef *)(a1 + 16), v8) != 0;
  }
  else {
    BOOL v9 = 1;
  }
  CFRelease(cf);
  return v9;
}

void sub_1C5A53DC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_1()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

void abm::debug::registerLogServer(uint64_t a1)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN3abm5debugL14sLogServerInitERNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_5;
  block[4] = a1;
  if (abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce != -1) {
    dispatch_once(&abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
  }
}

void ___ZN3abm5debugL14sLogServerInitERNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  ctu::LogServer::getConfig((uint64_t *)&xdict, **(ctu::LogServer ***)(a1 + 32));
  v26[0] = &xdict;
  v26[1] = "kDomainLogLevels";
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc::dict::object_proxy::operator xpc::dict((uint64_t)v26, &object);
  uint64_t v2 = MEMORY[0x1C8795EB0](object);
  uint64_t v3 = MEMORY[0x1E4F14590];
  if (v2 != MEMORY[0x1E4F14590])
  {
    xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
    if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C8795EB0](v4) == v3)
      {
        xpc_retain(v4);
        xpc_object_t v5 = v4;
      }
      else
      {
        xpc_object_t v5 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
    }
    xpc_release(v4);
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v7 = object;
    xpc_object_t object = v5;
    xpc_release(v7);
    xpc_release(v6);
  }
  xpc_object_t v8 = xpc_int64_create(1);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(object, "libetl", v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  xpc_object_t v10 = xpc_int64_create(1);
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(object, "libtu", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  xpc_object_t v12 = xpc_int64_create(1);
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_dictionary_set_value(object, "trace.diag.cfg", v12);
  xpc_object_t v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  xpc_object_t v14 = xpc_int64_create(1);
  if (!v14) {
    xpc_object_t v14 = xpc_null_create();
  }
  xpc_dictionary_set_value(object, "trace.diag.svc", v14);
  xpc_object_t v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  xpc_object_t v16 = xpc_int64_create(1);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_dictionary_set_value(object, "libktl", v16);
  xpc_object_t v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  xpc_object_t v18 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kDomainLogLevels", v18);
  xpc_object_t v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  xpc_object_t v25 = xdict;
  if (xdict) {
    xpc_retain(xdict);
  }
  else {
    xpc_object_t v25 = xpc_null_create();
  }
  ctu::LogServer::updateConfig();
  xpc_release(v25);
  char v20 = (capabilities::abs *)operator new(0x10uLL);
  long long v21 = *(void **)(a1 + 32);
  *(void *)char v20 = *v21;
  uint64_t v22 = v21[1];
  *((void *)v20 + 1) = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 16), 1uLL, memory_order_relaxed);
  }
  _MergedGlobals_0 = (uint64_t)v20;
  if (!qword_1EBBDCCC0)
  {
    char v20 = (capabilities::abs *)os_log_create("com.apple.telephony.abm", "libtu");
    qword_1EBBDCCC0 = (uint64_t)v20;
  }
  capabilities::abs::TUDebugFlags(v20);
  TelephonyUtilDebugSetFlags();
  char v23 = (capabilities::radio *)TelephonyUtilDebugRegisterDelegate();
  size_t v24 = (capabilities::radio *)capabilities::radio::ice(v23);
  if (v24)
  {
    if (!qword_1EBBDCCC8) {
      qword_1EBBDCCC8 = (uint64_t)os_log_create("com.apple.telephony.abm", "libktl");
    }
    KTLDebugRegisterDelegate();
    KTLDebugSetFlags();
  }
  else
  {
    capabilities::radio::maverick(v24);
  }
  if (!qword_1EBBDCCD0) {
    qword_1EBBDCCD0 = (uint64_t)os_log_create("com.apple.telephony.abm", "bbu");
  }
  BBUpdaterRegisterGlobalLogSink();
  xpc_release(object);
  xpc_release(xdict);
}

void sub_1C5A542BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, xpc_object_t a13, xpc_object_t a14)
{
}

void abm::debug::handleDebugPrintTelephonyUtil(abm::debug *this, const char *a2, const char *a3, char *a4)
{
}

void abm::debug::handleDebugPrintBinaryTelephonyUtil(uint64_t a1, int a2, uint64_t a3, int a4)
{
  xpc_object_t v6 = "misc";
  if (!a2) {
    xpc_object_t v6 = "send";
  }
  if (a2 == 1) {
    xpc_object_t v7 = "recv";
  }
  else {
    xpc_object_t v7 = v6;
  }
  abm::debug::handleDebugPrintBinary(a1, 0, (uint64_t)v7, a3, a4);
}

void abm::debug::handleDebugPrintKTL(abm::debug *this, const char *a2, const char *a3, char *a4)
{
}

void abm::debug::handleErrorPrintKTL(abm::debug *this, const char *a2, const char *a3, char *a4)
{
}

void abm::debug::handleDebugPrintBinaryKTL(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  if (a2 > 3) {
    xpc_object_t v6 = "";
  }
  else {
    xpc_object_t v6 = off_1E651B3F8[a2];
  }
  abm::debug::handleDebugPrintBinary(a1, 2, (uint64_t)v6, a3, a4);
}

void std::__shared_ptr_pointer<ctu::LogMessage *,std::shared_ptr<ctu::LogMessage>::__shared_ptr_default_delete<ctu::LogMessage,ctu::LogMessage>,std::allocator<ctu::LogMessage>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<ctu::LogMessage *,std::shared_ptr<ctu::LogMessage>::__shared_ptr_default_delete<ctu::LogMessage,ctu::LogMessage>,std::allocator<ctu::LogMessage>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<ctu::LogMessage *,std::shared_ptr<ctu::LogMessage>::__shared_ptr_default_delete<ctu::LogMessage,ctu::LogMessage>,std::allocator<ctu::LogMessage>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C5BC630BLL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C5BC630BLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C5BC630BLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C5BC630BLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::string::__erase_external_with_move(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  if (!__n) {
    return;
  }
  int v4 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if (v4 < 0)
  {
    xpc_object_t v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    std::string::size_type v7 = size - __pos;
    if (size - __pos >= __n) {
      std::string::size_type v8 = __n;
    }
    else {
      std::string::size_type v8 = size - __pos;
    }
    if (size - __pos <= __n) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    xpc_object_t v6 = this;
    std::string::size_type v7 = size - __pos;
    if (size - __pos >= __n) {
      std::string::size_type v8 = __n;
    }
    else {
      std::string::size_type v8 = HIBYTE(this->__r_.__value_.__r.__words[2]) - __pos;
    }
    if (v7 <= __n) {
      goto LABEL_8;
    }
  }
  memmove((char *)v6 + __pos, (char *)v6 + __pos + v8, v7 - v8);
  LOBYTE(v4) = *((unsigned char *)&this->__r_.__value_.__s + 23);
LABEL_8:
  std::string::size_type v9 = size - v8;
  if ((v4 & 0x80) != 0) {
    this->__r_.__value_.__l.__size_ = v9;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = v9 & 0x7F;
  }
  v6->__r_.__value_.__s.__data_[v9] = 0;
}

void abm::debug::handleDebugPrintBinary(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  xpc_object_t v5 = (void *)_MergedGlobals_0;
  if (!_MergedGlobals_0) {
    return;
  }
  std::string::size_type v7 = *(std::__shared_weak_count **)(_MergedGlobals_0 + 8);
  if (!v7) {
    return;
  }
  xpc_object_t v11 = std::__shared_weak_count::lock(v7);
  BOOL v39 = v11;
  if (!v11) {
    return;
  }
  if (!*v5)
  {
    char v23 = v11;
LABEL_34:
    if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    return;
  }
  unint64_t v37 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v36[1] = v12;
  v36[2] = v12;
  v36[0] = v12;
  ctu::LogMessageBuffer::LogMessageBuffer((ctu::LogMessageBuffer *)v36);
  uint64_t v13 = MEMORY[0x1C87947E0](v36, a1);
  MEMORY[0x1C87947E0](v13, " (");
  uint64_t v14 = ctu::operator<<();
  uint64_t v15 = MEMORY[0x1C87947E0](v14, ") ");
  uint64_t v16 = MEMORY[0x1C87947E0](v15, a3);
  MEMORY[0x1C87947E0](v16, "\n");
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v35 = 0xAAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAAAAAAAAAA00;
  ctu::assign();
  xpc_object_t v17 = (ctu::Clock *)MEMORY[0x1C87947F0](v36, __p);
  ctu::Clock::now_in_nanoseconds(v17);
  xpc_object_t v18 = (std::__shared_weak_count_vtbl *)operator new(0x60uLL);
  xpc_object_t v19 = abm::debug::kLogDomainMap[a2];
  size_t v20 = strlen(v19);
  if (v20 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  long long v21 = (void *)v20;
  if (v20 >= 0x17)
  {
    uint64_t v24 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17) {
      uint64_t v24 = v20 | 7;
    }
    uint64_t v25 = v24 + 1;
    uint64_t v22 = (void **)operator new(v24 + 1);
    __dst[1] = v21;
    unint64_t v31 = v25 | 0x8000000000000000;
    __dst[0] = v22;
    goto LABEL_13;
  }
  HIBYTE(v31) = v20;
  uint64_t v22 = __dst;
  if (v20) {
LABEL_13:
  }
    memmove(v22, v19, (size_t)v21);
  *((unsigned char *)v21 + (void)v22) = 0;
  MEMORY[0x1C87941B0](v36);
  ctu::LogMessageBuffer::takeMetadata((ctu::LogMessageBuffer *)v36);
  ctu::LogMessage::LogMessage();
  uint64_t v32 = v18;
  BOOL v26 = (std::__shared_weak_count *)operator new(0x20uLL);
  v26->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2106688;
  v26->__shared_owners_ = 0;
  v26->__shared_weak_owners_ = 0;
  v26[1].__vftable = v18;
  __int16 v33 = v26;
  if (SHIBYTE(v31) < 0) {
    operator delete(__dst[0]);
  }
  atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  ctu::LogServer::log();
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  if (a2)
  {
    if (a2 == 2)
    {
      __int16 v27 = qword_1EBBDCCC8;
      if (qword_1EBBDCCC8)
      {
        if (os_log_type_enabled((os_log_t)qword_1EBBDCCC8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v28 = __p;
          if (v35 < 0) {
            uint64_t v28 = (void **)__p[0];
          }
          goto LABEL_39;
        }
      }
    }
  }
  else
  {
    __int16 v27 = qword_1EBBDCCC0;
    if (qword_1EBBDCCC0 && os_log_type_enabled((os_log_t)qword_1EBBDCCC0, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v28 = __p;
      if (v35 < 0) {
        uint64_t v28 = (void **)__p[0];
      }
LABEL_39:
      *(_DWORD *)std::string buf = 67109634;
      int v41 = a5;
      __int16 v42 = 2080;
      uint64_t v43 = a3;
      __int16 v44 = 2080;
      uint64_t v45 = v28;
      _os_log_debug_impl(&dword_1C59C6000, v27, OS_LOG_TYPE_DEBUG, "(%d) %s: %s", buf, 0x1Cu);
      __int16 v29 = v33;
      if (!v33) {
        goto LABEL_31;
      }
      goto LABEL_29;
    }
  }
  __int16 v29 = v33;
  if (!v33) {
    goto LABEL_31;
  }
LABEL_29:
  if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
LABEL_31:
  if (SHIBYTE(v35) < 0) {
    operator delete(__p[0]);
  }
  MEMORY[0x1C87941F0](v36);
  char v23 = v39;
  if (v39) {
    goto LABEL_34;
  }
}

void sub_1C5A54A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a24 < 0)
  {
    operator delete(__p);
    MEMORY[0x1C87941F0](&a25);
    std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
    _Unwind_Resume(a1);
  }
  MEMORY[0x1C87941F0](&a25);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void abm::debug::handleDebugPrintBBUHelper(abm::debug *this, void *a2, uint64_t a3, const char *a4, ...)
{
  va_start(va, a4);
  abm::debug::handleDebugPrint(20, 3, "", (uint64_t)"%s", (uint64_t)va);
}

void coex::XpcClient::create(uint64_t a1@<X0>, void *a2@<X8>)
{
  memset(&__p, 170, sizeof(__p));
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (!size) {
      goto LABEL_9;
    }
  }
  else
  {
    std::string __p = *(std::string *)a1;
    std::string::size_type v3 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v3 = __p.__r_.__value_.__l.__size_;
    }
    if (!v3) {
LABEL_9:
    }
      std::string::__assign_external(&__p, "com.apple.WirelessCoexManager", 0x1DuLL);
  }
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v5 = operator new(0x80uLL);
  coex::XpcClient::XpcClient((uint64_t)v5, (long long *)&__p);
  std::shared_ptr<coex::XpcClient>::shared_ptr[abi:ne180100]<coex::XpcClient,std::shared_ptr<coex::XpcClient> ctu::SharedSynchronizable<ctu::XpcClient>::make_shared_ptr<coex::XpcClient>(coex::XpcClient*)::{lambda(coex::XpcClient*)#1},void>(a2, (uint64_t)v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5A54C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  operator delete(v14);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t coex::XpcClient::XpcClient(uint64_t a1, long long *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  char v10 = 8;
  strcpy((char *)__p, "coex.xpc");
  ctu::XpcClient::XpcClient();
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "coex.xpc");
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 72), (const ctu::OsLogLogger *)&v8);
  MEMORY[0x1C8794100](&v8);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
  *(void *)a1 = &unk_1F21066D8;
  int v4 = (_OWORD *)(a1 + 80);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 80), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(a1 + 96) = *((void *)a2 + 2);
    _OWORD *v4 = v5;
  }
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = a1 + 112;
  xpc_object_t v6 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a1 + 103) < 0) {
      int v4 = *(_OWORD **)v4;
    }
    *(_DWORD *)std::string buf = 136315138;
    long long v12 = v4;
    _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#I Created with name %s", buf, 0xCu);
  }
  return a1;
}

void coex::XpcClient::~XpcClient(coex::XpcClient *this)
{
  *(void *)this = &unk_1F21066D8;
  std::__tree<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::__map_value_compare<WCMSendMessageId,std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::less<WCMSendMessageId>,true>,std::allocator<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>>>::destroy(*((void **)this + 14));
  if (*((char *)this + 103) < 0) {
    operator delete(*((void **)this + 10));
  }
  MEMORY[0x1C8794100]((char *)this + 72);

  ctu::XpcClient::~XpcClient(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F21066D8;
  std::__tree<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::__map_value_compare<WCMSendMessageId,std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::less<WCMSendMessageId>,true>,std::allocator<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>>>::destroy(*((void **)this + 14));
  if (*((char *)this + 103) < 0) {
    operator delete(*((void **)this + 10));
  }
  MEMORY[0x1C8794100]((char *)this + 72);

  ctu::XpcClient::~XpcClient(this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F21066D8;
  std::__tree<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::__map_value_compare<WCMSendMessageId,std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::less<WCMSendMessageId>,true>,std::allocator<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>>>::destroy(*((void **)this + 14));
  if (*((char *)this + 103) < 0) {
    operator delete(*((void **)this + 10));
  }
  MEMORY[0x1C8794100]((char *)this + 72);
  ctu::XpcClient::~XpcClient(this);

  operator delete(v2);
}

const char *coex::XpcClient::getName(coex::XpcClient *this)
{
  return "coex.xpc";
}

void coex::XpcClient::start(coex::XpcClient *this)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN4coex9XpcClient5startEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_6;
  v3[4] = this;
  int v4 = v3;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableINS_9XpcClientEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_14;
  block[4] = (char *)this + 8;
  void block[5] = &v4;
  uint64_t v2 = (char *)this + 24;
  uint64_t v1 = *((void *)this + 3);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

void ___ZN4coex9XpcClient5startEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = (const char **)(v1 + 80);
  if (*(char *)(v1 + 103) < 0)
  {
    xpc_connection_t mach_service = xpc_connection_create_mach_service(*v2, *(dispatch_queue_t *)(v1 + 24), 2uLL);
    if (mach_service) {
      goto LABEL_3;
    }
  }
  else
  {
    xpc_connection_t mach_service = xpc_connection_create_mach_service((const char *)v2, *(dispatch_queue_t *)(v1 + 24), 2uLL);
    if (mach_service)
    {
LABEL_3:
      xpc_object_t v4 = mach_service;
      xpc_object_t object = mach_service;
      goto LABEL_6;
    }
  }
  xpc_object_t v4 = xpc_null_create();
  xpc_object_t object = v4;
  if (!v4)
  {
    xpc_object_t v4 = 0;
    xpc_object_t object = xpc_null_create();
    goto LABEL_7;
  }
LABEL_6:
  xpc_retain(v4);
LABEL_7:
  ctu::XpcClient::setServer_sync();
  xpc_release(object);
  coex::XpcClient::register_sync((coex::XpcClient *)v1);
  xpc_release(v4);
}

void sub_1C5A5512C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void coex::XpcClient::register_sync(coex::XpcClient *this)
{
  uint64_t v2 = *((void *)this + 9);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Registering", buf, 2u);
  }
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (xpc_object_t v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v3) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v3);
      xpc_object_t v4 = v3;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v3 = 0;
  }
  xpc_release(v3);
  xpc_object_t v5 = xpc_int64_create(3);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "kWCMRegisterProcess_ProcessId", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  uint64_t v8 = v4;
  if (v4)
  {
    xpc_retain(v4);
    xpc_object_t v7 = v8;
  }
  else
  {
    xpc_object_t v7 = xpc_null_create();
    uint64_t v8 = v7;
  }
  coex::XpcClient::sendMessage((uint64_t)this, 1, &v8, 0);
  xpc_release(v7);
  uint64_t v8 = 0;
  xpc_release(v4);
}

void coex::XpcClient::registerCommandHandler(uint64_t a1, int a2, void **a3)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 1174405120;
  _DWORD v5[2] = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  v5[3] = &__block_descriptor_tmp_5_9;
  v5[4] = a1;
  int v7 = a2;
  xpc_object_t v4 = *a3;
  if (*a3) {
    xpc_object_t v4 = _Block_copy(v4);
  }
  xpc_object_t aBlock = v4;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v5);
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2)
  {
    xpc_object_t v4 = _Block_copy(v2);
    xpc_object_t v6 = (void *)(v3 + 112);
    uint64_t v5 = *(void *)(v3 + 112);
    int v7 = *(_DWORD *)(a1 + 48);
    if (v5) {
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  xpc_object_t v4 = 0;
  xpc_object_t v6 = (void *)(v3 + 112);
  uint64_t v5 = *(void *)(v3 + 112);
  int v7 = *(_DWORD *)(a1 + 48);
  if (!v5)
  {
LABEL_5:
    uint64_t v8 = v6;
LABEL_11:
    char v10 = operator new(0x30uLL);
    v10[8] = v7;
    *((void *)v10 + 5) = 0;
    *(void *)char v10 = 0;
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = v8;
    void *v6 = v10;
    uint64_t v11 = **(void **)(v3 + 104);
    long long v12 = (uint64_t *)v10;
    if (v11)
    {
      *(void *)(v3 + 104) = v11;
      long long v12 = (uint64_t *)*v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 112), v12);
    ++*(void *)(v3 + 120);
    uint64_t v13 = (const void *)*((void *)v10 + 5);
    *((void *)v10 + 5) = v4;
    if (!v13) {
      return;
    }
LABEL_16:
    _Block_release(v13);
    return;
  }
  while (1)
  {
LABEL_7:
    while (1)
    {
      uint64_t v8 = (void *)v5;
      int v9 = *(_DWORD *)(v5 + 32);
      if (v7 >= v9) {
        break;
      }
      uint64_t v5 = *v8;
      xpc_object_t v6 = v8;
      if (!*v8) {
        goto LABEL_11;
      }
    }
    if (v9 >= v7) {
      break;
    }
    uint64_t v5 = v8[1];
    if (!v5)
    {
      xpc_object_t v6 = v8 + 1;
      goto LABEL_11;
    }
  }
  uint64_t v13 = (const void *)v8[5];
  v8[5] = v4;
  if (v13) {
    goto LABEL_16;
  }
}

void sub_1C5A554B4(_Unwind_Exception *exception_object)
{
  if (v1) {
    _Block_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_40c68_ZTSN8dispatch5blockIU13block_pointerFvN3xpc6objectEN4coex5SubIdEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 40);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c68_ZTSN8dispatch5blockIU13block_pointerFvN3xpc6objectEN4coex5SubIdEEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 40);
  if (v1) {
    _Block_release(v1);
  }
}

void ___ZN4coex9XpcClient11sendMessageE19WCMReceiveMessageIdN3xpc6objectENS_5SubIdE_block_invoke(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v4 = v3;
  if (v3)
  {
    xpc_object_t xdict = v3;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t xdict = v4;
    if (!v4)
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8795EB0](v4) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v4);
    goto LABEL_9;
  }
  xpc_object_t v5 = xpc_null_create();
LABEL_8:
  xpc_object_t xdict = v5;
LABEL_9:
  xpc_release(v4);
  xpc_object_t v6 = xpc_uint64_create(*(unsigned int *)(a1 + 48));
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_object_t v7 = xdict;
  xpc_dictionary_set_value(xdict, "kMessageId", v6);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v8);
  xpc_object_t v9 = *(xpc_object_t *)(a1 + 40);
  if (v9) {
    xpc_retain(*(xpc_object_t *)(a1 + 40));
  }
  else {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kMessageArgs", v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  xpc_object_t v11 = xpc_uint64_create(*(unsigned int *)(a1 + 52));
  if (!v11) {
    xpc_object_t v11 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kSubId", v11);
  xpc_object_t v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  xpc_connection_send_message(*(xpc_connection_t *)(v2 + 40), xdict);
  uint64_t v13 = *(NSObject **)(v2 + 72);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    xpc::object::to_string((uint64_t *)__p, (xpc::object *)&xdict);
    if (v16 >= 0) {
      uint64_t v14 = __p;
    }
    else {
      uint64_t v14 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    xpc_object_t v19 = v14;
    _os_log_debug_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_DEBUG, "#D Sending Message: \n\t%s\n", buf, 0xCu);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    xpc_object_t v7 = xdict;
  }
  xpc_release(v7);
}

void sub_1C5A55768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void __destroy_helper_block_e8_40c17_ZTSN3xpc6objectE(uint64_t a1)
{
  *(void *)(a1 + 40) = 0;
}

void coex::XpcClient::handleServerError_sync(coex::XpcClient *a1, xpc::object *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  xpc_object_t v4 = *((void *)a1 + 9);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    xpc::object::to_string((uint64_t *)__p, a2);
    xpc_object_t v5 = v7 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315138;
    xpc_object_t v9 = v5;
    _os_log_error_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_ERROR, "Server Error: %s", buf, 0xCu);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(void *)a2 == MEMORY[0x1E4F14520]) {
    coex::XpcClient::register_sync(a1);
  }
}

void *std::shared_ptr<coex::XpcClient>::shared_ptr[abi:ne180100]<coex::XpcClient,std::shared_ptr<coex::XpcClient> ctu::SharedSynchronizable<ctu::XpcClient>::make_shared_ptr<coex::XpcClient>(coex::XpcClient*)::{lambda(coex::XpcClient*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  xpc_object_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F21067B0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  xpc_object_t v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 8) = a2;
      *(void *)(a2 + 16) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 8) = a2;
  *(void *)(a2 + 16) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C5A55A38(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<coex::XpcClient> ctu::SharedSynchronizable<ctu::XpcClient>::make_shared_ptr<coex::XpcClient>(coex::XpcClient*)::{lambda(coex::XpcClient*)#1}::operator() const(coex::XpcClient*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C5A55A60(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<coex::XpcClient *,std::shared_ptr<coex::XpcClient> ctu::SharedSynchronizable<ctu::XpcClient>::make_shared_ptr<coex::XpcClient>(coex::XpcClient*)::{lambda(coex::XpcClient *)#1},std::allocator<coex::XpcClient>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<coex::XpcClient *,std::shared_ptr<coex::XpcClient> ctu::SharedSynchronizable<ctu::XpcClient>::make_shared_ptr<coex::XpcClient>(coex::XpcClient*)::{lambda(coex::XpcClient *)#1},std::allocator<coex::XpcClient>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<coex::XpcClient *,std::shared_ptr<coex::XpcClient> ctu::SharedSynchronizable<ctu::XpcClient>::make_shared_ptr<coex::XpcClient>(coex::XpcClient*)::{lambda(coex::XpcClient *)#1},std::allocator<coex::XpcClient>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableINS_9XpcClientEE15make_shared_ptrIN4coex9XpcClientEEENSt3__110shared_pt"
                     "rIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableINS_9XpcClientEE15make_shared_ptrIN4coex9XpcClientEEENSt3__1"
                                "10shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableINS_9XpcClientEE15make_shared_ptrIN4coex9XpcClientEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableINS_9XpcClientEE15make_shared_ptrIN4coex9XpcClientEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<coex::XpcClient> ctu::SharedSynchronizable<ctu::XpcClient>::make_shared_ptr<coex::XpcClient>(coex::XpcClient*)::{lambda(coex::XpcClient*)#1}::operator() const(coex::XpcClient*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

void std::__tree<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::__map_value_compare<WCMSendMessageId,std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::less<WCMSendMessageId>,true>,std::allocator<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::__map_value_compare<WCMSendMessageId,std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::less<WCMSendMessageId>,true>,std::allocator<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>>>::destroy(*a1);
    std::__tree<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::__map_value_compare<WCMSendMessageId,std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::less<WCMSendMessageId>,true>,std::allocator<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>>>::destroy(a1[1]);
    uint64_t v2 = (const void *)a1[5];
    if (v2) {
      _Block_release(v2);
    }
    operator delete(a1);
  }
}

void *___ZNK3ctu20SharedSynchronizableINS_9XpcClientEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

uint64_t ___ZNK3ctu20SharedSynchronizableINS_9XpcClientEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrIKN3ctu9XpcClientEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrIKN3ctu9XpcClientEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

const char *asString(unsigned int a1)
{
  if (a1 > 3) {
    return "???";
  }
  else {
    return off_1E651B478[(char)a1];
  }
}

const char *ABMServiceManager::getName(ABMServiceManager *this)
{
  return "service.mgr";
}

uint64_t ABMServiceManager::getInitTimeoutSec(ABMServiceManager *this)
{
  return 12 * capabilities::abs::serviceInitTimeoutScalingFactor(this);
}

uint64_t ABMServiceManager::getStartTimeoutSec(ABMServiceManager *this)
{
  return 30 * capabilities::abs::serviceStartTimeoutScalingFactor(this);
}

uint64_t ABMServiceManager::getSleepTimeoutSec(ABMServiceManager *this)
{
  return 29 * capabilities::abs::serviceSleepTimeoutScalingFactor(this);
}

uint64_t ABMServiceManager::getDefaultShutdownTimeoutSec(ABMServiceManager *this)
{
  return 5 * capabilities::abs::serviceShutdownTimeoutScalingFactor(this);
}

uint64_t ABMServiceManager::getShutdownTimeoutSec(capabilities::abs *a1, int a2)
{
  if (a2 == 1) {
    return 15 * capabilities::abs::serviceShutdownTimeoutScalingFactor(a1);
  }
  if (a2)
  {
    xpc_object_t v4 = *(uint64_t (**)(void))(*(void *)a1 + 112);
    return v4();
  }
  else
  {
    uint64_t IsInternalBuild = config::hw::watch(a1);
    if (IsInternalBuild
      && ((uint64_t IsInternalBuild = TelephonyUtilIsInternalBuild(), (IsInternalBuild & 1) != 0)
       || (uint64_t IsInternalBuild = TelephonyUtilIsCarrierBuild(), IsInternalBuild)))
    {
      return 120 * capabilities::abs::serviceShutdownTimeoutScalingFactor((capabilities::abs *)IsInternalBuild);
    }
    else
    {
      return 30 * capabilities::abs::serviceShutdownTimeoutScalingFactor((capabilities::abs *)IsInternalBuild);
    }
  }
}

void ABMServiceManager::ABMServiceManager(ServiceManager *a1, void *a2)
{
  *(void *)a1 = &unk_1F2106838;
  ServiceManager::ServiceManager(a1, "service.mgr");
  void *v3 = &unk_1F2106838;
  uint64_t v4 = a2[1];
  v3[25] = *a2;
  v3[26] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
}

{
  void *v3;
  uint64_t v4;

  *(void *)a1 = &unk_1F2106838;
  ServiceManager::ServiceManager(a1, "service.mgr");
  void *v3 = &unk_1F2106838;
  uint64_t v4 = a2[1];
  v3[25] = *a2;
  v3[26] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
}

double ABMServiceManager::create@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = (ServiceManager *)operator new(0xD8uLL);
  xpc_object_t v5 = v4;
  xpc_object_t v6 = (std::__shared_weak_count *)a1[1];
  uint64_t v8 = *a1;
  xpc_object_t v9 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)uint64_t v4 = &unk_1F2106838;
  ServiceManager::ServiceManager(v4, "service.mgr");
  *(void *)xpc_object_t v5 = &unk_1F2106838;
  *((void *)v5 + 25) = v8;
  *((void *)v5 + 26) = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v10[0] = (ABMServiceManager *)0xAAAAAAAAAAAAAAAALL;
  v10[1] = (ABMServiceManager *)0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<ABMServiceManager>::shared_ptr[abi:ne180100]<ABMServiceManager,std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager*)#1},void>(v10, (uint64_t)v5);
  ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync((uint64_t)v10[0]);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  ABMServiceManager::init(v10[0]);
  double result = *(double *)v10;
  *a2 = *(_OWORD *)v10;
  return result;
}

void sub_1C5A55FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C5A55FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C5A55FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C5A56010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void ABMServiceManager::init(ABMServiceManager *this)
{
  unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v2 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  unint64_t v3 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)buf, v2);
    long long v4 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    xpc_object_t v5 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v4;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    xpc_object_t v6 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    unint64_t v3 = off_1EBBDCA08;
  }
  unint64_t v21 = v3;
  unint64_t v22 = *(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  if (!v3)
  {
    xpc_object_t v9 = *((void *)this + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_ERROR, "Unable to access CommandDriverFactory. BasebandManager registry will not be set in command drivers!", buf, 2u);
      uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 10);
      if (!v8) {
        goto LABEL_36;
      }
      goto LABEL_20;
    }
LABEL_19:
    uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 10);
    if (!v8) {
      goto LABEL_36;
    }
    goto LABEL_20;
  }
  char v7 = (std::__shared_weak_count *)*((void *)this + 26);
  uint64_t v19 = *((void *)this + 25);
  uint64_t v20 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CommandDriverFactory::setRegistry();
  if (!v20 || atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v8) {
LABEL_36:
  }
    std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_20:
  uint64_t v10 = *((void *)this + 9);
  xpc_object_t v11 = std::__shared_weak_count::lock(v8);
  if (!v11) {
    goto LABEL_36;
  }
  xpc_object_t v12 = v11;
  uint64_t v16 = v10;
  xpc_object_t v17 = v11;
  atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v12);
  }
  PowerManager::create(&v16, buf);
  long long v18 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  ServiceManager::init(this, (uint64_t *)&v18);
  uint64_t v13 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  if (v17) {
    std::__shared_weak_count::__release_weak(v17);
  }
  uint64_t v15 = (std::__shared_weak_count *)v22;
  if (v22)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v22 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1C5A56394(_Unwind_Exception *a1)
{
}

void sub_1C5A563B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1C5A563CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v15 - 48);
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void ABMServiceManager::registerGlobalServices(ABMServiceManager *this)
{
  unint64_t v3 = this;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZNK3ctu20SharedSynchronizableI14ServiceManagerE20execute_wrapped_syncIZN17ABMServiceManager22registerGlobalServicesEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke;
  block[3] = &__block_descriptor_48_e5_v8__0l;
  block[4] = (char *)this + 72;
  void block[5] = &v3;
  uint64_t v2 = (char *)this + 88;
  uint64_t v1 = *((void *)this + 11);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

void ABMServiceManager::registerDynamicServices(ABMServiceManager *this)
{
  unint64_t v3 = this;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZNK3ctu20SharedSynchronizableI14ServiceManagerE20execute_wrapped_syncIZN17ABMServiceManager23registerDynamicServicesEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke;
  block[3] = &__block_descriptor_48_e5_v8__0l;
  block[4] = (char *)this + 72;
  void block[5] = &v3;
  uint64_t v2 = (char *)this + 88;
  uint64_t v1 = *((void *)this + 11);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

void ABMServiceManager::~ABMServiceManager(std::__shared_weak_count **this)
{
  uint64_t v1 = (ABMServiceManager *)this;
  *this = (std::__shared_weak_count *)&unk_1F2106838;
  uint64_t v2 = this[26];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    this = (std::__shared_weak_count **)v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  ServiceManager::~ServiceManager((ServiceManager *)this);
}

void ABMServiceManager::~ABMServiceManager(ABMServiceManager *this)
{
  *(void *)this = &unk_1F2106838;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    ServiceManager::~ServiceManager(this);
  }
  else
  {
    ServiceManager::~ServiceManager(this);
  }
  operator delete(v3);
}

uint64_t ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

uint64_t ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    unint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1C5A56994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C5A569B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<ABMServiceManager>::shared_ptr[abi:ne180100]<ABMServiceManager,std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  long long v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F21068E0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C5A56ADC(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager*)#1}::operator() const(ABMServiceManager*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C5A56B04(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<ABMServiceManager *,std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager *)#1},std::allocator<ABMServiceManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ABMServiceManager *,std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager *)#1},std::allocator<ABMServiceManager>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<ABMServiceManager *,std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager *)#1},std::allocator<ABMServiceManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI14ServiceManagerE15make_shared_ptrI17ABMServiceManagerEENSt3__110share"
                     "d_ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI14ServiceManagerE15make_shared_ptrI17ABMServiceManagerEENSt"
                                "3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI14ServiceManagerE15make_shared_ptrI17ABMServiceManagerEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI14ServiceManagerE15make_shared_ptrI17ABMServiceManagerEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager*)#1}::operator() const(ABMServiceManager*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ___ZNK3ctu20SharedSynchronizableI14ServiceManagerE20execute_wrapped_syncIZN17ABMServiceManager22registerGlobalServicesEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  unint64_t v3 = *(std::__shared_weak_count **)(*v1 + 80);
  if (!v3) {
    goto LABEL_53;
  }
  uint64_t v4 = *(void *)(v2 + 72);
  size_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    goto LABEL_53;
  }
  uint64_t v6 = v5;
  uint64_t v41 = v4;
  __int16 v42 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  LogTracker::create(&v41, &v43);
  uint64_t v7 = v43;
  if (v43)
  {
    uint64_t v8 = v44;
    uint64_t v45 = v43;
    uint64_t v46 = v44;
    if (v44) {
      atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    xpc_object_t v9 = *(NetworkingModule ***)(v2 + 128);
    if ((unint64_t)v9 >= *(void *)(v2 + 136))
    {
      uint64_t v10 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 120), (uint64_t)&v45);
      xpc_object_t v11 = v46;
      *(void *)(v2 + 128) = v10;
      if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      *xpc_object_t v9 = v7;
      v9[1] = (NetworkingModule *)v8;
      *(void *)(v2 + 128) = v9 + 2;
    }
  }
  xpc_object_t v12 = v44;
  if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (v42) {
    std::__shared_weak_count::__release_weak(v42);
  }
  uint64_t v13 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v13) {
    goto LABEL_53;
  }
  uint64_t v14 = *(void *)(v2 + 72);
  uint64_t v15 = std::__shared_weak_count::lock(v13);
  if (!v15) {
    goto LABEL_53;
  }
  uint64_t v16 = v15;
  uint64_t v37 = v14;
  BOOL v38 = v15;
  atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v16);
  }
  CPMSModule::create(&v37, &v39);
  xpc_object_t v17 = v39;
  if (v39)
  {
    long long v18 = v40;
    uint64_t v45 = v39;
    uint64_t v46 = v40;
    if (v40) {
      atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v19 = *(NetworkingModule ***)(v2 + 128);
    if ((unint64_t)v19 >= *(void *)(v2 + 136))
    {
      uint64_t v20 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 120), (uint64_t)&v45);
      unint64_t v21 = v46;
      *(void *)(v2 + 128) = v20;
      if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    else
    {
      *uint64_t v19 = v17;
      v19[1] = (NetworkingModule *)v18;
      *(void *)(v2 + 128) = v19 + 2;
    }
  }
  unint64_t v22 = v40;
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  if (v38) {
    std::__shared_weak_count::__release_weak(v38);
  }
  char v23 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v23 || (v24 = *(void *)(v2 + 72), (uint64_t v25 = std::__shared_weak_count::lock(v23)) == 0)) {
LABEL_53:
  }
    std::__throw_bad_weak_ptr[abi:ne180100]();
  BOOL v26 = v25;
  uint64_t v33 = v24;
  CFMutableArrayRef v34 = v25;
  atomic_fetch_add_explicit(&v25->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v26);
  }
  NetworkingModule::create(&v33, &v35);
  __int16 v27 = v35;
  if (v35)
  {
    uint64_t v28 = (NetworkingModule *)v36;
    uint64_t v45 = v35;
    uint64_t v46 = v36;
    if (v36) {
      atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __int16 v29 = *(NetworkingModule ***)(v2 + 128);
    if ((unint64_t)v29 >= *(void *)(v2 + 136))
    {
      int v30 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 120), (uint64_t)&v45);
      unint64_t v31 = v46;
      *(void *)(v2 + 128) = v30;
      if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    else
    {
      *__int16 v29 = v27;
      v29[1] = v28;
      *(void *)(v2 + 128) = v29 + 2;
    }
  }
  uint64_t v32 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  if (v34) {
    std::__shared_weak_count::__release_weak(v34);
  }
}

void sub_1C5A5704C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v20 = *(std::__shared_weak_count **)(v18 - 40);
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  if (a12 && !atomic_fetch_add(&a12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
    std::__shared_weak_count::__release_weak(a12);
  }
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>(char **a1, uint64_t a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 4;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 60) {
    std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v5 = a1[2] - *a1;
  if (v5 >> 3 > v3) {
    unint64_t v3 = v5 >> 3;
  }
  BOOL v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6) {
    unint64_t v7 = v3;
  }
  if (v7 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v9 = 16 * v7;
  uint64_t v10 = (char *)operator new(16 * v7);
  xpc_object_t v11 = &v10[16 * v2];
  *(_OWORD *)xpc_object_t v11 = *(_OWORD *)a2;
  xpc_object_t v12 = v11 + 16;
  uint64_t v13 = &v10[v9];
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v14 = *a1;
  uint64_t v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v13;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 1);
      v15 -= 16;
      *((_OWORD *)v11 - 1) = v16;
      v11 -= 16;
      *(void *)uint64_t v15 = 0;
      *((void *)v15 + 1) = 0;
    }
    while (v15 != v14);
    uint64_t v15 = *a1;
    xpc_object_t v17 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    for (a1[2] = v13; v17 != v15; v17 -= 16)
    {
      uint64_t v18 = (std::__shared_weak_count *)*((void *)v17 - 1);
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v12;
}

void ___ZNK3ctu20SharedSynchronizableI14ServiceManagerE20execute_wrapped_syncIZN17ABMServiceManager23registerDynamicServicesEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  unint64_t v3 = *(std::__shared_weak_count **)(*v1 + 80);
  if (!v3) {
    goto LABEL_222;
  }
  uint64_t v4 = *(void *)(v2 + 72);
  uint64_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    goto LABEL_222;
  }
  BOOL v6 = v5;
  uint64_t v167 = v4;
  xpc_object_t v168 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  unint64_t v7 = *(std::__shared_weak_count **)(v2 + 208);
  uint64_t v165 = *(void *)(v2 + 200);
  v166 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  TransportModule::create(&v167, &v165, &v169);
  uint64_t v8 = v169;
  if ((void)v169)
  {
    uint64_t v9 = *((void *)&v169 + 1);
    long long v170 = v169;
    if (*((void *)&v169 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v169 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = *(void **)(v2 + 152);
    if ((unint64_t)v10 >= *(void *)(v2 + 160))
    {
      xpc_object_t v11 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v170);
      xpc_object_t v12 = (std::__shared_weak_count *)*((void *)&v170 + 1);
      *(void *)(v2 + 152) = v11;
      if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    else
    {
      *uint64_t v10 = v8;
      v10[1] = v9;
      *(void *)(v2 + 152) = v10 + 2;
    }
  }
  uint64_t v13 = (std::__shared_weak_count *)*((void *)&v169 + 1);
  if (*((void *)&v169 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v169 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = v166;
  if (v166 && !atomic_fetch_add(&v166->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  if (v168) {
    std::__shared_weak_count::__release_weak(v168);
  }
  uint64_t v15 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v15) {
    goto LABEL_222;
  }
  uint64_t v16 = *(void *)(v2 + 72);
  xpc_object_t v17 = std::__shared_weak_count::lock(v15);
  if (!v17) {
    goto LABEL_222;
  }
  uint64_t v18 = v17;
  uint64_t v162 = v16;
  uint64_t v163 = v17;
  atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v18);
  }
  RadioModule::create(&v162, &v164);
  uint64_t v19 = v164;
  if ((void)v164)
  {
    uint64_t v20 = *((void *)&v164 + 1);
    long long v170 = v164;
    if (*((void *)&v164 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v164 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v21 = *(void **)(v2 + 152);
    if ((unint64_t)v21 >= *(void *)(v2 + 160))
    {
      unint64_t v22 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v170);
      char v23 = (std::__shared_weak_count *)*((void *)&v170 + 1);
      *(void *)(v2 + 152) = v22;
      if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    else
    {
      *unint64_t v21 = v19;
      v21[1] = v20;
      *(void *)(v2 + 152) = v21 + 2;
    }
  }
  uint64_t v24 = (std::__shared_weak_count *)*((void *)&v164 + 1);
  if (*((void *)&v164 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v164 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  if (v163) {
    std::__shared_weak_count::__release_weak(v163);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v25) {
    goto LABEL_222;
  }
  uint64_t v26 = *(void *)(v2 + 72);
  __int16 v27 = std::__shared_weak_count::lock(v25);
  if (!v27) {
    goto LABEL_222;
  }
  uint64_t v28 = v27;
  uint64_t v159 = v26;
  CFAllocatorRef v160 = v27;
  atomic_fetch_add_explicit(&v27->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v28);
  }
  Simulator::create(&v159, &v161);
  uint64_t v29 = v161;
  if ((void)v161)
  {
    uint64_t v30 = *((void *)&v161 + 1);
    long long v170 = v161;
    if (*((void *)&v161 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v161 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v31 = *(void **)(v2 + 152);
    if ((unint64_t)v31 >= *(void *)(v2 + 160))
    {
      uint64_t v32 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v170);
      uint64_t v33 = (std::__shared_weak_count *)*((void *)&v170 + 1);
      *(void *)(v2 + 152) = v32;
      if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      *unint64_t v31 = v29;
      v31[1] = v30;
      *(void *)(v2 + 152) = v31 + 2;
    }
  }
  CFMutableArrayRef v34 = (std::__shared_weak_count *)*((void *)&v161 + 1);
  if (*((void *)&v161 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v161 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  if (v160) {
    std::__shared_weak_count::__release_weak(v160);
  }
  uint64_t v35 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v35) {
    goto LABEL_222;
  }
  uint64_t v36 = *(void *)(v2 + 72);
  uint64_t v37 = std::__shared_weak_count::lock(v35);
  if (!v37) {
    goto LABEL_222;
  }
  BOOL v38 = v37;
  uint64_t v156 = v36;
  xpc_object_t v157 = v37;
  atomic_fetch_add_explicit(&v37->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v38);
  }
  TraceManager::create(&v156, (uint64_t *)&v158);
  uint64_t v39 = v158;
  if ((void)v158)
  {
    uint64_t v40 = *((void *)&v158 + 1);
    long long v170 = v158;
    if (*((void *)&v158 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v158 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v41 = *(void **)(v2 + 152);
    if ((unint64_t)v41 >= *(void *)(v2 + 160))
    {
      __int16 v42 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v170);
      uint64_t v43 = (std::__shared_weak_count *)*((void *)&v170 + 1);
      *(void *)(v2 + 152) = v42;
      if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    else
    {
      void *v41 = v39;
      v41[1] = v40;
      *(void *)(v2 + 152) = v41 + 2;
    }
  }
  __int16 v44 = (std::__shared_weak_count *)*((void *)&v158 + 1);
  if (*((void *)&v158 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v158 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
  if (v157) {
    std::__shared_weak_count::__release_weak(v157);
  }
  uint64_t v45 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v45 || (v46 = *(void *)(v2 + 72), (uint64_t v47 = std::__shared_weak_count::lock(v45)) == 0)) {
LABEL_222:
  }
    std::__throw_bad_weak_ptr[abi:ne180100]();
  int v48 = v47;
  uint64_t v153 = v46;
  v154 = v47;
  atomic_fetch_add_explicit(&v47->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v48);
  }
  AWDModule::create(&v153, &v155);
  uint64_t v49 = v155;
  if ((void)v155)
  {
    uint64_t v50 = *((void *)&v155 + 1);
    long long v170 = v155;
    if (*((void *)&v155 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v155 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    int v51 = *(void **)(v2 + 152);
    if ((unint64_t)v51 >= *(void *)(v2 + 160))
    {
      CFAllocatorRef v52 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v170);
      std::string::size_type v53 = (std::__shared_weak_count *)*((void *)&v170 + 1);
      *(void *)(v2 + 152) = v52;
      if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    else
    {
      *int v51 = v49;
      v51[1] = v50;
      *(void *)(v2 + 152) = v51 + 2;
    }
  }
  int64_t v54 = (std::__shared_weak_count *)*((void *)&v155 + 1);
  if (*((void *)&v155 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v155 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
    std::__shared_weak_count::__release_weak(v54);
  }
  xpc_object_t v55 = (config::hw *)v154;
  if (v154) {
    std::__shared_weak_count::__release_weak(v154);
  }
  uint64_t v56 = (capabilities::abs *)config::hw::watch(v55);
  if ((v56 & 1) == 0)
  {
    unint64_t v57 = *(std::__shared_weak_count **)(v2 + 80);
    if (!v57) {
      goto LABEL_222;
    }
    uint64_t v58 = *(void *)(v2 + 72);
    uint64_t v59 = std::__shared_weak_count::lock(v57);
    if (!v59) {
      goto LABEL_222;
    }
    unint64_t v60 = v59;
    uint64_t v150 = v58;
    xpc_object_t v151 = v59;
    atomic_fetch_add_explicit(&v59->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v60);
    }
    HealthModule::create(&v150, &v152);
    uint64_t v61 = v152;
    if ((void)v152)
    {
      uint64_t v62 = *((void *)&v152 + 1);
      long long v170 = v152;
      if (*((void *)&v152 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v152 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v63 = *(void **)(v2 + 152);
      if ((unint64_t)v63 >= *(void *)(v2 + 160))
      {
        int v64 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v170);
        unint64_t v65 = (std::__shared_weak_count *)*((void *)&v170 + 1);
        *(void *)(v2 + 152) = v64;
        if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      else
      {
        void *v63 = v61;
        v63[1] = v62;
        *(void *)(v2 + 152) = v63 + 2;
      }
    }
    size_t v66 = (std::__shared_weak_count *)*((void *)&v152 + 1);
    if (*((void *)&v152 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v152 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
    uint64_t v56 = (capabilities::abs *)v151;
    if (v151) {
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  capabilities::abs::supportedSARFeatures(v56);
  if (capabilities::abs::operator&())
  {
    int64_t v67 = *(std::__shared_weak_count **)(v2 + 80);
    if (!v67) {
      goto LABEL_222;
    }
    uint64_t v68 = *(void *)(v2 + 72);
    v69 = std::__shared_weak_count::lock(v67);
    if (!v69) {
      goto LABEL_222;
    }
    size_t v70 = v69;
    uint64_t v147 = v68;
    uint64_t v148 = v69;
    atomic_fetch_add_explicit(&v69->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v69->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v70);
    }
    AntennaModule::create(&v147, (NSObject ***)&v149);
    uint64_t v71 = v149;
    if ((void)v149)
    {
      uint64_t v72 = *((void *)&v149 + 1);
      long long v170 = v149;
      if (*((void *)&v149 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v149 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      size_t v73 = *(void **)(v2 + 152);
      if ((unint64_t)v73 >= *(void *)(v2 + 160))
      {
LABEL_128:
        uint64_t v78 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v170);
        int v79 = (std::__shared_weak_count *)*((void *)&v170 + 1);
        *(void *)(v2 + 152) = v78;
        if (v79 && !atomic_fetch_add(&v79->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
        goto LABEL_131;
      }
LABEL_127:
      void *v73 = v71;
      v73[1] = v72;
      *(void *)(v2 + 152) = v73 + 2;
    }
  }
  else
  {
    BOOL v74 = *(std::__shared_weak_count **)(v2 + 80);
    if (!v74) {
      goto LABEL_222;
    }
    uint64_t v75 = *(void *)(v2 + 72);
    std::string::size_type v76 = std::__shared_weak_count::lock(v74);
    if (!v76) {
      goto LABEL_222;
    }
    xpc_object_t v77 = v76;
    uint64_t v147 = v75;
    uint64_t v148 = v76;
    atomic_fetch_add_explicit(&v76->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v76->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v77);
    }
    SARModule::create(&v147, (SARModule **)&v149);
    uint64_t v71 = v149;
    if ((void)v149)
    {
      uint64_t v72 = *((void *)&v149 + 1);
      long long v170 = v149;
      if (*((void *)&v149 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v149 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      size_t v73 = *(void **)(v2 + 152);
      if ((unint64_t)v73 >= *(void *)(v2 + 160)) {
        goto LABEL_128;
      }
      goto LABEL_127;
    }
  }
LABEL_131:
  int v80 = (std::__shared_weak_count *)*((void *)&v149 + 1);
  if (*((void *)&v149 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v149 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
    std::__shared_weak_count::__release_weak(v80);
  }
  if (v148) {
    std::__shared_weak_count::__release_weak(v148);
  }
  size_t v81 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v81) {
    goto LABEL_222;
  }
  uint64_t v82 = *(void *)(v2 + 72);
  uint64_t v83 = std::__shared_weak_count::lock(v81);
  if (!v83) {
    goto LABEL_222;
  }
  uint64_t v84 = v83;
  uint64_t v144 = v82;
  size_t v145 = v83;
  atomic_fetch_add_explicit(&v83->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v83->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
    std::__shared_weak_count::__release_weak(v84);
  }
  StatsModule::create(&v144, (uint64_t *)&v146);
  uint64_t v85 = v146;
  if ((void)v146)
  {
    uint64_t v86 = *((void *)&v146 + 1);
    long long v170 = v146;
    if (*((void *)&v146 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v146 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    size_t v87 = *(void **)(v2 + 152);
    if ((unint64_t)v87 >= *(void *)(v2 + 160))
    {
      BOOL v88 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v170);
      char v89 = (std::__shared_weak_count *)*((void *)&v170 + 1);
      *(void *)(v2 + 152) = v88;
      if (v89 && !atomic_fetch_add(&v89->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
    else
    {
      *size_t v87 = v85;
      v87[1] = v86;
      *(void *)(v2 + 152) = v87 + 2;
    }
  }
  uint64_t v90 = (std::__shared_weak_count *)*((void *)&v146 + 1);
  if (*((void *)&v146 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v146 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
    std::__shared_weak_count::__release_weak(v90);
  }
  if (v145) {
    std::__shared_weak_count::__release_weak(v145);
  }
  uint64_t v91 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v91) {
    goto LABEL_222;
  }
  uint64_t v92 = *(void *)(v2 + 72);
  uint64_t v93 = std::__shared_weak_count::lock(v91);
  if (!v93) {
    goto LABEL_222;
  }
  std::string v94 = v93;
  uint64_t v141 = v92;
  uint64_t v142 = v93;
  atomic_fetch_add_explicit(&v93->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v93->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
    std::__shared_weak_count::__release_weak(v94);
  }
  FSModuleICE::create(&v141, &v143);
  uint64_t v95 = v143;
  if ((void)v143)
  {
    uint64_t v96 = *((void *)&v143 + 1);
    long long v170 = v143;
    if (*((void *)&v143 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v143 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v97 = *(void **)(v2 + 152);
    if ((unint64_t)v97 >= *(void *)(v2 + 160))
    {
      uint64_t v98 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v170);
      int v99 = (std::__shared_weak_count *)*((void *)&v170 + 1);
      *(void *)(v2 + 152) = v98;
      if (v99 && !atomic_fetch_add(&v99->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
    }
    else
    {
      *uint64_t v97 = v95;
      v97[1] = v96;
      *(void *)(v2 + 152) = v97 + 2;
    }
  }
  xpc_object_t v100 = (std::__shared_weak_count *)*((void *)&v143 + 1);
  if (*((void *)&v143 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v143 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
    std::__shared_weak_count::__release_weak(v100);
  }
  if (v142) {
    std::__shared_weak_count::__release_weak(v142);
  }
  xpc_object_t v101 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v101) {
    goto LABEL_222;
  }
  uint64_t v102 = *(void *)(v2 + 72);
  size_t v103 = std::__shared_weak_count::lock(v101);
  if (!v103) {
    goto LABEL_222;
  }
  xpc_object_t v104 = v103;
  uint64_t v138 = v102;
  int v139 = v103;
  atomic_fetch_add_explicit(&v103->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v103->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
    std::__shared_weak_count::__release_weak(v104);
  }
  v105.n128_f64[0] = BootModuleICE::create(&v138, &v140);
  uint64_t v106 = v140;
  if ((void)v140)
  {
    uint64_t v107 = *((void *)&v140 + 1);
    long long v170 = v140;
    if (*((void *)&v140 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v140 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    int v108 = *(void **)(v2 + 152);
    if ((unint64_t)v108 >= *(void *)(v2 + 160))
    {
      int v109 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v170);
      std::string v110 = (std::__shared_weak_count *)*((void *)&v170 + 1);
      *(void *)(v2 + 152) = v109;
      if (v110 && !atomic_fetch_add(&v110->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
      }
    }
    else
    {
      *int v108 = v106;
      v108[1] = v107;
      *(void *)(v2 + 152) = v108 + 2;
    }
  }
  size_t v111 = (std::__shared_weak_count *)*((void *)&v140 + 1);
  if (*((void *)&v140 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v140 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *, __n128))v111->__on_zero_shared)(v111, v105);
    std::__shared_weak_count::__release_weak(v111);
  }
  if (v139) {
    std::__shared_weak_count::__release_weak(v139);
  }
  uint64_t v112 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v112) {
    goto LABEL_222;
  }
  uint64_t v113 = *(void *)(v2 + 72);
  uint64_t v114 = std::__shared_weak_count::lock(v112);
  if (!v114) {
    goto LABEL_222;
  }
  uint64_t v115 = v114;
  uint64_t v135 = v113;
  int v136 = v114;
  atomic_fetch_add_explicit(&v114->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v114->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
    std::__shared_weak_count::__release_weak(v115);
  }
  AccessoryModule::create((capabilities::abs *)&v135, (std::__shared_weak_count_vtbl **)&v137);
  uint64_t v116 = v137;
  if ((void)v137)
  {
    uint64_t v117 = *((void *)&v137 + 1);
    long long v170 = v137;
    if (*((void *)&v137 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v137 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    CFAllocatorRef v118 = *(void **)(v2 + 152);
    if ((unint64_t)v118 >= *(void *)(v2 + 160))
    {
      uint64_t v119 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v170);
      CFAllocatorRef v120 = (std::__shared_weak_count *)*((void *)&v170 + 1);
      *(void *)(v2 + 152) = v119;
      if (v120 && !atomic_fetch_add(&v120->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
        std::__shared_weak_count::__release_weak(v120);
      }
    }
    else
    {
      *CFAllocatorRef v118 = v116;
      v118[1] = v117;
      *(void *)(v2 + 152) = v118 + 2;
    }
  }
  uint64_t v121 = (std::__shared_weak_count *)*((void *)&v137 + 1);
  if (*((void *)&v137 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v137 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
    std::__shared_weak_count::__release_weak(v121);
  }
  if (v136) {
    std::__shared_weak_count::__release_weak(v136);
  }
  CFAllocatorRef v122 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v122) {
    goto LABEL_222;
  }
  uint64_t v123 = *(void *)(v2 + 72);
  uint64_t v124 = std::__shared_weak_count::lock(v122);
  if (!v124) {
    goto LABEL_222;
  }
  int v125 = v124;
  uint64_t v132 = v123;
  CFAllocatorRef v133 = v124;
  atomic_fetch_add_explicit(&v124->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v124->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
    std::__shared_weak_count::__release_weak(v125);
  }
  coex::Module::create(&v132, (capabilities::abs **)&v134);
  uint64_t v126 = v134;
  if ((void)v134)
  {
    uint64_t v127 = *((void *)&v134 + 1);
    long long v170 = v134;
    if (*((void *)&v134 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v134 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    int v128 = *(void **)(v2 + 152);
    if ((unint64_t)v128 >= *(void *)(v2 + 160))
    {
      CFAllocatorRef v129 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v170);
      uint64_t v130 = (std::__shared_weak_count *)*((void *)&v170 + 1);
      *(void *)(v2 + 152) = v129;
      if (v130 && !atomic_fetch_add(&v130->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
        std::__shared_weak_count::__release_weak(v130);
      }
    }
    else
    {
      *int v128 = v126;
      v128[1] = v127;
      *(void *)(v2 + 152) = v128 + 2;
    }
  }
  uint64_t v131 = (std::__shared_weak_count *)*((void *)&v134 + 1);
  if (*((void *)&v134 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v134 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
    std::__shared_weak_count::__release_weak(v131);
  }
  if (v133) {
    std::__shared_weak_count::__release_weak(v133);
  }
}

void sub_1C5A5854C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v40 = *(std::__shared_weak_count **)(v38 - 40);
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  if (a32 && !atomic_fetch_add(&a32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a32->__on_zero_shared)(a32);
    std::__shared_weak_count::__release_weak(a32);
  }
  if (a30) {
    std::__shared_weak_count::__release_weak(a30);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __cxx_global_var_init_7()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

uint64_t __cxx_global_var_init_8()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

uint64_t util::apfs::is_transcription_pending(util::apfs *this)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  bzero(&v13, 0x878uLL);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "apfs");
  uint64_t v1 = *(NSObject **)&v12[4];
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C59C6000, v1, OS_LOG_TYPE_DEFAULT, "Checking if disk requires APFS transcription", buf, 2u);
  }
  if (statfs("/private/var", &v13))
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "apfs");
    uint64_t v2 = *(NSObject **)&v12[4];
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_11;
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)xpc_object_t v12 = "/private/var";
    unint64_t v3 = "Failed to statfs: %s";
    uint64_t v4 = v2;
LABEL_9:
    uint32_t v6 = 12;
LABEL_10:
    _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, v3, buf, v6);
    goto LABEL_11;
  }
  if (strlen(v13.f_mntfromname) - 1024 <= 0xFFFFFFFFFFFFFC00)
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "apfs");
    uint64_t v5 = *(NSObject **)&v12[4];
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_11;
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)xpc_object_t v12 = v13.f_mntfromname;
    unint64_t v3 = "Failed to get mount point: %s";
    uint64_t v4 = v5;
    goto LABEL_9;
  }
  if (APFSVolumeRole())
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "apfs");
    uint64_t v9 = *(NSObject **)&v12[4];
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)xpc_object_t v12 = 0;
      unint64_t v3 = "APFS volume role error: %d";
      uint64_t v4 = v9;
      uint32_t v6 = 8;
      goto LABEL_10;
    }
  }
  else
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "apfs");
    uint64_t v10 = *(NSObject **)&v12[4];
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      unint64_t v3 = "APFS volume role does not match";
      uint64_t v4 = v10;
      uint32_t v6 = 2;
      goto LABEL_10;
    }
  }
LABEL_11:
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "apfs");
  unint64_t v7 = *(NSObject **)&v12[4];
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)xpc_object_t v12 = 0;
    _os_log_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_DEFAULT, "APFS needs crypto migration: %d", buf, 8u);
  }
  return 0;
}

const char *SARModule::getName(SARModule *this)
{
  return "sar.mod";
}

void SARModule::create(uint64_t *a1@<X0>, SARModule **a2@<X8>)
{
  *a2 = (SARModule *)0xAAAAAAAAAAAAAAAALL;
  a2[1] = (SARModule *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v4 = (std::__shared_weak_count **)operator new(0x150uLL);
  uint64_t v5 = v4;
  uint64_t v6 = *a1;
  unint64_t v7 = (std::__shared_weak_count *)a1[1];
  v14[0] = v6;
  v14[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  SARModule::SARModule((uint64_t)v4, v14);
  *a2 = (SARModule *)v5;
  a2[1] = (SARModule *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = (std::__shared_weak_count *)operator new(0x20uLL);
  v8->__shared_owners_ = 0;
  p_shared_owners = &v8->__shared_owners_;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2106BC8;
  v8->__shared_weak_owners_ = 0;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  a2[1] = (SARModule *)v8;
  uint64_t v10 = v5[7];
  if (!v10)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v5[6] = (std::__shared_weak_count *)v5;
    v5[7] = v8;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (v10->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v5[6] = (std::__shared_weak_count *)v5;
    v5[7] = v8;
    std::__shared_weak_count::__release_weak(v10);
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_8:
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
LABEL_9:
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  xpc_object_t v11 = *a2;
  if (!*a2)
  {
    xpc_object_t v12 = GetOsLogContext()[1];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13[0] = 0;
      _os_log_error_impl(&dword_1C59C6000, v12, OS_LOG_TYPE_ERROR, "Failed to create SAR Module!", (uint8_t *)v13, 2u);
    }
  }
  SARModule::init(v11);
}

void sub_1C5A593DC(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1C5A593F4(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[8], v1, (dispatch_function_t)std::shared_ptr<SARModule> ctu::SharedSynchronizable<SARModule>::make_shared_ptr<SARModule>(SARModule*)::{lambda(SARModule*)#1}::operator() const(SARModule*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C5A5941C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(a1);
}

void SARModule::init(SARModule *this)
{
  uint64_t v2 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  unint64_t v3 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)buf, v2);
    long long v4 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    uint64_t v5 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v4;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    unint64_t v3 = off_1EBBDCA08;
  }
  object[1] = v3;
  uint64_t v24 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  unint64_t v7 = *((void *)this + 9);
  object[0] = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  (*((void (**)(long long *__return_ptr, NSObject *, dispatch_object_t *))v3->isa + 7))(&v25, v3, object);
  uint64_t v8 = (void *)((char *)this + 280);
  long long v9 = v25;
  long long v25 = 0uLL;
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 36);
  *(_OWORD *)((char *)this + 280) = v9;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  xpc_object_t v11 = (std::__shared_weak_count *)*((void *)&v25 + 1);
  if (*((void *)&v25 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v25 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  xpc_object_t v12 = (capabilities::radio *)object[0];
  if (object[0]) {
    dispatch_release(object[0]);
  }
  statfs v13 = v24;
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (*v8)
    {
LABEL_24:
      if (capabilities::radio::maverick(v12))
      {
        memset(buf, 170, sizeof(buf));
        uint64_t v15 = *((void *)this + 6);
        uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 7);
        if (!v14 || (uint64_t v16 = std::__shared_weak_count::lock(v14)) == 0) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        xpc_object_t v17 = v16;
        uint64_t v18 = (std::__shared_weak_count *)operator new(0x30uLL);
        uint64_t v19 = v18;
        v18->__shared_owners_ = 0;
        v18->__shared_weak_owners_ = 0;
        v18->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2106C18;
        uint64_t v20 = &v18[1].__vftable;
        v18[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2106CC0;
        v18[1].__shared_owners_ = v15;
        v18[1].__shared_weak_owners_ = (uint64_t)v17;
        atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        if (atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          v18[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2106C68;
          *(void *)std::string buf = v18 + 1;
          *(void *)&uint8_t buf[8] = v18;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
          v19[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2106C68;
          *(void *)std::string buf = v20;
          *(void *)&uint8_t buf[8] = v19;
        }
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        antenna::CommandDriver::registerHandler();
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
        unint64_t v22 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8])
        {
          if (!atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
      }
      return;
    }
  }
  else if (*v8)
  {
    goto LABEL_24;
  }
  unint64_t v21 = *((void *)this + 10);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl(&dword_1C59C6000, v21, OS_LOG_TYPE_ERROR, "Failed to create antenna command driver", buf, 2u);
  }
}

void sub_1C5A59948(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v2 - 64);
  _Unwind_Resume(a1);
}

void sub_1C5A59964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C5A59978(_Unwind_Exception *a1)
{
}

void sub_1C5A59994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_object_t object, char a15)
{
  if (object) {
    dispatch_release(object);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t SARModule::SARModule(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  long long v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1F2112348;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(void *)a1 = &unk_1F2103EC0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &unk_1F2103EC0;
  }
  *(void *)a1 = &unk_1F2106930;
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v6 = dispatch_queue_create_with_target_V2("sar.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v6, QOS_CLASS_UTILITY, 0);
  dispatch_activate(v6);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = v6;
  if (v6)
  {
    dispatch_retain(v6);
    *(void *)(a1 + 72) = 0;
    dispatch_release(v6);
  }
  else
  {
    *(void *)(a1 + 72) = 0;
  }
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 80), "com.apple.telephony.abm", "sar.mod");
  *(void *)a1 = &unk_1F2106930;
  *(void *)(a1 + 268) = 0;
  *(void *)(a1 + 304) = 0;
  *(unsigned char *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(unsigned char *)(a1 + 136) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(unsigned char *)(a1 + 264) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(unsigned char *)(a1 + 296) = 0;
  return a1;
}

void sub_1C5A59B70(_Unwind_Exception *a1)
{
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v2);
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void SARModule::~SARModule(SARModule *this)
{
  *(void *)this = &unk_1F2106930;
  uint64_t v2 = (char *)this + 80;
  uint64_t v3 = *((void *)this + 10);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v24 = 0;
    _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Gone!", v24, 2u);
  }
  long long v4 = (std::__shared_weak_count *)*((void *)this + 19);
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 16);
    *((void *)this + 15) = 0;
    *((void *)this + 16) = 0;
    if (!v5) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 16);
    *((void *)this + 15) = 0;
    *((void *)this + 16) = 0;
    if (!v5) {
      goto LABEL_9;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_9:
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    unint64_t v7 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v7) {
      goto LABEL_15;
    }
  }
  else
  {
    unint64_t v7 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v7) {
      goto LABEL_15;
    }
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_15:
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 32);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    long long v9 = (std::__shared_weak_count *)*((void *)this + 29);
    if (!v9) {
      goto LABEL_21;
    }
  }
  else
  {
    long long v9 = (std::__shared_weak_count *)*((void *)this + 29);
    if (!v9) {
      goto LABEL_21;
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_21:
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    xpc_object_t v11 = (std::__shared_weak_count *)*((void *)this + 25);
    if (!v11) {
      goto LABEL_27;
    }
  }
  else
  {
    xpc_object_t v11 = (std::__shared_weak_count *)*((void *)this + 25);
    if (!v11) {
      goto LABEL_27;
    }
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_27:
  xpc_object_t v12 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    statfs v13 = (std::__shared_weak_count *)*((void *)this + 19);
    if (!v13) {
      goto LABEL_33;
    }
  }
  else
  {
    statfs v13 = (std::__shared_weak_count *)*((void *)this + 19);
    if (!v13) {
      goto LABEL_33;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_33:
  uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 14);
    if (!v15) {
      goto LABEL_39;
    }
  }
  else
  {
    uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 14);
    if (!v15) {
      goto LABEL_39;
    }
  }
  if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_39:
  uint64_t v16 = (std::__shared_weak_count *)*((void *)this + 12);
  if (!v16 || atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    MEMORY[0x1C8794100](v2);
    xpc_object_t v17 = *((void *)this + 9);
    if (!v17) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
  std::__shared_weak_count::__release_weak(v16);
  MEMORY[0x1C8794100](v2);
  xpc_object_t v17 = *((void *)this + 9);
  if (v17) {
LABEL_42:
  }
    dispatch_release(v17);
LABEL_43:
  uint64_t v18 = *((void *)this + 8);
  if (v18) {
    dispatch_release(v18);
  }
  uint64_t v19 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  *(void *)this = &unk_1F2112348;
  uint64_t v20 = *((void *)this + 3);
  if (v20)
  {
    uint64_t v21 = *((void *)this + 4);
    unint64_t v22 = (void *)*((void *)this + 3);
    if (v21 != v20)
    {
      do
      {
        if (*(char *)(v21 - 1) < 0) {
          operator delete(*(void **)(v21 - 24));
        }
        v21 -= 24;
      }
      while (v21 != v20);
      unint64_t v22 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v20;
    operator delete(v22);
  }
  char v23 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v23) {
    std::__shared_weak_count::__release_weak(v23);
  }
}

{
  void *v1;
  uint64_t vars8;

  SARModule::~SARModule(this);

  operator delete(v1);
}

void SARModule::shutdown(void *a1, uint64_t a2, dispatch_object_t *a3)
{
  long long v4 = *a3;
  if (*a3)
  {
    dispatch_retain(*a3);
    dispatch_group_enter(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[7];
  if (!v5 || (uint64_t v6 = a1[6], (v7 = std::__shared_weak_count::lock(v5)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v8 = v7;
  long long v9 = operator new(0x10uLL);
  *long long v9 = a1;
  v9[1] = v4;
  uint64_t v10 = a1[8];
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v11 = operator new(0x18uLL);
  void *v11 = v9;
  v11[1] = v6;
  v11[2] = v8;
  dispatch_async_f(v10, v11, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<SARModule>::execute_wrapped<SARModule::shutdown(ShutdownStage,dispatch::group_session)::$_0>(SARModule::shutdown(ShutdownStage,dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SARModule::shutdown(ShutdownStage,dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<SARModule::shutdown(ShutdownStage,dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

unsigned char *SARModule::getShutdownStages@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = operator new(1uLL);
  *a1 = v3;
  unsigned char *v3 = 3;
  uint64_t result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void SARModule::initialize(void *a1, dispatch_object_t *a2)
{
  long long v4 = a1[10];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)statfs v13 = 0;
    _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I initialize", v13, 2u);
  }
  uint64_t v5 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[7];
  if (!v6 || (uint64_t v7 = a1[6], (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v9 = v8;
  uint64_t v10 = operator new(0x10uLL);
  *uint64_t v10 = a1;
  v10[1] = v5;
  xpc_object_t v11 = a1[8];
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v12 = operator new(0x18uLL);
  void *v12 = v10;
  v12[1] = v7;
  v12[2] = v9;
  dispatch_async_f(v11, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<SARModule>::execute_wrapped<SARModule::initialize(dispatch::group_session)::$_0>(SARModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SARModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<SARModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void SARModule::finishInitialization_sync(SARModule *this)
{
  v148[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Finish Initialization", (uint8_t *)&buf, 2u);
  }
  uint64_t v3 = (const char *)(*(uint64_t (**)(SARModule *))(*(void *)this + 16))(this);
  size_t v4 = strlen(v3);
  if (v4 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v5 = (void *)v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = (void **)operator new(v7 + 1);
    __dst[1] = v5;
    unint64_t v145 = v8 | 0x8000000000000000;
    __dst[0] = v6;
  }
  else
  {
    HIBYTE(v145) = v4;
    uint64_t v6 = __dst;
    if (!v4) {
      goto LABEL_11;
    }
  }
  memmove(v6, v3, (size_t)v5);
LABEL_11:
  *((unsigned char *)v5 + (void)v6) = 0;
  long long v143 = 0;
  AppleBasebandManager::create();
  long long v9 = buf;
  long long buf = 0uLL;
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 12);
  *(_OWORD *)((char *)this + 88) = v9;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  xpc_object_t v11 = (std::__shared_weak_count *)*((void *)&buf + 1);
  if (!*((void *)&buf + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    xpc_object_t v12 = v143;
    if (!v143) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  xpc_object_t v12 = v143;
  if (v143) {
LABEL_17:
  }
    CFRelease(v12);
LABEL_18:
  if (SHIBYTE(v145) < 0) {
    operator delete(__dst[0]);
  }
  statfs v13 = (std::__shared_weak_count *)*((void *)this + 7);
  if (!v13 || (v14 = *((void *)this + 6), (uint64_t v15 = std::__shared_weak_count::lock(v13)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v16 = v15;
  atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v16);
  }
  xpc_object_t v17 = (const void *)*MEMORY[0x1E4F4CEF8];
  size_t v18 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
  if (v18 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v19 = (void *)v18;
  if (v18 >= 0x17)
  {
    uint64_t v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17) {
      uint64_t v21 = v18 | 7;
    }
    uint64_t v22 = v21 + 1;
    uint64_t v20 = (void **)operator new(v21 + 1);
    v141[1] = v19;
    unint64_t v142 = v22 | 0x8000000000000000;
    v141[0] = v20;
    goto LABEL_31;
  }
  HIBYTE(v142) = v18;
  uint64_t v20 = v141;
  if (v18) {
LABEL_31:
  }
    memmove(v20, v17, (size_t)v19);
  *((unsigned char *)v19 + (void)v20) = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN9SARModule25finishInitialization_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_56_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE_e70_v24__0_shared_ptr_abm::client::Event____Event_____shared_weak_count__8l;
  aBlock[4] = this;
  void aBlock[5] = v14;
  uint64_t v138 = v16;
  atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  char v23 = _Block_copy(aBlock);
  uint64_t v24 = *((void *)this + 8);
  if (v24) {
    dispatch_retain(*((dispatch_object_t *)this + 8));
  }
  int v139 = v23;
  dispatch_object_t v140 = v24;
  AppleBasebandManager::setEventHandler();
  if (v140) {
    dispatch_release(v140);
  }
  if (v139) {
    _Block_release(v139);
  }
  if (SHIBYTE(v142) < 0) {
    operator delete(v141[0]);
  }
  long long v25 = (const void *)*MEMORY[0x1E4F4CB10];
  size_t v26 = strlen((const char *)*MEMORY[0x1E4F4CB10]);
  if (v26 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  __int16 v27 = (void *)v26;
  if (v26 >= 0x17)
  {
    uint64_t v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17) {
      uint64_t v29 = v26 | 7;
    }
    uint64_t v30 = v29 + 1;
    uint64_t v28 = operator new(v29 + 1);
    __p[1] = v27;
    unint64_t v136 = v30 | 0x8000000000000000;
    __p[0] = v28;
    goto LABEL_47;
  }
  HIBYTE(v136) = v26;
  uint64_t v28 = __p;
  if (v26) {
LABEL_47:
  }
    memmove(v28, v25, (size_t)v27);
  *((unsigned char *)v27 + (void)v28) = 0;
  v131[0] = MEMORY[0x1E4F143A8];
  v131[1] = 3321888768;
  v131[2] = ___ZN9SARModule25finishInitialization_syncEv_block_invoke_4;
  v131[3] = &__block_descriptor_56_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE_e70_v24__0_shared_ptr_abm::client::Event____Event_____shared_weak_count__8l;
  v131[4] = this;
  v131[5] = v14;
  uint64_t v132 = v16;
  atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unint64_t v31 = _Block_copy(v131);
  uint64_t v32 = *((void *)this + 8);
  if (v32) {
    dispatch_retain(*((dispatch_object_t *)this + 8));
  }
  CFAllocatorRef v133 = v31;
  dispatch_object_t object = v32;
  AppleBasebandManager::setEventHandler();
  if (object) {
    dispatch_release(object);
  }
  if (v133) {
    _Block_release(v133);
  }
  if (SHIBYTE(v136) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v33 = (const void *)*MEMORY[0x1E4F4C220];
  size_t v34 = strlen((const char *)*MEMORY[0x1E4F4C220]);
  if (v34 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v35 = (void *)v34;
  if (v34 >= 0x17)
  {
    uint64_t v37 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v34 | 7) != 0x17) {
      uint64_t v37 = v34 | 7;
    }
    uint64_t v38 = v37 + 1;
    uint64_t v36 = operator new(v37 + 1);
    v129[1] = v35;
    unint64_t v130 = v38 | 0x8000000000000000;
    v129[0] = v36;
    goto LABEL_63;
  }
  HIBYTE(v130) = v34;
  uint64_t v36 = v129;
  if (v34) {
LABEL_63:
  }
    memmove(v36, v33, (size_t)v35);
  *((unsigned char *)v35 + (void)v36) = 0;
  v125[0] = MEMORY[0x1E4F143A8];
  v125[1] = 3321888768;
  xpc_object_t v125[2] = ___ZN9SARModule25finishInitialization_syncEv_block_invoke_2;
  v125[3] = &__block_descriptor_56_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE_e70_v24__0_shared_ptr_abm::client::Event____Event_____shared_weak_count__8l;
  v125[4] = this;
  v125[5] = v14;
  uint64_t v126 = v16;
  atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v39 = _Block_copy(v125);
  uint64_t v40 = *((void *)this + 8);
  if (v40) {
    dispatch_retain(*((dispatch_object_t *)this + 8));
  }
  uint64_t v127 = v39;
  dispatch_object_t v128 = v40;
  AppleBasebandManager::setEventHandler();
  if (v128) {
    dispatch_release(v128);
  }
  if (v127) {
    _Block_release(v127);
  }
  if (SHIBYTE(v130) < 0) {
    operator delete(v129[0]);
  }
  uint64_t v41 = (capabilities::abs *)AppleBasebandManager::eventsOn(*((AppleBasebandManager **)this + 11));
  capabilities::abs::supportedSARFeatures(v41);
  uint64_t v42 = capabilities::abs::operator&();
  if (v42)
  {
    uint64_t v43 = *((void *)this + 10);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1C59C6000, v43, OS_LOG_TYPE_DEFAULT, "#I Getting WiFi Status from kernel", (uint8_t *)&buf, 2u);
    }
    __int16 v44 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
    uint64_t v45 = (AppleSARHelper *)off_1EA3D67B0;
    if (!off_1EA3D67B0)
    {
      AppleSARHelper::create_default_global((uint64_t *)&buf, v44);
      long long v46 = buf;
      long long buf = 0uLL;
      uint64_t v47 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
      off_1EA3D67B0 = v46;
      if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
      int v48 = (std::__shared_weak_count *)*((void *)&buf + 1);
      if (*((void *)&buf + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
      uint64_t v45 = (AppleSARHelper *)off_1EA3D67B0;
    }
    uint64_t v49 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
    if (*(&off_1EA3D67B0 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EA3D67B0 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
    if (*((_DWORD *)v45 + 1))
    {
      *(void *)&long long buf = 3;
      v148[0] = 0;
      unsigned int v146 = 1;
      char v50 = AppleSARHelper::callUserClientMethod(v45, 0, (const unint64_t *)&buf, 1, (char *)this + 136, 1, v148, &v146, (char *)this + 136, 1uLL);
      if (!v49) {
        goto LABEL_92;
      }
    }
    else
    {
      char v50 = 0;
      if (!v49) {
        goto LABEL_92;
      }
    }
    if (!atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
      int v51 = *((void *)this + 10);
      CFAllocatorRef v52 = v51;
      if (v50)
      {
LABEL_93:
        if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
        {
          if (*((unsigned char *)this + 136)) {
            std::string::size_type v53 = "On";
          }
          else {
            std::string::size_type v53 = "Off";
          }
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v53;
          _os_log_impl(&dword_1C59C6000, v51, OS_LOG_TYPE_DEFAULT, "#I Succeeded getting WiFi State: %s", (uint8_t *)&buf, 0xCu);
          int64_t v54 = *((void *)this + 10);
          if (!os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
          {
LABEL_103:
            xpc_object_t v55 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
            uint64_t v56 = (AppleSARHelper *)off_1EA3D67B0;
            if (!off_1EA3D67B0)
            {
              AppleSARHelper::create_default_global((uint64_t *)&buf, v55);
              long long v57 = buf;
              long long buf = 0uLL;
              uint64_t v58 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
              off_1EA3D67B0 = v57;
              if (v58 && !atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                std::__shared_weak_count::__release_weak(v58);
              }
              uint64_t v59 = (std::__shared_weak_count *)*((void *)&buf + 1);
              if (*((void *)&buf + 1)
                && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                std::__shared_weak_count::__release_weak(v59);
              }
              uint64_t v56 = (AppleSARHelper *)off_1EA3D67B0;
            }
            unint64_t v60 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
            if (*(&off_1EA3D67B0 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EA3D67B0 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
            if (*((_DWORD *)v56 + 1))
            {
              *(void *)&long long buf = 3;
              v148[0] = 0;
              unsigned int v146 = 1;
              char v61 = AppleSARHelper::callUserClientMethod(v56, 1, (const unint64_t *)&buf, 1, (char *)this + 160, 1, v148, &v146, (char *)this + 160, 1uLL);
              if (!v60) {
                goto LABEL_118;
              }
            }
            else
            {
              char v61 = 0;
              if (!v60) {
                goto LABEL_118;
              }
            }
            if (!atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v60);
              uint64_t v62 = *((void *)this + 10);
              uint64_t v63 = v62;
              if (v61)
              {
LABEL_119:
                if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
                {
                  if (*((unsigned char *)this + 160)) {
                    int v64 = "On";
                  }
                  else {
                    int v64 = "Off";
                  }
                  LODWORD(buf) = 136315138;
                  *(void *)((char *)&buf + 4) = v64;
                  _os_log_impl(&dword_1C59C6000, v62, OS_LOG_TYPE_DEFAULT, "#I Succeeded getting Bluetooth State: %s", (uint8_t *)&buf, 0xCu);
                  unint64_t v65 = *((void *)this + 10);
                  if (!os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
                  {
LABEL_129:
                    size_t v66 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
                    int64_t v67 = (AppleSARHelper *)off_1EA3D67B0;
                    if (!off_1EA3D67B0)
                    {
                      AppleSARHelper::create_default_global((uint64_t *)&buf, v66);
                      long long v68 = buf;
                      long long buf = 0uLL;
                      v69 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
                      off_1EA3D67B0 = v68;
                      if (v69 && !atomic_fetch_add(&v69->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                        std::__shared_weak_count::__release_weak(v69);
                      }
                      size_t v70 = (std::__shared_weak_count *)*((void *)&buf + 1);
                      if (*((void *)&buf + 1)
                        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                        std::__shared_weak_count::__release_weak(v70);
                      }
                      int64_t v67 = (AppleSARHelper *)off_1EA3D67B0;
                    }
                    uint64_t v71 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
                    if (*(&off_1EA3D67B0 + 1)) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EA3D67B0 + 1) + 8), 1uLL, memory_order_relaxed);
                    }
                    pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
                    if (*((_DWORD *)v67 + 1))
                    {
                      *(void *)&long long buf = 3;
                      v148[0] = 0;
                      unsigned int v146 = 1;
                      char v72 = AppleSARHelper::callUserClientMethod(v67, 33, (const unint64_t *)&buf, 1, (char *)this + 312, 1, v148, &v146, (char *)this + 312, 1uLL);
                      if (!v71) {
                        goto LABEL_144;
                      }
                    }
                    else
                    {
                      char v72 = 0;
                      if (!v71) {
                        goto LABEL_144;
                      }
                    }
                    if (!atomic_fetch_add(&v71->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                      std::__shared_weak_count::__release_weak(v71);
                      size_t v73 = *((void *)this + 10);
                      BOOL v74 = v73;
                      if (v72)
                      {
LABEL_145:
                        uint64_t v42 = os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT);
                        if (v42)
                        {
                          if (*((unsigned char *)this + 312)) {
                            uint64_t v75 = "On";
                          }
                          else {
                            uint64_t v75 = "Off";
                          }
                          LODWORD(buf) = 136315138;
                          *(void *)((char *)&buf + 4) = v75;
                          _os_log_impl(&dword_1C59C6000, v73, OS_LOG_TYPE_DEFAULT, "#I Succeeded getting call state: %s", (uint8_t *)&buf, 0xCu);
                        }
                        goto LABEL_153;
                      }
                      goto LABEL_151;
                    }
LABEL_144:
                    size_t v73 = *((void *)this + 10);
                    BOOL v74 = v73;
                    if (v72) {
                      goto LABEL_145;
                    }
LABEL_151:
                    uint64_t v42 = os_log_type_enabled(v74, OS_LOG_TYPE_ERROR);
                    if (v42)
                    {
                      LOWORD(buf) = 0;
                      _os_log_error_impl(&dword_1C59C6000, v73, OS_LOG_TYPE_ERROR, "Failed to get call state!", (uint8_t *)&buf, 2u);
                    }
                    goto LABEL_153;
                  }
LABEL_128:
                  LOWORD(buf) = 0;
                  _os_log_impl(&dword_1C59C6000, v65, OS_LOG_TYPE_DEFAULT, "#I Getting call state", (uint8_t *)&buf, 2u);
                  goto LABEL_129;
                }
                goto LABEL_127;
              }
LABEL_126:
              if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
              {
                LOWORD(buf) = 0;
                _os_log_error_impl(&dword_1C59C6000, v62, OS_LOG_TYPE_ERROR, "Failed to get Bluetooth state!", (uint8_t *)&buf, 2u);
                unint64_t v65 = *((void *)this + 10);
                if (!os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_129;
                }
                goto LABEL_128;
              }
LABEL_127:
              unint64_t v65 = *((void *)this + 10);
              if (!os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_129;
              }
              goto LABEL_128;
            }
LABEL_118:
            uint64_t v62 = *((void *)this + 10);
            uint64_t v63 = v62;
            if (v61) {
              goto LABEL_119;
            }
            goto LABEL_126;
          }
LABEL_102:
          LOWORD(buf) = 0;
          _os_log_impl(&dword_1C59C6000, v54, OS_LOG_TYPE_DEFAULT, "#I Getting Bluetooth Status from kernel", (uint8_t *)&buf, 2u);
          goto LABEL_103;
        }
        goto LABEL_101;
      }
LABEL_100:
      if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_error_impl(&dword_1C59C6000, v51, OS_LOG_TYPE_ERROR, "Failed to get WiFi state!", (uint8_t *)&buf, 2u);
        int64_t v54 = *((void *)this + 10);
        if (!os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_103;
        }
        goto LABEL_102;
      }
LABEL_101:
      int64_t v54 = *((void *)this + 10);
      if (!os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_103;
      }
      goto LABEL_102;
    }
LABEL_92:
    int v51 = *((void *)this + 10);
    CFAllocatorRef v52 = v51;
    if (v50) {
      goto LABEL_93;
    }
    goto LABEL_100;
  }
LABEL_153:
  capabilities::abs::supportedSARFeatures((capabilities::abs *)v42);
  if (!capabilities::abs::operator&()) {
    goto LABEL_264;
  }
  std::string::size_type v76 = *((void *)this + 10);
  if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_1C59C6000, v76, OS_LOG_TYPE_DEFAULT, "#I Getting SAR Fusion Status from kernel", (uint8_t *)&buf, 2u);
  }
  xpc_object_t v77 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  uint64_t v78 = (AppleSARHelper *)off_1EA3D67B0;
  if (!off_1EA3D67B0)
  {
    AppleSARHelper::create_default_global((uint64_t *)&buf, v77);
    long long v79 = buf;
    long long buf = 0uLL;
    int v80 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
    off_1EA3D67B0 = v79;
    if (v80 && !atomic_fetch_add(&v80->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
    size_t v81 = (std::__shared_weak_count *)*((void *)&buf + 1);
    if (*((void *)&buf + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
    uint64_t v78 = (AppleSARHelper *)off_1EA3D67B0;
  }
  uint64_t v82 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
  if (*(&off_1EA3D67B0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EA3D67B0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  if (*((_DWORD *)v78 + 1))
  {
    *(void *)&long long buf = 3;
    v148[0] = 0;
    unsigned int v146 = 1;
    char v83 = AppleSARHelper::callUserClientMethod(v78, 2, (const unint64_t *)&buf, 1, (char *)this + 161, 4, v148, &v146, (char *)this + 161, 4uLL);
    if (!v82) {
      goto LABEL_171;
    }
  }
  else
  {
    char v83 = 0;
    if (!v82) {
      goto LABEL_171;
    }
  }
  if (!atomic_fetch_add(&v82->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
    std::__shared_weak_count::__release_weak(v82);
    if (v83) {
      goto LABEL_174;
    }
    goto LABEL_172;
  }
LABEL_171:
  if (v83) {
    goto LABEL_174;
  }
LABEL_172:
  uint64_t v84 = *((void *)this + 10);
  if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    _os_log_error_impl(&dword_1C59C6000, v84, OS_LOG_TYPE_ERROR, "Failed to get Accessory State!", (uint8_t *)&buf, 2u);
  }
LABEL_174:
  uint64_t v85 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  uint64_t v86 = (AppleSARHelper *)off_1EA3D67B0;
  if (!off_1EA3D67B0)
  {
    AppleSARHelper::create_default_global((uint64_t *)&buf, v85);
    long long v87 = buf;
    long long buf = 0uLL;
    BOOL v88 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
    off_1EA3D67B0 = v87;
    if (v88 && !atomic_fetch_add(&v88->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
    char v89 = (std::__shared_weak_count *)*((void *)&buf + 1);
    if (*((void *)&buf + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
    uint64_t v86 = (AppleSARHelper *)off_1EA3D67B0;
  }
  uint64_t v90 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
  if (*(&off_1EA3D67B0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EA3D67B0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  if (*((_DWORD *)v86 + 1))
  {
    *(void *)&long long buf = 3;
    v148[0] = 0;
    unsigned int v146 = 1;
    char v91 = AppleSARHelper::callUserClientMethod(v86, 3, (const unint64_t *)&buf, 1, (char *)this + 165, 1, v148, &v146, (char *)this + 165, 1uLL);
    if (!v90) {
      goto LABEL_189;
    }
  }
  else
  {
    char v91 = 0;
    if (!v90) {
      goto LABEL_189;
    }
  }
  if (!atomic_fetch_add(&v90->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
    std::__shared_weak_count::__release_weak(v90);
    if (v91) {
      goto LABEL_192;
    }
    goto LABEL_190;
  }
LABEL_189:
  if (v91) {
    goto LABEL_192;
  }
LABEL_190:
  uint64_t v92 = *((void *)this + 10);
  if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    _os_log_error_impl(&dword_1C59C6000, v92, OS_LOG_TYPE_ERROR, "Failed to get OBD and Tuner State!", (uint8_t *)&buf, 2u);
  }
LABEL_192:
  *((unsigned char *)this + 166) = *((unsigned char *)this + 165);
  uint64_t v93 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  std::string v94 = (AppleSARHelper *)off_1EA3D67B0;
  if (!off_1EA3D67B0)
  {
    AppleSARHelper::create_default_global((uint64_t *)&buf, v93);
    long long v95 = buf;
    long long buf = 0uLL;
    uint64_t v96 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
    off_1EA3D67B0 = v95;
    if (v96 && !atomic_fetch_add(&v96->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
    uint64_t v97 = (std::__shared_weak_count *)*((void *)&buf + 1);
    if (*((void *)&buf + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
    std::string v94 = (AppleSARHelper *)off_1EA3D67B0;
  }
  uint64_t v98 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
  if (*(&off_1EA3D67B0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EA3D67B0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  if (*((_DWORD *)v94 + 1))
  {
    *(void *)&long long buf = 3;
    v148[0] = 0;
    unsigned int v146 = 1;
    char v99 = AppleSARHelper::callUserClientMethod(v94, 6, (const unint64_t *)&buf, 1, (char *)this + 167, 1, v148, &v146, (char *)this + 167, 1uLL);
    if (!v98) {
      goto LABEL_207;
    }
  }
  else
  {
    char v99 = 0;
    if (!v98) {
      goto LABEL_207;
    }
  }
  if (!atomic_fetch_add(&v98->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
    std::__shared_weak_count::__release_weak(v98);
    if (v99) {
      goto LABEL_210;
    }
    goto LABEL_208;
  }
LABEL_207:
  if (v99) {
    goto LABEL_210;
  }
LABEL_208:
  xpc_object_t v100 = *((void *)this + 10);
  if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    _os_log_error_impl(&dword_1C59C6000, v100, OS_LOG_TYPE_ERROR, "Failed to get Speaker State!", (uint8_t *)&buf, 2u);
  }
LABEL_210:
  xpc_object_t v101 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  uint64_t v102 = (AppleSARHelper *)off_1EA3D67B0;
  if (!off_1EA3D67B0)
  {
    AppleSARHelper::create_default_global((uint64_t *)&buf, v101);
    long long v103 = buf;
    long long buf = 0uLL;
    xpc_object_t v104 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
    off_1EA3D67B0 = v103;
    if (v104 && !atomic_fetch_add(&v104->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
    __n128 v105 = (std::__shared_weak_count *)*((void *)&buf + 1);
    if (*((void *)&buf + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
    uint64_t v102 = (AppleSARHelper *)off_1EA3D67B0;
  }
  uint64_t v106 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
  if (*(&off_1EA3D67B0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EA3D67B0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  if (*((_DWORD *)v102 + 1))
  {
    *(void *)&long long buf = 3;
    v148[0] = 0;
    unsigned int v146 = 1;
    char v107 = AppleSARHelper::callUserClientMethod(v102, 7, (const unint64_t *)&buf, 1, (char *)this + 168, 1, v148, &v146, (char *)this + 168, 1uLL);
    if (!v106) {
      goto LABEL_225;
    }
  }
  else
  {
    char v107 = 0;
    if (!v106) {
      goto LABEL_225;
    }
  }
  if (!atomic_fetch_add(&v106->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
    std::__shared_weak_count::__release_weak(v106);
    if (v107) {
      goto LABEL_228;
    }
    goto LABEL_226;
  }
LABEL_225:
  if (v107) {
    goto LABEL_228;
  }
LABEL_226:
  int v108 = *((void *)this + 10);
  if (os_log_type_enabled(v108, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    _os_log_error_impl(&dword_1C59C6000, v108, OS_LOG_TYPE_ERROR, "Failed to get Grip State!", (uint8_t *)&buf, 2u);
  }
LABEL_228:
  *((unsigned char *)this + 169) = *((unsigned char *)this + 168);
  int v109 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  std::string v110 = (AppleSARHelper *)off_1EA3D67B0;
  if (!off_1EA3D67B0)
  {
    AppleSARHelper::create_default_global((uint64_t *)&buf, v109);
    long long v111 = buf;
    long long buf = 0uLL;
    uint64_t v112 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
    off_1EA3D67B0 = v111;
    if (v112 && !atomic_fetch_add(&v112->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
    uint64_t v113 = (std::__shared_weak_count *)*((void *)&buf + 1);
    if (*((void *)&buf + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
    std::string v110 = (AppleSARHelper *)off_1EA3D67B0;
  }
  uint64_t v114 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
  if (*(&off_1EA3D67B0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EA3D67B0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  if (*((_DWORD *)v110 + 1))
  {
    *(void *)&long long buf = 3;
    v148[0] = 0;
    unsigned int v146 = 1;
    char v115 = AppleSARHelper::callUserClientMethod(v110, 8, (const unint64_t *)&buf, 1, (char *)this + 170, 1, v148, &v146, (char *)this + 170, 1uLL);
    if (!v114) {
      goto LABEL_243;
    }
  }
  else
  {
    char v115 = 0;
    if (!v114) {
      goto LABEL_243;
    }
  }
  if (!atomic_fetch_add(&v114->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
    std::__shared_weak_count::__release_weak(v114);
    if (v115) {
      goto LABEL_246;
    }
    goto LABEL_244;
  }
LABEL_243:
  if (v115) {
    goto LABEL_246;
  }
LABEL_244:
  uint64_t v116 = *((void *)this + 10);
  if (os_log_type_enabled(v116, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    _os_log_error_impl(&dword_1C59C6000, v116, OS_LOG_TYPE_ERROR, "Failed to get Power State!", (uint8_t *)&buf, 2u);
  }
LABEL_246:
  uint64_t v117 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  CFAllocatorRef v118 = (AppleSARHelper *)off_1EA3D67B0;
  if (!off_1EA3D67B0)
  {
    AppleSARHelper::create_default_global((uint64_t *)&buf, v117);
    long long v119 = buf;
    long long buf = 0uLL;
    CFAllocatorRef v120 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
    off_1EA3D67B0 = v119;
    if (v120 && !atomic_fetch_add(&v120->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
    uint64_t v121 = (std::__shared_weak_count *)*((void *)&buf + 1);
    if (*((void *)&buf + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
    CFAllocatorRef v118 = (AppleSARHelper *)off_1EA3D67B0;
  }
  CFAllocatorRef v122 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
  if (*(&off_1EA3D67B0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EA3D67B0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  if (*((_DWORD *)v118 + 1))
  {
    *(void *)&long long buf = 3;
    v148[0] = 0;
    unsigned int v146 = 1;
    char v123 = AppleSARHelper::callUserClientMethod(v118, 9, (const unint64_t *)&buf, 1, (char *)this + 171, 1, v148, &v146, (char *)this + 171, 1uLL);
    if (!v122) {
      goto LABEL_261;
    }
  }
  else
  {
    char v123 = 0;
    if (!v122) {
      goto LABEL_261;
    }
  }
  if (!atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
    std::__shared_weak_count::__release_weak(v122);
    if (v123) {
      goto LABEL_264;
    }
    goto LABEL_262;
  }
LABEL_261:
  if (v123) {
    goto LABEL_264;
  }
LABEL_262:
  uint64_t v124 = *((void *)this + 10);
  if (os_log_type_enabled(v124, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    _os_log_error_impl(&dword_1C59C6000, v124, OS_LOG_TYPE_ERROR, "Failed to get Wrist State!", (uint8_t *)&buf, 2u);
  }
LABEL_264:
  if (v126) {
    std::__shared_weak_count::__release_weak(v126);
  }
  if (v132) {
    std::__shared_weak_count::__release_weak(v132);
  }
  if (v138) {
    std::__shared_weak_count::__release_weak(v138);
  }
  std::__shared_weak_count::__release_weak(v16);
}

void sub_1C5A5BCD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,std::__shared_weak_count *a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,std::__shared_weak_count *a50)
{
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  if (a20) {
    std::__shared_weak_count::__release_weak(a20);
  }
  if (a35) {
    std::__shared_weak_count::__release_weak(a35);
  }
  if (a50) {
    std::__shared_weak_count::__release_weak(a50);
  }
  std::__shared_weak_count::__release_weak(v50);
  _Unwind_Resume(a1);
}

void ___ZN9SARModule25finishInitialization_syncEv_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = (void *)a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      CFDictionaryRef v36 = (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL;
      abm::client::Event::getData((uint64_t *)&v36, *(abm::client::Event **)a2);
      CFDictionaryRef v9 = v36;
      if (v36) {
        uint64_t v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        uint64_t v10 = 0;
      }
      if (!v10) {
        goto LABEL_39;
      }
      v35[0] = 0xAAAAAAAAAAAAAAAALL;
      v35[1] = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v35, v36);
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v34 = 0;
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v37, (const char *)*MEMORY[0x1E4F4C688]);
      ctu::cf::map_adapter::getString();
      MEMORY[0x1C8794290](&v37);
      uint64_t v34 = v32;
      *(_OWORD *)std::string __p = v31;
      if (v32 >= 0) {
        size_t v11 = HIBYTE(v32);
      }
      else {
        size_t v11 = *((void *)&v31 + 1);
      }
      if (v11 == strlen((const char *)*MEMORY[0x1E4F4CAE8])
        && (v32 >= 0 ? (xpc_object_t v12 = __p) : (xpc_object_t v12 = (void **)__p[0]), !memcmp(v12, (const void *)*MEMORY[0x1E4F4CAE8], v11)))
      {
        long long v25 = *(abm::client::Event **)a2;
        uint64_t v26 = *(void *)(a2 + 8);
        if (v26) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
        }
        __int16 v27 = (std::__shared_weak_count *)v5[7];
        if (!v27 || (uint64_t v28 = v5[6], (v29 = std::__shared_weak_count::lock(v27)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        uint64_t v19 = v29;
        uint64_t v30 = operator new(0x18uLL);
        void *v30 = v5;
        v30[1] = v25;
        v30[2] = v26;
        uint64_t v21 = v5[8];
        p_shared_owners = &v19->__shared_owners_;
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        char v23 = operator new(0x18uLL);
        void *v23 = v30;
        v23[1] = v28;
        v23[2] = v19;
        uint64_t v24 = (void (__cdecl *)(void *))_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_25finishInitialization_syncEvEUb_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_;
      }
      else
      {
        if (v11 != strlen((const char *)*MEMORY[0x1E4F4CCD8])
          || (v32 >= 0 ? (statfs v13 = __p) : (statfs v13 = (void **)__p[0]), memcmp(v13, (const void *)*MEMORY[0x1E4F4CCD8], v11)))
        {
LABEL_36:
          if (SHIBYTE(v34) < 0) {
            operator delete(__p[0]);
          }
          MEMORY[0x1C87942E0](v35);
          CFDictionaryRef v9 = v36;
LABEL_39:
          if (v9) {
            CFRelease(v9);
          }
          return;
        }
        uint64_t v14 = *(abm::client::Event **)a2;
        uint64_t v15 = *(void *)(a2 + 8);
        if (v15) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = (std::__shared_weak_count *)v5[7];
        if (!v16 || (v17 = v5[6], (size_t v18 = std::__shared_weak_count::lock(v16)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        uint64_t v19 = v18;
        uint64_t v20 = operator new(0x18uLL);
        *uint64_t v20 = v5;
        v20[1] = v14;
        v20[2] = v15;
        uint64_t v21 = v5[8];
        p_shared_owners = &v19->__shared_owners_;
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        char v23 = operator new(0x18uLL);
        void *v23 = v20;
        v23[1] = v17;
        v23[2] = v19;
        uint64_t v24 = (void (__cdecl *)(void *))_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_25finishInitialization_syncEvEUb_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_;
      }
      dispatch_async_f(v21, v23, v24);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      goto LABEL_36;
    }
  }
}

uint64_t __copy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN9SARModule25finishInitialization_syncEv_block_invoke_4(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (SARModule *)a1[4];
    size_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = a1[5];
      if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v6) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6) {
          return;
        }
      }
      SARModule::dumpSARFusionState(v3);
    }
  }
}

void SARModule::dumpSARFusionState(SARModule *this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = sar::toStringAccessory((sar *)*(unsigned int *)((char *)this + 161));
    int v4 = *(_DWORD *)((char *)this + 161);
    int v13 = 136315394;
    uint64_t v14 = v3;
    __int16 v15 = 1024;
    int v16 = v4;
    _os_log_debug_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEBUG, "#D SAR Fusion: Accessory: %s (0x%x)", (uint8_t *)&v13, 0x12u);
    uint64_t v2 = *((void *)this + 10);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
LABEL_3:
      if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    goto LABEL_3;
  }
  uint64_t v5 = sar::toString();
  int v13 = 136315138;
  uint64_t v14 = v5;
  _os_log_debug_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEBUG, "#D SAR Fusion: Sar Selection: %s", (uint8_t *)&v13, 0xCu);
  uint64_t v2 = *((void *)this + 10);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
LABEL_4:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v6 = sar::toString();
  int v13 = 136315138;
  uint64_t v14 = v6;
  _os_log_debug_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEBUG, "#D SAR Fusion: Tuner State: %s SPACE", (uint8_t *)&v13, 0xCu);
  uint64_t v2 = *((void *)this + 10);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
LABEL_5:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_12:
  if (*((unsigned char *)this + 167)) {
    uint64_t v7 = "ON";
  }
  else {
    uint64_t v7 = "OFF";
  }
  int v13 = 136315138;
  uint64_t v14 = (uint64_t)v7;
  _os_log_debug_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEBUG, "#D SAR Fusion: Speaker: %s", (uint8_t *)&v13, 0xCu);
  uint64_t v2 = *((void *)this + 10);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
LABEL_6:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }
LABEL_16:
  int v8 = *((unsigned __int8 *)this + 168);
  CFDictionaryRef v9 = "Default Hand Position";
  if (v8 == 1) {
    CFDictionaryRef v9 = "Left Hand";
  }
  if (v8 == 2) {
    uint64_t v10 = "Right Hand";
  }
  else {
    uint64_t v10 = v9;
  }
  int v13 = 136315138;
  uint64_t v14 = (uint64_t)v10;
  _os_log_debug_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEBUG, "#D SAR Fusion: Hand Grip: %s", (uint8_t *)&v13, 0xCu);
  uint64_t v2 = *((void *)this + 10);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
LABEL_7:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    goto LABEL_30;
  }
LABEL_22:
  if ((*((unsigned char *)this + 170) & 8) != 0)
  {
    size_t v11 = "Arcas";
  }
  else if ((*((unsigned char *)this + 170) & 4) != 0)
  {
    size_t v11 = "Callisto";
  }
  else if ((*((unsigned char *)this + 170) & 2) != 0)
  {
    size_t v11 = "USB";
  }
  else
  {
    size_t v11 = "Power Off";
  }
  int v13 = 136315138;
  uint64_t v14 = (uint64_t)v11;
  _os_log_debug_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEBUG, "#D SAR Fusion: Power: %s", (uint8_t *)&v13, 0xCu);
  uint64_t v2 = *((void *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
LABEL_30:
    if (*((unsigned char *)this + 171)) {
      xpc_object_t v12 = "ON";
    }
    else {
      xpc_object_t v12 = "OFF";
    }
    int v13 = 136315138;
    uint64_t v14 = (uint64_t)v12;
    _os_log_debug_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEBUG, "#D SAR Fusion: Wrist: %s", (uint8_t *)&v13, 0xCu);
  }
}

void ___ZN9SARModule25finishInitialization_syncEv_block_invoke_2(void *a1, abm::client::Event **a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = (SARModule *)a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      abm::client::Event::getData((uint64_t *)&cf, *a2);
      if (cf) {
        uint64_t v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        uint64_t v10 = 0;
      }
      if (v10)
      {
        ctu::cf_to_xpc((uint64_t *)&object, (ctu *)cf, v9);
        xpc_object_t v11 = object;
        if (object && MEMORY[0x1C8795EB0](object) == MEMORY[0x1E4F14590]) {
          xpc_retain(v11);
        }
        else {
          xpc_object_t v11 = xpc_null_create();
        }
        xpc_release(object);
        xpc_object_t value = xpc_dictionary_get_value(v11, (const char *)*MEMORY[0x1E4F4C1B0]);
        xpc_object_t object = value;
        if (value) {
          xpc_retain(value);
        }
        else {
          xpc_object_t object = xpc_null_create();
        }
        int v14 = xpc::dyn_cast_or_default((xpc *)&object, 0);
        xpc_release(object);
        if (v14) {
          SARModule::submitCASARFusion((uint64_t)v5, 0);
        }
        SARModule::processCallStatus(v5, v14);
        xpc_release(v11);
      }
      else
      {
        xpc_object_t v12 = *((void *)v5 + 10);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          LOWORD(object) = 0;
          _os_log_error_impl(&dword_1C59C6000, v12, OS_LOG_TYPE_ERROR, "No input is given for voice call active state", (uint8_t *)&object, 2u);
        }
      }
      if (cf) {
        CFRelease(cf);
      }
    }
  }
}

void sub_1C5A5C934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, const void *a10)
{
  xpc_release(v10);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  _Unwind_Resume(a1);
}

void SARModule::submitCASARFusion(uint64_t a1, int a2)
{
  v64.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v64.tv_usec = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday(&v64, 0);
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  uint64_t v5 = MEMORY[0x1E4F14590];
  if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v4) == v5)
    {
      xpc_retain(v4);
      xpc_object_t v6 = v4;
    }
    else
    {
      xpc_object_t v6 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v4 = 0;
  }
  xpc_release(v4);
  uint64_t v7 = *(void *)(a1 + 304);
  if (v7)
  {
    *(void *)(a1 + 304) = v64.tv_sec - v7;
    if ((*(unsigned char *)(a1 + 166) & 0xF) != 0) {
      uint64_t v8 = "Head";
    }
    else {
      uint64_t v8 = "Body";
    }
    xpc_object_t v9 = xpc_string_create(v8);
    if (!v9) {
      xpc_object_t v9 = xpc_null_create();
    }
    xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4CCA8], v9);
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    if (*(unsigned __int8 *)(a1 + 166) >= 0x10u) {
      xpc_object_t v11 = "Freespace";
    }
    else {
      xpc_object_t v11 = "Non-Freespace";
    }
    xpc_object_t v12 = xpc_string_create(v11);
    if (!v12) {
      xpc_object_t v12 = xpc_null_create();
    }
    xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4CE50], v12);
    xpc_object_t v13 = xpc_null_create();
    xpc_release(v12);
    xpc_release(v13);
    if (*(unsigned char *)(a1 + 169) == 2)
    {
      int v14 = "Right";
    }
    else if (*(unsigned char *)(a1 + 168) == 1)
    {
      int v14 = "Left";
    }
    else
    {
      int v14 = "Default";
    }
    xpc_object_t v19 = xpc_string_create(v14);
    if (!v19) {
      xpc_object_t v19 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v15 = xpc_string_create("NONE");
    if (!v15) {
      xpc_object_t v15 = xpc_null_create();
    }
    xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4CCA8], v15);
    xpc_object_t v16 = xpc_null_create();
    xpc_release(v15);
    xpc_release(v16);
    xpc_object_t v17 = xpc_string_create("NONE");
    if (!v17) {
      xpc_object_t v17 = xpc_null_create();
    }
    xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4CE50], v17);
    xpc_object_t v18 = xpc_null_create();
    xpc_release(v17);
    xpc_release(v18);
    xpc_object_t v19 = xpc_string_create("NONE");
    if (!v19) {
      xpc_object_t v19 = xpc_null_create();
    }
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4CCA0], v19);
  xpc_object_t v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  if ((*(unsigned char *)(a1 + 165) & 0xF) != 0) {
    uint64_t v21 = "Head";
  }
  else {
    uint64_t v21 = "Body";
  }
  xpc_object_t v22 = xpc_string_create(v21);
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4CC98], v22);
  xpc_object_t v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  if (*(unsigned __int8 *)(a1 + 165) >= 0x10u) {
    uint64_t v24 = "Freespace";
  }
  else {
    uint64_t v24 = "Non-Freespace";
  }
  xpc_object_t v25 = xpc_string_create(v24);
  if (!v25) {
    xpc_object_t v25 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4CE48], v25);
  xpc_object_t v26 = xpc_null_create();
  xpc_release(v25);
  xpc_release(v26);
  int v27 = *(unsigned __int8 *)(a1 + 168);
  uint64_t v28 = "Default";
  if (v27 == 1) {
    uint64_t v28 = "Left";
  }
  if (v27 == 2) {
    uint64_t v29 = "Right";
  }
  else {
    uint64_t v29 = v28;
  }
  xpc_object_t v30 = xpc_string_create(v29);
  uint64_t v31 = MEMORY[0x1E4F14590];
  if (!v30) {
    xpc_object_t v30 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4CC90], v30);
  xpc_object_t v32 = xpc_null_create();
  xpc_release(v30);
  xpc_release(v32);
  if (a2 == 1)
  {
    HIBYTE(v63) = 12;
    strcpy((char *)&string, "EventUpdated");
  }
  else
  {
    if (a2) {
      uint64_t v33 = "UnknownReason";
    }
    else {
      uint64_t v33 = "CallConnected";
    }
    HIBYTE(v63) = 13;
    *(void *)&long long string = *(void *)v33;
    *(void *)((char *)&string + 5) = *(void *)(v33 + 5);
    BYTE13(string) = 0;
  }
  xpc_object_t v34 = xpc_string_create((const char *)&string);
  if (!v34) {
    xpc_object_t v34 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4D170], v34);
  xpc_object_t v35 = xpc_null_create();
  xpc_release(v34);
  xpc_release(v35);
  if (SHIBYTE(v63) < 0) {
    operator delete((void *)string);
  }
  xpc_object_t v36 = xpc_int64_create(*(void *)(a1 + 304));
  if (!v36) {
    xpc_object_t v36 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4CA60], v36);
  xpc_object_t v37 = xpc_null_create();
  xpc_release(v36);
  xpc_release(v37);
  xpc_object_t v38 = xpc_dictionary_create(0, 0, 0);
  if (v38 || (xpc_object_t v38 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v38) == v31)
    {
      xpc_retain(v38);
      xpc_object_t v39 = v38;
    }
    else
    {
      xpc_object_t v39 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v39 = xpc_null_create();
    xpc_object_t v38 = 0;
  }
  xpc_release(v38);
  xpc_object_t v40 = xpc_string_create((const char *)*MEMORY[0x1E4F4C4C0]);
  if (!v40) {
    xpc_object_t v40 = xpc_null_create();
  }
  xpc_dictionary_set_value(v39, (const char *)*MEMORY[0x1E4F4C540], v40);
  xpc_object_t v41 = xpc_null_create();
  xpc_release(v40);
  xpc_release(v41);
  xpc_object_t v42 = xpc_string_create((const char *)*MEMORY[0x1E4F4C7B8]);
  if (!v42) {
    xpc_object_t v42 = xpc_null_create();
  }
  xpc_dictionary_set_value(v39, (const char *)*MEMORY[0x1E4F4C548], v42);
  xpc_object_t v43 = xpc_null_create();
  xpc_release(v42);
  xpc_release(v43);
  xpc_object_t v44 = xpc_string_create((const char *)*MEMORY[0x1E4F4C368]);
  if (!v44) {
    xpc_object_t v44 = xpc_null_create();
  }
  xpc_dictionary_set_value(v39, (const char *)*MEMORY[0x1E4F4C3C8], v44);
  xpc_object_t v45 = xpc_null_create();
  xpc_release(v44);
  xpc_release(v45);
  if (v6)
  {
    xpc_retain(v6);
    xpc_object_t v46 = v6;
  }
  else
  {
    xpc_object_t v46 = xpc_null_create();
  }
  xpc_dictionary_set_value(v39, (const char *)*MEMORY[0x1E4F4CB40], v46);
  xpc_object_t v47 = xpc_null_create();
  xpc_release(v46);
  xpc_release(v47);
  xpc_object_t v48 = xpc_dictionary_create(0, 0, 0);
  if (v48 || (xpc_object_t v48 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v48) == v31)
    {
      xpc_retain(v48);
      xpc_object_t v49 = v48;
    }
    else
    {
      xpc_object_t v49 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v49 = xpc_null_create();
    xpc_object_t v48 = 0;
  }
  xpc_release(v48);
  xpc_object_t v50 = xpc_string_create((const char *)*MEMORY[0x1E4F4C158]);
  if (!v50) {
    xpc_object_t v50 = xpc_null_create();
  }
  xpc_dictionary_set_value(v49, (const char *)*MEMORY[0x1E4F4C190], v50);
  xpc_object_t v51 = xpc_null_create();
  xpc_release(v50);
  xpc_release(v51);
  if (v39)
  {
    xpc_retain(v39);
    xpc_object_t v52 = v39;
  }
  else
  {
    xpc_object_t v52 = xpc_null_create();
  }
  xpc_dictionary_set_value(v49, (const char *)*MEMORY[0x1E4F4C188], v52);
  xpc_object_t v53 = xpc_null_create();
  xpc_release(v52);
  xpc_release(v53);
  int64_t v54 = (const void *)*MEMORY[0x1E4F4C738];
  size_t v55 = strlen((const char *)*MEMORY[0x1E4F4C738]);
  if (v55 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v56 = v55;
  if (v55 >= 0x17)
  {
    uint64_t v58 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v55 | 7) != 0x17) {
      uint64_t v58 = v55 | 7;
    }
    uint64_t v59 = v58 + 1;
    p_long long string = (long long *)operator new(v58 + 1);
    *((void *)&string + 1) = v56;
    unint64_t v63 = v59 | 0x8000000000000000;
    *(void *)&long long string = p_string;
LABEL_95:
    memmove(p_string, v54, v56);
    *((unsigned char *)p_string + v56) = 0;
    xpc_object_t object = v49;
    if (v49) {
      goto LABEL_91;
    }
    goto LABEL_96;
  }
  HIBYTE(v63) = v55;
  p_long long string = &string;
  if (v55) {
    goto LABEL_95;
  }
  LOBYTE(string) = 0;
  xpc_object_t object = v49;
  if (v49)
  {
LABEL_91:
    xpc_retain(v49);
    goto LABEL_97;
  }
LABEL_96:
  xpc_object_t object = xpc_null_create();
LABEL_97:
  unint64_t v60 = 0;
  Service::runCommand(a1, (uint64_t)&string, &object, &v60);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(v63) < 0) {
    operator delete((void *)string);
  }
  *(void *)(a1 + 304) = v64.tv_sec;
  xpc_release(v49);
  xpc_release(v39);
  xpc_release(v6);
}

void sub_1C5A5D318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  xpc_release(object);
  if (a17 < 0) {
    operator delete(__p);
  }
  xpc_release(v19);
  xpc_release(v18);
  xpc_release(v17);
  _Unwind_Resume(a1);
}

void SARModule::processCallStatus(SARModule *this, char a2)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 7);
  if (!v3 || (uint64_t v5 = *((void *)this + 6), (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = operator new(0x10uLL);
  *(void *)uint64_t v8 = this;
  v8[8] = a2;
  xpc_object_t v9 = *((void *)this + 8);
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v10 = operator new(0x18uLL);
  *xpc_object_t v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<SARModule>::execute_wrapped<SARModule::processCallStatus(BOOL)::$_0>(SARModule::processCallStatus(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SARModule::processCallStatus(BOOL)::$_0,dispatch_queue_s *::default_delete<SARModule::processCallStatus(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void SARModule::initializeHelpers_sync(SARModule *this)
{
  uint64_t v2 = *((void *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Set up SAR Helpers", buf, 2u);
  }
  xpc_object_t v4 = *((void *)this + 8);
  uint64_t v31 = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  CMOnBodyDelegate::create(&v31, v3, buf);
  long long v5 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  xpc_object_t v6 = (std::__shared_weak_count *)*((void *)this + 14);
  *(_OWORD *)((char *)this + 104) = v5;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = (capabilities::abs *)v31;
  if (v31) {
    dispatch_release(v31);
  }
  if (*((void *)this + 13)
    || (xpc_object_t v9 = *((void *)this + 10),
        uint64_t v8 = (capabilities::abs *)os_log_type_enabled(v9, OS_LOG_TYPE_ERROR),
        !v8))
  {
    capabilities::abs::supportedSARFeatures(v8);
    if (!capabilities::abs::operator&()) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  *(_WORD *)long long buf = 0;
  _os_log_error_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_ERROR, "Failed to create core motion on-body manager", buf, 2u);
  capabilities::abs::supportedSARFeatures(v24);
  if (capabilities::abs::operator&())
  {
LABEL_16:
    SARModule::initializeWiFi_sync(this);
    SARModule::initializeBluetooth_sync(this);
    SARModule::initializeVoIPCallDetection_sync(this);
  }
LABEL_17:
  SARModule::initializeAudio_sync(this);
  if (CMHandDetectionDelegate::isSupported(v10)) {
    SARModule::initializeHandDetection_sync(this);
  }
  SARModule::initializeOBD_sync(this);
  SARModule::initializeAccessory_sync(this);
  SARModule::initializePowerSource_sync(this);
  xpc_object_t v11 = (std::__shared_weak_count *)*((void *)this + 7);
  if (!v11 || (uint64_t v12 = *((void *)this + 6), (v13 = std::__shared_weak_count::lock(v11)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v14 = v13;
  atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v14);
  }
  xpc_object_t v15 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  uint64_t v16 = off_1EA3D67B0;
  if (!off_1EA3D67B0)
  {
    AppleSARHelper::create_default_global((uint64_t *)buf, v15);
    long long v17 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    xpc_object_t v18 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
    off_1EA3D67B0 = v17;
    if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    xpc_object_t v19 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    uint64_t v16 = off_1EA3D67B0;
  }
  xpc_object_t v20 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
  uint64_t v29 = v16;
  uint64_t v30 = *(&off_1EA3D67B0 + 1);
  if (*(&off_1EA3D67B0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EA3D67B0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 3321888768;
  v25[2] = ___ZN9SARModule22initializeHelpers_syncEv_block_invoke;
  v25[3] = &__block_descriptor_56_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE_e12_v20__0i8_v12l;
  v25[4] = this;
  v25[5] = v12;
  xpc_object_t v26 = v14;
  atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v21 = _Block_copy(v25);
  xpc_object_t v22 = *((void *)this + 8);
  if (v22) {
    dispatch_retain(*((dispatch_object_t *)this + 8));
  }
  xpc_object_t aBlock = v21;
  dispatch_object_t object = v22;
  AppleSARHelper::registerSARServiceCallback();
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (!v20 || atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    xpc_object_t v23 = *((void *)this + 10);
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  xpc_object_t v23 = *((void *)this + 10);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
LABEL_42:
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C59C6000, v23, OS_LOG_TYPE_DEFAULT, "#I Finish Initialization Done", buf, 2u);
  }
LABEL_43:
  if (v26) {
    std::__shared_weak_count::__release_weak(v26);
  }
  std::__shared_weak_count::__release_weak(v14);
}

void sub_1C5A5D9F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, char a18)
{
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  std::__shared_weak_count::__release_weak(v18);
  _Unwind_Resume(a1);
}

void sub_1C5A5DA54(_Unwind_Exception *a1)
{
  queue v3 = *(NSObject **)(v1 - 72);
  if (v3)
  {
    dispatch_release(v3);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1C5A5DA4CLL);
}

void SARModule::initializeWiFi_sync(SARModule *this)
{
  uint64_t v2 = *((void *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing WiFi", buf, 2u);
  }
  queue v3 = (WiFiManager *)(*(uint64_t (**)(SARModule *))(*(void *)this + 16))(this);
  WiFiManager::create(v3, (WiFiManager **)buf);
  long long v4 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  long long v5 = (std::__shared_weak_count *)*((void *)this + 16);
  *(_OWORD *)((char *)this + 120) = v4;
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  xpc_object_t v6 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v7 = *((void *)this + 15);
    if (v7)
    {
LABEL_9:
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 3221225472;
      aBlock[2] = ___ZN9SARModule19initializeWiFi_syncEv_block_invoke;
      aBlock[3] = &__block_descriptor_40_e8_v12__0B8l;
      aBlock[4] = this;
      uint64_t v8 = _Block_copy(aBlock);
      xpc_object_t v9 = *((void *)this + 8);
      if (v9) {
        dispatch_retain(v9);
      }
      xpc_object_t v15 = v8;
      dispatch_object_t object = v9;
      xpc_object_t v10 = *(void **)(v7 + 48);
      if ((unint64_t)v10 >= *(void *)(v7 + 56))
      {
        uint64_t v12 = std::vector<dispatch::callback<void({block_pointer})(BOOL)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(BOOL)> const&>((void *)(v7 + 40), (uint64_t)&v15);
        goto LABEL_17;
      }
      if (v8)
      {
        xpc_object_t v11 = _Block_copy(v8);
        xpc_object_t v9 = object;
        *xpc_object_t v10 = v11;
        v10[1] = v9;
        if (!v9)
        {
LABEL_15:
          uint64_t v12 = v10 + 2;
LABEL_17:
          *(void *)(v7 + 48) = v12;
          WiFiManager::notifyClients((id *)v7);
          if (object) {
            dispatch_release(object);
          }
          if (v15) {
            _Block_release(v15);
          }
          return;
        }
      }
      else
      {
        *xpc_object_t v10 = 0;
        v10[1] = v9;
        if (!v9) {
          goto LABEL_15;
        }
      }
      dispatch_retain(v9);
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v7 = *((void *)this + 15);
    if (v7) {
      goto LABEL_9;
    }
  }
  xpc_object_t v13 = *((void *)this + 10);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_ERROR, "Failed to create WiFi Manager", buf, 2u);
  }
}

void sub_1C5A5DCEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  dispatch::callback<void({block_pointer})(BOOL)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void SARModule::initializeBluetooth_sync(SARModule *this)
{
  uint64_t v2 = *((void *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing Bluetooth", buf, 2u);
  }
  queue v3 = (BluetoothManager *)(*(uint64_t (**)(SARModule *))(*(void *)this + 16))(this);
  BluetoothManager::create(v3, (BluetoothManager **)buf);
  long long v4 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  long long v5 = (std::__shared_weak_count *)*((void *)this + 19);
  *((_OWORD *)this + 9) = v4;
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  xpc_object_t v6 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v7 = *((void *)this + 18);
    if (v7)
    {
LABEL_9:
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 3221225472;
      aBlock[2] = ___ZN9SARModule24initializeBluetooth_syncEv_block_invoke;
      aBlock[3] = &__block_descriptor_40_e8_v12__0B8l;
      aBlock[4] = this;
      uint64_t v8 = _Block_copy(aBlock);
      xpc_object_t v9 = *((void *)this + 8);
      if (v9) {
        dispatch_retain(v9);
      }
      xpc_object_t v15 = v8;
      dispatch_object_t object = v9;
      xpc_object_t v10 = *(void **)(v7 + 48);
      if ((unint64_t)v10 >= *(void *)(v7 + 56))
      {
        uint64_t v12 = std::vector<dispatch::callback<void({block_pointer})(BOOL)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(BOOL)> const&>((void *)(v7 + 40), (uint64_t)&v15);
        goto LABEL_17;
      }
      if (v8)
      {
        xpc_object_t v11 = _Block_copy(v8);
        xpc_object_t v9 = object;
        *xpc_object_t v10 = v11;
        v10[1] = v9;
        if (!v9)
        {
LABEL_15:
          uint64_t v12 = v10 + 2;
LABEL_17:
          *(void *)(v7 + 48) = v12;
          BluetoothManager::notifyClients((id *)v7);
          if (object) {
            dispatch_release(object);
          }
          if (v15) {
            _Block_release(v15);
          }
          return;
        }
      }
      else
      {
        *xpc_object_t v10 = 0;
        v10[1] = v9;
        if (!v9) {
          goto LABEL_15;
        }
      }
      dispatch_retain(v9);
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v7 = *((void *)this + 18);
    if (v7) {
      goto LABEL_9;
    }
  }
  xpc_object_t v13 = *((void *)this + 10);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_ERROR, "Failed to create Bluetooth Manager", buf, 2u);
  }
}

void sub_1C5A5DF80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  dispatch::callback<void({block_pointer})(BOOL)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void SARModule::initializeVoIPCallDetection_sync(SARModule *this)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing FT Call Detection", buf, 2u);
  }
  queue v3 = (std::__shared_weak_count *)*((void *)this + 7);
  if (!v3 || (v4 = *((void *)this + 6), (long long v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v6 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = *((void *)this + 8);
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3321888768;
  v12[2] = ___ZN9SARModule32initializeVoIPCallDetection_syncEv_block_invoke;
  v12[3] = &__block_descriptor_56_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE_e15_v24__0B8B12r_16l;
  v12[4] = this;
  void v12[5] = v4;
  xpc_object_t v13 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v18 = 0;
  uint64_t v16 = (void (**)(void **))&unk_1F2106CE8;
  long long v17 = (capabilities::abs *)_Block_copy(v12);
  xpc_object_t v18 = (void **)&v16;
  capabilities::abs::supportedSARFeatures(v17);
  if (capabilities::abs::operator&())
  {
    uint64_t v8 = (char *)operator new(0x28uLL);
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = 0;
    *(void *)uint64_t v8 = &unk_1F21029B8;
    std::construct_at[abi:ne180100]<VoIPCallDelegate,dispatch::queue &,std::function<void ()(BOOL,BOOL,char const*)> &,VoIPCallDelegate*>((void ***)v8 + 3, &object, &v16);
    xpc_object_t v9 = (std::__shared_weak_count *)*((void *)this + 41);
    *((void *)this + 40) = v8 + 24;
    *((void *)this + 41) = v8;
    if (!v9)
    {
LABEL_14:
      xpc_object_t v10 = v18;
      if (v18 != (void **)&v16) {
        goto LABEL_15;
      }
      goto LABEL_23;
    }
  }
  else
  {
    xpc_object_t v9 = (std::__shared_weak_count *)*((void *)this + 41);
    *((void *)this + 40) = 0;
    *((void *)this + 41) = 0;
    if (!v9) {
      goto LABEL_14;
    }
  }
  if (atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  xpc_object_t v10 = v18;
  if (v18 != (void **)&v16)
  {
LABEL_15:
    if (v10) {
      (*((void (**)(void **))*v10 + 5))(v10);
    }
    xpc_object_t v11 = object;
    if (object) {
      goto LABEL_18;
    }
    goto LABEL_19;
  }
LABEL_23:
  v16[4]((void **)&v16);
  xpc_object_t v11 = object;
  if (object) {
LABEL_18:
  }
    dispatch_release(v11);
LABEL_19:
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  std::__shared_weak_count::__release_weak(v6);
}

void sub_1C5A5E28C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, dispatch_object_t object, uint64_t a17, uint64_t a18)
{
  std::__shared_weak_count::~__shared_weak_count(v19);
  operator delete(v21);
  std::function<void ()(BOOL,BOOL,char const*)>::~function(&a18);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    xpc_object_t v22 = object;
    if (!object)
    {
LABEL_3:
      std::__shared_weak_count::__release_weak(v18);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    xpc_object_t v22 = object;
    if (!object) {
      goto LABEL_3;
    }
  }
  dispatch_release(v22);
  std::__shared_weak_count::__release_weak(v18);
  _Unwind_Resume(a1);
}

void SARModule::initializeAudio_sync(SARModule *this)
{
  uint64_t v2 = *((void *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing Audio", buf, 2u);
  }
  queue v3 = (AudioManager *)(*(uint64_t (**)(SARModule *))(*(void *)this + 16))(this);
  AudioManager::create(v3, (AudioManager **)buf);
  long long v4 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  long long v5 = (std::__shared_weak_count *)*((void *)this + 23);
  *((_OWORD *)this + 11) = v4;
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  xpc_object_t v6 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (*((void *)this + 22)) {
      goto LABEL_9;
    }
LABEL_19:
    xpc_object_t v13 = *((void *)this + 10);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_ERROR, "Failed to create Audio Manager", buf, 2u);
    }
    return;
  }
  if (!*((void *)this + 22)) {
    goto LABEL_19;
  }
LABEL_9:
  {
    if (v20)
    {
      AudioManager::isAudioWiredPortSupported(void)::audioJackSupported = capabilities::txpower::supportsAudioJackReport(v20);
    }
  }
  if (AudioManager::isAudioWiredPortSupported(void)::audioJackSupported)
  {
    uint64_t v7 = (void *)*((void *)this + 22);
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZN9SARModule20initializeAudio_syncEv_block_invoke;
    aBlock[3] = &__block_descriptor_40_e8_v12__0B8l;
    aBlock[4] = this;
    uint64_t v8 = _Block_copy(aBlock);
    xpc_object_t v9 = *((void *)this + 8);
    if (v9) {
      dispatch_retain(*((dispatch_object_t *)this + 8));
    }
    xpc_object_t v26 = v8;
    dispatch_object_t object = v9;
    xpc_object_t v10 = (void *)v7[17];
    if ((unint64_t)v10 >= v7[18])
    {
      uint64_t v12 = std::vector<dispatch::callback<void({block_pointer})(BOOL)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(BOOL)> const&>(v7 + 16, (uint64_t)&v26);
      goto LABEL_22;
    }
    if (v8)
    {
      xpc_object_t v11 = _Block_copy(v8);
      xpc_object_t v9 = object;
      *xpc_object_t v10 = v11;
      v10[1] = v9;
      if (!v9)
      {
LABEL_17:
        uint64_t v12 = v10 + 2;
LABEL_22:
        v7[17] = v12;
        if (object) {
          dispatch_release(object);
        }
        if (v26) {
          _Block_release(v26);
        }
        goto LABEL_26;
      }
    }
    else
    {
      *xpc_object_t v10 = 0;
      v10[1] = v9;
      if (!v9) {
        goto LABEL_17;
      }
    }
    dispatch_retain(v9);
    goto LABEL_17;
  }
LABEL_26:
  {
    if (v21)
    {
      AudioManager::isAudioSpeakerSupported(void)::audioSpeakerSupported = capabilities::txpower::supportsAudioSpeaker(v21);
    }
  }
  if (AudioManager::isAudioSpeakerSupported(void)::audioSpeakerSupported)
  {
    int v14 = (void *)*((void *)this + 22);
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    void v22[2] = ___ZN9SARModule20initializeAudio_syncEv_block_invoke_2;
    v22[3] = &__block_descriptor_40_e8_v12__0B8l;
    v22[4] = this;
    xpc_object_t v15 = _Block_copy(v22);
    uint64_t v16 = *((void *)this + 8);
    if (v16) {
      dispatch_retain(v16);
    }
    xpc_object_t v23 = v15;
    dispatch_object_t v24 = v16;
    long long v17 = (void *)v14[13];
    if ((unint64_t)v17 >= v14[14])
    {
      uint64_t v19 = std::vector<dispatch::callback<void({block_pointer})(BOOL)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(BOOL)> const&>(v14 + 12, (uint64_t)&v23);
      goto LABEL_36;
    }
    if (v15)
    {
      xpc_object_t v18 = _Block_copy(v15);
      uint64_t v16 = v24;
      void *v17 = v18;
      v17[1] = v16;
      if (!v16)
      {
LABEL_34:
        uint64_t v19 = v17 + 2;
LABEL_36:
        v14[13] = v19;
        if (v24) {
          dispatch_release(v24);
        }
        if (v23) {
          _Block_release(v23);
        }
        return;
      }
    }
    else
    {
      void *v17 = 0;
      v17[1] = v16;
      if (!v16) {
        goto LABEL_34;
      }
    }
    dispatch_retain(v16);
    goto LABEL_34;
  }
}

void sub_1C5A5E6BC(_Unwind_Exception *a1)
{
}

void sub_1C5A5E6D4(_Unwind_Exception *a1)
{
}

void sub_1C5A5E6F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  dispatch::callback<void({block_pointer})(BOOL)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C5A5E708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  dispatch::callback<void({block_pointer})(BOOL)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void SARModule::initializeHandDetection_sync(SARModule *this)
{
  uint64_t v2 = *((void *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing Hand Detection", buf, 2u);
  }
  queue v3 = (char *)(*(uint64_t (**)(SARModule *))(*(void *)this + 16))(this);
  long long v4 = *((void *)this + 8);
  xpc_object_t v36 = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  long long v5 = *((void *)this + 9);
  xpc_object_t v35 = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  xpc_object_t v6 = (std::__shared_weak_count *)*((void *)this + 23);
  uint64_t v33 = *((void *)this + 22);
  xpc_object_t v34 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v31 = 0;
  xpc_object_t v32 = 0;
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 14);
  uint64_t v29 = *((void *)this + 13);
  uint64_t v30 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  HandDetectionManager::create(v3, &v36, &v35, &v33, &v31, &v29, (HandDetectionManager **)buf);
  long long v8 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  xpc_object_t v9 = (std::__shared_weak_count *)*((void *)this + 32);
  *(_OWORD *)((char *)this + 248) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  xpc_object_t v10 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  xpc_object_t v11 = v30;
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = v32;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  xpc_object_t v13 = v34;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (v35) {
    dispatch_release(v35);
  }
  if (v36) {
    dispatch_release(v36);
  }
  if (*((void *)this + 31))
  {
    int v14 = (std::__shared_weak_count *)*((void *)this + 7);
    if (!v14 || (uint64_t v15 = *((void *)this + 6), (v16 = std::__shared_weak_count::lock(v14)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    long long v17 = v16;
    p_shared_weak_owners = &v16->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v17);
    }
    uint64_t v19 = (void *)*((void *)this + 31);
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3321888768;
    aBlock[2] = ___ZN9SARModule28initializeHandDetection_syncEv_block_invoke;
    aBlock[3] = &__block_descriptor_56_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE_e8_v12__0i8l;
    aBlock[4] = this;
    void aBlock[5] = v15;
    xpc_object_t v26 = v17;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    xpc_object_t v20 = _Block_copy(aBlock);
    uint64_t v21 = *((void *)this + 8);
    if (v21) {
      dispatch_retain(v21);
    }
    int v27 = v20;
    uint64_t v28 = v21;
    xpc_object_t v22 = (void **)v19[4];
    if ((unint64_t)v22 >= v19[5])
    {
      dispatch_object_t v24 = std::vector<dispatch::callback<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)> const&>(v19 + 3, (uint64_t)&v27);
      uint64_t v21 = v28;
      void v19[4] = v24;
      if (!v21) {
        goto LABEL_43;
      }
      goto LABEL_42;
    }
    if (v20)
    {
      *xpc_object_t v22 = _Block_copy(v20);
      v22[1] = v21;
      if (!v21) {
        goto LABEL_41;
      }
    }
    else
    {
      *xpc_object_t v22 = 0;
      v22[1] = v21;
      if (!v21)
      {
LABEL_41:
        void v19[4] = v22 + 2;
        if (!v21)
        {
LABEL_43:
          if (v27) {
            _Block_release(v27);
          }
          if (v26) {
            std::__shared_weak_count::__release_weak(v26);
          }
          std::__shared_weak_count::__release_weak(v17);
          return;
        }
LABEL_42:
        dispatch_release(v21);
        goto LABEL_43;
      }
    }
    dispatch_retain(v21);
    goto LABEL_41;
  }
  xpc_object_t v23 = *((void *)this + 10);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C59C6000, v23, OS_LOG_TYPE_ERROR, "Failed to create hand detection manager!", buf, 2u);
  }
}

void sub_1C5A5EB94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17)
{
  dispatch::callback<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>::~callback((uint64_t)&a17);
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  std::__shared_weak_count::__release_weak(v17);
  _Unwind_Resume(a1);
}

void sub_1C5A5EBC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v11 - 96);
  xpc_object_t v13 = *(NSObject **)(v11 - 80);
  if (v13) {
    dispatch_release(v13);
  }
  int v14 = *(NSObject **)(v11 - 72);
  if (!v14) {
    _Unwind_Resume(a1);
  }
  dispatch_release(v14);
  _Unwind_Resume(a1);
}

void SARModule::initializeOBD_sync(SARModule *this)
{
  uint64_t v2 = *((void *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing OBD", buf, 2u);
  }
  queue v3 = (std::__shared_weak_count *)*((void *)this + 7);
  if (!v3 || (v4 = *((void *)this + 6), (long long v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v6 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = (char *)(*(uint64_t (**)(SARModule *))(*(void *)this + 16))(this);
  long long v8 = *((void *)this + 8);
  uint64_t v30 = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  xpc_object_t v9 = (std::__shared_weak_count *)*((void *)this + 23);
  uint64_t v28 = *((void *)this + 22);
  uint64_t v29 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v10 = (std::__shared_weak_count *)*((void *)this + 14);
  uint64_t v26 = *((void *)this + 13);
  int v27 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  OBDManager::create(v7, &v30, &v28, &v26, (OBDManager **)buf);
  long long v11 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 25);
  *((_OWORD *)this + 12) = v11;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  xpc_object_t v13 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  int v14 = v27;
  if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v15 = v29;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (v30) {
    dispatch_release(v30);
  }
  uint64_t v16 = (void *)*((void *)this + 24);
  if (v16)
  {
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3321888768;
    void v22[2] = ___ZN9SARModule18initializeOBD_syncEv_block_invoke;
    v22[3] = &__block_descriptor_56_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE_e11_v16__0C8C12l;
    v22[4] = this;
    void v22[5] = v4;
    xpc_object_t v23 = v6;
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v17 = _Block_copy(v22);
    xpc_object_t v18 = *((void *)this + 8);
    if (v18) {
      dispatch_retain(v18);
    }
    xpc_object_t aBlock = v17;
    xpc_object_t v25 = v18;
    uint64_t v19 = (void **)v16[6];
    if ((unint64_t)v19 >= v16[7])
    {
      uint64_t v21 = std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)> const&>(v16 + 5, (uint64_t)&aBlock);
      xpc_object_t v18 = v25;
      v16[6] = v21;
      if (!v18) {
        goto LABEL_36;
      }
      goto LABEL_35;
    }
    if (v17)
    {
      *uint64_t v19 = _Block_copy(v17);
      v19[1] = v18;
      if (!v18) {
        goto LABEL_34;
      }
    }
    else
    {
      *uint64_t v19 = 0;
      v19[1] = v18;
      if (!v18)
      {
LABEL_34:
        v16[6] = v19 + 2;
        if (!v18)
        {
LABEL_36:
          if (aBlock) {
            _Block_release(aBlock);
          }
          if (v23) {
            std::__shared_weak_count::__release_weak(v23);
          }
          goto LABEL_42;
        }
LABEL_35:
        dispatch_release(v18);
        goto LABEL_36;
      }
    }
    dispatch_retain(v18);
    goto LABEL_34;
  }
  xpc_object_t v20 = *((void *)this + 10);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C59C6000, v20, OS_LOG_TYPE_ERROR, "Failed to create OBD Manager", buf, 2u);
  }
LABEL_42:
  std::__shared_weak_count::__release_weak(v6);
}

void sub_1C5A5EFF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>::~callback((uint64_t)&a16);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    std::__shared_weak_count::__release_weak(v20);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v20);
  _Unwind_Resume(a1);
}

void SARModule::initializeAccessory_sync(SARModule *this)
{
  uint64_t v2 = *((void *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing Accessory", buf, 2u);
  }
  queue v3 = (std::__shared_weak_count *)*((void *)this + 7);
  if (!v3 || (v4 = *((void *)this + 6), (long long v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v6 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  long long v8 = (LegacyAccessoryManager *)(*(uint64_t (**)(SARModule *))(*(void *)this + 16))(this);
  xpc_object_t v9 = *((void *)this + 8);
  dispatch_object_t object = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  LegacyAccessoryManager::create(v8, (const char *)&object, v7, (LegacyAccessoryManager **)buf);
  long long v10 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  long long v11 = (std::__shared_weak_count *)*((void *)this + 27);
  *((_OWORD *)this + 13) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (object) {
    dispatch_release(object);
  }
  xpc_object_t v13 = (void *)*((void *)this + 26);
  if (v13)
  {
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3321888768;
    v19[2] = ___ZN9SARModule24initializeAccessory_syncEv_block_invoke;
    v19[3] = &__block_descriptor_56_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE_e8_v12__0I8l;
    void v19[4] = this;
    v19[5] = v4;
    xpc_object_t v20 = v6;
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    int v14 = _Block_copy(v19);
    uint64_t v15 = *((void *)this + 8);
    if (v15) {
      dispatch_retain(v15);
    }
    xpc_object_t aBlock = v14;
    xpc_object_t v22 = v15;
    uint64_t v16 = (void **)v13[5];
    if ((unint64_t)v16 >= v13[6])
    {
      xpc_object_t v18 = std::vector<dispatch::callback<void({block_pointer})>>::__push_back_slow_path<dispatch::callback<void({block_pointer})> const&>(v13 + 4, (uint64_t)&aBlock);
      uint64_t v15 = v22;
      void v13[5] = v18;
      if (!v15) {
        goto LABEL_26;
      }
      goto LABEL_25;
    }
    if (v14)
    {
      void *v16 = _Block_copy(v14);
      v16[1] = v15;
      if (!v15) {
        goto LABEL_24;
      }
    }
    else
    {
      void *v16 = 0;
      v16[1] = v15;
      if (!v15)
      {
LABEL_24:
        void v13[5] = v16 + 2;
        if (!v15)
        {
LABEL_26:
          if (aBlock) {
            _Block_release(aBlock);
          }
          if (v20) {
            std::__shared_weak_count::__release_weak(v20);
          }
          goto LABEL_32;
        }
LABEL_25:
        dispatch_release(v15);
        goto LABEL_26;
      }
    }
    dispatch_retain(v15);
    goto LABEL_24;
  }
  uint64_t v17 = *((void *)this + 10);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C59C6000, v17, OS_LOG_TYPE_ERROR, "Failed to create Legacy Accessory Manager", buf, 2u);
  }
LABEL_32:
  std::__shared_weak_count::__release_weak(v6);
}

void sub_1C5A5F384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, dispatch_object_t object)
{
  dispatch::callback<void({block_pointer})>::~callback((uint64_t)&a16);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    std::__shared_weak_count::__release_weak(v18);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v18);
  _Unwind_Resume(a1);
}

void SARModule::initializePowerSource_sync(SARModule *this)
{
  uint64_t v2 = *((void *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing Power Source", buf, 2u);
  }
  GetABMLogServer(&v30);
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  uint64_t v3 = off_1EBBDC878;
  if (!off_1EBBDC878)
  {
    ABMServer::create_default_global(buf);
    long long v4 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    long long v5 = (std::__shared_weak_count *)*(&off_1EBBDC878 + 1);
    off_1EBBDC878 = v4;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    xpc_object_t v6 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    uint64_t v3 = off_1EBBDC878;
  }
  uint64_t v28 = v3;
  uint64_t v29 = (std::__shared_weak_count *)*(&off_1EBBDC878 + 1);
  if (*(&off_1EBBDC878 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDC878 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  uint64_t v7 = *(void *)(*(void *)v3 + 208);
  long long v8 = operator new(0xD8uLL);
  xpc_object_t v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  *long long v8 = &unk_1F2104A58;
  long long v10 = v8 + 3;
  *(void *)long long buf = v30;
  *(void *)&uint8_t buf[8] = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  IOKitEventNotifier::IOKitEventNotifier((uint64_t)(v8 + 3), buf, v7);
  long long v11 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 29);
  *((void *)this + 28) = v10;
  *((void *)this + 29) = v9;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  xpc_object_t v13 = v31;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (*((void *)this + 28)) {
      goto LABEL_27;
    }
  }
  else if (*((void *)this + 28))
  {
LABEL_27:
    int v14 = (std::__shared_weak_count *)*((void *)this + 7);
    if (!v14 || (uint64_t v15 = *((void *)this + 6), (v16 = std::__shared_weak_count::lock(v14)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v17 = v16;
    p_shared_weak_owners = &v16->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v17);
    }
    uint64_t v19 = *((void *)this + 28);
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3321888768;
    aBlock[2] = ___ZN9SARModule26initializePowerSource_syncEv_block_invoke;
    aBlock[3] = &__block_descriptor_56_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE_e8_v12__0I8l;
    aBlock[4] = this;
    void aBlock[5] = v15;
    int v27 = v17;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    xpc_object_t v20 = _Block_copy(aBlock);
    uint64_t v21 = *((void *)this + 8);
    if (v21) {
      dispatch_retain(*((dispatch_object_t *)this + 8));
    }
    if (v20)
    {
      xpc_object_t v22 = _Block_copy(v20);
      xpc_object_t v23 = *(const void **)(v19 + 136);
      *(void *)(v19 + 136) = v22;
      if (!v23) {
        goto LABEL_41;
      }
    }
    else
    {
      xpc_object_t v23 = *(const void **)(v19 + 136);
      *(void *)(v19 + 136) = 0;
      if (!v23)
      {
LABEL_41:
        if (v21) {
          dispatch_retain(v21);
        }
        xpc_object_t v25 = *(NSObject **)(v19 + 144);
        *(void *)(v19 + 144) = v21;
        if (v25) {
          dispatch_release(v25);
        }
        if (v21) {
          dispatch_release(v21);
        }
        if (v20) {
          _Block_release(v20);
        }
        IOKitEventNotifier::start(*((IOKitEventNotifier **)this + 28));
        if (v27) {
          std::__shared_weak_count::__release_weak(v27);
        }
        std::__shared_weak_count::__release_weak(v17);
        return;
      }
    }
    _Block_release(v23);
    goto LABEL_41;
  }
  dispatch_object_t v24 = *((void *)this + 10);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C59C6000, v24, OS_LOG_TYPE_ERROR, "Failed to create Power Source Notifier", buf, 2u);
  }
}

void sub_1C5A5F8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17, uint64_t a18, char a19)
{
}

void ___ZN9SARModule22initializeHelpers_syncEv_block_invoke(void *a1, int a2, uint64_t a3)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  long long v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = (SARModule *)a1[4];
  long long v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  xpc_object_t v9 = v8;
  uint64_t v10 = a1[5];
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v10) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10) {
      return;
    }
  }
  if (a2 == -469794809)
  {
    long long v11 = *((void *)v7 + 10);
    BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (a3)
    {
      if (v12)
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1C59C6000, v11, OS_LOG_TYPE_DEFAULT, "#I Tx is on from SPMI", buf, 2u);
      }
      if ((capabilities::radio::maverick((capabilities::radio *)v12) & 1) == 0) {
        SARModule::processTxOn_sync(v7);
      }
    }
    else
    {
      if (v12)
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1C59C6000, v11, OS_LOG_TYPE_DEFAULT, "#I Tx is off from SPMI", buf, 2u);
      }
      if ((capabilities::radio::maverick((capabilities::radio *)v12) & 1) == 0) {
        SARModule::processTxOff_sync(v7);
      }
    }
    return;
  }
  if ((a2 + 469794805) > 1) {
    return;
  }
  xpc_object_t v13 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  uint64_t v14 = off_1EBBDC9B8;
  if (!off_1EBBDC9B8)
  {
    ctu::Gestalt::create_default_global((uint64_t *)buf, v13);
    long long v15 = *(_OWORD *)buf;
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    uint64_t v16 = (std::__shared_weak_count *)*(&off_1EBBDC9B8 + 1);
    off_1EBBDC9B8 = v15;
    if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    uint64_t v17 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    uint64_t v14 = off_1EBBDC9B8;
  }
  xpc_object_t v18 = (std::__shared_weak_count *)*(&off_1EBBDC9B8 + 1);
  *(void *)&long long v55 = v14;
  *((void *)&v55 + 1) = *(&off_1EBBDC9B8 + 1);
  if (*(&off_1EBBDC9B8 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDC9B8 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  int v19 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 96))(v14);
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  if (v19)
  {
    xpc_object_t v20 = *((void *)v7 + 10);
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v21 = "#I We don't trigger the coredump request from the kernel driver in Restore Mode";
    goto LABEL_30;
  }
  if ((TelephonyUtilIsInternalBuild() & 1) == 0 && (TelephonyUtilIsCarrierBuild() & 1) == 0)
  {
    xpc_object_t v20 = *((void *)v7 + 10);
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v21 = "#I We don't trigger the coredump request from the kernel driver if it is not Carrier/Internal build";
LABEL_30:
    _os_log_impl(&dword_1C59C6000, v20, OS_LOG_TYPE_DEFAULT, v21, buf, 2u);
    return;
  }
  long long v55 = 0uLL;
  uint64_t v56 = 0;
  if (a2 == -469794805)
  {
    qmemcpy(&v55, "SPMI Bus error", 14);
    char v22 = 14;
  }
  else
  {
    long long v55 = *(_OWORD *)"OCP packet error";
    char v22 = 16;
  }
  HIBYTE(v56) = v22;
  memset(&__p, 170, sizeof(__p));
  p_p = &__p;
  config::hw::getBootArgs(&__p);
  int64_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    int64_t size = __p.__r_.__value_.__l.__size_;
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (size >= 17)
  {
    xpc_object_t v25 = (char *)p_p + size;
    uint64_t v26 = p_p;
    while (1)
    {
      int v27 = (char *)memchr(v26, 115, size - 16);
      if (!v27) {
        goto LABEL_60;
      }
      BOOL v28 = *(void *)v27 == 0x696D70732D726173 && *((void *)v27 + 1) == 0x6D756465726F632DLL;
      if (v28 && v27[16] == 112) {
        break;
      }
      uint64_t v26 = (std::string *)(v27 + 1);
      int64_t size = v25 - (char *)v26;
      if (v25 - (char *)v26 < 17) {
        goto LABEL_60;
      }
    }
    if (v27 == v25 || v27 - (char *)p_p == -1) {
      goto LABEL_60;
    }
    xpc_object_t v53 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v30 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v31 = v30;
    if (v30)
    {
      xpc_object_t v53 = v30;
    }
    else
    {
      xpc_object_t v31 = xpc_null_create();
      xpc_object_t v53 = v31;
      if (!v31)
      {
        xpc_object_t v34 = xpc_null_create();
        xpc_object_t v31 = 0;
        goto LABEL_74;
      }
    }
    if (MEMORY[0x1C8795EB0](v31) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v31);
LABEL_75:
      xpc_release(v31);
      xpc_object_t v51 = xpc_string_create((const char *)*MEMORY[0x1E4F4C6E8]);
      if (!v51) {
        xpc_object_t v51 = xpc_null_create();
      }
      uint64_t v35 = *MEMORY[0x1E4F4C690];
      *(void *)long long buf = &v53;
      *(void *)&uint8_t buf[8] = v35;
      xpc::dict::object_proxy::operator=((uint64_t)buf, &v51, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v51);
      xpc_object_t v51 = 0;
      xpc_object_t v49 = xpc_string_create((const char *)*MEMORY[0x1E4F4D1A0]);
      if (!v49) {
        xpc_object_t v49 = xpc_null_create();
      }
      uint64_t v36 = *MEMORY[0x1E4F4CA38];
      *(void *)long long buf = &v53;
      *(void *)&uint8_t buf[8] = v36;
      xpc::dict::object_proxy::operator=((uint64_t)buf, &v49, &v50);
      xpc_release(v50);
      xpc_object_t v50 = 0;
      xpc_release(v49);
      xpc_object_t v37 = (const char *)&v55;
      if (v56 < 0) {
        xpc_object_t v37 = (const char *)v55;
      }
      xpc_object_t v49 = 0;
      long long v69 = 0u;
      memset(v70, 0, sizeof(v70));
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v58 = 0u;
      memset(buf, 0, sizeof(buf));
      snprintf((char *)buf, 0xFFuLL, "%s (0x%x)", v37, a3);
      xpc_object_t v47 = xpc_string_create((const char *)buf);
      if (!v47) {
        xpc_object_t v47 = xpc_null_create();
      }
      xpc_object_t v38 = (void *)*MEMORY[0x1E4F4C8F0];
      v43[0] = &v53;
      v43[1] = v38;
      xpc::dict::object_proxy::operator=((uint64_t)v43, &v47, &v48);
      xpc_release(v48);
      xpc_object_t v48 = 0;
      xpc_release(v47);
      xpc_object_t v46 = 0;
      xpc_object_t v47 = 0;
      uint64_t v45 = 0;
      xpc_object_t v39 = (std::__shared_weak_count *)a1[6];
      if (v39 && (xpc_object_t v46 = std::__shared_weak_count::lock(v39)) != 0)
      {
        uint64_t v40 = a1[5];
        uint64_t v45 = v40;
      }
      else
      {
        uint64_t v40 = 0;
      }
      std::string::basic_string[abi:ne180100]<0>(v43, (char *)*MEMORY[0x1E4F4C638]);
      xpc::dict::dict(&v42, &v53);
      xpc_object_t v41 = 0;
      Service::runCommand(v40, (uint64_t)v43, &v42, &v41);
      xpc_release(v42);
      xpc_object_t v42 = 0;
      if (v44 < 0) {
        operator delete(v43[0]);
      }
      std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&v45);
      xpc_release(v53);
      goto LABEL_61;
    }
    xpc_object_t v34 = xpc_null_create();
LABEL_74:
    xpc_object_t v53 = v34;
    goto LABEL_75;
  }
LABEL_60:
  xpc_object_t v32 = *((void *)v7 + 10);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
  {
    uint64_t v33 = &v55;
    if (v56 < 0) {
      uint64_t v33 = (long long *)v55;
    }
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v33;
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = "sar-spmi-coredump";
    _os_log_error_impl(&dword_1C59C6000, v32, OS_LOG_TYPE_ERROR, "Detected %s, but AP won't trigger the coredump since %s is not found in the boot-args", buf, 0x16u);
  }
LABEL_61:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v56) < 0) {
    operator delete((void *)v55);
  }
}

void sub_1C5A600F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,xpc_object_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void SARModule::processTxOn_sync(SARModule *this)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(cf[0]) = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Tx is on", (uint8_t *)cf, 2u);
  }
  *((unsigned char *)this + 264) = 1;
  uint64_t v3 = (OBDManager *)*((void *)this + 24);
  if (v3) {
    OBDManager::start(v3, 2000);
  }
  long long v4 = (HandDetectionManager *)*((void *)this + 31);
  if (v4) {
    HandDetectionManager::setTxState(v4, *((unsigned __int8 *)this + 264));
  }
  xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
  if (v5 || (xpc_object_t v5 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v5) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v5);
      xpc_object_t v6 = v5;
    }
    else
    {
      xpc_object_t v6 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v5 = 0;
  }
  xpc_release(v5);
  xpc_object_t v7 = xpc_string_create((const char *)*MEMORY[0x1E4F4D0C0]);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4CD50], v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  CFTypeRef v33 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  *(void *)xpc_object_t object = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    *(void *)xpc_object_t object = xpc_null_create();
  }
  xpc::bridge((uint64_t *)cf, (xpc *)object, v9);
  CFTypeRef v10 = cf[0];
  if (!cf[0] || (CFTypeID v11 = CFGetTypeID(cf[0]), v11 != CFDictionaryGetTypeID()))
  {
    CFTypeRef v10 = 0;
    CFTypeRef v33 = 0;
    CFTypeRef v12 = cf[0];
    if (!cf[0]) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  CFTypeRef v33 = v10;
  CFRetain(v10);
  CFTypeRef v12 = cf[0];
  if (cf[0]) {
LABEL_23:
  }
    CFRelease(v12);
LABEL_24:
  xpc_release(*(xpc_object_t *)object);
  if (v10) {
    xpc_object_t v13 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    xpc_object_t v13 = 0;
  }
  if (!v13)
  {
    xpc_object_t v18 = *((void *)this + 10);
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      goto LABEL_49;
    }
    int v19 = (char *)MEMORY[0x1C8795DE0](v6);
    memset(cf, 170, 24);
    size_t v20 = strlen(v19);
    if (v20 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v21 = (const void *)v20;
    if (v20 >= 0x17)
    {
      uint64_t v25 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17) {
        uint64_t v25 = v20 | 7;
      }
      uint64_t v26 = v25 + 1;
      char v22 = operator new(v25 + 1);
      cf[1] = v21;
      cf[2] = (CFTypeRef)(v26 | 0x8000000000000000);
      cf[0] = v22;
    }
    else
    {
      HIBYTE(cf[2]) = v20;
      char v22 = cf;
      if (!v20)
      {
LABEL_56:
        *((unsigned char *)v21 + (void)v22) = 0;
        free(v19);
        int v27 = cf;
        if (SHIBYTE(cf[2]) < 0) {
          int v27 = (CFTypeRef *)cf[0];
        }
        *(_DWORD *)xpc_object_t object = 136315138;
        *(void *)&object[4] = v27;
        _os_log_error_impl(&dword_1C59C6000, v18, OS_LOG_TYPE_ERROR, "Failed to convert the transmit State data and no sending the message: %s", object, 0xCu);
        if (SHIBYTE(cf[2]) < 0) {
          operator delete((void *)cf[0]);
        }
        CFTypeRef v10 = v33;
        if (v33) {
          goto LABEL_50;
        }
        goto LABEL_51;
      }
    }
    memcpy(v22, v19, (size_t)v21);
    goto LABEL_56;
  }
  uint64_t v14 = (const void *)*MEMORY[0x1E4F4CDF0];
  size_t v15 = strlen((const char *)*MEMORY[0x1E4F4CDF0]);
  if (v15 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v16 = (void *)v15;
  if (v15 >= 0x17)
  {
    uint64_t v23 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v23 = v15 | 7;
    }
    uint64_t v24 = v23 + 1;
    uint64_t v17 = (void **)operator new(v23 + 1);
    __dst[1] = v16;
    unint64_t v32 = v24 | 0x8000000000000000;
    __dst[0] = v17;
  }
  else
  {
    HIBYTE(v32) = v15;
    uint64_t v17 = __dst;
    if (!v15)
    {
      LOBYTE(__dst[0]) = 0;
      CFTypeRef v10 = v33;
      CFTypeRef v30 = v33;
      if (!v33) {
        goto LABEL_43;
      }
      goto LABEL_42;
    }
  }
  memmove(v17, v14, (size_t)v16);
  *((unsigned char *)v16 + (void)v17) = 0;
  CFTypeRef v10 = v33;
  CFTypeRef v30 = v33;
  if (v33) {
LABEL_42:
  }
    CFRetain(v10);
LABEL_43:
  xpc_object_t aBlock = 0;
  Service::broadcastEvent((uint64_t)this, (uint64_t)__dst, &v30, (const void **)&aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v30) {
    CFRelease(v30);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete(__dst[0]);
  }
LABEL_49:
  if (v10) {
LABEL_50:
  }
    CFRelease(v10);
LABEL_51:
  xpc_release(v6);
}

void sub_1C5A60634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *aBlock, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void SARModule::processTxOff_sync(SARModule *this)
{
  v50[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Tx is off", buf, 2u);
  }
  *((unsigned char *)this + 264) = 0;
  uint64_t v3 = (OBDManager *)*((void *)this + 24);
  if (v3) {
    OBDManager::stop(v3);
  }
  long long v4 = (HandDetectionManager *)*((void *)this + 31);
  if (!v4)
  {
LABEL_30:
    v50[0] = 0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v20 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v21 = v20;
    if (v20)
    {
      v50[0] = (unint64_t)v20;
    }
    else
    {
      xpc_object_t v21 = xpc_null_create();
      v50[0] = (unint64_t)v21;
      if (!v21)
      {
        xpc_object_t v22 = xpc_null_create();
        xpc_object_t v21 = 0;
        goto LABEL_40;
      }
    }
    if (MEMORY[0x1C8795EB0](v21) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v21);
      goto LABEL_41;
    }
    xpc_object_t v22 = xpc_null_create();
LABEL_40:
    v50[0] = (unint64_t)v22;
LABEL_41:
    xpc_release(v21);
    xpc_object_t v24 = xpc_string_create((const char *)*MEMORY[0x1E4F4CDB0]);
    if (!v24) {
      xpc_object_t v24 = xpc_null_create();
    }
    uint64_t v25 = (void *)v50[0];
    xpc_dictionary_set_value((xpc_object_t)v50[0], (const char *)*MEMORY[0x1E4F4CD50], v24);
    xpc_object_t v26 = xpc_null_create();
    xpc_release(v24);
    xpc_release(v26);
    CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v49 = v25;
    if (v25) {
      xpc_retain(v25);
    }
    else {
      *(void *)&long long v49 = xpc_null_create();
    }
    xpc::bridge((uint64_t *)buf, (xpc *)&v49, v27);
    CFTypeRef v28 = *(CFTypeRef *)buf;
    if (*(void *)buf && (CFTypeID v29 = CFGetTypeID(*(CFTypeRef *)buf), v29 == CFDictionaryGetTypeID()))
    {
      CFTypeRef cf = v28;
      CFRetain(v28);
      CFTypeRef v30 = *(const void **)buf;
      if (!*(void *)buf)
      {
LABEL_52:
        xpc_release((xpc_object_t)v49);
        if (v28) {
          xpc_object_t v31 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
        }
        else {
          xpc_object_t v31 = 0;
        }
        if (!v31)
        {
          uint64_t v36 = *((void *)this + 10);
          if (!os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
            goto LABEL_77;
          }
          xpc::dict::to_debug_string((xpc::dict *)v50, buf);
          xpc_object_t v37 = v48 >= 0 ? buf : *(uint8_t **)buf;
          LODWORD(v49) = 136315138;
          *(void *)((char *)&v49 + 4) = v37;
          _os_log_error_impl(&dword_1C59C6000, v36, OS_LOG_TYPE_ERROR, "Failed to convert the transmit State data and no sending the message: %s", (uint8_t *)&v49, 0xCu);
          if ((v48 & 0x80000000) == 0) {
            goto LABEL_77;
          }
          xpc_object_t v38 = *(void **)buf;
          goto LABEL_82;
        }
        unint64_t v32 = (const void *)*MEMORY[0x1E4F4CDF0];
        size_t v33 = strlen((const char *)*MEMORY[0x1E4F4CDF0]);
        if (v33 >= 0x7FFFFFFFFFFFFFF8) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v34 = v33;
        if (v33 >= 0x17)
        {
          uint64_t v39 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v33 | 7) != 0x17) {
            uint64_t v39 = v33 | 7;
          }
          uint64_t v40 = v39 + 1;
          uint64_t v35 = operator new(v39 + 1);
          __dst[1] = v34;
          unint64_t v44 = v40 | 0x8000000000000000;
          __dst[0] = v35;
        }
        else
        {
          HIBYTE(v44) = v33;
          uint64_t v35 = __dst;
          if (!v33)
          {
            LOBYTE(__dst[0]) = 0;
            CFTypeRef v28 = cf;
            CFTypeRef v42 = cf;
            if (!cf) {
              goto LABEL_72;
            }
            goto LABEL_71;
          }
        }
        memmove(v35, v32, v34);
        *((unsigned char *)v35 + v34) = 0;
        CFTypeRef v28 = cf;
        CFTypeRef v42 = cf;
        if (!cf)
        {
LABEL_72:
          xpc_object_t aBlock = 0;
          Service::broadcastEvent((uint64_t)this, (uint64_t)__dst, &v42, (const void **)&aBlock);
          if (aBlock) {
            _Block_release(aBlock);
          }
          if (v42) {
            CFRelease(v42);
          }
          if ((SHIBYTE(v44) & 0x80000000) == 0)
          {
LABEL_77:
            if (!v28)
            {
LABEL_79:
              xpc_release((xpc_object_t)v50[0]);
              return;
            }
LABEL_78:
            CFRelease(v28);
            goto LABEL_79;
          }
          xpc_object_t v38 = (void *)__dst[0];
LABEL_82:
          operator delete(v38);
          if (!v28) {
            goto LABEL_79;
          }
          goto LABEL_78;
        }
LABEL_71:
        CFRetain(v28);
        goto LABEL_72;
      }
    }
    else
    {
      CFTypeRef v28 = 0;
      CFTypeRef cf = 0;
      CFTypeRef v30 = *(const void **)buf;
      if (!*(void *)buf) {
        goto LABEL_52;
      }
    }
    CFRelease(v30);
    goto LABEL_52;
  }
  HandDetectionManager::setTxState(v4, *((unsigned __int8 *)this + 264));
  *((unsigned char *)this + 168) = 0;
  xpc_object_t v5 = *((void *)this + 10);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = 0;
    _os_log_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_DEFAULT, "#I Sending Grip State due to Tx is off: 0x%x\n", buf, 8u);
  }
  xpc_object_t v6 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  xpc_object_t v7 = (AppleSARHelper *)off_1EA3D67B0;
  if (!off_1EA3D67B0)
  {
    AppleSARHelper::create_default_global((uint64_t *)buf, v6);
    long long v8 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    xpc_object_t v9 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
    off_1EA3D67B0 = v8;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    CFTypeRef v10 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    xpc_object_t v7 = (AppleSARHelper *)off_1EA3D67B0;
  }
  CFTypeID v11 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
  *(void *)&long long v49 = v7;
  *((void *)&v49 + 1) = *(&off_1EA3D67B0 + 1);
  if (*(&off_1EA3D67B0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EA3D67B0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  char v46 = *((unsigned char *)this + 168);
  if (*((_DWORD *)v7 + 1))
  {
    *(void *)long long buf = 0;
    v50[0] = 0;
    LODWORD(cf) = 1;
    char v12 = AppleSARHelper::callUserClientMethod(v7, 7, (const unint64_t *)buf, 1, &v46, 1, v50, (unsigned int *)&cf, &v46, 1uLL);
    if (!v11) {
      goto LABEL_23;
    }
  }
  else
  {
    char v12 = 0;
    if (!v11) {
      goto LABEL_23;
    }
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (v12) {
      goto LABEL_24;
    }
    goto LABEL_37;
  }
LABEL_23:
  if (v12)
  {
LABEL_24:
    if (*((unsigned __int8 *)this + 169) != *((unsigned __int8 *)this + 168) || !*((void *)this + 38))
    {
      xpc_object_t v13 = (std::__shared_weak_count *)*((void *)this + 7);
      if (!v13 || (v14 = *((void *)this + 6), (size_t v15 = std::__shared_weak_count::lock(v13)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      uint64_t v16 = v15;
      uint64_t v17 = operator new(8uLL);
      void *v17 = this;
      xpc_object_t v18 = *((void *)this + 8);
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      int v19 = operator new(0x18uLL);
      *int v19 = v17;
      v19[1] = v14;
      v19[2] = v16;
      dispatch_async_f(v18, v19, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<SARModule>::execute_wrapped<SARModule::processTxOff_sync(void)::$_0>(SARModule::processTxOff_sync(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SARModule::processTxOff_sync(void)::$_0,dispatch_queue_s *::default_delete<SARModule::processTxOff_sync(void)::$_0>>)::{lambda(void *)#1}::__invoke);
      if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    goto LABEL_30;
  }
LABEL_37:
  uint64_t v23 = *((void *)this + 10);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C59C6000, v23, OS_LOG_TYPE_ERROR, "Failed to get SAR Fusion State!", buf, 2u);
  }
}

void sub_1C5A60D94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, char a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t dispatch::callback<void({block_pointer})(sar::AppleSARMessageType,void *)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void ___ZN9SARModule19initializeWiFi_syncEv_block_invoke(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (std::__shared_weak_count *)v2[7];
  if (!v3 || (uint64_t v5 = v2[6], (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  long long v8 = operator new(0x10uLL);
  *(void *)long long v8 = v2;
  v8[8] = a2;
  xpc_object_t v9 = v2[8];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  CFTypeRef v10 = operator new(0x18uLL);
  *CFTypeRef v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_19initializeWiFi_syncEvEUb0_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t dispatch::callback<void({block_pointer})(BOOL)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void ___ZN9SARModule24initializeBluetooth_syncEv_block_invoke(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (std::__shared_weak_count *)v2[7];
  if (!v3 || (uint64_t v5 = v2[6], (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  long long v8 = operator new(0x10uLL);
  *(void *)long long v8 = v2;
  v8[8] = a2;
  xpc_object_t v9 = v2[8];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  CFTypeRef v10 = operator new(0x18uLL);
  *CFTypeRef v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_24initializeBluetooth_syncEvEUb1_E3__5EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ___ZN9SARModule20initializeAudio_syncEv_block_invoke(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (std::__shared_weak_count *)v2[7];
  if (!v3 || (uint64_t v5 = v2[6], (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  long long v8 = operator new(0x10uLL);
  *(void *)long long v8 = v2;
  v8[8] = a2;
  xpc_object_t v9 = v2[8];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  CFTypeRef v10 = operator new(0x18uLL);
  *CFTypeRef v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_20initializeAudio_syncEvEUb2_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ___ZN9SARModule20initializeAudio_syncEv_block_invoke_2(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (std::__shared_weak_count *)v2[7];
  if (!v3 || (uint64_t v5 = v2[6], (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  long long v8 = operator new(0x10uLL);
  *(void *)long long v8 = v2;
  v8[8] = a2;
  xpc_object_t v9 = v2[8];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  CFTypeRef v10 = operator new(0x18uLL);
  *CFTypeRef v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_20initializeAudio_syncEvEUb3_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ___ZN9SARModule18initializeOBD_syncEv_block_invoke(void *a1, char a2, char a3)
{
  v30[1] = *MEMORY[0x1E4F143B8];
  long long v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = a1[4];
  long long v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  xpc_object_t v9 = v8;
  uint64_t v10 = a1[5];
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v10) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10) {
      return;
    }
  }
  *(unsigned char *)(v7 + 165) = a2 & 0xF | (16 * a3);
  CFTypeID v11 = *(NSObject **)(v7 + 80);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = a2 & 0xF;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = a3 & 0xF;
    _os_log_impl(&dword_1C59C6000, v11, OS_LOG_TYPE_DEFAULT, "#I Sending SAR Selection: 0x%x, Tuner State: 0x%x\n", buf, 0xEu);
  }
  char v12 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  xpc_object_t v13 = (AppleSARHelper *)off_1EA3D67B0;
  if (!off_1EA3D67B0)
  {
    AppleSARHelper::create_default_global((uint64_t *)buf, v12);
    long long v14 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    size_t v15 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
    off_1EA3D67B0 = v14;
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    uint64_t v16 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    xpc_object_t v13 = (AppleSARHelper *)off_1EA3D67B0;
  }
  uint64_t v17 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
  if (*(&off_1EA3D67B0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EA3D67B0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  char v27 = *(unsigned char *)(v7 + 165);
  if (*((_DWORD *)v13 + 1))
  {
    *(void *)long long buf = 0;
    v30[0] = 0;
    unsigned int v28 = 1;
    char v18 = AppleSARHelper::callUserClientMethod(v13, 3, (const unint64_t *)buf, 1, &v27, 1, v30, &v28, &v27, 1uLL);
    if (!v17) {
      goto LABEL_25;
    }
  }
  else
  {
    char v18 = 0;
    if (!v17) {
      goto LABEL_25;
    }
  }
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_25:
  if ((v18 & 1) == 0 && (int v19 = *(NSObject **)(v7 + 80), os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C59C6000, v19, OS_LOG_TYPE_ERROR, "Failed to set SAR Fusion!", buf, 2u);
    if (*(unsigned __int8 *)(v7 + 166) == *(unsigned __int8 *)(v7 + 165))
    {
LABEL_28:
      if (*(void *)(v7 + 304)) {
        return;
      }
    }
  }
  else if (*(unsigned __int8 *)(v7 + 166) == *(unsigned __int8 *)(v7 + 165))
  {
    goto LABEL_28;
  }
  xpc_object_t v20 = *(std::__shared_weak_count **)(v7 + 56);
  if (!v20 || (v21 = *(void *)(v7 + 48), (xpc_object_t v22 = std::__shared_weak_count::lock(v20)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v23 = v22;
  xpc_object_t v24 = operator new(8uLL);
  void *v24 = v7;
  uint64_t v25 = *(NSObject **)(v7 + 64);
  atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v26 = operator new(0x18uLL);
  *xpc_object_t v26 = v24;
  v26[1] = v21;
  void v26[2] = v23;
  dispatch_async_f(v25, v26, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_18initializeOBD_syncEvEUb4_E3__8EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_);
  if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
}

void sub_1C5A6171C(_Unwind_Exception *a1)
{
}

uint64_t dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void ___ZN9SARModule24initializeAccessory_syncEv_block_invoke(void *a1, int a2)
{
  v24[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = a1[4];
  xpc_object_t v6 = std::__shared_weak_count::lock(v3);
  if (!v6) {
    return;
  }
  uint64_t v7 = v6;
  uint64_t v8 = a1[5];
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v8) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
    if (!v8) {
      return;
    }
  }
  if (a2)
  {
    int v9 = *(_DWORD *)(v5 + 272) | a2;
    int v10 = *(_DWORD *)(v5 + 268);
  }
  else
  {
    int v9 = 0;
    int v10 = 0;
  }
  *(_DWORD *)(v5 + 272) = v9;
  *(_DWORD *)(v5 + 268) = v10;
  int v11 = v10 | v9;
  *(_DWORD *)(v5 + 161) = v10 | v9;
  char v12 = *(NSObject **)(v5 + 80);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v11;
    _os_log_impl(&dword_1C59C6000, v12, OS_LOG_TYPE_DEFAULT, "#I Sending Accessory State: 0x%x", buf, 8u);
  }
  xpc_object_t v13 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  long long v14 = (AppleSARHelper *)off_1EA3D67B0;
  if (!off_1EA3D67B0)
  {
    AppleSARHelper::create_default_global((uint64_t *)buf, v13);
    long long v15 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    uint64_t v16 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
    off_1EA3D67B0 = v15;
    if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    uint64_t v17 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    long long v14 = (AppleSARHelper *)off_1EA3D67B0;
  }
  char v18 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
  if (*(&off_1EA3D67B0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EA3D67B0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  int v21 = *(_DWORD *)(v5 + 161);
  if (!*((_DWORD *)v14 + 1))
  {
    char v19 = 0;
    if (!v18) {
      goto LABEL_28;
    }
LABEL_26:
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    goto LABEL_28;
  }
  *(void *)long long buf = 0;
  v24[0] = 0;
  unsigned int v22 = 1;
  char v19 = AppleSARHelper::callUserClientMethod(v14, 2, (const unint64_t *)buf, 1, &v21, 4, v24, &v22, &v21, 4uLL);
  if (v18) {
    goto LABEL_26;
  }
LABEL_28:
  if ((v19 & 1) == 0)
  {
    xpc_object_t v20 = *(NSObject **)(v5 + 80);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1C59C6000, v20, OS_LOG_TYPE_ERROR, "Failed to set SAR Fusion State!", buf, 2u);
    }
  }
}

void sub_1C5A61AC8(_Unwind_Exception *a1)
{
}

uint64_t dispatch::callback<void({block_pointer})(unsigned int)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void ___ZN9SARModule26initializePowerSource_syncEv_block_invoke(void *a1, int a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = (SARModule *)a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      *((_DWORD *)v5 + 60) = a2;
      SARModule::sendPowerSource_sync(v5);
    }
  }
}

void SARModule::sendPowerSource_sync(SARModule *this)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  int v2 = *((_DWORD *)this + 60);
  *((unsigned char *)this + 170) = v2;
  uint64_t v3 = *((void *)this + 10);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v2;
    _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Sending Power Source: 0x%x\n", buf, 8u);
  }
  long long v4 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  uint64_t v5 = (AppleSARHelper *)off_1EA3D67B0;
  if (!off_1EA3D67B0)
  {
    AppleSARHelper::create_default_global((uint64_t *)buf, v4);
    long long v6 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    uint64_t v7 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
    off_1EA3D67B0 = v6;
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    uint64_t v8 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    uint64_t v5 = (AppleSARHelper *)off_1EA3D67B0;
  }
  int v9 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
  if (*(&off_1EA3D67B0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EA3D67B0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  char v12 = *((unsigned char *)this + 170);
  if (*((_DWORD *)v5 + 1))
  {
    *(void *)long long buf = 0;
    v15[0] = 0;
    unsigned int v13 = 1;
    char v10 = AppleSARHelper::callUserClientMethod(v5, 8, (const unint64_t *)buf, 1, &v12, 1, v15, &v13, &v12, 1uLL);
    if (!v9)
    {
LABEL_18:
      if (v10) {
        return;
      }
      goto LABEL_19;
    }
  }
  else
  {
    char v10 = 0;
    if (!v9) {
      goto LABEL_18;
    }
  }
  if (atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (v10) {
    return;
  }
LABEL_19:
  int v11 = *((void *)this + 10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C59C6000, v11, OS_LOG_TYPE_ERROR, "Failed to send power state", buf, 2u);
  }
}

void sub_1C5A61E88(_Unwind_Exception *a1)
{
}

void ___ZN9SARModule28initializeHandDetection_syncEv_block_invoke(void *a1, unsigned __int8 a2)
{
  v29[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = a1[4];
  long long v6 = std::__shared_weak_count::lock(v3);
  if (!v6) {
    return;
  }
  uint64_t v7 = v6;
  uint64_t v8 = a1[5];
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v8) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
    if (!v8) {
      return;
    }
  }
  if (*(unsigned char *)(v5 + 264)) {
    unsigned __int8 v9 = a2;
  }
  else {
    unsigned __int8 v9 = 0;
  }
  *(unsigned char *)(v5 + 168) = v9;
  char v10 = *(NSObject **)(v5 + 80);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v9;
    _os_log_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_DEFAULT, "#I Sending Grip State: 0x%x\n", buf, 8u);
  }
  int v11 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  char v12 = (AppleSARHelper *)off_1EA3D67B0;
  if (!off_1EA3D67B0)
  {
    AppleSARHelper::create_default_global((uint64_t *)buf, v11);
    long long v13 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    long long v14 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
    off_1EA3D67B0 = v13;
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    long long v15 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    char v12 = (AppleSARHelper *)off_1EA3D67B0;
  }
  uint64_t v16 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
  if (*(&off_1EA3D67B0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EA3D67B0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  char v26 = *(unsigned char *)(v5 + 168);
  if (*((_DWORD *)v12 + 1))
  {
    *(void *)long long buf = 0;
    v29[0] = 0;
    unsigned int v27 = 1;
    char v17 = AppleSARHelper::callUserClientMethod(v12, 7, (const unint64_t *)buf, 1, &v26, 1, v29, &v27, &v26, 1uLL);
    if (!v16) {
      goto LABEL_27;
    }
  }
  else
  {
    char v17 = 0;
    if (!v16) {
      goto LABEL_27;
    }
  }
  if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (v17) {
      goto LABEL_28;
    }
    goto LABEL_35;
  }
LABEL_27:
  if (v17)
  {
LABEL_28:
    if (*(unsigned __int8 *)(v5 + 169) != *(unsigned __int8 *)(v5 + 168) || !*(void *)(v5 + 304))
    {
      char v18 = *(std::__shared_weak_count **)(v5 + 56);
      if (!v18 || (uint64_t v19 = *(void *)(v5 + 48), (v20 = std::__shared_weak_count::lock(v18)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      int v21 = v20;
      unsigned int v22 = operator new(8uLL);
      *unsigned int v22 = v5;
      uint64_t v23 = *(NSObject **)(v5 + 64);
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      xpc_object_t v24 = operator new(0x18uLL);
      void *v24 = v22;
      v24[1] = v19;
      unint64_t v24[2] = v21;
      dispatch_async_f(v23, v24, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_28initializeHandDetection_syncEvEUb5_E3__9EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_);
      if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    return;
  }
LABEL_35:
  uint64_t v25 = *(NSObject **)(v5 + 80);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C59C6000, v25, OS_LOG_TYPE_ERROR, "Failed to set SAR Fusion State!", buf, 2u);
  }
}

void sub_1C5A622B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t dispatch::callback<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>::~callback(uint64_t a1)
{
  int v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void ___ZN9SARModule32initializeVoIPCallDetection_syncEv_block_invoke(void *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    unsigned __int8 v9 = (NSObject **)a1[4];
    char v10 = std::__shared_weak_count::lock(v5);
    if (v10)
    {
      int v11 = v10;
      uint64_t v12 = a1[5];
      if (atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v12) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
        if (!v12) {
          return;
        }
      }
      long long v13 = v9[10];
      if (a4)
      {
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          long long v14 = "NO";
          if (a2) {
            long long v15 = "YES";
          }
          else {
            long long v15 = "NO";
          }
          int v19 = 136315650;
          uint64_t v20 = a4;
          __int16 v21 = 2080;
          unsigned int v22 = v15;
          if (a3) {
            long long v14 = "YES";
          }
          __int16 v23 = 2080;
          xpc_object_t v24 = v14;
          _os_log_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_DEFAULT, "#I %s: callStarting: %s, callActive: %s", (uint8_t *)&v19, 0x20u);
        }
        if (a2 && (a3 & 1) == 0)
        {
          uint64_t v16 = (SARModule *)v9;
          char v17 = 1;
LABEL_23:
          SARModule::processCallStatus(v16, v17);
          return;
        }
        if ((a2 & 1) == 0 && (a3 & 1) == 0)
        {
          uint64_t v16 = (SARModule *)v9;
          char v17 = 0;
          goto LABEL_23;
        }
        char v18 = v9[10];
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v19) = 0;
          _os_log_debug_impl(&dword_1C59C6000, v18, OS_LOG_TYPE_DEBUG, "#D No matching condition to check FT Call status", (uint8_t *)&v19, 2u);
        }
      }
      else if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v19) = 0;
        _os_log_error_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_ERROR, "No provider ID. Reject this call", (uint8_t *)&v19, 2u);
      }
    }
  }
}

void SARModule::sendCurrentState_sync(SARModule *this)
{
  v73[1] = *MEMORY[0x1E4F143B8];
  int v2 = *((void *)this + 10);
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Processing Cached Values", buf, 2u);
  }
  capabilities::abs::supportedSARFeatures((capabilities::abs *)v3);
  if (capabilities::abs::operator&())
  {
    BYTE2(v70) = 0;
    LOWORD(v70) = 0;
    long long v4 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
    uint64_t v5 = (AppleSARHelper *)off_1EA3D67B0;
    if (!off_1EA3D67B0)
    {
      AppleSARHelper::create_default_global((uint64_t *)buf, v4);
      long long v6 = *(_OWORD *)buf;
      memset(buf, 0, sizeof(buf));
      uint64_t v7 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
      off_1EA3D67B0 = v6;
      if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      uint64_t v8 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      uint64_t v5 = (AppleSARHelper *)off_1EA3D67B0;
    }
    unsigned __int8 v9 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
    long long v68 = v5;
    uint64_t v69 = *(&off_1EA3D67B0 + 1);
    if (*(&off_1EA3D67B0 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EA3D67B0 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
    if (*((_DWORD *)v5 + 1))
    {
      *(void *)long long buf = 3;
      v73[0] = 0;
      unsigned int v71 = 1;
      char v10 = AppleSARHelper::callUserClientMethod(v5, 31, (const unint64_t *)buf, 1, &v70, 3, v73, &v71, &v70, 3uLL);
      if (!v9) {
        goto LABEL_19;
      }
    }
    else
    {
      char v10 = 0;
      if (!v9) {
        goto LABEL_19;
      }
    }
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (v10)
      {
LABEL_20:
        int v11 = (std::__shared_weak_count *)*((void *)this + 7);
        if (!v11 || (uint64_t v12 = *((void *)this + 6), (v13 = std::__shared_weak_count::lock(v11)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        long long v14 = v13;
        p_shared_weak_owners = &v13->__shared_weak_owners_;
        atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v14);
        }
        uint64_t v16 = *((void *)this + 35);
        uint64_t v17 = *(unsigned __int16 *)((char *)&v70 + 1);
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 3321888768;
        aBlock[2] = ___ZN9SARModule21sendCurrentState_syncEv_block_invoke;
        aBlock[3] = &__block_descriptor_59_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE_e21_v20__0B8_object__v_12l;
        aBlock[4] = this;
        void aBlock[5] = v12;
        long long v63 = v14;
        atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
        __int16 v64 = v70;
        char v65 = BYTE2(v70);
        char v18 = _Block_copy(aBlock);
        int v19 = *((void *)this + 8);
        if (v19) {
          dispatch_retain(*((dispatch_object_t *)this + 8));
        }
        long long v66 = v18;
        dispatch_object_t object = v19;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v16 + 64))(v16, v17, &v66);
        if (object) {
          dispatch_release(object);
        }
        if (v66) {
          _Block_release(v66);
        }
        if (v63) {
          std::__shared_weak_count::__release_weak(v63);
        }
        std::__shared_weak_count::__release_weak(v14);
        goto LABEL_36;
      }
      goto LABEL_34;
    }
LABEL_19:
    if (v10) {
      goto LABEL_20;
    }
LABEL_34:
    uint64_t v20 = *((void *)this + 10);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1C59C6000, v20, OS_LOG_TYPE_ERROR, "Failed to get SAR transition time!", buf, 2u);
    }
  }
LABEL_36:
  __int16 v21 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  unsigned int v22 = (AppleSARHelper *)off_1EA3D67B0;
  if (!off_1EA3D67B0)
  {
    AppleSARHelper::create_default_global((uint64_t *)buf, v21);
    long long v23 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    xpc_object_t v24 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
    off_1EA3D67B0 = v23;
    if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    uint64_t v25 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    unsigned int v22 = (AppleSARHelper *)off_1EA3D67B0;
  }
  char v26 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
  long long v68 = v22;
  uint64_t v69 = *(&off_1EA3D67B0 + 1);
  if (*(&off_1EA3D67B0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EA3D67B0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  int v70 = *(_DWORD *)((char *)this + 161);
  if (*((_DWORD *)v22 + 1))
  {
    *(void *)long long buf = 0;
    v73[0] = 0;
    unsigned int v71 = 1;
    char v27 = AppleSARHelper::callUserClientMethod(v22, 2, (const unint64_t *)buf, 1, &v70, 4, v73, &v71, &v70, 4uLL);
    if (!v26)
    {
LABEL_51:
      if (v27) {
        goto LABEL_52;
      }
LABEL_66:
      uint64_t v35 = *((void *)this + 10);
      if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
        return;
      }
      *(_WORD *)long long buf = 0;
      uint64_t v36 = "Failed to send accessory state";
      goto LABEL_144;
    }
  }
  else
  {
    char v27 = 0;
    if (!v26) {
      goto LABEL_51;
    }
  }
  if (atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_51;
  }
  ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
  std::__shared_weak_count::__release_weak(v26);
  if ((v27 & 1) == 0) {
    goto LABEL_66;
  }
LABEL_52:
  unsigned int v28 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  CFTypeID v29 = (AppleSARHelper *)off_1EA3D67B0;
  if (!off_1EA3D67B0)
  {
    AppleSARHelper::create_default_global((uint64_t *)buf, v28);
    long long v30 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    xpc_object_t v31 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
    off_1EA3D67B0 = v30;
    if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
    unint64_t v32 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
    CFTypeID v29 = (AppleSARHelper *)off_1EA3D67B0;
  }
  size_t v33 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
  long long v68 = v29;
  uint64_t v69 = *(&off_1EA3D67B0 + 1);
  if (*(&off_1EA3D67B0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EA3D67B0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  LOBYTE(v70) = *((unsigned char *)this + 165);
  if (*((_DWORD *)v29 + 1))
  {
    *(void *)long long buf = 0;
    v73[0] = 0;
    unsigned int v71 = 1;
    char v34 = AppleSARHelper::callUserClientMethod(v29, 3, (const unint64_t *)buf, 1, &v70, 1, v73, &v71, &v70, 1uLL);
    if (!v33)
    {
LABEL_70:
      if (v34) {
        goto LABEL_71;
      }
LABEL_85:
      uint64_t v35 = *((void *)this + 10);
      if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
        return;
      }
      *(_WORD *)long long buf = 0;
      uint64_t v36 = "Failed to send sar_selection and tuner state";
      goto LABEL_144;
    }
  }
  else
  {
    char v34 = 0;
    if (!v33) {
      goto LABEL_70;
    }
  }
  if (atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_70;
  }
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  if ((v34 & 1) == 0) {
    goto LABEL_85;
  }
LABEL_71:
  xpc_object_t v37 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  xpc_object_t v38 = (AppleSARHelper *)off_1EA3D67B0;
  if (!off_1EA3D67B0)
  {
    AppleSARHelper::create_default_global((uint64_t *)buf, v37);
    long long v39 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    uint64_t v40 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
    off_1EA3D67B0 = v39;
    if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
    xpc_object_t v41 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
    xpc_object_t v38 = (AppleSARHelper *)off_1EA3D67B0;
  }
  CFTypeRef v42 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
  long long v68 = v38;
  uint64_t v69 = *(&off_1EA3D67B0 + 1);
  if (*(&off_1EA3D67B0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EA3D67B0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  LOBYTE(v70) = *((unsigned char *)this + 167);
  if (*((_DWORD *)v38 + 1))
  {
    *(void *)long long buf = 0;
    v73[0] = 0;
    unsigned int v71 = 1;
    char v43 = AppleSARHelper::callUserClientMethod(v38, 6, (const unint64_t *)buf, 1, &v70, 1, v73, &v71, &v70, 1uLL);
    if (!v42)
    {
LABEL_89:
      if (v43) {
        goto LABEL_90;
      }
LABEL_104:
      uint64_t v35 = *((void *)this + 10);
      if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
        return;
      }
      *(_WORD *)long long buf = 0;
      uint64_t v36 = "Failed to send speaker state";
      goto LABEL_144;
    }
  }
  else
  {
    char v43 = 0;
    if (!v42) {
      goto LABEL_89;
    }
  }
  if (atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_89;
  }
  ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
  std::__shared_weak_count::__release_weak(v42);
  if ((v43 & 1) == 0) {
    goto LABEL_104;
  }
LABEL_90:
  unint64_t v44 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  uint64_t v45 = (AppleSARHelper *)off_1EA3D67B0;
  if (!off_1EA3D67B0)
  {
    AppleSARHelper::create_default_global((uint64_t *)buf, v44);
    long long v46 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    xpc_object_t v47 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
    off_1EA3D67B0 = v46;
    if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
    char v48 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
    uint64_t v45 = (AppleSARHelper *)off_1EA3D67B0;
  }
  long long v49 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
  long long v68 = v45;
  uint64_t v69 = *(&off_1EA3D67B0 + 1);
  if (*(&off_1EA3D67B0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EA3D67B0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  LOBYTE(v70) = *((unsigned char *)this + 168);
  if (*((_DWORD *)v45 + 1))
  {
    *(void *)long long buf = 0;
    v73[0] = 0;
    unsigned int v71 = 1;
    char v50 = AppleSARHelper::callUserClientMethod(v45, 7, (const unint64_t *)buf, 1, &v70, 1, v73, &v71, &v70, 1uLL);
    if (!v49) {
      goto LABEL_109;
    }
  }
  else
  {
    char v50 = 0;
    if (!v49) {
      goto LABEL_109;
    }
  }
  if (!atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
  }
LABEL_109:
  if ((v50 & 1) == 0)
  {
    uint64_t v35 = *((void *)this + 10);
    if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v36 = "Failed to send grip state";
    goto LABEL_144;
  }
  xpc_object_t v51 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  xpc_object_t v52 = (AppleSARHelper *)off_1EA3D67B0;
  if (!off_1EA3D67B0)
  {
    AppleSARHelper::create_default_global((uint64_t *)buf, v51);
    long long v53 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    int64_t v54 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
    off_1EA3D67B0 = v53;
    if (v54 && !atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
    long long v55 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
    xpc_object_t v52 = (AppleSARHelper *)off_1EA3D67B0;
  }
  uint64_t v56 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
  long long v68 = v52;
  uint64_t v69 = *(&off_1EA3D67B0 + 1);
  if (*(&off_1EA3D67B0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EA3D67B0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  LOBYTE(v70) = *((unsigned char *)this + 170);
  if (*((_DWORD *)v52 + 1))
  {
    *(void *)long long buf = 0;
    v73[0] = 0;
    unsigned int v71 = 1;
    char v57 = AppleSARHelper::callUserClientMethod(v52, 8, (const unint64_t *)buf, 1, &v70, 1, v73, &v71, &v70, 1uLL);
    if (!v56) {
      goto LABEL_128;
    }
  }
  else
  {
    char v57 = 0;
    if (!v56) {
      goto LABEL_128;
    }
  }
  if (!atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
  }
LABEL_128:
  if ((v57 & 1) == 0)
  {
    uint64_t v35 = *((void *)this + 10);
    if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v36 = "Failed to send power state";
    goto LABEL_144;
  }
  long long v58 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  long long v59 = (AppleSARHelper *)off_1EA3D67B0;
  if (!off_1EA3D67B0)
  {
    AppleSARHelper::create_default_global((uint64_t *)buf, v58);
    std::shared_ptr<AppleSARHelper>::operator=[abi:ne180100]((long long *)buf);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    long long v59 = (AppleSARHelper *)off_1EA3D67B0;
  }
  long long v60 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
  long long v68 = v59;
  uint64_t v69 = *(&off_1EA3D67B0 + 1);
  if (*(&off_1EA3D67B0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EA3D67B0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  LOBYTE(v70) = *((unsigned char *)this + 171);
  if (*((_DWORD *)v59 + 1))
  {
    *(void *)long long buf = 0;
    v73[0] = 0;
    unsigned int v71 = 1;
    char v61 = AppleSARHelper::callUserClientMethod(v59, 9, (const unint64_t *)buf, 1, &v70, 1, v73, &v71, &v70, 1uLL);
  }
  else
  {
    char v61 = 0;
  }
  if (v60 && !atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
  if ((v61 & 1) == 0)
  {
    uint64_t v35 = *((void *)this + 10);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v36 = "Failed to send wrist state";
LABEL_144:
      _os_log_error_impl(&dword_1C59C6000, v35, OS_LOG_TYPE_ERROR, v36, buf, 2u);
    }
  }
}

void sub_1C5A63328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
}

void ___ZN9SARModule21sendCurrentState_syncEv_block_invoke(uint64_t a1, int a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  BOOL v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    long long v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)(a1 + 40);
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8)
      {
        unsigned __int8 v9 = *(NSObject **)(v5 + 80);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          char v10 = "Failed to send";
          int v11 = *(unsigned __int16 *)(a1 + 57);
          if (a2) {
            char v10 = "Succeeded in sending";
          }
          int v12 = 136315394;
          long long v13 = v10;
          __int16 v14 = 1024;
          int v15 = v11;
          _os_log_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEFAULT, "#I %s stewie SAR wait time (%u sec)", (uint8_t *)&v12, 0x12u);
        }
      }
    }
  }
}

uint64_t dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback(uint64_t a1)
{
  int v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void xpc::dict::to_debug_string(xpc::dict *this@<X0>, void *a2@<X8>)
{
  BOOL v3 = (char *)MEMORY[0x1C8795DE0](*(void *)this);
  memset(a2, 170, 24);
  size_t v4 = strlen(v3);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v6 = v4 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
    goto LABEL_8;
  }
  *((unsigned char *)a2 + 23) = v4;
  if (v4) {
LABEL_8:
  }
    memcpy(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;

  free(v3);
}

uint64_t SARModule::convertUSBCAccessoryBitMask(uint64_t a1, unsigned __int16 **a2)
{
  int v2 = *a2;
  BOOL v3 = a2[1];
  if (*a2 != v3)
  {
    LODWORD(v4) = 0;
    while (1)
    {
      int v6 = *v2;
      int v7 = v2[1];
      if (v6 == 17 && v7 == 2) {
        LODWORD(v4) = v4 | 0x40000;
      }
      if (v6 == 18 && v7 == 2) {
        LODWORD(v4) = v4 | 0x80000;
      }
      if (v6 == 19 && v7 == 2) {
        LODWORD(v4) = v4 | 0x100000;
      }
      if (v6 == 20 && v7 == 2) {
        uint64_t v4 = v4 | 0x200000;
      }
      else {
        uint64_t v4 = v4;
      }
      int v8 = v2[3];
      if (v8 == 3 && v6 == 2055)
      {
        if (v7 == 2)
        {
          uint64_t v4 = v4 | 0x400000;
LABEL_25:
          unsigned int v5 = *(_DWORD *)(a1 + 272) | 1;
          goto LABEL_5;
        }
        uint64_t v4 = v4 & 0xFFBFFFFF;
      }
      else
      {
        if (v6 == 4) {
          *(_DWORD *)(a1 + 272) = *(_DWORD *)(a1 + 272) & 0xFFFFFBFF | ((v7 == 2) << 10);
        }
        if (!v8 || v8 == 0xFFFF) {
          goto LABEL_6;
        }
        if (v7 == 2) {
          goto LABEL_25;
        }
      }
      unsigned int v5 = *(_DWORD *)(a1 + 272) & 0xFFFFFFFE;
LABEL_5:
      *(_DWORD *)(a1 + 272) = v5;
LABEL_6:
      v2 += 6;
      if (v2 == v3) {
        return v4;
      }
    }
  }
  return 0;
}

void SARModule::setupTxIndicationWorkaround(SARModule *this)
{
  if (*((void *)this + 35))
  {
    xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
    uint64_t v3 = MEMORY[0x1E4F14590];
    if (v2 || (xpc_object_t v2 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C8795EB0](v2) == v3)
      {
        xpc_retain(v2);
        xpc_object_t v4 = v2;
      }
      else
      {
        xpc_object_t v4 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
      xpc_object_t v2 = 0;
    }
    xpc_release(v2);
    xpc_object_t v6 = xpc_string_create((const char *)*MEMORY[0x1E4FB9D70]);
    if (!v6) {
      xpc_object_t v6 = xpc_null_create();
    }
    int v7 = (const char *)*MEMORY[0x1E4FB9C68];
    xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E4FB9C68], v6);
    xpc_object_t v8 = xpc_null_create();
    xpc_release(v6);
    xpc_release(v8);
    xpc_object_t v9 = xpc_BOOL_create(1);
    if (!v9) {
      xpc_object_t v9 = xpc_null_create();
    }
    xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E4FB9D48], v9);
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    int v11 = (std::__shared_weak_count *)*((void *)this + 7);
    if (!v11 || (uint64_t v12 = *((void *)this + 6), (v13 = std::__shared_weak_count::lock(v11)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    __int16 v14 = v13;
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v15 = *((void *)this + 35);
      v61[0] = v4;
      if (v4)
      {
LABEL_18:
        xpc_retain(v4);
        goto LABEL_21;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v14);
      uint64_t v15 = *((void *)this + 35);
      v61[0] = v4;
      if (v4) {
        goto LABEL_18;
      }
    }
    v61[0] = xpc_null_create();
LABEL_21:
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3321888768;
    aBlock[2] = ___ZN9SARModule27setupTxIndicationWorkaroundEv_block_invoke;
    aBlock[3] = &__block_descriptor_64_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE56c15_ZTSN3xpc4dictE_e21_v20__0B8_object__v_12l;
    aBlock[4] = this;
    void aBlock[5] = v12;
    char v57 = v14;
    atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    xpc_object_t object = v4;
    if (v4) {
      xpc_retain(v4);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    uint64_t v16 = _Block_copy(aBlock);
    uint64_t v17 = *((void *)this + 8);
    if (v17) {
      dispatch_retain(*((dispatch_object_t *)this + 8));
    }
    *(void *)long long buf = v16;
    dispatch_object_t v60 = v17;
    (*(void (**)(uint64_t, xpc_object_t *, uint8_t *))(*(void *)v15 + 48))(v15, v61, buf);
    if (v60) {
      dispatch_release(v60);
    }
    if (*(void *)buf) {
      _Block_release(*(const void **)buf);
    }
    xpc_release(v61[0]);
    v61[0] = 0;
    xpc_release(object);
    xpc_object_t object = 0;
    if (v57) {
      std::__shared_weak_count::__release_weak(v57);
    }
    std::__shared_weak_count::__release_weak(v14);
    xpc_release(v4);
    xpc_object_t v18 = xpc_dictionary_create(0, 0, 0);
    if (v18 || (xpc_object_t v18 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C8795EB0](v18) == v3)
      {
        xpc_retain(v18);
        xpc_object_t v19 = v18;
      }
      else
      {
        xpc_object_t v19 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v19 = xpc_null_create();
      xpc_object_t v18 = 0;
    }
    xpc_release(v18);
    uint64_t v20 = MEMORY[0x1C8795EB0](v19);
    if (v20 != v3)
    {
      __int16 v21 = *((void *)this + 10);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl(&dword_1C59C6000, v21, OS_LOG_TYPE_ERROR, "Failed to create dictionary for antenna command driver!", buf, 2u);
      }
      goto LABEL_68;
    }
    xpc_object_t v22 = xpc_string_create((const char *)*MEMORY[0x1E4FB9DB8]);
    if (!v22) {
      xpc_object_t v22 = xpc_null_create();
    }
    xpc_dictionary_set_value(v19, v7, v22);
    xpc_object_t v23 = xpc_null_create();
    xpc_release(v22);
    xpc_release(v23);
    xpc_object_t v24 = xpc_BOOL_create(1);
    if (!v24) {
      xpc_object_t v24 = xpc_null_create();
    }
    xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E4FB9D80], v24);
    xpc_object_t v25 = xpc_null_create();
    xpc_release(v24);
    xpc_release(v25);
    xpc_object_t v26 = xpc_string_create((const char *)*MEMORY[0x1E4FB9DA0]);
    if (!v26) {
      xpc_object_t v26 = xpc_null_create();
    }
    xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E4FB9D98], v26);
    xpc_object_t v27 = xpc_null_create();
    xpc_release(v26);
    xpc_release(v27);
    xpc_object_t v28 = xpc_int64_create(1);
    if (!v28) {
      xpc_object_t v28 = xpc_null_create();
    }
    xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E4FB9D58], v28);
    xpc_object_t v29 = xpc_null_create();
    xpc_release(v28);
    xpc_release(v29);
    long long v30 = (std::__shared_weak_count *)*((void *)this + 7);
    if (!v30 || (uint64_t v31 = *((void *)this + 6), (v32 = std::__shared_weak_count::lock(v30)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    size_t v33 = v32;
    atomic_fetch_add_explicit(&v32->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v34 = *((void *)this + 35);
      xpc_object_t v55 = v19;
      if (v19)
      {
LABEL_53:
        xpc_retain(v19);
LABEL_56:
        v52[0] = MEMORY[0x1E4F143A8];
        v52[1] = 3321888768;
        v52[2] = ___ZN9SARModule27setupTxIndicationWorkaroundEv_block_invoke_51;
        v52[3] = &__block_descriptor_64_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE56c15_ZTSN3xpc4dictE_e21_v20__0B8_object__v_12l;
        v52[4] = this;
        v52[5] = v31;
        long long v53 = v33;
        atomic_fetch_add_explicit(&v33->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v54 = v19;
        if (v19) {
          xpc_retain(v19);
        }
        else {
          xpc_object_t v54 = xpc_null_create();
        }
        uint64_t v35 = _Block_copy(v52);
        uint64_t v36 = *((void *)this + 8);
        if (v36) {
          dispatch_retain(*((dispatch_object_t *)this + 8));
        }
        *(void *)long long buf = v35;
        dispatch_object_t v60 = v36;
        (*(void (**)(uint64_t, xpc_object_t *, uint8_t *))(*(void *)v34 + 48))(v34, &v55, buf);
        if (v60) {
          dispatch_release(v60);
        }
        if (*(void *)buf) {
          _Block_release(*(const void **)buf);
        }
        xpc_release(v55);
        xpc_object_t v55 = 0;
        xpc_release(v54);
        xpc_object_t v54 = 0;
        if (v53) {
          std::__shared_weak_count::__release_weak(v53);
        }
        std::__shared_weak_count::__release_weak(v33);
LABEL_68:
        xpc_release(v19);
        if (v20 != v3) {
          return;
        }
        xpc_object_t v37 = xpc_dictionary_create(0, 0, 0);
        if (v37 || (xpc_object_t v37 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C8795EB0](v37) == v3)
          {
            xpc_retain(v37);
            xpc_object_t v38 = v37;
          }
          else
          {
            xpc_object_t v38 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v38 = xpc_null_create();
          xpc_object_t v37 = 0;
        }
        xpc_release(v37);
        xpc_object_t v39 = xpc_string_create((const char *)*MEMORY[0x1E4FB9DE8]);
        if (!v39) {
          xpc_object_t v39 = xpc_null_create();
        }
        xpc_dictionary_set_value(v38, v7, v39);
        xpc_object_t v40 = xpc_null_create();
        xpc_release(v39);
        xpc_release(v40);
        xpc_object_t v41 = (std::__shared_weak_count *)*((void *)this + 7);
        if (!v41 || (uint64_t v42 = *((void *)this + 6), (v43 = std::__shared_weak_count::lock(v41)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        unint64_t v44 = v43;
        atomic_fetch_add_explicit(&v43->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        if (atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          uint64_t v45 = *((void *)this + 35);
          xpc_object_t v51 = v38;
          if (v38)
          {
LABEL_81:
            xpc_retain(v38);
LABEL_84:
            v48[0] = MEMORY[0x1E4F143A8];
            v48[1] = 3321888768;
            v48[2] = ___ZN9SARModule27setupTxIndicationWorkaroundEv_block_invoke_52;
            v48[3] = &__block_descriptor_64_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE56c15_ZTSN3xpc4dictE_e21_v20__0B8_object__v_12l;
            v48[4] = this;
            v48[5] = v42;
            long long v49 = v44;
            atomic_fetch_add_explicit(&v44->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            xpc_object_t v50 = v38;
            if (v38) {
              xpc_retain(v38);
            }
            else {
              xpc_object_t v50 = xpc_null_create();
            }
            long long v46 = _Block_copy(v48);
            xpc_object_t v47 = *((void *)this + 8);
            if (v47) {
              dispatch_retain(v47);
            }
            *(void *)long long buf = v46;
            dispatch_object_t v60 = v47;
            (*(void (**)(uint64_t, xpc_object_t *, uint8_t *))(*(void *)v45 + 48))(v45, &v51, buf);
            if (v60) {
              dispatch_release(v60);
            }
            if (*(void *)buf) {
              _Block_release(*(const void **)buf);
            }
            xpc_release(v51);
            xpc_object_t v51 = 0;
            xpc_release(v50);
            xpc_object_t v50 = 0;
            if (v49) {
              std::__shared_weak_count::__release_weak(v49);
            }
            std::__shared_weak_count::__release_weak(v44);
            xpc_release(v38);
            return;
          }
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v44);
          uint64_t v45 = *((void *)this + 35);
          xpc_object_t v51 = v38;
          if (v38) {
            goto LABEL_81;
          }
        }
        xpc_object_t v51 = xpc_null_create();
        goto LABEL_84;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v33);
      uint64_t v34 = *((void *)this + 35);
      xpc_object_t v55 = v19;
      if (v19) {
        goto LABEL_53;
      }
    }
    xpc_object_t v55 = xpc_null_create();
    goto LABEL_56;
  }
  unsigned int v5 = *((void *)this + 10);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_ERROR, "Check if it is mav device or antenna command driver is ready yet!", buf, 2u);
  }
}

void sub_1C5A64140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, xpc_object_t object, xpc_object_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,xpc_object_t a25,xpc_object_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,xpc_object_t a34)
{
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback(v36 - 128);
  xpc_release(object);
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  xpc_release(a17);
  std::__shared_weak_count::__release_weak(v34);
  xpc_release(v35);
  _Unwind_Resume(a1);
}

void ___ZN9SARModule27setupTxIndicationWorkaroundEv_block_invoke(void *a1, char a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      if (a2)
      {
        xpc_object_t v9 = *(NSObject **)(v5 + 80);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEFAULT, "#I Succeeded in enabling Tx Capping Enable", buf, 2u);
        }
      }
      else
      {
        int v11 = (void *)a1[7];
        xpc_object_t v10 = a1 + 7;
        uint64_t v12 = *MEMORY[0x1E4FB9C68];
        if (xpc_dictionary_get_value(v11, (const char *)*MEMORY[0x1E4FB9C68]))
        {
          long long v13 = *(NSObject **)(v5 + 80);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            v16[0] = v10;
            v16[1] = v12;
            xpc::dict::object_proxy::operator xpc::object((uint64_t)v16, &object);
            xpc::dyn_cast_or_default((uint64_t *)buf, (xpc *)&object, (const object *)"None", v14);
            if (v19 >= 0) {
              uint64_t v15 = buf;
            }
            else {
              uint64_t v15 = *(uint8_t **)buf;
            }
            *(_DWORD *)uint64_t v20 = 136315138;
            __int16 v21 = v15;
            _os_log_error_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_ERROR, "Failed to run command driver: %s", v20, 0xCu);
            if (v19 < 0) {
              operator delete(*(void **)buf);
            }
            xpc_release(object);
          }
        }
      }
    }
  }
}

void sub_1C5A64514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

xpc_object_t __copy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE56c15_ZTSN3xpc4dictE(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v4 = (void *)a2[7];
  a1[7] = v4;
  if (v4) {
    return xpc_retain(v4);
  }
  xpc_object_t result = xpc_null_create();
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE56c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(void *)(a1 + 56) = 0;
  xpc_object_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void ___ZN9SARModule27setupTxIndicationWorkaroundEv_block_invoke_51(void *a1, char a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      if (a2)
      {
        xpc_object_t v9 = *(NSObject **)(v5 + 80);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEFAULT, "#I Succeeded in enabling Tx indication", buf, 2u);
        }
      }
      else
      {
        int v11 = (void *)a1[7];
        xpc_object_t v10 = a1 + 7;
        uint64_t v12 = *MEMORY[0x1E4FB9C68];
        if (xpc_dictionary_get_value(v11, (const char *)*MEMORY[0x1E4FB9C68]))
        {
          long long v13 = *(NSObject **)(v5 + 80);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            v16[0] = v10;
            v16[1] = v12;
            xpc::dict::object_proxy::operator xpc::object((uint64_t)v16, &object);
            xpc::dyn_cast_or_default((uint64_t *)buf, (xpc *)&object, (const object *)"None", v14);
            if (v19 >= 0) {
              uint64_t v15 = buf;
            }
            else {
              uint64_t v15 = *(uint8_t **)buf;
            }
            *(_DWORD *)uint64_t v20 = 136315138;
            __int16 v21 = v15;
            _os_log_error_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_ERROR, "Failed to run command driver: %s", v20, 0xCu);
            if (v19 < 0) {
              operator delete(*(void **)buf);
            }
            xpc_release(object);
          }
        }
      }
    }
  }
}

void sub_1C5A647C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN9SARModule27setupTxIndicationWorkaroundEv_block_invoke_52(void *a1, char a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      if (a2)
      {
        xpc_object_t v9 = *(NSObject **)(v5 + 80);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEFAULT, "#I Succeeded in registering Tx indication", buf, 2u);
        }
      }
      else
      {
        int v11 = (void *)a1[7];
        xpc_object_t v10 = a1 + 7;
        uint64_t v12 = *MEMORY[0x1E4FB9C68];
        if (xpc_dictionary_get_value(v11, (const char *)*MEMORY[0x1E4FB9C68]))
        {
          long long v13 = *(NSObject **)(v5 + 80);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            v16[0] = v10;
            v16[1] = v12;
            xpc::dict::object_proxy::operator xpc::object((uint64_t)v16, &object);
            xpc::dyn_cast_or_default((uint64_t *)buf, (xpc *)&object, (const object *)"None", v14);
            if (v19 >= 0) {
              uint64_t v15 = buf;
            }
            else {
              uint64_t v15 = *(uint8_t **)buf;
            }
            *(_DWORD *)uint64_t v20 = 136315138;
            __int16 v21 = v15;
            _os_log_error_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_ERROR, "Failed to run command driver: %s", v20, 0xCu);
            if (v19 < 0) {
              operator delete(*(void **)buf);
            }
            xpc_release(object);
          }
        }
      }
    }
  }
}

void sub_1C5A649C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void SARModule::transmitStateHandler(void *a1, int a2, int a3)
{
  xpc_object_t v4 = (std::__shared_weak_count *)a1[7];
  if (!v4 || (uint64_t v7 = a1[6], (v8 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v9 = v8;
  xpc_object_t v10 = operator new(0x10uLL);
  *(void *)xpc_object_t v10 = a1;
  v10[2] = a2;
  v10[3] = a3;
  int v11 = a1[8];
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = operator new(0x18uLL);
  void *v12 = v10;
  v12[1] = v7;
  v12[2] = v9;
  dispatch_async_f(v11, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<SARModule>::execute_wrapped<SARModule::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0>(SARModule::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SARModule::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0,dispatch_queue_s *::default_delete<SARModule::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void SARModule::createTransmitStateDict_sync(capabilities::radio *a1@<X0>, int a2@<W1>, int a3@<W2>, xpc_object_t *a4@<X8>)
{
  if (capabilities::radio::maverick(a1))
  {
    xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
    if (v8 || (xpc_object_t v8 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C8795EB0](v8) == MEMORY[0x1E4F14590])
      {
        xpc_retain(v8);
        xpc_object_t v9 = v8;
      }
      else
      {
        xpc_object_t v9 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v9 = xpc_null_create();
      xpc_object_t v8 = 0;
    }
    xpc_release(v8);
    if (a2 == 1)
    {
      xpc_object_t v11 = xpc_string_create((const char *)*MEMORY[0x1E4F4D0C0]);
      if (!v11) {
        xpc_object_t v11 = xpc_null_create();
      }
    }
    else
    {
      if (a2)
      {
        *a4 = xpc_null_create();
LABEL_35:
        xpc_release(v9);
        return;
      }
      xpc_object_t v11 = xpc_string_create((const char *)*MEMORY[0x1E4F4CDB0]);
      if (!v11) {
        xpc_object_t v11 = xpc_null_create();
      }
    }
    xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E4F4CD50], v11);
    xpc_object_t v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
    switch(a3)
    {
      case 0:
        xpc_object_t v13 = xpc_string_create((const char *)*MEMORY[0x1E4F4CEC8]);
        if (!v13) {
          xpc_object_t v13 = xpc_null_create();
        }
        goto LABEL_31;
      case 1:
        xpc_object_t v13 = xpc_string_create((const char *)*MEMORY[0x1E4F4CD00]);
        if (!v13) {
          xpc_object_t v13 = xpc_null_create();
        }
        goto LABEL_31;
      case 2:
        xpc_object_t v13 = xpc_string_create((const char *)*MEMORY[0x1E4F4CDA8]);
        if (!v13) {
          xpc_object_t v13 = xpc_null_create();
        }
        goto LABEL_31;
      case 3:
        xpc_object_t v13 = xpc_string_create((const char *)*MEMORY[0x1E4F4CBE0]);
        if (!v13) {
          xpc_object_t v13 = xpc_null_create();
        }
LABEL_31:
        xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E4F4CF18], v13);
        xpc_object_t v14 = xpc_null_create();
        xpc_release(v13);
        xpc_release(v14);
        break;
      default:
        break;
    }
    xpc_object_t v15 = xpc_string_create((const char *)*MEMORY[0x1E4F4C750]);
    if (!v15) {
      xpc_object_t v15 = xpc_null_create();
    }
    xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E4F4C7D8], v15);
    xpc_object_t v16 = xpc_null_create();
    xpc_release(v15);
    xpc_release(v16);
    *a4 = v9;
    xpc_object_t v9 = xpc_null_create();
    goto LABEL_35;
  }
  xpc_object_t v10 = *((void *)a1 + 10);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v17 = 0;
    _os_log_error_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_ERROR, "This is not supported device", v17, 2u);
  }
  *a4 = xpc_null_create();
}

uint64_t SARModule::asString@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (result == 1)
  {
    *(unsigned char *)(a2 + 23) = 12;
    strcpy((char *)a2, "EventUpdated");
  }
  else
  {
    if (result) {
      xpc_object_t v2 = "UnknownReason";
    }
    else {
      xpc_object_t v2 = "CallConnected";
    }
    *(unsigned char *)(a2 + 23) = 13;
    *(void *)a2 = *(void *)v2;
    *(void *)(a2 + 5) = *(void *)(v2 + 5);
    *(unsigned char *)(a2 + 13) = 0;
  }
  return result;
}

uint64_t ctu::PthreadMutexGuardPolicy<AppleSARHelper>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  xpc_object_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void std::__shared_ptr_pointer<SARModule *,std::shared_ptr<SARModule> ctu::SharedSynchronizable<SARModule>::make_shared_ptr<SARModule>(SARModule*)::{lambda(SARModule *)#1},std::allocator<SARModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<SARModule *,std::shared_ptr<SARModule> ctu::SharedSynchronizable<SARModule>::make_shared_ptr<SARModule>(SARModule*)::{lambda(SARModule *)#1},std::allocator<SARModule>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<SARModule *,std::shared_ptr<SARModule> ctu::SharedSynchronizable<SARModule>::make_shared_ptr<SARModule>(SARModule*)::{lambda(SARModule *)#1},std::allocator<SARModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI9SARModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI9SARModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI9SARModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI9SARModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

uint64_t std::shared_ptr<SARModule> ctu::SharedSynchronizable<SARModule>::make_shared_ptr<SARModule>(SARModule*)::{lambda(SARModule*)#1}::operator() const(SARModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void dispatch::async<void ctu::SharedSynchronizable<SARModule>::execute_wrapped<SARModule::shutdown(ShutdownStage,dispatch::group_session)::$_0>(SARModule::shutdown(ShutdownStage,dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SARModule::shutdown(ShutdownStage,dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<SARModule::shutdown(ShutdownStage,dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  xpc_object_t v2 = (void *)*a1;
  unint64_t v3 = *(void **)*a1;
  xpc_object_t v4 = (std::__shared_weak_count *)v3[12];
  v3[11] = 0;
  v3[12] = 0;
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v3[35]) {
      goto LABEL_6;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  if (v3[35]) {
LABEL_4:
  }
    antenna::CommandDriver::registerHandler();
LABEL_6:
  uint64_t v5 = (IOKitEventNotifier *)v3[28];
  if (v5) {
    IOKitEventNotifier::shutdown(v5);
  }
  xpc_object_t v6 = v2[1];
  if (v6)
  {
    dispatch_group_leave(v6);
    uint64_t v7 = v2[1];
    if (v7) {
      dispatch_release(v7);
    }
  }
  operator delete(v2);
  xpc_object_t v8 = (std::__shared_weak_count *)a1[2];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(a1);
}

void sub_1C5A65320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  xpc_object_t v13 = v11[1];
  if (v13)
  {
    dispatch_group_leave(v13);
    xpc_object_t v14 = v11[1];
    if (v14) {
      dispatch_release(v14);
    }
  }
  operator delete(v11);
  xpc_object_t v15 = (std::__shared_weak_count *)v10[2];
  if (v15)
  {
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<antenna::AntennaCommandDriverDelegate<SARModule>::create(std::shared_ptr<SARModule>)::MakeSharedEnabler,std::allocator<antenna::AntennaCommandDriverDelegate<SARModule>::create(std::shared_ptr<SARModule>)::MakeSharedEnabler>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2106C18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<antenna::AntennaCommandDriverDelegate<SARModule>::create(std::shared_ptr<SARModule>)::MakeSharedEnabler,std::allocator<antenna::AntennaCommandDriverDelegate<SARModule>::create(std::shared_ptr<SARModule>)::MakeSharedEnabler>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2106C18;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<antenna::AntennaCommandDriverDelegate<SARModule>::create(std::shared_ptr<SARModule>)::MakeSharedEnabler,std::allocator<antenna::AntennaCommandDriverDelegate<SARModule>::create(std::shared_ptr<SARModule>)::MakeSharedEnabler>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void antenna::AntennaCommandDriverDelegate<SARModule>::create(std::shared_ptr<SARModule>)::MakeSharedEnabler::~MakeSharedEnabler(antenna::AntennaCommandDriverDelegateInterface *this)
{
  *(void *)this = &unk_1F2106CC0;
  xpc_object_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  antenna::AntennaCommandDriverDelegateInterface::~AntennaCommandDriverDelegateInterface(this);
}

{
  std::__shared_weak_count *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F2106CC0;
  xpc_object_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  antenna::AntennaCommandDriverDelegateInterface::~AntennaCommandDriverDelegateInterface(this);

  operator delete(v3);
}

void antenna::AntennaCommandDriverDelegate<SARModule>::signalTransmitState(uint64_t a1, int a2, int a3)
{
  xpc_object_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      xpc_object_t v8 = v7;
      xpc_object_t v9 = *(void **)(a1 + 8);
      if (v9) {
        SARModule::transmitStateHandler(v9, a2, a3);
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void antenna::AntennaCommandDriverDelegate<SARModule>::~AntennaCommandDriverDelegate(antenna::AntennaCommandDriverDelegateInterface *this)
{
  *(void *)this = &unk_1F2106CC0;
  xpc_object_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  antenna::AntennaCommandDriverDelegateInterface::~AntennaCommandDriverDelegateInterface(this);
}

{
  std::__shared_weak_count *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F2106CC0;
  xpc_object_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  antenna::AntennaCommandDriverDelegateInterface::~AntennaCommandDriverDelegateInterface(this);

  operator delete(v3);
}

void std::shared_ptr<AppleSARHelper>::operator=[abi:ne180100](long long *a1)
{
  long long v1 = *a1;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  xpc_object_t v2 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
  off_1EA3D67B0 = v1;
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<SARModule>::execute_wrapped<SARModule::initialize(dispatch::group_session)::$_0>(SARModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SARModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<SARModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  xpc_object_t v2 = *(SARModule ***)a1;
  unint64_t v3 = **(SARModule ***)a1;
  SARModule::initializeHelpers_sync(v3);
  xpc_object_t v4 = (const void *)*MEMORY[0x1E4F4C640];
  size_t v5 = strlen((const char *)*MEMORY[0x1E4F4C640]);
  if (v5 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_80;
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    uint64_t v76 = v6;
    unint64_t v77 = v9 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v77) = v5;
  p_dst = (void **)&__dst;
  if (v5) {
LABEL_8:
  }
    memmove(p_dst, v4, v6);
  *((unsigned char *)p_dst + v6) = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke;
  aBlock[3] = &__block_descriptor_40_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  aBlock[4] = v3;
  xpc_object_t v10 = _Block_copy(aBlock);
  uint64_t v82 = v10;
  Service::registerCommandHandler((uint64_t)v3, (uint64_t)&__dst, &v82);
  if (v10) {
    _Block_release(v10);
  }
  if (SHIBYTE(v77) < 0) {
    operator delete(__dst);
  }
  xpc_object_t v11 = (const void *)*MEMORY[0x1E4F4C318];
  size_t v12 = strlen((const char *)*MEMORY[0x1E4F4C318]);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
LABEL_80:
  }
    std::string::__throw_length_error[abi:ne180100]();
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v15 = v12 | 7;
    }
    uint64_t v16 = v15 + 1;
    p_p = operator new(v15 + 1);
    uint64_t v70 = v13;
    unint64_t v71 = v16 | 0x8000000000000000;
    std::string __p = p_p;
    goto LABEL_20;
  }
  HIBYTE(v71) = v12;
  p_p = &__p;
  if (v12) {
LABEL_20:
  }
    memmove(p_p, v11, v13);
  *((unsigned char *)p_p + v13) = 0;
  std::string __dst = (void **)MEMORY[0x1E4F143A8];
  uint64_t v76 = 3221225472;
  unint64_t v77 = (unint64_t)___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2;
  uint64_t v78 = &__block_descriptor_40_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  long long v79 = v3;
  uint64_t v17 = _Block_copy(&__dst);
  int v80 = v17;
  Service::registerCommandHandler((uint64_t)v3, (uint64_t)&__p, &v80);
  if (v17) {
    _Block_release(v17);
  }
  if (SHIBYTE(v71) < 0) {
    operator delete(__p);
  }
  xpc_object_t v18 = (const void *)*MEMORY[0x1E4F4CB00];
  size_t v19 = strlen((const char *)*MEMORY[0x1E4F4CB00]);
  if (v19 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_80;
  }
  size_t v20 = v19;
  if (v19 >= 0x17)
  {
    uint64_t v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17) {
      uint64_t v22 = v19 | 7;
    }
    uint64_t v23 = v22 + 1;
    __int16 v21 = operator new(v22 + 1);
    uint64_t v64 = v20;
    unint64_t v65 = v23 | 0x8000000000000000;
    long long v63 = v21;
    goto LABEL_32;
  }
  HIBYTE(v65) = v19;
  __int16 v21 = &v63;
  if (v19) {
LABEL_32:
  }
    memmove(v21, v18, v20);
  *((unsigned char *)v21 + v20) = 0;
  std::string __p = (void *)MEMORY[0x1E4F143A8];
  uint64_t v70 = 3221225472;
  unint64_t v71 = (unint64_t)___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_3;
  char v72 = &__block_descriptor_40_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  size_t v73 = v3;
  xpc_object_t v24 = _Block_copy(&__p);
  BOOL v74 = v24;
  Service::registerCommandHandler((uint64_t)v3, (uint64_t)&v63, &v74);
  if (v24) {
    _Block_release(v24);
  }
  if (SHIBYTE(v65) < 0) {
    operator delete(v63);
  }
  xpc_object_t v25 = (const void *)*MEMORY[0x1E4F4C9D0];
  size_t v26 = strlen((const char *)*MEMORY[0x1E4F4C9D0]);
  if (v26 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_80;
  }
  size_t v27 = v26;
  if (v26 >= 0x17)
  {
    uint64_t v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17) {
      uint64_t v29 = v26 | 7;
    }
    uint64_t v30 = v29 + 1;
    xpc_object_t v28 = operator new(v29 + 1);
    uint64_t v58 = v27;
    unint64_t v59 = v30 | 0x8000000000000000;
    char v57 = v28;
    goto LABEL_44;
  }
  HIBYTE(v59) = v26;
  xpc_object_t v28 = &v57;
  if (v26) {
LABEL_44:
  }
    memmove(v28, v25, v27);
  *((unsigned char *)v28 + v27) = 0;
  long long v63 = (void *)MEMORY[0x1E4F143A8];
  uint64_t v64 = 3221225472;
  unint64_t v65 = (unint64_t)___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_4;
  long long v66 = &__block_descriptor_40_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  long long v67 = v3;
  uint64_t v31 = _Block_copy(&v63);
  long long v68 = v31;
  Service::registerCommandHandler((uint64_t)v3, (uint64_t)&v57, &v68);
  if (v31) {
    _Block_release(v31);
  }
  if (SHIBYTE(v59) < 0) {
    operator delete(v57);
  }
  unint64_t v32 = (const void *)*MEMORY[0x1E4F4CC28];
  size_t v33 = strlen((const char *)*MEMORY[0x1E4F4CC28]);
  if (v33 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_80;
  }
  size_t v34 = v33;
  if (v33 >= 0x17)
  {
    uint64_t v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17) {
      uint64_t v36 = v33 | 7;
    }
    uint64_t v37 = v36 + 1;
    uint64_t v35 = operator new(v36 + 1);
    uint64_t v50 = v34;
    unint64_t v51 = v37 | 0x8000000000000000;
    long long v49 = v35;
    goto LABEL_56;
  }
  HIBYTE(v51) = v33;
  uint64_t v35 = &v49;
  if (v33) {
LABEL_56:
  }
    memmove(v35, v32, v34);
  *((unsigned char *)v35 + v34) = 0;
  char v57 = (void *)MEMORY[0x1E4F143A8];
  uint64_t v58 = 3221225472;
  unint64_t v59 = (unint64_t)___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_5;
  dispatch_object_t v60 = &__block_descriptor_40_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  char v61 = v3;
  xpc_object_t v38 = _Block_copy(&v57);
  long long v62 = v38;
  Service::registerCommandHandler((uint64_t)v3, (uint64_t)&v49, &v62);
  if (v38) {
    _Block_release(v38);
  }
  if (SHIBYTE(v51) < 0) {
    operator delete(v49);
  }
  xpc_object_t v39 = (const void *)*MEMORY[0x1E4F4CC10];
  size_t v40 = strlen((const char *)*MEMORY[0x1E4F4CC10]);
  if (v40 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_80;
  }
  xpc_object_t v41 = (void *)v40;
  if (v40 >= 0x17)
  {
    uint64_t v43 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17) {
      uint64_t v43 = v40 | 7;
    }
    uint64_t v44 = v43 + 1;
    uint64_t v42 = operator new(v43 + 1);
    v55[1] = v41;
    unint64_t v56 = v44 | 0x8000000000000000;
    v55[0] = v42;
    goto LABEL_68;
  }
  HIBYTE(v56) = v40;
  uint64_t v42 = v55;
  if (v40) {
LABEL_68:
  }
    memmove(v42, v39, (size_t)v41);
  *((unsigned char *)v41 + (void)v42) = 0;
  long long v49 = (void *)MEMORY[0x1E4F143A8];
  uint64_t v50 = 3221225472;
  unint64_t v51 = (unint64_t)___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_6;
  xpc_object_t v52 = &__block_descriptor_40_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  long long v53 = v3;
  uint64_t v45 = _Block_copy(&v49);
  xpc_object_t v54 = v45;
  Service::registerCommandHandler((uint64_t)v3, (uint64_t)v55, &v54);
  if (v45) {
    _Block_release(v45);
  }
  if (SHIBYTE(v56) < 0) {
    operator delete(v55[0]);
  }
  SARModule::finishInitialization_sync(v3);
  long long v46 = v2[1];
  if (v46)
  {
    dispatch_group_leave(v46);
    xpc_object_t v47 = v2[1];
    if (v47) {
      dispatch_release(v47);
    }
  }
  operator delete(v2);
  char v48 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v48 && !atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
  operator delete(a1);
}

void sub_1C5A65E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (v50) {
    _Block_release(v50);
  }
  if (a24 < 0) {
    operator delete(__p);
  }
  xpc_object_t v52 = v49[1];
  if (v52)
  {
    dispatch_group_leave(v52);
    long long v53 = v49[1];
    if (v53) {
      dispatch_release(v53);
    }
  }
  operator delete(v49);
  xpc_object_t v54 = (std::__shared_weak_count *)v48[2];
  if (v54)
  {
    if (!atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  operator delete(v48);
  _Unwind_Resume(a1);
}

void ___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke(uint64_t a1, xpc_object_t *a2, const void **a3)
{
  xpc_object_t v4 = *(void **)(a1 + 32);
  xpc_object_t v5 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    size_t v6 = *a3;
    if (*a3) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v7 = 0;
    uint64_t v8 = (std::__shared_weak_count *)v4[7];
    if (!v8) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
  xpc_object_t v5 = xpc_null_create();
  size_t v6 = *a3;
  if (!*a3) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v7 = _Block_copy(v6);
  uint64_t v8 = (std::__shared_weak_count *)v4[7];
  if (!v8) {
LABEL_11:
  }
    std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_7:
  uint64_t v9 = v4[6];
  xpc_object_t v10 = std::__shared_weak_count::lock(v8);
  if (!v10) {
    goto LABEL_11;
  }
  xpc_object_t v11 = v10;
  size_t v12 = operator new(0x18uLL);
  void *v12 = v4;
  v12[1] = v5;
  xpc_object_t v13 = xpc_null_create();
  v12[2] = v7;
  xpc_object_t v14 = v4[8];
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v15 = operator new(0x18uLL);
  *uint64_t v15 = v12;
  v15[1] = v9;
  unint64_t v15[2] = v11;
  dispatch_async_f(v14, v15, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  xpc_release(v13);
}

void ___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2(uint64_t a1, xpc_object_t *a2, const void **a3)
{
  xpc_object_t v4 = *(void **)(a1 + 32);
  xpc_object_t v5 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    size_t v6 = *a3;
    if (*a3) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v7 = 0;
    uint64_t v8 = (std::__shared_weak_count *)v4[7];
    if (!v8) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
  xpc_object_t v5 = xpc_null_create();
  size_t v6 = *a3;
  if (!*a3) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v7 = _Block_copy(v6);
  uint64_t v8 = (std::__shared_weak_count *)v4[7];
  if (!v8) {
LABEL_11:
  }
    std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_7:
  uint64_t v9 = v4[6];
  xpc_object_t v10 = std::__shared_weak_count::lock(v8);
  if (!v10) {
    goto LABEL_11;
  }
  xpc_object_t v11 = v10;
  size_t v12 = operator new(0x18uLL);
  void *v12 = v4;
  v12[1] = v5;
  xpc_object_t v13 = xpc_null_create();
  v12[2] = v7;
  xpc_object_t v14 = v4[8];
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v15 = operator new(0x18uLL);
  *uint64_t v15 = v12;
  v15[1] = v9;
  unint64_t v15[2] = v11;
  dispatch_async_f(v14, v15, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb0_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  xpc_release(v13);
}

void ___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_3(uint64_t a1, xpc_object_t *a2, const void **a3)
{
  xpc_object_t v4 = *(void **)(a1 + 32);
  xpc_object_t v5 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    size_t v6 = *a3;
    if (*a3) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v7 = 0;
    uint64_t v8 = (std::__shared_weak_count *)v4[7];
    if (!v8) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
  xpc_object_t v5 = xpc_null_create();
  size_t v6 = *a3;
  if (!*a3) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v7 = _Block_copy(v6);
  uint64_t v8 = (std::__shared_weak_count *)v4[7];
  if (!v8) {
LABEL_11:
  }
    std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_7:
  uint64_t v9 = v4[6];
  xpc_object_t v10 = std::__shared_weak_count::lock(v8);
  if (!v10) {
    goto LABEL_11;
  }
  xpc_object_t v11 = v10;
  size_t v12 = operator new(0x18uLL);
  void *v12 = v4;
  v12[1] = v5;
  xpc_object_t v13 = xpc_null_create();
  v12[2] = v7;
  xpc_object_t v14 = v4[8];
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v15 = operator new(0x18uLL);
  *uint64_t v15 = v12;
  v15[1] = v9;
  unint64_t v15[2] = v11;
  dispatch_async_f(v14, v15, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb1_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  xpc_release(v13);
}

void ___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_4(uint64_t a1, uint64_t a2, const void **a3)
{
  unint64_t v3 = *(void **)(a1 + 32);
  if (*a3)
  {
    xpc_object_t v4 = _Block_copy(*a3);
    xpc_object_t v5 = (std::__shared_weak_count *)v3[7];
    if (!v5) {
LABEL_10:
    }
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    xpc_object_t v4 = 0;
    xpc_object_t v5 = (std::__shared_weak_count *)v3[7];
    if (!v5) {
      goto LABEL_10;
    }
  }
  uint64_t v6 = v3[6];
  uint64_t v7 = std::__shared_weak_count::lock(v5);
  if (!v7) {
    goto LABEL_10;
  }
  uint64_t v8 = v7;
  uint64_t v9 = operator new(0x10uLL);
  *uint64_t v9 = v3;
  v9[1] = v4;
  xpc_object_t v10 = v3[8];
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v11 = operator new(0x18uLL);
  void *v11 = v9;
  v11[1] = v6;
  v11[2] = v8;
  dispatch_async_f(v10, v11, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb2_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void ___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_5(uint64_t a1, uint64_t a2, const void **a3)
{
  unint64_t v3 = *(void **)(a1 + 32);
  if (*a3)
  {
    xpc_object_t v4 = _Block_copy(*a3);
    xpc_object_t v5 = (std::__shared_weak_count *)v3[7];
    if (!v5) {
LABEL_10:
    }
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    xpc_object_t v4 = 0;
    xpc_object_t v5 = (std::__shared_weak_count *)v3[7];
    if (!v5) {
      goto LABEL_10;
    }
  }
  uint64_t v6 = v3[6];
  uint64_t v7 = std::__shared_weak_count::lock(v5);
  if (!v7) {
    goto LABEL_10;
  }
  uint64_t v8 = v7;
  uint64_t v9 = operator new(0x10uLL);
  *uint64_t v9 = v3;
  v9[1] = v4;
  xpc_object_t v10 = v3[8];
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v11 = operator new(0x18uLL);
  void *v11 = v9;
  v11[1] = v6;
  v11[2] = v8;
  dispatch_async_f(v10, v11, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb3_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void ___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_6(uint64_t a1, xpc_object_t *a2, const void **a3)
{
  xpc_object_t v4 = *(void **)(a1 + 32);
  xpc_object_t v5 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    uint64_t v6 = *a3;
    if (*a3) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v7 = 0;
    uint64_t v8 = (std::__shared_weak_count *)v4[7];
    if (!v8) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
  xpc_object_t v5 = xpc_null_create();
  uint64_t v6 = *a3;
  if (!*a3) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v7 = _Block_copy(v6);
  uint64_t v8 = (std::__shared_weak_count *)v4[7];
  if (!v8) {
LABEL_11:
  }
    std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_7:
  uint64_t v9 = v4[6];
  xpc_object_t v10 = std::__shared_weak_count::lock(v8);
  if (!v10) {
    goto LABEL_11;
  }
  xpc_object_t v11 = v10;
  size_t v12 = operator new(0x18uLL);
  void *v12 = v4;
  v12[1] = v5;
  xpc_object_t v13 = xpc_null_create();
  v12[2] = v7;
  xpc_object_t v14 = v4[8];
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v15 = operator new(0x18uLL);
  *uint64_t v15 = v12;
  v15[1] = v9;
  unint64_t v15[2] = v11;
  dispatch_async_f(v14, v15, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb4_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  xpc_release(v13);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  xpc_object_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = 3760250884;
  if (MEMORY[0x1C8795EB0]((*a1)[1]) == MEMORY[0x1E4F14590])
  {
    uint64_t v5 = *(void *)(v3 + 176);
    if (v5)
    {
      uint64_t v6 = (void *)v2[1];
      xpc_object_t object = v6;
      if (v6) {
        xpc_retain(v6);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      AudioManager::setAudioState(v5, (xpc::object *)&object);
      xpc_release(object);
      uint64_t v4 = 0;
      xpc_object_t object = 0;
    }
    else
    {
      uint64_t v7 = *(NSObject **)(v3 + 80);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_DEFAULT, "#I Audio Manager is not created yet", buf, 2u);
      }
    }
  }
  else
  {
    uint64_t v4 = 3760250880;
  }
  uint64_t v8 = v2[2];
  *(void *)long long buf = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(v8 + 16))(v8, v4, buf);
  xpc_release(*(xpc_object_t *)buf);
  uint64_t v9 = (const void *)v2[2];
  if (v9) {
    _Block_release(v9);
  }
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  xpc_object_t v10 = (std::__shared_weak_count *)a1[2];
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  operator delete(a1);
}

void sub_1C5A6687C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, xpc_object_t a11)
{
  xpc_release(object);
  xpc_object_t v14 = *(const void **)(v12 + 16);
  if (v14) {
    _Block_release(v14);
  }
  xpc_release(*(xpc_object_t *)(v12 + 8));
  operator delete((void *)v12);
  uint64_t v15 = (std::__shared_weak_count *)v11[2];
  if (v15)
  {
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  operator delete(v11);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb0_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  xpc_object_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = MEMORY[0x1C8795EB0]((*a1)[1]);
  uint64_t v5 = *(NSObject **)(v3 + 80);
  if (v4 != MEMORY[0x1E4F14590])
  {
    uint64_t v6 = 3760250880;
    if (os_log_type_enabled(*(os_log_t *)(v3 + 80), OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_ERROR, "Motion parameter dictionary is empty!", buf, 2u);
    }
    goto LABEL_50;
  }
  if (os_log_type_enabled(*(os_log_t *)(v3 + 80), OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = (char *)MEMORY[0x1C8795DE0](v2[1]);
    memset(buf, 170, 24);
    size_t v8 = strlen(v7);
    if (v8 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v9 = v8;
    if (v8 >= 0x17)
    {
      uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17) {
        uint64_t v11 = v8 | 7;
      }
      uint64_t v12 = v11 + 1;
      xpc_object_t v10 = operator new(v11 + 1);
      *(void *)&uint8_t buf[8] = v9;
      *(void *)&uint8_t buf[16] = v12 | 0x8000000000000000;
      *(void *)long long buf = v10;
    }
    else
    {
      buf[23] = v8;
      xpc_object_t v10 = buf;
      if (!v8) {
        goto LABEL_13;
      }
    }
    memcpy(v10, v7, v9);
LABEL_13:
    *((unsigned char *)v10 + v9) = 0;
    free(v7);
    xpc_object_t v13 = buf;
    if ((buf[23] & 0x80u) != 0) {
      xpc_object_t v13 = *(uint8_t **)buf;
    }
    *(_DWORD *)uint64_t v29 = 136315138;
    *(void *)&v29[4] = v13;
    _os_log_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_DEFAULT, "#I Motion parameter is given: %s", v29, 0xCu);
    if ((char)buf[23] < 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v5 = *(NSObject **)(v3 + 80);
  }
  if (!*(void *)(v3 + 104))
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_debug_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_DEBUG, "#D CoreMotion On Body Handler is empty", buf, 2u);
    }
    goto LABEL_31;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_DEFAULT, "#I Set CoreMotion On Body Handler's motion parameter!", buf, 2u);
  }
  ctu::xpc_to_cf((uint64_t *)buf, (ctu *)v2[1], v14);
  uint64_t v15 = *(const void **)buf;
  if (*(void *)buf)
  {
    CFTypeID v16 = CFGetTypeID(*(CFTypeRef *)buf);
    if (v16 == CFDictionaryGetTypeID())
    {
      CFRetain(v15);
      uint64_t v17 = *(const void **)buf;
      if (!*(void *)buf) {
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v17 = *(const void **)buf;
      if (!*(void *)buf) {
        goto LABEL_29;
      }
    }
    CFRelease(v17);
  }
LABEL_29:
  CMOnBodyDelegate::setThresholds(*(CMOnBodyDelegate **)(v3 + 104), v15);
  if (v15) {
    CFRelease(v15);
  }
LABEL_31:
  uint64_t v18 = *(void *)(v3 + 192);
  size_t v19 = *(NSObject **)(v3 + 80);
  if (v18)
  {
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C59C6000, v19, OS_LOG_TYPE_DEFAULT, "#I Setting OBD manager's motion parameter!", buf, 2u);
      uint64_t v18 = *(void *)(v3 + 192);
    }
    xpc_object_t v20 = (xpc_object_t)v2[1];
    *(void *)uint64_t v29 = v20;
    if (v20)
    {
      xpc_retain(v20);
    }
    else
    {
      xpc_object_t v20 = xpc_null_create();
      *(void *)uint64_t v29 = v20;
    }
    OBDManager::setMotionParameter(v18, (ctu **)v29);
    xpc_release(v20);
    *(void *)uint64_t v29 = 0;
  }
  else if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_debug_impl(&dword_1C59C6000, v19, OS_LOG_TYPE_DEBUG, "#D OBD manager is empty", buf, 2u);
  }
  uint64_t v21 = *(void *)(v3 + 248);
  uint64_t v22 = *(NSObject **)(v3 + 80);
  if (v21)
  {
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C59C6000, v22, OS_LOG_TYPE_DEFAULT, "#I Setting hand detection manager's motion parameter!", buf, 2u);
      uint64_t v21 = *(void *)(v3 + 248);
    }
    uint64_t v23 = (ctu *)v2[1];
    size_t v27 = v23;
    if (v23)
    {
      xpc_retain(v23);
    }
    else
    {
      uint64_t v23 = (ctu *)xpc_null_create();
      size_t v27 = v23;
    }
    HandDetectionManager::setMotionParameter(v21, &v27);
    xpc_release(v23);
    uint64_t v6 = 0;
    size_t v27 = 0;
  }
  else
  {
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_debug_impl(&dword_1C59C6000, v22, OS_LOG_TYPE_DEBUG, "#D hand detection manager is empty", buf, 2u);
    }
    uint64_t v6 = 0;
  }
LABEL_50:
  uint64_t v24 = v2[2];
  *(void *)long long buf = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(v24 + 16))(v24, v6, buf);
  xpc_release(*(xpc_object_t *)buf);
  xpc_object_t v25 = (const void *)v2[2];
  if (v25) {
    _Block_release(v25);
  }
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  size_t v26 = (std::__shared_weak_count *)a1[2];
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  operator delete(a1);
}

void sub_1C5A66E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb1_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  v45[1] = *MEMORY[0x1E4F143B8];
  xpc_object_t v2 = *a1;
  uint64_t v3 = **a1;
  xpc_object_t value = xpc_dictionary_get_value((xpc_object_t)(*a1)[1], (const char *)*MEMORY[0x1E4F4C358]);
  xpc_object_t v5 = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t v5 = xpc_null_create();
  }
  if (MEMORY[0x1C8795EB0](v5) == MEMORY[0x1E4F145D8])
  {
    uint64_t v6 = *(NSObject **)(v3 + 80);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      if (!v2[2]) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    LOWORD(object[0]) = 0;
    _os_log_error_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_ERROR, "Failed to get accessory information!", (uint8_t *)object, 2u);
    if (v2[2])
    {
LABEL_7:
      xpc_object_t v7 = xpc_null_create();
      uint64_t v8 = v2[2];
      object[0] = v7;
      xpc_object_t v9 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v8 + 16))(v8, 3760250880, object);
      xpc_release(object[0]);
      xpc_release(v9);
    }
  }
LABEL_8:
  bytes_ptr = (char *)xpc_data_get_bytes_ptr(v5);
  size_t length = xpc_data_get_length(v5);
  if (length >= 0xC)
  {
    size_t v23 = 12 * (length / 0xC);
    uint64_t v24 = (char *)operator new(v23);
    uint64_t v12 = v24;
    uint64_t v25 = 0;
    do
    {
      size_t v26 = &v24[v25];
      uint64_t v27 = *(void *)&bytes_ptr[v25];
      *((_DWORD *)v26 + 2) = *(_DWORD *)&bytes_ptr[v25 + 8];
      *(void *)size_t v26 = v27;
      v25 += 12;
    }
    while (v23 != v25);
    int v13 = 0;
    xpc_object_t v28 = v24;
    while (1)
    {
      int v30 = *(unsigned __int16 *)v28;
      int v31 = *((unsigned __int16 *)v28 + 1);
      if (v30 == 17 && v31 == 2) {
        v13 |= 0x40000u;
      }
      if (v30 == 18 && v31 == 2) {
        v13 |= 0x80000u;
      }
      if (v30 == 19 && v31 == 2) {
        v13 |= 0x100000u;
      }
      if (v30 == 20 && v31 == 2) {
        v13 |= 0x200000u;
      }
      int v32 = *((unsigned __int16 *)v28 + 3);
      if (v32 == 3 && v30 == 2055)
      {
        if (v31 == 2)
        {
          v13 |= 0x400000u;
LABEL_49:
          unsigned int v29 = *(_DWORD *)(v3 + 272) | 1;
          goto LABEL_30;
        }
        v13 &= ~0x400000u;
      }
      else
      {
        if (v30 == 4) {
          *(_DWORD *)(v3 + 272) = *(_DWORD *)(v3 + 272) & 0xFFFFFBFF | ((v31 == 2) << 10);
        }
        if (!v32 || v32 == 0xFFFF) {
          goto LABEL_31;
        }
        if (v31 == 2) {
          goto LABEL_49;
        }
      }
      unsigned int v29 = *(_DWORD *)(v3 + 272) & 0xFFFFFFFE;
LABEL_30:
      *(_DWORD *)(v3 + 272) = v29;
LABEL_31:
      v28 += 12;
      if (v28 == &v24[v23]) {
        goto LABEL_10;
      }
    }
  }
  uint64_t v12 = 0;
  int v13 = 0;
LABEL_10:
  *(_DWORD *)(v3 + 268) = v13;
  int v14 = *(_DWORD *)(v3 + 272) | v13;
  *(_DWORD *)(v3 + 161) = v14;
  uint64_t v15 = *(NSObject **)(v3 + 80);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(object[0]) = 67109120;
    HIDWORD(object[0]) = v14;
    _os_log_impl(&dword_1C59C6000, v15, OS_LOG_TYPE_DEFAULT, "#I Sending Accessory State with USB-C: 0x%x", (uint8_t *)object, 8u);
  }
  CFTypeID v16 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  uint64_t v17 = (AppleSARHelper *)off_1EA3D67B0;
  if (!off_1EA3D67B0)
  {
    AppleSARHelper::create_default_global((uint64_t *)object, v16);
    long long v18 = *(_OWORD *)object;
    object[0] = 0;
    object[1] = 0;
    size_t v19 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
    off_1EA3D67B0 = v18;
    if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    xpc_object_t v20 = (std::__shared_weak_count *)object[1];
    if (object[1] && !atomic_fetch_add((atomic_ullong *volatile)object[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    uint64_t v17 = (AppleSARHelper *)off_1EA3D67B0;
  }
  uint64_t v21 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
  if (*(&off_1EA3D67B0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EA3D67B0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  int v42 = *(_DWORD *)(v3 + 161);
  if (*((_DWORD *)v17 + 1))
  {
    object[0] = 0;
    v45[0] = 0;
    unsigned int v43 = 1;
    char v22 = AppleSARHelper::callUserClientMethod(v17, 2, (const unint64_t *)object, 1, &v42, 4, v45, &v43, &v42, 4uLL);
    if (!v21)
    {
LABEL_52:
      if (v22) {
        goto LABEL_53;
      }
LABEL_56:
      uint64_t v36 = *(NSObject **)(v3 + 80);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        LOWORD(object[0]) = 0;
        _os_log_error_impl(&dword_1C59C6000, v36, OS_LOG_TYPE_ERROR, "Failed to set SAR Fusion State!", (uint8_t *)object, 2u);
        if (!v2[2]) {
          goto LABEL_59;
        }
      }
      else if (!v2[2])
      {
        goto LABEL_59;
      }
      xpc_object_t v37 = xpc_null_create();
      uint64_t v38 = v2[2];
      object[0] = v37;
      xpc_object_t v39 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v38 + 16))(v38, 3760250880, object);
      xpc_release(object[0]);
      xpc_release(v39);
      goto LABEL_59;
    }
  }
  else
  {
    char v22 = 0;
    if (!v21) {
      goto LABEL_52;
    }
  }
  if (atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_52;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  if ((v22 & 1) == 0) {
    goto LABEL_56;
  }
LABEL_53:
  if (v2[2])
  {
    xpc_object_t v33 = xpc_null_create();
    uint64_t v34 = v2[2];
    object[0] = v33;
    xpc_object_t v35 = xpc_null_create();
    (*(void (**)(uint64_t, void, xpc_object_t *))(v34 + 16))(v34, 0, object);
    xpc_release(object[0]);
    xpc_release(v35);
  }
LABEL_59:
  if (v12) {
    operator delete(v12);
  }
  xpc_release(v5);
  size_t v40 = (const void *)v2[2];
  if (v40) {
    _Block_release(v40);
  }
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  xpc_object_t v41 = (std::__shared_weak_count *)a1[2];
  if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
  operator delete(a1);
}

void sub_1C5A67528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb2_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  xpc_object_t v2 = *a1;
  uint64_t v3 = **a1;
  *(unsigned char *)(v3 + 296) = 1;
  uint64_t v4 = *(NSObject **)(v3 + 80);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Blocking accessories", buf, 2u);
  }
  xpc_object_t v5 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  uint64_t v6 = (AppleSARHelper *)off_1EA3D67B0;
  if (!off_1EA3D67B0)
  {
    AppleSARHelper::create_default_global((uint64_t *)buf, v5);
    long long v7 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    uint64_t v8 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
    off_1EA3D67B0 = v7;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    xpc_object_t v9 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    uint64_t v6 = (AppleSARHelper *)off_1EA3D67B0;
  }
  xpc_object_t v10 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
  if (*(&off_1EA3D67B0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EA3D67B0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  char v17 = *(unsigned char *)(v3 + 296);
  if (*((_DWORD *)v6 + 1))
  {
    *(void *)long long buf = 0;
    v20[0] = 0;
    unsigned int v18 = 1;
    char v11 = AppleSARHelper::callUserClientMethod(v6, 29, (const unint64_t *)buf, 1, &v17, 1, v20, &v18, &v17, 1uLL);
    if (!v10)
    {
LABEL_18:
      if (v11) {
        goto LABEL_19;
      }
LABEL_22:
      int v13 = *(NSObject **)(v3 + 80);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_ERROR, "Failed to set blocking accessories", buf, 2u);
        uint64_t v14 = v2[1];
        if (!v14) {
          goto LABEL_25;
        }
      }
      else
      {
        uint64_t v14 = v2[1];
        if (!v14) {
          goto LABEL_25;
        }
      }
      *(void *)long long buf = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, uint8_t *))(v14 + 16))(v14, 3760250880, buf);
      xpc_release(*(xpc_object_t *)buf);
      goto LABEL_25;
    }
  }
  else
  {
    char v11 = 0;
    if (!v10) {
      goto LABEL_18;
    }
  }
  if (atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if ((v11 & 1) == 0) {
    goto LABEL_22;
  }
LABEL_19:
  uint64_t v12 = v2[1];
  if (v12)
  {
    *(void *)long long buf = xpc_null_create();
    (*(void (**)(uint64_t, void, uint8_t *))(v12 + 16))(v12, 0, buf);
    xpc_release(*(xpc_object_t *)buf);
  }
LABEL_25:
  uint64_t v15 = (const void *)v2[1];
  if (v15) {
    _Block_release(v15);
  }
  operator delete(v2);
  CFTypeID v16 = (std::__shared_weak_count *)a1[2];
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  operator delete(a1);
}

void sub_1C5A67A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb3_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  xpc_object_t v2 = *a1;
  uint64_t v3 = **a1;
  *(unsigned char *)(v3 + 296) = 0;
  uint64_t v4 = *(NSObject **)(v3 + 80);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Unblocking accessories", buf, 2u);
  }
  xpc_object_t v5 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  uint64_t v6 = (AppleSARHelper *)off_1EA3D67B0;
  if (!off_1EA3D67B0)
  {
    AppleSARHelper::create_default_global((uint64_t *)buf, v5);
    long long v7 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    uint64_t v8 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
    off_1EA3D67B0 = v7;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    xpc_object_t v9 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    uint64_t v6 = (AppleSARHelper *)off_1EA3D67B0;
  }
  xpc_object_t v10 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
  if (*(&off_1EA3D67B0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EA3D67B0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  char v17 = *(unsigned char *)(v3 + 296);
  if (*((_DWORD *)v6 + 1))
  {
    *(void *)long long buf = 0;
    v20[0] = 0;
    unsigned int v18 = 1;
    char v11 = AppleSARHelper::callUserClientMethod(v6, 29, (const unint64_t *)buf, 1, &v17, 1, v20, &v18, &v17, 1uLL);
    if (!v10)
    {
LABEL_18:
      if (v11) {
        goto LABEL_19;
      }
LABEL_22:
      int v13 = *(NSObject **)(v3 + 80);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_ERROR, "Failed to set unblocking accessories", buf, 2u);
        uint64_t v14 = v2[1];
        if (!v14) {
          goto LABEL_25;
        }
      }
      else
      {
        uint64_t v14 = v2[1];
        if (!v14) {
          goto LABEL_25;
        }
      }
      *(void *)long long buf = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, uint8_t *))(v14 + 16))(v14, 3760250880, buf);
      xpc_release(*(xpc_object_t *)buf);
      goto LABEL_25;
    }
  }
  else
  {
    char v11 = 0;
    if (!v10) {
      goto LABEL_18;
    }
  }
  if (atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if ((v11 & 1) == 0) {
    goto LABEL_22;
  }
LABEL_19:
  uint64_t v12 = v2[1];
  if (v12)
  {
    *(void *)long long buf = xpc_null_create();
    (*(void (**)(uint64_t, void, uint8_t *))(v12 + 16))(v12, 0, buf);
    xpc_release(*(xpc_object_t *)buf);
  }
LABEL_25:
  uint64_t v15 = (const void *)v2[1];
  if (v15) {
    _Block_release(v15);
  }
  operator delete(v2);
  CFTypeID v16 = (std::__shared_weak_count *)a1[2];
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  operator delete(a1);
}

void sub_1C5A67ED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb4_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(const void ***a1)
{
  object[3] = *(xpc_object_t *)MEMORY[0x1E4F143B8];
  xpc_object_t v2 = *a1;
  uint64_t v3 = **a1;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    xpc_object_t xdict = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t xdict = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8795EB0](v5) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  xpc_object_t xdict = v6;
LABEL_9:
  xpc_release(v5);
  memset(__p, 170, sizeof(__p));
  xpc_object_t value = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E4F4C878]);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)__p, (xpc *)object, (const object *)"", v8);
  xpc_release(object[0]);
  xpc_object_t v9 = (const void *)*MEMORY[0x1E4F4CD50];
  xpc_object_t v10 = (void *)strlen((const char *)*MEMORY[0x1E4F4CD50]);
  char v11 = v10;
  char v12 = HIBYTE(__p[2]);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if (v10 != (void *)-1)
    {
      int v13 = (void *)HIBYTE(__p[2]);
      if (HIBYTE(__p[2]) >= (unint64_t)v10) {
        size_t v14 = (size_t)v10;
      }
      else {
        size_t v14 = HIBYTE(__p[2]);
      }
      if (memcmp(__p, v9, v14)) {
        goto LABEL_31;
      }
      goto LABEL_24;
    }
LABEL_58:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v10 == (void *)-1) {
    goto LABEL_58;
  }
  int v13 = __p[1];
  if (__p[1] >= v10) {
    uint64_t v15 = v10;
  }
  else {
    uint64_t v15 = __p[1];
  }
  if (memcmp(__p[0], v9, (size_t)v15))
  {
LABEL_31:
    uint64_t v21 = *((void *)v3 + 10);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      char v22 = __p;
      if (v12 < 0) {
        char v22 = (void **)__p[0];
      }
      LODWORD(object[0]) = 136315138;
      *(xpc_object_t *)((char *)object + 4) = v22;
      _os_log_impl(&dword_1C59C6000, v21, OS_LOG_TYPE_DEFAULT, "#I Get property for \"%s\" command is not supported", (uint8_t *)object, 0xCu);
    }
    goto LABEL_50;
  }
LABEL_24:
  if (v13 != v11) {
    goto LABEL_31;
  }
  memset(object, 170, 24);
  CFTypeID v16 = (const char **)MEMORY[0x1E4F4D0C0];
  if (!*((unsigned char *)v3 + 264)) {
    CFTypeID v16 = (const char **)MEMORY[0x1E4F4CDB0];
  }
  char v17 = *v16;
  size_t v18 = strlen(*v16);
  if (v18 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v19 = (void *)v18;
  if (v18 >= 0x17)
  {
    uint64_t v23 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17) {
      uint64_t v23 = v18 | 7;
    }
    uint64_t v24 = v23 + 1;
    xpc_object_t v20 = operator new(v23 + 1);
    object[1] = v19;
    xpc_object_t object[2] = (xpc_object_t)(v24 | 0x8000000000000000);
    object[0] = v20;
  }
  else
  {
    HIBYTE(object[2]) = v18;
    xpc_object_t v20 = object;
    if (!v18) {
      goto LABEL_39;
    }
  }
  memmove(v20, v17, (size_t)v19);
LABEL_39:
  *((unsigned char *)v19 + (void)v20) = 0;
  if (SHIBYTE(object[2]) >= 0) {
    uint64_t v25 = object;
  }
  else {
    uint64_t v25 = (xpc_object_t *)object[0];
  }
  xpc_object_t v26 = xpc_string_create((const char *)v25);
  if (!v26) {
    xpc_object_t v26 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, (const char *)v9, v26);
  xpc_object_t v27 = xpc_null_create();
  xpc_release(v26);
  xpc_release(v27);
  xpc_object_t v28 = *((void *)v3 + 10);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v29 = object;
    if (SHIBYTE(object[2]) < 0) {
      unsigned int v29 = (xpc_object_t *)object[0];
    }
    *(_DWORD *)long long buf = 136315138;
    xpc_object_t v35 = v29;
    _os_log_impl(&dword_1C59C6000, v28, OS_LOG_TYPE_DEFAULT, "#I cellular transmit state: %s", buf, 0xCu);
  }
  if (SHIBYTE(object[2]) < 0) {
    operator delete(object[0]);
  }
LABEL_50:
  int v30 = v2 + 2;
  LODWORD(object[0]) = 0;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)v2 + 2, (unsigned int *)object, &xdict);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  xpc_release(xdict);
  if (*v30) {
    _Block_release(*v30);
  }
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  int v31 = (std::__shared_weak_count *)a1[2];
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  operator delete(a1);
}

void sub_1C5A6841C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, xpc_object_t object, uint64_t a16, uint64_t a17, xpc_object_t a18)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_25finishInitialization_syncEvEUb_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_(SARModule ***a1)
{
  xpc_object_t v2 = *a1;
  uint64_t v3 = **a1;
  if (capabilities::radio::maverick((capabilities::radio *)a1)) {
    SARModule::setupTxIndicationWorkaround(v3);
  }
  SARModule::sendCurrentState_sync(v3);
  xpc_object_t v4 = (std::__shared_weak_count *)v2[2];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  operator delete(v2);
  xpc_object_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    xpc_object_t v6 = a1;
  }
  else
  {
    xpc_object_t v6 = a1;
  }
  operator delete(v6);
}

void sub_1C5A68644(_Unwind_Exception *a1)
{
  xpc_object_t v4 = (std::__shared_weak_count *)v2[2];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  operator delete(v2);
  xpc_object_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_25finishInitialization_syncEvEUb_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_(uint64_t a1)
{
  xpc_object_t v2 = *(SARModule ***)a1;
  SARModule::processTxOff_sync(**(SARModule ***)a1);
  uint64_t v3 = (std::__shared_weak_count *)v2[2];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  operator delete(v2);
  xpc_object_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    xpc_object_t v5 = (void *)a1;
  }
  else
  {
    xpc_object_t v5 = (void *)a1;
  }
  operator delete(v5);
}

void sub_1C5A687F4(_Unwind_Exception *a1)
{
  xpc_object_t v4 = (std::__shared_weak_count *)v2[2];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  operator delete(v2);
  xpc_object_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ctu::PthreadMutexGuardPolicy<ctu::Gestalt>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  xpc_object_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_19initializeWiFi_syncEvEUb0_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_(uint64_t **a1)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  xpc_object_t v2 = *a1;
  uint64_t v3 = **a1;
  *(unsigned char *)(v3 + 136) = *((unsigned char *)*a1 + 8);
  xpc_object_t v4 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  xpc_object_t v5 = (AppleSARHelper *)off_1EA3D67B0;
  if (!off_1EA3D67B0)
  {
    AppleSARHelper::create_default_global((uint64_t *)buf, v4);
    long long v6 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    long long v7 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
    off_1EA3D67B0 = v6;
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    uint64_t v8 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    xpc_object_t v5 = (AppleSARHelper *)off_1EA3D67B0;
  }
  xpc_object_t v9 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
  if (*(&off_1EA3D67B0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EA3D67B0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  char v13 = *(unsigned char *)(v3 + 136);
  if (*((_DWORD *)v5 + 1))
  {
    *(void *)long long buf = 0;
    v16[0] = 0;
    unsigned int v14 = 1;
    char v10 = AppleSARHelper::callUserClientMethod(v5, 0, (const unint64_t *)buf, 1, &v13, 1, v16, &v14, &v13, 1uLL);
    if (!v9)
    {
LABEL_16:
      if (v10) {
        goto LABEL_19;
      }
      goto LABEL_17;
    }
  }
  else
  {
    char v10 = 0;
    if (!v9) {
      goto LABEL_16;
    }
  }
  if (atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_16;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (v10) {
    goto LABEL_19;
  }
LABEL_17:
  char v11 = *(NSObject **)(v3 + 80);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C59C6000, v11, OS_LOG_TYPE_ERROR, "Failed to set WiFi state!", buf, 2u);
  }
LABEL_19:
  operator delete(v2);
  char v12 = (std::__shared_weak_count *)a1[2];
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  operator delete(a1);
}

void sub_1C5A68C14(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  operator delete(v2);
  xpc_object_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_24initializeBluetooth_syncEvEUb1_E3__5EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_(uint64_t **a1)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  xpc_object_t v2 = *a1;
  uint64_t v3 = **a1;
  *(unsigned char *)(v3 + 160) = *((unsigned char *)*a1 + 8);
  xpc_object_t v4 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  xpc_object_t v5 = (AppleSARHelper *)off_1EA3D67B0;
  if (!off_1EA3D67B0)
  {
    AppleSARHelper::create_default_global((uint64_t *)buf, v4);
    long long v6 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    long long v7 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
    off_1EA3D67B0 = v6;
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    uint64_t v8 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    xpc_object_t v5 = (AppleSARHelper *)off_1EA3D67B0;
  }
  xpc_object_t v9 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
  if (*(&off_1EA3D67B0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EA3D67B0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  char v13 = *(unsigned char *)(v3 + 160);
  if (*((_DWORD *)v5 + 1))
  {
    *(void *)long long buf = 0;
    v16[0] = 0;
    unsigned int v14 = 1;
    char v10 = AppleSARHelper::callUserClientMethod(v5, 1, (const unint64_t *)buf, 1, &v13, 1, v16, &v14, &v13, 1uLL);
    if (!v9)
    {
LABEL_16:
      if (v10) {
        goto LABEL_19;
      }
      goto LABEL_17;
    }
  }
  else
  {
    char v10 = 0;
    if (!v9) {
      goto LABEL_16;
    }
  }
  if (atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_16;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (v10) {
    goto LABEL_19;
  }
LABEL_17:
  char v11 = *(NSObject **)(v3 + 80);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C59C6000, v11, OS_LOG_TYPE_ERROR, "Failed to set Bluetooth state!", buf, 2u);
  }
LABEL_19:
  operator delete(v2);
  char v12 = (std::__shared_weak_count *)a1[2];
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  operator delete(a1);
}

void sub_1C5A68F8C(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  operator delete(v2);
  xpc_object_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_20initializeAudio_syncEvEUb2_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_(uint64_t **a1)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  xpc_object_t v2 = *a1;
  uint64_t v3 = **a1;
  unsigned int v4 = *(_DWORD *)(v3 + 161) & 0xFFFFFFF7 | (8 * *((unsigned __int8 *)*a1 + 8));
  *(_DWORD *)(v3 + 161) = v4;
  xpc_object_t v5 = *(NSObject **)(v3 + 80);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v4;
    _os_log_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_DEFAULT, "#I Sending Accessory State due to Audio Wired Port: 0x%x", buf, 8u);
  }
  long long v6 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  long long v7 = (AppleSARHelper *)off_1EA3D67B0;
  if (!off_1EA3D67B0)
  {
    AppleSARHelper::create_default_global((uint64_t *)buf, v6);
    long long v8 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    xpc_object_t v9 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
    off_1EA3D67B0 = v8;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    char v10 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    long long v7 = (AppleSARHelper *)off_1EA3D67B0;
  }
  char v11 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
  if (*(&off_1EA3D67B0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EA3D67B0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  int v15 = *(_DWORD *)(v3 + 161);
  if (*((_DWORD *)v7 + 1))
  {
    *(void *)long long buf = 0;
    v18[0] = 0;
    unsigned int v16 = 1;
    char v12 = AppleSARHelper::callUserClientMethod(v7, 2, (const unint64_t *)buf, 1, &v15, 4, v18, &v16, &v15, 4uLL);
    if (!v11)
    {
LABEL_18:
      if (v12) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    char v12 = 0;
    if (!v11) {
      goto LABEL_18;
    }
  }
  if (atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (v12) {
    goto LABEL_21;
  }
LABEL_19:
  char v13 = *(NSObject **)(v3 + 80);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_ERROR, "Failed to set SAR Fusion State!", buf, 2u);
  }
LABEL_21:
  operator delete(v2);
  unsigned int v14 = (std::__shared_weak_count *)a1[2];
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  operator delete(a1);
}

void sub_1C5A6935C(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  operator delete(v2);
  unsigned int v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_20initializeAudio_syncEvEUb3_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_(uint64_t **a1)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  xpc_object_t v2 = *a1;
  uint64_t v3 = **a1;
  int v4 = *((unsigned __int8 *)*a1 + 8);
  *(unsigned char *)(v3 + 167) = v4;
  xpc_object_t v5 = *(NSObject **)(v3 + 80);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v4;
    _os_log_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_DEFAULT, "#I Sending Speaker State: 0x%x\n", buf, 8u);
  }
  long long v6 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  long long v7 = (AppleSARHelper *)off_1EA3D67B0;
  if (!off_1EA3D67B0)
  {
    AppleSARHelper::create_default_global((uint64_t *)buf, v6);
    long long v8 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    xpc_object_t v9 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
    off_1EA3D67B0 = v8;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    char v10 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    long long v7 = (AppleSARHelper *)off_1EA3D67B0;
  }
  char v11 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
  if (*(&off_1EA3D67B0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EA3D67B0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  char v15 = *(unsigned char *)(v3 + 167);
  if (*((_DWORD *)v7 + 1))
  {
    *(void *)long long buf = 0;
    v18[0] = 0;
    unsigned int v16 = 1;
    char v12 = AppleSARHelper::callUserClientMethod(v7, 6, (const unint64_t *)buf, 1, &v15, 1, v18, &v16, &v15, 1uLL);
    if (!v11)
    {
LABEL_18:
      if (v12) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    char v12 = 0;
    if (!v11) {
      goto LABEL_18;
    }
  }
  if (atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (v12) {
    goto LABEL_21;
  }
LABEL_19:
  char v13 = *(NSObject **)(v3 + 80);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_ERROR, "Failed to set SAR Fusion State!", buf, 2u);
  }
LABEL_21:
  operator delete(v2);
  unsigned int v14 = (std::__shared_weak_count *)a1[2];
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  operator delete(a1);
}

void sub_1C5A6971C(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  operator delete(v2);
  int v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_18initializeOBD_syncEvEUb4_E3__8EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_(uint64_t a1)
{
  xpc_object_t v2 = *(uint64_t **)a1;
  uint64_t v3 = **(void **)a1;
  SARModule::submitCASARFusion(v3, 1);
  *(unsigned char *)(v3 + 166) = *(unsigned char *)(v3 + 165);
  operator delete(v2);
  int v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    xpc_object_t v5 = (void *)a1;
  }
  else
  {
    xpc_object_t v5 = (void *)a1;
  }
  operator delete(v5);
}

void sub_1C5A698C8(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  operator delete(v3);
  xpc_object_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_28initializeHandDetection_syncEvEUb5_E3__9EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_(uint64_t a1)
{
  xpc_object_t v2 = *(uint64_t **)a1;
  uint64_t v3 = **(void **)a1;
  SARModule::submitCASARFusion(v3, 1);
  *(unsigned char *)(v3 + 169) = *(unsigned char *)(v3 + 168);
  operator delete(v2);
  int v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    xpc_object_t v5 = (void *)a1;
  }
  else
  {
    xpc_object_t v5 = (void *)a1;
  }
  operator delete(v5);
}

void sub_1C5A699FC(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  operator delete(v3);
  xpc_object_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void({block_pointer})(BOOL,BOOL,char const*),std::allocator<void({block_pointer})(BOOL,BOOL,char const*)>,void ()(BOOL,BOOL,char const*)>::__clone()
{
  return 0;
}

void *std::__function::__func<void({block_pointer})(BOOL,BOOL,char const*),std::allocator<void({block_pointer})(BOOL,BOOL,char const*)>,void ()(BOOL,BOOL,char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F2106CE8;
  xpc_object_t result = *(void **)(a1 + 8);
  if (result) {
    xpc_object_t result = _Block_copy(result);
  }
  a2[1] = result;
  return result;
}

void std::__function::__func<void({block_pointer})(BOOL,BOOL,char const*),std::allocator<void({block_pointer})(BOOL,BOOL,char const*)>,void ()(BOOL,BOOL,char const*)>::destroy(uint64_t a1)
{
  xpc_object_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    _Block_release(v2);
  }
  *(void *)(a1 + 8) = 0;
}

uint64_t std::__function::__func<void({block_pointer})(BOOL,BOOL,char const*),std::allocator<void({block_pointer})(BOOL,BOOL,char const*)>,void ()(BOOL,BOOL,char const*)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<void({block_pointer})(BOOL,BOOL,char const*),std::allocator<void({block_pointer})(BOOL,BOOL,char const*)>,void ()(BOOL,BOOL,char const*)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C5BC6999) {
    return a1 + 8;
  }
  if (((v3 & 0x80000001C5BC6999 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C5BC6999)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C5BC6999 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void({block_pointer})(BOOL,BOOL,char const*),std::allocator<void({block_pointer})(BOOL,BOOL,char const*)>,void ()(BOOL,BOOL,char const*)>::target_type()
{
}

void dispatch::async<void ctu::SharedSynchronizable<SARModule>::execute_wrapped<SARModule::processTxOff_sync(void)::$_0>(SARModule::processTxOff_sync(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SARModule::processTxOff_sync(void)::$_0,dispatch_queue_s *::default_delete<SARModule::processTxOff_sync(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  xpc_object_t v2 = *(uint64_t **)a1;
  uint64_t v3 = **(void **)a1;
  SARModule::submitCASARFusion(v3, 1);
  *(unsigned char *)(v3 + 169) = *(unsigned char *)(v3 + 168);
  operator delete(v2);
  int v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    xpc_object_t v5 = (void *)a1;
  }
  else
  {
    xpc_object_t v5 = (void *)a1;
  }
  operator delete(v5);
}

void sub_1C5A69C6C(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  operator delete(v3);
  xpc_object_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<SARModule>::execute_wrapped<SARModule::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0>(SARModule::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SARModule::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0,dispatch_queue_s *::default_delete<SARModule::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0>>)::{lambda(void *)#1}::__invoke(int **a1)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  xpc_object_t v2 = *a1;
  uint64_t v3 = *(capabilities::radio **)*a1;
  if (capabilities::radio::maverick((capabilities::radio *)a1))
  {
    unint64_t v41 = 0xAAAAAAAAAAAAAAAALL;
    SARModule::createTransmitStateDict_sync(v3, v2[2], v2[3], (xpc_object_t *)&v41);
    xpc_object_t v4 = (xpc_object_t)v41;
    if (MEMORY[0x1C8795EB0](v41) != MEMORY[0x1E4F14590])
    {
      xpc_object_t v5 = *((void *)v3 + 10);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        int v6 = v2[2];
        int v7 = v2[3];
        *(_DWORD *)long long buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v6;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v7;
        _os_log_error_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_ERROR, "Failed to get the Tx state from the state (%d) and trigger (%d)", buf, 0xEu);
      }
      goto LABEL_71;
    }
    memset(v40, 170, sizeof(v40));
    xpc_object_t value = xpc_dictionary_get_value(v4, (const char *)*MEMORY[0x1E4F4CD50]);
    *(void *)long long buf = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      *(void *)long long buf = xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)v40, (xpc *)buf, (const object *)"", v10);
    xpc_release(*(xpc_object_t *)buf);
    memset(v39, 170, sizeof(v39));
    xpc_object_t v11 = xpc_dictionary_get_value(v4, (const char *)*MEMORY[0x1E4F4CF18]);
    *(void *)long long buf = v11;
    if (v11) {
      xpc_retain(v11);
    }
    else {
      *(void *)long long buf = xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)v39, (xpc *)buf, (const object *)"", v12);
    xpc_release(*(xpc_object_t *)buf);
    unint64_t v52 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v51[7] = v13;
    v51[8] = v13;
    v51[5] = v13;
    v51[6] = v13;
    v51[3] = v13;
    v51[4] = v13;
    v51[1] = v13;
    v51[2] = v13;
    long long v50 = v13;
    v51[0] = v13;
    *(_OWORD *)char v48 = v13;
    long long v49 = v13;
    long long v46 = v13;
    long long v47 = v13;
    *(_OWORD *)long long buf = v13;
    long long v45 = v13;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
    unsigned int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"Transmit State: ", 16);
    if (SHIBYTE(v40[2]) >= 0) {
      char v15 = v40;
    }
    else {
      char v15 = (void **)v40[0];
    }
    if (SHIBYTE(v40[2]) >= 0) {
      uint64_t v16 = HIBYTE(v40[2]);
    }
    else {
      uint64_t v16 = (uint64_t)v40[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    char v17 = (void *)HIBYTE(v39[2]);
    if (SHIBYTE(v39[2]) < 0) {
      char v17 = v39[1];
    }
    if (v17)
    {
      size_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)" (", 2);
      if (SHIBYTE(v39[2]) >= 0) {
        size_t v19 = v39;
      }
      else {
        size_t v19 = (void **)v39[0];
      }
      if (SHIBYTE(v39[2]) >= 0) {
        uint64_t v20 = HIBYTE(v39[2]);
      }
      else {
        uint64_t v20 = (uint64_t)v39[1];
      }
      uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)")", 1);
    }
    char v22 = *((void *)v3 + 10);
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
LABEL_47:
      int v30 = SHIBYTE(v40[2]);
      if (SHIBYTE(v40[2]) >= 0) {
        size_t v31 = HIBYTE(v40[2]);
      }
      else {
        size_t v31 = (size_t)v40[1];
      }
      if (v31 == strlen((const char *)*MEMORY[0x1E4F4D0C0])
        && (SHIBYTE(v40[2]) >= 0 ? (int v32 = v40) : (int v32 = (void **)v40[0]),
            !memcmp(v32, (const void *)*MEMORY[0x1E4F4D0C0], v31)))
      {
        xpc_object_t v35 = *((void *)v3 + 10);
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl(&dword_1C59C6000, v35, OS_LOG_TYPE_DEFAULT, "#I Tx is on from QMI", (uint8_t *)__p, 2u);
        }
        SARModule::processTxOn_sync(v3);
      }
      else if (v31 == strlen((const char *)*MEMORY[0x1E4F4CDB0]))
      {
        xpc_object_t v33 = v30 >= 0 ? v40 : (void **)v40[0];
        if (!memcmp(v33, (const void *)*MEMORY[0x1E4F4CDB0], v31))
        {
          uint64_t v34 = *((void *)v3 + 10);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p[0]) = 0;
            _os_log_impl(&dword_1C59C6000, v34, OS_LOG_TYPE_DEFAULT, "#I Tx is off from QMI", (uint8_t *)__p, 2u);
          }
          SARModule::processTxOff_sync(v3);
        }
      }
      *(void *)long long buf = *MEMORY[0x1E4FBA418];
      *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x1E4FBA418] + 24);
      *(void *)&uint8_t buf[8] = MEMORY[0x1E4FBA470] + 16;
      if (SHIBYTE(v49) < 0) {
        operator delete(v48[1]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1C8795140](v51);
      if (SHIBYTE(v39[2]) < 0)
      {
        operator delete(v39[0]);
        if ((SHIBYTE(v40[2]) & 0x80000000) == 0) {
          goto LABEL_70;
        }
      }
      else if ((SHIBYTE(v40[2]) & 0x80000000) == 0)
      {
LABEL_70:
        xpc_object_t v4 = (xpc_object_t)v41;
LABEL_71:
        xpc_release(v4);
        goto LABEL_72;
      }
      operator delete(v40[0]);
      goto LABEL_70;
    }
    if ((BYTE8(v50) & 0x10) != 0)
    {
      uint64_t v25 = v50;
      if ((unint64_t)v50 < *((void *)&v47 + 1))
      {
        *(void *)&long long v50 = *((void *)&v47 + 1);
        uint64_t v25 = *((void *)&v47 + 1);
      }
      xpc_object_t v26 = (const void *)v47;
      size_t v23 = v25 - v47;
      if ((unint64_t)(v25 - v47) >= 0x7FFFFFFFFFFFFFF8) {
        goto LABEL_79;
      }
    }
    else
    {
      if ((BYTE8(v50) & 8) == 0)
      {
        size_t v23 = 0;
        HIBYTE(v38) = 0;
        uint64_t v24 = __p;
        goto LABEL_43;
      }
      xpc_object_t v26 = (const void *)*((void *)&v45 + 1);
      size_t v23 = *((void *)&v46 + 1) - *((void *)&v45 + 1);
      if (*((void *)&v46 + 1) - *((void *)&v45 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_79:
      }
        std::string::__throw_length_error[abi:ne180100]();
    }
    if (v23 >= 0x17)
    {
      uint64_t v27 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v23 | 7) != 0x17) {
        uint64_t v27 = v23 | 7;
      }
      uint64_t v28 = v27 + 1;
      uint64_t v24 = operator new(v27 + 1);
      __p[1] = (void *)v23;
      int64_t v38 = v28 | 0x8000000000000000;
      __p[0] = v24;
    }
    else
    {
      HIBYTE(v38) = v23;
      uint64_t v24 = __p;
      if (!v23) {
        goto LABEL_43;
      }
    }
    memmove(v24, v26, v23);
LABEL_43:
    *((unsigned char *)v24 + v23) = 0;
    unsigned int v29 = __p;
    if (v38 < 0) {
      unsigned int v29 = (void **)__p[0];
    }
    *(_DWORD *)int v42 = 136315138;
    unsigned int v43 = v29;
    _os_log_impl(&dword_1C59C6000, v22, OS_LOG_TYPE_DEFAULT, "#I %s", v42, 0xCu);
    if (SHIBYTE(v38) < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_47;
  }
  long long v8 = *((void *)v3 + 10);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_ERROR, "This is not supported device", buf, 2u);
  }
LABEL_72:
  operator delete(v2);
  uint64_t v36 = (std::__shared_weak_count *)a1[2];
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  operator delete(a1);
}

void sub_1C5A6A358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,xpc_object_t object,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  a27 = (void *)*MEMORY[0x1E4FBA418];
  *(void **)((char *)&a27 + *(a27 - 3)) = *(void **)(MEMORY[0x1E4FBA418] + 24);
  a28 = MEMORY[0x1E4FBA470] + 16;
  if (a41 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C8795140](&a44);
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  xpc_release(object);
  operator delete(v45);
  long long v47 = (std::__shared_weak_count *)v44[2];
  if (v47)
  {
    if (!atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  operator delete(v44);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<SARModule>::execute_wrapped<SARModule::processCallStatus(BOOL)::$_0>(SARModule::processCallStatus(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SARModule::processCallStatus(BOOL)::$_0,dispatch_queue_s *::default_delete<SARModule::processCallStatus(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke(unsigned __int8 **a1)
{
  v35[1] = *MEMORY[0x1E4F143B8];
  xpc_object_t v2 = *a1;
  uint64_t v3 = *(void *)*a1;
  xpc_object_t v4 = *(NSObject **)(v3 + 80);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Getting call state", buf, 2u);
  }
  xpc_object_t v5 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  int v6 = (AppleSARHelper *)off_1EA3D67B0;
  if (!off_1EA3D67B0)
  {
    AppleSARHelper::create_default_global((uint64_t *)buf, v5);
    long long v7 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    long long v8 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
    off_1EA3D67B0 = v7;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    xpc_object_t v9 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    int v6 = (AppleSARHelper *)off_1EA3D67B0;
  }
  char v10 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
  if (*(&off_1EA3D67B0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EA3D67B0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  xpc_object_t v11 = (char *)(v3 + 312);
  if (*((_DWORD *)v6 + 1))
  {
    *(void *)long long buf = 3;
    v35[0] = 0;
    unsigned int v33 = 1;
    char v12 = AppleSARHelper::callUserClientMethod(v6, 33, (const unint64_t *)buf, 1, (const void *)(v3 + 312), 1, v35, &v33, (void *)(v3 + 312), 1uLL);
    if (!v10)
    {
LABEL_18:
      long long v13 = *(NSObject **)(v3 + 80);
      unsigned int v14 = v13;
      if (v12) {
        goto LABEL_19;
      }
LABEL_26:
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_ERROR, "Failed to get call state!", buf, 2u);
        int v16 = v2[8];
        if (v16 != *v11) {
          goto LABEL_33;
        }
LABEL_28:
        char v17 = *(NSObject **)(v3 + 80);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          size_t v18 = "YES";
          if (!v16) {
            size_t v18 = "NO";
          }
          *(_DWORD *)long long buf = 136315138;
          *(void *)&uint8_t buf[4] = v18;
          size_t v19 = "#I Call state is same as before. No update the HSAR Voice Call: %s";
          uint64_t v20 = v17;
LABEL_54:
          _os_log_impl(&dword_1C59C6000, v20, OS_LOG_TYPE_DEFAULT, v19, buf, 0xCu);
          operator delete(v2);
          size_t v31 = (std::__shared_weak_count *)a1[2];
          if (!v31) {
            goto LABEL_61;
          }
          goto LABEL_59;
        }
LABEL_58:
        operator delete(v2);
        size_t v31 = (std::__shared_weak_count *)a1[2];
        if (!v31) {
          goto LABEL_61;
        }
        goto LABEL_59;
      }
LABEL_27:
      int v16 = v2[8];
      if (v16 != *v11) {
        goto LABEL_33;
      }
      goto LABEL_28;
    }
  }
  else
  {
    char v12 = 0;
    if (!v10) {
      goto LABEL_18;
    }
  }
  if (atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  long long v13 = *(NSObject **)(v3 + 80);
  unsigned int v14 = v13;
  if ((v12 & 1) == 0) {
    goto LABEL_26;
  }
LABEL_19:
  if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_27;
  }
  if (*v11) {
    char v15 = "On";
  }
  else {
    char v15 = "Off";
  }
  *(_DWORD *)long long buf = 136315138;
  *(void *)&uint8_t buf[4] = v15;
  _os_log_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_DEFAULT, "#I Succeeded getting call state: %s", buf, 0xCu);
  int v16 = v2[8];
  if (v16 == *v11) {
    goto LABEL_28;
  }
LABEL_33:
  char *v11 = v16;
  uint64_t v21 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  char v22 = (AppleSARHelper *)off_1EA3D67B0;
  if (!off_1EA3D67B0)
  {
    AppleSARHelper::create_default_global((uint64_t *)buf, v21);
    long long v23 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    uint64_t v24 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
    off_1EA3D67B0 = v23;
    if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    uint64_t v25 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    char v22 = (AppleSARHelper *)off_1EA3D67B0;
  }
  xpc_object_t v26 = (std::__shared_weak_count *)*(&off_1EA3D67B0 + 1);
  if (*(&off_1EA3D67B0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EA3D67B0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  char v32 = *v11;
  if (*((_DWORD *)v22 + 1))
  {
    *(void *)long long buf = 0;
    v35[0] = 0;
    unsigned int v33 = 1;
    char v27 = AppleSARHelper::callUserClientMethod(v22, 33, (const unint64_t *)buf, 1, &v32, 1, v35, &v33, &v32, 1uLL);
    if (!v26)
    {
LABEL_48:
      uint64_t v28 = *(NSObject **)(v3 + 80);
      unsigned int v29 = v28;
      if (v27) {
        goto LABEL_49;
      }
      goto LABEL_57;
    }
  }
  else
  {
    char v27 = 0;
    if (!v26) {
      goto LABEL_48;
    }
  }
  if (atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_48;
  }
  ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
  std::__shared_weak_count::__release_weak(v26);
  uint64_t v28 = *(NSObject **)(v3 + 80);
  unsigned int v29 = v28;
  if (v27)
  {
LABEL_49:
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      if (*v11) {
        int v30 = "YES";
      }
      else {
        int v30 = "NO";
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v30;
      size_t v19 = "#I Setting HSAR Voice Call: %s";
      uint64_t v20 = v28;
      goto LABEL_54;
    }
    goto LABEL_58;
  }
LABEL_57:
  if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
    goto LABEL_58;
  }
  *(_WORD *)long long buf = 0;
  _os_log_error_impl(&dword_1C59C6000, v28, OS_LOG_TYPE_ERROR, "Failed to set call state!", buf, 2u);
  operator delete(v2);
  size_t v31 = (std::__shared_weak_count *)a1[2];
  if (!v31) {
    goto LABEL_61;
  }
LABEL_59:
  if (!atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
LABEL_61:
  operator delete(a1);
}

void sub_1C5A6AB40(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  operator delete(v2);
  xpc_object_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_64()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

uint64_t __cxx_global_var_init_65()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<AppleSARHelper>::~PthreadMutexGuardPolicy, &ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

uint64_t __cxx_global_var_init_66()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::Gestalt>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

uint64_t __cxx_global_var_init_67()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

const char *asString(_DWORD *a1)
{
  long long v1 = "Unknown";
  if (*a1 == 1) {
    long long v1 = "PoweredOn";
  }
  if (*a1) {
    return v1;
  }
  else {
    return "LowPower";
  }
}

const char *asString(int *a1)
{
  uint64_t v1 = *a1;
  if (v1 > 2) {
    return "Unknown";
  }
  else {
    return off_1E651B4D8[v1];
  }
}

void SystemState::SystemState(SystemState *this)
{
  *(void *)this = 0x200000001;
  *((_DWORD *)this + 2) = -536870144;
}

{
  *(void *)this = 0x200000001;
  *((_DWORD *)this + 2) = -536870144;
}

uint64_t SystemState::acceptSystemNotification(SystemState *this, int a2)
{
  uint64_t v2 = 0;
  HIDWORD(v3) = a2;
  LODWORD(v3) = a2 + 536870288;
  switch((v3 >> 4))
  {
    case 0u:
      if (*(_DWORD *)this != 1) {
        return 0;
      }
      *((_DWORD *)this + 1) = 0;
      goto LABEL_17;
    case 1u:
      if (*(_DWORD *)this != 1) {
        return 0;
      }
      if (*((_DWORD *)this + 1)) {
        *((_DWORD *)this + 1) = 1;
      }
      *(_DWORD *)this = 0;
      goto LABEL_17;
    case 2u:
      if (!*((_DWORD *)this + 1)) {
        goto LABEL_12;
      }
      return 0;
    case 9u:
      if (*(_DWORD *)this || *((_DWORD *)this + 1) != 2) {
        return 0;
      }
LABEL_12:
      *(void *)this = 0x200000001;
      goto LABEL_17;
    case 0xBu:
      if (*(_DWORD *)this || *((_DWORD *)this + 1) == 2) {
        return 0;
      }
      *((_DWORD *)this + 1) = 2;
LABEL_17:
      *((_DWORD *)this + 2) = a2;
      return 1;
    default:
      return v2;
  }
}

uint64_t SystemState::getSystemNotification(SystemState *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t SystemState::getPowerState(SystemState *this)
{
  return *(unsigned int *)this;
}

uint64_t SystemState::getSleepState(SystemState *this)
{
  return *((unsigned int *)this + 1);
}

uint64_t __cxx_global_var_init_2()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

void *CellularCertClient::create@<X0>(void *a1@<X8>)
{
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v3 = (ctu::OsLogLogger *)operator new(0x18uLL);
  ctu::OsLogLogger::OsLogLogger(v3, "com.apple.telephony.abm", "cellularcert.client");
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = 0;

  return std::shared_ptr<CellularCertClient>::shared_ptr[abi:ne180100]<CellularCertClient,void>(a1, (uint64_t)v3);
}

void sub_1C5A6AF94(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void CellularCertClient::CellularCertClient(CellularCertClient *this)
{
  uint64_t v1 = ctu::OsLogLogger::OsLogLogger(this, "com.apple.telephony.abm", "cellularcert.client");
  *(void *)(v1 + 8) = 0;
  *(void *)(v1 + 16) = 0;
}

{
  uint64_t v1;

  uint64_t v1 = ctu::OsLogLogger::OsLogLogger(this, "com.apple.telephony.abm", "cellularcert.client");
  *(void *)(v1 + 8) = 0;
  *(void *)(v1 + 16) = 0;
}

void CellularCertClient::~CellularCertClient(os_log_t *this)
{
  uint64_t v2 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)xpc_object_t v4 = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Destroy client", v4, 2u);
  }
  unint64_t v3 = (std::__shared_weak_count *)this[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  MEMORY[0x1C8794100](this);
}

{
  NSObject *v2;
  std::__shared_weak_count *v3;
  uint8_t v4[16];

  uint64_t v2 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)xpc_object_t v4 = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Destroy client", v4, 2u);
  }
  unint64_t v3 = (std::__shared_weak_count *)this[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  MEMORY[0x1C8794100](this);
}

const char *CellularCertClient::getName(CellularCertClient *this)
{
  return "CellularCertClient";
}

void CellularCertClient::bootstrapTest(CellularCertClient *this@<X0>, uint64_t a2@<X8>)
{
  xpc_object_t v4 = abm::kCommandCellularCertBootstrap;
  xpc_object_t v5 = xpc_null_create();
  xpc_object_t v6 = v5;
  CellularCertClient::sendCommandInternal((uint64_t)this, v4, &v6, a2);
  xpc_release(v5);
}

void sub_1C5A6B168(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

void CellularCertClient::sendCommandInternal(uint64_t a1@<X0>, const char *a2@<X1>, xpc_object_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  uint64_t v60 = 0;
  char v61 = &v60;
  uint64_t v62 = 0x4802000000;
  long long v63 = __Block_byref_object_copy__2;
  uint64_t v64 = __Block_byref_object_dispose__2;
  unint64_t v65 = 0xAAAAAAAAE020E002;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  long long v66 = 0;
  uint64_t v54 = 0;
  xpc_object_t v55 = &v54;
  uint64_t v56 = 0x3002000000;
  char v57 = __Block_byref_object_copy__3_0;
  uint64_t v58 = __Block_byref_object_dispose__4_0;
  xpc_object_t v59 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v8 = xpc_int64_create(-534716414);
  xpc_object_t v9 = v8;
  uint64_t v10 = MEMORY[0x1E4F14590];
  if (v8)
  {
    xpc_object_t v59 = v8;
  }
  else
  {
    xpc_object_t v9 = xpc_null_create();
    xpc_object_t v59 = v9;
    if (!v9)
    {
      xpc_object_t v11 = xpc_null_create();
      xpc_object_t v9 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8795EB0](v9) == v10)
  {
    xpc_retain(v9);
    goto LABEL_9;
  }
  xpc_object_t v11 = xpc_null_create();
LABEL_8:
  xpc_object_t v59 = v11;
LABEL_9:
  xpc_release(v9);
  memset(object, 170, sizeof(object));
  xpc_object_t v12 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v13 = v12;
  if (v12)
  {
    object[0] = v12;
  }
  else
  {
    xpc_object_t v13 = xpc_null_create();
    object[0] = v13;
    if (!v13)
    {
      xpc_object_t v14 = xpc_null_create();
      xpc_object_t v13 = 0;
      goto LABEL_16;
    }
  }
  if (MEMORY[0x1C8795EB0](v13) == v10)
  {
    xpc_retain(v13);
    char v15 = v13;
    goto LABEL_17;
  }
  xpc_object_t v14 = xpc_null_create();
LABEL_16:
  char v15 = v13;
  object[0] = v14;
  xpc_object_t v13 = v14;
LABEL_17:
  xpc_release(v15);
  xpc_object_t v16 = xpc_string_create("cellularcertd");
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E4FAE008], v16);
  xpc_object_t v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  xpc_object_t v18 = xpc_string_create("com.apple.abm.cellularcert");
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E4FAE010], v18);
  xpc_object_t v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  xpc_object_t v20 = xpc_string_create("ABMCellularCertServerReady");
  if (!v20) {
    xpc_object_t v20 = xpc_null_create();
  }
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E4FAE018], v20);
  xpc_object_t v21 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v21);
  xpc_object_t v22 = xpc_string_create("CellularCertClient");
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E4FAE000], v22);
  xpc_object_t v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  GetABMLogServer(&v51);
  TelephonyXPC::Client::create();
  uint64_t v24 = v52;
  if (v52 && !atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  xpc_release(object[0]);
  object[0] = 0;
  uint64_t v25 = dispatch_group_create();
  xpc_object_t v26 = v25;
  if (v25)
  {
    dispatch_retain(v25);
    dispatch_group_enter(v26);
  }
  uint64_t v27 = *(void *)(a1 + 8);
  uint64_t v28 = *(std::__shared_weak_count **)(a1 + 16);
  if (v28) {
    atomic_fetch_add_explicit(&v28->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  long long v49 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v50 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN18CellularCertClient19sendCommandInternalEPKcN3xpc4dictE_block_invoke;
  aBlock[3] = &unk_1F2106D70;
  void aBlock[6] = v27;
  long long v47 = v28;
  if (v28) {
    atomic_fetch_add_explicit(&v28->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  dispatch_group_t group = v26;
  if (v26)
  {
    dispatch_retain(v26);
    dispatch_group_enter(group);
  }
  aBlock[4] = &v60;
  void aBlock[5] = &v54;
  unsigned int v29 = _Block_copy(aBlock);
  global_queue = dispatch_get_global_queue(0, 0);
  size_t v31 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  long long v49 = v29;
  dispatch_object_t v50 = v31;
  size_t v32 = strlen(a2);
  if (v32 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v33 = v32;
  if (v32 >= 0x17)
  {
    uint64_t v36 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17) {
      uint64_t v36 = v32 | 7;
    }
    uint64_t v37 = v36 + 1;
    p_dst = (long long *)operator new(v36 + 1);
    *((void *)&__dst + 1) = v33;
    unint64_t v70 = v37 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_46:
    memcpy(p_dst, a2, v33);
    *((unsigned char *)p_dst + v33) = 0;
    xpc_object_t v35 = v49;
    if (!v49) {
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  HIBYTE(v70) = v32;
  p_dst = &__dst;
  if (v32) {
    goto LABEL_46;
  }
  LOBYTE(__dst) = 0;
  xpc_object_t v35 = v49;
  if (v49) {
LABEL_47:
  }
    xpc_object_t v35 = _Block_copy(v35);
LABEL_48:
  uint64_t v44 = v35;
  long long v45 = v50;
  if (v50) {
    dispatch_retain(v50);
  }
  xpc_object_t v43 = *a3;
  if (*a3) {
    xpc_retain(*a3);
  }
  else {
    xpc_object_t v43 = xpc_null_create();
  }
  TelephonyXPC::Command::create();
  xpc_release(v43);
  if (v45) {
    dispatch_release(v45);
  }
  if (v44) {
    _Block_release(v44);
  }
  if (SHIBYTE(v70) < 0) {
    operator delete((void *)__dst);
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)0xAAAAAAAAAAAAAAB2, 1uLL, memory_order_relaxed);
  TelephonyXPC::Client::perform();
  if (!atomic_fetch_add((atomic_ullong *volatile)0xAAAAAAAAAAAAAAB2, 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
  }
  if (!atomic_fetch_add((atomic_ullong *volatile)0xAAAAAAAAAAAAAAB2, 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
  }
  if (v50) {
    dispatch_release(v50);
  }
  if (v49) {
    _Block_release(v49);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if (v47) {
    std::__shared_weak_count::__release_weak(v47);
  }
  if (v28) {
    std::__shared_weak_count::__release_weak(v28);
  }
  if (v26)
  {
    dispatch_group_leave(v26);
    dispatch_release(v26);
  }
  int64_t v38 = *(NSObject **)a1;
  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(__dst) = 136315138;
    *(void *)((char *)&__dst + 4) = a2;
    _os_log_impl(&dword_1C59C6000, v38, OS_LOG_TYPE_DEFAULT, "#I Sent command '%s' to cellularcert daemon", (uint8_t *)&__dst, 0xCu);
  }
  if (dispatch_group_wait(v26, 0xFFFFFFFFFFFFFFFFLL))
  {
    xpc_object_t v39 = (char *)operator new(0x30uLL);
    strcpy(v39, "Timeout waiting for response from server");
    size_t v40 = v61;
    *((_DWORD *)v61 + 10) = -534716413;
    if (*((char *)v40 + 71) < 0) {
      operator delete((void *)v40[6]);
    }
    void v40[6] = (uint64_t)v39;
    v40[7] = 40;
    v40[8] = 0x8000000000000030;
  }
  *(unsigned char *)a4 = *((_DWORD *)v61 + 10) == 0;
  unint64_t v41 = (void *)v55[5];
  *(void *)(a4 + 8) = v41;
  if (!v41)
  {
    *(void *)(a4 + 8) = xpc_null_create();
    if (!v26) {
      goto LABEL_85;
    }
    goto LABEL_84;
  }
  xpc_retain(v41);
  if (v26) {
LABEL_84:
  }
    dispatch_release(v26);
LABEL_85:
  int v42 = (std::__shared_weak_count *)object[2];
  if (object[2] && !atomic_fetch_add((atomic_ullong *volatile)object[2] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
  _Block_object_dispose(&v54, 8);
  xpc_release(v59);
  _Block_object_dispose(&v60, 8);
  if (SHIBYTE(v68) < 0) {
    operator delete(v66);
  }
}

void sub_1C5A6B998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,dispatch_group_t group,char a25,uint64_t a26,char a27,uint64_t a28,xpc_object_t a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void CellularCertClient::shutdownTest(CellularCertClient *this@<X0>, uint64_t a2@<X8>)
{
  xpc_object_t v4 = abm::kCommandCellularCertShutdown;
  xpc_object_t v5 = xpc_null_create();
  xpc_object_t v6 = v5;
  CellularCertClient::sendCommandInternal((uint64_t)this, v4, &v6, a2);
  xpc_release(v5);
}

void sub_1C5A6BBE0(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

void CellularCertClient::configureTest(uint64_t a1@<X0>, xpc_object_t *a2@<X1>, uint64_t a3@<X8>)
{
  xpc_object_t v5 = abm::kCommandCellularCertConfigure;
  xpc_object_t v6 = *a2;
  xpc_object_t v7 = v6;
  if (v6)
  {
    xpc_retain(v6);
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v7 = v6;
  }
  CellularCertClient::sendCommandInternal(a1, v5, &v7, a3);
  xpc_release(v6);
}

void sub_1C5A6BC80(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

xpc_object_t __Block_byref_object_copy__3_0(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  xpc_object_t result = xpc_null_create();
  *(void *)(a2 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__4_0(uint64_t a1)
{
  *(void *)(a1 + 40) = 0;
}

void ___ZN18CellularCertClient19sendCommandInternalEPKcN3xpc4dictE_block_invoke(void *a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t v4 = (std::__shared_weak_count *)a1[7];
  if (v4)
  {
    xpc_object_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      xpc_object_t v8 = v7;
      if (a1[6])
      {
        uint64_t v9 = *(void *)(a1[4] + 8);
        *(_DWORD *)(v9 + 40) = *(_DWORD *)a2;
        if (v9 + 40 != a2)
        {
          uint64_t v10 = v9 + 48;
          int v11 = *(char *)(v9 + 71);
          char v12 = *(unsigned char *)(a2 + 31);
          if (v11 < 0)
          {
            if (v12 >= 0) {
              xpc_object_t v14 = (void *)(a2 + 8);
            }
            else {
              xpc_object_t v14 = *(void **)(a2 + 8);
            }
            if (v12 >= 0) {
              size_t v15 = *(unsigned __int8 *)(a2 + 31);
            }
            else {
              size_t v15 = *(void *)(a2 + 16);
            }
            std::string::__assign_no_alias<false>((void **)v10, v14, v15);
          }
          else if ((*(unsigned char *)(a2 + 31) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>((void *)v10, *(void **)(a2 + 8), *(void *)(a2 + 16));
          }
          else
          {
            long long v13 = *(_OWORD *)(a2 + 8);
            *(void *)(v10 + 16) = *(void *)(a2 + 24);
            *(_OWORD *)uint64_t v10 = v13;
          }
        }
        uint64_t v16 = *(void *)(a1[5] + 8);
        xpc_object_t v17 = *a3;
        if (v17) {
          xpc_retain(v17);
        }
        else {
          xpc_object_t v17 = xpc_null_create();
        }
        xpc_object_t v18 = *(void **)(v16 + 40);
        *(void *)(v16 + 40) = v17;
        xpc_release(v18);
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_1C5A6BE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void __copy_helper_block_e8_48c43_ZTSNSt3__18weak_ptrI18CellularCertClientEE64c30_ZTSN8dispatch13group_sessionE(void *a1, void *a2)
{
  uint64_t v3 = a2[7];
  a1[6] = a2[6];
  a1[7] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v4 = a2[8];
  a1[8] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    xpc_object_t v5 = a1[8];
    if (v5)
    {
      dispatch_group_enter(v5);
    }
  }
}

void __destroy_helper_block_e8_48c43_ZTSNSt3__18weak_ptrI18CellularCertClientEE64c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 64);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 64);
    if (v3) {
      dispatch_release(v3);
    }
  }
  xpc_object_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void *std::shared_ptr<CellularCertClient>::shared_ptr[abi:ne180100]<CellularCertClient,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  xpc_object_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2106DB0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (a2)
  {
    xpc_object_t v6 = *(std::__shared_weak_count **)(a2 + 16);
    if (v6)
    {
      if (v6->__shared_owners_ == -1)
      {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        *(void *)(a2 + 8) = a2;
        *(void *)(a2 + 16) = v4;
        std::__shared_weak_count::__release_weak(v6);
        if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_7;
        }
      }
    }
    else
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 8) = a2;
      *(void *)(a2 + 16) = v4;
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_7:
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return a1;
}

void sub_1C5A6C0AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<CellularCertClient>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<CellularCertClient>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(NSObject **)v2;
    if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)xpc_object_t v7 = 0;
      _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Destroy client", v7, 2u);
    }
    xpc_object_t v4 = *(std::__shared_weak_count **)(v2 + 16);
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
    xpc_object_t v5 = (void *)MEMORY[0x1C8794100](v2);
    operator delete(v5);
  }
  return a1;
}

void std::__shared_ptr_pointer<CellularCertClient *,std::shared_ptr<CellularCertClient>::__shared_ptr_default_delete<CellularCertClient,CellularCertClient>,std::allocator<CellularCertClient>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<CellularCertClient *,std::shared_ptr<CellularCertClient>::__shared_ptr_default_delete<CellularCertClient,CellularCertClient>,std::allocator<CellularCertClient>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    uint64_t v2 = *(NSObject **)v1;
    if (os_log_type_enabled(*(os_log_t *)v1, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)xpc_object_t v5 = 0;
      _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Destroy client", v5, 2u);
    }
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    xpc_object_t v4 = (void *)MEMORY[0x1C8794100](v1);
    operator delete(v4);
  }
}

uint64_t std::__shared_ptr_pointer<CellularCertClient *,std::shared_ptr<CellularCertClient>::__shared_ptr_default_delete<CellularCertClient,CellularCertClient>,std::allocator<CellularCertClient>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C5BC6A4BLL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C5BC6A4BLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C5BC6A4BLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C5BC6A4BLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void ARIXpcServer::create(uint64_t *a1@<X8>)
{
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v3 = (ARIXpcServer *)operator new(0x78uLL);
  ARIXpcServer::ARIXpcServer(v3);
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<ARIXpcServer>::shared_ptr[abi:ne180100]<ARIXpcServer,std::shared_ptr<ARIXpcServer> ctu::SharedSynchronizable<ARIXpcServer>::make_shared_ptr<ARIXpcServer>(ARIXpcServer*)::{lambda(ARIXpcServer*)#1},void>(a1, (uint64_t)v3);
  ctu::Loggable<ARIXpcServer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a1);
  uint64_t v4 = *a1;
  xpc_object_t v5 = (std::__shared_weak_count *)a1[1];
  uint64_t v6 = *a1 + 72;
  uint64_t v9 = *a1;
  uint64_t v10 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI12ARIXpcServerE20execute_wrapped_syncIZNS1_6createEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  block[3] = &__block_descriptor_tmp_7;
  block[4] = v6;
  void block[5] = &v9;
  xpc_object_t v7 = *(NSObject **)(v4 + 88);
  if (*(void *)(v4 + 96))
  {
    dispatch_async_and_wait(v7, block);
    xpc_object_t v8 = v10;
    if (!v10) {
      return;
    }
  }
  else
  {
    dispatch_sync(v7, block);
    xpc_object_t v8 = v10;
    if (!v10) {
      return;
    }
  }
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_1C5A6C3C4(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1C5A6C3D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ARIXpcServer::ARIXpcServer(ARIXpcServer *this)
{
  *(void *)this = &unk_1F2106E00;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v8, "com.apple.telephony.abm", "ipc.xpc.ari");
  GetABMLogServer(&v6);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v3 = dispatch_queue_create_with_target_V2("ipc.xpc.ari", initially_inactive, 0);
  dispatch_set_qos_class_floor(v3, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v3);
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    *((void *)this + 12) = 0;
    dispatch_release(v3);
  }
  else
  {
    *((void *)this + 12) = 0;
  }
  *(void *)this = &unk_1F2106ED8;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
  *((void *)this + 1) = &unk_1F2102CB8;
  uint64_t v4 = v7;
  *((void *)this + 7) = v6;
  *((void *)this + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v9);
  *(void *)this = &unk_1F2106F68;
  xpc_object_t v5 = v7;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v8);
  *(void *)this = &unk_1F2106E00;
  *((void *)this + 13) = xpc_null_create();
}

void sub_1C5A6C5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a15);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a13);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v15);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  _Unwind_Resume(a1);
}

void sub_1C5A6C5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  _Unwind_Resume(a1);
}

const char *ARIXpcServer::getName(ARIXpcServer *this)
{
  return "ipc.xpc.ari";
}

void *ARIXpcServer::initialize_sync(ARIXpcServer *this)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)this + 5);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1C59C6000, v1, OS_LOG_TYPE_DEFAULT, "#I XPC Listener: Setting up entitlement checker", v3, 2u);
  }
  v4[0] = &unk_1F2106FA8;
  v4[1] = sValidateConnection;
  xpc_object_t v5 = v4;
  AriHostRt::RegisterEntitlementChecker();
  xpc_object_t result = v5;
  if (v5 == v4) {
    return (void *)(*(uint64_t (**)(void *))(v4[0] + 32))(v4);
  }
  if (v5) {
    return (void *)(*(uint64_t (**)(void))(*v5 + 40))();
  }
  return result;
}

void sub_1C5A6C748(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<BOOL ()(void *)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::function<BOOL ()(void *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t ARIXpcServer::dumpState(ARIXpcServer *this)
{
  return MEMORY[0x1F41785D0](this);
}

void ARIXpcServer::~ARIXpcServer(xpc_object_t *this)
{
  *this = &unk_1F2106E00;
  xpc_release(this[13]);
  this[13] = 0;
  *this = &unk_1F2106ED8;
  MEMORY[0x1C87940C0](this + 1);
  uint64_t v2 = this[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = this[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)this[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *this = &unk_1F2106E00;
  xpc_release(this[13]);
  this[13] = 0;
  *this = &unk_1F2106ED8;
  MEMORY[0x1C87940C0](this + 1);
  uint64_t v2 = this[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = this[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)this[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(this);
}

uint64_t ctu::Loggable<ARIXpcServer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<ARIXpcServer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    xpc_object_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<ARIXpcServer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<ARIXpcServer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F2106ED8;
  MEMORY[0x1C87940C0](a1 + 1);
  return a1;
}

void ctu::Loggable<ARIXpcServer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F2106ED8;
  MEMORY[0x1C87940C0](a1 + 1);

  operator delete(a1);
}

void ctu::Loggable<ARIXpcServer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1C5A6CBD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C5A6CBEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<ARIXpcServer>::shared_ptr[abi:ne180100]<ARIXpcServer,std::shared_ptr<ARIXpcServer> ctu::SharedSynchronizable<ARIXpcServer>::make_shared_ptr<ARIXpcServer>(ARIXpcServer*)::{lambda(ARIXpcServer*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2106F18;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C5A6CD18(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<ARIXpcServer> ctu::SharedSynchronizable<ARIXpcServer>::make_shared_ptr<ARIXpcServer>(ARIXpcServer*)::{lambda(ARIXpcServer*)#1}::operator() const(ARIXpcServer*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C5A6CD40(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<ARIXpcServer *,std::shared_ptr<ARIXpcServer> ctu::SharedSynchronizable<ARIXpcServer>::make_shared_ptr<ARIXpcServer>(ARIXpcServer*)::{lambda(ARIXpcServer *)#1},std::allocator<ARIXpcServer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ARIXpcServer *,std::shared_ptr<ARIXpcServer> ctu::SharedSynchronizable<ARIXpcServer>::make_shared_ptr<ARIXpcServer>(ARIXpcServer*)::{lambda(ARIXpcServer *)#1},std::allocator<ARIXpcServer>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<ARIXpcServer *,std::shared_ptr<ARIXpcServer> ctu::SharedSynchronizable<ARIXpcServer>::make_shared_ptr<ARIXpcServer>(ARIXpcServer*)::{lambda(ARIXpcServer *)#1},std::allocator<ARIXpcServer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI12ARIXpcServerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI12ARIXpcServerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT"
                                "_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI12ARIXpcServerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI12ARIXpcServerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<ARIXpcServer> ctu::SharedSynchronizable<ARIXpcServer>::make_shared_ptr<ARIXpcServer>(ARIXpcServer*)::{lambda(ARIXpcServer*)#1}::operator() const(ARIXpcServer*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *___ZNK3ctu20SharedSynchronizableI12ARIXpcServerE20execute_wrapped_syncIZNS1_6createEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke(uint64_t a1)
{
  return ARIXpcServer::initialize_sync(**(ARIXpcServer ***)(a1 + 40));
}

void *ctu::SharedLoggable<ARIXpcServer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F2106ED8;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ctu::SharedLoggable<ARIXpcServer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F2106ED8;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void *std::__function::__func<BOOL (*)(void *),std::allocator<BOOL (*)(void *)>,BOOL ()(void *)>::__clone(uint64_t a1)
{
  size_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F2106FA8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(void *),std::allocator<BOOL (*)(void *)>,BOOL ()(void *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2106FA8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(void *),std::allocator<BOOL (*)(void *)>,BOOL ()(void *)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C5BC6D1DLL) {
    return a1 + 8;
  }
  if (((v3 & 0x80000001C5BC6D1DLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C5BC6D1DLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C5BC6D1DLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<BOOL (*)(void *),std::allocator<BOOL (*)(void *)>,BOOL ()(void *)>::target_type()
{
}

void BootStats::BootStats(BootStats *this)
{
  char v3 = 16;
  strcpy(__p, "Stats::BootStats");
  Stats::Stats(this, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(*(void **)__p);
  }
  *(void *)this = &unk_1F2107058;
}

{
  char __p[17];
  char v3;

  char v3 = 16;
  strcpy(__p, "Stats::BootStats");
  Stats::Stats(this, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(*(void **)__p);
  }
  *(void *)this = &unk_1F2107058;
}

void sub_1C5A6D0AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5A6D144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void BootStats::~BootStats(BootStats *this)
{
  *(void *)this = &unk_1F210AD08;
  MEMORY[0x1C87940C0]((char *)this + 8);
  uint64_t v2 = *((void *)this + 12);
  if (v2) {
    dispatch_release(v2);
  }
  char v3 = *((void *)this + 11);
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1F210AD08;
  MEMORY[0x1C87940C0]((char *)this + 8);
  uint64_t v2 = *((void *)this + 12);
  if (v2) {
    dispatch_release(v2);
  }
  char v3 = *((void *)this + 11);
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)this = &unk_1F210AD08;
  MEMORY[0x1C87940C0]((char *)this + 8);
  uint64_t v2 = *((void *)this + 12);
  if (v2) {
    dispatch_release(v2);
  }
  char v3 = *((void *)this + 11);
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(this);
}

double BootStats::createInternal@<D0>(void *a1@<X8>)
{
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  char v3 = operator new(0x78uLL);
  char v7 = 16;
  strcpy(__p, "Stats::BootStats");
  Stats::Stats(v3, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(*(void **)__p);
  }
  void *v3 = &unk_1F2107058;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<BootStats>::shared_ptr[abi:ne180100]<BootStats,std::shared_ptr<BootStats> ctu::SharedSynchronizable<Stats>::make_shared_ptr<BootStats>(BootStats*)::{lambda(BootStats*)#1},void>(&v5, (uint64_t)v3);
  ctu::Loggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(v5);
  double result = *(double *)&v5;
  *(_OWORD *)a1 = v5;
  return result;
}

void sub_1C5A6D358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C5A6D36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t BootStats::init(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 104) = a2;
  *(void *)(a1 + 112) = 0;
  return 1;
}

void BootStats::updateData(uint64_t a1@<X0>, CFDictionaryRef *a2@<X1>, xpc_object_t *a3@<X2>, __CFDictionary **a4@<X8>)
{
  xpc_object_t v26 = 0;
  if (*a2) {
    xpc_object_t v8 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    xpc_object_t v8 = 0;
  }
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (v8)
  {
    MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, *a2);
  }
  else
  {
    MutableCopy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!MutableCopy) {
      goto LABEL_8;
    }
  }
  xpc_object_t v26 = MutableCopy;
LABEL_8:
  int v11 = (char *)*MEMORY[0x1E4F4CF20];
  if (xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4CF20]))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a3, v11);
    object[0] = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      object[0] = xpc_null_create();
    }
    time_t v13 = xpc::dyn_cast_or_default((xpc *)object, 0);
    xpc_release(object[0]);
  }
  else
  {
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)object, *a2);
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v27, v11);
    LODWORD(v13) = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)object, v27);
    MEMORY[0x1C8794290](&v27);
    time_t v13 = (int)v13;
    MEMORY[0x1C87942E0](object);
  }
  xpc_object_t v14 = (char *)*MEMORY[0x1E4F4CF78];
  if (xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4CF78]))
  {
    xpc_object_t v15 = xpc_dictionary_get_value(*a3, v14);
    object[0] = v15;
    if (v15) {
      xpc_retain(v15);
    }
    else {
      object[0] = xpc_null_create();
    }
    time_t v16 = xpc::dyn_cast_or_default((xpc *)object, 0);
    xpc_release(object[0]);
  }
  else
  {
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)object, *a2);
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v27, v14);
    LODWORD(v16) = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)object, v27);
    MEMORY[0x1C8794290](&v27);
    time_t v16 = (int)v16;
    MEMORY[0x1C87942E0](object);
  }
  xpc_object_t v17 = (const char **)MEMORY[0x1E4F4C4B8];
  if (v13 && v16 && v16 >= v13)
  {
    uint64_t v19 = (uint64_t)difftime(v16, v13);
    xpc_object_t v20 = *(const void **)(a1 + 112);
    if (v20) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)object, *a2);
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v27, *v17);
  LODWORD(v19) = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)object, v27);
  MEMORY[0x1C8794290](&v27);
  uint64_t v19 = (int)v19;
  MEMORY[0x1C87942E0](object);
  xpc_object_t v20 = *(const void **)(a1 + 112);
  if (!v20)
  {
LABEL_24:
    uint64_t v19 = 0;
    time_t v16 = 0;
    *(void *)(a1 + 112) = v13;
    xpc_object_t v20 = (const void *)v13;
  }
LABEL_25:
  ctu::cf::update<char const*,long>(MutableCopy, (const __CFString **)*MEMORY[0x1E4F4CE98], v20, v9, v18);
  ctu::cf::update<char const*,long>(MutableCopy, (const __CFString **)v11, (const void *)v13, v9, v21);
  ctu::cf::update<char const*,long>(MutableCopy, (const __CFString **)v14, (const void *)v16, v9, v22);
  ctu::cf::update<char const*,long>(MutableCopy, (const __CFString **)*v17, (const void *)v19, v9, v23);
  if (MutableCopy)
  {
    CFTypeID v24 = CFGetTypeID(MutableCopy);
    if (v24 == CFDictionaryGetTypeID())
    {
      *a4 = MutableCopy;
      CFRetain(MutableCopy);
    }
    else
    {
      *a4 = 0;
    }
    CFRelease(MutableCopy);
  }
  else
  {
    *a4 = 0;
  }
}

void sub_1C5A6D6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const void *a11, char a12)
{
}

void sub_1C5A6D71C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
}

void sub_1C5A6D73C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
}

void sub_1C5A6D764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ctu::Loggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

uint64_t ctu::Loggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if (*(_DWORD *)(result + 104))
  {
    strcpy(a2, "UNKNOWN");
    a2[23] = 7;
  }
  else
  {
    strcpy(a2, "Boot Statistics");
    a2[23] = 15;
  }
  return result;
}

uint64_t ctu::Loggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void ctu::Loggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    char v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1C5A6D90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C5A6D928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<BootStats>::shared_ptr[abi:ne180100]<BootStats,std::shared_ptr<BootStats> ctu::SharedSynchronizable<Stats>::make_shared_ptr<BootStats>(BootStats*)::{lambda(BootStats*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F21070C0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C5A6DA54(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<BootStats> ctu::SharedSynchronizable<Stats>::make_shared_ptr<BootStats>(BootStats*)::{lambda(BootStats*)#1}::operator() const(BootStats*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C5A6DA7C(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<BootStats *,std::shared_ptr<BootStats> ctu::SharedSynchronizable<Stats>::make_shared_ptr<BootStats>(BootStats*)::{lambda(BootStats *)#1},std::allocator<BootStats>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<BootStats *,std::shared_ptr<BootStats> ctu::SharedSynchronizable<Stats>::make_shared_ptr<BootStats>(BootStats*)::{lambda(BootStats *)#1},std::allocator<BootStats>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<BootStats *,std::shared_ptr<BootStats> ctu::SharedSynchronizable<Stats>::make_shared_ptr<BootStats>(BootStats*)::{lambda(BootStats *)#1},std::allocator<BootStats>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI5StatsE15make_shared_ptrI9BootStatsEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI5StatsE15make_shared_ptrI9BootStatsEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI5StatsE15make_shared_ptrI9BootStatsEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI5StatsE15make_shared_ptrI9BootStatsEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

uint64_t std::shared_ptr<BootStats> ctu::SharedSynchronizable<Stats>::make_shared_ptr<BootStats>(BootStats*)::{lambda(BootStats*)#1}::operator() const(BootStats*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t ctu::cf::update<char const*,long>(__CFDictionary *a1, const __CFString **a2, const void *a3, const __CFAllocator *a4, const __CFAllocator *a5)
{
  int valuePtr = 0;
  ctu::cf::convert_copy((ctu::cf *)&valuePtr, a2, (const char *)0x8000100, (uint64_t)a4, a5);
  xpc_object_t v8 = valuePtr;
  int valuePtr = a3;
  CFNumberRef v9 = CFNumberCreate(a4, kCFNumberLongType, &valuePtr);
  CFNumberRef v10 = v9;
  if (v8) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  uint64_t v12 = !v11;
  if (v11)
  {
    if (!v9) {
      goto LABEL_11;
    }
  }
  else
  {
    CFDictionarySetValue(a1, v8, v9);
  }
  CFRelease(v10);
LABEL_11:
  if (v8) {
    CFRelease(v8);
  }
  return v12;
}

void sub_1C5A6DC24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  unint64_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1C5A6DC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t TraceFilter::determineFilterAction(std::string *a1)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  std::string::__assign_external(a1, (const std::string::value_type *)*MEMORY[0x1E4F4C820]);
  if (TelephonyUtilIsInternalBuild())
  {
    unsigned int v69 = -1431655766;
    uint64_t v2 = (const void *)*MEMORY[0x1E4F4C6C8];
    size_t v3 = strlen((const char *)*MEMORY[0x1E4F4C6C8]);
    if (v3 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v4 = v3;
    if (v3 >= 0x17)
    {
      uint64_t v7 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17) {
        uint64_t v7 = v3 | 7;
      }
      uint64_t v8 = v7 + 1;
      p_dst = (long long *)operator new(v7 + 1);
      *((void *)&__dst + 1) = v4;
      int64_t v74 = v8 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v74) = v3;
      p_dst = &__dst;
      if (!v3)
      {
LABEL_11:
        *((unsigned char *)p_dst + v4) = 0;
        memset(&__p, 0, 24);
        if (prop::logfilter::get((char *)&__dst, (uint64_t)&__p))
        {
          int v9 = util::convert<int>((const std::string *)&__p, &v69, 0);
          if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0) {
            goto LABEL_16;
          }
        }
        else
        {
          int v9 = 0;
          if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0) {
            goto LABEL_16;
          }
        }
        operator delete(*(void **)&__p.st_dev);
LABEL_16:
        if (SHIBYTE(v74) < 0)
        {
          operator delete((void *)__dst);
          if (v9)
          {
LABEL_18:
            __darwin_ino64_t v10 = v69;
            v72.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
            v72.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAALL;
            v72.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAA00;
            BOOL v11 = (const void *)*MEMORY[0x1E4F4F928];
            size_t v12 = strlen((const char *)*MEMORY[0x1E4F4F928]);
            if (v12 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            size_t v13 = v12;
            if (v12 >= 0x17)
            {
              uint64_t v25 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v12 | 7) != 0x17) {
                uint64_t v25 = v12 | 7;
              }
              uint64_t v26 = v25 + 1;
              xpc_object_t v14 = (long long *)operator new(v25 + 1);
              *((void *)&__dst + 1) = v13;
              int64_t v74 = v26 | 0x8000000000000000;
              *(void *)&long long __dst = v14;
            }
            else
            {
              HIBYTE(v74) = v12;
              xpc_object_t v14 = &__dst;
              if (!v12)
              {
                LOBYTE(__dst) = 0;
                int v15 = SHIBYTE(v74);
                if ((SHIBYTE(v74) & 0x80000000) == 0) {
                  goto LABEL_22;
                }
                goto LABEL_40;
              }
            }
            memmove(v14, v11, v13);
            *((unsigned char *)v14 + v13) = 0;
            int v15 = SHIBYTE(v74);
            if ((SHIBYTE(v74) & 0x80000000) == 0)
            {
LABEL_22:
              if (v15)
              {
                memset(&__p, 0, 64);
                int v16 = statvfs((const char *)&__dst, (statvfs *)&__p);
                __darwin_ino64_t st_ino = __p.st_ino;
                uint64_t st_rdev = __p.st_rdev;
                if ((v15 & 0x80000000) == 0) {
                  goto LABEL_25;
                }
                goto LABEL_24;
              }
              goto LABEL_44;
            }
LABEL_40:
            if (*((void *)&__dst + 1))
            {
              memset(&__p, 0, 64);
              int v16 = statvfs((const char *)__dst, (statvfs *)&__p);
              __darwin_ino64_t st_ino = __p.st_ino;
              uint64_t st_rdev = __p.st_rdev;
              if ((v15 & 0x80000000) == 0)
              {
LABEL_25:
                if (!v16)
                {
                  __darwin_ino64_t v19 = (st_ino * st_rdev) >> 20;
                  if ((v10 & 0x80000000) == 0 && v19 <= v10) {
                    std::string::__assign_external(&v72, (const std::string::value_type *)*MEMORY[0x1E4F4C818]);
                  }
                  GetABMLogServer(buf);
                  xpc_object_t v20 = *((void *)GetGlobalLogger(buf) + 4);
                  CFAllocatorRef v21 = *(std::__shared_weak_count **)&buf[8];
                  if (*(void *)&buf[8]
                    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                    std::__shared_weak_count::__release_weak(v21);
                  }
                  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
                  {
                    __p.st_dev = 136315394;
                    *(void *)&__p.st_mode = "trace.filter";
                    WORD2(__p.st_ino) = 2048;
                    *(__darwin_ino64_t *)((char *)&__p.st_ino + 6) = v19;
                    _os_log_impl(&dword_1C59C6000, v20, OS_LOG_TYPE_DEFAULT, "#I %s: Free disk space = %lu MB", (uint8_t *)&__p, 0x16u);
                  }
                }
                goto LABEL_44;
              }
LABEL_24:
              operator delete((void *)__dst);
              goto LABEL_25;
            }
            operator delete((void *)__dst);
LABEL_44:
            std::string::size_type size = v72.__r_.__value_.__l.__size_;
            CFAllocatorRef v22 = (void *)v72.__r_.__value_.__r.__words[0];
            uint64_t v24 = v72.__r_.__value_.__r.__words[2];
LABEL_45:
            int v68 = -1431655766;
            uint64_t v27 = (const void *)*MEMORY[0x1E4F4C950];
            size_t v28 = strlen((const char *)*MEMORY[0x1E4F4C950]);
            if (v28 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            size_t v29 = v28;
            if (v28 >= 0x17)
            {
              uint64_t v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v28 | 7) != 0x17) {
                uint64_t v31 = v28 | 7;
              }
              uint64_t v32 = v31 + 1;
              int v30 = (long long *)operator new(v31 + 1);
              *((void *)&__dst + 1) = v29;
              int64_t v74 = v32 | 0x8000000000000000;
              *(void *)&long long __dst = v30;
            }
            else
            {
              HIBYTE(v74) = v28;
              int v30 = &__dst;
              if (!v28)
              {
LABEL_53:
                *((unsigned char *)v30 + v29) = 0;
                memset(&__p, 0, 24);
                if (prop::logfilter::get((char *)&__dst, (uint64_t)&__p))
                {
                  uint64_t v6 = util::convert<int>((const std::string *)&__p, &v68, 0);
                  if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0) {
                    goto LABEL_58;
                  }
                }
                else
                {
                  uint64_t v6 = 0;
                  if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0) {
                    goto LABEL_58;
                  }
                }
                operator delete(*(void **)&__p.st_dev);
LABEL_58:
                if (SHIBYTE(v74) < 0)
                {
                  operator delete((void *)__dst);
                  if (v6)
                  {
LABEL_60:
                    int v33 = v68;
                    memset(&v67, 0, sizeof(v67));
                    if (v68 < 0)
                    {
                      unsigned __int8 v44 = 0;
                      std::string::size_type v43 = 0;
                      int v42 = 0;
                      unint64_t v46 = HIBYTE(v24);
                      if (v24 < 0) {
                        unint64_t v46 = size;
                      }
                      if (v46) {
                        goto LABEL_139;
                      }
                      goto LABEL_136;
                    }
                    long long __dst = 0uLL;
                    int64_t v74 = 0;
                    pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
                    uint64_t v34 = (os_unfair_lock_s *)off_1EBBDCA58;
                    if (!off_1EBBDCA58)
                    {
                      SharedData::create_default_global(&__p);
                      long long v35 = *(_OWORD *)&__p.st_dev;
                      *(void *)&__p.st_dev = 0;
                      __p.__darwin_ino64_t st_ino = 0;
                      uint64_t v36 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
                      off_1EBBDCA58 = v35;
                      if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                        std::__shared_weak_count::__release_weak(v36);
                      }
                      uint64_t v37 = (std::__shared_weak_count *)__p.st_ino;
                      if (__p.st_ino
                        && !atomic_fetch_add((atomic_ullong *volatile)(__p.st_ino + 8), 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                        std::__shared_weak_count::__release_weak(v37);
                      }
                      uint64_t v34 = (os_unfair_lock_s *)off_1EBBDCA58;
                    }
                    *(void *)long long buf = v34;
                    *(void *)&uint8_t buf[8] = *(&off_1EBBDCA58 + 1);
                    if (*(&off_1EBBDCA58 + 1)) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA58 + 1) + 8), 1uLL, memory_order_relaxed);
                    }
                    pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
                    int64_t v38 = (const void *)*MEMORY[0x1E4F4F950];
                    size_t v39 = strlen((const char *)*MEMORY[0x1E4F4F950]);
                    if (v39 > 0x7FFFFFFFFFFFFFF7) {
                      std::string::__throw_length_error[abi:ne180100]();
                    }
                    std::string::size_type v40 = v39;
                    if (v39 >= 0x17)
                    {
                      unint64_t v65 = v22;
                      uint64_t v47 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v39 | 7) != 0x17) {
                        uint64_t v47 = v39 | 7;
                      }
                      uint64_t v48 = v47 + 1;
                      unint64_t v41 = operator new(v47 + 1);
                      v72.__r_.__value_.__l.__size_ = v40;
                      v72.__r_.__value_.__r.__words[2] = v48 | 0x8000000000000000;
                      v72.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
                      CFAllocatorRef v22 = v65;
                    }
                    else
                    {
                      *((unsigned char *)&v72.__r_.__value_.__s + 23) = v39;
                      unint64_t v41 = &v72;
                      if (!v39)
                      {
LABEL_88:
                        v41[v40] = 0;
                        *(void *)&__p.st_dev = &v72;
                        __p.__darwin_ino64_t st_ino = (__darwin_ino64_t)&__dst;
                        *(void *)&__p.st_uid = v34;
                        ctu::SharedLockable<SharedData>::execute_sync<BOOL SharedData::getPreference<std::string>(std::string const&,std::string &)::{lambda(void)#1}>(v34 + 6, (uint64_t)&__p);
                        if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v72.__r_.__value_.__l.__data_);
                        }
                        long long v49 = *(std::__shared_weak_count **)&buf[8];
                        if (*(void *)&buf[8]
                          && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                          std::__shared_weak_count::__release_weak(v49);
                        }
                        v50.tv_sec = 0xAAAAAAAAAAAAAAAALL;
                        v50.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
                        *(timespec *)&__p.st_blkstd::string::size_type size = v50;
                        *(timespec *)__p.st_qspare = v50;
                        __p.st_birthtimespec = v50;
                        *(timespec *)&__p.st_std::string::size_type size = v50;
                        __p.st_mtimespec = v50;
                        __p.st_ctimespec = v50;
                        *(timespec *)&__p.st_uid = v50;
                        __p.st_atimespec = v50;
                        *(timespec *)&__p.st_dev = v50;
                        if (v74 >= 0) {
                          uint64_t v51 = (const char *)&__dst;
                        }
                        else {
                          uint64_t v51 = (const char *)__dst;
                        }
                        if (stat(v51, &__p))
                        {
                          int v52 = -1;
                          goto LABEL_123;
                        }
                        if (SHIBYTE(v74) < 0)
                        {
                          std::string::__init_copy_ctor_external((std::string *)&__p, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
                        }
                        else
                        {
                          *(_OWORD *)&__p.st_dev = __dst;
                          *(void *)&__p.st_uid = v74;
                        }
                        uint64_t v53 = (const void *)*MEMORY[0x1E4F4F918];
                        size_t v54 = strlen((const char *)*MEMORY[0x1E4F4F918]);
                        if (v54 > 0x7FFFFFFFFFFFFFF7) {
                          std::string::__throw_length_error[abi:ne180100]();
                        }
                        std::string::size_type v55 = v54;
                        if (v54 >= 0x17)
                        {
                          long long v66 = v22;
                          uint64_t v57 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v54 | 7) != 0x17) {
                            uint64_t v57 = v54 | 7;
                          }
                          uint64_t v58 = v57 + 1;
                          uint64_t v56 = operator new(v57 + 1);
                          v72.__r_.__value_.__l.__size_ = v55;
                          v72.__r_.__value_.__r.__words[2] = v58 | 0x8000000000000000;
                          v72.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
                          CFAllocatorRef v22 = v66;
                        }
                        else
                        {
                          *((unsigned char *)&v72.__r_.__value_.__s + 23) = v54;
                          uint64_t v56 = &v72;
                          if (!v54)
                          {
LABEL_109:
                            v56[v55] = 0;
                            unint64_t NumberOfLogDumps = util::getNumberOfLogDumps((uint64_t)&__p, (const void **)&v72.__r_.__value_.__l.__data_);
                            if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
                            {
                              operator delete(v72.__r_.__value_.__l.__data_);
                              if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0)
                              {
LABEL_111:
                                if (NumberOfLogDumps >> 31) {
                                  int v52 = -1;
                                }
                                else {
                                  int v52 = NumberOfLogDumps;
                                }
                                if (v52 == -1) {
                                  goto LABEL_123;
                                }
LABEL_121:
                                if (v52 >= v33)
                                {
                                  std::string::__assign_external(&v67, (const std::string::value_type *)*MEMORY[0x1E4F4C818]);
                                  int v52 = NumberOfLogDumps;
                                }
LABEL_123:
                                GetABMLogServer(&v70);
                                uint64_t v60 = *((void *)GetGlobalLogger(&v70) + 4);
                                char v61 = v71;
                                if (v71 && !atomic_fetch_add(&v71->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                {
                                  ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                                  std::__shared_weak_count::__release_weak(v61);
                                }
                                if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
                                {
                                  *(_DWORD *)long long buf = 136315650;
                                  *(void *)&uint8_t buf[4] = "trace.filter";
                                  *(_WORD *)&buf[12] = 1024;
                                  *(_DWORD *)&buf[14] = v52;
                                  __int16 v76 = 1024;
                                  int v77 = v33;
                                  _os_log_impl(&dword_1C59C6000, v60, OS_LOG_TYPE_DEFAULT, "#I %s: log dump count = %d, max log limit = %d", buf, 0x18u);
                                }
                                if (SHIBYTE(v74) < 0)
                                {
                                  operator delete((void *)__dst);
                                  std::string::size_type v43 = v67.__r_.__value_.__l.__size_;
                                  int v42 = (void *)v67.__r_.__value_.__r.__words[0];
                                  unsigned __int8 v44 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
                                  unint64_t v63 = HIBYTE(v24);
                                  if (v24 < 0) {
                                    unint64_t v63 = size;
                                  }
                                  if (v63) {
                                    goto LABEL_139;
                                  }
                                }
                                else
                                {
                                  std::string::size_type v43 = v67.__r_.__value_.__l.__size_;
                                  int v42 = (void *)v67.__r_.__value_.__r.__words[0];
                                  unsigned __int8 v44 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
                                  unint64_t v62 = HIBYTE(v24);
                                  if (v24 < 0) {
                                    unint64_t v62 = size;
                                  }
                                  if (v62) {
                                    goto LABEL_139;
                                  }
                                }
LABEL_136:
                                if ((v44 & 0x80u) == 0) {
                                  std::string::size_type v43 = v44;
                                }
                                if (!v43)
                                {
LABEL_140:
                                  if ((v44 & 0x80) != 0)
                                  {
                                    operator delete(v42);
                                    if ((v24 & 0x8000000000000000) == 0) {
                                      return v6;
                                    }
                                  }
                                  else if ((v24 & 0x8000000000000000) == 0)
                                  {
                                    return v6;
                                  }
                                  operator delete(v22);
                                  return v6;
                                }
LABEL_139:
                                std::string::__assign_external(a1, (const std::string::value_type *)*MEMORY[0x1E4F4C818]);
                                goto LABEL_140;
                              }
                            }
                            else if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0)
                            {
                              goto LABEL_111;
                            }
                            operator delete(*(void **)&__p.st_dev);
                            if (NumberOfLogDumps >> 31) {
                              int v52 = -1;
                            }
                            else {
                              int v52 = NumberOfLogDumps;
                            }
                            if (v52 == -1) {
                              goto LABEL_123;
                            }
                            goto LABEL_121;
                          }
                        }
                        memmove(v56, v53, v55);
                        goto LABEL_109;
                      }
                    }
                    memmove(v41, v38, v40);
                    goto LABEL_88;
                  }
                }
                else if (v6)
                {
                  goto LABEL_60;
                }
                int v42 = 0;
                std::string::size_type v43 = 0;
                unsigned __int8 v44 = 0;
                unint64_t v45 = HIBYTE(v24);
                if (v24 < 0) {
                  unint64_t v45 = size;
                }
                if (v45) {
                  goto LABEL_139;
                }
                goto LABEL_136;
              }
            }
            memmove(v30, v27, v29);
            goto LABEL_53;
          }
        }
        else if (v9)
        {
          goto LABEL_18;
        }
        CFAllocatorRef v22 = 0;
        std::string::size_type size = 0;
        uint64_t v24 = 0;
        goto LABEL_45;
      }
    }
    memmove(p_dst, v2, v4);
    goto LABEL_11;
  }
  return 1;
}

void sub_1C5A6E648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  if (v42 < 0) {
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5A6E788(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    JUMPOUT(0x1C5A6E77CLL);
  }
  JUMPOUT(0x1C5A6E780);
}

void LegacyAccessoryManager::create(LegacyAccessoryManager *this@<X0>, const char *a2@<X1>, queue a3@<0:X2>, LegacyAccessoryManager **a4@<X8>)
{
  uint64_t v7 = (LegacyAccessoryManager *)operator new(0x78uLL);
  uint64_t v8 = *(NSObject **)a2;
  CFAllocatorRef v18 = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  v9.fObj.fObj = (dispatch_object_s *)&v18;
  LegacyAccessoryManager::LegacyAccessoryManager(v7, (const char *)this, v9);
  __darwin_ino64_t v19 = v7;
  *(void *)long long buf = v7;
  __darwin_ino64_t v10 = (std::__shared_weak_count *)operator new(0x20uLL);
  v10->__shared_owners_ = 0;
  p_shared_owners = &v10->__shared_owners_;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2107170;
  v10->__shared_weak_owners_ = 0;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  xpc_object_t v20 = v10;
  *(void *)long long buf = 0;
  size_t v12 = (std::__shared_weak_count *)*((void *)v7 + 2);
  if (!v12)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v7 + 1) = v7;
    *((void *)v7 + 2) = v10;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (v12->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v7 + 1) = v7;
    *((void *)v7 + 2) = v10;
    std::__shared_weak_count::__release_weak(v12);
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_8:
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
LABEL_9:
  if (*(void *)buf)
  {
    LegacyAccessoryManager::~LegacyAccessoryManager(*(LegacyAccessoryManager **)buf);
    operator delete(v13);
  }
  if (v8) {
    dispatch_release(v8);
  }
  xpc_object_t v14 = v19;
  if (v19 && (LegacyAccessoryManager::init(v19) & 1) != 0)
  {
    int v15 = (LegacyAccessoryManager *)v20;
    *a4 = v14;
    a4[1] = v15;
    return;
  }
  int v16 = GetOsLogContext()[1];
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C59C6000, v16, OS_LOG_TYPE_ERROR, "Failed to create OBD Manager!", buf, 2u);
    *a4 = 0;
    a4[1] = 0;
    xpc_object_t v17 = v20;
    if (!v20) {
      return;
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    xpc_object_t v17 = v20;
    if (!v20) {
      return;
    }
  }
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
}

void sub_1C5A6EA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C5A6EA50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::unique_ptr<LegacyAccessoryManager>::~unique_ptr[abi:ne180100]((LegacyAccessoryManager **)va);
  if (v5) {
    dispatch_release(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t LegacyAccessoryManager::init(LegacyAccessoryManager *this)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 9) || *((void *)this + 7))
  {
    uint64_t v3 = *((void *)this + 1);
    uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
    if (v2) {
      atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    LegacyAccessoryManager::generateAccessoryMapping((uint64_t *)this);
    if (*((void *)this + 9))
    {
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1174405120;
      aBlock[2] = ___ZN22LegacyAccessoryManager4initEv_block_invoke;
      aBlock[3] = &__block_descriptor_tmp_25;
      aBlock[4] = this;
      void aBlock[5] = v3;
      int v16 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      xpc_object_t v17 = _Block_copy(aBlock);
      ctu::iokit::IOHIDController::registerKeyboardCallback();
      if (v17) {
        _Block_release(v17);
      }
      ctu::iokit::IOHIDController::start(*((ctu::iokit::IOHIDController **)this + 9));
      if (v16) {
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    uint64_t v4 = *((void *)this + 7);
    if (!v4) {
      goto LABEL_32;
    }
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 1174405120;
    v13[2] = ___ZN22LegacyAccessoryManager4initEv_block_invoke_5;
    v13[3] = &__block_descriptor_tmp_9_2;
    v13[4] = this;
    void v13[5] = v3;
    xpc_object_t v14 = v2;
    if (v2) {
      atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    long long v5 = _Block_copy(v13);
    uint64_t v6 = *((void *)this + 3);
    if (v6) {
      dispatch_retain(*((dispatch_object_t *)this + 3));
    }
    if (v5)
    {
      uint64_t v7 = _Block_copy(v5);
      uint64_t v8 = *(const void **)(v4 + 88);
      *(void *)(v4 + 88) = v7;
      if (!v8) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v8 = *(const void **)(v4 + 88);
      *(void *)(v4 + 88) = 0;
      if (!v8)
      {
LABEL_22:
        if (v6) {
          dispatch_retain(v6);
        }
        queue v9 = *(NSObject **)(v4 + 96);
        *(void *)(v4 + 96) = v6;
        if (v9) {
          dispatch_release(v9);
        }
        if (v6) {
          dispatch_release(v6);
        }
        if (v5) {
          _Block_release(v5);
        }
        IOKitEventNotifier::start(*((IOKitEventNotifier **)this + 7));
        if (v14) {
          std::__shared_weak_count::__release_weak(v14);
        }
LABEL_32:
        if (v2) {
          std::__shared_weak_count::__release_weak(v2);
        }
        return 1;
      }
    }
    _Block_release(v8);
    goto LABEL_22;
  }
  BOOL v11 = *(NSObject **)this;
  BOOL v12 = os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v12)
  {
    *(_DWORD *)long long buf = 136315138;
    __darwin_ino64_t v19 = "LegacyAccessoryManager";
    _os_log_impl(&dword_1C59C6000, v11, OS_LOG_TYPE_DEFAULT, "#I No IOKit controllers created for the %s", buf, 0xCu);
    return 0;
  }
  return result;
}

void sub_1C5A6ED24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void LegacyAccessoryManager::LegacyAccessoryManager(LegacyAccessoryManager *this, const char *__s, queue a3)
{
  size_t v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v6;
  p_dst = &__dst;
  if (v6) {
LABEL_8:
  }
    memcpy(p_dst, __s, v7);
  p_dst->__r_.__value_.__s.__data_[v7] = 0;
  BOOL v11 = std::string::append(&__dst, ".", 1uLL);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  size_t v13 = std::string::append(&v28, "LegacyAccessoryManager", 0x16uLL);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  int64_t v30 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)stat __p = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (v30 >= 0) {
    int v15 = __p;
  }
  else {
    int v15 = (void **)__p[0];
  }
  ctu::OsLogLogger::OsLogLogger(this, "com.apple.telephony.abm", (const char *)v15);
  if (SHIBYTE(v30) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_14:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_15;
      }
      goto LABEL_40;
    }
  }
  else if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_14;
  }
  operator delete(v28.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_15:
    *((void *)this + 1) = 0;
    *((void *)this + 2) = 0;
    int v16 = *(NSObject **)a3.fObj.fObj;
    *((void *)this + 3) = *(void *)a3.fObj.fObj;
    if (!v16) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_40:
  operator delete(__dst.__r_.__value_.__l.__data_);
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  int v16 = *(NSObject **)a3.fObj.fObj;
  *((void *)this + 3) = *(void *)a3.fObj.fObj;
  if (v16) {
LABEL_16:
  }
    dispatch_retain(v16);
LABEL_17:
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  GetABMLogServer(&v25);
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  std::string::size_type v17 = off_1EBBDC878;
  if (!off_1EBBDC878)
  {
    ABMServer::create_default_global(__p);
    long long v18 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    __darwin_ino64_t v19 = (std::__shared_weak_count *)*(&off_1EBBDC878 + 1);
    off_1EBBDC878 = v18;
    if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    uint64_t v20 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    std::string::size_type v17 = off_1EBBDC878;
  }
  CFAllocatorRef v21 = (std::__shared_weak_count *)*(&off_1EBBDC878 + 1);
  v28.__r_.__value_.__r.__words[0] = v17;
  v28.__r_.__value_.__l.__size_ = *(&off_1EBBDC878 + 1);
  if (*(&off_1EBBDC878 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDC878 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  __p[0] = *(void **)(*(void *)v17 + 208);
  *((void *)this + 7) = 0xAAAAAAAAAAAAAAAALL;
  *((void *)this + 8) = 0xAAAAAAAAAAAAAAAALL;
  CFAllocatorRef v22 = operator new(0xD8uLL);
  v22[1] = 0;
  void v22[2] = 0;
  *CFAllocatorRef v22 = &unk_1F2104A58;
  std::__construct_at[abi:ne180100]<IOKitEventNotifier,std::shared_ptr<ctu::LogServer> &,__CFRunLoop *&,IOKitEventNotifier*>((uint64_t)(v22 + 3), &v25, (uint64_t *)__p);
  *((void *)this + 7) = v22 + 3;
  *((void *)this + 8) = v22;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  CFAllocatorRef v23 = v26;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  uint64_t v24 = *(NSObject **)a3.fObj.fObj;
  if (*(void *)a3.fObj.fObj) {
    dispatch_retain(*(dispatch_object_t *)a3.fObj.fObj);
  }
  ctu::iokit::IOHIDController::create();
  if (v24) {
    dispatch_release(v24);
  }
  *((unsigned char *)this + 92) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 12) = (char *)this + 104;
}

void sub_1C5A6F184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, dispatch_object_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::vector<dispatch::callback<void({block_pointer})>>::~vector[abi:ne180100](v18);
  uint64_t v20 = *(NSObject **)(v17 + 24);
  if (v20) {
    dispatch_release(v20);
  }
  CFAllocatorRef v21 = *(std::__shared_weak_count **)(v17 + 16);
  if (v21) {
    std::__shared_weak_count::__release_weak(v21);
  }
  MEMORY[0x1C8794100](v17);
  _Unwind_Resume(a1);
}

void sub_1C5A6F230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
  {
    operator delete(a27);
    if ((a25 & 0x80000000) == 0)
    {
LABEL_3:
      if (a19 < 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a25 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a20);
  if (a19 < 0)
  {
LABEL_4:
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
LABEL_7:
  _Unwind_Resume(exception_object);
}

void **std::vector<dispatch::callback<void({block_pointer})(unsigned int)>>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        long long v5 = *((void *)v3 - 1);
        if (v5) {
          dispatch_release(v5);
        }
        size_t v6 = (const void *)*((void *)v3 - 2);
        if (v6) {
          _Block_release(v6);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void LegacyAccessoryManager::~LegacyAccessoryManager(LegacyAccessoryManager *this)
{
  uint64_t v2 = *((void *)this + 4);
  for (uint64_t i = *((void *)this + 5); i != v2; i -= 16)
  {
    uint64_t v4 = *(NSObject **)(i - 8);
    if (v4) {
      dispatch_release(v4);
    }
    long long v5 = *(const void **)(i - 16);
    if (v5) {
      _Block_release(v5);
    }
  }
  *((void *)this + 5) = v2;
  size_t v6 = (ctu::iokit::IOHIDController *)*((void *)this + 9);
  if (v6) {
    ctu::iokit::IOHIDController::stop(v6);
  }
  std::string::size_type v7 = (IOKitEventNotifier *)*((void *)this + 7);
  if (v7) {
    IOKitEventNotifier::shutdown(v7);
  }
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(*((void **)this + 13));
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    uint64_t v10 = (char *)*((void *)this + 4);
    if (!v10) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v10 = (char *)*((void *)this + 4);
    if (!v10) {
      goto LABEL_27;
    }
  }
  BOOL v11 = (char *)*((void *)this + 5);
  long long v12 = v10;
  if (v11 != v10)
  {
    do
    {
      size_t v13 = *((void *)v11 - 1);
      if (v13) {
        dispatch_release(v13);
      }
      long long v14 = (const void *)*((void *)v11 - 2);
      if (v14) {
        _Block_release(v14);
      }
      v11 -= 16;
    }
    while (v11 != v10);
    long long v12 = (char *)*((void *)this + 4);
  }
  *((void *)this + 5) = v10;
  operator delete(v12);
LABEL_27:
  int v15 = *((void *)this + 3);
  if (v15) {
    dispatch_release(v15);
  }
  int v16 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }

  JUMPOUT(0x1C8794100);
}

uint64_t *LegacyAccessoryManager::generateAccessoryMapping(uint64_t *this)
{
  uint64_t v1 = (uint64_t)this;
  uint64_t v3 = (uint64_t **)(this + 13);
  uint64_t v2 = (unsigned int *)this[13];
  uint64_t v4 = (uint64_t **)(this + 13);
  long long v5 = this + 13;
  if (v2)
  {
    size_t v6 = (unsigned int *)this[13];
    while (1)
    {
      while (1)
      {
        long long v5 = v6;
        unsigned int v7 = v6[7];
        if (v7 < 3) {
          break;
        }
        size_t v6 = (unsigned int *)*v5;
        uint64_t v4 = (uint64_t **)v5;
        if (!*v5) {
          goto LABEL_8;
        }
      }
      if (v7 == 2) {
        break;
      }
      size_t v6 = (unsigned int *)v5[1];
      if (!v6)
      {
        uint64_t v4 = (uint64_t **)(v5 + 1);
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    uint64_t v8 = v5;
    long long v5 = operator new(0x28uLL);
    *(void *)((char *)v5 + 28) = 2;
    *long long v5 = 0;
    v5[1] = 0;
    _DWORD v5[2] = v8;
    NSObject *v4 = v5;
    uint64_t v9 = **(void **)(v1 + 96);
    uint64_t v10 = v5;
    if (v9)
    {
      *(void *)(v1 + 96) = v9;
      uint64_t v10 = *v4;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v10);
    uint64_t v2 = *(unsigned int **)(v1 + 104);
    ++*(void *)(v1 + 112);
  }
  *((_DWORD *)v5 + 8) = 16;
  BOOL v11 = v3;
  long long v12 = v3;
  if (v2)
  {
    while (1)
    {
      while (1)
      {
        long long v12 = v2;
        unsigned int v13 = v2[7];
        if (v13 < 5) {
          break;
        }
        uint64_t v2 = (unsigned int *)*v12;
        BOOL v11 = (uint64_t **)v12;
        if (!*v12) {
          goto LABEL_18;
        }
      }
      if (v13 == 4) {
        break;
      }
      uint64_t v2 = (unsigned int *)v12[1];
      if (!v2)
      {
        BOOL v11 = (uint64_t **)(v12 + 1);
        goto LABEL_18;
      }
    }
  }
  else
  {
LABEL_18:
    long long v14 = v12;
    long long v12 = operator new(0x28uLL);
    *(void *)((char *)v12 + 28) = 4;
    void *v12 = 0;
    v12[1] = 0;
    v12[2] = v14;
    char *v11 = v12;
    uint64_t v15 = **(void **)(v1 + 96);
    int v16 = v12;
    if (v15)
    {
      *(void *)(v1 + 96) = v15;
      int v16 = *v11;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v16);
    ++*(void *)(v1 + 112);
  }
  *((_DWORD *)v12 + 8) = 32;
  uint64_t v17 = (unsigned int *)*v3;
  long long v18 = v3;
  __darwin_ino64_t v19 = v3;
  if (*v3)
  {
    uint64_t v20 = (unsigned int *)*v3;
    while (1)
    {
      while (1)
      {
        __darwin_ino64_t v19 = v20;
        unsigned int v21 = v20[7];
        if (v21 < 9) {
          break;
        }
        uint64_t v20 = (unsigned int *)*v19;
        long long v18 = (uint64_t **)v19;
        if (!*v19) {
          goto LABEL_28;
        }
      }
      if (v21 == 8) {
        break;
      }
      uint64_t v20 = (unsigned int *)v19[1];
      if (!v20)
      {
        long long v18 = (uint64_t **)(v19 + 1);
        goto LABEL_28;
      }
    }
  }
  else
  {
LABEL_28:
    CFAllocatorRef v22 = v19;
    __darwin_ino64_t v19 = operator new(0x28uLL);
    *(void *)((char *)v19 + 28) = 8;
    *__darwin_ino64_t v19 = 0;
    v19[1] = 0;
    v19[2] = v22;
    *long long v18 = v19;
    uint64_t v23 = **(void **)(v1 + 96);
    uint64_t v24 = v19;
    if (v23)
    {
      *(void *)(v1 + 96) = v23;
      uint64_t v24 = *v18;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v24);
    uint64_t v17 = *(unsigned int **)(v1 + 104);
    ++*(void *)(v1 + 112);
  }
  *((_DWORD *)v19 + 8) = 64;
  uint64_t v25 = v3;
  uint64_t v26 = v3;
  if (v17)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v26 = v17;
        unsigned int v27 = v17[7];
        if (v27 < 0x11) {
          break;
        }
        uint64_t v17 = (unsigned int *)*v26;
        uint64_t v25 = (uint64_t **)v26;
        if (!*v26) {
          goto LABEL_38;
        }
      }
      if (v27 == 16) {
        break;
      }
      uint64_t v17 = (unsigned int *)v26[1];
      if (!v17)
      {
        uint64_t v25 = (uint64_t **)(v26 + 1);
        goto LABEL_38;
      }
    }
  }
  else
  {
LABEL_38:
    std::string v28 = v26;
    uint64_t v26 = operator new(0x28uLL);
    *(void *)((char *)v26 + 28) = 16;
    *uint64_t v26 = 0;
    v26[1] = 0;
    void v26[2] = v28;
    *uint64_t v25 = v26;
    uint64_t v29 = **(void **)(v1 + 96);
    int64_t v30 = v26;
    if (v29)
    {
      *(void *)(v1 + 96) = v29;
      int64_t v30 = *v25;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v30);
    ++*(void *)(v1 + 112);
  }
  *((_DWORD *)v26 + 8) = 1024;
  uint64_t v31 = (unsigned int *)*v3;
  uint64_t v32 = v3;
  int v33 = v3;
  if (*v3)
  {
    uint64_t v34 = (unsigned int *)*v3;
    while (1)
    {
      while (1)
      {
        int v33 = v34;
        unsigned int v35 = v34[7];
        if (v35 < 0x21) {
          break;
        }
        uint64_t v34 = (unsigned int *)*v33;
        uint64_t v32 = (uint64_t **)v33;
        if (!*v33) {
          goto LABEL_48;
        }
      }
      if (v35 == 32) {
        break;
      }
      uint64_t v34 = (unsigned int *)v33[1];
      if (!v34)
      {
        uint64_t v32 = (uint64_t **)(v33 + 1);
        goto LABEL_48;
      }
    }
  }
  else
  {
LABEL_48:
    uint64_t v36 = v33;
    int v33 = operator new(0x28uLL);
    *(void *)((char *)v33 + 28) = 32;
    *int v33 = 0;
    v33[1] = 0;
    void v33[2] = v36;
    *uint64_t v32 = v33;
    uint64_t v37 = **(void **)(v1 + 96);
    int64_t v38 = v33;
    if (v37)
    {
      *(void *)(v1 + 96) = v37;
      int64_t v38 = *v32;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v38);
    uint64_t v31 = *(unsigned int **)(v1 + 104);
    ++*(void *)(v1 + 112);
  }
  *((_DWORD *)v33 + 8) = 256;
  size_t v39 = v3;
  std::string::size_type v40 = v3;
  if (v31)
  {
    while (1)
    {
      while (1)
      {
        std::string::size_type v40 = v31;
        unsigned int v41 = v31[7];
        if (v41 < 0x41) {
          break;
        }
        uint64_t v31 = (unsigned int *)*v40;
        size_t v39 = (uint64_t **)v40;
        if (!*v40) {
          goto LABEL_58;
        }
      }
      if (v41 == 64) {
        break;
      }
      uint64_t v31 = (unsigned int *)v40[1];
      if (!v31)
      {
        size_t v39 = (uint64_t **)(v40 + 1);
        goto LABEL_58;
      }
    }
  }
  else
  {
LABEL_58:
    uint64_t v42 = v40;
    std::string::size_type v40 = operator new(0x28uLL);
    *(void *)((char *)v40 + 28) = 64;
    void *v40 = 0;
    v40[1] = 0;
    v40[2] = v42;
    *size_t v39 = v40;
    uint64_t v43 = **(void **)(v1 + 96);
    unsigned __int8 v44 = v40;
    if (v43)
    {
      *(void *)(v1 + 96) = v43;
      unsigned __int8 v44 = *v39;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v44);
    ++*(void *)(v1 + 112);
  }
  *((_DWORD *)v40 + 8) = 2048;
  unint64_t v45 = (unsigned int *)*v3;
  unint64_t v46 = v3;
  uint64_t v47 = v3;
  if (*v3)
  {
    uint64_t v48 = (unsigned int *)*v3;
    while (1)
    {
      while (1)
      {
        uint64_t v47 = v48;
        unsigned int v49 = v48[7];
        if (v49 < 0x81) {
          break;
        }
        uint64_t v48 = (unsigned int *)*v47;
        unint64_t v46 = (uint64_t **)v47;
        if (!*v47) {
          goto LABEL_68;
        }
      }
      if (v49 == 128) {
        break;
      }
      uint64_t v48 = (unsigned int *)v47[1];
      if (!v48)
      {
        unint64_t v46 = (uint64_t **)(v47 + 1);
        goto LABEL_68;
      }
    }
  }
  else
  {
LABEL_68:
    timespec v50 = v47;
    uint64_t v47 = operator new(0x28uLL);
    *(void *)((char *)v47 + 28) = 128;
    *uint64_t v47 = 0;
    v47[1] = 0;
    v47[2] = v50;
    *unint64_t v46 = v47;
    uint64_t v51 = **(void **)(v1 + 96);
    int v52 = v47;
    if (v51)
    {
      *(void *)(v1 + 96) = v51;
      int v52 = *v46;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v52);
    unint64_t v45 = *(unsigned int **)(v1 + 104);
    ++*(void *)(v1 + 112);
  }
  *((_DWORD *)v47 + 8) = 4096;
  uint64_t v53 = v3;
  size_t v54 = v3;
  if (v45)
  {
    while (1)
    {
      while (1)
      {
        size_t v54 = v45;
        unsigned int v55 = v45[7];
        if (v55 < 0x101) {
          break;
        }
        unint64_t v45 = (unsigned int *)*v54;
        uint64_t v53 = (uint64_t **)v54;
        if (!*v54) {
          goto LABEL_78;
        }
      }
      if (v55 == 256) {
        break;
      }
      unint64_t v45 = (unsigned int *)v54[1];
      if (!v45)
      {
        uint64_t v53 = (uint64_t **)(v54 + 1);
        goto LABEL_78;
      }
    }
  }
  else
  {
LABEL_78:
    uint64_t v56 = v54;
    size_t v54 = operator new(0x28uLL);
    *(void *)((char *)v54 + 28) = 256;
    *size_t v54 = 0;
    v54[1] = 0;
    v54[2] = v56;
    const void *v53 = v54;
    uint64_t v57 = **(void **)(v1 + 96);
    uint64_t v58 = v54;
    if (v57)
    {
      *(void *)(v1 + 96) = v57;
      uint64_t v58 = *v53;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v58);
    ++*(void *)(v1 + 112);
  }
  *((_DWORD *)v54 + 8) = 0x2000;
  xpc_object_t v59 = (unsigned int *)*v3;
  uint64_t v60 = v3;
  char v61 = v3;
  if (*v3)
  {
    unint64_t v62 = (unsigned int *)*v3;
    while (1)
    {
      while (1)
      {
        char v61 = v62;
        unsigned int v63 = v62[7];
        if (v63 < 0x201) {
          break;
        }
        unint64_t v62 = (unsigned int *)*v61;
        uint64_t v60 = (uint64_t **)v61;
        if (!*v61) {
          goto LABEL_88;
        }
      }
      if (v63 == 512) {
        break;
      }
      unint64_t v62 = (unsigned int *)v61[1];
      if (!v62)
      {
        uint64_t v60 = (uint64_t **)(v61 + 1);
        goto LABEL_88;
      }
    }
  }
  else
  {
LABEL_88:
    uint64_t v64 = v61;
    char v61 = operator new(0x28uLL);
    *(void *)((char *)v61 + 28) = 512;
    void *v61 = 0;
    v61[1] = 0;
    xpc_object_t v61[2] = v64;
    *uint64_t v60 = v61;
    uint64_t v65 = **(void **)(v1 + 96);
    long long v66 = v61;
    if (v65)
    {
      *(void *)(v1 + 96) = v65;
      long long v66 = *v60;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v66);
    xpc_object_t v59 = *(unsigned int **)(v1 + 104);
    ++*(void *)(v1 + 112);
  }
  *((_DWORD *)v61 + 8) = 0x4000;
  std::string v67 = v3;
  int v68 = v3;
  if (v59)
  {
    while (1)
    {
      while (1)
      {
        int v68 = v59;
        unsigned int v69 = v59[7];
        if (v69 < 0x401) {
          break;
        }
        xpc_object_t v59 = (unsigned int *)*v68;
        std::string v67 = (uint64_t **)v68;
        if (!*v68) {
          goto LABEL_98;
        }
      }
      if (v69 == 1024) {
        break;
      }
      xpc_object_t v59 = (unsigned int *)v68[1];
      if (!v59)
      {
        std::string v67 = (uint64_t **)(v68 + 1);
        goto LABEL_98;
      }
    }
  }
  else
  {
LABEL_98:
    uint64_t v70 = v68;
    int v68 = operator new(0x28uLL);
    *(void *)((char *)v68 + 28) = 1024;
    void *v68 = 0;
    v68[1] = 0;
    v68[2] = v70;
    *std::string v67 = v68;
    uint64_t v71 = **(void **)(v1 + 96);
    std::string v72 = v68;
    if (v71)
    {
      *(void *)(v1 + 96) = v71;
      std::string v72 = *v67;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v72);
    ++*(void *)(v1 + 112);
  }
  *((_DWORD *)v68 + 8) = 0x8000;
  size_t v73 = (unsigned int *)*v3;
  int64_t v74 = v3;
  uint64_t v75 = v3;
  if (*v3)
  {
    __int16 v76 = (unsigned int *)*v3;
    while (1)
    {
      while (1)
      {
        uint64_t v75 = v76;
        unsigned int v77 = v76[7];
        if (v77 < 0x801) {
          break;
        }
        __int16 v76 = (unsigned int *)*v75;
        int64_t v74 = (uint64_t **)v75;
        if (!*v75) {
          goto LABEL_108;
        }
      }
      if (v77 == 2048) {
        break;
      }
      __int16 v76 = (unsigned int *)v75[1];
      if (!v76)
      {
        int64_t v74 = (uint64_t **)(v75 + 1);
        goto LABEL_108;
      }
    }
  }
  else
  {
LABEL_108:
    uint64_t v78 = v75;
    uint64_t v75 = operator new(0x28uLL);
    *(void *)((char *)v75 + 28) = 2048;
    *uint64_t v75 = 0;
    v75[1] = 0;
    v75[2] = v78;
    *int64_t v74 = v75;
    uint64_t v79 = **(void **)(v1 + 96);
    int v80 = v75;
    if (v79)
    {
      *(void *)(v1 + 96) = v79;
      int v80 = *v74;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v80);
    size_t v73 = *(unsigned int **)(v1 + 104);
    ++*(void *)(v1 + 112);
  }
  *((_DWORD *)v75 + 8) = 0x10000;
  size_t v81 = v3;
  if (v73)
  {
    while (1)
    {
      while (1)
      {
        size_t v81 = v73;
        unsigned int v82 = v73[7];
        if (v82 <= 0x1000) {
          break;
        }
        size_t v73 = (unsigned int *)*v81;
        uint64_t v3 = (uint64_t **)v81;
        if (!*v81) {
          goto LABEL_118;
        }
      }
      if (v82 == 4096) {
        break;
      }
      size_t v73 = (unsigned int *)v81[1];
      if (!v73)
      {
        uint64_t v3 = (uint64_t **)(v81 + 1);
        goto LABEL_118;
      }
    }
  }
  else
  {
LABEL_118:
    char v83 = v81;
    size_t v81 = operator new(0x28uLL);
    *(void *)((char *)v81 + 28) = 4096;
    *size_t v81 = 0;
    v81[1] = 0;
    v81[2] = v83;
    char *v3 = v81;
    uint64_t v84 = **(void **)(v1 + 96);
    uint64_t v85 = v81;
    if (v84)
    {
      *(void *)(v1 + 96) = v84;
      uint64_t v85 = *v3;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v85);
    ++*(void *)(v1 + 112);
  }
  *((_DWORD *)v81 + 8) = 0x20000;
  return this;
}

void ___ZN22LegacyAccessoryManager4initEv_block_invoke(void *a1, int a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = a1[4];
  size_t v6 = std::__shared_weak_count::lock(v3);
  if (!v6) {
    return;
  }
  unsigned int v7 = v6;
  uint64_t v8 = a1[5];
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v8) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
    if (!v8) {
      return;
    }
  }
  if (*(unsigned __int8 *)(v5 + 92) == a2) {
    return;
  }
  uint64_t v9 = *(NSObject **)v5;
  if (os_log_type_enabled(*(os_log_t *)v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = "OPENED";
    if (a2) {
      uint64_t v10 = "CLOSED";
    }
    LODWORD(v30) = 136315138;
    *(void *)((char *)&v30 + 4) = v10;
    _os_log_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEFAULT, "#I Smart Keyboard Cover: %s", (uint8_t *)&v30, 0xCu);
  }
  long long v12 = (uint64_t **)(v5 + 104);
  BOOL v11 = *(uint64_t **)(v5 + 104);
  *(unsigned char *)(v5 + 92) = a2;
  unsigned int v13 = (uint64_t **)(v5 + 104);
  if (a2)
  {
    if (v11)
    {
      while (1)
      {
        while (1)
        {
          unsigned int v13 = (uint64_t **)v11;
          unsigned int v14 = *((_DWORD *)v11 + 7);
          if (v14 <= 0x1000) {
            break;
          }
          BOOL v11 = *v13;
          long long v12 = v13;
          if (!*v13) {
            goto LABEL_20;
          }
        }
        if (v14 == 4096) {
          break;
        }
        BOOL v11 = v13[1];
        if (!v11)
        {
          long long v12 = v13 + 1;
          goto LABEL_20;
        }
      }
      uint64_t v15 = (uint64_t *)v13;
    }
    else
    {
LABEL_20:
      uint64_t v15 = (uint64_t *)operator new(0x28uLL);
      *(uint64_t *)((char *)v15 + 28) = 4096;
      *uint64_t v15 = 0;
      v15[1] = 0;
      unint64_t v15[2] = (uint64_t)v13;
      void *v12 = v15;
      uint64_t v16 = **(void **)(v5 + 96);
      uint64_t v17 = v15;
      if (v16)
      {
        *(void *)(v5 + 96) = v16;
        uint64_t v17 = *v12;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v5 + 104), v17);
      ++*(void *)(v5 + 112);
    }
    *(_DWORD *)(v5 + 88) |= *((_DWORD *)v15 + 8);
    uint64_t v22 = *(void *)(v5 + 32);
    uint64_t v23 = *(void *)(v5 + 40);
    if (v22 != v23) {
      goto LABEL_40;
    }
    return;
  }
  if (v11)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v13 = (uint64_t **)v11;
        unsigned int v18 = *((_DWORD *)v11 + 7);
        if (v18 <= 0x1000) {
          break;
        }
        BOOL v11 = *v13;
        long long v12 = v13;
        if (!*v13) {
          goto LABEL_30;
        }
      }
      if (v18 == 4096) {
        break;
      }
      BOOL v11 = v13[1];
      if (!v11)
      {
        long long v12 = v13 + 1;
        goto LABEL_30;
      }
    }
    __darwin_ino64_t v19 = (uint64_t *)v13;
  }
  else
  {
LABEL_30:
    __darwin_ino64_t v19 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v19 + 28) = 4096;
    *__darwin_ino64_t v19 = 0;
    v19[1] = 0;
    v19[2] = (uint64_t)v13;
    void *v12 = v19;
    uint64_t v20 = **(void **)(v5 + 96);
    unsigned int v21 = v19;
    if (v20)
    {
      *(void *)(v5 + 96) = v20;
      unsigned int v21 = *v12;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v5 + 104), v21);
    ++*(void *)(v5 + 112);
  }
  *(_DWORD *)(v5 + 88) &= ~*((_DWORD *)v19 + 8);
  uint64_t v22 = *(void *)(v5 + 32);
  uint64_t v23 = *(void *)(v5 + 40);
  if (v22 != v23)
  {
LABEL_40:
    while (!*(void *)v22)
    {
      uint64_t v24 = 0;
      uint64_t v25 = *(NSObject **)(v22 + 8);
      if (v25) {
        goto LABEL_42;
      }
LABEL_43:
      int v26 = *(_DWORD *)(v5 + 88);
      if (!v24)
      {
        std::string v28 = 0;
        *(void *)&long long v30 = MEMORY[0x1E4F143A8];
        *((void *)&v30 + 1) = 1174405120;
        uint64_t v31 = ___ZNK8dispatch8callbackIU13block_pointerFvjEEclIJjEEEvDpT__block_invoke;
        uint64_t v32 = &__block_descriptor_tmp_17_1;
LABEL_49:
        uint64_t v29 = 0;
        goto LABEL_50;
      }
      unsigned int v27 = _Block_copy(v24);
      std::string v28 = v27;
      *(void *)&long long v30 = MEMORY[0x1E4F143A8];
      *((void *)&v30 + 1) = 1174405120;
      uint64_t v31 = ___ZNK8dispatch8callbackIU13block_pointerFvjEEclIJjEEEvDpT__block_invoke;
      uint64_t v32 = &__block_descriptor_tmp_17_1;
      if (!v27) {
        goto LABEL_49;
      }
      uint64_t v29 = _Block_copy(v27);
LABEL_50:
      xpc_object_t aBlock = v29;
      int v34 = v26;
      dispatch_async(v25, &v30);
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (v28) {
        _Block_release(v28);
      }
      if (v25) {
        dispatch_release(v25);
      }
      if (v24) {
        _Block_release(v24);
      }
      v22 += 16;
      if (v22 == v23) {
        return;
      }
    }
    uint64_t v24 = _Block_copy(*(const void **)v22);
    uint64_t v25 = *(NSObject **)(v22 + 8);
    if (!v25) {
      goto LABEL_43;
    }
LABEL_42:
    dispatch_retain(v25);
    goto LABEL_43;
  }
}

void sub_1C5A7005C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c47_ZTSNSt3__18weak_ptrI22LegacyAccessoryManagerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c47_ZTSNSt3__18weak_ptrI22LegacyAccessoryManagerEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN22LegacyAccessoryManager4initEv_block_invoke_5(void *a1, unint64_t a2, int a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = a1[5];
      if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v10) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v9);
        if (!v10) {
          return;
        }
      }
      LegacyAccessoryManager::accessoryNotification_sync(v7, a2, a3);
    }
  }
}

void LegacyAccessoryManager::accessoryNotification_sync(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  size_t v6 = *(NSObject **)a1;
  if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = a3;
    _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#I Accessory Port Number: %u", (uint8_t *)__p, 8u);
    size_t v6 = *(NSObject **)a1;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    ctu::iokit::asString();
    if (v31 >= 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136315138;
    int v33 = v7;
    _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#I Accessory Status: %s", buf, 0xCu);
    if (v31 < 0) {
      operator delete(__p[0]);
    }
    size_t v6 = *(NSObject **)a1;
  }
  unint64_t v8 = HIDWORD(a2);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)
    && ((ctu::iokit::asString(), v31 >= 0) ? (uint64_t v9 = __p) : (uint64_t v9 = (void **)__p[0]),
        *(_DWORD *)long long buf = 136315138,
        int v33 = v9,
        _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#I Accessory Type: %s", buf, 0xCu),
        v31 < 0))
  {
    operator delete(__p[0]);
    if ((a3 - 3) <= 0xFFFFFFFD)
    {
LABEL_16:
      uint64_t v10 = *(NSObject **)a1;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(__p[0]) = 67109120;
        HIDWORD(__p[0]) = a3;
        _os_log_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_DEFAULT, "#I This port (%d) is not supported.", (uint8_t *)__p, 8u);
      }
      return;
    }
  }
  else if ((a3 - 3) <= 0xFFFFFFFD)
  {
    goto LABEL_16;
  }
  BOOL v11 = *(NSObject **)a1;
  BOOL v12 = os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEBUG);
  if (a2 == 1)
  {
    if (!v12)
    {
      if (HIDWORD(a2) == 4096) {
        goto LABEL_42;
      }
LABEL_22:
      unsigned int v13 = *(NSObject **)a1;
      if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_debug_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_DEBUG, "#D Detected not keyboard type. Setting the accessory bitmask", (uint8_t *)__p, 2u);
        uint64_t v15 = (void *)(a1 + 104);
        uint64_t v14 = *(void *)(a1 + 104);
        if (v14)
        {
          while (1)
          {
LABEL_33:
            while (1)
            {
              uint64_t v16 = (void *)v14;
              unsigned int v17 = *(_DWORD *)(v14 + 28);
              if (v17 <= v8) {
                break;
              }
              uint64_t v14 = *v16;
              uint64_t v15 = v16;
              if (!*v16) {
                goto LABEL_37;
              }
            }
            if (v17 >= v8) {
              break;
            }
            uint64_t v14 = v16[1];
            if (!v14)
            {
              uint64_t v15 = v16 + 1;
              goto LABEL_37;
            }
          }
          unsigned int v18 = v16;
          goto LABEL_41;
        }
      }
      else
      {
        uint64_t v15 = (void *)(a1 + 104);
        uint64_t v14 = *(void *)(a1 + 104);
        if (v14) {
          goto LABEL_33;
        }
      }
      uint64_t v16 = v15;
LABEL_37:
      unsigned int v18 = operator new(0x28uLL);
      v18[7] = v8;
      v18[8] = 0;
      *(void *)unsigned int v18 = 0;
      *((void *)v18 + 1) = 0;
      *((void *)v18 + 2) = v16;
      *uint64_t v15 = v18;
      uint64_t v19 = **(void **)(a1 + 96);
      uint64_t v20 = (uint64_t *)v18;
      if (v19)
      {
        *(void *)(a1 + 96) = v19;
        uint64_t v20 = (uint64_t *)*v15;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 104), v20);
      ++*(void *)(a1 + 112);
LABEL_41:
      *(_DWORD *)(a1 + 88) |= v18[8];
      goto LABEL_42;
    }
    LOWORD(__p[0]) = 0;
    _os_log_debug_impl(&dword_1C59C6000, v11, OS_LOG_TYPE_DEBUG, "#D An accessory is attached", (uint8_t *)__p, 2u);
    if (HIDWORD(a2) != 4096) {
      goto LABEL_22;
    }
  }
  else
  {
    if (v12)
    {
      LOWORD(__p[0]) = 0;
      _os_log_debug_impl(&dword_1C59C6000, v11, OS_LOG_TYPE_DEBUG, "#D An accessory is detached. Clear all the bits in the accessory state", (uint8_t *)__p, 2u);
    }
    *(_DWORD *)(a1 + 88) = 0;
  }
LABEL_42:
  unsigned int v21 = *(NSObject **)a1;
  if (*(unsigned char *)(a1 + 92))
  {
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p[0]) = 0;
      _os_log_debug_impl(&dword_1C59C6000, v21, OS_LOG_TYPE_DEBUG, "#D If a keyboard is covered, we should set the keyboard accessory state regardless of the accessory event", (uint8_t *)__p, 2u);
      uint64_t v23 = (uint64_t **)(a1 + 104);
      uint64_t v22 = *(uint64_t **)(a1 + 104);
      if (v22)
      {
        while (1)
        {
LABEL_49:
          while (1)
          {
            uint64_t v24 = (uint64_t **)v22;
            unsigned int v25 = *((_DWORD *)v22 + 7);
            if (v25 <= 0x1000) {
              break;
            }
            uint64_t v22 = *v24;
            uint64_t v23 = v24;
            if (!*v24) {
              goto LABEL_53;
            }
          }
          if (v25 == 4096) {
            break;
          }
          uint64_t v22 = v24[1];
          if (!v22)
          {
            uint64_t v23 = v24 + 1;
            goto LABEL_53;
          }
        }
        int v26 = (uint64_t *)v24;
        goto LABEL_57;
      }
    }
    else
    {
      uint64_t v23 = (uint64_t **)(a1 + 104);
      uint64_t v22 = *(uint64_t **)(a1 + 104);
      if (v22) {
        goto LABEL_49;
      }
    }
    uint64_t v24 = v23;
LABEL_53:
    int v26 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v26 + 28) = 4096;
    *int v26 = 0;
    v26[1] = 0;
    void v26[2] = (uint64_t)v24;
    std::__shared_weak_count *v23 = v26;
    uint64_t v27 = **(void **)(a1 + 96);
    std::string v28 = v26;
    if (v27)
    {
      *(void *)(a1 + 96) = v27;
      std::string v28 = *v23;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 104), v28);
    ++*(void *)(a1 + 112);
LABEL_57:
    *(_DWORD *)(a1 + 88) |= *((_DWORD *)v26 + 8);
    unsigned int v21 = *(NSObject **)a1;
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    int v29 = *(_DWORD *)(a1 + 88);
    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = v29;
    _os_log_impl(&dword_1C59C6000, v21, OS_LOG_TYPE_DEFAULT, "#I Accessory State: 0x%x\n", (uint8_t *)__p, 8u);
  }
  LegacyAccessoryManager::notifyClients((NSObject **)a1);
}

void LegacyAccessoryManager::notifyClients(NSObject **this)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *((_DWORD *)this + 22);
    LODWORD(v12) = 67109120;
    HIDWORD(v12) = v3;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Notifying Accessory State: 0x%x\n", (uint8_t *)&v12, 8u);
  }
  uint64_t v4 = this[4];
  uint64_t v5 = this[5];
  if (v4 != v5)
  {
    while (!v4->isa)
    {
      size_t v6 = 0;
      isa = v4[1].isa;
      if (isa) {
        goto LABEL_8;
      }
LABEL_9:
      int v8 = *((_DWORD *)this + 22);
      if (!v6)
      {
        uint64_t v10 = 0;
        uint64_t v12 = MEMORY[0x1E4F143A8];
        uint64_t v13 = 1174405120;
        uint64_t v14 = ___ZNK8dispatch8callbackIU13block_pointerFvjEEclIJjEEEvDpT__block_invoke;
        uint64_t v15 = &__block_descriptor_tmp_17_1;
LABEL_15:
        BOOL v11 = 0;
        goto LABEL_16;
      }
      uint64_t v9 = _Block_copy(v6);
      uint64_t v10 = v9;
      uint64_t v12 = MEMORY[0x1E4F143A8];
      uint64_t v13 = 1174405120;
      uint64_t v14 = ___ZNK8dispatch8callbackIU13block_pointerFvjEEclIJjEEEvDpT__block_invoke;
      uint64_t v15 = &__block_descriptor_tmp_17_1;
      if (!v9) {
        goto LABEL_15;
      }
      BOOL v11 = _Block_copy(v9);
LABEL_16:
      xpc_object_t aBlock = v11;
      int v17 = v8;
      dispatch_async(isa, &v12);
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (v10) {
        _Block_release(v10);
      }
      if (isa) {
        dispatch_release(isa);
      }
      if (v6) {
        _Block_release(v6);
      }
      v4 += 2;
      if (v4 == v5) {
        return;
      }
    }
    size_t v6 = _Block_copy(v4->isa);
    isa = v4[1].isa;
    if (!isa) {
      goto LABEL_9;
    }
LABEL_8:
    dispatch_retain(isa);
    goto LABEL_9;
  }
}

void sub_1C5A7085C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *LegacyAccessoryManager::registerCallback(void *a1, void **a2)
{
  uint64_t v4 = (void *)a1[5];
  if ((unint64_t)v4 >= a1[6])
  {
    uint64_t result = std::vector<dispatch::callback<void({block_pointer})>>::__push_back_slow_path<dispatch::callback<void({block_pointer})> const&>(a1 + 4, (uint64_t)a2);
    a1[5] = result;
  }
  else
  {
    uint64_t v5 = *a2;
    if (*a2) {
      uint64_t v5 = _Block_copy(v5);
    }
    size_t v6 = a2[1];
    void *v4 = v5;
    v4[1] = v6;
    if (v6) {
      dispatch_retain(v6);
    }
    uint64_t result = v4 + 2;
    a1[5] = v4 + 2;
  }
  return result;
}

void *std::vector<dispatch::callback<void({block_pointer})(unsigned int)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(unsigned int)> const&>(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1] - *a1;
  unint64_t v3 = (v2 >> 4) + 1;
  if (v3 >> 60) {
    std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 3 > v3) {
    unint64_t v3 = v6 >> 3;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  if (!v7)
  {
    int v8 = 0;
    uint64_t v9 = *(void **)a2;
    if (!*(void *)a2) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v7 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  int v8 = (char *)operator new(16 * v7);
  uint64_t v9 = *(void **)a2;
  if (*(void *)a2) {
LABEL_12:
  }
    uint64_t v9 = _Block_copy(v9);
LABEL_13:
  uint64_t v10 = *(NSObject **)(a2 + 8);
  BOOL v11 = &v8[16 * (v2 >> 4)];
  *(void *)BOOL v11 = v9;
  *((void *)v11 + 1) = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  uint64_t v12 = &v8[16 * v7];
  uint64_t v13 = v11 + 16;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    unint64_t v16 = (unint64_t)&v15[-*a1 - 16];
    if (v16 < 0xD0) {
      goto LABEL_17;
    }
    uint64_t v23 = &v15[-(v16 & 0xFFFFFFFFFFFFFFF0)];
    BOOL v24 = &v8[v2 - 8 - (v16 & 0xFFFFFFFFFFFFFFF0)] >= v15 || v23 - 8 >= v11;
    BOOL v25 = !v24;
    if (v23 - 16 < &v8[v2 - 8] && &v8[v2 - (v16 & 0xFFFFFFFFFFFFFFF0) - 16] < v15 - 8) {
      goto LABEL_17;
    }
    if (v25) {
      goto LABEL_17;
    }
    uint64_t v27 = (v16 >> 4) + 1;
    uint64_t v28 = 16 * (v27 & 0x1FFFFFFFFFFFFFFELL);
    int v17 = &v11[-v28];
    int v29 = &v15[-v28];
    long long v30 = (double *)(v11 - 32);
    char v31 = (const double *)(v15 - 32);
    uint64_t v32 = v27 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      float64x2x2_t v33 = vld2q_f64(v31);
      vst2q_f64(v30, v33);
      *(_OWORD *)char v31 = 0uLL;
      *((_OWORD *)v31 + 1) = 0uLL;
      v31 -= 4;
      v30 -= 4;
      v32 -= 2;
    }
    while (v32);
    BOOL v11 = v17;
    uint64_t v15 = v29;
    if (v27 != (v27 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_17:
      int v17 = v11;
      do
      {
        long long v18 = *((_OWORD *)v15 - 1);
        v15 -= 16;
        *((_OWORD *)v17 - 1) = v18;
        v17 -= 16;
        *(void *)uint64_t v15 = 0;
        *((void *)v15 + 1) = 0;
      }
      while (v15 != v14);
    }
    uint64_t v15 = (char *)*a1;
    uint64_t v19 = (char *)a1[1];
    *a1 = v17;
    a1[1] = v13;
    a1[2] = v12;
    while (v19 != v15)
    {
      uint64_t v20 = *((void *)v19 - 1);
      if (v20) {
        dispatch_release(v20);
      }
      unsigned int v21 = (const void *)*((void *)v19 - 2);
      if (v21) {
        _Block_release(v21);
      }
      v19 -= 16;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

LegacyAccessoryManager **std::unique_ptr<LegacyAccessoryManager>::~unique_ptr[abi:ne180100](LegacyAccessoryManager **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    LegacyAccessoryManager::~LegacyAccessoryManager(v2);
    operator delete(v3);
  }
  return a1;
}

void std::__shared_ptr_pointer<LegacyAccessoryManager *,std::shared_ptr<LegacyAccessoryManager>::__shared_ptr_default_delete<LegacyAccessoryManager,LegacyAccessoryManager>,std::allocator<LegacyAccessoryManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<LegacyAccessoryManager *,std::shared_ptr<LegacyAccessoryManager>::__shared_ptr_default_delete<LegacyAccessoryManager,LegacyAccessoryManager>,std::allocator<LegacyAccessoryManager>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(LegacyAccessoryManager **)(a1 + 24);
  if (v1)
  {
    LegacyAccessoryManager::~LegacyAccessoryManager(v1);
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<LegacyAccessoryManager *,std::shared_ptr<LegacyAccessoryManager>::__shared_ptr_default_delete<LegacyAccessoryManager,LegacyAccessoryManager>,std::allocator<LegacyAccessoryManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C5BC6F1FLL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C5BC6F1FLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C5BC6F1FLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C5BC6F1FLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvjEEclIJjEEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void *__copy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvjEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 32);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvjEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    _Block_release(v1);
  }
}

uint64_t __cxx_global_var_init_4()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

double BootModuleICE::create@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  v10[0] = (BootModule *)0xAAAAAAAAAAAAAAAALL;
  v10[1] = (BootModule *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v4 = operator new(0x1F8uLL);
  uint64_t v5 = (uint64_t)v4;
  uint64_t v6 = *a1;
  unint64_t v7 = (std::__shared_weak_count *)a1[1];
  v9[0] = v6;
  v9[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  BootModuleICE::BootModuleICE((uint64_t)v4, v9);
  v10[0] = (BootModule *)0xAAAAAAAAAAAAAAAALL;
  v10[1] = (BootModule *)0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<BootModuleICE>::shared_ptr[abi:ne180100]<BootModuleICE,std::shared_ptr<BootModuleICE> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModuleICE>(BootModuleICE*)::{lambda(BootModuleICE*)#1},void>(v10, v5);
  ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync((uint64_t)v10[0] + 48);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  BootModule::init(v10[0]);
  double result = *(double *)v10;
  *a2 = *(_OWORD *)v10;
  return result;
}

void sub_1C5A70D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C5A70DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(a1);
}

uint64_t BootModuleICE::BootModuleICE(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v14 = *a2;
  uint64_t v15 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  BootModule::BootModule(a1, &v14, &v12);
  uint64_t v4 = v13;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (capabilities::radio *)v15;
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  *(void *)a1 = &unk_1F21071F0;
  *(void *)(a1 + 48) = &unk_1F2107278;
  if (capabilities::radio::vendor(v5) == 2)
  {
    _ZNSt3__115allocate_sharedB8ne180100I20BootControllerLegacyNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v11);
    long long v6 = *(_OWORD *)v11;
    *(_OWORD *)BOOL v11 = 0uLL;
    unint64_t v7 = *(std::__shared_weak_count **)(a1 + 488);
    *(_OWORD *)(a1 + 480) = v6;
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    int v8 = (std::__shared_weak_count *)v11[1];
    if (!v11[1] || atomic_fetch_add((atomic_ullong *volatile)(v11[1] + 8), 0xFFFFFFFFFFFFFFFFLL)) {
      return a1;
    }
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    return a1;
  }
  else
  {
    uint64_t v10 = *(NSObject **)(a1 + 88);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      return a1;
    }
    LOWORD(v11[0]) = 0;
    _os_log_error_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_ERROR, "Unsupported or unknown radio vendor!", (uint8_t *)v11, 2u);
    return a1;
  }
}

void sub_1C5A70FDC(_Unwind_Exception *a1)
{
  BootModule::~BootModule(v1);
  _Unwind_Resume(a1);
}

void sub_1C5A70FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (!a15) {
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(a15);
  _Unwind_Resume(a1);
}

void BootModuleICE::~BootModuleICE(BootModuleICE *this)
{
  *(void *)this = &unk_1F21071F0;
  *((void *)this + 6) = &unk_1F2107278;
  uint64_t v2 = *((void *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v3, 2u);
  }
  BootModule::~BootModule(this);
}

{
  NSObject *v2;
  uint8_t v3[16];

  *(void *)this = &unk_1F21071F0;
  *((void *)this + 6) = &unk_1F2107278;
  uint64_t v2 = *((void *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v3, 2u);
  }
  BootModule::~BootModule(this);
}

{
  NSObject *v2;
  void *v3;
  uint8_t v4[16];

  *(void *)this = &unk_1F21071F0;
  *((void *)this + 6) = &unk_1F2107278;
  uint64_t v2 = *((void *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v4, 2u);
  }
  BootModule::~BootModule(this);
  operator delete(v3);
}

void non-virtual thunk to'BootModuleICE::~BootModuleICE(BootModuleICE *this)
{
  uint64_t v1 = (BootModuleICE *)((char *)this - 48);
  *((void *)this - 6) = &unk_1F21071F0;
  *(void *)this = &unk_1F2107278;
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v3, 2u);
  }
  BootModule::~BootModule(v1);
}

{
  BootModule *v1;
  NSObject *v2;
  void *v3;
  uint8_t v4[16];

  uint64_t v1 = (BootModuleICE *)((char *)this - 48);
  *((void *)this - 6) = &unk_1F21071F0;
  *(void *)this = &unk_1F2107278;
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v4, 2u);
  }
  BootModule::~BootModule(v1);
  operator delete(v3);
}

void BootModuleICE::requestFSSync_sync(uint64_t a1, uint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v4) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v4);
      xpc_object_t v5 = v4;
    }
    else
    {
      xpc_object_t v5 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v4 = 0;
  }
  xpc_release(v4);
  xpc_object_t v6 = xpc_BOOL_create(1);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4F4CD58], v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  xpc_object_t v8 = xpc_BOOL_create(1);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4F4CA78], v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v10 || (v11 = *(void *)(a1 + 120), (uint64_t v12 = std::__shared_weak_count::lock(v10)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v13 = v12;
  atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = (const void *)*MEMORY[0x1E4F4C728];
  size_t v15 = strlen((const char *)*MEMORY[0x1E4F4C728]);
  if (v15 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v16 = (void *)v15;
  if (v15 >= 0x17)
  {
    uint64_t v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v18 = v15 | 7;
    }
    uint64_t v19 = v18 + 1;
    int v17 = (void **)operator new(v18 + 1);
    __dst[1] = v16;
    unint64_t v31 = v19 | 0x8000000000000000;
    __dst[0] = v17;
LABEL_23:
    memmove(v17, v14, (size_t)v16);
    *((unsigned char *)v16 + (void)v17) = 0;
    xpc_object_t object = v5;
    if (v5) {
      goto LABEL_19;
    }
    goto LABEL_24;
  }
  HIBYTE(v31) = v15;
  int v17 = __dst;
  if (v15) {
    goto LABEL_23;
  }
  LOBYTE(__dst[0]) = 0;
  xpc_object_t object = v5;
  if (v5)
  {
LABEL_19:
    xpc_retain(v5);
    goto LABEL_25;
  }
LABEL_24:
  xpc_object_t object = xpc_null_create();
LABEL_25:
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 1174405120;
  v23[2] = ___ZN13BootModuleICE18requestFSSync_syncEN8dispatch8callbackIU13block_pointerFviN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEE_block_invoke;
  v23[3] = &__block_descriptor_tmp_26;
  v23[4] = a1;
  uint64_t v20 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v20 = _Block_copy(v20);
  }
  unsigned int v21 = *(NSObject **)(a2 + 8);
  xpc_object_t aBlock = v20;
  dispatch_object_t v25 = v21;
  if (v21) {
    dispatch_retain(v21);
  }
  uint64_t v26 = v11;
  uint64_t v27 = v13;
  atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v22 = _Block_copy(v23);
  uint64_t v28 = v22;
  Service::runCommand(a1, (uint64_t)__dst, &object, &v28);
  if (v22) {
    _Block_release(v22);
  }
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(v31) < 0) {
    operator delete(__dst[0]);
  }
  if (v27) {
    std::__shared_weak_count::__release_weak(v27);
  }
  if (v25) {
    dispatch_release(v25);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  std::__shared_weak_count::__release_weak(v13);
  xpc_release(v5);
}

void sub_1C5A716E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, xpc_object_t object, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (v28) {
    _Block_release(v28);
  }
  if (a17) {
    std::__shared_weak_count::__release_weak(a17);
  }
  dispatch::callback<void({block_pointer})(int,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v26);
  xpc_release(object);
  if (a25 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_weak(v27);
  xpc_release(v25);
  _Unwind_Resume(a1);
}

void ___ZN13BootModuleICE18requestFSSync_syncEN8dispatch8callbackIU13block_pointerFviN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEE_block_invoke(void *a1, int a2, xpc_object_t *a3)
{
  xpc_object_t v4 = (std::__shared_weak_count *)a1[8];
  if (!v4) {
    return;
  }
  xpc_object_t v7 = (void *)a1[4];
  xpc_object_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  xpc_object_t v9 = v8;
  uint64_t v10 = a1[7];
  if (v10)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    xpc_object_t v11 = *a3;
    if (*a3)
    {
      xpc_retain(*a3);
      uint64_t v12 = (const void *)a1[5];
      if (v12) {
        goto LABEL_6;
      }
    }
    else
    {
      xpc_object_t v11 = xpc_null_create();
      uint64_t v12 = (const void *)a1[5];
      if (v12)
      {
LABEL_6:
        uint64_t v13 = _Block_copy(v12);
        uint64_t v14 = a1[6];
        if (!v14)
        {
LABEL_8:
          size_t v15 = (std::__shared_weak_count *)v7[16];
          if (!v15 || (uint64_t v16 = v7[15], (v17 = std::__shared_weak_count::lock(v15)) == 0)) {
            std::__throw_bad_weak_ptr[abi:ne180100]();
          }
          uint64_t v18 = v17;
          uint64_t v19 = operator new(0x30uLL);
          *uint64_t v19 = v10;
          v19[1] = v9;
          *((_DWORD *)v19 + 4) = a2;
          v19[3] = v11;
          xpc_object_t v20 = xpc_null_create();
          if (v13)
          {
            void v19[4] = _Block_copy(v13);
            v19[5] = v14;
            if (!v14)
            {
LABEL_13:
              unsigned int v21 = v7[17];
              atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v22 = operator new(0x18uLL);
              *uint64_t v22 = v19;
              v22[1] = v16;
              void v22[2] = v18;
              dispatch_async_f(v21, v22, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedIZZN13BootModuleICE18requestFSSync_syncENS_8callbackIU13block_pointerFviNS1_2cf11CFSharedRefIK14__CFDictionaryEEEEEEUb_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISH_NSM_14default_deleteISH_EEEEENUlPvE_8__invokeESR_);
              if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
                std::__shared_weak_count::__release_weak(v18);
              }
              if (v14) {
                dispatch_release(v14);
              }
              if (v13) {
                _Block_release(v13);
              }
              xpc_release(v20);
              goto LABEL_20;
            }
          }
          else
          {
            void v19[4] = 0;
            v19[5] = v14;
            if (!v14) {
              goto LABEL_13;
            }
          }
          dispatch_retain(v14);
          goto LABEL_13;
        }
LABEL_7:
        dispatch_retain(v14);
        goto LABEL_8;
      }
    }
    uint64_t v13 = 0;
    uint64_t v14 = a1[6];
    if (!v14) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_20:
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void __copy_helper_block_e8_40c87_ZTSN8dispatch8callbackIU13block_pointerFviN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEE56c35_ZTSNSt3__18weak_ptrI10BootModuleEE(void *a1, void *a2)
{
  xpc_object_t v4 = (void *)a2[5];
  if (v4) {
    xpc_object_t v4 = _Block_copy(v4);
  }
  xpc_object_t v5 = a2[6];
  a1[5] = v4;
  a1[6] = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  uint64_t v6 = a2[8];
  a1[7] = a2[7];
  a1[8] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
}

void __destroy_helper_block_e8_40c87_ZTSN8dispatch8callbackIU13block_pointerFviN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEE56c35_ZTSNSt3__18weak_ptrI10BootModuleEE(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[8];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = a1[6];
  if (v3) {
    dispatch_release(v3);
  }
  xpc_object_t v4 = (const void *)a1[5];
  if (v4) {
    _Block_release(v4);
  }
}

uint64_t dispatch::callback<void({block_pointer})(int,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void BootModuleICE::softReset_sync(uint64_t a1, const ResetInfo *a2, void **a3)
{
  uint64_t v6 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#I Performing soft reset", buf, 2u);
  }
  xpc_object_t v7 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v7 || (v8 = *(void *)(a1 + 120), (xpc_object_t v9 = std::__shared_weak_count::lock(v7)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v10 = v9;
  p_shared_weak_owners = &v9->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v10);
  }
  memset(buf, 170, sizeof(buf));
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN13BootModuleICE14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_11;
  aBlock[4] = a1;
  void aBlock[5] = v8;
  xpc_object_t v20 = v10;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  ResetInfo::ResetInfo(&v21, a2);
  uint64_t v12 = *a3;
  if (*a3) {
    uint64_t v12 = _Block_copy(v12);
  }
  uint64_t v28 = v12;
  uint64_t v13 = _Block_copy(aBlock);
  uint64_t v14 = *(NSObject **)(a1 + 136);
  if (v14) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
  }
  *(void *)long long buf = v13;
  *(void *)&uint8_t buf[8] = v14;
  if (v13)
  {
    size_t v15 = _Block_copy(v13);
    int v17 = v15;
    uint64_t v18 = v14;
    if (!v14) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  size_t v15 = 0;
  int v17 = 0;
  uint64_t v18 = v14;
  if (v14) {
LABEL_13:
  }
    dispatch_retain(v14);
LABEL_14:
  BootModuleICE::shutdownAndFlush_sync((capabilities::abs *)a1, (uint64_t)&v17);
  if (v14) {
    dispatch_release(v14);
  }
  if (v15) {
    _Block_release(v15);
  }
  if (v14) {
    dispatch_release(v14);
  }
  if (v13) {
    _Block_release(v13);
  }
  if (v28) {
    _Block_release(v28);
  }
  if (v27 < 0)
  {
    operator delete(__p);
    if ((v25 & 0x80000000) == 0)
    {
LABEL_26:
      if ((v23 & 0x80000000) == 0) {
        goto LABEL_27;
      }
      goto LABEL_35;
    }
  }
  else if ((v25 & 0x80000000) == 0)
  {
    goto LABEL_26;
  }
  operator delete(v24);
  if ((v23 & 0x80000000) == 0)
  {
LABEL_27:
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
LABEL_36:
    operator delete(v21.__r_.__value_.__l.__data_);
    uint64_t v16 = v20;
    if (!v20) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
LABEL_35:
  operator delete(v22);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_36;
  }
LABEL_28:
  uint64_t v16 = v20;
  if (v20) {
LABEL_29:
  }
    std::__shared_weak_count::__release_weak(v16);
LABEL_30:
  std::__shared_weak_count::__release_weak(v10);
}

void sub_1C5A71D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *aBlock)
{
  dispatch::callback<void({block_pointer})(int,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback((uint64_t)&a9);
  dispatch::callback<void({block_pointer})(int,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v34 - 80);
  if (aBlock) {
    _Block_release(aBlock);
  }
  ResetInfo::~ResetInfo(v33);
  if (a17) {
    std::__shared_weak_count::__release_weak(a17);
  }
  std::__shared_weak_count::__release_weak(v32);
  _Unwind_Resume(a1);
}

void ___ZN13BootModuleICE14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke(void *a1, int a2, const __CFDictionary **a3)
{
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    size_t v81 = v8;
    if (v8)
    {
      if (!a1[5])
      {
        xpc_object_t v11 = v8;
LABEL_113:
        if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        return;
      }
      memset(&v79, 0, sizeof(v79));
      if (a2)
      {
        v66[0] = 0xAAAAAAAAAAAAAAAALL;
        v66[1] = 0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v66, *a3);
        xpc_object_t v9 = (const char *)*MEMORY[0x1E4F4C240];
        long long __dst = 0uLL;
        unint64_t v65 = 0;
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v56, v9);
        ctu::cf::map_adapter::getString();
        MEMORY[0x1C8794290](&v56);
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v79.__r_.__value_.__l.__data_);
        }
        std::string v79 = *(std::string *)v58;
        v58[23] = 0;
        v58[0] = 0;
        uint64_t v10 = (std::string *)(v7 + 152);
        if ((std::string *)(v7 + 152) != &v79)
        {
          if (*(char *)(v7 + 175) < 0)
          {
            uint64_t v13 = (v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &v79
                : (std::string *)v79.__r_.__value_.__r.__words[0];
            size_t v14 = (v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? HIBYTE(v79.__r_.__value_.__r.__words[2])
                : v79.__r_.__value_.__l.__size_;
            std::string::__assign_no_alias<false>((void **)(v7 + 152), v13, v14);
          }
          else if ((*((unsigned char *)&v79.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>((void *)(v7 + 152), v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)&v79.__r_.__value_.__l.__data_;
            *(void *)(v7 + 168) = *((void *)&v79.__r_.__value_.__l + 2);
          }
          if ((v58[23] & 0x80000000) != 0) {
            operator delete(*(void **)v58);
          }
        }
        if (SHIBYTE(v65) < 0)
        {
          operator delete((void *)__dst);
          std::string::size_type size = HIBYTE(v79.__r_.__value_.__r.__words[2]);
          if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = v79.__r_.__value_.__l.__size_;
          }
          if (!size) {
            goto LABEL_53;
          }
        }
        else
        {
          std::string::size_type v16 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
          if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v16 = v79.__r_.__value_.__l.__size_;
          }
          if (!v16)
          {
LABEL_53:
            uint64_t v18 = std::string::__assign_external(&v79, "Failed shutdown and FS sync of baseband.", 0x28uLL);
            if (v10 != v18)
            {
              char v19 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
              if (*(char *)(v7 + 175) < 0)
              {
                if (v19 >= 0) {
                  std::string v21 = v18;
                }
                else {
                  std::string v21 = (std::string *)v18->__r_.__value_.__r.__words[0];
                }
                if (v19 >= 0) {
                  size_t v22 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
                }
                else {
                  size_t v22 = v18->__r_.__value_.__l.__size_;
                }
                std::string::__assign_no_alias<false>((void **)(v7 + 152), v21, v22);
              }
              else if ((*((unsigned char *)&v18->__r_.__value_.__s + 23) & 0x80) != 0)
              {
                std::string::__assign_no_alias<true>((void *)(v7 + 152), v18->__r_.__value_.__l.__data_, v18->__r_.__value_.__l.__size_);
              }
              else
              {
                long long v20 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
                *(void *)(v7 + 168) = *((void *)&v18->__r_.__value_.__l + 2);
                *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v20;
              }
            }
          }
        }
        *(void *)&long long v23 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)unint64_t v62 = v23;
        long long v63 = v23;
        *(_OWORD *)uint64_t v60 = v23;
        long long v61 = v23;
        *(_OWORD *)&v58[16] = v23;
        long long v59 = v23;
        *(_OWORD *)uint64_t v58 = v23;
        BOOL v24 = (const void *)*MEMORY[0x1E4F4C6E8];
        size_t v25 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
        if (v25 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v26 = v25;
        if (v25 >= 0x17)
        {
          uint64_t v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v25 | 7) != 0x17) {
            uint64_t v28 = v25 | 7;
          }
          uint64_t v29 = v28 + 1;
          p_dst = operator new(v28 + 1);
          *((void *)&__dst + 1) = v26;
          unint64_t v65 = v29 | 0x8000000000000000;
          *(void *)&long long __dst = p_dst;
        }
        else
        {
          HIBYTE(v65) = v25;
          p_dst = &__dst;
          if (!v25)
          {
LABEL_73:
            p_dst[v26] = 0;
            long long v30 = (const void *)*MEMORY[0x1E4F4D240];
            size_t v31 = strlen((const char *)*MEMORY[0x1E4F4D240]);
            if (v31 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            size_t v32 = v31;
            if (v31 >= 0x17)
            {
              uint64_t v34 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v31 | 7) != 0x17) {
                uint64_t v34 = v31 | 7;
              }
              uint64_t v35 = v34 + 1;
              float64x2x2_t v33 = operator new(v34 + 1);
              *((void *)&v56 + 1) = v32;
              unint64_t v57 = v35 | 0x8000000000000000;
              *(void *)&long long v56 = v33;
            }
            else
            {
              HIBYTE(v57) = v31;
              float64x2x2_t v33 = &v56;
              if (!v31)
              {
LABEL_81:
                v33[v32] = 0;
                Timestamp::Timestamp((Timestamp *)v52);
                Timestamp::asString((uint64_t)v52, 0, 9, v54);
                char v51 = 0;
                LOBYTE(v50) = 0;
                ResetInfo::ResetInfo((std::string *)v58, &__dst, &v56, (long long *)&v79, (uint64_t)v54, 7, &v50);
                if (v55 < 0)
                {
                  operator delete(v54[0]);
                  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v52, v53);
                  if ((SHIBYTE(v57) & 0x80000000) == 0)
                  {
LABEL_83:
                    if ((SHIBYTE(v65) & 0x80000000) == 0) {
                      goto LABEL_84;
                    }
LABEL_90:
                    operator delete((void *)__dst);
LABEL_84:
                    ResetInfo::ResetInfo(&v43, (const ResetInfo *)v58);
                    v38[0] = MEMORY[0x1E4F143A8];
                    v38[1] = 1174405120;
                    v38[2] = ___ZN13BootModuleICE14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_6;
                    v38[3] = &__block_descriptor_tmp_9_3;
                    uint64_t v36 = (void *)a1[21];
                    if (v36) {
                      uint64_t v36 = _Block_copy(v36);
                    }
                    size_t v39 = v36;
                    int v41 = a2;
                    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
                      std::string::__init_copy_ctor_external(&v40, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
                    }
                    else {
                      std::string v40 = v79;
                    }
                    uint64_t v42 = _Block_copy(v38);
                    BootModule::handleReset_sync(v7, (uint64_t)&v43, &v42);
                    if (v42) {
                      _Block_release(v42);
                    }
                    if (v49 < 0)
                    {
                      operator delete(v48);
                      if ((v47 & 0x80000000) == 0)
                      {
LABEL_96:
                        if ((v45 & 0x80000000) == 0) {
                          goto LABEL_97;
                        }
                        goto LABEL_103;
                      }
                    }
                    else if ((v47 & 0x80000000) == 0)
                    {
                      goto LABEL_96;
                    }
                    operator delete(v46);
                    if ((v45 & 0x80000000) == 0)
                    {
LABEL_97:
                      if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                        goto LABEL_98;
                      }
                      goto LABEL_104;
                    }
LABEL_103:
                    operator delete(v44);
                    if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_98:
                      if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                        goto LABEL_99;
                      }
                      goto LABEL_105;
                    }
LABEL_104:
                    operator delete(v43.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_99:
                      uint64_t v37 = v39;
                      if (!v39)
                      {
LABEL_107:
                        if (SHIBYTE(v63) < 0)
                        {
                          operator delete(v62[1]);
                          if ((SBYTE7(v61) & 0x80000000) == 0)
                          {
LABEL_109:
                            if ((SHIBYTE(v59) & 0x80000000) == 0) {
                              goto LABEL_110;
                            }
                            goto LABEL_118;
                          }
                        }
                        else if ((SBYTE7(v61) & 0x80000000) == 0)
                        {
                          goto LABEL_109;
                        }
                        operator delete(v60[0]);
                        if ((SHIBYTE(v59) & 0x80000000) == 0)
                        {
LABEL_110:
                          if ((v58[23] & 0x80000000) == 0) {
                            goto LABEL_111;
                          }
                          goto LABEL_119;
                        }
LABEL_118:
                        operator delete(*(void **)&v58[24]);
                        if ((v58[23] & 0x80000000) == 0)
                        {
LABEL_111:
                          MEMORY[0x1C87942E0](v66);
                          if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
                            goto LABEL_112;
                          }
                          goto LABEL_40;
                        }
LABEL_119:
                        operator delete(*(void **)v58);
                        MEMORY[0x1C87942E0](v66);
                        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
                        {
LABEL_112:
                          operator delete(v79.__r_.__value_.__l.__data_);
                          xpc_object_t v11 = v81;
                          if (!v81) {
                            return;
                          }
                          goto LABEL_113;
                        }
                        goto LABEL_40;
                      }
LABEL_106:
                      _Block_release(v37);
                      goto LABEL_107;
                    }
LABEL_105:
                    operator delete(v40.__r_.__value_.__l.__data_);
                    uint64_t v37 = v39;
                    if (!v39) {
                      goto LABEL_107;
                    }
                    goto LABEL_106;
                  }
                }
                else
                {
                  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v52, v53);
                  if ((SHIBYTE(v57) & 0x80000000) == 0) {
                    goto LABEL_83;
                  }
                }
                operator delete((void *)v56);
                if ((SHIBYTE(v65) & 0x80000000) == 0) {
                  goto LABEL_84;
                }
                goto LABEL_90;
              }
            }
            memmove(v33, v30, v32);
            goto LABEL_81;
          }
        }
        memmove(p_dst, v24, v26);
        goto LABEL_73;
      }
      ResetInfo::ResetInfo(&v72, (const ResetInfo *)(a1 + 7));
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1174405120;
      aBlock[2] = ___ZN13BootModuleICE14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2;
      aBlock[3] = &__block_descriptor_tmp_3_1;
      uint64_t v12 = (void *)a1[21];
      if (v12) {
        uint64_t v12 = _Block_copy(v12);
      }
      int v68 = v12;
      int v70 = 0;
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v79;
      }
      uint64_t v71 = _Block_copy(aBlock);
      BootModule::hardReset_sync(v7, (uint64_t)&v72, (uint64_t *)&v71);
      if (v71) {
        _Block_release(v71);
      }
      if (v78 < 0)
      {
        operator delete(v77);
        if ((v76 & 0x80000000) == 0)
        {
LABEL_28:
          if ((v74 & 0x80000000) == 0) {
            goto LABEL_29;
          }
          goto LABEL_35;
        }
      }
      else if ((v76 & 0x80000000) == 0)
      {
        goto LABEL_28;
      }
      operator delete(v75);
      if ((v74 & 0x80000000) == 0)
      {
LABEL_29:
        if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_30;
        }
        goto LABEL_36;
      }
LABEL_35:
      operator delete(v73);
      if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_30:
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_31;
        }
        goto LABEL_37;
      }
LABEL_36:
      operator delete(v72.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_31:
        size_t v15 = v68;
        if (!v68)
        {
LABEL_39:
          if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_112;
          }
LABEL_40:
          xpc_object_t v11 = v81;
          if (!v81) {
            return;
          }
          goto LABEL_113;
        }
LABEL_38:
        _Block_release(v15);
        goto LABEL_39;
      }
LABEL_37:
      operator delete(__p.__r_.__value_.__l.__data_);
      size_t v15 = v68;
      if (!v68) {
        goto LABEL_39;
      }
      goto LABEL_38;
    }
  }
}

void sub_1C5A724F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  ResetInfo::~ResetInfo((void **)(v69 - 240));
  if (*(char *)(v69 - 105) < 0) {
    operator delete(*(void **)(v69 - 128));
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v69 - 96);
  _Unwind_Resume(a1);
}

void ___ZN13BootModuleICE14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(unsigned int *)(a1 + 64);
  if (*(char *)(a1 + 63) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
  }
  else {
    std::string __p = *(std::string *)(a1 + 40);
  }
  (*(void (**)(uint64_t, uint64_t, std::string *))(v1 + 16))(v1, v2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5A72710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_32c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  xpc_object_t v4 = *(void **)(a2 + 32);
  if (v4) {
    xpc_object_t v4 = _Block_copy(v4);
  }
  *(void *)(a1 + 32) = v4;
  xpc_object_t v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_1C5A72794(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 + 32);
  if (v3) {
    _Block_release(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    uint64_t v2 = *(const void **)(a1 + 32);
    if (!v2) {
      return;
    }
    goto LABEL_5;
  }
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
LABEL_5:
  }
    _Block_release(v2);
}

void ___ZN13BootModuleICE14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_6(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(unsigned int *)(a1 + 64);
  if (*(char *)(a1 + 63) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
  }
  else {
    std::string __p = *(std::string *)(a1 + 40);
  }
  (*(void (**)(uint64_t, uint64_t, std::string *))(v1 + 16))(v1, v2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5A7289C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10BootModuleEE56c15_ZTSK9ResetInfo168c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[6];
  *(void *)(a1 + 40) = a2[5];
  *(void *)(a1 + 48) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  ResetInfo::ResetInfo((std::string *)(a1 + 56), (const ResetInfo *)(a2 + 7));
  double result = (void *)a2[21];
  if (result) {
    double result = _Block_copy(result);
  }
  *(void *)(a1 + 168) = result;
  return result;
}

void sub_1C5A72914(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10BootModuleEE56c15_ZTSK9ResetInfo168c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 168);
  if (v2) {
    _Block_release(v2);
  }
  if (*(char *)(a1 + 167) < 0)
  {
    operator delete(*(void **)(a1 + 144));
    if ((*(char *)(a1 + 127) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(a1 + 103) & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_13;
    }
  }
  else if ((*(char *)(a1 + 127) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(a1 + 104));
  if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 79) & 0x80000000) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    operator delete(*(void **)(a1 + 56));
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v3) {
      return;
    }
    goto LABEL_8;
  }
LABEL_13:
  operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0) {
    goto LABEL_14;
  }
LABEL_7:
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v3) {
    return;
  }
LABEL_8:

  std::__shared_weak_count::__release_weak(v3);
}

void BootModuleICE::shutdownAndFlush_sync(capabilities::abs *a1, uint64_t a2)
{
  uint64_t v4 = capabilities::abs::serviceShutdownTimeoutScalingFactor(a1);
  int v17 = (util::GuaranteedCallback *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN13BootModuleICE21shutdownAndFlush_syncEN8dispatch8callbackIU13block_pointerFviN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_31_0;
  void aBlock[4] = a1;
  xpc_object_t v5 = *(void **)a2;
  if (*(void *)a2) {
    xpc_object_t v5 = _Block_copy(v5);
  }
  long long v6 = *(NSObject **)(a2 + 8);
  size_t v14 = v5;
  dispatch_object_t v15 = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  uint64_t v7 = 2000 * v4;
  std::string::size_type v16 = _Block_copy(aBlock);
  uint64_t v8 = *((void *)a1 + 17);
  dispatch_object_t object = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  util::GuaranteedCallback::create(&v16, &object, v7, &v17);
  if (object) {
    dispatch_release(object);
  }
  if (v16) {
    _Block_release(v16);
  }
  xpc_object_t v9 = (std::__shared_weak_count *)v18;
  v11[0] = v17;
  v11[1] = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  BootModuleICE::issueShutdownComand_sync(a1, v11);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)v18;
  if (v18 && !atomic_fetch_add((atomic_ullong *volatile)(v18 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (v15) {
    dispatch_release(v15);
  }
  if (v14) {
    _Block_release(v14);
  }
}

void sub_1C5A72BB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v3 - 48);
  dispatch::callback<void({block_pointer})(int,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v2 + 40);
  _Unwind_Resume(a1);
}

void sub_1C5A72BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  dispatch_object_t v15 = *(const void **)(v13 - 56);
  if (v15) {
    _Block_release(v15);
  }
  dispatch::callback<void({block_pointer})(int,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v12 + 40);
  _Unwind_Resume(a1);
}

void BootModuleICE::shutdown_sync(uint64_t a1, void *a2)
{
  if (*(_DWORD *)(a1 + 456) == 8)
  {
    uint64_t v3 = (char *)operator new(0x28uLL);
    strcpy(v3, "BootModule already in shutdown state");
    uint64_t v4 = (void (**)(void *, void, std::string *))*a2;
    std::string::__init_copy_ctor_external(&v20, v3, 0x24uLL);
    v4[2](v4, 0, &v20);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    operator delete(v3);
    return;
  }
  long long v6 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v6 || (uint64_t v7 = *(void *)(a1 + 120), (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v9 = v8;
  p_shared_weak_owners = &v8->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v20.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  v20.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN13BootModuleICE13shutdown_syncEN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_28_0;
  void aBlock[4] = a1;
  void aBlock[5] = v7;
  unint64_t v18 = v9;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  xpc_object_t v11 = (void (**)(void *, void, std::string *))*a2;
  if (*a2) {
    xpc_object_t v11 = (void (**)(void *, void, std::string *))_Block_copy(v11);
  }
  char v19 = v11;
  uint64_t v12 = _Block_copy(aBlock);
  uint64_t v13 = *(NSObject **)(a1 + 136);
  if (v13) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
  }
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
  v20.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
  if (!v12)
  {
    size_t v14 = 0;
    dispatch_object_t v15 = 0;
    std::string::size_type v16 = v13;
    if (!v13) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  size_t v14 = _Block_copy(v12);
  dispatch_object_t v15 = v14;
  std::string::size_type v16 = v13;
  if (v13) {
LABEL_15:
  }
    dispatch_retain(v13);
LABEL_16:
  BootModuleICE::shutdownAndFlush_sync((capabilities::abs *)a1, (uint64_t)&v15);
  if (v13) {
    dispatch_release(v13);
  }
  if (v14) {
    _Block_release(v14);
  }
  if (v13) {
    dispatch_release(v13);
  }
  if (v12) {
    _Block_release(v12);
  }
  if (v19) {
    _Block_release(v19);
  }
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  std::__shared_weak_count::__release_weak(v9);
}

void sub_1C5A72E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *aBlock)
{
  dispatch::callback<void({block_pointer})(int,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback((uint64_t)&a10);
  dispatch::callback<void({block_pointer})(int,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v20 - 72);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a18) {
    std::__shared_weak_count::__release_weak(a18);
  }
  std::__shared_weak_count::__release_weak(v19);
  _Unwind_Resume(a1);
}

void sub_1C5A72EB0(_Unwind_Exception *a1)
{
  if (*(char *)(v2 - 49) < 0)
  {
    operator delete(*(void **)(v2 - 72));
    operator delete(v1);
    _Unwind_Resume(a1);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZN13BootModuleICE13shutdown_syncEN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke(void *a1, int a2)
{
  uint64_t v3 = a1[4];
  uint64_t v17 = 0;
  unint64_t v18 = 0;
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    long long v6 = std::__shared_weak_count::lock(v4);
    unint64_t v18 = v6;
    if (!v6) {
      return;
    }
    uint64_t v7 = a1[5];
    uint64_t v17 = v7;
    if (v7)
    {
      uint64_t v8 = v6;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 96))(v3, 8);
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 1174405120;
      v12[2] = ___ZN13BootModuleICE13shutdown_syncEN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke_2;
      v12[3] = &__block_descriptor_tmp_27_0;
      v12[4] = v3;
      void v12[5] = v7;
      uint64_t v13 = v8;
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      int v15 = a2;
      xpc_object_t v9 = (void *)a1[7];
      if (v9) {
        xpc_object_t v9 = _Block_copy(v9);
      }
      size_t v14 = v9;
      xpc_object_t aBlock = _Block_copy(v12);
      BootModule::checkFSSyncStatus_sync(v3, &aBlock);
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (v14) {
        _Block_release(v14);
      }
      uint64_t v10 = v13;
      if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  xpc_object_t v11 = v18;
  if (v18)
  {
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1C5A730D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a16) {
    _Block_release(a16);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v18);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v19 - 64);
  _Unwind_Resume(a1);
}

void sub_1C5A73110(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1 - 64);
  _Unwind_Resume(a1);
}

void ___ZN13BootModuleICE13shutdown_syncEN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke_2(uint64_t a1, char a2, char a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void **)(a1 + 32);
  if ((a2 & 1) != 0 || (a3 & 1) != 0 || *(_DWORD *)(a1 + 64))
  {
    xpc_object_t v5 = (char *)operator new(0x30uLL);
    strcpy(v5, "Baseband shutdown did not complete rfs sync");
    long long v6 = v4[11];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v22 = *(_DWORD *)(a1 + 64);
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v22;
      _os_log_error_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_ERROR, "%s: result=%x", (uint8_t *)&buf, 0x12u);
      uint64_t v7 = v4[60];
      if (v7)
      {
LABEL_6:
        int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 80))(v7);
        xpc_object_t v9 = v4[11];
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v10 = "failed";
          if (v8) {
            uint64_t v10 = "successful";
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
          _os_log_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEFAULT, "#I Baseband poweroff (forced) %s", (uint8_t *)&buf, 0xCu);
        }
      }
    }
    else
    {
      uint64_t v7 = v4[60];
      if (v7) {
        goto LABEL_6;
      }
    }
    uint64_t v11 = *(void *)(a1 + 56);
    std::string::__init_copy_ctor_external(&buf, v5, 0x2BuLL);
    (*(void (**)(uint64_t, uint64_t, std::string *))(v11 + 16))(v11, 3760250880, &buf);
LABEL_11:
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    operator delete(v5);
    return;
  }
  uint64_t v12 = v4[22];
  if (!v12)
  {
    xpc_object_t v5 = (char *)operator new(0x38uLL);
    strcpy(v5, "Baseband shutdown did not complete rfs sync in-time");
    uint64_t v21 = *(void *)(a1 + 56);
    std::string::__init_copy_ctor_external(&buf, v5, 0x33uLL);
    (*(void (**)(uint64_t, uint64_t, std::string *))(v21 + 16))(v21, 3760250880, &buf);
    goto LABEL_11;
  }
  uint64_t v13 = v4[11];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_DEFAULT, "#I Poweroff: RFS sync request completed; wait for reset detection",
      (uint8_t *)&buf,
      2u);
    uint64_t v12 = v4[22];
  }
  size_t v14 = (char *)operator new(0x28uLL);
  char v27 = v14;
  long long v28 = xmmword_1C5BC27D0;
  strcpy(v14, "Poweroff: Wait for reset detection");
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 1174405120;
  v23[2] = ___ZN13BootModuleICE13shutdown_syncEN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke_18;
  v23[3] = &__block_descriptor_tmp_23_2;
  uint64_t v16 = *(void *)(a1 + 40);
  int v15 = *(std::__shared_weak_count **)(a1 + 48);
  v23[4] = v4;
  void v23[5] = v16;
  BOOL v24 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = *(void **)(a1 + 56);
  if (v17) {
    uint64_t v17 = _Block_copy(v17);
  }
  xpc_object_t aBlock = v17;
  uint64_t v18 = _Block_copy(v23);
  size_t v26 = v18;
  dispatch_time_t v19 = dispatch_time(0, 3000000000);
  ResetDetection::add(v12, (uint64_t)&v27, 1, &v26, v19);
  if (v18) {
    _Block_release(v18);
  }
  operator delete(v14);
  if (aBlock) {
    _Block_release(aBlock);
  }
  uint64_t v20 = v24;
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_1C5A73500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *aBlock)
{
  if (*(char *)(v17 - 57) < 0)
  {
    operator delete(*(void **)(v17 - 80));
    operator delete(v16);
    _Unwind_Resume(a1);
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

void ___ZN13BootModuleICE13shutdown_syncEN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke_18(uint64_t a1, int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 32);
  if (a2)
  {
    xpc_object_t v5 = (char *)operator new(0x30uLL);
    strcpy(v5, "Poweroff: Timeout waiting for reset detection");
    long long v6 = *(NSObject **)(v4 + 88);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
      _os_log_error_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&__p, 0xCu);
    }
    uint64_t v7 = *(void *)(a1 + 56);
    std::string::__init_copy_ctor_external(&__p, v5, 0x2DuLL);
    (*(void (**)(uint64_t, uint64_t, std::string *))(v7 + 16))(v7, 3760250883, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    operator delete(v5);
  }
  else
  {
    int v8 = *(NSObject **)(v4 + 88);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_DEFAULT, "#I Poweroff: Baseband asserted reset detection line", (uint8_t *)&__p, 2u);
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 0;
    dispatch::block<void({block_pointer})(int,std::string)>::operator()<int,char const(&)[1]>((uint64_t *)(a1 + 56), (unsigned int *)&__p, "");
  }
  uint64_t v9 = *(void *)(v4 + 480);
  if (v9)
  {
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 80))(v9);
    uint64_t v11 = *(NSObject **)(v4 + 88);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = "forced";
      if (!a2) {
        uint64_t v12 = "graceful";
      }
      uint64_t v13 = "successful";
      if (!v10) {
        uint64_t v13 = "failed";
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v13;
      _os_log_impl(&dword_1C59C6000, v11, OS_LOG_TYPE_DEFAULT, "#I Baseband poweroff (%s) %s", (uint8_t *)&__p, 0x16u);
    }
  }
}

void sub_1C5A73800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    operator delete(v14);
    _Unwind_Resume(a1);
  }
  operator delete(v14);
  _Unwind_Resume(a1);
}

void dispatch::block<void({block_pointer})(int,std::string)>::operator()<int,char const(&)[1]>(uint64_t *a1, unsigned int *a2, char *__s)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  size_t v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    int v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    unint64_t v12 = v10 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_8;
  }
  HIBYTE(v12) = v6;
  int v8 = __dst;
  if (v6) {
LABEL_8:
  }
    memcpy(v8, __s, (size_t)v7);
  *((unsigned char *)v7 + (void)v8) = 0;
  (*(void (**)(uint64_t, uint64_t, void **))(v4 + 16))(v4, v5, __dst);
  if (SHIBYTE(v12) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_1C5A73928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrI10BootModuleEE56c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  double result = (void *)a2[7];
  if (result) {
    double result = _Block_copy(result);
  }
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrI10BootModuleEE56c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void *__copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10BootModuleEE56c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  double result = (void *)a2[7];
  if (result) {
    double result = _Block_copy(result);
  }
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10BootModuleEE56c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void ___ZN13BootModuleICE21shutdownAndFlush_syncEN8dispatch8callbackIU13block_pointerFviN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEE_block_invoke(void *a1, int a2, uint64_t a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[4];
  if (a2)
  {
    memset(&__p, 0, sizeof(__p));
    if (a2 == -534716413)
    {
      block.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
      *(_OWORD *)&block.__r_.__value_.__r.__words[1] = xmmword_1C5BC6F90;
      strcpy(block.__r_.__value_.__l.__data_, "Timeout shutting down baseband: ");
      int v7 = *(char *)(a3 + 23);
      if (v7 >= 0) {
        int v8 = (const std::string::value_type *)a3;
      }
      else {
        int v8 = *(const std::string::value_type **)a3;
      }
      if (v7 >= 0) {
        std::string::size_type v9 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        std::string::size_type v9 = *(void *)(a3 + 8);
      }
    }
    else
    {
      block.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
      *(_OWORD *)&block.__r_.__value_.__r.__words[1] = xmmword_1C5BC6F80;
      strcpy(block.__r_.__value_.__l.__data_, "Error shutting down baseband: ");
      int v13 = *(char *)(a3 + 23);
      if (v13 >= 0) {
        int v8 = (const std::string::value_type *)a3;
      }
      else {
        int v8 = *(const std::string::value_type **)a3;
      }
      if (v13 >= 0) {
        std::string::size_type v9 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        std::string::size_type v9 = *(void *)(a3 + 8);
      }
    }
    size_t v14 = std::string::append(&block, v8, v9);
    std::string::size_type v15 = v14->__r_.__value_.__r.__words[0];
    v30[0] = v14->__r_.__value_.__l.__size_;
    *(void *)((char *)v30 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
    char v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    __p.__r_.__value_.__r.__words[0] = v15;
    __p.__r_.__value_.__l.__size_ = v30[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v30 + 7);
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = v16;
    if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(block.__r_.__value_.__l.__data_);
    }
    uint64_t v17 = *(NSObject **)(v4 + 88);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(block.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)block.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
      _os_log_error_impl(&dword_1C59C6000, v17, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&block, 0xCu);
    }
    v30[0] = 0;
    uint64_t v18 = *MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v21 = Mutable;
    if (Mutable) {
      v30[0] = Mutable;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&block, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string block = __p;
    }
    ctu::cf::insert<char const*,std::string>(v21, (const __CFString **)*MEMORY[0x1E4F4C240], (uint64_t)&block, v18, v20);
    if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(block.__r_.__value_.__l.__data_);
      if (!v21) {
        goto LABEL_37;
      }
    }
    else if (!v21)
    {
LABEL_37:
      int v22 = (const void *)a1[5];
      if (v22) {
        long long v23 = _Block_copy(v22);
      }
      else {
        long long v23 = 0;
      }
      BOOL v24 = a1[6];
      block.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
      block.__r_.__value_.__l.__size_ = 1174405120;
      block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFviN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEclIJiNS3_IS4_EEEEEvDpT__block_invoke;
      size_t v32 = &__block_descriptor_tmp_44_0;
      if (v23)
      {
        size_t v25 = _Block_copy(v23);
        int v35 = a2;
        xpc_object_t aBlock = v25;
        CFTypeRef cf = v21;
        if (!v21) {
          goto LABEL_45;
        }
      }
      else
      {
        int v35 = a2;
        xpc_object_t aBlock = 0;
        CFTypeRef cf = v21;
        if (!v21)
        {
LABEL_45:
          dispatch_async(v24, &block);
          if (cf) {
            CFRelease(cf);
          }
          if (aBlock) {
            _Block_release(aBlock);
          }
          if (v23) {
            _Block_release(v23);
          }
          if (v21)
          {
            CFRelease(v21);
            CFRelease(v21);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          return;
        }
      }
      CFRetain(v21);
      goto LABEL_45;
    }
    CFRetain(v21);
    goto LABEL_37;
  }
  uint64_t v10 = (const void *)a1[5];
  if (!v10)
  {
    uint64_t v11 = 0;
    unint64_t v12 = a1[6];
    long long v28 = 0;
    uint64_t v29 = v12;
    if (!v12) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  uint64_t v11 = _Block_copy(v10);
  unint64_t v12 = a1[6];
  long long v28 = v11;
  uint64_t v29 = v12;
  if (v12) {
LABEL_11:
  }
    dispatch_retain(v12);
LABEL_12:
  BootModuleICE::requestFSSync_sync(v4, (uint64_t)&v28);
  if (v12) {
    dispatch_release(v12);
  }
  if (v11) {
    _Block_release(v11);
  }
}

void sub_1C5A73E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c87_ZTSN8dispatch8callbackIU13block_pointerFviN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 40);
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  uint64_t v5 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  if (v5)
  {
    dispatch_retain(v5);
  }
}

void __destroy_helper_block_e8_40c87_ZTSN8dispatch8callbackIU13block_pointerFviN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

void BootModuleICE::issueShutdownComand_sync(void *a1, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (uint64_t v5 = std::__shared_weak_count::lock(v3)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v6 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v29 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  int v7 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v8 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)buf, v7);
    long long v9 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    uint64_t v10 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v9;
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    uint64_t v11 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v8 = off_1EBBDCA08;
  }
  unint64_t v12 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  uint64_t v24 = v8;
  uint64_t v25 = *(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v8 + 16))(&v26, v8);
  unint64_t v28 = 0;
  uint64_t v29 = 0;
  if (v27)
  {
    uint64_t v29 = std::__shared_weak_count::lock(v27);
    if (v29) {
      unint64_t v28 = v26;
    }
    if (v27) {
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    unint64_t v13 = v28;
    if (v28)
    {
LABEL_23:
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 1174405120;
      unint64_t v20[2] = ___ZN13BootModuleICE24issueShutdownComand_syncENSt3__110shared_ptrIN4util18GuaranteedCallbackEEE_block_invoke;
      v20[3] = &__block_descriptor_tmp_33_1;
      size_t v14 = (std::__shared_weak_count *)a2[1];
      uint8_t v20[4] = *a2;
      uint64_t v21 = v14;
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::size_type v15 = _Block_copy(v20);
      char v16 = a1[17];
      if (v16) {
        dispatch_retain(v16);
      }
      xpc_object_t aBlock = v15;
      dispatch_object_t object = v16;
      (*(void (**)(unint64_t, void, void **))(*(void *)v13 + 64))(v13, 0, &aBlock);
      if (object) {
        dispatch_release(object);
      }
      if (aBlock) {
        _Block_release(aBlock);
      }
      uint64_t v17 = v21;
      if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
        uint64_t v18 = v29;
        if (!v29) {
          goto LABEL_40;
        }
        goto LABEL_38;
      }
LABEL_37:
      uint64_t v18 = v29;
      if (!v29) {
        goto LABEL_40;
      }
      goto LABEL_38;
    }
  }
  else
  {
    unint64_t v13 = v28;
    if (v28) {
      goto LABEL_23;
    }
  }
  dispatch_time_t v19 = a1[11];
  if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
    goto LABEL_37;
  }
  *(_WORD *)std::string buf = 0;
  _os_log_error_impl(&dword_1C59C6000, v19, OS_LOG_TYPE_ERROR, "Driver unavailable for baseband shutdown", buf, 2u);
  uint64_t v18 = v29;
  if (!v29) {
    goto LABEL_40;
  }
LABEL_38:
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
LABEL_40:
  std::__shared_weak_count::__release_weak(v6);
}

void sub_1C5A743D4(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void ___ZN13BootModuleICE24issueShutdownComand_syncENSt3__110shared_ptrIN4util18GuaranteedCallbackEEE_block_invoke(uint64_t a1, ctu::cf **a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*a2) {
    uint64_t v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  ctu::cf::show((uint64_t *)v12, *a2, a2);
  if (v13 >= 0) {
    uint64_t v4 = v12;
  }
  else {
    uint64_t v4 = (void **)v12[0];
  }
  size_t v5 = strlen((const char *)v4);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v6;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_14;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
  p_dst = &__dst;
  if (v5) {
LABEL_14:
  }
    memmove(p_dst, v4, v6);
  p_dst->__r_.__value_.__s.__data_[v6] = 0;
  if (v3) {
    int v10 = -534716414;
  }
  else {
    int v10 = 0;
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZN4util18GuaranteedCallback3runEiNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_3_5;
  block[4] = v2;
  int v17 = v10;
  int v11 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = __dst;
  }
  if (*(void *)(v2 + 48) == -1)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_23;
    }
  }
  else
  {
    dispatch_once((dispatch_once_t *)(v2 + 48), block);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_23:
      if ((v11 & 0x80000000) == 0) {
        goto LABEL_24;
      }
      goto LABEL_28;
    }
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((v11 & 0x80000000) == 0)
  {
LABEL_24:
    if ((v13 & 0x80000000) == 0) {
      return;
    }
LABEL_29:
    operator delete(v12[0]);
    return;
  }
LABEL_28:
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (v13 < 0) {
    goto LABEL_29;
  }
}

void sub_1C5A74638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  operator delete(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c53_ZTSNSt3__110shared_ptrIN4util18GuaranteedCallbackEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c53_ZTSNSt3__110shared_ptrIN4util18GuaranteedCallbackEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

uint64_t ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (const char *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 16))();
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1C5A74950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C5A7496C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<BootModuleICE>::shared_ptr[abi:ne180100]<BootModuleICE,std::shared_ptr<BootModuleICE> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModuleICE>(BootModuleICE*)::{lambda(BootModuleICE*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2107480;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 120) = a2;
      *(void *)(a2 + 128) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 120) = a2;
  *(void *)(a2 + 128) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C5A74A98(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<BootModuleICE> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModuleICE>(BootModuleICE*)::{lambda(BootModuleICE*)#1}::operator() const(BootModuleICE*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C5A74AC0(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<BootModuleICE *,std::shared_ptr<BootModuleICE> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModuleICE>(BootModuleICE*)::{lambda(BootModuleICE *)#1},std::allocator<BootModuleICE>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<BootModuleICE *,std::shared_ptr<BootModuleICE> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModuleICE>(BootModuleICE*)::{lambda(BootModuleICE *)#1},std::allocator<BootModuleICE>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<BootModuleICE *,std::shared_ptr<BootModuleICE> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModuleICE>(BootModuleICE*)::{lambda(BootModuleICE *)#1},std::allocator<BootModuleICE>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI10BootModuleE15make_shared_ptrI13BootModuleICEEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI10BootModuleE15make_shared_ptrI13BootModuleICEEENSt3__110sh"
                                "ared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI10BootModuleE15make_shared_ptrI13BootModuleICEEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI10BootModuleE15make_shared_ptrI13BootModuleICEEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<BootModuleICE> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModuleICE>(BootModuleICE*)::{lambda(BootModuleICE*)#1}::operator() const(BootModuleICE*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void _ZNSt3__115allocate_sharedB8ne180100I20BootControllerLegacyNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(uint64_t *a1@<X8>)
{
  uint64_t v2 = (std::__shared_weak_count *)operator new(0x88uLL);
  v2->__shared_owners_ = 0;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F21074D0;
  BootController::BootController((BootController *)&v2[1]);
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2110818;
  LOBYTE(v2[5].__shared_owners_) = 1;
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  v2[4].__shared_weak_owners_ = v3;
  v2[5].__vftable = (std::__shared_weak_count_vtbl *)v2;
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1C5A74C9C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<BootControllerLegacy>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F21074D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BootControllerLegacy>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F21074D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<BootControllerLegacy>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedIZZN13BootModuleICE18requestFSSync_syncENS_8callbackIU13block_pointerFviNS1_2cf11CFSharedRefIK14__CFDictionaryEEEEEEUb_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISH_NSM_14default_deleteISH_EEEEENUlPvE_8__invokeESR_(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int v3 = *(_DWORD *)(*a1 + 16);
  uint64_t v4 = *(void **)(*a1 + 24);
  uint64_t v12 = v2;
  xpc_object_t object = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc::bridge((uint64_t *)&cf, (xpc *)&object, v5);
  uint64_t v6 = *(const void **)(v2 + 32);
  if (v6) {
    uint64_t v7 = _Block_copy(v6);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(NSObject **)(v2 + 40);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFviN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEclIJiNS3_IKvEEEEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_43_0;
  if (!v7)
  {
    int v18 = v3;
    CFTypeRef v10 = cf;
    xpc_object_t aBlock = 0;
    CFTypeRef v17 = cf;
    if (!cf) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  uint64_t v9 = _Block_copy(v7);
  int v18 = v3;
  CFTypeRef v10 = cf;
  xpc_object_t aBlock = v9;
  CFTypeRef v17 = cf;
  if (cf) {
LABEL_11:
  }
    CFRetain(v10);
LABEL_12:
  dispatch_async(v8, block);
  if (v17) {
    CFRelease(v17);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v7) {
    _Block_release(v7);
  }
  if (cf) {
    CFRelease(cf);
  }
  xpc_release(object);
  _ZNSt3__110unique_ptrIZZN13BootModuleICE18requestFSSync_syncEN8dispatch8callbackIU13block_pointerFviN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEEEUb_E3__0NS_14default_deleteISD_EEED1B8ne180100Ev(&v12);
  int v11 = (std::__shared_weak_count *)a1[2];
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(a1);
}

void sub_1C5A74EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _ZNSt3__110unique_ptrIZZN13BootModuleICE18requestFSSync_syncEN8dispatch8callbackIU13block_pointerFviN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEEEUb_E3__0NS_14default_deleteISD_EEED1B8ne180100Ev(&a9);
  uint64_t v12 = (std::__shared_weak_count *)v10[2];
  if (v12)
  {
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

uint64_t *_ZNSt3__110unique_ptrIZZN13BootModuleICE18requestFSSync_syncEN8dispatch8callbackIU13block_pointerFviN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEEEUb_E3__0NS_14default_deleteISD_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    int v3 = *(NSObject **)(v2 + 40);
    if (v3) {
      dispatch_release(v3);
    }
    uint64_t v4 = *(const void **)(v2 + 32);
    if (v4) {
      _Block_release(v4);
    }
    xpc_release(*(xpc_object_t *)(v2 + 24));
    *(void *)(v2 + 24) = 0;
    size_t v5 = *(std::__shared_weak_count **)(v2 + 8);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    operator delete((void *)v2);
  }
  return a1;
}

void ___ZNK8dispatch8callbackIU13block_pointerFviN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEclIJiNS3_IKvEEEEEvDpT__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(const void **)(a1 + 40);
  if (v3 && (CFTypeID v4 = CFGetTypeID(*(CFTypeRef *)(a1 + 40)), v4 == CFDictionaryGetTypeID()))
  {
    CFTypeRef cf = v3;
    CFRetain(v3);
  }
  else
  {
    CFTypeRef cf = 0;
  }
  (*(void (**)(uint64_t, uint64_t, CFTypeRef *))(v2 + 16))(v2, v1, &cf);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C5A750B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e8_32c84_ZTSN8dispatch5blockIU13block_pointerFviN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEE40c30_ZTSN3ctu2cf11CFSharedRefIKvEE(uint64_t a1, uint64_t a2)
{
  CFTypeID v4 = *(const void **)(a2 + 32);
  if (!v4)
  {
    CFTypeRef result = *(CFTypeRef *)(a2 + 40);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = result;
    if (!result) {
      return result;
    }
    return CFRetain(result);
  }
  size_t v5 = _Block_copy(v4);
  CFTypeRef result = *(CFTypeRef *)(a2 + 40);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_32c84_ZTSN8dispatch5blockIU13block_pointerFviN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEE40c30_ZTSN3ctu2cf11CFSharedRefIKvEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
  int v3 = *(const void **)(a1 + 32);
  if (v3) {
    _Block_release(v3);
  }
}

void ___ZNK8dispatch8callbackIU13block_pointerFviN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEclIJiNS3_IS4_EEEEEvDpT__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(const void **)(a1 + 40);
  if (v3 && (CFTypeID v4 = CFGetTypeID(*(CFTypeRef *)(a1 + 40)), v4 == CFDictionaryGetTypeID()))
  {
    CFTypeRef cf = v3;
    CFRetain(v3);
  }
  else
  {
    CFTypeRef cf = 0;
  }
  (*(void (**)(uint64_t, uint64_t, CFTypeRef *))(v2 + 16))(v2, v1, &cf);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C5A751FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e8_32c84_ZTSN8dispatch5blockIU13block_pointerFviN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEE40c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  CFTypeID v4 = *(const void **)(a2 + 32);
  if (!v4)
  {
    CFTypeRef result = *(CFTypeRef *)(a2 + 40);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = result;
    if (!result) {
      return result;
    }
    return CFRetain(result);
  }
  size_t v5 = _Block_copy(v4);
  CFTypeRef result = *(CFTypeRef *)(a2 + 40);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_32c84_ZTSN8dispatch5blockIU13block_pointerFviN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEE40c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
  int v3 = *(const void **)(a1 + 32);
  if (v3) {
    _Block_release(v3);
  }
}

uint64_t __cxx_global_var_init_34()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

uint64_t __cxx_global_var_init_35()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

uint64_t abm::ParseWakeDataIP(xpc_object_t *a1, xpc_object_t *a2)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = MEMORY[0x1C8795EB0](*a1);
  uint64_t v5 = MEMORY[0x1E4F14590];
  if (v4 != MEMORY[0x1E4F14590] || MEMORY[0x1C8795EB0](*a2) != v5) {
    return 0;
  }
  xpc_object_t v7 = xpc_string_create((const char *)*MEMORY[0x1E4F4C618]);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C568], v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  xpc_object_t v9 = xpc_string_create((const char *)*MEMORY[0x1E4F4C6F8]);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C918], v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  xpc_object_t v11 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v12 = v11;
  if (v11)
  {
    xpc_object_t xdict = v11;
  }
  else
  {
    xpc_object_t v12 = xpc_null_create();
    xpc_object_t xdict = v12;
    if (!v12)
    {
      xpc_object_t v13 = xpc_null_create();
      xpc_object_t v12 = 0;
      goto LABEL_15;
    }
  }
  if (MEMORY[0x1C8795EB0](v12) == v5)
  {
    xpc_retain(v12);
    goto LABEL_16;
  }
  xpc_object_t v13 = xpc_null_create();
LABEL_15:
  xpc_object_t xdict = v13;
LABEL_16:
  xpc_release(v12);
  memset(v55, 170, sizeof(v55));
  xpc_object_t value = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x1E4F4C560]);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  memset(__p, 0, 24);
  xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  if (v55[1] == v55[0])
  {
    xpc_object_t v35 = xpc_BOOL_create(1);
    if (!v35) {
      xpc_object_t v35 = xpc_null_create();
    }
  }
  else
  {
    int v15 = *(unsigned __int8 *)v55[0] >> 4;
    if (v15 == 6)
    {
      xpc_object_t v37 = xpc_string_create((const char *)*MEMORY[0x1E4F4CCF8]);
      if (!v37) {
        xpc_object_t v37 = xpc_null_create();
      }
      xpc_object_t v17 = xdict;
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4CB60], v37);
      xpc_object_t v38 = xpc_null_create();
      xpc_release(v37);
      xpc_release(v38);
      if ((void *)((char *)v55[1] - (char *)v55[0]) >= (void *)0x28)
      {
        memset(__p, 0, 47);
        *(_OWORD *)xpc_object_t object = 0u;
        memset(v59, 0, sizeof(v59));
        inet_ntop(30, (char *)v55[0] + 8, (char *)__p, 0x2Eu);
        inet_ntop(30, (char *)v55[0] + 24, (char *)object, 0x2Eu);
        xpc_object_t v39 = xpc_string_create((const char *)__p);
        if (!v39) {
          xpc_object_t v39 = xpc_null_create();
        }
        xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4CFF0], v39);
        xpc_object_t v40 = xpc_null_create();
        xpc_release(v39);
        xpc_release(v40);
        xpc_object_t v41 = xpc_string_create((const char *)object);
        if (!v41) {
          xpc_object_t v41 = xpc_null_create();
        }
        xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4D1F0], v41);
        xpc_object_t v42 = xpc_null_create();
        xpc_release(v41);
        xpc_release(v42);
        int v43 = *((unsigned __int8 *)v55[0] + 6);
        memset(&v57, 170, sizeof(v57));
        abm::_ProtocolAsString(&v57, v43);
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unsigned __int8 v44 = &v57;
        }
        else {
          unsigned __int8 v44 = (std::string *)v57.__r_.__value_.__r.__words[0];
        }
        xpc_object_t v45 = xpc_string_create((const char *)v44);
        if (!v45) {
          xpc_object_t v45 = xpc_null_create();
        }
        xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4CC80], v45);
        xpc_object_t v46 = xpc_null_create();
        xpc_release(v45);
        xpc_release(v46);
        int v47 = SHIBYTE(v57.__r_.__value_.__r.__words[2]);
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t size = v57.__r_.__value_.__l.__size_;
        }
        if (size == strlen((const char *)*MEMORY[0x1E4F4CCE0])
          && ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? (char v49 = &v57)
            : (char v49 = (std::string *)v57.__r_.__value_.__r.__words[0]),
              !memcmp(v49, (const void *)*MEMORY[0x1E4F4CCE0], size))
          || size == strlen((const char *)*MEMORY[0x1E4F4CCE8])
          && (v47 >= 0 ? (char v51 = &v57) : (char v51 = (std::string *)v57.__r_.__value_.__r.__words[0]),
              !memcmp(v51, (const void *)*MEMORY[0x1E4F4CCE8], size)))
        {
          if ((void *)((char *)v55[1] - (char *)v55[0]) >= (void *)0x2C)
          {
            abm::_ParsePortData((abm *)v55[0], (unsigned __int8 *)0x28, &xdict, v50);
            LOBYTE(v47) = *((unsigned char *)&v57.__r_.__value_.__s + 23);
          }
        }
        if ((v47 & 0x80) != 0) {
          operator delete(v57.__r_.__value_.__l.__data_);
        }
        goto LABEL_92;
      }
      xpc_object_t v52 = xpc_BOOL_create(1);
      if (!v52) {
        xpc_object_t v52 = xpc_null_create();
      }
LABEL_91:
      xpc_dictionary_set_value(v17, (const char *)*MEMORY[0x1E4F4D110], v52);
      xpc_object_t v53 = xpc_null_create();
      xpc_release(v52);
      xpc_release(v53);
      goto LABEL_92;
    }
    if (v15 == 4)
    {
      xpc_object_t v16 = xpc_string_create((const char *)*MEMORY[0x1E4F4CCF0]);
      if (!v16) {
        xpc_object_t v16 = xpc_null_create();
      }
      xpc_object_t v17 = xdict;
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4CB60], v16);
      xpc_object_t v18 = xpc_null_create();
      xpc_release(v16);
      xpc_release(v18);
      if ((void *)((char *)v55[1] - (char *)v55[0]) >= (void *)0x14)
      {
        memset(__p, 170, 24);
        abm::_ProtocolAsString(__p, *((unsigned __int8 *)v55[0] + 9));
        unsigned int v20 = *((_DWORD *)v55[0] + 3);
        unsigned int v19 = *((_DWORD *)v55[0] + 4);
        char v21 = *(unsigned char *)v55[0];
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v22 = __p;
        }
        else {
          int v22 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
        }
        xpc_object_t v23 = xpc_string_create((const char *)v22);
        if (!v23) {
          xpc_object_t v23 = xpc_null_create();
        }
        xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4CC80], v23);
        xpc_object_t v24 = xpc_null_create();
        xpc_release(v23);
        xpc_release(v24);
        xpc_object_t v25 = xpc_int64_create(bswap32(v20));
        if (!v25) {
          xpc_object_t v25 = xpc_null_create();
        }
        xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4CFF0], v25);
        xpc_object_t v26 = xpc_null_create();
        xpc_release(v25);
        xpc_release(v26);
        xpc_object_t v27 = xpc_int64_create(bswap32(v19));
        if (!v27) {
          xpc_object_t v27 = xpc_null_create();
        }
        xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4D1F0], v27);
        xpc_object_t v28 = xpc_null_create();
        xpc_release(v27);
        xpc_release(v28);
        int v29 = SHIBYTE(__p[0].__r_.__value_.__r.__words[2]);
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v30 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v30 = __p[0].__r_.__value_.__l.__size_;
        }
        if (v30 == strlen((const char *)*MEMORY[0x1E4F4CCE0])
          && ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? (size_t v31 = __p)
            : (size_t v31 = (std::string *)__p[0].__r_.__value_.__r.__words[0]),
              !memcmp(v31, (const void *)*MEMORY[0x1E4F4CCE0], v30))
          || v30 == strlen((const char *)*MEMORY[0x1E4F4CCE8])
          && (v29 >= 0 ? (float64x2x2_t v33 = __p) : (float64x2x2_t v33 = (std::string *)__p[0].__r_.__value_.__r.__words[0]),
              !memcmp(v33, (const void *)*MEMORY[0x1E4F4CCE8], v30)))
        {
          uint64_t v34 = (unsigned __int8 *)(4 * (v21 & 0xF));
          if ((void *)((char *)v55[1] - (char *)v55[0]) >= v34 + 4)
          {
            abm::_ParsePortData((abm *)v55[0], v34, &xdict, v32);
            LOBYTE(v29) = *((unsigned char *)&__p[0].__r_.__value_.__s + 23);
          }
        }
        if ((v29 & 0x80) != 0) {
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
        goto LABEL_92;
      }
      xpc_object_t v52 = xpc_BOOL_create(1);
      if (!v52) {
        xpc_object_t v52 = xpc_null_create();
      }
      goto LABEL_91;
    }
    xpc_object_t v35 = xpc_BOOL_create(1);
    if (!v35) {
      xpc_object_t v35 = xpc_null_create();
    }
  }
  xpc_object_t v17 = xdict;
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4D110], v35);
  xpc_object_t v36 = xpc_null_create();
  xpc_release(v35);
  xpc_release(v36);
LABEL_92:
  if (v17) {
    xpc_retain(v17);
  }
  else {
    xpc_object_t v17 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4CC78], v17);
  xpc_object_t v54 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v54);
  if (v55[0])
  {
    v55[1] = v55[0];
    operator delete(v55[0]);
  }
  xpc_release(xdict);
  return 1;
}

void sub_1C5A75BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, xpc_object_t object, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

std::string *abm::_ProtocolAsString(std::string *this, int a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a2 > 16)
  {
    if (a2 == 17)
    {
      int v3 = (const std::string::value_type **)MEMORY[0x1E4F4CCE8];
      return std::string::__assign_external(this, *v3);
    }
    if (a2 == 58)
    {
      int v3 = (const std::string::value_type **)MEMORY[0x1E4F4D0B8];
      return std::string::__assign_external(this, *v3);
    }
  }
  else
  {
    if (a2 == 1)
    {
      int v3 = (const std::string::value_type **)MEMORY[0x1E4F4CDA0];
      return std::string::__assign_external(this, *v3);
    }
    if (a2 == 6)
    {
      int v3 = (const std::string::value_type **)MEMORY[0x1E4F4CCE0];
      return std::string::__assign_external(this, *v3);
    }
  }
  unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v21[7] = v4;
  v21[8] = v4;
  v21[5] = v4;
  v21[6] = v4;
  v21[3] = v4;
  v21[4] = v4;
  v21[1] = v4;
  v21[2] = v4;
  v21[0] = v4;
  long long v19 = v4;
  long long v20 = v4;
  long long v17 = v4;
  *(_OWORD *)std::string __p = v4;
  long long v15 = v4;
  long long v16 = v4;
  long long v14 = v4;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Protocol #", 10);
  std::ostream::operator<<();
  if ((BYTE8(v20) & 0x10) != 0)
  {
    uint64_t v8 = v20;
    if ((unint64_t)v20 < *((void *)&v17 + 1))
    {
      *(void *)&long long v20 = *((void *)&v17 + 1);
      uint64_t v8 = *((void *)&v17 + 1);
    }
    xpc_object_t v9 = (const void *)v17;
    size_t v5 = v8 - v17;
    if ((unint64_t)(v8 - v17) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_30;
    }
  }
  else
  {
    if ((BYTE8(v20) & 8) == 0)
    {
      size_t v5 = 0;
      HIBYTE(v13) = 0;
      p_dst = &__dst;
      goto LABEL_24;
    }
    xpc_object_t v9 = (const void *)*((void *)&v15 + 1);
    size_t v5 = *((void *)&v16 + 1) - *((void *)&v15 + 1);
    if (*((void *)&v16 + 1) - *((void *)&v15 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_30:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 >= 0x17)
  {
    uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v10 = v5 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (long long *)operator new(v10 + 1);
    *((void *)&__dst + 1) = v5;
    unint64_t v13 = v11 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v13) = v5;
    p_dst = &__dst;
    if (!v5) {
      goto LABEL_24;
    }
  }
  memmove(p_dst, v9, v5);
LABEL_24:
  *((unsigned char *)p_dst + v5) = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    operator delete(this->__r_.__value_.__l.__data_);
  }
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = __dst;
  this->__r_.__value_.__r.__words[2] = v13;
  *(void *)&long long v14 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v14 + *(void *)(v14 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v14 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (std::string *)MEMORY[0x1C8795140](v21);
}

void sub_1C5A7607C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (*(char *)(v13 + 23) < 0) {
    operator delete(*(void **)v13);
  }
  _Unwind_Resume(exception_object);
}

void abm::_ParsePortData(abm *this, unsigned __int8 *a2, xpc_object_t *a3, xpc::dict *a4)
{
  size_t v5 = (unsigned __int16 *)((char *)this + a2);
  xpc_object_t v6 = xpc_int64_create(bswap32(*v5) >> 16);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a3, (const char *)*MEMORY[0x1E4F4CE38], v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  xpc_object_t v8 = xpc_int64_create(bswap32(v5[1]) >> 16);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a3, (const char *)*MEMORY[0x1E4F4D118], v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
}

void HealthModule::create(uint64_t *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  long long v4 = operator new(0xC0uLL);
  size_t v5 = (std::__shared_weak_count *)a1[1];
  uint64_t v24 = *a1;
  xpc_object_t v25 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v6 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v7 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v28, v6);
    long long v8 = v28;
    long long v28 = 0uLL;
    xpc_object_t v9 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v8;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    uint64_t v10 = (std::__shared_weak_count *)*((void *)&v28 + 1);
    if (*((void *)&v28 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v28 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    uint64_t v7 = off_1EBBDCA08;
  }
  uint64_t v11 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(dispatch_object_t *__return_ptr, uint64_t))(*(void *)v7 + 24))(&object, v7);
  HealthModule::HealthModule((uint64_t)v4, &v24, &object);
  *a2 = v4;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v12 = (std::__shared_weak_count *)operator new(0x20uLL);
  v12->__shared_owners_ = 0;
  p_shared_owners = &v12->__shared_owners_;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2107780;
  v12->__shared_weak_owners_ = 0;
  v12[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  a2[1] = v12;
  long long v14 = (std::__shared_weak_count *)*((void *)v4 + 16);
  if (v14)
  {
    if (v14->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *((void *)v4 + 15) = v4;
      *((void *)v4 + 16) = v12;
      std::__shared_weak_count::__release_weak(v14);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_16:
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
        long long v15 = (void *)*a2;
        if (!*(void *)(*a2 + 104)) {
          goto LABEL_30;
        }
        goto LABEL_20;
      }
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v4 + 15) = v4;
    *((void *)v4 + 16) = v12;
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_16;
    }
  }
  long long v15 = (void *)*a2;
  if (!*(void *)(*a2 + 104)) {
    goto LABEL_30;
  }
LABEL_20:
  long long v16 = (std::__shared_weak_count *)v15[16];
  if (!v16 || (v17 = v15[15], (xpc_object_t v18 = std::__shared_weak_count::lock(v16)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v19 = v18;
  *(void *)&long long v28 = v17;
  *((void *)&v28 + 1) = v18;
  ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v15 + 7));
  uint64_t v20 = v17 + 48;
  if (!v17) {
    uint64_t v20 = 0;
  }
  uint64_t v26 = v20;
  xpc_object_t v27 = v19;
  long long v28 = 0uLL;
  ctu::TrackedLogger::registerLoggerToServer();
  char v21 = v27;
  if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  unint64_t v22 = (std::__shared_weak_count *)*((void *)&v28 + 1);
  if (*((void *)&v28 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v28 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
LABEL_30:
  if (object) {
    dispatch_release(object);
  }
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v25) {
    std::__shared_weak_count::__release_weak(v25);
  }
}

void sub_1C5A76568(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, dispatch_object_t object, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
}

void sub_1C5A765D0()
{
}

void sub_1C5A765E0()
{
}

void sub_1C5A765EC()
{
}

void sub_1C5A765FC()
{
}

unsigned char *HealthModule::getShutdownStages@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  int v3 = operator new(1uLL);
  *a1 = v3;
  unsigned char *v3 = 3;
  uint64_t result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void HealthModule::initialize(void *a1, dispatch_object_t *a2)
{
  uint64_t v6 = a1[15];
  long long v4 = (std::__shared_weak_count *)a1[16];
  size_t v5 = a1 + 15;
  if (!v4 || (long long v8 = std::__shared_weak_count::lock(v4)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = *a2;
  char v21 = a1;
  dispatch_group_t group = v10;
  if (v10)
  {
    dispatch_retain(v10);
    dispatch_group_enter(v10);
  }
  uint64_t v23 = v6;
  uint64_t v24 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI12HealthModuleE20execute_wrapped_syncIZNS1_10initializeEN8dispatch13group_sessionEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_30;
  void block[4] = v5;
  void block[5] = &v21;
  uint64_t v11 = a1[17];
  if (!a1[18])
  {
    dispatch_sync(v11, block);
    xpc_object_t v12 = v24;
    if (!v24) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  dispatch_async_and_wait(v11, block);
  xpc_object_t v12 = v24;
  if (v24) {
LABEL_9:
  }
    std::__shared_weak_count::__release_weak(v12);
LABEL_10:
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  uint64_t v13 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v13);
  }
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  long long v14 = (std::__shared_weak_count *)a1[16];
  if (!v14 || (uint64_t v15 = a1[15], (v16 = std::__shared_weak_count::lock(v14)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v17 = v16;
  xpc_object_t v18 = operator new(0x20uLL);
  *xpc_object_t v18 = a1;
  v18[1] = v13;
  unint64_t v18[2] = v6;
  v18[3] = v9;
  long long v19 = a1[17];
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v20 = operator new(0x18uLL);
  *uint64_t v20 = v18;
  v20[1] = v15;
  unint64_t v20[2] = v17;
  dispatch_async_f(v19, v20, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<HealthModule>::execute_wrapped<HealthModule::initialize(dispatch::group_session)::$_1>(HealthModule::initialize(dispatch::group_session)::$_1 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<HealthModule::initialize(dispatch::group_session)::$_1,dispatch_queue_s *::default_delete<HealthModule::initialize(dispatch::group_session)::$_1>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  std::__shared_weak_count::__release_weak(v9);
}

void HealthModule::shutdown(void *a1, char a2, NSObject **a3)
{
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 1174405120;
  v13[2] = ___ZN12HealthModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v13[3] = &__block_descriptor_tmp_27;
  size_t v5 = *a3;
  v13[4] = a1;
  dispatch_group_t group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(group);
  }
  char v15 = a2;
  uint64_t v6 = (std::__shared_weak_count *)a1[16];
  if (!v6 || (uint64_t v7 = a1[15], (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v9 = v8;
  uint64_t v10 = a1[17];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI12HealthModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F2107908;
  void block[5] = v7;
  uint64_t v17 = v9;
  p_shared_owners = &v9->__shared_owners_;
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = v13;
  dispatch_async(v10, block);
  xpc_object_t v12 = v17;
  if (!v17 || atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_9:
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void ___ZN12HealthModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 160);
  *(void *)(v1 + 152) = 0;
  *(void *)(v1 + 160) = 0;
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

const char *HealthModule::getName(HealthModule *this)
{
  return "health.mod";
}

void HealthModule::~HealthModule(HealthModule *this)
{
  *(void *)this = &unk_1F21075B0;
  *((void *)this + 6) = &unk_1F2107620;
  uint64_t v2 = *((void *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v13, 2u);
  }
  uint64_t v3 = *((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  long long v4 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    size_t v5 = (std::__shared_weak_count *)*((void *)this + 20);
    if (!v5) {
      goto LABEL_11;
    }
  }
  else
  {
    size_t v5 = (std::__shared_weak_count *)*((void *)this + 20);
    if (!v5) {
      goto LABEL_11;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  *((void *)this + 6) = &unk_1F2107740;
  MEMORY[0x1C87940C0]((char *)this + 56);
  uint64_t v6 = *((void *)this + 18);
  if (v6) {
    dispatch_release(v6);
  }
  uint64_t v7 = *((void *)this + 17);
  if (v7) {
    dispatch_release(v7);
  }
  long long v8 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  *(void *)this = &unk_1F2112348;
  uint64_t v9 = *((void *)this + 3);
  if (v9)
  {
    uint64_t v10 = *((void *)this + 4);
    uint64_t v11 = (void *)*((void *)this + 3);
    if (v10 != v9)
    {
      do
      {
        if (*(char *)(v10 - 1) < 0) {
          operator delete(*(void **)(v10 - 24));
        }
        v10 -= 24;
      }
      while (v10 != v9);
      uint64_t v11 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v9;
    operator delete(v11);
  }
  xpc_object_t v12 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
}

{
  void *v1;
  uint64_t vars8;

  HealthModule::~HealthModule(this);

  operator delete(v1);
}

void *ctu::SharedLoggable<HealthModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F2107740;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1F2107740;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void non-virtual thunk to'HealthModule::~HealthModule(HealthModule *this)
{
}

{
  void *v1;
  uint64_t vars8;

  HealthModule::~HealthModule((HealthModule *)((char *)this - 48));

  operator delete(v1);
}

uint64_t HealthModule::HealthModule(uint64_t a1, uint64_t *a2, NSObject **a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1F2112348;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v6);
    *(void *)a1 = &unk_1F2103EC0;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &unk_1F2103EC0;
  }
  *(void *)a1 = &unk_1F21075B0;
  *(void *)(a1 + 48) = &unk_1F2107620;
  uint64_t v7 = *a3;
  if (v7)
  {
    dispatch_retain(v7);
    long long v8 = *(uint64_t (***)(void))a1;
  }
  else
  {
    long long v8 = (uint64_t (**)(void))&unk_1F21075B0;
  }
  uint64_t v9 = (const char *)v8[2](a1);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v23, "com.apple.telephony.abm", v9);
  GetABMLogServer(&v21);
  if (v7) {
    dispatch_retain(v7);
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v11 = dispatch_queue_create_with_target_V2("health.mod", initially_inactive, v7);
  dispatch_set_qos_class_floor(v11, QOS_CLASS_BACKGROUND, 0);
  dispatch_activate(v11);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  *(void *)(a1 + 144) = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  if (v11) {
    dispatch_release(v11);
  }
  if (v7) {
    dispatch_release(v7);
  }
  *(void *)(a1 + 48) = &unk_1F2107740;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v25);
  *(void *)(a1 + 56) = &unk_1F2102CB8;
  xpc_object_t v12 = v22;
  *(void *)(a1 + 104) = v21;
  *(void *)(a1 + 112) = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v24);
  *(void *)(a1 + 48) = &unk_1F2107948;
  uint64_t v13 = v22;
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v23);
  if (v7) {
    dispatch_release(v7);
  }
  *(void *)a1 = &unk_1F21075B0;
  *(void *)(a1 + 48) = &unk_1F2107620;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 184) = 0;
  GetABMLogServer(&v19);
  ctu::DispatchTimerService::create();
  long long v14 = v25;
  long long v25 = 0uLL;
  char v15 = *(std::__shared_weak_count **)(a1 + 176);
  *(_OWORD *)(a1 + 168) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  long long v16 = (std::__shared_weak_count *)*((void *)&v25 + 1);
  if (*((void *)&v25 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v25 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  uint64_t v17 = v20;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  return a1;
}

void sub_1C5A77274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  uint64_t v14 = *((void *)v9 + 23);
  *((void *)v9 + 23) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v12);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v11);
  ctu::SharedLoggable<HealthModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v10);
  Service::~Service(v9);
  _Unwind_Resume(a1);
}

void sub_1C5A772E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v13 = va_arg(va3, void);
  uint64_t v15 = va_arg(va3, void);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v5);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  if (v4) {
    dispatch_release(v4);
  }
  Service::~Service(v3);
  _Unwind_Resume(a1);
}

void HealthModule::getBasebandFWVersion_sync(void *a1, void **a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  size_t v32 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v33 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN12HealthModule25getBasebandFWVersion_syncEN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_6_5;
  void aBlock[4] = a1;
  void aBlock[5] = v5;
  size_t v30 = v7;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v9 = *a2;
  if (*a2) {
    uint64_t v9 = _Block_copy(v9);
  }
  size_t v31 = v9;
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = a1[17];
  if (v11) {
    dispatch_retain(v11);
  }
  size_t v32 = v10;
  dispatch_object_t v33 = v11;
  unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
  long long v28 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v12 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v13 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v34, v12);
    long long v14 = v34;
    long long v34 = 0uLL;
    uint64_t v15 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v14;
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    long long v16 = (std::__shared_weak_count *)*((void *)&v34 + 1);
    if (*((void *)&v34 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v34 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    uint64_t v13 = off_1EBBDCA08;
  }
  uint64_t v17 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  uint64_t v23 = v13;
  uint64_t v24 = *(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v13 + 16))(&v25, v13);
  unint64_t v27 = 0;
  long long v28 = 0;
  if (v26)
  {
    long long v28 = std::__shared_weak_count::lock(v26);
    if (v28) {
      unint64_t v27 = v25;
    }
    if (v26) {
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    unint64_t v18 = v27;
    if (!v27) {
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v18 = v27;
    if (!v27) {
      goto LABEL_35;
    }
  }
  uint64_t v19 = v32;
  if (v32) {
    uint64_t v19 = _Block_copy(v32);
  }
  uint64_t v21 = v19;
  dispatch_object_t object = v33;
  if (v33) {
    dispatch_retain(v33);
  }
  (*(void (**)(unint64_t, void **))(*(void *)v18 + 112))(v18, &v21);
  if (object) {
    dispatch_release(object);
  }
  if (v21) {
    _Block_release(v21);
  }
LABEL_35:
  uint64_t v20 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  if (v33) {
    dispatch_release(v33);
  }
  if (v32) {
    _Block_release(v32);
  }
  if (v31) {
    _Block_release(v31);
  }
  if (v30) {
    std::__shared_weak_count::__release_weak(v30);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1C5A776E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *aBlock)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v25 - 80);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a23) {
    std::__shared_weak_count::__release_weak(a23);
  }
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void ___ZN12HealthModule25getBasebandFWVersion_syncEN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke(void *a1, std::string::size_type *a2, const __CFDictionary **a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  long long v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = a1[4];
  long long v8 = std::__shared_weak_count::lock(v4);
  uint64_t v21 = v8;
  if (!v8) {
    return;
  }
  uint64_t v9 = (std::string::value_type *)0xAAAAAAAAAAAAAA00;
  std::string::size_type v10 = 0xAAAAAAAAAAAAAALL;
  if (a1[5])
  {
    std::string::size_type v11 = *a2;
    if (v11) {
      uint64_t v12 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      uint64_t v12 = 0;
    }
    if (v12)
    {
      uint64_t v13 = *(NSObject **)(v7 + 88);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v22.__r_.__value_.__l.__data_) = 138412290;
        *(std::string::size_type *)((char *)v22.__r_.__value_.__r.__words + 4) = v11;
        _os_log_error_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&v22, 0xCu);
      }
    }
    else
    {
      CFDictionaryRef v17 = *a3;
      if (*a3) {
        unint64_t v18 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        unint64_t v18 = 0;
      }
      if (v18)
      {
        v19[0] = 0xAAAAAAAAAAAAAAAALL;
        v19[1] = 0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v19, v17);
        ctu::cf::map_adapter::getString();
        std::string::size_type size = v22.__r_.__value_.__l.__size_;
        uint64_t v9 = (std::string::value_type *)v22.__r_.__value_.__r.__words[0];
        std::string::size_type v10 = v22.__r_.__value_.__r.__words[2];
        *((unsigned char *)&v22.__r_.__value_.__s + 23) = 0;
        v22.__r_.__value_.__s.__data_[0] = 0;
        MEMORY[0x1C87942E0](v19);
        uint64_t v14 = a1[7];
        if ((v10 & 0x8000000000000000) != 0)
        {
          std::string::__init_copy_ctor_external(&v22, v9, size);
          goto LABEL_12;
        }
LABEL_11:
        v22.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
        v22.__r_.__value_.__l.__size_ = size;
        v22.__r_.__value_.__r.__words[2] = v10;
LABEL_12:
        (*(void (**)(uint64_t, std::string *))(v14 + 16))(v14, &v22);
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v22.__r_.__value_.__l.__data_);
          long long v16 = v21;
          if (!v21) {
            goto LABEL_25;
          }
        }
        else
        {
          long long v16 = v21;
          if (!v21)
          {
LABEL_25:
            if ((v10 & 0x8000000000000000) == 0) {
              return;
            }
            goto LABEL_26;
          }
        }
        if (atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_25;
        }
        goto LABEL_28;
      }
    }
    uint64_t v14 = a1[7];
    std::string::size_type size = 0xAAAAAAAAAAAAAAAALL;
    goto LABEL_11;
  }
  long long v16 = v8;
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_25;
  }
LABEL_28:
  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
  std::__shared_weak_count::__release_weak(v16);
  if ((v10 & 0x8000000000000000) != 0) {
LABEL_26:
  }
    operator delete(v9);
}

void sub_1C5A779E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  operator delete(v7);
  _Unwind_Resume(a1);
}

void sub_1C5A77A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C87942E0](&a16);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_1C5A77A34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (v23 < 0) {
    operator delete(v22);
  }
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12HealthModuleEE56c106_ZTSN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t result = (void *)a2[7];
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12HealthModuleEE56c106_ZTSN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

uint64_t dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

uint64_t HealthModule::getFailureCountInHealthEventDB_sync(NSObject **this)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  if ((void)xmmword_1EBBDCB48) {
    goto LABEL_2;
  }
  uint64_t v2 = (HealthEventDB *)operator new(0xA0uLL);
  HealthEventDB::HealthEventDB(v2);
  uint64_t v3 = (std::__shared_weak_count *)operator new(0x20uLL);
  v3->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F21077D0;
  v3->__shared_owners_ = 0;
  v3->__shared_weak_owners_ = 0;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)v2;
  long long v4 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDCB48 + 1);
  *(void *)&xmmword_1EBBDCB48 = v2;
  *((void *)&xmmword_1EBBDCB48 + 1) = v3;
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
LABEL_2:
    uint64_t v3 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDCB48 + 1);
    uint64_t v2 = (HealthEventDB *)xmmword_1EBBDCB48;
    if (!*((void *)&xmmword_1EBBDCB48 + 1)) {
      goto LABEL_8;
    }
  }
  atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_8:
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  memset(v19, 170, sizeof(v19));
  HealthModule::findMostRecentBarrierHealthEvent_sync((HealthModule *)this, v19);
  if (((LOBYTE(v19[1]) - 3) & 0xFD) != 0) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v19[2];
  }
  if (!*((void *)v2 + 14) || (uint64_t v6 = *((void *)v2 + 12)) == 0)
  {
    uint64_t v7 = 0;
    uint64_t v14 = 0;
    CFDictionaryRef v17 = this[11];
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      return v14 + v7;
    }
    goto LABEL_43;
  }
  uint64_t v7 = 0;
  uint64_t v9 = *((void *)v2 + 10);
  uint64_t v8 = *((void *)v2 + 11);
  uint64_t v10 = *((void *)v2 + 12);
  uint64_t v11 = *((void *)v2 + 13);
  do
  {
    if (*(void *)(v10 + 16) >= v5 && *(unsigned char *)(v10 + 8) == 1) {
      ++v7;
    }
    v10 += 24;
    if (v10 == v8) {
      uint64_t v10 = *((void *)v2 + 10);
    }
  }
  while (v10 != v11 && v10 != 0);
  uint64_t v14 = 0;
  do
  {
    if (*(void *)(v6 + 16) >= v5 && *(unsigned char *)(v6 + 8) == 4) {
      ++v14;
    }
    v6 += 24;
    if (v6 == v8) {
      uint64_t v6 = v9;
    }
  }
  while (v6 != v11 && v6 != 0);
  CFDictionaryRef v17 = this[11];
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
LABEL_43:
    *(_DWORD *)std::string buf = 134218240;
    uint64_t v21 = v7;
    __int16 v22 = 2048;
    uint64_t v23 = v14;
    _os_log_impl(&dword_1C59C6000, v17, OS_LOG_TYPE_DEFAULT, "#I boot failure count: %ld, ping failure count: %ld", buf, 0x16u);
  }
  return v14 + v7;
}

void sub_1C5A77DE0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  _Unwind_Resume(a1);
}

void HealthModule::findMostRecentBarrierHealthEvent_sync(HealthModule *this@<X0>, void *a2@<X8>)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  memset(a2, 170, 24);
  Timestamp::Timestamp((Timestamp *)&v35);
  Timestamp::asString((uint64_t)&v35, 0, 9, v37);
  *a2 = &unk_1F2107A48;
  *((unsigned char *)a2 + 8) = 0;
  if (SHIBYTE(v38) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v37[0], (std::string::size_type)v37[1]);
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)v37;
    *(void *)&long long v33 = v38;
  }
  a2[2] = Timestamp::convert((uint64_t)__p);
  if (SBYTE7(v33) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v38) & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((SHIBYTE(v38) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(v37[0]);
LABEL_6:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v35, (void *)v35.__imp_.__imp_);
  unint64_t v34 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v4;
  long long v33 = v4;
  pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  if (!(void)xmmword_1EBBDCB48)
  {
    uint64_t v6 = (HealthEventDB *)operator new(0xA0uLL);
    HealthEventDB::HealthEventDB(v6);
    uint64_t v5 = operator new(0x20uLL);
    *uint64_t v5 = &unk_1F21077D0;
    v5[1] = 0;
    _DWORD v5[2] = 0;
    v5[3] = v6;
    uint64_t v7 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDCB48 + 1);
    *(void *)&xmmword_1EBBDCB48 = v6;
    *((void *)&xmmword_1EBBDCB48 + 1) = v5;
    if (!v7)
    {
      *(void *)std::string buf = v6;
      *(void *)&uint8_t buf[8] = v5;
      goto LABEL_15;
    }
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  uint64_t v5 = (void *)*((void *)&xmmword_1EBBDCB48 + 1);
  uint64_t v6 = (HealthEventDB *)xmmword_1EBBDCB48;
  *(_OWORD *)std::string buf = xmmword_1EBBDCB48;
  if (*((void *)&xmmword_1EBBDCB48 + 1)) {
LABEL_15:
  }
    atomic_fetch_add_explicit(v5 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  unint64_t v8 = *((void *)v6 + 14);
  unint64_t v34 = v8;
  uint64_t v10 = *((void *)v6 + 10);
  uint64_t v9 = *((void *)v6 + 11);
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v10) >> 3);
  if (v11 >= 0xAAAAAAAAAAAAAABLL)
  {
    std::logic_error::logic_error(&v35, "circular_buffer");
    v35.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
    boost::throw_exception<std::length_error>(&v35);
  }
  if (v9 == v10)
  {
    uint64_t v12 = 0;
    uint64_t v14 = (char *)(8 * ((v9 - v10) >> 3));
    __p[0] = 0;
    __p[1] = (void *)(24 * v11);
    *(void *)&long long v33 = 0;
    uint64_t v15 = 0;
    if (!v8) {
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v12 = (char *)operator new(v9 - v10);
    uint64_t v13 = *((void *)v6 + 14);
    uint64_t v14 = &v12[24 * v11];
    __p[0] = v12;
    __p[1] = v14;
    *(void *)&long long v33 = v12;
    uint64_t v15 = v12;
    if (!v13) {
      goto LABEL_30;
    }
  }
  uint64_t v16 = *((void *)v6 + 12);
  uint64_t v15 = v12;
  if (v16)
  {
    uint64_t v18 = *((void *)v6 + 10);
    uint64_t v17 = *((void *)v6 + 11);
    uint64_t v19 = v12;
    uint64_t v15 = v12;
    uint64_t v20 = *((void *)v6 + 13);
    do
    {
      *(void *)uint64_t v15 = &unk_1F2107A48;
      *(_OWORD *)(v15 + 8) = *(_OWORD *)(v16 + 8);
      v16 += 24;
      if (v16 == v17) {
        uint64_t v16 = v18;
      }
      v15 += 24;
      v19 += 24;
    }
    while (v16 != v20 && v16 != 0);
  }
LABEL_30:
  if (v15 == v14) {
    __int16 v22 = v12;
  }
  else {
    __int16 v22 = v15;
  }
  *((void *)&v33 + 1) = v22;
  uint64_t v23 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  unint64_t v24 = v34;
  uint64_t v25 = (void (***)(void))v33;
  if (v34 && (void)v33)
  {
    if ((void *)(v33 + 24) == __p[1]) {
      uint64_t v26 = (char *)__p[0];
    }
    else {
      uint64_t v26 = (char *)(v33 + 24);
    }
    BOOL v27 = v26 == *((char **)&v33 + 1) || v26 == 0;
    long long v28 = (char *)v33;
    if (!v27)
    {
      long long v28 = (char *)v33;
      do
      {
        if (((v28[8] - 3) & 0xFD) != 0)
        {
          if (((v26[8] - 3) & 0xFD) == 0) {
            goto LABEL_51;
          }
        }
        else if (((v26[8] - 3) & 0xFD) != 0)
        {
          goto LABEL_52;
        }
        if (*((void *)v28 + 2) < *((void *)v26 + 2)) {
LABEL_51:
        }
          long long v28 = v26;
LABEL_52:
        v26 += 24;
        if (v26 == __p[1]) {
          uint64_t v26 = (char *)__p[0];
        }
      }
      while (v26 != *((char **)&v33 + 1) && v26);
    }
    *(_OWORD *)(a2 + 1) = *(_OWORD *)(v28 + 8);
  }
  int v29 = *((void *)this + 11);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    HealthEvent::asString((HealthEvent *)a2, &v35);
    size_t v30 = v36 >= 0 ? &v35 : (std::logic_error *)v35.__vftable;
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v30;
    _os_log_impl(&dword_1C59C6000, v29, OS_LOG_TYPE_DEFAULT, "#I Found preliminary barrier event: %s", buf, 0xCu);
    if (v36 < 0) {
      operator delete(v35.__vftable);
    }
  }
  if (v24)
  {
    unint64_t v31 = 0;
    do
    {
      (**v25)(v25);
      uint64_t v25 = (void (***)(void))(v33 + 24);
      *(void *)&long long v33 = v25;
      if (v25 == __p[1])
      {
        uint64_t v25 = (void (***)(void))__p[0];
        *(void **)&long long v33 = __p[0];
      }
      ++v31;
    }
    while (v31 < v34);
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
}

void sub_1C5A78340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  _Unwind_Resume(a1);
}

BOOL HealthModule::hasBarrierEventType(uint64_t a1)
{
  return ((*(unsigned __int8 *)(a1 + 8) - 3) & 0xFD) == 0;
}

uint64_t boost::circular_buffer<HealthEvent,std::allocator<HealthEvent>>::~circular_buffer(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    unint64_t v2 = 0;
    uint64_t v3 = *(void (****)(void))(a1 + 16);
    do
    {
      (**v3)(v3);
      long long v4 = *(void (****)(void))(a1 + 8);
      uint64_t v3 = (void (***)(void))(*(void *)(a1 + 16) + 24);
      *(void *)(a1 + 16) = v3;
      if (v3 == v4)
      {
        uint64_t v3 = *(void (****)(void))a1;
        *(void *)(a1 + 16) = *(void *)a1;
      }
      ++v2;
    }
    while (v2 < *(void *)(a1 + 32));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void HealthModule::checkFailuresAgainstThresholdAndEraseEFSAccordingly_sync(NSObject **this)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t FailureCountInHealthEventDB_sync = HealthModule::getFailureCountInHealthEventDB_sync(this);
  if (FailureCountInHealthEventDB_sync >= 10)
  {
    int v3 = capabilities::abs::supportsEFSEraseOnBootLoop((capabilities::abs *)FailureCountInHealthEventDB_sync);
    long long v4 = this[11];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = ", but EFS erase is not supported";
      if (v3) {
        uint64_t v5 = "; requesting EFS erase";
      }
      *(void *)std::string buf = 0xA04000202;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = v5;
      _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Total health failure count reached EFS erase threshold (%d)%s", buf, 0x12u);
    }
    if (v3)
    {
      xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
      if (v6 || (xpc_object_t v6 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C8795EB0](v6) == MEMORY[0x1E4F14590])
        {
          xpc_retain(v6);
          xpc_object_t v7 = v6;
        }
        else
        {
          xpc_object_t v7 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v7 = xpc_null_create();
        xpc_object_t v6 = 0;
      }
      xpc_release(v6);
      xpc_object_t v8 = xpc_string_create((const char *)*MEMORY[0x1E4F4C4E8]);
      if (!v8) {
        xpc_object_t v8 = xpc_null_create();
      }
      xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x1E4F4CA30], v8);
      xpc_object_t v9 = xpc_null_create();
      xpc_release(v8);
      xpc_release(v9);
      uint64_t v10 = (const void *)*MEMORY[0x1E4F4C720];
      size_t v11 = strlen((const char *)*MEMORY[0x1E4F4C720]);
      if (v11 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v12 = v11;
      if (v11 >= 0x17)
      {
        uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17) {
          uint64_t v14 = v11 | 7;
        }
        uint64_t v15 = v14 + 1;
        uint64_t v13 = operator new(v14 + 1);
        *(void *)&uint8_t buf[8] = v12;
        *(void *)&uint8_t buf[16] = v15 | 0x8000000000000000;
        *(void *)std::string buf = v13;
      }
      else
      {
        buf[23] = v11;
        uint64_t v13 = buf;
        if (!v11)
        {
          buf[0] = 0;
          xpc_object_t v20 = v7;
          if (v7)
          {
LABEL_19:
            xpc_retain(v7);
            goto LABEL_25;
          }
LABEL_24:
          xpc_object_t v20 = xpc_null_create();
LABEL_25:
          abm::client::Command::create();
          xpc_release(v20);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          atomic_fetch_add_explicit((atomic_ullong *volatile)0xAAAAAAAAAAAAAAB2, 1uLL, memory_order_relaxed);
          AppleBasebandManager::perform();
          if (!atomic_fetch_add((atomic_ullong *volatile)0xAAAAAAAAAAAAAAB2, 0xFFFFFFFFFFFFFFFFLL))
          {
            (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
          }
          pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
          if (!(void)xmmword_1EBBDCB48)
          {
            uint64_t v17 = (HealthEventDB *)operator new(0xA0uLL);
            HealthEventDB::HealthEventDB(v17);
            uint64_t v16 = operator new(0x20uLL);
            void *v16 = &unk_1F21077D0;
            v16[1] = 0;
            unint64_t v16[2] = 0;
            v16[3] = v17;
            uint64_t v18 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDCB48 + 1);
            *(void *)&xmmword_1EBBDCB48 = v17;
            *((void *)&xmmword_1EBBDCB48 + 1) = v16;
            if (!v18)
            {
              *(void *)std::string buf = v17;
              *(void *)&uint8_t buf[8] = v16;
              goto LABEL_36;
            }
            if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
          uint64_t v16 = (void *)*((void *)&xmmword_1EBBDCB48 + 1);
          uint64_t v17 = (HealthEventDB *)xmmword_1EBBDCB48;
          *(_OWORD *)std::string buf = xmmword_1EBBDCB48;
          if (!*((void *)&xmmword_1EBBDCB48 + 1))
          {
LABEL_37:
            pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
            HealthEventDB::addHealthEvent(v17, 5);
            uint64_t v19 = *(std::__shared_weak_count **)&buf[8];
            if (*(void *)&buf[8]
              && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
            if (!atomic_fetch_add((atomic_ullong *volatile)0xAAAAAAAAAAAAAAB2, 0xFFFFFFFFFFFFFFFFLL))
            {
              (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
            }
            xpc_release(v7);
            return;
          }
LABEL_36:
          atomic_fetch_add_explicit(v16 + 1, 1uLL, memory_order_relaxed);
          goto LABEL_37;
        }
      }
      memmove(v13, v10, v12);
      v13[v12] = 0;
      xpc_object_t v20 = v7;
      if (v7) {
        goto LABEL_19;
      }
      goto LABEL_24;
    }
  }
}

void sub_1C5A789AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, xpc_object_t object, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  xpc_release(v22);
  _Unwind_Resume(a1);
}

void HealthModule::sendUserNotificationForCellularDiagnostics(HealthModule *this)
{
  if (config::hw::watch(this)) {
    return;
  }
  *(_OWORD *)long long v4 = 0u;
  memset(v5, 0, 56);
  std::string::__assign_external((std::string *)&v5[8], "Cellular_Issue_Detected", 0x17uLL);
  v5[7] = 13;
  strcpy((char *)v4, "CellularIssue");
  if ((v5[7] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v1, (const std::string::value_type *)v4[0], (std::string::size_type)v4[1]);
  }
  else
  {
    *(_OWORD *)&v1.__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    v1.__r_.__value_.__r.__words[2] = *(void *)v5;
  }
  if ((v5[31] & 0x80000000) != 0) {
    std::string::__init_copy_ctor_external(&v2, *(const std::string::value_type **)&v5[8], *(std::string::size_type *)&v5[16]);
  }
  else {
    std::string v2 = *(std::string *)&v5[8];
  }
  if ((v5[55] & 0x80000000) != 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)&v5[32], *(std::string::size_type *)&v5[40]);
  }
  else {
    std::string __p = *(std::string *)&v5[32];
  }
  support::ui::showNotification(2u, (uint64_t)&v1, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v2.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_14;
      }
      goto LABEL_20;
    }
  }
  else if ((SHIBYTE(v2.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(v2.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_14:
    if ((v5[55] & 0x80000000) == 0) {
      goto LABEL_15;
    }
LABEL_21:
    operator delete(*(void **)&v5[32]);
    if ((v5[31] & 0x80000000) == 0)
    {
LABEL_16:
      if ((v5[7] & 0x80000000) == 0) {
        return;
      }
LABEL_23:
      operator delete(v4[0]);
      return;
    }
    goto LABEL_22;
  }
LABEL_20:
  operator delete(v1.__r_.__value_.__l.__data_);
  if ((v5[55] & 0x80000000) != 0) {
    goto LABEL_21;
  }
LABEL_15:
  if ((v5[31] & 0x80000000) == 0) {
    goto LABEL_16;
  }
LABEL_22:
  operator delete(*(void **)&v5[8]);
  if ((v5[7] & 0x80000000) != 0) {
    goto LABEL_23;
  }
}

void sub_1C5A78C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      support::ui::NotificationInfo::~NotificationInfo(&a25);
      _Unwind_Resume(a1);
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  support::ui::NotificationInfo::~NotificationInfo(&a25);
  _Unwind_Resume(a1);
}

void sub_1C5A78CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
}

void sub_1C5A78D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  support::ui::NotificationInfo::~NotificationInfo((void **)va);
  _Unwind_Resume(a1);
}

void support::ui::NotificationInfo::~NotificationInfo(void **this)
{
  if (*((char *)this + 71) < 0)
  {
    operator delete(this[6]);
    if ((*((char *)this + 47) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 23) & 0x80000000) == 0) {
        return;
      }
LABEL_7:
      operator delete(*this);
      return;
    }
  }
  else if ((*((char *)this + 47) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[3]);
  if (*((char *)this + 23) < 0) {
    goto LABEL_7;
  }
}

uint64_t ctu::Loggable<HealthModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<HealthModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v3 = (const char *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 16))();
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    xpc_object_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<HealthModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<HealthModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F2107740;
  MEMORY[0x1C87940C0](a1 + 1);
  return a1;
}

void ctu::Loggable<HealthModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F2107740;
  MEMORY[0x1C87940C0](a1 + 1);

  operator delete(a1);
}

void std::__shared_ptr_pointer<HealthModule *,std::shared_ptr<HealthModule> ctu::SharedSynchronizable<HealthModule>::make_shared_ptr<HealthModule>(HealthModule*)::{lambda(HealthModule *)#1},std::allocator<HealthModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<HealthModule *,std::shared_ptr<HealthModule> ctu::SharedSynchronizable<HealthModule>::make_shared_ptr<HealthModule>(HealthModule*)::{lambda(HealthModule *)#1},std::allocator<HealthModule>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<HealthModule *,std::shared_ptr<HealthModule> ctu::SharedSynchronizable<HealthModule>::make_shared_ptr<HealthModule>(HealthModule*)::{lambda(HealthModule *)#1},std::allocator<HealthModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI12HealthModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI12HealthModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT"
                                "_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI12HealthModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI12HealthModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<HealthModule> ctu::SharedSynchronizable<HealthModule>::make_shared_ptr<HealthModule>(HealthModule*)::{lambda(HealthModule*)#1}::operator() const(HealthModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *HealthEventDB::create_default_global(HealthEventDB *this)
{
  std::string v2 = (HealthEventDB *)operator new(0xA0uLL);
  HealthEventDB::HealthEventDB(v2);
  *(void *)this = v2;
  size_t result = operator new(0x20uLL);
  void *result = &unk_1F21077D0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v2;
  *((void *)this + 1) = result;
  return result;
}

void sub_1C5A79060(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1C5A79094(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<HealthEventDB>::operator=[abi:ne180100](uint64_t a1)
{
  long long v1 = *(_OWORD *)a1;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  std::string v2 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDCB48 + 1);
  xmmword_1EBBDCB48 = v1;
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void std::__shared_ptr_pointer<HealthEventDB *,std::shared_ptr<HealthEventDB>::__shared_ptr_default_delete<HealthEventDB,HealthEventDB>,std::allocator<HealthEventDB>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<HealthEventDB *,std::shared_ptr<HealthEventDB>::__shared_ptr_default_delete<HealthEventDB,HealthEventDB>,std::allocator<HealthEventDB>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<HealthEventDB *,std::shared_ptr<HealthEventDB>::__shared_ptr_default_delete<HealthEventDB,HealthEventDB>,std::allocator<HealthEventDB>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C5BC73D3) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C5BC73D3 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C5BC73D3)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C5BC73D3 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t ctu::PthreadMutexGuardPolicy<HealthEventDB>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  std::string v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void ___ZNK3ctu20SharedSynchronizableI12HealthModuleE20execute_wrapped_syncIZNS1_10initializeEN8dispatch13group_sessionEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  if (!qword_1EBBDCB48)
  {
    long long v4 = (HealthEventDB *)operator new(0xA0uLL);
    HealthEventDB::HealthEventDB(v4);
    std::string v2 = (std::__shared_weak_count *)operator new(0x20uLL);
    v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F21077D0;
    v2->__shared_owners_ = 0;
    v2->__shared_weak_owners_ = 0;
    v2[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
    size_t v5 = (std::__shared_weak_count *)off_1EBBDCB50;
    qword_1EBBDCB48 = (uint64_t)v4;
    off_1EBBDCB50 = v2;
    if (!v5) {
      goto LABEL_7;
    }
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  std::string v2 = (std::__shared_weak_count *)off_1EBBDCB50;
  if (off_1EBBDCB50)
  {
LABEL_7:
    char v3 = 0;
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_8;
  }
  char v3 = 1;
LABEL_8:
  uint64_t v6 = (sys *)pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  if ((v3 & 1) != 0 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!sys::isBootSessionChanged(v6)) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (!sys::isBootSessionChanged(v11)) {
      return;
    }
  }
  uint64_t v7 = *(NSObject **)(v1 + 88);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_DEFAULT, "#I AP reboot detected; resetting CommCenter and baseband stats",
      buf,
      2u);
  }
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  uint64_t v9 = MEMORY[0x1E4F14590];
  if (v8 || (xpc_object_t v8 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v8) == v9)
    {
      xpc_retain(v8);
      xpc_object_t v10 = v8;
    }
    else
    {
      xpc_object_t v10 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v10 = xpc_null_create();
    xpc_object_t v8 = 0;
  }
  xpc_release(v8);
  if (MEMORY[0x1C8795EB0](v10) != v9)
  {
    size_t v12 = *(NSObject **)(v1 + 88);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_1C59C6000, v12, OS_LOG_TYPE_ERROR, "Failed to create xpc dictionary to reset CommCenter stats", buf, 2u);
    }
    goto LABEL_24;
  }
  xpc_object_t v15 = xpc_int64_create(1);
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "KeyCommCenterStatsLaunchCount", v15);
  xpc_object_t v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  int64_t v17 = time(0);
  xpc_object_t v18 = xpc_int64_create(v17);
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "KeyCommCenterStatsFirstLaunchTime", v18);
  xpc_object_t v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  if (!qword_1EBBDCB48)
  {
    xpc_object_t v20 = (HealthEventDB *)operator new(0xA0uLL);
    HealthEventDB::HealthEventDB(v20);
    uint64_t v21 = (std::__shared_weak_count *)operator new(0x20uLL);
    v21->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F21077D0;
    v21->__shared_owners_ = 0;
    v21->__shared_weak_owners_ = 0;
    v21[1].__vftable = (std::__shared_weak_count_vtbl *)v20;
    int v29 = (std::__shared_weak_count *)off_1EBBDCB50;
    qword_1EBBDCB48 = (uint64_t)v20;
    off_1EBBDCB50 = v21;
    if (!v29) {
      goto LABEL_50;
    }
    if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  xpc_object_t v20 = (HealthEventDB *)qword_1EBBDCB48;
  uint64_t v21 = (std::__shared_weak_count *)off_1EBBDCB50;
  if (off_1EBBDCB50) {
LABEL_50:
  }
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  xpc_object_t v37 = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    xpc_object_t v37 = xpc_null_create();
  }
  HealthEventDB::updateCommCenterStats((uint64_t *)v20, &v37);
  xpc_release(v37);
  xpc_object_t v37 = 0;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
LABEL_24:
  xpc_release(v10);
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v13 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v14 = v13;
  if (v13)
  {
    xpc_object_t object = v13;
  }
  else
  {
    xpc_object_t v14 = xpc_null_create();
    xpc_object_t object = v14;
    if (!v14)
    {
      xpc_object_t v22 = xpc_null_create();
      xpc_object_t v14 = 0;
      goto LABEL_38;
    }
  }
  if (MEMORY[0x1C8795EB0](v14) == v9)
  {
    xpc_retain(v14);
    goto LABEL_39;
  }
  xpc_object_t v22 = xpc_null_create();
LABEL_38:
  xpc_object_t object = v22;
LABEL_39:
  xpc_release(v14);
  if (MEMORY[0x1C8795EB0](object) == v9)
  {
    uint64_t v24 = *MEMORY[0x1E4F4CD70];
    *(void *)std::string buf = &object;
    uint64_t v34 = v24;
    xpc::dict::object_proxy::operator=((uint64_t)buf, &v35);
    xpc_release(v35);
    xpc_object_t v35 = 0;
    uint64_t v25 = *MEMORY[0x1E4F4CD78];
    *(void *)std::string buf = &object;
    uint64_t v34 = v25;
    xpc::dict::object_proxy::operator=((uint64_t)buf, &v32);
    xpc_release(v32);
    xpc_object_t v32 = 0;
    uint64_t v26 = *MEMORY[0x1E4F4CE98];
    *(void *)std::string buf = &object;
    uint64_t v34 = v26;
    xpc::dict::object_proxy::operator=((uint64_t)buf, &v31);
    xpc_release(v31);
    xpc_object_t v31 = 0;
    pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
    if (!qword_1EBBDCB48)
    {
      long long v28 = (HealthEventDB *)operator new(0xA0uLL);
      HealthEventDB::HealthEventDB(v28);
      BOOL v27 = (std::__shared_weak_count *)operator new(0x20uLL);
      v27->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F21077D0;
      v27->__shared_owners_ = 0;
      v27->__shared_weak_owners_ = 0;
      v27[1].__vftable = (std::__shared_weak_count_vtbl *)v28;
      size_t v30 = (std::__shared_weak_count *)off_1EBBDCB50;
      qword_1EBBDCB48 = (uint64_t)v28;
      off_1EBBDCB50 = v27;
      if (!v30)
      {
LABEL_60:
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_61:
        pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
        *(void *)std::string buf = object;
        if (object) {
          xpc_retain(object);
        }
        else {
          *(void *)std::string buf = xpc_null_create();
        }
        HealthEventDB::updateBootStats((uint64_t *)v28, (void **)buf);
        xpc_release(*(xpc_object_t *)buf);
        *(void *)std::string buf = 0;
        if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
        goto LABEL_42;
      }
      if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    long long v28 = (HealthEventDB *)qword_1EBBDCB48;
    BOOL v27 = (std::__shared_weak_count *)off_1EBBDCB50;
    if (!off_1EBBDCB50) {
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  uint64_t v23 = *(NSObject **)(v1 + 88);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl(&dword_1C59C6000, v23, OS_LOG_TYPE_ERROR, "Failed to create xpc dictionary to reset Baseband stats", buf, 2u);
  }
LABEL_42:
  xpc_release(object);
}

void sub_1C5A799C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t object, xpc_object_t a16)
{
  (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  xpc_release(object);
  _Unwind_Resume(a1);
}

void xpc::dict::object_proxy::operator=(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t v4 = xpc_null_create();
  xpc_dictionary_set_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8), v4);
  *a2 = v4;
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v5);
}

void dispatch::async<void ctu::SharedSynchronizable<HealthModule>::execute_wrapped<HealthModule::initialize(dispatch::group_session)::$_1>(HealthModule::initialize(dispatch::group_session)::$_1 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<HealthModule::initialize(dispatch::group_session)::$_1,dispatch_queue_s *::default_delete<HealthModule::initialize(dispatch::group_session)::$_1>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  std::string v2 = *(uint64_t **)a1;
  uint64_t v3 = **(void **)a1;
  xpc_object_t v4 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Initializing", buf, 2u);
  }
  xpc_object_t v5 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
  size_t v6 = strlen(v5);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    xpc_object_t v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    unint64_t v64 = v10 | 0x8000000000000000;
    __dst[0] = v8;
  }
  else
  {
    HIBYTE(v64) = v6;
    xpc_object_t v8 = __dst;
    if (!v6) {
      goto LABEL_11;
    }
  }
  memmove(v8, v5, (size_t)v7);
LABEL_11:
  *((unsigned char *)v7 + (void)v8) = 0;
  unint64_t v62 = 0;
  AppleBasebandManager::create();
  long long v11 = *(_OWORD *)buf;
  *(void *)std::string buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  size_t v12 = *(std::__shared_weak_count **)(v3 + 160);
  *(_OWORD *)(v3 + 152) = v11;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  xpc_object_t v13 = *(std::__shared_weak_count **)&buf[8];
  if (!*(void *)&buf[8]
    || atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    xpc_object_t v14 = v62;
    if (!v62) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  xpc_object_t v14 = v62;
  if (v62) {
LABEL_17:
  }
    CFRelease(v14);
LABEL_18:
  if (SHIBYTE(v64) < 0) {
    operator delete(__dst[0]);
  }
  buf[23] = 21;
  strcpy(buf, "CommandGetHealthStats");
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZZN12HealthModule10initializeEN8dispatch13group_sessionEENK3__1clEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_33_2;
  void aBlock[4] = v2[2];
  xpc_object_t v15 = (std::__shared_weak_count *)v2[3];
  uint64_t v60 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = _Block_copy(aBlock);
  uint64_t v61 = v16;
  Service::registerCommandHandler(v3, (uint64_t)buf, &v61);
  if (v16) {
    _Block_release(v16);
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  *(void *)std::string buf = operator new(0x20uLL);
  *(_OWORD *)&uint8_t buf[8] = xmmword_1C5BC7120;
  strcpy(*(char **)buf, "CommandUpdateBBBootStats");
  v56[0] = MEMORY[0x1E4F143A8];
  v56[1] = 1174405120;
  v56[2] = ___ZZN12HealthModule10initializeEN8dispatch13group_sessionEENK3__1clEv_block_invoke_34;
  v56[3] = &__block_descriptor_tmp_37_1;
  v56[4] = v2[2];
  int64_t v17 = (std::__shared_weak_count *)v2[3];
  std::string v57 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v18 = _Block_copy(v56);
  uint64_t v58 = v18;
  Service::registerCommandHandler(v3, (uint64_t)buf, &v58);
  if (v18) {
    _Block_release(v18);
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  xpc_object_t v19 = (const void *)*MEMORY[0x1E4F4CEF8];
  size_t v20 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
  if (v20 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v21 = (void *)v20;
  if (v20 >= 0x17)
  {
    uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17) {
      uint64_t v23 = v20 | 7;
    }
    uint64_t v24 = v23 + 1;
    xpc_object_t v22 = operator new(v23 + 1);
    __p[1] = v21;
    unint64_t v55 = v24 | 0x8000000000000000;
    __p[0] = v22;
    goto LABEL_39;
  }
  HIBYTE(v55) = v20;
  xpc_object_t v22 = __p;
  if (v20) {
LABEL_39:
  }
    memmove(v22, v19, (size_t)v21);
  *((unsigned char *)v21 + (void)v22) = 0;
  *(void *)std::string buf = MEMORY[0x1E4F143A8];
  *(void *)&uint8_t buf[8] = 1174405120;
  *(void *)&uint8_t buf[16] = ___ZZN12HealthModule10initializeEN8dispatch13group_sessionEENK3__1clEv_block_invoke_38;
  uint64_t v48 = &__block_descriptor_tmp_48_0;
  uint64_t v49 = v3;
  uint64_t v50 = v2[2];
  uint64_t v25 = (std::__shared_weak_count *)v2[3];
  char v51 = v25;
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v26 = _Block_copy(buf);
  BOOL v27 = *(NSObject **)(v3 + 136);
  if (v27) {
    dispatch_retain(*(dispatch_object_t *)(v3 + 136));
  }
  xpc_object_t v52 = v26;
  dispatch_object_t object = v27;
  AppleBasebandManager::setEventHandler();
  if (object) {
    dispatch_release(object);
  }
  if (v52) {
    _Block_release(v52);
  }
  if (SHIBYTE(v55) < 0) {
    operator delete(__p[0]);
  }
  long long v28 = (const void *)*MEMORY[0x1E4F4C830];
  size_t v29 = strlen((const char *)*MEMORY[0x1E4F4C830]);
  if (v29 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v30 = (void *)v29;
  if (v29 >= 0x17)
  {
    uint64_t v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17) {
      uint64_t v32 = v29 | 7;
    }
    uint64_t v33 = v32 + 1;
    xpc_object_t v31 = operator new(v32 + 1);
    v45[1] = v30;
    unint64_t v46 = v33 | 0x8000000000000000;
    v45[0] = v31;
    goto LABEL_57;
  }
  HIBYTE(v46) = v29;
  xpc_object_t v31 = v45;
  if (v29) {
LABEL_57:
  }
    memmove(v31, v28, (size_t)v30);
  *((unsigned char *)v30 + (void)v31) = 0;
  v41[0] = MEMORY[0x1E4F143A8];
  v41[1] = 1174405120;
  v41[2] = ___ZZN12HealthModule10initializeEN8dispatch13group_sessionEENK3__1clEv_block_invoke_49;
  v41[3] = &__block_descriptor_tmp_52_0;
  v41[4] = v3;
  v41[5] = v2[2];
  uint64_t v34 = (std::__shared_weak_count *)v2[3];
  xpc_object_t v42 = v34;
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v35 = _Block_copy(v41);
  char v36 = *(NSObject **)(v3 + 136);
  if (v36) {
    dispatch_retain(*(dispatch_object_t *)(v3 + 136));
  }
  int v43 = v35;
  dispatch_object_t v44 = v36;
  AppleBasebandManager::setEventHandler();
  if (v44) {
    dispatch_release(v44);
  }
  if (v43) {
    _Block_release(v43);
  }
  if (SHIBYTE(v46) < 0) {
    operator delete(v45[0]);
  }
  AppleBasebandManager::eventsOn(*(AppleBasebandManager **)(v3 + 152));
  if (v42) {
    std::__shared_weak_count::__release_weak(v42);
  }
  if (v51) {
    std::__shared_weak_count::__release_weak(v51);
  }
  if (v57) {
    std::__shared_weak_count::__release_weak(v57);
  }
  if (v60) {
    std::__shared_weak_count::__release_weak(v60);
  }
  xpc_object_t v37 = (std::__shared_weak_count *)v2[3];
  if (v37) {
    std::__shared_weak_count::__release_weak(v37);
  }
  uint64_t v38 = v2[1];
  if (v38)
  {
    dispatch_group_leave(v38);
    xpc_object_t v39 = v2[1];
    if (v39) {
      dispatch_release(v39);
    }
  }
  operator delete(v2);
  uint64_t v40 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  operator delete(a1);
}

void sub_1C5A7A39C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, dispatch_object_t object, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,void *a34,dispatch_object_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (a33) {
    std::__shared_weak_count::__release_weak(a33);
  }
  if (a47) {
    std::__shared_weak_count::__release_weak(a47);
  }
  char v51 = *(std::__shared_weak_count **)(v49 - 144);
  if (v51) {
    std::__shared_weak_count::__release_weak(v51);
  }
  xpc_object_t v52 = (std::__shared_weak_count *)v48[3];
  if (v52) {
    std::__shared_weak_count::__release_weak(v52);
  }
  xpc_object_t v53 = v48[1];
  if (v53)
  {
    dispatch_group_leave(v53);
    xpc_object_t v54 = v48[1];
    if (v54) {
      dispatch_release(v54);
    }
  }
  operator delete(v48);
  unint64_t v55 = (std::__shared_weak_count *)v47[2];
  if (v55)
  {
    if (!atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  operator delete(v47);
  _Unwind_Resume(a1);
}

void ___ZZN12HealthModule10initializeEN8dispatch13group_sessionEENK3__1clEv_block_invoke(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  xpc_object_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v4) {
    return;
  }
  size_t v6 = std::__shared_weak_count::lock(v4);
  uint64_t v16 = v6;
  if (!v6) {
    return;
  }
  if (!*(void *)(a1 + 32))
  {
    uint64_t v9 = v6;
LABEL_20:
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    return;
  }
  xpc_object_t v14 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  if (qword_1EBBDCB48)
  {
LABEL_5:
    xpc_object_t v8 = (HealthEventDB *)qword_1EBBDCB48;
    uint64_t v7 = (std::__shared_weak_count *)off_1EBBDCB50;
    xpc_object_t object = (xpc_object_t)qword_1EBBDCB48;
    xpc_object_t v13 = (std::__shared_weak_count *)off_1EBBDCB50;
    if (!off_1EBBDCB50) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  xpc_object_t v8 = (HealthEventDB *)operator new(0xA0uLL);
  HealthEventDB::HealthEventDB(v8);
  uint64_t v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F21077D0;
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
  uint64_t v10 = (std::__shared_weak_count *)off_1EBBDCB50;
  qword_1EBBDCB48 = (uint64_t)v8;
  off_1EBBDCB50 = v7;
  if (v10)
  {
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    goto LABEL_5;
  }
  xpc_object_t object = v8;
  xpc_object_t v13 = v7;
LABEL_12:
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_13:
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  HealthEventDB::getHealthInfo(v8, &v14);
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (MEMORY[0x1C8795EB0](v14) == MEMORY[0x1E4F14590])
  {
    LODWORD(object) = 0;
    dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, (unsigned int *)&object, &v14);
  }
  else
  {
    uint64_t v11 = *a3;
    xpc_object_t object = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v11 + 16))(v11, 3760250880, &object);
    xpc_release(object);
  }
  xpc_release(v14);
  uint64_t v9 = v16;
  if (v16) {
    goto LABEL_20;
  }
}

void sub_1C5A7A7DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, uint64_t a11, xpc_object_t object, char a13)
{
}

uint64_t __copy_helper_block_e8_32c37_ZTSNSt3__18weak_ptrI12HealthModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c37_ZTSNSt3__18weak_ptrI12HealthModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZZN12HealthModule10initializeEN8dispatch13group_sessionEENK3__1clEv_block_invoke_34(uint64_t a1, void **a2, uint64_t *a3)
{
  uint64_t v19 = 0;
  size_t v20 = 0;
  xpc_object_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v4) {
    goto LABEL_21;
  }
  size_t v20 = std::__shared_weak_count::lock(v4);
  if (!v20) {
    return;
  }
  uint64_t v19 = *(void *)(a1 + 32);
  if (!v19) {
    goto LABEL_21;
  }
  pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  if (qword_1EBBDCB48)
  {
LABEL_5:
    xpc_object_t v8 = (HealthEventDB *)qword_1EBBDCB48;
    uint64_t v7 = off_1EBBDCB50;
    xpc_object_t v17 = (xpc_object_t)qword_1EBBDCB48;
    xpc_object_t v18 = (std::__shared_weak_count *)off_1EBBDCB50;
    if (!off_1EBBDCB50) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  xpc_object_t v8 = (HealthEventDB *)operator new(0xA0uLL);
  HealthEventDB::HealthEventDB(v8);
  uint64_t v7 = operator new(0x20uLL);
  void *v7 = &unk_1F21077D0;
  v7[1] = 0;
  v7[2] = 0;
  v7[3] = v8;
  uint64_t v9 = (std::__shared_weak_count *)off_1EBBDCB50;
  qword_1EBBDCB48 = (uint64_t)v8;
  off_1EBBDCB50 = v7;
  if (v9)
  {
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    goto LABEL_5;
  }
  xpc_object_t v17 = v8;
  xpc_object_t v18 = (std::__shared_weak_count *)v7;
LABEL_11:
  atomic_fetch_add_explicit(v7 + 1, 1uLL, memory_order_relaxed);
LABEL_12:
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  uint64_t v10 = *a2;
  xpc_object_t object = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  char updated = HealthEventDB::updateBootStats((uint64_t *)v8, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  size_t v12 = v18;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if (updated) {
      goto LABEL_18;
    }
  }
  else if (updated)
  {
LABEL_18:
    uint64_t v13 = *a3;
    xpc_object_t v17 = xpc_null_create();
    (*(void (**)(uint64_t, void, xpc_object_t *))(v13 + 16))(v13, 0, &v17);
    xpc_release(v17);
    goto LABEL_21;
  }
  uint64_t v14 = *a3;
  xpc_object_t v17 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v14 + 16))(v14, 3760250880, &v17);
  xpc_release(v17);
LABEL_21:
  xpc_object_t v15 = v20;
  if (v20)
  {
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1C5A7AB44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, xpc_object_t object, uint64_t a12, char a13)
{
  (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void ___ZZN12HealthModule10initializeEN8dispatch13group_sessionEENK3__1clEv_block_invoke_38(void *a1, abm::client::Event **a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = a1[4];
  size_t v6 = std::__shared_weak_count::lock(v3);
  xpc_object_t v52 = v6;
  if (!v6) {
    return;
  }
  if (!a1[5])
  {
    uint64_t v26 = v6;
LABEL_100:
    if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
    return;
  }
  CFDictionaryRef v50 = (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL;
  abm::client::Event::getData((uint64_t *)&v50, *a2);
  CFDictionaryRef v7 = v50;
  if (v50) {
    xpc_object_t v8 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    xpc_object_t v8 = 0;
  }
  if (v8)
  {
    v49[0] = 0xAAAAAAAAAAAAAAAALL;
    v49[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v49, v50);
    memset(v48, 170, sizeof(v48));
    uint64_t v9 = (const char *)*MEMORY[0x1E4F4C688];
    buf[23] = 0;
    buf[0] = 0;
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v46, v9);
    ctu::cf::map_adapter::getString();
    MEMORY[0x1C8794290](&v46);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    int v10 = SHIBYTE(v48[2]);
    if (SHIBYTE(v48[2]) >= 0) {
      size_t v11 = HIBYTE(v48[2]);
    }
    else {
      size_t v11 = (size_t)v48[1];
    }
    if (v11 != strlen((const char *)*MEMORY[0x1E4F4CCD8])
      || (SHIBYTE(v48[2]) >= 0 ? (size_t v12 = v48) : (size_t v12 = (void **)v48[0]),
          memcmp(v12, (const void *)*MEMORY[0x1E4F4CCD8], v11)))
    {
      if (v11 != strlen((const char *)*MEMORY[0x1E4F4C6E0])
        || (v10 >= 0 ? (uint64_t v13 = v48) : (uint64_t v13 = (void **)v48[0]), memcmp(v13, (const void *)*MEMORY[0x1E4F4C6E0], v11)))
      {
        if (v11 == strlen((const char *)*MEMORY[0x1E4F4CAE8]))
        {
          uint64_t v14 = v10 >= 0 ? v48 : (void **)v48[0];
          if (!memcmp(v14, (const void *)*MEMORY[0x1E4F4CAE8], v11))
          {
            if (*(void *)(v5 + 184))
            {
              xpc_object_t v15 = *(NSObject **)(v5 + 88);
              if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)std::string buf = 0;
                _os_log_impl(&dword_1C59C6000, v15, OS_LOG_TYPE_DEFAULT, "#I Baseband ping timer already running", buf, 2u);
                xpc_object_t v15 = *(NSObject **)(v5 + 88);
              }
              if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)std::string buf = 0;
                _os_log_impl(&dword_1C59C6000, v15, OS_LOG_TYPE_DEFAULT, "#I Canceling baseband ping timer", buf, 2u);
              }
              (*(void (**)(void))(**(void **)(v5 + 184) + 16))(*(void *)(v5 + 184));
              uint64_t v16 = *(void *)(v5 + 184);
              *(void *)(v5 + 184) = 0;
              if (v16) {
                (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
              }
              pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
              uint64_t v17 = xmmword_1EBBDCB48;
              if (!(void)xmmword_1EBBDCB48)
              {
                HealthEventDB::create_default_global((HealthEventDB *)buf);
                std::shared_ptr<HealthEventDB>::operator=[abi:ne180100]((uint64_t)buf);
                std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)buf);
                uint64_t v17 = xmmword_1EBBDCB48;
              }
              *(void *)&long long v46 = v17;
              *((void *)&v46 + 1) = *((void *)&xmmword_1EBBDCB48 + 1);
              if (*((void *)&xmmword_1EBBDCB48 + 1)) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1EBBDCB48 + 1) + 8), 1uLL, memory_order_relaxed);
              }
              pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
              HealthEventDB::addHealthEvent((HealthEventDB *)v46, 4);
              std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&v46);
            }
            xpc_object_t v18 = *(NSObject **)(v5 + 88);
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              *(void *)std::string buf = 0xA04000100;
              _os_log_impl(&dword_1C59C6000, v18, OS_LOG_TYPE_DEFAULT, "#I Starting %u sec timer before pinging baseband", buf, 8u);
            }
            uint64_t v19 = *(void *)(v5 + 168);
            std::string __p = operator new(0x28uLL);
            long long v45 = xmmword_1C5BC6F90;
            strcpy((char *)__p, "Baseband HealthModule Ping Timer");
            size_t v20 = *(NSObject **)(v5 + 136);
            dispatch_object_t object = v20;
            if (v20) {
              dispatch_retain(v20);
            }
            v40[0] = MEMORY[0x1E4F143A8];
            v40[1] = 1174405120;
            v40[2] = ___ZZN12HealthModule10initializeEN8dispatch13group_sessionEENK3__1clEv_block_invoke_40;
            v40[3] = &__block_descriptor_tmp_44_1;
            uint64_t v22 = a1[5];
            uint64_t v21 = (std::__shared_weak_count *)a1[6];
            v40[4] = v5;
            v40[5] = v22;
            xpc_object_t v41 = v21;
            if (v21) {
              atomic_fetch_add_explicit(&v21->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            }
            xpc_object_t aBlock = _Block_copy(v40);
            ctu::TimerService::createOneShotTimer(v19, (uint64_t)&__p, 0, 10000000, &object, &aBlock);
            uint64_t v23 = *(void *)buf;
            *(void *)std::string buf = 0;
            uint64_t v24 = *(void *)(v5 + 184);
            *(void *)(v5 + 184) = v23;
            if (v24)
            {
              (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
              uint64_t v25 = *(void *)buf;
              *(void *)std::string buf = 0;
              if (v25) {
                (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
              }
            }
            if (aBlock) {
              _Block_release(aBlock);
            }
            if (object) {
              dispatch_release(object);
            }
            if (SHIBYTE(v45) < 0) {
              operator delete(__p);
            }
            if (v41) {
              std::__shared_weak_count::__release_weak(v41);
            }
          }
        }
LABEL_94:
        HealthModule::checkFailuresAgainstThresholdAndEraseEFSAccordingly_sync((NSObject **)v5);
        if (SHIBYTE(v48[2]) < 0) {
          operator delete(v48[0]);
        }
        MEMORY[0x1C87942E0](v49);
        CFDictionaryRef v7 = v50;
        goto LABEL_97;
      }
      pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
      if (!(void)xmmword_1EBBDCB48)
      {
        uint64_t v34 = (HealthEventDB *)operator new(0xA0uLL);
        HealthEventDB::HealthEventDB(v34);
        uint64_t v33 = operator new(0x20uLL);
        *uint64_t v33 = &unk_1F21077D0;
        v33[1] = 0;
        void v33[2] = 0;
        v33[3] = v34;
        xpc_object_t v35 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDCB48 + 1);
        *(void *)&xmmword_1EBBDCB48 = v34;
        *((void *)&xmmword_1EBBDCB48 + 1) = v33;
        if (!v35)
        {
          *(void *)std::string buf = v34;
          *(void *)&uint8_t buf[8] = v33;
          goto LABEL_78;
        }
        if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      uint64_t v33 = (void *)*((void *)&xmmword_1EBBDCB48 + 1);
      uint64_t v34 = (HealthEventDB *)xmmword_1EBBDCB48;
      *(_OWORD *)std::string buf = xmmword_1EBBDCB48;
      if (!*((void *)&xmmword_1EBBDCB48 + 1))
      {
LABEL_79:
        pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
        char v36 = (HealthModule *)HealthEventDB::addHealthEvent(v34, 2);
        xpc_object_t v37 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8]
          && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
        HealthModule::sendUserNotificationForCellularDiagnostics(v36);
        goto LABEL_94;
      }
LABEL_78:
      atomic_fetch_add_explicit(v33 + 1, 1uLL, memory_order_relaxed);
      goto LABEL_79;
    }
    memset(buf, 170, sizeof(buf));
    BOOL v27 = (const char *)*MEMORY[0x1E4F4CA38];
    char v47 = 0;
    LOBYTE(v46) = 0;
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v53, v27);
    ctu::cf::map_adapter::getString();
    MEMORY[0x1C8794290](&v53);
    if (v47 < 0) {
      operator delete((void *)v46);
    }
    char v28 = buf[23];
    if (buf[23] >= 0) {
      size_t v29 = buf[23];
    }
    else {
      size_t v29 = *(void *)&buf[8];
    }
    if (v29 != strlen((const char *)*MEMORY[0x1E4F4D030])
      || (buf[23] >= 0 ? (size_t v30 = buf) : (size_t v30 = *(unsigned char **)buf), memcmp(v30, (const void *)*MEMORY[0x1E4F4D030], v29)))
    {
LABEL_92:
      if (v28 < 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_94;
    }
    pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
    if (!(void)xmmword_1EBBDCB48)
    {
      uint64_t v32 = (HealthEventDB *)operator new(0xA0uLL);
      HealthEventDB::HealthEventDB(v32);
      xpc_object_t v31 = operator new(0x20uLL);
      *xpc_object_t v31 = &unk_1F21077D0;
      v31[1] = 0;
      v31[2] = 0;
      v31[3] = v32;
      uint64_t v38 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDCB48 + 1);
      *(void *)&xmmword_1EBBDCB48 = v32;
      *((void *)&xmmword_1EBBDCB48 + 1) = v31;
      if (!v38)
      {
        *(void *)&long long v46 = v32;
        *((void *)&v46 + 1) = v31;
        goto LABEL_87;
      }
      if (!atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    xpc_object_t v31 = (void *)*((void *)&xmmword_1EBBDCB48 + 1);
    uint64_t v32 = (HealthEventDB *)xmmword_1EBBDCB48;
    long long v46 = xmmword_1EBBDCB48;
    if (!*((void *)&xmmword_1EBBDCB48 + 1))
    {
LABEL_88:
      pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
      HealthEventDB::addHealthEvent(v32, 1);
      xpc_object_t v39 = (std::__shared_weak_count *)*((void *)&v46 + 1);
      if (*((void *)&v46 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v46 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
      char v28 = buf[23];
      goto LABEL_92;
    }
LABEL_87:
    atomic_fetch_add_explicit(v31 + 1, 1uLL, memory_order_relaxed);
    goto LABEL_88;
  }
LABEL_97:
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v26 = v52;
  if (v52) {
    goto LABEL_100;
  }
}

void sub_1C5A7B488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, dispatch_object_t object, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  if (*(char *)(v36 - 57) < 0) {
    operator delete(*(void **)(v36 - 80));
  }
  if (a35 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C87942E0](v36 - 128);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v36 - 112));
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v36 - 104);
  _Unwind_Resume(a1);
}

void ctu::TimerService::createOneShotTimer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, NSObject **a5, void **a6)
{
  uint64_t v10 = *(void *)(a2 + 16);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  size_t v6 = *a5;
  *a5 = 0;
  xpc_object_t aBlock = *a6;
  dispatch_object_t object = v6;
  *a6 = 0;
  (*(void (**)(uint64_t, void **, uint64_t, uint64_t, void, dispatch_object_t *, void **))(*(void *)a1 + 16))(a1, __p, a3, a4, 0, &object, &aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (object) {
    dispatch_release(object);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C5A7B76C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, dispatch_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (object)
  {
    dispatch_release(object);
    if ((a16 & 0x80000000) == 0) {
LABEL_5:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a16 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZZN12HealthModule10initializeEN8dispatch13group_sessionEENK3__1clEv_block_invoke_40(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (void *)a1[4];
    xpc_object_t v4 = std::__shared_weak_count::lock(v2);
    size_t v12 = v4;
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        size_t v6 = v3[11];
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#I Pinging baseband to verify it is healthy", buf, 2u);
        }
        v8[0] = MEMORY[0x1E4F143A8];
        v8[1] = 0x40000000;
        v8[2] = ___ZZN12HealthModule10initializeEN8dispatch13group_sessionEENK3__1clEv_block_invoke_41;
        v8[3] = &__block_descriptor_tmp_43;
        v8[4] = v3;
        CFDictionaryRef v7 = _Block_copy(v8);
        uint64_t v9 = v7;
        HealthModule::getBasebandFWVersion_sync(v3, &v9);
        if (v7) {
          _Block_release(v7);
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1C5A7B910(_Unwind_Exception *a1)
{
  if (v1) {
    _Block_release(v1);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v2 - 48);
  _Unwind_Resume(a1);
}

void ___ZZN12HealthModule10initializeEN8dispatch13group_sessionEENK3__1clEv_block_invoke_41(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)a2;
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(NSObject ***)(a1 + 32);
  char v4 = *(unsigned char *)(a2 + 23);
  if (v4 < 0)
  {
    if (*(void *)(a2 + 8))
    {
LABEL_3:
      uint64_t v5 = v3[11];
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        if (v4 < 0) {
          uint64_t v2 = (void *)*v2;
        }
        LODWORD(v13) = 136315138;
        *(void *)((char *)&v13 + 4) = v2;
        _os_log_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_DEFAULT, "#I Successfully received ping response from baseband (firmware version is %s)", (uint8_t *)&v13, 0xCu);
      }
      pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
      if (!(void)xmmword_1EBBDCB48)
      {
        CFDictionaryRef v7 = (HealthEventDB *)operator new(0xA0uLL);
        HealthEventDB::HealthEventDB(v7);
        size_t v6 = operator new(0x20uLL);
        void *v6 = &unk_1F21077D0;
        v6[1] = 0;
        v6[2] = 0;
        v6[3] = v7;
        uint64_t v10 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDCB48 + 1);
        *(void *)&xmmword_1EBBDCB48 = v7;
        *((void *)&xmmword_1EBBDCB48 + 1) = v6;
        if (!v10)
        {
          *(void *)&long long v13 = v7;
          *((void *)&v13 + 1) = v6;
          goto LABEL_21;
        }
        if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      size_t v6 = (void *)*((void *)&xmmword_1EBBDCB48 + 1);
      CFDictionaryRef v7 = (HealthEventDB *)xmmword_1EBBDCB48;
      long long v13 = xmmword_1EBBDCB48;
      if (!*((void *)&xmmword_1EBBDCB48 + 1))
      {
LABEL_22:
        pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
        HealthEventDB::addHealthEvent(v7, 3);
        size_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
        if (*((void *)&v13 + 1))
        {
          if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        return;
      }
LABEL_21:
      atomic_fetch_add_explicit(v6 + 1, 1uLL, memory_order_relaxed);
      goto LABEL_22;
    }
  }
  else if (*(unsigned char *)(a2 + 23))
  {
    goto LABEL_3;
  }
  pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  if (!(void)xmmword_1EBBDCB48)
  {
    uint64_t v9 = (HealthEventDB *)operator new(0xA0uLL);
    HealthEventDB::HealthEventDB(v9);
    xpc_object_t v8 = operator new(0x20uLL);
    *xpc_object_t v8 = &unk_1F21077D0;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = v9;
    size_t v11 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDCB48 + 1);
    *(void *)&xmmword_1EBBDCB48 = v9;
    *((void *)&xmmword_1EBBDCB48 + 1) = v8;
    if (!v11)
    {
      *(void *)&long long v13 = v9;
      *((void *)&v13 + 1) = v8;
      goto LABEL_27;
    }
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  xpc_object_t v8 = (void *)*((void *)&xmmword_1EBBDCB48 + 1);
  uint64_t v9 = (HealthEventDB *)xmmword_1EBBDCB48;
  long long v13 = xmmword_1EBBDCB48;
  if (*((void *)&xmmword_1EBBDCB48 + 1)) {
LABEL_27:
  }
    atomic_fetch_add_explicit(v8 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  HealthEventDB::addHealthEvent(v9, 4);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v13 + 1) + 16))(*((void *)&v13 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v13 + 1));
  }

  HealthModule::checkFailuresAgainstThresholdAndEraseEFSAccordingly_sync(v3);
}

void sub_1C5A7BC84(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12HealthModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12HealthModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZZN12HealthModule10initializeEN8dispatch13group_sessionEENK3__1clEv_block_invoke_49(void *a1, abm::client::Event **a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    size_t v6 = std::__shared_weak_count::lock(v3);
    uint64_t v26 = v6;
    if (v6)
    {
      if (!a1[5])
      {
        uint64_t v17 = v6;
LABEL_47:
        if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
        return;
      }
      CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      abm::client::Event::getData((uint64_t *)&cf, *a2);
      if (cf) {
        CFDictionaryRef v7 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        CFDictionaryRef v7 = 0;
      }
      if (!v7)
      {
        xpc_object_t v18 = *(NSObject **)(v5 + 88);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl(&dword_1C59C6000, v18, OS_LOG_TYPE_DEFAULT, "#I Empty info passed", (uint8_t *)__p, 2u);
        }
        CFTypeRef v19 = cf;
        if (!cf)
        {
LABEL_46:
          uint64_t v17 = v26;
          if (!v26) {
            return;
          }
          goto LABEL_47;
        }
LABEL_45:
        CFRelease(v19);
        goto LABEL_46;
      }
      v23[0] = 0xAAAAAAAAAAAAAAAALL;
      v23[1] = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v23, (const __CFDictionary *)cf);
      memset(__p, 170, 24);
      xpc_object_t v8 = (const char *)*MEMORY[0x1E4F4C898];
      char v29 = 0;
      LOBYTE(buf) = 0;
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v27, v8);
      ctu::cf::map_adapter::getString();
      MEMORY[0x1C8794290](&v27);
      if (v29 < 0) {
        operator delete((void *)buf);
      }
      uint64_t v9 = *(NSObject **)(v5 + 88);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          uint64_t v10 = (void **)__p[0];
        }
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v10;
        _os_log_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEFAULT, "#I %s detected", (uint8_t *)&buf, 0xCu);
      }
      char v11 = HIBYTE(__p[2]);
      if (SHIBYTE(__p[2]) >= 0) {
        size_t v12 = HIBYTE(__p[2]);
      }
      else {
        size_t v12 = (size_t)__p[1];
      }
      if (v12 != strlen((const char *)*MEMORY[0x1E4F4D1E8])
        || (SHIBYTE(__p[2]) >= 0 ? (long long v13 = __p) : (long long v13 = (void **)__p[0]),
            memcmp(v13, (const void *)*MEMORY[0x1E4F4D1E8], v12)))
      {
LABEL_41:
        if (v11 < 0)
        {
          operator delete(__p[0]);
          MEMORY[0x1C87942E0](v23);
          CFTypeRef v19 = cf;
          if (!cf) {
            goto LABEL_46;
          }
        }
        else
        {
          MEMORY[0x1C87942E0](v23);
          CFTypeRef v19 = cf;
          if (!cf) {
            goto LABEL_46;
          }
        }
        goto LABEL_45;
      }
      uint64_t v14 = *(NSObject **)(v5 + 88);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1C59C6000, v14, OS_LOG_TYPE_DEFAULT, "#I Cleaning up health event db due to change in hardware model", (uint8_t *)&buf, 2u);
      }
      pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
      if (!(void)xmmword_1EBBDCB48)
      {
        uint64_t v16 = (HealthEventDB *)operator new(0xA0uLL);
        HealthEventDB::HealthEventDB(v16);
        xpc_object_t v15 = operator new(0x20uLL);
        *xpc_object_t v15 = &unk_1F21077D0;
        v15[1] = 0;
        unint64_t v15[2] = 0;
        v15[3] = v16;
        size_t v20 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDCB48 + 1);
        *(void *)&xmmword_1EBBDCB48 = v16;
        *((void *)&xmmword_1EBBDCB48 + 1) = v15;
        if (!v20)
        {
          *(void *)&long long buf = v16;
          *((void *)&buf + 1) = v15;
          goto LABEL_36;
        }
        if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      xpc_object_t v15 = (void *)*((void *)&xmmword_1EBBDCB48 + 1);
      uint64_t v16 = (HealthEventDB *)xmmword_1EBBDCB48;
      long long buf = xmmword_1EBBDCB48;
      if (!*((void *)&xmmword_1EBBDCB48 + 1))
      {
LABEL_37:
        pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
        HealthEventDB::clearDB(v16);
        uint64_t v21 = (std::__shared_weak_count *)*((void *)&buf + 1);
        if (*((void *)&buf + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
        char v11 = HIBYTE(__p[2]);
        goto LABEL_41;
      }
LABEL_36:
      atomic_fetch_add_explicit(v15 + 1, 1uLL, memory_order_relaxed);
      goto LABEL_37;
    }
  }
}

void sub_1C5A7C198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, const void *a18, __int16 a19, char a20,char a21)
{
  (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  if (a14 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C87942E0](&a16);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a18);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK3ctu20SharedSynchronizableI12HealthModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c41_ZTSNSt3__110shared_ptrIK12HealthModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c41_ZTSNSt3__110shared_ptrIK12HealthModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ctu::SharedLoggable<HealthModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F2107740;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  char v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void boost::throw_exception<std::length_error>(const std::logic_error *a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  uint64_t v3 = (void *)boost::wrapexcept<std::length_error>::wrapexcept((uint64_t)exception, a1);
}

uint64_t boost::wrapexcept<std::length_error>::wrapexcept(uint64_t a1, const std::logic_error *a2)
{
  *(void *)a1 = &unk_1F2103180;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), a2);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)a1 = &unk_1F21079D0;
  *(void *)(a1 + 8) = &unk_1F2107A00;
  *(void *)(a1 + 24) = &unk_1F2107A28;
  return a1;
}

uint64_t boost::wrapexcept<std::length_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1F21031D8;
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *(void *)(a1 + 32) = 0;
  }
  MEMORY[0x1C8794DC0](a1 + 8);
  return a1;
}

char *boost::wrapexcept<std::length_error>::clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_1F2103180;
  std::logic_error::logic_error((std::logic_error *)(v2 + 8), (const std::logic_error *)(a1 + 8));
  *((void *)v2 + 1) = MEMORY[0x1E4FBA4D0] + 16;
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)v2 + 3) = &unk_1F21031D8;
  *((void *)v2 + 4) = v3;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *((_DWORD *)v2 + 14) = *(_DWORD *)(a1 + 56);
  *(void *)uint64_t v2 = &unk_1F21079D0;
  *((void *)v2 + 1) = &unk_1F2107A00;
  *((void *)v2 + 3) = &unk_1F2107A28;
  boost::exception_detail::copy_boost_exception((uint64_t)(v2 + 24), a1 + 24);
  return v2;
}

void boost::wrapexcept<std::length_error>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<std::length_error>::wrapexcept((uint64_t)exception, a1);
}

void sub_1C5A7C748(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<std::length_error>::~wrapexcept(void *a1)
{
  a1[3] = &unk_1F21031D8;
  uint64_t v2 = a1[4];
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    a1[4] = 0;
  }
  MEMORY[0x1C8794DC0](a1 + 1);

  operator delete(a1);
}

void non-virtual thunk to'boost::wrapexcept<std::length_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1F21031D8;
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *(void *)(a1 + 24) = 0;
  }

  JUMPOUT(0x1C8794DC0);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)(a1 + 16) = &unk_1F21031D8;
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *(void *)(a1 + 24) = 0;
  }
  MEMORY[0x1C8794DC0](a1);

  operator delete((void *)(a1 - 8));
}

void non-virtual thunk to'boost::wrapexcept<std::length_error>::~wrapexcept(void *a1)
{
  *a1 = &unk_1F21031D8;
  uint64_t v2 = a1[1];
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    a1[1] = 0;
  }

  JUMPOUT(0x1C8794DC0);
}

{
  uint64_t v2;
  uint64_t vars8;

  *a1 = &unk_1F21031D8;
  uint64_t v2 = a1[1];
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    a1[1] = 0;
  }
  MEMORY[0x1C8794DC0](a1 - 2);

  operator delete(a1 - 3);
}

uint64_t boost::wrapexcept<std::length_error>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F2103180;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), (const std::logic_error *)(a2 + 8));
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA4D0] + 16;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &unk_1F21031D8;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)a1 = &unk_1F21079D0;
  *(void *)(a1 + 8) = &unk_1F2107A00;
  *(void *)(a1 + 24) = &unk_1F2107A28;
  return a1;
}

uint64_t __cxx_global_var_init_11()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<Capabilities>::~PthreadMutexGuardPolicy, &ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

uint64_t __cxx_global_var_init_12()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<HealthEventDB>::~PthreadMutexGuardPolicy, &ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

void sub_1C5A7CDB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_ea8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 32);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a2 + 48);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_ea8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
}

void sub_1C5A7CEFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5A7CF10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5A7D088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1C5A7DB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C5A7DDE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }

  support::ui::NotificationInfo::~NotificationInfo(v25);
  _Unwind_Resume(a1);
}

void sub_1C5A7DE10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5A7E4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, dispatch_object_t object, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  _Unwind_Resume(a1);
}

void CallBackData::~CallBackData(void **this)
{
  if (*((char *)this + 39) < 0)
  {
    operator delete(this[2]);
    uint64_t v2 = this[1];
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v2 = this[1];
  if (v2) {
LABEL_3:
  }
    dispatch_release(v2);
LABEL_4:
}

void __copy_helper_block_ea8_40c35_ZTSN7support2ui16NotificationInfoE112c18_ZTS12CallBackData(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
    long long v5 = (std::string *)(a1 + 64);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
    long long v5 = (std::string *)(a1 + 64);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0)
    {
LABEL_3:
      long long v6 = *(_OWORD *)(a2 + 64);
      v5->__r_.__value_.__r.__words[2] = *(void *)(a2 + 80);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 64), *(void *)(a2 + 72));
LABEL_6:
  CFDictionaryRef v7 = (std::string *)(a1 + 88);
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 88), *(void *)(a2 + 96));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  uint64_t v9 = _Block_copy(*(const void **)(a2 + 112));
  uint64_t v10 = *(NSObject **)(a2 + 120);
  *(void *)(a1 + 112) = v9;
  *(void *)(a1 + 120) = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  char v11 = (std::string *)(a1 + 128);
  if (*(char *)(a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(a2 + 128), *(void *)(a2 + 136));
  }
  else
  {
    long long v12 = *(_OWORD *)(a2 + 128);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
}

void sub_1C5A7E78C(_Unwind_Exception *a1)
{
  long long v4 = *(NSObject **)(v2 + 120);
  if (v4) {
    dispatch_release(v4);
  }

  support::ui::NotificationInfo::~NotificationInfo(v1);
  _Unwind_Resume(a1);
}

void sub_1C5A7E7B4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 87) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v2 + 63) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v2 + 63) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea8_40c35_ZTSN7support2ui16NotificationInfoE112c18_ZTS12CallBackData(uint64_t a1)
{
  if ((*(char *)(a1 + 151) & 0x80000000) == 0)
  {
    uint64_t v2 = *(NSObject **)(a1 + 120);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 128));
  uint64_t v2 = *(NSObject **)(a1 + 120);
  if (v2) {
LABEL_3:
  }
    dispatch_release(v2);
LABEL_4:

  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 87) & 0x80000000) == 0) {
      goto LABEL_6;
    }
LABEL_11:
    operator delete(*(void **)(a1 + 64));
    if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_12;
  }
  operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0) {
    goto LABEL_11;
  }
LABEL_6:
  if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
    return;
  }
LABEL_12:
  long long v3 = *(void **)(a1 + 40);

  operator delete(v3);
}

void sub_1C5A7EC94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  xpc_release(*(xpc_object_t *)(v27 - 72));
  _Unwind_Resume(a1);
}

void sub_1C5A7F588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, dispatch_object_t object, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,dispatch_object_t a36)
{
  if (object) {
    dispatch_release(object);
  }

  CallBackData::~CallBackData((void **)&a35);
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a34 < 0)
  {
    operator delete(a29);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void __copy_helper_block_ea8_32c18_ZTS12CallBackData(std::string *a1, uint64_t a2)
{
  long long v4 = _Block_copy(*(const void **)(a2 + 32));
  long long v5 = *(NSObject **)(a2 + 40);
  a1[1].__r_.__value_.__l.__size_ = (std::string::size_type)v4;
  a1[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v5;
  if (v5) {
    dispatch_retain(v5);
  }
  long long v6 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 48);
    a1[2].__r_.__value_.__r.__words[2] = *(void *)(a2 + 64);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_1C5A7F6EC(_Unwind_Exception *a1)
{
  long long v3 = *(NSObject **)(v1 + 40);
  if (v3) {
    dispatch_release(v3);
  }

  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_32c18_ZTS12CallBackData(uint64_t a1)
{
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    uint64_t v2 = *(NSObject **)(a1 + 40);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 48));
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (v2) {
LABEL_3:
  }
    dispatch_release(v2);
LABEL_4:
  long long v3 = *(void **)(a1 + 32);
}

void support::ui::showNotification(unsigned int a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v7 = *(std::string *)a2;
  }
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string v8 = *(std::string *)(a2 + 24);
  }
  if (*(char *)(a2 + 71) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else {
    std::string __p = *(std::string *)(a2 + 48);
  }
  long long v6 = 0;
  support::ui::showNotification(a1, (uint64_t)&v7, v5, &v6);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v8.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_12;
    }
LABEL_15:
    operator delete(v8.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v7.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_16;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_15;
  }
LABEL_12:
  if ((SHIBYTE(v7.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_13:

    return;
  }
LABEL_16:
  operator delete(v7.__r_.__value_.__l.__data_);
}

void sub_1C5A7F900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((a16 & 0x80000000) == 0)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else if ((a16 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a11);

  _Unwind_Resume(a1);
}

void sub_1C5A7F954(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5A7F964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  support::ui::NotificationInfo::~NotificationInfo((void **)va);

  _Unwind_Resume(a1);
}

void support::ui::showNotification(unsigned int a1, uint64_t a2, void *a3, NSObject **a4)
{
  id v7 = a3;
  memset(&v62, 170, sizeof(v62));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v62 = *(std::string *)a2;
  }
  std::string::size_type size = HIBYTE(v62.__r_.__value_.__r.__words[2]);
  if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v62.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    std::string::insert(&v62, 0, "com.apple.telephony.", 0x14uLL);
  }
  else
  {
    GetABMLogServer(&aBlock);
    uint64_t v9 = *((void *)GetGlobalLogger(&aBlock) + 4);
    uint64_t v10 = (std::__shared_weak_count *)*((void *)&aBlock + 1);
    if (*((void *)&aBlock + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&aBlock + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEFAULT, "#I Notification requires identifier!", (uint8_t *)&buf, 2u);
    }
  }
  memset(&buf, 0, sizeof(buf));
  if (a1 > 2)
  {
    GetABMLogServer(&aBlock);
    long long v12 = *((void *)GetGlobalLogger(&aBlock) + 4);
    long long v13 = (std::__shared_weak_count *)*((void *)&aBlock + 1);
    if (*((void *)&aBlock + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&aBlock + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    char v11 = (std::string *)os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    if (v11)
    {
      *(_WORD *)long long v63 = 0;
      _os_log_error_impl(&dword_1C59C6000, v12, OS_LOG_TYPE_ERROR, "ABM notification is not supported for the caller", v63, 2u);
      std::string::size_type v51 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v51 = v62.__r_.__value_.__l.__size_;
      }
      if (!v51) {
        goto LABEL_116;
      }
      goto LABEL_22;
    }
  }
  else
  {
    char v11 = std::string::__assign_external(&buf, "BasebandServicesNotification", 0x1CuLL);
  }
  std::string::size_type v14 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
  if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v14 = v62.__r_.__value_.__l.__size_;
  }
  if (!v14) {
    goto LABEL_116;
  }
LABEL_22:
  std::string::size_type v15 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v15 = buf.__r_.__value_.__l.__size_;
  }
  if (v15)
  {
    uint64_t v16 = (uint64_t **)(a2 + 24);
    uint64_t v17 = *(unsigned __int8 *)(a2 + 47);
    int v18 = (char)v17;
    if ((v17 & 0x80u) != 0) {
      uint64_t v17 = *(void *)(a2 + 32);
    }
    switch(v17)
    {
      case 20:
        if (v18 >= 0) {
          CFTypeRef v19 = (uint64_t *)(a2 + 24);
        }
        else {
          CFTypeRef v19 = *v16;
        }
        uint64_t v20 = *v19;
        uint64_t v21 = v19[1];
        int v22 = *((_DWORD *)v19 + 4);
        if (v20 == 0x6E6F6870656C6554 && v21 == 0x525F706D75445F79 && v22 == 2036621669) {
          goto LABEL_80;
        }
        goto LABEL_82;
      case 22:
        if (v18 >= 0) {
          uint64_t v25 = (uint64_t *)(a2 + 24);
        }
        else {
          uint64_t v25 = *v16;
        }
        uint64_t v26 = *v25;
        uint64_t v27 = v25[1];
        uint64_t v28 = *(uint64_t *)((char *)v25 + 14);
        if (v26 != 0x6E6F6870656C6554 || v27 != 0x535F706D75445F79 || v28 != 0x646574726174535FLL) {
          goto LABEL_82;
        }
        goto LABEL_80;
      case 23:
        if (v18 >= 0) {
          xpc_object_t v31 = (uint64_t *)(a2 + 24);
        }
        else {
          xpc_object_t v31 = *v16;
        }
        uint64_t v32 = *v31;
        uint64_t v33 = v31[1];
        uint64_t v34 = *(uint64_t *)((char *)v31 + 15);
        BOOL v36 = v32 == 0x72616C756C6C6543 && v33 == 0x445F65757373495FLL && v34 == 0x6465746365746544;
        if (v36 && (a1 != 2 || (config::hw::watch((config::hw *)v11) & 1) != 0)) {
          break;
        }
        goto LABEL_82;
      case 27:
        if (v18 >= 0) {
          xpc_object_t v37 = (uint64_t *)(a2 + 24);
        }
        else {
          xpc_object_t v37 = *v16;
        }
        uint64_t v38 = *v37;
        uint64_t v39 = v37[1];
        uint64_t v40 = v37[2];
        uint64_t v41 = *(uint64_t *)((char *)v37 + 19);
        if (v38 != 0x6E6F6870656C6554
          || v39 != 0x495F706D75445F79
          || v40 != 0x696369666675736ELL
          || v41 != 0x746E656963696666)
        {
          goto LABEL_82;
        }
LABEL_80:
        if ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild()) {
          goto LABEL_82;
        }
        break;
      default:
LABEL_82:
        std::string::size_type v45 = *(void *)a2;
        long long v46 = *(_OWORD *)(a2 + 8);
        *(std::string *)a2 = v62;
        v62.__r_.__value_.__r.__words[0] = v45;
        *(_OWORD *)&v62.__r_.__value_.__r.__words[1] = v46;
        v60.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v46 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v46 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long aBlock = v46;
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v46;
        char v47 = _Block_copy(v7);
        uint64_t v48 = *a4;
        *(void *)&long long aBlock = v47;
        *((void *)&aBlock + 1) = v48;
        if (v48) {
          dispatch_retain(v48);
        }
        if (*(char *)(a2 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
        }
        else
        {
          *(_OWORD *)&v60.__r_.__value_.__l.__data_ = *(_OWORD *)v16;
          v60.__r_.__value_.__r.__words[2] = *(void *)(a2 + 40);
        }
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v58, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
        }
        else {
          std::string v58 = buf;
        }
        uint64_t v49 = +[UserNotificationManager sharedInstance:&v58];
        if (*(char *)(a2 + 23) < 0) {
          std::string::__init_copy_ctor_external(&v55, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else {
          std::string v55 = *(std::string *)a2;
        }
        if (*(char *)(a2 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
        }
        else
        {
          *(_OWORD *)&v56.__r_.__value_.__l.__data_ = *(_OWORD *)v16;
          v56.__r_.__value_.__r.__words[2] = *(void *)(a2 + 40);
        }
        if (*(char *)(a2 + 71) < 0) {
          std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
        }
        else {
          std::string v57 = *(std::string *)(a2 + 48);
        }
        id v52 = _Block_copy((const void *)aBlock);
        dispatch_object_t v53 = (dispatch_object_t)*((void *)&aBlock + 1);
        if (*((void *)&aBlock + 1)) {
          dispatch_retain(*((dispatch_object_t *)&aBlock + 1));
        }
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&__p, v60.__r_.__value_.__l.__data_, v60.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = v60;
        }
        [v49 showNotification:&v55 withCallBackData:&v52];
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v53) {
          dispatch_release(v53);
        }

        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v57.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_110:
            if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_111;
            }
            goto LABEL_123;
          }
        }
        else if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_110;
        }
        operator delete(v56.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_111:

          if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_112;
          }
          goto LABEL_124;
        }
LABEL_123:
        operator delete(v55.__r_.__value_.__l.__data_);

        if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_112:
          if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_113;
          }
          goto LABEL_125;
        }
LABEL_124:
        operator delete(v58.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_113:
          CFDictionaryRef v50 = *((void *)&aBlock + 1);
          if (!*((void *)&aBlock + 1)) {
            goto LABEL_115;
          }
          goto LABEL_114;
        }
LABEL_125:
        operator delete(v60.__r_.__value_.__l.__data_);
        CFDictionaryRef v50 = *((void *)&aBlock + 1);
        if (*((void *)&aBlock + 1)) {
LABEL_114:
        }
          dispatch_release(v50);
LABEL_115:

        break;
    }
  }
LABEL_116:
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_118;
    }
LABEL_120:
    operator delete(v62.__r_.__value_.__l.__data_);
    goto LABEL_118;
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_120;
  }
LABEL_118:
}

void sub_1C5A8002C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, dispatch_object_t object, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,dispatch_object_t a39)
{
  if (object) {
    dispatch_release(object);
  }

  support::ui::NotificationInfo::~NotificationInfo(&a15);
  if (a36 < 0) {
    operator delete(__p);
  }
  CallBackData::~CallBackData((void **)&a38);
  if (*(char *)(v41 - 121) < 0)
  {
    operator delete(*(void **)(v41 - 144));
    if ((*(char *)(v41 - 89) & 0x80000000) == 0)
    {
LABEL_7:

      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v41 - 89) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(*(void **)(v41 - 112));

  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,CallBackData>,std::__map_value_compare<std::string,std::__value_type<std::string,CallBackData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CallBackData>>>::destroy(char *a1)
{
  if (!a1) {
    return;
  }
  std::__tree<std::__value_type<std::string,CallBackData>,std::__map_value_compare<std::string,std::__value_type<std::string,CallBackData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CallBackData>>>::destroy(*(void *)a1);
  std::__tree<std::__value_type<std::string,CallBackData>,std::__map_value_compare<std::string,std::__value_type<std::string,CallBackData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CallBackData>>>::destroy(*((void *)a1 + 1));
  if (a1[95] < 0)
  {
    operator delete(*((void **)a1 + 9));
    uint64_t v2 = *((void *)a1 + 8);
    if (!v2) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v2 = *((void *)a1 + 8);
  if (v2) {
LABEL_4:
  }
    dispatch_release(v2);
LABEL_5:

  if (a1[55] < 0)
  {
    operator delete(*((void **)a1 + 4));
    long long v3 = a1;
  }
  else
  {
    long long v3 = a1;
  }
  operator delete(v3);
}

void AWDModule::create(uint64_t *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  if (capabilities::radio::supportsMultiClientAWD((capabilities::radio *)a1))
  {
    long long v4 = operator new(0xC0uLL);
    uint64_t v5 = (uint64_t)v4;
    uint64_t v6 = *a1;
    id v7 = (std::__shared_weak_count *)a1[1];
    v11[0] = v6;
    v11[1] = (uint64_t)v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    AWDModule::AWDModule(v4, v11);
    *(void *)&long long block = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&block + 1) = 0xAAAAAAAAAAAAAAAALL;
    std::shared_ptr<AWDModule>::shared_ptr[abi:ne180100]<AWDModule,std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule*)#1},void>(&block, v5);
    ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(block + 48);
    long long v8 = block;
    long long block = 0uLL;
    *(_OWORD *)a2 = v8;
    if (v7)
    {
      uint64_t v10 = v8;
      std::__shared_weak_count::__release_weak(v7);
      *(void *)&long long v8 = v10;
    }
    uint64_t v12 = v8;
    *(void *)&long long block = MEMORY[0x1E4F143A8];
    *((void *)&block + 1) = 0x40000000;
    std::string::size_type v14 = ___ZNK3ctu20SharedSynchronizableI9AWDModuleE20execute_wrapped_syncIZNS1_4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
    std::string::size_type v15 = &__block_descriptor_tmp_73;
    uint64_t v16 = v8 + 120;
    uint64_t v17 = &v12;
    uint64_t v9 = *(NSObject **)(v8 + 136);
    if (*(void *)(v8 + 144)) {
      dispatch_async_and_wait(v9, &block);
    }
    else {
      dispatch_sync(v9, &block);
    }
  }
}

void sub_1C5A80394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v7);
  _Unwind_Resume(a1);
}

void sub_1C5A803FC(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AWDModule::init(AWDModule *this)
{
  long long v3 = this;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI9AWDModuleE20execute_wrapped_syncIZNS1_4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  block[3] = &__block_descriptor_tmp_73;
  void block[4] = (char *)this + 120;
  void block[5] = &v3;
  uint64_t v2 = (char *)this + 136;
  uint64_t v1 = *((void *)this + 17);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

void AWDModule::~AWDModule(AWDModule *this)
{
  *(void *)this = &unk_1F2107B10;
  *((void *)this + 6) = &unk_1F2107B80;
  std::__tree<std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>,std::__map_value_compare<awd::AppID,std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>,std::less<awd::AppID>,true>,std::allocator<std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>>>::destroy(*((void **)this + 22));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 20);
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    *((void *)this + 6) = &unk_1F2107F10;
    MEMORY[0x1C87940C0]((char *)this + 56);
    long long v3 = *((void *)this + 18);
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  *((void *)this + 6) = &unk_1F2107F10;
  MEMORY[0x1C87940C0]((char *)this + 56);
  long long v3 = *((void *)this + 18);
  if (v3) {
LABEL_4:
  }
    dispatch_release(v3);
LABEL_5:
  long long v4 = *((void *)this + 17);
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  *(void *)this = &unk_1F2112348;
  uint64_t v6 = *((void *)this + 3);
  if (v6)
  {
    uint64_t v7 = *((void *)this + 4);
    long long v8 = (void *)*((void *)this + 3);
    if (v7 != v6)
    {
      do
      {
        if (*(char *)(v7 - 1) < 0) {
          operator delete(*(void **)(v7 - 24));
        }
        v7 -= 24;
      }
      while (v7 != v6);
      long long v8 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v6;
    operator delete(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
}

{
  void *v1;
  uint64_t vars8;

  AWDModule::~AWDModule(this);

  operator delete(v1);
}

void *ctu::SharedLoggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F2107F10;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1F2107F10;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void non-virtual thunk to'AWDModule::~AWDModule(AWDModule *this)
{
}

{
  void *v1;
  uint64_t vars8;

  AWDModule::~AWDModule((AWDModule *)((char *)this - 48));

  operator delete(v1);
}

void *AWDModule::AWDModule(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  long long v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *a1 = &unk_1F2112348;
  a1[1] = v3;
  a1[2] = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    a1[3] = 0;
    a1[4] = 0;
    a1[5] = 0;
    std::__shared_weak_count::__release_weak(v4);
    *a1 = &unk_1F2103EC0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    a1[3] = 0;
    a1[4] = 0;
    a1[5] = 0;
    *a1 = &unk_1F2103EC0;
  }
  *a1 = &unk_1F2107B10;
  a1[6] = &unk_1F2107B80;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v18, "com.apple.telephony.abm", "awd.mod");
  GetABMLogServer(&v16);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v6 = dispatch_queue_create_with_target_V2("awd.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v6, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v6);
  a1[15] = 0;
  a1[16] = 0;
  a1[17] = v6;
  if (v6)
  {
    dispatch_retain(v6);
    a1[18] = 0;
    dispatch_release(v6);
  }
  else
  {
    a1[18] = 0;
  }
  a1[6] = &unk_1F2107F10;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v20);
  a1[7] = &unk_1F2102CB8;
  uint64_t v7 = v17;
  a1[13] = v16;
  a1[14] = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v19);
  a1[6] = &unk_1F2107FA0;
  long long v8 = v17;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v18);
  *a1 = &unk_1F2107B10;
  a1[6] = &unk_1F2107B80;
  uint64_t v9 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v10 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v20, v9);
    long long v11 = v20;
    long long v20 = 0uLL;
    uint64_t v12 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v11;
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    long long v13 = (std::__shared_weak_count *)*((void *)&v20 + 1);
    if (*((void *)&v20 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v20 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    uint64_t v10 = off_1EBBDCA08;
  }
  std::string::size_type v14 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  v19[0] = v10;
  v19[1] = *(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(uint64_t))(*(void *)v10 + 64))(v10);
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  a1[23] = 0;
  a1[22] = 0;
  a1[21] = a1 + 22;
  return a1;
}

void sub_1C5A80B0C(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  ctu::SharedLoggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v2);
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void sub_1C5A80B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a15);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a13);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v16);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  Service::~Service(v15);
  _Unwind_Resume(a1);
}

void sub_1C5A80B98(_Unwind_Exception *a1)
{
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

const char *AWDModule::getName(AWDModule *this)
{
  return "awd.mod";
}

unsigned char *AWDModule::getShutdownStages@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = operator new(1uLL);
  *a1 = v3;
  unsigned char *v3 = 3;
  uint64_t result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void AWDModule::shutdown(uint64_t a1, char a2, NSObject **a3)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN9AWDModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v7[3] = &__block_descriptor_tmp_28;
  uint64_t v5 = *a3;
  uint64_t v6 = (uint64_t *)(a1 + 120);
  v7[4] = a1;
  dispatch_group_t group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(group);
  }
  char v9 = a2;
  ctu::SharedSynchronizable<AWDModule>::execute_wrapped(v6, (uint64_t)v7);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void ___ZN9AWDModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 160);
  *(void *)(v1 + 152) = 0;
  *(void *)(v1 + 160) = 0;
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void AWDModule::initialize(uint64_t a1, NSObject **a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 1174405120;
  _DWORD v5[2] = ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke;
  v5[3] = &__block_descriptor_tmp_20_1;
  uint64_t v3 = *a2;
  long long v4 = (uint64_t *)(a1 + 120);
  v5[4] = a1;
  dispatch_group_t group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(group);
  }
  ctu::SharedSynchronizable<AWDModule>::execute_wrapped(v4, (uint64_t)v5);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v2 || (uint64_t v3 = *(void *)(v1 + 120), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (const void *)*MEMORY[0x1E4F4C9C0];
  size_t v7 = strlen((const char *)*MEMORY[0x1E4F4C9C0]);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (void **)operator new(v10 + 1);
    size_t v47 = v8;
    unint64_t v48 = v11 | 0x8000000000000000;
    long long __dst = p_dst;
    goto LABEL_12;
  }
  HIBYTE(v48) = v7;
  p_dst = (void **)&__dst;
  if (v7) {
LABEL_12:
  }
    memmove(p_dst, v6, v8);
  *((unsigned char *)p_dst + v8) = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_5_10;
  void aBlock[4] = v1;
  void aBlock[5] = v3;
  dispatch_object_t v44 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = _Block_copy(aBlock);
  std::string::size_type v45 = v12;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v45);
  if (v12) {
    _Block_release(v12);
  }
  if (SHIBYTE(v48) < 0) {
    operator delete(__dst);
  }
  long long v13 = (const void *)*MEMORY[0x1E4F4CC08];
  size_t v14 = strlen((const char *)*MEMORY[0x1E4F4CC08]);
  if (v14 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v15 = v14;
  if (v14 >= 0x17)
  {
    uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v17 = v14 | 7;
    }
    uint64_t v18 = v17 + 1;
    uint64_t v16 = (void **)operator new(v17 + 1);
    size_t v47 = v15;
    unint64_t v48 = v18 | 0x8000000000000000;
    long long __dst = v16;
    goto LABEL_24;
  }
  HIBYTE(v48) = v14;
  uint64_t v16 = (void **)&__dst;
  if (v14) {
LABEL_24:
  }
    memmove(v16, v13, v15);
  *((unsigned char *)v16 + v15) = 0;
  v40[0] = MEMORY[0x1E4F143A8];
  v40[1] = 1174405120;
  v40[2] = ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_6;
  v40[3] = &__block_descriptor_tmp_9_4;
  v40[4] = v1;
  v40[5] = v3;
  uint64_t v41 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  CFTypeRef v19 = _Block_copy(v40);
  xpc_object_t v42 = v19;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v42);
  if (v19) {
    _Block_release(v19);
  }
  if (SHIBYTE(v48) < 0) {
    operator delete(__dst);
  }
  long long v20 = (const void *)*MEMORY[0x1E4F4C468];
  size_t v21 = strlen((const char *)*MEMORY[0x1E4F4C468]);
  if (v21 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v22 = v21;
  if (v21 >= 0x17)
  {
    uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v24 = v21 | 7;
    }
    uint64_t v25 = v24 + 1;
    uint64_t v23 = (void **)operator new(v24 + 1);
    size_t v47 = v22;
    unint64_t v48 = v25 | 0x8000000000000000;
    long long __dst = v23;
    goto LABEL_36;
  }
  HIBYTE(v48) = v21;
  uint64_t v23 = (void **)&__dst;
  if (v21) {
LABEL_36:
  }
    memmove(v23, v20, v22);
  *((unsigned char *)v23 + v22) = 0;
  v37[0] = MEMORY[0x1E4F143A8];
  v37[1] = 1174405120;
  v37[2] = ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_10;
  void v37[3] = &__block_descriptor_tmp_13_4;
  v37[4] = v1;
  v37[5] = v3;
  uint64_t v38 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v26 = _Block_copy(v37);
  uint64_t v39 = v26;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v39);
  if (v26) {
    _Block_release(v26);
  }
  if (SHIBYTE(v48) < 0) {
    operator delete(__dst);
  }
  uint64_t v27 = (const void *)*MEMORY[0x1E4F4CA08];
  size_t v28 = strlen((const char *)*MEMORY[0x1E4F4CA08]);
  if (v28 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v29 = v28;
  if (v28 >= 0x17)
  {
    uint64_t v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17) {
      uint64_t v31 = v28 | 7;
    }
    uint64_t v32 = v31 + 1;
    uint64_t v30 = (void **)operator new(v31 + 1);
    size_t v47 = v29;
    unint64_t v48 = v32 | 0x8000000000000000;
    long long __dst = v30;
    goto LABEL_48;
  }
  HIBYTE(v48) = v28;
  uint64_t v30 = (void **)&__dst;
  if (v28) {
LABEL_48:
  }
    memmove(v30, v27, v29);
  *((unsigned char *)v30 + v29) = 0;
  v34[0] = MEMORY[0x1E4F143A8];
  v34[1] = 1174405120;
  v34[2] = ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_14;
  v34[3] = &__block_descriptor_tmp_17_2;
  v34[4] = v1;
  v34[5] = v3;
  uint64_t v35 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v33 = _Block_copy(v34);
  BOOL v36 = v33;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v36);
  if (v33) {
    _Block_release(v33);
  }
  if (SHIBYTE(v48) < 0) {
    operator delete(__dst);
  }
  if (v35) {
    std::__shared_weak_count::__release_weak(v35);
  }
  if (v38) {
    std::__shared_weak_count::__release_weak(v38);
  }
  if (v41) {
    std::__shared_weak_count::__release_weak(v41);
  }
  if (v44) {
    std::__shared_weak_count::__release_weak(v44);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C5A81344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
  if (v33) {
    _Block_release(v33);
  }
  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    if ((*(char *)(v34 - 97) & 0x80000000) == 0)
    {
LABEL_5:
      BOOL v36 = a24;
      if (!a24)
      {
LABEL_10:
        if (a32) {
          std::__shared_weak_count::__release_weak(a32);
        }
        xpc_object_t v37 = *(std::__shared_weak_count **)(v34 - 136);
        if (v37)
        {
          std::__shared_weak_count::__release_weak(v37);
          std::__shared_weak_count::__release_weak(v32);
          _Unwind_Resume(a1);
        }
        std::__shared_weak_count::__release_weak(v32);
        _Unwind_Resume(a1);
      }
LABEL_9:
      std::__shared_weak_count::__release_weak(v36);
      goto LABEL_10;
    }
  }
  else if ((*(char *)(v34 - 97) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v34 - 120));
  BOOL v36 = a24;
  if (!a24) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

uint64_t __copy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9AWDModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9AWDModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_6(void *a1, xpc_object_t *a2, const void **a3)
{
  long long v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  size_t v7 = (void *)a1[4];
  size_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  char v9 = v8;
  uint64_t v10 = a1[5];
  if (v10)
  {
    uint64_t v11 = (std::__shared_weak_count *)a1[6];
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    xpc_object_t v12 = *a2;
    if (v12)
    {
      xpc_retain(v12);
      long long v13 = *a3;
      if (*a3) {
        goto LABEL_8;
      }
    }
    else
    {
      xpc_object_t v12 = xpc_null_create();
      long long v13 = *a3;
      if (*a3)
      {
LABEL_8:
        size_t v14 = _Block_copy(v13);
        size_t v15 = (std::__shared_weak_count *)v7[16];
        if (!v15) {
LABEL_24:
        }
          std::__throw_bad_weak_ptr[abi:ne180100]();
        goto LABEL_12;
      }
    }
    size_t v14 = 0;
    size_t v15 = (std::__shared_weak_count *)v7[16];
    if (!v15) {
      goto LABEL_24;
    }
LABEL_12:
    uint64_t v16 = v7[15];
    uint64_t v17 = std::__shared_weak_count::lock(v15);
    if (!v17) {
      goto LABEL_24;
    }
    uint64_t v18 = v17;
    CFTypeRef v19 = operator new(0x28uLL);
    long long v20 = v19;
    *CFTypeRef v19 = v10;
    v19[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    void v19[2] = v7;
    void v19[3] = v12;
    xpc_object_t v21 = xpc_null_create();
    uint8_t v20[4] = v14;
    size_t v22 = v7[17];
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v23 = operator new(0x18uLL);
    void *v23 = v20;
    v23[1] = v16;
    void v23[2] = v18;
    dispatch_async_f(v22, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    xpc_release(v21);
    if (v11) {
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_10(void *a1, xpc_object_t *a2, const void **a3)
{
  long long v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  size_t v7 = (void *)a1[4];
  size_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  char v9 = v8;
  uint64_t v10 = a1[5];
  if (v10)
  {
    uint64_t v11 = (std::__shared_weak_count *)a1[6];
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    xpc_object_t v12 = *a2;
    if (v12)
    {
      xpc_retain(v12);
      long long v13 = *a3;
      if (*a3) {
        goto LABEL_8;
      }
    }
    else
    {
      xpc_object_t v12 = xpc_null_create();
      long long v13 = *a3;
      if (*a3)
      {
LABEL_8:
        size_t v14 = _Block_copy(v13);
        size_t v15 = (std::__shared_weak_count *)v7[16];
        if (!v15) {
LABEL_24:
        }
          std::__throw_bad_weak_ptr[abi:ne180100]();
        goto LABEL_12;
      }
    }
    size_t v14 = 0;
    size_t v15 = (std::__shared_weak_count *)v7[16];
    if (!v15) {
      goto LABEL_24;
    }
LABEL_12:
    uint64_t v16 = v7[15];
    uint64_t v17 = std::__shared_weak_count::lock(v15);
    if (!v17) {
      goto LABEL_24;
    }
    uint64_t v18 = v17;
    CFTypeRef v19 = operator new(0x28uLL);
    long long v20 = v19;
    *CFTypeRef v19 = v10;
    v19[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    void v19[2] = v7;
    void v19[3] = v12;
    xpc_object_t v21 = xpc_null_create();
    uint8_t v20[4] = v14;
    size_t v22 = v7[17];
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v23 = operator new(0x18uLL);
    void *v23 = v20;
    v23[1] = v16;
    void v23[2] = v18;
    dispatch_async_f(v22, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb2_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    xpc_release(v21);
    if (v11) {
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_14(void *a1, xpc_object_t *a2, const void **a3)
{
  long long v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  size_t v7 = (void *)a1[4];
  size_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  char v9 = v8;
  uint64_t v10 = a1[5];
  if (v10)
  {
    uint64_t v11 = (std::__shared_weak_count *)a1[6];
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    xpc_object_t v12 = *a2;
    if (v12)
    {
      xpc_retain(v12);
      long long v13 = *a3;
      if (*a3) {
        goto LABEL_8;
      }
    }
    else
    {
      xpc_object_t v12 = xpc_null_create();
      long long v13 = *a3;
      if (*a3)
      {
LABEL_8:
        size_t v14 = _Block_copy(v13);
        size_t v15 = (std::__shared_weak_count *)v7[16];
        if (!v15) {
LABEL_24:
        }
          std::__throw_bad_weak_ptr[abi:ne180100]();
        goto LABEL_12;
      }
    }
    size_t v14 = 0;
    size_t v15 = (std::__shared_weak_count *)v7[16];
    if (!v15) {
      goto LABEL_24;
    }
LABEL_12:
    uint64_t v16 = v7[15];
    uint64_t v17 = std::__shared_weak_count::lock(v15);
    if (!v17) {
      goto LABEL_24;
    }
    uint64_t v18 = v17;
    CFTypeRef v19 = operator new(0x28uLL);
    long long v20 = v19;
    *CFTypeRef v19 = v10;
    v19[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    void v19[2] = v7;
    void v19[3] = v12;
    xpc_object_t v21 = xpc_null_create();
    uint8_t v20[4] = v14;
    size_t v22 = v7[17];
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v23 = operator new(0x18uLL);
    void *v23 = v20;
    v23[1] = v16;
    void v23[2] = v18;
    dispatch_async_f(v22, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    xpc_release(v21);
    if (v11) {
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void AWDModule::sendPayload_sync(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a1 + 152);
  if (v6)
  {
    char v9 = (std::__shared_weak_count *)a2[1];
    uint64_t v17 = *a2;
    uint64_t v18 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 1174405120;
    uint64_t v14[2] = ___ZN9AWDModule16sendPayload_syncENSt3__110shared_ptrIN3awd10AppContextEEENS2_11PayloadTypeERKNS0_6vectorIhNS0_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
    v14[3] = &__block_descriptor_tmp_22;
    uint64_t v10 = *(void **)a5;
    if (*(void *)a5) {
      uint64_t v10 = _Block_copy(v10);
    }
    size_t v15 = v10;
    long long aBlock = _Block_copy(v14);
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, void **))(*(void *)v6 + 56))(v6, &v17, a3, a4, &aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
    uint64_t v11 = v18;
    if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      xpc_object_t v12 = v15;
      if (!v15) {
        return;
      }
    }
    else
    {
      xpc_object_t v12 = v15;
      if (!v15) {
        return;
      }
    }
    _Block_release(v12);
  }
  else
  {
    long long v13 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_ERROR, "Cannot send payload because driver is unavailable", buf, 2u);
    }
    (*(void (**)(void))(*(void *)a5 + 16))();
  }
}

void sub_1C5A81CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *aBlock, char a15)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a13) {
    _Block_release(a13);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t ___ZN9AWDModule27enableMetricSubmission_syncENSt3__110shared_ptrIN3awd10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void AWDModule::clearConfiguration_sync(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 152);
  if (v4)
  {
    uint64_t v5 = (std::__shared_weak_count *)a2[1];
    uint64_t v13 = *a2;
    size_t v14 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 1174405120;
    v10[2] = ___ZN9AWDModule23clearConfiguration_syncENSt3__110shared_ptrIN3awd10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
    v10[3] = &__block_descriptor_tmp_28_1;
    uint64_t v6 = *(void **)a3;
    if (*(void *)a3) {
      uint64_t v6 = _Block_copy(v6);
    }
    uint64_t v11 = v6;
    long long aBlock = _Block_copy(v10);
    (*(void (**)(uint64_t, uint64_t *, void **))(*(void *)v4 + 64))(v4, &v13, &aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
    size_t v7 = v14;
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      size_t v8 = v11;
      if (!v11) {
        return;
      }
    }
    else
    {
      size_t v8 = v11;
      if (!v11) {
        return;
      }
    }
    _Block_release(v8);
  }
  else
  {
    char v9 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_ERROR, "Cannot clear configuration because driver is unavailable", buf, 2u);
    }
    (*(void (**)(void))(*(void *)a3 + 16))();
  }
}

void sub_1C5A81EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *aBlock, char a15)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a13) {
    _Block_release(a13);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t ___ZN9AWDModule23clearConfiguration_syncENSt3__110shared_ptrIN3awd10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void AWDModule::updateProperties_sync(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 152);
  if (v4)
  {
    uint64_t v5 = (std::__shared_weak_count *)a2[1];
    uint64_t v13 = *a2;
    size_t v14 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 1174405120;
    v10[2] = ___ZN9AWDModule21updateProperties_syncENSt3__110shared_ptrIN3awd10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
    v10[3] = &__block_descriptor_tmp_31_1;
    uint64_t v6 = *(void **)a3;
    if (*(void *)a3) {
      uint64_t v6 = _Block_copy(v6);
    }
    uint64_t v11 = v6;
    long long aBlock = _Block_copy(v10);
    (*(void (**)(uint64_t, uint64_t *, void **))(*(void *)v4 + 72))(v4, &v13, &aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
    size_t v7 = v14;
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      size_t v8 = v11;
      if (!v11) {
        return;
      }
    }
    else
    {
      size_t v8 = v11;
      if (!v11) {
        return;
      }
    }
    _Block_release(v8);
  }
  else
  {
    char v9 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_ERROR, "Cannot update properties because driver is unavailable", buf, 2u);
    }
    (*(void (**)(void))(*(void *)a3 + 16))();
  }
}

void sub_1C5A820E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *aBlock, char a15)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a13) {
    _Block_release(a13);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t ___ZN9AWDModule21updateProperties_syncENSt3__110shared_ptrIN3awd10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void AWDModule::appCheckIn_sync(uint64_t a1@<X0>, unsigned int a2@<W1>, char **a3@<X8>)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v5 || (uint64_t v7 = *(void *)(a1 + 120), (v8 = std::__shared_weak_count::lock(v5)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  char v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  *a3 = (char *)0xAAAAAAAAAAAAAAAALL;
  a3[1] = (char *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v10 = (char *)operator new(0x58uLL);
  uint64_t v11 = v10;
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)uint64_t v10 = &unk_1F2108168;
  xpc_object_t v12 = v10 + 24;
  uint64_t v13 = *(NSObject **)(a1 + 136);
  if (v13)
  {
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
    *((void *)v11 + 3) = v13;
    dispatch_retain(v13);
    *(_WORD *)(v11 + 33) = 0;
    *(_OWORD *)(v11 + 40) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    v11[32] = a2;
    dispatch_release(v13);
  }
  else
  {
    *((void *)v10 + 3) = 0;
    *(_WORD *)(v10 + 33) = 0;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    v10[32] = a2;
  }
  *a3 = v12;
  a3[1] = v11;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v11 + 2, 1uLL, memory_order_relaxed);
  size_t v15 = (uint64_t **)(a1 + 176);
  size_t v14 = *(uint64_t **)(a1 + 176);
  if (v14)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v16 = (uint64_t **)v14;
        unsigned int v17 = *((unsigned __int8 *)v14 + 32);
        if (v17 <= a2) {
          break;
        }
        size_t v14 = *v16;
        size_t v15 = v16;
        if (!*v16) {
          goto LABEL_15;
        }
      }
      if (v17 >= a2) {
        break;
      }
      size_t v14 = v16[1];
      if (!v14)
      {
        size_t v15 = v16 + 1;
        goto LABEL_15;
      }
    }
    xpc_object_t v21 = v12;
    size_t v22 = (atomic_ullong *)v11;
    uint64_t v18 = v16;
LABEL_21:
    atomic_fetch_add_explicit(v22 + 1, 1uLL, memory_order_relaxed);
    uint64_t v23 = (std::__shared_weak_count *)*((void *)v18 + 6);
    *((void *)v18 + 5) = v21;
    *((void *)v18 + 6) = v22;
    if (!v23) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  uint64_t v16 = (uint64_t **)(a1 + 176);
LABEL_15:
  uint64_t v18 = operator new(0x38uLL);
  *((unsigned char *)v18 + 32) = a2;
  *((void *)v18 + 5) = 0;
  *((void *)v18 + 6) = 0;
  *(void *)uint64_t v18 = 0;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = v16;
  *size_t v15 = (uint64_t *)v18;
  uint64_t v19 = **(void **)(a1 + 168);
  long long v20 = (uint64_t *)v18;
  if (v19)
  {
    *(void *)(a1 + 168) = v19;
    long long v20 = *v15;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 176), v20);
  ++*(void *)(a1 + 184);
  xpc_object_t v21 = *a3;
  size_t v22 = (atomic_ullong *)a3[1];
  if (v22) {
    goto LABEL_21;
  }
  uint64_t v23 = (std::__shared_weak_count *)*((void *)v18 + 6);
  *((void *)v18 + 5) = v21;
  *((void *)v18 + 6) = 0;
  if (!v23)
  {
LABEL_23:
    uint64_t v24 = *(NSObject **)(a1 + 88);
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
LABEL_22:
  if (atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_23;
  }
  ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
  std::__shared_weak_count::__release_weak(v23);
  uint64_t v24 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
LABEL_24:
    uint64_t v25 = awd::asString();
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v45 = v25;
    _os_log_impl(&dword_1C59C6000, v24, OS_LOG_TYPE_DEFAULT, "#I New app checking-in: %s", buf, 0xCu);
  }
LABEL_25:
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN9AWDModule15appCheckIn_syncEN3awd5AppIDE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_38_0;
  void aBlock[4] = a1;
  void aBlock[5] = v7;
  xpc_object_t v42 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  int v43 = _Block_copy(aBlock);
  awd::AppContext::setHandler();
  if (v43) {
    _Block_release(v43);
  }
  v36[0] = MEMORY[0x1E4F143A8];
  v36[1] = 1174405120;
  v36[2] = ___ZN9AWDModule15appCheckIn_syncEN3awd5AppIDE_block_invoke_39;
  _OWORD v36[3] = &__block_descriptor_tmp_41_0;
  v36[4] = a1;
  v36[5] = v7;
  xpc_object_t v37 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v38 = v12;
  uint64_t v39 = (std::__shared_weak_count *)v11;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v11 + 2, 1uLL, memory_order_relaxed);
  uint64_t v40 = _Block_copy(v36);
  awd::AppContext::setHandler();
  if (v40) {
    _Block_release(v40);
  }
  v31[0] = MEMORY[0x1E4F143A8];
  v31[1] = 1174405120;
  v31[2] = ___ZN9AWDModule15appCheckIn_syncEN3awd5AppIDE_block_invoke_42;
  v31[3] = &__block_descriptor_tmp_46;
  v31[4] = a1;
  v31[5] = v7;
  uint64_t v32 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v33 = v12;
  uint64_t v34 = (std::__shared_weak_count *)v11;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v11 + 2, 1uLL, memory_order_relaxed);
  uint64_t v35 = _Block_copy(v31);
  awd::AppContext::setHandler();
  if (v35) {
    _Block_release(v35);
  }
  if (*(void *)(a1 + 152))
  {
    uint64_t v26 = (std::__shared_weak_count *)a3[1];
    uint64_t v30 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    awd::AwdCommandDriver::checkIn();
    if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
      uint64_t v27 = v34;
      if (!v34) {
        goto LABEL_41;
      }
LABEL_40:
      std::__shared_weak_count::__release_weak(v27);
      goto LABEL_41;
    }
LABEL_39:
    uint64_t v27 = v34;
    if (!v34) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }
  size_t v28 = *(NSObject **)(a1 + 88);
  if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
    goto LABEL_39;
  }
  uint64_t v29 = awd::asString();
  *(_DWORD *)std::string buf = 136315138;
  uint64_t v45 = v29;
  _os_log_error_impl(&dword_1C59C6000, v28, OS_LOG_TYPE_ERROR, "Cannot check in context of app %s because driver is unavailable", buf, 0xCu);
  uint64_t v27 = v34;
  if (v34) {
    goto LABEL_40;
  }
LABEL_41:
  if (v32) {
    std::__shared_weak_count::__release_weak(v32);
  }
  if (v39) {
    std::__shared_weak_count::__release_weak(v39);
  }
  if (v37) {
    std::__shared_weak_count::__release_weak(v37);
  }
  if (v42) {
    std::__shared_weak_count::__release_weak(v42);
  }
  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v11);
  std::__shared_weak_count::__release_weak(v9);
}

void sub_1C5A826DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19, void *aBlock,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,std::__shared_weak_count *a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  if (a19) {
    std::__shared_weak_count::__release_weak(a19);
  }
  if (a17) {
    std::__shared_weak_count::__release_weak(a17);
  }
  if (a29) {
    std::__shared_weak_count::__release_weak(a29);
  }
  if (a27) {
    std::__shared_weak_count::__release_weak(a27);
  }
  if (a37) {
    std::__shared_weak_count::__release_weak(a37);
  }
  std::__shared_weak_count::__release_weak(v38);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v39);
  std::__shared_weak_count::__release_weak(v37);
  _Unwind_Resume(a1);
}

void sub_1C5A827B4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5A827D0()
{
}

void ___ZN9AWDModule15appCheckIn_syncEN3awd5AppIDE_block_invoke(void *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 136315138;
          uint64_t v8 = awd::asString();
          _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#I Client state: %s", buf, 0xCu);
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1C5A828F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZN9AWDModule15appCheckIn_syncEN3awd5AppIDE_block_invoke_39(void *a1, uint64_t a2, int *a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v6 = a1[4];
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  xpc_object_t v42 = v7;
  if (!v7) {
    return;
  }
  if (!a1[5])
  {
    uint64_t v13 = v7;
LABEL_52:
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    return;
  }
  uint64_t v8 = *(NSObject **)(v6 + 88);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = *a3;
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v9;
    _os_log_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_DEFAULT, "#I Received trigger 0x%x", buf, 8u);
  }
  *(void *)std::string buf = 0;
  dispatch_object_t v44 = 0;
  uint64_t v10 = (std::__shared_weak_count *)a1[8];
  if (v10)
  {
    dispatch_object_t v44 = std::__shared_weak_count::lock(v10);
    if (v44) {
      *(void *)std::string buf = a1[7];
    }
  }
  xpc_object_t v11 = xpc_dictionary_create(0, 0, 0);
  if (v11 || (xpc_object_t v11 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v11) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v11);
      xpc_object_t v12 = v11;
    }
    else
    {
      xpc_object_t v12 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v12 = xpc_null_create();
    xpc_object_t v11 = 0;
  }
  xpc_release(v11);
  unsigned int AppID = awd::AppContext::getAppID(*(awd::AppContext **)buf);
  xpc_object_t v15 = xpc_int64_create(AppID);
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E4F4D300], v15);
  xpc_object_t v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  xpc_object_t v17 = xpc_int64_create(a3[1]);
  if (!v17) {
    xpc_object_t v17 = xpc_null_create();
  }
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E4F4C1F0], v17);
  xpc_object_t v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  xpc_object_t v19 = xpc_int64_create(a3[2]);
  if (!v19) {
    xpc_object_t v19 = xpc_null_create();
  }
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E4F4C278], v19);
  xpc_object_t v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  xpc_object_t v21 = xpc_int64_create(*a3);
  if (!v21) {
    xpc_object_t v21 = xpc_null_create();
  }
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E4F4C1A8], v21);
  xpc_object_t v22 = xpc_null_create();
  xpc_release(v21);
  xpc_release(v22);
  xpc_object_t v23 = xpc_int64_create(*((void *)a3 + 2));
  if (!v23) {
    xpc_object_t v23 = xpc_null_create();
  }
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E4F4C270], v23);
  xpc_object_t v24 = xpc_null_create();
  xpc_release(v23);
  xpc_release(v24);
  uint64_t v25 = (const void *)*MEMORY[0x1E4F4C148];
  size_t v26 = strlen((const char *)*MEMORY[0x1E4F4C148]);
  if (v26 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v27 = (void *)v26;
  if (v26 >= 0x17)
  {
    uint64_t v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17) {
      uint64_t v30 = v26 | 7;
    }
    uint64_t v31 = v30 + 1;
    size_t v28 = (void **)operator new(v30 + 1);
    __dst[1] = v27;
    unint64_t v40 = v31 | 0x8000000000000000;
    __dst[0] = v28;
LABEL_34:
    memmove(v28, v25, (size_t)v27);
    *((unsigned char *)v27 + (void)v28) = 0;
    xpc_object_t object = v12;
    if (v12) {
      goto LABEL_30;
    }
LABEL_35:
    xpc_object_t object = xpc_null_create();
    goto LABEL_36;
  }
  HIBYTE(v40) = v26;
  size_t v28 = __dst;
  if (v26) {
    goto LABEL_34;
  }
  LOBYTE(__dst[0]) = 0;
  xpc_object_t object = v12;
  if (!v12) {
    goto LABEL_35;
  }
LABEL_30:
  xpc_retain(v12);
LABEL_36:
  xpc::bridge((uint64_t *)&cf, (xpc *)&object, v29);
  CFTypeRef v32 = cf;
  if (cf && (CFTypeID v33 = CFGetTypeID(cf), v33 == CFDictionaryGetTypeID()))
  {
    CFTypeRef v38 = v32;
    CFRetain(v32);
  }
  else
  {
    CFTypeRef v38 = 0;
  }
  long long aBlock = 0;
  Service::broadcastEvent(v6, (uint64_t)__dst, &v38, (const void **)&aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v38) {
    CFRelease(v38);
  }
  if (cf) {
    CFRelease(cf);
  }
  xpc_release(object);
  if (SHIBYTE(v40) < 0) {
    operator delete(__dst[0]);
  }
  xpc_release(v12);
  uint64_t v34 = v44;
  if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  uint64_t v13 = v42;
  if (v42) {
    goto LABEL_52;
  }
}

void sub_1C5A82DBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, xpc_object_t object, char a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *__copy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9AWDModuleEE56c41_ZTSNSt3__18weak_ptrIN3awd10AppContextEEE(void *result, void *a2)
{
  uint64_t v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[8];
  result[7] = a2[7];
  result[8] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9AWDModuleEE56c41_ZTSNSt3__18weak_ptrIN3awd10AppContextEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void ___ZN9AWDModule15appCheckIn_syncEN3awd5AppIDE_block_invoke_42(void *a1, int *a2, int a3, uint64_t a4)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (std::__shared_weak_count *)a1[6];
  if (!v5) {
    return;
  }
  uint64_t v9 = a1[4];
  uint64_t v10 = std::__shared_weak_count::lock(v5);
  std::string::size_type v51 = v10;
  if (!v10) {
    return;
  }
  if (!a1[5])
  {
    xpc_object_t v15 = v10;
LABEL_60:
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    return;
  }
  xpc_object_t v11 = *(NSObject **)(v9 + 88);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = a2[1];
    *(_DWORD *)std::string buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = a3;
    LOWORD(v53) = 1024;
    *(_DWORD *)((char *)&v53 + 2) = v12;
    _os_log_impl(&dword_1C59C6000, v11, OS_LOG_TYPE_DEFAULT, "#I Received segment %d of metric 0x%x", buf, 0xEu);
  }
  xpc_object_t v13 = xpc_dictionary_create(0, 0, 0);
  if (v13 || (xpc_object_t v13 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v13) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v13);
      xpc_object_t v14 = v13;
    }
    else
    {
      xpc_object_t v14 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v14 = xpc_null_create();
    xpc_object_t v13 = 0;
  }
  xpc_release(v13);
  *(void *)std::string buf = 0;
  dispatch_object_t v53 = 0;
  xpc_object_t v16 = (std::__shared_weak_count *)a1[8];
  if (v16)
  {
    xpc_object_t v16 = std::__shared_weak_count::lock(v16);
    dispatch_object_t v53 = v16;
    if (v16)
    {
      xpc_object_t v16 = (std::__shared_weak_count *)a1[7];
      *(void *)std::string buf = v16;
    }
  }
  unsigned int AppID = awd::AppContext::getAppID((awd::AppContext *)v16);
  xpc_object_t v18 = xpc_int64_create(AppID);
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E4F4D300], v18);
  xpc_object_t v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  xpc_object_t v20 = xpc_int64_create(a2[3]);
  if (!v20) {
    xpc_object_t v20 = xpc_null_create();
  }
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E4F4C1F0], v20);
  xpc_object_t v21 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v21);
  xpc_object_t v22 = xpc_int64_create(*a2);
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E4F4C178], v22);
  xpc_object_t v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  xpc_object_t v24 = xpc_int64_create(a2[1]);
  if (!v24) {
    xpc_object_t v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E4F4C130], v24);
  xpc_object_t v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  xpc_object_t v26 = xpc_BOOL_create(*((unsigned char *)a2 + 16));
  if (!v26) {
    xpc_object_t v26 = xpc_null_create();
  }
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E4F4C0E8], v26);
  xpc_object_t v27 = xpc_null_create();
  xpc_release(v26);
  xpc_release(v27);
  xpc_object_t v28 = xpc_BOOL_create(*((unsigned char *)a2 + 17));
  if (!v28) {
    xpc_object_t v28 = xpc_null_create();
  }
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E4F4C2C0], v28);
  xpc_object_t v29 = xpc_null_create();
  xpc_release(v28);
  xpc_release(v29);
  if (*((unsigned char *)a2 + 24))
  {
    xpc_object_t v30 = xpc_int64_create(a2[5]);
    if (!v30) {
      xpc_object_t v30 = xpc_null_create();
    }
    xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E4F4C2B8], v30);
    xpc_object_t v31 = xpc_null_create();
    xpc_release(v30);
    xpc_release(v31);
  }
  xpc_object_t v32 = xpc_data_create(*(const void **)a4, *(void *)(a4 + 8) - *(void *)a4);
  if (!v32) {
    xpc_object_t v32 = xpc_null_create();
  }
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E4F4C0F0], v32);
  xpc_object_t v33 = xpc_null_create();
  xpc_release(v32);
  xpc_release(v33);
  uint64_t v34 = (const void *)*MEMORY[0x1E4F4C128];
  size_t v35 = strlen((const char *)*MEMORY[0x1E4F4C128]);
  if (v35 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  BOOL v36 = (void *)v35;
  if (v35 >= 0x17)
  {
    uint64_t v39 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17) {
      uint64_t v39 = v35 | 7;
    }
    uint64_t v40 = v39 + 1;
    xpc_object_t v37 = (void **)operator new(v39 + 1);
    __dst[1] = v36;
    unint64_t v49 = v40 | 0x8000000000000000;
    __dst[0] = v37;
LABEL_42:
    memmove(v37, v34, (size_t)v36);
    *((unsigned char *)v36 + (void)v37) = 0;
    xpc_object_t object = v14;
    if (v14) {
      goto LABEL_38;
    }
LABEL_43:
    xpc_object_t object = xpc_null_create();
    goto LABEL_44;
  }
  HIBYTE(v49) = v35;
  xpc_object_t v37 = __dst;
  if (v35) {
    goto LABEL_42;
  }
  LOBYTE(__dst[0]) = 0;
  xpc_object_t object = v14;
  if (!v14) {
    goto LABEL_43;
  }
LABEL_38:
  xpc_retain(v14);
LABEL_44:
  xpc::bridge((uint64_t *)&cf, (xpc *)&object, v38);
  CFTypeRef v41 = cf;
  if (cf && (CFTypeID v42 = CFGetTypeID(cf), v42 == CFDictionaryGetTypeID()))
  {
    CFTypeRef v47 = v41;
    CFRetain(v41);
  }
  else
  {
    CFTypeRef v47 = 0;
  }
  long long aBlock = 0;
  Service::broadcastEvent(v9, (uint64_t)__dst, &v47, (const void **)&aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v47) {
    CFRelease(v47);
  }
  if (cf) {
    CFRelease(cf);
  }
  xpc_release(object);
  if (SHIBYTE(v49) < 0) {
    operator delete(__dst[0]);
  }
  int v43 = v53;
  if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
  }
  xpc_release(v14);
  xpc_object_t v15 = v51;
  if (v51) {
    goto LABEL_60;
  }
}

void sub_1C5A83520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, xpc_object_t object, char a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (const char *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 16))();
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F2107F10;
  MEMORY[0x1C87940C0](a1 + 1);
  return a1;
}

void ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F2107F10;
  MEMORY[0x1C87940C0](a1 + 1);

  operator delete(a1);
}

void ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1C5A83948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C5A83964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<AWDModule>::shared_ptr[abi:ne180100]<AWDModule,std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2107F50;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 120) = a2;
      *(void *)(a2 + 128) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 120) = a2;
  *(void *)(a2 + 128) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C5A83A90(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule*)#1}::operator() const(AWDModule*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C5A83AB8(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<AWDModule *,std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule *)#1},std::allocator<AWDModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<AWDModule *,std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule *)#1},std::allocator<AWDModule>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<AWDModule *,std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule *)#1},std::allocator<AWDModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI9AWDModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI9AWDModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI9AWDModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI9AWDModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

uint64_t std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule*)#1}::operator() const(AWDModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__tree<std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>,std::__map_value_compare<awd::AppID,std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>,std::less<awd::AppID>,true>,std::allocator<std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>,std::__map_value_compare<awd::AppID,std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>,std::less<awd::AppID>,true>,std::allocator<std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>>>::destroy(*a1);
    std::__tree<std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>,std::__map_value_compare<awd::AppID,std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>,std::less<awd::AppID>,true>,std::allocator<std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>>>::destroy(a1[1]);
    uint64_t v2 = (std::__shared_weak_count *)a1[6];
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      unint64_t v3 = a1;
    }
    else
    {
      unint64_t v3 = a1;
    }
    operator delete(v3);
  }
}

void ctu::SharedLoggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F2107F10;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void ___ZNK3ctu20SharedSynchronizableI9AWDModuleE20execute_wrapped_syncIZNS1_4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(**(void **)(a1 + 40) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_1C59C6000, v1, OS_LOG_TYPE_DEFAULT, "#I Initializing", v2, 2u);
  }
}

void ctu::SharedSynchronizable<AWDModule>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F2107FD8;
  void block[5] = v5;
  int v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c37_ZTSNSt3__110shared_ptrIK9AWDModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c37_ZTSNSt3__110shared_ptrIK9AWDModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__1clEv_block_invoke_2(uint64_t a1, unsigned __int8 a2)
{
  if (((*(unsigned char *)(a1 + 48) != 0) & a2) != 0) {
    int v3 = 0;
  }
  else {
    int v3 = -534716416;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v3;
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  xpc_object_t v5 = xpc_null_create();
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(unsigned int *)(v4 + 24);
  xpc_object_t object = v5;
  xpc_object_t v8 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, &object);
  xpc_release(object);
  xpc_release(v8);
}

void sub_1C5A84060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE56c44_ZTSNSt3__110shared_ptrIN3awd10AppContextEEE(void *a1, void *a2)
{
  size_t result = (void *)a2[6];
  if (result) {
    size_t result = _Block_copy(result);
  }
  uint64_t v6 = a2[7];
  uint64_t v5 = a2[8];
  a1[6] = result;
  a1[7] = v6;
  a1[8] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE56c44_ZTSNSt3__110shared_ptrIN3awd10AppContextEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    int v3 = *(const void **)(a1 + 48);
    if (!v3) {
      return;
    }
  }
  else
  {
    int v3 = *(const void **)(a1 + 48);
    if (!v3) {
      return;
    }
  }
  _Block_release(v3);
}

void ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb1_ENK3__2clEv_block_invoke_2(uint64_t a1, unsigned __int8 a2)
{
  if (((*(unsigned char *)(a1 + 48) != 0) & a2) != 0) {
    int v3 = 0;
  }
  else {
    int v3 = -534716416;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v3;
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  xpc_object_t v5 = xpc_null_create();
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(unsigned int *)(v4 + 24);
  xpc_object_t object = v5;
  xpc_object_t v8 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, &object);
  xpc_release(object);
  xpc_release(v8);
}

void sub_1C5A84208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 16);
  uint64_t v31 = 0;
  xpc_object_t v32 = &v31;
  uint64_t v33 = 0x2000000000;
  int v34 = -534716414;
  if (MEMORY[0x1C8795EB0](*(void *)(v2 + 24)) == MEMORY[0x1E4F14590])
  {
    xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E4F4D300]);
    xpc_object_t v35 = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t v35 = xpc_null_create();
    }
    unsigned __int8 v13 = xpc::dyn_cast_or_default((xpc *)&v35, (const object *)0xFFFFFFFFLL);
    xpc_release(v35);
    if (v13 <= 5u
      && (((1 << v13) & 0x36) != 0
       || !v13 && capabilities::abs::supportsWirelessTelemetryUsingMultiClientModel(v14)))
    {
      uint64_t v15 = *(void *)(v3 + 176);
      if (v15)
      {
        uint64_t v16 = v3 + 176;
        do
        {
          unsigned int v17 = *(unsigned __int8 *)(v15 + 32);
          BOOL v18 = v17 >= v13;
          if (v17 >= v13) {
            xpc_object_t v19 = (uint64_t *)v15;
          }
          else {
            xpc_object_t v19 = (uint64_t *)(v15 + 8);
          }
          if (v18) {
            uint64_t v16 = v15;
          }
          uint64_t v15 = *v19;
        }
        while (*v19);
        if (v16 != v3 + 176 && *(unsigned __int8 *)(v16 + 32) <= v13)
        {
          *((_DWORD *)v32 + 6) = -534716416;
          xpc_object_t v20 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E4F4C4A8]);
          xpc_object_t v35 = v20;
          if (v20) {
            xpc_retain(v20);
          }
          else {
            xpc_object_t v35 = xpc_null_create();
          }
          char v21 = xpc::dyn_cast_or_default((xpc *)&v35, 0);
          xpc_release(v35);
          xpc_object_t v22 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E4F4C1D8]);
          xpc_object_t v35 = v22;
          if (v22) {
            xpc_retain(v22);
          }
          else {
            xpc_object_t v35 = xpc_null_create();
          }
          char v23 = xpc::dyn_cast_or_default((xpc *)&v35, 0);
          xpc_release(v35);
          LOWORD(v35) = -21846;
          BYTE2(v35) = -86;
          LOBYTE(v35) = awd::AppContext::getProperties(*(awd::AppContext **)(v16 + 40));
          BYTE1(v35) = v23;
          BYTE2(v35) = v21;
          awd::AppContext::setProperties();
          xpc_object_t v24 = *(std::__shared_weak_count **)(v16 + 48);
          v30[0] = *(void *)(v16 + 40);
          v30[1] = (uint64_t)v24;
          if (v24) {
            atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v27[0] = MEMORY[0x1E4F143A8];
          v27[1] = 1174405120;
          v27[2] = ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb3_ENK3__4clEv_block_invoke;
          v27[3] = &unk_1F2108128;
          v27[4] = &v31;
          xpc_object_t v25 = *(void **)(v2 + 32);
          if (v25) {
            xpc_object_t v25 = _Block_copy(v25);
          }
          long long aBlock = v25;
          xpc_object_t v26 = _Block_copy(v27);
          xpc_object_t v29 = v26;
          AWDModule::updateProperties_sync(v3, v30, (uint64_t)&v29);
          if (v26) {
            _Block_release(v26);
          }
          if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
          if (aBlock) {
            _Block_release(aBlock);
          }
        }
      }
    }
  }
  uint64_t v4 = v32;
  if (*((_DWORD *)v32 + 6) == -534716414)
  {
    xpc_object_t v5 = xpc_null_create();
    uint64_t v6 = *(void *)(v2 + 32);
    uint64_t v7 = *((unsigned int *)v4 + 6);
    xpc_object_t v35 = v5;
    xpc_object_t v8 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, &v35);
    xpc_release(v35);
    xpc_release(v8);
    _Block_object_dispose(&v31, 8);
  }
  else
  {
    _Block_object_dispose(&v31, 8);
    if (!v2) {
      goto LABEL_10;
    }
  }
  uint64_t v9 = *(const void **)(v2 + 32);
  if (v9) {
    _Block_release(v9);
  }
  xpc_release(*(xpc_object_t *)(v2 + 24));
  *(void *)(v2 + 24) = 0;
  uint64_t v10 = *(std::__shared_weak_count **)(v2 + 8);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  operator delete((void *)v2);
LABEL_10:
  xpc_object_t v11 = (std::__shared_weak_count *)a1[2];
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(a1);
}

void sub_1C5A84618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (v21) {
    _Block_release(v21);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  _Block_object_dispose(&a18, 8);
  char v23 = *(const void **)(v19 + 32);
  if (v23) {
    _Block_release(v23);
  }
  xpc_release(*(xpc_object_t *)(v19 + 24));
  *(void *)(v19 + 24) = 0;
  xpc_object_t v24 = *(std::__shared_weak_count **)(v19 + 8);
  if (v24) {
    std::__shared_weak_count::__release_weak(v24);
  }
  operator delete((void *)v19);
  xpc_object_t v25 = (std::__shared_weak_count *)v18[2];
  if (v25)
  {
    if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  operator delete(v18);
  _Unwind_Resume(a1);
}

void ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb3_ENK3__4clEv_block_invoke(uint64_t a1, int a2)
{
  if (a2) {
    int v3 = 0;
  }
  else {
    int v3 = -534716416;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v3;
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  xpc_object_t v5 = xpc_null_create();
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(unsigned int *)(v4 + 24);
  xpc_object_t object = v5;
  xpc_object_t v8 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, &object);
  xpc_release(object);
  xpc_release(v8);
}

void sub_1C5A84860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<awd::AppContext>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2108168;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<awd::AppContext>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2108168;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<awd::AppContext>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (const void *)a1[10];
  if (v2) {
    _Block_release(v2);
  }
  int v3 = (const void *)a1[9];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (const void *)a1[8];
  if (v4) {
    _Block_release(v4);
  }
  xpc_object_t v5 = (const void *)a1[7];
  if (v5) {
    _Block_release(v5);
  }
  uint64_t v6 = (const void *)a1[6];
  if (v6) {
    _Block_release(v6);
  }
  uint64_t v7 = (const void *)a1[5];
  if (v7) {
    _Block_release(v7);
  }
  xpc_object_t v8 = a1[3];
  if (v8)
  {
    dispatch_release(v8);
  }
}

uint64_t __cxx_global_var_init_47()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

void antenna::Service::Internal::create(uint64_t *a1@<X0>, uint64_t a2@<X1>, NSObject **a3@<X2>, antenna::Service::Internal **a4@<X8>)
{
  *a4 = (antenna::Service::Internal *)0xAAAAAAAAAAAAAAAALL;
  a4[1] = (antenna::Service::Internal *)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v8 = (antenna::Service::Internal *)operator new(0x2E8uLL);
  uint64_t v9 = (std::__shared_weak_count *)a1[1];
  uint64_t v27 = *a1;
  xpc_object_t v28 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(void *)a2)
  {
    uint64_t v10 = _Block_copy(*(const void **)a2);
    xpc_object_t v11 = *(NSObject **)(a2 + 8);
    xpc_object_t v25 = v10;
    xpc_object_t v26 = v11;
    if (!v11) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v10 = 0;
  xpc_object_t v11 = *(NSObject **)(a2 + 8);
  xpc_object_t v25 = 0;
  xpc_object_t v26 = v11;
  if (v11) {
LABEL_5:
  }
    dispatch_retain(v11);
LABEL_6:
  int v12 = *a3;
  dispatch_object_t v24 = v12;
  if (v12) {
    dispatch_retain(v12);
  }
  antenna::Service::Internal::Internal(v8, &v27, (uint64_t)&v25, &v24);
  *a4 = v8;
  a4[1] = (antenna::Service::Internal *)0xAAAAAAAAAAAAAAAALL;
  unsigned __int8 v13 = (std::__shared_weak_count *)operator new(0x20uLL);
  v13->__shared_owners_ = 0;
  p_shared_owners = &v13->__shared_owners_;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2108478;
  v13->__shared_weak_owners_ = 0;
  v13[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
  a4[1] = (antenna::Service::Internal *)v13;
  uint64_t v15 = (std::__shared_weak_count *)*((void *)v8 + 10);
  if (v15)
  {
    if (v15->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *((void *)v8 + 9) = v8;
      *((void *)v8 + 10) = v13;
      std::__shared_weak_count::__release_weak(v15);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_11:
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
        uint64_t v16 = *a4;
        if (!*((void *)*a4 + 7)) {
          goto LABEL_25;
        }
        goto LABEL_17;
      }
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v8 + 9) = v8;
    *((void *)v8 + 10) = v13;
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_11;
    }
  }
  uint64_t v16 = *a4;
  if (!*((void *)*a4 + 7)) {
    goto LABEL_25;
  }
LABEL_17:
  unsigned int v17 = (std::__shared_weak_count *)*((void *)v16 + 10);
  if (!v17 || (uint64_t v18 = *((void *)v16 + 9), (v19 = std::__shared_weak_count::lock(v17)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v20 = v19;
  uint64_t v31 = v18;
  xpc_object_t v32 = v19;
  ctu::LoggerCommonBase::getLogDomain((antenna::Service::Internal *)((char *)v16 + 8));
  uint64_t v29 = v18;
  xpc_object_t v30 = v20;
  uint64_t v31 = 0;
  xpc_object_t v32 = 0;
  ctu::TrackedLogger::registerLoggerToServer();
  char v21 = v30;
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  xpc_object_t v22 = v32;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
LABEL_25:
  if (v12) {
    dispatch_release(v12);
  }
  if (v11) {
    dispatch_release(v11);
  }
  if (v10) {
    _Block_release(v10);
  }
  char v23 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  if (*a4) {
    antenna::Service::Internal::init(*a4);
  }
}

void sub_1C5A84CF4()
{
}

void sub_1C5A84D48()
{
}

void sub_1C5A84D58()
{
}

uint64_t dispatch::callback<void({block_pointer})(xpc::dict)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void antenna::Service::Internal::init(antenna::Service::Internal *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (uint64_t v3 = *((void *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v5 = v4;
  uint64_t v6 = operator new(8uLL);
  void *v6 = this;
  uint64_t v7 = *((void *)this + 11);
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v8 = operator new(0x18uLL);
  *xpc_object_t v8 = v6;
  v8[1] = v3;
  v8[2] = v5;
  dispatch_async_f(v7, v8, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::init(void)::$_0>(antenna::Service::Internal::init(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::init(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::init(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void *antenna::Service::Internal::Internal(void *a1, void *a2, uint64_t a3, dispatch_object_t *a4)
{
  *a1 = &unk_1F21081B8;
  uint64_t v7 = *a4;
  if (*a4) {
    dispatch_retain(*a4);
  }
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v47, "com.apple.telephony.abm", "antenna.svc");
  if (v7) {
    dispatch_retain(v7);
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v9 = dispatch_queue_create_with_target_V2("antenna.svc", initially_inactive, v7);
  dispatch_set_qos_class_floor(v9, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v9);
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  a1[12] = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  if (v9) {
    dispatch_release(v9);
  }
  if (v7) {
    dispatch_release(v7);
  }
  *a1 = &unk_1F21083D8;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v49);
  a1[1] = &unk_1F2102CB8;
  a1[7] = *a2;
  uint64_t v10 = a2[1];
  a1[8] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v48);
  *a1 = &unk_1F21084C8;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v47);
  if (v7) {
    dispatch_release(v7);
  }
  *a1 = &unk_1F21081B8;
  xpc_object_t v11 = *(void **)a3;
  if (*(void *)a3) {
    xpc_object_t v11 = _Block_copy(v11);
  }
  a1[13] = v11;
  int v12 = *(NSObject **)(a3 + 8);
  a1[14] = v12;
  if (v12) {
    dispatch_retain(v12);
  }
  a1[15] = 0;
  a1[16] = 0;
  a1[17] = *a2;
  uint64_t v13 = a2[1];
  a1[18] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *((unsigned char *)a1 + 164) = 0;
  *((unsigned char *)a1 + 168) = 0;
  a1[23] = 0;
  a1[25] = 0;
  *((unsigned char *)a1 + 216) = 0;
  xpc_object_t v14 = xpc_null_create();
  a1[29] = 0;
  a1[28] = v14;
  a1[32] = 0;
  a1[36] = 0;
  a1[30] = 0;
  *((unsigned char *)a1 + 248) = 0;
  a1[33] = 0;
  *((_DWORD *)a1 + 68) = 0;
  a1[35] = a1 + 36;
  a1[39] = 0;
  a1[40] = 0;
  a1[41] = 0;
  a1[37] = 0;
  a1[38] = a1 + 39;
  *((_DWORD *)a1 + 88) = 255;
  a1[45] = 0;
  a1[47] = 0;
  *((unsigned char *)a1 + 368) = 0;
  a1[48] = 0;
  uint64_t v15 = (const void *)*MEMORY[0x1E4F4D2C8];
  size_t v16 = strlen((const char *)*MEMORY[0x1E4F4D2C8]);
  if (v16 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v17 = v16;
  if (v16 >= 0x17)
  {
    uint64_t v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v19 = v16 | 7;
    }
    uint64_t v20 = v19 + 1;
    uint64_t v18 = operator new(v19 + 1);
    a1[50] = v17;
    a1[51] = v20 | 0x8000000000000000;
    a1[49] = v18;
    goto LABEL_30;
  }
  *((unsigned char *)a1 + 415) = v16;
  uint64_t v18 = a1 + 49;
  if (v16) {
LABEL_30:
  }
    memmove(v18, v15, v17);
  *((unsigned char *)v18 + v17) = 0;
  char v21 = a1 + 52;
  size_t v22 = strlen((const char *)v15);
  if (v22 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v23 = v22;
  if (v22 >= 0x17)
  {
    uint64_t v24 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17) {
      uint64_t v24 = v22 | 7;
    }
    uint64_t v25 = v24 + 1;
    char v21 = operator new(v24 + 1);
    a1[53] = v23;
    a1[54] = v25 | 0x8000000000000000;
    a1[52] = v21;
    goto LABEL_38;
  }
  *((unsigned char *)a1 + 439) = v22;
  if (v22) {
LABEL_38:
  }
    memmove(v21, v15, v23);
  *((unsigned char *)v21 + v23) = 0;
  a1[56] = 0;
  a1[57] = 0;
  a1[55] = a1 + 56;
  *((unsigned char *)a1 + 476) = 0;
  *((_DWORD *)a1 + 120) = 0;
  *((unsigned char *)a1 + 488) = 0;
  *((_OWORD *)a1 + 31) = 0u;
  *((_OWORD *)a1 + 32) = 0u;
  xpc_object_t v26 = a1 + 67;
  *((_DWORD *)a1 + 132) = 255;
  size_t v27 = strlen((const char *)v15);
  if (v27 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v28 = v27;
  if (v27 >= 0x17)
  {
    uint64_t v29 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17) {
      uint64_t v29 = v27 | 7;
    }
    uint64_t v30 = v29 + 1;
    xpc_object_t v26 = operator new(v29 + 1);
    a1[67] = v26;
    a1[69] = v30 | 0x8000000000000000;
    a1[68] = v28;
    goto LABEL_46;
  }
  *((unsigned char *)a1 + 559) = v27;
  if (v27) {
LABEL_46:
  }
    memmove(v26, v15, v28);
  *((unsigned char *)v26 + v28) = 0;
  *((_WORD *)a1 + 280) = 0;
  *(void *)((char *)a1 + 564) = 0xFFFFFFFF00000001;
  *((unsigned char *)a1 + 572) = 0;
  *((_OWORD *)a1 + 36) = 0u;
  size_t v31 = strlen((const char *)v15);
  if (v31 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v32 = v31;
  if (v31 >= 0x17)
  {
    uint64_t v34 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31 | 7) != 0x17) {
      uint64_t v34 = v31 | 7;
    }
    uint64_t v35 = v34 + 1;
    uint64_t v33 = operator new(v34 + 1);
    a1[74] = v33;
    a1[76] = v35 | 0x8000000000000000;
    a1[75] = v32;
    goto LABEL_54;
  }
  *((unsigned char *)a1 + 615) = v31;
  uint64_t v33 = a1 + 74;
  if (v31) {
LABEL_54:
  }
    memmove(v33, v15, v32);
  *((unsigned char *)v33 + v32) = 0;
  a1[79] = 0;
  a1[78] = 0;
  a1[77] = a1 + 78;
  size_t v36 = strlen((const char *)v15);
  if (v36 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v37 = v36;
  if (v36 >= 0x17)
  {
    uint64_t v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17) {
      uint64_t v39 = v36 | 7;
    }
    uint64_t v40 = v39 + 1;
    CFTypeRef v38 = operator new(v39 + 1);
    a1[80] = v38;
    a1[82] = v40 | 0x8000000000000000;
    a1[81] = v37;
    goto LABEL_62;
  }
  *((unsigned char *)a1 + 663) = v36;
  CFTypeRef v38 = a1 + 80;
  if (v36) {
LABEL_62:
  }
    size_t v36 = (size_t)memmove(v38, v15, v37);
  *((unsigned char *)v38 + v37) = 0;
  *((_OWORD *)a1 + 42) = 0u;
  *((unsigned char *)a1 + 688) = config::hw::watch((config::hw *)v36);
  CFTypeRef v41 = a1 + 87;
  size_t v42 = strlen((const char *)v15);
  if (v42 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v43 = v42;
  if (v42 >= 0x17)
  {
    uint64_t v44 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v42 | 7) != 0x17) {
      uint64_t v44 = v42 | 7;
    }
    uint64_t v45 = v44 + 1;
    CFTypeRef v41 = operator new(v44 + 1);
    a1[87] = v41;
    a1[89] = v45 | 0x8000000000000000;
    a1[88] = v43;
  }
  else
  {
    *((unsigned char *)a1 + 719) = v42;
    if (!v42) {
      goto LABEL_71;
    }
  }
  memmove(v41, v15, v43);
LABEL_71:
  *((unsigned char *)v41 + v43) = 0;
  *((_WORD *)a1 + 368) = 0;
  return a1;
}

void sub_1C5A85558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)(v13 - 96));
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v12);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  if (v11)
  {
    dispatch_release(v11);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

const char *antenna::Service::Internal::getName(antenna::Service::Internal *this)
{
  return "antenna.svc";
}

void *ctu::SharedLoggable<antenna::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F21083D8;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1F21083D8;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void antenna::Service::Internal::shutdown(antenna::Service::Internal *this)
{
  uint64_t v2 = (IOKitEventNotifier *)*((void *)this + 47);
  if (v2) {
    IOKitEventNotifier::shutdown(v2);
  }
  uint64_t v3 = (uint64_t **)*((void *)this + 64);
  if (v3)
  {
    xpc_object_t v5 = *v3;
    ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::shutdown(void)::{lambda(void)#1}>(v5, &v5);
  }
  uint64_t v4 = (PPMHandler **)*((void *)this + 72);
  if (v4) {
    PPMHandler::shutdown(*v4);
  }
  if (*((void *)this + 15)) {
    antenna::CommandDriver::registerHandler();
  }
}

void sub_1C5A858C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::setupTxPower_sync(antenna::Service::Internal *this)
{
  if (*((unsigned char *)this + 153)) {
    antenna::Service::Internal::configTxPower_sync((uint64_t)this, 1u);
  }
  if (!*((unsigned char *)this + 664)) {
    antenna::Service::Internal::configTxPower_sync((uint64_t)this, 2u);
  }
  if (*((unsigned char *)this + 152)) {
    antenna::Service::Internal::configTxPower_sync((uint64_t)this, 3u);
  }
  if (*((unsigned char *)this + 153) || *((unsigned char *)this + 152))
  {
    antenna::Service::Internal::enableTxPowerCapping_sync(this, 1);
    antenna::Service::Internal::enableTxPowerCappingNotification_sync(this, 1);
    antenna::Service::Internal::enableTxPowerCappingIndication_sync(this);
  }
  *((unsigned char *)this + 216) = 0;
  *((unsigned char *)this + 168) = 0;
  if (*((unsigned char *)this + 163)) {
    antenna::Service::Internal::sendVideoAccessory_sync(this, *((unsigned __int8 *)this + 164));
  }
  if (*((unsigned char *)this + 160)) {
    antenna::Service::Internal::sendAudioAccessory_sync(this);
  }
  if (*((unsigned char *)this + 156) || *((unsigned char *)this + 158))
  {
    if (*((unsigned char *)this + 192))
    {
      uint64_t v2 = (ctu::iokit::IOHIDController *)*((void *)this + 62);
      if (v2) {
        ctu::iokit::IOHIDController::queryHIDEventTrigger(v2);
      }
    }
    antenna::Service::Internal::sendAccessoryStatus_sync((NSObject **)this);
  }
  if (*((unsigned char *)this + 169)) {
    antenna::Service::Internal::sendPowerSource_sync(this);
  }
  if (*((unsigned char *)this + 572)) {
    antenna::Service::Internal::enablePPM_sync(this, 1);
  }
  if (*((unsigned char *)this + 170))
  {
    if (!*((void *)this + 79))
    {
      config::hw::deviceMaterial(this);
      if ((void **)((char *)this + 616) != &v3) {
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned int,unsigned int>,std::__tree_node<std::__value_type<unsigned int,unsigned int>,void *> *,long>>((uint64_t **)this + 77, v3, &v4);
      }
      std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(v4);
    }
    antenna::Service::Internal::sendDeviceMaterial_sync(this);
  }
}

void sub_1C5A85A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

void antenna::Service::Internal::configTxPower_sync(uint64_t a1, unsigned int a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v4) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v4);
      xpc_object_t v5 = v4;
    }
    else
    {
      xpc_object_t v5 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v4 = 0;
  }
  xpc_release(v4);
  uint64_t v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 67109120;
    unsigned int v22 = a2;
    _os_log_debug_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEBUG, "#D  Configuration tx power for %d", buf, 8u);
  }
  xpc_object_t v7 = xpc_int64_create(a2);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9D58], v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  xpc_object_t v9 = xpc_string_create((const char *)*MEMORY[0x1E4FB9D78]);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9C68], v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  if ((a2 & 0xFFFFFFFD) == 1)
  {
    xpc_object_t v11 = xpc_int64_create(*(unsigned int *)(a1 + 336));
    if (!v11) {
      xpc_object_t v11 = xpc_null_create();
    }
    xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9DD0], v11);
    xpc_object_t v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
  }
  else if (a2 == 2)
  {
    xpc_object_t v13 = xpc_int64_create(*(unsigned int *)(a1 + 464));
    if (!v13) {
      xpc_object_t v13 = xpc_null_create();
    }
    xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9DE0], v13);
    xpc_object_t v14 = xpc_null_create();
    xpc_release(v13);
    xpc_release(v14);
    xpc_object_t v15 = xpc_int64_create(*(unsigned int *)(a1 + 468));
    if (!v15) {
      xpc_object_t v15 = xpc_null_create();
    }
    xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9DD8], v15);
    xpc_object_t v16 = xpc_null_create();
    xpc_release(v15);
    xpc_release(v16);
    xpc_object_t v17 = xpc_int64_create(*(unsigned int *)(a1 + 472));
    if (!v17) {
      xpc_object_t v17 = xpc_null_create();
    }
    xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9DF0], v17);
    xpc_object_t v18 = xpc_null_create();
    xpc_release(v17);
    xpc_release(v18);
  }
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  v19[0] = 0;
  v19[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync((void *)a1, &object, (uint64_t)v19);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v5);
}

void sub_1C5A85D7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void antenna::Service::Internal::enableTxPowerCapping_sync(antenna::Service::Internal *this, BOOL a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v4) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v4);
      xpc_object_t v5 = v4;
    }
    else
    {
      xpc_object_t v5 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v4 = 0;
  }
  xpc_release(v4);
  xpc_object_t v6 = xpc_string_create((const char *)*MEMORY[0x1E4FB9D70]);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9C68], v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  xpc_object_t v8 = xpc_BOOL_create(a2);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9D48], v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  if (*((unsigned char *)this + 152))
  {
    xpc_object_t v10 = xpc_int64_create(1);
    if (!v10) {
      xpc_object_t v10 = xpc_null_create();
    }
    xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9D58], v10);
    xpc_object_t v11 = xpc_null_create();
    xpc_release(v10);
    xpc_release(v11);
  }
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  v12[0] = 0;
  v12[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync(this, &object, (uint64_t)v12);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v5);
}

void sub_1C5A86068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
  dispatch::callback<void({block_pointer})(xpc::object)>::~callback((uint64_t)&a10);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v12);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::enableTxPowerCappingNotification_sync(antenna::Service::Internal *this, BOOL a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v4) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v4);
      xpc_object_t v5 = v4;
    }
    else
    {
      xpc_object_t v5 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v4 = 0;
  }
  xpc_release(v4);
  xpc_object_t v6 = xpc_string_create((const char *)*MEMORY[0x1E4FB9DB8]);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9C68], v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  xpc_object_t v8 = xpc_BOOL_create(a2);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9D80], v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  if (config::hw::watch(v10))
  {
    xpc_object_t v11 = xpc_string_create((const char *)*MEMORY[0x1E4FB9DA8]);
    if (!v11) {
      xpc_object_t v11 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v11 = xpc_string_create((const char *)*MEMORY[0x1E4FB9DA0]);
    if (!v11) {
      xpc_object_t v11 = xpc_null_create();
    }
  }
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9D98], v11);
  xpc_object_t v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  if (*((unsigned char *)this + 152))
  {
    xpc_object_t v13 = xpc_int64_create(1);
    if (!v13) {
      xpc_object_t v13 = xpc_null_create();
    }
    xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9D58], v13);
    xpc_object_t v14 = xpc_null_create();
    xpc_release(v13);
    xpc_release(v14);
  }
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  v15[0] = 0;
  v15[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync(this, &object, (uint64_t)v15);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v5);
}

void sub_1C5A863AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
  dispatch::callback<void({block_pointer})(xpc::object)>::~callback((uint64_t)&a10);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v12);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::enableTxPowerCappingIndication_sync(antenna::Service::Internal *this)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2 || (xpc_object_t v2 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v2) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v2);
      xpc_object_t v3 = v2;
    }
    else
    {
      xpc_object_t v3 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v2 = 0;
  }
  xpc_release(v2);
  xpc_object_t v4 = xpc_string_create((const char *)*MEMORY[0x1E4FB9DE8]);
  if (!v4) {
    xpc_object_t v4 = xpc_null_create();
  }
  xpc_dictionary_set_value(v3, (const char *)*MEMORY[0x1E4FB9C68], v4);
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  v6[0] = 0;
  v6[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync(this, &object, (uint64_t)v6);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v3);
}

void sub_1C5A8655C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
  dispatch::callback<void({block_pointer})(xpc::object)>::~callback((uint64_t)&a10);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v12);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::sendVideoAccessory_sync(antenna::Service::Internal *this, int a2)
{
  if (*((unsigned __int8 *)this + 164) != a2)
  {
    xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
    if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C8795EB0](v4) == MEMORY[0x1E4F14590])
      {
        xpc_retain(v4);
        xpc_object_t v5 = v4;
      }
      else
      {
        xpc_object_t v5 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
    }
    xpc_release(v4);
    xpc_object_t v6 = xpc_string_create((const char *)*MEMORY[0x1E4FB9CF0]);
    if (!v6) {
      xpc_object_t v6 = xpc_null_create();
    }
    xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9C68], v6);
    xpc_object_t v7 = xpc_null_create();
    xpc_release(v6);
    xpc_release(v7);
    if (capabilities::radio::maverick(v8))
    {
      xpc_object_t v9 = *((void *)this + 5);
      BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      if (a2)
      {
        if (v10)
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEFAULT, "#I Video link started", buf, 2u);
        }
        xpc_object_t v11 = xpc_int64_create(1);
        if (!v11) {
          xpc_object_t v11 = xpc_null_create();
        }
        xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9D28], v11);
        xpc_object_t v12 = xpc_null_create();
        xpc_release(v11);
        xpc_release(v12);
        xpc_object_t v13 = xpc_int64_create(0);
        if (!v13) {
          xpc_object_t v13 = xpc_null_create();
        }
      }
      else
      {
        if (v10)
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEFAULT, "#I Video link stopped or terminated", buf, 2u);
        }
        xpc_object_t v16 = xpc_int64_create(0);
        if (!v16) {
          xpc_object_t v16 = xpc_null_create();
        }
        xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9D28], v16);
        xpc_object_t v17 = xpc_null_create();
        xpc_release(v16);
        xpc_release(v17);
        xpc_object_t v13 = xpc_int64_create(1);
        if (!v13) {
          xpc_object_t v13 = xpc_null_create();
        }
      }
      xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9D68], v13);
      xpc_object_t v18 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v18);
    }
    else
    {
      xpc_object_t v14 = xpc_BOOL_create(a2);
      if (!v14) {
        xpc_object_t v14 = xpc_null_create();
      }
      xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9D50], v14);
      xpc_object_t v15 = xpc_null_create();
      xpc_release(v14);
      xpc_release(v15);
    }
    *((unsigned char *)this + 164) = a2;
    xpc_object_t object = v5;
    if (v5) {
      xpc_retain(v5);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    v19[0] = 0;
    v19[1] = 0;
    antenna::Service::Internal::performCommandDriver_sync(this, &object, (uint64_t)v19);
    xpc_release(object);
    xpc_object_t object = 0;
    xpc_release(v5);
  }
}

void sub_1C5A86968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
  dispatch::callback<void({block_pointer})(xpc::object)>::~callback((uint64_t)&a10);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v12);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::sendAudioAccessory_sync(antenna::Service::Internal *this)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2 || (xpc_object_t v2 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v2) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v2);
      xpc_object_t v3 = v2;
    }
    else
    {
      xpc_object_t v3 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v2 = 0;
  }
  xpc_release(v2);
  xpc_object_t v4 = xpc_string_create((const char *)*MEMORY[0x1E4FB9D90]);
  if (!v4) {
    xpc_object_t v4 = xpc_null_create();
  }
  xpc_dictionary_set_value(v3, (const char *)*MEMORY[0x1E4FB9C68], v4);
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  xpc_object_t v6 = xpc_BOOL_create(*((unsigned char *)this + 334));
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_dictionary_set_value(v3, (const char *)*MEMORY[0x1E4FB9C90], v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  v8[0] = 0;
  v8[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync(this, &object, (uint64_t)v8);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v3);
}

void sub_1C5A86B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
  dispatch::callback<void({block_pointer})(xpc::object)>::~callback((uint64_t)&a10);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v12);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::sendAccessoryStatus_sync(NSObject **this)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  unint64_t AccessoryState_sync = antenna::Service::Internal::getAccessoryState_sync((antenna::Service::Internal *)this);
  if (*((unsigned char *)this + 168))
  {
    xpc_object_t v3 = this[5];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Ignore sending accessory status to BB in low power mode", buf, 2u);
    }
  }
  else
  {
    unint64_t v4 = AccessoryState_sync;
    int64_t v5 = HIDWORD(AccessoryState_sync);
    uint64_t v6 = MEMORY[0x1E4F14590];
    xpc_object_t v7 = (const char **)MEMORY[0x1E4FB9C68];
    xpc_object_t v8 = (const char **)MEMORY[0x1E4FB9D10];
    if (*((unsigned char *)this + 156) || *((unsigned char *)this + 192))
    {
      xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
      if (v9 || (xpc_object_t v9 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C8795EB0](v9) == v6)
        {
          xpc_retain(v9);
          xpc_object_t v10 = v9;
        }
        else
        {
          xpc_object_t v10 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v10 = xpc_null_create();
        xpc_object_t v9 = 0;
      }
      xpc_release(v9);
      xpc_object_t v11 = xpc_string_create((const char *)*MEMORY[0x1E4FB9DB0]);
      if (!v11) {
        xpc_object_t v11 = xpc_null_create();
      }
      xpc_dictionary_set_value(v10, *v7, v11);
      xpc_object_t v12 = xpc_null_create();
      xpc_release(v11);
      xpc_release(v12);
      xpc_object_t v13 = xpc_int64_create(v4 & 1);
      if (!v13) {
        xpc_object_t v13 = xpc_null_create();
      }
      xpc_dictionary_set_value(v10, *v8, v13);
      xpc_object_t v14 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v14);
      xpc_object_t v15 = this[5];
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        ctu::iokit::asString();
        if (v39 >= 0) {
          xpc_object_t v16 = buf;
        }
        else {
          xpc_object_t v16 = *(unsigned char **)buf;
        }
        *(_DWORD *)uint64_t v40 = 136315138;
        CFTypeRef v41 = v16;
        _os_log_impl(&dword_1C59C6000, v15, OS_LOG_TYPE_DEFAULT, "#I Sending accessory attachment for RF: %s", v40, 0xCu);
        if (v39 < 0) {
          operator delete(*(void **)buf);
        }
        xpc_object_t v15 = this[5];
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        if (*((unsigned char *)this + 561)) {
          xpc_object_t v17 = "CLOSED";
        }
        else {
          xpc_object_t v17 = "OPENED";
        }
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = v17;
        _os_log_impl(&dword_1C59C6000, v15, OS_LOG_TYPE_DEFAULT, "#I Smart Keyboard Cover: %s", buf, 0xCu);
      }
      if ((v4 & 1) != 0 && (*((unsigned char *)this + 157) || *((unsigned char *)this + 192)))
      {
        xpc_object_t v18 = xpc_int64_create(v5);
        if (!v18) {
          xpc_object_t v18 = xpc_null_create();
        }
        xpc_dictionary_set_value(v10, (const char *)*MEMORY[0x1E4FB9CE0], v18);
        xpc_object_t v19 = xpc_null_create();
        xpc_release(v18);
        xpc_release(v19);
        uint64_t v20 = this[5];
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          ctu::iokit::asString();
          char v21 = v39 >= 0 ? buf : *(unsigned char **)buf;
          *(_DWORD *)uint64_t v40 = 136315138;
          CFTypeRef v41 = v21;
          _os_log_impl(&dword_1C59C6000, v20, OS_LOG_TYPE_DEFAULT, "#I Sending accessory type for RF: %s", v40, 0xCu);
          if (v39 < 0) {
            operator delete(*(void **)buf);
          }
        }
      }
      xpc_object_t object = v10;
      if (v10) {
        xpc_retain(v10);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      v36[0] = 0;
      v36[1] = 0;
      antenna::Service::Internal::performCommandDriver_sync(this, &object, (uint64_t)v36);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v10);
    }
    if (*((unsigned char *)this + 158) || *((unsigned char *)this + 192))
    {
      xpc_object_t v22 = xpc_dictionary_create(0, 0, 0);
      if (v22 || (xpc_object_t v22 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C8795EB0](v22) == v6)
        {
          xpc_retain(v22);
          xpc_object_t v23 = v22;
        }
        else
        {
          xpc_object_t v23 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v23 = xpc_null_create();
        xpc_object_t v22 = 0;
      }
      xpc_release(v22);
      xpc_object_t v24 = xpc_string_create((const char *)*MEMORY[0x1E4FB9DC0]);
      if (!v24) {
        xpc_object_t v24 = xpc_null_create();
      }
      xpc_dictionary_set_value(v23, *v7, v24);
      xpc_object_t v25 = xpc_null_create();
      xpc_release(v24);
      xpc_release(v25);
      xpc_object_t v26 = xpc_int64_create(v4 & 1);
      if (!v26) {
        xpc_object_t v26 = xpc_null_create();
      }
      xpc_dictionary_set_value(v23, *v8, v26);
      xpc_object_t v27 = xpc_null_create();
      xpc_release(v26);
      xpc_release(v27);
      size_t v28 = this[5];
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
      {
        ctu::iokit::asString();
        size_t v32 = v39 >= 0 ? buf : *(unsigned char **)buf;
        *(_DWORD *)uint64_t v40 = 136315138;
        CFTypeRef v41 = v32;
        _os_log_debug_impl(&dword_1C59C6000, v28, OS_LOG_TYPE_DEBUG, "#D Sending accessory attachment for ARTD: %s", v40, 0xCu);
        if (v39 < 0) {
          operator delete(*(void **)buf);
        }
      }
      if ((v4 & 1) != 0 && (*((unsigned char *)this + 157) || *((unsigned char *)this + 192)))
      {
        xpc_object_t v29 = xpc_int64_create(v5);
        if (!v29) {
          xpc_object_t v29 = xpc_null_create();
        }
        xpc_dictionary_set_value(v23, (const char *)*MEMORY[0x1E4FB9CE0], v29);
        xpc_object_t v30 = xpc_null_create();
        xpc_release(v29);
        xpc_release(v30);
        size_t v31 = this[5];
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
        {
          ctu::iokit::asString();
          uint64_t v33 = v39 >= 0 ? buf : *(unsigned char **)buf;
          *(_DWORD *)uint64_t v40 = 136315138;
          CFTypeRef v41 = v33;
          _os_log_debug_impl(&dword_1C59C6000, v31, OS_LOG_TYPE_DEBUG, "#D Sending accessory type for ARTD: %s", v40, 0xCu);
          if (v39 < 0) {
            operator delete(*(void **)buf);
          }
        }
      }
      xpc_object_t v35 = v23;
      if (v23) {
        xpc_retain(v23);
      }
      else {
        xpc_object_t v35 = xpc_null_create();
      }
      v34[0] = 0;
      v34[1] = 0;
      antenna::Service::Internal::performCommandDriver_sync(this, &v35, (uint64_t)v34);
      xpc_release(v35);
      xpc_object_t v35 = 0;
      xpc_release(v23);
    }
    antenna::Service::Internal::reportAccessory_sync((uint64_t)this, v4);
  }
}

void sub_1C5A87228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, char a12, uint64_t a13, xpc_object_t a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void antenna::Service::Internal::sendPowerSource_sync(antenna::Service::Internal *this)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2 || (xpc_object_t v2 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v2) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v2);
      xpc_object_t v3 = v2;
    }
    else
    {
      xpc_object_t v3 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v2 = 0;
  }
  xpc_release(v2);
  if (*((_DWORD *)this + 142) == -1
    || (unint64_t v4 = (char *)this + 568, (TelephonyUtilIsInternalBuild() & 1) == 0) && (TelephonyUtilIsCarrierBuild() & 1) == 0)
  {
    unint64_t v4 = (char *)this + 564;
  }
  int64_t v5 = *(unsigned int *)v4;
  xpc_object_t v6 = xpc_string_create((const char *)*MEMORY[0x1E4FB9D40]);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_dictionary_set_value(v3, (const char *)*MEMORY[0x1E4FB9C68], v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  xpc_object_t v8 = xpc_int64_create(v5);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(v3, (const char *)*MEMORY[0x1E4FB9CE8], v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  xpc_object_t v10 = *((void *)this + 5);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    ctu::iokit::asString();
    xpc_object_t v11 = v15 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)std::string buf = 136315138;
    xpc_object_t v17 = v11;
    _os_log_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_DEFAULT, "#I Sending power source state: %s\n", buf, 0xCu);
    if (v15 < 0)
    {
      operator delete(__p);
      xpc_object_t object = v3;
      if (v3) {
        goto LABEL_21;
      }
LABEL_23:
      xpc_object_t object = xpc_null_create();
      goto LABEL_24;
    }
  }
  xpc_object_t object = v3;
  if (!v3) {
    goto LABEL_23;
  }
LABEL_21:
  xpc_retain(v3);
LABEL_24:
  v12[0] = 0;
  v12[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync(this, &object, (uint64_t)v12);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v3);
}

void sub_1C5A875D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void antenna::Service::Internal::enablePPM_sync(antenna::Service::Internal *this, BOOL a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 572) && *((void *)this + 72))
  {
    xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
    if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C8795EB0](v4) == MEMORY[0x1E4F14590])
      {
        xpc_retain(v4);
        xpc_object_t v5 = v4;
      }
      else
      {
        xpc_object_t v5 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
    }
    xpc_release(v4);
    xpc_object_t v7 = xpc_string_create((const char *)*MEMORY[0x1E4FB9CC0]);
    if (!v7) {
      xpc_object_t v7 = xpc_null_create();
    }
    xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9C68], v7);
    xpc_object_t v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    xpc_object_t v9 = xpc_BOOL_create(a2);
    if (!v9) {
      xpc_object_t v9 = xpc_null_create();
    }
    xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9C88], v9);
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    if (a2)
    {
      xpc_object_t v11 = xpc_int64_create(5);
      if (!v11) {
        xpc_object_t v11 = xpc_null_create();
      }
      xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9CA0], v11);
      xpc_object_t v12 = xpc_null_create();
      xpc_release(v11);
      xpc_release(v12);
    }
    xpc_object_t v13 = (std::__shared_weak_count *)*((void *)this + 10);
    if (!v13 || (v14 = *((void *)this + 9), (char v15 = std::__shared_weak_count::lock(v13)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    xpc_object_t v16 = v15;
    atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      xpc_object_t object = v5;
      if (v5)
      {
LABEL_23:
        xpc_retain(v5);
LABEL_26:
        v21[0] = MEMORY[0x1E4F143A8];
        v21[1] = 1174405120;
        v21[2] = ___ZN7antenna7Service8Internal14enablePPM_syncEb_block_invoke;
        v21[3] = &__block_descriptor_tmp_34_0;
        v21[4] = this;
        v21[5] = v14;
        xpc_object_t v22 = v16;
        atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        BOOL v24 = a2;
        xpc_object_t v23 = v5;
        if (v5) {
          xpc_retain(v5);
        }
        else {
          xpc_object_t v23 = xpc_null_create();
        }
        xpc_object_t v17 = _Block_copy(v21);
        uint64_t v18 = *((void *)this + 11);
        if (v18) {
          dispatch_retain(*((dispatch_object_t *)this + 11));
        }
        v25[0] = v17;
        v25[1] = v18;
        antenna::Service::Internal::performCommandDriver_sync(this, &object, (uint64_t)v25);
        if (v18) {
          dispatch_release(v18);
        }
        if (v17) {
          _Block_release(v17);
        }
        xpc_release(object);
        xpc_object_t object = 0;
        PPMHandler::start(**((PPMHandler ***)this + 72));
        xpc_object_t v19 = *((void *)this + 5);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v20 = "Disabled";
          if (a2) {
            uint64_t v20 = "Enabled";
          }
          *(_DWORD *)std::string buf = 136315138;
          size_t v28 = v20;
          _os_log_impl(&dword_1C59C6000, v19, OS_LOG_TYPE_DEFAULT, "#I %s PPM", buf, 0xCu);
        }
        xpc_release(v23);
        xpc_object_t v23 = 0;
        if (v22) {
          std::__shared_weak_count::__release_weak(v22);
        }
        std::__shared_weak_count::__release_weak(v16);
        xpc_release(v5);
        return;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v16);
      xpc_object_t object = v5;
      if (v5) {
        goto LABEL_23;
      }
    }
    xpc_object_t object = xpc_null_create();
    goto LABEL_26;
  }
  xpc_object_t v6 = *((void *)this + 5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#E PPM is not supported or PPM Manager is not created properly", buf, 2u);
  }
}

void sub_1C5A87A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, xpc_object_t object, uint64_t a17, char a18, uint64_t a19, xpc_object_t a20)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void antenna::Service::Internal::sendDeviceMaterial_sync(antenna::Service::Internal *this)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v3 = v2;
  if (v2)
  {
    xpc_object_t xdict = v2;
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t xdict = v3;
    if (!v3)
    {
      xpc_object_t v4 = xpc_null_create();
      xpc_object_t v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8795EB0](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  xpc_object_t v4 = xpc_null_create();
LABEL_8:
  xpc_object_t xdict = v4;
LABEL_9:
  xpc_release(v3);
  xpc_object_t v5 = xpc_string_create((const char *)*MEMORY[0x1E4FB9D00]);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4FB9C68], v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  xpc_object_t v7 = (uint64_t **)((char *)this + 624);
  xpc_object_t v8 = (uint64_t *)*((void *)this + 78);
  xpc_object_t v9 = (uint64_t **)((char *)this + 624);
  xpc_object_t v10 = (uint64_t **)((char *)this + 624);
  if (v8)
  {
    while (1)
    {
      while (1)
      {
        xpc_object_t v10 = (uint64_t **)v8;
        unsigned int v11 = *((_DWORD *)v8 + 7);
        if (v11 < 2) {
          break;
        }
        xpc_object_t v8 = *v10;
        xpc_object_t v9 = v10;
        if (!*v10) {
          goto LABEL_18;
        }
      }
      if (v11) {
        break;
      }
      xpc_object_t v8 = v10[1];
      if (!v8)
      {
        xpc_object_t v9 = v10 + 1;
        goto LABEL_18;
      }
    }
    xpc_object_t v12 = (uint64_t *)v10;
  }
  else
  {
LABEL_18:
    xpc_object_t v12 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v12 + 28) = 1;
    uint64_t *v12 = 0;
    v12[1] = 0;
    void v12[2] = (uint64_t)v10;
    *xpc_object_t v9 = v12;
    uint64_t v13 = **((void **)this + 77);
    uint64_t v14 = v12;
    if (v13)
    {
      *((void *)this + 77) = v13;
      uint64_t v14 = *v9;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 78), v14);
    ++*((void *)this + 79);
  }
  xpc_object_t v15 = xpc_int64_create(*((unsigned int *)v12 + 8));
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4FB9CF8], v15);
  xpc_object_t v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  xpc_object_t v17 = *v7;
  uint64_t v18 = (uint64_t **)((char *)this + 624);
  xpc_object_t v19 = (uint64_t **)((char *)this + 624);
  if (*v7)
  {
    while (1)
    {
      while (1)
      {
        xpc_object_t v19 = (uint64_t **)v17;
        unsigned int v20 = *((_DWORD *)v17 + 7);
        if (v20 < 3) {
          break;
        }
        xpc_object_t v17 = *v19;
        uint64_t v18 = v19;
        if (!*v19) {
          goto LABEL_31;
        }
      }
      if (v20 == 2) {
        break;
      }
      xpc_object_t v17 = v19[1];
      if (!v17)
      {
        uint64_t v18 = v19 + 1;
        goto LABEL_31;
      }
    }
    char v21 = (uint64_t *)v19;
  }
  else
  {
LABEL_31:
    char v21 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v21 + 28) = 2;
    *char v21 = 0;
    v21[1] = 0;
    v21[2] = (uint64_t)v19;
    *uint64_t v18 = v21;
    uint64_t v22 = **((void **)this + 77);
    xpc_object_t v23 = v21;
    if (v22)
    {
      *((void *)this + 77) = v22;
      xpc_object_t v23 = *v18;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 78), v23);
    ++*((void *)this + 79);
  }
  xpc_object_t v24 = xpc_int64_create(*((unsigned int *)v21 + 8));
  if (!v24) {
    xpc_object_t v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4FB9CC8], v24);
  xpc_object_t v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  xpc_object_t v26 = *v7;
  xpc_object_t v27 = (uint64_t **)((char *)this + 624);
  size_t v28 = (uint64_t **)((char *)this + 624);
  if (*v7)
  {
    while (1)
    {
      while (1)
      {
        size_t v28 = (uint64_t **)v26;
        unsigned int v29 = *((_DWORD *)v26 + 7);
        if (v29 < 4) {
          break;
        }
        xpc_object_t v26 = *v28;
        xpc_object_t v27 = v28;
        if (!*v28) {
          goto LABEL_44;
        }
      }
      if (v29 == 3) {
        break;
      }
      xpc_object_t v26 = v28[1];
      if (!v26)
      {
        xpc_object_t v27 = v28 + 1;
        goto LABEL_44;
      }
    }
    xpc_object_t v30 = (uint64_t *)v28;
  }
  else
  {
LABEL_44:
    xpc_object_t v30 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v30 + 28) = 3;
    uint64_t *v30 = 0;
    v30[1] = 0;
    uint64_t v30[2] = (uint64_t)v28;
    *xpc_object_t v27 = v30;
    uint64_t v31 = **((void **)this + 77);
    size_t v32 = v30;
    if (v31)
    {
      *((void *)this + 77) = v31;
      size_t v32 = *v27;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 78), v32);
    ++*((void *)this + 79);
  }
  xpc_object_t v33 = xpc_int64_create(*((unsigned int *)v30 + 8));
  if (!v33) {
    xpc_object_t v33 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4FB9C80], v33);
  xpc_object_t v34 = xpc_null_create();
  xpc_release(v33);
  xpc_release(v34);
  xpc_object_t v35 = *v7;
  size_t v36 = (uint64_t **)((char *)this + 624);
  if (*v7)
  {
    while (1)
    {
      while (1)
      {
        size_t v36 = (uint64_t **)v35;
        unsigned int v37 = *((_DWORD *)v35 + 7);
        if (v37 < 5) {
          break;
        }
        xpc_object_t v35 = *v36;
        xpc_object_t v7 = v36;
        if (!*v36) {
          goto LABEL_57;
        }
      }
      if (v37 == 4) {
        break;
      }
      xpc_object_t v35 = v36[1];
      if (!v35)
      {
        xpc_object_t v7 = v36 + 1;
        goto LABEL_57;
      }
    }
    CFTypeRef v38 = (uint64_t *)v36;
  }
  else
  {
LABEL_57:
    CFTypeRef v38 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v38 + 28) = 4;
    uint64_t *v38 = 0;
    v38[1] = 0;
    v38[2] = (uint64_t)v36;
    NSObject *v7 = v38;
    uint64_t v39 = **((void **)this + 77);
    uint64_t v40 = v38;
    if (v39)
    {
      *((void *)this + 77) = v39;
      uint64_t v40 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 78), v40);
    ++*((void *)this + 79);
  }
  xpc_object_t v41 = xpc_int64_create(*((unsigned int *)v38 + 8));
  if (!v41) {
    xpc_object_t v41 = xpc_null_create();
  }
  xpc_object_t v42 = xdict;
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4FB9C78], v41);
  xpc_object_t v43 = xpc_null_create();
  xpc_release(v41);
  xpc_release(v43);
  uint64_t v44 = *((void *)this + 5);
  if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
  {
    xpc::object::to_string((uint64_t *)__p, (xpc::object *)&xdict);
    if (v49 >= 0) {
      uint64_t v45 = __p;
    }
    else {
      uint64_t v45 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    id v52 = v45;
    _os_log_impl(&dword_1C59C6000, v44, OS_LOG_TYPE_DEFAULT, "#I Sending device material: %s\n", buf, 0xCu);
    if (v49 < 0) {
      operator delete(__p[0]);
    }
    xpc_object_t v42 = xdict;
  }
  xpc_object_t v47 = v42;
  if (v42)
  {
    xpc_retain(v42);
  }
  else
  {
    xpc_object_t v42 = xpc_null_create();
    xpc_object_t v47 = v42;
  }
  v46[0] = 0;
  v46[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync(this, &v47, (uint64_t)v46);
  xpc_release(v42);
  xpc_object_t v47 = 0;
  xpc_release(xdict);
}

void sub_1C5A880E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t antenna::Service::Internal::configuration_sync(antenna::Service::Internal *this)
{
  *((_DWORD *)this + 49) = capabilities::txpower::supportedControlInput(this);
  xpc_object_t v2 = (capabilities::txpower *)capabilities::txpower::operator&();
  if (v2)
  {
    xpc_object_t v2 = (capabilities::txpower *)capabilities::txpower::operator&();
    BOOL v3 = v2 != 0;
  }
  else
  {
    BOOL v3 = 0;
  }
  *((unsigned char *)this + 152) = v3;
  xpc_object_t v4 = (capabilities::txpower *)capabilities::txpower::supportsMotion(v2);
  *((unsigned char *)this + 153) = (_BYTE)v4;
  xpc_object_t v5 = (capabilities::txpower *)capabilities::txpower::supportsAntennaFreeSpaceConfig(v4);
  *((unsigned char *)this + 154) = (_BYTE)v5;
  xpc_object_t v6 = (capabilities::radio *)capabilities::txpower::supportsMotionAlways(v5);
  *((unsigned char *)this + 155) = (_BYTE)v6;
  xpc_object_t v7 = (capabilities::radio *)capabilities::radio::supportsAccessoryDetection(v6);
  *((unsigned char *)this + 156) = (_BYTE)v7;
  xpc_object_t v8 = (capabilities::radio *)capabilities::radio::supportsAccessoryTypeDetectionForRF(v7);
  *((unsigned char *)this + 157) = (_BYTE)v8;
  xpc_object_t v9 = (capabilities::radio *)capabilities::radio::supportsAccessoryDetectionForARTD(v8);
  *((unsigned char *)this + 158) = (_BYTE)v9;
  xpc_object_t v10 = (capabilities::txpower *)capabilities::radio::supportsAccessoryTypeDetectionForARTD(v9);
  *((unsigned char *)this + 159) = (_BYTE)v10;
  unsigned int v11 = (capabilities::txpower *)capabilities::txpower::supportsAudioJackReport(v10);
  *((unsigned char *)this + 160) = (_BYTE)v11;
  xpc_object_t v12 = (capabilities::radio *)capabilities::txpower::supportsAudioSpeaker(v11);
  *((unsigned char *)this + 161) = (_BYTE)v12;
  uint64_t v13 = (capabilities::txpower *)capabilities::radio::supportsMESA(v12);
  *((unsigned char *)this + 162) = (_BYTE)v13;
  uint64_t v14 = (capabilities::radio *)capabilities::txpower::supportsVideoAntennaSwitching(v13);
  *((unsigned char *)this + 163) = (_BYTE)v14;
  xpc_object_t v15 = (capabilities::radio *)capabilities::radio::supportsUMTS(v14);
  *((unsigned char *)this + 166) = (_BYTE)v15;
  xpc_object_t v16 = (capabilities::txpower *)capabilities::radio::C2KDevice(v15);
  *((unsigned char *)this + 167) = (_BYTE)v16;
  xpc_object_t v17 = (uint64_t *)capabilities::txpower::timeoutConfig(v16);
  *((void *)this + 42) = v17;
  *((void *)this + 43) = v18;
  *((void *)this + 58) = 0x7F0000007FLL;
  *((_DWORD *)this + 118) = 0x7FFF;
  xpc_object_t v19 = (uint64_t **)((char *)this + 312);
  unsigned int v20 = (char *)*((void *)this + 39);
  char v21 = (uint64_t **)((char *)this + 312);
  uint64_t v22 = (uint64_t **)((char *)this + 312);
  if (v20)
  {
    xpc_object_t v23 = (char *)*((void *)this + 39);
    while (1)
    {
      while (1)
      {
        uint64_t v22 = (uint64_t **)v23;
        int v24 = *((_DWORD *)v23 + 7);
        if (v24 < 1) {
          break;
        }
        xpc_object_t v23 = (char *)*v22;
        char v21 = v22;
        if (!*v22) {
          goto LABEL_11;
        }
      }
      if ((v24 & 0x80000000) == 0) {
        break;
      }
      xpc_object_t v23 = (char *)v22[1];
      if (!v23)
      {
        char v21 = v22 + 1;
        goto LABEL_11;
      }
    }
  }
  else
  {
LABEL_11:
    xpc_object_t v25 = (char *)v22;
    uint64_t v22 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v22 + 7) = 0;
    *((unsigned char *)v22 + 32) = 0;
    *uint64_t v22 = 0;
    v22[1] = 0;
    void v22[2] = (uint64_t *)v25;
    *char v21 = (uint64_t *)v22;
    uint64_t v26 = **((void **)this + 38);
    xpc_object_t v27 = (uint64_t *)v22;
    if (v26)
    {
      *((void *)this + 38) = v26;
      xpc_object_t v27 = *v21;
    }
    xpc_object_t v17 = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 39), v27);
    unsigned int v20 = (char *)*((void *)this + 39);
    ++*((void *)this + 40);
  }
  *((unsigned char *)v22 + 32) = 0;
  size_t v28 = (uint64_t **)((char *)this + 312);
  unsigned int v29 = (uint64_t **)((char *)this + 312);
  if (v20)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v29 = (uint64_t **)v20;
        int v30 = *((_DWORD *)v20 + 7);
        if (v30 < 2) {
          break;
        }
        unsigned int v20 = (char *)*v29;
        size_t v28 = v29;
        if (!*v29) {
          goto LABEL_21;
        }
      }
      if (v30 == 1) {
        break;
      }
      unsigned int v20 = (char *)v29[1];
      if (!v20)
      {
        size_t v28 = v29 + 1;
        goto LABEL_21;
      }
    }
  }
  else
  {
LABEL_21:
    uint64_t v31 = (char *)v29;
    unsigned int v29 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v29 + 7) = 1;
    *((unsigned char *)v29 + 32) = 0;
    *unsigned int v29 = 0;
    v29[1] = 0;
    unint64_t v29[2] = (uint64_t *)v31;
    *size_t v28 = (uint64_t *)v29;
    uint64_t v32 = **((void **)this + 38);
    xpc_object_t v33 = (uint64_t *)v29;
    if (v32)
    {
      *((void *)this + 38) = v32;
      xpc_object_t v33 = *v28;
    }
    xpc_object_t v17 = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 39), v33);
    ++*((void *)this + 40);
  }
  *((unsigned char *)v29 + 32) = 0;
  xpc_object_t v34 = *v19;
  xpc_object_t v35 = (uint64_t **)((char *)this + 312);
  size_t v36 = (uint64_t **)((char *)this + 312);
  if (*v19)
  {
    unsigned int v37 = *v19;
    while (1)
    {
      while (1)
      {
        size_t v36 = (uint64_t **)v37;
        int v38 = *((_DWORD *)v37 + 7);
        if (v38 < 4) {
          break;
        }
        unsigned int v37 = *v36;
        xpc_object_t v35 = v36;
        if (!*v36) {
          goto LABEL_31;
        }
      }
      if (v38 == 3) {
        break;
      }
      unsigned int v37 = v36[1];
      if (!v37)
      {
        xpc_object_t v35 = v36 + 1;
        goto LABEL_31;
      }
    }
  }
  else
  {
LABEL_31:
    uint64_t v39 = (char *)v36;
    size_t v36 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v36 + 7) = 3;
    *((unsigned char *)v36 + 32) = 0;
    *size_t v36 = 0;
    v36[1] = 0;
    void v36[2] = (uint64_t *)v39;
    *xpc_object_t v35 = (uint64_t *)v36;
    uint64_t v40 = **((void **)this + 38);
    xpc_object_t v41 = (uint64_t *)v36;
    if (v40)
    {
      *((void *)this + 38) = v40;
      xpc_object_t v41 = *v35;
    }
    xpc_object_t v17 = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 39), v41);
    xpc_object_t v34 = (uint64_t *)*((void *)this + 39);
    ++*((void *)this + 40);
  }
  *((unsigned char *)v36 + 32) = 0;
  xpc_object_t v42 = (uint64_t **)((char *)this + 312);
  xpc_object_t v43 = (uint64_t **)((char *)this + 312);
  if (v34)
  {
    while (1)
    {
      while (1)
      {
        xpc_object_t v43 = (uint64_t **)v34;
        int v44 = *((_DWORD *)v34 + 7);
        if (v44 < 1) {
          break;
        }
        xpc_object_t v34 = *v43;
        xpc_object_t v42 = v43;
        if (!*v43) {
          goto LABEL_41;
        }
      }
      if ((v44 & 0x80000000) == 0) {
        break;
      }
      xpc_object_t v34 = v43[1];
      if (!v34)
      {
        xpc_object_t v42 = v43 + 1;
        goto LABEL_41;
      }
    }
  }
  else
  {
LABEL_41:
    uint64_t v45 = (char *)v43;
    xpc_object_t v43 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v43 + 7) = 0;
    *((unsigned char *)v43 + 32) = 0;
    *xpc_object_t v43 = 0;
    v43[1] = 0;
    v43[2] = (uint64_t *)v45;
    *xpc_object_t v42 = (uint64_t *)v43;
    uint64_t v46 = **((void **)this + 38);
    xpc_object_t v47 = (uint64_t *)v43;
    if (v46)
    {
      *((void *)this + 38) = v46;
      xpc_object_t v47 = *v42;
    }
    xpc_object_t v17 = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 39), v47);
    ++*((void *)this + 40);
  }
  char v48 = *((unsigned char *)v43 + 32);
  char v49 = (uint64_t **)((char *)this + 288);
  CFDictionaryRef v50 = (char *)*((void *)this + 36);
  std::string::size_type v51 = (uint64_t **)((char *)this + 288);
  id v52 = (uint64_t **)((char *)this + 288);
  if (v50)
  {
    while (1)
    {
      while (1)
      {
        id v52 = (uint64_t **)v50;
        int v53 = *((_DWORD *)v50 + 7);
        if (v53 < 1) {
          break;
        }
        CFDictionaryRef v50 = (char *)*v52;
        std::string::size_type v51 = v52;
        if (!*v52) {
          goto LABEL_51;
        }
      }
      if ((v53 & 0x80000000) == 0) {
        break;
      }
      CFDictionaryRef v50 = (char *)v52[1];
      if (!v50)
      {
        std::string::size_type v51 = v52 + 1;
        goto LABEL_51;
      }
    }
  }
  else
  {
LABEL_51:
    uint64_t v54 = (char *)v52;
    id v52 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v52 + 7) = 0;
    *((unsigned char *)v52 + 32) = 0;
    std::__shared_weak_count *v52 = 0;
    v52[1] = 0;
    v52[2] = (uint64_t *)v54;
    *std::string::size_type v51 = (uint64_t *)v52;
    uint64_t v55 = **((void **)this + 35);
    std::string v56 = (uint64_t *)v52;
    if (v55)
    {
      *((void *)this + 35) = v55;
      std::string v56 = *v51;
    }
    xpc_object_t v17 = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v56);
    ++*((void *)this + 37);
  }
  *((unsigned char *)v52 + 32) = v48;
  std::string v57 = *v19;
  std::string v58 = (uint64_t **)((char *)this + 312);
  long long v59 = (uint64_t **)((char *)this + 312);
  if (*v19)
  {
    while (1)
    {
      while (1)
      {
        long long v59 = (uint64_t **)v57;
        int v60 = *((_DWORD *)v57 + 7);
        if (v60 < 2) {
          break;
        }
        std::string v57 = *v59;
        std::string v58 = v59;
        if (!*v59) {
          goto LABEL_61;
        }
      }
      if (v60 == 1) {
        break;
      }
      std::string v57 = v59[1];
      if (!v57)
      {
        std::string v58 = v59 + 1;
        goto LABEL_61;
      }
    }
  }
  else
  {
LABEL_61:
    uint64_t v61 = (char *)v59;
    long long v59 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v59 + 7) = 1;
    *((unsigned char *)v59 + 32) = 0;
    unsigned int *v59 = 0;
    v59[1] = 0;
    v59[2] = (uint64_t *)v61;
    *std::string v58 = (uint64_t *)v59;
    uint64_t v62 = **((void **)this + 38);
    long long v63 = (uint64_t *)v59;
    if (v62)
    {
      *((void *)this + 38) = v62;
      long long v63 = *v58;
    }
    xpc_object_t v17 = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 39), v63);
    ++*((void *)this + 40);
  }
  char v64 = *((unsigned char *)v59 + 32);
  unint64_t v65 = *v49;
  long long v66 = (uint64_t **)((char *)this + 288);
  std::string v67 = (uint64_t **)((char *)this + 288);
  if (*v49)
  {
    while (1)
    {
      while (1)
      {
        std::string v67 = (uint64_t **)v65;
        int v68 = *((_DWORD *)v65 + 7);
        if (v68 < 2) {
          break;
        }
        unint64_t v65 = *v67;
        long long v66 = v67;
        if (!*v67) {
          goto LABEL_71;
        }
      }
      if (v68 == 1) {
        break;
      }
      unint64_t v65 = v67[1];
      if (!v65)
      {
        long long v66 = v67 + 1;
        goto LABEL_71;
      }
    }
  }
  else
  {
LABEL_71:
    uint64_t v69 = (char *)v67;
    std::string v67 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v67 + 7) = 1;
    *((unsigned char *)v67 + 32) = 0;
    *std::string v67 = 0;
    v67[1] = 0;
    v67[2] = (uint64_t *)v69;
    uint64_t *v66 = (uint64_t *)v67;
    uint64_t v70 = **((void **)this + 35);
    uint64_t v71 = (uint64_t *)v67;
    if (v70)
    {
      *((void *)this + 35) = v70;
      uint64_t v71 = *v66;
    }
    xpc_object_t v17 = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v71);
    ++*((void *)this + 37);
  }
  *((unsigned char *)v67 + 32) = v64;
  std::string v72 = *v19;
  size_t v73 = (uint64_t **)((char *)this + 312);
  if (*v19)
  {
    while (1)
    {
      while (1)
      {
        size_t v73 = (uint64_t **)v72;
        int v74 = *((_DWORD *)v72 + 7);
        if (v74 < 4) {
          break;
        }
        std::string v72 = *v73;
        xpc_object_t v19 = v73;
        if (!*v73) {
          goto LABEL_81;
        }
      }
      if (v74 == 3) {
        break;
      }
      std::string v72 = v73[1];
      if (!v72)
      {
        xpc_object_t v19 = v73 + 1;
        goto LABEL_81;
      }
    }
  }
  else
  {
LABEL_81:
    uint64_t v75 = (char *)v73;
    size_t v73 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v73 + 7) = 3;
    *((unsigned char *)v73 + 32) = 0;
    void *v73 = 0;
    v73[1] = 0;
    unint64_t v73[2] = (uint64_t *)v75;
    *xpc_object_t v19 = (uint64_t *)v73;
    uint64_t v76 = **((void **)this + 38);
    unsigned int v77 = (uint64_t *)v73;
    if (v76)
    {
      *((void *)this + 38) = v76;
      unsigned int v77 = *v19;
    }
    xpc_object_t v17 = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 39), v77);
    ++*((void *)this + 40);
  }
  char v78 = *((unsigned char *)v73 + 32);
  std::string v79 = *v49;
  int v80 = (uint64_t **)((char *)this + 288);
  if (*v49)
  {
    while (1)
    {
      while (1)
      {
        int v80 = (uint64_t **)v79;
        int v81 = *((_DWORD *)v79 + 7);
        if (v81 < 4) {
          break;
        }
        std::string v79 = *v80;
        char v49 = v80;
        if (!*v80) {
          goto LABEL_91;
        }
      }
      if (v81 == 3) {
        break;
      }
      std::string v79 = v80[1];
      if (!v79)
      {
        char v49 = v80 + 1;
        goto LABEL_91;
      }
    }
  }
  else
  {
LABEL_91:
    unsigned int v82 = (char *)v80;
    int v80 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v80 + 7) = 3;
    *((unsigned char *)v80 + 32) = 0;
    *int v80 = 0;
    v80[1] = 0;
    v80[2] = (uint64_t *)v82;
    *char v49 = (uint64_t *)v80;
    uint64_t v83 = **((void **)this + 35);
    uint64_t v84 = (uint64_t *)v80;
    if (v83)
    {
      *((void *)this + 35) = v83;
      uint64_t v84 = *v49;
    }
    xpc_object_t v17 = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v84);
    ++*((void *)this + 37);
  }
  *((unsigned char *)v80 + 32) = v78;
  *((void *)this + 26) = 0xFF00000004;
  uint64_t v85 = (capabilities::radio *)capabilities::txpower::supportsPowerSourceDetection((capabilities::txpower *)v17);
  *((unsigned char *)this + 169) = (_BYTE)v85;
  uint64_t v86 = (config::hw *)capabilities::radio::supportsDeviceMaterial(v85);
  *((unsigned char *)this + 170) = (_BYTE)v86;
  long long v87 = (capabilities::abs *)config::hw::watch(v86);
  *((unsigned char *)this + 688) = (_BYTE)v87;
  CPMSVariant = (capabilities::txpower *)capabilities::abs::getCPMSVariant(v87);
  *((unsigned char *)this + 664) = (_BYTE)CPMSVariant;
  if (CPMSVariant) {
    char v89 = 0;
  }
  else {
    char v89 = (capabilities::txpower *)capabilities::txpower::supportsPPM(CPMSVariant);
  }
  *((unsigned char *)this + 572) = (_BYTE)v89;
  uint64_t v90 = (capabilities::txpower *)capabilities::txpower::supportsKeyboard(v89);
  *((unsigned char *)this + 192) = (_BYTE)v90;
  char v91 = (capabilities::txpower *)capabilities::txpower::supportedFaceID(v90);
  *((_DWORD *)this + 43) = v91;
  uint64_t result = capabilities::txpower::supportsFrontCamera(v91);
  *((unsigned char *)this + 176) = result;
  return result;
}

void antenna::Service::Internal::stopService_sync(antenna::Service::Internal *this)
{
  antenna::Service::Internal::enableTxPowerCappingNotification_sync(this, 0);

  antenna::Service::Internal::stopTxPowerCapping_sync(this);
}

void antenna::Service::Internal::stopTxPowerCapping_sync(antenna::Service::Internal *this)
{
  if (*((unsigned char *)this + 152))
  {
    xpc_object_t v2 = *((void *)this + 5);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_debug_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEBUG, "#D Tx Power Capping Stop", buf, 2u);
      BOOL v3 = *((void *)this + 25);
      if (v3)
      {
LABEL_4:
        dispatch_source_cancel(v3);
        xpc_object_t v4 = *((void *)this + 25);
        *((void *)this + 25) = 0;
        if (v4) {
          dispatch_release(v4);
        }
      }
    }
    else
    {
      BOOL v3 = *((void *)this + 25);
      if (v3) {
        goto LABEL_4;
      }
    }
    *((unsigned char *)this + 333) = 0;
    antenna::Service::Internal::stopMotionDetection_sync(this);
    antenna::Service::Internal::stopHandDetection_sync(this);
    *((_DWORD *)this + 132) = 255;
  }
  if (*((unsigned char *)this + 153))
  {
    xpc_object_t v5 = *((void *)this + 5);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)xpc_object_t v8 = 0;
      _os_log_debug_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_DEBUG, "#D iPad Tx Power Capping based on Motion Sensor Stop", v8, 2u);
      antenna::Service::Internal::stopMotionDetection_sync(this);
      xpc_object_t v6 = *((void *)this + 45);
      if (v6)
      {
LABEL_10:
        dispatch_source_cancel(v6);
        xpc_object_t v7 = *((void *)this + 45);
        *((void *)this + 45) = 0;
        if (v7) {
          dispatch_release(v7);
        }
      }
    }
    else
    {
      antenna::Service::Internal::stopMotionDetection_sync(this);
      xpc_object_t v6 = *((void *)this + 45);
      if (v6) {
        goto LABEL_10;
      }
    }
    *((_DWORD *)this + 88) = 255;
  }
  *((unsigned char *)this + 216) = 0;
}

void antenna::Service::Internal::stopService(antenna::Service::Internal *this)
{
  xpc_object_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (uint64_t v3 = *((void *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v5 = v4;
  xpc_object_t v6 = operator new(8uLL);
  void *v6 = this;
  xpc_object_t v7 = *((void *)this + 11);
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v8 = operator new(0x18uLL);
  *xpc_object_t v8 = v6;
  v8[1] = v3;
  void v8[2] = v5;
  dispatch_async_f(v7, v8, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::stopService(void)::$_0>(antenna::Service::Internal::stopService(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::stopService(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::stopService(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void antenna::Service::Internal::startService(antenna::Service::Internal *this)
{
  xpc_object_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (uint64_t v3 = *((void *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v5 = v4;
  xpc_object_t v6 = operator new(8uLL);
  void *v6 = this;
  xpc_object_t v7 = *((void *)this + 11);
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v8 = operator new(0x18uLL);
  *xpc_object_t v8 = v6;
  v8[1] = v3;
  void v8[2] = v5;
  dispatch_async_f(v7, v8, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::startService(void)::$_0>(antenna::Service::Internal::startService(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::startService(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::startService(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void antenna::Service::Internal::enterLowPower(antenna::Service::Internal *this)
{
  xpc_object_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (uint64_t v3 = *((void *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v5 = v4;
  xpc_object_t v6 = operator new(8uLL);
  void *v6 = this;
  xpc_object_t v7 = *((void *)this + 11);
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v8 = operator new(0x18uLL);
  *xpc_object_t v8 = v6;
  v8[1] = v3;
  void v8[2] = v5;
  dispatch_async_f(v7, v8, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::enterLowPower(void)::$_0>(antenna::Service::Internal::enterLowPower(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::enterLowPower(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::enterLowPower(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void antenna::Service::Internal::exitLowPower(antenna::Service::Internal *this)
{
  xpc_object_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (uint64_t v3 = *((void *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v5 = v4;
  xpc_object_t v6 = operator new(8uLL);
  void *v6 = this;
  xpc_object_t v7 = *((void *)this + 11);
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v8 = operator new(0x18uLL);
  *xpc_object_t v8 = v6;
  v8[1] = v3;
  void v8[2] = v5;
  dispatch_async_f(v7, v8, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::exitLowPower(void)::$_0>(antenna::Service::Internal::exitLowPower(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::exitLowPower(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::exitLowPower(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void antenna::Service::Internal::performCommandDriver_sync(void *a1, void *a2, uint64_t a3)
{
  xpc_object_t v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || (uint64_t v7 = a1[9], (v8 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (MEMORY[0x1C8795EB0](*a2) == MEMORY[0x1E4F14590])
  {
    uint64_t v10 = a1[15];
    xpc_object_t v23 = (xpc_object_t)*a2;
    if (v23) {
      xpc_retain(v23);
    }
    else {
      xpc_object_t v23 = xpc_null_create();
    }
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN7antenna7Service8Internal25performCommandDriver_syncEN3xpc4dictEN8dispatch8callbackIU13block_pointerFvNS2_6objectEEEE_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_47_0;
    void aBlock[4] = a1;
    void aBlock[5] = v7;
    xpc_object_t v17 = v9;
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    xpc_object_t v11 = (xpc_object_t)*a2;
    xpc_object_t v18 = v11;
    if (v11)
    {
      xpc_retain(v11);
      xpc_object_t v12 = *(void **)a3;
      if (!*(void *)a3) {
        goto LABEL_14;
      }
    }
    else
    {
      xpc_object_t v18 = xpc_null_create();
      xpc_object_t v12 = *(void **)a3;
      if (!*(void *)a3)
      {
LABEL_14:
        uint64_t v13 = *(NSObject **)(a3 + 8);
        xpc_object_t v19 = v12;
        dispatch_object_t object = v13;
        if (v13) {
          dispatch_retain(v13);
        }
        uint64_t v14 = _Block_copy(aBlock);
        xpc_object_t v15 = a1[11];
        if (v15) {
          dispatch_retain(v15);
        }
        char v21 = v14;
        dispatch_object_t v22 = v15;
        (*(void (**)(uint64_t, xpc_object_t *, const void **))(*(void *)v10 + 48))(v10, &v23, &v21);
        if (v22) {
          dispatch_release(v22);
        }
        if (v21) {
          _Block_release(v21);
        }
        xpc_release(v23);
        xpc_object_t v23 = 0;
        if (object) {
          dispatch_release(object);
        }
        if (v19) {
          _Block_release(v19);
        }
        xpc_release(v18);
        xpc_object_t v18 = 0;
        if (v17) {
          std::__shared_weak_count::__release_weak(v17);
        }
        goto LABEL_28;
      }
    }
    xpc_object_t v12 = _Block_copy(v12);
    goto LABEL_14;
  }
LABEL_28:
  std::__shared_weak_count::__release_weak(v9);
}

void sub_1C5A8903C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, xpc_object_t object)
{
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback(v19 - 72);
  dispatch::callback<void({block_pointer})(xpc::object)>::~callback(v18);
  xpc_release(object);
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  xpc_release(*(xpc_object_t *)(v19 - 56));
  *(void *)(v19 - 56) = 0;
  std::__shared_weak_count::__release_weak(v17);
  _Unwind_Resume(a1);
}

void sub_1C5A89098(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

uint64_t dispatch::callback<void({block_pointer})(xpc::object)>::~callback(uint64_t a1)
{
  xpc_object_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void antenna::Service::Internal::transmitStateHandler(void *a1, int a2, int a3)
{
  xpc_object_t v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || (uint64_t v7 = a1[9], (v8 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v9 = v8;
  uint64_t v10 = operator new(0x10uLL);
  *(void *)uint64_t v10 = a1;
  v10[2] = a2;
  v10[3] = a3;
  xpc_object_t v11 = a1[11];
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v12 = operator new(0x18uLL);
  void *v12 = v10;
  v12[1] = v7;
  void v12[2] = v9;
  dispatch_async_f(v11, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0>(antenna::Service::Internal::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void antenna::Service::Internal::createTransmitStateDict_sync(int a1@<W1>, int a2@<W2>, xpc_object_t *a3@<X8>)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6 || (xpc_object_t v6 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v6) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v6);
      xpc_object_t v7 = v6;
    }
    else
    {
      xpc_object_t v7 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v7 = xpc_null_create();
    xpc_object_t v6 = 0;
  }
  xpc_release(v6);
  if (a1 == 1)
  {
    xpc_object_t v8 = xpc_string_create((const char *)*MEMORY[0x1E4F4D0C0]);
    if (!v8) {
      xpc_object_t v8 = xpc_null_create();
    }
  }
  else
  {
    if (a1)
    {
      *a3 = xpc_null_create();
      goto LABEL_31;
    }
    xpc_object_t v8 = xpc_string_create((const char *)*MEMORY[0x1E4F4CDB0]);
    if (!v8) {
      xpc_object_t v8 = xpc_null_create();
    }
  }
  xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x1E4F4CD50], v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  switch(a2)
  {
    case 0:
      xpc_object_t v10 = xpc_string_create((const char *)*MEMORY[0x1E4F4CEC8]);
      if (!v10) {
        xpc_object_t v10 = xpc_null_create();
      }
      goto LABEL_27;
    case 1:
      xpc_object_t v10 = xpc_string_create((const char *)*MEMORY[0x1E4F4CD00]);
      if (!v10) {
        xpc_object_t v10 = xpc_null_create();
      }
      goto LABEL_27;
    case 2:
      xpc_object_t v10 = xpc_string_create((const char *)*MEMORY[0x1E4F4CDA8]);
      if (!v10) {
        xpc_object_t v10 = xpc_null_create();
      }
      goto LABEL_27;
    case 3:
      xpc_object_t v10 = xpc_string_create((const char *)*MEMORY[0x1E4F4CBE0]);
      if (!v10) {
        xpc_object_t v10 = xpc_null_create();
      }
LABEL_27:
      xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x1E4F4CF18], v10);
      xpc_object_t v11 = xpc_null_create();
      xpc_release(v10);
      xpc_release(v11);
      break;
    default:
      break;
  }
  xpc_object_t v12 = xpc_string_create((const char *)*MEMORY[0x1E4F4C750]);
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x1E4F4C7D8], v12);
  xpc_object_t v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  *a3 = v7;
  xpc_object_t v7 = xpc_null_create();
LABEL_31:
  xpc_release(v7);
}

void antenna::Service::Internal::startTxPowerCapping_sync(antenna::Service::Internal *this)
{
  if (*((unsigned char *)this + 216) || *((unsigned char *)this + 168)) {
    return;
  }
  *((unsigned char *)this + 216) = 1;
  if (*((unsigned char *)this + 152))
  {
    xpc_object_t v2 = *((void *)this + 5);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v12[0]) = 0;
      _os_log_debug_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEBUG, "#D Tx Power Capping Start", (uint8_t *)v12, 2u);
      pthread_mutex_lock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
      uint64_t v3 = (Capabilities *)unk_1EBBDC788;
      if (!unk_1EBBDC788)
      {
LABEL_7:
        xpc_object_t v4 = operator new(1uLL);
        xpc_object_t v5 = operator new(0x20uLL);
        *xpc_object_t v5 = &unk_1F2112060;
        v5[1] = 0;
        _DWORD v5[2] = 0;
        v5[3] = v4;
        xpc_object_t v6 = (std::__shared_weak_count *)off_1EBBDC790;
        unk_1EBBDC788 = v4;
        off_1EBBDC790 = v5;
        if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        uint64_t v3 = (Capabilities *)unk_1EBBDC788;
      }
    }
    else
    {
      pthread_mutex_lock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
      uint64_t v3 = (Capabilities *)unk_1EBBDC788;
      if (!unk_1EBBDC788) {
        goto LABEL_7;
      }
    }
    xpc_object_t v7 = (std::__shared_weak_count *)off_1EBBDC790;
    v12[0] = v3;
    v12[1] = off_1EBBDC790;
    if (off_1EBBDC790) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDC790 + 1, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
    int isCMHandDetectionSupported = Capabilities::isCMHandDetectionSupported(v3);
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    if (isCMHandDetectionSupported)
    {
      antenna::Service::Internal::processHandDetection_sync(this);
      antenna::Service::Internal::checkStartHandDetection_sync(this);
    }
    antenna::Service::Internal::startTxPowerCappingIPhone_sync(this);
  }
  if (*((unsigned char *)this + 153))
  {
    xpc_object_t v9 = *((void *)this + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v12[0]) = 0;
      _os_log_debug_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEBUG, "#D iPad Tx Power Capping based on Motion Sensor Start", (uint8_t *)v12, 2u);
      if (*((unsigned char *)this + 248))
      {
LABEL_22:
        xpc_object_t v10 = *((void *)this + 45);
        if (!v10) {
          goto LABEL_30;
        }
        goto LABEL_28;
      }
    }
    else if (*((unsigned char *)this + 248))
    {
      goto LABEL_22;
    }
    antenna::Service::Internal::startMotionDetection_sync(this);
    xpc_object_t v10 = *((void *)this + 45);
    if (!v10)
    {
LABEL_30:
      antenna::Service::Internal::sendTxPowerCappingIPadMode_sync(this);
      antenna::Service::Internal::startTxPowerCappingIPadWithMotionTimer_sync((dispatch_queue_t *)this);
      return;
    }
LABEL_28:
    dispatch_source_cancel(v10);
    xpc_object_t v11 = *((void *)this + 45);
    *((void *)this + 45) = 0;
    if (v11) {
      dispatch_release(v11);
    }
    goto LABEL_30;
  }
}

void sub_1C5A89884(_Unwind_Exception *a1)
{
  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1C5A898B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void antenna::Service::Internal::processHandDetection_sync(antenna::Service::Internal *this)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  pthread_mutex_lock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  xpc_object_t v2 = (Capabilities *)unk_1EBBDC788;
  if (!unk_1EBBDC788)
  {
    uint64_t v3 = operator new(1uLL);
    xpc_object_t v4 = operator new(0x20uLL);
    void *v4 = &unk_1F2112060;
    v4[1] = 0;
    v4[2] = 0;
    void v4[3] = v3;
    xpc_object_t v5 = (std::__shared_weak_count *)off_1EBBDC790;
    unk_1EBBDC788 = v3;
    off_1EBBDC790 = v4;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    xpc_object_t v2 = (Capabilities *)unk_1EBBDC788;
  }
  xpc_object_t v6 = (std::__shared_weak_count *)off_1EBBDC790;
  *(void *)&long long v17 = v2;
  *((void *)&v17 + 1) = off_1EBBDC790;
  if (off_1EBBDC790) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDC790 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  int isCMHandDetectionSupported = Capabilities::isCMHandDetectionSupported(v2);
  int v8 = isCMHandDetectionSupported;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v8) {
      return;
    }
  }
  else if (!isCMHandDetectionSupported)
  {
    return;
  }
  xpc_object_t v9 = (const char **)((char *)this + 536);
  int v10 = *((char *)this + 559);
  xpc_object_t v11 = (char *)this + 536;
  if (v10 < 0) {
    xpc_object_t v11 = *v9;
  }
  size_t v12 = strlen((const char *)*MEMORY[0x1E4F4D2C8]);
  if (!strncasecmp(v11, (const char *)*MEMORY[0x1E4F4D2C8], v12))
  {
    BOOL isHandednessCondition = antenna::Service::Internal::isHandednessCondition(this);
    xpc_object_t v15 = *((void *)this + 5);
    BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG);
    if (isHandednessCondition)
    {
      if (v16)
      {
        LOWORD(v17) = 0;
        _os_log_debug_impl(&dword_1C59C6000, v15, OS_LOG_TYPE_DEBUG, "#D Handedness condition is met", (uint8_t *)&v17, 2u);
      }
      antenna::Service::Internal::sendMotionHandDetectionState_sync(this, *((_DWORD *)this + 132));
    }
    else
    {
      if (v16)
      {
        LOWORD(v17) = 0;
        _os_log_debug_impl(&dword_1C59C6000, v15, OS_LOG_TYPE_DEBUG, "#D Handedness condition is not met. Default handedness state is sending.", (uint8_t *)&v17, 2u);
      }
      antenna::Service::Internal::sendMotionHandDetectionState_sync(this, 0);
    }
  }
  else
  {
    xpc_object_t v13 = *((void *)this + 5);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      if (v10 < 0) {
        xpc_object_t v9 = (const char **)*v9;
      }
      LODWORD(v17) = 136315138;
      *(void *)((char *)&v17 + 4) = v9;
      _os_log_debug_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_DEBUG, "#D Hand Detection Overriding Mode is %s, and sending is skipped", (uint8_t *)&v17, 0xCu);
    }
  }
}

void sub_1C5A89B78(_Unwind_Exception *a1)
{
  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::checkStartHandDetection_sync(antenna::Service::Internal *this)
{
  pthread_mutex_lock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  xpc_object_t v2 = (uint64_t *)unk_1EBBDC788;
  if (!unk_1EBBDC788)
  {
    uint64_t v3 = operator new(1uLL);
    xpc_object_t v4 = operator new(0x20uLL);
    void *v4 = &unk_1F2112060;
    v4[1] = 0;
    v4[2] = 0;
    void v4[3] = v3;
    xpc_object_t v5 = (std::__shared_weak_count *)off_1EBBDC790;
    unk_1EBBDC788 = v3;
    off_1EBBDC790 = v4;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    xpc_object_t v2 = (uint64_t *)unk_1EBBDC788;
  }
  xpc_object_t v6 = (std::__shared_weak_count *)off_1EBBDC790;
  v10[0] = v2;
  v10[1] = (uint64_t *)off_1EBBDC790;
  if (off_1EBBDC790) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDC790 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  if (Capabilities::isCMHandDetectionSupported((Capabilities *)v2))
  {
    uint64_t v7 = *((void *)this + 64);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    if (v7)
    {
      if (*((unsigned char *)this + 560))
      {
        v10[0] = **((uint64_t ***)this + 64);
        ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::start(void)::{lambda(void)#1}>(v10[0], v10);
        int v8 = *((void *)this + 5);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v10[0]) = 0;
          _os_log_debug_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_DEBUG, "#D Hand Detection Started!", (uint8_t *)v10, 2u);
        }
      }
      else
      {
        xpc_object_t v9 = *((void *)this + 5);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v10[0]) = 0;
          _os_log_debug_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEBUG, "#D Uncovered prox is detected. Set the detection state as default.", (uint8_t *)v10, 2u);
        }
        antenna::Service::Internal::processHandDetection_sync(this);
        antenna::Service::Internal::stopHandDetection_sync(this);
      }
    }
  }
  else if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1C5A89E3C(_Unwind_Exception *a1)
{
  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1C5A89E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void antenna::Service::Internal::startTxPowerCappingIPhone_sync(antenna::Service::Internal *this)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (capabilities::txpower::operator&())
  {
    if (!*((unsigned char *)this + 155))
    {
      xpc_object_t v2 = (uint64_t **)((char *)this + 288);
      uint64_t v3 = (char *)*((void *)this + 36);
      xpc_object_t v4 = (uint64_t **)((char *)this + 288);
      xpc_object_t v5 = (uint64_t **)((char *)this + 288);
      if (v3)
      {
        while (1)
        {
          while (1)
          {
            xpc_object_t v5 = (uint64_t **)v3;
            int v6 = *((_DWORD *)v3 + 7);
            if (v6 < 2) {
              break;
            }
            uint64_t v3 = (char *)*v5;
            xpc_object_t v4 = v5;
            if (!*v5) {
              goto LABEL_10;
            }
          }
          if (v6 == 1) {
            break;
          }
          uint64_t v3 = (char *)v5[1];
          if (!v3)
          {
            xpc_object_t v4 = v5 + 1;
            goto LABEL_10;
          }
        }
      }
      else
      {
LABEL_10:
        uint64_t v7 = (char *)v5;
        xpc_object_t v5 = (uint64_t **)operator new(0x28uLL);
        *((_DWORD *)v5 + 7) = 1;
        *((unsigned char *)v5 + 32) = 0;
        *xpc_object_t v5 = 0;
        v5[1] = 0;
        _DWORD v5[2] = (uint64_t *)v7;
        void *v4 = (uint64_t *)v5;
        uint64_t v8 = **((void **)this + 35);
        xpc_object_t v9 = (uint64_t *)v5;
        if (v8)
        {
          *((void *)this + 35) = v8;
          xpc_object_t v9 = *v4;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v9);
        ++*((void *)this + 37);
      }
      if (!*((unsigned char *)v5 + 32))
      {
        int v10 = *v2;
        xpc_object_t v11 = (uint64_t **)((char *)this + 288);
        if (*v2)
        {
          while (1)
          {
            while (1)
            {
              xpc_object_t v11 = (uint64_t **)v10;
              int v12 = *((_DWORD *)v10 + 7);
              if (v12 < 4) {
                break;
              }
              int v10 = *v11;
              xpc_object_t v2 = v11;
              if (!*v11) {
                goto LABEL_21;
              }
            }
            if (v12 == 3) {
              break;
            }
            int v10 = v11[1];
            if (!v10)
            {
              xpc_object_t v2 = v11 + 1;
              goto LABEL_21;
            }
          }
        }
        else
        {
LABEL_21:
          xpc_object_t v13 = (char *)v11;
          xpc_object_t v11 = (uint64_t **)operator new(0x28uLL);
          *((_DWORD *)v11 + 7) = 3;
          *((unsigned char *)v11 + 32) = 0;
          const char *v11 = 0;
          v11[1] = 0;
          uint64_t v11[2] = (uint64_t *)v13;
          uint64_t *v2 = (uint64_t *)v11;
          uint64_t v14 = **((void **)this + 35);
          xpc_object_t v15 = (uint64_t *)v11;
          if (v14)
          {
            *((void *)this + 35) = v14;
            xpc_object_t v15 = *v2;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v15);
          ++*((void *)this + 37);
        }
        if (!*((unsigned char *)v11 + 32))
        {
          antenna::Service::Internal::stopMotionDetection_sync(this);
          BOOL v16 = *((void *)this + 25);
          if (!v16) {
            goto LABEL_29;
          }
          goto LABEL_27;
        }
      }
    }
    antenna::Service::Internal::startMotionDetection_sync(this);
  }
  BOOL v16 = *((void *)this + 25);
  if (!v16) {
    goto LABEL_29;
  }
LABEL_27:
  dispatch_source_cancel(v16);
  BOOL v16 = *((void *)this + 25);
  *((void *)this + 25) = 0;
  if (v16) {
    dispatch_release(v16);
  }
LABEL_29:
  if (config::hw::watch((config::hw *)v16))
  {
    unsigned int TxPowerCappingForWatch = antenna::Service::Internal::getTxPowerCappingForWatch(this);
  }
  else if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild() {
         || (unsigned int TxPowerCappingForWatch = *((_DWORD *)this + 52), TxPowerCappingForWatch == 4))
  }
  {
    if (antenna::Service::Internal::isAudioReceiverOutputOnlyActive(this)
      || antenna::Service::Internal::isAudioAnyOutputActive(this) && !*((_DWORD *)this + 63)
      || *((unsigned char *)this + 155) && !antenna::Service::Internal::isAudioAnyOutputActive(this) && !*((_DWORD *)this + 63))
    {
      unsigned int TxPowerCappingForWatch = 2;
    }
    else
    {
      unsigned int TxPowerCappingForWatch = 3;
    }
  }
  xpc_object_t v18 = xpc_dictionary_create(0, 0, 0);
  if (v18 || (xpc_object_t v18 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v18) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v18);
      xpc_object_t v19 = v18;
    }
    else
    {
      xpc_object_t v19 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v19 = xpc_null_create();
    xpc_object_t v18 = 0;
  }
  xpc_release(v18);
  xpc_object_t v20 = xpc_string_create((const char *)*MEMORY[0x1E4FB9D08]);
  if (!v20) {
    xpc_object_t v20 = xpc_null_create();
  }
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E4FB9C68], v20);
  xpc_object_t v21 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v21);
  xpc_object_t v22 = xpc_BOOL_create(1);
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E4FB9D30], v22);
  xpc_object_t v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  xpc_object_t v24 = xpc_int64_create(TxPowerCappingForWatch);
  if (!v24) {
    xpc_object_t v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E4FB9DC8], v24);
  xpc_object_t v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  uint64_t v26 = *((void *)this + 5);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
  {
    memset(&v34, 0, sizeof(v34));
    if (TxPowerCappingForWatch - 1 < 3) {
      std::string::__assign_external(&v34, **((const std::string::value_type ***)&unk_1E651B618 + (int)(TxPowerCappingForWatch - 1)));
    }
    uint64_t v31 = &v34;
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v31 = (std::string *)v34.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    size_t v36 = v31;
    _os_log_debug_impl(&dword_1C59C6000, v26, OS_LOG_TYPE_DEBUG, "#D Tx Power Capping: %s", buf, 0xCu);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
  }
  if (*((unsigned char *)this + 154))
  {
    if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild()
      || (unsigned int v27 = *((_DWORD *)this + 53), v27 == 255))
    {
      unsigned int v27 = antenna::Service::Internal::isAudioReceiverOutputOnlyActive(this) || *((_DWORD *)this + 63) != 0;
    }
    xpc_object_t v28 = xpc_int64_create(v27);
    if (!v28) {
      xpc_object_t v28 = xpc_null_create();
    }
    xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E4FB9DF8], v28);
    xpc_object_t v29 = xpc_null_create();
    xpc_release(v28);
    xpc_release(v29);
    int v30 = *((void *)this + 5);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(v34.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(v34.__r_.__value_.__r.__words[0]) = v27;
      _os_log_debug_impl(&dword_1C59C6000, v30, OS_LOG_TYPE_DEBUG, "#D iPhone Tx Power Free Space: 0x%x", (uint8_t *)&v34, 8u);
      xpc_object_t object = v19;
      if (v19) {
        goto LABEL_66;
      }
LABEL_74:
      xpc_object_t object = xpc_null_create();
      goto LABEL_75;
    }
  }
  xpc_object_t object = v19;
  if (!v19) {
    goto LABEL_74;
  }
LABEL_66:
  xpc_retain(v19);
LABEL_75:
  v32[0] = 0;
  v32[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync(this, &object, (uint64_t)v32);
  xpc_release(object);
  xpc_object_t object = 0;
  antenna::Service::Internal::startTxPowerCappingIPhoneTimer_sync(this);
  if (*((unsigned char *)this + 332) && *((unsigned char *)this + 333))
  {
    AudioServicesPlaySystemSound(0x452u);
    *((unsigned char *)this + 333) = 0;
  }
  xpc_release(v19);
}

void sub_1C5A8A41C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void antenna::Service::Internal::startTxPowerCappingIPadWithMotion_sync(antenna::Service::Internal *this)
{
  if (*((unsigned char *)this + 248))
  {
    xpc_object_t v2 = *((void *)this + 45);
    if (!v2) {
      goto LABEL_7;
    }
  }
  else
  {
    antenna::Service::Internal::startMotionDetection_sync(this);
    xpc_object_t v2 = *((void *)this + 45);
    if (!v2) {
      goto LABEL_7;
    }
  }
  dispatch_source_cancel(v2);
  uint64_t v3 = *((void *)this + 45);
  *((void *)this + 45) = 0;
  if (v3) {
    dispatch_release(v3);
  }
LABEL_7:
  antenna::Service::Internal::sendTxPowerCappingIPadMode_sync(this);

  antenna::Service::Internal::startTxPowerCappingIPadWithMotionTimer_sync((dispatch_queue_t *)this);
}

void antenna::Service::Internal::stopTxPowerCappingIPhone_sync(antenna::Service::Internal *this)
{
  xpc_object_t v2 = *((void *)this + 25);
  if (v2)
  {
    dispatch_source_cancel(v2);
    uint64_t v3 = *((void *)this + 25);
    *((void *)this + 25) = 0;
    if (v3) {
      dispatch_release(v3);
    }
  }
  *((unsigned char *)this + 333) = 0;
  antenna::Service::Internal::stopMotionDetection_sync(this);
  antenna::Service::Internal::stopHandDetection_sync(this);
  *((_DWORD *)this + 132) = 255;
}

void antenna::Service::Internal::stopTxPowerCappingIPadWithMotion_sync(NSObject **this)
{
  antenna::Service::Internal::stopMotionDetection_sync((antenna::Service::Internal *)this);
  xpc_object_t v2 = this[45];
  if (v2)
  {
    dispatch_source_cancel(v2);
    uint64_t v3 = this[45];
    this[45] = 0;
    if (v3) {
      dispatch_release(v3);
    }
  }
  *((_DWORD *)this + 88) = 255;
}

unint64_t antenna::Service::Internal::systemElapsedTime(antenna::Service::Internal *this)
{
  return ctu::Clock::now_in_nanoseconds(this) / 0xF4240uLL;
}

uint64_t antenna::Service::Internal::systemTimeDifference(antenna::Service::Internal *this, int a2, int a3)
{
  return (a2 - a3);
}

uint64_t antenna::Service::Internal::lqmState_sync(uint64_t a1, int a2)
{
  if (a2 == 100) {
    return 2;
  }
  else {
    return a2 == 50;
  }
}

void antenna::Service::Internal::setLinkQualityMetric_sync(uint64_t a1, int a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 162))
  {
    if (a2 == 100) {
      int v2 = 2;
    }
    else {
      int v2 = a2 == 50;
    }
    *(_DWORD *)(a1 + 484) = v2;
    uint64_t v3 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      v4[0] = 67109120;
      v4[1] = v2;
      _os_log_debug_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEBUG, "#D fLQMState has set to %d", (uint8_t *)v4, 8u);
    }
  }
}

void antenna::Service::Internal::setMaxPower_sync(antenna::Service::Internal *this, xpc_object_t *a2)
{
  xpc_object_t v4 = (const char *)*MEMORY[0x1E4F4C460];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C460]))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a2, v4);
    xpc_object_t object = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    unsigned int v6 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
    if (v6 <= 0x3E8) {
      int v7 = v6;
    }
    else {
      int v7 = 0x7FFF;
    }
    *((_DWORD *)this + 116) = v7;
  }
  uint64_t v8 = (const char *)*MEMORY[0x1E4F4C620];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C620]))
  {
    xpc_object_t v9 = xpc_dictionary_get_value(*a2, v8);
    xpc_object_t object = v9;
    if (v9) {
      xpc_retain(v9);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    unsigned int v10 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
    if (v10 <= 0x3E8) {
      int v11 = v10;
    }
    else {
      int v11 = 0x7FFF;
    }
    *((_DWORD *)this + 117) = v11;
  }
  int v12 = (const char *)*MEMORY[0x1E4F4C290];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C290]))
  {
    xpc_object_t v13 = xpc_dictionary_get_value(*a2, v12);
    xpc_object_t object = v13;
    if (v13) {
      xpc_retain(v13);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *((_DWORD *)this + 118) = (unsigned __int16)xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  if (!*((unsigned char *)this + 664)) {
    antenna::Service::Internal::configTxPower_sync((uint64_t)this, 2u);
  }
}

void sub_1C5A8A8BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

unint64_t antenna::Service::Internal::calculateTxValue(antenna::Service::Internal *this, int a2, int a3)
{
  unint64_t result = 0x7FFFLL;
  if (a3 != 0x7FFF) {
    return (a3 * a2) / 0x64uLL;
  }
  return result;
}

void antenna::Service::Internal::setMaxPower_sync(antenna::Service::Internal *this)
{
  if (!*((unsigned char *)this + 664)) {
    antenna::Service::Internal::configTxPower_sync((uint64_t)this, 2u);
  }
}

void antenna::Service::Internal::callActive(antenna::Service::Internal *this)
{
  int v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)xpc_object_t v4 = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Call Active!", v4, 2u);
  }
  *((unsigned char *)this + 165) = 1;
  if (*((unsigned char *)this + 162))
  {
    uint64_t v3 = *((void *)this + 47);
    if (v3)
    {
      if (*(void *)(v3 + 72)) {
        ctu::iokit::Controller::setMesaQuality();
      }
    }
  }
}

void antenna::Service::Internal::callInactive(antenna::Service::Internal *this)
{
  int v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)xpc_object_t v4 = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Call Inactive!", v4, 2u);
  }
  *((unsigned char *)this + 165) = 0;
  if (*((unsigned char *)this + 162))
  {
    uint64_t v3 = *((void *)this + 47);
    if (v3)
    {
      if (*(void *)(v3 + 72)) {
        ctu::iokit::Controller::setMesaQuality();
      }
    }
  }
}

BOOL antenna::Service::Internal::isAudioReceiverOutputOnlyActive(antenna::Service::Internal *this)
{
  int v2 = (int **)((char *)this + 288);
  uint64_t v3 = (char *)*((void *)this + 36);
  xpc_object_t v4 = (uint64_t **)((char *)this + 288);
  uint64_t v5 = (uint64_t **)((char *)this + 288);
  if (v3)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v5 = (uint64_t **)v3;
        int v6 = *((_DWORD *)v3 + 7);
        if (v6 < 1) {
          break;
        }
        uint64_t v3 = (char *)*v5;
        xpc_object_t v4 = v5;
        if (!*v5) {
          goto LABEL_8;
        }
      }
      if ((v6 & 0x80000000) == 0) {
        break;
      }
      uint64_t v3 = (char *)v5[1];
      if (!v3)
      {
        xpc_object_t v4 = v5 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    int v7 = (char *)v5;
    uint64_t v5 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v5 + 7) = 0;
    *((unsigned char *)v5 + 32) = 0;
    *uint64_t v5 = 0;
    v5[1] = 0;
    _DWORD v5[2] = (uint64_t *)v7;
    const char *v4 = (uint64_t *)v5;
    uint64_t v8 = **((void **)this + 35);
    xpc_object_t v9 = (uint64_t *)v5;
    if (v8)
    {
      *((void *)this + 35) = v8;
      xpc_object_t v9 = *v4;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v9);
    ++*((void *)this + 37);
  }
  if (!*((unsigned char *)v5 + 32)) {
    return 0;
  }
  unsigned int v10 = *v2;
  int v11 = (uint64_t **)v2;
  int v12 = v2;
  if (*v2)
  {
    while (1)
    {
      while (1)
      {
        int v12 = v10;
        int v13 = v10[7];
        if (v13 < 2) {
          break;
        }
        unsigned int v10 = (int *)*v12;
        int v11 = (uint64_t **)v12;
        if (!*v12) {
          goto LABEL_19;
        }
      }
      if (v13 == 1) {
        break;
      }
      unsigned int v10 = (int *)v12[1];
      if (!v10)
      {
        int v11 = (uint64_t **)(v12 + 1);
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    uint64_t v14 = v12;
    int v12 = operator new(0x28uLL);
    *((_DWORD *)v12 + 7) = 1;
    *((unsigned char *)v12 + 32) = 0;
    void *v12 = 0;
    v12[1] = 0;
    void v12[2] = v14;
    const char *v11 = v12;
    uint64_t v15 = **((void **)this + 35);
    BOOL v16 = v12;
    if (v15)
    {
      *((void *)this + 35) = v15;
      BOOL v16 = *v11;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v16);
    ++*((void *)this + 37);
  }
  if (*((unsigned char *)v12 + 32)) {
    return 0;
  }
  xpc_object_t v18 = *v2;
  xpc_object_t v19 = v2;
  if (*v2)
  {
    while (1)
    {
      while (1)
      {
        xpc_object_t v19 = (int **)v18;
        int v20 = v18[7];
        if (v20 < 4) {
          break;
        }
        xpc_object_t v18 = *v19;
        int v2 = v19;
        if (!*v19) {
          goto LABEL_31;
        }
      }
      if (v20 == 3) {
        break;
      }
      xpc_object_t v18 = v19[1];
      if (!v18)
      {
        int v2 = v19 + 1;
        goto LABEL_31;
      }
    }
  }
  else
  {
LABEL_31:
    xpc_object_t v21 = (int *)v19;
    xpc_object_t v19 = (int **)operator new(0x28uLL);
    *((_DWORD *)v19 + 7) = 3;
    *((unsigned char *)v19 + 32) = 0;
    *xpc_object_t v19 = 0;
    v19[1] = 0;
    void v19[2] = v21;
    NSObject *v2 = (int *)v19;
    uint64_t v22 = **((void **)this + 35);
    xpc_object_t v23 = (uint64_t *)v19;
    if (v22)
    {
      *((void *)this + 35) = v22;
      xpc_object_t v23 = (uint64_t *)*v2;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v23);
    ++*((void *)this + 37);
  }
  return *((unsigned char *)v19 + 32) == 0;
}

BOOL antenna::Service::Internal::isAudioAnyOutputActive(antenna::Service::Internal *this)
{
  int v2 = (int **)((char *)this + 288);
  uint64_t v3 = (char *)*((void *)this + 36);
  xpc_object_t v4 = (uint64_t **)((char *)this + 288);
  uint64_t v5 = (uint64_t **)((char *)this + 288);
  if (v3)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v5 = (uint64_t **)v3;
        int v6 = *((_DWORD *)v3 + 7);
        if (v6 < 1) {
          break;
        }
        uint64_t v3 = (char *)*v5;
        xpc_object_t v4 = v5;
        if (!*v5) {
          goto LABEL_8;
        }
      }
      if ((v6 & 0x80000000) == 0) {
        break;
      }
      uint64_t v3 = (char *)v5[1];
      if (!v3)
      {
        xpc_object_t v4 = v5 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    int v7 = (char *)v5;
    uint64_t v5 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v5 + 7) = 0;
    *((unsigned char *)v5 + 32) = 0;
    *uint64_t v5 = 0;
    v5[1] = 0;
    _DWORD v5[2] = (uint64_t *)v7;
    const char *v4 = (uint64_t *)v5;
    uint64_t v8 = **((void **)this + 35);
    xpc_object_t v9 = (uint64_t *)v5;
    if (v8)
    {
      *((void *)this + 35) = v8;
      xpc_object_t v9 = *v4;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v9);
    ++*((void *)this + 37);
  }
  if (*((unsigned char *)v5 + 32)) {
    return 1;
  }
  int v11 = *v2;
  int v12 = (uint64_t **)v2;
  int v13 = v2;
  if (*v2)
  {
    while (1)
    {
      while (1)
      {
        int v13 = v11;
        int v14 = v11[7];
        if (v14 < 2) {
          break;
        }
        int v11 = (int *)*v13;
        int v12 = (uint64_t **)v13;
        if (!*v13) {
          goto LABEL_20;
        }
      }
      if (v14 == 1) {
        break;
      }
      int v11 = (int *)v13[1];
      if (!v11)
      {
        int v12 = (uint64_t **)(v13 + 1);
        goto LABEL_20;
      }
    }
  }
  else
  {
LABEL_20:
    uint64_t v15 = v13;
    int v13 = operator new(0x28uLL);
    *((_DWORD *)v13 + 7) = 1;
    *((unsigned char *)v13 + 32) = 0;
    void *v13 = 0;
    v13[1] = 0;
    v13[2] = v15;
    void *v12 = v13;
    uint64_t v16 = **((void **)this + 35);
    long long v17 = v13;
    if (v16)
    {
      *((void *)this + 35) = v16;
      long long v17 = *v12;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v17);
    ++*((void *)this + 37);
  }
  if (*((unsigned char *)v13 + 32)) {
    return 1;
  }
  xpc_object_t v18 = *v2;
  xpc_object_t v19 = v2;
  if (*v2)
  {
    while (1)
    {
      while (1)
      {
        xpc_object_t v19 = (int **)v18;
        int v20 = v18[7];
        if (v20 < 4) {
          break;
        }
        xpc_object_t v18 = *v19;
        int v2 = v19;
        if (!*v19) {
          goto LABEL_31;
        }
      }
      if (v20 == 3) {
        break;
      }
      xpc_object_t v18 = v19[1];
      if (!v18)
      {
        int v2 = v19 + 1;
        goto LABEL_31;
      }
    }
  }
  else
  {
LABEL_31:
    xpc_object_t v21 = (int *)v19;
    xpc_object_t v19 = (int **)operator new(0x28uLL);
    *((_DWORD *)v19 + 7) = 3;
    *((unsigned char *)v19 + 32) = 0;
    *xpc_object_t v19 = 0;
    v19[1] = 0;
    void v19[2] = v21;
    NSObject *v2 = (int *)v19;
    uint64_t v22 = **((void **)this + 35);
    xpc_object_t v23 = (uint64_t *)v19;
    if (v22)
    {
      *((void *)this + 35) = v22;
      xpc_object_t v23 = (uint64_t *)*v2;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v23);
    ++*((void *)this + 37);
  }
  return *((unsigned char *)v19 + 32) != 0;
}

uint64_t antenna::Service::Internal::isAudioOtherOutputActive(antenna::Service::Internal *this)
{
  int v2 = (char *)*((void *)this + 36);
  if (v2)
  {
    while (1)
    {
      while (1)
      {
        xpc_object_t v4 = (uint64_t **)v2;
        int v5 = *((_DWORD *)v2 + 7);
        if (v5 < 2) {
          break;
        }
        int v2 = (char *)*v4;
        uint64_t v3 = v4;
        if (!*v4) {
          goto LABEL_8;
        }
      }
      if (v5 == 1) {
        break;
      }
      int v2 = (char *)v4[1];
      if (!v2)
      {
        uint64_t v3 = v4 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v3 = (uint64_t **)((char *)this + 288);
    xpc_object_t v4 = (uint64_t **)((char *)this + 288);
LABEL_8:
    int v6 = (char *)v4;
    xpc_object_t v4 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v4 + 7) = 1;
    *((unsigned char *)v4 + 32) = 0;
    const char *v4 = 0;
    v4[1] = 0;
    _DWORD v4[2] = (uint64_t *)v6;
    char *v3 = (uint64_t *)v4;
    uint64_t v7 = **((void **)this + 35);
    uint64_t v8 = (uint64_t *)v4;
    if (v7)
    {
      *((void *)this + 35) = v7;
      uint64_t v8 = *v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v8);
    ++*((void *)this + 37);
  }
  return *((unsigned __int8 *)v4 + 32);
}

uint64_t antenna::Service::Internal::isAudioSpeakerOutputActive(antenna::Service::Internal *this)
{
  int v2 = (char *)*((void *)this + 36);
  if (v2)
  {
    while (1)
    {
      while (1)
      {
        xpc_object_t v4 = (uint64_t **)v2;
        int v5 = *((_DWORD *)v2 + 7);
        if (v5 < 4) {
          break;
        }
        int v2 = (char *)*v4;
        uint64_t v3 = v4;
        if (!*v4) {
          goto LABEL_8;
        }
      }
      if (v5 == 3) {
        break;
      }
      int v2 = (char *)v4[1];
      if (!v2)
      {
        uint64_t v3 = v4 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v3 = (uint64_t **)((char *)this + 288);
    xpc_object_t v4 = (uint64_t **)((char *)this + 288);
LABEL_8:
    int v6 = (char *)v4;
    xpc_object_t v4 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v4 + 7) = 3;
    *((unsigned char *)v4 + 32) = 0;
    const char *v4 = 0;
    v4[1] = 0;
    _DWORD v4[2] = (uint64_t *)v6;
    char *v3 = (uint64_t *)v4;
    uint64_t v7 = **((void **)this + 35);
    uint64_t v8 = (uint64_t *)v4;
    if (v7)
    {
      *((void *)this + 35) = v7;
      uint64_t v8 = *v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v8);
    ++*((void *)this + 37);
  }
  return *((unsigned __int8 *)v4 + 32);
}

uint64_t antenna::Service::Internal::isAudioReceiverOutputActive(antenna::Service::Internal *this)
{
  int v2 = (char *)*((void *)this + 36);
  if (v2)
  {
    while (1)
    {
      while (1)
      {
        xpc_object_t v4 = (uint64_t **)v2;
        int v5 = *((_DWORD *)v2 + 7);
        if (v5 < 1) {
          break;
        }
        int v2 = (char *)*v4;
        uint64_t v3 = v4;
        if (!*v4) {
          goto LABEL_8;
        }
      }
      if ((v5 & 0x80000000) == 0) {
        break;
      }
      int v2 = (char *)v4[1];
      if (!v2)
      {
        uint64_t v3 = v4 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v3 = (uint64_t **)((char *)this + 288);
    xpc_object_t v4 = (uint64_t **)((char *)this + 288);
LABEL_8:
    int v6 = (char *)v4;
    xpc_object_t v4 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v4 + 7) = 0;
    *((unsigned char *)v4 + 32) = 0;
    const char *v4 = 0;
    v4[1] = 0;
    _DWORD v4[2] = (uint64_t *)v6;
    char *v3 = (uint64_t *)v4;
    uint64_t v7 = **((void **)this + 35);
    uint64_t v8 = (uint64_t *)v4;
    if (v7)
    {
      *((void *)this + 35) = v7;
      uint64_t v8 = *v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v8);
    ++*((void *)this + 37);
  }
  return *((unsigned __int8 *)v4 + 32);
}

uint64_t antenna::Service::Internal::setTxPowerPlayAlert_sync(uint64_t result, int a2)
{
  *(unsigned char *)(result + 333) = 0;
  if (!*(unsigned char *)(result + 332)) {
    return result;
  }
  uint64_t v3 = result;
  unint64_t result = TelephonyUtilIsInternalBuild();
  if ((result & 1) != 0 || (unint64_t result = TelephonyUtilIsCarrierBuild(), result))
  {
    int v4 = *(_DWORD *)(v3 + 208);
    if (v4 != 4)
    {
LABEL_7:
      if (v4 == a2) {
        return result;
      }
      goto LABEL_8;
    }
  }
  unint64_t result = antenna::Service::Internal::isAudioReceiverOutputOnlyActive((antenna::Service::Internal *)v3);
  if ((result & 1) != 0
    || (unint64_t result = antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)v3), result)
    && !*(_DWORD *)(v3 + 252)
    || *(unsigned char *)(v3 + 155)
    && (unint64_t result = antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)v3), (result & 1) == 0)
    && !*(_DWORD *)(v3 + 252))
  {
    int v4 = 2;
    goto LABEL_7;
  }
  if (a2 != 3) {
LABEL_8:
  }
    *(unsigned char *)(v3 + 333) = 1;
  return result;
}

uint64_t antenna::Service::Internal::getTxPowerCappingForIPhone(antenna::Service::Internal *this)
{
  if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild()
    || (uint64_t result = *((unsigned int *)this + 52), result == 4))
  {
    if (antenna::Service::Internal::isAudioReceiverOutputOnlyActive(this)
      || antenna::Service::Internal::isAudioAnyOutputActive(this) && !*((_DWORD *)this + 63)
      || *((unsigned char *)this + 155) && !antenna::Service::Internal::isAudioAnyOutputActive(this) && !*((_DWORD *)this + 63))
    {
      return 2;
    }
    else
    {
      return 3;
    }
  }
  return result;
}

BOOL antenna::Service::Internal::isMotionOnTablePosition(antenna::Service::Internal *this)
{
  return *((_DWORD *)this + 63) == 0;
}

void antenna::Service::Internal::stopTxMotionCallbackTimer_sync(antenna::Service::Internal *this)
{
  int v2 = *((void *)this + 32);
  if (v2)
  {
    dispatch_source_cancel(v2);
    uint64_t v3 = *((void *)this + 32);
    *((void *)this + 32) = 0;
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

void antenna::Service::Internal::startTxMotionCallbackTimer_sync(dispatch_queue_t *this)
{
  int v2 = dispatch_source_create(MEMORY[0x1E4F14490], 1uLL, 0, this[11]);
  uint64_t v3 = this[32];
  this[32] = v2;
  if (v3)
  {
    dispatch_release(v3);
    int v2 = this[32];
  }
  dispatch_time_t v4 = dispatch_time(0, 5120000000);
  dispatch_source_set_timer(v2, v4, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
  int v5 = (std::__shared_weak_count *)this[10];
  if (!v5 || (dispatch_queue_t v6 = this[9], (v7 = std::__shared_weak_count::lock(v5)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v8 = v7;
  p_shared_weak_owners = &v7->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  unsigned int v10 = this[32];
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 1174405120;
  handler[2] = ___ZN7antenna7Service8Internal31startTxMotionCallbackTimer_syncEv_block_invoke;
  handler[3] = &__block_descriptor_tmp_29;
  handler[4] = this;
  handler[5] = v6;
  int v12 = v8;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  dispatch_source_set_event_handler(v10, handler);
  dispatch_activate(this[32]);
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  std::__shared_weak_count::__release_weak(v8);
}

void ___ZN7antenna7Service8Internal31startTxMotionCallbackTimer_syncEv_block_invoke(void *a1)
{
  int v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (antenna::Service::Internal *)a1[4];
    dispatch_time_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      int v5 = v4;
      if (a1[5]) {
        antenna::Service::Internal::handleMotionCallbackTimerExpiry_sync(v3);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1C5A8B4D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void antenna::Service::Internal::handleMotionCallbackTimerExpiry_sync(antenna::Service::Internal *this)
{
  int v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I WARNING - Motion callback missing", v7, 2u);
  }
  uint64_t v3 = *((void *)this + 32);
  if (v3)
  {
    dispatch_source_cancel(v3);
    dispatch_time_t v4 = *((void *)this + 32);
    *((void *)this + 32) = 0;
    if (v4) {
      dispatch_release(v4);
    }
  }
  ++*((void *)this + 33);
  *((_DWORD *)this + 63) = 1;
  antenna::Service::Internal::startTxMotionCallbackTimer_sync(this);
  if (*((unsigned char *)this + 153))
  {
    if (*((unsigned char *)this + 248))
    {
      int v5 = *((void *)this + 45);
      if (!v5) {
        goto LABEL_13;
      }
    }
    else
    {
      antenna::Service::Internal::startMotionDetection_sync(this);
      int v5 = *((void *)this + 45);
      if (!v5)
      {
LABEL_13:
        antenna::Service::Internal::sendTxPowerCappingIPadMode_sync(this);
        antenna::Service::Internal::startTxPowerCappingIPadWithMotionTimer_sync((dispatch_queue_t *)this);
        return;
      }
    }
    dispatch_source_cancel(v5);
    dispatch_queue_t v6 = *((void *)this + 45);
    *((void *)this + 45) = 0;
    if (v6) {
      dispatch_release(v6);
    }
    goto LABEL_13;
  }
}

uint64_t __copy_helper_block_e8_40c50_ZTSNSt3__18weak_ptrIN7antenna7Service8InternalEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c50_ZTSNSt3__18weak_ptrIN7antenna7Service8InternalEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void antenna::Service::Internal::setMotionThresholds(CMOnBodyDelegate **a1, ctu **a2)
{
  if (a1[29] && CMOnBodyDelegate::isSupported((CMOnBodyDelegate *)a1))
  {
    ctu::xpc_to_cf((uint64_t *)&cf, *a2, v4);
    CFTypeRef v5 = cf;
    if (cf && (CFTypeID v6 = CFGetTypeID(cf), v6 == CFDictionaryGetTypeID()))
    {
      CFTypeRef v9 = v5;
      CFRetain(v5);
      CFTypeRef v7 = cf;
      if (!cf)
      {
LABEL_9:
        CMOnBodyDelegate::setThresholds(a1[29], v5);
        if (v5) {
          CFRelease(v5);
        }
        return;
      }
    }
    else
    {
      CFTypeRef v5 = 0;
      CFTypeRef v9 = 0;
      CFTypeRef v7 = cf;
      if (!cf) {
        goto LABEL_9;
      }
    }
    CFRelease(v7);
    goto LABEL_9;
  }
}

void sub_1C5A8B6C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1C5A8B6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void antenna::Service::Internal::startMotionDetection_sync(antenna::Service::Internal *this)
{
  uint64_t v2 = *((void *)this + 32);
  if (v2)
  {
    dispatch_source_cancel(v2);
    uint64_t v2 = *((void *)this + 32);
    *((void *)this + 32) = 0;
    if (v2) {
      dispatch_release(v2);
    }
  }
  if (*((unsigned char *)this + 216))
  {
    if (CMOnBodyDelegate::isSupported((CMOnBodyDelegate *)v2))
    {
      if (!*((unsigned char *)this + 248))
      {
        uint64_t v3 = (CMOnBodyDelegate *)*((void *)this + 29);
        if (v3)
        {
          *((unsigned char *)this + 248) = 1;
          *((_DWORD *)this + 63) = 1;
          CMOnBodyDelegate::startMotionDetection(v3);
          antenna::Service::Internal::startTxMotionCallbackTimer_sync((dispatch_queue_t *)this);
          dispatch_time_t v4 = *((void *)this + 5);
          if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)CFTypeRef v5 = 0;
            _os_log_debug_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEBUG, "#D Motion Detection has been started!", v5, 2u);
          }
        }
      }
    }
  }
}

void antenna::Service::Internal::stopMotionDetection_sync(antenna::Service::Internal *this)
{
  uint64_t v2 = *((void *)this + 32);
  if (v2)
  {
    dispatch_source_cancel(v2);
    uint64_t v2 = *((void *)this + 32);
    *((void *)this + 32) = 0;
    if (v2) {
      dispatch_release(v2);
    }
  }
  if (*((unsigned char *)this + 248)
    && *((void *)this + 29)
    && CMOnBodyDelegate::isSupported((CMOnBodyDelegate *)v2)
    && (*((unsigned char *)this + 248) = 0,
        CMOnBodyDelegate::stopMotionDetection(*((CMOnBodyDelegate **)this + 29)),
        *((void *)this + 33) = 0,
        uint64_t v3 = *((void *)this + 5),
        os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)))
  {
    *(_WORD *)dispatch_time_t v4 = 0;
    _os_log_debug_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEBUG, "#D Motion Detection has been stopped!", v4, 2u);
    *((_DWORD *)this + 63) = 1;
  }
  else
  {
    *((_DWORD *)this + 63) = 1;
  }
}

void antenna::Service::Internal::motionDetectCallback_sync(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 248)) {
    return;
  }
  dispatch_time_t v4 = *(NSObject **)(a1 + 256);
  if (v4)
  {
    dispatch_source_cancel(v4);
    CFTypeRef v5 = *(NSObject **)(a1 + 256);
    *(void *)(a1 + 256) = 0;
    if (v5) {
      dispatch_release(v5);
    }
  }
  if ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
  {
    int v6 = *(_DWORD *)(a1 + 208);
    if (v6 != 4)
    {
LABEL_10:
      if (!*(unsigned char *)(a1 + 152)) {
        goto LABEL_23;
      }
      goto LABEL_11;
    }
  }
  if (antenna::Service::Internal::isAudioReceiverOutputOnlyActive((antenna::Service::Internal *)a1)
    || antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)a1) && !*(_DWORD *)(a1 + 252)
    || *(unsigned char *)(a1 + 155)
    && !antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)a1)
    && !*(_DWORD *)(a1 + 252))
  {
    int v6 = 2;
    goto LABEL_10;
  }
  int v6 = 3;
  if (!*(unsigned char *)(a1 + 152)) {
    goto LABEL_23;
  }
LABEL_11:
  if ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
  {
    int v6 = *(_DWORD *)(a1 + 208);
    if (v6 != 4)
    {
LABEL_23:
      CFTypeRef v7 = *(NSObject **)(a1 + 40);
      BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);
      if (a2) {
        goto LABEL_24;
      }
      goto LABEL_33;
    }
  }
  if (antenna::Service::Internal::isAudioReceiverOutputOnlyActive((antenna::Service::Internal *)a1)
    || antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)a1) && !*(_DWORD *)(a1 + 252)
    || *(unsigned char *)(a1 + 155)
    && !antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)a1)
    && !*(_DWORD *)(a1 + 252))
  {
    int v6 = 2;
    CFTypeRef v7 = *(NSObject **)(a1 + 40);
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);
    if (a2)
    {
LABEL_24:
      if (!v8)
      {
        int v9 = 1;
        if (!*(unsigned char *)(a1 + 152)) {
          goto LABEL_46;
        }
LABEL_35:
        *(unsigned char *)(a1 + 333) = 0;
        if (*(unsigned char *)(a1 + 332))
        {
          if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild()
            || (int v10 = *(_DWORD *)(a1 + 208), v10 == 4))
          {
            if (!antenna::Service::Internal::isAudioReceiverOutputOnlyActive((antenna::Service::Internal *)a1)
              && (!antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)a1)
               || *(_DWORD *)(a1 + 252))
              && (!*(unsigned char *)(a1 + 155)
               || antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)a1)
               || *(_DWORD *)(a1 + 252)))
            {
              if (v6 == 3) {
                goto LABEL_43;
              }
              goto LABEL_42;
            }
            int v10 = 2;
          }
          if (v10 != v6) {
LABEL_42:
          }
            *(unsigned char *)(a1 + 333) = 1;
        }
LABEL_43:
        if (capabilities::txpower::operator&() && v9 != *(_DWORD *)(a1 + 252)) {
          antenna::Service::Internal::processHandDetection_sync((antenna::Service::Internal *)a1);
        }
        goto LABEL_46;
      }
      *(_WORD *)int v13 = 0;
      _os_log_debug_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_DEBUG, "#D Motion Other Position Detected.", v13, 2u);
      int v9 = 1;
      if (*(unsigned char *)(a1 + 152)) {
        goto LABEL_35;
      }
      goto LABEL_46;
    }
  }
  else
  {
    int v6 = 3;
    CFTypeRef v7 = *(NSObject **)(a1 + 40);
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);
    if (a2) {
      goto LABEL_24;
    }
  }
LABEL_33:
  if (!v8)
  {
    int v9 = 0;
    if (!*(unsigned char *)(a1 + 152)) {
      goto LABEL_46;
    }
    goto LABEL_35;
  }
  *(_WORD *)std::string buf = 0;
  _os_log_debug_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_DEBUG, "#D Motion On Table Detected.", buf, 2u);
  int v9 = 0;
  if (*(unsigned char *)(a1 + 152)) {
    goto LABEL_35;
  }
LABEL_46:
  if (*(unsigned char *)(a1 + 153) && *(_DWORD *)(a1 + 252) != v9)
  {
    if (!*(unsigned char *)(a1 + 248)) {
      antenna::Service::Internal::startMotionDetection_sync((antenna::Service::Internal *)a1);
    }
    int v11 = *(NSObject **)(a1 + 360);
    if (v11)
    {
      dispatch_source_cancel(v11);
      int v12 = *(NSObject **)(a1 + 360);
      *(void *)(a1 + 360) = 0;
      if (v12) {
        dispatch_release(v12);
      }
    }
    antenna::Service::Internal::sendTxPowerCappingIPadMode_sync((antenna::Service::Internal *)a1);
    antenna::Service::Internal::startTxPowerCappingIPadWithMotionTimer_sync((dispatch_queue_t *)a1);
  }
  *(_DWORD *)(a1 + 252) = v9;
  antenna::Service::Internal::startTxMotionCallbackTimer_sync((dispatch_queue_t *)a1);
}

void antenna::Service::Internal::sendMotionHandDetectionState_sync(void *a1, int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v4) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v4);
      xpc_object_t v5 = v4;
    }
    else
    {
      xpc_object_t v5 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v4 = 0;
  }
  xpc_release(v4);
  xpc_object_t v6 = xpc_string_create((const char *)*MEMORY[0x1E4FB9D60]);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9C68], v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  xpc_object_t v8 = xpc_int64_create((unsigned __int16)a2);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9D18], v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  v11[0] = 0;
  v11[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync(a1, &object, (uint64_t)v11);
  xpc_release(object);
  xpc_object_t object = 0;
  int v10 = a1[5];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v14 = a2;
    _os_log_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_DEFAULT, "#I Sent Hand Detection: %d", buf, 8u);
  }
  xpc_release(v5);
}

void sub_1C5A8BD78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

BOOL antenna::Service::Internal::isHandednessCondition(antenna::Service::Internal *this)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *((unsigned __int8 *)this + 216);
    xpc_object_t v4 = (char *)*((void *)this + 36);
    if (v4)
    {
      while (1)
      {
        while (1)
        {
          xpc_object_t v6 = (uint64_t **)v4;
          int v7 = *((_DWORD *)v4 + 7);
          if (v7 < 1) {
            break;
          }
          xpc_object_t v4 = (char *)*v6;
          xpc_object_t v5 = v6;
          if (!*v6) {
            goto LABEL_9;
          }
        }
        if ((v7 & 0x80000000) == 0) {
          break;
        }
        xpc_object_t v4 = (char *)v6[1];
        if (!v4)
        {
          xpc_object_t v5 = v6 + 1;
          goto LABEL_9;
        }
      }
    }
    else
    {
      xpc_object_t v5 = (uint64_t **)((char *)this + 288);
      xpc_object_t v6 = (uint64_t **)((char *)this + 288);
LABEL_9:
      xpc_object_t v8 = (char *)v6;
      xpc_object_t v6 = (uint64_t **)operator new(0x28uLL);
      *((_DWORD *)v6 + 7) = 0;
      *((unsigned char *)v6 + 32) = 0;
      NSObject *v6 = 0;
      v6[1] = 0;
      void v6[2] = (uint64_t *)v8;
      *xpc_object_t v5 = (uint64_t *)v6;
      uint64_t v9 = **((void **)this + 35);
      int v10 = (uint64_t *)v6;
      if (v9)
      {
        *((void *)this + 35) = v9;
        int v10 = *v5;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v10);
      ++*((void *)this + 37);
    }
    int v11 = *((unsigned __int8 *)v6 + 32);
    int v12 = *((_DWORD *)this + 63);
    int v13 = *((unsigned __int8 *)this + 560);
    v22[0] = 67109888;
    v22[1] = v3;
    __int16 v23 = 1024;
    int v24 = v11;
    __int16 v25 = 1024;
    int v26 = v12;
    __int16 v27 = 1024;
    int v28 = v13;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I HandedCondition: fTxPowerTransmitStarted: %u, isAudioReceiverOutputActive(): %u, fMotionState: %u, fHandDetectionProxCovered: %u", (uint8_t *)v22, 0x1Au);
  }
  if (!*((unsigned char *)this + 216)) {
    return 0;
  }
  int v14 = (char *)*((void *)this + 36);
  if (v14)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v16 = (uint64_t **)v14;
        int v17 = *((_DWORD *)v14 + 7);
        if (v17 < 1) {
          break;
        }
        int v14 = (char *)*v16;
        uint64_t v15 = v16;
        if (!*v16) {
          goto LABEL_21;
        }
      }
      if ((v17 & 0x80000000) == 0) {
        break;
      }
      int v14 = (char *)v16[1];
      if (!v14)
      {
        uint64_t v15 = v16 + 1;
        goto LABEL_21;
      }
    }
    if (!*((unsigned char *)v16 + 32)) {
      return 0;
    }
  }
  else
  {
    uint64_t v15 = (uint64_t **)((char *)this + 288);
    uint64_t v16 = (uint64_t **)((char *)this + 288);
LABEL_21:
    xpc_object_t v18 = operator new(0x28uLL);
    v18[7] = 0;
    *((unsigned char *)v18 + 32) = 0;
    *(void *)xpc_object_t v18 = 0;
    *((void *)v18 + 1) = 0;
    *((void *)v18 + 2) = v16;
    *uint64_t v15 = (uint64_t *)v18;
    uint64_t v19 = **((void **)this + 35);
    int v20 = (uint64_t *)v18;
    if (v19)
    {
      *((void *)this + 35) = v19;
      int v20 = *v15;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v20);
    ++*((void *)this + 37);
    if (!*((unsigned char *)v18 + 32)) {
      return 0;
    }
  }
  return *((_DWORD *)this + 63) && *((unsigned char *)this + 560);
}

void antenna::Service::Internal::handDetectCallback(void *a1, int a2)
{
  int v3 = (std::__shared_weak_count *)a1[10];
  if (!v3 || (uint64_t v5 = a1[9], (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v7 = v6;
  xpc_object_t v8 = operator new(0x10uLL);
  *(void *)xpc_object_t v8 = a1;
  void v8[2] = a2;
  uint64_t v9 = a1[11];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  int v10 = operator new(0x18uLL);
  *int v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::handDetectCallback(CMHandDetectionDelegate::CMHandDetectionResult)::$_0>(antenna::Service::Internal::handDetectCallback(CMHandDetectionDelegate::CMHandDetectionResult)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::handDetectCallback(CMHandDetectionDelegate::CMHandDetectionResult)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::handDetectCallback(CMHandDetectionDelegate::CMHandDetectionResult)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void antenna::Service::Internal::stopHandDetection_sync(antenna::Service::Internal *this)
{
  pthread_mutex_lock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  uint64_t v2 = (uint64_t *)unk_1EBBDC788;
  if (!unk_1EBBDC788)
  {
    int v3 = operator new(1uLL);
    xpc_object_t v4 = operator new(0x20uLL);
    void *v4 = &unk_1F2112060;
    v4[1] = 0;
    _DWORD v4[2] = 0;
    void v4[3] = v3;
    uint64_t v5 = (std::__shared_weak_count *)off_1EBBDC790;
    unk_1EBBDC788 = v3;
    off_1EBBDC790 = v4;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = (uint64_t *)unk_1EBBDC788;
  }
  xpc_object_t v6 = (std::__shared_weak_count *)off_1EBBDC790;
  v9[0] = v2;
  v9[1] = (uint64_t *)off_1EBBDC790;
  if (off_1EBBDC790) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDC790 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  if (Capabilities::isCMHandDetectionSupported((Capabilities *)v2))
  {
    uint64_t v7 = *((void *)this + 64);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    if (v7)
    {
      v9[0] = **((uint64_t ***)this + 64);
      ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::stop(void)::{lambda(void)#1}>(v9[0], v9);
      xpc_object_t v8 = *((void *)this + 5);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v9[0]) = 0;
        _os_log_debug_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_DEBUG, "#D Hand Detection Stopped!", (uint8_t *)v9, 2u);
      }
    }
  }
  else if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1C5A8C33C(_Unwind_Exception *a1)
{
  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1C5A8C368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void antenna::Service::Internal::stopTxPowerCappingIPhoneTimer_sync(antenna::Service::Internal *this)
{
  uint64_t v2 = *((void *)this + 25);
  if (v2)
  {
    dispatch_source_cancel(v2);
    int v3 = *((void *)this + 25);
    *((void *)this + 25) = 0;
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

uint64_t antenna::Service::Internal::getTxPowerCappingForWatch(antenna::Service::Internal *this)
{
  if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild()
    || (uint64_t result = *((unsigned int *)this + 52), result == 4))
  {
    int v3 = (char *)*((void *)this + 36);
    if (v3)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v5 = (uint64_t **)v3;
          int v6 = *((_DWORD *)v3 + 7);
          if (v6 < 4) {
            break;
          }
          int v3 = (char *)*v5;
          xpc_object_t v4 = v5;
          if (!*v5) {
            goto LABEL_11;
          }
        }
        if (v6 == 3) {
          break;
        }
        int v3 = (char *)v5[1];
        if (!v3)
        {
          xpc_object_t v4 = v5 + 1;
          goto LABEL_11;
        }
      }
    }
    else
    {
      xpc_object_t v4 = (uint64_t **)((char *)this + 288);
      uint64_t v5 = (uint64_t **)((char *)this + 288);
LABEL_11:
      uint64_t v7 = (char *)v5;
      uint64_t v5 = (uint64_t **)operator new(0x28uLL);
      *((_DWORD *)v5 + 7) = 3;
      *((unsigned char *)v5 + 32) = 0;
      *uint64_t v5 = 0;
      v5[1] = 0;
      _DWORD v5[2] = (uint64_t *)v7;
      void *v4 = (uint64_t *)v5;
      uint64_t v8 = **((void **)this + 35);
      uint64_t v9 = (uint64_t *)v5;
      if (v8)
      {
        *((void *)this + 35) = v8;
        uint64_t v9 = *v4;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v9);
      ++*((void *)this + 37);
    }
    uint64_t result = 2;
    if (*((unsigned char *)v5 + 32))
    {
      if (*((unsigned char *)this + 165)) {
        return 3;
      }
      else {
        return 2;
      }
    }
  }
  return result;
}

std::string *antenna::Service::Internal::getTxPowerCappingIPhoneModeString_sync@<X0>(_DWORD *a1@<X1>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  int v3 = *a1 - 1;
  if (v3 < 4) {
    return std::string::__assign_external(a2, **((const std::string::value_type ***)&unk_1E651B650 + v3));
  }
  return result;
}

void sub_1C5A8C518(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t antenna::Service::Internal::getTxPowerCappingAntennaFreeSpaceMode(antenna::Service::Internal *this)
{
  if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild()) {
    return antenna::Service::Internal::isAudioReceiverOutputOnlyActive(this) || *((_DWORD *)this + 63) != 0;
  }
  uint64_t result = *((unsigned int *)this + 53);
  if (result == 255) {
    return antenna::Service::Internal::isAudioReceiverOutputOnlyActive(this) || *((_DWORD *)this + 63) != 0;
  }
  return result;
}

void antenna::Service::Internal::startTxPowerCappingIPhoneTimer_sync(antenna::Service::Internal *this)
{
  uint64_t v2 = *((void *)this + 25);
  if (v2)
  {
    dispatch_source_cancel(v2);
    int v3 = *((void *)this + 25);
    *((void *)this + 25) = 0;
    if (v3) {
      dispatch_release(v3);
    }
  }
  xpc_object_t v4 = dispatch_source_create(MEMORY[0x1E4F14490], 1uLL, 0, *((dispatch_queue_t *)this + 11));
  uint64_t v5 = *((void *)this + 25);
  *((void *)this + 25) = v4;
  if (v5)
  {
    dispatch_release(v5);
    xpc_object_t v4 = *((void *)this + 25);
  }
  dispatch_time_t v6 = dispatch_time(0, 2000000000);
  dispatch_source_set_timer(v4, v6, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v7 || (v8 = *((void *)this + 9), (uint64_t v9 = std::__shared_weak_count::lock(v7)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v10 = v9;
  p_shared_weak_owners = &v9->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v10);
  }
  int v12 = *((void *)this + 25);
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 1174405120;
  handler[2] = ___ZN7antenna7Service8Internal35startTxPowerCappingIPhoneTimer_syncEv_block_invoke;
  handler[3] = &__block_descriptor_tmp_6_6;
  handler[4] = this;
  handler[5] = v8;
  int v14 = v10;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  dispatch_source_set_event_handler(v12, handler);
  dispatch_activate(*((dispatch_object_t *)this + 25));
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  std::__shared_weak_count::__release_weak(v10);
}

void ___ZN7antenna7Service8Internal35startTxPowerCappingIPhoneTimer_syncEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    int v3 = (antenna::Service::Internal *)a1[4];
    xpc_object_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5] && *((unsigned char *)v3 + 216)) {
        antenna::Service::Internal::startTxPowerCappingIPhone_sync(v3);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1C5A8C7E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void antenna::Service::Internal::handleTxPowerCappingIPhoneTimerExpiry_sync(antenna::Service::Internal *this)
{
  if (*((unsigned char *)this + 216)) {
    antenna::Service::Internal::startTxPowerCappingIPhone_sync(this);
  }
}

void antenna::Service::Internal::setTxPowerCappingIPhoneMode_sync(antenna::Service::Internal *this, xpc_object_t *a2)
{
  memset(__s1, 170, sizeof(__s1));
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4D290]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc::dyn_cast_or_default(__s1, (xpc *)&object, (const object *)"", v4);
  xpc_release(object);
  if (__s1[2] >= 0) {
    uint64_t v5 = (uint64_t *)((char *)__s1 + HIBYTE(__s1[2]));
  }
  else {
    uint64_t v5 = (uint64_t *)(__s1[0] + __s1[1]);
  }
  if (__s1[2] >= 0) {
    dispatch_time_t v6 = __s1;
  }
  else {
    dispatch_time_t v6 = (uint64_t *)__s1[0];
  }
  for (; v6 != v5; dispatch_time_t v6 = (uint64_t *)((char *)v6 + 1))
    *(unsigned char *)dispatch_time_t v6 = __toupper(*(char *)v6);
  if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild()
    || (int v7 = *((_DWORD *)this + 52), v7 == 4))
  {
    if (antenna::Service::Internal::isAudioReceiverOutputOnlyActive(this)
      || antenna::Service::Internal::isAudioAnyOutputActive(this) && !*((_DWORD *)this + 63)
      || *((unsigned char *)this + 155) && !antenna::Service::Internal::isAudioAnyOutputActive(this) && !*((_DWORD *)this + 63))
    {
      int v7 = 2;
    }
    else
    {
      int v7 = 3;
    }
  }
  size_t v8 = strlen((const char *)*MEMORY[0x1E4F4CAC8]);
  unint64_t v9 = v8;
  unint64_t v10 = HIBYTE(__s1[2]);
  if ((SHIBYTE(__s1[2]) & 0x80000000) == 0)
  {
    if (v8 != -1)
    {
      int v11 = __s1;
      unint64_t v12 = HIBYTE(__s1[2]);
      goto LABEL_28;
    }
LABEL_96:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v8 == -1) {
    goto LABEL_96;
  }
  int v11 = (uint64_t *)__s1[0];
  unint64_t v12 = __s1[1];
LABEL_28:
  if (v12 >= v9) {
    size_t v13 = v9;
  }
  else {
    size_t v13 = v12;
  }
  if (!memcmp(v11, (const void *)*MEMORY[0x1E4F4CAC8], v13) && v12 == v9)
  {
    int v20 = 1;
    goto LABEL_78;
  }
  uint64_t v15 = (const void *)*MEMORY[0x1E4F4D2C8];
  size_t v16 = strlen((const char *)*MEMORY[0x1E4F4D2C8]);
  size_t v17 = v16;
  if ((v10 & 0x80) != 0)
  {
    if (v16 != -1)
    {
      uint64_t v18 = __s1[1];
      if (__s1[1] >= v16) {
        size_t v21 = v16;
      }
      else {
        size_t v21 = __s1[1];
      }
      if (memcmp((const void *)__s1[0], v15, v21)) {
        goto LABEL_50;
      }
      goto LABEL_48;
    }
LABEL_97:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v16 == -1) {
    goto LABEL_97;
  }
  uint64_t v18 = v10;
  if (v10 >= v16) {
    size_t v19 = v16;
  }
  else {
    size_t v19 = v10;
  }
  if (memcmp(__s1, v15, v19)) {
    goto LABEL_50;
  }
LABEL_48:
  if (v18 == v17)
  {
    int v20 = 4;
    goto LABEL_78;
  }
LABEL_50:
  uint64_t v22 = (const void *)*MEMORY[0x1E4F4CBB8];
  size_t v23 = strlen((const char *)*MEMORY[0x1E4F4CBB8]);
  size_t v24 = v23;
  if ((v10 & 0x80) == 0)
  {
    if (v23 != -1)
    {
      uint64_t v25 = v10;
      if (v10 >= v23) {
        size_t v26 = v23;
      }
      else {
        size_t v26 = v10;
      }
      if (memcmp(__s1, v22, v26)) {
        goto LABEL_64;
      }
      goto LABEL_62;
    }
LABEL_98:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v23 == -1) {
    goto LABEL_98;
  }
  uint64_t v25 = __s1[1];
  if (__s1[1] >= v23) {
    size_t v27 = v23;
  }
  else {
    size_t v27 = __s1[1];
  }
  if (!memcmp((const void *)__s1[0], v22, v27))
  {
LABEL_62:
    if (v25 != v24) {
      goto LABEL_64;
    }
    int v20 = 3;
LABEL_78:
    *((_DWORD *)this + 52) = v20;
    goto LABEL_79;
  }
LABEL_64:
  int v28 = (const void *)*MEMORY[0x1E4F4CBC0];
  size_t v29 = strlen((const char *)*MEMORY[0x1E4F4CBC0]);
  size_t v30 = v29;
  if ((v10 & 0x80) == 0)
  {
    if (v29 != -1)
    {
      if (v10 >= v29) {
        size_t v31 = v29;
      }
      else {
        size_t v31 = v10;
      }
      if (memcmp(__s1, v28, v31)) {
        goto LABEL_79;
      }
      goto LABEL_76;
    }
LABEL_99:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v29 == -1) {
    goto LABEL_99;
  }
  unint64_t v10 = __s1[1];
  if (__s1[1] >= v29) {
    size_t v32 = v29;
  }
  else {
    size_t v32 = __s1[1];
  }
  if (!memcmp((const void *)__s1[0], v28, v32))
  {
LABEL_76:
    if (v10 != v30) {
      goto LABEL_79;
    }
    int v20 = 2;
    goto LABEL_78;
  }
LABEL_79:
  *((unsigned char *)this + 333) = 0;
  if (!*((unsigned char *)this + 332)) {
    goto LABEL_87;
  }
  if ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
  {
    int v33 = *((_DWORD *)this + 52);
    if (v33 != 4)
    {
LABEL_85:
      if (v33 == v7) {
        goto LABEL_87;
      }
      goto LABEL_86;
    }
  }
  if (antenna::Service::Internal::isAudioReceiverOutputOnlyActive(this)
    || antenna::Service::Internal::isAudioAnyOutputActive(this) && !*((_DWORD *)this + 63)
    || *((unsigned char *)this + 155) && !antenna::Service::Internal::isAudioAnyOutputActive(this) && !*((_DWORD *)this + 63))
  {
    int v33 = 2;
    goto LABEL_85;
  }
  if (v7 != 3) {
LABEL_86:
  }
    *((unsigned char *)this + 333) = 1;
LABEL_87:
  if (SHIBYTE(__s1[2]) < 0) {
    operator delete((void *)__s1[0]);
  }
}

void sub_1C5A8CBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void antenna::Service::Internal::copyTxPowerCappingIPhoneMode_sync(antenna::Service::Internal *this@<X0>, xpc_object_t *a2@<X8>)
{
  *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  uint64_t v6 = MEMORY[0x1E4F14590];
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8795EB0](v5) == v6)
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v7 = xpc_null_create();
LABEL_8:
  *a2 = v7;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v8 = *a2;
  if (MEMORY[0x1C8795EB0](*a2) == v6)
  {
    memset(&v25, 0, sizeof(v25));
    int v9 = *((_DWORD *)this + 52) - 1;
    if (v9 < 4) {
      std::string::__assign_external(&v25, **((const std::string::value_type ***)&unk_1E651B650 + v9));
    }
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v10 = &v25;
    }
    else {
      unint64_t v10 = (std::string *)v25.__r_.__value_.__r.__words[0];
    }
    xpc_object_t v11 = xpc_string_create((const char *)v10);
    if (!v11) {
      xpc_object_t v11 = xpc_null_create();
    }
    xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E4F4D290], v11);
    xpc_object_t v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    if (((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
      && *((unsigned char *)this + 152))
    {
      xpc_object_t v13 = xpc_dictionary_create(0, 0, 0);
      if (v13 || (xpc_object_t v13 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C8795EB0](v13) == v6)
        {
          xpc_retain(v13);
          xpc_object_t v14 = v13;
        }
        else
        {
          xpc_object_t v14 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v14 = xpc_null_create();
        xpc_object_t v13 = 0;
      }
      xpc_release(v13);
      if (MEMORY[0x1C8795EB0](v14) == v6)
      {
        xpc_object_t v15 = xpc_string_create((const char *)*MEMORY[0x1E4F4CAC8]);
        if (!v15) {
          xpc_object_t v15 = xpc_null_create();
        }
        xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E4F4CF38], v15);
        xpc_object_t v16 = xpc_null_create();
        xpc_release(v15);
        xpc_release(v16);
        xpc_object_t v17 = xpc_string_create((const char *)*MEMORY[0x1E4F4D2C8]);
        if (!v17) {
          xpc_object_t v17 = xpc_null_create();
        }
        xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E4F4CFB0], v17);
        xpc_object_t v18 = xpc_null_create();
        xpc_release(v17);
        xpc_release(v18);
        xpc_object_t v19 = xpc_string_create((const char *)*MEMORY[0x1E4F4CBB8]);
        if (!v19) {
          xpc_object_t v19 = xpc_null_create();
        }
        xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E4F4CFB8], v19);
        xpc_object_t v20 = xpc_null_create();
        xpc_release(v19);
        xpc_release(v20);
        xpc_object_t v21 = xpc_string_create((const char *)*MEMORY[0x1E4F4CBC0]);
        if (!v21) {
          xpc_object_t v21 = xpc_null_create();
        }
        xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E4F4CFC0], v21);
        xpc_object_t v22 = xpc_null_create();
        xpc_release(v21);
        xpc_release(v22);
        if (v14)
        {
          xpc_retain(v14);
          xpc_object_t v23 = v14;
        }
        else
        {
          xpc_object_t v23 = xpc_null_create();
        }
        xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4D298], v23);
        xpc_object_t v24 = xpc_null_create();
        xpc_release(v23);
        xpc_release(v24);
      }
      xpc_release(v14);
    }
  }
}

void sub_1C5A8D01C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  xpc_release(v16);
  xpc::dict::~dict(v15);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::setTxPowerCappingIPhoneOverrideFreeSpace_sync(antenna::Service::Internal *this, const xpc::object *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild()
    || !*((unsigned char *)this + 154))
  {
    return;
  }
  xpc_object_t v5 = __s1;
  memset(__s1, 170, sizeof(__s1));
  xpc::dyn_cast_or_default(__s1, a2, (const object *)"", v4);
  unsigned __int8 v6 = HIBYTE(__s1[2]);
  if (__s1[2] >= 0) {
    xpc_object_t v7 = (uint64_t *)((char *)__s1 + HIBYTE(__s1[2]));
  }
  else {
    xpc_object_t v7 = (uint64_t *)(__s1[0] + __s1[1]);
  }
  if (__s1[2] < 0) {
    xpc_object_t v5 = (uint64_t *)__s1[0];
  }
  if (v5 != v7)
  {
    do
    {
      *(unsigned char *)xpc_object_t v5 = __toupper(*(char *)v5);
      xpc_object_t v5 = (uint64_t *)((char *)v5 + 1);
    }
    while (v5 != v7);
    unsigned __int8 v6 = HIBYTE(__s1[2]);
  }
  xpc_object_t v8 = *((void *)this + 5);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    size_t v29 = __s1;
    if ((v6 & 0x80u) != 0) {
      size_t v29 = (uint64_t *)__s1[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    int v33 = v29;
    _os_log_debug_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_DEBUG, "#D Overridding Free Space as %s", buf, 0xCu);
    unsigned __int8 v6 = HIBYTE(__s1[2]);
  }
  size_t v9 = strlen((const char *)*MEMORY[0x1E4F4CF98]);
  unint64_t v10 = v9;
  if ((v6 & 0x80) == 0)
  {
    if (v9 != -1)
    {
      unint64_t v11 = v6;
      xpc_object_t v12 = __s1;
      goto LABEL_18;
    }
LABEL_63:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v9 == -1) {
    goto LABEL_63;
  }
  xpc_object_t v12 = (uint64_t *)__s1[0];
  unint64_t v11 = __s1[1];
LABEL_18:
  if (v11 >= v10) {
    size_t v13 = v10;
  }
  else {
    size_t v13 = v11;
  }
  if (!memcmp(v12, (const void *)*MEMORY[0x1E4F4CF98], v13) && v11 == v10)
  {
    int v19 = 0;
LABEL_53:
    *((_DWORD *)this + 53) = v19;
    goto LABEL_54;
  }
  size_t v15 = strlen((const char *)*MEMORY[0x1E4F4D128]);
  unint64_t v16 = v15;
  if ((v6 & 0x80) == 0)
  {
    if (v15 != -1)
    {
      unint64_t v17 = v6;
      xpc_object_t v18 = __s1;
      goto LABEL_31;
    }
LABEL_64:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v15 == -1) {
    goto LABEL_64;
  }
  xpc_object_t v18 = (uint64_t *)__s1[0];
  unint64_t v17 = __s1[1];
LABEL_31:
  if (v17 >= v16) {
    size_t v20 = v16;
  }
  else {
    size_t v20 = v17;
  }
  if (!memcmp(v18, (const void *)*MEMORY[0x1E4F4D128], v20) && v17 == v16)
  {
    int v19 = 1;
    goto LABEL_53;
  }
  xpc_object_t v22 = (const void *)*MEMORY[0x1E4F4D188];
  size_t v23 = strlen((const char *)*MEMORY[0x1E4F4D188]);
  size_t v24 = v23;
  if ((v6 & 0x80) != 0)
  {
    if (v23 != -1)
    {
      uint64_t v25 = __s1[1];
      if (__s1[1] >= v23) {
        size_t v27 = v23;
      }
      else {
        size_t v27 = __s1[1];
      }
      if (memcmp((const void *)__s1[0], v22, v27)) {
        goto LABEL_54;
      }
      goto LABEL_51;
    }
LABEL_65:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v23 == -1) {
    goto LABEL_65;
  }
  uint64_t v25 = v6;
  if (v6 >= v23) {
    size_t v26 = v23;
  }
  else {
    size_t v26 = v6;
  }
  if (memcmp(__s1, v22, v26)) {
    goto LABEL_54;
  }
LABEL_51:
  if (v25 == v24)
  {
    int v19 = 255;
    goto LABEL_53;
  }
LABEL_54:
  int v28 = *((void *)this + 5);
  if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
  {
    if ((v6 & 0x80) == 0) {
      return;
    }
    goto LABEL_56;
  }
  int v30 = *((_DWORD *)this + 53);
  *(_DWORD *)std::string buf = 67109120;
  LODWORD(v33) = v30;
  _os_log_debug_impl(&dword_1C59C6000, v28, OS_LOG_TYPE_DEBUG, "#D Overridden Free Space as 0x%x", buf, 8u);
  if (__s1[2] < 0) {
LABEL_56:
  }
    operator delete((void *)__s1[0]);
}

void sub_1C5A8D3E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void antenna::Service::Internal::getTxPowerCappingIPhoneOverriddenFreeSpaceString_sync(antenna::Service::Internal *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  memset(a2, 170, sizeof(std::string));
  xpc_object_t v4 = (const void *)*MEMORY[0x1E4F4D188];
  size_t v5 = strlen((const char *)*MEMORY[0x1E4F4D188]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    xpc_object_t v7 = operator new(v8 + 1);
    a2->__r_.__value_.__l.__size_ = v6;
    a2->__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
    goto LABEL_8;
  }
  *((unsigned char *)&a2->__r_.__value_.__s + 23) = v5;
  xpc_object_t v7 = a2;
  if (v5) {
LABEL_8:
  }
    memmove(v7, v4, v6);
  *((unsigned char *)v7 + v6) = 0;
  if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild()
    || !*((unsigned char *)this + 154))
  {
    return;
  }
  int v10 = *((_DWORD *)this + 53);
  if (v10)
  {
    if (v10 != 1) {
      goto LABEL_17;
    }
    unint64_t v11 = (const std::string::value_type **)MEMORY[0x1E4F4D128];
  }
  else
  {
    unint64_t v11 = (const std::string::value_type **)MEMORY[0x1E4F4CF98];
  }
  std::string::__assign_external(a2, *v11);
LABEL_17:
  xpc_object_t v12 = *((void *)this + 5);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v13 = a2;
    }
    else {
      size_t v13 = (std::string *)a2->__r_.__value_.__r.__words[0];
    }
    int v14 = 136315138;
    size_t v15 = v13;
    _os_log_debug_impl(&dword_1C59C6000, v12, OS_LOG_TYPE_DEBUG, "#D Overridden Free Space as %s", (uint8_t *)&v14, 0xCu);
  }
}

void sub_1C5A8D5D4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void antenna::Service::Internal::setTxPowerAudioMode_sync(uint64_t **this, xpc_object_t *a2)
{
  object[1] = *(xpc_object_t *)MEMORY[0x1E4F143B8];
  memset(__s1, 170, sizeof(__s1));
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4D0C8]);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  xpc::dyn_cast_or_default(__s1, (xpc *)object, (const object *)"", v4);
  xpc_release(object[0]);
  if (__s1[2] >= 0) {
    size_t v5 = (uint64_t *)((char *)__s1 + HIBYTE(__s1[2]));
  }
  else {
    size_t v5 = (uint64_t *)(__s1[0] + __s1[1]);
  }
  if (__s1[2] >= 0) {
    size_t v6 = __s1;
  }
  else {
    size_t v6 = (uint64_t *)__s1[0];
  }
  for (; v6 != v5; size_t v6 = (uint64_t *)((char *)v6 + 1))
    *(unsigned char *)size_t v6 = __toupper(*(char *)v6);
  if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild()
    || (int v7 = *((_DWORD *)this + 52), v7 == 4))
  {
    if (antenna::Service::Internal::isAudioReceiverOutputOnlyActive((antenna::Service::Internal *)this)
      || antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)this)
      && !*((_DWORD *)this + 63)
      || *((unsigned char *)this + 155)
      && !antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)this)
      && !*((_DWORD *)this + 63))
    {
      int v7 = 2;
    }
    else
    {
      int v7 = 3;
    }
  }
  size_t v8 = strlen((const char *)*MEMORY[0x1E4F4D2C8]);
  unint64_t v9 = v8;
  unint64_t v10 = HIBYTE(__s1[2]);
  if ((SHIBYTE(__s1[2]) & 0x80000000) == 0)
  {
    if (v8 != -1)
    {
      unint64_t v11 = __s1;
      unint64_t v12 = HIBYTE(__s1[2]);
      goto LABEL_28;
    }
LABEL_349:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v8 == -1) {
    goto LABEL_349;
  }
  unint64_t v11 = (uint64_t *)__s1[0];
  unint64_t v12 = __s1[1];
LABEL_28:
  if (v12 >= v9) {
    size_t v13 = v9;
  }
  else {
    size_t v13 = v12;
  }
  if (!memcmp(v11, (const void *)*MEMORY[0x1E4F4D2C8], v13) && v12 == v9)
  {
    *((_DWORD *)this + 82) = 0;
    size_t v20 = this + 39;
    xpc_object_t v21 = this[39];
    xpc_object_t v22 = this + 39;
    size_t v23 = this + 39;
    if (v21)
    {
      while (1)
      {
        while (1)
        {
          size_t v23 = (uint64_t **)v21;
          int v24 = *((_DWORD *)v21 + 7);
          if (v24 < 1) {
            break;
          }
          xpc_object_t v21 = *v23;
          xpc_object_t v22 = v23;
          if (!*v23) {
            goto LABEL_49;
          }
        }
        if ((v24 & 0x80000000) == 0) {
          break;
        }
        xpc_object_t v21 = v23[1];
        if (!v21)
        {
          xpc_object_t v22 = v23 + 1;
          goto LABEL_49;
        }
      }
      char v28 = *((unsigned char *)v23 + 32);
      size_t v29 = this + 36;
      int v30 = this[36];
      size_t v31 = this + 36;
      size_t v32 = this + 36;
      if (v30) {
        goto LABEL_104;
      }
    }
    else
    {
LABEL_49:
      uint64_t v25 = operator new(0x28uLL);
      v25[7] = 0;
      *((unsigned char *)v25 + 32) = 0;
      *(void *)uint64_t v25 = 0;
      *((void *)v25 + 1) = 0;
      *((void *)v25 + 2) = v23;
      *xpc_object_t v22 = (uint64_t *)v25;
      size_t v26 = (uint64_t *)*this[38];
      size_t v27 = (uint64_t *)v25;
      if (v26)
      {
        this[38] = v26;
        size_t v27 = *v22;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[39], v27);
      this[40] = (uint64_t *)((char *)this[40] + 1);
      char v28 = *((unsigned char *)v25 + 32);
      size_t v29 = this + 36;
      int v30 = this[36];
      size_t v31 = this + 36;
      size_t v32 = this + 36;
      if (v30)
      {
        while (1)
        {
LABEL_104:
          while (1)
          {
            size_t v32 = (uint64_t **)v30;
            int v64 = *((_DWORD *)v30 + 7);
            if (v64 < 1) {
              break;
            }
            int v30 = *v32;
            size_t v31 = v32;
            if (!*v32) {
              goto LABEL_108;
            }
          }
          if ((v64 & 0x80000000) == 0) {
            break;
          }
          int v30 = v32[1];
          if (!v30)
          {
            size_t v31 = v32 + 1;
            goto LABEL_108;
          }
        }
        *((unsigned char *)v32 + 32) = v28;
        int v68 = *v20;
        uint64_t v69 = this + 39;
        uint64_t v70 = this + 39;
        if (*v20) {
          goto LABEL_115;
        }
        goto LABEL_119;
      }
    }
LABEL_108:
    unint64_t v65 = operator new(0x28uLL);
    v65[7] = 0;
    *((unsigned char *)v65 + 32) = 0;
    *(void *)unint64_t v65 = 0;
    *((void *)v65 + 1) = 0;
    *((void *)v65 + 2) = v32;
    *size_t v31 = (uint64_t *)v65;
    long long v66 = (uint64_t *)*this[35];
    std::string v67 = (uint64_t *)v65;
    if (v66)
    {
      this[35] = v66;
      std::string v67 = *v31;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v67);
    this[37] = (uint64_t *)((char *)this[37] + 1);
    *((unsigned char *)v65 + 32) = v28;
    int v68 = *v20;
    uint64_t v69 = this + 39;
    uint64_t v70 = this + 39;
    if (*v20)
    {
      while (1)
      {
LABEL_115:
        while (1)
        {
          uint64_t v70 = (uint64_t **)v68;
          int v71 = *((_DWORD *)v68 + 7);
          if (v71 < 2) {
            break;
          }
          int v68 = *v70;
          uint64_t v69 = v70;
          if (!*v70) {
            goto LABEL_119;
          }
        }
        if (v71 == 1) {
          break;
        }
        int v68 = v70[1];
        if (!v68)
        {
          uint64_t v69 = v70 + 1;
          goto LABEL_119;
        }
      }
      char v75 = *((unsigned char *)v70 + 32);
      uint64_t v76 = *v29;
      unsigned int v77 = v29;
      char v78 = v29;
      if (*v29) {
        goto LABEL_126;
      }
      goto LABEL_130;
    }
LABEL_119:
    std::string v72 = operator new(0x28uLL);
    v72[7] = 1;
    *((unsigned char *)v72 + 32) = 0;
    *(void *)std::string v72 = 0;
    *((void *)v72 + 1) = 0;
    *((void *)v72 + 2) = v70;
    char *v69 = (uint64_t *)v72;
    size_t v73 = (uint64_t *)*this[38];
    int v74 = (uint64_t *)v72;
    if (v73)
    {
      this[38] = v73;
      int v74 = *v69;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[39], v74);
    this[40] = (uint64_t *)((char *)this[40] + 1);
    char v75 = *((unsigned char *)v72 + 32);
    uint64_t v76 = *v29;
    unsigned int v77 = v29;
    char v78 = v29;
    if (*v29)
    {
      while (1)
      {
LABEL_126:
        while (1)
        {
          char v78 = (uint64_t **)v76;
          int v79 = *((_DWORD *)v76 + 7);
          if (v79 < 2) {
            break;
          }
          uint64_t v76 = *v78;
          unsigned int v77 = v78;
          if (!*v78) {
            goto LABEL_130;
          }
        }
        if (v79 == 1) {
          break;
        }
        uint64_t v76 = v78[1];
        if (!v76)
        {
          unsigned int v77 = v78 + 1;
          goto LABEL_130;
        }
      }
      *((unsigned char *)v78 + 32) = v75;
      uint64_t v83 = *v20;
      uint64_t v84 = this + 39;
      if (*v20) {
        goto LABEL_137;
      }
      goto LABEL_141;
    }
LABEL_130:
    int v80 = operator new(0x28uLL);
    v80[7] = 1;
    *((unsigned char *)v80 + 32) = 0;
    *(void *)int v80 = 0;
    *((void *)v80 + 1) = 0;
    *((void *)v80 + 2) = v78;
    *unsigned int v77 = (uint64_t *)v80;
    int v81 = (uint64_t *)*this[35];
    unsigned int v82 = (uint64_t *)v80;
    if (v81)
    {
      this[35] = v81;
      unsigned int v82 = *v77;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v82);
    this[37] = (uint64_t *)((char *)this[37] + 1);
    *((unsigned char *)v80 + 32) = v75;
    uint64_t v83 = *v20;
    uint64_t v84 = this + 39;
    if (*v20)
    {
      while (1)
      {
LABEL_137:
        while (1)
        {
          uint64_t v84 = (uint64_t **)v83;
          int v85 = *((_DWORD *)v83 + 7);
          if (v85 < 4) {
            break;
          }
          uint64_t v83 = *v84;
          size_t v20 = v84;
          if (!*v84) {
            goto LABEL_141;
          }
        }
        if (v85 == 3) {
          break;
        }
        uint64_t v83 = v84[1];
        if (!v83)
        {
          size_t v20 = v84 + 1;
          goto LABEL_141;
        }
      }
      char v89 = *((unsigned char *)v84 + 32);
      uint64_t v90 = (char *)*v29;
      char v91 = (uint64_t *)v29;
      if (*v29) {
        goto LABEL_148;
      }
      goto LABEL_152;
    }
LABEL_141:
    uint64_t v86 = operator new(0x28uLL);
    *((_DWORD *)v86 + 7) = 3;
    *((unsigned char *)v86 + 32) = 0;
    *(void *)uint64_t v86 = 0;
    *((void *)v86 + 1) = 0;
    *((void *)v86 + 2) = v84;
    *size_t v20 = (uint64_t *)v86;
    long long v87 = (uint64_t *)*this[38];
    BOOL v88 = (uint64_t *)v86;
    if (v87)
    {
      this[38] = v87;
      BOOL v88 = *v20;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[39], v88);
    this[40] = (uint64_t *)((char *)this[40] + 1);
    char v89 = *((unsigned char *)v86 + 32);
    uint64_t v90 = (char *)*v29;
    char v91 = (uint64_t *)v29;
    if (*v29)
    {
      while (1)
      {
LABEL_148:
        while (1)
        {
          char v91 = (uint64_t *)v90;
          int v92 = *((_DWORD *)v90 + 7);
          if (v92 < 4) {
            break;
          }
          uint64_t v90 = (char *)*v91;
          size_t v29 = (uint64_t **)v91;
          if (!*v91) {
            goto LABEL_152;
          }
        }
        if (v92 == 3) {
          goto LABEL_211;
        }
        uint64_t v90 = (char *)v91[1];
        if (!v90)
        {
          size_t v29 = (uint64_t **)(v91 + 1);
          break;
        }
      }
    }
LABEL_152:
    uint64_t v93 = (uint64_t *)operator new(0x28uLL);
    std::string v94 = v93;
    *((_DWORD *)v93 + 7) = 3;
    *((unsigned char *)v93 + 32) = 0;
    *uint64_t v93 = 0;
    v93[1] = 0;
    v93[2] = (uint64_t)v91;
    *size_t v29 = v93;
    long long v95 = (uint64_t *)*this[35];
    if (!v95)
    {
      char v91 = v93;
LABEL_210:
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v94);
      this[37] = (uint64_t *)((char *)this[37] + 1);
LABEL_211:
      *((unsigned char *)v91 + 32) = v89;
      goto LABEL_212;
    }
    goto LABEL_208;
  }
  size_t v15 = (const void *)*MEMORY[0x1E4F4CAC0];
  size_t v16 = strlen((const char *)*MEMORY[0x1E4F4CAC0]);
  size_t v17 = v16;
  if ((v10 & 0x80) != 0)
  {
    if (v16 != -1)
    {
      uint64_t v18 = __s1[1];
      if (__s1[1] >= v16) {
        size_t v33 = v16;
      }
      else {
        size_t v33 = __s1[1];
      }
      if (memcmp((const void *)__s1[0], v15, v33)) {
        goto LABEL_70;
      }
      goto LABEL_58;
    }
LABEL_350:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v16 == -1) {
    goto LABEL_350;
  }
  uint64_t v18 = v10;
  if (v10 >= v16) {
    size_t v19 = v16;
  }
  else {
    size_t v19 = v10;
  }
  if (memcmp(__s1, v15, v19)) {
    goto LABEL_70;
  }
LABEL_58:
  if (v18 == v17)
  {
    *((_DWORD *)this + 82) = 1;
    size_t v29 = this + 36;
    uint64_t v34 = this[36];
    xpc_object_t v35 = this + 36;
    size_t v36 = this + 36;
    if (v34)
    {
      uint64_t v37 = this[36];
      do
      {
        while (1)
        {
          size_t v36 = (uint64_t **)v37;
          int v38 = *((_DWORD *)v37 + 7);
          if (v38 < 1) {
            break;
          }
          uint64_t v37 = *v36;
          xpc_object_t v35 = v36;
          if (!*v36) {
            goto LABEL_66;
          }
        }
        if ((v38 & 0x80000000) == 0)
        {
          *((unsigned char *)v36 + 32) = 1;
          goto LABEL_173;
        }
        uint64_t v37 = v36[1];
      }
      while (v37);
      xpc_object_t v35 = v36 + 1;
    }
LABEL_66:
    uint64_t v39 = operator new(0x28uLL);
    v39[7] = 0;
    *((unsigned char *)v39 + 32) = 0;
    *(void *)uint64_t v39 = 0;
    *((void *)v39 + 1) = 0;
    *((void *)v39 + 2) = v36;
    *xpc_object_t v35 = (uint64_t *)v39;
    uint64_t v40 = (uint64_t *)*this[35];
    xpc_object_t v41 = (uint64_t *)v39;
    if (v40)
    {
      this[35] = v40;
      xpc_object_t v41 = *v35;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v41);
    uint64_t v34 = this[36];
    this[37] = (uint64_t *)((char *)this[37] + 1);
    *((unsigned char *)v39 + 32) = 1;
    xpc_object_t v42 = this + 36;
    xpc_object_t v43 = this + 36;
    if (v34)
    {
      while (1)
      {
LABEL_173:
        while (1)
        {
          xpc_object_t v43 = (uint64_t **)v34;
          int v107 = *((_DWORD *)v34 + 7);
          if (v107 < 2) {
            break;
          }
          uint64_t v34 = *v43;
          xpc_object_t v42 = v43;
          if (!*v43) {
            goto LABEL_177;
          }
        }
        if (v107 == 1) {
          break;
        }
        uint64_t v34 = v43[1];
        if (!v34)
        {
          xpc_object_t v42 = v43 + 1;
          goto LABEL_177;
        }
      }
      *((unsigned char *)v43 + 32) = 0;
      long long v111 = (char *)*v29;
      char v91 = (uint64_t *)(this + 36);
      if (*v29) {
        goto LABEL_184;
      }
      goto LABEL_206;
    }
LABEL_177:
    int v108 = operator new(0x28uLL);
    v108[7] = 1;
    *((unsigned char *)v108 + 32) = 0;
    *(void *)int v108 = 0;
    *((void *)v108 + 1) = 0;
    *((void *)v108 + 2) = v43;
    *xpc_object_t v42 = (uint64_t *)v108;
    int v109 = (uint64_t *)*this[35];
    std::string v110 = (uint64_t *)v108;
    if (v109)
    {
      this[35] = v109;
      std::string v110 = *v42;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v110);
    this[37] = (uint64_t *)((char *)this[37] + 1);
    *((unsigned char *)v108 + 32) = 0;
    long long v111 = (char *)*v29;
    char v91 = (uint64_t *)(this + 36);
    if (!*v29) {
      goto LABEL_206;
    }
    while (1)
    {
LABEL_184:
      while (1)
      {
        char v91 = (uint64_t *)v111;
        int v112 = *((_DWORD *)v111 + 7);
        if (v112 < 4) {
          break;
        }
        long long v111 = (char *)*v91;
        size_t v29 = (uint64_t **)v91;
        if (!*v91) {
          goto LABEL_206;
        }
      }
      if (v112 == 3) {
        goto LABEL_291;
      }
      long long v111 = (char *)v91[1];
      if (!v111)
      {
        size_t v29 = (uint64_t **)(v91 + 1);
        goto LABEL_206;
      }
    }
  }
LABEL_70:
  int v44 = (const void *)*MEMORY[0x1E4F4C828];
  size_t v45 = strlen((const char *)*MEMORY[0x1E4F4C828]);
  size_t v46 = v45;
  if ((v10 & 0x80) == 0)
  {
    if (v45 != -1)
    {
      uint64_t v47 = v10;
      if (v10 >= v45) {
        size_t v48 = v45;
      }
      else {
        size_t v48 = v10;
      }
      if (memcmp(__s1, v44, v48)) {
        goto LABEL_94;
      }
      goto LABEL_82;
    }
LABEL_351:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v45 == -1) {
    goto LABEL_351;
  }
  uint64_t v47 = __s1[1];
  if (__s1[1] >= v45) {
    size_t v49 = v45;
  }
  else {
    size_t v49 = __s1[1];
  }
  if (!memcmp((const void *)__s1[0], v44, v49))
  {
LABEL_82:
    if (v47 != v46) {
      goto LABEL_94;
    }
    *((_DWORD *)this + 82) = 2;
    size_t v29 = this + 36;
    CFDictionaryRef v50 = this[36];
    std::string::size_type v51 = this + 36;
    id v52 = this + 36;
    if (v50)
    {
      int v53 = this[36];
      do
      {
        while (1)
        {
          id v52 = (uint64_t **)v53;
          int v54 = *((_DWORD *)v53 + 7);
          if (v54 < 1) {
            break;
          }
          int v53 = *v52;
          std::string::size_type v51 = v52;
          if (!*v52) {
            goto LABEL_90;
          }
        }
        if ((v54 & 0x80000000) == 0)
        {
          *((unsigned char *)v52 + 32) = 0;
          goto LABEL_191;
        }
        int v53 = v52[1];
      }
      while (v53);
      std::string::size_type v51 = v52 + 1;
    }
LABEL_90:
    uint64_t v55 = operator new(0x28uLL);
    v55[7] = 0;
    *((unsigned char *)v55 + 32) = 0;
    *(void *)uint64_t v55 = 0;
    *((void *)v55 + 1) = 0;
    *((void *)v55 + 2) = v52;
    *std::string::size_type v51 = (uint64_t *)v55;
    std::string v56 = (uint64_t *)*this[35];
    std::string v57 = (uint64_t *)v55;
    if (v56)
    {
      this[35] = v56;
      std::string v57 = *v51;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v57);
    CFDictionaryRef v50 = this[36];
    this[37] = (uint64_t *)((char *)this[37] + 1);
    *((unsigned char *)v55 + 32) = 0;
    std::string v58 = this + 36;
    long long v59 = this + 36;
    if (v50)
    {
      while (1)
      {
LABEL_191:
        while (1)
        {
          long long v59 = (uint64_t **)v50;
          int v113 = *((_DWORD *)v50 + 7);
          if (v113 < 2) {
            break;
          }
          CFDictionaryRef v50 = *v59;
          std::string v58 = v59;
          if (!*v59) {
            goto LABEL_195;
          }
        }
        if (v113 == 1) {
          break;
        }
        CFDictionaryRef v50 = v59[1];
        if (!v50)
        {
          std::string v58 = v59 + 1;
          goto LABEL_195;
        }
      }
      *((unsigned char *)v59 + 32) = 1;
      uint64_t v117 = (char *)*v29;
      char v91 = (uint64_t *)(this + 36);
      if (*v29) {
        goto LABEL_202;
      }
      goto LABEL_206;
    }
LABEL_195:
    uint64_t v114 = operator new(0x28uLL);
    v114[7] = 1;
    *((unsigned char *)v114 + 32) = 0;
    *(void *)uint64_t v114 = 0;
    *((void *)v114 + 1) = 0;
    *((void *)v114 + 2) = v59;
    *std::string v58 = (uint64_t *)v114;
    char v115 = (uint64_t *)*this[35];
    uint64_t v116 = (uint64_t *)v114;
    if (v115)
    {
      this[35] = v115;
      uint64_t v116 = *v58;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v116);
    this[37] = (uint64_t *)((char *)this[37] + 1);
    *((unsigned char *)v114 + 32) = 1;
    uint64_t v117 = (char *)*v29;
    char v91 = (uint64_t *)(this + 36);
    if (!*v29)
    {
LABEL_206:
      std::string v94 = (uint64_t *)operator new(0x28uLL);
      *((_DWORD *)v94 + 7) = 3;
      *((unsigned char *)v94 + 32) = 0;
      *std::string v94 = 0;
      v94[1] = 0;
      v94[2] = (uint64_t)v91;
      *size_t v29 = v94;
      long long v95 = (uint64_t *)*this[35];
      if (!v95)
      {
        char v89 = 0;
        char v91 = v94;
        goto LABEL_210;
      }
      char v89 = 0;
LABEL_208:
      this[35] = v95;
LABEL_209:
      char v91 = v94;
      std::string v94 = *v29;
      goto LABEL_210;
    }
    while (1)
    {
LABEL_202:
      while (1)
      {
        char v91 = (uint64_t *)v117;
        int v118 = *((_DWORD *)v117 + 7);
        if (v118 < 4) {
          break;
        }
        uint64_t v117 = (char *)*v91;
        size_t v29 = (uint64_t **)v91;
        if (!*v91) {
          goto LABEL_206;
        }
      }
      if (v118 == 3) {
        break;
      }
      uint64_t v117 = (char *)v91[1];
      if (!v117)
      {
        size_t v29 = (uint64_t **)(v91 + 1);
        goto LABEL_206;
      }
    }
LABEL_291:
    char v89 = 0;
    goto LABEL_211;
  }
LABEL_94:
  int v60 = (const void *)*MEMORY[0x1E4F4C600];
  size_t v61 = strlen((const char *)*MEMORY[0x1E4F4C600]);
  size_t v62 = v61;
  if ((v10 & 0x80) == 0)
  {
    if (v61 != -1)
    {
      if (v10 >= v61) {
        size_t v63 = v61;
      }
      else {
        size_t v63 = v10;
      }
      if (memcmp(__s1, v60, v63)) {
        goto LABEL_212;
      }
      goto LABEL_159;
    }
LABEL_352:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v61 == -1) {
    goto LABEL_352;
  }
  unint64_t v10 = __s1[1];
  if (__s1[1] >= v61) {
    size_t v96 = v61;
  }
  else {
    size_t v96 = __s1[1];
  }
  if (!memcmp((const void *)__s1[0], v60, v96))
  {
LABEL_159:
    if (v10 != v62) {
      goto LABEL_212;
    }
    *((_DWORD *)this + 82) = 3;
    size_t v29 = this + 36;
    uint64_t v97 = this[36];
    uint64_t v98 = this + 36;
    char v99 = this + 36;
    if (v97)
    {
      xpc_object_t v100 = this[36];
      do
      {
        while (1)
        {
          char v99 = (uint64_t **)v100;
          int v101 = *((_DWORD *)v100 + 7);
          if (v101 < 1) {
            break;
          }
          xpc_object_t v100 = *v99;
          uint64_t v98 = v99;
          if (!*v99) {
            goto LABEL_167;
          }
        }
        if ((v101 & 0x80000000) == 0)
        {
          *((unsigned char *)v99 + 32) = 0;
          goto LABEL_327;
        }
        xpc_object_t v100 = v99[1];
      }
      while (v100);
      uint64_t v98 = v99 + 1;
    }
LABEL_167:
    uint64_t v102 = operator new(0x28uLL);
    v102[7] = 0;
    *((unsigned char *)v102 + 32) = 0;
    *(void *)uint64_t v102 = 0;
    *((void *)v102 + 1) = 0;
    *((void *)v102 + 2) = v99;
    std::__shared_weak_count *v98 = (uint64_t *)v102;
    long long v103 = (uint64_t *)*this[35];
    xpc_object_t v104 = (uint64_t *)v102;
    if (v103)
    {
      this[35] = v103;
      xpc_object_t v104 = *v98;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v104);
    uint64_t v97 = this[36];
    this[37] = (uint64_t *)((char *)this[37] + 1);
    *((unsigned char *)v102 + 32) = 0;
    __n128 v105 = this + 36;
    uint64_t v106 = this + 36;
    if (v97)
    {
      while (1)
      {
LABEL_327:
        while (1)
        {
          uint64_t v106 = (uint64_t **)v97;
          int v180 = *((_DWORD *)v97 + 7);
          if (v180 < 2) {
            break;
          }
          uint64_t v97 = *v106;
          __n128 v105 = v106;
          if (!*v106) {
            goto LABEL_331;
          }
        }
        if (v180 == 1) {
          break;
        }
        uint64_t v97 = v106[1];
        if (!v97)
        {
          __n128 v105 = v106 + 1;
          goto LABEL_331;
        }
      }
      *((unsigned char *)v106 + 32) = 0;
      v184 = (char *)*v29;
      char v91 = (uint64_t *)(this + 36);
      if (*v29) {
        goto LABEL_338;
      }
    }
    else
    {
LABEL_331:
      xpc_object_t v181 = operator new(0x28uLL);
      v181[7] = 1;
      *((unsigned char *)v181 + 32) = 0;
      *(void *)xpc_object_t v181 = 0;
      *((void *)v181 + 1) = 0;
      *((void *)v181 + 2) = v106;
      *__n128 v105 = (uint64_t *)v181;
      xpc_object_t v182 = (uint64_t *)*this[35];
      v183 = (uint64_t *)v181;
      if (v182)
      {
        this[35] = v182;
        v183 = *v105;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v183);
      this[37] = (uint64_t *)((char *)this[37] + 1);
      *((unsigned char *)v181 + 32) = 0;
      v184 = (char *)*v29;
      char v91 = (uint64_t *)(this + 36);
      if (*v29)
      {
        while (1)
        {
LABEL_338:
          while (1)
          {
            char v91 = (uint64_t *)v184;
            int v185 = *((_DWORD *)v184 + 7);
            if (v185 < 4) {
              break;
            }
            v184 = (char *)*v91;
            size_t v29 = (uint64_t **)v91;
            if (!*v91) {
              goto LABEL_342;
            }
          }
          if (v185 == 3) {
            break;
          }
          v184 = (char *)v91[1];
          if (!v184)
          {
            size_t v29 = (uint64_t **)(v91 + 1);
            goto LABEL_342;
          }
        }
        char v89 = 1;
        goto LABEL_211;
      }
    }
LABEL_342:
    xpc_object_t v186 = (uint64_t *)operator new(0x28uLL);
    std::string v94 = v186;
    *((_DWORD *)v186 + 7) = 3;
    *((unsigned char *)v186 + 32) = 0;
    *xpc_object_t v186 = 0;
    v186[1] = 0;
    v186[2] = (uint64_t)v91;
    *size_t v29 = v186;
    v187 = (uint64_t *)*this[35];
    if (!v187)
    {
      char v89 = 1;
      char v91 = v186;
      goto LABEL_210;
    }
    this[35] = v187;
    char v89 = 1;
    goto LABEL_209;
  }
LABEL_212:
  long long v119 = this[5];
  if (os_log_type_enabled(v119, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v156 = this[36];
    if (v156)
    {
      while (1)
      {
        while (1)
        {
          long long v158 = (uint64_t **)v156;
          int v159 = *((_DWORD *)v156 + 7);
          if (v159 < 1) {
            break;
          }
          uint64_t v156 = *v158;
          xpc_object_t v157 = v158;
          if (!*v158) {
            goto LABEL_299;
          }
        }
        if ((v159 & 0x80000000) == 0) {
          break;
        }
        uint64_t v156 = v158[1];
        if (!v156)
        {
          xpc_object_t v157 = v158 + 1;
          goto LABEL_299;
        }
      }
      CFAllocatorRef v160 = v158;
    }
    else
    {
      xpc_object_t v157 = this + 36;
      long long v158 = this + 36;
LABEL_299:
      CFAllocatorRef v160 = operator new(0x28uLL);
      v160[7] = 0;
      *((unsigned char *)v160 + 32) = 0;
      *(void *)CFAllocatorRef v160 = 0;
      *((void *)v160 + 1) = 0;
      *((void *)v160 + 2) = v158;
      *xpc_object_t v157 = (uint64_t *)v160;
      long long v161 = (uint64_t *)*this[35];
      uint64_t v162 = (uint64_t *)v160;
      if (v161)
      {
        this[35] = v161;
        uint64_t v162 = *v157;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v162);
      this[37] = (uint64_t *)((char *)this[37] + 1);
    }
    int v163 = *((unsigned __int8 *)v160 + 32);
    LODWORD(object[0]) = 67109120;
    HIDWORD(object[0]) = v163;
    _os_log_debug_impl(&dword_1C59C6000, v119, OS_LOG_TYPE_DEBUG, "#D Audio Receiver: %d", (uint8_t *)object, 8u);
    long long v119 = this[5];
    if (!os_log_type_enabled(v119, OS_LOG_TYPE_DEBUG))
    {
LABEL_214:
      if (!os_log_type_enabled(v119, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_215;
      }
      goto LABEL_314;
    }
  }
  else if (!os_log_type_enabled(v119, OS_LOG_TYPE_DEBUG))
  {
    goto LABEL_214;
  }
  long long v164 = this[36];
  if (v164)
  {
    while (1)
    {
      while (1)
      {
        v166 = (uint64_t **)v164;
        int v167 = *((_DWORD *)v164 + 7);
        if (v167 < 2) {
          break;
        }
        long long v164 = *v166;
        uint64_t v165 = v166;
        if (!*v166) {
          goto LABEL_310;
        }
      }
      if (v167 == 1) {
        break;
      }
      long long v164 = v166[1];
      if (!v164)
      {
        uint64_t v165 = v166 + 1;
        goto LABEL_310;
      }
    }
    xpc_object_t v168 = v166;
  }
  else
  {
    uint64_t v165 = this + 36;
    v166 = this + 36;
LABEL_310:
    xpc_object_t v168 = operator new(0x28uLL);
    v168[7] = 1;
    *((unsigned char *)v168 + 32) = 0;
    *(void *)xpc_object_t v168 = 0;
    *((void *)v168 + 1) = 0;
    *((void *)v168 + 2) = v166;
    std::__shared_weak_count *v165 = (uint64_t *)v168;
    long long v169 = (uint64_t *)*this[35];
    long long v170 = (uint64_t *)v168;
    if (v169)
    {
      this[35] = v169;
      long long v170 = *v165;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v170);
    this[37] = (uint64_t *)((char *)this[37] + 1);
  }
  int v171 = *((unsigned __int8 *)v168 + 32);
  LODWORD(object[0]) = 67109120;
  HIDWORD(object[0]) = v171;
  _os_log_debug_impl(&dword_1C59C6000, v119, OS_LOG_TYPE_DEBUG, "#D Audio Other: %d", (uint8_t *)object, 8u);
  long long v119 = this[5];
  if (os_log_type_enabled(v119, OS_LOG_TYPE_DEBUG))
  {
LABEL_314:
    xpc_object_t v172 = this[36];
    if (v172)
    {
      while (1)
      {
        while (1)
        {
          xpc_object_t v174 = (uint64_t **)v172;
          int v175 = *((_DWORD *)v172 + 7);
          if (v175 < 4) {
            break;
          }
          xpc_object_t v172 = *v174;
          CFTypeID v173 = v174;
          if (!*v174) {
            goto LABEL_321;
          }
        }
        if (v175 == 3) {
          break;
        }
        xpc_object_t v172 = v174[1];
        if (!v172)
        {
          CFTypeID v173 = v174 + 1;
          goto LABEL_321;
        }
      }
      v176 = v174;
    }
    else
    {
      CFTypeID v173 = this + 36;
      xpc_object_t v174 = this + 36;
LABEL_321:
      v176 = operator new(0x28uLL);
      v176[7] = 3;
      *((unsigned char *)v176 + 32) = 0;
      *(void *)v176 = 0;
      *((void *)v176 + 1) = 0;
      *((void *)v176 + 2) = v174;
      *CFTypeID v173 = (uint64_t *)v176;
      xpc_object_t v177 = (uint64_t *)*this[35];
      xpc_object_t v178 = (uint64_t *)v176;
      if (v177)
      {
        this[35] = v177;
        xpc_object_t v178 = *v173;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v178);
      this[37] = (uint64_t *)((char *)this[37] + 1);
    }
    int v179 = *((unsigned __int8 *)v176 + 32);
    LODWORD(object[0]) = 67109120;
    HIDWORD(object[0]) = v179;
    _os_log_debug_impl(&dword_1C59C6000, v119, OS_LOG_TYPE_DEBUG, "#D Audio Speaker: %d", (uint8_t *)object, 8u);
  }
LABEL_215:
  xpc_object_t v120 = xpc_dictionary_create(0, 0, 0);
  uint64_t v121 = MEMORY[0x1E4F14590];
  if (v120 || (xpc_object_t v120 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v120) == v121)
    {
      xpc_retain(v120);
      xpc_object_t v122 = v120;
    }
    else
    {
      xpc_object_t v122 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v122 = xpc_null_create();
    xpc_object_t v120 = 0;
  }
  xpc_release(v120);
  xpc_object_t v123 = xpc_dictionary_create(0, 0, 0);
  if (v123 || (xpc_object_t v123 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v123) == v121)
    {
      xpc_retain(v123);
      xpc_object_t v124 = v123;
    }
    else
    {
      xpc_object_t v124 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v124 = xpc_null_create();
    xpc_object_t v123 = 0;
  }
  xpc_release(v123);
  int v125 = this + 36;
  uint64_t v126 = this[36];
  uint64_t v127 = this + 36;
  dispatch_object_t v128 = this + 36;
  if (v126)
  {
    while (1)
    {
      while (1)
      {
        dispatch_object_t v128 = (uint64_t **)v126;
        int v129 = *((_DWORD *)v126 + 7);
        if (v129 < 1) {
          break;
        }
        uint64_t v126 = *v128;
        uint64_t v127 = v128;
        if (!*v128) {
          goto LABEL_234;
        }
      }
      if ((v129 & 0x80000000) == 0) {
        break;
      }
      uint64_t v126 = v128[1];
      if (!v126)
      {
        uint64_t v127 = v128 + 1;
        goto LABEL_234;
      }
    }
    unint64_t v130 = v128;
  }
  else
  {
LABEL_234:
    unint64_t v130 = operator new(0x28uLL);
    *((_DWORD *)v130 + 7) = 0;
    *((unsigned char *)v130 + 32) = 0;
    *(void *)unint64_t v130 = 0;
    *((void *)v130 + 1) = 0;
    *((void *)v130 + 2) = v128;
    *uint64_t v127 = (uint64_t *)v130;
    uint64_t v131 = (uint64_t *)*this[35];
    uint64_t v132 = (uint64_t *)v130;
    if (v131)
    {
      this[35] = v131;
      uint64_t v132 = *v127;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v132);
    this[37] = (uint64_t *)((char *)this[37] + 1);
  }
  xpc_object_t v133 = xpc_BOOL_create(*((unsigned char *)v130 + 32));
  if (!v133) {
    xpc_object_t v133 = xpc_null_create();
  }
  xpc_dictionary_set_value(v124, (const char *)*MEMORY[0x1E4F4CA28], v133);
  xpc_object_t v134 = xpc_null_create();
  xpc_release(v133);
  xpc_release(v134);
  uint64_t v135 = *v125;
  unint64_t v136 = this + 36;
  long long v137 = this + 36;
  if (*v125)
  {
    while (1)
    {
      while (1)
      {
        long long v137 = (uint64_t **)v135;
        int v138 = *((_DWORD *)v135 + 7);
        if (v138 < 2) {
          break;
        }
        uint64_t v135 = *v137;
        unint64_t v136 = v137;
        if (!*v137) {
          goto LABEL_246;
        }
      }
      if (v138 == 1) {
        break;
      }
      uint64_t v135 = v137[1];
      if (!v135)
      {
        unint64_t v136 = v137 + 1;
        goto LABEL_246;
      }
    }
    int v139 = v137;
  }
  else
  {
LABEL_246:
    int v139 = operator new(0x28uLL);
    *((_DWORD *)v139 + 7) = 1;
    *((unsigned char *)v139 + 32) = 0;
    *(void *)int v139 = 0;
    *((void *)v139 + 1) = 0;
    *((void *)v139 + 2) = v137;
    *unint64_t v136 = (uint64_t *)v139;
    dispatch_object_t v140 = (uint64_t *)*this[35];
    uint64_t v141 = (uint64_t *)v139;
    if (v140)
    {
      this[35] = v140;
      uint64_t v141 = *v136;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v141);
    this[37] = (uint64_t *)((char *)this[37] + 1);
  }
  xpc_object_t v142 = xpc_BOOL_create(*((unsigned char *)v139 + 32));
  if (!v142) {
    xpc_object_t v142 = xpc_null_create();
  }
  xpc_dictionary_set_value(v124, (const char *)*MEMORY[0x1E4F4C680], v142);
  xpc_object_t v143 = xpc_null_create();
  xpc_release(v142);
  xpc_release(v143);
  uint64_t v144 = *v125;
  unint64_t v145 = this + 36;
  if (*v125)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v145 = (uint64_t **)v144;
        int v146 = *((_DWORD *)v144 + 7);
        if (v146 < 4) {
          break;
        }
        uint64_t v144 = *v145;
        int v125 = v145;
        if (!*v145) {
          goto LABEL_259;
        }
      }
      if (v146 == 3) {
        break;
      }
      uint64_t v144 = v145[1];
      if (!v144)
      {
        int v125 = v145 + 1;
        goto LABEL_259;
      }
    }
    uint64_t v147 = v145;
  }
  else
  {
LABEL_259:
    uint64_t v147 = operator new(0x28uLL);
    *((_DWORD *)v147 + 7) = 3;
    *((unsigned char *)v147 + 32) = 0;
    *(void *)uint64_t v147 = 0;
    *((void *)v147 + 1) = 0;
    *((void *)v147 + 2) = v145;
    *int v125 = (uint64_t *)v147;
    uint64_t v148 = (uint64_t *)*this[35];
    long long v149 = (uint64_t *)v147;
    if (v148)
    {
      this[35] = v148;
      long long v149 = *v125;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v149);
    this[37] = (uint64_t *)((char *)this[37] + 1);
  }
  xpc_object_t v150 = xpc_BOOL_create(*((unsigned char *)v147 + 32));
  if (!v150) {
    xpc_object_t v150 = xpc_null_create();
  }
  xpc_dictionary_set_value(v124, (const char *)*MEMORY[0x1E4F4C8D0], v150);
  xpc_object_t v151 = xpc_null_create();
  xpc_release(v150);
  xpc_release(v151);
  if (v124)
  {
    xpc_retain(v124);
    xpc_object_t v152 = v124;
  }
  else
  {
    xpc_object_t v152 = xpc_null_create();
  }
  xpc_dictionary_set_value(v122, (const char *)*MEMORY[0x1E4F4C2A8], v152);
  xpc_object_t v153 = xpc_null_create();
  xpc_release(v152);
  xpc_release(v153);
  xpc_object_t v188 = v122;
  if (v122)
  {
    xpc_retain(v122);
    xpc_object_t v154 = v188;
  }
  else
  {
    xpc_object_t v154 = xpc_null_create();
    xpc_object_t v188 = v154;
  }
  antenna::Service::Internal::setAudioState(this, &v188);
  xpc_release(v154);
  xpc_object_t v188 = 0;
  *((unsigned char *)this + 333) = 0;
  if (!*((unsigned char *)this + 332)) {
    goto LABEL_279;
  }
  if ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
  {
    int v155 = *((_DWORD *)this + 52);
    if (v155 != 4)
    {
LABEL_277:
      if (v155 == v7) {
        goto LABEL_279;
      }
      goto LABEL_278;
    }
  }
  if (antenna::Service::Internal::isAudioReceiverOutputOnlyActive((antenna::Service::Internal *)this)
    || antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)this) && !*((_DWORD *)this + 63)
    || *((unsigned char *)this + 155)
    && !antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)this)
    && !*((_DWORD *)this + 63))
  {
    int v155 = 2;
    goto LABEL_277;
  }
  if (v7 != 3) {
LABEL_278:
  }
    *((unsigned char *)this + 333) = 1;
LABEL_279:
  xpc_release(v124);
  xpc_release(v122);
  if (SHIBYTE(__s1[2]) < 0) {
    operator delete((void *)__s1[0]);
  }
}

void sub_1C5A8EA48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, xpc_object_t object)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void antenna::Service::Internal::getTxPowerAudioModeString(antenna::Service::Internal *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  uint64_t v4 = *((int *)this + 82);
  if (v4 < 4) {
    std::string::__assign_external(a2, **((const std::string::value_type ***)&unk_1E651B630 + v4));
  }
  size_t v5 = *((void *)this + 5);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v6 = a2;
    }
    else {
      size_t v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
    }
    int v7 = 136315138;
    size_t v8 = v6;
    _os_log_debug_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_DEBUG, "#D Audio Selected Mode: %s", (uint8_t *)&v7, 0xCu);
  }
}

void sub_1C5A8EC94(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void antenna::Service::Internal::copyTxPowerAudioMode_sync(antenna::Service::Internal *this@<X0>, xpc_object_t *a2@<X8>)
{
  *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  uint64_t v6 = MEMORY[0x1E4F14590];
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8795EB0](v5) == v6)
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v7 = xpc_null_create();
LABEL_8:
  *a2 = v7;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v8 = *a2;
  if (MEMORY[0x1C8795EB0](*a2) == v6)
  {
    antenna::Service::Internal::getTxPowerAudioModeString(this, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    xpc_object_t v10 = xpc_string_create((const char *)p_p);
    if (!v10) {
      xpc_object_t v10 = xpc_null_create();
    }
    xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E4F4D0C8], v10);
    xpc_object_t v11 = xpc_null_create();
    xpc_release(v10);
    xpc_release(v11);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
      && *((unsigned char *)this + 152))
    {
      xpc_object_t v12 = xpc_dictionary_create(0, 0, 0);
      if (v12 || (xpc_object_t v12 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C8795EB0](v12) == v6)
        {
          xpc_retain(v12);
          xpc_object_t v13 = v12;
        }
        else
        {
          xpc_object_t v13 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v13 = xpc_null_create();
        xpc_object_t v12 = 0;
      }
      xpc_release(v12);
      if (MEMORY[0x1C8795EB0](v13) == v6)
      {
        xpc_object_t v14 = xpc_string_create((const char *)*MEMORY[0x1E4F4D2C8]);
        if (!v14) {
          xpc_object_t v14 = xpc_null_create();
        }
        xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E4F4C870], v14);
        xpc_object_t v15 = xpc_null_create();
        xpc_release(v14);
        xpc_release(v15);
        xpc_object_t v16 = xpc_string_create((const char *)*MEMORY[0x1E4F4CAC0]);
        if (!v16) {
          xpc_object_t v16 = xpc_null_create();
        }
        xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E4F4CBF0], v16);
        xpc_object_t v17 = xpc_null_create();
        xpc_release(v16);
        xpc_release(v17);
        xpc_object_t v18 = xpc_string_create((const char *)*MEMORY[0x1E4F4C828]);
        if (!v18) {
          xpc_object_t v18 = xpc_null_create();
        }
        xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E4F4C9B8], v18);
        xpc_object_t v19 = xpc_null_create();
        xpc_release(v18);
        xpc_release(v19);
        xpc_object_t v20 = xpc_string_create((const char *)*MEMORY[0x1E4F4C600]);
        if (!v20) {
          xpc_object_t v20 = xpc_null_create();
        }
        xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E4F4CBF8], v20);
        xpc_object_t v21 = xpc_null_create();
        xpc_release(v20);
        xpc_release(v21);
        if (v13)
        {
          xpc_retain(v13);
          xpc_object_t v22 = v13;
        }
        else
        {
          xpc_object_t v22 = xpc_null_create();
        }
        xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4D0D0], v22);
        xpc_object_t v23 = xpc_null_create();
        xpc_release(v22);
        xpc_release(v23);
      }
      xpc_release(v13);
    }
  }
}

void sub_1C5A8F08C(_Unwind_Exception *a1)
{
  xpc_release(v2);
  xpc::dict::~dict(v1);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::setTxPowerAudioAlert_sync(antenna::Service::Internal *this, xpc_object_t *a2)
{
  uint64_t IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0 || (uint64_t IsInternalBuild = TelephonyUtilIsCarrierBuild(), IsInternalBuild))
  {
    if (CMOnBodyDelegate::isSupported((CMOnBodyDelegate *)IsInternalBuild))
    {
      memset(__p, 170, sizeof(__p));
      xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4D140]);
      xpc_object_t object = value;
      if (value) {
        xpc_retain(value);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      xpc::dyn_cast_or_default((uint64_t *)__p, (xpc *)&object, (const object *)"", v6);
      xpc_release(object);
      unsigned __int8 v7 = HIBYTE(__p[2]);
      if (SHIBYTE(__p[2]) >= 0) {
        xpc_object_t v8 = (void **)((char *)__p + HIBYTE(__p[2]));
      }
      else {
        xpc_object_t v8 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
      }
      if (SHIBYTE(__p[2]) >= 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if (v9 != v8)
      {
        do
        {
          *(unsigned char *)uint64_t v9 = __toupper(*(char *)v9);
          uint64_t v9 = (void **)((char *)v9 + 1);
        }
        while (v9 != v8);
        unsigned __int8 v7 = HIBYTE(__p[2]);
      }
      size_t v10 = strlen((const char *)*MEMORY[0x1E4F4C5F8]);
      xpc_object_t v11 = (void *)v10;
      if ((v7 & 0x80) != 0)
      {
        if (v10 != -1)
        {
          xpc_object_t v13 = (void **)__p[0];
          size_t v12 = (size_t)__p[1];
          goto LABEL_21;
        }
      }
      else if (v10 != -1)
      {
        size_t v12 = v7;
        xpc_object_t v13 = __p;
LABEL_21:
        if (v12 >= (unint64_t)v11) {
          size_t v14 = (size_t)v11;
        }
        else {
          size_t v14 = v12;
        }
        BOOL v15 = memcmp(v13, (const void *)*MEMORY[0x1E4F4C5F8], v14) == 0;
        if ((void *)v12 != v11) {
          BOOL v15 = 0;
        }
        *((unsigned char *)this + 332) = v15;
        *((unsigned char *)this + 333) = v15;
        if ((v7 & 0x80) != 0) {
          operator delete(__p[0]);
        }
        return;
      }
      std::string::__throw_out_of_range[abi:ne180100]();
    }
  }
}

void sub_1C5A8F26C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void antenna::Service::Internal::copyTxPowerAudioAlert_sync(antenna::Service::Internal *this@<X0>, void *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  uint64_t v6 = MEMORY[0x1E4F14590];
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8795EB0](v5) == v6)
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v7 = xpc_null_create();
LABEL_8:
  *a2 = v7;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v8 = (void *)*a2;
  if (MEMORY[0x1C8795EB0](*a2) == v6)
  {
    if (((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
      && *((unsigned char *)this + 152))
    {
      if (*((unsigned char *)this + 332))
      {
        xpc_object_t v9 = xpc_string_create((const char *)*MEMORY[0x1E4F4C5F8]);
        if (!v9) {
          xpc_object_t v9 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v9 = xpc_string_create((const char *)*MEMORY[0x1E4F4C6D0]);
        if (!v9) {
          xpc_object_t v9 = xpc_null_create();
        }
      }
    }
    else
    {
      xpc_object_t v9 = xpc_string_create((const char *)*MEMORY[0x1E4F4C6D0]);
      if (!v9) {
        xpc_object_t v9 = xpc_null_create();
      }
    }
    xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E4F4D140], v9);
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
  }
}

void sub_1C5A8F4C4(_Unwind_Exception *a1)
{
  xpc::dict::~dict(v1);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::setTxPowerMotionMode_sync(antenna::Service::Internal *this, xpc_object_t *a2)
{
  uint64_t IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0 || (uint64_t IsInternalBuild = TelephonyUtilIsCarrierBuild(), IsInternalBuild))
  {
    if (CMOnBodyDelegate::isSupported((CMOnBodyDelegate *)IsInternalBuild))
    {
      memset(__s1, 170, sizeof(__s1));
      xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4D270]);
      xpc_object_t object = value;
      if (value) {
        xpc_retain(value);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      xpc::dyn_cast_or_default(__s1, (xpc *)&object, (const object *)"", v6);
      xpc_release(object);
      unsigned __int8 v7 = HIBYTE(__s1[2]);
      if (__s1[2] >= 0) {
        xpc_object_t v8 = (uint64_t *)((char *)__s1 + HIBYTE(__s1[2]));
      }
      else {
        xpc_object_t v8 = (uint64_t *)(__s1[0] + __s1[1]);
      }
      if (__s1[2] >= 0) {
        xpc_object_t v9 = __s1;
      }
      else {
        xpc_object_t v9 = (uint64_t *)__s1[0];
      }
      if (v9 != v8)
      {
        do
        {
          *(unsigned char *)xpc_object_t v9 = __toupper(*(char *)v9);
          xpc_object_t v9 = (uint64_t *)((char *)v9 + 1);
        }
        while (v9 != v8);
        unsigned __int8 v7 = HIBYTE(__s1[2]);
      }
      size_t v10 = strlen((const char *)*MEMORY[0x1E4F4D2C8]);
      unint64_t v11 = v10;
      if ((v7 & 0x80) != 0)
      {
        if (v10 != -1)
        {
          xpc_object_t v13 = (uint64_t *)__s1[0];
          unint64_t v12 = __s1[1];
LABEL_21:
          if (v12 >= v11) {
            size_t v14 = v11;
          }
          else {
            size_t v14 = v12;
          }
          if (!memcmp(v13, (const void *)*MEMORY[0x1E4F4D2C8], v14) && v12 == v11)
          {
            int v20 = 0;
            goto LABEL_56;
          }
          size_t v16 = strlen((const char *)*MEMORY[0x1E4F4CAD8]);
          unint64_t v17 = v16;
          if ((v7 & 0x80) != 0)
          {
            if (v16 != -1)
            {
              xpc_object_t v19 = (uint64_t *)__s1[0];
              unint64_t v18 = __s1[1];
LABEL_34:
              if (v18 >= v17) {
                size_t v21 = v17;
              }
              else {
                size_t v21 = v18;
              }
              if (!memcmp(v19, (const void *)*MEMORY[0x1E4F4CAD8], v21) && v18 == v17)
              {
                int v20 = 1;
                goto LABEL_56;
              }
              xpc_object_t v23 = (const void *)*MEMORY[0x1E4F4CAD0];
              size_t v24 = strlen((const char *)*MEMORY[0x1E4F4CAD0]);
              size_t v25 = v24;
              if ((v7 & 0x80) != 0)
              {
                if (v24 != -1)
                {
                  uint64_t v26 = __s1[1];
                  if (__s1[1] >= v24) {
                    size_t v28 = v24;
                  }
                  else {
                    size_t v28 = __s1[1];
                  }
                  if (memcmp((const void *)__s1[0], v23, v28)) {
                    goto LABEL_57;
                  }
LABEL_54:
                  if (v26 != v25) {
                    goto LABEL_57;
                  }
                  int v20 = 2;
LABEL_56:
                  *((_DWORD *)this + 68) = v20;
LABEL_57:
                  if ((v7 & 0x80) != 0) {
                    operator delete((void *)__s1[0]);
                  }
                  return;
                }
              }
              else if (v24 != -1)
              {
                uint64_t v26 = v7;
                if (v7 >= v24) {
                  size_t v27 = v24;
                }
                else {
                  size_t v27 = v7;
                }
                if (memcmp(__s1, v23, v27)) {
                  goto LABEL_57;
                }
                goto LABEL_54;
              }
              std::string::__throw_out_of_range[abi:ne180100]();
            }
          }
          else if (v16 != -1)
          {
            unint64_t v18 = v7;
            xpc_object_t v19 = __s1;
            goto LABEL_34;
          }
          std::string::__throw_out_of_range[abi:ne180100]();
        }
      }
      else if (v10 != -1)
      {
        unint64_t v12 = v7;
        xpc_object_t v13 = __s1;
        goto LABEL_21;
      }
      std::string::__throw_out_of_range[abi:ne180100]();
    }
  }
}

void sub_1C5A8F74C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

std::string *antenna::Service::Internal::getTxPowerMotionModeString@<X0>(std::string *this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  uint64_t v3 = SLODWORD(this[11].__r_.__value_.__r.__words[1]);
  if (v3 < 3) {
    return std::string::__assign_external(a2, **((const std::string::value_type ***)&unk_1E651B670 + v3));
  }
  return this;
}

void sub_1C5A8F7CC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void antenna::Service::Internal::copyTxPowerMotionMode_sync(antenna::Service::Internal *this@<X0>, xpc_object_t *a2@<X8>)
{
  *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  uint64_t v6 = MEMORY[0x1E4F14590];
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8795EB0](v5) == v6)
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v7 = xpc_null_create();
LABEL_8:
  *a2 = v7;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v8 = *a2;
  if (MEMORY[0x1C8795EB0](*a2) == v6)
  {
    memset(&v24, 0, sizeof(v24));
    uint64_t v9 = *((int *)this + 68);
    if (v9 < 3) {
      std::string::__assign_external(&v24, **((const std::string::value_type ***)&unk_1E651B670 + v9));
    }
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v10 = &v24;
    }
    else {
      size_t v10 = (std::string *)v24.__r_.__value_.__r.__words[0];
    }
    xpc_object_t v11 = xpc_string_create((const char *)v10);
    if (!v11) {
      xpc_object_t v11 = xpc_null_create();
    }
    xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E4F4D270], v11);
    xpc_object_t v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    uint64_t IsInternalBuild = TelephonyUtilIsInternalBuild();
    if ((IsInternalBuild & 1) != 0 || (uint64_t IsInternalBuild = TelephonyUtilIsCarrierBuild(), IsInternalBuild))
    {
      if (CMOnBodyDelegate::isSupported((CMOnBodyDelegate *)IsInternalBuild))
      {
        xpc_object_t v14 = xpc_dictionary_create(0, 0, 0);
        if (v14 || (xpc_object_t v14 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C8795EB0](v14) == v6)
          {
            xpc_retain(v14);
            xpc_object_t v15 = v14;
          }
          else
          {
            xpc_object_t v15 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v15 = xpc_null_create();
          xpc_object_t v14 = 0;
        }
        xpc_release(v14);
        if (MEMORY[0x1C8795EB0](v15) == v6)
        {
          xpc_object_t v16 = xpc_string_create((const char *)*MEMORY[0x1E4F4D2C8]);
          if (!v16) {
            xpc_object_t v16 = xpc_null_create();
          }
          xpc_dictionary_set_value(v15, (const char *)*MEMORY[0x1E4F4D148], v16);
          xpc_object_t v17 = xpc_null_create();
          xpc_release(v16);
          xpc_release(v17);
          xpc_object_t v18 = xpc_string_create((const char *)*MEMORY[0x1E4F4CAD8]);
          if (!v18) {
            xpc_object_t v18 = xpc_null_create();
          }
          xpc_dictionary_set_value(v15, (const char *)*MEMORY[0x1E4F4D1D8], v18);
          xpc_object_t v19 = xpc_null_create();
          xpc_release(v18);
          xpc_release(v19);
          xpc_object_t v20 = xpc_string_create((const char *)*MEMORY[0x1E4F4CAD0]);
          if (!v20) {
            xpc_object_t v20 = xpc_null_create();
          }
          xpc_dictionary_set_value(v15, (const char *)*MEMORY[0x1E4F4D1D0], v20);
          xpc_object_t v21 = xpc_null_create();
          xpc_release(v20);
          xpc_release(v21);
          if (v15)
          {
            xpc_retain(v15);
            xpc_object_t v22 = v15;
          }
          else
          {
            xpc_object_t v22 = xpc_null_create();
          }
          xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4D250], v22);
          xpc_object_t v23 = xpc_null_create();
          xpc_release(v22);
          xpc_release(v23);
        }
        xpc_release(v15);
      }
    }
  }
}

void sub_1C5A8FB74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  xpc_release(v16);
  xpc::dict::~dict(v15);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::setTxPowerMotionHandDetection_sync(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (const char *)a2;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int v4 = *(char *)(a2 + 23);
  xpc_object_t v5 = (const char *)a2;
  if (v4 < 0) {
    xpc_object_t v5 = *(const char **)a2;
  }
  uint64_t v6 = (const std::string::value_type *)*MEMORY[0x1E4F4D2C8];
  size_t v7 = strlen((const char *)*MEMORY[0x1E4F4D2C8]);
  if (!strncasecmp(v5, (const char *)*MEMORY[0x1E4F4D2C8], v7))
  {
    std::string::__assign_external((std::string *)(a1 + 536), v6);
    int v13 = *(_DWORD *)(a1 + 528);
    xpc_object_t v14 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_20;
    }
  }
  else
  {
    xpc_object_t v8 = v2;
    if (v4 < 0) {
      xpc_object_t v8 = *(const char **)v2;
    }
    uint64_t v9 = (const std::string::value_type *)*MEMORY[0x1E4F4D028];
    size_t v10 = strlen((const char *)*MEMORY[0x1E4F4D028]);
    if (!strncasecmp(v8, (const char *)*MEMORY[0x1E4F4D028], v10))
    {
      std::string::__assign_external((std::string *)(a1 + 536), v9);
      int v13 = 1;
      xpc_object_t v14 = *(NSObject **)(a1 + 40);
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_20;
      }
    }
    else
    {
      if (v4 < 0) {
        uint64_t v2 = *(const char **)v2;
      }
      xpc_object_t v11 = (const std::string::value_type *)*MEMORY[0x1E4F4D0B0];
      size_t v12 = strlen((const char *)*MEMORY[0x1E4F4D0B0]);
      if (!strncasecmp(v2, (const char *)*MEMORY[0x1E4F4D0B0], v12))
      {
        std::string::__assign_external((std::string *)(a1 + 536), v11);
        int v13 = 2;
        xpc_object_t v14 = *(NSObject **)(a1 + 40);
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_20;
        }
      }
      else
      {
        int v13 = 0;
        xpc_object_t v14 = *(NSObject **)(a1 + 40);
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_20;
        }
      }
    }
  }
  xpc_object_t v15 = (void *)(a1 + 536);
  if (*(char *)(a1 + 559) < 0) {
    xpc_object_t v15 = (void *)*v15;
  }
  int v16 = 136315138;
  xpc_object_t v17 = v15;
  _os_log_debug_impl(&dword_1C59C6000, v14, OS_LOG_TYPE_DEBUG, "#D Hand Detection Overriding: %s", (uint8_t *)&v16, 0xCu);
LABEL_20:
  antenna::Service::Internal::sendMotionHandDetectionState_sync((void *)a1, v13);
}

void antenna::Service::Internal::antennaGetProperty(NSObject **this@<X0>, void **a2@<X1>, xpc_object_t *a3@<X8>)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v7 = v6;
  uint64_t v8 = MEMORY[0x1E4F14590];
  if (v6)
  {
    xpc_object_t v18 = v6;
  }
  else
  {
    xpc_object_t v7 = xpc_null_create();
    xpc_object_t v18 = v7;
    if (!v7)
    {
      xpc_object_t v9 = xpc_null_create();
      xpc_object_t v7 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8795EB0](v7) == v8)
  {
    xpc_retain(v7);
    goto LABEL_9;
  }
  xpc_object_t v9 = xpc_null_create();
LABEL_8:
  xpc_object_t v18 = v9;
LABEL_9:
  xpc_release(v7);
  xpc_object_t v10 = v18;
  if (MEMORY[0x1C8795EB0](v18) == v8)
  {
    size_t v12 = *a2;
    xpc_object_t v15 = &v18;
    xpc_object_t object = v12;
    if (v12)
    {
      xpc_retain(v12);
      xpc_object_t v17 = (antenna::Service::Internal *)this;
      if (this[12])
      {
LABEL_15:
        if (dispatch_workloop_is_current())
        {
          antenna::Service::Internal::antennaGetProperty(xpc::dict const&)::$_0::operator()((uint64_t)&v15);
LABEL_23:
          xpc_release(object);
          *a3 = v18;
          xpc_object_t v10 = xpc_null_create();
          xpc_object_t v18 = v10;
          goto LABEL_24;
        }
        BOOL v13 = this[12] == 0;
LABEL_20:
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 0x40000000;
        block[2] = ___ZNK3ctu20SharedSynchronizableIN7antenna7Service8InternalEE20execute_wrapped_syncIZNS3_18antennaGetPropertyERKN3xpc4dictEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSB__block_invoke;
        block[3] = &__block_descriptor_tmp_132;
        void block[4] = this + 9;
        void block[5] = &v15;
        xpc_object_t v14 = this[11];
        if (v13) {
          dispatch_sync(v14, block);
        }
        else {
          dispatch_async_and_wait(v14, block);
        }
        goto LABEL_23;
      }
    }
    else
    {
      xpc_object_t object = xpc_null_create();
      xpc_object_t v17 = (antenna::Service::Internal *)this;
      if (this[12]) {
        goto LABEL_15;
      }
    }
    BOOL v13 = 1;
    goto LABEL_20;
  }
  xpc_object_t v11 = this[5];
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    LOWORD(block[0]) = 0;
    _os_log_error_impl(&dword_1C59C6000, v11, OS_LOG_TYPE_ERROR, "Failed to create a xpc dictionary!", (uint8_t *)block, 2u);
  }
  *a3 = xpc_null_create();
LABEL_24:
  xpc_release(v10);
}

void sub_1C5A8FFEC(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::sendTxPowerCappingIPadMode_sync(antenna::Service::Internal *this)
{
  int v2 = *((_DWORD *)this + 68);
  if (v2 != 2)
  {
    if (v2)
    {
      int v2 = 0;
    }
    else if (*((_DWORD *)this + 63))
    {
      int v2 = 2;
    }
    else
    {
      int v2 = 2 * (*((unsigned char *)this + 736) == 1);
    }
  }
  *((_DWORD *)this + 88) = v2;
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (xpc_object_t v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v3) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v3);
      xpc_object_t v4 = v3;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v3 = 0;
  }
  xpc_release(v3);
  xpc_object_t v5 = xpc_string_create((const char *)*MEMORY[0x1E4FB9D08]);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E4FB9C68], v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  if (*((_DWORD *)this + 88))
  {
    xpc_object_t v7 = xpc_BOOL_create(1);
    if (!v7) {
      xpc_object_t v7 = xpc_null_create();
    }
    xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E4FB9D30], v7);
    xpc_object_t v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    xpc_object_t v9 = *((void *)this + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      xpc_object_t v10 = "#D iPad Tx Power Capping Start";
LABEL_42:
      _os_log_debug_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEBUG, v10, buf, 2u);
    }
  }
  else
  {
    xpc_object_t v11 = xpc_BOOL_create(1);
    if (!v11) {
      xpc_object_t v11 = xpc_null_create();
    }
    xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E4FB9D20], v11);
    xpc_object_t v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
    xpc_object_t v9 = *((void *)this + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      xpc_object_t v10 = "#D iPad Tx Power Capping Stop";
      goto LABEL_42;
    }
  }
  xpc_object_t v13 = xpc_int64_create(*((unsigned int *)this + 85));
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E4FB9C70], v13);
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  xpc_object_t v15 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v15 || (uint64_t v16 = *((void *)this + 9), (v17 = std::__shared_weak_count::lock(v15)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v18 = v17;
  atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v19 = *((void *)this + 15);
    xpc_object_t v26 = v4;
    if (v4)
    {
LABEL_29:
      xpc_retain(v4);
      goto LABEL_32;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v18);
    uint64_t v19 = *((void *)this + 15);
    xpc_object_t v26 = v4;
    if (v4) {
      goto LABEL_29;
    }
  }
  xpc_object_t v26 = xpc_null_create();
LABEL_32:
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN7antenna7Service8Internal31sendTxPowerCappingIPadMode_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_11_0;
  void aBlock[4] = this;
  void aBlock[5] = v16;
  xpc_object_t v23 = v18;
  atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v20 = _Block_copy(aBlock);
  xpc_object_t v21 = *((void *)this + 11);
  if (v21) {
    dispatch_retain(v21);
  }
  *(void *)std::string buf = v20;
  dispatch_object_t object = v21;
  (*(void (**)(uint64_t, xpc_object_t *, uint8_t *))(*(void *)v19 + 48))(v19, &v26, buf);
  if (object) {
    dispatch_release(object);
  }
  if (*(void *)buf) {
    _Block_release(*(const void **)buf);
  }
  xpc_release(v26);
  xpc_object_t v26 = 0;
  if (v23) {
    std::__shared_weak_count::__release_weak(v23);
  }
  std::__shared_weak_count::__release_weak(v18);
  xpc_release(v4);
}

void sub_1C5A90454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17)
{
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback((uint64_t)&a17);
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  xpc_release(*(xpc_object_t *)(v19 - 56));
  *(void *)(v19 - 56) = 0;
  std::__shared_weak_count::__release_weak(v18);
  xpc_release(v17);
  _Unwind_Resume(a1);
}

uint64_t antenna::Service::Internal::getTxPowerIPadWithMotionCappingMode_sync(antenna::Service::Internal *this)
{
  int v1 = *((_DWORD *)this + 68);
  if (v1 == 2) {
    return 2;
  }
  if (v1) {
    return 0;
  }
  if (*((_DWORD *)this + 63)) {
    return 2;
  }
  return 2 * (*((unsigned char *)this + 736) == 1);
}

void ___ZN7antenna7Service8Internal31sendTxPowerCappingIPadMode_syncEv_block_invoke(void *a1, char a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  xpc_object_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      xpc_object_t v7 = v6;
      uint64_t v8 = a1[5];
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8 && (a2 & 1) == 0)
      {
        xpc_object_t v9 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          uint64_t v12 = *MEMORY[0x1E4FB9D08];
          int v13 = 136315138;
          uint64_t v14 = v12;
          _os_log_error_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_ERROR, "Failed to run command driver: %s", (uint8_t *)&v13, 0xCu);
          if (!*(unsigned char *)(v5 + 153)) {
            return;
          }
        }
        else if (!*(unsigned char *)(v5 + 153))
        {
          return;
        }
        antenna::Service::Internal::stopMotionDetection_sync((antenna::Service::Internal *)v5);
        xpc_object_t v10 = *(NSObject **)(v5 + 360);
        if (v10)
        {
          dispatch_source_cancel(v10);
          xpc_object_t v11 = *(NSObject **)(v5 + 360);
          *(void *)(v5 + 360) = 0;
          if (v11) {
            dispatch_release(v11);
          }
        }
        *(_DWORD *)(v5 + 352) = 255;
      }
    }
  }
}

void antenna::Service::Internal::stopTxPowerCappingIPadWithMotionTimer_sync(antenna::Service::Internal *this)
{
  int v2 = *((void *)this + 45);
  if (v2)
  {
    dispatch_source_cancel(v2);
    xpc_object_t v3 = *((void *)this + 45);
    *((void *)this + 45) = 0;
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

void antenna::Service::Internal::startTxPowerCappingIPadWithMotionTimer_sync(dispatch_queue_t *this)
{
  int v2 = dispatch_source_create(MEMORY[0x1E4F14490], 1uLL, 0, this[11]);
  xpc_object_t v3 = this[45];
  this[45] = v2;
  if (v3)
  {
    dispatch_release(v3);
    int v2 = this[45];
  }
  dispatch_time_t v4 = dispatch_time(0, 2000000000);
  dispatch_source_set_timer(v2, v4, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
  uint64_t v5 = (std::__shared_weak_count *)this[10];
  if (!v5 || (dispatch_queue_t v6 = this[9], (v7 = std::__shared_weak_count::lock(v5)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v8 = v7;
  p_shared_weak_owners = &v7->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  xpc_object_t v10 = this[45];
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 1174405120;
  handler[2] = ___ZN7antenna7Service8Internal43startTxPowerCappingIPadWithMotionTimer_syncEv_block_invoke;
  handler[3] = &__block_descriptor_tmp_14_1;
  handler[4] = this;
  handler[5] = v6;
  uint64_t v12 = v8;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  dispatch_source_set_event_handler(v10, handler);
  dispatch_activate(this[45]);
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  std::__shared_weak_count::__release_weak(v8);
}

void ___ZN7antenna7Service8Internal43startTxPowerCappingIPadWithMotionTimer_syncEv_block_invoke(void *a1)
{
  int v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    dispatch_time_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5] && *(unsigned char *)(v3 + 216))
      {
        if (!*(unsigned char *)(v3 + 248)) {
          antenna::Service::Internal::startMotionDetection_sync((antenna::Service::Internal *)v3);
        }
        dispatch_queue_t v6 = *(NSObject **)(v3 + 360);
        if (v6)
        {
          dispatch_source_cancel(v6);
          xpc_object_t v7 = *(NSObject **)(v3 + 360);
          *(void *)(v3 + 360) = 0;
          if (v7) {
            dispatch_release(v7);
          }
        }
        antenna::Service::Internal::sendTxPowerCappingIPadMode_sync((antenna::Service::Internal *)v3);
        antenna::Service::Internal::startTxPowerCappingIPadWithMotionTimer_sync((antenna::Service::Internal *)v3);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1C5A9092C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void antenna::Service::Internal::handleTxPowerCappingIPadWithMotionTimerExpiry_sync(antenna::Service::Internal *this)
{
  if (!*((unsigned char *)this + 216)) {
    return;
  }
  if (*((unsigned char *)this + 248))
  {
    int v2 = *((void *)this + 45);
    if (!v2) {
      goto LABEL_9;
    }
LABEL_7:
    dispatch_source_cancel(v2);
    uint64_t v3 = *((void *)this + 45);
    *((void *)this + 45) = 0;
    if (v3) {
      dispatch_release(v3);
    }
    goto LABEL_9;
  }
  antenna::Service::Internal::startMotionDetection_sync(this);
  int v2 = *((void *)this + 45);
  if (v2) {
    goto LABEL_7;
  }
LABEL_9:
  antenna::Service::Internal::sendTxPowerCappingIPadMode_sync(this);

  antenna::Service::Internal::startTxPowerCappingIPadWithMotionTimer_sync((dispatch_queue_t *)this);
}

uint64_t antenna::Service::Internal::getAccessoryState_sync(antenna::Service::Internal *this)
{
  int v2 = (char *)this + 392;
  uint64_t v3 = (char *)this + 392;
  if (*((char *)this + 415) < 0) {
    uint64_t v3 = *(const char **)v2;
  }
  size_t v4 = strlen((const char *)*MEMORY[0x1E4F4D2C8]);
  if (!strncasecmp(v3, (const char *)*MEMORY[0x1E4F4D2C8], v4)
    || (TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild())
  {
    size_t v31 = (uint64_t *)*((void *)this + 55);
    size_t v32 = (uint64_t **)((char *)this + 448);
    if (v31 == (uint64_t *)((char *)this + 448))
    {
LABEL_97:
      uint64_t v10 = 0;
      goto LABEL_98;
    }
    size_t v33 = (uint64_t *)*((void *)this + 55);
    while (1)
    {
      if (v33[4])
      {
        int v34 = *((_DWORD *)v33 + 9);
        if ((v34 & 0x1000) != 0) {
          break;
        }
      }
      xpc_object_t v35 = (uint64_t *)v33[1];
      if (v35)
      {
        do
        {
          size_t v36 = (uint64_t **)v35;
          xpc_object_t v35 = (uint64_t *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          size_t v36 = (uint64_t **)v33[2];
          BOOL v37 = *v36 == v33;
          size_t v33 = (uint64_t *)v36;
        }
        while (!v37);
      }
      size_t v33 = (uint64_t *)v36;
      if (v36 == v32)
      {
        uint64_t v10 = 0;
        int v39 = 1;
        goto LABEL_103;
      }
    }
    int v39 = 0;
    unsigned int v40 = v34 & 0xFFFFEFFF;
    if (*((unsigned char *)this + 561)) {
      uint64_t v10 = 4096;
    }
    else {
      uint64_t v10 = v40;
    }
LABEL_103:
    uint64_t v38 = 1;
    while (1)
    {
      if (v39)
      {
        if ((v31[4] & 2) != 0)
        {
          int v41 = *((_DWORD *)v31 + 7);
          if (v41 == ctu::iokit::Controller::getAccessoryPrimaryPortNumber(*(ctu::iokit::Controller **)(*((void *)this + 47) + 72))) {
            break;
          }
        }
      }
      if (v31[4])
      {
        int v42 = *((_DWORD *)v31 + 9);
        if ((v42 & 0x1000) != 0) {
          int v42 = 0;
        }
        uint64_t v10 = v42 | v10;
      }
      xpc_object_t v43 = (uint64_t *)v31[1];
      if (v43)
      {
        do
        {
          int v44 = (uint64_t **)v43;
          xpc_object_t v43 = (uint64_t *)*v43;
        }
        while (v43);
      }
      else
      {
        do
        {
          int v44 = (uint64_t **)v31[2];
          BOOL v37 = *v44 == v31;
          size_t v31 = (uint64_t *)v44;
        }
        while (!v37);
      }
      size_t v31 = (uint64_t *)v44;
      if (v44 == v32) {
        return v38 | (v10 << 32);
      }
    }
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(*((void **)this + 56));
    *((void *)this + 56) = 0;
    *((void *)this + 57) = 0;
    *((void *)this + 55) = v32;
    unsigned int AccessoryPrimaryPortNumber = ctu::iokit::Controller::getAccessoryPrimaryPortNumber(*(ctu::iokit::Controller **)(*((void *)this + 47) + 72));
    unsigned int v46 = AccessoryPrimaryPortNumber;
    uint64_t v47 = (char *)*((void *)this + 56);
    size_t v48 = (uint64_t **)((char *)this + 448);
    if (v47)
    {
      while (1)
      {
        while (1)
        {
          size_t v48 = (uint64_t **)v47;
          unsigned int v49 = *((_DWORD *)v47 + 7);
          if (AccessoryPrimaryPortNumber >= v49) {
            break;
          }
          uint64_t v47 = (char *)*v48;
          size_t v32 = v48;
          if (!*v48) {
            goto LABEL_127;
          }
        }
        if (v49 >= AccessoryPrimaryPortNumber) {
          break;
        }
        uint64_t v47 = (char *)v48[1];
        if (!v47)
        {
          size_t v32 = v48 + 1;
          goto LABEL_127;
        }
      }
    }
    else
    {
LABEL_127:
      CFDictionaryRef v50 = (char *)v48;
      size_t v48 = (uint64_t **)operator new(0x28uLL);
      v48[4] = 0;
      *((_DWORD *)v48 + 7) = v46;
      *size_t v48 = 0;
      v48[1] = 0;
      v48[2] = (uint64_t *)v50;
      *size_t v32 = (uint64_t *)v48;
      uint64_t v51 = **((void **)this + 55);
      id v52 = (uint64_t *)v48;
      if (v51)
      {
        *((void *)this + 55) = v51;
        id v52 = *v32;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 56), v52);
      ++*((void *)this + 57);
    }
    v48[4] = (uint64_t *)0x100000002;
LABEL_131:
    uint64_t v10 = 1;
    uint64_t v38 = 2;
    return v38 | (v10 << 32);
  }
  int v5 = *((char *)this + 415);
  dispatch_queue_t v6 = v2;
  if (v5 < 0) {
    dispatch_queue_t v6 = *(const char **)v2;
  }
  size_t v7 = strlen((const char *)*MEMORY[0x1E4F4C328]);
  if (!strncasecmp(v6, (const char *)*MEMORY[0x1E4F4C328], v7)) {
    goto LABEL_131;
  }
  if (v5 < 0) {
    int v2 = *(const char **)v2;
  }
  size_t v8 = strlen((const char *)*MEMORY[0x1E4F4C320]);
  if (strncasecmp(v2, (const char *)*MEMORY[0x1E4F4C320], v8)) {
    goto LABEL_97;
  }
  memset(v69, 170, sizeof(v69));
  ctu::split_any_copy();
  xpc_object_t v9 = (long long *)v69[0];
  std::string v67 = (long long *)v69[1];
  if (v69[0] != v69[1])
  {
    LODWORD(v10) = 0;
    long long v66 = (char *)*MEMORY[0x1E4F4C110];
    unint64_t v65 = (char *)*MEMORY[0x1E4F4C120];
    int v64 = (char *)*MEMORY[0x1E4F4C080];
    size_t v63 = (char *)*MEMORY[0x1E4F4C090];
    size_t v62 = (char *)*MEMORY[0x1E4F4C118];
    size_t v61 = (char *)*MEMORY[0x1E4F4C098];
    int v60 = (char *)*MEMORY[0x1E4F4C0A0];
    long long v59 = (char *)*MEMORY[0x1E4F4C0A8];
    std::string v58 = (char *)*MEMORY[0x1E4F4C0B0];
    std::string v57 = (char *)*MEMORY[0x1E4F4C0B8];
    std::string v56 = (char *)*MEMORY[0x1E4F4C0C0];
    xpc_object_t v11 = (const char *)*MEMORY[0x1E4F4C298];
    uint64_t v12 = MEMORY[0x1E4F14390];
    do
    {
      memset(&v68, 170, sizeof(v68));
      if (*((char *)v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)v9, *((void *)v9 + 1));
      }
      else
      {
        long long v13 = *v9;
        v68.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
        *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v13;
      }
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v14 = &v68;
      }
      else {
        uint64_t v14 = (std::string *)v68.__r_.__value_.__r.__words[0];
      }
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v68.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v68.__r_.__value_.__l.__size_;
      }
      if (!size) {
        goto LABEL_40;
      }
      uint64_t v16 = (std::string *)((char *)v14 + size);
      do
      {
        unsigned int v17 = v14->__r_.__value_.__s.__data_[0];
        if ((v17 & 0x80000000) != 0 ? __maskrune(v17, 0x4000uLL) : *(_DWORD *)(v12 + 4 * v17 + 60) & 0x4000) {
          break;
        }
        uint64_t v14 = (std::string *)((char *)v14 + 1);
        --size;
      }
      while (size);
      if (size == 1)
      {
LABEL_40:
        uint64_t v16 = v14;
      }
      else
      {
        uint64_t v19 = 1;
        uint64_t v16 = v14;
        do
        {
          unsigned int v20 = v14->__r_.__value_.__s.__data_[v19];
          if ((v20 & 0x80000000) != 0) {
            int v21 = __maskrune(v20, 0x4000uLL);
          }
          else {
            int v21 = *(_DWORD *)(v12 + 4 * v20 + 60) & 0x4000;
          }
          if (!v21)
          {
            v16->__r_.__value_.__s.__data_[0] = v14->__r_.__value_.__s.__data_[v19];
            uint64_t v16 = (std::string *)((char *)v16 + 1);
          }
          ++v19;
        }
        while (size != v19);
      }
      std::string::size_type v22 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
      xpc_object_t v23 = (std::string *)v68.__r_.__value_.__r.__words[0];
      std::string v24 = (char *)(v68.__r_.__value_.__r.__words[0] + v68.__r_.__value_.__l.__size_);
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      {
        size_t v25 = (std::string *)v68.__r_.__value_.__r.__words[0];
      }
      else
      {
        std::string v24 = (char *)&v68 + HIBYTE(v68.__r_.__value_.__r.__words[2]);
        size_t v25 = &v68;
      }
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v22 = v68.__r_.__value_.__l.__size_;
      }
      std::string::size_type v26 = (char *)v16 - (char *)v25;
      if (v22 < (char *)v16 - (char *)v25) {
        std::string::__throw_out_of_range[abi:ne180100]();
      }
      if (v24 - (char *)v16 == -1)
      {
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        {
          v68.__r_.__value_.__l.__size_ = (char *)v16 - (char *)v25;
        }
        else
        {
          *((unsigned char *)&v68.__r_.__value_.__s + 23) = v26 & 0x7F;
          xpc_object_t v23 = &v68;
        }
        v23->__r_.__value_.__s.__data_[v26] = 0;
      }
      else
      {
        std::string::__erase_external_with_move(&v68, v26, v24 - (char *)v16);
      }
      int v27 = SHIBYTE(v68.__r_.__value_.__r.__words[2]);
      size_t v28 = (void *)v68.__r_.__value_.__r.__words[0];
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v29 = &v68;
      }
      else {
        size_t v29 = (std::string *)v68.__r_.__value_.__r.__words[0];
      }
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v30 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v30 = v68.__r_.__value_.__l.__size_;
      }
      if (!strncasecmp((const char *)v29, v66, v30)) {
        LODWORD(v10) = v10 | 2;
      }
      if (!strncasecmp((const char *)v29, v65, v30)) {
        LODWORD(v10) = v10 | 4;
      }
      if (!strncasecmp((const char *)v29, v64, v30)) {
        LODWORD(v10) = v10 | 8;
      }
      if (!strncasecmp((const char *)v29, v63, v30)) {
        LODWORD(v10) = v10 | 0x10;
      }
      if (!strncasecmp((const char *)v29, v62, v30)) {
        LODWORD(v10) = v10 | 0x20;
      }
      if (!strncasecmp((const char *)v29, v61, v30)) {
        LODWORD(v10) = v10 | 0x40;
      }
      if (!strncasecmp((const char *)v29, v60, v30)) {
        LODWORD(v10) = v10 | 0x80;
      }
      if (!strncasecmp((const char *)v29, v59, v30)) {
        LODWORD(v10) = v10 | 0x100;
      }
      if (!strncasecmp((const char *)v29, v58, v30)) {
        LODWORD(v10) = v10 | 0x200;
      }
      if (!strncasecmp((const char *)v29, v57, v30)) {
        LODWORD(v10) = v10 | 0x400;
      }
      if (!strncasecmp((const char *)v29, v56, v30)) {
        LODWORD(v10) = v10 | 0x800;
      }
      if (!strncasecmp((const char *)v29, v11, v30)) {
        uint64_t v10 = v10 | 0x1000;
      }
      else {
        uint64_t v10 = v10;
      }
      if (v27 < 0) {
        operator delete(v28);
      }
      xpc_object_t v9 = (long long *)((char *)v9 + 24);
    }
    while (v9 != v67);
    xpc_object_t v9 = (long long *)v69[0];
    if (!v69[0]) {
      goto LABEL_98;
    }
    goto LABEL_134;
  }
  uint64_t v10 = 0;
  if (v69[0])
  {
LABEL_134:
    int v54 = (long long *)v69[1];
    uint64_t v55 = v9;
    if ((long long *)v69[1] != v9)
    {
      do
      {
        if (*((char *)v54 - 1) < 0) {
          operator delete(*((void **)v54 - 3));
        }
        int v54 = (long long *)((char *)v54 - 24);
      }
      while (v54 != v9);
      uint64_t v55 = (long long *)v69[0];
    }
    v69[1] = v9;
    operator delete(v55);
  }
LABEL_98:
  uint64_t v38 = 1;
  return v38 | (v10 << 32);
}

void sub_1C5A910E8(_Unwind_Exception *a1)
{
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_1C5A910FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v26 - 104));
  _Unwind_Resume(a1);
}

BOOL antenna::Service::Internal::isAccessoryOverridden(antenna::Service::Internal *this)
{
  uint64_t v1 = (char *)this + 392;
  if (*((char *)this + 415) < 0) {
    uint64_t v1 = *(const char **)v1;
  }
  size_t v2 = strlen((const char *)*MEMORY[0x1E4F4D2C8]);
  if (!strncasecmp(v1, (const char *)*MEMORY[0x1E4F4D2C8], v2)) {
    return 0;
  }
  if (TelephonyUtilIsInternalBuild()) {
    return 1;
  }
  return (TelephonyUtilIsCarrierBuild() & 1) != 0;
}

void antenna::Service::Internal::accessoryNotification_sync(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  dispatch_queue_t v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = a3;
    _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#I Accessory Port Number: %u", (uint8_t *)__p, 8u);
    dispatch_queue_t v6 = *(NSObject **)(a1 + 40);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    ctu::iokit::asString();
    if (v21 >= 0) {
      size_t v7 = __p;
    }
    else {
      size_t v7 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    xpc_object_t v23 = v7;
    _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#I Accessory Status: %s", buf, 0xCu);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    dispatch_queue_t v6 = *(NSObject **)(a1 + 40);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    ctu::iokit::asString();
    size_t v8 = v21 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315138;
    xpc_object_t v23 = v8;
    _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#I Accessory Type: %s", buf, 0xCu);
    if (v21 < 0)
    {
      operator delete(__p[0]);
      xpc_object_t v9 = (const char *)(a1 + 392);
      if ((*(char *)(a1 + 415) & 0x80000000) == 0) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
  }
  xpc_object_t v9 = (const char *)(a1 + 392);
  if (*(char *)(a1 + 415) < 0) {
LABEL_16:
  }
    xpc_object_t v9 = *(const char **)v9;
LABEL_17:
  size_t v10 = strlen((const char *)*MEMORY[0x1E4F4D2C8]);
  if (!strncasecmp(v9, (const char *)*MEMORY[0x1E4F4D2C8], v10)
    || (TelephonyUtilIsInternalBuild() & 1) == 0 && (TelephonyUtilIsCarrierBuild() & 1) == 0)
  {
    uint64_t AccessoryState_sync = antenna::Service::Internal::getAccessoryState_sync((antenna::Service::Internal *)a1);
    uint64_t v12 = *(uint64_t **)(a1 + 448);
    if (v12)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v14 = (uint64_t **)v12;
          unsigned int v15 = *((_DWORD *)v12 + 7);
          if (v15 <= a3) {
            break;
          }
          uint64_t v12 = *v14;
          long long v13 = v14;
          if (!*v14) {
            goto LABEL_27;
          }
        }
        if (v15 >= a3) {
          break;
        }
        uint64_t v12 = v14[1];
        if (!v12)
        {
          long long v13 = v14 + 1;
          goto LABEL_27;
        }
      }
      uint64_t v16 = v14;
    }
    else
    {
      long long v13 = (uint64_t **)(a1 + 448);
      uint64_t v14 = (uint64_t **)(a1 + 448);
LABEL_27:
      uint64_t v16 = operator new(0x28uLL);
      v16[4] = 0;
      *((_DWORD *)v16 + 7) = a3;
      void *v16 = 0;
      v16[1] = 0;
      unint64_t v16[2] = v14;
      uint64_t *v13 = v16;
      uint64_t v17 = **(void **)(a1 + 440);
      xpc_object_t v18 = v16;
      if (v17)
      {
        *(void *)(a1 + 440) = v17;
        xpc_object_t v18 = *v13;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 448), v18);
      ++*(void *)(a1 + 456);
    }
    v16[4] = a2;
    if (AccessoryState_sync == antenna::Service::Internal::getAccessoryState_sync((antenna::Service::Internal *)a1))
    {
      uint64_t v19 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_debug_impl(&dword_1C59C6000, v19, OS_LOG_TYPE_DEBUG, "#D Skip sending accessory since previous and current states are same", (uint8_t *)__p, 2u);
      }
    }
    else
    {
      antenna::Service::Internal::sendAccessoryStatus_sync((NSObject **)a1);
    }
  }
}

void antenna::Service::Internal::mesaNotification_sync(uint64_t a1, char a2)
{
  if (a2)
  {
    size_t v2 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)std::string buf = 0;
    uint64_t v3 = "#I ctu::iokit::kTelephonyIOKitMesaStartShort";
    size_t v4 = buf;
    goto LABEL_7;
  }
  if ((a2 & 2) != 0)
  {
    size_t v2 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v5 = 0;
      uint64_t v3 = "#I ctu::iokit::kTelephonyIOKitMesaStartLong";
      size_t v4 = (uint8_t *)&v5;
LABEL_7:
      _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, v3, v4, 2u);
    }
  }
}

void antenna::Service::Internal::videoNotification_sync(antenna::Service::Internal *a1, unsigned int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  size_t v4 = *((void *)a1 + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Display evnet: 0x%x\n", (uint8_t *)v5, 8u);
  }
  antenna::Service::Internal::sendVideoAccessory_sync(a1, (a2 >> 2) & 1);
}

void antenna::Service::Internal::powerSourceNotification_sync(uint64_t a1, int a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 564) != a2)
  {
    size_t v4 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      ctu::iokit::asString();
      if (v7 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      *(_DWORD *)std::string buf = 136315138;
      xpc_object_t v9 = p_p;
      _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Power Source: %s", buf, 0xCu);
      if (v7 < 0) {
        operator delete(__p);
      }
    }
    *(_DWORD *)(a1 + 564) = a2;
    antenna::Service::Internal::sendPowerSource_sync((antenna::Service::Internal *)a1);
  }
}

void antenna::Service::Internal::sendSensorID_sync(antenna::Service::Internal *this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 43) == 1)
  {
    antenna::Service::Internal::sendTxPowerCappingIPadMode_sync(this);
  }
  else
  {
    size_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
    if (!v2 || (uint64_t v3 = *((void *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    __int16 v5 = v4;
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = *((unsigned char *)this + 736) & 7 | (8 * (*((unsigned char *)this + 737) & 7u));
    char v7 = *((void *)this + 5);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109120;
      int v16 = v6;
      _os_log_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_DEFAULT, "#I Sending sensor-state to BB: 0x%x", buf, 8u);
    }
    uint64_t v8 = *((void *)this + 15);
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN7antenna7Service8Internal17sendSensorID_syncEv_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_18;
    void aBlock[4] = this;
    void aBlock[5] = v3;
    uint64_t v12 = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    xpc_object_t v9 = _Block_copy(aBlock);
    uint64_t v10 = *((void *)this + 11);
    if (v10) {
      dispatch_retain(v10);
    }
    long long v13 = v9;
    dispatch_object_t object = v10;
    (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v8 + 56))(v8, v6, &v13);
    if (object) {
      dispatch_release(object);
    }
    if (v13) {
      _Block_release(v13);
    }
    if (v12) {
      std::__shared_weak_count::__release_weak(v12);
    }
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1C5A91948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN7antenna7Service8Internal17sendSensorID_syncEv_block_invoke(void *a1, char a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      char v7 = v6;
      uint64_t v8 = a1[5];
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8 && (a2 & 1) == 0)
      {
        xpc_object_t v9 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t v10 = 0;
          _os_log_error_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_ERROR, "Failed to send sensor ID to BB", v10, 2u);
        }
      }
    }
  }
}

void antenna::Service::Internal::reportAccessory_sync(uint64_t a1, unint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  uint64_t v5 = MEMORY[0x1E4F14590];
  if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v4) == v5)
    {
      xpc_retain(v4);
      xpc_object_t v6 = v4;
    }
    else
    {
      xpc_object_t v6 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v4 = 0;
  }
  xpc_release(v4);
  xpc_object_t v7 = xpc_int64_create(HIDWORD(a2));
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4C528], v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  xpc_object_t v9 = xpc_int64_create(a2);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4C650], v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  xpc_object_t v11 = xpc_dictionary_create(0, 0, 0);
  if (v11 || (xpc_object_t v11 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v11) == v5)
    {
      xpc_retain(v11);
      xpc_object_t v12 = v11;
    }
    else
    {
      xpc_object_t v12 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v12 = xpc_null_create();
    xpc_object_t v11 = 0;
  }
  xpc_release(v11);
  xpc_object_t v13 = xpc_string_create((const char *)*MEMORY[0x1E4F4D2D0]);
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E4F4C190], v13);
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  xpc_object_t v15 = xpc_int64_create(524584);
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E4F4C258], v15);
  xpc_object_t v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  if (v6)
  {
    xpc_retain(v6);
    xpc_object_t v17 = v6;
  }
  else
  {
    xpc_object_t v17 = xpc_null_create();
  }
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E4F4C188], v17);
  xpc_object_t v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  xpc_object_t v19 = xpc_dictionary_create(0, 0, 0);
  if (v19 || (xpc_object_t v19 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v19) == v5)
    {
      xpc_retain(v19);
      xpc_object_t v20 = v19;
    }
    else
    {
      xpc_object_t v20 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v20 = xpc_null_create();
    xpc_object_t v19 = 0;
  }
  xpc_release(v19);
  xpc_object_t v21 = xpc_string_create((const char *)*MEMORY[0x1E4F4C310]);
  if (!v21) {
    xpc_object_t v21 = xpc_null_create();
  }
  xpc_dictionary_set_value(v20, (const char *)*MEMORY[0x1E4F4C7D8], v21);
  xpc_object_t v22 = xpc_null_create();
  xpc_release(v21);
  xpc_release(v22);
  if (v12)
  {
    xpc_retain(v12);
    xpc_object_t v23 = v12;
  }
  else
  {
    xpc_object_t v23 = xpc_null_create();
  }
  xpc_dictionary_set_value(v20, (const char *)*MEMORY[0x1E4F4C338], v23);
  xpc_object_t v24 = xpc_null_create();
  xpc_release(v23);
  xpc_release(v24);
  if (v20)
  {
    xpc_retain(v20);
    xpc_object_t v25 = v20;
    uint64_t v26 = *(const void **)(a1 + 104);
    if (v26)
    {
LABEL_37:
      int v27 = _Block_copy(v26);
      goto LABEL_40;
    }
  }
  else
  {
    xpc_object_t v25 = xpc_null_create();
    uint64_t v26 = *(const void **)(a1 + 104);
    if (v26) {
      goto LABEL_37;
    }
  }
  int v27 = 0;
LABEL_40:
  size_t v28 = *(NSObject **)(a1 + 112);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 1174405120;
  unint64_t v29[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc4dictEEEclIJS2_EEEvDpT__block_invoke;
  v29[3] = &__block_descriptor_tmp_128;
  if (v27)
  {
    long long aBlock = _Block_copy(v27);
    xpc_object_t object = v25;
    if (v25)
    {
LABEL_42:
      xpc_retain(v25);
      goto LABEL_45;
    }
  }
  else
  {
    long long aBlock = 0;
    xpc_object_t object = v25;
    if (v25) {
      goto LABEL_42;
    }
  }
  xpc_object_t object = xpc_null_create();
LABEL_45:
  dispatch_async(v28, v29);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v27) {
    _Block_release(v27);
  }
  xpc_release(v25);
  xpc_release(v20);
  xpc_release(v12);
  xpc_release(v6);
}

void antenna::Service::Internal::sendAudioSpeaker_sync(antenna::Service::Internal *this)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2 || (xpc_object_t v2 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v2) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v2);
      xpc_object_t v3 = v2;
    }
    else
    {
      xpc_object_t v3 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v2 = 0;
  }
  xpc_release(v2);
  xpc_object_t v4 = xpc_string_create((const char *)*MEMORY[0x1E4FB9CD8]);
  if (!v4) {
    xpc_object_t v4 = xpc_null_create();
  }
  xpc_dictionary_set_value(v3, (const char *)*MEMORY[0x1E4FB9C68], v4);
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  xpc_object_t v6 = xpc_BOOL_create(*((unsigned char *)this + 335));
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_dictionary_set_value(v3, (const char *)*MEMORY[0x1E4FB9CB8], v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  v8[0] = 0;
  v8[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync(this, &object, (uint64_t)v8);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v3);
}

void sub_1C5A92184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
  dispatch::callback<void({block_pointer})(xpc::object)>::~callback((uint64_t)&a10);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v12);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::sendAudioSpeaker(antenna::Service::Internal *this)
{
  xpc_object_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (uint64_t v3 = *((void *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v5 = v4;
  xpc_object_t v6 = operator new(8uLL);
  void *v6 = this;
  xpc_object_t v7 = *((void *)this + 11);
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v8 = operator new(0x18uLL);
  *xpc_object_t v8 = v6;
  v8[1] = v3;
  void v8[2] = v5;
  dispatch_async_f(v7, v8, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::sendAudioSpeaker(void)::$_0>(antenna::Service::Internal::sendAudioSpeaker(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::sendAudioSpeaker(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::sendAudioSpeaker(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

BOOL antenna::Service::Internal::isPowerSourceOverridden_sync(antenna::Service::Internal *this)
{
  if (*((_DWORD *)this + 142) == -1) {
    return 0;
  }
  if (TelephonyUtilIsInternalBuild()) {
    return 1;
  }
  return (TelephonyUtilIsCarrierBuild() & 1) != 0;
}

uint64_t antenna::Service::Internal::getPowerSourceState_sync(antenna::Service::Internal *this)
{
  if (*((_DWORD *)this + 142) == -1
    || (xpc_object_t v2 = (char *)this + 568, (TelephonyUtilIsInternalBuild() & 1) == 0) && (TelephonyUtilIsCarrierBuild() & 1) == 0)
  {
    xpc_object_t v2 = (char *)this + 564;
  }
  return *(unsigned int *)v2;
}

uint64_t **std::map<unsigned int,unsigned int>::operator[](uint64_t **a1, unsigned int a2)
{
  xpc_object_t v5 = a1 + 1;
  xpc_object_t v4 = a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        xpc_object_t v6 = (uint64_t **)v4;
        unsigned int v7 = *((_DWORD *)v4 + 7);
        if (v7 <= a2) {
          break;
        }
        xpc_object_t v4 = *v6;
        xpc_object_t v5 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      if (v7 >= a2) {
        break;
      }
      xpc_object_t v4 = v6[1];
      if (!v4)
      {
        xpc_object_t v5 = v6 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    xpc_object_t v6 = a1 + 1;
LABEL_8:
    xpc_object_t v8 = (uint64_t *)v6;
    xpc_object_t v6 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v6 + 7) = a2;
    *((_DWORD *)v6 + 8) = 0;
    void *v6 = 0;
    v6[1] = 0;
    void v6[2] = v8;
    *xpc_object_t v5 = (uint64_t *)v6;
    xpc_object_t v9 = (uint64_t *)**a1;
    xpc_object_t v10 = (uint64_t *)v6;
    if (v9)
    {
      *a1 = v9;
      xpc_object_t v10 = *v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6 + 4;
}

void antenna::Service::Internal::sendWorkoutInfo_sync(antenna::Service::Internal *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v3 = v2;
  if (v2)
  {
    xpc_object_t xdict = v2;
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t xdict = v3;
    if (!v3)
    {
      xpc_object_t v4 = xpc_null_create();
      xpc_object_t v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8795EB0](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  xpc_object_t v4 = xpc_null_create();
LABEL_8:
  xpc_object_t xdict = v4;
LABEL_9:
  xpc_release(v3);
  xpc_object_t v5 = xpc_string_create((const char *)*MEMORY[0x1E4FB9CD0]);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_object_t v6 = xdict;
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4FB9C68], v5);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v7);
  xpc_object_t v8 = xpc_int64_create(*((unsigned int *)this + 180));
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kKeyWorkoutType", v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  xpc_object_t v10 = xpc_int64_create(*((unsigned int *)this + 181));
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kKeyWorkoutState", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  xpc_object_t v12 = xpc_int64_create(*((unsigned int *)this + 182));
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kKeyWorkoutLocation", v12);
  xpc_object_t v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  xpc_object_t v14 = xpc_int64_create(*((unsigned int *)this + 183));
  if (!v14) {
    xpc_object_t v14 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kKeySwimLocation", v14);
  xpc_object_t v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  xpc_object_t v16 = *((void *)this + 5);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    xpc::object::to_string((uint64_t *)__p, (xpc::object *)&xdict);
    if (v21 >= 0) {
      xpc_object_t v17 = __p;
    }
    else {
      xpc_object_t v17 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    xpc_object_t v24 = v17;
    _os_log_impl(&dword_1C59C6000, v16, OS_LOG_TYPE_DEFAULT, "#I Sending workout info: %s\n", buf, 0xCu);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    xpc_object_t v6 = xdict;
  }
  xpc_object_t v19 = v6;
  if (v6)
  {
    xpc_retain(v6);
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v19 = v6;
  }
  v18[0] = 0;
  v18[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync(this, &v19, (uint64_t)v18);
  xpc_release(v6);
  xpc_object_t v19 = 0;
  xpc_release(xdict);
}

void sub_1C5A92738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void antenna::Service::Internal::handleDumpState_sync(antenna::Service::Internal *this)
{
  uint64_t v127 = *MEMORY[0x1E4F143B8];
  xpc_object_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I --------------- ABM Antenna state ---------------", (uint8_t *)&__p, 2u);
    xpc_object_t v2 = *((void *)this + 5);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
LABEL_3:
      if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_4;
      }
LABEL_19:
      xpc::object::to_string((uint64_t *)&__p, (antenna::Service::Internal *)((char *)this + 224));
      if (v124[0] >= 0) {
        p_p = (const char *)&__p;
      }
      else {
        p_p = (const char *)__p;
      }
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v126 = p_p;
      _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Transmit state: %s", buf, 0xCu);
      if (SHIBYTE(v124[0]) < 0)
      {
        operator delete((void *)__p);
        xpc_object_t v2 = *((void *)this + 5);
        if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_26;
        }
      }
      else
      {
        xpc_object_t v2 = *((void *)this + 5);
        if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_26;
        }
      }
LABEL_5:
      if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_6;
      }
      goto LABEL_30;
    }
  }
  else if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    goto LABEL_3;
  }
  int v3 = *((unsigned __int8 *)this + 216);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v3;
  _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I fTransmitting=%u", (uint8_t *)&__p, 8u);
  xpc_object_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_19;
  }
LABEL_4:
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_5;
  }
LABEL_26:
  if (*((unsigned char *)this + 476)) {
    xpc_object_t v5 = (uint64_t *)MEMORY[0x1E4F4C100];
  }
  else {
    xpc_object_t v5 = (uint64_t *)MEMORY[0x1E4F4D2C8];
  }
  uint64_t v6 = *v5;
  LODWORD(__p) = 136315138;
  *(void *)((char *)&__p + 4) = v6;
  _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I CLTM/PPM Overriding State: %s", (uint8_t *)&__p, 0xCu);
  xpc_object_t v2 = *((void *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_6:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_7;
    }
    goto LABEL_31;
  }
LABEL_30:
  LOWORD(__p) = 0;
  _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I CLTM/PPM power/duty cycle (0.1%% units):", (uint8_t *)&__p, 2u);
  xpc_object_t v2 = *((void *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_7:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_8;
    }
    goto LABEL_32;
  }
LABEL_31:
  int v7 = *((_DWORD *)this + 116);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v7;
  _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I CLTM/PPM power backoff : %d", (uint8_t *)&__p, 8u);
  xpc_object_t v2 = *((void *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_8:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_9;
    }
    goto LABEL_33;
  }
LABEL_32:
  int v8 = *((_DWORD *)this + 117);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v8;
  _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I CLTM/PPM duty cycle: %d", (uint8_t *)&__p, 8u);
  xpc_object_t v2 = *((void *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_9:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_10;
    }
    goto LABEL_34;
  }
LABEL_33:
  LOWORD(__p) = 0;
  _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I CLTM/PPM Radio Max Power Unit: mW:", (uint8_t *)&__p, 2u);
  xpc_object_t v2 = *((void *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_10:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_11;
    }
    goto LABEL_35;
  }
LABEL_34:
  int v9 = *((_DWORD *)this + 118);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v9;
  _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I CLTM/PPM Radio Max Power: %d", (uint8_t *)&__p, 8u);
  xpc_object_t v2 = *((void *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_11:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_12;
    }
    goto LABEL_36;
  }
LABEL_35:
  int v10 = *((unsigned __int8 *)this + 156);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v10;
  _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Accessory support for RF: %d", (uint8_t *)&__p, 8u);
  xpc_object_t v2 = *((void *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_12:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_13;
    }
    goto LABEL_37;
  }
LABEL_36:
  int v11 = *((unsigned __int8 *)this + 158);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v11;
  _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Accessory support for ARTD: %d", (uint8_t *)&__p, 8u);
  xpc_object_t v2 = *((void *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_13:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
    goto LABEL_38;
  }
LABEL_37:
  int v12 = *((unsigned __int8 *)this + 157);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v12;
  _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Accessory type support for RF: %d", (uint8_t *)&__p, 8u);
  xpc_object_t v2 = *((void *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_14:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_15;
    }
    goto LABEL_39;
  }
LABEL_38:
  int v13 = *((unsigned __int8 *)this + 159);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v13;
  _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Accessory type support for ARTD: %d", (uint8_t *)&__p, 8u);
  xpc_object_t v2 = *((void *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_15:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_45;
    }
    goto LABEL_42;
  }
LABEL_39:
  xpc_object_t v14 = (void *)((char *)this + 392);
  if (*((char *)this + 415) < 0) {
    xpc_object_t v14 = (void *)*v14;
  }
  LODWORD(__p) = 136315138;
  *(void *)((char *)&__p + 4) = v14;
  _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Accessory overridden state: %s", (uint8_t *)&__p, 0xCu);
  xpc_object_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_42:
    xpc_object_t v15 = (void *)((char *)this + 416);
    if (*((char *)this + 439) < 0) {
      xpc_object_t v15 = (void *)*v15;
    }
    LODWORD(__p) = 136315138;
    *(void *)((char *)&__p + 4) = v15;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Accessory overridden type: %s", (uint8_t *)&__p, 0xCu);
  }
LABEL_45:
  antenna::Service::Internal::getAccessoryState_sync(this);
  xpc_object_t v16 = *((void *)this + 5);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    ctu::iokit::asString();
    if (v124[0] >= 0) {
      xpc_object_t v17 = (const char *)&__p;
    }
    else {
      xpc_object_t v17 = (const char *)__p;
    }
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v126 = v17;
    _os_log_impl(&dword_1C59C6000, v16, OS_LOG_TYPE_DEFAULT, "#I Accessory connected: %s", buf, 0xCu);
    if (SHIBYTE(v124[0]) < 0) {
      operator delete((void *)__p);
    }
    xpc_object_t v16 = *((void *)this + 5);
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    ctu::iokit::asString();
    if (v124[0] >= 0) {
      xpc_object_t v18 = (const char *)&__p;
    }
    else {
      xpc_object_t v18 = (const char *)__p;
    }
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v126 = v18;
    _os_log_impl(&dword_1C59C6000, v16, OS_LOG_TYPE_DEFAULT, "#I Accessory type: %s", buf, 0xCu);
    if (SHIBYTE(v124[0]) < 0) {
      operator delete((void *)__p);
    }
    xpc_object_t v16 = *((void *)this + 5);
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    int v19 = *((unsigned __int8 *)this + 163);
    LODWORD(__p) = 67109120;
    DWORD1(__p) = v19;
    _os_log_impl(&dword_1C59C6000, v16, OS_LOG_TYPE_DEFAULT, "#I Antenna Switching support: %d", (uint8_t *)&__p, 8u);
    xpc_object_t v16 = *((void *)this + 5);
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
LABEL_61:
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_62;
      }
      goto LABEL_67;
    }
  }
  else if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    goto LABEL_61;
  }
  int v20 = *((unsigned __int8 *)this + 164);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v20;
  _os_log_impl(&dword_1C59C6000, v16, OS_LOG_TYPE_DEFAULT, "#I Antenna switched: %d", (uint8_t *)&__p, 8u);
  xpc_object_t v16 = *((void *)this + 5);
  if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
LABEL_62:
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_63;
    }
    goto LABEL_68;
  }
LABEL_67:
  int v21 = *((unsigned __int8 *)this + 162);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v21;
  _os_log_impl(&dword_1C59C6000, v16, OS_LOG_TYPE_DEFAULT, "#I MESA supported: %d", (uint8_t *)&__p, 8u);
  xpc_object_t v16 = *((void *)this + 5);
  if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
LABEL_63:
    if (!*((unsigned char *)this + 152)) {
      goto LABEL_143;
    }
    goto LABEL_69;
  }
LABEL_68:
  int v22 = *((_DWORD *)this + 121);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v22;
  _os_log_impl(&dword_1C59C6000, v16, OS_LOG_TYPE_DEFAULT, "#I MESA level: %d", (uint8_t *)&__p, 8u);
  if (!*((unsigned char *)this + 152)) {
    goto LABEL_143;
  }
LABEL_69:
  xpc_object_t v23 = *((void *)this + 5);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    long long __p = 0uLL;
    v124[0] = 0;
    int v24 = *((_DWORD *)this + 52) - 1;
    if (v24 < 4) {
      std::string::__assign_external((std::string *)&__p, **((const std::string::value_type ***)&unk_1E651B650 + v24));
    }
    uint64_t v25 = (const char *)&__p;
    if (v124[0] < 0) {
      uint64_t v25 = (const char *)__p;
    }
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v126 = v25;
    _os_log_impl(&dword_1C59C6000, v23, OS_LOG_TYPE_DEFAULT, "#I Tx Power Enhanced Detection Mode: %s", buf, 0xCu);
    if (SHIBYTE(v124[0]) < 0) {
      operator delete((void *)__p);
    }
    xpc_object_t v23 = *((void *)this + 5);
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    antenna::Service::Internal::getTxPowerAudioModeString(this, (std::string *)&__p);
    if (v124[0] >= 0) {
      uint64_t v26 = (const char *)&__p;
    }
    else {
      uint64_t v26 = (const char *)__p;
    }
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v126 = v26;
    _os_log_impl(&dword_1C59C6000, v23, OS_LOG_TYPE_DEFAULT, "#I Tx Power Audio Mode: %s", buf, 0xCu);
    if (SHIBYTE(v124[0]) < 0) {
      operator delete((void *)__p);
    }
    xpc_object_t v23 = *((void *)this + 5);
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    if (*((unsigned char *)this + 333)) {
      int v27 = "ON";
    }
    else {
      int v27 = "OFF";
    }
    LODWORD(__p) = 136315138;
    *(void *)((char *)&__p + 4) = v27;
    _os_log_impl(&dword_1C59C6000, v23, OS_LOG_TYPE_DEFAULT, "#I Tx Power Audio Alert: %s", (uint8_t *)&__p, 0xCu);
    xpc_object_t v23 = *((void *)this + 5);
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    size_t v28 = (uint64_t *)*((void *)this + 36);
    if (v28)
    {
      while (1)
      {
        while (1)
        {
          size_t v30 = (uint64_t **)v28;
          int v31 = *((_DWORD *)v28 + 7);
          if (v31 < 1) {
            break;
          }
          size_t v28 = *v30;
          size_t v29 = v30;
          if (!*v30) {
            goto LABEL_97;
          }
        }
        if ((v31 & 0x80000000) == 0) {
          break;
        }
        size_t v28 = v30[1];
        if (!v28)
        {
          size_t v29 = v30 + 1;
          goto LABEL_97;
        }
      }
      size_t v32 = v30;
    }
    else
    {
      size_t v29 = (uint64_t **)((char *)this + 288);
      size_t v30 = (uint64_t **)((char *)this + 288);
LABEL_97:
      size_t v32 = operator new(0x28uLL);
      v32[7] = 0;
      *((unsigned char *)v32 + 32) = 0;
      *(void *)size_t v32 = 0;
      *((void *)v32 + 1) = 0;
      *((void *)v32 + 2) = v30;
      *size_t v29 = (uint64_t *)v32;
      uint64_t v33 = **((void **)this + 35);
      int v34 = (uint64_t *)v32;
      if (v33)
      {
        *((void *)this + 35) = v33;
        int v34 = *v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v34);
      ++*((void *)this + 37);
    }
    if (*((unsigned char *)v32 + 32)) {
      xpc_object_t v35 = "ON";
    }
    else {
      xpc_object_t v35 = "OFF";
    }
    LODWORD(__p) = 136315138;
    *(void *)((char *)&__p + 4) = v35;
    _os_log_impl(&dword_1C59C6000, v23, OS_LOG_TYPE_DEFAULT, "#I Tx Power Receiver Audio State: %s", (uint8_t *)&__p, 0xCu);
    xpc_object_t v23 = *((void *)this + 5);
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    size_t v36 = (uint64_t *)*((void *)this + 36);
    if (v36)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v38 = (uint64_t **)v36;
          int v39 = *((_DWORD *)v36 + 7);
          if (v39 < 2) {
            break;
          }
          size_t v36 = *v38;
          BOOL v37 = v38;
          if (!*v38) {
            goto LABEL_112;
          }
        }
        if (v39 == 1) {
          break;
        }
        size_t v36 = v38[1];
        if (!v36)
        {
          BOOL v37 = v38 + 1;
          goto LABEL_112;
        }
      }
      unsigned int v40 = v38;
    }
    else
    {
      BOOL v37 = (uint64_t **)((char *)this + 288);
      uint64_t v38 = (uint64_t **)((char *)this + 288);
LABEL_112:
      unsigned int v40 = operator new(0x28uLL);
      v40[7] = 1;
      *((unsigned char *)v40 + 32) = 0;
      *(void *)unsigned int v40 = 0;
      *((void *)v40 + 1) = 0;
      *((void *)v40 + 2) = v38;
      *BOOL v37 = (uint64_t *)v40;
      uint64_t v41 = **((void **)this + 35);
      int v42 = (uint64_t *)v40;
      if (v41)
      {
        *((void *)this + 35) = v41;
        int v42 = *v37;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v42);
      ++*((void *)this + 37);
    }
    if (*((unsigned char *)v40 + 32)) {
      xpc_object_t v43 = "ON";
    }
    else {
      xpc_object_t v43 = "OFF";
    }
    LODWORD(__p) = 136315138;
    *(void *)((char *)&__p + 4) = v43;
    _os_log_impl(&dword_1C59C6000, v23, OS_LOG_TYPE_DEFAULT, "#I Tx Power Other Audio State: %s", (uint8_t *)&__p, 0xCu);
    xpc_object_t v23 = *((void *)this + 5);
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    int v44 = (uint64_t *)*((void *)this + 36);
    if (v44)
    {
      while (1)
      {
        while (1)
        {
          unsigned int v46 = (uint64_t **)v44;
          int v47 = *((_DWORD *)v44 + 7);
          if (v47 < 4) {
            break;
          }
          int v44 = *v46;
          size_t v45 = v46;
          if (!*v46) {
            goto LABEL_128;
          }
        }
        if (v47 == 3) {
          break;
        }
        int v44 = v46[1];
        if (!v44)
        {
          size_t v45 = v46 + 1;
          goto LABEL_128;
        }
      }
      size_t v48 = v46;
    }
    else
    {
      size_t v45 = (uint64_t **)((char *)this + 288);
      unsigned int v46 = (uint64_t **)((char *)this + 288);
LABEL_128:
      size_t v48 = operator new(0x28uLL);
      v48[7] = 3;
      *((unsigned char *)v48 + 32) = 0;
      *(void *)size_t v48 = 0;
      *((void *)v48 + 1) = 0;
      *((void *)v48 + 2) = v46;
      char *v45 = (uint64_t *)v48;
      uint64_t v49 = **((void **)this + 35);
      CFDictionaryRef v50 = (uint64_t *)v48;
      if (v49)
      {
        *((void *)this + 35) = v49;
        CFDictionaryRef v50 = *v45;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v50);
      ++*((void *)this + 37);
    }
    if (*((unsigned char *)v48 + 32)) {
      uint64_t v51 = "ON";
    }
    else {
      uint64_t v51 = "OFF";
    }
    LODWORD(__p) = 136315138;
    *(void *)((char *)&__p + 4) = v51;
    _os_log_impl(&dword_1C59C6000, v23, OS_LOG_TYPE_DEFAULT, "#I Tx Power Speaker Audio State: %s", (uint8_t *)&__p, 0xCu);
    xpc_object_t v23 = *((void *)this + 5);
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    if (*((_DWORD *)this + 63)) {
      id v52 = "On-Body";
    }
    else {
      id v52 = "Off-Body";
    }
    LODWORD(__p) = 136315138;
    *(void *)((char *)&__p + 4) = v52;
    _os_log_impl(&dword_1C59C6000, v23, OS_LOG_TYPE_DEFAULT, "#I Tx Power Motion State: %s", (uint8_t *)&__p, 0xCu);
    xpc_object_t v23 = *((void *)this + 5);
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v53 = *((void *)this + 33);
    LODWORD(__p) = 134217984;
    *(void *)((char *)&__p + 4) = v53;
    _os_log_impl(&dword_1C59C6000, v23, OS_LOG_TYPE_DEFAULT, "#I Tx Power Enhanced Motion fail counter: %lld", (uint8_t *)&__p, 0xCu);
  }
LABEL_143:
  if (*((unsigned char *)this + 153))
  {
    int v54 = *((void *)this + 5);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p) = 136315138;
      *(void *)((char *)&__p + 4) = "ON";
      _os_log_impl(&dword_1C59C6000, v54, OS_LOG_TYPE_DEFAULT, "#I Tx Power Capping for iPad based on Motion support: %s", (uint8_t *)&__p, 0xCu);
      int v54 = *((void *)this + 5);
    }
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
    {
      long long __p = 0uLL;
      v124[0] = 0;
      uint64_t v55 = *((int *)this + 68);
      if (v55 < 3) {
        std::string::__assign_external((std::string *)&__p, **((const std::string::value_type ***)&unk_1E651B670 + v55));
      }
      std::string v56 = (const char *)&__p;
      if (v124[0] < 0) {
        std::string v56 = (const char *)__p;
      }
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v126 = v56;
      _os_log_impl(&dword_1C59C6000, v54, OS_LOG_TYPE_DEFAULT, "#I Tx Power Capping for iPad Motion Mode: %s", buf, 0xCu);
      if (SHIBYTE(v124[0]) < 0) {
        operator delete((void *)__p);
      }
      int v54 = *((void *)this + 5);
    }
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
    {
      if (*((_DWORD *)this + 63)) {
        std::string v57 = "On-Body";
      }
      else {
        std::string v57 = "Off-Body";
      }
      LODWORD(__p) = 136315138;
      *(void *)((char *)&__p + 4) = v57;
      _os_log_impl(&dword_1C59C6000, v54, OS_LOG_TYPE_DEFAULT, "#I Tx Power Capping for iPad Motion State: %s", (uint8_t *)&__p, 0xCu);
      int v54 = *((void *)this + 5);
    }
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
    {
      if (*((unsigned char *)this + 248)) {
        std::string v58 = "RUNNING";
      }
      else {
        std::string v58 = "OFF";
      }
      LODWORD(__p) = 136315138;
      *(void *)((char *)&__p + 4) = v58;
      _os_log_impl(&dword_1C59C6000, v54, OS_LOG_TYPE_DEFAULT, "#I Tx Power Capping for iPad Motion Algorithm: %s", (uint8_t *)&__p, 0xCu);
    }
  }
  if (*((unsigned char *)this + 155))
  {
    long long v59 = *((void *)this + 5);
    if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)&long long __p = 0x104000100;
      _os_log_impl(&dword_1C59C6000, v59, OS_LOG_TYPE_DEFAULT, "#I Tx Power Capping for iPhone with Motion Always Supported: %d", (uint8_t *)&__p, 8u);
      long long v59 = *((void *)this + 5);
      if (!os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
      {
LABEL_167:
        if (!os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_172;
        }
        goto LABEL_168;
      }
    }
    else if (!os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
    {
      goto LABEL_167;
    }
    if (*((_DWORD *)this + 63)) {
      int v64 = "On-Body";
    }
    else {
      int v64 = "Off-Body";
    }
    LODWORD(__p) = 136315138;
    *(void *)((char *)&__p + 4) = v64;
    _os_log_impl(&dword_1C59C6000, v59, OS_LOG_TYPE_DEFAULT, "#I Tx Power Capping for iPhone with Motion State: %s", (uint8_t *)&__p, 0xCu);
    long long v59 = *((void *)this + 5);
    if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
    {
LABEL_168:
      if (*((unsigned char *)this + 248)) {
        int v60 = "RUNNING";
      }
      else {
        int v60 = "OFF";
      }
      LODWORD(__p) = 136315138;
      *(void *)((char *)&__p + 4) = v60;
      _os_log_impl(&dword_1C59C6000, v59, OS_LOG_TYPE_DEFAULT, "#I Tx Power Capping for iPhone with Motion Algorithm: %s", (uint8_t *)&__p, 0xCu);
    }
  }
LABEL_172:
  if (!*((unsigned char *)this + 154)) {
    goto LABEL_198;
  }
  size_t v61 = *((void *)this + 5);
  if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)&long long __p = 0x104000100;
    _os_log_impl(&dword_1C59C6000, v61, OS_LOG_TYPE_DEFAULT, "#I Tx Power Antenna Free Space Configuration Support: %d", (uint8_t *)&__p, 8u);
    size_t v61 = *((void *)this + 5);
  }
  if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
  {
    if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild()
      || (int v62 = *((_DWORD *)this + 53), v62 == 255))
    {
      if (antenna::Service::Internal::isAudioReceiverOutputOnlyActive(this))
      {
        size_t v63 = "Not Free Space";
LABEL_191:
        LODWORD(__p) = 136315138;
        *(void *)((char *)&__p + 4) = v63;
        _os_log_impl(&dword_1C59C6000, v61, OS_LOG_TYPE_DEFAULT, "#I Tx Power Antenna Free Space Config: %s", (uint8_t *)&__p, 0xCu);
        size_t v61 = *((void *)this + 5);
        goto LABEL_192;
      }
      int v62 = *((_DWORD *)this + 63) != 0;
    }
    if (v62) {
      size_t v63 = "Not Free Space";
    }
    else {
      size_t v63 = "Free Space";
    }
    goto LABEL_191;
  }
LABEL_192:
  if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
  {
    antenna::Service::Internal::getTxPowerCappingIPhoneOverriddenFreeSpaceString_sync(this, (std::string *)&__p);
    unint64_t v65 = v124[0] >= 0 ? (const char *)&__p : (const char *)__p;
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v126 = v65;
    _os_log_impl(&dword_1C59C6000, v61, OS_LOG_TYPE_DEFAULT, "#I Tx Power Overridden Free Space: %s", buf, 0xCu);
    if (SHIBYTE(v124[0]) < 0) {
      operator delete((void *)__p);
    }
  }
LABEL_198:
  pthread_mutex_lock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  long long v66 = (Capabilities *)unk_1EBBDC788;
  if (!unk_1EBBDC788)
  {
    std::string v67 = operator new(1uLL);
    std::string v68 = operator new(0x20uLL);
    void *v68 = &unk_1F2112060;
    v68[1] = 0;
    v68[2] = 0;
    v68[3] = v67;
    uint64_t v69 = (std::__shared_weak_count *)off_1EBBDC790;
    unk_1EBBDC788 = v67;
    off_1EBBDC790 = v68;
    if (v69 && !atomic_fetch_add(&v69->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
    long long v66 = (Capabilities *)unk_1EBBDC788;
  }
  uint64_t v70 = (std::__shared_weak_count *)off_1EBBDC790;
  *(void *)&long long __p = v66;
  *((void *)&__p + 1) = off_1EBBDC790;
  if (off_1EBBDC790) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDC790 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  int isCMHandDetectionSupported = Capabilities::isCMHandDetectionSupported(v66);
  int v72 = isCMHandDetectionSupported;
  if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
    std::__shared_weak_count::__release_weak(v70);
    if (!v72) {
      goto LABEL_215;
    }
  }
  else if (!isCMHandDetectionSupported)
  {
    goto LABEL_215;
  }
  size_t v73 = *((void *)this + 5);
  if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
  {
    int v74 = (void *)((char *)this + 536);
    if (*((char *)this + 559) < 0) {
      int v74 = (void *)*v74;
    }
    LODWORD(__p) = 136315138;
    *(void *)((char *)&__p + 4) = v74;
    _os_log_impl(&dword_1C59C6000, v73, OS_LOG_TYPE_DEFAULT, "#I Motion Hand Detection Overriding: %s", (uint8_t *)&__p, 0xCu);
    size_t v73 = *((void *)this + 5);
  }
  if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
  {
    int v75 = *((_DWORD *)this + 132);
    LODWORD(__p) = 67109120;
    DWORD1(__p) = v75;
    _os_log_impl(&dword_1C59C6000, v73, OS_LOG_TYPE_DEFAULT, "#I Motion Hand Detection State: %d", (uint8_t *)&__p, 8u);
  }
LABEL_215:
  if (*((unsigned char *)this + 169))
  {
    uint64_t v76 = *((void *)this + 5);
    if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
    {
      ctu::iokit::asString();
      if (v124[0] >= 0) {
        unsigned int v77 = (const char *)&__p;
      }
      else {
        unsigned int v77 = (const char *)__p;
      }
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v126 = v77;
      _os_log_impl(&dword_1C59C6000, v76, OS_LOG_TYPE_DEFAULT, "#I Current Power Source: %s", buf, 0xCu);
      if (SHIBYTE(v124[0]) < 0) {
        operator delete((void *)__p);
      }
      uint64_t v76 = *((void *)this + 5);
    }
    if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
    {
      if (*((_DWORD *)this + 142) != -1
        && ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild()))
      {
        ctu::iokit::asString();
        if (v124[0] >= 0) {
          char v78 = (const char *)&__p;
        }
        else {
          char v78 = (const char *)__p;
        }
        *(_DWORD *)std::string buf = 136315138;
        uint64_t v126 = v78;
        _os_log_impl(&dword_1C59C6000, v76, OS_LOG_TYPE_DEFAULT, "#I Current Power Source Overridden Value: %s", buf, 0xCu);
        if (SHIBYTE(v124[0]) < 0) {
          operator delete((void *)__p);
        }
      }
      else
      {
        *(_DWORD *)std::string buf = 136315138;
        uint64_t v126 = "AUTO";
        _os_log_impl(&dword_1C59C6000, v76, OS_LOG_TYPE_DEFAULT, "#I Current Power Source Overridden Value: %s", buf, 0xCu);
      }
    }
  }
  if (!*((unsigned char *)this + 170)) {
    goto LABEL_283;
  }
  int v79 = *((void *)this + 5);
  if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
  {
    int v80 = (void *)((char *)this + 640);
    if (*((char *)this + 663) < 0) {
      int v80 = (void *)*v80;
    }
    LODWORD(__p) = 136315138;
    *(void *)((char *)&__p + 4) = v80;
    _os_log_impl(&dword_1C59C6000, v79, OS_LOG_TYPE_DEFAULT, "#I Device Material Overridden State: %s", (uint8_t *)&__p, 0xCu);
    int v79 = *((void *)this + 5);
  }
  if (!os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_283;
  }
  int v81 = (uint64_t **)((char *)this + 624);
  unsigned int v82 = (uint64_t *)*((void *)this + 78);
  uint64_t v83 = (uint64_t **)((char *)this + 624);
  uint64_t v84 = (uint64_t **)((char *)this + 624);
  if (v82)
  {
    int v85 = (char *)*((void *)this + 78);
    while (1)
    {
      while (1)
      {
        uint64_t v84 = (uint64_t **)v85;
        unsigned int v86 = *((_DWORD *)v85 + 7);
        if (v86 < 2) {
          break;
        }
        int v85 = (char *)*v84;
        uint64_t v83 = v84;
        if (!*v84) {
          goto LABEL_246;
        }
      }
      if (v86) {
        break;
      }
      int v85 = (char *)v84[1];
      if (!v85)
      {
        uint64_t v83 = v84 + 1;
        goto LABEL_246;
      }
    }
    unsigned int v90 = *((_DWORD *)v84 + 8);
    goto LABEL_251;
  }
LABEL_246:
  long long v87 = (uint64_t *)operator new(0x28uLL);
  *(uint64_t *)((char *)v87 + 28) = 1;
  *long long v87 = 0;
  v87[1] = 0;
  v87[2] = (uint64_t)v84;
  *uint64_t v83 = v87;
  uint64_t v88 = **((void **)this + 77);
  char v89 = v87;
  if (v88)
  {
    *((void *)this + 77) = v88;
    char v89 = *v83;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 78), v89);
  ++*((void *)this + 79);
  unsigned int v82 = (uint64_t *)*((void *)this + 78);
  unsigned int v90 = *((_DWORD *)v87 + 8);
  char v91 = (uint64_t **)((char *)this + 624);
  int v92 = (uint64_t **)((char *)this + 624);
  if (v82)
  {
LABEL_251:
    uint64_t v93 = (char *)v82;
    while (1)
    {
      while (1)
      {
        int v92 = (uint64_t **)v93;
        unsigned int v94 = *((_DWORD *)v93 + 7);
        if (v94 < 3) {
          break;
        }
        uint64_t v93 = (char *)*v92;
        char v91 = v92;
        if (!*v92) {
          goto LABEL_257;
        }
      }
      if (v94 == 2) {
        break;
      }
      uint64_t v93 = (char *)v92[1];
      if (!v93)
      {
        char v91 = v92 + 1;
        goto LABEL_257;
      }
    }
    int v98 = *((_DWORD *)v92 + 8);
    goto LABEL_262;
  }
LABEL_257:
  long long v95 = (uint64_t *)operator new(0x28uLL);
  *(uint64_t *)((char *)v95 + 28) = 2;
  uint64_t *v95 = 0;
  v95[1] = 0;
  v95[2] = (uint64_t)v92;
  uint64_t *v91 = v95;
  uint64_t v96 = **((void **)this + 77);
  uint64_t v97 = v95;
  if (v96)
  {
    *((void *)this + 77) = v96;
    uint64_t v97 = *v91;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 78), v97);
  ++*((void *)this + 79);
  unsigned int v82 = (uint64_t *)*((void *)this + 78);
  int v98 = *((_DWORD *)v95 + 8);
  char v99 = (uint64_t **)((char *)this + 624);
  xpc_object_t v100 = (uint64_t **)((char *)this + 624);
  if (v82)
  {
LABEL_262:
    int v101 = (char *)v82;
    do
    {
      while (1)
      {
        xpc_object_t v100 = (uint64_t **)v101;
        unsigned int v102 = *((_DWORD *)v101 + 7);
        if (v102 < 4) {
          break;
        }
        int v101 = (char *)*v100;
        char v99 = v100;
        if (!*v100) {
          goto LABEL_268;
        }
      }
      if (v102 == 3)
      {
        int v106 = *((_DWORD *)v100 + 8);
        goto LABEL_274;
      }
      int v101 = (char *)v100[1];
    }
    while (v101);
    char v99 = v100 + 1;
  }
LABEL_268:
  long long v103 = (uint64_t *)operator new(0x28uLL);
  *(uint64_t *)((char *)v103 + 28) = 3;
  *long long v103 = 0;
  v103[1] = 0;
  v103[2] = (uint64_t)v100;
  std::__shared_weak_count *v99 = v103;
  uint64_t v104 = **((void **)this + 77);
  __n128 v105 = v103;
  if (v104)
  {
    *((void *)this + 77) = v104;
    __n128 v105 = *v99;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 78), v105);
  ++*((void *)this + 79);
  unsigned int v82 = (uint64_t *)*((void *)this + 78);
  int v106 = *((_DWORD *)v103 + 8);
  int v107 = (uint64_t **)((char *)this + 624);
  if (v82)
  {
    while (1)
    {
LABEL_274:
      while (1)
      {
        int v107 = (uint64_t **)v82;
        unsigned int v108 = *((_DWORD *)v82 + 7);
        if (v108 < 5) {
          break;
        }
        unsigned int v82 = *v107;
        int v81 = v107;
        if (!*v107) {
          goto LABEL_278;
        }
      }
      if (v108 == 4) {
        break;
      }
      unsigned int v82 = v107[1];
      if (!v82)
      {
        int v81 = v107 + 1;
        goto LABEL_278;
      }
    }
    int v109 = (uint64_t *)v107;
  }
  else
  {
LABEL_278:
    int v109 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v109 + 28) = 4;
    *int v109 = 0;
    v109[1] = 0;
    v109[2] = (uint64_t)v107;
    *int v81 = v109;
    uint64_t v110 = **((void **)this + 77);
    long long v111 = v109;
    if (v110)
    {
      *((void *)this + 77) = v110;
      long long v111 = *v81;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 78), v111);
    ++*((void *)this + 79);
  }
  int v112 = *((_DWORD *)v109 + 8);
  *(void *)&long long __p = __PAIR64__(v90, 67109888);
  WORD4(__p) = 1024;
  *(_DWORD *)((char *)&__p + 10) = v98;
  HIWORD(__p) = 1024;
  LODWORD(v124[0]) = v106;
  WORD2(v124[0]) = 1024;
  *(_DWORD *)((char *)v124 + 6) = v112;
  _os_log_impl(&dword_1C59C6000, v79, OS_LOG_TYPE_DEFAULT, "#I Current Device Material Values are as Bottom Enclosure: %d, Top Enclosure: %d, FCM Type: %d, BCM Type: %d", (uint8_t *)&__p, 0x1Au);
LABEL_283:
  if (*((unsigned char *)this + 688))
  {
    int v113 = *((void *)this + 5);
    if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v114 = (void *)((char *)this + 696);
      if (*((char *)this + 719) < 0) {
        uint64_t v114 = (void *)*v114;
      }
      LODWORD(__p) = 136315138;
      *(void *)((char *)&__p + 4) = v114;
      _os_log_impl(&dword_1C59C6000, v113, OS_LOG_TYPE_DEFAULT, "#I Workout info override: %s", (uint8_t *)&__p, 0xCu);
      int v113 = *((void *)this + 5);
    }
    if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
    {
      int v115 = *((_DWORD *)this + 180);
      int v116 = *((_DWORD *)this + 181);
      LODWORD(__p) = 67109376;
      DWORD1(__p) = v115;
      WORD4(__p) = 1024;
      *(_DWORD *)((char *)&__p + 10) = v116;
      _os_log_impl(&dword_1C59C6000, v113, OS_LOG_TYPE_DEFAULT, "#I Workout info: Type=%d, State=%d", (uint8_t *)&__p, 0xEu);
    }
  }
  if (*((unsigned char *)this + 192))
  {
    uint64_t v117 = *((void *)this + 5);
    if (os_log_type_enabled(v117, OS_LOG_TYPE_DEFAULT))
    {
      if (*((unsigned char *)this + 561)) {
        int v118 = "CLOSED";
      }
      else {
        int v118 = "OPENED";
      }
      LODWORD(__p) = 136315138;
      *(void *)((char *)&__p + 4) = v118;
      _os_log_impl(&dword_1C59C6000, v117, OS_LOG_TYPE_DEFAULT, "#I Smart Keyboard Cover: %s", (uint8_t *)&__p, 0xCu);
    }
  }
  if (*((_DWORD *)this + 43))
  {
    long long v119 = *((void *)this + 5);
    if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
    {
      int v120 = *((unsigned __int8 *)this + 736);
      LODWORD(__p) = 67109120;
      DWORD1(__p) = v120;
      _os_log_impl(&dword_1C59C6000, v119, OS_LOG_TYPE_DEFAULT, "#I Face ID Support Version: %d", (uint8_t *)&__p, 8u);
    }
  }
  if (*((unsigned char *)this + 176))
  {
    uint64_t v121 = *((void *)this + 5);
    if (os_log_type_enabled(v121, OS_LOG_TYPE_DEFAULT))
    {
      if (*((unsigned char *)this + 737)) {
        xpc_object_t v122 = "ON";
      }
      else {
        xpc_object_t v122 = "OFF";
      }
      LODWORD(__p) = 136315138;
      *(void *)((char *)&__p + 4) = v122;
      _os_log_impl(&dword_1C59C6000, v121, OS_LOG_TYPE_DEFAULT, "#I Front Camera: %s", (uint8_t *)&__p, 0xCu);
    }
  }
}

void sub_1C5A94284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void antenna::Service::Internal::dumpState(antenna::Service::Internal *this)
{
  xpc_object_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (uint64_t v3 = *((void *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v5 = v4;
  uint64_t v6 = operator new(8uLL);
  void *v6 = this;
  int v7 = *((void *)this + 11);
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  int v8 = operator new(0x18uLL);
  *int v8 = v6;
  v8[1] = v3;
  void v8[2] = v5;
  dispatch_async_f(v7, v8, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::dumpState(void)::$_0>(antenna::Service::Internal::dumpState(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::dumpState(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::dumpState(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void ___ZN7antenna7Service8Internal14enablePPM_syncEb_block_invoke(uint64_t a1)
{
  xpc_object_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    xpc_object_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      xpc_object_t v5 = v4;
      uint64_t v6 = *(void *)(a1 + 40);
      if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v6) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6) {
          return;
        }
      }
      if (*(unsigned char *)(a1 + 64))
      {
        xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
        if (v7 || (xpc_object_t v7 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C8795EB0](v7) == MEMORY[0x1E4F14590])
          {
            xpc_retain(v7);
            xpc_object_t v8 = v7;
          }
          else
          {
            xpc_object_t v8 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v8 = xpc_null_create();
          xpc_object_t v7 = 0;
        }
        xpc_release(v7);
        xpc_object_t v9 = xpc_string_create((const char *)*MEMORY[0x1E4FB9D88]);
        if (!v9) {
          xpc_object_t v9 = xpc_null_create();
        }
        xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E4FB9C68], v9);
        xpc_object_t v10 = xpc_null_create();
        xpc_release(v9);
        xpc_release(v10);
        uint64_t v11 = *(void *)(v3 + 120);
        xpc_object_t v22 = v8;
        if (v8) {
          xpc_retain(v8);
        }
        else {
          xpc_object_t v22 = xpc_null_create();
        }
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 1174405120;
        aBlock[2] = ___ZN7antenna7Service8Internal14enablePPM_syncEb_block_invoke_2;
        aBlock[3] = &__block_descriptor_tmp_30_0;
        uint64_t v13 = *(void *)(a1 + 40);
        int v12 = *(std::__shared_weak_count **)(a1 + 48);
        void aBlock[4] = v3;
        void aBlock[5] = v13;
        xpc_object_t v18 = v12;
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        xpc_object_t v14 = *(void **)(a1 + 56);
        xpc_object_t v19 = v14;
        if (v14) {
          xpc_retain(v14);
        }
        else {
          xpc_object_t v19 = xpc_null_create();
        }
        xpc_object_t v15 = _Block_copy(aBlock);
        xpc_object_t v16 = *(NSObject **)(v3 + 88);
        if (v16) {
          dispatch_retain(*(dispatch_object_t *)(v3 + 88));
        }
        int v20 = v15;
        dispatch_object_t object = v16;
        (*(void (**)(uint64_t, xpc_object_t *, void **))(*(void *)v11 + 48))(v11, &v22, &v20);
        if (object) {
          dispatch_release(object);
        }
        if (v20) {
          _Block_release(v20);
        }
        xpc_release(v22);
        xpc_object_t v22 = 0;
        xpc_release(v19);
        xpc_object_t v19 = 0;
        if (v18) {
          std::__shared_weak_count::__release_weak(v18);
        }
        xpc_release(v8);
      }
    }
  }
}

void sub_1C5A946A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, xpc_object_t object, char a18)
{
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback((uint64_t)&a18);
  xpc_release(object);
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  xpc_release(*(xpc_object_t *)(v19 - 56));
  *(void *)(v19 - 56) = 0;
  xpc_release(v18);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_40c50_ZTSNSt3__18weak_ptrIN7antenna7Service8InternalEEE56c15_ZTSN3xpc4dictE(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v4 = (void *)a2[7];
  a1[7] = v4;
  if (v4) {
    return xpc_retain(v4);
  }
  xpc_object_t result = xpc_null_create();
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c50_ZTSNSt3__18weak_ptrIN7antenna7Service8InternalEEE56c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(void *)(a1 + 56) = 0;
  xpc_object_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void *antenna::Service::Service(void *a1, uint64_t *a2, uint64_t a3, NSObject **a4)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v7 = a2[1];
  uint64_t v19 = *a2;
  int v20 = (std::__shared_weak_count *)v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v8 = *(void **)a3;
  if (*(void *)a3) {
    xpc_object_t v8 = _Block_copy(v8);
  }
  xpc_object_t v9 = *(NSObject **)(a3 + 8);
  long long aBlock = v8;
  dispatch_object_t v18 = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  xpc_object_t v10 = *a4;
  dispatch_object_t object = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  antenna::Service::Internal::create(&v19, (uint64_t)&aBlock, &object, (antenna::Service::Internal **)&v21);
  long long v11 = v21;
  long long v21 = 0uLL;
  int v12 = (std::__shared_weak_count *)a1[1];
  *(_OWORD *)a1 = v11;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  uint64_t v13 = (std::__shared_weak_count *)*((void *)&v21 + 1);
  if (*((void *)&v21 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v18) {
    dispatch_release(v18);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_object_t v14 = v20;
  if (!v20 || atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  return a1;
}

void sub_1C5A9499C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  if (v14) {
    dispatch_release(v14);
  }
  dispatch::callback<void({block_pointer})(xpc::dict)>::~callback((uint64_t)&a11);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v13);
  _Unwind_Resume(a1);
}

void antenna::Service::~Service(antenna::Service *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;

  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void antenna::Service::startService(antenna::Service::Internal **this)
{
  uint64_t v1 = *this;
  if (v1) {
    antenna::Service::Internal::startService(v1);
  }
}

void antenna::Service::stopService(antenna::Service::Internal **this)
{
  uint64_t v1 = *this;
  if (v1) {
    antenna::Service::Internal::stopService(v1);
  }
}

void antenna::Service::exitLowPower(antenna::Service::Internal **this)
{
  uint64_t v1 = *this;
  if (v1) {
    antenna::Service::Internal::exitLowPower(v1);
  }
}

void antenna::Service::enterLowPower(antenna::Service::Internal **this)
{
  uint64_t v1 = *this;
  if (v1) {
    antenna::Service::Internal::enterLowPower(v1);
  }
}

void antenna::Service::setMotionThresholds(CMOnBodyDelegate ***a1, ctu **a2)
{
  xpc_object_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = *a2;
    xpc_object_t v4 = v3;
    if (v3)
    {
      xpc_retain(v3);
    }
    else
    {
      uint64_t v3 = (ctu *)xpc_null_create();
      xpc_object_t v4 = v3;
    }
    antenna::Service::Internal::setMotionThresholds(v2, &v4);
    xpc_release(v3);
  }
}

void sub_1C5A94B70(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

void antenna::Service::callActive(antenna::Service *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this)
  {
    xpc_object_t v2 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)xpc_object_t v4 = 0;
      _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Call Active!", v4, 2u);
    }
    *(unsigned char *)(v1 + 165) = 1;
    if (*(unsigned char *)(v1 + 162))
    {
      uint64_t v3 = *(void *)(v1 + 376);
      if (v3)
      {
        if (*(void *)(v3 + 72)) {
          ctu::iokit::Controller::setMesaQuality();
        }
      }
    }
  }
}

void antenna::Service::callInactive(antenna::Service *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this)
  {
    xpc_object_t v2 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)xpc_object_t v4 = 0;
      _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Call Inactive!", v4, 2u);
    }
    *(unsigned char *)(v1 + 165) = 0;
    if (*(unsigned char *)(v1 + 162))
    {
      uint64_t v3 = *(void *)(v1 + 376);
      if (v3)
      {
        if (*(void *)(v3 + 72)) {
          ctu::iokit::Controller::setMesaQuality();
        }
      }
    }
  }
}

void antenna::Service::antennaSetProperty(antenna::Service::Internal **this, xpc_object_t *a2)
{
  xpc_object_t v2 = *this;
  if (v2) {
    antenna::Service::Internal::antennaSetProperty(v2, a2);
  }
}

void antenna::Service::antennaGetProperty(NSObject ***this@<X0>, void **a2@<X1>, void *a3@<X8>)
{
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v6 = xpc_null_create();
  *a3 = v6;
  if (*this)
  {
    antenna::Service::Internal::antennaGetProperty(*this, a2, &v9);
    xpc_object_t v7 = v9;
    xpc_object_t v8 = xpc_null_create();
    *a3 = v7;
    xpc_release(v6);
    xpc_release(v8);
  }
}

void sub_1C5A94D50(_Unwind_Exception *a1)
{
  xpc::dict::~dict(v1);
  _Unwind_Resume(a1);
}

void antenna::Service::dumpState(antenna::Service::Internal **this)
{
  uint64_t v1 = *this;
  if (v1) {
    antenna::Service::Internal::dumpState(v1);
  }
}

void antenna::Service::shutdown(antenna::Service::Internal **this)
{
  uint64_t v1 = *this;
  if (v1) {
    antenna::Service::Internal::shutdown(v1);
  }
}

void antenna::Service::Internal::~Internal(xpc_object_t *this)
{
  antenna::Service::Internal::~Internal(this);

  operator delete(v1);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  NSObject *v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  NSObject *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  NSObject *v14;
  xpc_object_t v15;
  NSObject *v16;
  NSObject *v17;
  std::__shared_weak_count *v18;

  *this = &unk_1F21081B8;
  antenna::Service::Internal::stopTxPowerCapping_sync((antenna::Service::Internal *)this);
  if (*((char *)this + 719) < 0) {
    operator delete(this[87]);
  }
  xpc_object_t v2 = (std::__shared_weak_count *)this[85];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*((char *)this + 663) & 0x80000000) == 0)
    {
LABEL_6:
      std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(this[78]);
      if ((*((char *)this + 615) & 0x80000000) == 0) {
        goto LABEL_7;
      }
      goto LABEL_11;
    }
  }
  else if ((*((char *)this + 663) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(this[80]);
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(this[78]);
  if ((*((char *)this + 615) & 0x80000000) == 0)
  {
LABEL_7:
    uint64_t v3 = (std::__shared_weak_count *)this[73];
    if (!v3) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(this[74]);
  uint64_t v3 = (std::__shared_weak_count *)this[73];
  if (!v3) {
    goto LABEL_13;
  }
LABEL_12:
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if ((*((char *)this + 559) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_13:
  if (*((char *)this + 559) < 0) {
LABEL_14:
  }
    operator delete(this[67]);
LABEL_15:
  xpc_object_t v4 = (std::__shared_weak_count *)this[65];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  xpc_object_t v5 = (std::__shared_weak_count *)this[63];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(this[56]);
    if ((*((char *)this + 439) & 0x80000000) == 0)
    {
LABEL_21:
      if ((*((char *)this + 415) & 0x80000000) == 0) {
        goto LABEL_22;
      }
      goto LABEL_28;
    }
  }
  else
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(this[56]);
    if ((*((char *)this + 439) & 0x80000000) == 0) {
      goto LABEL_21;
    }
  }
  operator delete(this[52]);
  if ((*((char *)this + 415) & 0x80000000) == 0)
  {
LABEL_22:
    xpc_object_t v6 = (std::__shared_weak_count *)this[48];
    if (!v6) {
      goto LABEL_31;
    }
    goto LABEL_29;
  }
LABEL_28:
  operator delete(this[49]);
  xpc_object_t v6 = (std::__shared_weak_count *)this[48];
  if (!v6) {
    goto LABEL_31;
  }
LABEL_29:
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_31:
  xpc_object_t v7 = this[45];
  if (v7) {
    dispatch_release(v7);
  }
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(this[39]);
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(this[36]);
  xpc_object_t v8 = this[32];
  if (v8) {
    dispatch_release(v8);
  }
  xpc_object_t v9 = (std::__shared_weak_count *)this[30];
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  xpc_release(this[28]);
  this[28] = 0;
  xpc_object_t v10 = this[25];
  if (v10) {
    dispatch_release(v10);
  }
  long long v11 = this[23];
  if (v11) {
    dispatch_release(v11);
  }
  int v12 = (std::__shared_weak_count *)this[18];
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  uint64_t v13 = (std::__shared_weak_count *)this[16];
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  xpc_object_t v14 = this[14];
  if (v14) {
    dispatch_release(v14);
  }
  xpc_object_t v15 = this[13];
  if (v15) {
    _Block_release(v15);
  }
  *this = &unk_1F21083D8;
  MEMORY[0x1C87940C0](this + 1);
  xpc_object_t v16 = this[12];
  if (v16) {
    dispatch_release(v16);
  }
  xpc_object_t v17 = this[11];
  if (v17) {
    dispatch_release(v17);
  }
  dispatch_object_t v18 = (std::__shared_weak_count *)this[10];
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
}

uint64_t ctu::Loggable<antenna::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

void ctu::Loggable<antenna::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "antenna.svc");
}

uint64_t ctu::Loggable<antenna::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<antenna::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F21083D8;
  MEMORY[0x1C87940C0](a1 + 1);
  return a1;
}

void ctu::Loggable<antenna::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F21083D8;
  MEMORY[0x1C87940C0](a1 + 1);

  operator delete(a1);
}

void ___ZN7antenna7Service8Internal25performCommandDriver_syncEN3xpc4dictEN8dispatch8callbackIU13block_pointerFvNS2_6objectEEEE_block_invoke(uint64_t a1, char a2, xpc_object_t *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  xpc_object_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    xpc_object_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      xpc_object_t v9 = v8;
      uint64_t v10 = *(void *)(a1 + 40);
      if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v10) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v9);
        if (!v10) {
          return;
        }
      }
      if ((a2 & 1) == 0)
      {
        uint64_t v11 = *MEMORY[0x1E4FB9C68];
        if (xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 56), (const char *)*MEMORY[0x1E4FB9C68]))
        {
          int v12 = *(NSObject **)(v7 + 40);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            v19[0] = a1 + 56;
            v19[1] = v11;
            xpc::dict::object_proxy::operator xpc::object((uint64_t)v19, &v20);
            xpc::dyn_cast_or_default((uint64_t *)block, (xpc *)&v20, (const object *)"None", v17);
            if (SHIBYTE(v22) >= 0) {
              dispatch_object_t v18 = block;
            }
            else {
              dispatch_object_t v18 = (void **)block[0];
            }
            *(_DWORD *)std::string buf = 136315138;
            int v27 = v18;
            _os_log_error_impl(&dword_1C59C6000, v12, OS_LOG_TYPE_ERROR, "Failed to run command driver: %s", buf, 0xCu);
            if (SHIBYTE(v22) < 0) {
              operator delete(block[0]);
            }
            xpc_release(v20);
          }
        }
      }
      if (*(void *)(a1 + 64) && *(void *)(a1 + 72))
      {
        xpc_object_t v13 = *a3;
        if (v13)
        {
          xpc_retain(v13);
          xpc_object_t v14 = *(const void **)(a1 + 64);
          if (v14)
          {
LABEL_14:
            xpc_object_t v15 = _Block_copy(v14);
            goto LABEL_17;
          }
        }
        else
        {
          xpc_object_t v13 = xpc_null_create();
          xpc_object_t v14 = *(const void **)(a1 + 64);
          if (v14) {
            goto LABEL_14;
          }
        }
        xpc_object_t v15 = 0;
LABEL_17:
        xpc_object_t v16 = *(NSObject **)(a1 + 72);
        block[0] = (void *)MEMORY[0x1E4F143A8];
        block[1] = (void *)1174405120;
        xpc_object_t v22 = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectEEEclIJS2_EEEvDpT__block_invoke;
        xpc_object_t v23 = &__block_descriptor_tmp_48_1;
        if (v15)
        {
          long long aBlock = _Block_copy(v15);
          xpc_object_t object = v13;
          if (v13)
          {
LABEL_19:
            xpc_retain(v13);
LABEL_22:
            dispatch_async(v16, block);
            xpc_release(object);
            xpc_object_t object = 0;
            if (aBlock) {
              _Block_release(aBlock);
            }
            if (v15) {
              _Block_release(v15);
            }
            xpc_release(v13);
            return;
          }
        }
        else
        {
          long long aBlock = 0;
          xpc_object_t object = v13;
          if (v13) {
            goto LABEL_19;
          }
        }
        xpc_object_t object = xpc_null_create();
        goto LABEL_22;
      }
    }
  }
}

void sub_1C5A95120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void __copy_helper_block_e8_40c50_ZTSNSt3__18weak_ptrIN7antenna7Service8InternalEEE56c16_ZTSKN3xpc4dictE64c58_ZTSN8dispatch8callbackIU13block_pointerFvN3xpc6objectEEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v5 = (void *)a2[7];
  a1[7] = v5;
  if (!v5)
  {
    a1[7] = xpc_null_create();
    xpc_object_t v6 = (void *)a2[8];
    if (!v6) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  xpc_retain(v5);
  xpc_object_t v6 = (void *)a2[8];
  if (v6) {
LABEL_7:
  }
    xpc_object_t v6 = _Block_copy(v6);
LABEL_8:
  uint64_t v7 = a2[9];
  a1[8] = v6;
  a1[9] = v7;
  if (v7)
  {
    dispatch_retain(v7);
  }
}

void __destroy_helper_block_e8_40c50_ZTSNSt3__18weak_ptrIN7antenna7Service8InternalEEE56c16_ZTSKN3xpc4dictE64c58_ZTSN8dispatch8callbackIU13block_pointerFvN3xpc6objectEEEE(uint64_t a1)
{
  xpc_object_t v2 = *(NSObject **)(a1 + 72);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 64);
  if (v3) {
    _Block_release(v3);
  }
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(void *)(a1 + 56) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectEEEclIJS2_EEEvDpT__block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(void **)(a1 + 40);
  xpc_object_t object = v1;
  if (v1) {
    xpc_retain(v1);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, xpc_object_t *))(v2 + 16))(v2, &object);
  xpc_release(object);
}

void sub_1C5A952E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

xpc_object_t __copy_helper_block_e8_32c55_ZTSN8dispatch5blockIU13block_pointerFvN3xpc6objectEEEE40c17_ZTSN3xpc6objectE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const void **)(a2 + 32);
  if (v4)
  {
    xpc_object_t v5 = _Block_copy(v4);
    xpc_object_t v6 = *(void **)(a2 + 40);
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v6;
    if (v6) {
      return xpc_retain(v6);
    }
  }
  else
  {
    xpc_object_t v6 = *(void **)(a2 + 40);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = v6;
    if (v6) {
      return xpc_retain(v6);
    }
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_32c55_ZTSN8dispatch5blockIU13block_pointerFvN3xpc6objectEEEE40c17_ZTSN3xpc6objectE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
    _Block_release(v2);
  }
}

void std::__shared_ptr_pointer<antenna::Service::Internal *,std::shared_ptr<antenna::Service::Internal> ctu::SharedSynchronizable<antenna::Service::Internal>::make_shared_ptr<antenna::Service::Internal>(antenna::Service::Internal*)::{lambda(antenna::Service::Internal *)#1},std::allocator<antenna::Service::Internal>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<antenna::Service::Internal *,std::shared_ptr<antenna::Service::Internal> ctu::SharedSynchronizable<antenna::Service::Internal>::make_shared_ptr<antenna::Service::Internal>(antenna::Service::Internal*)::{lambda(antenna::Service::Internal *)#1},std::allocator<antenna::Service::Internal>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<antenna::Service::Internal *,std::shared_ptr<antenna::Service::Internal> ctu::SharedSynchronizable<antenna::Service::Internal>::make_shared_ptr<antenna::Service::Internal>(antenna::Service::Internal*)::{lambda(antenna::Service::Internal *)#1},std::allocator<antenna::Service::Internal>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN7antenna7Service8InternalEE15make_shared_ptrIS3_EENSt3__110shared_ptr"
                     "IT_EEPS8_EUlPS3_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN7antenna7Service8InternalEE15make_shared_ptrIS3_EENSt3__11"
                                "0shared_ptrIT_EEPS8_EUlPS3_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN7antenna7Service8InternalEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN7antenna7Service8InternalEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<antenna::Service::Internal> ctu::SharedSynchronizable<antenna::Service::Internal>::make_shared_ptr<antenna::Service::Internal>(antenna::Service::Internal*)::{lambda(antenna::Service::Internal*)#1}::operator() const(antenna::Service::Internal*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ctu::SharedLoggable<antenna::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F21083D8;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

uint64_t ctu::PthreadMutexGuardPolicy<Capabilities>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void **std::unique_ptr<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::init(void)::$_0>(antenna::Service::Internal::init(void)::$_0 &&)::{lambda(void)#1},std::default_delete<antenna::Service::Internal::init(void)::$_0 &&>>::~unique_ptr[abi:ne180100](void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    unint64_t v3 = (std::__shared_weak_count *)v2[2];
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    operator delete(v2);
  }
  return a1;
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::init(void)::$_0>(antenna::Service::Internal::init(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::init(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::init(void)::$_0>>)::{lambda(void *)#1}::operator()(uint64_t **a1)
{
  uint64_t v189 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  antenna::Service::Internal::configuration_sync((antenna::Service::Internal *)v2);
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (xpc_object_t v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v3) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v3);
      xpc_object_t v4 = v3;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v3 = 0;
  }
  xpc_release(v3);
  xpc_object_t v5 = xpc_null_create();
  xpc_object_t v6 = *(void **)(v2 + 224);
  *(void *)(v2 + 224) = v4;
  xpc_release(v6);
  xpc_release(v5);
  xpc_object_t v7 = xpc_string_create((const char *)*MEMORY[0x1E4F4CDB0]);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(v2 + 224), (const char *)*MEMORY[0x1E4F4CD50], v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  xpc_object_t v9 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v10 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)buf, v9);
    long long v11 = *(_OWORD *)buf;
    *(void *)std::string buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    int v12 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v11;
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    xpc_object_t v13 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    uint64_t v10 = off_1EBBDCA08;
  }
  v184[1] = v10;
  int v185 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  xpc_object_t v14 = *(NSObject **)(v2 + 96);
  v184[0] = v14;
  if (v14) {
    dispatch_retain(v14);
  }
  (*((void (**)(uint8_t *__return_ptr, NSObject *, dispatch_object_t *))v10->isa + 7))(v188, v10, v184);
  long long v16 = *(_OWORD *)v188;
  *(void *)xpc_object_t v188 = 0;
  *(void *)&v188[8] = 0;
  xpc_object_t v17 = *(std::__shared_weak_count **)(v2 + 128);
  *(_OWORD *)(v2 + 120) = v16;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  dispatch_object_t v18 = *(std::__shared_weak_count **)&v188[8];
  if (*(void *)&v188[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v188[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  if (v184[0]) {
    dispatch_release(v184[0]);
  }
  uint64_t v19 = v185;
  if (v185 && !atomic_fetch_add(&v185->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    if (*(void *)(v2 + 120)) {
      goto LABEL_35;
    }
  }
  else if (*(void *)(v2 + 120))
  {
    goto LABEL_35;
  }
  xpc_object_t v20 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl(&dword_1C59C6000, v20, OS_LOG_TYPE_ERROR, "Failed to create command driver", buf, 2u);
  }
LABEL_35:
  if (!*(unsigned char *)(v2 + 152) && !*(unsigned char *)(v2 + 153)) {
    goto LABEL_69;
  }
  long long v21 = *(NSObject **)(v2 + 88);
  v183 = v21;
  if (v21) {
    dispatch_retain(v21);
  }
  CMOnBodyDelegate::create(&v183, v15, buf);
  long long v22 = *(_OWORD *)buf;
  *(void *)std::string buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  xpc_object_t v23 = *(std::__shared_weak_count **)(v2 + 240);
  *(_OWORD *)(v2 + 232) = v22;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  int v24 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  if (v183) {
    dispatch_release(v183);
  }
  if (*(void *)(v2 + 232))
  {
    uint64_t v25 = *(std::__shared_weak_count **)(v2 + 80);
    if (!v25 || (uint64_t v26 = *(void *)(v2 + 72), (v27 = std::__shared_weak_count::lock(v25)) == 0)) {
LABEL_354:
    }
      std::__throw_bad_weak_ptr[abi:ne180100]();
    uint64_t v28 = v27;
    p_shared_weak_owners = &v27->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v27->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v28);
    }
    size_t v30 = *(void **)(v2 + 232);
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_61_2;
    void aBlock[4] = v2;
    void aBlock[5] = v26;
    int v180 = v28;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    int v31 = _Block_copy(aBlock);
    size_t v32 = *(NSObject **)(v2 + 88);
    if (v32) {
      dispatch_retain(*(dispatch_object_t *)(v2 + 88));
    }
    xpc_object_t v181 = v31;
    dispatch_object_t v182 = v32;
    uint64_t v33 = (void *)v30[4];
    if ((unint64_t)v33 >= v30[5])
    {
      xpc_object_t v35 = std::vector<dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)> const&>(v30 + 3, (uint64_t)&v181);
      goto LABEL_62;
    }
    if (v31)
    {
      int v34 = _Block_copy(v31);
      size_t v32 = v182;
      *uint64_t v33 = v34;
      v33[1] = v32;
      if (!v32)
      {
LABEL_58:
        xpc_object_t v35 = v33 + 2;
LABEL_62:
        v30[4] = v35;
        if (v182) {
          dispatch_release(v182);
        }
        if (v181) {
          _Block_release(v181);
        }
        if (v180) {
          std::__shared_weak_count::__release_weak(v180);
        }
        std::__shared_weak_count::__release_weak(v28);
        goto LABEL_69;
      }
    }
    else
    {
      *uint64_t v33 = 0;
      v33[1] = v32;
      if (!v32) {
        goto LABEL_58;
      }
    }
    dispatch_retain(v32);
    goto LABEL_58;
  }
  size_t v36 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl(&dword_1C59C6000, v36, OS_LOG_TYPE_ERROR, "Failed to create on-body handler", buf, 2u);
  }
LABEL_69:
  BOOL v37 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v37) {
    goto LABEL_354;
  }
  uint64_t v38 = *(void *)(v2 + 72);
  int v39 = std::__shared_weak_count::lock(v37);
  if (!v39) {
    goto LABEL_354;
  }
  unsigned int v40 = v39;
  atomic_fetch_add_explicit(&v39->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (*(unsigned char *)(v2 + 156)) {
      goto LABEL_81;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v40);
    if (*(unsigned char *)(v2 + 156)) {
      goto LABEL_81;
    }
  }
  if (*(unsigned char *)(v2 + 158)
    || *(unsigned char *)(v2 + 162)
    || *(unsigned char *)(v2 + 163)
    || *(unsigned char *)(v2 + 169)
    || *(_DWORD *)(v2 + 172)
    || *(unsigned char *)(v2 + 176))
  {
LABEL_81:
    uint64_t v41 = *(std::__shared_weak_count **)(v2 + 144);
    uint64_t v177 = *(void *)(v2 + 136);
    xpc_object_t v178 = v41;
    if (v41) {
      atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
    uint64_t v42 = off_1EBBDC878;
    if (!off_1EBBDC878)
    {
      ABMServer::create_default_global(buf);
      long long v43 = *(_OWORD *)buf;
      *(void *)std::string buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      int v44 = (std::__shared_weak_count *)*(&off_1EBBDC878 + 1);
      off_1EBBDC878 = v43;
      if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
      size_t v45 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
      uint64_t v42 = off_1EBBDC878;
    }
    *(void *)xpc_object_t v188 = v42;
    *(void *)&v188[8] = *(&off_1EBBDC878 + 1);
    if (*(&off_1EBBDC878 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDC878 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
    uint64_t v46 = *(void *)(*(void *)v42 + 208);
    int v47 = operator new(0xD8uLL);
    size_t v48 = v47;
    v47[1] = 0;
    v47[2] = 0;
    *int v47 = &unk_1F2104A58;
    uint64_t v49 = v47 + 3;
    *(void *)std::string buf = v177;
    *(void *)&uint8_t buf[8] = v178;
    if (v178) {
      atomic_fetch_add_explicit(&v178->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    IOKitEventNotifier::IOKitEventNotifier((uint64_t)(v47 + 3), buf, v46);
    CFDictionaryRef v50 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
    uint64_t v51 = *(std::__shared_weak_count **)(v2 + 384);
    *(void *)(v2 + 376) = v49;
    *(void *)(v2 + 384) = v48;
    if (v51 && !atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
    id v52 = *(std::__shared_weak_count **)&v188[8];
    if (*(void *)&v188[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v188[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
      uint64_t v53 = v178;
      if (!v178) {
        goto LABEL_105;
      }
    }
    else
    {
      uint64_t v53 = v178;
      if (!v178) {
        goto LABEL_105;
      }
    }
    if (!atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
      if (*(unsigned char *)(v2 + 156)) {
        goto LABEL_111;
      }
      goto LABEL_106;
    }
LABEL_105:
    if (*(unsigned char *)(v2 + 156)) {
      goto LABEL_111;
    }
LABEL_106:
    if (!*(unsigned char *)(v2 + 158)) {
      goto LABEL_128;
    }
LABEL_111:
    uint64_t v54 = *(void *)(v2 + 376);
    v175[0] = MEMORY[0x1E4F143A8];
    v175[1] = 1174405120;
    v175[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_62;
    v175[3] = &__block_descriptor_tmp_66_2;
    v175[4] = v2;
    v175[5] = v38;
    v176 = v40;
    atomic_fetch_add_explicit(&v40->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v55 = _Block_copy(v175);
    std::string v56 = *(NSObject **)(v2 + 88);
    if (v56) {
      dispatch_retain(*(dispatch_object_t *)(v2 + 88));
    }
    if (v55)
    {
      std::string v57 = _Block_copy(v55);
      std::string v58 = *(const void **)(v54 + 88);
      *(void *)(v54 + 88) = v57;
      if (!v58) {
        goto LABEL_118;
      }
    }
    else
    {
      std::string v58 = *(const void **)(v54 + 88);
      *(void *)(v54 + 88) = 0;
      if (!v58)
      {
LABEL_118:
        if (v56) {
          dispatch_retain(v56);
        }
        long long v59 = *(NSObject **)(v54 + 96);
        *(void *)(v54 + 96) = v56;
        if (v59) {
          dispatch_release(v59);
        }
        if (v56) {
          dispatch_release(v56);
        }
        if (v55) {
          _Block_release(v55);
        }
        if (v176) {
          std::__shared_weak_count::__release_weak(v176);
        }
LABEL_128:
        if (!*(unsigned char *)(v2 + 162)) {
          goto LABEL_146;
        }
        uint64_t v60 = *(void *)(v2 + 376);
        v173[0] = MEMORY[0x1E4F143A8];
        v173[1] = 1174405120;
        v173[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_67;
        v173[3] = &__block_descriptor_tmp_71_0;
        v173[4] = v2;
        v173[5] = v38;
        xpc_object_t v174 = v40;
        atomic_fetch_add_explicit(&v40->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        size_t v61 = _Block_copy(v173);
        int v62 = *(NSObject **)(v2 + 88);
        if (v62) {
          dispatch_retain(*(dispatch_object_t *)(v2 + 88));
        }
        if (v61)
        {
          size_t v63 = _Block_copy(v61);
          int v64 = *(const void **)(v60 + 120);
          *(void *)(v60 + 120) = v63;
          if (!v64) {
            goto LABEL_136;
          }
        }
        else
        {
          int v64 = *(const void **)(v60 + 120);
          *(void *)(v60 + 120) = 0;
          if (!v64)
          {
LABEL_136:
            if (v62) {
              dispatch_retain(v62);
            }
            unint64_t v65 = *(NSObject **)(v60 + 128);
            *(void *)(v60 + 128) = v62;
            if (v65) {
              dispatch_release(v65);
            }
            if (v62) {
              dispatch_release(v62);
            }
            if (v61) {
              _Block_release(v61);
            }
            if (v174) {
              std::__shared_weak_count::__release_weak(v174);
            }
LABEL_146:
            if (!*(unsigned char *)(v2 + 163)) {
              goto LABEL_164;
            }
            uint64_t v66 = *(void *)(v2 + 376);
            v171[0] = MEMORY[0x1E4F143A8];
            v171[1] = 1174405120;
            v171[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_72;
            v171[3] = &__block_descriptor_tmp_76_1;
            v171[4] = v2;
            v171[5] = v38;
            xpc_object_t v172 = v40;
            atomic_fetch_add_explicit(&v40->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            std::string v67 = _Block_copy(v171);
            std::string v68 = *(NSObject **)(v2 + 88);
            if (v68) {
              dispatch_retain(*(dispatch_object_t *)(v2 + 88));
            }
            if (v67)
            {
              uint64_t v69 = _Block_copy(v67);
              uint64_t v70 = *(const void **)(v66 + 104);
              *(void *)(v66 + 104) = v69;
              if (!v70) {
                goto LABEL_154;
              }
            }
            else
            {
              uint64_t v70 = *(const void **)(v66 + 104);
              *(void *)(v66 + 104) = 0;
              if (!v70)
              {
LABEL_154:
                if (v68) {
                  dispatch_retain(v68);
                }
                int v71 = *(NSObject **)(v66 + 112);
                *(void *)(v66 + 112) = v68;
                if (v71) {
                  dispatch_release(v71);
                }
                if (v68) {
                  dispatch_release(v68);
                }
                if (v67) {
                  _Block_release(v67);
                }
                if (v172) {
                  std::__shared_weak_count::__release_weak(v172);
                }
LABEL_164:
                if (!*(unsigned char *)(v2 + 169)) {
                  goto LABEL_191;
                }
                uint64_t v72 = *(void *)(v2 + 376);
                v169[0] = MEMORY[0x1E4F143A8];
                v169[1] = 1174405120;
                v169[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_77;
                v169[3] = &__block_descriptor_tmp_80_2;
                v169[4] = v2;
                v169[5] = v38;
                long long v170 = v40;
                atomic_fetch_add_explicit(&v40->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                size_t v73 = _Block_copy(v169);
                int v74 = *(NSObject **)(v2 + 88);
                if (v74) {
                  dispatch_retain(*(dispatch_object_t *)(v2 + 88));
                }
                if (v73)
                {
                  int v75 = _Block_copy(v73);
                  uint64_t v76 = *(const void **)(v72 + 136);
                  *(void *)(v72 + 136) = v75;
                  if (!v76)
                  {
LABEL_172:
                    if (v74) {
                      dispatch_retain(v74);
                    }
                    unsigned int v77 = *(NSObject **)(v72 + 144);
                    *(void *)(v72 + 144) = v74;
                    if (v77) {
                      dispatch_release(v77);
                    }
                    if (v74) {
                      dispatch_release(v74);
                    }
                    if (v73) {
                      _Block_release(v73);
                    }
                    char v78 = *(ctu::iokit::Controller **)(*(void *)(v2 + 376) + 72);
                    if (v78)
                    {
                      *(_DWORD *)(v2 + 564) = ctu::iokit::Controller::queryPowerSource(v78);
                      int v79 = *(NSObject **)(v2 + 40);
                      if (!os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
                      {
LABEL_189:
                        if (v170) {
                          std::__shared_weak_count::__release_weak(v170);
                        }
LABEL_191:
                        if (!*(_DWORD *)(v2 + 172)) {
                          goto LABEL_209;
                        }
                        *(unsigned char *)(v2 + 736) = 0;
                        uint64_t v81 = *(void *)(v2 + 376);
                        v165[0] = MEMORY[0x1E4F143A8];
                        v165[1] = 1174405120;
                        v165[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_81;
                        v165[3] = &__block_descriptor_tmp_85_0;
                        v165[4] = v2;
                        v165[5] = v38;
                        v166 = v40;
                        atomic_fetch_add_explicit(&v40->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                        unsigned int v82 = _Block_copy(v165);
                        uint64_t v83 = *(NSObject **)(v2 + 88);
                        if (v83) {
                          dispatch_retain(*(dispatch_object_t *)(v2 + 88));
                        }
                        if (v82)
                        {
                          uint64_t v84 = _Block_copy(v82);
                          int v85 = *(const void **)(v81 + 152);
                          *(void *)(v81 + 152) = v84;
                          if (!v85) {
                            goto LABEL_199;
                          }
                        }
                        else
                        {
                          int v85 = *(const void **)(v81 + 152);
                          *(void *)(v81 + 152) = 0;
                          if (!v85)
                          {
LABEL_199:
                            if (v83) {
                              dispatch_retain(v83);
                            }
                            unsigned int v86 = *(NSObject **)(v81 + 160);
                            *(void *)(v81 + 160) = v83;
                            if (v86) {
                              dispatch_release(v86);
                            }
                            if (v83) {
                              dispatch_release(v83);
                            }
                            if (v82) {
                              _Block_release(v82);
                            }
                            if (v166) {
                              std::__shared_weak_count::__release_weak(v166);
                            }
LABEL_209:
                            if (!*(unsigned char *)(v2 + 176))
                            {
LABEL_227:
                              IOKitEventNotifier::start(*(IOKitEventNotifier **)(v2 + 376));
                              goto LABEL_228;
                            }
                            *(unsigned char *)(v2 + 737) = 0;
                            uint64_t v87 = *(void *)(v2 + 376);
                            v163[0] = MEMORY[0x1E4F143A8];
                            v163[1] = 1174405120;
                            v163[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_86;
                            v163[3] = &__block_descriptor_tmp_89_0;
                            v163[4] = v2;
                            v163[5] = v38;
                            long long v164 = v40;
                            atomic_fetch_add_explicit(&v40->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                            uint64_t v88 = _Block_copy(v163);
                            char v89 = *(NSObject **)(v2 + 88);
                            if (v89) {
                              dispatch_retain(*(dispatch_object_t *)(v2 + 88));
                            }
                            if (v88)
                            {
                              unsigned int v90 = _Block_copy(v88);
                              char v91 = *(const void **)(v87 + 168);
                              *(void *)(v87 + 168) = v90;
                              if (!v91) {
                                goto LABEL_217;
                              }
                            }
                            else
                            {
                              char v91 = *(const void **)(v87 + 168);
                              *(void *)(v87 + 168) = 0;
                              if (!v91)
                              {
LABEL_217:
                                if (v89) {
                                  dispatch_retain(v89);
                                }
                                int v92 = *(NSObject **)(v87 + 176);
                                *(void *)(v87 + 176) = v89;
                                if (v92) {
                                  dispatch_release(v92);
                                }
                                if (v89) {
                                  dispatch_release(v89);
                                }
                                if (v88) {
                                  _Block_release(v88);
                                }
                                if (v164) {
                                  std::__shared_weak_count::__release_weak(v164);
                                }
                                goto LABEL_227;
                              }
                            }
                            _Block_release(v91);
                            goto LABEL_217;
                          }
                        }
                        _Block_release(v85);
                        goto LABEL_199;
                      }
                    }
                    else
                    {
                      *(_DWORD *)(v2 + 564) = 1;
                      int v79 = *(NSObject **)(v2 + 40);
                      if (!os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT)) {
                        goto LABEL_189;
                      }
                    }
                    ctu::iokit::asString();
                    if (v168 >= 0) {
                      int v80 = buf;
                    }
                    else {
                      int v80 = *(uint8_t **)buf;
                    }
                    *(_DWORD *)xpc_object_t v188 = 136315138;
                    *(void *)&v188[4] = v80;
                    _os_log_impl(&dword_1C59C6000, v79, OS_LOG_TYPE_DEFAULT, "#I Initial Power Source: %s", v188, 0xCu);
                    if (v168 < 0) {
                      operator delete(*(void **)buf);
                    }
                    goto LABEL_189;
                  }
                }
                else
                {
                  uint64_t v76 = *(const void **)(v72 + 136);
                  *(void *)(v72 + 136) = 0;
                  if (!v76) {
                    goto LABEL_172;
                  }
                }
                _Block_release(v76);
                goto LABEL_172;
              }
            }
            _Block_release(v70);
            goto LABEL_154;
          }
        }
        _Block_release(v64);
        goto LABEL_136;
      }
    }
    _Block_release(v58);
    goto LABEL_118;
  }
LABEL_228:
  pthread_mutex_lock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  uint64_t v93 = (Capabilities *)unk_1EBBDC788;
  if (!unk_1EBBDC788)
  {
    unsigned int v94 = operator new(1uLL);
    long long v95 = operator new(0x20uLL);
    void *v95 = &unk_1F2112060;
    v95[1] = 0;
    v95[2] = 0;
    v95[3] = v94;
    uint64_t v96 = (std::__shared_weak_count *)off_1EBBDC790;
    unk_1EBBDC788 = v94;
    off_1EBBDC790 = v95;
    if (v96 && !atomic_fetch_add(&v96->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
    uint64_t v93 = (Capabilities *)unk_1EBBDC788;
  }
  uint64_t v97 = (std::__shared_weak_count *)off_1EBBDC790;
  *(void *)std::string buf = v93;
  *(void *)&uint8_t buf[8] = off_1EBBDC790;
  if (off_1EBBDC790) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDC790 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  int isCMHandDetectionSupported = Capabilities::isCMHandDetectionSupported(v93);
  int v99 = isCMHandDetectionSupported;
  if (v97 && !atomic_fetch_add(&v97->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
    std::__shared_weak_count::__release_weak(v97);
    if (!v99) {
      goto LABEL_253;
    }
  }
  else if (!isCMHandDetectionSupported)
  {
    goto LABEL_253;
  }
  xpc_object_t v100 = *(NSObject **)(v2 + 88);
  dispatch_object_t v162 = v100;
  if (v100) {
    dispatch_retain(v100);
  }
  int v101 = *(NSObject **)(v2 + 96);
  dispatch_object_t object = v101;
  if (v101) {
    dispatch_retain(v101);
  }
  CMHandDetectionDelegate::create(&v162, &object, buf);
  long long v102 = *(_OWORD *)buf;
  *(void *)std::string buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  long long v103 = *(std::__shared_weak_count **)(v2 + 520);
  *(_OWORD *)(v2 + 512) = v102;
  if (v103 && !atomic_fetch_add(&v103->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
    std::__shared_weak_count::__release_weak(v103);
  }
  uint64_t v104 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
    std::__shared_weak_count::__release_weak(v104);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v162) {
    dispatch_release(v162);
  }
LABEL_253:
  __n128 v105 = *(uint64_t ***)(v2 + 512);
  if (v105)
  {
    v158[0] = MEMORY[0x1E4F143A8];
    v158[1] = 1174405120;
    v158[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_90;
    v158[3] = &__block_descriptor_tmp_93_0;
    v158[4] = v2;
    v158[5] = v38;
    int v159 = v40;
    atomic_fetch_add_explicit(&v40->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    int v106 = _Block_copy(v158);
    CFAllocatorRef v160 = v106;
    CMHandDetectionDelegate::registerCallback(v105, &v160);
    if (v106) {
      _Block_release(v106);
    }
    if (v159) {
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  if (*(void *)(v2 + 496)) {
    goto LABEL_274;
  }
  int v107 = *(NSObject **)(v2 + 88);
  dispatch_object_t v157 = v107;
  if (v107) {
    dispatch_retain(v107);
  }
  unsigned int v108 = *(NSObject **)(v2 + 96);
  dispatch_object_t v156 = v108;
  if (v108) {
    dispatch_retain(v108);
  }
  ctu::iokit::IOHIDController::create();
  long long v109 = *(_OWORD *)buf;
  *(void *)std::string buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  uint64_t v110 = *(std::__shared_weak_count **)(v2 + 504);
  *(_OWORD *)(v2 + 496) = v109;
  if (v110 && !atomic_fetch_add(&v110->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
    std::__shared_weak_count::__release_weak(v110);
  }
  long long v111 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
    std::__shared_weak_count::__release_weak(v111);
  }
  if (v156) {
    dispatch_release(v156);
  }
  if (v157) {
    dispatch_release(v157);
  }
  if (*(void *)(v2 + 496))
  {
LABEL_274:
    v153[0] = MEMORY[0x1E4F143A8];
    v153[1] = 1174405120;
    v153[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_94;
    v153[3] = &__block_descriptor_tmp_97_0;
    v153[4] = v2;
    v153[5] = v38;
    xpc_object_t v154 = v40;
    atomic_fetch_add_explicit(&v40->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    int v155 = _Block_copy(v153);
    ctu::iokit::IOHIDController::registerProxCallback();
    if (v155) {
      _Block_release(v155);
    }
    if (v154) {
      std::__shared_weak_count::__release_weak(v154);
    }
  }
  if (!*(unsigned char *)(v2 + 192)) {
    goto LABEL_299;
  }
  if (*(void *)(v2 + 496)) {
    goto LABEL_295;
  }
  int v112 = *(NSObject **)(v2 + 88);
  dispatch_object_t v152 = v112;
  if (v112) {
    dispatch_retain(v112);
  }
  int v113 = *(NSObject **)(v2 + 96);
  dispatch_object_t v151 = v113;
  if (v113) {
    dispatch_retain(v113);
  }
  ctu::iokit::IOHIDController::create();
  long long v114 = *(_OWORD *)buf;
  *(void *)std::string buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  int v115 = *(std::__shared_weak_count **)(v2 + 504);
  *(_OWORD *)(v2 + 496) = v114;
  if (v115 && !atomic_fetch_add(&v115->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
    std::__shared_weak_count::__release_weak(v115);
  }
  int v116 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
    std::__shared_weak_count::__release_weak(v116);
  }
  if (v151) {
    dispatch_release(v151);
  }
  if (v152) {
    dispatch_release(v152);
  }
  if (*(void *)(v2 + 496))
  {
LABEL_295:
    v148[0] = MEMORY[0x1E4F143A8];
    v148[1] = 1174405120;
    v148[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_98;
    v148[3] = &__block_descriptor_tmp_102;
    unint64_t v148[4] = v2;
    v148[5] = v38;
    long long v149 = v40;
    atomic_fetch_add_explicit(&v40->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    xpc_object_t v150 = _Block_copy(v148);
    ctu::iokit::IOHIDController::registerKeyboardCallback();
    if (v150) {
      _Block_release(v150);
    }
    if (v149) {
      std::__shared_weak_count::__release_weak(v149);
    }
LABEL_299:
    uint64_t v117 = *(ctu::iokit::IOHIDController **)(v2 + 496);
    if (v117) {
      ctu::iokit::IOHIDController::start(v117);
    }
  }
  if (*(unsigned char *)(v2 + 688))
  {
    int v118 = *(NSObject **)(v2 + 96);
    dispatch_object_t v147 = v118;
    if (v118) {
      dispatch_retain(v118);
    }
    memset(buf, 170, 16);
    std::allocate_shared[abi:ne180100]<HKWorkoutManager,std::allocator<HKWorkoutManager>,dispatch::workloop &,void>(&v147, (uint64_t *)buf);
    long long v119 = *(_OWORD *)buf;
    *(void *)std::string buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    int v120 = *(std::__shared_weak_count **)(v2 + 680);
    *(_OWORD *)(v2 + 672) = v119;
    if (v120 && !atomic_fetch_add(&v120->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
    uint64_t v121 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
    if (v147) {
      dispatch_release(v147);
    }
    xpc_object_t v122 = *(void **)(v2 + 672);
    if (v122)
    {
      v145[0] = MEMORY[0x1E4F143A8];
      v145[1] = 1174405120;
      v145[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_103;
      v145[3] = &__block_descriptor_tmp_107;
      v145[4] = v2;
      v145[5] = v38;
      int v146 = v40;
      atomic_fetch_add_explicit(&v40->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v187 = 0;
      v186[0] = &unk_1F2108778;
      v186[1] = _Block_copy(v145);
      v187 = v186;
      HKWorkoutManager::registerCallback(v122, v186);
      if (v187 == v186)
      {
        (*(void (**)(void *))(v186[0] + 32))(v186);
        xpc_object_t v123 = v146;
        if (v146) {
LABEL_317:
        }
          std::__shared_weak_count::__release_weak(v123);
      }
      else
      {
        if (v187) {
          (*(void (**)(void))(*v187 + 40))();
        }
        xpc_object_t v123 = v146;
        if (v146) {
          goto LABEL_317;
        }
      }
    }
  }
  memset(buf, 170, 16);
  uint64_t v125 = *(void *)(v2 + 72);
  xpc_object_t v124 = *(std::__shared_weak_count **)(v2 + 80);
  uint64_t v143 = v125;
  if (!v124)
  {
    uint64_t v144 = 0;
LABEL_356:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v126 = std::__shared_weak_count::lock(v124);
  uint64_t v144 = v126;
  if (!v126) {
    goto LABEL_356;
  }
  uint64_t v127 = v126;
  dispatch_object_t v128 = (std::__shared_weak_count *)operator new(0x30uLL);
  int v129 = v128;
  v128->__shared_owners_ = 0;
  v128->__shared_weak_owners_ = 0;
  v128->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2108808;
  unint64_t v130 = &v128[1].__vftable;
  uint64_t v143 = 0;
  uint64_t v144 = 0;
  v128[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F21088B0;
  v128[1].__shared_owners_ = v125;
  v128[1].__shared_weak_owners_ = (uint64_t)v127;
  atomic_fetch_add_explicit(&v127->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v127->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    v128[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2108858;
    *(void *)std::string buf = v128 + 1;
    *(void *)&uint8_t buf[8] = v128;
    uint64_t v131 = v144;
    if (v144) {
      goto LABEL_322;
    }
LABEL_327:
    uint64_t v141 = v130;
    xpc_object_t v142 = v129;
LABEL_328:
    atomic_fetch_add_explicit(&v129->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_329;
  }
  ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
  std::__shared_weak_count::__release_weak(v127);
  v129[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2108858;
  *(void *)std::string buf = v130;
  *(void *)&uint8_t buf[8] = v129;
  uint64_t v131 = v144;
  if (!v144) {
    goto LABEL_327;
  }
LABEL_322:
  if (!atomic_fetch_add(&v131->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
    std::__shared_weak_count::__release_weak(v131);
  }
  int v129 = *(std::__shared_weak_count **)&buf[8];
  uint64_t v141 = *(void **)buf;
  xpc_object_t v142 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]) {
    goto LABEL_328;
  }
LABEL_329:
  antenna::CommandDriver::registerHandler();
  if (v142 && !atomic_fetch_add(&v142->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
    std::__shared_weak_count::__release_weak(v142);
    if (!*(unsigned char *)(v2 + 572)) {
      goto LABEL_341;
    }
  }
  else if (!*(unsigned char *)(v2 + 572))
  {
    goto LABEL_341;
  }
  uint64_t v132 = *(std::__shared_weak_count **)(v2 + 144);
  uint64_t v139 = *(void *)(v2 + 136);
  dispatch_object_t v140 = v132;
  if (v132) {
    atomic_fetch_add_explicit(&v132->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v133 = operator new(0x28uLL);
  std::__shared_ptr_emplace<PPMManager>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<ctu::LogServer> &,std::allocator<PPMManager>,0>(v133, &v139);
  *(void *)(v2 + 576) = v133 + 3;
  xpc_object_t v134 = *(std::__shared_weak_count **)(v2 + 584);
  *(void *)(v2 + 584) = v133;
  if (v134 && !atomic_fetch_add(&v134->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
    std::__shared_weak_count::__release_weak(v134);
  }
  uint64_t v135 = v140;
  if (v140 && !atomic_fetch_add(&v140->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
    std::__shared_weak_count::__release_weak(v135);
  }
LABEL_341:
  unint64_t v136 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
    std::__shared_weak_count::__release_weak(v136);
  }
  std::__shared_weak_count::__release_weak(v40);
  operator delete(v1);
  if (a1)
  {
    long long v137 = (std::__shared_weak_count *)a1[2];
    if (v137)
    {
      if (!atomic_fetch_add(&v137->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
        std::__shared_weak_count::__release_weak(v137);
      }
    }
    operator delete(a1);
  }
}

void sub_1C5A971D8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke(void *a1, int a2)
{
  xpc_object_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      xpc_object_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      antenna::Service::Internal::motionDetectCallback_sync(v5, a2);
    }
  }
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_62(void *a1, uint64_t a2, unsigned int a3)
{
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      xpc_object_t v9 = v8;
      uint64_t v10 = a1[5];
      if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v10) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v9);
        if (!v10) {
          return;
        }
      }
      antenna::Service::Internal::accessoryNotification_sync(v7, a2, a3);
    }
  }
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_67(void *a1, char a2)
{
  xpc_object_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8)
      {
        if (a2)
        {
          xpc_object_t v9 = *(NSObject **)(v5 + 40);
          if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
            return;
          }
          *(_WORD *)std::string buf = 0;
          uint64_t v10 = "#I ctu::iokit::kTelephonyIOKitMesaStartShort";
          long long v11 = buf;
          goto LABEL_12;
        }
        if ((a2 & 2) != 0)
        {
          xpc_object_t v9 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            __int16 v12 = 0;
            uint64_t v10 = "#I ctu::iokit::kTelephonyIOKitMesaStartLong";
            long long v11 = (uint8_t *)&v12;
LABEL_12:
            _os_log_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEFAULT, v10, v11, 2u);
          }
        }
      }
    }
  }
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_72(void *a1, unsigned int a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  xpc_object_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = (antenna::Service::Internal *)a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8)
      {
        xpc_object_t v9 = *((void *)v5 + 5);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          v10[0] = 67109120;
          v10[1] = a2;
          _os_log_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEFAULT, "#I Display evnet: 0x%x\n", (uint8_t *)v10, 8u);
        }
        antenna::Service::Internal::sendVideoAccessory_sync(v5, (a2 >> 2) & 1);
      }
    }
  }
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_77(void *a1, int a2)
{
  xpc_object_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      antenna::Service::Internal::powerSourceNotification_sync(v5, a2);
    }
  }
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_81(void *a1, int a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  xpc_object_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      xpc_object_t v9 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        int v12 = *(unsigned __int8 *)(v5 + 736);
        if (*(void *)(v5 + 184)) {
          xpc_object_t v13 = "on";
        }
        else {
          xpc_object_t v13 = "off";
        }
        LODWORD(v22) = 67109634;
        HIDWORD(v22) = v12;
        LOWORD(v23) = 1024;
        *(_DWORD *)((char *)&v23 + 2) = a2;
        HIWORD(v23) = 2080;
        int v24 = v13;
        _os_log_debug_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEBUG, "#D Cached State: %d, event: %d, Camera-Off-Timer: %s", (uint8_t *)&v22, 0x18u);
        int v10 = *(unsigned __int8 *)(v5 + 736);
        uint64_t v11 = *(void *)(v5 + 184);
        if (v10 == a2)
        {
LABEL_9:
          if (!v11) {
            return;
          }
          goto LABEL_16;
        }
      }
      else
      {
        int v10 = *(unsigned __int8 *)(v5 + 736);
        uint64_t v11 = *(void *)(v5 + 184);
        if (v10 == a2) {
          goto LABEL_9;
        }
      }
      if (v11)
      {
LABEL_16:
        *(unsigned char *)(v5 + 736) = a2;
        return;
      }
      if (a2 || v10 != 1)
      {
        *(unsigned char *)(v5 + 736) = a2;
        antenna::Service::Internal::sendSensorID_sync((antenna::Service::Internal *)v5);
      }
      else
      {
        *(unsigned char *)(v5 + 736) = 0;
        xpc_object_t v14 = *(std::__shared_weak_count **)(v5 + 80);
        if (!v14 || (uint64_t v15 = *(void *)(v5 + 72), (v16 = std::__shared_weak_count::lock(v14)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        xpc_object_t v17 = v16;
        atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v17);
        }
        dispatch_object_t v18 = dispatch_source_create(MEMORY[0x1E4F14490], 1uLL, 0, *(dispatch_queue_t *)(v5 + 88));
        uint64_t v19 = *(NSObject **)(v5 + 184);
        *(void *)(v5 + 184) = v18;
        if (v19)
        {
          dispatch_release(v19);
          dispatch_object_t v18 = *(NSObject **)(v5 + 184);
        }
        dispatch_time_t v20 = dispatch_time(0, 300000000);
        dispatch_source_set_timer(v18, v20, 0xFFFFFFFFFFFFFFFFLL, 0x1312D00uLL);
        long long v21 = *(NSObject **)(v5 + 184);
        uint64_t v22 = MEMORY[0x1E4F143A8];
        uint64_t v23 = 1174405120;
        int v24 = (const char *)___ZN7antenna7Service8Internal31cameraStateCallBackHandler_syncIN3ctu5iokit25TelephonyIOKitFaceIDStateEEEvRT_S6__block_invoke;
        uint64_t v25 = &__block_descriptor_tmp_112_0;
        uint64_t v26 = v5;
        uint64_t v27 = v15;
        uint64_t v28 = v17;
        atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        dispatch_source_set_event_handler(v21, &v22);
        dispatch_activate(*(dispatch_object_t *)(v5 + 184));
        if (v28) {
          std::__shared_weak_count::__release_weak(v28);
        }
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_86(void *a1, int a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  xpc_object_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      xpc_object_t v9 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        int v12 = *(unsigned __int8 *)(v5 + 737);
        if (*(void *)(v5 + 184)) {
          xpc_object_t v13 = "on";
        }
        else {
          xpc_object_t v13 = "off";
        }
        LODWORD(v22) = 67109634;
        HIDWORD(v22) = v12;
        LOWORD(v23) = 1024;
        *(_DWORD *)((char *)&v23 + 2) = a2;
        HIWORD(v23) = 2080;
        int v24 = v13;
        _os_log_debug_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEBUG, "#D Cached State: %d, event: %d, Camera-Off-Timer: %s", (uint8_t *)&v22, 0x18u);
        int v10 = *(unsigned __int8 *)(v5 + 737);
        uint64_t v11 = *(void *)(v5 + 184);
        if (v10 == a2)
        {
LABEL_9:
          if (!v11) {
            return;
          }
          goto LABEL_16;
        }
      }
      else
      {
        int v10 = *(unsigned __int8 *)(v5 + 737);
        uint64_t v11 = *(void *)(v5 + 184);
        if (v10 == a2) {
          goto LABEL_9;
        }
      }
      if (v11)
      {
LABEL_16:
        *(unsigned char *)(v5 + 737) = a2;
        return;
      }
      if (a2 || v10 != 1)
      {
        *(unsigned char *)(v5 + 737) = a2;
        antenna::Service::Internal::sendSensorID_sync((antenna::Service::Internal *)v5);
      }
      else
      {
        *(unsigned char *)(v5 + 737) = 0;
        xpc_object_t v14 = *(std::__shared_weak_count **)(v5 + 80);
        if (!v14 || (uint64_t v15 = *(void *)(v5 + 72), (v16 = std::__shared_weak_count::lock(v14)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        xpc_object_t v17 = v16;
        atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v17);
        }
        dispatch_object_t v18 = dispatch_source_create(MEMORY[0x1E4F14490], 1uLL, 0, *(dispatch_queue_t *)(v5 + 88));
        uint64_t v19 = *(NSObject **)(v5 + 184);
        *(void *)(v5 + 184) = v18;
        if (v19)
        {
          dispatch_release(v19);
          dispatch_object_t v18 = *(NSObject **)(v5 + 184);
        }
        dispatch_time_t v20 = dispatch_time(0, 300000000);
        dispatch_source_set_timer(v18, v20, 0xFFFFFFFFFFFFFFFFLL, 0x1312D00uLL);
        long long v21 = *(NSObject **)(v5 + 184);
        uint64_t v22 = MEMORY[0x1E4F143A8];
        uint64_t v23 = 1174405120;
        int v24 = (const char *)___ZN7antenna7Service8Internal31cameraStateCallBackHandler_syncIN3ctu5iokit30TelephonyIOKitFrontCameraStateEEEvRT_S6__block_invoke;
        uint64_t v25 = &__block_descriptor_tmp_117;
        uint64_t v26 = v5;
        uint64_t v27 = v15;
        uint64_t v28 = v17;
        atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        dispatch_source_set_event_handler(v21, &v22);
        dispatch_activate(*(dispatch_object_t *)(v5 + 184));
        if (v28) {
          std::__shared_weak_count::__release_weak(v28);
        }
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_90(void *a1, int a2)
{
  xpc_object_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = (void *)a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      antenna::Service::Internal::handDetectCallback(v5, a2);
    }
  }
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_94(void *a1, int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  xpc_object_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8)
      {
        int isProxCovered = ctu::iokit::IOHIDController::isProxCovered(*(ctu::iokit::IOHIDController **)(v5 + 496));
        if (*(unsigned __int8 *)(v5 + 560) != isProxCovered)
        {
          int v10 = isProxCovered;
          uint64_t v11 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            v12[0] = 67109376;
            v12[1] = v10;
            __int16 v13 = 1024;
            int v14 = a2;
            _os_log_impl(&dword_1C59C6000, v11, OS_LOG_TYPE_DEFAULT, "#I Prox Covered State: %d mask value: 0x%x", (uint8_t *)v12, 0xEu);
          }
          *(unsigned char *)(v5 + 560) = v10;
          antenna::Service::Internal::checkStartHandDetection_sync((antenna::Service::Internal *)v5);
        }
      }
    }
  }
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_98(void *a1, int a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  xpc_object_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8 && *(unsigned __int8 *)(v5 + 561) != a2)
      {
        xpc_object_t v9 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          int v10 = "OPENED";
          if (a2) {
            int v10 = "CLOSED";
          }
          int v11 = 136315138;
          int v12 = v10;
          _os_log_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEFAULT, "#I Smart Keyboard Cover: %s", (uint8_t *)&v11, 0xCu);
        }
        *(unsigned char *)(v5 + 561) = a2;
        antenna::Service::Internal::sendAccessoryStatus_sync((NSObject **)v5);
      }
    }
  }
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_103(void *a1, int a2, int a3, int a4, int a5)
{
  xpc_object_t v6 = (std::__shared_weak_count *)a1[6];
  if (v6)
  {
    uint64_t v11 = a1[4];
    int v12 = std::__shared_weak_count::lock(v6);
    if (v12)
    {
      uint64_t v13 = v12;
      int v14 = (void *)a1[5];
      if (!v14) {
        goto LABEL_16;
      }
      uint64_t v15 = (std::__shared_weak_count *)v14[10];
      if (!v15 || (uint64_t v16 = v14[9], (v17 = std::__shared_weak_count::lock(v15)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      dispatch_object_t v18 = v17;
      uint64_t v19 = operator new(0x18uLL);
      *(void *)uint64_t v19 = v11;
      void v19[2] = a2;
      void v19[3] = a3;
      void v19[4] = a4;
      v19[5] = a5;
      dispatch_time_t v20 = v14[11];
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      long long v21 = operator new(0x18uLL);
      *long long v21 = v19;
      v21[1] = v16;
      v21[2] = v18;
      dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna7Service8InternalEE15execute_wrappedIZZZNS5_4initEvENK3__0clEvEUb9_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISA_NSF_14default_deleteISA_EEEEENUlPvE_8__invokeESK_);
      if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
        if (atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          return;
        }
      }
      else
      {
LABEL_16:
        if (atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          return;
        }
      }
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void *std::function<void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t std::shared_ptr<PPMManager>::operator=[abi:ne180100](uint64_t result, long long *a2)
{
  uint64_t v2 = result;
  long long v3 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  xpc_object_t v4 = *(std::__shared_weak_count **)(result + 8);
  *(_OWORD *)xpc_object_t result = v3;
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      return v2;
    }
  }
  return result;
}

void ___ZN7antenna7Service8Internal31cameraStateCallBackHandler_syncIN3ctu5iokit25TelephonyIOKitFaceIDStateEEEvRT_S6__block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    long long v3 = (NSObject **)a1[4];
    xpc_object_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = a1[5];
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
      }
      if (v6)
      {
        uint64_t v7 = v3[5];
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)xpc_object_t v9 = 0;
          _os_log_debug_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_DEBUG, "#D Camera state debounce timer is expired, sending last state to baseband", v9, 2u);
        }
        antenna::Service::Internal::sendSensorID_sync((antenna::Service::Internal *)v3);
        dispatch_source_cancel(v3[23]);
        uint64_t v8 = v3[23];
        v3[23] = 0;
        if (v8) {
          dispatch_release(v8);
        }
      }
    }
  }
}

void ___ZN7antenna7Service8Internal31cameraStateCallBackHandler_syncIN3ctu5iokit30TelephonyIOKitFrontCameraStateEEEvRT_S6__block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    long long v3 = (NSObject **)a1[4];
    xpc_object_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = a1[5];
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
      }
      if (v6)
      {
        uint64_t v7 = v3[5];
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)xpc_object_t v9 = 0;
          _os_log_debug_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_DEBUG, "#D Camera state debounce timer is expired, sending last state to baseband", v9, 2u);
        }
        antenna::Service::Internal::sendSensorID_sync((antenna::Service::Internal *)v3);
        dispatch_source_cancel(v3[23]);
        uint64_t v8 = v3[23];
        v3[23] = 0;
        if (v8) {
          dispatch_release(v8);
        }
      }
    }
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna7Service8InternalEE15execute_wrappedIZZZNS5_4initEvENK3__0clEvEUb9_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISA_NSF_14default_deleteISA_EEEEENUlPvE_8__invokeESK_(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  xpc_object_t v4 = (const void *)*MEMORY[0x1E4F4D2C8];
  size_t v5 = strlen((const char *)*MEMORY[0x1E4F4D2C8]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t v7 = operator new(v8 + 1);
    __dst[1] = v6;
    int64_t v18 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v18) = v5;
  uint64_t v7 = __dst;
  if (v5) {
LABEL_8:
  }
    memmove(v7, v4, v6);
  *((unsigned char *)v7 + v6) = 0;
  if (*(char *)(v3 + 719) >= 0) {
    int v10 = (const char *)(v3 + 696);
  }
  else {
    int v10 = *(const char **)(v3 + 696);
  }
  int v11 = SHIBYTE(v18);
  int v12 = (void *)__dst[0];
  if (v18 >= 0) {
    uint64_t v13 = (const char *)__dst;
  }
  else {
    uint64_t v13 = (const char *)__dst[0];
  }
  int v14 = strcasecmp(v10, v13);
  int v15 = v14;
  if (v11 < 0)
  {
    operator delete(v12);
    if (!v15)
    {
LABEL_19:
      *(_OWORD *)(v3 + 720) = *(_OWORD *)(v2 + 1);
      antenna::Service::Internal::sendWorkoutInfo_sync((antenna::Service::Internal *)v3);
    }
  }
  else if (!v14)
  {
    goto LABEL_19;
  }
  operator delete(v2);
  uint64_t v16 = (std::__shared_weak_count *)a1[2];
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }

  operator delete(a1);
}

void sub_1C5A988A4(_Unwind_Exception *a1)
{
  operator delete(v2);
  xpc_object_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation),std::allocator<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>,void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>::__clone()
{
  return 0;
}

void *std::__function::__func<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation),std::allocator<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>,void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F2108778;
  xpc_object_t result = *(void **)(a1 + 8);
  if (result) {
    xpc_object_t result = _Block_copy(result);
  }
  a2[1] = result;
  return result;
}

void std::__function::__func<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation),std::allocator<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>,void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>::destroy(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    _Block_release(v2);
  }
  *(void *)(a1 + 8) = 0;
}

uint64_t std::__function::__func<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation),std::allocator<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>,void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation),std::allocator<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>,void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C5BC7A66) {
    return a1 + 8;
  }
  if (((v3 & 0x80000001C5BC7A66 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C5BC7A66)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C5BC7A66 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation),std::allocator<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>,void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>::target_type()
{
}

void std::__shared_ptr_emplace<antenna::AntennaCommandDriverDelegate<antenna::Service::Internal>::create(std::shared_ptr<antenna::Service::Internal>)::MakeSharedEnabler,std::allocator<antenna::AntennaCommandDriverDelegate<antenna::Service::Internal>::create(std::shared_ptr<antenna::Service::Internal>)::MakeSharedEnabler>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2108808;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<antenna::AntennaCommandDriverDelegate<antenna::Service::Internal>::create(std::shared_ptr<antenna::Service::Internal>)::MakeSharedEnabler,std::allocator<antenna::AntennaCommandDriverDelegate<antenna::Service::Internal>::create(std::shared_ptr<antenna::Service::Internal>)::MakeSharedEnabler>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2108808;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<antenna::AntennaCommandDriverDelegate<antenna::Service::Internal>::create(std::shared_ptr<antenna::Service::Internal>)::MakeSharedEnabler,std::allocator<antenna::AntennaCommandDriverDelegate<antenna::Service::Internal>::create(std::shared_ptr<antenna::Service::Internal>)::MakeSharedEnabler>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void antenna::AntennaCommandDriverDelegate<antenna::Service::Internal>::create(std::shared_ptr<antenna::Service::Internal>)::MakeSharedEnabler::~MakeSharedEnabler(antenna::AntennaCommandDriverDelegateInterface *this)
{
  *(void *)this = &unk_1F21088B0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  antenna::AntennaCommandDriverDelegateInterface::~AntennaCommandDriverDelegateInterface(this);
}

{
  std::__shared_weak_count *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F21088B0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  antenna::AntennaCommandDriverDelegateInterface::~AntennaCommandDriverDelegateInterface(this);

  operator delete(v3);
}

void antenna::AntennaCommandDriverDelegate<antenna::Service::Internal>::signalTransmitState(uint64_t a1, int a2, int a3)
{
  xpc_object_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void **)(a1 + 8);
      if (v9) {
        antenna::Service::Internal::transmitStateHandler(v9, a2, a3);
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void antenna::AntennaCommandDriverDelegate<antenna::Service::Internal>::~AntennaCommandDriverDelegate(antenna::AntennaCommandDriverDelegateInterface *this)
{
  *(void *)this = &unk_1F21088B0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  antenna::AntennaCommandDriverDelegateInterface::~AntennaCommandDriverDelegateInterface(this);
}

{
  std::__shared_weak_count *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F21088B0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  antenna::AntennaCommandDriverDelegateInterface::~AntennaCommandDriverDelegateInterface(this);

  operator delete(v3);
}

void std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned int,unsigned int>,std::__tree_node<std::__value_type<unsigned int,unsigned int>,void *> *,long>>(uint64_t **a1, void *a2, void *a3)
{
  xpc_object_t v4 = a2;
  if (a1[2])
  {
    size_t v6 = (uint64_t **)*a1;
    uint64_t v8 = a1 + 1;
    uint64_t v7 = a1[1];
    *a1 = (uint64_t *)(a1 + 1);
    v7[2] = 0;
    a1[2] = 0;
    a1[1] = 0;
    uint64_t v9 = v6[1] ? v6[1] : (uint64_t *)v6;
    if (v9)
    {
      int v10 = (uint64_t *)v9[2];
      if (v10)
      {
        int v11 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          *int v10 = 0;
          while (1)
          {
            int v34 = (void *)v10[1];
            if (!v34) {
              break;
            }
            do
            {
              int v10 = v34;
              int v34 = (void *)*v34;
            }
            while (v34);
          }
        }
        else
        {
          for (v10[1] = 0; v11; int v11 = (uint64_t *)v10[1])
          {
            do
            {
              int v10 = v11;
              int v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        int v12 = v9;
        uint64_t v13 = v4;
        while (1)
        {
          uint64_t v9 = v10;
          unsigned int v14 = *((_DWORD *)v13 + 7);
          *((_DWORD *)v12 + 7) = v14;
          *((_DWORD *)v12 + 8) = *((_DWORD *)v13 + 8);
          int v15 = *v8;
          uint64_t v16 = a1 + 1;
          xpc_object_t v17 = a1 + 1;
          if (*v8) {
            break;
          }
LABEL_14:
          uint64_t *v12 = 0;
          v12[1] = 0;
          _DWORD v12[2] = (uint64_t)v16;
          std::__shared_weak_count *v17 = v12;
          int64_t v18 = (uint64_t *)**a1;
          if (v18) {
            goto LABEL_15;
          }
LABEL_16:
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
          a1[2] = (uint64_t *)((char *)a1[2] + 1);
          if (v10)
          {
            int v10 = (uint64_t *)v10[2];
            if (v10)
            {
              long long v21 = (void *)*v10;
              if ((uint64_t *)*v10 == v9)
              {
                *int v10 = 0;
                while (1)
                {
                  uint64_t v22 = (void *)v10[1];
                  if (!v22) {
                    break;
                  }
                  do
                  {
                    int v10 = v22;
                    uint64_t v22 = (void *)*v22;
                  }
                  while (v22);
                }
              }
              else
              {
                for (v10[1] = 0; v21; long long v21 = (void *)v10[1])
                {
                  do
                  {
                    int v10 = v21;
                    long long v21 = (void *)*v21;
                  }
                  while (v21);
                }
              }
            }
          }
          else
          {
            int v10 = 0;
          }
          uint64_t v19 = (void *)v13[1];
          if (v19)
          {
            do
            {
              xpc_object_t v4 = v19;
              uint64_t v19 = (void *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              xpc_object_t v4 = (void *)v13[2];
              BOOL v20 = *v4 == (void)v13;
              uint64_t v13 = v4;
            }
            while (!v20);
          }
          if (v9)
          {
            int v12 = v9;
            uint64_t v13 = v4;
            if (v4 != a3) {
              continue;
            }
          }
          goto LABEL_42;
        }
        do
        {
          while (1)
          {
            uint64_t v16 = v15;
            if (v14 >= *((_DWORD *)v15 + 7)) {
              break;
            }
            int v15 = (uint64_t *)*v15;
            xpc_object_t v17 = (uint64_t **)v16;
            if (!*v16) {
              goto LABEL_14;
            }
          }
          int v15 = (uint64_t *)v15[1];
        }
        while (v15);
        xpc_object_t v17 = (uint64_t **)(v16 + 1);
        uint64_t *v12 = 0;
        v12[1] = 0;
        _DWORD v12[2] = (uint64_t)v16;
        v16[1] = v12;
        int64_t v18 = (uint64_t *)**a1;
        if (!v18) {
          goto LABEL_16;
        }
LABEL_15:
        *a1 = v18;
        int v12 = *v17;
        goto LABEL_16;
      }
LABEL_42:
      std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(v9);
      if (v10)
      {
        for (uint64_t i = (void *)v10[2]; i; uint64_t i = (void *)i[2])
          int v10 = i;
        std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(v10);
      }
    }
  }
  if (v4 != a3)
  {
    int v24 = (uint64_t ***)(a1 + 1);
    while (1)
    {
      uint64_t v25 = (uint64_t *)operator new(0x28uLL);
      uint64_t v26 = v25;
      uint64_t v27 = *(void *)((char *)v4 + 28);
      *(uint64_t *)((char *)v25 + 28) = v27;
      uint64_t v28 = *v24;
      uint64_t v29 = a1 + 1;
      size_t v30 = a1 + 1;
      if (*v24) {
        break;
      }
LABEL_50:
      *uint64_t v25 = 0;
      v25[1] = 0;
      void v25[2] = (uint64_t)v29;
      void *v30 = v25;
      int v31 = (uint64_t *)**a1;
      if (v31) {
        goto LABEL_51;
      }
LABEL_52:
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v26);
      a1[2] = (uint64_t *)((char *)a1[2] + 1);
      size_t v32 = (void *)v4[1];
      if (v32)
      {
        do
        {
          uint64_t v33 = v32;
          size_t v32 = (void *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          uint64_t v33 = (void *)v4[2];
          BOOL v20 = *v33 == (void)v4;
          xpc_object_t v4 = v33;
        }
        while (!v20);
      }
      xpc_object_t v4 = v33;
      if (v33 == a3) {
        return;
      }
    }
    do
    {
      while (1)
      {
        uint64_t v29 = v28;
        if (*((_DWORD *)v28 + 7) <= v27) {
          break;
        }
        uint64_t v28 = (uint64_t **)*v28;
        size_t v30 = v29;
        if (!*v29) {
          goto LABEL_50;
        }
      }
      uint64_t v28 = (uint64_t **)v28[1];
    }
    while (v28);
    size_t v30 = v29 + 1;
    *uint64_t v25 = 0;
    v25[1] = 0;
    void v25[2] = (uint64_t)v29;
    v29[1] = v25;
    int v31 = (uint64_t *)**a1;
    if (!v31) {
      goto LABEL_52;
    }
LABEL_51:
    *a1 = v31;
    uint64_t v26 = *v30;
    goto LABEL_52;
  }
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::stopService(void)::$_0>(antenna::Service::Internal::stopService(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::stopService(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::stopService(void)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *(antenna::Service::Internal ***)a1;
  uint64_t v3 = **(antenna::Service::Internal ***)a1;
  antenna::Service::Internal::enableTxPowerCappingNotification_sync(v3, 0);
  antenna::Service::Internal::stopTxPowerCapping_sync(v3);
  xpc_object_t v4 = (HKWorkoutManager *)*((void *)v3 + 84);
  if (v4) {
    HKWorkoutManager::stop(v4);
  }
  operator delete(v2);
  size_t v5 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    size_t v6 = a1;
  }
  else
  {
    size_t v6 = a1;
  }
  operator delete(v6);
}

void sub_1C5A990F8(_Unwind_Exception *a1)
{
  operator delete(v2);
  xpc_object_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::startService(void)::$_0>(antenna::Service::Internal::startService(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::startService(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::startService(void)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *(antenna::Service::Internal ***)a1;
  uint64_t v3 = **(antenna::Service::Internal ***)a1;
  antenna::Service::Internal::setupTxPower_sync(v3);
  xpc_object_t v4 = (HKWorkoutManager *)*((void *)v3 + 84);
  if (v4) {
    HKWorkoutManager::start(v4);
  }
  operator delete(v2);
  size_t v5 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    size_t v6 = a1;
  }
  else
  {
    size_t v6 = a1;
  }
  operator delete(v6);
}

void sub_1C5A99228(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  operator delete(v3);
  size_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::enterLowPower(void)::$_0>(antenna::Service::Internal::enterLowPower(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::enterLowPower(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::enterLowPower(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  xpc_object_t v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)size_t v6 = 0;
    _os_log_debug_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEBUG, "#D Enter Low Power ! ", v6, 2u);
  }
  *(unsigned char *)(v3 + 168) = 1;
  antenna::Service::Internal::enableTxPowerCappingNotification_sync((antenna::Service::Internal *)v3, 0);
  antenna::Service::Internal::stopTxPowerCapping_sync((antenna::Service::Internal *)v3);
  operator delete(v2);
  size_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(a1);
}

void sub_1C5A9937C(_Unwind_Exception *a1)
{
  operator delete(v2);
  xpc_object_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::exitLowPower(void)::$_0>(antenna::Service::Internal::exitLowPower(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::exitLowPower(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::exitLowPower(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  xpc_object_t v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)size_t v6 = 0;
    _os_log_debug_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEBUG, "#D EXIT Low Power ! ", v6, 2u);
  }
  *(unsigned char *)(v3 + 168) = 0;
  antenna::Service::Internal::enableTxPowerCappingNotification_sync((antenna::Service::Internal *)v3, 1);
  antenna::Service::Internal::sendAccessoryStatus_sync((NSObject **)v3);
  operator delete(v2);
  size_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(a1);
}

void sub_1C5A994C8(_Unwind_Exception *a1)
{
  operator delete(v2);
  xpc_object_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc4dictEEEclIJS2_EEEvDpT__block_invoke(uint64_t a1)
{
}

void dispatch::block<void({block_pointer})(xpc::dict)>::operator()<xpc::dict const&>(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, xpc_object_t *))(v2 + 16))(v2, &object);
  xpc_release(object);
}

void sub_1C5A995A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

xpc_object_t __copy_helper_block_e8_32c53_ZTSN8dispatch5blockIU13block_pointerFvN3xpc4dictEEEE40c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  xpc_object_t v4 = *(const void **)(a2 + 32);
  if (v4)
  {
    size_t v5 = _Block_copy(v4);
    size_t v6 = *(void **)(a2 + 40);
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v6;
    if (v6) {
      return xpc_retain(v6);
    }
  }
  else
  {
    size_t v6 = *(void **)(a2 + 40);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = v6;
    if (v6) {
      return xpc_retain(v6);
    }
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_32c53_ZTSN8dispatch5blockIU13block_pointerFvN3xpc4dictEEEE40c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
    _Block_release(v2);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0>(antenna::Service::Internal::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0>>)::{lambda(void *)#1}::__invoke(int **a1)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = *(antenna::Service::Internal **)*a1;
  unint64_t v52 = 0xAAAAAAAAAAAAAAAALL;
  antenna::Service::Internal::createTransmitStateDict_sync(v2[2], v2[3], (xpc_object_t *)&v52);
  xpc_object_t v4 = (xpc_object_t)v52;
  if (MEMORY[0x1C8795EB0](v52) == MEMORY[0x1E4F14590])
  {
    if (v4)
    {
      xpc_retain(v4);
      xpc_object_t v5 = v4;
    }
    else
    {
      xpc_object_t v5 = xpc_null_create();
    }
    size_t v6 = (void *)*((void *)v3 + 28);
    *((void *)v3 + 28) = v5;
    xpc_release(v6);
    if (v4)
    {
      xpc_retain(v4);
      xpc_object_t v7 = v4;
      uint64_t v8 = (const void *)*((void *)v3 + 13);
      if (v8)
      {
LABEL_7:
        uint64_t v9 = _Block_copy(v8);
        goto LABEL_10;
      }
    }
    else
    {
      xpc_object_t v7 = xpc_null_create();
      uint64_t v8 = (const void *)*((void *)v3 + 13);
      if (v8) {
        goto LABEL_7;
      }
    }
    uint64_t v9 = 0;
LABEL_10:
    int v10 = *((void *)v3 + 14);
    *(void *)&long long block = MEMORY[0x1E4F143A8];
    *((void *)&block + 1) = 1174405120;
    *(void *)&long long v42 = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc4dictEEEclIJS2_EEEvDpT__block_invoke;
    *((void *)&v42 + 1) = &__block_descriptor_tmp_128;
    if (v9)
    {
      object[0] = _Block_copy(v9);
      object[1] = v7;
      if (v7)
      {
LABEL_12:
        xpc_retain(v7);
        goto LABEL_15;
      }
    }
    else
    {
      object[0] = 0;
      object[1] = v7;
      if (v7) {
        goto LABEL_12;
      }
    }
    object[1] = xpc_null_create();
LABEL_15:
    dispatch_async(v10, &block);
    xpc_release(object[1]);
    object[1] = 0;
    if (object[0]) {
      _Block_release(object[0]);
    }
    if (v9) {
      _Block_release(v9);
    }
    xpc_release(v7);
    memset(v51, 170, sizeof(v51));
    xpc_object_t value = xpc_dictionary_get_value(v4, (const char *)*MEMORY[0x1E4F4CD50]);
    *(void *)&long long block = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      *(void *)&long long block = xpc_null_create();
    }
    xpc::dyn_cast_or_default(v51, (xpc *)&block, (const object *)"", v12);
    xpc_release((xpc_object_t)block);
    memset(v50, 170, sizeof(v50));
    xpc_object_t v13 = xpc_dictionary_get_value(v4, (const char *)*MEMORY[0x1E4F4CF18]);
    *(void *)&long long block = v13;
    if (v13) {
      xpc_retain(v13);
    }
    else {
      *(void *)&long long block = xpc_null_create();
    }
    xpc::dyn_cast_or_default(v50, (xpc *)&block, (const object *)"", v14);
    xpc_release((xpc_object_t)block);
    int v15 = SHIBYTE(v51[2]);
    if (v51[2] >= 0) {
      size_t v16 = HIBYTE(v51[2]);
    }
    else {
      size_t v16 = v51[1];
    }
    if (v16 == strlen((const char *)*MEMORY[0x1E4F4D0C0])
      && (v51[2] >= 0 ? (xpc_object_t v17 = v51) : (xpc_object_t v17 = (uint64_t *)v51[0]), !memcmp(v17, (const void *)*MEMORY[0x1E4F4D0C0], v16)))
    {
      BOOL v20 = *((void *)v3 + 5);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(block) = 0;
        _os_log_debug_impl(&dword_1C59C6000, v20, OS_LOG_TYPE_DEBUG, "#D Tx Started", (uint8_t *)&block, 2u);
      }
      antenna::Service::Internal::startTxPowerCapping_sync(v3);
    }
    else if (v16 == strlen((const char *)*MEMORY[0x1E4F4CDB0]))
    {
      int64_t v18 = v15 >= 0 ? v51 : (uint64_t *)v51[0];
      if (!memcmp(v18, (const void *)*MEMORY[0x1E4F4CDB0], v16))
      {
        uint64_t v19 = *((void *)v3 + 5);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(block) = 0;
          _os_log_debug_impl(&dword_1C59C6000, v19, OS_LOG_TYPE_DEBUG, "#D Tx Stopped", (uint8_t *)&block, 2u);
        }
        antenna::Service::Internal::stopTxPowerCapping_sync(v3);
      }
    }
    unint64_t v49 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v21 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v48[7] = v21;
    v48[8] = v21;
    v48[5] = v21;
    void v48[6] = v21;
    v48[3] = v21;
    v48[4] = v21;
    v48[1] = v21;
    v48[2] = v21;
    v48[0] = v21;
    long long v46 = v21;
    long long v47 = v21;
    long long v44 = v21;
    *(_OWORD *)long long __p = v21;
    long long v42 = v21;
    *(_OWORD *)xpc_object_t object = v21;
    long long block = v21;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&block);
    uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&block, (uint64_t)"Transmit State: ", 16);
    if (v51[2] >= 0) {
      uint64_t v23 = v51;
    }
    else {
      uint64_t v23 = (uint64_t *)v51[0];
    }
    if (v51[2] >= 0) {
      uint64_t v24 = HIBYTE(v51[2]);
    }
    else {
      uint64_t v24 = v51[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
    uint64_t v25 = HIBYTE(v50[2]);
    if (v50[2] < 0) {
      uint64_t v25 = v50[1];
    }
    if (v25)
    {
      uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&block, (uint64_t)" (", 2);
      if (v50[2] >= 0) {
        uint64_t v27 = v50;
      }
      else {
        uint64_t v27 = (uint64_t *)v50[0];
      }
      if (v50[2] >= 0) {
        uint64_t v28 = HIBYTE(v50[2]);
      }
      else {
        uint64_t v28 = v50[1];
      }
      uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, v28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)")", 1);
    }
    size_t v30 = *((void *)v3 + 5);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
LABEL_78:
      *(void *)&long long block = *MEMORY[0x1E4FBA418];
      *(void *)((char *)&block + *(void *)(block - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      *((void *)&block + 1) = MEMORY[0x1E4FBA470] + 16;
      if (SHIBYTE(v46) < 0) {
        operator delete(__p[1]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1C8795140](v48);
      if (SHIBYTE(v50[2]) < 0)
      {
        operator delete((void *)v50[0]);
        if ((SHIBYTE(v51[2]) & 0x80000000) == 0) {
          goto LABEL_82;
        }
      }
      else if ((SHIBYTE(v51[2]) & 0x80000000) == 0)
      {
LABEL_82:
        xpc_object_t v4 = (xpc_object_t)v52;
        goto LABEL_83;
      }
      operator delete((void *)v51[0]);
      goto LABEL_82;
    }
    if ((BYTE8(v47) & 0x10) != 0)
    {
      uint64_t v33 = v47;
      if ((unint64_t)v47 < *((void *)&v44 + 1))
      {
        *(void *)&long long v47 = *((void *)&v44 + 1);
        uint64_t v33 = *((void *)&v44 + 1);
      }
      int v34 = (const void *)v44;
      size_t v31 = v33 - v44;
      if ((unint64_t)(v33 - v44) >= 0x7FFFFFFFFFFFFFF8) {
        goto LABEL_90;
      }
    }
    else
    {
      if ((BYTE8(v47) & 8) == 0)
      {
        size_t v31 = 0;
        HIBYTE(v40) = 0;
        size_t v32 = __dst;
        goto LABEL_74;
      }
      int v34 = (const void *)*((void *)&v42 + 1);
      size_t v31 = (size_t)object[1] - *((void *)&v42 + 1);
      if ((char *)object[1] - *((void *)&v42 + 1) >= (xpc_object_t)0x7FFFFFFFFFFFFFF8) {
LABEL_90:
      }
        std::string::__throw_length_error[abi:ne180100]();
    }
    if (v31 >= 0x17)
    {
      uint64_t v35 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v31 | 7) != 0x17) {
        uint64_t v35 = v31 | 7;
      }
      uint64_t v36 = v35 + 1;
      size_t v32 = (void **)operator new(v35 + 1);
      __dst[1] = (void *)v31;
      int64_t v40 = v36 | 0x8000000000000000;
      __dst[0] = v32;
    }
    else
    {
      HIBYTE(v40) = v31;
      size_t v32 = __dst;
      if (!v31) {
        goto LABEL_74;
      }
    }
    memmove(v32, v34, v31);
LABEL_74:
    *((unsigned char *)v32 + v31) = 0;
    BOOL v37 = __dst;
    if (v40 < 0) {
      BOOL v37 = (void **)__dst[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v54 = v37;
    _os_log_impl(&dword_1C59C6000, v30, OS_LOG_TYPE_DEFAULT, "#I %s", buf, 0xCu);
    if (SHIBYTE(v40) < 0) {
      operator delete(__dst[0]);
    }
    goto LABEL_78;
  }
LABEL_83:
  xpc_release(v4);
  operator delete(v2);
  uint64_t v38 = (std::__shared_weak_count *)a1[2];
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  operator delete(a1);
}

void sub_1C5A99D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (*(char *)(v30 - 145) < 0) {
    operator delete(*(void **)(v30 - 168));
  }
  if (*(char *)(v30 - 121) < 0) {
    operator delete(*(void **)(v30 - 144));
  }
  xpc_release(v29);
  operator delete(v28);
  size_t v32 = (std::__shared_weak_count *)v27[2];
  if (v32)
  {
    if (!atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  operator delete(v27);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::setAudioState(xpc::dict)::$_0>(antenna::Service::Internal::setAudioState(xpc::dict)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::setAudioState(xpc::dict)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::setAudioState(xpc::dict)::$_0>>)::{lambda(void *)#1}::__invoke(void **a1)
{
  uint64_t v1 = a1;
  xpc_object_t object[3] = *(xpc_object_t *)MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = (antenna::Service::Internal *)**a1;
  int v159 = v3;
  dispatch_object_t v156 = (xpc_object_t *)*a1;
  if (!*((_DWORD *)v3 + 82))
  {
    xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v4 = v2 + 1;
    xpc_object_t v5 = (void *)*MEMORY[0x1E4F4C2A8];
    object[0] = v4;
    object[1] = v5;
    xpc::dict::object_proxy::operator xpc::dict((uint64_t)object, &xdict);
    xpc_object_t value = xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E4F4CA28]);
    object[0] = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      object[0] = xpc_null_create();
    }
    char v7 = xpc::dyn_cast_or_default((xpc *)object, 0);
    uint64_t v8 = (uint64_t **)((char *)v3 + 288);
    uint64_t v9 = (uint64_t *)*((void *)v3 + 36);
    int v10 = (uint64_t **)((char *)v3 + 288);
    int v11 = (uint64_t **)((char *)v3 + 288);
    if (v9)
    {
      while (1)
      {
        while (1)
        {
          int v11 = (uint64_t **)v9;
          int v12 = *((_DWORD *)v9 + 7);
          if (v12 < 1) {
            break;
          }
          uint64_t v9 = *v11;
          int v10 = v11;
          if (!*v11) {
            goto LABEL_12;
          }
        }
        if ((v12 & 0x80000000) == 0) {
          break;
        }
        uint64_t v9 = v11[1];
        if (!v9)
        {
          int v10 = v11 + 1;
          goto LABEL_12;
        }
      }
      xpc_object_t v13 = v11;
    }
    else
    {
LABEL_12:
      xpc_object_t v13 = operator new(0x28uLL);
      v13[7] = 0;
      *((unsigned char *)v13 + 32) = 0;
      *(void *)xpc_object_t v13 = 0;
      *((void *)v13 + 1) = 0;
      *((void *)v13 + 2) = v11;
      *int v10 = (uint64_t *)v13;
      uint64_t v14 = **((void **)v159 + 35);
      int v15 = (uint64_t *)v13;
      if (v14)
      {
        *((void *)v159 + 35) = v14;
        int v15 = *v10;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v159 + 36), v15);
      ++*((void *)v159 + 37);
    }
    *((unsigned char *)v13 + 32) = v7;
    xpc_release(object[0]);
    xpc_object_t v16 = xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E4F4C680]);
    object[0] = v16;
    if (v16) {
      xpc_retain(v16);
    }
    else {
      object[0] = xpc_null_create();
    }
    char v17 = xpc::dyn_cast_or_default((xpc *)object, 0);
    int64_t v18 = *v8;
    uint64_t v19 = (uint64_t **)((char *)v159 + 288);
    BOOL v20 = (uint64_t **)((char *)v159 + 288);
    if (*v8)
    {
      while (1)
      {
        while (1)
        {
          BOOL v20 = (uint64_t **)v18;
          int v21 = *((_DWORD *)v18 + 7);
          if (v21 < 2) {
            break;
          }
          int64_t v18 = *v20;
          uint64_t v19 = v20;
          if (!*v20) {
            goto LABEL_25;
          }
        }
        if (v21 == 1) {
          break;
        }
        int64_t v18 = v20[1];
        if (!v18)
        {
          uint64_t v19 = v20 + 1;
          goto LABEL_25;
        }
      }
      uint64_t v22 = v20;
    }
    else
    {
LABEL_25:
      uint64_t v22 = operator new(0x28uLL);
      v22[7] = 1;
      *((unsigned char *)v22 + 32) = 0;
      *(void *)uint64_t v22 = 0;
      *((void *)v22 + 1) = 0;
      *((void *)v22 + 2) = v20;
      *uint64_t v19 = (uint64_t *)v22;
      uint64_t v23 = **((void **)v159 + 35);
      uint64_t v24 = (uint64_t *)v22;
      if (v23)
      {
        *((void *)v159 + 35) = v23;
        uint64_t v24 = *v19;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v159 + 36), v24);
      ++*((void *)v159 + 37);
    }
    *((unsigned char *)v22 + 32) = v17;
    xpc_release(object[0]);
    xpc_object_t v25 = xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E4F4C8D0]);
    object[0] = v25;
    if (v25) {
      xpc_retain(v25);
    }
    else {
      object[0] = xpc_null_create();
    }
    char v26 = xpc::dyn_cast_or_default((xpc *)object, 0);
    uint64_t v27 = *v8;
    uint64_t v28 = (uint64_t **)((char *)v159 + 288);
    uint64_t v29 = (uint64_t **)((char *)v159 + 288);
    if (*v8)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v29 = (uint64_t **)v27;
          int v30 = *((_DWORD *)v27 + 7);
          if (v30 < 4) {
            break;
          }
          uint64_t v27 = *v29;
          uint64_t v28 = v29;
          if (!*v29) {
            goto LABEL_39;
          }
        }
        if (v30 == 3) {
          break;
        }
        uint64_t v27 = v29[1];
        if (!v27)
        {
          uint64_t v28 = v29 + 1;
          goto LABEL_39;
        }
      }
      size_t v31 = v29;
    }
    else
    {
LABEL_39:
      size_t v31 = operator new(0x28uLL);
      v31[7] = 3;
      *((unsigned char *)v31 + 32) = 0;
      *(void *)size_t v31 = 0;
      *((void *)v31 + 1) = 0;
      *((void *)v31 + 2) = v29;
      *uint64_t v28 = (uint64_t *)v31;
      uint64_t v32 = **((void **)v159 + 35);
      uint64_t v33 = (uint64_t *)v31;
      if (v32)
      {
        *((void *)v159 + 35) = v32;
        uint64_t v33 = *v28;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v159 + 36), v33);
      ++*((void *)v159 + 37);
    }
    *((unsigned char *)v31 + 32) = v26;
    xpc_release(object[0]);
    int v34 = *v8;
    uint64_t v35 = (uint64_t **)((char *)v159 + 288);
    uint64_t v36 = (uint64_t **)((char *)v159 + 288);
    if (*v8)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v36 = (uint64_t **)v34;
          int v37 = *((_DWORD *)v34 + 7);
          if (v37 < 1) {
            break;
          }
          int v34 = *v36;
          uint64_t v35 = v36;
          if (!*v36) {
            goto LABEL_50;
          }
        }
        if ((v37 & 0x80000000) == 0) {
          break;
        }
        int v34 = v36[1];
        if (!v34)
        {
          uint64_t v35 = v36 + 1;
          goto LABEL_50;
        }
      }
      char v41 = *((unsigned char *)v36 + 32);
      long long v42 = (uint64_t **)((char *)v159 + 312);
      long long v43 = (uint64_t *)*((void *)v159 + 39);
      long long v44 = (uint64_t **)((char *)v159 + 312);
      size_t v45 = (uint64_t **)((char *)v159 + 312);
      if (v43) {
        goto LABEL_58;
      }
    }
    else
    {
LABEL_50:
      uint64_t v38 = operator new(0x28uLL);
      v38[7] = 0;
      *((unsigned char *)v38 + 32) = 0;
      *(void *)uint64_t v38 = 0;
      *((void *)v38 + 1) = 0;
      *((void *)v38 + 2) = v36;
      *uint64_t v35 = (uint64_t *)v38;
      uint64_t v39 = **((void **)v159 + 35);
      int64_t v40 = (uint64_t *)v38;
      if (v39)
      {
        *((void *)v159 + 35) = v39;
        int64_t v40 = *v35;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v159 + 36), v40);
      ++*((void *)v159 + 37);
      char v41 = *((unsigned char *)v38 + 32);
      long long v42 = (uint64_t **)((char *)v159 + 312);
      long long v43 = (uint64_t *)*((void *)v159 + 39);
      long long v44 = (uint64_t **)((char *)v159 + 312);
      size_t v45 = (uint64_t **)((char *)v159 + 312);
      if (v43)
      {
        while (1)
        {
LABEL_58:
          while (1)
          {
            size_t v45 = (uint64_t **)v43;
            int v46 = *((_DWORD *)v43 + 7);
            if (v46 < 1) {
              break;
            }
            long long v43 = *v45;
            long long v44 = v45;
            if (!*v45) {
              goto LABEL_62;
            }
          }
          if ((v46 & 0x80000000) == 0) {
            break;
          }
          long long v43 = v45[1];
          if (!v43)
          {
            long long v44 = v45 + 1;
            goto LABEL_62;
          }
        }
        *((unsigned char *)v45 + 32) = v41;
        CFDictionaryRef v50 = *v8;
        uint64_t v51 = (uint64_t **)((char *)v159 + 288);
        unint64_t v52 = (uint64_t **)((char *)v159 + 288);
        if (*v8) {
          goto LABEL_69;
        }
        goto LABEL_73;
      }
    }
LABEL_62:
    long long v47 = operator new(0x28uLL);
    v47[7] = 0;
    *((unsigned char *)v47 + 32) = 0;
    *(void *)long long v47 = 0;
    *((void *)v47 + 1) = 0;
    *((void *)v47 + 2) = v45;
    std::__shared_weak_count *v44 = (uint64_t *)v47;
    uint64_t v48 = **((void **)v159 + 38);
    unint64_t v49 = (uint64_t *)v47;
    if (v48)
    {
      *((void *)v159 + 38) = v48;
      unint64_t v49 = *v44;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v159 + 39), v49);
    ++*((void *)v159 + 40);
    *((unsigned char *)v47 + 32) = v41;
    CFDictionaryRef v50 = *v8;
    uint64_t v51 = (uint64_t **)((char *)v159 + 288);
    unint64_t v52 = (uint64_t **)((char *)v159 + 288);
    if (*v8)
    {
      while (1)
      {
LABEL_69:
        while (1)
        {
          unint64_t v52 = (uint64_t **)v50;
          int v53 = *((_DWORD *)v50 + 7);
          if (v53 < 2) {
            break;
          }
          CFDictionaryRef v50 = *v52;
          uint64_t v51 = v52;
          if (!*v52) {
            goto LABEL_73;
          }
        }
        if (v53 == 1) {
          break;
        }
        CFDictionaryRef v50 = v52[1];
        if (!v50)
        {
          uint64_t v51 = v52 + 1;
          goto LABEL_73;
        }
      }
      char v57 = *((unsigned char *)v52 + 32);
      std::string v58 = *v42;
      long long v59 = v42;
      uint64_t v60 = v42;
      if (*v42) {
        goto LABEL_80;
      }
      goto LABEL_84;
    }
LABEL_73:
    uint64_t v54 = operator new(0x28uLL);
    v54[7] = 1;
    *((unsigned char *)v54 + 32) = 0;
    *(void *)uint64_t v54 = 0;
    *((void *)v54 + 1) = 0;
    *((void *)v54 + 2) = v52;
    *uint64_t v51 = (uint64_t *)v54;
    uint64_t v55 = **((void **)v159 + 35);
    std::string v56 = (uint64_t *)v54;
    if (v55)
    {
      *((void *)v159 + 35) = v55;
      std::string v56 = *v51;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v159 + 36), v56);
    ++*((void *)v159 + 37);
    char v57 = *((unsigned char *)v54 + 32);
    std::string v58 = *v42;
    long long v59 = v42;
    uint64_t v60 = v42;
    if (*v42)
    {
      while (1)
      {
LABEL_80:
        while (1)
        {
          uint64_t v60 = (uint64_t **)v58;
          int v61 = *((_DWORD *)v58 + 7);
          if (v61 < 2) {
            break;
          }
          std::string v58 = *v60;
          long long v59 = v60;
          if (!*v60) {
            goto LABEL_84;
          }
        }
        if (v61 == 1) {
          break;
        }
        std::string v58 = v60[1];
        if (!v58)
        {
          long long v59 = v60 + 1;
          goto LABEL_84;
        }
      }
      *((unsigned char *)v60 + 32) = v57;
      unint64_t v65 = *v8;
      uint64_t v66 = (uint64_t **)((char *)v159 + 288);
      if (*v8) {
        goto LABEL_91;
      }
      goto LABEL_95;
    }
LABEL_84:
    int v62 = operator new(0x28uLL);
    v62[7] = 1;
    *((unsigned char *)v62 + 32) = 0;
    *(void *)int v62 = 0;
    *((void *)v62 + 1) = 0;
    *((void *)v62 + 2) = v60;
    NSObject *v59 = (uint64_t *)v62;
    uint64_t v63 = **((void **)v159 + 38);
    int v64 = (uint64_t *)v62;
    if (v63)
    {
      *((void *)v159 + 38) = v63;
      int v64 = *v59;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v159 + 39), v64);
    ++*((void *)v159 + 40);
    *((unsigned char *)v62 + 32) = v57;
    unint64_t v65 = *v8;
    uint64_t v66 = (uint64_t **)((char *)v159 + 288);
    if (*v8)
    {
      while (1)
      {
LABEL_91:
        while (1)
        {
          uint64_t v66 = (uint64_t **)v65;
          int v67 = *((_DWORD *)v65 + 7);
          if (v67 < 4) {
            break;
          }
          unint64_t v65 = *v66;
          uint64_t v8 = v66;
          if (!*v66) {
            goto LABEL_95;
          }
        }
        if (v67 == 3) {
          break;
        }
        unint64_t v65 = v66[1];
        if (!v65)
        {
          uint64_t v8 = v66 + 1;
          goto LABEL_95;
        }
      }
      char v71 = *((unsigned char *)v66 + 32);
      uint64_t v72 = *v42;
      size_t v73 = v42;
      if (*v42) {
        goto LABEL_102;
      }
      goto LABEL_106;
    }
LABEL_95:
    std::string v68 = operator new(0x28uLL);
    v68[7] = 3;
    *((unsigned char *)v68 + 32) = 0;
    *(void *)std::string v68 = 0;
    *((void *)v68 + 1) = 0;
    *((void *)v68 + 2) = v66;
    *uint64_t v8 = (uint64_t *)v68;
    uint64_t v69 = **((void **)v159 + 35);
    uint64_t v70 = (uint64_t *)v68;
    if (v69)
    {
      *((void *)v159 + 35) = v69;
      uint64_t v70 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v159 + 36), v70);
    ++*((void *)v159 + 37);
    char v71 = *((unsigned char *)v68 + 32);
    uint64_t v72 = *v42;
    size_t v73 = v42;
    if (*v42)
    {
      while (1)
      {
LABEL_102:
        while (1)
        {
          size_t v73 = (uint64_t **)v72;
          int v74 = *((_DWORD *)v72 + 7);
          if (v74 < 4) {
            break;
          }
          uint64_t v72 = *v73;
          long long v42 = v73;
          if (!*v73) {
            goto LABEL_106;
          }
        }
        if (v74 == 3) {
          break;
        }
        uint64_t v72 = v73[1];
        if (!v72)
        {
          long long v42 = v73 + 1;
          goto LABEL_106;
        }
      }
      int v75 = v73;
      uint64_t v3 = v159;
      goto LABEL_110;
    }
LABEL_106:
    int v75 = operator new(0x28uLL);
    v75[7] = 3;
    *((unsigned char *)v75 + 32) = 0;
    *(void *)int v75 = 0;
    *((void *)v75 + 1) = 0;
    *((void *)v75 + 2) = v73;
    *long long v42 = (uint64_t *)v75;
    uint64_t v3 = v159;
    uint64_t v76 = **((void **)v159 + 38);
    unsigned int v77 = (uint64_t *)v75;
    if (v76)
    {
      *((void *)v159 + 38) = v76;
      unsigned int v77 = *v42;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v159 + 39), v77);
    ++*((void *)v159 + 40);
LABEL_110:
    *((unsigned char *)v75 + 32) = v71;
    xpc_release(xdict);
  }
  char v78 = (uint64_t **)((char *)v3 + 288);
  int v79 = (uint64_t *)*((void *)v3 + 36);
  int v80 = (uint64_t **)((char *)v3 + 288);
  uint64_t v81 = (uint64_t **)((char *)v3 + 288);
  if (!v79)
  {
LABEL_118:
    uint64_t v83 = operator new(0x28uLL);
    v83[7] = 2;
    *((unsigned char *)v83 + 32) = 0;
    *(void *)uint64_t v83 = 0;
    *((void *)v83 + 1) = 0;
    *((void *)v83 + 2) = v81;
    *int v80 = (uint64_t *)v83;
    uint64_t v84 = v159;
    uint64_t v85 = **((void **)v159 + 35);
    unsigned int v86 = (uint64_t *)v83;
    if (v85)
    {
      *((void *)v159 + 35) = v85;
      unsigned int v86 = *v80;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v159 + 36), v86);
    ++*((void *)v159 + 37);
    *((unsigned char *)v83 + 32) = 0;
    if (!*((unsigned char *)v159 + 160)) {
      goto LABEL_199;
    }
LABEL_123:
    uint64_t v88 = (void *)*MEMORY[0x1E4F4C7A0];
    uint64_t v84 = v159;
    if (!xpc_dictionary_get_value(v156[1], (const char *)*MEMORY[0x1E4F4C7A0])) {
      goto LABEL_199;
    }
    xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    object[0] = v156 + 1;
    object[1] = v88;
    xpc::dict::object_proxy::operator xpc::array((uint64_t)object, &xdict);
    xpc_object_t v89 = xdict;
    if (xdict)
    {
      xpc_retain(xdict);
    }
    else
    {
      xpc_object_t v89 = xpc_null_create();
      if (!v89)
      {
        xpc_object_t v89 = xpc_null_create();
        unsigned int v90 = 0;
LABEL_128:
        dispatch_object_t v157 = v78;
        xpc_release(v90);
        xpc_object_t v91 = xdict;
        if (xdict) {
          xpc_retain(xdict);
        }
        else {
          xpc_object_t v91 = xpc_null_create();
        }
        int v155 = v1;
        if (MEMORY[0x1C8795EB0](xdict) == MEMORY[0x1E4F14568])
        {
          size_t count = xpc_array_get_count(xdict);
          if (v91) {
            goto LABEL_133;
          }
        }
        else
        {
          size_t count = 0;
          if (v91)
          {
LABEL_133:
            xpc_retain(v91);
            xpc_object_t v158 = v91;
LABEL_136:
            xpc_release(v91);
            if (count || v89 != v158)
            {
              size_t v93 = 0;
              unsigned int v94 = (const char *)*MEMORY[0x1E4F4C400];
              long long v95 = (const object *)"";
              while (1)
              {
                memset(object, 170, 24);
                xpc_object_t v96 = xpc_array_get_value(v89, v93);
                xpc_object_t v160 = v96;
                if (v96) {
                  xpc_retain(v96);
                }
                else {
                  xpc_object_t v160 = xpc_null_create();
                }
                xpc::dyn_cast_or_default((uint64_t *)object, (xpc *)&v160, v95, v97);
                xpc_release(v160);
                xpc_object_t v98 = (xpc_object_t)strlen(v94);
                xpc_object_t v99 = v98;
                char v100 = HIBYTE(object[2]);
                if (SHIBYTE(object[2]) < 0)
                {
                  if (v98 == (xpc_object_t)-1) {
LABEL_245:
                  }
                    std::string::__throw_out_of_range[abi:ne180100]();
                  xpc_object_t v101 = object[1];
                  if (object[1] >= v98) {
                    xpc_object_t v103 = v98;
                  }
                  else {
                    xpc_object_t v103 = object[1];
                  }
                  if (memcmp(object[0], v94, (size_t)v103)) {
                    goto LABEL_166;
                  }
                }
                else
                {
                  if (v98 == (xpc_object_t)-1) {
                    goto LABEL_245;
                  }
                  xpc_object_t v101 = (xpc_object_t)HIBYTE(object[2]);
                  if (HIBYTE(object[2]) >= (unint64_t)v98) {
                    size_t v102 = (size_t)v98;
                  }
                  else {
                    size_t v102 = HIBYTE(object[2]);
                  }
                  if (memcmp(object, v94, v102)) {
                    goto LABEL_166;
                  }
                }
                if (v101 == v99)
                {
                  uint64_t v104 = v95;
                  __n128 v105 = v157;
                  while (1)
                  {
                    int v106 = *v105;
                    int v107 = v105;
                    if (!*v105) {
                      break;
                    }
                    while (1)
                    {
                      __n128 v105 = (uint64_t **)v106;
                      int v108 = *((_DWORD *)v106 + 7);
                      if (v108 >= 3) {
                        break;
                      }
                      if (v108 == 2)
                      {
                        long long v109 = v105;
                        goto LABEL_165;
                      }
                      int v106 = v105[1];
                      if (!v106)
                      {
                        int v107 = v105 + 1;
                        goto LABEL_161;
                      }
                    }
                  }
LABEL_161:
                  long long v109 = operator new(0x28uLL);
                  v109[7] = 2;
                  *((unsigned char *)v109 + 32) = 0;
                  *(void *)long long v109 = 0;
                  *((void *)v109 + 1) = 0;
                  *((void *)v109 + 2) = v105;
                  *int v107 = (uint64_t *)v109;
                  uint64_t v110 = **((void **)v159 + 35);
                  long long v111 = (uint64_t *)v109;
                  if (v110)
                  {
                    *((void *)v159 + 35) = v110;
                    long long v111 = *v107;
                  }
                  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v159 + 36), v111);
                  ++*((void *)v159 + 37);
                  char v100 = HIBYTE(object[2]);
LABEL_165:
                  *((unsigned char *)v109 + 32) = 1;
                  long long v95 = v104;
                }
LABEL_166:
                if (v100 < 0)
                {
                  operator delete(object[0]);
                  if (++v93 == count) {
                    goto LABEL_170;
                  }
                }
                else if (++v93 == count)
                {
LABEL_170:
                  if (v89 == v158) {
                    break;
                  }
                }
              }
            }
            xpc_release(v158);
            xpc_release(v89);
            uint64_t v1 = v155;
            char v78 = v157;
            int v112 = *((unsigned __int8 *)v159 + 334);
            int v113 = (uint64_t *)*((void *)v159 + 36);
            long long v114 = v157;
            int v115 = v157;
            if (v113)
            {
              while (1)
              {
                while (1)
                {
                  int v115 = (uint64_t **)v113;
                  int v116 = *((_DWORD *)v113 + 7);
                  if (v116 < 3) {
                    break;
                  }
                  int v113 = *v115;
                  long long v114 = v115;
                  if (!*v115) {
                    goto LABEL_178;
                  }
                }
                if (v116 == 2) {
                  break;
                }
                int v113 = v115[1];
                if (!v113)
                {
                  long long v114 = v115 + 1;
                  goto LABEL_178;
                }
              }
              BOOL v120 = v112 == *((unsigned __int8 *)v115 + 32);
              uint64_t v84 = v159;
              if (v120) {
                goto LABEL_198;
              }
            }
            else
            {
LABEL_178:
              uint64_t v117 = operator new(0x28uLL);
              v117[7] = 2;
              *((unsigned char *)v117 + 32) = 0;
              *(void *)uint64_t v117 = 0;
              *((void *)v117 + 1) = 0;
              *((void *)v117 + 2) = v115;
              void *v114 = (uint64_t *)v117;
              uint64_t v118 = **((void **)v159 + 35);
              long long v119 = (uint64_t *)v117;
              if (v118)
              {
                *((void *)v159 + 35) = v118;
                long long v119 = *v114;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v159 + 36), v119);
              ++*((void *)v159 + 37);
              BOOL v120 = v112 == *((unsigned __int8 *)v117 + 32);
              uint64_t v84 = v159;
              if (v120)
              {
LABEL_198:
                xpc_release(xdict);
                goto LABEL_199;
              }
            }
            uint64_t v121 = *v157;
            xpc_object_t v122 = v157;
            xpc_object_t v123 = v157;
            if (*v157)
            {
              while (1)
              {
                while (1)
                {
                  xpc_object_t v123 = (uint64_t **)v121;
                  int v124 = *((_DWORD *)v121 + 7);
                  if (v124 < 3) {
                    break;
                  }
                  uint64_t v121 = *v123;
                  xpc_object_t v122 = v123;
                  if (!*v123) {
                    goto LABEL_191;
                  }
                }
                if (v124 == 2) {
                  break;
                }
                uint64_t v121 = v123[1];
                if (!v121)
                {
                  xpc_object_t v122 = v123 + 1;
                  goto LABEL_191;
                }
              }
              uint64_t v125 = v123;
              uint64_t v84 = v159;
            }
            else
            {
LABEL_191:
              uint64_t v125 = operator new(0x28uLL);
              v125[7] = 2;
              *((unsigned char *)v125 + 32) = 0;
              *(void *)uint64_t v125 = 0;
              *((void *)v125 + 1) = 0;
              *((void *)v125 + 2) = v123;
              *xpc_object_t v122 = (uint64_t *)v125;
              uint64_t v84 = v159;
              uint64_t v126 = **((void **)v159 + 35);
              uint64_t v127 = (uint64_t *)v125;
              if (v126)
              {
                *((void *)v159 + 35) = v126;
                uint64_t v127 = *v122;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v159 + 36), v127);
              ++*((void *)v159 + 37);
            }
            *((unsigned char *)v84 + 334) = *((unsigned char *)v125 + 32);
            antenna::Service::Internal::sendAudioAccessory_sync(v84);
            dispatch_object_t v128 = *((void *)v84 + 5);
            if (os_log_type_enabled(v128, OS_LOG_TYPE_DEBUG))
            {
              int v154 = *((unsigned __int8 *)v84 + 334);
              LODWORD(object[0]) = 67109120;
              HIDWORD(object[0]) = v154;
              _os_log_debug_impl(&dword_1C59C6000, v128, OS_LOG_TYPE_DEBUG, "#D Sent audio wired port to baseband as %d", (uint8_t *)object, 8u);
            }
            goto LABEL_198;
          }
        }
        xpc_object_t v158 = xpc_null_create();
        goto LABEL_136;
      }
    }
    xpc_retain(v89);
    unsigned int v90 = v89;
    goto LABEL_128;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v81 = (uint64_t **)v79;
      int v82 = *((_DWORD *)v79 + 7);
      if (v82 < 3) {
        break;
      }
      int v79 = *v81;
      int v80 = v81;
      if (!*v81) {
        goto LABEL_118;
      }
    }
    if (v82 == 2) {
      break;
    }
    int v79 = v81[1];
    if (!v79)
    {
      int v80 = v81 + 1;
      goto LABEL_118;
    }
  }
  uint64_t v87 = v81;
  uint64_t v84 = v159;
  *((unsigned char *)v87 + 32) = 0;
  if (*((unsigned char *)v159 + 160)) {
    goto LABEL_123;
  }
LABEL_199:
  if (!*((unsigned char *)v84 + 161)) {
    goto LABEL_225;
  }
  int v129 = v84;
  int v130 = *((unsigned __int8 *)v84 + 335);
  uint64_t v131 = (uint64_t *)*((void *)v129 + 36);
  uint64_t v132 = v78;
  xpc_object_t v133 = v78;
  if (!v131)
  {
LABEL_207:
    uint64_t v135 = operator new(0x28uLL);
    v135[7] = 3;
    *((unsigned char *)v135 + 32) = 0;
    *(void *)uint64_t v135 = 0;
    *((void *)v135 + 1) = 0;
    *((void *)v135 + 2) = v133;
    std::__shared_weak_count *v132 = (uint64_t *)v135;
    uint64_t v136 = **((void **)v159 + 35);
    long long v137 = (uint64_t *)v135;
    if (v136)
    {
      *((void *)v159 + 35) = v136;
      long long v137 = *v132;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v159 + 36), v137);
    ++*((void *)v159 + 37);
    if (v130 == *((unsigned __int8 *)v135 + 32)) {
      goto LABEL_225;
    }
    goto LABEL_212;
  }
  while (1)
  {
    while (1)
    {
      xpc_object_t v133 = (uint64_t **)v131;
      int v134 = *((_DWORD *)v131 + 7);
      if (v134 < 4) {
        break;
      }
      uint64_t v131 = *v133;
      uint64_t v132 = v133;
      if (!*v133) {
        goto LABEL_207;
      }
    }
    if (v134 == 3) {
      break;
    }
    uint64_t v131 = v133[1];
    if (!v131)
    {
      uint64_t v132 = v133 + 1;
      goto LABEL_207;
    }
  }
  if (v130 != *((unsigned __int8 *)v133 + 32))
  {
LABEL_212:
    int v138 = *v78;
    uint64_t v139 = v78;
    if (*v78)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v139 = (uint64_t **)v138;
          int v140 = *((_DWORD *)v138 + 7);
          if (v140 < 4) {
            break;
          }
          int v138 = *v139;
          char v78 = v139;
          if (!*v139) {
            goto LABEL_219;
          }
        }
        if (v140 == 3) {
          break;
        }
        int v138 = v139[1];
        if (!v138)
        {
          char v78 = v139 + 1;
          goto LABEL_219;
        }
      }
      uint64_t v141 = v139;
      xpc_object_t v142 = v159;
    }
    else
    {
LABEL_219:
      uint64_t v141 = operator new(0x28uLL);
      v141[7] = 3;
      *((unsigned char *)v141 + 32) = 0;
      *(void *)uint64_t v141 = 0;
      *((void *)v141 + 1) = 0;
      *((void *)v141 + 2) = v139;
      *char v78 = (uint64_t *)v141;
      xpc_object_t v142 = v159;
      uint64_t v143 = **((void **)v159 + 35);
      uint64_t v144 = (uint64_t *)v141;
      if (v143)
      {
        *((void *)v159 + 35) = v143;
        uint64_t v144 = *v78;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v159 + 36), v144);
      ++*((void *)v159 + 37);
    }
    *((unsigned char *)v142 + 335) = *((unsigned char *)v141 + 32);
    antenna::Service::Internal::sendAudioSpeaker(v142);
    unint64_t v145 = *((void *)v142 + 5);
    if (os_log_type_enabled(v145, OS_LOG_TYPE_DEBUG))
    {
      int v153 = *((unsigned __int8 *)v142 + 335);
      LODWORD(object[0]) = 67109120;
      HIDWORD(object[0]) = v153;
      _os_log_debug_impl(&dword_1C59C6000, v145, OS_LOG_TYPE_DEBUG, "#D Sent audio speaker message to baseband as %d", (uint8_t *)object, 8u);
    }
  }
LABEL_225:
  pthread_mutex_lock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  int v146 = (Capabilities *)unk_1EBBDC788;
  if (!unk_1EBBDC788)
  {
    dispatch_object_t v147 = operator new(1uLL);
    uint64_t v148 = operator new(0x20uLL);
    void *v148 = &unk_1F2112060;
    v148[1] = 0;
    v148[2] = 0;
    v148[3] = v147;
    long long v149 = (std::__shared_weak_count *)off_1EBBDC790;
    unk_1EBBDC788 = v147;
    off_1EBBDC790 = v148;
    if (v149 && !atomic_fetch_add(&v149->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
    int v146 = (Capabilities *)unk_1EBBDC788;
  }
  xpc_object_t v150 = (std::__shared_weak_count *)off_1EBBDC790;
  if (off_1EBBDC790) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDC790 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  if (Capabilities::isCMHandDetectionSupported(v146))
  {
    int v151 = *((unsigned __int8 *)v159 + 216);
    if (v150 && !atomic_fetch_add(&v150->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
      if (!v151) {
        goto LABEL_241;
      }
      goto LABEL_236;
    }
    if (v151) {
LABEL_236:
    }
      antenna::Service::Internal::processHandDetection_sync(v159);
  }
  else if (v150 && !atomic_fetch_add(&v150->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
    std::__shared_weak_count::__release_weak(v150);
  }
LABEL_241:
  xpc_release(v156[1]);
  operator delete(v156);
  dispatch_object_t v152 = (std::__shared_weak_count *)v1[2];
  if (v152 && !atomic_fetch_add(&v152->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
    std::__shared_weak_count::__release_weak(v152);
  }
  operator delete(v1);
}

void sub_1C5A9B010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, xpc_object_t *__p, uint64_t a12, xpc_object_t a13, uint64_t a14, xpc_object_t a15, xpc_object_t object, xpc_object_t a17)
{
  xpc_release(object);
  xpc_release(__p[1]);
  operator delete(__p);
  int64_t v18 = (std::__shared_weak_count *)a10[2];
  if (v18)
  {
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  operator delete(a10);
  _Unwind_Resume(a1);
}

void sub_1C5A9B260(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::handDetectCallback(CMHandDetectionDelegate::CMHandDetectionResult)::$_0>(antenna::Service::Internal::handDetectCallback(CMHandDetectionDelegate::CMHandDetectionResult)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::handDetectCallback(CMHandDetectionDelegate::CMHandDetectionResult)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::handDetectCallback(CMHandDetectionDelegate::CMHandDetectionResult)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  xpc_object_t v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    int v6 = *((_DWORD *)v2 + 2);
    v7[0] = 67109120;
    v7[1] = v6;
    _os_log_debug_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEBUG, "#D Hand Detection State: %d", (uint8_t *)v7, 8u);
  }
  *(_DWORD *)(v3 + 528) = *((_DWORD *)v2 + 2);
  antenna::Service::Internal::processHandDetection_sync((antenna::Service::Internal *)v3);
  operator delete(v2);
  xpc_object_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(a1);
}

void sub_1C5A9B394(_Unwind_Exception *a1)
{
  operator delete(v2);
  xpc_object_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::antennaSetProperty(xpc::dict const&)::$_0>(antenna::Service::Internal::antennaSetProperty(xpc::dict const&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::antennaSetProperty(xpc::dict const&)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::antennaSetProperty(xpc::dict const&)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)a1;
  antenna::Service::Internal::antennaSetProperty(xpc::dict const&)::$_0::operator()(*(uint64_t **)a1);
  if (v2)
  {
    xpc_release((xpc_object_t)v2[1]);
    operator delete(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    xpc_object_t v4 = (void *)a1;
  }
  else
  {
    xpc_object_t v4 = (void *)a1;
  }
  operator delete(v4);
}

void sub_1C5A9B4C4(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  if (v3)
  {
    xpc_object_t v5 = v3;
    xpc_release(v3[1]);
    operator delete(v5);
  }
  int v6 = (std::__shared_weak_count *)v1[2];
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::antennaSetProperty(xpc::dict const&)::$_0::operator()(uint64_t *a1)
{
  uint64_t v141 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = *(NSObject **)(*a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    xpc::object::to_string((uint64_t *)v140, (xpc::object *)(a1 + 1));
    xpc_object_t v4 = (v140[23] & 0x80u) == 0 ? v140 : *(uint8_t **)v140;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
    _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Set Property: %s", (uint8_t *)&buf, 0xCu);
    if ((char)v140[23] < 0) {
      operator delete(*(void **)v140);
    }
  }
  memset(&buf, 170, sizeof(buf));
  int v6 = (void *)a1[1];
  xpc_object_t v5 = (xpc_object_t *)(a1 + 1);
  xpc_object_t value = xpc_dictionary_get_value(v6, (const char *)*MEMORY[0x1E4F4C878]);
  *(void *)int v140 = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    *(void *)int v140 = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)&buf, (xpc *)v140, (const object *)"", v8);
  xpc_release(*(xpc_object_t *)v140);
  size_t v9 = strlen((const char *)*MEMORY[0x1E4F4CAF8]);
  std::string::size_type v10 = v9;
  std::string::size_type v11 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v9 != -1)
    {
      p_std::string buf = &buf;
      std::string::size_type size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
      goto LABEL_15;
    }
LABEL_258:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v9 == -1) {
    goto LABEL_258;
  }
  std::string::size_type size = buf.__r_.__value_.__l.__size_;
  p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
LABEL_15:
  if (size >= v10) {
    size_t v14 = v10;
  }
  else {
    size_t v14 = size;
  }
  if (!memcmp(p_buf, (const void *)*MEMORY[0x1E4F4CAF8], v14) && size == v10)
  {
    uint64_t v21 = *MEMORY[0x1E4F4C628];
    if (xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E4F4C628]))
    {
      *(void *)int v140 = v5;
      *(void *)&v140[8] = v21;
      xpc::dict::object_proxy::operator xpc::dict((uint64_t)v140, object);
      antenna::Service::Internal::setTxPowerCappingIPhoneMode_sync((antenna::Service::Internal *)v2, object);
      xpc_release(object[0]);
      goto LABEL_246;
    }
    int v30 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      goto LABEL_246;
    }
    *(_WORD *)int v140 = 0;
    size_t v31 = "Cannot find command data!";
    goto LABEL_112;
  }
  xpc_object_t v16 = (const void *)*MEMORY[0x1E4F4C508];
  size_t v17 = strlen((const char *)*MEMORY[0x1E4F4C508]);
  size_t v18 = v17;
  if ((v11 & 0x80) != 0)
  {
    if (v17 != -1)
    {
      std::string::size_type v19 = buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_ >= v17) {
        size_t v22 = v17;
      }
      else {
        size_t v22 = buf.__r_.__value_.__l.__size_;
      }
      if (memcmp(buf.__r_.__value_.__l.__data_, v16, v22)) {
        goto LABEL_40;
      }
      goto LABEL_36;
    }
LABEL_259:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v17 == -1) {
    goto LABEL_259;
  }
  std::string::size_type v19 = v11;
  if (v11 >= v17) {
    size_t v20 = v17;
  }
  else {
    size_t v20 = v11;
  }
  if (memcmp(&buf, v16, v20)) {
    goto LABEL_40;
  }
LABEL_36:
  if (v19 == v18)
  {
    uint64_t v23 = (const char *)*MEMORY[0x1E4F4C628];
    if (xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E4F4C628]))
    {
      xpc_object_t v24 = xpc_dictionary_get_value(*v5, v23);
      *(void *)int v140 = v24;
      if (v24) {
        xpc_retain(v24);
      }
      else {
        *(void *)int v140 = xpc_null_create();
      }
      antenna::Service::Internal::setTxPowerCappingIPhoneOverrideFreeSpace_sync((antenna::Service::Internal *)v2, (const xpc::object *)v140);
      xpc_release(*(xpc_object_t *)v140);
      goto LABEL_246;
    }
    int v30 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      goto LABEL_246;
    }
    *(_WORD *)int v140 = 0;
    size_t v31 = "Cannot find command data!";
    goto LABEL_112;
  }
LABEL_40:
  xpc_object_t v25 = (const void *)*MEMORY[0x1E4F4C710];
  size_t v26 = strlen((const char *)*MEMORY[0x1E4F4C710]);
  size_t v27 = v26;
  if ((v11 & 0x80) != 0)
  {
    if (v26 != -1)
    {
      std::string::size_type v28 = buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_ >= v26) {
        size_t v32 = v26;
      }
      else {
        size_t v32 = buf.__r_.__value_.__l.__size_;
      }
      if (memcmp(buf.__r_.__value_.__l.__data_, v25, v32)) {
        goto LABEL_57;
      }
      goto LABEL_54;
    }
LABEL_260:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 == -1) {
    goto LABEL_260;
  }
  std::string::size_type v28 = v11;
  if (v11 >= v26) {
    size_t v29 = v26;
  }
  else {
    size_t v29 = v11;
  }
  if (memcmp(&buf, v25, v29)) {
    goto LABEL_57;
  }
LABEL_54:
  if (v28 == v27)
  {
    uint64_t v33 = *MEMORY[0x1E4F4C628];
    if (xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E4F4C628]))
    {
      *(void *)int v140 = v5;
      *(void *)&v140[8] = v33;
      xpc::dict::object_proxy::operator xpc::dict((uint64_t)v140, object);
      antenna::Service::Internal::setTxPowerAudioMode_sync((uint64_t **)v2, object);
      xpc_release(object[0]);
      goto LABEL_246;
    }
    int v30 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      goto LABEL_246;
    }
    *(_WORD *)int v140 = 0;
    size_t v31 = "Cannot find command data!";
    goto LABEL_112;
  }
LABEL_57:
  int v34 = (const void *)*MEMORY[0x1E4F4C868];
  size_t v35 = strlen((const char *)*MEMORY[0x1E4F4C868]);
  size_t v36 = v35;
  if ((v11 & 0x80) != 0)
  {
    if (v35 != -1)
    {
      std::string::size_type v37 = buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_ >= v35) {
        size_t v39 = v35;
      }
      else {
        size_t v39 = buf.__r_.__value_.__l.__size_;
      }
      if (memcmp(buf.__r_.__value_.__l.__data_, v34, v39)) {
        goto LABEL_76;
      }
      goto LABEL_73;
    }
LABEL_261:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v35 == -1) {
    goto LABEL_261;
  }
  std::string::size_type v37 = v11;
  if (v11 >= v35) {
    size_t v38 = v35;
  }
  else {
    size_t v38 = v11;
  }
  if (memcmp(&buf, v34, v38)) {
    goto LABEL_76;
  }
LABEL_73:
  if (v37 == v36)
  {
    uint64_t v40 = *MEMORY[0x1E4F4C628];
    if (xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E4F4C628]))
    {
      *(void *)int v140 = v5;
      *(void *)&v140[8] = v40;
      xpc::dict::object_proxy::operator xpc::dict((uint64_t)v140, object);
      antenna::Service::Internal::setTxPowerAudioAlert_sync((antenna::Service::Internal *)v2, object);
      xpc_release(object[0]);
      goto LABEL_246;
    }
    int v30 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      goto LABEL_246;
    }
    *(_WORD *)int v140 = 0;
    size_t v31 = "Cannot find command data!";
    goto LABEL_112;
  }
LABEL_76:
  char v41 = (const void *)*MEMORY[0x1E4F4CFA8];
  size_t v42 = strlen((const char *)*MEMORY[0x1E4F4CFA8]);
  size_t v43 = v42;
  if ((v11 & 0x80) != 0)
  {
    if (v42 != -1)
    {
      std::string::size_type v44 = buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_ >= v42) {
        size_t v46 = v42;
      }
      else {
        size_t v46 = buf.__r_.__value_.__l.__size_;
      }
      if (memcmp(buf.__r_.__value_.__l.__data_, v41, v46)) {
        goto LABEL_93;
      }
      goto LABEL_90;
    }
LABEL_262:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v42 == -1) {
    goto LABEL_262;
  }
  std::string::size_type v44 = v11;
  if (v11 >= v42) {
    size_t v45 = v42;
  }
  else {
    size_t v45 = v11;
  }
  if (memcmp(&buf, v41, v45)) {
    goto LABEL_93;
  }
LABEL_90:
  if (v44 == v43)
  {
    uint64_t v47 = *MEMORY[0x1E4F4C628];
    if (xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E4F4C628]))
    {
      *(void *)int v140 = v5;
      *(void *)&v140[8] = v47;
      xpc::dict::object_proxy::operator xpc::dict((uint64_t)v140, object);
      antenna::Service::Internal::setTxPowerMotionMode_sync((antenna::Service::Internal *)v2, object);
      xpc_release(object[0]);
      goto LABEL_246;
    }
    int v30 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      goto LABEL_246;
    }
    *(_WORD *)int v140 = 0;
    size_t v31 = "Cannot find command data!";
    goto LABEL_112;
  }
LABEL_93:
  size_t v48 = strlen((const char *)*MEMORY[0x1E4F4CFD0]);
  std::string::size_type v49 = v48;
  if ((v11 & 0x80) == 0)
  {
    if (v48 != -1)
    {
      CFDictionaryRef v50 = &buf;
      std::string::size_type v51 = v11;
      goto LABEL_100;
    }
LABEL_263:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v48 == -1) {
    goto LABEL_263;
  }
  std::string::size_type v51 = buf.__r_.__value_.__l.__size_;
  CFDictionaryRef v50 = (std::string *)buf.__r_.__value_.__r.__words[0];
LABEL_100:
  if (v51 >= v49) {
    size_t v52 = v49;
  }
  else {
    size_t v52 = v51;
  }
  if (!memcmp(v50, (const void *)*MEMORY[0x1E4F4CFD0], v52) && v51 == v49)
  {
    object[0] = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    uint64_t v53 = *MEMORY[0x1E4F4C628];
    *(void *)int v140 = v5;
    *(void *)&v140[8] = v53;
    xpc::dict::object_proxy::operator xpc::dict((uint64_t)v140, object);
    xpc_object_t v54 = xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E4F4C308]);
    p_xpc_object_t xdict = v54;
    if (v54) {
      xpc_retain(v54);
    }
    else {
      p_xpc_object_t xdict = xpc_null_create();
    }
    uint64_t v66 = (const object *)*MEMORY[0x1E4F4D2C8];
    xpc::dyn_cast_or_default((uint64_t *)v140, (xpc *)&p_xdict, (const object *)*MEMORY[0x1E4F4D2C8], v55);
    int v67 = (void **)(v2 + 392);
    if (*(char *)(v2 + 415) < 0) {
      operator delete(*v67);
    }
    *(_OWORD *)int v67 = *(_OWORD *)v140;
    *(void *)(v2 + 408) = *(void *)&v140[16];
    v140[23] = 0;
    v140[0] = 0;
    xpc_release(p_xdict);
    xpc_object_t v68 = xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E4F4C4F0]);
    p_xpc_object_t xdict = v68;
    if (v68) {
      xpc_retain(v68);
    }
    else {
      p_xpc_object_t xdict = xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)v140, (xpc *)&p_xdict, v66, v69);
    uint64_t v70 = (void **)(v2 + 416);
    if (*(char *)(v2 + 439) < 0) {
      operator delete(*v70);
    }
    *(_OWORD *)uint64_t v70 = *(_OWORD *)v140;
    *(void *)(v2 + 432) = *(void *)&v140[16];
    v140[23] = 0;
    v140[0] = 0;
    xpc_release(p_xdict);
    antenna::Service::Internal::sendAccessoryStatus_sync((NSObject **)v2);
    xpc_release(object[0]);
    goto LABEL_246;
  }
  size_t v56 = strlen((const char *)*MEMORY[0x1E4F4CD98]);
  std::string::size_type v57 = v56;
  if ((v11 & 0x80) == 0)
  {
    if (v56 != -1)
    {
      std::string v58 = &buf;
      std::string::size_type v59 = v11;
      goto LABEL_115;
    }
LABEL_264:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v56 == -1) {
    goto LABEL_264;
  }
  std::string::size_type v59 = buf.__r_.__value_.__l.__size_;
  std::string v58 = (std::string *)buf.__r_.__value_.__r.__words[0];
LABEL_115:
  if (v59 >= v57) {
    size_t v60 = v57;
  }
  else {
    size_t v60 = v59;
  }
  if (!memcmp(v58, (const void *)*MEMORY[0x1E4F4CD98], v60) && v59 == v57)
  {
    xpc_object_t v61 = xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E4F4C628]);
    *(void *)int v140 = v61;
    if (v61) {
      xpc_retain(v61);
    }
    else {
      *(void *)int v140 = xpc_null_create();
    }
    xpc::dyn_cast_or_default((xpc *)v140, 0);
    xpc_release(*(xpc_object_t *)v140);
    if (!*(unsigned char *)(v2 + 664)) {
      antenna::Service::Internal::configTxPower_sync(v2, 2u);
    }
    goto LABEL_246;
  }
  size_t v62 = strlen((const char *)*MEMORY[0x1E4F4D020]);
  std::string::size_type v63 = v62;
  if ((v11 & 0x80) == 0)
  {
    if (v62 != -1)
    {
      int v64 = &buf;
      std::string::size_type v65 = v11;
      goto LABEL_136;
    }
LABEL_265:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v62 == -1) {
    goto LABEL_265;
  }
  std::string::size_type v65 = buf.__r_.__value_.__l.__size_;
  int v64 = (std::string *)buf.__r_.__value_.__r.__words[0];
LABEL_136:
  if (v65 >= v63) {
    size_t v71 = v63;
  }
  else {
    size_t v71 = v65;
  }
  if (!memcmp(v64, (const void *)*MEMORY[0x1E4F4D020], v71) && v65 == v63)
  {
    if (*(unsigned char *)(v2 + 476))
    {
      uint64_t v72 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v140 = 0;
        _os_log_impl(&dword_1C59C6000, v72, OS_LOG_TYPE_DEFAULT, "#I Ignore to set CLTM/PPM since overriding is being used.", v140, 2u);
      }
    }
    else
    {
      uint64_t v84 = *MEMORY[0x1E4F4C628];
      *(void *)int v140 = v5;
      *(void *)&v140[8] = v84;
      xpc::dict::object_proxy::operator xpc::dict((uint64_t)v140, object);
      antenna::Service::Internal::setMaxPower_sync((antenna::Service::Internal *)v2, object);
      xpc_release(object[0]);
    }
    goto LABEL_246;
  }
  size_t v73 = strlen((const char *)*MEMORY[0x1E4F4CEB0]);
  std::string::size_type v74 = v73;
  if ((v11 & 0x80) == 0)
  {
    if (v73 != -1)
    {
      int v75 = &buf;
      goto LABEL_152;
    }
LABEL_266:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v73 == -1) {
    goto LABEL_266;
  }
  std::string::size_type v11 = buf.__r_.__value_.__l.__size_;
  int v75 = (std::string *)buf.__r_.__value_.__r.__words[0];
LABEL_152:
  if (v11 >= v74) {
    size_t v76 = v74;
  }
  else {
    size_t v76 = v11;
  }
  if (!memcmp(v75, (const void *)*MEMORY[0x1E4F4CEB0], v76) && v11 == v74)
  {
    uint64_t v77 = *MEMORY[0x1E4F4C628];
    *(void *)int v140 = v5;
    *(void *)&v140[8] = v77;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)v140, object);
    int v78 = xpc::dyn_cast_or_default((xpc *)object, 0);
    antenna::Service::Internal::setLinkQualityMetric_sync(v2, v78);
    xpc_release(object[0]);
    goto LABEL_246;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E4F4C808]))
  {
    memset(object, 170, 24);
    uint64_t v85 = *MEMORY[0x1E4F4C628];
    p_xpc_object_t xdict = v5;
    uint64_t v136 = v85;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&p_xdict, &xdict);
    memset(v140, 0, sizeof(v140));
    xpc::dyn_cast_or_default();
    if ((char)v140[23] < 0) {
      operator delete(*(void **)v140);
    }
    xpc_release(xdict);
    if (SHIBYTE(object[2]) >= 0) {
      unsigned int v86 = object;
    }
    else {
      unsigned int v86 = (xpc_object_t *)object[0];
    }
    size_t v87 = strlen((const char *)*MEMORY[0x1E4F4C608]);
    *(unsigned char *)(v2 + 488) = strncasecmp((const char *)v86, (const char *)*MEMORY[0x1E4F4C608], v87) == 0;
    ctu::LoggerCommonBase::setLogLevel();
    if (SHIBYTE(object[2]) < 0) {
      operator delete(object[0]);
    }
    goto LABEL_246;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E4F4CFA0]))
  {
    uint64_t v88 = *MEMORY[0x1E4F4C628];
    if (xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E4F4C628]))
    {
      *(void *)int v140 = v5;
      *(void *)&v140[8] = v88;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)v140, object);
      xpc::dyn_cast_or_default((uint64_t *)__p, (xpc *)object, (const object *)"", v89);
      antenna::Service::Internal::setTxPowerMotionHandDetection_sync(v2, (uint64_t)__p);
      if (v134 < 0) {
        operator delete(__p[0]);
      }
      xpc_release(object[0]);
      goto LABEL_246;
    }
    int v30 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      goto LABEL_246;
    }
    *(_WORD *)int v140 = 0;
    size_t v31 = "Cannot find the command data!";
    goto LABEL_112;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E4F4CF90]))
  {
    uint64_t v90 = *MEMORY[0x1E4F4C628];
    if (xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E4F4C628]))
    {
      *(void *)int v140 = v5;
      *(void *)&v140[8] = v90;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)v140, object);
      *(_DWORD *)(v2 + 568) = xpc::dyn_cast_or_default((xpc *)object, 0);
      xpc_release(object[0]);
      xpc_object_t v91 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v91, OS_LOG_TYPE_DEBUG))
      {
        ctu::iokit::asString();
        dispatch_object_t v128 = (v140[23] & 0x80u) == 0 ? v140 : *(uint8_t **)v140;
        LODWORD(object[0]) = 136315138;
        *(xpc_object_t *)((char *)object + 4) = v128;
        _os_log_debug_impl(&dword_1C59C6000, v91, OS_LOG_TYPE_DEBUG, "#D Power source overriding as %s", (uint8_t *)object, 0xCu);
        if ((char)v140[23] < 0) {
          operator delete(*(void **)v140);
        }
      }
      antenna::Service::Internal::sendPowerSource_sync((antenna::Service::Internal *)v2);
      goto LABEL_246;
    }
    int v30 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      goto LABEL_246;
    }
    *(_WORD *)int v140 = 0;
    size_t v31 = "Cannot find the command data!";
    goto LABEL_112;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E4F4C810]))
  {
    int v92 = (void *)*MEMORY[0x1E4F4C628];
    if (xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E4F4C628]))
    {
      object[0] = v5;
      object[1] = v92;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &p_xdict);
      size_t v93 = (const char *)*MEMORY[0x1E4F4D2C8];
      xpc::dyn_cast_or_default((uint64_t *)v140, (xpc *)&p_xdict, (const object *)*MEMORY[0x1E4F4D2C8], v94);
      long long v95 = (void **)(v2 + 592);
      if (*(char *)(v2 + 615) < 0) {
        operator delete(*v95);
      }
      *(_OWORD *)long long v95 = *(_OWORD *)v140;
      *(void *)(v2 + 608) = *(void *)&v140[16];
      v140[23] = 0;
      v140[0] = 0;
      xpc_release(p_xdict);
      xpc_object_t v96 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v96, OS_LOG_TYPE_DEBUG))
      {
        int v129 = (void *)(v2 + 592);
        if (*(char *)(v2 + 615) < 0) {
          int v129 = *v95;
        }
        *(_DWORD *)int v140 = 136315138;
        *(void *)&v140[4] = v129;
        _os_log_debug_impl(&dword_1C59C6000, v96, OS_LOG_TYPE_DEBUG, "#D Overriding PPM: %s", v140, 0xCu);
        if (*(void *)(v2 + 576))
        {
LABEL_198:
          int v98 = *(char *)(v2 + 615);
          xpc_object_t v99 = (const char *)(v2 + 592);
          if (v98 < 0) {
            xpc_object_t v99 = (const char *)*v95;
          }
          size_t v100 = strlen((const char *)*MEMORY[0x1E4F4C5E0]);
          if (!strncasecmp(v99, (const char *)*MEMORY[0x1E4F4C5E0], v100))
          {
            int v105 = 1;
          }
          else
          {
            xpc_object_t v101 = (const char *)(v2 + 592);
            if (v98 < 0) {
              xpc_object_t v101 = (const char *)*v95;
            }
            size_t v102 = strlen((const char *)*MEMORY[0x1E4F4C6B8]);
            if (!strncasecmp(v101, (const char *)*MEMORY[0x1E4F4C6B8], v102))
            {
              int v105 = 0;
              *(unsigned char *)(v2 + 572) = 0;
              goto LABEL_245;
            }
            if (v98 < 0) {
              long long v95 = (void **)*v95;
            }
            size_t v103 = strlen(v93);
            uint64_t v104 = (capabilities::txpower *)strncasecmp((const char *)v95, v93, v103);
            if (v104)
            {
              int v105 = *(unsigned char *)(v2 + 572) != 0;
LABEL_245:
              antenna::Service::Internal::enablePPM_sync((antenna::Service::Internal *)v2, v105);
              goto LABEL_246;
            }
            int v105 = capabilities::txpower::supportsPPM(v104);
          }
          *(unsigned char *)(v2 + 572) = v105;
          goto LABEL_245;
        }
      }
      else if (*(void *)(v2 + 576))
      {
        goto LABEL_198;
      }
      uint64_t v97 = *(void *)(v2 + 144);
      v132[0] = *(void *)(v2 + 136);
      v132[1] = v97;
      if (v97) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v97 + 8), 1uLL, memory_order_relaxed);
      }
      PPMManager::create(v132, v140);
      std::shared_ptr<PPMManager>::operator=[abi:ne180100](v2 + 576, (long long *)v140);
      std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)v140);
      std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)v132);
      goto LABEL_198;
    }
    int v30 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      goto LABEL_246;
    }
    *(_WORD *)int v140 = 0;
    size_t v31 = "Cannot find the command data!";
LABEL_112:
    _os_log_error_impl(&dword_1C59C6000, v30, OS_LOG_TYPE_ERROR, v31, v140, 2u);
    goto LABEL_246;
  }
  if (std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E4F4D018]))
  {
    if (std::string::compare(&buf, "kSetWorkoutInfo"))
    {
      if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E4F4C108]))
      {
        xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
        uint64_t v79 = *MEMORY[0x1E4F4C628];
        *(void *)int v140 = v5;
        *(void *)&v140[8] = v79;
        xpc::dict::object_proxy::operator xpc::dict((uint64_t)v140, &xdict);
        memset(v140, 170, sizeof(v140));
        std::string::basic_string[abi:ne180100]<0>(v140, "");
        uint64_t v80 = *MEMORY[0x1E4F4CCB0];
        if (xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E4F4CCB0]))
        {
          p_xpc_object_t xdict = &xdict;
          uint64_t v136 = v80;
          xpc::dict::object_proxy::operator xpc::object((uint64_t)&p_xdict, &v131);
          xpc::dyn_cast_or_default((uint64_t *)object, (xpc *)&v131, (const object *)"", v81);
          if ((char)v140[23] < 0) {
            operator delete(*(void **)v140);
          }
          *(_OWORD *)int v140 = *(_OWORD *)object;
          *(xpc_object_t *)&v140[16] = object[2];
          HIBYTE(object[2]) = 0;
          LOBYTE(object[0]) = 0;
          xpc_release(v131);
          if ((v140[23] & 0x80u) == 0) {
            int v82 = v140;
          }
          else {
            int v82 = *(uint8_t **)v140;
          }
          size_t v83 = strlen((const char *)*MEMORY[0x1E4F4C100]);
          *(unsigned char *)(v2 + 476) = strncmp((const char *)v82, (const char *)*MEMORY[0x1E4F4C100], v83) == 0;
        }
        antenna::Service::Internal::setMaxPower_sync((antenna::Service::Internal *)v2, &xdict);
        if ((char)v140[23] < 0) {
          operator delete(*(void **)v140);
        }
        xpc_release(xdict);
      }
      goto LABEL_246;
    }
    if (*(unsigned char *)(v2 + 688))
    {
      BOOL v120 = (void *)*MEMORY[0x1E4F4C628];
      object[0] = v5;
      object[1] = v120;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &p_xdict);
      uint64_t v121 = (char *)*MEMORY[0x1E4F4D2C8];
      xpc::dyn_cast_or_default((uint64_t *)v140, (xpc *)&p_xdict, (const object *)*MEMORY[0x1E4F4D2C8], v122);
      xpc_object_t v123 = (void **)(v2 + 696);
      if (*(char *)(v2 + 719) < 0) {
        operator delete(*v123);
      }
      *(_OWORD *)xpc_object_t v123 = *(_OWORD *)v140;
      *(void *)(v2 + 712) = *(void *)&v140[16];
      v140[23] = 0;
      v140[0] = 0;
      xpc_release(p_xdict);
      std::string::basic_string[abi:ne180100]<0>(v140, v121);
      BOOL v124 = util::equal_nocase((const char *)(v2 + 696), (const char *)v140);
      if ((char)v140[23] < 0) {
        operator delete(*(void **)v140);
      }
      if (!v124)
      {
        *(void *)int v140 = v5;
        *(void *)&v140[8] = "kKeyWorkoutType";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)v140, object);
        *(_DWORD *)(v2 + 720) = xpc::dyn_cast_or_default((xpc *)object, 0);
        xpc_release(object[0]);
        *(void *)int v140 = v5;
        *(void *)&v140[8] = "kKeyWorkoutState";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)v140, object);
        *(_DWORD *)(v2 + 724) = xpc::dyn_cast_or_default((xpc *)object, 0);
        xpc_release(object[0]);
        *(void *)int v140 = v5;
        *(void *)&v140[8] = "kKeyWorkoutLocation";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)v140, object);
        *(_DWORD *)(v2 + 728) = xpc::dyn_cast_or_default((xpc *)object, 0);
        xpc_release(object[0]);
        *(void *)int v140 = v5;
        *(void *)&v140[8] = "kKeySwimLocation";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)v140, object);
        *(_DWORD *)(v2 + 732) = xpc::dyn_cast_or_default((xpc *)object, 0);
        xpc_release(object[0]);
        antenna::Service::Internal::sendWorkoutInfo_sync((antenna::Service::Internal *)v2);
      }
      goto LABEL_246;
    }
    uint64_t v125 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v125, OS_LOG_TYPE_ERROR)) {
      goto LABEL_246;
    }
    uint64_t v127 = &buf;
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v127 = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)int v140 = 136315138;
    *(void *)&v140[4] = v127;
LABEL_237:
    _os_log_error_impl(&dword_1C59C6000, v125, OS_LOG_TYPE_ERROR, "%s is not supported in this device", v140, 0xCu);
    goto LABEL_246;
  }
  if (!*(unsigned char *)(v2 + 170))
  {
    uint64_t v125 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v125, OS_LOG_TYPE_ERROR)) {
      goto LABEL_246;
    }
    uint64_t v126 = &buf;
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v126 = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)int v140 = 136315138;
    *(void *)&v140[4] = v126;
    goto LABEL_237;
  }
  int v106 = (void *)*MEMORY[0x1E4F4C628];
  object[0] = v5;
  object[1] = v106;
  xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &p_xdict);
  int v107 = (const char *)*MEMORY[0x1E4F4D2C8];
  xpc::dyn_cast_or_default((uint64_t *)v140, (xpc *)&p_xdict, (const object *)*MEMORY[0x1E4F4D2C8], v108);
  uint64_t v109 = v2 + 640;
  int v130 = (char *)(v2 + 640);
  if (*(char *)(v2 + 663) < 0)
  {
    operator delete(*(void **)v109);
    uint64_t v109 = v2 + 640;
  }
  *(_OWORD *)uint64_t v109 = *(_OWORD *)v140;
  *(void *)(v109 + 16) = *(void *)&v140[16];
  v140[23] = 0;
  v140[0] = 0;
  xpc_release(p_xdict);
  if (*(char *)(v2 + 663) < 0) {
    int v130 = *(char **)v130;
  }
  size_t v110 = strlen(v107);
  long long v111 = (config::hw *)strncasecmp(v130, v107, v110);
  if (v111)
  {
    uint64_t v112 = *MEMORY[0x1E4F4D278];
    *(void *)int v140 = v5;
    *(void *)&v140[8] = v112;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)v140, object);
    int v113 = xpc::dyn_cast_or_default((xpc *)object, 0);
    *(_DWORD *)std::map<unsigned int,unsigned int>::operator[]((uint64_t **)(v2 + 616), 1u) = v113;
    xpc_release(object[0]);
    uint64_t v114 = *MEMORY[0x1E4F4D230];
    *(void *)int v140 = v5;
    *(void *)&v140[8] = v114;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)v140, object);
    int v115 = xpc::dyn_cast_or_default((xpc *)object, 0);
    *(_DWORD *)std::map<unsigned int,unsigned int>::operator[]((uint64_t **)(v2 + 616), 2u) = v115;
    xpc_release(object[0]);
    uint64_t v116 = *MEMORY[0x1E4F4D080];
    *(void *)int v140 = v5;
    *(void *)&v140[8] = v116;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)v140, object);
    int v117 = xpc::dyn_cast_or_default((xpc *)object, 0);
    *(_DWORD *)std::map<unsigned int,unsigned int>::operator[]((uint64_t **)(v2 + 616), 3u) = v117;
    xpc_release(object[0]);
    uint64_t v118 = *MEMORY[0x1E4F4D078];
    *(void *)int v140 = v5;
    *(void *)&v140[8] = v118;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)v140, object);
    int v119 = xpc::dyn_cast_or_default((xpc *)object, 0);
    *(_DWORD *)std::map<unsigned int,unsigned int>::operator[]((uint64_t **)(v2 + 616), 4u) = v119;
    xpc_release(object[0]);
  }
  else
  {
    config::hw::deviceMaterial(v111);
    if ((uint8_t *)(v2 + 616) != v140) {
      std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned int,unsigned int>,std::__tree_node<std::__value_type<unsigned int,unsigned int>,void *> *,long>>((uint64_t **)(v2 + 616), *(void **)v140, &v140[8]);
    }
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(*(void **)&v140[8]);
  }
  antenna::Service::Internal::sendDeviceMaterial_sync((antenna::Service::Internal *)v2);
LABEL_246:
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
}

void sub_1C5A9C920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, xpc_object_t a19, uint64_t a20,xpc_object_t a21,xpc_object_t object,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(*(void **)(v34 - 88));
  if (a34 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::antennaGetProperty(xpc::dict const&)::$_0::operator()(uint64_t a1)
{
  uint64_t v170 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 16);
  memset(&__s1, 170, sizeof(__s1));
  std::string::size_type v3 = a1 + 8;
  xpc_object_t v4 = (const char *)*MEMORY[0x1E4F4C878];
  xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 8), (const char *)*MEMORY[0x1E4F4C878]);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
  if (value) {
    xpc_retain(value);
  }
  else {
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)&__s1, (xpc *)&buf, (const object *)"", v6);
  xpc_release(buf.__r_.__value_.__l.__data_);
  size_t v7 = strlen((const char *)*MEMORY[0x1E4F4CBE8]);
  std::string::size_type v8 = v7;
  std::string::size_type v9 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v7 != -1)
    {
      p_s1 = &__s1;
      std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      goto LABEL_9;
    }
LABEL_237:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v7 == -1) {
    goto LABEL_237;
  }
  std::string::size_type size = __s1.__r_.__value_.__l.__size_;
  p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
LABEL_9:
  if (size >= v8) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = size;
  }
  if (!memcmp(p_s1, (const void *)*MEMORY[0x1E4F4CBE8], v12) && size == v8)
  {
    if ((v9 & 0x80u) == 0) {
      std::string::size_type v19 = &__s1;
    }
    else {
      std::string::size_type v19 = (std::string *)__s1.__r_.__value_.__r.__words[0];
    }
    xpc_object_t v20 = xpc_string_create((const char *)v19);
    if (!v20) {
      xpc_object_t v20 = xpc_null_create();
    }
    xpc_dictionary_set_value(**(xpc_object_t **)a1, v4, v20);
    xpc_object_t v21 = xpc_null_create();
    xpc_release(v20);
    xpc_release(v21);
    std::string::size_type v22 = *MEMORY[0x1E4F4C628];
    buf.__r_.__value_.__r.__words[0] = v3;
    buf.__r_.__value_.__l.__size_ = v22;
    uint64_t v165 = *(xpc_object_t **)a1;
    std::string::size_type v166 = v22;
    xpc::dict::object_proxy::operator=((uint64_t)&v165, (uint64_t)&buf, &v167);
    xpc_release(v167);
    xpc_object_t v167 = 0;
    antenna::Service::Internal::copyTxPowerCappingIPhoneMode_sync((antenna::Service::Internal *)v2, &v164);
    xpc_dictionary_set_value(**(xpc_object_t **)a1, (const char *)*MEMORY[0x1E4F4C718], v164);
    xpc_object_t v23 = v164;
    xpc_object_t v164 = xpc_null_create();
    xpc_release(v23);
    xpc_release(v164);
    xpc_object_t v164 = 0;
    goto LABEL_136;
  }
  size_t v14 = (const void *)*MEMORY[0x1E4F4C500];
  size_t v15 = strlen((const char *)*MEMORY[0x1E4F4C500]);
  size_t v16 = v15;
  if ((v9 & 0x80) != 0)
  {
    if (v15 != -1)
    {
      std::string::size_type v17 = __s1.__r_.__value_.__l.__size_;
      if (__s1.__r_.__value_.__l.__size_ >= v15) {
        size_t v24 = v15;
      }
      else {
        size_t v24 = __s1.__r_.__value_.__l.__size_;
      }
      if (memcmp(__s1.__r_.__value_.__l.__data_, v14, v24)) {
        goto LABEL_42;
      }
      goto LABEL_34;
    }
LABEL_238:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v15 == -1) {
    goto LABEL_238;
  }
  std::string::size_type v17 = v9;
  if (v9 >= v15) {
    size_t v18 = v15;
  }
  else {
    size_t v18 = v9;
  }
  if (memcmp(&__s1, v14, v18)) {
    goto LABEL_42;
  }
LABEL_34:
  if (v17 == v16)
  {
    antenna::Service::Internal::getTxPowerCappingIPhoneOverriddenFreeSpaceString_sync((antenna::Service::Internal *)v2, &buf);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string buf = &buf;
    }
    else {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    xpc_object_t v26 = xpc_string_create((const char *)p_buf);
    if (!v26) {
      xpc_object_t v26 = xpc_null_create();
    }
    xpc_dictionary_set_value(**(xpc_object_t **)a1, (const char *)*MEMORY[0x1E4F4C718], v26);
    xpc_object_t v27 = xpc_null_create();
    xpc_release(v26);
    xpc_release(v27);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    goto LABEL_136;
  }
LABEL_42:
  std::string::size_type v28 = (const void *)*MEMORY[0x1E4F4C860];
  size_t v29 = strlen((const char *)*MEMORY[0x1E4F4C860]);
  size_t v30 = v29;
  if ((v9 & 0x80) != 0)
  {
    if (v29 != -1)
    {
      std::string::size_type v31 = __s1.__r_.__value_.__l.__size_;
      if (__s1.__r_.__value_.__l.__size_ >= v29) {
        size_t v33 = v29;
      }
      else {
        size_t v33 = __s1.__r_.__value_.__l.__size_;
      }
      if (memcmp(__s1.__r_.__value_.__l.__data_, v28, v33)) {
        goto LABEL_61;
      }
      goto LABEL_54;
    }
LABEL_239:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v29 == -1) {
    goto LABEL_239;
  }
  std::string::size_type v31 = v9;
  if (v9 >= v29) {
    size_t v32 = v29;
  }
  else {
    size_t v32 = v9;
  }
  if (memcmp(&__s1, v28, v32)) {
    goto LABEL_61;
  }
LABEL_54:
  if (v31 == v30)
  {
    if ((v9 & 0x80u) == 0) {
      uint64_t v34 = &__s1;
    }
    else {
      uint64_t v34 = (std::string *)__s1.__r_.__value_.__r.__words[0];
    }
    xpc_object_t v35 = xpc_string_create((const char *)v34);
    if (!v35) {
      xpc_object_t v35 = xpc_null_create();
    }
    xpc_dictionary_set_value(**(xpc_object_t **)a1, v4, v35);
    xpc_object_t v36 = xpc_null_create();
    xpc_release(v35);
    xpc_release(v36);
    std::string::size_type v37 = *MEMORY[0x1E4F4C628];
    buf.__r_.__value_.__r.__words[0] = v3;
    buf.__r_.__value_.__l.__size_ = v37;
    uint64_t v165 = *(xpc_object_t **)a1;
    std::string::size_type v166 = v37;
    xpc::dict::object_proxy::operator=((uint64_t)&v165, (uint64_t)&buf, &v163);
    xpc_release(v163);
    xpc_object_t v163 = 0;
    antenna::Service::Internal::copyTxPowerAudioMode_sync((antenna::Service::Internal *)v2, &v162);
    xpc_dictionary_set_value(**(xpc_object_t **)a1, (const char *)*MEMORY[0x1E4F4C718], v162);
    xpc_object_t v38 = v162;
    xpc_object_t v162 = xpc_null_create();
    xpc_release(v38);
    xpc_release(v162);
    xpc_object_t v162 = 0;
    goto LABEL_136;
  }
LABEL_61:
  size_t v39 = (const void *)*MEMORY[0x1E4F4C9B0];
  size_t v40 = strlen((const char *)*MEMORY[0x1E4F4C9B0]);
  size_t v41 = v40;
  if ((v9 & 0x80) != 0)
  {
    if (v40 != -1)
    {
      std::string::size_type v42 = __s1.__r_.__value_.__l.__size_;
      if (__s1.__r_.__value_.__l.__size_ >= v40) {
        size_t v44 = v40;
      }
      else {
        size_t v44 = __s1.__r_.__value_.__l.__size_;
      }
      if (memcmp(__s1.__r_.__value_.__l.__data_, v39, v44)) {
        goto LABEL_80;
      }
      goto LABEL_73;
    }
LABEL_240:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v40 == -1) {
    goto LABEL_240;
  }
  std::string::size_type v42 = v9;
  if (v9 >= v40) {
    size_t v43 = v40;
  }
  else {
    size_t v43 = v9;
  }
  if (memcmp(&__s1, v39, v43)) {
    goto LABEL_80;
  }
LABEL_73:
  if (v42 == v41)
  {
    if ((v9 & 0x80u) == 0) {
      size_t v45 = &__s1;
    }
    else {
      size_t v45 = (std::string *)__s1.__r_.__value_.__r.__words[0];
    }
    xpc_object_t v46 = xpc_string_create((const char *)v45);
    if (!v46) {
      xpc_object_t v46 = xpc_null_create();
    }
    xpc_dictionary_set_value(**(xpc_object_t **)a1, v4, v46);
    xpc_object_t v47 = xpc_null_create();
    xpc_release(v46);
    xpc_release(v47);
    std::string::size_type v48 = *MEMORY[0x1E4F4C628];
    buf.__r_.__value_.__r.__words[0] = v3;
    buf.__r_.__value_.__l.__size_ = v48;
    uint64_t v165 = *(xpc_object_t **)a1;
    std::string::size_type v166 = v48;
    xpc::dict::object_proxy::operator=((uint64_t)&v165, (uint64_t)&buf, &v161);
    xpc_release(v161);
    xpc_object_t v161 = 0;
    antenna::Service::Internal::copyTxPowerAudioAlert_sync((antenna::Service::Internal *)v2, &v160);
    xpc_dictionary_set_value(**(xpc_object_t **)a1, (const char *)*MEMORY[0x1E4F4C718], v160);
    xpc_object_t v49 = v160;
    xpc_object_t v160 = xpc_null_create();
    xpc_release(v49);
    xpc_release(v160);
    xpc_object_t v160 = 0;
    goto LABEL_136;
  }
LABEL_80:
  CFDictionaryRef v50 = (const void *)*MEMORY[0x1E4F4D048];
  size_t v51 = strlen((const char *)*MEMORY[0x1E4F4D048]);
  size_t v52 = v51;
  if ((v9 & 0x80) != 0)
  {
    if (v51 != -1)
    {
      std::string::size_type v53 = __s1.__r_.__value_.__l.__size_;
      if (__s1.__r_.__value_.__l.__size_ >= v51) {
        size_t v55 = v51;
      }
      else {
        size_t v55 = __s1.__r_.__value_.__l.__size_;
      }
      if (memcmp(__s1.__r_.__value_.__l.__data_, v50, v55)) {
        goto LABEL_100;
      }
      goto LABEL_92;
    }
LABEL_241:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v51 == -1) {
    goto LABEL_241;
  }
  std::string::size_type v53 = v9;
  if (v9 >= v51) {
    size_t v54 = v51;
  }
  else {
    size_t v54 = v9;
  }
  if (memcmp(&__s1, v50, v54)) {
    goto LABEL_100;
  }
LABEL_92:
  if (v53 == v52)
  {
    if (*(unsigned char *)(v2 + 153))
    {
      if ((v9 & 0x80u) == 0) {
        size_t v56 = &__s1;
      }
      else {
        size_t v56 = (std::string *)__s1.__r_.__value_.__r.__words[0];
      }
      xpc_object_t v57 = xpc_string_create((const char *)v56);
      if (!v57) {
        xpc_object_t v57 = xpc_null_create();
      }
      xpc_dictionary_set_value(**(xpc_object_t **)a1, v4, v57);
      xpc_object_t v58 = xpc_null_create();
      xpc_release(v57);
      xpc_release(v58);
      std::string::size_type v59 = *MEMORY[0x1E4F4C628];
      buf.__r_.__value_.__r.__words[0] = v3;
      buf.__r_.__value_.__l.__size_ = v59;
      uint64_t v165 = *(xpc_object_t **)a1;
      std::string::size_type v166 = v59;
      xpc::dict::object_proxy::operator=((uint64_t)&v165, (uint64_t)&buf, &v159);
      xpc_release(v159);
      xpc_object_t v159 = 0;
      antenna::Service::Internal::copyTxPowerMotionMode_sync((antenna::Service::Internal *)v2, &v158);
      xpc_dictionary_set_value(**(xpc_object_t **)a1, (const char *)*MEMORY[0x1E4F4C718], v158);
      xpc_object_t v60 = v158;
      xpc_object_t v158 = xpc_null_create();
      xpc_release(v60);
      xpc_release(v158);
      xpc_object_t v158 = 0;
    }
    goto LABEL_136;
  }
LABEL_100:
  size_t v61 = strlen((const char *)*MEMORY[0x1E4F4CD50]);
  std::string::size_type v62 = v61;
  if ((v9 & 0x80) == 0)
  {
    if (v61 != -1)
    {
      std::string::size_type v63 = &__s1;
      std::string::size_type v64 = v9;
      goto LABEL_105;
    }
LABEL_242:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v61 == -1) {
    goto LABEL_242;
  }
  std::string::size_type v64 = __s1.__r_.__value_.__l.__size_;
  std::string::size_type v63 = (std::string *)__s1.__r_.__value_.__r.__words[0];
LABEL_105:
  if (v64 >= v62) {
    size_t v65 = v62;
  }
  else {
    size_t v65 = v64;
  }
  if (!memcmp(v63, (const void *)*MEMORY[0x1E4F4CD50], v65) && v64 == v62)
  {
    uint64_t v66 = *(void ***)a1;
    xpc_object_t v67 = *(xpc_object_t *)(v2 + 224);
    if (v67) {
      xpc_retain(*(xpc_object_t *)(v2 + 224));
    }
    else {
      xpc_object_t v67 = xpc_null_create();
    }
    size_t v83 = *v66;
    const object *v66 = v67;
    xpc_release(v83);
    goto LABEL_136;
  }
  size_t v68 = strlen((const char *)*MEMORY[0x1E4F4CC30]);
  std::string::size_type v69 = v68;
  if ((v9 & 0x80) == 0)
  {
    if (v68 != -1)
    {
      uint64_t v70 = &__s1;
      std::string::size_type v71 = v9;
      goto LABEL_117;
    }
LABEL_243:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v68 == -1) {
    goto LABEL_243;
  }
  std::string::size_type v71 = __s1.__r_.__value_.__l.__size_;
  uint64_t v70 = (std::string *)__s1.__r_.__value_.__r.__words[0];
LABEL_117:
  if (v71 >= v69) {
    size_t v72 = v69;
  }
  else {
    size_t v72 = v71;
  }
  if (!memcmp(v70, (const void *)*MEMORY[0x1E4F4CC30], v72) && v71 == v69)
  {
    size_t v73 = (const char *)(v2 + 392);
    if (*(char *)(v2 + 415) < 0) {
      size_t v73 = *(const char **)v73;
    }
    xpc_object_t v74 = xpc_string_create(v73);
    if (!v74) {
      xpc_object_t v74 = xpc_null_create();
    }
    xpc_dictionary_set_value(**(xpc_object_t **)a1, (const char *)*MEMORY[0x1E4F4C308], v74);
    xpc_object_t v75 = xpc_null_create();
    xpc_release(v74);
    xpc_release(v75);
    size_t v76 = (const char *)(v2 + 416);
    if (*(char *)(v2 + 439) < 0) {
      size_t v76 = *(const char **)v76;
    }
    xpc_object_t v77 = xpc_string_create(v76);
    if (!v77) {
      xpc_object_t v77 = xpc_null_create();
    }
    xpc_dictionary_set_value(**(xpc_object_t **)a1, (const char *)*MEMORY[0x1E4F4C4F0], v77);
    xpc_object_t v78 = xpc_null_create();
    xpc_release(v77);
    xpc_release(v78);
    goto LABEL_136;
  }
  size_t v79 = strlen((const char *)*MEMORY[0x1E4F4C760]);
  std::string::size_type v80 = v79;
  if ((v9 & 0x80) == 0)
  {
    if (v79 != -1)
    {
      uint64_t v81 = &__s1;
      std::string::size_type v82 = v9;
      goto LABEL_141;
    }
LABEL_244:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v79 == -1) {
    goto LABEL_244;
  }
  std::string::size_type v82 = __s1.__r_.__value_.__l.__size_;
  uint64_t v81 = (std::string *)__s1.__r_.__value_.__r.__words[0];
LABEL_141:
  if (v82 >= v80) {
    size_t v84 = v80;
  }
  else {
    size_t v84 = v82;
  }
  if (!memcmp(v81, (const void *)*MEMORY[0x1E4F4C760], v84) && v82 == v80)
  {
    uint64_t v85 = (const char **)MEMORY[0x1E4F4C608];
    if (!*(unsigned char *)(v2 + 488)) {
      uint64_t v85 = (const char **)MEMORY[0x1E4F4C6D8];
    }
    xpc_object_t v156 = xpc_string_create(*v85);
    if (!v156) {
      xpc_object_t v156 = xpc_null_create();
    }
    std::string::size_type v86 = *MEMORY[0x1E4F4C628];
    buf.__r_.__value_.__r.__words[0] = *(void *)a1;
    buf.__r_.__value_.__l.__size_ = v86;
    xpc::dict::object_proxy::operator=((uint64_t)&buf, &v156, &v157);
    xpc_release(v157);
    xpc_object_t v157 = 0;
    xpc_release(v156);
    xpc_object_t v156 = 0;
    goto LABEL_136;
  }
  size_t v87 = strlen((const char *)*MEMORY[0x1E4F4D040]);
  std::string::size_type v88 = v87;
  if ((v9 & 0x80) == 0)
  {
    if (v87 != -1)
    {
      xpc_object_t v89 = &__s1;
      goto LABEL_156;
    }
LABEL_245:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v87 == -1) {
    goto LABEL_245;
  }
  std::string::size_type v9 = __s1.__r_.__value_.__l.__size_;
  xpc_object_t v89 = (std::string *)__s1.__r_.__value_.__r.__words[0];
LABEL_156:
  if (v9 >= v88) {
    size_t v90 = v88;
  }
  else {
    size_t v90 = v9;
  }
  if (!memcmp(v89, (const void *)*MEMORY[0x1E4F4D040], v90) && v9 == v88)
  {
    xpc_object_t v91 = (const char *)(v2 + 536);
    if (*(char *)(v2 + 559) < 0) {
      xpc_object_t v91 = *(const char **)v91;
    }
    xpc_object_t object = xpc_string_create(v91);
    if (!object) {
      xpc_object_t object = xpc_null_create();
    }
    std::string::size_type v92 = *MEMORY[0x1E4F4C718];
    buf.__r_.__value_.__r.__words[0] = *(void *)a1;
    buf.__r_.__value_.__l.__size_ = v92;
    xpc::dict::object_proxy::operator=((uint64_t)&buf, &object, &v155);
    xpc_release(v155);
    xpc_object_t v155 = 0;
    xpc_release(object);
    xpc_object_t object = 0;
    goto LABEL_136;
  }
  if (!std::string::compare(&__s1, (const std::string::value_type *)*MEMORY[0x1E4F4CF50]))
  {
    xpc_object_t v152 = xpc_int64_create(*(unsigned int *)(v2 + 568));
    if (!v152) {
      xpc_object_t v152 = xpc_null_create();
    }
    std::string::size_type v95 = *MEMORY[0x1E4F4C718];
    buf.__r_.__value_.__r.__words[0] = *(void *)a1;
    buf.__r_.__value_.__l.__size_ = v95;
    xpc::dict::object_proxy::operator=((uint64_t)&buf, &v152, &v153);
    xpc_release(v153);
    xpc_object_t v153 = 0;
    xpc_release(v152);
    xpc_object_t v152 = 0;
  }
  else if (!std::string::compare(&__s1, (const std::string::value_type *)*MEMORY[0x1E4F4C768]))
  {
    xpc_object_t v96 = (const char *)(v2 + 592);
    if (*(char *)(v2 + 615) < 0) {
      xpc_object_t v96 = *(const char **)v96;
    }
    xpc_object_t v150 = xpc_string_create(v96);
    if (!v150) {
      xpc_object_t v150 = xpc_null_create();
    }
    std::string::size_type v97 = *MEMORY[0x1E4F4C718];
    buf.__r_.__value_.__r.__words[0] = *(void *)a1;
    buf.__r_.__value_.__l.__size_ = v97;
    xpc::dict::object_proxy::operator=((uint64_t)&buf, &v150, &v151);
    xpc_release(v151);
    xpc_object_t v151 = 0;
    xpc_release(v150);
    xpc_object_t v150 = 0;
  }
  else
  {
    if (std::string::compare(&__s1, (const std::string::value_type *)*MEMORY[0x1E4F4CFD8]))
    {
      if (std::string::compare(&__s1, "kGetWorkoutInfo"))
      {
        if (std::string::compare(&__s1, (const std::string::value_type *)*MEMORY[0x1E4F4C0C8])) {
          goto LABEL_136;
        }
        uint64_t v165 = (xpc_object_t *)0xAAAAAAAAAAAAAAAALL;
        size_t v93 = (xpc_object_t *)xpc_dictionary_create(0, 0, 0);
        unsigned int v94 = v93;
        if (v93)
        {
          uint64_t v165 = v93;
        }
        else
        {
          unsigned int v94 = (xpc_object_t *)xpc_null_create();
          uint64_t v165 = v94;
          if (!v94)
          {
            int v117 = (xpc_object_t *)xpc_null_create();
            unsigned int v94 = 0;
            goto LABEL_225;
          }
        }
        if (MEMORY[0x1C8795EB0](v94) == MEMORY[0x1E4F14590])
        {
          xpc_retain(v94);
LABEL_226:
          xpc_release(v94);
          uint64_t v118 = (const char **)MEMORY[0x1E4F4C100];
          if (!*(unsigned char *)(v2 + 476)) {
            uint64_t v118 = (const char **)MEMORY[0x1E4F4D2C8];
          }
          xpc_object_t v132 = xpc_string_create(*v118);
          if (!v132) {
            xpc_object_t v132 = xpc_null_create();
          }
          std::string::size_type v119 = *MEMORY[0x1E4F4CCB0];
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v165;
          buf.__r_.__value_.__l.__size_ = v119;
          xpc::dict::object_proxy::operator=((uint64_t)&buf, &v132, &v133);
          xpc_release(v133);
          xpc_object_t v133 = 0;
          xpc_release(v132);
          xpc_object_t v132 = 0;
          xpc_object_t v130 = xpc_int64_create(*(unsigned int *)(v2 + 464));
          if (!v130) {
            xpc_object_t v130 = xpc_null_create();
          }
          std::string::size_type v120 = *MEMORY[0x1E4F4C460];
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v165;
          buf.__r_.__value_.__l.__size_ = v120;
          xpc::dict::object_proxy::operator=((uint64_t)&buf, &v130, &v131);
          xpc_release(v131);
          xpc_object_t v131 = 0;
          xpc_release(v130);
          xpc_object_t v130 = 0;
          xpc_object_t v128 = xpc_int64_create(*(unsigned int *)(v2 + 468));
          if (!v128) {
            xpc_object_t v128 = xpc_null_create();
          }
          std::string::size_type v121 = *MEMORY[0x1E4F4C620];
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v165;
          buf.__r_.__value_.__l.__size_ = v121;
          xpc::dict::object_proxy::operator=((uint64_t)&buf, &v128, &v129);
          xpc_release(v129);
          xpc_object_t v129 = 0;
          xpc_release(v128);
          xpc_object_t v128 = 0;
          xpc_object_t v126 = xpc_int64_create(*(unsigned int *)(v2 + 472));
          if (!v126) {
            xpc_object_t v126 = xpc_null_create();
          }
          std::string::size_type v122 = *MEMORY[0x1E4F4C290];
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v165;
          buf.__r_.__value_.__l.__size_ = v122;
          xpc::dict::object_proxy::operator=((uint64_t)&buf, &v126, &v127);
          xpc_release(v127);
          xpc_object_t v127 = 0;
          xpc_release(v126);
          xpc_object_t v126 = 0;
          xpc::dict::dict(&v124, (void **)&v165);
          std::string::size_type v123 = *MEMORY[0x1E4F4C718];
          buf.__r_.__value_.__r.__words[0] = *(void *)a1;
          buf.__r_.__value_.__l.__size_ = v123;
          xpc::dict::object_proxy::operator=((uint64_t)&buf, &v124, &v125);
          xpc_release(v125);
          xpc_object_t v125 = 0;
          xpc_release(v124);
          xpc_object_t v124 = 0;
          xpc_release(v165);
          goto LABEL_136;
        }
        int v117 = (xpc_object_t *)xpc_null_create();
LABEL_225:
        uint64_t v165 = v117;
        goto LABEL_226;
      }
      if (*(unsigned char *)(v2 + 688))
      {
        long long v111 = (const char *)(v2 + 696);
        uint64_t v112 = (const char *)(v2 + 696);
        if (*(char *)(v2 + 719) < 0) {
          uint64_t v112 = *(const char **)v111;
        }
        xpc_object_t v138 = xpc_string_create(v112);
        if (!v138) {
          xpc_object_t v138 = xpc_null_create();
        }
        std::string::size_type v113 = *MEMORY[0x1E4F4C718];
        buf.__r_.__value_.__r.__words[0] = *(void *)a1;
        buf.__r_.__value_.__l.__size_ = v113;
        xpc::dict::object_proxy::operator=((uint64_t)&buf, &v138, &v139);
        xpc_release(v139);
        xpc_object_t v139 = 0;
        xpc_release(v138);
        xpc_object_t v138 = 0;
        if (*(char *)(v2 + 719) < 0) {
          long long v111 = *(const char **)v111;
        }
        if (!strncasecmp(v111, "OVERRIDE", 8uLL))
        {
          xpc_object_t v136 = xpc_int64_create(*(unsigned int *)(v2 + 720));
          if (!v136) {
            xpc_object_t v136 = xpc_null_create();
          }
          buf.__r_.__value_.__r.__words[0] = *(void *)a1;
          buf.__r_.__value_.__l.__size_ = (std::string::size_type)"kKeyWorkoutType";
          xpc::dict::object_proxy::operator=((uint64_t)&buf, &v136, &v137);
          xpc_release(v137);
          xpc_object_t v137 = 0;
          xpc_release(v136);
          xpc_object_t v136 = 0;
          xpc_object_t v134 = xpc_int64_create(*(unsigned int *)(v2 + 724));
          if (!v134) {
            xpc_object_t v134 = xpc_null_create();
          }
          buf.__r_.__value_.__r.__words[0] = *(void *)a1;
          buf.__r_.__value_.__l.__size_ = (std::string::size_type)"kKeyWorkoutState";
          xpc::dict::object_proxy::operator=((uint64_t)&buf, &v134, &v135);
          xpc_release(v135);
          xpc_object_t v135 = 0;
          xpc_release(v134);
          xpc_object_t v134 = 0;
        }
        goto LABEL_136;
      }
      uint64_t v114 = *(NSObject **)(v2 + 40);
      if (!os_log_type_enabled(v114, OS_LOG_TYPE_ERROR)) {
        goto LABEL_136;
      }
      uint64_t v116 = &__s1;
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v116 = (std::string *)__s1.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v116;
LABEL_219:
      _os_log_error_impl(&dword_1C59C6000, v114, OS_LOG_TYPE_ERROR, "%s is not supported in this device", (uint8_t *)&buf, 0xCu);
      goto LABEL_136;
    }
    if (!*(unsigned char *)(v2 + 170))
    {
      uint64_t v114 = *(NSObject **)(v2 + 40);
      if (!os_log_type_enabled(v114, OS_LOG_TYPE_ERROR)) {
        goto LABEL_136;
      }
      int v115 = &__s1;
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v115 = (std::string *)__s1.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v115;
      goto LABEL_219;
    }
    int v98 = (const char *)(v2 + 640);
    xpc_object_t v99 = (const char *)(v2 + 640);
    if (*(char *)(v2 + 663) < 0) {
      xpc_object_t v99 = *(const char **)v98;
    }
    xpc_object_t v148 = xpc_string_create(v99);
    if (!v148) {
      xpc_object_t v148 = xpc_null_create();
    }
    std::string::size_type v100 = *MEMORY[0x1E4F4C718];
    buf.__r_.__value_.__r.__words[0] = *(void *)a1;
    buf.__r_.__value_.__l.__size_ = v100;
    xpc::dict::object_proxy::operator=((uint64_t)&buf, &v148, &v149);
    xpc_release(v149);
    xpc_object_t v149 = 0;
    xpc_release(v148);
    xpc_object_t v148 = 0;
    if (*(char *)(v2 + 663) < 0) {
      int v98 = *(const char **)v98;
    }
    size_t v101 = strlen((const char *)*MEMORY[0x1E4F4CB08]);
    if (!strncasecmp(v98, (const char *)*MEMORY[0x1E4F4CB08], v101))
    {
      size_t v102 = (uint64_t **)(v2 + 616);
      size_t v103 = std::map<unsigned int,unsigned int>::operator[](v102, 1u);
      xpc_object_t v146 = xpc_int64_create(*(unsigned int *)v103);
      if (!v146) {
        xpc_object_t v146 = xpc_null_create();
      }
      std::string::size_type v104 = *MEMORY[0x1E4F4D278];
      buf.__r_.__value_.__r.__words[0] = *(void *)a1;
      buf.__r_.__value_.__l.__size_ = v104;
      xpc::dict::object_proxy::operator=((uint64_t)&buf, &v146, &v147);
      xpc_release(v147);
      xpc_object_t v147 = 0;
      xpc_release(v146);
      xpc_object_t v146 = 0;
      int v105 = std::map<unsigned int,unsigned int>::operator[](v102, 2u);
      xpc_object_t v144 = xpc_int64_create(*(unsigned int *)v105);
      if (!v144) {
        xpc_object_t v144 = xpc_null_create();
      }
      std::string::size_type v106 = *MEMORY[0x1E4F4D230];
      buf.__r_.__value_.__r.__words[0] = *(void *)a1;
      buf.__r_.__value_.__l.__size_ = v106;
      xpc::dict::object_proxy::operator=((uint64_t)&buf, &v144, &v145);
      xpc_release(v145);
      xpc_object_t v145 = 0;
      xpc_release(v144);
      xpc_object_t v144 = 0;
      int v107 = std::map<unsigned int,unsigned int>::operator[](v102, 3u);
      xpc_object_t v142 = xpc_int64_create(*(unsigned int *)v107);
      if (!v142) {
        xpc_object_t v142 = xpc_null_create();
      }
      std::string::size_type v108 = *MEMORY[0x1E4F4D080];
      buf.__r_.__value_.__r.__words[0] = *(void *)a1;
      buf.__r_.__value_.__l.__size_ = v108;
      xpc::dict::object_proxy::operator=((uint64_t)&buf, &v142, &v143);
      xpc_release(v143);
      xpc_object_t v143 = 0;
      xpc_release(v142);
      xpc_object_t v142 = 0;
      uint64_t v109 = std::map<unsigned int,unsigned int>::operator[](v102, 4u);
      xpc_object_t v140 = xpc_int64_create(*(unsigned int *)v109);
      if (!v140) {
        xpc_object_t v140 = xpc_null_create();
      }
      std::string::size_type v110 = *MEMORY[0x1E4F4D078];
      buf.__r_.__value_.__r.__words[0] = *(void *)a1;
      buf.__r_.__value_.__l.__size_ = v110;
      xpc::dict::object_proxy::operator=((uint64_t)&buf, &v140, &v141);
      xpc_release(v141);
      xpc_object_t v141 = 0;
      xpc_release(v140);
      xpc_object_t v140 = 0;
    }
  }
LABEL_136:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
}

void sub_1C5A9DEEC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZNK3ctu20SharedSynchronizableIN7antenna7Service8InternalEE20execute_wrapped_syncIZNS3_18antennaGetPropertyERKN3xpc4dictEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSB__block_invoke(uint64_t a1)
{
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::sendAudioSpeaker(void)::$_0>(antenna::Service::Internal::sendAudioSpeaker(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::sendAudioSpeaker(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::sendAudioSpeaker(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(antenna::Service::Internal ***)a1;
  antenna::Service::Internal::sendAudioSpeaker_sync(**(antenna::Service::Internal ***)a1);
  operator delete(v2);
  std::string::size_type v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    xpc_object_t v4 = (void *)a1;
  }
  else
  {
    xpc_object_t v4 = (void *)a1;
  }
  operator delete(v4);
}

void sub_1C5A9E258(_Unwind_Exception *a1)
{
  operator delete(v2);
  xpc_object_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::dumpState(void)::$_0>(antenna::Service::Internal::dumpState(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::dumpState(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::dumpState(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(antenna::Service::Internal ***)a1;
  antenna::Service::Internal::handleDumpState_sync(**(antenna::Service::Internal ***)a1);
  operator delete(v2);
  std::string::size_type v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    xpc_object_t v4 = (void *)a1;
  }
  else
  {
    xpc_object_t v4 = (void *)a1;
  }
  operator delete(v4);
}

void sub_1C5A9E378(_Unwind_Exception *a1)
{
  operator delete(v2);
  xpc_object_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_37()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

uint64_t __cxx_global_var_init_38()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

uint64_t __cxx_global_var_init_39()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

uint64_t __cxx_global_var_init_40()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<Capabilities>::~PthreadMutexGuardPolicy, &ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

void FSModuleICE::create(uint64_t *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = operator new(0x488uLL);
  uint64_t v5 = (uint64_t)v4;
  uint64_t v6 = *a1;
  size_t v7 = (std::__shared_weak_count *)a1[1];
  v8[0] = v6;
  v8[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  FSModuleICE::FSModuleICE((uint64_t)v4, v8);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<FSModuleICE>::shared_ptr[abi:ne180100]<FSModuleICE,std::shared_ptr<FSModuleICE> ctu::SharedSynchronizable<FSModuleICE>::make_shared_ptr<FSModuleICE>(FSModuleICE*)::{lambda(FSModuleICE*)#1},void>(a2, v5);
  ctu::Loggable<FSModuleICE,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2 + 48);
  if (v7)
  {
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_1C5A9E9A8(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v2);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(a1);
}

void FSModuleICE::~FSModuleICE(FSModuleICE *this)
{
  *(void *)this = &unk_1F2108908;
  *((void *)this + 6) = &unk_1F2108978;
  uint64_t v2 = *((void *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string::size_type v19 = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v19, 2u);
  }
  std::string::size_type v3 = (std::__shared_weak_count *)*((void *)this + 141);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)*((void *)this + 139);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!*((void *)this + 136)) {
      goto LABEL_17;
    }
  }
  else if (!*((void *)this + 136))
  {
    goto LABEL_17;
  }
  uint64_t v5 = (FSModuleICE *)*((void *)this + 135);
  uint64_t v6 = *((void *)this + 134);
  uint64_t v7 = *(void *)v5;
  *(void *)(v7 + 8) = *(void *)(v6 + 8);
  **(void **)(v6 + 8) = v7;
  *((void *)this + 136) = 0;
  if (v5 != (FSModuleICE *)((char *)this + 1072))
  {
    do
    {
      std::string::size_type v8 = (FSModuleICE *)*((void *)v5 + 1);
      std::string::size_type v9 = *((void *)v5 + 3);
      if (v9) {
        dispatch_release(v9);
      }
      std::string::size_type v10 = (const void *)*((void *)v5 + 2);
      if (v10) {
        _Block_release(v10);
      }
      operator delete(v5);
      uint64_t v5 = v8;
    }
    while (v8 != (FSModuleICE *)((char *)this + 1072));
  }
LABEL_17:
  if (*((char *)this + 1071) < 0) {
    operator delete(*((void **)this + 131));
  }
  std::string::size_type v11 = (std::__shared_weak_count *)*((void *)this + 130);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  std::deque<std::tuple<unsigned int,BOOL>>::~deque[abi:ne180100]((uint64_t)this + 976);
  *((void *)this + 6) = &unk_1F2108F18;
  MEMORY[0x1C87940C0]((char *)this + 56);
  size_t v12 = *((void *)this + 18);
  if (v12) {
    dispatch_release(v12);
  }
  xpc_object_t v13 = *((void *)this + 17);
  if (v13) {
    dispatch_release(v13);
  }
  size_t v14 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  *(void *)this = &unk_1F2112348;
  uint64_t v15 = *((void *)this + 3);
  if (v15)
  {
    uint64_t v16 = *((void *)this + 4);
    std::string::size_type v17 = (void *)*((void *)this + 3);
    if (v16 != v15)
    {
      do
      {
        if (*(char *)(v16 - 1) < 0) {
          operator delete(*(void **)(v16 - 24));
        }
        v16 -= 24;
      }
      while (v16 != v15);
      std::string::size_type v17 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v15;
    operator delete(v17);
  }
  size_t v18 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
}

{
  void *v1;
  uint64_t vars8;

  FSModuleICE::~FSModuleICE(this);

  operator delete(v1);
}

uint64_t *std::list<dispatch::callback<void({block_pointer})(BOOL)>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    std::string::size_type v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v6 = (uint64_t *)v3[1];
        uint64_t v7 = v3[3];
        if (v7) {
          dispatch_release(v7);
        }
        std::string::size_type v8 = (const void *)v3[2];
        if (v8) {
          _Block_release(v8);
        }
        operator delete(v3);
        std::string::size_type v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void *ctu::SharedLoggable<FSModuleICE,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F2108F18;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  std::string::size_type v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1F2108F18;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  std::string::size_type v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void non-virtual thunk to'FSModuleICE::~FSModuleICE(FSModuleICE *this)
{
}

{
  void *v1;
  uint64_t vars8;

  FSModuleICE::~FSModuleICE((FSModuleICE *)((char *)this - 48));

  operator delete(v1);
}

const char *FSModuleICE::getName(FSModuleICE *this)
{
  return "rfs.mod";
}

uint64_t FSModuleICE::FSModuleICE(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1F2112348;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(void *)a1 = &unk_1F2103EC0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &unk_1F2103EC0;
  }
  *(void *)a1 = &unk_1F2108908;
  *(void *)(a1 + 48) = &unk_1F2108978;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v27, "com.apple.telephony.abm", "rfs.mod");
  GetABMLogServer(&v25);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v6 = dispatch_queue_create_with_target_V2("rfs.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v6, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v6);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = v6;
  if (v6)
  {
    dispatch_retain(v6);
    *(void *)(a1 + 144) = 0;
    dispatch_release(v6);
  }
  else
  {
    *(void *)(a1 + 144) = 0;
  }
  *(void *)(a1 + 48) = &unk_1F2108F18;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v30);
  *(void *)(a1 + 56) = &unk_1F2102CB8;
  uint64_t v7 = v26;
  *(void *)(a1 + 104) = v25;
  *(void *)(a1 + 112) = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v29);
  *(void *)(a1 + 48) = &unk_1F2108FA8;
  std::string::size_type v8 = v26;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v27);
  *(void *)a1 = &unk_1F2108908;
  *(void *)(a1 + 48) = &unk_1F2108978;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 560) = 0;
  *(_DWORD *)(a1 + 960) = 256;
  *(unsigned char *)(a1 + 964) = 0;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(void *)(a1 + 1016) = 0;
  std::string::size_type v9 = (char *)operator new(0x30uLL);
  *(void *)(a1 + 1048) = v9;
  *(_OWORD *)(a1 + 1056) = xmmword_1C5BC7C20;
  strcpy(v9, "com.apple.AppleBasebandManager.FSModuleSync");
  *(void *)(a1 + 1072) = a1 + 1072;
  *(void *)(a1 + 1080) = a1 + 1072;
  *(void *)(a1 + 1088) = 0;
  *(unsigned char *)(a1 + 1153) = 0;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(void *)(a1 + 648) = 0;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_DWORD *)(a1 + 1136) = 0;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  std::string::size_type v10 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v11 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v30, v10);
    long long v12 = v30;
    long long v30 = 0uLL;
    xpc_object_t v13 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v12;
    if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    size_t v14 = (std::__shared_weak_count *)*((void *)&v30 + 1);
    if (*((void *)&v30 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    uint64_t v11 = off_1EBBDCA08;
  }
  uint64_t v27 = v11;
  std::string::size_type v28 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v11 + 32))(&v29, v11);
  long long v15 = v29;
  long long v29 = 0uLL;
  uint64_t v16 = *(std::__shared_weak_count **)(a1 + 1112);
  *(_OWORD *)(a1 + 1104) = v15;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  std::string::size_type v17 = (std::__shared_weak_count *)*((void *)&v29 + 1);
  if (*((void *)&v29 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v29 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  size_t v18 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    std::string::size_type v19 = *(void ***)(a1 + 984);
    uint64_t v24 = *(void *)(a1 + 992);
    *(void *)(a1 + 1016) = 0;
    unint64_t v21 = v24 - (void)v19;
    if (v21 < 0x11) {
      goto LABEL_34;
    }
  }
  else
  {
    std::string::size_type v19 = *(void ***)(a1 + 984);
    uint64_t v20 = *(void *)(a1 + 992);
    *(void *)(a1 + 1016) = 0;
    unint64_t v21 = v20 - (void)v19;
    if (v21 < 0x11) {
      goto LABEL_34;
    }
  }
  do
  {
    operator delete(*v19);
    std::string::size_type v19 = (void **)(*(void *)(a1 + 984) + 8);
    *(void *)(a1 + 984) = v19;
    unint64_t v21 = *(void *)(a1 + 992) - (void)v19;
  }
  while (v21 > 0x10);
LABEL_34:
  if (v21 >> 3 == 1)
  {
    uint64_t v22 = 256;
    goto LABEL_38;
  }
  if (v21 >> 3 == 2)
  {
    uint64_t v22 = 512;
LABEL_38:
    *(void *)(a1 + 1008) = v22;
  }
  return a1;
}

void sub_1C5A9F3E8(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1 + 1120);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1 + 1104);
  std::list<dispatch::callback<void({block_pointer})(BOOL)>>::~list(v4);
  if (*(char *)(v1 + 1071) < 0) {
    operator delete(*(void **)(v1 + 1048));
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v3);
  std::deque<std::tuple<unsigned int,BOOL>>::~deque[abi:ne180100](v1 + 976);
  ctu::SharedLoggable<FSModuleICE,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v2);
  Service::~Service((Service *)v1);
  _Unwind_Resume(a1);
}

void sub_1C5A9F478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  std::string::size_type v17 = v16;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a15);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a13);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v17);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  Service::~Service(v15);
  _Unwind_Resume(a1);
}

void sub_1C5A9F4C0(_Unwind_Exception *a1)
{
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void FSModuleICE::checkAndExecPendingResponses_sync(FSModuleICE *this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 11);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*((_DWORD *)this + 257) < *((_DWORD *)this + 256)) {
      return;
    }
LABEL_5:
    FSModuleICE::execPendingResponses_sync(this, 1);
    return;
  }
  int v3 = *((_DWORD *)this + 257);
  int v4 = *((_DWORD *)this + 256);
  v5[0] = 67109376;
  v5[1] = v3;
  __int16 v6 = 1024;
  int v7 = v4;
  _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Checking response fSyncsCompleted=%u fSyncsRequested=%u", (uint8_t *)v5, 0xEu);
  if (*((_DWORD *)this + 257) >= *((_DWORD *)this + 256)) {
    goto LABEL_5;
  }
}

void FSModuleICE::execPendingResponses_sync(FSModuleICE *this, char a2)
{
  int v4 = *((void *)this + 11);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v19) = 0;
    _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Clearing responses", (uint8_t *)&v19, 2u);
  }
  uint64_t v5 = (char *)this + 1072;
  __int16 v6 = (char *)*((void *)this + 135);
  if (v6 != (char *)this + 1072)
  {
    while (1)
    {
      int v7 = (const void *)*((void *)v6 + 2);
      if (v7) {
        break;
      }
      uint64_t v8 = 0;
      std::string::size_type v9 = *((void *)v6 + 3);
      if (v9) {
        goto LABEL_8;
      }
LABEL_9:
      if (!v8)
      {
        uint64_t v11 = 0;
        uint64_t v19 = MEMORY[0x1E4F143A8];
        uint64_t v20 = 1174405120;
        unint64_t v21 = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_0;
        uint64_t v22 = &__block_descriptor_tmp_123;
LABEL_15:
        long long v12 = 0;
        goto LABEL_16;
      }
      std::string::size_type v10 = _Block_copy(v8);
      uint64_t v11 = v10;
      uint64_t v19 = MEMORY[0x1E4F143A8];
      uint64_t v20 = 1174405120;
      unint64_t v21 = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_0;
      uint64_t v22 = &__block_descriptor_tmp_123;
      if (!v10) {
        goto LABEL_15;
      }
      long long v12 = _Block_copy(v10);
LABEL_16:
      long long aBlock = v12;
      char v24 = a2;
      dispatch_async(v9, &v19);
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (v11) {
        _Block_release(v11);
      }
      if (v9) {
        dispatch_release(v9);
      }
      if (v8) {
        _Block_release(v8);
      }
      __int16 v6 = (char *)*((void *)v6 + 1);
      if (v6 == v5) {
        goto LABEL_24;
      }
    }
    uint64_t v8 = _Block_copy(v7);
    std::string::size_type v9 = *((void *)v6 + 3);
    if (!v9) {
      goto LABEL_9;
    }
LABEL_8:
    dispatch_retain(v9);
    goto LABEL_9;
  }
LABEL_24:
  if (*((void *)this + 136))
  {
    xpc_object_t v13 = (char *)*((void *)this + 135);
    uint64_t v14 = *((void *)this + 134);
    uint64_t v15 = *(void *)v13;
    *(void *)(v15 + 8) = *(void *)(v14 + 8);
    **(void **)(v14 + 8) = v15;
    *((void *)this + 136) = 0;
    if (v13 != v5)
    {
      do
      {
        uint64_t v16 = (char *)*((void *)v13 + 1);
        std::string::size_type v17 = *((void *)v13 + 3);
        if (v17) {
          dispatch_release(v17);
        }
        size_t v18 = (const void *)*((void *)v13 + 2);
        if (v18) {
          _Block_release(v18);
        }
        operator delete(v13);
        xpc_object_t v13 = v16;
      }
      while (v16 != v5);
    }
  }
}

unsigned char *FSModuleICE::getShutdownStages@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  int v3 = operator new(1uLL);
  *a1 = v3;
  unsigned char *v3 = 3;
  uint64_t result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void FSModuleICE::shutdown(uint64_t a1, char a2, NSObject **a3)
{
  int v4 = (uint64_t *)(a1 + 120);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 1174405120;
  void v6[2] = ___ZN11FSModuleICE8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v6[3] = &__block_descriptor_tmp_30;
  uint64_t v5 = *a3;
  dispatch_group_t group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(group);
  }
  char v8 = a2;
  ctu::SharedSynchronizable<FSModuleICE>::execute_wrapped(v4, (uint64_t)v6);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void FSModuleICE::initialize(uint64_t *a1, NSObject **a2)
{
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  void v11[2] = ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke;
  uint64_t v11[3] = &__block_descriptor_tmp_72_0;
  int v3 = *a2;
  v11[4] = a1;
  dispatch_group_t group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(group);
  }
  ctu::SharedSynchronizable<FSModuleICE>::execute_wrapped(a1 + 15, (uint64_t)v11);
  int v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v7 = v6;
  char v8 = operator new(8uLL);
  *char v8 = a1;
  std::string::size_type v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  std::string::size_type v10 = operator new(0x18uLL);
  *std::string::size_type v10 = v8;
  v10[1] = v5;
  _DWORD v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<FSModuleICE>::execute_wrapped<FSModuleICE::initialize(dispatch::group_session)::$_0>(FSModuleICE::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<FSModuleICE::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<FSModuleICE::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v2 || (uint64_t v3 = *(void *)(v1 + 120), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  __int16 v6 = (const void *)*MEMORY[0x1E4F4C728];
  size_t v7 = strlen((const char *)*MEMORY[0x1E4F4C728]);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (void **)operator new(v10 + 1);
    unint64_t v93 = v8;
    unint64_t v94 = v11 | 0x8000000000000000;
    long long __dst = p_dst;
    goto LABEL_12;
  }
  HIBYTE(v94) = v7;
  p_dst = (void **)&__dst;
  if (v7) {
LABEL_12:
  }
    memmove(p_dst, v6, v8);
  *((unsigned char *)p_dst + v8) = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_12_1;
  void aBlock[4] = v1;
  void aBlock[5] = v3;
  size_t v90 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  long long v12 = _Block_copy(aBlock);
  xpc_object_t v91 = v12;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v91);
  if (v12) {
    _Block_release(v12);
  }
  if (SHIBYTE(v94) < 0) {
    operator delete(__dst);
  }
  xpc_object_t v13 = (const void *)*MEMORY[0x1E4F4CDB8];
  size_t v14 = strlen((const char *)*MEMORY[0x1E4F4CDB8]);
  if (v14 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v15 = v14;
  if (v14 >= 0x17)
  {
    uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v17 = v14 | 7;
    }
    uint64_t v18 = v17 + 1;
    uint64_t v16 = (void **)operator new(v17 + 1);
    unint64_t v93 = v15;
    unint64_t v94 = v18 | 0x8000000000000000;
    long long __dst = v16;
    goto LABEL_24;
  }
  HIBYTE(v94) = v14;
  uint64_t v16 = (void **)&__dst;
  if (v14) {
LABEL_24:
  }
    memmove(v16, v13, v15);
  *((unsigned char *)v16 + v15) = 0;
  v86[0] = MEMORY[0x1E4F143A8];
  v86[1] = 1174405120;
  v86[2] = ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_13;
  v86[3] = &__block_descriptor_tmp_18_0;
  v86[4] = v1;
  v86[5] = v3;
  size_t v87 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v19 = _Block_copy(v86);
  std::string::size_type v88 = v19;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v88);
  if (v19) {
    _Block_release(v19);
  }
  if (SHIBYTE(v94) < 0) {
    operator delete(__dst);
  }
  uint64_t v20 = (const void *)*MEMORY[0x1E4F4C720];
  size_t v21 = strlen((const char *)*MEMORY[0x1E4F4C720]);
  if (v21 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v22 = v21;
  if (v21 >= 0x17)
  {
    uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v24 = v21 | 7;
    }
    uint64_t v25 = v24 + 1;
    xpc_object_t v23 = (void **)operator new(v24 + 1);
    unint64_t v93 = v22;
    unint64_t v94 = v25 | 0x8000000000000000;
    long long __dst = v23;
    goto LABEL_36;
  }
  HIBYTE(v94) = v21;
  xpc_object_t v23 = (void **)&__dst;
  if (v21) {
LABEL_36:
  }
    memmove(v23, v20, v22);
  *((unsigned char *)v23 + v22) = 0;
  v83[0] = MEMORY[0x1E4F143A8];
  v83[1] = 1174405120;
  v83[2] = ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_19;
  v83[3] = &__block_descriptor_tmp_31_2;
  v83[4] = v1;
  v83[5] = v3;
  size_t v84 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v26 = _Block_copy(v83);
  uint64_t v85 = v26;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v85);
  if (v26) {
    _Block_release(v26);
  }
  if (SHIBYTE(v94) < 0) {
    operator delete(__dst);
  }
  uint64_t v27 = (const void *)*MEMORY[0x1E4F4CD10];
  size_t v28 = strlen((const char *)*MEMORY[0x1E4F4CD10]);
  if (v28 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v29 = v28;
  if (v28 >= 0x17)
  {
    uint64_t v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17) {
      uint64_t v31 = v28 | 7;
    }
    uint64_t v32 = v31 + 1;
    long long v30 = (void **)operator new(v31 + 1);
    unint64_t v93 = v29;
    unint64_t v94 = v32 | 0x8000000000000000;
    long long __dst = v30;
    goto LABEL_48;
  }
  HIBYTE(v94) = v28;
  long long v30 = (void **)&__dst;
  if (v28) {
LABEL_48:
  }
    memmove(v30, v27, v29);
  *((unsigned char *)v30 + v29) = 0;
  v80[0] = MEMORY[0x1E4F143A8];
  v80[1] = 1174405120;
  v80[2] = ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_32;
  v80[3] = &__block_descriptor_tmp_39_3;
  v80[4] = v1;
  v80[5] = v3;
  uint64_t v81 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v33 = _Block_copy(v80);
  std::string::size_type v82 = v33;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v82);
  if (v33) {
    _Block_release(v33);
  }
  if (SHIBYTE(v94) < 0) {
    operator delete(__dst);
  }
  uint64_t v34 = (const void *)*MEMORY[0x1E4F4CED0];
  size_t v35 = strlen((const char *)*MEMORY[0x1E4F4CED0]);
  if (v35 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v36 = v35;
  if (v35 >= 0x17)
  {
    uint64_t v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17) {
      uint64_t v38 = v35 | 7;
    }
    uint64_t v39 = v38 + 1;
    std::string::size_type v37 = (void **)operator new(v38 + 1);
    unint64_t v93 = v36;
    unint64_t v94 = v39 | 0x8000000000000000;
    long long __dst = v37;
    goto LABEL_60;
  }
  HIBYTE(v94) = v35;
  std::string::size_type v37 = (void **)&__dst;
  if (v35) {
LABEL_60:
  }
    memmove(v37, v34, v36);
  *((unsigned char *)v37 + v36) = 0;
  v77[0] = MEMORY[0x1E4F143A8];
  v77[1] = 1174405120;
  v77[2] = ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_40;
  v77[3] = &__block_descriptor_tmp_51_1;
  v77[4] = v1;
  v77[5] = v3;
  xpc_object_t v78 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v40 = _Block_copy(v77);
  size_t v79 = v40;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v79);
  if (v40) {
    _Block_release(v40);
  }
  if (SHIBYTE(v94) < 0) {
    operator delete(__dst);
  }
  long long __dst = (void **)0xAAAAAAAAAAAAAAAALL;
  unint64_t v93 = 0xAAAAAAAAAAAAAAAALL;
  v75[0] = MEMORY[0x1E4F143A8];
  v75[1] = 1174405120;
  v75[2] = ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_52;
  v75[3] = &__block_descriptor_tmp_56_3;
  v75[4] = v1;
  v75[5] = v3;
  size_t v76 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v41 = (void **)_Block_copy(v75);
  std::string::size_type v42 = *(NSObject **)(v1 + 136);
  if (v42) {
    dispatch_retain(*(dispatch_object_t *)(v1 + 136));
  }
  long long __dst = v41;
  unint64_t v93 = (unint64_t)v42;
  unint64_t v73 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v74 = 0xAAAAAAAAAAAAAAAALL;
  v71[0] = MEMORY[0x1E4F143A8];
  v71[1] = 1174405120;
  v71[2] = ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_57;
  v71[3] = &__block_descriptor_tmp_62_1;
  v71[4] = v1;
  v71[5] = v3;
  size_t v72 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v43 = _Block_copy(v71);
  size_t v44 = *(NSObject **)(v1 + 136);
  if (v44) {
    dispatch_retain(*(dispatch_object_t *)(v1 + 136));
  }
  unint64_t v73 = (unint64_t)v43;
  unint64_t v74 = (unint64_t)v44;
  unint64_t v69 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v70 = 0xAAAAAAAAAAAAAAAALL;
  v67[0] = MEMORY[0x1E4F143A8];
  v67[1] = 1174405120;
  v67[2] = ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_63;
  v67[3] = &__block_descriptor_tmp_67;
  v67[4] = v1;
  v67[5] = v3;
  size_t v68 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v45 = _Block_copy(v67);
  xpc_object_t v46 = *(NSObject **)(v1 + 136);
  if (v46) {
    dispatch_retain(*(dispatch_object_t *)(v1 + 136));
  }
  size_t v54 = v41;
  unint64_t v69 = (unint64_t)v45;
  unint64_t v70 = (unint64_t)v46;
  unint64_t v65 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v66 = 0xAAAAAAAAAAAAAAAALL;
  v63[0] = MEMORY[0x1E4F143A8];
  v63[1] = 1174405120;
  v63[2] = ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_68;
  v63[3] = &__block_descriptor_tmp_71_1;
  v63[4] = v1;
  v63[5] = v3;
  std::string::size_type v64 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v47 = _Block_copy(v63);
  std::string::size_type v48 = *(NSObject **)(v1 + 136);
  if (v48) {
    dispatch_retain(*(dispatch_object_t *)(v1 + 136));
  }
  unint64_t v65 = (unint64_t)v47;
  unint64_t v66 = (unint64_t)v48;
  uint64_t v49 = *(void *)(v1 + 1104);
  CFDictionaryRef v50 = v54;
  if (v54) {
    CFDictionaryRef v50 = _Block_copy(v54);
  }
  size_t v61 = v50;
  dispatch_object_t object = v42;
  if (v42) {
    dispatch_retain(v42);
  }
  (*(void (**)(uint64_t, void **))(*(void *)v49 + 64))(v49, &v61);
  if (object) {
    dispatch_release(object);
  }
  if (v61) {
    _Block_release(v61);
  }
  uint64_t v51 = *(void *)(v1 + 1104);
  if (v43)
  {
    std::string::size_type v59 = _Block_copy(v43);
    dispatch_object_t v60 = v44;
    if (!v44) {
      goto LABEL_84;
    }
    goto LABEL_83;
  }
  std::string::size_type v59 = 0;
  dispatch_object_t v60 = v44;
  if (v44) {
LABEL_83:
  }
    dispatch_retain(v44);
LABEL_84:
  (*(void (**)(uint64_t, void **))(*(void *)v51 + 88))(v51, &v59);
  if (v60) {
    dispatch_release(v60);
  }
  if (v59) {
    _Block_release(v59);
  }
  uint64_t v52 = *(void *)(v1 + 1104);
  if (v45)
  {
    xpc_object_t v57 = _Block_copy(v45);
    dispatch_object_t v58 = v46;
    if (!v46) {
      goto LABEL_91;
    }
    goto LABEL_90;
  }
  xpc_object_t v57 = 0;
  dispatch_object_t v58 = v46;
  if (v46) {
LABEL_90:
  }
    dispatch_retain(v46);
LABEL_91:
  (*(void (**)(uint64_t, void **))(*(void *)v52 + 72))(v52, &v57);
  if (v58) {
    dispatch_release(v58);
  }
  if (v57) {
    _Block_release(v57);
  }
  uint64_t v53 = *(void *)(v1 + 1104);
  if (v47)
  {
    size_t v55 = _Block_copy(v47);
    dispatch_object_t v56 = v48;
    if (!v48) {
      goto LABEL_98;
    }
    goto LABEL_97;
  }
  size_t v55 = 0;
  dispatch_object_t v56 = v48;
  if (v48) {
LABEL_97:
  }
    dispatch_retain(v48);
LABEL_98:
  (*(void (**)(uint64_t, void **))(*(void *)v53 + 80))(v53, &v55);
  if (v56) {
    dispatch_release(v56);
  }
  if (v55) {
    _Block_release(v55);
  }
  if (v48) {
    dispatch_release(v48);
  }
  if (v47) {
    _Block_release(v47);
  }
  if (v64) {
    std::__shared_weak_count::__release_weak(v64);
  }
  if (v46) {
    dispatch_release(v46);
  }
  if (v45) {
    _Block_release(v45);
  }
  if (v68) {
    std::__shared_weak_count::__release_weak(v68);
  }
  if (v44) {
    dispatch_release(v44);
  }
  if (v43) {
    _Block_release(v43);
  }
  if (v72) {
    std::__shared_weak_count::__release_weak(v72);
  }
  if (v42) {
    dispatch_release(v42);
  }
  if (v54) {
    _Block_release(v54);
  }
  if (v76) {
    std::__shared_weak_count::__release_weak(v76);
  }
  if (v78) {
    std::__shared_weak_count::__release_weak(v78);
  }
  if (v81) {
    std::__shared_weak_count::__release_weak(v81);
  }
  if (v84) {
    std::__shared_weak_count::__release_weak(v84);
  }
  if (v87) {
    std::__shared_weak_count::__release_weak(v87);
  }
  if (v90) {
    std::__shared_weak_count::__release_weak(v90);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C5AA0564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,std::__shared_weak_count *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,std::__shared_weak_count *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  dispatch::callback<void({block_pointer})(void)>::~callback((uint64_t)&a11);
  dispatch::callback<void({block_pointer})(void)>::~callback((uint64_t)&a26);
  if (a25)
  {
    std::__shared_weak_count::__release_weak(a25);
    dispatch::callback<void({block_pointer})(dispatch::group_session)>::~callback((uint64_t)&a35);
    unint64_t v70 = a34;
    if (!a34)
    {
LABEL_3:
      dispatch::callback<void({block_pointer})(BOOL,unsigned long long)>::~callback((uint64_t)&a44);
      std::string::size_type v71 = a43;
      if (!a43) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    dispatch::callback<void({block_pointer})(dispatch::group_session)>::~callback((uint64_t)&a35);
    unint64_t v70 = a34;
    if (!a34) {
      goto LABEL_3;
    }
  }
  std::__shared_weak_count::__release_weak(v70);
  dispatch::callback<void({block_pointer})(BOOL,unsigned long long)>::~callback((uint64_t)&a44);
  std::string::size_type v71 = a43;
  if (!a43)
  {
LABEL_4:
    dispatch::callback<void({block_pointer})>::~callback(v68 - 128);
    size_t v72 = a52;
    if (!a52) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  std::__shared_weak_count::__release_weak(v71);
  dispatch::callback<void({block_pointer})>::~callback(v68 - 128);
  size_t v72 = a52;
  if (!a52)
  {
LABEL_5:
    unint64_t v73 = a59;
    if (!a59)
    {
LABEL_12:
      if (a67) {
        std::__shared_weak_count::__release_weak(a67);
      }
      if (STACK[0x210]) {
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x210]);
      }
      unint64_t v74 = *(std::__shared_weak_count **)(v68 - 208);
      if (v74) {
        std::__shared_weak_count::__release_weak(v74);
      }
      xpc_object_t v75 = *(std::__shared_weak_count **)(v68 - 144);
      if (v75) {
        std::__shared_weak_count::__release_weak(v75);
      }
      std::__shared_weak_count::__release_weak(v67);
      _Unwind_Resume(a1);
    }
LABEL_11:
    std::__shared_weak_count::__release_weak(v73);
    goto LABEL_12;
  }
LABEL_10:
  std::__shared_weak_count::__release_weak(v72);
  unint64_t v73 = a59;
  if (!a59) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

void sub_1C5AA07CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_2(void *a1, void **a2, void **a3)
{
  int v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    size_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      std::string::size_type v9 = v8;
      if (!a1[5])
      {
LABEL_12:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 1174405120;
      _DWORD v12[2] = ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_3;
      v12[3] = &__block_descriptor_tmp_10;
      uint64_t v10 = *a2;
      v12[4] = v7;
      xpc_object_t object = v10;
      if (v10)
      {
        xpc_retain(v10);
        uint64_t v11 = *a3;
        if (!*a3) {
          goto LABEL_9;
        }
      }
      else
      {
        xpc_object_t object = xpc_null_create();
        uint64_t v11 = *a3;
        if (!*a3)
        {
LABEL_9:
          long long aBlock = v11;
          ctu::SharedSynchronizable<FSModuleICE>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v12);
          if (aBlock) {
            _Block_release(aBlock);
          }
          xpc_release(object);
          xpc_object_t object = 0;
          goto LABEL_12;
        }
      }
      uint64_t v11 = _Block_copy(v11);
      goto LABEL_9;
    }
  }
}

void ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_3(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 88);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = "true";
    if (*(unsigned char *)(v2 + 961)) {
      uint64_t v5 = "true";
    }
    else {
      uint64_t v5 = "false";
    }
    int v6 = *(unsigned __int8 *)(v2 + 1153);
    if (*(unsigned char *)(v2 + 960)) {
      uint64_t v7 = "true";
    }
    else {
      uint64_t v7 = "false";
    }
    *(_DWORD *)std::string buf = 136315650;
    if (!v6) {
      int v4 = "false";
    }
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v7;
    __int16 v31 = 2080;
    uint64_t v32 = v4;
    _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I RFS status during request: Remote=%s Ready=%s Prevent=%s", buf, 0x20u);
  }
  if (!*(unsigned char *)(v2 + 961) || !*(unsigned char *)(v2 + 960) || *(unsigned char *)(v2 + 1153))
  {
    xpc_object_t v8 = xpc_null_create();
    uint64_t v9 = *(void *)(a1 + 48);
    *(void *)std::string buf = v8;
    xpc_object_t v10 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, unsigned char *))(v9 + 16))(v9, 3760250887, buf);
    xpc_release(*(xpc_object_t *)buf);
    xpc_release(v10);
    return;
  }
  xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x1E4F4CD58]);
  *(void *)std::string buf = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    *(void *)std::string buf = xpc_null_create();
  }
  int v12 = xpc::dyn_cast_or_default((xpc *)buf, 0);
  xpc_release(*(xpc_object_t *)buf);
  xpc_object_t v13 = *(NSObject **)(v2 + 88);
  BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
  if (!v12)
  {
    if (v14)
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_DEFAULT, "#I Responding immediately before fs-sync is complete", buf, 2u);
    }
    goto LABEL_37;
  }
  if (v14)
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_DEFAULT, "#I Holding response till fs-sync is complete", buf, 2u);
  }
  memset(buf, 170, 16);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_7;
  aBlock[3] = &__block_descriptor_tmp_9_5;
  size_t v15 = *(void **)(a1 + 48);
  if (v15) {
    size_t v15 = _Block_copy(v15);
  }
  size_t v29 = v15;
  uint64_t v16 = _Block_copy(aBlock);
  uint64_t v17 = *(NSObject **)(v2 + 136);
  if (v17) {
    dispatch_retain(*(dispatch_object_t *)(v2 + 136));
  }
  *(void *)std::string buf = v16;
  *(void *)&uint8_t buf[8] = v17;
  uint64_t v18 = operator new(0x20uLL);
  *uint64_t v18 = 0;
  v18[1] = 0;
  if (!v16)
  {
    uint64_t v19 = v2 + 1072;
    void v18[2] = 0;
    v18[3] = v17;
    if (!v17) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  uint64_t v19 = v2 + 1072;
  void v18[2] = _Block_copy(v16);
  v18[3] = v17;
  if (v17) {
LABEL_28:
  }
    dispatch_retain(v17);
LABEL_29:
  v18[1] = v19;
  uint64_t v20 = *(void *)(v2 + 1072);
  *uint64_t v18 = v20;
  *(void *)(v20 + 8) = v18;
  *(void *)(v2 + 1072) = v18;
  ++*(void *)(v2 + 1088);
  if (v17) {
    dispatch_release(v17);
  }
  if (v16) {
    _Block_release(v16);
  }
  if (v29) {
    _Block_release(v29);
  }
LABEL_37:
  xpc_object_t v21 = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x1E4F4CA78]);
  *(void *)std::string buf = v21;
  if (v21) {
    xpc_retain(v21);
  }
  else {
    *(void *)std::string buf = xpc_null_create();
  }
  int v22 = xpc::dyn_cast_or_default((xpc *)buf, 0);
  xpc_release(*(xpc_object_t *)buf);
  if (v22) {
    int v23 = 3;
  }
  else {
    int v23 = 1;
  }
  if (*(_DWORD *)(v2 + 1136)) {
    unsigned int v24 = *(_DWORD *)(v2 + 1136);
  }
  else {
    unsigned int v24 = v23;
  }
  FSModuleICE::requestFSSync_sync((FSModuleICE *)v2, v24, v22);
  if ((v12 & 1) == 0)
  {
    xpc_object_t v25 = xpc_null_create();
    uint64_t v26 = *(void *)(a1 + 48);
    *(void *)std::string buf = v25;
    xpc_object_t v27 = xpc_null_create();
    (*(void (**)(uint64_t, void, unsigned char *))(v26 + 16))(v26, 0, buf);
    xpc_release(*(xpc_object_t *)buf);
    xpc_release(v27);
  }
}

void sub_1C5AA0D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_7(uint64_t a1, int a2)
{
  if (a2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = 3760250880;
  }
  xpc_object_t v4 = xpc_null_create();
  uint64_t v5 = *(void *)(a1 + 32);
  xpc_object_t object = v4;
  xpc_object_t v6 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v5 + 16))(v5, v3, &object);
  xpc_release(object);
  xpc_release(v6);
}

void sub_1C5AA0E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11FSModuleICEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11FSModuleICEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_13(void *a1, uint64_t a2, void **a3)
{
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = a1[4];
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      xpc_object_t v8 = v7;
      if (a1[5])
      {
        v10[0] = MEMORY[0x1E4F143A8];
        v10[1] = 1174405120;
        _DWORD v10[2] = ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_2_14;
        v10[3] = &__block_descriptor_tmp_15_0;
        void v10[4] = v6;
        uint64_t v9 = *a3;
        if (*a3) {
          uint64_t v9 = _Block_copy(v9);
        }
        long long aBlock = v9;
        ctu::SharedSynchronizable<FSModuleICE>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v10);
        if (aBlock) {
          _Block_release(aBlock);
        }
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_2_14(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 961))
  {
    char v3 = BBUFSServerFlushInProgress();
    BOOL v4 = *(unsigned char *)(v2 + 964) != 0;
  }
  else
  {
    BOOL v4 = 0;
    char v3 = 0;
  }
  xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v6 = v5;
  if (v5)
  {
    xpc_object_t xdict = v5;
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t xdict = v6;
    if (!v6)
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v6 = 0;
      goto LABEL_11;
    }
  }
  if (MEMORY[0x1C8795EB0](v6) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v6);
    goto LABEL_12;
  }
  xpc_object_t v7 = xpc_null_create();
LABEL_11:
  xpc_object_t xdict = v7;
LABEL_12:
  xpc_release(v6);
  xpc_object_t v8 = xpc_BOOL_create(v3);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C590], v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  xpc_object_t v10 = xpc_BOOL_create(v4);
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C598], v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  unsigned int v12 = 0;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), &v12, &xdict);
  xpc_release(xdict);
}

void sub_1C5AA1180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_19(void *a1, xpc_object_t *a2, uint64_t *a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1[4];
  memset(__p, 170, sizeof(__p));
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4CA30]);
  buf[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    buf[0] = xpc_null_create();
  }
  uint64_t v29 = 0;
  long long v30 = 0;
  uint64_t v31 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(buf[0]);
  xpc_object_t v7 = (std::__shared_weak_count *)a1[6];
  if (!v7) {
    goto LABEL_41;
  }
  xpc_object_t v8 = std::__shared_weak_count::lock(v7);
  long long v30 = v8;
  if (!v8) {
    goto LABEL_41;
  }
  xpc_object_t v9 = v8;
  uint64_t v29 = a1[5];
  if (!v29) {
    goto LABEL_40;
  }
  int v10 = SHIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0) {
    size_t v11 = HIBYTE(__p[2]);
  }
  else {
    size_t v11 = (size_t)__p[1];
  }
  if (v11 == strlen((const char *)*MEMORY[0x1E4F4C4E8])
    && (SHIBYTE(__p[2]) >= 0 ? (unsigned int v12 = __p) : (unsigned int v12 = (void **)__p[0]),
        !memcmp(v12, (const void *)*MEMORY[0x1E4F4C4E8], v11)))
  {
    v26[0] = MEMORY[0x1E4F143A8];
    v26[1] = 1174405120;
    void v26[2] = ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_2_20;
    v26[3] = &__block_descriptor_tmp_23_3;
    v26[4] = v5;
    uint64_t v18 = (void *)*a3;
    if (*a3) {
      uint64_t v18 = _Block_copy(v18);
    }
    long long aBlock = v18;
    ctu::SharedSynchronizable<FSModuleICE>::execute_wrapped((uint64_t *)(v5 + 120), (uint64_t)v26);
    if (aBlock) {
      _Block_release(aBlock);
    }
  }
  else
  {
    if (v11 != strlen((const char *)*MEMORY[0x1E4F4D228])
      || (v10 >= 0 ? (xpc_object_t v13 = __p) : (xpc_object_t v13 = (void **)__p[0]), memcmp(v13, (const void *)*MEMORY[0x1E4F4D228], v11)))
    {
      BOOL v14 = *(NSObject **)(v5 + 88);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        int v22 = (void **)__p[0];
        if (v10 >= 0) {
          int v22 = __p;
        }
        LODWORD(buf[0]) = 136315138;
        *(xpc_object_t *)((char *)buf + 4) = v22;
        _os_log_error_impl(&dword_1C59C6000, v14, OS_LOG_TYPE_ERROR, "Command [%s] not supported", (uint8_t *)buf, 0xCu);
      }
      buf[0] = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      xpc_object_t v15 = xpc_dictionary_create(0, 0, 0);
      xpc_object_t v16 = v15;
      if (v15)
      {
        buf[0] = v15;
      }
      else
      {
        xpc_object_t v16 = xpc_null_create();
        buf[0] = v16;
        if (!v16)
        {
          xpc_object_t v17 = xpc_null_create();
          xpc_object_t v16 = 0;
          goto LABEL_36;
        }
      }
      if (MEMORY[0x1C8795EB0](v16) == MEMORY[0x1E4F14590])
      {
        xpc_retain(v16);
        goto LABEL_37;
      }
      xpc_object_t v17 = xpc_null_create();
LABEL_36:
      buf[0] = v17;
LABEL_37:
      xpc_release(v16);
      xpc_object_t v20 = xpc_string_create("Command not supported");
      if (!v20) {
        xpc_object_t v20 = xpc_null_create();
      }
      xpc_dictionary_set_value(buf[0], (const char *)*MEMORY[0x1E4F4C240], v20);
      xpc_object_t v21 = xpc_null_create();
      xpc_release(v20);
      xpc_release(v21);
      unsigned int v23 = -534716414;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, &v23, buf);
      xpc_release(buf[0]);
      xpc_object_t v9 = v30;
      if (v30) {
        goto LABEL_40;
      }
LABEL_41:
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
        return;
      }
      goto LABEL_42;
    }
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 1174405120;
    unint64_t v24[2] = ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_24;
    v24[3] = &__block_descriptor_tmp_27_1;
    v24[4] = v5;
    uint64_t v19 = (void *)*a3;
    if (*a3) {
      uint64_t v19 = _Block_copy(v19);
    }
    xpc_object_t v25 = v19;
    ctu::SharedSynchronizable<FSModuleICE>::execute_wrapped((uint64_t *)(v5 + 120), (uint64_t)v24);
    if (v25) {
      _Block_release(v25);
    }
  }
LABEL_40:
  if (atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_41;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (SHIBYTE(__p[2]) < 0) {
LABEL_42:
  }
    operator delete(__p[0]);
}

void sub_1C5AA15F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_2_20(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 961))
  {
    if (!FSModuleICE::eraseRemoteFileSystem_sync((dispatch_object_t *)v2))
    {
      uint64_t v12 = 3760250880;
LABEL_33:
      xpc_object_t v16 = xpc_null_create();
      uint64_t v17 = *(void *)(a1 + 40);
      v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      xpc_object_t v18 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, std::string *))(v17 + 16))(v17, v12, &v24);
      xpc_release(v24.__r_.__value_.__l.__data_);
      xpc_release(v18);
      return;
    }
    unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
    pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
    char v3 = (uint64_t *)off_1EBBDC878;
    if (!off_1EBBDC878)
    {
      ABMServer::create_default_global(&v24);
      long long v4 = *(_OWORD *)&v24.__r_.__value_.__l.__data_;
      *(_OWORD *)&v24.__r_.__value_.__l.__data_ = 0uLL;
      uint64_t v5 = (std::__shared_weak_count *)*(&off_1EBBDC878 + 1);
      off_1EBBDC878 = v4;
      if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      std::string::size_type size = (std::__shared_weak_count *)v24.__r_.__value_.__l.__size_;
      if (v24.__r_.__value_.__l.__size_
        && !atomic_fetch_add((atomic_ullong *volatile)(v24.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
      char v3 = (uint64_t *)off_1EBBDC878;
    }
    unint64_t v20 = (unint64_t)v3;
    unint64_t v21 = *(&off_1EBBDC878 + 1);
    if (*(&off_1EBBDC878 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDC878 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
    xpc_object_t v7 = (const void *)*MEMORY[0x1E4F4CC38];
    size_t v8 = strlen((const char *)*MEMORY[0x1E4F4CC38]);
    if (v8 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v9 = v8;
    if (v8 >= 0x17)
    {
      uint64_t v13 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17) {
        uint64_t v13 = v8 | 7;
      }
      uint64_t v14 = v13 + 1;
      p_dst = (std::string *)operator new(v13 + 1);
      __dst.__r_.__value_.__l.__size_ = v9;
      __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v8;
      p_dst = &__dst;
      if (!v8)
      {
        __dst.__r_.__value_.__s.__data_[0] = 0;
        int v11 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_17:
          std::string v24 = __dst;
          goto LABEL_24;
        }
LABEL_23:
        std::string::__init_copy_ctor_external(&v24, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
LABEL_24:
        int v22 = 0;
        unsigned int v23 = 0;
        ABMServer::broadcast(v3, (uint64_t)&v24, &v23, &v22);
        if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v24.__r_.__value_.__l.__data_);
          if ((v11 & 0x80000000) == 0)
          {
LABEL_26:
            xpc_object_t v15 = (std::__shared_weak_count *)v21;
            if (!v21) {
              goto LABEL_32;
            }
            goto LABEL_30;
          }
        }
        else if ((v11 & 0x80000000) == 0)
        {
          goto LABEL_26;
        }
        operator delete(__dst.__r_.__value_.__l.__data_);
        xpc_object_t v15 = (std::__shared_weak_count *)v21;
        if (!v21)
        {
LABEL_32:
          uint64_t v12 = 0;
          goto LABEL_33;
        }
LABEL_30:
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        goto LABEL_32;
      }
    }
    memmove(p_dst, v7, v9);
    p_dst->__r_.__value_.__s.__data_[v9] = 0;
    int v11 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_23;
  }
}

void sub_1C5AA1978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_1C5AA199C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

uint64_t FSModuleICE::eraseRemoteFileSystem_sync(dispatch_object_t *this)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  FSModuleICE::handleBasebandReset_sync(this);
  memset(__dst, 170, sizeof(__dst));
  uint64_t v2 = (const char *)MEMORY[0x1C8792DE0]();
  size_t v3 = strlen(v2);
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  long long v4 = (void *)v3;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v5 = (void **)operator new(v6 + 1);
    __dst[1] = v4;
    void __dst[2] = (void *)(v7 | 0x8000000000000000);
    __dst[0] = v5;
    goto LABEL_8;
  }
  HIBYTE(__dst[2]) = v3;
  uint64_t v5 = __dst;
  if (v3) {
LABEL_8:
  }
    memmove(v5, v2, (size_t)v4);
  *((unsigned char *)v4 + (void)v5) = 0;
  uint64_t v8 = support::fs::removeDirContents((const char *)__dst, 0);
  std::string::size_type v9 = this[11];
  if (v8)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = __dst;
      if (SHIBYTE(__dst[2]) < 0) {
        int v10 = (void **)__dst[0];
      }
      *(_DWORD *)std::string buf = 136315138;
      xpc_object_t v15 = v10;
      _os_log_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEFAULT, "#I removed contents of %s", buf, 0xCu);
      if (SHIBYTE(__dst[2]) < 0) {
        goto LABEL_17;
      }
      return v8;
    }
  }
  else if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    uint64_t v12 = __dst;
    if (SHIBYTE(__dst[2]) < 0) {
      uint64_t v12 = (void **)__dst[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    xpc_object_t v15 = v12;
    _os_log_error_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_ERROR, "failed removing %s", buf, 0xCu);
    if (SHIBYTE(__dst[2]) < 0) {
      goto LABEL_17;
    }
    return v8;
  }
  if (SHIBYTE(__dst[2]) < 0) {
LABEL_17:
  }
    operator delete(__dst[0]);
  return v8;
}

void sub_1C5AA1C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_24(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(*(void *)(a1 + 32) + 88);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_error_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_ERROR, "Restore carrier defaults command is not supported on this device", v6, 2u);
  }
  xpc_object_t v3 = xpc_null_create();
  uint64_t v4 = *(void *)(a1 + 40);
  xpc_object_t object = v3;
  xpc_object_t v5 = xpc_null_create();
  (*(void (**)(uint64_t, void, xpc_object_t *))(v4 + 16))(v4, 0, &object);
  xpc_release(object);
  xpc_release(v5);
}

void sub_1C5AA1D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_32(void *a1, uint64_t a2, void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = a1[4];
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      if (a1[5])
      {
        v10[0] = MEMORY[0x1E4F143A8];
        v10[1] = 1174405120;
        _DWORD v10[2] = ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_2_33;
        v10[3] = &__block_descriptor_tmp_36_1;
        void v10[4] = v6;
        std::string::size_type v9 = *a3;
        if (*a3) {
          std::string::size_type v9 = _Block_copy(v9);
        }
        long long aBlock = v9;
        ctu::SharedSynchronizable<FSModuleICE>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v10);
        if (aBlock) {
          _Block_release(aBlock);
        }
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_2_33(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  xpc_object_t v3 = *(NSObject **)(v2 + 88);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Request to allow rfs sync", v7, 2u);
  }
  *(unsigned char *)(v2 + 1153) = 0;
  xpc_object_t v4 = xpc_null_create();
  uint64_t v5 = *(void *)(a1 + 40);
  xpc_object_t object = v4;
  xpc_object_t v6 = xpc_null_create();
  (*(void (**)(uint64_t, void, xpc_object_t *))(v5 + 16))(v5, 0, &object);
  xpc_release(object);
  xpc_release(v6);
}

void sub_1C5AA1F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_40(void *a1, uint64_t a2, void **a3)
{
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = a1[4];
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      if (a1[5])
      {
        v10[0] = MEMORY[0x1E4F143A8];
        v10[1] = 1174405120;
        _DWORD v10[2] = ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_2_41;
        v10[3] = &__block_descriptor_tmp_48_2;
        void v10[4] = v6;
        std::string::size_type v9 = *a3;
        if (*a3) {
          std::string::size_type v9 = _Block_copy(v9);
        }
        long long aBlock = v9;
        ctu::SharedSynchronizable<FSModuleICE>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v10);
        if (aBlock) {
          _Block_release(aBlock);
        }
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_2_41(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  xpc_object_t v3 = *(NSObject **)(v2 + 88);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Request to prevent rfs sync", buf, 2u);
  }
  *(unsigned char *)(v2 + 1153) = 1;
  memset(buf, 170, sizeof(buf));
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_42;
  aBlock[3] = &__block_descriptor_tmp_45_1;
  xpc_object_t v4 = *(void **)(a1 + 40);
  if (v4) {
    xpc_object_t v4 = _Block_copy(v4);
  }
  uint64_t v14 = v4;
  uint64_t v5 = _Block_copy(aBlock);
  uint64_t v6 = *(NSObject **)(v2 + 136);
  if (v6) {
    dispatch_retain(*(dispatch_object_t *)(v2 + 136));
  }
  *(void *)std::string buf = v5;
  *(void *)&uint8_t buf[8] = v6;
  uint64_t v7 = operator new(0x20uLL);
  void *v7 = 0;
  v7[1] = 0;
  if (v5)
  {
    uint64_t v8 = v2 + 1072;
    _DWORD v7[2] = _Block_copy(v5);
    v7[3] = v6;
    if (!v6) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  uint64_t v8 = v2 + 1072;
  _DWORD v7[2] = 0;
  v7[3] = v6;
  if (v6) {
LABEL_9:
  }
    dispatch_retain(v6);
LABEL_10:
  v7[1] = v8;
  uint64_t v9 = *(void *)(v2 + 1072);
  void *v7 = v9;
  *(void *)(v9 + 8) = v7;
  *(void *)(v2 + 1072) = v7;
  ++*(void *)(v2 + 1088);
  int v10 = *(NSObject **)(v2 + 88);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = *(_DWORD *)(v2 + 1028);
    int v12 = *(_DWORD *)(v2 + 1024);
    *(_DWORD *)uint64_t v16 = 67109376;
    int v17 = v11;
    __int16 v18 = 1024;
    int v19 = v12;
    _os_log_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_DEFAULT, "#I Checking response fSyncsCompleted=%u fSyncsRequested=%u", v16, 0xEu);
    if (*(_DWORD *)(v2 + 1028) < *(_DWORD *)(v2 + 1024))
    {
LABEL_12:
      if (!v6) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
  }
  else if (*(_DWORD *)(v2 + 1028) < *(_DWORD *)(v2 + 1024))
  {
    goto LABEL_12;
  }
  FSModuleICE::execPendingResponses_sync((FSModuleICE *)v2, 1);
  if (v6) {
LABEL_13:
  }
    dispatch_release(v6);
LABEL_14:
  if (v5) {
    _Block_release(v5);
  }
  if (v14) {
    _Block_release(v14);
  }
}

void sub_1C5AA22B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, char a15)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_42(uint64_t a1, int a2)
{
  if (a2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = 3760250880;
  }
  xpc_object_t v4 = xpc_null_create();
  uint64_t v5 = *(void *)(a1 + 32);
  xpc_object_t object = v4;
  xpc_object_t v6 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v5 + 16))(v5, v3, &object);
  xpc_release(object);
  xpc_release(v6);
}

void sub_1C5AA2380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_52(void *a1, int a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (!a1[5]) {
        goto LABEL_17;
      }
      *(_DWORD *)(v5 + 1096) = a2;
      uint64_t v8 = *(NSObject **)(v5 + 88);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67109120;
        int v11 = a2;
        _os_log_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_DEFAULT, "#I ice::Client provided ARI context id: 0x%08x", buf, 8u);
        uint64_t v8 = *(NSObject **)(v5 + 88);
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_DEFAULT, "#I Initializing BBU FS Server...", buf, 2u);
      }
      if ((FSModuleICE::initBBUServer_sync((FSModuleICE *)v5) & 1) != 0
        || (uint64_t v9 = *(NSObject **)(v5 + 88), !os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)))
      {
LABEL_17:
        if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          return;
        }
        goto LABEL_11;
      }
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_ERROR, "failed FS Sync setup", buf, 2u);
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_11:
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1C5AA2558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t FSModuleICE::initBBUServer_sync(FSModuleICE *this)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = MEMORY[0x1C8792DE0]();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    if (BBUFSServerParametersInit())
    {
      if (FSModuleICE::initKTLOptions_sync(this))
      {
        memcpy(__dst, (char *)this + 560, sizeof(__dst));
        uint64_t v4 = BBUFSServerCreate();
        if (v4)
        {
          int shouldForceSyncFileSystem = capabilities::abs::shouldForceSyncFileSystem((capabilities::abs *)v4);
          if (BBUFSServerSetConfig()) {
            char v6 = BBUFSServerSetConfig();
          }
          else {
            char v6 = 0;
          }
          int v11 = *((void *)this + 11);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v12 = "false";
            int v13 = *((_DWORD *)this + 274);
            if (shouldForceSyncFileSystem) {
              uint64_t v12 = "true";
            }
            v16[0] = 67109378;
            v16[1] = v13;
            __int16 v17 = 2080;
            __int16 v18 = v12;
            _os_log_impl(&dword_1C59C6000, v11, OS_LOG_TYPE_DEFAULT, "#I BBUFSConfig: ARI context: 0x%x ForcedSync: %s", (uint8_t *)v16, 0x12u);
          }
          if (v6)
          {
            uint64_t v8 = 1;
            *((unsigned char *)this + 960) = 1;
            uint64_t v14 = *((void *)this + 11);
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(v16[0]) = 0;
              _os_log_impl(&dword_1C59C6000, v14, OS_LOG_TYPE_DEFAULT, "#I BBU+KTL are ready for FS Sync", (uint8_t *)v16, 2u);
            }
            goto LABEL_28;
          }
          uint64_t v9 = *((void *)this + 11);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            LOWORD(v16[0]) = 0;
            int v10 = "Failed to set BBUFS server config";
            goto LABEL_26;
          }
LABEL_27:
          uint64_t v8 = 0;
LABEL_28:
          free(v3);
          return v8;
        }
        uint64_t v9 = *((void *)this + 11);
        if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
          goto LABEL_27;
        }
        LOWORD(v16[0]) = 0;
        int v10 = "failed creating file server";
      }
      else
      {
        uint64_t v9 = *((void *)this + 11);
        if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
          goto LABEL_27;
        }
        LOWORD(v16[0]) = 0;
        int v10 = "failed to create KTL options";
      }
    }
    else
    {
      uint64_t v9 = *((void *)this + 11);
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        goto LABEL_27;
      }
      LOWORD(v16[0]) = 0;
      int v10 = "failed preparing fs sync parameters";
    }
LABEL_26:
    _os_log_error_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_ERROR, v10, (uint8_t *)v16, 2u);
    goto LABEL_27;
  }
  uint64_t v7 = *((void *)this + 11);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v16[0]) = 0;
    _os_log_error_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_ERROR, "failed copying default destination", (uint8_t *)v16, 2u);
  }
  return 0;
}

void ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_57(void *a1, int a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = a1[4];
  char v6 = std::__shared_weak_count::lock(v3);
  uint64_t v32 = v6;
  if (!v6) {
    return;
  }
  uint64_t v7 = v6;
  if (!a1[5]) {
    goto LABEL_43;
  }
  uint64_t v8 = *(NSObject **)(v5 + 88);
  if (!*(unsigned char *)(v5 + 960))
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_ERROR, "Skipping baseband indication request for FS sync as baseband is not ready", buf, 2u);
    }
    goto LABEL_43;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_DEFAULT, "#I Triggering FS Sync due to baseband indication", buf, 2u);
  }
  FSModuleICE::requestFSSync_sync((FSModuleICE *)v5, 2u, 0);
  if (!a2)
  {
LABEL_43:
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    return;
  }
  uint64_t v9 = *(NSObject **)(v5 + 88);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEFAULT, "#I Peforming soft reset due to baseband request for reset after FS sync", buf, 2u);
  }
  xpc_object_t v10 = xpc_dictionary_create(0, 0, 0);
  if (v10 || (xpc_object_t v10 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v10) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v10);
      xpc_object_t v11 = v10;
    }
    else
    {
      xpc_object_t v11 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    xpc_object_t v10 = 0;
  }
  xpc_release(v10);
  *(void *)std::string buf = operator new(0x30uLL);
  long long v30 = xmmword_1C5BC7C30;
  strcpy(*(char **)buf, "Baseband request for reset after FS sync");
  xpc_object_t v12 = xpc_string_create((const char *)*MEMORY[0x1E4F4C6F0]);
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E4F4C690], v12);
  xpc_object_t v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  xpc_object_t v14 = xpc_string_create((const char *)*MEMORY[0x1E4F4D198]);
  if (!v14) {
    xpc_object_t v14 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E4F4CA38], v14);
  xpc_object_t v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  if (v30 >= 0) {
    uint64_t v16 = (const char *)buf;
  }
  else {
    uint64_t v16 = *(const char **)buf;
  }
  xpc_object_t v17 = xpc_string_create(v16);
  if (!v17) {
    xpc_object_t v17 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E4F4C8F0], v17);
  xpc_object_t v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  int v19 = (const void *)*MEMORY[0x1E4F4C638];
  size_t v20 = strlen((const char *)*MEMORY[0x1E4F4C638]);
  if (v20 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v21 = (void *)v20;
  if (v20 >= 0x17)
  {
    uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17) {
      uint64_t v23 = v20 | 7;
    }
    uint64_t v24 = v23 + 1;
    int v22 = (void **)operator new(v23 + 1);
    __dst[1] = v21;
    unint64_t v28 = v24 | 0x8000000000000000;
    __dst[0] = v22;
    goto LABEL_34;
  }
  HIBYTE(v28) = v20;
  int v22 = __dst;
  if (v20) {
LABEL_34:
  }
    memmove(v22, v19, (size_t)v21);
  *((unsigned char *)v21 + (void)v22) = 0;
  xpc_object_t object = v11;
  if (v11) {
    xpc_retain(v11);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc_object_t v25 = 0;
  Service::runCommand(v5, (uint64_t)__dst, &object, &v25);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(v28) < 0) {
    operator delete(__dst[0]);
  }
  if (SHIBYTE(v30) < 0) {
    operator delete(*(void **)buf);
  }
  xpc_release(v11);
  uint64_t v7 = v32;
  if (v32) {
    goto LABEL_43;
  }
}

void sub_1C5AA2C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  xpc_release(object);
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  xpc_release(v23);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v24 - 64);
  _Unwind_Resume(a1);
}

void ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_63(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5]) {
        *(unsigned char *)(v3 + 963) = 1;
      }
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void ___ZN11FSModuleICE10initializeEN8dispatch13group_sessionE_block_invoke_68(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (FSModuleICE *)a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        *((unsigned char *)v3 + 963) = 0;
        FSModuleICE::runDeferred_sync(v3);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1C5AA2EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void FSModuleICE::runDeferred_sync(FSModuleICE *this)
{
  if (!*((unsigned char *)this + 962) && !*((unsigned char *)this + 963))
  {
    uint64_t v2 = *((void *)this + 127);
    if (v2)
    {
      uint64_t v3 = (void **)*((void *)this + 123);
      uint64_t v4 = (void **)*((void *)this + 124);
      if (v4 == v3)
      {
        uint64_t v4 = (void **)*((void *)this + 123);
      }
      else
      {
        unint64_t v5 = *((void *)this + 126);
        char v6 = &v3[v5 >> 9];
        uint64_t v7 = (uint64_t)*v6 + 8 * (v5 & 0x1FF);
        uint64_t v8 = *(uint64_t *)((char *)v3 + (((v5 + v2) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v5 + v2) & 0x1FF);
        if (v7 != v8)
        {
          do
          {
            uint64_t v9 = *((void *)this + 11);
            if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)xpc_object_t v13 = 0;
              _os_log_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEFAULT, "#I Invoking deferred sync", v13, 2u);
            }
            FSModuleICE::requestFSSync_sync(this, *(_DWORD *)v7, *(unsigned __int8 *)(v7 + 4));
            v7 += 8;
            if (v7 - (void)*v6 == 4096)
            {
              uint64_t v10 = (uint64_t)v6[1];
              ++v6;
              uint64_t v7 = v10;
            }
          }
          while (v7 != v8);
          uint64_t v3 = (void **)*((void *)this + 123);
          uint64_t v4 = (void **)*((void *)this + 124);
        }
      }
      *((void *)this + 127) = 0;
      unint64_t v11 = (char *)v4 - (char *)v3;
      if (v11 >= 0x11)
      {
        do
        {
          operator delete(*v3);
          uint64_t v3 = (void **)(*((void *)this + 123) + 8);
          *((void *)this + 123) = v3;
          unint64_t v11 = *((void *)this + 124) - (void)v3;
        }
        while (v11 > 0x10);
      }
      if (v11 >> 3 == 1)
      {
        uint64_t v12 = 256;
      }
      else
      {
        if (v11 >> 3 != 2) {
          return;
        }
        uint64_t v12 = 512;
      }
      *((void *)this + 126) = v12;
    }
  }
}

uint64_t dispatch::callback<void({block_pointer})(BOOL,unsigned long long)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

uint64_t dispatch::callback<void({block_pointer})(dispatch::group_session)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

uint64_t dispatch::callback<void({block_pointer})(void)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void FSModuleICE::finishInitialization_sync(FSModuleICE *this)
{
  if (!*((unsigned char *)this + 961)) {
    return;
  }
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v2 || (uint64_t v3 = *((void *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  char v6 = (const char *)(*(uint64_t (**)(FSModuleICE *))(*(void *)this + 16))(this);
  size_t v7 = strlen(v6);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    uint64_t v9 = (void **)operator new(v10 + 1);
    __dst[1] = v8;
    unint64_t v63 = v11 | 0x8000000000000000;
    __dst[0] = v9;
  }
  else
  {
    HIBYTE(v63) = v7;
    uint64_t v9 = __dst;
    if (!v7) {
      goto LABEL_14;
    }
  }
  memmove(v9, v6, (size_t)v8);
LABEL_14:
  *((unsigned char *)v8 + (void)v9) = 0;
  size_t v61 = 0;
  AppleBasebandManager::create();
  long long v12 = v64;
  long long v64 = 0uLL;
  xpc_object_t v13 = (std::__shared_weak_count *)*((void *)this + 130);
  *(_OWORD *)((char *)this + 1032) = v12;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  xpc_object_t v14 = (std::__shared_weak_count *)*((void *)&v64 + 1);
  if (!*((void *)&v64 + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v64 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    xpc_object_t v15 = v61;
    if (!v61) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  xpc_object_t v15 = v61;
  if (v61) {
LABEL_20:
  }
    CFRelease(v15);
LABEL_21:
  if (SHIBYTE(v63) < 0) {
    operator delete(__dst[0]);
  }
  uint64_t v16 = (const void *)*MEMORY[0x1E4F4CEF8];
  size_t v17 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
  if (v17 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v18 = (void *)v17;
  if (v17 >= 0x17)
  {
    uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v20 = v17 | 7;
    }
    uint64_t v21 = v20 + 1;
    int v19 = (void **)operator new(v20 + 1);
    v59[1] = v18;
    unint64_t v60 = v21 | 0x8000000000000000;
    v59[0] = v19;
    goto LABEL_30;
  }
  HIBYTE(v60) = v17;
  int v19 = v59;
  if (v17) {
LABEL_30:
  }
    memmove(v19, v16, (size_t)v18);
  *((unsigned char *)v18 + (void)v19) = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11FSModuleICE25finishInitialization_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_76_2;
  void aBlock[4] = this;
  void aBlock[5] = v3;
  dispatch_object_t v56 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  int v22 = _Block_copy(aBlock);
  uint64_t v23 = *((void *)this + 17);
  if (v23) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  xpc_object_t v57 = v22;
  dispatch_object_t v58 = v23;
  AppleBasebandManager::setEventHandler();
  if (v58) {
    dispatch_release(v58);
  }
  if (v57) {
    _Block_release(v57);
  }
  if (SHIBYTE(v60) < 0) {
    operator delete(v59[0]);
  }
  uint64_t v24 = (const void *)*MEMORY[0x1E4F4CD28];
  size_t v25 = strlen((const char *)*MEMORY[0x1E4F4CD28]);
  if (v25 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v26 = (void *)v25;
  if (v25 >= 0x17)
  {
    uint64_t v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17) {
      uint64_t v28 = v25 | 7;
    }
    uint64_t v29 = v28 + 1;
    xpc_object_t v27 = operator new(v28 + 1);
    __p[1] = v26;
    unint64_t v54 = v29 | 0x8000000000000000;
    __p[0] = v27;
    goto LABEL_46;
  }
  HIBYTE(v54) = v25;
  xpc_object_t v27 = __p;
  if (v25) {
LABEL_46:
  }
    memmove(v27, v24, (size_t)v26);
  *((unsigned char *)v26 + (void)v27) = 0;
  v49[0] = MEMORY[0x1E4F143A8];
  v49[1] = 1174405120;
  void v49[2] = ___ZN11FSModuleICE25finishInitialization_syncEv_block_invoke_77;
  v49[3] = &__block_descriptor_tmp_80_3;
  v49[4] = this;
  v49[5] = v3;
  CFDictionaryRef v50 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  long long v30 = _Block_copy(v49);
  uint64_t v31 = *((void *)this + 17);
  if (v31) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  uint64_t v51 = v30;
  dispatch_object_t object = v31;
  AppleBasebandManager::setEventHandler();
  if (object) {
    dispatch_release(object);
  }
  if (v51) {
    _Block_release(v51);
  }
  if (SHIBYTE(v54) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v32 = (const void *)*MEMORY[0x1E4F4CB10];
  size_t v33 = strlen((const char *)*MEMORY[0x1E4F4CB10]);
  if (v33 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v34 = (void *)v33;
  if (v33 >= 0x17)
  {
    uint64_t v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17) {
      uint64_t v36 = v33 | 7;
    }
    uint64_t v37 = v36 + 1;
    size_t v35 = operator new(v36 + 1);
    v47[1] = v34;
    unint64_t v48 = v37 | 0x8000000000000000;
    v47[0] = v35;
    goto LABEL_62;
  }
  HIBYTE(v48) = v33;
  size_t v35 = v47;
  if (v33) {
LABEL_62:
  }
    memmove(v35, v32, (size_t)v34);
  *((unsigned char *)v34 + (void)v35) = 0;
  v43[0] = MEMORY[0x1E4F143A8];
  v43[1] = 1174405120;
  v43[2] = ___ZN11FSModuleICE25finishInitialization_syncEv_block_invoke_81;
  v43[3] = &__block_descriptor_tmp_84_0;
  v43[4] = this;
  v43[5] = v3;
  size_t v44 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v38 = _Block_copy(v43);
  uint64_t v39 = *((void *)this + 17);
  if (v39) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  size_t v45 = v38;
  dispatch_object_t v46 = v39;
  AppleBasebandManager::setEventHandler();
  if (v46) {
    dispatch_release(v46);
  }
  if (v45) {
    _Block_release(v45);
  }
  if ((SHIBYTE(v48) & 0x80000000) == 0)
  {
    if (!*((void *)this + 140)) {
      goto LABEL_77;
    }
LABEL_73:
    v40[0] = MEMORY[0x1E4F143A8];
    v40[1] = 1174405120;
    v40[2] = ___ZN11FSModuleICE25finishInitialization_syncEv_block_invoke_85;
    v40[3] = &__block_descriptor_tmp_91;
    uint8_t v40[4] = this;
    v40[5] = v3;
    size_t v41 = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::string::size_type v42 = _Block_copy(v40);
    HSFilerRT::registerBasebandResetDelegate();
    if (v42) {
      _Block_release(v42);
    }
    if (v41) {
      std::__shared_weak_count::__release_weak(v41);
    }
    goto LABEL_77;
  }
  operator delete(v47[0]);
  if (*((void *)this + 140)) {
    goto LABEL_73;
  }
LABEL_77:
  AppleBasebandManager::eventsOn(*((AppleBasebandManager **)this + 129));
  if (v44) {
    std::__shared_weak_count::__release_weak(v44);
  }
  if (v50) {
    std::__shared_weak_count::__release_weak(v50);
  }
  if (v56) {
    std::__shared_weak_count::__release_weak(v56);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C5AA37B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,std::__shared_weak_count *a53)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (a23) {
    std::__shared_weak_count::__release_weak(a23);
  }
  if (a38) {
    std::__shared_weak_count::__release_weak(a38);
  }
  if (a53)
  {
    std::__shared_weak_count::__release_weak(a53);
    std::__shared_weak_count::__release_weak(v53);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v53);
  _Unwind_Resume(a1);
}

void ___ZN11FSModuleICE25finishInitialization_syncEv_block_invoke(void *a1, abm::client::Event **a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    char v6 = std::__shared_weak_count::lock(v3);
    size_t v35 = v6;
    if (v6)
    {
      size_t v7 = v6;
      if (a1[5])
      {
        CFDictionaryRef v33 = (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL;
        abm::client::Event::getData((uint64_t *)&v33, *a2);
        CFDictionaryRef v8 = v33;
        if (v33) {
          uint64_t v9 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
        }
        else {
          uint64_t v9 = 0;
        }
        if (v9)
        {
          v32[0] = 0xAAAAAAAAAAAAAAAALL;
          v32[1] = 0xAAAAAAAAAAAAAAAALL;
          ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v32, v33);
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v31 = 0;
          ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v27, (const char *)*MEMORY[0x1E4F4C688]);
          ctu::cf::map_adapter::getString();
          MEMORY[0x1C8794290](v27);
          if (SHIBYTE(v31) < 0) {
            operator delete(__p[0]);
          }
          uint64_t v31 = v29[2];
          *(_OWORD *)long long __p = *(_OWORD *)v29;
          int v10 = SHIBYTE(v29[2]);
          if (SHIBYTE(v29[2]) >= 0) {
            size_t v11 = HIBYTE(v29[2]);
          }
          else {
            size_t v11 = (size_t)v29[1];
          }
          long long v12 = (const char **)MEMORY[0x1E4F4CAE8];
          if (v11 == strlen((const char *)*MEMORY[0x1E4F4C958])
            && (SHIBYTE(v29[2]) >= 0 ? (xpc_object_t v13 = __p) : (xpc_object_t v13 = (void **)__p[0]),
                !memcmp(v13, (const void *)*MEMORY[0x1E4F4C958], v11)))
          {
            *(void *)(v5 + 1024) = 0;
            FSModuleICE::restartSyncTimer_sync((FSModuleICE *)v5);
          }
          else if (v11 == strlen(*v12) && (v10 >= 0 ? (xpc_object_t v14 = __p) : (xpc_object_t v14 = (void **)__p[0]), !memcmp(v14, *v12, v11)))
          {
            uint64_t v18 = *(void *)(v5 + 1104);
            if (v18) {
              (*(void (**)(uint64_t))(*(void *)v18 + 56))(v18);
            }
          }
          else if (v11 == strlen((const char *)*MEMORY[0x1E4F4CCD8]) {
                 && (v10 >= 0 ? (xpc_object_t v15 = __p) : (xpc_object_t v15 = (void **)__p[0]),
          }
                     !memcmp(v15, (const void *)*MEMORY[0x1E4F4CCD8], v11)))
          {
            memset(v29, 170, sizeof(v29));
            int v19 = (const char *)*MEMORY[0x1E4F4C690];
            v27[0] = 0;
            v27[1] = 0;
            uint64_t v28 = 0;
            ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v36, v19);
            ctu::cf::map_adapter::getString();
            MEMORY[0x1C8794290](&v36);
            if (SHIBYTE(v28) < 0) {
              operator delete(v27[0]);
            }
            if (SHIBYTE(v29[2]) >= 0) {
              size_t v20 = HIBYTE(v29[2]);
            }
            else {
              size_t v20 = (size_t)v29[1];
            }
            if (v20 == strlen((const char *)*MEMORY[0x1E4F4C6E8])
              && (SHIBYTE(v29[2]) >= 0 ? (uint64_t v21 = v29) : (uint64_t v21 = (void **)v29[0]),
                  !memcmp(v21, (const void *)*MEMORY[0x1E4F4C6E8], v20)))
            {
              FSModuleICE::handleBasebandReset_sync((dispatch_object_t *)v5);
              uint64_t v26 = *(NSObject **)(v5 + 88);
              if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
              {
                LOWORD(v27[0]) = 0;
                _os_log_impl(&dword_1C59C6000, v26, OS_LOG_TYPE_DEFAULT, "#I Hard Will-Reset", (uint8_t *)v27, 2u);
              }
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)v29, (char *)*MEMORY[0x1E4F4C6F0]))
            {
              *(unsigned char *)(v5 + 964) = 1;
              *(void *)(v5 + 1144) = TelephonyUtilGetSystemTime();
              *(_DWORD *)(v5 + 1136) = 5;
              *(unsigned char *)(v5 + 1152) = 1;
            }
            if (SHIBYTE(v29[2]) < 0) {
              operator delete(v29[0]);
            }
          }
          else if (v11 == strlen((const char *)*MEMORY[0x1E4F4CBC8]) {
                 && (v10 >= 0 ? (uint64_t v16 = __p) : (uint64_t v16 = (void **)__p[0]),
          }
                     !memcmp(v16, (const void *)*MEMORY[0x1E4F4CBC8], v11))
                 || v11 == strlen((const char *)*MEMORY[0x1E4F4CEB8])
                 && (v10 >= 0 ? (size_t v17 = __p) : (size_t v17 = (void **)__p[0]),
                     !memcmp(v17, (const void *)*MEMORY[0x1E4F4CEB8], v11)))
          {
            FSModuleICE::handleBasebandReset_sync((dispatch_object_t *)v5);
          }
          int v22 = *(HSFilerRT **)(v5 + 1120);
          char v23 = HIBYTE(v31);
          if (v22)
          {
            uint64_t v24 = SHIBYTE(v31) >= 0 ? (void *)HIBYTE(v31) : __p[1];
            if (v24 == (void *)strlen(*v12))
            {
              size_t v25 = SHIBYTE(v31) >= 0 ? __p : (void **)__p[0];
              if (!memcmp(v25, *v12, (size_t)v24))
              {
                HSFilerRT::basebandReadyEventHandler(v22);
                char v23 = HIBYTE(v31);
              }
            }
          }
          if (v23 < 0) {
            operator delete(__p[0]);
          }
          MEMORY[0x1C87942E0](v32);
          CFDictionaryRef v8 = v33;
        }
        if (v8) {
          CFRelease(v8);
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1C5AA3DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  MEMORY[0x1C87942E0](&a28);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v28 - 80));
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v28 - 72);
  _Unwind_Resume(a1);
}

void sub_1C5AA3E4C(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v1 - 80));
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1 - 72);
  _Unwind_Resume(a1);
}

void sub_1C5AA3E68(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1 - 72);
  _Unwind_Resume(a1);
}

void FSModuleICE::handleBasebandBooted_sync(FSModuleICE *this)
{
  *((void *)this + 128) = 0;
  FSModuleICE::restartSyncTimer_sync(this);
}

void FSModuleICE::handleBasebandReset_sync(dispatch_object_t *this)
{
  FSModuleICE::execPendingResponses_sync((FSModuleICE *)this, 0);
  uint64_t v2 = this[121];
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(this[121]);
    this[121] = 0;
  }
  if (*((unsigned char *)this + 960))
  {
    *((unsigned char *)this + 964) = 0;
    *((unsigned char *)this + 960) = 0;
    uint64_t v3 = this[11];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I RFS Not Ready", buf, 2u);
    }
    if (BBUFSServerSetConfig())
    {
      BBUFSServerStop();
    }
    else
    {
      uint64_t v4 = this[11];
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v5 = 0;
        _os_log_error_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_ERROR, "failed to set shutdown flag with BBU for baseband reset", v5, 2u);
      }
    }
    BBUFSServerRelease();
  }
}

void ___ZN11FSModuleICE25finishInitialization_syncEv_block_invoke_77(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    int v10 = v4;
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        *(unsigned char *)(v3 + 960) = 0;
        char v6 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)CFDictionaryRef v8 = 0;
          _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#I Reset Detected", v8, 2u);
        }
        size_t v7 = *(HSFilerRT **)(v3 + 1120);
        if (v7) {
          HSFilerRT::basebandResetEventHandler(v7);
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1C5AA408C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN11FSModuleICE25finishInitialization_syncEv_block_invoke_81(void *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (!a1[5]) {
        goto LABEL_11;
      }
      char v6 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = *(_DWORD *)(v3 + 1024);
        *(_DWORD *)std::string buf = 67109120;
        int v11 = v8;
        _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#I syncs requested: %u", buf, 8u);
        char v6 = *(NSObject **)(v3 + 88);
        if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
LABEL_6:
          size_t v7 = *(HSFilerRT **)(v3 + 1120);
          if (!v7)
          {
LABEL_11:
            if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
            return;
          }
LABEL_10:
          HSFilerRT::dumpState(v7);
          goto LABEL_11;
        }
      }
      else if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        goto LABEL_6;
      }
      int v9 = *(_DWORD *)(v3 + 1028);
      *(_DWORD *)std::string buf = 67109120;
      int v11 = v9;
      _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#I syncs completed: %u", buf, 8u);
      size_t v7 = *(HSFilerRT **)(v3 + 1120);
      if (!v7) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
}

void sub_1C5AA4220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZN11FSModuleICE25finishInitialization_syncEv_block_invoke_85(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    char v6 = std::__shared_weak_count::lock(v3);
    int v11 = v6;
    if (v6)
    {
      size_t v7 = v6;
      if (!a1[5]) {
        goto LABEL_14;
      }
      v8[0] = MEMORY[0x1E4F143A8];
      v8[1] = 1174405120;
      uint64_t v8[2] = ___ZN11FSModuleICE25finishInitialization_syncEv_block_invoke_2;
      v8[3] = &__block_descriptor_tmp_87;
      v8[4] = v5;
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string __p = *(std::string *)a2;
      }
      ctu::SharedSynchronizable<FSModuleICE>::execute_wrapped((uint64_t *)(v5 + 120), (uint64_t)v8);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_14:
        if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          return;
        }
LABEL_11:
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        return;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_11;
      }
    }
  }
}

void sub_1C5AA4380(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

void ___ZN11FSModuleICE25finishInitialization_syncEv_block_invoke_2(uint64_t a1)
{
  __p[3] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 88);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    xpc_object_t v27 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      xpc_object_t v27 = (void *)*v27;
    }
    LODWORD(__p[0]) = 136315138;
    *(void **)((char *)__p + 4) = v27;
    _os_log_error_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_ERROR, "HSFiler requesting modem hard reset due to: %s", (uint8_t *)__p, 0xCu);
  }
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v4) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v4);
      xpc_object_t v5 = v4;
    }
    else
    {
      xpc_object_t v5 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v4 = 0;
  }
  xpc_release(v4);
  xpc_object_t v6 = xpc_string_create((const char *)*MEMORY[0x1E4F4C6E8]);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4F4C690], v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  xpc_object_t v8 = xpc_string_create((const char *)*MEMORY[0x1E4F4D1A0]);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4F4CA38], v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  int v10 = *(char *)(a1 + 63);
  if (v10 >= 0) {
    size_t v11 = *(unsigned __int8 *)(a1 + 63);
  }
  else {
    size_t v11 = *(void *)(a1 + 48);
  }
  unint64_t v12 = v11 + 10;
  memset(__p, 170, 24);
  if (v11 + 10 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v12 >= 0x17)
  {
    uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v14 = v12 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v16 = (char *)operator new(v14 + 1);
    __p[1] = (void *)(v11 + 10);
    std::string __p[2] = (void *)(v15 | 0x8000000000000000);
    __p[0] = v16;
    *((_WORD *)v16 + 4) = 8237;
    *(void *)uint64_t v16 = *(void *)"HSFiler - ";
    xpc_object_t v13 = v16 + 10;
  }
  else
  {
    __p[1] = (void *)8237;
    std::string __p[2] = 0;
    HIBYTE(__p[2]) = v11 + 10;
    __p[0] = *(void **)"HSFiler - ";
    xpc_object_t v13 = (char *)&__p[1] + 2;
    if (!v11) {
      goto LABEL_26;
    }
  }
  if (v10 >= 0) {
    size_t v17 = (const void *)(a1 + 40);
  }
  else {
    size_t v17 = *(const void **)(a1 + 40);
  }
  memmove(v13, v17, v11);
LABEL_26:
  v13[v11] = 0;
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v18 = __p;
  }
  else {
    uint64_t v18 = (void **)__p[0];
  }
  xpc_object_t v19 = xpc_string_create((const char *)v18);
  if (!v19) {
    xpc_object_t v19 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4F4C8F0], v19);
  xpc_object_t v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  uint64_t v21 = (const void *)*MEMORY[0x1E4F4C638];
  size_t v22 = strlen((const char *)*MEMORY[0x1E4F4C638]);
  if (v22 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  char v23 = (void *)v22;
  if (v22 >= 0x17)
  {
    uint64_t v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17) {
      uint64_t v25 = v22 | 7;
    }
    uint64_t v26 = v25 + 1;
    uint64_t v24 = (void **)operator new(v25 + 1);
    __dst[1] = v23;
    unint64_t v31 = v26 | 0x8000000000000000;
    __dst[0] = v24;
LABEL_39:
    memmove(v24, v21, (size_t)v23);
    *((unsigned char *)v23 + (void)v24) = 0;
    xpc_object_t object = v5;
    if (v5) {
      goto LABEL_35;
    }
    goto LABEL_40;
  }
  HIBYTE(v31) = v22;
  uint64_t v24 = __dst;
  if (v22) {
    goto LABEL_39;
  }
  LOBYTE(__dst[0]) = 0;
  xpc_object_t object = v5;
  if (v5)
  {
LABEL_35:
    xpc_retain(v5);
    goto LABEL_41;
  }
LABEL_40:
  xpc_object_t object = xpc_null_create();
LABEL_41:
  uint64_t v28 = 0;
  Service::runCommand(v2, (uint64_t)__dst, &object, &v28);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(v31) < 0)
  {
    operator delete(__dst[0]);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_43;
    }
LABEL_45:
    operator delete(__p[0]);
    goto LABEL_43;
  }
  if (SHIBYTE(__p[2]) < 0) {
    goto LABEL_45;
  }
LABEL_43:
  xpc_release(v5);
}

void sub_1C5AA47AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void __copy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 40);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

void FSModuleICE::sleep(void *a1, dispatch_object_t *a2)
{
  long long v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  xpc_object_t v8 = operator new(0x10uLL);
  *xpc_object_t v8 = a1;
  v8[1] = v3;
  xpc_object_t v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  int v10 = operator new(0x18uLL);
  *int v10 = v8;
  v10[1] = v5;
  _DWORD v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<FSModuleICE>::execute_wrapped<FSModuleICE::sleep(dispatch::group_session)::$_0>(FSModuleICE::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<FSModuleICE::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<FSModuleICE::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void FSModuleICE::wake(void *a1, dispatch_object_t *a2)
{
  long long v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  xpc_object_t v8 = operator new(0x10uLL);
  *xpc_object_t v8 = a1;
  v8[1] = v3;
  xpc_object_t v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  int v10 = operator new(0x18uLL);
  *int v10 = v8;
  v10[1] = v5;
  _DWORD v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<FSModuleICE>::execute_wrapped<FSModuleICE::wake(dispatch::group_session)::$_0>(FSModuleICE::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<FSModuleICE::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<FSModuleICE::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t FSModuleICE::requestFSSync_sync(unsigned int,BOOL)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 24);
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void FSModuleICE::restartSyncTimer_sync(FSModuleICE *this)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 121);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 121));
    *((void *)this + 121) = 0;
  }
  uint64_t v3 = capabilities::abs::fileSystemFlushInterval((capabilities::abs *)v2);
  xpc_object_t v4 = *((void *)this + 11);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 134217984;
    uint64_t v17 = v3;
    _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Automatic sync interval set to %llu seconds", buf, 0xCu);
  }
  if (v3)
  {
    uint64_t v5 = 1000000000 * v3;
    xpc_object_t v6 = dispatch_source_create(MEMORY[0x1E4F14490], 2uLL, 0, *((dispatch_queue_t *)this + 17));
    *((void *)this + 121) = v6;
    dispatch_time_t v7 = dispatch_time(0x8000000000000000, v5);
    dispatch_source_set_timer(v6, v7, v5, 0x45D964B800uLL);
    xpc_object_t v8 = (std::__shared_weak_count *)*((void *)this + 16);
    if (!v8 || (uint64_t v9 = *((void *)this + 15), (v10 = std::__shared_weak_count::lock(v8)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    size_t v11 = v10;
    p_shared_weak_owners = &v10->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    xpc_object_t v13 = *((void *)this + 121);
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 1174405120;
    handler[2] = ___ZN11FSModuleICE21restartSyncTimer_syncEv_block_invoke;
    handler[3] = &__block_descriptor_tmp_94;
    handler[4] = this;
    handler[5] = v9;
    uint64_t v15 = v11;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    dispatch_source_set_event_handler(v13, handler);
    dispatch_activate(*((dispatch_object_t *)this + 121));
    if (v15) {
      std::__shared_weak_count::__release_weak(v15);
    }
    std::__shared_weak_count::__release_weak(v11);
  }
}

void FSModuleICE::cancelSyncTimer_sync(FSModuleICE *this)
{
  uint64_t v2 = *((void *)this + 121);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 121));
    *((void *)this + 121) = 0;
  }
}

void FSModuleICE::submitMetric_sync(FSModuleICE *this, BOOL a2)
{
  int v2 = *((_DWORD *)this + 284);
  if (!v2) {
    return;
  }
  BOOL v5 = (v2 != 5 || *((unsigned char *)this + 964) == 0) && a2;
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  uint64_t v7 = MEMORY[0x1E4F14590];
  if (v6 || (xpc_object_t v6 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v6) == v7)
    {
      xpc_retain(v6);
      xpc_object_t v8 = v6;
    }
    else
    {
      xpc_object_t v8 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t v6 = 0;
  }
  xpc_release(v6);
  xpc_object_t v9 = xpc_int64_create(*((unsigned int *)this + 284));
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E4F4C530], v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  uint64_t SystemTime = TelephonyUtilGetSystemTime();
  xpc_object_t v12 = xpc_uint64_create(SystemTime - *((void *)this + 143));
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E4F4C788], v12);
  xpc_object_t v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  xpc_object_t v14 = xpc_BOOL_create(v5);
  if (!v14) {
    xpc_object_t v14 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E4F4C658], v14);
  xpc_object_t v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  xpc_object_t v16 = xpc_BOOL_create(*((unsigned char *)this + 1152) == 0);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E4F4CD30], v16);
  xpc_object_t v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  xpc_object_t v18 = xpc_dictionary_create(0, 0, 0);
  if (v18 || (xpc_object_t v18 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v18) == v7)
    {
      xpc_retain(v18);
      xpc_object_t v19 = v18;
    }
    else
    {
      xpc_object_t v19 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v19 = xpc_null_create();
    xpc_object_t v18 = 0;
  }
  xpc_release(v18);
  xpc_object_t v20 = xpc_string_create((const char *)*MEMORY[0x1E4F4C4C0]);
  if (!v20) {
    xpc_object_t v20 = xpc_null_create();
  }
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E4F4C540], v20);
  xpc_object_t v21 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v21);
  xpc_object_t v22 = xpc_string_create((const char *)*MEMORY[0x1E4F4C480]);
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E4F4C3C8], v22);
  xpc_object_t v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  xpc_object_t v24 = xpc_string_create((const char *)*MEMORY[0x1E4F4C660]);
  if (!v24) {
    xpc_object_t v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E4F4C548], v24);
  xpc_object_t v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  if (v8)
  {
    xpc_retain(v8);
    xpc_object_t v26 = v8;
  }
  else
  {
    xpc_object_t v26 = xpc_null_create();
  }
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E4F4CB40], v26);
  xpc_object_t v27 = xpc_null_create();
  xpc_release(v26);
  xpc_release(v27);
  xpc_object_t v28 = xpc_dictionary_create(0, 0, 0);
  if (v28 || (xpc_object_t v28 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v28) == v7)
    {
      xpc_retain(v28);
      xpc_object_t v29 = v28;
    }
    else
    {
      xpc_object_t v29 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v29 = xpc_null_create();
    xpc_object_t v28 = 0;
  }
  xpc_release(v28);
  xpc_object_t v30 = xpc_string_create((const char *)*MEMORY[0x1E4F4C158]);
  if (!v30) {
    xpc_object_t v30 = xpc_null_create();
  }
  xpc_dictionary_set_value(v29, (const char *)*MEMORY[0x1E4F4C190], v30);
  xpc_object_t v31 = xpc_null_create();
  xpc_release(v30);
  xpc_release(v31);
  if (v19)
  {
    xpc_retain(v19);
    xpc_object_t v32 = v19;
  }
  else
  {
    xpc_object_t v32 = xpc_null_create();
  }
  xpc_dictionary_set_value(v29, (const char *)*MEMORY[0x1E4F4C188], v32);
  xpc_object_t v33 = xpc_null_create();
  xpc_release(v32);
  xpc_release(v33);
  uint64_t v34 = (const void *)*MEMORY[0x1E4F4C738];
  size_t v35 = strlen((const char *)*MEMORY[0x1E4F4C738]);
  if (v35 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v36 = (void *)v35;
  if (v35 >= 0x17)
  {
    uint64_t v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17) {
      uint64_t v38 = v35 | 7;
    }
    uint64_t v39 = v38 + 1;
    uint64_t v37 = (void **)operator new(v38 + 1);
    __dst[1] = v36;
    unint64_t v43 = v39 | 0x8000000000000000;
    __dst[0] = v37;
LABEL_56:
    memmove(v37, v34, (size_t)v36);
    *((unsigned char *)v36 + (void)v37) = 0;
    xpc_object_t object = v29;
    if (v29) {
      goto LABEL_52;
    }
LABEL_57:
    xpc_object_t object = xpc_null_create();
    goto LABEL_58;
  }
  HIBYTE(v43) = v35;
  uint64_t v37 = __dst;
  if (v35) {
    goto LABEL_56;
  }
  LOBYTE(__dst[0]) = 0;
  xpc_object_t object = v29;
  if (!v29) {
    goto LABEL_57;
  }
LABEL_52:
  xpc_retain(v29);
LABEL_58:
  size_t v40 = 0;
  Service::runCommand((uint64_t)this, (uint64_t)__dst, &object, &v40);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(v43) < 0) {
    operator delete(__dst[0]);
  }
  *((_DWORD *)this + 284) = 0;
  xpc_release(v29);
  xpc_release(v19);
  xpc_release(v8);
}

void sub_1C5AA5330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  xpc_release(object);
  if (a17 < 0) {
    operator delete(__p);
  }
  xpc_release(v19);
  xpc_release(v18);
  xpc_release(v17);
  _Unwind_Resume(a1);
}

void FSModuleICE::resetBaseband_sync(FSModuleICE *a1, uint64_t a2)
{
  FSModuleICE::execPendingResponses_sync(a1, 0);
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v4) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v4);
      xpc_object_t v5 = v4;
    }
    else
    {
      xpc_object_t v5 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v4 = 0;
  }
  xpc_release(v4);
  xpc_object_t v6 = xpc_string_create((const char *)*MEMORY[0x1E4F4C6E8]);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4F4C690], v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  xpc_object_t v8 = xpc_string_create((const char *)*MEMORY[0x1E4F4D240]);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4F4CA38], v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  if (*(char *)(a2 + 23) >= 0) {
    xpc_object_t v10 = (const char *)a2;
  }
  else {
    xpc_object_t v10 = *(const char **)a2;
  }
  xpc_object_t v11 = xpc_string_create(v10);
  if (!v11) {
    xpc_object_t v11 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4F4C8F0], v11);
  xpc_object_t v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  xpc_object_t v13 = (const void *)*MEMORY[0x1E4F4C638];
  size_t v14 = strlen((const char *)*MEMORY[0x1E4F4C638]);
  if (v14 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v15 = (void *)v14;
  if (v14 >= 0x17)
  {
    uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v17 = v14 | 7;
    }
    uint64_t v18 = v17 + 1;
    xpc_object_t v16 = (void **)operator new(v17 + 1);
    __dst[1] = v15;
    unint64_t v22 = v18 | 0x8000000000000000;
    __dst[0] = v16;
LABEL_24:
    memmove(v16, v13, (size_t)v15);
    *((unsigned char *)v15 + (void)v16) = 0;
    xpc_object_t object = v5;
    if (v5) {
      goto LABEL_20;
    }
    goto LABEL_25;
  }
  HIBYTE(v22) = v14;
  xpc_object_t v16 = __dst;
  if (v14) {
    goto LABEL_24;
  }
  LOBYTE(__dst[0]) = 0;
  xpc_object_t object = v5;
  if (v5)
  {
LABEL_20:
    xpc_retain(v5);
    goto LABEL_26;
  }
LABEL_25:
  xpc_object_t object = xpc_null_create();
LABEL_26:
  xpc_object_t v19 = 0;
  Service::runCommand((uint64_t)a1, (uint64_t)__dst, &object, &v19);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(v22) < 0) {
    operator delete(__dst[0]);
  }
  xpc_release(v5);
}

void sub_1C5AA5728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  xpc_release(object);
  if (a17 < 0) {
    operator delete(__p);
  }
  xpc_release(v17);
  _Unwind_Resume(a1);
}

uint64_t FSModuleICE::initKTLOptions_sync(FSModuleICE *this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  *((void *)this + 82) = (char *)this + 928;
  uint64_t v2 = capabilities::abs::fileSystemFlushTimeout(this);
  uint64_t v3 = *((void *)this + 11);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 134217984;
    uint64_t v7 = v2;
    _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I NVMTimeout = %lld sec", (uint8_t *)&v6, 0xCu);
  }
  int v4 = KTLInitOptions();
  uint64_t result = 0;
  if (v4) {
    return KTLOpenChannel();
  }
  return result;
}

uint64_t ctu::Loggable<FSModuleICE,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<FSModuleICE,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (const char *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 16))();
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<FSModuleICE,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<FSModuleICE,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F2108F18;
  MEMORY[0x1C87940C0](a1 + 1);
  return a1;
}

void ctu::Loggable<FSModuleICE,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F2108F18;
  MEMORY[0x1C87940C0](a1 + 1);

  operator delete(a1);
}

void ctu::Loggable<FSModuleICE,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1C5AA5B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C5AA5B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<FSModuleICE>::shared_ptr[abi:ne180100]<FSModuleICE,std::shared_ptr<FSModuleICE> ctu::SharedSynchronizable<FSModuleICE>::make_shared_ptr<FSModuleICE>(FSModuleICE*)::{lambda(FSModuleICE*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2108F58;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 120) = a2;
      *(void *)(a2 + 128) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 120) = a2;
  *(void *)(a2 + 128) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C5AA5C90(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<FSModuleICE> ctu::SharedSynchronizable<FSModuleICE>::make_shared_ptr<FSModuleICE>(FSModuleICE*)::{lambda(FSModuleICE*)#1}::operator() const(FSModuleICE*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C5AA5CB8(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<FSModuleICE *,std::shared_ptr<FSModuleICE> ctu::SharedSynchronizable<FSModuleICE>::make_shared_ptr<FSModuleICE>(FSModuleICE*)::{lambda(FSModuleICE *)#1},std::allocator<FSModuleICE>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<FSModuleICE *,std::shared_ptr<FSModuleICE> ctu::SharedSynchronizable<FSModuleICE>::make_shared_ptr<FSModuleICE>(FSModuleICE*)::{lambda(FSModuleICE *)#1},std::allocator<FSModuleICE>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<FSModuleICE *,std::shared_ptr<FSModuleICE> ctu::SharedSynchronizable<FSModuleICE>::make_shared_ptr<FSModuleICE>(FSModuleICE*)::{lambda(FSModuleICE *)#1},std::allocator<FSModuleICE>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI11FSModuleICEE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI11FSModuleICEE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI11FSModuleICEE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI11FSModuleICEE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

uint64_t std::shared_ptr<FSModuleICE> ctu::SharedSynchronizable<FSModuleICE>::make_shared_ptr<FSModuleICE>(FSModuleICE*)::{lambda(FSModuleICE*)#1}::operator() const(FSModuleICE*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::deque<std::tuple<unsigned int,BOOL>>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  unint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 512;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void ctu::SharedLoggable<FSModuleICE,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F2108F18;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t ___ZNK3ctu20SharedSynchronizableI11FSModuleICEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrIK11FSModuleICEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrIK11FSModuleICEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<FSModuleICE>::execute_wrapped<FSModuleICE::initialize(dispatch::group_session)::$_0>(FSModuleICE::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<FSModuleICE::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<FSModuleICE::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(FSModuleICE ***)a1;
  FSModuleICE::finishInitialization_sync(**(FSModuleICE ***)a1);
  operator delete(v2);
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    unint64_t v4 = (void *)a1;
  }
  else
  {
    unint64_t v4 = (void *)a1;
  }
  operator delete(v4);
}

void sub_1C5AA60D8(_Unwind_Exception *a1)
{
  operator delete(v2);
  unint64_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<FSModuleICE>::execute_wrapped<FSModuleICE::sleep(dispatch::group_session)::$_0>(FSModuleICE::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<FSModuleICE::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<FSModuleICE::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v4 = **a1;
  unint64_t v3 = (*a1)[1];
  *(unsigned char *)(v4 + 962) = 1;
  if (v3)
  {
    dispatch_group_leave(v3);
    unint64_t v5 = v2[1];
    if (v5) {
      dispatch_release(v5);
    }
  }
  operator delete(v2);
  uint64_t v6 = (std::__shared_weak_count *)a1[2];
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v7 = a1;
  }
  else
  {
    uint64_t v7 = a1;
  }
  operator delete(v7);
}

void dispatch::async<void ctu::SharedSynchronizable<FSModuleICE>::execute_wrapped<FSModuleICE::wake(dispatch::group_session)::$_0>(FSModuleICE::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<FSModuleICE::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<FSModuleICE::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *(FSModuleICE ***)a1;
  unint64_t v3 = **(FSModuleICE ***)a1;
  *((unsigned char *)v3 + 962) = 0;
  FSModuleICE::runDeferred_sync(v3);
  uint64_t v4 = v2[1];
  if (v4)
  {
    dispatch_group_leave(v4);
    unint64_t v5 = v2[1];
    if (v5) {
      dispatch_release(v5);
    }
  }
  operator delete(v2);
  uint64_t v6 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v7 = a1;
  }
  else
  {
    uint64_t v7 = a1;
  }
  operator delete(v7);
}

void sub_1C5AA62DC(_Unwind_Exception *a1)
{
  uint64_t v4 = v2[1];
  if (v4)
  {
    dispatch_group_leave(v4);
    unint64_t v5 = v2[1];
    if (v5) {
      dispatch_release(v5);
    }
  }
  operator delete(v2);
  uint64_t v6 = (std::__shared_weak_count *)v1[2];
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<FSModuleICE::requestFSSync_sync(unsigned int,BOOL)::$_0>(dispatch_group_s *,dispatch_queue_s *,FSModuleICE::requestFSSync_sync(unsigned int,BOOL)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    uint64_t v3 = *__p;
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      unint64_t v5 = v4;
      if (__p[1])
      {
        ++*(_DWORD *)(v3 + 1024);
        v8[0] = MEMORY[0x1E4F143A8];
        v8[1] = 0x40000000;
        uint64_t v8[2] = ___ZZN11FSModuleICE18requestFSSync_syncEjbENK3__0clEv_block_invoke;
        v8[3] = &__block_descriptor_tmp_126;
        v8[4] = v3;
        int v9 = *((_DWORD *)__p + 9);
        char v10 = *((unsigned char *)__p + 32);
        ctu::SharedSynchronizable<FSModuleICE>::execute_wrapped((uint64_t *)(v3 + 120), (uint64_t)v8);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  uint64_t v6 = __p[3];
  if (v6) {
    dispatch_release(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)__p[2];
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  operator delete(__p);
}

void ___ZZN11FSModuleICE18requestFSSync_syncEjbENK3__0clEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  *(_DWORD *)(v2 + 1136) = *(_DWORD *)(a1 + 40);
  *(void *)(v2 + 1144) = TelephonyUtilGetSystemTime();
  int v3 = *(unsigned __int8 *)(a1 + 44);

  FSModuleICE::singleFlushOperation_sync((FSModuleICE *)v2, v3);
}

uint64_t __cxx_global_var_init_99()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

uint64_t __cxx_global_var_init_100()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

uint64_t __cxx_global_var_init_101()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

void metric::sendCoreAnalyticsEvent(const void **a1, xpc_object_t *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int v2 = *((char *)a1 + 23);
  if (v2 >= 0) {
    size_t v3 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v3 = (size_t)a1[1];
  }
  unint64_t v4 = v3 + 20;
  memset(__p, 170, 24);
  if (v3 + 20 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v4 >= 0x17)
  {
    uint64_t v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v8 = v4 | 7;
    }
    uint64_t v9 = v8 + 1;
    char v10 = (char *)operator new(v8 + 1);
    __p[1] = (void *)(v3 + 20);
    std::string __p[2] = (void *)(v9 | 0x8000000000000000);
    __p[0] = v10;
    uint64_t v7 = v10 + 20;
    *((_DWORD *)v10 + 4) = 779710063;
    *(_OWORD *)char v10 = *(_OWORD *)"com.apple.Telephony.";
  }
  else
  {
    HIDWORD(__p[2]) = 0;
    HIBYTE(__p[2]) = v3 + 20;
    uint64_t v7 = (char *)&__p[2] + 4;
    LODWORD(__p[2]) = 779710063;
    *(_OWORD *)std::string __p = *(_OWORD *)"com.apple.Telephony.";
    if (!v3) {
      goto LABEL_15;
    }
  }
  if (v2 >= 0) {
    xpc_object_t v11 = a1;
  }
  else {
    xpc_object_t v11 = *a1;
  }
  memmove(v7, v11, v3);
LABEL_15:
  v7[v3] = 0;
  xpc_object_t v12 = GetOsLogContext()[1];
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    xpc_object_t v13 = __p;
    if (SHIBYTE(__p[2]) < 0) {
      xpc_object_t v13 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v17 = v13;
    _os_log_impl(&dword_1C59C6000, v12, OS_LOG_TYPE_DEFAULT, "Sending CoreAnalytics event: %s", buf, 0xCu);
  }
  xpc_object_t object = *a2;
  if (*a2) {
    xpc_retain(*a2);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  analytics_send_event_lazy();
  xpc_release(object);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C5AA67C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

xpc_object_t ___ZN6metric22sendCoreAnalyticsEventENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3xpc4dictE_block_invoke(uint64_t a1)
{
  xpc_object_t v1 = *(xpc_object_t *)(a1 + 32);
  if (v1) {
    xpc_retain(*(xpc_object_t *)(a1 + 32));
  }
  else {
    xpc_object_t v1 = xpc_null_create();
  }
  xpc_object_t v2 = xpc_null_create();
  xpc_release(v2);
  return v1;
}

void sub_1C5AA6864(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  size_t v3 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v3;
  if (v3) {
    return xpc_retain(v3);
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c15_ZTSN3xpc4dictE(uint64_t a1)
{
  *(void *)(a1 + 32) = 0;
}

void BluetoothManager::create(BluetoothManager *this@<X0>, BluetoothManager **a2@<X8>)
{
  unint64_t v5 = (BluetoothManager *)operator new(0x40uLL);
  BluetoothManager::BluetoothManager(v5, (const char *)this);
  uint64_t v6 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = &v6->__shared_owners_;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F21090E0;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  *(void *)std::string buf = 0;
  uint64_t v8 = (std::__shared_weak_count *)*((void *)v5 + 2);
  if (!v8)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v5 + 1) = v5;
    *((void *)v5 + 2) = v6;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v8->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v5 + 1) = v5;
    *((void *)v5 + 2) = v6;
    std::__shared_weak_count::__release_weak(v8);
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_6:
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_7:
  if (*(void *)buf)
  {
    BluetoothManager::~BluetoothManager(*(BluetoothManager **)buf);
    operator delete(v9);
  }
  if (v5 && BluetoothManager::init(v5))
  {
    *a2 = v5;
    a2[1] = (BluetoothManager *)v6;
    return;
  }
  char v10 = GetOsLogContext()[1];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_ERROR, "Failed to create Bluetooth Manager!", buf, 2u);
    *a2 = 0;
    a2[1] = 0;
    xpc_object_t v11 = v6;
    if (!v6) {
      return;
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    xpc_object_t v11 = v6;
    if (!v6) {
      return;
    }
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_1C5AA6AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C5AA6B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C5AA6B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unique_ptr<BluetoothManager>::~unique_ptr[abi:ne180100]((BluetoothManager **)va);
  _Unwind_Resume(a1);
}

void sub_1C5AA6B2C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL BluetoothManager::init(BluetoothManager *this)
{
  *((unsigned char *)this + 24) = 1;
  id v2 = objc_alloc_init(MEMORY[0x1E4F1BD30]);
  *((void *)this + 4) = v2;
  uint64_t v4 = *((void *)this + 1);
  size_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    id v5 = (id)*((void *)this + 4);
    if (v5) {
      goto LABEL_3;
    }
  }
  else
  {
    id v5 = v2;
    if (v2)
    {
LABEL_3:
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 3321888768;
      _DWORD v12[2] = ___ZN16BluetoothManager4initEv_block_invoke;
      v12[3] = &__block_descriptor_56_e8_40c41_ZTSNSt3__18weak_ptrI16BluetoothManagerEE_e5_v8__0l;
      v12[4] = this;
      void v12[5] = v4;
      xpc_object_t v13 = v3;
      uint64_t v6 = v5;
      if (v3)
      {
        atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v6 = (void *)*((void *)this + 4);
      }
      [v6 setBluetoothStateChangedHandler:v12];
      uint64_t v7 = (void *)*((void *)this + 4);
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 3321888768;
      _DWORD v10[2] = ___ZN16BluetoothManager4initEv_block_invoke_3;
      v10[3] = &__block_descriptor_56_e8_40c41_ZTSNSt3__18weak_ptrI16BluetoothManagerEE_e17_v16__0__NSError_8l;
      void v10[4] = this;
      void v10[5] = v4;
      xpc_object_t v11 = v3;
      if (v3) {
        atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      [v7 activateWithCompletion:v10];
      if (v11) {
        std::__shared_weak_count::__release_weak(v11);
      }
      if (v13)
      {
        std::__shared_weak_count::__release_weak(v13);
        if (!v3) {
          return v5 != 0;
        }
        goto LABEL_15;
      }
      goto LABEL_14;
    }
  }
  uint64_t v8 = *(NSObject **)this;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_ERROR, "Failed to create BluetoothManager interface", buf, 2u);
    if (!v3) {
      return v5 != 0;
    }
    goto LABEL_15;
  }
LABEL_14:
  if (v3) {
LABEL_15:
  }
    std::__shared_weak_count::__release_weak(v3);
  return v5 != 0;
}

void sub_1C5AA6CFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    xpc_object_t v24 = a22;
    if (!a22)
    {
LABEL_3:
      if (!v22) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    xpc_object_t v24 = a22;
    if (!a22) {
      goto LABEL_3;
    }
  }
  std::__shared_weak_count::__release_weak(v24);
  if (!v22) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  std::__shared_weak_count::__release_weak(v22);
  _Unwind_Resume(exception_object);
}

void BluetoothManager::BluetoothManager(BluetoothManager *this, const char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
  p_dst = &__dst;
  if (v4) {
LABEL_8:
  }
    memcpy(p_dst, __s, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  uint64_t v9 = std::string::append(&__dst, ".", 1uLL);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  xpc_object_t v11 = std::string::append(&v15, "BluetoothManager", 0x10uLL);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  int64_t v17 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (v17 >= 0) {
    xpc_object_t v13 = __p;
  }
  else {
    xpc_object_t v13 = (void **)__p[0];
  }
  ctu::OsLogLogger::OsLogLogger(this, "com.apple.telephony.abm", (const char *)v13);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_14;
    }
LABEL_17:
    operator delete(v15.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_15;
    }
LABEL_18:
    operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_15;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_17;
  }
LABEL_14:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_18;
  }
LABEL_15:
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 5) = 0;
}

void sub_1C5AA6ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void BluetoothManager::~BluetoothManager(BluetoothManager *this)
{
  uint64_t v2 = *((void *)this + 5);
  for (uint64_t i = *((void *)this + 6); i != v2; i -= 16)
  {
    size_t v4 = *(NSObject **)(i - 8);
    if (v4) {
      dispatch_release(v4);
    }
    std::string::size_type v5 = *(const void **)(i - 16);
    if (v5) {
      _Block_release(v5);
    }
  }
  *((void *)this + 6) = v2;
  [*((id *)this + 4) invalidate];
  uint64_t v6 = *((void *)this + 5);
  if (v6)
  {
    uint64_t v7 = *((void *)this + 6);
    uint64_t v8 = (void *)*((void *)this + 5);
    if (v7 != v6)
    {
      do
      {
        uint64_t v9 = *(NSObject **)(v7 - 8);
        if (v9) {
          dispatch_release(v9);
        }
        long long v10 = *(const void **)(v7 - 16);
        if (v10) {
          _Block_release(v10);
        }
        v7 -= 16;
      }
      while (v7 != v6);
      uint64_t v8 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v6;
    operator delete(v8);
  }
  xpc_object_t v11 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }

  JUMPOUT(0x1C8794100);
}

void ___ZN16BluetoothManager4initEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    size_t v3 = (os_log_t *)a1[4];
    size_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      std::string::size_type v5 = v4;
      uint64_t v6 = a1[5];
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
      }
      if (v6)
      {
        uint64_t v7 = *v3;
        if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t v8 = 0;
          _os_log_debug_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_DEBUG, "#D BluetoothManager Power Change Event", v8, 2u);
        }
        BluetoothManager::notifyClients((id *)v3);
      }
    }
  }
}

void BluetoothManager::notifyClients(id *this)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [this[4] bluetoothState];
  *((unsigned char *)this + 24) = v2 == 5;
  size_t v3 = *this;
  if (os_log_type_enabled((os_log_t)*this, OS_LOG_TYPE_DEFAULT))
  {
    size_t v4 = "Off";
    if (v2 == 5) {
      size_t v4 = "On";
    }
    LODWORD(v13) = 136315138;
    *(void *)((char *)&v13 + 4) = v4;
    _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Notifying BT Power: %s", (uint8_t *)&v13, 0xCu);
  }
  std::string::size_type v5 = (char *)this[5];
  uint64_t v6 = (char *)this[6];
  if (v5 != v6)
  {
    while (!*(void *)v5)
    {
      uint64_t v7 = 0;
      uint64_t v8 = *((void *)v5 + 1);
      if (v8) {
        goto LABEL_10;
      }
LABEL_11:
      char v9 = *((unsigned char *)this + 24);
      if (!v7)
      {
        xpc_object_t v11 = 0;
        *(void *)&long long v13 = MEMORY[0x1E4F143A8];
        *((void *)&v13 + 1) = 3321888768;
        size_t v14 = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1;
        std::string v15 = &__block_descriptor_41_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE_e5_v8__0l;
LABEL_17:
        long long v12 = 0;
        goto LABEL_18;
      }
      long long v10 = _Block_copy(v7);
      xpc_object_t v11 = v10;
      *(void *)&long long v13 = MEMORY[0x1E4F143A8];
      *((void *)&v13 + 1) = 3321888768;
      size_t v14 = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1;
      std::string v15 = &__block_descriptor_41_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE_e5_v8__0l;
      if (!v10) {
        goto LABEL_17;
      }
      long long v12 = _Block_copy(v10);
LABEL_18:
      long long aBlock = v12;
      char v17 = v9;
      dispatch_async(v8, &v13);
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (v11) {
        _Block_release(v11);
      }
      if (v8) {
        dispatch_release(v8);
      }
      if (v7) {
        _Block_release(v7);
      }
      v5 += 16;
      if (v5 == v6) {
        return;
      }
    }
    uint64_t v7 = _Block_copy(*(const void **)v5);
    uint64_t v8 = *((void *)v5 + 1);
    if (!v8) {
      goto LABEL_11;
    }
LABEL_10:
    dispatch_retain(v8);
    goto LABEL_11;
  }
}

void sub_1C5AA7330(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c41_ZTSNSt3__18weak_ptrI16BluetoothManagerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c41_ZTSNSt3__18weak_ptrI16BluetoothManagerEE(uint64_t a1)
{
  xpc_object_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN16BluetoothManager4initEv_block_invoke_3(void *a1, uint64_t a2)
{
  size_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      if (a2)
      {
        char v9 = *(NSObject **)v5;
        if (os_log_type_enabled(*(os_log_t *)v5, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)xpc_object_t v11 = 0;
          _os_log_error_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_ERROR, "Failed to activate BT Controller", v11, 2u);
        }
      }
      else
      {
        long long v10 = *(void (**)(void))([*(id *)(v5 + 32) bluetoothStateChangedHandler] + 16);
        v10();
      }
    }
  }
}

uint64_t BluetoothManager::getBTState(BluetoothManager *this)
{
  return *((unsigned __int8 *)this + 24);
}

void BluetoothManager::registerCallback(BluetoothManager *this, void **a2)
{
  size_t v4 = (void *)*((void *)this + 6);
  if ((unint64_t)v4 >= *((void *)this + 7))
  {
    uint64_t v7 = std::vector<dispatch::callback<void({block_pointer})(BOOL)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(BOOL)> const&>((void *)this + 5, (uint64_t)a2);
  }
  else
  {
    uint64_t v5 = *a2;
    if (*a2) {
      uint64_t v5 = _Block_copy(v5);
    }
    uint64_t v6 = a2[1];
    void *v4 = v5;
    v4[1] = v6;
    if (v6) {
      dispatch_retain(v6);
    }
    uint64_t v7 = v4 + 2;
  }
  *((void *)this + 6) = v7;

  BluetoothManager::notifyClients((id *)this);
}

BluetoothManager **std::unique_ptr<BluetoothManager>::~unique_ptr[abi:ne180100](BluetoothManager **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    BluetoothManager::~BluetoothManager(v2);
    operator delete(v3);
  }
  return a1;
}

void std::__shared_ptr_pointer<BluetoothManager *,std::shared_ptr<BluetoothManager>::__shared_ptr_default_delete<BluetoothManager,BluetoothManager>,std::allocator<BluetoothManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<BluetoothManager *,std::shared_ptr<BluetoothManager>::__shared_ptr_default_delete<BluetoothManager,BluetoothManager>,std::allocator<BluetoothManager>>::__on_zero_shared(uint64_t a1)
{
  xpc_object_t v1 = *(BluetoothManager **)(a1 + 24);
  if (v1)
  {
    BluetoothManager::~BluetoothManager(v1);
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<BluetoothManager *,std::shared_ptr<BluetoothManager>::__shared_ptr_default_delete<BluetoothManager,BluetoothManager>,std::allocator<BluetoothManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C5BC7EEFLL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C5BC7EEFLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C5BC7EEFLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C5BC7EEFLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void AnalyticsHelper::create(uint64_t *a1@<X8>)
{
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v3 = (AnalyticsHelper *)operator new(0x80uLL);
  AnalyticsHelper::AnalyticsHelper(v3);
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<AnalyticsHelper>::shared_ptr[abi:ne180100]<AnalyticsHelper,std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper*)#1},void>(a1, (uint64_t)v3);
  ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a1);
}

void sub_1C5AA76CC(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1C5AA76E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void AnalyticsHelper::AnalyticsHelper(AnalyticsHelper *this)
{
  *(void *)this = &unk_1F2109130;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v8, "com.apple.telephony.abm", "stats.analytics");
  GetABMLogServer(&v6);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v3 = dispatch_queue_create_with_target_V2("stats.analytics", initially_inactive, 0);
  dispatch_set_qos_class_floor(v3, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v3);
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    *((void *)this + 12) = 0;
    dispatch_release(v3);
  }
  else
  {
    *((void *)this + 12) = 0;
  }
  *(void *)this = &unk_1F2109200;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
  *((void *)this + 1) = &unk_1F2102CB8;
  size_t v4 = v7;
  *((void *)this + 7) = v6;
  *((void *)this + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v9);
  *(void *)this = &unk_1F2109290;
  uint64_t v5 = v7;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v8);
  *(void *)this = &unk_1F2109130;
  *((void *)this + 15) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 13) = (char *)this + 112;
}

void sub_1C5AA78D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a15);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a13);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v15);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  _Unwind_Resume(a1);
}

void sub_1C5AA7908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  _Unwind_Resume(a1);
}

const char *AnalyticsHelper::getName(AnalyticsHelper *this)
{
  return "stats.analytics";
}

void AnalyticsHelper::~AnalyticsHelper(char **this)
{
  *this = (char *)&unk_1F2109130;
  std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::destroy(this[14]);
  *this = (char *)&unk_1F2109200;
  MEMORY[0x1C87940C0](this + 1);
  uint64_t v2 = this[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = this[11];
  if (v3) {
    dispatch_release(v3);
  }
  size_t v4 = (std::__shared_weak_count *)this[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *this = (char *)&unk_1F2109130;
  std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::destroy(this[14]);
  *this = (char *)&unk_1F2109200;
  MEMORY[0x1C87940C0](this + 1);
  uint64_t v2 = this[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = this[11];
  if (v3) {
    dispatch_release(v3);
  }
  size_t v4 = (std::__shared_weak_count *)this[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *this = (char *)&unk_1F2109130;
  std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::destroy(this[14]);
  *this = (char *)&unk_1F2109200;
  MEMORY[0x1C87940C0](this + 1);
  uint64_t v2 = this[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = this[11];
  if (v3) {
    dispatch_release(v3);
  }
  size_t v4 = (std::__shared_weak_count *)this[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(this);
}

void AnalyticsHelper::describeAnalyticsCache(AnalyticsHelper *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 272) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)(a2 + 240) = v3;
  *(_OWORD *)(a2 + 256) = v3;
  *(_OWORD *)(a2 + 208) = v3;
  *(_OWORD *)(a2 + 224) = v3;
  *(_OWORD *)(a2 + 176) = v3;
  *(_OWORD *)(a2 + 192) = v3;
  *(_OWORD *)(a2 + 144) = v3;
  *(_OWORD *)(a2 + 160) = v3;
  *(_OWORD *)(a2 + 112) = v3;
  *(_OWORD *)(a2 + 128) = v3;
  *(_OWORD *)(a2 + 80) = v3;
  *(_OWORD *)(a2 + 96) = v3;
  *(_OWORD *)(a2 + 48) = v3;
  *(_OWORD *)(a2 + 64) = v3;
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v3;
  size_t v4 = (void *)(a2 + 16);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"** analyticsData **\n", 20);
  uint64_t v5 = (void *)*((void *)this + 13);
  xpc_object_t v30 = (char *)this + 112;
  if (v5 != (void *)((char *)this + 112))
  {
    while (1)
    {
      uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"[", 1);
      uint64_t v7 = (const char *)(v5 + 4);
      if (*((char *)v5 + 55) < 0) {
        uint64_t v7 = *(const char **)v7;
      }
      size_t v8 = strlen(v7);
      char v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"] = \n", 5);
      long long v10 = (void *)v5[7];
      if (v10 != v5 + 8) {
        break;
      }
LABEL_7:
      xpc_object_t v11 = (char *)v5[1];
      if (v11)
      {
        do
        {
          long long v12 = v11;
          xpc_object_t v11 = *(char **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          long long v12 = (char *)v5[2];
          BOOL v29 = *(void *)v12 == (void)v5;
          uint64_t v5 = v12;
        }
        while (!v29);
      }
      uint64_t v5 = v12;
      if (v12 == v30) {
        return;
      }
    }
    while (1)
    {
      long long v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<<<", 3);
      size_t v14 = (const char *)(v10 + 4);
      if (*((char *)v10 + 55) < 0) {
        size_t v14 = *(const char **)v14;
      }
      size_t v15 = strlen(v14);
      xpc_object_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
      char v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)">>> = ", 6);
      uint64_t v18 = (char *)MEMORY[0x1C8795DE0](v10[7]);
      memset(__dst, 170, sizeof(__dst));
      size_t v19 = strlen(v18);
      if (v19 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      xpc_object_t v20 = (unsigned char *)v19;
      if (v19 >= 0x17) {
        break;
      }
      HIBYTE(__dst[2]) = v19;
      xpc_object_t v21 = __dst;
      if (v19) {
        goto LABEL_20;
      }
LABEL_21:
      v20[(void)v21] = 0;
      free(v18);
      if (SHIBYTE(__dst[2]) >= 0) {
        xpc_object_t v24 = (const char *)__dst;
      }
      else {
        xpc_object_t v24 = (const char *)__dst[0];
      }
      size_t v25 = strlen(v24);
      xpc_object_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v24, v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"\n", 1);
      if (SHIBYTE(__dst[2]) < 0)
      {
        operator delete(__dst[0]);
        xpc_object_t v27 = (void *)v10[1];
        if (v27)
        {
          do
          {
LABEL_28:
            xpc_object_t v28 = v27;
            xpc_object_t v27 = (void *)*v27;
          }
          while (v27);
          goto LABEL_10;
        }
      }
      else
      {
        xpc_object_t v27 = (void *)v10[1];
        if (v27) {
          goto LABEL_28;
        }
      }
      do
      {
        xpc_object_t v28 = (void *)v10[2];
        BOOL v29 = *v28 == (void)v10;
        long long v10 = v28;
      }
      while (!v29);
LABEL_10:
      long long v10 = v28;
      if (v28 == v5 + 8) {
        goto LABEL_7;
      }
    }
    uint64_t v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17) {
      uint64_t v22 = v19 | 7;
    }
    uint64_t v23 = v22 + 1;
    xpc_object_t v21 = (void **)operator new(v22 + 1);
    __dst[1] = v20;
    void __dst[2] = (void *)(v23 | 0x8000000000000000);
    __dst[0] = v21;
LABEL_20:
    memcpy(v21, v18, (size_t)v20);
    goto LABEL_21;
  }
}

void sub_1C5AA7DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_1C5AA7DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_1C5AA7DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_1C5AA7E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_1C5AA7E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(a10);
    _Unwind_Resume(a1);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(a10);
  _Unwind_Resume(a1);
}

void AnalyticsHelper::updateData(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v203 = *MEMORY[0x1E4F143B8];
  memset(&v187, 170, sizeof(v187));
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C3C8]);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)&v187, (xpc *)object, (const object *)"", v5);
  xpc_release(object[0]);
  memset(__p, 170, sizeof(__p));
  xpc_object_t v6 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C548]);
  object[0] = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    object[0] = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)__p, (xpc *)object, (const object *)"None", v7);
  xpc_release(object[0]);
  std::string::size_type size = HIBYTE(v187.__r_.__value_.__r.__words[2]);
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v187.__r_.__value_.__l.__size_;
  }
  if (!size || (char v9 = (void *)*MEMORY[0x1E4F4CB40], !xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4CB40])))
  {
    long long v12 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      goto LABEL_342;
    }
    long long v13 = (char *)MEMORY[0x1C8795DE0](*a2);
    memset(object, 170, sizeof(object));
    size_t v14 = strlen(v13);
    if (v14 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v15 = (void *)v14;
    if (v14 >= 0x17)
    {
      uint64_t v94 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17) {
        uint64_t v94 = v14 | 7;
      }
      uint64_t v95 = v94 + 1;
      xpc_object_t v16 = operator new(v94 + 1);
      object[1] = v15;
      xpc_object_t object[2] = (xpc_object_t)(v95 | 0x8000000000000000);
      object[0] = v16;
    }
    else
    {
      HIBYTE(object[2]) = v14;
      xpc_object_t v16 = object;
      if (!v14) {
        goto LABEL_191;
      }
    }
    memcpy(v16, v13, (size_t)v15);
LABEL_191:
    *((unsigned char *)v15 + (void)v16) = 0;
    free(v13);
    xpc_object_t v96 = object;
    if (SHIBYTE(object[2]) < 0) {
      xpc_object_t v96 = (xpc_object_t *)object[0];
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v96;
    _os_log_error_impl(&dword_1C59C6000, v12, OS_LOG_TYPE_ERROR, "Input error: Failed to update AnalyticsData with %s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(object[2]) < 0) {
      operator delete(object[0]);
    }
    goto LABEL_342;
  }
  xpc_object_t v10 = xpc_dictionary_create(0, 0, 0);
  uint64_t v11 = MEMORY[0x1E4F14590];
  if (v10 || (xpc_object_t v10 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v10) == v11)
    {
      xpc_retain(v10);
      xpc_object_t xdict = v10;
    }
    else
    {
      xpc_object_t xdict = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t xdict = xpc_null_create();
    xpc_object_t v10 = 0;
  }
  uint64_t v180 = a1;
  xpc_release(v10);
  *((void *)&buf + 1) = 0;
  uint64_t v202 = 0;
  *(void *)&long long buf = (char *)&buf + 8;
  uint64_t v177 = (uint64_t **)(a1 + 104);
  char v17 = std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>(a1 + 104, (const void **)&v187.__r_.__value_.__l.__data_);
  xpc_object_t v178 = (uint64_t *)(a1 + 112);
  if ((uint64_t *)(a1 + 112) == v17)
  {
LABEL_59:
    xpc_object_t v38 = xpc_dictionary_get_value(xdict, "ReportProcessStatus");
    goto LABEL_60;
  }
  v176 = v9;
  if (&buf == (long long *)(v17 + 7) || (uint64_t v18 = (uint64_t *)v17[7], v19 = v17 + 8, v18 == v17 + 8))
  {
    uint64_t v11 = MEMORY[0x1E4F14590];
    goto LABEL_59;
  }
  while (2)
  {
    memset(object, 170, sizeof(object));
    std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__construct_node<std::pair<std::string const,xpc::dict> const&>(object, (uint64_t)&buf, (uint64_t)(v18 + 4));
    xpc_object_t v20 = (uint64_t *)object[0];
    xpc_object_t v21 = (uint64_t *)*((void *)&buf + 1);
    uint64_t v22 = (uint64_t **)&buf + 1;
    uint64_t v23 = (uint64_t **)&buf + 1;
    if (!*((void *)&buf + 1)) {
      goto LABEL_50;
    }
    int v24 = *((char *)object[0] + 55);
    if (v24 >= 0) {
      size_t v25 = (char *)object[0] + 32;
    }
    else {
      size_t v25 = (char *)*((void *)object[0] + 4);
    }
    if (v24 >= 0) {
      unint64_t v26 = *((unsigned __int8 *)object[0] + 55);
    }
    else {
      unint64_t v26 = *((void *)object[0] + 5);
    }
    do
    {
      while (1)
      {
        uint64_t v22 = (uint64_t **)v21;
        uint64_t v29 = v21[4];
        xpc_object_t v27 = v21 + 4;
        xpc_object_t v28 = (void *)v29;
        int v30 = *((char *)v27 + 23);
        xpc_object_t v31 = v30 >= 0 ? v27 : v28;
        unint64_t v32 = v30 >= 0 ? *((unsigned __int8 *)v27 + 23) : v27[1];
        size_t v33 = v32 >= v26 ? v26 : v32;
        int v34 = memcmp(v25, v31, v33);
        if (v34) {
          break;
        }
        if (v26 >= v32) {
          goto LABEL_48;
        }
LABEL_34:
        xpc_object_t v21 = *v22;
        uint64_t v23 = v22;
        if (!*v22) {
          goto LABEL_50;
        }
      }
      if (v34 < 0) {
        goto LABEL_34;
      }
LABEL_48:
      xpc_object_t v21 = v22[1];
    }
    while (v21);
    uint64_t v23 = v22 + 1;
LABEL_50:
    *xpc_object_t v20 = 0;
    v20[1] = 0;
    unint64_t v20[2] = (uint64_t)v22;
    void *v23 = v20;
    if (*(void *)buf)
    {
      *(void *)&long long buf = *(void *)buf;
      xpc_object_t v20 = *v23;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&buf + 1), v20);
    ++v202;
    size_t v35 = (uint64_t *)v18[1];
    if (v35)
    {
      do
      {
        uint64_t v36 = v35;
        size_t v35 = (uint64_t *)*v35;
      }
      while (v35);
    }
    else
    {
      do
      {
        uint64_t v36 = (uint64_t *)v18[2];
        BOOL v37 = *v36 == (void)v18;
        uint64_t v18 = v36;
      }
      while (!v37);
    }
    uint64_t v18 = v36;
    if (v36 != v19) {
      continue;
    }
    break;
  }
  unint64_t v43 = (char *)*((void *)&buf + 1);
  HIBYTE(object[2]) = 9;
  strcpy((char *)object, "EventInfo");
  char v9 = v176;
  uint64_t v11 = MEMORY[0x1E4F14590];
  if (!*((void *)&buf + 1)) {
    goto LABEL_59;
  }
  size_t v44 = (char *)&buf + 8;
  while (2)
  {
    while (2)
    {
      int v45 = v43[55];
      if (v45 >= 0) {
        dispatch_object_t v46 = v43 + 32;
      }
      else {
        dispatch_object_t v46 = (const void *)*((void *)v43 + 4);
      }
      if (v45 >= 0) {
        unint64_t v47 = v43[55];
      }
      else {
        unint64_t v47 = *((void *)v43 + 5);
      }
      if (v47 >= 9) {
        size_t v48 = 9;
      }
      else {
        size_t v48 = v47;
      }
      int v49 = memcmp(v46, object, v48);
      if (v49)
      {
        if ((v49 & 0x80000000) == 0) {
          break;
        }
        goto LABEL_71;
      }
      if (v47 < 9)
      {
LABEL_71:
        unint64_t v43 = (char *)*((void *)v43 + 1);
        if (!v43) {
          goto LABEL_86;
        }
        continue;
      }
      break;
    }
    size_t v44 = v43;
    unint64_t v43 = *(char **)v43;
    if (v43) {
      continue;
    }
    break;
  }
LABEL_86:
  if (v44 == (char *)&buf + 8) {
    goto LABEL_59;
  }
  int v50 = v44[55];
  if (v50 >= 0) {
    uint64_t v51 = v44 + 32;
  }
  else {
    uint64_t v51 = (const void *)*((void *)v44 + 4);
  }
  if (v50 >= 0) {
    unint64_t v52 = v44[55];
  }
  else {
    unint64_t v52 = *((void *)v44 + 5);
  }
  if (v52 >= 9) {
    size_t v53 = 9;
  }
  else {
    size_t v53 = v52;
  }
  int v54 = memcmp(object, v51, v53);
  if (v54)
  {
    if (v54 < 0) {
      goto LABEL_59;
    }
  }
  else if (v52 > 9)
  {
    goto LABEL_59;
  }
  xpc_object_t v97 = (xpc_object_t)*((void *)v44 + 7);
  if (v97) {
    xpc_retain(*((xpc_object_t *)v44 + 7));
  }
  else {
    xpc_object_t v97 = xpc_null_create();
  }
  xpc_release(xdict);
  xpc_object_t xdict = v97;
  xpc_object_t v38 = xpc_dictionary_get_value(v97, "ReportProcessStatus");
LABEL_60:
  object[0] = v38;
  if (v38) {
    xpc_retain(v38);
  }
  else {
    object[0] = xpc_null_create();
  }
  LOBYTE(v39) = xpc::dyn_cast_or_default((xpc *)object, (const object *)0xFF);
  xpc_release(object[0]);
  xpc_object_t v185 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v40 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v41 = v40;
  if (v40)
  {
    xpc_object_t v185 = v40;
    goto LABEL_66;
  }
  xpc_object_t v41 = xpc_null_create();
  xpc_object_t v185 = v41;
  if (v41)
  {
LABEL_66:
    if (MEMORY[0x1C8795EB0](v41) != v11)
    {
      xpc_object_t v42 = xpc_null_create();
      goto LABEL_100;
    }
    xpc_retain(v41);
  }
  else
  {
    xpc_object_t v42 = xpc_null_create();
    xpc_object_t v41 = 0;
LABEL_100:
    xpc_object_t v185 = v42;
  }
  xpc_release(v41);
  object[0] = a2;
  object[1] = v9;
  __s1[0] = (uint64_t)&v185;
  __s1[1] = (uint64_t)v9;
  xpc::dict::object_proxy::operator=((uint64_t)__s1, (uint64_t)object, &v184);
  xpc_release(v184);
  xpc_object_t v184 = 0;
  memset(__s1, 170, sizeof(__s1));
  xpc_object_t v55 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C540]);
  object[0] = v55;
  if (v55) {
    xpc_retain(v55);
  }
  else {
    object[0] = xpc_null_create();
  }
  xpc::dyn_cast_or_default(__s1, (xpc *)object, (const object *)"", v56);
  xpc_release(object[0]);
  xpc_object_t v57 = (const void *)*MEMORY[0x1E4F4C4C0];
  size_t v58 = strlen((const char *)*MEMORY[0x1E4F4C4C0]);
  size_t v59 = v58;
  size_t v60 = HIBYTE(__s1[2]);
  if ((SHIBYTE(__s1[2]) & 0x80000000) == 0)
  {
    if (v58 != -1)
    {
      uint64_t v61 = HIBYTE(__s1[2]);
      if (HIBYTE(__s1[2]) >= v58) {
        size_t v62 = v58;
      }
      else {
        size_t v62 = HIBYTE(__s1[2]);
      }
      if (memcmp(__s1, v57, v62)) {
        goto LABEL_117;
      }
LABEL_116:
      if (v61 != v59) {
        goto LABEL_117;
      }
LABEL_131:
      std::map<std::string,xpc::dict>::insert_or_assign[abi:ne180100]<xpc::dict>((void **)&buf, (const std::string::value_type **)__p, &v185);
      if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v182, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
      }
      else {
        std::string v182 = v187;
      }
      AnalyticsHelper::submitEvent(v180, (uint64_t)&v182, &buf);
      if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v182.__r_.__value_.__l.__data_);
      }
      int v39 = 1;
      goto LABEL_208;
    }
LABEL_405:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v58 == -1) {
    goto LABEL_405;
  }
  uint64_t v61 = __s1[1];
  if (__s1[1] >= v58) {
    size_t v63 = v58;
  }
  else {
    size_t v63 = __s1[1];
  }
  if (!memcmp((const void *)__s1[0], v57, v63)) {
    goto LABEL_116;
  }
LABEL_117:
  long long v64 = (const void *)*MEMORY[0x1E4F4C5A0];
  size_t v65 = strlen((const char *)*MEMORY[0x1E4F4C5A0]);
  size_t v66 = v65;
  if ((v60 & 0x80) != 0)
  {
    if (v65 != -1)
    {
      uint64_t v67 = __s1[1];
      int v39 = v39;
      if (__s1[1] >= v65) {
        size_t v69 = v65;
      }
      else {
        size_t v69 = __s1[1];
      }
      if (!memcmp((const void *)__s1[0], v64, v69)) {
        goto LABEL_129;
      }
      goto LABEL_137;
    }
LABEL_406:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v65 == -1) {
    goto LABEL_406;
  }
  uint64_t v67 = v60;
  int v39 = v39;
  if (v60 >= v65) {
    size_t v68 = v65;
  }
  else {
    size_t v68 = v60;
  }
  if (memcmp(__s1, v64, v68)) {
    goto LABEL_137;
  }
LABEL_129:
  if (v67 == v66 && !v39) {
    goto LABEL_131;
  }
LABEL_137:
  unint64_t v70 = (const void *)*MEMORY[0x1E4F4C4B0];
  size_t v71 = strlen((const char *)*MEMORY[0x1E4F4C4B0]);
  size_t v72 = v71;
  if ((v60 & 0x80) == 0)
  {
    if (v71 != -1)
    {
      uint64_t v73 = v60;
      if (v60 >= v71) {
        size_t v74 = v71;
      }
      else {
        size_t v74 = v60;
      }
      if (memcmp(__s1, v70, v74)) {
        goto LABEL_182;
      }
      goto LABEL_149;
    }
LABEL_407:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v71 == -1) {
    goto LABEL_407;
  }
  uint64_t v73 = __s1[1];
  if (__s1[1] >= v71) {
    size_t v75 = v71;
  }
  else {
    size_t v75 = __s1[1];
  }
  if (memcmp((const void *)__s1[0], v70, v75))
  {
LABEL_182:
    if ((v60 & 0x80u) == 0) {
      uint64_t v93 = v60;
    }
    else {
      uint64_t v93 = __s1[1];
    }
    if (!v93) {
      std::map<std::string,xpc::dict>::insert_or_assign[abi:ne180100]<xpc::dict>((void **)&buf, (const std::string::value_type **)__p, &v185);
    }
    goto LABEL_208;
  }
LABEL_149:
  if (v73 != v72) {
    goto LABEL_182;
  }
  std::map<std::string,xpc::dict>::insert_or_assign[abi:ne180100]<xpc::dict>((void **)&buf, (const std::string::value_type **)__p, &v185);
  xpc_object_t v76 = xpc_int64_create(0);
  if (!v76) {
    xpc_object_t v76 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "ReportProcessStatus", v76);
  xpc_object_t v77 = xpc_null_create();
  xpc_release(v76);
  xpc_release(v77);
  HIBYTE(object[2]) = 9;
  strcpy((char *)object, "EventInfo");
  xpc_object_t v78 = (char *)*((void *)&buf + 1);
  size_t v79 = (uint64_t *)&buf + 1;
  if (!*((void *)&buf + 1)) {
    goto LABEL_202;
  }
  std::string::size_type v80 = (char *)&buf + 8;
  while (2)
  {
    while (2)
    {
      int v81 = v78[55];
      if (v81 >= 0) {
        std::string::size_type v82 = v78 + 32;
      }
      else {
        std::string::size_type v82 = (const void *)*((void *)v78 + 4);
      }
      if (v81 >= 0) {
        unint64_t v83 = v78[55];
      }
      else {
        unint64_t v83 = *((void *)v78 + 5);
      }
      if (v83 >= 9) {
        size_t v84 = 9;
      }
      else {
        size_t v84 = v83;
      }
      int v85 = memcmp(v82, object, v84);
      if (v85)
      {
        if ((v85 & 0x80000000) == 0) {
          break;
        }
        goto LABEL_154;
      }
      if (v83 < 9)
      {
LABEL_154:
        xpc_object_t v78 = (char *)*((void *)v78 + 1);
        if (!v78) {
          goto LABEL_169;
        }
        continue;
      }
      break;
    }
    std::string::size_type v80 = v78;
    xpc_object_t v78 = *(char **)v78;
    if (v78) {
      continue;
    }
    break;
  }
LABEL_169:
  size_t v79 = (uint64_t *)&buf + 1;
  if (v80 == (char *)&buf + 8) {
    goto LABEL_202;
  }
  int v86 = v80[55];
  if (v86 >= 0) {
    size_t v87 = v80 + 32;
  }
  else {
    size_t v87 = (const void *)*((void *)v80 + 4);
  }
  if (v86 >= 0) {
    unint64_t v88 = v80[55];
  }
  else {
    unint64_t v88 = *((void *)v80 + 5);
  }
  if (v88 >= 9) {
    size_t v89 = 9;
  }
  else {
    size_t v89 = v88;
  }
  int v90 = memcmp(object, v87, v89);
  if (v90)
  {
    if ((v90 & 0x80000000) == 0) {
      goto LABEL_181;
    }
LABEL_201:
    size_t v79 = (uint64_t *)v80;
LABEL_202:
    v181.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)size_t v200 = 0xAAAAAAAAAAAAAAAALL;
    int v98 = std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__find_equal<std::string>((uint64_t **)&buf, v79, (uint64_t **)&v181, (uint64_t **)v200, (const void **)object);
    if (!*v98)
    {
      xpc_object_t v99 = v98;
      std::string::size_type v100 = operator new(0x40uLL);
      v100[2] = *(_OWORD *)object;
      xpc_object_t v101 = object[2];
      memset(object, 0, sizeof(object));
      *((void *)v100 + 6) = v101;
      *((void *)v100 + 7) = xdict;
      xpc_object_t xdict = xpc_null_create();
      std::string::size_type v102 = v181.__r_.__value_.__r.__words[0];
      *(void *)std::string::size_type v100 = 0;
      *((void *)v100 + 1) = 0;
      *((void *)v100 + 2) = v102;
      uint64_t *v99 = (uint64_t)v100;
      if (*(void *)buf)
      {
        *(void *)&long long buf = *(void *)buf;
        std::string::size_type v100 = (_OWORD *)*v99;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&buf + 1), (uint64_t *)v100);
      ++v202;
    }
    xpc_object_t v91 = xdict;
  }
  else
  {
    if (v88 > 9) {
      goto LABEL_201;
    }
LABEL_181:
    xpc_object_t v91 = xpc_null_create();
    std::string::size_type v92 = (void *)*((void *)v80 + 7);
    *((void *)v80 + 7) = xdict;
    xpc_release(v92);
  }
  int v39 = 0;
  xpc_object_t xdict = v91;
LABEL_208:
  size_t v103 = *(NSObject **)(v180 + 40);
  if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
  {
    std::string::size_type v104 = &v187;
    if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v104 = (std::string *)v187.__r_.__value_.__r.__words[0];
    }
    int v105 = __s1;
    if (__s1[2] < 0) {
      int v105 = (uint64_t *)__s1[0];
    }
    LODWORD(object[0]) = 136315650;
    *(xpc_object_t *)((char *)object + 4) = v104;
    WORD2(object[1]) = 2080;
    *(xpc_object_t *)((char *)&object[1] + 6) = v105;
    HIWORD(object[2]) = 1024;
    LODWORD(v189) = v39;
    _os_log_impl(&dword_1C59C6000, v103, OS_LOG_TYPE_DEFAULT, "#I Updating AnalyticsData for event[%s]: command=%s, status=%d", (uint8_t *)object, 0x1Cu);
  }
  if (v39 == 1)
  {
    std::string::size_type v106 = std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>((uint64_t)v177, (const void **)&v187.__r_.__value_.__l.__data_);
    if (v178 != v106)
    {
      int v107 = v106;
      std::string::size_type v108 = (uint64_t *)v106[1];
      if (v108)
      {
        do
        {
          uint64_t v109 = v108;
          std::string::size_type v108 = (uint64_t *)*v108;
        }
        while (v108);
      }
      else
      {
        xpc_object_t v130 = v106;
        do
        {
          uint64_t v109 = (uint64_t *)v130[2];
          BOOL v37 = *v109 == (void)v130;
          xpc_object_t v130 = v109;
        }
        while (!v37);
      }
      if (*v177 == v106) {
        uint64_t *v177 = v109;
      }
      xpc_object_t v131 = *(uint64_t **)(v180 + 112);
      --*(void *)(v180 + 120);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v131, v107);
      std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy((char *)v107[8]);
      if (*((char *)v107 + 55) < 0) {
        operator delete((void *)v107[4]);
      }
      operator delete(v107);
    }
    goto LABEL_338;
  }
  uint64_t v110 = v202;
  if (!v202) {
    goto LABEL_338;
  }
  long long v111 = v178;
  uint64_t v112 = *v178;
  if (!*v178)
  {
    std::string::size_type v121 = v178;
    if (*v177 == v178)
    {
      uint64_t v132 = 0;
      xpc_object_t v133 = v178;
      std::string::size_type v121 = v178;
      goto LABEL_321;
    }
    goto LABEL_276;
  }
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v113 = &v187;
  }
  else {
    std::string::size_type v113 = (std::string *)v187.__r_.__value_.__r.__words[0];
  }
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v114 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v114 = v187.__r_.__value_.__l.__size_;
  }
  uint64_t v115 = *v178;
  while (2)
  {
    while (1)
    {
      int v116 = *(char *)(v115 + 55);
      int v117 = v116 >= 0 ? (const void *)(v115 + 32) : *(const void **)(v115 + 32);
      std::string::size_type v118 = v116 >= 0 ? *(unsigned __int8 *)(v115 + 55) : *(void *)(v115 + 40);
      size_t v119 = v114 >= v118 ? v118 : v114;
      int v120 = memcmp(v117, v113, v119);
      if (!v120) {
        break;
      }
      if (v120 < 0) {
        goto LABEL_230;
      }
LABEL_228:
      long long v111 = (uint64_t *)v115;
      uint64_t v115 = *(void *)v115;
      if (!v115) {
        goto LABEL_245;
      }
    }
    if (v118 >= v114) {
      goto LABEL_228;
    }
LABEL_230:
    uint64_t v115 = *(void *)(v115 + 8);
    if (v115) {
      continue;
    }
    break;
  }
LABEL_245:
  std::string::size_type v121 = v178;
  if (v111 != v178)
  {
    int v122 = *((char *)v111 + 55);
    if (v122 >= 0) {
      std::string::size_type v123 = v111 + 4;
    }
    else {
      std::string::size_type v123 = (const void *)v111[4];
    }
    if (v122 >= 0) {
      size_t v124 = *((unsigned __int8 *)v111 + 55);
    }
    else {
      size_t v124 = v111[5];
    }
    if (v124 >= v114) {
      size_t v125 = v114;
    }
    else {
      size_t v125 = v124;
    }
    int v126 = memcmp(v113, v123, v125);
    if (v126)
    {
      if ((v126 & 0x80000000) == 0)
      {
LABEL_257:
        xpc_object_t v127 = v111 + 8;
        std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy((char *)v111[8]);
        uint64_t v128 = *((void *)&buf + 1);
        v111[7] = buf;
        v111[8] = v128;
        uint64_t v129 = v202;
        v111[9] = v202;
        if (v129)
        {
          *(void *)(v128 + 16) = v127;
          *(void *)&long long buf = (char *)&buf + 8;
          *((void *)&buf + 1) = 0;
          uint64_t v202 = 0;
        }
        else
        {
          v111[7] = (uint64_t)v127;
        }
        goto LABEL_338;
      }
    }
    else if (v114 >= v124)
    {
      goto LABEL_257;
    }
    std::string::size_type v121 = v111;
  }
  uint64_t v132 = *v121;
  if (*v177 == v121)
  {
    xpc_object_t v133 = v121;
    goto LABEL_321;
  }
  if (!v132)
  {
LABEL_276:
    xpc_object_t v133 = v121;
    do
    {
      xpc_object_t v135 = v133;
      xpc_object_t v133 = (uint64_t *)v133[2];
    }
    while ((uint64_t *)*v133 == v135);
    uint64_t v132 = 0;
    goto LABEL_279;
  }
  xpc_object_t v134 = (uint64_t *)*v121;
  do
  {
    xpc_object_t v133 = v134;
    xpc_object_t v134 = (uint64_t *)v134[1];
  }
  while (v134);
LABEL_279:
  int v136 = *((char *)v133 + 55);
  if (v136 >= 0) {
    xpc_object_t v137 = v133 + 4;
  }
  else {
    xpc_object_t v137 = (const void *)v133[4];
  }
  if (v136 >= 0) {
    size_t v138 = *((unsigned __int8 *)v133 + 55);
  }
  else {
    size_t v138 = v133[5];
  }
  char v139 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    xpc_object_t v140 = &v187;
  }
  else {
    xpc_object_t v140 = (std::string *)v187.__r_.__value_.__r.__words[0];
  }
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v141 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v141 = v187.__r_.__value_.__l.__size_;
  }
  if (v141 >= v138) {
    size_t v142 = v138;
  }
  else {
    size_t v142 = v141;
  }
  int v143 = memcmp(v137, v140, v142);
  if (v143)
  {
    if (v143 < 0) {
      goto LABEL_321;
    }
LABEL_298:
    if (!v112)
    {
      xpc_object_t v133 = v178;
      goto LABEL_329;
    }
    while (1)
    {
      xpc_object_t v133 = (uint64_t *)v112;
      size_t v144 = *(unsigned __int8 *)(v112 + 55);
      size_t v145 = *(void *)(v112 + 40);
      if ((v144 & 0x80u) == 0) {
        xpc_object_t v146 = (const void *)(v112 + 32);
      }
      else {
        xpc_object_t v146 = *(const void **)(v112 + 32);
      }
      if ((v144 & 0x80u) == 0) {
        size_t v147 = v144;
      }
      else {
        size_t v147 = v145;
      }
      if (v147 >= v141) {
        size_t v148 = v141;
      }
      else {
        size_t v148 = v147;
      }
      int v149 = memcmp(v140, v146, v148);
      if (v149)
      {
        if ((v149 & 0x80000000) == 0) {
          goto LABEL_314;
        }
      }
      else if (v141 >= v147)
      {
LABEL_314:
        int v150 = memcmp(v146, v140, v148);
        if (v150)
        {
          if ((v150 & 0x80000000) == 0) {
            goto LABEL_338;
          }
        }
        else if (v147 >= v141)
        {
          goto LABEL_338;
        }
        uint64_t v112 = v133[1];
        if (!v112)
        {
          xpc_object_t v178 = v133 + 1;
          goto LABEL_329;
        }
        continue;
      }
      uint64_t v112 = *v133;
      if (!*v133)
      {
        xpc_object_t v178 = v133;
        goto LABEL_329;
      }
    }
  }
  if (v138 >= v141) {
    goto LABEL_298;
  }
LABEL_321:
  xpc_object_t v151 = v133 + 1;
  if (!v132) {
    xpc_object_t v151 = v121;
  }
  xpc_object_t v178 = v151;
  if (!*v151)
  {
    if (!v132) {
      xpc_object_t v133 = v121;
    }
    char v139 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
LABEL_329:
    xpc_object_t v152 = (uint64_t *)operator new(0x50uLL);
    xpc_object_t v153 = (std::string *)(v152 + 4);
    if (v139 < 0)
    {
      std::string::__init_copy_ctor_external(v153, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
      uint64_t v110 = v202;
    }
    else
    {
      *(_OWORD *)&v153->__r_.__value_.__l.__data_ = *(_OWORD *)&v187.__r_.__value_.__l.__data_;
      v152[6] = v187.__r_.__value_.__r.__words[2];
    }
    long long v154 = buf;
    v152[8] = *((void *)&buf + 1);
    xpc_object_t v155 = v152 + 8;
    v152[7] = v154;
    v152[9] = v110;
    if (v110)
    {
      *(void *)(*((void *)&v154 + 1) + 16) = v155;
      *(void *)&long long buf = (char *)&buf + 8;
      *((void *)&buf + 1) = 0;
      uint64_t v202 = 0;
    }
    else
    {
      v152[7] = (uint64_t)v155;
    }
    *xpc_object_t v152 = 0;
    v152[1] = 0;
    v152[2] = (uint64_t)v133;
    *xpc_object_t v178 = (uint64_t)v152;
    xpc_object_t v156 = (uint64_t *)**v177;
    if (v156)
    {
      uint64_t *v177 = v156;
      xpc_object_t v152 = (uint64_t *)*v178;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v180 + 112), v152);
    ++*(void *)(v180 + 120);
  }
LABEL_338:
  xpc_object_t v157 = *(NSObject **)(v180 + 40);
  if (!os_log_type_enabled(v157, OS_LOG_TYPE_DEBUG))
  {
    if (SHIBYTE(__s1[2]) < 0) {
      goto LABEL_340;
    }
    goto LABEL_341;
  }
  AnalyticsHelper::describeAnalyticsCache((AnalyticsHelper *)v180, (uint64_t)object);
  if ((v198 & 0x10) != 0)
  {
    xpc_object_t v160 = v197;
    if (v197 < v194)
    {
      unint64_t v197 = v194;
      xpc_object_t v160 = v194;
    }
    xpc_object_t v161 = v193;
  }
  else
  {
    if ((v198 & 8) == 0)
    {
      int64_t v158 = 0;
      std::string::size_type v159 = 0;
      goto LABEL_359;
    }
    xpc_object_t v161 = v190;
    xpc_object_t v160 = v192;
  }
  int64_t v158 = (char *)v160 - (char *)v161;
  if (v158)
  {
    xpc_object_t v162 = &v196;
    if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      xpc_object_t v162 = (std::string *)v196.__r_.__value_.__r.__words[0];
    }
    std::string::size_type v159 = (char *)v161 - (char *)v162;
  }
  else
  {
    std::string::size_type v159 = 0;
  }
LABEL_359:
  std::string v181 = v196;
  memset(&v196, 0, sizeof(v196));
  std::string::size_type v163 = v159 + v158;
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v164 = v181.__r_.__value_.__l.__size_;
    if (v181.__r_.__value_.__l.__size_ >= v163)
    {
      uint64_t v165 = (std::string *)v181.__r_.__value_.__r.__words[0];
      v181.__r_.__value_.__l.__size_ = v163;
      goto LABEL_365;
    }
LABEL_363:
    std::string::append(&v181, v163 - v164, 0);
  }
  else
  {
    std::string::size_type v164 = HIBYTE(v181.__r_.__value_.__r.__words[2]);
    if (v163 > HIBYTE(v181.__r_.__value_.__r.__words[2])) {
      goto LABEL_363;
    }
    *((unsigned char *)&v181.__r_.__value_.__s + 23) = v163 & 0x7F;
    uint64_t v165 = &v181;
LABEL_365:
    v165->__r_.__value_.__s.__data_[v163] = 0;
  }
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v159 == -1)
    {
      v181.__r_.__value_.__l.__size_ = 0;
      *v181.__r_.__value_.__l.__data_ = 0;
      goto LABEL_372;
    }
LABEL_371:
    std::string::__erase_external_with_move(&v181, 0, v159);
  }
  else
  {
    if (v159 != -1) {
      goto LABEL_371;
    }
    *((unsigned char *)&v181.__r_.__value_.__s + 23) = 0;
    v181.__r_.__value_.__s.__data_[0] = 0;
  }
LABEL_372:
  std::string::size_type v166 = &v196;
  unint64_t v197 = 0;
  std::string::size_type v167 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
  if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v168 = &v196;
  }
  else {
    char v168 = (std::string *)v196.__r_.__value_.__r.__words[0];
  }
  if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v169 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v169 = v196.__r_.__value_.__l.__size_;
  }
  if ((v198 & 8) != 0)
  {
    xpc_object_t v190 = v168;
    v191 = v168;
    unint64_t v197 = (std::string *)((char *)v168 + v169);
    char v192 = (std::string *)((char *)v168 + v169);
  }
  if ((v198 & 0x10) != 0)
  {
    unint64_t v197 = (std::string *)((char *)v168 + v169);
    if ((*((unsigned char *)&v196.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      std::string::size_type v170 = (v196.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v196.__r_.__value_.__l.__size_ < v170)
      {
        std::string::size_type v167 = v196.__r_.__value_.__l.__size_;
        goto LABEL_385;
      }
      v196.__r_.__value_.__l.__size_ = (v196.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      std::string::size_type v166 = (std::string *)v196.__r_.__value_.__r.__words[0];
LABEL_388:
      v166->__r_.__value_.__s.__data_[v170] = 0;
    }
    else
    {
      std::string::size_type v170 = 22;
      if (HIBYTE(v196.__r_.__value_.__r.__words[2]) > 0x15u)
      {
        *((unsigned char *)&v196.__r_.__value_.__s + 23) = 22;
        goto LABEL_388;
      }
LABEL_385:
      std::string::append(&v196, v170 - v167, 0);
    }
    std::string::size_type v171 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
    if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v171 = v196.__r_.__value_.__l.__size_;
    }
    xpc_object_t v193 = v168;
    xpc_object_t v194 = v168;
    v195 = (char *)v168 + v171;
    if ((v198 & 3) != 0)
    {
      if (v169 >> 31)
      {
        uint64_t v172 = ((v169 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v173 = 0x7FFFFFFF * ((v172 + ((v169 - 0x80000000 - v172) >> 1)) >> 30);
        char v168 = (std::string *)((char *)v168 + v173 + 0x7FFFFFFF);
        std::string::size_type v169 = v169 - v173 - 0x7FFFFFFF;
        xpc_object_t v194 = v168;
      }
      if (v169) {
        xpc_object_t v194 = (std::string *)((char *)v168 + v169);
      }
    }
  }
  xpc_object_t v174 = &v181;
  if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    xpc_object_t v174 = (std::string *)v181.__r_.__value_.__r.__words[0];
  }
  *(_DWORD *)size_t v200 = 136315138;
  *(void *)&v200[4] = v174;
  _os_log_debug_impl(&dword_1C59C6000, v157, OS_LOG_TYPE_DEBUG, "#D %s", v200, 0xCu);
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v181.__r_.__value_.__l.__data_);
  }
  object[0] = *(xpc_object_t *)MEMORY[0x1E4FBA408];
  int v175 = *(void **)(MEMORY[0x1E4FBA408] + 72);
  *(xpc_object_t *)((char *)object + *((void *)object[0] - 3)) = *(xpc_object_t *)(MEMORY[0x1E4FBA408] + 64);
  xpc_object_t object[2] = v175;
  uint64_t v189 = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v196.__r_.__value_.__l.__data_);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C8795140](&v199);
  if (SHIBYTE(__s1[2]) < 0) {
LABEL_340:
  }
    operator delete((void *)__s1[0]);
LABEL_341:
  xpc_release(v185);
  std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy(*((char **)&buf + 1));
  xpc_release(xdict);
LABEL_342:
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v187.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_346:
    operator delete(v187.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_346;
  }
}

void sub_1C5AA91C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,xpc_object_t object,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,xpc_object_t a48)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void std::map<std::string,xpc::dict>::insert_or_assign[abi:ne180100]<xpc::dict>(void **a1, const std::string::value_type **a2, xpc_object_t *a3)
{
  xpc_object_t v6 = (uint64_t *)(a1 + 1);
  uint64_t v7 = a1[1];
  if (!v7) {
    goto LABEL_41;
  }
  int v8 = *((char *)a2 + 23);
  if (v8 >= 0) {
    char v9 = (const std::string::value_type *)a2;
  }
  else {
    char v9 = *a2;
  }
  if (v8 >= 0) {
    size_t v10 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v10 = (size_t)a2[1];
  }
  uint64_t v11 = (uint64_t *)(a1 + 1);
  do
  {
    while (1)
    {
      int v12 = *((char *)v7 + 55);
      long long v13 = v12 >= 0 ? v7 + 4 : (uint64_t *)v7[4];
      size_t v14 = v12 >= 0 ? *((unsigned __int8 *)v7 + 55) : v7[5];
      size_t v15 = v10 >= v14 ? v14 : v10;
      int v16 = memcmp(v13, v9, v15);
      if (v16) {
        break;
      }
      if (v14 < v10) {
        goto LABEL_11;
      }
LABEL_9:
      uint64_t v11 = v7;
      uint64_t v7 = (uint64_t *)*v7;
      if (!v7) {
        goto LABEL_26;
      }
    }
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_9;
    }
LABEL_11:
    uint64_t v7 = (uint64_t *)v7[1];
  }
  while (v7);
LABEL_26:
  if (v11 == v6) {
    goto LABEL_40;
  }
  int v17 = *((char *)v11 + 55);
  if (v17 >= 0) {
    uint64_t v18 = v11 + 4;
  }
  else {
    uint64_t v18 = (void *)v11[4];
  }
  if (v17 >= 0) {
    size_t v19 = *((unsigned __int8 *)v11 + 55);
  }
  else {
    size_t v19 = v11[5];
  }
  if (v19 >= v10) {
    size_t v20 = v10;
  }
  else {
    size_t v20 = v19;
  }
  int v21 = memcmp(v9, v18, v20);
  if (v21)
  {
    if ((v21 & 0x80000000) == 0) {
      goto LABEL_38;
    }
LABEL_40:
    xpc_object_t v6 = v11;
LABEL_41:
    int v30 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v31 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    int v24 = std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__find_equal<std::string>(a1, v6, &v31, &v30, (const void **)a2);
    if (!*v24)
    {
      size_t v25 = (uint64_t **)v24;
      unint64_t v26 = (uint64_t *)operator new(0x40uLL);
      xpc_object_t v27 = (std::string *)(v26 + 4);
      if (*((char *)a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v27, *a2, (std::string::size_type)a2[1]);
      }
      else
      {
        *(_OWORD *)&v27->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        v26[6] = (uint64_t)a2[2];
      }
      v26[7] = (uint64_t)*a3;
      *a3 = xpc_null_create();
      xpc_object_t v28 = v31;
      *unint64_t v26 = 0;
      v26[1] = 0;
      void v26[2] = (uint64_t)v28;
      *size_t v25 = v26;
      uint64_t v29 = (void *)**a1;
      if (v29)
      {
        *a1 = v29;
        unint64_t v26 = *v25;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v26);
      a1[2] = (void *)((char *)a1[2] + 1);
    }
  }
  else
  {
    if (v10 < v19) {
      goto LABEL_40;
    }
LABEL_38:
    uint64_t v22 = (uint64_t)*a3;
    *a3 = xpc_null_create();
    uint64_t v23 = (void *)v11[7];
    v11[7] = v22;
    xpc_release(v23);
  }
}

void sub_1C5AA9574(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void AnalyticsHelper::submitEvent(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(void *)(a2 + 8)) {
      BOOL v7 = a3[2] == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
LABEL_12:
      xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
      xpc_object_t v9 = v8;
      if (v8)
      {
        xpc_object_t object = v8;
      }
      else
      {
        xpc_object_t v9 = xpc_null_create();
        xpc_object_t object = v9;
        if (!v9)
        {
          xpc_object_t v10 = xpc_null_create();
          xpc_object_t v9 = 0;
          goto LABEL_19;
        }
      }
      if (MEMORY[0x1C8795EB0](v9) == MEMORY[0x1E4F14590])
      {
        xpc_retain(v9);
        goto LABEL_20;
      }
      xpc_object_t v10 = xpc_null_create();
LABEL_19:
      xpc_object_t object = v10;
LABEL_20:
      xpc_release(v9);
      AnalyticsHelper::append(v11, (uint64_t)&object, a3);
      int v12 = (const void *)*MEMORY[0x1E4F4CE18];
      size_t v13 = strlen((const char *)*MEMORY[0x1E4F4CE18]);
      if (v13 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v14 = (const void *)v13;
      if (v13 >= 0x17)
      {
        uint64_t v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v13 | 7) != 0x17) {
          uint64_t v16 = v13 | 7;
        }
        uint64_t v17 = v16 + 1;
        size_t v15 = (const void **)operator new(v16 + 1);
        __dst[1] = v14;
        void __dst[2] = (const void *)(v17 | 0x8000000000000000);
        __dst[0] = v15;
      }
      else
      {
        HIBYTE(__dst[2]) = v13;
        size_t v15 = __dst;
        if (!v13) {
          goto LABEL_28;
        }
      }
      memmove(v15, v12, (size_t)v14);
LABEL_28:
      *((unsigned char *)v14 + (void)v15) = 0;
      uint64_t v18 = std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>(a1 + 104, __dst);
      size_t v19 = v18;
      if (SHIBYTE(__dst[2]) < 0)
      {
        operator delete((void *)__dst[0]);
        if ((uint64_t *)(a1 + 112) == v19)
        {
LABEL_30:
          size_t v20 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
          {
LABEL_58:
            xpc_object_t v28 = (const std::string::value_type *)a2;
            if (*(char *)(a2 + 23) < 0) {
              xpc_object_t v28 = *(const std::string::value_type **)a2;
            }
            uint64_t v29 = (char *)MEMORY[0x1C8795DE0](object);
            memset(__dst, 170, sizeof(__dst));
            size_t v30 = strlen(v29);
            if (v30 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            xpc_object_t v31 = (const void *)v30;
            if (v30 >= 0x17)
            {
              uint64_t v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v30 | 7) != 0x17) {
                uint64_t v33 = v30 | 7;
              }
              uint64_t v34 = v33 + 1;
              unint64_t v32 = (const void **)operator new(v33 + 1);
              __dst[1] = v31;
              void __dst[2] = (const void *)(v34 | 0x8000000000000000);
              __dst[0] = v32;
            }
            else
            {
              HIBYTE(__dst[2]) = v30;
              unint64_t v32 = __dst;
              if (!v30) {
                goto LABEL_68;
              }
            }
            memcpy(v32, v29, (size_t)v31);
LABEL_68:
            *((unsigned char *)v31 + (void)v32) = 0;
            free(v29);
            size_t v35 = __dst;
            if (SHIBYTE(__dst[2]) < 0) {
              size_t v35 = (const void **)__dst[0];
            }
            *(_DWORD *)long long buf = 136315394;
            *(void *)&uint8_t buf[4] = v28;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = v35;
            _os_log_debug_impl(&dword_1C59C6000, v20, OS_LOG_TYPE_DEBUG, "#D Submitting CoreAnalytics event[%s] - %s", buf, 0x16u);
            if (SHIBYTE(__dst[2]) < 0) {
              operator delete((void *)__dst[0]);
            }
          }
LABEL_48:
          if (*(char *)(a2 + 23) < 0) {
            std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
          }
          else {
            std::string v37 = *(std::string *)a2;
          }
          xpc_object_t v36 = object;
          if (object) {
            xpc_retain(object);
          }
          else {
            xpc_object_t v36 = xpc_null_create();
          }
          metric::sendCoreAnalyticsEvent((const void **)&v37.__r_.__value_.__l.__data_, &v36);
          xpc_release(v36);
          xpc_object_t v36 = 0;
          if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v37.__r_.__value_.__l.__data_);
          }
          xpc_release(object);
          return;
        }
      }
      else if ((uint64_t *)(a1 + 112) == v18)
      {
        goto LABEL_30;
      }
      *(void *)&uint8_t buf[8] = 0;
      *(void *)&uint8_t buf[16] = 0;
      *(void *)long long buf = &buf[8];
      int v21 = (const void **)v19[7];
      uint64_t v22 = (const void ***)(v19 + 8);
      if (v21 == (const void **)(v19 + 8))
      {
LABEL_47:
        AnalyticsHelper::append((uint64_t)v18, (uint64_t)&object, buf);
        std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy(*(char **)&buf[8]);
        size_t v20 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_58;
        }
        goto LABEL_48;
      }
      while (1)
      {
        xpc_object_t v40 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
        xpc_object_t v41 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
        uint64_t v18 = std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__find_equal<std::string>((uint64_t **)buf, (uint64_t *)&buf[8], &v41, &v40, v21 + 4);
        if (*v18)
        {
          uint64_t v23 = (const void **)v21[1];
          if (v23) {
            goto LABEL_42;
          }
        }
        else
        {
          int v24 = (uint64_t **)v18;
          memset(__dst, 170, sizeof(__dst));
          std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__construct_node<std::pair<std::string const,xpc::dict> const&>(__dst, (uint64_t)buf, (uint64_t)(v21 + 4));
          size_t v25 = v41;
          unint64_t v26 = (uint64_t *)__dst[0];
          *(void *)__dst[0] = 0;
          v26[1] = 0;
          void v26[2] = (uint64_t)v25;
          uint64_t *v24 = v26;
          if (**(void **)buf)
          {
            *(void *)long long buf = **(void **)buf;
            unint64_t v26 = *v24;
          }
          uint64_t v18 = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&buf[8], v26);
          ++*(void *)&buf[16];
          uint64_t v23 = (const void **)v21[1];
          if (v23)
          {
            do
            {
LABEL_42:
              xpc_object_t v27 = (const void ***)v23;
              uint64_t v23 = (const void **)*v23;
            }
            while (v23);
            goto LABEL_35;
          }
        }
        do
        {
          xpc_object_t v27 = (const void ***)v21[2];
          BOOL v6 = *v27 == v21;
          int v21 = (const void **)v27;
        }
        while (!v6);
LABEL_35:
        int v21 = (const void **)v27;
        if (v27 == v22) {
          goto LABEL_47;
        }
      }
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 23)) {
      BOOL v6 = a3[2] == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6) {
      goto LABEL_12;
    }
  }
}

void sub_1C5AA9A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, xpc_object_t object, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
}

void AnalyticsHelper::append(uint64_t a1, uint64_t a2, void *a3)
{
  long long v3 = a3 + 1;
  size_t v4 = (void *)*a3;
  if ((void *)*a3 != a3 + 1)
  {
    do
    {
      memset(&v11, 170, sizeof(v11));
      if (*((char *)v4 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(&v11, (const std::string::value_type *)v4[4], v4[5]);
        xpc_object_t v6 = (xpc_object_t)v4[7];
        if (v6)
        {
LABEL_6:
          xpc_retain(v6);
          goto LABEL_9;
        }
      }
      else
      {
        std::string v11 = *(std::string *)(v4 + 4);
        xpc_object_t v6 = (xpc_object_t)v4[7];
        if (v6) {
          goto LABEL_6;
        }
      }
      xpc_object_t v6 = xpc_null_create();
LABEL_9:
      applier[0] = MEMORY[0x1E4F143A8];
      applier[1] = 0x40000000;
      applier[2] = ___ZN15AnalyticsHelper6appendERN3xpc4dictERNSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES1_NS3_4lessISA_EENS8_INS3_4pairIKSA_S1_EEEEEE_block_invoke;
      applier[3] = &__block_descriptor_tmp_13;
      applier[4] = a2;
      xpc_dictionary_apply(v6, applier);
      xpc_release(v6);
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v11.__r_.__value_.__l.__data_);
        BOOL v7 = (void *)v4[1];
        if (v7)
        {
          do
          {
LABEL_13:
            xpc_object_t v8 = v7;
            BOOL v7 = (void *)*v7;
          }
          while (v7);
          goto LABEL_3;
        }
      }
      else
      {
        BOOL v7 = (void *)v4[1];
        if (v7) {
          goto LABEL_13;
        }
      }
      do
      {
        xpc_object_t v8 = (void *)v4[2];
        BOOL v9 = *v8 == (void)v4;
        size_t v4 = v8;
      }
      while (!v9);
LABEL_3:
      size_t v4 = v8;
    }
    while (v8 != v3);
  }
}

void sub_1C5AA9C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  xpc_release(v20);
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN15AnalyticsHelper6appendERN3xpc4dictERNSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES1_NS3_4lessISA_EENS8_INS3_4pairIKSA_S1_EEEEEE_block_invoke(uint64_t a1, char *__s, void *a3)
{
  memset(__dst, 170, sizeof(__dst));
  size_t v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  BOOL v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    xpc_object_t v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    void __dst[2] = (void *)(v10 | 0x8000000000000000);
    __dst[0] = v8;
    goto LABEL_8;
  }
  HIBYTE(__dst[2]) = v6;
  xpc_object_t v8 = __dst;
  if (v6) {
LABEL_8:
  }
    memcpy(v8, __s, (size_t)v7);
  *((unsigned char *)v7 + (void)v8) = 0;
  size_t v11 = strlen((const char *)*MEMORY[0x1E4F4CB40]);
  int v12 = (void *)v11;
  char v13 = HIBYTE(__dst[2]);
  if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    if (v11 != -1)
    {
      size_t v14 = (void *)HIBYTE(__dst[2]);
      size_t v15 = __dst;
      goto LABEL_14;
    }
LABEL_27:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v11 == -1) {
    goto LABEL_27;
  }
  size_t v15 = (void **)__dst[0];
  size_t v14 = __dst[1];
LABEL_14:
  if (v14 >= v12) {
    size_t v16 = (size_t)v12;
  }
  else {
    size_t v16 = (size_t)v14;
  }
  if (!memcmp(v15, (const void *)*MEMORY[0x1E4F4CB40], v16) && v14 == v12)
  {
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 0x40000000;
    void v19[2] = ___ZN15AnalyticsHelper6appendERN3xpc4dictERNSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES1_NS3_4lessISA_EENS8_INS3_4pairIKSA_S1_EEEEEE_block_invoke_2;
    void v19[3] = &__block_descriptor_tmp_8;
    void v19[4] = *(void *)(a1 + 32);
    xpc_dictionary_apply(a3, v19);
    char v13 = HIBYTE(__dst[2]);
  }
  if (v13 < 0) {
    operator delete(__dst[0]);
  }
  return 1;
}

void sub_1C5AA9E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN15AnalyticsHelper6appendERN3xpc4dictERNSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES1_NS3_4lessISA_EENS8_INS3_4pairIKSA_S1_EEEEEE_block_invoke_2(uint64_t a1, const char *a2, xpc_object_t object)
{
  if (object)
  {
    xpc_object_t v5 = object;
    xpc_retain(object);
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(**(xpc_object_t **)(a1 + 32), a2, v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  return 1;
}

void analytics::registerCallbackForTimedEventImpl(const char *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  abm::AWDHelperGetConnection(&v14);
  if (!v14) {
    goto LABEL_18;
  }
  size_t v2 = strlen(a1);
  if (v2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v3 = v2;
  if (v2 >= 0x17)
  {
    uint64_t v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17) {
      uint64_t v5 = v2 | 7;
    }
    uint64_t v6 = v5 + 1;
    p_dst = (std::string *)operator new(v5 + 1);
    __dst.__r_.__value_.__l.__size_ = v3;
    __dst.__r_.__value_.__r.__words[2] = v6 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v2;
    p_dst = &__dst;
    if (!v2) {
      goto LABEL_10;
    }
  }
  memcpy(p_dst, a1, v3);
LABEL_10:
  p_dst->__r_.__value_.__s.__data_[v3] = 0;
  BOOL v7 = std::string::insert(&__dst, 0, "com.apple.Telephony.", 0x14uLL);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  int64_t v13 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  uint64_t v9 = GetOsLogContext()[1];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = __p;
    if (v13 < 0) {
      uint64_t v10 = (void **)__p[0];
    }
    LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
    _os_log_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_INFO, "Register for 24h timer: event[%s]", (uint8_t *)&__dst, 0xCu);
  }
  wis::WISServerConnection::RegisterCallbackForTimer();
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
LABEL_18:
  size_t v11 = (std::__shared_weak_count *)v15;
  if (v15)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v15 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1C5AAA118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  if (a20 < 0)
  {
    operator delete(__p);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void ___ZN9analytics33registerCallbackForTimedEventImplEPKcN8dispatch5queueEU13block_pointerFvNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  (*(void (**)(uint64_t, std::string *))(v2 + 16))(v2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5AAA1F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

void ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 15;
  strcpy(a1, "stats.analytics");
}

uint64_t ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F2109200;
  MEMORY[0x1C87940C0](a1 + 1);
  return a1;
}

void ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F2109200;
  MEMORY[0x1C87940C0](a1 + 1);

  operator delete(a1);
}

void ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    std::string::size_type v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1C5AAA404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C5AAA420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<AnalyticsHelper>::shared_ptr[abi:ne180100]<AnalyticsHelper,std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  size_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2109240;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C5AAA54C(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper*)#1}::operator() const(AnalyticsHelper*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C5AAA574(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<AnalyticsHelper *,std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper *)#1},std::allocator<AnalyticsHelper>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<AnalyticsHelper *,std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper *)#1},std::allocator<AnalyticsHelper>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<AnalyticsHelper *,std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper *)#1},std::allocator<AnalyticsHelper>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI15AnalyticsHelperE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI15AnalyticsHelperE15make_shared_ptrIS1_EENSt3__110shared_pt"
                                "rIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI15AnalyticsHelperE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI15AnalyticsHelperE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper*)#1}::operator() const(AnalyticsHelper*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *ctu::SharedLoggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F2109200;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  size_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ctu::SharedLoggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F2109200;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  size_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::destroy(*((void *)a1 + 1));
    std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy(*((char **)a1 + 8));
    if (a1[55] < 0)
    {
      operator delete(*((void **)a1 + 4));
      uint64_t v2 = a1;
    }
    else
    {
      uint64_t v2 = a1;
    }
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy(*((void *)a1 + 1));
    xpc_release(*((xpc_object_t *)a1 + 7));
    *((void *)a1 + 7) = 0;
    if (a1[55] < 0)
    {
      operator delete(*((void **)a1 + 4));
      uint64_t v2 = a1;
    }
    else
    {
      uint64_t v2 = a1;
    }
    operator delete(v2);
  }
}

xpc_object_t std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__construct_node<std::pair<std::string const,xpc::dict> const&>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 8;
  memset(a1, 170, 24);
  uint64_t v6 = (char *)operator new(0x40uLL);
  *a1 = v6;
  a1[1] = v5;
  *((unsigned char *)a1 + 16) = 0;
  BOOL v7 = (std::string *)(v6 + 32);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
  }
  long long v8 = *(void **)(a3 + 24);
  *((void *)v6 + 7) = v8;
  if (v8)
  {
    xpc_object_t result = xpc_retain(v8);
  }
  else
  {
    xpc_object_t result = xpc_null_create();
    *((void *)v6 + 7) = result;
  }
  *((unsigned char *)a1 + 16) = 1;
  return result;
}

void sub_1C5AAA918(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,xpc::dict>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,xpc::dict>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__tree_node<std::__value_type<std::string,xpc::dict>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,xpc::dict>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      xpc_release(*(xpc_object_t *)(v2 + 56));
      *(void *)(v2 + 56) = 0;
      if (*(char *)(v2 + 55) < 0) {
        operator delete(*(void **)(v2 + 32));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__find_equal<std::string>(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, const void **a5)
{
  long long v8 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2) {
    goto LABEL_23;
  }
  int v10 = *((char *)a5 + 23);
  if (v10 >= 0) {
    size_t v11 = a5;
  }
  else {
    size_t v11 = *a5;
  }
  if (v10 >= 0) {
    size_t v12 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v12 = (size_t)a5[1];
  }
  int v13 = *((char *)a2 + 55);
  if (v13 >= 0) {
    unint64_t v14 = a2 + 4;
  }
  else {
    unint64_t v14 = (const void *)a2[4];
  }
  if (v13 >= 0) {
    size_t v15 = *((unsigned __int8 *)a2 + 55);
  }
  else {
    size_t v15 = a2[5];
  }
  if (v15 >= v12) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v15;
  }
  int v17 = memcmp(v11, v14, v16);
  if (!v17)
  {
    if (v12 >= v15) {
      goto LABEL_19;
    }
LABEL_23:
    size_t v19 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      int v21 = a2;
    }
    else
    {
      if (v19)
      {
        size_t v20 = (uint64_t *)*a2;
        do
        {
          int v21 = v20;
          size_t v20 = (uint64_t *)v20[1];
        }
        while (v20);
      }
      else
      {
        uint64_t v22 = a2;
        do
        {
          int v21 = (uint64_t *)v22[2];
          BOOL v23 = *v21 == (void)v22;
          uint64_t v22 = v21;
        }
        while (v23);
      }
      int v24 = *((char *)v21 + 55);
      if (v24 >= 0) {
        size_t v25 = v21 + 4;
      }
      else {
        size_t v25 = (const void *)v21[4];
      }
      if (v24 >= 0) {
        size_t v26 = *((unsigned __int8 *)v21 + 55);
      }
      else {
        size_t v26 = v21[5];
      }
      int v27 = *((char *)a5 + 23);
      if (v27 >= 0) {
        xpc_object_t v28 = a5;
      }
      else {
        xpc_object_t v28 = *a5;
      }
      if (v27 >= 0) {
        size_t v29 = *((unsigned __int8 *)a5 + 23);
      }
      else {
        size_t v29 = (size_t)a5[1];
      }
      if (v29 >= v26) {
        size_t v30 = v26;
      }
      else {
        size_t v30 = v29;
      }
      int v31 = memcmp(v25, v28, v30);
      if (v31)
      {
        if ((v31 & 0x80000000) == 0) {
          goto LABEL_48;
        }
      }
      else if (v26 >= v29)
      {
LABEL_48:
        unint64_t v32 = *v8;
        if (!*v8)
        {
          uint64_t v33 = v8;
LABEL_69:
          *a3 = (uint64_t *)v33;
          return (uint64_t *)v8;
        }
        while (1)
        {
          uint64_t v33 = (uint64_t **)v32;
          xpc_object_t v36 = (const void *)v32[4];
          uint64_t v34 = v32 + 4;
          size_t v35 = v36;
          int v37 = *((char *)v34 + 23);
          if (v37 >= 0) {
            xpc_object_t v38 = v34;
          }
          else {
            xpc_object_t v38 = v35;
          }
          if (v37 >= 0) {
            size_t v39 = *((unsigned __int8 *)v34 + 23);
          }
          else {
            size_t v39 = v34[1];
          }
          if (v39 >= v29) {
            size_t v40 = v29;
          }
          else {
            size_t v40 = v39;
          }
          int v41 = memcmp(v28, v38, v40);
          if (v41)
          {
            if (v41 < 0) {
              goto LABEL_50;
            }
LABEL_64:
            int v42 = memcmp(v38, v28, v40);
            if (v42)
            {
              if ((v42 & 0x80000000) == 0) {
                goto LABEL_69;
              }
            }
            else if (v39 >= v29)
            {
              goto LABEL_69;
            }
            long long v8 = v33 + 1;
            unint64_t v32 = v33[1];
            if (!v32) {
              goto LABEL_69;
            }
          }
          else
          {
            if (v29 >= v39) {
              goto LABEL_64;
            }
LABEL_50:
            unint64_t v32 = *v33;
            long long v8 = v33;
            if (!*v33) {
              goto LABEL_69;
            }
          }
        }
      }
    }
    if (v19)
    {
      *a3 = v21;
      return v21 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  if (v17 < 0) {
    goto LABEL_23;
  }
LABEL_19:
  int v18 = memcmp(v14, v11, v16);
  if (v18)
  {
    if ((v18 & 0x80000000) == 0)
    {
LABEL_21:
      *a3 = a2;
      *a4 = a2;
      return (uint64_t *)a4;
    }
  }
  else if (v15 >= v12)
  {
    goto LABEL_21;
  }
  uint64_t v43 = a2[1];
  if (v43)
  {
    size_t v44 = (uint64_t *)a2[1];
    do
    {
      a4 = (uint64_t **)v44;
      size_t v44 = (uint64_t *)*v44;
    }
    while (v44);
  }
  else
  {
    int v45 = a2;
    do
    {
      a4 = (uint64_t **)v45[2];
      BOOL v23 = *a4 == v45;
      int v45 = (uint64_t *)a4;
    }
    while (!v23);
  }
  if (a4 != v8)
  {
    int v46 = *((char *)a4 + 55);
    if (v46 >= 0) {
      unint64_t v47 = (uint64_t *)(a4 + 4);
    }
    else {
      unint64_t v47 = a4[4];
    }
    if (v46 >= 0) {
      size_t v48 = *((unsigned __int8 *)a4 + 55);
    }
    else {
      size_t v48 = (size_t)a4[5];
    }
    if (v48 >= v12) {
      size_t v49 = v12;
    }
    else {
      size_t v49 = v48;
    }
    int v50 = memcmp(v11, v47, v49);
    if (v50)
    {
      if ((v50 & 0x80000000) == 0)
      {
LABEL_95:
        uint64_t v51 = *v8;
        if (*v8)
        {
          unint64_t v52 = a3;
          while (1)
          {
            size_t v53 = (uint64_t **)v51;
            dispatch_object_t v56 = (const void *)v51[4];
            int v54 = v51 + 4;
            xpc_object_t v55 = v56;
            int v57 = *((char *)v54 + 23);
            if (v57 >= 0) {
              size_t v58 = v54;
            }
            else {
              size_t v58 = v55;
            }
            if (v57 >= 0) {
              size_t v59 = *((unsigned __int8 *)v54 + 23);
            }
            else {
              size_t v59 = v54[1];
            }
            if (v59 >= v12) {
              size_t v60 = v12;
            }
            else {
              size_t v60 = v59;
            }
            int v61 = memcmp(v11, v58, v60);
            if (v61)
            {
              if (v61 < 0) {
                goto LABEL_97;
              }
LABEL_111:
              int v62 = memcmp(v58, v11, v60);
              if (v62)
              {
                if ((v62 & 0x80000000) == 0) {
                  goto LABEL_123;
                }
              }
              else if (v59 >= v12)
              {
                goto LABEL_123;
              }
              long long v8 = v53 + 1;
              uint64_t v51 = v53[1];
              if (!v51) {
                goto LABEL_123;
              }
            }
            else
            {
              if (v12 >= v59) {
                goto LABEL_111;
              }
LABEL_97:
              uint64_t v51 = *v53;
              long long v8 = v53;
              if (!*v53) {
                goto LABEL_123;
              }
            }
          }
        }
        size_t v53 = v8;
        unint64_t v52 = a3;
LABEL_123:
        std::__shared_weak_count *v52 = (uint64_t *)v53;
        return (uint64_t *)v8;
      }
    }
    else if (v12 >= v48)
    {
      goto LABEL_95;
    }
  }
  if (v43)
  {
    *a3 = (uint64_t *)a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return (uint64_t *)a4;
}

const char *DeviceHistoryDB::getName(DeviceHistoryDB *this)
{
  return "DeviceHistroyDB";
}

void DeviceHistoryDB::DeviceHistoryDB(DeviceHistoryDB *this)
{
  *(void *)this = &unk_1F21092D0;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v5, "com.apple.telephony.abm", "DeviceHistroyDB");
  GetABMLogServer(&v3);
  ctu::Loggable<DeviceHistoryDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>>(this, (uint64_t)v5, &v3);
  uint64_t v2 = v4;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v5);
  *(void *)this = &unk_1F21092D0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  DeviceHistoryDB::initFromDisk(this);
}

void sub_1C5AAAE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::vector<_DeviceHistoryItem>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  void *v3 = &unk_1F2109378;
  MEMORY[0x1C87940C0](v3 + 1);
  _Unwind_Resume(a1);
}

void sub_1C5AAAE70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C5AAAE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  _Unwind_Resume(a1);
}

void *ctu::Loggable<DeviceHistoryDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>>(void *a1, uint64_t a2, void *a3)
{
  *a1 = &unk_1F2109378;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v8);
  a1[1] = &unk_1F2102CB8;
  a1[7] = *a3;
  uint64_t v5 = a3[1];
  a1[8] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v7);
  return a1;
}

void sub_1C5AAAF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void DeviceHistoryDB::initFromDisk(DeviceHistoryDB *this)
{
  int v37 = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  uint64_t v2 = off_1EBBDCA58;
  if (!off_1EBBDCA58)
  {
    SharedData::create_default_global(&__dst);
    long long v3 = __dst;
    long long __dst = 0uLL;
    size_t v4 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
    off_1EBBDCA58 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)*((void *)&__dst + 1);
    if (*((void *)&__dst + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&__dst + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = off_1EBBDCA58;
  }
  *((void *)&v33[1] + 1) = v2;
  *(void *)&void v33[2] = *(&off_1EBBDCA58 + 1);
  if (*(&off_1EBBDCA58 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA58 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  uint64_t v6 = (const void *)*MEMORY[0x1E4F4C438];
  size_t v7 = strlen((const char *)*MEMORY[0x1E4F4C438]);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (long long *)operator new(v10 + 1);
    *((void *)&__dst + 1) = v8;
    *(void *)xpc_object_t v28 = v11 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_18;
  }
  v28[7] = v7;
  p_dst = &__dst;
  if (v7) {
LABEL_18:
  }
    memmove(p_dst, v6, v8);
  *((unsigned char *)p_dst + v8) = 0;
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 40));
  Preferences::getPreference<__CFArray const*>((uint64_t (***)(void, uint64_t))v2, (const char *)&__dst, &v37);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 40));
  if ((v28[7] & 0x80000000) != 0) {
    operator delete((void *)__dst);
  }
  size_t v12 = *(std::__shared_weak_count **)&v33[2];
  if (*(void *)&v33[2]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v33[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    int v13 = v37;
    xpc_object_t v36 = v37;
    if (!v37) {
      goto LABEL_77;
    }
  }
  else
  {
    int v13 = v37;
    xpc_object_t v36 = v37;
    if (!v37) {
      goto LABEL_77;
    }
  }
  CFRetain(v13);
  if (ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get)
  {
    uint64_t Count = CFArrayGetCount((CFArrayRef)v13);
    if (Count)
    {
      CFIndex v14 = 0;
      size_t v25 = (char *)*MEMORY[0x1E4F4C4C8];
      BOOL v23 = (char *)*MEMORY[0x1E4F4C778];
      int v24 = (char *)*MEMORY[0x1E4F4C518];
      size_t v15 = (const char *)*MEMORY[0x1E4F4C770];
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v13, v14);
        int v17 = ValueAtIndex;
        if (ValueAtIndex && (CFTypeID v18 = CFGetTypeID(ValueAtIndex), v18 == CFDictionaryGetTypeID()))
        {
          size_t v35 = v17;
          CFRetain(v17);
        }
        else
        {
          int v17 = 0;
          size_t v35 = 0;
        }
        v34[0] = 0xAAAAAAAAAAAAAAAALL;
        v34[1] = 0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v34, (const __CFDictionary *)v17);
        memset((char *)&v33[1] + 8, 170, 24);
        long long __dst = 0uLL;
        *(void *)xpc_object_t v28 = 0;
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v33, v25);
        ctu::cf::map_adapter::getString();
        MEMORY[0x1C8794290](v33);
        if ((v28[7] & 0x80000000) != 0) {
          operator delete((void *)__dst);
        }
        memset(v33, 170, 24);
        long long __dst = 0uLL;
        *(void *)xpc_object_t v28 = 0;
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v32, v24);
        ctu::cf::map_adapter::getString();
        MEMORY[0x1C8794290](v32);
        if ((v28[7] & 0x80000000) != 0) {
          operator delete((void *)__dst);
        }
        memset(v32, 170, sizeof(v32));
        long long __dst = 0uLL;
        *(void *)xpc_object_t v28 = 0;
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v31, v23);
        ctu::cf::map_adapter::getString();
        MEMORY[0x1C8794290](v31);
        if ((v28[7] & 0x80000000) != 0) {
          operator delete((void *)__dst);
        }
        memset(v31, 170, sizeof(v31));
        long long __dst = 0uLL;
        *(void *)xpc_object_t v28 = 0;
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v38, v15);
        ctu::cf::map_adapter::getString();
        MEMORY[0x1C8794290](v38);
        if ((v28[7] & 0x80000000) != 0)
        {
          operator delete((void *)__dst);
          *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)std::string __p = v20;
          *(_OWORD *)&__p[16] = v20;
          *(_OWORD *)&v28[16] = v20;
          *(_OWORD *)size_t v29 = v20;
          long long __dst = v20;
          *(_OWORD *)xpc_object_t v28 = v20;
          if ((SBYTE7(v33[1]) & 0x80000000) == 0)
          {
LABEL_43:
            long long __dst = v33[0];
            *(void *)xpc_object_t v28 = *(void *)&v33[1];
            goto LABEL_46;
          }
        }
        else
        {
          *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)std::string __p = v19;
          *(_OWORD *)&__p[16] = v19;
          *(_OWORD *)&v28[16] = v19;
          *(_OWORD *)size_t v29 = v19;
          long long __dst = v19;
          *(_OWORD *)xpc_object_t v28 = v19;
          if ((SBYTE7(v33[1]) & 0x80000000) == 0) {
            goto LABEL_43;
          }
        }
        std::string::__init_copy_ctor_external((std::string *)&__dst, *(const std::string::value_type **)&v33[0], *((std::string::size_type *)&v33[0] + 1));
LABEL_46:
        if (SHIBYTE(v32[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v28[8], (const std::string::value_type *)v32[0], (std::string::size_type)v32[1]);
        }
        else
        {
          *(_OWORD *)&v28[8] = *(_OWORD *)v32;
          *(void **)&v28[24] = v32[2];
        }
        if (SHIBYTE(v31[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v29, (const std::string::value_type *)v31[0], (std::string::size_type)v31[1]);
        }
        else
        {
          *(_OWORD *)size_t v29 = *(_OWORD *)v31;
          *(void **)std::string __p = v31[2];
        }
        if (SHIBYTE(v33[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], *((const std::string::value_type **)&v33[1] + 1), *(std::string::size_type *)&v33[2]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)((char *)&v33[1] + 8);
          *(void *)&__p[24] = *((void *)&v33[2] + 1);
        }
        unint64_t v21 = *((void *)this + 10);
        if (v21 >= *((void *)this + 11))
        {
          uint64_t v22 = std::vector<_DeviceHistoryItem>::__push_back_slow_path<_DeviceHistoryItem const&>((int64x2_t *)((char *)this + 72), (const _DeviceHistoryItem *)&__dst);
        }
        else
        {
          _DeviceHistoryItem::_DeviceHistoryItem(*((std::string **)this + 10), (const _DeviceHistoryItem *)&__dst);
          uint64_t v22 = v21 + 96;
          *((void *)this + 10) = v21 + 96;
        }
        *((void *)this + 10) = v22;
        if ((__p[31] & 0x80000000) != 0)
        {
          operator delete(*(void **)&__p[8]);
          if ((__p[7] & 0x80000000) == 0)
          {
LABEL_60:
            if ((v28[31] & 0x80000000) == 0) {
              goto LABEL_61;
            }
            goto LABEL_70;
          }
        }
        else if ((__p[7] & 0x80000000) == 0)
        {
          goto LABEL_60;
        }
        operator delete(v29[0]);
        if ((v28[31] & 0x80000000) == 0)
        {
LABEL_61:
          if ((v28[7] & 0x80000000) == 0) {
            goto LABEL_62;
          }
          goto LABEL_71;
        }
LABEL_70:
        operator delete(*(void **)&v28[8]);
        if ((v28[7] & 0x80000000) == 0)
        {
LABEL_62:
          if ((SHIBYTE(v31[2]) & 0x80000000) == 0) {
            goto LABEL_63;
          }
          goto LABEL_72;
        }
LABEL_71:
        operator delete((void *)__dst);
        if ((SHIBYTE(v31[2]) & 0x80000000) == 0)
        {
LABEL_63:
          if ((SHIBYTE(v32[2]) & 0x80000000) == 0) {
            goto LABEL_64;
          }
          goto LABEL_73;
        }
LABEL_72:
        operator delete(v31[0]);
        if ((SHIBYTE(v32[2]) & 0x80000000) == 0)
        {
LABEL_64:
          if ((SBYTE7(v33[1]) & 0x80000000) == 0) {
            goto LABEL_65;
          }
          goto LABEL_74;
        }
LABEL_73:
        operator delete(v32[0]);
        if ((SBYTE7(v33[1]) & 0x80000000) == 0)
        {
LABEL_65:
          if ((SHIBYTE(v33[2]) & 0x80000000) == 0) {
            goto LABEL_66;
          }
          goto LABEL_75;
        }
LABEL_74:
        operator delete(*(void **)&v33[0]);
        if ((SHIBYTE(v33[2]) & 0x80000000) == 0)
        {
LABEL_66:
          MEMORY[0x1C87942E0](v34);
          if (!v17) {
            goto LABEL_30;
          }
LABEL_76:
          CFRelease(v17);
          goto LABEL_30;
        }
LABEL_75:
        operator delete(*((void **)&v33[1] + 1));
        MEMORY[0x1C87942E0](v34);
        if (v17) {
          goto LABEL_76;
        }
LABEL_30:
        ++v14;
      }
      while (Count != v14);
    }
  }
LABEL_77:
  if (v13) {
    CFRelease(v13);
  }
}

void sub_1C5AAB5F4(_Unwind_Exception *a1)
{
}

void sub_1C5AAB614(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_1C5AAB634(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1 - 160);
  _Unwind_Resume(a1);
}

void sub_1C5AAB64C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a42 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((a42 & 0x80000000) == 0)
  {
LABEL_6:
    if (a48 < 0) {
      operator delete(a43);
    }
    if (*(char *)(v48 - 161) < 0) {
      operator delete(*(void **)(v48 - 184));
    }
    if (*(char *)(v48 - 137) < 0) {
      operator delete(*(void **)(v48 - 160));
    }
    MEMORY[0x1C87942E0](v48 - 136);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v48 - 120));
    ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v48 - 112));
    _Unwind_Resume(a1);
  }
  operator delete(a37);
  goto LABEL_6;
}

void sub_1C5AAB800(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void DeviceHistoryDB::addDeviceHistory(uint64_t a1, const _DeviceHistoryItem *a2)
{
  unint64_t v3 = *(void *)(a1 + 80);
  if (v3 >= *(void *)(a1 + 88))
  {
    *(void *)(a1 + 80) = std::vector<_DeviceHistoryItem>::__push_back_slow_path<_DeviceHistoryItem const&>((int64x2_t *)(a1 + 72), a2);
    size_t v4 = (DeviceHistoryDB *)a1;
  }
  else
  {
    _DeviceHistoryItem::_DeviceHistoryItem(*(std::string **)(a1 + 80), a2);
    *(void *)(a1 + 80) = v3 + 96;
    *(void *)(a1 + 80) = v3 + 96;
    size_t v4 = (DeviceHistoryDB *)a1;
  }
  DeviceHistoryDB::commitToDisk(v4);
}

void sub_1C5AAB898(_Unwind_Exception *a1)
{
  *(void *)(v1 + 80) = v2;
  _Unwind_Resume(a1);
}

void DeviceHistoryDB::commitToDisk(DeviceHistoryDB *this)
{
  CFTypeRef cf = 0;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  size_t v4 = Mutable;
  if (Mutable) {
    CFTypeRef cf = Mutable;
  }
  uint64_t v6 = (long long *)*((void *)this + 9);
  uint64_t v5 = (long long *)*((void *)this + 10);
  if (v6 != v5)
  {
    size_t v7 = (const __CFString **)*MEMORY[0x1E4F4C4C8];
    size_t v8 = (const __CFString **)*MEMORY[0x1E4F4C518];
    uint64_t v9 = (const __CFString **)*MEMORY[0x1E4F4C778];
    uint64_t v10 = (const __CFString **)*MEMORY[0x1E4F4C770];
    uint64_t v11 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    do
    {
      int v13 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E4F1D530], v11);
      if (*((char *)v6 + 95) < 0)
      {
        std::string::__init_copy_ctor_external(&v38, *((const std::string::value_type **)v6 + 9), *((void *)v6 + 10));
      }
      else
      {
        long long v14 = *(long long *)((char *)v6 + 72);
        v38.__r_.__value_.__r.__words[2] = *((void *)v6 + 11);
        *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v14;
      }
      ctu::cf::insert<char const*,std::string>(v13, v7, (uint64_t)&v38, (uint64_t)v2, v12);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v38.__r_.__value_.__l.__data_);
        if ((*((char *)v6 + 23) & 0x80000000) == 0)
        {
LABEL_11:
          long long v16 = *v6;
          v38.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
          *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v16;
          goto LABEL_14;
        }
      }
      else if ((*((char *)v6 + 23) & 0x80000000) == 0)
      {
        goto LABEL_11;
      }
      std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)v6, *((void *)v6 + 1));
LABEL_14:
      ctu::cf::insert<char const*,std::string>(v13, v8, (uint64_t)&v38, (uint64_t)v2, v15);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v38.__r_.__value_.__l.__data_);
        if ((*((char *)v6 + 47) & 0x80000000) == 0)
        {
LABEL_16:
          long long v18 = *(long long *)((char *)v6 + 24);
          v38.__r_.__value_.__r.__words[2] = *((void *)v6 + 5);
          *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v18;
          goto LABEL_19;
        }
      }
      else if ((*((char *)v6 + 47) & 0x80000000) == 0)
      {
        goto LABEL_16;
      }
      std::string::__init_copy_ctor_external(&v38, *((const std::string::value_type **)v6 + 3), *((void *)v6 + 4));
LABEL_19:
      ctu::cf::insert<char const*,std::string>(v13, v9, (uint64_t)&v38, (uint64_t)v2, v17);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v38.__r_.__value_.__l.__data_);
        if (*((char *)v6 + 71) < 0)
        {
LABEL_23:
          std::string::__init_copy_ctor_external(&v38, *((const std::string::value_type **)v6 + 6), *((void *)v6 + 7));
          goto LABEL_24;
        }
      }
      else if (*((char *)v6 + 71) < 0)
      {
        goto LABEL_23;
      }
      long long v20 = v6[3];
      v38.__r_.__value_.__r.__words[2] = *((void *)v6 + 8);
      *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v20;
LABEL_24:
      ctu::cf::insert<char const*,std::string>(v13, v10, (uint64_t)&v38, (uint64_t)v2, v19);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v38.__r_.__value_.__l.__data_);
      }
      CFArrayAppendValue(v4, v13);
      if (v13) {
        CFRelease(v13);
      }
      v6 += 6;
    }
    while (v6 != v5);
  }
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  unint64_t v21 = (os_unfair_lock_s *)off_1EBBDCA58;
  if (!off_1EBBDCA58)
  {
    SharedData::create_default_global(&v38);
    long long v22 = *(_OWORD *)&v38.__r_.__value_.__l.__data_;
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = 0uLL;
    BOOL v23 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
    off_1EBBDCA58 = v22;
    if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    std::string::size_type size = (std::__shared_weak_count *)v38.__r_.__value_.__l.__size_;
    if (v38.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v38.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
    unint64_t v21 = (os_unfair_lock_s *)off_1EBBDCA58;
  }
  size_t v35 = v21;
  xpc_object_t v36 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
  if (*(&off_1EBBDCA58 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA58 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  size_t v25 = (const void *)*MEMORY[0x1E4F4C438];
  size_t v26 = strlen((const char *)*MEMORY[0x1E4F4C438]);
  if (v26 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v27 = (void *)v26;
  if (v26 >= 0x17)
  {
    uint64_t v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17) {
      uint64_t v29 = v26 | 7;
    }
    uint64_t v30 = v29 + 1;
    xpc_object_t v28 = operator new(v29 + 1);
    __p[1] = v27;
    unint64_t v34 = v30 | 0x8000000000000000;
    __p[0] = v28;
    goto LABEL_45;
  }
  HIBYTE(v34) = v26;
  xpc_object_t v28 = __p;
  if (v26) {
LABEL_45:
  }
    memmove(v28, v25, (size_t)v27);
  *((unsigned char *)v27 + (void)v28) = 0;
  v38.__r_.__value_.__r.__words[2] = (std::string::size_type)v21;
  CFTypeRef v39 = cf;
  v38.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  v38.__r_.__value_.__l.__size_ = (std::string::size_type)&v39;
  ctu::SharedLockable<SharedData>::execute_sync<BOOL SharedData::setPreference<__CFArray *>(std::string const&,__CFArray *)::{lambda(void)#1}>(v21 + 6, (uint64_t *)&v38);
  if (SHIBYTE(v34) < 0) {
    operator delete(__p[0]);
  }
  int v31 = v36;
  if (!v36 || atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    CFTypeRef v32 = cf;
    if (!cf) {
      return;
    }
    goto LABEL_51;
  }
  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
  std::__shared_weak_count::__release_weak(v31);
  CFTypeRef v32 = cf;
  if (cf) {
LABEL_51:
  }
    CFRelease(v32);
}

void sub_1C5AABCFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, const void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

void _DeviceHistoryItem::~_DeviceHistoryItem(void **this)
{
  if (*((char *)this + 95) < 0)
  {
    operator delete(this[9]);
    if ((*((char *)this + 71) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 47) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[6]);
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*((char *)this + 23) & 0x80000000) == 0) {
      return;
    }
LABEL_9:
    operator delete(*this);
    return;
  }
LABEL_8:
  operator delete(this[3]);
  if (*((char *)this + 23) < 0) {
    goto LABEL_9;
  }
}

void DeviceHistoryDB::~DeviceHistoryDB(DeviceHistoryDB *this)
{
  *(void *)this = &unk_1F21092D0;
  CFAllocatorRef v2 = (void **)((char *)this + 72);
  std::vector<_DeviceHistoryItem>::__destroy_vector::operator()[abi:ne180100](&v2);
  *(void *)this = &unk_1F2109378;
  MEMORY[0x1C87940C0]((char *)this + 8);
}

{
  void **v2;

  *(void *)this = &unk_1F21092D0;
  CFAllocatorRef v2 = (void **)((char *)this + 72);
  std::vector<_DeviceHistoryItem>::__destroy_vector::operator()[abi:ne180100](&v2);
  *(void *)this = &unk_1F2109378;
  MEMORY[0x1C87940C0]((char *)this + 8);
  operator delete(this);
}

uint64_t ctu::Loggable<DeviceHistoryDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<DeviceHistoryDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    size_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<DeviceHistoryDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void std::vector<_DeviceHistoryItem>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  CFAllocatorRef v2 = (void **)**a1;
  if (!v2) {
    return;
  }
  size_t v4 = (void **)v1[1];
  size_t v5 = **a1;
  if (v4 == v2)
  {
    v1[1] = v2;
    goto LABEL_5;
  }
  do
  {
    if (*((char *)v4 - 1) < 0)
    {
      operator delete(*(v4 - 3));
      if ((*((char *)v4 - 25) & 0x80000000) == 0)
      {
LABEL_9:
        if (*((char *)v4 - 49) < 0) {
          goto LABEL_14;
        }
        goto LABEL_10;
      }
    }
    else if ((*((char *)v4 - 25) & 0x80000000) == 0)
    {
      goto LABEL_9;
    }
    operator delete(*(v4 - 6));
    if (*((char *)v4 - 49) < 0)
    {
LABEL_14:
      operator delete(*(v4 - 9));
      if ((*((char *)v4 - 73) & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
LABEL_10:
    if ((*((char *)v4 - 73) & 0x80000000) == 0) {
      goto LABEL_6;
    }
LABEL_15:
    operator delete(*(v4 - 12));
LABEL_6:
    v4 -= 12;
  }
  while (v4 != v2);
  size_t v5 = **a1;
  v1[1] = v2;

LABEL_5:
  operator delete(v5);
}

void *ctu::Loggable<DeviceHistoryDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F2109378;
  MEMORY[0x1C87940C0](a1 + 1);
  return a1;
}

void ctu::Loggable<DeviceHistoryDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F2109378;
  MEMORY[0x1C87940C0](a1 + 1);

  operator delete(a1);
}

uint64_t std::vector<_DeviceHistoryItem>::__push_back_slow_path<_DeviceHistoryItem const&>(int64x2_t *a1, const _DeviceHistoryItem *a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 5);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 5) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - a1->i64[0]) >> 5) >= 0x155555555555555) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  BOOL v23 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(96 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  long long v20 = v7;
  v21.i64[0] = (uint64_t)&v7[96 * v2];
  v21.i64[1] = v21.i64[0];
  long long v22 = &v7[96 * v6];
  _DeviceHistoryItem::_DeviceHistoryItem((std::string *)v21.i64[0], a2);
  uint64_t v8 = a1->i64[0];
  unint64_t v9 = a1->u64[1];
  uint64_t v10 = v21.i64[0];
  uint64_t v11 = v21.i64[0];
  if (v9 == a1->i64[0])
  {
    int64x2_t v16 = vdupq_n_s64(v9);
  }
  else
  {
    do
    {
      long long v12 = *(_OWORD *)(v9 - 96);
      *(void *)(v11 - 80) = *(void *)(v9 - 80);
      *(_OWORD *)(v11 - 96) = v12;
      *(void *)(v9 - 88) = 0;
      *(void *)(v9 - 80) = 0;
      *(void *)(v9 - 96) = 0;
      long long v13 = *(_OWORD *)(v9 - 72);
      *(void *)(v11 - 56) = *(void *)(v9 - 56);
      *(_OWORD *)(v11 - 72) = v13;
      *(void *)(v9 - 64) = 0;
      *(void *)(v9 - 56) = 0;
      *(void *)(v9 - 72) = 0;
      long long v14 = *(_OWORD *)(v9 - 48);
      *(void *)(v11 - 32) = *(void *)(v9 - 32);
      *(_OWORD *)(v11 - 48) = v14;
      *(void *)(v9 - 40) = 0;
      *(void *)(v9 - 32) = 0;
      *(void *)(v9 - 48) = 0;
      long long v15 = *(_OWORD *)(v9 - 24);
      *(void *)(v11 - 8) = *(void *)(v9 - 8);
      *(_OWORD *)(v11 - 24) = v15;
      v11 -= 96;
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 16) = 0;
      *(void *)(v9 - 8) = 0;
      v9 -= 96;
    }
    while (v9 != v8);
    int64x2_t v16 = *a1;
  }
  uint64_t v17 = v10 + 96;
  a1->i64[0] = v11;
  a1->i64[1] = v10 + 96;
  int64x2_t v21 = v16;
  long long v18 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v22;
  long long v22 = v18;
  long long v20 = (char *)v16.i64[0];
  std::__split_buffer<_DeviceHistoryItem>::~__split_buffer((uint64_t)&v20);
  return v17;
}

void sub_1C5AAC34C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<_DeviceHistoryItem>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void _DeviceHistoryItem::_DeviceHistoryItem(std::string *this, const _DeviceHistoryItem *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    size_t v5 = this + 1;
    if ((*((char *)a2 + 47) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    size_t v5 = this + 1;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      long long v6 = *(_OWORD *)((char *)a2 + 24);
      v5->__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
LABEL_6:
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v7;
  }
  uint64_t v8 = this + 3;
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v9 = *(_OWORD *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((void *)a2 + 11);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
}

void sub_1C5AAC45C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<_DeviceHistoryItem>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 96;
    if (*(char *)(i - 1) < 0)
    {
      operator delete(*(void **)(i - 24));
      if ((*(char *)(i - 25) & 0x80000000) == 0)
      {
LABEL_6:
        if (*(char *)(i - 49) < 0) {
          goto LABEL_11;
        }
        goto LABEL_7;
      }
    }
    else if ((*(char *)(i - 25) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(*(void **)(i - 48));
    if (*(char *)(i - 49) < 0)
    {
LABEL_11:
      operator delete(*(void **)(i - 72));
      if ((*(char *)(i - 73) & 0x80000000) == 0) {
        continue;
      }
      goto LABEL_12;
    }
LABEL_7:
    if ((*(char *)(i - 73) & 0x80000000) == 0) {
      continue;
    }
LABEL_12:
    operator delete(*(void **)(i - 96));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t __cxx_global_var_init_5()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::buffer>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

void RadioModule::create(uint64_t *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  long long v4 = operator new(0x168uLL);
  size_t v5 = (std::__shared_weak_count *)a1[1];
  uint64_t v26 = *a1;
  int v27 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  long long v6 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v7 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v28, v6);
    long long v8 = v28;
    long long v28 = 0uLL;
    long long v9 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v8;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    uint64_t v10 = (std::__shared_weak_count *)*((void *)&v28 + 1);
    if (*((void *)&v28 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v28 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    uint64_t v7 = off_1EBBDCA08;
  }
  uint64_t v11 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(dispatch_object_t *__return_ptr, uint64_t))(*(void *)v7 + 24))(&object, v7);
  RadioModule::RadioModule((uint64_t)v4, &v26, &object);
  *a2 = v4;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  long long v12 = (std::__shared_weak_count *)operator new(0x20uLL);
  v12->__shared_owners_ = 0;
  p_shared_owners = &v12->__shared_owners_;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F2109F78;
  v12->__shared_weak_owners_ = 0;
  v12[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  a2[1] = v12;
  long long v14 = (std::__shared_weak_count *)*((void *)v4 + 16);
  if (v14)
  {
    if (v14->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *((void *)v4 + 15) = v4;
      *((void *)v4 + 16) = v12;
      std::__shared_weak_count::__release_weak(v14);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_16:
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
        long long v15 = (void *)*a2;
        if (!*(void *)(*a2 + 104)) {
          goto LABEL_30;
        }
        goto LABEL_20;
      }
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v4 + 15) = v4;
    *((void *)v4 + 16) = v12;
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_16;
    }
  }
  long long v15 = (void *)*a2;
  if (!*(void *)(*a2 + 104)) {
    goto LABEL_30;
  }
LABEL_20:
  int64x2_t v16 = (std::__shared_weak_count *)v15[16];
  if (!v16 || (v17 = v15[15], (long long v18 = std::__shared_weak_count::lock(v16)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  CFAllocatorRef v19 = v18;
  *(void *)&long long v28 = v17;
  *((void *)&v28 + 1) = v18;
  ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v15 + 7));
  uint64_t v20 = v17 + 48;
  if (!v17) {
    uint64_t v20 = 0;
  }
  uint64_t v32 = v20;
  uint64_t v33 = v19;
  long long v28 = 0uLL;
  ctu::TrackedLogger::registerLoggerToServer();
  int64x2_t v21 = v33;
  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  long long v22 = (std::__shared_weak_count *)*((void *)&v28 + 1);
  if (*((void *)&v28 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v28 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
LABEL_30:
  if (object) {
    dispatch_release(object);
  }
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v27) {
    std::__shared_weak_count::__release_weak(v27);
  }
  uint64_t v23 = *a2;
  int v24 = (uint64_t *)(*a2 + 120);
  *(void *)&long long v28 = MEMORY[0x1E4F143A8];
  *((void *)&v28 + 1) = 0x40000000;
  uint64_t v29 = ___ZN11RadioModule4initEv_block_invoke;
  uint64_t v30 = &__block_descriptor_tmp_9;
  uint64_t v31 = v23;
  ctu::SharedSynchronizable<RadioModule>::execute_wrapped(v24, (uint64_t)&v28);
}

void sub_1C5AAC9D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, dispatch_object_t object, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_1C5AACA40()
{
}

void sub_1C5AACA50()
{
}

void sub_1C5AACA5C()
{
}

void sub_1C5AACA6C()
{
}

void RadioModule::init(RadioModule *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___ZN11RadioModule4initEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_9;
  v1[4] = this;
  ctu::SharedSynchronizable<RadioModule>::execute_wrapped((uint64_t *)this + 15, (uint64_t)v1);
}

uint64_t RadioModule::RadioModule(uint64_t a1, uint64_t *a2, NSObject **a3)
{
  uint64_t v5 = *a2;
  long long v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1F2112348;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v6);
    *(void *)a1 = &unk_1F2103EC0;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &unk_1F2103EC0;
  }
  *(void *)a1 = &unk_1F21093B8;
  *(void *)(a1 + 48) = &unk_1F2109428;
  uint64_t v7 = *a3;
  if (v7)
  {
    dispatch_retain(v7);
    long long v8 = *(uint64_t (***)(void))a1;
  }
  else
  {
    long long v8 = (uint64_t (**)(void))&unk_1F21093B8;
  }
  long long v9 = (const char *)v8[2](a1);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v32, "com.apple.telephony.abm", v9);
  GetABMLogServer(&v30);
  if (v7) {
    dispatch_retain(v7);
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v11 = dispatch_queue_create_with_target_V2("radio.mod", initially_inactive, v7);
  dispatch_set_qos_class_floor(v11, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v11);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  *(void *)(a1 + 144) = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  if (v11) {
    dispatch_release(v11);
  }
  if (v7) {
    dispatch_release(v7);
  }
  *(void *)(a1 + 48) = &unk_1F2109F38;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v34);
  *(void *)(a1 + 56) = &unk_1F2102CB8;
  long long v12 = v31;
  *(void *)(a1 + 104) = v30;
  *(void *)(a1 + 112) = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v33);
  *(void *)(a1 + 48) = &unk_1F2109FC8;
  long long v13 = v31;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v32);
  if (v7) {
    dispatch_release(v7);
  }
  *(void *)a1 = &unk_1F21093B8;
  *(void *)(a1 + 175) = 0;
  *(void *)(a1 + 48) = &unk_1F2109428;
  *(unsigned char *)(a1 + 152) = 0;
  *(void *)(a1 + 183) = 0;
  *(_WORD *)(a1 + 191) = 768;
  radio::RFCalibration_t::RFCalibration_t((radio::RFCalibration_t *)(a1 + 200));
  long long v14 = (void **)(a1 + 248);
  *(void *)(a1 + 248) = xpc_null_create();
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(unsigned char *)(a1 + 288) = 1;
  *(unsigned char *)(a1 + 296) = 0;
  GetABMLogServer(&v28);
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  uint64_t v15 = off_1EBBDC878;
  if (!off_1EBBDC878)
  {
    ABMServer::create_default_global(&v34);
    long long v16 = v34;
    long long v34 = 0uLL;
    uint64_t v17 = (std::__shared_weak_count *)*(&off_1EBBDC878 + 1);
    off_1EBBDC878 = v16;
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    long long v18 = (std::__shared_weak_count *)*((void *)&v34 + 1);
    if (*((void *)&v34 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v34 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    uint64_t v15 = off_1EBBDC878;
  }
  CFAllocatorRef v19 = (std::__shared_weak_count *)*(&off_1EBBDC878 + 1);
  v33[0] = v15;
  v33[1] = *(&off_1EBBDC878 + 1);
  if (*(&off_1EBBDC878 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDC878 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  ctu::iokit::Controller::create();
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  uint64_t v20 = v29;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  *(_WORD *)(a1 + 320) = 0;
  *(unsigned char *)(a1 + 322) = 0;
  *(void *)(a1 + 328) = a1 + 328;
  *(void *)(a1 + 336) = a1 + 328;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  xpc_object_t v21 = xpc_dictionary_create(0, 0, 0);
  if (v21 || (xpc_object_t v21 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v21) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v21);
      xpc_object_t v22 = v21;
    }
    else
    {
      xpc_object_t v22 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v22 = xpc_null_create();
    xpc_object_t v21 = 0;
  }
  xpc_release(v21);
  xpc_object_t v23 = xpc_null_create();
  int v24 = *v14;
  std::__shared_weak_count *v14 = v22;
  xpc_release(v24);
  xpc_release(v23);
  uint64_t Controller = TelephonyBasebandCreateController();
  uint64_t v26 = *(const void **)(a1 + 352);
  *(void *)(a1 + 352) = Controller;
  if (v26) {
    CFRelease(v26);
  }
  return a1;
}

void sub_1C5AAD0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)(v9 + 34));
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)(v9 + 32));
  xpc::dict::~dict(v11);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)(v9 + 22));
  if (*v12 < 0) {
    operator delete(v9[19]);
  }
  ctu::SharedLoggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v10);
  Service::~Service((Service *)v9);
  _Unwind_Resume(a1);
}

void sub_1C5AAD1BC()
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v0 + 176);
  if ((*v1 & 0x80000000) == 0) {
    JUMPOUT(0x1C5AAD1A0);
  }
  JUMPOUT(0x1C5AAD198);
}

void sub_1C5AAD1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v13 = va_arg(va3, void);
  uint64_t v15 = va_arg(va3, void);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v5);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  if (v4) {
    dispatch_release(v4);
  }
  Service::~Service(v3);
  _Unwind_Resume(a1);
}

const void **ctu::cf::CFSharedRef<__TelephonyBasebandControllerHandle_tag>::~CFSharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *ctu::SharedLoggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F2109F38;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1F2109F38;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void RadioModule::~RadioModule(RadioModule *this)
{
  *(void *)this = &unk_1F21093B8;
  *((void *)this + 6) = &unk_1F2109428;
  uint64_t v2 = *((void *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v20, 2u);
  }
  unint64_t v3 = (const void *)*((void *)this + 44);
  if (v3) {
    CFRelease(v3);
  }
  if (*((void *)this + 43))
  {
    uint64_t v4 = *((void *)this + 41);
    uint64_t v5 = (RadioModule *)*((void *)this + 42);
    uint64_t v6 = *(void *)v5;
    *(void *)(v6 + 8) = *(void *)(v4 + 8);
    **(void **)(v4 + 8) = v6;
    *((void *)this + 43) = 0;
    if (v5 != (RadioModule *)((char *)this + 328))
    {
      do
      {
        uint64_t v7 = (RadioModule *)*((void *)v5 + 1);
        long long v8 = (atomic_uint *)*((void *)v5 + 3);
        if (v8 && atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
        }
        operator delete(v5);
        uint64_t v5 = v7;
      }
      while (v7 != (RadioModule *)((char *)this + 328));
    }
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 33);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  xpc_release(*((xpc_object_t *)this + 31));
  *((void *)this + 31) = 0;
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 23);
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*((char *)this + 175) & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*((char *)this + 175) < 0) {
LABEL_24:
  }
    operator delete(*((void **)this + 19));
LABEL_25:
  *((void *)this + 6) = &unk_1F2109F38;
  MEMORY[0x1C87940C0]((char *)this + 56);
  uint64_t v13 = *((void *)this + 18);
  if (v13) {
    dispatch_release(v13);
  }
  long long v14 = *((void *)this + 17);
  if (v14) {
    dispatch_release(v14);
  }
  uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  *(void *)this = &unk_1F2112348;
  uint64_t v16 = *((void *)this + 3);
  if (v16)
  {
    uint64_t v17 = *((void *)this + 4);
    long long v18 = (void *)*((void *)this + 3);
    if (v17 != v16)
    {
      do
      {
        if (*(char *)(v17 - 1) < 0) {
          operator delete(*(void **)(v17 - 24));
        }
        v17 -= 24;
      }
      while (v17 != v16);
      long long v18 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v16;
    operator delete(v18);
  }
  CFAllocatorRef v19 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
}

{
  void *v1;
  uint64_t vars8;

  RadioModule::~RadioModule(this);

  operator delete(v1);
}

void non-virtual thunk to'RadioModule::~RadioModule(RadioModule *this)
{
}

{
  void *v1;
  uint64_t vars8;

  RadioModule::~RadioModule((RadioModule *)((char *)this - 48));

  operator delete(v1);
}

const char *RadioModule::getName(RadioModule *this)
{
  return "radio.mod";
}

void ___ZN11RadioModule4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_1C59C6000, v1, OS_LOG_TYPE_DEFAULT, "#I Initializing", v2, 2u);
  }
}

unsigned char *RadioModule::getShutdownStages@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t v3 = operator new(1uLL);
  *a1 = v3;
  unsigned char *v3 = 3;
  uint64_t result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void RadioModule::shutdown(uint64_t a1, char a2, NSObject **a3)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  _DWORD v7[2] = ___ZN11RadioModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v7[3] = &__block_descriptor_tmp_5_11;
  uint64_t v5 = *a3;
  uint64_t v6 = (uint64_t *)(a1 + 120);
  v7[4] = a1;
  dispatch_group_t group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(group);
  }
  char v9 = a2;
  ctu::SharedSynchronizable<RadioModule>::execute_wrapped(v6, (uint64_t)v7);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void ___ZN11RadioModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = v1 + 41;
  unint64_t v3 = (uint64_t *)v1[42];
  if (v3 != v1 + 41)
  {
    do
    {
      boost::signals2::connection::disconnect((boost::signals2::connection *)(v3 + 2));
      unint64_t v3 = (uint64_t *)v3[1];
    }
    while (v3 != v2);
  }
  if (v1[43])
  {
    uint64_t v4 = v1[41];
    uint64_t v5 = (uint64_t *)v1[42];
    uint64_t v6 = *v5;
    *(void *)(v6 + 8) = *(void *)(v4 + 8);
    **(void **)(v4 + 8) = v6;
    v1[43] = 0;
    if (v5 != v2)
    {
      do
      {
        uint64_t v7 = (uint64_t *)v5[1];
        long long v8 = (atomic_uint *)v5[3];
        if (v8 && atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
        }
        operator delete(v5);
        uint64_t v5 = v7;
      }
      while (v7 != v2);
    }
  }
  char v9 = (std::__shared_weak_count *)v1[35];
  v1[34] = 0;
  v1[35] = 0;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)v1[33];
  v1[32] = 0;
  v1[33] = 0;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    uint64_t v11 = (std::__shared_weak_count *)v1[23];
    v1[22] = 0;
    v1[23] = 0;
    if (!v11) {
      return;
    }
  }
  else
  {
    uint64_t v11 = (std::__shared_weak_count *)v1[23];
    v1[22] = 0;
    v1[23] = 0;
    if (!v11) {
      return;
    }
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void RadioModule::initialize(uint64_t *a1, NSObject **a2)
{
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  void v11[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke;
  uint64_t v11[3] = &__block_descriptor_tmp_161;
  unint64_t v3 = *a2;
  v11[4] = a1;
  dispatch_group_t group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(group);
  }
  ctu::SharedSynchronizable<RadioModule>::execute_wrapped(a1 + 15, (uint64_t)v11);
  uint64_t v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  long long v8 = operator new(8uLL);
  *long long v8 = a1;
  char v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = v8;
  v10[1] = v5;
  _DWORD v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<RadioModule>::execute_wrapped<RadioModule::initialize(dispatch::group_session)::$_0>(RadioModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RadioModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<RadioModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = (std::__shared_weak_count *)v1[16];
  if (!v2 || (uint64_t v3 = v1[15], (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (const void *)*MEMORY[0x1E4F4C880];
  size_t v7 = strlen((const char *)*MEMORY[0x1E4F4C880]);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (void **)operator new(v10 + 1);
    size_t v260 = v8;
    unint64_t v261 = v11 | 0x8000000000000000;
    long long __dst = p_dst;
    goto LABEL_12;
  }
  HIBYTE(v261) = v7;
  p_dst = (void **)&__dst;
  if (v7) {
LABEL_12:
  }
    memmove(p_dst, v6, v8);
  *((unsigned char *)p_dst + v8) = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_13_5;
  void aBlock[4] = v1;
  void aBlock[5] = v3;
  xpc_object_t v257 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = _Block_copy(aBlock);
  v258 = v12;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v258);
  if (v12) {
    _Block_release(v12);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  uint64_t v13 = (const void *)*MEMORY[0x1E4F4CF40];
  size_t v14 = strlen((const char *)*MEMORY[0x1E4F4CF40]);
  if (v14 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v15 = v14;
  if (v14 >= 0x17)
  {
    uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v17 = v14 | 7;
    }
    uint64_t v18 = v17 + 1;
    uint64_t v16 = (void **)operator new(v17 + 1);
    size_t v260 = v15;
    unint64_t v261 = v18 | 0x8000000000000000;
    long long __dst = v16;
    goto LABEL_24;
  }
  HIBYTE(v261) = v14;
  uint64_t v16 = (void **)&__dst;
  if (v14) {
LABEL_24:
  }
    memmove(v16, v13, v15);
  *((unsigned char *)v16 + v15) = 0;
  v253[0] = MEMORY[0x1E4F143A8];
  v253[1] = 1174405120;
  v253[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_14;
  v253[3] = &__block_descriptor_tmp_24_1;
  v253[4] = v1;
  void v253[5] = v3;
  v254 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  CFAllocatorRef v19 = _Block_copy(v253);
  v255 = v19;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v255);
  if (v19) {
    _Block_release(v19);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  uint64_t v20 = (const void *)*MEMORY[0x1E4F4D058];
  size_t v21 = strlen((const char *)*MEMORY[0x1E4F4D058]);
  if (v21 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v22 = v21;
  if (v21 >= 0x17)
  {
    uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v24 = v21 | 7;
    }
    uint64_t v25 = v24 + 1;
    xpc_object_t v23 = (void **)operator new(v24 + 1);
    size_t v260 = v22;
    unint64_t v261 = v25 | 0x8000000000000000;
    long long __dst = v23;
    goto LABEL_36;
  }
  HIBYTE(v261) = v21;
  xpc_object_t v23 = (void **)&__dst;
  if (v21) {
LABEL_36:
  }
    memmove(v23, v20, v22);
  *((unsigned char *)v23 + v22) = 0;
  v250[0] = MEMORY[0x1E4F143A8];
  v250[1] = 1174405120;
  v250[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_25;
  v250[3] = &__block_descriptor_tmp_35_0;
  v250[4] = v1;
  v250[5] = v3;
  v251 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v26 = _Block_copy(v250);
  xpc_object_t v252 = v26;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v252);
  if (v26) {
    _Block_release(v26);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  int v27 = (const void *)*MEMORY[0x1E4F4D068];
  size_t v28 = strlen((const char *)*MEMORY[0x1E4F4D068]);
  if (v28 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v29 = v28;
  if (v28 >= 0x17)
  {
    uint64_t v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17) {
      uint64_t v31 = v28 | 7;
    }
    uint64_t v32 = v31 + 1;
    uint64_t v30 = (void **)operator new(v31 + 1);
    size_t v260 = v29;
    unint64_t v261 = v32 | 0x8000000000000000;
    long long __dst = v30;
    goto LABEL_48;
  }
  HIBYTE(v261) = v28;
  uint64_t v30 = (void **)&__dst;
  if (v28) {
LABEL_48:
  }
    memmove(v30, v27, v29);
  *((unsigned char *)v30 + v29) = 0;
  v247[0] = MEMORY[0x1E4F143A8];
  v247[1] = 1174405120;
  v247[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_36;
  v247[3] = &__block_descriptor_tmp_48_3;
  v247[4] = v1;
  v247[5] = v3;
  v248 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v33 = _Block_copy(v247);
  unint64_t v249 = v33;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v249);
  if (v33) {
    _Block_release(v33);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  long long v34 = (const void *)*MEMORY[0x1E4F4D050];
  size_t v35 = strlen((const char *)*MEMORY[0x1E4F4D050]);
  if (v35 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v36 = v35;
  if (v35 >= 0x17)
  {
    uint64_t v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17) {
      uint64_t v38 = v35 | 7;
    }
    uint64_t v39 = v38 + 1;
    int v37 = (void **)operator new(v38 + 1);
    size_t v260 = v36;
    unint64_t v261 = v39 | 0x8000000000000000;
    long long __dst = v37;
    goto LABEL_60;
  }
  HIBYTE(v261) = v35;
  int v37 = (void **)&__dst;
  if (v35) {
LABEL_60:
  }
    memmove(v37, v34, v36);
  *((unsigned char *)v37 + v36) = 0;
  v244[0] = MEMORY[0x1E4F143A8];
  v244[1] = 1174405120;
  v244[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_49;
  v244[3] = &__block_descriptor_tmp_60_3;
  v244[4] = v1;
  v244[5] = v3;
  v245 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v40 = _Block_copy(v244);
  v246 = v40;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v246);
  if (v40) {
    _Block_release(v40);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  int v41 = (const void *)*MEMORY[0x1E4F4CDC8];
  size_t v42 = strlen((const char *)*MEMORY[0x1E4F4CDC8]);
  if (v42 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v43 = v42;
  if (v42 >= 0x17)
  {
    uint64_t v45 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v42 | 7) != 0x17) {
      uint64_t v45 = v42 | 7;
    }
    uint64_t v46 = v45 + 1;
    size_t v44 = (void **)operator new(v45 + 1);
    size_t v260 = v43;
    unint64_t v261 = v46 | 0x8000000000000000;
    long long __dst = v44;
    goto LABEL_72;
  }
  HIBYTE(v261) = v42;
  size_t v44 = (void **)&__dst;
  if (v42) {
LABEL_72:
  }
    memmove(v44, v41, v43);
  *((unsigned char *)v44 + v43) = 0;
  v241[0] = MEMORY[0x1E4F143A8];
  v241[1] = 1174405120;
  v241[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_61;
  v241[3] = &__block_descriptor_tmp_68_2;
  v241[4] = v1;
  v241[5] = v3;
  xpc_object_t v242 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unint64_t v47 = _Block_copy(v241);
  v243 = v47;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v243);
  if (v47) {
    _Block_release(v47);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  uint64_t v48 = (const void *)*MEMORY[0x1E4F4CDD8];
  size_t v49 = strlen((const char *)*MEMORY[0x1E4F4CDD8]);
  if (v49 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v50 = v49;
  if (v49 >= 0x17)
  {
    uint64_t v52 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v49 | 7) != 0x17) {
      uint64_t v52 = v49 | 7;
    }
    uint64_t v53 = v52 + 1;
    uint64_t v51 = (void **)operator new(v52 + 1);
    size_t v260 = v50;
    unint64_t v261 = v53 | 0x8000000000000000;
    long long __dst = v51;
    goto LABEL_84;
  }
  HIBYTE(v261) = v49;
  uint64_t v51 = (void **)&__dst;
  if (v49) {
LABEL_84:
  }
    memmove(v51, v48, v50);
  *((unsigned char *)v51 + v50) = 0;
  v238[0] = MEMORY[0x1E4F143A8];
  v238[1] = 1174405120;
  v238[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_69;
  v238[3] = &__block_descriptor_tmp_80_4;
  v238[4] = v1;
  v238[5] = v3;
  v239 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  int v54 = _Block_copy(v238);
  v240 = v54;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v240);
  if (v54) {
    _Block_release(v54);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  xpc_object_t v55 = (const void *)*MEMORY[0x1E4F4C218];
  size_t v56 = strlen((const char *)*MEMORY[0x1E4F4C218]);
  if (v56 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v57 = v56;
  if (v56 >= 0x17)
  {
    uint64_t v59 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v56 | 7) != 0x17) {
      uint64_t v59 = v56 | 7;
    }
    uint64_t v60 = v59 + 1;
    size_t v58 = (void **)operator new(v59 + 1);
    size_t v260 = v57;
    unint64_t v261 = v60 | 0x8000000000000000;
    long long __dst = v58;
    goto LABEL_96;
  }
  HIBYTE(v261) = v56;
  size_t v58 = (void **)&__dst;
  if (v56) {
LABEL_96:
  }
    memmove(v58, v55, v57);
  *((unsigned char *)v58 + v57) = 0;
  v235[0] = MEMORY[0x1E4F143A8];
  v235[1] = 1174405120;
  v235[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_81;
  v235[3] = &__block_descriptor_tmp_92_0;
  v235[4] = v1;
  v235[5] = v3;
  v236 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  int v61 = _Block_copy(v235);
  v237 = v61;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v237);
  if (v61) {
    _Block_release(v61);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  int v62 = (const void *)*MEMORY[0x1E4F4D1C0];
  size_t v63 = strlen((const char *)*MEMORY[0x1E4F4D1C0]);
  if (v63 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v64 = v63;
  if (v63 >= 0x17)
  {
    uint64_t v66 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v63 | 7) != 0x17) {
      uint64_t v66 = v63 | 7;
    }
    uint64_t v67 = v66 + 1;
    size_t v65 = (void **)operator new(v66 + 1);
    size_t v260 = v64;
    unint64_t v261 = v67 | 0x8000000000000000;
    long long __dst = v65;
    goto LABEL_108;
  }
  HIBYTE(v261) = v63;
  size_t v65 = (void **)&__dst;
  if (v63) {
LABEL_108:
  }
    memmove(v65, v62, v64);
  *((unsigned char *)v65 + v64) = 0;
  v232[0] = MEMORY[0x1E4F143A8];
  v232[1] = 1174405120;
  void v232[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_93;
  v232[3] = &__block_descriptor_tmp_96_1;
  v232[4] = v1;
  v232[5] = v3;
  v233 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v68 = _Block_copy(v232);
  v234 = v68;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v234);
  if (v68) {
    _Block_release(v68);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  size_t v69 = (const void *)*MEMORY[0x1E4F4C588];
  size_t v70 = strlen((const char *)*MEMORY[0x1E4F4C588]);
  if (v70 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v71 = v70;
  if (v70 >= 0x17)
  {
    uint64_t v73 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v70 | 7) != 0x17) {
      uint64_t v73 = v70 | 7;
    }
    uint64_t v74 = v73 + 1;
    size_t v72 = (void **)operator new(v73 + 1);
    size_t v260 = v71;
    unint64_t v261 = v74 | 0x8000000000000000;
    long long __dst = v72;
    goto LABEL_120;
  }
  HIBYTE(v261) = v70;
  size_t v72 = (void **)&__dst;
  if (v70) {
LABEL_120:
  }
    memmove(v72, v69, v71);
  *((unsigned char *)v72 + v71) = 0;
  v229[0] = MEMORY[0x1E4F143A8];
  v229[1] = 1174405120;
  v229[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_97;
  v229[3] = &__block_descriptor_tmp_100_1;
  v229[4] = v1;
  v229[5] = v3;
  xpc_object_t v230 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v75 = _Block_copy(v229);
  v231 = v75;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v231);
  if (v75) {
    _Block_release(v75);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  xpc_object_t v76 = (const void *)*MEMORY[0x1E4F4CCB8];
  size_t v77 = strlen((const char *)*MEMORY[0x1E4F4CCB8]);
  if (v77 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v78 = v77;
  if (v77 >= 0x17)
  {
    uint64_t v80 = (v77 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v77 | 7) != 0x17) {
      uint64_t v80 = v77 | 7;
    }
    uint64_t v81 = v80 + 1;
    size_t v79 = (void **)operator new(v80 + 1);
    size_t v260 = v78;
    unint64_t v261 = v81 | 0x8000000000000000;
    long long __dst = v79;
    goto LABEL_132;
  }
  HIBYTE(v261) = v77;
  size_t v79 = (void **)&__dst;
  if (v77) {
LABEL_132:
  }
    memmove(v79, v76, v78);
  *((unsigned char *)v79 + v78) = 0;
  v226[0] = MEMORY[0x1E4F143A8];
  v226[1] = 1174405120;
  void v226[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_101;
  v226[3] = &__block_descriptor_tmp_104_0;
  v226[4] = v1;
  v226[5] = v3;
  v227 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::string::size_type v82 = _Block_copy(v226);
  stat v228 = v82;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v228);
  if (v82) {
    _Block_release(v82);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  unint64_t v83 = (const void *)*MEMORY[0x1E4F4CE70];
  size_t v84 = strlen((const char *)*MEMORY[0x1E4F4CE70]);
  if (v84 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v85 = v84;
  if (v84 >= 0x17)
  {
    uint64_t v87 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v84 | 7) != 0x17) {
      uint64_t v87 = v84 | 7;
    }
    uint64_t v88 = v87 + 1;
    int v86 = (void **)operator new(v87 + 1);
    size_t v260 = v85;
    unint64_t v261 = v88 | 0x8000000000000000;
    long long __dst = v86;
    goto LABEL_144;
  }
  HIBYTE(v261) = v84;
  int v86 = (void **)&__dst;
  if (v84) {
LABEL_144:
  }
    memmove(v86, v83, v85);
  *((unsigned char *)v86 + v85) = 0;
  v223[0] = MEMORY[0x1E4F143A8];
  v223[1] = 1174405120;
  v223[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_105;
  v223[3] = &__block_descriptor_tmp_108_0;
  v223[4] = v1;
  v223[5] = v3;
  v224 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v89 = _Block_copy(v223);
  v225 = v89;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v225);
  if (v89) {
    _Block_release(v89);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  int v90 = (const void *)*MEMORY[0x1E4F4C7E0];
  size_t v91 = strlen((const char *)*MEMORY[0x1E4F4C7E0]);
  if (v91 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v92 = v91;
  if (v91 >= 0x17)
  {
    uint64_t v94 = (v91 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v91 | 7) != 0x17) {
      uint64_t v94 = v91 | 7;
    }
    uint64_t v95 = v94 + 1;
    uint64_t v93 = (void **)operator new(v94 + 1);
    size_t v260 = v92;
    unint64_t v261 = v95 | 0x8000000000000000;
    long long __dst = v93;
    goto LABEL_156;
  }
  HIBYTE(v261) = v91;
  uint64_t v93 = (void **)&__dst;
  if (v91) {
LABEL_156:
  }
    memmove(v93, v90, v92);
  *((unsigned char *)v93 + v92) = 0;
  v220[0] = MEMORY[0x1E4F143A8];
  v220[1] = 1174405120;
  v220[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_109;
  v220[3] = &__block_descriptor_tmp_112_1;
  v220[4] = v1;
  void v220[5] = v3;
  char v221 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v96 = _Block_copy(v220);
  v222 = v96;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v222);
  if (v96) {
    _Block_release(v96);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  xpc_object_t v97 = (const void *)*MEMORY[0x1E4F4D158];
  size_t v98 = strlen((const char *)*MEMORY[0x1E4F4D158]);
  if (v98 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v99 = v98;
  if (v98 >= 0x17)
  {
    uint64_t v101 = (v98 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v98 | 7) != 0x17) {
      uint64_t v101 = v98 | 7;
    }
    uint64_t v102 = v101 + 1;
    std::string::size_type v100 = (void **)operator new(v101 + 1);
    size_t v260 = v99;
    unint64_t v261 = v102 | 0x8000000000000000;
    long long __dst = v100;
    goto LABEL_168;
  }
  HIBYTE(v261) = v98;
  std::string::size_type v100 = (void **)&__dst;
  if (v98) {
LABEL_168:
  }
    memmove(v100, v97, v99);
  *((unsigned char *)v100 + v99) = 0;
  v217[0] = MEMORY[0x1E4F143A8];
  v217[1] = 1174405120;
  v217[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_113;
  v217[3] = &__block_descriptor_tmp_116_0;
  v217[4] = v1;
  v217[5] = v3;
  char v218 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v103 = _Block_copy(v217);
  xpc_object_t v219 = v103;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v219);
  if (v103) {
    _Block_release(v103);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  if (capabilities::abs::supportsRFSelfTest(v104))
  {
    int v105 = (const void *)*MEMORY[0x1E4F4D0E0];
    size_t v106 = strlen((const char *)*MEMORY[0x1E4F4D0E0]);
    if (v106 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v107 = v106;
    if (v106 >= 0x17)
    {
      uint64_t v110 = (v106 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v106 | 7) != 0x17) {
        uint64_t v110 = v106 | 7;
      }
      uint64_t v111 = v110 + 1;
      std::string::size_type v108 = (void **)operator new(v110 + 1);
      size_t v260 = v107;
      unint64_t v261 = v111 | 0x8000000000000000;
      long long __dst = v108;
    }
    else
    {
      HIBYTE(v261) = v106;
      std::string::size_type v108 = (void **)&__dst;
      if (!v106)
      {
LABEL_184:
        *((unsigned char *)v108 + v107) = 0;
        v214[0] = MEMORY[0x1E4F143A8];
        v214[1] = 1174405120;
        v214[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_117;
        v214[3] = &__block_descriptor_tmp_120;
        v214[4] = v1;
        v214[5] = v3;
        v215 = v5;
        atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v112 = _Block_copy(v214);
        std::string v216 = v112;
        Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v216);
        if (v112) {
          _Block_release(v112);
        }
        if (SHIBYTE(v261) < 0) {
          operator delete(__dst);
        }
        std::string::size_type v113 = (const void *)*MEMORY[0x1E4F4D0E8];
        size_t v114 = strlen((const char *)*MEMORY[0x1E4F4D0E8]);
        if (v114 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v115 = v114;
        if (v114 >= 0x17)
        {
          uint64_t v117 = (v114 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v114 | 7) != 0x17) {
            uint64_t v117 = v114 | 7;
          }
          uint64_t v118 = v117 + 1;
          int v116 = (void **)operator new(v117 + 1);
          size_t v260 = v115;
          unint64_t v261 = v118 | 0x8000000000000000;
          long long __dst = v116;
        }
        else
        {
          HIBYTE(v261) = v114;
          int v116 = (void **)&__dst;
          if (!v114)
          {
LABEL_196:
            *((unsigned char *)v116 + v115) = 0;
            v211[0] = MEMORY[0x1E4F143A8];
            v211[1] = 1174405120;
            v211[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_121;
            v211[3] = &__block_descriptor_tmp_124_0;
            v211[4] = v1;
            v211[5] = v3;
            uint64_t v212 = v5;
            atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            size_t v119 = _Block_copy(v211);
            unint64_t v213 = v119;
            Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v213);
            if (v119) {
              _Block_release(v119);
            }
            if (SHIBYTE(v261) < 0) {
              operator delete(__dst);
            }
            int v120 = (const void *)*MEMORY[0x1E4F4D1B0];
            size_t v121 = strlen((const char *)*MEMORY[0x1E4F4D1B0]);
            if (v121 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            size_t v122 = v121;
            if (v121 >= 0x17)
            {
              uint64_t v124 = (v121 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v121 | 7) != 0x17) {
                uint64_t v124 = v121 | 7;
              }
              uint64_t v125 = v124 + 1;
              std::string::size_type v123 = (void **)operator new(v124 + 1);
              size_t v260 = v122;
              unint64_t v261 = v125 | 0x8000000000000000;
              long long __dst = v123;
            }
            else
            {
              HIBYTE(v261) = v121;
              std::string::size_type v123 = (void **)&__dst;
              if (!v121) {
                goto LABEL_208;
              }
            }
            memmove(v123, v120, v122);
LABEL_208:
            *((unsigned char *)v123 + v122) = 0;
            v208[0] = MEMORY[0x1E4F143A8];
            v208[1] = 1174405120;
            v208[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_125;
            v208[3] = &__block_descriptor_tmp_128_0;
            v208[4] = v1;
            v208[5] = v3;
            int64_t v209 = v5;
            atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            int v126 = _Block_copy(v208);
            xpc_object_t v210 = v126;
            Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v210);
            if (v126) {
              _Block_release(v126);
            }
            if (SHIBYTE(v261) < 0) {
              operator delete(__dst);
            }
            if (v209) {
              std::__shared_weak_count::__release_weak(v209);
            }
            if (v212) {
              std::__shared_weak_count::__release_weak(v212);
            }
            if (v215) {
              std::__shared_weak_count::__release_weak(v215);
            }
            goto LABEL_218;
          }
        }
        memmove(v116, v113, v115);
        goto LABEL_196;
      }
    }
    memmove(v108, v105, v107);
    goto LABEL_184;
  }
  uint64_t v109 = v1[11];
  if (os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__dst) = 0;
    _os_log_impl(&dword_1C59C6000, v109, OS_LOG_TYPE_DEFAULT, "#I RF Self Test not supported", (uint8_t *)&__dst, 2u);
  }
LABEL_218:
  xpc_object_t v127 = (const void *)*MEMORY[0x1E4F4CA00];
  size_t v128 = strlen((const char *)*MEMORY[0x1E4F4CA00]);
  if (v128 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v129 = v128;
  if (v128 >= 0x17)
  {
    uint64_t v131 = (v128 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v128 | 7) != 0x17) {
      uint64_t v131 = v128 | 7;
    }
    uint64_t v132 = v131 + 1;
    xpc_object_t v130 = (void **)operator new(v131 + 1);
    size_t v260 = v129;
    unint64_t v261 = v132 | 0x8000000000000000;
    long long __dst = v130;
    goto LABEL_225;
  }
  HIBYTE(v261) = v128;
  xpc_object_t v130 = (void **)&__dst;
  if (v128) {
LABEL_225:
  }
    memmove(v130, v127, v129);
  *((unsigned char *)v130 + v129) = 0;
  v205[0] = MEMORY[0x1E4F143A8];
  v205[1] = 1174405120;
  v205[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_129;
  v205[3] = &__block_descriptor_tmp_132_1;
  v205[4] = v1;
  v205[5] = v3;
  unint64_t v206 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v133 = _Block_copy(v205);
  xpc_object_t v207 = v133;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v207);
  if (v133) {
    _Block_release(v133);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  xpc_object_t v134 = (const void *)*MEMORY[0x1E4F4C730];
  size_t v135 = strlen((const char *)*MEMORY[0x1E4F4C730]);
  if (v135 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v136 = v135;
  if (v135 >= 0x17)
  {
    uint64_t v138 = (v135 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v135 | 7) != 0x17) {
      uint64_t v138 = v135 | 7;
    }
    uint64_t v139 = v138 + 1;
    xpc_object_t v137 = (void **)operator new(v138 + 1);
    size_t v260 = v136;
    unint64_t v261 = v139 | 0x8000000000000000;
    long long __dst = v137;
    goto LABEL_237;
  }
  HIBYTE(v261) = v135;
  xpc_object_t v137 = (void **)&__dst;
  if (v135) {
LABEL_237:
  }
    memmove(v137, v134, v136);
  *((unsigned char *)v137 + v136) = 0;
  v202[0] = MEMORY[0x1E4F143A8];
  v202[1] = 1174405120;
  v202[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_133;
  v202[3] = &__block_descriptor_tmp_136;
  v202[4] = v1;
  v202[5] = v3;
  uint64_t v203 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v140 = _Block_copy(v202);
  uint64_t v204 = v140;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v204);
  if (v140) {
    _Block_release(v140);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  std::string::size_type v141 = (const void *)*MEMORY[0x1E4F4C740];
  size_t v142 = strlen((const char *)*MEMORY[0x1E4F4C740]);
  if (v142 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v143 = v142;
  if (v142 >= 0x17)
  {
    uint64_t v145 = (v142 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v142 | 7) != 0x17) {
      uint64_t v145 = v142 | 7;
    }
    uint64_t v146 = v145 + 1;
    size_t v144 = (void **)operator new(v145 + 1);
    size_t v260 = v143;
    unint64_t v261 = v146 | 0x8000000000000000;
    long long __dst = v144;
    goto LABEL_249;
  }
  HIBYTE(v261) = v142;
  size_t v144 = (void **)&__dst;
  if (v142) {
LABEL_249:
  }
    memmove(v144, v141, v143);
  *((unsigned char *)v144 + v143) = 0;
  v199[0] = MEMORY[0x1E4F143A8];
  v199[1] = 1174405120;
  v199[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_137;
  v199[3] = &__block_descriptor_tmp_140;
  v199[4] = v1;
  v199[5] = v3;
  size_t v200 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v147 = _Block_copy(v199);
  v201 = v147;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v201);
  if (v147) {
    _Block_release(v147);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  size_t v148 = (const void *)*MEMORY[0x1E4F4C1C0];
  size_t v149 = strlen((const char *)*MEMORY[0x1E4F4C1C0]);
  if (v149 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v150 = v149;
  if (v149 >= 0x17)
  {
    uint64_t v152 = (v149 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v149 | 7) != 0x17) {
      uint64_t v152 = v149 | 7;
    }
    uint64_t v153 = v152 + 1;
    xpc_object_t v151 = (void **)operator new(v152 + 1);
    size_t v260 = v150;
    unint64_t v261 = v153 | 0x8000000000000000;
    long long __dst = v151;
    goto LABEL_261;
  }
  HIBYTE(v261) = v149;
  xpc_object_t v151 = (void **)&__dst;
  if (v149) {
LABEL_261:
  }
    memmove(v151, v148, v150);
  *((unsigned char *)v151 + v150) = 0;
  v196[0] = MEMORY[0x1E4F143A8];
  v196[1] = 1174405120;
  v196[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_141;
  v196[3] = &__block_descriptor_tmp_144;
  v196[4] = v1;
  v196[5] = v3;
  unint64_t v197 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  long long v154 = _Block_copy(v196);
  int v198 = v154;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v198);
  if (v154) {
    _Block_release(v154);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  if (capabilities::abs::supportsRFFEScanData(v155))
  {
    xpc_object_t v156 = (const void *)*MEMORY[0x1E4F4CFC8];
    size_t v157 = strlen((const char *)*MEMORY[0x1E4F4CFC8]);
    if (v157 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v158 = v157;
    if (v157 >= 0x17)
    {
      uint64_t v160 = (v157 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v157 | 7) != 0x17) {
        uint64_t v160 = v157 | 7;
      }
      uint64_t v161 = v160 + 1;
      std::string::size_type v159 = (void **)operator new(v160 + 1);
      size_t v260 = v158;
      unint64_t v261 = v161 | 0x8000000000000000;
      long long __dst = v159;
    }
    else
    {
      HIBYTE(v261) = v157;
      std::string::size_type v159 = (void **)&__dst;
      if (!v157) {
        goto LABEL_275;
      }
    }
    memmove(v159, v156, v158);
LABEL_275:
    *((unsigned char *)v159 + v158) = 0;
    v193[0] = MEMORY[0x1E4F143A8];
    v193[1] = 1174405120;
    v193[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_145;
    v193[3] = &__block_descriptor_tmp_148;
    v193[4] = v1;
    v193[5] = v3;
    xpc_object_t v194 = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    xpc_object_t v162 = _Block_copy(v193);
    v195 = v162;
    Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v195);
    if (v162) {
      _Block_release(v162);
    }
    if (SHIBYTE(v261) < 0) {
      operator delete(__dst);
    }
    if (v194) {
      std::__shared_weak_count::__release_weak(v194);
    }
  }
  std::string::size_type v163 = (const void *)*MEMORY[0x1E4F4CEE8];
  size_t v164 = strlen((const char *)*MEMORY[0x1E4F4CEE8]);
  if (v164 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v165 = v164;
  if (v164 >= 0x17)
  {
    uint64_t v167 = (v164 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v164 | 7) != 0x17) {
      uint64_t v167 = v164 | 7;
    }
    uint64_t v168 = v167 + 1;
    std::string::size_type v166 = (void **)operator new(v167 + 1);
    size_t v260 = v165;
    unint64_t v261 = v168 | 0x8000000000000000;
    long long __dst = v166;
    goto LABEL_288;
  }
  HIBYTE(v261) = v164;
  std::string::size_type v166 = (void **)&__dst;
  if (v164) {
LABEL_288:
  }
    memmove(v166, v163, v165);
  *((unsigned char *)v166 + v165) = 0;
  v190[0] = MEMORY[0x1E4F143A8];
  v190[1] = 1174405120;
  v190[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_149;
  v190[3] = &__block_descriptor_tmp_150_1;
  v190[4] = v3;
  v191 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::string::size_type v169 = _Block_copy(v190);
  char v192 = v169;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v192);
  if (v169) {
    _Block_release(v169);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  std::string::size_type v170 = (const void *)*MEMORY[0x1E4F4CDE0];
  size_t v171 = strlen((const char *)*MEMORY[0x1E4F4CDE0]);
  if (v171 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v172 = v171;
  if (v171 >= 0x17)
  {
    uint64_t v174 = (v171 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v171 | 7) != 0x17) {
      uint64_t v174 = v171 | 7;
    }
    uint64_t v175 = v174 + 1;
    unint64_t v173 = (void **)operator new(v174 + 1);
    size_t v260 = v172;
    unint64_t v261 = v175 | 0x8000000000000000;
    long long __dst = v173;
    goto LABEL_300;
  }
  HIBYTE(v261) = v171;
  unint64_t v173 = (void **)&__dst;
  if (v171) {
LABEL_300:
  }
    memmove(v173, v170, v172);
  *((unsigned char *)v173 + v172) = 0;
  v187[0] = MEMORY[0x1E4F143A8];
  v187[1] = 1174405120;
  v187[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_151;
  v187[3] = &__block_descriptor_tmp_154;
  v187[4] = v3;
  xpc_object_t v188 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  v176 = _Block_copy(v187);
  uint64_t v189 = v176;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v189);
  if (v176) {
    _Block_release(v176);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  uint64_t v177 = (const void *)*MEMORY[0x1E4F4CDD0];
  size_t v178 = strlen((const char *)*MEMORY[0x1E4F4CDD0]);
  if (v178 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v179 = v178;
  if (v178 >= 0x17)
  {
    uint64_t v181 = (v178 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v178 | 7) != 0x17) {
      uint64_t v181 = v178 | 7;
    }
    uint64_t v182 = v181 + 1;
    uint64_t v180 = (void **)operator new(v181 + 1);
    size_t v260 = v179;
    unint64_t v261 = v182 | 0x8000000000000000;
    long long __dst = v180;
    goto LABEL_312;
  }
  HIBYTE(v261) = v178;
  uint64_t v180 = (void **)&__dst;
  if (v178) {
LABEL_312:
  }
    memmove(v180, v177, v179);
  *((unsigned char *)v180 + v179) = 0;
  v184[0] = MEMORY[0x1E4F143A8];
  v184[1] = 1174405120;
  dispatch_object_t v184[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_155;
  v184[3] = &__block_descriptor_tmp_158;
  v184[4] = v3;
  xpc_object_t v185 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  v183 = _Block_copy(v184);
  xpc_object_t v186 = v183;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v186);
  if (v183) {
    _Block_release(v183);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  if (v185) {
    std::__shared_weak_count::__release_weak(v185);
  }
  if (v188) {
    std::__shared_weak_count::__release_weak(v188);
  }
  if (v191) {
    std::__shared_weak_count::__release_weak(v191);
  }
  if (v197) {
    std::__shared_weak_count::__release_weak(v197);
  }
  if (v200) {
    std::__shared_weak_count::__release_weak(v200);
  }
  if (v203) {
    std::__shared_weak_count::__release_weak(v203);
  }
  if (v206) {
    std::__shared_weak_count::__release_weak(v206);
  }
  if (v218) {
    std::__shared_weak_count::__release_weak(v218);
  }
  if (v221) {
    std::__shared_weak_count::__release_weak(v221);
  }
  if (v224) {
    std::__shared_weak_count::__release_weak(v224);
  }
  if (v227) {
    std::__shared_weak_count::__release_weak(v227);
  }
  if (v230) {
    std::__shared_weak_count::__release_weak(v230);
  }
  if (v233) {
    std::__shared_weak_count::__release_weak(v233);
  }
  if (v236) {
    std::__shared_weak_count::__release_weak(v236);
  }
  if (v239) {
    std::__shared_weak_count::__release_weak(v239);
  }
  if (v242) {
    std::__shared_weak_count::__release_weak(v242);
  }
  if (v245) {
    std::__shared_weak_count::__release_weak(v245);
  }
  if (v248) {
    std::__shared_weak_count::__release_weak(v248);
  }
  if (v251) {
    std::__shared_weak_count::__release_weak(v251);
  }
  if (v254) {
    std::__shared_weak_count::__release_weak(v254);
  }
  if (v257) {
    std::__shared_weak_count::__release_weak(v257);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C5AAF918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,std::__shared_weak_count *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,std::__shared_weak_count *a61,uint64_t a62,uint64_t a63)
{
  if (v70) {
    _Block_release(v70);
  }
  if (a37) {
    std::__shared_weak_count::__release_weak(a37);
  }
  if (*(char *)(v71 - 105) < 0) {
    operator delete(*(void **)(v71 - 128));
  }
  if (a45) {
    std::__shared_weak_count::__release_weak(a45);
  }
  if (a53) {
    std::__shared_weak_count::__release_weak(a53);
  }
  if (a61) {
    std::__shared_weak_count::__release_weak(a61);
  }
  if (a69) {
    std::__shared_weak_count::__release_weak(a69);
  }
  if (STACK[0x2E0]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x2E0]);
  }
  if (STACK[0x320]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x320]);
  }
  if (STACK[0x360]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x360]);
  }
  if (STACK[0x3A0]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x3A0]);
  }
  if (STACK[0x3E0]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x3E0]);
  }
  if (STACK[0x420]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x420]);
  }
  if (STACK[0x460]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x460]);
  }
  if (STACK[0x4A0]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x4A0]);
  }
  if (STACK[0x4E0]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x4E0]);
  }
  if (STACK[0x520]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x520]);
  }
  if (STACK[0x560]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x560]);
  }
  if (STACK[0x5A0]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x5A0]);
  }
  uint64_t v73 = *(std::__shared_weak_count **)(v71 - 208);
  if (v73) {
    std::__shared_weak_count::__release_weak(v73);
  }
  uint64_t v74 = *(std::__shared_weak_count **)(v71 - 144);
  if (v74) {
    std::__shared_weak_count::__release_weak(v74);
  }
  std::__shared_weak_count::__release_weak(v69);
  _Unwind_Resume(a1);
}

void sub_1C5AB00A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (!a69) {
    JUMPOUT(0x1C5AAFFE8);
  }
  JUMPOUT(0x1C5AAFFE4);
}

void sub_1C5AB00B0()
{
}

void sub_1C5AB00B8()
{
  if (!STACK[0x320]) {
    JUMPOUT(0x1C5AB0000);
  }
  JUMPOUT(0x1C5AAFFFCLL);
}

void sub_1C5AB00C8()
{
}

void sub_1C5AB00D0()
{
  if (!STACK[0x3A0]) {
    JUMPOUT(0x1C5AB0018);
  }
  JUMPOUT(0x1C5AB0014);
}

void sub_1C5AB00E0()
{
}

void sub_1C5AB00E8()
{
  if (!STACK[0x420]) {
    JUMPOUT(0x1C5AB0030);
  }
  JUMPOUT(0x1C5AB002CLL);
}

void sub_1C5AB00F8()
{
}

void sub_1C5AB0100()
{
  if (!STACK[0x4A0]) {
    JUMPOUT(0x1C5AB0048);
  }
  JUMPOUT(0x1C5AB0044);
}

void sub_1C5AB0110()
{
}

void sub_1C5AB0118()
{
  if (!STACK[0x520]) {
    JUMPOUT(0x1C5AB0060);
  }
  JUMPOUT(0x1C5AB005CLL);
}

void sub_1C5AB0128()
{
}

void sub_1C5AB0130()
{
  if (!STACK[0x5A0]) {
    JUMPOUT(0x1C5AB0078);
  }
  JUMPOUT(0x1C5AB0074);
}

void sub_1C5AB0140()
{
}

void sub_1C5AB0148()
{
  if (!*(void *)(v0 - 144)) {
    JUMPOUT(0x1C5AB0090);
  }
  JUMPOUT(0x1C5AB008CLL);
}

void sub_1C5AB0158(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_7(void *a1, uint64_t *a2, const __CFDictionary **a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = a1[4];
  size_t v8 = std::__shared_weak_count::lock(v4);
  uint64_t v38 = v8;
  if (!v8) {
    return;
  }
  if (!a1[5])
  {
    uint64_t v11 = v8;
LABEL_41:
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    return;
  }
  unsigned int v36 = 0;
  xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v10 = v9;
  if (v9)
  {
    xpc_object_t xdict = v9;
  }
  else
  {
    xpc_object_t v10 = xpc_null_create();
    xpc_object_t xdict = v10;
    if (!v10)
    {
      xpc_object_t v12 = xpc_null_create();
      xpc_object_t v10 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x1C8795EB0](v10) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v10);
    goto LABEL_13;
  }
  xpc_object_t v12 = xpc_null_create();
LABEL_12:
  xpc_object_t xdict = v12;
LABEL_13:
  xpc_release(v10);
  v33[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v34 = 0xAAAAAAAAAAAAAALL;
  int64_t value = 0;
  v33[0] = (void *)0xAAAAAAAAAAAAAA00;
  int64_t valuePtr = 0;
  uint64_t v13 = *a2;
  if (v13) {
    size_t v14 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    size_t v14 = 0;
  }
  if (v14)
  {
    unsigned int v36 = -534716416;
    size_t v15 = *(NSObject **)(v7 + 88);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v13;
      _os_log_error_impl(&dword_1C59C6000, v15, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
    }
    xpc_object_t v16 = xpc_string_create("Unknown error");
    if (!v16) {
      xpc_object_t v16 = xpc_null_create();
    }
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C240], v16);
    xpc_object_t v17 = xpc_null_create();
    xpc_release(v16);
    xpc_release(v17);
  }
  else
  {
    CFDictionaryRef v18 = *a3;
    if (*a3) {
      CFAllocatorRef v19 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      CFAllocatorRef v19 = 0;
    }
    if (v19)
    {
      v30[0] = 0xAAAAAAAAAAAAAAAALL;
      v30[1] = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v30, v18);
      CFNumberRef v20 = (const __CFNumber *)ctu::cf::map_adapter::copyCFNumberRef((ctu::cf::map_adapter *)v30, (const __CFString *)*MEMORY[0x1E4FB9A98]);
      CFNumberRef v21 = v20;
      if (v20)
      {
        CFNumberGetValue(v20, kCFNumberLongType, &valuePtr);
        CFRelease(v21);
        LODWORD(value) = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v30, (const __CFString *)*MEMORY[0x1E4FB9AC0]);
      }
      ctu::cf::map_adapter::getString();
      *(_OWORD *)uint64_t v33 = *(_OWORD *)buf;
      uint64_t v34 = v40;
      HIBYTE(v40) = 0;
      buf[0] = 0;
      xpc_object_t v22 = xpc_int64_create(valuePtr);
      if (!v22) {
        xpc_object_t v22 = xpc_null_create();
      }
      xpc_object_t v23 = xdict;
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C908], v22);
      xpc_object_t v24 = xpc_null_create();
      xpc_release(v22);
      xpc_release(v24);
      xpc_object_t v25 = xpc_int64_create((int)value);
      if (!v25) {
        xpc_object_t v25 = xpc_null_create();
      }
      xpc_dictionary_set_value(v23, (const char *)*MEMORY[0x1E4F4CE28], v25);
      xpc_object_t v26 = xpc_null_create();
      xpc_release(v25);
      xpc_release(v26);
      if (v34 >= 0) {
        int v27 = v33;
      }
      else {
        int v27 = (void **)v33[0];
      }
      xpc_object_t v28 = xpc_string_create((const char *)v27);
      if (!v28) {
        xpc_object_t v28 = xpc_null_create();
      }
      xpc_dictionary_set_value(v23, (const char *)*MEMORY[0x1E4F4CA40], v28);
      xpc_object_t v29 = xpc_null_create();
      xpc_release(v28);
      xpc_release(v29);
      MEMORY[0x1C87942E0](v30);
    }
  }
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(a1 + 7, &v36, &xdict);
  if (SHIBYTE(v34) < 0) {
    operator delete(v33[0]);
  }
  xpc_release(xdict);
  uint64_t v11 = v38;
  if (v38) {
    goto LABEL_41;
  }
}

void sub_1C5AB058C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void __destroy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE48c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

uint64_t __copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_14(void *a1, uint64_t a2, void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = a1[4];
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      size_t v8 = v7;
      if (a1[5])
      {
        v10[0] = MEMORY[0x1E4F143A8];
        v10[1] = 1174405120;
        _DWORD v10[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_15;
        v10[3] = &__block_descriptor_tmp_21_2;
        void v10[4] = v6;
        xpc_object_t v9 = *a3;
        if (*a3) {
          xpc_object_t v9 = _Block_copy(v9);
        }
        long long aBlock = v9;
        ctu::SharedSynchronizable<RadioModule>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v10);
        if (aBlock) {
          _Block_release(aBlock);
        }
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_15(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 32);
  if ((*(unsigned int (**)(void *))(*v2 + 88))(v2))
  {
    memset(__p, 170, 24);
    uint64_t v3 = (const void *)*MEMORY[0x1E4F4CF40];
    size_t v4 = strlen((const char *)*MEMORY[0x1E4F4CF40]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v5 = v4;
    if (v4 >= 0x17)
    {
      uint64_t v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17) {
        uint64_t v9 = v4 | 7;
      }
      uint64_t v10 = v9 + 1;
      p_dst = (std::string *)operator new(v9 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_16:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        uint64_t v11 = (char *)operator new(0x28uLL);
        strcpy(v11, " rejected; ABM is shutting down ");
        xpc_object_t v12 = std::string::append(&__dst, v11, 0x20uLL);
        long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
        std::string __p[2] = (void *)v12->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v13;
        v12->__r_.__value_.__l.__size_ = 0;
        v12->__r_.__value_.__r.__words[2] = 0;
        v12->__r_.__value_.__r.__words[0] = 0;
        operator delete(v11);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          size_t v14 = v2[11];
          if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
LABEL_18:
            uint64_t v16 = *(void *)(a1 + 40);
            size_t v15 = (uint64_t *)(a1 + 40);
            if (!v16)
            {
LABEL_40:
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              return;
            }
LABEL_24:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            CFAllocatorRef v19 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0) {
              CFAllocatorRef v19 = __p[1];
            }
            if (v19)
            {
              xpc_object_t v20 = xpc_dictionary_create(0, 0, 0);
              if (v20 || (xpc_object_t v20 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8795EB0](v20) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v20);
                  xpc_object_t v21 = v20;
                }
                else
                {
                  xpc_object_t v21 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v21 = xpc_null_create();
                xpc_object_t v20 = 0;
              }
              xpc_release(v20);
              xpc_object_t v22 = xpc_null_create();
              xpc_object_t v23 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
              xpc_release(v23);
              xpc_release(v22);
              if (SHIBYTE(__p[2]) >= 0) {
                xpc_object_t v24 = __p;
              }
              else {
                xpc_object_t v24 = (void **)__p[0];
              }
              xpc_object_t v25 = xpc_string_create((const char *)v24);
              if (!v25) {
                xpc_object_t v25 = xpc_null_create();
              }
              xpc_dictionary_set_value(v21, (const char *)*MEMORY[0x1E4F4C240], v25);
              xpc_object_t v26 = xpc_null_create();
              xpc_release(v25);
              xpc_release(v26);
            }
            unsigned int v30 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v15, &v30, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_40;
          }
        }
        else
        {
          size_t v14 = v2[11];
          if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_18;
          }
        }
        xpc_object_t v17 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          xpc_object_t v17 = (void **)__p[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
        _os_log_impl(&dword_1C59C6000, v14, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        uint64_t v18 = *(void *)(a1 + 40);
        size_t v15 = (uint64_t *)(a1 + 40);
        if (!v18) {
          goto LABEL_40;
        }
        goto LABEL_24;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_16;
  }
  v27[0] = MEMORY[0x1E4F143A8];
  v27[1] = 1174405120;
  v27[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_16;
  v27[3] = &__block_descriptor_tmp_18_1;
  v27[4] = v2;
  uint64_t v7 = *(void **)(a1 + 40);
  if (v7) {
    uint64_t v7 = _Block_copy(v7);
  }
  long long aBlock = v7;
  size_t v8 = (void (**)(void *, std::string *))_Block_copy(v27);
  xpc_object_t v29 = v8;
  RadioModule::getVersion_sync((uint64_t)v2, &v29);
  if (v8) {
    _Block_release(v8);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_1C5AB0BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void RadioModule::getVersion_sync(uint64_t a1, void (***a2)(void *, std::string *))
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v3 || (uint64_t v5 = *(void *)(a1 + 120), (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    size_t v8 = (std::string *)(a1 + 152);
    int v9 = *(char *)(a1 + 175);
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
    size_t v8 = (std::string *)(a1 + 152);
    int v9 = *(char *)(a1 + 175);
    if ((v9 & 0x80000000) == 0)
    {
LABEL_5:
      if (v9)
      {
        uint64_t v10 = *a2;
        std::string v37 = *v8;
        goto LABEL_10;
      }
      goto LABEL_12;
    }
  }
  std::string::size_type v11 = *(void *)(a1 + 160);
  if (v11)
  {
    uint64_t v10 = *a2;
    std::string::__init_copy_ctor_external(&v37, v8->__r_.__value_.__l.__data_, v11);
LABEL_10:
    v10[2](v10, &v37);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    goto LABEL_53;
  }
LABEL_12:
  size_t v35 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v36 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule15getVersion_syncEN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_177;
  void aBlock[4] = a1;
  void aBlock[5] = v5;
  uint64_t v33 = v7;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v12 = *a2;
  if (*a2) {
    xpc_object_t v12 = (void (**)(void *, std::string *))_Block_copy(v12);
  }
  uint64_t v34 = v12;
  long long v13 = _Block_copy(aBlock);
  size_t v14 = *(NSObject **)(a1 + 136);
  if (v14) {
    dispatch_retain(v14);
  }
  size_t v35 = v13;
  dispatch_object_t v36 = v14;
  unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v31 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  size_t v15 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v16 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v37, v15);
    long long v17 = *(_OWORD *)&v37.__r_.__value_.__l.__data_;
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = 0uLL;
    uint64_t v18 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v17;
    if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    std::string::size_type size = (std::__shared_weak_count *)v37.__r_.__value_.__l.__size_;
    if (v37.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v37.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
    uint64_t v16 = off_1EBBDCA08;
  }
  xpc_object_t v20 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  uint64_t v26 = v16;
  uint64_t v27 = *(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v16 + 16))(&v28, v16);
  unint64_t v30 = 0;
  uint64_t v31 = 0;
  if (v29)
  {
    uint64_t v31 = std::__shared_weak_count::lock(v29);
    if (v31) {
      unint64_t v30 = v28;
    }
    if (v29) {
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    unint64_t v21 = v30;
    if (v30) {
      goto LABEL_34;
    }
  }
  else
  {
    unint64_t v21 = v30;
    if (v30)
    {
LABEL_34:
      xpc_object_t v22 = v35;
      if (v35) {
        xpc_object_t v22 = _Block_copy(v35);
      }
      xpc_object_t v24 = v22;
      dispatch_object_t object = v36;
      if (v36) {
        dispatch_retain(v36);
      }
      (*(void (**)(unint64_t, void **))(*(void *)v21 + 112))(v21, &v24);
      if (object) {
        dispatch_release(object);
      }
      if (v24) {
        _Block_release(v24);
      }
    }
  }
  xpc_object_t v23 = v31;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  if (v36) {
    dispatch_release(v36);
  }
  if (v35) {
    _Block_release(v35);
  }
  if (v34) {
    _Block_release(v34);
  }
  if (v33) {
    std::__shared_weak_count::__release_weak(v33);
  }
LABEL_53:
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1C5AB10E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *aBlock)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v25 - 80);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a23)
  {
    std::__shared_weak_count::__release_weak(a23);
    std::__shared_weak_count::__release_weak(v24);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_16(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  unsigned int v86 = 0;
  xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v6 = v5;
  if (v5)
  {
    xpc_object_t xdict = v5;
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t xdict = v6;
    if (!v6)
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v6 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8795EB0](v6) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v6);
    goto LABEL_9;
  }
  xpc_object_t v7 = xpc_null_create();
LABEL_8:
  xpc_object_t xdict = v7;
LABEL_9:
  xpc_release(v6);
  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    if (*((unsigned char *)a2 + 23)) {
      goto LABEL_11;
    }
LABEL_32:
    unsigned int v86 = -534716416;
    xpc_object_t v21 = xpc_string_create("Unknown error");
    if (!v21) {
      xpc_object_t v21 = xpc_null_create();
    }
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C240], v21);
    xpc_object_t v22 = xpc_null_create();
    xpc_release(v21);
    xpc_release(v22);
    goto LABEL_143;
  }
  if (!a2[1]) {
    goto LABEL_32;
  }
LABEL_11:
  size_t v8 = (char *)operator new(0x28uLL);
  strcpy(v8, "AppleBasebandServices_Manager-1211");
  xpc_object_t v9 = xpc_string_create(v8);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4CC58], v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  operator delete(v8);
  if (*((char *)a2 + 23) < 0) {
    a2 = (uint64_t *)*a2;
  }
  xpc_object_t v11 = xpc_string_create((const char *)a2);
  if (!v11) {
    xpc_object_t v11 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C488], v11);
  xpc_object_t v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  CFTypeRef cf = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  long long v13 = (os_unfair_lock_s *)off_1EBBDCA58;
  if (!off_1EBBDCA58)
  {
    SharedData::create_default_global(&__dst);
    long long v14 = __dst;
    long long __dst = 0uLL;
    size_t v15 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
    off_1EBBDCA58 = v14;
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    uint64_t v16 = (std::__shared_weak_count *)*((void *)&__dst + 1);
    if (*((void *)&__dst + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&__dst + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    long long v13 = (os_unfair_lock_s *)off_1EBBDCA58;
  }
  std::string __p = v13;
  size_t v78 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
  if (*(&off_1EBBDCA58 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA58 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  long long v17 = (const void *)*MEMORY[0x1E4F4C5D0];
  size_t v18 = strlen((const char *)*MEMORY[0x1E4F4C5D0]);
  if (v18 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v19 = v18;
  if (v18 >= 0x17)
  {
    uint64_t v23 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17) {
      uint64_t v23 = v18 | 7;
    }
    uint64_t v24 = v23 + 1;
    p_dst = (long long *)operator new(v23 + 1);
    *((void *)&__dst + 1) = v19;
    int64_t v83 = v24 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_38;
  }
  HIBYTE(v83) = v18;
  p_dst = &__dst;
  if (v18) {
LABEL_38:
  }
    memmove(p_dst, v17, v19);
  *((unsigned char *)p_dst + v19) = 0;
  os_unfair_lock_lock(v13 + 10);
  Preferences::getPreference<__CFDictionary const*>(v13, (const char *)&__dst, &cf);
  os_unfair_lock_unlock(v13 + 10);
  if (SHIBYTE(v83) < 0)
  {
    operator delete((void *)__dst);
    uint64_t v25 = v78;
    if (!v78) {
      goto LABEL_44;
    }
  }
  else
  {
    uint64_t v25 = v78;
    if (!v78)
    {
LABEL_44:
      CFTypeRef v26 = cf;
      if (!cf) {
        goto LABEL_53;
      }
      goto LABEL_45;
    }
  }
  if (atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_44;
  }
  ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
  std::__shared_weak_count::__release_weak(v25);
  CFTypeRef v26 = cf;
  if (!cf)
  {
LABEL_53:
    uint64_t v33 = *(NSObject **)(v4 + 88);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__dst) = 0;
      _os_log_error_impl(&dword_1C59C6000, v33, OS_LOG_TYPE_ERROR, "Failed to get ABM Shared Data", (uint8_t *)&__dst, 2u);
    }
    goto LABEL_143;
  }
LABEL_45:
  CFTypeID v27 = CFGetTypeID(v26);
  if (v27 != CFDictionaryGetTypeID()) {
    goto LABEL_53;
  }
  CFDictionaryRef v28 = (const __CFDictionary *)cf;
  CFTypeRef v81 = cf;
  if (cf) {
    CFRetain(cf);
  }
  v80[0] = 0xAAAAAAAAAAAAAAAALL;
  v80[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v80, v28);
  xpc_object_t v29 = (const void *)*MEMORY[0x1E4F4D2F8];
  size_t v30 = strlen((const char *)*MEMORY[0x1E4F4D2F8]);
  if (v30 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v31 = v30;
  if (v30 >= 0x17)
  {
    uint64_t v34 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17) {
      uint64_t v34 = v30 | 7;
    }
    uint64_t v35 = v34 + 1;
    p_p = operator new(v34 + 1);
    size_t v78 = (std::__shared_weak_count *)v31;
    unint64_t v79 = v35 | 0x8000000000000000;
    std::string __p = p_p;
    goto LABEL_58;
  }
  HIBYTE(v79) = v30;
  p_p = &__p;
  if (v30) {
LABEL_58:
  }
    memmove(p_p, v29, v31);
  dispatch_object_t v36 = (const char *)*MEMORY[0x1E4F4C648];
  *((unsigned char *)p_p + v31) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v87, v36);
  ctu::cf::map_adapter::getString();
  MEMORY[0x1C8794290](&v87);
  if (v83 >= 0) {
    std::string v37 = (const char *)&__dst;
  }
  else {
    std::string v37 = (const char *)__dst;
  }
  xpc_object_t v38 = xpc_string_create(v37);
  if (!v38) {
    xpc_object_t v38 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, v36, v38);
  xpc_object_t v39 = xpc_null_create();
  xpc_release(v38);
  xpc_release(v39);
  if (SHIBYTE(v83) < 0)
  {
    operator delete((void *)__dst);
    if ((SHIBYTE(v79) & 0x80000000) == 0)
    {
LABEL_66:
      size_t v40 = strlen((const char *)v29);
      if (v40 <= 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_67;
      }
LABEL_130:
      std::string::__throw_length_error[abi:ne180100]();
    }
  }
  else if ((SHIBYTE(v79) & 0x80000000) == 0)
  {
    goto LABEL_66;
  }
  operator delete(__p);
  size_t v40 = strlen((const char *)v29);
  if (v40 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_130;
  }
LABEL_67:
  size_t v41 = v40;
  if (v40 >= 0x17)
  {
    uint64_t v43 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17) {
      uint64_t v43 = v40 | 7;
    }
    uint64_t v44 = v43 + 1;
    size_t v42 = operator new(v43 + 1);
    size_t v78 = (std::__shared_weak_count *)v41;
    unint64_t v79 = v44 | 0x8000000000000000;
    std::string __p = v42;
    goto LABEL_73;
  }
  HIBYTE(v79) = v40;
  size_t v42 = &__p;
  if (v40) {
LABEL_73:
  }
    memmove(v42, v29, v41);
  uint64_t v45 = (const char *)*MEMORY[0x1E4F4C518];
  *((unsigned char *)v42 + v41) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v87, v45);
  ctu::cf::map_adapter::getString();
  MEMORY[0x1C8794290](&v87);
  if (v83 >= 0) {
    uint64_t v46 = (const char *)&__dst;
  }
  else {
    uint64_t v46 = (const char *)__dst;
  }
  xpc_object_t v47 = xpc_string_create(v46);
  if (!v47) {
    xpc_object_t v47 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, v45, v47);
  xpc_object_t v48 = xpc_null_create();
  xpc_release(v47);
  xpc_release(v48);
  if (SHIBYTE(v83) < 0)
  {
    operator delete((void *)__dst);
    if ((SHIBYTE(v79) & 0x80000000) == 0)
    {
LABEL_81:
      size_t v49 = strlen((const char *)v29);
      if (v49 <= 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_82;
      }
LABEL_133:
      std::string::__throw_length_error[abi:ne180100]();
    }
  }
  else if ((SHIBYTE(v79) & 0x80000000) == 0)
  {
    goto LABEL_81;
  }
  operator delete(__p);
  size_t v49 = strlen((const char *)v29);
  if (v49 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_133;
  }
LABEL_82:
  size_t v50 = v49;
  if (v49 >= 0x17)
  {
    uint64_t v52 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v49 | 7) != 0x17) {
      uint64_t v52 = v49 | 7;
    }
    uint64_t v53 = v52 + 1;
    uint64_t v51 = operator new(v52 + 1);
    size_t v78 = (std::__shared_weak_count *)v50;
    unint64_t v79 = v53 | 0x8000000000000000;
    std::string __p = v51;
    goto LABEL_88;
  }
  HIBYTE(v79) = v49;
  uint64_t v51 = &__p;
  if (v49) {
LABEL_88:
  }
    memmove(v51, v29, v50);
  int v54 = (const char *)*MEMORY[0x1E4F4C778];
  *((unsigned char *)v51 + v50) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v87, v54);
  ctu::cf::map_adapter::getString();
  MEMORY[0x1C8794290](&v87);
  if (v83 >= 0) {
    xpc_object_t v55 = (const char *)&__dst;
  }
  else {
    xpc_object_t v55 = (const char *)__dst;
  }
  xpc_object_t v56 = xpc_string_create(v55);
  if (!v56) {
    xpc_object_t v56 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, v54, v56);
  xpc_object_t v57 = xpc_null_create();
  xpc_release(v56);
  xpc_release(v57);
  if (SHIBYTE(v83) < 0)
  {
    operator delete((void *)__dst);
    if ((SHIBYTE(v79) & 0x80000000) == 0)
    {
LABEL_96:
      size_t v58 = strlen((const char *)v29);
      if (v58 <= 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_97;
      }
LABEL_136:
      std::string::__throw_length_error[abi:ne180100]();
    }
  }
  else if ((SHIBYTE(v79) & 0x80000000) == 0)
  {
    goto LABEL_96;
  }
  operator delete(__p);
  size_t v58 = strlen((const char *)v29);
  if (v58 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_136;
  }
LABEL_97:
  size_t v59 = v58;
  if (v58 >= 0x17)
  {
    uint64_t v61 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v58 | 7) != 0x17) {
      uint64_t v61 = v58 | 7;
    }
    uint64_t v62 = v61 + 1;
    uint64_t v60 = operator new(v61 + 1);
    size_t v78 = (std::__shared_weak_count *)v59;
    unint64_t v79 = v62 | 0x8000000000000000;
    std::string __p = v60;
    goto LABEL_103;
  }
  HIBYTE(v79) = v58;
  uint64_t v60 = &__p;
  if (v58) {
LABEL_103:
  }
    memmove(v60, v29, v59);
  size_t v63 = (const char *)*MEMORY[0x1E4F4C2A0];
  *((unsigned char *)v60 + v59) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v87, v63);
  ctu::cf::map_adapter::getString();
  MEMORY[0x1C8794290](&v87);
  if (v83 >= 0) {
    size_t v64 = (const char *)&__dst;
  }
  else {
    size_t v64 = (const char *)__dst;
  }
  xpc_object_t v65 = xpc_string_create(v64);
  if (!v65) {
    xpc_object_t v65 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, v63, v65);
  xpc_object_t v66 = xpc_null_create();
  xpc_release(v65);
  xpc_release(v66);
  if (SHIBYTE(v83) < 0)
  {
    operator delete((void *)__dst);
    if ((SHIBYTE(v79) & 0x80000000) == 0)
    {
LABEL_111:
      size_t v67 = strlen((const char *)v29);
      if (v67 <= 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_112;
      }
LABEL_139:
      std::string::__throw_length_error[abi:ne180100]();
    }
  }
  else if ((SHIBYTE(v79) & 0x80000000) == 0)
  {
    goto LABEL_111;
  }
  operator delete(__p);
  size_t v67 = strlen((const char *)v29);
  if (v67 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_139;
  }
LABEL_112:
  size_t v68 = v67;
  if (v67 >= 0x17)
  {
    uint64_t v70 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v67 | 7) != 0x17) {
      uint64_t v70 = v67 | 7;
    }
    uint64_t v71 = v70 + 1;
    size_t v69 = operator new(v70 + 1);
    size_t v78 = (std::__shared_weak_count *)v68;
    unint64_t v79 = v71 | 0x8000000000000000;
    std::string __p = v69;
  }
  else
  {
    HIBYTE(v79) = v67;
    size_t v69 = &__p;
    if (!v67) {
      goto LABEL_119;
    }
  }
  memmove(v69, v29, v68);
LABEL_119:
  size_t v72 = (const char *)*MEMORY[0x1E4F4C780];
  *((unsigned char *)v69 + v68) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v87, v72);
  ctu::cf::map_adapter::getString();
  MEMORY[0x1C8794290](&v87);
  if (v83 >= 0) {
    uint64_t v73 = (const char *)&__dst;
  }
  else {
    uint64_t v73 = (const char *)__dst;
  }
  xpc_object_t v74 = xpc_string_create(v73);
  if (!v74) {
    xpc_object_t v74 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, v72, v74);
  xpc_object_t v75 = xpc_null_create();
  xpc_release(v74);
  xpc_release(v75);
  if (SHIBYTE(v83) < 0)
  {
    operator delete((void *)__dst);
    if ((SHIBYTE(v79) & 0x80000000) == 0)
    {
LABEL_126:
      MEMORY[0x1C87942E0](v80);
      CFTypeRef v76 = v81;
      if (!v81) {
        goto LABEL_143;
      }
      goto LABEL_142;
    }
  }
  else if ((SHIBYTE(v79) & 0x80000000) == 0)
  {
    goto LABEL_126;
  }
  operator delete(__p);
  MEMORY[0x1C87942E0](v80);
  CFTypeRef v76 = v81;
  if (v81) {
LABEL_142:
  }
    CFRelease(v76);
LABEL_143:
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>((uint64_t *)(a1 + 40), &v86, &xdict);
  xpc_release(xdict);
}

void sub_1C5AB1CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, const void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,xpc_object_t object)
{
  MEMORY[0x1C8794290](v23 - 72);
  if (a14 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C87942E0](&a15);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a17);
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_25(void *a1, uint64_t a2, void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = a1[4];
    xpc_object_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      size_t v8 = v7;
      if (a1[5])
      {
        v10[0] = MEMORY[0x1E4F143A8];
        v10[1] = 1174405120;
        _DWORD v10[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_26;
        v10[3] = &__block_descriptor_tmp_32_1;
        void v10[4] = v6;
        xpc_object_t v9 = *a3;
        if (*a3) {
          xpc_object_t v9 = _Block_copy(v9);
        }
        long long aBlock = v9;
        ctu::SharedSynchronizable<RadioModule>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v10);
        if (aBlock) {
          _Block_release(aBlock);
        }
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_26(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 32);
  if ((*(unsigned int (**)(void *))(*v2 + 88))(v2))
  {
    memset(__p, 170, 24);
    uint64_t v3 = (const void *)*MEMORY[0x1E4F4D058];
    size_t v4 = strlen((const char *)*MEMORY[0x1E4F4D058]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v5 = v4;
    if (v4 >= 0x17)
    {
      uint64_t v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17) {
        uint64_t v9 = v4 | 7;
      }
      uint64_t v10 = v9 + 1;
      p_dst = (std::string *)operator new(v9 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_16:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        xpc_object_t v11 = (char *)operator new(0x28uLL);
        strcpy(v11, " rejected; ABM is shutting down ");
        xpc_object_t v12 = std::string::append(&__dst, v11, 0x20uLL);
        long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
        std::string __p[2] = (void *)v12->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v13;
        v12->__r_.__value_.__l.__size_ = 0;
        v12->__r_.__value_.__r.__words[2] = 0;
        v12->__r_.__value_.__r.__words[0] = 0;
        operator delete(v11);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          long long v14 = v2[11];
          if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
LABEL_18:
            uint64_t v16 = *(void *)(a1 + 40);
            size_t v15 = (uint64_t *)(a1 + 40);
            if (!v16)
            {
LABEL_40:
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              return;
            }
LABEL_24:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            size_t v19 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0) {
              size_t v19 = __p[1];
            }
            if (v19)
            {
              xpc_object_t v20 = xpc_dictionary_create(0, 0, 0);
              if (v20 || (xpc_object_t v20 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8795EB0](v20) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v20);
                  xpc_object_t v21 = v20;
                }
                else
                {
                  xpc_object_t v21 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v21 = xpc_null_create();
                xpc_object_t v20 = 0;
              }
              xpc_release(v20);
              xpc_object_t v22 = xpc_null_create();
              uint64_t v23 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
              xpc_release(v23);
              xpc_release(v22);
              if (SHIBYTE(__p[2]) >= 0) {
                uint64_t v24 = __p;
              }
              else {
                uint64_t v24 = (void **)__p[0];
              }
              xpc_object_t v25 = xpc_string_create((const char *)v24);
              if (!v25) {
                xpc_object_t v25 = xpc_null_create();
              }
              xpc_dictionary_set_value(v21, (const char *)*MEMORY[0x1E4F4C240], v25);
              xpc_object_t v26 = xpc_null_create();
              xpc_release(v25);
              xpc_release(v26);
            }
            unsigned int v30 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v15, &v30, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_40;
          }
        }
        else
        {
          long long v14 = v2[11];
          if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_18;
          }
        }
        long long v17 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          long long v17 = (void **)__p[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
        _os_log_impl(&dword_1C59C6000, v14, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        uint64_t v18 = *(void *)(a1 + 40);
        size_t v15 = (uint64_t *)(a1 + 40);
        if (!v18) {
          goto LABEL_40;
        }
        goto LABEL_24;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_16;
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_27;
  aBlock[3] = &__block_descriptor_tmp_29_0;
  xpc_object_t v7 = *(void **)(a1 + 40);
  if (v7) {
    xpc_object_t v7 = _Block_copy(v7);
  }
  CFDictionaryRef v28 = v7;
  size_t v8 = _Block_copy(aBlock);
  xpc_object_t v29 = v8;
  RadioModule::getOperatingMode_sync((uint64_t)v2, &v29);
  if (v8) {
    _Block_release(v8);
  }
  if (v28) {
    _Block_release(v28);
  }
}

void sub_1C5AB232C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void RadioModule::getOperatingMode_sync(uint64_t a1, void **a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v3 || (uint64_t v5 = *(void *)(a1 + 120), (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v33 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v34 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule21getOperatingMode_syncEN8dispatch5blockIU13block_pointerFviEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_178;
  void aBlock[4] = a1;
  void aBlock[5] = v5;
  size_t v31 = v7;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v9 = *a2;
  if (*a2) {
    uint64_t v9 = _Block_copy(v9);
  }
  uint64_t v32 = v9;
  uint64_t v10 = _Block_copy(aBlock);
  xpc_object_t v11 = *(NSObject **)(a1 + 136);
  if (v11) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
  }
  uint64_t v33 = v10;
  dispatch_object_t v34 = v11;
  unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v29 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v12 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v13 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)buf, v12);
    long long v14 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    size_t v15 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v14;
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    uint64_t v16 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    uint64_t v13 = off_1EBBDCA08;
  }
  long long v17 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  uint64_t v24 = v13;
  uint64_t v25 = *(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v13 + 16))(&v26, v13);
  unint64_t v28 = 0;
  xpc_object_t v29 = 0;
  if (v27)
  {
    xpc_object_t v29 = std::__shared_weak_count::lock(v27);
    if (v29) {
      unint64_t v28 = v26;
    }
    if (v27) {
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    unint64_t v18 = v28;
    if (!v28) {
      goto LABEL_37;
    }
  }
  else
  {
    unint64_t v18 = v28;
    if (!v28) {
      goto LABEL_37;
    }
  }
  size_t v19 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C59C6000, v19, OS_LOG_TYPE_DEFAULT, "#I Request to get operating mode", buf, 2u);
  }
  xpc_object_t v20 = v33;
  if (v33) {
    xpc_object_t v20 = _Block_copy(v33);
  }
  xpc_object_t v22 = v20;
  dispatch_object_t object = v34;
  if (v34) {
    dispatch_retain(v34);
  }
  (*(void (**)(unint64_t, void **))(*(void *)v18 + 160))(v18, &v22);
  if (object) {
    dispatch_release(object);
  }
  if (v22) {
    _Block_release(v22);
  }
LABEL_37:
  xpc_object_t v21 = v29;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  if (v34) {
    dispatch_release(v34);
  }
  if (v33) {
    _Block_release(v33);
  }
  if (v32) {
    _Block_release(v32);
  }
  if (v31) {
    std::__shared_weak_count::__release_weak(v31);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1C5AB27F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *aBlock)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v25 - 80);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a23) {
    std::__shared_weak_count::__release_weak(a23);
  }
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_27(uint64_t a1, int a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    xpc_object_t xdict = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t xdict = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8795EB0](v5) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  xpc_object_t xdict = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v7 = xpc_int64_create(a2);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4CB50], v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  unsigned int v9 = (a2 >> 31) & 0xE020E002;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 32), &v9, &xdict);
  xpc_release(xdict);
}

void sub_1C5AB29AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_36(void *a1, xpc_object_t *a2, void (***a3)(void *, uint64_t, xpc_object_t *))
{
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    xpc_object_t v8 = std::__shared_weak_count::lock(v4);
    unint64_t v26 = v8;
    if (v8)
    {
      unsigned int v9 = v8;
      if (a1[5])
      {
        xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C0F8]);
        xpc_object_t v27 = value;
        if (value) {
          xpc_retain(value);
        }
        else {
          xpc_object_t v27 = xpc_null_create();
        }
        int v11 = xpc::dyn_cast_or_default((xpc *)&v27, (const object *)0x2710);
        xpc_release(v27);
        xpc_object_t v12 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4CB50]);
        xpc_object_t v27 = v12;
        if (v12) {
          xpc_retain(v12);
        }
        else {
          xpc_object_t v27 = xpc_null_create();
        }
        int v13 = xpc::dyn_cast_or_default((xpc *)&v27, (const object *)0xFFFFFFFFLL);
        xpc_release(v27);
        xpc_object_t v14 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4CF60]);
        xpc_object_t v27 = v14;
        if (v14) {
          xpc_retain(v14);
        }
        else {
          xpc_object_t v27 = xpc_null_create();
        }
        char v15 = xpc::dyn_cast_or_default((xpc *)&v27, 0);
        xpc_release(v27);
        if (v13 < 0)
        {
          xpc_object_t v17 = xpc_null_create();
          unint64_t v18 = *a3;
          xpc_object_t v27 = v17;
          xpc_object_t v19 = xpc_null_create();
          v18[2](v18, 3760250882, &v27);
          xpc_release(v27);
          xpc_release(v19);
        }
        else
        {
          v20[0] = MEMORY[0x1E4F143A8];
          v20[1] = 1174405120;
          unint64_t v20[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_37;
          v20[3] = &__block_descriptor_tmp_45_2;
          uint8_t v20[4] = v7;
          uint64_t v16 = *a3;
          if (*a3) {
            uint64_t v16 = (void (**)(void *, uint64_t, xpc_object_t *))_Block_copy(v16);
          }
          long long aBlock = v16;
          int v22 = v11;
          int v23 = v13;
          char v24 = v15;
          ctu::SharedSynchronizable<RadioModule>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v20);
          if (aBlock) {
            _Block_release(aBlock);
          }
        }
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1C5AB2C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  xpc_release(*(xpc_object_t *)(v11 - 56));
  xpc_release(v10);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_37(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 32);
  if ((*(unsigned int (**)(void *))(*v2 + 88))(v2))
  {
    memset(__p, 170, 24);
    uint64_t v3 = (const void *)*MEMORY[0x1E4F4D068];
    size_t v4 = strlen((const char *)*MEMORY[0x1E4F4D068]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v5 = v4;
    if (v4 >= 0x17)
    {
      uint64_t v12 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17) {
        uint64_t v12 = v4 | 7;
      }
      uint64_t v13 = v12 + 1;
      p_dst = (std::string *)operator new(v12 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_16:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        xpc_object_t v14 = (char *)operator new(0x28uLL);
        strcpy(v14, " rejected; ABM is shutting down ");
        char v15 = std::string::append(&__dst, v14, 0x20uLL);
        long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        std::string __p[2] = (void *)v15->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        operator delete(v14);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          xpc_object_t v17 = v2[11];
          if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
LABEL_18:
            uint64_t v19 = *(void *)(a1 + 40);
            unint64_t v18 = (uint64_t *)(a1 + 40);
            if (!v19)
            {
LABEL_40:
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              return;
            }
LABEL_24:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            int v22 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0) {
              int v22 = __p[1];
            }
            if (v22)
            {
              xpc_object_t v23 = xpc_dictionary_create(0, 0, 0);
              if (v23 || (xpc_object_t v23 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8795EB0](v23) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v23);
                  xpc_object_t v24 = v23;
                }
                else
                {
                  xpc_object_t v24 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v24 = xpc_null_create();
                xpc_object_t v23 = 0;
              }
              xpc_release(v23);
              xpc_object_t v25 = xpc_null_create();
              unint64_t v26 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
              xpc_release(v26);
              xpc_release(v25);
              if (SHIBYTE(__p[2]) >= 0) {
                xpc_object_t v27 = __p;
              }
              else {
                xpc_object_t v27 = (void **)__p[0];
              }
              xpc_object_t v28 = xpc_string_create((const char *)v27);
              if (!v28) {
                xpc_object_t v28 = xpc_null_create();
              }
              xpc_dictionary_set_value(v24, (const char *)*MEMORY[0x1E4F4C240], v28);
              xpc_object_t v29 = xpc_null_create();
              xpc_release(v28);
              xpc_release(v29);
            }
            unsigned int v33 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v18, &v33, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_40;
          }
        }
        else
        {
          xpc_object_t v17 = v2[11];
          if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_18;
          }
        }
        xpc_object_t v20 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          xpc_object_t v20 = (void **)__p[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v20;
        _os_log_impl(&dword_1C59C6000, v17, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        uint64_t v21 = *(void *)(a1 + 40);
        unint64_t v18 = (uint64_t *)(a1 + 40);
        if (!v21) {
          goto LABEL_40;
        }
        goto LABEL_24;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_16;
  }
  unsigned int v7 = *(_DWORD *)(a1 + 48);
  int v8 = *(_DWORD *)(a1 + 52);
  int v9 = *(unsigned __int8 *)(a1 + 56);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_38;
  aBlock[3] = &__block_descriptor_tmp_42_1;
  uint64_t v10 = *(void **)(a1 + 40);
  if (v10) {
    uint64_t v10 = _Block_copy(v10);
  }
  size_t v31 = v10;
  uint64_t v11 = _Block_copy(aBlock);
  uint64_t v32 = v11;
  RadioModule::setOperatingMode_sync(v2, v7, v8, v9 != 0, &v32);
  if (v11) {
    _Block_release(v11);
  }
  if (v31) {
    _Block_release(v31);
  }
}

void sub_1C5AB30EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void RadioModule::setOperatingMode_sync(void *a1, unsigned int a2, uint64_t a3, int a4, void **a5)
{
  xpc_object_t v6 = (std::__shared_weak_count *)a1[16];
  if (!v6 || (v11 = a1[15], (uint64_t v12 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v13 = v12;
  p_shared_weak_owners = &v12->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  size_t v41 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v42 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule21setOperatingMode_syncEjN5radio13OperatingModeEbN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_197_0;
  void aBlock[4] = a1;
  void aBlock[5] = v11;
  xpc_object_t v39 = v13;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  char v15 = *a5;
  if (*a5) {
    char v15 = _Block_copy(v15);
  }
  size_t v40 = v15;
  long long v16 = _Block_copy(aBlock);
  xpc_object_t v17 = a1[17];
  if (v17) {
    dispatch_retain(v17);
  }
  size_t v41 = v16;
  dispatch_object_t v42 = v17;
  unint64_t v36 = 0xAAAAAAAAAAAAAAAALL;
  std::string v37 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v18 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v19 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v43, v18);
    long long v20 = v43;
    long long v43 = 0uLL;
    uint64_t v21 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v20;
    if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
    int v22 = (std::__shared_weak_count *)*((void *)&v43 + 1);
    if (*((void *)&v43 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v43 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    uint64_t v19 = off_1EBBDCA08;
  }
  xpc_object_t v23 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  uint64_t v32 = v19;
  uint64_t v33 = *(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v19 + 16))(&v34, v19);
  unint64_t v36 = 0;
  std::string v37 = 0;
  if (v35)
  {
    std::string v37 = std::__shared_weak_count::lock(v35);
    if (v37) {
      unint64_t v36 = v34;
    }
    if (v35) {
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    unint64_t v24 = v36;
    if (!v36) {
      goto LABEL_45;
    }
  }
  else
  {
    unint64_t v24 = v36;
    if (!v36) {
      goto LABEL_45;
    }
  }
  uint64_t v25 = 1000000 * a2;
  unint64_t v26 = v41;
  if (a4)
  {
    if (v41) {
      unint64_t v26 = _Block_copy(v41);
    }
    unsigned int v30 = v26;
    dispatch_object_t object = v42;
    if (v42) {
      dispatch_retain(v42);
    }
    (*(void (**)(unint64_t, uint64_t, uint64_t, void **))(*(void *)v24 + 152))(v24, v25, a3, &v30);
    if (object) {
      dispatch_release(object);
    }
    if (v30) {
      _Block_release(v30);
    }
  }
  else
  {
    if (v41) {
      unint64_t v26 = _Block_copy(v41);
    }
    xpc_object_t v28 = v26;
    dispatch_object_t v29 = v42;
    if (v42) {
      dispatch_retain(v42);
    }
    (*(void (**)(unint64_t, uint64_t, uint64_t, void **))(*(void *)v24 + 144))(v24, v25, a3, &v28);
    if (v29) {
      dispatch_release(v29);
    }
    if (v28) {
      _Block_release(v28);
    }
  }
LABEL_45:
  xpc_object_t v27 = v37;
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  if (v42) {
    dispatch_release(v42);
  }
  if (v41) {
    _Block_release(v41);
  }
  if (v40) {
    _Block_release(v40);
  }
  if (v39) {
    std::__shared_weak_count::__release_weak(v39);
  }
  std::__shared_weak_count::__release_weak(v13);
}

void sub_1C5AB362C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,void *aBlock)
{
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v27 - 112);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a25) {
    std::__shared_weak_count::__release_weak(a25);
  }
  std::__shared_weak_count::__release_weak(v26);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_38(uint64_t a1, int a2)
{
  if (a2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = 3760250880;
  }
  xpc_object_t v4 = xpc_null_create();
  uint64_t v5 = *(void *)(a1 + 32);
  xpc_object_t object = v4;
  xpc_object_t v6 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v5 + 16))(v5, v3, &object);
  xpc_release(object);
  xpc_release(v6);
}

void sub_1C5AB3748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_49(void *a1, uint64_t a2, const void **a3)
{
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = a1[4];
    unsigned int v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      int v8 = v7;
      uint64_t v9 = a1[5];
      if (!v9)
      {
LABEL_11:
        if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      v14[0] = MEMORY[0x1E4F143A8];
      v14[1] = 1174405120;
      uint64_t v14[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_50;
      v14[3] = &__block_descriptor_tmp_57_1;
      void v14[4] = v6;
      if (*a3)
      {
        uint64_t v10 = _Block_copy(*a3);
        uint64_t v11 = a1[5];
        uint64_t v12 = (uint64_t *)(v6 + 120);
        long long aBlock = v10;
        uint64_t v16 = v11;
        uint64_t v13 = (std::__shared_weak_count *)a1[6];
        xpc_object_t v17 = v13;
        if (!v13)
        {
LABEL_7:
          ctu::SharedSynchronizable<RadioModule>::execute_wrapped(v12, (uint64_t)v14);
          if (v17) {
            std::__shared_weak_count::__release_weak(v17);
          }
          if (aBlock) {
            _Block_release(aBlock);
          }
          goto LABEL_11;
        }
      }
      else
      {
        uint64_t v12 = (uint64_t *)(v6 + 120);
        long long aBlock = 0;
        uint64_t v16 = v9;
        uint64_t v13 = (std::__shared_weak_count *)a1[6];
        xpc_object_t v17 = v13;
        if (!v13) {
          goto LABEL_7;
        }
      }
      atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      goto LABEL_7;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_50(void *a1)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)a1[4];
  if ((*(unsigned int (**)(void *))(*v2 + 88))(v2))
  {
    memset(__p, 170, 24);
    uint64_t v3 = (const void *)*MEMORY[0x1E4F4D050];
    size_t v4 = strlen((const char *)*MEMORY[0x1E4F4D050]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v5 = v4;
    if (v4 >= 0x17)
    {
      uint64_t v21 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17) {
        uint64_t v21 = v4 | 7;
      }
      uint64_t v22 = v21 + 1;
      p_dst = (std::string *)operator new(v21 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_53:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        xpc_object_t v23 = (char *)operator new(0x28uLL);
        strcpy(v23, " rejected; ABM is shutting down ");
        unint64_t v24 = std::string::append(&__dst, v23, 0x20uLL);
        long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        std::string __p[2] = (void *)v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        operator delete(v23);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          unint64_t v26 = v2[11];
          if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
LABEL_55:
            uint64_t v28 = a1[5];
            uint64_t v27 = a1 + 5;
            if (!v28)
            {
LABEL_79:
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              return;
            }
LABEL_61:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            size_t v31 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0) {
              size_t v31 = __p[1];
            }
            if (v31)
            {
              xpc_object_t v32 = xpc_dictionary_create(0, 0, 0);
              if (v32 || (xpc_object_t v32 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8795EB0](v32) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v32);
                  xpc_object_t v33 = v32;
                }
                else
                {
                  xpc_object_t v33 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v33 = xpc_null_create();
                xpc_object_t v32 = 0;
              }
              xpc_release(v32);
              xpc_object_t v34 = xpc_null_create();
              uint64_t v35 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
              xpc_release(v35);
              xpc_release(v34);
              if (SHIBYTE(__p[2]) >= 0) {
                unint64_t v36 = __p;
              }
              else {
                unint64_t v36 = (void **)__p[0];
              }
              xpc_object_t v37 = xpc_string_create((const char *)v36);
              if (!v37) {
                xpc_object_t v37 = xpc_null_create();
              }
              xpc_dictionary_set_value(v33, (const char *)*MEMORY[0x1E4F4C240], v37);
              xpc_object_t v38 = xpc_null_create();
              xpc_release(v37);
              xpc_release(v38);
            }
            LODWORD(v45) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v27, (unsigned int *)&v45, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_79;
          }
        }
        else
        {
          unint64_t v26 = v2[11];
          if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_55;
          }
        }
        dispatch_object_t v29 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          dispatch_object_t v29 = (void **)__p[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
        _os_log_impl(&dword_1C59C6000, v26, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        uint64_t v30 = a1[5];
        uint64_t v27 = a1 + 5;
        if (!v30) {
          goto LABEL_79;
        }
        goto LABEL_61;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_53;
  }
  __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  __dst.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_51;
  aBlock[3] = &__block_descriptor_tmp_54_1;
  uint64_t v8 = a1[6];
  unsigned int v7 = (std::__shared_weak_count *)a1[7];
  void aBlock[4] = v2;
  void aBlock[5] = v8;
  xpc_object_t v48 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (void *)a1[5];
  if (v9) {
    uint64_t v9 = _Block_copy(v9);
  }
  size_t v49 = v9;
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = v2[17];
  if (v11) {
    dispatch_retain(v11);
  }
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
  unint64_t v45 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v46 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v12 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v13 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)__p, v12);
    long long v14 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    char v15 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v14;
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    uint64_t v16 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    uint64_t v13 = off_1EBBDCA08;
  }
  xpc_object_t v17 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  uint64_t v41 = v13;
  uint64_t v42 = *(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v13 + 16))(&v43, v13);
  unint64_t v45 = 0;
  uint64_t v46 = 0;
  if (v44)
  {
    uint64_t v46 = std::__shared_weak_count::lock(v44);
    if (v46) {
      unint64_t v45 = v43;
    }
    if (v44) {
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    unint64_t v18 = v45;
    if (v45) {
      goto LABEL_30;
    }
  }
  else
  {
    unint64_t v18 = v45;
    if (v45)
    {
LABEL_30:
      uint64_t v19 = (void *)__dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__r.__words[0]) {
        uint64_t v19 = _Block_copy(__dst.__r_.__value_.__l.__data_);
      }
      xpc_object_t v39 = v19;
      dispatch_object_t object = (dispatch_object_t)__dst.__r_.__value_.__l.__size_;
      if (__dst.__r_.__value_.__l.__size_) {
        dispatch_retain((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
      }
      (*(void (**)(unint64_t, void **))(*(void *)v18 + 104))(v18, &v39);
      if (object) {
        dispatch_release(object);
      }
      if (v39) {
        _Block_release(v39);
      }
    }
  }
  long long v20 = v46;
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  if (__dst.__r_.__value_.__l.__size_) {
    dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
  }
  if (__dst.__r_.__value_.__r.__words[0]) {
    _Block_release(__dst.__r_.__value_.__l.__data_);
  }
  if (v49) {
    _Block_release(v49);
  }
  if (v48) {
    std::__shared_weak_count::__release_weak(v48);
  }
}

void sub_1C5AB3F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *aBlock,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_51(void *a1, uint64_t *a2, ctu **a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    long long v25 = v8;
    if (v8)
    {
      uint64_t v9 = v8;
      if (!a1[5]) {
        goto LABEL_23;
      }
      xpc_object_t v11 = xpc_null_create();
      xpc_object_t object = v11;
      unsigned int v22 = -534716416;
      uint64_t v12 = *a2;
      if (v12) {
        uint64_t v13 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      }
      else {
        uint64_t v13 = 0;
      }
      if (v13)
      {
        long long v14 = *(NSObject **)(v7 + 88);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138412290;
          *(void *)&uint8_t buf[4] = v12;
          char v15 = "%@";
          uint64_t v16 = v14;
          uint32_t v17 = 12;
LABEL_10:
          _os_log_error_impl(&dword_1C59C6000, v16, OS_LOG_TYPE_ERROR, v15, buf, v17);
        }
      }
      else
      {
        if (*a3) {
          unint64_t v18 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
        }
        else {
          unint64_t v18 = 0;
        }
        if (v18)
        {
          ctu::cf_to_xpc((uint64_t *)buf, *a3, v10);
          xpc_object_t v19 = *(xpc_object_t *)buf;
          if (*(void *)buf && MEMORY[0x1C8795EB0](*(void *)buf) == MEMORY[0x1E4F14590]) {
            xpc_retain(v19);
          }
          else {
            xpc_object_t v19 = xpc_null_create();
          }
          xpc_object_t v21 = xpc_null_create();
          xpc_object_t object = v19;
          xpc_release(v11);
          xpc_release(v21);
          xpc_release(*(xpc_object_t *)buf);
          unsigned int v22 = 0;
          goto LABEL_22;
        }
        long long v20 = *(NSObject **)(v7 + 88);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          char v15 = "Empty response received with no error";
          uint64_t v16 = v20;
          uint32_t v17 = 2;
          goto LABEL_10;
        }
      }
LABEL_22:
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(a1 + 7, &v22, &object);
      xpc_release(object);
LABEL_23:
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1C5AB42A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_61(void *a1, uint64_t a2, void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = a1[4];
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      if (a1[5])
      {
        v10[0] = MEMORY[0x1E4F143A8];
        v10[1] = 1174405120;
        _DWORD v10[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_62;
        v10[3] = &__block_descriptor_tmp_65_0;
        void v10[4] = v6;
        uint64_t v9 = *a3;
        if (*a3) {
          uint64_t v9 = _Block_copy(v9);
        }
        long long aBlock = v9;
        ctu::SharedSynchronizable<RadioModule>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v10);
        if (aBlock) {
          _Block_release(aBlock);
        }
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_62(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unsigned int v2 = 0;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), &v2, (void **)(v1 + 248));
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_69(void *a1, void **a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      if (!a1[5])
      {
LABEL_12:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v14[0] = MEMORY[0x1E4F143A8];
      v14[1] = 1174405120;
      uint64_t v14[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_70;
      v14[3] = &__block_descriptor_tmp_77;
      void v14[4] = v7;
      if (*a3)
      {
        uint64_t v10 = _Block_copy(*a3);
        xpc_object_t v11 = *a2;
        long long aBlock = v10;
        xpc_object_t object = v11;
        if (v11) {
          goto LABEL_6;
        }
      }
      else
      {
        xpc_object_t v11 = *a2;
        long long aBlock = 0;
        xpc_object_t object = v11;
        if (v11)
        {
LABEL_6:
          xpc_retain(v11);
          uint64_t v12 = (uint64_t *)(v7 + 120);
          uint64_t v13 = (std::__shared_weak_count *)a1[6];
          uint64_t v17 = a1[5];
          unint64_t v18 = v13;
          if (!v13)
          {
LABEL_8:
            ctu::SharedSynchronizable<RadioModule>::execute_wrapped(v12, (uint64_t)v14);
            if (v18) {
              std::__shared_weak_count::__release_weak(v18);
            }
            xpc_release(object);
            xpc_object_t object = 0;
            if (aBlock) {
              _Block_release(aBlock);
            }
            goto LABEL_12;
          }
LABEL_7:
          atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_8;
        }
      }
      xpc_object_t object = xpc_null_create();
      uint64_t v12 = (uint64_t *)(v7 + 120);
      uint64_t v13 = (std::__shared_weak_count *)a1[6];
      uint64_t v17 = a1[5];
      unint64_t v18 = v13;
      if (!v13) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_70(void *a1)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = (void *)a1[4];
  if ((*(unsigned int (**)(void *))(*v2 + 88))(v2))
  {
    memset(object, 170, 24);
    uint64_t v3 = (const void *)*MEMORY[0x1E4F4CDD8];
    size_t v4 = strlen((const char *)*MEMORY[0x1E4F4CDD8]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v5 = v4;
    if (v4 >= 0x17)
    {
      uint64_t v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17) {
        uint64_t v10 = v4 | 7;
      }
      uint64_t v11 = v10 + 1;
      p_dst = (std::string *)operator new(v10 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_12:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        uint64_t v12 = (char *)operator new(0x28uLL);
        strcpy(v12, " rejected; ABM is shutting down ");
        uint64_t v13 = std::string::append(&__dst, v12, 0x20uLL);
        long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        xpc_object_t object[2] = (xpc_object_t)v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)xpc_object_t object = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        operator delete(v12);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          char v15 = v2[11];
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
LABEL_14:
            uint64_t v17 = a1[5];
            uint64_t v16 = a1 + 5;
            if (!v17)
            {
LABEL_83:
              if (SHIBYTE(object[2]) < 0) {
                operator delete(object[0]);
              }
              return;
            }
LABEL_41:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            xpc_object_t v29 = (xpc_object_t)HIBYTE(object[2]);
            if (SHIBYTE(object[2]) < 0) {
              xpc_object_t v29 = object[1];
            }
            if (v29)
            {
              xpc_object_t v30 = xpc_dictionary_create(0, 0, 0);
              if (v30 || (xpc_object_t v30 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8795EB0](v30) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v30);
                  xpc_object_t v31 = v30;
                }
                else
                {
                  xpc_object_t v31 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v31 = xpc_null_create();
                xpc_object_t v30 = 0;
              }
              xpc_release(v30);
              xpc_object_t v40 = xpc_null_create();
              uint64_t v41 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
              xpc_release(v41);
              xpc_release(v40);
              if (SHIBYTE(object[2]) >= 0) {
                uint64_t v42 = object;
              }
              else {
                uint64_t v42 = (xpc_object_t *)object[0];
              }
              xpc_object_t v43 = xpc_string_create((const char *)v42);
              if (!v43) {
                xpc_object_t v43 = xpc_null_create();
              }
              xpc_dictionary_set_value(v31, (const char *)*MEMORY[0x1E4F4C240], v43);
              xpc_object_t v44 = xpc_null_create();
              xpc_release(v43);
              xpc_release(v44);
            }
            LODWORD(v51) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v16, (unsigned int *)&v51, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_83;
          }
        }
        else
        {
          char v15 = v2[11];
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_14;
          }
        }
        uint64_t v27 = object;
        if (SHIBYTE(object[2]) < 0) {
          uint64_t v27 = (xpc_object_t *)object[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
        _os_log_impl(&dword_1C59C6000, v15, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        uint64_t v28 = a1[5];
        uint64_t v16 = a1 + 5;
        if (!v28) {
          goto LABEL_83;
        }
        goto LABEL_41;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_12;
  }
  if (MEMORY[0x1C8795EB0](a1[6]) == MEMORY[0x1E4F14590])
  {
    __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    __dst.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v18 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    xpc_object_t v19 = (const void *)off_1EBBDCA08;
    if (!off_1EBBDCA08)
    {
      CommandDriverFactory::create_default_global((uint64_t *)object, v18);
      long long v20 = *(_OWORD *)object;
      object[0] = 0;
      object[1] = 0;
      xpc_object_t v21 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
      off_1EBBDCA08 = v20;
      if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
      unsigned int v22 = (std::__shared_weak_count *)object[1];
      if (object[1] && !atomic_fetch_add((atomic_ullong *volatile)object[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
      xpc_object_t v19 = (const void *)off_1EBBDCA08;
    }
    xpc_object_t v23 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    cf[1] = v19;
    cf[2] = *((CFTypeRef *)&off_1EBBDCA08 + 1);
    if (*(&off_1EBBDCA08 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    (*(void (**)(xpc_object_t *__return_ptr, const void *))(*(void *)v19 + 16))(&v51, v19);
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
    if (v52)
    {
      __dst.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v52);
      if (__dst.__r_.__value_.__l.__size_) {
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
      }
      if (v52) {
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    std::string::size_type v24 = __dst.__r_.__value_.__r.__words[0];
    if (__dst.__r_.__value_.__r.__words[0])
    {
      long long v25 = (void *)a1[6];
      xpc_object_t v51 = v25;
      if (v25) {
        xpc_retain(v25);
      }
      else {
        xpc_object_t v51 = xpc_null_create();
      }
      xpc::bridge((uint64_t *)object, (xpc *)&v51, v26);
      xpc_object_t v32 = object[0];
      if (object[0] && (CFTypeID v33 = CFGetTypeID(object[0]), v33 == CFDictionaryGetTypeID()))
      {
        cf[0] = v32;
        CFRetain(v32);
      }
      else
      {
        cf[0] = 0;
      }
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1174405120;
      aBlock[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_71;
      aBlock[3] = &__block_descriptor_tmp_76_3;
      uint64_t v35 = a1[7];
      xpc_object_t v34 = (std::__shared_weak_count *)a1[8];
      void aBlock[4] = v2;
      void aBlock[5] = v35;
      uint64_t v46 = v34;
      if (v34) {
        atomic_fetch_add_explicit(&v34->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v36 = (void *)a1[5];
      if (v36) {
        unint64_t v36 = _Block_copy(v36);
      }
      xpc_object_t v47 = v36;
      xpc_object_t v37 = _Block_copy(aBlock);
      xpc_object_t v38 = v2[17];
      if (v38) {
        dispatch_retain(v38);
      }
      xpc_object_t v48 = v37;
      dispatch_object_t v49 = v38;
      (*(void (**)(std::string::size_type, CFTypeRef *, void **))(*(void *)v24 + 192))(v24, cf, &v48);
      if (v49) {
        dispatch_release(v49);
      }
      if (v48) {
        _Block_release(v48);
      }
      if (cf[0]) {
        CFRelease(cf[0]);
      }
      if (object[0]) {
        CFRelease(object[0]);
      }
      xpc_release(v51);
      if (v47) {
        _Block_release(v47);
      }
      if (v46) {
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    std::string::size_type size = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
    if (__dst.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(__dst.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  else
  {
    xpc_object_t v7 = xpc_null_create();
    uint64_t v8 = a1[5];
    object[0] = v7;
    xpc_object_t v9 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v8 + 16))(v8, 3760250882, object);
    xpc_release(object[0]);
    xpc_release(v9);
  }
}

void sub_1C5AB4CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *aBlock, char a18, uint64_t a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,xpc_object_t object,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1C5AB4E58(_Unwind_Exception *a1)
{
  operator delete(v1);
  if (*(char *)(v2 - 73) < 0)
  {
    operator delete(*(void **)(v2 - 96));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1C5AB4E48);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_71(void *a1, uint64_t *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = a1[4];
  uint64_t v6 = std::__shared_weak_count::lock(v3);
  xpc_object_t v34 = v6;
  if (!v6) {
    return;
  }
  if (!a1[5])
  {
    uint64_t v10 = v6;
LABEL_45:
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return;
  }
  uint64_t v7 = *a2;
  if (*a2) {
    uint64_t v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8)
  {
    xpc_object_t v9 = *(NSObject **)(v5 + 88);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v7;
      _os_log_error_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (!*(void *)(v5 + 176)) {
    goto LABEL_38;
  }
  xpc_object_t v11 = xpc_dictionary_create(0, 0, 0);
  if (v11 || (xpc_object_t v11 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v11) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v11);
      xpc_object_t v12 = v11;
    }
    else
    {
      xpc_object_t v12 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v12 = xpc_null_create();
    xpc_object_t v11 = 0;
  }
  xpc_release(v11);
  xpc_object_t v13 = xpc_string_create((const char *)*MEMORY[0x1E4F4C6F0]);
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E4F4C690], v13);
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  xpc_object_t v15 = xpc_string_create((const char *)*MEMORY[0x1E4F4D138]);
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E4F4CA38], v15);
  xpc_object_t v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  uint64_t v17 = (char *)operator new(0x38uLL);
  strcpy(v17, "User requested to change Baseband field test config");
  xpc_object_t v18 = xpc_string_create(v17);
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E4F4C8F0], v18);
  xpc_object_t v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  operator delete(v17);
  long long v20 = (const void *)*MEMORY[0x1E4F4C638];
  size_t v21 = strlen((const char *)*MEMORY[0x1E4F4C638]);
  if (v21 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v22 = v21;
  if (v21 >= 0x17)
  {
    uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v24 = v21 | 7;
    }
    uint64_t v25 = v24 + 1;
    p_long long buf = (long long *)operator new(v24 + 1);
    *((void *)&buf + 1) = v22;
    unint64_t v36 = v25 | 0x8000000000000000;
    *(void *)&long long buf = p_buf;
  }
  else
  {
    HIBYTE(v36) = v21;
    p_long long buf = &buf;
    if (!v21) {
      goto LABEL_32;
    }
  }
  memmove(p_buf, v20, v22);
LABEL_32:
  *((unsigned char *)p_buf + v22) = 0;
  xpc_object_t object = v12;
  if (v12) {
    xpc_retain(v12);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc_object_t v31 = 0;
  Service::runCommand(v5, (uint64_t)&buf, &object, &v31);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(v36) < 0) {
    operator delete((void *)buf);
  }
  xpc_release(v12);
LABEL_38:
  if (*a2) {
    unint64_t v26 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    unint64_t v26 = 0;
  }
  if (v26) {
    uint64_t v27 = 3760250880;
  }
  else {
    uint64_t v27 = 0;
  }
  xpc_object_t v28 = xpc_null_create();
  uint64_t v29 = a1[7];
  *(void *)&long long buf = v28;
  xpc_object_t v30 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, long long *))(v29 + 16))(v29, v27, &buf);
  xpc_release((xpc_object_t)buf);
  xpc_release(v30);
  uint64_t v10 = v34;
  if (v34) {
    goto LABEL_45;
  }
}

void sub_1C5AB52B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

xpc_object_t __copy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE48c15_ZTSN3xpc4dictE56c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(void *a1, void *a2)
{
  size_t v4 = (const void *)a2[5];
  if (v4)
  {
    uint64_t v5 = _Block_copy(v4);
    uint64_t v6 = (void *)a2[6];
    a1[5] = v5;
    a1[6] = v6;
    if (v6) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v6 = (void *)a2[6];
    a1[5] = 0;
    a1[6] = v6;
    if (v6)
    {
LABEL_3:
      xpc_object_t result = xpc_retain(v6);
      uint64_t v8 = a2[8];
      a1[7] = a2[7];
      a1[8] = v8;
      if (!v8) {
        return result;
      }
      goto LABEL_4;
    }
  }
  xpc_object_t result = xpc_null_create();
  a1[6] = result;
  uint64_t v8 = a2[8];
  a1[7] = a2[7];
  a1[8] = v8;
  if (!v8) {
    return result;
  }
LABEL_4:
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
  return result;
}

void __destroy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE48c15_ZTSN3xpc4dictE56c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(void *)(a1 + 48) = 0;
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_81(void *a1, void **a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      xpc_object_t v9 = v8;
      if (!a1[5])
      {
LABEL_12:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v14[0] = MEMORY[0x1E4F143A8];
      v14[1] = 1174405120;
      uint64_t v14[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_82;
      v14[3] = &__block_descriptor_tmp_89_1;
      void v14[4] = v7;
      if (*a3)
      {
        uint64_t v10 = _Block_copy(*a3);
        xpc_object_t v11 = *a2;
        long long aBlock = v10;
        xpc_object_t object = v11;
        if (v11) {
          goto LABEL_6;
        }
      }
      else
      {
        xpc_object_t v11 = *a2;
        long long aBlock = 0;
        xpc_object_t object = v11;
        if (v11)
        {
LABEL_6:
          xpc_retain(v11);
          xpc_object_t v12 = (uint64_t *)(v7 + 120);
          xpc_object_t v13 = (std::__shared_weak_count *)a1[6];
          uint64_t v17 = a1[5];
          xpc_object_t v18 = v13;
          if (!v13)
          {
LABEL_8:
            ctu::SharedSynchronizable<RadioModule>::execute_wrapped(v12, (uint64_t)v14);
            if (v18) {
              std::__shared_weak_count::__release_weak(v18);
            }
            xpc_release(object);
            xpc_object_t object = 0;
            if (aBlock) {
              _Block_release(aBlock);
            }
            goto LABEL_12;
          }
LABEL_7:
          atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_8;
        }
      }
      xpc_object_t object = xpc_null_create();
      xpc_object_t v12 = (uint64_t *)(v7 + 120);
      xpc_object_t v13 = (std::__shared_weak_count *)a1[6];
      uint64_t v17 = a1[5];
      xpc_object_t v18 = v13;
      if (!v13) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_82(uint64_t a1)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 32);
  if ((*(unsigned int (**)(void *))(*v2 + 88))(v2))
  {
    memset(&v53, 170, sizeof(v53));
    uint64_t v3 = (const void *)*MEMORY[0x1E4F4C218];
    size_t v4 = strlen((const char *)*MEMORY[0x1E4F4C218]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v5 = v4;
    if (v4 >= 0x17)
    {
      uint64_t v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17) {
        uint64_t v10 = v4 | 7;
      }
      uint64_t v11 = v10 + 1;
      p_dst = (std::string *)operator new(v10 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_12:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        xpc_object_t v12 = (char *)operator new(0x28uLL);
        strcpy(v12, " rejected; ABM is shutting down ");
        xpc_object_t v13 = std::string::append(&__dst, v12, 0x20uLL);
        long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v53.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        operator delete(v12);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          xpc_object_t v15 = v2[11];
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
LABEL_14:
            uint64_t v17 = *(void *)(a1 + 40);
            xpc_object_t v16 = (uint64_t *)(a1 + 40);
            if (!v17)
            {
LABEL_82:
              if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v53.__r_.__value_.__l.__data_);
              }
              return;
            }
LABEL_41:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            std::string::size_type size = HIBYTE(v53.__r_.__value_.__r.__words[2]);
            if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type size = v53.__r_.__value_.__l.__size_;
            }
            if (size)
            {
              xpc_object_t v30 = xpc_dictionary_create(0, 0, 0);
              if (v30 || (xpc_object_t v30 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8795EB0](v30) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v30);
                  xpc_object_t v31 = v30;
                }
                else
                {
                  xpc_object_t v31 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v31 = xpc_null_create();
                xpc_object_t v30 = 0;
              }
              xpc_release(v30);
              xpc_object_t v38 = xpc_null_create();
              xpc_object_t v39 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
              xpc_release(v39);
              xpc_release(v38);
              if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                xpc_object_t v40 = &v53;
              }
              else {
                xpc_object_t v40 = (std::string *)v53.__r_.__value_.__r.__words[0];
              }
              xpc_object_t v41 = xpc_string_create((const char *)v40);
              if (!v41) {
                xpc_object_t v41 = xpc_null_create();
              }
              xpc_dictionary_set_value(v31, (const char *)*MEMORY[0x1E4F4C240], v41);
              xpc_object_t v42 = xpc_null_create();
              xpc_release(v41);
              xpc_release(v42);
            }
            LODWORD(object) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v16, (unsigned int *)&object, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_82;
          }
        }
        else
        {
          xpc_object_t v15 = v2[11];
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_14;
          }
        }
        uint64_t v27 = &v53;
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v27 = (std::string *)v53.__r_.__value_.__r.__words[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
        _os_log_impl(&dword_1C59C6000, v15, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        uint64_t v28 = *(void *)(a1 + 40);
        xpc_object_t v16 = (uint64_t *)(a1 + 40);
        if (!v28) {
          goto LABEL_82;
        }
        goto LABEL_41;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_12;
  }
  if (MEMORY[0x1C8795EB0](*(void *)(a1 + 48)) == MEMORY[0x1E4F14590])
  {
    __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    __dst.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v18 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    uint64_t v19 = off_1EBBDCA08;
    if (!off_1EBBDCA08)
    {
      CommandDriverFactory::create_default_global((uint64_t *)&v53, v18);
      long long v20 = *(_OWORD *)&v53.__r_.__value_.__l.__data_;
      *(_OWORD *)&v53.__r_.__value_.__l.__data_ = 0uLL;
      size_t v21 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
      off_1EBBDCA08 = v20;
      if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
      size_t v22 = (std::__shared_weak_count *)v53.__r_.__value_.__l.__size_;
      if (v53.__r_.__value_.__l.__size_
        && !atomic_fetch_add((atomic_ullong *volatile)(v53.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
      uint64_t v19 = off_1EBBDCA08;
    }
    xpc_object_t v23 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    uint64_t v49 = v19;
    uint64_t v50 = *(&off_1EBBDCA08 + 1);
    if (*(&off_1EBBDCA08 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    (*(void (**)(xpc_object_t *__return_ptr, uint64_t))(*(void *)v19 + 16))(&object, v19);
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
    if (v52)
    {
      __dst.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v52);
      if (__dst.__r_.__value_.__l.__size_) {
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)object;
      }
      if (v52) {
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    std::string::size_type v24 = __dst.__r_.__value_.__r.__words[0];
    if (__dst.__r_.__value_.__r.__words[0])
    {
      memset(&v53, 170, sizeof(v53));
      xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 48), (const char *)*MEMORY[0x1E4F4C420]);
      xpc_object_t object = value;
      if (value) {
        xpc_retain(value);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      xpc::dyn_cast_or_default((uint64_t *)&v53, (xpc *)&object, (const object *)"", v26);
      xpc_release(object);
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v48, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
      }
      else {
        std::string v48 = v53;
      }
      v43[0] = MEMORY[0x1E4F143A8];
      v43[1] = 1174405120;
      v43[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_83;
      v43[3] = &__block_descriptor_tmp_86_0;
      uint64_t v33 = *(void *)(a1 + 56);
      xpc_object_t v32 = *(std::__shared_weak_count **)(a1 + 64);
      v43[4] = v2;
      v43[5] = v33;
      xpc_object_t v44 = v32;
      if (v32) {
        atomic_fetch_add_explicit(&v32->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      xpc_object_t v34 = *(void **)(a1 + 40);
      if (v34) {
        xpc_object_t v34 = _Block_copy(v34);
      }
      unint64_t v45 = v34;
      uint64_t v35 = _Block_copy(v43);
      unint64_t v36 = v2[17];
      if (v36) {
        dispatch_retain(v36);
      }
      long long aBlock = v35;
      dispatch_object_t v47 = v36;
      (*(void (**)(std::string::size_type, std::string *, void **))(*(void *)v24 + 216))(v24, &v48, &aBlock);
      if (v47) {
        dispatch_release(v47);
      }
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
      if (v45) {
        _Block_release(v45);
      }
      if (v44) {
        std::__shared_weak_count::__release_weak(v44);
      }
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v53.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v37 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
    if (__dst.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(__dst.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  else
  {
    xpc_object_t v7 = xpc_null_create();
    uint64_t v8 = *(void *)(a1 + 40);
    v53.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
    xpc_object_t v9 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, std::string *))(v8 + 16))(v8, 3760250882, &v53);
    xpc_release(v53.__r_.__value_.__l.__data_);
    xpc_release(v9);
  }
}

void sub_1C5AB5D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,xpc_object_t object)
{
  if (*(char *)(v28 - 105) < 0)
  {
    operator delete(*(void **)(v28 - 128));
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v28 - 96);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v28 - 96);
  _Unwind_Resume(a1);
}

void sub_1C5AB5E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C5AB5E60(_Unwind_Exception *a1)
{
  xpc_release(*(xpc_object_t *)(v1 - 96));
  if (*(char *)(v1 - 105) < 0)
  {
    operator delete(*(void **)(v1 - 128));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1C5AB5EC4);
}

void sub_1C5AB5E94()
{
  xpc_release(*(xpc_object_t *)(v1 - 128));
  xpc_release(v0);
  JUMPOUT(0x1C5AB5EC4);
}

void sub_1C5AB5EBC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1C5AB5ED4(_Unwind_Exception *a1)
{
  operator delete(v1);
  if (*(char *)(v2 - 73) < 0)
  {
    operator delete(*(void **)(v2 - 96));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1C5AB5EC4);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_83(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      xpc_object_t v9 = v8;
      if (a1[5])
      {
        uint64_t v10 = *a2;
        if (*a2) {
          uint64_t v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v11 = 0;
        }
        if (v11)
        {
          xpc_object_t v12 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)xpc_object_t object = 138412290;
            *(void *)&xpc_object_t object[4] = v10;
            _os_log_error_impl(&dword_1C59C6000, v12, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
          }
        }
        else
        {
          uint64_t v18 = *a3;
          if (*a3) {
            uint64_t v19 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          }
          else {
            uint64_t v19 = 0;
          }
          if (v19)
          {
            long long v20 = *(NSObject **)(v7 + 88);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)xpc_object_t object = 138412290;
              *(void *)&xpc_object_t object[4] = v18;
              _os_log_impl(&dword_1C59C6000, v20, OS_LOG_TYPE_DEFAULT, "#I %@", object, 0xCu);
            }
          }
        }
        if (*a2) {
          xpc_object_t v13 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          xpc_object_t v13 = 0;
        }
        if (v13) {
          uint64_t v14 = 3760250880;
        }
        else {
          uint64_t v14 = 0;
        }
        xpc_object_t v15 = xpc_null_create();
        uint64_t v16 = a1[7];
        *(void *)xpc_object_t object = v15;
        xpc_object_t v17 = xpc_null_create();
        (*(void (**)(uint64_t, uint64_t, unsigned char *))(v16 + 16))(v16, v14, object);
        xpc_release(*(xpc_object_t *)object);
        xpc_release(v17);
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1C5AB6118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_93(void *a1, uint64_t a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  uint64_t v9 = a1[5];
  if (v9)
  {
    if (*a3)
    {
      uint64_t v10 = _Block_copy(*a3);
      uint64_t v9 = a1[5];
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11)
      {
LABEL_7:
        xpc_object_t v12 = (std::__shared_weak_count *)v6[16];
        if (!v12 || (uint64_t v13 = v6[15], (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        xpc_object_t v15 = v14;
        uint64_t v16 = operator new(0x20uLL);
        void *v16 = v6;
        v16[1] = v10;
        _DWORD v16[2] = v9;
        v16[3] = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        xpc_object_t v17 = v6[17];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v18 = operator new(0x18uLL);
        *uint64_t v18 = v16;
        v18[1] = v13;
        void v18[2] = v15;
        dispatch_async_f(v17, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        if (v11) {
          std::__shared_weak_count::__release_weak(v11);
        }
        goto LABEL_15;
      }
    }
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_7;
  }
LABEL_15:
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_97(void *a1, uint64_t a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  uint64_t v9 = a1[5];
  if (v9)
  {
    if (*a3)
    {
      uint64_t v10 = _Block_copy(*a3);
      uint64_t v9 = a1[5];
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11)
      {
LABEL_7:
        xpc_object_t v12 = (std::__shared_weak_count *)v6[16];
        if (!v12 || (uint64_t v13 = v6[15], (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        xpc_object_t v15 = v14;
        uint64_t v16 = operator new(0x20uLL);
        void *v16 = v6;
        v16[1] = v10;
        _DWORD v16[2] = v9;
        v16[3] = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        xpc_object_t v17 = v6[17];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v18 = operator new(0x18uLL);
        *uint64_t v18 = v16;
        v18[1] = v13;
        void v18[2] = v15;
        dispatch_async_f(v17, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        if (v11) {
          std::__shared_weak_count::__release_weak(v11);
        }
        goto LABEL_15;
      }
    }
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_7;
  }
LABEL_15:
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_101(void *a1, uint64_t a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  uint64_t v9 = a1[5];
  if (v9)
  {
    if (*a3)
    {
      uint64_t v10 = _Block_copy(*a3);
      uint64_t v9 = a1[5];
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11)
      {
LABEL_7:
        xpc_object_t v12 = (std::__shared_weak_count *)v6[16];
        if (!v12 || (uint64_t v13 = v6[15], (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        xpc_object_t v15 = v14;
        uint64_t v16 = operator new(0x20uLL);
        void *v16 = v6;
        v16[1] = v10;
        _DWORD v16[2] = v9;
        v16[3] = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        xpc_object_t v17 = v6[17];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v18 = operator new(0x18uLL);
        *uint64_t v18 = v16;
        v18[1] = v13;
        void v18[2] = v15;
        dispatch_async_f(v17, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb2_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        if (v11) {
          std::__shared_weak_count::__release_weak(v11);
        }
        goto LABEL_15;
      }
    }
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_7;
  }
LABEL_15:
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_105(void *a1, uint64_t a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  uint64_t v9 = a1[5];
  if (v9)
  {
    if (*a3)
    {
      uint64_t v10 = _Block_copy(*a3);
      uint64_t v9 = a1[5];
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11)
      {
LABEL_7:
        xpc_object_t v12 = (std::__shared_weak_count *)v6[16];
        if (!v12 || (uint64_t v13 = v6[15], (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        xpc_object_t v15 = v14;
        uint64_t v16 = operator new(0x20uLL);
        void *v16 = v6;
        v16[1] = v10;
        _DWORD v16[2] = v9;
        v16[3] = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        xpc_object_t v17 = v6[17];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v18 = operator new(0x18uLL);
        *uint64_t v18 = v16;
        v18[1] = v13;
        void v18[2] = v15;
        dispatch_async_f(v17, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb3_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        if (v11) {
          std::__shared_weak_count::__release_weak(v11);
        }
        goto LABEL_15;
      }
    }
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_7;
  }
LABEL_15:
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_109(void *a1, uint64_t a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  uint64_t v9 = a1[5];
  if (v9)
  {
    if (*a3)
    {
      uint64_t v10 = _Block_copy(*a3);
      uint64_t v9 = a1[5];
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11)
      {
LABEL_7:
        xpc_object_t v12 = (std::__shared_weak_count *)v6[16];
        if (!v12 || (uint64_t v13 = v6[15], (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        xpc_object_t v15 = v14;
        uint64_t v16 = operator new(0x20uLL);
        void *v16 = v6;
        v16[1] = v10;
        _DWORD v16[2] = v9;
        v16[3] = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        xpc_object_t v17 = v6[17];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v18 = operator new(0x18uLL);
        *uint64_t v18 = v16;
        v18[1] = v13;
        void v18[2] = v15;
        dispatch_async_f(v17, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb4_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        if (v11) {
          std::__shared_weak_count::__release_weak(v11);
        }
        goto LABEL_15;
      }
    }
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_7;
  }
LABEL_15:
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_113(void *a1, uint64_t a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  uint64_t v9 = a1[5];
  if (v9)
  {
    if (*a3)
    {
      uint64_t v10 = _Block_copy(*a3);
      uint64_t v9 = a1[5];
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11)
      {
LABEL_7:
        xpc_object_t v12 = (std::__shared_weak_count *)v6[16];
        if (!v12 || (uint64_t v13 = v6[15], (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        xpc_object_t v15 = v14;
        uint64_t v16 = operator new(0x20uLL);
        void *v16 = v6;
        v16[1] = v10;
        _DWORD v16[2] = v9;
        v16[3] = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        xpc_object_t v17 = v6[17];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v18 = operator new(0x18uLL);
        *uint64_t v18 = v16;
        v18[1] = v13;
        void v18[2] = v15;
        dispatch_async_f(v17, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb5_E3__5EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        if (v11) {
          std::__shared_weak_count::__release_weak(v11);
        }
        goto LABEL_15;
      }
    }
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_7;
  }
LABEL_15:
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_117(void *a1, xpc_object_t *a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  if (a1[5])
  {
    xpc_object_t v10 = *a2;
    if (v10)
    {
      xpc_retain(v10);
      uint64_t v11 = *a3;
      if (*a3) {
        goto LABEL_6;
      }
    }
    else
    {
      xpc_object_t v10 = xpc_null_create();
      uint64_t v11 = *a3;
      if (*a3)
      {
LABEL_6:
        xpc_object_t v12 = _Block_copy(v11);
        uint64_t v14 = a1[5];
        uint64_t v13 = (std::__shared_weak_count *)a1[6];
        if (!v13) {
          goto LABEL_8;
        }
        goto LABEL_7;
      }
    }
    xpc_object_t v12 = 0;
    uint64_t v14 = a1[5];
    uint64_t v13 = (std::__shared_weak_count *)a1[6];
    if (!v13)
    {
LABEL_8:
      xpc_object_t v15 = (std::__shared_weak_count *)v7[16];
      if (!v15 || (uint64_t v16 = v7[15], (v17 = std::__shared_weak_count::lock(v15)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      uint64_t v18 = v17;
      uint64_t v19 = operator new(0x28uLL);
      *uint64_t v19 = v7;
      v19[1] = v10;
      xpc_object_t v20 = xpc_null_create();
      void v19[2] = v12;
      void v19[3] = v14;
      void v19[4] = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      size_t v21 = v7[17];
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v22 = operator new(0x18uLL);
      *uint64_t v22 = v19;
      v22[1] = v16;
      _DWORD v22[2] = v18;
      dispatch_async_f(v21, v22, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb6_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
      if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      if (v13) {
        std::__shared_weak_count::__release_weak(v13);
      }
      xpc_release(v20);
      goto LABEL_17;
    }
LABEL_7:
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_8;
  }
LABEL_17:
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_121(void *a1, xpc_object_t *a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  if (a1[5])
  {
    xpc_object_t v10 = *a2;
    if (v10)
    {
      xpc_retain(v10);
      uint64_t v11 = *a3;
      if (*a3) {
        goto LABEL_6;
      }
    }
    else
    {
      xpc_object_t v10 = xpc_null_create();
      uint64_t v11 = *a3;
      if (*a3)
      {
LABEL_6:
        xpc_object_t v12 = _Block_copy(v11);
        uint64_t v14 = a1[5];
        uint64_t v13 = (std::__shared_weak_count *)a1[6];
        if (!v13) {
          goto LABEL_8;
        }
        goto LABEL_7;
      }
    }
    xpc_object_t v12 = 0;
    uint64_t v14 = a1[5];
    uint64_t v13 = (std::__shared_weak_count *)a1[6];
    if (!v13)
    {
LABEL_8:
      xpc_object_t v15 = (std::__shared_weak_count *)v7[16];
      if (!v15 || (uint64_t v16 = v7[15], (v17 = std::__shared_weak_count::lock(v15)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      uint64_t v18 = v17;
      uint64_t v19 = operator new(0x28uLL);
      *uint64_t v19 = v7;
      v19[1] = v10;
      xpc_object_t v20 = xpc_null_create();
      void v19[2] = v12;
      void v19[3] = v14;
      void v19[4] = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      size_t v21 = v7[17];
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v22 = operator new(0x18uLL);
      *uint64_t v22 = v19;
      v22[1] = v16;
      _DWORD v22[2] = v18;
      dispatch_async_f(v21, v22, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb7_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
      if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      if (v13) {
        std::__shared_weak_count::__release_weak(v13);
      }
      xpc_release(v20);
      goto LABEL_17;
    }
LABEL_7:
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_8;
  }
LABEL_17:
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_125(void *a1, xpc_object_t *a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  if (a1[5])
  {
    xpc_object_t v10 = *a2;
    if (v10)
    {
      xpc_retain(v10);
      uint64_t v11 = *a3;
      if (*a3) {
        goto LABEL_6;
      }
    }
    else
    {
      xpc_object_t v10 = xpc_null_create();
      uint64_t v11 = *a3;
      if (*a3)
      {
LABEL_6:
        xpc_object_t v12 = _Block_copy(v11);
        uint64_t v14 = a1[5];
        uint64_t v13 = (std::__shared_weak_count *)a1[6];
        if (!v13) {
          goto LABEL_8;
        }
        goto LABEL_7;
      }
    }
    xpc_object_t v12 = 0;
    uint64_t v14 = a1[5];
    uint64_t v13 = (std::__shared_weak_count *)a1[6];
    if (!v13)
    {
LABEL_8:
      xpc_object_t v15 = (std::__shared_weak_count *)v7[16];
      if (!v15 || (uint64_t v16 = v7[15], (v17 = std::__shared_weak_count::lock(v15)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      uint64_t v18 = v17;
      uint64_t v19 = operator new(0x28uLL);
      *uint64_t v19 = v7;
      v19[1] = v10;
      xpc_object_t v20 = xpc_null_create();
      void v19[2] = v12;
      void v19[3] = v14;
      void v19[4] = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      size_t v21 = v7[17];
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v22 = operator new(0x18uLL);
      *uint64_t v22 = v19;
      v22[1] = v16;
      _DWORD v22[2] = v18;
      dispatch_async_f(v21, v22, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb8_E3__8EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
      if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      if (v13) {
        std::__shared_weak_count::__release_weak(v13);
      }
      xpc_release(v20);
      goto LABEL_17;
    }
LABEL_7:
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_8;
  }
LABEL_17:
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_129(void *a1, uint64_t a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  uint64_t v9 = a1[5];
  if (v9)
  {
    if (*a3)
    {
      xpc_object_t v10 = _Block_copy(*a3);
      uint64_t v9 = a1[5];
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11) {
        goto LABEL_7;
      }
    }
    else
    {
      xpc_object_t v10 = 0;
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11)
      {
LABEL_7:
        xpc_object_t v12 = (std::__shared_weak_count *)v6[16];
        if (!v12 || (uint64_t v13 = v6[15], (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        xpc_object_t v15 = v14;
        uint64_t v16 = operator new(0x20uLL);
        void *v16 = v6;
        v16[1] = v10;
        _DWORD v16[2] = v9;
        v16[3] = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        xpc_object_t v17 = v6[17];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v18 = operator new(0x18uLL);
        *uint64_t v18 = v16;
        v18[1] = v13;
        void v18[2] = v15;
        dispatch_async_f(v17, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb9_E3__9EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        if (v11) {
          std::__shared_weak_count::__release_weak(v11);
        }
        goto LABEL_15;
      }
    }
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_7;
  }
LABEL_15:
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_133(void *a1, xpc_object_t *a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  uint64_t v10 = a1[5];
  if (v10)
  {
    if (*a3)
    {
      uint64_t v11 = _Block_copy(*a3);
      uint64_t v10 = a1[5];
      xpc_object_t v12 = (std::__shared_weak_count *)a1[6];
      if (!v12)
      {
LABEL_7:
        xpc_object_t v13 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          uint64_t v14 = (std::__shared_weak_count *)v7[16];
          if (!v14) {
LABEL_25:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v13 = xpc_null_create();
          uint64_t v14 = (std::__shared_weak_count *)v7[16];
          if (!v14) {
            goto LABEL_25;
          }
        }
        uint64_t v15 = v7[15];
        uint64_t v16 = std::__shared_weak_count::lock(v14);
        if (!v16) {
          goto LABEL_25;
        }
        xpc_object_t v17 = v16;
        uint64_t v18 = operator new(0x28uLL);
        uint64_t v19 = v18;
        *uint64_t v18 = v7;
        v18[1] = v11;
        void v18[2] = v10;
        v18[3] = v12;
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        v18[4] = v13;
        xpc_object_t v20 = xpc_null_create();
        size_t v21 = v7[17];
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v22 = operator new(0x18uLL);
        *uint64_t v22 = v19;
        v22[1] = v15;
        _DWORD v22[2] = v17;
        dispatch_async_f(v21, v22, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb10_E4__10EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
        if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
        xpc_release(v20);
        if (v12) {
          std::__shared_weak_count::__release_weak(v12);
        }
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v11 = 0;
      xpc_object_t v12 = (std::__shared_weak_count *)a1[6];
      if (!v12) {
        goto LABEL_7;
      }
    }
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_7;
  }
LABEL_20:
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_137(void *a1, xpc_object_t *a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  uint64_t v10 = a1[5];
  if (v10)
  {
    if (*a3)
    {
      uint64_t v11 = _Block_copy(*a3);
      uint64_t v10 = a1[5];
      xpc_object_t v12 = (std::__shared_weak_count *)a1[6];
      if (!v12)
      {
LABEL_7:
        xpc_object_t v13 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          uint64_t v14 = (std::__shared_weak_count *)v7[16];
          if (!v14) {
LABEL_25:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v13 = xpc_null_create();
          uint64_t v14 = (std::__shared_weak_count *)v7[16];
          if (!v14) {
            goto LABEL_25;
          }
        }
        uint64_t v15 = v7[15];
        uint64_t v16 = std::__shared_weak_count::lock(v14);
        if (!v16) {
          goto LABEL_25;
        }
        xpc_object_t v17 = v16;
        uint64_t v18 = operator new(0x28uLL);
        uint64_t v19 = v18;
        *uint64_t v18 = v7;
        v18[1] = v11;
        void v18[2] = v10;
        v18[3] = v12;
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        v18[4] = v13;
        xpc_object_t v20 = xpc_null_create();
        size_t v21 = v7[17];
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v22 = operator new(0x18uLL);
        *uint64_t v22 = v19;
        v22[1] = v15;
        _DWORD v22[2] = v17;
        dispatch_async_f(v21, v22, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb11_E4__11EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
        if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
        xpc_release(v20);
        if (v12) {
          std::__shared_weak_count::__release_weak(v12);
        }
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v11 = 0;
      xpc_object_t v12 = (std::__shared_weak_count *)a1[6];
      if (!v12) {
        goto LABEL_7;
      }
    }
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_7;
  }
LABEL_20:
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_141(void *a1, xpc_object_t *a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  uint64_t v10 = a1[5];
  if (v10)
  {
    if (*a3)
    {
      uint64_t v11 = _Block_copy(*a3);
      uint64_t v10 = a1[5];
      xpc_object_t v12 = (std::__shared_weak_count *)a1[6];
      if (!v12)
      {
LABEL_7:
        xpc_object_t v13 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          uint64_t v14 = (std::__shared_weak_count *)v7[16];
          if (!v14) {
LABEL_25:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v13 = xpc_null_create();
          uint64_t v14 = (std::__shared_weak_count *)v7[16];
          if (!v14) {
            goto LABEL_25;
          }
        }
        uint64_t v15 = v7[15];
        uint64_t v16 = std::__shared_weak_count::lock(v14);
        if (!v16) {
          goto LABEL_25;
        }
        xpc_object_t v17 = v16;
        uint64_t v18 = operator new(0x28uLL);
        uint64_t v19 = v18;
        *uint64_t v18 = v7;
        v18[1] = v11;
        void v18[2] = v10;
        v18[3] = v12;
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        v18[4] = v13;
        xpc_object_t v20 = xpc_null_create();
        size_t v21 = v7[17];
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v22 = operator new(0x18uLL);
        *uint64_t v22 = v19;
        v22[1] = v15;
        _DWORD v22[2] = v17;
        dispatch_async_f(v21, v22, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb12_E4__12EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
        if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
        xpc_release(v20);
        if (v12) {
          std::__shared_weak_count::__release_weak(v12);
        }
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v11 = 0;
      xpc_object_t v12 = (std::__shared_weak_count *)a1[6];
      if (!v12) {
        goto LABEL_7;
      }
    }
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_7;
  }
LABEL_20:
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_145(void *a1, uint64_t a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  uint64_t v9 = a1[5];
  if (v9)
  {
    if (*a3)
    {
      uint64_t v10 = _Block_copy(*a3);
      uint64_t v9 = a1[5];
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11)
      {
LABEL_7:
        xpc_object_t v12 = (std::__shared_weak_count *)v6[16];
        if (!v12 || (uint64_t v13 = v6[15], (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        uint64_t v15 = v14;
        uint64_t v16 = operator new(0x20uLL);
        void *v16 = v6;
        v16[1] = v10;
        _DWORD v16[2] = v9;
        v16[3] = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        xpc_object_t v17 = v6[17];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v18 = operator new(0x18uLL);
        *uint64_t v18 = v16;
        v18[1] = v13;
        void v18[2] = v15;
        dispatch_async_f(v17, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb13_E4__13EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        if (v11) {
          std::__shared_weak_count::__release_weak(v11);
        }
        goto LABEL_15;
      }
    }
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_7;
  }
LABEL_15:
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_149(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  size_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v4) {
    return;
  }
  uint64_t v6 = std::__shared_weak_count::lock(v4);
  xpc_object_t v17 = v6;
  if (!v6) {
    return;
  }
  if (!*(void *)(a1 + 32))
  {
    uint64_t v10 = v6;
LABEL_19:
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return;
  }
  CFTypeRef cf = (CFTypeRef)TelephonyBasebandCreateController();
  int v7 = TelephonyBasebandPowerDebugUnblock();
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v9 = v8;
  if (v8)
  {
    xpc_object_t object = v8;
  }
  else
  {
    xpc_object_t v9 = xpc_null_create();
    xpc_object_t object = v9;
    if (!v9)
    {
      xpc_object_t v11 = xpc_null_create();
      xpc_object_t v9 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x1C8795EB0](v9) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v9);
    goto LABEL_13;
  }
  xpc_object_t v11 = xpc_null_create();
LABEL_12:
  xpc_object_t object = v11;
LABEL_13:
  xpc_release(v9);
  if (v7) {
    unsigned int v12 = 0;
  }
  else {
    unsigned int v12 = -534716414;
  }
  unsigned int v13 = v12;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, &v13, &object);
  xpc_release(object);
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v10 = v17;
  if (v17) {
    goto LABEL_19;
  }
}

void sub_1C5AB7DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, const void *a12, __int16 a13, char a14, char a15)
{
}

void sub_1C5AB7E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_151(uint64_t a1, xpc_object_t *a2, uint64_t *a3)
{
  size_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v4) {
    return;
  }
  int v7 = std::__shared_weak_count::lock(v4);
  unint64_t v45 = v7;
  if (!v7) {
    return;
  }
  if (!*(void *)(a1 + 32))
  {
    xpc_object_t v9 = v7;
LABEL_65:
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    return;
  }
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4D1F8]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  int v10 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  xpc_object_t v11 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4D288]);
  xpc_object_t object = v11;
  if (v11) {
    xpc_retain(v11);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  int v12 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  xpc_object_t v13 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4D258]);
  xpc_object_t object = v13;
  if (v13) {
    xpc_retain(v13);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  int v14 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  xpc_object_t v15 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4D2A0]);
  xpc_object_t object = v15;
  if (v15) {
    xpc_retain(v15);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  int v16 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  xpc_object_t v17 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4D2A8]);
  xpc_object_t object = v17;
  if (v17) {
    xpc_retain(v17);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  int v18 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  xpc_object_t v19 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4D2C0]);
  xpc_object_t object = v19;
  if (v19) {
    xpc_retain(v19);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  int v20 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  xpc_object_t v21 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4D280]);
  xpc_object_t object = v21;
  if (v21) {
    xpc_retain(v21);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  int v22 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  if (v12) {
    int v23 = 2;
  }
  else {
    int v23 = 0;
  }
  int v24 = v23 | v10;
  if (v14) {
    int v25 = 4;
  }
  else {
    int v25 = 0;
  }
  if (v16) {
    int v26 = 8;
  }
  else {
    int v26 = 0;
  }
  int v27 = v24 | v25 | v26;
  if (v18) {
    int v28 = 16;
  }
  else {
    int v28 = 0;
  }
  if (v20) {
    int v29 = 32;
  }
  else {
    int v29 = 0;
  }
  int v30 = v28 | v29;
  if (v22) {
    int v31 = 64;
  }
  else {
    int v31 = 0;
  }
  LODWORD(v42) = v27 | v30 | v31;
  xpc_object_t v32 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C2B0]);
  xpc_object_t object = v32;
  if (v32) {
    xpc_retain(v32);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  HIDWORD(v42) = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  xpc_object_t v33 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C928]);
  xpc_object_t object = v33;
  if (v33) {
    xpc_retain(v33);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  LODWORD(v43) = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  xpc_object_t v34 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4D260]);
  xpc_object_t object = v34;
  if (v34) {
    xpc_retain(v34);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  BYTE4(v43) = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  BYTE5(v43) = 0;
  int v35 = TelephonyBasebandSetPowerDebugOptions();
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v36 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v37 = v36;
  if (v36)
  {
    xpc_object_t object = v36;
  }
  else
  {
    xpc_object_t v37 = xpc_null_create();
    xpc_object_t object = v37;
    if (!v37)
    {
      xpc_object_t v38 = xpc_null_create();
      xpc_object_t v37 = 0;
      goto LABEL_60;
    }
  }
  if (MEMORY[0x1C8795EB0](v37) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v37);
    goto LABEL_61;
  }
  xpc_object_t v38 = xpc_null_create();
LABEL_60:
  xpc_object_t object = v38;
LABEL_61:
  xpc_release(v37);
  if (v35) {
    unsigned int v39 = 0;
  }
  else {
    unsigned int v39 = -534716414;
  }
  unsigned int v40 = v39;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, &v40, &object);
  xpc_release(object);
  xpc_object_t v9 = v45;
  if (v45) {
    goto LABEL_65;
  }
}

void sub_1C5AB82D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, char a13)
{
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_155(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  size_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v4) {
    return;
  }
  uint64_t v6 = std::__shared_weak_count::lock(v4);
  xpc_object_t v41 = v6;
  if (!v6) {
    return;
  }
  if (!*(void *)(a1 + 32))
  {
    xpc_object_t v11 = v6;
LABEL_41:
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    return;
  }
  int64_t value = 0;
  int64_t v39 = 0;
  int v7 = MEMORY[0x1C8793300](&value);
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v9 = v8;
  uint64_t v10 = MEMORY[0x1E4F14590];
  if (v8)
  {
    xpc_object_t object = v8;
  }
  else
  {
    xpc_object_t v9 = xpc_null_create();
    xpc_object_t object = v9;
    if (!v9)
    {
      xpc_object_t v12 = xpc_null_create();
      xpc_object_t v9 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x1C8795EB0](v9) == v10)
  {
    xpc_retain(v9);
    goto LABEL_13;
  }
  xpc_object_t v12 = xpc_null_create();
LABEL_12:
  xpc_object_t object = v12;
LABEL_13:
  xpc_release(v9);
  if (v7)
  {
    if (MEMORY[0x1C8795EB0](object) == v10)
    {
      xpc_object_t v13 = xpc_BOOL_create(value & 1);
      if (!v13) {
        xpc_object_t v13 = xpc_null_create();
      }
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E4F4D1F8], v13);
      xpc_object_t v14 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v14);
      xpc_object_t v15 = xpc_BOOL_create((value & 2) != 0);
      if (!v15) {
        xpc_object_t v15 = xpc_null_create();
      }
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E4F4D288], v15);
      xpc_object_t v16 = xpc_null_create();
      xpc_release(v15);
      xpc_release(v16);
      xpc_object_t v17 = xpc_BOOL_create((value & 4) != 0);
      if (!v17) {
        xpc_object_t v17 = xpc_null_create();
      }
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E4F4D258], v17);
      xpc_object_t v18 = xpc_null_create();
      xpc_release(v17);
      xpc_release(v18);
      xpc_object_t v19 = xpc_BOOL_create((value & 8) != 0);
      if (!v19) {
        xpc_object_t v19 = xpc_null_create();
      }
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E4F4D2A0], v19);
      xpc_object_t v20 = xpc_null_create();
      xpc_release(v19);
      xpc_release(v20);
      xpc_object_t v21 = xpc_BOOL_create((value & 0x10) != 0);
      if (!v21) {
        xpc_object_t v21 = xpc_null_create();
      }
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E4F4D2A8], v21);
      xpc_object_t v22 = xpc_null_create();
      xpc_release(v21);
      xpc_release(v22);
      xpc_object_t v23 = xpc_BOOL_create((value & 0x20) != 0);
      if (!v23) {
        xpc_object_t v23 = xpc_null_create();
      }
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E4F4D2C0], v23);
      xpc_object_t v24 = xpc_null_create();
      xpc_release(v23);
      xpc_release(v24);
      xpc_object_t v25 = xpc_BOOL_create((value & 0x40) != 0);
      if (!v25) {
        xpc_object_t v25 = xpc_null_create();
      }
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E4F4D280], v25);
      xpc_object_t v26 = xpc_null_create();
      xpc_release(v25);
      xpc_release(v26);
      xpc_object_t v27 = xpc_int64_create(HIDWORD(value));
      if (!v27) {
        xpc_object_t v27 = xpc_null_create();
      }
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E4F4C2B0], v27);
      xpc_object_t v28 = xpc_null_create();
      xpc_release(v27);
      xpc_release(v28);
      xpc_object_t v29 = xpc_int64_create(v39);
      if (!v29) {
        xpc_object_t v29 = xpc_null_create();
      }
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E4F4C928], v29);
      xpc_object_t v30 = xpc_null_create();
      xpc_release(v29);
      xpc_release(v30);
      xpc_object_t v31 = xpc_BOOL_create(SBYTE4(v39));
      if (!v31) {
        xpc_object_t v31 = xpc_null_create();
      }
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E4F4D260], v31);
      xpc_object_t v32 = xpc_null_create();
      xpc_release(v31);
      xpc_release(v32);
      xpc_object_t v33 = xpc_BOOL_create(SBYTE5(v39));
      if (!v33) {
        xpc_object_t v33 = xpc_null_create();
      }
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E4F4D0A8], v33);
      xpc_object_t v34 = xpc_null_create();
      xpc_release(v33);
      xpc_release(v34);
    }
    unsigned int v35 = 0;
  }
  else
  {
    unsigned int v35 = -534716414;
  }
  unsigned int v36 = v35;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, &v36, &object);
  xpc_release(object);
  xpc_object_t v11 = v41;
  if (v41) {
    goto LABEL_41;
  }
}

void sub_1C5AB8AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  xpc_release(v13);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void RadioModule::finishInitialization_sync(RadioModule *this)
{
  uint64_t v284 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((void *)this + 15);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 16);
  size_t v4 = (char *)this + 120;
  if (!v3 || (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v248 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v249 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  BOOL v220 = v7;
  xpc_object_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v270, v8);
    long long v10 = v270;
    long long v270 = 0uLL;
    xpc_object_t v11 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    xpc_object_t v12 = (std::__shared_weak_count *)*((void *)&v270 + 1);
    if (*((void *)&v270 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v270 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_1EBBDCA08;
  }
  xpc_object_t v13 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  uint64_t v250 = v9;
  uint64_t v251 = *(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::__shared_weak_count **__return_ptr, uint64_t))(*(void *)v9 + 16))(v259, v9);
  v248 = 0;
  unint64_t v249 = 0;
  if (v259[1])
  {
    unint64_t v249 = std::__shared_weak_count::lock(v259[1]);
    if (v249) {
      v248 = v259[0];
    }
    if (v259[1]) {
      std::__shared_weak_count::__release_weak(v259[1]);
    }
  }
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    xpc_object_t v14 = (void *)&loc_1C5BC2000;
    if (!v248) {
      goto LABEL_31;
    }
  }
  else
  {
    xpc_object_t v14 = &loc_1C5BC2000;
    if (!v248) {
      goto LABEL_31;
    }
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = v14[337];
  aBlock[2] = ___ZN11RadioModule25finishInitialization_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_166_0;
  void aBlock[4] = this;
  void aBlock[5] = v5;
  v245 = v220;
  atomic_fetch_add_explicit(&v220->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v15 = _Block_copy(aBlock);
  xpc_object_t v16 = *((void *)this + 17);
  if (v16) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  v246 = v15;
  dispatch_object_t object = v16;
  radio::CommandDriver::watchOperatingMode();
  if (object) {
    dispatch_release(object);
  }
  if (v246) {
    _Block_release(v246);
  }
  if (v245) {
    std::__shared_weak_count::__release_weak(v245);
  }
LABEL_31:
  xpc_object_t v17 = (const char *)(*(uint64_t (**)(RadioModule *))(*(void *)this + 16))(this);
  size_t v18 = strlen(v17);
  if (v18 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v19 = (void *)v18;
  if (v18 >= 0x17)
  {
    uint64_t v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17) {
      uint64_t v21 = v18 | 7;
    }
    uint64_t v22 = v21 + 1;
    xpc_object_t v20 = (void **)operator new(v21 + 1);
    __dst[1] = v19;
    unint64_t v243 = v22 | 0x8000000000000000;
    __dst[0] = v20;
  }
  else
  {
    HIBYTE(v243) = v18;
    xpc_object_t v20 = __dst;
    if (!v18) {
      goto LABEL_39;
    }
  }
  memmove(v20, v17, (size_t)v19);
LABEL_39:
  *((unsigned char *)v19 + (void)v20) = 0;
  CFTypeRef cf = 0;
  AppleBasebandManager::create();
  long long v23 = v270;
  long long v270 = 0uLL;
  xpc_object_t v24 = (std::__shared_weak_count *)*((void *)this + 23);
  *((_OWORD *)this + 11) = v23;
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    xpc_object_t v25 = (std::__shared_weak_count *)*((void *)&v270 + 1);
    if (!*((void *)&v270 + 1))
    {
LABEL_43:
      CFTypeRef v26 = cf;
      if (!cf) {
        goto LABEL_45;
      }
      goto LABEL_44;
    }
  }
  else
  {
    xpc_object_t v25 = (std::__shared_weak_count *)*((void *)&v270 + 1);
    if (!*((void *)&v270 + 1)) {
      goto LABEL_43;
    }
  }
  if (atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_43;
  }
  ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
  std::__shared_weak_count::__release_weak(v25);
  CFTypeRef v26 = cf;
  if (cf) {
LABEL_44:
  }
    CFRelease(v26);
LABEL_45:
  if (SHIBYTE(v243) < 0) {
    operator delete(__dst[0]);
  }
  xpc_object_t v27 = (const void *)*MEMORY[0x1E4F4CEF8];
  size_t v28 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
  if (v28 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v29 = (void *)v28;
  if (v28 >= 0x17)
  {
    uint64_t v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17) {
      uint64_t v31 = v28 | 7;
    }
    uint64_t v32 = v31 + 1;
    xpc_object_t v30 = operator new(v31 + 1);
    __p[1] = v29;
    unint64_t v240 = v32 | 0x8000000000000000;
    __p[0] = v30;
    goto LABEL_54;
  }
  HIBYTE(v240) = v28;
  xpc_object_t v30 = __p;
  if (v28) {
LABEL_54:
  }
    memmove(v30, v27, (size_t)v29);
  *((unsigned char *)v29 + (void)v30) = 0;
  v235[0] = MEMORY[0x1E4F143A8];
  uint64_t v33 = v14[337];
  v235[1] = v33;
  v235[2] = ___ZN11RadioModule25finishInitialization_syncEv_block_invoke_167;
  v235[3] = &__block_descriptor_tmp_172;
  v235[4] = this;
  v235[5] = v5;
  v236 = v220;
  atomic_fetch_add_explicit(&v220->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v34 = _Block_copy(v235);
  unsigned int v35 = *((void *)this + 17);
  if (v35) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  v237 = v34;
  dispatch_object_t v238 = v35;
  AppleBasebandManager::setEventHandler();
  if (v238) {
    dispatch_release(v238);
  }
  if (v237) {
    _Block_release(v237);
  }
  if (SHIBYTE(v240) < 0) {
    operator delete(__p[0]);
  }
  unsigned int v36 = (const void *)*MEMORY[0x1E4F4CB10];
  size_t v37 = strlen((const char *)*MEMORY[0x1E4F4CB10]);
  if (v37 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v38 = (void *)v37;
  if (v37 >= 0x17)
  {
    uint64_t v40 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v37 | 7) != 0x17) {
      uint64_t v40 = v37 | 7;
    }
    uint64_t v41 = v40 + 1;
    int64_t v39 = operator new(v40 + 1);
    v233[1] = v38;
    unint64_t v234 = v41 | 0x8000000000000000;
    v233[0] = v39;
    goto LABEL_70;
  }
  HIBYTE(v234) = v37;
  int64_t v39 = v233;
  if (v37) {
LABEL_70:
  }
    memmove(v39, v36, (size_t)v38);
  *((unsigned char *)v38 + (void)v39) = 0;
  v229[0] = MEMORY[0x1E4F143A8];
  v229[1] = v33;
  v229[2] = ___ZN11RadioModule25finishInitialization_syncEv_block_invoke_173;
  v229[3] = &__block_descriptor_tmp_176;
  v229[4] = this;
  v229[5] = v5;
  xpc_object_t v230 = v220;
  atomic_fetch_add_explicit(&v220->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v42 = _Block_copy(v229);
  uint64_t v43 = *((void *)this + 17);
  if (v43) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  v231 = v42;
  dispatch_object_t v232 = v43;
  AppleBasebandManager::setEventHandler();
  if (v232) {
    dispatch_release(v232);
  }
  if (v231) {
    _Block_release(v231);
  }
  if (SHIBYTE(v234) < 0) {
    operator delete(v233[0]);
  }
  AppleBasebandManager::eventsOn(*((AppleBasebandManager **)this + 22));
  xpc_object_t v44 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v45 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v270, v44);
    long long v46 = v270;
    long long v270 = 0uLL;
    dispatch_object_t v47 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v46;
    if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
    std::string v48 = (std::__shared_weak_count *)*((void *)&v270 + 1);
    if (*((void *)&v270 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v270 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
    uint64_t v45 = off_1EBBDCA08;
  }
  v223 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v45 + 16))(&v224, v45);
  uint64_t v226 = 0;
  v227 = 0;
  if (v225 && (v227 = std::__shared_weak_count::lock(v225)) != 0)
  {
    uint64_t v49 = v224;
    uint64_t v226 = v224;
  }
  else
  {
    uint64_t v49 = 0;
  }
  uint64_t v250 = MEMORY[0x1E4F143A8];
  uint64_t v251 = 0x40000000;
  xpc_object_t v252 = ___ZN3ctu20SharedSynchronizableI11RadioModuleE13connect_eventIN5boost8signals26signalIFvjENS5_19optional_last_valueIvEEiNSt3__14lessIiEENS4_8functionIS7_EENSD_IFvRKNS5_10connectionEjEEENS5_5mutexEEES1_vJjEEEDTcl7connectfp_cvNSA_10shared_ptrIS1_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSQ_SS_E_block_invoke;
  v253 = &__block_descriptor_tmp_278;
  v254 = v4;
  v255 = RadioModule::handleResetSPMI_sync;
  uint64_t v256 = 0;
  uint64_t v50 = _Block_copy(&v250);
  uint64_t v217 = v49;
  xpc_object_t v51 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v51 || (v52 = *((void *)this + 15), (std::string v53 = std::__shared_weak_count::lock(v51)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v54 = v53;
  uint64_t v55 = *((void *)this + 17);
  dispatch_object_t v257 = v55;
  if (v50) {
    xpc_object_t v56 = _Block_copy(v50);
  }
  else {
    xpc_object_t v56 = 0;
  }
  v258 = v56;
  dispatch_retain(v55);
  *(_OWORD *)v259 = 0u;
  long long v260 = 0u;
  dispatch_object_t v263 = v55;
  if (v56) {
    xpc_object_t v56 = _Block_copy(v56);
  }
  unint64_t v264 = v56;
  dispatch_retain(v55);
  dispatch_object_t v265 = v55;
  xpc_object_t v219 = v54;
  v215 = v50;
  std::string v216 = this;
  uint64_t v221 = v52;
  if (!v56)
  {
    v266 = 0;
    dispatch_retain(v55);
    goto LABEL_109;
  }
  xpc_object_t v57 = _Block_copy(v56);
  v266 = v57;
  dispatch_retain(v55);
  if (!v57)
  {
LABEL_109:
    dispatch_retain(v55);
    unint64_t v267 = 0;
    goto LABEL_110;
  }
  size_t v58 = _Block_copy(v57);
  dispatch_retain(v55);
  unint64_t v267 = 0;
  if (!v58)
  {
LABEL_110:
    dispatch_retain(v55);
    size_t v58 = 0;
    char v64 = 1;
LABEL_111:
    dispatch_retain(v55);
    size_t v59 = 0;
    char v65 = 1;
LABEL_112:
    size_t v63 = v59;
    dispatch_retain(v55);
    unint64_t v213 = 0;
    char v66 = 1;
LABEL_113:
    dispatch_retain(v55);
    uint64_t v61 = 0;
    unint64_t v268 = (unint64_t)v55;
    char v67 = 1;
    goto LABEL_114;
  }
  size_t v59 = _Block_copy(v58);
  dispatch_retain(v55);
  if (!v59)
  {
    char v64 = 0;
    goto LABEL_111;
  }
  uint64_t v60 = _Block_copy(v59);
  dispatch_retain(v55);
  if (!v60)
  {
    char v64 = 0;
    char v65 = 0;
    goto LABEL_112;
  }
  unint64_t v213 = v60;
  uint64_t v61 = _Block_copy(v60);
  dispatch_retain(v55);
  if (!v61)
  {
    size_t v63 = v59;
    char v64 = 0;
    char v65 = 0;
    char v66 = 0;
    goto LABEL_113;
  }
  uint64_t v62 = _Block_copy(v61);
  dispatch_retain(v55);
  unint64_t v268 = (unint64_t)v55;
  if (v62)
  {
    size_t v63 = v59;
    char v64 = 0;
    char v65 = 0;
    char v66 = 0;
    char v67 = 0;
    v269 = _Block_copy(v62);
    dispatch_retain(v55);
    dispatch_release(v55);
    _Block_release(v62);
    goto LABEL_115;
  }
  size_t v63 = v59;
  char v64 = 0;
  char v65 = 0;
  char v66 = 0;
  char v67 = 0;
LABEL_114:
  v269 = 0;
  dispatch_retain(v55);
  dispatch_release(v55);
LABEL_115:
  dispatch_release(v55);
  if ((v67 & 1) == 0) {
    _Block_release(v61);
  }
  dispatch_release(v55);
  if ((v66 & 1) == 0) {
    _Block_release(v213);
  }
  unint64_t v267 = (unint64_t)boost::function1<void,unsigned int>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})>>>(ctu::DispatchSlot<dispatch::block<void({block_pointer})>>)::stored_vtable;
  dispatch_release(v55);
  if ((v65 & 1) == 0) {
    _Block_release(v63);
  }
  dispatch_release(v55);
  if ((v64 & 1) == 0) {
    _Block_release(v58);
  }
  *((void *)&v271 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v271 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v270 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v270 = 0;
  boost::function1<void,unsigned int>::move_assign((uint64_t)&v270, (uint64_t *)&v267);
  boost::function1<void,unsigned int>::move_assign((uint64_t)&v267, (uint64_t *)&v260 + 1);
  boost::function1<void,unsigned int>::move_assign((uint64_t)&v260 + 8, (uint64_t *)&v270);
  if ((void)v270)
  {
    if ((v270 & 1) == 0)
    {
      size_t v68 = *(void (**)(char *, char *, uint64_t))(v270 & 0xFFFFFFFFFFFFFFFELL);
      if (v68) {
        v68((char *)&v270 + 8, (char *)&v270 + 8, 2);
      }
    }
  }
  if (v267)
  {
    if ((v267 & 1) == 0)
    {
      size_t v69 = *(void (**)(uint64_t, _WORD *, unsigned int))(v267 & 0xFFFFFFFFFFFFFFFELL);
      if (v69) {
        v69((uint64_t)&v268, &v268, 2u);
      }
    }
    unint64_t v267 = 0;
  }
  dispatch_release(v265);
  if (v266) {
    _Block_release(v266);
  }
  dispatch_release(v263);
  if (v264) {
    _Block_release(v264);
  }
  atomic_fetch_add_explicit(&v219->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v70 = operator new(0x18uLL);
  *uint64_t v70 = &unk_1F210A518;
  v70[1] = v221;
  v70[2] = v219;
  atomic_fetch_add_explicit(&v219->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v71 = operator new(0x18uLL);
  void *v71 = &unk_1F210A518;
  v71[1] = v221;
  v71[2] = v219;
  atomic_fetch_add_explicit(&v219->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *((void *)&v270 + 1) = v71;
  LODWORD(v270) = 2;
  size_t v72 = v259[1];
  if (v259[1] >= (std::__shared_weak_count *)v260)
  {
    xpc_object_t v74 = (std::__shared_weak_count *)std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>((uint64_t *)v259, (uint64_t)&v270);
  }
  else
  {
    uint64_t v73 = operator new(0x18uLL);
    void *v73 = &unk_1F210A518;
    v73[1] = v221;
    unint64_t v73[2] = v219;
    atomic_fetch_add_explicit(&v219->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v72->__shared_owners_ = (uint64_t)v73;
    LODWORD(v72->__vftable) = 2;
    xpc_object_t v74 = v72 + 1;
  }
  v259[1] = v74;
  boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)&v270);
  (*(void (**)(void *))(*v70 + 8))(v70);
  std::__shared_weak_count::__release_weak(v219);
  xpc_object_t v75 = *(uint64_t ***)(v217 + 136);
  *(void *)&long long v76 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v76 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v278 = v76;
  long long v279 = v76;
  long long v276 = v76;
  long long v277 = v76;
  long long v274 = v76;
  long long v275 = v76;
  long long v272 = v76;
  long long v273 = v76;
  long long v270 = v76;
  long long v271 = v76;
  size_t v77 = (pthread_mutex_t *)v75[3];
  unint64_t v280 = 10;
  v281 = &v270;
  uint64_t v282 = 0;
  uint64_t v283 = v77;
  pthread_mutex_lock(v77);
  unint64_t v268 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v267 = 0xAAAAAAAAAAAAAAAALL;
  size_t v78 = (atomic_uint *)v75[1];
  v222 = (uint64_t ***)v75;
  if (!v78 || atomic_load_explicit(v78 + 2, memory_order_acquire) != 1)
  {
    std::string::size_type v82 = (uint64_t **)operator new(0x20uLL);
    int64_t v83 = *v75;
    uint64_t v84 = *v83;
    char v218 = v82;
    size_t v85 = operator new(0x40uLL);
    unsigned int v86 = v85;
    void *v85 = v85;
    v85[1] = v85;
    v85[2] = 0;
    uint64_t v87 = *(void **)(v84 + 8);
    if (v87 != (void *)v84)
    {
      uint64_t v88 = 0;
      size_t v89 = v85;
      do
      {
        int v90 = operator new(0x20uLL);
        v90[2] = v87[2];
        uint64_t v91 = v87[3];
        v90[3] = v91;
        if (v91)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v91 + 8), 1u, memory_order_relaxed);
          size_t v89 = (void *)*v86;
          uint64_t v88 = v86[2];
        }
        *int v90 = v89;
        v90[1] = v86;
        v89[1] = v90;
        *unsigned int v86 = v90;
        v86[2] = ++v88;
        uint64_t v87 = (void *)v87[1];
        size_t v89 = v90;
      }
      while (v87 != (void *)v84);
    }
    unint64_t v214 = v83;
    v86[3] = 0;
    size_t v92 = (void **)(v86 + 3);
    v86[4] = 0;
    uint64_t v93 = v86 + 4;
    v86[5] = 0;
    *((unsigned char *)v86 + 48) = *(unsigned char *)(v84 + 48);
    v86[3] = v86 + 4;
    uint64_t v94 = *(void **)(v84 + 24);
    uint64_t v95 = (void *)(v84 + 32);
    if (v94 == (void *)(v84 + 32))
    {
LABEL_149:
      *((unsigned char *)v86 + 56) = *(unsigned char *)(v84 + 56);
      xpc_object_t v96 = *(void **)(v84 + 24);
      if (v96 != v95)
      {
        xpc_object_t v97 = (void *)v86[3];
        uint64_t v98 = v86[1];
        do
        {
          void v97[6] = v98;
          uint64_t v99 = v84;
          if (v96 != v95) {
            uint64_t v99 = v96[6];
          }
          std::string::size_type v100 = (void *)v96[1];
          uint64_t v101 = v100;
          uint64_t v102 = v96;
          if (v100)
          {
            do
            {
              size_t v103 = v101;
              uint64_t v101 = (void *)*v101;
            }
            while (v101);
          }
          else
          {
            do
            {
              size_t v103 = (void *)v102[2];
              BOOL v148 = *v103 == (void)v102;
              uint64_t v102 = v103;
            }
            while (!v148);
          }
          uint64_t v104 = v84;
          if (v103 != v95) {
            uint64_t v104 = v103[6];
          }
          while (v99 != v104)
          {
            uint64_t v99 = *(void *)(v99 + 8);
            uint64_t v98 = *(void *)(v98 + 8);
          }
          if (v100)
          {
            do
            {
              int v105 = v100;
              std::string::size_type v100 = (void *)*v100;
            }
            while (v100);
          }
          else
          {
            do
            {
              int v105 = (void *)v96[2];
              BOOL v148 = *v105 == (void)v96;
              xpc_object_t v96 = v105;
            }
            while (!v148);
          }
          size_t v106 = (void *)v97[1];
          if (v106)
          {
            do
            {
              size_t v107 = v106;
              size_t v106 = (void *)*v106;
            }
            while (v106);
          }
          else
          {
            do
            {
              size_t v107 = (void *)v97[2];
              BOOL v148 = *v107 == (void)v97;
              xpc_object_t v97 = v107;
            }
            while (!v148);
          }
          xpc_object_t v96 = v105;
          xpc_object_t v97 = v107;
        }
        while (v105 != v95);
      }
      *char v218 = v86;
      v218[1] = 0;
      xpc_object_t v127 = (uint64_t *)operator new(0x18uLL);
      xpc_object_t v75 = (uint64_t **)v222;
      v127[1] = 0x100000001;
      *xpc_object_t v127 = (uint64_t)&unk_1F210A360;
      v127[2] = (uint64_t)v86;
      v218[1] = v127;
      v218[2] = (uint64_t *)v214[2];
      uint64_t v128 = v214[3];
      v218[3] = (uint64_t *)v128;
      if (v128) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v128 + 8), 1u, memory_order_relaxed);
      }
      size_t v129 = (uint64_t **)operator new(0x18uLL);
      v129[1] = (uint64_t *)0x100000001;
      *size_t v129 = (uint64_t *)&unk_1F210A300;
      v129[2] = (uint64_t *)v218;
      xpc_object_t v130 = (atomic_uint *)v222[1];
      const void *v222 = v218;
      v222[1] = v129;
      if (v130)
      {
        if (atomic_fetch_add(v130 + 2, 0xFFFFFFFF) == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v130 + 16))(v130);
          if (atomic_fetch_add(v130 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v130 + 24))(v130);
          }
        }
      }
      int v81 = 0;
      unint64_t v79 = **v222;
LABEL_228:
      uint64_t v80 = (uint64_t *)v79[1];
      if (v79 == v80) {
        goto LABEL_328;
      }
      goto LABEL_229;
    }
    while (1)
    {
      int v108 = *((_DWORD *)v94 + 8);
      uint64_t v109 = (void *)*v93;
      uint64_t v110 = v86 + 4;
      if (*v92 != v93)
      {
        uint64_t v111 = (void *)*v93;
        uint64_t v112 = v86 + 4;
        if (v109)
        {
          do
          {
            uint64_t v110 = v111;
            uint64_t v111 = (void *)v111[1];
          }
          while (v111);
        }
        else
        {
          do
          {
            uint64_t v110 = (void *)v112[2];
            BOOL v148 = *v110 == (void)v112;
            uint64_t v112 = v110;
          }
          while (v148);
        }
        int v113 = *((_DWORD *)v94 + 10);
        int v114 = *((_DWORD *)v110 + 8);
        if (v114 == v108)
        {
          if (v108 != 1) {
            goto LABEL_194;
          }
          if (*((_DWORD *)v110 + 10) >= v113)
          {
            size_t v115 = (void *)*v93;
            int v116 = v86 + 4;
            uint64_t v117 = v86 + 4;
            if (v109) {
              goto LABEL_198;
            }
LABEL_205:
            size_t v121 = operator new(0x38uLL);
            long long v122 = *((_OWORD *)v94 + 2);
            v121[6] = v94[6];
            *((_OWORD *)v121 + 2) = v122;
            *size_t v121 = 0;
            v121[1] = 0;
            v121[2] = v117;
            void *v116 = v121;
            std::string::size_type v123 = (void *)**v92;
            if (v123)
            {
              void *v92 = v123;
              size_t v121 = (void *)*v116;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v86[4], v121);
            ++v86[5];
            goto LABEL_208;
          }
        }
        else if (v114 >= v108)
        {
LABEL_194:
          int v116 = v86 + 4;
          uint64_t v117 = v86 + 4;
          if (!v109) {
            goto LABEL_205;
          }
          size_t v115 = (void *)*v93;
          if (v108 != 1)
          {
            int v118 = *((_DWORD *)v109 + 8);
            uint64_t v117 = (void *)*v93;
            while (v108 != v118)
            {
              if (v108 < v118)
              {
                uint64_t v126 = *v117;
                int v116 = v117;
                if (!*v117) {
                  goto LABEL_205;
                }
              }
              else
              {
                if (v118 >= v108) {
                  goto LABEL_208;
                }
                uint64_t v126 = v117[1];
                if (!v126) {
                  goto LABEL_204;
                }
              }
              int v118 = *(_DWORD *)(v126 + 32);
              uint64_t v117 = (void *)v126;
            }
            goto LABEL_208;
          }
          while (1)
          {
LABEL_198:
            uint64_t v117 = v115;
            int v119 = *((_DWORD *)v115 + 8);
            if (v119 == 1)
            {
              int v120 = *((_DWORD *)v115 + 10);
              if (v120 > v113) {
                goto LABEL_197;
              }
              if (v120 >= v113) {
                goto LABEL_208;
              }
            }
            else if (v119 > 1)
            {
LABEL_197:
              size_t v115 = (void *)*v115;
              int v116 = v117;
              if (!*v117) {
                goto LABEL_205;
              }
              continue;
            }
            size_t v115 = (void *)v115[1];
            if (!v115)
            {
LABEL_204:
              int v116 = v117 + 1;
              goto LABEL_205;
            }
          }
        }
      }
      if (v109) {
        uint64_t v117 = v110;
      }
      else {
        uint64_t v117 = v86 + 4;
      }
      if (v109) {
        int v116 = v110 + 1;
      }
      else {
        int v116 = v86 + 4;
      }
      if (!*v116) {
        goto LABEL_205;
      }
LABEL_208:
      uint64_t v124 = (void *)v94[1];
      if (v124)
      {
        do
        {
          uint64_t v125 = v124;
          uint64_t v124 = (void *)*v124;
        }
        while (v124);
      }
      else
      {
        do
        {
          uint64_t v125 = (void *)v94[2];
          BOOL v148 = *v125 == (void)v94;
          uint64_t v94 = v125;
        }
        while (!v148);
      }
      uint64_t v94 = v125;
      if (v125 == v95) {
        goto LABEL_149;
      }
    }
  }
  unint64_t v79 = (uint64_t *)**v75;
  uint64_t v80 = v75[2];
  int v81 = 2;
  if (v80 == v79) {
    goto LABEL_228;
  }
LABEL_229:
  int v131 = 0;
  unsigned int v132 = v81 - 1;
  do
  {
    uint64_t v135 = v80[2];
    size_t v136 = *(uint64_t **)(v135 + 32);
    if (v136)
    {
      for (uint64_t i = *v136; i != v136[1]; i += 24)
      {
        if ((*(_DWORD *)i ^ (*(int *)i >> 31)) > 1)
        {
          if ((*(uint64_t (**)(void))(**(void **)(i + 8) + 24))(*(void *)(i + 8))) {
            goto LABEL_246;
          }
        }
        else
        {
          uint64_t v138 = *(void *)(i + 16);
          if (!v138 || !atomic_load_explicit((atomic_uint *volatile)(v138 + 8), memory_order_acquire))
          {
LABEL_246:
            if (*(unsigned char *)(v135 + 24))
            {
              *(unsigned char *)(v135 + 24) = 0;
              boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)v135, &v270);
            }
            break;
          }
        }
      }
    }
    uint64_t v133 = v80[2];
    if (*(unsigned char *)(v133 + 24))
    {
      unint64_t v79 = (uint64_t *)v80[1];
      goto LABEL_232;
    }
    uint64_t v139 = **v75;
    xpc_object_t v140 = (uint64_t **)(v139 + 32);
    uint64_t v141 = *(void *)(v139 + 32);
    if (!v141)
    {
      if (*(uint64_t **)(v139 + 80) != v80) {
        goto LABEL_323;
      }
      std::string::size_type v163 = (uint64_t *)v80[1];
      size_t v165 = (uint64_t **)(v139 + 32);
      size_t v144 = (uint64_t *)(v139 + 32);
      if (v163 != (uint64_t *)v139) {
        goto LABEL_319;
      }
LABEL_301:
      uint64_t v168 = (uint64_t *)v144[1];
      std::string::size_type v169 = v144;
      if (v168)
      {
        do
        {
          std::string::size_type v170 = v168;
          uint64_t v168 = (uint64_t *)*v168;
        }
        while (v168);
      }
      else
      {
        do
        {
          std::string::size_type v170 = (uint64_t *)v169[2];
          BOOL v148 = *v170 == (void)v169;
          std::string::size_type v169 = v170;
        }
        while (!v148);
      }
      if (*(uint64_t **)(v139 + 24) == v144) {
        *(void *)(v139 + 24) = v170;
      }
      --*(void *)(v139 + 40);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v141, v144);
      operator delete(v144);
      goto LABEL_323;
    }
    int v142 = *(_DWORD *)(v133 + 64);
    int v143 = *(_DWORD *)(v133 + 72);
    size_t v144 = (uint64_t *)(v139 + 32);
    uint64_t v145 = *(void *)(v139 + 32);
    if (v142 == 1)
    {
      size_t v144 = (uint64_t *)(v139 + 32);
      uint64_t v146 = *(void *)(v139 + 32);
      do
      {
        while (1)
        {
          int v152 = *(_DWORD *)(v146 + 32);
          BOOL v153 = v152 < 1;
          if (v152 == 1) {
            BOOL v153 = *(_DWORD *)(v146 + 40) < v143;
          }
          if (!v153) {
            break;
          }
          uint64_t v146 = *(void *)(v146 + 8);
          if (!v146) {
            goto LABEL_267;
          }
        }
        size_t v144 = (uint64_t *)v146;
        uint64_t v146 = *(void *)v146;
      }
      while (v146);
    }
    else
    {
      do
      {
        int v147 = *(_DWORD *)(v145 + 32);
        BOOL v148 = v147 == v142;
        BOOL v149 = v147 < v142;
        if (v147 >= v142) {
          size_t v150 = (uint64_t *)v145;
        }
        else {
          size_t v150 = (uint64_t *)(v145 + 8);
        }
        if (v149) {
          xpc_object_t v151 = v144;
        }
        else {
          xpc_object_t v151 = (uint64_t *)v145;
        }
        if (v148)
        {
          size_t v150 = (uint64_t *)v145;
          size_t v144 = (uint64_t *)v145;
        }
        else
        {
          size_t v144 = v151;
        }
        uint64_t v145 = *v150;
      }
      while (*v150);
    }
LABEL_267:
    if ((uint64_t *)v144[6] != v80) {
      goto LABEL_323;
    }
    long long v154 = (uint64_t **)(v139 + 32);
    xpc_object_t v155 = *(uint64_t ***)(v139 + 32);
    if (v142 == 1)
    {
      while (1)
      {
        int v161 = *((_DWORD *)v155 + 8);
        if (v161 == 1)
        {
          if (v143 < *((_DWORD *)v155 + 10)) {
            goto LABEL_284;
          }
LABEL_279:
          xpc_object_t v155 = (uint64_t **)v155[1];
          if (!v155) {
            goto LABEL_285;
          }
        }
        else
        {
          if (v161 <= 1) {
            goto LABEL_279;
          }
LABEL_284:
          long long v154 = v155;
          xpc_object_t v155 = (uint64_t **)*v155;
          if (!v155) {
            goto LABEL_285;
          }
        }
      }
    }
    do
    {
      int v156 = *((_DWORD *)v155 + 8);
      size_t v157 = (uint64_t ***)(v155 + 1);
      BOOL v158 = v142 == v156;
      BOOL v159 = v142 < v156;
      if (v142 >= v156) {
        uint64_t v160 = (uint64_t ***)(v155 + 1);
      }
      else {
        uint64_t v160 = (uint64_t ***)v155;
      }
      if (!v159) {
        xpc_object_t v155 = v154;
      }
      if (v158) {
        uint64_t v160 = v157;
      }
      else {
        long long v154 = v155;
      }
      xpc_object_t v155 = *v160;
    }
    while (*v160);
LABEL_285:
    xpc_object_t v162 = (uint64_t *)v139;
    if (v154 != v140) {
      xpc_object_t v162 = v154[6];
    }
    std::string::size_type v163 = (uint64_t *)v80[1];
    if (v163 == v162) {
      goto LABEL_301;
    }
    if (v142 == 1)
    {
      while (1)
      {
        while (1)
        {
          size_t v165 = (uint64_t **)v141;
          int v166 = *(_DWORD *)(v141 + 32);
          if (v166 == 1) {
            break;
          }
          if (v166 <= 1) {
            goto LABEL_297;
          }
LABEL_291:
          uint64_t v141 = *(void *)v141;
          if (!*v165)
          {
            xpc_object_t v140 = v165;
            goto LABEL_319;
          }
        }
        int v167 = *(_DWORD *)(v141 + 40);
        if (v167 > v143) {
          goto LABEL_291;
        }
        if (v167 >= v143)
        {
          *(void *)(v141 + 48) = v163;
          goto LABEL_323;
        }
LABEL_297:
        uint64_t v141 = *(void *)(v141 + 8);
        if (!v141)
        {
          xpc_object_t v140 = v165 + 1;
          goto LABEL_319;
        }
      }
    }
    int v164 = *(_DWORD *)(v141 + 32);
    if (v142 == v164) {
      goto LABEL_322;
    }
    while (v142 >= v164)
    {
      if (v164 >= v142) {
        goto LABEL_322;
      }
      uint64_t v171 = *(void *)(v141 + 8);
      if (!v171)
      {
        xpc_object_t v140 = (uint64_t **)(v141 + 8);
        goto LABEL_318;
      }
LABEL_310:
      int v164 = *(_DWORD *)(v171 + 32);
      uint64_t v141 = v171;
      if (v142 == v164)
      {
        *(void *)(v171 + 48) = v163;
        goto LABEL_323;
      }
    }
    uint64_t v171 = *(void *)v141;
    if (*(void *)v141) {
      goto LABEL_310;
    }
    xpc_object_t v140 = (uint64_t **)v141;
LABEL_318:
    size_t v165 = (uint64_t **)v141;
LABEL_319:
    uint64_t v141 = (uint64_t)operator new(0x38uLL);
    uint64_t v172 = *(void *)(v133 + 64);
    *(_DWORD *)(v141 + 40) = *(_DWORD *)(v133 + 72);
    *(void *)(v141 + 32) = v172;
    *(void *)(v141 + 48) = 0;
    *(void *)uint64_t v141 = 0;
    *(void *)(v141 + 8) = 0;
    *(void *)(v141 + 16) = v165;
    *xpc_object_t v140 = (uint64_t *)v141;
    uint64_t v173 = **(void **)(v139 + 24);
    uint64_t v174 = (uint64_t *)v141;
    if (v173)
    {
      *(void *)(v139 + 24) = v173;
      uint64_t v174 = *v140;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v139 + 32), v174);
    ++*(void *)(v139 + 40);
LABEL_322:
    *(void *)(v141 + 48) = v163;
LABEL_323:
    uint64_t v175 = *v80;
    unint64_t v79 = (uint64_t *)v80[1];
    *(void *)(v175 + 8) = v79;
    *(void *)v80[1] = v175;
    --*(void *)(v139 + 16);
    v176 = (atomic_uint *)v80[3];
    if (v176)
    {
      if (atomic_fetch_add(v176 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v176 + 16))(v176);
        if (atomic_fetch_add(v176 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v176 + 24))(v176);
        }
      }
    }
    operator delete(v80);
    xpc_object_t v75 = (uint64_t **)v222;
LABEL_232:
    BOOL v134 = v79 != (uint64_t *)**v75 && v132 >= ++v131;
    uint64_t v80 = v79;
  }
  while (v134);
LABEL_328:
  v75[2] = v79;
  uint64_t v177 = operator new(0x50uLL);
  v177[1] = 0;
  v177[2] = 0;
  *((unsigned char *)v177 + 24) = 1;
  *((_DWORD *)v177 + 7) = 1;
  void *v177 = &unk_1F210A3C0;
  size_t v178 = operator new(0x38uLL);
  std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(v178, (uint64_t *)v259);
  v178[3] = 0;
  uint64_t v179 = *((void *)&v260 + 1);
  if (*((void *)&v260 + 1))
  {
    v178[3] = *((void *)&v260 + 1);
    if (v179)
    {
      *((_OWORD *)v178 + 2) = v261;
      v178[6] = v262;
    }
    else
    {
      (*(void (**)(long long *, void *, void))(v179 & 0xFFFFFFFFFFFFFFFELL))(&v261, v178 + 4, 0);
    }
  }
  v177[4] = v178;
  v177[5] = 0;
  uint64_t v180 = operator new(0x18uLL);
  v180[1] = 0x100000001;
  *uint64_t v180 = &unk_1F210A418;
  v180[2] = v178;
  v177[5] = v180;
  v177[6] = v75[3];
  uint64_t v181 = (atomic_uint *)v75[4];
  v177[7] = v181;
  if (v181) {
    atomic_fetch_add_explicit(v181 + 2, 1u, memory_order_relaxed);
  }
  *((_DWORD *)v177 + 16) = 0;
  *((unsigned char *)v177 + 68) = 0;
  unint64_t v267 = (unint64_t)v177;
  uint64_t v182 = operator new(0x18uLL);
  *((void *)v182 + 1) = 0x100000001;
  *(void *)uint64_t v182 = &unk_1F210A478;
  *((void *)v182 + 2) = v177;
  unint64_t v268 = (unint64_t)v182;
  v183 = (uint64_t *)**v75;
  xpc_object_t v184 = operator new(0x20uLL);
  xpc_object_t v185 = v183 + 4;
  dispatch_object_t v184[2] = v177;
  v184[3] = v182;
  atomic_fetch_add_explicit((atomic_uint *volatile)v182 + 2, 1u, memory_order_relaxed);
  uint64_t v186 = *v183;
  *(void *)(v186 + 8) = v184;
  void *v184 = v186;
  uint64_t *v183 = (uint64_t)v184;
  v184[1] = v183;
  ++v183[2];
  std::string v187 = (uint64_t *)v183[4];
  if (v187)
  {
    xpc_object_t v188 = v183 + 4;
    uint64_t v189 = v183[4];
    do
    {
      int v190 = *(_DWORD *)(v189 + 32);
      BOOL v191 = v190 == 2;
      BOOL v192 = v190 < 2;
      if (v190 >= 2) {
        xpc_object_t v193 = (uint64_t *)v189;
      }
      else {
        xpc_object_t v193 = (uint64_t *)(v189 + 8);
      }
      if (!v192) {
        xpc_object_t v188 = (uint64_t *)v189;
      }
      if (v191)
      {
        xpc_object_t v193 = (uint64_t *)v189;
        xpc_object_t v188 = (uint64_t *)v189;
      }
      uint64_t v189 = *v193;
    }
    while (*v193);
    if (v188 == v185 || *((_DWORD *)v188 + 8) != 2)
    {
      int v195 = *((_DWORD *)v187 + 8);
      while (v195 != 2)
      {
        if (v195 < 3)
        {
          std::string v196 = (uint64_t *)v187[1];
          if (!v196)
          {
            xpc_object_t v185 = v187 + 1;
            goto LABEL_355;
          }
        }
        else
        {
          std::string v196 = (uint64_t *)*v187;
          xpc_object_t v185 = v187;
          if (!*v187) {
            goto LABEL_355;
          }
        }
        int v195 = *((_DWORD *)v196 + 8);
        std::string v187 = v196;
      }
    }
    *((_DWORD *)v177 + 16) = 2;
    *(void *)((char *)v177 + 68) = 0xAAAAAAAAAAAAAA00;
    xpc_object_t v194 = v216;
LABEL_358:
    atomic_fetch_add_explicit((atomic_uint *volatile)v182 + 3, 1u, memory_order_relaxed);
    *(void *)&long long v228 = v177;
    *((void *)&v228 + 1) = v182;
    atomic_fetch_add_explicit((atomic_uint *volatile)v182 + 3, 1u, memory_order_relaxed);
    if (atomic_fetch_add((atomic_uint *volatile)v182 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(void *))(*(void *)v182 + 24))(v182);
    }
    uint64_t v199 = (atomic_uint *)v268;
    if (v268) {
      goto LABEL_361;
    }
  }
  else
  {
    std::string v187 = v183 + 4;
LABEL_355:
    unint64_t v197 = operator new(0x38uLL);
    v197[4] = 0xAAAAAA0000000002;
    *((_DWORD *)v197 + 10) = -1431655766;
    v197[6] = v184;
    *unint64_t v197 = 0;
    v197[1] = 0;
    v197[2] = v187;
    *xpc_object_t v185 = (uint64_t)v197;
    uint64_t v198 = *(void *)v183[3];
    if (v198)
    {
      v183[3] = v198;
      unint64_t v197 = (void *)*v185;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v183[4], v197);
    ++v183[5];
    uint64_t v177 = (void *)v267;
    uint64_t v182 = (void *)v268;
    *(_DWORD *)(v267 + 64) = 2;
    *(void *)((char *)v177 + 68) = 0xAAAAAAAAAAAAAA00;
    xpc_object_t v194 = v216;
    if (v182) {
      goto LABEL_358;
    }
    long long v228 = (unint64_t)v177;
    uint64_t v199 = (atomic_uint *)v268;
    if (v268)
    {
LABEL_361:
      if (atomic_fetch_add(v199 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v199 + 16))(v199);
        if (atomic_fetch_add(v199 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v199 + 24))(v199);
        }
      }
    }
  }
  pthread_mutex_unlock(v283);
  size_t v200 = (char *)v281;
  if (v281)
  {
    v201 = v194;
    if (v282 - 1 >= 0)
    {
      uint64_t v202 = (char *)v281 + 16 * v282;
      do
      {
        uint64_t v203 = (atomic_uint *)*((void *)v202 - 1);
        if (v203)
        {
          if (atomic_fetch_add(v203 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v203 + 16))(v203);
            if (atomic_fetch_add(v203 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v203 + 24))(v203);
            }
          }
        }
        v202 -= 16;
      }
      while (v202 > v200);
    }
    xpc_object_t v194 = v201;
    if (v280 >= 0xB) {
      operator delete(v281);
    }
  }
  if (*((void *)&v260 + 1))
  {
    if ((BYTE8(v260) & 1) == 0)
    {
      uint64_t v204 = *(void (**)(long long *, long long *, uint64_t))(*((void *)&v260 + 1) & 0xFFFFFFFFFFFFFFFELL);
      if (v204) {
        v204(&v261, &v261, 2);
      }
    }
    *((void *)&v260 + 1) = 0;
  }
  v205 = v259[0];
  if (v259[0])
  {
    unint64_t v206 = v259[1];
    xpc_object_t v207 = v259[0];
    if (v259[1] != v259[0])
    {
      do
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)--v206);
      while (v206 != v205);
      xpc_object_t v207 = v259[0];
    }
    v259[1] = v205;
    operator delete(v207);
  }
  dispatch_release(v257);
  if (v258) {
    _Block_release(v258);
  }
  if (atomic_fetch_add(&v219->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    size_t v208 = v215;
    if (!v215) {
      goto LABEL_398;
    }
LABEL_397:
    _Block_release(v208);
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
    std::__shared_weak_count::__release_weak(v219);
    size_t v208 = v215;
    if (v215) {
      goto LABEL_397;
    }
  }
LABEL_398:
  int64_t v209 = operator new(0x20uLL);
  v209[1] = v228;
  long long v228 = 0uLL;
  uint64_t v210 = *((void *)v194 + 41);
  *(void *)int64_t v209 = v210;
  *((void *)v209 + 1) = (char *)v194 + 328;
  *(void *)(v210 + 8) = v209;
  *((void *)v194 + 41) = v209;
  ++*((void *)v194 + 43);
  uint64_t v211 = v227;
  if (v227 && !atomic_fetch_add(&v227->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
    std::__shared_weak_count::__release_weak(v211);
  }
  if (v225) {
    std::__shared_weak_count::__release_weak(v225);
  }
  if (v223 && !atomic_fetch_add(&v223->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
    std::__shared_weak_count::__release_weak(v223);
  }
  if (v230) {
    std::__shared_weak_count::__release_weak(v230);
  }
  if (v236) {
    std::__shared_weak_count::__release_weak(v236);
  }
  uint64_t v212 = v249;
  if (v249 && !atomic_fetch_add(&v249->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
    std::__shared_weak_count::__release_weak(v212);
  }
  std::__shared_weak_count::__release_weak(v220);
}