void sub_1C5ABA844(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1C5ABA850(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABA85C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABA868(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABA874(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABA880(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABA88C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABA898(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABA8A4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a2)
  {
    v73 = *v72;
    if (*v72)
    {
      uint64_t v74 = (uint64_t)v72[1];
      v75 = *v72;
      if ((void *)v74 != v73)
      {
        do
        {
          v74 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v74);
        }
        while ((void *)v74 != v73);
        v75 = *v72;
      }
      v72[1] = v73;
      operator delete(v75);
    }
    operator delete(v72);
    boost::signals2::detail::connection_body_base::~connection_body_base(v71);
    operator delete(v71);
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&STACK[0x280]);
    boost::signals2::slot<void (),boost::function<void ()>>::~slot((void **)&STACK[0x200]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})>>::~DispatchSlot((uint64_t)&a71);
    JUMPOUT(0x1C5ABB3D4);
  }
  _Unwind_Resume(a1);
}

void sub_1C5ABA8EC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABA8F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (a31) {
    std::__shared_weak_count::__release_weak(a31);
  }
  if (a43) {
    std::__shared_weak_count::__release_weak(a43);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a62);
  std::__shared_weak_count::__release_weak(a15);
  _Unwind_Resume(a1);
}

void sub_1C5ABA90C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABA918()
{
}

void sub_1C5ABA92C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABA938(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABA944(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABA950(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABA95C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABA968(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a2)
  {
    boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)&STACK[0x280]);
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    std::__shared_weak_count::__release_weak(a14);
    JUMPOUT(0x1C5ABB3C4);
  }
  _Unwind_Resume(a1);
}

void sub_1C5ABA984(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABA990(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABA99C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABA9A8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABA9B4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABA9C0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABA9CC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABA9D8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABA9E4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABA9F0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABA9FC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABAA08(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABAA14(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABAA20(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABAA2C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABAA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62)
{
  if (!a59)
  {
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a62);
    std::__shared_weak_count::__release_weak(a15);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1C5ABB1B0);
}

void sub_1C5ABAA50(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABAA5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    v13 = (atomic_uint *)__p[3];
    if (v13)
    {
      if (atomic_fetch_add(v13 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v13 + 16))(v13);
        if (atomic_fetch_add(v13 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v13 + 24))(v13);
        }
      }
    }
    uint64_t v14 = (atomic_uint *)__p[1];
    if (v14 && atomic_fetch_add(v14 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v14 + 16))(v14);
      if (atomic_fetch_add(v14 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v14 + 24))(v14);
      }
    }
    operator delete(__p);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1C5ABAB84(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABAB90(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABAB9C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a2)
  {
    __cxa_end_catch();
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&STACK[0x280]);
    boost::signals2::slot<void (),boost::function<void ()>>::~slot((void **)&STACK[0x200]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})>>::~DispatchSlot((uint64_t)&a71);
    JUMPOUT(0x1C5ABB3D4);
  }
  _Unwind_Resume(a1);
}

void sub_1C5ABABAC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABABB8(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy((void *)v2[4]);
    if (v2[2])
    {
      v3 = (void *)*v2;
      v4 = (uint64_t *)v2[1];
      uint64_t v5 = *v4;
      *(void *)(v5 + 8) = *(void *)(*v2 + 8);
      *(void *)v3[1] = v5;
      v2[2] = 0;
      if (v4 != v2)
      {
        do
        {
          v6 = (uint64_t *)v4[1];
          v7 = (atomic_uint *)v4[3];
          if (v7 && atomic_fetch_add(v7 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v7 + 16))(v7);
            if (atomic_fetch_add(v7 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v7 + 24))(v7);
            }
          }
          operator delete(v4);
          v4 = v6;
        }
        while (v6 != v2);
      }
    }
    operator delete(v2);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1C5ABACA8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABACB4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  if (a2)
  {
    __cxa_end_catch();
    v13 = (atomic_uint *)a13[1];
    if (v13)
    {
      if (atomic_fetch_add(v13 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v13 + 16))(v13);
        if (atomic_fetch_add(v13 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v13 + 24))(v13);
        }
      }
    }
    operator delete(a13);
    JUMPOUT(0x1C5ABB3BCLL);
  }
  _Unwind_Resume(a1);
}

void sub_1C5ABAD48(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABAD54(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABAD60(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  if (a2)
  {
    operator delete(a13);
    JUMPOUT(0x1C5ABB3BCLL);
  }
  _Unwind_Resume(a1);
}

void sub_1C5ABAD6C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31)
{
  if (a20) {
    std::__shared_weak_count::__release_weak(a20);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  if (a31) {
    std::__shared_weak_count::__release_weak(a31);
  }
  JUMPOUT(0x1C5ABB1A8);
}

void sub_1C5ABAD90(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABAD9C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1C5ABADDC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a2)
  {
    __cxa_end_catch();
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&STACK[0x280]);
    boost::signals2::slot<void (),boost::function<void ()>>::~slot((void **)&STACK[0x200]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})>>::~DispatchSlot((uint64_t)&a71);
    JUMPOUT(0x1C5ABB3D4);
  }
  _Unwind_Resume(a1);
}

void sub_1C5ABADEC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABADF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    unint64_t v14 = (unint64_t)v13[3];
    if (v14)
    {
      if ((v14 & 1) == 0)
      {
        v15 = *(void (**)(void **, void **, uint64_t))(v14 & 0xFFFFFFFFFFFFFFFELL);
        if (v15) {
          v15(v13 + 4, v13 + 4, 2);
        }
      }
      v13[3] = 0;
    }
    v16 = *v13;
    if (*v13)
    {
      uint64_t v17 = (uint64_t)v13[1];
      v18 = *v13;
      if ((void *)v17 != v16)
      {
        do
        {
          v17 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v17);
        }
        while ((void *)v17 != v16);
        v18 = *v13;
      }
      v13[1] = v16;
      operator delete(v18);
    }
    operator delete(v13);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1C5ABAE80(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABAE8C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, boost::signals2::detail::connection_body_base *a13)
{
  if (a2)
  {
    __cxa_end_catch();
    v13 = (atomic_uint *)*((void *)a13 + 5);
    if (v13)
    {
      if (atomic_fetch_add(v13 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v13 + 16))(v13);
        if (atomic_fetch_add(v13 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v13 + 24))(v13);
        }
      }
    }
    boost::signals2::detail::connection_body_base::~connection_body_base(a13);
    JUMPOUT(0x1C5ABB2F8);
  }
  _Unwind_Resume(a1);
}

void sub_1C5ABAF20(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABAF2C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABAF38(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C5ABAF44);
  }
  _Unwind_Resume(a1);
}

void sub_1C5ABAF50(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C5ABAF5CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1C5ABAF68(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    unint64_t v2 = STACK[0x328];
    if (STACK[0x328])
    {
      if ((uint64_t)(STACK[0x330] - 1) >= 0)
      {
        unint64_t v3 = v2 + 16 * STACK[0x330];
        do
        {
          v4 = *(atomic_uint **)(v3 - 8);
          if (v4)
          {
            if (atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
              if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
              }
            }
          }
          v3 -= 16;
        }
        while (v3 > v2);
      }
      if (STACK[0x320] >= 0xB) {
        operator delete((void *)STACK[0x328]);
      }
    }
    JUMPOUT(0x1C5ABB3C4);
  }
  _Unwind_Resume(a1);
}

void sub_1C5ABB030(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABB03C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C5ABB044);
  }
  _Unwind_Resume(a1);
}

void sub_1C5ABB070(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C5ABB078);
  }
  _Unwind_Resume(a1);
}

void sub_1C5ABB084(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABB0A0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABB0AC()
{
}

void sub_1C5ABB0C4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46)
{
  if (a31) {
    std::__shared_weak_count::__release_weak(a31);
  }
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a46) {
    std::__shared_weak_count::__release_weak(a46);
  }
  JUMPOUT(0x1C5ABB1D0);
}

void sub_1C5ABB0F0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABB0FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, std::__shared_weak_count *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,...)
{
  va_start(va, a57);
  dispatch::callback<void({block_pointer})(std::shared_ptr<abm::client::Event>)>::~callback((uint64_t)&a37);
  if (a36) {
    std::__shared_weak_count::__release_weak(a36);
  }
  if (a44 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::__shared_weak_count::__release_weak(a8);
  _Unwind_Resume(a1);
}

void sub_1C5ABB128(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABB134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,const void *a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a49);
  if (a55 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a65);
  std::__shared_weak_count::__release_weak(a15);
  _Unwind_Resume(a1);
}

void sub_1C5ABB154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a64);
  std::__shared_weak_count::__release_weak(a15);
  _Unwind_Resume(a1);
}

void sub_1C5ABB170(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABB17C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
}

void sub_1C5ABB190(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a2)
  {
    boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>::~shared_ptr((uint64_t)&STACK[0x260]);
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&STACK[0x280]);
    boost::signals2::slot<void (),boost::function<void ()>>::~slot((void **)&STACK[0x200]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})>>::~DispatchSlot((uint64_t)&a71);
    JUMPOUT(0x1C5ABB3D4);
  }
  _Unwind_Resume(a1);
}

void sub_1C5ABB1B8()
{
}

void sub_1C5ABB1E8(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    boost::function1<void,unsigned int>::~function1((uint64_t *)&STACK[0x280]);
    boost::function<void ()>::~function((uint64_t *)&STACK[0x260]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})>>::~DispatchSlot((uint64_t)&STACK[0x250]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})>>::~DispatchSlot((uint64_t)&STACK[0x240]);
    unint64_t v2 = STACK[0x218];
    if (STACK[0x218])
    {
      if ((v2 & 1) == 0)
      {
        unint64_t v3 = *(void (**)(unint64_t *, unint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3) {
          v3(&STACK[0x220], &STACK[0x220], 2);
        }
      }
      STACK[0x218] = 0;
    }
    unint64_t v4 = STACK[0x200];
    if (STACK[0x200])
    {
      uint64_t v5 = STACK[0x208];
      v6 = (void *)STACK[0x200];
      if (STACK[0x208] != v4)
      {
        do
        {
          v5 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
        }
        while (v5 != v4);
        v6 = (void *)STACK[0x200];
      }
      STACK[0x208] = v4;
      operator delete(v6);
    }
    JUMPOUT(0x1C5ABB3CCLL);
  }
  _Unwind_Resume(a1);
}

void sub_1C5ABB27C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABB288(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABB298(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABB2A4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(v3);
    std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>>::~list(v2);
    operator delete(v2);
    JUMPOUT(0x1C5ABB2F8);
  }
  _Unwind_Resume(a1);
}

void sub_1C5ABB3A0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5ABB3AC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (!a2) {
    JUMPOUT(0x1C5ABB3B4);
  }
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock(&STACK[0x280]);
  boost::signals2::slot<void (),boost::function<void ()>>::~slot(&STACK[0x200]);
  ctu::DispatchSlot<dispatch::block<void({block_pointer})>>::~DispatchSlot(&a71);
  JUMPOUT(0x1C5ABB3D4);
}

void ___ZN11RadioModule25finishInitialization_syncEv_block_invoke(void *a1, uint64_t *a2, const __CFDictionary **a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[4];
  uint64_t v29 = 0;
  v30 = 0;
  uint64_t v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    v30 = std::__shared_weak_count::lock(v5);
    if (!v30) {
      return;
    }
    uint64_t v29 = a1[5];
    if (v29)
    {
      uint64_t v8 = *a2;
      if (v8) {
        v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      }
      else {
        v9 = 0;
      }
      if (v9)
      {
        v10 = *(NSObject **)(v4 + 88);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v32 = 138412290;
          *(void *)&v32[4] = v8;
          _os_log_error_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_ERROR, "%@", v32, 0xCu);
        }
        goto LABEL_10;
      }
      if (*a3
         ? ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get
         : 0)
      {
        v13 = (const void *)*MEMORY[0x1E4F4D0F8];
        size_t v14 = strlen((const char *)*MEMORY[0x1E4F4D0F8]);
        if (v14 >= 0x7FFFFFFFFFFFFFF8) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        v15 = (void *)v14;
        if (v14 >= 0x17)
        {
          uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v14 | 7) != 0x17) {
            uint64_t v17 = v14 | 7;
          }
          uint64_t v18 = v17 + 1;
          v16 = (void **)operator new(v17 + 1);
          __dst[1] = v15;
          unint64_t v28 = v18 | 0x8000000000000000;
          __dst[0] = v16;
        }
        else
        {
          HIBYTE(v28) = v14;
          v16 = __dst;
          if (!v14) {
            goto LABEL_26;
          }
        }
        memmove(v16, v13, (size_t)v15);
LABEL_26:
        *((unsigned char *)v15 + (void)v16) = 0;
        CFDictionaryRef v19 = *a3;
        CFTypeRef cf = v19;
        if (v19) {
          CFRetain(v19);
        }
        aBlock = 0;
        Service::broadcastEvent(v4, (uint64_t)__dst, &cf, (const void **)&aBlock);
        if (aBlock) {
          _Block_release(aBlock);
        }
        v20 = (capabilities::abs *)cf;
        if (cf) {
          CFRelease(cf);
        }
        if (SHIBYTE(v28) < 0) {
          operator delete(__dst[0]);
        }
        v21 = (capabilities::txpower *)capabilities::abs::supportsChargerDesense(v20);
        if (v21 && capabilities::txpower::supportsPowerChargerDesense(v21))
        {
          memset(v32, 170, 16);
          ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v32, *a3);
          ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)buf, (const char *)*MEMORY[0x1E4F4CB50]);
          int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v32, *(const __CFString **)buf);
          MEMORY[0x1C8794290](buf);
          TelephonyBasebandSetChargerDesense();
          v23 = *(NSObject **)(v4 + 88);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            v24 = "Off";
            if (!Int) {
              v24 = "On";
            }
            *(_DWORD *)buf = 136315138;
            *(void *)&buf[4] = v24;
            _os_log_impl(&dword_1C59C6000, v23, OS_LOG_TYPE_DEFAULT, "#I Charger Desense: %s", buf, 0xCu);
          }
          MEMORY[0x1C87942E0](v32);
        }
      }
    }
  }
LABEL_10:
  v11 = v30;
  if (v30)
  {
    if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void ___ZN11RadioModule25finishInitialization_syncEv_block_invoke_167(void *a1, abm::client::Event **a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  v44 = v6;
  if (!v6) {
    return;
  }
  if (!a1[5])
  {
    v16 = v6;
LABEL_76:
    if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    return;
  }
  CFDictionaryRef v42 = (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL;
  abm::client::Event::getData((uint64_t *)&v42, *a2);
  CFDictionaryRef v7 = v42;
  if (v42) {
    uint64_t v8 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8)
  {
    v41[0] = 0xAAAAAAAAAAAAAAAALL;
    v41[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v41, v42);
    long long v39 = 0uLL;
    uint64_t v40 = 0;
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v33, (const char *)*MEMORY[0x1E4F4C688]);
    ctu::cf::map_adapter::getString();
    MEMORY[0x1C8794290](&v33);
    if (SHIBYTE(v40) < 0) {
      operator delete((void *)v39);
    }
    uint64_t v40 = v38;
    long long v39 = *(_OWORD *)buf;
    int v9 = SHIBYTE(v38);
    if (v38 >= 0) {
      size_t v10 = HIBYTE(v40);
    }
    else {
      size_t v10 = *((void *)&v39 + 1);
    }
    if (v10 == strlen((const char *)*MEMORY[0x1E4F4CAE8])
      && (v38 >= 0 ? (v11 = &v39) : (v11 = (long long *)v39),
          v12 = (capabilities::radio *)memcmp(v11, (const void *)*MEMORY[0x1E4F4CAE8], v10),
          !v12))
    {
      uint64_t v17 = (capabilities::abs *)capabilities::radio::supportsBasebandStateController(v12);
      if (v17) {
        RadioModule::getResetProperties_sync((RadioModule *)v5);
      }
      uint64_t v18 = (RadioModule *)capabilities::abs::supportsBatteryInfoMonitoring(v17);
      if (v18)
      {
        *(_WORD *)(v5 + 320) = 0;
        *(unsigned char *)(v5 + 322) = 0;
        RadioModule::monitorBatteryInfo_sync((RadioModule *)v5);
      }
      RadioModule::setRegion_sync(v18);
      RadioModule::startHealthService_sync((RadioModule *)v5);
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 0x40000000;
      aBlock[2] = ___ZN11RadioModule25finishInitialization_syncEv_block_invoke_2;
      aBlock[3] = &__block_descriptor_tmp_168;
      aBlock[4] = v5;
      CFDictionaryRef v19 = (void (**)(void *, std::string *))_Block_copy(aBlock);
      v36 = v19;
      RadioModule::getVersion_sync(v5, &v36);
      if (v19) {
        _Block_release(v19);
      }
      v21 = (capabilities::abs *)capabilities::abs::supportsCalibrationQuery(v20);
      if (v21)
      {
        if (*(unsigned char *)(v5 + 192) == 3) {
          RadioModule::queryFactoryCalibrationStatus_sync((RadioModule *)v5);
        }
        if (*(unsigned char *)(v5 + 200) == 2) {
          RadioModule::queryRFCalibrationStatus_sync((RadioModule *)v5);
        }
      }
      v22 = (capabilities::abs *)capabilities::abs::supportsFieldTestConfig(v21);
      if (v22) {
        RadioModule::queryFieldTestConfig_sync((RadioModule *)v5);
      }
      if (capabilities::abs::supportsResetSPMIEvent(v22))
      {
        unint64_t v33 = 0xAAAAAAAAAAAAAAAALL;
        v34 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
        v23 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
        uint64_t v24 = off_1EBBDCA08;
        if (!off_1EBBDCA08)
        {
          CommandDriverFactory::create_default_global((uint64_t *)buf, v23);
          long long v25 = *(_OWORD *)buf;
          memset(buf, 0, sizeof(buf));
          v26 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
          off_1EBBDCA08 = v25;
          if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
          v27 = *(std::__shared_weak_count **)&buf[8];
          if (*(void *)&buf[8]
            && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
          uint64_t v24 = off_1EBBDCA08;
        }
        unint64_t v28 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
        if (*(&off_1EBBDCA08 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
        (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v24 + 16))(&v31, v24);
        unint64_t v33 = 0;
        v34 = 0;
        if (v32)
        {
          v34 = std::__shared_weak_count::lock(v32);
          if (v34) {
            unint64_t v33 = v31;
          }
          if (v32) {
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
        if (v33) {
          (*(void (**)(unint64_t))(*(void *)v33 + 392))(v33);
        }
        uint64_t v29 = v34;
        if (v34)
        {
          if (!atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
            if (SHIBYTE(v40) < 0) {
              goto LABEL_71;
            }
            goto LABEL_72;
          }
        }
      }
    }
    else if (v10 == strlen((const char *)*MEMORY[0x1E4F4CCD8]) {
           && (v9 >= 0 ? (v13 = &v39) : (v13 = (long long *)v39), !memcmp(v13, (const void *)*MEMORY[0x1E4F4CCD8], v10))
    }
           || v10 == strlen((const char *)*MEMORY[0x1E4F4CF28])
           && (v9 >= 0 ? (size_t v14 = &v39) : (size_t v14 = (long long *)v39), !memcmp(v14, (const void *)*MEMORY[0x1E4F4CF28], v10)))
    {
      v15 = *(ctu::iokit::Controller **)(v5 + 304);
      if (v15)
      {
        ctu::iokit::Controller::stopBatteryInfoNotifications(v15);
      }
      else
      {
        v30 = *(NSObject **)(v5 + 88);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1C59C6000, v30, OS_LOG_TYPE_ERROR, "Invalid fIOKitController", buf, 2u);
          if ((SHIBYTE(v40) & 0x80000000) == 0) {
            goto LABEL_72;
          }
          goto LABEL_71;
        }
      }
    }
    if (SHIBYTE(v40) < 0) {
LABEL_71:
    }
      operator delete((void *)v39);
LABEL_72:
    MEMORY[0x1C87942E0](v41);
    CFDictionaryRef v7 = v42;
  }
  if (v7) {
    CFRelease(v7);
  }
  v16 = v44;
  if (v44) {
    goto LABEL_76;
  }
}

void sub_1C5ABBD14(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  if (*(char *)(v1 - 73) < 0) {
    operator delete(*(void **)(v1 - 96));
  }
  MEMORY[0x1C87942E0](v1 - 72);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v1 - 56));
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

void RadioModule::getResetProperties_sync(RadioModule *this)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 296))
  {
    unint64_t v2 = *((void *)this + 11);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      if (*((unsigned char *)this + 289)) {
        unint64_t v3 = "true";
      }
      else {
        unint64_t v3 = "false";
      }
      int v4 = *((unsigned __int16 *)this + 145);
      int v5 = *((_DWORD *)this + 73);
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = v3;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v4;
      __int16 v35 = 1024;
      int v36 = v5;
      _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Baseband properties (cached):\n    Coredump supported: %s\n    PowerSequence index: %u\n    Baseband version: 0x%08x", buf, 0x18u);
    }
    return;
  }
  v6 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v6 || (v7 = *((void *)this + 15), (uint64_t v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v9 = v8;
  p_shared_weak_owners = &v8->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v32 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v33 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule23getResetProperties_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_188;
  aBlock[4] = this;
  void aBlock[5] = v7;
  unint64_t v31 = v9;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  v11 = _Block_copy(aBlock);
  v12 = *((void *)this + 17);
  if (v12) {
    dispatch_retain(v12);
  }
  v32 = v11;
  dispatch_object_t v33 = v12;
  unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v29 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v13 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v14 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)buf, v13);
    long long v15 = *(_OWORD *)buf;
    *(void *)buf = 0;
    *(void *)&buf[8] = 0;
    v16 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v15;
    if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    uint64_t v17 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    uint64_t v14 = off_1EBBDCA08;
  }
  uint64_t v18 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  uint64_t v24 = v14;
  uint64_t v25 = *(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v14 + 16))(&v26, v14);
  unint64_t v28 = 0;
  uint64_t v29 = 0;
  if (v27)
  {
    uint64_t v29 = std::__shared_weak_count::lock(v27);
    if (v29) {
      unint64_t v28 = v26;
    }
    if (v27) {
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    unint64_t v19 = v28;
    if (v28) {
      goto LABEL_31;
    }
  }
  else
  {
    unint64_t v19 = v28;
    if (v28)
    {
LABEL_31:
      v20 = v32;
      if (v32) {
        v20 = _Block_copy(v32);
      }
      v22 = v20;
      dispatch_object_t object = v33;
      if (v33) {
        dispatch_retain(v33);
      }
      (*(void (**)(unint64_t, void **))(*(void *)v19 + 168))(v19, &v22);
      if (object) {
        dispatch_release(object);
      }
      if (v22) {
        _Block_release(v22);
      }
    }
  }
  v21 = v29;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  if (v33) {
    dispatch_release(v33);
  }
  if (v32) {
    _Block_release(v32);
  }
  if (v31) {
    std::__shared_weak_count::__release_weak(v31);
  }
  std::__shared_weak_count::__release_weak(v9);
}

void sub_1C5ABC23C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void RadioModule::monitorBatteryInfo_sync(RadioModule *this)
{
  if (*((void *)this + 38))
  {
    unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
    if (!v2 || (uint64_t v3 = *((void *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    int v5 = v4;
    p_shared_weak_owners = &v4->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v5);
    }
    memset(v25, 170, sizeof(v25));
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN11RadioModule23monitorBatteryInfo_syncEv_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_191;
    aBlock[4] = this;
    void aBlock[5] = v3;
    uint64_t v24 = v5;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    uint64_t v7 = _Block_copy(aBlock);
    uint64_t v8 = *((void *)this + 17);
    if (v8) {
      dispatch_retain(*((dispatch_object_t *)this + 17));
    }
    *(void *)uint64_t v25 = v7;
    *(void *)&v25[8] = v8;
    int v9 = *((void *)this + 11);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEFAULT, "#I Registering for battery info updates", buf, 2u);
    }
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 1174405120;
    v16[2] = ___ZN11RadioModule23monitorBatteryInfo_syncEv_block_invoke_192;
    v16[3] = &__block_descriptor_tmp_196;
    v16[4] = this;
    v16[5] = v3;
    uint64_t v17 = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (v7)
    {
      uint64_t v18 = _Block_copy(v7);
      dispatch_object_t v19 = v8;
      if (!v8) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v18 = 0;
      dispatch_object_t v19 = v8;
      if (!v8)
      {
LABEL_13:
        size_t v10 = _Block_copy(v16);
        v11 = *((void *)this + 17);
        if (v11) {
          dispatch_retain(*((dispatch_object_t *)this + 17));
        }
        v20 = v10;
        dispatch_object_t object = v11;
        char v12 = ctu::iokit::Controller::registerForBatteryInfoChange();
        if (object) {
          dispatch_release(object);
        }
        if (v20) {
          _Block_release(v20);
        }
        if ((v12 & 1) == 0 && (v13 = *((void *)this + 11), os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_ERROR, "Failed to register for battery info updates", buf, 2u);
          uint64_t v14 = v19;
          if (!v19) {
            goto LABEL_23;
          }
        }
        else
        {
          uint64_t v14 = v19;
          if (!v19)
          {
LABEL_23:
            if (v18) {
              _Block_release(v18);
            }
            if (v17) {
              std::__shared_weak_count::__release_weak(v17);
            }
            if (v8) {
              dispatch_release(v8);
            }
            if (v7) {
              _Block_release(v7);
            }
            if (v24) {
              std::__shared_weak_count::__release_weak(v24);
            }
            std::__shared_weak_count::__release_weak(v5);
            return;
          }
        }
        dispatch_release(v14);
        goto LABEL_23;
      }
    }
    dispatch_retain(v8);
    goto LABEL_13;
  }
  long long v15 = *((void *)this + 11);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v25 = 0;
    _os_log_error_impl(&dword_1C59C6000, v15, OS_LOG_TYPE_ERROR, "Invalid fIOKitController", v25, 2u);
  }
}

void sub_1C5ABC600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28)
{
  dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitBatteryInfo)>::~callback((uint64_t)&a19);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v29);
  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v30 - 112);
    v32 = a28;
    if (!a28)
    {
LABEL_3:
      std::__shared_weak_count::__release_weak(v28);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v30 - 112);
    v32 = a28;
    if (!a28) {
      goto LABEL_3;
    }
  }
  std::__shared_weak_count::__release_weak(v32);
  std::__shared_weak_count::__release_weak(v28);
  _Unwind_Resume(a1);
}

void RadioModule::setRegion_sync(RadioModule *this)
{
  if (!capabilities::abs::shouldSetRegion(this)) {
    return;
  }
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v17 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v1 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v2 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v18, v1);
    long long v3 = v18;
    long long v18 = 0uLL;
    int v4 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    int v5 = (std::__shared_weak_count *)*((void *)&v18 + 1);
    if (*((void *)&v18 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = off_1EBBDCA08;
  }
  v6 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  uint64_t v12 = v2;
  uint64_t v13 = *(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v2 + 16))(&v14, v2);
  unint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v7 = (config::hw *)v15;
  if (v15)
  {
    uint64_t v17 = std::__shared_weak_count::lock(v15);
    if (v17) {
      unint64_t v16 = v14;
    }
    uint64_t v7 = (config::hw *)v15;
    if (v15) {
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    unint64_t v8 = v16;
    if (v16)
    {
LABEL_20:
      config::hw::regionCode(v7);
      (*(void (**)(unint64_t, void **))(*(void *)v8 + 304))(v8, &__p);
      if (v11 < 0) {
        operator delete(__p);
      }
    }
  }
  else
  {
    unint64_t v8 = v16;
    if (v16) {
      goto LABEL_20;
    }
  }
  int v9 = v17;
  if (v17)
  {
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1C5ABC8D8(_Unwind_Exception *a1)
{
}

void sub_1C5ABC8F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v15 - 48);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v15 - 48);
  _Unwind_Resume(a1);
}

void sub_1C5ABC92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void RadioModule::startHealthService_sync(RadioModule *this)
{
  CFMutableDictionaryRef v27 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable) {
    CFMutableDictionaryRef v27 = Mutable;
  }
  GetABMLogServer(&v24);
  DataStallDetection::create((capabilities::abs *)&v24, (uint64_t *)&v26);
  long long v3 = v26;
  long long v26 = 0uLL;
  int v4 = (std::__shared_weak_count *)*((void *)this + 33);
  *((_OWORD *)this + 16) = v3;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  int v5 = (std::__shared_weak_count *)*((void *)&v26 + 1);
  if (*((void *)&v26 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v26 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v6 = v25;
  if (!v25 || atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v7 = (DataStallDetection *)*((void *)this + 32);
    if (!v7) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  uint64_t v7 = (DataStallDetection *)*((void *)this + 32);
  if (v7) {
LABEL_12:
  }
    DataStallDetection::start(v7);
LABEL_13:
  unint64_t v8 = (capabilities::radio *)operator new(0x10uLL);
  GetABMLogServer(&v22);
  char v11 = (std::__shared_weak_count *)*((void *)this + 33);
  cf[1] = *((CFTypeRef *)this + 32);
  v21 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CFMutableDictionaryRef v12 = v27;
  if (v27 && (CFTypeID v13 = CFGetTypeID(v27), v13 == CFDictionaryGetTypeID()))
  {
    cf[0] = v12;
    CFRetain(v12);
  }
  else
  {
    cf[0] = 0;
  }
  radio::HealthService::HealthService(v8, v9, v10, cf);
  unint64_t v14 = operator new(0x20uLL);
  *unint64_t v14 = &unk_1F210A5E8;
  v14[1] = 0;
  v14[2] = 0;
  v14[3] = v8;
  uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 35);
  *((void *)this + 34) = v8;
  *((void *)this + 35) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    CFTypeRef v16 = cf[0];
    if (!cf[0]) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  CFTypeRef v16 = cf[0];
  if (cf[0]) {
LABEL_22:
  }
    CFRelease(v16);
LABEL_23:
  uint64_t v17 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  long long v18 = v23;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    CFMutableDictionaryRef v19 = v27;
    if (!v27) {
      return;
    }
  }
  else
  {
    CFMutableDictionaryRef v19 = v27;
    if (!v27) {
      return;
    }
  }
  CFRelease(v19);
}

void sub_1C5ABCC60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, __int16 a11, char a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  v20 = (std::__shared_weak_count *)v17[1];
  if (v20)
  {
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  operator delete(v17);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v18 - 40));
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule25finishInitialization_syncEv_block_invoke_2(uint64_t a1, size_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = (void **)(v3 + 152);
  if ((size_t *)(v3 + 152) == a2) {
    goto LABEL_10;
  }
  if (*(char *)(v3 + 175) < 0)
  {
    if (*((char *)a2 + 23) >= 0)
    {
      size_t v7 = *((unsigned __int8 *)a2 + 23);
    }
    else
    {
      a2 = (size_t *)*a2;
      size_t v7 = v2[1];
    }
    int v4 = std::string::__assign_no_alias<false>(v4, a2, v7);
LABEL_10:
    BOOL isHardwareModelChanged = sys::isHardwareModelChanged((sys *)v4);
    if (isHardwareModelChanged) {
      goto LABEL_15;
    }
    goto LABEL_11;
  }
  if ((*((unsigned char *)a2 + 23) & 0x80) != 0)
  {
    uint64_t v9 = (sys *)std::string::__assign_no_alias<true>(v4, (void *)*a2, a2[1]);
    BOOL isHardwareModelChanged = sys::isHardwareModelChanged(v9);
    if (isHardwareModelChanged) {
      goto LABEL_15;
    }
  }
  else
  {
    long long v5 = *(_OWORD *)a2;
    *(void *)(v3 + 168) = a2[2];
    *(_OWORD *)int v4 = v5;
    BOOL isHardwareModelChanged = sys::isHardwareModelChanged((sys *)v4);
    if (isHardwareModelChanged) {
      goto LABEL_15;
    }
  }
LABEL_11:
  BOOL isHardwareModelChanged = sys::isFWVersionChanged((unsigned __int8 *)v2);
  if (!isHardwareModelChanged)
  {
    BOOL isHardwareModelChanged = sys::isOSVersionChanged((sys *)isHardwareModelChanged);
    if (!isHardwareModelChanged)
    {
      CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      goto LABEL_80;
    }
  }
LABEL_15:
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v80 = v10;
  long long v81 = v10;
  long long v78 = v10;
  long long v79 = v10;
  long long v76 = v10;
  long long v77 = v10;
  config::hw::product((config::hw *)isHardwareModelChanged);
  config::build::version(v11);
  if (*((char *)v2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v79, (const std::string::value_type *)*v2, v2[1]);
  }
  else
  {
    long long v79 = *(_OWORD *)v2;
    *(void *)&long long v80 = v2[2];
  }
  Timestamp::Timestamp((Timestamp *)&buf);
  Timestamp::asString(v12, 0, 9, (unsigned char *)&v80 + 8);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&buf, (void *)buf.__r_.__value_.__l.__size_);
  pthread_mutex_lock(&ctu::Singleton<DeviceHistoryDB,DeviceHistoryDB,ctu::PthreadMutexGuardPolicy<DeviceHistoryDB>>::sInstance);
  if (!(void)xmmword_1EA3D68D0)
  {
    unint64_t v14 = (char *)operator new(0x60uLL);
    DeviceHistoryDB::DeviceHistoryDB((DeviceHistoryDB *)v14);
    CFTypeID v13 = operator new(0x20uLL);
    void *v13 = &unk_1F210A2B0;
    v13[1] = 0;
    v13[2] = 0;
    v13[3] = v14;
    uint64_t v15 = (std::__shared_weak_count *)*((void *)&xmmword_1EA3D68D0 + 1);
    *(void *)&xmmword_1EA3D68D0 = v14;
    *((void *)&xmmword_1EA3D68D0 + 1) = v13;
    if (!v15)
    {
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
      buf.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
      goto LABEL_25;
    }
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  CFTypeID v13 = (void *)*((void *)&xmmword_1EA3D68D0 + 1);
  unint64_t v14 = (char *)xmmword_1EA3D68D0;
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = xmmword_1EA3D68D0;
  if (*((void *)&xmmword_1EA3D68D0 + 1)) {
LABEL_25:
  }
    atomic_fetch_add_explicit(v13 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<DeviceHistoryDB,DeviceHistoryDB,ctu::PthreadMutexGuardPolicy<DeviceHistoryDB>>::sInstance);
  _DeviceHistoryItem::_DeviceHistoryItem(&v69, (const _DeviceHistoryItem *)&v76);
  unint64_t v16 = *((void *)v14 + 10);
  if (v16 >= *((void *)v14 + 11))
  {
    uint64_t v17 = std::vector<_DeviceHistoryItem>::__push_back_slow_path<_DeviceHistoryItem const&>((int64x2_t *)(v14 + 72), (const _DeviceHistoryItem *)&v69);
  }
  else
  {
    _DeviceHistoryItem::_DeviceHistoryItem(*((std::string **)v14 + 10), (const _DeviceHistoryItem *)&v69);
    uint64_t v17 = v16 + 96;
    *((void *)v14 + 10) = v16 + 96;
  }
  *((void *)v14 + 10) = v17;
  DeviceHistoryDB::commitToDisk((DeviceHistoryDB *)v14);
  if (v75 < 0)
  {
    operator delete(__p);
    if ((v73 & 0x80000000) == 0)
    {
LABEL_31:
      if ((v71 & 0x80000000) == 0) {
        goto LABEL_32;
      }
      goto LABEL_37;
    }
  }
  else if ((v73 & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(v72);
  if ((v71 & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_38;
  }
LABEL_37:
  operator delete(v70);
  if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_33:
    size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
    if (!buf.__r_.__value_.__l.__size_) {
      goto LABEL_41;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v69.__r_.__value_.__l.__data_);
  size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
  if (!buf.__r_.__value_.__l.__size_) {
    goto LABEL_41;
  }
LABEL_39:
  if (!atomic_fetch_add(&size->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
  }
LABEL_41:
  CFMutableDictionaryRef v19 = *(NSObject **)(v3 + 88);
  BOOL v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
  v21 = (const __CFString ***)MEMORY[0x1E4F4C898];
  if (v20)
  {
    std::string::size_type v22 = *MEMORY[0x1E4F4C898];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v22;
    _os_log_impl(&dword_1C59C6000, v19, OS_LOG_TYPE_DEFAULT, "#I Broadcasting %s", (uint8_t *)&buf, 0xCu);
  }
  memset(&v68, 0, sizeof(v68));
  if (sys::isHardwareModelChanged((sys *)v20))
  {
    v23 = (const std::string::value_type **)MEMORY[0x1E4F4D1E8];
  }
  else
  {
    BOOL isFWVersionChanged = sys::isFWVersionChanged((unsigned __int8 *)v2);
    v23 = (const std::string::value_type **)MEMORY[0x1E4F4D088];
    if (isFWVersionChanged) {
      v23 = (const std::string::value_type **)MEMORY[0x1E4F4D168];
    }
  }
  std::string::__assign_external(&v68, *v23);
  CFMutableDictionaryRef v82 = 0;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v27 = Mutable;
  if (Mutable) {
    CFMutableDictionaryRef v82 = Mutable;
  }
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&buf, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
  }
  else {
    std::string buf = v68;
  }
  ctu::cf::insert<char const*,std::string>(v27, *v21, (uint64_t)&buf, (uint64_t)v8, v26);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  unint64_t v28 = (const void *)*MEMORY[0x1E4F4C830];
  size_t v29 = strlen((const char *)*MEMORY[0x1E4F4C830]);
  if (v29 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v30 = (void *)v29;
  if (v29 >= 0x17)
  {
    uint64_t v33 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17) {
      uint64_t v33 = v29 | 7;
    }
    uint64_t v34 = v33 + 1;
    unint64_t v31 = (void **)operator new(v33 + 1);
    __dst[1] = v30;
    unint64_t v67 = v34 | 0x8000000000000000;
    __dst[0] = v31;
LABEL_62:
    memmove(v31, v28, (size_t)v30);
    *((unsigned char *)v30 + (void)v31) = 0;
    CFMutableDictionaryRef v32 = v82;
    if (!v82) {
      goto LABEL_65;
    }
    goto LABEL_63;
  }
  HIBYTE(v67) = v29;
  unint64_t v31 = __dst;
  if (v29) {
    goto LABEL_62;
  }
  LOBYTE(__dst[0]) = 0;
  CFMutableDictionaryRef v32 = v82;
  if (!v82) {
    goto LABEL_65;
  }
LABEL_63:
  CFTypeID v35 = CFGetTypeID(v32);
  if (v35 == CFDictionaryGetTypeID())
  {
    CFTypeRef cf = v32;
    CFRetain(v32);
    goto LABEL_66;
  }
LABEL_65:
  CFTypeRef cf = 0;
LABEL_66:
  aBlock = 0;
  Service::broadcastEvent(v3, (uint64_t)__dst, &cf, (const void **)&aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(v67) < 0)
  {
    operator delete(__dst[0]);
    if (!v32) {
      goto LABEL_75;
    }
    goto LABEL_74;
  }
  if (v32) {
LABEL_74:
  }
    CFRelease(v32);
LABEL_75:
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v68.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v81) & 0x80000000) == 0)
    {
LABEL_77:
      if ((SBYTE7(v80) & 0x80000000) == 0) {
        goto LABEL_78;
      }
      goto LABEL_87;
    }
  }
  else if ((SHIBYTE(v81) & 0x80000000) == 0)
  {
    goto LABEL_77;
  }
  operator delete(*((void **)&v80 + 1));
  if ((SBYTE7(v80) & 0x80000000) == 0)
  {
LABEL_78:
    if ((SHIBYTE(v78) & 0x80000000) == 0) {
      goto LABEL_79;
    }
LABEL_88:
    operator delete(*((void **)&v77 + 1));
    if ((SBYTE7(v77) & 0x80000000) == 0) {
      goto LABEL_80;
    }
    goto LABEL_89;
  }
LABEL_87:
  operator delete((void *)v79);
  if (SHIBYTE(v78) < 0) {
    goto LABEL_88;
  }
LABEL_79:
  if ((SBYTE7(v77) & 0x80000000) == 0) {
    goto LABEL_80;
  }
LABEL_89:
  operator delete((void *)v76);
LABEL_80:
  CFMutableDictionaryRef v36 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v38 = v36;
  if (v36)
  {
    CFMutableDictionaryRef v63 = v36;
    if (*((char *)v2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v76, (const std::string::value_type *)*v2, v2[1]);
    }
    else
    {
      long long v76 = *(_OWORD *)v2;
      *(void *)&long long v77 = v2[2];
    }
    uint64_t v40 = (config::build *)ctu::cf::insert<char const*,std::string>(v38, (const __CFString **)*MEMORY[0x1E4F4C770], (uint64_t)&v76, (uint64_t)v8, v37);
    if (SBYTE7(v77) < 0) {
      operator delete((void *)v76);
    }
    config::build::version(v40);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v76, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v76 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      *(void *)&long long v77 = *((void *)&buf.__r_.__value_.__l + 2);
    }
    ctu::cf::insert<char const*,std::string>(v38, (const __CFString **)*MEMORY[0x1E4F4C778], (uint64_t)&v76, (uint64_t)v8, v41);
    if (SBYTE7(v77) < 0)
    {
      operator delete((void *)v76);
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_98;
      }
    }
    else if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_98;
    }
    operator delete(buf.__r_.__value_.__l.__data_);
LABEL_98:
    CFDictionaryRef v42 = (char *)operator new(0x28uLL);
    strcpy(v42, "AppleBasebandServices_Manager-1211");
    std::string::__init_copy_ctor_external((std::string *)&v76, v42, 0x22uLL);
    ctu::cf::insert<char const*,std::string>(v38, (const __CFString **)*MEMORY[0x1E4F4C520], (uint64_t)&v76, (uint64_t)v8, v43);
    if (SBYTE7(v77) < 0) {
      operator delete((void *)v76);
    }
    operator delete(v42);
    config::hw::product(v44);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v76, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v76 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      *(void *)&long long v77 = *((void *)&buf.__r_.__value_.__l + 2);
    }
    ctu::cf::insert<char const*,std::string>(v38, (const __CFString **)*MEMORY[0x1E4F4C518], (uint64_t)&v76, (uint64_t)v8, v45);
    if (SBYTE7(v77) < 0)
    {
      operator delete((void *)v76);
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_107;
      }
    }
    else if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_107;
    }
    operator delete(buf.__r_.__value_.__l.__data_);
LABEL_107:
    pid_t v46 = getpid();
    std::to_string(&buf, v46);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v76, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v76 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      *(void *)&long long v77 = *((void *)&buf.__r_.__value_.__l + 2);
    }
    v48 = (capabilities::radio *)ctu::cf::insert<char const*,std::string>(v38, (const __CFString **)*MEMORY[0x1E4F4C2A0], (uint64_t)&v76, (uint64_t)v8, v47);
    if (SBYTE7(v77) < 0)
    {
      operator delete((void *)v76);
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_114;
      }
    }
    else if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_114;
    }
    operator delete(buf.__r_.__value_.__l.__data_);
LABEL_114:
    capabilities::radio::radioType((uint64_t *)&buf, v48);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v76, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v76 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      *(void *)&long long v77 = *((void *)&buf.__r_.__value_.__l + 2);
    }
    ctu::cf::insert<char const*,std::string>(v38, (const __CFString **)*MEMORY[0x1E4F4C780], (uint64_t)&v76, (uint64_t)v8, v49);
    if (SBYTE7(v77) < 0)
    {
      operator delete((void *)v76);
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_121;
      }
    }
    else if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_121;
    }
    operator delete(buf.__r_.__value_.__l.__data_);
LABEL_121:
    config::hw::getBootArgs(&buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v76, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v76 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      *(void *)&long long v77 = *((void *)&buf.__r_.__value_.__l + 2);
    }
    ctu::cf::insert<char const*,std::string>(v38, (const __CFString **)*MEMORY[0x1E4F4C648], (uint64_t)&v76, (uint64_t)v8, v50);
    if (SBYTE7(v77) < 0)
    {
      operator delete((void *)v76);
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_128;
      }
    }
    else if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_128;
    }
    operator delete(buf.__r_.__value_.__l.__data_);
LABEL_128:
    pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
    v51 = (os_unfair_lock_s *)off_1EBBDCA58;
    if (!off_1EBBDCA58)
    {
      SharedData::create_default_global(&v76);
      long long v52 = v76;
      long long v76 = 0uLL;
      v53 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
      off_1EBBDCA58 = v52;
      if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
      v54 = (std::__shared_weak_count *)*((void *)&v76 + 1);
      if (*((void *)&v76 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v76 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
      v51 = (os_unfair_lock_s *)off_1EBBDCA58;
    }
    v68.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
    v68.__r_.__value_.__l.__size_ = *(&off_1EBBDCA58 + 1);
    if (*(&off_1EBBDCA58 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA58 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
    v55 = (const void *)*MEMORY[0x1E4F4C5D0];
    size_t v56 = strlen((const char *)*MEMORY[0x1E4F4C5D0]);
    if (v56 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v57 = v56;
    if (v56 >= 0x17)
    {
      uint64_t v59 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v56 | 7) != 0x17) {
        uint64_t v59 = v56 | 7;
      }
      uint64_t v60 = v59 + 1;
      p_std::string buf = (std::string *)operator new(v59 + 1);
      buf.__r_.__value_.__l.__size_ = v57;
      buf.__r_.__value_.__r.__words[2] = v60 | 0x8000000000000000;
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
    }
    else
    {
      *((unsigned char *)&buf.__r_.__value_.__s + 23) = v56;
      p_std::string buf = &buf;
      if (!v56) {
        goto LABEL_146;
      }
    }
    memmove(p_buf, v55, v57);
LABEL_146:
    p_buf->__r_.__value_.__s.__data_[v57] = 0;
    CFMutableDictionaryRef v82 = v63;
    *(void *)&long long v76 = &buf;
    *((void *)&v76 + 1) = &v82;
    *(void *)&long long v77 = v51;
    ctu::SharedLockable<SharedData>::execute_sync<BOOL SharedData::setPreference<__CFDictionary *>(std::string const&,__CFDictionary *)::{lambda(void)#1}>(v51 + 6, (uint64_t *)&v76);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    v61 = (std::__shared_weak_count *)v68.__r_.__value_.__l.__size_;
    if (v68.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v68.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
      CFMutableDictionaryRef v62 = v63;
    }
    else
    {
      CFMutableDictionaryRef v62 = v63;
    }
    CFRelease(v62);
    return;
  }
  long long v39 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v76) = 0;
    _os_log_error_impl(&dword_1C59C6000, v39, OS_LOG_TYPE_ERROR, "Failed to create dictionary to update abm domain preferences", (uint8_t *)&v76, 2u);
  }
}

void sub_1C5ABD8FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *aBlock, char a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
}

void sub_1C5ABDBC0()
{
}

void RadioModule::queryFactoryCalibrationStatus_sync(RadioModule *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v2 || (uint64_t v3 = *((void *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v5 = v4;
  p_shared_weak_owners = &v4->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  unint64_t v28 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v29 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule34queryFactoryCalibrationStatus_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_200;
  aBlock[4] = this;
  void aBlock[5] = v3;
  CFMutableDictionaryRef v27 = v5;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  size_t v7 = _Block_copy(aBlock);
  CFAllocatorRef v8 = *((void *)this + 17);
  if (v8) {
    dispatch_retain(v8);
  }
  unint64_t v28 = v7;
  dispatch_object_t v29 = v8;
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v25 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v9 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v10 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v30, v9);
    long long v11 = v30;
    long long v30 = 0uLL;
    uint64_t v12 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v11;
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    CFTypeID v13 = (std::__shared_weak_count *)*((void *)&v30 + 1);
    if (*((void *)&v30 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    uint64_t v10 = off_1EBBDCA08;
  }
  unint64_t v14 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  uint64_t v20 = v10;
  uint64_t v21 = *(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v10 + 16))(&v22, v10);
  unint64_t v24 = 0;
  uint64_t v25 = 0;
  if (v23)
  {
    uint64_t v25 = std::__shared_weak_count::lock(v23);
    if (v25) {
      unint64_t v24 = v22;
    }
    if (v23) {
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    unint64_t v15 = v24;
    if (!v24) {
      goto LABEL_33;
    }
  }
  else
  {
    unint64_t v15 = v24;
    if (!v24) {
      goto LABEL_33;
    }
  }
  unint64_t v16 = v28;
  if (v28) {
    unint64_t v16 = _Block_copy(v28);
  }
  uint64_t v18 = v16;
  dispatch_object_t object = v29;
  if (v29) {
    dispatch_retain(v29);
  }
  (*(void (**)(unint64_t, void **))(*(void *)v15 + 120))(v15, &v18);
  if (object) {
    dispatch_release(object);
  }
  if (v18) {
    _Block_release(v18);
  }
LABEL_33:
  uint64_t v17 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  if (v29) {
    dispatch_release(v29);
  }
  if (v28) {
    _Block_release(v28);
  }
  if (v27) {
    std::__shared_weak_count::__release_weak(v27);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C5ABDF84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v25 - 64);
  if (a24) {
    std::__shared_weak_count::__release_weak(a24);
  }
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void RadioModule::queryRFCalibrationStatus_sync(RadioModule *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v2 || (uint64_t v3 = *((void *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v5 = v4;
  p_shared_weak_owners = &v4->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  unint64_t v28 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v29 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule29queryRFCalibrationStatus_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_203;
  aBlock[4] = this;
  void aBlock[5] = v3;
  CFMutableDictionaryRef v27 = v5;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  size_t v7 = _Block_copy(aBlock);
  CFAllocatorRef v8 = *((void *)this + 17);
  if (v8) {
    dispatch_retain(v8);
  }
  unint64_t v28 = v7;
  dispatch_object_t v29 = v8;
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v25 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v9 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v10 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v30, v9);
    long long v11 = v30;
    long long v30 = 0uLL;
    uint64_t v12 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v11;
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    CFTypeID v13 = (std::__shared_weak_count *)*((void *)&v30 + 1);
    if (*((void *)&v30 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    uint64_t v10 = off_1EBBDCA08;
  }
  unint64_t v14 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  uint64_t v20 = v10;
  uint64_t v21 = *(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v10 + 16))(&v22, v10);
  unint64_t v24 = 0;
  uint64_t v25 = 0;
  if (v23)
  {
    uint64_t v25 = std::__shared_weak_count::lock(v23);
    if (v25) {
      unint64_t v24 = v22;
    }
    if (v23) {
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    unint64_t v15 = v24;
    if (!v24) {
      goto LABEL_33;
    }
  }
  else
  {
    unint64_t v15 = v24;
    if (!v24) {
      goto LABEL_33;
    }
  }
  unint64_t v16 = v28;
  if (v28) {
    unint64_t v16 = _Block_copy(v28);
  }
  uint64_t v18 = v16;
  dispatch_object_t object = v29;
  if (v29) {
    dispatch_retain(v29);
  }
  (*(void (**)(unint64_t, void **))(*(void *)v15 + 128))(v15, &v18);
  if (object) {
    dispatch_release(object);
  }
  if (v18) {
    _Block_release(v18);
  }
LABEL_33:
  uint64_t v17 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  if (v29) {
    dispatch_release(v29);
  }
  if (v28) {
    _Block_release(v28);
  }
  if (v27) {
    std::__shared_weak_count::__release_weak(v27);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C5ABE388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v25 - 64);
  if (a24) {
    std::__shared_weak_count::__release_weak(a24);
  }
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void RadioModule::queryFieldTestConfig_sync(RadioModule *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v2 || (uint64_t v3 = *((void *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v5 = v4;
  p_shared_weak_owners = &v4->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  unint64_t v28 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v29 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule25queryFieldTestConfig_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_206_0;
  aBlock[4] = this;
  void aBlock[5] = v3;
  CFMutableDictionaryRef v27 = v5;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  size_t v7 = _Block_copy(aBlock);
  CFAllocatorRef v8 = *((void *)this + 17);
  if (v8) {
    dispatch_retain(v8);
  }
  unint64_t v28 = v7;
  dispatch_object_t v29 = v8;
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v25 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v9 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v10 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v30, v9);
    long long v11 = v30;
    long long v30 = 0uLL;
    uint64_t v12 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v11;
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    CFTypeID v13 = (std::__shared_weak_count *)*((void *)&v30 + 1);
    if (*((void *)&v30 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    uint64_t v10 = off_1EBBDCA08;
  }
  unint64_t v14 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  uint64_t v20 = v10;
  uint64_t v21 = *(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v10 + 16))(&v22, v10);
  unint64_t v24 = 0;
  uint64_t v25 = 0;
  if (v23)
  {
    uint64_t v25 = std::__shared_weak_count::lock(v23);
    if (v25) {
      unint64_t v24 = v22;
    }
    if (v23) {
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    unint64_t v15 = v24;
    if (!v24) {
      goto LABEL_33;
    }
  }
  else
  {
    unint64_t v15 = v24;
    if (!v24) {
      goto LABEL_33;
    }
  }
  unint64_t v16 = v28;
  if (v28) {
    unint64_t v16 = _Block_copy(v28);
  }
  uint64_t v18 = v16;
  dispatch_object_t object = v29;
  if (v29) {
    dispatch_retain(v29);
  }
  (*(void (**)(unint64_t, void **))(*(void *)v15 + 184))(v15, &v18);
  if (object) {
    dispatch_release(object);
  }
  if (v18) {
    _Block_release(v18);
  }
LABEL_33:
  uint64_t v17 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  if (v29) {
    dispatch_release(v29);
  }
  if (v28) {
    _Block_release(v28);
  }
  if (v27) {
    std::__shared_weak_count::__release_weak(v27);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C5ABE78C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v25 - 64);
  if (a24) {
    std::__shared_weak_count::__release_weak(a24);
  }
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void RadioModule::stopMonitoringBatteryInfo_sync(RadioModule *this)
{
  if (*((void *)this + 38))
  {
    uint64_t v1 = (ctu::iokit::Controller *)*((void *)this + 38);
    ctu::iokit::Controller::stopBatteryInfoNotifications(v1);
  }
  else
  {
    uint64_t v2 = *((void *)this + 11);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_error_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_ERROR, "Invalid fIOKitController", v3, 2u);
    }
  }
}

void ___ZN11RadioModule25finishInitialization_syncEv_block_invoke_173(void *a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      long long v5 = v4;
      if (a1[5])
      {
        v6 = *(NSObject **)(v3 + 88);
        BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
        if (v7)
        {
          CFAllocatorRef v8 = (void *)(v3 + 152);
          if (*(char *)(v3 + 175) < 0) {
            CFAllocatorRef v8 = (void *)*v8;
          }
          *(_DWORD *)std::string buf = 136315138;
          *(void *)&buf[4] = v8;
          _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#I Baseband FW Version: %s", buf, 0xCu);
        }
        if (capabilities::abs::supportsCalibrationQuery((capabilities::abs *)v7))
        {
          uint64_t v9 = *(NSObject **)(v3 + 88);
          BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
          if (v10)
          {
            uint64_t v11 = capabilities::radio::supportsFactoryCalibrationV2((capabilities::radio *)v10)
                ? radio::asStringV2()
                : radio::asString();
            uint64_t v12 = v11;
            radio::RFCalibration_t::toString((uint64_t *)buf, (radio::RFCalibration_t *)(v3 + 200));
            CFTypeID v13 = v17 >= 0 ? buf : *(unsigned char **)buf;
            *(_DWORD *)uint64_t v18 = 136315394;
            CFMutableDictionaryRef v19 = (unsigned char *)v12;
            __int16 v20 = 2080;
            uint64_t v21 = v13;
            _os_log_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEFAULT, "#I \n--- Factory and RF calibration ---\n%s\n%s\n----------------------------------", v18, 0x16u);
            if (v17 < 0) {
              operator delete(*(void **)buf);
            }
          }
        }
        if (MEMORY[0x1C8795EB0](*(void *)(v3 + 248)) == MEMORY[0x1E4F14590])
        {
          unint64_t v14 = *(NSObject **)(v3 + 88);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            xpc::object::to_string((uint64_t *)buf, (xpc::object *)(v3 + 248));
            if (v17 >= 0) {
              unint64_t v15 = buf;
            }
            else {
              unint64_t v15 = *(unsigned char **)buf;
            }
            *(_DWORD *)uint64_t v18 = 136315138;
            CFMutableDictionaryRef v19 = v15;
            _os_log_impl(&dword_1C59C6000, v14, OS_LOG_TYPE_DEFAULT, "#I Baseband field test config:\n%s", v18, 0xCu);
            if (v17 < 0) {
              operator delete(*(void **)buf);
            }
          }
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1C5ABEB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C5ABEB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C5ABEB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C5ABEB3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void RadioModule::handleResetSPMI_sync(RadioModule *this, int a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v4 = *((void *)this + 11);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 67109120;
    LODWORD(v9) = a2;
    _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Received request to reset SPMI with data (0x%x)", (uint8_t *)&v8, 8u);
  }
  int v5 = TelephonyBasebandResetSPMI();
  v6 = *((void *)this + 11);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v7 = " not ";
    if (v5) {
      BOOL v7 = " ";
    }
    int v8 = 136315138;
    uint64_t v9 = v7;
    _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#I Request to reset SPMI was%ssuccessful", (uint8_t *)&v8, 0xCu);
  }
}

void RadioModule::sleep(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  BOOL v7 = v6;
  int v8 = operator new(0x10uLL);
  *int v8 = a1;
  v8[1] = v3;
  uint64_t v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<RadioModule>::execute_wrapped<RadioModule::sleep(dispatch::group_session)::$_0>(RadioModule::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RadioModule::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<RadioModule::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void RadioModule::wake(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  BOOL v7 = v6;
  int v8 = operator new(0x10uLL);
  *int v8 = a1;
  v8[1] = v3;
  uint64_t v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<RadioModule>::execute_wrapped<RadioModule::wake(dispatch::group_session)::$_0>(RadioModule::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RadioModule::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<RadioModule::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ___ZN11RadioModule15getVersion_syncEN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke(void *a1, std::string::size_type *a2, const __CFDictionary **a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  int v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    int v8 = std::__shared_weak_count::lock(v4);
    CFMutableDictionaryRef v19 = v8;
    if (v8)
    {
      uint64_t v9 = v8;
      if (!a1[5]) {
        goto LABEL_28;
      }
      std::string::size_type v10 = *a2;
      if (v10 ? ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get : 0)
      {
        uint64_t v12 = *(NSObject **)(v7 + 88);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 138412290;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v10;
          _os_log_error_impl(&dword_1C59C6000, v12, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&buf, 0xCu);
        }
      }
      else
      {
        CFDictionaryRef v13 = *a3;
        if (*a3) {
          unint64_t v14 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
        }
        else {
          unint64_t v14 = 0;
        }
        if (v14)
        {
          v17[0] = 0xAAAAAAAAAAAAAAAALL;
          v17[1] = 0xAAAAAAAAAAAAAAAALL;
          ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v17, v13);
          ctu::cf::map_adapter::getString();
          unint64_t v15 = (void **)(v7 + 152);
          if (*(char *)(v7 + 175) < 0) {
            operator delete(*v15);
          }
          *(_OWORD *)unint64_t v15 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
          *(void *)(v7 + 168) = *((void *)&buf.__r_.__value_.__l + 2);
          *((unsigned char *)&buf.__r_.__value_.__s + 23) = 0;
          buf.__r_.__value_.__s.__data_[0] = 0;
          MEMORY[0x1C87942E0](v17);
        }
      }
      uint64_t v16 = a1[7];
      if (*(char *)(v7 + 175) < 0) {
        std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(v7 + 152), *(void *)(v7 + 160));
      }
      else {
        std::string buf = *(std::string *)(v7 + 152);
      }
      (*(void (**)(uint64_t, std::string *))(v16 + 16))(v16, &buf);
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_28:
        if (atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          return;
        }
        goto LABEL_22;
      }
      operator delete(buf.__r_.__value_.__l.__data_);
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_22:
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1C5ABF0DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C87942E0](&a16);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_1C5ABF108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C5ABF120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c106_ZTSN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  result = (void *)a2[7];
  if (result) {
    result = _Block_copy(result);
  }
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c106_ZTSN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void ___ZN11RadioModule21getOperatingMode_syncEN8dispatch5blockIU13block_pointerFviEEE_block_invoke(void *a1, uint64_t *a2, const __CFDictionary **a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    int v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      if (a1[5])
      {
        uint64_t v10 = *a2;
        if (v10) {
          uint64_t v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v11 = 0;
        }
        if (v11)
        {
          uint64_t v12 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 138412290;
            *(void *)&buf[4] = v10;
            _os_log_error_impl(&dword_1C59C6000, v12, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
          }
        }
        else
        {
          CFDictionaryRef v13 = *a3;
          if (*a3) {
            unint64_t v14 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          }
          else {
            unint64_t v14 = 0;
          }
          if (v14)
          {
            memset(buf, 170, 16);
            ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, v13);
            ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E4FB9BD0]);
            MEMORY[0x1C87942E0](buf);
          }
        }
        (*(void (**)(void))(a1[7] + 16))();
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void *__copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c43_ZTSN8dispatch5blockIU13block_pointerFviEEE(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  result = (void *)a2[7];
  if (result) {
    result = _Block_copy(result);
  }
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c43_ZTSN8dispatch5blockIU13block_pointerFviEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void ___ZN11RadioModule23getResetProperties_syncEv_block_invoke(void *a1, CFErrorRef *a2, const void **a3)
{
  uint64_t v131 = *MEMORY[0x1E4F143B8];
  int v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = a1[4];
  int v8 = std::__shared_weak_count::lock(v4);
  v126 = v8;
  if (!v8) {
    return;
  }
  uint64_t v125 = a1[5];
  if (!v125)
  {
    uint64_t v11 = v8;
LABEL_231:
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    return;
  }
  memset(&v124, 0, sizeof(v124));
  if (*a2) {
    uint64_t v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v9 = 0;
  }
  if (v9)
  {
    std::string::__assign_external(&v124, "Failed to get reset properties", 0x1EuLL);
    uint64_t v10 = *(NSObject **)(v7 + 88);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v23 = &v124;
      if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        v23 = (std::string *)v124.__r_.__value_.__r.__words[0];
      }
      CFErrorRef v24 = *a2;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&buf[4] = v23;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = v24;
      _os_log_error_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_ERROR, "%s\n:%@", buf, 0x16u);
    }
    CFErrorGetCode(*a2);
    goto LABEL_228;
  }
  uint64_t v12 = *a3;
  CFTypeRef cf = v12;
  if (v12) {
    CFRetain(v12);
  }
  uint64_t v13 = radio::BasebandProperties::create();
  *(void *)(v7 + 288) = v13;
  if (cf)
  {
    CFRelease(cf);
    if (*(unsigned char *)(v7 + 288)) {
      goto LABEL_15;
    }
LABEL_27:
    std::string::__assign_external(&v124, "Invalid reset properties", 0x18uLL);
    __int16 v20 = *(NSObject **)(v7 + 88);
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      goto LABEL_196;
    }
    uint64_t v21 = &v124;
    if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v21 = (std::string *)v124.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&buf[4] = v21;
LABEL_237:
    _os_log_error_impl(&dword_1C59C6000, v20, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
    goto LABEL_196;
  }
  if (!(_BYTE)v13) {
    goto LABEL_27;
  }
LABEL_15:
  unint64_t v14 = *(NSObject **)(v7 + 88);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(v7 + 289)) {
      unint64_t v15 = "true";
    }
    else {
      unint64_t v15 = "false";
    }
    int v16 = *(unsigned __int16 *)(v7 + 290);
    int v17 = *(_DWORD *)(v7 + 292);
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&buf[4] = v15;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v16;
    *(_WORD *)&unsigned char buf[18] = 1024;
    *(_DWORD *)&buf[20] = v17;
    _os_log_impl(&dword_1C59C6000, v14, OS_LOG_TYPE_DEFAULT, "#I Baseband properties:\n    Coredump supported: %s\n    PowerSequence index: %u\n    Baseband version: 0x%08x", buf, 0x18u);
  }
  if ((TelephonyUtilIsInternalBuild() & 1) == 0
    && (TelephonyUtilIsCarrierBuild() & 1) == 0
    && !TelephonyUtilIsVendorBuild())
  {
    goto LABEL_193;
  }
  LOBYTE(valuePtr) = *(unsigned char *)(v7 + 289) ^ 1;
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1EBBDC7D8)
  {
    CFMutableDictionaryRef v19 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
    MEMORY[0x1C87942F0](v19, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
    uint64_t v18 = (std::__shared_weak_count *)operator new(0x20uLL);
    v18->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210A638;
    v18->__shared_owners_ = 0;
    v18->__shared_weak_owners_ = 0;
    v18[1].__vftable = v19;
    uint64_t v22 = (std::__shared_weak_count *)off_1EBBDC7E0;
    qword_1EBBDC7D8 = (uint64_t)v19;
    off_1EBBDC7E0 = v18;
    if (!v22)
    {
      uint64_t v121 = (uint64_t)v19;
      v122 = v18;
      goto LABEL_38;
    }
    if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  CFMutableDictionaryRef v19 = (std::__shared_weak_count_vtbl *)qword_1EBBDC7D8;
  uint64_t v18 = (std::__shared_weak_count *)off_1EBBDC7E0;
  uint64_t v121 = qword_1EBBDC7D8;
  v122 = (std::__shared_weak_count *)off_1EBBDC7E0;
  if (off_1EBBDC7E0) {
LABEL_38:
  }
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  uint64_t v25 = (const void *)*MEMORY[0x1E4FB9C28];
  size_t v26 = strlen((const char *)*MEMORY[0x1E4FB9C28]);
  if (v26 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v27 = v26;
  if (v26 >= 0x17)
  {
    uint64_t v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17) {
      uint64_t v29 = v26 | 7;
    }
    uint64_t v30 = v29 + 1;
    unint64_t v28 = operator new(v29 + 1);
    *(void *)&uint8_t buf[8] = v27;
    *(void *)&uint8_t buf[16] = v30 | 0x8000000000000000;
    *(void *)std::string buf = v28;
    goto LABEL_46;
  }
  buf[23] = v26;
  unint64_t v28 = buf;
  if (v26) {
LABEL_46:
  }
    memmove(v28, v25, v27);
  v28[v27] = 0;
  if (buf[23] >= 0) {
    unint64_t v31 = buf;
  }
  else {
    unint64_t v31 = *(char **)buf;
  }
  BOOL v32 = ctu::cf::plist_adapter::set<BOOL>((uint64_t)v19, *(unsigned __int8 *)(v7 + 289), v31, 1);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (v122 && !atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
    std::__shared_weak_count::__release_weak(v122);
  }
  if (!v32) {
    goto LABEL_79;
  }
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1EBBDC7D8)
  {
    uint64_t v34 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
    MEMORY[0x1C87942F0](v34, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
    uint64_t v33 = (std::__shared_weak_count *)operator new(0x20uLL);
    v33->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210A638;
    v33->__shared_owners_ = 0;
    v33->__shared_weak_owners_ = 0;
    v33[1].__vftable = v34;
    CFTypeID v35 = (std::__shared_weak_count *)off_1EBBDC7E0;
    qword_1EBBDC7D8 = (uint64_t)v34;
    off_1EBBDC7E0 = v33;
    if (!v35)
    {
      uint64_t v121 = (uint64_t)v34;
      v122 = v33;
      goto LABEL_63;
    }
    if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  uint64_t v34 = (std::__shared_weak_count_vtbl *)qword_1EBBDC7D8;
  uint64_t v33 = (std::__shared_weak_count *)off_1EBBDC7E0;
  uint64_t v121 = qword_1EBBDC7D8;
  v122 = (std::__shared_weak_count *)off_1EBBDC7E0;
  if (off_1EBBDC7E0) {
LABEL_63:
  }
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  size_t v36 = strlen((const char *)v25);
  if (v36 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v37 = v36;
  if (v36 >= 0x17)
  {
    uint64_t v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17) {
      uint64_t v39 = v36 | 7;
    }
    uint64_t v40 = v39 + 1;
    uint64_t v38 = operator new(v39 + 1);
    *(void *)&uint8_t buf[8] = v37;
    *(void *)&uint8_t buf[16] = v40 | 0x8000000000000000;
    *(void *)std::string buf = v38;
    goto LABEL_71;
  }
  buf[23] = v36;
  uint64_t v38 = buf;
  if (v36) {
LABEL_71:
  }
    memmove(v38, v25, v37);
  v38[v37] = 0;
  int v41 = Preferences::getPreference<BOOL>(v34, buf, (ctu::cf *)&valuePtr);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (v122 && !atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
    std::__shared_weak_count::__release_weak(v122);
  }
  if (!v41 || valuePtr != *(unsigned __int8 *)(v7 + 289))
  {
LABEL_79:
    CFDictionaryRef v42 = *(NSObject **)(v7 + 88);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_1C59C6000, v42, OS_LOG_TYPE_ERROR, "Failed to save CoredumpSupported property in ABMPreferences file", buf, 2u);
    }
  }
  __int16 v120 = *(_WORD *)(v7 + 290) == 0;
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1EBBDC7D8)
  {
    v44 = (CFStringRef *)operator new(0x18uLL);
    MEMORY[0x1C87942F0](v44, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
    CFAllocatorRef v43 = (std::__shared_weak_count *)operator new(0x20uLL);
    v43->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210A638;
    v43->__shared_owners_ = 0;
    v43->__shared_weak_owners_ = 0;
    v43[1].__vftable = (std::__shared_weak_count_vtbl *)v44;
    CFAllocatorRef v45 = (std::__shared_weak_count *)off_1EBBDC7E0;
    qword_1EBBDC7D8 = (uint64_t)v44;
    off_1EBBDC7E0 = v43;
    if (!v45)
    {
      uint64_t v121 = (uint64_t)v44;
      v122 = v43;
      goto LABEL_88;
    }
    if (!atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v44 = (CFStringRef *)qword_1EBBDC7D8;
  CFAllocatorRef v43 = (std::__shared_weak_count *)off_1EBBDC7E0;
  uint64_t v121 = qword_1EBBDC7D8;
  v122 = (std::__shared_weak_count *)off_1EBBDC7E0;
  if (off_1EBBDC7E0) {
LABEL_88:
  }
    atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  pid_t v46 = (const void *)*MEMORY[0x1E4FB9C40];
  size_t v47 = strlen((const char *)*MEMORY[0x1E4FB9C40]);
  if (v47 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v48 = v47;
  if (v47 >= 0x17)
  {
    uint64_t v50 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v47 | 7) != 0x17) {
      uint64_t v50 = v47 | 7;
    }
    uint64_t v51 = v50 + 1;
    CFAllocatorRef v49 = operator new(v50 + 1);
    *(void *)&uint8_t buf[8] = v48;
    *(void *)&uint8_t buf[16] = v51 | 0x8000000000000000;
    *(void *)std::string buf = v49;
    goto LABEL_96;
  }
  buf[23] = v47;
  CFAllocatorRef v49 = buf;
  if (v47) {
LABEL_96:
  }
    memmove(v49, v46, v48);
  v49[v48] = 0;
  CFStringRef v52 = (const __CFString *)*(unsigned __int16 *)(v7 + 290);
  if (buf[23] >= 0) {
    v53 = buf;
  }
  else {
    v53 = *(const char **)buf;
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v127, v53);
  CFStringRef v54 = v127;
  CFAllocatorRef v55 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef valuePtr = v52;
  CFNumberRef v56 = CFNumberCreate(v55, kCFNumberLongLongType, &valuePtr);
  CFNumberRef v128 = v56;
  if (v56)
  {
    CFStringRef v57 = (const __CFString *)*MEMORY[0x1E4F1D3E0];
    CFPreferencesSetValue(v54, v56, v44[1], v44[2], (CFStringRef)*MEMORY[0x1E4F1D3E0]);
    BOOL v58 = CFPreferencesSynchronize(v44[1], v44[2], v57) != 0;
    CFRelease(v56);
    MEMORY[0x1C8794290](&v127);
    if ((buf[23] & 0x80000000) == 0) {
      goto LABEL_102;
    }
  }
  else
  {
    BOOL v58 = 0;
    MEMORY[0x1C8794290](&v127);
    if ((buf[23] & 0x80000000) == 0)
    {
LABEL_102:
      uint64_t v59 = v122;
      if (!v122) {
        goto LABEL_108;
      }
      goto LABEL_106;
    }
  }
  operator delete(*(void **)buf);
  uint64_t v59 = v122;
  if (!v122) {
    goto LABEL_108;
  }
LABEL_106:
  if (!atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
    std::__shared_weak_count::__release_weak(v59);
  }
LABEL_108:
  if (!v58)
  {
LABEL_141:
    char v75 = *(NSObject **)(v7 + 88);
    if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_1C59C6000, v75, OS_LOG_TYPE_ERROR, "Failed to save PowerSequence property in ABMPreferences file", buf, 2u);
    }
    goto LABEL_143;
  }
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1EBBDC7D8)
  {
    v61 = (uint64_t (***)(void *, const __CFString *))operator new(0x18uLL);
    MEMORY[0x1C87942F0](v61, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
    uint64_t v60 = (std::__shared_weak_count *)operator new(0x20uLL);
    v60->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210A638;
    v60->__shared_owners_ = 0;
    v60->__shared_weak_owners_ = 0;
    v60[1].__vftable = (std::__shared_weak_count_vtbl *)v61;
    CFMutableDictionaryRef v62 = (std::__shared_weak_count *)off_1EBBDC7E0;
    qword_1EBBDC7D8 = (uint64_t)v61;
    off_1EBBDC7E0 = v60;
    if (!v62)
    {
      uint64_t v121 = (uint64_t)v61;
      v122 = v60;
      goto LABEL_116;
    }
    if (!atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v61 = (uint64_t (***)(void *, const __CFString *))qword_1EBBDC7D8;
  uint64_t v60 = (std::__shared_weak_count *)off_1EBBDC7E0;
  uint64_t v121 = qword_1EBBDC7D8;
  v122 = (std::__shared_weak_count *)off_1EBBDC7E0;
  if (off_1EBBDC7E0) {
LABEL_116:
  }
    atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  size_t v63 = strlen((const char *)v46);
  if (v63 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v64 = v63;
  if (v63 >= 0x17)
  {
    uint64_t v66 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v63 | 7) != 0x17) {
      uint64_t v66 = v63 | 7;
    }
    uint64_t v67 = v66 + 1;
    v65 = operator new(v66 + 1);
    *(void *)&uint8_t buf[8] = v64;
    *(void *)&uint8_t buf[16] = v67 | 0x8000000000000000;
    *(void *)std::string buf = v65;
    goto LABEL_124;
  }
  buf[23] = v63;
  v65 = buf;
  if (v63) {
LABEL_124:
  }
    memmove(v65, v46, v64);
  v65[v64] = 0;
  if (buf[23] >= 0) {
    std::string v68 = buf;
  }
  else {
    std::string v68 = *(const char **)buf;
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&valuePtr, v68);
  std::string v69 = (unsigned __int16 *)(**v61)(v61, valuePtr);
  v70 = v69;
  if (v69)
  {
    CFTypeID v71 = CFGetTypeID(v69);
    if (v71 == CFNumberGetTypeID()) {
      int v73 = ctu::cf::assign((ctu::cf *)&v120, v70, v72);
    }
    else {
      int v73 = 0;
    }
    CFRelease(v70);
  }
  else
  {
    int v73 = 0;
  }
  MEMORY[0x1C8794290](&valuePtr);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v74 = v122;
  if (v122 && !atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
    std::__shared_weak_count::__release_weak(v74);
  }
  if (!v73 || v120 != *(_WORD *)(v7 + 290)) {
    goto LABEL_141;
  }
LABEL_143:
  LODWORD(v128) = *(_DWORD *)(v7 + 292) == 0;
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1EBBDC7D8)
  {
    long long v77 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
    MEMORY[0x1C87942F0](v77, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
    long long v76 = (std::__shared_weak_count *)operator new(0x20uLL);
    v76->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210A638;
    v76->__shared_owners_ = 0;
    v76->__shared_weak_owners_ = 0;
    v76[1].__vftable = v77;
    long long v78 = (std::__shared_weak_count *)off_1EBBDC7E0;
    qword_1EBBDC7D8 = (uint64_t)v77;
    off_1EBBDC7E0 = v76;
    if (!v78)
    {
      uint64_t v121 = (uint64_t)v77;
      v122 = v76;
      goto LABEL_150;
    }
    if (!atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  long long v77 = (std::__shared_weak_count_vtbl *)qword_1EBBDC7D8;
  long long v76 = (std::__shared_weak_count *)off_1EBBDC7E0;
  uint64_t v121 = qword_1EBBDC7D8;
  v122 = (std::__shared_weak_count *)off_1EBBDC7E0;
  if (off_1EBBDC7E0) {
LABEL_150:
  }
    atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  long long v79 = (const void *)*MEMORY[0x1E4FB9BF8];
  size_t v80 = strlen((const char *)*MEMORY[0x1E4FB9BF8]);
  if (v80 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v81 = v80;
  if (v80 >= 0x17)
  {
    uint64_t v83 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v80 | 7) != 0x17) {
      uint64_t v83 = v80 | 7;
    }
    uint64_t v84 = v83 + 1;
    CFMutableDictionaryRef v82 = operator new(v83 + 1);
    *(void *)&uint8_t buf[8] = v81;
    *(void *)&uint8_t buf[16] = v84 | 0x8000000000000000;
    *(void *)std::string buf = v82;
    goto LABEL_158;
  }
  buf[23] = v80;
  CFMutableDictionaryRef v82 = buf;
  if (v80) {
LABEL_158:
  }
    memmove(v82, v79, v81);
  v82[v81] = 0;
  unsigned int v85 = *(_DWORD *)(v7 + 292);
  if (buf[23] >= 0) {
    v86 = buf;
  }
  else {
    v86 = *(const char **)buf;
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&valuePtr, v86);
  BOOL v87 = ctu::cf::plist_adapter::set<unsigned int>((uint64_t)v77, v85, valuePtr, 1);
  MEMORY[0x1C8794290](&valuePtr);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  v88 = v122;
  if (v122 && !atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
    std::__shared_weak_count::__release_weak(v88);
  }
  if (!v87) {
    goto LABEL_191;
  }
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1EBBDC7D8)
  {
    v90 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
    MEMORY[0x1C87942F0](v90, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
    v89 = (std::__shared_weak_count *)operator new(0x20uLL);
    v89->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210A638;
    v89->__shared_owners_ = 0;
    v89->__shared_weak_owners_ = 0;
    v89[1].__vftable = v90;
    v91 = (std::__shared_weak_count *)off_1EBBDC7E0;
    qword_1EBBDC7D8 = (uint64_t)v90;
    off_1EBBDC7E0 = v89;
    if (!v91)
    {
      uint64_t v121 = (uint64_t)v90;
      v122 = v89;
      goto LABEL_175;
    }
    if (!atomic_fetch_add(&v91->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v90 = (std::__shared_weak_count_vtbl *)qword_1EBBDC7D8;
  v89 = (std::__shared_weak_count *)off_1EBBDC7E0;
  uint64_t v121 = qword_1EBBDC7D8;
  v122 = (std::__shared_weak_count *)off_1EBBDC7E0;
  if (off_1EBBDC7E0) {
LABEL_175:
  }
    atomic_fetch_add_explicit(&v89->__shared_owners_, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  size_t v92 = strlen((const char *)v79);
  if (v92 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v93 = v92;
  if (v92 >= 0x17)
  {
    uint64_t v95 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v92 | 7) != 0x17) {
      uint64_t v95 = v92 | 7;
    }
    uint64_t v96 = v95 + 1;
    v94 = operator new(v95 + 1);
    *(void *)&uint8_t buf[8] = v93;
    *(void *)&uint8_t buf[16] = v96 | 0x8000000000000000;
    *(void *)std::string buf = v94;
    goto LABEL_183;
  }
  buf[23] = v92;
  v94 = buf;
  if (v92) {
LABEL_183:
  }
    memmove(v94, v79, v93);
  v94[v93] = 0;
  int v97 = Preferences::getPreference<unsigned int>(v90, buf, (ctu::cf *)&v128);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  v98 = v122;
  if (v122 && !atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
    std::__shared_weak_count::__release_weak(v98);
  }
  if (!v97 || v128 != *(_DWORD *)(v7 + 292))
  {
LABEL_191:
    v99 = *(NSObject **)(v7 + 88);
    if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_1C59C6000, v99, OS_LOG_TYPE_ERROR, "Failed to save BasebandVersion property in ABMPreferences file", buf, 2u);
    }
  }
LABEL_193:
  int v100 = TelephonyBasebandSetBasebandProperty();
  if (TelephonyBasebandSetBasebandProperty() & v100)
  {
    *(unsigned char *)(v7 + 296) = 1;
    goto LABEL_228;
  }
  *(unsigned char *)(v7 + 296) = 0;
  std::string::__assign_external(&v124, "Failed to send reset properties to AppleBaseband driver", 0x37uLL);
  __int16 v20 = *(NSObject **)(v7 + 88);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    v117 = &v124;
    if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      v117 = (std::string *)v124.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&buf[4] = v117;
    goto LABEL_237;
  }
LABEL_196:
  if ((TelephonyUtilIsInternalBuild() & 1) == 0
    && (TelephonyUtilIsCarrierBuild() & 1) == 0
    && !TelephonyUtilIsVendorBuild())
  {
    goto LABEL_228;
  }
  xpc_object_t v101 = xpc_dictionary_create(0, 0, 0);
  if (v101 || (xpc_object_t v101 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v101) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v101);
      xpc_object_t v102 = v101;
    }
    else
    {
      xpc_object_t v102 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v102 = xpc_null_create();
    xpc_object_t v101 = 0;
  }
  xpc_release(v101);
  xpc_object_t v103 = xpc_string_create((const char *)*MEMORY[0x1E4F4C6E8]);
  if (!v103) {
    xpc_object_t v103 = xpc_null_create();
  }
  xpc_dictionary_set_value(v102, (const char *)*MEMORY[0x1E4F4C690], v103);
  xpc_object_t v104 = xpc_null_create();
  xpc_release(v103);
  xpc_release(v104);
  xpc_object_t v105 = xpc_string_create((const char *)*MEMORY[0x1E4F4D038]);
  if (!v105) {
    xpc_object_t v105 = xpc_null_create();
  }
  xpc_dictionary_set_value(v102, (const char *)*MEMORY[0x1E4F4CA38], v105);
  xpc_object_t v106 = xpc_null_create();
  xpc_release(v105);
  xpc_release(v106);
  if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v107 = &v124;
  }
  else {
    v107 = (std::string *)v124.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v108 = xpc_string_create((const char *)v107);
  if (!v108) {
    xpc_object_t v108 = xpc_null_create();
  }
  xpc_dictionary_set_value(v102, (const char *)*MEMORY[0x1E4F4C8F0], v108);
  xpc_object_t v109 = xpc_null_create();
  xpc_release(v108);
  xpc_release(v109);
  uint64_t v110 = v125;
  v111 = (const void *)*MEMORY[0x1E4F4C638];
  size_t v112 = strlen((const char *)*MEMORY[0x1E4F4C638]);
  if (v112 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v113 = v112;
  if (v112 >= 0x17)
  {
    uint64_t v115 = (v112 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v112 | 7) != 0x17) {
      uint64_t v115 = v112 | 7;
    }
    uint64_t v116 = v115 + 1;
    v114 = operator new(v115 + 1);
    *(void *)&uint8_t buf[8] = v113;
    *(void *)&uint8_t buf[16] = v116 | 0x8000000000000000;
    *(void *)std::string buf = v114;
  }
  else
  {
    buf[23] = v112;
    v114 = buf;
    if (!v112) {
      goto LABEL_222;
    }
  }
  memmove(v114, v111, v113);
LABEL_222:
  v114[v113] = 0;
  xpc_object_t object = v102;
  if (v102) {
    xpc_retain(v102);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  v118 = 0;
  Service::runCommand(v110, (uint64_t)buf, &object, &v118);
  xpc_release(object);
  xpc_object_t object = 0;
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  xpc_release(v102);
LABEL_228:
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v124.__r_.__value_.__l.__data_);
  }
  uint64_t v11 = v126;
  if (v126) {
    goto LABEL_231;
  }
}

uint64_t Preferences::getPreference<unsigned int>(uint64_t (***a1)(void, uint64_t), const char *a2, ctu::cf *a3)
{
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v11, a2);
  uint64_t v5 = (unsigned int *)(**a1)(a1, v11);
  v6 = v5;
  if (v5)
  {
    CFTypeID v7 = CFGetTypeID(v5);
    if (v7 == CFNumberGetTypeID()) {
      uint64_t v9 = ctu::cf::assign(a3, v6, v8);
    }
    else {
      uint64_t v9 = 0;
    }
    CFRelease(v6);
  }
  else
  {
    uint64_t v9 = 0;
  }
  MEMORY[0x1C8794290](&v11);
  return v9;
}

void ___ZN11RadioModule23monitorBatteryInfo_syncEv_block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      CFTypeID v7 = v6;
      if (a1[5])
      {
        uint64_t v8 = *a2;
        if (*a2) {
          uint64_t v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v9 = 0;
        }
        uint64_t v10 = *(NSObject **)(v5 + 88);
        if (v9)
        {
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            int v11 = 138412290;
            uint64_t v12 = v8;
            _os_log_error_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_ERROR, "Failed to send battery info update\n:%@", (uint8_t *)&v11, 0xCu);
          }
        }
        else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v11) = 0;
          _os_log_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_DEFAULT, "#I Success sending battery info update", (uint8_t *)&v11, 2u);
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void ___ZN11RadioModule23monitorBatteryInfo_syncEv_block_invoke_192(void *a1, unsigned int a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  CFTypeID v35 = v6;
  if (!v6) {
    return;
  }
  CFTypeID v7 = v6;
  if (!a1[5])
  {
LABEL_51:
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    return;
  }
  unsigned int v8 = *(unsigned __int8 *)(v5 + 320);
  if (*(unsigned char *)(v5 + 320)
    && (v8 > 0x27 || a2 <= 0x29u)
    && (v8 < 0x28 || a2 >= 0x26u))
  {
    BOOL v9 = ((a2 >> 8) & 1) != *(unsigned __int8 *)(v5 + 321);
    uint64_t v10 = *(NSObject **)(v5 + 88);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_19;
    }
  }
  else
  {
    BOOL v9 = 1;
    uint64_t v10 = *(NSObject **)(v5 + 88);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_19;
    }
  }
  int v11 = "TRUE";
  if ((a2 & 0x100) != 0) {
    uint64_t v12 = "TRUE";
  }
  else {
    uint64_t v12 = "FALSE";
  }
  *(_DWORD *)std::string buf = 67109890;
  *(_DWORD *)&buf[4] = a2;
  if ((*(void *)&a2 & 0x10000) != 0) {
    uint64_t v13 = "TRUE";
  }
  else {
    uint64_t v13 = "FALSE";
  }
  *(_WORD *)&uint8_t buf[8] = 2080;
  *(void *)&buf[10] = v12;
  __int16 v37 = 2080;
  if (!v9) {
    int v11 = "FALSE";
  }
  uint64_t v38 = v13;
  __int16 v39 = 2080;
  uint64_t v40 = v11;
  _os_log_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_DEFAULT, "#I Battery Info Update:\n   chargeLevel:        %u\n   charging:           %s\n   fully charged:      %s\n   reportToBaseband:   %s", buf, 0x26u);
LABEL_19:
  if (!v9) {
    goto LABEL_51;
  }
  *(_WORD *)(v5 + 320) = a2;
  *(unsigned char *)(v5 + 322) = BYTE2(a2);
  unint64_t v32 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v33 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v14 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v15 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)buf, v14);
    long long v16 = *(_OWORD *)buf;
    *(void *)std::string buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    int v17 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v16;
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    uint64_t v18 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    uint64_t v15 = off_1EBBDCA08;
  }
  CFMutableDictionaryRef v19 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  uint64_t v28 = v15;
  uint64_t v29 = *(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v15 + 16))(&v30, v15);
  unint64_t v32 = 0;
  uint64_t v33 = 0;
  if (v31)
  {
    uint64_t v33 = std::__shared_weak_count::lock(v31);
    if (v33) {
      unint64_t v32 = v30;
    }
    if (v31) {
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  unint64_t v20 = v32;
  if (v32)
  {
    uint64_t v21 = *(unsigned __int8 *)(v5 + 320);
    int v22 = *(unsigned __int8 *)(v5 + 321);
    v23 = (void *)a1[7];
    if (v23) {
      v23 = _Block_copy(v23);
    }
    CFErrorRef v24 = a1[8];
    aBlock = v23;
    dispatch_object_t object = v24;
    if (v24) {
      dispatch_retain(v24);
    }
    (*(void (**)(unint64_t, uint64_t, BOOL, void **))(*(void *)v20 + 176))(v20, v21, v22 != 0, &aBlock);
    if (object) {
      dispatch_release(object);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
  }
  uint64_t v25 = v33;
  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  CFTypeID v7 = v35;
  if (v35) {
    goto LABEL_51;
  }
}

void sub_1C5AC1168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (void *)a2[7];
  if (v5) {
    uint64_t v5 = _Block_copy(v5);
  }
  v6 = a2[8];
  a1[7] = v5;
  a1[8] = v6;
  if (v6)
  {
    dispatch_retain(v6);
  }
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(void *a1)
{
  uint64_t v2 = a1[8];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[7];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitBatteryInfo)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void ___ZN11RadioModule21setOperatingMode_syncEjN5radio13OperatingModeEbN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      CFTypeID v7 = v6;
      if (a1[5])
      {
        uint64_t v8 = *a2;
        if (*a2) {
          BOOL v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          BOOL v9 = 0;
        }
        if (v9)
        {
          uint64_t v10 = *(NSObject **)(v5 + 88);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 138412290;
            uint64_t v12 = v8;
            _os_log_error_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
          }
        }
        (*(void (**)(void))(a1[7] + 16))();
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1C5AC145C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *__copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  result = (void *)a2[7];
  if (result) {
    result = _Block_copy(result);
  }
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void ___ZN11RadioModule34queryFactoryCalibrationStatus_syncEv_block_invoke(void *a1, uint64_t *a2, const __CFDictionary **a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      BOOL v9 = v8;
      if (a1[5])
      {
        uint64_t v10 = *a2;
        if (v10) {
          int v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          int v11 = 0;
        }
        if (v11)
        {
          uint64_t v12 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 138412290;
            *(void *)&uint8_t buf[4] = v10;
            _os_log_error_impl(&dword_1C59C6000, v12, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
          }
        }
        else
        {
          CFDictionaryRef v13 = *a3;
          if (*a3) {
            unint64_t v14 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          }
          else {
            unint64_t v14 = 0;
          }
          if (v14)
          {
            memset(buf, 170, 16);
            ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, v13);
            *(unsigned char *)(v7 + 192) = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E4FB9C50]);
            MEMORY[0x1C87942E0](buf);
          }
        }
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN11RadioModule29queryRFCalibrationStatus_syncEv_block_invoke(void *a1, uint64_t *a2, const void **a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      BOOL v9 = v8;
      if (a1[5])
      {
        uint64_t v10 = *a2;
        if (v10) {
          int v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          int v11 = 0;
        }
        if (v11)
        {
          uint64_t v12 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 138412290;
            uint64_t v17 = v10;
            _os_log_error_impl(&dword_1C59C6000, v12, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
          }
        }
        else
        {
          CFDictionaryRef v13 = *a3;
          if (*a3) {
            unint64_t v14 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          }
          else {
            unint64_t v14 = 0;
          }
          if (v14)
          {
            CFTypeRef cf = *a3;
            if (v13) {
              CFRetain(v13);
            }
            radio::RFCalibration_t::fill();
            if (cf) {
              CFRelease(cf);
            }
          }
        }
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1C5AC1860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN11RadioModule25queryFieldTestConfig_syncEv_block_invoke(void *a1, uint64_t *a2, ctu **a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v10 = v8;
      if (a1[5])
      {
        uint64_t v11 = *a2;
        if (v11) {
          uint64_t v12 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v12 = 0;
        }
        if (v12)
        {
          CFDictionaryRef v13 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)dispatch_object_t object = 138412290;
            *(void *)&object[4] = v11;
            _os_log_error_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
          }
        }
        else
        {
          if (*a3) {
            unint64_t v14 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          }
          else {
            unint64_t v14 = 0;
          }
          if (v14)
          {
            ctu::cf_to_xpc((uint64_t *)object, *a3, v9);
            xpc_object_t v15 = *(xpc_object_t *)object;
            if (*(void *)object && MEMORY[0x1C8795EB0](*(void *)object) == MEMORY[0x1E4F14590]) {
              xpc_retain(v15);
            }
            else {
              xpc_object_t v15 = xpc_null_create();
            }
            xpc_object_t v16 = xpc_null_create();
            uint64_t v17 = *(void **)(v7 + 248);
            *(void *)(v7 + 248) = v15;
            xpc_release(v17);
            xpc_release(v16);
            xpc_release(*(xpc_object_t *)object);
            uint64_t v18 = *(NSObject **)(v7 + 88);
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              xpc::object::to_string((uint64_t *)object, (xpc::object *)(v7 + 248));
              CFMutableDictionaryRef v19 = v21 >= 0 ? object : *(unsigned char **)object;
              *(_DWORD *)std::string buf = 136315138;
              v23 = v19;
              _os_log_impl(&dword_1C59C6000, v18, OS_LOG_TYPE_DEFAULT, "#I Baseband field test config:\n%s", buf, 0xCu);
              if (v21 < 0) {
                operator delete(*(void **)object);
              }
            }
          }
        }
      }
      if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_1C5AC1AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ctu::Loggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (const char *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 16))();
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

uint64_t ctu::PthreadMutexGuardPolicy<DeviceHistoryDB>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void *ctu::Loggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F2109F38;
  MEMORY[0x1C87940C0](a1 + 1);
  return a1;
}

void ctu::Loggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F2109F38;
  MEMORY[0x1C87940C0](a1 + 1);

  operator delete(a1);
}

void std::__shared_ptr_pointer<RadioModule *,std::shared_ptr<RadioModule> ctu::SharedSynchronizable<RadioModule>::make_shared_ptr<RadioModule>(RadioModule*)::{lambda(RadioModule *)#1},std::allocator<RadioModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<RadioModule *,std::shared_ptr<RadioModule> ctu::SharedSynchronizable<RadioModule>::make_shared_ptr<RadioModule>(RadioModule*)::{lambda(RadioModule *)#1},std::allocator<RadioModule>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<RadioModule *,std::shared_ptr<RadioModule> ctu::SharedSynchronizable<RadioModule>::make_shared_ptr<RadioModule>(RadioModule*)::{lambda(RadioModule *)#1},std::allocator<RadioModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI11RadioModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI11RadioModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI11RadioModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI11RadioModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

uint64_t std::shared_ptr<RadioModule> ctu::SharedSynchronizable<RadioModule>::make_shared_ptr<RadioModule>(RadioModule*)::{lambda(RadioModule*)#1}::operator() const(RadioModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ctu::SharedLoggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F2109F38;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrIK11RadioModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrIK11RadioModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)*a1;
  unint64_t v3 = *(void **)*a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    uint64_t v4 = (const void *)*MEMORY[0x1E4F4D1C0];
    size_t v5 = strlen((const char *)*MEMORY[0x1E4F4D1C0]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        uint64_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        CFMutableDictionaryRef v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        __p[2] = (void *)v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          char v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 1;
            if (!v2[1])
            {
LABEL_74:
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              goto LABEL_76;
            }
LABEL_56:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            uint64_t v28 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0) {
              uint64_t v28 = __p[1];
            }
            if (v28)
            {
              xpc_object_t v29 = xpc_dictionary_create(0, 0, 0);
              if (v29 || (xpc_object_t v29 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8795EB0](v29) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v29);
                  xpc_object_t v30 = v29;
                }
                else
                {
                  xpc_object_t v30 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v30 = xpc_null_create();
                xpc_object_t v29 = 0;
              }
              xpc_release(v29);
              xpc_object_t v31 = xpc_null_create();
              unint64_t v32 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
              xpc_release(v32);
              xpc_release(v31);
              if (SHIBYTE(__p[2]) >= 0) {
                uint64_t v33 = __p;
              }
              else {
                uint64_t v33 = (void **)__p[0];
              }
              xpc_object_t v34 = xpc_string_create((const char *)v33);
              if (!v34) {
                xpc_object_t v34 = xpc_null_create();
              }
              xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x1E4F4C240], v34);
              xpc_object_t v35 = xpc_null_create();
              xpc_release(v34);
              xpc_release(v35);
            }
            unsigned int v42 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, &v42, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_74;
          }
        }
        else
        {
          char v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        size_t v27 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          size_t v27 = (void **)__p[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
        _os_log_impl(&dword_1C59C6000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 1;
        if (!v2[1]) {
          goto LABEL_74;
        }
        goto LABEL_56;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  uint64_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)__p, v8);
    long long v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v11 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_1EBBDCA08;
  }
  CFDictionaryRef v13 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    unint64_t v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13) {
      goto LABEL_34;
    }
  }
  else
  {
    unint64_t v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v15) {
      goto LABEL_35;
    }
    goto LABEL_49;
  }
LABEL_34:
  if (v15)
  {
LABEL_35:
    __p[0] = (void *)MEMORY[0x1E4F143A8];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__0clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_240;
    __p[4] = *((void **)v2 + 2);
    v23 = (std::__shared_weak_count *)v2[3];
    uint64_t v40 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = (void *)v2[1];
    if (v24) {
      uint64_t v24 = _Block_copy(v24);
    }
    aBlock = v24;
    uint64_t v25 = _Block_copy(__p);
    size_t v26 = v3[17];
    if (v26) {
      dispatch_retain(v26);
    }
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
    (*(void (**)(std::string::size_type, std::string *))(*(void *)v15 + 224))(v15, &__dst);
    if (__dst.__r_.__value_.__l.__size_) {
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    }
    if (__dst.__r_.__value_.__r.__words[0]) {
      _Block_release(__dst.__r_.__value_.__l.__data_);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v40) {
      std::__shared_weak_count::__release_weak(v40);
    }
  }
LABEL_49:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_76:
  size_t v36 = (std::__shared_weak_count *)v2[3];
  if (v36) {
    std::__shared_weak_count::__release_weak(v36);
  }
  __int16 v37 = (const void *)v2[1];
  if (v37) {
    _Block_release(v37);
  }
  operator delete(v2);
  uint64_t v38 = (std::__shared_weak_count *)a1[2];
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  operator delete(a1);
}

void sub_1C5AC2668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__0clEv_block_invoke(void *a1, void *a2, xpc_object_t *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (!v4) {
    return;
  }
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  uint64_t v24 = v7;
  if (!v7) {
    return;
  }
  if (!a1[4])
  {
    long long v10 = v7;
LABEL_29:
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return;
  }
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v9 = v8;
  if (v8)
  {
    xpc_object_t xdict = v8;
  }
  else
  {
    xpc_object_t v9 = xpc_null_create();
    xpc_object_t xdict = v9;
    if (!v9)
    {
      xpc_object_t v11 = xpc_null_create();
      xpc_object_t v9 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x1C8795EB0](v9) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v9);
    goto LABEL_13;
  }
  xpc_object_t v11 = xpc_null_create();
LABEL_12:
  xpc_object_t xdict = v11;
LABEL_13:
  xpc_release(v9);
  uint64_t v12 = MEMORY[0x1C8795EB0](*a2);
  uint64_t v13 = MEMORY[0x1E4F145D8];
  if (v12 == MEMORY[0x1E4F145D8])
  {
    xpc_object_t v17 = *a3;
    if (v17) {
      xpc_retain(v17);
    }
    else {
      xpc_object_t v17 = xpc_null_create();
    }
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4D318], v17);
    xpc_object_t v18 = xpc_null_create();
    xpc_release(v17);
    xpc_release(v18);
  }
  else
  {
    memset(__p, 0, sizeof(__p));
    xpc::dyn_cast_or_default();
    if (v21 >= 0) {
      unint64_t v14 = (const char *)&v20;
    }
    else {
      unint64_t v14 = (const char *)v20;
    }
    xpc_object_t v15 = xpc_string_create(v14);
    if (!v15) {
      xpc_object_t v15 = xpc_null_create();
    }
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C418], v15);
    xpc_object_t v16 = xpc_null_create();
    xpc_release(v15);
    xpc_release(v16);
    if (v21 < 0) {
      operator delete(v20);
    }
  }
  if (MEMORY[0x1C8795EB0](*a2) == v13) {
    int v19 = 0;
  }
  else {
    int v19 = -534716416;
  }
  LODWORD(__p[0]) = v19;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, (unsigned int *)__p, &xdict);
  xpc_release(xdict);
  long long v10 = v24;
  if (v24) {
    goto LABEL_29;
  }
}

void sub_1C5AC2B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c36_ZTSNSt3__18weak_ptrI11RadioModuleEE48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(void *a1, void *a2)
{
  uint64_t v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  size_t result = (void *)a2[6];
  if (result) {
    size_t result = _Block_copy(result);
  }
  a1[6] = result;
  return result;
}

void __destroy_helper_block_e8_32c36_ZTSNSt3__18weak_ptrI11RadioModuleEE48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void **)*a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    uint64_t v4 = (const void *)*MEMORY[0x1E4F4C588];
    size_t v5 = strlen((const char *)*MEMORY[0x1E4F4C588]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        xpc_object_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        int v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        __p[2] = (void *)v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          char v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 1;
            if (!v2[1])
            {
LABEL_74:
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              goto LABEL_76;
            }
LABEL_56:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            uint64_t v28 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0) {
              uint64_t v28 = __p[1];
            }
            if (v28)
            {
              xpc_object_t v29 = xpc_dictionary_create(0, 0, 0);
              if (v29 || (xpc_object_t v29 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8795EB0](v29) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v29);
                  xpc_object_t v30 = v29;
                }
                else
                {
                  xpc_object_t v30 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v30 = xpc_null_create();
                xpc_object_t v29 = 0;
              }
              xpc_release(v29);
              xpc_object_t v31 = xpc_null_create();
              unint64_t v32 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
              xpc_release(v32);
              xpc_release(v31);
              if (SHIBYTE(__p[2]) >= 0) {
                uint64_t v33 = __p;
              }
              else {
                uint64_t v33 = (void **)__p[0];
              }
              xpc_object_t v34 = xpc_string_create((const char *)v33);
              if (!v34) {
                xpc_object_t v34 = xpc_null_create();
              }
              xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x1E4F4C240], v34);
              xpc_object_t v35 = xpc_null_create();
              xpc_release(v34);
              xpc_release(v35);
            }
            unsigned int v42 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, &v42, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_74;
          }
        }
        else
        {
          char v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        size_t v27 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          size_t v27 = (void **)__p[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
        _os_log_impl(&dword_1C59C6000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 1;
        if (!v2[1]) {
          goto LABEL_74;
        }
        goto LABEL_56;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  xpc_object_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)__p, v8);
    long long v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    xpc_object_t v11 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_1EBBDCA08;
  }
  uint64_t v13 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    unint64_t v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13) {
      goto LABEL_34;
    }
  }
  else
  {
    unint64_t v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v15) {
      goto LABEL_35;
    }
    goto LABEL_49;
  }
LABEL_34:
  if (v15)
  {
LABEL_35:
    __p[0] = (void *)MEMORY[0x1E4F143A8];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb1_ENK3__1clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_243;
    __p[4] = *((void **)v2 + 2);
    v23 = (std::__shared_weak_count *)v2[3];
    uint64_t v40 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = (void *)v2[1];
    if (v24) {
      uint64_t v24 = _Block_copy(v24);
    }
    aBlock = v24;
    uint64_t v25 = _Block_copy(__p);
    size_t v26 = v3[17];
    if (v26) {
      dispatch_retain(v26);
    }
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
    (*(void (**)(std::string::size_type, std::string *))(*(void *)v15 + 264))(v15, &__dst);
    if (__dst.__r_.__value_.__l.__size_) {
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    }
    if (__dst.__r_.__value_.__r.__words[0]) {
      _Block_release(__dst.__r_.__value_.__l.__data_);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v40) {
      std::__shared_weak_count::__release_weak(v40);
    }
  }
LABEL_49:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_76:
  size_t v36 = (std::__shared_weak_count *)v2[3];
  if (v36) {
    std::__shared_weak_count::__release_weak(v36);
  }
  __int16 v37 = (const void *)v2[1];
  if (v37) {
    _Block_release(v37);
  }
  operator delete(v2);
  uint64_t v38 = (std::__shared_weak_count *)a1[2];
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  operator delete(a1);
}

void sub_1C5AC32A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb1_ENK3__1clEv_block_invoke(void *a1, xpc_object_t *a2, xpc_object_t *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    uint64_t v24 = v7;
    if (v7)
    {
      if (!a1[4])
      {
        uint64_t v13 = v7;
LABEL_25:
        if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        return;
      }
      xpc_object_t v8 = xpc_null_create();
      xpc_object_t object = v8;
      uint64_t v9 = MEMORY[0x1C8795EB0](*a2);
      uint64_t v10 = MEMORY[0x1E4F145D8];
      if (v9 == MEMORY[0x1E4F145D8])
      {
        xpc_object_t v14 = *a3;
        if (v14 && MEMORY[0x1C8795EB0](v14) == MEMORY[0x1E4F14590]) {
          xpc_retain(v14);
        }
        else {
          xpc_object_t v14 = xpc_null_create();
        }
        xpc_object_t v15 = xpc_null_create();
        xpc_object_t object = v14;
        xpc_release(v8);
        xpc_release(v15);
      }
      else
      {
        xpc_object_t v11 = xpc_dictionary_create(0, 0, 0);
        if (v11 || (xpc_object_t v11 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C8795EB0](v11) == MEMORY[0x1E4F14590])
          {
            xpc_retain(v11);
            xpc_object_t v12 = v11;
          }
          else
          {
            xpc_object_t v12 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v12 = xpc_null_create();
          xpc_object_t v11 = 0;
        }
        xpc_release(v11);
        xpc_object_t v16 = xpc_null_create();
        xpc_object_t v17 = object;
        xpc_object_t object = v12;
        xpc_release(v17);
        xpc_release(v16);
        xpc_object_t v18 = *a2;
        if (*a2) {
          xpc_retain(*a2);
        }
        else {
          xpc_object_t v18 = xpc_null_create();
        }
        xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E4F4C418], v18);
        xpc_object_t v19 = xpc_null_create();
        xpc_release(v18);
        xpc_release(v19);
      }
      if (MEMORY[0x1C8795EB0](*a2) == v10) {
        unsigned int v20 = 0;
      }
      else {
        unsigned int v20 = -534716416;
      }
      unsigned int v21 = v20;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, &v21, &object);
      xpc_release(object);
      uint64_t v13 = v24;
      if (v24) {
        goto LABEL_25;
      }
    }
  }
}

void sub_1C5AC3750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  xpc_release(v11);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb2_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void **)*a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    uint64_t v4 = (const void *)*MEMORY[0x1E4F4CCB8];
    size_t v5 = strlen((const char *)*MEMORY[0x1E4F4CCB8]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        xpc_object_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        xpc_object_t v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        __p[2] = (void *)v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 1;
            if (!v2[1])
            {
LABEL_74:
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              goto LABEL_76;
            }
LABEL_56:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            uint64_t v28 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0) {
              uint64_t v28 = __p[1];
            }
            if (v28)
            {
              xpc_object_t v29 = xpc_dictionary_create(0, 0, 0);
              if (v29 || (xpc_object_t v29 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8795EB0](v29) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v29);
                  xpc_object_t v30 = v29;
                }
                else
                {
                  xpc_object_t v30 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v30 = xpc_null_create();
                xpc_object_t v29 = 0;
              }
              xpc_release(v29);
              xpc_object_t v31 = xpc_null_create();
              unint64_t v32 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
              xpc_release(v32);
              xpc_release(v31);
              if (SHIBYTE(__p[2]) >= 0) {
                uint64_t v33 = __p;
              }
              else {
                uint64_t v33 = (void **)__p[0];
              }
              xpc_object_t v34 = xpc_string_create((const char *)v33);
              if (!v34) {
                xpc_object_t v34 = xpc_null_create();
              }
              xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x1E4F4C240], v34);
              xpc_object_t v35 = xpc_null_create();
              xpc_release(v34);
              xpc_release(v35);
            }
            unsigned int v42 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, &v42, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_74;
          }
        }
        else
        {
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        size_t v27 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          size_t v27 = (void **)__p[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
        _os_log_impl(&dword_1C59C6000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 1;
        if (!v2[1]) {
          goto LABEL_74;
        }
        goto LABEL_56;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  xpc_object_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)__p, v8);
    long long v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    xpc_object_t v11 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    xpc_object_t v12 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_1EBBDCA08;
  }
  uint64_t v13 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    xpc_object_t v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13) {
      goto LABEL_34;
    }
  }
  else
  {
    xpc_object_t v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v15) {
      goto LABEL_35;
    }
    goto LABEL_49;
  }
LABEL_34:
  if (v15)
  {
LABEL_35:
    __p[0] = (void *)MEMORY[0x1E4F143A8];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb2_ENK3__2clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_246;
    __p[4] = *((void **)v2 + 2);
    v23 = (std::__shared_weak_count *)v2[3];
    uint64_t v40 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = (void *)v2[1];
    if (v24) {
      uint64_t v24 = _Block_copy(v24);
    }
    aBlock = v24;
    uint64_t v25 = _Block_copy(__p);
    size_t v26 = v3[17];
    if (v26) {
      dispatch_retain(v26);
    }
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
    (*(void (**)(std::string::size_type, std::string *))(*(void *)v15 + 280))(v15, &__dst);
    if (__dst.__r_.__value_.__l.__size_) {
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    }
    if (__dst.__r_.__value_.__r.__words[0]) {
      _Block_release(__dst.__r_.__value_.__l.__data_);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v40) {
      std::__shared_weak_count::__release_weak(v40);
    }
  }
LABEL_49:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_76:
  size_t v36 = (std::__shared_weak_count *)v2[3];
  if (v36) {
    std::__shared_weak_count::__release_weak(v36);
  }
  __int16 v37 = (const void *)v2[1];
  if (v37) {
    _Block_release(v37);
  }
  operator delete(v2);
  uint64_t v38 = (std::__shared_weak_count *)a1[2];
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  operator delete(a1);
}

void sub_1C5AC3E24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb2_ENK3__2clEv_block_invoke(void *a1, xpc_object_t *a2, xpc_object_t *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    uint64_t v24 = v7;
    if (v7)
    {
      if (!a1[4])
      {
        uint64_t v13 = v7;
LABEL_25:
        if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        return;
      }
      xpc_object_t v8 = xpc_null_create();
      xpc_object_t object = v8;
      uint64_t v9 = MEMORY[0x1C8795EB0](*a2);
      uint64_t v10 = MEMORY[0x1E4F145D8];
      if (v9 == MEMORY[0x1E4F145D8])
      {
        xpc_object_t v14 = *a3;
        if (v14 && MEMORY[0x1C8795EB0](v14) == MEMORY[0x1E4F14590]) {
          xpc_retain(v14);
        }
        else {
          xpc_object_t v14 = xpc_null_create();
        }
        xpc_object_t v15 = xpc_null_create();
        xpc_object_t object = v14;
        xpc_release(v8);
        xpc_release(v15);
      }
      else
      {
        xpc_object_t v11 = xpc_dictionary_create(0, 0, 0);
        if (v11 || (xpc_object_t v11 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C8795EB0](v11) == MEMORY[0x1E4F14590])
          {
            xpc_retain(v11);
            xpc_object_t v12 = v11;
          }
          else
          {
            xpc_object_t v12 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v12 = xpc_null_create();
          xpc_object_t v11 = 0;
        }
        xpc_release(v11);
        xpc_object_t v16 = xpc_null_create();
        xpc_object_t v17 = object;
        xpc_object_t object = v12;
        xpc_release(v17);
        xpc_release(v16);
        xpc_object_t v18 = *a2;
        if (*a2) {
          xpc_retain(*a2);
        }
        else {
          xpc_object_t v18 = xpc_null_create();
        }
        xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E4F4C418], v18);
        xpc_object_t v19 = xpc_null_create();
        xpc_release(v18);
        xpc_release(v19);
      }
      if (MEMORY[0x1C8795EB0](*a2) == v10) {
        unsigned int v20 = 0;
      }
      else {
        unsigned int v20 = -534716416;
      }
      unsigned int v21 = v20;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, &v21, &object);
      xpc_release(object);
      uint64_t v13 = v24;
      if (v24) {
        goto LABEL_25;
      }
    }
  }
}

void sub_1C5AC42CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  xpc_release(v11);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb3_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void **)*a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    uint64_t v4 = (const void *)*MEMORY[0x1E4F4CE70];
    size_t v5 = strlen((const char *)*MEMORY[0x1E4F4CE70]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        xpc_object_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        xpc_object_t v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        __p[2] = (void *)v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 1;
            if (!v2[1])
            {
LABEL_74:
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              goto LABEL_76;
            }
LABEL_56:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            uint64_t v28 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0) {
              uint64_t v28 = __p[1];
            }
            if (v28)
            {
              xpc_object_t v29 = xpc_dictionary_create(0, 0, 0);
              if (v29 || (xpc_object_t v29 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8795EB0](v29) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v29);
                  xpc_object_t v30 = v29;
                }
                else
                {
                  xpc_object_t v30 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v30 = xpc_null_create();
                xpc_object_t v29 = 0;
              }
              xpc_release(v29);
              xpc_object_t v31 = xpc_null_create();
              unint64_t v32 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
              xpc_release(v32);
              xpc_release(v31);
              if (SHIBYTE(__p[2]) >= 0) {
                uint64_t v33 = __p;
              }
              else {
                uint64_t v33 = (void **)__p[0];
              }
              xpc_object_t v34 = xpc_string_create((const char *)v33);
              if (!v34) {
                xpc_object_t v34 = xpc_null_create();
              }
              xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x1E4F4C240], v34);
              xpc_object_t v35 = xpc_null_create();
              xpc_release(v34);
              xpc_release(v35);
            }
            unsigned int v42 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, &v42, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_74;
          }
        }
        else
        {
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        size_t v27 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          size_t v27 = (void **)__p[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
        _os_log_impl(&dword_1C59C6000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 1;
        if (!v2[1]) {
          goto LABEL_74;
        }
        goto LABEL_56;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  xpc_object_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)__p, v8);
    long long v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    xpc_object_t v11 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    xpc_object_t v12 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_1EBBDCA08;
  }
  uint64_t v13 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    xpc_object_t v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13) {
      goto LABEL_34;
    }
  }
  else
  {
    xpc_object_t v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v15) {
      goto LABEL_35;
    }
    goto LABEL_49;
  }
LABEL_34:
  if (v15)
  {
LABEL_35:
    __p[0] = (void *)MEMORY[0x1E4F143A8];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb3_ENK3__3clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_249;
    __p[4] = *((void **)v2 + 2);
    v23 = (std::__shared_weak_count *)v2[3];
    uint64_t v40 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = (void *)v2[1];
    if (v24) {
      uint64_t v24 = _Block_copy(v24);
    }
    aBlock = v24;
    uint64_t v25 = _Block_copy(__p);
    size_t v26 = v3[17];
    if (v26) {
      dispatch_retain(v26);
    }
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
    (*(void (**)(std::string::size_type, std::string *))(*(void *)v15 + 288))(v15, &__dst);
    if (__dst.__r_.__value_.__l.__size_) {
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    }
    if (__dst.__r_.__value_.__r.__words[0]) {
      _Block_release(__dst.__r_.__value_.__l.__data_);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v40) {
      std::__shared_weak_count::__release_weak(v40);
    }
  }
LABEL_49:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_76:
  size_t v36 = (std::__shared_weak_count *)v2[3];
  if (v36) {
    std::__shared_weak_count::__release_weak(v36);
  }
  __int16 v37 = (const void *)v2[1];
  if (v37) {
    _Block_release(v37);
  }
  operator delete(v2);
  uint64_t v38 = (std::__shared_weak_count *)a1[2];
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  operator delete(a1);
}

void sub_1C5AC49A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb3_ENK3__3clEv_block_invoke(void *a1, void *a2, xpc_object_t *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    xpc_object_t v18 = v7;
    if (v7)
    {
      xpc_object_t v8 = v7;
      if (a1[4])
      {
        xpc_object_t v9 = xpc_null_create();
        xpc_object_t object = v9;
        uint64_t v10 = MEMORY[0x1C8795EB0](*a2);
        uint64_t v11 = MEMORY[0x1E4F145D8];
        if (v10 == MEMORY[0x1E4F145D8])
        {
          xpc_object_t v12 = *a3;
          if (v12 && MEMORY[0x1C8795EB0](v12) == MEMORY[0x1E4F14590]) {
            xpc_retain(v12);
          }
          else {
            xpc_object_t v12 = xpc_null_create();
          }
          xpc_object_t v13 = xpc_null_create();
          xpc_object_t object = v12;
          xpc_release(v9);
          xpc_release(v13);
        }
        if (MEMORY[0x1C8795EB0](*a2) == v11) {
          unsigned int v14 = 0;
        }
        else {
          unsigned int v14 = -534716416;
        }
        unsigned int v15 = v14;
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, &v15, &object);
        xpc_release(object);
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_1C5AC4D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  xpc_release(v11);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb4_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void **)*a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    uint64_t v4 = (const void *)*MEMORY[0x1E4F4C7E0];
    size_t v5 = strlen((const char *)*MEMORY[0x1E4F4C7E0]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        xpc_object_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        xpc_object_t v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        __p[2] = (void *)v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 1;
            if (!v2[1])
            {
LABEL_74:
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              goto LABEL_76;
            }
LABEL_56:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            uint64_t v28 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0) {
              uint64_t v28 = __p[1];
            }
            if (v28)
            {
              xpc_object_t v29 = xpc_dictionary_create(0, 0, 0);
              if (v29 || (xpc_object_t v29 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8795EB0](v29) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v29);
                  xpc_object_t v30 = v29;
                }
                else
                {
                  xpc_object_t v30 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v30 = xpc_null_create();
                xpc_object_t v29 = 0;
              }
              xpc_release(v29);
              xpc_object_t v31 = xpc_null_create();
              unint64_t v32 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
              xpc_release(v32);
              xpc_release(v31);
              if (SHIBYTE(__p[2]) >= 0) {
                uint64_t v33 = __p;
              }
              else {
                uint64_t v33 = (void **)__p[0];
              }
              xpc_object_t v34 = xpc_string_create((const char *)v33);
              if (!v34) {
                xpc_object_t v34 = xpc_null_create();
              }
              xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x1E4F4C240], v34);
              xpc_object_t v35 = xpc_null_create();
              xpc_release(v34);
              xpc_release(v35);
            }
            unsigned int v42 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, &v42, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_74;
          }
        }
        else
        {
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        size_t v27 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          size_t v27 = (void **)__p[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
        _os_log_impl(&dword_1C59C6000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 1;
        if (!v2[1]) {
          goto LABEL_74;
        }
        goto LABEL_56;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  xpc_object_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)__p, v8);
    long long v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v11 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    xpc_object_t v12 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_1EBBDCA08;
  }
  xpc_object_t v13 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    unsigned int v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13) {
      goto LABEL_34;
    }
  }
  else
  {
    unsigned int v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v15) {
      goto LABEL_35;
    }
    goto LABEL_49;
  }
LABEL_34:
  if (v15)
  {
LABEL_35:
    __p[0] = (void *)MEMORY[0x1E4F143A8];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb4_ENK3__4clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_252;
    __p[4] = *((void **)v2 + 2);
    v23 = (std::__shared_weak_count *)v2[3];
    uint64_t v40 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = (void *)v2[1];
    if (v24) {
      uint64_t v24 = _Block_copy(v24);
    }
    aBlock = v24;
    uint64_t v25 = _Block_copy(__p);
    size_t v26 = v3[17];
    if (v26) {
      dispatch_retain(v26);
    }
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
    (*(void (**)(std::string::size_type, std::string *))(*(void *)v15 + 296))(v15, &__dst);
    if (__dst.__r_.__value_.__l.__size_) {
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    }
    if (__dst.__r_.__value_.__r.__words[0]) {
      _Block_release(__dst.__r_.__value_.__l.__data_);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v40) {
      std::__shared_weak_count::__release_weak(v40);
    }
  }
LABEL_49:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_76:
  size_t v36 = (std::__shared_weak_count *)v2[3];
  if (v36) {
    std::__shared_weak_count::__release_weak(v36);
  }
  __int16 v37 = (const void *)v2[1];
  if (v37) {
    _Block_release(v37);
  }
  operator delete(v2);
  uint64_t v38 = (std::__shared_weak_count *)a1[2];
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  operator delete(a1);
}

void sub_1C5AC53F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb4_ENK3__4clEv_block_invoke(void *a1, void *a2, xpc_object_t *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    xpc_object_t v18 = v7;
    if (v7)
    {
      xpc_object_t v8 = v7;
      if (a1[4])
      {
        xpc_object_t v9 = xpc_null_create();
        xpc_object_t object = v9;
        uint64_t v10 = MEMORY[0x1C8795EB0](*a2);
        uint64_t v11 = MEMORY[0x1E4F145D8];
        if (v10 == MEMORY[0x1E4F145D8])
        {
          xpc_object_t v12 = *a3;
          if (v12 && MEMORY[0x1C8795EB0](v12) == MEMORY[0x1E4F14590]) {
            xpc_retain(v12);
          }
          else {
            xpc_object_t v12 = xpc_null_create();
          }
          xpc_object_t v13 = xpc_null_create();
          xpc_object_t object = v12;
          xpc_release(v9);
          xpc_release(v13);
        }
        if (MEMORY[0x1C8795EB0](*a2) == v11) {
          unsigned int v14 = 0;
        }
        else {
          unsigned int v14 = -534716416;
        }
        unsigned int v15 = v14;
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, &v15, &object);
        xpc_release(object);
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_1C5AC5780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  xpc_release(v11);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb5_E3__5EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void **)*a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    uint64_t v4 = (const void *)*MEMORY[0x1E4F4D158];
    size_t v5 = strlen((const char *)*MEMORY[0x1E4F4D158]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        xpc_object_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        xpc_object_t v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        __p[2] = (void *)v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 1;
            if (!v2[1])
            {
LABEL_74:
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              goto LABEL_76;
            }
LABEL_56:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            uint64_t v28 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0) {
              uint64_t v28 = __p[1];
            }
            if (v28)
            {
              xpc_object_t v29 = xpc_dictionary_create(0, 0, 0);
              if (v29 || (xpc_object_t v29 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8795EB0](v29) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v29);
                  xpc_object_t v30 = v29;
                }
                else
                {
                  xpc_object_t v30 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v30 = xpc_null_create();
                xpc_object_t v29 = 0;
              }
              xpc_release(v29);
              xpc_object_t v31 = xpc_null_create();
              unint64_t v32 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
              xpc_release(v32);
              xpc_release(v31);
              if (SHIBYTE(__p[2]) >= 0) {
                uint64_t v33 = __p;
              }
              else {
                uint64_t v33 = (void **)__p[0];
              }
              xpc_object_t v34 = xpc_string_create((const char *)v33);
              if (!v34) {
                xpc_object_t v34 = xpc_null_create();
              }
              xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x1E4F4C240], v34);
              xpc_object_t v35 = xpc_null_create();
              xpc_release(v34);
              xpc_release(v35);
            }
            unsigned int v42 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, &v42, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_74;
          }
        }
        else
        {
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        size_t v27 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          size_t v27 = (void **)__p[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
        _os_log_impl(&dword_1C59C6000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 1;
        if (!v2[1]) {
          goto LABEL_74;
        }
        goto LABEL_56;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  xpc_object_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)__p, v8);
    long long v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v11 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    xpc_object_t v12 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_1EBBDCA08;
  }
  xpc_object_t v13 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    unsigned int v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13) {
      goto LABEL_34;
    }
  }
  else
  {
    unsigned int v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v15) {
      goto LABEL_35;
    }
    goto LABEL_49;
  }
LABEL_34:
  if (v15)
  {
LABEL_35:
    __p[0] = (void *)MEMORY[0x1E4F143A8];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb5_ENK3__5clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_255;
    __p[4] = *((void **)v2 + 2);
    v23 = (std::__shared_weak_count *)v2[3];
    uint64_t v40 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = (void *)v2[1];
    if (v24) {
      uint64_t v24 = _Block_copy(v24);
    }
    aBlock = v24;
    uint64_t v25 = _Block_copy(__p);
    size_t v26 = v3[17];
    if (v26) {
      dispatch_retain(v26);
    }
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
    (*(void (**)(std::string::size_type, std::string *))(*(void *)v15 + 232))(v15, &__dst);
    if (__dst.__r_.__value_.__l.__size_) {
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    }
    if (__dst.__r_.__value_.__r.__words[0]) {
      _Block_release(__dst.__r_.__value_.__l.__data_);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v40) {
      std::__shared_weak_count::__release_weak(v40);
    }
  }
LABEL_49:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_76:
  size_t v36 = (std::__shared_weak_count *)v2[3];
  if (v36) {
    std::__shared_weak_count::__release_weak(v36);
  }
  __int16 v37 = (const void *)v2[1];
  if (v37) {
    _Block_release(v37);
  }
  operator delete(v2);
  uint64_t v38 = (std::__shared_weak_count *)a1[2];
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  operator delete(a1);
}

void sub_1C5AC5E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb5_ENK3__5clEv_block_invoke(void *a1, void *a2, void *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (!v4) {
    return;
  }
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  long long v20 = v7;
  if (!v7) {
    return;
  }
  if (!a1[4])
  {
    long long v10 = v7;
LABEL_22:
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return;
  }
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v9 = v8;
  if (v8)
  {
    xpc_object_t xdict = v8;
  }
  else
  {
    xpc_object_t v9 = xpc_null_create();
    xpc_object_t xdict = v9;
    if (!v9)
    {
      xpc_object_t v11 = xpc_null_create();
      xpc_object_t v9 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x1C8795EB0](v9) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v9);
    goto LABEL_13;
  }
  xpc_object_t v11 = xpc_null_create();
LABEL_12:
  xpc_object_t xdict = v11;
LABEL_13:
  xpc_release(v9);
  uint64_t v12 = MEMORY[0x1C8795EB0](*a3);
  uint64_t v13 = MEMORY[0x1E4F145D8];
  if (v12 != MEMORY[0x1E4F145D8])
  {
    xpc_object_t v14 = (xpc_object_t)*a3;
    if (v14) {
      xpc_retain(v14);
    }
    else {
      xpc_object_t v14 = xpc_null_create();
    }
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4D318], v14);
    xpc_object_t v15 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v15);
  }
  if (MEMORY[0x1C8795EB0](*a2) == v13) {
    unsigned int v16 = 0;
  }
  else {
    unsigned int v16 = -534716416;
  }
  unsigned int v17 = v16;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, &v17, &xdict);
  xpc_release(xdict);
  long long v10 = v20;
  if (v20) {
    goto LABEL_22;
  }
}

void sub_1C5AC6254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11)
{
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb6_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void **)*a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(object, 170, 24);
    uint64_t v4 = (const void *)*MEMORY[0x1E4F4D0E8];
    size_t v5 = strlen((const char *)*MEMORY[0x1E4F4D0E8]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        xpc_object_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        xpc_object_t v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        object[2] = (xpc_object_t)v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)xpc_object_t object = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 2;
            if (!v2[2])
            {
LABEL_87:
              if (SHIBYTE(object[2]) < 0) {
                operator delete(object[0]);
              }
              goto LABEL_89;
            }
LABEL_41:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            xpc_object_t v26 = (xpc_object_t)HIBYTE(object[2]);
            if (SHIBYTE(object[2]) < 0) {
              xpc_object_t v26 = object[1];
            }
            if (v26)
            {
              xpc_object_t v27 = xpc_dictionary_create(0, 0, 0);
              if (v27 || (xpc_object_t v27 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8795EB0](v27) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v27);
                  xpc_object_t v28 = v27;
                }
                else
                {
                  xpc_object_t v28 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v28 = xpc_null_create();
                xpc_object_t v27 = 0;
              }
              xpc_release(v27);
              xpc_object_t v39 = xpc_null_create();
              uint64_t v40 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
              xpc_release(v40);
              xpc_release(v39);
              if (SHIBYTE(object[2]) >= 0) {
                uint64_t v41 = object;
              }
              else {
                uint64_t v41 = (xpc_object_t *)object[0];
              }
              xpc_object_t v42 = xpc_string_create((const char *)v41);
              if (!v42) {
                xpc_object_t v42 = xpc_null_create();
              }
              xpc_dictionary_set_value(v28, (const char *)*MEMORY[0x1E4F4C240], v42);
              xpc_object_t v43 = xpc_null_create();
              xpc_release(v42);
              xpc_release(v43);
            }
            LODWORD(v52) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, (unsigned int *)&v52, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_87;
          }
        }
        else
        {
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        uint64_t v25 = object;
        if (SHIBYTE(object[2]) < 0) {
          uint64_t v25 = (xpc_object_t *)object[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v25;
        _os_log_impl(&dword_1C59C6000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 2;
        if (!v2[2]) {
          goto LABEL_87;
        }
        goto LABEL_41;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  xpc_object_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)object, v8);
    long long v10 = *(_OWORD *)object;
    object[0] = 0;
    object[1] = 0;
    xpc_object_t v11 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = (std::__shared_weak_count *)object[1];
    if (object[1] && !atomic_fetch_add((atomic_ullong *volatile)object[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_1EBBDCA08;
  }
  uint64_t v13 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    xpc_object_t v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13) {
      goto LABEL_34;
    }
  }
  else
  {
    xpc_object_t v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v15) {
      goto LABEL_35;
    }
LABEL_49:
    xpc_object_t v29 = v3[11];
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      LOWORD(object[0]) = 0;
      _os_log_error_impl(&dword_1C59C6000, v29, OS_LOG_TYPE_ERROR, "No radio driver", (uint8_t *)object, 2u);
    }
    xpc_object_t v30 = xpc_null_create();
    uint64_t v31 = v2[2];
    object[0] = v30;
    xpc_object_t v32 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v31 + 16))(v31, 3760250880, object);
    xpc_release(object[0]);
    xpc_release(v32);
    goto LABEL_75;
  }
LABEL_34:
  if (!v15) {
    goto LABEL_49;
  }
LABEL_35:
  v23 = (void *)v2[1];
  xpc_object_t v50 = v23;
  if (v23) {
    xpc_retain(v23);
  }
  else {
    xpc_object_t v50 = xpc_null_create();
  }
  xpc::bridge((uint64_t *)&cf, (xpc *)&v50, v24);
  CFTypeRef v33 = cf;
  if (cf && (CFTypeID v34 = CFGetTypeID(cf), v34 == CFDictionaryGetTypeID()))
  {
    CFTypeRef v52 = v33;
    CFRetain(v33);
  }
  else
  {
    CFTypeRef v52 = 0;
  }
  object[0] = (xpc_object_t)MEMORY[0x1E4F143A8];
  object[1] = (xpc_object_t)1174405120;
  object[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb6_ENK3__6clEv_block_invoke;
  object[3] = &__block_descriptor_tmp_258;
  object[4] = v3;
  object[5] = *((xpc_object_t *)v2 + 3);
  xpc_object_t v35 = (std::__shared_weak_count *)v2[4];
  size_t v48 = v35;
  if (v35) {
    atomic_fetch_add_explicit(&v35->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  size_t v36 = (void *)v2[2];
  if (v36) {
    size_t v36 = _Block_copy(v36);
  }
  aBlock = v36;
  __int16 v37 = _Block_copy(object);
  uint64_t v38 = v3[17];
  if (v38) {
    dispatch_retain(v38);
  }
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v38;
  (*(void (**)(std::string::size_type, CFTypeRef *, std::string *))(*(void *)v15 + 248))(v15, &v52, &__dst);
  if (__dst.__r_.__value_.__l.__size_) {
    dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
  }
  if (__dst.__r_.__value_.__r.__words[0]) {
    _Block_release(__dst.__r_.__value_.__l.__data_);
  }
  if (v52) {
    CFRelease(v52);
  }
  if (cf) {
    CFRelease(cf);
  }
  xpc_release(v50);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v48) {
    std::__shared_weak_count::__release_weak(v48);
  }
LABEL_75:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_89:
  uint64_t v44 = (std::__shared_weak_count *)v2[4];
  if (v44) {
    std::__shared_weak_count::__release_weak(v44);
  }
  CFAllocatorRef v45 = (const void *)v2[2];
  if (v45) {
    _Block_release(v45);
  }
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  pid_t v46 = (std::__shared_weak_count *)a1[2];
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
  operator delete(a1);
}

void sub_1C5AC6A28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, uint64_t a20,xpc_object_t a21,CFTypeRef a22,CFTypeRef cf,xpc_object_t aBlock,dispatch_object_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb6_ENK3__6clEv_block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    std::string::size_type v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[5])
      {
        uint64_t v8 = *a2;
        if (*a2) {
          uint64_t v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v9 = 0;
        }
        if (v9)
        {
          long long v10 = *(NSObject **)(v5 + 88);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)xpc_object_t object = 138412290;
            *(void *)&object[4] = v8;
            _os_log_error_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
            uint64_t v8 = *a2;
          }
        }
        if (v8) {
          xpc_object_t v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          xpc_object_t v11 = 0;
        }
        if (v11) {
          uint64_t v12 = 3760250880;
        }
        else {
          uint64_t v12 = 0;
        }
        xpc_object_t v13 = xpc_null_create();
        uint64_t v14 = a1[7];
        *(void *)xpc_object_t object = v13;
        xpc_object_t v15 = xpc_null_create();
        (*(void (**)(uint64_t, uint64_t, unsigned char *))(v14 + 16))(v14, v12, object);
        xpc_release(*(xpc_object_t *)object);
        xpc_release(v15);
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1C5AC6E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb7_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t **a1)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)**a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(&object, 170, sizeof(object));
    uint64_t v4 = (const void *)*MEMORY[0x1E4F4D0E8];
    size_t v5 = strlen((const char *)*MEMORY[0x1E4F4D0E8]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        xpc_object_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        xpc_object_t v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        object.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)&object.__r_.__value_.__l.__data_ = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 2;
            if (!v2[2])
            {
LABEL_104:
              if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(object.__r_.__value_.__l.__data_);
              }
              goto LABEL_106;
            }
LABEL_41:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            std::string::size_type size = HIBYTE(object.__r_.__value_.__r.__words[2]);
            if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type size = object.__r_.__value_.__l.__size_;
            }
            if (size)
            {
              xpc_object_t v26 = xpc_dictionary_create(0, 0, 0);
              if (v26 || (xpc_object_t v26 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8795EB0](v26) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v26);
                  xpc_object_t v27 = v26;
                }
                else
                {
                  xpc_object_t v27 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v27 = xpc_null_create();
                xpc_object_t v26 = 0;
              }
              xpc_release(v26);
              xpc_object_t v50 = xpc_null_create();
              uint64_t v51 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
              xpc_release(v51);
              xpc_release(v50);
              if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                p_std::string object = &object;
              }
              else {
                p_std::string object = (std::string *)object.__r_.__value_.__r.__words[0];
              }
              xpc_object_t v53 = xpc_string_create((const char *)p_object);
              if (!v53) {
                xpc_object_t v53 = xpc_null_create();
              }
              xpc_dictionary_set_value(v27, (const char *)*MEMORY[0x1E4F4C240], v53);
              xpc_object_t v54 = xpc_null_create();
              xpc_release(v53);
              xpc_release(v54);
            }
            LODWORD(v66) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, (unsigned int *)&v66, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_104;
          }
        }
        else
        {
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        uint64_t v24 = &object;
        if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v24 = (std::string *)object.__r_.__value_.__r.__words[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
        _os_log_impl(&dword_1C59C6000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 2;
        if (!v2[2]) {
          goto LABEL_104;
        }
        goto LABEL_41;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  uint64_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&object, v8);
    long long v10 = *(_OWORD *)&object.__r_.__value_.__l.__data_;
    *(_OWORD *)&object.__r_.__value_.__l.__data_ = 0uLL;
    xpc_object_t v11 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = (std::__shared_weak_count *)object.__r_.__value_.__l.__size_;
    if (object.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(object.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_1EBBDCA08;
  }
  xpc_object_t v13 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    uint64_t v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13)
    {
LABEL_34:
      if (v15) {
        goto LABEL_35;
      }
LABEL_49:
      xpc_object_t v28 = v3[11];
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        LOWORD(object.__r_.__value_.__l.__data_) = 0;
        _os_log_error_impl(&dword_1C59C6000, v28, OS_LOG_TYPE_ERROR, "No radio driver", (uint8_t *)&object, 2u);
      }
      xpc_object_t v29 = xpc_null_create();
      uint64_t v30 = v2[2];
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
      xpc_object_t v31 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, std::string *))(v30 + 16))(v30, 3760250880, &object);
      xpc_release(object.__r_.__value_.__l.__data_);
      xpc_release(v31);
      goto LABEL_93;
    }
  }
  else
  {
    uint64_t v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_34;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (!v15) {
    goto LABEL_49;
  }
LABEL_35:
  xpc_object_t value = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E4F4CC60]);
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  int v32 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object.__r_.__value_.__l.__data_);
  CFTypeRef v33 = v3[11];
  BOOL v34 = os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
  if (v32 == 1)
  {
    if (v34)
    {
      LOWORD(object.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1C59C6000, v33, OS_LOG_TYPE_DEFAULT, "#I RF Self Test in FTM requested", (uint8_t *)&object, 2u);
    }
    goto LABEL_63;
  }
  if (v34)
  {
    LOWORD(object.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C59C6000, v33, OS_LOG_TYPE_DEFAULT, "#I RF Self Test in AST2 mode requested", (uint8_t *)&object, 2u);
  }
  memset(&object, 0, sizeof(object));
  ctu::cf::assign();
  std::string __dst = object;
  if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    xpc_object_t v35 = &__dst;
  }
  else {
    xpc_object_t v35 = (std::string *)object.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v36 = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)v35);
  xpc_object_t v37 = v36;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (v37) {
      goto LABEL_63;
    }
LABEL_90:
    pid_t v46 = v3[11];
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      LOWORD(object.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_1C59C6000, v46, OS_LOG_TYPE_ERROR, "Ticket was not provided", (uint8_t *)&object, 2u);
    }
    xpc_object_t v47 = xpc_null_create();
    uint64_t v48 = v2[2];
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
    xpc_object_t v49 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, std::string *))(v48 + 16))(v48, 3760250882, &object);
    xpc_release(object.__r_.__value_.__l.__data_);
    xpc_release(v49);
    goto LABEL_93;
  }
  if (!v36) {
    goto LABEL_90;
  }
LABEL_63:
  uint64_t v38 = (void *)v2[1];
  xpc_object_t v64 = v38;
  if (v38) {
    xpc_retain(v38);
  }
  else {
    xpc_object_t v64 = xpc_null_create();
  }
  xpc::bridge((uint64_t *)&cf, (xpc *)&v64, v39);
  CFTypeRef v40 = cf;
  if (cf && (CFTypeID v41 = CFGetTypeID(cf), v41 == CFDictionaryGetTypeID()))
  {
    CFTypeRef v66 = v40;
    CFRetain(v40);
  }
  else
  {
    CFTypeRef v66 = 0;
  }
  object.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
  object.__r_.__value_.__l.__size_ = 1174405120;
  object.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb7_ENK3__7clEv_block_invoke;
  uint64_t v59 = &__block_descriptor_tmp_261;
  uint64_t v60 = v3;
  uint64_t v61 = v2[3];
  xpc_object_t v42 = (std::__shared_weak_count *)v2[4];
  CFMutableDictionaryRef v62 = v42;
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v43 = (void *)v2[2];
  if (v43) {
    xpc_object_t v43 = _Block_copy(v43);
  }
  aBlock = v43;
  uint64_t v44 = _Block_copy(&object);
  CFAllocatorRef v45 = v3[17];
  if (v45) {
    dispatch_retain(v45);
  }
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v45;
  (*(void (**)(std::string::size_type, CFTypeRef *, std::string *))(*(void *)v15 + 256))(v15, &v66, &__dst);
  if (__dst.__r_.__value_.__l.__size_) {
    dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
  }
  if (__dst.__r_.__value_.__r.__words[0]) {
    _Block_release(__dst.__r_.__value_.__l.__data_);
  }
  if (v66) {
    CFRelease(v66);
  }
  if (cf) {
    CFRelease(cf);
  }
  xpc_release(v64);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v62) {
    std::__shared_weak_count::__release_weak(v62);
  }
LABEL_93:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_106:
  CFAllocatorRef v55 = (std::__shared_weak_count *)v2[4];
  if (v55) {
    std::__shared_weak_count::__release_weak(v55);
  }
  CFNumberRef v56 = (const void *)v2[2];
  if (v56) {
    _Block_release(v56);
  }
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  CFStringRef v57 = (std::__shared_weak_count *)a1[2];
  if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
    std::__shared_weak_count::__release_weak(v57);
  }
  operator delete(a1);
}

void sub_1C5AC7814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, uint64_t a20,xpc_object_t a21,CFTypeRef a22,CFTypeRef cf,void *aBlock,dispatch_object_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb7_ENK3__7clEv_block_invoke(void *a1, uint64_t *a2, ctu **a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    xpc_object_t v18 = v8;
    if (v8)
    {
      long long v10 = v8;
      if (a1[5])
      {
        uint64_t v11 = *a2;
        if (*a2) {
          uint64_t v12 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v12 = 0;
        }
        if (v12)
        {
          xpc_object_t v13 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string object = 138412290;
            *(void *)&object[4] = v11;
            _os_log_error_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
            uint64_t v11 = *a2;
          }
        }
        if (v11) {
          uint64_t v14 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v14 = 0;
        }
        if (v14) {
          unsigned int v15 = -534716416;
        }
        else {
          unsigned int v15 = 0;
        }
        unsigned int v16 = v15;
        ctu::cf_to_xpc((uint64_t *)object, *a3, v9);
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::object>(a1 + 7, &v16, (void **)object);
        xpc_release(*(xpc_object_t *)object);
      }
      if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_1C5AC7CD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, xpc_object_t object)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb8_E3__8EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t **a1)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)**a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(&object, 170, sizeof(object));
    uint64_t v4 = (const void *)*MEMORY[0x1E4F4D1B0];
    size_t v5 = strlen((const char *)*MEMORY[0x1E4F4D1B0]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        xpc_object_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        xpc_object_t v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        object.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)&object.__r_.__value_.__l.__data_ = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 2;
            if (!v2[2])
            {
LABEL_96:
              if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(object.__r_.__value_.__l.__data_);
              }
              goto LABEL_98;
            }
LABEL_46:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            std::string::size_type size = HIBYTE(object.__r_.__value_.__r.__words[2]);
            if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type size = object.__r_.__value_.__l.__size_;
            }
            if (size)
            {
              xpc_object_t v30 = xpc_dictionary_create(0, 0, 0);
              if (v30 || (xpc_object_t v30 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8795EB0](v30) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v30);
                  xpc_object_t v31 = v30;
                }
                else
                {
                  xpc_object_t v31 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v31 = xpc_null_create();
                xpc_object_t v30 = 0;
              }
              xpc_release(v30);
              xpc_object_t v46 = xpc_null_create();
              xpc_object_t v47 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
              xpc_release(v47);
              xpc_release(v46);
              if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                p_std::string object = &object;
              }
              else {
                p_std::string object = (std::string *)object.__r_.__value_.__r.__words[0];
              }
              xpc_object_t v49 = xpc_string_create((const char *)p_object);
              if (!v49) {
                xpc_object_t v49 = xpc_null_create();
              }
              xpc_dictionary_set_value(v31, (const char *)*MEMORY[0x1E4F4C240], v49);
              xpc_object_t v50 = xpc_null_create();
              xpc_release(v49);
              xpc_release(v50);
            }
            LODWORD(v62) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, (unsigned int *)&v62, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_96;
          }
        }
        else
        {
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        xpc_object_t v28 = &object;
        if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          xpc_object_t v28 = (std::string *)object.__r_.__value_.__r.__words[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v28;
        _os_log_impl(&dword_1C59C6000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 2;
        if (!v2[2]) {
          goto LABEL_96;
        }
        goto LABEL_46;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  uint64_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&object, v8);
    long long v10 = *(_OWORD *)&object.__r_.__value_.__l.__data_;
    *(_OWORD *)&object.__r_.__value_.__l.__data_ = 0uLL;
    uint64_t v11 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = (std::__shared_weak_count *)object.__r_.__value_.__l.__size_;
    if (object.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(object.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_1EBBDCA08;
  }
  xpc_object_t v13 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    uint64_t v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13)
    {
LABEL_34:
      if (v15) {
        goto LABEL_35;
      }
LABEL_54:
      int v32 = v3[11];
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        LOWORD(object.__r_.__value_.__l.__data_) = 0;
        _os_log_error_impl(&dword_1C59C6000, v32, OS_LOG_TYPE_ERROR, "No radio driver", (uint8_t *)&object, 2u);
      }
      xpc_object_t v33 = xpc_null_create();
      uint64_t v34 = v2[2];
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
      xpc_object_t v35 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, std::string *))(v34 + 16))(v34, 3760250880, &object);
      xpc_release(object.__r_.__value_.__l.__data_);
      xpc_release(v35);
      goto LABEL_84;
    }
  }
  else
  {
    uint64_t v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_34;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (!v15) {
    goto LABEL_54;
  }
LABEL_35:
  memset(&object, 0, sizeof(object));
  ctu::cf::assign();
  std::string __dst = object;
  if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v23 = &__dst;
  }
  else {
    v23 = (std::string *)object.__r_.__value_.__r.__words[0];
  }
  xpc_object_t value = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)v23);
  xpc_object_t v25 = value;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (v25) {
      goto LABEL_40;
    }
LABEL_58:
    xpc_object_t v36 = v3[11];
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      LOWORD(object.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_1C59C6000, v36, OS_LOG_TYPE_ERROR, "Ticket was not provided", (uint8_t *)&object, 2u);
    }
    xpc_object_t v37 = xpc_null_create();
    uint64_t v38 = v2[2];
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
    xpc_object_t v39 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, std::string *))(v38 + 16))(v38, 3760250882, &object);
    xpc_release(object.__r_.__value_.__l.__data_);
    xpc_release(v39);
    goto LABEL_84;
  }
  if (!value) {
    goto LABEL_58;
  }
LABEL_40:
  xpc_object_t v26 = (void *)v2[1];
  xpc_object_t v60 = v26;
  if (v26) {
    xpc_retain(v26);
  }
  else {
    xpc_object_t v60 = xpc_null_create();
  }
  xpc::bridge((uint64_t *)&cf, (xpc *)&v60, v27);
  CFTypeRef v40 = cf;
  if (cf && (CFTypeID v41 = CFGetTypeID(cf), v41 == CFDictionaryGetTypeID()))
  {
    CFTypeRef v62 = v40;
    CFRetain(v40);
  }
  else
  {
    CFTypeRef v62 = 0;
  }
  object.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
  object.__r_.__value_.__l.__size_ = 1174405120;
  object.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb8_ENK3__8clEv_block_invoke;
  CFAllocatorRef v55 = &__block_descriptor_tmp_264;
  CFNumberRef v56 = v3;
  uint64_t v57 = v2[3];
  xpc_object_t v42 = (std::__shared_weak_count *)v2[4];
  BOOL v58 = v42;
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v43 = (void *)v2[2];
  if (v43) {
    xpc_object_t v43 = _Block_copy(v43);
  }
  aBlock = v43;
  uint64_t v44 = _Block_copy(&object);
  CFAllocatorRef v45 = v3[17];
  if (v45) {
    dispatch_retain(v45);
  }
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v45;
  (*(void (**)(std::string::size_type, CFTypeRef *, std::string *))(*(void *)v15 + 240))(v15, &v62, &__dst);
  if (__dst.__r_.__value_.__l.__size_) {
    dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
  }
  if (__dst.__r_.__value_.__r.__words[0]) {
    _Block_release(__dst.__r_.__value_.__l.__data_);
  }
  if (v62) {
    CFRelease(v62);
  }
  if (cf) {
    CFRelease(cf);
  }
  xpc_release(v60);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v58) {
    std::__shared_weak_count::__release_weak(v58);
  }
LABEL_84:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_98:
  uint64_t v51 = (std::__shared_weak_count *)v2[4];
  if (v51) {
    std::__shared_weak_count::__release_weak(v51);
  }
  CFTypeRef v52 = (const void *)v2[2];
  if (v52) {
    _Block_release(v52);
  }
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  xpc_object_t v53 = (std::__shared_weak_count *)a1[2];
  if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
  }
  operator delete(a1);
}

void sub_1C5AC859C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, uint64_t a20,xpc_object_t a21,CFTypeRef a22,CFTypeRef cf,void *aBlock,dispatch_object_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb8_ENK3__8clEv_block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    std::string::size_type v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[5])
      {
        uint64_t v8 = *a2;
        if (*a2) {
          uint64_t v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v9 = 0;
        }
        if (v9)
        {
          long long v10 = *(NSObject **)(v5 + 88);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string object = 138412290;
            *(void *)&object[4] = v8;
            _os_log_error_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
            uint64_t v8 = *a2;
          }
        }
        if (v8) {
          uint64_t v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v11 = 0;
        }
        if (v11) {
          uint64_t v12 = 3760250880;
        }
        else {
          uint64_t v12 = 0;
        }
        xpc_object_t v13 = xpc_null_create();
        uint64_t v14 = a1[7];
        *(void *)std::string object = v13;
        xpc_object_t v15 = xpc_null_create();
        (*(void (**)(uint64_t, uint64_t, unsigned char *))(v14 + 16))(v14, v12, object);
        xpc_release(*(xpc_object_t *)object);
        xpc_release(v15);
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1C5AC8A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb9_E3__9EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t **a1)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)**a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(object, 170, 24);
    uint64_t v4 = (const void *)*MEMORY[0x1E4F4CA00];
    size_t v5 = strlen((const char *)*MEMORY[0x1E4F4CA00]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        xpc_object_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        xpc_object_t v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        object[2] = (xpc_object_t)v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string object = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 1;
            if (!v2[1])
            {
LABEL_61:
              if (SHIBYTE(object[2]) < 0) {
                operator delete(object[0]);
              }
              goto LABEL_63;
            }
LABEL_40:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            xpc_object_t v27 = (xpc_object_t)HIBYTE(object[2]);
            if (SHIBYTE(object[2]) < 0) {
              xpc_object_t v27 = object[1];
            }
            if (v27)
            {
              xpc_object_t v28 = xpc_dictionary_create(0, 0, 0);
              if (v28 || (xpc_object_t v28 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8795EB0](v28) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v28);
                  xpc_object_t v29 = v28;
                }
                else
                {
                  xpc_object_t v29 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v29 = xpc_null_create();
                xpc_object_t v28 = 0;
              }
              xpc_release(v28);
              xpc_object_t v33 = xpc_null_create();
              uint64_t v34 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
              xpc_release(v34);
              xpc_release(v33);
              if (SHIBYTE(object[2]) >= 0) {
                xpc_object_t v35 = object;
              }
              else {
                xpc_object_t v35 = (xpc_object_t *)object[0];
              }
              xpc_object_t v36 = xpc_string_create((const char *)v35);
              if (!v36) {
                xpc_object_t v36 = xpc_null_create();
              }
              xpc_dictionary_set_value(v29, (const char *)*MEMORY[0x1E4F4C240], v36);
              xpc_object_t v37 = xpc_null_create();
              xpc_release(v36);
              xpc_release(v37);
            }
            unsigned int v41 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, &v41, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_61;
          }
        }
        else
        {
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        xpc_object_t v26 = object;
        if (SHIBYTE(object[2]) < 0) {
          xpc_object_t v26 = (xpc_object_t *)object[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v26;
        _os_log_impl(&dword_1C59C6000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 1;
        if (!v2[1]) {
          goto LABEL_61;
        }
        goto LABEL_40;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  uint64_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)object, v8);
    long long v10 = *(_OWORD *)object;
    object[0] = 0;
    object[1] = 0;
    uint64_t v11 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = (std::__shared_weak_count *)object[1];
    if (object[1] && !atomic_fetch_add((atomic_ullong *volatile)object[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_1EBBDCA08;
  }
  xpc_object_t v13 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    uint64_t v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13) {
      goto LABEL_34;
    }
  }
  else
  {
    uint64_t v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v15) {
      goto LABEL_35;
    }
LABEL_48:
    xpc_object_t v30 = xpc_null_create();
    uint64_t v31 = v2[1];
    object[0] = v30;
    xpc_object_t v32 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v31 + 16))(v31, 3760250880, object);
    xpc_release(object[0]);
    xpc_release(v32);
    goto LABEL_49;
  }
LABEL_34:
  if (!v15) {
    goto LABEL_48;
  }
LABEL_35:
  (*(void (**)(std::string::size_type, void))(*(void *)v15 + 312))(v15, 0);
  (*(void (**)(std::string::size_type, uint64_t))(*(void *)v15 + 312))(v15, 1);
  (*(void (**)(std::string::size_type))(*(void *)v15 + 320))(v15);
  xpc_object_t v23 = xpc_null_create();
  uint64_t v24 = v2[1];
  object[0] = v23;
  xpc_object_t v25 = xpc_null_create();
  (*(void (**)(uint64_t, void, xpc_object_t *))(v24 + 16))(v24, 0, object);
  xpc_release(object[0]);
  xpc_release(v25);
LABEL_49:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_63:
  uint64_t v38 = (std::__shared_weak_count *)v2[3];
  if (v38) {
    std::__shared_weak_count::__release_weak(v38);
  }
  xpc_object_t v39 = (const void *)v2[1];
  if (v39) {
    _Block_release(v39);
  }
  operator delete(v2);
  CFTypeRef v40 = (std::__shared_weak_count *)a1[2];
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  operator delete(a1);
}

void sub_1C5AC9158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, xpc_object_t __p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb10_E4__10EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t **a1)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)**a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(aBlock, 170, sizeof(aBlock));
    uint64_t v4 = (const void *)*MEMORY[0x1E4F4C730];
    size_t v5 = strlen((const char *)*MEMORY[0x1E4F4C730]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        xpc_object_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        xpc_object_t v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        *(void *)&aBlock[16] = *((void *)&v19->__r_.__value_.__l + 2);
        *(_OWORD *)aBlock = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 1;
            if (!v2[1])
            {
LABEL_85:
              if ((aBlock[23] & 0x80000000) != 0) {
                operator delete(*(void **)aBlock);
              }
              goto LABEL_87;
            }
LABEL_47:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            uint64_t v30 = aBlock[23];
            if (aBlock[23] < 0) {
              uint64_t v30 = *(void *)&aBlock[8];
            }
            if (v30)
            {
              xpc_object_t v31 = xpc_dictionary_create(0, 0, 0);
              if (v31 || (xpc_object_t v31 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8795EB0](v31) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v31);
                  xpc_object_t v32 = v31;
                }
                else
                {
                  xpc_object_t v32 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v32 = xpc_null_create();
                xpc_object_t v31 = 0;
              }
              xpc_release(v31);
              xpc_object_t v38 = xpc_null_create();
              xpc_object_t v39 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
              xpc_release(v39);
              xpc_release(v38);
              if (aBlock[23] >= 0) {
                CFTypeRef v40 = aBlock;
              }
              else {
                CFTypeRef v40 = *(const char **)aBlock;
              }
              xpc_object_t v41 = xpc_string_create(v40);
              if (!v41) {
                xpc_object_t v41 = xpc_null_create();
              }
              xpc_dictionary_set_value(v32, (const char *)*MEMORY[0x1E4F4C240], v41);
              xpc_object_t v42 = xpc_null_create();
              xpc_release(v41);
              xpc_release(v42);
            }
            LODWORD(v48) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, (unsigned int *)&v48, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_85;
          }
        }
        else
        {
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        xpc_object_t v29 = aBlock;
        if (aBlock[23] < 0) {
          xpc_object_t v29 = *(unsigned char **)aBlock;
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
        _os_log_impl(&dword_1C59C6000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 1;
        if (!v2[1]) {
          goto LABEL_85;
        }
        goto LABEL_47;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  uint64_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)aBlock, v8);
    long long v10 = *(_OWORD *)aBlock;
    *(_OWORD *)aBlock = 0uLL;
    uint64_t v11 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = *(std::__shared_weak_count **)&aBlock[8];
    if (*(void *)&aBlock[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&aBlock[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_1EBBDCA08;
  }
  xpc_object_t v13 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    uint64_t v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13) {
      goto LABEL_34;
    }
  }
  else
  {
    uint64_t v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v15) {
      goto LABEL_35;
    }
    goto LABEL_55;
  }
LABEL_34:
  if (v15)
  {
LABEL_35:
    *(void *)aBlock = MEMORY[0x1E4F143A8];
    *(void *)&aBlock[8] = 1174405120;
    *(void *)&aBlock[16] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb10_ENK4__10clEv_block_invoke;
    xpc_object_t v50 = &__block_descriptor_tmp_267;
    uint64_t v51 = v3;
    uint64_t v52 = v2[2];
    xpc_object_t v23 = (std::__shared_weak_count *)v2[3];
    xpc_object_t v53 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = (void *)v2[1];
    if (v24) {
      uint64_t v24 = _Block_copy(v24);
    }
    xpc_object_t v54 = v24;
    xpc_object_t v25 = _Block_copy(aBlock);
    xpc_object_t v26 = v3[17];
    if (v26) {
      dispatch_retain(v26);
    }
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
    xpc_object_t v27 = (void *)v2[4];
    xpc_object_t object = v27;
    if (v27) {
      xpc_retain(v27);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    xpc::bridge((uint64_t *)&cf, (xpc *)&object, v28);
    CFTypeRef v36 = cf;
    if (cf && (CFTypeID v37 = CFGetTypeID(cf), v37 == CFDictionaryGetTypeID()))
    {
      CFTypeRef v48 = v36;
      CFRetain(v36);
    }
    else
    {
      CFTypeRef v48 = 0;
    }
    (*(void (**)(std::string::size_type, std::string *, CFTypeRef *))(*(void *)v15 + 344))(v15, &__dst, &v48);
    if (v48) {
      CFRelease(v48);
    }
    if (cf) {
      CFRelease(cf);
    }
    xpc_release(object);
    if (__dst.__r_.__value_.__l.__size_) {
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    }
    if (__dst.__r_.__value_.__r.__words[0]) {
      _Block_release(__dst.__r_.__value_.__l.__data_);
    }
    if (v54) {
      _Block_release(v54);
    }
    if (v53) {
      std::__shared_weak_count::__release_weak(v53);
    }
    goto LABEL_73;
  }
LABEL_55:
  xpc_object_t v33 = xpc_null_create();
  uint64_t v34 = v2[1];
  *(void *)aBlock = v33;
  xpc_object_t v35 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, unsigned char *))(v34 + 16))(v34, 3760250880, aBlock);
  xpc_release(*(xpc_object_t *)aBlock);
  xpc_release(v35);
LABEL_73:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_87:
  xpc_release((xpc_object_t)v2[4]);
  v2[4] = 0;
  xpc_object_t v43 = (std::__shared_weak_count *)v2[3];
  if (v43) {
    std::__shared_weak_count::__release_weak(v43);
  }
  uint64_t v44 = (const void *)v2[1];
  if (v44) {
    _Block_release(v44);
  }
  operator delete(v2);
  CFAllocatorRef v45 = (std::__shared_weak_count *)a1[2];
  if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
  operator delete(a1);
}

void sub_1C5AC9AC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, CFTypeRef a11, CFTypeRef cf, xpc_object_t object, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,void *a23,xpc_object_t aBlock,dispatch_object_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb10_ENK4__10clEv_block_invoke(void *a1, uint64_t *a2, ctu **a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    unsigned int v21 = v8;
    if (v8)
    {
      long long v10 = v8;
      if (a1[5])
      {
        uint64_t v11 = *a2;
        if (*a2) {
          uint64_t v12 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v12 = 0;
        }
        if (v12)
        {
          xpc_object_t v13 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)xpc_object_t object = 138412290;
            *(void *)&xpc_object_t object[4] = v11;
            _os_log_error_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
          }
        }
        else
        {
          uint64_t v16 = *a3;
          if (*a3) {
            uint64_t v17 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          }
          else {
            uint64_t v17 = 0;
          }
          if (v17)
          {
            xpc_object_t v18 = *(NSObject **)(v7 + 88);
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)xpc_object_t object = 138412290;
              *(void *)&xpc_object_t object[4] = v16;
              _os_log_impl(&dword_1C59C6000, v18, OS_LOG_TYPE_DEFAULT, "#I Get Antenna Port Info: %@", object, 0xCu);
            }
          }
        }
        if (*a2) {
          uint64_t v14 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v14 = 0;
        }
        if (v14) {
          unsigned int v15 = -534716416;
        }
        else {
          unsigned int v15 = 0;
        }
        unsigned int v19 = v15;
        ctu::cf_to_xpc((uint64_t *)object, *a3, v9);
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::object>(a1 + 7, &v19, (void **)object);
        xpc_release(*(xpc_object_t *)object);
      }
      if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_1C5AC9F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, xpc_object_t object)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb11_E4__11EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void **)*a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(object, 170, 24);
    uint64_t v4 = (const void *)*MEMORY[0x1E4F4C740];
    size_t v5 = strlen((const char *)*MEMORY[0x1E4F4C740]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        xpc_object_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        unsigned int v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        object[2] = (xpc_object_t)v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)xpc_object_t object = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 1;
            if (!v2[1])
            {
LABEL_85:
              if (SHIBYTE(object[2]) < 0) {
                operator delete(object[0]);
              }
              goto LABEL_87;
            }
LABEL_41:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            xpc_object_t v26 = (xpc_object_t)HIBYTE(object[2]);
            if (SHIBYTE(object[2]) < 0) {
              xpc_object_t v26 = object[1];
            }
            if (v26)
            {
              xpc_object_t v27 = xpc_dictionary_create(0, 0, 0);
              if (v27 || (xpc_object_t v27 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8795EB0](v27) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v27);
                  xpc_object_t v28 = v27;
                }
                else
                {
                  xpc_object_t v28 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v28 = xpc_null_create();
                xpc_object_t v27 = 0;
              }
              xpc_release(v27);
              xpc_object_t v38 = xpc_null_create();
              xpc_object_t v39 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
              xpc_release(v39);
              xpc_release(v38);
              if (SHIBYTE(object[2]) >= 0) {
                CFTypeRef v40 = object;
              }
              else {
                CFTypeRef v40 = (xpc_object_t *)object[0];
              }
              xpc_object_t v41 = xpc_string_create((const char *)v40);
              if (!v41) {
                xpc_object_t v41 = xpc_null_create();
              }
              xpc_dictionary_set_value(v28, (const char *)*MEMORY[0x1E4F4C240], v41);
              xpc_object_t v42 = xpc_null_create();
              xpc_release(v41);
              xpc_release(v42);
            }
            LODWORD(v51) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, (unsigned int *)&v51, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_85;
          }
        }
        else
        {
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        xpc_object_t v25 = object;
        if (SHIBYTE(object[2]) < 0) {
          xpc_object_t v25 = (xpc_object_t *)object[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v25;
        _os_log_impl(&dword_1C59C6000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 1;
        if (!v2[1]) {
          goto LABEL_85;
        }
        goto LABEL_41;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  uint64_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)object, v8);
    long long v10 = *(_OWORD *)object;
    object[0] = 0;
    object[1] = 0;
    uint64_t v11 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = (std::__shared_weak_count *)object[1];
    if (object[1] && !atomic_fetch_add((atomic_ullong *volatile)object[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_1EBBDCA08;
  }
  xpc_object_t v13 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    uint64_t v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13) {
      goto LABEL_34;
    }
  }
  else
  {
    uint64_t v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v15) {
      goto LABEL_35;
    }
    goto LABEL_49;
  }
LABEL_34:
  if (v15)
  {
LABEL_35:
    uint64_t v23 = (void *)v2[4];
    xpc_object_t v49 = v23;
    if (v23) {
      xpc_retain(v23);
    }
    else {
      xpc_object_t v49 = xpc_null_create();
    }
    xpc::bridge((uint64_t *)&cf, (xpc *)&v49, v24);
    CFTypeRef v32 = cf;
    if (cf && (CFTypeID v33 = CFGetTypeID(cf), v33 == CFDictionaryGetTypeID()))
    {
      CFTypeRef v51 = v32;
      CFRetain(v32);
    }
    else
    {
      CFTypeRef v51 = 0;
    }
    object[0] = (xpc_object_t)MEMORY[0x1E4F143A8];
    object[1] = (xpc_object_t)1174405120;
    object[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb11_ENK4__11clEv_block_invoke;
    object[3] = &__block_descriptor_tmp_270;
    xpc_object_t object[4] = v3;
    object[5] = *((xpc_object_t *)v2 + 2);
    uint64_t v34 = (std::__shared_weak_count *)v2[3];
    xpc_object_t v47 = v34;
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    xpc_object_t v35 = (void *)v2[1];
    if (v35) {
      xpc_object_t v35 = _Block_copy(v35);
    }
    aBlock = v35;
    CFTypeRef v36 = _Block_copy(object);
    CFTypeID v37 = v3[17];
    if (v37) {
      dispatch_retain(v37);
    }
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v37;
    (*(void (**)(std::string::size_type, CFTypeRef *, std::string *))(*(void *)v15 + 352))(v15, &v51, &__dst);
    if (__dst.__r_.__value_.__l.__size_) {
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    }
    if (__dst.__r_.__value_.__r.__words[0]) {
      _Block_release(__dst.__r_.__value_.__l.__data_);
    }
    if (v51) {
      CFRelease(v51);
    }
    if (cf) {
      CFRelease(cf);
    }
    xpc_release(v49);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v47) {
      std::__shared_weak_count::__release_weak(v47);
    }
    goto LABEL_73;
  }
LABEL_49:
  xpc_object_t v29 = xpc_null_create();
  uint64_t v30 = v2[1];
  object[0] = v29;
  xpc_object_t v31 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v30 + 16))(v30, 3760250880, object);
  xpc_release(object[0]);
  xpc_release(v31);
LABEL_73:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_87:
  xpc_release((xpc_object_t)v2[4]);
  v2[4] = 0;
  xpc_object_t v43 = (std::__shared_weak_count *)v2[3];
  if (v43) {
    std::__shared_weak_count::__release_weak(v43);
  }
  uint64_t v44 = (const void *)v2[1];
  if (v44) {
    _Block_release(v44);
  }
  operator delete(v2);
  CFAllocatorRef v45 = (std::__shared_weak_count *)a1[2];
  if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
  operator delete(a1);
}

void sub_1C5ACA71C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, uint64_t a20,xpc_object_t a21,CFTypeRef a22,CFTypeRef cf,xpc_object_t aBlock,dispatch_object_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb11_ENK4__11clEv_block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    std::string::size_type v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[5])
      {
        uint64_t v8 = *a2;
        if (*a2) {
          uint64_t v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v9 = 0;
        }
        if (v9)
        {
          long long v10 = *(NSObject **)(v5 + 88);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)xpc_object_t object = 138412290;
            *(void *)&xpc_object_t object[4] = v8;
            _os_log_error_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
            uint64_t v8 = *a2;
          }
        }
        if (v8) {
          uint64_t v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v11 = 0;
        }
        if (v11) {
          uint64_t v12 = 3760250880;
        }
        else {
          uint64_t v12 = 0;
        }
        xpc_object_t v13 = xpc_null_create();
        uint64_t v14 = a1[7];
        *(void *)xpc_object_t object = v13;
        xpc_object_t v15 = xpc_null_create();
        (*(void (**)(uint64_t, uint64_t, unsigned char *))(v14 + 16))(v14, v12, object);
        xpc_release(*(xpc_object_t *)object);
        xpc_release(v15);
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1C5ACAB70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb12_E4__12EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void **)*a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(object, 170, 24);
    uint64_t v4 = (const void *)*MEMORY[0x1E4F4C1C0];
    size_t v5 = strlen((const char *)*MEMORY[0x1E4F4C1C0]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        xpc_object_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        unsigned int v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        object[2] = (xpc_object_t)v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)xpc_object_t object = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 1;
            if (!v2[1])
            {
LABEL_85:
              if (SHIBYTE(object[2]) < 0) {
                operator delete(object[0]);
              }
              goto LABEL_87;
            }
LABEL_41:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            xpc_object_t v26 = (xpc_object_t)HIBYTE(object[2]);
            if (SHIBYTE(object[2]) < 0) {
              xpc_object_t v26 = object[1];
            }
            if (v26)
            {
              xpc_object_t v27 = xpc_dictionary_create(0, 0, 0);
              if (v27 || (xpc_object_t v27 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8795EB0](v27) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v27);
                  xpc_object_t v28 = v27;
                }
                else
                {
                  xpc_object_t v28 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v28 = xpc_null_create();
                xpc_object_t v27 = 0;
              }
              xpc_release(v27);
              xpc_object_t v38 = xpc_null_create();
              xpc_object_t v39 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
              xpc_release(v39);
              xpc_release(v38);
              if (SHIBYTE(object[2]) >= 0) {
                CFTypeRef v40 = object;
              }
              else {
                CFTypeRef v40 = (xpc_object_t *)object[0];
              }
              xpc_object_t v41 = xpc_string_create((const char *)v40);
              if (!v41) {
                xpc_object_t v41 = xpc_null_create();
              }
              xpc_dictionary_set_value(v28, (const char *)*MEMORY[0x1E4F4C240], v41);
              xpc_object_t v42 = xpc_null_create();
              xpc_release(v41);
              xpc_release(v42);
            }
            LODWORD(v51) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, (unsigned int *)&v51, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_85;
          }
        }
        else
        {
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        xpc_object_t v25 = object;
        if (SHIBYTE(object[2]) < 0) {
          xpc_object_t v25 = (xpc_object_t *)object[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v25;
        _os_log_impl(&dword_1C59C6000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 1;
        if (!v2[1]) {
          goto LABEL_85;
        }
        goto LABEL_41;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  uint64_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)object, v8);
    long long v10 = *(_OWORD *)object;
    object[0] = 0;
    object[1] = 0;
    uint64_t v11 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = (std::__shared_weak_count *)object[1];
    if (object[1] && !atomic_fetch_add((atomic_ullong *volatile)object[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_1EBBDCA08;
  }
  xpc_object_t v13 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    uint64_t v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13) {
      goto LABEL_34;
    }
  }
  else
  {
    uint64_t v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v15) {
      goto LABEL_35;
    }
    goto LABEL_49;
  }
LABEL_34:
  if (v15)
  {
LABEL_35:
    uint64_t v23 = (void *)v2[4];
    xpc_object_t v49 = v23;
    if (v23) {
      xpc_retain(v23);
    }
    else {
      xpc_object_t v49 = xpc_null_create();
    }
    xpc::bridge((uint64_t *)&cf, (xpc *)&v49, v24);
    CFTypeRef v32 = cf;
    if (cf && (CFTypeID v33 = CFGetTypeID(cf), v33 == CFDictionaryGetTypeID()))
    {
      CFTypeRef v51 = v32;
      CFRetain(v32);
    }
    else
    {
      CFTypeRef v51 = 0;
    }
    object[0] = (xpc_object_t)MEMORY[0x1E4F143A8];
    object[1] = (xpc_object_t)1174405120;
    object[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb12_ENK4__12clEv_block_invoke;
    object[3] = &__block_descriptor_tmp_273;
    xpc_object_t object[4] = v3;
    object[5] = *((xpc_object_t *)v2 + 2);
    uint64_t v34 = (std::__shared_weak_count *)v2[3];
    xpc_object_t v47 = v34;
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    xpc_object_t v35 = (void *)v2[1];
    if (v35) {
      xpc_object_t v35 = _Block_copy(v35);
    }
    aBlock = v35;
    CFTypeRef v36 = _Block_copy(object);
    CFTypeID v37 = v3[17];
    if (v37) {
      dispatch_retain(v37);
    }
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v37;
    (*(void (**)(std::string::size_type, CFTypeRef *, std::string *))(*(void *)v15 + 360))(v15, &v51, &__dst);
    if (__dst.__r_.__value_.__l.__size_) {
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    }
    if (__dst.__r_.__value_.__r.__words[0]) {
      _Block_release(__dst.__r_.__value_.__l.__data_);
    }
    if (v51) {
      CFRelease(v51);
    }
    if (cf) {
      CFRelease(cf);
    }
    xpc_release(v49);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v47) {
      std::__shared_weak_count::__release_weak(v47);
    }
    goto LABEL_73;
  }
LABEL_49:
  xpc_object_t v29 = xpc_null_create();
  uint64_t v30 = v2[1];
  object[0] = v29;
  xpc_object_t v31 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v30 + 16))(v30, 3760250880, object);
  xpc_release(object[0]);
  xpc_release(v31);
LABEL_73:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_87:
  xpc_release((xpc_object_t)v2[4]);
  v2[4] = 0;
  xpc_object_t v43 = (std::__shared_weak_count *)v2[3];
  if (v43) {
    std::__shared_weak_count::__release_weak(v43);
  }
  uint64_t v44 = (const void *)v2[1];
  if (v44) {
    _Block_release(v44);
  }
  operator delete(v2);
  CFAllocatorRef v45 = (std::__shared_weak_count *)a1[2];
  if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
  operator delete(a1);
}

void sub_1C5ACB330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, uint64_t a20,xpc_object_t a21,CFTypeRef a22,CFTypeRef cf,xpc_object_t aBlock,dispatch_object_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb12_ENK4__12clEv_block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    std::string::size_type v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[5])
      {
        uint64_t v8 = *a2;
        if (*a2) {
          uint64_t v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v9 = 0;
        }
        if (v9)
        {
          long long v10 = *(NSObject **)(v5 + 88);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)xpc_object_t object = 138412290;
            *(void *)&xpc_object_t object[4] = v8;
            _os_log_error_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
            uint64_t v8 = *a2;
          }
        }
        if (v8) {
          uint64_t v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v11 = 0;
        }
        if (v11) {
          uint64_t v12 = 3760250880;
        }
        else {
          uint64_t v12 = 0;
        }
        xpc_object_t v13 = xpc_null_create();
        uint64_t v14 = a1[7];
        *(void *)xpc_object_t object = v13;
        xpc_object_t v15 = xpc_null_create();
        (*(void (**)(uint64_t, uint64_t, unsigned char *))(v14 + 16))(v14, v12, object);
        xpc_release(*(xpc_object_t *)object);
        xpc_release(v15);
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1C5ACB784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb13_E4__13EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void **)*a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    uint64_t v4 = (const void *)*MEMORY[0x1E4F4CFC8];
    size_t v5 = strlen((const char *)*MEMORY[0x1E4F4CFC8]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        xpc_object_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        unsigned int v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        __p[2] = (void *)v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 1;
            if (!v2[1])
            {
LABEL_74:
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              goto LABEL_76;
            }
LABEL_56:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            xpc_object_t v28 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0) {
              xpc_object_t v28 = __p[1];
            }
            if (v28)
            {
              xpc_object_t v29 = xpc_dictionary_create(0, 0, 0);
              if (v29 || (xpc_object_t v29 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8795EB0](v29) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v29);
                  xpc_object_t v30 = v29;
                }
                else
                {
                  xpc_object_t v30 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v30 = xpc_null_create();
                xpc_object_t v29 = 0;
              }
              xpc_release(v29);
              xpc_object_t v31 = xpc_null_create();
              CFTypeRef v32 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
              xpc_release(v32);
              xpc_release(v31);
              if (SHIBYTE(__p[2]) >= 0) {
                CFTypeID v33 = __p;
              }
              else {
                CFTypeID v33 = (void **)__p[0];
              }
              xpc_object_t v34 = xpc_string_create((const char *)v33);
              if (!v34) {
                xpc_object_t v34 = xpc_null_create();
              }
              xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x1E4F4C240], v34);
              xpc_object_t v35 = xpc_null_create();
              xpc_release(v34);
              xpc_release(v35);
            }
            unsigned int v42 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, &v42, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_74;
          }
        }
        else
        {
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        xpc_object_t v27 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          xpc_object_t v27 = (void **)__p[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
        _os_log_impl(&dword_1C59C6000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 1;
        if (!v2[1]) {
          goto LABEL_74;
        }
        goto LABEL_56;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  uint64_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)__p, v8);
    long long v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v11 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_1EBBDCA08;
  }
  xpc_object_t v13 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    uint64_t v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13) {
      goto LABEL_34;
    }
  }
  else
  {
    uint64_t v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v15) {
      goto LABEL_35;
    }
    goto LABEL_49;
  }
LABEL_34:
  if (v15)
  {
LABEL_35:
    __p[0] = (void *)MEMORY[0x1E4F143A8];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb13_ENK4__13clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_276;
    __p[4] = *((void **)v2 + 2);
    uint64_t v23 = (std::__shared_weak_count *)v2[3];
    CFTypeRef v40 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = (void *)v2[1];
    if (v24) {
      uint64_t v24 = _Block_copy(v24);
    }
    aBlock = v24;
    xpc_object_t v25 = _Block_copy(__p);
    xpc_object_t v26 = v3[17];
    if (v26) {
      dispatch_retain(v26);
    }
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
    (*(void (**)(std::string::size_type, std::string *))(*(void *)v15 + 384))(v15, &__dst);
    if (__dst.__r_.__value_.__l.__size_) {
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    }
    if (__dst.__r_.__value_.__r.__words[0]) {
      _Block_release(__dst.__r_.__value_.__l.__data_);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v40) {
      std::__shared_weak_count::__release_weak(v40);
    }
  }
LABEL_49:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_76:
  CFTypeRef v36 = (std::__shared_weak_count *)v2[3];
  if (v36) {
    std::__shared_weak_count::__release_weak(v36);
  }
  CFTypeID v37 = (const void *)v2[1];
  if (v37) {
    _Block_release(v37);
  }
  operator delete(v2);
  xpc_object_t v38 = (std::__shared_weak_count *)a1[2];
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  operator delete(a1);
}

void sub_1C5ACBE74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb13_ENK4__13clEv_block_invoke(void *a1, void *a2, void *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (!v4) {
    return;
  }
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  long long v20 = v7;
  if (!v7) {
    return;
  }
  if (!a1[4])
  {
    long long v10 = v7;
LABEL_22:
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return;
  }
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v9 = v8;
  if (v8)
  {
    xpc_object_t xdict = v8;
  }
  else
  {
    xpc_object_t v9 = xpc_null_create();
    xpc_object_t xdict = v9;
    if (!v9)
    {
      xpc_object_t v11 = xpc_null_create();
      xpc_object_t v9 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x1C8795EB0](v9) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v9);
    goto LABEL_13;
  }
  xpc_object_t v11 = xpc_null_create();
LABEL_12:
  xpc_object_t xdict = v11;
LABEL_13:
  xpc_release(v9);
  uint64_t v12 = MEMORY[0x1C8795EB0](*a3);
  uint64_t v13 = MEMORY[0x1E4F145D8];
  if (v12 != MEMORY[0x1E4F145D8])
  {
    xpc_object_t v14 = (xpc_object_t)*a3;
    if (v14) {
      xpc_retain(v14);
    }
    else {
      xpc_object_t v14 = xpc_null_create();
    }
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C558], v14);
    xpc_object_t v15 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v15);
  }
  if (MEMORY[0x1C8795EB0](*a2) == v13) {
    unsigned int v16 = 0;
  }
  else {
    unsigned int v16 = -534716416;
  }
  unsigned int v17 = v16;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, &v17, &xdict);
  xpc_release(xdict);
  long long v10 = v20;
  if (v20) {
    goto LABEL_22;
  }
}

void sub_1C5ACC280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11)
{
}

void dispatch::async<void ctu::SharedSynchronizable<RadioModule>::execute_wrapped<RadioModule::initialize(dispatch::group_session)::$_0>(RadioModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RadioModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<RadioModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(RadioModule ***)a1;
  RadioModule::finishInitialization_sync(**(RadioModule ***)a1);
  operator delete(v2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = (void *)a1;
  }
  else
  {
    uint64_t v4 = (void *)a1;
  }
  operator delete(v4);
}

void sub_1C5ACC36C(_Unwind_Exception *a1)
{
  operator delete(v2);
  uint64_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<DeviceHistoryDB *,std::shared_ptr<DeviceHistoryDB>::__shared_ptr_default_delete<DeviceHistoryDB,DeviceHistoryDB>,std::allocator<DeviceHistoryDB>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<DeviceHistoryDB *,std::shared_ptr<DeviceHistoryDB>::__shared_ptr_default_delete<DeviceHistoryDB,DeviceHistoryDB>,std::allocator<DeviceHistoryDB>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<DeviceHistoryDB *,std::shared_ptr<DeviceHistoryDB>::__shared_ptr_default_delete<DeviceHistoryDB,DeviceHistoryDB>,std::allocator<DeviceHistoryDB>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C5BC84D6) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C5BC84D6 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C5BC84D6)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C5BC84D6 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

BOOL ctu::SharedLockable<SharedData>::execute_sync<BOOL SharedData::setPreference<__CFDictionary *>(std::string const&,__CFDictionary *)::{lambda(void)#1}>(os_unfair_lock_s *a1, uint64_t *a2)
{
  uint64_t v3 = a1 + 4;
  os_unfair_lock_lock(a1 + 4);
  uint64_t v4 = a2[2];
  uint64_t v5 = *a2;
  std::string::size_type v6 = *(const void **)a2[1];
  if (*(char *)(v5 + 23) >= 0) {
    uint64_t v7 = (const char *)v5;
  }
  else {
    uint64_t v7 = *(const char **)v5;
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v10, v7);
  BOOL v8 = ctu::cf::plist_adapter::set<__CFArray *>(v4, v6, v10, 1);
  MEMORY[0x1C8794290](&v10);
  os_unfair_lock_unlock(v3);
  return v8;
}

uint64_t ___ZN3ctu20SharedSynchronizableI11RadioModuleE13connect_eventIN5boost8signals26signalIFvjENS5_19optional_last_valueIvEEiNSt3__14lessIiEENS4_8functionIS7_EENSD_IFvRKNS5_10connectionEjEEENS5_5mutexEEES1_vJjEEEDTcl7connectfp_cvNSA_10shared_ptrIS1_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSQ_SS_E_block_invoke(void *a1)
{
  uint64_t v1 = (uint64_t (*)(void *))a1[5];
  uint64_t v2 = a1[6];
  uint64_t v3 = (void *)(a1[4] + (v2 >> 1) - 120);
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

void **boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>::~slot(void **a1)
{
  unint64_t v2 = (unint64_t)a1[3];
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 4, a1 + 4, 2);
      }
    }
    a1[3] = 0;
  }
  uint64_t v4 = *a1;
  if (*a1)
  {
    uint64_t v5 = (uint64_t)a1[1];
    std::string::size_type v6 = *a1;
    if ((void *)v5 != v4)
    {
      do
      {
        v5 -= 24;
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
      }
      while ((void *)v5 != v4);
      std::string::size_type v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
  }
  return a1;
}

uint64_t ctu::DispatchSlot<dispatch::block<void({block_pointer})(unsigned int)>>::~DispatchSlot(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)a1);
  unint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>::~shared_ptr(uint64_t a1)
{
  unint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(unsigned int),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(unsigned int)>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    unint64_t v2 = (atomic_uint *)v1[3];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = (atomic_uint *)v1[1];
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(unsigned int),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(unsigned int)>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(unsigned int),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(unsigned int)>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(unsigned int),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(unsigned int)>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        std::string::size_type v6 = (atomic_uint *)v3[3];
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy((void *)v1[4]);
    if (v1[2])
    {
      uint64_t v2 = (void *)*v1;
      uint64_t v3 = (uint64_t *)v1[1];
      uint64_t v4 = *v3;
      *(void *)(v4 + 8) = *(void *)(*v1 + 8);
      *(void *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          uint64_t v5 = (uint64_t *)v3[1];
          std::string::size_type v6 = (atomic_uint *)v3[3];
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          operator delete(v3);
          uint64_t v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  uint64_t v1 = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>::~connection_body(a1);

  operator delete(v1);
}

BOOL boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>::connected(uint64_t a1)
{
  v19[3] = *MEMORY[0x1E4F143B8];
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14[8] = v2;
  v14[9] = v2;
  v14[6] = v2;
  v14[7] = v2;
  v14[4] = v2;
  v14[5] = v2;
  v14[2] = v2;
  v14[3] = v2;
  v14[0] = v2;
  v14[1] = v2;
  uint64_t v3 = *(pthread_mutex_t **)(a1 + 48);
  unint64_t v15 = 10;
  unsigned int v16 = (char *)v14;
  uint64_t v17 = 0;
  xpc_object_t v18 = v3;
  pthread_mutex_lock(v3);
  uint64_t v4 = *(uint64_t **)(a1 + 32);
  if (v4)
  {
    uint64_t v5 = *v4;
    if (*v4 != v4[1])
    {
      while (1)
      {
        memset(v19, 170, 24);
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>(v5, (uint64_t)v19);
        if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        {
          if (!(*(unsigned int (**)(void))(**(void **)(v5 + 8) + 24))(*(void *)(v5 + 8))) {
            goto LABEL_6;
          }
        }
        else
        {
          uint64_t v6 = *(void *)(v5 + 16);
          if (v6 && atomic_load_explicit((atomic_uint *volatile)(v6 + 8), memory_order_acquire))
          {
LABEL_6:
            char v7 = 0;
            if (LODWORD(v19[0]) == SLODWORD(v19[0]) >> 31) {
              goto LABEL_13;
            }
            goto LABEL_7;
          }
        }
        if (*(unsigned char *)(a1 + 24))
        {
          *(unsigned char *)(a1 + 24) = 0;
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)a1, v14);
        }
        char v7 = 1;
        if (LODWORD(v19[0]) == SLODWORD(v19[0]) >> 31)
        {
LABEL_13:
          BOOL v8 = (atomic_uint *)v19[2];
          if (v19[2])
          {
            if (atomic_fetch_add((atomic_uint *volatile)(v19[2] + 8), 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v8 + 16))(v8);
              if (atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
              }
            }
          }
          goto LABEL_17;
        }
LABEL_7:
        if (v19[1]) {
          (*(void (**)(void))(*(void *)v19[1] + 8))(v19[1]);
        }
LABEL_17:
        if ((v7 & 1) == 0)
        {
          v5 += 24;
          if (v5 != *(void *)(*(void *)(a1 + 32) + 8)) {
            continue;
          }
        }
        break;
      }
    }
  }
  int v9 = *(unsigned __int8 *)(a1 + 24);
  pthread_mutex_unlock(v18);
  CFStringRef v10 = v16;
  if (v16)
  {
    if (v17 - 1 >= 0)
    {
      xpc_object_t v11 = &v16[16 * v17];
      do
      {
        uint64_t v12 = (atomic_uint *)*((void *)v11 - 1);
        if (v12)
        {
          if (atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v12 + 16))(v12);
            if (atomic_fetch_add(v12 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v12 + 24))(v12);
            }
          }
        }
        v11 -= 16;
      }
      while (v11 > v10);
    }
    if (v15 >= 0xB) {
      operator delete(v16);
    }
  }
  return v9 != 0;
}

void sub_1C5ACCDEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>::lock(uint64_t a1)
{
  return pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>::unlock(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>::release_slot@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 40);
  long long v2 = (void *)(result + 32);
  *a2 = *(void *)(result + 32);
  a2[1] = v3;
  if (v3)
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed);
    uint64_t v4 = *(atomic_uint **)(result + 40);
    void *v2 = 0;
    *(void *)(result + 40) = 0;
    if (v4 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
    {
      uint64_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
      if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
        return (*(uint64_t (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
      }
    }
  }
  else
  {
    void *v2 = 0;
    *(void *)(result + 40) = 0;
  }
  return result;
}

void boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void ***)(a1 + 16);
  if (v1)
  {
    unint64_t v2 = (unint64_t)v1[3];
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        uint64_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3) {
          v3(v1 + 4, v1 + 4, 2);
        }
      }
      v1[3] = 0;
    }
    uint64_t v4 = *v1;
    if (*v1)
    {
      uint64_t v5 = (uint64_t)v1[1];
      uint64_t v6 = *v1;
      if ((void *)v5 != v4)
      {
        do
        {
          v5 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
        }
        while ((void *)v5 != v4);
        uint64_t v6 = *v1;
      }
      v1[1] = v4;
      operator delete(v6);
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>>::get_untyped_deleter()
{
  return 0;
}

void *boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  *a1 = &unk_1F210A3C0;
  unint64_t v2 = (atomic_uint *)a1[7];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  uint64_t v3 = (atomic_uint *)a1[5];
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
  }
  *a1 = &unk_1F2102D60;
  uint64_t v4 = (atomic_uint *)a1[2];
  if (v4 && atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
  }
  return a1;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::function<void ()(unsigned int)>::~function(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

void boost::detail::function::functor_manager<ctu::DispatchSlot<dispatch::block<void({block_pointer})(unsigned int)>>>::manage(uint64_t a1, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      int v9 = (const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v9 == (const char *)(0x80000001C5BC8858 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v9, (const char *)(0x80000001C5BC8858 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = a1;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      dispatch_release(*(dispatch_object_t *)a2);
      BOOL v8 = (const void *)*((void *)a2 + 1);
      if (v8) {
LABEL_9:
      }
        _Block_release(v8);
    }
  }
  else
  {
    uint64_t v6 = *(NSObject **)a1;
    char v7 = *(void **)(a1 + 8);
    *(void *)a2 = *(void *)a1;
    if (v7)
    {
      char v7 = _Block_copy(v7);
      uint64_t v6 = *(NSObject **)a2;
    }
    *((void *)a2 + 1) = v7;
    dispatch_retain(v6);
    if (a3 == 1)
    {
      dispatch_release(*(dispatch_object_t *)a1);
      BOOL v8 = *(const void **)(a1 + 8);
      if (v8) {
        goto LABEL_9;
      }
    }
  }
}

void boost::detail::function::void_function_obj_invoker1<ctu::DispatchSlot<dispatch::block<void({block_pointer})(unsigned int)>>,void,unsigned int>::invoke(uint64_t a1, int a2)
{
  uint64_t v4 = *(NSObject **)a1;
  uint64_t v3 = *(const void **)(a1 + 8);
  if (!v3)
  {
    uint64_t v6 = 0;
    goto LABEL_10;
  }
  uint64_t v5 = _Block_copy(v3);
  uint64_t v6 = v5;
  if (!v5)
  {
LABEL_10:
    char v18 = 1;
LABEL_11:
    uint64_t v17 = 0;
    v23[0] = 0;
    goto LABEL_21;
  }
  char v7 = _Block_copy(v5);
  BOOL v8 = v7;
  if (!v7)
  {
    char v18 = 0;
    goto LABEL_11;
  }
  int v9 = _Block_copy(v7);
  CFStringRef v10 = v9;
  if (v9)
  {
    xpc_object_t v11 = _Block_copy(v9);
    uint64_t v12 = v11;
    if (v11)
    {
      uint64_t v13 = _Block_copy(v11);
      xpc_object_t v14 = v13;
      if (v13)
      {
        unint64_t v15 = _Block_copy(v13);
        unsigned int v16 = v15;
        if (v15)
        {
          uint64_t v17 = _Block_copy(v15);
          v23[0] = v17;
          _Block_release(v16);
        }
        else
        {
          uint64_t v17 = 0;
          v23[0] = 0;
        }
        _Block_release(v14);
      }
      else
      {
        uint64_t v17 = 0;
        v23[0] = 0;
      }
      _Block_release(v12);
    }
    else
    {
      uint64_t v17 = 0;
      v23[0] = 0;
    }
    _Block_release(v10);
  }
  else
  {
    uint64_t v17 = 0;
    v23[0] = 0;
  }
  _Block_release(v8);
  char v18 = 0;
LABEL_21:
  unsigned int v19 = operator new(4uLL);
  *unsigned int v19 = a2;
  long long v20 = operator new(0x20uLL);
  void *v20 = boost::function1<void,unsigned int>::assign_to<dispatch::block<void({block_pointer})>>(dispatch::block<void({block_pointer})>)::stored_vtable;
  if (v17) {
    unsigned int v21 = _Block_copy(v17);
  }
  else {
    unsigned int v21 = 0;
  }
  v20[1] = v21;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvjEEEj_block_invoke;
  block[3] = &__block_descriptor_tmp_291_0;
  block[4] = v20;
  block[5] = v19;
  dispatch_async(v4, block);
  if (boost::function1<void,unsigned int>::assign_to<dispatch::block<void({block_pointer})>>(dispatch::block<void({block_pointer})>)::stored_vtable)
  {
    if ((boost::function1<void,unsigned int>::assign_to<dispatch::block<void({block_pointer})>>(dispatch::block<void({block_pointer})>)::stored_vtable & 1) == 0)
    {
      int v22 = *(void (**)(void *, void *, uint64_t))((unint64_t)boost::function1<void,unsigned int>::assign_to<dispatch::block<void({block_pointer})>>(dispatch::block<void({block_pointer})>)::stored_vtable & 0xFFFFFFFFFFFFFFFELL);
      if (v22) {
        v22(v23, v23, 2);
      }
    }
  }
  if ((v18 & 1) == 0) {
    _Block_release(v6);
  }
}

void sub_1C5ACD660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (v10) {
    _Block_release(v10);
  }
  if ((v11 & 1) == 0) {
    _Block_release(v9);
  }
  _Unwind_Resume(exception_object);
}

void ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvjEEEj_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!*v1)
  {
    std::runtime_error::runtime_error(&v7, "call to empty boost::function");
    v7.__vftable = (std::runtime_error_vtbl *)&unk_1F21031B0;
    boost::throw_exception<boost::bad_function_call>(&v7);
  }
  (*(void (**)(void *, void))((*v1 & 0xFFFFFFFFFFFFFFFELL) + 8))(v1 + 1, **(unsigned int **)(a1 + 40));
  uint64_t v3 = *(uint64_t **)(a1 + 32);
  if (v3)
  {
    uint64_t v4 = *v3;
    if (*v3)
    {
      if ((v4 & 1) == 0)
      {
        uint64_t v5 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL);
        if (v5) {
          v5(v3 + 1, v3 + 1, 2);
        }
      }
      uint64_t *v3 = 0;
    }
    operator delete(v3);
  }
  uint64_t v6 = *(void **)(a1 + 40);
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1C5ACD780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
}

void boost::detail::function::functor_manager<dispatch::block<void({block_pointer})(unsigned int)>>::manage(void **a1, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      BOOL v8 = (const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x80000001C5BC8896 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x80000001C5BC8896 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = a1;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      std::runtime_error v7 = *(void **)a2;
      if (*(void *)a2) {
LABEL_9:
      }
        _Block_release(v7);
    }
  }
  else
  {
    uint64_t v6 = *a1;
    if (*a1) {
      uint64_t v6 = _Block_copy(v6);
    }
    *(void *)a2 = v6;
    if (a3 == 1)
    {
      std::runtime_error v7 = *a1;
      if (*a1) {
        goto LABEL_9;
      }
    }
  }
}

uint64_t boost::detail::function::void_function_obj_invoker1<dispatch::block<void({block_pointer})(unsigned int)>,void,unsigned int>::invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t boost::function1<void,unsigned int>::move_assign(uint64_t result, uint64_t *a2)
{
  if (a2 != (uint64_t *)result)
  {
    uint64_t v2 = a2;
    uint64_t v3 = (uint64_t *)result;
    uint64_t v4 = *a2;
    if (*a2)
    {
      *(void *)uint64_t result = v4;
      if (v4)
      {
        long long v7 = *(_OWORD *)(a2 + 1);
        *(void *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      uint64_t v5 = *(void *)result;
      if (!*(void *)result) {
        return result;
      }
      if ((v5 & 1) == 0)
      {
        uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6) {
          uint64_t result = v6(result + 8, result + 8, 2);
        }
      }
      uint64_t v2 = v3;
    }
    uint64_t *v2 = 0;
  }
  return result;
}

void sub_1C5ACD93C(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_rethrow();
}

void sub_1C5ACD94C(_Unwind_Exception *a1)
{
}

uint64_t *boost::function1<void,unsigned int>::~function1(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

void *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<RadioModule>>::~foreign_weak_ptr_impl(void *a1)
{
  *a1 = &unk_1F210A518;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<RadioModule>>::~foreign_weak_ptr_impl(void *__p)
{
  void *__p = &unk_1F210A518;
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<RadioModule>>::lock(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = 0;
LABEL_6:
  long long v7 = operator new(0x18uLL);
  void *v7 = &unk_1F210A568;
  v7[1] = v6;
  v7[2] = v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    *a2 = v7;
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    *a2 = v7;
  }
}

void sub_1C5ACDB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<RadioModule>>::expired(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  return !v1 || *(void *)(v1 + 8) == -1;
}

void *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<RadioModule>>::clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F210A518;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<RadioModule>>::~foreign_shared_ptr_impl(void *result)
{
  uint64_t v1 = result;
  void *result = &unk_1F210A568;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<RadioModule>>::~foreign_shared_ptr_impl(void *__p)
{
  uint64_t v1 = __p;
  void *__p = &unk_1F210A568;
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    __p = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  operator delete(__p);
}

void *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<RadioModule>>::clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F210A568;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void dispatch::async<void ctu::SharedSynchronizable<RadioModule>::execute_wrapped<RadioModule::sleep(dispatch::group_session)::$_0>(RadioModule::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RadioModule::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<RadioModule::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = *(uint64_t **)(v3 + 272);
  if (v4)
  {
    uint64_t v5 = _Block_copy(&__block_literal_global_0);
    uint64_t v6 = v5;
    long long v7 = *(NSObject **)(v3 + 136);
    if (v7)
    {
      dispatch_retain(v7);
      char v11 = v6;
      uint64_t v12 = v7;
      radio::HealthService::enterLowPower(v4, (uint64_t)&v11);
      dispatch_release(v7);
      if (!v6) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
    char v11 = v5;
    uint64_t v12 = 0;
    radio::HealthService::enterLowPower(v4, (uint64_t)&v11);
    if (v6) {
LABEL_6:
    }
      _Block_release(v6);
  }
LABEL_7:
  BOOL v8 = v2[1];
  if (v8)
  {
    dispatch_group_leave(v8);
    int v9 = v2[1];
    if (v9) {
      dispatch_release(v9);
    }
  }
  operator delete(v2);
  CFStringRef v10 = (std::__shared_weak_count *)a1[2];
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }

  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<RadioModule>::execute_wrapped<RadioModule::wake(dispatch::group_session)::$_0>(RadioModule::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RadioModule::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<RadioModule::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = *(uint64_t **)(v3 + 272);
  if (v4)
  {
    uint64_t v5 = _Block_copy(&__block_literal_global_306);
    uint64_t v6 = v5;
    long long v7 = *(NSObject **)(v3 + 136);
    if (v7)
    {
      dispatch_retain(v7);
      char v11 = v6;
      uint64_t v12 = v7;
      radio::HealthService::exitLowPower(v4, (uint64_t)&v11);
      dispatch_release(v7);
      if (!v6) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
    char v11 = v5;
    uint64_t v12 = 0;
    radio::HealthService::exitLowPower(v4, (uint64_t)&v11);
    if (v6) {
LABEL_6:
    }
      _Block_release(v6);
  }
LABEL_7:
  BOOL v8 = v2[1];
  if (v8)
  {
    dispatch_group_leave(v8);
    int v9 = v2[1];
    if (v9) {
      dispatch_release(v9);
    }
  }
  operator delete(v2);
  CFStringRef v10 = (std::__shared_weak_count *)a1[2];
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }

  operator delete(a1);
}

void std::__shared_ptr_pointer<radio::HealthService *,std::shared_ptr<radio::HealthService>::__shared_ptr_default_delete<radio::HealthService,radio::HealthService>,std::allocator<radio::HealthService>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<radio::HealthService *,std::shared_ptr<radio::HealthService>::__shared_ptr_default_delete<radio::HealthService,radio::HealthService>,std::allocator<radio::HealthService>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count ***)(a1 + 24);
  if (v1)
  {
    uint64_t v2 = v1[1];
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      uint64_t v3 = v1;
    }
    else
    {
      uint64_t v3 = v1;
    }
    operator delete(v3);
  }
}

uint64_t std::__shared_ptr_pointer<radio::HealthService *,std::shared_ptr<radio::HealthService>::__shared_ptr_default_delete<radio::HealthService,radio::HealthService>,std::allocator<radio::HealthService>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C5BC89EDLL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C5BC89EDLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C5BC89EDLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C5BC89EDLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::__shared_ptr_pointer<ABMProperties *,std::shared_ptr<ABMProperties>::__shared_ptr_default_delete<ABMProperties,ABMProperties>,std::allocator<ABMProperties>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ABMProperties *,std::shared_ptr<ABMProperties>::__shared_ptr_default_delete<ABMProperties,ABMProperties>,std::allocator<ABMProperties>>::__on_zero_shared(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    uint64_t v1 = (void *)MEMORY[0x1C8794300]();
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<ABMProperties *,std::shared_ptr<ABMProperties>::__shared_ptr_default_delete<ABMProperties,ABMProperties>,std::allocator<ABMProperties>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C5BC8ABELL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C5BC8ABELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C5BC8ABELL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C5BC8ABELL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

BOOL ctu::cf::plist_adapter::set<BOOL>(uint64_t a1, int a2, char *a3, int a4)
{
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)key, a3);
  long long v7 = (const __CFString **)MEMORY[0x1E4F1CFD0];
  if (!a2) {
    long long v7 = (const __CFString **)MEMORY[0x1E4F1CFC8];
  }
  CFStringRef v8 = *v7;
  key[1] = v8;
  if (v8)
  {
    CFStringRef v9 = (const __CFString *)*MEMORY[0x1E4F1D3E0];
    CFPreferencesSetValue(key[0], v8, *(CFStringRef *)(a1 + 8), *(CFStringRef *)(a1 + 16), (CFStringRef)*MEMORY[0x1E4F1D3E0]);
    if (a4) {
      BOOL v10 = CFPreferencesSynchronize(*(CFStringRef *)(a1 + 8), *(CFStringRef *)(a1 + 16), v9) != 0;
    }
    else {
      BOOL v10 = 1;
    }
    CFRelease(v8);
  }
  else
  {
    BOOL v10 = 0;
  }
  MEMORY[0x1C8794290](key);
  return v10;
}

void sub_1C5ACE3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10)
{
}

BOOL ctu::cf::plist_adapter::set<unsigned int>(uint64_t a1, unsigned int a2, const __CFString *a3, int a4)
{
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t valuePtr = a2;
  CFNumberRef v8 = CFNumberCreate(v7, kCFNumberLongLongType, &valuePtr);
  if (!v8) {
    return 0;
  }
  CFNumberRef v9 = v8;
  CFStringRef v10 = (const __CFString *)*MEMORY[0x1E4F1D3E0];
  CFPreferencesSetValue(a3, v8, *(CFStringRef *)(a1 + 8), *(CFStringRef *)(a1 + 16), (CFStringRef)*MEMORY[0x1E4F1D3E0]);
  if (a4) {
    BOOL v11 = CFPreferencesSynchronize(*(CFStringRef *)(a1 + 8), *(CFStringRef *)(a1 + 16), v10) != 0;
  }
  else {
    BOOL v11 = 1;
  }
  CFRelease(v9);
  return v11;
}

void sub_1C5ACE4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

uint64_t __cxx_global_var_init_209()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

uint64_t __cxx_global_var_init_210()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

uint64_t __cxx_global_var_init_211()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

uint64_t __cxx_global_var_init_212()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<DeviceHistoryDB>::~PthreadMutexGuardPolicy, &ctu::Singleton<DeviceHistoryDB,DeviceHistoryDB,ctu::PthreadMutexGuardPolicy<DeviceHistoryDB>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

uint64_t __cxx_global_var_init_213()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

uint64_t abm::stats::typeAsString@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if (result)
  {
    strcpy(a2, "UNKNOWN");
    a2[23] = 7;
  }
  else
  {
    strcpy(a2, "Boot Statistics");
    a2[23] = 15;
  }
  return result;
}

void util::strip_non_printable(std::string *this)
{
  uint64_t v1 = this;
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    uint64_t v3 = this;
  }
  else {
    uint64_t v3 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    uint64_t v4 = (std::string *)((char *)v3 + size);
    std::string::size_type v5 = size - 1;
    uint64_t v6 = MEMORY[0x1E4F14390];
    while (1)
    {
      unsigned int v7 = v3->__r_.__value_.__s.__data_[0];
      if ((v7 & 0x80000000) != 0) {
        break;
      }
      int v8 = *(_DWORD *)(v6 + 4 * v7 + 60);
      if ((v8 & 0x40000) == 0 || (v8 & 0x4000) != 0) {
        goto LABEL_15;
      }
LABEL_8:
      uint64_t v3 = (std::string *)((char *)v3 + 1);
      --v5;
      if (v3 == v4) {
        goto LABEL_28;
      }
    }
    if (__maskrune(v3->__r_.__value_.__s.__data_[0], 0x40000uLL) && !__maskrune(v7, 0x4000uLL)) {
      goto LABEL_8;
    }
LABEL_15:
    if (v3 != v4 && (std::string *)((char *)&v3->__r_.__value_.__l.__data_ + 1) != v4)
    {
      uint64_t v9 = 1;
      uint64_t v4 = v3;
      while (1)
      {
        unsigned int v10 = v3->__r_.__value_.__s.__data_[v9];
        if ((v10 & 0x80000000) != 0)
        {
          if (!__maskrune(v3->__r_.__value_.__s.__data_[v9], 0x40000uLL) || __maskrune(v10, 0x4000uLL)) {
            goto LABEL_19;
          }
        }
        else
        {
          int v11 = *(_DWORD *)(v6 + 4 * v10 + 60);
          if ((v11 & 0x40000) == 0 || (v11 & 0x4000) != 0) {
            goto LABEL_19;
          }
        }
        v4->__r_.__value_.__s.__data_[0] = v3->__r_.__value_.__s.__data_[v9];
        uint64_t v4 = (std::string *)((char *)v4 + 1);
LABEL_19:
        ++v9;
        if (!--v5) {
          goto LABEL_28;
        }
      }
    }
  }
  uint64_t v4 = v3;
LABEL_28:
  std::string::size_type v12 = HIBYTE(v1->__r_.__value_.__r.__words[2]);
  int v13 = (char)v12;
  xpc_object_t v14 = (std::string *)v1->__r_.__value_.__r.__words[0];
  unint64_t v15 = (char *)(v1->__r_.__value_.__r.__words[0] + v1->__r_.__value_.__l.__size_);
  if ((v12 & 0x80u) != 0)
  {
    std::string::size_type v16 = v1->__r_.__value_.__r.__words[0];
  }
  else
  {
    unint64_t v15 = (char *)v1 + v12;
    std::string::size_type v16 = (std::string::size_type)v1;
  }
  if ((v12 & 0x80u) != 0) {
    std::string::size_type v12 = v1->__r_.__value_.__l.__size_;
  }
  std::string::size_type v17 = (std::string::size_type)v4 - v16;
  if (v12 < (unint64_t)v4 - v16) {
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v15 - (char *)v4 == -1)
  {
    if (v13 < 0)
    {
      v1->__r_.__value_.__l.__size_ = v17;
      uint64_t v1 = v14;
    }
    else
    {
      *((unsigned char *)&v1->__r_.__value_.__s + 23) = v17 & 0x7F;
    }
    v1->__r_.__value_.__s.__data_[v17] = 0;
  }
  else
  {
    std::string::__erase_external_with_move(v1, v17, v15 - (char *)v4);
  }
}

uint64_t util::convert_garbage(uint64_t result)
{
  int v1 = *(char *)(result + 23);
  if (v1 >= 0) {
    uint64_t v2 = (unsigned char *)result;
  }
  else {
    uint64_t v2 = *(unsigned char **)result;
  }
  if (v1 >= 0) {
    uint64_t v3 = *(unsigned __int8 *)(result + 23);
  }
  else {
    uint64_t v3 = *(void *)(result + 8);
  }
  if (v3)
  {
    uint64_t v4 = MEMORY[0x1E4F14390];
    do
    {
      unsigned int v5 = (char)*v2;
      if ((v5 & 0x80000000) != 0)
      {
        uint64_t result = __maskrune((char)*v2, 0x40000uLL);
        if (result) {
          goto LABEL_10;
        }
        uint64_t result = __maskrune(v5, 0x4000uLL);
        if (result) {
          goto LABEL_10;
        }
      }
      else
      {
        int v6 = *(_DWORD *)(v4 + 4 * v5 + 60);
        if ((v6 & 0x40000) != 0) {
          goto LABEL_10;
        }
        uint64_t result = v6 & 0x4000;
        if ((v6 & 0x4000) != 0) {
          goto LABEL_10;
        }
      }
      unsigned char *v2 = 32;
LABEL_10:
      ++v2;
      --v3;
    }
    while (v3);
  }
  return result;
}

void util::strip_pattern(char *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  memset(a3, 170, sizeof(std::string));
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
  int v5 = a1[23];
  int v6 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
  unsigned int v7 = (std::string *)a3->__r_.__value_.__r.__words[0];
  if (v6 >= 0) {
    int v8 = a3;
  }
  else {
    int v8 = (std::string *)a3->__r_.__value_.__r.__words[0];
  }
  if (v5 >= 0) {
    int64_t v9 = a1[23];
  }
  else {
    int64_t v9 = *((void *)a1 + 1);
  }
  std::string::size_type v10 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if (v5 >= 0) {
    int v11 = a1;
  }
  else {
    int v11 = *(char **)a1;
  }
  if (!v9)
  {
    std::string::size_type v13 = 0;
    goto LABEL_20;
  }
  if (v6 >= 0) {
    uint64_t size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  }
  else {
    uint64_t size = a3->__r_.__value_.__l.__size_;
  }
  if (size >= v9)
  {
    xpc_object_t v27 = (char *)v8 + size;
    int v28 = *v11;
    xpc_object_t v29 = v8;
    do
    {
      uint64_t v30 = size - v9;
      if (v30 == -1) {
        break;
      }
      xpc_object_t v31 = (char *)memchr(v29, v28, v30 + 1);
      if (!v31) {
        break;
      }
      CFTypeRef v32 = v31;
      if (!memcmp(v31, v11, v9))
      {
        if (v32 != v27)
        {
          std::string::size_type v13 = v32 - (char *)v8;
          if (v32 - (char *)v8 != -1)
          {
            if (v9 == -1)
            {
              while (1)
              {
                std::string::size_type v33 = a3->__r_.__value_.__l.__size_;
                if ((v10 & 0x80u) == 0) {
                  std::string::size_type v33 = v10;
                }
                if (v33 < v13) {
                  break;
                }
                if ((char)v10 < 0)
                {
                  a3->__r_.__value_.__l.__size_ = v13;
                }
                else
                {
                  *((unsigned char *)&a3->__r_.__value_.__s + 23) = v13 & 0x7F;
                  unsigned int v7 = a3;
                }
                v7->__r_.__value_.__s.__data_[v13] = 0;
                int v34 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
                std::string::size_type v10 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                unsigned int v7 = (std::string *)a3->__r_.__value_.__r.__words[0];
                if (v34 >= 0) {
                  xpc_object_t v35 = a3;
                }
                else {
                  xpc_object_t v35 = (std::string *)a3->__r_.__value_.__r.__words[0];
                }
                int v36 = a1[23];
                if (v36 >= 0) {
                  CFTypeID v37 = a1;
                }
                else {
                  CFTypeID v37 = *(char **)a1;
                }
                if (v36 >= 0) {
                  int64_t v38 = a1[23];
                }
                else {
                  int64_t v38 = *((void *)a1 + 1);
                }
                if (v38)
                {
                  if (v34 >= 0) {
                    int64_t v39 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                  }
                  else {
                    int64_t v39 = a3->__r_.__value_.__l.__size_;
                  }
                  if (v39 < v38) {
                    return;
                  }
                  CFTypeRef v40 = (char *)v35 + v39;
                  int v41 = *v37;
                  unsigned int v42 = v35;
                  while (1)
                  {
                    int64_t v43 = v39 - v38;
                    if (v43 == -1) {
                      return;
                    }
                    uint64_t v44 = (char *)memchr(v42, v41, v43 + 1);
                    if (!v44) {
                      return;
                    }
                    CFAllocatorRef v45 = v44;
                    if (!memcmp(v44, v37, v38)) {
                      break;
                    }
                    unsigned int v42 = (std::string *)(v45 + 1);
                    int64_t v39 = v40 - (v45 + 1);
                    if (v39 < v38) {
                      return;
                    }
                  }
                  if (v45 == v40) {
                    return;
                  }
                  std::string::size_type v13 = v45 - (char *)v35;
                  if (v45 - (char *)v35 == -1) {
                    return;
                  }
                }
                else
                {
                  std::string::size_type v13 = 0;
                }
              }
            }
            else
            {
LABEL_20:
              while (1)
              {
                std::string::size_type v14 = (v10 & 0x80u) == 0 ? v10 : a3->__r_.__value_.__l.__size_;
                if (v14 < v13) {
                  break;
                }
                std::string::__erase_external_with_move(a3, v13, v9);
                int v15 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
                std::string::size_type v10 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                if (v15 >= 0) {
                  std::string::size_type v16 = a3;
                }
                else {
                  std::string::size_type v16 = (std::string *)a3->__r_.__value_.__r.__words[0];
                }
                int v17 = a1[23];
                if (v17 >= 0) {
                  char v18 = a1;
                }
                else {
                  char v18 = *(char **)a1;
                }
                if (v17 >= 0) {
                  int64_t v19 = a1[23];
                }
                else {
                  int64_t v19 = *((void *)a1 + 1);
                }
                if (v19)
                {
                  if (v15 >= 0) {
                    int64_t v20 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                  }
                  else {
                    int64_t v20 = a3->__r_.__value_.__l.__size_;
                  }
                  if (v20 < v19) {
                    return;
                  }
                  unsigned int v21 = (char *)v16 + v20;
                  int v22 = *v18;
                  uint64_t v23 = v16;
                  while (1)
                  {
                    int64_t v24 = v20 - v19;
                    if (v24 == -1) {
                      return;
                    }
                    xpc_object_t v25 = (char *)memchr(v23, v22, v24 + 1);
                    if (!v25) {
                      return;
                    }
                    xpc_object_t v26 = v25;
                    if (!memcmp(v25, v18, v19)) {
                      break;
                    }
                    uint64_t v23 = (std::string *)(v26 + 1);
                    int64_t v20 = v21 - (v26 + 1);
                    if (v20 < v19) {
                      return;
                    }
                  }
                  if (v26 == v21) {
                    return;
                  }
                  std::string::size_type v13 = v26 - (char *)v16;
                  if (v26 - (char *)v16 == -1) {
                    return;
                  }
                }
                else
                {
                  std::string::size_type v13 = 0;
                }
              }
            }
            std::string::__throw_out_of_range[abi:ne180100]();
          }
        }
        return;
      }
      xpc_object_t v29 = (std::string *)(v32 + 1);
      uint64_t size = v27 - (v32 + 1);
    }
    while (size >= v9);
  }
}

void sub_1C5ACEBF0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *util::strip_leading_trailing@<X0>(void *result@<X0>, void **a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = *((unsigned __int8 *)result + 23);
  int v5 = (void *)*result;
  unint64_t v6 = result[1];
  if ((v4 & 0x80u) == 0) {
    unsigned int v7 = result;
  }
  else {
    unsigned int v7 = (void *)*result;
  }
  if ((v4 & 0x80u) == 0) {
    uint64_t v8 = *((unsigned __int8 *)result + 23);
  }
  else {
    uint64_t v8 = result[1];
  }
  int v9 = *((char *)a2 + 23);
  if (v9 >= 0) {
    std::string::size_type v10 = a2;
  }
  else {
    std::string::size_type v10 = *a2;
  }
  if (v9 >= 0) {
    size_t v11 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v11 = (size_t)a2[1];
  }
  if (!v8) {
    goto LABEL_26;
  }
  std::string::size_type v12 = result;
  unint64_t v13 = 0;
  if (!v11)
  {
    uint64_t v14 = v8 - 1;
    if ((v4 & 0x80) == 0) {
      goto LABEL_28;
    }
    goto LABEL_24;
  }
  while (1)
  {
    uint64_t result = memchr(v10, *((char *)v7 + v13), v11);
    if (!result) {
      break;
    }
    if (v8 == ++v13) {
      goto LABEL_26;
    }
  }
  if (v13 == -1)
  {
LABEL_26:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  do
  {
    if (!v8)
    {
      uint64_t v14 = -1;
      if ((v4 & 0x80) == 0) {
        goto LABEL_28;
      }
LABEL_24:
      if (v6 >= v13)
      {
        unint64_t v4 = v6;
        std::string::size_type v12 = v5;
        goto LABEL_29;
      }
LABEL_41:
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t result = memchr(v10, *((char *)v7 + --v8), v11);
  }
  while (result);
  uint64_t v14 = v8;
  if ((v4 & 0x80) != 0) {
    goto LABEL_24;
  }
LABEL_28:
  if (v13 > v4) {
    goto LABEL_41;
  }
LABEL_29:
  unint64_t v15 = v14 - v13 + 1;
  if (v4 - v13 >= v15) {
    size_t v16 = v15;
  }
  else {
    size_t v16 = v4 - v13;
  }
  if (v16 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v16 >= 0x17)
  {
    uint64_t v17 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v17 = v16 | 7;
    }
    uint64_t v18 = v17 + 1;
    int64_t v19 = operator new(v17 + 1);
    a3[1] = v16;
    a3[2] = v18 | 0x8000000000000000;
    *a3 = v19;
    a3 = v19;
    goto LABEL_39;
  }
  *((unsigned char *)a3 + 23) = v16;
  if (v16) {
LABEL_39:
  }
    uint64_t result = memmove(a3, (char *)v12 + v13, v16);
  *((unsigned char *)a3 + v16) = 0;
  return result;
}

uint64_t util::to_upper(uint64_t result)
{
  uint64_t v1 = *(unsigned __int8 *)(result + 23);
  int v2 = (char)v1;
  uint64_t v3 = (unsigned char *)(result + v1);
  if (v2 >= 0) {
    unint64_t v4 = v3;
  }
  else {
    unint64_t v4 = (unsigned char *)(*(void *)result + *(void *)(result + 8));
  }
  if (v2 >= 0) {
    int v5 = (unsigned char *)result;
  }
  else {
    int v5 = *(unsigned char **)result;
  }
  for (; v5 != v4; ++v5)
  {
    uint64_t result = __toupper((char)*v5);
    *int v5 = result;
  }
  return result;
}

BOOL util::equal_nocase(const char *a1, const char *a2)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  return strcasecmp(a1, a2) == 0;
}

void util::strip_non_alpha(std::string *a1)
{
  std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    uint64_t v3 = (char *)a1;
  }
  else {
    uint64_t v3 = (char *)a1->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  if (!size) {
    goto LABEL_21;
  }
  unint64_t v4 = &v3[size];
  std::string::size_type v5 = size - 1;
  uint64_t v6 = MEMORY[0x1E4F14390];
  while (1)
  {
    unsigned int v7 = *v3;
    if ((v7 & 0x80000000) != 0)
    {
      if (!__maskrune(v7, 0x100uLL)) {
        break;
      }
      goto LABEL_9;
    }
    if ((*(_DWORD *)(v6 + 4 * v7 + 60) & 0x100) == 0) {
      break;
    }
LABEL_9:
    ++v3;
    --v5;
    if (v3 == v4) {
      goto LABEL_22;
    }
  }
  if (v3 != v4 && v3 + 1 != v4)
  {
    uint64_t v8 = 1;
    unint64_t v4 = v3;
    while (1)
    {
      unsigned int v9 = v3[v8];
      if ((v9 & 0x80000000) == 0) {
        break;
      }
      if (__maskrune(v9, 0x100uLL)) {
        goto LABEL_16;
      }
LABEL_17:
      ++v8;
      if (!--v5) {
        goto LABEL_22;
      }
    }
    if ((*(_DWORD *)(v6 + 4 * v9 + 60) & 0x100) == 0) {
      goto LABEL_17;
    }
LABEL_16:
    *v4++ = v3[v8];
    goto LABEL_17;
  }
LABEL_21:
  unint64_t v4 = v3;
LABEL_22:
  unint64_t v10 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  int v11 = (char)v10;
  std::string::size_type v12 = a1->__r_.__value_.__r.__words[0];
  unint64_t v13 = (char *)(a1->__r_.__value_.__r.__words[0] + a1->__r_.__value_.__l.__size_);
  if ((v10 & 0x80u) != 0)
  {
    uint64_t v14 = (std::string *)a1->__r_.__value_.__r.__words[0];
  }
  else
  {
    unint64_t v13 = (char *)a1 + v10;
    uint64_t v14 = a1;
  }
  if ((v10 & 0x80u) != 0) {
    unint64_t v10 = a1->__r_.__value_.__l.__size_;
  }
  std::string::size_type v15 = v4 - (char *)v14;
  if (v10 < v4 - (char *)v14) {
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v13 - v4 == -1)
  {
    if (v11 < 0)
    {
      a1->__r_.__value_.__l.__size_ = v15;
      *(unsigned char *)(v12 + v15) = 0;
    }
    else
    {
      *((unsigned char *)&a1->__r_.__value_.__s + 23) = v15 & 0x7F;
      a1->__r_.__value_.__s.__data_[v15] = 0;
    }
  }
  else
  {
    std::string::__erase_external_with_move(a1, v15, v13 - v4);
  }
}

void util::readPlistToCFDictionary(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v2 = (const char *)a1;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (*(char *)(a1 + 23) < 0) {
    int v2 = *(const char **)a1;
  }
  std::string::size_type v5 = (__CFError *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v2, 0x8000100u);
  error[3] = v5;
  uint64_t v6 = CFURLCreateWithFileSystemPath(v4, (CFStringRef)v5, kCFURLPOSIXPathStyle, 0);
  error[2] = v6;
  *a2 = 0;
  if (v6) {
    unsigned int v7 = ctu::SharedRef<__CFURL const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFURL const>::get;
  }
  else {
    unsigned int v7 = 0;
  }
  if (v7)
  {
    uint64_t v8 = CFReadStreamCreateWithFile(v4, v6);
    unsigned int v9 = v8;
    error[1] = v8;
    if (v8) {
      unint64_t v10 = ctu::SharedRef<__CFReadStream,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFReadStream>::get;
    }
    else {
      unint64_t v10 = 0;
    }
    if (!v10) {
      goto LABEL_16;
    }
    CFReadStreamOpen(v8);
    error[0] = 0;
    CFPropertyListRef v11 = CFPropertyListCreateWithStream(v4, v9, 0, 1uLL, 0, error);
    *a2 = v11;
    CFReadStreamClose(v9);
    if (!error[0]) {
      goto LABEL_16;
    }
    CFErrorGetDomain(error[0]);
    memset(buf, 0, sizeof(buf));
    ctu::cf::assign();
    *(_OWORD *)__p = *(_OWORD *)buf;
    uint64_t v16 = *(void *)&buf[16];
    std::string::size_type v12 = GetOsLogContext()[1];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      CFIndex Code = CFErrorGetCode(error[0]);
      uint64_t v14 = __p;
      if (v16 < 0) {
        uint64_t v14 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 138412802;
      *(void *)&uint8_t buf[4] = v6;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = Code;
      *(_WORD *)&buf[22] = 2080;
      int64_t v19 = v14;
      _os_log_error_impl(&dword_1C59C6000, v12, OS_LOG_TYPE_ERROR, "Failed to create %@ PropertyList: %ld: %s", buf, 0x20u);
    }
    CFRelease(error[0]);
    *a2 = 0;
    if (v11) {
      CFRelease(v11);
    }
    if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
LABEL_16:
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
    operator delete(__p[0]);
    if (v9) {
LABEL_17:
    }
      CFRelease(v9);
  }
LABEL_18:
  if (v6) {
    CFRelease(v6);
  }
  if (v5) {
    CFRelease(v5);
  }
}

void sub_1C5ACF21C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::SharedRef<__CFURL const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFURL const>::get(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t ctu::SharedRef<__CFReadStream,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFReadStream>::get(uint64_t a1)
{
  return *(void *)a1;
}

const void **ctu::cf::CFSharedRef<__CFReadStream>::~CFSharedRef(const void **a1)
{
  int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **ctu::cf::CFSharedRef<__CFURL const>::~CFSharedRef(const void **a1)
{
  int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void util::moveDirContent(std::string::size_type a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5)
{
  uint64_t v140 = *MEMORY[0x1E4F143B8];
  uint64_t v131 = 0;
  v132 = 0;
  uint64_t v133 = 0;
  std::locale::locale(&v125, (const std::locale *)a5);
  long long v126 = *(_OWORD *)(a5 + 8);
  long long v127 = *(_OWORD *)(a5 + 24);
  uint64_t v8 = *(std::__shared_weak_count **)(a5 + 48);
  uint64_t v128 = *(void *)(a5 + 40);
  v129 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v130 = *(void *)(a5 + 56);
  int filtered_files = ctu::fs::get_filtered_files();
  unint64_t v10 = v129;
  if (!v129 || atomic_fetch_add(&v129->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    std::locale::~locale(&v125);
    if (filtered_files) {
      goto LABEL_6;
    }
LABEL_104:
    uint64_t v53 = GetOsLogContext()[1];
    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
    {
      std::string::size_type v109 = a1;
      if (*(char *)(a1 + 23) < 0) {
        std::string::size_type v109 = *(void *)a1;
      }
      LODWORD(v139.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v139.__r_.__value_.__r.__words + 4) = v109;
      _os_log_error_impl(&dword_1C59C6000, v53, OS_LOG_TYPE_ERROR, "Failed to find a content in %s", (uint8_t *)&v139, 0xCu);
    }
    goto LABEL_105;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  std::locale::~locale(&v125);
  if (!filtered_files) {
    goto LABEL_104;
  }
LABEL_6:
  CFPropertyListRef v11 = v131;
  size_t v113 = (char *)v132;
  if (v131 != (char *)v132)
  {
    if (a4)
    {
      while (1)
      {
        memset(&v139, 170, sizeof(v139));
        if (v11[23] < 0)
        {
          std::string::__init_copy_ctor_external(&v139, *(const std::string::value_type **)v11, *((void *)v11 + 1));
        }
        else
        {
          long long v12 = *(_OWORD *)v11;
          v139.__r_.__value_.__r.__words[2] = *((void *)v11 + 2);
          *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v12;
        }
        int v13 = *(char *)(a1 + 23);
        if (v13 >= 0) {
          size_t v14 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          size_t v14 = *(void *)(a1 + 8);
        }
        unint64_t v15 = v14 + 1;
        memset(&__p, 170, sizeof(__p));
        if (v14 + 1 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v15 >= 0x17) {
          break;
        }
        memset(&__p, 0, sizeof(__p));
        p_p = &__p;
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = v14 + 1;
        if (v14) {
          goto LABEL_24;
        }
LABEL_28:
        *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v14) = 47;
        if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v20 = &v139;
        }
        else {
          uint64_t v20 = (std::string *)v139.__r_.__value_.__r.__words[0];
        }
        if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v139.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v139.__r_.__value_.__l.__size_;
        }
        int v22 = std::string::append(&__p, (const std::string::value_type *)v20, size);
        long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v124.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        int is_directory = ctu::fs::is_directory();
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v124.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_45;
          }
LABEL_36:
          if (is_directory) {
            goto LABEL_37;
          }
LABEL_46:
          xpc_object_t v29 = GetOsLogContext()[1];
          if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
            goto LABEL_83;
          }
          int v30 = *(char *)(a1 + 23);
          if (v30 >= 0) {
            size_t v31 = *(unsigned __int8 *)(a1 + 23);
          }
          else {
            size_t v31 = *(void *)(a1 + 8);
          }
          unint64_t v32 = v31 + 1;
          memset(&__p, 170, sizeof(__p));
          if (v31 + 1 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          if (v32 >= 0x17)
          {
            int v110 = v30;
            uint64_t v45 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v32 | 7) != 0x17) {
              uint64_t v45 = v32 | 7;
            }
            uint64_t v46 = v45 + 1;
            std::string::size_type v33 = (std::string *)operator new(v45 + 1);
            __p.__r_.__value_.__l.__size_ = v31 + 1;
            __p.__r_.__value_.__r.__words[2] = v46 | 0x8000000000000000;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
            int v30 = v110;
          }
          else
          {
            memset(&__p, 0, sizeof(__p));
            std::string::size_type v33 = &__p;
            *((unsigned char *)&__p.__r_.__value_.__s + 23) = v31 + 1;
            if (!v31) {
              goto LABEL_93;
            }
          }
          if (v30 >= 0) {
            xpc_object_t v47 = (const void *)a1;
          }
          else {
            xpc_object_t v47 = *(const void **)a1;
          }
          memmove(v33, v47, v31);
LABEL_93:
          *(_WORD *)((char *)&v33->__r_.__value_.__l.__data_ + v31) = 47;
          if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            CFTypeRef v48 = &v139;
          }
          else {
            CFTypeRef v48 = (std::string *)v139.__r_.__value_.__r.__words[0];
          }
          if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v49 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v49 = v139.__r_.__value_.__l.__size_;
          }
          xpc_object_t v50 = std::string::append(&__p, (const std::string::value_type *)v48, v49);
          long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
          v124.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v51;
          v50->__r_.__value_.__l.__size_ = 0;
          v50->__r_.__value_.__r.__words[2] = 0;
          v50->__r_.__value_.__r.__words[0] = 0;
          uint64_t v52 = &v124;
          if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v52 = (std::string *)v124.__r_.__value_.__r.__words[0];
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v52;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a4;
          _os_log_error_impl(&dword_1C59C6000, v29, OS_LOG_TYPE_ERROR, "%s is not a directory. So, skip to move it with the depth (%d)", (uint8_t *)&buf, 0x12u);
          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_82;
          }
LABEL_77:
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_83;
          }
LABEL_9:
          operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_84;
          }
LABEL_10:
          v11 += 24;
          if (v11 == v113) {
            goto LABEL_105;
          }
        }
        else
        {
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_36;
          }
LABEL_45:
          operator delete(__p.__r_.__value_.__l.__data_);
          if (!is_directory) {
            goto LABEL_46;
          }
LABEL_37:
          int v25 = *(char *)(a1 + 23);
          if (v25 >= 0) {
            size_t v26 = *(unsigned __int8 *)(a1 + 23);
          }
          else {
            size_t v26 = *(void *)(a1 + 8);
          }
          unint64_t v27 = v26 + 1;
          memset(&__p, 170, sizeof(__p));
          if (v26 + 1 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          if (v27 >= 0x17)
          {
            uint64_t v34 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v27 | 7) != 0x17) {
              uint64_t v34 = v27 | 7;
            }
            uint64_t v35 = v34 + 1;
            int v28 = (std::string *)operator new(v34 + 1);
            __p.__r_.__value_.__l.__size_ = v26 + 1;
            __p.__r_.__value_.__r.__words[2] = v35 | 0x8000000000000000;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
          }
          else
          {
            memset(&__p, 0, sizeof(__p));
            int v28 = &__p;
            *((unsigned char *)&__p.__r_.__value_.__s + 23) = v26 + 1;
            if (!v26) {
              goto LABEL_61;
            }
          }
          if (v25 >= 0) {
            int v36 = (const void *)a1;
          }
          else {
            int v36 = *(const void **)a1;
          }
          memmove(v28, v36, v26);
LABEL_61:
          *(_WORD *)((char *)&v28->__r_.__value_.__l.__data_ + v26) = 47;
          if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            CFTypeID v37 = &v139;
          }
          else {
            CFTypeID v37 = (std::string *)v139.__r_.__value_.__r.__words[0];
          }
          if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v38 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v38 = v139.__r_.__value_.__l.__size_;
          }
          int64_t v39 = std::string::append(&__p, (const std::string::value_type *)v37, v38);
          long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
          v124.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v40;
          v39->__r_.__value_.__l.__size_ = 0;
          v39->__r_.__value_.__r.__words[2] = 0;
          v39->__r_.__value_.__r.__words[0] = 0;
          int v41 = std::string::append(&v124, "/", 1uLL);
          long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
          std::string::size_type v122 = v41->__r_.__value_.__r.__words[2];
          *(_OWORD *)uint64_t v121 = v42;
          v41->__r_.__value_.__l.__size_ = 0;
          v41->__r_.__value_.__r.__words[2] = 0;
          v41->__r_.__value_.__r.__words[0] = 0;
          if (*(char *)(a2 + 23) < 0) {
            std::string::__init_copy_ctor_external(&v120, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
          }
          else {
            std::string v120 = *(std::string *)a2;
          }
          std::locale::locale(&v114, (const std::locale *)a5);
          long long v115 = *(_OWORD *)(a5 + 8);
          long long v116 = *(_OWORD *)(a5 + 24);
          int64_t v43 = *(std::__shared_weak_count **)(a5 + 48);
          uint64_t v117 = *(void *)(a5 + 40);
          v118 = v43;
          if (v43) {
            atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v119 = *(void *)(a5 + 56);
          util::moveDirContent(v121, &v120, a3, (a4 - 1), &v114);
          uint64_t v44 = v118;
          if (v118 && !atomic_fetch_add(&v118->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
            std::locale::~locale(&v114);
            if ((SHIBYTE(v120.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_75:
              if ((SHIBYTE(v122) & 0x80000000) == 0) {
                goto LABEL_76;
              }
LABEL_81:
              operator delete(v121[0]);
              if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
                goto LABEL_82;
              }
              goto LABEL_77;
            }
          }
          else
          {
            std::locale::~locale(&v114);
            if ((SHIBYTE(v120.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_75;
            }
          }
          operator delete(v120.__r_.__value_.__l.__data_);
          if (SHIBYTE(v122) < 0) {
            goto LABEL_81;
          }
LABEL_76:
          if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_77;
          }
LABEL_82:
          operator delete(v124.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_9;
          }
LABEL_83:
          if ((SHIBYTE(v139.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_10;
          }
LABEL_84:
          operator delete(v139.__r_.__value_.__l.__data_);
          v11 += 24;
          if (v11 == v113) {
            goto LABEL_105;
          }
        }
      }
      uint64_t v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17) {
        uint64_t v17 = v15 | 7;
      }
      uint64_t v18 = v17 + 1;
      p_p = (std::string *)operator new(v17 + 1);
      __p.__r_.__value_.__l.__size_ = v14 + 1;
      __p.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
LABEL_24:
      if (v13 >= 0) {
        int64_t v19 = (const void *)a1;
      }
      else {
        int64_t v19 = *(const void **)a1;
      }
      memmove(p_p, v19, v14);
      goto LABEL_28;
    }
    while (1)
    {
      memset(&v139, 170, sizeof(v139));
      if (v11[23] < 0)
      {
        std::string::__init_copy_ctor_external(&v139, *(const std::string::value_type **)v11, *((void *)v11 + 1));
      }
      else
      {
        long long v57 = *(_OWORD *)v11;
        v139.__r_.__value_.__r.__words[2] = *((void *)v11 + 2);
        *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v57;
      }
      memset(&v124, 170, sizeof(v124));
      int v58 = *(char *)(a2 + 23);
      if (v58 >= 0) {
        size_t v59 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        size_t v59 = *(void *)(a2 + 8);
      }
      unint64_t v60 = v59 + 1;
      memset(&buf, 170, sizeof(buf));
      if (v59 + 1 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v60 >= 0x17)
      {
        uint64_t v62 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v60 | 7) != 0x17) {
          uint64_t v62 = v60 | 7;
        }
        uint64_t v63 = v62 + 1;
        p_std::string buf = (std::string *)operator new(v62 + 1);
        buf.__r_.__value_.__l.__size_ = v59 + 1;
        buf.__r_.__value_.__r.__words[2] = v63 | 0x8000000000000000;
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
      }
      else
      {
        memset(&buf, 0, sizeof(buf));
        p_std::string buf = &buf;
        *((unsigned char *)&buf.__r_.__value_.__s + 23) = v59 + 1;
        if (!v59) {
          goto LABEL_136;
        }
      }
      if (v58 >= 0) {
        uint64_t v64 = (const void *)a2;
      }
      else {
        uint64_t v64 = *(const void **)a2;
      }
      memmove(p_buf, v64, v59);
LABEL_136:
      *(_WORD *)((char *)&p_buf->__r_.__value_.__l.__data_ + v59) = 47;
      if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v65 = &v139;
      }
      else {
        v65 = (std::string *)v139.__r_.__value_.__r.__words[0];
      }
      if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v66 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v66 = v139.__r_.__value_.__l.__size_;
      }
      uint64_t v67 = std::string::append(&buf, (const std::string::value_type *)v65, v66);
      long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v68;
      v67->__r_.__value_.__l.__size_ = 0;
      v67->__r_.__value_.__r.__words[2] = 0;
      v67->__r_.__value_.__r.__words[0] = 0;
      ctu::fs::get_unique_filename();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_144;
        }
      }
      else if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_144;
      }
      operator delete(buf.__r_.__value_.__l.__data_);
LABEL_144:
      int v69 = *(char *)(a1 + 23);
      if (v69 >= 0) {
        size_t v70 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        size_t v70 = *(void *)(a1 + 8);
      }
      unint64_t v71 = v70 + 1;
      memset(&buf, 170, sizeof(buf));
      if (v70 + 1 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v71 >= 0x17)
      {
        uint64_t v73 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v71 | 7) != 0x17) {
          uint64_t v73 = v71 | 7;
        }
        uint64_t v74 = v73 + 1;
        CFNumberRef v72 = (std::string *)operator new(v73 + 1);
        buf.__r_.__value_.__l.__size_ = v70 + 1;
        buf.__r_.__value_.__r.__words[2] = v74 | 0x8000000000000000;
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
LABEL_154:
        if (v69 >= 0) {
          char v75 = (const void *)a1;
        }
        else {
          char v75 = *(const void **)a1;
        }
        memmove(v72, v75, v70);
        goto LABEL_158;
      }
      memset(&buf, 0, sizeof(buf));
      CFNumberRef v72 = &buf;
      *((unsigned char *)&buf.__r_.__value_.__s + 23) = v70 + 1;
      if (v70) {
        goto LABEL_154;
      }
LABEL_158:
      *(_WORD *)((char *)&v72->__r_.__value_.__l.__data_ + v70) = 47;
      if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v76 = &v139;
      }
      else {
        long long v76 = (std::string *)v139.__r_.__value_.__r.__words[0];
      }
      if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v77 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v77 = v139.__r_.__value_.__l.__size_;
      }
      long long v78 = std::string::append(&buf, (const std::string::value_type *)v76, v77);
      long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v79;
      v78->__r_.__value_.__l.__size_ = 0;
      v78->__r_.__value_.__r.__words[2] = 0;
      v78->__r_.__value_.__r.__words[0] = 0;
      char v80 = ctu::fs::rename();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_178;
        }
LABEL_166:
        if (v80) {
          goto LABEL_167;
        }
LABEL_179:
        v86 = GetOsLogContext()[1];
        if (!os_log_type_enabled(v86, OS_LOG_TYPE_ERROR)) {
          goto LABEL_206;
        }
        int v87 = *(char *)(a1 + 23);
        if (v87 >= 0) {
          size_t v88 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          size_t v88 = *(void *)(a1 + 8);
        }
        unint64_t v89 = v88 + 1;
        memset(&buf, 170, sizeof(buf));
        if (v88 + 1 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v89 >= 0x17)
        {
          uint64_t v100 = (v89 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v89 | 7) != 0x17) {
            uint64_t v100 = v89 | 7;
          }
          uint64_t v101 = v100 + 1;
          v90 = (std::string *)operator new(v100 + 1);
          buf.__r_.__value_.__l.__size_ = v88 + 1;
          buf.__r_.__value_.__r.__words[2] = v101 | 0x8000000000000000;
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v90;
        }
        else
        {
          memset(&buf, 0, sizeof(buf));
          v90 = &buf;
          *((unsigned char *)&buf.__r_.__value_.__s + 23) = v88 + 1;
          if (!v88) {
            goto LABEL_217;
          }
        }
        if (v87 >= 0) {
          xpc_object_t v102 = (const void *)a1;
        }
        else {
          xpc_object_t v102 = *(const void **)a1;
        }
        memmove(v90, v102, v88);
LABEL_217:
        *(_WORD *)((char *)&v90->__r_.__value_.__l.__data_ + v88) = 47;
        if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          xpc_object_t v103 = &v139;
        }
        else {
          xpc_object_t v103 = (std::string *)v139.__r_.__value_.__r.__words[0];
        }
        if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v104 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v104 = v139.__r_.__value_.__l.__size_;
        }
        xpc_object_t v105 = std::string::append(&buf, (const std::string::value_type *)v103, v104);
        long long v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v106;
        v105->__r_.__value_.__l.__size_ = 0;
        v105->__r_.__value_.__r.__words[2] = 0;
        v105->__r_.__value_.__r.__words[0] = 0;
        v107 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          v107 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        xpc_object_t v108 = &v124;
        if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          xpc_object_t v108 = (std::string *)v124.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)v134 = 136315394;
        v135 = v107;
        __int16 v136 = 2080;
        v137 = v108;
        _os_log_error_impl(&dword_1C59C6000, v86, OS_LOG_TYPE_ERROR, "Failed to move %s -> %s", v134, 0x16u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_228;
        }
LABEL_205:
        if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_206;
        }
LABEL_229:
        operator delete(buf.__r_.__value_.__l.__data_);
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_117;
        }
LABEL_207:
        if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_208;
        }
LABEL_118:
        v11 += 24;
        if (v11 == v113) {
          break;
        }
      }
      else
      {
        if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_166;
        }
LABEL_178:
        operator delete(buf.__r_.__value_.__l.__data_);
        if ((v80 & 1) == 0) {
          goto LABEL_179;
        }
LABEL_167:
        size_t v81 = GetOsLogContext()[1];
        if (!os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_206;
        }
        int v82 = *(char *)(a1 + 23);
        if (v82 >= 0) {
          size_t v83 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          size_t v83 = *(void *)(a1 + 8);
        }
        unint64_t v84 = v83 + 1;
        memset(&buf, 170, sizeof(buf));
        if (v83 + 1 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v84 >= 0x17)
        {
          uint64_t v91 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v84 | 7) != 0x17) {
            uint64_t v91 = v84 | 7;
          }
          uint64_t v92 = v91 + 1;
          unsigned int v85 = (std::string *)operator new(v91 + 1);
          buf.__r_.__value_.__l.__size_ = v83 + 1;
          buf.__r_.__value_.__r.__words[2] = v92 | 0x8000000000000000;
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v85;
        }
        else
        {
          memset(&buf, 0, sizeof(buf));
          unsigned int v85 = &buf;
          *((unsigned char *)&buf.__r_.__value_.__s + 23) = v83 + 1;
          if (!v83) {
            goto LABEL_194;
          }
        }
        if (v82 >= 0) {
          size_t v93 = (const void *)a1;
        }
        else {
          size_t v93 = *(const void **)a1;
        }
        memmove(v85, v93, v83);
LABEL_194:
        *(_WORD *)((char *)&v85->__r_.__value_.__l.__data_ + v83) = 47;
        if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v94 = &v139;
        }
        else {
          v94 = (std::string *)v139.__r_.__value_.__r.__words[0];
        }
        if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v95 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v95 = v139.__r_.__value_.__l.__size_;
        }
        uint64_t v96 = std::string::append(&buf, (const std::string::value_type *)v94, v95);
        long long v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v97;
        v96->__r_.__value_.__l.__size_ = 0;
        v96->__r_.__value_.__r.__words[2] = 0;
        v96->__r_.__value_.__r.__words[0] = 0;
        v98 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          v98 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        v99 = &v124;
        if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          v99 = (std::string *)v124.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)v134 = 136315394;
        v135 = v98;
        __int16 v136 = 2080;
        v137 = v99;
        _os_log_impl(&dword_1C59C6000, v81, OS_LOG_TYPE_DEFAULT, "Moved %s -> %s", v134, 0x16u);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_205;
        }
LABEL_228:
        operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_229;
        }
LABEL_206:
        if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_207;
        }
LABEL_117:
        operator delete(v124.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v139.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_118;
        }
LABEL_208:
        operator delete(v139.__r_.__value_.__l.__data_);
        v11 += 24;
        if (v11 == v113) {
          break;
        }
      }
    }
  }
LABEL_105:
  if (a3) {
    ctu::fs::remove_dir();
  }
  xpc_object_t v54 = (void **)v131;
  if (v131)
  {
    CFAllocatorRef v55 = v132;
    uint64_t v56 = v131;
    if (v132 != (void **)v131)
    {
      do
      {
        if (*((char *)v55 - 1) < 0) {
          operator delete(*(v55 - 3));
        }
        v55 -= 3;
      }
      while (v55 != v54);
      uint64_t v56 = v131;
    }
    v132 = v54;
    operator delete(v56);
  }
}

void sub_1C5AD0158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::locale a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,std::locale a58)
{
  if (a57 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v58 - 105) < 0) {
    operator delete(*(void **)(v58 - 128));
  }
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v58 - 216));
  _Unwind_Resume(a1);
}

void util::generateSHA256(const char *a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, unsigned __int8 **a4@<X8>)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v8 = (unsigned __int8 *)operator new(0x20uLL);
  a4[1] = v8 + 32;
  a4[2] = v8 + 32;
  *(_OWORD *)uint64_t v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *a4 = v8;
  if (!a2)
  {
    size_t v14 = GetOsLogContext()[1];
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      return;
    }
    LOWORD(c.count[0]) = 0;
    unint64_t v15 = "dataIn Buffer is NULL";
    p_CC_SHA256_CTX c = (uint8_t *)&c;
    uint64_t v17 = v14;
    uint32_t v18 = 2;
    goto LABEL_16;
  }
  *(void *)&c.wbuf[14] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&c.wbuf[6] = v9;
  *(_OWORD *)&c.wbuf[10] = v9;
  *(_OWORD *)&c.hash[6] = v9;
  *(_OWORD *)&c.wbuf[2] = v9;
  *(_OWORD *)c.count = v9;
  *(_OWORD *)&c.hash[2] = v9;
  if (!ctu::fs::get_file_size()) {
    return;
  }
  CC_SHA256_Init(&c);
  unint64_t v10 = a1;
  if (a1[23] < 0) {
    unint64_t v10 = *(const char **)a1;
  }
  int v11 = open(v10, 0);
  if (v11 < 1)
  {
    int64_t v19 = GetOsLogContext()[1];
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      return;
    }
    if (a1[23] < 0) {
      a1 = *(const char **)a1;
    }
    uint64_t v20 = __error();
    unsigned int v21 = strerror(*v20);
    int v22 = *__error();
    int v23 = *__error();
    *(_DWORD *)std::string buf = 136315906;
    size_t v31 = a1;
    __int16 v32 = 2080;
    std::string::size_type v33 = v21;
    __int16 v34 = 1024;
    int v35 = v22;
    __int16 v36 = 1024;
    int v37 = v23;
    unint64_t v15 = "Failed to open: %s : %s (%d, 0x%x)";
    p_CC_SHA256_CTX c = buf;
    uint64_t v17 = v19;
    uint32_t v18 = 34;
LABEL_16:
    _os_log_error_impl(&dword_1C59C6000, v17, OS_LOG_TYPE_ERROR, v15, p_c, v18);
    return;
  }
  unint64_t v12 = 0;
  while (1)
  {
    ssize_t v13 = read(v11, a2, a3);
    if (v13 == -1) {
      break;
    }
    CC_SHA256_Update(&c, a2, v13);
    v12 += v13;
    if (v12 >= 0xAAAAAAAAAAAAAAAALL) {
      goto LABEL_18;
    }
  }
  int64_t v24 = GetOsLogContext()[1];
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
  {
    if (a1[23] < 0) {
      a1 = *(const char **)a1;
    }
    int v25 = __error();
    size_t v26 = strerror(*v25);
    int v27 = *__error();
    int v28 = *__error();
    *(_DWORD *)std::string buf = 136315906;
    size_t v31 = a1;
    __int16 v32 = 2080;
    std::string::size_type v33 = v26;
    __int16 v34 = 1024;
    int v35 = v27;
    __int16 v36 = 1024;
    int v37 = v28;
    _os_log_error_impl(&dword_1C59C6000, v24, OS_LOG_TYPE_ERROR, "Failed to read: %s : %s (%d,0x%x)", buf, 0x22u);
  }
LABEL_18:
  CC_SHA256_Final(v8, &c);
  close(v11);
}

void sub_1C5AD0634(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1C5AD064C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1C5AD0664(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1C5AD067C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1C5AD0694(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1C5AD06AC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1C5AD06C4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1C5AD06DC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

BOOL util::markPurgeableFile(uint64_t *a1)
{
  uint64_t v1 = a1;
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = 65541;
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    int v2 = open((const char *)a1, 0);
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_9:
    unint64_t v12 = GetOsLogContext()[1];
    BOOL result = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    if (*((char *)v1 + 23) < 0) {
      uint64_t v1 = (uint64_t *)*v1;
    }
    ssize_t v13 = __error();
    size_t v14 = strerror(*v13);
    *(_DWORD *)std::string buf = 136315394;
    uint64_t v17 = v1;
    __int16 v18 = 2080;
    *(void *)int64_t v19 = v14;
    long long v9 = "Failed to open %s : %s";
    unint64_t v10 = v12;
    uint32_t v11 = 22;
    goto LABEL_13;
  }
  int v2 = open((const char *)*a1, 0);
  if (v2 < 0) {
    goto LABEL_9;
  }
LABEL_3:
  int v3 = v2;
  int v4 = ffsctl(v2, 0xC0084A44uLL, &v15, 0);
  close(v3);
  if (v4)
  {
    std::string::size_type v5 = GetOsLogContext()[1];
    BOOL result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    if (*((char *)v1 + 23) < 0) {
      uint64_t v1 = (uint64_t *)*v1;
    }
    unsigned int v7 = __error();
    uint64_t v8 = strerror(*v7);
    *(_DWORD *)std::string buf = 136315906;
    uint64_t v17 = v1;
    __int16 v18 = 1024;
    *(_DWORD *)int64_t v19 = v4;
    *(_WORD *)&void v19[4] = 2080;
    *(void *)&v19[6] = v8;
    __int16 v20 = 2048;
    uint64_t v21 = v15;
    long long v9 = "Failed to mark %s as purgeable %d (%s) (flags 0x%llx)";
    unint64_t v10 = v5;
    uint32_t v11 = 38;
LABEL_13:
    _os_log_error_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_ERROR, v9, buf, v11);
    return 0;
  }
  return 1;
}

BOOL util::checkLogFileAge(uint64_t a1, int64_t a2, uint64_t a3)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v95 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v97 = 0xAAAAAAAAAAAAAA00;
  long long v99 = v4;
  uint64_t v96 = 0;
  long long v98 = 0uLL;
  LOBYTE(v99) = 0;
  BYTE8(v99) = 0;
  uint64_t v100 = 0;
  memset(v94, 0, sizeof(v94));
  uint64_t v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = (std::sub_match<const char *> *)a1;
  }
  else {
    uint64_t v6 = *(std::sub_match<const char *> **)a1;
  }
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a1 + 8);
  }
  unsigned int v7 = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v6 + v5);
  unint64_t v103 = 0xAAAAAAAAAAAAAA00;
  __p.tm_gmtoff = 0xAAAAAAAAAAAAAAAALL;
  long long v106 = v4;
  __p.tm_zone = 0;
  uint64_t v102 = 0;
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  LOBYTE(v106) = 0;
  BYTE8(v106) = 0;
  uint64_t v107 = 0;
  memset(&__p, 0, 41);
  int v8 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a3, v6, (std::sub_match<const char *> *)((char *)v6 + v5), (std::vector<std::csub_match> *)&__p, 4160);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)v94, (uint64_t)v6, v7, (uint64_t *)&__p.tm_sec, 0);
  if (*(void *)&__p.tm_sec)
  {
    *(void *)&__p.tm_hour = *(void *)&__p.tm_sec;
    operator delete(*(void **)&__p.tm_sec);
  }
  if ((_BYTE)v99) {
    int v9 = 0;
  }
  else {
    int v9 = v8;
  }
  if (v9 != 1)
  {
    BOOL v21 = 0;
    uint64_t v22 = *(void **)v94;
    if (!*(void *)v94) {
      return v21;
    }
LABEL_23:
    *(void *)&v94[8] = v22;
    operator delete(v22);
    return v21;
  }
  memset(&__p, 0, sizeof(__p));
  uint64_t v10 = *(void *)v94;
  if (!*(unsigned char *)(*(void *)v94 + 40))
  {
    memset(&v93, 0, sizeof(v93));
    goto LABEL_33;
  }
  uint64_t v12 = *(void *)(*(void *)v94 + 24);
  uint32_t v11 = *(char **)(*(void *)v94 + 32);
  unint64_t v13 = (unint64_t)&v11[-v12];
  if ((unint64_t)&v11[-v12] > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v13 <= 0x16)
  {
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = (_BYTE)v11 - v12;
    size_t v14 = &v93;
    if ((char *)v12 != v11) {
      goto LABEL_16;
    }
LABEL_29:
    *size_t v14 = 0;
    goto LABEL_33;
  }
  uint64_t v24 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v13 | 7) != 0x17) {
    uint64_t v24 = v13 | 7;
  }
  uint64_t v25 = v24 + 1;
  size_t v14 = operator new(v24 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v11[-v12];
  v93.__r_.__value_.__r.__words[2] = v25 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
  if ((char *)v12 == v11) {
    goto LABEL_29;
  }
LABEL_16:
  if (v13 < 0x20 || (unint64_t)&v14[-v12] < 0x20)
  {
    uint64_t v15 = v14;
    uint64_t v16 = (char *)v12;
  }
  else
  {
    uint64_t v15 = &v14[v13 & 0xFFFFFFFFFFFFFFE0];
    uint64_t v16 = (char *)(v12 + (v13 & 0xFFFFFFFFFFFFFFE0));
    uint64_t v17 = (long long *)(v12 + 16);
    __int16 v18 = v14 + 16;
    unint64_t v19 = v13 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v20 = *v17;
      *(v18 - 1) = *(v17 - 1);
      _OWORD *v18 = v20;
      v17 += 2;
      v18 += 2;
      v19 -= 32;
    }
    while (v19);
    if (v13 == (v13 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_32;
    }
  }
  do
  {
    char v26 = *v16++;
    *v15++ = v26;
  }
  while (v16 != v11);
LABEL_32:
  unsigned char *v15 = 0;
LABEL_33:
  util::convert<int>(&v93, &__p.tm_year, 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    __p.tm_year -= 1900;
    if (*(unsigned char *)(v10 + 64)) {
      goto LABEL_35;
    }
LABEL_45:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_53;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  __p.tm_year -= 1900;
  if (!*(unsigned char *)(v10 + 64)) {
    goto LABEL_45;
  }
LABEL_35:
  uint64_t v28 = *(void *)(v10 + 48);
  int v27 = *(char **)(v10 + 56);
  unint64_t v29 = (unint64_t)&v27[-v28];
  if ((unint64_t)&v27[-v28] > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v29 <= 0x16)
  {
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = (_BYTE)v27 - v28;
    int v30 = &v93;
    if ((char *)v28 != v27) {
      goto LABEL_38;
    }
LABEL_49:
    unsigned char *v30 = 0;
    goto LABEL_53;
  }
  uint64_t v37 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v29 | 7) != 0x17) {
    uint64_t v37 = v29 | 7;
  }
  uint64_t v38 = v37 + 1;
  int v30 = operator new(v37 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v27[-v28];
  v93.__r_.__value_.__r.__words[2] = v38 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
  if ((char *)v28 == v27) {
    goto LABEL_49;
  }
LABEL_38:
  if (v29 < 0x20 || (unint64_t)&v30[-v28] < 0x20)
  {
    size_t v31 = v30;
    __int16 v32 = (char *)v28;
  }
  else
  {
    size_t v31 = &v30[v29 & 0xFFFFFFFFFFFFFFE0];
    __int16 v32 = (char *)(v28 + (v29 & 0xFFFFFFFFFFFFFFE0));
    std::string::size_type v33 = (long long *)(v28 + 16);
    __int16 v34 = v30 + 16;
    unint64_t v35 = v29 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v36 = *v33;
      *(v34 - 1) = *(v33 - 1);
      _OWORD *v34 = v36;
      v33 += 2;
      v34 += 2;
      v35 -= 32;
    }
    while (v35);
    if (v29 == (v29 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_52;
    }
  }
  do
  {
    char v39 = *v32++;
    *v31++ = v39;
  }
  while (v32 != v27);
LABEL_52:
  *size_t v31 = 0;
LABEL_53:
  util::convert<int>(&v93, &__p.tm_mon, 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    --__p.tm_mon;
    if (*(unsigned char *)(v10 + 88)) {
      goto LABEL_55;
    }
LABEL_65:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_73;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  --__p.tm_mon;
  if (!*(unsigned char *)(v10 + 88)) {
    goto LABEL_65;
  }
LABEL_55:
  uint64_t v41 = *(void *)(v10 + 72);
  long long v40 = *(char **)(v10 + 80);
  unint64_t v42 = (unint64_t)&v40[-v41];
  if ((unint64_t)&v40[-v41] > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v42 <= 0x16)
  {
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = (_BYTE)v40 - v41;
    int64_t v43 = &v93;
    if ((char *)v41 != v40) {
      goto LABEL_58;
    }
LABEL_69:
    *int64_t v43 = 0;
    goto LABEL_73;
  }
  uint64_t v50 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v42 | 7) != 0x17) {
    uint64_t v50 = v42 | 7;
  }
  uint64_t v51 = v50 + 1;
  int64_t v43 = operator new(v50 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v40[-v41];
  v93.__r_.__value_.__r.__words[2] = v51 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
  if ((char *)v41 == v40) {
    goto LABEL_69;
  }
LABEL_58:
  if (v42 < 0x20 || (unint64_t)&v43[-v41] < 0x20)
  {
    uint64_t v44 = v43;
    uint64_t v45 = (char *)v41;
  }
  else
  {
    uint64_t v44 = &v43[v42 & 0xFFFFFFFFFFFFFFE0];
    uint64_t v45 = (char *)(v41 + (v42 & 0xFFFFFFFFFFFFFFE0));
    uint64_t v46 = (long long *)(v41 + 16);
    xpc_object_t v47 = v43 + 16;
    unint64_t v48 = v42 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v49 = *v46;
      *(v47 - 1) = *(v46 - 1);
      *xpc_object_t v47 = v49;
      v46 += 2;
      v47 += 2;
      v48 -= 32;
    }
    while (v48);
    if (v42 == (v42 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_72;
    }
  }
  do
  {
    char v52 = *v45++;
    *v44++ = v52;
  }
  while (v45 != v40);
LABEL_72:
  unsigned char *v44 = 0;
LABEL_73:
  util::convert<int>(&v93, (_DWORD *)((unint64_t)&__p | 0xC), 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(v10 + 112)) {
      goto LABEL_75;
    }
LABEL_85:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_93;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  if (!*(unsigned char *)(v10 + 112)) {
    goto LABEL_85;
  }
LABEL_75:
  uint64_t v54 = *(void *)(v10 + 96);
  uint64_t v53 = *(char **)(v10 + 104);
  unint64_t v55 = (unint64_t)&v53[-v54];
  if ((unint64_t)&v53[-v54] > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v55 <= 0x16)
  {
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = (_BYTE)v53 - v54;
    uint64_t v56 = &v93;
    if ((char *)v54 != v53) {
      goto LABEL_78;
    }
LABEL_89:
    *uint64_t v56 = 0;
    goto LABEL_93;
  }
  uint64_t v63 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v55 | 7) != 0x17) {
    uint64_t v63 = v55 | 7;
  }
  uint64_t v64 = v63 + 1;
  uint64_t v56 = operator new(v63 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v53[-v54];
  v93.__r_.__value_.__r.__words[2] = v64 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
  if ((char *)v54 == v53) {
    goto LABEL_89;
  }
LABEL_78:
  if (v55 < 0x20 || (unint64_t)&v56[-v54] < 0x20)
  {
    long long v57 = v56;
    uint64_t v58 = (char *)v54;
  }
  else
  {
    long long v57 = &v56[v55 & 0xFFFFFFFFFFFFFFE0];
    uint64_t v58 = (char *)(v54 + (v55 & 0xFFFFFFFFFFFFFFE0));
    size_t v59 = (long long *)(v54 + 16);
    unint64_t v60 = v56 + 16;
    unint64_t v61 = v55 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v62 = *v59;
      *(v60 - 1) = *(v59 - 1);
      *unint64_t v60 = v62;
      v59 += 2;
      v60 += 2;
      v61 -= 32;
    }
    while (v61);
    if (v55 == (v55 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_92;
    }
  }
  do
  {
    char v65 = *v58++;
    *v57++ = v65;
  }
  while (v58 != v53);
LABEL_92:
  *long long v57 = 0;
LABEL_93:
  util::convert<int>(&v93, &__p.tm_hour, 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(v10 + 136)) {
      goto LABEL_95;
    }
LABEL_105:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_113;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  if (!*(unsigned char *)(v10 + 136)) {
    goto LABEL_105;
  }
LABEL_95:
  uint64_t v67 = *(void *)(v10 + 120);
  std::string::size_type v66 = *(char **)(v10 + 128);
  unint64_t v68 = (unint64_t)&v66[-v67];
  if ((unint64_t)&v66[-v67] > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v68 <= 0x16)
  {
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = (_BYTE)v66 - v67;
    int v69 = &v93;
    if ((char *)v67 != v66) {
      goto LABEL_98;
    }
LABEL_109:
    *int v69 = 0;
    goto LABEL_113;
  }
  uint64_t v76 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v68 | 7) != 0x17) {
    uint64_t v76 = v68 | 7;
  }
  uint64_t v77 = v76 + 1;
  int v69 = operator new(v76 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v66[-v67];
  v93.__r_.__value_.__r.__words[2] = v77 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
  if ((char *)v67 == v66) {
    goto LABEL_109;
  }
LABEL_98:
  if (v68 < 0x20 || (unint64_t)&v69[-v67] < 0x20)
  {
    size_t v70 = v69;
    unint64_t v71 = (char *)v67;
  }
  else
  {
    size_t v70 = &v69[v68 & 0xFFFFFFFFFFFFFFE0];
    unint64_t v71 = (char *)(v67 + (v68 & 0xFFFFFFFFFFFFFFE0));
    CFNumberRef v72 = (long long *)(v67 + 16);
    uint64_t v73 = v69 + 16;
    unint64_t v74 = v68 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v75 = *v72;
      *(v73 - 1) = *(v72 - 1);
      _OWORD *v73 = v75;
      v72 += 2;
      v73 += 2;
      v74 -= 32;
    }
    while (v74);
    if (v68 == (v68 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_112;
    }
  }
  do
  {
    char v78 = *v71++;
    *v70++ = v78;
  }
  while (v71 != v66);
LABEL_112:
  unsigned char *v70 = 0;
LABEL_113:
  util::convert<int>(&v93, &__p.tm_min, 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(v10 + 160)) {
      goto LABEL_115;
    }
LABEL_125:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_133;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  if (!*(unsigned char *)(v10 + 160)) {
    goto LABEL_125;
  }
LABEL_115:
  uint64_t v80 = *(void *)(v10 + 144);
  long long v79 = *(char **)(v10 + 152);
  unint64_t v81 = (unint64_t)&v79[-v80];
  if ((unint64_t)&v79[-v80] > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v81 <= 0x16)
  {
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = (_BYTE)v79 - v80;
    int v82 = &v93;
    if ((char *)v80 != v79) {
      goto LABEL_118;
    }
LABEL_129:
    *int v82 = 0;
    goto LABEL_133;
  }
  uint64_t v89 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v81 | 7) != 0x17) {
    uint64_t v89 = v81 | 7;
  }
  uint64_t v90 = v89 + 1;
  int v82 = operator new(v89 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v79[-v80];
  v93.__r_.__value_.__r.__words[2] = v90 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
  if ((char *)v80 == v79) {
    goto LABEL_129;
  }
LABEL_118:
  if (v81 < 0x20 || (unint64_t)&v82[-v80] < 0x20)
  {
    size_t v83 = v82;
    unint64_t v84 = (char *)v80;
  }
  else
  {
    size_t v83 = &v82[v81 & 0xFFFFFFFFFFFFFFE0];
    unint64_t v84 = (char *)(v80 + (v81 & 0xFFFFFFFFFFFFFFE0));
    unsigned int v85 = (long long *)(v80 + 16);
    v86 = v82 + 16;
    unint64_t v87 = v81 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v88 = *v85;
      *(v86 - 1) = *(v85 - 1);
      _OWORD *v86 = v88;
      v85 += 2;
      v86 += 2;
      v87 -= 32;
    }
    while (v87);
    if (v81 == (v81 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_132;
    }
  }
  do
  {
    char v91 = *v84++;
    *v83++ = v91;
  }
  while (v84 != v79);
LABEL_132:
  *size_t v83 = 0;
LABEL_133:
  util::convert<int>(&v93, &__p, 10);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v93.__r_.__value_.__l.__data_);
  }
  __p.tm_isdst = -1;
  time_t v92 = mktime(&__p);
  v93.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  v93.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday((timeval *)&v93, 0);
  BOOL v21 = (int64_t)(v93.__r_.__value_.__r.__words[0] - v92) > a2;
  uint64_t v22 = *(void **)v94;
  if (*(void *)v94) {
    goto LABEL_23;
  }
  return v21;
}

void sub_1C5AD112C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void util::findBasebandLogInfoFile(const void **a1@<X0>, long long **a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  uint64_t v46 = a3;
  a3[2] = 0;
  int v3 = *a2;
  xpc_object_t v47 = a2[1];
  if (v3 == v47) {
    return;
  }
  while (1)
  {
    memset(&v49, 170, sizeof(v49));
    if (*((char *)v3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)v3, *((void *)v3 + 1));
    }
    else
    {
      long long v5 = *v3;
      v49.__r_.__value_.__r.__words[2] = *((void *)v3 + 2);
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v5;
    }
    int v6 = *((char *)a1 + 23);
    if (v6 >= 0) {
      size_t v7 = *((unsigned __int8 *)a1 + 23);
    }
    else {
      size_t v7 = (size_t)a1[1];
    }
    int v8 = SHIBYTE(v49.__r_.__value_.__r.__words[2]);
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v49.__r_.__value_.__l.__size_;
    }
    unint64_t v10 = size + v7;
    memset(__dst, 170, sizeof(__dst));
    if (size + v7 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v10 <= 0x16)
    {
      memset(__dst, 0, sizeof(__dst));
      uint32_t v11 = __dst;
      HIBYTE(__dst[2]) = size + v7;
      if (!v7) {
        goto LABEL_20;
      }
LABEL_16:
      if (v6 >= 0) {
        uint64_t v12 = a1;
      }
      else {
        uint64_t v12 = *a1;
      }
      memmove(v11, v12, v7);
      goto LABEL_20;
    }
    uint64_t v18 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v18 = v10 | 7;
    }
    uint64_t v19 = v18 + 1;
    uint32_t v11 = (void **)operator new(v18 + 1);
    __dst[1] = (void *)(size + v7);
    __dst[2] = (void *)(v19 | 0x8000000000000000);
    __dst[0] = v11;
    if (v7) {
      goto LABEL_16;
    }
LABEL_20:
    unint64_t v13 = (char *)v11 + v7;
    if (size)
    {
      if (v8 >= 0) {
        size_t v14 = &v49;
      }
      else {
        size_t v14 = (std::string *)v49.__r_.__value_.__r.__words[0];
      }
      memmove(v13, v14, size);
    }
    v13[size] = 0;
    v15.tv_seCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
    v15.tv_nseCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&v50.st_blksize_t size = v15;
    *(timespec *)v50.st_qspare = v15;
    v50.st_birthtimespeCC_SHA256_CTX c = v15;
    *(timespec *)&v50.st_size_t size = v15;
    v50.st_mtimespeCC_SHA256_CTX c = v15;
    v50.st_ctimespeCC_SHA256_CTX c = v15;
    *(timespec *)&v50.st_uid = v15;
    v50.st_atimespeCC_SHA256_CTX c = v15;
    *(timespec *)&v50.st_dev = v15;
    if (SHIBYTE(__dst[2]) >= 0) {
      uint64_t v16 = (const char *)__dst;
    }
    else {
      uint64_t v16 = (const char *)__dst[0];
    }
    if (stat(v16, &v50)
      || (SHIBYTE(__dst[2]) >= 0 ? (long long v20 = (const char *)__dst) : (long long v20 = (const char *)__dst[0]),
          BOOL v21 = opendir(v20),
          (uint64_t v22 = v21) == 0))
    {
      char v17 = HIBYTE(__dst[2]);
      goto LABEL_30;
    }
    int v23 = readdir(v21);
    closedir(v22);
    char v17 = HIBYTE(__dst[2]);
    if (v23) {
      break;
    }
LABEL_30:
    if (v17 < 0)
    {
      operator delete(__dst[0]);
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
LABEL_59:
      }
        operator delete(v49.__r_.__value_.__l.__data_);
    }
    else if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    {
      goto LABEL_59;
    }
    int v3 = (long long *)((char *)v3 + 24);
    if (v3 == v47) {
      return;
    }
  }
  if ((HIBYTE(__dst[2]) & 0x80) == 0)
  {
    if (HIBYTE(__dst[2]) <= 4u) {
      goto LABEL_99;
    }
    uint64_t v24 = (_DWORD *)((char *)__dst + HIBYTE(__dst[2]) - 5);
    if (*v24 == 1885626669 && *((unsigned char *)__dst + HIBYTE(__dst[2]) - 1) == 108) {
      goto LABEL_79;
    }
    if (*v24 == 1935962413 && *((unsigned char *)__dst + HIBYTE(__dst[2]) - 1) == 115) {
      goto LABEL_79;
    }
    if (*v24 == 1634296877 && *((unsigned char *)__dst + HIBYTE(__dst[2]) - 1) == 103) {
      goto LABEL_79;
    }
    if (HIBYTE(__dst[2]) < 9u) {
      goto LABEL_99;
    }
    uint64_t v28 = __dst;
    unint64_t v29 = (void *)HIBYTE(__dst[2]);
    goto LABEL_74;
  }
  unint64_t v29 = __dst[1];
  if (__dst[1] < (void *)5) {
    goto LABEL_99;
  }
  uint64_t v28 = (void **)__dst[0];
  int v30 = (char *)__dst[1] + (unint64_t)__dst[0] - 5;
  if ((*v30 != 1885626669 || *((unsigned char *)__dst[1] + (unint64_t)__dst[0] - 1) != 108)
    && (*v30 != 1935962413 || *((unsigned char *)__dst[1] + (unint64_t)__dst[0] - 1) != 115)
    && (*v30 != 1634296877 || *((unsigned char *)__dst[1] + (unint64_t)__dst[0] - 1) != 103))
  {
    if (__dst[1] < (void *)9) {
LABEL_99:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
LABEL_74:
    __int16 v34 = (char *)v28 + (void)v29;
    uint64_t v35 = *(void *)(v34 - 9);
    int v36 = *(v34 - 1);
    if (v35 == 0x636172742D62622DLL && v36 == 101) {
      goto LABEL_79;
    }
    goto LABEL_30;
  }
LABEL_79:
  int v38 = SHIBYTE(v49.__r_.__value_.__r.__words[2]);
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v39 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v39 = v49.__r_.__value_.__l.__size_;
  }
  unint64_t v40 = v39 + 9;
  memset(&v50, 170, 24);
  if (v39 + 9 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v40 >= 0x17)
  {
    uint64_t v42 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17) {
      uint64_t v42 = v40 | 7;
    }
    uint64_t v43 = v42 + 1;
    uint64_t v41 = operator new(v42 + 1);
    v50.st_ino = v39 + 9;
    *(void *)&v50.st_uid = v43 | 0x8000000000000000;
    *(void *)&v50.st_dev = v41;
  }
  else
  {
    memset(&v50, 0, 24);
    uint64_t v41 = &v50;
    HIBYTE(v50.st_gid) = v39 + 9;
    if (!v39) {
      goto LABEL_93;
    }
  }
  if (v38 >= 0) {
    uint64_t v44 = &v49;
  }
  else {
    uint64_t v44 = (std::string *)v49.__r_.__value_.__r.__words[0];
  }
  memmove(v41, v44, v39);
LABEL_93:
  strcpy((char *)v41 + v39, "/info.txt");
  uint64_t v45 = v46;
  *uint64_t v46 = *(_OWORD *)&v50.st_dev;
  *((void *)v45 + 2) = *(void *)&v50.st_uid;
  if ((v17 & 0x80) == 0)
  {
    if ((v38 & 0x80) == 0) {
      return;
    }
LABEL_97:
    operator delete(v49.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__dst[0]);
  if ((*((unsigned char *)&v49.__r_.__value_.__s + 23) & 0x80) != 0) {
    goto LABEL_97;
  }
}

void sub_1C5AD161C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  _Unwind_Resume(exception_object);
}

BOOL util::isDumpForSysdiagnose(uint64_t a1, uint64_t a2)
{
  __p[73] = *(void **)MEMORY[0x1E4F143B8];
  char v65 = 0;
  std::string::size_type v66 = 0;
  uint64_t v67 = 0;
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v63[32] = v2;
  long long v64 = v2;
  *(_OWORD *)uint64_t v63 = v2;
  *(_OWORD *)&v63[16] = v2;
  int v3 = *(char *)(a2 + 23);
  if (v3 >= 0) {
    size_t v4 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v4 = *(void *)(a2 + 8);
  }
  unint64_t v5 = v4 + 2;
  memset(&v62, 170, sizeof(v62));
  if (v4 + 2 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v6 = (const void **)a2;
  if (v5 >= 0x17)
  {
    uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v9 = v5 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint32_t v11 = operator new(v9 + 1);
    v62.__r_.__value_.__l.__size_ = v4 + 2;
    v62.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    v62.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    _WORD *v11 = 10798;
    int v8 = (std::string::value_type *)(v11 + 1);
  }
  else
  {
    v62.__r_.__value_.__r.__words[2] = 0;
    *((unsigned char *)&v62.__r_.__value_.__s + 23) = v4 + 2;
    int v8 = &v62.__r_.__value_.__s.__data_[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = 0x2A2EuLL;
    if (!v4) {
      goto LABEL_15;
    }
  }
  if (v3 >= 0) {
    uint64_t v12 = v6;
  }
  else {
    uint64_t v12 = (const void **)*v6;
  }
  memmove(v8, v12, v4);
LABEL_15:
  v8[v4] = 0;
  unint64_t v13 = std::string::append(&v62, ".*", 2uLL);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  __p[2] = (void *)v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)tm __p = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v63, (uint64_t)__p, 0);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_17;
    }
LABEL_20:
    operator delete(v62.__r_.__value_.__l.__data_);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_21;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_20;
  }
LABEL_17:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
LABEL_18:
    std::string v61 = *(std::string *)a1;
    goto LABEL_22;
  }
LABEL_21:
  std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
LABEL_22:
  std::locale::locale(&v55, (const std::locale *)v63);
  long long v56 = *(_OWORD *)&v63[8];
  long long v57 = *(_OWORD *)&v63[24];
  uint64_t v58 = *(void *)&v63[40];
  size_t v59 = (std::__shared_weak_count *)v64;
  if ((void)v64) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v64 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v60 = *((void *)&v64 + 1);
  BOOL FilteredFiles = support::fs::getFilteredFiles((const char *)&v61, (uint64_t)&v55, (uint64_t)&v65, 0);
  uint64_t v16 = v59;
  if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    std::locale::~locale(&v55);
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_27:
      if (FilteredFiles) {
        goto LABEL_28;
      }
LABEL_32:
      BOOL v17 = 0;
      goto LABEL_110;
    }
  }
  else
  {
    std::locale::~locale(&v55);
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_27;
    }
  }
  operator delete(v61.__r_.__value_.__l.__data_);
  if (!FilteredFiles) {
    goto LABEL_32;
  }
LABEL_28:
  memset(&v62, 170, sizeof(v62));
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v54 = *(std::string *)a1;
  }
  uint64_t v51 = 0;
  char v52 = 0;
  uint64_t v53 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v51, (uint64_t)v65, (uint64_t)v66, 0xAAAAAAAAAAAAAAABLL * (((char *)v66 - (unsigned char *)v65) >> 3));
  util::findBasebandLogInfoFile((const void **)&v54.__r_.__value_.__l.__data_, (long long **)&v51, &v62);
  uint64_t v18 = (void **)v51;
  if (v51)
  {
    uint64_t v19 = v52;
    long long v20 = v51;
    if (v52 != v51)
    {
      do
      {
        if (*((char *)v19 - 1) < 0) {
          operator delete(*(v19 - 3));
        }
        v19 -= 3;
      }
      while (v19 != v18);
      long long v20 = v51;
    }
    char v52 = v18;
    operator delete(v20);
  }
  if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    int v21 = SHIBYTE(v62.__r_.__value_.__r.__words[2]);
    if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v62.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v62.__r_.__value_.__l.__size_;
    }
    if (size) {
      goto LABEL_47;
    }
LABEL_94:
    uint64_t v42 = GetOsLogContext()[1];
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)v6 + 23) < 0) {
        int v6 = (const void **)*v6;
      }
      LODWORD(__p[0]) = 136315138;
      *(void **)((char *)__p + 4) = v6;
      _os_log_impl(&dword_1C59C6000, v42, OS_LOG_TYPE_DEFAULT, "No baseband info file found for %s", (uint8_t *)__p, 0xCu);
    }
    BOOL v17 = 0;
    if ((v21 & 0x80) != 0) {
      goto LABEL_109;
    }
    goto LABEL_110;
  }
  operator delete(v54.__r_.__value_.__l.__data_);
  int v21 = SHIBYTE(v62.__r_.__value_.__r.__words[2]);
  if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v62.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v62.__r_.__value_.__l.__size_;
  }
  if (!size) {
    goto LABEL_94;
  }
LABEL_47:
  memset(__p, 170, 0x240uLL);
  int v23 = *(char *)(a1 + 23);
  if (v23 >= 0) {
    size_t v24 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v24 = *(void *)(a1 + 8);
  }
  unint64_t v25 = v24 + size;
  memset(__dst, 170, 24);
  if (v24 + size > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v25 <= 0x16)
  {
    memset(__dst, 0, 24);
    char v26 = __dst;
    HIBYTE(__dst[2]) = v24 + size;
    if (!v24) {
      goto LABEL_57;
    }
    goto LABEL_53;
  }
  uint64_t v43 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v25 | 7) != 0x17) {
    uint64_t v43 = v25 | 7;
  }
  uint64_t v44 = v43 + 1;
  char v26 = (void **)operator new(v43 + 1);
  __dst[1] = (void *)(v24 + size);
  __dst[2] = (void *)(v44 | 0x8000000000000000);
  __dst[0] = v26;
  if (v24)
  {
LABEL_53:
    if (v23 >= 0) {
      int v27 = (const void *)a1;
    }
    else {
      int v27 = *(const void **)a1;
    }
    memmove(v26, v27, v24);
  }
LABEL_57:
  uint64_t v28 = (char *)v26 + v24;
  if (v21 >= 0) {
    unint64_t v29 = &v62;
  }
  else {
    unint64_t v29 = (std::string *)v62.__r_.__value_.__r.__words[0];
  }
  memmove(v28, v29, size);
  v28[size] = 0;
  std::ifstream::basic_ifstream((uint64_t *)__p);
  if (SHIBYTE(__dst[2]) < 0)
  {
    operator delete(__dst[0]);
    if (__p[17]) {
      goto LABEL_62;
    }
LABEL_105:
    uint64_t v45 = GetOsLogContext()[1];
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__dst[0]) = 136315138;
      *(void **)((char *)__dst + 4) = v29;
      _os_log_error_impl(&dword_1C59C6000, v45, OS_LOG_TYPE_ERROR, "Failed to open info file: %s", (uint8_t *)__dst, 0xCu);
    }
    BOOL v17 = 0;
    goto LABEL_108;
  }
  if (!__p[17]) {
    goto LABEL_105;
  }
LABEL_62:
  std::istream::seekg();
  memset(__dst, 170, 24);
  int v30 = __dst;
  support::fs::readCurrentLine(__p, __dst);
  uint64_t v31 = HIBYTE(__dst[2]);
  int v32 = SHIBYTE(__dst[2]);
  std::string::size_type v33 = __dst[0];
  if (SHIBYTE(__dst[2]) < 0)
  {
    uint64_t v31 = (uint64_t)__dst[1];
    int v30 = (void **)__dst[0];
  }
  __int16 v34 = (char *)v30 + v31;
  if (v31 >= 35)
  {
    uint64_t v35 = v30;
    do
    {
      int v36 = (char *)memchr(v35, 98, v31 - 34);
      if (!v36) {
        break;
      }
      if (*(void *)v36 == 0x6320676F6C206262
        && *((void *)v36 + 1) == 0x6F697463656C6C6FLL
        && *((void *)v36 + 2) == 0x20726F66202D206ELL
        && *((void *)v36 + 3) == 0x6E67616964737973
        && *(void *)(v36 + 27) == 0x65736F6E67616964)
      {
        goto LABEL_82;
      }
      uint64_t v35 = (void **)(v36 + 1);
      uint64_t v31 = v34 - (char *)v35;
    }
    while (v34 - (char *)v35 > 34);
  }
  int v36 = v34;
LABEL_82:
  BOOL v17 = v36 != v34 && v36 - (char *)v30 != -1;
  if (v32 < 0) {
    operator delete(v33);
  }
LABEL_108:
  __p[0] = *(void **)MEMORY[0x1E4FBA3F8];
  *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1C8794EC0](&__p[2]);
  std::istream::~istream();
  MEMORY[0x1C8795140](&__p[53]);
  if ((*((unsigned char *)&v62.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_109:
  }
    operator delete(v62.__r_.__value_.__l.__data_);
LABEL_110:
  uint64_t v46 = (std::__shared_weak_count *)v64;
  if ((void)v64 && !atomic_fetch_add((atomic_ullong *volatile)(v64 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
  std::locale::~locale((std::locale *)v63);
  xpc_object_t v47 = (void **)v65;
  if (v65)
  {
    unint64_t v48 = v66;
    std::string v49 = v65;
    if (v66 != v65)
    {
      do
      {
        if (*((char *)v48 - 1) < 0) {
          operator delete(*(v48 - 3));
        }
        v48 -= 3;
      }
      while (v48 != v47);
      std::string v49 = v65;
    }
    std::string::size_type v66 = v47;
    operator delete(v49);
  }
  return v17;
}

void sub_1C5AD1E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, std::locale a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,uint64_t a36,std::locale a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56)
{
  std::ifstream::~ifstream(&a56);
  if (v56 < 0) {
    operator delete(__p);
  }
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a37);
  std::vector<std::string>::~vector[abi:ne180100](&a46);
  _Unwind_Resume(a1);
}

void sub_1C5AD1F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a55 < 0)
  {
    operator delete(__p);
    if (a33 < 0)
    {
LABEL_5:
      operator delete(a28);
      std::vector<std::string>::~vector[abi:ne180100](&a43);
      _Unwind_Resume(a1);
    }
  }
  else if (a33 < 0)
  {
    goto LABEL_5;
  }
  std::vector<std::string>::~vector[abi:ne180100](&a43);
  _Unwind_Resume(a1);
}

void sub_1C5AD1F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40)
{
}

uint64_t *std::ifstream::basic_ifstream(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA460] + 64;
  a1[53] = MEMORY[0x1E4FBA460] + 64;
  int v3 = a1 + 2;
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA3F8] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA3F8] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  a1[1] = 0;
  int v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 2);
  uint64_t v7 = MEMORY[0x1E4FBA460] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[53] = v2;
  MEMORY[0x1C8794EB0](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_1C5AD2118(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x1C8795140](v1);
  _Unwind_Resume(a1);
}

void *std::ifstream::~ifstream(void *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA3F8];
  uint64_t v3 = *MEMORY[0x1E4FBA3F8];
  *a1 = *MEMORY[0x1E4FBA3F8];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x1C8794EC0](a1 + 2);
  std::istream::~istream();
  MEMORY[0x1C8795140](a1 + 53);
  return a1;
}

void util::findLastLogDumpTimestamp(util *this@<X0>, const char *__s@<X1>, const char *a3@<X2>, int a4@<W3>, char *a5@<X4>, std::string *a6@<X8>)
{
  unsigned int v8 = a3;
  uint64_t v10 = a6;
  uint64_t v150 = *MEMORY[0x1E4F143B8];
  a6->__r_.__value_.__r.__words[0] = 0;
  a6->__r_.__value_.__l.__size_ = 0;
  a6->__r_.__value_.__r.__words[2] = 0;
  v138 = 0;
  std::string v139 = 0;
  uint64_t v140 = 0;
  memset(v137, 170, sizeof(v137));
  size_t v11 = strlen(__s);
  unint64_t v103 = v10;
  if (v11 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v12 = v11;
  if (v11 >= 0x17)
  {
    uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v14 = v11 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v12;
    *(void *)v142 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  v142[7] = v11;
  p_dst = &__dst;
  if (v11) {
LABEL_8:
  }
    memcpy(p_dst, __s, v12);
  *((unsigned char *)p_dst + v12) = 0;
  uint64_t v16 = std::string::append((std::string *)&__dst, ".*", 2uLL);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v137[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)v137 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if ((v142[7] & 0x80000000) != 0) {
    operator delete((void *)__dst);
  }
  *(void *)&long long v18 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v135[32] = v18;
  long long v136 = v18;
  *(_OWORD *)v135 = v18;
  *(_OWORD *)&v135[16] = v18;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v135, (uint64_t)v137, 0);
  *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v133[32] = v19;
  long long v134 = v19;
  *(_OWORD *)uint64_t v133 = v19;
  *(_OWORD *)&v133[16] = v19;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)v133, "(\\d{4})-(\\d{2})-(\\d{2})-(\\d{2})-(\\d{2})-(\\d{2})-(\\d{3})", 0);
  BOOL v104 = a5 == 0;
  size_t v20 = strlen((const char *)this);
  if (v20 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v21 = (void *)v20;
  if (v20 >= 0x17)
  {
    uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17) {
      uint64_t v23 = v20 | 7;
    }
    uint64_t v24 = v23 + 1;
    uint64_t v22 = operator new(v23 + 1);
    unint64_t v132 = v24 | 0x8000000000000000;
    __p[0] = v22;
    __p[1] = v21;
    goto LABEL_18;
  }
  HIBYTE(v132) = v20;
  uint64_t v22 = __p;
  if (v20) {
LABEL_18:
  }
    memcpy(v22, this, (size_t)v21);
  *((unsigned char *)v21 + (void)v22) = 0;
  std::locale::locale(&v125, (const std::locale *)v135);
  long long v126 = *(_OWORD *)&v135[8];
  long long v127 = *(_OWORD *)&v135[24];
  uint64_t v128 = *(void *)&v135[40];
  v129 = (std::__shared_weak_count *)v136;
  if ((void)v136) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v136 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v130 = *((void *)&v136 + 1);
  BOOL FilteredFiles = support::fs::getFilteredFiles((const char *)__p, (uint64_t)&v125, (uint64_t)&v138, 0);
  char v26 = v129;
  if (v129 && !atomic_fetch_add(&v129->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    std::locale::~locale(&v125);
    if ((SHIBYTE(v132) & 0x80000000) == 0)
    {
LABEL_24:
      if (!FilteredFiles) {
        goto LABEL_167;
      }
      goto LABEL_28;
    }
  }
  else
  {
    std::locale::~locale(&v125);
    if ((SHIBYTE(v132) & 0x80000000) == 0) {
      goto LABEL_24;
    }
  }
  operator delete(__p[0]);
  if (!FilteredFiles) {
    goto LABEL_167;
  }
LABEL_28:
  unint64_t v28 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v139 - v138));
  if (v139 == v138) {
    uint64_t v29 = 0;
  }
  else {
    uint64_t v29 = v28;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*,false>((unint64_t)v138, v139, v29, 1, v27);
  memset(&v124, 0, sizeof(v124));
  int v30 = v138;
  uint64_t v102 = v139;
  if (v138 == v139)
  {
LABEL_167:
    if (!v8) {
      goto LABEL_184;
    }
LABEL_168:
    if (SHIBYTE(v10->__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v111, v10->__r_.__value_.__l.__data_, v10->__r_.__value_.__l.__size_);
    }
    else {
      std::string v111 = *v10;
    }
    std::locale::locale(&v105, (const std::locale *)v133);
    long long v106 = *(_OWORD *)&v133[8];
    long long v107 = *(_OWORD *)&v133[24];
    uint64_t v108 = *(void *)&v133[40];
    std::string::size_type v109 = (std::__shared_weak_count *)v134;
    if ((void)v134) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v134 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v110 = *((void *)&v134 + 1);
    BOOL v91 = util::checkLogFileAge((uint64_t)&v111, v8, (uint64_t)&v105);
    time_t v92 = v109;
    if (v109 && !atomic_fetch_add(&v109->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
      std::locale::~locale(&v105);
      if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_176:
        if (!v91) {
          goto LABEL_184;
        }
LABEL_180:
        if (SHIBYTE(v10->__r_.__value_.__r.__words[2]) < 0)
        {
          *v10->__r_.__value_.__l.__data_ = 0;
          v10->__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          v10->__r_.__value_.__s.__data_[0] = 0;
          *((unsigned char *)&v10->__r_.__value_.__s + 23) = 0;
        }
        goto LABEL_184;
      }
    }
    else
    {
      std::locale::~locale(&v105);
      if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_176;
      }
    }
    operator delete(v111.__r_.__value_.__l.__data_);
    if (!v91) {
      goto LABEL_184;
    }
    goto LABEL_180;
  }
  unsigned int v98 = v8;
  uint64_t v100 = a5;
  while (1)
  {
    memset(&v123, 170, sizeof(v123));
    if (*((char *)v30 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v123, (const std::string::value_type *)*v30, (std::string::size_type)v30[1]);
    }
    else
    {
      long long v31 = *(_OWORD *)v30;
      v123.__r_.__value_.__r.__words[2] = (std::string::size_type)v30[2];
      *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v31;
    }
    if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int64_t size = HIBYTE(v124.__r_.__value_.__r.__words[2]);
    }
    else {
      int64_t size = v124.__r_.__value_.__l.__size_;
    }
    std::string::size_type v33 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
    int v34 = SHIBYTE(v123.__r_.__value_.__r.__words[2]);
    uint64_t v35 = (std::string *)v123.__r_.__value_.__r.__words[0];
    if (size)
    {
      if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v36 = &v124;
      }
      else {
        int v36 = (std::string *)v124.__r_.__value_.__r.__words[0];
      }
      if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v37 = &v123;
      }
      else {
        uint64_t v37 = (std::string *)v123.__r_.__value_.__r.__words[0];
      }
      int64_t v38 = v123.__r_.__value_.__l.__size_;
      if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int64_t v38 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
      }
      if (v38 >= size)
      {
        uint64_t v63 = (char *)v37 + v38;
        int v64 = v36->__r_.__value_.__s.__data_[0];
        char v65 = v37;
        do
        {
          int64_t v66 = v38 - size;
          if (v66 == -1) {
            break;
          }
          uint64_t v67 = (char *)memchr(v65, v64, v66 + 1);
          if (!v67) {
            break;
          }
          unint64_t v68 = v67;
          if (!memcmp(v67, v36, size))
          {
            if (v68 == v63 || v68 - (char *)v37 == -1) {
              break;
            }
            int v61 = 3;
            uint64_t v10 = v103;
            if ((v34 & 0x80) == 0) {
              goto LABEL_150;
            }
            goto LABEL_106;
          }
          char v65 = (std::string *)(v68 + 1);
          int64_t v38 = v63 - (v68 + 1);
        }
        while (v38 >= size);
      }
    }
    *(void *)&long long v39 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v39 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v121 = v39;
    unint64_t v118 = 0xAAAAAAAAAAAAAA00;
    v115[1].__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)0xAAAAAAAAAAAAAAAALL;
    uint64_t v116 = 0;
    uint64_t v117 = 0;
    uint64_t v119 = 0;
    uint64_t v120 = 0;
    LOBYTE(v121) = 0;
    BYTE8(v121) = 0;
    uint64_t v122 = 0;
    memset(v115, 0, 41);
    if (v104)
    {
      std::string::size_type v40 = v123.__r_.__value_.__l.__size_;
      long long v148 = v39;
      unint64_t v145 = 0xAAAAAAAAAAAAAA00;
      *(void *)&v142[24] = v39;
      uint64_t v143 = 0;
      uint64_t v144 = 0;
      uint64_t v146 = 0;
      uint64_t v147 = 0;
      LOBYTE(v148) = 0;
      BYTE8(v148) = 0;
      uint64_t v149 = 0;
      long long __dst = 0uLL;
      *(_OWORD *)v142 = 0uLL;
      if (v34 >= 0) {
        uint64_t v41 = (std::sub_match<const char *> *)&v123;
      }
      else {
        uint64_t v41 = (std::sub_match<const char *> *)v35;
      }
      if (v34 >= 0) {
        std::string::size_type v40 = v33;
      }
      *(_OWORD *)&v142[9] = 0uLL;
      uint64_t v10 = v103;
      int v42 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v133, v41, (std::sub_match<const char *> *)((char *)v41 + v40), (std::vector<std::csub_match> *)&__dst, 0);
      std::string::size_type v43 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
      if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v44 = &v123;
      }
      else {
        uint64_t v44 = (std::string *)v123.__r_.__value_.__r.__words[0];
      }
      if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v43 = v123.__r_.__value_.__l.__size_;
      }
      std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v115, (uint64_t)v44, (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v44 + v43), (uint64_t *)&__dst, 0);
      if ((void)__dst)
      {
        *((void *)&__dst + 1) = __dst;
        operator delete((void *)__dst);
      }
      if (v42)
      {
        p_end_cap = &v115[1].__end_cap_;
        if (v115[0].__end_ != v115[0].__begin_) {
          p_end_cap = &v115[0].__begin_->matched;
        }
        if (!*p_end_cap)
        {
          long long __dst = 0uLL;
          *(void *)v142 = 0;
          if ((SHIBYTE(v103->__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_116;
          }
          goto LABEL_101;
        }
        std::vector<std::ssub_match>::pointer begin = (std::vector<std::ssub_match>::pointer)&v115[1];
        if (v115[0].__end_ != v115[0].__begin_) {
          std::vector<std::ssub_match>::pointer begin = v115[0].__begin_;
        }
        std::__wrap_iter<const char *>::iterator_type i = begin->first.__i_;
        p_std::__wrap_iter<const char *>::iterator_type i = &v115[0].__begin_->second.__i_;
        if (v115[0].__end_ == v115[0].__begin_) {
          p_std::__wrap_iter<const char *>::iterator_type i = (const char **)&v115[1].__end_;
        }
        std::string v49 = *p_i;
        unint64_t v50 = *p_i - i;
        if (v50 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v50 > 0x16)
        {
          uint64_t v75 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v50 | 7) != 0x17) {
            uint64_t v75 = v50 | 7;
          }
          uint64_t v76 = v75 + 1;
          uint64_t v51 = (long long *)operator new(v75 + 1);
          *((void *)&__dst + 1) = v50;
          *(void *)v142 = v76 | 0x8000000000000000;
          *(void *)&long long __dst = v51;
          if (i != v49)
          {
LABEL_74:
            if (v50 < 0x20 || (unint64_t)((char *)v51 - i) < 0x20)
            {
              char v52 = v51;
              uint64_t v53 = i;
            }
            else
            {
              char v52 = (long long *)((char *)v51 + (v50 & 0xFFFFFFFFFFFFFFE0));
              uint64_t v53 = &i[v50 & 0xFFFFFFFFFFFFFFE0];
              std::string v54 = (long long *)(i + 16);
              std::locale v55 = v51 + 1;
              unint64_t v56 = v50 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v57 = *v54;
                *(v55 - 1) = *(v54 - 1);
                _OWORD *v55 = v57;
                v54 += 2;
                v55 += 2;
                v56 -= 32;
              }
              while (v56);
              if (v50 == (v50 & 0x7FFFFFFFFFFFFFE0))
              {
LABEL_115:
                *(unsigned char *)char v52 = 0;
                if ((SHIBYTE(v103->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_116:
                  *(_OWORD *)&v103->__r_.__value_.__l.__data_ = __dst;
                  v103->__r_.__value_.__r.__words[2] = *(void *)v142;
                  if (a4) {
                    goto LABEL_117;
                  }
                  goto LABEL_141;
                }
LABEL_101:
                operator delete(v103->__r_.__value_.__l.__data_);
                *(_OWORD *)&v103->__r_.__value_.__l.__data_ = __dst;
                v103->__r_.__value_.__r.__words[2] = *(void *)v142;
                if (a4)
                {
LABEL_117:
                  size_t v78 = strlen((const char *)this);
                  if (v78 > 0x7FFFFFFFFFFFFFF7) {
                    std::string::__throw_length_error[abi:ne180100]();
                  }
                  long long v79 = (void *)v78;
                  if (v78 >= 0x17)
                  {
                    uint64_t v81 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v78 | 7) != 0x17) {
                      uint64_t v81 = v78 | 7;
                    }
                    uint64_t v82 = v81 + 1;
                    uint64_t v80 = operator new(v81 + 1);
                    v113[1] = v79;
                    unint64_t v114 = v82 | 0x8000000000000000;
                    v113[0] = v80;
                  }
                  else
                  {
                    HIBYTE(v114) = v78;
                    uint64_t v80 = v113;
                    if (!v78)
                    {
                      LOBYTE(v113[0]) = 0;
                      if ((SHIBYTE(v103->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_121:
                        std::string v112 = *v103;
                        goto LABEL_127;
                      }
LABEL_126:
                      std::string::__init_copy_ctor_external(&v112, v103->__r_.__value_.__l.__data_, v103->__r_.__value_.__l.__size_);
LABEL_127:
                      BOOL isDumpForSysdiagnose = util::isDumpForSysdiagnose((uint64_t)v113, (uint64_t)&v112);
                      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
                      {
                        operator delete(v112.__r_.__value_.__l.__data_);
                        if ((SHIBYTE(v114) & 0x80000000) == 0)
                        {
LABEL_129:
                          if (isDumpForSysdiagnose) {
                            goto LABEL_130;
                          }
                          goto LABEL_141;
                        }
                      }
                      else if ((SHIBYTE(v114) & 0x80000000) == 0)
                      {
                        goto LABEL_129;
                      }
                      operator delete(v113[0]);
                      if (isDumpForSysdiagnose)
                      {
LABEL_130:
                        unint64_t v84 = GetOsLogContext()[1];
                        if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
                        {
                          if ((v103->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                            unsigned int v85 = v103;
                          }
                          else {
                            unsigned int v85 = (std::string *)v103->__r_.__value_.__r.__words[0];
                          }
                          LODWORD(__dst) = 136315138;
                          *(void *)((char *)&__dst + 4) = v85;
                          _os_log_impl(&dword_1C59C6000, v84, OS_LOG_TYPE_DEFAULT, "Ignore dump for sysdiagnose: %s", (uint8_t *)&__dst, 0xCu);
                        }
                        if (&v124 != v103)
                        {
                          char v86 = HIBYTE(v103->__r_.__value_.__r.__words[2]);
                          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
                          {
                            if (v86 >= 0) {
                              uint64_t v89 = v103;
                            }
                            else {
                              uint64_t v89 = (std::string *)v103->__r_.__value_.__r.__words[0];
                            }
                            if (v86 >= 0) {
                              size_t v90 = HIBYTE(v103->__r_.__value_.__r.__words[2]);
                            }
                            else {
                              size_t v90 = v103->__r_.__value_.__l.__size_;
                            }
                            std::string::__assign_no_alias<false>((void **)&v124.__r_.__value_.__l.__data_, v89, v90);
                          }
                          else
                          {
                            if ((*((unsigned char *)&v103->__r_.__value_.__s + 23) & 0x80) == 0)
                            {
                              std::string v124 = *v103;
LABEL_164:
                              int v61 = 0;
                              v103->__r_.__value_.__s.__data_[0] = 0;
                              *((unsigned char *)&v103->__r_.__value_.__s + 23) = 0;
                              goto LABEL_146;
                            }
                            std::string::__assign_no_alias<true>(&v124, v103->__r_.__value_.__l.__data_, v103->__r_.__value_.__l.__size_);
                          }
                        }
                        if (SHIBYTE(v103->__r_.__value_.__r.__words[2]) < 0)
                        {
                          int v61 = 0;
                          *v103->__r_.__value_.__l.__data_ = 0;
                          v103->__r_.__value_.__l.__size_ = 0;
                          goto LABEL_146;
                        }
                        goto LABEL_164;
                      }
                      goto LABEL_141;
                    }
                  }
                  memcpy(v80, this, (size_t)v79);
                  *((unsigned char *)v79 + (void)v80) = 0;
                  if ((SHIBYTE(v103->__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    goto LABEL_121;
                  }
                  goto LABEL_126;
                }
LABEL_141:
                int v61 = 2;
LABEL_146:
                char v87 = 1;
LABEL_147:
                BOOL v104 = v87;
                std::string v62 = v115[0].__begin_;
                if (v115[0].__begin_) {
                  goto LABEL_148;
                }
                goto LABEL_149;
              }
            }
            do
            {
              char v77 = *v53++;
              *(unsigned char *)char v52 = v77;
              char v52 = (long long *)((char *)v52 + 1);
            }
            while (v53 != v49);
            goto LABEL_115;
          }
        }
        else
        {
          v142[7] = *(unsigned char *)p_i - (_BYTE)i;
          uint64_t v51 = &__dst;
          if (i != v49) {
            goto LABEL_74;
          }
        }
        *(unsigned char *)uint64_t v51 = 0;
        if ((SHIBYTE(v103->__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_116;
        }
        goto LABEL_101;
      }
LABEL_145:
      int v61 = 0;
      goto LABEL_146;
    }
    if (v34 >= 0) {
      uint64_t v35 = &v123;
    }
    int64_t v58 = strlen(v100);
    uint64_t v10 = v103;
    if (!v58)
    {
LABEL_144:
      std::string::__assign_external(&v124, v100);
      goto LABEL_145;
    }
    int64_t v59 = v58;
    int64_t v60 = v123.__r_.__value_.__l.__size_;
    if (v34 >= 0) {
      int64_t v60 = v33;
    }
    if (v60 >= v58)
    {
      int v69 = (char *)v35 + v60;
      int v70 = *v100;
      unint64_t v71 = v35;
      do
      {
        int64_t v72 = v60 - v59;
        if (v72 == -1) {
          break;
        }
        uint64_t v73 = (char *)memchr(v71, v70, v72 + 1);
        if (!v73) {
          break;
        }
        unint64_t v74 = v73;
        if (!memcmp(v73, v100, v59))
        {
          char v87 = 0;
          if (v74 != v69)
          {
            int64_t v88 = v74 - (char *)v35;
            int v61 = 0;
            if (v88 == -1) {
              goto LABEL_147;
            }
            goto LABEL_144;
          }
          int v61 = 0;
          BOOL v104 = 0;
          std::string v62 = v115[0].__begin_;
          if (v115[0].__begin_) {
            goto LABEL_148;
          }
          goto LABEL_149;
        }
        unint64_t v71 = (std::string *)(v74 + 1);
        int64_t v60 = v69 - (v74 + 1);
      }
      while (v60 >= v59);
    }
    int v61 = 0;
    BOOL v104 = 0;
    std::string v62 = v115[0].__begin_;
    if (v115[0].__begin_)
    {
LABEL_148:
      v115[0].__end_ = v62;
      operator delete(v62);
    }
LABEL_149:
    if ((*((unsigned char *)&v123.__r_.__value_.__s + 23) & 0x80) != 0) {
      break;
    }
LABEL_150:
    if (v61 != 3) {
      goto LABEL_151;
    }
LABEL_33:
    v30 += 3;
    if (v30 == v102) {
      goto LABEL_166;
    }
  }
LABEL_106:
  operator delete(v123.__r_.__value_.__l.__data_);
  if (v61 == 3) {
    goto LABEL_33;
  }
LABEL_151:
  if (!v61) {
    goto LABEL_33;
  }
LABEL_166:
  unsigned int v8 = v98;
  if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_167;
  }
  operator delete(v124.__r_.__value_.__l.__data_);
  if (v98) {
    goto LABEL_168;
  }
LABEL_184:
  std::string v93 = (std::__shared_weak_count *)v134;
  if ((void)v134 && !atomic_fetch_add((atomic_ullong *volatile)(v134 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
    std::__shared_weak_count::__release_weak(v93);
    std::locale::~locale((std::locale *)v133);
    v94 = (std::__shared_weak_count *)v136;
    if (!(void)v136) {
      goto LABEL_188;
    }
LABEL_187:
    if (atomic_fetch_add(&v94->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_188;
    }
    ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
    std::__shared_weak_count::__release_weak(v94);
    std::locale::~locale((std::locale *)v135);
    if (SHIBYTE(v137[2]) < 0) {
LABEL_189:
    }
      operator delete(v137[0]);
  }
  else
  {
    std::locale::~locale((std::locale *)v133);
    v94 = (std::__shared_weak_count *)v136;
    if ((void)v136) {
      goto LABEL_187;
    }
LABEL_188:
    std::locale::~locale((std::locale *)v135);
    if (SHIBYTE(v137[2]) < 0) {
      goto LABEL_189;
    }
  }
  long long v95 = v138;
  if (v138)
  {
    uint64_t v96 = v139;
    unint64_t v97 = v138;
    if (v139 != v138)
    {
      do
      {
        if (*((char *)v96 - 1) < 0) {
          operator delete((void *)*(v96 - 3));
        }
        v96 -= 3;
      }
      while (v96 != v95);
      unint64_t v97 = v138;
    }
    std::string v139 = v95;
    operator delete(v97);
  }
}

void sub_1C5AD2EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)&STACK[0x220]);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)&STACK[0x260]);
  if (SLOBYTE(STACK[0x2B7]) < 0) {
    operator delete((void *)STACK[0x2A0]);
  }
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v24 - 248));
  if (*(char *)(a24 + 23) < 0) {
    operator delete(*(void **)a24);
  }
  _Unwind_Resume(a1);
}

uint64_t util::getNumberOfLogDumps(uint64_t a1, const void **a2)
{
  uint64_t v164 = *MEMORY[0x1E4F143B8];
  unint64_t v145 = 0;
  uint64_t v146 = 0;
  uint64_t v147 = 0;
  long long v142 = 0u;
  long long v143 = 0u;
  unint64_t v144 = 0xAAAAAAAA3F800000;
  uint64_t v4 = (char *)operator new(0x48uLL);
  uint64_t v5 = v4;
  strcpy(v4, "[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{2,4}-[0-9]{3}");
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v140[32] = v6;
  long long v141 = v6;
  *(_OWORD *)uint64_t v140 = v6;
  *(_OWORD *)&v140[16] = v6;
  int v7 = *((char *)a2 + 23);
  if (v7 >= 0) {
    size_t v8 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v8 = (size_t)a2[1];
  }
  unint64_t v9 = v8 + 64;
  memset(__dst, 170, 24);
  std::locale v125 = v4;
  if (v8 + 64 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v9 <= 0x16)
  {
    memset(__dst, 0, 24);
    uint64_t v10 = __dst;
    __dst[23] = v8 + 64;
LABEL_10:
    if (v7 >= 0) {
      unint64_t v13 = a2;
    }
    else {
      unint64_t v13 = *a2;
    }
    memmove(v10, v13, v8);
    goto LABEL_14;
  }
  uint64_t v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v9 | 7) != 0x17) {
    uint64_t v11 = v9 | 7;
  }
  uint64_t v12 = v11 + 1;
  uint64_t v10 = operator new(v11 + 1);
  *(void *)&__dst[8] = v8 + 64;
  *(void *)&__dst[16] = v12 | 0x8000000000000000;
  *(void *)long long __dst = v10;
  if (v8) {
    goto LABEL_10;
  }
LABEL_14:
  uint64_t v14 = &v10[v8];
  long long v15 = *(_OWORD *)v5;
  long long v16 = *((_OWORD *)v5 + 1);
  long long v17 = *((_OWORD *)v5 + 3);
  *((_OWORD *)v14 + 2) = *((_OWORD *)v5 + 2);
  *((_OWORD *)v14 + 3) = v17;
  *(_OWORD *)uint64_t v14 = v15;
  *((_OWORD *)v14 + 1) = v16;
  v14[64] = 0;
  long long v18 = std::string::append((std::string *)__dst, ".*", 2uLL);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  *(void *)&__p[16] = *((void *)&v18->__r_.__value_.__l + 2);
  *(_OWORD *)tm __p = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v140, (uint64_t)__p, 0);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if ((__dst[23] & 0x80000000) == 0) {
      goto LABEL_16;
    }
  }
  else if ((__dst[23] & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(*(void **)__dst);
LABEL_16:
  *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v138 = v20;
  long long v139 = v20;
  long long v137 = v20;
  *(_OWORD *)&v136[0].__locale_ = v20;
  int v21 = *((char *)a2 + 23);
  if (v21 >= 0) {
    size_t v22 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v22 = (size_t)a2[1];
  }
  unint64_t v23 = v22 + 64;
  memset(__dst, 170, 24);
  if (v22 + 64 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v23 <= 0x16)
  {
    memset(__dst, 0, 24);
    uint64_t v24 = __dst;
    __dst[23] = v22 + 64;
LABEL_25:
    if (v21 >= 0) {
      __n128 v27 = a2;
    }
    else {
      __n128 v27 = *a2;
    }
    memmove(v24, v27, v22);
    goto LABEL_29;
  }
  uint64_t v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v23 | 7) != 0x17) {
    uint64_t v25 = v23 | 7;
  }
  uint64_t v26 = v25 + 1;
  uint64_t v24 = operator new(v25 + 1);
  *(void *)&__dst[8] = v22 + 64;
  *(void *)&__dst[16] = v26 | 0x8000000000000000;
  *(void *)long long __dst = v24;
  if (v22) {
    goto LABEL_25;
  }
LABEL_29:
  unint64_t v28 = &v24[v22];
  long long v29 = *(_OWORD *)v5;
  long long v30 = *((_OWORD *)v5 + 1);
  long long v31 = *((_OWORD *)v5 + 3);
  *((_OWORD *)v28 + 2) = *((_OWORD *)v5 + 2);
  *((_OWORD *)v28 + 3) = v31;
  *(_OWORD *)unint64_t v28 = v29;
  *((_OWORD *)v28 + 1) = v30;
  v28[64] = 0;
  int v32 = std::string::append((std::string *)__dst, "(?=-*)(?!\\.json)", 0x10uLL);
  long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  *(void *)&__p[16] = *((void *)&v32->__r_.__value_.__l + 2);
  *(_OWORD *)tm __p = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v136, (uint64_t)__p, 0);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((__dst[23] & 0x80000000) == 0) {
      goto LABEL_31;
    }
LABEL_36:
    operator delete(*(void **)__dst);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_37;
  }
  operator delete(*(void **)__p);
  if ((__dst[23] & 0x80000000) != 0) {
    goto LABEL_36;
  }
LABEL_31:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
LABEL_32:
    std::string v135 = *(std::string *)a1;
    goto LABEL_38;
  }
LABEL_37:
  std::string::__init_copy_ctor_external(&v135, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
LABEL_38:
  std::locale::locale(&v129, (const std::locale *)v140);
  long long v130 = *(_OWORD *)&v140[8];
  long long v131 = *(_OWORD *)&v140[24];
  uint64_t v132 = *(void *)&v140[40];
  uint64_t v133 = (std::__shared_weak_count *)v141;
  if ((void)v141) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v141 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v134 = *((void *)&v141 + 1);
  support::fs::getFilteredFiles((const char *)&v135, (uint64_t)&v129, (uint64_t)&v145, 0);
  int v34 = v133;
  if (v133 && !atomic_fetch_add(&v133->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
    std::locale::~locale(&v129);
    if ((SHIBYTE(v135.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_43:
      int v36 = (std::sub_match<const char *> *)v145;
      uint64_t v35 = v146;
      if (v145 == v146) {
        goto LABEL_219;
      }
      goto LABEL_47;
    }
  }
  else
  {
    std::locale::~locale(&v129);
    if ((SHIBYTE(v135.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_43;
    }
  }
  operator delete(v135.__r_.__value_.__l.__data_);
  int v36 = (std::sub_match<const char *> *)v145;
  uint64_t v35 = v146;
  if (v145 != v146)
  {
LABEL_47:
    long long v126 = v35;
    while (1)
    {
      *(void *)&long long v37 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v37 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v162 = v37;
      unint64_t v159 = 0xAAAAAAAAAAAAAA00;
      *(void *)&__dst[40] = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v157 = 0;
      uint64_t v158 = 0;
      uint64_t v160 = 0;
      uint64_t v161 = 0;
      LOBYTE(v162) = 0;
      BYTE8(v162) = 0;
      uint64_t v163 = 0;
      memset(__dst, 0, 41);
      long long v154 = v37;
      unint64_t v151 = 0xAAAAAAAAAAAAAA00;
      *(void *)&__p[40] = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v149 = 0;
      uint64_t v150 = 0;
      uint64_t v152 = 0;
      uint64_t v153 = 0;
      LOBYTE(v154) = 0;
      BYTE8(v154) = 0;
      uint64_t v155 = 0;
      memset(__p, 0, 41);
      second = (const char *)*((unsigned __int8 *)&v36->matched + 7);
      if ((char)second >= 0) {
        first = v36;
      }
      else {
        first = (std::sub_match<const char *> *)v36->first;
      }
      if ((char)second < 0) {
        second = v36->second;
      }
      int v40 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v136, first, (std::sub_match<const char *> *)&second[(void)first], (std::vector<std::csub_match> *)__p, 0);
      uint64_t v41 = (const char *)*((unsigned __int8 *)&v36->matched + 7);
      if ((char)v41 >= 0) {
        uint64_t v42 = (uint64_t)v36;
      }
      else {
        uint64_t v42 = (uint64_t)v36->first;
      }
      if ((char)v41 < 0) {
        uint64_t v41 = v36->second;
      }
      std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)__dst, v42, (std::sub_match<std::__wrap_iter<const char *>> *)&v41[v42], (uint64_t *)__p, 0);
      if (*(void *)__p)
      {
        *(void *)&__p[8] = *(void *)__p;
        operator delete(*(void **)__p);
      }
      if (!v40) {
        goto LABEL_217;
      }
      std::string::size_type v43 = *(void *)&__dst[8] == *(void *)__dst ? &__dst[40] : (unsigned char *)(*(void *)__dst + 16);
      if (*v43) {
        break;
      }
      unint64_t v56 = 0;
      long long v57 = 0;
      unint64_t v58 = 0;
      v127[0] = 0;
      v127[1] = 0;
      int64_t v128 = 0;
LABEL_87:
      if ((v58 & 0x80u) == 0) {
        std::string v62 = (uint64_t *)v127;
      }
      else {
        std::string v62 = v57;
      }
      if ((v58 & 0x80u) == 0) {
        unint64_t v63 = v58;
      }
      else {
        unint64_t v63 = (unint64_t)v56;
      }
      unint64_t v64 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)__p, v62, v63);
      unint64_t v65 = v64;
      unint64_t v66 = *((void *)&v142 + 1);
      if (!*((void *)&v142 + 1))
      {
        unint64_t v68 = 0xAAAAAAAAAAAAAAAALL;
LABEL_143:
        *(void *)&__p[16] = 0xAAAAAAAAAAAAAA01;
        char v87 = operator new(0x28uLL);
        *(void *)tm __p = v87;
        *(void *)&__p[8] = &v143;
        *char v87 = 0;
        v87[1] = v65;
        *((_OWORD *)v87 + 1) = *(_OWORD *)v127;
        v87[4] = v128;
        v127[0] = 0;
        v127[1] = 0;
        int64_t v128 = 0;
        float v88 = (float)(unint64_t)(*((void *)&v143 + 1) + 1);
        if (v66 && (float)(*(float *)&v144 * (float)v66) >= v88)
        {
          uint64_t v35 = v126;
          uint64_t v89 = v142;
          size_t v90 = *(void **)(v142 + 8 * v68);
          if (v90) {
            goto LABEL_146;
          }
LABEL_195:
          *char v87 = v143;
          *(void *)&long long v143 = v87;
          *(void *)(v89 + 8 * v68) = &v143;
          if (*v87)
          {
            unint64_t v111 = *(void *)(*v87 + 8);
            if ((v66 & (v66 - 1)) != 0)
            {
              if (v111 >= v66) {
                v111 %= v66;
              }
            }
            else
            {
              v111 &= v66 - 1;
            }
            size_t v90 = (void *)(v142 + 8 * v111);
LABEL_214:
            void *v90 = v87;
          }
          ++*((void *)&v143 + 1);
          if (v128 < 0) {
            goto LABEL_216;
          }
          goto LABEL_217;
        }
        BOOL v91 = (v66 & (v66 - 1)) != 0;
        if (v66 < 3) {
          BOOL v91 = 1;
        }
        unint64_t v92 = v91 | (2 * v66);
        unint64_t v93 = vcvtps_u32_f32(v88 / *(float *)&v144);
        if (v92 <= v93) {
          size_t prime = v93;
        }
        else {
          size_t prime = v92;
        }
        uint64_t v35 = v126;
        if (prime == 1)
        {
          size_t prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          size_t prime = std::__next_prime(prime);
          unint64_t v66 = *((void *)&v142 + 1);
        }
        if (prime <= v66)
        {
          if (prime >= v66) {
            goto LABEL_193;
          }
          unint64_t v105 = vcvtps_u32_f32((float)*((unint64_t *)&v143 + 1) / *(float *)&v144);
          if (v66 < 3 || (uint8x8_t v106 = (uint8x8_t)vcnt_s8((int8x8_t)v66), v106.i16[0] = vaddlv_u8(v106), v106.u32[0] > 1uLL))
          {
            unint64_t v105 = std::__next_prime(v105);
          }
          else
          {
            uint64_t v107 = 1 << -(char)__clz(v105 - 1);
            if (v105 >= 2) {
              unint64_t v105 = v107;
            }
          }
          if (prime <= v105) {
            size_t prime = v105;
          }
          if (prime < v66)
          {
            if (prime) {
              goto LABEL_157;
            }
            std::string::size_type v109 = (void *)v142;
            *(void *)&long long v142 = 0;
            if (v109) {
              operator delete(v109);
            }
            unint64_t v66 = 0;
            *((void *)&v142 + 1) = 0;
            uint64_t v110 = -1;
            goto LABEL_194;
          }
          unint64_t v66 = *((void *)&v142 + 1);
          uint64_t v110 = *((void *)&v142 + 1) - 1;
          if ((*((void *)&v142 + 1) & (*((void *)&v142 + 1) - 1)) == 0) {
            goto LABEL_194;
          }
          goto LABEL_206;
        }
LABEL_157:
        if (prime >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        long long v95 = operator new(8 * prime);
        uint64_t v96 = (void *)v142;
        *(void *)&long long v142 = v95;
        if (v96) {
          operator delete(v96);
        }
        uint64_t v97 = 0;
        *((void *)&v142 + 1) = prime;
        do
          *(void *)(v142 + 8 * v97++) = 0;
        while (prime != v97);
        unsigned int v98 = (void **)v143;
        if (!(void)v143)
        {
LABEL_205:
          unint64_t v66 = prime;
          uint64_t v110 = prime - 1;
          if ((prime & (prime - 1)) == 0) {
            goto LABEL_194;
          }
          goto LABEL_206;
        }
        size_t v99 = *(void *)(v143 + 8);
        size_t v100 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          size_t v101 = v99 & v100;
          *(void *)(v142 + 8 * v101) = &v143;
          for (std::__wrap_iter<const char *>::iterator_type i = *v98; *v98; std::__wrap_iter<const char *>::iterator_type i = *v98)
          {
            size_t v103 = i[1] & v100;
            if (v103 == v101)
            {
              unsigned int v98 = (void **)i;
            }
            else if (*(void *)(v142 + 8 * v103))
            {
              std::string *v98 = (void *)*i;
              uint64_t v104 = 8 * v103;
              *std::__wrap_iter<const char *>::iterator_type i = **(void **)(v142 + v104);
              **(void **)(v142 + v104) = i;
            }
            else
            {
              *(void *)(v142 + 8 * v103) = v98;
              unsigned int v98 = (void **)i;
              size_t v101 = v103;
            }
          }
          goto LABEL_205;
        }
        if (v99 < prime)
        {
          *(void *)(v142 + 8 * v99) = &v143;
          uint64_t v108 = *v98;
          if (*v98) {
            goto LABEL_200;
          }
LABEL_192:
          unint64_t v66 = prime;
LABEL_193:
          uint64_t v110 = v66 - 1;
          if ((v66 & (v66 - 1)) == 0)
          {
LABEL_194:
            unint64_t v68 = v110 & v65;
            uint64_t v89 = v142;
            size_t v90 = *(void **)(v142 + 8 * (v110 & v65));
            if (!v90) {
              goto LABEL_195;
            }
LABEL_146:
            *char v87 = *v90;
            goto LABEL_214;
          }
LABEL_206:
          if (v65 >= v66)
          {
            unint64_t v68 = v65 % v66;
            uint64_t v89 = v142;
            size_t v90 = *(void **)(v142 + 8 * (v65 % v66));
            if (!v90) {
              goto LABEL_195;
            }
          }
          else
          {
            unint64_t v68 = v65;
            uint64_t v89 = v142;
            size_t v90 = *(void **)(v142 + 8 * v65);
            if (!v90) {
              goto LABEL_195;
            }
          }
          goto LABEL_146;
        }
        v99 %= prime;
        *(void *)(v142 + 8 * v99) = &v143;
        uint64_t v108 = *v98;
        if (!*v98) {
          goto LABEL_192;
        }
        while (1)
        {
LABEL_200:
          size_t v113 = v108[1];
          if (v113 >= prime) {
            v113 %= prime;
          }
          if (v113 == v99) {
            goto LABEL_199;
          }
          if (*(void *)(v142 + 8 * v113)) {
            break;
          }
          *(void *)(v142 + 8 * v113) = v98;
          unsigned int v98 = (void **)v108;
          uint64_t v108 = (void *)*v108;
          size_t v99 = v113;
          if (!v108) {
            goto LABEL_205;
          }
        }
        std::string *v98 = (void *)*v108;
        uint64_t v112 = 8 * v113;
        *uint64_t v108 = **(void **)(v142 + v112);
        **(void **)(v142 + v112) = v108;
        uint64_t v108 = v98;
LABEL_199:
        unsigned int v98 = (void **)v108;
        uint64_t v108 = (void *)*v108;
        if (!v108) {
          goto LABEL_205;
        }
        goto LABEL_200;
      }
      uint8x8_t v67 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v142 + 8));
      v67.i16[0] = vaddlv_u8(v67);
      if (v67.u32[0] > 1uLL)
      {
        unint64_t v68 = v64;
        if (v64 >= *((void *)&v142 + 1)) {
          unint64_t v68 = v64 % *((void *)&v142 + 1);
        }
      }
      else
      {
        unint64_t v68 = (*((void *)&v142 + 1) - 1) & v64;
      }
      int v69 = *(uint64_t ***)(v142 + 8 * v68);
      if (!v69) {
        goto LABEL_143;
      }
      int v70 = *v69;
      if (!*v69) {
        goto LABEL_143;
      }
      char v71 = HIBYTE(v128);
      if (v128 >= 0) {
        int64_t v72 = (void *)HIBYTE(v128);
      }
      else {
        int64_t v72 = v127[1];
      }
      if (v128 >= 0) {
        uint64_t v73 = v127;
      }
      else {
        uint64_t v73 = (void **)v127[0];
      }
      if (v67.u32[0] >= 2uLL)
      {
        while (1)
        {
          unint64_t v75 = v70[1];
          if (v75 == v65)
          {
            uint64_t v76 = *((unsigned __int8 *)v70 + 39);
            if ((v76 & 0x80u) == 0) {
              char v77 = (void *)*((unsigned __int8 *)v70 + 39);
            }
            else {
              char v77 = (void *)v70[3];
            }
            if (v77 == v72)
            {
              size_t v78 = (const void **)(v70 + 2);
              if ((v76 & 0x80) != 0)
              {
                if (!memcmp(*v78, v73, v70[3]))
                {
LABEL_125:
                  uint64_t v35 = v126;
                  if (v71 < 0) {
                    goto LABEL_216;
                  }
                  goto LABEL_217;
                }
              }
              else
              {
                if (!*((unsigned char *)v70 + 39)) {
                  goto LABEL_125;
                }
                long long v79 = v73;
                while (*(unsigned __int8 *)v78 == *(unsigned __int8 *)v79)
                {
                  size_t v78 = (const void **)((char *)v78 + 1);
                  long long v79 = (void **)((char *)v79 + 1);
                  if (!--v76) {
                    goto LABEL_125;
                  }
                }
              }
            }
          }
          else
          {
            if (v75 >= v66) {
              v75 %= v66;
            }
            if (v75 != v68) {
              goto LABEL_143;
            }
          }
          int v70 = (uint64_t *)*v70;
          if (!v70) {
            goto LABEL_143;
          }
        }
      }
      uint64_t v74 = *((void *)&v142 + 1) - 1;
      while (1)
      {
        uint64_t v80 = v70[1];
        if (v80 != v65)
        {
          if ((v80 & v74) != v68) {
            goto LABEL_143;
          }
          goto LABEL_128;
        }
        uint64_t v81 = *((unsigned __int8 *)v70 + 39);
        uint64_t v82 = (v81 & 0x80u) == 0 ? (void *)*((unsigned __int8 *)v70 + 39) : (void *)v70[3];
        if (v82 == v72) {
          break;
        }
LABEL_128:
        int v70 = (uint64_t *)*v70;
        if (!v70) {
          goto LABEL_143;
        }
      }
      size_t v83 = (const void **)(v70 + 2);
      if ((v81 & 0x80) == 0)
      {
        if (!*((unsigned char *)v70 + 39)) {
          goto LABEL_141;
        }
        unint64_t v84 = v73;
        while (*(unsigned __int8 *)v83 == *(unsigned __int8 *)v84)
        {
          size_t v83 = (const void **)((char *)v83 + 1);
          unint64_t v84 = (void **)((char *)v84 + 1);
          if (!--v81) {
            goto LABEL_141;
          }
        }
        goto LABEL_128;
      }
      std::string v124 = v72;
      uint64_t v85 = v74;
      int v86 = memcmp(*v83, v73, v70[3]);
      uint64_t v74 = v85;
      int64_t v72 = v124;
      if (v86) {
        goto LABEL_128;
      }
LABEL_141:
      uint64_t v35 = v126;
      if (v71 < 0) {
LABEL_216:
      }
        operator delete(v127[0]);
LABEL_217:
      if (*(void *)__dst)
      {
        *(void *)&__dst[8] = *(void *)__dst;
        operator delete(*(void **)__dst);
      }
      if (++v36 == v35) {
        goto LABEL_219;
      }
    }
    uint64_t v44 = (uint64_t *)&__dst[24];
    if (*(void *)&__dst[8] != *(void *)__dst) {
      uint64_t v44 = *(uint64_t **)__dst;
    }
    uint64_t v45 = *v44;
    uint64_t v46 = (char **)(*(void *)__dst + 8);
    if (*(void *)&__dst[8] == *(void *)__dst) {
      uint64_t v46 = (char **)&__dst[32];
    }
    xpc_object_t v47 = *v46;
    unint64_t v48 = (unint64_t)&(*v46)[-v45];
    if (v48 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v48 > 0x16)
    {
      uint64_t v59 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v48 | 7) != 0x17) {
        uint64_t v59 = v48 | 7;
      }
      uint64_t v60 = v59 + 1;
      std::string v49 = operator new(v59 + 1);
      v127[1] = (void *)v48;
      int64_t v128 = v60 | 0x8000000000000000;
      v127[0] = v49;
      if ((char *)v45 != v47) {
        goto LABEL_73;
      }
    }
    else
    {
      HIBYTE(v128) = *(unsigned char *)v46 - v45;
      std::string v49 = v127;
      if ((char *)v45 != v47)
      {
LABEL_73:
        if (v48 < 0x20 || (unint64_t)v49 - v45 < 0x20)
        {
          unint64_t v50 = v49;
          uint64_t v51 = (char *)v45;
        }
        else
        {
          unint64_t v50 = (char *)v49 + (v48 & 0xFFFFFFFFFFFFFFE0);
          uint64_t v51 = (char *)(v45 + (v48 & 0xFFFFFFFFFFFFFFE0));
          char v52 = (long long *)(v45 + 16);
          uint64_t v53 = v49 + 1;
          unint64_t v54 = v48 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v55 = *v52;
            *(v53 - 1) = *(v52 - 1);
            _OWORD *v53 = v55;
            v52 += 2;
            v53 += 2;
            v54 -= 32;
          }
          while (v54);
          if (v48 == (v48 & 0x7FFFFFFFFFFFFFE0)) {
            goto LABEL_86;
          }
        }
        do
        {
          char v61 = *v51++;
          *v50++ = v61;
        }
        while (v51 != v47);
LABEL_86:
        *unint64_t v50 = 0;
        unint64_t v58 = HIBYTE(v128);
        long long v57 = (uint64_t *)v127[0];
        unint64_t v56 = v127[1];
        goto LABEL_87;
      }
    }
    unint64_t v50 = v49;
    goto LABEL_86;
  }
LABEL_219:
  uint64_t v114 = *((void *)&v143 + 1);
  long long v115 = (std::__shared_weak_count *)v139;
  if ((void)v139 && !atomic_fetch_add((atomic_ullong *volatile)(v139 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
    std::__shared_weak_count::__release_weak(v115);
  }
  std::locale::~locale(v136);
  uint64_t v116 = (std::__shared_weak_count *)v141;
  if ((void)v141 && !atomic_fetch_add((atomic_ullong *volatile)(v141 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
    std::__shared_weak_count::__release_weak(v116);
  }
  std::locale::~locale((std::locale *)v140);
  operator delete(v125);
  uint64_t v117 = (void **)v143;
  if ((void)v143)
  {
    do
    {
      std::string v123 = (void **)*v117;
      if (*((char *)v117 + 39) < 0) {
        operator delete(v117[2]);
      }
      operator delete(v117);
      uint64_t v117 = v123;
    }
    while (v123);
  }
  unint64_t v118 = (void *)v142;
  *(void *)&long long v142 = 0;
  if (v118) {
    operator delete(v118);
  }
  uint64_t v119 = (void **)v145;
  if (v145)
  {
    uint64_t v120 = (void **)v146;
    long long v121 = v145;
    if (v146 != v145)
    {
      do
      {
        if (*((char *)v120 - 1) < 0) {
          operator delete(*(v120 - 3));
        }
        v120 -= 3;
      }
      while (v120 != v119);
      long long v121 = v145;
    }
    uint64_t v146 = (std::sub_match<const char *> *)v119;
    operator delete(v121);
  }
  return v114;
}

void sub_1C5AD4048(_Unwind_Exception *a1)
{
  operator delete(v2);
  std::unordered_set<std::string>::~unordered_set[abi:ne180100](&v3);
  std::vector<std::string>::~vector[abi:ne180100](&v4);
  _Unwind_Resume(a1);
}

void sub_1C5AD4050()
{
}

void sub_1C5AD4078(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C5AD4080);
  }
  JUMPOUT(0x1C5AD3F08);
}

uint64_t std::unordered_set<std::string>::~unordered_set[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t util::compareTwoStringsWithPattern(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v87 = 0xAAAAAAAAAAAAAA00;
  v84[1].__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)0xAAAAAAAAAAAAAAAALL;
  long long v90 = v5;
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  uint64_t v88 = 0;
  uint64_t v89 = 0;
  LOBYTE(v90) = 0;
  BYTE8(v90) = 0;
  uint64_t v91 = 0;
  memset(v84, 0, 41);
  long long v82 = v5;
  long long v83 = v5;
  *(_OWORD *)&v80[0].__locale_ = v5;
  long long v81 = v5;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v80, a3, 0);
  char v77 = 0;
  size_t v78 = 0;
  unint64_t v79 = 0;
  tm __p = 0;
  unint64_t v75 = 0;
  unint64_t v76 = 0;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v95 = 0xAAAAAAAAAAAAAA00;
  v92[1].__end_cap_.__value_ = (std::sub_match<const char *> *)0xAAAAAAAAAAAAAAAALL;
  long long v98 = v6;
  uint64_t v93 = 0;
  uint64_t v94 = 0;
  uint64_t v96 = 0;
  uint64_t v97 = 0;
  LOBYTE(v98) = 0;
  BYTE8(v98) = 0;
  uint64_t v99 = 0;
  memset(v92, 0, 32);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
  if ((v7 & 0x80u) == 0) {
    size_t v8 = (std::sub_match<const char *> *)a1;
  }
  else {
    size_t v8 = *(std::sub_match<const char *> **)a1;
  }
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a1 + 8);
  }
  *(_OWORD *)((char *)&v92[1].__begin_ + 1) = 0uLL;
  int v9 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v80, v8, (std::sub_match<const char *> *)((char *)v8 + v7), v92, 0);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 23);
  if ((v10 & 0x80u) == 0) {
    uint64_t v11 = a1;
  }
  else {
    uint64_t v11 = *(void *)a1;
  }
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a1 + 8);
  }
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v84, v11, (std::sub_match<std::__wrap_iter<const char *>> *)(v11 + v10), (uint64_t *)v92, 0);
  if (v92[0].__begin_)
  {
    v92[0].__end_ = v92[0].__begin_;
    operator delete(v92[0].__begin_);
  }
  if (v9)
  {
    std::vector<std::ssub_match>::pointer end = v84[0].__end_;
    std::vector<std::ssub_match>::pointer begin = v84[0].__begin_;
    if (v84[0].__begin_ != v84[0].__end_)
    {
      while (1)
      {
        if (!begin->matched)
        {
          memset(v92, 0, 24);
          uint64_t v25 = v78;
          if ((unint64_t)v78 >= v79) {
            goto LABEL_38;
          }
          goto LABEL_16;
        }
        std::__wrap_iter<const char *>::iterator_type i = begin->first.__i_;
        std::__wrap_iter<const char *>::iterator_type v15 = begin->second.__i_;
        unint64_t v17 = v15 - begin->first.__i_;
        if (v17 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v17 > 0x16)
        {
          uint64_t v26 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v17 | 7) != 0x17) {
            uint64_t v26 = v17 | 7;
          }
          uint64_t v27 = v26 + 1;
          long long v18 = (std::sub_match<const char *> *)operator new(v26 + 1);
          v92[0].__end_ = (std::vector<std::csub_match>::pointer)v17;
          v92[0].__end_cap_.__value_ = (std::sub_match<const char *> *)(v27 | 0x8000000000000000);
          v92[0].__begin_ = v18;
          if (i == v15)
          {
LABEL_33:
            LOBYTE(v18->first) = 0;
            uint64_t v25 = v78;
            if ((unint64_t)v78 >= v79) {
              goto LABEL_38;
            }
            goto LABEL_16;
          }
        }
        else
        {
          HIBYTE(v92[0].__end_cap_.__value_) = (_BYTE)v15 - LOBYTE(begin->first.__i_);
          long long v18 = (std::sub_match<const char *> *)v92;
          if (i == v15) {
            goto LABEL_33;
          }
        }
        if (v17 < 0x20 || (unint64_t)((char *)v18 - i) < 0x20) {
          break;
        }
        long long v19 = (std::sub_match<const char *> *)((char *)v18 + (v17 & 0xFFFFFFFFFFFFFFE0));
        long long v20 = &i[v17 & 0xFFFFFFFFFFFFFFE0];
        int v21 = (long long *)(i + 16);
        p_matched = &v18->matched;
        unint64_t v23 = v17 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v24 = *v21;
          *((_OWORD *)p_matched - 1) = *(v21 - 1);
          *(_OWORD *)p_matched = v24;
          v21 += 2;
          p_matched += 32;
          v23 -= 32;
        }
        while (v23);
        if (v17 != (v17 & 0x7FFFFFFFFFFFFFE0)) {
          goto LABEL_36;
        }
LABEL_37:
        LOBYTE(v19->first) = 0;
        uint64_t v25 = v78;
        if ((unint64_t)v78 >= v79)
        {
LABEL_38:
          size_t v78 = std::vector<std::string>::__push_back_slow_path<std::string>(&v77, (uint64_t)v92);
          if (SHIBYTE(v92[0].__end_cap_.__value_) < 0) {
            operator delete(v92[0].__begin_);
          }
          goto LABEL_17;
        }
LABEL_16:
        long long v14 = *(_OWORD *)&v92[0].__begin_;
        *((void *)v25 + 2) = v92[0].__end_cap_.__value_;
        *(_OWORD *)uint64_t v25 = v14;
        size_t v78 = v25 + 24;
LABEL_17:
        if (++begin == end) {
          goto LABEL_40;
        }
      }
      long long v19 = v18;
      long long v20 = i;
      do
      {
LABEL_36:
        char v28 = *v20++;
        LOBYTE(v19->first) = v28;
        long long v19 = (std::sub_match<const char *> *)((char *)v19 + 1);
      }
      while (v20 != v15);
      goto LABEL_37;
    }
LABEL_40:
    long long v29 = (char *)v77;
    long long v30 = v78;
    if (v78 - (unsigned char *)v77 != 24)
    {
      if ((char *)v77 + 24 != v78)
      {
        long long v31 = (char *)v77 + 23;
        do
        {
          int v32 = (void **)(v31 - 23);
          if (*v31 < 0) {
            operator delete(*v32);
          }
          *(_OWORD *)int v32 = *(_OWORD *)(v31 + 1);
          *(void *)(v31 - 7) = *(void *)(v31 + 17);
          v31[24] = 0;
          v31 += 24;
          *(v31 - 23) = 0;
          v29 += 24;
        }
        while (v31 + 1 != v30);
        long long v30 = v78;
      }
      while (v30 != v29)
      {
        if (*(v30 - 1) < 0) {
          operator delete(*((void **)v30 - 3));
        }
        v30 -= 24;
      }
      size_t v78 = v29;
    }
    *(void *)&long long v33 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v33 + 1) = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v95 = 0xAAAAAAAAAAAAAA00;
    v92[1].__end_cap_.__value_ = (std::sub_match<const char *> *)0xAAAAAAAAAAAAAAAALL;
    long long v98 = v33;
    uint64_t v93 = 0;
    uint64_t v94 = 0;
    uint64_t v96 = 0;
    uint64_t v97 = 0;
    LOBYTE(v98) = 0;
    BYTE8(v98) = 0;
    uint64_t v99 = 0;
    memset(v92, 0, 32);
    uint64_t v34 = *(unsigned __int8 *)(a2 + 23);
    if ((v34 & 0x80u) == 0) {
      uint64_t v35 = (std::sub_match<const char *> *)a2;
    }
    else {
      uint64_t v35 = *(std::sub_match<const char *> **)a2;
    }
    if ((v34 & 0x80u) != 0) {
      uint64_t v34 = *(void *)(a2 + 8);
    }
    *(_OWORD *)((char *)&v92[1].__begin_ + 1) = 0uLL;
    int v36 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v80, v35, (std::sub_match<const char *> *)((char *)v35 + v34), v92, 0);
    uint64_t v37 = *(unsigned __int8 *)(a2 + 23);
    if ((v37 & 0x80u) == 0) {
      uint64_t v38 = a2;
    }
    else {
      uint64_t v38 = *(void *)a2;
    }
    if ((v37 & 0x80u) != 0) {
      uint64_t v37 = *(void *)(a2 + 8);
    }
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v84, v38, (std::sub_match<std::__wrap_iter<const char *>> *)(v38 + v37), (uint64_t *)v92, 0);
    if (v92[0].__begin_)
    {
      v92[0].__end_ = v92[0].__begin_;
      operator delete(v92[0].__begin_);
    }
    if (v36)
    {
      std::vector<std::ssub_match>::pointer v40 = v84[0].__end_;
      std::vector<std::ssub_match>::pointer v39 = v84[0].__begin_;
      if (v84[0].__begin_ != v84[0].__end_)
      {
        while (1)
        {
          if (!v39->matched)
          {
            memset(v92, 0, 24);
            char v52 = v75;
            if ((unint64_t)v75 >= v76) {
              goto LABEL_89;
            }
            goto LABEL_67;
          }
          std::__wrap_iter<const char *>::iterator_type v43 = v39->first.__i_;
          std::__wrap_iter<const char *>::iterator_type v42 = v39->second.__i_;
          unint64_t v44 = v42 - v39->first.__i_;
          if (v44 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          if (v44 > 0x16)
          {
            uint64_t v53 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v44 | 7) != 0x17) {
              uint64_t v53 = v44 | 7;
            }
            uint64_t v54 = v53 + 1;
            uint64_t v45 = (std::sub_match<const char *> *)operator new(v53 + 1);
            v92[0].__end_ = (std::vector<std::csub_match>::pointer)v44;
            v92[0].__end_cap_.__value_ = (std::sub_match<const char *> *)(v54 | 0x8000000000000000);
            v92[0].__begin_ = v45;
            if (v43 == v42)
            {
LABEL_84:
              LOBYTE(v45->first) = 0;
              char v52 = v75;
              if ((unint64_t)v75 >= v76) {
                goto LABEL_89;
              }
              goto LABEL_67;
            }
          }
          else
          {
            HIBYTE(v92[0].__end_cap_.__value_) = (_BYTE)v42 - LOBYTE(v39->first.__i_);
            uint64_t v45 = (std::sub_match<const char *> *)v92;
            if (v43 == v42) {
              goto LABEL_84;
            }
          }
          if (v44 < 0x20 || (unint64_t)((char *)v45 - v43) < 0x20) {
            break;
          }
          uint64_t v46 = (std::sub_match<const char *> *)((char *)v45 + (v44 & 0xFFFFFFFFFFFFFFE0));
          xpc_object_t v47 = &v43[v44 & 0xFFFFFFFFFFFFFFE0];
          unint64_t v48 = (long long *)(v43 + 16);
          std::string v49 = &v45->matched;
          unint64_t v50 = v44 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v51 = *v48;
            *((_OWORD *)v49 - 1) = *(v48 - 1);
            *(_OWORD *)std::string v49 = v51;
            v48 += 2;
            v49 += 32;
            v50 -= 32;
          }
          while (v50);
          if (v44 != (v44 & 0x7FFFFFFFFFFFFFE0)) {
            goto LABEL_87;
          }
LABEL_88:
          LOBYTE(v46->first) = 0;
          char v52 = v75;
          if ((unint64_t)v75 >= v76)
          {
LABEL_89:
            unint64_t v75 = std::vector<std::string>::__push_back_slow_path<std::string>(&__p, (uint64_t)v92);
            if (SHIBYTE(v92[0].__end_cap_.__value_) < 0) {
              operator delete(v92[0].__begin_);
            }
            goto LABEL_68;
          }
LABEL_67:
          long long v41 = *(_OWORD *)&v92[0].__begin_;
          *((void *)v52 + 2) = v92[0].__end_cap_.__value_;
          *(_OWORD *)char v52 = v41;
          unint64_t v75 = v52 + 24;
LABEL_68:
          if (++v39 == v40) {
            goto LABEL_91;
          }
        }
        uint64_t v46 = v45;
        xpc_object_t v47 = v43;
        do
        {
LABEL_87:
          char v55 = *v47++;
          LOBYTE(v46->first) = v55;
          uint64_t v46 = (std::sub_match<const char *> *)((char *)v46 + 1);
        }
        while (v47 != v42);
        goto LABEL_88;
      }
LABEL_91:
      long long v57 = (char *)__p;
      unint64_t v56 = v75;
      if (v75 - (unsigned char *)__p == 24)
      {
        unint64_t v58 = (char *)v77;
        uint64_t v59 = v78;
        uint64_t v60 = 1;
        if (v77 != v78) {
          goto LABEL_117;
        }
LABEL_105:
        if (v57) {
          goto LABEL_106;
        }
LABEL_134:
        unint64_t v64 = (char *)v77;
        if (v77) {
          goto LABEL_135;
        }
        goto LABEL_108;
      }
      if ((char *)__p + 24 != v75)
      {
        char v61 = (char *)__p + 23;
        do
        {
          std::string v62 = (void **)(v61 - 23);
          if (*v61 < 0) {
            operator delete(*v62);
          }
          *(_OWORD *)std::string v62 = *(_OWORD *)(v61 + 1);
          *(void *)(v61 - 7) = *(void *)(v61 + 17);
          v61[24] = 0;
          v61 += 24;
          *(v61 - 23) = 0;
          v57 += 24;
        }
        while (v61 + 1 != v56);
        unint64_t v56 = v75;
      }
      while (v56 != v57)
      {
        if (*(v56 - 1) < 0) {
          operator delete(*((void **)v56 - 3));
        }
        v56 -= 24;
      }
      unint64_t v75 = v57;
      long long v57 = (char *)__p;
      unint64_t v58 = (char *)v77;
      uint64_t v59 = v78;
      uint64_t v60 = 1;
      if (v77 == v78) {
        goto LABEL_105;
      }
      while (1)
      {
LABEL_117:
        uint64_t v66 = v58[23];
        if ((v66 & 0x80u) == 0) {
          uint64_t v67 = v58[23];
        }
        else {
          uint64_t v67 = *((void *)v58 + 1);
        }
        uint64_t v68 = v57[23];
        int v69 = (char)v68;
        if ((v68 & 0x80u) != 0) {
          uint64_t v68 = *((void *)v57 + 1);
        }
        if (v67 != v68) {
          break;
        }
        if (v69 >= 0) {
          int v70 = v57;
        }
        else {
          int v70 = *(char **)v57;
        }
        if ((v66 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v58, v70, *((void *)v58 + 1))) {
            break;
          }
        }
        else if (v58[23])
        {
          uint64_t v71 = 0;
          while (v58[v71] == v70[v71])
          {
            if (v66 == ++v71) {
              goto LABEL_116;
            }
          }
          break;
        }
LABEL_116:
        v58 += 24;
        v57 += 24;
        if (v58 == v59) {
          goto LABEL_133;
        }
      }
    }
  }
  uint64_t v60 = 0;
LABEL_133:
  long long v57 = (char *)__p;
  if (!__p) {
    goto LABEL_134;
  }
LABEL_106:
  unint64_t v63 = v75;
  if (v75 != v57)
  {
    do
    {
      if (*(v63 - 1) < 0) {
        operator delete(*((void **)v63 - 3));
      }
      v63 -= 24;
    }
    while (v63 != v57);
    unint64_t v75 = v57;
    operator delete(__p);
    unint64_t v64 = (char *)v77;
    if (v77) {
      goto LABEL_135;
    }
LABEL_108:
    unint64_t v65 = (std::__shared_weak_count *)v83;
    if (!(void)v83) {
      goto LABEL_144;
    }
    goto LABEL_142;
  }
  unint64_t v75 = v57;
  operator delete(v57);
  unint64_t v64 = (char *)v77;
  if (!v77) {
    goto LABEL_108;
  }
LABEL_135:
  int64_t v72 = v78;
  if (v78 == v64)
  {
    size_t v78 = v64;
    operator delete(v64);
    unint64_t v65 = (std::__shared_weak_count *)v83;
    if (!(void)v83) {
      goto LABEL_144;
    }
    goto LABEL_142;
  }
  do
  {
    if (*(v72 - 1) < 0) {
      operator delete(*((void **)v72 - 3));
    }
    v72 -= 24;
  }
  while (v72 != v64);
  size_t v78 = v64;
  operator delete(v77);
  unint64_t v65 = (std::__shared_weak_count *)v83;
  if ((void)v83)
  {
LABEL_142:
    if (!atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
LABEL_144:
  std::locale::~locale(v80);
  if (v84[0].__begin_)
  {
    v84[0].__end_ = v84[0].__begin_;
    operator delete(v84[0].__begin_);
  }
  return v60;
}

void sub_1C5AD48E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  uint64_t v26 = *(void **)(v24 - 192);
  if (v26)
  {
    *(void *)(v24 - 184) = v26;
    operator delete(v26);
  }
  std::vector<std::string>::~vector[abi:ne180100]((void **)&a9);
  std::vector<std::string>::~vector[abi:ne180100](&a12);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a15);
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
    }
    size_t v8 = (char *)operator new(24 * a4);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[24 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = (std::string *)&v8[v9];
        uint64_t v11 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v11, *(void *)(v11 + 8));
        }
        else
        {
          *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)v11;
          v10->__r_.__value_.__r.__words[2] = *(void *)(v11 + 16);
        }
        v9 += 24;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    a1[1] = v8;
  }
}

void sub_1C5AD4A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_1C5AD4A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0) {
      operator delete(*(void **)(v10 + v11 - 24));
    }
  }
  *(void *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ***std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (void **)**result;
    if (v3)
    {
      uint64_t v4 = (void **)v2[1];
      long long v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0) {
            operator delete(*(v4 - 3));
          }
          v4 -= 3;
        }
        while (v4 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

__n128 std::__introsort<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*,false>(unint64_t a1, const void **a2, uint64_t a3, char a4, __n128 result)
{
LABEL_1:
  v268 = a2 - 3;
  v271 = a2;
  v260 = a2 - 9;
  v261 = a2 - 6;
  unint64_t k = a1;
  while (1)
  {
    a1 = k;
    uint64_t v11 = (uint64_t)a2 - k;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - k) >> 3);
    if (v6 || !v5)
    {
      switch(v12)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v119 = (__n128 *)(a2 - 3);
          int v120 = *((char *)a2 - 1);
          if (v120 >= 0) {
            long long v121 = a2 - 3;
          }
          else {
            long long v121 = (const void **)*(a2 - 3);
          }
          if (v120 >= 0) {
            size_t v122 = *((unsigned __int8 *)a2 - 1);
          }
          else {
            size_t v122 = (size_t)*(a2 - 2);
          }
          int v123 = *(char *)(a1 + 23);
          std::string v124 = *(void **)a1;
          std::locale v125 = *(const void **)(a1 + 8);
          if (v123 >= 0) {
            long long v126 = (const void *)a1;
          }
          else {
            long long v126 = *(const void **)a1;
          }
          if (v123 >= 0) {
            size_t v127 = *(unsigned __int8 *)(a1 + 23);
          }
          else {
            size_t v127 = *(void *)(a1 + 8);
          }
          if (v127 >= v122) {
            size_t v128 = v122;
          }
          else {
            size_t v128 = v127;
          }
          int v129 = memcmp(v121, v126, v128);
          if (v129)
          {
            if (v129 < 0) {
              return result;
            }
          }
          else if (v122 <= v127)
          {
            return result;
          }
          v258 = *(const void **)(a1 + 16);
          uint64_t v259 = (uint64_t)*(a2 - 1);
          BOOL result = *v119;
          *(__n128 *)a1 = *v119;
          *(void *)(a1 + 16) = v259;
          *(a2 - 3) = v124;
          *(a2 - 2) = v125;
          *(a2 - 1) = v258;
          break;
        case 3uLL:
          result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, v268).n128_u64[0];
          return result;
        case 4uLL:
          result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, v268).n128_u64[0];
          return result;
        case 5uLL:
          result.n128_u64[0] = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, a1 + 72, v268).n128_u64[0];
          return result;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v11 <= 575)
    {
      if (a4)
      {
        if ((const void **)a1 == a2) {
          return result;
        }
        long long v130 = (const void *)(a1 + 24);
        if ((const void **)(a1 + 24) == a2) {
          return result;
        }
        uint64_t v131 = 0;
        unint64_t v132 = a1;
        while (2)
        {
          uint64_t v134 = (__n128 *)v132;
          unint64_t v132 = (unint64_t)v130;
          int v135 = v134[2].n128_i8[15];
          if (v135 >= 0) {
            long long v136 = v130;
          }
          else {
            long long v136 = (const void *)v134[1].n128_u64[1];
          }
          if (v135 >= 0) {
            size_t v137 = v134[2].n128_u8[15];
          }
          else {
            size_t v137 = v134[2].n128_u64[0];
          }
          int v138 = v134[1].n128_i8[7];
          if (v138 >= 0) {
            long long v139 = v134;
          }
          else {
            long long v139 = (__n128 *)v134->n128_u64[0];
          }
          if (v138 >= 0) {
            size_t v140 = v134[1].n128_u8[7];
          }
          else {
            size_t v140 = v134->n128_u64[1];
          }
          if (v140 >= v137) {
            size_t v141 = v137;
          }
          else {
            size_t v141 = v140;
          }
          int v142 = memcmp(v136, v139, v141);
          if (v142)
          {
            if (v142 < 0)
            {
LABEL_266:
              long long v130 = (const void *)(v132 + 24);
              v131 += 24;
              if ((const void **)(v132 + 24) == v271) {
                return result;
              }
              continue;
            }
          }
          else if (v137 <= v140)
          {
            goto LABEL_266;
          }
          break;
        }
        __n128 v143 = *(__n128 *)v132;
        int64_t v274 = *(void *)(v132 + 16);
        __n128 v273 = v143;
        if (v274 >= 0) {
          unint64_t v144 = &v273;
        }
        else {
          unint64_t v144 = (__n128 *)v143.n128_u64[0];
        }
        if (v274 >= 0) {
          size_t v145 = HIBYTE(v274);
        }
        else {
          size_t v145 = v143.n128_u64[1];
        }
        *(void *)(v132 + 16) = v134[1].n128_u64[0];
        *(__n128 *)unint64_t v132 = *v134;
        v134[1].n128_u8[7] = 0;
        v134->n128_u8[0] = 0;
        uint64_t v133 = (__n128 *)a1;
        if (v134 != (__n128 *)a1)
        {
          uint64_t v146 = v131;
          while (1)
          {
            uint64_t v147 = a1 + v146;
            int v148 = *(char *)(a1 + v146 - 1);
            if (v148 >= 0) {
              uint64_t v149 = (const void *)(a1 + v146 - 24);
            }
            else {
              uint64_t v149 = *(const void **)(a1 + v146 - 24);
            }
            if (v148 >= 0) {
              size_t v150 = *(unsigned __int8 *)(a1 + v146 - 1);
            }
            else {
              size_t v150 = *(void *)(a1 + v146 - 16);
            }
            if (v150 >= v145) {
              size_t v151 = v145;
            }
            else {
              size_t v151 = v150;
            }
            int v152 = memcmp(v144, v149, v151);
            if (v152)
            {
              if (v152 < 0)
              {
                uint64_t v133 = (__n128 *)(a1 + v146);
                break;
              }
            }
            else if (v145 <= v150)
            {
              uint64_t v133 = v134;
              break;
            }
            uint64_t v134 = (__n128 *)((char *)v134 - 24);
            *(_OWORD *)uint64_t v147 = *(_OWORD *)(a1 + v146 - 24);
            *(void *)(v147 + 16) = *(void *)(a1 + v146 - 8);
            *(unsigned char *)(v147 - 1) = 0;
            *(unsigned char *)(v147 - 24) = 0;
            v146 -= 24;
            if (!v146)
            {
              uint64_t v133 = (__n128 *)a1;
              break;
            }
          }
        }
        BOOL result = v273;
        v133[1].n128_u64[0] = v274;
        *uint64_t v133 = result;
        goto LABEL_266;
      }
      if ((const void **)a1 == a2) {
        return result;
      }
      v239 = (const void *)(a1 + 24);
      if ((const void **)(a1 + 24) == a2) {
        return result;
      }
LABEL_478:
      v240 = (const void **)a1;
      a1 = (unint64_t)v239;
      int v241 = *((char *)v240 + 47);
      if (v241 >= 0) {
        v242 = v239;
      }
      else {
        v242 = v240[3];
      }
      if (v241 >= 0) {
        size_t v243 = *((unsigned __int8 *)v240 + 47);
      }
      else {
        size_t v243 = (size_t)v240[4];
      }
      int v244 = *((char *)v240 + 23);
      if (v244 >= 0) {
        v245 = v240;
      }
      else {
        v245 = *v240;
      }
      if (v244 >= 0) {
        size_t v246 = *((unsigned __int8 *)v240 + 23);
      }
      else {
        size_t v246 = (size_t)v240[1];
      }
      if (v246 >= v243) {
        size_t v247 = v243;
      }
      else {
        size_t v247 = v246;
      }
      int v248 = memcmp(v242, v245, v247);
      if (v248)
      {
        if (v248 < 0) {
          goto LABEL_477;
        }
      }
      else if (v243 <= v246)
      {
        goto LABEL_477;
      }
      __n128 v249 = *(__n128 *)a1;
      int64_t v274 = *(void *)(a1 + 16);
      __n128 v273 = v249;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)a1 = 0;
      if (v274 >= 0) {
        v250 = &v273;
      }
      else {
        v250 = (__n128 *)v273.n128_u64[0];
      }
      if (v274 >= 0) {
        size_t v251 = HIBYTE(v274);
      }
      else {
        size_t v251 = v273.n128_u64[1];
      }
      for (unint64_t i = a1; ; i -= 24)
      {
        *(_OWORD *)unint64_t i = *(_OWORD *)(i - 24);
        *(void *)(i + 16) = *(void *)(i - 8);
        *(unsigned char *)(i - 1) = 0;
        *(unsigned char *)(i - 24) = 0;
        int v253 = *(char *)(i - 25);
        if (v253 >= 0) {
          v254 = (const void *)(i - 48);
        }
        else {
          v254 = *(const void **)(i - 48);
        }
        if (v253 >= 0) {
          size_t v255 = *(unsigned __int8 *)(i - 25);
        }
        else {
          size_t v255 = *(void *)(i - 40);
        }
        if (v255 >= v251) {
          size_t v256 = v251;
        }
        else {
          size_t v256 = v255;
        }
        int v257 = memcmp(v250, v254, v256);
        if (v257)
        {
          if (v257 < 0)
          {
LABEL_476:
            BOOL result = v273;
            *(void *)(i - 8) = v274;
            *(__n128 *)(i - 24) = result;
LABEL_477:
            v239 = (const void *)(a1 + 24);
            if ((const void **)(a1 + 24) == a2) {
              return result;
            }
            goto LABEL_478;
          }
        }
        else if (v251 <= v255)
        {
          goto LABEL_476;
        }
      }
    }
    if (!a3) {
      break;
    }
    unint64_t v13 = v12 >> 1;
    uint64_t v14 = a1 + 24 * (v12 >> 1);
    if ((unint64_t)v11 < 0xC01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(v14, a1, v268);
      uint64_t v265 = a3 - 1;
      if ((a4 & 1) == 0)
      {
LABEL_10:
        int v19 = *(char *)(a1 - 1);
        if (v19 >= 0) {
          long long v20 = (const void *)(a1 - 24);
        }
        else {
          long long v20 = *(const void **)(a1 - 24);
        }
        if (v19 >= 0) {
          size_t v21 = *(unsigned __int8 *)(a1 - 1);
        }
        else {
          size_t v21 = *(void *)(a1 - 16);
        }
        int v22 = *(char *)(a1 + 23);
        if (v22 >= 0) {
          unint64_t v23 = (const void *)a1;
        }
        else {
          unint64_t v23 = *(const void **)a1;
        }
        if (v22 >= 0) {
          size_t v24 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          size_t v24 = *(void *)(a1 + 8);
        }
        if (v24 >= v21) {
          size_t v25 = v21;
        }
        else {
          size_t v25 = v24;
        }
        int v26 = memcmp(v20, v23, v25);
        if (v26)
        {
          if (v26 < 0) {
            goto LABEL_125;
          }
        }
        else if (v21 <= v24)
        {
LABEL_125:
          __n128 v72 = *(__n128 *)a1;
          int64_t v274 = *(void *)(a1 + 16);
          __n128 v273 = v72;
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)a1 = 0;
          uint64_t v73 = a2;
          if (v274 >= 0) {
            uint64_t v74 = &v273;
          }
          else {
            uint64_t v74 = (__n128 *)v273.n128_u64[0];
          }
          if (v274 >= 0) {
            size_t v75 = HIBYTE(v274);
          }
          else {
            size_t v75 = v273.n128_u64[1];
          }
          size_t v76 = *((unsigned __int8 *)v73 - 1);
          size_t v78 = (const void **)*(v73 - 3);
          char v77 = *(v73 - 2);
          if ((v76 & 0x80u) == 0) {
            unint64_t v79 = v268;
          }
          else {
            unint64_t v79 = (const void **)*(v73 - 3);
          }
          if ((v76 & 0x80u) == 0) {
            size_t v80 = *((unsigned __int8 *)v73 - 1);
          }
          else {
            size_t v80 = (size_t)*(v73 - 2);
          }
          if (v80 >= v75) {
            size_t v81 = v75;
          }
          else {
            size_t v81 = v80;
          }
          int v82 = memcmp(v74, v79, v81);
          if (v82)
          {
            if ((v82 & 0x80000000) == 0)
            {
LABEL_142:
              unint64_t v83 = a1 + 24;
              do
              {
                while (1)
                {
                  unint64_t k = v83;
                  uint64_t v84 = *(unsigned __int8 *)(v83 + 23);
                  uint64_t v85 = (v84 & 0x80u) == 0 ? (const void *)k : *(const void **)k;
                  size_t v86 = (v84 & 0x80u) == 0 ? v84 : *(void *)(k + 8);
                  size_t v87 = v86 >= v75 ? v75 : v86;
                  int v88 = memcmp(v74, v85, v87);
                  unint64_t v83 = k + 24;
                  if (v88) {
                    break;
                  }
                  if (v75 > v86) {
                    goto LABEL_155;
                  }
                }
              }
              while (v88 < 0);
LABEL_155:
              j = v271;
              if (k < (unint64_t)v271)
              {
                for (j = v268; ; char v77 = j[1])
                {
                  if ((v76 & 0x80u) == 0) {
                    uint64_t v91 = j;
                  }
                  else {
                    uint64_t v91 = v78;
                  }
                  if ((v76 & 0x80u) == 0) {
                    size_t v92 = v76;
                  }
                  else {
                    size_t v92 = (size_t)v77;
                  }
                  if (v92 >= v75) {
                    size_t v93 = v75;
                  }
                  else {
                    size_t v93 = v92;
                  }
                  int v94 = memcmp(v74, v91, v93);
                  if (v94)
                  {
                    if (v94 < 0) {
                      break;
                    }
                  }
                  else if (v75 <= v92)
                  {
                    break;
                  }
                  long long v90 = (const void **)*(j - 3);
                  j -= 3;
                  size_t v78 = v90;
                  size_t v76 = *((unsigned __int8 *)j + 23);
                }
              }
              if (k < (unint64_t)j)
              {
                unint64_t v95 = *(const void **)k;
                do
                {
                  long long v96 = *(_OWORD *)(k + 8);
                  long long v97 = *(_OWORD *)j;
                  *(void *)(k + 16) = j[2];
                  *(_OWORD *)unint64_t k = v97;
                  *j = v95;
                  *(_OWORD *)(j + 1) = v96;
                  if (v274 >= 0) {
                    long long v98 = &v273;
                  }
                  else {
                    long long v98 = (__n128 *)v273.n128_u64[0];
                  }
                  if (v274 >= 0) {
                    unint64_t v99 = HIBYTE(v274);
                  }
                  else {
                    unint64_t v99 = v273.n128_u64[1];
                  }
                  unint64_t v100 = k + 24;
                  do
                  {
                    while (1)
                    {
                      unint64_t k = v100;
                      uint64_t v101 = *(unsigned __int8 *)(v100 + 23);
                      unint64_t v95 = *(const void **)k;
                      uint64_t v102 = (v101 & 0x80u) == 0 ? (const void *)k : *(const void **)k;
                      unint64_t v103 = (v101 & 0x80u) == 0 ? v101 : *(void *)(k + 8);
                      size_t v104 = v103 >= v99 ? v99 : v103;
                      int v105 = memcmp(v98, v102, v104);
                      unint64_t v100 = k + 24;
                      if (v105) {
                        break;
                      }
                      if (v99 > v103) {
                        goto LABEL_192;
                      }
                    }
                  }
                  while (v105 < 0);
LABEL_192:
                  uint8x8_t v106 = j - 3;
                  do
                  {
                    while (1)
                    {
                      j = v106;
                      uint64_t v107 = (const void *)*((unsigned __int8 *)v106 + 23);
                      uint64_t v108 = (char)v107 >= 0 ? j : (const void **)*j;
                      std::string::size_type v109 = (char)v107 >= 0 ? v107 : j[1];
                      size_t v110 = (unint64_t)v109 >= v99 ? v99 : (size_t)v109;
                      int v111 = memcmp(v98, v108, v110);
                      uint8x8_t v106 = j - 3;
                      if (v111) {
                        break;
                      }
                      if (v99 <= (unint64_t)v109) {
                        goto LABEL_172;
                      }
                    }
                  }
                  while ((v111 & 0x80000000) == 0);
LABEL_172:
                  ;
                }
                while (k < (unint64_t)j);
              }
              uint64_t v112 = (__n128 *)(k - 24);
              BOOL v5 = k - 24 >= a1;
              BOOL v6 = k - 24 == a1;
              if (k - 24 == a1)
              {
                a2 = v271;
                a3 = v265;
                if (*(char *)(k - 1) < 0) {
                  operator delete(*(void **)a1);
                }
              }
              else
              {
                if (*(char *)(a1 + 23) < 0) {
                  operator delete(*(void **)a1);
                }
                __n128 v113 = *v112;
                *(void *)(a1 + 16) = *(void *)(k - 8);
                *(__n128 *)a1 = v113;
                *(unsigned char *)(k - 1) = 0;
                *(unsigned char *)(k - 24) = 0;
                a2 = v271;
                a3 = v265;
              }
              a4 = 0;
              BOOL result = v273;
              *(void *)(k - 8) = v274;
              *uint64_t v112 = result;
              continue;
            }
          }
          else if (v75 > v80)
          {
            goto LABEL_142;
          }
          for (unint64_t k = a1 + 24; k < (unint64_t)v271; k += 24)
          {
            int v114 = *(char *)(k + 23);
            if (v114 >= 0) {
              long long v115 = (const void *)k;
            }
            else {
              long long v115 = *(const void **)k;
            }
            if (v114 >= 0) {
              size_t v116 = *(unsigned __int8 *)(k + 23);
            }
            else {
              size_t v116 = *(void *)(k + 8);
            }
            if (v116 >= v75) {
              size_t v117 = v75;
            }
            else {
              size_t v117 = v116;
            }
            int v118 = memcmp(v74, v115, v117);
            if (v118)
            {
              if ((v118 & 0x80000000) == 0) {
                goto LABEL_155;
              }
            }
            else if (v75 > v116)
            {
              goto LABEL_155;
            }
          }
          goto LABEL_155;
        }
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, v14, v268);
      uint64_t v15 = 24 * v13;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1 + 24, v15 + a1 - 24, v261);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1 + 48, a1 + 24 + v15, v260);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(v15 + a1 - 24, v14, (const void **)(a1 + 24 + v15));
      long long v16 = *(void **)a1;
      long long v17 = *(_OWORD *)(a1 + 8);
      long long v18 = *(_OWORD *)v14;
      *(void *)(a1 + 16) = *(void *)(v14 + 16);
      *(_OWORD *)a1 = v18;
      *(void *)uint64_t v14 = v16;
      *(_OWORD *)(v14 + 8) = v17;
      uint64_t v265 = a3 - 1;
      if ((a4 & 1) == 0) {
        goto LABEL_10;
      }
    }
    uint64_t v27 = 0;
    __n128 v28 = *(__n128 *)a1;
    int64_t v274 = *(void *)(a1 + 16);
    __n128 v273 = v28;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    if (v274 >= 0) {
      long long v29 = &v273;
    }
    else {
      long long v29 = (__n128 *)v273.n128_u64[0];
    }
    if (v274 >= 0) {
      unint64_t v30 = HIBYTE(v274);
    }
    else {
      unint64_t v30 = v273.n128_u64[1];
    }
    while (1)
    {
      long long v31 = *(const void **)(a1 + v27 + 24);
      int v32 = *(char *)(a1 + v27 + 47);
      long long v33 = v32 >= 0 ? (const void *)(a1 + v27 + 24) : *(const void **)(a1 + v27 + 24);
      unint64_t v34 = v32 >= 0 ? *(unsigned __int8 *)(a1 + v27 + 47) : *(void *)(a1 + v27 + 32);
      size_t v35 = v30 >= v34 ? v34 : v30;
      int v36 = memcmp(v33, v29, v35);
      if (v36) {
        break;
      }
      if (v34 <= v30) {
        goto LABEL_46;
      }
LABEL_34:
      v27 += 24;
    }
    if ((v36 & 0x80000000) == 0) {
      goto LABEL_34;
    }
LABEL_46:
    unint64_t v37 = a1 + v27 + 24;
    uint64_t v38 = v268;
    if (v27)
    {
      do
      {
        while (1)
        {
          std::vector<std::ssub_match>::pointer v39 = v38;
          uint64_t v46 = (const void *)*((unsigned __int8 *)v38 + 23);
          xpc_object_t v47 = (char)v46 >= 0 ? v39 : (const void **)*v39;
          unint64_t v48 = (unint64_t)((char)v46 >= 0 ? v46 : v39[1]);
          size_t v49 = v30 >= v48 ? v48 : v30;
          int v50 = memcmp(v47, v29, v49);
          uint64_t v38 = v39 - 3;
          if (v50) {
            break;
          }
          if (v48 > v30) {
            goto LABEL_77;
          }
        }
      }
      while (v50 < 0);
    }
    else
    {
      std::vector<std::ssub_match>::pointer v39 = v271;
      if (v37 < (unint64_t)v271)
      {
        std::vector<std::ssub_match>::pointer v40 = v268;
        do
        {
          while (1)
          {
            std::vector<std::ssub_match>::pointer v39 = v40;
            long long v41 = (const void *)*((unsigned __int8 *)v40 + 23);
            std::__wrap_iter<const char *>::iterator_type v42 = (char)v41 >= 0 ? v39 : (const void **)*v39;
            unint64_t v43 = (unint64_t)((char)v41 >= 0 ? v41 : v39[1]);
            size_t v44 = v30 >= v43 ? v43 : v30;
            int v45 = memcmp(v42, v29, v44);
            std::vector<std::ssub_match>::pointer v40 = v39 - 3;
            if (!v45) {
              break;
            }
            if (v37 >= (unint64_t)v39 || (v45 & 0x80000000) == 0) {
              goto LABEL_77;
            }
          }
        }
        while (v37 < (unint64_t)v39 && v43 <= v30);
      }
    }
LABEL_77:
    if (v37 >= (unint64_t)v39)
    {
      unint64_t k = v37;
    }
    else
    {
      long long v51 = v39;
      unint64_t k = v37;
      do
      {
        long long v52 = *(_OWORD *)(k + 8);
        long long v53 = *(_OWORD *)v51;
        *(void *)(k + 16) = v51[2];
        *(_OWORD *)unint64_t k = v53;
        char *v51 = v31;
        *(_OWORD *)(v51 + 1) = v52;
        if (v274 >= 0) {
          uint64_t v54 = &v273;
        }
        else {
          uint64_t v54 = (__n128 *)v273.n128_u64[0];
        }
        if (v274 >= 0) {
          unint64_t v55 = HIBYTE(v274);
        }
        else {
          unint64_t v55 = v273.n128_u64[1];
        }
        unint64_t v56 = k + 24;
        do
        {
          while (1)
          {
            unint64_t k = v56;
            uint64_t v57 = *(unsigned __int8 *)(v56 + 23);
            long long v31 = *(const void **)k;
            unint64_t v58 = (v57 & 0x80u) == 0 ? (const void *)k : *(const void **)k;
            unint64_t v59 = (v57 & 0x80u) == 0 ? v57 : *(void *)(k + 8);
            size_t v60 = v55 >= v59 ? v59 : v55;
            int v61 = memcmp(v58, v54, v60);
            unint64_t v56 = k + 24;
            if (v61) {
              break;
            }
            if (v59 <= v55) {
              goto LABEL_99;
            }
          }
        }
        while ((v61 & 0x80000000) == 0);
LABEL_99:
        std::string v62 = v51 - 3;
        do
        {
          while (1)
          {
            long long v51 = v62;
            unint64_t v63 = (const void *)*((unsigned __int8 *)v62 + 23);
            unint64_t v64 = (char)v63 >= 0 ? v51 : (const void **)*v51;
            unint64_t v65 = (unint64_t)((char)v63 >= 0 ? v63 : v51[1]);
            size_t v66 = v55 >= v65 ? v65 : v55;
            int v67 = memcmp(v64, v54, v66);
            std::string v62 = v51 - 3;
            if (v67) {
              break;
            }
            if (v65 > v55) {
              goto LABEL_79;
            }
          }
        }
        while (v67 < 0);
LABEL_79:
        ;
      }
      while (k < (unint64_t)v51);
    }
    uint64_t v68 = (__n128 *)(k - 24);
    if (k - 24 == a1)
    {
      a2 = v271;
      a3 = v265;
      if (*(char *)(k - 1) < 0) {
        operator delete(*(void **)a1);
      }
    }
    else
    {
      a2 = v271;
      a3 = v265;
      if (*(char *)(a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      __n128 v69 = *v68;
      *(void *)(a1 + 16) = *(void *)(k - 8);
      *(__n128 *)a1 = v69;
      *(unsigned char *)(k - 1) = 0;
      *(unsigned char *)(k - 24) = 0;
    }
    __n128 v70 = v273;
    *(void *)(k - 8) = v274;
    *uint64_t v68 = v70;
    if (v37 < (unint64_t)v39)
    {
LABEL_123:
      std::__introsort<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*,false>(a1, k - 24, a3, a4 & 1);
      a4 = 0;
    }
    else
    {
      BOOL v71 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, (const void **)(k - 24));
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(k, a2))
      {
        a2 = (const void **)(k - 24);
        if (v71) {
          return result;
        }
        goto LABEL_1;
      }
      if (!v71) {
        goto LABEL_123;
      }
    }
  }
  if ((const void **)a1 == a2) {
    return result;
  }
  int64_t v153 = (v12 - 2) >> 1;
  int64_t v154 = v153;
  while (2)
  {
    int64_t v156 = v154;
    if (v153 >= v154)
    {
      uint64_t v157 = (2 * v154) | 1;
      unint64_t v158 = a1 + 24 * v157;
      uint64_t v159 = 2 * v154 + 2;
      if (v159 >= (uint64_t)v12) {
        goto LABEL_337;
      }
      uint64_t v160 = (const void **)(v158 + 24);
      int v161 = *(char *)(v158 + 23);
      if (v161 >= 0) {
        long long v162 = (const void *)(a1 + 24 * v157);
      }
      else {
        long long v162 = *(const void **)v158;
      }
      if (v161 >= 0) {
        size_t v163 = *(unsigned __int8 *)(v158 + 23);
      }
      else {
        size_t v163 = *(void *)(v158 + 8);
      }
      int v164 = *(char *)(v158 + 47);
      if (v164 >= 0) {
        v165 = (const void *)(v158 + 24);
      }
      else {
        v165 = *(const void **)(v158 + 24);
      }
      if (v164 >= 0) {
        size_t v166 = *(unsigned __int8 *)(v158 + 47);
      }
      else {
        size_t v166 = *(void *)(v158 + 32);
      }
      if (v166 >= v163) {
        size_t v167 = v163;
      }
      else {
        size_t v167 = v166;
      }
      int v168 = memcmp(v162, v165, v167);
      if (v168)
      {
        a2 = v271;
        if (v168 < 0)
        {
LABEL_337:
          uint64_t v160 = (const void **)(a1 + 24 * v157);
          uint64_t v159 = (2 * v156) | 1;
        }
      }
      else
      {
        BOOL v169 = v163 >= v166;
        if (v163 == v166)
        {
          uint64_t v160 = (const void **)(a1 + 24 * v157);
          uint64_t v159 = (2 * v156) | 1;
          a2 = v271;
        }
        else
        {
          a2 = v271;
          if (!v169) {
            goto LABEL_337;
          }
        }
      }
      unint64_t v170 = a1 + 24 * v156;
      int v171 = *((char *)v160 + 23);
      if (v171 >= 0) {
        v172 = v160;
      }
      else {
        v172 = *v160;
      }
      if (v171 >= 0) {
        size_t v173 = *((unsigned __int8 *)v160 + 23);
      }
      else {
        size_t v173 = (size_t)v160[1];
      }
      int v174 = *(char *)(v170 + 23);
      if (v174 >= 0) {
        v175 = (const void *)(a1 + 24 * v156);
      }
      else {
        v175 = *(const void **)v170;
      }
      if (v174 >= 0) {
        size_t v176 = *(unsigned __int8 *)(v170 + 23);
      }
      else {
        size_t v176 = *(void *)(v170 + 8);
      }
      if (v176 >= v173) {
        size_t v177 = v173;
      }
      else {
        size_t v177 = v176;
      }
      int v178 = memcmp(v172, v175, v177);
      if (v178)
      {
        int64_t v153 = (v12 - 2) >> 1;
        if (v178 < 0)
        {
LABEL_357:
          __n128 v180 = *(__n128 *)v170;
          int64_t v274 = *(void *)(v170 + 16);
          __n128 v273 = v180;
          *(void *)(v170 + 8) = 0;
          *(void *)(v170 + 16) = 0;
          *(void *)unint64_t v170 = 0;
          long long v181 = *(_OWORD *)v160;
          *(void *)(v170 + 16) = v160[2];
          *(_OWORD *)unint64_t v170 = v181;
          *((unsigned char *)v160 + 23) = 0;
          *(unsigned char *)uint64_t v160 = 0;
          if (v153 >= v159)
          {
            unint64_t v182 = HIBYTE(v274);
            v183 = &v273;
            if (v274 < 0)
            {
              unint64_t v182 = v273.n128_u64[1];
              v183 = (__n128 *)v273.n128_u64[0];
            }
            size_t v263 = v182;
            v266 = v183;
            int64_t v269 = v156;
            while (1)
            {
              uint64_t v185 = (2 * v159) | 1;
              unint64_t v186 = a1 + 24 * v185;
              uint64_t v159 = 2 * v159 + 2;
              if (v159 >= (uint64_t)v12) {
                goto LABEL_385;
              }
              uint64_t v155 = (const void **)(v186 + 24);
              int v187 = *(char *)(v186 + 23);
              v188 = v187 >= 0 ? (const void *)(a1 + 24 * v185) : *(const void **)v186;
              unint64_t v189 = v187 >= 0 ? *(unsigned __int8 *)(v186 + 23) : *(void *)(v186 + 8);
              int v190 = *(char *)(v186 + 47);
              v191 = v190 >= 0 ? (const void *)(v186 + 24) : *(const void **)(v186 + 24);
              unint64_t v192 = v190 >= 0 ? *(unsigned __int8 *)(v186 + 47) : *(void *)(v186 + 32);
              size_t v193 = v192 >= v189 ? v189 : v192;
              int v194 = memcmp(v188, v191, v193);
              if (v194) {
                break;
              }
              BOOL v195 = v189 >= v192;
              if (v189 == v192)
              {
                uint64_t v155 = (const void **)(a1 + 24 * v185);
                uint64_t v159 = v185;
                a2 = v271;
                int64_t v153 = (v12 - 2) >> 1;
                goto LABEL_386;
              }
              a2 = v271;
              int64_t v153 = (v12 - 2) >> 1;
              if (!v195) {
                goto LABEL_385;
              }
LABEL_386:
              int v196 = *((char *)v155 + 23);
              if (v196 >= 0) {
                v197 = v155;
              }
              else {
                v197 = *v155;
              }
              if (v196 >= 0) {
                size_t v198 = *((unsigned __int8 *)v155 + 23);
              }
              else {
                size_t v198 = (size_t)v155[1];
              }
              if (v263 >= v198) {
                size_t v199 = v198;
              }
              else {
                size_t v199 = v263;
              }
              int v200 = memcmp(v197, v266, v199);
              if (v200)
              {
                int64_t v156 = v269;
                if ((v200 & 0x80000000) == 0) {
                  goto LABEL_311;
                }
              }
              else
              {
                int64_t v156 = v269;
                if (v198 > v263) {
                  goto LABEL_311;
                }
              }
              long long v184 = *(_OWORD *)v155;
              v160[2] = v155[2];
              *(_OWORD *)uint64_t v160 = v184;
              *((unsigned char *)v155 + 23) = 0;
              *(unsigned char *)uint64_t v155 = 0;
              uint64_t v160 = v155;
              if (v153 < v159) {
                goto LABEL_312;
              }
            }
            a2 = v271;
            int64_t v153 = (v12 - 2) >> 1;
            if ((v194 & 0x80000000) == 0) {
              goto LABEL_386;
            }
LABEL_385:
            uint64_t v155 = (const void **)(a1 + 24 * v185);
            uint64_t v159 = v185;
            goto LABEL_386;
          }
LABEL_311:
          uint64_t v155 = v160;
LABEL_312:
          BOOL result = v273;
          v155[2] = (const void *)v274;
          *(__n128 *)uint64_t v155 = result;
        }
      }
      else
      {
        BOOL v179 = v173 > v176;
        int64_t v153 = (v12 - 2) >> 1;
        if (!v179) {
          goto LABEL_357;
        }
      }
    }
    int64_t v154 = v156 - 1;
    if (v156) {
      continue;
    }
    break;
  }
  int64_t v201 = v11 / 0x18uLL;
  do
  {
    if (v201 < 2) {
      goto LABEL_400;
    }
    uint64_t v202 = 0;
    v270 = *(void **)a1;
    v272 = a2;
    v264 = *(const void **)(a1 + 16);
    v267 = *(const void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    unint64_t v203 = a1;
    *(void *)a1 = 0;
    do
    {
      uint64_t v205 = v203 + 24 * v202 + 24;
      uint64_t v206 = (2 * v202) | 1;
      uint64_t v202 = 2 * v202 + 2;
      if (v202 < v201)
      {
        v204 = (__n128 *)(v205 + 24);
        int v207 = *(char *)(v205 + 23);
        if (v207 >= 0) {
          v208 = (const void *)v205;
        }
        else {
          v208 = *(const void **)v205;
        }
        if (v207 >= 0) {
          size_t v209 = *(unsigned __int8 *)(v205 + 23);
        }
        else {
          size_t v209 = *(void *)(v205 + 8);
        }
        int v210 = *(char *)(v205 + 47);
        if (v210 >= 0) {
          v211 = (const void *)(v205 + 24);
        }
        else {
          v211 = *(const void **)(v205 + 24);
        }
        if (v210 >= 0) {
          size_t v212 = *(unsigned __int8 *)(v205 + 47);
        }
        else {
          size_t v212 = *(void *)(v205 + 32);
        }
        if (v212 >= v209) {
          size_t v213 = v209;
        }
        else {
          size_t v213 = v212;
        }
        int v214 = memcmp(v208, v211, v213);
        if (v214)
        {
          if ((v214 & 0x80000000) == 0) {
            goto LABEL_424;
          }
        }
        else if (v209 != v212 && v209 >= v212)
        {
LABEL_424:
          if ((*(char *)(v203 + 23) & 0x80000000) == 0) {
            goto LABEL_405;
          }
          goto LABEL_425;
        }
      }
      v204 = (__n128 *)v205;
      uint64_t v202 = v206;
      if ((*(char *)(v203 + 23) & 0x80000000) == 0) {
        goto LABEL_405;
      }
LABEL_425:
      operator delete(*(void **)v203);
LABEL_405:
      BOOL result = *v204;
      *(void *)(v203 + 16) = v204[1].n128_u64[0];
      *(__n128 *)unint64_t v203 = result;
      v204[1].n128_u8[7] = 0;
      v204->n128_u8[0] = 0;
      unint64_t v203 = (unint64_t)v204;
    }
    while (v202 <= (uint64_t)((unint64_t)(v201 - 2) >> 1));
    if (v204 == (__n128 *)(a2 - 3))
    {
      v204->n128_u64[0] = (unint64_t)v270;
      v204->n128_u64[1] = (unint64_t)v267;
      v204[1].n128_u64[0] = (unint64_t)v264;
      goto LABEL_400;
    }
    BOOL result = *(__n128 *)(a2 - 3);
    v204[1].n128_u64[0] = (unint64_t)*(a2 - 1);
    __n128 *v204 = result;
    *(a2 - 3) = v270;
    *(a2 - 2) = v267;
    *(a2 - 1) = v264;
    uint64_t v215 = (uint64_t)&v204[1].n128_i64[1] - a1;
    if (v215 >= 25)
    {
      unint64_t v216 = v215 / 0x18uLL - 2;
      unint64_t v217 = v216 >> 1;
      unint64_t v218 = a1 + 24 * (v216 >> 1);
      int v219 = *(char *)(v218 + 23);
      if (v219 >= 0) {
        v220 = (const void *)(a1 + 24 * (v216 >> 1));
      }
      else {
        v220 = *(const void **)v218;
      }
      if (v219 >= 0) {
        size_t v221 = *(unsigned __int8 *)(v218 + 23);
      }
      else {
        size_t v221 = *(void *)(v218 + 8);
      }
      int v222 = v204[1].n128_i8[7];
      if (v222 >= 0) {
        v223 = v204;
      }
      else {
        v223 = (__n128 *)v204->n128_u64[0];
      }
      if (v222 >= 0) {
        size_t v224 = v204[1].n128_u8[7];
      }
      else {
        size_t v224 = v204->n128_u64[1];
      }
      if (v224 >= v221) {
        size_t v225 = v221;
      }
      else {
        size_t v225 = v224;
      }
      int v226 = memcmp(v220, v223, v225);
      if (v226)
      {
        if (v226 < 0) {
          goto LABEL_400;
        }
      }
      else if (v221 <= v224)
      {
        goto LABEL_400;
      }
      __n128 v227 = *v204;
      int64_t v274 = v204[1].n128_i64[0];
      __n128 v273 = v227;
      v204->n128_u64[1] = 0;
      v204[1].n128_u64[0] = 0;
      v204->n128_u64[0] = 0;
      if (v274 >= 0) {
        v228 = &v273;
      }
      else {
        v228 = (__n128 *)v273.n128_u64[0];
      }
      if (v274 >= 0) {
        size_t v229 = HIBYTE(v274);
      }
      else {
        size_t v229 = v273.n128_u64[1];
      }
      __n128 v230 = *(__n128 *)v218;
      v204[1].n128_u64[0] = *(void *)(v218 + 16);
      __n128 *v204 = v230;
      *(unsigned char *)(v218 + 23) = 0;
      *(unsigned char *)unint64_t v218 = 0;
      if (v216 >= 2)
      {
        while (1)
        {
          unint64_t v232 = v217 - 1;
          unint64_t v217 = (v217 - 1) >> 1;
          unint64_t v233 = a1 + 24 * v217;
          int v234 = *(char *)(v233 + 23);
          if (v234 >= 0) {
            v235 = (const void *)(a1 + 24 * v217);
          }
          else {
            v235 = *(const void **)v233;
          }
          if (v234 >= 0) {
            size_t v236 = *(unsigned __int8 *)(v233 + 23);
          }
          else {
            size_t v236 = *(void *)(v233 + 8);
          }
          if (v229 >= v236) {
            size_t v237 = v236;
          }
          else {
            size_t v237 = v229;
          }
          int v238 = memcmp(v235, v228, v237);
          if (v238)
          {
            if (v238 < 0) {
              break;
            }
          }
          else if (v236 <= v229)
          {
            break;
          }
          long long v231 = *(_OWORD *)v233;
          *(void *)(v218 + 16) = *(void *)(v233 + 16);
          *(_OWORD *)unint64_t v218 = v231;
          *(unsigned char *)(v233 + 23) = 0;
          *(unsigned char *)unint64_t v233 = 0;
          unint64_t v218 = a1 + 24 * v217;
          if (v232 <= 1) {
            goto LABEL_472;
          }
        }
      }
      unint64_t v233 = v218;
LABEL_472:
      BOOL result = v273;
      *(void *)(v233 + 16) = v274;
      *(__n128 *)unint64_t v233 = result;
      a2 = v272;
    }
LABEL_400:
    a2 -= 3;
    BOOL v179 = (unint64_t)v201-- > 2;
  }
  while (v179);
  return result;
}

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, uint64_t a2, const void **a3)
{
  int v6 = *(char *)(a2 + 23);
  uint64_t v7 = *(const void **)a2;
  size_t v8 = *(const void **)(a2 + 8);
  if (v6 >= 0) {
    uint64_t v9 = (const void *)a2;
  }
  else {
    uint64_t v9 = *(const void **)a2;
  }
  if (v6 >= 0) {
    size_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v10 = *(void *)(a2 + 8);
  }
  int v11 = *(char *)(a1 + 23);
  unint64_t v13 = *(const void **)a1;
  unint64_t v12 = *(const void **)(a1 + 8);
  if (v11 >= 0) {
    uint64_t v14 = (const void *)a1;
  }
  else {
    uint64_t v14 = *(const void **)a1;
  }
  if (v11 >= 0) {
    size_t v15 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v15 = *(void *)(a1 + 8);
  }
  if (v15 >= v10) {
    size_t v16 = v10;
  }
  else {
    size_t v16 = v15;
  }
  int v17 = memcmp(v9, v14, v16);
  if (v17)
  {
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_18;
    }
  }
  else if (v10 > v15)
  {
LABEL_18:
    int v18 = *((char *)a3 + 23);
    if (v18 >= 0) {
      int v19 = a3;
    }
    else {
      int v19 = *a3;
    }
    if (v18 >= 0) {
      size_t v20 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v20 = (size_t)a3[1];
    }
    if (v10 >= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v10;
    }
    int v22 = memcmp(v19, v9, v21);
    if (v22)
    {
      if ((v22 & 0x80000000) == 0)
      {
LABEL_29:
        unint64_t v23 = *(const void **)(a1 + 16);
        size_t v24 = a3[2];
        __n128 result = *(__n128 *)a3;
        *(_OWORD *)a1 = *(_OWORD *)a3;
        *(void *)(a1 + 16) = v24;
        *a3 = v13;
        a3[1] = v12;
        a3[2] = v23;
        return result;
      }
    }
    else if (v20 > v10)
    {
      goto LABEL_29;
    }
    uint64_t v31 = *(void *)(a1 + 16);
    uint64_t v32 = *(void *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = v32;
    *(void *)a2 = v13;
    *(void *)(a2 + 8) = v12;
    *(void *)(a2 + 16) = v31;
    int v33 = *((char *)a3 + 23);
    if (v33 >= 0) {
      unint64_t v34 = a3;
    }
    else {
      unint64_t v34 = *a3;
    }
    if (v33 >= 0) {
      size_t v35 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v35 = (size_t)a3[1];
    }
    if (v31 >= 0) {
      int v36 = (const void *)a2;
    }
    else {
      int v36 = v13;
    }
    if (v31 >= 0) {
      size_t v37 = HIBYTE(v31);
    }
    else {
      size_t v37 = (size_t)v12;
    }
    if (v37 >= v35) {
      size_t v38 = v35;
    }
    else {
      size_t v38 = v37;
    }
    int v39 = memcmp(v34, v36, v38);
    if (v39)
    {
      if (v39 < 0) {
        return result;
      }
    }
    else if (v35 <= v37)
    {
      return result;
    }
    __n128 result = *(__n128 *)a3;
    *(void *)(a2 + 16) = a3[2];
    *(__n128 *)a2 = result;
    *a3 = v13;
    a3[1] = v12;
    a3[2] = (const void *)v31;
    return result;
  }
  int v26 = *((char *)a3 + 23);
  if (v26 >= 0) {
    uint64_t v27 = a3;
  }
  else {
    uint64_t v27 = *a3;
  }
  if (v26 >= 0) {
    size_t v28 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v28 = (size_t)a3[1];
  }
  if (v10 >= v28) {
    size_t v29 = v28;
  }
  else {
    size_t v29 = v10;
  }
  int v30 = memcmp(v27, v9, v29);
  if (v30)
  {
    if (v30 < 0) {
      return result;
    }
  }
  else if (v28 <= v10)
  {
    return result;
  }
  std::vector<std::ssub_match>::pointer v40 = *(const void **)(a2 + 16);
  long long v41 = a3[2];
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = v41;
  *a3 = v7;
  a3[1] = v8;
  a3[2] = v40;
  int v42 = *(char *)(a2 + 23);
  if (v42 >= 0) {
    unint64_t v43 = (const void *)a2;
  }
  else {
    unint64_t v43 = *(const void **)a2;
  }
  if (v42 >= 0) {
    size_t v44 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v44 = *(void *)(a2 + 8);
  }
  int v45 = *(char *)(a1 + 23);
  uint64_t v46 = *(const void **)a1;
  uint64_t v47 = *(void *)(a1 + 8);
  if (v45 >= 0) {
    unint64_t v48 = (const void *)a1;
  }
  else {
    unint64_t v48 = *(const void **)a1;
  }
  if (v45 >= 0) {
    size_t v49 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v49 = *(void *)(a1 + 8);
  }
  if (v49 >= v44) {
    size_t v50 = v44;
  }
  else {
    size_t v50 = v49;
  }
  int v51 = memcmp(v43, v48, v50);
  if (!v51)
  {
    if (v44 <= v49) {
      return result;
    }
    goto LABEL_84;
  }
  if ((v51 & 0x80000000) == 0)
  {
LABEL_84:
    uint64_t v52 = *(void *)(a1 + 16);
    uint64_t v53 = *(void *)(a2 + 16);
    __n128 result = *(__n128 *)a2;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = v53;
    *(void *)a2 = v46;
    *(void *)(a2 + 8) = v47;
    *(void *)(a2 + 16) = v52;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, const void **a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = ((uint64_t)a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      int v6 = a2 - 3;
      int v7 = *((char *)a2 - 1);
      if (v7 >= 0) {
        size_t v8 = a2 - 3;
      }
      else {
        size_t v8 = (const void **)*(a2 - 3);
      }
      if (v7 >= 0) {
        size_t v9 = *((unsigned __int8 *)a2 - 1);
      }
      else {
        size_t v9 = (size_t)*(a2 - 2);
      }
      int v10 = *(char *)(a1 + 23);
      int v11 = *(const void **)a1;
      unint64_t v12 = *(const void **)(a1 + 8);
      if (v10 >= 0) {
        unint64_t v13 = (const void *)a1;
      }
      else {
        unint64_t v13 = *(const void **)a1;
      }
      if (v10 >= 0) {
        size_t v14 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        size_t v14 = *(void *)(a1 + 8);
      }
      if (v14 >= v9) {
        size_t v15 = v9;
      }
      else {
        size_t v15 = v14;
      }
      int v16 = memcmp(v8, v13, v15);
      if (v16)
      {
        if (v16 < 0) {
          return 1;
        }
      }
      else if (v9 <= v14)
      {
        return 1;
      }
      long long v41 = *(const void **)(a1 + 16);
      uint64_t v42 = (uint64_t)*(v2 - 1);
      *(_OWORD *)a1 = *(_OWORD *)v6;
      *(void *)(a1 + 16) = v42;
      *(v2 - 3) = v11;
      *(v2 - 2) = v12;
      *(v2 - 1) = v41;
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a2 - 3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, a2 - 3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 3);
      return 1;
    default:
      int v17 = (const void **)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, (const void **)(a1 + 48));
      int v18 = (const void **)(a1 + 72);
      if ((const void **)(a1 + 72) == v2) {
        return 1;
      }
      uint64_t v19 = 0;
      int v20 = 0;
      unint64_t v43 = v2;
      break;
  }
  while (2)
  {
    int v23 = *((char *)v18 + 23);
    if (v23 >= 0) {
      size_t v24 = v18;
    }
    else {
      size_t v24 = *v18;
    }
    if (v23 >= 0) {
      size_t v25 = *((unsigned __int8 *)v18 + 23);
    }
    else {
      size_t v25 = (size_t)v18[1];
    }
    int v26 = *((char *)v17 + 23);
    if (v26 >= 0) {
      uint64_t v27 = v17;
    }
    else {
      uint64_t v27 = *v17;
    }
    if (v26 >= 0) {
      size_t v28 = *((unsigned __int8 *)v17 + 23);
    }
    else {
      size_t v28 = (size_t)v17[1];
    }
    if (v28 >= v25) {
      size_t v29 = v25;
    }
    else {
      size_t v29 = v28;
    }
    int v30 = memcmp(v24, v27, v29);
    if (v30)
    {
      if (v30 < 0) {
        goto LABEL_25;
      }
    }
    else if (v25 <= v28)
    {
      goto LABEL_25;
    }
    long long v44 = *(_OWORD *)v18;
    int v45 = v18[2];
    *(_OWORD *)int v18 = *(_OWORD *)v17;
    v18[2] = v17[2];
    *((unsigned char *)v17 + 23) = 0;
    *(unsigned char *)int v17 = 0;
    uint64_t v21 = a1;
    if (v17 == (const void **)a1) {
      goto LABEL_24;
    }
    uint64_t v31 = v19;
    while (1)
    {
      uint64_t v32 = a1 + v31;
      int v33 = (_OWORD *)(a1 + v31 + 24);
      unint64_t v34 = SHIBYTE(v45) >= 0 ? &v44 : (long long *)v44;
      unint64_t v35 = SHIBYTE(v45) >= 0 ? HIBYTE(v45) : *((void *)&v44 + 1);
      int v36 = *(char *)(v32 + 47);
      size_t v37 = v36 >= 0 ? (const void *)(a1 + v31 + 24) : *(const void **)(a1 + v31 + 24);
      unint64_t v38 = v36 >= 0 ? *(unsigned __int8 *)(v32 + 47) : *(void *)(v32 + 32);
      size_t v39 = v38 >= v35 ? v35 : v38;
      int v40 = memcmp(v34, v37, v39);
      if (!v40) {
        break;
      }
      if (v40 < 0)
      {
        uint64_t v21 = (uint64_t)v17;
        goto LABEL_23;
      }
LABEL_48:
      v17 -= 3;
      *(_OWORD *)(v32 + 48) = *v33;
      *(void *)(v32 + 64) = *(void *)(a1 + v31 + 40);
      *(unsigned char *)(v32 + 47) = 0;
      *(unsigned char *)int v33 = 0;
      v31 -= 24;
      if (v31 == -48)
      {
        uint64_t v21 = a1;
        goto LABEL_23;
      }
    }
    if (v35 > v38) {
      goto LABEL_48;
    }
    uint64_t v21 = a1 + v31 + 48;
LABEL_23:
    uint64_t v2 = v43;
LABEL_24:
    long long v22 = v44;
    *(void *)(v21 + 16) = v45;
    *(_OWORD *)uint64_t v21 = v22;
    if (++v20 == 8) {
      return v18 + 3 == v2;
    }
LABEL_25:
    int v17 = v18;
    v19 += 24;
    v18 += 3;
    if (v18 != v2) {
      continue;
    }
    return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a2, (const void **)a3);
  int v8 = *((char *)a4 + 23);
  if (v8 >= 0) {
    size_t v9 = a4;
  }
  else {
    size_t v9 = *a4;
  }
  if (v8 >= 0) {
    size_t v10 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v10 = (size_t)a4[1];
  }
  int v11 = *(char *)(a3 + 23);
  unint64_t v12 = *(const void **)a3;
  unint64_t v13 = *(const void **)(a3 + 8);
  if (v11 >= 0) {
    size_t v14 = (const void *)a3;
  }
  else {
    size_t v14 = *(const void **)a3;
  }
  if (v11 >= 0) {
    size_t v15 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v15 = *(void *)(a3 + 8);
  }
  if (v15 >= v10) {
    size_t v16 = v10;
  }
  else {
    size_t v16 = v15;
  }
  int v17 = memcmp(v9, v14, v16);
  if (v17)
  {
    if (v17 < 0) {
      return result;
    }
  }
  else if (v10 <= v15)
  {
    return result;
  }
  uint64_t v19 = *(const void **)(a3 + 16);
  int v20 = a4[2];
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(void *)(a3 + 16) = v20;
  *a4 = v12;
  a4[1] = v13;
  a4[2] = v19;
  int v21 = *(char *)(a3 + 23);
  if (v21 >= 0) {
    long long v22 = (const void *)a3;
  }
  else {
    long long v22 = *(const void **)a3;
  }
  if (v21 >= 0) {
    size_t v23 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v23 = *(void *)(a3 + 8);
  }
  int v24 = *(char *)(a2 + 23);
  size_t v25 = *(const void **)a2;
  uint64_t v26 = *(void *)(a2 + 8);
  if (v24 >= 0) {
    uint64_t v27 = (const void *)a2;
  }
  else {
    uint64_t v27 = *(const void **)a2;
  }
  if (v24 >= 0) {
    size_t v28 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v28 = *(void *)(a2 + 8);
  }
  if (v28 >= v23) {
    size_t v29 = v23;
  }
  else {
    size_t v29 = v28;
  }
  int v30 = memcmp(v22, v27, v29);
  if (v30)
  {
    if (v30 < 0) {
      return result;
    }
  }
  else if (v23 <= v28)
  {
    return result;
  }
  uint64_t v31 = *(void *)(a2 + 16);
  uint64_t v32 = *(void *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = v32;
  *(void *)a3 = v25;
  *(void *)(a3 + 8) = v26;
  *(void *)(a3 + 16) = v31;
  int v33 = *(char *)(a2 + 23);
  if (v33 >= 0) {
    unint64_t v34 = (const void *)a2;
  }
  else {
    unint64_t v34 = *(const void **)a2;
  }
  if (v33 >= 0) {
    size_t v35 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v35 = *(void *)(a2 + 8);
  }
  int v36 = *(char *)(a1 + 23);
  size_t v37 = *(const void **)a1;
  uint64_t v38 = *(void *)(a1 + 8);
  if (v36 >= 0) {
    size_t v39 = (const void *)a1;
  }
  else {
    size_t v39 = *(const void **)a1;
  }
  if (v36 >= 0) {
    size_t v40 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v40 = *(void *)(a1 + 8);
  }
  if (v40 >= v35) {
    size_t v41 = v35;
  }
  else {
    size_t v41 = v40;
  }
  int v42 = memcmp(v34, v39, v41);
  if (!v42)
  {
    if (v35 <= v40) {
      return result;
    }
LABEL_58:
    uint64_t v43 = *(void *)(a1 + 16);
    uint64_t v44 = *(void *)(a2 + 16);
    __n128 result = *(__n128 *)a2;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = v44;
    *(void *)a2 = v37;
    *(void *)(a2 + 8) = v38;
    *(void *)(a2 + 16) = v43;
    return result;
  }
  if ((v42 & 0x80000000) == 0) {
    goto LABEL_58;
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void **a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a2, a3, (const void **)a4);
  int v10 = *((char *)a5 + 23);
  if (v10 >= 0) {
    int v11 = a5;
  }
  else {
    int v11 = *a5;
  }
  if (v10 >= 0) {
    size_t v12 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v12 = (size_t)a5[1];
  }
  int v13 = *(char *)(a4 + 23);
  size_t v14 = *(const void **)a4;
  size_t v15 = *(const void **)(a4 + 8);
  if (v13 >= 0) {
    size_t v16 = (const void *)a4;
  }
  else {
    size_t v16 = *(const void **)a4;
  }
  if (v13 >= 0) {
    size_t v17 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    size_t v17 = *(void *)(a4 + 8);
  }
  if (v17 >= v12) {
    size_t v18 = v12;
  }
  else {
    size_t v18 = v17;
  }
  int v19 = memcmp(v11, v16, v18);
  if (v19)
  {
    if (v19 < 0) {
      return result;
    }
  }
  else if (v12 <= v17)
  {
    return result;
  }
  int v21 = *(const void **)(a4 + 16);
  long long v22 = a5[2];
  *(_OWORD *)a4 = *(_OWORD *)a5;
  *(void *)(a4 + 16) = v22;
  *a5 = v14;
  a5[1] = v15;
  a5[2] = v21;
  int v23 = *(char *)(a4 + 23);
  if (v23 >= 0) {
    int v24 = (const void *)a4;
  }
  else {
    int v24 = *(const void **)a4;
  }
  if (v23 >= 0) {
    size_t v25 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    size_t v25 = *(void *)(a4 + 8);
  }
  int v26 = *(char *)(a3 + 23);
  uint64_t v27 = *(const void **)a3;
  uint64_t v28 = *(void *)(a3 + 8);
  if (v26 >= 0) {
    size_t v29 = (const void *)a3;
  }
  else {
    size_t v29 = *(const void **)a3;
  }
  if (v26 >= 0) {
    size_t v30 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v30 = *(void *)(a3 + 8);
  }
  if (v30 >= v25) {
    size_t v31 = v25;
  }
  else {
    size_t v31 = v30;
  }
  int v32 = memcmp(v24, v29, v31);
  if (v32)
  {
    if (v32 < 0) {
      return result;
    }
  }
  else if (v25 <= v30)
  {
    return result;
  }
  uint64_t v33 = *(void *)(a3 + 16);
  uint64_t v34 = *(void *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(void *)(a3 + 16) = v34;
  *(void *)a4 = v27;
  *(void *)(a4 + 8) = v28;
  *(void *)(a4 + 16) = v33;
  int v35 = *(char *)(a3 + 23);
  if (v35 >= 0) {
    int v36 = (const void *)a3;
  }
  else {
    int v36 = *(const void **)a3;
  }
  if (v35 >= 0) {
    size_t v37 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v37 = *(void *)(a3 + 8);
  }
  int v38 = *(char *)(a2 + 23);
  size_t v39 = *(const void **)a2;
  uint64_t v40 = *(void *)(a2 + 8);
  if (v38 >= 0) {
    size_t v41 = (const void *)a2;
  }
  else {
    size_t v41 = *(const void **)a2;
  }
  if (v38 >= 0) {
    size_t v42 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v42 = *(void *)(a2 + 8);
  }
  if (v42 >= v37) {
    size_t v43 = v37;
  }
  else {
    size_t v43 = v42;
  }
  int v44 = memcmp(v36, v41, v43);
  if (v44)
  {
    if (v44 < 0) {
      return result;
    }
  }
  else if (v37 <= v42)
  {
    return result;
  }
  uint64_t v45 = *(void *)(a2 + 16);
  uint64_t v46 = *(void *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = v46;
  *(void *)a3 = v39;
  *(void *)(a3 + 8) = v40;
  *(void *)(a3 + 16) = v45;
  int v47 = *(char *)(a2 + 23);
  if (v47 >= 0) {
    unint64_t v48 = (const void *)a2;
  }
  else {
    unint64_t v48 = *(const void **)a2;
  }
  if (v47 >= 0) {
    size_t v49 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v49 = *(void *)(a2 + 8);
  }
  int v50 = *(char *)(a1 + 23);
  int v51 = *(const void **)a1;
  uint64_t v52 = *(void *)(a1 + 8);
  if (v50 >= 0) {
    uint64_t v53 = (const void *)a1;
  }
  else {
    uint64_t v53 = *(const void **)a1;
  }
  if (v50 >= 0) {
    size_t v54 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v54 = *(void *)(a1 + 8);
  }
  if (v54 >= v49) {
    size_t v55 = v49;
  }
  else {
    size_t v55 = v54;
  }
  int v56 = memcmp(v48, v53, v55);
  if (v56)
  {
    if (v56 < 0) {
      return result;
    }
  }
  else if (v49 <= v54)
  {
    return result;
  }
  uint64_t v57 = *(void *)(a1 + 16);
  uint64_t v58 = *(void *)(a2 + 16);
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v58;
  *(void *)a2 = v51;
  *(void *)(a2 + 8) = v52;
  *(void *)(a2 + 16) = v57;
  return result;
}

char *std::vector<std::string>::__push_back_slow_path<std::string>(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int v7 = (char *)operator new(24 * v6);
  }
  else
  {
    int v7 = 0;
  }
  int v8 = &v7[24 * v3];
  size_t v9 = &v7[24 * v6];
  *(_OWORD *)int v8 = *(_OWORD *)a2;
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  int v10 = v8 + 24;
  int v11 = (void **)*a1;
  size_t v12 = (void **)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      long long v13 = *(_OWORD *)(v12 - 3);
      *((void *)v8 - 1) = *(v12 - 1);
      *(_OWORD *)(v8 - 24) = v13;
      v8 -= 24;
      *(v12 - 2) = 0;
      *(v12 - 1) = 0;
      *(v12 - 3) = 0;
      v12 -= 3;
    }
    while (v12 != v11);
    size_t v12 = (void **)*a1;
    size_t v14 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v14 != v12)
    {
      if (*((char *)v14 - 1) < 0) {
        operator delete(*(v14 - 3));
      }
      v14 -= 3;
    }
  }
  if (v12) {
    operator delete(v12);
  }
  return v10;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](uint64_t a1, char *a2, int a3)
{
  unint64_t v6 = (const std::locale *)MEMORY[0x1C87950F0]();
  *(void *)(a1 + 8) = std::locale::use_facet(v6, MEMORY[0x1E4FBA258]);
  *(void *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x1E4FBA280]);
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  size_t v7 = strlen(a2);
  if (std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(a1, a2, &a2[v7]) != &a2[v7]) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  }
  return a1;
}

void sub_1C5AD66B8(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_1C5AD66D4(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(uint64_t a1, char *a2, char *a3)
{
  unint64_t v6 = operator new(8uLL);
  void *v6 = &unk_1F2104D50;
  size_t v7 = operator new(0x10uLL);
  v7[1] = v6;
  int v8 = operator new(0x20uLL);
  *int v8 = &unk_1F2104DA8;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  size_t v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    uint64_t v10 = *(void *)(a1 + 40);
    *(void *)(a1 + 56) = v10;
    unsigned int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v11 <= 0x3F) {
      goto LABEL_4;
    }
LABEL_9:
    if (v11 != 64)
    {
      if (v11 == 128)
      {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(a1, a2, a3);
      }
      if (v11 == 256)
      {
        return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
      }
LABEL_31:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
    }
LABEL_15:
    return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
  }
  uint64_t v10 = *(void *)(a1 + 40);
  *(void *)(a1 + 56) = v10;
  unsigned int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v11 > 0x3F) {
    goto LABEL_9;
  }
LABEL_4:
  if (v11)
  {
    if (v11 == 16)
    {
      return std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, a2, a3);
    }
    if (v11 != 32) {
      goto LABEL_31;
    }
    goto LABEL_15;
  }
  long long v13 = a2;
  while (1)
  {
    size_t v14 = (std::basic_regex<char> *)v13;
    long long v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, v13, a3);
    if (v13 == (char *)v14) {
      break;
    }
LABEL_19:
    if (v13 == (char *)v14) {
      goto LABEL_29;
    }
  }
  size_t v15 = *(std::__owns_one_state<char> **)(a1 + 56);
  int v16 = *(_DWORD *)(a1 + 28);
  size_t v17 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>((std::basic_regex<char> *)a1, v14, (std::basic_regex<char> *)a3);
  if (v17 != (unsigned __int8 *)v14)
  {
    long long v13 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, (std::basic_regex<char> *)v17, (std::basic_regex<char> *)a3, v15, (v16 + 1), (*(_DWORD *)(a1 + 28) + 1));
    goto LABEL_19;
  }
LABEL_29:
  if (v14 == (std::basic_regex<char> *)a2)
  {
    size_t v18 = operator new(0x10uLL);
    uint64_t v19 = *(void *)(a1 + 56);
    uint64_t v20 = *(void *)(v19 + 8);
    v18[1] = v20;
    *(void *)(v19 + 8) = v18;
    uint64_t v21 = *(void *)(*(void *)(a1 + 56) + 8);
    goto LABEL_32;
  }
LABEL_33:
  if (v14 != (std::basic_regex<char> *)a3)
  {
    if (LOBYTE(v14->__traits_.__loc_.__locale_) == 124)
    {
      uint64_t v22 = *(void *)(a1 + 56);
      int v23 = (std::basic_regex<char> *)((char *)&v14->__traits_.__loc_.__locale_ + 1);
      int v24 = (char *)&v14->__traits_.__loc_.__locale_ + 1;
      while (1)
      {
        size_t v14 = (std::basic_regex<char> *)v24;
        int v24 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, v24, a3);
        if (v24 == (char *)v14)
        {
          size_t v25 = *(std::__owns_one_state<char> **)(a1 + 56);
          int v26 = *(_DWORD *)(a1 + 28);
          uint64_t v27 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>((std::basic_regex<char> *)a1, v14, (std::basic_regex<char> *)a3);
          if (v27 == (unsigned __int8 *)v14)
          {
LABEL_40:
            if (v14 == v23)
            {
              uint64_t v28 = operator new(0x10uLL);
              uint64_t v29 = *(void *)(a1 + 56);
              uint64_t v30 = *(void *)(v29 + 8);
              v28[1] = v30;
              *(void *)(v29 + 8) = v28;
              *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
            }
            size_t v31 = operator new(0x18uLL);
            uint64_t v32 = *(void *)(v22 + 8);
            v31[1] = *(void *)(v10 + 8);
            v31[2] = v32;
            *size_t v31 = &unk_1F2105368;
            *(void *)(v10 + 8) = v31;
            *(void *)(v22 + 8) = 0;
            uint64_t v33 = operator new(0x10uLL);
            uint64_t v34 = *(void *)(*(void *)(a1 + 56) + 8);
            v33[1] = v34;
            *(void *)(v22 + 8) = v33;
            *(void *)(*(void *)(a1 + 56) + 8) = 0;
            int v35 = operator new(0x10uLL);
            uint64_t v36 = *(void *)(v22 + 8);
            *int v35 = &unk_1F21053B0;
            v35[1] = v36;
            *(void *)(*(void *)(a1 + 56) + 8) = v35;
            uint64_t v21 = *(void *)(v22 + 8);
LABEL_32:
            *(void *)(a1 + 56) = v21;
            goto LABEL_33;
          }
          int v24 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, (std::basic_regex<char> *)v27, (std::basic_regex<char> *)a3, v25, (v26 + 1), (*(_DWORD *)(a1 + 28) + 1));
        }
        if (v24 == (char *)v14) {
          goto LABEL_40;
        }
      }
    }
    return (char *)v14;
  }
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::vector<std::ssub_match>::pointer end = a1->__end_;
  size_t v7 = a2;
  do
  {
    int v8 = (std::basic_regex<char> *)v7;
    size_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>((uint64_t)a1, v7, a3);
    if (v7 != (char *)v8) {
      continue;
    }
    size_t v9 = a1->__end_;
    unsigned int marked_count = a1->__marked_count_;
    unsigned int v11 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, v8);
    if (v11 == v8) {
      break;
    }
    size_t v7 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v11, (std::basic_regex<char> *)a3, v9, marked_count + 1, a1->__marked_count_ + 1);
  }
  while (v7 != (char *)v8);
  if (v8 == (std::basic_regex<char> *)a2)
  {
    size_t v12 = (std::__node<char> *)operator new(0x10uLL);
    long long v13 = a1->__end_;
    first = v13->__first_;
    v12[1].__vftable = (std::__node<char>_vtbl *)first;
    v13->__first_ = v12;
    size_t v15 = (std::__owns_one_state<char> *)a1->__end_->__first_;
    goto LABEL_8;
  }
LABEL_9:
  if (v8 != (std::basic_regex<char> *)a3)
  {
    if (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
    {
      int v16 = a1->__end_;
      size_t v17 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
      size_t v18 = (char *)&v8->__traits_.__loc_.__locale_ + 1;
      while (1)
      {
        int v8 = (std::basic_regex<char> *)v18;
        size_t v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>((uint64_t)a1, v18, a3);
        if (v18 == (char *)v8)
        {
          uint64_t v19 = a1->__end_;
          unsigned int v20 = a1->__marked_count_;
          uint64_t v21 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, v8);
          if (v21 == v8)
          {
LABEL_16:
            if (v8 == v17)
            {
              uint64_t v22 = (std::__node<char> *)operator new(0x10uLL);
              int v23 = a1->__end_;
              int v24 = v23->__first_;
              v22[1].__vftable = (std::__node<char>_vtbl *)v24;
              v23->__first_ = v22;
              a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
            }
            size_t v25 = (std::__node<char> *)operator new(0x18uLL);
            int v26 = v16->__first_;
            v25[1].__vftable = (std::__node<char>_vtbl *)end->__first_;
            v25[2].__vftable = (std::__node<char>_vtbl *)v26;
            v25->__vftable = (std::__node<char>_vtbl *)&unk_1F2105368;
            end->__first_ = v25;
            v16->__first_ = 0;
            uint64_t v27 = (std::__node<char> *)operator new(0x10uLL);
            uint64_t v28 = a1->__end_->__first_;
            v27[1].__vftable = (std::__node<char>_vtbl *)v28;
            v16->__first_ = v27;
            a1->__end_->__first_ = 0;
            uint64_t v29 = (std::__node<char> *)operator new(0x10uLL);
            uint64_t v30 = v16->__first_;
            v29->__vftable = (std::__node<char>_vtbl *)&unk_1F21053B0;
            v29[1].__vftable = (std::__node<char>_vtbl *)v30;
            a1->__end_->__first_ = v29;
            size_t v15 = (std::__owns_one_state<char> *)v16->__first_;
LABEL_8:
            a1->__end_ = v15;
            goto LABEL_9;
          }
          size_t v18 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v21, (std::basic_regex<char> *)a3, v19, v20 + 1, a1->__marked_count_ + 1);
        }
        if (v18 == (char *)v8) {
          goto LABEL_16;
        }
      }
    }
    return (char *)v8;
  }
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(uint64_t a1, char *a2, char *a3)
{
  unint64_t v3 = (std::basic_regex<char> *)a2;
  if (a2 == a3) {
    return a2;
  }
  if (*a2 == 94)
  {
    unint64_t v6 = operator new(0x18uLL);
    BOOL v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void *)(v8 + 8);
    void *v6 = &unk_1F2104EA0;
    v6[1] = v9;
    *((unsigned char *)v6 + 16) = v7;
    *(void *)(v8 + 8) = v6;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    unint64_t v3 = (std::basic_regex<char> *)((char *)v3 + 1);
  }
  if (v3 != (std::basic_regex<char> *)a3)
  {
    while (v3 != (std::basic_regex<char> *)a3)
    {
      uint64_t v10 = v3;
      unsigned int v11 = *(std::__owns_one_state<char> **)(a1 + 56);
      int v12 = *(_DWORD *)(a1 + 28);
      long long v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, (uint64_t)v10, a3);
      if (v13 != (char *)v10)
      {
        unint64_t v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, v11, (v12 + 1), (*(_DWORD *)(a1 + 28) + 1));
        if (v3 != v10) {
          continue;
        }
      }
      if ((char *)&v10->__traits_.__loc_.__locale_ + 1 != a3 || LOBYTE(v10->__traits_.__loc_.__locale_) != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      size_t v14 = operator new(0x18uLL);
      BOOL v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      uint64_t v16 = *(void *)(a1 + 56);
      uint64_t v17 = *(void *)(v16 + 8);
      *size_t v14 = &unk_1F2104EE8;
      v14[1] = v17;
      *((unsigned char *)v14 + 16) = v15;
      *(void *)(v16 + 8) = v14;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      return a3;
    }
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v7 == a2) {
    goto LABEL_12;
  }
  do
  {
    uint64_t v8 = v7;
    BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2) {
LABEL_12:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  if (v8 == a3) {
    return a3;
  }
  while (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
  {
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v10 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    unsigned int v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1), a3);
    if (v11 == (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1)) {
      goto LABEL_12;
    }
    do
    {
      uint64_t v8 = v11;
      unsigned int v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, v11, a3);
    }
    while (v11 != v8);
    if (v8 == v10) {
      goto LABEL_12;
    }
    int v12 = operator new(0x18uLL);
    uint64_t v13 = *(void *)(v9 + 8);
    v12[1] = *(void *)(v6 + 8);
    v12[2] = v13;
    void *v12 = &unk_1F2105368;
    *(void *)(v6 + 8) = v12;
    *(void *)(v9 + 8) = 0;
    size_t v14 = operator new(0x10uLL);
    uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8);
    v14[1] = v15;
    *(void *)(v9 + 8) = v14;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    uint64_t v16 = operator new(0x10uLL);
    uint64_t v17 = *(void *)(v9 + 8);
    void *v16 = &unk_1F21053B0;
    v16[1] = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = v16;
    *(void *)(a1 + 56) = *(void *)(v9 + 8);
    if (v8 == a3) {
      return a3;
    }
  }
  return v8;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = (char *)memchr(__s, 10, a3 - __s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s)
  {
    uint64_t v10 = operator new(0x10uLL);
    uint64_t v11 = *(void *)(v6 + 8);
    v10[1] = v11;
    *(void *)(v6 + 8) = v10;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    if (v8 == a3) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = v8 + 1;
    }
    if (v9 == a3) {
      return a3;
    }
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, __s, v8);
    if (v8 == a3) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = v8 + 1;
    }
    if (v9 == a3) {
      return a3;
    }
  }
  uint64_t v12 = *(void *)(a1 + 56);
  do
  {
    uint64_t v21 = (char *)memchr(v9, 10, a3 - v9);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = a3;
    }
    if (v22 == v9)
    {
      uint64_t v13 = operator new(0x10uLL);
      uint64_t v14 = *(void *)(v12 + 8);
      v13[1] = v14;
      *(void *)(v12 + 8) = v13;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, v9, v22);
    }
    uint64_t v15 = operator new(0x18uLL);
    uint64_t v16 = *(void *)(v12 + 8);
    v15[1] = *(void *)(v6 + 8);
    v15[2] = v16;
    void *v15 = &unk_1F2105368;
    *(void *)(v6 + 8) = v15;
    *(void *)(v12 + 8) = 0;
    uint64_t v17 = operator new(0x10uLL);
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
    v17[1] = v18;
    *(void *)(v12 + 8) = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    uint64_t v19 = operator new(0x10uLL);
    uint64_t v20 = *(void *)(v12 + 8);
    *uint64_t v19 = &unk_1F21053B0;
    v19[1] = v20;
    *(void *)(*(void *)(a1 + 56) + 8) = v19;
    uint64_t v12 = *(void *)(v12 + 8);
    *(void *)(a1 + 56) = v12;
    if (v22 == a3) {
      uint64_t v9 = v22;
    }
    else {
      uint64_t v9 = v22 + 1;
    }
  }
  while (v9 != a3);
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(uint64_t a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s)
  {
    uint64_t v10 = operator new(0x10uLL);
    uint64_t v11 = *(void *)(v6 + 8);
    v10[1] = v11;
    *(void *)(v6 + 8) = v10;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    if (v8 == a3) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    }
    if (v9 == a3) {
      return a3;
    }
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, __s, v8);
    if (v8 == a3) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    }
    if (v9 == a3) {
      return a3;
    }
  }
  uint64_t v12 = *(void *)(a1 + 56);
  do
  {
    uint64_t v21 = (std::basic_regex<char> *)memchr(v9, 10, (char *)a3 - (char *)v9);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = a3;
    }
    if (v22 == v9)
    {
      uint64_t v13 = operator new(0x10uLL);
      uint64_t v14 = *(void *)(v12 + 8);
      v13[1] = v14;
      *(void *)(v12 + 8) = v13;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, v9, v22);
    }
    uint64_t v15 = operator new(0x18uLL);
    uint64_t v16 = *(void *)(v12 + 8);
    v15[1] = *(void *)(v6 + 8);
    v15[2] = v16;
    void *v15 = &unk_1F2105368;
    *(void *)(v6 + 8) = v15;
    *(void *)(v12 + 8) = 0;
    uint64_t v17 = operator new(0x10uLL);
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
    v17[1] = v18;
    *(void *)(v12 + 8) = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    uint64_t v19 = operator new(0x10uLL);
    uint64_t v20 = *(void *)(v12 + 8);
    *uint64_t v19 = &unk_1F21053B0;
    v19[1] = v20;
    *(void *)(*(void *)(a1 + 56) + 8) = v19;
    uint64_t v12 = *(void *)(v12 + 8);
    *(void *)(a1 + 56) = v12;
    if (v22 == a3) {
      uint64_t v9 = v22;
    }
    else {
      uint64_t v9 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
    }
  }
  while (v9 != a3);
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(uint64_t a1, char *a2, char *a3)
{
  if (a2 == a3) {
    return a2;
  }
  int v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        int v14 = a2[1];
        if (v14 == 66)
        {
          uint64_t v15 = (char *)operator new(0x30uLL);
          uint64_t v23 = *(void *)(*(void *)(a1 + 56) + 8);
          *(void *)uint64_t v15 = &unk_1F2104F30;
          *((void *)v15 + 1) = v23;
          std::locale::locale((std::locale *)v15 + 2, (const std::locale *)a1);
          *(_OWORD *)(v15 + 24) = *(_OWORD *)(a1 + 8);
          v15[40] = 1;
        }
        else
        {
          if (v14 != 98) {
            return a2;
          }
          uint64_t v15 = (char *)operator new(0x30uLL);
          uint64_t v16 = *(void *)(*(void *)(a1 + 56) + 8);
          *(void *)uint64_t v15 = &unk_1F2104F30;
          *((void *)v15 + 1) = v16;
          std::locale::locale((std::locale *)v15 + 2, (const std::locale *)a1);
          *(_OWORD *)(v15 + 24) = *(_OWORD *)(a1 + 8);
          v15[40] = 0;
        }
        *(void *)(*(void *)(a1 + 56) + 8) = v15;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
        return a2 + 2;
      }
      return a2;
    }
    if (v6 != 94) {
      return a2;
    }
    uint64_t v10 = operator new(0x18uLL);
    BOOL v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v12 = *(void *)(a1 + 56);
    v10[1] = *(void *)(v12 + 8);
    uint64_t v13 = &unk_1F2104EA0;
LABEL_14:
    void *v10 = v13;
    *((unsigned char *)v10 + 16) = v11;
    *(void *)(v12 + 8) = v10;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    return a2 + 1;
  }
  if (v6 == 36)
  {
    uint64_t v10 = operator new(0x18uLL);
    BOOL v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v12 = *(void *)(a1 + 56);
    v10[1] = *(void *)(v12 + 8);
    uint64_t v13 = &unk_1F2104EE8;
    goto LABEL_14;
  }
  BOOL v8 = v6 == 40;
  BOOL v7 = a2 + 1;
  BOOL v8 = !v8 || v7 == a3;
  if (v8) {
    return a2;
  }
  BOOL v8 = *v7 == 63;
  uint64_t v17 = a2 + 2;
  if (!v8 || v17 == a3) {
    return a2;
  }
  int v19 = *v17;
  if (v19 == 33)
  {
    *(void *)&long long v24 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v26.__loop_count_ = v24;
    *(_OWORD *)&v26.__start_.__cntrl_ = v24;
    *(_OWORD *)&v26.__traits_.__loc_.__locale_ = v24;
    *(_OWORD *)&v26.__traits_.__col_ = v24;
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v26);
    v26.__flags_ = *(_DWORD *)(a1 + 24);
    uint64_t v21 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v26, a2 + 3, a3);
    unsigned int marked_count = v26.__marked_count_;
    std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v26, 1, *(_DWORD *)(a1 + 28));
    *(_DWORD *)(a1 + 28) += marked_count;
    if (v21 == a3 || *v21 != 41) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    goto LABEL_32;
  }
  if (v19 != 61) {
    return a2;
  }
  *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v26.__loop_count_ = v20;
  *(_OWORD *)&v26.__start_.__cntrl_ = v20;
  *(_OWORD *)&v26.__traits_.__loc_.__locale_ = v20;
  *(_OWORD *)&v26.__traits_.__col_ = v20;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v26);
  v26.__flags_ = *(_DWORD *)(a1 + 24);
  uint64_t v21 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v26, a2 + 3, a3);
  unsigned int v22 = v26.__marked_count_;
  std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v26, 0, *(_DWORD *)(a1 + 28));
  *(_DWORD *)(a1 + 28) += v22;
  if (v21 == a3 || *v21 != 41) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
  }
LABEL_32:
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v26.__traits_.__loc_);
  return v21 + 1;
}

void sub_1C5AD7868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_1C5AD787C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_1C5AD7890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_1C5AD78A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(std::basic_regex<char> *this, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  unint64_t v3 = a2;
  if (a2 != a3)
  {
    switch(LOBYTE(a2->__traits_.__loc_.__locale_))
    {
      case '(':
        if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1) == a3) {
          goto LABEL_32;
        }
        if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 2) != a3
          && BYTE1(a2->__traits_.__loc_.__locale_) == 63
          && BYTE2(a2->__traits_.__loc_.__locale_) == 58)
        {
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, (char *)&a2->__traits_.__loc_.__locale_ + 3, (char *)a3);
          if (v7 == (char *)a3) {
            goto LABEL_32;
          }
          unint64_t v3 = (std::basic_regex<char> *)v7;
          if (*v7 != 41) {
            goto LABEL_32;
          }
        }
        else
        {
          if ((this->__flags_ & 2) != 0)
          {
            unsigned int marked_count = this->__marked_count_;
          }
          else
          {
            uint64_t v12 = (std::__node<char> *)operator new(0x18uLL);
            unsigned int marked_count = this->__marked_count_ + 1;
            this->__marked_count_ = marked_count;
            std::vector<std::ssub_match>::pointer end = this->__end_;
            first = end->__first_;
            v12->__vftable = (std::__node<char>_vtbl *)&unk_1F2105200;
            v12[1].__vftable = (std::__node<char>_vtbl *)first;
            LODWORD(v12[2].__vftable) = marked_count;
            end->__first_ = v12;
            this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
          }
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          uint64_t v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, (char *)&v3->__traits_.__loc_.__locale_ + 1, (char *)a3);
          if (v16 == (char *)a3 || (unint64_t v3 = (std::basic_regex<char> *)v16, *v16 != 41)) {
LABEL_32:
          }
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
          if ((this->__flags_ & 2) == 0)
          {
            uint64_t v17 = (std::__node<char> *)operator new(0x18uLL);
            uint64_t v18 = this->__end_;
            int v19 = v18->__first_;
            v17->__vftable = (std::__node<char>_vtbl *)&unk_1F2105248;
            v17[1].__vftable = (std::__node<char>_vtbl *)v19;
            LODWORD(v17[2].__vftable) = marked_count;
            v18->__first_ = v17;
            this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
          }
        }
        --*p_open_count;
LABEL_29:
        unint64_t v3 = (std::basic_regex<char> *)((char *)v3 + 1);
        break;
      case ')':
      case ',':
      case '-':
      case '/':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case ';':
      case '<':
      case '=':
      case '>':
      case '@':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
        goto LABEL_20;
      case '*':
      case '+':
      case '?':
        goto LABEL_31;
      case '.':
        BOOL v8 = (std::__node<char> *)operator new(0x10uLL);
        uint64_t v9 = this->__end_;
        uint64_t v10 = v9->__first_;
        v8->__vftable = (std::__node<char>_vtbl *)&unk_1F2104FC0;
        v8[1].__vftable = (std::__node<char>_vtbl *)v10;
        v9->__first_ = v8;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
        goto LABEL_29;
      case '[':
        return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, (char *)a2, (char *)a3);
      case '\\':
        return std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(this, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
      default:
        if (LOBYTE(a2->__traits_.__loc_.__locale_) == 123) {
LABEL_31:
        }
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
LABEL_20:
        return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
    }
  }
  return (unsigned __int8 *)v3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  if (this == a3) {
    return this;
  }
  int v6 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low <= 62)
  {
    if (locale_low == 42)
    {
      BOOL v8 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (v6) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v8 == a3;
      }
      if (!v20 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        uint64_t v9 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
        __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
        size_t v10 = 0;
        goto LABEL_35;
      }
      __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
      __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
      size_t v24 = 0;
      goto LABEL_44;
    }
    if (locale_low == 43)
    {
      BOOL v8 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (!v6 && v8 != a3 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        uint64_t v9 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
        __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
        size_t v10 = 1;
LABEL_35:
        std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v10, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 0);
        return (std::basic_regex<char> *)v9;
      }
      __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
      __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
      size_t v24 = 1;
      goto LABEL_44;
    }
    return this;
  }
  if (locale_low == 63)
  {
    uint64_t v21 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    if (v6) {
      BOOL v22 = 1;
    }
    else {
      BOOL v22 = v21 == a3;
    }
    if (v22 || LOBYTE(v21->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 1);
      return v21;
    }
    else
    {
      uint64_t v23 = (char *)&this->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v23;
    }
  }
  else
  {
    if (locale_low != 123) {
      return this;
    }
    BOOL v11 = (char *)&this->__traits_.__loc_.__locale_ + 1;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3) {
      goto LABEL_71;
    }
    int v12 = *v11;
    if ((v12 & 0xF8) != 0x30 && (v12 & 0xFE) != 0x38) {
      goto LABEL_71;
    }
    int v13 = v12 - 48;
    int v14 = (char *)&this->__traits_.__loc_.__locale_ + 2;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_19:
      int v14 = (char *)a3;
    }
    else
    {
      while (1)
      {
        int v15 = *v14;
        if ((v15 & 0xF8) != 0x30 && (v15 & 0xFE) != 0x38) {
          break;
        }
        if (v13 >= 214748364) {
          goto LABEL_71;
        }
        int v13 = v15 + 10 * v13 - 48;
        if (++v14 == (char *)a3) {
          goto LABEL_19;
        }
      }
    }
    if (v14 == v11) {
      goto LABEL_71;
    }
    if (v14 == (char *)a3) {
      goto LABEL_72;
    }
    int v16 = *v14;
    if (v16 != 44)
    {
      if (v16 == 125)
      {
        uint64_t v17 = (std::basic_regex<char> *)(v14 + 1);
        if (v6 || v17 == a3 || LOBYTE(v17->__traits_.__loc_.__locale_) != 63)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v13, a4, __mexp_begin, __mexp_end, 1);
          return v17;
        }
        else
        {
          uint64_t v18 = (unsigned __int8 *)(v14 + 2);
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v13, a4, __mexp_begin, __mexp_end, 0);
          return (std::basic_regex<char> *)v18;
        }
      }
LABEL_71:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
    }
    size_t v25 = (std::basic_regex<char> *)(v14 + 1);
    if (v14 + 1 == (char *)a3) {
      goto LABEL_71;
    }
    int v26 = LOBYTE(v25->__traits_.__loc_.__locale_);
    if (v26 == 125)
    {
      BOOL v8 = (std::basic_regex<char> *)(v14 + 2);
      if (!v6 && v8 != a3 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        size_t v10 = v13;
        uint64_t v9 = v14 + 3;
        __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
        __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
        goto LABEL_35;
      }
      size_t v24 = v13;
      __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
      __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
LABEL_44:
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v24, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
      return v8;
    }
    if ((v26 & 0xF8) != 0x30 && (v26 & 0xFE) != 0x38) {
      goto LABEL_72;
    }
    int v27 = v26 - 48;
    uint64_t v28 = (std::basic_regex<char> *)(v14 + 2);
    if (v28 == a3)
    {
LABEL_60:
      uint64_t v28 = a3;
    }
    else
    {
      while (1)
      {
        int v29 = LOBYTE(v28->__traits_.__loc_.__locale_);
        if ((v29 & 0xF8) != 0x30 && (v29 & 0xFE) != 0x38) {
          break;
        }
        if (v27 >= 214748364) {
          goto LABEL_71;
        }
        int v27 = v29 + 10 * v27 - 48;
        uint64_t v28 = (std::basic_regex<char> *)((char *)v28 + 1);
        if (v28 == a3) {
          goto LABEL_60;
        }
      }
    }
    if (v28 == v25 || v28 == a3 || LOBYTE(v28->__traits_.__loc_.__locale_) != 125) {
LABEL_72:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    if (v27 < v13) {
      goto LABEL_71;
    }
    uint64_t v30 = (std::basic_regex<char> *)((char *)&v28->__traits_.__loc_.__locale_ + 1);
    if (v6 || v30 == a3 || LOBYTE(v30->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v27, a4, __mexp_begin, __mexp_end, 1);
      return v30;
    }
    else
    {
      size_t v31 = (char *)&v28->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v27, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v31;
    }
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3 || *a2 != 92) {
    return a2;
  }
  BOOL v5 = a2 + 1;
  if (a2 + 1 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int v7 = *v5;
  unsigned int v8 = v7 - 48;
  if (v7 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v8);
    return a2 + 2;
  }
  if ((v7 - 49) > 8) {
    goto LABEL_18;
  }
  size_t v10 = a2 + 2;
  if (a2 + 2 == a3)
  {
    size_t v10 = a3;
  }
  else
  {
    while (1)
    {
      int v11 = *v10;
      if ((v11 - 48) > 9) {
        break;
      }
      if (v8 >= 0x19999999) {
        goto LABEL_23;
      }
      ++v10;
      unsigned int v8 = v11 + 10 * v8 - 48;
      if (v10 == a3)
      {
        size_t v10 = a3;
        break;
      }
    }
    if (!v8) {
LABEL_23:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  if (v8 > this->__marked_count_) {
    goto LABEL_23;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v8);
  if (v10 == v5)
  {
LABEL_18:
    size_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>((uint64_t)this, a2 + 1, a3);
    if (v10 == v5)
    {
      int v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(this, a2 + 1, a3, 0);
      if (v12 == v5) {
        return a2;
      }
      else {
        return v12;
      }
    }
  }
  return v10;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_20;
    }
    int v5 = a2[1];
    char v6 = v5 == 94;
    int v7 = v5 == 94 ? a2 + 2 : a2 + 1;
    unsigned int v8 = operator new(0xB0uLL);
    std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v8, a1, *(void *)(*(void *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
    *(void *)(*(void *)(a1 + 56) + 8) = v8;
    *(void *)(a1 + 56) = v8;
    if (v7 == a3) {
      goto LABEL_20;
    }
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v7 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 93);
      ++v7;
    }
    if (v7 == a3) {
      goto LABEL_20;
    }
    do
    {
      uint64_t v9 = v7;
      int v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(a1, v7, a3, (uint64_t)v8);
    }
    while (v7 != v9);
    if (v9 == a3) {
      goto LABEL_20;
    }
    if (*v9 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 45);
      ++v9;
    }
    if (v9 == a3 || *v9 != 93) {
LABEL_20:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v9 + 1;
  }
  return a2;
}

void sub_1C5AD82EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3) {
    return this;
  }
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '{':
    case '|':
    case '}':
      return this;
    default:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
      __n128 result = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      break;
  }
  return result;
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  unint64_t v3 = a2;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case 'D':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_7;
      case 'S':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_11;
      case 'W':
        char v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_9;
      case 'd':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_7:
        *(void *)(*(void *)(a1 + 56) + 8) = v5;
        *(void *)(a1 + 56) = v5;
        int v7 = v5[40] | 0x400;
        goto LABEL_12;
      case 's':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_11:
        *(void *)(*(void *)(a1 + 56) + 8) = v5;
        *(void *)(a1 + 56) = v5;
        int v7 = v5[40] | 0x4000;
LABEL_12:
        v5[40] = v7;
        goto LABEL_13;
      case 'w':
        char v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_9:
        *(void *)(*(void *)(a1 + 56) + 8) = v6;
        *(void *)(a1 + 56) = v6;
        v6[40] |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, 95);
LABEL_13:
        ++v3;
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_1C5AD86C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C5AD86D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C5AD86E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C5AD86FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C5AD8710(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C5AD8724(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  unint64_t v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  uint64_t v5 = *a2;
  std::basic_regex<char>::value_type v6 = v5;
  switch((char)v5)
  {
    case '0':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 0);
        return v4 + 1;
      }
    case 'c':
      if (v4 + 1 == a3) {
        goto LABEL_81;
      }
      unsigned __int8 v8 = v4[1];
      if (((v8 & 0xDF) - 65) > 0x19u) {
        goto LABEL_81;
      }
      std::basic_regex<char>::value_type v9 = v8 & 0x1F;
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(unsigned char *)a4 = v9;
        *((unsigned char *)a4 + 1) = 0;
        return v4 + 2;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v9);
        return v4 + 2;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return v4 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return v4 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return v4 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return v4 + 1;
      }
    case 'u':
      if (v4 + 1 != a3)
      {
        int v10 = v4[1];
        if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38 || (v10 | 0x20u) - 97 < 6)
        {
          v4 += 2;
          if (v4 != a3)
          {
            int v11 = *v4;
            if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38 || (v11 | 0x20u) - 97 < 6) {
              goto LABEL_38;
            }
          }
        }
      }
      goto LABEL_81;
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char>::value_type v6 = 11;
LABEL_65:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return v4 + 1;
      }
    case 'x':
LABEL_38:
      if (v4 + 1 == a3) {
        goto LABEL_81;
      }
      unsigned __int8 v12 = v4[1];
      char v13 = -48;
      if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38) {
        goto LABEL_43;
      }
      v12 |= 0x20u;
      if ((v12 - 97) >= 6u) {
        goto LABEL_81;
      }
      char v13 = -87;
LABEL_43:
      if (v4 + 2 == a3) {
        goto LABEL_81;
      }
      unsigned __int8 v14 = v4[2];
      char v15 = -48;
      if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38)
      {
        v14 |= 0x20u;
        if ((v14 - 97) >= 6u) {
LABEL_81:
        }
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
        char v15 = -87;
      }
      std::basic_regex<char>::value_type v16 = v14 + 16 * (v12 + v13) + v15;
      if (!a4)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
        v4 += 3;
        return v4;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v16;
      *((unsigned char *)a4 + 1) = 0;
      __n128 result = v4 + 3;
      break;
    default:
      if ((char)v5 == 95 || ((char)v5 & 0x80000000) == 0 && (a1->__traits_.__ct_->__tab_[v5] & 0x500) != 0) {
        goto LABEL_81;
      }
      if (!a4) {
        goto LABEL_65;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v5;
      *((unsigned char *)a4 + 1) = 0;
      return v4 + 1;
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  unint64_t v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  int v5 = *a2;
  if (v5 == 93) {
    return v4;
  }
  std::basic_regex<char>::value_type v6 = (char *)a4;
  int v9 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v40 = 0;
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_38:
    int v24 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_33;
  }
  int v10 = a2[1];
  if (v10 != 46)
  {
    if (v10 != 58)
    {
      if (v10 == 61)
      {
        std::basic_regex<char>::value_type v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(a1, a2 + 2, a3, a4);
        char v11 = 0;
        if ((SHIBYTE(v40) & 0x80000000) == 0) {
          goto LABEL_64;
        }
        goto LABEL_63;
      }
      int v9 = 0;
      goto LABEL_38;
    }
    unsigned __int8 v12 = a2 + 2;
    if (a3 - (v4 + 2) >= 2)
    {
      uint64_t v13 = 0;
      unsigned __int8 v14 = (unsigned __int8 *)v4;
      if (v4[2] == 58) {
        goto LABEL_14;
      }
      do
      {
        do
        {
          if (a3 - v4 - 4 == v13) {
            goto LABEL_89;
          }
          unsigned __int8 v14 = (unsigned __int8 *)&v4[++v13];
        }
        while (v4[v13 + 2] != 58);
LABEL_14:
        ;
      }
      while (v14[3] != 93);
      char v15 = &v4[v13 + 2];
      if (v15 != a3)
      {
        int v16 = std::regex_traits<char>::__lookup_classname<char const*>(a1, v12, v15, *(_DWORD *)(a1 + 24) & 1);
        if (!v16) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
        }
        char v11 = 0;
        *((_DWORD *)v6 + 40) |= v16;
        std::basic_regex<char>::value_type v6 = &v4[v13 + 4];
        if (SHIBYTE(v40) < 0) {
          goto LABEL_63;
        }
        goto LABEL_64;
      }
    }
LABEL_89:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  uint64_t v17 = a2 + 2;
  if (a3 - (v4 + 2) < 2) {
    goto LABEL_89;
  }
  uint64_t v18 = a3 - v4 - 4;
  int v19 = v4 + 2;
  BOOL v20 = v17 + 1;
  if (*v17 == 46) {
    goto LABEL_23;
  }
  do
  {
    do
    {
      if (!v18) {
        goto LABEL_89;
      }
      --v18;
      int v19 = v20;
      int v21 = *v20++;
    }
    while (v21 != 46);
LABEL_23:
    ;
  }
  while (*v20 != 93);
  if (v19 == a3) {
    goto LABEL_89;
  }
  std::regex_traits<char>::__lookup_collatename<char *>(v17, a1, v19, (uint64_t)&v41);
  if (SHIBYTE(v40) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v40 = v42;
  *(_OWORD *)tm __p = v41;
  BOOL v22 = (char *)HIBYTE(v42);
  int v9 = SHIBYTE(v42);
  uint64_t v23 = *((void *)&v41 + 1);
  if (v42 < 0) {
    BOOL v22 = (char *)__p[1];
  }
  if ((unint64_t)(v22 - 1) >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  unint64_t v4 = v19 + 2;
  int v24 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v42 >= 0) {
    uint64_t v23 = HIBYTE(v42);
  }
  if (v23)
  {
    uint64_t v28 = v4;
    if (v4 == a3) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }
LABEL_33:
  if ((v24 | 0x40) != 0x40)
  {
    LOBYTE(v25) = *v4;
LABEL_57:
    if (v9 < 0)
    {
      uint64_t v34 = __p[0];
      __p[1] = (void *)1;
      *(unsigned char *)__p[0] = v25;
      v34[1] = 0;
      uint64_t v28 = v4 + 1;
      if (v4 + 1 == a3) {
        goto LABEL_41;
      }
    }
    else
    {
      HIBYTE(v40) = 1;
      LOWORD(__p[0]) = v25;
      uint64_t v28 = v4 + 1;
      if (v4 + 1 == a3) {
        goto LABEL_41;
      }
    }
    goto LABEL_40;
  }
  int v25 = *v4;
  if (v25 != 92) {
    goto LABEL_57;
  }
  int v26 = v4 + 1;
  if (v24) {
    int v27 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v26, a3, (uint64_t *)__p);
  }
  else {
    int v27 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v26, (unsigned __int8 *)a3, (uint64_t)__p, (uint64_t)v6);
  }
  uint64_t v28 = v27;
  if (v27 == a3)
  {
LABEL_41:
    if (SHIBYTE(v40) < 0)
    {
      if (!__p[1]) {
        goto LABEL_62;
      }
      if (__p[1] != (void *)1)
      {
        uint64_t v30 = (void **)__p[0];
LABEL_61:
        std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)v6, *(char *)v30, *((char *)v30 + 1));
LABEL_62:
        char v11 = 1;
        unint64_t v4 = v28;
        if ((SHIBYTE(v40) & 0x80000000) == 0) {
          goto LABEL_64;
        }
        goto LABEL_63;
      }
      uint64_t v30 = (void **)__p[0];
    }
    else
    {
      if (!HIBYTE(v40)) {
        goto LABEL_62;
      }
      uint64_t v30 = __p;
      if (HIBYTE(v40) != 1) {
        goto LABEL_61;
      }
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, *(char *)v30);
    goto LABEL_62;
  }
LABEL_40:
  int v29 = *v28;
  if (v29 == 93) {
    goto LABEL_41;
  }
  size_t v31 = v28 + 1;
  if (v28 + 1 == a3 || v29 != 45 || *v31 == 93) {
    goto LABEL_41;
  }
  long long v41 = 0uLL;
  int64_t v42 = 0;
  unint64_t v4 = v28 + 2;
  if (v28 + 2 == a3 || *v31 != 91 || *v4 != 46)
  {
    if ((v24 | 0x40) == 0x40)
    {
      LODWORD(v31) = *v31;
      if (v31 == 92)
      {
        if (v24) {
          uint64_t v32 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v28 + 2, a3, (uint64_t *)&v41);
        }
        else {
          uint64_t v32 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v28 + 2, (unsigned __int8 *)a3, (uint64_t)&v41, (uint64_t)v6);
        }
        goto LABEL_79;
      }
    }
    else
    {
      LOBYTE(v31) = *v31;
    }
    HIBYTE(v42) = 1;
    LOWORD(v41) = v31;
    goto LABEL_80;
  }
  uint64_t v32 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v28 + 3, a3, (uint64_t)&v41);
LABEL_79:
  unint64_t v4 = v32;
LABEL_80:
  *(_OWORD *)size_t v37 = *(_OWORD *)__p;
  uint64_t v38 = v40;
  __p[1] = 0;
  uint64_t v40 = 0;
  __p[0] = 0;
  *(_OWORD *)int v35 = v41;
  uint64_t v36 = v42;
  long long v41 = 0uLL;
  int64_t v42 = 0;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100]((uint64_t)v6, (char *)v37, (uint64_t)v35);
  if (SHIBYTE(v36) < 0)
  {
    operator delete(v35[0]);
    if ((SHIBYTE(v38) & 0x80000000) == 0)
    {
LABEL_82:
      if ((SHIBYTE(v42) & 0x80000000) == 0) {
        goto LABEL_83;
      }
LABEL_87:
      operator delete((void *)v41);
      char v11 = 1;
      if (SHIBYTE(v40) < 0) {
        goto LABEL_63;
      }
      goto LABEL_64;
    }
  }
  else if ((SHIBYTE(v38) & 0x80000000) == 0)
  {
    goto LABEL_82;
  }
  operator delete(v37[0]);
  if (SHIBYTE(v42) < 0) {
    goto LABEL_87;
  }
LABEL_83:
  char v11 = 1;
  if (SHIBYTE(v40) < 0) {
LABEL_63:
  }
    operator delete(__p[0]);
LABEL_64:
  if (v11) {
    return v4;
  }
  return v6;
}

void sub_1C5AD9304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 49) < 0)
  {
    operator delete(*(void **)(v28 - 72));
    if (a28 < 0)
    {
LABEL_5:
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (a28 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  if (a3 - __src < 2 || a3 - 1 == __src) {
    goto LABEL_39;
  }
  uint64_t v7 = 0;
  unsigned __int8 v8 = __src;
  if (*__src != 61) {
    goto LABEL_5;
  }
LABEL_4:
  if (v8[1] != 93)
  {
LABEL_5:
    while (a3 - __src - 2 != v7)
    {
      unsigned __int8 v8 = &__src[++v7];
      if (__src[v7] == 61) {
        goto LABEL_4;
      }
    }
LABEL_39:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (&__src[v7] == a3) {
    goto LABEL_39;
  }
  memset(v18, 170, sizeof(v18));
  std::regex_traits<char>::__lookup_collatename<char *>(__src, a1, &__src[v7], (uint64_t)v18);
  if ((SHIBYTE(v18[2]) & 0x80000000) == 0)
  {
    int v9 = (char *)HIBYTE(v18[2]);
    if (HIBYTE(v18[2]))
    {
      memset(__p, 170, sizeof(__p));
      int v10 = v18;
      goto LABEL_14;
    }
LABEL_40:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  int v9 = (char *)v18[1];
  if (!v18[1]) {
    goto LABEL_40;
  }
  memset(__p, 170, sizeof(__p));
  int v10 = (void **)v18[0];
LABEL_14:
  std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, (uint64_t)v10, &v9[(void)v10], (unsigned char **)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    if (__p[1])
    {
LABEL_16:
      unint64_t v11 = *(void *)(a4 + 144);
      if (v11 >= *(void *)(a4 + 152))
      {
        *(void *)(a4 + 144) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(a4 + 136), (uint64_t)__p);
        if (SHIBYTE(__p[2]) < 0) {
          goto LABEL_37;
        }
      }
      else
      {
        if ((HIBYTE(__p[2]) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a4 + 144), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          long long v12 = *(_OWORD *)__p;
          *(void **)(v11 + 16) = __p[2];
          *(_OWORD *)unint64_t v11 = v12;
        }
        *(void *)(a4 + 144) = v11 + 24;
        *(void *)(a4 + 144) = v11 + 24;
        if (SHIBYTE(__p[2]) < 0) {
          goto LABEL_37;
        }
      }
      goto LABEL_33;
    }
  }
  else if (HIBYTE(__p[2]))
  {
    goto LABEL_16;
  }
  uint64_t v13 = (void *)HIBYTE(v18[2]);
  if (SHIBYTE(v18[2]) < 0) {
    uint64_t v13 = v18[1];
  }
  if (v13 == (void *)2)
  {
    char v15 = v18;
    if (SHIBYTE(v18[2]) < 0) {
      char v15 = (void **)v18[0];
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](a4, *(char *)v15, *((char *)v15 + 1));
  }
  else
  {
    if (v13 != (void *)1) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
    }
    unsigned __int8 v14 = v18;
    if (SHIBYTE(v18[2]) < 0) {
      unsigned __int8 v14 = (void **)v18[0];
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a4, *(char *)v14);
  }
  if (SHIBYTE(__p[2]) < 0)
  {
LABEL_37:
    operator delete(__p[0]);
    if (SHIBYTE(v18[2]) < 0) {
      goto LABEL_38;
    }
    return &__src[v7 + 2];
  }
LABEL_33:
  if (SHIBYTE(v18[2]) < 0) {
LABEL_38:
  }
    operator delete(v18[0]);
  return &__src[v7 + 2];
}

void sub_1C5AD95D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  *(void *)(v20 + 144) = v21;
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  if (a3 - __src < 2 || a3 - 1 == __src) {
    goto LABEL_15;
  }
  uint64_t v6 = 0;
  uint64_t v7 = __src;
  if (*__src != 46) {
    goto LABEL_5;
  }
LABEL_4:
  if (v7[1] != 93)
  {
LABEL_5:
    while (a3 - __src - 2 != v6)
    {
      uint64_t v7 = &__src[++v6];
      if (__src[v6] == 46) {
        goto LABEL_4;
      }
    }
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (&__src[v6] == a3) {
    goto LABEL_15;
  }
  std::regex_traits<char>::__lookup_collatename<char *>(__src, a1, &__src[v6], (uint64_t)&v11);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v11;
  unint64_t v8 = v12;
  *(void *)(a4 + 16) = v12;
  unint64_t v9 = HIBYTE(v8);
  if ((v9 & 0x80u) != 0) {
    unint64_t v9 = *(void *)(a4 + 8);
  }
  if (v9 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return &__src[v6 + 2];
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  if (a2 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      __n128 result = a2 + 1;
      break;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      goto LABEL_8;
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      __n128 result = a2 + 1;
      break;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
      __n128 result = a2 + 1;
      break;
    case 'b':
      if (*(char *)(a4 + 23) < 0)
      {
        *(void *)(a4 + 8) = 1;
        a4 = *(void *)a4;
      }
      else
      {
        *(unsigned char *)(a4 + 23) = 1;
      }
      *(_WORD *)a4 = 8;
      __n128 result = a2 + 1;
      break;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      __n128 result = a2 + 1;
      break;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      __n128 result = a2 + 1;
      break;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
      __n128 result = a2 + 1;
      break;
    default:
      if (*a2)
      {
LABEL_8:
        __n128 result = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
      }
      else
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(void *)(a4 + 8) = 1;
          a4 = *(void *)a4;
        }
        else
        {
          *(unsigned char *)(a4 + 23) = 1;
        }
        *(unsigned char *)a4 = 0;
        *(unsigned char *)(a4 + 1) = 0;
        __n128 result = a2 + 1;
      }
      break;
  }
  return result;
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3, uint64_t *a4)
{
  if (a2 == a3) {
LABEL_70:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  std::basic_regex<char>::value_type v5 = *a2;
  switch(*a2)
  {
    case '""':
    case '/':
    case '\\':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(unsigned char *)a4 = v5;
        *((unsigned char *)a4 + 1) = 0;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
        return a2 + 1;
      }
    case 'a':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 7;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 7);
        return a2 + 1;
      }
    case 'b':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 8);
        return a2 + 1;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return a2 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return a2 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return a2 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return a2 + 1;
      }
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 11);
        return a2 + 1;
      }
    default:
      if ((v5 & 0xF8) != 0x30) {
        goto LABEL_70;
      }
      std::basic_regex<char>::value_type v7 = *a2 - 48;
      unint64_t v8 = a2 + 1;
      if (a2 + 1 == a3)
      {
        unint64_t v8 = a3;
LABEL_42:
        if (a4) {
          goto LABEL_43;
        }
LABEL_69:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
        return v8;
      }
      if ((*v8 & 0xF8) != 0x30) {
        goto LABEL_42;
      }
      std::basic_regex<char>::value_type v7 = *v8 + 8 * v7 - 48;
      if (a2 + 2 == a3)
      {
        unint64_t v8 = a3;
        if (a4) {
          goto LABEL_43;
        }
        goto LABEL_69;
      }
      std::basic_regex<char>::value_type v9 = a2[2];
      int v10 = v9 & 0xF8;
      std::basic_regex<char>::value_type v11 = v9 + 8 * v7 - 48;
      if (v10 == 48) {
        unint64_t v8 = a2 + 3;
      }
      else {
        unint64_t v8 = a2 + 2;
      }
      if (v10 == 48) {
        std::basic_regex<char>::value_type v7 = v11;
      }
      if (!a4) {
        goto LABEL_69;
      }
LABEL_43:
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v7;
      *((unsigned char *)a4 + 1) = 0;
      return v8;
  }
}

uint64_t std::regex_traits<char>::__lookup_classname<char const*>(uint64_t a1, unsigned char *__src, unsigned char *a3, BOOL a4)
{
  size_t v4 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v4 <= 0x16)
  {
    HIBYTE(__dst[2]) = (_BYTE)a3 - (_BYTE)__src;
    std::basic_regex<char>::value_type v9 = __dst;
    if (__src == a3) {
      goto LABEL_9;
    }
LABEL_8:
    memcpy(v9, __src, v4);
    std::basic_regex<char>::value_type v9 = (void **)((char *)v9 + v4);
    goto LABEL_9;
  }
  uint64_t v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17) {
    uint64_t v10 = v4 | 7;
  }
  uint64_t v11 = v10 + 1;
  std::basic_regex<char>::value_type v9 = (void **)operator new(v10 + 1);
  __dst[1] = (void *)v4;
  __dst[2] = (void *)(v11 | 0x8000000000000000);
  __dst[0] = v9;
  if (__src != a3) {
    goto LABEL_8;
  }
LABEL_9:
  *(unsigned char *)std::basic_regex<char>::value_type v9 = 0;
  unint64_t v12 = (char *)HIBYTE(__dst[2]);
  if (SHIBYTE(__dst[2]) >= 0) {
    uint64_t v13 = __dst;
  }
  else {
    uint64_t v13 = (void **)__dst[0];
  }
  if (SHIBYTE(__dst[2]) < 0) {
    unint64_t v12 = (char *)__dst[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v13, &v12[(void)v13]);
  if (SHIBYTE(__dst[2]) >= 0) {
    unsigned __int8 v14 = (const char *)__dst;
  }
  else {
    unsigned __int8 v14 = (const char *)__dst[0];
  }
  uint64_t classname = std::__get_classname(v14, a4);
  if (SHIBYTE(__dst[2]) < 0) {
    operator delete(__dst[0]);
  }
  return classname;
}

void sub_1C5ADA08C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>((std::basic_regex<char> *)a1, (char *)a2, a3);
  std::basic_regex<char>::value_type v7 = v6;
  if (v6 != (char *)a2 || v6 == a3) {
    return v7;
  }
  if ((char *)(a2 + 1) == a3) {
    return (char *)a2;
  }
  if (*(unsigned char *)a2 != 92) {
    return (char *)a2;
  }
  int v8 = *(unsigned __int8 *)(a2 + 1);
  if (v8 == 40)
  {
    std::basic_regex<char>::value_type v9 = (std::basic_regex<char> *)(a2 + 2);
    if ((*(unsigned char *)(a1 + 24) & 2) != 0)
    {
      int v11 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      uint64_t v10 = operator new(0x18uLL);
      int v11 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v11;
      uint64_t v12 = *(void *)(a1 + 56);
      uint64_t v13 = *(void *)(v12 + 8);
      void *v10 = &unk_1F2105200;
      v10[1] = v13;
      *((_DWORD *)v10 + 4) = v11;
      *(void *)(v12 + 8) = v10;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    do
    {
      if (v9 == (std::basic_regex<char> *)a3) {
        goto LABEL_25;
      }
      char v15 = v9;
      int v16 = *(std::__owns_one_state<char> **)(a1 + 56);
      int v17 = *(_DWORD *)(a1 + 28);
      uint64_t v18 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, v15, a3);
      if (v18 == v15) {
        break;
      }
      std::basic_regex<char>::value_type v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>((std::basic_regex<char> *)a1, v18, (std::basic_regex<char> *)a3, v16, (v17 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    while (v9 != v15);
    if ((char *)&v15->__traits_.__loc_.__locale_ + 1 == a3
      || LOBYTE(v15->__traits_.__loc_.__locale_) != 92
      || BYTE1(v15->__traits_.__loc_.__locale_) != 41)
    {
LABEL_25:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    std::basic_regex<char>::value_type v7 = (char *)v15 + 2 * (BYTE1(v15->__traits_.__loc_.__locale_) == 41);
    if ((*(unsigned char *)(a1 + 24) & 2) == 0)
    {
      int v19 = operator new(0x18uLL);
      uint64_t v20 = *(void *)(a1 + 56);
      uint64_t v21 = *(void *)(v20 + 8);
      *int v19 = &unk_1F2105248;
      v19[1] = v21;
      *((_DWORD *)v19 + 4) = v11;
      *(void *)(v20 + 8) = v19;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      return v7;
    }
    return v7;
  }
  if ((v8 & 0xF8) != 0x30 && (v8 & 0xFE) != 0x38 || (v8 - 49) > 8) {
    return (char *)a2;
  }
  if ((v8 - 48) > *(_DWORD *)(a1 + 28)) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref((std::basic_regex<char> *)a1, v8 - 48);
  return (char *)(a2 + 2);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  uint64_t v6 = this;
  if (this == a3) {
    return v6;
  }
  int locale_low = LOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low == 42)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
    return (std::basic_regex<char> *)((char *)v6 + 1);
  }
  if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3
    || locale_low != 92
    || BYTE1(this->__traits_.__loc_.__locale_) != 123)
  {
    return v6;
  }
  std::basic_regex<char>::value_type v9 = (std::basic_regex<char> *)((char *)this + 2 * (BYTE1(this->__traits_.__loc_.__locale_) == 123));
  if (v9 == a3) {
    goto LABEL_43;
  }
  int v10 = LOBYTE(v9->__traits_.__loc_.__locale_);
  if ((v10 & 0xF8) != 0x30 && (v10 & 0xFE) != 0x38) {
    goto LABEL_43;
  }
  int v11 = v10 - 48;
  uint64_t v12 = (std::basic_regex<char> *)((char *)&v9->__traits_.__loc_.__locale_ + 1);
  if ((std::basic_regex<char> *)((char *)&v9->__traits_.__loc_.__locale_ + 1) == a3)
  {
LABEL_16:
    uint64_t v12 = a3;
  }
  else
  {
    while (1)
    {
      int v13 = LOBYTE(v12->__traits_.__loc_.__locale_);
      if ((v13 & 0xF8) != 0x30 && (v13 & 0xFE) != 0x38) {
        break;
      }
      if (v11 >= 214748364) {
        goto LABEL_43;
      }
      int v11 = v13 + 10 * v11 - 48;
      uint64_t v12 = (std::basic_regex<char> *)((char *)v12 + 1);
      if (v12 == a3) {
        goto LABEL_16;
      }
    }
  }
  if (v12 == v9) {
    goto LABEL_43;
  }
  if (v12 == a3) {
    goto LABEL_41;
  }
  unsigned __int8 v14 = (std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 1);
  int v15 = LOBYTE(v12->__traits_.__loc_.__locale_);
  if (v15 != 44)
  {
    if (v14 != a3 && v15 == 92 && LOBYTE(v14->__traits_.__loc_.__locale_) == 125)
    {
      int v19 = (unsigned __int8 *)&v12->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, v11, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v19;
    }
    goto LABEL_41;
  }
  if (v14 == a3) {
    goto LABEL_41;
  }
  int v16 = LOBYTE(v14->__traits_.__loc_.__locale_);
  if ((v16 & 0xF8) == 0x30 || (v16 & 0xFE) == 0x38)
  {
    unsigned __int8 v14 = (std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 2);
    if ((std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 2) == a3) {
      goto LABEL_41;
    }
    int v17 = v16 - 48;
    while (1)
    {
      int v16 = LOBYTE(v14->__traits_.__loc_.__locale_);
      if ((v16 & 0xF8) != 0x30 && (v16 & 0xFE) != 0x38) {
        break;
      }
      if (v17 >= 214748364) {
        goto LABEL_43;
      }
      int v17 = v16 + 10 * v17 - 48;
      unsigned __int8 v14 = (std::basic_regex<char> *)((char *)v14 + 1);
      if (v14 == a3) {
        goto LABEL_41;
      }
    }
  }
  else
  {
    int v17 = -1;
  }
  if (v14 == a3
    || (std::basic_regex<char> *)((char *)&v14->__traits_.__loc_.__locale_ + 1) == a3
    || v16 != 92
    || BYTE1(v14->__traits_.__loc_.__locale_) != 125)
  {
LABEL_41:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  }
  uint64_t v18 = (unsigned __int8 *)v14 + 2 * (BYTE1(v14->__traits_.__loc_.__locale_) == 125);
  if (v17 != -1)
  {
    if (v17 >= v11)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, v17, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v18;
    }
LABEL_43:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
  return (std::basic_regex<char> *)v18;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2 + 1;
    int v5 = *a2;
    if (a2 + 1 != a3 || v5 != 36)
    {
      if ((v5 - 46) > 0x2E || ((1 << (v5 - 46)) & 0x600000000001) == 0)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v5);
        return a2 + 1;
      }
      if (v6 == a3 || v5 != 92)
      {
        if (v5 == 46)
        {
          int v10 = (std::__node<char> *)operator new(0x10uLL);
          std::vector<std::ssub_match>::pointer end = this->__end_;
          first = end->__first_;
          v10->__vftable = (std::__node<char>_vtbl *)&unk_1F21053F8;
          v10[1].__vftable = (std::__node<char>_vtbl *)first;
          end->__first_ = v10;
          this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
          return a2 + 1;
        }
      }
      else
      {
        int v9 = *v6;
        if ((v9 - 36) <= 0x3A && ((1 << (v9 - 36)) & 0x580000000000441) != 0)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
          return a2 + 2;
        }
      }
    }
  }

  return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 28);
  int v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>((std::basic_regex<char> *)a1, a2, a3);
  if (v8 != a2
    || (int v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(a1, a2, a3), v8 != a2))
  {
    if (v8 != a2) {
      goto LABEL_25;
    }
LABEL_4:
    if (v8 != a3)
    {
      int locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
      if (locale_low == 36)
      {
        int v10 = operator new(0x18uLL);
        BOOL v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
        uint64_t v12 = *(void *)(a1 + 56);
        v10[1] = *(void *)(v12 + 8);
        int v13 = &unk_1F2104EE8;
        goto LABEL_13;
      }
      if (locale_low != 40)
      {
        if (locale_low == 94)
        {
          int v10 = operator new(0x18uLL);
          BOOL v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
          uint64_t v12 = *(void *)(a1 + 56);
          v10[1] = *(void *)(v12 + 8);
          int v13 = &unk_1F2104EA0;
LABEL_13:
          void *v10 = v13;
          *((unsigned char *)v10 + 16) = v11;
          *(void *)(v12 + 8) = v10;
          goto LABEL_14;
        }
        return a2;
      }
      if ((*(unsigned char *)(a1 + 24) & 2) != 0)
      {
        int v18 = *(_DWORD *)(a1 + 28);
      }
      else
      {
        int v17 = operator new(0x18uLL);
        int v18 = *(_DWORD *)(a1 + 28) + 1;
        *(_DWORD *)(a1 + 28) = v18;
        uint64_t v19 = *(void *)(a1 + 56);
        uint64_t v20 = *(void *)(v19 + 8);
        *int v17 = &unk_1F2105200;
        v17[1] = v20;
        *((_DWORD *)v17 + 4) = v18;
        *(void *)(v19 + 8) = v17;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      }
      ++*(_DWORD *)(a1 + 36);
      uint64_t v21 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
      if (v21 == a3 || (BOOL v22 = v21, LOBYTE(v21->__traits_.__loc_.__locale_) != 41)) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      if ((*(unsigned char *)(a1 + 24) & 2) == 0)
      {
        uint64_t v23 = operator new(0x18uLL);
        uint64_t v24 = *(void *)(a1 + 56);
        uint64_t v25 = *(void *)(v24 + 8);
        void *v23 = &unk_1F2105248;
        v23[1] = v25;
        *((_DWORD *)v23 + 4) = v18;
        *(void *)(v24 + 8) = v23;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      }
      --*(_DWORD *)(a1 + 36);
      int v8 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
    }
LABEL_25:
    if (v8 != a2) {
      goto LABEL_26;
    }
    return a2;
  }
  if (a2 == a3 || LOBYTE(a2->__traits_.__loc_.__locale_) != 46)
  {
    int v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(a1, (char *)a2, (char *)a3);
    if (v8 != a2) {
      goto LABEL_25;
    }
    goto LABEL_4;
  }
  unsigned __int8 v14 = operator new(0x10uLL);
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v16 = *(void *)(v15 + 8);
  *unsigned __int8 v14 = &unk_1F21053F8;
  v14[1] = v16;
  *(void *)(v15 + 8) = v14;
LABEL_14:
  *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
  int v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
LABEL_26:
  size_t v26 = (*(_DWORD *)(a1 + 28) + 1);

  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v8, a3, v6, (v7 + 1), v26);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3) {
    return this;
  }
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
      return this;
    case ')':
      if (a1->__open_count_) {
        return this;
      }
      break;
    default:
      break;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
  return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  unint64_t v3 = this;
  if (this == a3) {
    return (std::basic_regex<char>::value_type *)v3;
  }
  size_t v4 = (char *)&this->__traits_.__loc_.__locale_ + 1;
  if ((std::basic_regex<char> *)((char *)&v3->__traits_.__loc_.__locale_ + 1) == a3
    || LOBYTE(v3->__traits_.__loc_.__locale_) != 92)
  {
    return (std::basic_regex<char>::value_type *)v3;
  }
  std::basic_regex<char>::value_type v5 = *v4;
  switch(*v4)
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
    case '}':
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v5);
      return (char *)v3 + 2;
    default:
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
      {
        __n128 result = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v4, (std::basic_regex<char>::value_type *)a3, 0);
      }
      else
      {
        BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v5);
        uint64_t v8 = 2;
        if (!v7) {
          uint64_t v8 = 0;
        }
        __n128 result = (char *)v3 + v8;
      }
      break;
  }
  return result;
}

uint64_t *std::unique_ptr<std::__hash_node<std::string,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16) && *(char *)(v2 + 39) < 0) {
      operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v23 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v24 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v25 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v27 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v26 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v28 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v29 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v30 = v26 + v28;
      unint64_t v31 = 0x9DDFEA08EB382D69
          * (v25 ^ ((0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))));
      unint64_t v32 = 0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47));
      unint64_t v33 = v23 + v26 + v27 + a3;
      uint64_t v34 = v33 + v24;
      unint64_t v35 = __ROR8__(v33, 44) + v27 + a3 + __ROR8__(v27 + a3 + v24 - 0x622015F714C7D297 * (v31 ^ (v31 >> 47)), 21);
      uint64_t v36 = v26 + v28 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v37 = v25 + v28 + v36;
      uint64_t v38 = __ROR8__(v37, 44);
      uint64_t v39 = v37 + v29;
      uint64_t v40 = v38 + v36 + __ROR8__(v36 + v24 + v29, 21);
      uint64_t v42 = *a2;
      long long v41 = a2 + 4;
      unint64_t v43 = v42 - 0x4B6D499041670D8DLL * v24;
      uint64_t v44 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v45 = *(v41 - 3);
        uint64_t v46 = v43 + v34 + v30 + v45;
        uint64_t v47 = v41[2];
        uint64_t v48 = v41[3];
        uint64_t v49 = v41[1];
        unint64_t v30 = v49 + v34 - 0x4B6D499041670D8DLL * __ROR8__(v30 + v35 + v47, 42);
        uint64_t v50 = v32 + v39;
        uint64_t v51 = *(v41 - 2);
        uint64_t v52 = *(v41 - 1);
        uint64_t v53 = *(v41 - 4) - 0x4B6D499041670D8DLL * v35;
        uint64_t v54 = v53 + v39 + v52;
        uint64_t v55 = v53 + v45 + v51;
        uint64_t v34 = v55 + v52;
        uint64_t v56 = __ROR8__(v55, 44) + v53;
        unint64_t v57 = (0xB492B66FBE98F273 * __ROR8__(v46, 37)) ^ v40;
        unint64_t v43 = 0xB492B66FBE98F273 * __ROR8__(v50, 33);
        unint64_t v35 = v56 + __ROR8__(v54 + v57, 21);
        unint64_t v58 = v43 + v40 + *v41;
        uint64_t v39 = v49 + v47 + v58 + v48;
        uint64_t v40 = __ROR8__(v49 + v47 + v58, 44) + v58 + __ROR8__(v30 + v51 + v58 + v48, 21);
        v41 += 8;
        unint64_t v32 = v57;
        v44 += 64;
      }
      while (v44);
      unint64_t v59 = v43
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) ^ ((0x9DDFEA08EB382D69 * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) >> 47));
      unint64_t v60 = 0x9DDFEA08EB382D69
          * (v59 ^ (v57
                  - 0x4B6D499041670D8DLL * (v30 ^ (v30 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) ^ ((0x9DDFEA08EB382D69 * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) ^ ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) >> 47));
    }
    else
    {
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v7 = *a2 - 0x3C5A37A36834CED9 * (v6 + a3);
      uint64_t v9 = a2[2];
      uint64_t v8 = a2[3];
      uint64_t v10 = __ROR8__(v7 + v8, 52);
      uint64_t v11 = v7 + a2[1];
      uint64_t v12 = __ROR8__(v11, 7);
      uint64_t v13 = v11 + v9;
      uint64_t v14 = *(uint64_t *)((char *)a2 + a3 - 32) + v9;
      uint64_t v15 = v12 + __ROR8__(*a2 - 0x3C5A37A36834CED9 * (v6 + a3), 37) + v10 + __ROR8__(v13, 31);
      uint64_t v16 = *(uint64_t *)((char *)a2 + a3 - 24) + v14 + v6;
      unint64_t v17 = 0xC3A5C85C97CB3127 * (v16 + *(uint64_t *)((char *)a2 + a3 - 8) + v8 + v15)
          - 0x651E95C4D06FBFB1
          * (v13
           + v8
           + __ROR8__(v14, 37)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 24) + v14, 7)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 8) + v8 + v14, 52)
           + __ROR8__(v16, 31));
      return 0x9AE16A3B2F90404FLL
           * ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) ^ ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) >> 47));
    }
  }
  else if (a3 > 0x10)
  {
    uint64_t v18 = a2[1];
    unint64_t v19 = 0xB492B66FBE98F273 * *a2;
    uint64_t v20 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v19 - v18, 43);
    unint64_t v21 = v19 + a3 + __ROR8__(v18 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
    unint64_t v22 = 0x9DDFEA08EB382D69 * ((v20 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v21);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) ^ ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) >> 47));
  }
  else if (a3 < 9)
  {
    if (a3 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a3)
      {
        unint64_t v63 = (0xC949D7C7509E6557 * (a3 + 4 * *((unsigned __int8 *)a2 + a3 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                       * (*(unsigned __int8 *)a2 | ((unint64_t)*((unsigned __int8 *)a2 + (a3 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v63 ^ (v63 >> 47));
      }
    }
    else
    {
      uint64_t v61 = *(unsigned int *)((char *)a2 + a3 - 4);
      unint64_t v62 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a2) + a3) ^ v61);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) ^ ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(uint64_t *)((char *)a2 + a3 - 8);
    uint64_t v4 = __ROR8__(v3 + a3, a3);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) >> 47))) ^ v3;
  }
  return result;
}

void TransportService::create(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, void *a5@<X8>)
{
  GetABMLogServer(&v27);
  uint64_t v10 = *((void *)GetGlobalLogger(&v27) + 4);
  uint64_t v11 = v28;
  if (!v28 || atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
LABEL_4:
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_DEFAULT, "#I IPC: Creating ARI transport service...", buf, 2u);
  }
LABEL_5:
  uint64_t v13 = *a1;
  uint64_t v12 = a1[1];
  uint64_t v14 = (std::__shared_weak_count *)operator new(0x118uLL);
  uint64_t v15 = v14;
  v14->__shared_owners_ = 0;
  p_shared_owners = &v14->__shared_owners_;
  v14->__shared_weak_owners_ = 0;
  v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210AA88;
  *(void *)std::string buf = v13;
  uint64_t v30 = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v17 = (std::__shared_weak_count *)a2[1];
  uint64_t v37 = *a2;
  uint64_t v38 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = (std::__shared_weak_count_vtbl *)&v14[1];
  uint64_t v19 = *a3;
  uint64_t v20 = (std::__shared_weak_count *)a3[1];
  uint64_t v35 = v19;
  uint64_t v36 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v21 = *a4;
  unint64_t v22 = (std::__shared_weak_count *)a4[1];
  v34[0] = v21;
  v34[1] = (uint64_t)v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ARITransportService::ARITransportService((uint64_t)&v14[1], buf, &v37, &v35, v34);
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  if (v36) {
    std::__shared_weak_count::__release_weak(v36);
  }
  uint64_t v23 = v38;
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  uint64_t v24 = (std::__shared_weak_count *)v30;
  if (v30 && !atomic_fetch_add((atomic_ullong *volatile)(v30 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    uint64_t v25 = (uint64_t *)&v15[4];
    shared_owners = (std::__shared_weak_count *)v15[4].__shared_owners_;
    if (shared_owners) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v25 = (uint64_t *)&v15[4];
    shared_owners = (std::__shared_weak_count *)v15[4].__shared_owners_;
    if (shared_owners)
    {
LABEL_24:
      if (shared_owners->__shared_owners_ == -1)
      {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        v15[4].__vftable = v18;
        v15[4].__shared_owners_ = (uint64_t)v15;
        std::__shared_weak_count::__release_weak(shared_owners);
        if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_31;
        }
      }
      goto LABEL_32;
    }
  }
  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  v15[4].__vftable = v18;
  v15[4].__shared_owners_ = (uint64_t)v15;
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_31:
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_32:
  *(void *)std::string buf = MEMORY[0x1E4F143A8];
  uint64_t v30 = 0x40000000;
  unint64_t v31 = ___ZN19ARITransportService4initEv_block_invoke;
  unint64_t v32 = &__block_descriptor_tmp_9;
  unint64_t v33 = v15 + 1;
  ctu::SharedSynchronizable<ARITransportService>::execute_wrapped(v25, (uint64_t)buf);
  *a5 = (char *)v15 + 128;
  a5[1] = v15;
}

void sub_1C5ADB5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v5 - 80);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::__shared_weak_count::~__shared_weak_count(v3);
  operator delete(v7);
  _Unwind_Resume(a1);
}

void sub_1C5ADB628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ARITransportService::init(ARITransportService *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___ZN19ARITransportService4initEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_9;
  v1[4] = this;
  ctu::SharedSynchronizable<ARITransportService>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

uint64_t ARITransportService::ARITransportService(uint64_t a1, void *a2, void *a3, void *a4, uint64_t *a5)
{
  *(void *)a1 = &unk_1F210A688;
  *(void *)(a1 + 104) = &unk_1F210A738;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v18, "com.apple.telephony.abm", "ipc.svc.ari");
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v11 = dispatch_queue_create_with_target_V2("ipc.svc.ari", initially_inactive, 0);
  dispatch_set_qos_class_floor(v11, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v11);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = v11;
  if (v11)
  {
    dispatch_retain(v11);
    *(void *)(a1 + 96) = 0;
    dispatch_release(v11);
  }
  else
  {
    *(void *)(a1 + 96) = 0;
  }
  *(void *)a1 = &unk_1F210AA48;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v20);
  *(void *)(a1 + 8) = &unk_1F2102CB8;
  *(void *)(a1 + 56) = *a2;
  uint64_t v12 = a2[1];
  *(void *)(a1 + 64) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v19);
  *(void *)a1 = &unk_1F210AAD8;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v18);
  uint64_t v13 = *a5;
  uint64_t v14 = (std::__shared_weak_count *)a5[1];
  if (v14)
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 104) = &unk_1F210A9C8;
    *(void *)(a1 + 112) = v13;
    *(void *)(a1 + 120) = v14;
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  else
  {
    *(void *)(a1 + 104) = &unk_1F210A9C8;
    *(void *)(a1 + 112) = v13;
    *(void *)(a1 + 120) = 0;
  }
  *(void *)a1 = &unk_1F210A688;
  *(void *)(a1 + 104) = &unk_1F210A738;
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(_WORD *)(a1 + 152) = 256;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 192) = *a3;
  uint64_t v15 = a3[1];
  *(void *)(a1 + 200) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 208) = *a4;
  uint64_t v16 = a4[1];
  *(void *)(a1 + 216) = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 16), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 224) = 0;
  *(unsigned char *)(a1 + 248) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  std::string::append((std::string *)(a1 + 224), 0x100uLL, 0);
  return a1;
}

void sub_1C5ADB9AC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 247) < 0)
  {
    operator delete(*v7);
    uint64_t v9 = *(std::__shared_weak_count **)(v1 + 216);
    if (!v9)
    {
LABEL_3:
      std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v6);
      std::unique_ptr<support::misc::Watchdog>::~unique_ptr[abi:ne180100](v3);
      uint64_t v10 = *(NSObject **)(v1 + 176);
      if (!v10) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v9 = *(std::__shared_weak_count **)(v1 + 216);
    if (!v9) {
      goto LABEL_3;
    }
  }
  std::__shared_weak_count::__release_weak(v9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v6);
  std::unique_ptr<support::misc::Watchdog>::~unique_ptr[abi:ne180100](v3);
  uint64_t v10 = *(NSObject **)(v1 + 176);
  if (!v10)
  {
LABEL_5:
    dispatch::callback<void({block_pointer})(WakeReason)>::~callback(v5);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v4);
    TransportService::~TransportService(v2);
    ctu::SharedLoggable<ARITransportService,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable((void *)v1);
    _Unwind_Resume(a1);
  }
LABEL_4:
  dispatch_release(v10);
  goto LABEL_5;
}

void sub_1C5ADBA34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a13);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v13);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

const char *ARITransportService::getName(ARITransportService *this)
{
  return "ipc.svc.ari";
}

void **std::unique_ptr<support::misc::Watchdog>::~unique_ptr[abi:ne180100](void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    TelephonyBasebandWatchdogStop();
    operator delete(v2);
  }
  return a1;
}

void TransportService::~TransportService(TransportService *this)
{
  *(void *)this = &unk_1F210A9C8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void *ctu::SharedLoggable<ARITransportService,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F210AA48;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1F210AA48;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ARITransportService::~ARITransportService(ARITransportService *this)
{
  *(void *)this = &unk_1F210A688;
  *((void *)this + 13) = &unk_1F210A738;
  ARITransportService::cancelWakeRequest_sync(this);
  uint64_t v3 = (Ari *)AriHostRt::Shutdown(v2);
  LogLevels = (Ari *)Ari::GetLogLevels(v3);
  uint64_t v6 = (Ari *)Ari::LogConfig(LogLevels, 0, v5);
  uint64_t v7 = Ari::GetLogLevels(v6);
  MEMORY[0x1C8793E70](v7, 0, 0);
  uint64_t v8 = *((void *)this + 5);
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    if ((*((char *)this + 247) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_29:
    operator delete(*((void **)this + 28));
    uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 27);
    if (!v9) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  *(_WORD *)uint64_t v20 = 0;
  _os_log_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_DEFAULT, "#I Gone!", v20, 2u);
  if (*((char *)this + 247) < 0) {
    goto LABEL_29;
  }
LABEL_3:
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v9) {
LABEL_4:
  }
    std::__shared_weak_count::__release_weak(v9);
LABEL_5:
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 25);
  if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v11 = (void *)*((void *)this + 23);
    *((void *)this + 23) = 0;
    if (!v11) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  uint64_t v11 = (void *)*((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v11)
  {
LABEL_8:
    TelephonyBasebandWatchdogStop();
    operator delete(v11);
  }
LABEL_9:
  uint64_t v12 = *((void *)this + 22);
  if (v12) {
    dispatch_release(v12);
  }
  uint64_t v13 = *((void *)this + 21);
  if (v13) {
    dispatch_release(v13);
  }
  uint64_t v14 = (const void *)*((void *)this + 20);
  if (v14) {
    _Block_release(v14);
  }
  uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  *((void *)this + 13) = &unk_1F210A9C8;
  uint64_t v16 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  *(void *)this = &unk_1F210AA48;
  MEMORY[0x1C87940C0]((char *)this + 8);
  unint64_t v17 = *((void *)this + 12);
  if (v17) {
    dispatch_release(v17);
  }
  uint64_t v18 = *((void *)this + 11);
  if (v18) {
    dispatch_release(v18);
  }
  uint64_t v19 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
}

{
  void *v1;
  uint64_t vars8;

  ARITransportService::~ARITransportService(this);

  operator delete(v1);
}

void ARITransportService::shutdown_sync(ARITransportService *this)
{
  ARITransportService::cancelWakeRequest_sync(this);
  uint64_t v2 = (Ari *)AriHostRt::Shutdown(v1);
  LogLevels = (Ari *)Ari::GetLogLevels(v2);
  uint64_t v5 = (Ari *)Ari::LogConfig(LogLevels, 0, v4);
  Ari::GetLogLevels(v5);

  JUMPOUT(0x1C8793E70);
}

const char *non-virtual thunk to'ARITransportService::getName(ARITransportService *this)
{
  return "ipc.svc.ari";
}

void ARITransportService::cancelWakeRequest_sync(ARITransportService *this)
{
  uint64_t v2 = *((void *)this + 22);
  if (v2)
  {
    dispatch_source_cancel(v2);
    uint64_t v3 = *((void *)this + 22);
    *((void *)this + 22) = 0;
    if (v3) {
      dispatch_release(v3);
    }
    if (*((void *)this + 20) && *((void *)this + 21))
    {
      if (*((char *)this + 247) < 0)
      {
        if (*((void *)this + 29)) {
          goto LABEL_8;
        }
      }
      else if (*((unsigned char *)this + 247))
      {
LABEL_8:
        xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
        if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C8795EB0](v4) == MEMORY[0x1E4F14590])
          {
            xpc_retain(v4);
            xpc_object_t v5 = v4;
          }
          else
          {
            xpc_object_t v5 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v5 = xpc_null_create();
          xpc_object_t v4 = 0;
        }
        xpc_release(v4);
        xpc_object_t v10 = xpc_string_create((const char *)*MEMORY[0x1E4F4C3A8]);
        if (!v10) {
          xpc_object_t v10 = xpc_null_create();
        }
        xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4F4C408], v10);
        xpc_object_t v11 = xpc_null_create();
        xpc_release(v10);
        xpc_release(v11);
        uint64_t v12 = (char *)this + 224;
        if (*((char *)this + 247) < 0) {
          uint64_t v12 = *(const char **)v12;
        }
        xpc_object_t v13 = xpc_string_create(v12);
        if (!v13) {
          xpc_object_t v13 = xpc_null_create();
        }
        xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4F4C5B0], v13);
        xpc_object_t v14 = xpc_null_create();
        xpc_release(v13);
        xpc_release(v14);
        xpc_object_t v15 = xpc_BOOL_create(*((unsigned char *)this + 248));
        if (!v15) {
          xpc_object_t v15 = xpc_null_create();
        }
        xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4F4CF80], v15);
        xpc_object_t v16 = xpc_null_create();
        xpc_release(v15);
        xpc_release(v16);
        if (v5)
        {
          xpc_retain(v5);
          xpc_object_t v17 = v5;
          uint64_t v18 = (const void *)*((void *)this + 20);
          if (v18)
          {
LABEL_38:
            uint64_t v19 = _Block_copy(v18);
            goto LABEL_41;
          }
        }
        else
        {
          xpc_object_t v17 = xpc_null_create();
          uint64_t v18 = (const void *)*((void *)this + 20);
          if (v18) {
            goto LABEL_38;
          }
        }
        uint64_t v19 = 0;
LABEL_41:
        uint64_t v20 = *((void *)this + 21);
        blocunint64_t k = MEMORY[0x1E4F143A8];
        uint64_t v22 = 1174405120;
        uint64_t v23 = ___ZNK8dispatch8callbackIU13block_pointerFv10WakeReasonEEclIJS1_EEEvDpT__block_invoke;
        uint64_t v24 = &__block_descriptor_tmp_96_2;
        if (v19)
        {
          aBlocunint64_t k = _Block_copy(v19);
          int v26 = 3;
          xpc_object_t object = v17;
          if (v17)
          {
LABEL_43:
            xpc_retain(v17);
LABEL_46:
            dispatch_async(v20, &block);
            xpc_release(object);
            xpc_object_t object = 0;
            if (aBlock) {
              _Block_release(aBlock);
            }
            if (v19) {
              _Block_release(v19);
            }
            xpc_release(v17);
            xpc_release(v5);
            return;
          }
        }
        else
        {
          aBlocunint64_t k = 0;
          int v26 = 3;
          xpc_object_t object = v17;
          if (v17) {
            goto LABEL_43;
          }
        }
        xpc_object_t object = xpc_null_create();
        goto LABEL_46;
      }
      xpc_object_t v6 = xpc_null_create();
      uint64_t v7 = (const void *)*((void *)this + 20);
      if (v7) {
        uint64_t v8 = _Block_copy(v7);
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v9 = *((void *)this + 21);
      blocunint64_t k = MEMORY[0x1E4F143A8];
      uint64_t v22 = 1174405120;
      uint64_t v23 = ___ZNK8dispatch8callbackIU13block_pointerFv10WakeReasonEEclIJS1_EEEvDpT__block_invoke;
      uint64_t v24 = &__block_descriptor_tmp_96_2;
      if (v8)
      {
        aBlocunint64_t k = _Block_copy(v8);
        int v26 = 4;
        xpc_object_t object = v6;
        if (v6)
        {
LABEL_19:
          xpc_retain(v6);
LABEL_22:
          dispatch_async(v9, &block);
          xpc_release(object);
          xpc_object_t object = 0;
          if (aBlock) {
            _Block_release(aBlock);
          }
          if (v8) {
            _Block_release(v8);
          }
          xpc_release(v6);
          return;
        }
      }
      else
      {
        aBlocunint64_t k = 0;
        int v26 = 4;
        xpc_object_t object = v6;
        if (v6) {
          goto LABEL_19;
        }
      }
      xpc_object_t object = xpc_null_create();
      goto LABEL_22;
    }
  }
}

void ARITransportService::flushAndCloseLogs_sync(ARITransportService *this)
{
  LogLevels = (Ari *)Ari::GetLogLevels(this);
  uint64_t v3 = (Ari *)Ari::LogConfig(LogLevels, 0, v2);
  Ari::GetLogLevels(v3);

  JUMPOUT(0x1C8793E70);
}

void ARITransportService::shutdown(ARITransportService *this)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN19ARITransportService8shutdownEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_10;
  v3[4] = this;
  xpc_object_t v4 = v3;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19ARITransportServiceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_71;
  block[4] = (char *)this + 72;
  block[5] = &v4;
  uint64_t v2 = (char *)this + 88;
  uint64_t v1 = *((void *)this + 11);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

void ___ZN19ARITransportService8shutdownEv_block_invoke(uint64_t a1)
{
  ARITransportService::cancelWakeRequest_sync(*(ARITransportService **)(a1 + 32));
  uint64_t v2 = (Ari *)AriHostRt::Shutdown(v1);
  LogLevels = (Ari *)Ari::GetLogLevels(v2);
  xpc_object_t v5 = (Ari *)Ari::LogConfig(LogLevels, 0, v4);
  Ari::GetLogLevels(v5);

  JUMPOUT(0x1C8793E70);
}

void non-virtual thunk to'ARITransportService::shutdown(ARITransportService *this)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN19ARITransportService8shutdownEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_10;
  v3[4] = (char *)this - 104;
  xpc_object_t v4 = v3;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19ARITransportServiceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_71;
  block[4] = (char *)this - 32;
  block[5] = &v4;
  uint64_t v2 = (char *)this - 16;
  uint64_t v1 = *((void *)this - 2);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

void ___ZN19ARITransportService4initEv_block_invoke(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 40);
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I ----------------- Setting up ----------------", buf, 2u);
  }
  xpc_object_t v4 = (capabilities::pci *)capabilities::ipc::supportsPCI((capabilities::ipc *)v3);
  if ((v4 & 1) == 0)
  {
    int v26 = GetOsLogContext()[1];
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_FAULT)) {
      goto LABEL_54;
    }
    *(_DWORD *)std::string buf = 136315906;
    *(void *)&uint8_t buf[4] = "ABM ASSERT";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "capabilities::ipc::supportsPCI()";
    __int16 v31 = 2080;
    unint64_t v32 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Serve"
          "r/Transport/ARI/Service/ARITransportService.cpp";
    __int16 v33 = 1024;
    int v34 = 126;
    goto LABEL_53;
  }
  unint64_t v5 = capabilities::pci::controlChannelCount(v4);
  if (HIDWORD(v5))
  {
    int v26 = GetOsLogContext()[1];
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_FAULT)) {
      goto LABEL_54;
    }
    *(_DWORD *)std::string buf = 136315906;
    *(void *)&uint8_t buf[4] = "ABM ASSERT";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "capabilities::pci::controlChannelCount() <= std::numeric_limits<unsigned>::max()";
    __int16 v31 = 2080;
    unint64_t v32 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Serve"
          "r/Transport/ARI/Service/ARITransportService.cpp";
    __int16 v33 = 1024;
    int v34 = 127;
LABEL_53:
    _os_log_fault_impl(&dword_1C59C6000, v26, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", buf, 0x26u);
LABEL_54:
    __break(1u);
  }
  if (capabilities::pci::controlChannelCount((capabilities::pci *)v5) != 1)
  {
    xpc_object_t v6 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_ERROR, "The number of control channels is not one!", buf, 2u);
    }
  }
  ARIXpcServer::create((uint64_t *)buf);
  long long v7 = *(_OWORD *)buf;
  *(void *)std::string buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  uint64_t v8 = *(std::__shared_weak_count **)(v1 + 144);
  *(_OWORD *)(v1 + 136) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)&buf[8];
  if (!*(void *)&buf[8]
    || atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    xpc_object_t v10 = *(NSObject **)(v1 + 40);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  xpc_object_t v10 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
LABEL_14:
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_DEFAULT, "#I ----------------- ARI runtime XPC Server up ----------------", buf, 2u);
  }
LABEL_15:
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1EBBDC7D8)
  {
    uint64_t v12 = (uint64_t (***)(void, uint64_t))operator new(0x18uLL);
    MEMORY[0x1C87942F0](v12, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
    xpc_object_t v11 = operator new(0x20uLL);
    void *v11 = &unk_1F210A638;
    v11[1] = 0;
    v11[2] = 0;
    v11[3] = v12;
    xpc_object_t v13 = (std::__shared_weak_count *)off_1EBBDC7E0;
    qword_1EBBDC7D8 = (uint64_t)v12;
    off_1EBBDC7E0 = v11;
    if (!v13)
    {
      uint64_t v27 = (std::__shared_weak_count *)v11;
      goto LABEL_24;
    }
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  uint64_t v12 = (uint64_t (***)(void, uint64_t))qword_1EBBDC7D8;
  xpc_object_t v11 = off_1EBBDC7E0;
  uint64_t v27 = (std::__shared_weak_count *)off_1EBBDC7E0;
  if (off_1EBBDC7E0) {
LABEL_24:
  }
    atomic_fetch_add_explicit(v11 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  HIBYTE(v31) = 18;
  strcpy(buf, "ICEEnableARIResets");
  if (Preferences::getPreference<BOOL>(v12, buf, (ctu::cf *)(v1 + 153)))
  {
    if ((SHIBYTE(v31) & 0x80000000) == 0) {
      goto LABEL_27;
    }
LABEL_30:
    operator delete(*(void **)buf);
    xpc_object_t v14 = v27;
    if (!v27) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  *(unsigned char *)(v1 + 153) = 1;
  if (SHIBYTE(v31) < 0) {
    goto LABEL_30;
  }
LABEL_27:
  xpc_object_t v14 = v27;
  if (!v27)
  {
LABEL_32:
    int v15 = *(unsigned __int8 *)(v1 + 153);
    xpc_object_t v16 = *(NSObject **)(v1 + 40);
    BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if (v15) {
      goto LABEL_33;
    }
    goto LABEL_36;
  }
LABEL_31:
  if (atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  int v19 = *(unsigned __int8 *)(v1 + 153);
  xpc_object_t v16 = *(NSObject **)(v1 + 40);
  BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
  if (v19)
  {
LABEL_33:
    if (v17)
    {
      *(_WORD *)std::string buf = 0;
      uint64_t v18 = "#I Allowing ARI reset requests";
LABEL_38:
      _os_log_impl(&dword_1C59C6000, v16, OS_LOG_TYPE_DEFAULT, v18, buf, 2u);
      goto LABEL_39;
    }
    goto LABEL_39;
  }
LABEL_36:
  if (v17)
  {
    *(_WORD *)std::string buf = 0;
    uint64_t v18 = "#I Ignoring ARI reset requests";
    goto LABEL_38;
  }
LABEL_39:
  uint64_t v20 = *(std::__shared_weak_count **)(v1 + 80);
  if (!v20 || (v21 = *(void *)(v1 + 72), (uint64_t v22 = std::__shared_weak_count::lock(v20)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v23 = v22;
  p_shared_weak_owners = &v22->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v23);
  }
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v25 = operator new(0x20uLL);
  *uint64_t v25 = &unk_1F210AB18;
  v25[1] = v21;
  v25[2] = v23;
  v25[3] = v1;
  uint64_t v29 = v25;
  AriHostRt::RegisterBasebandResetDelegate();
  if (v29 == v28)
  {
    (*(void (**)(void *))(v28[0] + 32))(v28);
  }
  else if (v29)
  {
    (*(void (**)(void *))(*v29 + 40))(v29);
  }
  std::__shared_weak_count::__release_weak(v23);
}

void *std::function<void ()(AriHostRt::ARI_CLIENT_ERROR_EVT,std::string,int,unsigned int)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void non-virtual thunk to'ARITransportService::init(ARITransportService *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___ZN19ARITransportService4initEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_9;
  v1[4] = (char *)this - 104;
  ctu::SharedSynchronizable<ARITransportService>::execute_wrapped((uint64_t *)this - 4, (uint64_t)v1);
}

uint64_t ARITransportService::engage(ARITransportService *this)
{
  uint64_t v6 = 0;
  long long v7 = &v6;
  uint64_t v8 = 0x2000000000;
  char v9 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZN19ARITransportService6engageEv_block_invoke;
  v5[3] = &unk_1E651B878;
  v5[4] = &v6;
  v5[5] = this;
  xpc_object_t v10 = v5;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19ARITransportServiceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_71;
  block[4] = (char *)this + 72;
  block[5] = &v10;
  uint64_t v2 = (char *)this + 88;
  uint64_t v1 = *((void *)this + 11);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
  uint64_t v3 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void ___ZN19ARITransportService6engageEv_block_invoke(capabilities::abs *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)a1 + 5);
  if (*(unsigned char *)(v2 + 152))
  {
    uint64_t v3 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Skipping RT init as bypass is enabled", buf, 2u);
    }
    *(unsigned char *)(*(void *)(*((void *)a1 + 4) + 8) + 24) = 1;
    return;
  }
  if ((unint64_t)capabilities::abs::ARIMessageTimeoutScalingFactor(a1) >> 32)
  {
    xpc_object_t v10 = GetOsLogContext()[1];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "ABM ASSERT";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "capabilities::abs::ARIMessageTimeoutScalingFactor() <= std::numeric_limits<uint32_t>::max()";
      *(_WORD *)&unsigned char buf[22] = 2080;
      xpc_object_t v13 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Ser"
            "ver/Transport/ARI/Service/ARITransportService.cpp";
      __int16 v14 = 1024;
      int v15 = 268;
      _os_log_fault_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", buf, 0x26u);
    }
    __break(1u);
  }
  else
  {
    xpc_object_t v4 = *(NSObject **)(v2 + 40);
    BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    if (v5)
    {
      *(_DWORD *)std::string buf = 134217984;
      *(void *)&uint8_t buf[4] = capabilities::abs::ARIMessageTimeoutScalingFactor((capabilities::abs *)v5);
      _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Recovering ARI Runtime with %zu scaling factor", buf, 0xCu);
    }
    v11[5] = MEMORY[0x1E4F143A8];
    v11[6] = 0x40000000;
    v11[7] = ___ZN19ARITransportService6engageEv_block_invoke_12;
    v11[8] = &__block_descriptor_tmp_13_0;
    v11[9] = v2;
    capabilities::abs::ARIMessageTimeoutScalingFactor((capabilities::abs *)v5);
    uint64_t v6 = (capabilities::abs *)AriHostRt::Init();
    if (v6 == -92)
    {
      *(void *)std::string buf = operator new(0x38uLL);
      *(_OWORD *)&uint8_t buf[8] = xmmword_1C5BC8B10;
      strcpy(*(char **)buf, "Failed to open transport to communicate with baseband.");
      ARITransportService::resetBaseband_sync((void *)v2, buf);
    }
    else
    {
      if (!v6)
      {
        *(unsigned char *)(*(void *)(*((void *)a1 + 4) + 8) + 24) = 1;
        *(_DWORD *)(v2 + 128) = 1;
        capabilities::abs::engageTimeoutScalingFactor(v6);
        v11[0] = MEMORY[0x1E4F143A8];
        v11[1] = 0x40000000;
        v11[2] = ___ZN19ARITransportService6engageEv_block_invoke_14;
        v11[3] = &__block_descriptor_tmp_17;
        v11[4] = v2;
        long long v7 = operator new(0x10uLL);
        uint64_t v8 = _Block_copy(v11);
        void *v7 = "Watchdog timed out";
        TelephonyBasebandWatchdogStart();
        if (v8) {
          _Block_release(v8);
        }
        char v9 = *(void **)(v2 + 184);
        *(void *)(v2 + 184) = v7;
        if (v9)
        {
          TelephonyBasebandWatchdogStop();
          operator delete(v9);
        }
        return;
      }
      *(void *)std::string buf = operator new(0x28uLL);
      *(_OWORD *)&uint8_t buf[8] = xmmword_1C5BC5210;
      strcpy(*(char **)buf, "Failed to initialize ARI runtime.");
      ARITransportService::resetBaseband_sync((void *)v2, buf);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
}

void sub_1C5ADD188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN19ARITransportService6engageEv_block_invoke_12(uint64_t a1)
{
  uint64_t v1 = *(ARITransportService **)(a1 + 32);
  uint64_t v2 = *((void *)v1 + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Received All-Ready from ARI Runtime", v3, 2u);
  }
  ARITransportService::broadcastTransportReady_sync(v1);
}

void ARITransportService::broadcastTransportReady_sync(ARITransportService *this)
{
  uint64_t v18 = 0;
  int v19 = 0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 27);
  if (!v2) {
    goto LABEL_18;
  }
  int v19 = std::__shared_weak_count::lock(v2);
  if (!v19) {
    goto LABEL_18;
  }
  uint64_t v3 = *((void *)this + 26);
  uint64_t v18 = v3;
  if (!v3) {
    goto LABEL_18;
  }
  xpc_object_t v4 = abm::kEventTransportIsReady[0];
  size_t v5 = strlen(abm::kEventTransportIsReady[0]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    long long v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v17 = v9 | 0x8000000000000000;
    __dst[0] = v7;
  }
  else
  {
    HIBYTE(v17) = v5;
    long long v7 = __dst;
    if (!v5) {
      goto LABEL_12;
    }
  }
  memmove(v7, v4, (size_t)v6);
LABEL_12:
  *((unsigned char *)v6 + (void)v7) = 0;
  aBlocunint64_t k = 0;
  CFTypeRef cf = 0;
  Service::broadcastEvent(v3, (uint64_t)__dst, &cf, (const void **)&aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(__dst[0]);
  }
LABEL_18:
  xpc_object_t v10 = *((void *)this + 5);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)xpc_object_t v13 = 0;
    _os_log_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_DEFAULT, "#I ----------------- TransportIsReady event broadcasted to other modules ----------------", v13, 2u);
  }
  *((_DWORD *)this + 32) = 2;
  xpc_object_t v11 = (void *)*((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v11)
  {
    TelephonyBasebandWatchdogStop();
    operator delete(v11);
  }
  uint64_t v12 = v19;
  if (v19)
  {
    if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1C5ADD44C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, const void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a11);
  if (a17 < 0)
  {
    operator delete(__p);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void ___ZN19ARITransportService6engageEv_block_invoke_14(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 0x40000000;
  v2[2] = ___ZN19ARITransportService6engageEv_block_invoke_2;
  v2[3] = &__block_descriptor_tmp_16_0;
  v2[4] = v1;
  ctu::SharedSynchronizable<ARITransportService>::execute_wrapped((uint64_t *)(v1 + 72), (uint64_t)v2);
}

void ___ZN19ARITransportService6engageEv_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v1 + 128) != 2)
  {
    tm __p = operator new(0x20uLL);
    long long v3 = xmmword_1C5BC8B20;
    strcpy((char *)__p, "Baseband ARI engage timeout");
    ARITransportService::resetBaseband_sync((void *)v1, (const char *)&__p);
    if (SHIBYTE(v3) < 0) {
      operator delete(__p);
    }
  }
}

void sub_1C5ADD5A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ARITransportService::resetBaseband_sync(void *a1, const char *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  xpc_object_t v4 = a1[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    if (a2[23] >= 0) {
      xpc_object_t v10 = a2;
    }
    else {
      xpc_object_t v10 = *(const char **)a2;
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v10;
    _os_log_error_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
    size_t v5 = (std::__shared_weak_count *)a1[27];
    if (!v5) {
      return;
    }
  }
  else
  {
    size_t v5 = (std::__shared_weak_count *)a1[27];
    if (!v5) {
      return;
    }
  }
  uint64_t v6 = std::__shared_weak_count::lock(v5);
  uint64_t v28 = v6;
  if (!v6) {
    return;
  }
  uint64_t v27 = a1[26];
  if (!v27)
  {
    uint64_t v9 = v6;
LABEL_39:
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    return;
  }
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  if (v7 || (xpc_object_t v7 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v7) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v7);
      xpc_object_t v8 = v7;
    }
    else
    {
      xpc_object_t v8 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t v7 = 0;
  }
  xpc_release(v7);
  xpc_object_t v11 = xpc_string_create((const char *)*MEMORY[0x1E4F4C6E8]);
  if (!v11) {
    xpc_object_t v11 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E4F4C690], v11);
  xpc_object_t v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  xpc_object_t v13 = xpc_string_create((const char *)*MEMORY[0x1E4F4D1A0]);
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E4F4CA38], v13);
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  if (a2[23] >= 0) {
    int v15 = a2;
  }
  else {
    int v15 = *(const char **)a2;
  }
  xpc_object_t v16 = xpc_string_create(v15);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E4F4C8F0], v16);
  xpc_object_t v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  uint64_t v18 = v27;
  int v19 = (const void *)*MEMORY[0x1E4F4C638];
  size_t v20 = strlen((const char *)*MEMORY[0x1E4F4C638]);
  if (v20 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v21 = v20;
  if (v20 >= 0x17)
  {
    uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17) {
      uint64_t v23 = v20 | 7;
    }
    uint64_t v24 = v23 + 1;
    p_long long buf = (long long *)operator new(v23 + 1);
    *((void *)&buf + 1) = v21;
    unint64_t v30 = v24 | 0x8000000000000000;
    *(void *)&long long buf = p_buf;
LABEL_34:
    memmove(p_buf, v19, v21);
    *((unsigned char *)p_buf + v21) = 0;
    xpc_object_t object = v8;
    if (v8) {
      goto LABEL_30;
    }
    goto LABEL_35;
  }
  HIBYTE(v30) = v20;
  p_long long buf = &buf;
  if (v20) {
    goto LABEL_34;
  }
  LOBYTE(buf) = 0;
  xpc_object_t object = v8;
  if (v8)
  {
LABEL_30:
    xpc_retain(v8);
    goto LABEL_36;
  }
LABEL_35:
  xpc_object_t object = xpc_null_create();
LABEL_36:
  uint64_t v25 = 0;
  Service::runCommand(v18, (uint64_t)&buf, &object, &v25);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(v30) < 0) {
    operator delete((void *)buf);
  }
  xpc_release(v8);
  uint64_t v9 = v28;
  if (v28) {
    goto LABEL_39;
  }
}

void sub_1C5ADD950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t non-virtual thunk to'ARITransportService::engage(ARITransportService *this)
{
  return ARITransportService::engage((ARITransportService *)((char *)this - 104));
}

uint64_t ARITransportService::recover(ARITransportService *this)
{
  return 1;
}

uint64_t non-virtual thunk to'ARITransportService::recover(ARITransportService *this)
{
  return 1;
}

void ARITransportService::enterLowPower(uint64_t a1, NSObject **a2)
{
  uint64_t v6 = *(void *)(a1 + 72);
  xpc_object_t v4 = *(std::__shared_weak_count **)(a1 + 80);
  size_t v5 = (uint64_t *)(a1 + 72);
  if (!v4 || (xpc_object_t v8 = std::__shared_weak_count::lock(v4)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  v11[2] = ___ZN19ARITransportService13enterLowPowerEN8dispatch13group_sessionE_block_invoke;
  v11[3] = &__block_descriptor_tmp_26_1;
  xpc_object_t v10 = *a2;
  v11[4] = a1;
  dispatch_group_t group = v10;
  if (v10)
  {
    dispatch_retain(v10);
    dispatch_group_enter(group);
  }
  uint64_t v13 = v6;
  xpc_object_t v14 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  ctu::SharedSynchronizable<ARITransportService>::execute_wrapped(v5, (uint64_t)v11);
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  std::__shared_weak_count::__release_weak(v9);
}

void ___ZN19ARITransportService13enterLowPowerEN8dispatch13group_sessionE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  long long v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Starting ARI RT Enter LP event", buf, 2u);
  }
  *(unsigned char *)(v2 + 248) = 0;
  if (*(char *)(v2 + 247) < 0)
  {
    *(void *)(v2 + 232) = 0;
    **(unsigned char **)(v2 + 224) = 0;
    xpc_object_t v4 = *(const void **)(v2 + 160);
    if (!v4) {
      goto LABEL_15;
    }
  }
  else
  {
    *(unsigned char *)(v2 + 247) = 0;
    *(unsigned char *)(v2 + 224) = 0;
    xpc_object_t v4 = *(const void **)(v2 + 160);
    if (!v4) {
      goto LABEL_15;
    }
  }
  if (*(void *)(v2 + 168))
  {
    size_t v5 = _Block_copy(v4);
    uint64_t v6 = v5;
    xpc_object_t v7 = *(NSObject **)(v2 + 168);
    *(void *)long long buf = MEMORY[0x1E4F143A8];
    uint64_t v19 = 1174405120;
    size_t v20 = ___ZNK8dispatch8callbackIU13block_pointerFv10WakeReasonEEclIJNS1_6StatusEEEEvDpT__block_invoke;
    size_t v21 = &__block_descriptor_tmp_94_0;
    if (v5) {
      xpc_object_t v8 = _Block_copy(v5);
    }
    else {
      xpc_object_t v8 = 0;
    }
    aBlocunint64_t k = v8;
    int v23 = 2;
    dispatch_async(v7, buf);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v6) {
      _Block_release(v6);
    }
  }
LABEL_15:
  uint64_t v9 = dispatch_group_create();
  if (AriHostRt::SetOPMode())
  {
    xpc_object_t v10 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_ERROR, "Failed to trigger ARI RT transition", buf, 2u);
    }
  }
  else
  {
    xpc_object_t v11 = *(NSObject **)(v2 + 88);
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 1174405120;
    v14[2] = ___ZN19ARITransportService13enterLowPowerEN8dispatch13group_sessionE_block_invoke_22;
    v14[3] = &__block_descriptor_tmp_23_4;
    xpc_object_t v12 = a1[5];
    v14[4] = v2;
    dispatch_group_t group = v12;
    if (v12)
    {
      dispatch_retain(v12);
      dispatch_group_enter(group);
    }
    uint64_t v13 = (std::__shared_weak_count *)a1[7];
    uint64_t v16 = a1[6];
    xpc_object_t v17 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    dispatch_group_notify(v9, v11, v14);
    if (v17) {
      std::__shared_weak_count::__release_weak(v17);
    }
    if (group)
    {
      dispatch_group_leave(group);
      if (group) {
        dispatch_release(group);
      }
    }
  }
  if (v9) {
    dispatch_release(v9);
  }
}

void sub_1C5ADDDE4(_Unwind_Exception *exception_object)
{
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN19ARITransportService13enterLowPowerEN8dispatch13group_sessionE_block_invoke_22(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2)
  {
    uint64_t v3 = a1[4];
    xpc_object_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      size_t v5 = v4;
      if (a1[6])
      {
        uint64_t v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)xpc_object_t v7 = 0;
          _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#I ARI Runtime completed LPM enter transition", v7, 2u);
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c44_ZTSNSt3__18weak_ptrI19ARITransportServiceEE(void *a1, void *a2)
{
  xpc_object_t v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    size_t v5 = a1[5];
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c44_ZTSNSt3__18weak_ptrI19ARITransportServiceEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(NSObject **)(a1 + 40);
  if (v3)
  {
    dispatch_group_leave(v3);
    xpc_object_t v4 = *(NSObject **)(a1 + 40);
    if (v4)
    {
      dispatch_release(v4);
    }
  }
}

void non-virtual thunk to'ARITransportService::enterLowPower(uint64_t a1, NSObject **a2)
{
}

uint64_t ARITransportService::tearDown(ARITransportService *this)
{
  uint64_t v6 = 0;
  xpc_object_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  char v9 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZN19ARITransportService8tearDownEv_block_invoke;
  v5[3] = &unk_1E651B8A0;
  v5[4] = &v6;
  v5[5] = this;
  xpc_object_t v10 = v5;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19ARITransportServiceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_71;
  block[4] = (char *)this + 72;
  block[5] = &v10;
  uint64_t v2 = (char *)this + 88;
  uint64_t v1 = *((void *)this + 11);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
  uint64_t v3 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void ___ZN19ARITransportService8tearDownEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (*(_DWORD *)(v1 + 128))
  {
    ARITransportService::cancelWakeRequest_sync(*(ARITransportService **)(a1 + 40));
    uint64_t v3 = *(NSObject **)(v1 + 40);
    BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Cancelling all ARI transactions...", buf, 2u);
    }
    AriHostRt::CancelAllTransactions((AriHostRt *)v4);
    size_t v5 = *(NSObject **)(v1 + 40);
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if (v6)
    {
      *(_WORD *)xpc_object_t v10 = 0;
      _os_log_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_DEFAULT, "#I Tearing down ARI Runtime...", v10, 2u);
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = AriHostRt::Shutdown((AriHostRt *)v6) == 0;
    *(_DWORD *)(v1 + 128) = 0;
  }
  else
  {
    xpc_object_t v7 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)char v9 = 0;
      _os_log_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_DEFAULT, "#I Ignoring tear down request as ARI transport state is already reset", v9, 2u);
    }
  }
  uint64_t v8 = *(void **)(v1 + 184);
  *(void *)(v1 + 184) = 0;
  if (v8)
  {
    TelephonyBasebandWatchdogStop();
    operator delete(v8);
  }
}

uint64_t non-virtual thunk to'ARITransportService::tearDown(ARITransportService *this)
{
  return ARITransportService::tearDown((ARITransportService *)((char *)this - 104));
}

void ARITransportService::exitLowPower(uint64_t a1, NSObject **a2)
{
  uint64_t v6 = *(void *)(a1 + 72);
  BOOL v4 = *(std::__shared_weak_count **)(a1 + 80);
  size_t v5 = (uint64_t *)(a1 + 72);
  if (!v4 || (uint64_t v8 = std::__shared_weak_count::lock(v4)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  char v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  v11[2] = ___ZN19ARITransportService12exitLowPowerEN8dispatch13group_sessionE_block_invoke;
  v11[3] = &__block_descriptor_tmp_34_1;
  xpc_object_t v10 = *a2;
  v11[4] = a1;
  dispatch_group_t group = v10;
  if (v10)
  {
    dispatch_retain(v10);
    dispatch_group_enter(group);
  }
  uint64_t v13 = v6;
  xpc_object_t v14 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  ctu::SharedSynchronizable<ARITransportService>::execute_wrapped(v5, (uint64_t)v11);
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  std::__shared_weak_count::__release_weak(v9);
}

void ___ZN19ARITransportService12exitLowPowerEN8dispatch13group_sessionE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Starting ARI RT Exit LP event", buf, 2u);
  }
  if (*(_DWORD *)(v2 + 128) == 2)
  {
    ARITransportService::updateWakeReason_sync((ARITransportService *)v2);
    BOOL v4 = dispatch_group_create();
    if (AriHostRt::SetOPMode())
    {
      size_t v5 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_ERROR, "Failed to trigger ARI RT transition", buf, 2u);
      }
    }
    else
    {
      xpc_object_t v7 = *(NSObject **)(v2 + 88);
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 1174405120;
      v10[2] = ___ZN19ARITransportService12exitLowPowerEN8dispatch13group_sessionE_block_invoke_28;
      v10[3] = &__block_descriptor_tmp_31_3;
      uint64_t v8 = a1[5];
      v10[4] = v2;
      dispatch_group_t group = v8;
      if (v8)
      {
        dispatch_retain(v8);
        dispatch_group_enter(group);
      }
      char v9 = (std::__shared_weak_count *)a1[7];
      uint64_t v12 = a1[6];
      uint64_t v13 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      dispatch_group_notify(v4, v7, v10);
      if (v13) {
        std::__shared_weak_count::__release_weak(v13);
      }
      if (group)
      {
        dispatch_group_leave(group);
        if (group) {
          dispatch_release(group);
        }
      }
    }
    if (v4) {
      dispatch_release(v4);
    }
  }
  else
  {
    uint64_t v6 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#I Skipping Exit LPM as baseband ready is pending", buf, 2u);
    }
  }
}

void sub_1C5ADE514(_Unwind_Exception *exception_object)
{
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void ARITransportService::updateWakeReason_sync(ARITransportService *this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)((char *)this + 224);
  if ((*((char *)this + 247) & 0x80000000) == 0)
  {
    char SystemWakeReason = TelephonyUtilGetSystemWakeReason();
    BOOL v4 = *((void *)this + 5);
    if (SystemWakeReason) {
      goto LABEL_3;
    }
LABEL_9:
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v6) = 0;
      _os_log_error_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_ERROR, "Failed to fetch system wake reason", (uint8_t *)&v6, 2u);
      if (!*((void *)this + 20)) {
        return;
      }
      goto LABEL_11;
    }
LABEL_10:
    if (!*((void *)this + 20)) {
      return;
    }
    goto LABEL_11;
  }
  char v5 = TelephonyUtilGetSystemWakeReason();
  BOOL v4 = *((void *)this + 5);
  if ((v5 & 1) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_10;
  }
  if (*((char *)this + 247) < 0) {
    uint64_t v2 = (void *)*v2;
  }
  int v6 = 136315138;
  xpc_object_t v7 = v2;
  _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I System wake reason: %s", (uint8_t *)&v6, 0xCu);
  if (*((void *)this + 20))
  {
LABEL_11:
    if (*((void *)this + 21)) {
      ARITransportService::getWakeReason_sync(this, 2);
    }
  }
}

void ___ZN19ARITransportService12exitLowPowerEN8dispatch13group_sessionE_block_invoke_28(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2)
  {
    uint64_t v3 = a1[4];
    BOOL v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      char v5 = v4;
      if (a1[6])
      {
        int v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)xpc_object_t v7 = 0;
          _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#I ARI Runtime completed LPM exit transition", v7, 2u);
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void non-virtual thunk to'ARITransportService::exitLowPower(uint64_t a1, NSObject **a2)
{
}

void ARITransportService::dumpState(ARITransportService *this)
{
  uint64_t v3 = this;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19ARITransportServiceE20execute_wrapped_syncIZNS1_9dumpStateEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  block[3] = &__block_descriptor_tmp_95;
  block[4] = (char *)this + 72;
  block[5] = &v3;
  uint64_t v2 = (char *)this + 88;
  uint64_t v1 = *((void *)this + 11);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

void non-virtual thunk to'ARITransportService::dumpState(ARITransportService *this)
{
  uint64_t v3 = (char *)this - 104;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19ARITransportServiceE20execute_wrapped_syncIZNS1_9dumpStateEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  block[3] = &__block_descriptor_tmp_95;
  block[4] = (char *)this - 32;
  block[5] = &v3;
  uint64_t v2 = (char *)this - 16;
  uint64_t v1 = *((void *)this - 2);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

void ARITransportService::reportPowerDownMessages_sync(ARITransportService *this)
{
  xpc_object_t v2 = xpc_array_create(0, 0);
  uint64_t v3 = MEMORY[0x1E4F14568];
  if (v2 || (xpc_object_t v2 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v2) == v3)
    {
      xpc_retain(v2);
      xpc_object_t v4 = v2;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v2 = 0;
  }
  xpc_release(v2);
  if (MEMORY[0x1C8795EB0](v4) != v3) {
    goto LABEL_8;
  }
  if (!xpc_array_get_count(v4)) {
    goto LABEL_8;
  }
  char v5 = (std::__shared_weak_count *)*((void *)this + 27);
  if (!v5) {
    goto LABEL_8;
  }
  int v6 = std::__shared_weak_count::lock(v5);
  uint64_t v24 = v6;
  if (!v6) {
    goto LABEL_8;
  }
  uint64_t v23 = *((void *)this + 26);
  if (!v23)
  {
    char v9 = v6;
LABEL_37:
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    goto LABEL_8;
  }
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  if (v7 || (xpc_object_t v7 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v7) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v7);
      xpc_object_t v8 = v7;
    }
    else
    {
      xpc_object_t v8 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t v7 = 0;
  }
  xpc_release(v7);
  if (v4)
  {
    xpc_retain(v4);
    xpc_object_t v10 = v4;
  }
  else
  {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, abm::kKeyPowerDownMessageList[0], v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  uint64_t v12 = v23;
  uint64_t v13 = abm::kCommandSetPowerDownMessageList[0];
  size_t v14 = strlen(abm::kCommandSetPowerDownMessageList[0]);
  if (v14 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v15 = (void *)v14;
  if (v14 >= 0x17)
  {
    uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v17 = v14 | 7;
    }
    uint64_t v18 = v17 + 1;
    uint64_t v16 = (void **)operator new(v17 + 1);
    __dst[1] = v15;
    unint64_t v22 = v18 | 0x8000000000000000;
    __dst[0] = v16;
    goto LABEL_30;
  }
  HIBYTE(v22) = v14;
  uint64_t v16 = __dst;
  if (v14) {
LABEL_30:
  }
    memmove(v16, v13, (size_t)v15);
  *((unsigned char *)v15 + (void)v16) = 0;
  xpc_object_t object = v8;
  if (v8) {
    xpc_retain(v8);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  uint64_t v19 = 0;
  Service::runCommand(v12, (uint64_t)__dst, &object, &v19);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(v22) < 0) {
    operator delete(__dst[0]);
  }
  xpc_release(v8);
  char v9 = v24;
  if (v24) {
    goto LABEL_37;
  }
LABEL_8:
  xpc_release(v4);
}

void sub_1C5ADEB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  xpc_release(object);
  if (a17 < 0) {
    operator delete(__p);
  }
  xpc_release(v19);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  xpc_release(v18);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'ARITransportService::reportPowerDownMessages_sync(ARITransportService *this)
{
}

uint64_t ARITransportService::enableBypass(ARITransportService *this, char a2)
{
  uint64_t v8 = 0;
  char v9 = &v8;
  uint64_t v10 = 0x2000000000;
  char v11 = 0;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = ___ZN19ARITransportService12enableBypassEb_block_invoke;
  v6[3] = &unk_1E651B8C8;
  char v7 = a2;
  v6[4] = &v8;
  v6[5] = this;
  uint64_t v12 = v6;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19ARITransportServiceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_71;
  block[4] = (char *)this + 72;
  block[5] = &v12;
  uint64_t v3 = (char *)this + 88;
  xpc_object_t v2 = *((void *)this + 11);
  if (*((void *)v3 + 1)) {
    dispatch_async_and_wait(v2, block);
  }
  else {
    dispatch_sync(v2, block);
  }
  uint64_t v4 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v4;
}

uint64_t ___ZN19ARITransportService12enableBypassEb_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(unsigned char *)(v2 + 152) = *(unsigned char *)(a1 + 48);
  int v3 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v4 = *(NSObject **)(v2 + 40);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Bypass enable", buf, 2u);
    }
    uint64_t result = AriHostRt::Shutdown((AriHostRt *)v5);
  }
  else
  {
    if (v5)
    {
      *(_WORD *)char v7 = 0;
      _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Bypass disable", v7, 2u);
    }
    uint64_t result = AriHostRt::Init((AriHostRt *)"ABMRT/PCIe/ARI", (const char *)1);
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result == 0;
  return result;
}

uint64_t non-virtual thunk to'ARITransportService::enableBypass(ARITransportService *this, char a2)
{
  return ARITransportService::enableBypass((ARITransportService *)((char *)this - 104), a2);
}

void ARITransportService::registerForWakeReason(uint64_t a1, uint64_t a2)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN19ARITransportService21registerForWakeReasonEN8dispatch8callbackIU13block_pointerFv10WakeReasonEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_36_2;
  v7[4] = a1;
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v4 = _Block_copy(v4);
  }
  BOOL v5 = (uint64_t *)(a1 + 72);
  int v6 = *(NSObject **)(a2 + 8);
  aBlocunint64_t k = v4;
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  ctu::SharedSynchronizable<ARITransportService>::execute_wrapped(v5, (uint64_t)v7);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void ___ZN19ARITransportService21registerForWakeReasonEN8dispatch8callbackIU13block_pointerFv10WakeReasonEEE_block_invoke(void *a1)
{
  uint64_t v3 = a1[4];
  uint64_t v2 = (void *)a1[5];
  if (v2) {
    uint64_t v2 = _Block_copy(v2);
  }
  uint64_t v4 = *(const void **)(v3 + 160);
  *(void *)(v3 + 160) = v2;
  if (v4) {
    _Block_release(v4);
  }
  BOOL v5 = a1[6];
  if (v5) {
    dispatch_retain(v5);
  }
  int v6 = *(NSObject **)(v3 + 168);
  *(void *)(v3 + 168) = v5;
  if (v6)
  {
    dispatch_release(v6);
  }
}

void __copy_helper_block_e8_40c57_ZTSN8dispatch8callbackIU13block_pointerFv10WakeReasonEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 40);
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  BOOL v5 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  if (v5)
  {
    dispatch_retain(v5);
  }
}

void __destroy_helper_block_e8_40c57_ZTSN8dispatch8callbackIU13block_pointerFv10WakeReasonEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

void non-virtual thunk to'ARITransportService::registerForWakeReason(uint64_t a1, uint64_t a2)
{
}

void ARITransportService::getWakeReason_sync(ARITransportService *this, int a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v3 || (uint64_t v5 = *((void *)this + 9), (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  char v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v8 = *((void *)this + 5);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  uint64_t v8 = *((void *)this + 5);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
LABEL_5:
    --a2;
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_log_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_DEFAULT, "#I Sending request to get wake reason. Remaining-attempts=%u", buf, 8u);
  }
LABEL_6:
  unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v30 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  char v9 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v10 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)buf, v9);
    long long v11 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    uint64_t v12 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v11;
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v13 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    uint64_t v10 = off_1EBBDCA08;
  }
  size_t v14 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  uint64_t v25 = v10;
  uint64_t v26 = *(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v10 + 16))(&v27, v10);
  unint64_t v29 = 0;
  unint64_t v30 = 0;
  if (v28)
  {
    unint64_t v30 = std::__shared_weak_count::lock(v28);
    if (v30) {
      unint64_t v29 = v27;
    }
    if (v28) {
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    unint64_t v15 = v29;
    if (v29)
    {
LABEL_24:
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 1174405120;
      v20[2] = ___ZN19ARITransportService18getWakeReason_syncEj_block_invoke;
      v20[3] = &__block_descriptor_tmp_41_1;
      v20[4] = this;
      v20[5] = v5;
      size_t v21 = v7;
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      int v22 = a2;
      uint64_t v16 = _Block_copy(v20);
      uint64_t v17 = *((void *)this + 11);
      if (v17) {
        dispatch_retain(v17);
      }
      aBlocunint64_t k = v16;
      dispatch_object_t object = v17;
      (*(void (**)(unint64_t, void **))(*(void *)v15 + 136))(v15, &aBlock);
      if (object) {
        dispatch_release(object);
      }
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (v21)
      {
        std::__shared_weak_count::__release_weak(v21);
        uint64_t v18 = v30;
        if (!v30) {
          goto LABEL_40;
        }
        goto LABEL_38;
      }
LABEL_37:
      uint64_t v18 = v30;
      if (!v30) {
        goto LABEL_40;
      }
      goto LABEL_38;
    }
  }
  else
  {
    unint64_t v15 = v29;
    if (v29) {
      goto LABEL_24;
    }
  }
  uint64_t v19 = *((void *)this + 5);
  if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
    goto LABEL_37;
  }
  *(_WORD *)long long buf = 0;
  _os_log_error_impl(&dword_1C59C6000, v19, OS_LOG_TYPE_ERROR, "Failed to get radio command driver!", buf, 2u);
  uint64_t v18 = v30;
  if (!v30) {
    goto LABEL_40;
  }
LABEL_38:
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
LABEL_40:
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1C5ADF420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN19ARITransportService18getWakeReason_syncEj_block_invoke(uint64_t a1, void *a2, ctu **a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    uint64_t v46 = v8;
    if (v8)
    {
      if (!*(void *)(a1 + 40))
      {
        long long v11 = v8;
LABEL_85:
        if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        return;
      }
      xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
      xpc_object_t v10 = v9;
      if (v9)
      {
        xpc_object_t xdict = v9;
      }
      else
      {
        xpc_object_t v10 = xpc_null_create();
        xpc_object_t xdict = v10;
        if (!v10)
        {
          xpc_object_t v12 = xpc_null_create();
          xpc_object_t v10 = 0;
          goto LABEL_12;
        }
      }
      if (MEMORY[0x1C8795EB0](v10) == MEMORY[0x1E4F14590])
      {
        xpc_retain(v10);
        goto LABEL_13;
      }
      xpc_object_t v12 = xpc_null_create();
LABEL_12:
      xpc_object_t xdict = v12;
LABEL_13:
      xpc_release(v10);
      xpc_object_t v13 = xpc_string_create((const char *)*MEMORY[0x1E4F4C3A8]);
      if (!v13) {
        xpc_object_t v13 = xpc_null_create();
      }
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C408], v13);
      xpc_object_t v14 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v14);
      unint64_t v15 = (const char *)(v7 + 224);
      if (*(char *)(v7 + 247) < 0) {
        unint64_t v15 = *(const char **)v15;
      }
      xpc_object_t v16 = xpc_string_create(v15);
      if (!v16) {
        xpc_object_t v16 = xpc_null_create();
      }
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C5B0], v16);
      xpc_object_t v17 = xpc_null_create();
      xpc_release(v16);
      xpc_release(v17);
      xpc_object_t v18 = xpc_BOOL_create(*(unsigned char *)(v7 + 248));
      if (!v18) {
        xpc_object_t v18 = xpc_null_create();
      }
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4CF80], v18);
      xpc_object_t v19 = xpc_null_create();
      xpc_release(v18);
      xpc_release(v19);
      if (*a2) {
        size_t v21 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      }
      else {
        size_t v21 = 0;
      }
      if (v21
        || (*a3
          ? (unint64_t v29 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
          : (unint64_t v29 = 0),
            !v29))
      {
        int v22 = *(_DWORD *)(a1 + 56);
        if (v22)
        {
          uint64_t v23 = dispatch_source_create(MEMORY[0x1E4F14490], 1uLL, 0, *(dispatch_queue_t *)(v7 + 88));
          uint64_t v24 = *(NSObject **)(v7 + 176);
          *(void *)(v7 + 176) = v23;
          if (v24)
          {
            dispatch_release(v24);
            uint64_t v23 = *(NSObject **)(v7 + 176);
          }
          if (v23)
          {
            dispatch_time_t v25 = dispatch_time(0, 1000000000);
            dispatch_source_set_timer(v23, v25, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
            uint64_t v26 = *(NSObject **)(v7 + 176);
            handler[0] = MEMORY[0x1E4F143A8];
            handler[1] = 1174405120;
            handler[2] = ___ZN19ARITransportService18getWakeReason_syncEj_block_invoke_2;
            handler[3] = &__block_descriptor_tmp_37_2;
            uint64_t v28 = *(void *)(a1 + 40);
            unint64_t v27 = *(std::__shared_weak_count **)(a1 + 48);
            handler[4] = v7;
            handler[5] = v28;
            long long v41 = v27;
            if (v27) {
              atomic_fetch_add_explicit(&v27->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            }
            int v42 = *(_DWORD *)(a1 + 56);
            dispatch_source_set_event_handler(v26, handler);
            dispatch_activate(*(dispatch_object_t *)(v7 + 176));
            if (v41) {
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          goto LABEL_84;
        }
      }
      else
      {
        if (*(void *)(v7 + 160) && *(void *)(v7 + 168))
        {
          ctu::cf_to_xpc((uint64_t *)&object, *a3, v20);
          xpc_object_t v30 = object;
          if (object && MEMORY[0x1C8795EB0](object) == MEMORY[0x1E4F14590]) {
            xpc_retain(v30);
          }
          else {
            xpc_object_t v30 = xpc_null_create();
          }
          xpc_release(object);
          xpc_object_t v43 = v30;
          if (v30) {
            xpc_retain(v30);
          }
          else {
            xpc_object_t v43 = xpc_null_create();
          }
          abm::ParseWakeDataIce(&v43, &xdict);
          xpc_release(v43);
          xpc_object_t v43 = 0;
          xpc_release(v30);
        }
        int v22 = 1;
      }
      if (*(void *)(v7 + 160) && *(void *)(v7 + 168))
      {
        if (*(char *)(v7 + 247) < 0)
        {
          if (((*(void *)(v7 + 232) == 0) & ~v22) == 0) {
            goto LABEL_52;
          }
        }
        else if (((*(unsigned char *)(v7 + 247) == 0) & ~v22) == 0)
        {
LABEL_52:
          xpc_object_t v31 = xdict;
          if (xdict) {
            xpc_retain(xdict);
          }
          else {
            xpc_object_t v31 = xpc_null_create();
          }
          int v34 = *(const void **)(v7 + 160);
          if (v34) {
            uint64_t v35 = _Block_copy(v34);
          }
          else {
            uint64_t v35 = 0;
          }
          uint64_t v38 = *(NSObject **)(v7 + 168);
          xpc_object_t object = (xpc_object_t)MEMORY[0x1E4F143A8];
          uint64_t v48 = 1174405120;
          uint64_t v49 = ___ZNK8dispatch8callbackIU13block_pointerFv10WakeReasonEEclIJS1_EEEvDpT__block_invoke;
          uint64_t v50 = &__block_descriptor_tmp_96_2;
          if (v35) {
            uint64_t v39 = _Block_copy(v35);
          }
          else {
            uint64_t v39 = 0;
          }
          aBlocunint64_t k = v39;
          int v52 = 3;
          xpc_object_t v53 = v31;
          if (v31) {
            xpc_retain(v31);
          }
          else {
            xpc_object_t v53 = xpc_null_create();
          }
          dispatch_async(v38, &object);
          xpc_release(v53);
          xpc_object_t v53 = 0;
          if (aBlock) {
            _Block_release(aBlock);
          }
          if (v35) {
            _Block_release(v35);
          }
LABEL_83:
          xpc_release(v31);
          goto LABEL_84;
        }
        xpc_object_t v31 = xpc_null_create();
        uint64_t v32 = *(const void **)(v7 + 160);
        if (v32) {
          __int16 v33 = _Block_copy(v32);
        }
        else {
          __int16 v33 = 0;
        }
        uint64_t v36 = *(NSObject **)(v7 + 168);
        xpc_object_t object = (xpc_object_t)MEMORY[0x1E4F143A8];
        uint64_t v48 = 1174405120;
        uint64_t v49 = ___ZNK8dispatch8callbackIU13block_pointerFv10WakeReasonEEclIJS1_EEEvDpT__block_invoke;
        uint64_t v50 = &__block_descriptor_tmp_96_2;
        if (v33) {
          uint64_t v37 = _Block_copy(v33);
        }
        else {
          uint64_t v37 = 0;
        }
        aBlocunint64_t k = v37;
        int v52 = 4;
        xpc_object_t v53 = v31;
        if (v31) {
          xpc_retain(v31);
        }
        else {
          xpc_object_t v53 = xpc_null_create();
        }
        dispatch_async(v36, &object);
        xpc_release(v53);
        xpc_object_t v53 = 0;
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v33) {
          _Block_release(v33);
        }
        goto LABEL_83;
      }
LABEL_84:
      xpc_release(xdict);
      long long v11 = v46;
      if (!v46) {
        return;
      }
      goto LABEL_85;
    }
  }
}

void sub_1C5ADFACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, xpc_object_t object, xpc_object_t a19, char a20)
{
  xpc_release(object);
  xpc_release(v20);
  xpc_release(a19);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void ___ZN19ARITransportService18getWakeReason_syncEj_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = *(dispatch_source_t **)(a1 + 32);
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (*(void *)(a1 + 40))
      {
        dispatch_source_cancel(v3[22]);
        int v6 = v3[22];
        v3[22] = 0;
        if (v6) {
          dispatch_release(v6);
        }
        ARITransportService::getWakeReason_sync((ARITransportService *)v3, *(_DWORD *)(a1 + 56));
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1C5ADFC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t __copy_helper_block_e8_40c44_ZTSNSt3__18weak_ptrI19ARITransportServiceEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c44_ZTSNSt3__18weak_ptrI19ARITransportServiceEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t ARITransportService::shouldTeardownOnWillReset(ARITransportService *this)
{
  if (capabilities::coredump::supportsSPMISignalling(this)) {
    return 1;
  }

  return MEMORY[0x1F417D720]();
}

uint64_t non-virtual thunk to'ARITransportService::shouldTeardownOnWillReset(ARITransportService *this)
{
  if (capabilities::coredump::supportsSPMISignalling(this)) {
    return 1;
  }

  return MEMORY[0x1F417D720]();
}

uint64_t ctu::Loggable<ARITransportService,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

void ctu::Loggable<ARITransportService,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "ipc.svc.ari");
}

uint64_t ctu::Loggable<ARITransportService,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<ARITransportService,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F210AA48;
  MEMORY[0x1C87940C0](a1 + 1);
  return a1;
}

void ctu::Loggable<ARITransportService,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F210AA48;
  MEMORY[0x1C87940C0](a1 + 1);

  operator delete(a1);
}

void std::__shared_ptr_emplace<ARITransportService>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210AA88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ARITransportService>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210AA88;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<ARITransportService>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void ctu::SharedLoggable<ARITransportService,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F210AA48;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void *___ZNK3ctu20SharedSynchronizableI19ARITransportServiceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void *_ZNSt3__110__function6__funcIZZN19ARITransportService4initEvEUb_E3__0NS_9allocatorIS3_EEFvN9AriHostRt20ARI_CLIENT_ERROR_EVTENS_12basic_stringIcNS_11char_traitsIcEENS4_IcEEEEijEED1Ev(void *a1)
{
  *a1 = &unk_1F210AB18;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZZN19ARITransportService4initEvEUb_E3__0NS_9allocatorIS3_EEFvN9AriHostRt20ARI_CLIENT_ERROR_EVTENS_12basic_stringIcNS_11char_traitsIcEENS4_IcEEEEijEED0Ev(void *__p)
{
  void *__p = &unk_1F210AB18;
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void *_ZNKSt3__110__function6__funcIZZN19ARITransportService4initEvEUb_E3__0NS_9allocatorIS3_EEFvN9AriHostRt20ARI_CLIENT_ERROR_EVTENS_12basic_stringIcNS_11char_traitsIcEENS4_IcEEEEijEE7__cloneEv(void *a1)
{
  uint64_t result = operator new(0x20uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  void *result = &unk_1F210AB18;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  result[3] = a1[3];
  return result;
}

void *_ZNKSt3__110__function6__funcIZZN19ARITransportService4initEvEUb_E3__0NS_9allocatorIS3_EEFvN9AriHostRt20ARI_CLIENT_ERROR_EVTENS_12basic_stringIcNS_11char_traitsIcEENS4_IcEEEEijEE7__cloneEPNS0_6__baseISD_EE(void *result, void *a2)
{
  uint64_t v3 = result[1];
  uint64_t v2 = result[2];
  *a2 = &unk_1F210AB18;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  a2[3] = result[3];
  return result;
}

void _ZNSt3__110__function6__funcIZZN19ARITransportService4initEvEUb_E3__0NS_9allocatorIS3_EEFvN9AriHostRt20ARI_CLIENT_ERROR_EVTENS_12basic_stringIcNS_11char_traitsIcEENS4_IcEEEEijEE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZNSt3__110__function6__funcIZZN19ARITransportService4initEvEUb_E3__0NS_9allocatorIS3_EEFvN9AriHostRt20ARI_CLIENT_ERROR_EVTENS_12basic_stringIcNS_11char_traitsIcEENS4_IcEEEEijEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZZN19ARITransportService4initEvEUb_E3__0NS_9allocatorIS3_EEFvN9AriHostRt20ARI_CLIENT_ERROR_EVTENS_12basic_stringIcNS_11char_traitsIcEENS4_IcEEEEijEEclEOS7_OSC_OiOj(void *a1, int *a2, uint64_t a3, int *a4, unsigned int *a5)
{
  uint64_t v193 = *MEMORY[0x1E4F143B8];
  int v6 = *a2;
  *(_OWORD *)int v168 = *(_OWORD *)a3;
  uint64_t v169 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  uint64_t v7 = (std::__shared_weak_count *)a1[2];
  if (!v7 || (int v8 = *a4, v9 = (Ari *)*a5, v10 = a1[3], (v11 = std::__shared_weak_count::lock(v7)) == 0))
  {
LABEL_290:
    if ((SHIBYTE(v169) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_291;
  }
  xpc_object_t v12 = v11;
  if (a1[1])
  {
    unint64_t v187 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v186[7] = v13;
    v186[8] = v13;
    v186[5] = v13;
    v186[6] = v13;
    v186[3] = v13;
    v186[4] = v13;
    v186[1] = v13;
    v186[2] = v13;
    long long v185 = v13;
    v186[0] = v13;
    *(_OWORD *)v183 = v13;
    long long v184 = v13;
    long long v181 = v13;
    long long v182 = v13;
    long long v179 = v13;
    long long v180 = v13;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v179);
    uint64_t v14 = v179;
    *(_DWORD *)((char *)&v179 + *(void *)(v179 - 24) + 8) |= 0x200u;
    *(_DWORD *)((char *)&v179 + *(void *)(v14 - 24) + 8) = *(_DWORD *)((unsigned char *)&v179 + *(void *)(v14 - 24) + 8) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    memset(&__p, 0, sizeof(__p));
    if (v6 != 1)
    {
      if (v6 != 2)
      {
        if (v6 == 3)
        {
          if (v169 >= 0) {
            size_t v15 = HIBYTE(v169);
          }
          else {
            size_t v15 = (size_t)v168[1];
          }
          unint64_t v16 = v15 + 14;
          memset(&buf, 170, sizeof(buf));
          if (v15 + 14 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          if (v16 >= 0x17)
          {
            uint64_t v47 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v16 | 7) != 0x17) {
              uint64_t v47 = v16 | 7;
            }
            uint64_t v48 = v47 + 1;
            uint64_t v49 = (char *)operator new(v47 + 1);
            buf.__r_.__value_.__l.__size_ = v15 + 14;
            buf.__r_.__value_.__r.__words[2] = v48 | 0x8000000000000000;
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
            qmemcpy(v49, "ARI_CLI_ERR - ", 14);
            xpc_object_t v17 = v49 + 14;
          }
          else
          {
            buf.__r_.__value_.__s.__data_[15] = 0;
            buf.__r_.__value_.__r.__words[2] = 0;
            *((unsigned char *)&buf.__r_.__value_.__s + 23) = v15 + 14;
            strcpy((char *)&buf, "ARI_CLI_ERR - ");
            xpc_object_t v17 = &buf.__r_.__value_.__s.__data_[14];
            if (!v15) {
              goto LABEL_52;
            }
          }
          if (v169 >= 0) {
            uint64_t v50 = v168;
          }
          else {
            uint64_t v50 = (void **)v168[0];
          }
          memmove(v17, v50, v15);
LABEL_52:
          char v44 = 0;
          v17[v15] = 0;
          std::string __p = buf;
          uint64_t v45 = *(NSObject **)(v10 + 40);
          if (!os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
            goto LABEL_243;
          }
          goto LABEL_42;
        }
        uint64_t v36 = (const char *)asString();
        size_t v37 = strlen(v36);
        if (v37 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        std::string::size_type v38 = v37;
        if (v37 >= 0x17)
        {
          uint64_t v51 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v37 | 7) != 0x17) {
            uint64_t v51 = v37 | 7;
          }
          uint64_t v52 = v51 + 1;
          p_dst = (std::string *)operator new(v51 + 1);
          __dst.__r_.__value_.__l.__size_ = v38;
          __dst.__r_.__value_.__r.__words[2] = v52 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        }
        else
        {
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v37;
          p_dst = &__dst;
          if (!v37)
          {
LABEL_58:
            p_dst->__r_.__value_.__s.__data_[v38] = 0;
            xpc_object_t v53 = std::string::append(&__dst, " - ", 3uLL);
            long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
            buf.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
            *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v54;
            v53->__r_.__value_.__l.__size_ = 0;
            v53->__r_.__value_.__r.__words[2] = 0;
            v53->__r_.__value_.__r.__words[0] = 0;
            if (v169 >= 0) {
              uint64_t v55 = v168;
            }
            else {
              uint64_t v55 = (void **)v168[0];
            }
            if (v169 >= 0) {
              std::string::size_type v56 = HIBYTE(v169);
            }
            else {
              std::string::size_type v56 = (std::string::size_type)v168[1];
            }
            unint64_t v57 = std::string::append(&buf, (const std::string::value_type *)v55, v56);
            std::string::size_type v58 = v57->__r_.__value_.__r.__words[0];
            v190.__r_.__value_.__r.__words[0] = v57->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v190.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v57->__r_.__value_.__r.__words[1] + 7);
            char v59 = HIBYTE(v57->__r_.__value_.__r.__words[2]);
            v57->__r_.__value_.__l.__size_ = 0;
            v57->__r_.__value_.__r.__words[2] = 0;
            v57->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            __p.__r_.__value_.__r.__words[0] = v58;
            __p.__r_.__value_.__l.__size_ = v190.__r_.__value_.__r.__words[0];
            *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v190.__r_.__value_.__r.__words + 7);
            *((unsigned char *)&__p.__r_.__value_.__s + 23) = v59;
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(buf.__r_.__value_.__l.__data_);
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_68:
                if (!v9)
                {
LABEL_84:
                  if (!v8) {
                    goto LABEL_242;
                  }
LABEL_85:
                  if ((BYTE8(v185) & 0x10) != 0)
                  {
                    uint64_t v72 = v185;
                    if ((unint64_t)v185 < *((void *)&v182 + 1))
                    {
                      *(void *)&long long v185 = *((void *)&v182 + 1);
                      uint64_t v72 = *((void *)&v182 + 1);
                    }
                    uint64_t v73 = (const void **)&v182;
                  }
                  else
                  {
                    if ((BYTE8(v185) & 8) == 0)
                    {
                      std::string::size_type v70 = 0;
                      *((unsigned char *)&v190.__r_.__value_.__s + 23) = 0;
                      BOOL v71 = &v190;
                      goto LABEL_142;
                    }
                    uint64_t v73 = (const void **)&v180 + 1;
                    uint64_t v72 = *((void *)&v181 + 1);
                  }
                  int v88 = *v73;
                  std::string::size_type v70 = v72 - (void)*v73;
                  if (v70 > 0x7FFFFFFFFFFFFFF7) {
                    std::string::__throw_length_error[abi:ne180100]();
                  }
                  if (v70 >= 0x17)
                  {
                    uint64_t v89 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v70 | 7) != 0x17) {
                      uint64_t v89 = v70 | 7;
                    }
                    uint64_t v90 = v89 + 1;
                    BOOL v71 = operator new(v89 + 1);
                    v190.__r_.__value_.__l.__size_ = v70;
                    v190.__r_.__value_.__r.__words[2] = v90 | 0x8000000000000000;
                    v190.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
                  }
                  else
                  {
                    *((unsigned char *)&v190.__r_.__value_.__s + 23) = v72 - *(unsigned char *)v73;
                    BOOL v71 = &v190;
                    if (!v70)
                    {
LABEL_142:
                      v71[v70] = 0;
                      uint64_t v91 = std::string::insert(&v190, 0, "(contextId ", 0xDuLL);
                      long long v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
                      __dst.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v92;
                      v91->__r_.__value_.__l.__size_ = 0;
                      v91->__r_.__value_.__r.__words[2] = 0;
                      v91->__r_.__value_.__r.__words[0] = 0;
                      size_t v93 = std::string::append(&__dst, ")", 2uLL);
                      long long v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
                      buf.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v94;
                      v93->__r_.__value_.__l.__size_ = 0;
                      v93->__r_.__value_.__r.__words[2] = 0;
                      v93->__r_.__value_.__r.__words[0] = 0;
                      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        p_std::string buf = &buf;
                      }
                      else {
                        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
                      }
                      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
                      }
                      else {
                        std::string::size_type size = buf.__r_.__value_.__l.__size_;
                      }
                      std::string::append(&__p, (const std::string::value_type *)p_buf, size);
                      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                      {
                        operator delete(buf.__r_.__value_.__l.__data_);
                        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        {
LABEL_150:
                          if ((SHIBYTE(v190.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                            goto LABEL_242;
                          }
LABEL_154:
                          operator delete(v190.__r_.__value_.__l.__data_);
                          goto LABEL_242;
                        }
                      }
                      else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
                        goto LABEL_150;
                      }
                      operator delete(__dst.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v190.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                        goto LABEL_242;
                      }
                      goto LABEL_154;
                    }
                  }
                  memmove(v71, v88, v70);
                  goto LABEL_142;
                }
LABEL_75:
                *((unsigned char *)&v190.__r_.__value_.__s + 23) = 11;
                strcpy((char *)&v190, "(message ");
                unint64_t v62 = (const char *)Ari::MsgNameById(v9);
                size_t v63 = strlen(v62);
                unint64_t v64 = std::string::append(&v190, v62, v63);
                long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
                __dst.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v65;
                v64->__r_.__value_.__l.__size_ = 0;
                v64->__r_.__value_.__r.__words[2] = 0;
                v64->__r_.__value_.__r.__words[0] = 0;
                size_t v66 = std::string::append(&__dst, ")", 2uLL);
                long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
                buf.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
                *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v67;
                v66->__r_.__value_.__l.__size_ = 0;
                v66->__r_.__value_.__r.__words[2] = 0;
                v66->__r_.__value_.__r.__words[0] = 0;
                if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v68 = &buf;
                }
                else {
                  uint64_t v68 = (std::string *)buf.__r_.__value_.__r.__words[0];
                }
                if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v69 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v69 = buf.__r_.__value_.__l.__size_;
                }
                std::string::append(&__p, (const std::string::value_type *)v68, v69);
                if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(buf.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_83:
                    if ((SHIBYTE(v190.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                      goto LABEL_84;
                    }
LABEL_127:
                    operator delete(v190.__r_.__value_.__l.__data_);
                    if (v8) {
                      goto LABEL_85;
                    }
LABEL_242:
                    char v44 = 0;
                    uint64_t v45 = *(NSObject **)(v10 + 40);
                    if (!os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
                      goto LABEL_243;
                    }
                    goto LABEL_42;
                  }
                }
                else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
                  goto LABEL_83;
                }
                operator delete(__dst.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v190.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_84;
                }
                goto LABEL_127;
              }
            }
            else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_68;
            }
            operator delete(__dst.__r_.__value_.__l.__data_);
            if (!v9) {
              goto LABEL_84;
            }
            goto LABEL_75;
          }
        }
        memmove(p_dst, v36, v38);
        goto LABEL_58;
      }
      int v18 = SHIBYTE(v169);
      if (v169 >= 0) {
        size_t v19 = HIBYTE(v169);
      }
      else {
        size_t v19 = (size_t)v168[1];
      }
      unint64_t v20 = v19 + 17;
      memset(&buf, 170, sizeof(buf));
      if (v19 + 17 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v20 >= 0x17)
      {
        uint64_t v40 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v20 | 7) != 0x17) {
          uint64_t v40 = v20 | 7;
        }
        uint64_t v41 = v40 + 1;
        int v42 = (char *)operator new(v40 + 1);
        buf.__r_.__value_.__l.__size_ = v19 + 17;
        buf.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
        v42[16] = 32;
        *(_OWORD *)int v42 = *(_OWORD *)"ARI_NO_CLI_ACK - ";
        size_t v21 = v42 + 17;
      }
      else
      {
        buf.__r_.__value_.__r.__words[2] = 32;
        *((unsigned char *)&buf.__r_.__value_.__s + 23) = v19 + 17;
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = *(_OWORD *)"ARI_NO_CLI_ACK - ";
        size_t v21 = &buf.__r_.__value_.__s.__data_[17];
        if (!v19) {
          goto LABEL_41;
        }
      }
      if (v18 >= 0) {
        xpc_object_t v43 = v168;
      }
      else {
        xpc_object_t v43 = (void **)v168[0];
      }
      memmove(v21, v43, v19);
LABEL_41:
      v21[v19] = 0;
      std::string __p = buf;
      char v44 = 1;
      uint64_t v45 = *(NSObject **)(v10 + 40);
      if (!os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
        goto LABEL_243;
      }
LABEL_42:
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
      _os_log_error_impl(&dword_1C59C6000, v45, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
LABEL_243:
      if (*(unsigned char *)(v10 + 153)) {
        char v139 = v44;
      }
      else {
        char v139 = 1;
      }
      if ((v139 & 1) != 0
        || (size_t v140 = *(std::__shared_weak_count **)(v10 + 216)) == 0
        || (size_t v141 = std::__shared_weak_count::lock(v140)) == 0)
      {
LABEL_284:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        *(void *)&long long v179 = *MEMORY[0x1E4FBA418];
        *(void *)((char *)&v179 + *(void *)(v179 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
        *((void *)&v179 + 1) = MEMORY[0x1E4FBA470] + 16;
        if (SHIBYTE(v184) < 0) {
          operator delete(v183[1]);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1C8795140](v186);
        goto LABEL_289;
      }
      int v142 = v141;
      uint64_t v143 = *(void *)(v10 + 208);
      if (!v143)
      {
LABEL_282:
        if (!atomic_fetch_add(&v142->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
          std::__shared_weak_count::__release_weak(v142);
        }
        goto LABEL_284;
      }
      xpc_object_t v144 = xpc_dictionary_create(0, 0, 0);
      if (v144 || (xpc_object_t v144 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C8795EB0](v144) == MEMORY[0x1E4F14590])
        {
          xpc_retain(v144);
          xpc_object_t v145 = v144;
        }
        else
        {
          xpc_object_t v145 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v145 = xpc_null_create();
        xpc_object_t v144 = 0;
      }
      xpc_release(v144);
      xpc_object_t v147 = xpc_string_create((const char *)*MEMORY[0x1E4F4C6E8]);
      if (!v147) {
        xpc_object_t v147 = xpc_null_create();
      }
      xpc_dictionary_set_value(v145, (const char *)*MEMORY[0x1E4F4C690], v147);
      xpc_object_t v148 = xpc_null_create();
      xpc_release(v147);
      xpc_release(v148);
      xpc_object_t v149 = xpc_string_create((const char *)*MEMORY[0x1E4F4D1A0]);
      if (!v149) {
        xpc_object_t v149 = xpc_null_create();
      }
      xpc_dictionary_set_value(v145, (const char *)*MEMORY[0x1E4F4CA38], v149);
      xpc_object_t v150 = xpc_null_create();
      xpc_release(v149);
      xpc_release(v150);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v151 = &__p;
      }
      else {
        size_t v151 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      xpc_object_t v152 = xpc_string_create((const char *)v151);
      if (!v152) {
        xpc_object_t v152 = xpc_null_create();
      }
      xpc_dictionary_set_value(v145, (const char *)*MEMORY[0x1E4F4C8F0], v152);
      xpc_object_t v153 = xpc_null_create();
      xpc_release(v152);
      xpc_release(v153);
      int64_t v154 = (const void *)*MEMORY[0x1E4F4C638];
      size_t v155 = strlen((const char *)*MEMORY[0x1E4F4C638]);
      if (v155 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      std::string::size_type v156 = v155;
      if (v155 >= 0x17)
      {
        uint64_t v158 = (v155 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v155 | 7) != 0x17) {
          uint64_t v158 = v155 | 7;
        }
        uint64_t v159 = v158 + 1;
        uint64_t v157 = (std::string *)operator new(v158 + 1);
        buf.__r_.__value_.__l.__size_ = v156;
        buf.__r_.__value_.__r.__words[2] = v159 | 0x8000000000000000;
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v157;
      }
      else
      {
        *((unsigned char *)&buf.__r_.__value_.__s + 23) = v155;
        uint64_t v157 = &buf;
        if (!v155) {
          goto LABEL_276;
        }
      }
      memmove(v157, v154, v156);
LABEL_276:
      v157->__r_.__value_.__s.__data_[v156] = 0;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v145;
      if (v145) {
        xpc_retain(v145);
      }
      else {
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      }
      v175.__r_.__value_.__r.__words[0] = 0;
      Service::runCommand(v143, (uint64_t)&buf, (xpc_object_t *)&__dst.__r_.__value_.__l.__data_, (const void **)&v175.__r_.__value_.__l.__data_);
      xpc_release(__dst.__r_.__value_.__l.__data_);
      __dst.__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      xpc_release(v145);
      goto LABEL_282;
    }
    *((unsigned char *)&v175.__r_.__value_.__s + 23) = 14;
    strcpy((char *)&v175, "ARI_TIMEOUT - ");
    int v22 = (const char *)Ari::MsgNameById(v9);
    size_t v23 = strlen(v22);
    uint64_t v24 = std::string::append(&v175, v22, v23);
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v176.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v176.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    uint64_t v26 = std::string::append(&v176, ", client ", 9uLL);
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v177.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v177.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    if (v169 >= 0) {
      uint64_t v28 = v168;
    }
    else {
      uint64_t v28 = (void **)v168[0];
    }
    if (v169 >= 0) {
      std::string::size_type v29 = HIBYTE(v169);
    }
    else {
      std::string::size_type v29 = (std::string::size_type)v168[1];
    }
    xpc_object_t v30 = std::string::append(&v177, (const std::string::value_type *)v28, v29);
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v190.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v190.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    uint64_t v32 = std::string::append(&v190, "(contextId ", 0xDuLL);
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    if ((BYTE8(v185) & 0x10) != 0)
    {
      uint64_t v60 = v185;
      if ((unint64_t)v185 < *((void *)&v182 + 1))
      {
        *(void *)&long long v185 = *((void *)&v182 + 1);
        uint64_t v60 = *((void *)&v182 + 1);
      }
      uint64_t v61 = (const void **)&v182;
    }
    else
    {
      if ((BYTE8(v185) & 8) == 0)
      {
        size_t v34 = 0;
        HIBYTE(v174) = 0;
        uint64_t v35 = &v172;
        goto LABEL_100;
      }
      uint64_t v61 = (const void **)&v180 + 1;
      uint64_t v60 = *((void *)&v181 + 1);
    }
    uint64_t v74 = *v61;
    size_t v34 = v60 - (void)*v61;
    if (v34 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v34 >= 0x17)
    {
      uint64_t v75 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v34 | 7) != 0x17) {
        uint64_t v75 = v34 | 7;
      }
      uint64_t v76 = v75 + 1;
      uint64_t v35 = operator new(v75 + 1);
      size_t v173 = v34;
      int64_t v174 = v76 | 0x8000000000000000;
      v172 = v35;
    }
    else
    {
      HIBYTE(v174) = v60 - *(unsigned char *)v61;
      uint64_t v35 = &v172;
      if (!v34)
      {
LABEL_100:
        *((unsigned char *)v35 + v34) = 0;
        if (v174 >= 0) {
          char v77 = (const std::string::value_type *)&v172;
        }
        else {
          char v77 = (const std::string::value_type *)v172;
        }
        if (v174 >= 0) {
          std::string::size_type v78 = HIBYTE(v174);
        }
        else {
          std::string::size_type v78 = v173;
        }
        unint64_t v79 = std::string::append(&__dst, v77, v78);
        long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
        buf.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v80;
        v79->__r_.__value_.__l.__size_ = 0;
        v79->__r_.__value_.__r.__words[2] = 0;
        v79->__r_.__value_.__r.__words[0] = 0;
        size_t v81 = std::string::append(&buf, ")", 2uLL);
        std::string::size_type v82 = v81->__r_.__value_.__r.__words[0];
        *(void *)&long long v188 = v81->__r_.__value_.__l.__size_;
        *(void *)((char *)&v188 + 7) = *(std::string::size_type *)((char *)&v81->__r_.__value_.__r.__words[1] + 7);
        char v83 = HIBYTE(v81->__r_.__value_.__r.__words[2]);
        v81->__r_.__value_.__l.__size_ = 0;
        v81->__r_.__value_.__r.__words[2] = 0;
        v81->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __p.__r_.__value_.__r.__words[0] = v82;
        __p.__r_.__value_.__l.__size_ = v188;
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v188 + 7);
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = v83;
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(buf.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v174) & 0x80000000) == 0)
          {
LABEL_110:
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_111;
            }
            goto LABEL_120;
          }
        }
        else if ((SHIBYTE(v174) & 0x80000000) == 0)
        {
          goto LABEL_110;
        }
        operator delete(v172);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_111:
          if ((SHIBYTE(v190.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_112;
          }
          goto LABEL_121;
        }
LABEL_120:
        operator delete(__dst.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v190.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_112:
          if ((SHIBYTE(v177.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_113;
          }
          goto LABEL_122;
        }
LABEL_121:
        operator delete(v190.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v177.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_113:
          if ((SHIBYTE(v176.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_114;
          }
          goto LABEL_123;
        }
LABEL_122:
        operator delete(v177.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v176.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_114:
          if ((SHIBYTE(v175.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_115;
          }
LABEL_124:
          operator delete(v175.__r_.__value_.__l.__data_);
LABEL_115:
          capabilities::coredump::recoveryForControlMessageTimeout((capabilities::coredump *)v81);
          uint64_t v84 = (capabilities::coredump *)capabilities::coredump::operator&();
          if (!v84) {
            goto LABEL_241;
          }
          xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
          xpc_object_t v85 = xpc_dictionary_create(0, 0, 0);
          xpc_object_t v86 = v85;
          if (v85)
          {
            xpc_object_t xdict = v85;
          }
          else
          {
            xpc_object_t v86 = xpc_null_create();
            xpc_object_t xdict = v86;
            if (!v86)
            {
              xpc_object_t v87 = xpc_null_create();
              xpc_object_t v86 = 0;
              goto LABEL_156;
            }
          }
          if (MEMORY[0x1C8795EB0](v86) == MEMORY[0x1E4F14590])
          {
            xpc_retain(v86);
            goto LABEL_157;
          }
          xpc_object_t v87 = xpc_null_create();
LABEL_156:
          xpc_object_t xdict = v87;
LABEL_157:
          xpc_release(v86);
          uint64_t v97 = MEMORY[0x1C8795EB0](xdict);
          uint64_t v98 = MEMORY[0x1E4F14590];
          if (v97 != MEMORY[0x1E4F14590])
          {
            unint64_t v99 = *(NSObject **)(v10 + 40);
            if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
            {
              LOWORD(buf.__r_.__value_.__l.__data_) = 0;
              _os_log_error_impl(&dword_1C59C6000, v99, OS_LOG_TYPE_ERROR, "Failed to create an input dictionary", (uint8_t *)&buf, 2u);
            }
            goto LABEL_240;
          }
          memset(&buf, 170, sizeof(buf));
          Timestamp::Timestamp((Timestamp *)&buf);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v100 = &__p;
          }
          else {
            unint64_t v100 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          xpc_object_t v101 = xpc_string_create((const char *)v100);
          if (!v101) {
            xpc_object_t v101 = xpc_null_create();
          }
          xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F47160], v101);
          xpc_object_t v102 = xpc_null_create();
          xpc_release(v101);
          xpc_release(v102);
          std::string::size_type v103 = *MEMORY[0x1E4F470A8];
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&xdict;
          __dst.__r_.__value_.__l.__size_ = v103;
          xpc::dict::object_proxy::operator=((uint64_t)&__dst, &object);
          xpc_release(object);
          xpc_object_t object = 0;
          size_t v104 = (const void *)*MEMORY[0x1E4F4F928];
          size_t v105 = strlen((const char *)*MEMORY[0x1E4F4F928]);
          if (v105 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          std::string::size_type v106 = v105;
          if (v105 >= 0x17)
          {
            uint64_t v108 = (v105 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v105 | 7) != 0x17) {
              uint64_t v108 = v105 | 7;
            }
            uint64_t v109 = v108 + 1;
            uint64_t v107 = operator new(v108 + 1);
            v176.__r_.__value_.__l.__size_ = v106;
            v176.__r_.__value_.__r.__words[2] = v109 | 0x8000000000000000;
            v176.__r_.__value_.__r.__words[0] = (std::string::size_type)v107;
          }
          else
          {
            *((unsigned char *)&v176.__r_.__value_.__s + 23) = v105;
            uint64_t v107 = &v176;
            if (!v105)
            {
LABEL_173:
              v107[v106] = 0;
              size_t v110 = (const void *)*MEMORY[0x1E4F4F918];
              size_t v111 = strlen((const char *)*MEMORY[0x1E4F4F918]);
              if (v111 > 0x7FFFFFFFFFFFFFF7) {
                std::string::__throw_length_error[abi:ne180100]();
              }
              std::string::size_type v112 = v111;
              if (v111 >= 0x17)
              {
                uint64_t v114 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v111 | 7) != 0x17) {
                  uint64_t v114 = v111 | 7;
                }
                uint64_t v115 = v114 + 1;
                __n128 v113 = operator new(v114 + 1);
                v175.__r_.__value_.__l.__size_ = v112;
                v175.__r_.__value_.__r.__words[2] = v115 | 0x8000000000000000;
                v175.__r_.__value_.__r.__words[0] = (std::string::size_type)v113;
              }
              else
              {
                *((unsigned char *)&v175.__r_.__value_.__s + 23) = v111;
                __n128 v113 = &v175;
                if (!v111)
                {
LABEL_181:
                  v113[v112] = 0;
                  if ((v175.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    size_t v116 = &v175;
                  }
                  else {
                    size_t v116 = (std::string *)v175.__r_.__value_.__r.__words[0];
                  }
                  if ((v175.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type v117 = HIBYTE(v175.__r_.__value_.__r.__words[2]);
                  }
                  else {
                    std::string::size_type v117 = v175.__r_.__value_.__l.__size_;
                  }
                  int v118 = std::string::append(&v176, (const std::string::value_type *)v116, v117);
                  long long v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
                  v177.__r_.__value_.__r.__words[2] = v118->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v177.__r_.__value_.__l.__data_ = v119;
                  v118->__r_.__value_.__l.__size_ = 0;
                  v118->__r_.__value_.__r.__words[2] = 0;
                  v118->__r_.__value_.__r.__words[0] = 0;
                  Timestamp::asString((uint64_t)&buf, 0, 9, &v172);
                  if (v174 >= 0) {
                    int v120 = (const std::string::value_type *)&v172;
                  }
                  else {
                    int v120 = (const std::string::value_type *)v172;
                  }
                  if (v174 >= 0) {
                    std::string::size_type v121 = HIBYTE(v174);
                  }
                  else {
                    std::string::size_type v121 = v173;
                  }
                  size_t v122 = std::string::append(&v177, v120, v121);
                  long long v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
                  v190.__r_.__value_.__r.__words[2] = v122->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v190.__r_.__value_.__l.__data_ = v123;
                  v122->__r_.__value_.__l.__size_ = 0;
                  v122->__r_.__value_.__r.__words[2] = 0;
                  v122->__r_.__value_.__r.__words[0] = 0;
                  std::string v124 = (const void *)*MEMORY[0x1E4F4F908];
                  size_t v125 = strlen((const char *)*MEMORY[0x1E4F4F908]);
                  if (v125 > 0x7FFFFFFFFFFFFFF7) {
                    std::string::__throw_length_error[abi:ne180100]();
                  }
                  size_t v126 = v125;
                  if (v125 >= 0x17)
                  {
                    uint64_t v128 = (v125 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v125 | 7) != 0x17) {
                      uint64_t v128 = v125 | 7;
                    }
                    uint64_t v129 = v128 + 1;
                    size_t v127 = (long long *)operator new(v128 + 1);
                    *((void *)&v188 + 1) = v126;
                    int64_t v189 = v129 | 0x8000000000000000;
                    *(void *)&long long v188 = v127;
                  }
                  else
                  {
                    HIBYTE(v189) = v125;
                    size_t v127 = &v188;
                    if (!v125)
                    {
LABEL_201:
                      *((unsigned char *)v127 + v126) = 0;
                      if (v189 >= 0) {
                        long long v130 = (const std::string::value_type *)&v188;
                      }
                      else {
                        long long v130 = (const std::string::value_type *)v188;
                      }
                      if (v189 >= 0) {
                        std::string::size_type v131 = HIBYTE(v189);
                      }
                      else {
                        std::string::size_type v131 = *((void *)&v188 + 1);
                      }
                      unint64_t v132 = std::string::append(&v190, v130, v131);
                      long long v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
                      __dst.__r_.__value_.__r.__words[2] = v132->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v133;
                      v132->__r_.__value_.__l.__size_ = 0;
                      v132->__r_.__value_.__r.__words[2] = 0;
                      v132->__r_.__value_.__r.__words[0] = 0;
                      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        uint64_t v134 = &__dst;
                      }
                      else {
                        uint64_t v134 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                      }
                      xpc_object_t v135 = xpc_string_create((const char *)v134);
                      if (!v135) {
                        xpc_object_t v135 = xpc_null_create();
                      }
                      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F47098], v135);
                      xpc_object_t v136 = xpc_null_create();
                      xpc_release(v135);
                      xpc_release(v136);
                      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                      {
                        operator delete(__dst.__r_.__value_.__l.__data_);
                        if ((SHIBYTE(v189) & 0x80000000) == 0)
                        {
LABEL_214:
                          if ((SHIBYTE(v190.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                            goto LABEL_215;
                          }
                          goto LABEL_226;
                        }
                      }
                      else if ((SHIBYTE(v189) & 0x80000000) == 0)
                      {
                        goto LABEL_214;
                      }
                      operator delete((void *)v188);
                      if ((SHIBYTE(v190.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_215:
                        if ((SHIBYTE(v174) & 0x80000000) == 0) {
                          goto LABEL_216;
                        }
                        goto LABEL_227;
                      }
LABEL_226:
                      operator delete(v190.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v174) & 0x80000000) == 0)
                      {
LABEL_216:
                        if ((SHIBYTE(v177.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                          goto LABEL_217;
                        }
                        goto LABEL_228;
                      }
LABEL_227:
                      operator delete(v172);
                      if ((SHIBYTE(v177.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_217:
                        if ((SHIBYTE(v175.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                          goto LABEL_218;
                        }
                        goto LABEL_229;
                      }
LABEL_228:
                      operator delete(v177.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v175.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_218:
                        if ((SHIBYTE(v176.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                          goto LABEL_219;
                        }
LABEL_230:
                        operator delete(v176.__r_.__value_.__l.__data_);
LABEL_219:
                        __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
                        __dst.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
                        GetABMLogServer(&v190);
                        abm::HelperClient::create();
                        size_t v137 = (std::__shared_weak_count *)v190.__r_.__value_.__l.__size_;
                        if (v190.__r_.__value_.__l.__size_
                          && !atomic_fetch_add((atomic_ullong *volatile)(v190.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                          std::__shared_weak_count::__release_weak(v137);
                        }
                        v176.__r_.__value_.__r.__words[0] = (std::string::size_type)xdict;
                        if (xdict) {
                          xpc_retain(xdict);
                        }
                        else {
                          v176.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
                        }
                        *(_OWORD *)&v177.__r_.__value_.__l.__data_ = 0uLL;
                        abm::HelperClient::perform();
                        if (v177.__r_.__value_.__l.__size_) {
                          dispatch_release((dispatch_object_t)v177.__r_.__value_.__l.__size_);
                        }
                        if (v177.__r_.__value_.__r.__words[0]) {
                          _Block_release(v177.__r_.__value_.__l.__data_);
                        }
                        xpc_release(v176.__r_.__value_.__l.__data_);
                        v176.__r_.__value_.__r.__words[0] = 0;
                        int v138 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
                        if (__dst.__r_.__value_.__l.__size_
                          && !atomic_fetch_add((atomic_ullong *volatile)(__dst.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                          std::__shared_weak_count::__release_weak(v138);
                        }
                        std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&buf, (void *)buf.__r_.__value_.__l.__size_);
LABEL_240:
                        xpc_release(xdict);
                        if (v97 != v98) {
                          goto LABEL_242;
                        }
LABEL_241:
                        capabilities::coredump::recoveryForControlMessageTimeout(v84);
                        if (capabilities::coredump::operator&()) {
                          goto LABEL_242;
                        }
                        uint64_t v146 = *(NSObject **)(v10 + 40);
                        if (!os_log_type_enabled(v146, OS_LOG_TYPE_ERROR))
                        {
LABEL_255:
                          char v44 = 1;
                          uint64_t v45 = *(NSObject **)(v10 + 40);
                          if (!os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
                            goto LABEL_243;
                          }
                          goto LABEL_42;
                        }
                        if ((BYTE8(v185) & 0x10) != 0)
                        {
                          uint64_t v162 = v185;
                          if ((unint64_t)v185 < *((void *)&v182 + 1))
                          {
                            *(void *)&long long v185 = *((void *)&v182 + 1);
                            uint64_t v162 = *((void *)&v182 + 1);
                          }
                          size_t v163 = (const void **)&v182;
                        }
                        else
                        {
                          if ((BYTE8(v185) & 8) == 0)
                          {
                            std::string::size_type v160 = 0;
                            *((unsigned char *)&buf.__r_.__value_.__s + 23) = 0;
                            int v161 = &buf;
                            goto LABEL_310;
                          }
                          size_t v163 = (const void **)&v180 + 1;
                          uint64_t v162 = *((void *)&v181 + 1);
                        }
                        int v164 = *v163;
                        std::string::size_type v160 = v162 - (void)*v163;
                        if (v160 > 0x7FFFFFFFFFFFFFF7) {
                          std::string::__throw_length_error[abi:ne180100]();
                        }
                        if (v160 >= 0x17)
                        {
                          uint64_t v165 = (v160 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v160 | 7) != 0x17) {
                            uint64_t v165 = v160 | 7;
                          }
                          uint64_t v166 = v165 + 1;
                          int v161 = (std::string *)operator new(v165 + 1);
                          buf.__r_.__value_.__l.__size_ = v160;
                          buf.__r_.__value_.__r.__words[2] = v166 | 0x8000000000000000;
                          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v161;
                        }
                        else
                        {
                          *((unsigned char *)&buf.__r_.__value_.__s + 23) = v162 - *(unsigned char *)v163;
                          int v161 = &buf;
                          if (!v160) {
                            goto LABEL_310;
                          }
                        }
                        memmove(v161, v164, v160);
LABEL_310:
                        v161->__r_.__value_.__s.__data_[v160] = 0;
                        size_t v167 = &buf;
                        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                          size_t v167 = (std::string *)buf.__r_.__value_.__r.__words[0];
                        }
                        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
                        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v167;
                        _os_log_error_impl(&dword_1C59C6000, v146, OS_LOG_TYPE_ERROR, "WARNING! A MESSAGE TIMED OUT BUT WE'RE SKIPPING MODEM RESET: %s", (uint8_t *)&__dst, 0xCu);
                        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(buf.__r_.__value_.__l.__data_);
                        }
                        goto LABEL_255;
                      }
LABEL_229:
                      operator delete(v175.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v176.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                        goto LABEL_219;
                      }
                      goto LABEL_230;
                    }
                  }
                  memmove(v127, v124, v126);
                  goto LABEL_201;
                }
              }
              memmove(v113, v110, v112);
              goto LABEL_181;
            }
          }
          memmove(v107, v104, v106);
          goto LABEL_173;
        }
LABEL_123:
        operator delete(v176.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v175.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_115;
        }
        goto LABEL_124;
      }
    }
    memmove(v35, v74, v34);
    goto LABEL_100;
  }
LABEL_289:
  if (atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_290;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (SHIBYTE(v169) < 0) {
LABEL_291:
  }
    operator delete(v168[0]);
}

void sub_1C5AE1764(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1C5AE1D74()
{
  if (atomic_fetch_add((atomic_ullong *volatile)(v0 + 8), 0xFFFFFFFFFFFFFFFFLL)) {
    JUMPOUT(0x1C5AE1D5CLL);
  }
  JUMPOUT(0x1C5AE1D2CLL);
}

uint64_t _ZNKSt3__110__function6__funcIZZN19ARITransportService4initEvEUb_E3__0NS_9allocatorIS3_EEFvN9AriHostRt20ARI_CLIENT_ERROR_EVTENS_12basic_stringIcNS_11char_traitsIcEENS4_IcEEEEijEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZN19ARITransportService4initEvEUb_E3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZZN19ARITransportService4initEvEUb_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN19ARITransportService4initEvEUb_E3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN19ARITransportService4initEvEUb_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN19ARITransportService4initEvEUb_E3__0NS_9allocatorIS3_EEFvN9AriHostRt20ARI_CLIENT_ERROR_EVTENS_12basic_stringIcNS_11char_traitsIcEENS4_IcEEEEijEE11target_typeEv()
{
  return &_ZTIZZN19ARITransportService4initEvEUb_E3__0;
}

void ctu::SharedSynchronizable<ARITransportService>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  int v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19ARITransportServiceE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F210ABA0;
  block[5] = v5;
  xpc_object_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI19ARITransportServiceE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c48_ZTSNSt3__110shared_ptrIK19ARITransportServiceEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c48_ZTSNSt3__110shared_ptrIK19ARITransportServiceEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZNK8dispatch8callbackIU13block_pointerFv10WakeReasonEEclIJNS1_6StatusEEEEvDpT__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(_DWORD *)(a1 + 40);
  xpc_object_t object = xpc_null_create();
  (*(void (**)(uint64_t, int *))(v1 + 16))(v1, &v2);
  xpc_release(object);
}

void sub_1C5AE2068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void *__copy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFv10WakeReasonEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 32);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFv10WakeReasonEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    _Block_release(v1);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI19ARITransportServiceE20execute_wrapped_syncIZNS1_9dumpStateEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke(uint64_t result)
{
  if (*(void *)(**(void **)(result + 40) + 136)) {
    return MEMORY[0x1F41785D0](result);
  }
  return result;
}

void ___ZNK8dispatch8callbackIU13block_pointerFv10WakeReasonEEclIJS1_EEEvDpT__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(_DWORD *)(a1 + 40);
  unint64_t v3 = *(void **)(a1 + 48);
  int v4 = v2;
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, int *))(v1 + 16))(v1, &v4);
  xpc_release(object);
}

void sub_1C5AE2160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

xpc_object_t __copy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFv10WakeReasonEEE40c16_ZTS10WakeReason(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)(a2 + 32);
  if (v4) {
    int v4 = _Block_copy(v4);
  }
  *(void *)(a1 + 32) = v4;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  uint64_t v5 = *(void **)(a2 + 48);
  *(void *)(a1 + 48) = v5;
  if (v5) {
    return xpc_retain(v5);
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 48) = result;
  return result;
}

void __destroy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFv10WakeReasonEEE40c16_ZTS10WakeReason(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(void *)(a1 + 48) = 0;
  int v2 = *(const void **)(a1 + 32);
  if (v2) {
    _Block_release(v2);
  }
}

uint64_t __cxx_global_var_init_42()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

uint64_t __cxx_global_var_init_43()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

void *Stats::Stats(void *a1, uint64_t a2)
{
  int v4 = (const char *)a2;
  if (*(char *)(a2 + 23) < 0) {
    int v4 = *(const char **)a2;
  }
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v9, "com.apple.telephony.abm", v4);
  GetABMLogServer(&v7);
  dispatch_object_t object = 0;
  ctu::SharedSynchronizable<Stats>::SharedSynchronizable(a1 + 9, a2, 0, &object);
  if (object) {
    dispatch_release(object);
  }
  ctu::Loggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>>(a1, (uint64_t)v9, &v7);
  *a1 = &unk_1F210AD48;
  uint64_t v5 = v8;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v9);
  *a1 = &unk_1F210AC40;
  return a1;
}

void sub_1C5AE23C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, dispatch_object_t object)
{
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v14);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a12);
  _Unwind_Resume(a1);
}

void sub_1C5AE23FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  _Unwind_Resume(a1);
}

void Stats::~Stats(Stats *this)
{
  *(void *)this = &unk_1F210AD08;
  MEMORY[0x1C87940C0]((char *)this + 8);
  int v2 = *((void *)this + 12);
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = *((void *)this + 11);
  if (v3) {
    dispatch_release(v3);
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t Stats::create@<X0>(int a1@<W0>, void *a2@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  *a2 = 0;
  a2[1] = 0;
  if (a1)
  {
    uint64_t v5 = GetOsLogContext()[1];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int v6 = 136315906;
      *(void *)&v6[4] = "ABM ASSERT";
      *(_WORD *)&v6[12] = 2080;
      *(void *)&v6[14] = "statsType != statsType";
      __int16 v7 = 2080;
      int v8 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Serv"
           "er/Stats/Stats.cpp";
      __int16 v9 = 1024;
      int v10 = 33;
      _os_log_fault_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", v6, 0x26u);
    }
    __break(1u);
  }
  BootStats::createInternal(v6);
  __n128 v3 = *(__n128 *)v6;
  *(_OWORD *)a2 = *(_OWORD *)v6;
  uint64_t result = v3.n128_u64[0];
  if (v3.n128_u64[0]) {
    return (*(uint64_t (**)(unint64_t, void, __n128))(*(void *)v3.n128_u64[0] + 48))(v3.n128_u64[0], 0, v3);
  }
  return result;
}

void sub_1C5AE25A8(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1C5AE25BC(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1C5AE25D0(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t Stats::init(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 104) = a2;
  return 1;
}

void *ctu::Loggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F210AD08;
  MEMORY[0x1C87940C0](a1 + 1);
  return a1;
}

void ctu::Loggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F210AD08;
  MEMORY[0x1C87940C0](a1 + 1);

  operator delete(a1);
}

void *ctu::SharedSynchronizable<Stats>::SharedSynchronizable(void *a1, uint64_t a2, dispatch_queue_attr_t attr, dispatch_object_t *a4)
{
  if (*(char *)(a2 + 23) >= 0) {
    int v6 = (const char *)a2;
  }
  else {
    int v6 = *(const char **)a2;
  }
  __int16 v7 = *a4;
  if (*a4)
  {
    dispatch_retain(*a4);
    dispatch_retain(v7);
    int v8 = dispatch_queue_create_with_target_V2(v6, attr, v7);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = v8;
    if (!v8) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  int v8 = dispatch_queue_create(v6, attr);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = v8;
  if (v8) {
LABEL_6:
  }
    dispatch_retain(v8);
LABEL_7:
  a1[3] = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  if (v8) {
    dispatch_release(v8);
  }
  if (v7)
  {
    dispatch_release(v7);
    dispatch_release(v7);
  }
  return a1;
}

void *ctu::Loggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>>(void *a1, uint64_t a2, void *a3)
{
  *a1 = &unk_1F210AD08;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v8);
  a1[1] = &unk_1F2102CB8;
  a1[7] = *a3;
  uint64_t v5 = a3[1];
  a1[8] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v7);
  return a1;
}

void sub_1C5AE281C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void *ctu::SharedLoggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F210AD08;
  MEMORY[0x1C87940C0](a1 + 1);
  int v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  __n128 v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ctu::SharedLoggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F210AD08;
  MEMORY[0x1C87940C0](a1 + 1);
  int v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  __n128 v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void *ABMServer::create_default_global@<X0>(void *a1@<X8>)
{
  __n128 v3 = operator new(0x10uLL);
  void *v3 = 0xAAAAAAAAAAAAAAAALL;
  v3[1] = 0xAAAAAAAAAAAAAAAALL;
  int v4 = (ABMServerInternal *)operator new(0x130uLL);
  ABMServerInternal::ABMServerInternal(v4);
  std::shared_ptr<ABMServerInternal>::shared_ptr[abi:ne180100]<ABMServerInternal,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1},void>(v3, (uint64_t)v4);
  *a1 = v3;
  uint64_t result = operator new(0x20uLL);
  void *result = &unk_1F210B1B8;
  result[1] = 0;
  result[2] = 0;
  result[3] = v3;
  a1[1] = result;
  return result;
}

void sub_1C5AE29A0(_Unwind_Exception *a1)
{
  __n128 v3 = (std::__shared_weak_count *)v1[1];
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      operator delete(v1);
      _Unwind_Resume(a1);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ABMServer::ABMServer(ABMServer *this)
{
  *(void *)this = 0xAAAAAAAAAAAAAAAALL;
  *((void *)this + 1) = 0xAAAAAAAAAAAAAAAALL;
  int v2 = (ABMServerInternal *)operator new(0x130uLL);
  ABMServerInternal::ABMServerInternal(v2);

  std::shared_ptr<ABMServerInternal>::shared_ptr[abi:ne180100]<ABMServerInternal,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1},void>(this, (uint64_t)v2);
}

{
  ABMServerInternal *v2;
  uint64_t vars8;

  *(void *)this = 0xAAAAAAAAAAAAAAAALL;
  *((void *)this + 1) = 0xAAAAAAAAAAAAAAAALL;
  int v2 = (ABMServerInternal *)operator new(0x130uLL);
  ABMServerInternal::ABMServerInternal(v2);

  std::shared_ptr<ABMServerInternal>::shared_ptr[abi:ne180100]<ABMServerInternal,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1},void>(this, (uint64_t)v2);
}

void sub_1C5AE2A7C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C5AE2AE0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *ABMServerInternal::create@<X0>(void *a1@<X8>)
{
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  __n128 v3 = (ABMServerInternal *)operator new(0x130uLL);
  ABMServerInternal::ABMServerInternal(v3);

  return std::shared_ptr<ABMServerInternal>::shared_ptr[abi:ne180100]<ABMServerInternal,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1},void>(a1, (uint64_t)v3);
}

void sub_1C5AE2B44(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ABMServer::init(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  ABMServerInternal::init(v4, (uint64_t)&__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5AE2BE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ABMServerInternal::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + 8;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 1174405120;
  v6[2] = ___ZN17ABMServerInternal4initENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKN3abm9OverridesE_block_invoke;
  v6[3] = &__block_descriptor_tmp_6_7;
  v6[4] = a1;
  v6[5] = a3;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  int v8 = v6;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_64;
  block[4] = v4;
  block[5] = &v8;
  uint64_t v5 = *(NSObject **)(a1 + 24);
  if (*(void *)(a1 + 32))
  {
    dispatch_async_and_wait(v5, block);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_8:
    operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  dispatch_sync(v5, block);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_8;
  }
}

BOOL ABMServer::start(ABMServerInternal **this, NSObject *a2)
{
  return ABMServerInternal::start(*this, a2);
}

BOOL ABMServerInternal::start(ABMServerInternal *this, NSObject *a2)
{
  uint64_t v4 = *((void *)this + 14);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Request to start server", buf, 2u);
  }
  if (a2)
  {
    dispatch_retain(a2);
    dispatch_retain(a2);
    dispatch_group_enter(a2);
    dispatch_release(a2);
  }
  uint64_t v11 = 0;
  xpc_object_t v12 = &v11;
  uint64_t v13 = 0x2000000000;
  char v14 = 0;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1174405120;
  v9[2] = ___ZN17ABMServerInternal5startEP16dispatch_group_s_block_invoke;
  v9[3] = &unk_1F210AE48;
  v9[5] = this;
  dispatch_group_t group = a2;
  if (a2)
  {
    dispatch_retain(a2);
    dispatch_group_enter(group);
  }
  v9[4] = &v11;
  size_t v15 = v9;
  *(void *)std::string buf = MEMORY[0x1E4F143A8];
  uint64_t v17 = 0x40000000;
  int v18 = ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  size_t v19 = &__block_descriptor_tmp_64;
  unint64_t v20 = (char *)this + 8;
  size_t v21 = &v15;
  uint64_t v5 = *((void *)this + 3);
  if (*((void *)this + 4))
  {
    dispatch_async_and_wait(v5, buf);
    int v6 = *((unsigned __int8 *)v12 + 24);
    uint64_t v7 = group;
    if (!group) {
      goto LABEL_13;
    }
  }
  else
  {
    dispatch_sync(v5, buf);
    int v6 = *((unsigned __int8 *)v12 + 24);
    uint64_t v7 = group;
    if (!group) {
      goto LABEL_13;
    }
  }
  dispatch_group_leave(v7);
  if (group) {
    dispatch_release(group);
  }
LABEL_13:
  _Block_object_dispose(&v11, 8);
  if (a2)
  {
    dispatch_group_leave(a2);
    dispatch_release(a2);
  }
  return v6 != 0;
}

BOOL ABMServer::stop(ABMServerInternal **this, NSObject *a2)
{
  return ABMServerInternal::stop(*this, a2);
}

BOOL ABMServerInternal::stop(ABMServerInternal *this, NSObject *a2)
{
  uint64_t v4 = *((void *)this + 14);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Request to stop server", buf, 2u);
  }
  if (a2)
  {
    dispatch_retain(a2);
    dispatch_retain(a2);
    dispatch_group_enter(a2);
    dispatch_release(a2);
  }
  uint64_t v11 = 0;
  xpc_object_t v12 = &v11;
  uint64_t v13 = 0x2000000000;
  char v14 = 0;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1174405120;
  v9[2] = ___ZN17ABMServerInternal4stopEP16dispatch_group_s_block_invoke;
  v9[3] = &unk_1F210AE80;
  v9[5] = this;
  dispatch_group_t group = a2;
  if (a2)
  {
    dispatch_retain(a2);
    dispatch_group_enter(group);
  }
  v9[4] = &v11;
  size_t v15 = v9;
  *(void *)std::string buf = MEMORY[0x1E4F143A8];
  uint64_t v17 = 0x40000000;
  int v18 = ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  size_t v19 = &__block_descriptor_tmp_64;
  unint64_t v20 = (char *)this + 8;
  size_t v21 = &v15;
  uint64_t v5 = *((void *)this + 3);
  if (*((void *)this + 4))
  {
    dispatch_async_and_wait(v5, buf);
    int v6 = *((unsigned __int8 *)v12 + 24);
    uint64_t v7 = group;
    if (!group) {
      goto LABEL_13;
    }
  }
  else
  {
    dispatch_sync(v5, buf);
    int v6 = *((unsigned __int8 *)v12 + 24);
    uint64_t v7 = group;
    if (!group) {
      goto LABEL_13;
    }
  }
  dispatch_group_leave(v7);
  if (group) {
    dispatch_release(group);
  }
LABEL_13:
  _Block_object_dispose(&v11, 8);
  if (a2)
  {
    dispatch_group_leave(a2);
    dispatch_release(a2);
  }
  return v6 != 0;
}

BOOL ABMServer::shutdown(ABMServerInternal **this, NSObject *a2)
{
  return ABMServerInternal::shutdown(*this, a2);
}

BOOL ABMServerInternal::shutdown(ABMServerInternal *this, NSObject *a2)
{
  uint64_t v4 = *((void *)this + 14);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Request to shutdown server", buf, 2u);
  }
  if (a2)
  {
    dispatch_retain(a2);
    dispatch_retain(a2);
    dispatch_group_enter(a2);
    dispatch_release(a2);
LABEL_5:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  int v6 = (dispatch_group_s *)dispatch_group_create();
  a2 = v6;
  if (!v6) {
    goto LABEL_5;
  }
  dispatch_retain((dispatch_object_t)v6);
  dispatch_group_enter(a2);
  uint64_t v5 = a2;
LABEL_8:
  uint64_t v13 = 0;
  char v14 = &v13;
  uint64_t v15 = 0x2000000000;
  char v16 = 0;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  v11[2] = ___ZN17ABMServerInternal8shutdownEP16dispatch_group_s_block_invoke;
  v11[3] = &unk_1F210AEB8;
  v11[4] = &v13;
  void v11[5] = this;
  dispatch_group_t group = a2;
  if (a2)
  {
    dispatch_retain(a2);
    dispatch_group_enter(group);
  }
  uint64_t v17 = v11;
  *(void *)std::string buf = MEMORY[0x1E4F143A8];
  uint64_t v19 = 0x40000000;
  unint64_t v20 = ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  size_t v21 = &__block_descriptor_tmp_64;
  int v22 = (char *)this + 8;
  size_t v23 = &v17;
  uint64_t v7 = *((void *)this + 3);
  if (*((void *)this + 4))
  {
    dispatch_async_and_wait(v7, buf);
    int v8 = *((unsigned __int8 *)v14 + 24);
    __int16 v9 = group;
    if (!group) {
      goto LABEL_16;
    }
  }
  else
  {
    dispatch_sync(v7, buf);
    int v8 = *((unsigned __int8 *)v14 + 24);
    __int16 v9 = group;
    if (!group) {
      goto LABEL_16;
    }
  }
  dispatch_group_leave(v9);
  if (group) {
    dispatch_release(group);
  }
LABEL_16:
  _Block_object_dispose(&v13, 8);
  if (v5) {
    dispatch_release(v5);
  }
  if (a2)
  {
    dispatch_group_leave(a2);
    dispatch_release(a2);
  }
  return v8 != 0;
}

void ABMServer::broadcast(uint64_t *a1, uint64_t a2, const void **a3, const void **a4)
{
  uint64_t v6 = *a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    uint64_t v7 = *a3;
    int v10 = v7;
    if (!v7) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  std::string v11 = *(std::string *)a2;
  uint64_t v7 = *a3;
  int v10 = v7;
  if (v7) {
LABEL_5:
  }
    CFRetain(v7);
LABEL_6:
  if (*a4) {
    int v8 = _Block_copy(*a4);
  }
  else {
    int v8 = 0;
  }
  __int16 v9 = v8;
  ABMServerInternal::broadcast(v6, (uint64_t)&v11, &v10, &v9);
  if (v8) {
    _Block_release(v8);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_1C5AE3400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (v16) {
    _Block_release(v16);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ABMServerInternal::broadcast(uint64_t a1, uint64_t a2, const void **a3, void **a4)
{
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1174405120;
  v9[2] = ___ZN17ABMServerInternal9broadcastENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke;
  v9[3] = &__block_descriptor_tmp_29_1;
  v9[4] = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    uint64_t v7 = *a3;
    CFTypeRef cf = v7;
    if (!v7) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  std::string __p = *(std::string *)a2;
  uint64_t v7 = *a3;
  CFTypeRef cf = v7;
  if (v7) {
LABEL_5:
  }
    CFRetain(v7);
LABEL_6:
  int v8 = *a4;
  if (*a4) {
    int v8 = _Block_copy(v8);
  }
  aBlocunint64_t k = v8;
  ctu::SharedSynchronizable<ctu::XpcServer>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v9);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void ABMServerInternal::ABMServerInternal(ABMServerInternal *this)
{
  *(void *)this = &unk_1F210ADA0;
  *((void *)this + 9) = &unk_1F210ADE0;
  char v16 = 11;
  strcpy((char *)__p, "server.main");
  xpc_object_t v14 = xpc_null_create();
  object[0] = 0;
  ctu::XpcServer::XpcServer();
  xpc_release(v14);
  xpc_object_t v14 = 0;
  *(void *)this = &unk_1F210ADA0;
  *((void *)this + 9) = &unk_1F210ADE0;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v13, "com.apple.telephony.abm", "server.main");
  GetABMLogServer(&v11);
  *((void *)this + 9) = &unk_1F210B178;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)__p);
  *((void *)this + 10) = &unk_1F2102CB8;
  int v2 = v12;
  *((void *)this + 16) = v11;
  *((void *)this + 17) = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)object);
  __n128 v3 = v12;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v13);
  *(void *)this = &unk_1F210ADA0;
  *((void *)this + 9) = &unk_1F210ADE0;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 18) = (char *)this + 152;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((_DWORD *)this + 48) = 3;
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x38uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210B258;
  Registry::Registry((Registry *)&v4[1]);
  *((void *)this + 28) = v6;
  *((void *)this + 29) = v4;
  shared_owners = (std::__shared_weak_count *)v4[1].__shared_owners_;
  if (!shared_owners)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)&v4[1];
    v4[1].__shared_owners_ = (uint64_t)v4;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (shared_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)&v4[1];
    v4[1].__shared_owners_ = (uint64_t)v4;
    std::__shared_weak_count::__release_weak(shared_owners);
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_11:
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
LABEL_12:
  _ZNSt3__115allocate_sharedB8ne180100I16ABMServerFactoryNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((uint64_t *)__p);
  __int16 v9 = __p[0];
  int v8 = (std::__shared_weak_count *)__p[1];
  *((void **)this + 30) = __p[0];
  *((void *)this + 31) = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v10 = operator new(0x28uLL);
  v10[1] = 0;
  v10[2] = 0;
  void *v10 = &unk_1F210D438;
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    v10[3] = v9;
    v10[4] = v8;
    *((void *)this + 32) = v10 + 3;
    *((void *)this + 33) = v10;
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    v10[3] = v9;
    v10[4] = 0;
    *((void *)this + 32) = v10 + 3;
    *((void *)this + 33) = v10;
  }
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  ctu::LoggerCommonBase::setLogLevel();
}

void sub_1C5AE395C(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 288));
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v5);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v4);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 240));
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 224));
  if (*v9)
  {
    dispatch_group_leave(*v9);
    if (*v9) {
      dispatch_release(*v9);
    }
  }
  if (v1[191] < 0) {
    operator delete(*v8);
  }
  std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::destroy(*v7);
  void *v6 = v2;
  MEMORY[0x1C87940C0](v3);
  ctu::XpcServer::~XpcServer((ctu::XpcServer *)v1);
  _Unwind_Resume(a1);
}

void sub_1C5AE3A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  xpc_release(a15);
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1C5AE3A38);
}

const char *ABMServerInternal::getName(ABMServerInternal *this)
{
  return "server.main";
}

void xpc::connection::~connection(xpc_object_t *this)
{
  *this = 0;
}

void ABMServerInternal::~ABMServerInternal(ABMServerInternal *this)
{
  *(void *)this = &unk_1F210ADA0;
  *((void *)this + 9) = &unk_1F210ADE0;
  ABMServerInternal::finishShutdown_sync(this);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 33);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 31);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 29);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = *((void *)this + 25);
  if (v7)
  {
    dispatch_group_leave(v7);
    int v8 = *((void *)this + 25);
    if (v8) {
      dispatch_release(v8);
    }
  }
  if (*((char *)this + 191) < 0) {
    operator delete(*((void **)this + 21));
  }
  std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::destroy(*((void **)this + 19));
  *((void *)this + 9) = &unk_1F210B178;
  MEMORY[0x1C87940C0]((char *)this + 80);

  ctu::XpcServer::~XpcServer(this);
}

{
  void *v1;
  uint64_t vars8;

  ABMServerInternal::~ABMServerInternal(this);

  operator delete(v1);
}

void ABMServerInternal::finishShutdown_sync(ABMServerInternal *this)
{
  uint64_t v2 = (void *)((char *)this + 152);
  std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::destroy(*((void **)this + 19));
  *((void *)this + 18) = v2;
  *((void *)this + 20) = 0;
  void *v2 = 0;
  dispatch_group_t group = (dispatch_group_t)0xAAAAAAAAAAAAAAAALL;
  ServiceManager::shutdownGlobalServices(*((ServiceManager **)this + 36), &group);
  dispatch_group_wait(group, 0xFFFFFFFFFFFFFFFFLL);
  Listener_synCC_SHA256_CTX c = (xpc_connection_t *)ctu::XpcServer::getListener_sync(this);
  xpc_connection_cancel(*Listener_sync);
  xpc_object_t object = xpc_null_create();
  ctu::XpcServer::setListener_sync();
  xpc_release(object);
  xpc_object_t object = 0;
  ABMServerInternal::changeState_sync(this, 5);
  (*(void (**)(void, uint64_t))(**((void **)this + 34) + 88))(*((void *)this + 34), 5);
  uint64_t v4 = *((void *)this + 14);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I --------- ABM shutdown completed ---------", v5, 2u);
  }
  ABMServerInternal::stopRunLoop_sync(this);
  if (group) {
    dispatch_release(group);
  }
}

void sub_1C5AE3E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, dispatch_object_t a12)
{
  if (a12) {
    dispatch_release(a12);
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'ABMServerInternal::~ABMServerInternal(ABMServerInternal *this)
{
}

{
  void *v1;
  uint64_t vars8;

  ABMServerInternal::~ABMServerInternal((ABMServerInternal *)((char *)this - 72));

  operator delete(v1);
}

void ___ZN17ABMServerInternal4initENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKN3abm9OverridesE_block_invoke(uint64_t a1)
{
  void (***v21)(uint8_t *__return_ptr);
  std::__shared_weak_count *v22;
  long long v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  void *v29;
  const void *v30;
  char v31;
  char v32;
  NSObject *v33;
  BOOL v34;
  int v35;
  uint64_t v36;
  void (**v37)(void);
  __int16 v38[6];
  int v39;
  void aBlock[6];
  std::__shared_weak_count *v41;
  xpc_object_t object;
  uint64_t v43;
  std::__shared_weak_count *v44;
  dispatch_group_t buf[3];
  uint64_t v46;

  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 112);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Request to init server", (uint8_t *)buf, 2u);
  }
  uint64_t v4 = *(void *)(v2 + 256);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(v5 + 16);
  uint64_t v6 = *(std::__shared_weak_count **)(v5 + 24);
  xpc_object_t v43 = v7;
  char v44 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ABMServerRegistryBuilder::setupQMIServer(v4, (Registry **)(v2 + 224), &v43);
  __int16 v9 = v44;
  if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (capabilities::radio::vendor(v8) == 2)
  {
    _ZNSt3__115allocate_sharedB8ne180100I20BootControllerLegacyNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((uint64_t *)buf);
    long long v10 = *(_OWORD *)buf;
    memset(buf, 0, 16);
    uint64_t v11 = *(std::__shared_weak_count **)(v2 + 280);
    *(_OWORD *)(v2 + 272) = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    xpc_object_t v12 = (std::__shared_weak_count *)buf[1];
    if (buf[1] && !atomic_fetch_add((atomic_ullong *volatile)&buf[1][1], 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  ABMServerInternal::startRunLoop_sync((ABMServerInternal *)v2);
  xpc_object_t object = xpc_connection_create_mach_service(kABMDefaultServiceName[0], 0, 1uLL);
  if (!object) {
    xpc_object_t object = xpc_null_create();
  }
  ctu::XpcServer::setListener_sync();
  xpc_release(object);
  xpc_object_t object = 0;
  ctu::XpcServer::startListener_sync((ctu::XpcServer *)v2);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"kAppleBasebandManagerDaemonReady", 0, 0, 1u);
  xpc_object_t v14 = (a1 + 48);
  uint64_t v15 = (void **)(v2 + 168);
  if (v2 + 168 != a1 + 48)
  {
    char v16 = *(unsigned char *)(a1 + 71);
    if (*(char *)(v2 + 191) < 0)
    {
      if (v16 >= 0) {
        int v18 = (void *)(a1 + 48);
      }
      else {
        int v18 = *(void **)(a1 + 48);
      }
      if (v16 >= 0) {
        size_t v19 = *(unsigned __int8 *)(a1 + 71);
      }
      else {
        size_t v19 = *(void *)(a1 + 56);
      }
      std::string::__assign_no_alias<false>(v15, v18, v19);
    }
    else if ((*(unsigned char *)(a1 + 71) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v15, *(void **)(a1 + 48), *(void *)(a1 + 56));
    }
    else
    {
      long long v17 = *(_OWORD *)&v14->isa;
      *(void *)(v2 + 184) = *(void *)(a1 + 64);
      *(_OWORD *)uint64_t v15 = v17;
    }
  }
  unint64_t v20 = *(NSObject **)(v2 + 112);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a1 + 71) < 0) {
      xpc_object_t v14 = v14->isa;
    }
    LODWORD(buf[0]) = 136315138;
    *(dispatch_group_t *)((char *)buf + 4) = v14;
    _os_log_impl(&dword_1C59C6000, v20, OS_LOG_TYPE_DEFAULT, "#I host: %s", (uint8_t *)buf, 0xCu);
  }
  ABMServerInternal::changeState_sync(v2, 3u);
  int v22 = *(std::__shared_weak_count **)(v2 + 232);
  size_t v21 = *(void (****)(uint8_t *__return_ptr))(v2 + 240);
  void aBlock[5] = *(void *)(v2 + 224);
  uint64_t v41 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v21)((uint8_t *)buf);
  size_t v23 = *(_OWORD *)buf;
  memset(buf, 0, 16);
  uint64_t v24 = *(std::__shared_weak_count **)(v2 + 296);
  *(_OWORD *)(v2 + 288) = v23;
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  long long v25 = (std::__shared_weak_count *)buf[1];
  if (buf[1] && !atomic_fetch_add((atomic_ullong *volatile)&buf[1][1], 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
  uint64_t v26 = *(void *)(v2 + 288);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN17ABMServerInternal4initENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKN3abm9OverridesE_block_invoke_3;
  aBlock[3] = &__block_descriptor_tmp_11;
  aBlock[4] = v2;
  long long v27 = _Block_copy(aBlock);
  uint64_t v28 = v27;
  if (!v27)
  {
    xpc_object_t v30 = *(const void **)(v26 + 184);
    *(void *)(v26 + 184) = 0;
    if (!v30) {
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  std::string::size_type v29 = _Block_copy(v27);
  xpc_object_t v30 = *(const void **)(v26 + 184);
  *(void *)(v26 + 184) = v29;
  if (v30) {
LABEL_48:
  }
    _Block_release(v30);
LABEL_49:
  if (v28) {
    _Block_release(v28);
  }
  (*(void (**)(void))(**(void **)(v2 + 288) + 64))(*(void *)(v2 + 288));
  buf[0] = (dispatch_group_t)0xAAAAAAAAAAAAAAAALL;
  ServiceManager::initializeGlobalServices(*(ServiceManager **)(v2 + 288), buf);
  dispatch_group_wait(buf[0], 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v39 = 6;
  long long v31 = (*(uint64_t (**)(void, int *))(**(void **)(v2 + 272) + 96))(*(void *)(v2 + 272), &v39);
  if (v39 == 3) {
    uint64_t v32 = v31;
  }
  else {
    uint64_t v32 = 0;
  }
  if ((v32 & 1) == 0)
  {
    long long v33 = *(NSObject **)(v2 + 112);
    size_t v34 = os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
    if (v34)
    {
      v38[0] = 0;
      _os_log_impl(&dword_1C59C6000, v33, OS_LOG_TYPE_DEFAULT, "#I Previous shutdown was not clean", (uint8_t *)v38, 2u);
    }
    uint64_t v35 = capabilities::radio::ice((capabilities::radio *)v34);
    uint64_t v36 = **(void **)(v2 + 272);
    if (v35) {
      size_t v37 = (void (**)(void))(v36 + 80);
    }
    else {
      size_t v37 = (void (**)(void))(v36 + 72);
    }
    (*v37)();
    (*(void (**)(void, uint64_t))(**(void **)(v2 + 272) + 88))(*(void *)(v2 + 272), 3);
  }
  if (buf[0]) {
    dispatch_release(buf[0]);
  }
}

void sub_1C5AE44B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, xpc_object_t object, char a19)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ABMServerInternal::startRunLoop_sync(ABMServerInternal *this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 14);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__sig) = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Starting ABM RunLoop", (uint8_t *)&buf, 2u);
  }
  uint64_t v3 = dispatch_group_create();
  dispatch_group_enter(v3);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 1174405120;
  v5[2] = ___ZN17ABMServerInternal17startRunLoop_syncEv_block_invoke;
  v5[3] = &__block_descriptor_tmp_15_1;
  v5[4] = this;
  dispatch_object_t object = v3;
  if (v3) {
    dispatch_retain(v3);
  }
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&buf.__opaque[24] = v4;
  *(_OWORD *)&buf.__opaque[40] = v4;
  *(_OWORD *)&buf.__sig = v4;
  *(_OWORD *)&buf.__opaque[8] = v4;
  pthread_attr_init(&buf);
  pthread_attr_set_qos_class_np(&buf, QOS_CLASS_USER_INITIATED, 0);
  pthread_create((pthread_t *)this + 27, &buf, (void *(__cdecl *)(void *))sServerRunLoopMain, v5);
  dispatch_group_wait(v3, 0xFFFFFFFFFFFFFFFFLL);
  if (object) {
    dispatch_release(object);
  }
  if (v3) {
    dispatch_release(v3);
  }
}

void sub_1C5AE4690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_object_t object)
{
  if (object)
  {
    dispatch_release(object);
    if (!v14) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if (!v14)
  {
    goto LABEL_3;
  }
  dispatch_release(v14);
  _Unwind_Resume(exception_object);
}

void ABMServerInternal::changeState_sync(uint64_t a1, unsigned int a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v4 = *(NSObject **)(a1 + 112);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = to_string(*(_DWORD *)(a1 + 192));
    *(_DWORD *)pthread_attr_t buf = 136315394;
    __int16 v9 = v5;
    __int16 v10 = 2080;
    uint64_t v11 = to_string(a2);
    _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I State change: %s -> %s", buf, 0x16u);
  }
  *(_DWORD *)(a1 + 192) = a2;
  uint64_t v6 = *(NSObject **)(a1 + 200);
  if (v6)
  {
    dispatch_object_t v7 = *(dispatch_object_t *)(a1 + 200);
    dispatch_retain(v6);
    dispatch_group_enter(v6);
    ABMServerInternal::checkShutdown_sync((ABMServerInternal *)a1, &v7);
    dispatch_group_leave(v6);
    dispatch_release(v6);
  }
}

void sub_1C5AE47C4(_Unwind_Exception *a1)
{
  dispatch_group_leave(v1);
  dispatch_release(v1);
  _Unwind_Resume(a1);
}

void ___ZN17ABMServerInternal4initENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKN3abm9OverridesE_block_invoke_3(uint64_t a1, uint64_t a2, void **a3, void **a4)
{
  uint64_t v6 = *(void **)(a1 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    dispatch_object_t v7 = *a3;
    aBlock[0] = v7;
    if (!v7) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  std::string __p = *(std::string *)a2;
  dispatch_object_t v7 = *a3;
  aBlock[0] = v7;
  if (v7) {
LABEL_5:
  }
    CFRetain(v7);
LABEL_6:
  uint64_t v8 = *a4;
  if (*a4) {
    uint64_t v8 = _Block_copy(v8);
  }
  aBlock[1] = v8;
  __int16 v9 = (std::__shared_weak_count *)v6[2];
  if (!v9 || (uint64_t v10 = v6[1], (v11 = std::__shared_weak_count::lock(v9)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v12 = v11;
  uint64_t v13 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v13 = v6;
  xpc_object_t v14 = (std::string *)(v13 + 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((void *)v13 + 3) = *((void *)&__p.__r_.__value_.__l + 2);
  }
  *((_OWORD *)v13 + 2) = *(_OWORD *)aBlock;
  aBlock[0] = 0;
  aBlock[1] = 0;
  uint64_t v15 = v6[3];
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  char v16 = operator new(0x18uLL);
  void *v16 = v13;
  v16[1] = v10;
  v16[2] = v12;
  dispatch_async_f(v15, v16, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableINS1_9XpcServerEE15execute_wrappedIZZZN17ABMServerInternal4initENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEERKN3abm9OverridesEEUb_EUb0_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNS7_10unique_ptrISJ_NS7_14default_deleteISJ_EEEEENUlPvE_8__invokeESS_);
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    long long v17 = aBlock[1];
    if (!aBlock[1]) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  long long v17 = aBlock[1];
  if (aBlock[1]) {
LABEL_17:
  }
    _Block_release(v17);
LABEL_18:
  if (aBlock[0]) {
    CFRelease(aBlock[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void __copy_helper_block_e8_48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  uint64_t v2 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 48);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a2 + 64);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
}

void ___ZN17ABMServerInternal5startEP16dispatch_group_s_block_invoke(void *a1)
{
  uint64_t v1 = a1[5];
  unsigned int v2 = *(_DWORD *)(v1 + 192);
  if (v2 > 5) {
    return;
  }
  if (((1 << v2) & 0x35) != 0)
  {
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 0;
    return;
  }
  if (v2 == 1)
  {
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
    return;
  }
  ABMServerInternal::changeState_sync(a1[5], 0);
  long long v4 = (const void *)*MEMORY[0x1E4F4C5E8];
  size_t v5 = strlen((const char *)*MEMORY[0x1E4F4C5E8]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    dispatch_object_t v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
  }
  else
  {
    HIBYTE(v13) = v5;
    dispatch_object_t v7 = __dst;
    if (!v5) {
      goto LABEL_15;
    }
  }
  memmove(v7, v4, (size_t)v6);
LABEL_15:
  *((unsigned char *)v6 + (void)v7) = 0;
  ABMServerInternal::broadcastServerState_sync((void *)v1, (uint64_t)__dst);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
  uint64_t v10 = a1[6];
  uint64_t v11 = v10;
  if (v10)
  {
    dispatch_retain(v10);
    dispatch_group_enter(v10);
  }
  ABMServerInternal::start_sync(v1, &v11);
  if (v10)
  {
    dispatch_group_leave(v10);
    dispatch_release(v10);
  }
}

void sub_1C5AE4BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v15)
  {
    dispatch_group_leave(v15);
    dispatch_release(v15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ABMServerInternal::getState_sync(ABMServerInternal *this)
{
  return *((unsigned int *)this + 48);
}

void ABMServerInternal::broadcastServerState_sync(void *a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  uint64_t v4 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  dispatch_object_t v7 = Mutable;
  if (Mutable) {
    CFTypeRef cf = Mutable;
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v22 = *(std::string *)a2;
  }
  ctu::cf::insert<char const*,std::string>(v7, (const __CFString **)*MEMORY[0x1E4F4C250], (uint64_t)&v22, v4, v6);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  uint64_t v8 = (const void *)*MEMORY[0x1E4F4C890];
  size_t v9 = strlen((const char *)*MEMORY[0x1E4F4C890]);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v10 = (void *)v9;
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    uint64_t v11 = (void **)operator new(v13 + 1);
    __dst[1] = v10;
    unint64_t v20 = v14 | 0x8000000000000000;
    __dst[0] = v11;
LABEL_16:
    memmove(v11, v8, (size_t)v10);
    *((unsigned char *)v10 + (void)v11) = 0;
    CFTypeRef v12 = cf;
    if (!cf) {
      goto LABEL_19;
    }
    goto LABEL_17;
  }
  HIBYTE(v20) = v9;
  uint64_t v11 = __dst;
  if (v9) {
    goto LABEL_16;
  }
  LOBYTE(__dst[0]) = 0;
  CFTypeRef v12 = cf;
  if (!cf) {
    goto LABEL_19;
  }
LABEL_17:
  CFTypeID v15 = CFGetTypeID(v12);
  if (v15 == CFDictionaryGetTypeID())
  {
    int v18 = (ctu *)v12;
    CFRetain(v12);
    char v16 = v12;
    goto LABEL_20;
  }
LABEL_19:
  char v16 = 0;
  int v18 = 0;
LABEL_20:
  long long v17 = 0;
  ABMServerInternal::broadcast_sync(a1, (uint64_t)__dst, &v18, &v17);
  if (v16) {
    CFRelease(v16);
  }
  if (SHIBYTE(v20) < 0)
  {
    operator delete(__dst[0]);
    if (!v12) {
      return;
    }
  }
  else if (!v12)
  {
    return;
  }
  CFRelease(v12);
}

void sub_1C5AE4DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, const void *a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
  {
    operator delete(__p);
    ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a17);
    _Unwind_Resume(a1);
  }
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a17);
  _Unwind_Resume(a1);
}

void ABMServerInternal::start_sync(uint64_t a1, NSObject **a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(NSObject **)(a1 + 112);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    abm::asString();
    size_t v5 = v18 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)pthread_attr_t buf = 136315138;
    unint64_t v20 = v5;
    _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Starting ABM with profile: %s", buf, 0xCu);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
  }
  (*(void (**)(void, void))(**(void **)(a1 + 272) + 88))(*(void *)(a1 + 272), 0);
  (*(void (**)(void))(**(void **)(a1 + 288) + 72))(*(void *)(a1 + 288));
  __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  ServiceManager::initializeDynamicServices(*(ServiceManager **)(a1 + 288), (NSObject **)__p);
  CFAllocatorRef v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v6 || (v7 = *(void *)(a1 + 8), (uint64_t v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v9 = v8;
  uint64_t v10 = __p[0];
  uint64_t v11 = *(NSObject **)(a1 + 24);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZN17ABMServerInternal10start_syncEN8dispatch13group_sessionE_block_invoke;
  block[3] = &__block_descriptor_tmp_16_2;
  block[4] = a1;
  block[5] = v7;
  CFTypeID v15 = v8;
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  CFTypeRef v12 = *a2;
  dispatch_group_t group = v12;
  if (v12)
  {
    dispatch_retain(v12);
    dispatch_group_enter(group);
  }
  dispatch_group_notify(v10, v11, block);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  uint64_t v13 = v15;
  if (!v15 || atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_17:
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_18:
  if (__p[0]) {
    dispatch_release((dispatch_object_t)__p[0]);
  }
}

void sub_1C5AE5108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, dispatch_object_t object)
{
  if (object)
  {
    dispatch_release(object);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_48c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  long long v3 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 48) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    uint64_t v4 = *(NSObject **)(a1 + 48);
    if (v4)
    {
      dispatch_group_enter(v4);
    }
  }
}

void __destroy_helper_block_e8_48c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  unsigned int v2 = *(NSObject **)(a1 + 48);
  if (v2)
  {
    dispatch_group_leave(v2);
    long long v3 = *(NSObject **)(a1 + 48);
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

void ___ZN17ABMServerInternal4stopEP16dispatch_group_s_block_invoke(void *a1)
{
  uint64_t v1 = a1[5];
  unsigned int v2 = *(_DWORD *)(v1 + 192);
  if (v2 <= 5)
  {
    char v4 = 1;
    if (((1 << v2) & 0x15) != 0)
    {
      char v4 = 0;
LABEL_20:
      *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = v4;
      return;
    }
    if (((1 << v2) & 0x28) != 0) {
      goto LABEL_20;
    }
    ABMServerInternal::changeState_sync(a1[5], 2u);
    size_t v5 = (const void *)*MEMORY[0x1E4F4C5F0];
    size_t v6 = strlen((const char *)*MEMORY[0x1E4F4C5F0]);
    if (v6 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (void *)v6;
    if (v6 >= 0x17)
    {
      uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17) {
        uint64_t v9 = v6 | 7;
      }
      uint64_t v10 = v9 + 1;
      uint64_t v8 = (void **)operator new(v9 + 1);
      __dst[1] = v7;
      unint64_t v14 = v10 | 0x8000000000000000;
      __dst[0] = v8;
    }
    else
    {
      HIBYTE(v14) = v6;
      uint64_t v8 = __dst;
      if (!v6) {
        goto LABEL_13;
      }
    }
    memmove(v8, v5, (size_t)v7);
LABEL_13:
    *((unsigned char *)v7 + (void)v8) = 0;
    ABMServerInternal::broadcastServerState_sync((void *)v1, (uint64_t)__dst);
    if (SHIBYTE(v14) < 0) {
      operator delete(__dst[0]);
    }
    uint64_t v11 = a1[6];
    CFTypeRef v12 = v11;
    if (v11)
    {
      dispatch_retain(v11);
      dispatch_group_enter(v11);
    }
    ABMServerInternal::stop_sync(v1, &v12);
    if (v11)
    {
      dispatch_group_leave(v11);
      dispatch_release(v11);
    }
    char v4 = 1;
    goto LABEL_20;
  }
}

void sub_1C5AE5344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v15)
  {
    dispatch_group_leave(v15);
    dispatch_release(v15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ABMServerInternal::stop_sync(uint64_t a1, NSObject **a2)
{
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 272) + 88))(*(void *)(a1 + 272), 2);
  CFTypeID v15 = 0xAAAAAAAAAAAAAAAALL;
  ServiceManager::shutdownDynamicServices(*(ServiceManager **)(a1 + 288), &v15);
  char v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4 || (uint64_t v5 = *(void *)(a1 + 8), (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = v15;
  uint64_t v9 = *(NSObject **)(a1 + 24);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZN17ABMServerInternal9stop_syncEN8dispatch13group_sessionE_block_invoke;
  block[3] = &__block_descriptor_tmp_19_0;
  block[4] = a1;
  block[5] = v5;
  uint64_t v13 = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = *a2;
  dispatch_group_t group = v10;
  if (v10)
  {
    dispatch_retain(v10);
    dispatch_group_enter(group);
  }
  dispatch_group_notify(v8, v9, block);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  uint64_t v11 = v13;
  if (!v13 || atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_11:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_12:
  if (v15) {
    dispatch_release(v15);
  }
}

void sub_1C5AE5568(_Unwind_Exception *exception_object)
{
  long long v3 = *(NSObject **)(v1 - 56);
  if (v3) {
    dispatch_release(v3);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN17ABMServerInternal8shutdownEP16dispatch_group_s_block_invoke(void *a1)
{
  long long v3 = (ABMServerInternal *)a1[5];
  unsigned int v2 = a1[6];
  dispatch_object_t v4 = v2;
  if (v2)
  {
    dispatch_retain(v2);
    dispatch_group_enter(v2);
  }
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = ABMServerInternal::checkShutdown_sync(v3, &v4);
  if (v2)
  {
    dispatch_group_leave(v2);
    dispatch_release(v2);
  }
}

void sub_1C5AE5618(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ABMServerInternal::checkShutdown_sync(ABMServerInternal *this, dispatch_object_t *a2)
{
  switch(*((_DWORD *)this + 48))
  {
    case 0:
    case 2:
      dispatch_object_t v4 = *a2;
      if (*a2)
      {
        dispatch_retain(*a2);
        dispatch_group_enter(v4);
      }
      uint64_t v5 = *((void *)this + 25);
      *((void *)this + 25) = v4;
      if (!v5) {
        return 1;
      }
      dispatch_group_leave(v5);
      size_t v6 = v5;
      goto LABEL_25;
    case 1:
      ABMServerInternal::changeState_sync(this, 4);
      uint64_t v7 = (const void *)*MEMORY[0x1E4F4C5F0];
      size_t v8 = strlen((const char *)*MEMORY[0x1E4F4C5F0]);
      if (v8 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = (void *)v8;
      if (v8 >= 0x17)
      {
        uint64_t v13 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v8 | 7) != 0x17) {
          uint64_t v13 = v8 | 7;
        }
        uint64_t v14 = v13 + 1;
        uint64_t v10 = (void **)operator new(v13 + 1);
        __dst[1] = v9;
        unint64_t v17 = v14 | 0x8000000000000000;
        __dst[0] = v10;
      }
      else
      {
        HIBYTE(v17) = v8;
        uint64_t v10 = __dst;
        if (!v8) {
          goto LABEL_19;
        }
      }
      memmove(v10, v7, (size_t)v9);
LABEL_19:
      *((unsigned char *)v9 + (void)v10) = 0;
      ABMServerInternal::broadcastServerState_sync(this, (uint64_t)__dst);
      if (SHIBYTE(v17) < 0) {
        operator delete(__dst[0]);
      }
      uint64_t v11 = *a2;
      CFTypeID v15 = v11;
      if (v11)
      {
        dispatch_retain(v11);
        dispatch_group_enter(v11);
      }
      ABMServerInternal::shutdown_sync((uint64_t)this, &v15);
      if (v11)
      {
LABEL_24:
        dispatch_group_leave(v11);
        size_t v6 = v11;
LABEL_25:
        dispatch_release(v6);
      }
      return 1;
    case 3:
      ABMServerInternal::finishShutdown_sync(this);
      uint64_t v11 = *((void *)this + 25);
      *((void *)this + 25) = 0;
      if (!v11) {
        return 1;
      }
      goto LABEL_24;
    case 4:
      return 0;
    case 5:
      uint64_t v11 = *((void *)this + 25);
      *((void *)this + 25) = 0;
      if (!v11) {
        return 1;
      }
      goto LABEL_24;
    default:
      return 1;
  }
}

void sub_1C5AE5808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v15)
  {
    dispatch_group_leave(v15);
    dispatch_release(v15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ABMServerInternal::getRunLoop(ABMServerInternal *this)
{
  return *((void *)this + 26);
}

void ABMServerInternal::shutdown_sync(uint64_t a1, NSObject **a2)
{
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 272) + 88))(*(void *)(a1 + 272), 4);
  dispatch_object_t v4 = *a2;
  uint64_t v5 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  ABMServerInternal::stop_sync(a1, &v5);
  if (v4)
  {
    dispatch_group_leave(v4);
    dispatch_release(v4);
  }
}

void sub_1C5AE5914(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

char *to_string(unsigned int a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a1 >= 6)
  {
    GetABMLogServer(v6);
    long long v3 = *((void *)GetGlobalLogger(v6) + 4);
    std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)v6);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)pthread_attr_t buf = 67109120;
      LODWORD(v8) = a1;
      _os_log_fault_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_FAULT, "Unknown server state %d", buf, 8u);
    }
    GetABMLogServer(v5);
    dispatch_object_t v4 = *((void *)GetGlobalLogger(v5) + 4);
    std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)v5);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)pthread_attr_t buf = 136315906;
      size_t v8 = "ABM ASSERT";
      __int16 v9 = 2080;
      uint64_t v10 = "false";
      __int16 v11 = 2080;
      CFTypeRef v12 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Ser"
            "ver/ABMServer.cpp";
      __int16 v13 = 1024;
      int v14 = 87;
      _os_log_fault_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", buf, 0x26u);
    }
    __break(1u);
  }
  return off_1E651B9B0[a1];
}

void sub_1C5AE5A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C5AE5AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN17ABMServerInternal17startRunLoop_syncEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  pthread_setname_np("ABM.Server.RunLoop");
  pthread_set_qos_class_self_np(QOS_CLASS_DEFAULT, 0);
  *(void *)(v2 + 208) = CFRunLoopGetCurrent();
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  long long v3 = *(NSObject **)(v2 + 112);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)dispatch_object_t v4 = 0;
    _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I ABM RunLoop Started", v4, 2u);
  }
}

void __copy_helper_block_e8_40c21_ZTSN8dispatch5groupE(uint64_t a1, uint64_t a2)
{
  long long v3 = *(NSObject **)(a2 + 40);
  *(void *)(a1 + 40) = v3;
  if (v3) {
    dispatch_retain(v3);
  }
}

void __destroy_helper_block_e8_40c21_ZTSN8dispatch5groupE(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 40);
  if (v1) {
    dispatch_release(v1);
  }
}

uint64_t sServerRunLoopMain(void (**a1)(void))
{
  memset(&context, 0, sizeof(context));
  CFRunLoopSourceRef v2 = CFRunLoopSourceCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, &context);
  if (v2)
  {
    long long v3 = v2;
    Current = CFRunLoopGetCurrent();
    CFStringRef v5 = (const __CFString *)*MEMORY[0x1E4F1D418];
    CFRunLoopAddSource(Current, v3, (CFRunLoopMode)*MEMORY[0x1E4F1D418]);
    a1[2](a1);
    while ((CFRunLoopRunInMode(v5, 1.79769313e308, 1u) - 1) > 1)
      ;
    size_t v6 = CFRunLoopGetCurrent();
    CFRunLoopRemoveSource(v6, v3, v5);
    CFRelease(v3);
    return 0;
  }
  size_t v8 = GetOsLogContext()[1];
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
    return 0;
  }
  *(_WORD *)__int16 v9 = 0;
  _os_log_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_DEFAULT, "Failed to create dummySource for runloop", v9, 2u);
  return 0;
}

void ABMServerInternal::stopRunLoop_sync(ABMServerInternal *this)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  CFRunLoopSourceRef v2 = *((void *)this + 14);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v5[0]) = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Stopping ABM RunLoop", (uint8_t *)v5, 2u);
  }
  usleep(0x7A120u);
  CFRunLoopStop(*((CFRunLoopRef *)this + 26));
  *((void *)this + 26) = 0;
  int v3 = pthread_join(*((pthread_t *)this + 27), 0);
  *((void *)this + 27) = 0;
  dispatch_object_t v4 = *((void *)this + 14);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Stopped ABM RunLoop: %d", (uint8_t *)v5, 8u);
  }
}

uint64_t ABMServer::getProfile(ABMServer *this)
{
  return 3;
}

uint64_t ___ZN17ABMServerInternal10start_syncEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  ABMServerInternal::changeState_sync(v1, 1u);
  CFRunLoopSourceRef v2 = (const void *)*MEMORY[0x1E4F4C4D8];
  size_t v3 = strlen((const char *)*MEMORY[0x1E4F4C4D8]);
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  dispatch_object_t v4 = (void *)v3;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    CFStringRef v5 = (void **)operator new(v6 + 1);
    __dst[1] = v4;
    unint64_t v15 = v7 | 0x8000000000000000;
    __dst[0] = v5;
    goto LABEL_8;
  }
  HIBYTE(v15) = v3;
  CFStringRef v5 = __dst;
  if (v3) {
LABEL_8:
  }
    memmove(v5, v2, (size_t)v4);
  *((unsigned char *)v4 + (void)v5) = 0;
  ABMServerInternal::broadcastServerState_sync((void *)v1, (uint64_t)__dst);
  if (SHIBYTE(v15) < 0)
  {
    operator delete(__dst[0]);
    BOOL isBootSessionChanged = sys::isBootSessionChanged(v10);
    if (!isBootSessionChanged) {
      return (*(uint64_t (**)(void, uint64_t))(**(void **)(v1 + 272) + 88))(*(void *)(v1 + 272), 1);
    }
  }
  else
  {
    BOOL isBootSessionChanged = sys::isBootSessionChanged(v8);
    if (!isBootSessionChanged) {
      return (*(uint64_t (**)(void, uint64_t))(**(void **)(v1 + 272) + 88))(*(void *)(v1 + 272), 1);
    }
  }
  if ((sys::updateBootSessionUUID((sys *)isBootSessionChanged) & 1) == 0)
  {
    __int16 v11 = *(NSObject **)(v1 + 112);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int16 v13 = 0;
      _os_log_error_impl(&dword_1C59C6000, v11, OS_LOG_TYPE_ERROR, "Failed to update session id", v13, 2u);
    }
  }
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(v1 + 272) + 88))(*(void *)(v1 + 272), 1);
}

void sub_1C5AE5F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c42_ZTSNSt3__110shared_ptrIN3ctu9XpcServerEEE56c30_ZTSN8dispatch13group_sessionE(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  dispatch_object_t v4 = a2[7];
  a1[7] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    CFStringRef v5 = a1[7];
    if (v5)
    {
      dispatch_group_enter(v5);
    }
  }
}

void __destroy_helper_block_e8_40c42_ZTSNSt3__110shared_ptrIN3ctu9XpcServerEEE56c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  CFRunLoopSourceRef v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 56);
    if (v3) {
      dispatch_release(v3);
    }
  }
  dispatch_object_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void ___ZN17ABMServerInternal9stop_syncEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  CFRunLoopSourceRef v2 = *(ABMServerInternal **)(a1 + 32);
  uint64_t v1 = v2;
  if (*((_DWORD *)v2 + 48) == 4)
  {
    ABMServerInternal::finishShutdown_sync(v2);
  }
  else
  {
    ABMServerInternal::changeState_sync(v2, 3);
    (*(void (**)(void, uint64_t))(**((void **)v1 + 34) + 88))(*((void *)v1 + 34), 3);
    dispatch_object_t v4 = *((void *)v1 + 14);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__pn_.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I --------- ABM stop completed ---------", (uint8_t *)&buf, 2u);
    }
  }
  *((unsigned char *)&buf.__pn_.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&buf, "/tmp/abm.shutdown");
  if (remove(&buf, v3)) {
    unlink((const char *)&buf);
  }
  CFStringRef v5 = (const void *)*MEMORY[0x1E4F4C4E0];
  size_t v6 = strlen((const char *)*MEMORY[0x1E4F4C4E0]);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    size_t v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    unint64_t v22 = v10 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_14;
  }
  HIBYTE(v22) = v6;
  size_t v8 = __dst;
  if (v6) {
LABEL_14:
  }
    memmove(v8, v5, (size_t)v7);
  *((unsigned char *)v7 + (void)v8) = 0;
  ABMServerInternal::broadcastServerState_sync(v1, (uint64_t)__dst);
  if (SHIBYTE(v22) < 0) {
    operator delete(__dst[0]);
  }
  __int16 v11 = (const void *)*MEMORY[0x1E4F4C510];
  size_t v12 = strlen((const char *)*MEMORY[0x1E4F4C510]);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  __int16 v13 = (void *)v12;
  if (v12 >= 0x17)
  {
    uint64_t v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v15 = v12 | 7;
    }
    uint64_t v16 = v15 + 1;
    int v14 = operator new(v15 + 1);
    __p[1] = v13;
    unint64_t v20 = v16 | 0x8000000000000000;
    __p[0] = v14;
    goto LABEL_24;
  }
  HIBYTE(v20) = v12;
  int v14 = __p;
  if (v12) {
LABEL_24:
  }
    memmove(v14, v11, (size_t)v13);
  *((unsigned char *)v13 + (void)v14) = 0;
  unint64_t v17 = 0;
  char v18 = 0;
  ABMServerInternal::broadcast_sync(v1, (uint64_t)__p, &v18, &v17);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C5AE629C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(a1);
}

void ABMServerInternal::finishStop_sync(ABMServerInternal *this)
{
  ABMServerInternal::changeState_sync((uint64_t)this, 3u);
  (*(void (**)(void, uint64_t))(**((void **)this + 34) + 88))(*((void *)this + 34), 3);
  CFRunLoopSourceRef v2 = *((void *)this + 14);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I --------- ABM stop completed ---------", v3, 2u);
  }
}

void *ABMServerInternal::getClientState_sync@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  CFStringRef v5 = *(void **)(a1 + 152);
  uint64_t result = (void *)(a1 + 152);
  dispatch_object_t v4 = v5;
  if (v5)
  {
    unint64_t v6 = *a2;
    uint64_t v7 = result;
    do
    {
      unint64_t v8 = v4[4];
      BOOL v9 = v8 >= v6;
      if (v8 >= v6) {
        uint64_t v10 = v4;
      }
      else {
        uint64_t v10 = v4 + 1;
      }
      if (v9) {
        uint64_t v7 = v4;
      }
      dispatch_object_t v4 = (void *)*v10;
    }
    while (*v10);
    if (v7 != result && v6 >= v7[4])
    {
      uint64_t v12 = v7[5];
      uint64_t v11 = v7[6];
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
      }
      *a3 = v12;
      a3[1] = v11;
    }
  }
  return result;
}

void ABMServerInternal::handleServerError_sync(uint64_t a1, xpc::object *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v2 = *(_DWORD *)(a1 + 192);
  if (v2 != 3 && v2 != 5)
  {
    CFStringRef v5 = *(NSObject **)(a1 + 112);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      xpc::object::to_string((uint64_t *)__p, a2);
      if (v8 >= 0) {
        unint64_t v6 = __p;
      }
      else {
        unint64_t v6 = (void **)__p[0];
      }
      *(_DWORD *)std::__fs::filesystem::path buf = 136315138;
      uint64_t v10 = v6;
      _os_log_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_DEFAULT, "#I Server error: %s", buf, 0xCu);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void ___ZN17ABMServerInternal26handleInternalMessage_syncEN3xpc10connectionERNS0_4dictE_block_invoke(uint64_t a1)
{
  int v2 = *(void **)(a1 + 32);
  CFTypeRef cf = 0;
  uint64_t v3 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable) {
    CFTypeRef cf = Mutable;
  }
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x1E4F4C250], (const __CFString **)*MEMORY[0x1E4F4C4D8], v3, v5);
  unint64_t v6 = *(void **)(a1 + 40);
  xpc_object_t object = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  uint64_t v7 = (const void *)*MEMORY[0x1E4F4C890];
  size_t v8 = strlen((const char *)*MEMORY[0x1E4F4C890]);
  if (v8 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  BOOL v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    uint64_t v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v12 = v8 | 7;
    }
    uint64_t v13 = v12 + 1;
    uint64_t v10 = (void **)operator new(v12 + 1);
    __dst[1] = v9;
    unint64_t v19 = v13 | 0x8000000000000000;
    __dst[0] = v10;
LABEL_14:
    memmove(v10, v7, (size_t)v9);
    *((unsigned char *)v9 + (void)v10) = 0;
    CFTypeRef v11 = cf;
    if (!cf) {
      goto LABEL_17;
    }
    goto LABEL_15;
  }
  HIBYTE(v19) = v8;
  uint64_t v10 = __dst;
  if (v8) {
    goto LABEL_14;
  }
  LOBYTE(__dst[0]) = 0;
  CFTypeRef v11 = cf;
  if (!cf) {
    goto LABEL_17;
  }
LABEL_15:
  CFTypeID v14 = CFGetTypeID(v11);
  if (v14 == CFDictionaryGetTypeID())
  {
    unint64_t v17 = (ctu *)v11;
    CFRetain(v11);
    uint64_t v15 = v11;
    goto LABEL_18;
  }
LABEL_17:
  uint64_t v15 = 0;
  unint64_t v17 = 0;
LABEL_18:
  uint64_t v16 = 0;
  ABMServerInternal::unicast_sync(v2, &object, (uint64_t)__dst, &v17, &v16);
  if (v15) {
    CFRelease(v15);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(__dst[0]);
  }
  xpc_release(object);
  xpc_object_t object = 0;
  if (v11) {
    CFRelease(v11);
  }
}

void sub_1C5AE6698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, xpc_object_t object, const void *a19)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a19);
  _Unwind_Resume(a1);
}

void ABMServerInternal::unicast_sync(void *a1, xpc_object_t *a2, uint64_t a3, ctu **a4, void **a5)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  xpc_object_t v10 = xpc_dictionary_create(0, 0, 0);
  if (v10 || (xpc_object_t v10 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v10) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v10);
      xpc_object_t v11 = v10;
    }
    else
    {
      xpc_object_t v11 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    xpc_object_t v10 = 0;
  }
  xpc_release(v10);
  if (*a4) {
    uint64_t v13 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    uint64_t v13 = 0;
  }
  if (v13)
  {
    ctu::cf_to_xpc((uint64_t *)&v65, *a4, v12);
    xpc_dictionary_set_value(v11, kKeyEventData[0], v65);
    xpc_object_t v14 = v65;
    xpc_object_t v65 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v65);
    xpc_object_t v65 = 0;
  }
  xpc_object_t v15 = xpc_string_create(kCommandSignalNotification[0]);
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, kKeyCommand[0], v15);
  xpc_object_t v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  unint64_t v17 = (const char *)a3;
  if (*(char *)(a3 + 23) < 0) {
    unint64_t v17 = *(const char **)a3;
  }
  xpc_object_t v18 = xpc_string_create(v17);
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, kKeyEvent[0], v18);
  xpc_object_t v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  unint64_t v20 = dispatch_group_create();
  uint64_t v21 = (std::__shared_weak_count *)a1[2];
  if (!v21 || (uint64_t v22 = a1[1], (v23 = std::__shared_weak_count::lock(v21)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v24 = v23;
  atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    unint64_t v63 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v64 = 0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v25 = *a2;
    if (*a2) {
      goto LABEL_22;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v24);
    unint64_t v63 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v64 = 0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v25 = *a2;
    if (*a2)
    {
LABEL_22:
      xpc_retain(v25);
      unint64_t v63 = 0;
      unint64_t v64 = 0;
      uint64_t v26 = a1 + 19;
      long long v27 = (void *)a1[19];
      if (!v27) {
        goto LABEL_36;
      }
      goto LABEL_26;
    }
  }
  xpc_object_t v25 = xpc_null_create();
  unint64_t v63 = 0;
  unint64_t v64 = 0;
  uint64_t v26 = a1 + 19;
  long long v27 = (void *)a1[19];
  if (!v27)
  {
LABEL_36:
    unint64_t v32 = 0;
    goto LABEL_37;
  }
LABEL_26:
  uint64_t v28 = v26;
  do
  {
    unint64_t v29 = v27[4];
    BOOL v30 = v29 >= (unint64_t)v25;
    if (v29 >= (unint64_t)v25) {
      long long v31 = v27;
    }
    else {
      long long v31 = v27 + 1;
    }
    if (v30) {
      uint64_t v28 = v27;
    }
    long long v27 = (void *)*v31;
  }
  while (*v31);
  if (v28 == v26 || (unint64_t)v25 < v28[4]) {
    goto LABEL_36;
  }
  unint64_t v32 = v28[5];
  unint64_t v39 = v28[6];
  if (v39) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v39 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v63 = v32;
  unint64_t v64 = v39;
LABEL_37:
  xpc_release(v25);
  if (!v32
    || (uint64_t *)(v32 + 40) == std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>(v32 + 32, (const void **)a3))
  {
    goto LABEL_66;
  }
  uint64_t SystemTime = TelephonyUtilGetSystemTime();
  uint64_t v49 = v22;
  size_t v34 = (xpc_connection_t *)a2;
  uint64_t v35 = a1[14];
  if (!os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_51;
  }
  uint64_t v36 = (const void *)a3;
  if (*(char *)(a3 + 23) < 0)
  {
    uint64_t v36 = *(const void **)a3;
    unint64_t v37 = v63;
    if ((*(char *)(v63 + 23) & 0x80000000) == 0) {
      goto LABEL_42;
    }
  }
  else
  {
    unint64_t v37 = v63;
    if ((*(char *)(v63 + 23) & 0x80000000) == 0)
    {
LABEL_42:
      long long v38 = *(_OWORD *)v37;
      v62.__r_.__value_.__r.__words[2] = *(void *)(v37 + 16);
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v38;
      goto LABEL_48;
    }
  }
  std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)v37, *(void *)(v37 + 8));
LABEL_48:
  uint64_t v40 = &v62;
  if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v40 = (std::string *)v62.__r_.__value_.__r.__words[0];
  }
  *(_DWORD *)std::__fs::filesystem::path buf = 136315650;
  long long v67 = v36;
  __int16 v68 = 2080;
  std::string::size_type v69 = v40;
  __int16 v70 = 2048;
  uint64_t v71 = SystemTime;
  _os_log_impl(&dword_1C59C6000, v35, OS_LOG_TYPE_DEFAULT, "#I Sending %s to %s at %llu", buf, 0x20u);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v62.__r_.__value_.__l.__data_);
    if (*a5) {
      goto LABEL_52;
    }
LABEL_65:
    a2 = (xpc_object_t *)v34;
    xpc_connection_send_message(*v34, v11);
    uint64_t v22 = v49;
    goto LABEL_66;
  }
LABEL_51:
  if (!*a5) {
    goto LABEL_65;
  }
LABEL_52:
  uint64_t v41 = a5;
  dispatch_group_enter(v20);
  int v42 = *v34;
  xpc_object_t v43 = a1[3];
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 1174405120;
  handler[2] = ___ZN17ABMServerInternal12unicast_syncEN3xpc10connectionENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke;
  handler[3] = &__block_descriptor_tmp_36_3;
  handler[4] = a1;
  handler[5] = v49;
  std::string::size_type v56 = v24;
  atomic_fetch_add_explicit(&v24->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unint64_t v57 = v63;
  std::string::size_type v58 = (std::__shared_weak_count *)v64;
  if (v64) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v64 + 8), 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  uint64_t v60 = SystemTime;
  uint64_t v61 = v20;
  xpc_connection_send_message_with_reply(v42, v11, v43, handler);
  a5 = v41;
  a2 = (xpc_object_t *)v34;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  char v44 = v58;
  uint64_t v22 = v49;
  if (v58 && !atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
  if (v56) {
    std::__shared_weak_count::__release_weak(v56);
  }
LABEL_66:
  if (!*a5) {
    goto LABEL_80;
  }
  uint64_t v45 = a1[3];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZN17ABMServerInternal12unicast_syncEN3xpc10connectionENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke_37;
  block[3] = &__block_descriptor_tmp_38_1;
  block[4] = a1;
  block[5] = v22;
  uint64_t v51 = v24;
  atomic_fetch_add_explicit(&v24->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v46 = *a2;
  xpc_object_t object = v46;
  if (!v46)
  {
    xpc_object_t object = xpc_null_create();
    if ((*(char *)(a3 + 23) & 0x80000000) == 0) {
      goto LABEL_69;
    }
LABEL_71:
    std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    goto LABEL_72;
  }
  xpc_retain(v46);
  if (*(char *)(a3 + 23) < 0) {
    goto LABEL_71;
  }
LABEL_69:
  std::string v53 = *(std::string *)a3;
LABEL_72:
  uint64_t v47 = *a5;
  if (*a5) {
    uint64_t v47 = _Block_copy(v47);
  }
  aBlocunint64_t k = v47;
  dispatch_group_notify(v20, v45, block);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  xpc_release(object);
  xpc_object_t object = 0;
  if (v51) {
    std::__shared_weak_count::__release_weak(v51);
  }
LABEL_80:
  dispatch_release(v20);
  uint64_t v48 = (std::__shared_weak_count *)v64;
  if (v64 && !atomic_fetch_add((atomic_ullong *volatile)(v64 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
  std::__shared_weak_count::__release_weak(v24);
  xpc_release(v11);
}

void sub_1C5AE6DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, xpc_object_t object, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v39 - 168);
  std::__shared_weak_count::__release_weak(v38);
  xpc_release(v37);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_40c22_ZTSN3xpc10connectionE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v3;
  if (v3) {
    return xpc_retain(v3);
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c22_ZTSN3xpc10connectionE(uint64_t a1)
{
  *(void *)(a1 + 40) = 0;
}

void ___ZN17ABMServerInternal20registerNotificationEN3xpc10connectionEbN3ctu2cf11CFSharedRefIK9__CFArrayEE_block_invoke(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (xpc::object *)(a1 + 40);
  xpc_object_t v4 = *(xpc_object_t *)(a1 + 40);
  if (v4)
  {
    xpc_retain(*(xpc_object_t *)(a1 + 40));
    uint64_t v24 = 0;
    xpc_object_t v25 = 0;
    CFAllocatorRef v5 = (void *)(v2 + 152);
    unint64_t v6 = *(void **)(v2 + 152);
    if (!v6) {
      goto LABEL_15;
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    uint64_t v24 = 0;
    xpc_object_t v25 = 0;
    CFAllocatorRef v5 = (void *)(v2 + 152);
    unint64_t v6 = *(void **)(v2 + 152);
    if (!v6)
    {
LABEL_15:
      xpc_object_t v11 = 0;
      goto LABEL_16;
    }
  }
  uint64_t v7 = v5;
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= (unint64_t)v4;
    if (v8 >= (unint64_t)v4) {
      xpc_object_t v10 = v6;
    }
    else {
      xpc_object_t v10 = v6 + 1;
    }
    if (v9) {
      uint64_t v7 = v6;
    }
    unint64_t v6 = (void *)*v10;
  }
  while (*v10);
  if (v7 == v5 || (unint64_t)v4 < v7[4]) {
    goto LABEL_15;
  }
  xpc_object_t v11 = (char *)v7[5];
  xpc_object_t v18 = (std::__shared_weak_count *)v7[6];
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v24 = v11;
  xpc_object_t v25 = v18;
LABEL_16:
  xpc_release(v4);
  if (!v11)
  {
    xpc_object_t v16 = *(NSObject **)(v2 + 112);
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      goto LABEL_38;
    }
    xpc::object::to_string((uint64_t *)&__p, v3);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::__fs::filesystem::path buf = 136315138;
    long long v27 = p_p;
    _os_log_error_impl(&dword_1C59C6000, v16, OS_LOG_TYPE_ERROR, "%s is not in client list", buf, 0xCu);
    goto LABEL_36;
  }
  int v12 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v13 = *(const void **)(a1 + 48);
  CFTypeRef cf = v13;
  if (v13) {
    CFRetain(v13);
  }
  ServerClientState::registerNotification_sync((void **)&v24, v12 != 0, &cf);
  if (cf) {
    CFRelease(cf);
  }
  xpc_object_t v14 = *(NSObject **)(v2 + 112);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    if (v24[23] < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v24, *((void *)v24 + 1));
    }
    else
    {
      long long v15 = *(_OWORD *)v24;
      __p.__r_.__value_.__r.__words[2] = *((void *)v24 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v15;
    }
    xpc_object_t v19 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      xpc_object_t v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    uint64_t v20 = *(void *)(a1 + 48);
    *(_DWORD *)std::__fs::filesystem::path buf = 136315394;
    long long v27 = v19;
    __int16 v28 = 2112;
    uint64_t v29 = v20;
    _os_log_impl(&dword_1C59C6000, v14, OS_LOG_TYPE_DEFAULT, "#I %s registered for: %@", buf, 0x16u);
LABEL_36:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
LABEL_38:
  uint64_t v21 = v25;
  if (v25)
  {
    if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1C5AE71EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C5AE7200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C5AE7214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void __destroy_helper_block_e8_40c22_ZTSN3xpc10connectionE48c39_ZTSN3ctu2cf11CFSharedRefIK9__CFArrayEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2) {
    CFRelease(v2);
  }
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
}

void ___ZN17ABMServerInternal9broadcastENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (*(char *)(a1 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
    uint64_t v3 = *(ctu **)(a1 + 64);
    uint64_t v7 = v3;
    if (!v3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  std::string v8 = *(std::string *)(a1 + 40);
  uint64_t v3 = *(ctu **)(a1 + 64);
  uint64_t v7 = v3;
  if (v3) {
LABEL_5:
  }
    CFRetain(v3);
LABEL_6:
  xpc_object_t v4 = *(const void **)(a1 + 72);
  if (v4) {
    CFAllocatorRef v5 = _Block_copy(v4);
  }
  else {
    CFAllocatorRef v5 = 0;
  }
  unint64_t v6 = v5;
  ABMServerInternal::broadcast_sync(v2, (uint64_t)&v8, &v7, &v6);
  if (v5) {
    _Block_release(v5);
  }
  if (v3) {
    CFRelease(v3);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
}

void sub_1C5AE7390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (v16) {
    _Block_release(v16);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE72c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1, uint64_t a2)
{
  xpc_object_t v4 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
    unint64_t v6 = *(const void **)(a2 + 64);
    *(void *)(a1 + 64) = v6;
    if (!v6) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
  *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  unint64_t v6 = *(const void **)(a2 + 64);
  *(void *)(a1 + 64) = v6;
  if (v6) {
LABEL_5:
  }
    CFRetain(v6);
LABEL_6:
  xpc_object_t result = *(void **)(a2 + 72);
  if (result) {
    xpc_object_t result = _Block_copy(result);
  }
  *(void *)(a1 + 72) = result;
  return result;
}

void __destroy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE72c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 72);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 64);
  if (v3) {
    CFRelease(v3);
  }
  if (*(char *)(a1 + 63) < 0)
  {
    xpc_object_t v4 = *(void **)(a1 + 40);
    operator delete(v4);
  }
}

void ___ZN17ABMServerInternal14broadcast_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2 && (uint64_t v3 = *(void *)(a1 + 32), v4 = std::__shared_weak_count::lock(v2), (v15 = v4) != 0))
  {
    long long v5 = v4;
    if (*(void *)(a1 + 40))
    {
      unint64_t v6 = *(NSObject **)(v3 + 112);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = *(long long **)(a1 + 56);
        if (*((char *)v7 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v7, *((void *)v7 + 1));
        }
        else
        {
          long long v8 = *v7;
          __p.__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
        }
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        xpc_object_t v11 = (void *)(a1 + 72);
        if (*(char *)(a1 + 95) < 0) {
          xpc_object_t v11 = (void *)*v11;
        }
        uint64_t v12 = *(void *)(a1 + 96);
        *(_DWORD *)std::__fs::filesystem::path buf = 136315650;
        unint64_t v17 = p_p;
        __int16 v18 = 2080;
        xpc_object_t v19 = v11;
        __int16 v20 = 2048;
        uint64_t v21 = v12;
        _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#I %s responded to %s sent at %llu", buf, 0x20u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 104));
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    BOOL v9 = *(NSObject **)(a1 + 104);
    dispatch_group_leave(v9);
  }
}

void sub_1C5AE7680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE56c23_ZTS17ServerClientState72c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  std::string::size_type v3 = *(void *)(a2 + 48);
  a1[1].__r_.__value_.__r.__words[2] = *(void *)(a2 + 40);
  a1[2].__r_.__value_.__r.__words[0] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  std::string::size_type v4 = *(void *)(a2 + 64);
  a1[2].__r_.__value_.__l.__size_ = *(void *)(a2 + 56);
  a1[2].__r_.__value_.__r.__words[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  long long v5 = a1 + 3;
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 72);
    a1[3].__r_.__value_.__r.__words[2] = *(void *)(a2 + 88);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_1C5AE772C(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v2);
  std::string::size_type v4 = *(std::__shared_weak_count **)(v1 + 48);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE56c23_ZTS17ServerClientState72c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
  {
    operator delete(*(void **)(a1 + 72));
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v2) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v2) {
      goto LABEL_6;
    }
  }
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    std::string::size_type v3 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v3) {
      return;
    }
    goto LABEL_7;
  }
LABEL_6:
  std::string::size_type v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v3) {
    return;
  }
LABEL_7:

  std::__shared_weak_count::__release_weak(v3);
}

uint64_t std::pair<xpc::connection const,ServerClientState>::~pair(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  xpc_release(*(xpc_object_t *)a1);
  *(void *)a1 = 0;
  return a1;
}

void ___ZN17ABMServerInternal14broadcast_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke_32(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  std::string::size_type v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::string::size_type v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      if (*(void *)(a1 + 40))
      {
        long long v5 = *(NSObject **)(v2 + 112);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          long long v6 = (void *)(a1 + 56);
          if (*(char *)(a1 + 79) < 0) {
            long long v6 = (void *)*v6;
          }
          *(_DWORD *)std::__fs::filesystem::path buf = 136315138;
          long long v8 = v6;
          _os_log_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_DEFAULT, "#I All clients responded to %s", buf, 0xCu);
        }
      }
    }
  }
  else
  {
    std::string::size_type v4 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1C5AE79B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *__copy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  long long v5 = (std::string *)(a1 + 7);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 56);
    a1[9] = *(void *)(a2 + 72);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  xpc_object_t result = *(void **)(a2 + 80);
  if (result) {
    xpc_object_t result = _Block_copy(result);
  }
  a1[10] = result;
  return result;
}

void sub_1C5AE7A40(_Unwind_Exception *exception_object)
{
  std::string::size_type v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 80);
  if (v2) {
    _Block_release(v2);
  }
  if (*(char *)(a1 + 79) < 0)
  {
    operator delete(*(void **)(a1 + 56));
    std::string::size_type v3 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v3) {
      return;
    }
  }
  else
  {
    std::string::size_type v3 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v3) {
      return;
    }
  }

  std::__shared_weak_count::__release_weak(v3);
}

void ___ZN17ABMServerInternal12unicast_syncEN3xpc10connectionENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2 && (uint64_t v3 = *(void *)(a1 + 32), v4 = std::__shared_weak_count::lock(v2), (v15 = v4) != 0))
  {
    long long v5 = v4;
    if (*(void *)(a1 + 40))
    {
      long long v6 = *(NSObject **)(v3 + 112);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = *(long long **)(a1 + 56);
        if (*((char *)v7 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v7, *((void *)v7 + 1));
        }
        else
        {
          long long v8 = *v7;
          __p.__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
        }
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        xpc_object_t v11 = (void *)(a1 + 72);
        if (*(char *)(a1 + 95) < 0) {
          xpc_object_t v11 = (void *)*v11;
        }
        uint64_t v12 = *(void *)(a1 + 96);
        *(_DWORD *)std::__fs::filesystem::path buf = 136315650;
        unint64_t v17 = p_p;
        __int16 v18 = 2080;
        xpc_object_t v19 = v11;
        __int16 v20 = 2048;
        uint64_t v21 = v12;
        _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#I %s responded to %s sent at %llu", buf, 0x20u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 104));
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    uint64_t v9 = *(NSObject **)(a1 + 104);
    dispatch_group_leave(v9);
  }
}

void sub_1C5AE7C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN17ABMServerInternal12unicast_syncEN3xpc10connectionENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke_37(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v10 = 0;
  xpc_object_t v11 = 0;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    xpc_object_t v11 = v4;
    if (v4)
    {
      uint64_t v10 = *(void *)(a1 + 40);
      if (v10)
      {
        long long v5 = *(NSObject **)(v2 + 112);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          xpc::object::to_string((uint64_t *)__p, (xpc::object *)(a1 + 56));
          long long v6 = (void **)__p[0];
          if (v9 >= 0) {
            long long v6 = __p;
          }
          uint64_t v7 = (void *)(a1 + 64);
          if (*(char *)(a1 + 87) < 0) {
            uint64_t v7 = (void *)*v7;
          }
          *(_DWORD *)std::__fs::filesystem::path buf = 136315394;
          uint64_t v13 = v6;
          __int16 v14 = 2080;
          long long v15 = v7;
          _os_log_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_DEFAULT, "#I Client '%s' responded to %s", buf, 0x16u);
          if (v9 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 88) + 16))();
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1C5AE7E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C5AE7E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE56c23_ZTSKN3xpc10connectionE64c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  long long v5 = *(void **)(a2 + 56);
  a1[7] = v5;
  if (v5)
  {
    xpc_retain(v5);
    long long v6 = (std::string *)(a1 + 8);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0)
    {
LABEL_5:
      long long v7 = *(_OWORD *)(a2 + 64);
      v6->__r_.__value_.__r.__words[2] = *(void *)(a2 + 80);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
      goto LABEL_8;
    }
  }
  else
  {
    a1[7] = xpc_null_create();
    long long v6 = (std::string *)(a1 + 8);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 64), *(void *)(a2 + 72));
LABEL_8:
  xpc_object_t result = *(void **)(a2 + 88);
  if (result) {
    xpc_object_t result = _Block_copy(result);
  }
  a1[11] = result;
  return result;
}

void sub_1C5AE7EF4(_Unwind_Exception *a1)
{
  xpc::connection::~connection(v2);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 48);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE56c23_ZTSKN3xpc10connectionE64c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 88);
  if (v2) {
    _Block_release(v2);
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(void *)(a1 + 56) = 0;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

uint64_t ABMServer::previousShutdownWasClean(ABMServer *this)
{
  if (qword_1EBBDCD20 != -1) {
    dispatch_once(&qword_1EBBDCD20, &__block_literal_global_1);
  }
  return _MergedGlobals_2;
}

void ___ZN9ABMServer24previousShutdownWasCleanEv_block_invoke()
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  char v18 = 17;
  strcpy(__p, "/tmp/abm.shutdown");
  v0.tv_seCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
  v0.tv_nseCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v19.st_blkstd::string::size_type size = v0;
  *(timespec *)v19.st_qspare = v0;
  v19.st_birthtimespeCC_SHA256_CTX c = v0;
  *(timespec *)&v19.st_std::string::size_type size = v0;
  v19.st_mtimespeCC_SHA256_CTX c = v0;
  v19.st_ctimespeCC_SHA256_CTX c = v0;
  *(timespec *)&v19.st_uid = v0;
  v19.st_atimespeCC_SHA256_CTX c = v0;
  *(timespec *)&v19.st_dev = v0;
  int v1 = stat(__p, &v19);
  int v2 = v1;
  if (v18 < 0)
  {
    operator delete(*(void **)__p);
    if (v2) {
      goto LABEL_3;
    }
LABEL_12:
    GetABMLogServer(&v15);
    long long v8 = *((void *)GetGlobalLogger(&v15) + 4);
    char v9 = v16;
    if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v19.st_dev = 136315138;
      *(void *)&v19.st_mode = "abmserver";
      _os_log_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_DEFAULT, "#I %s: Previous shutdown was not clean", (uint8_t *)&v19, 0xCu);
    }
    _MergedGlobals_2 = 0;
    return;
  }
  if (!v1) {
    goto LABEL_12;
  }
LABEL_3:
  _MergedGlobals_2 = 1;
  HIBYTE(v19.st_gid) = 17;
  strcpy((char *)&v19, "/tmp/abm.shutdown");
  int v3 = open((const char *)&v19, 513, 420);
  int v4 = v3;
  if (SHIBYTE(v19.st_gid) < 0)
  {
    operator delete(*(void **)&v19.st_dev);
    if (v4 >= 1)
    {
      do
      {
LABEL_5:
        if (!close(v4)) {
          return;
        }
      }
      while (*__error() == 4);
      GetABMLogServer(&v13);
      long long v5 = *((void *)GetGlobalLogger(&v13) + 4);
      long long v6 = v14;
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
          return;
        }
      }
      else if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        return;
      }
      v19.st_dev = 136315394;
      *(void *)&v19.st_mode = "abmserver";
      WORD2(v19.st_ino) = 2080;
      *(__darwin_ino64_t *)((char *)&v19.st_ino + 6) = (__darwin_ino64_t)"/tmp/abm.shutdown";
      long long v7 = "%s: Failed closing %s";
      goto LABEL_27;
    }
  }
  else if (v3 >= 1)
  {
    goto LABEL_5;
  }
  GetABMLogServer(&v11);
  long long v5 = *((void *)GetGlobalLogger(&v11) + 4);
  uint64_t v10 = v12;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v19.st_dev = 136315394;
    *(void *)&v19.st_mode = "abmserver";
    WORD2(v19.st_ino) = 2080;
    *(__darwin_ino64_t *)((char *)&v19.st_ino + 6) = (__darwin_ino64_t)"/tmp/abm.shutdown";
    long long v7 = "%s: Failed creating %s";
LABEL_27:
    _os_log_error_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_ERROR, v7, (uint8_t *)&v19, 0x16u);
  }
}

void sub_1C5AE8338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C5AE834C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C5AE8360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C5AE8374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ABMServer::getRunLoop(ABMServer *this)
{
  return *(void *)(*(void *)this + 208);
}

uint64_t ctu::Loggable<ABMServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

void ctu::Loggable<ABMServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "server.main");
}

uint64_t ctu::Loggable<ABMServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<ABMServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F210B178;
  MEMORY[0x1C87940C0](a1 + 1);
  return a1;
}

void ctu::Loggable<ABMServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F210B178;
  MEMORY[0x1C87940C0](a1 + 1);

  operator delete(a1);
}

void std::__shared_ptr_pointer<ABMServer *,std::shared_ptr<ABMServer>::__shared_ptr_default_delete<ABMServer,ABMServer>,std::allocator<ABMServer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ABMServer *,std::shared_ptr<ABMServer>::__shared_ptr_default_delete<ABMServer,ABMServer>,std::allocator<ABMServer>>::__on_zero_shared(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count ***)(a1 + 24);
  if (v1)
  {
    int v2 = v1[1];
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      int v3 = v1;
    }
    else
    {
      int v3 = v1;
    }
    operator delete(v3);
  }
}

uint64_t std::__shared_ptr_pointer<ABMServer *,std::shared_ptr<ABMServer>::__shared_ptr_default_delete<ABMServer,ABMServer>,std::allocator<ABMServer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C5BC900ALL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C5BC900ALL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C5BC900ALL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C5BC900ALL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void *std::shared_ptr<ABMServerInternal>::shared_ptr[abi:ne180100]<ABMServerInternal,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210B208;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  long long v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 8) = a2;
      *(void *)(a2 + 16) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 8) = a2;
  *(void *)(a2 + 16) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C5AE8710(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1}::operator() const(ABMServerInternal*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C5AE8738(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<ABMServerInternal *,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal *)#1},std::allocator<ABMServerInternal>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ABMServerInternal *,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal *)#1},std::allocator<ABMServerInternal>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<ABMServerInternal *,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal *)#1},std::allocator<ABMServerInternal>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableINS_9XpcServerEE15make_shared_ptrI17ABMServerInternalEENSt3__110shared_"
                     "ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableINS_9XpcServerEE15make_shared_ptrI17ABMServerInternalEENSt3_"
                                "_110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableINS_9XpcServerEE15make_shared_ptrI17ABMServerInternalEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableINS_9XpcServerEE15make_shared_ptrI17ABMServerInternalEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1}::operator() const(ABMServerInternal*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  return result;
}

void std::__shared_ptr_emplace<Registry>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210B258;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Registry>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210B258;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<Registry>::__on_zero_shared(uint64_t a1)
{
  int v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    unint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v3) {
      return;
    }
  }
  else
  {
    unint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v3) {
      return;
    }
  }

  std::__shared_weak_count::__release_weak(v3);
}

void std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::destroy(*a1);
    std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::destroy(a1[1]);
    int v2 = (std::__shared_weak_count *)a1[6];
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    xpc_release((xpc_object_t)a1[4]);
    operator delete(a1);
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableINS1_9XpcServerEE15execute_wrappedIZZZN17ABMServerInternal4initENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEERKN3abm9OverridesEEUb_EUb0_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNS7_10unique_ptrISJ_NS7_14default_deleteISJ_EEEEENUlPvE_8__invokeESS_(void *a1)
{
  int v2 = (void *)*a1;
  unint64_t v3 = *(void **)*a1;
  int v4 = (void **)(*a1 + 8);
  if (*(char *)(*a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v14, (const std::string::value_type *)v2[1], v2[2]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v14.__r_.__value_.__r.__words[2] = *(void *)(*a1 + 24);
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v5;
  }
  long long v6 = (ctu *)v2[4];
  uint64_t v13 = v6;
  if (v6) {
    CFRetain(v6);
  }
  long long v7 = (const void *)v2[5];
  if (v7) {
    long long v8 = _Block_copy(v7);
  }
  else {
    long long v8 = 0;
  }
  uint64_t v12 = v8;
  ABMServerInternal::broadcast_sync(v3, (uint64_t)&v14, &v13, &v12);
  if (v8) {
    _Block_release(v8);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    char v9 = (const void *)v2[5];
    if (!v9) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  char v9 = (const void *)v2[5];
  if (v9) {
LABEL_17:
  }
    _Block_release(v9);
LABEL_18:
  uint64_t v10 = (const void *)v2[4];
  if (v10) {
    CFRelease(v10);
  }
  if (*((char *)v2 + 31) < 0) {
    operator delete(*v4);
  }
  operator delete(v2);
  uint64_t v11 = (std::__shared_weak_count *)a1[2];
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(a1);
}

void sub_1C5AE8B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v20 = *(const void **)(v17 + 40);
  if (v20) {
    _Block_release(v20);
  }
  uint64_t v21 = *(const void **)(v17 + 32);
  if (v21) {
    CFRelease(v21);
  }
  if (*(char *)(v17 + 31) < 0) {
    operator delete(*v18);
  }
  operator delete((void *)v17);
  uint64_t v22 = (std::__shared_weak_count *)v16[2];
  if (v22)
  {
    if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

void *___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

uint64_t ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrIKN3ctu9XpcServerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrIKN3ctu9XpcServerEEE(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

std::__shared_weak_count_vtbl **sys::UIObserver::create_default_global@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a1 + 8) = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v3 = (sys::UIObserver *)operator new(0x40uLL);
  sys::UIObserver::UIObserver(v3);

  return std::shared_ptr<sys::UIObserver>::shared_ptr[abi:ne180100]<sys::UIObserver,void>((std::__shared_weak_count_vtbl **)a1, (std::__shared_weak_count_vtbl *)v3);
}

void sub_1C5AE8D2C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

sys::UIObserver *sys::UIObserver::UIObserver(sys::UIObserver *this)
{
  uint64_t v2 = dispatch_queue_create("sys::UIObserver", 0);
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = v2;
  if (v2)
  {
    unint64_t v3 = v2;
    dispatch_retain(v2);
    *((void *)this + 3) = 0;
    dispatch_release(v3);
  }
  else
  {
    *((void *)this + 3) = 0;
  }
  *((void *)this + 4) = &unk_1F210B3C0;
  int v4 = (uint64_t *)operator new(0x28uLL);
  boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::signal_impl(v4);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>((void *)this + 5, (uint64_t)v4);
  *((void *)this + 7) = 0xFFFFFFFF00000000;
  return this;
}

void sub_1C5AE8DFC(_Unwind_Exception *a1)
{
  operator delete(v2);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v1);
  _Unwind_Resume(a1);
}

void sub_1C5AE8E18(_Unwind_Exception *a1)
{
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v1);
  _Unwind_Resume(a1);
}

uint64_t sys::UIObserver::handleDisplayLockedChange_sync(uint64_t this)
{
  if (*(_DWORD *)(this + 60) != -1)
  {
    uint64_t v1 = this;
    char v2 = SBSGetScreenLockStatus() != 0;
    return boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::operator()(*(uint64_t ****)(v1 + 40), v2);
  }
  return this;
}

void sys::UIObserver::registerForScreenLockedNotification_sync(sys::UIObserver *this)
{
  char v2 = (std::__shared_weak_count *)*((void *)this + 1);
  if (!v2 || (uint64_t v3 = *(void *)this, (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v5 = v4;
  p_shared_weak_owners = &v4->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN3sys10UIObserver40registerForScreenLockedNotification_syncEv_block_invoke;
  v7[3] = &__block_descriptor_tmp_32;
  v7[4] = v3;
  long long v8 = v5;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  notify_register_dispatch("com.apple.springboard.lockstate", (int *)this + 15, *((dispatch_queue_t *)this + 2), v7);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C5AE8F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  std::__shared_weak_count::__release_weak(v14);
  _Unwind_Resume(a1);
}

void ___ZN3sys10UIObserver40registerForScreenLockedNotification_syncEv_block_invoke(uint64_t a1)
{
  char v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      int v4 = v3;
      uint64_t v5 = *(void *)(a1 + 32);
      if (v5 && *(_DWORD *)(v5 + 60) != -1)
      {
        char v6 = SBSGetScreenLockStatus() != 0;
        boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::operator()(*(uint64_t ****)(v5 + 40), v6);
      }
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1C5AE907C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c41_ZTSNSt3__18weak_ptrIN3sys10UIObserverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c41_ZTSNSt3__18weak_ptrIN3sys10UIObserverEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t sys::UIObserver::unregisterForScreenLockedNotification_sync(sys::UIObserver *this)
{
  uint64_t result = *((unsigned int *)this + 15);
  if (result != -1)
  {
    uint64_t result = notify_cancel(result);
    *((_DWORD *)this + 15) = -1;
  }
  return result;
}

void sys::UIObserver::observe(sys::UIObserver *this@<X0>, char a2@<W1>, std::__shared_weak_count_vtbl **a3@<X8>)
{
  int v4 = (std::__shared_weak_count *)*((void *)this + 1);
  if (!v4 || (v7 = *(void *)this, (long long v8 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  char v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  *a3 = (std::__shared_weak_count_vtbl *)0xAAAAAAAAAAAAAAAALL;
  a3[1] = (std::__shared_weak_count_vtbl *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN3sys10UIObserver7observeEb_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_6_8;
  aBlock[4] = this;
  void aBlock[5] = v7;
  uint64_t v20 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v11 = _Block_copy(aBlock);
  uint64_t v12 = v11;
  if (v11) {
    uint64_t v13 = (void (__cdecl *)(std::__shared_weak_count *__hidden))_Block_copy(v11);
  }
  else {
    uint64_t v13 = 0;
  }
  v10->~__shared_weak_count = v13;
  *a3 = v10;
  std::string v14 = (std::__shared_weak_count *)operator new(0x20uLL);
  v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210B608;
  v14->__shared_owners_ = 0;
  v14->__shared_weak_owners_ = 0;
  v14[1].__vftable = v10;
  a3[1] = (std::__shared_weak_count_vtbl *)v14;
  if (v12) {
    _Block_release(v12);
  }
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 1174405120;
  v16[2] = ___ZN3sys10UIObserver7observeEb_block_invoke_7;
  v16[3] = &__block_descriptor_tmp_8_0;
  v16[4] = this;
  v16[5] = v10;
  uint64_t v17 = v14;
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  char v18 = a2;
  ctu::SharedSynchronizable<sys::UIObserver>::execute_wrapped((uint64_t *)this, (uint64_t)v16);
  uint64_t v15 = v17;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  std::__shared_weak_count::__release_weak(v9);
}

void sub_1C5AE9344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  (*(void (**)(uint64_t))(v27 + 16))(v27);
  if (*v25) {
    _Block_release(*v25);
  }
  operator delete(v25);
  if (v26) {
    _Block_release(v26);
  }
  if (a24)
  {
    std::__shared_weak_count::__release_weak(a24);
    std::__shared_weak_count::__release_weak(v24);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void ___ZN3sys10UIObserver7observeEb_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      char v6 = (uint64_t *)a1[5];
      if (v6)
      {
        v7[0] = MEMORY[0x1E4F143A8];
        v7[1] = 0x40000000;
        v7[2] = ___ZN3sys10UIObserver7observeEb_block_invoke_2;
        v7[3] = &__block_descriptor_tmp_5_0;
        v7[4] = v3;
        ctu::SharedSynchronizable<sys::UIObserver>::execute_wrapped(v6, (uint64_t)v7);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

uint64_t ___ZN3sys10UIObserver7observeEb_block_invoke_2(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  int v2 = *(_DWORD *)(v1 + 56) - 1;
  *(_DWORD *)(v1 + 56) = v2;
  if (!v2)
  {
    uint64_t result = *(unsigned int *)(v1 + 60);
    if (result != -1)
    {
      uint64_t result = notify_cancel(result);
      *(_DWORD *)(v1 + 60) = -1;
    }
  }
  return result;
}

uint64_t __copy_helper_block_e8_40c41_ZTSNSt3__18weak_ptrIN3sys10UIObserverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c41_ZTSNSt3__18weak_ptrIN3sys10UIObserverEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN3sys10UIObserver7observeEb_block_invoke_7(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(_DWORD *)(v2 + 56);
  *(_DWORD *)(v2 + 56) = v3 + 1;
  if (v3)
  {
    if (!*(unsigned char *)(a1 + 56)) {
      return;
    }
  }
  else
  {
    sys::UIObserver::registerForScreenLockedNotification_sync((sys::UIObserver *)v2);
    if (!*(unsigned char *)(a1 + 56)) {
      return;
    }
  }
  if (*(_DWORD *)(v2 + 60) != -1)
  {
    char v4 = SBSGetScreenLockStatus() != 0;
    boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::operator()(*(uint64_t ****)(v2 + 40), v4);
  }
}

uint64_t __copy_helper_block_e8_40c51_ZTSNSt3__110shared_ptrIN3sys10UIObserver6HandleEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c51_ZTSNSt3__110shared_ptrIN3sys10UIObserver6HandleEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

std::__shared_weak_count_vtbl **std::shared_ptr<sys::UIObserver>::shared_ptr[abi:ne180100]<sys::UIObserver,void>(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *a2)
{
  *a1 = a2;
  char v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210B370;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = a2;
  a1[1] = (std::__shared_weak_count_vtbl *)v4;
  std::string __p = 0;
  if (!a2) {
    return a1;
  }
  char v6 = (std::__shared_weak_count *)a2->~__shared_weak_count_0;
  if (!v6)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    a2->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
    a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (v6->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    a2->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
    a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
    std::__shared_weak_count::__release_weak(v6);
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_7:
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
LABEL_8:
  uint64_t v7 = __p;
  std::string __p = 0;
  if (v7) {
    std::default_delete<sys::UIObserver>::operator()[abi:ne180100]((int)&__p, v7);
  }
  return a1;
}

void sub_1C5AE9778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    std::default_delete<sys::UIObserver>::operator()[abi:ne180100]((int)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<sys::UIObserver *,std::shared_ptr<sys::UIObserver>::__shared_ptr_default_delete<sys::UIObserver,sys::UIObserver>,std::allocator<sys::UIObserver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<sys::UIObserver *,std::shared_ptr<sys::UIObserver>::__shared_ptr_default_delete<sys::UIObserver,sys::UIObserver>,std::allocator<sys::UIObserver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<sys::UIObserver *,std::shared_ptr<sys::UIObserver>::__shared_ptr_default_delete<sys::UIObserver,sys::UIObserver>,std::allocator<sys::UIObserver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C5BC9354) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C5BC9354 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C5BC9354)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C5BC9354 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::default_delete<sys::UIObserver>::operator()[abi:ne180100](int a1, void *__p)
{
  if (__p)
  {
    __p[4] = &unk_1F210B3C0;
    uint64_t v3 = (atomic_uint *)__p[6];
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    char v4 = __p[3];
    if (v4) {
      dispatch_release(v4);
    }
    uint64_t v5 = __p[2];
    if (v5) {
      dispatch_release(v5);
    }
    char v6 = (std::__shared_weak_count *)__p[1];
    if (v6) {
      std::__shared_weak_count::__release_weak(v6);
    }
    operator delete(__p);
  }
}

void *boost::signals2::signal<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::~signal(void *a1)
{
  *a1 = &unk_1F210B3C0;
  uint64_t v2 = (atomic_uint *)a1[2];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void boost::signals2::signal<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::~signal(void *__p)
{
  void *__p = &unk_1F210B3C0;
  uint64_t v2 = (atomic_uint *)__p[2];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }

  operator delete(__p);
}

uint64_t boost::signals2::signal<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::lock_pimpl@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 1u, memory_order_relaxed);
  }
  return result;
}

void *boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  char v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  void *v4 = &unk_1F210B540;
  v4[2] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1C5AE9B78(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1)
  {
    uint64_t v2 = (atomic_uint *)v1[4];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = (atomic_uint *)v1[1];
    if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
    operator delete(v1);
  }
  __cxa_rethrow();
}

void sub_1C5AE9C98(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t *boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::signal_impl(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)operator new(0x20uLL);
  uint64_t v14 = (uint64_t)&v14;
  uint64_t v15 = &v14;
  v18[0] = 0;
  v18[1] = 0;
  uint64_t v16 = 0;
  uint64_t v17 = v18;
  uint64_t v3 = operator new(0x40uLL);
  boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::grouped_list((uint64_t)v3, (uint64_t)&v14);
  boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(v2, (uint64_t)v3);
  char v4 = operator new(1uLL);
  v2[2] = (uint64_t)v4;
  v2[3] = 0;
  uint64_t v5 = operator new(0x18uLL);
  v5[1] = 0x100000001;
  *uint64_t v5 = &unk_1F210B480;
  _DWORD v5[2] = v4;
  v2[3] = (uint64_t)v5;
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>(a1, (uint64_t)v2);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v17, v18[0]);
  if (v16)
  {
    uint64_t v6 = v14;
    uint64_t v7 = v15;
    uint64_t v8 = *v15;
    *(void *)(v8 + 8) = *(void *)(v14 + 8);
    **(void **)(v6 + 8) = v8;
    uint64_t v16 = 0;
    if (v7 != &v14)
    {
      do
      {
        char v9 = (uint64_t *)v7[1];
        uint64_t v10 = (atomic_uint *)v7[3];
        if (v10)
        {
          if (atomic_fetch_add(v10 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v10 + 16))(v10);
            if (atomic_fetch_add(v10 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v10 + 24))(v10);
            }
          }
        }
        operator delete(v7);
        uint64_t v7 = v9;
      }
      while (v9 != &v14);
    }
  }
  a1[2] = *(void *)*a1;
  uint64_t v11 = (pthread_mutex_t *)operator new(0x40uLL);
  pthread_mutex_init(v11, 0);
  a1[3] = (uint64_t)v11;
  a1[4] = 0;
  uint64_t v12 = operator new(0x18uLL);
  v12[1] = 0x100000001;
  void *v12 = &unk_1F210B4E0;
  v12[2] = v11;
  a1[4] = (uint64_t)v12;
  return a1;
}

void sub_1C5AE9F2C(void *a1)
{
  __cxa_begin_catch(a1);
  pthread_mutex_destroy(v1);
  operator delete(v1);
  __cxa_rethrow();
}

void sub_1C5AE9F44()
{
}

void sub_1C5AEA038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  uint64_t v11 = (atomic_uint *)v9[3];
  if (v11 && atomic_fetch_add(v11 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v11 + 16))(v11);
    if (atomic_fetch_add(v11 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v11 + 24))(v11);
    }
  }
  boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::~shared_ptr((uint64_t)v9);
  boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~grouped_list(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_1C5AEA0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = v10;
  operator delete(v11);
  boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~grouped_list(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_1C5AEA118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~grouped_list(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t *boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~grouped_list(uint64_t *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)(a1 + 3), (void *)a1[4]);
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = (atomic_uint *)v3[3];
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::~shared_ptr(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::optional_last_value<void>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1) {
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::optional_last_value<void>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::optional_last_value<void>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::optional_last_value<void>>::get_untyped_deleter()
{
  return 0;
}

void boost::detail::sp_counted_impl_p<boost::signals2::mutex>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    pthread_mutex_destroy(*(pthread_mutex_t **)(a1 + 16));
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::mutex>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::mutex>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::mutex>::get_untyped_deleter()
{
  return 0;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = (atomic_uint *)v1[4];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = (atomic_uint *)v1[1];
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::operator()(uint64_t ***a1, char a2)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  char v37 = a2;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v49 = v3;
  long long v50 = v3;
  long long v47 = v3;
  long long v48 = v3;
  long long v45 = v3;
  long long v46 = v3;
  long long v43 = v3;
  long long v44 = v3;
  long long v41 = v3;
  long long v42 = v3;
  uint64_t v4 = (pthread_mutex_t *)a1[3];
  __p[0] = (void *)10;
  __p[1] = &v41;
  v52[0] = 0;
  v52[1] = v4;
  pthread_mutex_lock(v4);
  uint64_t v5 = (atomic_uint *)a1[1];
  if (!v5)
  {
    uint64_t v7 = *a1;
    goto LABEL_14;
  }
  unsigned int explicit = atomic_load_explicit(v5 + 2, memory_order_acquire);
  uint64_t v7 = *a1;
  if (explicit == 1)
  {
    uint64_t v8 = (uint64_t)a1[2];
    if ((uint64_t *)v8 == *v7)
    {
      uint64_t v8 = (*v7)[1];
      *(void *)&long long v38 = v8;
      char v9 = *v7;
      if (*v7 == (uint64_t *)v8)
      {
LABEL_11:
        a1[2] = (uint64_t **)v8;
        goto LABEL_12;
      }
    }
    else
    {
      *(void *)&long long v38 = a1[2];
      char v9 = *v7;
      if (*v7 == (uint64_t *)v8) {
        goto LABEL_11;
      }
    }
    uint64_t v10 = *(void *)(v8 + 16);
    if (*(unsigned char *)(v10 + 24))
    {
      uint64_t v8 = *(void *)(v8 + 8);
    }
    else
    {
      uint64_t v8 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::erase(v9, (int *)(v10 + 64), (uint64_t **)&v38);
      uint64_t v7 = *a1;
    }
    goto LABEL_11;
  }
LABEL_12:
  uint64_t v5 = (atomic_uint *)a1[1];
  if (v5) {
    atomic_fetch_add_explicit(v5 + 2, 1u, memory_order_relaxed);
  }
LABEL_14:
  uint64_t v11 = v36;
  uint64_t v35 = v7;
  uint64_t v36 = v5;
  if (v11)
  {
    if (atomic_fetch_add(v11 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v11 + 16))(v11);
      if (atomic_fetch_add(v11 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v11 + 24))(v11);
      }
    }
  }
  pthread_mutex_unlock(v52[1]);
  uint64_t v12 = (char *)__p[1];
  if (__p[1])
  {
    if ((uint64_t)&v52[0][-1].__opaque[55] >= 0)
    {
      uint64_t v13 = (char *)__p[1] + 16 * (uint64_t)v52[0];
      do
      {
        uint64_t v14 = (atomic_uint *)*((void *)v13 - 1);
        if (v14)
        {
          if (atomic_fetch_add(v14 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v14 + 16))(v14);
            if (atomic_fetch_add(v14 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v14 + 24))(v14);
            }
          }
        }
        v13 -= 16;
      }
      while (v13 > v12);
    }
    if (__p[0] >= (void *)0xB) {
      operator delete(__p[1]);
    }
  }
  *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v54 = v15;
  long long v55 = v15;
  *(_OWORD *)uint64_t v52 = v15;
  long long v53 = v15;
  long long v50 = v15;
  *(_OWORD *)std::string __p = v15;
  long long v48 = v15;
  long long v49 = v15;
  long long v46 = v15;
  long long v47 = v15;
  long long v44 = v15;
  long long v45 = v15;
  long long v42 = v15;
  long long v43 = v15;
  long long v41 = v15;
  LOBYTE(v41) = 0;
  unint64_t v56 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v57 = 10;
  std::string::size_type v58 = (char *)&v41 + 8;
  uint64_t v59 = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  uint64_t v60 = &v37;
  uint64_t v16 = v35;
  uint64_t v17 = (uint64_t)*v35;
  unint64_t v32 = &v41;
  long long v33 = a1;
  uint64_t v34 = v17;
  *(void *)&long long v30 = *(void *)(v17 + 8);
  *((void *)&v30 + 1) = v17;
  *(void *)&long long v31 = &v41;
  *((void *)&v31 + 1) = v17;
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::lock_next_callable(&v30);
  v29[0] = *v16;
  v29[1] = v29[0];
  v29[2] = &v41;
  v29[3] = v29[0];
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::lock_next_callable(v29);
  long long v38 = v30;
  long long v39 = v31;
  uint64_t v18 = v29[0];
  uint64_t v19 = v30;
  if ((void)v30 == v29[0])
  {
    if (HIDWORD(v61) <= v61) {
      goto LABEL_48;
    }
LABEL_47:
    boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::force_cleanup_connections((uint64_t)v33, v34);
    goto LABEL_48;
  }
  uint64_t v20 = (unsigned char *)v39;
  if (!*(unsigned char *)v39)
  {
    uint64_t v21 = *(void *)(*(void *)(v30 + 16) + 32);
    uint64_t v22 = *(void *)(v21 + 24);
    if (!v22)
    {
      std::runtime_error::runtime_error(&v40, "call to empty boost::function");
      v40.__vftable = (std::runtime_error_vtbl *)&unk_1F21031B0;
      boost::throw_exception<boost::bad_function_call>(&v40);
    }
    (*(void (**)(uint64_t, void))((v22 & 0xFFFFFFFFFFFFFFFELL) + 8))(v21 + 32, **(unsigned __int8 **)(v39 + 272));
    if (!*v20) {
      unsigned char *v20 = 1;
    }
  }
  *(void *)&long long v38 = *(void *)(v19 + 8);
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::lock_next_callable(&v38);
  uint64_t v23 = v39;
  if (*(unsigned char *)v39) {
    *(unsigned char *)long long v39 = 0;
  }
  for (uint64_t i = v38; (void)v38 != v18; uint64_t i = v38)
  {
    uint64_t v25 = *(void *)(*(void *)(i + 16) + 32);
    uint64_t v26 = *(void *)(v25 + 24);
    if (!v26)
    {
      std::runtime_error::runtime_error(&v40, "call to empty boost::function");
      v40.__vftable = (std::runtime_error_vtbl *)&unk_1F21031B0;
      boost::throw_exception<boost::bad_function_call>(&v40);
    }
    (*(void (**)(uint64_t, void))((v26 & 0xFFFFFFFFFFFFFFFELL) + 8))(v25 + 32, **(unsigned __int8 **)(v23 + 272));
    if (!*(unsigned char *)v23) {
      *(unsigned char *)uint64_t v23 = 1;
    }
    *(void *)&long long v38 = *(void *)(i + 8);
    boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::lock_next_callable(&v38);
    uint64_t v23 = v39;
    if (*(unsigned char *)v39) {
      *(unsigned char *)long long v39 = 0;
    }
  }
  if (*((_DWORD *)v32 + 71) > *((_DWORD *)v32 + 70)) {
    goto LABEL_47;
  }
LABEL_48:
  uint64_t result = boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>>::~slot_call_iterator_cache((uint64_t)&v41);
  __int16 v28 = v36;
  if (v36 && atomic_fetch_add(v36 + 2, 0xFFFFFFFF) == 1)
  {
    uint64_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)v28 + 16))(v28);
    if (atomic_fetch_add(v28 + 3, 0xFFFFFFFF) == 1) {
      return (*(uint64_t (**)(atomic_uint *))(*(void *)v28 + 24))(v28);
    }
  }
  return result;
}

void sub_1C5AEAB64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_1C5AEAB74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::runtime_error a27)
{
  std::runtime_error::~runtime_error(&a27);
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v29);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>>::~slot_call_iterator_cache((uint64_t)&v31);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v30);
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  boost::signals2::detail::connection_body_base::disconnect(*(boost::signals2::detail::connection_body_base **)(a23 + 16));
  __cxa_rethrow();
}

void sub_1C5AEABD4(_Unwind_Exception *a1, int a2)
{
  __cxa_end_catch();
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v4);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>>::~slot_call_iterator_cache((uint64_t)&v6);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v5);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1C5AEABA4);
}

void sub_1C5AEAC0C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,unint64_t a49,char *__p,uint64_t a51)
{
  if (__p)
  {
    if (a51 - 1 >= 0)
    {
      uint64_t v51 = &__p[16 * a51];
      do
      {
        uint64_t v52 = (atomic_uint *)*((void *)v51 - 1);
        if (v52)
        {
          if (atomic_fetch_add(v52 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v52 + 16))(v52);
            if (atomic_fetch_add(v52 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v52 + 24))(v52);
            }
          }
        }
        v51 -= 16;
      }
      while (v51 > __p);
    }
    if (a49 >= 0xB) {
      operator delete(__p);
    }
  }
  JUMPOUT(0x1C5AEACFCLL);
}

void sub_1C5AEACD8(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1C5AEAD04);
}

uint64_t *boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 284) > *(_DWORD *)(*a1 + 280)) {
    boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::force_cleanup_connections(a1[1], a1[2]);
  }
  return a1;
}

void boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::lock_next_callable(void *a1)
{
  v69[3] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  if (*a1 == a1[3]) {
    return;
  }
  uint64_t v2 = a1;
  if (v1 == a1[1])
  {
LABEL_94:
    uint64_t v47 = v2[3];
    if (v47 != v1)
    {
      *(void *)&long long v48 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v48 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v65 = v48;
      long long v66 = v48;
      long long v63 = v48;
      long long v64 = v48;
      long long v61 = v48;
      long long v62 = v48;
      long long v59 = v48;
      long long v60 = v48;
      long long v57 = v48;
      long long v58 = v48;
      uint64_t v49 = *(void *)(v47 + 16);
      *(void *)&long long v67 = 10;
      *((void *)&v67 + 1) = &v57;
      *(void *)&long long v68 = 0;
      *((void *)&v68 + 1) = v49;
      (*(void (**)(uint64_t))(*(void *)v49 + 24))(v49);
      uint64_t v50 = v2[2];
      v2[3] = v2[1];
      uint64_t v51 = *(_DWORD **)(v50 + 288);
      if (v51) {
        boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v51, &v57);
      }
      *(void *)(v50 + 288) = 0;
      (*(void (**)(void))(**((void **)&v68 + 1) + 32))(*((void *)&v68 + 1));
      unint64_t v52 = *((void *)&v67 + 1);
      if (*((void *)&v67 + 1))
      {
        if ((uint64_t)v68 - 1 >= 0)
        {
          unint64_t v53 = *((void *)&v67 + 1) + 16 * v68;
          do
          {
            long long v54 = *(atomic_uint **)(v53 - 8);
            if (v54)
            {
              if (atomic_fetch_add(v54 + 2, 0xFFFFFFFF) == 1)
              {
                (*(void (**)(atomic_uint *))(*(void *)v54 + 16))(v54);
                if (atomic_fetch_add(v54 + 3, 0xFFFFFFFF) == 1) {
                  (*(void (**)(atomic_uint *))(*(void *)v54 + 24))(v54);
                }
              }
            }
            v53 -= 16;
          }
          while (v53 > v52);
        }
        if ((unint64_t)v67 >= 0xB) {
          operator delete(*((void **)&v67 + 1));
        }
      }
    }
    return;
  }
  while (1)
  {
    uint64_t v3 = v2[2];
    uint64_t v4 = *(void *)(v3 + 264);
    if (v4)
    {
      if (v4 - 1 < 0)
      {
        uint64_t v11 = *(void *)(v3 + 264);
      }
      else
      {
        unint64_t v5 = *(void *)(v3 + 256);
        unint64_t v6 = v5 + 24 * v4;
        unint64_t v7 = v6;
        do
        {
          int v8 = *(_DWORD *)(v7 - 24);
          v7 -= 24;
          if (v8 == v8 >> 31)
          {
            char v9 = *(atomic_uint **)(v6 - 8);
            if (v9)
            {
              if (atomic_fetch_add(v9 + 2, 0xFFFFFFFF) == 1)
              {
                (*(void (**)(atomic_uint *))(*(void *)v9 + 16))(v9);
                if (atomic_fetch_add(v9 + 3, 0xFFFFFFFF) == 1) {
                  (*(void (**)(atomic_uint *))(*(void *)v9 + 24))(v9);
                }
              }
            }
          }
          else
          {
            uint64_t v10 = *(void *)(v6 - 16);
            if (v10) {
              (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
            }
          }
          unint64_t v6 = v7;
        }
        while (v7 > v5);
        uint64_t v11 = *(void *)(v3 + 264);
        uint64_t v1 = *v2;
      }
      *(void *)(v3 + 264) = v11 - v4;
    }
    *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v67 = v12;
    long long v68 = v12;
    long long v65 = v12;
    long long v66 = v12;
    long long v63 = v12;
    long long v64 = v12;
    long long v61 = v12;
    long long v62 = v12;
    long long v59 = v12;
    long long v60 = v12;
    long long v57 = v12;
    long long v58 = v12;
    uint64_t v13 = *(void *)(v1 + 16);
    *(void *)&long long v67 = 10;
    *((void *)&v67 + 1) = &v57;
    *(void *)&long long v68 = 0;
    *((void *)&v68 + 1) = v13;
    (*(void (**)(uint64_t))(*(void *)v13 + 24))(v13);
    uint64_t v14 = *v2;
    uint64_t v15 = *(void *)(*v2 + 16);
    uint64_t v16 = v2[2];
    uint64_t v17 = *(uint64_t **)(v15 + 32);
    if (v17)
    {
      uint64_t v18 = *v17;
      if (*v17 != v17[1])
      {
        while (1)
        {
          memset(v69, 170, 24);
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>(v18, (uint64_t)v69);
          if ((*(_DWORD *)v18 ^ (*(int *)v18 >> 31)) == 2)
          {
            if (!(*(unsigned int (**)(void))(**(void **)(v18 + 8) + 24))(*(void *)(v18 + 8))) {
              goto LABEL_22;
            }
          }
          else
          {
            uint64_t v19 = *(void *)(v18 + 16);
            if (v19 && atomic_load_explicit((atomic_uint *volatile)(v19 + 8), memory_order_acquire))
            {
LABEL_22:
              uint64_t v20 = *(void *)(v16 + 264);
              if (v20 == *(void *)(v16 + 248))
              {
                if (v20 == -1)
                {
                  uint64_t v22 = *(void **)(v16 + 256);
                }
                else
                {
                  if (4 * v20 <= (unint64_t)(v20 + 1)) {
                    unint64_t v21 = v20 + 1;
                  }
                  else {
                    unint64_t v21 = 4 * v20;
                  }
                  uint64_t v22 = (void *)(v16 + 8);
                  unint64_t v56 = v21;
                  if (v21 >= 0xB)
                  {
                    if (v21 >= 0xAAAAAAAAAAAAAABLL) {
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    }
                    uint64_t v22 = operator new(24 * v21);
                  }
                  uint64_t v23 = *(void *)(v16 + 256);
                  if (v20)
                  {
                    unint64_t v24 = 0;
                    uint64_t v25 = v23 + 24 * v20;
                    do
                    {
                      uint64_t v26 = (char *)&v22[v24 / 8];
                      uint64_t v27 = v23 + v24;
                      uint64_t v28 = *(void *)(v23 + v24 + 8);
                      if (*(_DWORD *)(v23 + v24) == *(int *)(v23 + v24) >> 31)
                      {
                        *((void *)v26 + 1) = v28;
                        uint64_t v29 = *(void *)(v27 + 16);
                        *((void *)v26 + 2) = v29;
                        if (v29) {
                          atomic_fetch_add_explicit((atomic_uint *volatile)(v29 + 8), 1u, memory_order_relaxed);
                        }
                      }
                      else
                      {
                        *((void *)v26 + 1) = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 16))(v28);
                      }
                      *(_DWORD *)uint64_t v26 = *(_DWORD *)v27 ^ (*(int *)v27 >> 31);
                      v24 += 24;
                    }
                    while (v27 + 24 != v25);
                    uint64_t v23 = *(void *)(v16 + 256);
                    uint64_t v2 = a1;
                  }
                  if (v23) {
                    boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((void *)(v16 + 8));
                  }
                  *(void *)(v16 + 248) = v56;
                  *(void *)(v16 + 256) = v22;
                  uint64_t v20 = *(void *)(v16 + 264);
                }
                uint64_t v36 = &v22[3 * v20 + 1];
                if (LODWORD(v69[0]) == SLODWORD(v69[0]) >> 31)
                {
                  *uint64_t v36 = v69[1];
                  uint64_t v37 = v69[2];
                  v22[3 * v20 + 2] = v69[2];
                  if (v37) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v37 + 8), 1u, memory_order_relaxed);
                  }
                }
                else
                {
                  *uint64_t v36 = (*(uint64_t (**)(void))(*(void *)v69[1] + 16))(v69[1]);
                }
                uint64_t v35 = (int *)&v22[3 * v20];
              }
              else
              {
                uint64_t v32 = *(void *)(v16 + 256);
                long long v33 = (void *)(v32 + 24 * v20 + 8);
                if (LODWORD(v69[0]) == SLODWORD(v69[0]) >> 31)
                {
                  *long long v33 = v69[1];
                  uint64_t v34 = v69[2];
                  *(void *)(v32 + 24 * v20 + 16) = v69[2];
                  if (v34) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v34 + 8), 1u, memory_order_relaxed);
                  }
                }
                else
                {
                  *long long v33 = (*(uint64_t (**)(void))(*(void *)v69[1] + 16))(v69[1]);
                }
                uint64_t v35 = (int *)(v32 + 24 * v20);
              }
              char v30 = 0;
              *uint64_t v35 = LODWORD(v69[0]) ^ (SLODWORD(v69[0]) >> 31);
              ++*(void *)(v16 + 264);
              if (LODWORD(v69[0]) == SLODWORD(v69[0]) >> 31) {
                goto LABEL_41;
              }
              goto LABEL_61;
            }
          }
          if (*(unsigned char *)(v15 + 24))
          {
            *(unsigned char *)(v15 + 24) = 0;
            boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>((_DWORD *)v15, &v57);
          }
          char v30 = 1;
          if (LODWORD(v69[0]) == SLODWORD(v69[0]) >> 31)
          {
LABEL_41:
            uint64_t v31 = (atomic_uint *)v69[2];
            if (v69[2])
            {
              if (atomic_fetch_add((atomic_uint *volatile)(v69[2] + 8), 0xFFFFFFFF) == 1)
              {
                (*(void (**)(atomic_uint *))(*(void *)v31 + 16))(v31);
                if (atomic_fetch_add(v31 + 3, 0xFFFFFFFF) == 1) {
                  (*(void (**)(atomic_uint *))(*(void *)v31 + 24))(v31);
                }
              }
            }
            goto LABEL_63;
          }
LABEL_61:
          if (v69[1]) {
            (*(void (**)(void))(*(void *)v69[1] + 8))(v69[1]);
          }
LABEL_63:
          if ((v30 & 1) == 0)
          {
            v18 += 24;
            if (v18 != *(void *)(*(void *)(v15 + 32) + 8)) {
              continue;
            }
          }
          uint64_t v14 = *v2;
          uint64_t v15 = *(void *)(*v2 + 16);
          uint64_t v16 = v2[2];
          break;
        }
      }
    }
    if (*(unsigned char *)(v15 + 24))
    {
      ++*(_DWORD *)(v16 + 280);
      uint64_t v38 = *(void *)(v15 + 16);
      if (v38)
      {
        if (atomic_load_explicit((atomic_uint *volatile)(v38 + 8), memory_order_acquire))
        {
          int v39 = 1;
          goto LABEL_80;
        }
        uint64_t v16 = v2[2];
        uint64_t v14 = *v2;
      }
      v2[3] = v14;
      if (v2[1] == v14)
      {
        long long v42 = *(_DWORD **)(v16 + 288);
        if (v42) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v42, &v57);
        }
        int v39 = 0;
        *(void *)(v16 + 288) = 0;
      }
      else
      {
        uint64_t v40 = *(void *)(v14 + 16);
        long long v41 = *(_DWORD **)(v16 + 288);
        if (v41) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v41, &v57);
        }
        *(void *)(v16 + 288) = v40;
        int v39 = 0;
        if (v40) {
          ++*(_DWORD *)(v40 + 28);
        }
      }
    }
    else
    {
      ++*(_DWORD *)(v16 + 284);
      int v39 = 1;
    }
LABEL_80:
    (*(void (**)(void))(**((void **)&v68 + 1) + 32))(*((void *)&v68 + 1));
    unint64_t v43 = *((void *)&v67 + 1);
    if (*((void *)&v67 + 1))
    {
      if ((uint64_t)v68 - 1 >= 0)
      {
        unint64_t v44 = *((void *)&v67 + 1) + 16 * v68;
        do
        {
          long long v45 = *(atomic_uint **)(v44 - 8);
          if (v45)
          {
            if (atomic_fetch_add(v45 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v45 + 16))(v45);
              if (atomic_fetch_add(v45 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v45 + 24))(v45);
              }
            }
          }
          v44 -= 16;
        }
        while (v44 > v43);
      }
      if ((unint64_t)v67 >= 0xB) {
        operator delete(*((void **)&v67 + 1));
      }
    }
    uint64_t v1 = *v2;
    uint64_t v46 = v2[1];
    if (!v39) {
      break;
    }
    uint64_t v1 = *(void *)(v1 + 8);
    void *v2 = v1;
    if (v1 == v46)
    {
      uint64_t v1 = v46;
      goto LABEL_94;
    }
  }
  if (v1 == v46) {
    goto LABEL_94;
  }
}

void sub_1C5AEB624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C5AEB63C(_Unwind_Exception *a1)
{
  unint64_t v3 = v1[21];
  if (v3)
  {
    uint64_t v4 = v1[22];
    if (v4 - 1 >= 0)
    {
      unint64_t v5 = v3 + 16 * v4;
      do
      {
        unint64_t v6 = *(atomic_uint **)(v5 - 8);
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        v5 -= 16;
      }
      while (v5 > v3);
    }
    if (v1[20] >= 0xBuLL)
    {
      operator delete((void *)v1[21]);
      _Unwind_Resume(a1);
    }
  }
  JUMPOUT(0x1C5AEB948);
}

void sub_1C5AEB7E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>::~variant(v5 - 128);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C5AEB808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C5AEB81C(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    if (v3)
    {
      uint64_t v4 = (atomic_uint **)(v2 + 16);
      do
      {
        if (*((_DWORD *)v4 - 4) == *((int *)v4 - 4) >> 31)
        {
          uint64_t v5 = *v4;
          if (*v4 && atomic_fetch_add(v5 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v5 + 16))(v5);
            if (atomic_fetch_add(v5 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v5 + 24))(v5);
            }
          }
        }
        else
        {
          uint64_t v6 = (uint64_t)*(v4 - 1);
          if (v6) {
            (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
          }
        }
        v4 += 3;
        v3 -= 24;
      }
      while (v3);
    }
    __cxa_rethrow();
  }
  JUMPOUT(0x1C5AEB948);
}

void sub_1C5AEB90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  __cxa_end_catch();
  if (a4 >= 0xB)
  {
    operator delete(v5);
    boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>::~variant(v6 - 128);
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1C5AEB7E8);
}

void sub_1C5AEB940(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy(void *a1)
{
  uint64_t v2 = a1[32];
  if (v2 && v2 - 1 >= 0)
  {
    unint64_t v3 = a1[31];
    unint64_t v4 = v3 + 24 * v2;
    unint64_t v5 = v4;
    do
    {
      int v6 = *(_DWORD *)(v5 - 24);
      v5 -= 24;
      if (v6 == v6 >> 31)
      {
        unint64_t v7 = *(atomic_uint **)(v4 - 8);
        if (v7)
        {
          if (atomic_fetch_add(v7 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v7 + 16))(v7);
            if (atomic_fetch_add(v7 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v7 + 24))(v7);
            }
          }
        }
      }
      else
      {
        uint64_t v8 = *(void *)(v4 - 16);
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
        }
      }
      unint64_t v4 = v5;
    }
    while (v5 > v3);
  }
  if (a1[30] >= 0xBuLL)
  {
    char v9 = (void *)a1[31];
    operator delete(v9);
  }
}

void boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::force_cleanup_connections(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v22[8] = v4;
  v22[9] = v4;
  v22[6] = v4;
  v22[7] = v4;
  v22[4] = v4;
  v22[5] = v4;
  v22[2] = v4;
  v22[3] = v4;
  v22[0] = v4;
  v22[1] = v4;
  unint64_t v5 = *(pthread_mutex_t **)(a1 + 24);
  unint64_t v23 = 10;
  std::string __p = v22;
  uint64_t v25 = 0;
  uint64_t v26 = v5;
  pthread_mutex_lock(v5);
  if (**(void **)a1 == a2)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    if (!v6 || atomic_load_explicit((atomic_uint *volatile)(v6 + 8), memory_order_acquire) != 1)
    {
      unint64_t v7 = (uint64_t *)operator new(0x20uLL);
      uint64_t v8 = *(uint64_t **)a1;
      uint64_t v9 = **(void **)a1;
      uint64_t v10 = operator new(0x40uLL);
      boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::grouped_list((uint64_t)v10, v9);
      boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(v7, (uint64_t)v10);
      v7[2] = v8[2];
      uint64_t v11 = v8[3];
      v7[3] = v11;
      if (v11) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 8), 1u, memory_order_relaxed);
      }
      boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>((uint64_t *)&v21, (uint64_t)v7);
      long long v12 = *(uint64_t **)a1;
      uint64_t v13 = *(atomic_uint **)(a1 + 8);
      *(_OWORD *)a1 = v21;
      *(void *)&long long v21 = v12;
      *((void *)&v21 + 1) = v13;
      if (v13)
      {
        if (atomic_fetch_add(v13 + 2, 0xFFFFFFFF) == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v13 + 16))(v13);
          if (atomic_fetch_add(v13 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v13 + 24))(v13);
          }
        }
      }
    }
    uint64_t v14 = *(uint64_t ***)a1;
    uint64_t v15 = **(uint64_t ***)a1;
    uint64_t v16 = v15[1];
    *(void *)&long long v21 = v16;
    if (v15 != (uint64_t *)v16)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = *(void *)(v16 + 16);
          if (!*(unsigned char *)(v17 + 24)) {
            break;
          }
          uint64_t v16 = *(void *)(v16 + 8);
          *(void *)&long long v21 = v16;
          uint64_t v15 = *v14;
          if ((uint64_t *)v16 == *v14) {
            goto LABEL_15;
          }
        }
        uint64_t v16 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::erase(v15, (int *)(v17 + 64), (uint64_t **)&v21);
        uint64_t v14 = *(uint64_t ***)a1;
        *(void *)&long long v21 = v16;
        uint64_t v15 = *v14;
      }
      while ((uint64_t *)v16 != *v14);
    }
LABEL_15:
    *(void *)(a1 + 16) = v16;
  }
  pthread_mutex_unlock(v26);
  uint64_t v18 = (char *)__p;
  if (__p)
  {
    if (v25 - 1 >= 0)
    {
      uint64_t v19 = (char *)__p + 16 * v25;
      do
      {
        uint64_t v20 = (atomic_uint *)*((void *)v19 - 1);
        if (v20)
        {
          if (atomic_fetch_add(v20 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v20 + 16))(v20);
            if (atomic_fetch_add(v20 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v20 + 24))(v20);
            }
          }
        }
        v19 -= 16;
      }
      while (v19 > v18);
    }
    if (v23 >= 0xB) {
      operator delete(__p);
    }
  }
}

void sub_1C5AEBD80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>>::~slot_call_iterator_cache(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 288);
  if (v2)
  {
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v8[8] = v3;
    v8[9] = v3;
    v8[6] = v3;
    v8[7] = v3;
    v8[4] = v3;
    v8[5] = v3;
    v8[2] = v3;
    v8[3] = v3;
    v8[0] = v3;
    v8[1] = v3;
    unint64_t v9 = 10;
    std::string __p = v8;
    uint64_t v11 = 0;
    uint64_t v12 = v2;
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(*(_DWORD **)(a1 + 288), v8);
    (*(void (**)(uint64_t))(*(void *)v12 + 32))(v12);
    long long v4 = (char *)__p;
    if (__p)
    {
      if (v11 - 1 >= 0)
      {
        unint64_t v5 = (char *)__p + 16 * v11;
        do
        {
          uint64_t v6 = (atomic_uint *)*((void *)v5 - 1);
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          v5 -= 16;
        }
        while (v5 > v4);
      }
      if (v9 >= 0xB) {
        operator delete(__p);
      }
    }
  }
  if (*(void *)(a1 + 256)) {
    boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((void *)(a1 + 8));
  }
  if (*(unsigned char *)a1) {
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

void sub_1C5AEC06C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ctu::SharedSynchronizable<sys::UIObserver>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  long long v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v7 = v6;
  uint64_t v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN3sys10UIObserverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F210B5C8;
  block[5] = v5;
  uint64_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN3sys10UIObserverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrIKN3sys10UIObserverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrIKN3sys10UIObserverEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_pointer<sys::UIObserver::Handle *,std::shared_ptr<sys::UIObserver::Handle>::__shared_ptr_default_delete<sys::UIObserver::Handle,sys::UIObserver::Handle>,std::allocator<sys::UIObserver::Handle>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<sys::UIObserver::Handle *,std::shared_ptr<sys::UIObserver::Handle>::__shared_ptr_default_delete<sys::UIObserver::Handle,sys::UIObserver::Handle>,std::allocator<sys::UIObserver::Handle>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 24);
  if (v1)
  {
    (*((void (**)(void))*v1 + 2))();
    if (*v1) {
      _Block_release(*v1);
    }
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<sys::UIObserver::Handle *,std::shared_ptr<sys::UIObserver::Handle>::__shared_ptr_default_delete<sys::UIObserver::Handle,sys::UIObserver::Handle>,std::allocator<sys::UIObserver::Handle>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C5BC9598) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C5BC9598 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C5BC9598)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C5BC9598 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

BOOL defaults::bbipc::get(char *a1, uint64_t a2)
{
  v20[2] = *MEMORY[0x1E4F143B8];
  if (a1[23] < 0)
  {
    uint64_t v6 = *(const char **)a1;
    long long v4 = (capabilities::trace *)strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4C2D8]);
    if (v4)
    {
      uint64_t v5 = (capabilities::ipc *)strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C388]);
      if (v5) {
        goto LABEL_4;
      }
LABEL_12:
      int v12 = capabilities::ipc::defaultLogLevel(v5);
      v20[0] = 0;
      *(void *)((char *)v20 + 7) = 0;
      std::to_string(&v18, v12);
      goto LABEL_15;
    }
LABEL_13:
    int v13 = capabilities::trace::enabledByDefault(v4);
    v20[0] = 0;
    *(void *)((char *)v20 + 7) = 0;
    std::to_string(&v18, v13);
    goto LABEL_15;
  }
  long long v4 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C2D8]);
  if (!v4) {
    goto LABEL_13;
  }
  uint64_t v5 = (capabilities::ipc *)strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C388]);
  uint64_t v6 = a1;
  if (!v5) {
    goto LABEL_12;
  }
LABEL_4:
  unint64_t v7 = (capabilities::ipc *)strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C5C0]);
  if (v7)
  {
    uint64_t v8 = GetOsLogContext()[1];
    BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (result)
    {
      std::string::size_type v10 = *MEMORY[0x1E4F4C390];
      if (a1[23] >= 0) {
        uint64_t v11 = a1;
      }
      else {
        uint64_t v11 = *(char **)a1;
      }
      LODWORD(v18.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v18.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
      WORD2(v18.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v18.__r_.__value_.__r.__words[1] + 6) = v10;
      HIWORD(v18.__r_.__value_.__r.__words[2]) = 2080;
      uint64_t v19 = v11;
      _os_log_error_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
        (uint8_t *)&v18,
        0x20u);
      return 0;
    }
    return result;
  }
  int v14 = capabilities::ipc::defaultMHIConfigPayloadSizeBytes(v7);
  v20[0] = 0;
  *(void *)((char *)v20 + 7) = 0;
  std::to_string(&v18, v14);
LABEL_15:
  v20[0] = v18.__r_.__value_.__l.__size_;
  std::string::size_type v15 = v18.__r_.__value_.__r.__words[0];
  *(void *)((char *)v20 + 7) = *(std::string::size_type *)((char *)&v18.__r_.__value_.__r.__words[1] + 7);
  char v16 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  uint64_t v17 = v20[0];
  *(void *)a2 = v15;
  *(void *)(a2 + 8) = v17;
  *(void *)(a2 + 15) = *(void *)((char *)v20 + 7);
  *(unsigned char *)(a2 + 23) = v16;
  return 1;
}

void sub_1C5AEC668(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0) {
      JUMPOUT(0x1C5AEC618);
    }
    JUMPOUT(0x1C5AEC620);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::compression::get(char *a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a1[23] < 0)
  {
    long long v4 = *(const char **)a1;
    if (strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F47258])) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t IsInternalBuild = TelephonyUtilIsInternalBuild();
    if ((IsInternalBuild & 1) != 0 || (uint64_t IsInternalBuild = TelephonyUtilIsCarrierBuild(), IsInternalBuild)) {
      int CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
    }
    else {
      int CompressionMode = 2;
    }
    std::to_string(&v11, CompressionMode);
    goto LABEL_16;
  }
  long long v4 = a1;
  if (!strcasecmp(a1, (const char *)*MEMORY[0x1E4F47258])) {
    goto LABEL_10;
  }
LABEL_3:
  if (strcasecmp(v4, (const char *)*MEMORY[0x1E4F47108]))
  {
    uint64_t v5 = GetOsLogContext()[1];
    BOOL result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (result)
    {
      std::string::size_type v7 = *MEMORY[0x1E4F4C398];
      if (a1[23] >= 0) {
        uint64_t v8 = a1;
      }
      else {
        uint64_t v8 = *(char **)a1;
      }
      LODWORD(v11.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v11.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
      WORD2(v11.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v11.__r_.__value_.__r.__words[1] + 6) = v7;
      HIWORD(v11.__r_.__value_.__r.__words[2]) = 2080;
      int v12 = v8;
      _os_log_error_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
        (uint8_t *)&v11,
        0x20u);
      return 0;
    }
    return result;
  }
  std::to_string(&v11, 0);
LABEL_16:
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(std::string *)a2 = v11;
  return 1;
}

BOOL defaults::ttr::get(char *a1, uint64_t a2)
{
  v15[2] = *MEMORY[0x1E4F143B8];
  if (a1[23] < 0)
  {
    long long v4 = *(const char **)a1;
    if (strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4C198])) {
      goto LABEL_3;
    }
LABEL_10:
    if (TelephonyUtilIsInternalBuild()) {
      int IsCarrierBuild = 1;
    }
    else {
      int IsCarrierBuild = TelephonyUtilIsCarrierBuild();
    }
    memset(v15, 0, 15);
    std::to_string(&v13, IsCarrierBuild);
    goto LABEL_15;
  }
  long long v4 = a1;
  if (!strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C198])) {
    goto LABEL_10;
  }
LABEL_3:
  if (strcasecmp(v4, (const char *)*MEMORY[0x1E4F4CD80]))
  {
    uint64_t v5 = GetOsLogContext()[1];
    BOOL result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (result)
    {
      std::string::size_type v7 = *MEMORY[0x1E4F4C300];
      if (a1[23] >= 0) {
        uint64_t v8 = a1;
      }
      else {
        uint64_t v8 = *(char **)a1;
      }
      LODWORD(v13.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v13.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
      WORD2(v13.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v13.__r_.__value_.__r.__words[1] + 6) = v7;
      HIWORD(v13.__r_.__value_.__r.__words[2]) = 2080;
      int v14 = v8;
      _os_log_error_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
        (uint8_t *)&v13,
        0x20u);
      return 0;
    }
    return result;
  }
  memset(v15, 0, 15);
  std::to_string(&v13, 43200);
LABEL_15:
  v15[0] = v13.__r_.__value_.__l.__size_;
  std::string::size_type v10 = v13.__r_.__value_.__r.__words[0];
  *(void *)((char *)v15 + 7) = *(std::string::size_type *)((char *)&v13.__r_.__value_.__r.__words[1] + 7);
  char v11 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  uint64_t v12 = v15[0];
  *(void *)a2 = v10;
  *(void *)(a2 + 8) = v12;
  *(void *)(a2 + 15) = *(void *)((char *)v15 + 7);
  *(unsigned char *)(a2 + 23) = v11;
  return 1;
}

void sub_1C5AECA04(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0) {
      JUMPOUT(0x1C5AEC9B4);
    }
    JUMPOUT(0x1C5AEC9BCLL);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::logfilter::get(char *a1, uint64_t a2)
{
  v16[2] = *MEMORY[0x1E4F143B8];
  if (a1[23] < 0)
  {
    long long v4 = *(const char **)a1;
    if (strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4C6C8]))
    {
      if (strcasecmp(v4, (const char *)*MEMORY[0x1E4F4C950])) {
        goto LABEL_4;
      }
LABEL_12:
      memset(v16, 0, 15);
      std::to_string(&v14, -1);
      goto LABEL_15;
    }
LABEL_13:
    memset(v16, 0, 15);
    std::to_string(&v14, 512);
    goto LABEL_15;
  }
  if (!strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C6C8])) {
    goto LABEL_13;
  }
  long long v4 = a1;
  if (!strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C950])) {
    goto LABEL_12;
  }
LABEL_4:
  uint64_t v5 = (capabilities::trace *)strcasecmp(v4, (const char *)*MEMORY[0x1E4F4D268]);
  if (v5)
  {
    uint64_t v6 = GetOsLogContext()[1];
    BOOL result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (result)
    {
      std::string::size_type v8 = *MEMORY[0x1E4F4C138];
      if (a1[23] >= 0) {
        unint64_t v9 = a1;
      }
      else {
        unint64_t v9 = *(char **)a1;
      }
      LODWORD(v14.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v14.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
      WORD2(v14.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v14.__r_.__value_.__r.__words[1] + 6) = v8;
      HIWORD(v14.__r_.__value_.__r.__words[2]) = 2080;
      std::string::size_type v15 = v9;
      _os_log_error_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
        (uint8_t *)&v14,
        0x20u);
      return 0;
    }
    return result;
  }
  int v10 = capabilities::trace::supportsDuplicateSignatureDetection(v5);
  memset(v16, 0, 15);
  std::to_string(&v14, v10);
LABEL_15:
  v16[0] = v14.__r_.__value_.__l.__size_;
  std::string::size_type v11 = v14.__r_.__value_.__r.__words[0];
  *(void *)((char *)v16 + 7) = *(std::string::size_type *)((char *)&v14.__r_.__value_.__r.__words[1] + 7);
  char v12 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  uint64_t v13 = v16[0];
  *(void *)a2 = v11;
  *(void *)(a2 + 8) = v13;
  *(void *)(a2 + 15) = *(void *)((char *)v16 + 7);
  *(unsigned char *)(a2 + 23) = v12;
  return 1;
}

void sub_1C5AECC24(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0) {
      JUMPOUT(0x1C5AECBD4);
    }
    JUMPOUT(0x1C5AECBDCLL);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::systemlogs::get(char *a1, uint64_t a2)
{
  void v17[2] = *MEMORY[0x1E4F143B8];
  if (a1[23] < 0)
  {
    uint64_t v5 = *(const char **)a1;
    if (strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4C198]))
    {
      long long v4 = (capabilities::abs *)strcasecmp(v5, (const char *)*MEMORY[0x1E4F4C2E0]);
      if (v4) {
        goto LABEL_4;
      }
LABEL_12:
      int v10 = capabilities::abs::defaultSystemLogsHistory(v4);
      v17[0] = 0;
      *(void *)((char *)v17 + 7) = 0;
      std::to_string(&v15, v10);
      goto LABEL_18;
    }
LABEL_13:
    if (TelephonyUtilIsInternalBuild()) {
      int IsCarrierBuild = 1;
    }
    else {
      int IsCarrierBuild = TelephonyUtilIsCarrierBuild();
    }
    *(void *)((char *)v17 + 7) = 0;
    v17[0] = 0;
    std::to_string(&v15, IsCarrierBuild);
    goto LABEL_18;
  }
  if (!strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C198])) {
    goto LABEL_13;
  }
  long long v4 = (capabilities::abs *)strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C2E0]);
  uint64_t v5 = a1;
  if (!v4) {
    goto LABEL_12;
  }
LABEL_4:
  if (strcasecmp(v5, (const char *)*MEMORY[0x1E4F4CBA8]))
  {
    uint64_t v6 = GetOsLogContext()[1];
    BOOL result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (result)
    {
      std::string::size_type v8 = *MEMORY[0x1E4F4C2F8];
      if (a1[23] >= 0) {
        unint64_t v9 = a1;
      }
      else {
        unint64_t v9 = *(char **)a1;
      }
      LODWORD(v15.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v15.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
      WORD2(v15.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v15.__r_.__value_.__r.__words[1] + 6) = v8;
      HIWORD(v15.__r_.__value_.__r.__words[2]) = 2080;
      char v16 = v9;
      _os_log_error_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
        (uint8_t *)&v15,
        0x20u);
      return 0;
    }
    return result;
  }
  *(void *)((char *)v17 + 7) = 0;
  v17[0] = 0;
  std::to_string(&v15, 1);
LABEL_18:
  v17[0] = v15.__r_.__value_.__l.__size_;
  std::string::size_type v12 = v15.__r_.__value_.__r.__words[0];
  *(void *)((char *)v17 + 7) = *(std::string::size_type *)((char *)&v15.__r_.__value_.__r.__words[1] + 7);
  char v13 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  uint64_t v14 = v17[0];
  *(void *)a2 = v12;
  *(void *)(a2 + 8) = v14;
  *(void *)(a2 + 15) = *(void *)((char *)v17 + 7);
  *(unsigned char *)(a2 + 23) = v13;
  return 1;
}

void sub_1C5AECE64(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0) {
      JUMPOUT(0x1C5AECE14);
    }
    JUMPOUT(0x1C5AECE1CLL);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::profile::get(char *a1, uint64_t a2)
{
  v14[2] = *MEMORY[0x1E4F143B8];
  if (a1[23] < 0)
  {
    long long v4 = *(const char **)a1;
    if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4C0E0])) {
      goto LABEL_10;
    }
  }
  else
  {
    long long v4 = a1;
    if (!strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C0E0])) {
      goto LABEL_10;
    }
  }
  if (strcasecmp(v4, (const char *)*MEMORY[0x1E4F4D220]))
  {
    uint64_t v5 = GetOsLogContext()[1];
    BOOL result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (result)
    {
      std::string::size_type v7 = *MEMORY[0x1E4F4C1B8];
      if (a1[23] >= 0) {
        std::string::size_type v8 = a1;
      }
      else {
        std::string::size_type v8 = *(char **)a1;
      }
      LODWORD(v12.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v12.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
      WORD2(v12.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v12.__r_.__value_.__r.__words[1] + 6) = v7;
      HIWORD(v12.__r_.__value_.__r.__words[2]) = 2080;
      char v13 = v8;
      _os_log_error_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
        (uint8_t *)&v12,
        0x20u);
      return 0;
    }
    return result;
  }
LABEL_10:
  memset(v14, 0, 15);
  std::to_string(&v12, 0);
  v14[0] = v12.__r_.__value_.__l.__size_;
  std::string::size_type v9 = v12.__r_.__value_.__r.__words[0];
  *(void *)((char *)v14 + 7) = *(std::string::size_type *)((char *)&v12.__r_.__value_.__r.__words[1] + 7);
  char v10 = HIBYTE(v12.__r_.__value_.__r.__words[2]);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  uint64_t v11 = v14[0];
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v11;
  *(void *)(a2 + 15) = *(void *)((char *)v14 + 7);
  *(unsigned char *)(a2 + 23) = v10;
  return 1;
}

void sub_1C5AED050(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0) {
      JUMPOUT(0x1C5AED000);
    }
    JUMPOUT(0x1C5AED008);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::tailspin::get(const char *a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)a1;
  v14[2] = *MEMORY[0x1E4F143B8];
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  int v4 = strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C0E0]);
  if (v4)
  {
    uint64_t v5 = GetOsLogContext()[1];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      std::string::size_type v6 = *MEMORY[0x1E4F4C210];
      if (*((char *)v3 + 23) >= 0) {
        std::string::size_type v7 = v3;
      }
      else {
        std::string::size_type v7 = (uint64_t *)*v3;
      }
      LODWORD(v12.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v12.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
      WORD2(v12.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v12.__r_.__value_.__r.__words[1] + 6) = v6;
      HIWORD(v12.__r_.__value_.__r.__words[2]) = 2080;
      char v13 = v7;
      _os_log_error_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
        (uint8_t *)&v12,
        0x20u);
    }
  }
  else
  {
    memset(v14, 0, 15);
    std::to_string(&v12, 0);
    v14[0] = v12.__r_.__value_.__l.__size_;
    std::string::size_type v8 = v12.__r_.__value_.__r.__words[0];
    *(void *)((char *)v14 + 7) = *(std::string::size_type *)((char *)&v12.__r_.__value_.__r.__words[1] + 7);
    char v9 = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    uint64_t v10 = v14[0];
    *(void *)a2 = v8;
    *(void *)(a2 + 8) = v10;
    *(void *)(a2 + 15) = *(void *)((char *)v14 + 7);
    *(unsigned char *)(a2 + 23) = v9;
  }
  return v4 == 0;
}

void sub_1C5AED1E4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0) {
      JUMPOUT(0x1C5AED190);
    }
    JUMPOUT(0x1C5AED198);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::tracesettings::get(char *a1, std::string *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if ((a1[23] & 0x80000000) == 0)
  {
    if (!strcasecmp(a1, (const char *)*MEMORY[0x1E4F4CAA0]))
    {
LABEL_17:
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
      {
        a2->__r_.__value_.__l.__size_ = 1;
        a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      else
      {
        *((unsigned char *)&a2->__r_.__value_.__s + 23) = 1;
      }
      LOWORD(a2->__r_.__value_.__l.__data_) = 48;
      return 1;
    }
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4CB98]))
    {
      int v4 = a1;
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C5C8])) {
        goto LABEL_5;
      }
      goto LABEL_14;
    }
LABEL_19:
    uint64_t v10 = (const char *)abm::helper::asString();
    size_t v11 = strlen(v10);
    if (v11 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v12 = v11;
    if (v11 >= 0x17)
    {
      uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17) {
        uint64_t v14 = v11 | 7;
      }
      uint64_t v15 = v14 + 1;
      char v13 = operator new(v14 + 1);
      *(void *)&v16[8] = v12;
      *(void *)&v16[16] = v15 | 0x8000000000000000;
      *(void *)char v16 = v13;
    }
    else
    {
      v16[23] = v11;
      char v13 = v16;
      if (!v11)
      {
        v16[0] = 0;
        if ((SHIBYTE(a2->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_23:
          *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v16;
          a2->__r_.__value_.__r.__words[2] = *(void *)&v16[16];
          return 1;
        }
LABEL_31:
        operator delete(a2->__r_.__value_.__l.__data_);
        goto LABEL_23;
      }
    }
    memmove(v13, v10, v12);
    v13[v12] = 0;
    if ((SHIBYTE(a2->__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_31;
  }
  int v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4CAA0])) {
    goto LABEL_17;
  }
  if (!strcasecmp(v4, (const char *)*MEMORY[0x1E4F4CB98])) {
    goto LABEL_19;
  }
  if (!strcasecmp(v4, (const char *)*MEMORY[0x1E4F4C5C8]))
  {
LABEL_14:
    if ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild()) {
      char v9 = "1";
    }
    else {
      char v9 = "3";
    }
    std::string::__assign_external(a2, v9);
    return 1;
  }
LABEL_5:
  if (!strcasecmp(v4, (const char *)*MEMORY[0x1E4F4C938])) {
    goto LABEL_17;
  }
  uint64_t v5 = GetOsLogContext()[1];
  BOOL result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
  if (result)
  {
    uint64_t v7 = *MEMORY[0x1E4F4C208];
    if (a1[23] >= 0) {
      std::string::size_type v8 = a1;
    }
    else {
      std::string::size_type v8 = *(char **)a1;
    }
    *(_DWORD *)char v16 = 136315650;
    *(void *)&v16[4] = "prop.default";
    *(_WORD *)&v16[12] = 2080;
    *(void *)&v16[14] = v7;
    *(_WORD *)&v16[22] = 2080;
    uint64_t v17 = v8;
    _os_log_error_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'", v16, 0x20u);
    return 0;
  }
  return result;
}

double util::to_str<BOOL>(std::string *a1, int __val)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::to_string(&v4, __val);
  double result = *(double *)&v4.__r_.__value_.__l.__data_;
  *a1 = v4;
  return result;
}

void sub_1C5AED548(void *a1)
{
}

void sub_1C5AED554(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t defaults::bbtrace::mode(defaults::bbtrace *this)
{
  return 0;
}

double util::to_str<int>@<D0>(int a1@<W0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::to_string(&v4, a1);
  double result = *(double *)&v4.__r_.__value_.__l.__data_;
  *a2 = v4;
  return result;
}

void sub_1C5AED5CC(void *a1)
{
}

void sub_1C5AED5D8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t defaults::bbtrace::resetModeOnAPBoot(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::history(defaults::bbtrace *this)
{
  return capabilities::trace::defaultHistorySizeMB(this);
}

double util::to_str<diag::config::DuringAPSleep>(std::string *a1)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::to_string(&v3, 0);
  double result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_1C5AED660(void *a1)
{
}

void sub_1C5AED66C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t defaults::bbtrace::enabled_during_sleep(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::buffering_on_ap_wake(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::stall_detection(defaults::bbtrace *this)
{
  return 0;
}

double util::to_str<unsigned int>(std::string *a1, unsigned int __val)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::to_string(&v4, __val);
  double result = *(double *)&v4.__r_.__value_.__l.__data_;
  *a1 = v4;
  return result;
}

void sub_1C5AED6EC(void *a1)
{
}

void sub_1C5AED6F8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t defaults::bbtrace::stall_retries(defaults::bbtrace *this)
{
  return 3;
}

double util::to_str<diag::config::Recovery>(std::string *a1)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::to_string(&v3, 0);
  double result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_1C5AED768(void *a1)
{
}

void sub_1C5AED774(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t defaults::bbtrace::stall_recovery(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::keep_scratch_logs(defaults::bbtrace *this)
{
  return 0;
}

const char *defaults::bbtrace::primary_dmc(defaults::bbtrace *this)
{
  if (config::hw::watch(this)) {
    return "Lite";
  }
  else {
    return "Default";
  }
}

const char *defaults::bbtrace::secondary_dmc(defaults::bbtrace *this)
{
  uint64_t v1 = (config::hw *)capabilities::radio::ice(this);
  if (!v1) {
    return "None";
  }
  if (config::hw::watch(v1)) {
    return "Lite";
  }
  return "Default";
}

const char *defaults::bbtrace::extra_dmc(defaults::bbtrace *this)
{
  return "None";
}

const char *defaults::bbtrace::sleep_dmc(defaults::bbtrace *this)
{
  return "Sleep";
}

uint64_t defaults::bbtrace::max_memory_file_count(defaults::bbtrace *this)
{
  return capabilities::trace::defaultMemoryFileMaxCount(this);
}

uint64_t defaults::bbtrace::high_water_mark(defaults::bbtrace *this)
{
  if (capabilities::radio::ice(this)) {
    return 80;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t defaults::bbtrace::low_water_mark(defaults::bbtrace *this)
{
  if (capabilities::radio::ice(this)) {
    return 1;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t defaults::bbtrace::carrier_logging_allowed(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::file_size(defaults::bbtrace *this)
{
  return capabilities::trace::defaultFileSizeBytes(this);
}

uint64_t defaults::bbtrace::transport_read_size(defaults::bbtrace *this)
{
  uint64_t v1 = (capabilities::abs *)capabilities::radio::vendor(this);
  if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v1)) {
    return 0x4000;
  }
  else {
    return 0x8000;
  }
}

uint64_t defaults::bbtrace::transport_read_count(defaults::bbtrace *this)
{
  uint64_t v1 = (capabilities::abs *)capabilities::radio::vendor(this);
  if ((v1 - 1) > 2) {
    int v2 = 23;
  }
  else {
    int v2 = dword_1C5BC95F0[(int)v1 - 1];
  }
  char shouldUseMinBasebandTransportIOReadCount = capabilities::abs::shouldUseMinBasebandTransportIOReadCount(v1);
  if (v2 == 15) {
    int v4 = 36;
  }
  else {
    int v4 = 4;
  }
  if (v2 == 16) {
    int v5 = 36;
  }
  else {
    int v5 = v4;
  }
  if (v2 == 2) {
    unsigned int v6 = 16;
  }
  else {
    unsigned int v6 = v5;
  }
  if (shouldUseMinBasebandTransportIOReadCount) {
    return 4;
  }
  else {
    return v6;
  }
}

uint64_t defaults::bbtrace::trace_sleep_mode(defaults::bbtrace *this)
{
  return MEMORY[0x1F417D630](this);
}

uint64_t defaults::bbtrace::privacyLevel(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::error_handling(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::live_filter(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::min_file_size(defaults::bbtrace *this)
{
  uint64_t v1 = (capabilities::abs *)capabilities::radio::vendor(this);
  if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v1)) {
    return 0x4000;
  }
  else {
    return 0x8000;
  }
}

capabilities::trace *defaults::ipc::enabled(defaults::ipc *this)
{
  double result = (capabilities::trace *)capabilities::ipc::supportsPCI(this);
  if (result)
  {
    return (capabilities::trace *)capabilities::trace::enabledByDefault(result);
  }
  return result;
}

uint64_t defaults::ipc::history(defaults::ipc *this)
{
  return capabilities::ipc::defaultPCIBinaryTraceHistorySizeMB(this);
}

uint64_t defaults::ipc::buffer_count(defaults::ipc *this)
{
  return 4;
}

uint64_t defaults::bbipc::mhiConfigPayloadSize(defaults::bbipc *this)
{
  return capabilities::ipc::defaultMHIConfigPayloadSizeBytes(this);
}

uint64_t defaults::logfilter::free_space_limit(defaults::logfilter *this)
{
  return 512;
}

uint64_t defaults::logfilter::max_log_limit(defaults::logfilter *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t defaults::helper::supported(defaults::helper *this)
{
  return 1;
}

uint64_t defaults::compression::mode(defaults::compression *this)
{
  uint64_t IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) == 0)
  {
    uint64_t IsInternalBuild = TelephonyUtilIsCarrierBuild();
    if (!IsInternalBuild) {
      return 2;
    }
  }

  return capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
}

uint64_t defaults::compression::splitArchive(defaults::compression *this)
{
  return 0;
}

uint64_t defaults::compression::supported(defaults::compression *this)
{
  return 1;
}

uint64_t defaults::ttr::mode(defaults::ttr *this)
{
  if (TelephonyUtilIsInternalBuild()) {
    return 1;
  }
  else {
    return TelephonyUtilIsCarrierBuild();
  }
}

uint64_t defaults::ttr::agelimit(defaults::ttr *this)
{
  return 43200;
}

uint64_t defaults::ttr::supported(defaults::ttr *this)
{
  if (TelephonyUtilIsInternalBuild()) {
    return 1;
  }

  return TelephonyUtilIsCarrierBuild();
}

uint64_t defaults::systemlogs::mode(defaults::systemlogs *this)
{
  if (TelephonyUtilIsInternalBuild()) {
    return 1;
  }
  else {
    return TelephonyUtilIsCarrierBuild();
  }
}

uint64_t defaults::systemlogs::history(defaults::systemlogs *this)
{
  return capabilities::abs::defaultSystemLogsHistory(this);
}

uint64_t defaults::systemlogs::userConfirmationRequired(defaults::systemlogs *this)
{
  return 1;
}

uint64_t defaults::systemlogs::supported(defaults::systemlogs *this)
{
  return 1;
}

uint64_t defaults::profile::enabled(defaults::profile *this)
{
  return 0;
}

uint64_t defaults::profile::version(defaults::profile *this)
{
  return 0;
}

uint64_t defaults::tailspin::enabled(defaults::tailspin *this)
{
  return 0;
}

unint64_t defaults::tracesettings::config@<X0>(void *a1@<X8>)
{
  std::string v3 = (const char *)abm::helper::asString();
  unint64_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    std::string::size_type v8 = operator new(v6 + 1);
    a1[1] = v5;
    a1[2] = v7 | 0x8000000000000000;
    *a1 = v8;
    a1 = v8;
  }
  else
  {
    *((unsigned char *)a1 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a1 = 0;
      return result;
    }
  }
  unint64_t result = (unint64_t)memmove(a1, v3, v5);
  *((unsigned char *)a1 + v5) = 0;
  return result;
}

void CMOnBodyDelegate::create(NSObject **this@<X0>, queue a2@<0:X1>, void *a3@<X8>)
{
  if ([MEMORY[0x1E4F22250] isOnBodyStatusDetectionAvailable])
  {
    *a3 = 0xAAAAAAAAAAAAAAAALL;
    a3[1] = 0xAAAAAAAAAAAAAAAALL;
    size_t v5 = (char *)operator new(0x38uLL);
    uint64_t v6 = *this;
    if (v6) {
      dispatch_retain(v6);
    }
    *(void *)size_t v5 = 0;
    *((void *)v5 + 1) = 0;
    *(_OWORD *)(v5 + 24) = 0u;
    *(_OWORD *)(v5 + 40) = 0u;
    *((void *)v5 + 2) = v6;
    *a3 = v5;
    uint64_t v7 = (atomic_ullong *)operator new(0x28uLL);
    std::string::size_type v8 = (std::__shared_weak_count *)v7;
    v7[2] = 0;
    v7[1] = 0;
    atomic_ullong *v7 = (atomic_ullong)&unk_1F210B6A8;
    v7[3] = (atomic_ullong)v5;
    v7[4] = (atomic_ullong)&__block_literal_global_2;
    a3[1] = v7;
    atomic_fetch_add_explicit(v7 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(v7 + 2, 1uLL, memory_order_relaxed);
    *(void *)size_t v5 = v5;
    *((void *)v5 + 1) = v7;
    if (atomic_fetch_add(v7 + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      if (!v6) {
        return;
      }
    }
    else
    {
      (*(void (**)(atomic_ullong *))(*v7 + 16))(v7);
      std::__shared_weak_count::__release_weak(v8);
      if (!v6) {
        return;
      }
    }
    dispatch_release(v6);
  }
  else
  {
    char v9 = GetOsLogContext()[1];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEFAULT, "Motion on-body detection is not available on this device", v10, 2u);
    }
    *a3 = 0;
    a3[1] = 0;
  }
}

void sub_1C5AEDDB0(void *a1)
{
  int v2 = __cxa_begin_catch(a1);
  _block_invoke((uint64_t)v2, v1);
  __cxa_rethrow();
}

void sub_1C5AEDDC4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t CMOnBodyDelegate::isSupported(CMOnBodyDelegate *this)
{
  return [MEMORY[0x1E4F22250] isOnBodyStatusDetectionAvailable];
}

void _block_invoke(uint64_t a1, uint64_t a2)
{
  int v2 = *(NSObject **)(a2 + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = _block_invoke_2;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a2;
  dispatch_async(v2, block);
}

void _block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(CMOnBodyDelegate **)(a1 + 32);
  if (v1)
  {
    CMOnBodyDelegate::~CMOnBodyDelegate(v1);
    operator delete(v2);
  }
}

void CMOnBodyDelegate::CMOnBodyDelegate(CMOnBodyDelegate *this, queue a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 2) = *(void *)a2.fObj.fObj;
}

{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 2) = *(void *)a2.fObj.fObj;
}

uint64_t CMOnBodyDelegate::shutdown(CMOnBodyDelegate *this)
{
  uint64_t result = [[(id)objc_msgSend(MEMORY[0x1E4F22250], "sharedOnBodyStatusManager") stopOnBodyStatusDetection];
  if (*((void *)this + 2)) {
    *((void *)this + 2) = 0;
  }
  return result;
}

uint64_t CMOnBodyDelegate::stopMotionDetection(CMOnBodyDelegate *this)
{
  uint64_t v1 = (void *)[MEMORY[0x1E4F22250] sharedOnBodyStatusManager];

  return [v1 stopOnBodyStatusDetection];
}

void CMOnBodyDelegate::~CMOnBodyDelegate(CMOnBodyDelegate *this)
{
  uint64_t v2 = *((void *)this + 3);
  for (uint64_t i = *((void *)this + 4); i != v2; i -= 16)
  {
    int v4 = *(NSObject **)(i - 8);
    if (v4) {
      dispatch_release(v4);
    }
    size_t v5 = *(const void **)(i - 16);
    if (v5) {
      _Block_release(v5);
    }
  }
  *((void *)this + 4) = v2;
  uint64_t v6 = (const void *)*((void *)this + 6);
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = *((void *)this + 3);
  if (v7)
  {
    uint64_t v8 = *((void *)this + 4);
    char v9 = (void *)*((void *)this + 3);
    if (v8 != v7)
    {
      do
      {
        uint64_t v10 = *(NSObject **)(v8 - 8);
        if (v10) {
          dispatch_release(v10);
        }
        size_t v11 = *(const void **)(v8 - 16);
        if (v11) {
          _Block_release(v11);
        }
        v8 -= 16;
      }
      while (v8 != v7);
      char v9 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v7;
    operator delete(v9);
  }
  size_t v12 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
}

void CMOnBodyDelegate::startMotionDetection(CMOnBodyDelegate *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 1);
  if (!v2 || (uint64_t v3 = *(void *)this, (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (*((void *)this + 6)) {
      uint64_t v6 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      uint64_t v6 = 0;
    }
    if (v6)
    {
LABEL_8:
      uint64_t v7 = (void *)[MEMORY[0x1E4F22250] sharedOnBodyStatusManager];
      uint64_t v8 = *((void *)this + 2);
      uint64_t v9 = *((void *)this + 6);
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 3321888768;
      v12[2] = ___ZN16CMOnBodyDelegate20startMotionDetectionEv_block_invoke;
      v12[3] = &__block_descriptor_48_e8_32c41_ZTSNSt3__18weak_ptrI16CMOnBodyDelegateEE_e36_v24__0__CMOnBodyStatus_8__NSError_16l;
      v12[4] = v3;
      char v13 = v5;
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      [v7 startOnBodyStatusDetectionToQueue:v8 withParameters:v9 handler:v12];
      if (v13) {
        std::__shared_weak_count::__release_weak(v13);
      }
      goto LABEL_16;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
    if (*((void *)this + 6)) {
      uint64_t v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      uint64_t v10 = 0;
    }
    if (v10) {
      goto LABEL_8;
    }
  }
  size_t v11 = GetOsLogContext()[1];
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::__fs::filesystem::path buf = 0;
    _os_log_impl(&dword_1C59C6000, v11, OS_LOG_TYPE_DEFAULT, "Motion Parameter is not ready. Cannot start the motion detection!", buf, 2u);
  }
LABEL_16:
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C5AEE1B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void sub_1C5AEE1C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14)
  {
    std::__shared_weak_count::__release_weak(a14);
    std::__shared_weak_count::__release_weak(v14);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v14);
  _Unwind_Resume(a1);
}

void ___ZN16CMOnBodyDelegate20startMotionDetectionEv_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    size_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)(a1 + 32);
      if (v7) {
        CMOnBodyDelegate::motionCallback_sync(v7, [a2 result:v7 confidence:], [a2 confidence]);
      }
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_1C5AEE2D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void CMOnBodyDelegate::motionCallback_sync(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v3 != v4)
  {
    while (!*(void *)v3)
    {
      uint64_t v7 = 0;
      uint64_t v8 = *(NSObject **)(v3 + 8);
      if (v8) {
        goto LABEL_6;
      }
LABEL_7:
      if (!v7)
      {
        uint64_t v10 = 0;
        uint64_t v12 = MEMORY[0x1E4F143A8];
        uint64_t v13 = 3321888768;
        uint64_t v14 = ___ZNK8dispatch8callbackIU13block_pointerFvN16CMOnBodyDelegate14CMOnBodyResultENS1_24CMOnBodyResultConfidenceEEEclIJS2_S3_EEEvDpT__block_invoke;
        uint64_t v15 = &__block_descriptor_48_e8_32c109_ZTSN8dispatch5blockIU13block_pointerFvN16CMOnBodyDelegate14CMOnBodyResultENS1_24CMOnBodyResultConfidenceEEEE_e5_v8__0l;
LABEL_13:
        size_t v11 = 0;
        goto LABEL_14;
      }
      uint64_t v9 = _Block_copy(v7);
      uint64_t v10 = v9;
      uint64_t v12 = MEMORY[0x1E4F143A8];
      uint64_t v13 = 3321888768;
      uint64_t v14 = ___ZNK8dispatch8callbackIU13block_pointerFvN16CMOnBodyDelegate14CMOnBodyResultENS1_24CMOnBodyResultConfidenceEEEclIJS2_S3_EEEvDpT__block_invoke;
      uint64_t v15 = &__block_descriptor_48_e8_32c109_ZTSN8dispatch5blockIU13block_pointerFvN16CMOnBodyDelegate14CMOnBodyResultENS1_24CMOnBodyResultConfidenceEEEE_e5_v8__0l;
      if (!v9) {
        goto LABEL_13;
      }
      size_t v11 = _Block_copy(v9);
LABEL_14:
      aBlocunint64_t k = v11;
      int v17 = a2;
      int v18 = a3;
      dispatch_async(v8, &v12);
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (v10) {
        _Block_release(v10);
      }
      if (v8) {
        dispatch_release(v8);
      }
      if (v7) {
        _Block_release(v7);
      }
      v3 += 16;
      if (v3 == v4) {
        return;
      }
    }
    uint64_t v7 = _Block_copy(*(const void **)v3);
    uint64_t v8 = *(NSObject **)(v3 + 8);
    if (!v8) {
      goto LABEL_7;
    }
LABEL_6:
    dispatch_retain(v8);
    goto LABEL_7;
  }
}

uint64_t __copy_helper_block_e8_32c41_ZTSNSt3__18weak_ptrI16CMOnBodyDelegateEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c41_ZTSNSt3__18weak_ptrI16CMOnBodyDelegateEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void CMOnBodyDelegate::setThresholds(CMOnBodyDelegate *this, CFTypeRef cf)
{
  uint64_t v3 = (const void *)*((void *)this + 6);
  if (v3) {
    uint64_t v4 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4)
  {
    size_t v5 = GetOsLogContext()[1];
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    __int16 v10 = 0;
    uint64_t v6 = "Motion parameter is already set.";
    uint64_t v7 = (uint8_t *)&v10;
    goto LABEL_13;
  }
  if (cf)
  {
    CFRetain(cf);
    uint64_t v3 = (const void *)*((void *)this + 6);
  }
  *((void *)this + 6) = cf;
  if (v3) {
    CFRelease(v3);
  }
  [((id)objc_msgSend(MEMORY[0x1E4F22250], "sharedOnBodyStatusManager")) setPropertiesWithDictionary:cf];
  size_t v5 = GetOsLogContext()[1];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v9 = 0;
    uint64_t v6 = "Motion parameter is set!";
    uint64_t v7 = (uint8_t *)&v9;
LABEL_13:
    _os_log_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_DEFAULT, v6, v7, 2u);
  }
}

void *CMOnBodyDelegate::registerCallback(void *a1, void **a2)
{
  uint64_t v4 = (void *)a1[4];
  if ((unint64_t)v4 >= a1[5])
  {
    uint64_t result = std::vector<dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)> const&>(a1 + 3, (uint64_t)a2);
    a1[4] = result;
  }
  else
  {
    size_t v5 = *a2;
    if (*a2) {
      size_t v5 = _Block_copy(v5);
    }
    uint64_t v6 = a2[1];
    void *v4 = v5;
    v4[1] = v6;
    if (v6) {
      dispatch_retain(v6);
    }
    uint64_t result = v4 + 2;
    a1[4] = v4 + 2;
  }
  return result;
}

const char *CMOnBodyDelegate::toString(unsigned int a1)
{
  if (a1 > 2) {
    return "Unknown";
  }
  else {
    return off_1E651BA40[a1];
  }
}

const char *CMOnBodyDelegate::toString(int a1)
{
  uint64_t v1 = "Confidence Level Unknown";
  if (a1 == 1) {
    uint64_t v1 = "Confidence Level High";
  }
  if (a1) {
    return v1;
  }
  else {
    return "Confidence Level Low";
  }
}

void *std::vector<dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)> const&>(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1] - *a1;
  unint64_t v3 = (v2 >> 4) + 1;
  if (v3 >> 60) {
    std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 3 > v3) {
    unint64_t v3 = v6 >> 3;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  if (!v7)
  {
    uint64_t v8 = 0;
    __int16 v9 = *(void **)a2;
    if (!*(void *)a2) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v7 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v8 = (char *)operator new(16 * v7);
  __int16 v9 = *(void **)a2;
  if (*(void *)a2) {
LABEL_12:
  }
    __int16 v9 = _Block_copy(v9);
LABEL_13:
  __int16 v10 = *(NSObject **)(a2 + 8);
  size_t v11 = &v8[16 * (v2 >> 4)];
  *(void *)size_t v11 = v9;
  *((void *)v11 + 1) = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  uint64_t v12 = &v8[16 * v7];
  uint64_t v13 = v11 + 16;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    unint64_t v16 = (unint64_t)&v15[-*a1 - 16];
    if (v16 < 0xD0) {
      goto LABEL_17;
    }
    unint64_t v23 = &v15[-(v16 & 0xFFFFFFFFFFFFFFF0)];
    BOOL v24 = &v8[v2 - 8 - (v16 & 0xFFFFFFFFFFFFFFF0)] >= v15 || v23 - 8 >= v11;
    BOOL v25 = !v24;
    if (v23 - 16 < &v8[v2 - 8] && &v8[v2 - (v16 & 0xFFFFFFFFFFFFFFF0) - 16] < v15 - 8) {
      goto LABEL_17;
    }
    if (v25) {
      goto LABEL_17;
    }
    uint64_t v27 = (v16 >> 4) + 1;
    uint64_t v28 = 16 * (v27 & 0x1FFFFFFFFFFFFFFELL);
    int v17 = &v11[-v28];
    uint64_t v29 = &v15[-v28];
    char v30 = (double *)(v11 - 32);
    uint64_t v31 = (const double *)(v15 - 32);
    uint64_t v32 = v27 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      float64x2x2_t v33 = vld2q_f64(v31);
      vst2q_f64(v30, v33);
      *(_OWORD *)uint64_t v31 = 0uLL;
      *((_OWORD *)v31 + 1) = 0uLL;
      v31 -= 4;
      v30 -= 4;
      v32 -= 2;
    }
    while (v32);
    size_t v11 = v17;
    uint64_t v15 = v29;
    if (v27 != (v27 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_17:
      int v17 = v11;
      do
      {
        long long v18 = *((_OWORD *)v15 - 1);
        v15 -= 16;
        *((_OWORD *)v17 - 1) = v18;
        v17 -= 16;
        *(void *)uint64_t v15 = 0;
        *((void *)v15 + 1) = 0;
      }
      while (v15 != v14);
    }
    uint64_t v15 = (char *)*a1;
    uint64_t v19 = (char *)a1[1];
    *a1 = v17;
    a1[1] = v13;
    a1[2] = v12;
    while (v19 != v15)
    {
      uint64_t v20 = *((void *)v19 - 1);
      if (v20) {
        dispatch_release(v20);
      }
      long long v21 = (const void *)*((void *)v19 - 2);
      if (v21) {
        _Block_release(v21);
      }
      v19 -= 16;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

void std::__shared_ptr_pointer<CMOnBodyDelegate *,void({block_pointer})(CMOnBodyDelegate *),std::allocator<CMOnBodyDelegate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<CMOnBodyDelegate *,void({block_pointer})(CMOnBodyDelegate *),std::allocator<CMOnBodyDelegate>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<CMOnBodyDelegate *,void({block_pointer})(CMOnBodyDelegate *),std::allocator<CMOnBodyDelegate>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C5BC9659) {
    return a1 + 32;
  }
  if (((v3 & 0x80000001C5BC9659 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C5BC9659)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C5BC9659 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 32;
  }
  return 0;
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvN16CMOnBodyDelegate14CMOnBodyResultENS1_24CMOnBodyResultConfidenceEEEclIJS2_S3_EEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44));
}

void *__copy_helper_block_e8_32c109_ZTSN8dispatch5blockIU13block_pointerFvN16CMOnBodyDelegate14CMOnBodyResultENS1_24CMOnBodyResultConfidenceEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 32);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c109_ZTSN8dispatch5blockIU13block_pointerFvN16CMOnBodyDelegate14CMOnBodyResultENS1_24CMOnBodyResultConfidenceEEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    _Block_release(v1);
  }
}

BOOL BootControllerINT::prepare(capabilities::radio *a1, std::string *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  memset(__p, 170, sizeof(__p));
  capabilities::radio::personalizedFirmwarePath((uint64_t *)__p, a1);
  v4.tv_seCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
  v4.tv_nseCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v12.st_blkstd::string::size_type size = v4;
  *(timespec *)v12.st_qspare = v4;
  v12.st_birthtimespeCC_SHA256_CTX c = v4;
  *(timespec *)&v12.st_std::string::size_type size = v4;
  v12.st_mtimespeCC_SHA256_CTX c = v4;
  v12.st_ctimespeCC_SHA256_CTX c = v4;
  *(timespec *)&v12.st_uid = v4;
  v12.st_atimespeCC_SHA256_CTX c = v4;
  *(timespec *)&v12.st_dev = v4;
  if (SHIBYTE(__p[2]) >= 0) {
    size_t v5 = __p;
  }
  else {
    size_t v5 = (void **)__p[0];
  }
  int v6 = stat((const char *)v5, &v12);
  if (v6)
  {
    unint64_t v7 = *((void *)a1 + 5);
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      __int16 v10 = __p;
      if (SHIBYTE(__p[2]) < 0) {
        __int16 v10 = (void **)__p[0];
      }
      v12.st_dev = 136315138;
      *(void *)&v12.st_mode = v10;
      _os_log_error_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_ERROR, "Failed to find the firmware in \"%s\"", (uint8_t *)&v12, 0xCu);
    }
    capabilities::trace::allowed((capabilities::trace *)v8);
    std::string::__assign_external(a2, "Baseband Firmware Path Not Found", 0x20uLL);
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return v6 == 0;
}

void sub_1C5AEEB10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BootControllerINT::bootModem(uint64_t a1, uint64_t a2)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  unint64_t v75 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v76 = 0xAAAAAAAAAAAAAAAALL;
  timespec v4 = (ctu::XpcJetsamAssertion *)pthread_mutex_lock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
  size_t v5 = (void *)xmmword_1EBBDC918;
  if (!(void)xmmword_1EBBDC918)
  {
    ctu::XpcJetsamAssertion::create_default_global((uint64_t *)&v78, v4);
    long long v6 = *(_OWORD *)&v78.__r_.__value_.__l.__data_;
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = 0uLL;
    unint64_t v7 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDC918 + 1);
    xmmword_1EBBDC918 = v6;
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    std::string::size_type size = (std::__shared_weak_count *)v78.__r_.__value_.__l.__size_;
    if (v78.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v78.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
    size_t v5 = (void *)xmmword_1EBBDC918;
  }
  __int16 v9 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDC918 + 1);
  v73[0] = v5;
  v73[1] = *((void **)&xmmword_1EBBDC918 + 1);
  if (*((void *)&xmmword_1EBBDC918 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1EBBDC918 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
  v74[23] = 13;
  strcpy(v74, "Booting modem");
  ctu::XpcJetsamAssertion::createActivity();
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  BYTE5(v73[2]) = -86;
  HIWORD(v73[2]) = 5290;
  strcpy((char *)v73, "boot::debugArguments");
  if (*(char *)(a2 + 23) < 0)
  {
    *(void *)(a2 + 8) = 7;
    __int16 v10 = *(char **)a2;
  }
  else
  {
    *(unsigned char *)(a2 + 23) = 7;
    __int16 v10 = (char *)a2;
  }
  strcpy(v10, "unknown");
  CFTypeRef v71 = 0;
  uint64_t v72 = 0;
  CFTypeRef v70 = 0;
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v13 = Mutable;
  if (Mutable)
  {
    uint64_t v72 = Mutable;
    CFMutableDictionaryRef v14 = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFMutableDictionaryRef v15 = v14;
    if (v14)
    {
      CFTypeRef v71 = v14;
      CFMutableDictionaryRef v16 = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFMutableDictionaryRef v17 = v16;
      if (v16)
      {
        CFTypeRef v70 = v16;
        ctu::cf::update<__CFString const*,__CFDictionary *>(v13, @"RestoreOptions", v15);
        BOOL v18 = ctu::cf::update<__CFString const*,__CFDictionary *>(v13, @"Options", v17);
        capabilities::radio::personalizedFirmwarePath((uint64_t *)&__p, (capabilities::radio *)v18);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v78, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else {
          std::string v78 = __p;
        }
        v63.__r_.__value_.__r.__words[0] = (std::string::size_type)@"firmwareDataFolder";
        CFRetain(@"firmwareDataFolder");
        value[0] = 0;
        ctu::cf::convert_copy();
        char v77 = 0;
        CFRelease(@"firmwareDataFolder");
        if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v78.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_33;
          }
        }
        else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_33;
        }
        operator delete(__p.__r_.__value_.__l.__data_);
LABEL_33:
        v78.__r_.__value_.__r.__words[0] = (std::string::size_type)@"BootMode";
        CFRetain(@"BootMode");
        LODWORD(value[0]) = 1;
        CFNumberRef v24 = CFNumberCreate(v11, kCFNumberIntType, value);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
        if (v24)
        {
          CFDictionarySetValue(v13, @"BootMode", v24);
          CFRelease(v24);
        }
        CFRelease(@"BootMode");
        BOOL v25 = (const void *)*MEMORY[0x1E4F1CFD0];
        ctu::cf::update<__CFString const*,__CFBoolean const*>(v13, @"skipCoredump", (CFTypeRef)*MEMORY[0x1E4F1CFD0]);
        ctu::cf::update<__CFString const*,__CFBoolean const*>(v13, @"ccBoot", v25);
        memset(&__p, 0, sizeof(__p));
        char v77 = (void *)0xAAAAAAAAAAAAAAAALL;
        CFTypeRef cf = 0;
        pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        if (!(void)xmmword_1EBBDC7D8)
        {
          uint64_t v27 = (uint64_t (***)(void *, void *))operator new(0x18uLL);
          MEMORY[0x1C87942F0](v27, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
          uint64_t v26 = operator new(0x20uLL);
          void *v26 = &unk_1F210A638;
          v26[1] = 0;
          v26[2] = 0;
          v26[3] = v27;
          uint64_t v28 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDC7D8 + 1);
          *(void *)&xmmword_1EBBDC7D8 = v27;
          *((void *)&xmmword_1EBBDC7D8 + 1) = v26;
          if (!v28)
          {
            v78.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
            v78.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
            goto LABEL_44;
          }
          if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        uint64_t v26 = (void *)*((void *)&xmmword_1EBBDC7D8 + 1);
        uint64_t v27 = (uint64_t (***)(void *, void *))xmmword_1EBBDC7D8;
        *(_OWORD *)&v78.__r_.__value_.__l.__data_ = xmmword_1EBBDC7D8;
        if (!*((void *)&xmmword_1EBBDC7D8 + 1))
        {
LABEL_45:
          pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
          v67.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAA00;
          *(_OWORD *)&v67.__r_.__value_.__r.__words[1] = xmmword_1C5BC9680;
          if (SHIBYTE(v73[2]) >= 0) {
            uint64_t v29 = (const char *)v73;
          }
          else {
            uint64_t v29 = (const char *)v73[0];
          }
          ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)value, v29);
          char v30 = (const void *)(**v27)(v27, value[0]);
          if (v30)
          {
            char v31 = ctu::cf::assign();
            CFRelease(v30);
            MEMORY[0x1C8794290](value);
            if (v31) {
              goto LABEL_62;
            }
            size_t v32 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_51;
            }
          }
          else
          {
            MEMORY[0x1C8794290](value);
            size_t v32 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_51:
              if ((v32 & 0x80) != 0) {
                std::string::__assign_no_alias<true>(&__p, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
              }
              else {
                std::string __p = v67;
              }
              goto LABEL_62;
            }
          }
          if ((v32 & 0x80u) == 0) {
            float64x2x2_t v33 = &v67;
          }
          else {
            float64x2x2_t v33 = (std::string *)v67.__r_.__value_.__r.__words[0];
          }
          if ((v32 & 0x80u) == 0) {
            size_t v34 = v32;
          }
          else {
            size_t v34 = v67.__r_.__value_.__l.__size_;
          }
          std::string::__assign_no_alias<false>((void **)&__p.__r_.__value_.__l.__data_, v33, v34);
LABEL_62:
          if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v67.__r_.__value_.__l.__data_);
            uint64_t v35 = (std::__shared_weak_count *)v78.__r_.__value_.__l.__size_;
            if (!v78.__r_.__value_.__l.__size_) {
              goto LABEL_67;
            }
          }
          else
          {
            uint64_t v35 = (std::__shared_weak_count *)v78.__r_.__value_.__l.__size_;
            if (!v78.__r_.__value_.__l.__size_) {
              goto LABEL_67;
            }
          }
          if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
            std::string::size_type v42 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v42 = __p.__r_.__value_.__l.__size_;
            }
            if (v42) {
              goto LABEL_70;
            }
            goto LABEL_83;
          }
LABEL_67:
          std::string::size_type v36 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v36 = __p.__r_.__value_.__l.__size_;
          }
          if (v36)
          {
LABEL_70:
            if (ctu::cf::convert_copy())
            {
              uint64_t v37 = *(NSObject **)(a1 + 40);
              if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
              {
                p_p = &__p;
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                LODWORD(v78.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)v78.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
                _os_log_impl(&dword_1C59C6000, v37, OS_LOG_TYPE_DEFAULT, "#N Retrieved debug args: %s", (uint8_t *)&v78, 0xCu);
              }
              int v39 = v77;
              CFTypeRef v40 = cf;
              CFTypeRef cf = v77;
              if (v40) {
                CFRelease(v40);
              }
              long long v41 = (__CFDictionary *)v70;
              v78.__r_.__value_.__r.__words[0] = (std::string::size_type)@"DebugArgs";
              CFRetain(@"DebugArgs");
              value[0] = v39;
              if (v39)
              {
                CFRetain(v39);
                CFDictionarySetValue(v41, @"DebugArgs", v39);
                CFRelease(v39);
              }
              CFRelease(@"DebugArgs");
            }
          }
LABEL_83:
          value[1] = (void *)0xAAAAAAAAAAAAAA00;
          uint64_t v66 = 0x8AAAAAAAAAAAAAALL;
          CFTypeRef v64 = 0;
          value[0] = (void *)0x646E616265736142;
          uint64_t v13 = v72;
          v78.__r_.__value_.__r.__words[0] = 0;
          v78.__r_.__value_.__l.__size_ = (std::string::size_type)&v64;
          unint64_t v43 = (const void *)BasebandUpdaterCreate();
          unint64_t v44 = *(const void **)v78.__r_.__value_.__l.__size_;
          if (v78.__r_.__value_.__r.__words[0])
          {
            *(void *)v78.__r_.__value_.__l.__size_ = v78.__r_.__value_.__r.__words[0];
            if (!v44) {
              goto LABEL_88;
            }
          }
          else
          {
            *(void *)v78.__r_.__value_.__l.__size_ = 0;
            if (!v44) {
              goto LABEL_88;
            }
          }
          CFRelease(v44);
LABEL_88:
          if (!v43)
          {
            CFTypeRef v47 = v64;
            if (v64) {
              long long v48 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
            }
            else {
              long long v48 = 0;
            }
            if (v48 && (uint64_t v49 = *(NSObject **)(a1 + 40), os_log_type_enabled(v49, OS_LOG_TYPE_ERROR)))
            {
              LODWORD(v78.__r_.__value_.__l.__data_) = 138412290;
              *(std::string::size_type *)((char *)v78.__r_.__value_.__r.__words + 4) = (std::string::size_type)v47;
              _os_log_error_impl(&dword_1C59C6000, v49, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&v78, 0xCu);
              uint64_t v50 = *(NSObject **)(a1 + 40);
              if (!os_log_type_enabled(v50, OS_LOG_TYPE_ERROR)) {
                goto LABEL_112;
              }
            }
            else
            {
              uint64_t v50 = *(NSObject **)(a1 + 40);
              if (!os_log_type_enabled(v50, OS_LOG_TYPE_ERROR)) {
                goto LABEL_112;
              }
            }
            LOWORD(v78.__r_.__value_.__l.__data_) = 0;
            _os_log_error_impl(&dword_1C59C6000, v50, OS_LOG_TYPE_ERROR, "Failed to initialize BasebandUpdater", (uint8_t *)&v78, 2u);
            goto LABEL_112;
          }
          v78.__r_.__value_.__r.__words[0] = 0;
          v78.__r_.__value_.__l.__size_ = (std::string::size_type)&v64;
          int v45 = BasebandUpdaterExecCommand();
          uint64_t v46 = *(const void **)v78.__r_.__value_.__l.__size_;
          if (v78.__r_.__value_.__r.__words[0])
          {
            *(void *)v78.__r_.__value_.__l.__size_ = v78.__r_.__value_.__r.__words[0];
            if (v46) {
              goto LABEL_100;
            }
          }
          else
          {
            *(void *)v78.__r_.__value_.__l.__size_ = 0;
            if (v46) {
LABEL_100:
            }
              CFRelease(v46);
          }
          if (v45)
          {
            uint64_t v51 = *(NSObject **)(a1 + 40);
            if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(v78.__r_.__value_.__l.__data_) = 0;
              _os_log_impl(&dword_1C59C6000, v51, OS_LOG_TYPE_DEFAULT, "#I Baseband boot complete", (uint8_t *)&v78, 2u);
            }
            CFRelease(v43);
            uint64_t v20 = 1;
            CFTypeRef v52 = v64;
            if (!v64)
            {
LABEL_117:
              if (SHIBYTE(v66) < 0)
              {
                operator delete(value[0]);
                CFTypeRef v58 = cf;
                if (!cf) {
                  goto LABEL_122;
                }
              }
              else
              {
                CFTypeRef v58 = cf;
                if (!cf)
                {
LABEL_122:
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  {
                    operator delete(__p.__r_.__value_.__l.__data_);
                    CFTypeRef v59 = v70;
                    if (!v70) {
                      goto LABEL_127;
                    }
                  }
                  else
                  {
                    CFTypeRef v59 = v70;
                    if (!v70)
                    {
LABEL_127:
                      CFTypeRef v23 = v71;
                      if (!v71) {
                        goto LABEL_129;
                      }
                      goto LABEL_128;
                    }
                  }
                  CFRelease(v59);
                  goto LABEL_127;
                }
              }
              CFRelease(v58);
              goto LABEL_122;
            }
LABEL_116:
            CFRelease(v52);
            goto LABEL_117;
          }
          CFRelease(v43);
          CFTypeRef v53 = v64;
          if (v64) {
            long long v54 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            long long v54 = 0;
          }
          if (v54 && (long long v55 = *(NSObject **)(a1 + 40), os_log_type_enabled(v55, OS_LOG_TYPE_ERROR)))
          {
            LODWORD(v78.__r_.__value_.__l.__data_) = 138412290;
            *(std::string::size_type *)((char *)v78.__r_.__value_.__r.__words + 4) = (std::string::size_type)v53;
            _os_log_error_impl(&dword_1C59C6000, v55, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&v78, 0xCu);
            unint64_t v56 = *(NSObject **)(a1 + 40);
            if (!os_log_type_enabled(v56, OS_LOG_TYPE_ERROR)) {
              goto LABEL_112;
            }
          }
          else
          {
            unint64_t v56 = *(NSObject **)(a1 + 40);
            if (!os_log_type_enabled(v56, OS_LOG_TYPE_ERROR)) {
              goto LABEL_112;
            }
          }
          LOWORD(v78.__r_.__value_.__l.__data_) = 0;
          _os_log_error_impl(&dword_1C59C6000, v56, OS_LOG_TYPE_ERROR, "Failed to boot baseband", (uint8_t *)&v78, 2u);
LABEL_112:
          memset(&v78, 0, sizeof(v78));
          ctu::cf::assign();
          std::string v63 = v78;
          long long v57 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
          {
            long long v62 = &v63;
            if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              long long v62 = (std::string *)v63.__r_.__value_.__r.__words[0];
            }
            LODWORD(v78.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)v78.__r_.__value_.__r.__words + 4) = (std::string::size_type)v62;
            _os_log_error_impl(&dword_1C59C6000, v57, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v78, 0xCu);
            if ((*(char *)(a2 + 23) & 0x80000000) == 0)
            {
LABEL_115:
              uint64_t v20 = 0;
              *(std::string *)a2 = v63;
              CFTypeRef v52 = v64;
              if (!v64) {
                goto LABEL_117;
              }
              goto LABEL_116;
            }
          }
          else if ((*(char *)(a2 + 23) & 0x80000000) == 0)
          {
            goto LABEL_115;
          }
          operator delete(*(void **)a2);
          goto LABEL_115;
        }
LABEL_44:
        atomic_fetch_add_explicit(v26 + 1, 1uLL, memory_order_relaxed);
        goto LABEL_45;
      }
      long long v21 = *(NSObject **)(a1 + 40);
      if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
LABEL_28:
        uint64_t v20 = 0;
        CFTypeRef v23 = v71;
        if (!v71) {
          goto LABEL_129;
        }
LABEL_128:
        CFRelease(v23);
        goto LABEL_129;
      }
      LOWORD(v78.__r_.__value_.__l.__data_) = 0;
      uint64_t v22 = "Failed to create updater option dictionary!";
    }
    else
    {
      long long v21 = *(NSObject **)(a1 + 40);
      if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
        goto LABEL_28;
      }
      LOWORD(v78.__r_.__value_.__l.__data_) = 0;
      uint64_t v22 = "Failed to create restore option dictionary!";
    }
    _os_log_error_impl(&dword_1C59C6000, v21, OS_LOG_TYPE_ERROR, v22, (uint8_t *)&v78, 2u);
    uint64_t v20 = 0;
    CFTypeRef v23 = v71;
    if (v71) {
      goto LABEL_128;
    }
  }
  else
  {
    uint64_t v19 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v78.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_1C59C6000, v19, OS_LOG_TYPE_ERROR, "Failed to create option dictionary!", (uint8_t *)&v78, 2u);
    }
    uint64_t v20 = 0;
    uint64_t v13 = 0;
  }
LABEL_129:
  if (v13) {
    CFRelease(v13);
  }
  if (SHIBYTE(v73[2]) < 0) {
    operator delete(v73[0]);
  }
  long long v60 = (std::__shared_weak_count *)v76;
  if (v76 && !atomic_fetch_add((atomic_ullong *volatile)(v76 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
  return v20;
}

void sub_1C5AEF804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,int a34,__int16 a35,char a36,char a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

const void **ctu::cf::detail::TakeOwnershipProxy<__CFError>::~TakeOwnershipProxy(const void **a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = (const void **)a1[1];
  timespec v4 = *v2;
  if (v3)
  {
    std::__shared_weak_count *v2 = v3;
    if (v4) {
      goto LABEL_5;
    }
  }
  else
  {
    std::__shared_weak_count *v2 = 0;
    if (v4) {
LABEL_5:
    }
      CFRelease(v4);
  }
  return a1;
}

void BootControllerINT::handleError(BootControllerINT *this@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  memset(a2, 170, 24);
  long long v7 = 0uLL;
  uint64_t v8 = 0;
  ctu::cf::assign();
  *a2 = 0uLL;
  *((void *)a2 + 2) = v8;
  size_t v5 = *((void *)this + 5);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)a2 + 23) >= 0) {
      long long v6 = a2;
    }
    else {
      long long v6 = *(_OWORD **)a2;
    }
    LODWORD(v7) = 136315138;
    *(void *)((char *)&v7 + 4) = v6;
    _os_log_error_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v7, 0xCu);
  }
}

void sub_1C5AEFB98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void BootControllerINT::~BootControllerINT(BootControllerINT *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1F2111FC0;
  uint64_t v3 = (const void *)*((void *)this + 9);
  if (v3) {
    CFRelease(v3);
  }
  *(void *)this = &unk_1F210B810;
  MEMORY[0x1C87940C0]((char *)this + 8);
}

{
  std::__shared_weak_count *v2;
  const void *v3;
  uint64_t vars8;

  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1F2111FC0;
  uint64_t v3 = (const void *)*((void *)this + 9);
  if (v3) {
    CFRelease(v3);
  }
  *(void *)this = &unk_1F210B810;
  MEMORY[0x1C87940C0]((char *)this + 8);

  operator delete(this);
}

uint64_t ctu::Loggable<BootController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

void ctu::Loggable<BootController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 9;
  strcpy(a1, "boot.ctrl");
}

uint64_t ctu::Loggable<BootController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<BootController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F210B810;
  MEMORY[0x1C87940C0](a1 + 1);
  return a1;
}

void ctu::Loggable<BootController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F210B810;
  MEMORY[0x1C87940C0](a1 + 1);

  operator delete(a1);
}

uint64_t ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void ctu::cf::update<__CFString const*,__CFBoolean const*>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a3)
  {
    CFRetain(a3);
    if (cf) {
      CFDictionarySetValue(a1, cf, a3);
    }
    CFRelease(a3);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C5AEFEF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

void sub_1C5AEFF1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_6()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::manager_global>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::manager_global,support::log::manager_global,ctu::PthreadMutexGuardPolicy<support::log::manager_global>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

uint64_t __cxx_global_var_init_27()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

const char *HealthEventDB::getName(HealthEventDB *this)
{
  return "HealthEventDB";
}

uint64_t HealthEventDB::addHealthEvent(HealthEventDB *this, const HealthEvent *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  timespec v4 = *((void *)this + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    HealthEvent::asString(a2, __p);
    CFAllocatorRef v11 = v13 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::__fs::filesystem::path buf = 136315138;
    CFMutableDictionaryRef v15 = v11;
    _os_log_debug_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEBUG, "#D Adding health event: %s", buf, 0xCu);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v6 = *((void *)this + 10);
  uint64_t v5 = *((void *)this + 11);
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 3) == *((void *)this + 14))
  {
    if (v5 != v6)
    {
      *(_OWORD *)(*((void *)this + 13) + 8) = *(_OWORD *)((char *)a2 + 8);
      uint64_t v7 = *((void *)this + 13) + 24;
      *((void *)this + 13) = v7;
      if (v7 == *((void *)this + 11))
      {
        uint64_t v7 = *((void *)this + 10);
        *((void *)this + 13) = v7;
      }
      *((void *)this + 12) = v7;
    }
  }
  else
  {
    uint64_t v8 = *((void *)this + 13);
    *(void *)uint64_t v8 = &unk_1F2107A48;
    *(_OWORD *)(v8 + 8) = *(_OWORD *)((char *)a2 + 8);
    uint64_t v9 = *((void *)this + 13) + 24;
    *((void *)this + 13) = v9;
    if (v9 == *((void *)this + 11)) {
      *((void *)this + 13) = *((void *)this + 10);
    }
    ++*((void *)this + 14);
  }
  HealthEventDB::commitToDisk(this);
  return 1;
}

void HealthEventDB::commitToDisk(HealthEventDB *this)
{
  CFTypeRef v29 = 0;
  CFTypeRef v30 = 0;
  CFTypeRef cf = 0;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  timespec v4 = Mutable;
  if (Mutable) {
    CFTypeRef v30 = Mutable;
  }
  CFMutableArrayRef v5 = CFArrayCreateMutable(v2, 0, MEMORY[0x1E4F1D510]);
  uint64_t v6 = v5;
  if (v5) {
    CFTypeRef v29 = v5;
  }
  CFMutableArrayRef v7 = CFArrayCreateMutable(v2, 0, MEMORY[0x1E4F1D510]);
  uint64_t v9 = v7;
  if (v7) {
    CFTypeRef cf = v7;
  }
  if (*((void *)this + 14))
  {
    uint64_t v10 = *((void *)this + 12);
    if (v10)
    {
      while (1)
      {
        LOBYTE(__p[0]) = *(unsigned char *)(v10 + 8);
        *(void *)&long long valuePtr = *(void *)(v10 + 16);
        CFNumberRef v11 = CFNumberCreate(v2, kCFNumberSInt8Type, __p);
        CFNumberRef v12 = CFNumberCreate(v2, kCFNumberSInt64Type, &valuePtr);
        CFNumberRef v13 = v12;
        if (v11
           ? ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::get
           : 0)
        {
          if (v12
             ? ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::get
             : 0)
          {
            break;
          }
        }
        if (v12) {
          goto LABEL_22;
        }
LABEL_23:
        if (v11) {
          CFRelease(v11);
        }
        v10 += 24;
        if (v10 == *((void *)this + 11)) {
          uint64_t v10 = *((void *)this + 10);
        }
        if (!v10 || v10 == *((void *)this + 13)) {
          goto LABEL_29;
        }
      }
      if (v11)
      {
        CFRetain(v11);
        CFArrayAppendValue(v6, v11);
        CFRelease(v11);
      }
      if (!v13) {
        goto LABEL_23;
      }
      CFRetain(v13);
      CFArrayAppendValue(v9, v13);
      CFRelease(v13);
LABEL_22:
      CFRelease(v13);
      goto LABEL_23;
    }
  }
LABEL_29:
  ctu::cf::insert<char const*,__CFArray *>(v4, (const __CFString **)"HealthEventTypes", v6, (uint64_t)v2, v8);
  ctu::cf::insert<char const*,__CFArray *>((__CFDictionary *)v30, (const __CFString **)"HealthEventTimes", cf, (uint64_t)v2, v16);
  for (uint64_t i = (uint64_t *)*((void *)this + 17); i; uint64_t i = (uint64_t *)*i)
  {
    CFNumberRef v24 = (const __CFString **)(i + 2);
    if (*((char *)i + 39) < 0) {
      CFNumberRef v24 = (const __CFString **)*v24;
    }
    (*(void (**)(long long *__return_ptr))(*(void *)i[5] + 24))(&valuePtr);
    ctu::cf::insert<char const*,__CFDictionary const*>((__CFDictionary *)v30, v24, (const void *)valuePtr, (uint64_t)v2, v25);
    if ((void)valuePtr) {
      CFRelease((CFTypeRef)valuePtr);
    }
  }
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  BOOL v18 = (os_unfair_lock_s *)off_1EBBDCA58;
  if (!off_1EBBDCA58)
  {
    SharedData::create_default_global(&valuePtr);
    long long v19 = valuePtr;
    long long valuePtr = 0uLL;
    uint64_t v20 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
    off_1EBBDCA58 = v19;
    if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    long long v21 = (std::__shared_weak_count *)*((void *)&valuePtr + 1);
    if (*((void *)&valuePtr + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&valuePtr + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
    BOOL v18 = (os_unfair_lock_s *)off_1EBBDCA58;
  }
  uint64_t v22 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
  if (*(&off_1EBBDCA58 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA58 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  char v27 = 13;
  strcpy((char *)__p, "HealthEventDB");
  size_t v32 = v18;
  CFTypeRef v33 = v30;
  *(void *)&long long valuePtr = __p;
  *((void *)&valuePtr + 1) = &v33;
  ctu::SharedLockable<SharedData>::execute_sync<BOOL SharedData::setPreference<__CFDictionary *>(std::string const&,__CFDictionary *)::{lambda(void)#1}>(v18 + 6, (uint64_t *)&valuePtr);
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  if (!v22 || atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    CFTypeRef v23 = cf;
    if (!cf) {
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
  std::__shared_weak_count::__release_weak(v22);
  CFTypeRef v23 = cf;
  if (cf) {
LABEL_45:
  }
    CFRelease(v23);
LABEL_46:
  if (v29) {
    CFRelease(v29);
  }
  if (v30) {
    CFRelease(v30);
  }
}

void sub_1C5AF055C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  CFMutableArrayRef v5 = va_arg(va1, const void *);
  va_copy(va2, va1);
  CFMutableArrayRef v7 = va_arg(va2, const void *);
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va2);
  _Unwind_Resume(a1);
}

uint64_t HealthEventDB::addHealthEvent(HealthEventDB *a1, char a2)
{
  memset(v8, 170, sizeof(v8));
  Timestamp::Timestamp((Timestamp *)v5);
  Timestamp::asString((uint64_t)v5, 0, 9, &__p);
  v8[0] = &unk_1F2107A48;
  LOBYTE(v8[1]) = a2;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v9 = __p;
  }
  v8[2] = Timestamp::convert((uint64_t)&v9);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_6;
    }
LABEL_8:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_6;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_8;
  }
LABEL_6:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v5, v6);
  HealthEventDB::addHealthEvent(a1, (const HealthEvent *)v8);
  return 1;
}

void sub_1C5AF0734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if ((a18 & 0x80000000) == 0)
  {
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a10, a11);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_1C5AF0798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t HealthEventDB::getHealthEvents(HealthEventDB *this)
{
  return (uint64_t)this + 80;
}

void HealthEventDB::HealthEventDB(HealthEventDB *this)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v19, "com.apple.telephony.abm", "HealthEventDB");
  GetABMLogServer(&v17);
  *(void *)this = &unk_1F210B8F8;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)__p);
  *((void *)this + 1) = &unk_1F2102CB8;
  CFAllocatorRef v2 = v18;
  *((void *)this + 7) = v17;
  *((void *)this + 8) = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v20);
  uint64_t v3 = v18;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v19);
  *(void *)this = &unk_1F210B850;
  *((_DWORD *)this + 18) = 128;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((void *)this + 18) = 0;
  *((_DWORD *)this + 38) = 1065353216;
  HealthEventDB::initFromDisk(this);
  timespec v4 = (char *)operator new(0x28uLL);
  *(void *)timespec v4 = &unk_1F2110DC8;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  uint64_t v20 = v4;
  CFMutableArrayRef v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210B938;
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  long long v21 = v5;
  char v23 = 16;
  strcpy(__p, "KeyBasebandStats");
  v19[0] = (long long *)__p;
  uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t *)this + 15, (uint64_t)__p, v19);
  uint64_t v20 = 0;
  long long v21 = 0;
  CFMutableArrayRef v7 = (std::__shared_weak_count *)*((void *)v6 + 6);
  *((void *)v6 + 5) = v4;
  *((void *)v6 + 6) = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if ((v23 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (v23 < 0) {
LABEL_9:
  }
    operator delete(*(void **)__p);
LABEL_10:
  CFAllocatorRef v8 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  std::string v9 = (char *)operator new(0x20uLL);
  *(void *)std::string v9 = &unk_1F2110E28;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *((void *)v9 + 3) = 0;
  uint64_t v20 = v9;
  uint64_t v10 = (std::__shared_weak_count *)operator new(0x20uLL);
  v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210B988;
  v10->__shared_owners_ = 0;
  v10->__shared_weak_owners_ = 0;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)v9;
  long long v21 = v10;
  char v23 = 18;
  strcpy(__p, "KeyCommCenterStats");
  v19[0] = (long long *)__p;
  CFNumberRef v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t *)this + 15, (uint64_t)__p, v19);
  uint64_t v20 = 0;
  long long v21 = 0;
  CFNumberRef v12 = (std::__shared_weak_count *)*((void *)v11 + 6);
  *((void *)v11 + 5) = v9;
  *((void *)v11 + 6) = v10;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if ((v23 & 0x80000000) == 0)
    {
LABEL_16:
      CFNumberRef v13 = v21;
      if (!v21) {
        goto LABEL_23;
      }
      goto LABEL_22;
    }
  }
  else if ((v23 & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(*(void **)__p);
  CFNumberRef v13 = v21;
  if (!v21) {
    goto LABEL_23;
  }
LABEL_22:
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    CFMutableDictionaryRef v14 = (uint64_t *)*((void *)this + 17);
    if (!v14) {
      return;
    }
    goto LABEL_27;
  }
LABEL_23:
  CFMutableDictionaryRef v14 = (uint64_t *)*((void *)this + 17);
  if (!v14) {
    return;
  }
  do
  {
LABEL_27:
    if (((**(uint64_t (***)(uint64_t))v14[5])(v14[5]) & 1) == 0)
    {
      CFMutableDictionaryRef v15 = *((void *)this + 5);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        CFAllocatorRef v16 = v14 + 2;
        if (*((char *)v14 + 39) < 0) {
          CFAllocatorRef v16 = (void *)*v16;
        }
        *(_DWORD *)std::string __p = 136315138;
        *(void *)&__p[4] = v16;
        _os_log_error_impl(&dword_1C59C6000, v15, OS_LOG_TYPE_ERROR, "failed to init %s from disk", (uint8_t *)__p, 0xCu);
      }
    }
    CFMutableDictionaryRef v14 = (uint64_t *)*v14;
  }
  while (v14);
}

void sub_1C5AF0CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::unordered_map<std::string,std::shared_ptr<HealthStats>>::~unordered_map[abi:ne180100](v26);
  boost::circular_buffer<HealthEvent,std::allocator<HealthEvent>>::~circular_buffer(v25);
  void *v22 = v24;
  MEMORY[0x1C87940C0](v23);
  _Unwind_Resume(a1);
}

void HealthEventDB::initFromDisk(HealthEventDB *this)
{
  uint64_t v2 = *((unsigned int *)this + 18);
  if (v2) {
    uint64_t v3 = (char *)operator new(24 * v2);
  }
  else {
    uint64_t v3 = 0;
  }
  timespec v4 = &v3[24 * v2];
  CFMutableArrayRef v5 = (void (***)(void))*((void *)this + 10);
  uint64_t v6 = (void (***)(void))*((void *)this + 11);
  *((void *)this + 10) = v3;
  *((void *)this + 11) = v4;
  CFMutableArrayRef v7 = (void (***)(void))*((void *)this + 12);
  *((void *)this + 12) = v3;
  *((void *)this + 13) = v3;
  uint64_t v8 = *((void *)this + 14);
  for (*((void *)this + 14) = 0; v8; --v8)
  {
    std::string v9 = v7 + 3;
    (**v7)(v7);
    if (v9 == v6) {
      CFMutableArrayRef v7 = v5;
    }
    else {
      CFMutableArrayRef v7 = v9;
    }
  }
  if (v5) {
    operator delete(v5);
  }
  CFTypeRef cf = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  uint64_t v10 = off_1EBBDCA58;
  if (!off_1EBBDCA58)
  {
    SharedData::create_default_global(__p);
    long long v11 = *(_OWORD *)__p;
    *(void *)std::string __p = 0;
    *(void *)&__p[8] = 0;
    CFNumberRef v12 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
    off_1EBBDCA58 = v11;
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    CFNumberRef v13 = *(std::__shared_weak_count **)&__p[8];
    if (*(void *)&__p[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&__p[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    uint64_t v10 = off_1EBBDCA58;
  }
  CFMutableDictionaryRef v14 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
  if (*(&off_1EBBDCA58 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA58 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  __p[23] = 13;
  strcpy(__p, "HealthEventDB");
  os_unfair_lock_lock((os_unfair_lock_t)(v10 + 40));
  Preferences::getPreference<__CFDictionary const*>((uint64_t (***)(void, uint64_t))v10, __p, &cf);
  os_unfair_lock_unlock((os_unfair_lock_t)(v10 + 40));
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if (!v14 || atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    CFTypeRef v15 = cf;
    CFTypeRef v41 = cf;
    if (!cf) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  CFTypeRef v15 = cf;
  CFTypeRef v41 = cf;
  if (cf) {
LABEL_26:
  }
    CFRetain(v15);
LABEL_27:
  v40[0] = 0xAAAAAAAAAAAAAAAALL;
  v40[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v40, (const __CFDictionary *)v15);
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)__p, "HealthEventTypes");
  CFArrayRef v16 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v40, *(const __CFString **)__p);
  MEMORY[0x1C8794290](__p);
  CFArrayRef v39 = v16;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)__p, "HealthEventTimes");
  CFArrayRef v17 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v40, *(const __CFString **)__p);
  MEMORY[0x1C8794290](__p);
  CFArrayRef v38 = v17;
  if (v16) {
    BOOL v18 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  }
  else {
    BOOL v18 = 0;
  }
  if (v18)
  {
    unsigned int Count = CFArrayGetCount(v16);
    unsigned int v20 = CFArrayGetCount(v17);
    uint64_t v21 = v20 >= Count ? Count : v20;
    if (v21)
    {
      for (CFIndex i = 0; i != v21; ++i)
      {
        char v37 = 0;
        uint64_t v36 = 0;
        ValueAtIndex = (signed __int8 *)CFArrayGetValueAtIndex(v16, i);
        uint64_t v26 = ValueAtIndex;
        if (ValueAtIndex)
        {
          CFTypeID v27 = CFGetTypeID(ValueAtIndex);
          if (v27 == CFNumberGetTypeID() && (ctu::cf::assign((ctu::cf *)&v37, v26, v28) & 1) != 0)
          {
            CFTypeRef v29 = (uint64_t *)CFArrayGetValueAtIndex(v17, i);
            CFTypeRef v30 = v29;
            if (v29)
            {
              CFTypeID v31 = CFGetTypeID(v29);
              if (v31 == CFNumberGetTypeID())
              {
                if (ctu::cf::assign((ctu::cf *)&v36, v30, v32))
                {
                  *(void *)std::string __p = &unk_1F2107A48;
                  __p[8] = v37;
                  *(void *)&__p[16] = v36;
                  uint64_t v34 = *((void *)this + 10);
                  uint64_t v33 = *((void *)this + 11);
                  if (0xAAAAAAAAAAAAAAABLL * ((v33 - v34) >> 3) == *((void *)this + 14))
                  {
                    if (v33 != v34)
                    {
                      *(_OWORD *)(*((void *)this + 13) + 8) = *(_OWORD *)&__p[8];
                      uint64_t v35 = *((void *)this + 13) + 24;
                      *((void *)this + 13) = v35;
                      if (v35 == *((void *)this + 11))
                      {
                        uint64_t v35 = *((void *)this + 10);
                        *((void *)this + 13) = v35;
                      }
                      *((void *)this + 12) = v35;
                    }
                  }
                  else
                  {
                    uint64_t v23 = *((void *)this + 13);
                    *(void *)uint64_t v23 = &unk_1F2107A48;
                    *(_OWORD *)(v23 + 8) = *(_OWORD *)&__p[8];
                    uint64_t v24 = *((void *)this + 13) + 24;
                    *((void *)this + 13) = v24;
                    if (v24 == *((void *)this + 11)) {
                      *((void *)this + 13) = *((void *)this + 10);
                    }
                    ++*((void *)this + 14);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (v17) {
    CFRelease(v17);
  }
  if (v16) {
    CFRelease(v16);
  }
  MEMORY[0x1C87942E0](v40);
  if (v15) {
    CFRelease(v15);
  }
}

void sub_1C5AF12C0(_Unwind_Exception *a1)
{
}

void sub_1C5AF12E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  CFMutableArrayRef v5 = va_arg(va1, const void *);
  va_copy(va2, va1);
  CFMutableArrayRef v7 = va_arg(va2, const void *);
  va_copy(va3, va2);
  uint64_t v9 = va_arg(va3, void);
  uint64_t v11 = va_arg(va3, void);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va1);
  MEMORY[0x1C87942E0]((uint64_t *)va2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va3);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,std::shared_ptr<HealthStats>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (void **)*v2;
        timespec v4 = (std::__shared_weak_count *)v2[6];
        if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        if (*((char *)v2 + 39) < 0) {
          break;
        }
        operator delete(v2);
        uint64_t v2 = v3;
        if (!v3) {
          goto LABEL_9;
        }
      }
      operator delete(v2[2]);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
LABEL_9:
  CFMutableArrayRef v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

void HealthEventDB::clearDB(HealthEventDB *this)
{
  CFTypeRef cf = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable) {
    CFTypeRef cf = Mutable;
  }
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  uint64_t v3 = (os_unfair_lock_s *)off_1EBBDCA58;
  if (!off_1EBBDCA58)
  {
    SharedData::create_default_global(buf);
    long long v4 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    CFMutableArrayRef v5 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
    off_1EBBDCA58 = v4;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    uint64_t v3 = (os_unfair_lock_s *)off_1EBBDCA58;
  }
  CFMutableArrayRef v7 = (std::__shared_weak_count *)*(&off_1EBBDCA58 + 1);
  if (*(&off_1EBBDCA58 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA58 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  char v13 = 13;
  strcpy((char *)__p, "HealthEventDB");
  CFTypeRef v17 = cf;
  *(void *)std::__fs::filesystem::path buf = __p;
  *(void *)&uint8_t buf[8] = &v17;
  CFArrayRef v16 = v3;
  ctu::SharedLockable<SharedData>::execute_sync<BOOL SharedData::setPreference<__CFDictionary *>(std::string const&,__CFDictionary *)::{lambda(void)#1}>(v3 + 6, (uint64_t *)buf);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (*((void *)this + 14))
  {
    unint64_t v8 = 0;
    uint64_t v9 = (void (***)(void))*((void *)this + 12);
    do
    {
      (**v9)(v9);
      uint64_t v10 = (void (***)(void))*((void *)this + 11);
      uint64_t v9 = (void (***)(void))(*((void *)this + 12) + 24);
      *((void *)this + 12) = v9;
      if (v9 == v10)
      {
        uint64_t v9 = (void (***)(void))*((void *)this + 10);
        *((void *)this + 12) = v9;
      }
      ++v8;
    }
    while (v8 < *((void *)this + 14));
  }
  *((void *)this + 14) = 0;
  uint64_t v11 = *((void *)this + 5);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::__fs::filesystem::path buf = 0;
    _os_log_impl(&dword_1C59C6000, v11, OS_LOG_TYPE_DEFAULT, "#I Health DB is cleared", buf, 2u);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C5AF16F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void HealthEventDB::getHealthInfo(HealthEventDB *this@<X0>, xpc_object_t *a2@<X8>)
{
  *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  uint64_t v6 = MEMORY[0x1E4F14590];
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8795EB0](v5) == v6)
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v7 = xpc_null_create();
LABEL_8:
  *a2 = v7;
LABEL_9:
  xpc_release(v5);
  if (MEMORY[0x1C8795EB0](*a2) == v6)
  {
    for (CFIndex i = (uint64_t *)*((void *)this + 17); i; CFIndex i = (uint64_t *)*i)
    {
      (*(void (**)(CFTypeRef *__return_ptr))(*(void *)i[5] + 24))(&cf);
      ctu::cf_to_xpc((uint64_t *)&value, (ctu *)cf, v10);
      uint64_t v11 = (const char *)(i + 2);
      if (*((char *)i + 39) < 0) {
        uint64_t v11 = *(const char **)v11;
      }
      xpc_dictionary_set_value(*a2, v11, value);
      xpc_object_t v12 = value;
      xpc_object_t value = xpc_null_create();
      xpc_release(v12);
      xpc_release(value);
      xpc_object_t value = 0;
      if (cf) {
        CFRelease(cf);
      }
    }
  }
  else
  {
    unint64_t v8 = *((void *)this + 5);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(cf) = 0;
      _os_log_error_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_ERROR, "Failed to create dictionary to collect health info", (uint8_t *)&cf, 2u);
    }
  }
}

void sub_1C5AF18D8(_Unwind_Exception *a1)
{
  xpc::dict::~dict(v1);
  _Unwind_Resume(a1);
}

void sub_1C5AF190C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a9);
  xpc::dict::~dict(v9);
  _Unwind_Resume(a1);
}

void sub_1C5AF1928(_Unwind_Exception *a1)
{
  xpc::dict::~dict(v1);
  _Unwind_Resume(a1);
}

uint64_t HealthEventDB::updateBootStats(uint64_t *a1, void **a2)
{
  char v9 = 16;
  strcpy(__p, "KeyBasebandStats");
  uint64_t v11 = __p;
  uint64_t v4 = *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 15, (uint64_t)__p, (long long **)&v11)+ 5);
  xpc_object_t v5 = *a2;
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(CFTypeRef *__return_ptr, uint64_t, xpc_object_t *))(*(void *)v4 + 32))(&cf, v4, &object);
  if (cf) {
    CFRelease(cf);
  }
  xpc_release(object);
  xpc_object_t object = 0;
  if (v9 < 0) {
    operator delete(*(void **)__p);
  }
  HealthEventDB::commitToDisk((HealthEventDB *)a1);
  return 1;
}

void sub_1C5AF1A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t HealthEventDB::updateCommCenterStats(uint64_t *a1, void **a2)
{
  char v9 = 18;
  strcpy(__p, "KeyCommCenterStats");
  uint64_t v11 = __p;
  uint64_t v4 = *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 15, (uint64_t)__p, (long long **)&v11)+ 5);
  xpc_object_t v5 = *a2;
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(CFTypeRef *__return_ptr, uint64_t, xpc_object_t *))(*(void *)v4 + 32))(&cf, v4, &object);
  if (cf) {
    CFRelease(cf);
  }
  xpc_release(object);
  xpc_object_t object = 0;
  if (v9 < 0) {
    operator delete(*(void **)__p);
  }
  HealthEventDB::commitToDisk((HealthEventDB *)a1);
  return 1;
}

void sub_1C5AF1B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void HealthEventDB::~HealthEventDB(HealthEventDB *this)
{
  HealthEventDB::~HealthEventDB(this);

  operator delete(v1);
}

{
  void **v2;
  void **v3;
  std::__shared_weak_count *v4;
  void *v5;
  unint64_t v6;
  void (***v7)(void);
  void (***v8)(void);
  void *v9;

  *(void *)this = &unk_1F210B850;
  uint64_t v2 = (void **)*((void *)this + 17);
  if (v2)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (void **)*v2;
        uint64_t v4 = (std::__shared_weak_count *)v2[6];
        if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        if (*((char *)v2 + 39) < 0) {
          break;
        }
        operator delete(v2);
        uint64_t v2 = v3;
        if (!v3) {
          goto LABEL_9;
        }
      }
      operator delete(v2[2]);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
LABEL_9:
  xpc_object_t v5 = (void *)*((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v5) {
    operator delete(v5);
  }
  if (*((void *)this + 14))
  {
    uint64_t v6 = 0;
    xpc_object_t v7 = (void (***)(void))*((void *)this + 12);
    do
    {
      (**v7)(v7);
      unint64_t v8 = (void (***)(void))*((void *)this + 11);
      xpc_object_t v7 = (void (***)(void))(*((void *)this + 12) + 24);
      *((void *)this + 12) = v7;
      if (v7 == v8)
      {
        xpc_object_t v7 = (void (***)(void))*((void *)this + 10);
        *((void *)this + 12) = v7;
      }
      ++v6;
    }
    while (v6 < *((void *)this + 14));
  }
  char v9 = (void *)*((void *)this + 10);
  if (v9) {
    operator delete(v9);
  }
  *(void *)this = &unk_1F210B8F8;
  MEMORY[0x1C87940C0]((char *)this + 8);
}

uint64_t ctu::Loggable<HealthEventDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<HealthEventDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    unint64_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<HealthEventDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<HealthEventDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F210B8F8;
  MEMORY[0x1C87940C0](a1 + 1);
  return a1;
}

void ctu::Loggable<HealthEventDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F210B8F8;
  MEMORY[0x1C87940C0](a1 + 1);

  operator delete(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t *a1, uint64_t a2, long long **a3)
{
  uint64_t v4 = (unsigned char *)a2;
  unint64_t v6 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v7 = v6;
  }
  unint64_t v8 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v56, (uint64_t *)a2, v7);
  unint64_t v9 = v8;
  unint64_t v10 = a1[1];
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v12 = v8;
      if (v8 >= v10) {
        unint64_t v12 = v8 % v10;
      }
    }
    else
    {
      unint64_t v12 = (v10 - 1) & v8;
    }
    char v13 = *(void ***)(*a1 + 8 * v12);
    if (v13)
    {
      CFMutableDictionaryRef v14 = (unsigned __int8 *)*v13;
      if (*v13)
      {
        char v15 = v4[23];
        if (v15 >= 0) {
          uint64_t v16 = v4[23];
        }
        else {
          uint64_t v16 = *((void *)v4 + 1);
        }
        if (v15 < 0) {
          uint64_t v4 = *(unsigned char **)v4;
        }
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = *((void *)v14 + 1);
            if (v21 == v9)
            {
              uint64_t v22 = v14[39];
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = v14[39];
              }
              else {
                uint64_t v23 = *((void *)v14 + 3);
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v14 + 2), v4, *((void *)v14 + 3))) {
                    return v14;
                  }
                }
                else
                {
                  if (!v14[39]) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (v14[v24 + 16] == v4[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v10 - 1)) != v12)
            {
              goto LABEL_51;
            }
            CFMutableDictionaryRef v14 = *(unsigned __int8 **)v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = *((void *)v14 + 1);
          if (v17 == v9)
          {
            uint64_t v18 = v14[39];
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = v14[39];
            }
            else {
              uint64_t v19 = *((void *)v14 + 3);
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v14 + 2), v4, *((void *)v14 + 3))) {
                  return v14;
                }
              }
              else
              {
                if (!v14[39]) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (v14[v20 + 16] == v4[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v10) {
              v17 %= v10;
            }
            if (v17 != v12) {
              break;
            }
          }
          CFMutableDictionaryRef v14 = *(unsigned __int8 **)v14;
        }
        while (v14);
      }
    }
  }
  else
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  }
LABEL_51:
  uint64_t v25 = a1 + 2;
  v56[2] = 0xAAAAAAAAAAAAAA01;
  CFMutableDictionaryRef v14 = (unsigned __int8 *)operator new(0x38uLL);
  v56[0] = v14;
  v56[1] = a1 + 2;
  *(void *)CFMutableDictionaryRef v14 = 0;
  *((void *)v14 + 1) = v9;
  uint64_t v26 = *a3;
  long long v27 = **a3;
  *((void *)v14 + 4) = *((void *)*a3 + 2);
  *((_OWORD *)v14 + 1) = v27;
  *((void *)v26 + 1) = 0;
  *((void *)v26 + 2) = 0;
  *(void *)uint64_t v26 = 0;
  *((void *)v14 + 5) = 0;
  *((void *)v14 + 6) = 0;
  float v28 = (float)(unint64_t)(a1[3] + 1);
  float v29 = *((float *)a1 + 8);
  if (!v10 || (float)(v29 * (float)v10) < v28)
  {
    BOOL v32 = 1;
    if (v10 >= 3) {
      BOOL v32 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v33 = v32 | (2 * v10);
    unint64_t v34 = vcvtps_u32_f32(v28 / v29);
    if (v33 <= v34) {
      size_t prime = v34;
    }
    else {
      size_t prime = v33;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    unint64_t v10 = a1[1];
    if (prime > v10)
    {
LABEL_65:
      if (prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v36 = operator new(8 * prime);
      char v37 = (void *)*a1;
      *a1 = (uint64_t)v36;
      if (v37) {
        operator delete(v37);
      }
      uint64_t v38 = 0;
      a1[1] = prime;
      do
        *(void *)(*a1 + 8 * v38++) = 0;
      while (prime != v38);
      CFArrayRef v39 = (void *)*v25;
      if (!*v25) {
        goto LABEL_97;
      }
      size_t v40 = v39[1];
      size_t v41 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        size_t v42 = v40 & v41;
        *(void *)(*a1 + 8 * v42) = v25;
        for (CFIndex i = (void *)*v39; *v39; CFIndex i = (void *)*v39)
        {
          size_t v44 = i[1] & v41;
          if (v44 == v42)
          {
            CFArrayRef v39 = i;
          }
          else if (*(void *)(*a1 + 8 * v44))
          {
            *CFArrayRef v39 = *i;
            uint64_t v45 = 8 * v44;
            *CFIndex i = **(void **)(*a1 + v45);
            **(void **)(*a1 + v45) = i;
          }
          else
          {
            *(void *)(*a1 + 8 * v44) = v39;
            CFArrayRef v39 = i;
            size_t v42 = v44;
          }
        }
        goto LABEL_97;
      }
      if (v40 >= prime) {
        v40 %= prime;
      }
      *(void *)(*a1 + 8 * v40) = v25;
      uint64_t v49 = (void *)*v39;
      if (!*v39)
      {
LABEL_97:
        unint64_t v10 = prime;
        uint64_t v52 = prime - 1;
        if ((prime & (prime - 1)) != 0) {
          goto LABEL_98;
        }
        goto LABEL_113;
      }
      while (1)
      {
        size_t v51 = v49[1];
        if (v51 >= prime) {
          v51 %= prime;
        }
        if (v51 == v40) {
          goto LABEL_91;
        }
        if (*(void *)(*a1 + 8 * v51))
        {
          *CFArrayRef v39 = *v49;
          uint64_t v50 = 8 * v51;
          *uint64_t v49 = **(void **)(*a1 + v50);
          **(void **)(*a1 + v50) = v49;
          uint64_t v49 = v39;
LABEL_91:
          CFArrayRef v39 = v49;
          uint64_t v49 = (void *)*v49;
          if (!v49) {
            goto LABEL_97;
          }
        }
        else
        {
          *(void *)(*a1 + 8 * v51) = v39;
          CFArrayRef v39 = v49;
          uint64_t v49 = (void *)*v49;
          size_t v40 = v51;
          if (!v49) {
            goto LABEL_97;
          }
        }
      }
    }
    if (prime < v10)
    {
      unint64_t v46 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v10 < 3 || (uint8x8_t v47 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v47.i16[0] = vaddlv_u8(v47), v47.u32[0] > 1uLL))
      {
        unint64_t v46 = std::__next_prime(v46);
      }
      else
      {
        uint64_t v48 = 1 << -(char)__clz(v46 - 1);
        if (v46 >= 2) {
          unint64_t v46 = v48;
        }
      }
      if (prime <= v46) {
        size_t prime = v46;
      }
      if (prime < v10)
      {
        if (!prime)
        {
          CFTypeRef v53 = (void *)*a1;
          *a1 = 0;
          if (v53) {
            operator delete(v53);
          }
          unint64_t v10 = 0;
          a1[1] = 0;
          uint64_t v52 = -1;
          goto LABEL_113;
        }
        goto LABEL_65;
      }
      unint64_t v10 = a1[1];
    }
    uint64_t v52 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
LABEL_98:
      if (v9 >= v10)
      {
        unint64_t v12 = v9 % v10;
        uint64_t v30 = *a1;
        CFTypeID v31 = *(void **)(*a1 + 8 * (v9 % v10));
        if (v31) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v12 = v9;
        uint64_t v30 = *a1;
        CFTypeID v31 = *(void **)(*a1 + 8 * v9);
        if (v31) {
          goto LABEL_54;
        }
      }
      goto LABEL_114;
    }
LABEL_113:
    unint64_t v12 = v52 & v9;
    uint64_t v30 = *a1;
    CFTypeID v31 = *(void **)(*a1 + 8 * (v52 & v9));
    if (v31) {
      goto LABEL_54;
    }
    goto LABEL_114;
  }
  uint64_t v30 = *a1;
  CFTypeID v31 = *(void **)(*a1 + 8 * v12);
  if (v31)
  {
LABEL_54:
    *(void *)CFMutableDictionaryRef v14 = *v31;
LABEL_120:
    *CFTypeID v31 = v14;
    goto LABEL_121;
  }
LABEL_114:
  *(void *)CFMutableDictionaryRef v14 = *v25;
  *uint64_t v25 = v14;
  *(void *)(v30 + 8 * v12) = v25;
  if (*(void *)v14)
  {
    unint64_t v54 = *(void *)(*(void *)v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v54 >= v10) {
        v54 %= v10;
      }
    }
    else
    {
      v54 &= v10 - 1;
    }
    CFTypeID v31 = (void *)(*a1 + 8 * v54);
    goto LABEL_120;
  }
LABEL_121:
  ++a1[3];
  return v14;
}

void sub_1C5AF2484(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(std::__shared_weak_count **)(v2 + 48);
      if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
        if ((*(char *)(v2 + 39) & 0x80000000) == 0) {
          goto LABEL_7;
        }
        goto LABEL_6;
      }
      if (*(char *)(v2 + 39) < 0) {
LABEL_6:
      }
        operator delete(*(void **)(v2 + 16));
    }
LABEL_7:
    operator delete((void *)v2);
  }
  return a1;
}

void std::__shared_ptr_pointer<BasebandStats *,std::shared_ptr<BasebandStats>::__shared_ptr_default_delete<BasebandStats,BasebandStats>,std::allocator<BasebandStats>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<BasebandStats *,std::shared_ptr<BasebandStats>::__shared_ptr_default_delete<BasebandStats,BasebandStats>,std::allocator<BasebandStats>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<BasebandStats *,std::shared_ptr<BasebandStats>::__shared_ptr_default_delete<BasebandStats,BasebandStats>,std::allocator<BasebandStats>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C5BC985FLL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C5BC985FLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C5BC985FLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C5BC985FLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::__shared_ptr_pointer<CommCenterStats *,std::shared_ptr<CommCenterStats>::__shared_ptr_default_delete<CommCenterStats,CommCenterStats>,std::allocator<CommCenterStats>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<CommCenterStats *,std::shared_ptr<CommCenterStats>::__shared_ptr_default_delete<CommCenterStats,CommCenterStats>,std::allocator<CommCenterStats>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<CommCenterStats *,std::shared_ptr<CommCenterStats>::__shared_ptr_default_delete<CommCenterStats,CommCenterStats>,std::allocator<CommCenterStats>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C5BC992ALL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C5BC992ALL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C5BC992ALL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C5BC992ALL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void ctu::cf::insert<char const*,__CFArray *>(__CFDictionary *a1, const __CFString **a2, const void *a3, uint64_t a4, const __CFAllocator *a5)
{
  CFTypeRef cf = 0;
  ctu::cf::convert_copy((ctu::cf *)&cf, a2, (const char *)0x8000100, a4, a5);
  CFTypeRef v7 = cf;
  CFTypeRef cf = a3;
  if (a3)
  {
    CFRetain(a3);
    if (v7) {
      CFDictionaryAddValue(a1, v7, a3);
    }
    CFRelease(a3);
  }
  if (v7) {
    CFRelease(v7);
  }
}

void sub_1C5AF278C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

void sub_1C5AF27B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

BOOL ctu::cf::insert<char const*,__CFDictionary const*>(__CFDictionary *a1, const __CFString **a2, const void *a3, uint64_t a4, const __CFAllocator *a5)
{
  unint64_t v10 = 0;
  ctu::cf::convert_copy((ctu::cf *)&v10, a2, (const char *)0x8000100, a4, a5);
  CFTypeRef v7 = v10;
  unint64_t v10 = a3;
  if (!a3)
  {
    BOOL v8 = 0;
    if (!v7) {
      return v8;
    }
LABEL_7:
    CFRelease(v7);
    return v8;
  }
  CFRetain(a3);
  BOOL v8 = v7 != 0;
  if (v7) {
    CFDictionaryAddValue(a1, v7, a3);
  }
  CFRelease(a3);
  if (v7) {
    goto LABEL_7;
  }
  return v8;
}

void sub_1C5AF2860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

void sub_1C5AF2884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

uint64_t asString@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v35 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v34[7] = v4;
  v34[8] = v4;
  v34[5] = v4;
  v34[6] = v4;
  v34[3] = v4;
  v34[4] = v4;
  v34[1] = v4;
  uint64_t v34[2] = v4;
  long long v33 = v4;
  v34[0] = v4;
  *(_OWORD *)std::string __p = v4;
  long long v32 = v4;
  long long v29 = v4;
  *(_OWORD *)__srCC_SHA256_CTX c = v4;
  long long v27 = v4;
  long long v28 = v4;
  long long v26 = v4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v26);
  size_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Time: ", 6);
  int v6 = *(char *)(a1 + 23);
  if (v6 >= 0) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = *(void *)a1;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v8 = *(void *)(a1 + 8);
  }
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"; Mode: ", 8);
  unint64_t v10 = (void *)std::ostream::operator<<();
  uint8x8_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"; Action: ", 10);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v13 = a1 + 32;
  uint64_t v12 = v14;
  int v15 = *(char *)(v13 + 23);
  if (v15 >= 0) {
    uint64_t v16 = v13;
  }
  else {
    uint64_t v16 = v12;
  }
  if (v15 >= 0) {
    uint64_t v17 = *(unsigned __int8 *)(v13 + 23);
  }
  else {
    uint64_t v17 = *(void *)(v13 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v16, v17);
  if ((BYTE8(v33) & 0x10) != 0)
  {
    uint64_t v19 = (unsigned char *)v33;
    if ((void *)v33 < __src[1])
    {
      *(void **)&long long v33 = __src[1];
      uint64_t v19 = __src[1];
    }
    uint64_t v20 = __src[0];
    size_t v18 = v19 - (char *)__src[0];
    if ((unint64_t)(v19 - (char *)__src[0]) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_30;
    }
  }
  else
  {
    if ((BYTE8(v33) & 8) == 0)
    {
      size_t v18 = 0;
      a2[23] = 0;
      goto LABEL_26;
    }
    uint64_t v20 = (const void *)*((void *)&v28 + 1);
    size_t v18 = *((void *)&v29 + 1) - *((void *)&v28 + 1);
    if (*((void *)&v29 + 1) - *((void *)&v28 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_30:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v18 >= 0x17)
  {
    uint64_t v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17) {
      uint64_t v21 = v18 | 7;
    }
    uint64_t v22 = v21 + 1;
    uint64_t v23 = operator new(v21 + 1);
    *((void *)a2 + 1) = v18;
    *((void *)a2 + 2) = v22 | 0x8000000000000000;
    *(void *)a2 = v23;
    a2 = v23;
    goto LABEL_25;
  }
  a2[23] = v18;
  if (v18) {
LABEL_25:
  }
    memmove(a2, v20, v18);
LABEL_26:
  a2[v18] = 0;
  *(void *)&long long v26 = *MEMORY[0x1E4FBA408];
  uint64_t v24 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)&v26 + *(void *)(v26 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(void *)&long long v27 = v24;
  *((void *)&v27 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v32) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C8795140](v34);
}

void sub_1C5AF2BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void BBLogTracker::addLog(uint64_t **a1, long long *a2, int a3, uint64_t a4)
{
  int v13 = a3;
  uint8x8_t v11 = (std::string *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  std::allocate_shared[abi:ne180100]<LogInfo,std::allocator<LogInfo>,std::string const&,abm::helper::SystemLogsMode &,std::string const&,void>((uint64_t)a2, &v13, a4, &v11);
  uint64_t v14 = a2;
  int v6 = std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (const void **)a2, (uint64_t)&std::piecewise_construct, &v14);
  uint64_t v8 = v11;
  uint64_t v7 = (uint64_t *)v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v9 = (std::__shared_weak_count *)v6[8];
  v6[7] = (uint64_t *)v8;
  v6[8] = v7;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  unint64_t v10 = (std::__shared_weak_count *)v12;
  if (v12)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v12 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1C5AF2CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *BBLogTracker::getLog@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  uint64_t result = std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>(a1, a2);
  if ((uint64_t *)(a1 + 8) != result)
  {
    uint64_t v7 = result[7];
    uint64_t v6 = result[8];
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    *a3 = v7;
    a3[1] = v6;
  }
  return result;
}

void sub_1C5AF2D3C(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *BBLogTracker::limitLogs(uint64_t *this, unsigned int a2)
{
  unint64_t v2 = a2;
  if (this[2] > (unint64_t)a2)
  {
    uint64_t v3 = this;
    do
      this = std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::erase(v3, *v3);
    while (v3[2] > v2);
  }
  return this;
}

void BBLogTracker::getLastLog(BBLogTracker *this@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  if (!*((void *)this + 2)) {
    return;
  }
  if (a2)
  {
    v46.tv_seCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&v46.tv_useCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
    gettimeofday(&v46, 0);
    tv_seCC_SHA256_CTX c = v46.tv_sec;
    tv_useCC_SHA256_CTX c = v46.tv_usec;
    if (v46.tv_usec >= 0) {
      uint64_t v8 = v46.tv_usec;
    }
    else {
      uint64_t v8 = (v46.tv_usec + 1000000);
    }
    memset(v45, 170, sizeof(v45));
    Timestamp::Timestamp((Timestamp *)v45);
    if (v45[1])
    {
      unint64_t v9 = (uint64_t *)v45[1];
      while (1)
      {
        while (1)
        {
          uint8x8_t v11 = (uint64_t **)v9;
          int v12 = *((_DWORD *)v9 + 8);
          if (v12 < 1) {
            break;
          }
          unint64_t v9 = *v11;
          unint64_t v10 = v11;
          if (!*v11) {
            goto LABEL_21;
          }
        }
        if ((v12 & 0x80000000) == 0) {
          break;
        }
        unint64_t v9 = v11[1];
        if (!v9)
        {
          unint64_t v10 = v11 + 1;
          goto LABEL_21;
        }
      }
      uint64_t v19 = v11;
    }
    else
    {
      unint64_t v10 = (uint64_t **)&v45[1];
      uint8x8_t v11 = (uint64_t **)&v45[1];
LABEL_21:
      uint64_t v19 = operator new(0x38uLL);
      v19[8] = 0;
      *((void *)v19 + 5) = 0;
      *((void *)v19 + 6) = 0;
      *(void *)uint64_t v19 = 0;
      *((void *)v19 + 1) = 0;
      *((void *)v19 + 2) = v11;
      std::__shared_weak_count *v10 = (uint64_t *)v19;
      uint64_t v20 = (uint64_t *)v19;
      if (*(void *)v45[0])
      {
        v45[0] = *(void *)v45[0];
        uint64_t v20 = *v10;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v45[1], v20);
      ++v45[2];
    }
    *((void *)v19 + 5) = tv_sec - a2 + (tv_usec >> 31);
    *((void *)v19 + 6) = v8 | 0xAAAAAAAA00000000;
    uint64_t v23 = (void *)*((void *)this + 1);
    uint64_t v22 = (void *)((char *)this + 8);
    uint64_t v21 = v23;
    if (v23)
    {
      do
      {
        uint64_t v24 = v21;
        uint64_t v21 = (void *)v21[1];
      }
      while (v21);
    }
    else
    {
      uint64_t v25 = v22;
      do
      {
        uint64_t v24 = (void *)v25[2];
        BOOL v16 = *v24 == (void)v25;
        uint64_t v25 = v24;
      }
      while (v16);
    }
    Timestamp::asString((uint64_t)v45, 0, 9, v43);
    long long v28 = (const void *)v24[4];
    long long v27 = v24 + 4;
    long long v26 = v28;
    int v29 = *((char *)v27 + 23);
    if (v29 >= 0) {
      uint64_t v30 = v27;
    }
    else {
      uint64_t v30 = v26;
    }
    if (v29 >= 0) {
      size_t v31 = *((unsigned __int8 *)v27 + 23);
    }
    else {
      size_t v31 = v27[1];
    }
    int v32 = (char)v44;
    long long v33 = (void *)v43[0];
    if ((v44 & 0x80u) == 0) {
      unint64_t v34 = v43;
    }
    else {
      unint64_t v34 = (void *)v43[0];
    }
    if ((v44 & 0x80u) == 0) {
      size_t v35 = v44;
    }
    else {
      size_t v35 = v43[1];
    }
    if (v35 >= v31) {
      size_t v36 = v31;
    }
    else {
      size_t v36 = v35;
    }
    int v37 = memcmp(v30, v34, v36);
    if (v37)
    {
      if ((v37 & 0x80000000) == 0) {
        goto LABEL_46;
      }
    }
    else if (v31 >= v35)
    {
LABEL_46:
      int v38 = 1;
      if ((v32 & 0x80000000) == 0)
      {
LABEL_48:
        if (v38)
        {
          CFArrayRef v39 = (void *)*v22;
          if (*v22)
          {
            do
            {
              size_t v40 = v39;
              CFArrayRef v39 = (void *)v39[1];
            }
            while (v39);
          }
          else
          {
            do
            {
              size_t v40 = (void *)v22[2];
              BOOL v16 = *v40 == (void)v22;
              uint64_t v22 = v40;
            }
            while (v16);
          }
          uint64_t v42 = v40[7];
          uint64_t v41 = v40[8];
          if (v41) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
          }
          *a3 = v42;
          a3[1] = v41;
        }
        std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v45, (void *)v45[1]);
        return;
      }
LABEL_47:
      operator delete(v33);
      goto LABEL_48;
    }
    int v38 = 0;
    if ((v32 & 0x80000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  uint64_t v14 = (char *)this + 8;
  int v13 = (char *)*((void *)this + 1);
  if (v13)
  {
    do
    {
      int v15 = v13;
      int v13 = (char *)*((void *)v13 + 1);
    }
    while (v13);
  }
  else
  {
    do
    {
      int v15 = (char *)*((void *)v14 + 2);
      BOOL v16 = *(void *)v15 == (void)v14;
      uint64_t v14 = v15;
    }
    while (v16);
  }
  uint64_t v18 = *((void *)v15 + 7);
  uint64_t v17 = *((void *)v15 + 8);
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  *a3 = v18;
  a3[1] = v17;
}

void sub_1C5AF3040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)va, v5);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v4);
  _Unwind_Resume(a1);
}

void sub_1C5AF306C(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t BBLogTracker::count(BBLogTracker *this)
{
  return *((unsigned int *)this + 4);
}

void std::allocate_shared[abi:ne180100]<LogInfo,std::allocator<LogInfo>,std::string const&,abm::helper::SystemLogsMode &,std::string const&,void>(uint64_t a1@<X1>, int *a2@<X2>, uint64_t a3@<X3>, std::string **a4@<X8>)
{
  uint64_t v8 = (std::string *)operator new(0x50uLL);
  unint64_t v9 = v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F210B9D8;
  unint64_t v10 = v8 + 1;
  int v11 = *a2;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8 + 1, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    v8[1].__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
  LODWORD(v9[2].__r_.__value_.__l.__data_) = v11;
  int v12 = (std::string *)((char *)v9 + 56);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v9[3].__r_.__value_.__r.__words[0] = *(void *)(a3 + 16);
  }
  *a4 = v10;
  a4[1] = v9;
}

void sub_1C5AF3164(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 47) < 0)
  {
    operator delete(*v2);
    std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
    operator delete(v4);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<LogInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210B9D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LogInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210B9D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<LogInfo>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
  {
    operator delete(*(void **)(a1 + 56));
    if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
      return;
    }
  }
  else if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    return;
  }
  unint64_t v2 = *(void **)(a1 + 24);

  operator delete(v2);
}

uint64_t **std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *((char *)a2 + 23);
    if (v8 >= 0) {
      unint64_t v9 = a2;
    }
    else {
      unint64_t v9 = *a2;
    }
    if (v8 >= 0) {
      size_t v10 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v10 = (size_t)a2[1];
    }
    while (1)
    {
      int v11 = (uint64_t **)v6;
      uint64_t v14 = (const void *)v6[4];
      int v12 = v6 + 4;
      int v13 = v14;
      int v15 = *((char *)v12 + 23);
      if (v15 >= 0) {
        BOOL v16 = v12;
      }
      else {
        BOOL v16 = v13;
      }
      if (v15 >= 0) {
        size_t v17 = *((unsigned __int8 *)v12 + 23);
      }
      else {
        size_t v17 = v12[1];
      }
      if (v17 >= v10) {
        size_t v18 = v10;
      }
      else {
        size_t v18 = v17;
      }
      int v19 = memcmp(v9, v16, v18);
      if (v19)
      {
        if (v19 < 0) {
          goto LABEL_8;
        }
LABEL_22:
        int v20 = memcmp(v16, v9, v18);
        if (v20)
        {
          if ((v20 & 0x80000000) == 0) {
            return v11;
          }
        }
        else if (v17 >= v10)
        {
          return v11;
        }
        uint64_t v6 = v11[1];
        if (!v6)
        {
          uint64_t v7 = v11 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v10 >= v17) {
          goto LABEL_22;
        }
LABEL_8:
        uint64_t v6 = *v11;
        uint64_t v7 = v11;
        if (!*v11) {
          goto LABEL_29;
        }
      }
    }
  }
  int v11 = a1 + 1;
LABEL_29:
  uint64_t v21 = operator new(0x48uLL);
  uint64_t v22 = (std::string *)(v21 + 4);
  uint64_t v23 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)v23, *((void *)v23 + 1));
  }
  else
  {
    long long v24 = *v23;
    v21[6] = *((void *)v23 + 2);
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v24;
  }
  v21[7] = 0;
  v21[8] = 0;
  void *v21 = 0;
  v21[1] = 0;
  v21[2] = v11;
  uint64_t *v7 = v21;
  uint64_t v25 = (uint64_t *)**a1;
  long long v26 = v21;
  if (v25)
  {
    *a1 = v25;
    long long v26 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v26);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v21;
}

void sub_1C5AF33E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::erase(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 8);
  if (v3)
  {
    do
    {
      uint64_t v4 = v3;
      uint64_t v3 = (void *)*v3;
    }
    while (v3);
  }
  else
  {
    size_t v5 = (void *)a2;
    do
    {
      uint64_t v4 = (void *)v5[2];
      BOOL v6 = *v4 == (void)v5;
      size_t v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2) {
    *a1 = v4;
  }
  uint64_t v7 = (uint64_t *)a1[1];
  --a1[2];
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v7, (uint64_t *)a2);
  int v8 = *(std::__shared_weak_count **)(a2 + 64);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if ((*(char *)(a2 + 55) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (*(char *)(a2 + 55) < 0) {
LABEL_12:
  }
    operator delete(*(void **)(a2 + 32));
LABEL_13:
  operator delete((void *)a2);
  return v4;
}

void *PowerManager::PowerManager(void *a1, uint64_t *a2)
{
  *a1 = &unk_1F210BA28;
  uint64_t v3 = a1 + 1;
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v6 = *a2;
  uint64_t v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  PowerManager::State::create(&v6, v3);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  PowerManager::State::init((PowerManager::State *)*v3);
  return a1;
}

{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  *a1 = &unk_1F210BA28;
  uint64_t v3 = a1 + 1;
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v6 = *a2;
  uint64_t v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  PowerManager::State::create(&v6, v3);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  PowerManager::State::init((PowerManager::State *)*v3);
  return a1;
}

void sub_1C5AF3570(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1C5AF3584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (!a10) {
    _Unwind_Resume(exception_object);
  }
  std::__shared_weak_count::__release_weak(a10);
  _Unwind_Resume(exception_object);
}

void PowerManager::State::create(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = operator new(0x120uLL);
  uint64_t v5 = (uint64_t)v4;
  uint64_t v6 = (std::__shared_weak_count *)a1[1];
  uint64_t v7 = *a1;
  int v8 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  PowerManager::State::State((uint64_t)v4, &v7);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<PowerManager::State>::shared_ptr[abi:ne180100]<PowerManager::State,std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State*)#1},void>(a2, v5);
  ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_1C5AF3638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v10);
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  _Unwind_Resume(a1);
}

void PowerManager::State::init(PowerManager::State *this)
{
  uint64_t v5 = *((void *)this + 9);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 10);
  uint64_t v4 = (char *)this + 72;
  if (!v3 || (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  v11[2] = ___ZN12PowerManager5State4initEv_block_invoke;
  v11[3] = &__block_descriptor_tmp_32_2;
  v11[4] = this;
  void v11[5] = v5;
  int v12 = v7;
  int v13 = v11;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN12PowerManager5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_33;
  block[4] = v4;
  void block[5] = &v13;
  unint64_t v9 = *((void *)this + 11);
  if (!*((void *)this + 12))
  {
    dispatch_sync(v9, block);
    uint64_t v10 = v12;
    if (!v12) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  dispatch_async_and_wait(v9, block);
  uint64_t v10 = v12;
  if (v12) {
LABEL_7:
  }
    std::__shared_weak_count::__release_weak(v10);
LABEL_8:
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1C5AF3874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  int v12 = *(std::__shared_weak_count **)(v10 + 16);
  if (v12)
  {
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  _Unwind_Resume(exception_object);
}

void PowerManager::create(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x18uLL);
  uint64_t v5 = v4;
  uint64_t v6 = *a1;
  uint64_t v7 = (std::__shared_weak_count *)a1[1];
  v9[0] = v6;
  v9[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  PowerManager::PowerManager(v4, v9);
  *a2 = v5;
  int v8 = operator new(0x20uLL);
  *int v8 = &unk_1F210BF20;
  v8[1] = 0;
  v8[2] = 0;
  void v8[3] = v5;
  a2[1] = v8;
  if (v7)
  {
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_1C5AF3998(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 48))(v1);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  _Unwind_Resume(a1);
}

void PowerManager::registerForPowerEvents(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*a2) {
    uint64_t v3 = _Block_copy(*a2);
  }
  else {
    uint64_t v3 = 0;
  }
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 1174405120;
  _DWORD v5[2] = ___ZN12PowerManager5State22registerForPowerEventsEN8dispatch5blockIU13block_pointerFv10PowerStateNS1_13group_sessionEEEE_block_invoke;
  v5[3] = &__block_descriptor_tmp_38_2;
  v5[4] = v2;
  if (v3) {
    uint64_t v4 = _Block_copy(v3);
  }
  else {
    uint64_t v4 = 0;
  }
  aBlocunint64_t k = v4;
  ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped((uint64_t *)(v2 + 72), (uint64_t)v5);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v3) {
    _Block_release(v3);
  }
}

void PowerManager::createPowerAssertion(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, NSObject **a4@<X8>)
{
  uint64_t v6 = *(void **)(a1 + 8);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v17 = *(std::string *)a2;
  }
  uint64_t v7 = dispatch_group_create();
  *a4 = v7;
  size_t v18 = v6;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v17;
  }
  uint64_t v20 = a3;
  dispatch_group_t group = v7;
  if (v7)
  {
    dispatch_retain(v7);
    if (group) {
      dispatch_group_enter(group);
    }
  }
  int v8 = (std::__shared_weak_count *)v6[10];
  if (!v8 || (uint64_t v9 = v6[9], (v10 = std::__shared_weak_count::lock(v8)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v11 = v10;
  int v12 = operator new(0x30uLL);
  void *v12 = v18;
  int v13 = (std::string *)(v12 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v13, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v12[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  dispatch_group_t v14 = group;
  v12[4] = v20;
  void v12[5] = v14;
  dispatch_group_t group = 0;
  int v15 = v6[11];
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  BOOL v16 = operator new(0x18uLL);
  void *v16 = v12;
  v16[1] = v9;
  v16[2] = v11;
  dispatch_async_f(v15, v16, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped<PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1}>(PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1},std::default_delete<PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_24:
    operator delete(v17.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_24;
  }
}

void sub_1C5AF3CD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v14)
  {
    dispatch_release(v14);
    if ((a14 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void PowerManager::initialize(PowerManager *this)
{
  uint64_t v1 = *((void *)this + 1);
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 0x40000000;
  v2[2] = ___ZN12PowerManager5State10initializeEv_block_invoke;
  v2[3] = &__block_descriptor_tmp_60_0;
  v2[4] = v1;
  ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped((uint64_t *)(v1 + 72), (uint64_t)v2);
}

void PowerManager::shutdown(PowerManager *this)
{
  uint64_t v1 = *((void *)this + 1);
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 0x40000000;
  v2[2] = ___ZN12PowerManager5State8shutdownEv_block_invoke;
  v2[3] = &__block_descriptor_tmp_61_0;
  v2[4] = v1;
  ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped((uint64_t *)(v1 + 72), (uint64_t)v2);
}

void PowerManager::~PowerManager(PowerManager *this)
{
  *(void *)this = &unk_1F210BA28;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void PowerManager::~PowerManager(std::__shared_weak_count **this)
{
  uint64_t v1 = (PowerManager *)this;
  *this = (std::__shared_weak_count *)&unk_1F210BA28;
  uint64_t v2 = this[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    this = (std::__shared_weak_count **)v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  operator delete(this);
}

void ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1C5AF406C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C5AF4088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<PowerManager::State>::shared_ptr[abi:ne180100]<PowerManager::State,std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210BA98;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C5AF41B4(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State*)#1}::operator() const(PowerManager::State*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C5AF41DC(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<PowerManager::State *,std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State *)#1},std::allocator<PowerManager::State>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<PowerManager::State *,std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State *)#1},std::allocator<PowerManager::State>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<PowerManager::State *,std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State *)#1},std::allocator<PowerManager::State>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN12PowerManager5StateEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN12PowerManager5StateEE15make_shared_ptrIS2_EENSt3__110shar"
                                "ed_ptrIT_EEPS7_EUlPS2_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN12PowerManager5StateEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN12PowerManager5StateEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State*)#1}::operator() const(PowerManager::State*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t PowerManager::State::State(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1F210BAE8;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v14, "com.apple.telephony.abm", "power.mgr");
  GetABMLogServer(&v12);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v5 = dispatch_queue_create_with_target_V2("power.mgr", initially_inactive, 0);
  dispatch_set_qos_class_floor(v5, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v5);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = v5;
  if (v5)
  {
    dispatch_retain(v5);
    *(void *)(a1 + 96) = 0;
    dispatch_release(v5);
  }
  else
  {
    *(void *)(a1 + 96) = 0;
  }
  *(void *)a1 = &unk_1F210BBF8;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v16);
  *(void *)(a1 + 8) = &unk_1F2102CB8;
  uint64_t v6 = v13;
  *(void *)(a1 + 56) = v12;
  *(void *)(a1 + 64) = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v15);
  *(void *)a1 = &unk_1F210BBB8;
  uint64_t v7 = v13;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v14);
  *(void *)a1 = &unk_1F210BAE8;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0x200000001;
  *(_DWORD *)(a1 + 128) = -536870144;
  int v8 = (PowerStats *)operator new(0x88uLL);
  PowerStats::PowerStats(v8);
  *(void *)(a1 + 136) = v8;
  uint64_t v9 = operator new(0x20uLL);
  *uint64_t v9 = &unk_1F2110798;
  v9[1] = 0;
  uint64_t v9[2] = 0;
  v9[3] = v8;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 200) = a1 + 208;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = a1 + 232;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = a1 + 256;
  *(void *)(a1 + 272) = *a2;
  uint64_t v10 = a2[1];
  *(void *)(a1 + 280) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 16), 1uLL, memory_order_relaxed);
  }
  ctu::LoggerCommonBase::setLogLevel();
  return a1;
}

void sub_1C5AF4590(_Unwind_Exception *a1)
{
  int v8 = *(std::__shared_weak_count **)(v1 + 280);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*(char **)(v1 + 256));
  std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::destroy(*(void *)(v1 + 232));
  std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::destroy(*(void *)(v1 + 208));
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v5);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v4);
  uint64_t v9 = *(const void **)(v1 + 160);
  if (v9) {
    _Block_release(v9);
  }
  if (*v6) {
    _Block_release(*v6);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v2);
  ctu::SharedLoggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable((void *)v1);
  _Unwind_Resume(a1);
}

void sub_1C5AF4608(_Unwind_Exception *a1)
{
  PowerStats::~PowerStats(v3);
  operator delete(v3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v2);
  ctu::SharedLoggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v1);
  _Unwind_Resume(a1);
}

void sub_1C5AF463C(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v2);
  ctu::SharedLoggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v1);
  _Unwind_Resume(a1);
}

void sub_1C5AF4658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a15);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a13);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v15);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  _Unwind_Resume(a1);
}

void sub_1C5AF468C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  _Unwind_Resume(a1);
}

void *ctu::SharedLoggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F210BBF8;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1F210BBF8;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void PowerManager::State::~State(PowerManager::State *this)
{
  PowerManager::State::~State(this);

  operator delete(v1);
}

{
  uint64_t v2;
  const void *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  const void *v8;
  const void *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  NSObject *v12;
  NSObject *v13;
  std::__shared_weak_count *v14;
  uint8_t v15[16];

  *(void *)this = &unk_1F210BAE8;
  uint64_t v2 = *((void *)this + 20);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t))(v2 + 16))(v2, 1);
    uint64_t v3 = (const void *)*((void *)this + 20);
    *((void *)this + 20) = 0;
    if (v3) {
      _Block_release(v3);
    }
  }
  uint64_t v4 = *((void *)this + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v15 = 0;
    _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Gone!", v15, 2u);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*((char **)this + 32));
  std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::destroy(*((void *)this + 29));
  std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::destroy(*((void *)this + 26));
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 22);
  if (!v7 || atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    int v8 = (const void *)*((void *)this + 20);
    if (!v8) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  int v8 = (const void *)*((void *)this + 20);
  if (v8) {
LABEL_14:
  }
    _Block_release(v8);
LABEL_15:
  uint64_t v9 = (const void *)*((void *)this + 19);
  if (v9) {
    _Block_release(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  int v11 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  *(void *)this = &unk_1F210BBF8;
  MEMORY[0x1C87940C0]((char *)this + 8);
  uint64_t v12 = *((void *)this + 12);
  if (v12) {
    dispatch_release(v12);
  }
  int v13 = *((void *)this + 11);
  if (v13) {
    dispatch_release(v13);
  }
  dispatch_group_t v14 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
}

uint64_t ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

void ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 9;
  strcpy(a1, "power.mgr");
}

uint64_t ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void ctu::SharedLoggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F210BBF8;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void *ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F210BBF8;
  MEMORY[0x1C87940C0](a1 + 1);
  return a1;
}

void ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F210BBF8;
  MEMORY[0x1C87940C0](a1 + 1);

  operator delete(a1);
}

void std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*((void *)a1 + 1));
    uint64_t v2 = *((void *)a1 + 7);
    if (v2)
    {
      dispatch_group_leave(v2);
      uint64_t v3 = *((void *)a1 + 7);
      if (v3) {
        dispatch_release(v3);
      }
    }
    if (a1[55] < 0)
    {
      operator delete(*((void **)a1 + 4));
      uint64_t v4 = a1;
    }
    else
    {
      uint64_t v4 = a1;
    }
    operator delete(v4);
  }
}

void ___ZN12PowerManager5State4initEv_block_invoke(uint64_t a1)
{
  v40.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v39 = v2;
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v2;
  long long v38 = v2;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN12PowerManager5State4initEv_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_33;
  long long v21 = *(_OWORD *)(a1 + 32);
  long long v36 = v21;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  int v37 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = _Block_copy(aBlock);
  uint64_t v5 = *(NSObject **)(v21 + 88);
  *(void *)&long long v38 = 1;
  *((void *)&v38 + 1) = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  if (v4)
  {
    long long v39 = (unint64_t)_Block_copy(v4);
    v40.__r_.__value_.__r.__words[0] = 5063233;
    *((unsigned char *)&v40.__r_.__value_.__s + 23) = 3;
    _Block_release(v4);
  }
  else
  {
    long long v39 = 0uLL;
    v40.__r_.__value_.__r.__words[0] = 5063233;
    *((unsigned char *)&v40.__r_.__value_.__s + 23) = 3;
  }
  ctu::power::manager::get(buf, (ctu::power::manager *)v5);
  long long v6 = *(_OWORD *)buf;
  memset(buf, 0, 16);
  uint64_t v7 = *(std::__shared_weak_count **)(v21 + 176);
  *(_OWORD *)(v21 + 168) = v6;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  int v8 = (std::__shared_weak_count *)buf[1];
  if (buf[1] && !atomic_fetch_add((atomic_ullong *volatile)(buf[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  long long v30 = v38;
  if (*((void *)&v38 + 1)) {
    dispatch_retain(*((dispatch_object_t *)&v38 + 1));
  }
  uint64_t v9 = (void *)v39;
  if ((void)v39) {
    uint64_t v9 = _Block_copy((const void *)v39);
  }
  size_t v31 = v9;
  uint64_t v10 = (void *)*((void *)&v39 + 1);
  if (*((void *)&v39 + 1)) {
    uint64_t v10 = _Block_copy(*((const void **)&v39 + 1));
  }
  int v32 = v10;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v40;
  }
  ctu::power::manager::registerListener();
  long long v11 = *(_OWORD *)buf;
  memset(buf, 0, 16);
  uint64_t v12 = *(std::__shared_weak_count **)(v21 + 192);
  *(_OWORD *)(v21 + 184) = v11;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  int v13 = (std::__shared_weak_count *)buf[1];
  if (!buf[1] || atomic_fetch_add((atomic_ullong *volatile)(buf[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_29;
    }
LABEL_32:
    operator delete(__p.__r_.__value_.__l.__data_);
    dispatch_group_t v14 = v32;
    if (!v32) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_32;
  }
LABEL_29:
  dispatch_group_t v14 = v32;
  if (v32) {
LABEL_33:
  }
    _Block_release(v14);
LABEL_34:
  if (v31) {
    _Block_release(v31);
  }
  if (*((void *)&v30 + 1)) {
    dispatch_release(*((dispatch_object_t *)&v30 + 1));
  }
  int v15 = *(NSObject **)(v21 + 40);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl(&dword_1C59C6000, v15, OS_LOG_TYPE_DEFAULT, "#I Registered power listener", (uint8_t *)buf, 2u);
  }
  memset(buf, 170, 16);
  abm::AWDHelperGetConnection(buf);
  if (buf[0])
  {
    uint64_t v23 = MEMORY[0x1E4F143A8];
    uint64_t v24 = 1174405120;
    uint64_t v25 = ___ZN12PowerManager5State4initEv_block_invoke_22;
    long long v26 = &__block_descriptor_tmp_29_3;
    uint64_t v17 = *(void *)(a1 + 40);
    BOOL v16 = *(std::__shared_weak_count **)(a1 + 48);
    uint64_t v27 = v21;
    uint64_t v28 = v17;
    int v29 = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    wis::WISServerConnection::RegisterQueriableMetricCallbackForIdentifier();
    if (v29)
    {
      std::__shared_weak_count::__release_weak(v29);
      size_t v18 = (std::__shared_weak_count *)buf[1];
      if (!buf[1]) {
        goto LABEL_50;
      }
      goto LABEL_48;
    }
  }
  else
  {
    int v19 = *(NSObject **)(v21 + 40);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v22 = 0;
      _os_log_error_impl(&dword_1C59C6000, v19, OS_LOG_TYPE_ERROR, "AWD connection setup failed", v22, 2u);
      size_t v18 = (std::__shared_weak_count *)buf[1];
      if (!buf[1]) {
        goto LABEL_50;
      }
      goto LABEL_48;
    }
  }
  size_t v18 = (std::__shared_weak_count *)buf[1];
  if (!buf[1]) {
    goto LABEL_50;
  }
LABEL_48:
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
LABEL_50:
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v40.__r_.__value_.__l.__data_);
    uint64_t v20 = (const void *)*((void *)&v39 + 1);
    if (!*((void *)&v39 + 1)) {
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  uint64_t v20 = (const void *)*((void *)&v39 + 1);
  if (*((void *)&v39 + 1)) {
LABEL_54:
  }
    _Block_release(v20);
LABEL_55:
  if ((void)v39) {
    _Block_release((const void *)v39);
  }
  if (*((void *)&v38 + 1)) {
    dispatch_release(*((dispatch_object_t *)&v38 + 1));
  }
  if (v37) {
    std::__shared_weak_count::__release_weak(v37);
  }
}

void sub_1C5AF50D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, char a20,dispatch_object_t object,void *a22,void *aBlock,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a22) {
    _Block_release(a22);
  }
  if (object)
  {
    dispatch_release(object);
    ctu::power::manager::parameters::~parameters((void **)(v36 - 128));
    long long v38 = a36;
    if (!a36) {
LABEL_7:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    ctu::power::manager::parameters::~parameters((void **)(v36 - 128));
    long long v38 = a36;
    if (!a36) {
      goto LABEL_7;
    }
  }
  std::__shared_weak_count::__release_weak(v38);
  _Unwind_Resume(a1);
}

void ___ZN12PowerManager5State4initEv_block_invoke_2(void *a1, ctu::power::manager *a2, const void **a3)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1[4];
  long long v6 = (std::__shared_weak_count *)a1[6];
  if (!v6)
  {
    int v8 = 0;
    goto LABEL_7;
  }
  int v8 = std::__shared_weak_count::lock(v6);
  if (!v8 || !a1[5])
  {
LABEL_7:
    (*((void (**)(void))*a3 + 2))();
    if (!v8) {
      return;
    }
    goto LABEL_90;
  }
  if (*a3) {
    uint64_t v9 = (void (**)(void *, uint64_t))_Block_copy(*a3);
  }
  else {
    uint64_t v9 = 0;
  }
  int v10 = *(_DWORD *)(v5 + 120);
  uint64_t v11 = *(void *)(v5 + 124);
  int v46 = v11;
  HIDWORD(v12) = a2;
  LODWORD(v12) = a2 + 536870288;
  switch((v12 >> 4))
  {
    case 0u:
      if (v10 != 1) {
        goto LABEL_34;
      }
      int v13 = 0;
      int v14 = 1;
      if (*(void *)(v5 + 216)) {
        goto LABEL_31;
      }
      goto LABEL_49;
    case 1u:
      if (v10 != 1) {
        goto LABEL_34;
      }
      int v14 = 0;
      int v13 = v11 != 0;
      if (!*(void *)(v5 + 216)) {
        goto LABEL_49;
      }
      goto LABEL_31;
    case 2u:
      if (!v11) {
        goto LABEL_24;
      }
      goto LABEL_34;
    case 9u:
      if (v10) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v11 == 2;
      }
      if (!v15) {
        goto LABEL_34;
      }
LABEL_24:
      int v13 = 2;
      int v14 = 1;
      if (!*(void *)(v5 + 216)) {
        goto LABEL_49;
      }
      goto LABEL_31;
    case 0xBu:
      if (v10) {
        BOOL v16 = 1;
      }
      else {
        BOOL v16 = v11 == 2;
      }
      if (v16) {
        goto LABEL_34;
      }
      int v14 = 0;
      int v13 = 2;
      if (!*(void *)(v5 + 216)) {
        goto LABEL_49;
      }
LABEL_31:
      if (a2 == -536870288) {
        goto LABEL_34;
      }
      if (a2 != -536870272)
      {
LABEL_49:
        *(_DWORD *)(v5 + 120) = v14;
        *(_DWORD *)(v5 + 124) = v13;
        *(_DWORD *)(v5 + 128) = a2;
        uint64_t v26 = *(void *)(v5 + 136);
        int v54 = (int)a2;
        int v55 = v10;
        uint64_t v56 = v11;
        unint64_t v53 = __PAIR64__(v13, v14);
        PowerStats::reportSystemStateChange(v26, (uint64_t)&v55, (uint64_t *)&v53);
        uint64_t v27 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v28 = ctu::power::manager::asCString(a2);
          int v29 = "Unknown";
          long long v30 = "PoweredOn";
          int v31 = *(_DWORD *)(v5 + 120);
          uint64_t v32 = *(int *)(v5 + 124);
          if (v31 != 1) {
            long long v30 = "Unknown";
          }
          if (!v31) {
            long long v30 = "LowPower";
          }
          if (v32 <= 2) {
            int v29 = off_1E651BAD8[v32];
          }
          *(_DWORD *)std::__fs::filesystem::path buf = 136315650;
          *(void *)&uint8_t buf[4] = v28;
          __int16 v58 = 2080;
          *(void *)CFTypeRef v59 = v30;
          *(_WORD *)&v59[8] = 2080;
          *(void *)&v59[10] = v29;
          _os_log_impl(&dword_1C59C6000, v27, OS_LOG_TYPE_DEFAULT, "#I Power notification: %s, Power state: %s, Sleep state: %s", buf, 0x20u);
        }
        int v33 = *(_DWORD *)(v5 + 128);
        switch(v33)
        {
          case -536870144:
            goto LABEL_60;
          case -536870256:
            v9[2](v9, 1);
            uint64_t v42 = *(void *)(v5 + 264);
            if (v42)
            {
              unint64_t v43 = *(NSObject **)(v5 + 40);
              if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)std::__fs::filesystem::path buf = 134217984;
                *(void *)&uint8_t buf[4] = v42;
                _os_log_impl(&dword_1C59C6000, v43, OS_LOG_TYPE_DEFAULT, "#I Allowing deferred work to run (after WillNotSleep); count=%zd",
                  buf,
                  0xCu);
              }
              std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*(char **)(v5 + 256));
              *(void *)(v5 + 256) = 0;
              *(void *)(v5 + 264) = 0;
              *(void *)(v5 + 248) = v5 + 256;
            }
            break;
          case -536870272:
LABEL_60:
            uint64_t v34 = *(unsigned int *)(v5 + 120);
            size_t v35 = dispatch_group_create();
            uint64_t v36 = *(void *)(v5 + 152);
            if (v36)
            {
              if (v35)
              {
                dispatch_retain(v35);
                dispatch_group_enter(v35);
                uint64_t v36 = *(void *)(v5 + 152);
              }
              *(void *)std::__fs::filesystem::path buf = v35;
              (*(void (**)(uint64_t, uint64_t, unsigned char *))(v36 + 16))(v36, v34, buf);
              if (*(void *)buf)
              {
                dispatch_group_leave(*(dispatch_group_t *)buf);
                if (*(void *)buf) {
                  dispatch_release(*(dispatch_object_t *)buf);
                }
              }
            }
            int v37 = *(std::__shared_weak_count **)(v5 + 80);
            if (!v37 || (uint64_t v38 = *(void *)(v5 + 72), (v39 = std::__shared_weak_count::lock(v37)) == 0)) {
              std::__throw_bad_weak_ptr[abi:ne180100]();
            }
            std::string v40 = v39;
            atomic_fetch_add_explicit(&v39->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v40);
            }
            block[0] = MEMORY[0x1E4F143A8];
            block[1] = 1174405120;
            block[2] = ___ZN12PowerManager5State28handlePowerNotification_syncEN8dispatch5blockIU13block_pointerFvbEEEj_block_invoke;
            block[3] = &__block_descriptor_tmp_36_4;
            block[4] = v5;
            dispatch_object_t object = v35;
            if (v35) {
              dispatch_retain(v35);
            }
            if (v9) {
              uint64_t v41 = _Block_copy(v9);
            }
            else {
              uint64_t v41 = 0;
            }
            aBlocunint64_t k = v41;
            uint64_t v50 = v38;
            size_t v51 = v40;
            atomic_fetch_add_explicit(&v40->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            int v52 = v34;
            dispatch_group_notify(v35, *(dispatch_queue_t *)(v5 + 88), block);
            if (v51) {
              std::__shared_weak_count::__release_weak(v51);
            }
            if (aBlock) {
              _Block_release(aBlock);
            }
            if (object) {
              dispatch_release(object);
            }
            std::__shared_weak_count::__release_weak(v40);
            if (v35) {
              dispatch_release(v35);
            }
LABEL_88:
            if (!v9) {
              goto LABEL_90;
            }
            break;
          default:
            v9[2](v9, 1);
            break;
        }
LABEL_89:
        _Block_release(v9);
        goto LABEL_90;
      }
      if (*(void *)(v5 + 264))
      {
LABEL_34:
        v9[2](v9, 0);
        int v17 = 0;
        size_t v18 = *(NSObject **)(v5 + 40);
        if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_42;
        }
        goto LABEL_35;
      }
      if (v9) {
        unsigned __int8 v44 = _Block_copy(v9);
      }
      else {
        unsigned __int8 v44 = 0;
      }
      uint64_t v45 = *(const void **)(v5 + 160);
      *(void *)(v5 + 160) = v44;
      if (v45) {
        _Block_release(v45);
      }
      int v17 = 1;
      size_t v18 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
LABEL_35:
        uint64_t v19 = ctu::power::manager::asCString(a2);
        uint64_t v20 = *(void *)(v5 + 216);
        long long v21 = "Unknown";
        uint64_t v22 = *(void *)(v5 + 264);
        if (v10 == 1) {
          long long v21 = "PoweredOn";
        }
        *(_DWORD *)std::__fs::filesystem::path buf = 136316418;
        *(void *)&uint8_t buf[4] = v19;
        __int16 v58 = 1024;
        if (!v10) {
          long long v21 = "LowPower";
        }
        *(_DWORD *)CFTypeRef v59 = v46;
        uint64_t v23 = "false";
        *(_WORD *)&v59[4] = 2080;
        *(void *)&v59[6] = v21;
        *(_WORD *)&v59[14] = 2048;
        if (v17) {
          uint64_t v23 = "true";
        }
        *(void *)&v59[16] = v20;
        __int16 v60 = 2048;
        uint64_t v61 = v22;
        __int16 v62 = 2080;
        std::string v63 = v23;
        _os_log_impl(&dword_1C59C6000, v18, OS_LOG_TYPE_DEFAULT, "#I Cannot accept notification: %s, SleepState: %u, PowerState: %s, Assertions: %lu, Assertions-deferred: %lu, Deferred-ack: %s", buf, 0x3Au);
      }
LABEL_42:
      if (a2 != -536870144 && a2 != -536870256) {
        goto LABEL_88;
      }
      uint64_t v24 = *(void *)(v5 + 264);
      if (!v24) {
        goto LABEL_88;
      }
      uint64_t v25 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::__fs::filesystem::path buf = 134217984;
        *(void *)&uint8_t buf[4] = v24;
        _os_log_impl(&dword_1C59C6000, v25, OS_LOG_TYPE_DEFAULT, "#I Allowing deferred work to run (skipping power event); count=%zd",
          buf,
          0xCu);
      }
      std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*(char **)(v5 + 256));
      *(void *)(v5 + 256) = 0;
      *(void *)(v5 + 264) = 0;
      *(void *)(v5 + 248) = v5 + 256;
      if (v9) {
        goto LABEL_89;
      }
LABEL_90:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      return;
    default:
      goto LABEL_34;
  }
}

void sub_1C5AF58E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,dispatch_group_t group)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN12PowerManager5State4initEv_block_invoke_22(void *a1, int a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    long long v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[5])
      {
        v8[0] = MEMORY[0x1E4F143A8];
        v8[1] = 0x40000000;
        v8[2] = ___ZN12PowerManager5State4initEv_block_invoke_2_23;
        void v8[3] = &__block_descriptor_tmp_25;
        v8[4] = v5;
        int v9 = a2;
        ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped((uint64_t *)(v5 + 72), (uint64_t)v8);
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void ___ZN12PowerManager5State4initEv_block_invoke_2_23(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 40) == 524466) {
    PowerStats::submitLowPowerStatsMetric_sync(*(os_log_t **)(*(void *)(a1 + 32) + 136));
  }
}

void *___ZNK3ctu20SharedSynchronizableIN12PowerManager5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void ___ZN12PowerManager5State28handlePowerNotification_syncEN8dispatch5blockIU13block_pointerFvbEEEj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = v4;
      if (*(void *)(a1 + 56))
      {
        if (*(_DWORD *)(a1 + 72) == 1)
        {
          uint64_t v6 = *(void *)(v2 + 264);
          if (v6)
          {
            uint64_t v7 = *(NSObject **)(v2 + 40);
            if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
            {
              int v8 = 134217984;
              uint64_t v9 = v6;
              _os_log_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_DEFAULT, "#I Allowing deferred work to run; count=%zd",
                (uint8_t *)&v8,
                0xCu);
            }
            std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*(char **)(v2 + 256));
            *(void *)(v2 + 256) = 0;
            *(void *)(v2 + 264) = 0;
            *(void *)(v2 + 248) = v2 + 256;
          }
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void *__copy_helper_block_e8_40c21_ZTSN8dispatch5groupE48c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE56c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[5];
  a1[5] = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  uint64_t result = (void *)a2[6];
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  uint64_t v7 = a2[7];
  uint64_t v6 = a2[8];
  a1[6] = result;
  a1[7] = v7;
  a1[8] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c21_ZTSN8dispatch5groupE48c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE56c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[8];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (const void *)a1[6];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = a1[5];
  if (v4)
  {
    dispatch_release(v4);
  }
}

void ctu::power::manager::parameters::~parameters(void **this)
{
  if (*((char *)this + 55) < 0)
  {
    operator delete(this[4]);
    uint64_t v2 = this[3];
    if (!v2) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v2 = this[3];
  if (v2) {
LABEL_5:
  }
    _Block_release(v2);
LABEL_6:
  uint64_t v3 = this[2];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = this[1];
  if (v4) {
    dispatch_release(v4);
  }
}

void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  int v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN12PowerManager5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F210BCF0;
  void block[5] = v5;
  unint64_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN12PowerManager5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIKN12PowerManager5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIKN12PowerManager5StateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN12PowerManager5State22registerForPowerEventsEN8dispatch5blockIU13block_pointerFv10PowerStateNS1_13group_sessionEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1) {
    uint64_t v1 = _Block_copy(v1);
  }
  uint64_t v3 = *(const void **)(v2 + 152);
  *(void *)(v2 + 152) = v1;
  if (v3) {
    _Block_release(v3);
  }
}

void *__copy_helper_block_e8_40c73_ZTSN8dispatch5blockIU13block_pointerFv10PowerStateNS_13group_sessionEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 40);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c73_ZTSN8dispatch5blockIU13block_pointerFv10PowerStateNS_13group_sessionEEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 40);
  if (v1) {
    _Block_release(v1);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped<PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1}>(PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1},std::default_delete<PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v173 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  uint64_t v164 = (uint64_t)(*a1 + 1);
  unint64_t v166 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v167 = 0xAAAAAAAAAAAAAAAALL;
  size_t v163 = v1;
  pthread_mutex_lock(&ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance);
  if (qword_1EBBDC968) {
    goto LABEL_11;
  }
  uint64_t v3 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
  MEMORY[0x1C8794690]();
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210BD90;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = v3;
  uint64_t v6 = (std::__shared_weak_count *)v3->~__shared_weak_count_0;
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v3->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v3;
      v3->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v3->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v3;
    v3->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_7:
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  uint64_t v7 = (std::__shared_weak_count *)off_1EBBDC970;
  qword_1EBBDC968 = (uint64_t)v3;
  off_1EBBDC970 = v4;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_11:
  int v8 = (std::__shared_weak_count *)off_1EBBDC970;
  if (off_1EBBDC970) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDC970 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance);
  ctu::power::assertion::createInternal();
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    unint64_t v9 = v166;
    if (v166) {
      goto LABEL_16;
    }
LABEL_57:
    uint64_t v32 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = v164;
      if (*((char *)v1 + 31) < 0) {
        uint64_t v33 = *(void *)v164;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v33;
      _os_log_error_impl(&dword_1C59C6000, v32, OS_LOG_TYPE_ERROR, "Failed to create power assertion '%s'", (uint8_t *)&buf, 0xCu);
    }
    goto LABEL_315;
  }
  unint64_t v9 = v166;
  if (!v166) {
    goto LABEL_57;
  }
LABEL_16:
  uint64_t v159 = v9;
  uint64_t v161 = v2;
  uint64_t v10 = (uint64_t **)(v2 + 208);
  uint64_t v11 = *(uint64_t **)(v2 + 208);
  if (!v11)
  {
    uint64_t v24 = (uint64_t **)(v2 + 208);
    if (*(uint64_t ***)(v2 + 200) == v10)
    {
      uint64_t v34 = 0;
      uint64_t v24 = (uint64_t **)(v2 + 208);
      size_t v35 = (uint64_t **)(v2 + 208);
      goto LABEL_114;
    }
LABEL_72:
    size_t v35 = v24;
    do
    {
      uint64_t v38 = (uint64_t *)v35;
      size_t v35 = (uint64_t **)v35[2];
    }
    while (*v35 == v38);
    uint64_t v34 = 0;
    size_t v12 = *((unsigned __int8 *)v1 + 31);
    int v13 = (const void *)v1[1];
    size_t v14 = v1[2];
    char v37 = *((unsigned char *)v1 + 31);
    goto LABEL_75;
  }
  size_t v12 = *((unsigned __int8 *)v1 + 31);
  int v13 = (const void *)v1[1];
  size_t v14 = v1[2];
  if ((v12 & 0x80u) == 0) {
    BOOL v15 = (const void *)v164;
  }
  else {
    BOOL v15 = (const void *)v1[1];
  }
  if ((v12 & 0x80u) == 0) {
    size_t v16 = *((unsigned __int8 *)v1 + 31);
  }
  else {
    size_t v16 = v1[2];
  }
  int v17 = v10;
  size_t v18 = v11;
  do
  {
    while (1)
    {
      int v19 = *((char *)v18 + 55);
      uint64_t v20 = v19 >= 0 ? v18 + 4 : (uint64_t *)v18[4];
      size_t v21 = v19 >= 0 ? *((unsigned __int8 *)v18 + 55) : v18[5];
      size_t v22 = v16 >= v21 ? v21 : v16;
      int v23 = memcmp(v20, v15, v22);
      if (v23) {
        break;
      }
      if (v21 >= v16) {
        goto LABEL_38;
      }
LABEL_24:
      size_t v18 = (uint64_t *)v18[1];
      if (!v18) {
        goto LABEL_39;
      }
    }
    if (v23 < 0) {
      goto LABEL_24;
    }
LABEL_38:
    int v17 = (uint64_t **)v18;
    size_t v18 = (uint64_t *)*v18;
  }
  while (v18);
LABEL_39:
  uint64_t v24 = v10;
  if (v17 != v10)
  {
    int v25 = *((char *)v17 + 55);
    if (v25 >= 0) {
      uint64_t v26 = (uint64_t *)(v17 + 4);
    }
    else {
      uint64_t v26 = v17[4];
    }
    if (v25 >= 0) {
      size_t v27 = *((unsigned __int8 *)v17 + 55);
    }
    else {
      size_t v27 = (size_t)v17[5];
    }
    if (v27 >= v16) {
      size_t v28 = v16;
    }
    else {
      size_t v28 = v27;
    }
    int v29 = memcmp(v15, v26, v28);
    if (v29)
    {
      if ((v29 & 0x80000000) == 0)
      {
LABEL_51:
        unint64_t v30 = v167;
        if (v167) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v167 + 8), 1uLL, memory_order_relaxed);
        }
        int v31 = (std::__shared_weak_count *)v17[8];
        uint64_t v2 = v161;
        v17[7] = (uint64_t *)v159;
        v17[8] = (uint64_t *)v30;
        if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
        goto LABEL_130;
      }
    }
    else if (v16 >= v27)
    {
      goto LABEL_51;
    }
    uint64_t v24 = v17;
  }
  uint64_t v34 = *v24;
  if (*(uint64_t ***)(v161 + 200) == v24)
  {
    size_t v35 = v24;
    uint64_t v2 = v161;
    goto LABEL_114;
  }
  if (!v34)
  {
    uint64_t v1 = v163;
    goto LABEL_72;
  }
  uint64_t v36 = *v24;
  do
  {
    size_t v35 = (uint64_t **)v36;
    uint64_t v36 = (uint64_t *)v36[1];
  }
  while (v36);
  char v37 = v12;
LABEL_75:
  int v39 = *((char *)v35 + 55);
  if (v39 >= 0) {
    std::string v40 = (uint64_t *)(v35 + 4);
  }
  else {
    std::string v40 = v35[4];
  }
  if (v39 >= 0) {
    size_t v41 = *((unsigned __int8 *)v35 + 55);
  }
  else {
    size_t v41 = (size_t)v35[5];
  }
  char __p = v37;
  if (v37 >= 0) {
    uint64_t v42 = (const void *)v164;
  }
  else {
    uint64_t v42 = v13;
  }
  if (v37 >= 0) {
    size_t v14 = v12;
  }
  if (v14 >= v41) {
    size_t v43 = v41;
  }
  else {
    size_t v43 = v14;
  }
  int v44 = memcmp(v40, v42, v43);
  if (!v44)
  {
    uint64_t v2 = v161;
    if (v41 >= v14) {
      goto LABEL_91;
    }
LABEL_114:
    if (v34) {
      uint64_t v10 = v35 + 1;
    }
    else {
      uint64_t v10 = v24;
    }
    if (!*v10)
    {
      if (v34) {
        uint64_t v45 = v35;
      }
      else {
        uint64_t v45 = v24;
      }
      int v52 = v163;
      char v53 = *((unsigned char *)v163 + 31);
      goto LABEL_124;
    }
    goto LABEL_130;
  }
  uint64_t v2 = v161;
  if (v44 < 0) {
    goto LABEL_114;
  }
LABEL_91:
  if (!v11)
  {
    uint64_t v45 = v10;
    goto LABEL_123;
  }
  while (2)
  {
    while (2)
    {
      uint64_t v45 = (uint64_t **)v11;
      int v46 = *((char *)v11 + 55);
      if (v46 >= 0) {
        uint8x8_t v47 = v11 + 4;
      }
      else {
        uint8x8_t v47 = (const void *)v11[4];
      }
      if (v46 >= 0) {
        size_t v48 = *((unsigned __int8 *)v11 + 55);
      }
      else {
        size_t v48 = v11[5];
      }
      if (v48 >= v14) {
        size_t v49 = v14;
      }
      else {
        size_t v49 = v48;
      }
      int v50 = memcmp(v42, v47, v49);
      if (v50)
      {
        if (v50 < 0) {
          break;
        }
        goto LABEL_107;
      }
      if (v14 >= v48)
      {
LABEL_107:
        int v51 = memcmp(v47, v42, v49);
        if (v51)
        {
          if ((v51 & 0x80000000) == 0) {
            goto LABEL_130;
          }
        }
        else if (v48 >= v14)
        {
          goto LABEL_130;
        }
        uint64_t v11 = v45[1];
        if (!v11)
        {
          uint64_t v10 = v45 + 1;
          goto LABEL_123;
        }
        continue;
      }
      break;
    }
    uint64_t v11 = *v45;
    if (*v45) {
      continue;
    }
    break;
  }
  uint64_t v10 = v45;
LABEL_123:
  int v52 = v163;
  char v53 = __p;
LABEL_124:
  int v54 = (uint64_t *)operator new(0x48uLL);
  int v55 = (std::string *)(v54 + 4);
  if (v53 < 0)
  {
    std::string::__init_copy_ctor_external(v55, (const std::string::value_type *)v52[1], v52[2]);
    unint64_t v57 = v167;
    v54[7] = v166;
    v54[8] = v57;
    if (v57) {
LABEL_126:
    }
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v57 + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    long long v56 = *(_OWORD *)v164;
    v54[6] = *(void *)(v164 + 16);
    *(_OWORD *)&v55->__r_.__value_.__l.__data_ = v56;
    unint64_t v57 = v167;
    v54[7] = v159;
    v54[8] = v57;
    if (v57) {
      goto LABEL_126;
    }
  }
  uint64_t *v54 = 0;
  v54[1] = 0;
  v54[2] = (uint64_t)v45;
  std::__shared_weak_count *v10 = v54;
  uint64_t v58 = **(void **)(v2 + 200);
  if (v58)
  {
    *(void *)(v2 + 200) = v58;
    int v54 = *v10;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 208), v54);
  ++*(void *)(v2 + 216);
LABEL_130:
  int v59 = *(_DWORD *)(v166 + 32);
  int v60 = *(_DWORD *)(v2 + 120);
  uint64_t v61 = *(NSObject **)(v2 + 40);
  BOOL v62 = os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT);
  if (!v60)
  {
    uint64_t v1 = v163;
    if (!v62)
    {
LABEL_145:
      uint64_t v70 = *(void *)(v2 + 160);
      if (v70)
      {
        (*(void (**)(uint64_t, uint64_t))(v70 + 16))(v70, 1);
        CFTypeRef v71 = *(const void **)(v2 + 160);
        *(void *)(v2 + 160) = 0;
        if (v71) {
          _Block_release(v71);
        }
        uint64_t v72 = *(NSObject **)(v2 + 40);
        if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          int v59 = 2;
          _os_log_impl(&dword_1C59C6000, v72, OS_LOG_TYPE_DEFAULT, "#I Assertion held, but action will be deferred; acknowledging previous notification",
            (uint8_t *)&buf,
            2u);
          uint64_t v65 = *(void *)(v2 + 136);
          if (*((char *)v163 + 31) < 0) {
            goto LABEL_135;
          }
        }
        else
        {
          int v59 = 2;
          uint64_t v65 = *(void *)(v2 + 136);
          if (*((char *)v163 + 31) < 0) {
            goto LABEL_135;
          }
        }
        goto LABEL_153;
      }
      int v59 = 2;
      goto LABEL_152;
    }
    std::string::size_type v66 = v164;
    if (*((char *)v163 + 31) < 0)
    {
      std::string::size_type v66 = *(void *)v164;
      std::string::size_type v67 = v163[4];
      uint64_t v68 = *(int *)(v2 + 124);
      if (v68 <= 2) {
        goto LABEL_139;
      }
    }
    else
    {
      std::string::size_type v67 = v163[4];
      uint64_t v68 = *(int *)(v2 + 124);
      if (v68 <= 2)
      {
LABEL_139:
        std::string::size_type v69 = off_1E651BAD8[v68];
LABEL_144:
        LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v66;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v67;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
        *(_DWORD *)dispatch_group_t group = v59;
        *(_WORD *)&group[4] = 1024;
        *(_DWORD *)&group[6] = 2;
        *(_WORD *)&group[10] = 2080;
        *(void *)&group[12] = v69;
        _os_log_impl(&dword_1C59C6000, v61, OS_LOG_TYPE_DEFAULT, "#I Power assertion created for '%s' during sleep; Timeout (millisec): %llu, Status = %d, Override = %d; Sleep state: %s",
          (uint8_t *)&buf,
          0x2Cu);
        goto LABEL_145;
      }
    }
    std::string::size_type v69 = "Unknown";
    goto LABEL_144;
  }
  uint64_t v1 = v163;
  if (!v62)
  {
LABEL_152:
    uint64_t v65 = *(void *)(v2 + 136);
    if (*((char *)v1 + 31) < 0) {
      goto LABEL_135;
    }
    goto LABEL_153;
  }
  std::string::size_type v63 = v164;
  if (*((char *)v163 + 31) < 0) {
    std::string::size_type v63 = *(void *)v164;
  }
  std::string::size_type v64 = v163[4];
  LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v63;
  WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
  *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v64;
  HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
  *(_DWORD *)dispatch_group_t group = v59;
  _os_log_impl(&dword_1C59C6000, v61, OS_LOG_TYPE_DEFAULT, "#I Power assertion created for '%s'; Timeout (millisec): %llu, Status = %d",
    (uint8_t *)&buf,
    0x1Cu);
  uint64_t v65 = *(void *)(v2 + 136);
  if (*((char *)v163 + 31) < 0)
  {
LABEL_135:
    std::string::__init_copy_ctor_external(&v165, (const std::string::value_type *)v1[1], v1[2]);
    goto LABEL_154;
  }
LABEL_153:
  long long v73 = *(_OWORD *)v164;
  v165.__r_.__value_.__r.__words[2] = *(void *)(v164 + 16);
  *(_OWORD *)&v165.__r_.__value_.__l.__data_ = v73;
LABEL_154:
  PowerStats::gotAssertion(v65, (uint64_t)&v165, v59);
  if ((SHIBYTE(v165.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v59 == 2) {
      goto LABEL_156;
    }
LABEL_159:
    if (v1[4] < 1) {
      goto LABEL_315;
    }
    unint64_t v75 = *(std::__shared_weak_count **)(v2 + 80);
    if (!v75 || (uint64_t v76 = *(void *)(v2 + 72), (v77 = std::__shared_weak_count::lock(v75)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    std::string v78 = v77;
    p_shared_weak_owners = &v77->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v77->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v77->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v78);
    }
    long long v80 = v163;
    buf.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
    buf.__r_.__value_.__l.__size_ = 1174405120;
    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZZN12PowerManager5State20createPowerAssertionENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_6chrono8durationIxNS1_5ratioILl1ELl1000EEEEEENKUlvE_clEv_block_invoke;
    *(void *)dispatch_group_t group = &__block_descriptor_tmp_39_4;
    *(void *)&group[8] = v2;
    *(void *)&group[16] = v76;
    unint64_t v170 = v78;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    std::string::size_type v160 = v78;
    if (*((char *)v163 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v171, (const std::string::value_type *)v163[1], v163[2]);
    }
    else
    {
      long long v81 = *(_OWORD *)v164;
      v171.__r_.__value_.__r.__words[2] = *(void *)(v164 + 16);
      *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v81;
    }
    uint64_t v172 = v163[4];
    unint64_t v100 = (uint64_t *)operator new(0x10uLL);
    xpc_object_t v101 = _Block_copy(&buf);
    *unint64_t v100 = (uint64_t)"Watchdog timed out";
    TelephonyBasebandWatchdogStart();
    if (v101) {
      _Block_release(v101);
    }
    __pa = v100;
    xpc_object_t v102 = (uint64_t **)(v2 + 232);
    std::string::size_type v103 = *(uint64_t **)(v2 + 232);
    if (v103)
    {
      size_t v104 = *((unsigned __int8 *)v163 + 31);
      size_t v105 = (const void *)v163[1];
      size_t v106 = v163[2];
      if ((v104 & 0x80u) == 0) {
        uint64_t v107 = (const void *)v164;
      }
      else {
        uint64_t v107 = (const void *)v163[1];
      }
      if ((v104 & 0x80u) == 0) {
        size_t v108 = *((unsigned __int8 *)v163 + 31);
      }
      else {
        size_t v108 = v163[2];
      }
      uint64_t v109 = v102;
      size_t v110 = v103;
      while (2)
      {
        while (1)
        {
          int v111 = *((char *)v110 + 55);
          std::string::size_type v112 = v111 >= 0 ? v110 + 4 : (uint64_t *)v110[4];
          size_t v113 = v111 >= 0 ? *((unsigned __int8 *)v110 + 55) : v110[5];
          size_t v114 = v108 >= v113 ? v113 : v108;
          int v115 = memcmp(v112, v107, v114);
          if (!v115) {
            break;
          }
          if ((v115 & 0x80000000) == 0) {
            goto LABEL_236;
          }
LABEL_222:
          size_t v110 = (uint64_t *)v110[1];
          if (!v110) {
            goto LABEL_237;
          }
        }
        if (v113 < v108) {
          goto LABEL_222;
        }
LABEL_236:
        uint64_t v109 = (uint64_t **)v110;
        size_t v110 = (uint64_t *)*v110;
        if (v110) {
          continue;
        }
        break;
      }
LABEL_237:
      size_t v116 = v102;
      if (v109 == v102) {
        goto LABEL_257;
      }
      int v117 = *((char *)v109 + 55);
      if (v117 >= 0) {
        int v118 = (uint64_t *)(v109 + 4);
      }
      else {
        int v118 = v109[4];
      }
      if (v117 >= 0) {
        size_t v119 = *((unsigned __int8 *)v109 + 55);
      }
      else {
        size_t v119 = (size_t)v109[5];
      }
      if (v119 >= v108) {
        size_t v120 = v108;
      }
      else {
        size_t v120 = v119;
      }
      int v121 = memcmp(v107, v118, v120);
      if (!v121)
      {
        if (v108 < v119) {
          goto LABEL_256;
        }
LABEL_249:
        size_t v122 = v160;
        long long v123 = (uint64_t *)operator new(0x20uLL);
        *long long v123 = (uint64_t)&unk_1F210BDE0;
        v123[1] = 0;
        v123[2] = 0;
        v123[3] = (uint64_t)__pa;
        std::string v124 = (std::__shared_weak_count *)v109[8];
        v109[7] = __pa;
        v109[8] = v123;
        if (v124 && !atomic_fetch_add(&v124->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
          std::__shared_weak_count::__release_weak(v124);
          if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_339;
          }
          goto LABEL_312;
        }
        goto LABEL_311;
      }
      if ((v121 & 0x80000000) == 0) {
        goto LABEL_249;
      }
LABEL_256:
      size_t v116 = v109;
LABEL_257:
      size_t v125 = *v116;
      if (*(uint64_t ***)(v161 + 224) == v116)
      {
        size_t v126 = v116;
        goto LABEL_306;
      }
      if (v125)
      {
        size_t v127 = *v116;
        do
        {
          size_t v126 = (uint64_t **)v127;
          size_t v127 = (uint64_t *)v127[1];
        }
        while (v127);
        char v128 = v104;
LABEL_267:
        int v130 = *((char *)v126 + 55);
        if (v130 >= 0) {
          std::string::size_type v131 = (uint64_t *)(v126 + 4);
        }
        else {
          std::string::size_type v131 = v126[4];
        }
        if (v130 >= 0) {
          size_t v132 = *((unsigned __int8 *)v126 + 55);
        }
        else {
          size_t v132 = (size_t)v126[5];
        }
        char v156 = v128;
        if (v128 >= 0) {
          long long v133 = (const void *)v164;
        }
        else {
          long long v133 = v105;
        }
        if (v128 >= 0) {
          size_t v106 = v104;
        }
        if (v106 >= v132) {
          size_t v134 = v132;
        }
        else {
          size_t v134 = v106;
        }
        int v135 = memcmp(v131, v133, v134);
        if (v135)
        {
          if ((v135 & 0x80000000) == 0)
          {
LABEL_283:
            if (!v103)
            {
              xpc_object_t v136 = v102;
              goto LABEL_332;
            }
            while (1)
            {
              xpc_object_t v136 = (uint64_t **)v103;
              size_t v137 = *((unsigned __int8 *)v103 + 55);
              size_t v138 = v103[5];
              if ((v137 & 0x80u) == 0) {
                char v139 = v103 + 4;
              }
              else {
                char v139 = (const void *)v103[4];
              }
              if ((v137 & 0x80u) == 0) {
                size_t v140 = v137;
              }
              else {
                size_t v140 = v138;
              }
              if (v140 >= v106) {
                size_t v141 = v106;
              }
              else {
                size_t v141 = v140;
              }
              int v142 = memcmp(v133, v139, v141);
              if (v142)
              {
                if (v142 < 0) {
                  goto LABEL_285;
                }
LABEL_299:
                int v143 = memcmp(v139, v133, v141);
                if (v143)
                {
                  if ((v143 & 0x80000000) == 0) {
                    goto LABEL_310;
                  }
                }
                else if (v140 >= v106)
                {
                  goto LABEL_310;
                }
                std::string::size_type v103 = v136[1];
                if (!v103)
                {
                  xpc_object_t v102 = v136 + 1;
                  goto LABEL_332;
                }
              }
              else
              {
                if (v106 >= v140) {
                  goto LABEL_299;
                }
LABEL_285:
                std::string::size_type v103 = *v136;
                if (!*v136)
                {
                  xpc_object_t v102 = v136;
LABEL_332:
                  xpc_object_t v149 = v163;
                  char v150 = v156;
LABEL_333:
                  size_t v122 = v160;
                  size_t v151 = (char *)operator new(0x48uLL);
                  xpc_object_t v152 = (uint64_t *)v151;
                  if (v150 < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)(v151 + 32), (const std::string::value_type *)v149[1], v149[2]);
                  }
                  else
                  {
                    long long v153 = *(_OWORD *)v164;
                    *((void *)v151 + 6) = *(void *)(v164 + 16);
                    *((_OWORD *)v151 + 2) = v153;
                  }
                  v152[7] = (uint64_t)__pa;
                  int64_t v154 = operator new(0x20uLL);
                  *int64_t v154 = &unk_1F210BDE0;
                  v154[1] = 0;
                  v154[2] = 0;
                  v154[3] = __pa;
                  v152[8] = (uint64_t)v154;
                  *xpc_object_t v152 = 0;
                  v152[1] = 0;
                  v152[2] = (uint64_t)v136;
                  *xpc_object_t v102 = v152;
                  uint64_t v155 = **(void **)(v161 + 224);
                  if (v155)
                  {
                    *(void *)(v161 + 224) = v155;
                    xpc_object_t v152 = *v102;
                  }
                  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v161 + 232), v152);
                  ++*(void *)(v161 + 240);
                  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
                  {
LABEL_339:
                    operator delete(v171.__r_.__value_.__l.__data_);
                    xpc_object_t v144 = v170;
                    uint64_t v1 = v163;
                    if (!v170) {
                      goto LABEL_314;
                    }
LABEL_313:
                    std::__shared_weak_count::__release_weak(v144);
LABEL_314:
                    std::__shared_weak_count::__release_weak(v122);
                    goto LABEL_315;
                  }
LABEL_312:
                  xpc_object_t v144 = v170;
                  uint64_t v1 = v163;
                  if (v170) {
                    goto LABEL_313;
                  }
                  goto LABEL_314;
                }
              }
            }
          }
        }
        else if (v132 >= v106)
        {
          goto LABEL_283;
        }
LABEL_306:
        if (v125) {
          xpc_object_t v102 = v126 + 1;
        }
        else {
          xpc_object_t v102 = v116;
        }
        if (!*v102)
        {
          if (v125) {
            xpc_object_t v136 = v126;
          }
          else {
            xpc_object_t v136 = v116;
          }
          xpc_object_t v149 = v163;
          char v150 = *((unsigned char *)v163 + 31);
          goto LABEL_333;
        }
LABEL_310:
        TelephonyBasebandWatchdogStop();
        operator delete(__pa);
        size_t v122 = v160;
LABEL_311:
        if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_339;
        }
        goto LABEL_312;
      }
      long long v80 = v163;
    }
    else
    {
      size_t v116 = (uint64_t **)(v2 + 232);
      if (*(uint64_t ***)(v2 + 224) == v102)
      {
        size_t v125 = 0;
        size_t v116 = (uint64_t **)(v2 + 232);
        size_t v126 = (uint64_t **)(v2 + 232);
        goto LABEL_306;
      }
    }
    size_t v126 = v116;
    do
    {
      uint64_t v129 = (uint64_t *)v126;
      size_t v126 = (uint64_t **)v126[2];
    }
    while (*v126 == v129);
    size_t v125 = 0;
    size_t v104 = *((unsigned __int8 *)v80 + 31);
    size_t v105 = (const void *)v80[1];
    size_t v106 = v80[2];
    char v128 = *((unsigned char *)v80 + 31);
    goto LABEL_267;
  }
  operator delete(v165.__r_.__value_.__l.__data_);
  if (v59 != 2) {
    goto LABEL_159;
  }
LABEL_156:
  if (*((char *)v1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&buf, (const std::string::value_type *)v1[1], v1[2]);
  }
  else
  {
    long long v74 = *(_OWORD *)v164;
    buf.__r_.__value_.__r.__words[2] = *(void *)(v164 + 16);
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v74;
  }
  std::string::size_type v82 = v1[5];
  *(void *)dispatch_group_t group = v82;
  if (v82)
  {
    dispatch_retain(v82);
    if (*(void *)group) {
      dispatch_group_enter(*(dispatch_group_t *)group);
    }
  }
  char v83 = *(uint64_t **)(v2 + 256);
  if (!v83)
  {
    xpc_object_t v86 = (uint64_t **)(v2 + 256);
    xpc_object_t v87 = (uint64_t **)(v2 + 256);
    goto LABEL_198;
  }
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_std::string buf = &buf;
  }
  else {
    p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
  }
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = buf.__r_.__value_.__l.__size_;
  }
  do
  {
    while (2)
    {
      xpc_object_t v87 = (uint64_t **)v83;
      uint64_t v90 = (const void *)v83[4];
      int v88 = v83 + 4;
      uint64_t v89 = v90;
      int v91 = *((char *)v88 + 23);
      if (v91 >= 0) {
        long long v92 = v88;
      }
      else {
        long long v92 = v89;
      }
      if (v91 >= 0) {
        size_t v93 = *((unsigned __int8 *)v88 + 23);
      }
      else {
        size_t v93 = v88[1];
      }
      if (v93 >= size) {
        size_t v94 = size;
      }
      else {
        size_t v94 = v93;
      }
      int v95 = memcmp(p_buf, v92, v94);
      if (v95)
      {
        if (v95 < 0) {
          goto LABEL_177;
        }
      }
      else if (size < v93)
      {
LABEL_177:
        char v83 = *v87;
        xpc_object_t v86 = v87;
        if (!*v87) {
          goto LABEL_198;
        }
        continue;
      }
      break;
    }
    int v96 = memcmp(v92, p_buf, v94);
    if (v96)
    {
      if ((v96 & 0x80000000) == 0) {
        goto LABEL_204;
      }
    }
    else if (v93 >= size)
    {
      goto LABEL_204;
    }
    char v83 = v87[1];
  }
  while (v83);
  xpc_object_t v86 = v87 + 1;
LABEL_198:
  uint64_t v97 = (uint64_t *)operator new(0x40uLL);
  uint64_t v98 = (std::string *)(v97 + 4);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v98, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v98->__r_.__value_.__l.__data_ = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    v97[6] = buf.__r_.__value_.__r.__words[2];
  }
  v97[7] = *(void *)group;
  *(void *)dispatch_group_t group = 0;
  *uint64_t v97 = 0;
  v97[1] = 0;
  v97[2] = (uint64_t)v87;
  _OWORD *v86 = v97;
  uint64_t v99 = **(void **)(v2 + 248);
  if (v99)
  {
    *(void *)(v2 + 248) = v99;
    uint64_t v97 = *v86;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 256), v97);
  ++*(void *)(v2 + 264);
LABEL_204:
  if (*(void *)group)
  {
    dispatch_group_leave(*(dispatch_group_t *)group);
    if (*(void *)group) {
      dispatch_release(*(dispatch_object_t *)group);
    }
  }
  uint64_t v1 = v163;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
LABEL_315:
  xpc_object_t v145 = (std::__shared_weak_count *)v167;
  if (v167 && !atomic_fetch_add((atomic_ullong *volatile)(v167 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
    std::__shared_weak_count::__release_weak(v145);
  }
  uint64_t v146 = v1[5];
  if (v146)
  {
    dispatch_group_leave(v146);
    xpc_object_t v147 = v1[5];
    if (v147) {
      dispatch_release(v147);
    }
  }
  if (*((char *)v1 + 31) < 0) {
    operator delete(*(void **)v164);
  }
  operator delete(v1);
  xpc_object_t v148 = (std::__shared_weak_count *)a1[2];
  if (v148 && !atomic_fetch_add(&v148->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
    std::__shared_weak_count::__release_weak(v148);
  }
  operator delete(a1);
}

void sub_1C5AF70A0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, std::__shared_weak_count *a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,dispatch_group_t group,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
}

void sub_1C5AF71D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void **a16)
{
  __cxa_end_catch();
  pthread_mutex_unlock(&ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance);
  size_t v16 = *(NSObject **)(a15 + 40);
  if (v16)
  {
    dispatch_group_leave(v16);
    int v17 = *(NSObject **)(a15 + 40);
    if (v17) {
      dispatch_release(v17);
    }
  }
  if (*(char *)(a15 + 31) < 0) {
    operator delete(*a16);
  }
  operator delete((void *)a15);
  size_t v18 = (std::__shared_weak_count *)a14[2];
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  operator delete(a14);
  JUMPOUT(0x1C5AF7378);
}

void sub_1C5AF7208()
{
}

void sub_1C5AF7214()
{
}

void sub_1C5AF721C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    JUMPOUT(0x1C5AF722CLL);
  }
  JUMPOUT(0x1C5AF7230);
}

void sub_1C5AF7284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void **a16)
{
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  int v17 = *(NSObject **)(a15 + 40);
  if (v17)
  {
    dispatch_group_leave(v17);
    size_t v18 = *(NSObject **)(a15 + 40);
    if (v18) {
      dispatch_release(v18);
    }
  }
  if (*(char *)(a15 + 31) < 0) {
    operator delete(*a16);
  }
  operator delete((void *)a15);
  int v19 = (std::__shared_weak_count *)a14[2];
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  operator delete(a14);
  JUMPOUT(0x1C5AF7378);
}

void sub_1C5AF72D0(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZZN12PowerManager5State20createPowerAssertionENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_6chrono8durationIxNS1_5ratioILl1ELl1000EEEEEENKUlvE_clEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    int v19 = v4;
    if (v4)
    {
      uint64_t v5 = *(void **)(a1 + 40);
      size_t v18 = v5;
      if (!v5)
      {
        uint64_t v6 = v4;
LABEL_19:
        if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        return;
      }
      uint64_t v15 = v3;
      if (*(char *)(a1 + 79) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 56), *(void *)(a1 + 64));
      }
      else {
        std::string __p = *(std::string *)(a1 + 56);
      }
      uint64_t v17 = *(void *)(a1 + 80);
      uint64_t v7 = (std::__shared_weak_count *)v5[10];
      if (!v7 || (uint64_t v8 = v5[9], (v9 = std::__shared_weak_count::lock(v7)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      uint64_t v10 = v9;
      uint64_t v11 = operator new(0x28uLL);
      void *v11 = v15;
      size_t v12 = (std::string *)(v11 + 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v12, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v11[3] = *((void *)&__p.__r_.__value_.__l + 2);
      }
      v11[4] = v17;
      int v13 = v5[11];
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      size_t v14 = operator new(0x18uLL);
      *size_t v14 = v11;
      v14[1] = v8;
      v14[2] = v10;
      dispatch_async_f(v13, v14, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN12PowerManager5StateEE15execute_wrappedIZZZNS4_20createPowerAssertionENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS7_6chrono8durationIxNS7_5ratioILl1ELl1000EEEEEENKUlvE_clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNS7_10unique_ptrISL_NS7_14default_deleteISL_EEEEENUlPvE_8__invokeESU_);
      if (atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_15;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_15:
          uint64_t v6 = v19;
          if (!v19) {
            return;
          }
          goto LABEL_19;
        }
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      uint64_t v6 = v19;
      if (!v19) {
        return;
      }
      goto LABEL_19;
    }
  }
}

void sub_1C5AF757C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (std::string *)(a1 + 7);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 56);
    a1[9] = *(void *)(a2 + 72);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
}

void sub_1C5AF7608(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
  {
    operator delete(*(void **)(a1 + 56));
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v2) {
      return;
    }
  }
  else
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v2) {
      return;
    }
  }

  std::__shared_weak_count::__release_weak(v2);
}

void std::__shared_ptr_pointer<ctu::power::assertion *,std::shared_ptr<ctu::power::assertion> ctu::SharedSynchronizable<ctu::power::assertion>::make_shared_ptr<ctu::power::assertion>(ctu::power::assertion*)::{lambda(ctu::power::assertion *)#1},std::allocator<ctu::power::assertion>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ctu::power::assertion *,std::shared_ptr<ctu::power::assertion> ctu::SharedSynchronizable<ctu::power::assertion>::make_shared_ptr<ctu::power::assertion>(ctu::power::assertion*)::{lambda(ctu::power::assertion *)#1},std::allocator<ctu::power::assertion>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<ctu::power::assertion *,std::shared_ptr<ctu::power::assertion> ctu::SharedSynchronizable<ctu::power::assertion>::make_shared_ptr<ctu::power::assertion>(ctu::power::assertion*)::{lambda(ctu::power::assertion *)#1},std::allocator<ctu::power::assertion>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableINS_5power9assertionEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableINS_5power9assertionEE15make_shared_ptrIS2_EENSt3__110shared"
                                "_ptrIT_EEPS7_EUlPS2_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableINS_5power9assertionEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableINS_5power9assertionEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void std::shared_ptr<ctu::power::assertion> ctu::SharedSynchronizable<ctu::power::assertion>::make_shared_ptr<ctu::power::assertion>(ctu::power::assertion*)::{lambda(ctu::power::assertion*)#1}::operator() const(ctu::power::assertion*)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>>>::destroy(*(char **)(a1 + 40));
    uint64_t v2 = *(NSObject **)(a1 + 24);
    if (v2) {
      dispatch_release(v2);
    }
    unint64_t v3 = *(NSObject **)(a1 + 16);
    if (v3) {
      dispatch_release(v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete((void *)a1);
  }
}

void std::__tree<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>>>::destroy(*((void *)a1 + 1));
    uint64_t v2 = (std::__shared_weak_count *)*((void *)a1 + 8);
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
    if (a1[55] < 0)
    {
      operator delete(*((void **)a1 + 4));
      unint64_t v3 = a1;
    }
    else
    {
      unint64_t v3 = a1;
    }
    operator delete(v3);
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN12PowerManager5StateEE15execute_wrappedIZZZNS4_20createPowerAssertionENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS7_6chrono8durationIxNS7_5ratioILl1ELl1000EEEEEENKUlvE_clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNS7_10unique_ptrISL_NS7_14default_deleteISL_EEEEENUlPvE_8__invokeESU_(void ***a1)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  unint64_t v3 = **a1;
  unint64_t v62 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v61[7] = v4;
  v61[8] = v4;
  v61[5] = v4;
  v61[6] = v4;
  v61[3] = v4;
  v61[4] = v4;
  v61[1] = v4;
  v61[2] = v4;
  long long v60 = v4;
  v61[0] = v4;
  *(_OWORD *)std::string __p = v4;
  long long v59 = v4;
  long long v56 = v4;
  long long v57 = v4;
  long long v54 = v4;
  long long v55 = v4;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v54);
  long long v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v54, (uint64_t)"Power assertion watchdog fired for '", 36);
  uint64_t v6 = v2 + 1;
  int v7 = *((char *)v2 + 31);
  if (v7 >= 0) {
    uint64_t v8 = (uint64_t)(v2 + 1);
  }
  else {
    uint64_t v8 = (uint64_t)v2[1];
  }
  if (v7 >= 0) {
    uint64_t v9 = *((unsigned __int8 *)v2 + 31);
  }
  else {
    uint64_t v9 = (uint64_t)v2[2];
  }
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"'; Timeout (millisec): ",
    23);
  std::ostream::operator<<();
  if (*((char *)v2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v53, (const std::string::value_type *)v2[1], (std::string::size_type)v2[2]);
  }
  else
  {
    long long v11 = *(_OWORD *)v6;
    v53.__r_.__value_.__r.__words[2] = (std::string::size_type)v2[3];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v11;
  }
  PowerManager::State::releasePowerAssertion_sync(v3, (const void **)&v53.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  if (TelephonyUtilIsInternalBuild())
  {
    size_t v12 = (std::__shared_weak_count *)v3[35];
    if (!v12) {
      goto LABEL_89;
    }
    int v13 = std::__shared_weak_count::lock(v12);
    if (!v13) {
      goto LABEL_89;
    }
    size_t v14 = v13;
    uint64_t v15 = v3[34];
    if (!v15) {
      goto LABEL_69;
    }
    xpc_object_t v16 = xpc_dictionary_create(0, 0, 0);
    if (v16 || (xpc_object_t v16 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C8795EB0](v16) == MEMORY[0x1E4F14590])
      {
        xpc_retain(v16);
        xpc_object_t v17 = v16;
      }
      else
      {
        xpc_object_t v17 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v17 = xpc_null_create();
      xpc_object_t v16 = 0;
    }
    xpc_release(v16);
    if ((BYTE8(v60) & 0x10) != 0)
    {
      uint64_t v23 = v60;
      if ((unint64_t)v60 < *((void *)&v57 + 1))
      {
        *(void *)&long long v60 = *((void *)&v57 + 1);
        uint64_t v23 = *((void *)&v57 + 1);
      }
      uint64_t v24 = (const void *)v57;
      size_t v21 = v23 - v57;
      if ((unint64_t)(v23 - v57) > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_72;
      }
    }
    else
    {
      if ((BYTE8(v60) & 8) == 0)
      {
        size_t v21 = 0;
        HIBYTE(v52) = 0;
        p_dst = (void **)&__dst;
        goto LABEL_39;
      }
      uint64_t v24 = (const void *)*((void *)&v55 + 1);
      size_t v21 = *((void *)&v56 + 1) - *((void *)&v55 + 1);
      if (*((void *)&v56 + 1) - *((void *)&v55 + 1) > 0x7FFFFFFFFFFFFFF7uLL) {
LABEL_72:
      }
        std::string::__throw_length_error[abi:ne180100]();
    }
    if (v21 >= 0x17)
    {
      uint64_t v25 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v21 | 7) != 0x17) {
        uint64_t v25 = v21 | 7;
      }
      uint64_t v26 = v25 + 1;
      p_dst = (void **)operator new(v25 + 1);
      size_t v51 = v21;
      int64_t v52 = v26 | 0x8000000000000000;
      std::string __dst = p_dst;
    }
    else
    {
      HIBYTE(v52) = v21;
      p_dst = (void **)&__dst;
      if (!v21)
      {
LABEL_39:
        *((unsigned char *)p_dst + v21) = 0;
        if (v52 >= 0) {
          size_t v27 = (const char *)&__dst;
        }
        else {
          size_t v27 = (const char *)__dst;
        }
        xpc_object_t v28 = xpc_string_create(v27);
        if (!v28) {
          xpc_object_t v28 = xpc_null_create();
        }
        xpc_dictionary_set_value(v17, (const char *)*MEMORY[0x1E4F4CA98], v28);
        xpc_object_t v29 = xpc_null_create();
        xpc_release(v28);
        xpc_release(v29);
        if (SHIBYTE(v52) < 0) {
          operator delete(__dst);
        }
        xpc_object_t v30 = xpc_int64_create(0);
        if (!v30) {
          xpc_object_t v30 = xpc_null_create();
        }
        xpc_dictionary_set_value(v17, (const char *)*MEMORY[0x1E4F4C180], v30);
        xpc_object_t v31 = xpc_null_create();
        xpc_release(v30);
        xpc_release(v31);
        Timestamp::Timestamp((Timestamp *)buf);
        Timestamp::asString(v32, 0, 9, &__dst);
        if (v52 >= 0) {
          uint64_t v33 = (const char *)&__dst;
        }
        else {
          uint64_t v33 = (const char *)__dst;
        }
        xpc_object_t v34 = xpc_string_create(v33);
        if (!v34) {
          xpc_object_t v34 = xpc_null_create();
        }
        xpc_dictionary_set_value(v17, (const char *)*MEMORY[0x1E4F4C4C8], v34);
        xpc_object_t v35 = xpc_null_create();
        xpc_release(v34);
        xpc_release(v35);
        if (SHIBYTE(v52) < 0) {
          operator delete(__dst);
        }
        std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)buf, *((void **)&buf[0] + 1));
        uint64_t v36 = (const void *)*MEMORY[0x1E4F4C748];
        size_t v37 = strlen((const char *)*MEMORY[0x1E4F4C748]);
        if (v37 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v38 = v37;
        if (v37 >= 0x17)
        {
          uint64_t v40 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v37 | 7) != 0x17) {
            uint64_t v40 = v37 | 7;
          }
          uint64_t v41 = v40 + 1;
          int v39 = (void **)operator new(v40 + 1);
          size_t v51 = v38;
          int64_t v52 = v41 | 0x8000000000000000;
          std::string __dst = v39;
        }
        else
        {
          HIBYTE(v52) = v37;
          int v39 = (void **)&__dst;
          if (!v37) {
            goto LABEL_63;
          }
        }
        memmove(v39, v36, v38);
LABEL_63:
        *((unsigned char *)v39 + v38) = 0;
        *(void *)&buf[0] = v17;
        if (v17) {
          xpc_retain(v17);
        }
        else {
          *(void *)&buf[0] = xpc_null_create();
        }
        size_t v49 = 0;
        ServiceManager::runCommand(v15, (uint64_t)&__dst, (void **)buf, &v49);
        xpc_release(*(xpc_object_t *)&buf[0]);
        *(void *)&buf[0] = 0;
        if (SHIBYTE(v52) < 0) {
          operator delete(__dst);
        }
        xpc_release(v17);
LABEL_69:
        if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
        goto LABEL_89;
      }
    }
    memmove(p_dst, v24, v21);
    goto LABEL_39;
  }
  size_t v18 = v3[5];
  if (!os_log_type_enabled(v18, OS_LOG_TYPE_FAULT)) {
    goto LABEL_89;
  }
  if ((BYTE8(v60) & 0x10) != 0)
  {
    uint64_t v42 = v60;
    if ((unint64_t)v60 < *((void *)&v57 + 1))
    {
      *(void *)&long long v60 = *((void *)&v57 + 1);
      uint64_t v42 = *((void *)&v57 + 1);
    }
    size_t v43 = (const void **)&v57;
  }
  else
  {
    if ((BYTE8(v60) & 8) == 0)
    {
      size_t v19 = 0;
      HIBYTE(v52) = 0;
      uint64_t v20 = (void **)&__dst;
      goto LABEL_85;
    }
    size_t v43 = (const void **)&v55 + 1;
    uint64_t v42 = *((void *)&v56 + 1);
  }
  int v44 = *v43;
  size_t v19 = v42 - (void)*v43;
  if (v19 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v19 >= 0x17)
  {
    uint64_t v45 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17) {
      uint64_t v45 = v19 | 7;
    }
    uint64_t v46 = v45 + 1;
    uint64_t v20 = (void **)operator new(v45 + 1);
    size_t v51 = v19;
    int64_t v52 = v46 | 0x8000000000000000;
    std::string __dst = v20;
  }
  else
  {
    HIBYTE(v52) = v42 - *(unsigned char *)v43;
    uint64_t v20 = (void **)&__dst;
    if (!v19) {
      goto LABEL_85;
    }
  }
  memmove(v20, v44, v19);
LABEL_85:
  *((unsigned char *)v20 + v19) = 0;
  uint8x8_t v47 = (void **)&__dst;
  if (v52 < 0) {
    uint8x8_t v47 = __dst;
  }
  LODWORD(buf[0]) = 136315138;
  *(void *)((char *)buf + 4) = v47;
  _os_log_fault_impl(&dword_1C59C6000, v18, OS_LOG_TYPE_FAULT, "%s", (uint8_t *)buf, 0xCu);
  if (SHIBYTE(v52) < 0) {
    operator delete(__dst);
  }
LABEL_89:
  *(void *)&long long v54 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v54 + *(void *)(v54 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v54 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v59) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C8795140](v61);
  if (*((char *)v2 + 31) < 0) {
    operator delete(*v6);
  }
  operator delete(v2);
  size_t v48 = (std::__shared_weak_count *)a1[2];
  if (v48 && !atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
  operator delete(a1);
}

void sub_1C5AF7FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void PowerManager::State::releasePowerAssertion_sync(void *a1, const void **a2)
{
  uint64_t v2 = a2;
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  long long v5 = a1 + 26;
  long long v4 = (uint64_t *)a1[26];
  if (!v4) {
    goto LABEL_40;
  }
  char v6 = *((unsigned char *)a2 + 23);
  if (v6 >= 0) {
    int v7 = a2;
  }
  else {
    int v7 = *a2;
  }
  if (v6 >= 0) {
    size_t v8 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v8 = (size_t)a2[1];
  }
  uint64_t v9 = a1 + 26;
  uint64_t v10 = (uint64_t *)a1[26];
  do
  {
    while (1)
    {
      int v11 = *((char *)v10 + 55);
      size_t v12 = v11 >= 0 ? v10 + 4 : (uint64_t *)v10[4];
      size_t v13 = v11 >= 0 ? *((unsigned __int8 *)v10 + 55) : v10[5];
      size_t v14 = v8 >= v13 ? v13 : v8;
      int v15 = memcmp(v12, v7, v14);
      if (v15) {
        break;
      }
      if (v13 >= v8) {
        goto LABEL_23;
      }
LABEL_9:
      uint64_t v10 = (uint64_t *)v10[1];
      if (!v10) {
        goto LABEL_24;
      }
    }
    if (v15 < 0) {
      goto LABEL_9;
    }
LABEL_23:
    uint64_t v9 = v10;
    uint64_t v10 = (uint64_t *)*v10;
  }
  while (v10);
LABEL_24:
  if (v9 == v5) {
    goto LABEL_40;
  }
  int v16 = *((char *)v9 + 55);
  if (v16 >= 0) {
    xpc_object_t v17 = v9 + 4;
  }
  else {
    xpc_object_t v17 = (const void *)v9[4];
  }
  if (v16 >= 0) {
    size_t v18 = *((unsigned __int8 *)v9 + 55);
  }
  else {
    size_t v18 = v9[5];
  }
  if (v18 >= v8) {
    size_t v19 = v8;
  }
  else {
    size_t v19 = v18;
  }
  int v20 = memcmp(v7, v17, v19);
  if (v20)
  {
    if ((v20 & 0x80000000) == 0) {
      goto LABEL_36;
    }
LABEL_40:
    uint64_t v23 = a1[5];
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v24 = v2;
      if (*((char *)v2 + 23) < 0) {
        uint64_t v24 = (const void **)*v2;
      }
      int v54 = 136315138;
      long long v55 = v24;
      uint64_t v25 = "#I Attempt to release non-existent power assertion '%s'";
LABEL_58:
      _os_log_impl(&dword_1C59C6000, v23, OS_LOG_TYPE_DEFAULT, v25, (uint8_t *)&v54, 0xCu);
    }
  }
  else
  {
    if (v8 < v18) {
      goto LABEL_40;
    }
LABEL_36:
    size_t v21 = (void *)v9[1];
    if (v21)
    {
      do
      {
        size_t v22 = v21;
        size_t v21 = (void *)*v21;
      }
      while (v21);
    }
    else
    {
      uint64_t v26 = v9;
      do
      {
        size_t v22 = (void *)v26[2];
        BOOL v27 = *v22 == (void)v26;
        uint64_t v26 = v22;
      }
      while (!v27);
    }
    if ((void *)a1[25] == v9) {
      a1[25] = v22;
    }
    --a1[27];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v4, v9);
    xpc_object_t v28 = (std::__shared_weak_count *)v9[8];
    if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
    if (*((char *)v9 + 55) < 0) {
      operator delete((void *)v9[4]);
    }
    operator delete(v9);
    uint64_t v23 = a1[5];
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      xpc_object_t v29 = v2;
      if (*((char *)v2 + 23) < 0) {
        xpc_object_t v29 = (const void **)*v2;
      }
      int v54 = 136315138;
      long long v55 = v29;
      uint64_t v25 = "#I Released power assertion '%s'";
      goto LABEL_58;
    }
  }
  xpc_object_t v30 = (uint64_t *)a1[29];
  if (!v30) {
    goto LABEL_113;
  }
  char v31 = *((unsigned char *)v2 + 23);
  if (v31 >= 0) {
    uint64_t v32 = v2;
  }
  else {
    uint64_t v32 = *v2;
  }
  if (v31 >= 0) {
    size_t v33 = *((unsigned __int8 *)v2 + 23);
  }
  else {
    size_t v33 = (size_t)v2[1];
  }
  xpc_object_t v34 = a1 + 29;
  xpc_object_t v35 = (uint64_t *)a1[29];
  while (2)
  {
    while (2)
    {
      int v36 = *((char *)v35 + 55);
      if (v36 >= 0) {
        size_t v37 = v35 + 4;
      }
      else {
        size_t v37 = (const void *)v35[4];
      }
      if (v36 >= 0) {
        size_t v38 = *((unsigned __int8 *)v35 + 55);
      }
      else {
        size_t v38 = v35[5];
      }
      if (v33 >= v38) {
        size_t v39 = v38;
      }
      else {
        size_t v39 = v33;
      }
      int v40 = memcmp(v37, v32, v39);
      if (v40)
      {
        if ((v40 & 0x80000000) == 0) {
          break;
        }
        goto LABEL_67;
      }
      if (v38 < v33)
      {
LABEL_67:
        xpc_object_t v35 = (uint64_t *)v35[1];
        if (!v35) {
          goto LABEL_82;
        }
        continue;
      }
      break;
    }
    xpc_object_t v34 = v35;
    xpc_object_t v35 = (uint64_t *)*v35;
    if (v35) {
      continue;
    }
    break;
  }
LABEL_82:
  if (v34 != a1 + 29)
  {
    int v41 = *((char *)v34 + 55);
    if (v41 >= 0) {
      uint64_t v42 = v34 + 4;
    }
    else {
      uint64_t v42 = (const void *)v34[4];
    }
    if (v41 >= 0) {
      size_t v43 = *((unsigned __int8 *)v34 + 55);
    }
    else {
      size_t v43 = v34[5];
    }
    if (v43 >= v33) {
      size_t v44 = v33;
    }
    else {
      size_t v44 = v43;
    }
    int v45 = memcmp(v32, v42, v44);
    if (v45)
    {
      if (v45 < 0) {
        goto LABEL_113;
      }
LABEL_96:
      uint64_t v46 = (void *)v34[1];
      if (v46)
      {
        do
        {
          uint8x8_t v47 = v46;
          uint64_t v46 = (void *)*v46;
        }
        while (v46);
      }
      else
      {
        size_t v48 = v34;
        do
        {
          uint8x8_t v47 = (void *)v48[2];
          BOOL v27 = *v47 == (void)v48;
          size_t v48 = v47;
        }
        while (!v27);
      }
      if ((void *)a1[28] == v34) {
        a1[28] = v47;
      }
      --a1[30];
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v30, v34);
      size_t v49 = (std::__shared_weak_count *)v34[8];
      if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
      if (*((char *)v34 + 55) < 0) {
        operator delete((void *)v34[4]);
      }
      operator delete(v34);
      int v50 = a1[5];
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
      {
        if (*((char *)v2 + 23) < 0) {
          uint64_t v2 = (const void **)*v2;
        }
        int v54 = 136315138;
        long long v55 = v2;
        _os_log_impl(&dword_1C59C6000, v50, OS_LOG_TYPE_DEFAULT, "#I Clear watchdog timer for power assertion '%s'", (uint8_t *)&v54, 0xCu);
      }
    }
    else if (v33 >= v43)
    {
      goto LABEL_96;
    }
  }
LABEL_113:
  if (!a1[27])
  {
    *(unsigned char *)(a1[17] + 88) = 0;
    uint64_t v51 = a1[20];
    if (v51)
    {
      int64_t v52 = a1[5];
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v54) = 0;
        _os_log_impl(&dword_1C59C6000, v52, OS_LOG_TYPE_DEFAULT, "#I No more assertions held, acknowledging previous notification", (uint8_t *)&v54, 2u);
        uint64_t v51 = a1[20];
      }
      (*(void (**)(uint64_t, uint64_t))(v51 + 16))(v51, 1);
      std::string v53 = (const void *)a1[20];
      a1[20] = 0;
      if (v53) {
        _Block_release(v53);
      }
    }
  }
}

void sub_1C5AF8738(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<support::misc::Watchdog  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<support::misc::Watchdog  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 24);
  if (v1)
  {
    TelephonyBasebandWatchdogStop();
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<support::misc::Watchdog  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C5BC9DA7) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C5BC9DA7 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C5BC9DA7)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C5BC9DA7 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void dispatch::async<void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1}>(PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1},std::default_delete<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = **(void ***)a1;
  long long v4 = (void **)(*(void *)a1 + 8);
  if (*(char *)(*(void *)a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v7, (const std::string::value_type *)v2[1], v2[2]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v7.__r_.__value_.__r.__words[2] = v2[3];
    *(_OWORD *)&v7.__r_.__value_.__l.__data_ = v5;
  }
  PowerManager::State::releasePowerAssertion_sync(v3, (const void **)&v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v7.__r_.__value_.__l.__data_);
    if ((*((char *)v2 + 31) & 0x80000000) == 0)
    {
LABEL_6:
      operator delete(v2);
      char v6 = (std::__shared_weak_count *)*((void *)a1 + 2);
      if (!v6) {
        goto LABEL_12;
      }
      goto LABEL_10;
    }
  }
  else if ((*((char *)v2 + 31) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*v4);
  operator delete(v2);
  char v6 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (!v6) {
    goto LABEL_12;
  }
LABEL_10:
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_12:

  operator delete(a1);
}

void sub_1C5AF8958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::unique_ptr<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1},std::default_delete<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](&a10);
  size_t v18 = (std::__shared_weak_count *)v16[2];
  if (v18)
  {
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1},std::default_delete<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 31) < 0) {
      operator delete(*(void **)(v2 + 8));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void ___ZN12PowerManager5State10initializeEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 80);
  if (!v2 || (uint64_t v3 = *(void *)(v1 + 72), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v67 = 0;
    uint64_t v68 = 0;
    char v6 = *(std::__shared_weak_count **)(v1 + 280);
    if (!v6) {
      goto LABEL_90;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
    uint64_t v67 = 0;
    uint64_t v68 = 0;
    char v6 = *(std::__shared_weak_count **)(v1 + 280);
    if (!v6) {
      goto LABEL_90;
    }
  }
  uint64_t v68 = std::__shared_weak_count::lock(v6);
  if (!v68) {
    goto LABEL_93;
  }
  uint64_t v7 = *(void *)(v1 + 272);
  uint64_t v67 = v7;
  if (v7)
  {
    size_t v8 = abm::kCommandSetPowerDownMessageList[0];
    size_t v9 = strlen(abm::kCommandSetPowerDownMessageList[0]);
    if (v9 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v10 = v9;
    if (v9 >= 0x17)
    {
      uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17) {
        uint64_t v12 = v9 | 7;
      }
      uint64_t v13 = v12 + 1;
      p_dst = (long long *)operator new(v12 + 1);
      *((void *)&__dst + 1) = v10;
      unint64_t v66 = v13 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v66) = v9;
      p_dst = &__dst;
      if (!v9)
      {
LABEL_17:
        *((unsigned char *)p_dst + v10) = 0;
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 1174405120;
        aBlock[2] = ___ZN12PowerManager5State10initializeEv_block_invoke_2;
        aBlock[3] = &__block_descriptor_tmp_47_1;
        void aBlock[4] = v1;
        void aBlock[5] = v3;
        std::string::size_type v63 = v5;
        atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        size_t v14 = _Block_copy(aBlock);
        uint64_t v64 = v14;
        ServiceManager::registerCommandHandler(v7, (uint64_t)&__dst, &v64);
        if (v14) {
          _Block_release(v14);
        }
        if (SHIBYTE(v66) < 0) {
          operator delete((void *)__dst);
        }
        char v61 = 9;
        long long v59 = 0;
        strcpy((char *)v60, "power.mgr");
        AppleBasebandManager::create();
        long long v15 = __dst;
        long long __dst = 0uLL;
        int v16 = *(std::__shared_weak_count **)(v1 + 112);
        *(_OWORD *)(v1 + 104) = v15;
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        xpc_object_t v17 = (std::__shared_weak_count *)*((void *)&__dst + 1);
        if (*((void *)&__dst + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&__dst + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
          size_t v18 = v59;
          if (!v59)
          {
LABEL_28:
            if (v61 < 0) {
              operator delete(v60[0]);
            }
            size_t v19 = (const void *)*MEMORY[0x1E4F4CB10];
            size_t v20 = strlen((const char *)*MEMORY[0x1E4F4CB10]);
            if (v20 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            size_t v21 = (void *)v20;
            if (v20 >= 0x17)
            {
              uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v20 | 7) != 0x17) {
                uint64_t v23 = v20 | 7;
              }
              uint64_t v24 = v23 + 1;
              size_t v22 = operator new(v23 + 1);
              __p[1] = v21;
              unint64_t v58 = v24 | 0x8000000000000000;
              __p[0] = v22;
            }
            else
            {
              HIBYTE(v58) = v20;
              size_t v22 = __p;
              if (!v20)
              {
LABEL_38:
                *((unsigned char *)v21 + (void)v22) = 0;
                v53[0] = MEMORY[0x1E4F143A8];
                v53[1] = 1174405120;
                v53[2] = ___ZN12PowerManager5State10initializeEv_block_invoke_48;
                v53[3] = &__block_descriptor_tmp_52_1;
                v53[4] = v1;
                v53[5] = v3;
                int v54 = v5;
                atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                uint64_t v25 = _Block_copy(v53);
                uint64_t v26 = *(NSObject **)(v1 + 88);
                if (v26) {
                  dispatch_retain(*(dispatch_object_t *)(v1 + 88));
                }
                long long v55 = v25;
                dispatch_object_t object = v26;
                AppleBasebandManager::setEventHandler();
                if (object) {
                  dispatch_release(object);
                }
                if (v55) {
                  _Block_release(v55);
                }
                if (SHIBYTE(v58) < 0) {
                  operator delete(__p[0]);
                }
                BOOL v27 = (const void *)*MEMORY[0x1E4F4CB18];
                size_t v28 = strlen((const char *)*MEMORY[0x1E4F4CB18]);
                if (v28 > 0x7FFFFFFFFFFFFFF7) {
                  std::string::__throw_length_error[abi:ne180100]();
                }
                xpc_object_t v29 = (void *)v28;
                if (v28 >= 0x17)
                {
                  uint64_t v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v28 | 7) != 0x17) {
                    uint64_t v31 = v28 | 7;
                  }
                  uint64_t v32 = v31 + 1;
                  xpc_object_t v30 = operator new(v31 + 1);
                  v51[1] = v29;
                  unint64_t v52 = v32 | 0x8000000000000000;
                  v51[0] = v30;
                }
                else
                {
                  HIBYTE(v52) = v28;
                  xpc_object_t v30 = v51;
                  if (!v28)
                  {
LABEL_54:
                    *((unsigned char *)v29 + (void)v30) = 0;
                    v47[0] = MEMORY[0x1E4F143A8];
                    v47[1] = 1174405120;
                    v47[2] = ___ZN12PowerManager5State10initializeEv_block_invoke_53;
                    v47[3] = &__block_descriptor_tmp_56_4;
                    v47[4] = v1;
                    v47[5] = v3;
                    size_t v48 = v5;
                    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                    size_t v33 = _Block_copy(v47);
                    xpc_object_t v34 = *(NSObject **)(v1 + 88);
                    if (v34) {
                      dispatch_retain(*(dispatch_object_t *)(v1 + 88));
                    }
                    size_t v49 = v33;
                    dispatch_object_t v50 = v34;
                    AppleBasebandManager::setEventHandler();
                    if (v50) {
                      dispatch_release(v50);
                    }
                    if (v49) {
                      _Block_release(v49);
                    }
                    if (SHIBYTE(v52) < 0) {
                      operator delete(v51[0]);
                    }
                    AppleBasebandManager::eventsOn(*(AppleBasebandManager **)(v1 + 104));
                    uint64_t v35 = *(void *)(v1 + 136);
                    v43[0] = MEMORY[0x1E4F143A8];
                    v43[1] = 1174405120;
                    void v43[2] = ___ZN12PowerManager5State10initializeEv_block_invoke_57;
                    v43[3] = &__block_descriptor_tmp_59_2;
                    v43[4] = v3;
                    size_t v44 = v5;
                    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                    uint64_t v45 = v67;
                    uint64_t v46 = v68;
                    if (v68) {
                      atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    int v36 = _Block_copy(v43);
                    size_t v37 = *(NSObject **)(v1 + 88);
                    if (v37) {
                      dispatch_retain(*(dispatch_object_t *)(v1 + 88));
                    }
                    if (v36)
                    {
                      size_t v38 = _Block_copy(v36);
                      size_t v39 = *(const void **)(v35 + 104);
                      *(void *)(v35 + 104) = v38;
                      if (!v39) {
                        goto LABEL_71;
                      }
                    }
                    else
                    {
                      size_t v39 = *(const void **)(v35 + 104);
                      *(void *)(v35 + 104) = 0;
                      if (!v39)
                      {
LABEL_71:
                        if (v37) {
                          dispatch_retain(v37);
                        }
                        int v40 = *(NSObject **)(v35 + 112);
                        *(void *)(v35 + 112) = v37;
                        if (v40) {
                          dispatch_release(v40);
                        }
                        if (v37) {
                          dispatch_release(v37);
                        }
                        if (v36) {
                          _Block_release(v36);
                        }
                        int v41 = v46;
                        if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                          std::__shared_weak_count::__release_weak(v41);
                        }
                        if (v44) {
                          std::__shared_weak_count::__release_weak(v44);
                        }
                        if (v48) {
                          std::__shared_weak_count::__release_weak(v48);
                        }
                        if (v54) {
                          std::__shared_weak_count::__release_weak(v54);
                        }
                        if (v63) {
                          std::__shared_weak_count::__release_weak(v63);
                        }
                        goto LABEL_90;
                      }
                    }
                    _Block_release(v39);
                    goto LABEL_71;
                  }
                }
                memmove(v30, v27, (size_t)v29);
                goto LABEL_54;
              }
            }
            memmove(v22, v19, (size_t)v21);
            goto LABEL_38;
          }
        }
        else
        {
          size_t v18 = v59;
          if (!v59) {
            goto LABEL_28;
          }
        }
        CFRelease(v18);
        goto LABEL_28;
      }
    }
    memmove(p_dst, v8, v10);
    goto LABEL_17;
  }
LABEL_90:
  uint64_t v42 = v68;
  if (v68 && !atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
LABEL_93:
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C5AF9164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a23) {
    std::__shared_weak_count::__release_weak(a23);
  }
  if (a38) {
    std::__shared_weak_count::__release_weak(a38);
  }
  size_t v49 = *(std::__shared_weak_count **)(v47 - 160);
  if (v49)
  {
    std::__shared_weak_count::__release_weak(v49);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v47 - 112);
    std::__shared_weak_count::__release_weak(v46);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v47 - 112);
  std::__shared_weak_count::__release_weak(v46);
  _Unwind_Resume(a1);
}

void ___ZN12PowerManager5State10initializeEv_block_invoke_2(void *a1, void **a2, void **a3)
{
  long long v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    size_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      size_t v9 = v8;
      if (!a1[5])
      {
LABEL_12:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 1174405120;
      v12[2] = ___ZN12PowerManager5State10initializeEv_block_invoke_3;
      v12[3] = &__block_descriptor_tmp_43_1;
      size_t v10 = *a2;
      v12[4] = v7;
      xpc_object_t object = v10;
      if (v10)
      {
        xpc_retain(v10);
        int v11 = *a3;
        if (!*a3) {
          goto LABEL_9;
        }
      }
      else
      {
        xpc_object_t object = xpc_null_create();
        int v11 = *a3;
        if (!*a3)
        {
LABEL_9:
          aBlocunint64_t k = v11;
          ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped((uint64_t *)(v7 + 72), (uint64_t)v12);
          if (aBlock) {
            _Block_release(aBlock);
          }
          xpc_release(object);
          xpc_object_t object = 0;
          goto LABEL_12;
        }
      }
      int v11 = _Block_copy(v11);
      goto LABEL_9;
    }
  }
}

void ___ZN12PowerManager5State10initializeEv_block_invoke_3(void *a1)
{
  uint64_t v3 = a1[4];
  uint64_t v2 = (void *)a1[5];
  uint64_t v4 = *(void *)(v3 + 136);
  xpc_object_t object = v2;
  if (v2) {
    xpc_retain(v2);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  PowerStats::setPowerdownMessage(v4, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_object_t v5 = xpc_null_create();
  uint64_t v6 = a1[6];
  xpc_object_t v9 = v5;
  xpc_object_t v7 = xpc_null_create();
  (*(void (**)(uint64_t, void, xpc_object_t *))(v6 + 16))(v6, 0, &v9);
  xpc_release(v9);
  xpc_release(v7);
}

void sub_1C5AF94A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void ___ZN12PowerManager5State10initializeEv_block_invoke_48(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      xpc_object_t v5 = v4;
      if (a1[5]) {
        PowerStats::dumpState(*(os_log_t **)(v3 + 136));
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1C5AF95B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZN12PowerManager5State10initializeEv_block_invoke_53(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (void *)a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      xpc_object_t v5 = v4;
      uint64_t v6 = a1[5];
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
      }
      if (v6)
      {
        xpc_object_t v7 = (os_log_t *)v3[17];
        if (v7) {
          PowerStats::dumpState(v7);
        }
        size_t v8 = (void *)v3[25];
        if (v8 != v3 + 26)
        {
          do
          {
            xpc_object_t v9 = v3[5];
            if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
            {
              size_t v10 = v8 + 4;
              if (*((char *)v8 + 55) < 0) {
                size_t v10 = (void *)*v10;
              }
              *(_DWORD *)std::string buf = 136315138;
              size_t v20 = v10;
              _os_log_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEFAULT, "#I Pending power assertion '%s'", buf, 0xCu);
            }
            int v11 = (void *)v8[1];
            if (v11)
            {
              do
              {
                uint64_t v12 = v11;
                int v11 = (void *)*v11;
              }
              while (v11);
            }
            else
            {
              do
              {
                uint64_t v12 = (void *)v8[2];
                BOOL v13 = *v12 == (void)v8;
                size_t v8 = v12;
              }
              while (!v13);
            }
            size_t v8 = v12;
          }
          while (v12 != v3 + 26);
        }
        size_t v14 = (void *)v3[31];
        if (v14 != v3 + 32)
        {
          do
          {
            long long v15 = v3[5];
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
            {
              int v16 = v14 + 4;
              if (*((char *)v14 + 55) < 0) {
                int v16 = (void *)*v16;
              }
              *(_DWORD *)std::string buf = 136315138;
              size_t v20 = v16;
              _os_log_impl(&dword_1C59C6000, v15, OS_LOG_TYPE_DEFAULT, "#I Deferred work due to sleep '%s'", buf, 0xCu);
            }
            xpc_object_t v17 = (void *)v14[1];
            if (v17)
            {
              do
              {
                size_t v18 = v17;
                xpc_object_t v17 = (void *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                size_t v18 = (void *)v14[2];
                BOOL v13 = *v18 == (void)v14;
                size_t v14 = v18;
              }
              while (!v13);
            }
            size_t v14 = v18;
          }
          while (v18 != v3 + 32);
        }
      }
    }
  }
}

void ___ZN12PowerManager5State10initializeEv_block_invoke_57(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[5];
  if (!v3) {
    return;
  }
  xpc_object_t v5 = std::__shared_weak_count::lock(v3);
  size_t v20 = v5;
  if (!v5) {
    return;
  }
  uint64_t v6 = v5;
  uint64_t v19 = a1[4];
  if (!v19 || (uint64_t v7 = a1[6]) == 0)
  {
LABEL_18:
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    return;
  }
  size_t v8 = (const void *)*MEMORY[0x1E4F4C738];
  size_t v9 = strlen((const char *)*MEMORY[0x1E4F4C738]);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v10 = (void *)v9;
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    int v11 = (void **)operator new(v13 + 1);
    __dst[1] = v10;
    unint64_t v18 = v14 | 0x8000000000000000;
    __dst[0] = v11;
LABEL_13:
    memmove(v11, v8, (size_t)v10);
    *((unsigned char *)v10 + (void)v11) = 0;
    xpc_object_t v12 = *a2;
    int v16 = v12;
    if (v12) {
      goto LABEL_9;
    }
    goto LABEL_14;
  }
  HIBYTE(v18) = v9;
  int v11 = __dst;
  if (v9) {
    goto LABEL_13;
  }
  LOBYTE(__dst[0]) = 0;
  xpc_object_t v12 = *a2;
  int v16 = v12;
  if (v12)
  {
LABEL_9:
    xpc_retain(v12);
    goto LABEL_15;
  }
LABEL_14:
  xpc_object_t v12 = xpc_null_create();
  int v16 = v12;
LABEL_15:
  long long v15 = 0;
  ServiceManager::runCommand(v7, (uint64_t)__dst, &v16, &v15);
  xpc_release(v12);
  int v16 = 0;
  if (SHIBYTE(v18) < 0) {
    operator delete(__dst[0]);
  }
  uint64_t v6 = v20;
  if (v20) {
    goto LABEL_18;
  }
}

void sub_1C5AF99C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  xpc_release(v18);
  if (a17 < 0)
  {
    operator delete(__p);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE48c42_ZTSNSt3__110shared_ptrI14ServiceManagerEE(void *result, void *a2)
{
  uint64_t v2 = a2[5];
  result[4] = a2[4];
  result[5] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[7];
  result[6] = a2[6];
  result[7] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE48c42_ZTSNSt3__110shared_ptrI14ServiceManagerEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v3) {
      return;
    }
  }
  else
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v3) {
      return;
    }
  }

  std::__shared_weak_count::__release_weak(v3);
}

void ___ZN12PowerManager5State8shutdownEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = (std::__shared_weak_count *)v1[10];
  if (!v2 || (uint64_t v3 = v1[9], (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v5 = v4;
  uint64_t v6 = operator new(8uLL);
  void *v6 = v1;
  uint64_t v7 = v1[11];
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  size_t v8 = operator new(0x18uLL);
  *size_t v8 = v6;
  v8[1] = v3;
  v8[2] = v5;
  dispatch_async_f(v7, v8, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped<PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1}>(PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    size_t v9 = (std::__shared_weak_count *)v1[14];
    v1[13] = 0;
    v1[14] = 0;
    if (!v9) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    size_t v9 = (std::__shared_weak_count *)v1[14];
    v1[13] = 0;
    v1[14] = 0;
    if (!v9) {
      return;
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped<PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1}>(PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void **)*a1;
  uint64_t v4 = (void *)v3[25];
  xpc_object_t v5 = v3 + 26;
  if (v4 != v3 + 26)
  {
    do
    {
      uint64_t v6 = v3[5];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = v4 + 4;
        if (*((char *)v4 + 55) < 0) {
          uint64_t v7 = (void *)*v7;
        }
        *(_DWORD *)std::string buf = 136315138;
        xpc_object_t v17 = v7;
        _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#I Forcefully releasing power assertion '%s'", buf, 0xCu);
      }
      size_t v8 = (void *)v4[1];
      if (v8)
      {
        do
        {
          size_t v9 = v8;
          size_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          size_t v9 = (void *)v4[2];
          BOOL v10 = *v9 == (void)v4;
          uint64_t v4 = v9;
        }
        while (!v10);
      }
      uint64_t v4 = v9;
    }
    while (v9 != v5);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::destroy(v3[26]);
  uint64_t v11 = v3[29];
  v3[25] = v5;
  v3[26] = 0;
  v3[27] = 0;
  std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::destroy(v11);
  v3[28] = v3 + 29;
  v3[29] = 0;
  v3[30] = 0;
  *(unsigned char *)(v3[17] + 88) = 0;
  uint64_t v12 = v3[20];
  if (v12)
  {
    uint64_t v13 = v3[5];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_DEFAULT, "#I No more assertions held, acknowledging previous notification", buf, 2u);
      uint64_t v12 = v3[20];
    }
    (*(void (**)(uint64_t, uint64_t))(v12 + 16))(v12, 1);
    uint64_t v14 = (const void *)v3[20];
    v3[20] = 0;
    if (v14) {
      _Block_release(v14);
    }
  }
  operator delete(v2);
  long long v15 = (std::__shared_weak_count *)a1[2];
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }

  operator delete(a1);
}

void sub_1C5AF9E58(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<PowerManager *,std::shared_ptr<PowerManager>::__shared_ptr_default_delete<PowerManager,PowerManager>,std::allocator<PowerManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<PowerManager *,std::shared_ptr<PowerManager>::__shared_ptr_default_delete<PowerManager,PowerManager>,std::allocator<PowerManager>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<PowerManager *,std::shared_ptr<PowerManager>::__shared_ptr_default_delete<PowerManager,PowerManager>,std::allocator<PowerManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C5BC9E57) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C5BC9E57 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C5BC9E57)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C5BC9E57 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

const char *IOPortUSBCAccessoriesDelegate::getName(IOPortUSBCAccessoriesDelegate *this)
{
  return "IOPortUSBCAccessories.delegate";
}

uint64_t IOPortUSBCAccessoriesDelegate::create@<X0>(void *a1@<X0>, NSObject **a2@<X1>, std::__shared_weak_count_vtbl **a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int v16 = 0;
  xpc_object_t v17 = 0;
  uint64_t v6 = (std::__shared_weak_count_vtbl *)operator new(0x70uLL);
  uint64_t v7 = a1[3];
  if (!v7) {
    goto LABEL_4;
  }
  if ((void *)v7 != a1)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
LABEL_4:
    uint64_t v19 = (void *)v7;
    goto LABEL_6;
  }
  uint64_t v19 = v18;
  (*(void (**)(void *, void *))(*a1 + 24))(a1, v18);
LABEL_6:
  size_t v8 = *a2;
  long long v15 = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  IOPortUSBCAccessoriesDelegate::IOPortUSBCAccessoriesDelegate(v6, v18, &v15);
  uint64_t v11 = (std::__shared_weak_count *)operator new(0x20uLL);
  v11->__shared_owners_ = 0;
  p_shared_owners = &v11->__shared_owners_;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210C008;
  v11->__shared_weak_owners_ = 0;
  v11[1].__vftable = v6;
  on_zero_shared = (std::__shared_weak_count *)v6->__on_zero_shared;
  if (!on_zero_shared)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
    v6->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (on_zero_shared->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
    v6->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
    std::__shared_weak_count::__release_weak(on_zero_shared);
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_13:
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
LABEL_14:
  int v16 = v6;
  xpc_object_t v17 = v11;
  if (v8) {
    dispatch_release(v8);
  }
  if (v19 == v18)
  {
    (*(void (**)(void *))(v18[0] + 32))(v18);
  }
  else if (v19)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*v19 + 40))(v19, v9, v10);
  }
  uint64_t result = (*((uint64_t (**)(std::__shared_weak_count_vtbl *))v6->~__shared_weak_count + 7))(v6);
  *a3 = v6;
  a3[1] = (std::__shared_weak_count_vtbl *)v11;
  return result;
}

void sub_1C5AFA31C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  operator delete(v12);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void *std::function<void ()(ctu::cf::CFSharedRef<__CFError>,std::vector<abm::AccessoryInfo>)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void *IOPortUSBCAccessoriesDelegate::IOPortUSBCAccessoriesDelegate(void *a1, void *a2, NSObject **a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  *a1 = &unk_1F210BF70;
  xpc_object_t v5 = (void *)a2[3];
  if (v5)
  {
    if (v5 == a2)
    {
      uint64_t v11 = v10;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v10);
    }
    else
    {
      uint64_t v11 = (void *)(*(uint64_t (**)(void *))(*v5 + 16))(v5);
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v6 = *a3;
  uint64_t v9 = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  uint64_t v7 = (char *)(*(uint64_t (**)(void *))(*a1 + 16))(a1);
  AccessoriesDelegateBase::AccessoriesDelegateBase((uint64_t)a1, (uint64_t)v10, &v9, v7);
  if (v6) {
    dispatch_release(v6);
  }
  if (v11 == v10)
  {
    (*(void (**)(void *))(v10[0] + 32))(v10);
  }
  else if (v11)
  {
    (*(void (**)(void *))(*v11 + 40))(v11);
  }
  *a1 = &unk_1F210BF70;
  a1[11] = 0;
  a1[12] = 0;
  return a1;
}

void sub_1C5AFA61C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    dispatch_release(v10);
  }
  std::function<void ()(ctu::cf::CFSharedRef<__CFError>,std::vector<abm::AccessoryInfo>)>::~function(&a10);
  _Unwind_Resume(a1);
}

void IOPortUSBCAccessoriesDelegate::~IOPortUSBCAccessoriesDelegate(std::__shared_weak_count **this)
{
  uint64_t v1 = (IOPortUSBCAccessoriesDelegate *)this;
  *this = (std::__shared_weak_count *)&unk_1F210BF70;
  uint64_t v2 = this[12];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    this = (std::__shared_weak_count **)v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  AccessoriesDelegateBase::~AccessoriesDelegateBase((AccessoriesDelegateBase *)this);
}

{
  IOPortUSBCAccessoriesDelegate *v1;
  std::__shared_weak_count *v2;
  uint64_t vars8;

  uint64_t v1 = (IOPortUSBCAccessoriesDelegate *)this;
  *this = (std::__shared_weak_count *)&unk_1F210BF70;
  uint64_t v2 = this[12];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    this = (std::__shared_weak_count **)v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  AccessoriesDelegateBase::~AccessoriesDelegateBase((AccessoriesDelegateBase *)this);
}

void IOPortUSBCAccessoriesDelegate::~IOPortUSBCAccessoriesDelegate(IOPortUSBCAccessoriesDelegate *this)
{
  *(void *)this = &unk_1F210BF70;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    AccessoriesDelegateBase::~AccessoriesDelegateBase(this);
  }
  else
  {
    AccessoriesDelegateBase::~AccessoriesDelegateBase(this);
  }
  operator delete(v3);
}

void IOPortUSBCAccessoriesDelegate::start(IOPortUSBCAccessoriesDelegate *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___ZN29IOPortUSBCAccessoriesDelegate5startEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_5_1;
  v1[4] = this;
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

void ___ZN29IOPortUSBCAccessoriesDelegate5startEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v1 + 80))
  {
    uint64_t v2 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Starting", buf, 2u);
    }
    *(unsigned char *)(v1 + 80) = 1;
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
    if (!v3 || (v4 = *(void *)(v1 + 8), (xpc_object_t v5 = std::__shared_weak_count::lock(v3)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v7 = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v7);
    }
    size_t v8 = *(NSObject **)(v1 + 24);
    dispatch_object_t v20 = v8;
    if (v8) {
      dispatch_retain(v8);
    }
    v9.fObj.fObj = (dispatch_object_s *)"com.apple.telephony.abm";
    ctu::iokit::IOPortUSBCController::create((uint64_t *)buf, (ctu::iokit::IOPortUSBCController *)&v20, v9, "IOPortUSBCAccessories.delegate", v6);
    long long v10 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    uint64_t v11 = *(std::__shared_weak_count **)(v1 + 96);
    *(_OWORD *)(v1 + 88) = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    if (v20) {
      dispatch_release(v20);
    }
    if (*(void *)(v1 + 88))
    {
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 1174405120;
      v16[2] = ___ZN29IOPortUSBCAccessoriesDelegate5startEv_block_invoke_2;
      void v16[3] = &__block_descriptor_tmp_34;
      v16[4] = v1;
      v16[5] = v4;
      xpc_object_t v17 = v7;
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v13 = _Block_copy(v16);
      uint64_t v14 = *(NSObject **)(v1 + 24);
      if (v14) {
        dispatch_retain(v14);
      }
      aBlocunint64_t k = v13;
      dispatch_object_t object = v14;
      ctu::iokit::IOPortUSBCController::registerCallback();
      if (object) {
        dispatch_release(object);
      }
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (v17) {
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    else
    {
      long long v15 = *(NSObject **)(v1 + 40);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_error_impl(&dword_1C59C6000, v15, OS_LOG_TYPE_ERROR, "Failed to create IOPort Controller!", buf, 2u);
      }
    }
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_1C5AFABB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16)
{
  dispatch::callback<void({block_pointer})(ctu::iokit::USBCAccessory)>::~callback((uint64_t)&a16);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    std::__shared_weak_count::__release_weak(v16);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v16);
  _Unwind_Resume(a1);
}

void ___ZN29IOPortUSBCAccessoriesDelegate5startEv_block_invoke_2(void *a1, int a2)
{
  *(void *)&v103[5] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      queue v9 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        ctu::iokit::IOPortUSBCController::asString();
        long long v10 = (v101 & 0x8000000000000000) == 0 ? &__p : (void **)__p;
        *(_DWORD *)std::string buf = 136315138;
        *(void *)std::string::size_type v103 = v10;
        _os_log_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEFAULT, "#I Detected Accessory: %s\n", buf, 0xCu);
        if (SHIBYTE(v101) < 0) {
          operator delete(__p);
        }
      }
      if (*(void *)(v5 + 72))
      {
        std::string __p = 0;
        unint64_t v100 = 0;
        unint64_t v101 = 0;
        if (ctu::iokit::operator&())
        {
          uint64_t v11 = v100;
          if ((unint64_t)v100 < v101)
          {
            uint64_t v12 = 131089;
LABEL_20:
            *(void *)uint64_t v11 = v12;
            *((_DWORD *)v11 + 2) = 0x20000;
            uint64_t v13 = v11 + 12;
LABEL_50:
            unint64_t v100 = v13;
            int v19 = 1;
LABEL_51:
            if (ctu::iokit::operator&())
            {
              uint64_t v31 = v100;
              if ((unint64_t)v100 < v101)
              {
                uint64_t v32 = 131090;
LABEL_57:
                *(void *)uint64_t v31 = v32;
                *((_DWORD *)v31 + 2) = 0x20000;
                size_t v33 = v31 + 12;
LABEL_86:
                unint64_t v100 = v33;
                int v19 = 1;
LABEL_87:
                if (ctu::iokit::operator&())
                {
                  dispatch_object_t v50 = v100;
                  if ((unint64_t)v100 < v101)
                  {
                    uint64_t v51 = 131091;
LABEL_93:
                    *(void *)dispatch_object_t v50 = v51;
                    *((_DWORD *)v50 + 2) = 0x20000;
                    unint64_t v52 = v50 + 12;
LABEL_122:
                    unint64_t v100 = v52;
                    int v19 = 1;
LABEL_123:
                    if (ctu::iokit::operator&())
                    {
                      std::string::size_type v69 = v100;
                      if ((unint64_t)v100 < v101)
                      {
                        uint64_t v70 = 131092;
LABEL_129:
                        *(void *)std::string::size_type v69 = v70;
                        v69[2] = 0x20000;
                        CFTypeRef v71 = (char *)(v69 + 3);
                        goto LABEL_163;
                      }
                      uint64_t v72 = __p;
                      unint64_t v73 = 0xAAAAAAAAAAAAAAABLL * ((v100 - (unsigned char *)__p) >> 2);
                      unint64_t v74 = v73 + 1;
                      if (v73 + 1 > 0x1555555555555555) {
                        std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
                      }
                      if (0x5555555555555556 * ((uint64_t)(v101 - (void)__p) >> 2) > v74) {
                        unint64_t v74 = 0x5555555555555556 * ((uint64_t)(v101 - (void)__p) >> 2);
                      }
                      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101 - (void)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                        unint64_t v75 = 0x1555555555555555;
                      }
                      else {
                        unint64_t v75 = v74;
                      }
                      if (v75)
                      {
                        if (v75 > 0x1555555555555555) {
                          std::__throw_bad_array_new_length[abi:ne180100]();
                        }
                        uint64_t v76 = (char *)operator new(12 * v75);
                      }
                      else
                      {
                        uint64_t v76 = 0;
                      }
                      uint64_t v84 = &v76[12 * v73];
                      xpc_object_t v85 = &v76[12 * v75];
                      *(void *)uint64_t v84 = 131092;
                      *((_DWORD *)v84 + 2) = 0x20000;
                      CFTypeRef v71 = v84 + 12;
                      if (v69 != v72)
                      {
                        do
                        {
                          uint64_t v86 = *(void *)(v69 - 3);
                          v69 -= 3;
                          int v87 = v69[2];
                          *(void *)(v84 - 12) = v86;
                          v84 -= 12;
                          *((_DWORD *)v84 + 2) = v87;
                        }
                        while (v69 != v72);
LABEL_160:
                        std::string::size_type v69 = __p;
                      }
                    }
                    else
                    {
                      if (!ctu::iokit::operator&())
                      {
                        if (!v19)
                        {
                          int v88 = *(NSObject **)(v5 + 40);
                          if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
                          {
                            int v89 = *(_DWORD *)(v5 + 104);
                            *(_DWORD *)std::string buf = 67109376;
                            v103[0] = v89;
                            LOWORD(v103[1]) = 1024;
                            *(_DWORD *)((char *)&v103[1] + 2) = a2;
                            _os_log_error_impl(&dword_1C59C6000, v88, OS_LOG_TYPE_ERROR, "Failed to parse bitmask (current: 0x%x, received: 0x%x)", buf, 0xEu);
                          }
                          goto LABEL_171;
                        }
                        *(_DWORD *)(v5 + 104) = a2;
                        uint64_t v97 = 0;
                        CFTypeRef cf = 0;
                        int v95 = 0;
                        int v96 = 0;
                        char v77 = __p;
                        int64_t v78 = v100 - (unsigned char *)__p;
                        if (v100 != __p) {
                          goto LABEL_164;
                        }
                        goto LABEL_166;
                      }
                      std::string::size_type v69 = v100;
                      if ((unint64_t)v100 < v101)
                      {
                        uint64_t v70 = 65556;
                        goto LABEL_129;
                      }
                      uint64_t v79 = __p;
                      unint64_t v80 = 0xAAAAAAAAAAAAAAABLL * ((v100 - (unsigned char *)__p) >> 2);
                      unint64_t v81 = v80 + 1;
                      if (v80 + 1 > 0x1555555555555555) {
                        std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
                      }
                      if (0x5555555555555556 * ((uint64_t)(v101 - (void)__p) >> 2) > v81) {
                        unint64_t v81 = 0x5555555555555556 * ((uint64_t)(v101 - (void)__p) >> 2);
                      }
                      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101 - (void)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                        unint64_t v82 = 0x1555555555555555;
                      }
                      else {
                        unint64_t v82 = v81;
                      }
                      if (v82)
                      {
                        if (v82 > 0x1555555555555555) {
                          std::__throw_bad_array_new_length[abi:ne180100]();
                        }
                        char v83 = (char *)operator new(12 * v82);
                      }
                      else
                      {
                        char v83 = 0;
                      }
                      uint64_t v84 = &v83[12 * v80];
                      xpc_object_t v85 = &v83[12 * v82];
                      *(void *)uint64_t v84 = 65556;
                      *((_DWORD *)v84 + 2) = 0x20000;
                      CFTypeRef v71 = v84 + 12;
                      if (v69 != v79)
                      {
                        do
                        {
                          uint64_t v90 = *(void *)(v69 - 3);
                          v69 -= 3;
                          int v91 = v69[2];
                          *(void *)(v84 - 12) = v90;
                          v84 -= 12;
                          *((_DWORD *)v84 + 2) = v91;
                        }
                        while (v69 != v79);
                        goto LABEL_160;
                      }
                    }
                    std::string __p = v84;
                    unint64_t v100 = v71;
                    unint64_t v101 = (unint64_t)v85;
                    if (v69) {
                      operator delete(v69);
                    }
LABEL_163:
                    unint64_t v100 = v71;
                    *(_DWORD *)(v5 + 104) = a2;
                    uint64_t v97 = 0;
                    CFTypeRef cf = 0;
                    int v95 = 0;
                    int v96 = 0;
                    char v77 = __p;
                    int64_t v78 = v71 - (unsigned char *)__p;
                    if (v71 != __p)
                    {
LABEL_164:
                      if (0xAAAAAAAAAAAAAAABLL * (v78 >> 2) > 0x1555555555555555) {
                        std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
                      }
                      long long v92 = (char *)operator new(v78);
                      size_t v93 = &v92[4 * (v78 >> 2)];
                      int v95 = v92;
                      uint64_t v97 = v93;
                      memcpy(v92, v77, v78);
                      int v96 = v93;
                    }
LABEL_166:
                    uint64_t v94 = *(void *)(v5 + 72);
                    if (!v94) {
                      std::__throw_bad_function_call[abi:ne180100]();
                    }
                    (*(void (**)(uint64_t, CFTypeRef *, void **))(*(void *)v94 + 48))(v94, &cf, &v95);
                    if (v95)
                    {
                      int v96 = v95;
                      operator delete(v95);
                    }
                    if (cf) {
                      CFRelease(cf);
                    }
LABEL_171:
                    if (__p)
                    {
                      unint64_t v100 = (char *)__p;
                      operator delete(__p);
                    }
                    return;
                  }
                  std::string v53 = (char *)__p;
                  unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * ((v100 - (unsigned char *)__p) >> 2);
                  unint64_t v55 = v54 + 1;
                  if (v54 + 1 > 0x1555555555555555) {
                    std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
                  }
                  if (0x5555555555555556 * ((uint64_t)(v101 - (void)__p) >> 2) > v55) {
                    unint64_t v55 = 0x5555555555555556 * ((uint64_t)(v101 - (void)__p) >> 2);
                  }
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101 - (void)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                    unint64_t v56 = 0x1555555555555555;
                  }
                  else {
                    unint64_t v56 = v55;
                  }
                  if (v56)
                  {
                    if (v56 > 0x1555555555555555) {
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    }
                    long long v57 = (char *)operator new(12 * v56);
                  }
                  else
                  {
                    long long v57 = 0;
                  }
                  std::string::size_type v63 = &v57[12 * v54];
                  uint64_t v64 = &v57[12 * v56];
                  *(void *)std::string::size_type v63 = 131091;
                  *((_DWORD *)v63 + 2) = 0x20000;
                  unint64_t v52 = v63 + 12;
                  if (v50 != v53)
                  {
                    do
                    {
                      uint64_t v65 = *(void *)(v50 - 12);
                      v50 -= 12;
                      int v66 = *((_DWORD *)v50 + 2);
                      *(void *)(v63 - 12) = v65;
                      v63 -= 12;
                      *((_DWORD *)v63 + 2) = v66;
                    }
                    while (v50 != v53);
LABEL_119:
                    dispatch_object_t v50 = (char *)__p;
                  }
                }
                else
                {
                  if (!ctu::iokit::operator&()) {
                    goto LABEL_123;
                  }
                  dispatch_object_t v50 = v100;
                  if ((unint64_t)v100 < v101)
                  {
                    uint64_t v51 = 65555;
                    goto LABEL_93;
                  }
                  unint64_t v58 = (char *)__p;
                  unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * ((v100 - (unsigned char *)__p) >> 2);
                  unint64_t v60 = v59 + 1;
                  if (v59 + 1 > 0x1555555555555555) {
                    std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
                  }
                  if (0x5555555555555556 * ((uint64_t)(v101 - (void)__p) >> 2) > v60) {
                    unint64_t v60 = 0x5555555555555556 * ((uint64_t)(v101 - (void)__p) >> 2);
                  }
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101 - (void)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                    unint64_t v61 = 0x1555555555555555;
                  }
                  else {
                    unint64_t v61 = v60;
                  }
                  if (v61)
                  {
                    if (v61 > 0x1555555555555555) {
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    }
                    unint64_t v62 = (char *)operator new(12 * v61);
                  }
                  else
                  {
                    unint64_t v62 = 0;
                  }
                  std::string::size_type v63 = &v62[12 * v59];
                  uint64_t v64 = &v62[12 * v61];
                  *(void *)std::string::size_type v63 = 65555;
                  *((_DWORD *)v63 + 2) = 0x20000;
                  unint64_t v52 = v63 + 12;
                  if (v50 != v58)
                  {
                    do
                    {
                      uint64_t v67 = *(void *)(v50 - 12);
                      v50 -= 12;
                      int v68 = *((_DWORD *)v50 + 2);
                      *(void *)(v63 - 12) = v67;
                      v63 -= 12;
                      *((_DWORD *)v63 + 2) = v68;
                    }
                    while (v50 != v58);
                    goto LABEL_119;
                  }
                }
                std::string __p = v63;
                unint64_t v100 = v52;
                unint64_t v101 = (unint64_t)v64;
                if (v50) {
                  operator delete(v50);
                }
                goto LABEL_122;
              }
              xpc_object_t v34 = (char *)__p;
              unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((v100 - (unsigned char *)__p) >> 2);
              unint64_t v36 = v35 + 1;
              if (v35 + 1 > 0x1555555555555555) {
                std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * ((uint64_t)(v101 - (void)__p) >> 2) > v36) {
                unint64_t v36 = 0x5555555555555556 * ((uint64_t)(v101 - (void)__p) >> 2);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101 - (void)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v37 = 0x1555555555555555;
              }
              else {
                unint64_t v37 = v36;
              }
              if (v37)
              {
                if (v37 > 0x1555555555555555) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                size_t v38 = (char *)operator new(12 * v37);
              }
              else
              {
                size_t v38 = 0;
              }
              size_t v44 = &v38[12 * v35];
              uint64_t v45 = &v38[12 * v37];
              *(void *)size_t v44 = 131090;
              *((_DWORD *)v44 + 2) = 0x20000;
              size_t v33 = v44 + 12;
              if (v31 != v34)
              {
                do
                {
                  uint64_t v46 = *(void *)(v31 - 12);
                  v31 -= 12;
                  int v47 = *((_DWORD *)v31 + 2);
                  *(void *)(v44 - 12) = v46;
                  v44 -= 12;
                  *((_DWORD *)v44 + 2) = v47;
                }
                while (v31 != v34);
LABEL_83:
                uint64_t v31 = (char *)__p;
              }
            }
            else
            {
              if (!ctu::iokit::operator&()) {
                goto LABEL_87;
              }
              uint64_t v31 = v100;
              if ((unint64_t)v100 < v101)
              {
                uint64_t v32 = 65554;
                goto LABEL_57;
              }
              size_t v39 = (char *)__p;
              unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((v100 - (unsigned char *)__p) >> 2);
              unint64_t v41 = v40 + 1;
              if (v40 + 1 > 0x1555555555555555) {
                std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * ((uint64_t)(v101 - (void)__p) >> 2) > v41) {
                unint64_t v41 = 0x5555555555555556 * ((uint64_t)(v101 - (void)__p) >> 2);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101 - (void)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v42 = 0x1555555555555555;
              }
              else {
                unint64_t v42 = v41;
              }
              if (v42)
              {
                if (v42 > 0x1555555555555555) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                size_t v43 = (char *)operator new(12 * v42);
              }
              else
              {
                size_t v43 = 0;
              }
              size_t v44 = &v43[12 * v40];
              uint64_t v45 = &v43[12 * v42];
              *(void *)size_t v44 = 65554;
              *((_DWORD *)v44 + 2) = 0x20000;
              size_t v33 = v44 + 12;
              if (v31 != v39)
              {
                do
                {
                  uint64_t v48 = *(void *)(v31 - 12);
                  v31 -= 12;
                  int v49 = *((_DWORD *)v31 + 2);
                  *(void *)(v44 - 12) = v48;
                  v44 -= 12;
                  *((_DWORD *)v44 + 2) = v49;
                }
                while (v31 != v39);
                goto LABEL_83;
              }
            }
            std::string __p = v44;
            unint64_t v100 = v33;
            unint64_t v101 = (unint64_t)v45;
            if (v31) {
              operator delete(v31);
            }
            goto LABEL_86;
          }
          uint64_t v14 = (char *)__p;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v100 - (unsigned char *)__p) >> 2);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0x1555555555555555) {
            std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v101 - (void)__p) >> 2) > v16) {
            unint64_t v16 = 0x5555555555555556 * ((uint64_t)(v101 - (void)__p) >> 2);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101 - (void)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v17 = 0x1555555555555555;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17)
          {
            if (v17 > 0x1555555555555555) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v18 = (char *)operator new(12 * v17);
          }
          else
          {
            uint64_t v18 = 0;
          }
          uint64_t v25 = &v18[12 * v15];
          uint64_t v26 = &v18[12 * v17];
          *(void *)uint64_t v25 = 131089;
          *((_DWORD *)v25 + 2) = 0x20000;
          uint64_t v13 = v25 + 12;
          if (v11 != v14)
          {
            do
            {
              uint64_t v27 = *(void *)(v11 - 12);
              v11 -= 12;
              int v28 = *((_DWORD *)v11 + 2);
              *(void *)(v25 - 12) = v27;
              v25 -= 12;
              *((_DWORD *)v25 + 2) = v28;
            }
            while (v11 != v14);
LABEL_47:
            uint64_t v11 = (char *)__p;
          }
        }
        else
        {
          if (!ctu::iokit::operator&())
          {
            int v19 = 0;
            goto LABEL_51;
          }
          uint64_t v11 = v100;
          if ((unint64_t)v100 < v101)
          {
            uint64_t v12 = 65553;
            goto LABEL_20;
          }
          dispatch_object_t v20 = (char *)__p;
          unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((v100 - (unsigned char *)__p) >> 2);
          unint64_t v22 = v21 + 1;
          if (v21 + 1 > 0x1555555555555555) {
            std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v101 - (void)__p) >> 2) > v22) {
            unint64_t v22 = 0x5555555555555556 * ((uint64_t)(v101 - (void)__p) >> 2);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101 - (void)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v23 = 0x1555555555555555;
          }
          else {
            unint64_t v23 = v22;
          }
          if (v23)
          {
            if (v23 > 0x1555555555555555) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v24 = (char *)operator new(12 * v23);
          }
          else
          {
            uint64_t v24 = 0;
          }
          uint64_t v25 = &v24[12 * v21];
          uint64_t v26 = &v24[12 * v23];
          *(void *)uint64_t v25 = 65553;
          *((_DWORD *)v25 + 2) = 0x20000;
          uint64_t v13 = v25 + 12;
          if (v11 != v20)
          {
            do
            {
              uint64_t v29 = *(void *)(v11 - 12);
              v11 -= 12;
              int v30 = *((_DWORD *)v11 + 2);
              *(void *)(v25 - 12) = v29;
              v25 -= 12;
              *((_DWORD *)v25 + 2) = v30;
            }
            while (v11 != v20);
            goto LABEL_47;
          }
        }
        std::string __p = v25;
        unint64_t v100 = v13;
        unint64_t v101 = (unint64_t)v26;
        if (v11) {
          operator delete(v11);
        }
        goto LABEL_50;
      }
    }
  }
}

void sub_1C5AFB6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c48_ZTSNSt3__18weak_ptrI23AccessoriesDelegateBaseEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c48_ZTSNSt3__18weak_ptrI23AccessoriesDelegateBaseEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t dispatch::callback<void({block_pointer})(ctu::iokit::USBCAccessory)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void IOPortUSBCAccessoriesDelegate::stop(IOPortUSBCAccessoriesDelegate *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___ZN29IOPortUSBCAccessoriesDelegate4stopEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_6_1;
  v1[4] = this;
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

void ___ZN29IOPortUSBCAccessoriesDelegate4stopEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(NSObject **)(v1 + 40);
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Stopping", buf, 2u);
    }
    uint64_t v6 = (void *)(v1 + 88);
    uint64_t v5 = *(void *)(v1 + 88);
    *(unsigned char *)(v1 + 80) = 0;
    if (v5)
    {
      uint64_t v7 = *(std::__shared_weak_count **)(v1 + 96);
      *(void *)(v1 + 88) = 0;
      *(void *)(v1 + 96) = 0;
      if (v7)
      {
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        uint64_t v8 = *(std::__shared_weak_count **)(v1 + 96);
        void *v6 = 0;
        *(void *)(v1 + 96) = 0;
        if (v8)
        {
          if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
      else
      {
        void *v6 = 0;
        *(void *)(v1 + 96) = 0;
      }
    }
  }
  else if (v4)
  {
    *(_WORD *)queue v9 = 0;
    _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Already stopped", v9, 2u);
  }
}

void std::__shared_ptr_pointer<IOPortUSBCAccessoriesDelegate *,std::shared_ptr<IOPortUSBCAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<IOPortUSBCAccessoriesDelegate>(IOPortUSBCAccessoriesDelegate*)::{lambda(IOPortUSBCAccessoriesDelegate *)#1},std::allocator<IOPortUSBCAccessoriesDelegate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<IOPortUSBCAccessoriesDelegate *,std::shared_ptr<IOPortUSBCAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<IOPortUSBCAccessoriesDelegate>(IOPortUSBCAccessoriesDelegate*)::{lambda(IOPortUSBCAccessoriesDelegate *)#1},std::allocator<IOPortUSBCAccessoriesDelegate>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<IOPortUSBCAccessoriesDelegate *,std::shared_ptr<IOPortUSBCAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<IOPortUSBCAccessoriesDelegate>(IOPortUSBCAccessoriesDelegate*)::{lambda(IOPortUSBCAccessoriesDelegate *)#1},std::allocator<IOPortUSBCAccessoriesDelegate>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI29IOPortUSBCAccessoriesDel"
                     "egateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI29IOPortUSBCAcc"
                                "essoriesDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI29IOPortUSBCAccessoriesDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI29IOPortUSBCAccessoriesDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<IOPortUSBCAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<IOPortUSBCAccessoriesDelegate>(IOPortUSBCAccessoriesDelegate*)::{lambda(IOPortUSBCAccessoriesDelegate*)#1}::operator() const(IOPortUSBCAccessoriesDelegate*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F210C050;
  void block[5] = v5;
  uint64_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = a2;
  dispatch_async(v8, block);
  long long v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c52_ZTSNSt3__110shared_ptrIK23AccessoriesDelegateBaseEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c52_ZTSNSt3__110shared_ptrIK23AccessoriesDelegateBaseEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

capabilities::radio *radio::HealthService::HealthService(capabilities::radio *a1, uint64_t a2, uint64_t a3, const void **a4)
{
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  capabilities::radio::maverick(a1);
  uint64_t v6 = *(void *)a1;
  if (*(void *)a1)
  {
    uint64_t v7 = *a4;
    if (v7) {
      CFRetain(v7);
    }
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1174405120;
    uint64_t v9[2] = ___ZN5radio13HealthService5State5startEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
    v9[3] = &__block_descriptor_tmp_35;
    v9[4] = v6;
    CFTypeRef cf = v7;
    if (v7) {
      CFRetain(v7);
    }
    ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped((uint64_t *)(v6 + 72), (uint64_t)v9);
    if (cf) {
      CFRelease(cf);
    }
    if (v7) {
      CFRelease(v7);
    }
  }
  return a1;
}

void sub_1C5AFBD5C(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void radio::HealthService::State::start(uint64_t a1, const void **a2)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 1174405120;
  v4[2] = ___ZN5radio13HealthService5State5startEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v4[3] = &__block_descriptor_tmp_35;
  unint64_t v3 = *a2;
  v4[4] = a1;
  CFTypeRef cf = v3;
  if (v3) {
    CFRetain(v3);
  }
  ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v4);
  if (cf) {
    CFRelease(cf);
  }
}

void radio::HealthService::reportDataStats(radio::HealthService *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 0x40000000;
    v2[2] = ___ZN5radio13HealthService5State15reportDataStatsEv_block_invoke;
    v2[3] = &__block_descriptor_tmp_5_2;
    v2[4] = v1;
    ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped((uint64_t *)(v1 + 72), (uint64_t)v2);
  }
}

void radio::HealthService::State::reportDataStats(radio::HealthService::State *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___ZN5radio13HealthService5State15reportDataStatsEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_5_2;
  v1[4] = this;
  ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void radio::HealthService::reset(radio::HealthService *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 0x40000000;
    v2[2] = ___ZN5radio13HealthService5State5resetEv_block_invoke;
    v2[3] = &__block_descriptor_tmp_6_2;
    v2[4] = v1;
    ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped((uint64_t *)(v1 + 72), (uint64_t)v2);
  }
}

void radio::HealthService::State::reset(radio::HealthService::State *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___ZN5radio13HealthService5State5resetEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_6_2;
  v1[4] = this;
  ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void radio::HealthService::enterLowPower(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    if (*(void *)a2)
    {
      BOOL v4 = _Block_copy(*(const void **)a2);
      uint64_t v5 = *(NSObject **)(a2 + 8);
      queue v9 = v4;
      long long v10 = v5;
      if (v5) {
        goto LABEL_4;
      }
    }
    else
    {
      BOOL v4 = 0;
      uint64_t v5 = *(NSObject **)(a2 + 8);
      queue v9 = 0;
      long long v10 = v5;
      if (v5)
      {
LABEL_4:
        dispatch_retain(v5);
        radio::HealthService::State::enterLowPower(v3, (uint64_t)&v9);
        dispatch_release(v5);
        if (!v4) {
          return;
        }
LABEL_10:
        _Block_release(v4);
        return;
      }
    }
    radio::HealthService::State::enterLowPower(v3, (uint64_t)&v9);
    if (!v4) {
      return;
    }
    goto LABEL_10;
  }
  if (*(void *)a2) {
    uint64_t v6 = _Block_copy(*(const void **)a2);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(NSObject **)(a2 + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_30_1;
  if (!v6)
  {
    aBlocunint64_t k = 0;
    dispatch_async(v7, block);
    uint64_t v8 = aBlock;
    if (!aBlock) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  aBlocunint64_t k = _Block_copy(v6);
  dispatch_async(v7, block);
  uint64_t v8 = aBlock;
  if (aBlock) {
LABEL_16:
  }
    _Block_release(v8);
LABEL_17:
  if (v6) {
    _Block_release(v6);
  }
}

void radio::HealthService::State::enterLowPower(uint64_t a1, uint64_t a2)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN5radio13HealthService5State13enterLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_17_3;
  v7[4] = a1;
  BOOL v4 = *(void **)a2;
  if (*(void *)a2) {
    BOOL v4 = _Block_copy(v4);
  }
  uint64_t v5 = (uint64_t *)(a1 + 72);
  uint64_t v6 = *(NSObject **)(a2 + 8);
  aBlocunint64_t k = v4;
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped(v5, (uint64_t)v7);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void radio::HealthService::exitLowPower(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    if (*(void *)a2)
    {
      BOOL v4 = _Block_copy(*(const void **)a2);
      uint64_t v5 = *(NSObject **)(a2 + 8);
      queue v9 = v4;
      long long v10 = v5;
      if (v5) {
        goto LABEL_4;
      }
    }
    else
    {
      BOOL v4 = 0;
      uint64_t v5 = *(NSObject **)(a2 + 8);
      queue v9 = 0;
      long long v10 = v5;
      if (v5)
      {
LABEL_4:
        dispatch_retain(v5);
        radio::HealthService::State::exitLowPower(v3, (uint64_t)&v9);
        dispatch_release(v5);
        if (!v4) {
          return;
        }
LABEL_10:
        _Block_release(v4);
        return;
      }
    }
    radio::HealthService::State::exitLowPower(v3, (uint64_t)&v9);
    if (!v4) {
      return;
    }
    goto LABEL_10;
  }
  if (*(void *)a2) {
    uint64_t v6 = _Block_copy(*(const void **)a2);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(NSObject **)(a2 + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_30_1;
  if (!v6)
  {
    aBlocunint64_t k = 0;
    dispatch_async(v7, block);
    uint64_t v8 = aBlock;
    if (!aBlock) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  aBlocunint64_t k = _Block_copy(v6);
  dispatch_async(v7, block);
  uint64_t v8 = aBlock;
  if (aBlock) {
LABEL_16:
  }
    _Block_release(v8);
LABEL_17:
  if (v6) {
    _Block_release(v6);
  }
}

void radio::HealthService::State::exitLowPower(uint64_t a1, uint64_t a2)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN5radio13HealthService5State12exitLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_23_5;
  v7[4] = a1;
  BOOL v4 = *(void **)a2;
  if (*(void *)a2) {
    BOOL v4 = _Block_copy(v4);
  }
  uint64_t v5 = (uint64_t *)(a1 + 72);
  uint64_t v6 = *(NSObject **)(a2 + 8);
  aBlocunint64_t k = v4;
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped(v5, (uint64_t)v7);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void radio::HealthService::State::~State(radio::HealthService::State *this)
{
  *(void *)this = &unk_1F210C090;
  uint64_t v2 = *((void *)this + 24);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Stopped data reporting", v11, 2u);
      uint64_t v2 = *((void *)this + 24);
    }
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 24));
    *((void *)this + 24) = 0;
  }
  std::__tree<std::string>::destroy((uint64_t)this + 168, *((char **)this + 22));
  BOOL v4 = (std::__shared_weak_count *)*((void *)this + 20);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 18);
    if (!v5) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 18);
    if (!v5) {
      goto LABEL_11;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 14);
    if (!v7) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 14);
    if (!v7) {
      goto LABEL_17;
    }
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_17:
  *(void *)this = &unk_1F210C2E0;
  MEMORY[0x1C87940C0]((char *)this + 8);
  uint64_t v8 = *((void *)this + 12);
  if (v8) {
    dispatch_release(v8);
  }
  queue v9 = *((void *)this + 11);
  if (v9) {
    dispatch_release(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
}

{
  void *v1;
  uint64_t vars8;

  radio::HealthService::State::~State(this);

  operator delete(v1);
}

void radio::HealthService::State::stopDataReportingTimer_sync(radio::HealthService::State *this)
{
  uint64_t v1 = *((void *)this + 24);
  if (v1)
  {
    uint64_t v3 = *((void *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v4 = 0;
      _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Stopped data reporting", v4, 2u);
      uint64_t v1 = *((void *)this + 24);
    }
    dispatch_source_cancel(v1);
    dispatch_release(*((dispatch_object_t *)this + 24));
    *((void *)this + 24) = 0;
  }
}

void *ctu::SharedLoggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F210C2E0;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  BOOL v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1F210C2E0;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  BOOL v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void *radio::HealthService::State::State(void *a1, uint64_t *a2, void *a3)
{
  *a1 = &unk_1F210C090;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v14, "com.apple.telephony.abm", "net.health.svc");
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v7 = dispatch_queue_create_with_target_V2("net.health.svc", initially_inactive, 0);
  dispatch_set_qos_class_floor(v7, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v7);
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = v7;
  if (v7)
  {
    dispatch_retain(v7);
    a1[12] = 0;
    dispatch_release(v7);
  }
  else
  {
    a1[12] = 0;
  }
  *a1 = &unk_1F210C2E0;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v16);
  a1[1] = &unk_1F2102CB8;
  a1[7] = *a2;
  uint64_t v8 = a2[1];
  a1[8] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v15);
  *a1 = &unk_1F210C350;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v14);
  *a1 = &unk_1F210C090;
  a1[13] = 0;
  a1[14] = 0;
  uint64_t v9 = *a2;
  long long v10 = (std::__shared_weak_count *)a2[1];
  v13[0] = v9;
  v13[1] = (uint64_t)v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  NetworkStatsInterface::create(v13, a1 + 15);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  a1[17] = *a3;
  uint64_t v11 = a3[1];
  a1[18] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  a1[19] = 0;
  a1[20] = 0;
  a1[23] = 0;
  a1[24] = 0;
  a1[22] = 0;
  a1[21] = a1 + 22;
  return a1;
}

void sub_1C5AFC9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v10);
  ctu::SharedLoggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v9);
  _Unwind_Resume(a1);
}

void sub_1C5AFCA08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  _Unwind_Resume(a1);
}

const char *radio::HealthService::State::getName(radio::HealthService::State *this)
{
  return "net.health.svc";
}

void ___ZN5radio13HealthService5State5startEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(radio::HealthService::State **)(a1 + 32);
  CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 40);
  CFDictionaryRef v3 = v2;
  if (v2) {
    CFRetain(v2);
  }
  radio::HealthService::State::startDataReportingTimer_sync((uint64_t)v1, &v3);
  if (v2) {
    CFRelease(v2);
  }

  radio::HealthService::State::startDataStallReporting_sync(v1);
}

void sub_1C5AFCAB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t radio::HealthService::State::startDataReportingTimer_sync(uint64_t a1, const __CFDictionary **a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  v15[0] = 0xAAAAAAAAAAAAAAAALL;
  v15[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v15, *a2);
  unsigned int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v15, @"DataReportingInterval");
  BOOL v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    unsigned int v17 = Int;
    _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Starting data reporting with interval %d millisec", buf, 8u);
  }
  uint64_t v5 = dispatch_source_create(MEMORY[0x1E4F14490], 1uLL, 0, *(dispatch_queue_t *)(a1 + 88));
  *(void *)(a1 + 192) = v5;
  dispatch_source_set_timer(v5, 0, 1000000 * Int, 0x3B9ACA00uLL);
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v6 || (v7 = *(void *)(a1 + 72), (uint64_t v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  p_shared_weak_owners = &v8->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v11 = *(NSObject **)(a1 + 192);
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 1174405120;
  handler[2] = ___ZN5radio13HealthService5State28startDataReportingTimer_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  handler[3] = &__block_descriptor_tmp_7_3;
  handler[4] = a1;
  handler[5] = v7;
  uint64_t v14 = v9;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  dispatch_source_set_event_handler(v11, handler);
  radio::HealthService::State::queryAndReportDataStats_sync((radio::HealthService::State *)a1);
  dispatch_activate(*(dispatch_object_t *)(a1 + 192));
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  std::__shared_weak_count::__release_weak(v9);
  return MEMORY[0x1C87942E0](v15);
}

void sub_1C5AFCCC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  std::__shared_weak_count::__release_weak(v17);
  MEMORY[0x1C87942E0](&a17);
  _Unwind_Resume(a1);
}

void radio::HealthService::State::startDataStallReporting_sync(radio::HealthService::State *this)
{
  CFDictionaryRef v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (uint64_t v3 = *((void *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  p_shared_weak_owners = &v4->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN5radio13HealthService5State28startDataStallReporting_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_11_2;
  void aBlock[4] = this;
  void aBlock[5] = v3;
  uint64_t v14 = v5;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v7 = _Block_copy(aBlock);
  uint64_t v8 = *((void *)this + 11);
  if (v8) {
    dispatch_retain(*((dispatch_object_t *)this + 11));
  }
  uint64_t v9 = *((void *)this + 17);
  if (v7)
  {
    uint64_t v10 = _Block_copy(v7);
    uint64_t v11 = v10;
    uint64_t v12 = v8;
    if (v8) {
      goto LABEL_9;
    }
LABEL_12:
    DataStallDetection::setCallback(v9, (uint64_t)&v11);
    if (!v10) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = v8;
  if (!v8) {
    goto LABEL_12;
  }
LABEL_9:
  dispatch_retain(v8);
  DataStallDetection::setCallback(v9, (uint64_t)&v11);
  dispatch_release(v8);
  if (v10) {
LABEL_13:
  }
    _Block_release(v10);
LABEL_14:
  if (v8) {
    dispatch_release(v8);
  }
  if (v7) {
    _Block_release(v7);
  }
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  std::__shared_weak_count::__release_weak(v5);
}

CFTypeRef __copy_helper_block_e8_40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 40);
  if (v1) {
    CFRelease(v1);
  }
}

void ___ZN5radio13HealthService5State15reportDataStatsEv_block_invoke(uint64_t a1)
{
}

void radio::HealthService::State::queryAndReportDataStats_sync(radio::HealthService::State *this)
{
  NetworkStatsInterface::query(*((NetworkStatsInterface **)this + 15), &v5);
  long long v2 = v5;
  long long v5 = 0uLL;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 20);
  *(_OWORD *)((char *)this + 152) = v2;
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    BOOL v4 = (std::__shared_weak_count *)*((void *)&v5 + 1);
    if (!*((void *)&v5 + 1)) {
      goto LABEL_5;
    }
  }
  else
  {
    BOOL v4 = (std::__shared_weak_count *)*((void *)&v5 + 1);
    if (!*((void *)&v5 + 1))
    {
LABEL_5:
      radio::HealthService::State::reportDataStats_sync(this);
      return;
    }
  }
  if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_5;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  radio::HealthService::State::reportDataStats_sync(this);
}

void ___ZN5radio13HealthService5State5resetEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  long long v2 = *(std::__shared_weak_count **)(v1 + 160);
  *(void *)(v1 + 152) = 0;
  *(void *)(v1 + 160) = 0;
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void ___ZN5radio13HealthService5State28startDataReportingTimer_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(void *a1)
{
  long long v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (radio::HealthService::State *)a1[4];
    BOOL v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      long long v5 = v4;
      if (a1[5]) {
        radio::HealthService::State::queryAndReportDataStats_sync(v3);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1C5AFD164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t __copy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN5radio13HealthService5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN5radio13HealthService5StateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN5radio13HealthService5State28startDataStallReporting_syncEv_block_invoke(void *a1, const void **a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    long long v5 = (uint64_t **)a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[5])
      {
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v5 + 21, a2, (uint64_t)a2);
        radio::HealthService::State::reportDataStats_sync((radio::HealthService::State *)v5);
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1C5AFD278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void radio::HealthService::State::reportDataStats_sync(radio::HealthService::State *this)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 19))
  {
    uint64_t v1 = (void *)*((void *)this + 19);
    uint64_t v2 = (void **)operator new(0x18uLL);
    v2[1] = 0;
    uint64_t v3 = v2 + 1;
    v2[2] = 0;
    std::__shared_weak_count *v2 = v2 + 1;
    unint64_t v41 = v2;
    BOOL v4 = (std::__shared_weak_count *)operator new(0x20uLL);
    v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210C3C8;
    v4->__shared_owners_ = 0;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)v2;
    unint64_t v42 = v4;
    long long v5 = (void *)*v1;
    int v30 = v1 + 1;
    if ((void *)*v1 != v1 + 1)
    {
      while (1)
      {
        *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&__p[16] = v6;
        long long v39 = v6;
        *(_OWORD *)std::string __p = v6;
        LODWORD(v39) = *((_DWORD *)v5 + 8);
        __p[0] = *((unsigned char *)v5 + 48);
        *((void *)&v39 + 1) = v5[5];
        if (*((char *)v5 + 79) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v5[7], v5[8]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)(v5 + 7);
          *(void *)&unsigned char __p[24] = v5[9];
        }
        unint64_t v37 = 0xAAAAAAAAAAAAAAAALL;
        int v38 = -1431655766;
        radio::HealthCommandDriver::LinkStats::LinkStats((radio::HealthCommandDriver::LinkStats *)&v37);
        unint64_t v37 = *((void *)&v39 + 1);
        if (__p[0]) {
          break;
        }
LABEL_24:
        if ((__p[31] & 0x80000000) != 0)
        {
          operator delete(*(void **)&__p[8]);
          unsigned int v17 = (void *)v5[1];
          if (v17)
          {
            do
            {
LABEL_28:
              uint64_t v18 = v17;
              unsigned int v17 = (void *)*v17;
            }
            while (v17);
            goto LABEL_4;
          }
        }
        else
        {
          unsigned int v17 = (void *)v5[1];
          if (v17) {
            goto LABEL_28;
          }
        }
        do
        {
          uint64_t v18 = (void *)v5[2];
          BOOL v19 = *v18 == (void)v5;
          long long v5 = v18;
        }
        while (!v19);
LABEL_4:
        long long v5 = v18;
        if (v18 == v30) {
          goto LABEL_33;
        }
      }
      BOOL v7 = (uint64_t *)((char *)this + 176) != std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>((uint64_t)this + 168, (const void **)&__p[8]);
      int v38 = v7;
      uint64_t v8 = *((void *)this + 5);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67109888;
        int v44 = v39;
        __int16 v45 = 1024;
        int v46 = v37;
        __int16 v47 = 1024;
        int v48 = HIDWORD(v37);
        __int16 v49 = 1024;
        BOOL v50 = v7;
        _os_log_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_DEFAULT, "#I Interface %u, count %u/%u, state %d", buf, 0x1Au);
        unsigned int v9 = v39;
        uint64_t v10 = *v3;
        uint64_t v11 = v2 + 1;
        uint64_t v12 = v2 + 1;
        if (*v3)
        {
          while (1)
          {
LABEL_15:
            while (1)
            {
              uint64_t v12 = (uint64_t **)v10;
              unsigned int v13 = *((_DWORD *)v10 + 7);
              if (v13 <= v9) {
                break;
              }
              uint64_t v10 = *v12;
              uint64_t v11 = v12;
              if (!*v12) {
                goto LABEL_19;
              }
            }
            if (v13 >= v9) {
              break;
            }
            uint64_t v10 = v12[1];
            if (!v10)
            {
              uint64_t v11 = v12 + 1;
              goto LABEL_19;
            }
          }
          uint64_t v14 = v12;
          goto LABEL_23;
        }
      }
      else
      {
        unsigned int v9 = v39;
        uint64_t v10 = *v3;
        uint64_t v11 = v2 + 1;
        uint64_t v12 = v2 + 1;
        if (*v3) {
          goto LABEL_15;
        }
      }
LABEL_19:
      uint64_t v14 = operator new(0x30uLL);
      v14[7] = v9;
      radio::HealthCommandDriver::LinkStats::LinkStats((radio::HealthCommandDriver::LinkStats *)(v14 + 8));
      *(void *)uint64_t v14 = 0;
      *((void *)v14 + 1) = 0;
      *((void *)v14 + 2) = v12;
      void *v11 = (uint64_t *)v14;
      unint64_t v15 = (void *)**v2;
      unint64_t v16 = (uint64_t *)v14;
      if (v15)
      {
        std::__shared_weak_count *v2 = v15;
        unint64_t v16 = *v11;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v2[1], v16);
      v2[2] = (void *)((char *)v2[2] + 1);
LABEL_23:
      *((void *)v14 + 4) = v37;
      _OWORD v14[10] = v38;
      goto LABEL_24;
    }
LABEL_33:
    dispatch_object_t v20 = (std::__shared_weak_count *)*((void *)this + 10);
    if (!v20 || (v21 = *((void *)this + 9), (unint64_t v22 = std::__shared_weak_count::lock(v20)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    unint64_t v23 = v22;
    atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v23);
    }
    uint64_t v24 = *((void *)this + 13);
    unint64_t v35 = v41;
    unint64_t v36 = v42;
    if (v42) {
      atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN5radio13HealthService5State20reportDataStats_syncEv_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_15_2;
    void aBlock[4] = this;
    void aBlock[5] = v21;
    uint64_t v32 = v23;
    atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v25 = _Block_copy(aBlock);
    uint64_t v26 = *((void *)this + 11);
    if (v26) {
      dispatch_retain(v26);
    }
    size_t v33 = v25;
    dispatch_object_t object = v26;
    (*(void (**)(uint64_t, void ***, void **))(*(void *)v24 + 56))(v24, &v35, &v33);
    if (object) {
      dispatch_release(object);
    }
    if (v33) {
      _Block_release(v33);
    }
    uint64_t v27 = v36;
    if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    if (v32) {
      std::__shared_weak_count::__release_weak(v32);
    }
    std::__shared_weak_count::__release_weak(v23);
    int v28 = v42;
    if (v42)
    {
      if (!atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
}

void sub_1C5AFD7AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,char a21,uint64_t a22,char a23)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5AFD80C(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1 - 176);
  _Unwind_Resume(a1);
}

void sub_1C5AFD820(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1 - 176);
  _Unwind_Resume(a1);
}

void sub_1C5AFD834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  operator delete(v35);
  if (a35 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v36 - 176);
  _Unwind_Resume(a1);
}

uint64_t dispatch::callback<void({block_pointer})(std::string)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void ___ZN5radio13HealthService5State20reportDataStats_syncEv_block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    long long v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      BOOL v7 = v6;
      if (!a1[5]) {
        goto LABEL_12;
      }
      uint64_t v8 = *a2;
      if (*a2) {
        unsigned int v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      }
      else {
        unsigned int v9 = 0;
      }
      uint64_t v10 = *(NSObject **)(v5 + 40);
      if (v9)
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          int v11 = 138412290;
          uint64_t v12 = v8;
          _os_log_error_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_ERROR, "Failed to update data stats:\n%@", (uint8_t *)&v11, 0xCu);
          if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            return;
          }
          goto LABEL_13;
        }
LABEL_12:
        if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          return;
        }
        goto LABEL_13;
      }
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_12;
      }
      LOWORD(v11) = 0;
      _os_log_debug_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_DEBUG, "#D Updated data stats", (uint8_t *)&v11, 2u);
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_13:
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void ___ZN5radio13HealthService5State13enterLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v3 || (v4 = *(void *)(v2 + 72), (uint64_t v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v6 = v5;
  p_shared_weak_owners = &v5->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN5radio13HealthService5State13enterLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_16_3;
  void aBlock[4] = v2;
  void aBlock[5] = v4;
  unint64_t v16 = v6;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v8 = (void *)a1[5];
  if (v8) {
    uint64_t v8 = _Block_copy(v8);
  }
  unsigned int v9 = a1[6];
  unsigned int v17 = v8;
  dispatch_object_t v18 = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  uint64_t v10 = _Block_copy(aBlock);
  int v11 = *(NSObject **)(v2 + 88);
  if (v11) {
    dispatch_retain(*(dispatch_object_t *)(v2 + 88));
  }
  unint64_t v19 = (unint64_t)v10;
  unint64_t v20 = (unint64_t)v11;
  uint64_t v12 = *(void *)(v2 + 104);
  if (v10)
  {
    uint64_t v13 = _Block_copy(v10);
    dispatch_object_t object = v11;
    if (!v11) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v13 = 0;
  dispatch_object_t object = v11;
  if (v11) {
LABEL_13:
  }
    dispatch_retain(v11);
LABEL_14:
  (*(void (**)(uint64_t, void **))(*(void *)v12 + 64))(v12, &v13);
  if (object) {
    dispatch_release(object);
  }
  if (v13) {
    _Block_release(v13);
  }
  if (v11) {
    dispatch_release(v11);
  }
  if (v10) {
    _Block_release(v10);
  }
  if (v18) {
    dispatch_release(v18);
  }
  if (v17) {
    _Block_release(v17);
  }
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  std::__shared_weak_count::__release_weak(v6);
}

void sub_1C5AFDC44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a10);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v20 - 64);
  dispatch::callback<void({block_pointer})(void)>::~callback(v19);
  if (a18) {
    std::__shared_weak_count::__release_weak(a18);
  }
  std::__shared_weak_count::__release_weak(v18);
  _Unwind_Resume(a1);
}

void ___ZN5radio13HealthService5State13enterLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke_2(void *a1, uint64_t *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    long long v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      BOOL v7 = v6;
      if (!a1[5])
      {
LABEL_22:
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      uint64_t v8 = *a2;
      if (*a2) {
        unsigned int v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      }
      else {
        unsigned int v9 = 0;
      }
      uint64_t v10 = *(NSObject **)(v5 + 40);
      if (v9)
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v15) = 138412290;
          *(void *)((char *)&v15 + 4) = v8;
          _os_log_error_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_ERROR, "Entering Low Power Failed: %@", (uint8_t *)&v15, 0xCu);
        }
      }
      else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v15) = 0;
        _os_log_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_DEFAULT, "#I Entering Low Power complete", (uint8_t *)&v15, 2u);
      }
      int v11 = (const void *)a1[7];
      if (v11) {
        uint64_t v12 = _Block_copy(v11);
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v13 = a1[8];
      *(void *)&long long v15 = MEMORY[0x1E4F143A8];
      *((void *)&v15 + 1) = 1174405120;
      unint64_t v16 = ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke;
      unsigned int v17 = &__block_descriptor_tmp_30_1;
      if (v12)
      {
        aBlocunint64_t k = _Block_copy(v12);
        dispatch_async(v13, &v15);
        uint64_t v14 = aBlock;
        if (!aBlock)
        {
LABEL_20:
          if (v12) {
            _Block_release(v12);
          }
          goto LABEL_22;
        }
      }
      else
      {
        aBlocunint64_t k = 0;
        dispatch_async(v13, &v15);
        uint64_t v14 = aBlock;
        if (!aBlock) {
          goto LABEL_20;
        }
      }
      _Block_release(v14);
      goto LABEL_20;
    }
  }
}

void sub_1C5AFDE9C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN5radio13HealthService5StateEEE56c46_ZTSN8dispatch8callbackIU13block_pointerFvvEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (void *)a2[7];
  if (v5) {
    uint64_t v5 = _Block_copy(v5);
  }
  long long v6 = a2[8];
  a1[7] = v5;
  a1[8] = v6;
  if (v6)
  {
    dispatch_retain(v6);
  }
}

void __destroy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN5radio13HealthService5StateEEE56c46_ZTSN8dispatch8callbackIU13block_pointerFvvEEE(void *a1)
{
  uint64_t v2 = a1[8];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[7];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void __copy_helper_block_e8_40c46_ZTSN8dispatch8callbackIU13block_pointerFvvEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 40);
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  uint64_t v5 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  if (v5)
  {
    dispatch_retain(v5);
  }
}

void __destroy_helper_block_e8_40c46_ZTSN8dispatch8callbackIU13block_pointerFvvEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

void ___ZN5radio13HealthService5State12exitLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v3 || (v4 = *(void *)(v2 + 72), (uint64_t v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v6 = v5;
  p_shared_weak_owners = &v5->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN5radio13HealthService5State12exitLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_20_2;
  void aBlock[4] = v2;
  void aBlock[5] = v4;
  unint64_t v16 = v6;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v8 = (void *)a1[5];
  if (v8) {
    uint64_t v8 = _Block_copy(v8);
  }
  unsigned int v9 = a1[6];
  unsigned int v17 = v8;
  dispatch_object_t v18 = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  uint64_t v10 = _Block_copy(aBlock);
  int v11 = *(NSObject **)(v2 + 88);
  if (v11) {
    dispatch_retain(*(dispatch_object_t *)(v2 + 88));
  }
  unint64_t v19 = (unint64_t)v10;
  unint64_t v20 = (unint64_t)v11;
  uint64_t v12 = *(void *)(v2 + 104);
  if (v10)
  {
    uint64_t v13 = _Block_copy(v10);
    dispatch_object_t object = v11;
    if (!v11) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v13 = 0;
  dispatch_object_t object = v11;
  if (v11) {
LABEL_13:
  }
    dispatch_retain(v11);
LABEL_14:
  (*(void (**)(uint64_t, void **))(*(void *)v12 + 72))(v12, &v13);
  if (object) {
    dispatch_release(object);
  }
  if (v13) {
    _Block_release(v13);
  }
  if (v11) {
    dispatch_release(v11);
  }
  if (v10) {
    _Block_release(v10);
  }
  if (v18) {
    dispatch_release(v18);
  }
  if (v17) {
    _Block_release(v17);
  }
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  std::__shared_weak_count::__release_weak(v6);
}

void sub_1C5AFE244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a10);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v20 - 64);
  dispatch::callback<void({block_pointer})(void)>::~callback(v19);
  if (a18) {
    std::__shared_weak_count::__release_weak(a18);
  }
  std::__shared_weak_count::__release_weak(v18);
  _Unwind_Resume(a1);
}

void ___ZN5radio13HealthService5State12exitLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke_2(void *a1, uint64_t *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    long long v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      BOOL v7 = v6;
      if (!a1[5])
      {
LABEL_22:
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      uint64_t v8 = *a2;
      if (*a2) {
        unsigned int v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      }
      else {
        unsigned int v9 = 0;
      }
      uint64_t v10 = *(NSObject **)(v5 + 40);
      if (v9)
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v15) = 138412290;
          *(void *)((char *)&v15 + 4) = v8;
          _os_log_error_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_ERROR, "Exiting Low Power Failed: %@", (uint8_t *)&v15, 0xCu);
        }
      }
      else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v15) = 0;
        _os_log_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_DEFAULT, "#I Exiting Low Power complete", (uint8_t *)&v15, 2u);
      }
      int v11 = (const void *)a1[7];
      if (v11) {
        uint64_t v12 = _Block_copy(v11);
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v13 = a1[8];
      *(void *)&long long v15 = MEMORY[0x1E4F143A8];
      *((void *)&v15 + 1) = 1174405120;
      unint64_t v16 = ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke;
      unsigned int v17 = &__block_descriptor_tmp_30_1;
      if (v12)
      {
        aBlocunint64_t k = _Block_copy(v12);
        dispatch_async(v13, &v15);
        uint64_t v14 = aBlock;
        if (!aBlock)
        {
LABEL_20:
          if (v12) {
            _Block_release(v12);
          }
          goto LABEL_22;
        }
      }
      else
      {
        aBlocunint64_t k = 0;
        dispatch_async(v13, &v15);
        uint64_t v14 = aBlock;
        if (!aBlock) {
          goto LABEL_20;
        }
      }
      _Block_release(v14);
      goto LABEL_20;
    }
  }
}

void sub_1C5AFE49C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::Loggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

void ctu::Loggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 14;
  strcpy(a1, "net.health.svc");
}

uint64_t ctu::Loggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F210C2E0;
  MEMORY[0x1C87940C0](a1 + 1);
  return a1;
}

void ctu::Loggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F210C2E0;
  MEMORY[0x1C87940C0](a1 + 1);

  operator delete(a1);
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void *__copy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(void **)(a2 + 32);
  if (result) {
    CFTypeRef result = _Block_copy(result);
  }
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    _Block_release(v1);
  }
}

void ctu::SharedLoggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F210C2E0;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  BOOL v7 = v6;
  uint64_t v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5radio13HealthService5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F210C388;
  void block[5] = v5;
  uint64_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN5radio13HealthService5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c56_ZTSNSt3__110shared_ptrIKN5radio13HealthService5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c56_ZTSNSt3__110shared_ptrIKN5radio13HealthService5StateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_pointer<std::map<unsigned int,radio::HealthCommandDriver::LinkStats> *,std::shared_ptr<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>::__shared_ptr_default_delete<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>,std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>,std::allocator<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<std::map<unsigned int,radio::HealthCommandDriver::LinkStats> *,std::shared_ptr<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>::__shared_ptr_default_delete<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>,std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>,std::allocator<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void ***)(a1 + 24);
  if (v1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(v1[1]);
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<std::map<unsigned int,radio::HealthCommandDriver::LinkStats> *,std::shared_ptr<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>::__shared_ptr_default_delete<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>,std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>,std::allocator<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C5BCA28ALL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C5BCA28ALL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C5BCA28ALL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C5BCA28ALL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void HKWorkoutManager::create(NSObject **a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::allocate_shared[abi:ne180100]<HKWorkoutManager,std::allocator<HKWorkoutManager>,dispatch::workloop &,void>(a1, a2);
}

uint64_t HKWorkoutManager::HKWorkoutManager(uint64_t a1, dispatch_object_t *a2)
{
  uint64_t v3 = (uint64_t (**)(void))&unk_1F210C418;
  *(void *)a1 = &unk_1F210C418;
  uint64_t v4 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    uint64_t v3 = *(uint64_t (***)(void))a1;
  }
  uint64_t v5 = (const char *)v3[6](a1);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v20, "com.apple.telephony.abm", v5);
  GetABMLogServer(&v18);
  if (v4) {
    dispatch_retain(v4);
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  BOOL v7 = dispatch_queue_create_with_target_V2("workout.hk", initially_inactive, v4);
  dispatch_set_qos_class_floor(v7, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v7);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  *(void *)(a1 + 96) = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  if (v7) {
    dispatch_release(v7);
  }
  if (v4) {
    dispatch_release(v4);
  }
  *(void *)a1 = &unk_1F210C540;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v22);
  *(void *)(a1 + 8) = &unk_1F2102CB8;
  uint64_t v8 = v19;
  *(void *)(a1 + 56) = v18;
  *(void *)(a1 + 64) = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v21);
  *(void *)a1 = &unk_1F210C5D0;
  unsigned int v9 = v19;
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v20);
  if (v4) {
    dispatch_release(v4);
  }
  *(void *)a1 = &unk_1F210C418;
  *(void *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 140) = 0;
  uint64_t v10 = (std::__shared_weak_count *)operator new(0x30uLL);
  v10->__shared_owners_ = 0;
  p_shared_owners = &v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210C4F0;
  v10[1].__vftable = 0;
  v10[1].__shared_owners_ = 0;
  v10[1].__shared_weak_owners_ = 0;
  id v12 = objc_alloc(MEMORY[0x1E4F2B9A0]);
  id v13 = objc_alloc_init(MEMORY[0x1E4F2B0B8]);
  uint64_t v14 = [v12 initWithHealthStore:v13];
  shared_weak_owners = (void *)v10[1].__shared_weak_owners_;
  v10[1].__shared_weak_owners_ = v14;

  *(void *)(a1 + 144) = v10 + 1;
  *(void *)(a1 + 152) = v10;
  shared_owners = (std::__shared_weak_count *)v10[1].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v10[1].__vftable = (std::__shared_weak_count_vtbl *)&v10[1];
      v10[1].__shared_owners_ = (uint64_t)v10;
      std::__shared_weak_count::__release_weak(shared_owners);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_25;
      }
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v10[1].__vftable = (std::__shared_weak_count_vtbl *)&v10[1];
    v10[1].__shared_owners_ = (uint64_t)v10;
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_25:
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return a1;
}

void sub_1C5AFED68(_Unwind_Exception *a1)
{
  uint64_t v5 = *(std::__shared_weak_count **)(v2 + 32);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v2);
  operator delete(v6);
  std::function<void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>::~function(v1 + 13);
  ctu::SharedLoggable<HKWorkoutManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v1);
  _Unwind_Resume(a1);
}

void *ctu::SharedLoggable<HKWorkoutManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F210C540;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1F210C540;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void HKWorkoutManager::~HKWorkoutManager(HKWorkoutManager *this)
{
  *(void *)this = &unk_1F210C418;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (char *)this + 104;
    uint64_t v4 = (HKWorkoutManager *)*((void *)this + 16);
    if (v4 != (HKWorkoutManager *)((char *)this + 104))
    {
LABEL_4:
      if (v4) {
        (*(void (**)(HKWorkoutManager *))(*(void *)v4 + 40))(v4);
      }
      *(void *)this = &unk_1F210C540;
      MEMORY[0x1C87940C0]((char *)this + 8);
      uint64_t v5 = *((void *)this + 12);
      if (v5) {
        goto LABEL_7;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v3 = (char *)this + 104;
    uint64_t v4 = (HKWorkoutManager *)*((void *)this + 16);
    if (v4 != (HKWorkoutManager *)((char *)this + 104)) {
      goto LABEL_4;
    }
  }
  (*(void (**)(char *))(*(void *)v3 + 32))(v3);
  *(void *)this = &unk_1F210C540;
  MEMORY[0x1C87940C0]((char *)this + 8);
  uint64_t v5 = *((void *)this + 12);
  if (v5) {
LABEL_7:
  }
    dispatch_release(v5);
LABEL_8:
  long long v6 = *((void *)this + 11);
  if (v6) {
    dispatch_release(v6);
  }
  BOOL v7 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
}

{
  void *v1;
  uint64_t vars8;

  HKWorkoutManager::~HKWorkoutManager(this);

  operator delete(v1);
}

const char *HKWorkoutManager::getName(HKWorkoutManager *this)
{
  return "workout.hk";
}

void HKWorkoutManager::start(HKWorkoutManager *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (uint64_t v3 = *((void *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  long long v6 = operator new(8uLL);
  void *v6 = this;
  BOOL v7 = *((void *)this + 11);
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v8 = operator new(0x18uLL);
  *uint64_t v8 = v6;
  v8[1] = v3;
  v8[2] = v5;
  dispatch_async_f(v7, v8, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<HKWorkoutManager>::execute_wrapped<HKWorkoutManager::start(void)::$_0>(HKWorkoutManager::start(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<HKWorkoutManager::start(void)::$_0,dispatch_queue_s *::default_delete<HKWorkoutManager::start(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void HKWorkoutManager::stop(HKWorkoutManager *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (uint64_t v3 = *((void *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  long long v6 = operator new(8uLL);
  void *v6 = this;
  BOOL v7 = *((void *)this + 11);
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v8 = operator new(0x18uLL);
  *uint64_t v8 = v6;
  v8[1] = v3;
  v8[2] = v5;
  dispatch_async_f(v7, v8, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<HKWorkoutManager>::execute_wrapped<HKWorkoutManager::stop(void)::$_0>(HKWorkoutManager::stop(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<HKWorkoutManager::stop(void)::$_0,dispatch_queue_s *::default_delete<HKWorkoutManager::stop(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

uint64_t HKWorkoutManager::registerCallback(void *a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      unint64_t v16 = v15;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v15);
    }
    else
    {
      unint64_t v16 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    unint64_t v16 = 0;
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || (uint64_t v5 = a1[9], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  BOOL v7 = v6;
  uint64_t v8 = operator new(0x28uLL);
  unsigned int v9 = v8;
  uint64_t v10 = v16;
  *uint64_t v8 = a1;
  if (v10)
  {
    if (v10 == v15)
    {
      v8[4] = v8 + 1;
      (*(void (**)(void *))(v15[0] + 24))(v15);
    }
    else
    {
      v8[4] = v10;
      unint64_t v16 = 0;
    }
  }
  else
  {
    v8[4] = 0;
  }
  int v11 = a1[11];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  id v12 = operator new(0x18uLL);
  void *v12 = v9;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v11, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<HKWorkoutManager>::execute_wrapped<HKWorkoutManager::registerCallback(std::function<void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>)::$_0>(HKWorkoutManager::registerCallback(std::function<void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<HKWorkoutManager::registerCallback(std::function<void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>)::$_0,std::default_delete<HKWorkoutManager::registerCallback(std::function<void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t result = (uint64_t)v16;
    if (v16 != v15) {
      goto LABEL_15;
    }
    return (*(uint64_t (**)(void *))(v15[0] + 32))(v15);
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  uint64_t result = (uint64_t)v16;
  if (v16 == v15) {
    return (*(uint64_t (**)(void *))(v15[0] + 32))(v15);
  }
LABEL_15:
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  return result;
}

void sub_1C5AFF47C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::Loggable<HKWorkoutManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<HKWorkoutManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<HKWorkoutManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void std::__shared_ptr_emplace<HealthStoreManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210C4F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HealthStoreManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210C4F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<HealthStoreManager>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void *ctu::Loggable<HKWorkoutManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F210C540;
  MEMORY[0x1C87940C0](a1 + 1);
  return a1;
}

void ctu::Loggable<HKWorkoutManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F210C540;
  MEMORY[0x1C87940C0](a1 + 1);

  operator delete(a1);
}

void std::allocate_shared[abi:ne180100]<HKWorkoutManager,std::allocator<HKWorkoutManager>,dispatch::workloop &,void>(NSObject **a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)operator new(0xB8uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210C580;
  uint64_t v6 = (uint64_t)&v4[1];
  uint64_t v7 = *a1;
  dispatch_object_t v9 = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  HKWorkoutManager::HKWorkoutManager(v6, &v9);
  if (v7) {
    dispatch_release(v7);
  }
  *a2 = v6;
  a2[1] = (uint64_t)v4;
  shared_owners = (std::__shared_weak_count *)v4[4].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v4[4].__vftable = (std::__shared_weak_count_vtbl *)v6;
    v4[4].__shared_owners_ = (uint64_t)v4;
    std::__shared_weak_count::__release_weak(shared_owners);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v4[4].__vftable = (std::__shared_weak_count_vtbl *)v6;
    v4[4].__shared_owners_ = (uint64_t)v4;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);

  std::__shared_weak_count::__release_weak(v4);
}

void sub_1C5AFF824(_Unwind_Exception *a1)
{
  if (v2) {
    dispatch_release(v2);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<HKWorkoutManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210C580;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HKWorkoutManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210C580;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<HKWorkoutManager>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void ctu::SharedLoggable<HKWorkoutManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F210C540;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<HKWorkoutManager>::execute_wrapped<HKWorkoutManager::start(void)::$_0>(HKWorkoutManager::start(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<HKWorkoutManager::start(void)::$_0,dispatch_queue_s *::default_delete<HKWorkoutManager::start(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  if (!*(unsigned char *)(v3 + 136))
  {
    *(unsigned char *)(v3 + 136) = 1;
    uint64_t v4 = *(std::__shared_weak_count **)(v3 + 80);
    if (!v4 || (uint64_t v5 = *(void *)(v3 + 72), (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v7 = v6;
    p_shared_weak_owners = &v6->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v7);
    }
    dispatch_object_t v9 = (const char *)*MEMORY[0x1E4F2BDF0];
    uint64_t v10 = *(NSObject **)(v3 + 88);
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 3321888768;
    handler[2] = ___ZZN16HKWorkoutManager5startEvENK3__0clEv_block_invoke;
    handler[3] = &__block_descriptor_56_ea8_40c41_ZTSNSt3__18weak_ptrI16HKWorkoutManagerEE_e8_v12__0i8l;
    handler[4] = v3;
    handler[5] = v5;
    uint64_t v18 = v7;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    notify_register_dispatch(v9, (int *)(v3 + 140), v10, handler);
    int v11 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unint64_t v16 = 0;
      _os_log_impl(&dword_1C59C6000, v11, OS_LOG_TYPE_DEFAULT, "#I Workout manager started", v16, 2u);
    }
    uint64_t v12 = *(void *)(v3 + 128);
    if (v12)
    {
      id v13 = *(uint64_t **)(v3 + 144);
      if (v12 == v3 + 104)
      {
        uint64_t v20 = v19;
        (*(void (**)(uint64_t, void *))(*(void *)v12 + 24))(v12, v19);
      }
      else
      {
        uint64_t v20 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
      }
      HealthStoreManager::queryWorkoutInfo(v13, v19);
      if (v20 == v19)
      {
        (*(void (**)(void *))(v19[0] + 32))(v19);
        uint64_t v14 = v18;
        if (!v18) {
          goto LABEL_17;
        }
        goto LABEL_16;
      }
      if (v20) {
        (*(void (**)(void))(*v20 + 40))();
      }
    }
    uint64_t v14 = v18;
    if (!v18)
    {
LABEL_17:
      std::__shared_weak_count::__release_weak(v7);
      goto LABEL_18;
    }
LABEL_16:
    std::__shared_weak_count::__release_weak(v14);
    goto LABEL_17;
  }
LABEL_18:
  operator delete(v2);
  long long v15 = (std::__shared_weak_count *)a1[2];
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  operator delete(a1);
}

void sub_1C5AFFCA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21 == v24)
  {
    (*(void (**)(uint64_t *))(a18 + 32))(&a18);
  }
  else if (a21)
  {
    (*(void (**)(void))(*(void *)a21 + 40))();
  }
  if (a17) {
    std::__shared_weak_count::__release_weak(a17);
  }
  std::__shared_weak_count::__release_weak(v23);
  operator delete(v22);
  uint64_t v26 = (std::__shared_weak_count *)v21[2];
  if (v26)
  {
    if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  operator delete(v21);
  _Unwind_Resume(a1);
}

void ___ZZN16HKWorkoutManager5startEvENK3__0clEv_block_invoke(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (void *)a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    int v11 = v4;
    if (v4)
    {
      uint64_t v5 = v4;
      if (!a1[5]) {
        goto LABEL_13;
      }
      uint64_t v6 = v3[5];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)dispatch_object_t v9 = 0;
        _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#I Workout notification received", v9, 2u);
      }
      uint64_t v7 = (void *)v3[16];
      if (!v7)
      {
LABEL_13:
        if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          return;
        }
        goto LABEL_14;
      }
      uint64_t v8 = (uint64_t *)v3[18];
      if (v7 == v3 + 13)
      {
        id v13 = v12;
        (*(void (**)(void *, void *))(*v7 + 24))(v7, v12);
      }
      else
      {
        id v13 = (void *)(*(uint64_t (**)(void *))(*v7 + 16))(v7);
      }
      HealthStoreManager::queryWorkoutInfo(v8, v12);
      if (v13 != v12)
      {
        if (v13) {
          (*(void (**)(void))(*v13 + 40))();
        }
        goto LABEL_13;
      }
      (*(void (**)(void *))(v12[0] + 32))(v12);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_14:
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1C5AFFF8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  std::function<void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>::~function((uint64_t *)va1);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C5AFFFA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void HealthStoreManager::queryWorkoutInfo(uint64_t *a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  dispatch_object_t v9 = (void *)a1[2];
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3321888768;
  v12[2] = ___ZN18HealthStoreManager16queryWorkoutInfoENSt3__18functionIFvN3abm11WorkoutTypeENS2_12WorkoutStateENS2_15WorkoutLocationENS2_12SwimLocationEEEE_block_invoke;
  void v12[3] = &__block_descriptor_80_ea8_32c43_ZTSNSt3__18weak_ptrI18HealthStoreManagerEE48c105_ZTSNSt3__18functionIFvN3abm11WorkoutTypeENS1_12WorkoutStateENS1_15WorkoutLocationENS1_12SwimLocationEEEE_e47_v24__0___HKCurrentWorkoutSnapshot_8__NSError_16l;
  v12[4] = v5;
  id v13 = v7;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v10 = a2[3];
  if (!v10) {
    goto LABEL_8;
  }
  if ((void *)v10 != a2)
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
LABEL_8:
    long long v15 = (void *)v10;
    goto LABEL_10;
  }
  long long v15 = v14;
  (*(void (**)(void *, void *))(*a2 + 24))(a2, v14);
LABEL_10:
  [v9 currentWorkoutSnapshotWithCompletion:v12];
  if (v15 == v14)
  {
    (*(void (**)(void *))(v14[0] + 32))(v14);
    int v11 = v13;
    if (!v13) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if (v15) {
    (*(void (**)(void))(*v15 + 40))();
  }
  int v11 = v13;
  if (v13) {
LABEL_14:
  }
    std::__shared_weak_count::__release_weak(v11);
LABEL_15:
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1C5B001D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  std::__shared_weak_count::__release_weak(v15);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c41_ZTSNSt3__18weak_ptrI16HKWorkoutManagerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_40c41_ZTSNSt3__18weak_ptrI16HKWorkoutManagerEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN18HealthStoreManager16queryWorkoutInfoENSt3__18functionIFvN3abm11WorkoutTypeENS2_12WorkoutStateENS2_15WorkoutLocationENS2_12SwimLocationEEEE_block_invoke(void *a1, void *a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (std::__shared_weak_count *)a1[5];
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    uint64_t v26 = v8;
    if (v8)
    {
      dispatch_object_t v9 = v8;
      uint64_t v25 = a1[4];
      if (v25)
      {
        uint64_t v10 = a1[9];
        if (v10)
        {
          BOOL v11 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
          if (v5)
          {
            if (v11)
            {
              uint64_t v12 = [v5 configuration];
              *(_DWORD *)std::string buf = 134218240;
              uint64_t v30 = [v12 activityType];
              __int16 v31 = 2048;
              uint64_t v32 = [v5 state];
              _os_log_impl(&dword_1C59C6000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "#I Workout callback; activity=%lu  session=%lu",
                buf,
                0x16u);
            }
            id v13 = [v5 configuration:v25, v26];
            uint64_t v14 = [v13 activityType];

            int v15 = 1;
            switch(v14)
            {
              case 13:
                int v15 = 4;
                break;
              case 16:
                int v15 = 3;
                break;
              case 35:
                int v15 = 7;
                break;
              case 37:
                int v15 = 6;
                break;
              case 46:
                break;
              case 52:
                int v15 = 2;
                break;
              case 63:
                int v15 = 8;
                break;
              case 68:
                int v15 = 5;
                break;
              default:
                int v15 = 9;
                break;
            }
            uint64_t v16 = [v5 state];
            if (v16 == 2) {
              int v17 = 1;
            }
            else {
              int v17 = 2 * (v16 == 4);
            }
            uint64_t v18 = [v5 configuration];
            uint64_t v19 = [v18 locationType];

            if ((unint64_t)(v19 - 1) >= 3) {
              int v20 = 3;
            }
            else {
              int v20 = v19 - 1;
            }
            uint64_t v21 = [v5 configuration];
            unint64_t v22 = [v21 swimmingLocationType];

            int v23 = 3;
            if (v22 < 3) {
              int v23 = v22;
            }
            *(_DWORD *)std::string buf = v15;
            int v27 = v23;
            unint64_t v28 = __PAIR64__(v17, v20);
            uint64_t v24 = a1[9];
            if (!v24) {
              std::__throw_bad_function_call[abi:ne180100]();
            }
            (*(void (**)(uint64_t, uint8_t *, char *, unint64_t *, int *))(*(void *)v24 + 48))(v24, buf, (char *)&v28 + 4, &v28, &v27);
          }
          else
          {
            if (v11)
            {
              *(_WORD *)std::string buf = 0;
              _os_log_impl(&dword_1C59C6000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "#I Workout callback with no data", buf, 2u);
              uint64_t v10 = a1[9];
              *(_DWORD *)std::string buf = 0;
              unint64_t v28 = 0;
              int v27 = 0;
              if (!v10) {
                std::__throw_bad_function_call[abi:ne180100]();
              }
            }
            else
            {
              *(_DWORD *)std::string buf = 0;
              unint64_t v28 = 0;
              int v27 = 0;
            }
            (*(void (**)(uint64_t, uint8_t *, char *, unint64_t *, int *))(*(void *)v10 + 48))(v10, buf, (char *)&v28 + 4, &v28, &v27);
          }
        }
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1C5B00588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c43_ZTSNSt3__18weak_ptrI18HealthStoreManagerEE48c105_ZTSNSt3__18functionIFvN3abm11WorkoutTypeENS1_12WorkoutStateENS1_15WorkoutLocationENS1_12SwimLocationEEEE(void *a1, void *a2)
{
  uint64_t v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t result = a2[9];
  if (!result) {
    goto LABEL_6;
  }
  if ((void *)result != a2 + 6)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
LABEL_6:
    a1[9] = result;
    return result;
  }
  a1[9] = a1 + 6;
  return (*(uint64_t (**)(void, void *))(*(void *)a2[9] + 24))(a2[9], a1 + 6);
}

void sub_1C5B00784(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea8_32c43_ZTSNSt3__18weak_ptrI18HealthStoreManagerEE48c105_ZTSNSt3__18functionIFvN3abm11WorkoutTypeENS1_12WorkoutStateENS1_15WorkoutLocationENS1_12SwimLocationEEEE(uint64_t a1)
{
  uint64_t v2 = a1 + 48;
  uint64_t v3 = *(void *)(a1 + 72);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v4) {
      return;
    }
    goto LABEL_5;
  }
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4)
  {
LABEL_5:
    std::__shared_weak_count::__release_weak(v4);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<HKWorkoutManager>::execute_wrapped<HKWorkoutManager::stop(void)::$_0>(HKWorkoutManager::stop(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<HKWorkoutManager::stop(void)::$_0,dispatch_queue_s *::default_delete<HKWorkoutManager::stop(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  if (*(unsigned char *)(v3 + 136))
  {
    *(unsigned char *)(v3 + 136) = 0;
    int v4 = *(_DWORD *)(v3 + 140);
    if (v4)
    {
      notify_cancel(v4);
      *(_DWORD *)(v3 + 140) = 0;
    }
    id v5 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_DEFAULT, "#I Workout manager stopped", v7, 2u);
    }
  }
  operator delete(v2);
  id v6 = (std::__shared_weak_count *)a1[2];
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  operator delete(a1);
}

void sub_1C5B00930(_Unwind_Exception *a1)
{
  operator delete(v2);
  int v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<HKWorkoutManager>::execute_wrapped<HKWorkoutManager::registerCallback(std::function<void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>)::$_0>(HKWorkoutManager::registerCallback(std::function<void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<HKWorkoutManager::registerCallback(std::function<void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>)::$_0,std::default_delete<HKWorkoutManager::registerCallback(std::function<void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>)::$_0>>)::{lambda(void *)#1}::__invoke(std::__shared_weak_count **a1)
{
  void v15[3] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)->__vftable;
  uint64_t p_shared_owners = (uint64_t)&(*a1)->__shared_owners_;
  uint64_t shared_owners = (*a1)[1].__shared_owners_;
  if (!shared_owners) {
    goto LABEL_4;
  }
  if (shared_owners != p_shared_owners)
  {
    uint64_t shared_owners = (*(uint64_t (**)(uint64_t))(*(void *)shared_owners + 16))(shared_owners);
LABEL_4:
    uint64_t v14 = (void (__cdecl *)(std::__shared_weak_count *__hidden))shared_owners;
    goto LABEL_6;
  }
  uint64_t v14 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v13;
  (*(void (**)(uint64_t, void *))(*(void *)p_shared_owners + 24))(p_shared_owners, v13);
LABEL_6:
  p_get_deleter = &v3[2].__get_deleter;
  if (&v3[2].__get_deleter == v13) {
    goto LABEL_15;
  }
  uint64_t v7 = v14;
  uint64_t v8 = v3[3].~__shared_weak_count_0;
  if ((char *)v14 != (char *)v13)
  {
    if ((char *)v8 != (char *)p_get_deleter)
    {
      uint64_t v14 = v3[3].~__shared_weak_count_0;
      v3[3].~__shared_weak_count_0 = v7;
      dispatch_object_t v9 = v8;
      if ((char *)v8 == (char *)v13) {
        goto LABEL_24;
      }
      goto LABEL_16;
    }
    (*((void (**)(const void *(__cdecl **)(const std::__shared_weak_count *__hidden, const std::type_info *), void *))*p_get_deleter
     + 3))(&v3[2].__get_deleter, v13);
    (*(void (**)(void (__cdecl *)(std::__shared_weak_count *__hidden)))(*(void *)v3[3].~__shared_weak_count_0
                                                                                 + 32))(v3[3].~__shared_weak_count_0);
    v3[3].~__shared_weak_count_0 = v14;
    uint64_t v14 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v13;
LABEL_15:
    dispatch_object_t v9 = v14;
    if ((char *)v14 == (char *)v13) {
      goto LABEL_24;
    }
    goto LABEL_16;
  }
  if ((char *)v8 == (char *)p_get_deleter)
  {
    memset(v15, 170, 24);
    (*(void (**)(void *, void *))(v13[0] + 24))(v13, v15);
    (*(void (**)(void (__cdecl *)(std::__shared_weak_count *__hidden)))(*(void *)v14 + 32))(v14);
    uint64_t v14 = 0;
    (*(void (**)(void (__cdecl *)(std::__shared_weak_count *__hidden), void *))(*(void *)v3[3].~__shared_weak_count_0
                                                                                           + 24))(v3[3].~__shared_weak_count_0, v13);
    (*(void (**)(void (__cdecl *)(std::__shared_weak_count *__hidden)))(*(void *)v3[3].~__shared_weak_count_0
                                                                                 + 32))(v3[3].~__shared_weak_count_0);
    v3[3].~__shared_weak_count_0 = 0;
    uint64_t v14 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v13;
    (*(void (**)(void *, const void *(__cdecl **)(const std::__shared_weak_count *__hidden, const std::type_info *)))(v15[0] + 24))(v15, &v3[2].__get_deleter);
    (*(void (**)(void *))(v15[0] + 32))(v15);
    v3[3].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))p_get_deleter;
    dispatch_object_t v9 = v14;
    if ((char *)v14 == (char *)v13) {
      goto LABEL_24;
    }
  }
  else
  {
    (*(void (**)(void *, const void *(__cdecl **)(const std::__shared_weak_count *__hidden, const std::type_info *)))(v13[0] + 24))(v13, &v3[2].__get_deleter);
    (*(void (**)(void (__cdecl *)(std::__shared_weak_count *__hidden)))(*(void *)v14 + 32))(v14);
    uint64_t v14 = v3[3].~__shared_weak_count_0;
    uint64_t v10 = v14;
    v3[3].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))p_get_deleter;
    dispatch_object_t v9 = v10;
    if ((char *)v10 == (char *)v13)
    {
LABEL_24:
      (*(void (**)(void *))(v13[0] + 32))(v13);
      uint64_t v11 = v2[1].__shared_owners_;
      if (v11 == p_shared_owners) {
        goto LABEL_25;
      }
      goto LABEL_19;
    }
  }
LABEL_16:
  if (v9) {
    (*(void (**)(void (__cdecl *)(std::__shared_weak_count *__hidden)))(*(void *)v9 + 40))(v9);
  }
  uint64_t v11 = v2[1].__shared_owners_;
  if (v11 == p_shared_owners)
  {
LABEL_25:
    (*(void (**)(uint64_t))(*(void *)p_shared_owners + 32))(p_shared_owners);
    operator delete(v2);
    uint64_t v12 = a1[2];
    if (!v12) {
      goto LABEL_28;
    }
    goto LABEL_26;
  }
LABEL_19:
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 40))(v11);
  }
  operator delete(v2);
  uint64_t v12 = a1[2];
  if (v12)
  {
LABEL_26:
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
LABEL_28:
  operator delete(a1);
}

void sub_1C5B00E00(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *BasebandTransport::getSupportedProtocols@<X0>(BasebandTransport *this@<X0>, void *a2@<X8>)
{
  *a2 = a2;
  a2[1] = a2;
  a2[2] = 0;
  uint64_t result = (_DWORD *)capabilities::radio::vendor(this);
  if (result == 1)
  {
    id v13 = operator new(0x18uLL);
    v13[4] = 0;
    *(void *)id v13 = &v33;
    *((void *)v13 + 1) = &v33;
    xpc_object_t v34 = v13;
    uint64_t v14 = operator new(0x18uLL);
    v14[4] = 1;
    *(void *)uint64_t v14 = v13;
    *((void *)v14 + 1) = &v33;
    *((void *)v13 + 1) = v14;
    int v15 = operator new(0x18uLL);
    void v15[4] = 2;
    *(void *)int v15 = v14;
    *((void *)v15 + 1) = &v33;
    *((void *)v14 + 1) = v15;
    uint64_t v16 = operator new(0x18uLL);
    v16[4] = 3;
    *(void *)uint64_t v16 = v15;
    *((void *)v16 + 1) = &v33;
    *((void *)v15 + 1) = v16;
    int v17 = operator new(0x18uLL);
    v17[4] = 4;
    *(void *)int v17 = v16;
    *((void *)v17 + 1) = &v33;
    *((void *)v16 + 1) = v17;
    uint64_t v18 = operator new(0x18uLL);
    uint8_t v18[4] = 5;
    *(void *)uint64_t v18 = v17;
    *((void *)v18 + 1) = &v33;
    *((void *)v17 + 1) = v18;
    uint64_t v19 = operator new(0x18uLL);
    void v19[4] = 10;
    *(void *)uint64_t v19 = v18;
    *((void *)v19 + 1) = &v33;
    *((void *)v18 + 1) = v19;
    int v20 = operator new(0x18uLL);
    v20[4] = 12;
    *(void *)int v20 = v19;
    *((void *)v20 + 1) = &v33;
    *((void *)v19 + 1) = v20;
    uint64_t v21 = operator new(0x18uLL);
    v21[4] = 14;
    *(void *)uint64_t v21 = v20;
    *((void *)v21 + 1) = &v33;
    *((void *)v20 + 1) = v21;
    uint64_t v33 = v21;
    uint64_t v35 = 9;
    uint64_t result = (_DWORD *)capabilities::radio::mav20Plus((capabilities::radio *)v21);
    if (result)
    {
      unint64_t v22 = operator new(0x18uLL);
      v22[4] = 11;
      int v23 = v33;
      *(void *)unint64_t v22 = v33;
      *((void *)v22 + 1) = &v33;
      v23[1] = v22;
      uint64_t v24 = v35;
      uint64_t v33 = v22;
      ++v35;
      uint64_t result = operator new(0x18uLL);
      result[4] = 15;
      *(void *)uint64_t result = v22;
      *((void *)result + 1) = &v33;
      *((void *)v22 + 1) = result;
      uint64_t v33 = result;
      uint64_t v35 = v24 + 2;
    }
    if (a2[2])
    {
      uint64_t v25 = *a2;
      uint64_t result = (_DWORD *)a2[1];
      uint64_t v26 = *(void *)result;
      *(void *)(v26 + 8) = *(void *)(*a2 + 8);
      **(void **)(v25 + 8) = v26;
      a2[2] = 0;
      if (result != (_DWORD *)a2)
      {
        do
        {
          int v27 = (void *)*((void *)result + 1);
          operator delete(result);
          uint64_t result = v27;
        }
        while (v27 != a2);
      }
    }
  }
  else
  {
    if (result != 2) {
      return result;
    }
    int v4 = operator new(0x18uLL);
    v4[4] = 6;
    *(void *)int v4 = &v33;
    *((void *)v4 + 1) = &v33;
    xpc_object_t v34 = v4;
    id v5 = operator new(0x18uLL);
    v5[4] = 7;
    *(void *)id v5 = v4;
    *((void *)v5 + 1) = &v33;
    *((void *)v4 + 1) = v5;
    id v6 = operator new(0x18uLL);
    v6[4] = 8;
    *(void *)id v6 = v5;
    *((void *)v6 + 1) = &v33;
    *((void *)v5 + 1) = v6;
    uint64_t v7 = operator new(0x18uLL);
    v7[4] = 9;
    *(void *)uint64_t v7 = v6;
    *((void *)v7 + 1) = &v33;
    *((void *)v6 + 1) = v7;
    uint64_t v8 = operator new(0x18uLL);
    v8[4] = 10;
    *(void *)uint64_t v8 = v7;
    *((void *)v8 + 1) = &v33;
    *((void *)v7 + 1) = v8;
    uint64_t v33 = v8;
    uint64_t v35 = 5;
    uint64_t result = (_DWORD *)capabilities::abs::supportsETSProtocol((capabilities::abs *)v8);
    if (result)
    {
      uint64_t result = operator new(0x18uLL);
      result[4] = 13;
      dispatch_object_t v9 = v33;
      *(void *)uint64_t result = v33;
      *((void *)result + 1) = &v33;
      v9[1] = result;
      uint64_t v33 = result;
      ++v35;
    }
    if (a2[2])
    {
      uint64_t v10 = *a2;
      uint64_t result = (_DWORD *)a2[1];
      uint64_t v11 = *(void *)result;
      *(void *)(v11 + 8) = *(void *)(*a2 + 8);
      **(void **)(v10 + 8) = v11;
      a2[2] = 0;
      if (result != (_DWORD *)a2)
      {
        do
        {
          uint64_t v12 = (void *)*((void *)result + 1);
          operator delete(result);
          uint64_t result = v12;
        }
        while (v12 != a2);
      }
    }
  }
  uint64_t v28 = v35;
  if (v35)
  {
    uint64_t v30 = v33;
    uint64_t v29 = v34;
    uint64_t v31 = *v34;
    *(void *)(v31 + 8) = v33[1];
    *(void *)v30[1] = v31;
    uint64_t v32 = *a2;
    *(void *)(v32 + 8) = v29;
    *uint64_t v29 = v32;
    *a2 = v30;
    v30[1] = a2;
    a2[2] += v28;
  }
  return result;
}

void sub_1C5B01238(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::list<std::pair<unsigned long long,unsigned int>>::~list((uint64_t *)va);
  std::list<std::pair<unsigned long long,unsigned int>>::~list(v2);
  _Unwind_Resume(a1);
}

void sub_1C5B01268(_Unwind_Exception *a1)
{
  std::list<std::pair<unsigned long long,unsigned int>>::~list(v1);
  _Unwind_Resume(a1);
}

void sub_1C5B01280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  do
  {
    uint64_t v16 = (void *)v13[1];
    operator delete(v13);
    id v13 = v16;
  }
  while (v16 != v14);
  std::list<std::pair<unsigned long long,unsigned int>>::~list(v12);
  _Unwind_Resume(a1);
}

void BasebandTransport::getSupportedProtocolsAsStringLowerCase(BasebandTransport *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = (uint64_t)a2;
  a2[1] = (uint64_t)a2;
  a2[2] = 0;
  memset(v20, 170, sizeof(v20));
  BasebandTransport::getSupportedProtocols(this, v20);
  for (uint64_t i = v20[1]; (void *)i != v20; uint64_t i = *(void *)(i + 8))
  {
    int v4 = *(_DWORD *)(i + 16);
    memset(v19, 170, sizeof(v19));
    switch(v4)
    {
      case 0:
        char v5 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 3;
        __darwin_ct_rune_t v9 = 4997712;
        goto LABEL_30;
      case 1:
        char v5 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 3;
        __darwin_ct_rune_t v9 = 4997715;
        goto LABEL_30;
      case 2:
        char v5 = 0;
        char v10 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 4;
        __darwin_ct_rune_t v11 = 1195460932;
        goto LABEL_26;
      case 3:
        char v5 = 0;
        char v10 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 4;
        __darwin_ct_rune_t v11 = 1397114194;
        goto LABEL_26;
      case 4:
        char v5 = 0;
        char v10 = 0;
        char v6 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 5;
        strcpy((char *)v19, "QMUX1");
        char v7 = 1;
        break;
      case 5:
        char v5 = 0;
        char v10 = 0;
        char v6 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 5;
        strcpy((char *)v19, "QMUX2");
        char v7 = 1;
        break;
      case 6:
        char v5 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 3;
        __darwin_ct_rune_t v9 = 5066578;
        goto LABEL_30;
      case 7:
        char v5 = 0;
        char v10 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 4;
        __darwin_ct_rune_t v11 = 1414483778;
        goto LABEL_26;
      case 8:
        char v5 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 3;
        __darwin_ct_rune_t v9 = 4805185;
        goto LABEL_30;
      case 9:
        char v5 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 3;
        __darwin_ct_rune_t v9 = 5526611;
        goto LABEL_30;
      case 10:
        char v10 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 2;
        strcpy((char *)v19, "AT");
        char v5 = 1;
        break;
      case 11:
        char v5 = 0;
        char v10 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 4;
        __darwin_ct_rune_t v11 = 1280328769;
        goto LABEL_26;
      case 12:
        char v5 = 0;
        char v10 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 8;
        strcpy((char *)v19, "MEDIACTL");
        break;
      case 13:
        char v5 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 3;
        __darwin_ct_rune_t v9 = 5461061;
        goto LABEL_30;
      case 14:
        char v5 = 0;
        char v10 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 4;
        strcpy((char *)v19, "GNSS");
        char v6 = 1;
        break;
      case 15:
        char v5 = 0;
        char v10 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 4;
        __darwin_ct_rune_t v11 = 1397965905;
        goto LABEL_26;
      case 16:
        char v5 = 0;
        char v10 = 0;
        char v6 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 5;
        strcpy((char *)v19, "RCTTH");
        char v7 = 1;
        break;
      case 17:
        char v5 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 3;
        __darwin_ct_rune_t v9 = 5260097;
        goto LABEL_30;
      case 18:
        char v5 = 0;
        char v10 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 4;
        __darwin_ct_rune_t v11 = 1297040214;
        goto LABEL_26;
      case 19:
        char v5 = 0;
        char v10 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 4;
        __darwin_ct_rune_t v11 = 1129335117;
LABEL_26:
        v19[0] = v11;
        char v6 = 1;
        LOBYTE(v19[1]) = 0;
        break;
      case 20:
        char v5 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 3;
        __darwin_ct_rune_t v9 = 4999236;
        goto LABEL_30;
      case 21:
        char v5 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 3;
        __darwin_ct_rune_t v9 = 5789005;
        goto LABEL_30;
      case 22:
        char v5 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 3;
        __darwin_ct_rune_t v9 = 4407622;
LABEL_30:
        v19[0] = v9;
        char v10 = 1;
        break;
      default:
        char v5 = 0;
        char v10 = 0;
        char v6 = 0;
        char v7 = 0;
        HIBYTE(v19[5]) = 7;
        strcpy((char *)v19, "Unknown");
        char v8 = 1;
        break;
    }
    LOBYTE(v19[0]) = __tolower(SLOBYTE(v19[0]));
    BYTE1(v19[0]) = __tolower(SBYTE1(v19[0]));
    if ((v5 & 1) == 0)
    {
      BYTE2(v19[0]) = __tolower(SBYTE2(v19[0]));
      if ((v10 & 1) == 0)
      {
        HIBYTE(v19[0]) = __tolower(SHIBYTE(v19[0]));
        if ((v6 & 1) == 0)
        {
          LOBYTE(v19[1]) = __tolower(SLOBYTE(v19[1]));
          if ((v7 & 1) == 0)
          {
            BYTE1(v19[1]) = __tolower(SBYTE1(v19[1]));
            BYTE2(v19[1]) = __tolower(SBYTE2(v19[1]));
            if ((v8 & 1) == 0) {
              HIBYTE(v19[1]) = __tolower(SHIBYTE(v19[1]));
            }
          }
        }
      }
    }
    uint64_t v12 = operator new(0x28uLL);
    id v13 = (std::string *)(v12 + 2);
    void *v12 = 0;
    v12[1] = 0;
    if (SHIBYTE(v19[5]) < 0)
    {
      std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)v19, *(std::string::size_type *)&v19[2]);
    }
    else
    {
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)v19;
      v12[4] = *(void *)&v19[4];
    }
    uint64_t v14 = *a2;
    void *v12 = *a2;
    v12[1] = a2;
    *(void *)(v14 + 8) = v12;
    *a2 = (uint64_t)v12;
    ++a2[2];
    if (SHIBYTE(v19[5]) < 0) {
      operator delete(*(void **)v19);
    }
  }
  if (v20[2])
  {
    uint64_t v16 = v20[0];
    int v15 = (void *)v20[1];
    uint64_t v17 = *(void *)v20[1];
    *(void *)(v17 + 8) = *(void *)(v20[0] + 8);
    **(void **)(v16 + 8) = v17;
    v20[2] = 0;
    if (v15 != v20)
    {
      do
      {
        uint64_t v18 = (void *)v15[1];
        operator delete(v15);
        int v15 = v18;
      }
      while (v18 != v20);
    }
  }
}

void sub_1C5B0187C(_Unwind_Exception *a1)
{
  std::list<std::string>::~list(v1);
  _Unwind_Resume(a1);
}

void sub_1C5B01890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  uint64_t v17 = v16;
  operator delete(v17);
  if (a14 < 0) {
    operator delete(__p);
  }
  std::list<std::pair<unsigned long long,unsigned int>>::~list(&a15);
  std::list<std::string>::~list(v15);
  _Unwind_Resume(a1);
}

uint64_t BasebandTransport::asStringLowerCase@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  memset(a2, 170, 24);
  uint64_t result = BasebandTransport::asString(a1, (char *)a2);
  uint64_t v4 = *((unsigned __int8 *)a2 + 23);
  int v5 = (char)v4;
  char v6 = (char *)a2 + v4;
  if (v5 >= 0) {
    char v7 = v6;
  }
  else {
    char v7 = (unsigned char *)(*a2 + a2[1]);
  }
  if (v5 >= 0) {
    char v8 = a2;
  }
  else {
    char v8 = (unsigned char *)*a2;
  }
  for (; v8 != v7; ++v8)
  {
    uint64_t result = __tolower((char)*v8);
    *char v8 = result;
  }
  return result;
}

void sub_1C5B019A8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *std::list<std::string>::~list(char *a1)
{
  if (*((void *)a1 + 2))
  {
    uint64_t v2 = *(void *)a1;
    uint64_t v3 = (char *)*((void *)a1 + 1);
    uint64_t v4 = *(void *)v3;
    *(void *)(v4 + 8) = *(void *)(*(void *)a1 + 8);
    **(void **)(v2 + 8) = v4;
    *((void *)a1 + 2) = 0;
    if (v3 != a1)
    {
      do
      {
        char v6 = (char *)*((void *)v3 + 1);
        if (v3[39] < 0) {
          operator delete(*((void **)v3 + 2));
        }
        operator delete(v3);
        uint64_t v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void BasebandTransport::getSupportedProtocolsAsString(BasebandTransport *this@<X0>, void *a2@<X8>)
{
  *a2 = a2;
  a2[1] = a2;
  a2[2] = 0;
  memset(v18, 170, sizeof(v18));
  BasebandTransport::getSupportedProtocols(this, v18);
  uint64_t v3 = (uint64_t *)v18[1];
  if ((void *)v18[1] != v18)
  {
    unint64_t v4 = a2[2];
    unint64_t v5 = v4 + 1;
    char v6 = (void *)*a2;
    uint64_t v7 = v18[1];
    do
    {
      char v8 = 8;
      unint64_t v9 = 0x4C5443414944454DLL;
      switch(*(_DWORD *)(v7 + 16))
      {
        case 0:
          unint64_t v9 = v4 & 0xFFFFFFFF00000000 | 0x4C4250;
          char v8 = 3;
          break;
        case 1:
          unint64_t v9 = (v4 & 0xFFFFFFFF00000000 | 0x4C4250) + 3;
          char v8 = 3;
          break;
        case 2:
          uint64_t v10 = 1195460932;
          goto LABEL_25;
        case 3:
          uint64_t v10 = 1397114194;
          goto LABEL_25;
        case 4:
          uint64_t v11 = 0x3158554D51;
          goto LABEL_21;
        case 5:
          uint64_t v11 = 0x3258554D51;
          goto LABEL_21;
        case 6:
          unsigned int v12 = 5066578;
          goto LABEL_29;
        case 7:
          uint64_t v10 = 1414483778;
          goto LABEL_25;
        case 8:
          unsigned int v12 = 4805185;
          goto LABEL_29;
        case 9:
          unsigned int v12 = 5526611;
          goto LABEL_29;
        case 0xA:
          unint64_t v13 = v4 & 0xFFFFFFFFFF000000 | 0x5441;
          char v8 = 2;
          goto LABEL_30;
        case 0xB:
          uint64_t v10 = 1280328769;
          goto LABEL_25;
        case 0xC:
          break;
        case 0xD:
          unsigned int v12 = 5461061;
          goto LABEL_29;
        case 0xE:
          unint64_t v9 = (v4 & 0xFFFFFF0000000000 | 0x53534451) + 2550;
          char v8 = 4;
          break;
        case 0xF:
          unint64_t v9 = v4 & 0xFFFFFF0000000000 | 0x53534451;
          char v8 = 4;
          break;
        case 0x10:
          uint64_t v11 = 0x4854544352;
LABEL_21:
          unint64_t v13 = v4 & 0xFFFF000000000000 | v11 & 0xFFFFFFFFFFFFLL;
          char v8 = 5;
          goto LABEL_30;
        case 0x11:
          unsigned int v12 = 5260097;
          goto LABEL_29;
        case 0x12:
          uint64_t v10 = 1297040214;
          goto LABEL_25;
        case 0x13:
          uint64_t v10 = 1129335117;
LABEL_25:
          unint64_t v13 = v4 & 0xFFFFFF0000000000 | v10 & 0xFFFFFFFFFFLL;
          char v8 = 4;
          goto LABEL_30;
        case 0x14:
          unint64_t v9 = (v4 & 0xFFFFFFFF00000000 | 0x4C4250) + 1524;
          char v8 = 3;
          break;
        case 0x15:
          unsigned int v12 = 5789005;
          goto LABEL_29;
        case 0x16:
          unsigned int v12 = 4407622;
LABEL_29:
          unint64_t v13 = v4 & 0xFFFFFFFF00000000 | v12;
          char v8 = 3;
LABEL_30:
          unint64_t v9 = v13;
          break;
        default:
          char v8 = 7;
          unint64_t v9 = 0x6E776F6E6B6E55;
          break;
      }
      uint64_t v14 = operator new(0x28uLL);
      v14[2] = v9;
      void v14[3] = 0;
      *((unsigned char *)v14 + 39) = v8;
      *uint64_t v14 = v6;
      v14[1] = a2;
      v6[1] = v14;
      *a2 = v14;
      a2[2] = v5;
      uint64_t v7 = *(void *)(v7 + 8);
      ++v5;
      unint64_t v4 = v9;
      char v6 = v14;
    }
    while ((void *)v7 != v18);
  }
  if (v18[2])
  {
    uint64_t v15 = v18[0];
    uint64_t v16 = *v3;
    *(void *)(v16 + 8) = *(void *)(v18[0] + 8);
    **(void **)(v15 + 8) = v16;
    v18[2] = 0;
    if (v3 != v18)
    {
      do
      {
        uint64_t v17 = (uint64_t *)v3[1];
        operator delete(v3);
        uint64_t v3 = v17;
      }
      while (v17 != v18);
    }
  }
}

void sub_1C5B01D08(_Unwind_Exception *a1)
{
  std::list<std::string>::~list(v1);
  _Unwind_Resume(a1);
}

void sub_1C5B01D1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::list<std::pair<unsigned long long,unsigned int>>::~list((uint64_t *)va);
  std::list<std::string>::~list(v2);
  _Unwind_Resume(a1);
}

uint64_t BasebandTransport::asString@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  switch((int)result)
  {
    case 0:
      a2[23] = 3;
      *(_DWORD *)a2 = 4997712;
      break;
    case 1:
      a2[23] = 3;
      *(_DWORD *)a2 = 4997715;
      break;
    case 2:
      a2[23] = 4;
      strcpy(a2, "DIAG");
      break;
    case 3:
      a2[23] = 4;
      strcpy(a2, "REFS");
      break;
    case 4:
      a2[23] = 5;
      strcpy(a2, "QMUX1");
      break;
    case 5:
      a2[23] = 5;
      strcpy(a2, "QMUX2");
      break;
    case 6:
      a2[23] = 3;
      *(_DWORD *)a2 = 5066578;
      break;
    case 7:
      a2[23] = 4;
      strcpy(a2, "BOOT");
      break;
    case 8:
      a2[23] = 3;
      *(_DWORD *)a2 = 4805185;
      break;
    case 9:
      a2[23] = 3;
      *(_DWORD *)a2 = 5526611;
      break;
    case 10:
      a2[23] = 2;
      strcpy(a2, "AT");
      break;
    case 11:
      a2[23] = 4;
      strcpy(a2, "ADPL");
      break;
    case 12:
      a2[23] = 8;
      strcpy(a2, "MEDIACTL");
      break;
    case 13:
      a2[23] = 3;
      *(_DWORD *)a2 = 5461061;
      break;
    case 14:
      a2[23] = 4;
      strcpy(a2, "GNSS");
      break;
    case 15:
      a2[23] = 4;
      strcpy(a2, "QDSS");
      break;
    case 16:
      a2[23] = 5;
      strcpy(a2, "RCTTH");
      break;
    case 17:
      a2[23] = 3;
      *(_DWORD *)a2 = 5260097;
      break;
    case 18:
      a2[23] = 4;
      strcpy(a2, "VCOM");
      break;
    case 19:
      a2[23] = 4;
      strcpy(a2, "MIPC");
      break;
    case 20:
      a2[23] = 3;
      *(_DWORD *)a2 = 4999236;
      break;
    case 21:
      a2[23] = 3;
      *(_DWORD *)a2 = 5789005;
      break;
    case 22:
      a2[23] = 3;
      *(_DWORD *)a2 = 4407622;
      break;
    default:
      a2[23] = 7;
      strcpy(a2, "Unknown");
      break;
  }
  return result;
}

{
  switch((int)result)
  {
    case 0:
      a2[23] = 8;
      strcpy(a2, "NotReady");
      break;
    case 1:
      a2[23] = 5;
      strcpy(a2, "Ready");
      break;
    case 2:
      a2[23] = 5;
      strcpy(a2, "Error");
      break;
    case 3:
      a2[23] = 7;
      strcpy(a2, "Stalled");
      break;
    default:
      a2[23] = 7;
      strcpy(a2, "Unknown");
      break;
  }
  return result;
}

uint64_t BasebandTransport::asProtocol(char *__s1)
{
  uint64_t v1 = __s1;
  if ((__s1[23] & 0x80000000) == 0)
  {
    uint64_t result = strcmp(__s1, "PBL");
    if (!result) {
      return result;
    }
    if (!strcmp(v1, "SBL")) {
      return 1;
    }
    if (strcasecmp(v1, "DIAG"))
    {
      if (strcasecmp(v1, "REFS"))
      {
        if (strcasecmp(v1, "QMUX1"))
        {
          if (strcasecmp(v1, "QMUX2"))
          {
            if (strcasecmp(v1, "ROM"))
            {
              if (strcasecmp(v1, "BOOT"))
              {
                if (strcasecmp(v1, "ARI"))
                {
                  if (strcasecmp(v1, "STT"))
                  {
                    if (strcasecmp(v1, "AT"))
                    {
                      if (strcasecmp(v1, "ADPL"))
                      {
                        if (strcasecmp(v1, "MEDIACTL"))
                        {
                          if (strcasecmp(v1, "ETS"))
                          {
                            if (strcasecmp(v1, "GNSS"))
                            {
                              if (strcasecmp(v1, "QDSS"))
                              {
                                if (strcasecmp(v1, "RCTTH"))
                                {
                                  if (strcasecmp(v1, "ACP"))
                                  {
                                    if (strcasecmp(v1, "VCOM"))
                                    {
                                      if (strcasecmp(v1, "MIPC"))
                                      {
                                        if (strcasecmp(v1, "DHL"))
                                        {
                                          if (strcasecmp(v1, "MUX")) {
                                            goto LABEL_24;
                                          }
                                          return 21;
                                        }
                                        return 20;
                                      }
                                      return 19;
                                    }
                                    return 18;
                                  }
                                  return 17;
                                }
                                return 16;
                              }
                              return 15;
                            }
                            return 14;
                          }
                          return 13;
                        }
                        return 12;
                      }
                      return 11;
                    }
                    return 10;
                  }
                  return 9;
                }
                return 8;
              }
              return 7;
            }
            return 6;
          }
          return 5;
        }
        return 4;
      }
      return 3;
    }
    return 2;
  }
  uint64_t v1 = *(const char **)__s1;
  uint64_t result = strcmp(*(const char **)__s1, "PBL");
  if (!result) {
    return result;
  }
  if (!strcmp(v1, "SBL")) {
    return 1;
  }
  if (!strcasecmp(v1, "DIAG")) {
    return 2;
  }
  if (!strcasecmp(v1, "REFS")) {
    return 3;
  }
  if (!strcasecmp(v1, "QMUX1")) {
    return 4;
  }
  if (!strcasecmp(v1, "QMUX2")) {
    return 5;
  }
  if (!strcasecmp(v1, "ROM")) {
    return 6;
  }
  if (!strcasecmp(v1, "BOOT")) {
    return 7;
  }
  if (!strcasecmp(v1, "ARI")) {
    return 8;
  }
  if (!strcasecmp(v1, "STT")) {
    return 9;
  }
  if (!strcasecmp(v1, "AT")) {
    return 10;
  }
  if (!strcasecmp(v1, "ADPL")) {
    return 11;
  }
  if (!strcasecmp(v1, "MEDIACTL")) {
    return 12;
  }
  if (!strcasecmp(v1, "ETS")) {
    return 13;
  }
  if (!strcasecmp(v1, "GNSS")) {
    return 14;
  }
  if (!strcasecmp(v1, "QDSS")) {
    return 15;
  }
  if (!strcasecmp(v1, "RCTTH")) {
    return 16;
  }
  if (!strcasecmp(v1, "ACP")) {
    return 17;
  }
  if (!strcasecmp(v1, "VCOM")) {
    return 18;
  }
  if (!strcasecmp(v1, "MIPC")) {
    return 19;
  }
  if (!strcasecmp(v1, "DHL")) {
    return 20;
  }
  if (!strcasecmp(v1, "MUX")) {
    return 21;
  }
LABEL_24:
  if (!strcasecmp(v1, "FAC")) {
    return 22;
  }
  else {
    return 23;
  }
}

uint64_t BasebandTransport::getDefaultTransportIOReadSize(capabilities::abs *a1)
{
  if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(a1)) {
    return 0x4000;
  }
  else {
    return 0x8000;
  }
}

uint64_t BasebandTransport::getDefaultTransportIOReadCount(capabilities::abs *a1)
{
  int v1 = (int)a1;
  char shouldUseMinBasebandTransportIOReadCount = capabilities::abs::shouldUseMinBasebandTransportIOReadCount(a1);
  if (v1 == 15) {
    int v3 = 36;
  }
  else {
    int v3 = 4;
  }
  if (v1 == 16) {
    int v4 = 36;
  }
  else {
    int v4 = v3;
  }
  if (v1 == 2) {
    unsigned int v5 = 16;
  }
  else {
    unsigned int v5 = v4;
  }
  if (shouldUseMinBasebandTransportIOReadCount) {
    return 4;
  }
  else {
    return v5;
  }
}

double BasebandTransport::Status::Status(BasebandTransport::Status *this)
{
  *(_DWORD *)this = 0;
  *((unsigned char *)this + 4) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(_DWORD *)this = 0;
  *((unsigned char *)this + 4) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

double BasebandTransport::Status::init(BasebandTransport::Status *this)
{
  *(_DWORD *)this = 0;
  *((unsigned char *)this + 4) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

uint64_t BasebandTransport::Status::toString@<X0>(BasebandTransport::Status *this@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v36 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v35[7] = v4;
  v35[8] = v4;
  v35[5] = v4;
  v35[6] = v4;
  v35[3] = v4;
  v35[4] = v4;
  v35[1] = v4;
  v35[2] = v4;
  long long v34 = v4;
  v35[0] = v4;
  *(_OWORD *)uint64_t v32 = v4;
  long long v33 = v4;
  long long v30 = v4;
  long long v31 = v4;
  long long v28 = v4;
  long long v29 = v4;
  long long v27 = v4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v27);
  unsigned int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"State: ", 7);
  switch(*(_DWORD *)this)
  {
    case 0:
      uint64_t v6 = 8;
      char v26 = 8;
      strcpy((char *)__p, "NotReady");
      break;
    case 1:
      uint64_t v6 = 5;
      char v26 = 5;
      strcpy((char *)__p, "Ready");
      break;
    case 2:
      uint64_t v6 = 5;
      char v26 = 5;
      strcpy((char *)__p, "Error");
      break;
    case 3:
      uint64_t v6 = 7;
      char v26 = 7;
      LODWORD(__p[0]) = 1818326099;
      int v7 = 1684368492;
      goto LABEL_7;
    default:
      uint64_t v6 = 7;
      char v26 = 7;
      LODWORD(__p[0]) = 1852534357;
      int v7 = 1853321070;
LABEL_7:
      *(_DWORD *)((char *)__p + 3) = v7;
      HIBYTE(__p[0]) = 0;
      break;
  }
  char v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, v6);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", ", 2);
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Async: ", 7);
  *(_DWORD *)((char *)v10 + *(void *)(*v10 - 24) + 8) |= 1u;
  uint64_t v11 = (void *)std::ostream::operator<<();
  unsigned int v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Total Rx: ", 10);
  unint64_t v13 = (void *)std::ostream::operator<<();
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" KB, ", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Total Tx: ", 10);
  uint64_t v15 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" KB", 3);
  if ((v26 & 0x80000000) == 0)
  {
    char v16 = BYTE8(v34);
    if ((BYTE8(v34) & 0x10) == 0) {
      goto LABEL_10;
    }
LABEL_13:
    uint64_t v18 = v34;
    if ((unint64_t)v34 < *((void *)&v31 + 1))
    {
      *(void *)&long long v34 = *((void *)&v31 + 1);
      uint64_t v18 = *((void *)&v31 + 1);
    }
    uint64_t v19 = (const void *)v31;
    size_t v17 = v18 - v31;
    if ((unint64_t)(v18 - v31) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_27;
    }
    goto LABEL_16;
  }
  operator delete(__p[0]);
  char v16 = BYTE8(v34);
  if ((BYTE8(v34) & 0x10) != 0) {
    goto LABEL_13;
  }
LABEL_10:
  if ((v16 & 8) == 0)
  {
    size_t v17 = 0;
    a2[23] = 0;
    goto LABEL_23;
  }
  uint64_t v19 = (const void *)*((void *)&v29 + 1);
  size_t v17 = *((void *)&v30 + 1) - *((void *)&v29 + 1);
  if (*((void *)&v30 + 1) - *((void *)&v29 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_27:
  }
    std::string::__throw_length_error[abi:ne180100]();
LABEL_16:
  if (v17 >= 0x17)
  {
    uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v20 = v17 | 7;
    }
    uint64_t v21 = v20 + 1;
    unint64_t v22 = operator new(v20 + 1);
    *((void *)a2 + 1) = v17;
    *((void *)a2 + 2) = v21 | 0x8000000000000000;
    *(void *)a2 = v22;
    a2 = v22;
    goto LABEL_22;
  }
  a2[23] = v17;
  if (v17) {
LABEL_22:
  }
    memmove(a2, v19, v17);
LABEL_23:
  a2[v17] = 0;
  *(void *)&long long v27 = *MEMORY[0x1E4FBA408];
  uint64_t v23 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)&v27 + *(void *)(v27 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(void *)&long long v28 = v23;
  *((void *)&v28 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v33) < 0) {
    operator delete(v32[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C8795140](v35);
}

void sub_1C5B02AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C5B02AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t BasebandTransport::Parameters::toString@<X0>(BasebandTransport::Parameters *this@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v41 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v40[7] = v4;
  v40[8] = v4;
  v40[5] = v4;
  v40[6] = v4;
  v40[3] = v4;
  v40[4] = v4;
  v40[1] = v4;
  void v40[2] = v4;
  long long v39 = v4;
  v40[0] = v4;
  *(_OWORD *)unint64_t v37 = v4;
  long long v38 = v4;
  long long v35 = v4;
  long long v36 = v4;
  long long v33 = v4;
  long long v34 = v4;
  long long v32 = v4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v32);
  switch(*(_DWORD *)this)
  {
    case 0:
      size_t v5 = 3;
      char v28 = 3;
      strcpy((char *)v27, "PBL");
      break;
    case 1:
      size_t v5 = 3;
      char v28 = 3;
      strcpy((char *)v27, "SBL");
      break;
    case 2:
      size_t v5 = 4;
      char v28 = 4;
      int v6 = 1195460932;
      goto LABEL_25;
    case 3:
      size_t v5 = 4;
      char v28 = 4;
      int v6 = 1397114194;
      goto LABEL_25;
    case 4:
      size_t v5 = 5;
      char v28 = 5;
      strcpy((char *)v27, "QMUX1");
      break;
    case 5:
      size_t v5 = 5;
      char v28 = 5;
      strcpy((char *)v27, "QMUX2");
      break;
    case 6:
      size_t v5 = 3;
      char v28 = 3;
      strcpy((char *)v27, "ROM");
      break;
    case 7:
      size_t v5 = 4;
      char v28 = 4;
      int v6 = 1414483778;
      goto LABEL_25;
    case 8:
      size_t v5 = 3;
      char v28 = 3;
      strcpy((char *)v27, "ARI");
      break;
    case 9:
      size_t v5 = 3;
      char v28 = 3;
      strcpy((char *)v27, "STT");
      break;
    case 0xA:
      size_t v5 = 2;
      char v28 = 2;
      strcpy((char *)v27, "AT");
      break;
    case 0xB:
      size_t v5 = 4;
      char v28 = 4;
      int v6 = 1280328769;
      goto LABEL_25;
    case 0xC:
      size_t v5 = 8;
      char v28 = 8;
      strcpy((char *)v27, "MEDIACTL");
      break;
    case 0xD:
      size_t v5 = 3;
      char v28 = 3;
      strcpy((char *)v27, "ETS");
      break;
    case 0xE:
      size_t v5 = 4;
      char v28 = 4;
      int v6 = 1397968455;
      goto LABEL_25;
    case 0xF:
      size_t v5 = 4;
      char v28 = 4;
      int v6 = 1397965905;
      goto LABEL_25;
    case 0x10:
      size_t v5 = 5;
      char v28 = 5;
      strcpy((char *)v27, "RCTTH");
      break;
    case 0x11:
      size_t v5 = 3;
      char v28 = 3;
      strcpy((char *)v27, "ACP");
      break;
    case 0x12:
      size_t v5 = 4;
      char v28 = 4;
      int v6 = 1297040214;
      goto LABEL_25;
    case 0x13:
      size_t v5 = 4;
      char v28 = 4;
      int v6 = 1129335117;
LABEL_25:
      LODWORD(v27[0]) = v6;
      BYTE4(v27[0]) = 0;
      break;
    case 0x14:
      size_t v5 = 3;
      char v28 = 3;
      strcpy((char *)v27, "DHL");
      break;
    case 0x15:
      size_t v5 = 3;
      char v28 = 3;
      strcpy((char *)v27, "MUX");
      break;
    case 0x16:
      size_t v5 = 3;
      char v28 = 3;
      strcpy((char *)v27, "FAC");
      break;
    default:
      size_t v5 = 7;
      char v28 = 7;
      strcpy((char *)v27, "Unknown");
      break;
  }
  uint64_t v30 = 8250;
  uint64_t v31 = 0;
  HIBYTE(v31) = v5 + 10;
  std::string __p = *(void **)"Protocol: ";
  memcpy((char *)&v30 + 2, v27, v5);
  *((unsigned char *)&v30 + v5 + 2) = 0;
  if (v31 >= 0) {
    uint64_t p_p = (uint64_t)&__p;
  }
  else {
    uint64_t p_p = 0x6C6F636F746F7250;
  }
  if (v31 >= 0) {
    uint64_t v8 = HIBYTE(v31);
  }
  else {
    uint64_t v8 = v30;
  }
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, p_p, v8);
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Powersave: ", 11);
  *(_DWORD *)((char *)v11 + *(void *)(*v11 - 24) + 8) |= 1u;
  unsigned int v12 = (void *)std::ostream::operator<<();
  unint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Create Timeout: ", 16);
  uint64_t v14 = (void *)std::ostream::operator<<();
  uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" sec, ", 6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"IO Size: ", 9);
  char v16 = (void *)std::ostream::operator<<();
  size_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" KB, ", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Num Pending Reads: ", 19);
  std::ostream::operator<<();
  if (SHIBYTE(v31) < 0)
  {
    operator delete(__p);
    if ((v28 & 0x80000000) == 0)
    {
LABEL_34:
      char v18 = BYTE8(v39);
      if ((BYTE8(v39) & 0x10) == 0) {
        goto LABEL_35;
      }
LABEL_39:
      uint64_t v20 = v39;
      if ((unint64_t)v39 < *((void *)&v36 + 1))
      {
        *(void *)&long long v39 = *((void *)&v36 + 1);
        uint64_t v20 = *((void *)&v36 + 1);
      }
      uint64_t v21 = (const void *)v36;
      size_t v19 = v20 - v36;
      if ((unint64_t)(v20 - v36) >= 0x7FFFFFFFFFFFFFF8) {
        goto LABEL_53;
      }
      goto LABEL_42;
    }
  }
  else if ((v28 & 0x80000000) == 0)
  {
    goto LABEL_34;
  }
  operator delete(v27[0]);
  char v18 = BYTE8(v39);
  if ((BYTE8(v39) & 0x10) != 0) {
    goto LABEL_39;
  }
LABEL_35:
  if ((v18 & 8) == 0)
  {
    size_t v19 = 0;
    a2[23] = 0;
    goto LABEL_49;
  }
  uint64_t v21 = (const void *)*((void *)&v34 + 1);
  size_t v19 = *((void *)&v35 + 1) - *((void *)&v34 + 1);
  if (*((void *)&v35 + 1) - *((void *)&v34 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_53:
  }
    std::string::__throw_length_error[abi:ne180100]();
LABEL_42:
  if (v19 >= 0x17)
  {
    uint64_t v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17) {
      uint64_t v22 = v19 | 7;
    }
    uint64_t v23 = v22 + 1;
    uint64_t v24 = operator new(v22 + 1);
    *((void *)a2 + 1) = v19;
    *((void *)a2 + 2) = v23 | 0x8000000000000000;
    *(void *)a2 = v24;
    a2 = v24;
    goto LABEL_48;
  }
  a2[23] = v19;
  if (v19) {
LABEL_48:
  }
    memmove(a2, v21, v19);
LABEL_49:
  a2[v19] = 0;
  *(void *)&long long v32 = *MEMORY[0x1E4FBA408];
  uint64_t v25 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)&v32 + *(void *)(v32 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(void *)&long long v33 = v25;
  *((void *)&v33 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v38) < 0) {
    operator delete(v37[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C8795140](v40);
}

void sub_1C5B03228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C5B0323C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
      _Unwind_Resume(a1);
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t BasebandTransport::BasebandTransport(uint64_t a1, void *a2, NSObject **a3)
{
  *(void *)a1 = &unk_1F210C670;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v15, "com.apple.telephony.abm", "ipc.bb");
  int v6 = dispatch_queue_create("ipc.bb", 0);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = v6;
  if (v6)
  {
    int v7 = v6;
    dispatch_retain(v6);
    *(void *)(a1 + 96) = 0;
    dispatch_release(v7);
  }
  else
  {
    *(void *)(a1 + 96) = 0;
  }
  *(void *)a1 = &unk_1F210C938;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v17);
  *(void *)(a1 + 8) = &unk_1F2102CB8;
  *(void *)(a1 + 56) = *a2;
  uint64_t v8 = a2[1];
  *(void *)(a1 + 64) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v16);
  *(void *)a1 = &unk_1F210CA30;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v15);
  *(void *)a1 = &unk_1F210C670;
  *(_DWORD *)(a1 + 104) = 23;
  *(unsigned char *)(a1 + 108) = 0;
  *(void *)(a1 + 112) = 10;
  shouldUseMinBasebandTransportIOReadSize = (capabilities::abs *)capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v9);
  if (shouldUseMinBasebandTransportIOReadSize) {
    int v11 = 0x4000;
  }
  else {
    int v11 = 0x8000;
  }
  *(_DWORD *)(a1 + 120) = v11;
  capabilities::abs::shouldUseMinBasebandTransportIOReadCount(shouldUseMinBasebandTransportIOReadSize);
  *(_DWORD *)(a1 + 124) = 4;
  *(void *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  unsigned int v12 = *a3;
  *(void *)(a1 + 152) = *a3;
  if (v12) {
    dispatch_retain(v12);
  }
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  uint64_t Controller = TelephonyBasebandCreateController();
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 264) = Controller;
  *(void *)(a1 + 285) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 320) = dispatch_group_create();
  *(_DWORD *)(a1 + 328) = 0;
  *(unsigned char *)(a1 + 332) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(void *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(void *)(a1 + 365) = 0;
  return a1;
}

void sub_1C5B03514(_Unwind_Exception *a1)
{
  long long v4 = (const void *)v1[21];
  if (v4) {
    _Block_release(v4);
  }
  if (*v2) {
    _Block_release(*v2);
  }
  size_t v5 = v1[19];
  if (v5) {
    dispatch_release(v5);
  }
  int v6 = (const void *)v1[18];
  if (v6) {
    _Block_release(v6);
  }
  ctu::SharedLoggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v1);
  _Unwind_Resume(a1);
}

const char *BasebandTransport::getName(BasebandTransport *this)
{
  return "ipc.bb";
}

void *ctu::SharedLoggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F210C938;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  int v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1F210C938;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  int v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void BasebandTransport::~BasebandTransport(BasebandTransport *this)
{
  *(void *)this = &unk_1F210C670;
  uint64_t v2 = *((void *)this + 35);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 35));
    *((void *)this + 35) = 0;
    int v3 = *((void *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)char v16 = 0;
      _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Status report disabled", v16, 2u);
    }
  }
  (*(void (**)(BasebandTransport *))(*(void *)this + 80))(this);
  long long v4 = (const void *)*((void *)this + 33);
  if (v4)
  {
    CFRelease(v4);
    *((void *)this + 33) = 0;
  }
  size_t v5 = (void *)*((void *)this + 37);
  if (v5)
  {
    operator delete[](v5);
    *((void *)this + 37) = 0;
  }
  int v6 = *((void *)this + 40);
  if (v6) {
    dispatch_release(v6);
  }
  int v7 = *((void *)this + 39);
  if (v7) {
    dispatch_release(v7);
  }
  uint64_t v8 = (const void *)*((void *)this + 34);
  if (v8) {
    _Block_release(v8);
  }
  unint64_t v9 = (const void *)*((void *)this + 21);
  if (v9) {
    _Block_release(v9);
  }
  uint64_t v10 = (const void *)*((void *)this + 20);
  if (v10) {
    _Block_release(v10);
  }
  int v11 = *((void *)this + 19);
  if (v11) {
    dispatch_release(v11);
  }
  unsigned int v12 = (const void *)*((void *)this + 18);
  if (v12) {
    _Block_release(v12);
  }
  *(void *)this = &unk_1F210C938;
  MEMORY[0x1C87940C0]((char *)this + 8);
  unint64_t v13 = *((void *)this + 12);
  if (v13) {
    dispatch_release(v13);
  }
  uint64_t v14 = *((void *)this + 11);
  if (v14) {
    dispatch_release(v14);
  }
  uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
}

{
  void *v1;
  uint64_t vars8;

  BasebandTransport::~BasebandTransport(this);

  operator delete(v1);
}

void BasebandTransport::timerOff_sync(BasebandTransport *this)
{
  uint64_t v2 = *((void *)this + 35);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 35));
    *((void *)this + 35) = 0;
    int v3 = *((void *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long v4 = 0;
      _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Status report disabled", v4, 2u);
    }
  }
}

void BasebandTransport::create(NSObject **this@<X0>, queue a2@<0:X1>, uint64_t a3@<X8>)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZL14sLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_90;
  void block[4] = &qword_1EBBDCD30;
  if (_MergedGlobals_3 == -1)
  {
    size_t v5 = *(std::__shared_weak_count **)algn_1EBBDCD38;
    uint64_t v8 = qword_1EBBDCD30;
    uint64_t v9 = *(void *)algn_1EBBDCD38;
    if (!*(void *)algn_1EBBDCD38) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  dispatch_once(&_MergedGlobals_3, block);
  size_t v5 = *(std::__shared_weak_count **)algn_1EBBDCD38;
  uint64_t v8 = qword_1EBBDCD30;
  uint64_t v9 = *(void *)algn_1EBBDCD38;
  if (*(void *)algn_1EBBDCD38) {
LABEL_3:
  }
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_4:
  int v6 = *this;
  int v7 = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  BasebandTransport::create((capabilities::radio *)&v8, &v7, a3);
  if (v6) {
    dispatch_release(v6);
  }
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1C5B039AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (v10) {
    dispatch_release(v10);
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void BasebandTransport::create(capabilities::radio *a1@<X0>, NSObject **a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  int v6 = capabilities::radio::vendor(a1);
  if (v6 != 2)
  {
    if (v6 != 3) {
      return;
    }
    int v7 = (std::__shared_weak_count_vtbl *)operator new(0x198uLL);
    uint64_t v8 = (std::__shared_weak_count *)*((void *)a1 + 1);
    uint64_t v25 = *(void *)a1;
    char v26 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = *a2;
    uint64_t v24 = v9;
    if (v9) {
      dispatch_retain(v9);
    }
    BasebandTransport::BasebandTransport((uint64_t)v7, &v25, &v24);
    uint64_t v30 = (BasebandTransportICE *)v7;
    unint64_t v31 = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v10 = (std::__shared_weak_count *)operator new(0x20uLL);
    v10->__shared_owners_ = 0;
    uint64_t p_shared_owners = &v10->__shared_owners_;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210CAC0;
    v10->__shared_weak_owners_ = 0;
    v10[1].__vftable = v7;
    unint64_t v31 = (unint64_t)v10;
    unsigned int v12 = (std::__shared_weak_count *)v7[2].~__shared_weak_count;
    if (v12)
    {
      if (v12->__shared_owners_ != -1
        || (atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed),
            atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed),
            v7[1].__on_zero_shared_weaunint64_t k = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7,
            v7[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10,
            std::__shared_weak_count::__release_weak(v12),
            atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)))
      {
LABEL_21:
        uint64_t v19 = (uint64_t)v30;
        ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync((uint64_t)v30);
        unint64_t v20 = v31;
        uint64_t v30 = 0;
        unint64_t v31 = 0;
        *(void *)a3 = v19;
        *(void *)(a3 + 8) = v20;
        if (v9) {
          dispatch_release(v9);
        }
        uint64_t v21 = v26;
        if (!v26) {
          goto LABEL_32;
        }
        goto LABEL_30;
      }
    }
    else
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v7[1].__on_zero_shared_weaunint64_t k = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
      v7[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
      if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_21;
      }
    }
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    goto LABEL_21;
  }
  unint64_t v13 = (BasebandTransportICE *)operator new(0x208uLL);
  uint64_t v14 = (std::__shared_weak_count *)*((void *)a1 + 1);
  uint64_t v28 = *(void *)a1;
  long long v29 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *a2;
  dispatch_object_t object = v15;
  if (v15) {
    dispatch_retain(v15);
  }
  BasebandTransportICE::BasebandTransportICE(v13, &v28, &object);
  uint64_t v30 = v13;
  unint64_t v31 = 0xAAAAAAAAAAAAAAAALL;
  char v16 = (std::__shared_weak_count *)operator new(0x20uLL);
  v16->__shared_owners_ = 0;
  size_t v17 = &v16->__shared_owners_;
  v16->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210CA70;
  v16->__shared_weak_owners_ = 0;
  v16[1].__vftable = (std::__shared_weak_count_vtbl *)v13;
  unint64_t v31 = (unint64_t)v16;
  char v18 = (std::__shared_weak_count *)*((void *)v13 + 10);
  if (!v18)
  {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v13 + 9) = v13;
    *((void *)v13 + 10) = v16;
    if (atomic_fetch_add(v17, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (v18->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v13 + 9) = v13;
    *((void *)v13 + 10) = v16;
    std::__shared_weak_count::__release_weak(v18);
    if (!atomic_fetch_add(v17, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_26:
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
LABEL_27:
  uint64_t v22 = (uint64_t)v30;
  ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync((uint64_t)v30);
  unint64_t v23 = v31;
  uint64_t v30 = 0;
  unint64_t v31 = 0;
  *(void *)a3 = v22;
  *(void *)(a3 + 8) = v23;
  if (object) {
    dispatch_release(object);
  }
  uint64_t v21 = v29;
  if (!v29) {
    goto LABEL_32;
  }
LABEL_30:
  if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
LABEL_32:
  BasebandTransport::init(*(BasebandTransport **)a3);
}

void sub_1C5B03D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, dispatch_object_t object, char a13, uint64_t a14, char a15)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (object) {
    dispatch_release(object);
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void BasebandTransport::init(BasebandTransport *this)
{
  uint64_t v5 = *((void *)this + 9);
  int v3 = (std::__shared_weak_count *)*((void *)this + 10);
  long long v4 = (char *)this + 72;
  if (!v3 || (int v6 = std::__shared_weak_count::lock(v3)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  v11[2] = ___ZN17BasebandTransport4initEv_block_invoke;
  v11[3] = &__block_descriptor_tmp_51_2;
  v11[4] = this;
  void v11[5] = v5;
  unsigned int v12 = v7;
  unint64_t v13 = v11;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_98;
  void block[4] = v4;
  void block[5] = &v13;
  uint64_t v9 = *((void *)this + 11);
  if (!*((void *)this + 12))
  {
    dispatch_sync(v9, block);
    uint64_t v10 = v12;
    if (!v12) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  dispatch_async_and_wait(v9, block);
  uint64_t v10 = v12;
  if (v12) {
LABEL_7:
  }
    std::__shared_weak_count::__release_weak(v10);
LABEL_8:
  std::__shared_weak_count::__release_weak(v7);
}

void ___ZN17BasebandTransport4initEv_block_invoke(capabilities::ipc *a1)
{
  uint64_t v2 = *((void *)a1 + 4);
  if (capabilities::ipc::supportsPCI(a1))
  {
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN17BasebandTransport4initEv_block_invoke_2;
    aBlock[3] = &__block_descriptor_tmp_36;
    uint64_t v4 = *((void *)a1 + 5);
    int v3 = (std::__shared_weak_count *)*((void *)a1 + 6);
    void aBlock[4] = v2;
    void aBlock[5] = v4;
    uint64_t v14 = v3;
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v5 = _Block_copy(aBlock);
    int v6 = *(const void **)(v2 + 160);
    *(void *)(v2 + 160) = v5;
    if (v6) {
      _Block_release(v6);
    }
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 1174405120;
    v11[2] = ___ZN17BasebandTransport4initEv_block_invoke_43;
    v11[3] = &__block_descriptor_tmp_47_2;
    uint64_t v8 = *((void *)a1 + 5);
    int v7 = (std::__shared_weak_count *)*((void *)a1 + 6);
    v11[4] = v2;
    void v11[5] = v8;
    unsigned int v12 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = _Block_copy(v11);
    uint64_t v10 = *(const void **)(v2 + 168);
    *(void *)(v2 + 168) = v9;
    if (v10) {
      _Block_release(v10);
    }
    if (v12) {
      std::__shared_weak_count::__release_weak(v12);
    }
    if (v14) {
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void ___ZN17BasebandTransport4initEv_block_invoke_2(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    uint64_t v9 = a1[4];
    uint64_t v10 = std::__shared_weak_count::lock(v5);
    if (v10)
    {
      int v11 = v10;
      if (a1[5])
      {
        unsigned int v12 = *(NSObject **)(v9 + 40);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t v21 = 67109632;
          *(_DWORD *)&v21[4] = a2;
          *(_WORD *)&v21[8] = 2048;
          *(void *)&v21[10] = a3;
          *(_WORD *)&v21[18] = 2048;
          *(void *)&v21[20] = a4;
          _os_log_error_impl(&dword_1C59C6000, v12, OS_LOG_TYPE_ERROR, "PCI Transport Status: 0x%x (0x%08lx, 0x%08lx)", v21, 0x1Cu);
        }
        *(_DWORD *)(v9 + 328) = 2 * (a2 != 0);
        *(int64x2_t *)(v9 + 352) = vsubq_s64(*(int64x2_t *)(v9 + 336), *(int64x2_t *)(v9 + 376));
        unint64_t v13 = *(const void **)(v9 + 272);
        if (v13)
        {
          uint64_t v14 = _Block_copy(v13);
          uint64_t v15 = v14;
          long long v16 = *(_OWORD *)(v9 + 344);
          *(_OWORD *)uint64_t v21 = *(_OWORD *)(v9 + 328);
          *(_OWORD *)&char v21[16] = v16;
          uint64_t v22 = *(void *)(v9 + 360);
          size_t v17 = *(NSObject **)(v9 + 152);
          if (v14) {
            char v18 = _Block_copy(v14);
          }
          else {
            char v18 = 0;
          }
          uint64_t v19 = (char *)operator new(0x30uLL);
          *(void *)uint64_t v19 = v18;
          long long v20 = *(_OWORD *)&v21[16];
          *(_OWORD *)(v19 + 8) = *(_OWORD *)v21;
          *(_OWORD *)(v19 + 24) = v20;
          *((void *)v19 + 5) = v22;
          dispatch_async_f(v17, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb0_E3__0EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_);
          if (v15) {
            _Block_release(v15);
          }
        }
      }
      if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

void sub_1C5B042B8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

int64x2_t BasebandTransport::updateDeltas_sync(BasebandTransport *this)
{
  int64x2_t result = vsubq_s64(*((int64x2_t *)this + 21), *(int64x2_t *)((char *)this + 376));
  *((int64x2_t *)this + 22) = result;
  return result;
}

uint64_t __copy_helper_block_e8_40c42_ZTSNSt3__18weak_ptrI17BasebandTransportEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c42_ZTSNSt3__18weak_ptrI17BasebandTransportEE(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN17BasebandTransport4initEv_block_invoke_43(void *a1, int a2, void *a3, unsigned int a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1[4];
  uint64_t v31 = 0;
  long long v32 = 0;
  int v7 = (std::__shared_weak_count *)a1[6];
  if (v7 && (v32 = std::__shared_weak_count::lock(v7)) != 0 && (uint64_t v10 = a1[5], (v31 = v10) != 0))
  {
    int v11 = *(NSObject **)(v10 + 320);
    if (v11)
    {
      dispatch_retain(*(dispatch_object_t *)(v10 + 320));
      dispatch_group_enter(v11);
    }
    if (a2)
    {
      unsigned int v12 = *(NSObject **)(v6 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = a2;
        _os_log_debug_impl(&dword_1C59C6000, v12, OS_LOG_TYPE_DEBUG, "#D Async read error 0x%08x", buf, 8u);
      }
    }
    else
    {
      *(void *)(v6 + 336) += a4;
      uint64_t v14 = *(const void **)(v6 + 144);
      if (v14)
      {
        uint64_t v15 = _Block_copy(v14);
        uint64_t v16 = *(void *)(v6 + 128);
        if (v16)
        {
          std::string __p = 0;
          long long v29 = 0;
          uint64_t v30 = 0;
          (*(void (**)(uint64_t, void *, void, void **))(*(void *)v16 + 8))(v16, a3, a4, &__p);
          size_t v17 = *(NSObject **)(v6 + 152);
          if (v15) {
            char v18 = _Block_copy(v15);
          }
          else {
            char v18 = 0;
          }
          *(void *)std::string buf = v18;
          long long v34 = 0;
          long long v35 = 0;
          long long v36 = 0;
          uint64_t v22 = __p;
          size_t v23 = v29 - (unsigned char *)__p;
          if (v29 == __p)
          {
            uint64_t v25 = 0;
            uint64_t v24 = 0;
          }
          else
          {
            if ((v23 & 0x8000000000000000) != 0) {
              std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v24 = (char *)operator new(v29 - (unsigned char *)__p);
            uint64_t v25 = &v24[v23];
            long long v34 = v24;
            long long v36 = &v24[v23];
            memcpy(v24, v22, v23);
            long long v35 = &v24[v23];
          }
          char v26 = operator new(0x20uLL);
          void *v26 = v18;
          v26[1] = v24;
          v26[2] = v25;
          v26[3] = v25;
          dispatch_async_f(v17, v26, (dispatch_function_t)_ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb1_E3__1EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_);
          if (__p)
          {
            long long v29 = __p;
            operator delete(__p);
          }
        }
        else
        {
          char v19 = *(unsigned char *)(v6 + 136);
          long long v20 = *(NSObject **)(v6 + 152);
          if (v15) {
            uint64_t v21 = _Block_copy(v15);
          }
          else {
            uint64_t v21 = 0;
          }
          long long v27 = operator new(0x18uLL);
          void *v27 = v21;
          v27[1] = a3;
          *((_DWORD *)v27 + 4) = a4;
          *((unsigned char *)v27 + 20) = v19;
          dispatch_async_f(v20, v27, (dispatch_function_t)_ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb1_E3__2EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_);
          a3 = 0;
        }
        if (v15) {
          _Block_release(v15);
        }
      }
    }
    if (a3 && !*(unsigned char *)(v6 + 136)) {
      free(a3);
    }
    if (v11)
    {
      dispatch_group_leave(v11);
      dispatch_release(v11);
    }
  }
  else if (a3)
  {
    free(a3);
  }
  unint64_t v13 = v32;
  if (v32)
  {
    if (!atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1C5B04628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *aBlock, void *a16, uint64_t a17)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

BOOL BasebandTransport::open(BasebandTransport *a1, long long *a2, void **a3)
{
  uint64_t v17 = 0;
  char v18 = &v17;
  uint64_t v19 = 0x2000000000;
  char v20 = 0;
  BasebandTransport::stopReader(a1);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1174405120;
  v12[2] = ___ZN17BasebandTransport4openENS_10ParametersEN8dispatch5blockIU13block_pointerFvPhjEEE_block_invoke;
  void v12[3] = &unk_1F210C760;
  void v12[5] = a1;
  long long v6 = a2[1];
  long long v13 = *a2;
  long long v14 = v6;
  uint64_t v15 = *((void *)a2 + 4);
  int v7 = *a3;
  if (*a3) {
    int v7 = _Block_copy(v7);
  }
  aBlocunint64_t k = v7;
  v12[4] = &v17;
  uint64_t v21 = v12;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_98;
  void block[4] = (char *)a1 + 72;
  void block[5] = &v21;
  uint64_t v8 = *((void *)a1 + 11);
  if (*((void *)a1 + 12))
  {
    dispatch_async_and_wait(v8, block);
    int v9 = *((unsigned __int8 *)v18 + 24);
    uint64_t v10 = aBlock;
    if (!aBlock) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  dispatch_sync(v8, block);
  int v9 = *((unsigned __int8 *)v18 + 24);
  uint64_t v10 = aBlock;
  if (aBlock) {
LABEL_7:
  }
    _Block_release(v10);
LABEL_8:
  _Block_object_dispose(&v17, 8);
  return v9 != 0;
}

void sub_1C5B04838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void BasebandTransport::stopReader(BasebandTransport *this)
{
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2000000000;
  char v15 = 0;
  uint64_t v2 = (uint64_t *)((char *)this + 72);
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 0x40000000;
  uint64_t v13[2] = ___ZN17BasebandTransport10stopReaderEv_block_invoke;
  void v13[3] = &unk_1E651BCD8;
  v13[4] = v14;
  v13[5] = this;
  uint64_t v16 = v13;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_98;
  void block[4] = (char *)this + 72;
  void block[5] = &v16;
  uint64_t v4 = (char *)this + 88;
  int v3 = *((void *)this + 11);
  if (*((void *)v4 + 1)) {
    dispatch_async_and_wait(v3, block);
  }
  else {
    dispatch_sync(v3, block);
  }
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 0x40000000;
  v12[2] = ___ZN17BasebandTransport10stopReaderEv_block_invoke_2;
  void v12[3] = &unk_1E651BD00;
  v12[4] = v14;
  void v12[5] = this;
  ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v2, (uint64_t)v12);
  uint64_t v5 = *((void *)this + 40);
  if (v5)
  {
    long long v6 = *((void *)this + 5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(block[0]) = 0;
      _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#I Waiting for reader to be stopped", (uint8_t *)block, 2u);
      uint64_t v5 = *((void *)this + 40);
    }
    dispatch_time_t v7 = dispatch_time(0, 3000000000);
    if (dispatch_group_wait(v5, v7))
    {
      (*(void (**)(BasebandTransport *))(*(void *)this + 80))(this);
      uint64_t v8 = *((void *)this + 5);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(block[0]) = 0;
        _os_log_error_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_ERROR, "Timeout waiting for read to unblock, freed transport to force read unblock", (uint8_t *)block, 2u);
      }
    }
    else
    {
      uint64_t v10 = (void *)*((void *)this + 37);
      if (v10)
      {
        operator delete[](v10);
        *((void *)this + 37) = 0;
        int v11 = *((void *)this + 39);
        *((void *)this + 39) = 0;
        if (v11) {
          dispatch_release(v11);
        }
      }
    }
    int v9 = *((void *)this + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(block[0]) = 0;
      _os_log_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEFAULT, "#I Reader stopped", (uint8_t *)block, 2u);
    }
  }
  _Block_object_dispose(v14, 8);
}

void sub_1C5B04AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN17BasebandTransport4openENS_10ParametersEN8dispatch5blockIU13block_pointerFvPhjEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = *(NSObject **)(v2 + 280);
  if (v3)
  {
    dispatch_source_cancel(v3);
    dispatch_release(*(dispatch_object_t *)(v2 + 280));
    *(void *)(v2 + 280) = 0;
    uint64_t v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v9[0]) = 0;
      _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Status report disabled", (uint8_t *)v9, 2u);
    }
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 80))(v2);
  *(_DWORD *)(v2 + 328) = 0;
  *(unsigned char *)(v2 + 332) = 0;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(void *)(v2 + 365) = 0;
  char v5 = *(unsigned char *)(a1 + 80);
  long long v6 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v2 + 120) = v6;
  *(unsigned char *)(v2 + 136) = v5;
  dispatch_time_t v7 = *(void **)(a1 + 88);
  if (v7) {
    dispatch_time_t v7 = _Block_copy(v7);
  }
  uint64_t v8 = *(const void **)(v2 + 144);
  *(void *)(v2 + 144) = v7;
  if (v8) {
    _Block_release(v8);
  }
  if (*(_DWORD *)(v2 + 104) != 23)
  {
    if (capabilities::ipc::supportsPCI((capabilities::ipc *)v7)) {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = BasebandTransport::openPCI_sync((BasebandTransport *)v2);
    }
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      BasebandTransport::timerOn_sync((BasebandTransport *)v2);
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v2 + 80))(v2);
    }
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 0x40000000;
    uint64_t v9[2] = ___ZN17BasebandTransport9dumpStateEb_block_invoke;
    v9[3] = &__block_descriptor_tmp_80;
    v9[4] = v2;
    char v10 = 0;
    ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped((uint64_t *)(v2 + 72), (uint64_t)v9);
  }
}

uint64_t BasebandTransport::openPCI_sync(BasebandTransport *this)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (int v3 = std::__shared_weak_count::lock(v2)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v4 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
  }
  inited = (capabilities::abs *)TelephonyBasebandPCITransportInitParameters();
  int v6 = *((_DWORD *)this + 28);
  uint64_t shouldUseMinBasebandTransportIOReadCount = capabilities::abs::traceTransportTimeoutScalingFactor(inited);
  int v8 = 1000 * v6;
  if ((((1000 * v6) * (unint64_t)shouldUseMinBasebandTransportIOReadCount) & 0xFFFFFFFF00000000) != 0)
  {
    int v9 = *((void *)this + 5);
    uint64_t shouldUseMinBasebandTransportIOReadCount = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    if (shouldUseMinBasebandTransportIOReadCount)
    {
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v8;
      _os_log_error_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_ERROR, "Scaled create timeout overflowed, falling back to unscaled value: %u", buf, 8u);
    }
  }
  int v10 = *((_DWORD *)this + 31);
  if (v10) {
    goto LABEL_16;
  }
  int v11 = *((_DWORD *)this + 26);
  uint64_t shouldUseMinBasebandTransportIOReadCount = capabilities::abs::shouldUseMinBasebandTransportIOReadCount((capabilities::abs *)shouldUseMinBasebandTransportIOReadCount);
  if (shouldUseMinBasebandTransportIOReadCount) {
    goto LABEL_10;
  }
  if (v11 != 2)
  {
    if (v11 != 16 && v11 != 15)
    {
LABEL_10:
      unsigned int v27 = 4;
      unsigned int v12 = *((_DWORD *)this + 30);
      if (!v12) {
        goto LABEL_17;
      }
      goto LABEL_20;
    }
    int v10 = 36;
LABEL_16:
    unsigned int v27 = v10;
    unsigned int v12 = *((_DWORD *)this + 30);
    if (!v12) {
      goto LABEL_17;
    }
    goto LABEL_20;
  }
  unsigned int v27 = 16;
  unsigned int v12 = *((_DWORD *)this + 30);
  if (!v12)
  {
LABEL_17:
    if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize((capabilities::abs *)shouldUseMinBasebandTransportIOReadCount)) {
      unsigned int v12 = 0x4000;
    }
    else {
      unsigned int v12 = 0x8000;
    }
  }
LABEL_20:
  unsigned int v28 = v12;
  int v13 = *((_DWORD *)this + 26);
  switch(v13)
  {
    case 0:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 1:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 2:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 3:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 4:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 5:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 6:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 7:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 8:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 9:
    case 17:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 10:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 11:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 12:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 13:
    case 18:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 14:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 15:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 16:
      uint64_t v14 = v27;
      if (v27 >= 0x41)
      {
LABEL_26:
        char v15 = *((void *)this + 5);
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
          goto LABEL_144;
        }
        switch(v13)
        {
          case 0:
            char v30 = 3;
            strcpy((char *)buf, "PBL");
            break;
          case 1:
            char v30 = 3;
            strcpy((char *)buf, "SBL");
            break;
          case 2:
            char v30 = 4;
            int v24 = 1195460932;
            goto LABEL_118;
          case 3:
            char v30 = 4;
            int v24 = 1397114194;
            goto LABEL_118;
          case 4:
            char v30 = 5;
            strcpy((char *)buf, "QMUX1");
            break;
          case 5:
            char v30 = 5;
            strcpy((char *)buf, "QMUX2");
            break;
          case 6:
            char v30 = 3;
            strcpy((char *)buf, "ROM");
            break;
          case 7:
            char v30 = 4;
            int v24 = 1414483778;
            goto LABEL_118;
          case 8:
            char v30 = 3;
            strcpy((char *)buf, "ARI");
            break;
          case 9:
            char v30 = 3;
            strcpy((char *)buf, "STT");
            break;
          case 10:
            char v30 = 2;
            strcpy((char *)buf, "AT");
            break;
          case 11:
            char v30 = 4;
            int v24 = 1280328769;
            goto LABEL_118;
          case 12:
            char v30 = 8;
            strcpy((char *)buf, "MEDIACTL");
            break;
          case 13:
            char v30 = 3;
            strcpy((char *)buf, "ETS");
            break;
          case 14:
            char v30 = 4;
            int v24 = 1397968455;
            goto LABEL_118;
          case 15:
            char v30 = 4;
            int v24 = 1397965905;
            goto LABEL_118;
          case 16:
            char v30 = 5;
            strcpy((char *)buf, "RCTTH");
            break;
          case 17:
            char v30 = 3;
            strcpy((char *)buf, "ACP");
            break;
          case 18:
            char v30 = 4;
            int v24 = 1297040214;
LABEL_118:
            *(_DWORD *)std::string buf = v24;
            uint8_t buf[4] = 0;
            break;
          default:
            char v30 = 7;
            strcpy((char *)buf, "Unknown");
            break;
        }
        *(_DWORD *)uint64_t v31 = 136315394;
        long long v32 = buf;
        __int16 v33 = 2048;
        uint64_t v34 = v14;
        char v20 = "%s: invalid transport io read count (%lu)";
LABEL_141:
        uint64_t v21 = v15;
        uint32_t v22 = 22;
LABEL_142:
        _os_log_error_impl(&dword_1C59C6000, v21, OS_LOG_TYPE_ERROR, v20, v31, v22);
        if (v30 < 0) {
          operator delete(*(void **)buf);
        }
        goto LABEL_144;
      }
LABEL_56:
      if (v12 - 0x4000 > 0xFC000)
      {
        char v15 = *((void *)this + 5);
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
          goto LABEL_144;
        }
        switch(v13)
        {
          case 0:
            char v30 = 3;
            strcpy((char *)buf, "PBL");
            break;
          case 1:
            char v30 = 3;
            strcpy((char *)buf, "SBL");
            break;
          case 2:
            char v30 = 4;
            int v25 = 1195460932;
            goto LABEL_139;
          case 3:
            char v30 = 4;
            int v25 = 1397114194;
            goto LABEL_139;
          case 4:
            char v30 = 5;
            strcpy((char *)buf, "QMUX1");
            break;
          case 5:
            char v30 = 5;
            strcpy((char *)buf, "QMUX2");
            break;
          case 6:
            char v30 = 3;
            strcpy((char *)buf, "ROM");
            break;
          case 7:
            char v30 = 4;
            int v25 = 1414483778;
            goto LABEL_139;
          case 8:
            char v30 = 3;
            strcpy((char *)buf, "ARI");
            break;
          case 9:
            char v30 = 3;
            strcpy((char *)buf, "STT");
            break;
          case 10:
            char v30 = 2;
            strcpy((char *)buf, "AT");
            break;
          case 11:
            char v30 = 4;
            int v25 = 1280328769;
            goto LABEL_139;
          case 12:
            char v30 = 8;
            strcpy((char *)buf, "MEDIACTL");
            break;
          case 13:
            char v30 = 3;
            strcpy((char *)buf, "ETS");
            break;
          case 14:
            char v30 = 4;
            int v25 = 1397968455;
            goto LABEL_139;
          case 15:
            char v30 = 4;
            int v25 = 1397965905;
            goto LABEL_139;
          case 16:
            char v30 = 5;
            strcpy((char *)buf, "RCTTH");
            break;
          case 17:
            char v30 = 3;
            strcpy((char *)buf, "ACP");
            break;
          case 18:
            char v30 = 4;
            int v25 = 1297040214;
LABEL_139:
            *(_DWORD *)std::string buf = v25;
            uint8_t buf[4] = 0;
            break;
          default:
            char v30 = 7;
            strcpy((char *)buf, "Unknown");
            break;
        }
        *(_DWORD *)uint64_t v31 = 136315394;
        long long v32 = buf;
        __int16 v33 = 2048;
        uint64_t v34 = v12;
        char v20 = "%s: invalid transport io read size (%lu)";
        goto LABEL_141;
      }
      if (*((void *)this + 18)) {
        *((unsigned char *)this + 332) = 1;
      }
      if (!TelephonyBasebandPCITransportCreate())
      {
        *((_DWORD *)this + 82) = 2;
        char v18 = *((void *)this + 5);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          BasebandTransport::asString(*((unsigned int *)this + 26), (char *)buf);
          if (v30 >= 0) {
            uint64_t v19 = buf;
          }
          else {
            uint64_t v19 = *(uint8_t **)buf;
          }
          *(_DWORD *)uint64_t v31 = 136315138;
          long long v32 = v19;
          char v20 = "%s: transport open failed";
          uint64_t v21 = v18;
          uint32_t v22 = 12;
          goto LABEL_142;
        }
LABEL_144:
        uint64_t v16 = 0;
        goto LABEL_145;
      }
      uint64_t v16 = 1;
      *((_DWORD *)this + 82) = 1;
      uint64_t v17 = *((void *)this + 5);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        switch(*((_DWORD *)this + 26))
        {
          case 0:
            char v30 = 3;
            strcpy((char *)buf, "PBL");
            break;
          case 1:
            char v30 = 3;
            strcpy((char *)buf, "SBL");
            break;
          case 2:
            char v30 = 4;
            int v23 = 1195460932;
            goto LABEL_93;
          case 3:
            char v30 = 4;
            int v23 = 1397114194;
            goto LABEL_93;
          case 4:
            char v30 = 5;
            strcpy((char *)buf, "QMUX1");
            break;
          case 5:
            char v30 = 5;
            strcpy((char *)buf, "QMUX2");
            break;
          case 6:
            char v30 = 3;
            strcpy((char *)buf, "ROM");
            break;
          case 7:
            char v30 = 4;
            int v23 = 1414483778;
            goto LABEL_93;
          case 8:
            char v30 = 3;
            strcpy((char *)buf, "ARI");
            break;
          case 9:
            char v30 = 3;
            strcpy((char *)buf, "STT");
            break;
          case 0xA:
            char v30 = 2;
            strcpy((char *)buf, "AT");
            break;
          case 0xB:
            char v30 = 4;
            int v23 = 1280328769;
            goto LABEL_93;
          case 0xC:
            char v30 = 8;
            strcpy((char *)buf, "MEDIACTL");
            break;
          case 0xD:
            char v30 = 3;
            strcpy((char *)buf, "ETS");
            break;
          case 0xE:
            char v30 = 4;
            int v23 = 1397968455;
            goto LABEL_93;
          case 0xF:
            char v30 = 4;
            int v23 = 1397965905;
            goto LABEL_93;
          case 0x10:
            char v30 = 5;
            strcpy((char *)buf, "RCTTH");
            break;
          case 0x11:
            char v30 = 3;
            strcpy((char *)buf, "ACP");
            break;
          case 0x12:
            char v30 = 4;
            int v23 = 1297040214;
            goto LABEL_93;
          case 0x13:
            char v30 = 4;
            int v23 = 1129335117;
LABEL_93:
            *(_DWORD *)std::string buf = v23;
            uint8_t buf[4] = 0;
            break;
          case 0x14:
            char v30 = 3;
            strcpy((char *)buf, "DHL");
            break;
          case 0x15:
            char v30 = 3;
            strcpy((char *)buf, "MUX");
            break;
          case 0x16:
            char v30 = 3;
            strcpy((char *)buf, "FAC");
            break;
          default:
            char v30 = 7;
            strcpy((char *)buf, "Unknown");
            break;
        }
        *(_DWORD *)uint64_t v31 = 136315394;
        long long v32 = buf;
        __int16 v33 = 1024;
        LODWORD(v34) = v28;
        _os_log_impl(&dword_1C59C6000, v17, OS_LOG_TYPE_DEFAULT, "#I %s: transport successfully opened with read io size as %u", v31, 0x12u);
        if (v30 < 0) {
          operator delete(*(void **)buf);
        }
      }
LABEL_145:
      std::__shared_weak_count::__release_weak(v4);
      return v16;
    default:
      goto LABEL_144;
  }
}

void sub_1C5B05988(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void sub_1C5B0599C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void BasebandTransport::timerOn_sync(BasebandTransport *this)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 35);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 35));
    *((void *)this + 35) = 0;
    int v3 = *((void *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Status report disabled", buf, 2u);
    }
  }
  if (*((_DWORD *)this + 82) == 1)
  {
    unsigned int v4 = *((_DWORD *)this + 72);
    if (v4 && *((void *)this + 34))
    {
      uint64_t v5 = 1000000000 * v4;
      int v6 = dispatch_source_create(MEMORY[0x1E4F14490], 1uLL, 0, *((dispatch_queue_t *)this + 11));
      *((void *)this + 35) = v6;
      dispatch_time_t v7 = dispatch_time(0, v5);
      dispatch_source_set_timer(v6, v7, v5, 0xBEBC200uLL);
      int v8 = (std::__shared_weak_count *)*((void *)this + 10);
      if (!v8 || (uint64_t v9 = *((void *)this + 9), (v10 = std::__shared_weak_count::lock(v8)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      int v11 = v10;
      p_shared_weak_owners = &v10->__shared_weak_owners_;
      atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
      int v13 = *((void *)this + 35);
      handler[0] = MEMORY[0x1E4F143A8];
      handler[1] = 1174405120;
      handler[2] = ___ZN17BasebandTransport12timerOn_syncEv_block_invoke;
      handler[3] = &__block_descriptor_tmp_79_0;
      handler[4] = this;
      handler[5] = v9;
      char v18 = v11;
      atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
      dispatch_source_set_event_handler(v13, handler);
      dispatch_activate(*((dispatch_object_t *)this + 35));
      uint64_t v14 = *((void *)this + 5);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = *((_DWORD *)this + 72);
        *(_DWORD *)std::string buf = 67109120;
        int v20 = v15;
        _os_log_impl(&dword_1C59C6000, v14, OS_LOG_TYPE_DEFAULT, "#I Status report enabled(%d sec)", buf, 8u);
      }
      if (v18) {
        std::__shared_weak_count::__release_weak(v18);
      }
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    uint64_t v16 = *((void *)this + 5);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1C59C6000, v16, OS_LOG_TYPE_DEFAULT, "#I Invalid state for status report enable.  Ignoring enable request.", buf, 2u);
    }
  }
}

void BasebandTransport::dumpState(BasebandTransport *this, char a2)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 0x40000000;
  v2[2] = ___ZN17BasebandTransport9dumpStateEb_block_invoke;
  v2[3] = &__block_descriptor_tmp_80;
  v2[4] = this;
  char v3 = a2;
  ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v2);
}

void *__copy_helper_block_e8_88c45_ZTSN8dispatch5blockIU13block_pointerFvPhjEEE(uint64_t a1, uint64_t a2)
{
  int64x2_t result = *(void **)(a2 + 88);
  if (result) {
    int64x2_t result = _Block_copy(result);
  }
  *(void *)(a1 + 88) = result;
  return result;
}

void __destroy_helper_block_e8_88c45_ZTSN8dispatch5blockIU13block_pointerFvPhjEEE(uint64_t a1)
{
  int v1 = *(const void **)(a1 + 88);
  if (v1) {
    _Block_release(v1);
  }
}

BOOL BasebandTransport::write(BasebandTransport *this, const unsigned __int8 *a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v39 = 0;
  unint64_t v40 = &v39;
  uint64_t v41 = 0x2000000000;
  char v42 = 0;
  uint64_t v35 = 0;
  long long v36 = &v35;
  uint64_t v37 = 0x2000000000;
  uint64_t v38 = 0;
  dispatch_time_t v7 = (char *)this + 72;
  v34[0] = MEMORY[0x1E4F143A8];
  v34[1] = 0x40000000;
  uint64_t v34[2] = ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke;
  v34[3] = &unk_1E651BBA8;
  v34[5] = &v39;
  v34[6] = this;
  v34[4] = &v35;
  int v44 = v34;
  blocunint64_t k = MEMORY[0x1E4F143A8];
  p_blocunint64_t k = 0x40000000;
  uint64_t v28 = (uint64_t)___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  long long v29 = (__n128 (*)(void *, uint64_t))&__block_descriptor_tmp_98;
  char v30 = (void (*)(uint64_t))((char *)this + 72);
  std::string __p = &v44;
  uint64_t v9 = (char *)this + 88;
  int v8 = *((void *)this + 11);
  if (*((void *)v9 + 1))
  {
    dispatch_async_and_wait(v8, &block);
    if (*((unsigned char *)v40 + 24)) {
      goto LABEL_3;
    }
LABEL_10:
    BOOL v14 = 0;
    goto LABEL_19;
  }
  dispatch_sync(v8, &block);
  if (!*((unsigned char *)v40 + 24)) {
    goto LABEL_10;
  }
LABEL_3:
  blocunint64_t k = 0;
  p_blocunint64_t k = (uint64_t)&block;
  uint64_t v28 = 0x4002000000;
  long long v29 = __Block_byref_object_copy__3;
  char v30 = __Block_byref_object_dispose__3;
  std::string __p = 0;
  long long v32 = 0;
  uint64_t v33 = 0;
  uint64_t v22 = 0;
  int v23 = &v22;
  uint64_t v24 = 0x2000000000;
  int v25 = a2;
  uint64_t v18 = 0;
  uint64_t v19 = &v18;
  uint64_t v20 = 0x2000000000;
  uint64_t v21 = a3;
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 0x40000000;
  void v17[2] = ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke_54;
  void v17[3] = &unk_1E651BBD0;
  v17[8] = a2;
  v17[9] = a3;
  v17[4] = &block;
  v17[5] = &v22;
  v17[6] = &v18;
  v17[7] = this;
  size_t v43 = v17;
  int v44 = (void *)MEMORY[0x1E4F143A8];
  uint64_t v45 = 0x40000000;
  int v46 = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  __int16 v47 = &__block_descriptor_tmp_98;
  int v48 = v7;
  __int16 v49 = &v43;
  int v10 = *((void *)this + 11);
  if (*((void *)this + 12))
  {
    dispatch_async_and_wait(v10, &v44);
    if (v19[3]) {
      goto LABEL_5;
    }
  }
  else
  {
    dispatch_sync(v10, &v44);
    if (v19[3])
    {
LABEL_5:
      int v11 = (uint64_t (**)(void, uint64_t))v36[3];
      if (*v11)
      {
        int v12 = (*v11)(v11, v23[3]);
        *((unsigned char *)v40 + 24) = v12;
        if (v12)
        {
          v16[0] = MEMORY[0x1E4F143A8];
          v16[1] = 0x40000000;
          v16[2] = ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke_2;
          void v16[3] = &unk_1E651BBF8;
          v16[4] = &v18;
          v16[5] = this;
          size_t v43 = v16;
          int v44 = (void *)MEMORY[0x1E4F143A8];
          uint64_t v45 = 0x40000000;
          int v46 = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
          __int16 v47 = &__block_descriptor_tmp_98;
          int v48 = v7;
          __int16 v49 = &v43;
          int v13 = *((void *)this + 11);
          if (*((void *)this + 12)) {
            dispatch_async_and_wait(v13, &v44);
          }
          else {
            dispatch_sync(v13, &v44);
          }
          BOOL v14 = *((unsigned char *)v40 + 24) != 0;
        }
        else
        {
          BOOL v14 = 0;
        }
      }
      else
      {
        BOOL v14 = 0;
        *((unsigned char *)v40 + 24) = 0;
      }
      goto LABEL_17;
    }
  }
  BOOL v14 = 1;
LABEL_17:
  _Block_object_dispose(&v18, 8);
  _Block_object_dispose(&v22, 8);
  _Block_object_dispose(&block, 8);
  if (__p)
  {
    long long v32 = __p;
    operator delete(__p);
  }
LABEL_19:
  _Block_object_dispose(&v35, 8);
  _Block_object_dispose(&v39, 8);
  return v14;
}

void sub_1C5B06210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a33, 8);
  if (__p)
  {
    a39 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose((const void *)(v39 - 216), 8);
  _Block_object_dispose((const void *)(v39 - 184), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke(void *a1)
{
  uint64_t v2 = a1[6];
  *(void *)(*(void *)(a1[4] + 8) + 24) = v2 + 176;
  char v3 = *(uint64_t (**)(void))(v2 + 232);
  if (v3)
  {
    uint64_t result = v3();
    *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = result;
  }
  else
  {
    uint64_t result = 0;
    *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 0;
  }
  return result;
}

uint64_t (***___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke_54(void *a1))(void, void, void, uint64_t)
{
  uint64_t result = *(uint64_t (****)(void, void, void, uint64_t))(a1[7] + 128);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void, void, void, uint64_t))(**result)(result, a1[8], a1[9], *(void *)(a1[4] + 8) + 40);
    *(void *)(*(void *)(a1[5] + 8) + 24) = *(void *)(*(void *)(a1[4] + 8) + 40);
    *(void *)(*(void *)(a1[6] + 8) + 24) = *(void *)(*(void *)(a1[4] + 8) + 48)
                                                 - *(void *)(*(void *)(a1[4] + 8) + 40);
  }
  return result;
}

void ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke_2(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(v2 + 344) + *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  *(void *)(v2 + 344) = v3;
  unsigned int v4 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    int v6 = 134218240;
    uint64_t v7 = v5;
    __int16 v8 = 2048;
    uint64_t v9 = v3;
    _os_log_debug_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEBUG, "#D Written: %zu bytes, for a total of: %llu", (uint8_t *)&v6, 0x16u);
  }
}

uint64_t BasebandTransport::read(BasebandTransport *this, unsigned __int8 *a2, unint64_t a3, unsigned int *a4)
{
  uint64_t v22 = 0;
  int v23 = &v22;
  uint64_t v24 = 0x2000000000;
  char v25 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = &v18;
  uint64_t v20 = 0x2000000000;
  uint64_t v21 = 0;
  int v6 = (uint64_t *)((char *)this + 72);
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 0x40000000;
  void v17[2] = ___ZN17BasebandTransport4readEPhmPjbj_block_invoke;
  void v17[3] = &unk_1E651BC20;
  v17[5] = &v22;
  v17[6] = this;
  v17[4] = &v18;
  char v26 = v17;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_98;
  void block[4] = (char *)this + 72;
  void block[5] = &v26;
  __int16 v8 = (char *)this + 88;
  uint64_t v7 = *((void *)this + 11);
  if (*((void *)v8 + 1))
  {
    dispatch_async_and_wait(v7, block);
    uint64_t v9 = v23;
    if (!*((unsigned char *)v23 + 24)) {
      goto LABEL_13;
    }
LABEL_5:
    uint64_t v10 = v19[3];
    if (v10 && (int v11 = *(uint64_t (**)(void))(v10 + 8)) != 0)
    {
      char v12 = v11();
      *((unsigned char *)v23 + 24) = v12;
      if (v12)
      {
        v16[0] = MEMORY[0x1E4F143A8];
        v16[1] = 0x40000000;
        v16[2] = ___ZN17BasebandTransport4readEPhmPjbj_block_invoke_58;
        void v16[3] = &__block_descriptor_tmp_59_0;
        v16[4] = this;
        v16[5] = a4;
        ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v6, (uint64_t)v16);
        goto LABEL_13;
      }
      int v13 = *(void (**)(void))(v19[3] + 24);
      if (!v13) {
        goto LABEL_13;
      }
    }
    else
    {
      *((unsigned char *)v9 + 24) = 0;
      int v13 = *(void (**)(void))(v10 + 24);
      if (!v13) {
        goto LABEL_13;
      }
    }
    v13();
    goto LABEL_13;
  }
  dispatch_sync(v7, block);
  uint64_t v9 = v23;
  if (*((unsigned char *)v23 + 24)) {
    goto LABEL_5;
  }
LABEL_13:
  uint64_t v14 = *((unsigned __int8 *)v23 + 24);
  _Block_object_dispose(&v18, 8);
  _Block_object_dispose(&v22, 8);
  return v14;
}

void sub_1C5B06668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void ___ZN17BasebandTransport4readEPhmPjbj_block_invoke(void *a1)
{
  uint64_t v2 = a1[6];
  *(void *)(*(void *)(a1[4] + 8) + 24) = v2 + 176;
  uint64_t v3 = *(unsigned int (**)(void))(v2 + 232);
  if (v3)
  {
    if (!v3())
    {
      *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 0;
      if (!*(unsigned char *)(v2 + 332)) {
        return;
      }
      goto LABEL_7;
    }
    LOBYTE(v3) = *(unsigned char *)(v2 + 332) == 0;
  }
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = (_BYTE)v3;
  if (!*(unsigned char *)(v2 + 332)) {
    return;
  }
LABEL_7:
  unsigned int v4 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_error_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_ERROR, "Explicit reads not allowed in async mode", v5, 2u);
  }
}

uint64_t ___ZN17BasebandTransport4readEPhmPjbj_block_invoke_58(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 336) += **(unsigned int **)(result + 40);
  return result;
}

uint64_t BasebandTransport::close(BasebandTransport *this)
{
  uint64_t v10 = 0;
  int v11 = &v10;
  uint64_t v12 = 0x2000000000;
  char v13 = 1;
  *((_DWORD *)this + 72) = 0;
  uint64_t v2 = (char *)this + 72;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  uint64_t v9[2] = ___ZN17BasebandTransport5closeEv_block_invoke;
  v9[3] = &__block_descriptor_tmp_60_1;
  v9[4] = this;
  uint64_t v14 = v9;
  blocunint64_t k = MEMORY[0x1E4F143A8];
  uint64_t v16 = 0x40000000;
  uint64_t v17 = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  uint64_t v18 = &__block_descriptor_tmp_98;
  uint64_t v19 = (char *)this + 72;
  uint64_t v20 = &v14;
  unsigned int v4 = (char *)this + 88;
  uint64_t v3 = *((void *)this + 11);
  if (*((void *)v4 + 1)) {
    dispatch_async_and_wait(v3, &block);
  }
  else {
    dispatch_sync(v3, &block);
  }
  BasebandTransport::stopReader(this);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 0x40000000;
  v8[2] = ___ZN17BasebandTransport5closeEv_block_invoke_2;
  void v8[3] = &unk_1E651BC88;
  v8[4] = &v10;
  void v8[5] = this;
  uint64_t v14 = v8;
  blocunint64_t k = MEMORY[0x1E4F143A8];
  uint64_t v16 = 0x40000000;
  uint64_t v17 = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  uint64_t v18 = &__block_descriptor_tmp_98;
  uint64_t v19 = v2;
  uint64_t v20 = &v14;
  uint64_t v5 = *((void *)this + 11);
  if (*((void *)this + 12)) {
    dispatch_async_and_wait(v5, &block);
  }
  else {
    dispatch_sync(v5, &block);
  }
  uint64_t v6 = *((unsigned __int8 *)v11 + 24);
  _Block_object_dispose(&v10, 8);
  return v6;
}

void sub_1C5B06934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN17BasebandTransport5closeEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 280);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(v1 + 280));
    *(void *)(v1 + 280) = 0;
    uint64_t v3 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned int v4 = 0;
      _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Status report disabled", v4, 2u);
    }
  }
}

uint64_t ___ZN17BasebandTransport5closeEv_block_invoke_2(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 80))(*(void *)(a1 + 40));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t BasebandTransport::operator*(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  uint64_t v9 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  _DWORD v5[2] = ___ZN17BasebandTransportdeEv_block_invoke;
  v5[3] = &unk_1E651BCB0;
  v5[4] = &v6;
  void v5[5] = a1;
  uint64_t v10 = v5;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_98;
  void block[4] = a1 + 72;
  void block[5] = &v10;
  uint64_t v2 = a1 + 88;
  uint64_t v1 = *(NSObject **)(a1 + 88);
  if (*(void *)(v2 + 8)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
  uint64_t v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t ___ZN17BasebandTransportdeEv_block_invoke(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(result + 40) + 176;
  return result;
}

uint64_t BasebandTransport::switchDIAG_sync(BasebandTransport *this)
{
  return 0;
}

uint64_t BasebandTransport::getIOSizeRx(BasebandTransport *this)
{
  return *((unsigned int *)this + 30);
}

uint64_t BasebandTransport::close_sync(BasebandTransport *this)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (unsigned int (*)(char *))*((void *)this + 29);
  if (v2 && (uint64_t v3 = (_OWORD *)((char *)this + 176), v2((char *)this + 176)))
  {
    *((_DWORD *)this + 82) = 0;
    uint64_t v4 = TelephonyUtilTransportFree();
    _OWORD *v3 = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 15) = 0u;
    *((void *)this + 32) = 0;
    uint64_t v5 = *((void *)this + 5);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      return v4;
    }
  }
  else
  {
    uint64_t v4 = 1;
    uint64_t v5 = *((void *)this + 5);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      return v4;
    }
  }
  switch(*((_DWORD *)this + 26))
  {
    case 0:
      char v10 = 3;
      LODWORD(__p[0]) = 4997712;
      break;
    case 1:
      char v10 = 3;
      LODWORD(__p[0]) = 4997715;
      break;
    case 2:
      char v10 = 4;
      int v6 = 1195460932;
      goto LABEL_28;
    case 3:
      char v10 = 4;
      int v6 = 1397114194;
      goto LABEL_28;
    case 4:
      char v10 = 5;
      strcpy((char *)__p, "QMUX1");
      break;
    case 5:
      char v10 = 5;
      strcpy((char *)__p, "QMUX2");
      break;
    case 6:
      char v10 = 3;
      LODWORD(__p[0]) = 5066578;
      break;
    case 7:
      char v10 = 4;
      int v6 = 1414483778;
      goto LABEL_28;
    case 8:
      char v10 = 3;
      LODWORD(__p[0]) = 4805185;
      break;
    case 9:
      char v10 = 3;
      LODWORD(__p[0]) = 5526611;
      break;
    case 0xA:
      char v10 = 2;
      strcpy((char *)__p, "AT");
      break;
    case 0xB:
      char v10 = 4;
      int v6 = 1280328769;
      goto LABEL_28;
    case 0xC:
      char v10 = 8;
      strcpy((char *)__p, "MEDIACTL");
      break;
    case 0xD:
      char v10 = 3;
      LODWORD(__p[0]) = 5461061;
      break;
    case 0xE:
      char v10 = 4;
      int v6 = 1397968455;
      goto LABEL_28;
    case 0xF:
      char v10 = 4;
      int v6 = 1397965905;
      goto LABEL_28;
    case 0x10:
      char v10 = 5;
      strcpy((char *)__p, "RCTTH");
      break;
    case 0x11:
      char v10 = 3;
      LODWORD(__p[0]) = 5260097;
      break;
    case 0x12:
      char v10 = 4;
      int v6 = 1297040214;
      goto LABEL_28;
    case 0x13:
      char v10 = 4;
      int v6 = 1129335117;
LABEL_28:
      LODWORD(__p[0]) = v6;
      BYTE4(__p[0]) = 0;
      break;
    case 0x14:
      char v10 = 3;
      LODWORD(__p[0]) = 4999236;
      break;
    case 0x15:
      char v10 = 3;
      LODWORD(__p[0]) = 5789005;
      break;
    case 0x16:
      char v10 = 3;
      LODWORD(__p[0]) = 4407622;
      break;
    default:
      char v10 = 7;
      strcpy((char *)__p, "Unknown");
      break;
  }
  uint64_t v7 = "error";
  if (v4) {
    uint64_t v7 = "success";
  }
  *(_DWORD *)std::string buf = 136315394;
  uint64_t v12 = __p;
  __int16 v13 = 2080;
  uint64_t v14 = v7;
  _os_log_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_DEFAULT, "#I Transport close %s: %s", buf, 0x16u);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  return v4;
}

uint64_t BasebandTransport::startReader_sync(NSObject **this)
{
  if (!this[37])
  {
    if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize((capabilities::abs *)this)) {
      size_t v2 = 0x4000;
    }
    else {
      size_t v2 = 0x8000;
    }
    this[38] = v2;
    this[37] = operator new[](v2);
    dispatch_queue_t v3 = dispatch_queue_create("ipc.bb", 0);
    uint64_t v4 = this[39];
    this[39] = v3;
    if (v4) {
      dispatch_release(v4);
    }
  }
  *((unsigned char *)this + 292) = 1;
  *((unsigned char *)this + 332) = 1;
  BasebandTransport::queueRead_sync((BasebandTransport *)this);
  return *((unsigned __int8 *)this + 292);
}

void BasebandTransport::queueRead_sync(BasebandTransport *this)
{
  size_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (uint64_t v3 = *((void *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  int v6 = *((void *)this + 40);
  if (v6)
  {
    dispatch_retain(*((dispatch_object_t *)this + 40));
    dispatch_group_enter(v6);
  }
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1174405120;
  v8[2] = ___ZN17BasebandTransport14queueRead_syncEv_block_invoke;
  void v8[3] = &__block_descriptor_tmp_67_0;
  v8[4] = this;
  void v8[5] = v3;
  uint64_t v9 = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  dispatch_group_t group = v6;
  if (v6)
  {
    dispatch_retain(v6);
    dispatch_group_enter(group);
  }
  dispatch_async(*((dispatch_queue_t *)this + 39), v8);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  uint64_t v7 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (v6)
  {
    dispatch_group_leave(v6);
    dispatch_release(v6);
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

uint64_t ___ZN17BasebandTransport10stopReaderEv_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(v1 + 292);
  *(unsigned char *)(v1 + 292) = 0;
  *(unsigned char *)(v1 + 332) = 0;
  return result;
}

uint64_t ___ZN17BasebandTransport10stopReaderEv_block_invoke_2(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  size_t v2 = *(uint64_t (**)(uint64_t))(v1 + 232);
  if (v2)
  {
    uint64_t v3 = result;
    uint64_t result = v2(v1 + 176);
    if (result)
    {
      if (*(unsigned char *)(*(void *)(*(void *)(v3 + 32) + 8) + 24))
      {
        uint64_t v4 = *(uint64_t (**)(uint64_t))(v1 + 192);
        if (v4)
        {
          return v4(v1 + 176);
        }
      }
    }
  }
  return result;
}

void ___ZN17BasebandTransport14queueRead_syncEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  size_t v2 = *(NSObject **)(a1 + 56);
  uint64_t v3 = v2;
  if (v2)
  {
    dispatch_retain(v2);
    dispatch_group_enter(v2);
  }
  BasebandTransport::read_sync(v1, &v3);
  if (v2)
  {
    dispatch_group_leave(v2);
    dispatch_release(v2);
  }
}

void sub_1C5B072A4(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void BasebandTransport::read_sync(uint64_t a1, NSObject **a2)
{
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 80);
  uint64_t v5 = (uint64_t *)(a1 + 72);
  uint64_t v28 = v6;
  if (!v4
    || (uint64_t v8 = (capabilities::abs *)std::__shared_weak_count::lock(v4), (v29 = (std::__shared_weak_count *)v8) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v27 = 0;
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *, void, uint64_t, void))(a1 + 184);
  if (v9)
  {
    char v10 = v8;
    uint64_t v11 = *(void *)(a1 + 296);
    uint64_t v12 = capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v8) ? 0x4000 : 0x8000;
    int v13 = v9(a1 + 176, v11, v12, &v27, 0, 0xFFFFFFFFLL, 0);
    int v14 = v27 ? v13 : 0;
    if (v14 == 1)
    {
      v25[0] = MEMORY[0x1E4F143A8];
      v25[1] = 0x40000000;
      v25[2] = ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke;
      v25[3] = &__block_descriptor_tmp_68;
      v25[4] = a1;
      int v26 = v27;
      ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v5, (uint64_t)v25);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke_2;
      block[3] = &__block_descriptor_tmp_71_2;
      void block[4] = a1;
      void block[5] = v6;
      uint64_t v22 = (std::__shared_weak_count *)v10;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v10 + 1, 1uLL, memory_order_relaxed);
      uint64_t v15 = *a2;
      dispatch_group_t group = v15;
      if (v15)
      {
        dispatch_retain(v15);
        dispatch_group_enter(group);
      }
      int v24 = v27;
      dispatch_sync(*(dispatch_queue_t *)(a1 + 152), block);
      if (group)
      {
        dispatch_group_leave(group);
        if (group) {
          dispatch_release(group);
        }
      }
      uint64_t v16 = v22;
      if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 1174405120;
  v19[2] = ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke_72;
  void v19[3] = &__block_descriptor_tmp_73_0;
  void v19[4] = a1;
  v19[5] = v28;
  uint64_t v20 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v5, (uint64_t)v19);
  uint64_t v17 = v20;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  uint64_t v18 = v29;
  if (v29)
  {
    if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1C5B075C4(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1 - 96);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrI17BasebandTransportEE56c30_ZTSN8dispatch13group_sessionE(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a2[7];
  a1[7] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    uint64_t v5 = a1[7];
    if (v5)
    {
      dispatch_group_enter(v5);
    }
  }
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrI17BasebandTransportEE56c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  size_t v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 56);
    if (v3) {
      dispatch_release(v3);
    }
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 336) += *(unsigned int *)(result + 40);
  return result;
}

void ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke_2(uint64_t a1)
{
  size_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = v2[16];
  if (v3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    (*(void (**)(uint64_t, void, void, void **))(*(void *)v3 + 8))(v3, v2[37], *(unsigned int *)(a1 + 64), &__p);
    (*(void (**)(void))(v2[18] + 16))();
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    uint64_t v4 = *(void (**)(void))(v2[18] + 16);
    v4();
  }
}

void sub_1C5B077C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BasebandTransport *___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke_72(uint64_t a1)
{
  uint64_t result = *(BasebandTransport **)(a1 + 32);
  if (*((unsigned char *)result + 292)) {
    return (BasebandTransport *)BasebandTransport::queueRead_sync(result);
  }
  return result;
}

uint64_t __copy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrI17BasebandTransportEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrI17BasebandTransportEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN17BasebandTransport12timerOn_syncEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (!v2) {
    return;
  }
  uint64_t v3 = a1[4];
  uint64_t v4 = std::__shared_weak_count::lock(v2);
  if (!v4) {
    return;
  }
  uint64_t v5 = v4;
  uint64_t v6 = a1[5];
  if (!v6) {
    goto LABEL_14;
  }
  uint64_t v7 = (int *)(v3 + 328);
  uint64_t v8 = *(void *)(v3 + 336);
  uint64_t v9 = *(void *)(v3 + 376);
  uint64_t v10 = *(void *)(v3 + 344) - *(void *)(v3 + 384);
  *(void *)(v3 + 352) = v8 - v9;
  *(void *)(v3 + 360) = v10;
  if (v10) {
    BOOL v11 = 0;
  }
  else {
    BOOL v11 = v8 == v9;
  }
  if (v11)
  {
    int v12 = 3;
  }
  else
  {
    if (*v7 != 3) {
      goto LABEL_12;
    }
    int v12 = 1;
  }
  int *v7 = v12;
LABEL_12:
  long long v13 = *(_OWORD *)(v3 + 344);
  *(_OWORD *)(v3 + 368) = *(_OWORD *)v7;
  *(_OWORD *)(v3 + 384) = v13;
  *(void *)(v3 + 400) = *(void *)(v3 + 360);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZN17BasebandTransport12timerOn_syncEv_block_invoke_2;
  block[3] = &__block_descriptor_tmp_76_4;
  void block[4] = v3;
  void block[5] = v6;
  uint64_t v16 = v4;
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  dispatch_async(*(dispatch_queue_t *)(v3 + 152), block);
  int v14 = v16;
  if (!v16 || atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_14:
    if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_17:
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_17;
  }
}

uint64_t ___ZN17BasebandTransport12timerOn_syncEv_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(v5 + 272);
  uint64_t v10 = *(void *)(v5 + 400);
  long long v7 = *(_OWORD *)(v5 + 384);
  v9[0] = *(_OWORD *)(v5 + 368);
  v9[1] = v7;
  return (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t))(v6 + 16))(v6, v9, a3, a4, a5);
}

__n128 BasebandTransport::getStatus@<Q0>(BasebandTransport *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = *((void *)this + 45);
  __n128 result = *(__n128 *)((char *)this + 328);
  long long v3 = *(_OWORD *)((char *)this + 344);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

void ___ZN17BasebandTransport9dumpStateEb_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  *(int64x2_t *)(v2 + 352) = vsubq_s64(*(int64x2_t *)(v2 + 336), *(int64x2_t *)(v2 + 376));
  long long v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    BasebandTransport::Parameters::toString((BasebandTransport::Parameters *)(v2 + 104), __p);
    if (v7 >= 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v9 = v4;
    _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I %s", buf, 0xCu);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    long long v3 = *(NSObject **)(v2 + 40);
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)
    && ((BasebandTransport::Status::toString((BasebandTransport::Status *)(v2 + 328), __p), v7 >= 0)
      ? (uint64_t v5 = __p)
      : (uint64_t v5 = (void **)__p[0]),
        *(_DWORD *)std::string buf = 136315138,
        uint64_t v9 = v5,
        _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I %s", buf, 0xCu),
        v7 < 0))
  {
    operator delete(__p[0]);
    if (!*(unsigned char *)(a1 + 40)) {
      return;
    }
  }
  else if (!*(unsigned char *)(a1 + 40))
  {
    return;
  }
  *(_DWORD *)(v2 + 328) = 0;
  *(unsigned char *)(v2 + 332) = 0;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(void *)(v2 + 365) = 0;
  BasebandTransport::timerOn_sync((BasebandTransport *)v2);
}

void BasebandTransport::reportStatus(uint64_t a1, int a2, void **a3)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN17BasebandTransport12reportStatusEjN8dispatch5blockIU13block_pointerFvNS_6StatusEEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_81;
  v7[4] = a1;
  int v9 = a2;
  uint64_t v4 = *a3;
  if (*a3) {
    uint64_t v4 = _Block_copy(v4);
  }
  aBlocunint64_t k = v4;
  uint64_t v10 = v7;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_98;
  void block[4] = a1 + 72;
  void block[5] = &v10;
  uint64_t v5 = *(NSObject **)(a1 + 88);
  if (!*(void *)(a1 + 96))
  {
    dispatch_sync(v5, block);
    uint64_t v6 = aBlock;
    if (!aBlock) {
      return;
    }
    goto LABEL_7;
  }
  dispatch_async_and_wait(v5, block);
  uint64_t v6 = aBlock;
  if (aBlock) {
LABEL_7:
  }
    _Block_release(v6);
}

void ___ZN17BasebandTransport12reportStatusEjN8dispatch5blockIU13block_pointerFvNS_6StatusEEEE_block_invoke(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  *(_DWORD *)(v3 + 288) = v1;
  if (v2) {
    uint64_t v2 = _Block_copy(v2);
  }
  uint64_t v4 = *(const void **)(v3 + 272);
  *(void *)(v3 + 272) = v2;
  if (v4) {
    _Block_release(v4);
  }

  BasebandTransport::timerOn_sync((BasebandTransport *)v3);
}

void *__copy_helper_block_e8_40c70_ZTSN8dispatch5blockIU13block_pointerFvN17BasebandTransport6StatusEEEE(uint64_t a1, uint64_t a2)
{
  __n128 result = *(void **)(a2 + 40);
  if (result) {
    __n128 result = _Block_copy(result);
  }
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c70_ZTSN8dispatch5blockIU13block_pointerFvN17BasebandTransport6StatusEEEE(uint64_t a1)
{
  int v1 = *(const void **)(a1 + 40);
  if (v1) {
    _Block_release(v1);
  }
}

uint64_t ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

double ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 0x600000000000000;
  double result = *(double *)"ipc.bb";
  *(_OWORD *)a1 = *(_OWORD *)"ipc.bb";
  return result;
}

uint64_t ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F210C938;
  MEMORY[0x1C87940C0](a1 + 1);
  return a1;
}

void ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F210C938;
  MEMORY[0x1C87940C0](a1 + 1);

  operator delete(a1);
}

void ___ZL14sLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  char v9 = 18;
  strcpy(__p, "baseband.transport");
  ctu::LogServer::create();
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = v10;
  long long v10 = 0uLL;
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)uint64_t v2 = v3;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  if (*((void *)&v10 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v10 + 1) + 16))(*((void *)&v10 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v10 + 1));
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (v9 < 0) {
LABEL_7:
  }
    operator delete(*(void **)__p);
LABEL_8:
  uint64_t v5 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v5->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_1F210C978;
  *(void *)std::string __p = v5;
  uint64_t v6 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6->__shared_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210C9E0;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = v5;
  *(void *)&__p[8] = v6;
  char v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  ctu::LogServer::addWriter();
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  ctu::LogServer::start(**(ctu::LogServer ***)(a1 + 32));
  ctu::LogServer::setEnabled(**(ctu::LogServer ***)(a1 + 32));
  if (*(void *)&__p[8])
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*(void *)&__p[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(void))(**(void **)&__p[8] + 16))(*(void *)&__p[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&__p[8]);
    }
  }
}

void sub_1C5B08114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C5B08130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  operator delete(v16);
  _Unwind_Resume(a1);
}

void sub_1C5B08158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<EmptyLogWriter *,std::shared_ptr<ctu::LogWriter>::__shared_ptr_default_delete<ctu::LogWriter,EmptyLogWriter>,std::allocator<EmptyLogWriter>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<EmptyLogWriter *,std::shared_ptr<ctu::LogWriter>::__shared_ptr_default_delete<ctu::LogWriter,EmptyLogWriter>,std::allocator<EmptyLogWriter>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<EmptyLogWriter *,std::shared_ptr<ctu::LogWriter>::__shared_ptr_default_delete<ctu::LogWriter,EmptyLogWriter>,std::allocator<EmptyLogWriter>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C5BCA6D7) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C5BCA6D7 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C5BCA6D7)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C5BCA6D7 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void ctu::SharedLoggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F210C938;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1C5B0845C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C5B08478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<BasebandTransportICE *,std::shared_ptr<BasebandTransportICE> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransportICE>(BasebandTransportICE*)::{lambda(BasebandTransportICE *)#1},std::allocator<BasebandTransportICE>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<BasebandTransportICE *,std::shared_ptr<BasebandTransportICE> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransportICE>(BasebandTransportICE*)::{lambda(BasebandTransportICE *)#1},std::allocator<BasebandTransportICE>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<BasebandTransportICE *,std::shared_ptr<BasebandTransportICE> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransportICE>(BasebandTransportICE*)::{lambda(BasebandTransportICE *)#1},std::allocator<BasebandTransportICE>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrI20BasebandTransportICEEENSt3__11"
                     "0shared_ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrI20BasebandTransportIC"
                                "EEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrI20BasebandTransportICEEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrI20BasebandTransportICEEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<BasebandTransportICE> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransportICE>(BasebandTransportICE*)::{lambda(BasebandTransportICE*)#1}::operator() const(BasebandTransportICE*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<BasebandTransport *,std::shared_ptr<BasebandTransport> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransport>(BasebandTransport*)::{lambda(BasebandTransport *)#1},std::allocator<BasebandTransport>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<BasebandTransport *,std::shared_ptr<BasebandTransport> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransport>(BasebandTransport*)::{lambda(BasebandTransport *)#1},std::allocator<BasebandTransport>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<BasebandTransport *,std::shared_ptr<BasebandTransport> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransport>(BasebandTransport*)::{lambda(BasebandTransport *)#1},std::allocator<BasebandTransport>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrIS1_EENSt3__110shared_"
                                "ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<BasebandTransport> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransport>(BasebandTransport*)::{lambda(BasebandTransport*)#1}::operator() const(BasebandTransport*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void _ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb0_E3__0EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void (***)(const void *, _OWORD *, uint64_t, uint64_t, uint64_t))a1;
  long long v7 = *(_OWORD *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 40);
  v8[0] = *(_OWORD *)(a1 + 8);
  v8[1] = v7;
  v6[2](v6, v8, a3, a4, a5);
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  operator delete((void *)a1);
}

void sub_1C5B086C4(_Unwind_Exception *a1)
{
  if (*v1) {
    _Block_release(*v1);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb1_E3__1EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_(const void **a1)
{
  (*((void (**)(void))*a1 + 2))();
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  if (*a1) {
    _Block_release(*a1);
  }

  operator delete(a1);
}

void sub_1C5B08754(_Unwind_Exception *a1)
{
  unint64_t v3 = *(void **)(v1 + 8);
  if (v3)
  {
    *(void *)(v1 + 16) = v3;
    operator delete(v3);
  }
  if (*(void *)v1) {
    _Block_release(*(const void **)v1);
  }
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb1_E3__2EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_(void **a1)
{
  (*((void (**)(void))*a1 + 2))();
  if (!*((unsigned char *)a1 + 20))
  {
    free(a1[1]);
    uint64_t v2 = *a1;
    if (!*a1) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v2 = *a1;
  if (*a1) {
LABEL_5:
  }
    _Block_release(v2);
LABEL_6:

  operator delete(a1);
}

void sub_1C5B087FC(_Unwind_Exception *a1)
{
  if (*v1) {
    _Block_release(*v1);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v7 = v6;
  uint64_t v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F210CB08;
  void block[5] = v5;
  int v12 = v7;
  uint64_t p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a2;
  dispatch_async(v8, block);
  long long v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c46_ZTSNSt3__110shared_ptrIK17BasebandTransportEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__110shared_ptrIK17BasebandTransportEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void NetworkingModule::create(uint64_t *a1@<X0>, NetworkingModule **a2@<X8>)
{
  *a2 = (NetworkingModule *)0xAAAAAAAAAAAAAAAALL;
  a2[1] = (NetworkingModule *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v4 = operator new(0xC8uLL);
  uint64_t v5 = (uint64_t)v4;
  uint64_t v6 = *a1;
  long long v7 = (std::__shared_weak_count *)a1[1];
  v9[0] = v6;
  v9[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  NetworkingModule::NetworkingModule((uint64_t)v4, v9);
  *a2 = (NetworkingModule *)0xAAAAAAAAAAAAAAAALL;
  a2[1] = (NetworkingModule *)0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<NetworkingModule>::shared_ptr[abi:ne180100]<NetworkingModule,std::shared_ptr<NetworkingModule> ctu::SharedSynchronizable<NetworkingModule>::make_shared_ptr<NetworkingModule>(NetworkingModule*)::{lambda(NetworkingModule*)#1},void>(a2, v5);
  ctu::Loggable<NetworkingModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync((uint64_t)*a2 + 48);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = *a2;

  NetworkingModule::init(v8);
}

void sub_1C5B08AF8(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v2);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(a1);
}

void NetworkingModule::init(NetworkingModule *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v2 || (uint64_t v3 = *((void *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  uint64_t v6 = operator new(8uLL);
  void *v6 = this;
  long long v7 = *((void *)this + 17);
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v8 = operator new(0x18uLL);
  *uint64_t v8 = v6;
  v8[1] = v3;
  _OWORD v8[2] = v5;
  dispatch_async_f(v7, v8, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<NetworkingModule>::execute_wrapped<NetworkingModule::init(void)::$_0>(NetworkingModule::init(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<NetworkingModule::init(void)::$_0,dispatch_queue_s *::default_delete<NetworkingModule::init(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

uint64_t NetworkingModule::NetworkingModule(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1F2112348;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(void *)a1 = &unk_1F210CD08;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &unk_1F210CD08;
  }
  *(void *)a1 = &unk_1F210CB60;
  *(void *)(a1 + 48) = &unk_1F210CBD0;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v12, "com.apple.telephony.abm", "net.mod");
  GetABMLogServer(&v10);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v6 = dispatch_queue_create_with_target_V2("net.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v6, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v6);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = v6;
  if (v6)
  {
    dispatch_retain(v6);
    *(void *)(a1 + 144) = 0;
    dispatch_release(v6);
  }
  else
  {
    *(void *)(a1 + 144) = 0;
  }
  *(void *)(a1 + 48) = &unk_1F210CD78;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v14);
  *(void *)(a1 + 56) = &unk_1F2102CB8;
  long long v7 = v11;
  *(void *)(a1 + 104) = v10;
  *(void *)(a1 + 112) = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v13);
  *(void *)(a1 + 48) = &unk_1F210CE08;
  uint64_t v8 = v11;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v12);
  *(void *)a1 = &unk_1F210CB60;
  *(void *)(a1 + 48) = &unk_1F210CBD0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 178) = 0u;
  return a1;
}

void sub_1C5B08EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a15);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a13);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v16);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  Service::~Service(v15);
  _Unwind_Resume(a1);
}

void sub_1C5B08F34(_Unwind_Exception *a1)
{
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void NetworkingModule::~NetworkingModule(NetworkingModule *this)
{
  *(void *)this = &unk_1F210CB60;
  *((void *)this + 6) = &unk_1F210CBD0;
  uint64_t v2 = (const void *)*((void *)this + 23);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 20);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  *((void *)this + 6) = &unk_1F210CD78;
  MEMORY[0x1C87940C0]((char *)this + 56);
  uint64_t v5 = *((void *)this + 18);
  if (v5) {
    dispatch_release(v5);
  }
  uint64_t v6 = *((void *)this + 17);
  if (v6) {
    dispatch_release(v6);
  }
  long long v7 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  *(void *)this = &unk_1F2112348;
  uint64_t v8 = *((void *)this + 3);
  if (v8)
  {
    uint64_t v9 = *((void *)this + 4);
    uint64_t v10 = (void *)*((void *)this + 3);
    if (v9 != v8)
    {
      do
      {
        if (*(char *)(v9 - 1) < 0) {
          operator delete(*(void **)(v9 - 24));
        }
        v9 -= 24;
      }
      while (v9 != v8);
      uint64_t v10 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v8;
    operator delete(v10);
  }
  BOOL v11 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
}

{
  void *v1;
  uint64_t vars8;

  NetworkingModule::~NetworkingModule(this);

  operator delete(v1);
}

void non-virtual thunk to'NetworkingModule::~NetworkingModule(NetworkingModule *this)
{
}

{
  void *v1;
  uint64_t vars8;

  NetworkingModule::~NetworkingModule((NetworkingModule *)((char *)this - 48));

  operator delete(v1);
}

void NetworkingModule::shutdown(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v7 = v6;
  uint64_t v8 = operator new(8uLL);
  *uint64_t v8 = v3;
  uint64_t v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<NetworkingModule>::execute_wrapped<NetworkingModule::shutdown(dispatch::group_session)::$_0>(NetworkingModule::shutdown(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<NetworkingModule::shutdown(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<NetworkingModule::shutdown(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void NetworkingModule::initialize(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v9 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)a1[16];
  if (!v10 || (v11 = a1[15], (int v12 = std::__shared_weak_count::lock(v10)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v13 = v12;
  int v14 = operator new(0x20uLL);
  *int v14 = a1;
  v14[1] = v5;
  v14[2] = v7;
  void v14[3] = v9;
  uint64_t v15 = a1[17];
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v16 = operator new(0x18uLL);
  void *v16 = v14;
  v16[1] = v11;
  v16[2] = v13;
  dispatch_async_f(v15, v16, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<NetworkingModule>::execute_wrapped<NetworkingModule::initialize(dispatch::group_session)::$_0>(NetworkingModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<NetworkingModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<NetworkingModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v17 = (std::__shared_weak_count *)a1[16];
  if (!v17 || (uint64_t v18 = a1[15], (v19 = std::__shared_weak_count::lock(v17)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v20 = v19;
  uint64_t v21 = operator new(8uLL);
  void *v21 = a1;
  uint64_t v22 = a1[17];
  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  int v23 = operator new(0x18uLL);
  void *v23 = v21;
  v23[1] = v18;
  v23[2] = v20;
  dispatch_async_f(v22, v23, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<NetworkingModule>::execute_wrapped<NetworkingModule::initialize(dispatch::group_session)::$_1>(NetworkingModule::initialize(dispatch::group_session)::$_1 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<NetworkingModule::initialize(dispatch::group_session)::$_1,dispatch_queue_s *::default_delete<NetworkingModule::initialize(dispatch::group_session)::$_1>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }

  std::__shared_weak_count::__release_weak(v7);
}

void NetworkingModule::finishInitialization_sync(NetworkingModule *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v2 || (uint64_t v3 = *((void *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (config::hw::watch((config::hw *)v4))
  {
    uint64_t v6 = (const char *)(*(uint64_t (**)(NetworkingModule *))(*(void *)this + 16))(this);
    size_t v7 = strlen(v6);
    if (v7 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (void *)v7;
    if (v7 >= 0x17)
    {
      uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17) {
        uint64_t v10 = v7 | 7;
      }
      uint64_t v11 = v10 + 1;
      uint64_t v9 = (void **)operator new(v10 + 1);
      __dst[1] = v8;
      unint64_t v32 = v11 | 0x8000000000000000;
      __dst[0] = v9;
    }
    else
    {
      HIBYTE(v32) = v7;
      uint64_t v9 = __dst;
      if (!v7) {
        goto LABEL_14;
      }
    }
    memmove(v9, v6, (size_t)v8);
LABEL_14:
    *((unsigned char *)v8 + (void)v9) = 0;
    CFTypeRef cf = 0;
    AppleBasebandManager::create();
    long long v12 = v33;
    long long v33 = 0uLL;
    long long v13 = (std::__shared_weak_count *)*((void *)this + 20);
    *(_OWORD *)((char *)this + 152) = v12;
    if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    int v14 = (std::__shared_weak_count *)*((void *)&v33 + 1);
    if (*((void *)&v33 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v33 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      CFTypeRef v15 = cf;
      if (!cf)
      {
LABEL_21:
        if (SHIBYTE(v32) < 0) {
          operator delete(__dst[0]);
        }
        uint64_t v16 = (const void *)*MEMORY[0x1E4F4CEF8];
        size_t v17 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
        if (v17 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        uint64_t v18 = (void *)v17;
        if (v17 >= 0x17)
        {
          uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v17 | 7) != 0x17) {
            uint64_t v20 = v17 | 7;
          }
          uint64_t v21 = v20 + 1;
          uint64_t v19 = operator new(v20 + 1);
          __p[1] = v18;
          unint64_t v29 = v21 | 0x8000000000000000;
          __p[0] = v19;
        }
        else
        {
          HIBYTE(v29) = v17;
          uint64_t v19 = __p;
          if (!v17) {
            goto LABEL_31;
          }
        }
        memmove(v19, v16, (size_t)v18);
LABEL_31:
        *((unsigned char *)v18 + (void)v19) = 0;
        v24[0] = MEMORY[0x1E4F143A8];
        v24[1] = 3321888768;
        v24[2] = ___ZN16NetworkingModule25finishInitialization_syncEv_block_invoke;
        v24[3] = &__block_descriptor_56_e8_40c41_ZTSNSt3__18weak_ptrI16NetworkingModuleEE_e70_v24__0_shared_ptr_abm::client::Event____Event_____shared_weak_count__8l;
        v24[4] = this;
        v24[5] = v3;
        char v25 = v5;
        atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v22 = _Block_copy(v24);
        int v23 = *((void *)this + 17);
        if (v23) {
          dispatch_retain(*((dispatch_object_t *)this + 17));
        }
        aBlocunint64_t k = v22;
        dispatch_object_t object = v23;
        AppleBasebandManager::setEventHandler();
        if (object) {
          dispatch_release(object);
        }
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (SHIBYTE(v29) < 0) {
          operator delete(__p[0]);
        }
        AppleBasebandManager::eventsOn(*((AppleBasebandManager **)this + 19));
        if (v25) {
          std::__shared_weak_count::__release_weak(v25);
        }
        goto LABEL_41;
      }
    }
    else
    {
      CFTypeRef v15 = cf;
      if (!cf) {
        goto LABEL_21;
      }
    }
    CFRelease(v15);
    goto LABEL_21;
  }
LABEL_41:
  NetworkingModule::applyLQMAbortPolicy_sync(this);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C5B09858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    std::__shared_weak_count::__release_weak(v30);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v30);
  _Unwind_Resume(a1);
}

void ___ZN16NetworkingModule25finishInitialization_syncEv_block_invoke(void *a1, abm::client::Event **a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = (NetworkingModule *)a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    uint64_t v18 = v6;
    if (v6)
    {
      size_t v7 = v6;
      if (a1[5])
      {
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        abm::client::Event::getData((uint64_t *)&cf, *a2);
        CFTypeRef v8 = cf;
        if (cf) {
          uint64_t v9 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
        }
        else {
          uint64_t v9 = 0;
        }
        if (v9)
        {
          v15[0] = 0xAAAAAAAAAAAAAAAALL;
          v15[1] = 0xAAAAAAAAAAAAAAAALL;
          ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v15, (const __CFDictionary *)cf);
          memset(v14, 170, sizeof(v14));
          ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v19, (const char *)*MEMORY[0x1E4F4C688]);
          ctu::cf::map_adapter::getString();
          MEMORY[0x1C8794290](&v19);
          char v10 = HIBYTE(v14[2]);
          if (SHIBYTE(v14[2]) >= 0) {
            size_t v11 = HIBYTE(v14[2]);
          }
          else {
            size_t v11 = (size_t)v14[1];
          }
          if (v11 == strlen((const char *)*MEMORY[0x1E4F4CAE8]))
          {
            if (SHIBYTE(v14[2]) >= 0) {
              long long v12 = v14;
            }
            else {
              long long v12 = (void **)v14[0];
            }
            int v13 = memcmp(v12, (const void *)*MEMORY[0x1E4F4CAE8], v11);
            *((unsigned char *)v5 + 193) = v13 == 0;
            if (!v13)
            {
              NetworkingModule::applyBreadMode_sync(v5);
              char v10 = HIBYTE(v14[2]);
            }
          }
          else
          {
            *((unsigned char *)v5 + 193) = 0;
          }
          if (v10 < 0) {
            operator delete(v14[0]);
          }
          MEMORY[0x1C87942E0](v15);
          CFTypeRef v8 = cf;
        }
        if (v8) {
          CFRelease(v8);
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1C5B09AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,const void *a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C87942E0](&a21);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a23);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_1C5B09B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void NetworkingModule::applyBreadMode_sync(NetworkingModule *this)
{
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  int v13 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v2 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v3 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v14, v2);
    long long v4 = v14;
    long long v14 = 0uLL;
    uint64_t v5 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v4;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = (std::__shared_weak_count *)*((void *)&v14 + 1);
    if (*((void *)&v14 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v14 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    uint64_t v3 = off_1EBBDCA08;
  }
  size_t v7 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v3 + 16))(&v10, v3);
  unint64_t v12 = 0;
  int v13 = 0;
  if (v11)
  {
    int v13 = std::__shared_weak_count::lock(v11);
    if (v13) {
      unint64_t v12 = v10;
    }
    if (v11) {
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (!v7 || atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    unint64_t v8 = v12;
    if (!v12) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  unint64_t v8 = v12;
  if (v12) {
LABEL_19:
  }
    (*(void (**)(unint64_t, void))(*(void *)v8 + 328))(v8, *((unsigned __int8 *)this + 192));
LABEL_20:
  uint64_t v9 = v13;
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1C5B09DB0(_Unwind_Exception *a1)
{
}

void sub_1C5B09DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C5B09DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t __copy_helper_block_e8_40c41_ZTSNSt3__18weak_ptrI16NetworkingModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c41_ZTSNSt3__18weak_ptrI16NetworkingModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void NetworkingModule::applyLQMAbortPolicy_sync(NetworkingModule *this)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 21))
  {
    CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    __srCC_SHA256_CTX c = (void *)*MEMORY[0x1E4F4D218];
    size_t v1 = strlen((const char *)*MEMORY[0x1E4F4D218]);
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v2 = v1;
    if (v1 >= 0x17)
    {
      uint64_t v5 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v5 = v1 | 7;
      }
      uint64_t v6 = v5 + 1;
      uint64_t v3 = operator new(v5 + 1);
      *(void *)&uint8_t buf[8] = v2;
      *(void *)&uint8_t buf[16] = v6 | 0x8000000000000000;
      *(void *)std::string buf = v3;
    }
    else
    {
      uint8_t buf[23] = v1;
      uint64_t v3 = buf;
      if (!v1)
      {
LABEL_12:
        v3[v2] = 0;
        NetworkingModule::getBundleIDList_sync((uint64_t)this, (uint64_t)buf, &cf);
        if ((buf[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)buf);
          CFArrayRef v7 = (const __CFArray *)cf;
          if (cf) {
            uint64_t v51 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
          }
          else {
            uint64_t v51 = 0;
          }
          if (v51) {
            goto LABEL_17;
          }
        }
        else
        {
          CFArrayRef v7 = (const __CFArray *)cf;
          if (cf) {
            unint64_t v8 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
          }
          else {
            unint64_t v8 = 0;
          }
          if (v8)
          {
LABEL_17:
            uint64_t v64 = *((void *)this + 21);
            CFArrayRef theArray = v7;
            if (v7) {
              CFRetain(v7);
            }
            uint64_t v9 = &loc_1C5BC2000;
            uint64_t Count = CFArrayGetCount(v7);
            if (Count)
            {
              CFIndex v10 = 0;
              char v63 = 0;
              unint64_t v11 = 0x1E4F38000uLL;
              while (1)
              {
                memset(&__p, 170, sizeof(__p));
                CFArrayGetValueAtIndex(theArray, v10);
                memset(&v82, 0, sizeof(v82));
                ctu::cf::assign();
                std::string __p = v82;
                if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
                  std::string::__init_copy_ctor_external(&v73, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
                }
                else {
                  std::string v73 = __p;
                }
                unint64_t v12 = (void *)NEHelperCacheCopyAppUUIDMapping();
                xpc_object_t v13 = v12;
                if (v12)
                {
                  xpc_object_t object = v12;
                }
                else
                {
                  xpc_object_t v13 = xpc_null_create();
                  xpc_object_t object = v13;
                  if (!v13)
                  {
                    xpc_object_t v14 = xpc_null_create();
                    xpc_object_t v13 = 0;
                    goto LABEL_32;
                  }
                }
                if (MEMORY[0x1C8795EB0](v13) == MEMORY[0x1E4F14568])
                {
                  xpc_retain(v13);
                  goto LABEL_33;
                }
                xpc_object_t v14 = xpc_null_create();
LABEL_32:
                xpc_object_t object = v14;
LABEL_33:
                xpc_release(v13);
                xpc_object_t v15 = object;
                if (object)
                {
                  xpc_retain(object);
                  xpc_object_t v16 = v15;
                }
                else
                {
                  xpc_object_t v16 = xpc_null_create();
                }
                if (MEMORY[0x1C8795EB0](v16) == MEMORY[0x1E4F14568])
                {
                  v82.__r_.__value_.__r.__words[0] = 0;
                  v82.__r_.__value_.__l.__size_ = (std::string::size_type)&v82;
                  v82.__r_.__value_.__r.__words[2] = 0x3052000000;
                  *(void *)&long long v83 = __Block_byref_object_copy__4;
                  *((void *)&v83 + 1) = __Block_byref_object_dispose__4;
                  uint64_t v84 = 0;
                  *(void *)applier = MEMORY[0x1E4F143A8];
                  *(void *)&applier[8] = 3221225472;
                  *(void *)&applier[16] = ___ZN20NetworkPolicyManager10uuidBridgeEN3xpc5arrayE_block_invoke;
                  unint64_t v80 = &unk_1E651BDA8;
                  unint64_t v81 = &v82;
                  xpc_array_apply(v16, applier);
                  id obj = *(id *)(v82.__r_.__value_.__l.__size_ + 40);
                  _Block_object_dispose(&v82, 8);
                }
                else
                {
                  id obj = 0;
                }
                xpc_release(v16);
                size_t v17 = *(NSObject **)(v64 + 40);
                if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
                {
                  int v18 = SHIBYTE(v73.__r_.__value_.__r.__words[2]);
                  std::string::size_type v19 = v73.__r_.__value_.__r.__words[0];
                  xpc::object::to_string((uint64_t *)&v82, (xpc::object *)&object);
                  uint64_t v20 = &v73;
                  if (v18 < 0) {
                    uint64_t v20 = (std::string *)v19;
                  }
                  uint64_t v21 = &v82;
                  if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    uint64_t v21 = (std::string *)v82.__r_.__value_.__r.__words[0];
                  }
                  *(_DWORD *)applier = 136315394;
                  *(void *)&applier[4] = v20;
                  *(_WORD *)&applier[12] = 2080;
                  *(void *)&applier[14] = v21;
                  _os_log_impl(&dword_1C59C6000, v17, OS_LOG_TYPE_DEFAULT, "#I UUIDs for bundleID:%s => %s", applier, 0x16u);
                  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v82.__r_.__value_.__l.__data_);
                  }
                  xpc_object_t v15 = object;
                }
                xpc_release(v15);
                if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(v73.__r_.__value_.__l.__data_);
                  CFIndex v62 = v10;
                  if (obj)
                  {
LABEL_49:
                    uint64_t v22 = [*(id *)(v11 + 3368) allInterfaces];
                    if (v22)
                    {
                      uint64_t v23 = [MEMORY[0x1E4F38D38] routeRuleWithAction:4 forType:2];
                      if (v23)
                      {
                        uint64_t v78 = v23;
                        int v66 = [MEMORY[0x1E4F38D30] routeRules:[MEMORY[0x1E4F1C978] arrayWithObjects:&v78, 1]];
                        if (v66)
                        {
                          long long v71 = 0u;
                          long long v72 = 0u;
                          long long v69 = 0u;
                          long long v70 = 0u;
                          uint64_t v24 = [obj countByEnumeratingWithState:&v69 objects:buf count:16];
                          if (v24)
                          {
                            uint64_t v25 = *(void *)v70;
                            do
                            {
                              for (uint64_t i = 0; i != v24; ++i)
                              {
                                if (*(void *)v70 != v25) {
                                  objc_enumerationMutation(obj);
                                }
                                int v27 = *(void **)(*((void *)&v69 + 1) + 8 * i);
                                uint64_t v28 = [*(id *)(v11 + 3368) effectiveApplication:v27];
                                if (v28)
                                {
                                  id v29 = objc_alloc(MEMORY[0x1E4F38D20]);
                                  v76[0] = v28;
                                  v76[1] = v22;
                                  char v30 = [v29 initWithOrder:0 result:v66 conditions:[MEMORY[0x1E4F1C978] arrayWithObjects:v76, 2]];
                                  if (v30)
                                  {
                                    unint64_t v31 = v11;
                                    uint64_t v32 = [*(id *)(v64 + 72) addPolicy:v30];
                                    long long v33 = *(NSObject **)(v64 + 40);
                                    BOOL v34 = os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
                                    if (v32)
                                    {
                                      if (v34)
                                      {
                                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                          uint64_t p_p = &__p;
                                        }
                                        else {
                                          uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                                        }
                                        std::string::size_type v36 = [[(id)objc_msgSend(v27, "UUIDString") UTF8String];
                                        int v37 = [v66 resultType];
                                        LODWORD(v82.__r_.__value_.__l.__data_) = 136315906;
                                        *(std::string::size_type *)((char *)v82.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
                                        WORD2(v82.__r_.__value_.__r.__words[1]) = 2080;
                                        *(std::string::size_type *)((char *)&v82.__r_.__value_.__r.__words[1] + 6) = v36;
                                        HIWORD(v82.__r_.__value_.__r.__words[2]) = 1024;
                                        LODWORD(v83) = v37;
                                        WORD2(v83) = 1024;
                                        *(_DWORD *)((char *)&v83 + 6) = v32;
                                        _os_log_impl(&dword_1C59C6000, v33, OS_LOG_TYPE_DEFAULT, "#I Valid policy; bundle-id:%s UUID:%s result:%u policy-id:%u",
                                          (uint8_t *)&v82,
                                          0x22u);
                                      }
                                      char v63 = 1;
                                    }
                                    else if (v34)
                                    {
                                      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                        uint64_t v38 = &__p;
                                      }
                                      else {
                                        uint64_t v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                      }
                                      std::string::size_type v39 = [[(id)objc_msgSend(v27, "UUIDString") UTF8String];
                                      int v40 = [v66 resultType];
                                      LODWORD(v82.__r_.__value_.__l.__data_) = 136315650;
                                      *(std::string::size_type *)((char *)v82.__r_.__value_.__r.__words + 4) = (std::string::size_type)v38;
                                      WORD2(v82.__r_.__value_.__r.__words[1]) = 2080;
                                      *(std::string::size_type *)((char *)&v82.__r_.__value_.__r.__words[1] + 6) = v39;
                                      HIWORD(v82.__r_.__value_.__r.__words[2]) = 1024;
                                      LODWORD(v83) = v40;
                                      _os_log_impl(&dword_1C59C6000, v33, OS_LOG_TYPE_DEFAULT, "#I Invalid policy; bundle-id:%s UUID:%s result:%u ",
                                        (uint8_t *)&v82,
                                        0x1Cu);
                                    }
                                    unint64_t v11 = v31;
                                  }
                                }
                              }
                              uint64_t v24 = [obj countByEnumeratingWithState:&v69 objects:buf count:16];
                            }
                            while (v24);
                          }
                          goto LABEL_88;
                        }
                        int v48 = *(NSObject **)(v64 + 40);
                        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
                        {
                          LOWORD(v82.__r_.__value_.__l.__data_) = 0;
                          size_t v43 = v48;
                          int v44 = "#I Result creation failed";
LABEL_86:
                          uint32_t v45 = 2;
LABEL_87:
                          _os_log_impl(&dword_1C59C6000, v43, OS_LOG_TYPE_DEFAULT, v44, (uint8_t *)&v82, v45);
                          goto LABEL_88;
                        }
                      }
                      else
                      {
                        __int16 v47 = *(NSObject **)(v64 + 40);
                        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
                        {
                          LOWORD(v82.__r_.__value_.__l.__data_) = 0;
                          size_t v43 = v47;
                          int v44 = "#I Route rule creation failed";
                          goto LABEL_86;
                        }
                      }
                    }
                    else
                    {
                      int v46 = *(NSObject **)(v64 + 40);
                      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
                      {
                        LOWORD(v82.__r_.__value_.__l.__data_) = 0;
                        size_t v43 = v46;
                        int v44 = "#I Interface condition creation failed";
                        goto LABEL_86;
                      }
                    }
                    goto LABEL_88;
                  }
                }
                else
                {
                  CFIndex v62 = v10;
                  if (obj) {
                    goto LABEL_49;
                  }
                }
                uint64_t v41 = *(NSObject **)(v64 + 40);
                if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
                {
                  char v42 = &__p;
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    char v42 = (std::string *)__p.__r_.__value_.__r.__words[0];
                  }
                  LODWORD(v82.__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)v82.__r_.__value_.__r.__words + 4) = (std::string::size_type)v42;
                  size_t v43 = v41;
                  int v44 = "#I No UUIDs available for bundle-id:%s";
                  uint32_t v45 = 12;
                  goto LABEL_87;
                }
LABEL_88:
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(__p.__r_.__value_.__l.__data_);
                  CFIndex v10 = v62 + 1;
                  if (v62 + 1 == Count)
                  {
LABEL_90:
                    if (v63)
                    {
                      uint64_t v9 = (void *)&loc_1C5BC2000;
                      int v49 = [*(id *)(v64 + 72) apply];
                      CFArrayRef v50 = theArray;
                      if (!theArray) {
                        goto LABEL_106;
                      }
                      goto LABEL_105;
                    }
                    int v49 = 0;
                    uint64_t v9 = (void *)&loc_1C5BC2000;
                    CFArrayRef v50 = theArray;
                    if (theArray) {
                      goto LABEL_105;
                    }
                    goto LABEL_106;
                  }
                }
                else
                {
                  CFIndex v10 = v62 + 1;
                  if (v62 + 1 == Count) {
                    goto LABEL_90;
                  }
                }
              }
            }
            unint64_t v56 = *(NSObject **)(v64 + 40);
            if (!os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
            {
              int v49 = 1;
              CFArrayRef v50 = theArray;
              if (!theArray) {
                goto LABEL_106;
              }
              goto LABEL_105;
            }
            *(_WORD *)std::string buf = 0;
            _os_log_impl(&dword_1C59C6000, v56, OS_LOG_TYPE_DEFAULT, "#I Empty bundle-id list; nothing to apply",
              buf,
              2u);
            int v49 = 1;
            CFArrayRef v50 = theArray;
            if (theArray) {
LABEL_105:
            }
              CFRelease(v50);
LABEL_106:
            long long v57 = *((void *)this + 11);
            if (!os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_111;
            }
            unint64_t v58 = "failed";
            if (v49) {
              unint64_t v58 = "successful";
            }
            *(_DWORD *)std::string buf = v9[305];
            *(void *)&uint8_t buf[4] = __src;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = v58;
            std::string v53 = "#I Applying network policy for '%s' %s ";
            unint64_t v54 = v57;
            uint32_t v55 = 22;
            goto LABEL_110;
          }
        }
        unint64_t v52 = *((void *)this + 11);
        if (!os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_111;
        }
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = __src;
        std::string v53 = "#I No network policy to apply for action: %s";
        unint64_t v54 = v52;
        uint32_t v55 = 12;
LABEL_110:
        _os_log_impl(&dword_1C59C6000, v54, OS_LOG_TYPE_DEFAULT, v53, buf, v55);
LABEL_111:
        if (cf) {
          CFRelease(cf);
        }
        return;
      }
    }
    memmove(v3, __src, v2);
    goto LABEL_12;
  }
  long long v4 = *((void *)this + 11);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Network policy update is not supported", buf, 2u);
  }
}

void sub_1C5B0A848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,xpc_object_t object,uint64_t a56,uint64_t a57,void *__p,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1C5B0A970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,const void *a29,const void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a48 < 0) {
    operator delete(__p);
  }
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(&a29);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(&a30);
  _Unwind_Resume(a1);
}

void NetworkingModule::sendVisitInfo_sync(NetworkingModule *this, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((void *)this + 11);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = a2;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = a3;
    _os_log_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_DEFAULT, "#I Visit info: Arrival=%u Departure=%u", buf, 0xEu);
  }
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  size_t v17 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v7 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)buf, v6);
    long long v8 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    uint64_t v9 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v8;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    CFIndex v10 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    uint64_t v7 = off_1EBBDCA08;
  }
  unint64_t v11 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v7 + 16))(&v14, v7);
  unint64_t v16 = 0;
  size_t v17 = 0;
  if (v15)
  {
    size_t v17 = std::__shared_weak_count::lock(v15);
    if (v17) {
      unint64_t v16 = v14;
    }
    if (v15) {
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (!v11 || atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    unint64_t v12 = v16;
    if (!v16) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  unint64_t v12 = v16;
  if (v16) {
LABEL_21:
  }
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)v12 + 368))(v12, a2, a3);
LABEL_22:
  xpc_object_t v13 = v17;
  if (v17)
  {
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1C5B0AC68(_Unwind_Exception *a1)
{
}

void NetworkingModule::getBundleIDList_sync(uint64_t a1@<X0>, uint64_t a2@<X1>, CFTypeRef *a3@<X8>)
{
  memset(&v31, 170, sizeof(v31));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v31 = *(std::string *)a2;
  }
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v5 = (std::string *)((char *)&v31 + HIBYTE(v31.__r_.__value_.__r.__words[2]));
  }
  else {
    uint64_t v5 = (std::string *)(v31.__r_.__value_.__r.__words[0] + v31.__r_.__value_.__l.__size_);
  }
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v6 = &v31;
  }
  else {
    uint64_t v6 = (std::string *)v31.__r_.__value_.__r.__words[0];
  }
  for (; v6 != v5; uint64_t v6 = (std::string *)((char *)v6 + 1))
    v6->__r_.__value_.__s.__data_[0] = __toupper(v6->__r_.__value_.__s.__data_[0]);
  CFTypeRef cf = 0;
  if (!TelephonyUtilIsInternalBuild()) {
    goto LABEL_23;
  }
  pthread_mutex_lock(&ctu::Singleton<ABMNetworkPolicy,ABMNetworkPolicy,ctu::PthreadMutexGuardPolicy<ABMNetworkPolicy>>::sInstance);
  if (qword_1EA3D6990)
  {
LABEL_14:
    long long v8 = (std::__shared_weak_count_vtbl *)qword_1EA3D6990;
    uint64_t v7 = (std::__shared_weak_count *)off_1EA3D6998;
    uint64_t v27 = qword_1EA3D6990;
    uint64_t v28 = (std::__shared_weak_count *)off_1EA3D6998;
    if (!off_1EA3D6998) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  long long v8 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  MEMORY[0x1C87942F0](v8, @"com.apple.AppleBasebandManager.NetworkPolicy", *MEMORY[0x1E4F1D3F0]);
  uint64_t v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210CF48;
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = v8;
  uint64_t v9 = (std::__shared_weak_count *)off_1EA3D6998;
  qword_1EA3D6990 = (uint64_t)v8;
  off_1EA3D6998 = v7;
  if (v9)
  {
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    goto LABEL_14;
  }
  uint64_t v27 = (uint64_t)v8;
  uint64_t v28 = v7;
LABEL_20:
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_21:
  pthread_mutex_unlock(&ctu::Singleton<ABMNetworkPolicy,ABMNetworkPolicy,ctu::PthreadMutexGuardPolicy<ABMNetworkPolicy>>::sInstance);
  Preferences::getPreference<__CFArray const*>(v8, (const char *)&v31, &cf);
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    CFTypeRef v10 = cf;
    *a3 = cf;
    if (!v10) {
      goto LABEL_29;
    }
    goto LABEL_24;
  }
LABEL_23:
  CFTypeRef v10 = cf;
  *a3 = cf;
  if (!v10) {
    goto LABEL_29;
  }
LABEL_24:
  CFRetain(v10);
  if (ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get
    && CFArrayGetCount((CFArrayRef)v10))
  {
    goto LABEL_56;
  }
LABEL_29:
  unint64_t v11 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v27) = 0;
    _os_log_impl(&dword_1C59C6000, v11, OS_LOG_TYPE_DEFAULT, "#I getBundleIDList_sync count zero", (uint8_t *)&v27, 2u);
  }
  unint64_t v12 = (const void *)*MEMORY[0x1E4F4D218];
  size_t v13 = strlen((const char *)*MEMORY[0x1E4F4D218]);
  if (v13 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v14 = (std::__shared_weak_count *)v13;
  if (v13 >= 0x17)
  {
    uint64_t v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v16 = v13 | 7;
    }
    uint64_t v17 = v16 + 1;
    xpc_object_t v15 = (uint64_t *)operator new(v16 + 1);
    uint64_t v28 = v14;
    int64_t v29 = v17 | 0x8000000000000000;
    uint64_t v27 = (uint64_t)v15;
    goto LABEL_38;
  }
  HIBYTE(v29) = v13;
  xpc_object_t v15 = &v27;
  if (v13) {
LABEL_38:
  }
    memmove(v15, v12, (size_t)v14);
  *((unsigned char *)&v14->__vftable + (void)v15) = 0;
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v18 = &v31;
  }
  else {
    int v18 = (std::string *)v31.__r_.__value_.__r.__words[0];
  }
  int v19 = SHIBYTE(v29);
  uint64_t v20 = (void *)v27;
  if (v29 >= 0) {
    uint64_t v21 = (const char *)&v27;
  }
  else {
    uint64_t v21 = (const char *)v27;
  }
  int v22 = strcasecmp((const char *)v18, v21);
  int v23 = v22;
  if (v19 < 0)
  {
    operator delete(v20);
    if (v23) {
      goto LABEL_56;
    }
  }
  else if (v22)
  {
    goto LABEL_56;
  }
  uint64_t v24 = *(const void **)(a1 + 184);
  if (v24)
  {
    CFTypeID v25 = CFGetTypeID(v24);
    if (v25 != CFArrayGetTypeID())
    {
      CFTypeRef v26 = *a3;
      *a3 = 0;
      if (!v26) {
        goto LABEL_56;
      }
      goto LABEL_55;
    }
    CFRetain(v24);
  }
  CFTypeRef v26 = *a3;
  *a3 = v24;
  if (v26) {
LABEL_55:
  }
    CFRelease(v26);
LABEL_56:
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
}

const char *NetworkingModule::getName(NetworkingModule *this)
{
  return "net.mod";
}

void GlobalService::getShutdownStages(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t ctu::Loggable<NetworkingModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<NetworkingModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (const char *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 16))();
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    long long v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<NetworkingModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

uint64_t ctu::PthreadMutexGuardPolicy<ABMNetworkPolicy>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  size_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void *ctu::Loggable<NetworkingModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F210CD78;
  MEMORY[0x1C87940C0](a1 + 1);
  return a1;
}

void ctu::Loggable<NetworkingModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F210CD78;
  MEMORY[0x1C87940C0](a1 + 1);

  operator delete(a1);
}

uint64_t ___ZN20NetworkPolicyManager10uuidBridgeEN3xpc5arrayE_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3 && MEMORY[0x1C8795EB0](a3) == MEMORY[0x1E4F14600])
  {
    if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = [MEMORY[0x1E4F1CA48] array];
    }
    size_t v5 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDBytes:xpc_uuid_get_bytes(a3)];
    [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:v5];
  }
  return 1;
}

void ctu::Loggable<NetworkingModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (size_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1C5B0B5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C5B0B5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<NetworkingModule>::shared_ptr[abi:ne180100]<NetworkingModule,std::shared_ptr<NetworkingModule> ctu::SharedSynchronizable<NetworkingModule>::make_shared_ptr<NetworkingModule>(NetworkingModule*)::{lambda(NetworkingModule*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  long long v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  uint64_t p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210CDB8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 120) = a2;
      *(void *)(a2 + 128) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 120) = a2;
  *(void *)(a2 + 128) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C5B0B6F4(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<NetworkingModule> ctu::SharedSynchronizable<NetworkingModule>::make_shared_ptr<NetworkingModule>(NetworkingModule*)::{lambda(NetworkingModule*)#1}::operator() const(NetworkingModule*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C5B0B71C(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<NetworkingModule *,std::shared_ptr<NetworkingModule> ctu::SharedSynchronizable<NetworkingModule>::make_shared_ptr<NetworkingModule>(NetworkingModule*)::{lambda(NetworkingModule *)#1},std::allocator<NetworkingModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<NetworkingModule *,std::shared_ptr<NetworkingModule> ctu::SharedSynchronizable<NetworkingModule>::make_shared_ptr<NetworkingModule>(NetworkingModule*)::{lambda(NetworkingModule *)#1},std::allocator<NetworkingModule>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<NetworkingModule *,std::shared_ptr<NetworkingModule> ctu::SharedSynchronizable<NetworkingModule>::make_shared_ptr<NetworkingModule>(NetworkingModule*)::{lambda(NetworkingModule *)#1},std::allocator<NetworkingModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI16NetworkingModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI16NetworkingModuleE15make_shared_ptrIS1_EENSt3__110shared_p"
                                "trIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI16NetworkingModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI16NetworkingModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<NetworkingModule> ctu::SharedSynchronizable<NetworkingModule>::make_shared_ptr<NetworkingModule>(NetworkingModule*)::{lambda(NetworkingModule*)#1}::operator() const(NetworkingModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *ctu::SharedLoggable<NetworkingModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F210CD78;
  MEMORY[0x1C87940C0](a1 + 1);
  size_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ctu::SharedLoggable<NetworkingModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F210CD78;
  MEMORY[0x1C87940C0](a1 + 1);
  size_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<NetworkingModule>::execute_wrapped<NetworkingModule::init(void)::$_0>(NetworkingModule::init(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<NetworkingModule::init(void)::$_0,dispatch_queue_s *::default_delete<NetworkingModule::init(void)::$_0>>)::{lambda(void *)#1}::__invoke(capabilities::abs *a1)
{
  size_t v2 = *(void **)a1;
  unint64_t v3 = **(void ***)a1;
  if (capabilities::abs::supportsNetworkPolicy(a1))
  {
    long long v4 = operator new(0x68uLL);
    v4[1] = 0;
    v4[2] = 0;
    void *v4 = &unk_1F210CE48;
    size_t v5 = v4 + 3;
    v4[3] = &unk_1F210CE98;
    GetABMLogServer(&v12);
    v4[3] = &unk_1F210CF08;
    char v15 = 10;
    strcpy((char *)__p, "net.policy");
    ctu::LoggerCommonBase::LoggerCommonBase();
    v4[4] = &unk_1F2102CB8;
    uint64_t v6 = v13;
    v4[10] = v12;
    v4[11] = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = v13;
    if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    *size_t v5 = &unk_1F210CE98;
    v4[12] = objc_alloc_init(MEMORY[0x1E4F38D40]);
    long long v8 = (std::__shared_weak_count *)v3[22];
    v3[21] = v5;
    v3[22] = v4;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      CFTypeRef v10 = (const void *)v3[23];
      v3[23] = Mutable;
      if (v10) {
        CFRelease(v10);
      }
    }
  }
  operator delete(v2);
  unint64_t v11 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }

  operator delete(a1);
}

void sub_1C5B0BB8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v22 = v20;
  MEMORY[0x1C87940C0](v21);
  std::__shared_weak_count::~__shared_weak_count(v19);
  operator delete(v24);
  operator delete(v18);
  CFTypeID v25 = (std::__shared_weak_count *)v17[2];
  if (v25)
  {
    if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<NetworkPolicyManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210CE48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NetworkPolicyManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210CE48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<NetworkPolicyManager>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void NetworkPolicyManager::~NetworkPolicyManager(NetworkPolicyManager *this)
{
  *(void *)this = &unk_1F210CE98;
  size_t v2 = (void *)*((void *)this + 9);
  if (v2)
  {

    *((void *)this + 9) = 0;
  }
  *(void *)this = &unk_1F210CF08;
  MEMORY[0x1C87940C0]((char *)this + 8);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F210CE98;
  size_t v2 = (void *)*((void *)this + 9);
  if (v2)
  {

    *((void *)this + 9) = 0;
  }
  *(void *)this = &unk_1F210CF08;
  MEMORY[0x1C87940C0]((char *)this + 8);

  operator delete(this);
}

uint64_t ctu::Loggable<NetworkPolicyManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

void ctu::Loggable<NetworkPolicyManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 10;
  strcpy(a1, "net.policy");
}

uint64_t ctu::Loggable<NetworkPolicyManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<NetworkPolicyManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F210CF08;
  MEMORY[0x1C87940C0](a1 + 1);
  return a1;
}

void ctu::Loggable<NetworkPolicyManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F210CF08;
  MEMORY[0x1C87940C0](a1 + 1);

  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<NetworkingModule>::execute_wrapped<NetworkingModule::shutdown(dispatch::group_session)::$_0>(NetworkingModule::shutdown(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<NetworkingModule::shutdown(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<NetworkingModule::shutdown(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(dispatch_group_t **__p)
{
  size_t v2 = *__p;
  if (*__p)
  {
    if (*v2)
    {
      dispatch_group_leave(*v2);
      if (*v2) {
        dispatch_release(*v2);
      }
    }
    operator delete(v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)__p[2];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    long long v4 = __p;
  }
  else
  {
    long long v4 = __p;
  }
  operator delete(v4);
}

void std::__shared_ptr_pointer<ABMNetworkPolicy *,std::shared_ptr<ABMNetworkPolicy>::__shared_ptr_default_delete<ABMNetworkPolicy,ABMNetworkPolicy>,std::allocator<ABMNetworkPolicy>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ABMNetworkPolicy *,std::shared_ptr<ABMNetworkPolicy>::__shared_ptr_default_delete<ABMNetworkPolicy,ABMNetworkPolicy>,std::allocator<ABMNetworkPolicy>>::__on_zero_shared(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    uint64_t v1 = (void *)MEMORY[0x1C8794300]();
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<ABMNetworkPolicy *,std::shared_ptr<ABMNetworkPolicy>::__shared_ptr_default_delete<ABMNetworkPolicy,ABMNetworkPolicy>,std::allocator<ABMNetworkPolicy>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C5BCAD11) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C5BCAD11 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C5BCAD11)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C5BCAD11 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void dispatch::async<void ctu::SharedSynchronizable<NetworkingModule>::execute_wrapped<NetworkingModule::initialize(dispatch::group_session)::$_0>(NetworkingModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<NetworkingModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<NetworkingModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  size_t v2 = *(uint64_t **)a1;
  uint64_t v3 = **(void **)a1;
  long long v4 = (const void *)*MEMORY[0x1E4F4C9C8];
  size_t v5 = strlen((const char *)*MEMORY[0x1E4F4C9C8]);
  if (v5 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    uint64_t v59 = v6;
    unint64_t v60 = v9 | 0x8000000000000000;
    long long __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v60) = v5;
  p_dst = (void **)&__dst;
  if (v5) {
LABEL_8:
  }
    memmove(p_dst, v4, v6);
  *((unsigned char *)p_dst + v6) = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke;
  aBlock[3] = &__block_descriptor_56_e8_40c41_ZTSNSt3__18weak_ptrI16NetworkingModuleEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  void aBlock[4] = v3;
  void aBlock[5] = v2[1];
  CFTypeRef v10 = (std::__shared_weak_count *)v2[2];
  uint64_t v67 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v11 = _Block_copy(aBlock);
  int v68 = v11;
  Service::registerCommandHandler(v3, (uint64_t)&__dst, &v68);
  if (v11) {
    _Block_release(v11);
  }
  if (SHIBYTE(v60) < 0) {
    operator delete(__dst);
  }
  uint64_t v12 = (const void *)*MEMORY[0x1E4F4CD18];
  size_t v13 = strlen((const char *)*MEMORY[0x1E4F4CD18]);
  if (v13 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v14 = v13;
  if (v13 >= 0x17)
  {
    uint64_t v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v16 = v13 | 7;
    }
    uint64_t v17 = v16 + 1;
    uint64_t p_p = operator new(v16 + 1);
    uint64_t v51 = v14;
    unint64_t v52 = v17 | 0x8000000000000000;
    std::string __p = p_p;
    goto LABEL_22;
  }
  HIBYTE(v52) = v13;
  uint64_t p_p = &__p;
  if (v13) {
LABEL_22:
  }
    memmove(p_p, v12, v14);
  *((unsigned char *)p_p + v14) = 0;
  long long __dst = (void **)MEMORY[0x1E4F143A8];
  uint64_t v59 = 3321888768;
  unint64_t v60 = (unint64_t)___ZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_51;
  unint64_t v61 = &__block_descriptor_56_e8_40c41_ZTSNSt3__18weak_ptrI16NetworkingModuleEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  uint64_t v62 = v3;
  uint64_t v63 = v2[1];
  int v18 = (std::__shared_weak_count *)v2[2];
  uint64_t v64 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  int v19 = _Block_copy(&__dst);
  uint64_t v65 = v19;
  Service::registerCommandHandler(v3, (uint64_t)&__p, &v65);
  if (v19) {
    _Block_release(v19);
  }
  if (SHIBYTE(v52) < 0) {
    operator delete(__p);
  }
  uint64_t v20 = (const void *)*MEMORY[0x1E4F4C9E0];
  size_t v21 = strlen((const char *)*MEMORY[0x1E4F4C9E0]);
  if (v21 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v22 = v21;
  if (v21 >= 0x17)
  {
    uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v24 = v21 | 7;
    }
    uint64_t v25 = v24 + 1;
    int v23 = operator new(v24 + 1);
    uint64_t v41 = v22;
    unint64_t v42 = v25 | 0x8000000000000000;
    int v40 = v23;
    goto LABEL_36;
  }
  HIBYTE(v42) = v21;
  int v23 = &v40;
  if (v21) {
LABEL_36:
  }
    memmove(v23, v20, v22);
  *((unsigned char *)v23 + v22) = 0;
  std::string __p = (void *)MEMORY[0x1E4F143A8];
  uint64_t v51 = 3321888768;
  unint64_t v52 = (unint64_t)___ZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2;
  std::string v53 = &__block_descriptor_56_e8_40c41_ZTSNSt3__18weak_ptrI16NetworkingModuleEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  uint64_t v54 = v3;
  uint64_t v55 = v2[1];
  CFTypeRef v26 = (std::__shared_weak_count *)v2[2];
  unint64_t v56 = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v27 = _Block_copy(&__p);
  long long v57 = v27;
  Service::registerCommandHandler(v3, (uint64_t)&v40, &v57);
  if (v27) {
    _Block_release(v27);
  }
  if (SHIBYTE(v42) < 0) {
    operator delete(v40);
  }
  uint64_t v28 = (const void *)*MEMORY[0x1E4F4CD20];
  size_t v29 = strlen((const char *)*MEMORY[0x1E4F4CD20]);
  if (v29 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  char v30 = (void *)v29;
  if (v29 >= 0x17)
  {
    uint64_t v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17) {
      uint64_t v32 = v29 | 7;
    }
    uint64_t v33 = v32 + 1;
    std::string v31 = operator new(v32 + 1);
    v48[1] = v30;
    unint64_t v49 = v33 | 0x8000000000000000;
    v48[0] = v31;
    goto LABEL_50;
  }
  HIBYTE(v49) = v29;
  std::string v31 = v48;
  if (v29) {
LABEL_50:
  }
    memmove(v31, v28, (size_t)v30);
  *((unsigned char *)v30 + (void)v31) = 0;
  int v40 = (void *)MEMORY[0x1E4F143A8];
  uint64_t v41 = 3321888768;
  unint64_t v42 = (unint64_t)___ZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_3;
  size_t v43 = &__block_descriptor_56_e8_40c41_ZTSNSt3__18weak_ptrI16NetworkingModuleEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  uint64_t v44 = v3;
  uint64_t v45 = v2[1];
  BOOL v34 = (std::__shared_weak_count *)v2[2];
  int v46 = v34;
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v35 = _Block_copy(&v40);
  __int16 v47 = v35;
  Service::registerCommandHandler(v3, (uint64_t)v48, &v47);
  if (v35) {
    _Block_release(v35);
  }
  if (SHIBYTE(v49) < 0) {
    operator delete(v48[0]);
  }
  if (v46) {
    std::__shared_weak_count::__release_weak(v46);
  }
  if (v56) {
    std::__shared_weak_count::__release_weak(v56);
  }
  if (v64) {
    std::__shared_weak_count::__release_weak(v64);
  }
  if (v67) {
    std::__shared_weak_count::__release_weak(v67);
  }
  std::string::size_type v36 = v2[3];
  if (v36)
  {
    dispatch_group_leave(v36);
    int v37 = v2[3];
    if (v37) {
      dispatch_release(v37);
    }
  }
  uint64_t v38 = (std::__shared_weak_count *)v2[2];
  if (v38) {
    std::__shared_weak_count::__release_weak(v38);
  }
  operator delete(v2);
  std::string::size_type v39 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  operator delete(a1);
}

void sub_1C5B0C5E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47)
{
  if (v49) {
    _Block_release(v49);
  }
  if (a19)
  {
    std::__shared_weak_count::__release_weak(a19);
    if ((a26 & 0x80000000) == 0)
    {
LABEL_5:
      unint64_t v52 = a36;
      if (!a36)
      {
LABEL_10:
        if (a47) {
          std::__shared_weak_count::__release_weak(a47);
        }
        std::string v53 = *(std::__shared_weak_count **)(v50 - 112);
        if (v53) {
          std::__shared_weak_count::__release_weak(v53);
        }
        uint64_t v54 = v48[3];
        if (v54)
        {
          dispatch_group_leave(v54);
          uint64_t v55 = v48[3];
          if (v55) {
            dispatch_release(v55);
          }
        }
        unint64_t v56 = (std::__shared_weak_count *)v48[2];
        if (v56) {
          std::__shared_weak_count::__release_weak(v56);
        }
        operator delete(v48);
        long long v57 = (std::__shared_weak_count *)v47[2];
        if (v57)
        {
          if (!atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        operator delete(v47);
        _Unwind_Resume(a1);
      }
LABEL_9:
      std::__shared_weak_count::__release_weak(v52);
      goto LABEL_10;
    }
  }
  else if ((a26 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  unint64_t v52 = a36;
  if (!a36) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke(void *a1, xpc_object_t *a2, const void **a3)
{
  long long v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  uint64_t v10 = a1[5];
  if (v10)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    xpc_object_t v11 = *a2;
    if (v11)
    {
      xpc_retain(v11);
      uint64_t v12 = *a3;
      if (*a3) {
        goto LABEL_6;
      }
    }
    else
    {
      xpc_object_t v11 = xpc_null_create();
      uint64_t v12 = *a3;
      if (*a3)
      {
LABEL_6:
        size_t v13 = _Block_copy(v12);
        size_t v14 = (std::__shared_weak_count *)v7[16];
        if (!v14) {
LABEL_19:
        }
          std::__throw_bad_weak_ptr[abi:ne180100]();
        goto LABEL_10;
      }
    }
    size_t v13 = 0;
    size_t v14 = (std::__shared_weak_count *)v7[16];
    if (!v14) {
      goto LABEL_19;
    }
LABEL_10:
    uint64_t v15 = v7[15];
    uint64_t v16 = std::__shared_weak_count::lock(v14);
    if (!v16) {
      goto LABEL_19;
    }
    uint64_t v17 = v16;
    int v18 = operator new(0x28uLL);
    void *v18 = v7;
    v18[1] = v10;
    v18[2] = v9;
    void v18[3] = v11;
    xpc_object_t v19 = xpc_null_create();
    uint8_t v18[4] = v13;
    uint64_t v20 = v7[17];
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    size_t v21 = operator new(0x18uLL);
    void *v21 = v18;
    v21[1] = v15;
    v21[2] = v17;
    dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI16NetworkingModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    xpc_release(v19);
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void ___ZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_51(void *a1, xpc_object_t *a2, const void **a3)
{
  long long v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  uint64_t v10 = a1[5];
  if (v10)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    xpc_object_t v11 = *a2;
    if (v11)
    {
      xpc_retain(v11);
      uint64_t v12 = *a3;
      if (*a3) {
        goto LABEL_6;
      }
    }
    else
    {
      xpc_object_t v11 = xpc_null_create();
      uint64_t v12 = *a3;
      if (*a3)
      {
LABEL_6:
        size_t v13 = _Block_copy(v12);
        size_t v14 = (std::__shared_weak_count *)v7[16];
        if (!v14) {
LABEL_19:
        }
          std::__throw_bad_weak_ptr[abi:ne180100]();
        goto LABEL_10;
      }
    }
    size_t v13 = 0;
    size_t v14 = (std::__shared_weak_count *)v7[16];
    if (!v14) {
      goto LABEL_19;
    }
LABEL_10:
    uint64_t v15 = v7[15];
    uint64_t v16 = std::__shared_weak_count::lock(v14);
    if (!v16) {
      goto LABEL_19;
    }
    uint64_t v17 = v16;
    int v18 = operator new(0x28uLL);
    void *v18 = v7;
    v18[1] = v10;
    v18[2] = v9;
    void v18[3] = v11;
    xpc_object_t v19 = xpc_null_create();
    uint8_t v18[4] = v13;
    uint64_t v20 = v7[17];
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    size_t v21 = operator new(0x18uLL);
    void *v21 = v18;
    v21[1] = v15;
    v21[2] = v17;
    dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI16NetworkingModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb0_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    xpc_release(v19);
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void ___ZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2(void *a1, xpc_object_t *a2, const void **a3)
{
  long long v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  uint64_t v10 = a1[5];
  if (v10)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    xpc_object_t v11 = *a2;
    if (v11)
    {
      xpc_retain(v11);
      uint64_t v12 = *a3;
      if (*a3) {
        goto LABEL_6;
      }
    }
    else
    {
      xpc_object_t v11 = xpc_null_create();
      uint64_t v12 = *a3;
      if (*a3)
      {
LABEL_6:
        size_t v13 = _Block_copy(v12);
        size_t v14 = (std::__shared_weak_count *)v7[16];
        if (!v14) {
LABEL_19:
        }
          std::__throw_bad_weak_ptr[abi:ne180100]();
        goto LABEL_10;
      }
    }
    size_t v13 = 0;
    size_t v14 = (std::__shared_weak_count *)v7[16];
    if (!v14) {
      goto LABEL_19;
    }
LABEL_10:
    uint64_t v15 = v7[15];
    uint64_t v16 = std::__shared_weak_count::lock(v14);
    if (!v16) {
      goto LABEL_19;
    }
    uint64_t v17 = v16;
    int v18 = operator new(0x28uLL);
    void *v18 = v7;
    v18[1] = v10;
    v18[2] = v9;
    void v18[3] = v11;
    xpc_object_t v19 = xpc_null_create();
    uint8_t v18[4] = v13;
    uint64_t v20 = v7[17];
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    size_t v21 = operator new(0x18uLL);
    void *v21 = v18;
    v21[1] = v15;
    v21[2] = v17;
    dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI16NetworkingModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb1_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    xpc_release(v19);
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void ___ZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_3(void *a1, xpc_object_t *a2, const void **a3)
{
  long long v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  uint64_t v10 = a1[5];
  if (v10)
  {
    xpc_object_t v11 = (std::__shared_weak_count *)a1[6];
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    xpc_object_t v12 = *a2;
    if (v12)
    {
      xpc_retain(v12);
      size_t v13 = *a3;
      if (*a3) {
        goto LABEL_8;
      }
    }
    else
    {
      xpc_object_t v12 = xpc_null_create();
      size_t v13 = *a3;
      if (*a3)
      {
LABEL_8:
        size_t v14 = _Block_copy(v13);
        uint64_t v15 = (std::__shared_weak_count *)v7[16];
        if (!v15) {
LABEL_24:
        }
          std::__throw_bad_weak_ptr[abi:ne180100]();
        goto LABEL_12;
      }
    }
    size_t v14 = 0;
    uint64_t v15 = (std::__shared_weak_count *)v7[16];
    if (!v15) {
      goto LABEL_24;
    }
LABEL_12:
    uint64_t v16 = v7[15];
    uint64_t v17 = std::__shared_weak_count::lock(v15);
    if (!v17) {
      goto LABEL_24;
    }
    int v18 = v17;
    xpc_object_t v19 = operator new(0x28uLL);
    uint64_t v20 = v19;
    *xpc_object_t v19 = v7;
    v19[1] = v10;
    v19[2] = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    void v19[3] = v12;
    xpc_object_t v21 = xpc_null_create();
    v20[4] = v14;
    size_t v22 = v7[17];
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    int v23 = operator new(0x18uLL);
    void *v23 = v20;
    v23[1] = v16;
    v23[2] = v18;
    dispatch_async_f(v22, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI16NetworkingModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb2_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    xpc_release(v21);
    if (v11) {
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI16NetworkingModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  size_t v2 = *a1;
  uint64_t v76 = v2;
  uint64_t v3 = *v2;
  long long v4 = *(NSObject **)(*v2 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    xpc::object::to_string((uint64_t *)&__p, (xpc::object *)(v2 + 3));
    size_t v5 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Add network policy: %s", buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if ((TelephonyUtilIsInternalBuild() & 1) == 0)
  {
    uint64_t v7 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_DEFAULT, "#I Modifying network policy not supported in this build variant", (uint8_t *)&__p, 2u);
    }
    xpc_object_t v8 = xpc_null_create();
    uint64_t v9 = v2[4];
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    xpc_object_t v10 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, std::string *))(v9 + 16))(v9, 3760250884, &__p);
    xpc_release(__p.__r_.__value_.__l.__data_);
    xpc_release(v10);
    goto LABEL_130;
  }
  memset(buf, 170, sizeof(buf));
  xpc_object_t v6 = xpc_dictionary_get_value((xpc_object_t)v2[3], (const char *)*MEMORY[0x1E4F4CD68]);
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  memset(&__p, 0, sizeof(__p));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  xpc_release(object.__r_.__value_.__l.__data_);
  if ((buf[23] & 0x80u) == 0) {
    xpc_object_t v11 = &buf[buf[23]];
  }
  else {
    xpc_object_t v11 = (uint8_t *)(*(void *)buf + *(void *)&buf[8]);
  }
  if ((buf[23] & 0x80u) == 0) {
    xpc_object_t v12 = buf;
  }
  else {
    xpc_object_t v12 = *(uint8_t **)buf;
  }
  for (; v12 != v11; ++v12)
    uint8_t *v12 = __toupper((char)*v12);
  size_t v13 = (const void *)*MEMORY[0x1E4F4D218];
  size_t v14 = strlen((const char *)*MEMORY[0x1E4F4D218]);
  if (v14 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v15 = v14;
  if (v14 >= 0x17)
  {
    uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v17 = v14 | 7;
    }
    uint64_t v18 = v17 + 1;
    uint64_t p_p = (std::string *)operator new(v17 + 1);
    __p.__r_.__value_.__l.__size_ = v15;
    __p.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    goto LABEL_31;
  }
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = v14;
  uint64_t p_p = &__p;
  if (v14) {
LABEL_31:
  }
    memmove(p_p, v13, v15);
  p_p->__r_.__value_.__s.__data_[v15] = 0;
  if ((buf[23] & 0x80u) == 0) {
    xpc_object_t v19 = buf;
  }
  else {
    xpc_object_t v19 = *(uint8_t **)buf;
  }
  int v20 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  xpc_object_t v21 = (void *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v22 = &__p;
  }
  else {
    size_t v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  int v23 = strcasecmp((const char *)v19, (const char *)v22);
  int v24 = v23;
  if (v20 < 0)
  {
    operator delete(v21);
    if (v24) {
      goto LABEL_40;
    }
LABEL_46:
    memset(&object, 170, sizeof(object));
    xpc_object_t v30 = xpc_dictionary_get_value((xpc_object_t)v2[3], (const char *)*MEMORY[0x1E4F4CB90]);
    xpc_object_t value = v30;
    if (v30) {
      xpc_retain(v30);
    }
    else {
      xpc_object_t value = xpc_null_create();
    }
    memset(&__p, 0, sizeof(__p));
    xpc::dyn_cast_or_default();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    xpc_release(value);
    std::string::size_type size = HIBYTE(object.__r_.__value_.__r.__words[2]);
    if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = object.__r_.__value_.__l.__size_;
    }
    if (!size)
    {
      uint64_t v35 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C59C6000, v35, OS_LOG_TYPE_DEFAULT, "#I Empty network policy bundle-id", (uint8_t *)&__p, 2u);
      }
      xpc_object_t v36 = xpc_null_create();
      uint64_t v37 = v2[4];
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
      xpc_object_t v38 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, std::string *))(v37 + 16))(v37, 3760250882, &__p);
      xpc_release(__p.__r_.__value_.__l.__data_);
      xpc_release(v38);
LABEL_127:
      if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(object.__r_.__value_.__l.__data_);
        if (((char)buf[23] & 0x80000000) == 0) {
          goto LABEL_130;
        }
        goto LABEL_129;
      }
      goto LABEL_128;
    }
    CFArrayRef theArray = (CFArrayRef)0xAAAAAAAAAAAAAAAALL;
    NetworkingModule::getBundleIDList_sync(v3, (uint64_t)buf, (CFTypeRef *)&theArray);
    if (theArray) {
      uint64_t v32 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    }
    else {
      uint64_t v32 = 0;
    }
    if (!v32)
    {
      std::string::size_type v39 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C59C6000, v39, OS_LOG_TYPE_DEFAULT, "#I BUG: We should never receive a null reference for bundle-id list", (uint8_t *)&__p, 2u);
      }
      xpc_object_t v40 = xpc_null_create();
      uint64_t v41 = v2[4];
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
      xpc_object_t v42 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, std::string *))(v41 + 16))(v41, 3760250880, &__p);
      xpc_release(__p.__r_.__value_.__l.__data_);
      xpc_release(v42);
      goto LABEL_125;
    }
    uint64_t Count = CFArrayGetCount(theArray);
    if (Count)
    {
      CFArrayRef v34 = theArray;
      if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v77, object.__r_.__value_.__l.__data_, object.__r_.__value_.__l.__size_);
      }
      else {
        std::string v77 = object;
      }
      unsigned int v44 = CFArrayGetCount(v34);
      CFAllocatorRef v43 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      __p.__r_.__value_.__r.__words[0] = 0;
      ctu::cf::convert_copy();
      uint64_t v45 = (const void *)__p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
        v85.length = v44;
        v85.location = 0;
        int v46 = CFArrayContainsValue(v34, v85, __p.__r_.__value_.__l.__data_);
        CFRelease(v45);
        if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v77.__r_.__value_.__l.__data_);
        }
        if (v46)
        {
          __int16 v47 = *(NSObject **)(v3 + 88);
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p.__r_.__value_.__l.__data_) = 0;
            _os_log_impl(&dword_1C59C6000, v47, OS_LOG_TYPE_DEFAULT, "#I Policy for bundle-id already exists", (uint8_t *)&__p, 2u);
          }
          xpc_object_t v48 = xpc_null_create();
          uint64_t v49 = v2[4];
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
          xpc_object_t v50 = xpc_null_create();
          (*(void (**)(uint64_t, void, std::string *))(v49 + 16))(v49, 0, &__p);
          xpc_release(__p.__r_.__value_.__l.__data_);
          xpc_release(v50);
LABEL_125:
          if (theArray) {
            CFRelease(theArray);
          }
          goto LABEL_127;
        }
      }
      else if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v77.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      CFAllocatorRef v43 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    }
    __p.__r_.__value_.__r.__words[0] = 0;
    if (ctu::cf::convert_copy()) {
      uint64_t v51 = (const void *)__p.__r_.__value_.__r.__words[0];
    }
    else {
      uint64_t v51 = 0;
    }
    CFMutableArrayRef Mutable = CFArrayCreateMutable(v43, 0, MEMORY[0x1E4F1D510]);
    if (Count)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
        uint64_t v55 = ValueAtIndex;
        if (ValueAtIndex)
        {
          CFRetain(ValueAtIndex);
          CFArrayAppendValue(Mutable, v55);
          CFRelease(v55);
        }
      }
    }
    if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, object.__r_.__value_.__l.__data_, object.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = object;
    }
    xpc_object_t value = 0;
    ctu::cf::convert_copy();
    xpc_object_t v56 = value;
    if (value)
    {
      CFArrayAppendValue(Mutable, value);
      CFRelease(v56);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    long long v57 = *(NSObject **)(v3 + 88);
    BOOL v58 = os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT);
    if (v56)
    {
      if (v58)
      {
        uint64_t v59 = buf;
        if ((buf[23] & 0x80u) != 0) {
          uint64_t v59 = *(uint8_t **)buf;
        }
        p_std::string object = &object;
        if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_std::string object = (std::string *)object.__r_.__value_.__r.__words[0];
        }
        LODWORD(__p.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v59;
        WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_object;
        HIWORD(__p.__r_.__value_.__r.__words[2]) = 2112;
        std::string v82 = Mutable;
        _os_log_impl(&dword_1C59C6000, v57, OS_LOG_TYPE_DEFAULT, "#I Add policy for action=%s bundleid=%s array=%@", (uint8_t *)&__p, 0x20u);
      }
      pthread_mutex_lock(&ctu::Singleton<ABMNetworkPolicy,ABMNetworkPolicy,ctu::PthreadMutexGuardPolicy<ABMNetworkPolicy>>::sInstance);
      uint64_t v61 = qword_1EA3D6990;
      if (!qword_1EA3D6990)
      {
        uint64_t v62 = operator new(0x18uLL);
        MEMORY[0x1C87942F0](v62, @"com.apple.AppleBasebandManager.NetworkPolicy", *MEMORY[0x1E4F1D3F0]);
        uint64_t v63 = operator new(0x20uLL);
        *uint64_t v63 = &unk_1F210CF48;
        v63[1] = 0;
        v63[2] = 0;
        v63[3] = v62;
        uint64_t v64 = (std::__shared_weak_count *)off_1EA3D6998;
        qword_1EA3D6990 = (uint64_t)v62;
        off_1EA3D6998 = v63;
        if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
        uint64_t v61 = qword_1EA3D6990;
      }
      uint64_t v65 = (std::__shared_weak_count *)off_1EA3D6998;
      if (off_1EA3D6998) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EA3D6998 + 1, 1uLL, memory_order_relaxed);
      }
      pthread_mutex_unlock(&ctu::Singleton<ABMNetworkPolicy,ABMNetworkPolicy,ctu::PthreadMutexGuardPolicy<ABMNetworkPolicy>>::sInstance);
      if ((buf[23] & 0x80u) == 0) {
        int v66 = buf;
      }
      else {
        int v66 = *(uint8_t **)buf;
      }
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, (const char *)v66);
      BOOL v67 = ctu::cf::plist_adapter::set<__CFArray *>(v61, Mutable, (const __CFString *)__p.__r_.__value_.__l.__data_, 1);
      MEMORY[0x1C8794290](&__p);
      if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
      if (v67)
      {
        xpc_object_t v68 = xpc_null_create();
        uint64_t v69 = v2[4];
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v68;
        xpc_object_t v70 = xpc_null_create();
        (*(void (**)(uint64_t, void, std::string *))(v69 + 16))(v69, 0, &__p);
        xpc_release(__p.__r_.__value_.__l.__data_);
        xpc_release(v70);
LABEL_121:
        if (Mutable) {
          CFRelease(Mutable);
        }
        if (v51) {
          CFRelease(v51);
        }
        goto LABEL_125;
      }
      long long v71 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C59C6000, v71, OS_LOG_TYPE_DEFAULT, "#I Policy addition failed with preferences update error", (uint8_t *)&__p, 2u);
      }
    }
    else if (v58)
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1C59C6000, v57, OS_LOG_TYPE_DEFAULT, "#I Policy addition failed with some error", (uint8_t *)&__p, 2u);
    }
    xpc_object_t v72 = xpc_null_create();
    uint64_t v73 = v2[4];
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
    xpc_object_t v74 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, std::string *))(v73 + 16))(v73, 3760250880, &__p);
    xpc_release(__p.__r_.__value_.__l.__data_);
    xpc_release(v74);
    goto LABEL_121;
  }
  if (!v23) {
    goto LABEL_46;
  }
LABEL_40:
  uint64_t v25 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    CFTypeRef v26 = buf;
    if ((buf[23] & 0x80u) != 0) {
      CFTypeRef v26 = *(uint8_t **)buf;
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v26;
    _os_log_impl(&dword_1C59C6000, v25, OS_LOG_TYPE_DEFAULT, "#I Invalid network policy action: %s", (uint8_t *)&__p, 0xCu);
  }
  xpc_object_t v27 = xpc_null_create();
  uint64_t v28 = v2[4];
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  xpc_object_t v29 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, std::string *))(v28 + 16))(v28, 3760250882, &__p);
  xpc_release(__p.__r_.__value_.__l.__data_);
  xpc_release(v29);
LABEL_128:
  if ((char)buf[23] < 0) {
LABEL_129:
  }
    operator delete(*(void **)buf);
LABEL_130:
  _ZNSt3__110unique_ptrIZZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEvEUb_EUlvE_NS_14default_deleteIS5_EEED1B8ne180100Ev((uint64_t *)&v76);
  unint64_t v75 = (std::__shared_weak_count *)a1[2];
  if (v75 && !atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
    std::__shared_weak_count::__release_weak(v75);
  }
  operator delete(a1);
}

uint64_t *_ZNSt3__110unique_ptrIZZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEvEUb_EUlvE_NS_14default_deleteIS5_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(const void **)(v2 + 32);
    if (v3) {
      _Block_release(v3);
    }
    xpc_release(*(xpc_object_t *)(v2 + 24));
    *(void *)(v2 + 24) = 0;
    long long v4 = *(std::__shared_weak_count **)(v2 + 16);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete((void *)v2);
  }
  return a1;
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI16NetworkingModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb0_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  size_t v93 = v2;
  uint64_t v3 = *v2;
  long long v4 = *(NSObject **)(*v2 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    xpc::object::to_string((uint64_t *)__p, (xpc::object *)(v2 + 3));
    size_t v5 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Remove network policy: %s", buf, 0xCu);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }
  if ((TelephonyUtilIsInternalBuild() & 1) == 0)
  {
    uint64_t v7 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_DEFAULT, "#I Modifying network policy not supported in this build variant", (uint8_t *)__p, 2u);
    }
    xpc_object_t v8 = xpc_null_create();
    uint64_t v9 = v2[4];
    __p[0] = v8;
    xpc_object_t v10 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, void **))(v9 + 16))(v9, 3760250884, __p);
    xpc_release(__p[0]);
    xpc_release(v10);
    goto LABEL_129;
  }
  memset(buf, 170, 24);
  xpc_object_t value = xpc_dictionary_get_value((xpc_object_t)v2[3], (const char *)*MEMORY[0x1E4F4CD68]);
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  memset(__p, 0, 24);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  xpc_release(object.__r_.__value_.__l.__data_);
  if ((buf[23] & 0x80u) == 0) {
    xpc_object_t v11 = &buf[buf[23]];
  }
  else {
    xpc_object_t v11 = (uint8_t *)(*(void *)buf + *(void *)&buf[8]);
  }
  if ((buf[23] & 0x80u) == 0) {
    xpc_object_t v12 = buf;
  }
  else {
    xpc_object_t v12 = *(uint8_t **)buf;
  }
  for (; v12 != v11; ++v12)
    uint8_t *v12 = __toupper((char)*v12);
  size_t v13 = (const void *)*MEMORY[0x1E4F4D218];
  size_t v14 = strlen((const char *)*MEMORY[0x1E4F4D218]);
  if (v14 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v15 = (void *)v14;
  if (v14 >= 0x17)
  {
    uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v17 = v14 | 7;
    }
    uint64_t v18 = v17 + 1;
    uint64_t v16 = operator new(v17 + 1);
    __p[1] = v15;
    __p[2] = (void *)(v18 | 0x8000000000000000);
    __p[0] = v16;
    goto LABEL_31;
  }
  HIBYTE(__p[2]) = v14;
  uint64_t v16 = __p;
  if (v14) {
LABEL_31:
  }
    memmove(v16, v13, (size_t)v15);
  *((unsigned char *)v15 + (void)v16) = 0;
  if ((buf[23] & 0x80u) == 0) {
    xpc_object_t v19 = buf;
  }
  else {
    xpc_object_t v19 = *(uint8_t **)buf;
  }
  int v20 = SHIBYTE(__p[2]);
  xpc_object_t v21 = __p[0];
  if (SHIBYTE(__p[2]) >= 0) {
    size_t v22 = __p;
  }
  else {
    size_t v22 = (void **)__p[0];
  }
  int v23 = strcasecmp((const char *)v19, (const char *)v22);
  int v24 = v23;
  if (v20 < 0)
  {
    operator delete(v21);
    if (v24) {
      goto LABEL_40;
    }
LABEL_46:
    memset(&object, 170, sizeof(object));
    xpc_object_t v30 = xpc_dictionary_get_value((xpc_object_t)v2[3], (const char *)*MEMORY[0x1E4F4CB90]);
    v94[0] = v30;
    if (v30) {
      xpc_retain(v30);
    }
    else {
      v94[0] = xpc_null_create();
    }
    memset(__p, 0, 24);
    xpc::dyn_cast_or_default();
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    xpc_release(v94[0]);
    std::string::size_type size = HIBYTE(object.__r_.__value_.__r.__words[2]);
    if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = object.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      CFArrayRef theArray = (CFArrayRef)0xAAAAAAAAAAAAAAAALL;
      NetworkingModule::getBundleIDList_sync(v3, (uint64_t)buf, (CFTypeRef *)&theArray);
      if (theArray) {
        uint64_t v32 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
      }
      else {
        uint64_t v32 = 0;
      }
      if (v32)
      {
        uint64_t Count = CFArrayGetCount(theArray);
        if (Count)
        {
          CFArrayRef v34 = theArray;
          if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v96, object.__r_.__value_.__l.__data_, object.__r_.__value_.__l.__size_);
          }
          else {
            std::string v96 = object;
          }
          unsigned int v43 = CFArrayGetCount(v34);
          CFAllocatorRef v44 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          __p[0] = 0;
          ctu::cf::convert_copy();
          uint64_t v45 = __p[0];
          if (__p[0])
          {
            v102.length = v43;
            v102.location = 0;
            int v46 = CFArrayContainsValue(v34, v102, __p[0]);
            CFRelease(v45);
            if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v96.__r_.__value_.__l.__data_);
            }
            if (v46)
            {
              __p[0] = 0;
              int v47 = ctu::cf::convert_copy();
              xpc_object_t v48 = __p[0];
              if (!v47) {
                xpc_object_t v48 = 0;
              }
              long long v92 = v48;
              CFMutableArrayRef Mutable = CFArrayCreateMutable(v44, 0, MEMORY[0x1E4F1D510]);
              CFIndex v50 = 0;
              while (1)
              {
                ValueAtIndex = CFArrayGetValueAtIndex(theArray, v50);
                unint64_t v52 = ValueAtIndex;
                if (ValueAtIndex)
                {
                  CFTypeID v53 = CFGetTypeID(ValueAtIndex);
                  if (v53 == CFStringGetTypeID()) {
                    CFRetain(v52);
                  }
                  else {
                    unint64_t v52 = 0;
                  }
                }
                memset(__p, 0, 24);
                ctu::cf::assign();
                int v95 = __p[2];
                *(_OWORD *)uint64_t v94 = *(_OWORD *)__p;
                if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v54 = HIBYTE(object.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v54 = object.__r_.__value_.__l.__size_;
                }
                xpc_object_t v55 = (xpc_object_t)HIBYTE(v95);
                int v56 = SHIBYTE(v95);
                if (SHIBYTE(v95) < 0) {
                  xpc_object_t v55 = v94[1];
                }
                if ((xpc_object_t)v54 != v55)
                {
                  BOOL v66 = 0;
                  if ((SHIBYTE(v95) & 0x80000000) == 0) {
                    goto LABEL_104;
                  }
                  goto LABEL_107;
                }
                long long v57 = SHIBYTE(v95) >= 0 ? v94 : (xpc_object_t *)v94[0];
                if ((*((unsigned char *)&object.__r_.__value_.__s + 23) & 0x80) != 0) {
                  break;
                }
                if (*((unsigned char *)&object.__r_.__value_.__s + 23))
                {
                  uint64_t v58 = HIBYTE(object.__r_.__value_.__r.__words[2]) - 1;
                  p_std::string object = &object;
                  do
                  {
                    int v61 = p_object->__r_.__value_.__s.__data_[0];
                    p_std::string object = (std::string *)((char *)p_object + 1);
                    int v60 = v61;
                    int v63 = *(unsigned __int8 *)v57;
                    long long v57 = (xpc_object_t *)((char *)v57 + 1);
                    int v62 = v63;
                    BOOL v65 = v58-- != 0;
                    BOOL v66 = v60 == v62;
                  }
                  while (v60 == v62 && v65);
LABEL_103:
                  if ((v56 & 0x80000000) == 0) {
                    goto LABEL_104;
                  }
                  goto LABEL_107;
                }
                BOOL v66 = 1;
                if ((SHIBYTE(v95) & 0x80000000) == 0)
                {
LABEL_104:
                  if (!v66) {
                    goto LABEL_108;
                  }
                  goto LABEL_75;
                }
LABEL_107:
                operator delete(v94[0]);
                if (!v66)
                {
LABEL_108:
                  if (!v52) {
                    goto LABEL_77;
                  }
                  CFRetain(v52);
                  CFArrayAppendValue(Mutable, v52);
                  CFRelease(v52);
LABEL_76:
                  CFRelease(v52);
                  goto LABEL_77;
                }
LABEL_75:
                if (v52) {
                  goto LABEL_76;
                }
LABEL_77:
                if (++v50 == Count)
                {
                  BOOL v67 = *(NSObject **)(v3 + 88);
                  if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
                  {
                    xpc_object_t v68 = buf;
                    if ((buf[23] & 0x80u) != 0) {
                      xpc_object_t v68 = *(uint8_t **)buf;
                    }
                    uint64_t v69 = &object;
                    if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                      uint64_t v69 = (std::string *)object.__r_.__value_.__r.__words[0];
                    }
                    LODWORD(__p[0]) = 136315650;
                    *(void **)((char *)__p + 4) = v68;
                    WORD2(__p[1]) = 2080;
                    *(void **)((char *)&__p[1] + 6) = v69;
                    HIWORD(__p[2]) = 2112;
                    __p[3] = Mutable;
                    _os_log_impl(&dword_1C59C6000, v67, OS_LOG_TYPE_DEFAULT, "#I Remove policy for action=%s bundleid=%s array=%@", (uint8_t *)__p, 0x20u);
                  }
                  pthread_mutex_lock(&ctu::Singleton<ABMNetworkPolicy,ABMNetworkPolicy,ctu::PthreadMutexGuardPolicy<ABMNetworkPolicy>>::sInstance);
                  if (qword_1EA3D6990)
                  {
LABEL_117:
                    long long v71 = (std::__shared_weak_count_vtbl *)qword_1EA3D6990;
                    xpc_object_t v70 = (std::__shared_weak_count *)off_1EA3D6998;
                    if (!off_1EA3D6998)
                    {
LABEL_139:
                      pthread_mutex_unlock(&ctu::Singleton<ABMNetworkPolicy,ABMNetworkPolicy,ctu::PthreadMutexGuardPolicy<ABMNetworkPolicy>>::sInstance);
                      if ((buf[23] & 0x80u) == 0) {
                        uint64_t v78 = buf;
                      }
                      else {
                        uint64_t v78 = *(uint8_t **)buf;
                      }
                      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)__p, (const char *)v78);
                      BOOL v79 = ctu::cf::plist_adapter::set<__CFArray *>((uint64_t)v71, Mutable, (const __CFString *)__p[0], 1);
                      MEMORY[0x1C8794290](__p);
                      if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                        std::__shared_weak_count::__release_weak(v70);
                      }
                      if (v79)
                      {
                        xpc_object_t v80 = xpc_null_create();
                        uint64_t v81 = v2[4];
                        __p[0] = v80;
                        xpc_object_t v82 = xpc_null_create();
                        long long v83 = *(void (**)(uint64_t, void, void **))(v81 + 16);
                        uint64_t v84 = v81;
                        CFRange v85 = v92;
                        v83(v84, 0, __p);
                        xpc_release(__p[0]);
                        xpc_release(v82);
                      }
                      else
                      {
                        uint64_t v86 = *(NSObject **)(v3 + 88);
                        if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
                        {
                          LOWORD(__p[0]) = 0;
                          _os_log_impl(&dword_1C59C6000, v86, OS_LOG_TYPE_DEFAULT, "#I Policy removal failed with preferences update error", (uint8_t *)__p, 2u);
                        }
                        xpc_object_t v87 = xpc_null_create();
                        uint64_t v88 = v2[4];
                        __p[0] = v87;
                        xpc_object_t v89 = xpc_null_create();
                        uint64_t v90 = *(void (**)(uint64_t, uint64_t, void **))(v88 + 16);
                        uint64_t v91 = v88;
                        CFRange v85 = v92;
                        v90(v91, 3760250880, __p);
                        xpc_release(__p[0]);
                        xpc_release(v89);
                      }
                      if (Mutable) {
                        CFRelease(Mutable);
                      }
                      if (v85) {
                        CFRelease(v85);
                      }
                      goto LABEL_124;
                    }
                  }
                  else
                  {
                    long long v71 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
                    MEMORY[0x1C87942F0](v71, @"com.apple.AppleBasebandManager.NetworkPolicy", *MEMORY[0x1E4F1D3F0]);
                    xpc_object_t v70 = (std::__shared_weak_count *)operator new(0x20uLL);
                    v70->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210CF48;
                    v70->__shared_owners_ = 0;
                    v70->__shared_weak_owners_ = 0;
                    v70[1].__vftable = v71;
                    std::string v77 = (std::__shared_weak_count *)off_1EA3D6998;
                    qword_1EA3D6990 = (uint64_t)v71;
                    off_1EA3D6998 = v70;
                    if (v77)
                    {
                      if (!atomic_fetch_add(&v77->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                        std::__shared_weak_count::__release_weak(v77);
                      }
                      goto LABEL_117;
                    }
                  }
                  atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
                  goto LABEL_139;
                }
              }
              BOOL v66 = memcmp(object.__r_.__value_.__l.__data_, v57, object.__r_.__value_.__l.__size_) == 0;
              goto LABEL_103;
            }
          }
          else if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v96.__r_.__value_.__l.__data_);
          }
        }
        xpc_object_t v72 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl(&dword_1C59C6000, v72, OS_LOG_TYPE_DEFAULT, "#I Policy for bundle-id doesn't exist", (uint8_t *)__p, 2u);
        }
        xpc_object_t v73 = xpc_null_create();
        uint64_t v74 = v2[4];
        __p[0] = v73;
        xpc_object_t v75 = xpc_null_create();
        (*(void (**)(uint64_t, void, void **))(v74 + 16))(v74, 0, __p);
        xpc_release(__p[0]);
        xpc_release(v75);
      }
      else
      {
        std::string::size_type v39 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl(&dword_1C59C6000, v39, OS_LOG_TYPE_DEFAULT, "#I BUG: We should never receive a null reference for bundle-id list", (uint8_t *)__p, 2u);
        }
        xpc_object_t v40 = xpc_null_create();
        uint64_t v41 = v2[4];
        __p[0] = v40;
        xpc_object_t v42 = xpc_null_create();
        (*(void (**)(uint64_t, uint64_t, void **))(v41 + 16))(v41, 3760250880, __p);
        xpc_release(__p[0]);
        xpc_release(v42);
      }
LABEL_124:
      if (theArray) {
        CFRelease(theArray);
      }
    }
    else
    {
      uint64_t v35 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl(&dword_1C59C6000, v35, OS_LOG_TYPE_DEFAULT, "#I Empty network policy bundle-id", (uint8_t *)__p, 2u);
      }
      xpc_object_t v36 = xpc_null_create();
      uint64_t v37 = v2[4];
      __p[0] = v36;
      xpc_object_t v38 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, void **))(v37 + 16))(v37, 3760250882, __p);
      xpc_release(__p[0]);
      xpc_release(v38);
    }
    if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(object.__r_.__value_.__l.__data_);
      if (((char)buf[23] & 0x80000000) == 0) {
        goto LABEL_129;
      }
      goto LABEL_128;
    }
    goto LABEL_127;
  }
  if (!v23) {
    goto LABEL_46;
  }
LABEL_40:
  uint64_t v25 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    CFTypeRef v26 = buf;
    if ((buf[23] & 0x80u) != 0) {
      CFTypeRef v26 = *(uint8_t **)buf;
    }
    LODWORD(__p[0]) = 136315138;
    *(void **)((char *)__p + 4) = v26;
    _os_log_impl(&dword_1C59C6000, v25, OS_LOG_TYPE_DEFAULT, "#I Invalid network policy action: %s", (uint8_t *)__p, 0xCu);
  }
  xpc_object_t v27 = xpc_null_create();
  uint64_t v28 = v2[4];
  __p[0] = v27;
  xpc_object_t v29 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, void **))(v28 + 16))(v28, 3760250882, __p);
  xpc_release(__p[0]);
  xpc_release(v29);
LABEL_127:
  if ((char)buf[23] < 0) {
LABEL_128:
  }
    operator delete(*(void **)buf);
LABEL_129:
  _ZNSt3__110unique_ptrIZZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEvEUb0_EUlvE_NS_14default_deleteIS5_EEED1B8ne180100Ev((uint64_t *)&v93);
  uint64_t v76 = (std::__shared_weak_count *)a1[2];
  if (v76 && !atomic_fetch_add(&v76->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
    std::__shared_weak_count::__release_weak(v76);
  }
  operator delete(a1);
}

uint64_t *_ZNSt3__110unique_ptrIZZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEvEUb0_EUlvE_NS_14default_deleteIS5_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(const void **)(v2 + 32);
    if (v3) {
      _Block_release(v3);
    }
    xpc_release(*(xpc_object_t *)(v2 + 24));
    *(void *)(v2 + 24) = 0;
    long long v4 = *(std::__shared_weak_count **)(v2 + 16);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete((void *)v2);
  }
  return a1;
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI16NetworkingModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb1_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  std::string::size_type v39 = v2;
  uint64_t v3 = *v2;
  long long v4 = *(NSObject **)(*v2 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    xpc::object::to_string((uint64_t *)&__p, (xpc::object *)(v2 + 3));
    size_t v5 = v45 >= 0 ? &__p : (long long *)__p;
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I Get network policy: %s", buf, 0xCu);
    if (SHIBYTE(v45) < 0) {
      operator delete((void *)__p);
    }
  }
  memset(buf, 170, 24);
  xpc_object_t v6 = xpc_dictionary_get_value((xpc_object_t)v2[3], (const char *)*MEMORY[0x1E4F4CD68]);
  xpc_object_t object = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  long long __p = 0uLL;
  int64_t v45 = 0;
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v45) < 0) {
    operator delete((void *)__p);
  }
  xpc_release(object);
  if ((buf[23] & 0x80u) == 0) {
    uint64_t v7 = &buf[buf[23]];
  }
  else {
    uint64_t v7 = (uint8_t *)(*(void *)buf + *(void *)&buf[8]);
  }
  if ((buf[23] & 0x80u) == 0) {
    xpc_object_t v8 = buf;
  }
  else {
    xpc_object_t v8 = *(uint8_t **)buf;
  }
  for (; v8 != v7; ++v8)
    *xpc_object_t v8 = __toupper((char)*v8);
  uint64_t v9 = (const void *)*MEMORY[0x1E4F4D218];
  size_t v10 = strlen((const char *)*MEMORY[0x1E4F4D218]);
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v11 = v10;
  if (v10 >= 0x17)
  {
    uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v13 = v10 | 7;
    }
    uint64_t v14 = v13 + 1;
    uint64_t p_p = (long long *)operator new(v13 + 1);
    *((void *)&__p + 1) = v11;
    int64_t v45 = v14 | 0x8000000000000000;
    *(void *)&long long __p = p_p;
    goto LABEL_27;
  }
  HIBYTE(v45) = v10;
  uint64_t p_p = &__p;
  if (v10) {
LABEL_27:
  }
    memmove(p_p, v9, v11);
  *((unsigned char *)p_p + v11) = 0;
  if ((buf[23] & 0x80u) == 0) {
    std::string::size_type v15 = buf;
  }
  else {
    std::string::size_type v15 = *(uint8_t **)buf;
  }
  int v16 = SHIBYTE(v45);
  uint64_t v17 = (void *)__p;
  if (v45 >= 0) {
    uint64_t v18 = (const char *)&__p;
  }
  else {
    uint64_t v18 = (const char *)__p;
  }
  int v19 = strcasecmp((const char *)v15, v18);
  int v20 = v19;
  if (v16 < 0)
  {
    operator delete(v17);
    if (v20) {
      goto LABEL_36;
    }
  }
  else if (v19)
  {
LABEL_36:
    xpc_object_t v21 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      size_t v22 = buf;
      if ((buf[23] & 0x80u) != 0) {
        size_t v22 = *(uint8_t **)buf;
      }
      LODWORD(__p) = 136315138;
      *(void *)((char *)&__p + 4) = v22;
      _os_log_impl(&dword_1C59C6000, v21, OS_LOG_TYPE_DEFAULT, "#I Invalid network policy action: %s", (uint8_t *)&__p, 0xCu);
    }
    xpc_object_t v23 = xpc_null_create();
    uint64_t v24 = v2[4];
    *(void *)&long long __p = v23;
    xpc_object_t v25 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, long long *))(v24 + 16))(v24, 3760250882, &__p);
    xpc_release((xpc_object_t)__p);
    xpc_release(v25);
    goto LABEL_66;
  }
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  NetworkingModule::getBundleIDList_sync(v3, (uint64_t)buf, (CFTypeRef *)&object);
  if (object) {
    CFTypeRef v26 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  }
  else {
    CFTypeRef v26 = 0;
  }
  if (!v26 || !CFArrayGetCount((CFArrayRef)object))
  {
    xpc_object_t v29 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      xpc_object_t v30 = buf;
      if ((buf[23] & 0x80u) != 0) {
        xpc_object_t v30 = *(uint8_t **)buf;
      }
      LODWORD(__p) = 136315138;
      *(void *)((char *)&__p + 4) = v30;
      _os_log_impl(&dword_1C59C6000, v29, OS_LOG_TYPE_DEFAULT, "#I No network policy available for action: %s", (uint8_t *)&__p, 0xCu);
    }
    xpc_object_t v31 = xpc_null_create();
    uint64_t v32 = v2[4];
    *(void *)&long long __p = v31;
    xpc_object_t v33 = xpc_null_create();
    (*(void (**)(uint64_t, void, long long *))(v32 + 16))(v32, 0, &__p);
    xpc_release((xpc_object_t)__p);
    xpc_release(v33);
    goto LABEL_64;
  }
  *(void *)&long long __p = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v27 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v28 = v27;
  if (v27)
  {
    *(void *)&long long __p = v27;
  }
  else
  {
    xpc_object_t v28 = xpc_null_create();
    *(void *)&long long __p = v28;
    if (!v28)
    {
      xpc_object_t v34 = xpc_null_create();
      xpc_object_t v28 = 0;
      goto LABEL_59;
    }
  }
  if (MEMORY[0x1C8795EB0](v28) != MEMORY[0x1E4F14590])
  {
    xpc_object_t v34 = xpc_null_create();
LABEL_59:
    *(void *)&long long __p = v34;
    goto LABEL_60;
  }
  xpc_retain(v28);
LABEL_60:
  xpc_release(v28);
  ctu::cf_to_xpc((uint64_t *)&value, (ctu *)object, v35);
  if ((buf[23] & 0x80u) == 0) {
    xpc_object_t v36 = buf;
  }
  else {
    xpc_object_t v36 = *(uint8_t **)buf;
  }
  xpc_dictionary_set_value((xpc_object_t)__p, (const char *)v36, value);
  xpc_object_t v37 = value;
  xpc_object_t value = xpc_null_create();
  xpc_release(v37);
  xpc_release(value);
  xpc_object_t value = 0;
  unsigned int v40 = 0;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v2 + 4, &v40, (void **)&__p);
  xpc_release((xpc_object_t)__p);
LABEL_64:
  if (object) {
    CFRelease(object);
  }
LABEL_66:
  if ((char)buf[23] < 0) {
    operator delete(*(void **)buf);
  }
  _ZNSt3__110unique_ptrIZZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEvEUb1_EUlvE_NS_14default_deleteIS5_EEED1B8ne180100Ev((uint64_t *)&v39);
  xpc_object_t v38 = (std::__shared_weak_count *)a1[2];
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  operator delete(a1);
}

void sub_1C5B0F46C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, xpc_object_t object,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *_ZNSt3__110unique_ptrIZZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEvEUb1_EUlvE_NS_14default_deleteIS5_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(const void **)(v2 + 32);
    if (v3) {
      _Block_release(v3);
    }
    xpc_release(*(xpc_object_t *)(v2 + 24));
    *(void *)(v2 + 24) = 0;
    long long v4 = *(std::__shared_weak_count **)(v2 + 16);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete((void *)v2);
  }
  return a1;
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI16NetworkingModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb2_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(config::hw *a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(uint64_t **)a1;
  uint64_t v3 = **(void **)a1;
  uint64_t v4 = 3760250880;
  if (config::hw::watch(a1))
  {
    size_t v5 = (const char *)*MEMORY[0x1E4F4C370];
    if (xpc_dictionary_get_value((xpc_object_t)v2[3], (const char *)*MEMORY[0x1E4F4C370]))
    {
      xpc_object_t value = xpc_dictionary_get_value((xpc_object_t)v2[3], v5);
      *(void *)xpc_object_t object = value;
      if (value) {
        xpc_retain(value);
      }
      else {
        *(void *)xpc_object_t object = xpc_null_create();
      }
      *(unsigned char *)(v3 + 192) = xpc::dyn_cast_or_default((xpc *)object, 0);
      xpc_release(*(xpc_object_t *)object);
      uint64_t v7 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        if (*(unsigned char *)(v3 + 192)) {
          xpc_object_t v8 = "";
        }
        else {
          xpc_object_t v8 = " not";
        }
        *(_DWORD *)xpc_object_t object = 136315138;
        *(void *)&xpc_object_t object[4] = v8;
        _os_log_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_DEFAULT, "#I Device is%s Bread paired", object, 0xCu);
      }
      if (*(unsigned char *)(v3 + 193)) {
        NetworkingModule::applyBreadMode_sync((NetworkingModule *)v3);
      }
      uint64_t v4 = 0;
    }
    if (*(unsigned char *)(v3 + 192))
    {
      if (*(unsigned char *)(v3 + 193))
      {
        uint64_t v9 = (const char *)*MEMORY[0x1E4F4C2E8];
        if (xpc_dictionary_get_value((xpc_object_t)v2[3], (const char *)*MEMORY[0x1E4F4C2E8]))
        {
          size_t v10 = (const char *)*MEMORY[0x1E4F4C430];
          if (xpc_dictionary_get_value((xpc_object_t)v2[3], (const char *)*MEMORY[0x1E4F4C430]))
          {
            xpc_object_t v11 = xpc_dictionary_get_value((xpc_object_t)v2[3], v9);
            *(void *)xpc_object_t object = v11;
            if (v11) {
              xpc_retain(v11);
            }
            else {
              *(void *)xpc_object_t object = xpc_null_create();
            }
            uint64_t v12 = xpc::dyn_cast_or_default((xpc *)object, 0);
            xpc_release(*(xpc_object_t *)object);
            xpc_object_t v13 = xpc_dictionary_get_value((xpc_object_t)v2[3], v10);
            *(void *)xpc_object_t object = v13;
            if (v13) {
              xpc_retain(v13);
            }
            else {
              *(void *)xpc_object_t object = xpc_null_create();
            }
            uint64_t v14 = xpc::dyn_cast_or_default((xpc *)object, 0);
            xpc_release(*(xpc_object_t *)object);
            NetworkingModule::sendVisitInfo_sync((NetworkingModule *)v3, v12, v14);
            uint64_t v4 = 0;
          }
        }
      }
    }
  }
  else
  {
    uint64_t v4 = 3760250884;
  }
  xpc_object_t v15 = xpc_null_create();
  uint64_t v16 = v2[4];
  *(void *)xpc_object_t object = v15;
  xpc_object_t v17 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, unsigned char *))(v16 + 16))(v16, v4, object);
  xpc_release(*(xpc_object_t *)object);
  xpc_release(v17);
  uint64_t v18 = (const void *)v2[4];
  if (v18) {
    _Block_release(v18);
  }
  xpc_release((xpc_object_t)v2[3]);
  v2[3] = 0;
  int v19 = (std::__shared_weak_count *)v2[2];
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  operator delete(v2);
  int v20 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  operator delete(a1);
}

void sub_1C5B0F968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void dispatch::async<void ctu::SharedSynchronizable<NetworkingModule>::execute_wrapped<NetworkingModule::initialize(dispatch::group_session)::$_1>(NetworkingModule::initialize(dispatch::group_session)::$_1 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<NetworkingModule::initialize(dispatch::group_session)::$_1,dispatch_queue_s *::default_delete<NetworkingModule::initialize(dispatch::group_session)::$_1>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(NetworkingModule ***)a1;
  NetworkingModule::finishInitialization_sync(**(NetworkingModule ***)a1);
  operator delete(v2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = (void *)a1;
  }
  else
  {
    uint64_t v4 = (void *)a1;
  }
  operator delete(v4);
}

void sub_1C5B0FB54(_Unwind_Exception *a1)
{
  operator delete(v2);
  uint64_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_7_0()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMNetworkPolicy>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMNetworkPolicy,ABMNetworkPolicy,ctu::PthreadMutexGuardPolicy<ABMNetworkPolicy>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

uint64_t __cxx_global_var_init_8_0()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1C59C6000);
  }
  return result;
}

uint64_t awd::metrics::protobuf_ShutdownFile_CCMetricsABM_2eproto(awd::metrics *this)
{
  if (awd::metrics::CommCenterBasebandBootTime::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)awd::metrics::CommCenterBasebandBootTime::default_instance_ + 8))(awd::metrics::CommCenterBasebandBootTime::default_instance_);
  }
  if (awd::metrics::CrashReasonType::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)awd::metrics::CrashReasonType::default_instance_ + 8))(awd::metrics::CrashReasonType::default_instance_);
  }
  if (awd::metrics::CommCenterBasebanCrash::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)awd::metrics::CommCenterBasebanCrash::default_instance_ + 8))(awd::metrics::CommCenterBasebanCrash::default_instance_);
  }
  if (awd::metrics::CommCenterBasebandTrace::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)awd::metrics::CommCenterBasebandTrace::default_instance_ + 8))(awd::metrics::CommCenterBasebandTrace::default_instance_);
  }
  if (awd::metrics::CommCenterNVMSync::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)awd::metrics::CommCenterNVMSync::default_instance_ + 8))(awd::metrics::CommCenterNVMSync::default_instance_);
  }
  if (awd::metrics::CommCenterAccessoryInformation::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)awd::metrics::CommCenterAccessoryInformation::default_instance_ + 8))(awd::metrics::CommCenterAccessoryInformation::default_instance_);
  }
  uint64_t result = awd::metrics::MetricsCCBasebandReset::default_instance_;
  if (awd::metrics::MetricsCCBasebandReset::default_instance_)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)awd::metrics::MetricsCCBasebandReset::default_instance_ + 8);
    return v2();
  }
  return result;
}

void awd::metrics::protobuf_AddDesc_CCMetricsABM_2eproto(awd::metrics *this, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((awd::metrics::protobuf_AddDesc_CCMetricsABM_2eproto(void)::already_here & 1) == 0)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABM_2eproto(void)::already_here = 1;
    wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Server/AWD/Generated/CCMetricsABM.pb.cc", a4);
    uint64_t v4 = operator new(0x30uLL);
    v4[4] = 0;
    *((_DWORD *)v4 + 10) = 0;
    v4[1] = 0;
    v4[2] = 0;
    void *v4 = &unk_1F210CFC8;
    *(void *)((char *)v4 + 21) = 0;
    awd::metrics::CommCenterBasebandBootTime::default_instance_ = (uint64_t)v4;
    size_t v5 = operator new(0x28uLL);
    uint64_t v6 = MEMORY[0x1E4FBA920];
    *size_t v5 = &unk_1F210D040;
    v5[1] = v6;
    v5[3] = 0;
    _DWORD v5[2] = v6;
    *((_DWORD *)v5 + 8) = 0;
    awd::metrics::CrashReasonType::default_instance_ = (uint64_t)v5;
    uint64_t v7 = operator new(0x30uLL);
    void v7[5] = 0;
    void *v7 = &unk_1F210D0B8;
    v7[1] = 0;
    v7[2] = 0;
    v7[3] = 0;
    *((_DWORD *)v7 + 8) = 0;
    awd::metrics::CommCenterBasebanCrash::default_instance_ = (uint64_t)v7;
    xpc_object_t v8 = operator new(0x28uLL);
    *xpc_object_t v8 = &unk_1F210D130;
    v8[1] = 0;
    _OWORD v8[2] = v6;
    void v8[3] = v6;
    v8[4] = 0;
    awd::metrics::CommCenterBasebandTrace::default_instance_ = (uint64_t)v8;
    uint64_t v9 = operator new(0x28uLL);
    v9[4] = 0;
    v9[1] = 0;
    uint64_t v9[2] = 0;
    *uint64_t v9 = &unk_1F210D1A8;
    *(void *)((char *)v9 + 22) = 0;
    awd::metrics::CommCenterNVMSync::default_instance_ = (uint64_t)v9;
    size_t v10 = operator new(0x20uLL);
    void *v10 = &unk_1F210D220;
    v10[1] = 0;
    v10[2] = 0;
    void v10[3] = 0;
    awd::metrics::CommCenterAccessoryInformation::default_instance_ = (uint64_t)v10;
    xpc_object_t v11 = operator new(0x48uLL);
    void *v11 = &unk_1F210D298;
    v11[1] = v6;
    *((_WORD *)v11 + 20) = 0;
    v11[2] = 0;
    v11[3] = v6;
    v11[4] = v6;
    *((_DWORD *)v11 + 11) = 0;
    void v11[6] = v6;
    v11[7] = 0;
    v11[8] = 0;
    awd::metrics::MetricsCCBasebandReset::default_instance_ = (uint64_t)v11;
    MEMORY[0x1F4181D28](awd::metrics::protobuf_ShutdownFile_CCMetricsABM_2eproto);
  }
}

uint64_t awd::metrics::CommCenterBasebandBootTime::CommCenterBasebandBootTime(uint64_t this)
{
  *(void *)(this + 32) = 0;
  *(_DWORD *)(this + 40) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = &unk_1F210CFC8;
  *(void *)(this + 21) = 0;
  return this;
}

{
  *(void *)(this + 32) = 0;
  *(_DWORD *)(this + 40) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = &unk_1F210CFC8;
  *(void *)(this + 21) = 0;
  return this;
}

uint64_t awd::metrics::CrashReasonType::CrashReasonType(uint64_t this)
{
  uint64_t v1 = MEMORY[0x1E4FBA920];
  *(void *)this = &unk_1F210D040;
  *(void *)(this + 8) = v1;
  *(void *)(this + 16) = v1;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  uint64_t v1;

  uint64_t v1 = MEMORY[0x1E4FBA920];
  *(void *)this = &unk_1F210D040;
  *(void *)(this + 8) = v1;
  *(void *)(this + 16) = v1;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterBasebanCrash::CommCenterBasebanCrash(uint64_t this)
{
  *(void *)(this + 40) = 0;
  *(void *)this = &unk_1F210D0B8;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)(this + 40) = 0;
  *(void *)this = &unk_1F210D0B8;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void *awd::metrics::CommCenterBasebandTrace::CommCenterBasebandTrace(void *this)
{
  uint64_t v1 = MEMORY[0x1E4FBA920];
  *this = &unk_1F210D130;
  this[1] = 0;
  this[2] = v1;
  this[3] = v1;
  this[4] = 0;
  return this;
}

{
  uint64_t v1;

  uint64_t v1 = MEMORY[0x1E4FBA920];
  *this = &unk_1F210D130;
  this[1] = 0;
  this[2] = v1;
  this[3] = v1;
  this[4] = 0;
  return this;
}

void *awd::metrics::CommCenterNVMSync::CommCenterNVMSync(void *this)
{
  this[4] = 0;
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F210D1A8;
  *(void *)((char *)this + 22) = 0;
  return this;
}

{
  this[4] = 0;
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F210D1A8;
  *(void *)((char *)this + 22) = 0;
  return this;
}

void *awd::metrics::CommCenterAccessoryInformation::CommCenterAccessoryInformation(void *this)
{
  *this = &unk_1F210D220;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &unk_1F210D220;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

double awd::metrics::MetricsCCBasebandReset::MetricsCCBasebandReset(awd::metrics::MetricsCCBasebandReset *this)
{
  uint64_t v1 = MEMORY[0x1E4FBA920];
  *(void *)this = &unk_1F210D298;
  *((void *)this + 1) = v1;
  *((_WORD *)this + 20) = 0;
  double result = 0.0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = v1;
  *((void *)this + 4) = v1;
  *((_DWORD *)this + 11) = 0;
  *((void *)this + 6) = v1;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  return result;
}

{
  uint64_t v1;
  double result;

  uint64_t v1 = MEMORY[0x1E4FBA920];
  *(void *)this = &unk_1F210D298;
  *((void *)this + 1) = v1;
  *((_WORD *)this + 20) = 0;
  double result = 0.0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = v1;
  *((void *)this + 4) = v1;
  *((_DWORD *)this + 11) = 0;
  *((void *)this + 6) = v1;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  return result;
}

BOOL awd::metrics::CommCenterNVMSyncReason_IsValid(awd::metrics *this)
{
  return this < 6;
}

uint64_t awd::metrics::CommCenterBasebandBootTime::SharedCtor(uint64_t this)
{
  *(void *)(this + 32) = 0;
  *(_DWORD *)(this + 40) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 21) = 0;
  return this;
}

awd::metrics::CommCenterBasebandBootTime *awd::metrics::CommCenterBasebandBootTime::CommCenterBasebandBootTime(awd::metrics::CommCenterBasebandBootTime *this, const awd::metrics::CommCenterBasebandBootTime *a2)
{
  *((void *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1F210CFC8;
  *(void *)((char *)this + 21) = 0;
  awd::metrics::CommCenterBasebandBootTime::MergeFrom(this, a2);
  return this;
}

{
  *((void *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1F210CFC8;
  *(void *)((char *)this + 21) = 0;
  awd::metrics::CommCenterBasebandBootTime::MergeFrom(this, a2);
  return this;
}

void sub_1C5B101E4(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterBasebandBootTime::MergeFrom(awd::metrics::CommCenterBasebandBootTime *this, const awd::metrics::CommCenterBasebandBootTime *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *((unsigned char *)a2 + 40);
  if ((_BYTE)v4)
  {
    if (*((unsigned char *)a2 + 40))
    {
      uint64_t v6 = *((void *)a2 + 1);
      *((_DWORD *)this + 10) |= 1u;
      *((void *)this + 1) = v6;
      int v4 = *((_DWORD *)a2 + 10);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_13;
      }
    }
    else if ((*((unsigned char *)a2 + 40) & 2) == 0)
    {
      goto LABEL_6;
    }
    uint64_t v7 = *((void *)a2 + 2);
    *((_DWORD *)this + 10) |= 2u;
    *((void *)this + 2) = v7;
    int v4 = *((_DWORD *)a2 + 10);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_14;
    }
LABEL_13:
    int v8 = *((_DWORD *)a2 + 6);
    *((_DWORD *)this + 10) |= 4u;
    *((_DWORD *)this + 6) = v8;
    int v4 = *((_DWORD *)a2 + 10);
    if ((v4 & 8) == 0)
    {
LABEL_8:
      if ((v4 & 0x10) == 0) {
        return;
      }
      goto LABEL_9;
    }
LABEL_14:
    char v9 = *((unsigned char *)a2 + 28);
    *((_DWORD *)this + 10) |= 8u;
    *((unsigned char *)this + 28) = v9;
    if ((*((_DWORD *)a2 + 10) & 0x10) == 0) {
      return;
    }
LABEL_9:
    int v5 = *((_DWORD *)a2 + 8);
    *((_DWORD *)this + 10) |= 0x10u;
    *((_DWORD *)this + 8) = v5;
  }
}

void sub_1C5B1030C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C5B10320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C5B10388(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterBasebandBootTime::~CommCenterBasebandBootTime(awd::metrics::CommCenterBasebandBootTime *this)
{
  *(void *)this = &unk_1F210CFC8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(void *)this = &unk_1F210CFC8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  void *v1;
  uint64_t vars8;

  *(void *)this = &unk_1F210CFC8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);

  operator delete(v1);
}

uint64_t awd::metrics::CommCenterBasebandBootTime::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 36) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterBasebandBootTime::default_instance(awd::metrics::CommCenterBasebandBootTime *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = awd::metrics::CommCenterBasebandBootTime::default_instance_;
  if (!awd::metrics::CommCenterBasebandBootTime::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABM_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterBasebandBootTime::default_instance_;
  }
  return result;
}

void *awd::metrics::CommCenterBasebandBootTime::New(awd::metrics::CommCenterBasebandBootTime *this)
{
  uint64_t result = operator new(0x30uLL);
  result[4] = 0;
  *((_DWORD *)result + 10) = 0;
  result[1] = 0;
  result[2] = 0;
  void *result = &unk_1F210CFC8;
  *(void *)((char *)result + 21) = 0;
  return result;
}

uint64_t awd::metrics::CommCenterBasebandBootTime::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 40))
  {
    *(_DWORD *)(this + 32) = 0;
    *(void *)(this + 8) = 0;
    *(void *)(this + 16) = 0;
    *(void *)(this + 21) = 0;
  }
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterBasebandBootTime::MergePartialFromCodedStream(awd::metrics::CommCenterBasebandBootTime *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  int v4 = (unint64_t *)((char *)this + 8);
  int v5 = (unint64_t *)((char *)this + 16);
  uint64_t v6 = (unsigned int *)((char *)this + 24);
  uint64_t v7 = (unsigned int *)((char *)this + 32);
  while (1)
  {
    int v8 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v8 < *((void *)a2 + 2) && (*v8 & 0x80000000) == 0)
    {
      TagFallbacunint64_t k = *v8;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v8 + 1;
      if (!TagFallback) {
        return 1;
      }
      goto LABEL_7;
    }
    TagFallbacunint64_t k = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
    *((_DWORD *)a2 + 8) = TagFallback;
    if (!TagFallback) {
      return 1;
    }
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_24;
        }
        uint64_t v12 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
          if (!result) {
            return result;
          }
          xpc_object_t v13 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v11 = *((void *)a2 + 2);
          *((_DWORD *)this + 10) |= 1u;
          if ((unint64_t)v13 >= v11) {
            continue;
          }
        }
        else
        {
          unint64_t *v4 = *v12;
          xpc_object_t v13 = v12 + 1;
          *((void *)a2 + 1) = v13;
          *((_DWORD *)this + 10) |= 1u;
          if ((unint64_t)v13 >= v11) {
            continue;
          }
        }
        if (*v13 != 16) {
          continue;
        }
        uint64_t v14 = v13 + 1;
        *((void *)a2 + 1) = v14;
        if ((unint64_t)v14 >= v11) {
          goto LABEL_36;
        }
        goto LABEL_33;
      case 2u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_24;
        }
        uint64_t v14 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v14 >= v11) {
          goto LABEL_36;
        }
LABEL_33:
        if (*v14 < 0)
        {
LABEL_36:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v5);
          if (!result) {
            return result;
          }
          uint64_t v18 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v11 = *((void *)a2 + 2);
          *((_DWORD *)this + 10) |= 2u;
          if ((unint64_t)v18 >= v11) {
            continue;
          }
        }
        else
        {
          *int v5 = *v14;
          uint64_t v18 = v14 + 1;
          *((void *)a2 + 1) = v18;
          *((_DWORD *)this + 10) |= 2u;
          if ((unint64_t)v18 >= v11) {
            continue;
          }
        }
        if (*v18 != 24) {
          continue;
        }
        xpc_object_t v15 = v18 + 1;
        *((void *)a2 + 1) = v15;
        if ((unint64_t)v15 >= v11) {
          goto LABEL_43;
        }
LABEL_40:
        if (*v15 < 0)
        {
LABEL_43:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!result) {
            return result;
          }
          int v19 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v11 = *((void *)a2 + 2);
          *((_DWORD *)this + 10) |= 4u;
          if ((unint64_t)v19 >= v11) {
            continue;
          }
        }
        else
        {
          unsigned int *v6 = *v15;
          int v19 = v15 + 1;
          *((void *)a2 + 1) = v19;
          *((_DWORD *)this + 10) |= 4u;
          if ((unint64_t)v19 >= v11) {
            continue;
          }
        }
        if (*v19 != 32) {
          continue;
        }
        uint64_t v16 = v19 + 1;
        *((void *)a2 + 1) = v16;
        unsigned int v26 = -1431655766;
        if ((unint64_t)v16 >= v11) {
          goto LABEL_49;
        }
LABEL_47:
        if (*v16 < 0)
        {
LABEL_49:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v26);
          if (!result) {
            return result;
          }
          unsigned int v20 = v26;
          xpc_object_t v21 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v11 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v20 = *v16;
          xpc_object_t v21 = v16 + 1;
          *((void *)a2 + 1) = v21;
        }
        *((unsigned char *)this + 28) = v20 != 0;
        *((_DWORD *)this + 10) |= 8u;
        if ((unint64_t)v21 >= v11 || *v21 != 40) {
          continue;
        }
        xpc_object_t v17 = v21 + 1;
        *((void *)a2 + 1) = v17;
        if ((unint64_t)v17 >= v11) {
          goto LABEL_57;
        }
LABEL_54:
        if (*v17 < 0)
        {
LABEL_57:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!result) {
            return result;
          }
          uint64_t v24 = *((void *)a2 + 1);
          uint64_t v23 = *((void *)a2 + 2);
          *((_DWORD *)this + 10) |= 0x10u;
          if (v24 != v23) {
            continue;
          }
        }
        else
        {
          unsigned int *v7 = *v17;
          uint64_t v22 = (unsigned __int8 *)(v17 + 1);
          *((void *)a2 + 1) = v22;
          *((_DWORD *)this + 10) |= 0x10u;
          if (v22 != (unsigned __int8 *)v11) {
            continue;
          }
        }
        if (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10))
        {
          *((_DWORD *)a2 + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)a2 + 36) = 1;
          return result;
        }
        break;
      case 3u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_24;
        }
        xpc_object_t v15 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v15 >= v11) {
          goto LABEL_43;
        }
        goto LABEL_40;
      case 4u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_24;
        }
        uint64_t v16 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        unsigned int v26 = -1431655766;
        if ((unint64_t)v16 >= v11) {
          goto LABEL_49;
        }
        goto LABEL_47;
      case 5u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_24;
        }
        xpc_object_t v17 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v17 >= v11) {
          goto LABEL_57;
        }
        goto LABEL_54;
      default:
        int v10 = TagFallback & 7;
LABEL_24:
        if (v10 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback))continue; {
        return 0;
        }
    }
  }
}

uint64_t awd::metrics::CommCenterBasebandBootTime::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 40);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 40);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(void *)(v5 + 16), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 28), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 40) & 0x10) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned int *)(v5 + 24), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 8) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v6 & 0x10) == 0) {
    return this;
  }
LABEL_11:
  uint64_t v7 = *(unsigned int *)(v5 + 32);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v7, (uint64_t)a2, a4);
}

uint64_t awd::metrics::CommCenterBasebandBootTime::ByteSize(awd::metrics::CommCenterBasebandBootTime *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 40);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
    goto LABEL_6;
  }
  if (*((unsigned char *)this + 40))
  {
    LODWORD(v3) = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                              + 1))
                + 1;
    int v2 = *((_DWORD *)this + 10);
    if ((v2 & 2) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  LODWORD(v3) = 0;
  if ((*((unsigned char *)this + 40) & 2) != 0)
  {
LABEL_8:
    LODWORD(v3) = v3
                + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                              + 2))
                + 1;
    int v2 = *((_DWORD *)this + 10);
  }
LABEL_9:
  if ((v2 & 4) != 0)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
    if (v5 >= 0x80)
    {
      int v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5);
      int v7 = *((_DWORD *)this + 10);
      LODWORD(v3) = v6 + 1 + v3;
      if ((v7 & 8) != 0) {
        uint64_t v3 = (v3 + 2);
      }
      else {
        uint64_t v3 = v3;
      }
      if ((v7 & 0x10) != 0) {
        goto LABEL_25;
      }
    }
    else
    {
      LODWORD(v3) = v3 + 2;
      if ((v2 & 8) != 0) {
        uint64_t v3 = (v3 + 2);
      }
      else {
        uint64_t v3 = v3;
      }
      if ((v2 & 0x10) != 0) {
        goto LABEL_25;
      }
    }
LABEL_6:
    *((_DWORD *)this + 9) = v3;
    return v3;
  }
  if ((v2 & 8) != 0) {
    uint64_t v3 = (v3 + 2);
  }
  else {
    uint64_t v3 = v3;
  }
  if ((v2 & 0x10) == 0) {
    goto LABEL_6;
  }
LABEL_25:
  int v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
  if (v8 >= 0x80) {
    uint64_t v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8)
  }
       + 1
       + v3;
  else {
    uint64_t v9 = (v3 + 2);
  }
  *((_DWORD *)this + 9) = v9;
  return v9;
}

void awd::metrics::CommCenterBasebandBootTime::CopyFrom(awd::metrics::CommCenterBasebandBootTime *this, const awd::metrics::CommCenterBasebandBootTime *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterBasebandBootTime *))(*(void *)this + 32))(this);
    awd::metrics::CommCenterBasebandBootTime::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterBasebandBootTime::IsInitialized(awd::metrics::CommCenterBasebandBootTime *this)
{
  return 1;
}

uint64_t awd::metrics::CommCenterBasebandBootTime::Swap(uint64_t this, awd::metrics::CommCenterBasebandBootTime *a2)
{
  if (a2 != (awd::metrics::CommCenterBasebandBootTime *)this)
  {
    uint64_t v2 = *(void *)(this + 8);
    *(void *)(this + 8) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v2;
    uint64_t v3 = *(void *)(this + 16);
    *(void *)(this + 16) = *((void *)a2 + 2);
    *((void *)a2 + 2) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v3;
    LOBYTE(v3) = *(unsigned char *)(this + 28);
    *(unsigned char *)(this + 28) = *((unsigned char *)a2 + 28);
    *((unsigned char *)a2 + 28) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 32);
    *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 40);
    *(_DWORD *)(this + 40) = *((_DWORD *)a2 + 10);
    *((_DWORD *)a2 + 10) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 36);
    *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v3;
  }
  return this;
}

char *awd::metrics::CommCenterBasebandBootTime::GetTypeName@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1C5BCAD60;
  strcpy(result, "awd.metrics.CommCenterBasebandBootTime");
  return result;
}

uint64_t awd::metrics::CrashReasonType::SharedCtor(uint64_t this)
{
  uint64_t v1 = MEMORY[0x1E4FBA920];
  *(void *)(this + 16) = MEMORY[0x1E4FBA920];
  *(void *)(this + 24) = 0;
  *(void *)(this + 8) = v1;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

awd::metrics::CrashReasonType *awd::metrics::CrashReasonType::CrashReasonType(awd::metrics::CrashReasonType *this, const awd::metrics::CrashReasonType *a2)
{
  uint64_t v3 = MEMORY[0x1E4FBA920];
  *(void *)this = &unk_1F210D040;
  *((void *)this + 1) = v3;
  *((void *)this + 2) = v3;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  awd::metrics::CrashReasonType::MergeFrom(this, a2);
  return this;
}

{
  uint64_t v3;

  uint64_t v3 = MEMORY[0x1E4FBA920];
  *(void *)this = &unk_1F210D040;
  *((void *)this + 1) = v3;
  *((void *)this + 2) = v3;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  awd::metrics::CrashReasonType::MergeFrom(this, a2);
  return this;
}

void sub_1C5B10C54(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CrashReasonType::MergeFrom(awd::metrics::CrashReasonType *this, const awd::metrics::CrashReasonType *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v19);
  }
  if (*((unsigned char *)a2 + 32))
  {
    int v4 = (void **)MEMORY[0x1E4FBA920];
    if (*((unsigned char *)a2 + 32))
    {
      uint64_t v5 = (void **)*((void *)a2 + 1);
      *((_DWORD *)this + 8) |= 1u;
      int v6 = (void **)*((void *)this + 1);
      if (v6 == v4)
      {
        int v6 = (void **)operator new(0x18uLL);
        v6[1] = 0;
        void v6[2] = 0;
        unsigned int *v6 = 0;
        *((void *)this + 1) = v6;
      }
      if (v6 != v5)
      {
        char v7 = *((unsigned char *)v5 + 23);
        if ((*((char *)v6 + 23) & 0x80000000) == 0)
        {
          if ((*((unsigned char *)v5 + 23) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>(v6, *v5, (size_t)v5[1]);
            int v9 = *((_DWORD *)a2 + 8);
            if ((v9 & 2) == 0)
            {
LABEL_21:
              if ((v9 & 4) != 0)
              {
                xpc_object_t v13 = (void **)*((void *)a2 + 2);
                *((_DWORD *)this + 8) |= 4u;
                uint64_t v14 = (void **)*((void *)this + 2);
                if (v14 == v4)
                {
                  uint64_t v14 = (void **)operator new(0x18uLL);
                  v14[1] = 0;
                  v14[2] = 0;
                  *uint64_t v14 = 0;
                  *((void *)this + 2) = v14;
                }
                if (v14 != v13)
                {
                  char v15 = *((unsigned char *)v13 + 23);
                  if (*((char *)v14 + 23) < 0)
                  {
                    if (v15 >= 0) {
                      xpc_object_t v17 = v13;
                    }
                    else {
                      xpc_object_t v17 = *v13;
                    }
                    if (v15 >= 0) {
                      size_t v18 = *((unsigned __int8 *)v13 + 23);
                    }
                    else {
                      size_t v18 = (size_t)v13[1];
                    }
                    std::string::__assign_no_alias<false>(v14, v17, v18);
                  }
                  else if ((*((unsigned char *)v13 + 23) & 0x80) != 0)
                  {
                    std::string::__assign_no_alias<true>(v14, *v13, (size_t)v13[1]);
                  }
                  else
                  {
                    long long v16 = *(_OWORD *)v13;
                    v14[2] = v13[2];
                    *(_OWORD *)uint64_t v14 = v16;
                  }
                }
              }
              return;
            }
          }
          else
          {
            long long v8 = *(_OWORD *)v5;
            void v6[2] = v5[2];
            *(_OWORD *)int v6 = v8;
            int v9 = *((_DWORD *)a2 + 8);
            if ((v9 & 2) == 0) {
              goto LABEL_21;
            }
          }
LABEL_20:
          int v12 = *((_DWORD *)a2 + 6);
          *((_DWORD *)this + 8) |= 2u;
          *((_DWORD *)this + 6) = v12;
          int v9 = *((_DWORD *)a2 + 8);
          goto LABEL_21;
        }
        if (v7 >= 0) {
          int v10 = v5;
        }
        else {
          int v10 = *v5;
        }
        if (v7 >= 0) {
          size_t v11 = *((unsigned __int8 *)v5 + 23);
        }
        else {
          size_t v11 = (size_t)v5[1];
        }
        std::string::__assign_no_alias<false>(v6, v10, v11);
      }
    }
    int v9 = *((_DWORD *)a2 + 8);
    if ((v9 & 2) == 0) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
}

void sub_1C5B10E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C5B10E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C5B10EC4(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CrashReasonType::~CrashReasonType(awd::metrics::CrashReasonType *this)
{
  *(void *)this = &unk_1F210D040;
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = MEMORY[0x1E4FBA920];
  if (v2 == MEMORY[0x1E4FBA920] || v2 == 0)
  {
    uint64_t v5 = *((void *)this + 2);
    if (v5 != MEMORY[0x1E4FBA920] && v5 != 0)
    {
LABEL_20:
      if (*(char *)(v5 + 23) < 0) {
        operator delete(*(void **)v5);
      }
      operator delete((void *)v5);
      char v7 = this;
      goto LABEL_13;
    }
  }
  else
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    operator delete((void *)v2);
    uint64_t v5 = *((void *)this + 2);
    if (v5 != v3 && v5 != 0) {
      goto LABEL_20;
    }
  }
  char v7 = this;

LABEL_13:
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v7);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::MessageLite *v7;
  uint64_t vars8;

  *(void *)this = &unk_1F210D040;
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = MEMORY[0x1E4FBA920];
  if (v2 == MEMORY[0x1E4FBA920] || v2 == 0)
  {
    uint64_t v5 = *((void *)this + 2);
    if (v5 != MEMORY[0x1E4FBA920] && v5 != 0)
    {
LABEL_20:
      if (*(char *)(v5 + 23) < 0) {
        operator delete(*(void **)v5);
      }
      operator delete((void *)v5);
      char v7 = this;
      goto LABEL_13;
    }
  }
  else
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    operator delete((void *)v2);
    uint64_t v5 = *((void *)this + 2);
    if (v5 != v3 && v5 != 0) {
      goto LABEL_20;
    }
  }
  char v7 = this;

LABEL_13:
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v7);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  void *v7;
  uint64_t vars8;

  *(void *)this = &unk_1F210D040;
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = MEMORY[0x1E4FBA920];
  if (v2 != MEMORY[0x1E4FBA920] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    operator delete((void *)v2);
  }
  uint64_t v5 = *((void *)this + 2);
  if (v5 != v3 && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0) {
      operator delete(*(void **)v5);
    }
    operator delete((void *)v5);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);

  operator delete(v7);
}

void awd::metrics::CrashReasonType::SharedDtor(awd::metrics::CrashReasonType *this)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = MEMORY[0x1E4FBA920];
  if (v2 == MEMORY[0x1E4FBA920] || v2 == 0)
  {
    uint64_t v5 = *((void *)this + 2);
    if (v5 == MEMORY[0x1E4FBA920] || v5 == 0) {
      return;
    }
    goto LABEL_18;
  }
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  operator delete((void *)v2);
  uint64_t v5 = *((void *)this + 2);
  if (v5 != v3 && v5 != 0)
  {
LABEL_18:
    if (*(char *)(v5 + 23) < 0)
    {
      operator delete(*(void **)v5);
      long long v8 = (void *)v5;
    }
    else
    {
      long long v8 = (void *)v5;
    }
    operator delete(v8);
  }
}

uint64_t awd::metrics::CrashReasonType::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 28) = a2;
  return this;
}

uint64_t awd::metrics::CrashReasonType::default_instance(awd::metrics::CrashReasonType *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = awd::metrics::CrashReasonType::default_instance_;
  if (!awd::metrics::CrashReasonType::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABM_2eproto(0, a2, a3, a4);
    return awd::metrics::CrashReasonType::default_instance_;
  }
  return result;
}

void *awd::metrics::CrashReasonType::New(awd::metrics::CrashReasonType *this)
{
  uint64_t result = operator new(0x28uLL);
  uint64_t v2 = MEMORY[0x1E4FBA920];
  void *result = &unk_1F210D040;
  result[1] = v2;
  result[2] = v2;
  result[3] = 0;
  *((_DWORD *)result + 8) = 0;
  return result;
}

uint64_t awd::metrics::CrashReasonType::Clear(uint64_t this)
{
  if (!*(unsigned char *)(this + 32)) {
    goto LABEL_12;
  }
  uint64_t v1 = MEMORY[0x1E4FBA920];
  if (*(unsigned char *)(this + 32))
  {
    uint64_t v2 = *(void *)(this + 8);
    if (v2 != MEMORY[0x1E4FBA920])
    {
      if (*(char *)(v2 + 23) < 0)
      {
        **(unsigned char **)uint64_t v2 = 0;
        *(void *)(v2 + 8) = 0;
        *(_DWORD *)(this + 24) = 0;
        if ((*(unsigned char *)(this + 32) & 4) == 0) {
          goto LABEL_12;
        }
        goto LABEL_7;
      }
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  *(_DWORD *)(this + 24) = 0;
  if ((*(unsigned char *)(this + 32) & 4) == 0)
  {
LABEL_12:
    *(_DWORD *)(this + 32) = 0;
    return this;
  }
LABEL_7:
  uint64_t v3 = *(void *)(this + 16);
  if (v3 == v1) {
    goto LABEL_12;
  }
  if (*(char *)(v3 + 23) < 0)
  {
    **(unsigned char **)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
  }
  else
  {
    *(unsigned char *)uint64_t v3 = 0;
    *(unsigned char *)(v3 + 23) = 0;
  }
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t awd::metrics::CrashReasonType::MergePartialFromCodedStream(awd::metrics::CrashReasonType *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  int v4 = (unsigned int *)((char *)this + 24);
  uint64_t v5 = MEMORY[0x1E4FBA920];
  while (1)
  {
    do
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            int v6 = (char *)*((void *)a2 + 1);
            if ((unint64_t)v6 >= *((void *)a2 + 2) || *v6 < 0)
            {
              TagFallbacunint64_t k = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
              *((_DWORD *)a2 + 8) = TagFallback;
              if (!TagFallback) {
                return 1;
              }
            }
            else
            {
              TagFallbacunint64_t k = *v6;
              *((_DWORD *)a2 + 8) = TagFallback;
              *((void *)a2 + 1) = v6 + 1;
              if (!TagFallback) {
                return 1;
              }
            }
            unsigned int v8 = TagFallback >> 3;
            if (TagFallback >> 3 != 1) {
              break;
            }
            int v9 = TagFallback & 7;
            if (v9 != 2) {
              goto LABEL_32;
            }
            *((_DWORD *)this + 8) |= 1u;
            if (*((void *)this + 1) == v5)
            {
              int v12 = operator new(0x18uLL);
              v12[1] = 0;
              v12[2] = 0;
              void *v12 = 0;
              *((void *)this + 1) = v12;
            }
            uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
            if (!result) {
              return result;
            }
            uint64_t v14 = (unsigned char *)*((void *)a2 + 1);
            unint64_t v13 = *((void *)a2 + 2);
            if ((unint64_t)v14 < v13 && *v14 == 16)
            {
              char v15 = v14 + 1;
              *((void *)a2 + 1) = v15;
              goto LABEL_27;
            }
          }
          if (v8 == 2) {
            break;
          }
          if (v8 == 3)
          {
            int v9 = TagFallback & 7;
            if (v9 == 2)
            {
              *((_DWORD *)this + 8) |= 4u;
              if (*((void *)this + 2) != v5) {
                goto LABEL_13;
              }
LABEL_12:
              int v10 = operator new(0x18uLL);
              v10[1] = 0;
              v10[2] = 0;
              void *v10 = 0;
              *((void *)this + 2) = v10;
              goto LABEL_13;
            }
          }
          else
          {
            int v9 = TagFallback & 7;
          }
LABEL_32:
          if (v9 == 4) {
            return 1;
          }
          if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
        }
          }
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_32;
        }
        char v15 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v13 = *((void *)a2 + 2);
LABEL_27:
        if ((unint64_t)v15 < v13 && ((char)*v15 & 0x80000000) == 0) {
          break;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
        if (!result) {
          return result;
        }
        long long v16 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v18 = *((void *)a2 + 2);
        int v17 = *((_DWORD *)this + 8) | 2;
        *((_DWORD *)this + 8) = v17;
        if ((unint64_t)v16 < v18) {
          goto LABEL_37;
        }
      }
      unsigned int *v4 = *v15;
      long long v16 = v15 + 1;
      *((void *)a2 + 1) = v16;
      int v17 = *((_DWORD *)this + 8) | 2;
      *((_DWORD *)this + 8) = v17;
    }
    while ((unint64_t)v16 >= v13);
LABEL_37:
    if (*v16 == 26)
    {
      *((void *)a2 + 1) = v16 + 1;
      *((_DWORD *)this + 8) = v17 | 4;
      if (*((void *)this + 2) == v5) {
        goto LABEL_12;
      }
LABEL_13:
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
      if (!result) {
        return result;
      }
      if (*((void *)a2 + 1) == *((void *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        break;
      }
    }
  }
  *((_DWORD *)a2 + 8) = 0;
  uint64_t result = 1;
  *((unsigned char *)a2 + 36) = 1;
  return result;
}

uint64_t awd::metrics::CrashReasonType::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 32);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 24), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 32) & 4) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return this;
  }
LABEL_7:

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
}

uint64_t awd::metrics::CrashReasonType::ByteSize(awd::metrics::CrashReasonType *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 32);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
LABEL_6:
    *((_DWORD *)this + 7) = v3;
    return v3;
  }
  if ((*((unsigned char *)this + 32) & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 32) & 2) == 0) {
      goto LABEL_22;
    }
    goto LABEL_18;
  }
  uint64_t v5 = *((void *)this + 1);
  int v6 = *(unsigned __int8 *)(v5 + 23);
  if ((v6 & 0x80u) == 0) {
    unint64_t v7 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    unint64_t v7 = *(void *)(v5 + 8);
  }
  if (v7 < 0x80)
  {
    if ((v6 & 0x80u) != 0) {
      int v6 = *(void *)(v5 + 8);
    }
    uint64_t v3 = (v6 + 2);
    if ((v2 & 2) == 0) {
      goto LABEL_22;
    }
LABEL_18:
    int v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
    if (v10 >= 0x80)
    {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10) + 1;
      int v2 = *((_DWORD *)this + 8);
    }
    else
    {
      int v11 = 2;
    }
    uint64_t v3 = (v11 + v3);
    goto LABEL_22;
  }
  int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v7);
  int v9 = *(unsigned __int8 *)(v5 + 23);
  int v2 = *((_DWORD *)this + 8);
  if (*(char *)(v5 + 23) < 0) {
    int v9 = *(void *)(v5 + 8);
  }
  uint64_t v3 = (v8 + 1 + v9);
  if ((v2 & 2) != 0) {
    goto LABEL_18;
  }
LABEL_22:
  if ((v2 & 4) == 0) {
    goto LABEL_6;
  }
  uint64_t v12 = *((void *)this + 2);
  int v13 = *(unsigned __int8 *)(v12 + 23);
  char v14 = v13;
  uint64_t v15 = *(void *)(v12 + 8);
  if ((v13 & 0x80u) == 0) {
    unint64_t v16 = *(unsigned __int8 *)(v12 + 23);
  }
  else {
    unint64_t v16 = v15;
  }
  if (v16 >= 0x80)
  {
    int v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16);
    int v13 = *(unsigned __int8 *)(v12 + 23);
    uint64_t v15 = *(void *)(v12 + 8);
    char v14 = *(unsigned char *)(v12 + 23);
  }
  else
  {
    int v17 = 1;
  }
  if (v14 < 0) {
    int v13 = v15;
  }
  int v18 = v3 + v17 + v13;
  *((_DWORD *)this + 7) = v18 + 1;
  return (v18 + 1);
}

void awd::metrics::CrashReasonType::CopyFrom(awd::metrics::CrashReasonType *this, const awd::metrics::CrashReasonType *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CrashReasonType *))(*(void *)this + 32))(this);
    awd::metrics::CrashReasonType::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CrashReasonType::IsInitialized(awd::metrics::CrashReasonType *this)
{
  return 1;
}

uint64_t awd::metrics::CrashReasonType::Swap(uint64_t this, awd::metrics::CrashReasonType *a2)
{
  if (a2 != (awd::metrics::CrashReasonType *)this)
  {
    uint64_t v2 = *(void *)(this + 8);
    *(void *)(this + 8) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v2;
    uint64_t v3 = *(void *)(this + 16);
    *(void *)(this + 16) = *((void *)a2 + 2);
    *((void *)a2 + 2) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 32);
    *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 28);
    *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v3;
  }
  return this;
}

double awd::metrics::CrashReasonType::GetTypeName@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (char *)operator new(0x20uLL);
  *(void *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_1C5BC8B20;
  strcpy(v3, "awd.metrics.CrashReasonType");
  return *(double *)".CrashReasonType";
}

uint64_t awd::metrics::CommCenterBasebanCrash::SharedCtor(uint64_t this)
{
  *(void *)(this + 8) = 0;
  *(void *)(this + 40) = 0;
  return this;
}

uint64_t wireless_diagnostics::google::protobuf::RepeatedPtrField<awd::metrics::CrashReasonType>::~RepeatedPtrField(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 12);
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(*(void *)a1 + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        int v2 = *(_DWORD *)(a1 + 12);
      }
    }
  }
  if (*(void *)a1) {
    operator delete[](*(void **)a1);
  }
  return a1;
}

awd::metrics::CommCenterBasebanCrash *awd::metrics::CommCenterBasebanCrash::CommCenterBasebanCrash(awd::metrics::CommCenterBasebanCrash *this, const awd::metrics::CommCenterBasebanCrash *a2)
{
  *((void *)this + 5) = 0;
  *(void *)this = &unk_1F210D0B8;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  awd::metrics::CommCenterBasebanCrash::MergeFrom(this, a2);
  return this;
}

{
  *((void *)this + 5) = 0;
  *(void *)this = &unk_1F210D0B8;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  awd::metrics::CommCenterBasebanCrash::MergeFrom(this, a2);
  return this;
}

void sub_1C5B119B8(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::RepeatedPtrField<awd::metrics::CrashReasonType>::~RepeatedPtrField((uint64_t)v1 + 16);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterBasebanCrash::MergeFrom(awd::metrics::CommCenterBasebanCrash *this, const awd::metrics::CommCenterBasebanCrash *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::metrics::CommCenterBasebanCrash *)((char *)this + 16));
  if (*((int *)a2 + 6) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = MEMORY[0x1E4FBA920];
    do
    {
      while (1)
      {
        int v9 = *(const awd::metrics::CrashReasonType **)(*((void *)a2 + 2) + 8 * v4);
        int v10 = *((_DWORD *)this + 7);
        uint64_t v11 = *((int *)this + 6);
        if ((int)v11 >= v10) {
          break;
        }
        uint64_t v12 = *((void *)this + 2);
        *((_DWORD *)this + 6) = v11 + 1;
        awd::metrics::CrashReasonType::MergeFrom(*(awd::metrics::CrashReasonType **)(v12 + 8 * v11), v9);
        if (++v4 >= *((int *)a2 + 6)) {
          goto LABEL_11;
        }
      }
      if (v10 == *((_DWORD *)this + 8))
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::metrics::CommCenterBasebanCrash *)((char *)this + 16));
        int v10 = *((_DWORD *)this + 7);
      }
      *((_DWORD *)this + 7) = v10 + 1;
      int v6 = operator new(0x28uLL);
      void *v6 = &unk_1F210D040;
      v6[1] = v5;
      void v6[2] = v5;
      v6[3] = 0;
      *((_DWORD *)v6 + 8) = 0;
      uint64_t v7 = *((void *)this + 2);
      uint64_t v8 = *((int *)this + 6);
      *((_DWORD *)this + 6) = v8 + 1;
      *(void *)(v7 + 8 * v8) = v6;
      awd::metrics::CrashReasonType::MergeFrom((awd::metrics::CrashReasonType *)v6, v9);
      ++v4;
    }
    while (v4 < *((int *)a2 + 6));
  }
LABEL_11:
  if (*((unsigned char *)a2 + 44))
  {
    uint64_t v13 = *((void *)a2 + 1);
    *((_DWORD *)this + 11) |= 1u;
    *((void *)this + 1) = v13;
  }
}

void sub_1C5B11B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C5B11B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C5B11BE8(_Unwind_Exception *a1)
{
  int v3 = *(_DWORD *)(v1 + 28);
  if (v3 >= 1)
  {
    for (uint64_t i = 0; i < v3; ++i)
    {
      uint64_t v5 = *(void *)(*(void *)(v1 + 16) + 8 * i);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        int v3 = *(_DWORD *)(v1 + 28);
      }
    }
  }
  int v6 = *(void **)(v1 + 16);
  if (v6) {
    operator delete[](v6);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterBasebanCrash::~CommCenterBasebanCrash(awd::metrics::CommCenterBasebanCrash *this)
{
  *(void *)this = &unk_1F210D0B8;
  int v2 = *((_DWORD *)this + 7);
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(*((void *)this + 2) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        int v2 = *((_DWORD *)this + 7);
      }
    }
  }
  uint64_t v5 = (void *)*((void *)this + 2);
  if (v5) {
    operator delete[](v5);
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;
  uint64_t vars8;

  *(void *)this = &unk_1F210D0B8;
  int v2 = *((_DWORD *)this + 7);
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(*((void *)this + 2) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        int v2 = *((_DWORD *)this + 7);
      }
    }
  }
  uint64_t v5 = (void *)*((void *)this + 2);
  if (v5) {
    operator delete[](v5);
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t vars8;

  *(void *)this = &unk_1F210D0B8;
  int v2 = *((_DWORD *)this + 7);
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(*((void *)this + 2) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        int v2 = *((_DWORD *)this + 7);
      }
    }
  }
  uint64_t v5 = (void *)*((void *)this + 2);
  if (v5) {
    operator delete[](v5);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);

  operator delete(v6);
}

uint64_t awd::metrics::CommCenterBasebanCrash::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterBasebanCrash::default_instance(awd::metrics::CommCenterBasebanCrash *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = awd::metrics::CommCenterBasebanCrash::default_instance_;
  if (!awd::metrics::CommCenterBasebanCrash::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABM_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterBasebanCrash::default_instance_;
  }
  return result;
}

void *awd::metrics::CommCenterBasebanCrash::New(awd::metrics::CommCenterBasebanCrash *this)
{
  uint64_t result = operator new(0x30uLL);
  result[5] = 0;
  void *result = &unk_1F210D0B8;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  *((_DWORD *)result + 8) = 0;
  return result;
}

uint64_t awd::metrics::CommCenterBasebanCrash::Clear(uint64_t this)
{
  uint64_t v1 = this;
  if (*(unsigned char *)(this + 44)) {
    *(void *)(this + 8) = 0;
  }
  if (*(int *)(this + 24) >= 1)
  {
    uint64_t v2 = 0;
    do
    {
      uint64_t v3 = *(void *)(*(void *)(v1 + 16) + 8 * v2);
      this = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 24));
  }
  *(_DWORD *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 44) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterBasebanCrash::MergePartialFromCodedStream(awd::metrics::CommCenterBasebanCrash *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4 = (unint64_t *)((char *)this + 8);
  uint64_t v5 = (awd::metrics::CommCenterBasebanCrash *)((char *)this + 16);
  uint64_t v6 = MEMORY[0x1E4FBA920];
  while (1)
  {
    while (1)
    {
      uint64_t v7 = (char *)*((void *)a2 + 1);
      if ((unint64_t)v7 >= *((void *)a2 + 2) || *v7 < 0)
      {
        TagFallbacunint64_t k = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        if (!TagFallback) {
          return 1;
        }
      }
      else
      {
        TagFallbacunint64_t k = *v7;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((void *)a2 + 1) = v7 + 1;
        if (!TagFallback) {
          return 1;
        }
      }
      if (TagFallback >> 3 != 1) {
        break;
      }
      int v9 = TagFallback & 7;
      if ((TagFallback & 7) != 0) {
        goto LABEL_18;
      }
      char v14 = (char *)*((void *)a2 + 1);
      unint64_t v15 = *((void *)a2 + 2);
      if ((unint64_t)v14 >= v15 || *v14 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
        if (!result) {
          return result;
        }
        unint64_t v16 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v18 = *((void *)a2 + 2);
        *((_DWORD *)this + 11) |= 1u;
        if ((unint64_t)v16 < v18) {
          goto LABEL_23;
        }
      }
      else
      {
        unint64_t *v4 = *v14;
        unint64_t v16 = v14 + 1;
        *((void *)a2 + 1) = v16;
        *((_DWORD *)this + 11) |= 1u;
        if ((unint64_t)v16 < v15)
        {
LABEL_23:
          if (*v16 == 18)
          {
            do
            {
              *((void *)a2 + 1) = v16 + 1;
              int v10 = *((_DWORD *)this + 7);
              uint64_t v11 = *((int *)this + 6);
              if ((int)v11 < v10) {
                goto LABEL_11;
              }
LABEL_25:
              if (v10 == *((_DWORD *)this + 8))
              {
                wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5);
                int v10 = *((_DWORD *)this + 7);
              }
              *((_DWORD *)this + 7) = v10 + 1;
              uint64_t v13 = operator new(0x28uLL);
              void *v13 = &unk_1F210D040;
              v13[1] = v6;
              uint64_t v13[2] = v6;
              void v13[3] = 0;
              *((_DWORD *)v13 + 8) = 0;
              uint64_t v19 = *((void *)this + 2);
              uint64_t v20 = *((int *)this + 6);
              *((_DWORD *)this + 6) = v20 + 1;
              *(void *)(v19 + 8 * v20) = v13;
LABEL_28:
              unsigned int v28 = -1431655766;
              xpc_object_t v21 = (char *)*((void *)a2 + 1);
              if ((unint64_t)v21 >= *((void *)a2 + 2) || *v21 < 0)
              {
                if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v28))return 0; {
              }
                }
              else
              {
                unsigned int v28 = *v21;
                *((void *)a2 + 1) = v21 + 1;
              }
              int v22 = *((_DWORD *)a2 + 14);
              int v23 = *((_DWORD *)a2 + 15);
              *((_DWORD *)a2 + 14) = v22 + 1;
              if (v22 >= v23) {
                return 0;
              }
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
              if (!awd::metrics::CrashReasonType::MergePartialFromCodedStream((awd::metrics::CrashReasonType *)v13, a2)|| !*((unsigned char *)a2 + 36))
              {
                return 0;
              }
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
              int v24 = *((_DWORD *)a2 + 14);
              BOOL v25 = __OFSUB__(v24, 1);
              int v26 = v24 - 1;
              if (v26 < 0 == v25) {
                *((_DWORD *)a2 + 14) = v26;
              }
              unint64_t v16 = (unsigned char *)*((void *)a2 + 1);
              xpc_object_t v27 = (unsigned char *)*((void *)a2 + 2);
            }
            while (v16 < v27 && *v16 == 18);
            if (v16 == v27 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
            {
              *((_DWORD *)a2 + 8) = 0;
              uint64_t result = 1;
              *((unsigned char *)a2 + 36) = 1;
              return result;
            }
          }
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      int v9 = TagFallback & 7;
      if (v9 == 2)
      {
        int v10 = *((_DWORD *)this + 7);
        uint64_t v11 = *((int *)this + 6);
        if ((int)v11 >= v10) {
          goto LABEL_25;
        }
LABEL_11:
        uint64_t v12 = *((void *)this + 2);
        *((_DWORD *)this + 6) = v11 + 1;
        uint64_t v13 = *(void **)(v12 + 8 * v11);
        goto LABEL_28;
      }
    }
    else
    {
      int v9 = TagFallback & 7;
    }
LABEL_18:
    if (v9 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
  }
    }
}

uint64_t awd::metrics::CommCenterBasebanCrash::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  if (*(unsigned char *)(this + 44)) {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 8), (uint64_t)a2, a4);
  }
  if (*(int *)(v5 + 24) >= 1)
  {
    uint64_t v6 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(void *)(*(void *)(v5 + 16) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 24));
  }
  return this;
}

uint64_t awd::metrics::CommCenterBasebanCrash::ByteSize(wireless_diagnostics::google::protobuf::io::CodedOutputStream **this)
{
  if (*((unsigned char *)this + 44))
  {
    int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(this[1]);
    int v5 = *((_DWORD *)this + 6);
    uint64_t v3 = (v5 + v4 + 1);
    if (v5 < 1) {
      goto LABEL_9;
    }
  }
  else
  {
    int v2 = *((_DWORD *)this + 6);
    uint64_t v3 = v2;
    if (v2 < 1) {
      goto LABEL_9;
    }
  }
  uint64_t v6 = 0;
  do
  {
    while (1)
    {
      uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::metrics::CrashReasonType::ByteSize(*((awd::metrics::CrashReasonType **)this[2] + v6));
      if (v7 < 0x80) {
        break;
      }
      uint64_t v3 = v7
         + v3
         + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7);
      if (++v6 >= *((int *)this + 6)) {
        goto LABEL_9;
      }
    }
    uint64_t v3 = (v7 + v3 + 1);
    ++v6;
  }
  while (v6 < *((int *)this + 6));
LABEL_9:
  *((_DWORD *)this + 10) = v3;
  return v3;
}

void awd::metrics::CommCenterBasebanCrash::CopyFrom(awd::metrics::CommCenterBasebanCrash *this, const awd::metrics::CommCenterBasebanCrash *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterBasebanCrash *))(*(void *)this + 32))(this);
    awd::metrics::CommCenterBasebanCrash::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterBasebanCrash::IsInitialized(awd::metrics::CommCenterBasebanCrash *this)
{
  return 1;
}

awd::metrics::CommCenterBasebanCrash *awd::metrics::CommCenterBasebanCrash::Swap(awd::metrics::CommCenterBasebanCrash *this, awd::metrics::CommCenterBasebanCrash *a2)
{
  if (a2 != this)
  {
    uint64_t v3 = this;
    uint64_t v4 = *((void *)this + 1);
    *((void *)this + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v4;
    this = (awd::metrics::CommCenterBasebanCrash *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    int v5 = *((_DWORD *)v3 + 11);
    *((_DWORD *)v3 + 11) = *((_DWORD *)a2 + 11);
    *((_DWORD *)a2 + 11) = v5;
    int v6 = *((_DWORD *)v3 + 10);
    *((_DWORD *)v3 + 10) = *((_DWORD *)a2 + 10);
    *((_DWORD *)a2 + 10) = v6;
  }
  return this;
}

char *awd::metrics::CommCenterBasebanCrash::GetTypeName@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1C5BC27D0;
  strcpy(result, "awd.metrics.CommCenterBasebanCrash");
  return result;
}

void *awd::metrics::CommCenterBasebandTrace::SharedCtor(void *this)
{
  uint64_t v1 = MEMORY[0x1E4FBA920];
  this[1] = 0;
  this[2] = v1;
  this[3] = v1;
  this[4] = 0;
  return this;
}

awd::metrics::CommCenterBasebandTrace *awd::metrics::CommCenterBasebandTrace::CommCenterBasebandTrace(awd::metrics::CommCenterBasebandTrace *this, const awd::metrics::CommCenterBasebandTrace *a2)
{
  *(void *)this = &unk_1F210D130;
  *((void *)this + 1) = 0;
  uint64_t v3 = MEMORY[0x1E4FBA920];
  *((void *)this + 2) = MEMORY[0x1E4FBA920];
  *((void *)this + 3) = v3;
  *((void *)this + 4) = 0;
  awd::metrics::CommCenterBasebandTrace::MergeFrom(this, a2);
  return this;
}

{
  uint64_t v3;

  *(void *)this = &unk_1F210D130;
  *((void *)this + 1) = 0;
  uint64_t v3 = MEMORY[0x1E4FBA920];
  *((void *)this + 2) = MEMORY[0x1E4FBA920];
  *((void *)this + 3) = v3;
  *((void *)this + 4) = 0;
  awd::metrics::CommCenterBasebandTrace::MergeFrom(this, a2);
  return this;
}

void sub_1C5B12574(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterBasebandTrace::MergeFrom(awd::metrics::CommCenterBasebandTrace *this, const awd::metrics::CommCenterBasebandTrace *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v19);
  }
  LOBYTE(v4) = *((unsigned char *)a2 + 36);
  if ((_BYTE)v4)
  {
    if (*((unsigned char *)a2 + 36))
    {
      uint64_t v5 = *((void *)a2 + 1);
      *((_DWORD *)this + 9) |= 1u;
      *((void *)this + 1) = v5;
      int v4 = *((_DWORD *)a2 + 9);
    }
    int v6 = (void **)MEMORY[0x1E4FBA920];
    if ((v4 & 2) != 0)
    {
      uint64_t v7 = (void **)*((void *)a2 + 2);
      *((_DWORD *)this + 9) |= 2u;
      uint64_t v8 = (void **)*((void *)this + 2);
      if (v8 == v6)
      {
        uint64_t v8 = (void **)operator new(0x18uLL);
        v8[1] = 0;
        _OWORD v8[2] = 0;
        *uint64_t v8 = 0;
        *((void *)this + 2) = v8;
      }
      if (v8 != v7)
      {
        char v9 = *((unsigned char *)v7 + 23);
        if ((*((char *)v8 + 23) & 0x80000000) == 0)
        {
          if ((*((unsigned char *)v7 + 23) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>(v8, *v7, (size_t)v7[1]);
            if ((*((unsigned char *)a2 + 36) & 4) == 0) {
              return;
            }
          }
          else
          {
            long long v10 = *(_OWORD *)v7;
            _OWORD v8[2] = v7[2];
            *(_OWORD *)uint64_t v8 = v10;
            if ((*((unsigned char *)a2 + 36) & 4) == 0) {
              return;
            }
          }
          goto LABEL_22;
        }
        if (v9 >= 0) {
          uint64_t v11 = v7;
        }
        else {
          uint64_t v11 = *v7;
        }
        if (v9 >= 0) {
          size_t v12 = *((unsigned __int8 *)v7 + 23);
        }
        else {
          size_t v12 = (size_t)v7[1];
        }
        std::string::__assign_no_alias<false>(v8, v11, v12);
      }
    }
    if ((*((unsigned char *)a2 + 36) & 4) == 0) {
      return;
    }
LABEL_22:
    uint64_t v13 = (void **)*((void *)a2 + 3);
    *((_DWORD *)this + 9) |= 4u;
    char v14 = (void **)*((void *)this + 3);
    if (v14 == v6)
    {
      char v14 = (void **)operator new(0x18uLL);
      v14[1] = 0;
      v14[2] = 0;
      *char v14 = 0;
      *((void *)this + 3) = v14;
    }
    if (v14 != v13)
    {
      char v15 = *((unsigned char *)v13 + 23);
      if (*((char *)v14 + 23) < 0)
      {
        if (v15 >= 0) {
          int v17 = v13;
        }
        else {
          int v17 = *v13;
        }
        if (v15 >= 0) {
          size_t v18 = *((unsigned __int8 *)v13 + 23);
        }
        else {
          size_t v18 = (size_t)v13[1];
        }
        std::string::__assign_no_alias<false>(v14, v17, v18);
      }
      else if ((*((unsigned char *)v13 + 23) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v14, *v13, (size_t)v13[1]);
      }
      else
      {
        long long v16 = *(_OWORD *)v13;
        v14[2] = v13[2];
        *(_OWORD *)char v14 = v16;
      }
    }
  }
}

void sub_1C5B12768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C5B1277C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C5B127E4(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterBasebandTrace::~CommCenterBasebandTrace(awd::metrics::CommCenterBasebandTrace *this)
{
  *(void *)this = &unk_1F210D130;
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = MEMORY[0x1E4FBA920];
  if (v2 == MEMORY[0x1E4FBA920] || v2 == 0)
  {
    uint64_t v5 = *((void *)this + 3);
    if (v5 != MEMORY[0x1E4FBA920] && v5 != 0)
    {
LABEL_20:
      if (*(char *)(v5 + 23) < 0) {
        operator delete(*(void **)v5);
      }
      operator delete((void *)v5);
      uint64_t v7 = this;
      goto LABEL_13;
    }
  }
  else
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    operator delete((void *)v2);
    uint64_t v5 = *((void *)this + 3);
    if (v5 != v3 && v5 != 0) {
      goto LABEL_20;
    }
  }
  uint64_t v7 = this;

LABEL_13:
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v7);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::MessageLite *v7;
  uint64_t vars8;

  *(void *)this = &unk_1F210D130;
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = MEMORY[0x1E4FBA920];
  if (v2 == MEMORY[0x1E4FBA920] || v2 == 0)
  {
    uint64_t v5 = *((void *)this + 3);
    if (v5 != MEMORY[0x1E4FBA920] && v5 != 0)
    {
LABEL_20:
      if (*(char *)(v5 + 23) < 0) {
        operator delete(*(void **)v5);
      }
      operator delete((void *)v5);
      uint64_t v7 = this;
      goto LABEL_13;
    }
  }
  else
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    operator delete((void *)v2);
    uint64_t v5 = *((void *)this + 3);
    if (v5 != v3 && v5 != 0) {
      goto LABEL_20;
    }
  }
  uint64_t v7 = this;

LABEL_13:
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v7);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  void *v7;
  uint64_t vars8;

  *(void *)this = &unk_1F210D130;
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = MEMORY[0x1E4FBA920];
  if (v2 != MEMORY[0x1E4FBA920] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    operator delete((void *)v2);
  }
  uint64_t v5 = *((void *)this + 3);
  if (v5 != v3 && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0) {
      operator delete(*(void **)v5);
    }
    operator delete((void *)v5);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);

  operator delete(v7);
}

void awd::metrics::CommCenterBasebandTrace::SharedDtor(awd::metrics::CommCenterBasebandTrace *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = MEMORY[0x1E4FBA920];
  if (v2 == MEMORY[0x1E4FBA920] || v2 == 0)
  {
    uint64_t v5 = *((void *)this + 3);
    if (v5 == MEMORY[0x1E4FBA920] || v5 == 0) {
      return;
    }
    goto LABEL_18;
  }
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  operator delete((void *)v2);
  uint64_t v5 = *((void *)this + 3);
  if (v5 != v3 && v5 != 0)
  {
LABEL_18:
    if (*(char *)(v5 + 23) < 0)
    {
      operator delete(*(void **)v5);
      uint64_t v8 = (void *)v5;
    }
    else
    {
      uint64_t v8 = (void *)v5;
    }
    operator delete(v8);
  }
}

uint64_t awd::metrics::CommCenterBasebandTrace::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterBasebandTrace::default_instance(awd::metrics::CommCenterBasebandTrace *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = awd::metrics::CommCenterBasebandTrace::default_instance_;
  if (!awd::metrics::CommCenterBasebandTrace::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABM_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterBasebandTrace::default_instance_;
  }
  return result;
}

void *awd::metrics::CommCenterBasebandTrace::New(awd::metrics::CommCenterBasebandTrace *this)
{
  uint64_t result = operator new(0x28uLL);
  uint64_t v2 = MEMORY[0x1E4FBA920];
  void *result = &unk_1F210D130;
  result[1] = 0;
  result[2] = v2;
  result[3] = v2;
  result[4] = 0;
  return result;
}

uint64_t awd::metrics::CommCenterBasebandTrace::Clear(uint64_t this)
{
  char v1 = *(unsigned char *)(this + 36);
  if (!v1) {
    goto LABEL_12;
  }
  *(void *)(this + 8) = 0;
  uint64_t v2 = MEMORY[0x1E4FBA920];
  if ((v1 & 2) != 0)
  {
    uint64_t v3 = *(void *)(this + 16);
    if (v3 != MEMORY[0x1E4FBA920])
    {
      if (*(char *)(v3 + 23) < 0)
      {
        **(unsigned char **)uint64_t v3 = 0;
        *(void *)(v3 + 8) = 0;
        if ((*(unsigned char *)(this + 36) & 4) == 0) {
          goto LABEL_12;
        }
        goto LABEL_7;
      }
      *(unsigned char *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
  if ((*(unsigned char *)(this + 36) & 4) == 0)
  {
LABEL_12:
    *(_DWORD *)(this + 36) = 0;
    return this;
  }
LABEL_7:
  uint64_t v4 = *(void *)(this + 24);
  if (v4 == v2) {
    goto LABEL_12;
  }
  if (*(char *)(v4 + 23) < 0)
  {
    **(unsigned char **)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
  }
  else
  {
    *(unsigned char *)uint64_t v4 = 0;
    *(unsigned char *)(v4 + 23) = 0;
  }
  *(_DWORD *)(this + 36) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterBasebandTrace::MergePartialFromCodedStream(awd::metrics::CommCenterBasebandTrace *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4 = (unint64_t *)((char *)this + 8);
  uint64_t v5 = MEMORY[0x1E4FBA920];
  while (1)
  {
    while (1)
    {
      while (1)
      {
        int v6 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v6 >= *((void *)a2 + 2) || *v6 < 0)
        {
          TagFallbacunint64_t k = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          TagFallbacunint64_t k = *v6;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((void *)a2 + 1) = v6 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        unsigned int v8 = TagFallback >> 3;
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_32;
        }
        size_t v12 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
          if (!result) {
            return result;
          }
          uint64_t v13 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v18 = *((void *)a2 + 2);
          int v14 = *((_DWORD *)this + 9) | 1;
          *((_DWORD *)this + 9) = v14;
          if ((unint64_t)v13 < v18) {
            goto LABEL_37;
          }
        }
        else
        {
          unint64_t *v4 = *v12;
          uint64_t v13 = v12 + 1;
          *((void *)a2 + 1) = v13;
          int v14 = *((_DWORD *)this + 9) | 1;
          *((_DWORD *)this + 9) = v14;
          if ((unint64_t)v13 < v11)
          {
LABEL_37:
            if (*v13 == 18)
            {
              *((void *)a2 + 1) = v13 + 1;
              *((_DWORD *)this + 9) = v14 | 2;
              if (*((void *)this + 2) != v5) {
                goto LABEL_22;
              }
LABEL_21:
              char v15 = operator new(0x18uLL);
              v15[1] = 0;
              void v15[2] = 0;
              void *v15 = 0;
              *((void *)this + 2) = v15;
              goto LABEL_22;
            }
          }
        }
      }
      if (v8 == 2) {
        break;
      }
      if (v8 == 3)
      {
        int v9 = TagFallback & 7;
        if (v9 == 2)
        {
          *((_DWORD *)this + 9) |= 4u;
          if (*((void *)this + 3) != v5) {
            goto LABEL_12;
          }
          goto LABEL_26;
        }
      }
      else
      {
        int v9 = TagFallback & 7;
      }
LABEL_32:
      if (v9 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
    }
      }
    int v9 = TagFallback & 7;
    if (v9 != 2) {
      goto LABEL_32;
    }
    *((_DWORD *)this + 9) |= 2u;
    if (*((void *)this + 2) == v5) {
      goto LABEL_21;
    }
LABEL_22:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
    if (!result) {
      return result;
    }
    long long v16 = (unsigned char *)*((void *)a2 + 1);
    if ((unint64_t)v16 < *((void *)a2 + 2) && *v16 == 26)
    {
      *((void *)a2 + 1) = v16 + 1;
      *((_DWORD *)this + 9) |= 4u;
      if (*((void *)this + 3) != v5)
      {
LABEL_12:
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        goto LABEL_27;
      }
LABEL_26:
      int v17 = operator new(0x18uLL);
      v17[1] = 0;
      void v17[2] = 0;
      *int v17 = 0;
      *((void *)this + 3) = v17;
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
      if (!result) {
        return result;
      }
LABEL_27:
      if (*((void *)a2 + 1) == *((void *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        break;
      }
    }
  }
  *((_DWORD *)a2 + 8) = 0;
  uint64_t result = 1;
  *((unsigned char *)a2 + 36) = 1;
  return result;
}

uint64_t awd::metrics::CommCenterBasebandTrace::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v4 = this;
  int v5 = *(_DWORD *)(this + 36);
  if ((v5 & 1) == 0)
  {
    if ((v5 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
    if ((*(_DWORD *)(v4 + 36) & 4) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 8), (uint64_t)a2, a4);
  int v5 = *(_DWORD *)(v4 + 36);
  if ((v5 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 4) == 0) {
    return this;
  }
LABEL_7:

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
}

uint64_t awd::metrics::CommCenterBasebandTrace::ByteSize(awd::metrics::CommCenterBasebandTrace *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 36);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
LABEL_6:
    *((_DWORD *)this + 8) = v3;
    return v3;
  }
  if (*((unsigned char *)this + 36))
  {
    uint64_t v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 1))
       + 1;
    int v2 = *((_DWORD *)this + 9);
    if ((v2 & 2) == 0) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 36) & 2) == 0) {
      goto LABEL_17;
    }
  }
  uint64_t v5 = *((void *)this + 2);
  int v6 = *(unsigned __int8 *)(v5 + 23);
  char v7 = v6;
  uint64_t v8 = *(void *)(v5 + 8);
  if ((v6 & 0x80u) == 0) {
    unint64_t v9 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    unint64_t v9 = v8;
  }
  if (v9 >= 0x80)
  {
    int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9);
    int v6 = *(unsigned __int8 *)(v5 + 23);
    uint64_t v8 = *(void *)(v5 + 8);
    int v2 = *((_DWORD *)this + 9);
    char v7 = *(unsigned char *)(v5 + 23);
  }
  else
  {
    int v10 = 1;
  }
  if (v7 < 0) {
    int v6 = v8;
  }
  uint64_t v3 = (v3 + v10 + v6 + 1);
LABEL_17:
  if ((v2 & 4) == 0) {
    goto LABEL_6;
  }
  uint64_t v11 = *((void *)this + 3);
  int v12 = *(unsigned __int8 *)(v11 + 23);
  char v13 = v12;
  uint64_t v14 = *(void *)(v11 + 8);
  if ((v12 & 0x80u) == 0) {
    unint64_t v15 = *(unsigned __int8 *)(v11 + 23);
  }
  else {
    unint64_t v15 = v14;
  }
  if (v15 >= 0x80)
  {
    int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15);
    int v12 = *(unsigned __int8 *)(v11 + 23);
    uint64_t v14 = *(void *)(v11 + 8);
    char v13 = *(unsigned char *)(v11 + 23);
  }
  else
  {
    int v16 = 1;
  }
  if (v13 < 0) {
    int v12 = v14;
  }
  int v17 = v3 + v16 + v12;
  *((_DWORD *)this + 8) = v17 + 1;
  return (v17 + 1);
}

void awd::metrics::CommCenterBasebandTrace::CopyFrom(awd::metrics::CommCenterBasebandTrace *this, const awd::metrics::CommCenterBasebandTrace *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterBasebandTrace *))(*(void *)this + 32))(this);
    awd::metrics::CommCenterBasebandTrace::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterBasebandTrace::IsInitialized(awd::metrics::CommCenterBasebandTrace *this)
{
  return 1;
}

uint64_t awd::metrics::CommCenterBasebandTrace::Swap(uint64_t this, awd::metrics::CommCenterBasebandTrace *a2)
{
  if (a2 != (awd::metrics::CommCenterBasebandTrace *)this)
  {
    uint64_t v2 = *(void *)(this + 8);
    uint64_t v3 = *(void *)(this + 16);
    uint64_t v4 = *((void *)a2 + 2);
    *(void *)(this + 8) = *((void *)a2 + 1);
    *(void *)(this + 16) = v4;
    *((void *)a2 + 1) = v2;
    *((void *)a2 + 2) = v3;
    uint64_t v5 = *(void *)(this + 24);
    *(void *)(this + 24) = *((void *)a2 + 3);
    *((void *)a2 + 3) = v5;
    LODWORD(v5) = *(_DWORD *)(this + 36);
    *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v5;
    LODWORD(v5) = *(_DWORD *)(this + 32);
    *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v5;
  }
  return this;
}

char *awd::metrics::CommCenterBasebandTrace::GetTypeName@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1C5BCAD70;
  strcpy(result, "awd.metrics.CommCenterBasebandTrace");
  return result;
}

void *awd::metrics::CommCenterNVMSync::SharedCtor(void *this)
{
  this[4] = 0;
  this[1] = 0;
  this[2] = 0;
  *(void *)((char *)this + 22) = 0;
  return this;
}

awd::metrics::CommCenterNVMSync *awd::metrics::CommCenterNVMSync::CommCenterNVMSync(awd::metrics::CommCenterNVMSync *this, const awd::metrics::CommCenterNVMSync *a2)
{
  *((void *)this + 4) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1F210D1A8;
  *(void *)((char *)this + 22) = 0;
  awd::metrics::CommCenterNVMSync::MergeFrom(this, a2);
  return this;
}

{
  *((void *)this + 4) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1F210D1A8;
  *(void *)((char *)this + 22) = 0;
  awd::metrics::CommCenterNVMSync::MergeFrom(this, a2);
  return this;
}

void sub_1C5B13244(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterNVMSync::MergeFrom(awd::metrics::CommCenterNVMSync *this, const awd::metrics::CommCenterNVMSync *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *((unsigned char *)a2 + 36);
  if ((_BYTE)v4)
  {
    if (*((unsigned char *)a2 + 36))
    {
      uint64_t v6 = *((void *)a2 + 1);
      *((_DWORD *)this + 9) |= 1u;
      *((void *)this + 1) = v6;
      int v4 = *((_DWORD *)a2 + 9);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_13;
      }
    }
    else if ((*((unsigned char *)a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    int v7 = *((_DWORD *)a2 + 6);
    *((_DWORD *)this + 9) |= 2u;
    *((_DWORD *)this + 6) = v7;
    int v4 = *((_DWORD *)a2 + 9);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_14;
    }
LABEL_13:
    uint64_t v8 = *((void *)a2 + 2);
    *((_DWORD *)this + 9) |= 4u;
    *((void *)this + 2) = v8;
    int v4 = *((_DWORD *)a2 + 9);
    if ((v4 & 8) == 0)
    {
LABEL_8:
      if ((v4 & 0x10) == 0) {
        return;
      }
      goto LABEL_9;
    }
LABEL_14:
    char v9 = *((unsigned char *)a2 + 28);
    *((_DWORD *)this + 9) |= 8u;
    *((unsigned char *)this + 28) = v9;
    if ((*((_DWORD *)a2 + 9) & 0x10) == 0) {
      return;
    }
LABEL_9:
    char v5 = *((unsigned char *)a2 + 29);
    *((_DWORD *)this + 9) |= 0x10u;
    *((unsigned char *)this + 29) = v5;
  }
}

void sub_1C5B1336C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C5B13380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C5B133E4(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

uint64_t awd::metrics::CommCenterNVMSync::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterNVMSync::default_instance(awd::metrics::CommCenterNVMSync *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = awd::metrics::CommCenterNVMSync::default_instance_;
  if (!awd::metrics::CommCenterNVMSync::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABM_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterNVMSync::default_instance_;
  }
  return result;
}

void *awd::metrics::CommCenterNVMSync::New(awd::metrics::CommCenterNVMSync *this)
{
  uint64_t result = operator new(0x28uLL);
  result[4] = 0;
  result[1] = 0;
  result[2] = 0;
  void *result = &unk_1F210D1A8;
  *(void *)((char *)result + 22) = 0;
  return result;
}

uint64_t awd::metrics::CommCenterNVMSync::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 36))
  {
    *(void *)(this + 8) = 0;
    *(void *)(this + 16) = 0;
    *(void *)(this + 22) = 0;
  }
  *(_DWORD *)(this + 36) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterNVMSync::MergePartialFromCodedStream(awd::metrics::CommCenterNVMSync *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  int v4 = (unint64_t *)((char *)this + 8);
  char v5 = (unsigned int *)((char *)this + 24);
  uint64_t v6 = (unint64_t *)((char *)this + 16);
  while (2)
  {
    int v7 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v7 >= *((void *)a2 + 2) || *v7 < 0)
    {
      TagFallbacunint64_t k = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      TagFallbacunint64_t k = *v7;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v7 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_24;
        }
        uint64_t v11 = (char *)*((void *)a2 + 1);
        unint64_t v10 = *((void *)a2 + 2);
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
          if (!result) {
            return result;
          }
          int v12 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v10 = *((void *)a2 + 2);
          *((_DWORD *)this + 9) |= 1u;
          if ((unint64_t)v12 >= v10) {
            continue;
          }
        }
        else
        {
          unint64_t *v4 = *v11;
          int v12 = v11 + 1;
          *((void *)a2 + 1) = v12;
          *((_DWORD *)this + 9) |= 1u;
          if ((unint64_t)v12 >= v10) {
            continue;
          }
        }
        if (*v12 != 16) {
          continue;
        }
        char v13 = v12 + 1;
        *((void *)a2 + 1) = v13;
        if ((unint64_t)v13 >= v10) {
          goto LABEL_36;
        }
        goto LABEL_33;
      case 2u:
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_24;
        }
        char v13 = (char *)*((void *)a2 + 1);
        unint64_t v10 = *((void *)a2 + 2);
        if ((unint64_t)v13 >= v10) {
          goto LABEL_36;
        }
LABEL_33:
        if ((*v13 & 0x80000000) == 0)
        {
          *char v5 = *v13;
          int v17 = v13 + 1;
          *((void *)a2 + 1) = v17;
          *((_DWORD *)this + 9) |= 2u;
          if ((unint64_t)v17 < v10) {
            goto LABEL_38;
          }
          continue;
        }
LABEL_36:
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
        if (!result) {
          return result;
        }
        int v17 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v10 = *((void *)a2 + 2);
        *((_DWORD *)this + 9) |= 2u;
        if ((unint64_t)v17 >= v10) {
          continue;
        }
LABEL_38:
        if (*v17 != 24) {
          continue;
        }
        uint64_t v14 = v17 + 1;
        *((void *)a2 + 1) = v14;
        if ((unint64_t)v14 >= v10)
        {
LABEL_43:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v6);
          if (!result) {
            return result;
          }
          unint64_t v18 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v10 = *((void *)a2 + 2);
          *((_DWORD *)this + 9) |= 4u;
          if ((unint64_t)v18 < v10) {
            goto LABEL_45;
          }
          continue;
        }
LABEL_40:
        if ((char)*v14 < 0) {
          goto LABEL_43;
        }
        unint64_t *v6 = *v14;
        unint64_t v18 = v14 + 1;
        *((void *)a2 + 1) = v18;
        *((_DWORD *)this + 9) |= 4u;
        if ((unint64_t)v18 >= v10) {
          continue;
        }
LABEL_45:
        if (*v18 != 32) {
          continue;
        }
        unint64_t v15 = v18 + 1;
        *((void *)a2 + 1) = v15;
        unsigned int v25 = -1431655766;
        if ((unint64_t)v15 >= v10) {
          goto LABEL_49;
        }
LABEL_47:
        if ((char)*v15 < 0)
        {
LABEL_49:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v25);
          if (!result) {
            return result;
          }
          unsigned int v19 = v25;
          uint64_t v20 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v10 = *((void *)a2 + 2);
          goto LABEL_51;
        }
        unsigned int v19 = *v15;
        uint64_t v20 = v15 + 1;
        *((void *)a2 + 1) = v20;
LABEL_51:
        *((unsigned char *)this + 28) = v19 != 0;
        *((_DWORD *)this + 9) |= 8u;
        if ((unint64_t)v20 >= v10 || *v20 != 40) {
          continue;
        }
        int v16 = v20 + 1;
        *((void *)a2 + 1) = v16;
        unsigned int v24 = -1431655766;
        if ((unint64_t)v16 < v10)
        {
LABEL_54:
          if ((*v16 & 0x80000000) == 0)
          {
            unsigned int v21 = *v16;
            int v22 = (unsigned __int8 *)(v16 + 1);
            *((void *)a2 + 1) = v22;
            goto LABEL_58;
          }
        }
LABEL_56:
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v24);
        if (!result) {
          return result;
        }
        unsigned int v21 = v24;
        int v22 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v10 = *((void *)a2 + 2);
LABEL_58:
        *((unsigned char *)this + 29) = v21 != 0;
        *((_DWORD *)this + 9) |= 0x10u;
        if (v22 != (unsigned __int8 *)v10 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10)) {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)a2 + 36) = 1;
        return result;
      case 3u:
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_24;
        }
        uint64_t v14 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v10 = *((void *)a2 + 2);
        if ((unint64_t)v14 >= v10) {
          goto LABEL_43;
        }
        goto LABEL_40;
      case 4u:
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_24;
        }
        unint64_t v15 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v10 = *((void *)a2 + 2);
        unsigned int v25 = -1431655766;
        if ((unint64_t)v15 >= v10) {
          goto LABEL_49;
        }
        goto LABEL_47;
      case 5u:
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_24;
        }
        int v16 = (char *)*((void *)a2 + 1);
        unint64_t v10 = *((void *)a2 + 2);
        unsigned int v24 = -1431655766;
        if ((unint64_t)v16 >= v10) {
          goto LABEL_56;
        }
        goto LABEL_54;
      default:
        int v9 = TagFallback & 7;
LABEL_24:
        if (v9 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback))continue; {
        return 0;
        }
    }
  }
}

uint64_t awd::metrics::CommCenterNVMSync::ByteSize(awd::metrics::CommCenterNVMSync *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 36);
  if (!(_BYTE)v2)
  {
    uint64_t result = 0;
    *((_DWORD *)this + 8) = 0;
    return result;
  }
  if ((*((unsigned char *)this + 36) & 1) == 0)
  {
    unsigned int v3 = 0;
    if ((*((unsigned char *)this + 36) & 2) == 0) {
      goto LABEL_11;
    }
LABEL_7:
    char v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
    if (v5 >= 0x80)
    {
      int v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
      int v2 = *((_DWORD *)this + 9);
    }
    else
    {
      int v6 = 2;
    }
    v3 += v6;
    goto LABEL_11;
  }
  unsigned int v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                   + 1))
     + 1;
  int v2 = *((_DWORD *)this + 9);
  if ((v2 & 2) != 0) {
    goto LABEL_7;
  }
LABEL_11:
  if ((v2 & 4) != 0)
  {
    v3 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                      + 2))
        + 1;
    int v2 = *((_DWORD *)this + 9);
  }
  unsigned int v7 = v3 + 2;
  if ((v2 & 8) == 0) {
    unsigned int v7 = v3;
  }
  if ((v2 & 0x10) != 0) {
    uint64_t result = v7 + 2;
  }
  else {
    uint64_t result = v7;
  }
  *((_DWORD *)this + 8) = result;
  return result;
}

void awd::metrics::CommCenterNVMSync::CopyFrom(awd::metrics::CommCenterNVMSync *this, const awd::metrics::CommCenterNVMSync *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterNVMSync *))(*(void *)this + 32))(this);
    awd::metrics::CommCenterNVMSync::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterNVMSync::IsInitialized(awd::metrics::CommCenterNVMSync *this)
{
  return 1;
}

uint64_t awd::metrics::CommCenterNVMSync::Swap(uint64_t this, awd::metrics::CommCenterNVMSync *a2)
{
  if (a2 != (awd::metrics::CommCenterNVMSync *)this)
  {
    uint64_t v2 = *(void *)(this + 8);
    *(void *)(this + 8) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v2;
    uint64_t v3 = *(void *)(this + 16);
    *(void *)(this + 16) = *((void *)a2 + 2);
    *((void *)a2 + 2) = v3;
    LOBYTE(v3) = *(unsigned char *)(this + 28);
    *(unsigned char *)(this + 28) = *((unsigned char *)a2 + 28);
    *((unsigned char *)a2 + 28) = v3;
    LOBYTE(v3) = *(unsigned char *)(this + 29);
    *(unsigned char *)(this + 29) = *((unsigned char *)a2 + 29);
    *((unsigned char *)a2 + 29) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 36);
    *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 32);
    *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v3;
  }
  return this;
}

double awd::metrics::CommCenterNVMSync::GetTypeName@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (char *)operator new(0x20uLL);
  *(void *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_1C5BCAD80;
  strcpy(v3, "awd.metrics.CommCenterNVMSync");
  return *(double *)"ommCenterNVMSync";
}

void *awd::metrics::CommCenterAccessoryInformation::SharedCtor(void *this)
{
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

awd::metrics::CommCenterAccessoryInformation *awd::metrics::CommCenterAccessoryInformation::CommCenterAccessoryInformation(awd::metrics::CommCenterAccessoryInformation *this, const awd::metrics::CommCenterAccessoryInformation *a2)
{
  *(void *)this = &unk_1F210D220;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  awd::metrics::CommCenterAccessoryInformation::MergeFrom(this, a2);
  return this;
}

{
  *(void *)this = &unk_1F210D220;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  awd::metrics::CommCenterAccessoryInformation::MergeFrom(this, a2);
  return this;
}

void sub_1C5B13B3C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterAccessoryInformation::MergeFrom(awd::metrics::CommCenterAccessoryInformation *this, const awd::metrics::CommCenterAccessoryInformation *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v4) = *((unsigned char *)a2 + 28);
  if ((_BYTE)v4)
  {
    if (*((unsigned char *)a2 + 28))
    {
      uint64_t v6 = *((void *)a2 + 1);
      *((_DWORD *)this + 7) |= 1u;
      *((void *)this + 1) = v6;
      int v4 = *((_DWORD *)a2 + 7);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0) {
          return;
        }
        goto LABEL_7;
      }
    }
    else if ((*((unsigned char *)a2 + 28) & 2) == 0)
    {
      goto LABEL_6;
    }
    int v7 = *((_DWORD *)a2 + 4);
    *((_DWORD *)this + 7) |= 2u;
    *((_DWORD *)this + 4) = v7;
    if ((*((_DWORD *)a2 + 7) & 4) == 0) {
      return;
    }
LABEL_7:
    int v5 = *((_DWORD *)a2 + 5);
    *((_DWORD *)this + 7) |= 4u;
    *((_DWORD *)this + 5) = v5;
  }
}

void sub_1C5B13C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C5B13C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C5B13C94(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterAccessoryInformation::~CommCenterAccessoryInformation(awd::metrics::CommCenterAccessoryInformation *this)
{
  *(void *)this = &unk_1F210D220;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(void *)this = &unk_1F210D220;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  void *v1;
  uint64_t vars8;

  *(void *)this = &unk_1F210D220;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);

  operator delete(v1);
}

uint64_t awd::metrics::CommCenterAccessoryInformation::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterAccessoryInformation::default_instance(awd::metrics::CommCenterAccessoryInformation *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = awd::metrics::CommCenterAccessoryInformation::default_instance_;
  if (!awd::metrics::CommCenterAccessoryInformation::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABM_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterAccessoryInformation::default_instance_;
  }
  return result;
}

void *awd::metrics::CommCenterAccessoryInformation::New(awd::metrics::CommCenterAccessoryInformation *this)
{
  uint64_t result = operator new(0x20uLL);
  void *result = &unk_1F210D220;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t awd::metrics::CommCenterAccessoryInformation::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 28))
  {
    *(void *)(this + 8) = 0;
    *(void *)(this + 16) = 0;
  }
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterAccessoryInformation::MergePartialFromCodedStream(awd::metrics::CommCenterAccessoryInformation *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  int v4 = (unint64_t *)((char *)this + 8);
  int v5 = (unsigned int *)((char *)this + 16);
  uint64_t v6 = (unsigned int *)((char *)this + 20);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v7 = (char *)*((void *)a2 + 1);
          if ((unint64_t)v7 >= *((void *)a2 + 2) || *v7 < 0)
          {
            TagFallbacunint64_t k = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
            *((_DWORD *)a2 + 8) = TagFallback;
            if (!TagFallback) {
              return 1;
            }
          }
          else
          {
            TagFallbacunint64_t k = *v7;
            *((_DWORD *)a2 + 8) = TagFallback;
            *((void *)a2 + 1) = v7 + 1;
            if (!TagFallback) {
              return 1;
            }
          }
          unsigned int v9 = TagFallback >> 3;
          if (TagFallback >> 3 != 1) {
            break;
          }
          int v10 = TagFallback & 7;
          if ((TagFallback & 7) != 0) {
            goto LABEL_22;
          }
          char v13 = (char *)*((void *)a2 + 1);
          unint64_t v11 = *((void *)a2 + 2);
          if ((unint64_t)v13 >= v11 || *v13 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
            if (!result) {
              return result;
            }
            uint64_t v14 = (unsigned char *)*((void *)a2 + 1);
            unint64_t v11 = *((void *)a2 + 2);
            *((_DWORD *)this + 7) |= 1u;
            if ((unint64_t)v14 < v11) {
              goto LABEL_27;
            }
          }
          else
          {
            unint64_t *v4 = *v13;
            uint64_t v14 = v13 + 1;
            *((void *)a2 + 1) = v14;
            *((_DWORD *)this + 7) |= 1u;
            if ((unint64_t)v14 < v11)
            {
LABEL_27:
              if (*v14 == 16)
              {
                unint64_t v15 = v14 + 1;
                *((void *)a2 + 1) = v15;
                if ((unint64_t)v15 < v11) {
                  goto LABEL_29;
                }
LABEL_32:
                uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
                if (!result) {
                  return result;
                }
                int v16 = (unsigned char *)*((void *)a2 + 1);
                unint64_t v11 = *((void *)a2 + 2);
                *((_DWORD *)this + 7) |= 2u;
                if ((unint64_t)v16 < v11) {
                  goto LABEL_34;
                }
              }
            }
          }
        }
        if (v9 != 2) {
          break;
        }
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_22;
        }
        unint64_t v15 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v15 >= v11) {
          goto LABEL_32;
        }
LABEL_29:
        if ((char)*v15 < 0) {
          goto LABEL_32;
        }
        *int v5 = *v15;
        int v16 = v15 + 1;
        *((void *)a2 + 1) = v16;
        *((_DWORD *)this + 7) |= 2u;
        if ((unint64_t)v16 < v11)
        {
LABEL_34:
          if (*v16 == 24)
          {
            int v12 = v16 + 1;
            *((void *)a2 + 1) = v12;
            if ((unint64_t)v12 < v11) {
              goto LABEL_36;
            }
LABEL_39:
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
            if (!result) {
              return result;
            }
            uint64_t v19 = *((void *)a2 + 1);
            uint64_t v18 = *((void *)a2 + 2);
            *((_DWORD *)this + 7) |= 4u;
            if (v19 == v18) {
              goto LABEL_41;
            }
          }
        }
      }
      if (v9 != 3) {
        break;
      }
      int v10 = TagFallback & 7;
      if ((TagFallback & 7) != 0) {
        goto LABEL_22;
      }
      int v12 = (unsigned __int8 *)*((void *)a2 + 1);
      unint64_t v11 = *((void *)a2 + 2);
      if ((unint64_t)v12 >= v11) {
        goto LABEL_39;
      }
LABEL_36:
      if ((char)*v12 < 0) {
        goto LABEL_39;
      }
      unsigned int *v6 = *v12;
      int v17 = (char *)(v12 + 1);
      *((void *)a2 + 1) = v17;
      *((_DWORD *)this + 7) |= 4u;
      if (v17 == (char *)v11)
      {
LABEL_41:
        if (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10))
        {
          *((_DWORD *)a2 + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)a2 + 36) = 1;
          return result;
        }
      }
    }
    int v10 = TagFallback & 7;
LABEL_22:
    if (v10 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
  }
    }
}

uint64_t awd::metrics::CommCenterAccessoryInformation::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int v5 = (unsigned int *)this;
  unsigned int v6 = *(_DWORD *)(this + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[4], (uint64_t)a2, a4);
    if ((v5[7] & 4) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 8), (uint64_t)a2, a4);
  unsigned int v6 = v5[7];
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return this;
  }
LABEL_7:
  uint64_t v7 = v5[5];

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, (uint64_t)a2, a4);
}

uint64_t awd::metrics::CommCenterAccessoryInformation::ByteSize(awd::metrics::CommCenterAccessoryInformation *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 28);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
LABEL_6:
    *((_DWORD *)this + 6) = v3;
    return v3;
  }
  if (*((unsigned char *)this + 28))
  {
    uint64_t v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 1))
       + 1;
    int v2 = *((_DWORD *)this + 7);
    if ((v2 & 2) == 0) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 28) & 2) == 0) {
      goto LABEL_12;
    }
  }
  int v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
  if (v5 >= 0x80)
  {
    int v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
    int v2 = *((_DWORD *)this + 7);
  }
  else
  {
    int v6 = 2;
  }
  uint64_t v3 = (v6 + v3);
LABEL_12:
  if ((v2 & 4) == 0) {
    goto LABEL_6;
  }
  uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
  if (v7 >= 0x80) {
    uint64_t v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7)
  }
       + 1
       + v3;
  else {
    uint64_t v8 = (v3 + 2);
  }
  *((_DWORD *)this + 6) = v8;
  return v8;
}

void awd::metrics::CommCenterAccessoryInformation::CopyFrom(awd::metrics::CommCenterAccessoryInformation *this, const awd::metrics::CommCenterAccessoryInformation *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterAccessoryInformation *))(*(void *)this + 32))(this);
    awd::metrics::CommCenterAccessoryInformation::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterAccessoryInformation::IsInitialized(awd::metrics::CommCenterAccessoryInformation *this)
{
  return 1;
}

uint64_t awd::metrics::CommCenterAccessoryInformation::Swap(uint64_t this, awd::metrics::CommCenterAccessoryInformation *a2)
{
  if (a2 != (awd::metrics::CommCenterAccessoryInformation *)this)
  {
    uint64_t v2 = *(void *)(this + 8);
    *(void *)(this + 8) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 20);
    *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 28);
    *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v2;
  }
  return this;
}

double awd::metrics::CommCenterAccessoryInformation::GetTypeName@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (char *)operator new(0x30uLL);
  *(void *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_1C5BCAD90;
  strcpy(v3, "awd.metrics.CommCenterAccessoryInformation");
  return *(double *)"ssoryInformation";
}

double awd::metrics::MetricsCCBasebandReset::SharedCtor(awd::metrics::MetricsCCBasebandReset *this)
{
  uint64_t v1 = MEMORY[0x1E4FBA920];
  *((void *)this + 1) = MEMORY[0x1E4FBA920];
  *((_WORD *)this + 20) = 0;
  double result = 0.0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = v1;
  *((void *)this + 4) = v1;
  *((_DWORD *)this + 11) = 0;
  *((void *)this + 6) = v1;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  return result;
}

awd::metrics::MetricsCCBasebandReset *awd::metrics::MetricsCCBasebandReset::MetricsCCBasebandReset(awd::metrics::MetricsCCBasebandReset *this, const awd::metrics::MetricsCCBasebandReset *a2)
{
  uint64_t v3 = MEMORY[0x1E4FBA920];
  *(void *)this = &unk_1F210D298;
  *((void *)this + 1) = v3;
  *((_WORD *)this + 20) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = v3;
  *((void *)this + 4) = v3;
  *((_DWORD *)this + 11) = 0;
  *((void *)this + 6) = v3;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  awd::metrics::MetricsCCBasebandReset::MergeFrom(this, a2);
  return this;
}

{
  uint64_t v3;

  uint64_t v3 = MEMORY[0x1E4FBA920];
  *(void *)this = &unk_1F210D298;
  *((void *)this + 1) = v3;
  *((_WORD *)this + 20) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = v3;
  *((void *)this + 4) = v3;
  *((_DWORD *)this + 11) = 0;
  *((void *)this + 6) = v3;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  awd::metrics::MetricsCCBasebandReset::MergeFrom(this, a2);
  return this;
}

void sub_1C5B143A8(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::MetricsCCBasebandReset::MergeFrom(awd::metrics::MetricsCCBasebandReset *this, const awd::metrics::MetricsCCBasebandReset *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v37);
  }
  int v4 = *((_DWORD *)a2 + 17);
  if (!(_BYTE)v4) {
    goto LABEL_76;
  }
  int v5 = (void **)MEMORY[0x1E4FBA920];
  if ((v4 & 1) == 0) {
    goto LABEL_19;
  }
  int v6 = (void **)*((void *)a2 + 1);
  *((_DWORD *)this + 17) |= 1u;
  uint64_t v7 = (void **)*((void *)this + 1);
  if (v7 == v5)
  {
    uint64_t v7 = (void **)operator new(0x18uLL);
    v7[1] = 0;
    v7[2] = 0;
    wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7 = 0;
    *((void *)this + 1) = v7;
  }
  if (v7 == v6)
  {
LABEL_19:
    int v10 = *((_DWORD *)a2 + 17);
    if ((v10 & 2) != 0) {
      goto LABEL_25;
    }
    goto LABEL_20;
  }
  char v8 = *((unsigned char *)v6 + 23);
  if (*((char *)v7 + 23) < 0)
  {
    if (v8 >= 0) {
      unint64_t v11 = v6;
    }
    else {
      unint64_t v11 = *v6;
    }
    if (v8 >= 0) {
      size_t v12 = *((unsigned __int8 *)v6 + 23);
    }
    else {
      size_t v12 = (size_t)v6[1];
    }
    std::string::__assign_no_alias<false>(v7, v11, v12);
    goto LABEL_19;
  }
  if ((*((unsigned char *)v6 + 23) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v7, *v6, (size_t)v6[1]);
    int v10 = *((_DWORD *)a2 + 17);
    if ((v10 & 2) != 0) {
      goto LABEL_25;
    }
LABEL_20:
    if ((v10 & 4) != 0) {
      goto LABEL_26;
    }
LABEL_21:
    if ((v10 & 8) != 0) {
      goto LABEL_27;
    }
    goto LABEL_22;
  }
  long long v9 = *(_OWORD *)v6;
  v7[2] = v6[2];
  *(_OWORD *)uint64_t v7 = v9;
  int v10 = *((_DWORD *)a2 + 17);
  if ((v10 & 2) == 0) {
    goto LABEL_20;
  }
LABEL_25:
  char v13 = *((unsigned char *)a2 + 40);
  *((_DWORD *)this + 17) |= 2u;
  *((unsigned char *)this + 40) = v13;
  int v10 = *((_DWORD *)a2 + 17);
  if ((v10 & 4) == 0) {
    goto LABEL_21;
  }
LABEL_26:
  int v14 = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 17) |= 4u;
  *((_DWORD *)this + 4) = v14;
  int v10 = *((_DWORD *)a2 + 17);
  if ((v10 & 8) != 0)
  {
LABEL_27:
    int v15 = *((_DWORD *)a2 + 5);
    *((_DWORD *)this + 17) |= 8u;
    *((_DWORD *)this + 5) = v15;
    if ((*((_DWORD *)a2 + 17) & 0x10) == 0) {
      goto LABEL_42;
    }
    goto LABEL_28;
  }
LABEL_22:
  if ((v10 & 0x10) == 0) {
    goto LABEL_42;
  }
LABEL_28:
  int v16 = (void **)*((void *)a2 + 3);
  *((_DWORD *)this + 17) |= 0x10u;
  int v17 = (void **)*((void *)this + 3);
  if (v17 == v5)
  {
    int v17 = (void **)operator new(0x18uLL);
    v17[1] = 0;
    void v17[2] = 0;
    *int v17 = 0;
    *((void *)this + 3) = v17;
  }
  if (v17 == v16)
  {
LABEL_42:
    if ((*((unsigned char *)a2 + 68) & 0x20) == 0) {
      goto LABEL_59;
    }
    goto LABEL_43;
  }
  char v18 = *((unsigned char *)v16 + 23);
  if (*((char *)v17 + 23) < 0)
  {
    if (v18 >= 0) {
      uint64_t v20 = v16;
    }
    else {
      uint64_t v20 = *v16;
    }
    if (v18 >= 0) {
      size_t v21 = *((unsigned __int8 *)v16 + 23);
    }
    else {
      size_t v21 = (size_t)v16[1];
    }
    std::string::__assign_no_alias<false>(v17, v20, v21);
    goto LABEL_42;
  }
  if ((*((unsigned char *)v16 + 23) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v17, *v16, (size_t)v16[1]);
    if ((*((unsigned char *)a2 + 68) & 0x20) == 0) {
      goto LABEL_59;
    }
  }
  else
  {
    long long v19 = *(_OWORD *)v16;
    void v17[2] = v16[2];
    *(_OWORD *)int v17 = v19;
    if ((*((unsigned char *)a2 + 68) & 0x20) == 0) {
      goto LABEL_59;
    }
  }
LABEL_43:
  int v22 = (void **)*((void *)a2 + 4);
  *((_DWORD *)this + 17) |= 0x20u;
  int v23 = (void **)*((void *)this + 4);
  if (v23 == v5)
  {
    int v23 = (void **)operator new(0x18uLL);
    v23[1] = 0;
    v23[2] = 0;
    void *v23 = 0;
    *((void *)this + 4) = v23;
  }
  if (v23 != v22)
  {
    char v24 = *((unsigned char *)v22 + 23);
    if (*((char *)v23 + 23) < 0)
    {
      if (v24 >= 0) {
        int v26 = v22;
      }
      else {
        int v26 = *v22;
      }
      if (v24 >= 0) {
        size_t v27 = *((unsigned __int8 *)v22 + 23);
      }
      else {
        size_t v27 = (size_t)v22[1];
      }
      std::string::__assign_no_alias<false>(v23, v26, v27);
    }
    else if ((*((unsigned char *)v22 + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v23, *v22, (size_t)v22[1]);
    }
    else
    {
      long long v25 = *(_OWORD *)v22;
      v23[2] = v22[2];
      *(_OWORD *)int v23 = v25;
    }
  }
LABEL_59:
  if ((*((unsigned char *)a2 + 68) & 0x40) == 0) {
    goto LABEL_74;
  }
  unsigned int v28 = (void **)*((void *)a2 + 6);
  *((_DWORD *)this + 17) |= 0x40u;
  xpc_object_t v29 = (void **)*((void *)this + 6);
  if (v29 == v5)
  {
    xpc_object_t v29 = (void **)operator new(0x18uLL);
    v29[1] = 0;
    v29[2] = 0;
    *xpc_object_t v29 = 0;
    *((void *)this + 6) = v29;
  }
  if (v29 == v28)
  {
LABEL_74:
    int v4 = *((_DWORD *)a2 + 17);
    if ((v4 & 0x80) == 0) {
      goto LABEL_76;
    }
    goto LABEL_75;
  }
  char v30 = *((unsigned char *)v28 + 23);
  if (*((char *)v29 + 23) < 0)
  {
    if (v30 >= 0) {
      uint64_t v32 = v28;
    }
    else {
      uint64_t v32 = *v28;
    }
    if (v30 >= 0) {
      size_t v33 = *((unsigned __int8 *)v28 + 23);
    }
    else {
      size_t v33 = (size_t)v28[1];
    }
    std::string::__assign_no_alias<false>(v29, v32, v33);
    goto LABEL_74;
  }
  if ((*((unsigned char *)v28 + 23) & 0x80) == 0)
  {
    long long v31 = *(_OWORD *)v28;
    v29[2] = v28[2];
    *(_OWORD *)xpc_object_t v29 = v31;
    int v4 = *((_DWORD *)a2 + 17);
    if ((v4 & 0x80) == 0) {
      goto LABEL_76;
    }
LABEL_75:
    int v34 = *((_DWORD *)a2 + 11);
    *((_DWORD *)this + 17) |= 0x80u;
    *((_DWORD *)this + 11) = v34;
    int v4 = *((_DWORD *)a2 + 17);
    goto LABEL_76;
  }
  std::string::__assign_no_alias<true>(v29, *v28, (size_t)v28[1]);
  int v4 = *((_DWORD *)a2 + 17);
  if ((v4 & 0x80) != 0) {
    goto LABEL_75;
  }
LABEL_76:
  if ((v4 & 0xFF00) != 0)
  {
    if ((v4 & 0x100) != 0)
    {
      uint64_t v35 = *((void *)a2 + 7);
      *((_DWORD *)this + 17) |= 0x100u;
      *((void *)this + 7) = v35;
      int v4 = *((_DWORD *)a2 + 17);
    }
    if ((v4 & 0x200) != 0)
    {
      char v36 = *((unsigned char *)a2 + 41);
      *((_DWORD *)this + 17) |= 0x200u;
      *((unsigned char *)this + 41) = v36;
    }
  }
}

void sub_1C5B14750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C5B14764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C5B147E0(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::MetricsCCBasebandReset::~MetricsCCBasebandReset(awd::metrics::MetricsCCBasebandReset *this)
{
  *(void *)this = &unk_1F210D298;
  awd::metrics::MetricsCCBasebandReset::SharedDtor(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F210D298;
  awd::metrics::MetricsCCBasebandReset::SharedDtor(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F210D298;
  awd::metrics::MetricsCCBasebandReset::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);

  operator delete(v2);
}

void awd::metrics::MetricsCCBasebandReset::SharedDtor(awd::metrics::MetricsCCBasebandReset *this)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = MEMORY[0x1E4FBA920];
  if (v2 == MEMORY[0x1E4FBA920] || v2 == 0)
  {
    uint64_t v5 = *((void *)this + 3);
    if (v5 != MEMORY[0x1E4FBA920] && v5 != 0) {
      goto LABEL_28;
    }
LABEL_11:
    uint64_t v7 = *((void *)this + 4);
    if (v7 != v3 && v7 != 0) {
      goto LABEL_34;
    }
LABEL_16:
    uint64_t v9 = *((void *)this + 6);
    if (v9 == v3 || v9 == 0) {
      return;
    }
    goto LABEL_40;
  }
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  operator delete((void *)v2);
  uint64_t v5 = *((void *)this + 3);
  if (v5 == v3 || v5 == 0) {
    goto LABEL_11;
  }
LABEL_28:
  if (*(char *)(v5 + 23) < 0) {
    operator delete(*(void **)v5);
  }
  operator delete((void *)v5);
  uint64_t v7 = *((void *)this + 4);
  if (v7 == v3 || v7 == 0) {
    goto LABEL_16;
  }
LABEL_34:
  if (*(char *)(v7 + 23) < 0) {
    operator delete(*(void **)v7);
  }
  operator delete((void *)v7);
  uint64_t v9 = *((void *)this + 6);
  if (v9 != v3 && v9 != 0)
  {
LABEL_40:
    if (*(char *)(v9 + 23) < 0)
    {
      operator delete(*(void **)v9);
      int v14 = (void *)v9;
    }
    else
    {
      int v14 = (void *)v9;
    }
    operator delete(v14);
  }
}

uint64_t awd::metrics::MetricsCCBasebandReset::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 64) = a2;
  return this;
}

uint64_t awd::metrics::MetricsCCBasebandReset::default_instance(awd::metrics::MetricsCCBasebandReset *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = awd::metrics::MetricsCCBasebandReset::default_instance_;
  if (!awd::metrics::MetricsCCBasebandReset::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABM_2eproto(0, a2, a3, a4);
    return awd::metrics::MetricsCCBasebandReset::default_instance_;
  }
  return result;
}

double awd::metrics::MetricsCCBasebandReset::New(awd::metrics::MetricsCCBasebandReset *this)
{
  uint64_t v1 = operator new(0x48uLL);
  uint64_t v2 = MEMORY[0x1E4FBA920];
  *uint64_t v1 = &unk_1F210D298;
  v1[1] = v2;
  *((_WORD *)v1 + 20) = 0;
  double result = 0.0;
  v1[2] = 0;
  v1[3] = v2;
  v1[4] = v2;
  *((_DWORD *)v1 + 11) = 0;
  v1[6] = v2;
  v1[7] = 0;
  v1[8] = 0;
  return result;
}

uint64_t awd::metrics::MetricsCCBasebandReset::Clear(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 68);
  if ((_BYTE)v1)
  {
    uint64_t v2 = MEMORY[0x1E4FBA920];
    if (v1)
    {
      uint64_t v3 = *(void *)(this + 8);
      if (v3 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(unsigned char **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0;
          *(unsigned char *)(this + 40) = 0;
          *(void *)(this + 16) = 0;
          if ((*(unsigned char *)(this + 68) & 0x10) == 0) {
            goto LABEL_13;
          }
LABEL_7:
          uint64_t v4 = *(void *)(this + 24);
          if (v4 != v2)
          {
            if (*(char *)(v4 + 23) < 0)
            {
              **(unsigned char **)uint64_t v4 = 0;
              *(void *)(v4 + 8) = 0;
            }
            else
            {
              *(unsigned char *)uint64_t v4 = 0;
              *(unsigned char *)(v4 + 23) = 0;
            }
          }
LABEL_13:
          if ((*(unsigned char *)(this + 68) & 0x20) != 0)
          {
            uint64_t v5 = *(void *)(this + 32);
            if (v5 != v2)
            {
              if (*(char *)(v5 + 23) < 0)
              {
                **(unsigned char **)uint64_t v5 = 0;
                *(void *)(v5 + 8) = 0;
                if ((*(unsigned char *)(this + 68) & 0x40) != 0)
                {
LABEL_18:
                  uint64_t v6 = *(void *)(this + 48);
                  if (v6 != v2)
                  {
                    if (*(char *)(v6 + 23) < 0)
                    {
                      **(unsigned char **)uint64_t v6 = 0;
                      *(void *)(v6 + 8) = 0;
                    }
                    else
                    {
                      *(unsigned char *)uint64_t v6 = 0;
                      *(unsigned char *)(v6 + 23) = 0;
                    }
                  }
                }
LABEL_24:
                *(_DWORD *)(this + 44) = 0;
                int v1 = *(_DWORD *)(this + 68);
                goto LABEL_25;
              }
              *(unsigned char *)uint64_t v5 = 0;
              *(unsigned char *)(v5 + 23) = 0;
            }
          }
          if ((*(unsigned char *)(this + 68) & 0x40) != 0) {
            goto LABEL_18;
          }
          goto LABEL_24;
        }
        *(unsigned char *)uint64_t v3 = 0;
        *(unsigned char *)(v3 + 23) = 0;
      }
    }
    *(unsigned char *)(this + 40) = 0;
    *(void *)(this + 16) = 0;
    if ((*(unsigned char *)(this + 68) & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_7;
  }
LABEL_25:
  if ((v1 & 0xFF00) != 0)
  {
    *(void *)(this + 56) = 0;
    *(unsigned char *)(this + 41) = 0;
  }
  *(_DWORD *)(this + 68) = 0;
  return this;
}

uint64_t awd::metrics::MetricsCCBasebandReset::MergePartialFromCodedStream(awd::metrics::MetricsCCBasebandReset *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4 = (unsigned int *)((char *)this + 16);
  uint64_t v5 = (unint64_t *)((char *)this + 56);
  uint64_t v6 = (unsigned int *)((char *)this + 44);
  uint64_t v7 = (unsigned int *)((char *)this + 20);
  uint64_t v8 = MEMORY[0x1E4FBA920];
  while (2)
  {
    uint64_t v9 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v9 >= *((void *)a2 + 2) || *v9 < 0)
    {
      TagFallbacunint64_t k = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      TagFallbacunint64_t k = *v9;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v9 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_60;
        }
        *((_DWORD *)this + 17) |= 1u;
        if (*((void *)this + 1) == v8)
        {
          size_t v12 = operator new(0x18uLL);
          v12[1] = 0;
          v12[2] = 0;
          void *v12 = 0;
          *((void *)this + 1) = v12;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (result)
        {
          int v15 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v14 = *((void *)a2 + 2);
          if ((unint64_t)v15 < v14 && *v15 == 16)
          {
            int v16 = v15 + 1;
            *((void *)a2 + 1) = v16;
            goto LABEL_18;
          }
          continue;
        }
        return result;
      case 2u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_60;
        }
        int v16 = (char *)*((void *)a2 + 1);
        unint64_t v14 = *((void *)a2 + 2);
LABEL_18:
        unsigned int v44 = -1431655766;
        if ((unint64_t)v16 < v14 && (*v16 & 0x80000000) == 0)
        {
          unsigned int v17 = *v16;
          char v18 = v16 + 1;
          *((void *)a2 + 1) = v18;
          goto LABEL_92;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v44);
        if (result)
        {
          unsigned int v17 = v44;
          char v18 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v14 = *((void *)a2 + 2);
LABEL_92:
          *((unsigned char *)this + 40) = v17 != 0;
          *((_DWORD *)this + 17) |= 2u;
          if ((unint64_t)v18 >= v14 || *v18 != 24) {
            continue;
          }
          long long v19 = v18 + 1;
          *((void *)a2 + 1) = v19;
          if ((unint64_t)v19 >= v14) {
            goto LABEL_98;
          }
          goto LABEL_95;
        }
        break;
      case 3u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_60;
        }
        long long v19 = (char *)*((void *)a2 + 1);
        unint64_t v14 = *((void *)a2 + 2);
        if ((unint64_t)v19 >= v14) {
          goto LABEL_98;
        }
LABEL_95:
        if (*v19 < 0)
        {
LABEL_98:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!result) {
            return result;
          }
          unsigned int v40 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v42 = *((void *)a2 + 2);
          int v41 = *((_DWORD *)this + 17) | 4;
          *((_DWORD *)this + 17) = v41;
          if ((unint64_t)v40 >= v42) {
            continue;
          }
        }
        else
        {
          unsigned int *v4 = *v19;
          unsigned int v40 = v19 + 1;
          *((void *)a2 + 1) = v40;
          int v41 = *((_DWORD *)this + 17) | 4;
          *((_DWORD *)this + 17) = v41;
          if ((unint64_t)v40 >= v14) {
            continue;
          }
        }
        if (*v40 != 34) {
          continue;
        }
        *((void *)a2 + 1) = v40 + 1;
        *((_DWORD *)this + 17) = v41 | 0x10;
        if (*((void *)this + 3) == v8)
        {
LABEL_26:
          uint64_t v20 = operator new(0x18uLL);
          v20[1] = 0;
          v20[2] = 0;
          void *v20 = 0;
          *((void *)this + 3) = v20;
        }
LABEL_27:
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        int v22 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        if ((unint64_t)v22 >= v21 || *v22 != 40) {
          continue;
        }
        int v23 = v22 + 1;
        *((void *)a2 + 1) = v23;
        if ((unint64_t)v23 >= v21) {
          goto LABEL_72;
        }
LABEL_34:
        if (*v23 < 0)
        {
LABEL_72:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v5);
          if (!result) {
            return result;
          }
          char v24 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v21 = *((void *)a2 + 2);
          *((_DWORD *)this + 17) |= 0x100u;
          if ((unint64_t)v24 >= v21) {
            continue;
          }
        }
        else
        {
          *uint64_t v5 = *v23;
          char v24 = v23 + 1;
          *((void *)a2 + 1) = v24;
          *((_DWORD *)this + 17) |= 0x100u;
          if ((unint64_t)v24 >= v21) {
            continue;
          }
        }
        if (*v24 != 48) {
          continue;
        }
        long long v25 = v24 + 1;
        *((void *)a2 + 1) = v25;
LABEL_76:
        unsigned int v43 = -1431655766;
        if ((unint64_t)v25 >= v21 || *v25 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v43);
          if (!result) {
            return result;
          }
          unsigned int v35 = v43;
          char v36 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v21 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v35 = *v25;
          char v36 = v25 + 1;
          *((void *)a2 + 1) = v36;
        }
        *((unsigned char *)this + 41) = v35 != 0;
        int v39 = *((_DWORD *)this + 17) | 0x200;
        *((_DWORD *)this + 17) = v39;
        if ((unint64_t)v36 >= v21 || *v36 != 58) {
          continue;
        }
        *((void *)a2 + 1) = v36 + 1;
        *((_DWORD *)this + 17) = v39 | 0x20;
        if (*((void *)this + 4) == v8)
        {
LABEL_41:
          int v26 = operator new(0x18uLL);
          v26[1] = 0;
          v26[2] = 0;
          void *v26 = 0;
          *((void *)this + 4) = v26;
        }
LABEL_42:
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        size_t v27 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v27 >= *((void *)a2 + 2) || *v27 != 66) {
          continue;
        }
        *((void *)a2 + 1) = v27 + 1;
LABEL_47:
        *((_DWORD *)this + 17) |= 0x40u;
        if (*((void *)this + 6) == v8)
        {
          unsigned int v28 = operator new(0x18uLL);
          v28[1] = 0;
          v28[2] = 0;
          *unsigned int v28 = 0;
          *((void *)this + 6) = v28;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        char v30 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v29 = *((void *)a2 + 2);
        if ((unint64_t)v30 >= v29 || *v30 != 72) {
          continue;
        }
        long long v31 = v30 + 1;
        *((void *)a2 + 1) = v31;
        if ((unint64_t)v31 >= v29) {
          goto LABEL_64;
        }
LABEL_56:
        if (*v31 < 0)
        {
LABEL_64:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!result) {
            return result;
          }
          uint64_t v32 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v29 = *((void *)a2 + 2);
          *((_DWORD *)this + 17) |= 0x80u;
          if ((unint64_t)v32 >= v29) {
            continue;
          }
        }
        else
        {
          unsigned int *v6 = *v31;
          uint64_t v32 = v31 + 1;
          *((void *)a2 + 1) = v32;
          *((_DWORD *)this + 17) |= 0x80u;
          if ((unint64_t)v32 >= v29) {
            continue;
          }
        }
        if (*v32 != 80) {
          continue;
        }
        size_t v33 = v32 + 1;
        *((void *)a2 + 1) = v33;
LABEL_68:
        if ((unint64_t)v33 >= v29 || *v33 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!result) {
            return result;
          }
          uint64_t v38 = *((void *)a2 + 1);
          uint64_t v37 = *((void *)a2 + 2);
          *((_DWORD *)this + 17) |= 8u;
          if (v38 != v37) {
            continue;
          }
        }
        else
        {
          unsigned int *v7 = *v33;
          int v34 = (unsigned __int8 *)(v33 + 1);
          *((void *)a2 + 1) = v34;
          *((_DWORD *)this + 17) |= 8u;
          if (v34 != (unsigned __int8 *)v29) {
            continue;
          }
        }
        if (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10))
        {
          *((_DWORD *)a2 + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)a2 + 36) = 1;
          return result;
        }
        continue;
      case 4u:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_60;
        }
        *((_DWORD *)this + 17) |= 0x10u;
        if (*((void *)this + 3) == v8) {
          goto LABEL_26;
        }
        goto LABEL_27;
      case 5u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_60;
        }
        int v23 = (char *)*((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        if ((unint64_t)v23 < v21) {
          goto LABEL_34;
        }
        goto LABEL_72;
      case 6u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_60;
        }
        long long v25 = (char *)*((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        goto LABEL_76;
      case 7u:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_60;
        }
        *((_DWORD *)this + 17) |= 0x20u;
        if (*((void *)this + 4) == v8) {
          goto LABEL_41;
        }
        goto LABEL_42;
      case 8u:
        int v11 = TagFallback & 7;
        if (v11 == 2) {
          goto LABEL_47;
        }
        goto LABEL_60;
      case 9u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_60;
        }
        long long v31 = (char *)*((void *)a2 + 1);
        unint64_t v29 = *((void *)a2 + 2);
        if ((unint64_t)v31 < v29) {
          goto LABEL_56;
        }
        goto LABEL_64;
      case 0xAu:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_60;
        }
        size_t v33 = (char *)*((void *)a2 + 1);
        unint64_t v29 = *((void *)a2 + 2);
        goto LABEL_68;
      default:
        int v11 = TagFallback & 7;
LABEL_60:
        if (v11 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t awd::metrics::MetricsCCBasebandReset::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 68);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
    int v6 = *(_DWORD *)(v5 + 68);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 40), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned int *)(v5 + 16), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 0x10) == 0)
  {
LABEL_5:
    if ((v6 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 0x100) == 0)
  {
LABEL_6:
    if ((v6 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(void *)(v5 + 56), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 0x200) == 0)
  {
LABEL_7:
    if ((v6 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned __int8 *)(v5 + 41), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 0x20) == 0)
  {
LABEL_8:
    if ((v6 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 0x40) == 0)
  {
LABEL_9:
    if ((v6 & 0x80) == 0) {
      goto LABEL_10;
    }
LABEL_20:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned int *)(v5 + 44), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 68) & 8) == 0) {
      return this;
    }
    goto LABEL_21;
  }
LABEL_19:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 0x80) != 0) {
    goto LABEL_20;
  }
LABEL_10:
  if ((v6 & 8) == 0) {
    return this;
  }
LABEL_21:
  uint64_t v7 = *(unsigned int *)(v5 + 20);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, v7, (uint64_t)a2, a4);
}

uint64_t awd::metrics::MetricsCCBasebandReset::ByteSize(awd::metrics::MetricsCCBasebandReset *this)
{
  int v2 = *((_DWORD *)this + 17);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
    if ((v2 & 0xFF00) == 0) {
      goto LABEL_73;
    }
    goto LABEL_68;
  }
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) != 0) {
      uint64_t v3 = 2;
    }
    else {
      uint64_t v3 = 0;
    }
    if ((v2 & 4) == 0) {
      goto LABEL_26;
    }
LABEL_22:
    size_t v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
    if (v12 >= 0x80)
    {
      int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12) + 1;
      int v2 = *((_DWORD *)this + 17);
    }
    else
    {
      int v13 = 2;
    }
    uint64_t v3 = (v13 + v3);
    goto LABEL_26;
  }
  uint64_t v4 = *((void *)this + 1);
  int v5 = *(unsigned __int8 *)(v4 + 23);
  char v6 = v5;
  uint64_t v7 = *(void *)(v4 + 8);
  if ((v5 & 0x80u) == 0) {
    unint64_t v8 = *(unsigned __int8 *)(v4 + 23);
  }
  else {
    unint64_t v8 = v7;
  }
  if (v8 >= 0x80)
  {
    int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8);
    int v5 = *(unsigned __int8 *)(v4 + 23);
    uint64_t v7 = *(void *)(v4 + 8);
    int v9 = v10 + 1;
    int v2 = *((_DWORD *)this + 17);
    char v6 = *(unsigned char *)(v4 + 23);
  }
  else
  {
    int v9 = 2;
  }
  if (v6 < 0) {
    int v5 = v7;
  }
  unsigned int v11 = v9 + v5;
  if ((v2 & 2) != 0) {
    uint64_t v3 = v11 + 2;
  }
  else {
    uint64_t v3 = v11;
  }
  if ((v2 & 4) != 0) {
    goto LABEL_22;
  }
LABEL_26:
  if ((v2 & 8) != 0)
  {
    unint64_t v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
    if (v14 >= 0x80)
    {
      int v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14);
      int v2 = *((_DWORD *)this + 17);
      uint64_t v3 = (v15 + 1 + v3);
      if ((v2 & 0x10) != 0) {
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v3 = (v3 + 2);
      if ((v2 & 0x10) != 0) {
        goto LABEL_37;
      }
    }
LABEL_28:
    if ((v2 & 0x20) == 0) {
      goto LABEL_29;
    }
    goto LABEL_46;
  }
  if ((v2 & 0x10) == 0) {
    goto LABEL_28;
  }
LABEL_37:
  uint64_t v16 = *((void *)this + 3);
  int v17 = *(unsigned __int8 *)(v16 + 23);
  char v18 = v17;
  uint64_t v19 = *(void *)(v16 + 8);
  if ((v17 & 0x80u) == 0) {
    unint64_t v20 = *(unsigned __int8 *)(v16 + 23);
  }
  else {
    unint64_t v20 = v19;
  }
  if (v20 >= 0x80)
  {
    int v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v20);
    int v17 = *(unsigned __int8 *)(v16 + 23);
    uint64_t v19 = *(void *)(v16 + 8);
    int v2 = *((_DWORD *)this + 17);
    char v18 = *(unsigned char *)(v16 + 23);
  }
  else
  {
    int v21 = 1;
  }
  if (v18 < 0) {
    int v17 = v19;
  }
  uint64_t v3 = (v3 + v21 + v17 + 1);
  if ((v2 & 0x20) == 0)
  {
LABEL_29:
    if ((v2 & 0x40) == 0) {
      goto LABEL_30;
    }
    goto LABEL_55;
  }
LABEL_46:
  uint64_t v22 = *((void *)this + 4);
  int v23 = *(unsigned __int8 *)(v22 + 23);
  char v24 = v23;
  uint64_t v25 = *(void *)(v22 + 8);
  if ((v23 & 0x80u) == 0) {
    unint64_t v26 = *(unsigned __int8 *)(v22 + 23);
  }
  else {
    unint64_t v26 = v25;
  }
  if (v26 >= 0x80)
  {
    int v27 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v26);
    int v23 = *(unsigned __int8 *)(v22 + 23);
    uint64_t v25 = *(void *)(v22 + 8);
    int v2 = *((_DWORD *)this + 17);
    char v24 = *(unsigned char *)(v22 + 23);
  }
  else
  {
    int v27 = 1;
  }
  if (v24 < 0) {
    int v23 = v25;
  }
  uint64_t v3 = (v3 + v27 + v23 + 1);
  if ((v2 & 0x40) == 0)
  {
LABEL_30:
    if ((v2 & 0x80) == 0) {
      goto LABEL_31;
    }
    goto LABEL_64;
  }
LABEL_55:
  uint64_t v28 = *((void *)this + 6);
  int v29 = *(unsigned __int8 *)(v28 + 23);
  char v30 = v29;
  uint64_t v31 = *(void *)(v28 + 8);
  if ((v29 & 0x80u) == 0) {
    unint64_t v32 = *(unsigned __int8 *)(v28 + 23);
  }
  else {
    unint64_t v32 = v31;
  }
  if (v32 >= 0x80)
  {
    int v33 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v32);
    int v29 = *(unsigned __int8 *)(v28 + 23);
    uint64_t v31 = *(void *)(v28 + 8);
    int v2 = *((_DWORD *)this + 17);
    char v30 = *(unsigned char *)(v28 + 23);
  }
  else
  {
    int v33 = 1;
  }
  if (v30 < 0) {
    int v29 = v31;
  }
  uint64_t v3 = (v3 + v33 + v29 + 1);
  if ((v2 & 0x80) == 0)
  {
LABEL_31:
    if ((v2 & 0xFF00) == 0) {
      goto LABEL_73;
    }
    goto LABEL_68;
  }
LABEL_64:
  int v34 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 11);
  if (v34 >= 0x80)
  {
    int v35 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v34);
    int v2 = *((_DWORD *)this + 17);
    uint64_t v3 = (v35 + 1 + v3);
    if ((v2 & 0xFF00) == 0) {
      goto LABEL_73;
    }
  }
  else
  {
    uint64_t v3 = (v3 + 2);
    if ((v2 & 0xFF00) == 0) {
      goto LABEL_73;
    }
  }
LABEL_68:
  if ((v2 & 0x100) != 0)
  {
    LODWORD(v3) = v3
                + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                              + 7))
                + 1;
    int v2 = *((_DWORD *)this + 17);
  }
  if ((v2 & 0x200) != 0) {
    uint64_t v3 = (v3 + 2);
  }
  else {
    uint64_t v3 = v3;
  }
LABEL_73:
  *((_DWORD *)this + 16) = v3;
  return v3;
}

void awd::metrics::MetricsCCBasebandReset::CopyFrom(awd::metrics::MetricsCCBasebandReset *this, const awd::metrics::MetricsCCBasebandReset *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::MetricsCCBasebandReset *))(*(void *)this + 32))(this);
    awd::metrics::MetricsCCBasebandReset::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::MetricsCCBasebandReset::IsInitialized(awd::metrics::MetricsCCBasebandReset *this)
{
  return 1;
}

uint64_t awd::metrics::MetricsCCBasebandReset::Swap(uint64_t this, awd::metrics::MetricsCCBasebandReset *a2)
{
  if (a2 != (awd::metrics::MetricsCCBasebandReset *)this)
  {
    uint64_t v2 = *(void *)(this + 8);
    *(void *)(this + 8) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v2;
    LOBYTE(v2) = *(unsigned char *)(this + 40);
    *(unsigned char *)(this + 40) = *((unsigned char *)a2 + 40);
    *((unsigned char *)a2 + 40) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 20);
    *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v2;
    uint64_t v3 = *(void *)(this + 24);
    *(void *)(this + 24) = *((void *)a2 + 3);
    *((void *)a2 + 3) = v3;
    uint64_t v4 = *(void *)(this + 32);
    *(void *)(this + 32) = *((void *)a2 + 4);
    *((void *)a2 + 4) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 44);
    *(_DWORD *)(this + 44) = *((_DWORD *)a2 + 11);
    *((_DWORD *)a2 + 11) = v4;
    uint64_t v5 = *(void *)(this + 48);
    uint64_t v6 = *(void *)(this + 56);
    uint64_t v7 = *((void *)a2 + 7);
    *(void *)(this + 48) = *((void *)a2 + 6);
    *(void *)(this + 56) = v7;
    *((void *)a2 + 6) = v5;
    *((void *)a2 + 7) = v6;
    LOBYTE(v5) = *(unsigned char *)(this + 41);
    *(unsigned char *)(this + 41) = *((unsigned char *)a2 + 41);
    *((unsigned char *)a2 + 41) = v5;
    LODWORD(v5) = *(_DWORD *)(this + 68);
    *(_DWORD *)(this + 68) = *((_DWORD *)a2 + 17);
    *((_DWORD *)a2 + 17) = v5;
    LODWORD(v5) = *(_DWORD *)(this + 64);
    *(_DWORD *)(this + 64) = *((_DWORD *)a2 + 16);
    *((_DWORD *)a2 + 16) = v5;
  }
  return this;
}

char *awd::metrics::MetricsCCBasebandReset::GetTypeName@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1C5BC27D0;
  strcpy(result, "awd.metrics.MetricsCCBasebandReset");
  return result;
}

uint64_t awd::metrics::CommCenterBasebandBootTime::GetCachedSize(awd::metrics::CommCenterBasebandBootTime *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t awd::metrics::CrashReasonType::GetCachedSize(awd::metrics::CrashReasonType *this)
{
  return *((unsigned int *)this + 7);
}

uint64_t awd::metrics::CommCenterBasebanCrash::GetCachedSize(awd::metrics::CommCenterBasebanCrash *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t awd::metrics::CommCenterBasebandTrace::GetCachedSize(awd::metrics::CommCenterBasebandTrace *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t awd::metrics::CommCenterNVMSync::GetCachedSize(awd::metrics::CommCenterNVMSync *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t awd::metrics::CommCenterAccessoryInformation::GetCachedSize(awd::metrics::CommCenterAccessoryInformation *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t awd::metrics::MetricsCCBasebandReset::GetCachedSize(awd::metrics::MetricsCCBasebandReset *this)
{
  return *((unsigned int *)this + 16);
}

void WiFiManager::create(WiFiManager *this@<X0>, WiFiManager **a2@<X8>)
{
  uint64_t v5 = (WiFiManager *)operator new(0x40uLL);
  WiFiManager::WiFiManager(v5, (const char *)this);
  uint64_t v6 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6->__shared_owners_ = 0;
  uint64_t p_shared_owners = &v6->__shared_owners_;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210D3E8;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  *(void *)std::string buf = 0;
  unint64_t v8 = (std::__shared_weak_count *)*((void *)v5 + 2);
  if (!v8)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v5 + 1) = v5;
    *((void *)v5 + 2) = v6;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v8->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v5 + 1) = v5;
    *((void *)v5 + 2) = v6;
    std::__shared_weak_count::__release_weak(v8);
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_6:
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_7:
  if (*(void *)buf)
  {
    WiFiManager::~WiFiManager(*(WiFiManager **)buf);
    operator delete(v9);
  }
  if (v5 && (WiFiManager::init(v5) & 1) != 0)
  {
    *a2 = v5;
    a2[1] = (WiFiManager *)v6;
    return;
  }
  int v10 = GetOsLogContext()[1];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_ERROR, "Failed to create WiFi Manager!", buf, 2u);
    *a2 = 0;
    a2[1] = 0;
    unsigned int v11 = v6;
    if (!v6) {
      return;
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    unsigned int v11 = v6;
    if (!v6) {
      return;
    }
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_1C5B159EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C5B15A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C5B15A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unique_ptr<WiFiManager>::~unique_ptr[abi:ne180100]((WiFiManager **)va);
  _Unwind_Resume(a1);
}

void sub_1C5B15A28(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t WiFiManager::init(WiFiManager *this)
{
  *((unsigned char *)this + 24) = 1;
  id v2 = objc_alloc_init(MEMORY[0x1E4F5E318]);
  *((void *)this + 4) = v2;
  if (v2)
  {
    [v2 activate];
    uint64_t v3 = *((void *)this + 1);
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3321888768;
    uint64_t v9[2] = ___ZN11WiFiManager4initEv_block_invoke;
    v9[3] = &__block_descriptor_56_e8_40c36_ZTSNSt3__18weak_ptrI11WiFiManagerEE_e18_v16__0__CWFEvent_8l;
    v9[4] = this;
    void v9[5] = v3;
    int v10 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    [*((id *)this + 4) setEventHandler:v9];
    uint64_t v8 = 0;
    uint64_t v5 = [*((id *)this + 4) startMonitoringEventType:1 error:&v8];
    if (v10) {
      std::__shared_weak_count::__release_weak(v10);
    }
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
    return v5;
  }
  else
  {
    uint64_t v7 = *(NSObject **)this;
    if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v8) = 0;
      _os_log_error_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_ERROR, "Failed to create WiFiManager interface", (uint8_t *)&v8, 2u);
    }
    return 0;
  }
}

void sub_1C5B15BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    if (!v16) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if (!v16)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v16);
  _Unwind_Resume(exception_object);
}

void WiFiManager::WiFiManager(WiFiManager *this, const char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
  p_dst = &__dst;
  if (v4) {
LABEL_8:
  }
    memcpy(p_dst, __s, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  int v9 = std::string::append(&__dst, ".", 1uLL);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  unsigned int v11 = std::string::append(&v15, "WiFiManager", 0xBuLL);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  int64_t v17 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (v17 >= 0) {
    int v13 = __p;
  }
  else {
    int v13 = (void **)__p[0];
  }
  ctu::OsLogLogger::OsLogLogger(this, "com.apple.telephony.abm", (const char *)v13);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_14;
    }
LABEL_17:
    operator delete(v15.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_15;
    }
LABEL_18:
    operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_15;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_17;
  }
LABEL_14:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_18;
  }
LABEL_15:
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 5) = 0;
}

void sub_1C5B15D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void WiFiManager::~WiFiManager(WiFiManager *this)
{
  uint64_t v2 = *((void *)this + 5);
  for (uint64_t i = *((void *)this + 6); i != v2; i -= 16)
  {
    size_t v4 = *(NSObject **)(i - 8);
    if (v4) {
      dispatch_release(v4);
    }
    std::string::size_type v5 = *(const void **)(i - 16);
    if (v5) {
      _Block_release(v5);
    }
  }
  *((void *)this + 6) = v2;
  [*((id *)this + 4) invalidate];
  uint64_t v6 = *((void *)this + 5);
  if (v6)
  {
    uint64_t v7 = *((void *)this + 6);
    uint64_t v8 = (void *)*((void *)this + 5);
    if (v7 != v6)
    {
      do
      {
        int v9 = *(NSObject **)(v7 - 8);
        if (v9) {
          dispatch_release(v9);
        }
        long long v10 = *(const void **)(v7 - 16);
        if (v10) {
          _Block_release(v10);
        }
        v7 -= 16;
      }
      while (v7 != v6);
      uint64_t v8 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v6;
    operator delete(v8);
  }
  unsigned int v11 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }

  JUMPOUT(0x1C8794100);
}

void ___ZN11WiFiManager4initEv_block_invoke(void *a1, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    std::string::size_type v5 = (os_log_t *)a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8 && [a2 type] == 1)
      {
        int v9 = *v5;
        if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long v10 = 0;
          _os_log_debug_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEBUG, "#D WiFiManager Power Change Event", v10, 2u);
        }
        WiFiManager::notifyClients((id *)v5);
      }
    }
  }
}

void WiFiManager::notifyClients(id *this)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int v2 = [this[4] powerOn];
  *((unsigned char *)this + 24) = v2;
  uint64_t v3 = *this;
  if (os_log_type_enabled((os_log_t)*this, OS_LOG_TYPE_DEFAULT))
  {
    size_t v4 = "Off";
    if (v2) {
      size_t v4 = "On";
    }
    LODWORD(v13) = 136315138;
    *(void *)((char *)&v13 + 4) = v4;
    _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Notifying WiFi Power: %s", (uint8_t *)&v13, 0xCu);
  }
  std::string::size_type v5 = (char *)this[5];
  uint64_t v6 = (char *)this[6];
  if (v5 != v6)
  {
    while (!*(void *)v5)
    {
      uint64_t v7 = 0;
      uint64_t v8 = *((void *)v5 + 1);
      if (v8) {
        goto LABEL_10;
      }
LABEL_11:
      char v9 = *((unsigned char *)this + 24);
      if (!v7)
      {
        unsigned int v11 = 0;
        *(void *)&long long v13 = MEMORY[0x1E4F143A8];
        *((void *)&v13 + 1) = 3321888768;
        unint64_t v14 = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_2;
        std::string v15 = &__block_descriptor_41_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE_e5_v8__0l;
LABEL_17:
        long long v12 = 0;
        goto LABEL_18;
      }
      long long v10 = _Block_copy(v7);
      unsigned int v11 = v10;
      *(void *)&long long v13 = MEMORY[0x1E4F143A8];
      *((void *)&v13 + 1) = 3321888768;
      unint64_t v14 = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_2;
      std::string v15 = &__block_descriptor_41_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE_e5_v8__0l;
      if (!v10) {
        goto LABEL_17;
      }
      long long v12 = _Block_copy(v10);
LABEL_18:
      aBlocunint64_t k = v12;
      char v17 = v9;
      dispatch_async(v8, &v13);
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (v11) {
        _Block_release(v11);
      }
      if (v8) {
        dispatch_release(v8);
      }
      if (v7) {
        _Block_release(v7);
      }
      v5 += 16;
      if (v5 == v6) {
        return;
      }
    }
    uint64_t v7 = _Block_copy(*(const void **)v5);
    uint64_t v8 = *((void *)v5 + 1);
    if (!v8) {
      goto LABEL_11;
    }
LABEL_10:
    dispatch_retain(v8);
    goto LABEL_11;
  }
}

void sub_1C5B161C4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11WiFiManagerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11WiFiManagerEE(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t WiFiManager::getWiFiState(WiFiManager *this)
{
  return *((unsigned __int8 *)this + 24);
}

void WiFiManager::registerCallback(WiFiManager *this, void **a2)
{
  size_t v4 = (void *)*((void *)this + 6);
  if ((unint64_t)v4 >= *((void *)this + 7))
  {
    uint64_t v7 = std::vector<dispatch::callback<void({block_pointer})(BOOL)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(BOOL)> const&>((void *)this + 5, (uint64_t)a2);
  }
  else
  {
    std::string::size_type v5 = *a2;
    if (*a2) {
      std::string::size_type v5 = _Block_copy(v5);
    }
    uint64_t v6 = a2[1];
    void *v4 = v5;
    v4[1] = v6;
    if (v6) {
      dispatch_retain(v6);
    }
    uint64_t v7 = v4 + 2;
  }
  *((void *)this + 6) = v7;

  WiFiManager::notifyClients((id *)this);
}

WiFiManager **std::unique_ptr<WiFiManager>::~unique_ptr[abi:ne180100](WiFiManager **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    WiFiManager::~WiFiManager(v2);
    operator delete(v3);
  }
  return a1;
}

void std::__shared_ptr_pointer<WiFiManager *,std::shared_ptr<WiFiManager>::__shared_ptr_default_delete<WiFiManager,WiFiManager>,std::allocator<WiFiManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<WiFiManager *,std::shared_ptr<WiFiManager>::__shared_ptr_default_delete<WiFiManager,WiFiManager>,std::allocator<WiFiManager>>::__on_zero_shared(uint64_t a1)
{
  int v1 = *(WiFiManager **)(a1 + 24);
  if (v1)
  {
    WiFiManager::~WiFiManager(v1);
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<WiFiManager *,std::shared_ptr<WiFiManager>::__shared_ptr_default_delete<WiFiManager,WiFiManager>,std::allocator<WiFiManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C5BCAFAALL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C5BCAFAALL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C5BCAFAALL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C5BCAFAALL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void *ABMServerRegistryBuilder::create@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = operator new(0x28uLL);
  result[1] = 0;
  result[2] = 0;
  void *result = &unk_1F210D438;
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  result[3] = v6;
  result[4] = v5;
  *a2 = result + 3;
  a2[1] = result;
  return result;
}

__n128 ABMServerRegistryBuilder::ABMServerRegistryBuilder(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

{
  __n128 result;

  __n128 result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

void ABMServerRegistryBuilder::~ABMServerRegistryBuilder(ABMServerRegistryBuilder *this)
{
  int v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;

  int v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ABMServerRegistryBuilder::setupQMIServer(uint64_t a1, Registry **a2, uint64_t *a3)
{
  RegistryModel = (void **)Registry::getRegistryModel(*a2);
  uint64_t v6 = *RegistryModel;
  if (!**RegistryModel)
  {
    uint64_t v7 = *a3;
    if (*a3)
    {
      uint64_t v8 = a3[1];
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
      char v9 = (std::__shared_weak_count *)v6[1];
      void *v6 = v7;
      v6[1] = v8;
      if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    else
    {
      (*(void (**)(long long *__return_ptr))(**(void **)a1 + 8))(&v13);
      long long v10 = v13;
      long long v13 = 0uLL;
      unsigned int v11 = (std::__shared_weak_count *)v6[1];
      *(_OWORD *)uint64_t v6 = v10;
      if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      long long v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
      if (*((void *)&v13 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
}

void ABMServerRegistryBuilder::setupRouterServer(uint64_t a1, Registry **a2, uint64_t *a3)
{
  uint64_t RegistryModel = Registry::getRegistryModel(*a2);
  uint64_t v6 = *(void *)RegistryModel;
  if (!*(void *)(*(void *)RegistryModel + 16))
  {
    uint64_t v7 = *a3;
    if (*a3)
    {
      uint64_t v8 = a3[1];
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
      char v9 = *(std::__shared_weak_count **)(v6 + 24);
      *(void *)(v6 + 16) = v7;
      *(void *)(v6 + 24) = v8;
      if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    else
    {
      (*(void (**)(long long *__return_ptr))(**(void **)a1 + 16))(&v13);
      long long v10 = v13;
      long long v13 = 0uLL;
      unsigned int v11 = *(std::__shared_weak_count **)(v6 + 24);
      *(_OWORD *)(v6 + 16) = v10;
      if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      long long v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
      if (*((void *)&v13 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
}

void std::__shared_ptr_emplace<ABMServerRegistryBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210D438;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ABMServerRegistryBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210D438;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<ABMServerRegistryBuilder>::__on_zero_shared(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t support::fs::toString@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if (result == 1)
  {
    a2[23] = 9;
    strcpy(a2, "_wireless");
  }
  else if (result)
  {
    a2[23] = 0;
    *a2 = 0;
  }
  else
  {
    a2[23] = 6;
    strcpy(a2, "mobile");
  }
  return result;
}

uint64_t support::fs::updateOwner(const char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  v6.tv_seCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
  v6.tv_nseCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&__dst.st_blkstd::string::size_type size = v6;
  *(timespec *)__dst.st_qspare = v6;
  __dst.st_birthtimespeCC_SHA256_CTX c = v6;
  *(timespec *)&__dst.st_std::string::size_type size = v6;
  __dst.st_mtimespeCC_SHA256_CTX c = v6;
  __dst.st_ctimespeCC_SHA256_CTX c = v6;
  *(timespec *)&__dst.st_uid = v6;
  __dst.st_atimespeCC_SHA256_CTX c = v6;
  *(timespec *)&__dst.st_dev = v6;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (!stat(a1, &__dst))
  {
    char v17 = v5[23] >= 0 ? v5 : *(const char **)v5;
    uint64_t v18 = opendir(v17);
    if (v18)
    {
      uint64_t v19 = v18;
      unint64_t v20 = readdir(v18);
      closedir(v19);
      if (v20)
      {
        int v61 = 0;
        int v62 = 0;
        uint64_t v63 = 0;
        support::fs::readDir(v5, (uint64_t)&v61);
        int v21 = (char *)v61;
        long long v57 = v62;
        if (v61 == v62)
        {
          uint64_t updated = 0;
          if (v61) {
            goto LABEL_105;
          }
          return updated;
        }
        uint64_t v22 = (const std::string::value_type **)((char *)v61 + 24);
        while (1)
        {
          memset(&v60, 170, sizeof(v60));
          if (*((char *)v22 - 1) < 0)
          {
            std::string::__init_copy_ctor_external(&v60, *(v22 - 3), (std::string::size_type)*(v22 - 2));
          }
          else
          {
            long long v24 = *(_OWORD *)(v22 - 3);
            v60.__r_.__value_.__r.__words[2] = (std::string::size_type)*(v22 - 1);
            *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v24;
          }
          memset(&__p, 170, sizeof(__p));
          int v25 = v5[23];
          if (v25 >= 0) {
            size_t v26 = *((unsigned __int8 *)v5 + 23);
          }
          else {
            size_t v26 = *((void *)v5 + 1);
          }
          unint64_t v27 = v26 + 1;
          memset(&__dst, 170, 24);
          if (v26 + 1 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          if (v27 >= 0x17)
          {
            uint64_t v29 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v27 | 7) != 0x17) {
              uint64_t v29 = v27 | 7;
            }
            uint64_t v30 = v29 + 1;
            p_dst = (char *)operator new(v29 + 1);
            __dst.st_ino = v26 + 1;
            *(void *)&__dst.st_uid = v30 | 0x8000000000000000;
            *(void *)&__dst.st_dev = p_dst;
          }
          else
          {
            memset(&__dst, 0, 24);
            p_dst = (char *)&__dst;
            HIBYTE(__dst.st_gid) = v26 + 1;
            if (!v26) {
              goto LABEL_47;
            }
          }
          if (v25 >= 0) {
            uint64_t v31 = v5;
          }
          else {
            uint64_t v31 = *(const char **)v5;
          }
          memmove(p_dst, v31, v26);
LABEL_47:
          *(_WORD *)&p_dst[v26] = 47;
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v32 = &v60;
          }
          else {
            unint64_t v32 = (std::string *)v60.__r_.__value_.__r.__words[0];
          }
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v60.__r_.__value_.__l.__size_;
          }
          int v34 = std::string::append((std::string *)&__dst, (const std::string::value_type *)v32, size);
          long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v35;
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__dst.st_gid) < 0) {
            operator delete(*(void **)&__dst.st_dev);
          }
          std::string::size_type v36 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v36 = v60.__r_.__value_.__l.__size_;
          }
          if (v36 == 2)
          {
            uint64_t v38 = &v60;
            if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              uint64_t v38 = (std::string *)v60.__r_.__value_.__r.__words[0];
            }
            if (LOWORD(v38->__r_.__value_.__l.__data_) == 11822)
            {
LABEL_70:
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t p_p = &__p;
              }
              else {
                uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              size_t v42 = strlen((const char *)p_p);
              if (v42 > 0x7FFFFFFFFFFFFFF7) {
                std::string::__throw_length_error[abi:ne180100]();
              }
              __darwin_ino64_t v43 = v42;
              if (v42 >= 0x17)
              {
                uint64_t v45 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v42 | 7) != 0x17) {
                  uint64_t v45 = v42 | 7;
                }
                uint64_t v46 = v45 + 1;
                unsigned int v44 = operator new(v45 + 1);
                __dst.st_ino = v43;
                *(void *)&__dst.st_uid = v46 | 0x8000000000000000;
                *(void *)&__dst.st_dev = v44;
              }
              else
              {
                HIBYTE(__dst.st_gid) = v42;
                unsigned int v44 = &__dst;
                if (!v42)
                {
LABEL_81:
                  v44[v43] = 0;
                  int st_gid_high = SHIBYTE(__dst.st_gid);
                  xpc_object_t v48 = *(void **)&__dst.st_dev;
                  if ((__dst.st_gid & 0x80000000) == 0) {
                    uint64_t v49 = &__dst;
                  }
                  else {
                    uint64_t v49 = *(stat **)&__dst.st_dev;
                  }
                  uint64_t updated = chown((const char *)v49, a2, a3) == 0;
                  if (st_gid_high < 0)
                  {
                    CFIndex v50 = v48;
LABEL_86:
                    operator delete(v50);
                    goto LABEL_87;
                  }
                  goto LABEL_87;
                }
              }
              memmove(v44, p_p, v43);
              goto LABEL_81;
            }
          }
          else if (v36 == 1)
          {
            uint64_t v37 = &v60;
            if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              uint64_t v37 = (std::string *)v60.__r_.__value_.__r.__words[0];
            }
            if (v37->__r_.__value_.__s.__data_[0] == 46) {
              goto LABEL_70;
            }
          }
          v39.tv_seCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
          v39.tv_nseCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
          *(timespec *)&__dst.st_blkstd::string::size_type size = v39;
          *(timespec *)__dst.st_qspare = v39;
          __dst.st_birthtimespeCC_SHA256_CTX c = v39;
          *(timespec *)&__dst.st_std::string::size_type size = v39;
          __dst.st_mtimespeCC_SHA256_CTX c = v39;
          __dst.st_ctimespeCC_SHA256_CTX c = v39;
          *(timespec *)&__dst.st_uid = v39;
          __dst.st_atimespeCC_SHA256_CTX c = v39;
          *(timespec *)&__dst.st_dev = v39;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unsigned int v40 = &__p;
          }
          else {
            unsigned int v40 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if (stat((const char *)v40, &__dst)) {
            goto LABEL_70;
          }
          uint64_t v51 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          unint64_t v52 = opendir((const char *)v51);
          CFTypeID v53 = v52;
          if (!v52) {
            goto LABEL_70;
          }
          std::string::size_type v54 = readdir(v52);
          closedir(v53);
          if (!v54) {
            goto LABEL_70;
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v58, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else {
            std::string v58 = __p;
          }
          uint64_t updated = support::fs::updateOwner(&v58, a2, a3);
          if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
          {
            CFIndex v50 = (void *)v58.__r_.__value_.__r.__words[0];
            goto LABEL_86;
          }
LABEL_87:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
LABEL_91:
            }
              operator delete(v60.__r_.__value_.__l.__data_);
          }
          else if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
          {
            goto LABEL_91;
          }
          if (v22 == (const std::string::value_type **)v57) {
            char v23 = 0;
          }
          else {
            char v23 = updated;
          }
          v22 += 3;
          if ((v23 & 1) == 0)
          {
            int v21 = (char *)v61;
            if (!v61) {
              return updated;
            }
LABEL_105:
            xpc_object_t v55 = (void **)v62;
            uint64_t v16 = v21;
            if (v62 != v21)
            {
              do
              {
                if (*((char *)v55 - 1) < 0) {
                  operator delete(*(v55 - 3));
                }
                v55 -= 3;
              }
              while (v55 != (void **)v21);
              uint64_t v16 = v61;
            }
            int v62 = v21;
LABEL_112:
            operator delete(v16);
            return updated;
          }
        }
      }
    }
  }
  if (v5[23] < 0) {
    uint64_t v5 = *(const char **)v5;
  }
  size_t v7 = strlen(v5);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  __darwin_ino64_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    char v9 = operator new(v10 + 1);
    __dst.st_ino = v8;
    *(void *)&__dst.st_uid = v11 | 0x8000000000000000;
    *(void *)&__dst.st_dev = v9;
    goto LABEL_13;
  }
  HIBYTE(__dst.st_gid) = v7;
  char v9 = &__dst;
  if (v7) {
LABEL_13:
  }
    memmove(v9, v5, v8);
  *((unsigned char *)v9 + v8) = 0;
  int v12 = SHIBYTE(__dst.st_gid);
  long long v13 = *(void **)&__dst.st_dev;
  if ((__dst.st_gid & 0x80000000) == 0) {
    unint64_t v14 = &__dst;
  }
  else {
    unint64_t v14 = *(stat **)&__dst.st_dev;
  }
  uint64_t updated = chown((const char *)v14, a2, a3) == 0;
  if (v12 < 0)
  {
    uint64_t v16 = v13;
    goto LABEL_112;
  }
  return updated;
}

void sub_1C5B16F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31)
{
}

void sub_1C5B16FA0()
{
}

DIR *support::fs::isDir(const char *a1)
{
  int v1 = a1;
  v2.tv_seCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
  v2.tv_nseCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v7.st_blkstd::string::size_type size = v2;
  *(timespec *)v7.st_qspare = v2;
  v7.st_birthtimespeCC_SHA256_CTX c = v2;
  *(timespec *)&v7.st_std::string::size_type size = v2;
  v7.st_mtimespeCC_SHA256_CTX c = v2;
  v7.st_ctimespeCC_SHA256_CTX c = v2;
  *(timespec *)&v7.st_uid = v2;
  v7.st_atimespeCC_SHA256_CTX c = v2;
  *(timespec *)&v7.st_dev = v2;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (stat(a1, &v7)) {
    return 0;
  }
  if (v1[23] >= 0) {
    size_t v4 = v1;
  }
  else {
    size_t v4 = *(const char **)v1;
  }
  __n128 result = opendir(v4);
  if (result)
  {
    uint64_t v5 = result;
    timespec v6 = readdir(result);
    closedir(v5);
    return (DIR *)(v6 != 0);
  }
  return result;
}

BOOL support::fs::chown(const char *a1, uid_t a2, gid_t a3)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  return chown(a1, a2, a3) == 0;
}

DIR *support::fs::readDir(const char *a1, uint64_t a2)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  __n128 result = opendir(a1);
  if (result)
  {
    size_t v4 = result;
    uint64_t v5 = readdir(result);
    if (v5)
    {
      timespec v6 = v5;
      do
      {
        memset(__dst, 170, sizeof(__dst));
        size_t d_namlen = v6->d_namlen;
        if (d_namlen >= 0x17)
        {
          if ((d_namlen | 7) == 0x17) {
            uint64_t v11 = ((unsigned __int16)d_namlen & 0xFFF8) + 8;
          }
          else {
            uint64_t v11 = d_namlen | 7;
          }
          __darwin_ino64_t v8 = operator new(v11 + 1);
          *(void *)&__dst[8] = d_namlen;
          *(void *)&__dst[16] = v11 - 0x7FFFFFFFFFFFFFFFLL;
          *(void *)stat __dst = v8;
        }
        else
        {
          __dst[23] = v6->d_namlen;
          __darwin_ino64_t v8 = __dst;
          if (!d_namlen)
          {
            __dst[d_namlen] = 0;
            char v9 = *(std::string **)(a2 + 8);
            if ((unint64_t)v9 < *(void *)(a2 + 16)) {
              goto LABEL_10;
            }
            goto LABEL_17;
          }
        }
        memmove(v8, v6->d_name, d_namlen);
        v8[d_namlen] = 0;
        char v9 = *(std::string **)(a2 + 8);
        if ((unint64_t)v9 < *(void *)(a2 + 16))
        {
LABEL_10:
          if ((__dst[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)__dst, *(std::string::size_type *)&__dst[8]);
          }
          else
          {
            long long v10 = *(_OWORD *)__dst;
            v9->__r_.__value_.__r.__words[2] = *(void *)&__dst[16];
            *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
          }
          *(void *)(a2 + 8) = v9 + 1;
          *(void *)(a2 + 8) = v9 + 1;
          if ((__dst[23] & 0x80000000) == 0) {
            goto LABEL_6;
          }
LABEL_21:
          operator delete(*(void **)__dst);
          goto LABEL_6;
        }
LABEL_17:
        *(void *)(a2 + 8) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a2, (uint64_t)__dst);
        if ((__dst[23] & 0x80000000) != 0) {
          goto LABEL_21;
        }
LABEL_6:
        timespec v6 = readdir(v4);
      }
      while (v6);
    }
    return (DIR *)closedir(v4);
  }
  return result;
}

void sub_1C5B17240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v15 + 8) = v16;
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t support::fs::getUidGid(int a1, uid_t *a2, gid_t *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  memset(__p, 170, sizeof(__p));
  if (a1 == 1)
  {
    HIBYTE(__p[2]) = 9;
    strcpy((char *)__p, "_wireless");
    uint64_t v5 = getpwnam((const char *)__p);
    if (v5) {
      goto LABEL_4;
    }
LABEL_6:
    stat v7 = GetOsLogContext()[1];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315138;
      long long v10 = __p;
      _os_log_error_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_ERROR, "Getting uid and gid: failed to get passwd for %s", buf, 0xCu);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
    }
    return 0;
  }
  if (!a1)
  {
    HIBYTE(__p[2]) = 6;
    strcpy((char *)__p, "mobile");
    uint64_t v5 = getpwnam((const char *)__p);
    if (v5)
    {
LABEL_4:
      *a2 = v5->pw_uid;
      *a3 = v5->pw_gid;
      return 1;
    }
    goto LABEL_6;
  }
  return 0;
}

BOOL support::fs::writeToCompletion(support::fs *this, char *__buf, size_t __nbyte)
{
  int v4 = (int)this;
  do
  {
    size_t v5 = __nbyte;
    if (!__nbyte) {
      break;
    }
    ssize_t v6 = write(v4, __buf, __nbyte);
    __nbyte = v5 - v6;
    __buf += v6;
  }
  while ((v6 & 0x8000000000000000) == 0);
  return v5 == 0;
}

BOOL support::fs::writeToCompletion(FILE *__stream, __sFILE *__ptr, size_t __nitems)
{
  while (1)
  {
    size_t v5 = __nitems;
    if (!__nitems) {
      break;
    }
    size_t v6 = fwrite(__ptr, 1uLL, __nitems, __stream);
    __nitems = v5 - v6;
    __ptr = (__sFILE *)((char *)__ptr + v6);
    if (!v6) {
      return v5 == 0;
    }
  }
  fflush(__stream);
  return 1;
}

uint64_t support::fs::openFile(const char *a1, int a2, unsigned int a3)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  return open(a1, a2, a3);
}

BOOL support::fs::closeFile(support::fs *this)
{
  int v1 = (int)this;
  do
    int v2 = close(v1);
  while (v2 && *__error() == 4);
  return v2 == 0;
}

BOOL support::fs::copyFile(const char *a1, const char *a2, int a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (a1[23] >= 0) {
    size_t v6 = a1;
  }
  else {
    size_t v6 = *(const char **)a1;
  }
  size_t v7 = strlen(v6);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    char v9 = operator new(v10 + 1);
    *(void *)&__dst[8] = v8;
    *(void *)&__dst[16] = v11 | 0x8000000000000000;
    *(void *)stat __dst = v9;
    goto LABEL_11;
  }
  __dst[23] = v7;
  char v9 = __dst;
  if (v7) {
LABEL_11:
  }
    memmove(v9, v6, v8);
  v9[v8] = 0;
  if (__dst[23] >= 0) {
    int v12 = __dst;
  }
  else {
    int v12 = *(const char **)__dst;
  }
  int v13 = open(v12, 0, 420);
  int v14 = v13;
  if ((__dst[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__dst);
    if ((v14 & 0x80000000) == 0)
    {
LABEL_17:
      if (a2[23] >= 0) {
        uint64_t v15 = a2;
      }
      else {
        uint64_t v15 = *(const char **)a2;
      }
      size_t v16 = strlen(v15);
      if (v16 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v17 = v16;
      if (v16 >= 0x17)
      {
        uint64_t v21 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17) {
          uint64_t v21 = v16 | 7;
        }
        uint64_t v22 = v21 + 1;
        uint64_t v18 = operator new(v21 + 1);
        *(void *)&__dst[8] = v17;
        *(void *)&__dst[16] = v22 | 0x8000000000000000;
        *(void *)stat __dst = v18;
      }
      else
      {
        __dst[23] = v16;
        uint64_t v18 = __dst;
        if (!v16)
        {
LABEL_31:
          v18[v17] = 0;
          if (__dst[23] >= 0) {
            char v23 = __dst;
          }
          else {
            char v23 = *(const char **)__dst;
          }
          int v24 = open(v23, 1541, 420);
          int v25 = v24;
          if ((__dst[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)__dst);
            if ((v25 & 0x80000000) == 0) {
              goto LABEL_36;
            }
          }
          else if ((v24 & 0x80000000) == 0)
          {
LABEL_36:
            memset(__dst, 170, sizeof(__dst));
            ssize_t v26 = read(v14, __dst, 0x400uLL);
            if (v26 < 1)
            {
LABEL_42:
              BOOL v20 = v26 == 0;
              if (!v26 && a3)
              {
                *(void *)&long long v29 = 0xAAAAAAAAAAAAAAAALL;
                *((void *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
                *(_OWORD *)&__dst[112] = v29;
                *(_OWORD *)&__dst[128] = v29;
                *(_OWORD *)&__dst[80] = v29;
                *(_OWORD *)&__dst[96] = v29;
                *(_OWORD *)&unsigned char __dst[48] = v29;
                *(_OWORD *)&__dst[64] = v29;
                *(_OWORD *)&__dst[16] = v29;
                *(_OWORD *)&__dst[32] = v29;
                *(_OWORD *)stat __dst = v29;
                if (fstat(v14, (stat *)__dst)) {
                  BOOL v20 = 0;
                }
                else {
                  BOOL v20 = fchmod(v25, *(mode_t *)&__dst[4]) == 0;
                }
              }
            }
            else
            {
              unint64_t v27 = __dst;
              do
              {
                while (!v26)
                {
                  memset(__dst, 170, sizeof(__dst));
                  ssize_t v26 = read(v14, __dst, 0x400uLL);
                  unint64_t v27 = __dst;
                  if (v26 <= 0) {
                    goto LABEL_42;
                  }
                }
                ssize_t v28 = write(v25, v27, v26);
                v26 -= v28;
                v27 += v28;
              }
              while ((v28 & 0x8000000000000000) == 0);
              BOOL v20 = 0;
            }
            while (close(v25) && *__error() == 4)
              ;
            goto LABEL_52;
          }
          uint64_t v30 = GetOsLogContext()[1];
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          {
            if (a2[23] >= 0) {
              int v33 = a2;
            }
            else {
              int v33 = *(const char **)a2;
            }
            *(_DWORD *)stat __dst = 136315138;
            *(void *)&__dst[4] = v33;
            _os_log_error_impl(&dword_1C59C6000, v30, OS_LOG_TYPE_ERROR, "Failed to open the destination file(%s)", __dst, 0xCu);
          }
          BOOL v20 = 0;
LABEL_52:
          while (close(v14) && *__error() == 4)
            ;
          return v20;
        }
      }
      memmove(v18, v15, v17);
      goto LABEL_31;
    }
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  uint64_t v19 = GetOsLogContext()[1];
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    if (a1[23] >= 0) {
      unint64_t v32 = a1;
    }
    else {
      unint64_t v32 = *(const char **)a1;
    }
    *(_DWORD *)stat __dst = 136315138;
    *(void *)&__dst[4] = v32;
    _os_log_error_impl(&dword_1C59C6000, v19, OS_LOG_TYPE_ERROR, "Failed to open the source file(%s)", __dst, 0xCu);
  }
  return 0;
}

void sub_1C5B1790C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL support::fs::loadFile(uint64_t a1, uint64_t a2)
{
  __b[89] = *MEMORY[0x1E4F143B8];
  memset(__b, 170, 0x240uLL);
  std::ifstream::basic_ifstream(__b);
  if (!__b[17]
    || (std::istream::tellg(), std::istream::seekg(), std::istream::tellg(), unint64_t v3 = __b[88], std::istream::seekg(), !v3)
    || *(_DWORD *)((char *)&__b[4] + *(void *)(__b[0] - 24)))
  {
    BOOL v4 = 0;
    goto LABEL_5;
  }
  size_t v7 = *(char **)a2;
  size_t v6 = *(char **)(a2 + 8);
  unint64_t v8 = (unint64_t)&v6[-*(void *)a2];
  unint64_t v9 = v3 - v8;
  if (v3 <= v8)
  {
    if (v3 < v8) {
      *(void *)(a2 + 8) = &v7[v3];
    }
    goto LABEL_36;
  }
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10 - (uint64_t)v6 < v9)
  {
    if ((v3 & 0x8000000000000000) != 0) {
      std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v10 - (void)v7;
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v3) {
      uint64_t v12 = v3;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v13 = v12;
    }
    int v14 = (char *)operator new(v13);
    uint64_t v15 = &v14[v8];
    size_t v16 = &v14[v13];
    bzero(&v14[v8], v3 - v8);
    if (v6 == v7) {
      goto LABEL_34;
    }
    if (v8 >= 8 && (unint64_t)(v7 - v14) >= 0x20)
    {
      if (v8 < 0x20)
      {
        unint64_t v17 = 0;
        goto LABEL_26;
      }
      unint64_t v17 = v8 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v18 = v6 - 16;
      uint64_t v19 = &v14[v6 - 16 - v7];
      unint64_t v20 = v8 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v21 = *(_OWORD *)v18;
        *((_OWORD *)v19 - 1) = *((_OWORD *)v18 - 1);
        *(_OWORD *)uint64_t v19 = v21;
        v19 -= 32;
        v18 -= 32;
        v20 -= 32;
      }
      while (v20);
      if (v8 == v17) {
        goto LABEL_33;
      }
      if ((v8 & 0x18) != 0)
      {
LABEL_26:
        v15 -= v8 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v22 = &v6[-v17 - 8];
        char v23 = (char *)(v22 - v7);
        unint64_t v24 = v17 - (v8 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v25 = *(void *)v22;
          v22 -= 8;
          *(void *)&v23[(void)v14] = v25;
          v23 -= 8;
          v24 += 8;
        }
        while (v24);
        v6 -= v8 & 0xFFFFFFFFFFFFFFF8;
        if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_33;
        }
        goto LABEL_31;
      }
      v15 -= v17;
      v6 -= v17;
    }
LABEL_31:
    ssize_t v26 = v15 - 1;
    do
    {
      char v27 = *--v6;
      *v26-- = v27;
    }
    while (v6 != v7);
LABEL_33:
    size_t v6 = v7;
    uint64_t v15 = v14;
LABEL_34:
    *(void *)a2 = v15;
    *(void *)(a2 + 8) = &v14[v3];
    *(void *)(a2 + 16) = v16;
    if (v6) {
      operator delete(v6);
    }
    goto LABEL_36;
  }
  bzero(*(void **)(a2 + 8), v3 - v8);
  *(void *)(a2 + 8) = &v6[v9];
LABEL_36:
  std::istream::read();
  BOOL v4 = __b[1] == (int)v3;
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)__b + *(void *)(__b[0] - 24)), *(_DWORD *)((char *)&__b[4] + *(void *)(__b[0] - 24)) | 4);
  }
LABEL_5:
  __b[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)__b + *(void *)(__b[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1C8794EC0](&__b[2]);
  std::istream::~istream();
  MEMORY[0x1C8795140](&__b[53]);
  return v4;
}

void sub_1C5B17CD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ifstream::~ifstream((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL support::fs::getFileSize(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 136);
  if (v2)
  {
    std::istream::tellg();
    std::istream::seekg();
    std::istream::tellg();
    *a2 = v5;
    std::istream::seekg();
  }
  return v2 != 0;
}

{
  uint64_t v2;
  BOOL v4;
  uint64_t v6[90];

  v6[89] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(unsigned __int8 *)(a1 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a1 + 8);
  }
  if (!v2) {
    return 0;
  }
  memset(v6, 170, 0x240uLL);
  std::ifstream::basic_ifstream(v6);
  BOOL v4 = v6[17] != 0;
  if (v6[17])
  {
    std::istream::tellg();
    std::istream::seekg();
    std::istream::tellg();
    *a2 = v6[88];
    std::istream::seekg();
    if (!std::filebuf::close()) {
      std::ios_base::clear((std::ios_base *)((char *)v6 + *(void *)(v6[0] - 24)), *(_DWORD *)((char *)&v6[4] + *(void *)(v6[0] - 24)) | 4);
    }
  }
  v6[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1C8794EC0](&v6[2]);
  std::istream::~istream();
  MEMORY[0x1C8795140](&v6[53]);
  return v4;
}

uint64_t support::fs::loadFile(const char *a1, uint64_t a2)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  unint64_t v3 = fopen(a1, "rb");
  if (v3)
  {
    BOOL v4 = v3;
    fseek(v3, 0, 2);
    unint64_t v5 = MEMORY[0x1C8795660](v4);
    if (v5 != -1)
    {
      size_t v6 = v5;
      unint64_t v8 = *(char **)a2;
      size_t v7 = *(char **)(a2 + 8);
      unint64_t v9 = (unint64_t)&v7[-*(void *)a2];
      size_t v10 = v5 - v9;
      if (v5 <= v9)
      {
        if (v5 < v9) {
          *(void *)(a2 + 8) = &v8[v5];
        }
        goto LABEL_36;
      }
      uint64_t v11 = *(void *)(a2 + 16);
      if (v11 - (uint64_t)v7 >= v10)
      {
        bzero(*(void **)(a2 + 8), v10);
        *(void *)(a2 + 8) = &v7[v10];
LABEL_36:
        rewind(v4);
        uint64_t v30 = *(char **)a2;
        uint64_t v19 = 1;
        fread(v30, v6, 1uLL, v4);
        fclose(v4);
        return v19;
      }
      if ((v5 & 0x8000000000000000) != 0) {
        std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v12 = v11 - (void)v8;
      uint64_t v13 = 2 * v12;
      if (2 * v12 <= v5) {
        uint64_t v13 = v5;
      }
      if (v12 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v14 = v13;
      }
      uint64_t v15 = (char *)operator new(v14);
      size_t v16 = &v15[v9];
      unint64_t v17 = &v15[v14];
      bzero(&v15[v9], v10);
      if (v7 == v8)
      {
LABEL_34:
        *(void *)a2 = v16;
        *(void *)(a2 + 8) = &v15[v6];
        *(void *)(a2 + 16) = v17;
        if (v7) {
          operator delete(v7);
        }
        goto LABEL_36;
      }
      if (v9 >= 8 && (unint64_t)(v8 - v15) >= 0x20)
      {
        if (v9 < 0x20)
        {
          unint64_t v18 = 0;
          goto LABEL_26;
        }
        unint64_t v18 = v9 & 0xFFFFFFFFFFFFFFE0;
        unint64_t v20 = v7 - 16;
        long long v21 = &v15[v7 - 16 - v8];
        unint64_t v22 = v9 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v23 = *(_OWORD *)v20;
          *((_OWORD *)v21 - 1) = *((_OWORD *)v20 - 1);
          *(_OWORD *)long long v21 = v23;
          v21 -= 32;
          v20 -= 32;
          v22 -= 32;
        }
        while (v22);
        if (v9 == v18) {
          goto LABEL_33;
        }
        if ((v9 & 0x18) != 0)
        {
LABEL_26:
          v16 -= v9 & 0xFFFFFFFFFFFFFFF8;
          unint64_t v24 = &v7[-v18 - 8];
          uint64_t v25 = (char *)(v24 - v8);
          unint64_t v26 = v18 - (v9 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v27 = *(void *)v24;
            v24 -= 8;
            *(void *)&v25[(void)v15] = v27;
            v25 -= 8;
            v26 += 8;
          }
          while (v26);
          v7 -= v9 & 0xFFFFFFFFFFFFFFF8;
          if (v9 == (v9 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_33;
          }
          goto LABEL_31;
        }
        v16 -= v18;
        v7 -= v18;
      }
LABEL_31:
      ssize_t v28 = v16 - 1;
      do
      {
        char v29 = *--v7;
        *v28-- = v29;
      }
      while (v7 != v8);
LABEL_33:
      size_t v7 = v8;
      size_t v16 = v15;
      goto LABEL_34;
    }
  }
  return 0;
}

BOOL support::fs::fileExists(const char *a1)
{
  v1.tv_seCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
  v1.tv_nseCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v3.st_blkstd::string::size_type size = v1;
  *(timespec *)v3.st_qspare = v1;
  v3.st_birthtimespeCC_SHA256_CTX c = v1;
  *(timespec *)&v3.st_std::string::size_type size = v1;
  v3.st_mtimespeCC_SHA256_CTX c = v1;
  v3.st_ctimespeCC_SHA256_CTX c = v1;
  *(timespec *)&v3.st_uid = v1;
  v3.st_atimespeCC_SHA256_CTX c = v1;
  *(timespec *)&v3.st_dev = v1;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  return stat(a1, &v3) == 0;
}

void support::fs::createUniqueFilename(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v201 = v4;
  long long v199 = v4;
  long long v200 = v4;
  *(_OWORD *)&v198[0].__locale_ = v4;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)v198, "^([/_\\-[:alnum:]]*)(.*)", 0);
  memset(&v197, 170, sizeof(v197));
  uint64_t v185 = a2;
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v197, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v197 = *(std::string *)a1;
  }
  unsigned int v5 = 0;
  size_t v6 = &v204[24];
  uint64_t v186 = a1;
  int v194 = &v204[24];
  while (1)
  {
    v7.tv_seCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
    v7.tv_nseCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&v202.st_blksize_t size = v7;
    *(timespec *)v202.st_qspare = v7;
    v202.st_birthtimespeCC_SHA256_CTX c = v7;
    *(timespec *)&v202.st_size_t size = v7;
    v202.st_mtimespeCC_SHA256_CTX c = v7;
    v202.st_ctimespeCC_SHA256_CTX c = v7;
    *(timespec *)&v202.st_uid = v7;
    v202.st_atimespeCC_SHA256_CTX c = v7;
    *(timespec *)&v202.st_dev = v7;
    if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v8 = &v197;
    }
    else {
      unint64_t v8 = (std::string *)v197.__r_.__value_.__r.__words[0];
    }
    if (stat((const char *)v8, &v202))
    {
      *(std::string *)uint64_t v185 = v197;
      goto LABEL_333;
    }
    uint64_t v9 = *(unsigned __int8 *)(a1 + 23);
    if ((v9 & 0x80u) == 0) {
      size_t v10 = (std::sub_match<const char *> *)a1;
    }
    else {
      size_t v10 = *(std::sub_match<const char *> **)a1;
    }
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(a1 + 8);
    }
    uint64_t v11 = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v10 + v9);
    *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *((_OWORD *)v6 + 2) = v12;
    *((_OWORD *)v6 + 3) = v12;
    *(_OWORD *)size_t v6 = v12;
    *((_OWORD *)v6 + 1) = v12;
    uint64_t v205 = 0;
    uint64_t v206 = 0;
    char v207 = 0;
    uint64_t v208 = 0;
    uint64_t v209 = 0;
    char v210 = 0;
    char v211 = 0;
    uint64_t v212 = 0;
    long long v203 = 0u;
    memset(v204, 0, 25);
    *(_OWORD *)&v202.st_birthtimespec.tv_nseCC_SHA256_CTX c = v12;
    v202.st_ctimespec.tv_seCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
    v202.st_atimespec.tv_nseCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
    memset(&v202.st_mtimespec, 0, 17);
    memset(&v202.st_ctimespec.tv_nsec, 0, 17);
    LOBYTE(v202.st_size) = 0;
    v202.st_blocks = 0;
    memset(&v202, 0, 41);
    int v13 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v198, v10, (std::sub_match<const char *> *)((char *)v10 + v9), (std::vector<std::csub_match> *)&v202, 4160);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)&v203, (uint64_t)v10, v11, (uint64_t *)&v202.st_dev, 0);
    if (*(void *)&v202.st_dev)
    {
      v202.st_ino = *(void *)&v202.st_dev;
      operator delete(*(void **)&v202.st_dev);
    }
    if (v210) {
      int v14 = v13 ^ 1;
    }
    else {
      int v14 = 1;
    }
    if ((void)v203)
    {
      *((void *)&v203 + 1) = v203;
      operator delete((void *)v203);
    }
    if ((v13 & v14) == 0) {
      break;
    }
    unsigned int v15 = v5 + 1;
    memset(__p, 170, 24);
    std::to_string((std::string *)&v203, v15);
    size_t v16 = std::string::insert((std::string *)&v203, 0, "$1-", 3uLL);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    *(void *)&v202.st_uid = *((void *)&v16->__r_.__value_.__l + 2);
    *(_OWORD *)&v202.st_dev = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    unint64_t v18 = std::string::append((std::string *)&v202, "$2", 2uLL);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __p[2] = (void *)v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    size_t v6 = v194;
    if (SHIBYTE(v202.st_gid) < 0)
    {
      operator delete(*(void **)&v202.st_dev);
      unsigned int v187 = v15;
      if ((v204[7] & 0x80000000) != 0) {
LABEL_298:
      }
        operator delete((void *)v203);
    }
    else
    {
      unsigned int v187 = v15;
      if ((v204[7] & 0x80000000) != 0) {
        goto LABEL_298;
      }
    }
    memset(&v195, 0, sizeof(v195));
    int v20 = *(char *)(a1 + 23);
    if (v20 >= 0) {
      long long v21 = (std::sub_match<const char *> *)a1;
    }
    else {
      long long v21 = *(std::sub_match<const char *> **)a1;
    }
    if (v20 >= 0) {
      uint64_t v22 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v22 = *(void *)(a1 + 8);
    }
    long long v23 = __p;
    if (SHIBYTE(__p[2]) < 0) {
      long long v23 = (void **)__p[0];
    }
    __s = (char *)v23;
    *(void *)&long long v24 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v202.st_gen = v24;
    v202.st_size_t size = 0xAAAAAAAAAAAAAAAALL;
    v202.st_ctimespec.tv_nseCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
    *(&v202.st_rdev + 1) = -1431655766;
    *(void *)&v202.st_dev = v21;
    v202.st_ino = (__darwin_ino64_t)v21 + v22;
    *(void *)&v202.st_uid = v198;
    v202.dev_t st_rdev = 0;
    memset(&v202.st_birthtimespec, 0, 17);
    memset(&v202.st_blocks, 0, 17);
    LOBYTE(v202.st_qspare[0]) = 0;
    v202.st_qspare[1] = 0;
    memset(&v202.st_atimespec, 0, 41);
    *((_OWORD *)v6 + 2) = v24;
    *((_OWORD *)v6 + 3) = v24;
    *(_OWORD *)size_t v6 = v24;
    *((_OWORD *)v6 + 1) = v24;
    uint64_t v205 = 0;
    uint64_t v206 = 0;
    char v207 = 0;
    uint64_t v208 = 0;
    uint64_t v209 = 0;
    char v210 = 0;
    char v211 = 0;
    uint64_t v212 = 0;
    long long v203 = 0u;
    memset(v204, 0, 25);
    std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v198, v21, (std::sub_match<const char *> *)((char *)v21 + v22), (std::vector<std::csub_match> *)&v203, 0);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)&v202.st_atimespec, (uint64_t)v21, (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v21 + v22), (uint64_t *)&v203, 0);
    if ((void)v203)
    {
      *((void *)&v203 + 1) = v203;
      operator delete((void *)v203);
    }
    tv_nseCC_SHA256_CTX c = (void *)v202.st_atimespec.tv_nsec;
    if (v202.st_atimespec.tv_nsec != v202.st_atimespec.tv_sec)
    {
      size_t v189 = strlen(__s);
      unint64_t v26 = (unsigned __int8 *)&__s[v189];
      while (2)
      {
        tv_seCC_SHA256_CTX c = (char *)v202.st_birthtimespec.tv_sec;
        uint64_t v29 = v202.st_birthtimespec.tv_nsec;
        while (tv_sec != (char *)v29)
        {
          char v33 = *tv_sec;
          if ((SHIBYTE(v195.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (HIBYTE(v195.__r_.__value_.__r.__words[2]) != 22)
            {
              size_t size = HIBYTE(v195.__r_.__value_.__r.__words[2]);
              *((unsigned char *)&v195.__r_.__value_.__s + 23) = (*((unsigned char *)&v195.__r_.__value_.__s + 23) + 1) & 0x7F;
              uint64_t v31 = &v195;
              goto LABEL_41;
            }
            int v34 = &v195;
            size_t size = 22;
LABEL_49:
            if (size + 1 > 2 * size) {
              unint64_t v36 = size + 1;
            }
            else {
              unint64_t v36 = 2 * size;
            }
            uint64_t v37 = (v36 & 0x7FFFFFFFFFFFFFF8) + 8;
            if ((v36 | 7) != 0x17) {
              uint64_t v37 = v36 | 7;
            }
            if (v36 >= 0x17) {
              size_t v35 = v37 + 1;
            }
            else {
              size_t v35 = 23;
            }
LABEL_57:
            uint64_t v38 = (std::string *)operator new(v35);
            uint64_t v31 = v38;
            if (!size || (memmove(v38, v34, size), size != 22)) {
              operator delete(v34);
            }
            v195.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
            v195.__r_.__value_.__r.__words[2] = v35 | 0x8000000000000000;
            goto LABEL_62;
          }
          size_t size = (v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if (v195.__r_.__value_.__l.__size_ == size)
          {
            if ((v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            int v34 = (std::string *)v195.__r_.__value_.__r.__words[0];
            size_t v35 = 0x7FFFFFFFFFFFFFF7;
            if (size < 0x3FFFFFFFFFFFFFF3) {
              goto LABEL_49;
            }
            goto LABEL_57;
          }
          size_t size = v195.__r_.__value_.__l.__size_;
          uint64_t v31 = (std::string *)v195.__r_.__value_.__r.__words[0];
LABEL_62:
          v195.__r_.__value_.__l.__size_ = size + 1;
LABEL_41:
          unint64_t v32 = (char *)v31 + size;
          unsigned char *v32 = v33;
          v32[1] = 0;
          ++tv_sec;
        }
        if (v189)
        {
          for (uint64_t i = __s; i != (char *)v26; ++i)
          {
            int v43 = *i;
            if (v43 != 36) {
              goto LABEL_135;
            }
            unsigned int v44 = (unsigned __int8 *)(i + 1);
            if (i + 1 == (char *)v26) {
              goto LABEL_134;
            }
            int v45 = (char)*v44;
            int v43 = *v44;
            if (v45 <= 38)
            {
              if (v45 == 36)
              {
                ++i;
                unsigned __int8 v82 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
                if ((SHIBYTE(v195.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_136;
                }
                goto LABEL_161;
              }
              if (v45 != 38) {
                goto LABEL_123;
              }
              uint64_t v46 = *(char **)v202.st_atimespec.tv_sec;
              int v47 = *(char **)(v202.st_atimespec.tv_sec + 8);
              if (*(char **)v202.st_atimespec.tv_sec == v47)
              {
LABEL_179:
                uint64_t i = (char *)v44;
                continue;
              }
              while (2)
              {
                while (2)
                {
                  char v49 = *v46;
                  unsigned __int8 v50 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
                  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
                  {
                    size_t v52 = (v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                    if (v195.__r_.__value_.__l.__size_ == v52)
                    {
                      if ((v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
                        goto LABEL_337;
                      }
                      uint64_t v51 = (std::string *)v195.__r_.__value_.__r.__words[0];
                      size_t v53 = 0x7FFFFFFFFFFFFFF7;
                      if (v52 < 0x3FFFFFFFFFFFFFF3) {
                        goto LABEL_82;
                      }
                      goto LABEL_90;
                    }
                    size_t v52 = v195.__r_.__value_.__l.__size_;
                    std::string::size_type v57 = v195.__r_.__value_.__r.__words[0];
                  }
                  else
                  {
                    if (HIBYTE(v195.__r_.__value_.__r.__words[2]) != 22)
                    {
                      *((unsigned char *)&v195.__r_.__value_.__s + 23) = (*((unsigned char *)&v195.__r_.__value_.__s + 23) + 1) & 0x7F;
                      xpc_object_t v48 = (char *)&v195 + v50;
                      char *v48 = v49;
                      v48[1] = 0;
                      if (++v46 == v47) {
                        goto LABEL_201;
                      }
                      continue;
                    }
                    uint64_t v51 = &v195;
                    size_t v52 = 22;
LABEL_82:
                    if (v52 + 1 > 2 * v52) {
                      unint64_t v54 = v52 + 1;
                    }
                    else {
                      unint64_t v54 = 2 * v52;
                    }
                    uint64_t v55 = (v54 & 0x7FFFFFFFFFFFFFF8) + 8;
                    if ((v54 | 7) != 0x17) {
                      uint64_t v55 = v54 | 7;
                    }
                    if (v54 >= 0x17) {
                      size_t v53 = v55 + 1;
                    }
                    else {
                      size_t v53 = 23;
                    }
LABEL_90:
                    int v56 = operator new(v53);
                    std::string::size_type v57 = (std::string::size_type)v56;
                    if (!v52 || (memmove(v56, v51, v52), v52 != 22)) {
                      operator delete(v51);
                    }
                    v195.__r_.__value_.__r.__words[0] = v57;
                    v195.__r_.__value_.__r.__words[2] = v53 | 0x8000000000000000;
                  }
                  break;
                }
                v195.__r_.__value_.__l.__size_ = v52 + 1;
                std::string v58 = (char *)(v57 + v52);
                *std::string v58 = v49;
                v58[1] = 0;
                if (++v46 == v47) {
                  goto LABEL_201;
                }
                continue;
              }
            }
            if (v45 != 39)
            {
              if (v45 == 96)
              {
                uint64_t v59 = (char *)v202.st_birthtimespec.tv_sec;
                uint64_t v60 = v202.st_birthtimespec.tv_nsec;
                if (v202.st_birthtimespec.tv_sec == v202.st_birthtimespec.tv_nsec) {
                  goto LABEL_179;
                }
                while (2)
                {
                  while (2)
                  {
                    char v62 = *v59;
                    unsigned __int8 v63 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
                    if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
                    {
                      size_t v65 = (v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                      if (v195.__r_.__value_.__l.__size_ == v65)
                      {
                        if ((v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
                          goto LABEL_337;
                        }
                        uint64_t v64 = (std::string *)v195.__r_.__value_.__r.__words[0];
                        size_t v66 = 0x7FFFFFFFFFFFFFF7;
                        if (v65 < 0x3FFFFFFFFFFFFFF3) {
                          goto LABEL_108;
                        }
                        goto LABEL_116;
                      }
                      size_t v65 = v195.__r_.__value_.__l.__size_;
                      std::string::size_type v70 = v195.__r_.__value_.__r.__words[0];
                    }
                    else
                    {
                      if (HIBYTE(v195.__r_.__value_.__r.__words[2]) != 22)
                      {
                        *((unsigned char *)&v195.__r_.__value_.__s + 23) = (*((unsigned char *)&v195.__r_.__value_.__s + 23) + 1) & 0x7F;
                        int v61 = (char *)&v195 + v63;
                        char *v61 = v62;
                        v61[1] = 0;
                        if (++v59 == (char *)v60) {
                          goto LABEL_201;
                        }
                        continue;
                      }
                      uint64_t v64 = &v195;
                      size_t v65 = 22;
LABEL_108:
                      if (v65 + 1 > 2 * v65) {
                        unint64_t v67 = v65 + 1;
                      }
                      else {
                        unint64_t v67 = 2 * v65;
                      }
                      uint64_t v68 = (v67 & 0x7FFFFFFFFFFFFFF8) + 8;
                      if ((v67 | 7) != 0x17) {
                        uint64_t v68 = v67 | 7;
                      }
                      if (v67 >= 0x17) {
                        size_t v66 = v68 + 1;
                      }
                      else {
                        size_t v66 = 23;
                      }
LABEL_116:
                      uint64_t v69 = operator new(v66);
                      std::string::size_type v70 = (std::string::size_type)v69;
                      if (!v65 || (memmove(v69, v64, v65), v65 != 22)) {
                        operator delete(v64);
                      }
                      v195.__r_.__value_.__r.__words[0] = v70;
                      v195.__r_.__value_.__r.__words[2] = v66 | 0x8000000000000000;
                    }
                    break;
                  }
                  v195.__r_.__value_.__l.__size_ = v65 + 1;
                  long long v71 = (char *)(v70 + v65);
                  char *v71 = v62;
                  v71[1] = 0;
                  if (++v59 == (char *)v60) {
                    goto LABEL_201;
                  }
                  continue;
                }
              }
LABEL_123:
              if ((v43 - 48) <= 9)
              {
                unint64_t v72 = *v44 - 48;
                if (i + 2 != (char *)v26)
                {
                  uint64_t v73 = i[2];
                  unsigned int v74 = v73 - 48;
                  uint64_t v75 = v73 + 10 * (int)v72 - 48;
                  if (v74 > 9)
                  {
                    unsigned int v44 = (unsigned __int8 *)(i + 1);
                  }
                  else
                  {
                    unint64_t v72 = v75;
                    unsigned int v44 = (unsigned __int8 *)(i + 2);
                  }
                }
                __darwin_time_t v76 = v202.st_atimespec.tv_sec + 24 * (int)v72;
                BOOL v77 = 0xAAAAAAAAAAAAAAABLL * ((v202.st_atimespec.tv_nsec - v202.st_atimespec.tv_sec) >> 3) > v72;
                p_tv_nseCC_SHA256_CTX c = &v202.st_mtimespec.tv_nsec;
                if (v77) {
                  p_tv_nseCC_SHA256_CTX c = (uint64_t *)v76;
                }
                BOOL v79 = (char *)*p_tv_nsec;
                p_st_ctimespeCC_SHA256_CTX c = (timespec *)(v76 + 8);
                if (!v77) {
                  p_st_ctimespeCC_SHA256_CTX c = &v202.st_ctimespec;
                }
                uint64_t v81 = (char *)p_st_ctimespec->tv_sec;
                if (v79 == (char *)p_st_ctimespec->tv_sec) {
                  goto LABEL_179;
                }
                while (2)
                {
                  while (2)
                  {
                    char v85 = *v79;
                    unsigned __int8 v86 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
                    if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
                    {
                      size_t v88 = (v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                      if (v195.__r_.__value_.__l.__size_ == v88)
                      {
                        if ((v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
                          goto LABEL_337;
                        }
                        xpc_object_t v87 = (std::string *)v195.__r_.__value_.__r.__words[0];
                        size_t v89 = 0x7FFFFFFFFFFFFFF7;
                        if (v88 < 0x3FFFFFFFFFFFFFF3) {
                          goto LABEL_145;
                        }
                        goto LABEL_153;
                      }
                      size_t v88 = v195.__r_.__value_.__l.__size_;
                      std::string::size_type v93 = v195.__r_.__value_.__r.__words[0];
                    }
                    else
                    {
                      if (HIBYTE(v195.__r_.__value_.__r.__words[2]) != 22)
                      {
                        *((unsigned char *)&v195.__r_.__value_.__s + 23) = (*((unsigned char *)&v195.__r_.__value_.__s + 23) + 1) & 0x7F;
                        uint64_t v84 = (char *)&v195 + v86;
                        *uint64_t v84 = v85;
                        v84[1] = 0;
                        if (++v79 == v81) {
                          goto LABEL_201;
                        }
                        continue;
                      }
                      xpc_object_t v87 = &v195;
                      size_t v88 = 22;
LABEL_145:
                      if (v88 + 1 > 2 * v88) {
                        unint64_t v90 = v88 + 1;
                      }
                      else {
                        unint64_t v90 = 2 * v88;
                      }
                      uint64_t v91 = (v90 & 0x7FFFFFFFFFFFFFF8) + 8;
                      if ((v90 | 7) != 0x17) {
                        uint64_t v91 = v90 | 7;
                      }
                      if (v90 >= 0x17) {
                        size_t v89 = v91 + 1;
                      }
                      else {
                        size_t v89 = 23;
                      }
LABEL_153:
                      long long v92 = operator new(v89);
                      std::string::size_type v93 = (std::string::size_type)v92;
                      if (!v88 || (memmove(v92, v87, v88), v88 != 22)) {
                        operator delete(v87);
                      }
                      v195.__r_.__value_.__r.__words[0] = v93;
                      v195.__r_.__value_.__r.__words[2] = v89 | 0x8000000000000000;
                    }
                    break;
                  }
                  v195.__r_.__value_.__l.__size_ = v88 + 1;
                  uint64_t v94 = (char *)(v93 + v88);
                  char *v94 = v85;
                  v94[1] = 0;
                  if (++v79 == v81) {
                    goto LABEL_201;
                  }
                  continue;
                }
              }
LABEL_134:
              LOBYTE(v43) = 36;
LABEL_135:
              unsigned __int8 v82 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
              if ((SHIBYTE(v195.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_136:
                if (v82 == 22)
                {
                  long long v83 = &v195;
                  size_t v40 = 22;
                  goto LABEL_164;
                }
                size_t v40 = v82;
                *((unsigned char *)&v195.__r_.__value_.__s + 23) = (v82 + 1) & 0x7F;
                int v41 = &v195;
LABEL_66:
                size_t v42 = (char *)v41 + v40;
                *size_t v42 = v43;
                v42[1] = 0;
                continue;
              }
LABEL_161:
              size_t v40 = (v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
              if (v195.__r_.__value_.__l.__size_ == v40)
              {
                if ((v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
LABEL_337:
                }
                  std::string::__throw_length_error[abi:ne180100]();
                size_t v6 = v194;
                long long v83 = (std::string *)v195.__r_.__value_.__r.__words[0];
                size_t v95 = 0x7FFFFFFFFFFFFFF7;
                if (v40 < 0x3FFFFFFFFFFFFFF3)
                {
LABEL_164:
                  if (v40 + 1 > 2 * v40) {
                    unint64_t v96 = v40 + 1;
                  }
                  else {
                    unint64_t v96 = 2 * v40;
                  }
                  uint64_t v97 = (v96 & 0x7FFFFFFFFFFFFFF8) + 8;
                  if ((v96 | 7) != 0x17) {
                    uint64_t v97 = v96 | 7;
                  }
                  if (v96 >= 0x17) {
                    size_t v95 = v97 + 1;
                  }
                  else {
                    size_t v95 = 23;
                  }
                }
                uint64_t v98 = (std::string *)operator new(v95);
                int v41 = v98;
                if (!v40 || (memmove(v98, v83, v40), v40 != 22)) {
                  operator delete(v83);
                }
                v195.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
                v195.__r_.__value_.__r.__words[2] = v95 | 0x8000000000000000;
              }
              else
              {
                size_t v40 = v195.__r_.__value_.__l.__size_;
                int v41 = (std::string *)v195.__r_.__value_.__r.__words[0];
              }
              v195.__r_.__value_.__l.__size_ = v40 + 1;
              goto LABEL_66;
            }
            st_blocks = (char *)v202.st_blocks;
            unint64_t v100 = *(char **)&v202.st_blksize;
            if (v202.st_blocks == *(void *)&v202.st_blksize) {
              goto LABEL_179;
            }
            do
            {
              while (1)
              {
                char v102 = *st_blocks;
                unsigned __int8 v103 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
                if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
                  break;
                }
                if (HIBYTE(v195.__r_.__value_.__r.__words[2]) == 22)
                {
                  size_t v104 = &v195;
                  size_t v105 = 22;
LABEL_187:
                  if (v105 + 1 > 2 * v105) {
                    unint64_t v107 = v105 + 1;
                  }
                  else {
                    unint64_t v107 = 2 * v105;
                  }
                  uint64_t v108 = (v107 & 0x7FFFFFFFFFFFFFF8) + 8;
                  if ((v107 | 7) != 0x17) {
                    uint64_t v108 = v107 | 7;
                  }
                  if (v107 >= 0x17) {
                    size_t v106 = v108 + 1;
                  }
                  else {
                    size_t v106 = 23;
                  }
                  goto LABEL_195;
                }
                *((unsigned char *)&v195.__r_.__value_.__s + 23) = (*((unsigned char *)&v195.__r_.__value_.__s + 23) + 1) & 0x7F;
                uint64_t v101 = (char *)&v195 + v103;
                *uint64_t v101 = v102;
                v101[1] = 0;
                if (++st_blocks == v100) {
                  goto LABEL_201;
                }
              }
              size_t v105 = (v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
              if (v195.__r_.__value_.__l.__size_ != v105)
              {
                size_t v105 = v195.__r_.__value_.__l.__size_;
                std::string::size_type v110 = v195.__r_.__value_.__r.__words[0];
                goto LABEL_200;
              }
              if ((v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
                goto LABEL_337;
              }
              size_t v104 = (std::string *)v195.__r_.__value_.__r.__words[0];
              size_t v106 = 0x7FFFFFFFFFFFFFF7;
              if (v105 < 0x3FFFFFFFFFFFFFF3) {
                goto LABEL_187;
              }
LABEL_195:
              uint64_t v109 = operator new(v106);
              std::string::size_type v110 = (std::string::size_type)v109;
              if (!v105 || (memmove(v109, v104, v105), v105 != 22)) {
                operator delete(v104);
              }
              v195.__r_.__value_.__r.__words[0] = v110;
              v195.__r_.__value_.__r.__words[2] = v106 | 0x8000000000000000;
LABEL_200:
              v195.__r_.__value_.__l.__size_ = v105 + 1;
              int v111 = (char *)(v110 + v105);
              char *v111 = v102;
              v111[1] = 0;
              ++st_blocks;
            }
            while (st_blocks != v100);
LABEL_201:
            uint64_t i = (char *)v44;
            size_t v6 = v194;
          }
        }
        size_t v113 = (char *)v202.st_blocks;
        std::string::size_type v112 = *(char **)&v202.st_blksize;
        dev_t st_rdev = v202.st_rdev;
        int v115 = v202.st_rdev | 0x800;
        v202.st_rdev |= 0x800u;
        uint64_t v27 = (void *)v202.st_atimespec.tv_sec;
        size_t v116 = &v202.st_mtimespec.tv_nsec;
        if (v202.st_atimespec.tv_nsec != v202.st_atimespec.tv_sec) {
          size_t v116 = (void *)v202.st_atimespec.tv_sec;
        }
        int v117 = (timespec *)(v202.st_atimespec.tv_sec + 8);
        if (v202.st_atimespec.tv_nsec == v202.st_atimespec.tv_sec) {
          int v117 = &v202.st_ctimespec;
        }
        int v118 = (std::sub_match<const char *> *)v117->tv_sec;
        st_ino = (std::sub_match<const char *> *)v202.st_ino;
        if (*v116 != v117->tv_sec)
        {
          unint64_t v192 = *(char **)&v202.st_blksize;
          blkcnt_t v193 = v202.st_blocks;
          goto LABEL_208;
        }
        if ((std::sub_match<const char *> *)v202.st_ino != v118)
        {
          uint64_t v138 = *(void *)&v202.st_uid;
          *(void *)&long long v139 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v139 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *((_OWORD *)v6 + 2) = v139;
          *((_OWORD *)v6 + 3) = v139;
          *(_OWORD *)size_t v6 = v139;
          *((_OWORD *)v6 + 1) = v139;
          uint64_t v205 = 0;
          uint64_t v206 = 0;
          char v207 = 0;
          uint64_t v208 = 0;
          uint64_t v209 = 0;
          char v210 = 0;
          char v211 = 0;
          uint64_t v212 = 0;
          long long v203 = 0u;
          memset(v204, 0, 25);
          int v140 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(v138, v118, st_ino, (std::vector<std::csub_match> *)&v203, st_rdev | 0x860u);
          uint64_t v141 = v205;
          unint64_t v142 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v203 + 1) - v203) >> 3);
          __darwin_time_t v143 = v202.st_atimespec.tv_sec;
          __darwin_time_t v144 = v202.st_atimespec.tv_nsec;
          unint64_t v145 = 0xAAAAAAAAAAAAAAABLL * ((v202.st_atimespec.tv_nsec - v202.st_atimespec.tv_sec) >> 3);
          if (v142 <= v145)
          {
            if (v142 < v145)
            {
              __darwin_time_t v144 = v202.st_atimespec.tv_sec + 8 * ((uint64_t)(*((void *)&v203 + 1) - v203) >> 3);
              v202.st_atimespec.tv_nseCC_SHA256_CTX c = v144;
            }
          }
          else
          {
            std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append((std::vector<std::ssub_match> *)&v202.st_atimespec, v142 - v145);
            __darwin_time_t v143 = v202.st_atimespec.tv_sec;
            __darwin_time_t v144 = v202.st_atimespec.tv_nsec;
          }
          if (v144 == v143)
          {
            uint64_t v158 = (char *)v203;
          }
          else
          {
            uint64_t v156 = 0;
            unint64_t v157 = 0;
            uint64_t v159 = *((void *)&v203 + 1);
            uint64_t v158 = (char *)v203;
            do
            {
              if (0xAAAAAAAAAAAAAAABLL * ((v159 - (uint64_t)v158) >> 3) <= v157) {
                std::string::size_type v160 = &v204[8];
              }
              else {
                std::string::size_type v160 = &v158[v156];
              }
              *(void *)(v143 + v156) = (char *)v118 + *(void *)v160 - v141;
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v203 + 1) - v203) >> 3) <= v157) {
                uint64_t v161 = &v204[16];
              }
              else {
                uint64_t v161 = (void *)(v203 + v156 + 8);
              }
              *(void *)(v202.st_atimespec.tv_sec + v156 + 8) = (char *)v118 + *v161 - v141;
              uint64_t v159 = *((void *)&v203 + 1);
              uint64_t v158 = (char *)v203;
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v203 + 1) - v203) >> 3) <= v157) {
                uint64_t v162 = v6;
              }
              else {
                uint64_t v162 = (char *)(v203 + v156 + 16);
              }
              char v163 = *v162;
              __darwin_time_t v143 = v202.st_atimespec.tv_sec;
              *(unsigned char *)(v202.st_atimespec.tv_sec + v156 + 16) = v163;
              ++v157;
              v156 += 24;
            }
            while (v157 < 0xAAAAAAAAAAAAAAABLL * ((v202.st_atimespec.tv_nsec - v143) >> 3));
          }
          v202.st_mtimespec.tv_nseCC_SHA256_CTX c = (uint64_t)st_ino;
          v202.st_ctimespec.tv_seCC_SHA256_CTX c = (__darwin_time_t)st_ino;
          v202.st_birthtimespec.tv_seCC_SHA256_CTX c = (__darwin_time_t)v118 + v205 - v141;
          v202.st_birthtimespec.tv_nseCC_SHA256_CTX c = (uint64_t)v118 + v206 - v141;
          LOBYTE(v202.st_size) = v207;
          LOBYTE(v202.st_ctimespec.tv_nsec) = 0;
          v202.st_blocks = (blkcnt_t)v118 + v208 - v141;
          *(void *)&v202.st_blksize_t size = (char *)v118 + v209 - v141;
          LOBYTE(v202.st_gen) = v210;
          LOBYTE(v202.st_qspare[0]) = v211;
          if (v158)
          {
            *((void *)&v203 + 1) = v158;
            operator delete(v158);
          }
          if (v140)
          {
            uint64_t v27 = (void *)v202.st_atimespec.tv_sec;
LABEL_38:
            if ((void *)v202.st_atimespec.tv_nsec != v27) {
              continue;
            }
            while (2)
            {
              if (v113 == v112) {
                goto LABEL_326;
              }
              char v167 = *v113;
              if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
              {
                size_t v164 = (v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                if (v195.__r_.__value_.__l.__size_ == v164)
                {
                  if ((v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
                    std::string::__throw_length_error[abi:ne180100]();
                  }
                  int v168 = (std::string *)v195.__r_.__value_.__r.__words[0];
                  size_t v169 = 0x7FFFFFFFFFFFFFF7;
                  if (v164 < 0x3FFFFFFFFFFFFFF3)
                  {
LABEL_283:
                    if (v164 + 1 > 2 * v164) {
                      unint64_t v170 = v164 + 1;
                    }
                    else {
                      unint64_t v170 = 2 * v164;
                    }
                    uint64_t v171 = (v170 & 0x7FFFFFFFFFFFFFF8) + 8;
                    if ((v170 | 7) != 0x17) {
                      uint64_t v171 = v170 | 7;
                    }
                    if (v170 >= 0x17) {
                      size_t v169 = v171 + 1;
                    }
                    else {
                      size_t v169 = 23;
                    }
                  }
                  uint64_t v172 = (std::string *)operator new(v169);
                  std::string v165 = v172;
                  if (!v164 || (memmove(v172, v168, v164), v164 != 22)) {
                    operator delete(v168);
                  }
                  v195.__r_.__value_.__r.__words[0] = (std::string::size_type)v165;
                  v195.__r_.__value_.__r.__words[2] = v169 | 0x8000000000000000;
                }
                else
                {
                  size_t v164 = v195.__r_.__value_.__l.__size_;
                  std::string v165 = (std::string *)v195.__r_.__value_.__r.__words[0];
                }
                v195.__r_.__value_.__l.__size_ = v164 + 1;
              }
              else
              {
                if (HIBYTE(v195.__r_.__value_.__r.__words[2]) == 22)
                {
                  int v168 = &v195;
                  size_t v164 = 22;
                  goto LABEL_283;
                }
                size_t v164 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
                *((unsigned char *)&v195.__r_.__value_.__s + 23) = (*((unsigned char *)&v195.__r_.__value_.__s + 23) + 1) & 0x7F;
                std::string v165 = &v195;
              }
              unint64_t v166 = (char *)v165 + v164;
              *unint64_t v166 = v167;
              v166[1] = 0;
              ++v113;
              continue;
            }
          }
          unint64_t v192 = v112;
          blkcnt_t v193 = (blkcnt_t)v113;
          int v118 = (std::sub_match<const char *> *)((char *)v118 + 1);
          int v115 = v202.st_rdev;
          st_ino = (std::sub_match<const char *> *)v202.st_ino;
LABEL_208:
          __int16 v120 = v115;
          v202.dev_t st_rdev = v115 | 0x80;
          uint64_t v121 = *(void *)&v202.st_uid;
          *(void *)&long long v122 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v122 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *((_OWORD *)v6 + 2) = v122;
          *((_OWORD *)v6 + 3) = v122;
          *(_OWORD *)size_t v6 = v122;
          *((_OWORD *)v6 + 1) = v122;
          uint64_t v205 = 0;
          uint64_t v206 = 0;
          char v207 = 0;
          uint64_t v208 = 0;
          uint64_t v209 = 0;
          char v210 = 0;
          char v211 = 0;
          uint64_t v212 = 0;
          long long v203 = 0u;
          memset(v204, 0, 25);
          uint64_t v191 = (uint64_t)st_ino;
          char v190 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(v121, v118, st_ino, (std::vector<std::csub_match> *)&v203, v115 | 0x80u);
          uint64_t v123 = v205;
          unint64_t v124 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v203 + 1) - v203) >> 3);
          __darwin_time_t v125 = v202.st_atimespec.tv_sec;
          size_t v126 = (void *)v202.st_atimespec.tv_nsec;
          unint64_t v127 = 0xAAAAAAAAAAAAAAABLL * ((v202.st_atimespec.tv_nsec - v202.st_atimespec.tv_sec) >> 3);
          unint64_t v128 = v124 - v127;
          if (v124 <= v127)
          {
            if (v124 < v127)
            {
              size_t v126 = (void *)(v202.st_atimespec.tv_sec + 8 * ((uint64_t)(*((void *)&v203 + 1) - v203) >> 3));
              v202.st_atimespec.tv_nseCC_SHA256_CTX c = (uint64_t)v126;
            }
            size_t v6 = v194;
            size_t v113 = (char *)v193;
            __int16 v136 = v120;
            if (v126 != (void *)v202.st_atimespec.tv_sec)
            {
LABEL_235:
              uint64_t v147 = 0;
              unint64_t v148 = 0;
              uint64_t v149 = *((void *)&v203 + 1);
              uint64_t v150 = v203;
              do
              {
                unint64_t v151 = 0xAAAAAAAAAAAAAAABLL * ((v149 - v150) >> 3);
                xpc_object_t v152 = (void *)(v150 + v147);
                if (v151 <= v148) {
                  long long v153 = &v204[8];
                }
                else {
                  long long v153 = v152;
                }
                *(void *)(v125 + v147) = (char *)v118 + *v153 - v123;
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v203 + 1) - v203) >> 3) <= v148) {
                  int64_t v154 = &v204[16];
                }
                else {
                  int64_t v154 = (void *)(v203 + v147 + 8);
                }
                *(void *)(v202.st_atimespec.tv_sec + v147 + 8) = (char *)v118 + *v154 - v123;
                uint64_t v149 = *((void *)&v203 + 1);
                uint64_t v150 = v203;
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v203 + 1) - v203) >> 3) <= v148) {
                  uint64_t v155 = v6;
                }
                else {
                  uint64_t v155 = (char *)(v203 + v147 + 16);
                }
                __darwin_time_t v125 = v202.st_atimespec.tv_sec;
                *(unsigned char *)(v202.st_atimespec.tv_sec + v147 + 16) = *v155;
                ++v148;
                v147 += 24;
              }
              while (v148 < 0xAAAAAAAAAAAAAAABLL * ((v202.st_atimespec.tv_nsec - v125) >> 3));
            }
          }
          else
          {
            if (0xAAAAAAAAAAAAAAABLL * ((v202.st_mtimespec.tv_sec - v202.st_atimespec.tv_nsec) >> 3) >= v128)
            {
              uint64_t v133 = v202.st_atimespec.tv_nsec + 24 * v128;
              uint64_t v146 = 8 * ((uint64_t)(*((void *)&v203 + 1) - v203) >> 3)
                   - 8 * ((v202.st_atimespec.tv_nsec - v202.st_atimespec.tv_sec) >> 3);
              do
              {
                void *v126 = 0;
                v126[1] = 0;
                *((unsigned char *)v126 + 16) = 0;
                v126 += 3;
                v146 -= 24;
              }
              while (v146);
              v202.st_atimespec.tv_nseCC_SHA256_CTX c = v133;
              size_t v6 = v194;
              size_t v113 = (char *)v193;
              __int16 v136 = v120;
            }
            else
            {
              if (v124 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v129 = 0x5555555555555556 * ((v202.st_mtimespec.tv_sec - v202.st_atimespec.tv_sec) >> 3);
              if (v129 <= v124) {
                unint64_t v129 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v203 + 1) - v203) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((v202.st_mtimespec.tv_sec - v202.st_atimespec.tv_sec) >> 3) >= 0x555555555555555) {
                unint64_t v130 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v130 = v129;
              }
              if (v130 > 0xAAAAAAAAAAAAAAALL) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              std::string::size_type v131 = operator new(24 * v130);
              __darwin_time_t v132 = (__darwin_time_t)v131 + 24 * v127;
              uint64_t v133 = (uint64_t)v131 + 24 * v124;
              uint64_t v134 = 24 * v124 - 24 * v127;
              __darwin_time_t v135 = v132;
              do
              {
                *(void *)__darwin_time_t v135 = 0;
                *(void *)(v135 + 8) = 0;
                *(unsigned char *)(v135 + 16) = 0;
                v135 += 24;
                v134 -= 24;
              }
              while (v134);
              size_t v113 = (char *)v193;
              __int16 v136 = v120;
              if (v126 != (void *)v125)
              {
                do
                {
                  long long v137 = *(_OWORD *)(v126 - 3);
                  *(void *)(v132 - 8) = *(v126 - 1);
                  *(_OWORD *)(v132 - 24) = v137;
                  v132 -= 24;
                  v126 -= 3;
                }
                while (v126 != (void *)v125);
                size_t v126 = (void *)v125;
              }
              v202.st_atimespec.tv_seCC_SHA256_CTX c = v132;
              v202.st_atimespec.tv_nseCC_SHA256_CTX c = v133;
              v202.st_mtimespec.tv_seCC_SHA256_CTX c = (__darwin_time_t)v131 + 24 * v130;
              size_t v6 = v194;
              if (v126)
              {
                operator delete(v126);
                uint64_t v133 = v202.st_atimespec.tv_nsec;
              }
            }
            __darwin_time_t v125 = v202.st_atimespec.tv_sec;
            if (v133 != v202.st_atimespec.tv_sec) {
              goto LABEL_235;
            }
          }
          v202.st_mtimespec.tv_nseCC_SHA256_CTX c = v191;
          v202.st_ctimespec.tv_seCC_SHA256_CTX c = v191;
          v202.st_birthtimespec.tv_seCC_SHA256_CTX c = (__darwin_time_t)v118 + v205 - v123;
          v202.st_birthtimespec.tv_nseCC_SHA256_CTX c = (uint64_t)v118 + v206 - v123;
          LOBYTE(v202.st_size) = v207;
          LOBYTE(v202.st_ctimespec.tv_nsec) = 0;
          v202.st_blocks = (blkcnt_t)v118 + v208 - v123;
          *(void *)&v202.st_blksize_t size = (char *)v118 + v209 - v123;
          LOBYTE(v202.st_gen) = v210;
          if ((v136 & 0x800) == 0) {
            v202.st_qspare[1] = (uint64_t_t)v118 + v205 - v123;
          }
          LOBYTE(v202.st_qspare[0]) = v211;
          std::string::size_type v112 = v192;
          if ((void)v203)
          {
            *((void *)&v203 + 1) = v203;
            operator delete((void *)v203);
          }
          uint64_t v27 = (void *)v202.st_atimespec.tv_sec;
          if (v190) {
            goto LABEL_38;
          }
        }
        break;
      }
      if (v27)
      {
        v202.st_atimespec.tv_nseCC_SHA256_CTX c = (uint64_t)v27;
        operator delete(v27);
      }
      uint64_t v27 = 0;
      LOBYTE(v202.st_qspare[0]) = 0;
      memset(&v202.st_atimespec, 0, 41);
      memset(&v202.st_birthtimespec, 0, 17);
      memset(&v202.st_blocks, 0, 17);
      v202.st_qspare[1] = 0;
      goto LABEL_38;
    }
    if (!v22)
    {
      unsigned int v5 = v187;
      if (!v202.st_atimespec.tv_nsec) {
        goto LABEL_302;
      }
LABEL_301:
      v202.st_atimespec.tv_nseCC_SHA256_CTX c = (uint64_t)tv_nsec;
      operator delete(tv_nsec);
      goto LABEL_302;
    }
    do
    {
      while (1)
      {
        char first = (char)v21->first;
        unsigned __int8 v175 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
          break;
        }
        if (HIBYTE(v195.__r_.__value_.__r.__words[2]) == 22)
        {
          std::string v176 = &v195;
          size_t v177 = 22;
LABEL_312:
          if (v177 + 1 > 2 * v177) {
            unint64_t v179 = v177 + 1;
          }
          else {
            unint64_t v179 = 2 * v177;
          }
          uint64_t v180 = (v179 & 0x7FFFFFFFFFFFFFF8) + 8;
          if ((v179 | 7) != 0x17) {
            uint64_t v180 = v179 | 7;
          }
          if (v179 >= 0x17) {
            size_t v178 = v180 + 1;
          }
          else {
            size_t v178 = 23;
          }
          goto LABEL_320;
        }
        *((unsigned char *)&v195.__r_.__value_.__s + 23) = (*((unsigned char *)&v195.__r_.__value_.__s + 23) + 1) & 0x7F;
        uint64_t v173 = (char *)&v195 + v175;
        *uint64_t v173 = first;
        v173[1] = 0;
        long long v21 = (std::sub_match<const char *> *)((char *)v21 + 1);
        if (!--v22) {
          goto LABEL_326;
        }
      }
      size_t v177 = (v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v195.__r_.__value_.__l.__size_ != v177)
      {
        size_t v177 = v195.__r_.__value_.__l.__size_;
        std::string::size_type v182 = v195.__r_.__value_.__r.__words[0];
        goto LABEL_325;
      }
      if ((v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      std::string v176 = (std::string *)v195.__r_.__value_.__r.__words[0];
      size_t v178 = 0x7FFFFFFFFFFFFFF7;
      if (v177 < 0x3FFFFFFFFFFFFFF3) {
        goto LABEL_312;
      }
LABEL_320:
      long long v181 = operator new(v178);
      std::string::size_type v182 = (std::string::size_type)v181;
      if (!v177 || (memmove(v181, v176, v177), v177 != 22)) {
        operator delete(v176);
      }
      v195.__r_.__value_.__r.__words[0] = v182;
      v195.__r_.__value_.__r.__words[2] = v178 | 0x8000000000000000;
LABEL_325:
      v195.__r_.__value_.__l.__size_ = v177 + 1;
      v183 = (char *)(v182 + v177);
      char *v183 = first;
      v183[1] = 0;
      long long v21 = (std::sub_match<const char *> *)((char *)v21 + 1);
      --v22;
    }
    while (v22);
LABEL_326:
    tv_nseCC_SHA256_CTX c = (void *)v202.st_atimespec.tv_sec;
    a1 = v186;
    unsigned int v5 = v187;
    if (v202.st_atimespec.tv_sec) {
      goto LABEL_301;
    }
LABEL_302:
    if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v197.__r_.__value_.__l.__data_);
      std::string v197 = v195;
      if (SHIBYTE(__p[2]) < 0) {
LABEL_5:
      }
        operator delete(__p[0]);
    }
    else
    {
      std::string v197 = v195;
      if (SHIBYTE(__p[2]) < 0) {
        goto LABEL_5;
      }
    }
  }
  *(unsigned char *)(v185 + 23) = 0;
  *(unsigned char *)uint64_t v185 = 0;
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v197.__r_.__value_.__l.__data_);
  }
LABEL_333:
  long long v184 = (std::__shared_weak_count *)v201;
  if ((void)v201 && !atomic_fetch_add((atomic_ullong *volatile)(v201 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
    std::__shared_weak_count::__release_weak(v184);
  }
  std::locale::~locale(v198);
}

void sub_1C5B19594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::locale a43)
{
}

void sub_1C5B195A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,std::locale a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a59 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v59 - 185) < 0) {
    operator delete(*(void **)(v59 - 208));
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a46);
  _Unwind_Resume(a1);
}

void support::fs::createUniquePath(const char *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = a1;
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  v4.tv_seCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
  v4.tv_nseCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&__src.st_blksize_t size = v4;
  *(timespec *)__src.st_qspare = v4;
  __src.st_birthtimespeCC_SHA256_CTX c = v4;
  *(timespec *)&__src.st_size_t size = v4;
  __src.st_mtimespeCC_SHA256_CTX c = v4;
  __src.st_ctimespeCC_SHA256_CTX c = v4;
  *(timespec *)&__src.st_uid = v4;
  __src.st_atimespeCC_SHA256_CTX c = v4;
  *(timespec *)&__src.st_dev = v4;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (!stat(a1, &__src))
  {
    v5.tv_seCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
    v5.tv_nseCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
    timespec v27 = v5;
    timespec v28 = v5;
    timespec v25 = v5;
    timespec v26 = v5;
    timespec v23 = v5;
    timespec v24 = v5;
    *(timespec *)__src.st_qspare = v5;
    timespec v22 = v5;
    *(timespec *)&__src.st_size_t size = v5;
    *(timespec *)&__src.st_blksize_t size = v5;
    __src.st_ctimespeCC_SHA256_CTX c = v5;
    __src.st_birthtimespeCC_SHA256_CTX c = v5;
    __src.st_atimespeCC_SHA256_CTX c = v5;
    __src.st_mtimespeCC_SHA256_CTX c = v5;
    *(timespec *)&__src.st_dev = v5;
    *(timespec *)&__src.st_uid = v5;
    snprintf((char *)&__src, 0x100uLL, "-%u", 1);
    memset(a2, 170, sizeof(std::string));
    size_t v6 = strlen((const char *)&__src);
    if (v6 > 0x7FFFFFFFFFFFFFF7) {
LABEL_32:
    }
      std::string::__throw_length_error[abi:ne180100]();
    __darwin_ino64_t v7 = v6;
    int v8 = 2;
    while (v7 < 0x17)
    {
      HIBYTE(__dst.st_gid) = v7;
      p_dst = &__dst;
      if (v7) {
        goto LABEL_15;
      }
LABEL_16:
      *((unsigned char *)&p_dst->st_dev + v7) = 0;
      int v13 = v2[23];
      if (v13 >= 0) {
        int v14 = v2;
      }
      else {
        int v14 = *(const std::string::value_type **)v2;
      }
      if (v13 >= 0) {
        std::string::size_type v15 = *((unsigned __int8 *)v2 + 23);
      }
      else {
        std::string::size_type v15 = *((void *)v2 + 1);
      }
      size_t v16 = std::string::insert((std::string *)&__dst, 0, v14, v15);
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      a2->__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__dst.st_gid) < 0) {
        operator delete(*(void **)&__dst.st_dev);
      }
      v18.tv_seCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
      v18.tv_nseCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&__dst.st_blksize_t size = v18;
      *(timespec *)__dst.st_qspare = v18;
      __dst.st_birthtimespeCC_SHA256_CTX c = v18;
      *(timespec *)&__dst.st_size_t size = v18;
      __dst.st_mtimespeCC_SHA256_CTX c = v18;
      __dst.st_ctimespeCC_SHA256_CTX c = v18;
      *(timespec *)&__dst.st_uid = v18;
      __dst.st_atimespeCC_SHA256_CTX c = v18;
      *(timespec *)&__dst.st_dev = v18;
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v19 = (const char *)a2;
      }
      else {
        long long v19 = (const char *)a2->__r_.__value_.__r.__words[0];
      }
      if (stat(v19, &__dst)) {
        return;
      }
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
        operator delete(a2->__r_.__value_.__l.__data_);
      }
      v9.tv_seCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
      v9.tv_nseCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
      timespec v27 = v9;
      timespec v28 = v9;
      timespec v25 = v9;
      timespec v26 = v9;
      timespec v23 = v9;
      timespec v24 = v9;
      *(timespec *)__src.st_qspare = v9;
      timespec v22 = v9;
      *(timespec *)&__src.st_size_t size = v9;
      *(timespec *)&__src.st_blksize_t size = v9;
      __src.st_ctimespeCC_SHA256_CTX c = v9;
      __src.st_birthtimespeCC_SHA256_CTX c = v9;
      __src.st_atimespeCC_SHA256_CTX c = v9;
      __src.st_mtimespeCC_SHA256_CTX c = v9;
      *(timespec *)&__src.st_dev = v9;
      *(timespec *)&__src.st_uid = v9;
      snprintf((char *)&__src, 0x100uLL, "-%u", v8);
      memset(a2, 170, sizeof(std::string));
      __darwin_ino64_t v7 = strlen((const char *)&__src);
      ++v8;
      if (v7 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_32;
      }
    }
    uint64_t v11 = (v7 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (stat *)operator new(v11 + 1);
    __dst.st_ino = v7;
    *(void *)&__dst.st_uid = v12 | 0x8000000000000000;
    *(void *)&__dst.st_dev = p_dst;
LABEL_15:
    memcpy(p_dst, &__src, v7);
    goto LABEL_16;
  }
  if (v2[23] < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v2, *((void *)v2 + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v2;
    a2->__r_.__value_.__r.__words[2] = *((void *)v2 + 2);
  }
}

void sub_1C5B1996C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL support::fs::createDir(const char *a1, mode_t a2, int a3)
{
  timespec v5 = a1;
  v6.tv_seCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
  v6.tv_nseCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v29.st_blksize_t size = v6;
  *(timespec *)v29.st_qspare = v6;
  v29.st_birthtimespeCC_SHA256_CTX c = v6;
  *(timespec *)&v29.st_size_t size = v6;
  v29.st_mtimespeCC_SHA256_CTX c = v6;
  v29.st_ctimespeCC_SHA256_CTX c = v6;
  *(timespec *)&v29.st_uid = v6;
  v29.st_atimespeCC_SHA256_CTX c = v6;
  *(timespec *)&v29.st_dev = v6;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (!stat(a1, &v29)) {
    return 1;
  }
  if (!a3)
  {
    if (v5[23] >= 0) {
      long long v21 = v5;
    }
    else {
      long long v21 = *(const char **)v5;
    }
    return mkdir(v21, a2) == 0;
  }
  v27[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v28 = 0x1AAAAAAAAAAAAAALL;
  v27[0] = (void *)0xAAAAAAAAAAAA002FLL;
  memset(&__p[32], 170, 24);
  ctu::tokenize();
  memset(__p, 0, 24);
  if (v5[23] >= 0) {
    __darwin_ino64_t v7 = v5;
  }
  else {
    __darwin_ino64_t v7 = *(const char **)v5;
  }
  if (*v7 == 47)
  {
    *(_OWORD *)std::string __p = *(_OWORD *)v27;
    *(void *)&__p[16] = v28;
  }
  uint64_t v8 = *(void *)&__p[32];
  if (*(void *)&__p[40] != *(void *)&__p[32])
  {
    unint64_t v9 = 0;
    unsigned int v10 = 1;
    while (1)
    {
      if (v10 != 1)
      {
        if (v28 >= 0) {
          uint64_t v11 = v27;
        }
        else {
          uint64_t v11 = (void **)v27[0];
        }
        if (v28 >= 0) {
          std::string::size_type v12 = HIBYTE(v28);
        }
        else {
          std::string::size_type v12 = (std::string::size_type)v27[1];
        }
        std::string::append((std::string *)__p, (const std::string::value_type *)v11, v12);
        uint64_t v8 = *(void *)&__p[32];
      }
      uint64_t v13 = v8 + 24 * v9;
      int v14 = *(char *)(v13 + 23);
      std::string::size_type v15 = v14 >= 0 ? (const std::string::value_type *)v13 : *(const std::string::value_type **)v13;
      std::string::size_type v16 = v14 >= 0 ? *(unsigned __int8 *)(v13 + 23) : *(void *)(v13 + 8);
      std::string::append((std::string *)__p, v15, v16);
      v17.tv_seCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
      v17.tv_nseCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&v29.st_blksize_t size = v17;
      *(timespec *)v29.st_qspare = v17;
      v29.st_birthtimespeCC_SHA256_CTX c = v17;
      *(timespec *)&v29.st_size_t size = v17;
      v29.st_mtimespeCC_SHA256_CTX c = v17;
      v29.st_ctimespeCC_SHA256_CTX c = v17;
      *(timespec *)&v29.st_uid = v17;
      v29.st_atimespeCC_SHA256_CTX c = v17;
      *(timespec *)&v29.st_dev = v17;
      timespec v18 = __p[23] >= 0 ? __p : *(const char **)__p;
      if (stat(v18, &v29))
      {
        long long v19 = __p[23] >= 0 ? __p : *(const char **)__p;
        if (mkdir(v19, a2)) {
          break;
        }
      }
      unint64_t v9 = v10;
      uint64_t v8 = *(void *)&__p[32];
      ++v10;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&__p[40] - *(void *)&__p[32]) >> 3) <= v9) {
        goto LABEL_42;
      }
    }
    uint64_t v20 = 0;
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t v20 = 1;
  if ((__p[23] & 0x80000000) != 0) {
LABEL_43:
  }
    operator delete(*(void **)__p);
LABEL_44:
  uint64_t v22 = *(void *)&__p[32];
  if (*(void *)&__p[32])
  {
    uint64_t v23 = *(void *)&__p[40];
    timespec v24 = *(void **)&__p[32];
    if (*(void *)&__p[40] != *(void *)&__p[32])
    {
      do
      {
        if (*(char *)(v23 - 1) < 0) {
          operator delete(*(void **)(v23 - 24));
        }
        v23 -= 24;
      }
      while (v23 != v22);
      timespec v24 = *(void **)&__p[32];
    }
    *(void *)&__p[40] = v22;
    operator delete(v24);
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(v27[0]);
  }
  return v20;
}

void sub_1C5B19C30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a14 < 0)
  {
    operator delete(__p);
    std::vector<std::string>::~vector[abi:ne180100](&a16);
    if ((a24 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    std::vector<std::string>::~vector[abi:ne180100](&a16);
    if ((a24 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(a19);
  _Unwind_Resume(a1);
}

BOOL support::fs::rename(const std::__fs::filesystem::path *a1, const std::__fs::filesystem::path *a2, std::error_code *a3)
{
  if ((a1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    a1 = (const std::__fs::filesystem::path *)a1->__pn_.__r_.__value_.__r.__words[0];
  }
  if ((a2->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    a2 = (const std::__fs::filesystem::path *)a2->__pn_.__r_.__value_.__r.__words[0];
  }
  rename(a1, a2, a3);
  return v3 == 0;
}

BOOL support::fs::chmod(const char *a1, mode_t a2)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  return chmod(a1, a2) == 0;
}

uint64_t support::fs::removeDir(const char *a1)
{
  timespec v1 = (const std::__fs::filesystem::path *)a1;
  v46[2] = *MEMORY[0x1E4F143B8];
  v2.tv_seCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
  v2.tv_nseCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&__dst.st_blkstd::string::size_type size = v2;
  *(timespec *)__dst.st_qspare = v2;
  __dst.st_birthtimespeCC_SHA256_CTX c = v2;
  *(timespec *)&__dst.st_std::string::size_type size = v2;
  __dst.st_mtimespeCC_SHA256_CTX c = v2;
  __dst.st_ctimespeCC_SHA256_CTX c = v2;
  *(timespec *)&__dst.st_uid = v2;
  __dst.st_atimespeCC_SHA256_CTX c = v2;
  *(timespec *)&__dst.st_dev = v2;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (stat(a1, &__dst)) {
    return 1;
  }
  size_t v42 = 0;
  int v43 = 0;
  uint64_t v44 = 0;
  support::fs::readDir((const char *)v1, (uint64_t)&v42);
  unsigned int v5 = 0;
  while (1)
  {
    unsigned int v6 = v5;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)v43 - (unsigned char *)v42) >> 3);
    BOOL v3 = v7 <= v5;
    if (v7 <= v5) {
      break;
    }
    uint64_t v8 = (char *)v42 + 24 * v5;
    memset(&__p, 170, sizeof(__p));
    if (v8[23] < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v8, *((void *)v8 + 1));
    }
    else
    {
      long long v9 = *(_OWORD *)v8;
      __p.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
    }
    int v10 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (size == 2)
    {
      uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t p_p = &__p;
      }
      if (LOWORD(p_p->__r_.__value_.__l.__data_) == 11822)
      {
LABEL_58:
        char v30 = 1;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_7;
        }
        goto LABEL_6;
      }
    }
    else if (size == 1)
    {
      std::string::size_type v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v12 = &__p;
      }
      if (v12->__r_.__value_.__s.__data_[0] == 46) {
        goto LABEL_58;
      }
    }
    int v14 = SHIBYTE(v1->__pn_.__r_.__value_.__r.__words[2]);
    if (v14 >= 0) {
      size_t v15 = HIBYTE(v1->__pn_.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v15 = v1->__pn_.__r_.__value_.__l.__size_;
    }
    unint64_t v16 = v15 + 1;
    memset(&__dst, 170, 24);
    if (v15 + 1 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v16 >= 0x17)
    {
      uint64_t v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17) {
        uint64_t v18 = v16 | 7;
      }
      uint64_t v19 = v18 + 1;
      p_dst = (char *)operator new(v18 + 1);
      __dst.st_ino = v15 + 1;
      *(void *)&__dst.st_uid = v19 | 0x8000000000000000;
      *(void *)&__dst.st_dev = p_dst;
    }
    else
    {
      memset(&__dst, 0, 24);
      p_dst = (char *)&__dst;
      HIBYTE(__dst.st_gid) = v15 + 1;
      if (!v15) {
        goto LABEL_38;
      }
    }
    if (v14 >= 0) {
      uint64_t v20 = v1;
    }
    else {
      uint64_t v20 = (const std::__fs::filesystem::path *)v1->__pn_.__r_.__value_.__r.__words[0];
    }
    memmove(p_dst, v20, v15);
LABEL_38:
    *(_WORD *)&p_dst[v15] = 47;
    if (v10 >= 0) {
      long long v21 = &__p;
    }
    else {
      long long v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    uint64_t v22 = std::string::append((std::string *)&__dst, (const std::string::value_type *)v21, size);
    std::string::size_type v23 = v22->__r_.__value_.__r.__words[0];
    v46[0] = v22->__r_.__value_.__l.__size_;
    *(void *)((char *)v46 + 7) = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
    char v24 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    __p.__r_.__value_.__r.__words[0] = v23;
    __p.__r_.__value_.__l.__size_ = v46[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v46 + 7);
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = v24;
    if (SHIBYTE(__dst.st_gid) < 0)
    {
      operator delete(*(void **)&__dst.st_dev);
      char v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      std::string::size_type v23 = __p.__r_.__value_.__r.__words[0];
    }
    v25.tv_seCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
    v25.tv_nseCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&__dst.st_blkstd::string::size_type size = v25;
    *(timespec *)__dst.st_qspare = v25;
    __dst.st_birthtimespeCC_SHA256_CTX c = v25;
    *(timespec *)&__dst.st_std::string::size_type size = v25;
    __dst.st_mtimespeCC_SHA256_CTX c = v25;
    __dst.st_ctimespeCC_SHA256_CTX c = v25;
    *(timespec *)&__dst.st_uid = v25;
    __dst.st_atimespeCC_SHA256_CTX c = v25;
    if (v24 >= 0) {
      timespec v26 = &__p;
    }
    else {
      timespec v26 = (std::string *)v23;
    }
    *(timespec *)&__dst.st_dev = v25;
    if (!stat((const char *)v26, &__dst)
      && ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? (uint64_t v31 = &__p)
        : (uint64_t v31 = (std::string *)__p.__r_.__value_.__r.__words[0]),
          (v32 = opendir((const char *)v31), (char v33 = v32) != 0) && (v34 = readdir(v32), closedir(v33), v34)))
    {
      std::string::append(&__p, "/", 1uLL);
      char v30 = support::fs::removeDir(&__p);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_7;
      }
    }
    else
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v28 = (const std::__fs::filesystem::path *)&__p;
      }
      else {
        uint64_t v28 = (const std::__fs::filesystem::path *)__p.__r_.__value_.__r.__words[0];
      }
      if (!remove(v28, v27)) {
        goto LABEL_58;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        stat v29 = &__p;
      }
      else {
        stat v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      char v30 = unlink((const char *)v29) == 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_7;
      }
    }
LABEL_6:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_7:
    unsigned int v5 = v6 + 1;
    if ((v30 & 1) == 0) {
      goto LABEL_75;
    }
  }
  if ((v1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v35 = v1;
  }
  else {
    size_t v35 = (const std::__fs::filesystem::path *)v1->__pn_.__r_.__value_.__r.__words[0];
  }
  if (remove(v35, v4))
  {
    if ((v1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v36 = (const char *)v1;
    }
    else {
      unint64_t v36 = (const char *)v1->__pn_.__r_.__value_.__r.__words[0];
    }
    unlink(v36);
  }
LABEL_75:
  uint64_t v37 = (void **)v42;
  if (v42)
  {
    uint64_t v38 = v43;
    timespec v39 = v42;
    if (v43 != v42)
    {
      do
      {
        if (*((char *)v38 - 1) < 0) {
          operator delete(*(v38 - 3));
        }
        v38 -= 3;
      }
      while (v38 != v37);
      timespec v39 = v42;
    }
    int v43 = v37;
    operator delete(v39);
  }
  return v3;
}

void sub_1C5B1A11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_1C5B1A134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if ((a16 & 0x80000000) == 0)
  {
    std::vector<std::string>::~vector[abi:ne180100](&a17);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  std::vector<std::string>::~vector[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

BOOL support::fs::removeFile(const std::__fs::filesystem::path *a1, std::error_code *a2)
{
  timespec v2 = a1;
  if ((a1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    a1 = (const std::__fs::filesystem::path *)a1->__pn_.__r_.__value_.__r.__words[0];
  }
  if (!remove(a1, a2)) {
    return 1;
  }
  if ((v2->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v3 = (const char *)v2;
  }
  else {
    BOOL v3 = (const char *)v2->__pn_.__r_.__value_.__r.__words[0];
  }
  return unlink(v3) == 0;
}

uint64_t support::fs::removeDirContents(const char *a1, unint64_t a2)
{
  BOOL v3 = a1;
  char v62 = 0;
  unsigned __int8 v63 = 0;
  uint64_t v64 = 0;
  support::fs::readDir(a1, (uint64_t)&v62);
  time_t v56 = time(0);
  unsigned int v5 = (void **)v62;
  timespec v4 = v63;
  if (v62 == v63)
  {
    char v52 = 1;
    if (v62) {
      goto LABEL_105;
    }
    return v52 & 1;
  }
  double v6 = (double)a2;
  char v57 = 1;
  while (1)
  {
    memset(&v61, 170, sizeof(v61));
    if (*((char *)v5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v61, (const std::string::value_type *)*v5, (std::string::size_type)v5[1]);
    }
    else
    {
      long long v7 = *(_OWORD *)v5;
      v61.__r_.__value_.__r.__words[2] = (std::string::size_type)v5[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v7;
    }
    int v8 = SHIBYTE(v61.__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = (v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? HIBYTE(v61.__r_.__value_.__r.__words[2])
       : v61.__r_.__value_.__l.__size_;
    if (v9 == 2) {
      break;
    }
    if (v9 == 1)
    {
      int v10 = (std::string *)v61.__r_.__value_.__r.__words[0];
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v10 = &v61;
      }
      if (v10->__r_.__value_.__s.__data_[0] == 46) {
        goto LABEL_95;
      }
    }
LABEL_19:
    memset(__p, 170, 24);
    int v12 = v3[23];
    if (v12 >= 0) {
      size_t v13 = *((unsigned __int8 *)v3 + 23);
    }
    else {
      size_t v13 = *((void *)v3 + 1);
    }
    unint64_t v14 = v13 + 1;
    memset(&__dst, 170, 24);
    if (v13 + 1 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v14 >= 0x17)
    {
      int v58 = SHIBYTE(v61.__r_.__value_.__r.__words[2]);
      std::string::size_type v16 = v9;
      timespec v17 = v5;
      uint64_t v18 = v4;
      uint64_t v19 = v3;
      unint64_t v20 = a2;
      uint64_t v21 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17) {
        uint64_t v21 = v14 | 7;
      }
      uint64_t v22 = v21 + 1;
      p_dst = (stat *)operator new(v21 + 1);
      __dst.st_ino = v13 + 1;
      *(void *)&__dst.st_uid = v22 | 0x8000000000000000;
      *(void *)&__dst.st_dev = p_dst;
      a2 = v20;
      BOOL v3 = v19;
      timespec v4 = v18;
      unsigned int v5 = v17;
      std::string::size_type v9 = v16;
      int v8 = v58;
    }
    else
    {
      memset(&__dst, 0, 24);
      p_dst = &__dst;
      HIBYTE(__dst.st_gid) = v13 + 1;
      if (!v13) {
        goto LABEL_33;
      }
    }
    if (v12 >= 0) {
      std::string::size_type v23 = v3;
    }
    else {
      std::string::size_type v23 = *(const char **)v3;
    }
    memmove(p_dst, v23, v13);
LABEL_33:
    *(_WORD *)((char *)&p_dst->st_dev + v13) = 47;
    if (v8 >= 0) {
      char v24 = &v61;
    }
    else {
      char v24 = (std::string *)v61.__r_.__value_.__r.__words[0];
    }
    timespec v25 = std::string::append((std::string *)&__dst, (const std::string::value_type *)v24, v9);
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    __p[2] = (void *)v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.st_gid) < 0)
    {
      operator delete(*(void **)&__dst.st_dev);
      if (!a2) {
        goto LABEL_47;
      }
    }
    else if (!a2)
    {
      goto LABEL_47;
    }
    v27.tv_seCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
    v27.tv_nseCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&__dst.st_blkstd::string::size_type size = v27;
    *(timespec *)__dst.st_qspare = v27;
    __dst.st_birthtimespeCC_SHA256_CTX c = v27;
    *(timespec *)&__dst.st_std::string::size_type size = v27;
    __dst.st_mtimespeCC_SHA256_CTX c = v27;
    __dst.st_ctimespeCC_SHA256_CTX c = v27;
    __dst.st_atimespeCC_SHA256_CTX c = v27;
    *(timespec *)&__dst.st_dev = v27;
    *(timespec *)&__dst.st_uid = v27;
    if (SHIBYTE(__p[2]) >= 0) {
      uint64_t v28 = __p;
    }
    else {
      uint64_t v28 = (void **)__p[0];
    }
    if (!stat((const char *)v28, &__dst) && difftime(v56, __dst.st_ctimespec.tv_sec) >= v6)
    {
LABEL_47:
      v31.tv_seCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
      v31.tv_nseCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&__dst.st_blkstd::string::size_type size = v31;
      *(timespec *)__dst.st_qspare = v31;
      __dst.st_birthtimespeCC_SHA256_CTX c = v31;
      *(timespec *)&__dst.st_std::string::size_type size = v31;
      __dst.st_mtimespeCC_SHA256_CTX c = v31;
      __dst.st_ctimespeCC_SHA256_CTX c = v31;
      __dst.st_atimespeCC_SHA256_CTX c = v31;
      *(timespec *)&__dst.st_dev = v31;
      *(timespec *)&__dst.st_uid = v31;
      if (SHIBYTE(__p[2]) >= 0) {
        unint64_t v32 = __p;
      }
      else {
        unint64_t v32 = (void **)__p[0];
      }
      if (stat((const char *)v32, &__dst)
        || (SHIBYTE(__p[2]) >= 0 ? (unint64_t v36 = __p) : (unint64_t v36 = (void **)__p[0]),
            (v37 = opendir((const char *)v36), (uint64_t v38 = v37) == 0) || (v39 = readdir(v37), closedir(v38), !v39)))
      {
        if (SHIBYTE(__p[2]) >= 0) {
          int v34 = (const std::__fs::filesystem::path *)__p;
        }
        else {
          int v34 = (const std::__fs::filesystem::path *)__p[0];
        }
        if (!remove(v34, v33)
          || (SHIBYTE(__p[2]) >= 0 ? (size_t v35 = __p) : (size_t v35 = (void **)__p[0]), !unlink((const char *)v35)))
        {
LABEL_89:
          int v30 = 0;
          char v57 = 1;
          char v29 = 1;
          if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
            goto LABEL_91;
          }
          goto LABEL_90;
        }
        goto LABEL_59;
      }
      int v40 = v3[23];
      if (v40 >= 0) {
        size_t v41 = *((unsigned __int8 *)v3 + 23);
      }
      else {
        size_t v41 = *((void *)v3 + 1);
      }
      unint64_t v42 = v41 + 1;
      memset(&v59, 170, sizeof(v59));
      if (v41 + 1 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v42 >= 0x17)
      {
        uint64_t v44 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v42 | 7) != 0x17) {
          uint64_t v44 = v42 | 7;
        }
        uint64_t v45 = v44 + 1;
        int v43 = (char *)operator new(v44 + 1);
        v59.__r_.__value_.__l.__size_ = v41 + 1;
        v59.__r_.__value_.__r.__words[2] = v45 | 0x8000000000000000;
        v59.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
      }
      else
      {
        memset(&v59, 0, sizeof(v59));
        int v43 = (char *)&v59;
        *((unsigned char *)&v59.__r_.__value_.__s + 23) = v41 + 1;
        if (!v41) {
          goto LABEL_80;
        }
      }
      if (v40 >= 0) {
        uint64_t v46 = v3;
      }
      else {
        uint64_t v46 = *(const char **)v3;
      }
      memmove(v43, v46, v41);
LABEL_80:
      *(_WORD *)&v43[v41] = 47;
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v47 = &v61;
      }
      else {
        int v47 = (std::string *)v61.__r_.__value_.__r.__words[0];
      }
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v61.__r_.__value_.__l.__size_;
      }
      char v49 = std::string::append(&v59, (const std::string::value_type *)v47, size);
      long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      *(void *)&__dst.st_uid = *((void *)&v49->__r_.__value_.__l + 2);
      *(_OWORD *)&__dst.st_dev = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      char v51 = support::fs::removeDir((const char *)&__dst);
      if (SHIBYTE(__dst.st_gid) < 0)
      {
        operator delete(*(void **)&__dst.st_dev);
        if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_88;
        }
      }
      else if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_88:
        if (v51) {
          goto LABEL_89;
        }
LABEL_59:
        char v57 = 0;
        char v29 = 0;
        int v30 = 2;
        if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
          goto LABEL_91;
        }
        goto LABEL_90;
      }
      operator delete(v59.__r_.__value_.__l.__data_);
      if (v51) {
        goto LABEL_89;
      }
      goto LABEL_59;
    }
    char v29 = 0;
    int v30 = 3;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_91;
    }
LABEL_90:
    operator delete(__p[0]);
LABEL_91:
    if (v29) {
      goto LABEL_95;
    }
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_93;
    }
LABEL_96:
    operator delete(v61.__r_.__value_.__l.__data_);
    if (v30 != 3) {
      goto LABEL_97;
    }
LABEL_3:
    v5 += 3;
    if (v5 == v4) {
      goto LABEL_102;
    }
  }
  uint64_t v11 = (std::string *)v61.__r_.__value_.__r.__words[0];
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v11 = &v61;
  }
  if (LOWORD(v11->__r_.__value_.__l.__data_) != 11822) {
    goto LABEL_19;
  }
LABEL_95:
  int v30 = 0;
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_96;
  }
LABEL_93:
  if (v30 == 3) {
    goto LABEL_3;
  }
LABEL_97:
  if (!v30) {
    goto LABEL_3;
  }
LABEL_102:
  unsigned int v5 = (void **)v62;
  char v52 = v57;
  if (!v62) {
    return v52 & 1;
  }
LABEL_105:
  size_t v53 = v63;
  unint64_t v54 = v5;
  if (v63 != v5)
  {
    do
    {
      if (*((char *)v53 - 1) < 0) {
        operator delete(*(v53 - 3));
      }
      v53 -= 3;
    }
    while (v53 != v5);
    unint64_t v54 = v62;
  }
  unsigned __int8 v63 = v5;
  operator delete(v54);
  return v52 & 1;
}

void sub_1C5B1A77C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  std::vector<std::string>::~vector[abi:ne180100](&a31);
  _Unwind_Resume(a1);
}

void support::fs::moveDirUnique(const char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  timespec v4 = (const std::__fs::filesystem::path *)a1;
  v6.tv_seCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
  v6.tv_nseCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v16.st_blkstd::string::size_type size = v6;
  *(timespec *)v16.st_qspare = v6;
  v16.st_birthtimespeCC_SHA256_CTX c = v6;
  *(timespec *)&v16.st_std::string::size_type size = v6;
  v16.st_mtimespeCC_SHA256_CTX c = v6;
  v16.st_ctimespeCC_SHA256_CTX c = v6;
  *(timespec *)&v16.st_uid = v6;
  v16.st_atimespeCC_SHA256_CTX c = v6;
  *(timespec *)&v16.st_dev = v6;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (stat(a1, &v16)) {
    goto LABEL_4;
  }
  long long v7 = (v4->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
     ? (const char *)v4
     : (const char *)v4->__pn_.__r_.__value_.__r.__words[0];
  int v8 = opendir(v7);
  if (!v8) {
    goto LABEL_4;
  }
  std::string::size_type v9 = v8;
  int v10 = readdir(v8);
  closedir(v9);
  if (!v10) {
    goto LABEL_4;
  }
  memset((void *)a3, 170, 24);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  support::fs::createUniquePath((const char *)&__p, (std::string *)a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((v4->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v12 = v4;
  }
  else {
    int v12 = (const std::__fs::filesystem::path *)v4->__pn_.__r_.__value_.__r.__words[0];
  }
  if (*(char *)(a3 + 23) >= 0) {
    size_t v13 = (const std::__fs::filesystem::path *)a3;
  }
  else {
    size_t v13 = *(const std::__fs::filesystem::path **)a3;
  }
  rename(v12, v13, v11);
  if (v14)
  {
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
LABEL_4:
    *(unsigned char *)(a3 + 23) = 0;
    *(unsigned char *)a3 = 0;
  }
}

void sub_1C5B1A98C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void support::fs::getFileName(std::string *a1@<X8>)
{
  memset(__p, 170, sizeof(__p));
  ctu::tokenize();
  if (*((char *)__p[1] - 1) < 0)
  {
    std::string::__init_copy_ctor_external(a1, *((const std::string::value_type **)__p[1] - 3), *((void *)__p[1] - 2));
  }
  else
  {
    long long v2 = *(_OWORD *)((char *)__p[1] - 24);
    a1->__r_.__value_.__r.__words[2] = *((void *)__p[1] - 1);
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v2;
  }
  if (__p[0])
  {
    BOOL v3 = (void **)__p[1];
    timespec v4 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*(v3 - 3));
        }
        v3 -= 3;
      }
      while (v3 != __p[0]);
      timespec v4 = __p[0];
    }
    operator delete(v4);
  }
}

void sub_1C5B1AA60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

uint64_t support::fs::lockDir(const char *a1)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  uint64_t v1 = open(a1, 0);
  if ((v1 & 0x80000000) != 0) {
    return v1;
  }
  int v5 = 1;
  v3[0] = 0;
  v3[1] = 0;
  pid_t v4 = getpid();
  if ((fcntl(v1, 9, v3) & 0x80000000) == 0) {
    return v1;
  }
  close(v1);
  return 0xFFFFFFFFLL;
}

BOOL support::fs::unlockDir(support::fs *this)
{
  int v1 = (int)this;
  int v6 = 2;
  v4[0] = 0;
  v4[1] = 0;
  pid_t v5 = getpid();
  BOOL v2 = fcntl(v1, 9, v4) == 0;
  close(v1);
  return v2;
}

BOOL support::fs::getFilteredFiles(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  *__error() = 0;
  if (a1[23] < 0)
  {
    long long v7 = opendir(*(const char **)a1);
    if (v7) {
      goto LABEL_3;
    }
LABEL_78:
    uint64_t v45 = GetOsLogContext()[1];
    BOOL result = os_log_type_enabled(v45, OS_LOG_TYPE_ERROR);
    if (result)
    {
      if (a1[23] < 0) {
        a1 = *(const char **)a1;
      }
      int v47 = __error();
      xpc_object_t v48 = strerror(*v47);
      v58.st_dev = 136315394;
      *(void *)&v58.st_mode = a1;
      WORD2(v58.st_ino) = 2080;
      *(__darwin_ino64_t *)((char *)&v58.st_ino + 6) = (__darwin_ino64_t)v48;
      _os_log_error_impl(&dword_1C59C6000, v45, OS_LOG_TYPE_ERROR, "Error %s (%s)\n", (uint8_t *)&v58, 0x16u);
      return 0;
    }
    return result;
  }
  long long v7 = opendir(a1);
  if (!v7) {
    goto LABEL_78;
  }
LABEL_3:
  int v8 = v7;
  std::string::size_type v9 = readdir(v7);
  if (v9)
  {
    char v51 = a1;
    char v49 = 0;
    while (1)
    {
      d_name = v9->d_name;
      memset(__dst, 170, sizeof(__dst));
      size_t v11 = strlen(v9->d_name);
      if (v11 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v12 = v11;
      if (v11 >= 0x17) {
        break;
      }
      __dst[23] = v11;
      size_t v13 = __dst;
      if (v11) {
        goto LABEL_12;
      }
LABEL_13:
      v13[v12] = 0;
      uint64_t v16 = __dst[23];
      int v17 = __dst[23];
      uint64_t v18 = *(void *)&__dst[8];
      if (__dst[23] >= 0) {
        std::string::size_type v19 = __dst[23];
      }
      else {
        std::string::size_type v19 = *(void *)&__dst[8];
      }
      if (v19 == 2)
      {
        uint64_t v21 = *(_WORD **)__dst;
        if (__dst[23] >= 0) {
          uint64_t v21 = __dst;
        }
        if (*v21 == 11822) {
          goto LABEL_73;
        }
      }
      else if (v19 == 1)
      {
        unint64_t v20 = *(unsigned char **)__dst;
        if (__dst[23] >= 0) {
          unint64_t v20 = __dst;
        }
        if (*v20 == 46) {
          goto LABEL_73;
        }
      }
      if (a4) {
        goto LABEL_53;
      }
      uint64_t v22 = v8;
      uint64_t v23 = a4;
      uint64_t v24 = a3;
      v25.tv_seCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
      v25.tv_nseCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&v58.st_blkstd::string::size_type size = v25;
      *(timespec *)v58.st_qspare = v25;
      v58.st_birthtimespeCC_SHA256_CTX c = v25;
      *(timespec *)&v58.st_std::string::size_type size = v25;
      v58.st_mtimespeCC_SHA256_CTX c = v25;
      v58.st_ctimespeCC_SHA256_CTX c = v25;
      *(timespec *)&v58.st_uid = v25;
      v58.st_atimespeCC_SHA256_CTX c = v25;
      *(timespec *)&v58.st_dev = v25;
      int v26 = v51[23];
      if (v26 >= 0) {
        size_t v27 = *((unsigned __int8 *)v51 + 23);
      }
      else {
        size_t v27 = *((void *)v51 + 1);
      }
      unint64_t v28 = v27 + 1;
      memset(&v52, 170, sizeof(v52));
      if (v27 + 1 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v28 >= 0x17)
      {
        uint64_t v30 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v28 | 7) != 0x17) {
          uint64_t v30 = v28 | 7;
        }
        uint64_t v31 = v30 + 1;
        char v29 = (char *)operator new(v30 + 1);
        v52.__r_.__value_.__l.__size_ = v27 + 1;
        v52.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
        v52.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
      }
      else
      {
        memset(&v52, 0, sizeof(v52));
        char v29 = (char *)&v52;
        *((unsigned char *)&v52.__r_.__value_.__s + 23) = v27 + 1;
        if (!v27) {
          goto LABEL_40;
        }
      }
      if (v26 >= 0) {
        unint64_t v32 = v51;
      }
      else {
        unint64_t v32 = *(const char **)v51;
      }
      memmove(v29, v32, v27);
LABEL_40:
      a3 = v24;
      *(_WORD *)&v29[v27] = 47;
      if (v17 >= 0) {
        char v33 = __dst;
      }
      else {
        char v33 = *(const std::string::value_type **)__dst;
      }
      int v34 = std::string::append(&v52, v33, v19);
      a4 = v23;
      long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v55[0] = *((void *)&v34->__r_.__value_.__l + 2);
      *(_OWORD *)std::string __p = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      if (v55[0] >= 0) {
        unint64_t v36 = __p;
      }
      else {
        unint64_t v36 = (void **)__p[0];
      }
      lstat((const char *)v36, &v58);
      int v8 = v22;
      if (SHIBYTE(v55[0]) < 0)
      {
        operator delete(__p[0]);
        if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_48:
          if ((v58.st_mode & 0xF000) != 0xA000) {
            goto LABEL_52;
          }
          goto LABEL_73;
        }
      }
      else if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_48;
      }
      operator delete(v52.__r_.__value_.__l.__data_);
      if ((v58.st_mode & 0xF000) != 0xA000)
      {
LABEL_52:
        uint64_t v16 = __dst[23];
        uint64_t v18 = *(void *)&__dst[8];
        LOBYTE(v17) = __dst[23];
LABEL_53:
        if ((v17 & 0x80u) == 0) {
          uint64_t v37 = (std::sub_match<const char *> *)__dst;
        }
        else {
          uint64_t v37 = *(std::sub_match<const char *> **)__dst;
        }
        if ((v17 & 0x80u) != 0) {
          uint64_t v16 = v18;
        }
        uint64_t v38 = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v37 + v16);
        *(void *)&long long v39 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v39 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v56 = v39;
        v55[6] = 0xAAAAAAAAAAAAAA00;
        v55[3] = 0xAAAAAAAAAAAAAAAALL;
        v55[4] = 0;
        v55[5] = 0;
        v55[7] = 0;
        v55[8] = 0;
        LOBYTE(v56) = 0;
        BYTE8(v56) = 0;
        uint64_t v57 = 0;
        *(_OWORD *)std::string __p = 0u;
        memset(v55, 0, 25);
        *(_OWORD *)&v58.st_birthtimespec.tv_nseCC_SHA256_CTX c = v39;
        v58.st_ctimespec.tv_seCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
        v58.st_atimespec.tv_nseCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
        memset(&v58.st_mtimespec, 0, 17);
        memset(&v58.st_ctimespec.tv_nsec, 0, 17);
        LOBYTE(v58.st_size) = 0;
        v58.st_blocks = 0;
        memset(&v58, 0, 41);
        int v40 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a2, v37, (std::sub_match<const char *> *)((char *)v37 + v16), (std::vector<std::csub_match> *)&v58, 4160);
        std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)__p, (uint64_t)v37, v38, (uint64_t *)&v58.st_dev, 0);
        if (*(void *)&v58.st_dev)
        {
          v58.st_ino = *(void *)&v58.st_dev;
          operator delete(*(void **)&v58.st_dev);
        }
        if ((_BYTE)v56) {
          int v41 = v40 ^ 1;
        }
        else {
          int v41 = 1;
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if ((v40 & v41) != 0)
        {
          unint64_t v42 = *(void *)(a3 + 8);
          if (v42 >= *(void *)(a3 + 16))
          {
            uint64_t v44 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a3, (uint64_t)__dst);
          }
          else
          {
            if ((__dst[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external(*(std::string **)(a3 + 8), *(const std::string::value_type **)__dst, *(std::string::size_type *)&__dst[8]);
            }
            else
            {
              long long v43 = *(_OWORD *)__dst;
              *(void *)(v42 + 16) = *(void *)&__dst[16];
              *(_OWORD *)unint64_t v42 = v43;
            }
            uint64_t v44 = (std::string *)(v42 + 24);
            *(void *)(a3 + 8) = v42 + 24;
          }
          *(void *)(a3 + 8) = v44;
          char v49 = 1;
        }
      }
LABEL_73:
      if ((__dst[23] & 0x80000000) != 0) {
        operator delete(*(void **)__dst);
      }
      std::string::size_type v9 = readdir(v8);
      if (!v9) {
        goto LABEL_83;
      }
    }
    uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v14 = v11 | 7;
    }
    uint64_t v15 = v14 + 1;
    size_t v13 = operator new(v14 + 1);
    *(void *)&__dst[8] = v12;
    *(void *)&__dst[16] = v15 | 0x8000000000000000;
    *(void *)stat __dst = v13;
LABEL_12:
    memmove(v13, d_name, v12);
    goto LABEL_13;
  }
  char v49 = 0;
LABEL_83:
  closedir(v8);
  return v49 & 1;
}

void sub_1C5B1B0E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49)
{
  *(void *)(v49 + 8) = v50;
  if (a30 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5B1B36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void support::fs::getBasePath(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = a1;
  if (((char)a1[23] & 0x80000000) == 0)
  {
    if (!a1[23])
    {
      *(_OWORD *)a2 = *(_OWORD *)a1;
      *(void *)(a2 + 16) = *((void *)a1 + 2);
      return;
    }
LABEL_6:
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    memset(&__p, 170, sizeof(__p));
    support::fs::getFileName(&__p);
    size_t v4 = *((void *)v2 + 1);
    if ((v2[23] & 0x80u) == 0)
    {
      size_t v5 = v2[23];
    }
    else
    {
      BOOL v2 = *(unsigned __int8 **)v2;
      size_t v5 = v4;
    }
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    char v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t p_p = &__p;
    }
    else {
      uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::size_type v9 = &v2[v5];
    if (v5) {
      BOOL v10 = size == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10)
    {
      uint64_t v15 = &v2[v5];
    }
    else
    {
      uint64_t v14 = v2;
      uint64_t v15 = &v2[v5];
      do
      {
        if (*v14 == p_p->__r_.__value_.__s.__data_[0])
        {
          uint64_t v16 = 1;
          while (size != v16)
          {
            if (&v14[v16] == v9) {
              goto LABEL_20;
            }
            int v17 = v14[v16];
            int v18 = p_p->__r_.__value_.__s.__data_[v16++];
            if (v17 != v18) {
              goto LABEL_37;
            }
          }
          uint64_t v15 = v14;
        }
LABEL_37:
        ++v14;
      }
      while (v14 != v9);
    }
LABEL_20:
    BOOL v11 = v15 != v9 || size == 0;
    if (!v11 || v15 - v2 == -1) {
      goto LABEL_34;
    }
    if (v5 >= v15 - v2) {
      size_t v12 = v15 - v2;
    }
    else {
      size_t v12 = v5;
    }
    if (v12 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v12 >= 0x17)
    {
      uint64_t v19 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17) {
        uint64_t v19 = v12 | 7;
      }
      uint64_t v20 = v19 + 1;
      size_t v13 = (long long *)operator new(v19 + 1);
      *((void *)&v22 + 1) = v12;
      unint64_t v23 = v20 | 0x8000000000000000;
      *(void *)&long long v22 = v13;
    }
    else
    {
      HIBYTE(v23) = v12;
      size_t v13 = &v22;
      if (!v12)
      {
        LOBYTE(v22) = 0;
        if ((*(char *)(a2 + 23) & 0x80000000) == 0)
        {
LABEL_33:
          *(_OWORD *)a2 = v22;
          *(void *)(a2 + 16) = v23;
          char v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
LABEL_34:
          if (v7 < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          return;
        }
LABEL_49:
        operator delete(*(void **)a2);
        goto LABEL_33;
      }
    }
    memmove(v13, v2, v12);
    *((unsigned char *)v13 + v12) = 0;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_49;
  }
  if (*((void *)a1 + 1)) {
    goto LABEL_6;
  }
  uint64_t v21 = *(const std::string::value_type **)a1;

  std::string::__init_copy_ctor_external((std::string *)a2, v21, 0);
}

void sub_1C5B1B5C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void support::fs::getLastNumberDir(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  memset(&v69, 170, sizeof(v69));
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v69, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v69 = *(std::string *)a1;
  }
  size_t v4 = (std::string *)v69.__r_.__value_.__r.__words[0];
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v5 = &v69;
  }
  else {
    size_t v5 = (std::string *)v69.__r_.__value_.__r.__words[0];
  }
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v69.__r_.__value_.__l.__size_;
  }
  std::string::size_type v7 = size + 1;
  do
  {
    std::string::size_type v8 = v7 - 1;
    if (v7 == 1) {
      goto LABEL_20;
    }
    int v9 = v5->__r_.__value_.__s.__data_[v7-- - 2];
  }
  while (v9 == 47);
  if (v8)
  {
    std::string::size_type v10 = v8 - 1;
    if ((*((unsigned char *)&v69.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (v69.__r_.__value_.__l.__size_ > v10)
      {
        v69.__r_.__value_.__l.__size_ = v8;
        goto LABEL_19;
      }
    }
    else if (v10 < HIBYTE(v69.__r_.__value_.__r.__words[2]))
    {
      *((unsigned char *)&v69.__r_.__value_.__s + 23) = v8 & 0x7F;
      size_t v4 = &v69;
LABEL_19:
      v4->__r_.__value_.__s.__data_[v8] = 0;
      goto LABEL_20;
    }
    std::string::__throw_out_of_range[abi:ne180100]();
  }
LABEL_20:
  memset(&v68, 170, sizeof(v68));
  support::fs::getBasePath((unsigned __int8 *)&v69, (uint64_t)&v68);
  std::string::size_type v11 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v11 = v69.__r_.__value_.__l.__size_;
  }
  if (!v11) {
    goto LABEL_33;
  }
  std::string::size_type v12 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
  if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v12 = v68.__r_.__value_.__l.__size_;
  }
  if (!v12)
  {
LABEL_33:
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
      if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_125;
      }
      goto LABEL_130;
    }
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    goto LABEL_124;
  }
  memset(&v67, 170, sizeof(v67));
  support::fs::getFileName(&v67);
  int v13 = SHIBYTE(v67.__r_.__value_.__r.__words[2]);
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v14 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v14 = v67.__r_.__value_.__l.__size_;
  }
  unint64_t v15 = v14 + 13;
  memset(__dst, 170, sizeof(__dst));
  if (v14 + 13 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v15 >= 0x17)
  {
    uint64_t v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v17 = v15 | 7;
    }
    uint64_t v18 = v17 + 1;
    uint64_t v16 = (void **)operator new(v17 + 1);
    __dst[1] = (void *)(v14 + 13);
    __dst[2] = (void *)(v18 | 0x8000000000000000);
    __dst[0] = v16;
  }
  else
  {
    memset(__dst, 0, sizeof(__dst));
    uint64_t v16 = __dst;
    HIBYTE(__dst[2]) = v14 + 13;
    if (!v14) {
      goto LABEL_44;
    }
  }
  if (v13 >= 0) {
    uint64_t v19 = &v67;
  }
  else {
    uint64_t v19 = (std::string *)v67.__r_.__value_.__r.__words[0];
  }
  memmove(v16, v19, v14);
LABEL_44:
  strcpy((char *)v16 + v14, "-[[:alnum:]]*");
  *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v64[32] = v20;
  long long v65 = v20;
  *(_OWORD *)uint64_t v64 = v20;
  *(_OWORD *)&v64[16] = v20;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v64, (uint64_t)__dst, 0);
  std::string v61 = 0;
  char v62 = 0;
  uint64_t v63 = 0;
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v60, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
  }
  else {
    std::string v60 = v68;
  }
  std::locale::locale(&v54, (const std::locale *)v64);
  long long v55 = *(_OWORD *)&v64[8];
  long long v56 = *(_OWORD *)&v64[24];
  uint64_t v57 = *(void *)&v64[40];
  stat v58 = (std::__shared_weak_count *)v65;
  if ((void)v65) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v65 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v59 = *((void *)&v65 + 1);
  if (!support::fs::getFilteredFiles((const char *)&v60, (uint64_t)&v54, (uint64_t)&v61, 0))
  {
    uint64_t v24 = v58;
    if (v58 && !atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    std::locale::~locale(&v54);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
    goto LABEL_84;
  }
  uint64_t v21 = (void **)v61;
  long long v22 = v62;
  unint64_t v23 = v58;
  if (v58 && !atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  std::locale::~locale(&v54);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v60.__r_.__value_.__l.__data_);
    if (v21 == v22)
    {
LABEL_84:
      if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      {
        *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
        a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
        int v34 = (void **)v61;
        if (!v61) {
          goto LABEL_120;
        }
        goto LABEL_113;
      }
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
LABEL_112:
      int v34 = (void **)v61;
      if (!v61) {
        goto LABEL_120;
      }
      goto LABEL_113;
    }
  }
  else if (v21 == v22)
  {
    goto LABEL_84;
  }
  timespec v25 = (char *)v61;
  int v26 = (char *)v62;
  if (v61 != v62)
  {
    unsigned int v27 = 0;
    while (1)
    {
      memset(&__p, 170, sizeof(__p));
      ctu::tokenize();
      memset(&v52, 170, sizeof(v52));
      if (*(char *)(__p.__r_.__value_.__l.__size_ - 1) < 0)
      {
        std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)(__p.__r_.__value_.__l.__size_ - 24), *(void *)(__p.__r_.__value_.__l.__size_ - 16));
      }
      else
      {
        long long v29 = *(_OWORD *)(__p.__r_.__value_.__l.__size_ - 24);
        v52.__r_.__value_.__r.__words[2] = *(void *)(__p.__r_.__value_.__l.__size_ - 8);
        *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v29;
      }
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v30 = &v52;
      }
      else {
        uint64_t v30 = (std::string *)v52.__r_.__value_.__r.__words[0];
      }
      unsigned int v31 = strtol((const char *)v30, 0, 0);
      if (v27 <= v31) {
        unsigned int v27 = v31;
      }
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v52.__r_.__value_.__l.__data_);
        std::string::size_type v32 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__r.__words[0])
        {
LABEL_79:
          std::string::size_type v33 = __p.__r_.__value_.__l.__size_;
          unint64_t v28 = (void *)v32;
          if (__p.__r_.__value_.__l.__size_ != v32)
          {
            do
            {
              if (*(char *)(v33 - 1) < 0) {
                operator delete(*(void **)(v33 - 24));
              }
              v33 -= 24;
            }
            while (v33 != v32);
            unint64_t v28 = (void *)__p.__r_.__value_.__r.__words[0];
          }
          __p.__r_.__value_.__l.__size_ = v32;
          operator delete(v28);
        }
      }
      else
      {
        std::string::size_type v32 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__r.__words[0]) {
          goto LABEL_79;
        }
      }
      v25 += 24;
      if (v25 == v26) {
        goto LABEL_89;
      }
    }
  }
  unsigned int v27 = 0;
LABEL_89:
  int v35 = SHIBYTE(v69.__r_.__value_.__r.__words[2]);
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v36 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v36 = v69.__r_.__value_.__l.__size_;
  }
  unint64_t v37 = v36 + 1;
  memset(&v52, 170, sizeof(v52));
  if (v36 + 1 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v37 >= 0x17)
  {
    uint64_t v39 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v37 | 7) != 0x17) {
      uint64_t v39 = v37 | 7;
    }
    uint64_t v40 = v39 + 1;
    uint64_t v38 = (char *)operator new(v39 + 1);
    v52.__r_.__value_.__l.__size_ = v36 + 1;
    v52.__r_.__value_.__r.__words[2] = v40 | 0x8000000000000000;
    v52.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
  }
  else
  {
    memset(&v52, 0, sizeof(v52));
    uint64_t v38 = (char *)&v52;
    *((unsigned char *)&v52.__r_.__value_.__s + 23) = v36 + 1;
    if (!v36) {
      goto LABEL_103;
    }
  }
  if (v35 >= 0) {
    int v41 = &v69;
  }
  else {
    int v41 = (std::string *)v69.__r_.__value_.__r.__words[0];
  }
  memmove(v38, v41, v36);
LABEL_103:
  *(_WORD *)&v38[v36] = 45;
  std::to_string(&v51, v27);
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v42 = &v51;
  }
  else {
    unint64_t v42 = (std::string *)v51.__r_.__value_.__r.__words[0];
  }
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v43 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v43 = v51.__r_.__value_.__l.__size_;
  }
  uint64_t v44 = std::string::append(&v52, (const std::string::value_type *)v42, v43);
  long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  uint64_t v46 = std::string::append(&__p, "/", 1uLL);
  long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v47;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_111:
      if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_112;
      }
      goto LABEL_134;
    }
  }
  else if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_111;
  }
  operator delete(v51.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_112;
  }
LABEL_134:
  operator delete(v52.__r_.__value_.__l.__data_);
  int v34 = (void **)v61;
  if (!v61) {
    goto LABEL_120;
  }
LABEL_113:
  xpc_object_t v48 = v62;
  uint64_t v49 = v34;
  if (v62 != v34)
  {
    do
    {
      if (*((char *)v48 - 1) < 0) {
        operator delete(*(v48 - 3));
      }
      v48 -= 3;
    }
    while (v48 != v34);
    uint64_t v49 = v61;
  }
  char v62 = v34;
  operator delete(v49);
LABEL_120:
  uint64_t v50 = (std::__shared_weak_count *)v65;
  if ((void)v65 && !atomic_fetch_add((atomic_ullong *volatile)(v65 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
    std::locale::~locale((std::locale *)v64);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
    {
LABEL_123:
      if ((SHIBYTE(v67.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_124;
      }
      goto LABEL_129;
    }
  }
  else
  {
    std::locale::~locale((std::locale *)v64);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0) {
      goto LABEL_123;
    }
  }
  operator delete(__dst[0]);
  if ((SHIBYTE(v67.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_124:
    if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_125;
    }
    goto LABEL_130;
  }
LABEL_129:
  operator delete(v67.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_125:
    if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_131:
    operator delete(v69.__r_.__value_.__l.__data_);
    return;
  }
LABEL_130:
  operator delete(v68.__r_.__value_.__l.__data_);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_131;
  }
}

void sub_1C5B1BD60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,std::locale a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,uint64_t a46,std::locale a47)
{
  if (a28 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0)
      {
LABEL_8:
        std::vector<std::string>::~vector[abi:ne180100](&a44);
        std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a47);
        if (*(char *)(v47 - 161) < 0)
        {
          operator delete(*(void **)(v47 - 184));
          if ((*(char *)(v47 - 137) & 0x80000000) == 0)
          {
LABEL_10:
            if ((*(char *)(v47 - 113) & 0x80000000) == 0) {
              goto LABEL_11;
            }
            goto LABEL_15;
          }
        }
        else if ((*(char *)(v47 - 137) & 0x80000000) == 0)
        {
          goto LABEL_10;
        }
        operator delete(*(void **)(v47 - 160));
        if ((*(char *)(v47 - 113) & 0x80000000) == 0)
        {
LABEL_11:
          if ((*(char *)(v47 - 89) & 0x80000000) == 0) {
            goto LABEL_12;
          }
          goto LABEL_16;
        }
LABEL_15:
        operator delete(*(void **)(v47 - 136));
        if ((*(char *)(v47 - 89) & 0x80000000) == 0) {
LABEL_12:
        }
          _Unwind_Resume(a1);
LABEL_16:
        operator delete(*(void **)(v47 - 112));
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(a16);
      goto LABEL_8;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a21 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

BOOL support::fs::getPartitionInfo(uint64_t a1, void *a2, void *a3, unint64_t *a4)
{
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a1 + 23))
    {
      memset(&v11, 0, sizeof(v11));
      int v7 = statvfs((const char *)a1, &v11);
      BOOL result = v7 == 0;
      if (v7) {
        return result;
      }
LABEL_7:
      *a4 = v11.f_frsize;
      uint64_t f_bavail = v11.f_bavail;
      *a2 = v11.f_blocks;
      *a3 = f_bavail;
      return result;
    }
    return 0;
  }
  if (!*(void *)(a1 + 8)) {
    return 0;
  }
  memset(&v11, 0, sizeof(v11));
  int v9 = statvfs(*(const char **)a1, &v11);
  BOOL result = v9 == 0;
  if (!v9) {
    goto LABEL_7;
  }
  return result;
}

void *support::fs::readCurrentLine@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::istream::tellg();
  uint64_t v4 = v10;
  if (v10 >= 2)
  {
    do
    {
      std::istream::seekg();
      if (std::istream::peek() == 10) {
        break;
      }
    }
    while (v4-- > 1);
  }
  std::istream::seekg();
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  int v6 = std::locale::use_facet(v9, MEMORY[0x1E4FBA258]);
  unsigned __int8 v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(v9);
  return std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, (uint64_t)a2, v7);
}

void sub_1C5B1C0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_1C5B1C0E8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0)
  {
    operator delete(*(void **)v1);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, uint64_t a2, unsigned __int8 a3)
{
  char v11 = -86;
  MEMORY[0x1C8794F10](&v11, a1, 1);
  if (!v11) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    unsigned __int8 v7 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    std::string::size_type v8 = (unsigned char *)v7[3];
    if (v8 != (unsigned char *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(void *))(*v7 + 80))(v7);
    if (v7 == -1) {
      break;
    }
LABEL_9:
    if (v7 == a3)
    {
      int v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(void *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      int v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6) {
    int v9 = 2;
  }
  else {
    int v9 = 6;
  }
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_1C5B1C278(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1C5B1C238);
  }
  __cxa_rethrow();
}

void sub_1C5B1C2F4(_Unwind_Exception *a1)
{
}

void BootModule::create(capabilities::radio *a1@<X0>, BootModule **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  if (capabilities::radio::vendor(a1) != 1) {
    return;
  }
  uint64_t v4 = (std::__shared_weak_count **)operator new(0x1F0uLL);
  size_t v5 = v4;
  uint64_t v6 = *(void *)a1;
  unsigned __int8 v7 = (std::__shared_weak_count *)*((void *)a1 + 1);
  v14[0] = v6;
  v14[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  v13[0] = 0;
  v13[1] = 0;
  BootModule::BootModule((uint64_t)v4, v14, v13);
  unint64_t v15 = (BootModule *)v5;
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  std::string::size_type v8 = (std::__shared_weak_count *)operator new(0x20uLL);
  v8->__shared_owners_ = 0;
  uint64_t p_shared_owners = &v8->__shared_owners_;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F210DE10;
  v8->__shared_weak_owners_ = 0;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  unint64_t v16 = (unint64_t)v8;
  uint64_t v10 = v5[16];
  if (v10)
  {
    if (v10->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v5[15] = (std::__shared_weak_count *)v5;
      uint8_t v5[16] = v8;
      std::__shared_weak_count::__release_weak(v10);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v5[15] = (std::__shared_weak_count *)v5;
    uint8_t v5[16] = v8;
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_9:
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  char v11 = v15;
  ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync((uint64_t)v15 + 48);
  unint64_t v12 = v16;
  *a2 = v11;
  a2[1] = (BootModule *)v12;
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  BootModule::init(v11);
}

void sub_1C5B1C488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v13);
  _Unwind_Resume(a1);
}

void sub_1C5B1C524(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1C5B1C538(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BootModule::init(BootModule *this)
{
  uint64_t v5 = *((void *)this + 15);
  BOOL v3 = (std::__shared_weak_count *)*((void *)this + 16);
  uint64_t v4 = (char *)this + 120;
  if (!v3 || (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unsigned __int8 v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  v11[2] = ___ZN10BootModule4initEv_block_invoke;
  v11[3] = &__block_descriptor_tmp_18_2;
  v11[4] = this;
  void v11[5] = v5;
  unint64_t v12 = v7;
  uint64_t v13 = v11;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI10BootModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_213;
  void block[4] = v4;
  void block[5] = &v13;
  int v9 = *((void *)this + 17);
  if (!*((void *)this + 18))
  {
    dispatch_sync(v9, block);
    uint64_t v10 = v12;
    if (!v12) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  dispatch_async_and_wait(v9, block);
  uint64_t v10 = v12;
  if (v12) {
LABEL_7:
  }
    std::__shared_weak_count::__release_weak(v10);
LABEL_8:
  std::__shared_weak_count::__release_weak(v7);
}

uint64_t BootModule::BootModule(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1F2112348;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v6);
    *(void *)a1 = &unk_1F2103EC0;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &unk_1F2103EC0;
  }
  *(void *)a1 = &unk_1F210D488;
  *(void *)(a1 + 48) = &unk_1F210D510;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v39, "com.apple.telephony.abm", "boot.mod");
  GetABMLogServer(&v44);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  std::string::size_type v8 = dispatch_queue_create_with_target_V2("boot.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v8, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v8);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = v8;
  if (v8)
  {
    dispatch_retain(v8);
    *(void *)(a1 + 144) = 0;
    dispatch_release(v8);
  }
  else
  {
    *(void *)(a1 + 144) = 0;
  }
  *(void *)(a1 + 48) = &unk_1F210DDD0;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
  *(void *)(a1 + 56) = &unk_1F2102CB8;
  int v9 = v45;
  *(void *)(a1 + 104) = v44;
  *(void *)(a1 + 112) = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&__dst);
  *(void *)(a1 + 48) = &unk_1F210DE60;
  uint64_t v10 = v45;
  if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v39);
  *(void *)a1 = &unk_1F210D488;
  *(void *)(a1 + 48) = &unk_1F210D510;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 196) = 15;
  char v11 = (config::hw *)dispatch_semaphore_create(0);
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 200) = v11;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = -1;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(void *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = -1;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(void *)(a1 + 384) = 0;
  config::hw::regionInfo(v11);
  *(void *)(a1 + 416) = dispatch_group_create();
  *(void *)(a1 + 424) = 0;
  unint64_t v12 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  size_t v13 = strlen(v12);
  if (v13 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v14 = v13;
  if (v13 >= 0x17)
  {
    uint64_t v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v16 = v13 | 7;
    }
    uint64_t v17 = v16 + 1;
    p_dst = (std::string *)operator new(v16 + 1);
    __dst.__r_.__value_.__l.__size_ = v14;
    __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_21;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13;
  p_dst = &__dst;
  if (v13) {
LABEL_21:
  }
    memmove(p_dst, v12, v14);
  p_dst->__r_.__value_.__s.__data_[v14] = 0;
  char v40 = 11;
  strcpy((char *)v39, ".resetqueue");
  uint64_t v18 = std::string::append(&__dst, (const std::string::value_type *)v39, 0xBuLL);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  int64_t v43 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string buf = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (v43 >= 0) {
    long long v20 = buf;
  }
  else {
    long long v20 = *(uint8_t **)buf;
  }
  uint64_t v21 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, 0);
  long long v22 = (sys *)dispatch_queue_create((const char *)v20, v21);
  *(void *)(a1 + 432) = v22;
  if ((SHIBYTE(v43) & 0x80000000) == 0)
  {
    if ((v40 & 0x80000000) == 0) {
      goto LABEL_27;
    }
LABEL_38:
    operator delete(v39[0]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_39;
  }
  operator delete(*(void **)buf);
  if (v40 < 0) {
    goto LABEL_38;
  }
LABEL_27:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_28;
  }
LABEL_39:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_28:
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = *a3;
  uint64_t v23 = a3[1];
  *(void *)(a1 + 488) = v23;
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
  *(_WORD *)(a1 + 228) = 0;
  *(_DWORD *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(unsigned char *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 256) = 8;
  if (sys::isBootSessionChanged(v22))
  {
    uint64_t v24 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1C59C6000, v24, OS_LOG_TYPE_DEFAULT, "#I Resetting baseband boot stats", buf, 2u);
    }
    *(void *)(a1 + 448) = 0;
    return a1;
  }
  __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  if (!qword_1EBBDCB48)
  {
    int v26 = (HealthEventDB *)operator new(0xA0uLL);
    HealthEventDB::HealthEventDB(v26);
    timespec v25 = operator new(0x20uLL);
    *timespec v25 = &unk_1F21077D0;
    v25[1] = 0;
    v25[2] = 0;
    v25[3] = v26;
    unsigned int v27 = (std::__shared_weak_count *)off_1EBBDCB50;
    qword_1EBBDCB48 = (uint64_t)v26;
    off_1EBBDCB50 = v25;
    if (!v27)
    {
      *(void *)std::string buf = v26;
      *(void *)&uint8_t buf[8] = v25;
      goto LABEL_44;
    }
    if (!atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  timespec v25 = off_1EBBDCB50;
  *(void *)std::string buf = qword_1EBBDCB48;
  *(void *)&uint8_t buf[8] = off_1EBBDCB50;
  if (off_1EBBDCB50) {
LABEL_44:
  }
    atomic_fetch_add_explicit(v25 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  HealthEventDB::getHealthInfo(*(HealthEventDB **)buf, (xpc_object_t *)&__dst.__r_.__value_.__l.__data_);
  unint64_t v28 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  xpc_object_t value = xpc_dictionary_get_value(__dst.__r_.__value_.__l.__data_, "KeyBasebandStats");
  xpc_object_t v30 = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t v30 = xpc_null_create();
  }
  xpc_object_t v31 = xpc_null_create();
  uint64_t v32 = MEMORY[0x1E4F14590];
  if (v30 && MEMORY[0x1C8795EB0](v30) == v32)
  {
    xpc_retain(v30);
    xpc_object_t v33 = v30;
  }
  else
  {
    xpc_object_t v33 = xpc_null_create();
  }
  if (MEMORY[0x1C8795EB0](v33) != v32)
  {
    if (v31)
    {
      xpc_retain(v31);
      xpc_object_t v34 = v31;
    }
    else
    {
      xpc_object_t v34 = xpc_null_create();
    }
    xpc_release(v33);
    xpc_object_t v33 = v34;
  }
  xpc_release(v31);
  xpc_release(v30);
  if (MEMORY[0x1C8795EB0](v33) != v32)
  {
    int v35 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_1C59C6000, v35, OS_LOG_TYPE_ERROR, "Baseband boot stats not found", buf, 2u);
    }
    *(void *)(a1 + 448) = 0;
  }
  xpc_object_t v36 = xpc_dictionary_get_value(v33, (const char *)*MEMORY[0x1E4F4CD70]);
  *(void *)std::string buf = v36;
  if (v36) {
    xpc_retain(v36);
  }
  else {
    *(void *)std::string buf = xpc_null_create();
  }
  *(_DWORD *)(a1 + 448) = xpc::dyn_cast_or_default((xpc *)buf, 0);
  xpc_release(*(xpc_object_t *)buf);
  xpc_object_t v37 = xpc_dictionary_get_value(v33, (const char *)*MEMORY[0x1E4F4CD78]);
  *(void *)std::string buf = v37;
  if (v37) {
    xpc_retain(v37);
  }
  else {
    *(void *)std::string buf = xpc_null_create();
  }
  *(_DWORD *)(a1 + 452) = xpc::dyn_cast_or_default((xpc *)buf, 0);
  xpc_release(*(xpc_object_t *)buf);
  xpc_release(v33);
  xpc_release(__dst.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1C5B1CEB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, xpc_object_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,xpc_object_t object,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v25 + 480);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v25 + 464);
  uint64_t v32 = *(NSObject **)(v25 + 440);
  if (v32)
  {
    dispatch_resume(v32);
    xpc_object_t v33 = *(NSObject **)(v25 + 440);
    if (v33) {
      dispatch_release(v33);
    }
  }
  xpc_object_t v34 = *(NSObject **)(v25 + 432);
  if (v34) {
    dispatch_release(v34);
  }
  int v35 = *(NSObject **)(v25 + 424);
  if (v35)
  {
    dispatch_group_leave(v35);
    xpc_object_t v36 = *(NSObject **)(v25 + 424);
    if (v36) {
      dispatch_release(v36);
    }
  }
  xpc_object_t v37 = *(NSObject **)(v25 + 416);
  if (v37)
  {
    dispatch_release(v37);
    if ((*(char *)(v25 + 415) & 0x80000000) == 0)
    {
LABEL_11:
      uint64_t v38 = v30 + 64;
      if ((*(char *)(v25 + 375) & 0x80000000) == 0) {
        goto LABEL_12;
      }
      goto LABEL_17;
    }
  }
  else if ((*(char *)(v25 + 415) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(*v27);
  uint64_t v38 = v30 + 64;
  if ((*(char *)(v25 + 375) & 0x80000000) == 0)
  {
LABEL_12:
    uint64_t v39 = (const void **)(v30 + 56);
    if ((*(char *)(v25 + 327) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(*(void **)(v30 + 144));
  uint64_t v39 = (const void **)(v30 + 56);
  if ((*(char *)(v25 + 327) & 0x80000000) == 0)
  {
LABEL_13:
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v38);
    char v40 = *v39;
    if (!*v39) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(v30 + 96));
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v38);
  char v40 = *v39;
  if (!*v39)
  {
LABEL_20:
    int v41 = *(NSObject **)(v25 + 216);
    if (v41)
    {
      dispatch_group_leave(v41);
      unint64_t v42 = *(NSObject **)(v25 + 216);
      if (v42) {
        dispatch_release(v42);
      }
    }
    if (*(void *)v30)
    {
      dispatch_group_leave(*(dispatch_group_t *)v30);
      if (*(void *)v30) {
        dispatch_release(*(dispatch_object_t *)v30);
      }
    }
    int64_t v43 = *(NSObject **)(v25 + 200);
    if (v43) {
      dispatch_release(v43);
    }
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v30 - 32);
    if (*(char *)(v25 + 175) < 0) {
      operator delete(*v29);
    }
    ctu::SharedLoggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v26);
    Service::~Service((Service *)v25);
    _Unwind_Resume(a1);
  }
LABEL_19:
  _Block_release(v40);
  goto LABEL_20;
}

void *ctu::SharedLoggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F210DDD0;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  BOOL v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1F210DDD0;
  MEMORY[0x1C87940C0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  BOOL v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void BootModule::~BootModule(BootModule *this)
{
  *(void *)this = &unk_1F210D488;
  *((void *)this + 6) = &unk_1F210D510;
  uint64_t v2 = *((void *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v26 = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v26, 2u);
  }
  BOOL v3 = (std::__shared_weak_count *)*((void *)this + 61);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 59);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = *((void *)this + 55);
  if (v5)
  {
    dispatch_resume(v5);
    uint64_t v6 = *((void *)this + 55);
    if (v6) {
      dispatch_release(v6);
    }
  }
  unsigned __int8 v7 = *((void *)this + 54);
  if (v7) {
    dispatch_release(v7);
  }
  std::string::size_type v8 = *((void *)this + 53);
  if (v8)
  {
    dispatch_group_leave(v8);
    int v9 = *((void *)this + 53);
    if (v9) {
      dispatch_release(v9);
    }
  }
  uint64_t v10 = *((void *)this + 52);
  if (v10) {
    dispatch_release(v10);
  }
  if (*((char *)this + 415) < 0)
  {
    operator delete(*((void **)this + 49));
    if ((*((char *)this + 375) & 0x80000000) == 0)
    {
LABEL_21:
      if ((*((char *)this + 327) & 0x80000000) == 0) {
        goto LABEL_22;
      }
      goto LABEL_26;
    }
  }
  else if ((*((char *)this + 375) & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(*((void **)this + 44));
  if ((*((char *)this + 327) & 0x80000000) == 0)
  {
LABEL_22:
    char v11 = (std::__shared_weak_count *)*((void *)this + 35);
    if (!v11) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
LABEL_26:
  operator delete(*((void **)this + 38));
  char v11 = (std::__shared_weak_count *)*((void *)this + 35);
  if (!v11) {
    goto LABEL_28;
  }
LABEL_27:
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    unint64_t v12 = (const void *)*((void *)this + 33);
    if (!v12) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
LABEL_28:
  unint64_t v12 = (const void *)*((void *)this + 33);
  if (v12) {
LABEL_29:
  }
    _Block_release(v12);
LABEL_30:
  size_t v13 = *((void *)this + 27);
  if (v13)
  {
    dispatch_group_leave(v13);
    std::string::size_type v14 = *((void *)this + 27);
    if (v14) {
      dispatch_release(v14);
    }
  }
  unint64_t v15 = *((void *)this + 26);
  if (v15)
  {
    dispatch_group_leave(v15);
    uint64_t v16 = *((void *)this + 26);
    if (v16) {
      dispatch_release(v16);
    }
  }
  uint64_t v17 = *((void *)this + 25);
  if (v17) {
    dispatch_release(v17);
  }
  uint64_t v18 = (std::__shared_weak_count *)*((void *)this + 23);
  if (!v18 || atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*((char *)this + 175) & 0x80000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*((char *)this + 175) < 0) {
LABEL_41:
  }
    operator delete(*((void **)this + 19));
LABEL_42:
  *((void *)this + 6) = &unk_1F210DDD0;
  MEMORY[0x1C87940C0]((char *)this + 56);
  long long v19 = *((void *)this + 18);
  if (v19) {
    dispatch_release(v19);
  }
  long long v20 = *((void *)this + 17);
  if (v20) {
    dispatch_release(v20);
  }
  uint64_t v21 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v21) {
    std::__shared_weak_count::__release_weak(v21);
  }
  *(void *)this = &unk_1F2112348;
  uint64_t v22 = *((void *)this + 3);
  if (v22)
  {
    uint64_t v23 = *((void *)this + 4);
    uint64_t v24 = (void *)*((void *)this + 3);
    if (v23 != v22)
    {
      do
      {
        if (*(char *)(v23 - 1) < 0) {
          operator delete(*(void **)(v23 - 24));
        }
        v23 -= 24;
      }
      while (v23 != v22);
      uint64_t v24 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v22;
    operator delete(v24);
  }
  uint64_t v25 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v25) {
    std::__shared_weak_count::__release_weak(v25);
  }
}

{
  void *v1;
  uint64_t vars8;

  BootModule::~BootModule(this);

  operator delete(v1);
}

void non-virtual thunk to'BootModule::~BootModule(BootModule *this)
{
}

{
  void *v1;
  uint64_t vars8;

  BootModule::~BootModule((BootModule *)((char *)this - 48));

  operator delete(v1);
}

void BootModule::changeState_sync(uint64_t a1, unsigned int a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(NSObject **)(a1 + 88);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    uint64_t v6 = *(int *)(a1 + 456);
    if (v6 > 8)
    {
      unsigned __int8 v7 = "Unknown";
      if (a2 > 8) {
        goto LABEL_4;
      }
    }
    else
    {
      unsigned __int8 v7 = off_1E651BEB0[v6];
      if (a2 > 8)
      {
LABEL_4:
        std::string::size_type v8 = "Unknown";
LABEL_7:
        *(_DWORD *)std::string buf = 136446466;
        *(void *)&uint8_t buf[4] = v7;
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v8;
        _os_log_impl(&dword_1C59C6000, v4, OS_LOG_TYPE_DEFAULT, "#I boot state changing %{public}s -> %{public}s", buf, 0x16u);
        goto LABEL_8;
      }
    }
    std::string::size_type v8 = off_1E651BEB0[a2];
    goto LABEL_7;
  }
LABEL_8:
  *(_DWORD *)(a1 + 456) = a2;
  if (!capabilities::ipc::supportsPCI((capabilities::ipc *)v5)) {
    goto LABEL_43;
  }
  if ((*(_DWORD *)(a1 + 456) - 3) > 1)
  {
    uint64_t v17 = *(std::__shared_weak_count **)(a1 + 280);
    *(void *)(a1 + 272) = 0;
    *(void *)(a1 + 280) = 0;
    if (!v17 || atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_43;
    }
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if (!*(void *)(a1 + 216)) {
      goto LABEL_49;
    }
  }
  else
  {
    if (*(void *)(a1 + 272)) {
      goto LABEL_43;
    }
    int v9 = *(void **)(a1 + 264);
    if (v9) {
      int v9 = _Block_copy(v9);
    }
    aBlocunint64_t k = v9;
    pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
    uint64_t v10 = off_1EBBDC878;
    if (!off_1EBBDC878)
    {
      ABMServer::create_default_global(buf);
      long long v11 = *(_OWORD *)buf;
      *(void *)std::string buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      unint64_t v12 = (std::__shared_weak_count *)*(&off_1EBBDC878 + 1);
      off_1EBBDC878 = v11;
      if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      size_t v13 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      uint64_t v10 = off_1EBBDC878;
    }
    uint64_t v36 = v10;
    xpc_object_t v37 = (std::__shared_weak_count *)*(&off_1EBBDC878 + 1);
    if (*(&off_1EBBDC878 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDC878 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
    pci::event::Listener::create();
    long long v14 = v39;
    long long v39 = 0uLL;
    unint64_t v15 = *(std::__shared_weak_count **)(a1 + 280);
    *(_OWORD *)(a1 + 272) = v14;
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    if (*((void *)&v39 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v39 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(void))(**((void **)&v39 + 1) + 16))(*((void *)&v39 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v39 + 1));
    }
    if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    uint64_t v16 = *(NSObject **)(a1 + 88);
    if (*(void *)(a1 + 272))
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_1C59C6000, v16, OS_LOG_TYPE_DEFAULT, "#I Listening for PCI events", buf, 2u);
        if (!*(void *)(a1 + 216)) {
          goto LABEL_49;
        }
        goto LABEL_44;
      }
LABEL_43:
      if (!*(void *)(a1 + 216)) {
        goto LABEL_49;
      }
      goto LABEL_44;
    }
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      goto LABEL_43;
    }
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl(&dword_1C59C6000, v16, OS_LOG_TYPE_ERROR, "Could not create PCI event listener!", buf, 2u);
    if (!*(void *)(a1 + 216)) {
      goto LABEL_49;
    }
  }
LABEL_44:
  int v18 = *(_DWORD *)(a1 + 456);
  if (v18 != 4) {
    goto LABEL_50;
  }
  long long v19 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C59C6000, v19, OS_LOG_TYPE_DEFAULT, "#I Releasing shutdown request session", buf, 2u);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 96))(a1, 7);
  long long v20 = *(NSObject **)(a1 + 216);
  *(void *)(a1 + 216) = 0;
  if (v20)
  {
    dispatch_group_leave(v20);
    dispatch_release(v20);
  }
LABEL_49:
  int v18 = *(_DWORD *)(a1 + 456);
LABEL_50:
  if (v18 != 7) {
    return;
  }
  *(void *)std::string buf = 0;
  uint64_t v21 = *MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable) {
    *(void *)std::string buf = Mutable;
  }
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x1E4F4C688], (const __CFString **)*MEMORY[0x1E4F4CF28], v21, v23);
  uint64_t v24 = (const void *)*MEMORY[0x1E4F4CEF8];
  size_t v25 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
  if (v25 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v26 = (void *)v25;
  if (v25 >= 0x17)
  {
    uint64_t v29 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17) {
      uint64_t v29 = v25 | 7;
    }
    uint64_t v30 = v29 + 1;
    unsigned int v27 = (void **)operator new(v29 + 1);
    __dst[1] = v26;
    unint64_t v35 = v30 | 0x8000000000000000;
    __dst[0] = v27;
LABEL_61:
    memmove(v27, v24, (size_t)v26);
    *((unsigned char *)v26 + (void)v27) = 0;
    uint64_t v28 = *(const void **)buf;
    if (!*(void *)buf) {
      goto LABEL_64;
    }
    goto LABEL_62;
  }
  HIBYTE(v35) = v25;
  unsigned int v27 = __dst;
  if (v25) {
    goto LABEL_61;
  }
  LOBYTE(__dst[0]) = 0;
  uint64_t v28 = *(const void **)buf;
  if (!*(void *)buf) {
    goto LABEL_64;
  }
LABEL_62:
  CFTypeID v31 = CFGetTypeID(v28);
  if (v31 == CFDictionaryGetTypeID())
  {
    CFTypeRef cf = v28;
    CFRetain(v28);
    goto LABEL_65;
  }
LABEL_64:
  CFTypeRef cf = 0;
LABEL_65:
  uint64_t v32 = 0;
  Service::broadcastEvent(a1, (uint64_t)__dst, &cf, (const void **)&v32);
  if (v32) {
    _Block_release(v32);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(v35) < 0)
  {
    operator delete(__dst[0]);
    if (!v28) {
      return;
    }
  }
  else if (!v28)
  {
    return;
  }
  CFRelease(v28);
}

void sub_1C5B1DC48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *aBlock, uint64_t a20,uint64_t a21,char a22)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  _Unwind_Resume(a1);
}

const char *BootModule::getName(BootModule *this)
{
  return "boot.mod";
}

void BootModule::requestReset(void *a1, const ResetInfo *a2, uint64_t *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v7 = a1[15], (std::string::size_type v8 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (!capabilities::abs::shouldIgnoreResets((capabilities::abs *)v8))
  {
    unint64_t v12 = a1[54];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 1174405120;
    block[2] = ___ZN10BootModule12requestResetE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_8_1;
    void block[4] = a1;
    void block[5] = v7;
    uint64_t v16 = v9;
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    ResetInfo::ResetInfo(&v17, a2);
    size_t v13 = (void *)*a3;
    if (*a3) {
      size_t v13 = _Block_copy(v13);
    }
    aBlocunint64_t k = v13;
    dispatch_async(v12, block);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v23 < 0)
    {
      operator delete(__p);
      if ((v21 & 0x80000000) == 0)
      {
LABEL_19:
        if ((v19 & 0x80000000) == 0) {
          goto LABEL_20;
        }
        goto LABEL_25;
      }
    }
    else if ((v21 & 0x80000000) == 0)
    {
      goto LABEL_19;
    }
    operator delete(v20);
    if ((v19 & 0x80000000) == 0)
    {
LABEL_20:
      if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_21;
      }
      goto LABEL_26;
    }
LABEL_25:
    operator delete(v18);
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_21:
      long long v14 = v16;
      if (!v16) {
        goto LABEL_28;
      }
      goto LABEL_27;
    }
LABEL_26:
    operator delete(v17.__r_.__value_.__l.__data_);
    long long v14 = v16;
    if (!v16) {
      goto LABEL_28;
    }
LABEL_27:
    std::__shared_weak_count::__release_weak(v14);
    goto LABEL_28;
  }
  uint64_t v10 = a1[11];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    ResetInfo::asString(a2, v25);
    long long v11 = v26 >= 0 ? v25 : (void **)v25[0];
    *(_DWORD *)std::string buf = 136446210;
    uint64_t v28 = v11;
    _os_log_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_DEFAULT, "#I Ignoring modem reset request: %{public}s", buf, 0xCu);
    if (v26 < 0)
    {
      operator delete(v25[0]);
      if (!*a3) {
        goto LABEL_28;
      }
      goto LABEL_12;
    }
  }
  if (*a3)
  {
LABEL_12:
    LODWORD(v25[0]) = 0;
    dispatch::block<void({block_pointer})(int,std::string)>::operator()<int,char const(&)[1]>(a3, (unsigned int *)v25, "");
  }
LABEL_28:
  std::__shared_weak_count::__release_weak(v9);
}

void sub_1C5B1DFB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  std::__shared_weak_count::__release_weak(v16);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule12requestResetE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (!v2) {
    return;
  }
  uint64_t v3 = a1[4];
  uint64_t v4 = std::__shared_weak_count::lock(v2);
  uint64_t v24 = v4;
  if (!v4) {
    return;
  }
  BOOL v5 = v4;
  if (!a1[5]) {
    goto LABEL_15;
  }
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1174405120;
  v12[2] = ___ZN10BootModule12requestResetE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2;
  void v12[3] = &__block_descriptor_tmp_37;
  v12[4] = v3;
  ResetInfo::ResetInfo(&v13, (const ResetInfo *)(a1 + 7));
  uint64_t v6 = (const void *)a1[21];
  if (v6)
  {
    uint64_t v7 = _Block_copy(v6);
    std::string::size_type v8 = (uint64_t *)(v3 + 120);
    uint64_t v10 = a1[5];
    int v9 = (std::__shared_weak_count *)a1[6];
    aBlocunint64_t k = v7;
    uint64_t v21 = v10;
    uint64_t v22 = v9;
    if (!v9) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  std::string::size_type v8 = (uint64_t *)(v3 + 120);
  uint64_t v11 = a1[5];
  int v9 = (std::__shared_weak_count *)a1[6];
  aBlocunint64_t k = 0;
  uint64_t v21 = v11;
  uint64_t v22 = v9;
  if (v9) {
LABEL_6:
  }
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
LABEL_7:
  ctu::SharedSynchronizable<BootModule>::execute_wrapped(v8, (uint64_t)v12);
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v19 < 0)
  {
    operator delete(__p);
    if ((v17 & 0x80000000) == 0)
    {
LABEL_13:
      if ((v15 & 0x80000000) == 0) {
        goto LABEL_14;
      }
LABEL_21:
      operator delete(v14);
      if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_15:
        if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          return;
        }
LABEL_23:
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        return;
      }
      goto LABEL_22;
    }
  }
  else if ((v17 & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(v16);
  if (v15 < 0) {
    goto LABEL_21;
  }
LABEL_14:
  if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_15;
  }
LABEL_22:
  operator delete(v13.__r_.__value_.__l.__data_);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_23;
  }
}

void sub_1C5B1E1D4(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule12requestResetE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2(uint64_t a1)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 32);
  unsigned int v3 = *((_DWORD *)v2 + 114);
  if (v3 > 8 || ((1 << v3) & 0x1C7) == 0)
  {
    unint64_t v12 = v2[11];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      ResetInfo::asString((ResetInfo *)(a1 + 40), &__p);
      std::string v13 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
      _os_log_impl(&dword_1C59C6000, v12, OS_LOG_TYPE_DEFAULT, "#I Reset requested: %{public}s", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    (*(void (**)(void *, uint64_t))(*v2 + 96))(v2, 1);
    *(void *)std::string v61 = 0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v14 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v15 = v14;
    if (v14)
    {
      *(void *)std::string v61 = v14;
    }
    else
    {
      xpc_object_t v15 = xpc_null_create();
      *(void *)std::string v61 = v15;
      if (!v15)
      {
        xpc_object_t v16 = xpc_null_create();
        xpc_object_t v15 = 0;
        goto LABEL_40;
      }
    }
    if (MEMORY[0x1C8795EB0](v15) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v15);
      goto LABEL_41;
    }
    xpc_object_t v16 = xpc_null_create();
LABEL_40:
    *(void *)std::string v61 = v16;
LABEL_41:
    xpc_release(v15);
    uint64_t v21 = (_OWORD *)(a1 + 40);
    ResetInfo::addToDict((ResetInfo *)(a1 + 40), (xpc_object_t *)v61);
    xpc_object_t v22 = *(xpc_object_t *)v61;
    xpc_object_t v60 = *(xpc_object_t *)v61;
    if (*(void *)v61)
    {
      xpc_retain(*(xpc_object_t *)v61);
    }
    else
    {
      xpc_object_t v22 = xpc_null_create();
      xpc_object_t v60 = v22;
    }
    BootModule::submitBBResetMetric_sync((uint64_t)v2, &v60);
    xpc_release(v22);
    xpc_object_t v23 = *(xpc_object_t *)v61;
    xpc_object_t v59 = *(xpc_object_t *)v61;
    xpc_object_t v60 = 0;
    if (*(void *)v61)
    {
      xpc_retain(*(xpc_object_t *)v61);
    }
    else
    {
      xpc_object_t v23 = xpc_null_create();
      xpc_object_t v59 = v23;
    }
    BootModule::updateAnalyticsEvent_sync((uint64_t)v2, &v59);
    xpc_release(v23);
    xpc_object_t v59 = 0;
    if (*(char *)(a1 + 63) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v21;
      __p.__r_.__value_.__r.__words[2] = *(void *)(a1 + 56);
    }
    int v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = __p.__r_.__value_.__l.__size_;
    }
    if (size == strlen((const char *)*MEMORY[0x1E4F4C6E8]))
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t p_p = &__p;
      }
      else {
        uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      BOOL v27 = memcmp(p_p, (const void *)*MEMORY[0x1E4F4C6E8], size) == 0;
      if ((v24 & 0x80000000) == 0)
      {
LABEL_61:
        if (v27)
        {
          BootModule::reportStatisticsHardResetTime_sync((BootModule *)v2);
          goto LABEL_79;
        }
        if (*(char *)(a1 + 63) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
        }
        else
        {
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v21;
          __p.__r_.__value_.__r.__words[2] = *(void *)(a1 + 56);
        }
        int v28 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v29 = __p.__r_.__value_.__l.__size_;
        }
        if (v29 == strlen((const char *)*MEMORY[0x1E4F4C6F0]))
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v30 = &__p;
          }
          else {
            uint64_t v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          BOOL v31 = memcmp(v30, (const void *)*MEMORY[0x1E4F4C6F0], v29) == 0;
          if ((v28 & 0x80000000) == 0)
          {
LABEL_77:
            if (v31) {
              BootModule::reportStatisticsSoftReset_sync((BootModule *)v2);
            }
LABEL_79:
            memset(&buf, 170, 16);
            (*(void (**)(std::string *__return_ptr, void *))(*v2 + 80))(&buf, v2);
            std::string::size_type v32 = buf.__r_.__value_.__r.__words[0];
            if (!buf.__r_.__value_.__r.__words[0])
            {
LABEL_105:
              uint64_t v47 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
              if (buf.__r_.__value_.__l.__size_
                && !atomic_fetch_add((atomic_ullong *volatile)(buf.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                std::__shared_weak_count::__release_weak(v47);
              }
              xpc_release(*(xpc_object_t *)v61);
              return;
            }
            dispatch_object_t object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
            xpc_object_t v33 = (char *)operator new(0x38uLL);
            strcpy(v33, "com.apple.AppleBasebandManager.RadioNotReady.Bootup");
            uint64_t v34 = capabilities::abs::resetAssertionTimeoutScalingFactor((capabilities::abs *)v33);
            uint64_t v35 = *(void *)(v32 + 104);
            std::string::__init_copy_ctor_external(&__p, v33, 0x33uLL);
            (*(void (**)(dispatch_object_t *__return_ptr, uint64_t, std::string *, uint64_t))(*(void *)v35 + 24))(&object, v35, &__p, 360000 * v34);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            operator delete(v33);
            std::string::size_type v37 = *(void *)(a1 + 160);
            std::string::size_type v36 = *(void *)(a1 + 168);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v2;
            __p.__r_.__value_.__l.__size_ = v37;
            __p.__r_.__value_.__r.__words[2] = v36;
            if (v36) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 16), 1uLL, memory_order_relaxed);
            }
            ResetInfo::ResetInfo(&v49, (const ResetInfo *)(a1 + 40));
            uint64_t v38 = *(void **)(a1 + 152);
            if (v38) {
              uint64_t v38 = _Block_copy(v38);
            }
            aBlocunint64_t k = v38;
            dispatch_object_t v57 = object;
            if (object)
            {
              dispatch_retain(object);
              long long v39 = object;
            }
            else
            {
              long long v39 = 0;
            }
            char v40 = v2[17];
            uint64_t v41 = (std::string *)operator new(0x98uLL);
            unint64_t v42 = (std::string::__raw *)v41;
            *(_OWORD *)&v41->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            std::string::size_type v43 = __p.__r_.__value_.__r.__words[2];
            v41->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
            if (v43) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v43 + 16), 1uLL, memory_order_relaxed);
            }
            ResetInfo::ResetInfo(v41 + 1, (const ResetInfo *)&v49);
            uint64_t v44 = aBlock;
            if (aBlock) {
              uint64_t v44 = _Block_copy(aBlock);
            }
            dispatch_object_t v45 = v57;
            v42[5].__words[2] = (std::string::size_type)v44;
            v42[6].__words[0] = (std::string::size_type)v45;
            dispatch_object_t v57 = 0;
            dispatch_group_notify_f(v39, v40, v42, (dispatch_function_t)_ZZN8dispatch6detail12group_notifyIZZZN10BootModule12requestResetE9ResetInfoNS_5blockIU13block_pointerFviNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEEUb_EUb0_E3__0EEvP16dispatch_group_sP16dispatch_queue_sOT_NS5_17integral_constantIbLb0EEEENUlPvE_8__invokeESO_);
            if (v57) {
              dispatch_release(v57);
            }
            if (aBlock) {
              _Block_release(aBlock);
            }
            if (v55 < 0)
            {
              operator delete(v54);
              if ((v53 & 0x80000000) == 0)
              {
LABEL_99:
                if ((v51 & 0x80000000) == 0) {
                  goto LABEL_100;
                }
                goto LABEL_112;
              }
            }
            else if ((v53 & 0x80000000) == 0)
            {
              goto LABEL_99;
            }
            operator delete(v52);
            if ((v51 & 0x80000000) == 0)
            {
LABEL_100:
              if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_101;
              }
              goto LABEL_113;
            }
LABEL_112:
            operator delete(v50);
            if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_101:
              uint64_t v46 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
              if (!__p.__r_.__value_.__r.__words[2]) {
                goto LABEL_103;
              }
              goto LABEL_102;
            }
LABEL_113:
            operator delete(v49.__r_.__value_.__l.__data_);
            uint64_t v46 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
            if (!__p.__r_.__value_.__r.__words[2])
            {
LABEL_103:
              if (object) {
                dispatch_release(object);
              }
              goto LABEL_105;
            }
LABEL_102:
            std::__shared_weak_count::__release_weak(v46);
            goto LABEL_103;
          }
        }
        else
        {
          BOOL v31 = 0;
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_77;
          }
        }
        operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_77;
      }
    }
    else
    {
      BOOL v27 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_61;
      }
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_61;
  }
  uint64_t v5 = (int)v3;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1C5BCB060;
  strcpy(__p.__r_.__value_.__l.__data_, "Reset rejected; Boot state is: ");
  if (v5 > 8) {
    uint64_t v6 = "Unknown";
  }
  else {
    uint64_t v6 = off_1E651BEB0[v5];
  }
  size_t v7 = strlen(v6);
  std::string::size_type v8 = std::string::append(&__p, v6, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  buf.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v10 = v2[11];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    int v17 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
    std::string::size_type v18 = buf.__r_.__value_.__r.__words[0];
    ResetInfo::asString((ResetInfo *)(a1 + 40), &__p);
    p_std::string buf = &buf;
    if (v17 < 0) {
      p_std::string buf = (std::string *)v18;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v20 = &__p;
    }
    else {
      long long v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string v61 = 136315394;
    *(void *)&v61[4] = p_buf;
    __int16 v62 = 2080;
    uint64_t v63 = v20;
    _os_log_debug_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_DEBUG, "#D %s; %s", v61, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v11 = *(void *)(a1 + 152);
  if (!v11) {
    goto LABEL_16;
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = buf;
  }
  (*(void (**)(uint64_t, uint64_t, std::string *))(v11 + 16))(v11, 3760250880, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_17;
    }
  }
  else
  {
LABEL_16:
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
LABEL_17:
    }
      operator delete(buf.__r_.__value_.__l.__data_);
  }
}

void sub_1C5B1E9AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,dispatch_object_t object)
{
  xpc_release(*(xpc_object_t *)(v28 - 128));
  _Unwind_Resume(a1);
}

void BootModule::submitBBResetMetric_sync(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v4 = MEMORY[0x1C8795EB0](*a2);
  uint64_t v5 = MEMORY[0x1E4F14590];
  uint64_t v6 = *(NSObject **)(a1 + 88);
  if (v4 != MEMORY[0x1E4F14590])
  {
    if (os_log_type_enabled(*(os_log_t *)(a1 + 88), OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_ERROR, "No input is given", buf, 2u);
    }
    return;
  }
  if (os_log_type_enabled(*(os_log_t *)(a1 + 88), OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#I Submitting AWD of baseband reset", buf, 2u);
  }
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  if (v7 || (xpc_object_t v7 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v7) == v5)
    {
      xpc_retain(v7);
      xpc_object_t v8 = v7;
    }
    else
    {
      xpc_object_t v8 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t v7 = 0;
  }
  xpc_release(v7);
  xpc_object_t v9 = xpc_BOOL_create(*(unsigned char *)(a1 + 288));
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C1B0], v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  xpc_object_t v11 = xpc_int64_create(*(int *)(a1 + 296));
  if (!v11) {
    xpc_object_t v11 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4D2E0], v11);
  xpc_object_t v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  xpc_object_t v13 = xpc_int64_create(*(int *)(a1 + 344));
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4D2E8], v13);
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  xpc_object_t v15 = (const char *)(a1 + 304);
  if (*(char *)(a1 + 327) < 0) {
    xpc_object_t v15 = *(const char **)v15;
  }
  xpc_object_t v16 = xpc_string_create(v15);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4D320], v16);
  xpc_object_t v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  std::string::size_type v18 = (const char *)(a1 + 352);
  if (*(char *)(a1 + 375) < 0) {
    std::string::size_type v18 = *(const char **)v18;
  }
  xpc_object_t v19 = xpc_string_create(v18);
  if (!v19) {
    xpc_object_t v19 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4D328], v19);
  xpc_object_t v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  uint64_t v21 = (const char *)(a1 + 392);
  if (*(char *)(a1 + 415) < 0) {
    uint64_t v21 = *(const char **)v21;
  }
  xpc_object_t v22 = xpc_string_create(v21);
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4D2D8], v22);
  xpc_object_t v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  xpc_object_t v24 = xpc_int64_create(*(int *)(a1 + 256));
  if (!v24) {
    xpc_object_t v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C150], v24);
  xpc_object_t v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  xpc_object_t v26 = xpc_string_create((const char *)*MEMORY[0x1E4F4D2D0]);
  if (!v26) {
    xpc_object_t v26 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E4F4C190], v26);
  xpc_object_t v27 = xpc_null_create();
  xpc_release(v26);
  xpc_release(v27);
  xpc_object_t v28 = xpc_int64_create(524310);
  if (!v28) {
    xpc_object_t v28 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E4F4C258], v28);
  xpc_object_t v29 = xpc_null_create();
  xpc_release(v28);
  xpc_release(v29);
  xpc_object_t v30 = *a2;
  if (v30) {
    xpc_retain(v30);
  }
  else {
    xpc_object_t v30 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E4F4C188], v30);
  xpc_object_t v31 = xpc_null_create();
  xpc_release(v30);
  xpc_release(v31);
  std::string::size_type v32 = (const void *)*MEMORY[0x1E4F4C738];
  size_t v33 = strlen((const char *)*MEMORY[0x1E4F4C738]);
  if (v33 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v34 = v33;
  if (v33 >= 0x17)
  {
    uint64_t v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17) {
      uint64_t v36 = v33 | 7;
    }
    uint64_t v37 = v36 + 1;
    uint64_t v35 = operator new(v36 + 1);
    size_t v41 = v34;
    unint64_t v42 = v37 | 0x8000000000000000;
    *(void *)std::string buf = v35;
LABEL_47:
    memmove(v35, v32, v34);
    *((unsigned char *)v35 + v34) = 0;
    xpc_object_t object = v8;
    if (v8) {
      goto LABEL_43;
    }
LABEL_48:
    xpc_object_t object = xpc_null_create();
    goto LABEL_49;
  }
  HIBYTE(v42) = v33;
  uint64_t v35 = buf;
  if (v33) {
    goto LABEL_47;
  }
  buf[0] = 0;
  xpc_object_t object = v8;
  if (!v8) {
    goto LABEL_48;
  }
LABEL_43:
  xpc_retain(v8);
LABEL_49:
  uint64_t v38 = 0;
  Service::runCommand(a1, (uint64_t)buf, &object, &v38);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(v42) < 0) {
    operator delete(*(void **)buf);
  }
  xpc_release(v8);
}

void sub_1C5B1F07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  xpc_release(object);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(v16);
  _Unwind_Resume(a1);
}

void BootModule::updateAnalyticsEvent_sync(uint64_t a1, xpc_object_t *a2)
{
  v214[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = MEMORY[0x1C8795EB0](*a2);
  uint64_t v5 = MEMORY[0x1E4F14590];
  uint64_t v6 = *(NSObject **)(a1 + 88);
  if (v4 != MEMORY[0x1E4F14590])
  {
    if (os_log_type_enabled(*(os_log_t *)(a1 + 88), OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_ERROR, "No input is given", (uint8_t *)&buf, 2u);
    }
    return;
  }
  if (os_log_type_enabled(*(os_log_t *)(a1 + 88), OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#I Updating Analytics metric of baseband reset", (uint8_t *)&buf, 2u);
  }
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  if (v7 || (xpc_object_t v7 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v7) == v5)
    {
      xpc_retain(v7);
      xpc_object_t v8 = v7;
    }
    else
    {
      xpc_object_t v8 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t v7 = 0;
  }
  xpc_release(v7);
  xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
  if (v9 || (xpc_object_t v9 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v9) == v5)
    {
      xpc_retain(v9);
      xpc_object_t v10 = v9;
    }
    else
    {
      xpc_object_t v10 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v10 = xpc_null_create();
    xpc_object_t v9 = 0;
  }
  xpc_release(v9);
  xpc_object_t v11 = xpc_BOOL_create(*(unsigned char *)(a1 + 288));
  if (!v11) {
    xpc_object_t v11 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "inVoiceCall", v11);
  xpc_object_t v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  xpc_object_t v13 = xpc_int64_create(*(int *)(a1 + 296));
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "rat", v13);
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  xpc_object_t v15 = xpc_int64_create(*(int *)(a1 + 344));
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "rat2", v15);
  xpc_object_t v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  xpc_object_t v17 = (const char *)(a1 + 304);
  if (*(char *)(a1 + 327) < 0) {
    xpc_object_t v17 = *(const char **)v17;
  }
  xpc_object_t v18 = xpc_string_create(v17);
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "PLMN", v18);
  xpc_object_t v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  xpc_object_t v20 = (const char *)(a1 + 352);
  if (*(char *)(a1 + 375) < 0) {
    xpc_object_t v20 = *(const char **)v20;
  }
  xpc_object_t v21 = xpc_string_create(v20);
  if (!v21) {
    xpc_object_t v21 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "PLMN2", v21);
  xpc_object_t v22 = xpc_null_create();
  xpc_release(v21);
  xpc_release(v22);
  uint64_t v23 = *(void *)(a1 + 328);
  if (v23)
  {
    xpc_object_t v24 = xpc_uint64_create(v23);
    if (!v24) {
      xpc_object_t v24 = xpc_null_create();
    }
    xpc_dictionary_set_value(v10, "cellId", v24);
    xpc_object_t v25 = xpc_null_create();
    xpc_release(v24);
    xpc_release(v25);
  }
  uint64_t v26 = *(void *)(a1 + 376);
  if (v26)
  {
    xpc_object_t v27 = xpc_uint64_create(v26);
    if (!v27) {
      xpc_object_t v27 = xpc_null_create();
    }
    xpc_dictionary_set_value(v10, "cellId2", v27);
    xpc_object_t v28 = xpc_null_create();
    xpc_release(v27);
    xpc_release(v28);
  }
  uint64_t v29 = *(void *)(a1 + 336);
  if (v29)
  {
    xpc_object_t v30 = xpc_uint64_create(v29);
    if (!v30) {
      xpc_object_t v30 = xpc_null_create();
    }
    xpc_dictionary_set_value(v10, "tac", v30);
    xpc_object_t v31 = xpc_null_create();
    xpc_release(v30);
    xpc_release(v31);
  }
  uint64_t v32 = *(void *)(a1 + 384);
  if (v32)
  {
    xpc_object_t v33 = xpc_uint64_create(v32);
    if (!v33) {
      xpc_object_t v33 = xpc_null_create();
    }
    xpc_dictionary_set_value(v10, "tac2", v33);
    xpc_object_t v34 = xpc_null_create();
    xpc_release(v33);
    xpc_release(v34);
  }
  uint64_t v35 = (const char *)(a1 + 392);
  if (*(char *)(a1 + 415) < 0) {
    uint64_t v35 = *(const char **)v35;
  }
  xpc_object_t v36 = xpc_string_create(v35);
  if (!v36) {
    xpc_object_t v36 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "sku", v36);
  xpc_object_t v37 = xpc_null_create();
  xpc_release(v36);
  xpc_release(v37);
  xpc_object_t v38 = xpc_int64_create(*(int *)(a1 + 256));
  if (!v38) {
    xpc_object_t v38 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "operatingMode", v38);
  xpc_object_t v39 = xpc_null_create();
  xpc_release(v38);
  xpc_release(v39);
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C8E8]);
  *(void *)&long long buf = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    *(void *)&long long buf = xpc_null_create();
  }
  int v41 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  xpc_release((xpc_object_t)buf);
  int is_transcription_pending = util::apfs::is_transcription_pending(v42);
  xpc_object_t v44 = xpc_BOOL_create(v41 & ~(_BYTE)is_transcription_pending);
  if (!v44) {
    xpc_object_t v44 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "isMTBF", v44);
  xpc_object_t v45 = xpc_null_create();
  xpc_release(v44);
  xpc_release(v45);
  memset(__s1, 170, sizeof(__s1));
  xpc_object_t v46 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4CA38]);
  *(void *)&long long buf = v46;
  if (v46) {
    xpc_retain(v46);
  }
  else {
    *(void *)&long long buf = xpc_null_create();
  }
  xpc::dyn_cast_or_default(__s1, (xpc *)&buf, (const object *)*MEMORY[0x1E4F4D038], v47);
  xpc_release((xpc_object_t)buf);
  if (is_transcription_pending)
  {
    xpc_object_t v48 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1C59C6000, v48, OS_LOG_TYPE_DEFAULT, "#I APFS transcription is pending", (uint8_t *)&buf, 2u);
    }
    if (v41)
    {
      std::string v49 = *(NSObject **)(a1 + 88);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1C59C6000, v49, OS_LOG_TYPE_DEFAULT, "#I Downgrading Baseband Reset MTBF metric because APFS transcription is pending", (uint8_t *)&buf, 2u);
      }
    }
  }
  if (__s1[2] >= 0) {
    uint64_t v50 = (const char *)__s1;
  }
  else {
    uint64_t v50 = (const char *)__s1[0];
  }
  xpc_object_t v51 = xpc_string_create(v50);
  if (!v51) {
    xpc_object_t v51 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "resetType", v51);
  xpc_object_t v52 = xpc_null_create();
  xpc_release(v51);
  xpc_release(v52);
  size_t v53 = strlen((const char *)*MEMORY[0x1E4F4D130]);
  unint64_t v54 = v53;
  if ((SHIBYTE(__s1[2]) & 0x80000000) == 0)
  {
    if (v53 != -1)
    {
      unint64_t v55 = HIBYTE(__s1[2]);
      long long v56 = __s1;
      goto LABEL_78;
    }
LABEL_302:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v53 == -1) {
    goto LABEL_302;
  }
  long long v56 = (uint64_t *)__s1[0];
  unint64_t v55 = __s1[1];
LABEL_78:
  if (v55 >= v54) {
    size_t v57 = v54;
  }
  else {
    size_t v57 = v55;
  }
  if (!memcmp(v56, (const void *)*MEMORY[0x1E4F4D130], v57) && v55 == v54)
  {
    xpc_object_t v58 = xpc_string_create((const char *)*MEMORY[0x1E4F4C4B0]);
    if (!v58) {
      xpc_object_t v58 = xpc_null_create();
    }
    xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E4F4C540], v58);
    xpc_object_t v59 = xpc_null_create();
    xpc_release(v58);
    xpc_release(v59);
    goto LABEL_266;
  }
  memset(&__dst, 170, sizeof(__dst));
  xpc_object_t v60 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C8F0]);
  *(void *)&long long buf = v60;
  if (v60) {
    xpc_retain(v60);
  }
  else {
    *(void *)&long long buf = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)&__dst, (xpc *)&buf, (const object *)"no-reset-reason", v61);
  xpc_release((xpc_object_t)buf);
  memset(&__str, 170, sizeof(__str));
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__str, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  }
  else {
    std::string __str = __dst;
  }
  __int16 v62 = (const void *)*MEMORY[0x1E4F4D1A0];
  size_t v63 = strlen((const char *)*MEMORY[0x1E4F4D1A0]);
  size_t v64 = v63;
  if (SHIBYTE(__s1[2]) < 0)
  {
    if (v63 != -1)
    {
      uint64_t v65 = __s1[1];
      if (__s1[1] >= v63) {
        size_t v68 = v63;
      }
      else {
        size_t v68 = __s1[1];
      }
      std::string v67 = (capabilities::radio *)memcmp((const void *)__s1[0], v62, v68);
      if (v67) {
        goto LABEL_252;
      }
      goto LABEL_104;
    }
LABEL_304:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v63 == -1) {
    goto LABEL_304;
  }
  uint64_t v65 = HIBYTE(__s1[2]);
  if (HIBYTE(__s1[2]) >= v63) {
    size_t v66 = v63;
  }
  else {
    size_t v66 = HIBYTE(__s1[2]);
  }
  std::string v67 = (capabilities::radio *)memcmp(__s1, v62, v66);
  if (v67) {
    goto LABEL_252;
  }
LABEL_104:
  if (v65 == v64)
  {
    std::string v69 = (capabilities::radio *)capabilities::radio::maverick(v67);
    if (v69)
    {
      *(void *)&long long v70 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v70 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v200 = v70;
      long long v201 = v70;
      long long v198 = v70;
      long long v199 = v70;
      std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v198, "(ATCS_TIMEOUT on message for svc=[0-9]*)(client=[0-9]*).*(txid=[0-9]*)(msgid=0x[a-zA-Z0-9]*)\\)(.*)", 0);
      *(void *)&long long v71 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v71 + 1) = 0xAAAAAAAAAAAAAAAALL;
      unint64_t v193 = 0xAAAAAAAAAAAAAA00;
      v190[1].__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)0xAAAAAAAAAAAAAAAALL;
      long long v196 = v71;
      uint64_t v191 = 0;
      uint64_t v192 = 0;
      uint64_t v194 = 0;
      uint64_t v195 = 0;
      LOBYTE(v196) = 0;
      BYTE8(v196) = 0;
      uint64_t v197 = 0;
      memset(v190, 0, 41);
      unint64_t v209 = 0xAAAAAAAAAAAAAA00;
      *((void *)&v206[1] + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v212 = v71;
      uint64_t v207 = 0;
      uint64_t v208 = 0;
      uint64_t v210 = 0;
      uint64_t v211 = 0;
      LOBYTE(v212) = 0;
      BYTE8(v212) = 0;
      uint64_t v213 = 0;
      long long buf = 0u;
      v206[0] = 0u;
      std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_dst = (std::sub_match<const char *> *)&__dst;
      }
      else {
        p_dst = (std::sub_match<const char *> *)__dst.__r_.__value_.__r.__words[0];
      }
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __dst.__r_.__value_.__l.__size_;
      }
      *(_OWORD *)((char *)v206 + 9) = 0uLL;
      int v74 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)&v198, p_dst, (std::sub_match<const char *> *)((char *)p_dst + size), (std::vector<std::csub_match> *)&buf, 0);
      std::string::size_type v75 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        __darwin_time_t v76 = &__dst;
      }
      else {
        __darwin_time_t v76 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v75 = __dst.__r_.__value_.__l.__size_;
      }
      std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v190, (uint64_t)v76, (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v76 + v75), (uint64_t *)&buf, 0);
      if ((void)buf)
      {
        *((void *)&buf + 1) = buf;
        operator delete((void *)buf);
      }
      if (!v74) {
        goto LABEL_246;
      }
      std::vector<std::ssub_match>::pointer begin = v190[0].__begin_;
      unint64_t v78 = 0xAAAAAAAAAAAAAAABLL * (((char *)v190[0].__end_ - (char *)v190[0].__begin_) >> 3);
      if (v78 <= 1) {
        std::vector<std::ssub_match>::pointer v79 = (std::vector<std::ssub_match>::pointer)v190;
      }
      else {
        std::vector<std::ssub_match>::pointer v79 = v190[0].__begin_;
      }
      if (!v79[1].matched)
      {
        memset(&v189, 0, sizeof(v189));
        goto LABEL_161;
      }
      std::__wrap_iter<const char *>::iterator_type i = v79[1].first.__i_;
      std::__wrap_iter<const char *>::iterator_type v81 = v79[1].second.__i_;
      unint64_t v82 = v81 - i;
      if ((unint64_t)(v81 - i) > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v82 > 0x16)
      {
        uint64_t v92 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v82 | 7) != 0x17) {
          uint64_t v92 = v82 | 7;
        }
        uint64_t v93 = v92 + 1;
        long long v83 = (char *)operator new(v92 + 1);
        v189.__r_.__value_.__l.__size_ = v81 - i;
        v189.__r_.__value_.__r.__words[2] = v93 | 0x8000000000000000;
        v189.__r_.__value_.__r.__words[0] = (std::string::size_type)v83;
      }
      else
      {
        *((unsigned char *)&v189.__r_.__value_.__s + 23) = (_BYTE)v81 - (_BYTE)i;
        long long v83 = (char *)&v189;
      }
      if (i == v81)
      {
        uint64_t v94 = v83;
      }
      else
      {
        if (v82 < 0x20 || (unint64_t)(v83 - i) < 0x20)
        {
          uint64_t v94 = v83;
          size_t v95 = i;
        }
        else
        {
          uint64_t v94 = &v83[v82 & 0xFFFFFFFFFFFFFFE0];
          size_t v95 = &i[v82 & 0xFFFFFFFFFFFFFFE0];
          unint64_t v96 = (long long *)(i + 16);
          uint64_t v97 = v83 + 16;
          unint64_t v98 = v82 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v99 = *v96;
            *(v97 - 1) = *(v96 - 1);
            *uint64_t v97 = v99;
            v96 += 2;
            v97 += 2;
            v98 -= 32;
          }
          while (v98);
          if (v82 == (v82 & 0xFFFFFFFFFFFFFFE0)) {
            goto LABEL_160;
          }
        }
        do
        {
          char v100 = *v95++;
          *v94++ = v100;
        }
        while (v95 != v81);
      }
LABEL_160:
      char *v94 = 0;
      std::vector<std::ssub_match>::pointer begin = v190[0].__begin_;
      unint64_t v78 = 0xAAAAAAAAAAAAAAABLL * (((char *)v190[0].__end_ - (char *)v190[0].__begin_) >> 3);
LABEL_161:
      p_matched = (std::__compressed_pair<std::ssub_match *> *)&begin[4].matched;
      if (v78 <= 4) {
        p_matched = &v190[1].__end_cap_;
      }
      unsigned int value_low = LOBYTE(p_matched->__value_);
      if (!value_low)
      {
        std::string::size_type v110 = 0;
        int v111 = 0;
        uint64_t v186 = 0;
        unint64_t v187 = 0;
        unint64_t v188 = 0;
        goto LABEL_187;
      }
      BOOL v103 = v78 > 4;
      if (v78 <= 4) {
        size_t v104 = &v190[1];
      }
      else {
        size_t v104 = (std::vector<std::ssub_match> *)&begin[4];
      }
      std::vector<std::ssub_match>::pointer v105 = v104->__begin_;
      p_second = (std::vector<std::ssub_match>::pointer *)&begin[4].second;
      if (!v103) {
        p_second = &v190[1].__end_;
      }
      std::vector<std::ssub_match>::pointer v107 = *p_second;
      unint64_t v108 = (char *)*p_second - (char *)v105;
      if (v108 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v108 > 0x16)
      {
        uint64_t v112 = (v108 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v108 | 7) != 0x17) {
          uint64_t v112 = v108 | 7;
        }
        uint64_t v113 = v112 + 1;
        uint64_t v109 = operator new(v112 + 1);
        unint64_t v187 = v108;
        unint64_t v188 = v113 | 0x8000000000000000;
        uint64_t v186 = v109;
      }
      else
      {
        HIBYTE(v188) = *(unsigned char *)p_second - (_BYTE)v105;
        uint64_t v109 = &v186;
      }
      if (v105 == v107)
      {
        size_t v114 = v109;
      }
      else
      {
        if (v108 < 0x20 || (unint64_t)((char *)v109 - (char *)v105) < 0x20)
        {
          size_t v114 = v109;
          int v115 = (char *)v105;
        }
        else
        {
          size_t v114 = (char *)v109 + (v108 & 0xFFFFFFFFFFFFFFE0);
          int v115 = (char *)v105 + (v108 & 0xFFFFFFFFFFFFFFE0);
          size_t v116 = &v105->matched;
          int v117 = v109 + 1;
          unint64_t v118 = v108 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v119 = *(_OWORD *)v116;
            *(v117 - 1) = *((_OWORD *)v116 - 1);
            _OWORD *v117 = v119;
            v116 += 32;
            v117 += 2;
            v118 -= 32;
          }
          while (v118);
          if (v108 == (v108 & 0x7FFFFFFFFFFFFFE0)) {
            goto LABEL_186;
          }
        }
        do
        {
          char v120 = *v115++;
          *v114++ = v120;
        }
        while (v115 != (char *)v107);
      }
LABEL_186:
      unsigned char *v114 = 0;
      unsigned int value_low = HIBYTE(v188);
      int v111 = (void **)v186;
      std::string::size_type v110 = v187;
LABEL_187:
      if ((value_low & 0x80u) == 0) {
        uint64_t v121 = &v186;
      }
      else {
        uint64_t v121 = v111;
      }
      if ((value_low & 0x80u) == 0) {
        std::string::size_type v122 = value_low;
      }
      else {
        std::string::size_type v122 = v110;
      }
      uint64_t v123 = std::string::append(&v189, (const std::string::value_type *)v121, v122);
      long long v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
      *(void *)&v206[0] = *((void *)&v123->__r_.__value_.__l + 2);
      long long buf = v124;
      v123->__r_.__value_.__l.__size_ = 0;
      v123->__r_.__value_.__r.__words[2] = 0;
      v123->__r_.__value_.__r.__words[0] = 0;
      unint64_t v125 = 0xAAAAAAAAAAAAAAABLL * (((char *)v190[0].__end_ - (char *)v190[0].__begin_) >> 3);
      p_end_cap = (std::__compressed_pair<std::ssub_match *> *)&v190[0].__begin_[5].matched;
      if (v125 <= 5) {
        p_end_cap = &v190[1].__end_cap_;
      }
      unsigned int v127 = LOBYTE(p_end_cap->__value_);
      if (!v127)
      {
        std::string::size_type v135 = 0;
        __int16 v136 = 0;
        std::string __p = 0;
        unint64_t v184 = 0;
        unint64_t v185 = 0;
        goto LABEL_219;
      }
      BOOL v128 = v125 > 5;
      if (v125 <= 5) {
        std::vector<std::ssub_match>::pointer v129 = (std::vector<std::ssub_match>::pointer)&v190[1];
      }
      else {
        std::vector<std::ssub_match>::pointer v129 = v190[0].__begin_ + 5;
      }
      std::__wrap_iter<const char *>::iterator_type v130 = v129->first.__i_;
      p_std::vector<std::ssub_match>::pointer end = (std::vector<std::ssub_match>::pointer *)&v190[0].__begin_[5].second;
      if (!v128) {
        p_std::vector<std::ssub_match>::pointer end = &v190[1].__end_;
      }
      std::vector<std::ssub_match>::pointer v132 = *p_end;
      unint64_t v133 = (char *)*p_end - v130;
      if (v133 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v133 > 0x16)
      {
        uint64_t v137 = (v133 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v133 | 7) != 0x17) {
          uint64_t v137 = v133 | 7;
        }
        uint64_t v138 = v137 + 1;
        uint64_t p_p = operator new(v137 + 1);
        unint64_t v184 = v133;
        unint64_t v185 = v138 | 0x8000000000000000;
        std::string __p = p_p;
      }
      else
      {
        HIBYTE(v185) = *(unsigned char *)p_end - (_BYTE)v130;
        uint64_t p_p = &__p;
      }
      if (v130 == (std::__wrap_iter<const char *>::iterator_type)v132)
      {
        long long v139 = p_p;
      }
      else
      {
        if (v133 < 0x20 || (unint64_t)((char *)p_p - v130) < 0x20)
        {
          long long v139 = p_p;
          int v140 = v130;
        }
        else
        {
          long long v139 = (char *)p_p + (v133 & 0xFFFFFFFFFFFFFFE0);
          int v140 = &v130[v133 & 0xFFFFFFFFFFFFFFE0];
          uint64_t v141 = (long long *)(v130 + 16);
          unint64_t v142 = p_p + 1;
          unint64_t v143 = v133 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v144 = *v141;
            *(v142 - 1) = *(v141 - 1);
            *unint64_t v142 = v144;
            v141 += 2;
            v142 += 2;
            v143 -= 32;
          }
          while (v143);
          if (v133 == (v133 & 0x7FFFFFFFFFFFFFE0)) {
            goto LABEL_218;
          }
        }
        do
        {
          char v145 = *v140++;
          *v139++ = v145;
        }
        while (v140 != (unsigned char *)v132);
      }
LABEL_218:
      *long long v139 = 0;
      unsigned int v127 = HIBYTE(v185);
      __int16 v136 = (void **)__p;
      std::string::size_type v135 = v184;
LABEL_219:
      if ((v127 & 0x80u) == 0) {
        uint64_t v146 = &__p;
      }
      else {
        uint64_t v146 = v136;
      }
      if ((v127 & 0x80u) == 0) {
        std::string::size_type v147 = v127;
      }
      else {
        std::string::size_type v147 = v135;
      }
      unint64_t v148 = std::string::append((std::string *)&buf, (const std::string::value_type *)v146, v147);
      std::string::size_type v149 = v148->__r_.__value_.__r.__words[0];
      v214[0] = v148->__r_.__value_.__l.__size_;
      *(void *)((char *)v214 + 7) = *(std::string::size_type *)((char *)&v148->__r_.__value_.__r.__words[1] + 7);
      char v150 = HIBYTE(v148->__r_.__value_.__r.__words[2]);
      v148->__r_.__value_.__l.__size_ = 0;
      v148->__r_.__value_.__r.__words[2] = 0;
      v148->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      __str.__r_.__value_.__r.__words[0] = v149;
      __str.__r_.__value_.__l.__size_ = v214[0];
      *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v214 + 7);
      *((unsigned char *)&__str.__r_.__value_.__s + 23) = v150;
      if (SHIBYTE(v185) < 0)
      {
        operator delete(__p);
        if ((SBYTE7(v206[0]) & 0x80000000) == 0)
        {
LABEL_229:
          if ((SHIBYTE(v188) & 0x80000000) == 0) {
            goto LABEL_230;
          }
          goto LABEL_236;
        }
      }
      else if ((SBYTE7(v206[0]) & 0x80000000) == 0)
      {
        goto LABEL_229;
      }
      operator delete((void *)buf);
      if ((SHIBYTE(v188) & 0x80000000) == 0)
      {
LABEL_230:
        if ((SHIBYTE(v189.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_231;
        }
        goto LABEL_237;
      }
LABEL_236:
      operator delete(v186);
      if ((SHIBYTE(v189.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_231:
        size_t v151 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_232;
        }
        goto LABEL_238;
      }
LABEL_237:
      operator delete(v189.__r_.__value_.__l.__data_);
      size_t v151 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_232:
        if ((v151 & 0x80) != 0) {
          std::string::__assign_no_alias<true>(&__dst, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        }
        else {
          std::string __dst = __str;
        }
LABEL_246:
        if (v190[0].__begin_)
        {
          v190[0].__end_ = v190[0].__begin_;
          operator delete(v190[0].__begin_);
        }
        int64_t v154 = (std::__shared_weak_count *)v201;
        if ((void)v201 && !atomic_fetch_add((atomic_ullong *volatile)(v201 + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
          std::__shared_weak_count::__release_weak(v154);
        }
        std::locale::~locale((std::locale *)&v198);
        goto LABEL_252;
      }
LABEL_238:
      if ((v151 & 0x80u) == 0) {
        p_str = &__str;
      }
      else {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if ((v151 & 0x80u) == 0) {
        size_t v153 = v151;
      }
      else {
        size_t v153 = __str.__r_.__value_.__l.__size_;
      }
      std::string::__assign_no_alias<false>((void **)&__dst.__r_.__value_.__l.__data_, p_str, v153);
      goto LABEL_246;
    }
    if (capabilities::radio::ice(v69))
    {
      *(void *)&long long v84 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v84 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v200 = v84;
      long long v201 = v84;
      long long v198 = v84;
      long long v199 = v84;
      std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v198, "(.*ARI_TIMEOUT -.*)( SZ\\([0-9]*\\).*)", 0);
      *(void *)&long long v85 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v85 + 1) = 0xAAAAAAAAAAAAAAAALL;
      unint64_t v193 = 0xAAAAAAAAAAAAAA00;
      v190[1].__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)0xAAAAAAAAAAAAAAAALL;
      long long v196 = v85;
      uint64_t v191 = 0;
      uint64_t v192 = 0;
      uint64_t v194 = 0;
      uint64_t v195 = 0;
      LOBYTE(v196) = 0;
      BYTE8(v196) = 0;
      uint64_t v197 = 0;
      memset(v190, 0, 41);
      unint64_t v209 = 0xAAAAAAAAAAAAAA00;
      *((void *)&v206[1] + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v212 = v85;
      uint64_t v207 = 0;
      uint64_t v208 = 0;
      uint64_t v210 = 0;
      uint64_t v211 = 0;
      LOBYTE(v212) = 0;
      BYTE8(v212) = 0;
      uint64_t v213 = 0;
      long long buf = 0u;
      v206[0] = 0u;
      std::string::size_type v86 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        xpc_object_t v87 = (std::sub_match<const char *> *)&__dst;
      }
      else {
        xpc_object_t v87 = (std::sub_match<const char *> *)__dst.__r_.__value_.__r.__words[0];
      }
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v86 = __dst.__r_.__value_.__l.__size_;
      }
      *(_OWORD *)((char *)v206 + 9) = 0uLL;
      int v88 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)&v198, v87, (std::sub_match<const char *> *)((char *)v87 + v86), (std::vector<std::csub_match> *)&buf, 0);
      std::string::size_type v89 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v90 = &__dst;
      }
      else {
        unint64_t v90 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v89 = __dst.__r_.__value_.__l.__size_;
      }
      std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v190, (uint64_t)v90, (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v90 + v89), (uint64_t *)&buf, 0);
      if ((void)buf)
      {
        *((void *)&buf + 1) = buf;
        operator delete((void *)buf);
      }
      if (v88)
      {
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v190[0].__end_ - (char *)v190[0].__begin_) >> 3) <= 1) {
          uint64_t v91 = (uint64_t *)&v190[1];
        }
        else {
          uint64_t v91 = (uint64_t *)&v190[0].__begin_[1];
        }
        std::sub_match<std::__wrap_iter<char const*>>::str[abi:ne180100](&buf, v91);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = buf;
        __str.__r_.__value_.__r.__words[2] = *(void *)&v206[0];
        std::string::operator=(&__dst, &__str);
      }
      goto LABEL_246;
    }
  }
LABEL_252:
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v155 = &__dst;
  }
  else {
    uint64_t v155 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v156 = xpc_string_create((const char *)v155);
  if (!v156) {
    xpc_object_t v156 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "resetReason", v156);
  xpc_object_t v157 = xpc_null_create();
  xpc_release(v156);
  xpc_release(v157);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v158 = &__str;
  }
  else {
    uint64_t v158 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v159 = xpc_string_create((const char *)v158);
  if (!v159) {
    xpc_object_t v159 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "shortResetReason", v159);
  xpc_object_t v160 = xpc_null_create();
  xpc_release(v159);
  xpc_release(v160);
  xpc_object_t v161 = xpc_string_create((const char *)*MEMORY[0x1E4F4C4C0]);
  if (!v161) {
    xpc_object_t v161 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E4F4C540], v161);
  xpc_object_t v162 = xpc_null_create();
  xpc_release(v161);
  xpc_release(v162);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_266;
    }
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_266;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_266:
  xpc_object_t v163 = xpc_string_create("metricsCCBasebandResetInfo");
  if (!v163) {
    xpc_object_t v163 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E4F4C3C8], v163);
  xpc_object_t v164 = xpc_null_create();
  xpc_release(v163);
  xpc_release(v164);
  xpc_object_t v165 = xpc_string_create("Reset");
  if (!v165) {
    xpc_object_t v165 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E4F4C548], v165);
  xpc_object_t v166 = xpc_null_create();
  xpc_release(v165);
  xpc_release(v166);
  if (v10)
  {
    xpc_retain(v10);
    xpc_object_t v167 = v10;
  }
  else
  {
    xpc_object_t v167 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E4F4CB40], v167);
  xpc_object_t v168 = xpc_null_create();
  xpc_release(v167);
  xpc_release(v168);
  xpc_object_t v169 = xpc_dictionary_create(0, 0, 0);
  if (v169 || (xpc_object_t v169 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v169) == v5)
    {
      xpc_retain(v169);
      xpc_object_t v170 = v169;
    }
    else
    {
      xpc_object_t v170 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v170 = xpc_null_create();
    xpc_object_t v169 = 0;
  }
  xpc_release(v169);
  xpc_object_t v171 = xpc_string_create((const char *)*MEMORY[0x1E4F4C158]);
  if (!v171) {
    xpc_object_t v171 = xpc_null_create();
  }
  xpc_dictionary_set_value(v170, (const char *)*MEMORY[0x1E4F4C190], v171);
  xpc_object_t v172 = xpc_null_create();
  xpc_release(v171);
  xpc_release(v172);
  if (v8)
  {
    xpc_retain(v8);
    xpc_object_t v173 = v8;
  }
  else
  {
    xpc_object_t v173 = xpc_null_create();
  }
  xpc_dictionary_set_value(v170, (const char *)*MEMORY[0x1E4F4C188], v173);
  xpc_object_t v174 = xpc_null_create();
  xpc_release(v173);
  xpc_release(v174);
  unsigned __int8 v175 = (const void *)*MEMORY[0x1E4F4C738];
  size_t v176 = strlen((const char *)*MEMORY[0x1E4F4C738]);
  if (v176 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v177 = v176;
  if (v176 >= 0x17)
  {
    uint64_t v179 = (v176 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v176 | 7) != 0x17) {
      uint64_t v179 = v176 | 7;
    }
    uint64_t v180 = v179 + 1;
    p_long long buf = (long long *)operator new(v179 + 1);
    *((void *)&buf + 1) = v177;
    *(void *)&v206[0] = v180 | 0x8000000000000000;
    *(void *)&long long buf = p_buf;
LABEL_294:
    memmove(p_buf, v175, v177);
    *((unsigned char *)p_buf + v177) = 0;
    xpc_object_t object = v170;
    if (v170) {
      goto LABEL_290;
    }
LABEL_295:
    xpc_object_t object = xpc_null_create();
    goto LABEL_296;
  }
  BYTE7(v206[0]) = v176;
  p_long long buf = &buf;
  if (v176) {
    goto LABEL_294;
  }
  LOBYTE(buf) = 0;
  xpc_object_t object = v170;
  if (!v170) {
    goto LABEL_295;
  }
LABEL_290:
  xpc_retain(v170);
LABEL_296:
  long long v181 = 0;
  Service::runCommand(a1, (uint64_t)&buf, &object, &v181);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SBYTE7(v206[0]) < 0) {
    operator delete((void *)buf);
  }
  xpc_release(v170);
  if (SHIBYTE(__s1[2]) < 0) {
    operator delete((void *)__s1[0]);
  }
  xpc_release(v10);
  xpc_release(v8);
}

void sub_1C5B20648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::locale a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (__p) {
    operator delete(__p);
  }
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a37);
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  xpc_release(v64);
  xpc_release(v63);
  _Unwind_Resume(a1);
}

void BootModule::reportStatisticsHardResetTime_sync(BootModule *this)
{
  uint64_t v2 = *((void *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Submitting Stats of hard reset time", buf, 2u);
  }
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (xpc_object_t v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v3) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v3);
      xpc_object_t v4 = v3;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v3 = 0;
  }
  xpc_release(v3);
  int64_t v5 = time(0);
  xpc_object_t v6 = xpc_int64_create(v5);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E4F4CF78], v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  int64_t v8 = (*((_DWORD *)this + 112) + 1);
  *((_DWORD *)this + 112) = v8;
  xpc_object_t v9 = xpc_int64_create(v8);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E4F4CD70], v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  xpc_object_t object = v4;
  *(void *)long long buf = operator new(0x20uLL);
  long long v14 = xmmword_1C5BC7120;
  strcpy(*(char **)buf, "CommandUpdateBBBootStats");
  if (v4) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc_object_t v11 = 0;
  Service::runCommand((uint64_t)this, (uint64_t)buf, &object, &v11);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(v14) < 0) {
    operator delete(*(void **)buf);
  }
  xpc_release(v4);
}

void sub_1C5B20CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  xpc_release(object);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(v16);
  _Unwind_Resume(a1);
}

void BootModule::reportStatisticsSoftReset_sync(BootModule *this)
{
  uint64_t v2 = *((void *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Submitting Stats of soft reset time", buf, 2u);
  }
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (xpc_object_t v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v3) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v3);
      xpc_object_t v4 = v3;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v3 = 0;
  }
  xpc_release(v3);
  int64_t v5 = (*((_DWORD *)this + 113) + 1);
  *((_DWORD *)this + 113) = v5;
  xpc_object_t v6 = xpc_int64_create(v5);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E4F4CD78], v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  xpc_object_t object = v4;
  *(void *)long long buf = operator new(0x20uLL);
  long long v11 = xmmword_1C5BC7120;
  strcpy(*(char **)buf, "CommandUpdateBBBootStats");
  if (v4) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  int64_t v8 = 0;
  Service::runCommand((uint64_t)this, (uint64_t)buf, &object, &v8);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(v11) < 0) {
    operator delete(*(void **)buf);
  }
  xpc_release(v4);
}

void sub_1C5B20EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  xpc_release(object);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(v16);
  _Unwind_Resume(a1);
}

uint64_t _ZZZZN10BootModule12requestResetE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEEUb_EUb0_EN3__0D1Ev(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 144);
  if (v2) {
    dispatch_release(v2);
  }
  xpc_object_t v3 = *(const void **)(a1 + 136);
  if (v3) {
    _Block_release(v3);
  }
  if (*(char *)(a1 + 135) < 0)
  {
    operator delete(*(void **)(a1 + 112));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_7:
      if ((*(char *)(a1 + 71) & 0x80000000) == 0) {
        goto LABEL_8;
      }
      goto LABEL_14;
    }
  }
  else if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 72));
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
      goto LABEL_9;
    }
LABEL_15:
    operator delete(*(void **)(a1 + 24));
    xpc_object_t v4 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v4) {
      return a1;
    }
    goto LABEL_10;
  }
LABEL_14:
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0) {
    goto LABEL_15;
  }
LABEL_9:
  xpc_object_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4) {
LABEL_10:
  }
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void *__copy_helper_block_e8_40c15_ZTSK9ResetInfo152c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE160c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t a1, void *a2)
{
  ResetInfo::ResetInfo((std::string *)(a1 + 40), (const ResetInfo *)(a2 + 5));
  BOOL result = (void *)a2[19];
  if (result) {
    BOOL result = _Block_copy(result);
  }
  uint64_t v6 = a2[20];
  uint64_t v5 = a2[21];
  *(void *)(a1 + 152) = result;
  *(void *)(a1 + 160) = v6;
  *(void *)(a1 + 168) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c15_ZTSK9ResetInfo152c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE160c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 168);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  xpc_object_t v3 = *(const void **)(a1 + 152);
  if (v3) {
    _Block_release(v3);
  }
  if (*(char *)(a1 + 151) < 0)
  {
    operator delete(*(void **)(a1 + 128));
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
    {
LABEL_7:
      if ((*(char *)(a1 + 87) & 0x80000000) == 0) {
        goto LABEL_8;
      }
LABEL_12:
      operator delete(*(void **)(a1 + 64));
      if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
        return;
      }
      goto LABEL_13;
    }
  }
  else if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0) {
    goto LABEL_12;
  }
LABEL_8:
  if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
    return;
  }
LABEL_13:
  xpc_object_t v4 = *(void **)(a1 + 40);

  operator delete(v4);
}

void ___ZN10BootModule4initEv_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  xpc_object_t v3 = *(NSObject **)(v2 + 88);
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Initializing", buf, 2u);
  }
  if (capabilities::ipc::supportsPCI((capabilities::ipc *)v4))
  {
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN10BootModule4initEv_block_invoke_9;
    aBlock[3] = &__block_descriptor_tmp_15_3;
    uint64_t v6 = a1[5];
    uint64_t v5 = (std::__shared_weak_count *)a1[6];
    void aBlock[4] = v2;
    void aBlock[5] = v6;
    xpc_object_t v10 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    xpc_object_t v7 = _Block_copy(aBlock);
    int64_t v8 = *(const void **)(v2 + 264);
    *(void *)(v2 + 264) = v7;
    if (v8) {
      _Block_release(v8);
    }
    if (v10) {
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void ___ZN10BootModule4initEv_block_invoke_9(void *a1, int a2, uint64_t a3, int a4)
{
  uint64_t v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    uint64_t v9 = a1[4];
    xpc_object_t v10 = std::__shared_weak_count::lock(v5);
    xpc_object_t v18 = v10;
    if (v10)
    {
      long long v11 = v10;
      if (!a1[5]) {
        goto LABEL_12;
      }
      memset(&v16, 170, sizeof(v16));
      if (*(char *)(a3 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
      }
      else {
        std::string v16 = *(std::string *)a3;
      }
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 1174405120;
      v12[2] = ___ZN10BootModule4initEv_block_invoke_2;
      void v12[3] = &__block_descriptor_tmp_13_7;
      v12[4] = v9;
      int v14 = a2;
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v16;
      }
      int v15 = a4;
      ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v9 + 120), (uint64_t)v12);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_12:
          if (atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            return;
          }
LABEL_16:
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
          return;
        }
      }
      else if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_12;
      }
      operator delete(v16.__r_.__value_.__l.__data_);
      if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_16;
      }
    }
  }
}

void sub_1C5B213B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v24 - 64);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v24 - 64);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule4initEv_block_invoke_2(uint64_t a1)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 32);
  if (!*(_DWORD *)(a1 + 64))
  {
    int v5 = *(char *)(a1 + 63);
    if (v5 >= 0) {
      size_t v6 = *(unsigned __int8 *)(a1 + 63);
    }
    else {
      size_t v6 = *(void *)(a1 + 48);
    }
    unint64_t v7 = v6 + 11;
    memset(&v49, 170, sizeof(v49));
    if (v6 + 11 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    int64_t v8 = (void **)(a1 + 40);
    if (v7 > 0x16)
    {
      uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17) {
        uint64_t v10 = v7 | 7;
      }
      uint64_t v11 = v10 + 1;
      xpc_object_t v12 = (char *)operator new(v10 + 1);
      v49.__r_.__value_.__l.__size_ = v6 + 11;
      v49.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
      v49.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
      xpc_object_t v13 = v12 + 11;
      *(_DWORD *)(v12 + 7) = 540693582;
      *(void *)xpc_object_t v12 = *(void *)"PCI-EVENT: ";
      if (v5 >= 0) {
        int v14 = (void *)(a1 + 40);
      }
      else {
        int v14 = *v8;
      }
      memmove(v12 + 11, v14, v6);
      v13[v6] = 0;
      if (v6 == 27)
      {
        BOOL v15 = *v14 == 0x67676972742D5041 && v14[1] == 0x7361622064657265;
        BOOL v16 = v15 && v14[2] == 0x657220646E616265;
        if (v16 && *(void *)((char *)v14 + 19) == 0x746573657220646ELL) {
          std::string::append(&v49, " [likely caused by bbctl reset]", 0x1FuLL);
        }
      }
    }
    else
    {
      *(_OWORD *)&v49.__r_.__value_.__r.__words[1] = 0uLL;
      *((unsigned char *)&v49.__r_.__value_.__s + 23) = v6 + 11;
      *(_DWORD *)((char *)v49.__r_.__value_.__r.__words + 7) = 540693582;
      v49.__r_.__value_.__r.__words[0] = *(void *)"PCI-EVENT: ";
      if (v6)
      {
        if (v5 >= 0) {
          uint64_t v9 = (void *)(a1 + 40);
        }
        else {
          uint64_t v9 = *v8;
        }
        memmove((char *)&v49.__r_.__value_.__r.__words[1] + 3, v9, v6);
      }
      *((unsigned char *)&v49.__r_.__value_.__r.__words[1] + v6 + 3) = 0;
    }
    *(void *)&long long v18 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v56 = v18;
    long long v57 = v18;
    long long v54 = v18;
    long long v55 = v18;
    long long v52 = v18;
    long long v53 = v18;
    *(_OWORD *)long long buf = v18;
    xpc_object_t v19 = (const void *)*MEMORY[0x1E4F4C6E8];
    size_t v20 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
    if (v20 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v21 = v20;
    if (v20 >= 0x17)
    {
      uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17) {
        uint64_t v23 = v20 | 7;
      }
      uint64_t v24 = v23 + 1;
      xpc_object_t v22 = operator new(v23 + 1);
      *(void *)&__dst[8] = v21;
      *(void *)&__dst[16] = v24 | 0x8000000000000000;
      *(void *)std::string __dst = v22;
    }
    else
    {
      __dst[23] = v20;
      xpc_object_t v22 = __dst;
      if (!v20)
      {
LABEL_43:
        v22[v21] = 0;
        xpc_object_t v25 = (const void *)*MEMORY[0x1E4F4D1A0];
        size_t v26 = strlen((const char *)*MEMORY[0x1E4F4D1A0]);
        if (v26 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v27 = v26;
        if (v26 >= 0x17)
        {
          uint64_t v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v26 | 7) != 0x17) {
            uint64_t v29 = v26 | 7;
          }
          uint64_t v30 = v29 + 1;
          xpc_object_t v28 = operator new(v29 + 1);
          *((void *)&v47 + 1) = v27;
          unint64_t v48 = v30 | 0x8000000000000000;
          *(void *)&long long v47 = v28;
        }
        else
        {
          HIBYTE(v48) = v26;
          xpc_object_t v28 = &v47;
          if (!v26)
          {
LABEL_51:
            v28[v27] = 0;
            Timestamp::Timestamp((Timestamp *)v43);
            Timestamp::asString((uint64_t)v43, 0, 9, __p);
            char v42 = 0;
            LOBYTE(v41) = 0;
            ResetInfo::ResetInfo((std::string *)buf, (long long *)__dst, &v47, (long long *)&v49, (uint64_t)__p, 7, &v41);
            if (v46 < 0)
            {
              operator delete(__p[0]);
              std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v43, v44);
              if ((SHIBYTE(v48) & 0x80000000) == 0)
              {
LABEL_53:
                if ((__dst[23] & 0x80000000) == 0) {
                  goto LABEL_54;
                }
                goto LABEL_58;
              }
            }
            else
            {
              std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v43, v44);
              if ((SHIBYTE(v48) & 0x80000000) == 0) {
                goto LABEL_53;
              }
            }
            operator delete((void *)v47);
            if ((__dst[23] & 0x80000000) == 0)
            {
LABEL_54:
              xpc_object_t v31 = v2[11];
              if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
                goto LABEL_59;
              }
LABEL_80:
              if (*(char *)(a1 + 63) < 0) {
                int64_t v8 = (void **)*v8;
              }
              int v32 = *(_DWORD *)(a1 + 68);
              *(_DWORD *)std::string __dst = 136315394;
              *(void *)&__dst[4] = v8;
              *(_WORD *)&__dst[12] = 1024;
              *(_DWORD *)&__dst[14] = v32;
              _os_log_error_impl(&dword_1C59C6000, v31, OS_LOG_TYPE_ERROR, "PCI event: %s, sleeping for %u ms, then requesting Baseband reset", __dst, 0x12u);
LABEL_59:
              usleep(1000 * *(_DWORD *)(a1 + 68));
              ResetInfo::ResetInfo(&v34, (const ResetInfo *)buf);
              aBlocunint64_t k = 0;
              BootModule::requestReset(v2, (const ResetInfo *)&v34, (uint64_t *)&aBlock);
              if (aBlock) {
                _Block_release(aBlock);
              }
              if (v40 < 0)
              {
                operator delete(v39);
                if ((v38 & 0x80000000) == 0)
                {
LABEL_63:
                  if ((v36 & 0x80000000) == 0) {
                    goto LABEL_64;
                  }
                  goto LABEL_73;
                }
              }
              else if ((v38 & 0x80000000) == 0)
              {
                goto LABEL_63;
              }
              operator delete(v37);
              if ((v36 & 0x80000000) == 0)
              {
LABEL_64:
                if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_65;
                }
                goto LABEL_74;
              }
LABEL_73:
              operator delete(v35);
              if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_65:
                if ((SHIBYTE(v57) & 0x80000000) == 0) {
                  goto LABEL_66;
                }
                goto LABEL_75;
              }
LABEL_74:
              operator delete(v34.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v57) & 0x80000000) == 0)
              {
LABEL_66:
                if ((SBYTE7(v55) & 0x80000000) == 0) {
                  goto LABEL_67;
                }
                goto LABEL_76;
              }
LABEL_75:
              operator delete(*((void **)&v56 + 1));
              if ((SBYTE7(v55) & 0x80000000) == 0)
              {
LABEL_67:
                if ((SHIBYTE(v53) & 0x80000000) == 0) {
                  goto LABEL_68;
                }
                goto LABEL_77;
              }
LABEL_76:
              operator delete((void *)v54);
              if ((SHIBYTE(v53) & 0x80000000) == 0)
              {
LABEL_68:
                if ((SBYTE7(v52) & 0x80000000) == 0) {
                  goto LABEL_69;
                }
                goto LABEL_78;
              }
LABEL_77:
              operator delete(*((void **)&v52 + 1));
              if ((SBYTE7(v52) & 0x80000000) == 0)
              {
LABEL_69:
                if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  return;
                }
                goto LABEL_79;
              }
LABEL_78:
              operator delete(*(void **)buf);
              if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                return;
              }
LABEL_79:
              operator delete(v49.__r_.__value_.__l.__data_);
              return;
            }
LABEL_58:
            operator delete(*(void **)__dst);
            xpc_object_t v31 = v2[11];
            if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
              goto LABEL_59;
            }
            goto LABEL_80;
          }
        }
        memmove(v28, v25, v27);
        goto LABEL_51;
      }
    }
    memmove(v22, v19, v21);
    goto LABEL_43;
  }
  xpc_object_t v3 = v2[11];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v4 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      BOOL v4 = (void *)*v4;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I PCI event: %s", buf, 0xCu);
  }
}

void sub_1C5B219D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a47 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

char *BootModule::getShutdownStages@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  BOOL result = (char *)operator new(3uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *(_WORD *)BOOL result = 256;
  result[2] = 3;
  *a1 = result;
  return result;
}

void BootModule::shutdown(uint64_t a1, int a2, NSObject **a3)
{
  if (a2 == 3)
  {
    size_t v6 = (uint64_t *)(a1 + 120);
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 1174405120;
    v10[2] = ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_32;
    void v10[3] = &__block_descriptor_tmp_37_4;
    unint64_t v7 = *a3;
    v10[4] = a1;
    dispatch_group_t group = v7;
    if (v7)
    {
      dispatch_retain(v7);
      dispatch_group_enter(group);
    }
    ctu::SharedSynchronizable<BootModule>::execute_wrapped(v6, (uint64_t)v10);
    if (group)
    {
      dispatch_group_leave(group);
      int v5 = group;
      if (group) {
        goto LABEL_18;
      }
    }
  }
  else
  {
    if (a2 != 1)
    {
      if (a2) {
        return;
      }
      xpc_object_t v3 = (uint64_t *)(a1 + 120);
      v14[0] = MEMORY[0x1E4F143A8];
      v14[1] = 1174405120;
      uint64_t v14[2] = ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
      void v14[3] = &__block_descriptor_tmp_20_3;
      BOOL v4 = *a3;
      v14[4] = a1;
      dispatch_group_t v15 = v4;
      if (v4)
      {
        dispatch_retain(v4);
        dispatch_group_enter(v15);
      }
      ctu::SharedSynchronizable<BootModule>::execute_wrapped(v3, (uint64_t)v14);
      if (!v15) {
        return;
      }
      dispatch_group_leave(v15);
      int v5 = v15;
      if (!v15) {
        return;
      }
LABEL_18:
      dispatch_release(v5);
      return;
    }
    int64_t v8 = (uint64_t *)(a1 + 120);
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 1174405120;
    v12[2] = ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_21;
    void v12[3] = &__block_descriptor_tmp_31_5;
    uint64_t v9 = *a3;
    v12[4] = a1;
    dispatch_group_t object = v9;
    if (v9)
    {
      dispatch_retain(v9);
      dispatch_group_enter(object);
    }
    ctu::SharedSynchronizable<BootModule>::execute_wrapped(v8, (uint64_t)v12);
    if (object)
    {
      dispatch_group_leave(object);
      int v5 = object;
      if (object) {
        goto LABEL_18;
      }
    }
  }
}

void ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  xpc_object_t v3 = *(NSObject **)(v2 + 88);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Shutdown prepare", (uint8_t *)&buf, 2u);
  }
  unsigned int v4 = *(_DWORD *)(v2 + 456);
  if (v4 <= 8)
  {
    int v5 = 1 << v4;
    if ((v5 & 0x1E1) != 0)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 96))(v2, 8);
      size_t v6 = *(NSObject **)(v2 + 216);
      *(void *)(v2 + 216) = 0;
      if (v6)
      {
        dispatch_group_leave(v6);
        dispatch_release(v6);
      }
    }
    else if ((v5 & 0xE) != 0)
    {
      unint64_t v7 = *(NSObject **)(a1 + 40);
      if (v7)
      {
        dispatch_retain(v7);
        dispatch_group_enter(v7);
      }
      int64_t v8 = *(NSObject **)(v2 + 216);
      *(void *)(v2 + 216) = v7;
      if (v8)
      {
        dispatch_group_leave(v8);
        dispatch_release(v8);
      }
      uint64_t v9 = *(NSObject **)(v2 + 88);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_DEFAULT, "#I Holding shutdown request session", (uint8_t *)&buf, 2u);
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 96))(v2, 7);
    }
  }
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v2 + 80))(&v16, v2);
  unint64_t v10 = v16;
  if (v16)
  {
    uint64_t v11 = (char *)operator new(0x38uLL);
    strcpy(v11, "com.apple.AppleBasebandManager.RadioNotReady.Shutdown");
    uint64_t v12 = capabilities::abs::shutdownAssertionTimeoutScalingFactor((capabilities::abs *)v11);
    uint64_t v13 = *(void *)(v10 + 104);
    std::string::__init_copy_ctor_external(&buf, v11, 0x35uLL);
    (*(void (**)(dispatch_object_t *__return_ptr, uint64_t, std::string *, uint64_t))(*(void *)v13 + 24))(&object, v13, &buf, 240000 * v12);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (object) {
      dispatch_release(object);
    }
    operator delete(v11);
  }
  int v14 = (std::__shared_weak_count *)v17;
  if (v17)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v17 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1C5B21FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    operator delete(v18);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  operator delete(v18);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_21(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  xpc_object_t v3 = v2[11];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Shutdown baseband", buf, 2u);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_22;
  aBlock[3] = &__block_descriptor_tmp_28_3;
  unsigned int v4 = *(NSObject **)(a1 + 40);
  void aBlock[4] = v2;
  dispatch_group_t group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(group);
  }
  unint64_t v7 = _Block_copy(aBlock);
  (*(void (**)(void *, void **))(*v2 + 112))(v2, &v7);
  if (v7) {
    _Block_release(v7);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void sub_1C5B22178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, dispatch_group_t group, void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_22(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  CFMutableDictionaryRef v37 = 0;
  uint64_t v3 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable) {
    CFMutableDictionaryRef v37 = Mutable;
  }
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x1E4F4C688], (const __CFString **)*MEMORY[0x1E4F4CEB8], v3, v5);
  size_t v6 = *(std::__shared_weak_count **)(v2 + 128);
  if (!v6 || (v7 = *(void *)(v2 + 120), (int64_t v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  unint64_t v10 = (const void *)*MEMORY[0x1E4F4CEF8];
  size_t v11 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
  if (v11 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v12 = (void *)v11;
  if (v11 >= 0x17)
  {
    uint64_t v15 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v15 = v11 | 7;
    }
    uint64_t v16 = v15 + 1;
    uint64_t v13 = (void **)operator new(v15 + 1);
    __dst[1] = v12;
    unint64_t v36 = v16 | 0x8000000000000000;
    __dst[0] = v13;
LABEL_15:
    memmove(v13, v10, (size_t)v12);
    *((unsigned char *)v12 + (void)v13) = 0;
    CFMutableDictionaryRef v14 = v37;
    if (!v37) {
      goto LABEL_18;
    }
    goto LABEL_16;
  }
  HIBYTE(v36) = v11;
  uint64_t v13 = __dst;
  if (v11) {
    goto LABEL_15;
  }
  LOBYTE(__dst[0]) = 0;
  CFMutableDictionaryRef v14 = v37;
  if (!v37) {
    goto LABEL_18;
  }
LABEL_16:
  CFTypeID v17 = CFGetTypeID(v14);
  if (v17 == CFDictionaryGetTypeID())
  {
    CFTypeRef cf = v14;
    CFRetain(v14);
    goto LABEL_19;
  }
LABEL_18:
  CFTypeRef cf = 0;
LABEL_19:
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_24_3;
  long long v18 = *(NSObject **)(a1 + 40);
  void aBlock[4] = v2;
  dispatch_group_t group = v18;
  if (v18)
  {
    dispatch_retain(v18);
    dispatch_group_enter(group);
  }
  uint64_t v31 = v7;
  int v32 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v33 = _Block_copy(aBlock);
  Service::broadcastEvent(v2, (uint64_t)__dst, &cf, (const void **)&v33);
  if (v33) {
    _Block_release(v33);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(v36) < 0) {
    operator delete(__dst[0]);
  }
  xpc_object_t v19 = (const void *)*MEMORY[0x1E4F4C758];
  size_t v20 = strlen((const char *)*MEMORY[0x1E4F4C758]);
  if (v20 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v21 = (void *)v20;
  if (v20 >= 0x17)
  {
    uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17) {
      uint64_t v23 = v20 | 7;
    }
    uint64_t v24 = v23 + 1;
    xpc_object_t v22 = operator new(v23 + 1);
    __p[1] = v21;
    unint64_t v28 = v24 | 0x8000000000000000;
    __p[0] = v22;
    goto LABEL_34;
  }
  HIBYTE(v28) = v20;
  xpc_object_t v22 = __p;
  if (v20) {
LABEL_34:
  }
    memmove(v22, v19, (size_t)v21);
  *((unsigned char *)v21 + (void)v22) = 0;
  xpc_object_t v25 = 0;
  CFTypeRef v26 = 0;
  Service::broadcastEvent(v2, (uint64_t)__p, &v26, (const void **)&v25);
  if (v25) {
    _Block_release(v25);
  }
  if (v26) {
    CFRelease(v26);
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[0]);
  }
  if (v32) {
    std::__shared_weak_count::__release_weak(v32);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  std::__shared_weak_count::__release_weak(v9);
  if (v37) {
    CFRelease(v37);
  }
}

void sub_1C5B2255C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, const void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,dispatch_group_t group,uint64_t a24,std::__shared_weak_count *a25,void *a26,char a27)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a11);
  if (a17 < 0)
  {
    operator delete(__p);
    uint64_t v30 = a25;
    if (!a25)
    {
LABEL_5:
      uint64_t v31 = group;
      if (!group) {
        goto LABEL_11;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v30 = a25;
    if (!a25) {
      goto LABEL_5;
    }
  }
  std::__shared_weak_count::__release_weak(v30);
  uint64_t v31 = group;
  if (!group) {
    goto LABEL_11;
  }
LABEL_9:
  dispatch_group_leave(v31);
  if (group) {
    dispatch_release(group);
  }
LABEL_11:
  std::__shared_weak_count::__release_weak(v27);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v28 - 88));
  _Unwind_Resume(a1);
}

void sub_1C5B22650(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_1C5B22664(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v1 - 88));
  _Unwind_Resume(a1);
}

void ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_2(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2)
  {
    uint64_t v3 = a1[4];
    unsigned int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      CFAllocatorRef v5 = v4;
      uint64_t v6 = a1[6];
      if (v6)
      {
        v7[0] = MEMORY[0x1E4F143A8];
        v7[1] = 0x40000000;
        v7[2] = ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_3;
        v7[3] = &__block_descriptor_tmp_23;
        v7[4] = v3;
        ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v7);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_3(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unint64_t v6 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr))(*(void *)v1 + 80))(&v6);
  unint64_t v2 = v6;
  if (v6)
  {
    uint64_t v3 = (char *)operator new(0x38uLL);
    strcpy(v3, "com.apple.AppleBasebandManager.RadioNotReady.Shutdown");
    uint64_t v4 = *(void *)(v2 + 104);
    std::string::__init_copy_ctor_external(&v8, v3, 0x35uLL);
    (*(void (**)(uint64_t, std::string *))(*(void *)v4 + 32))(v4, &v8);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
    operator delete(v3);
  }
  CFAllocatorRef v5 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v7 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1C5B228B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  operator delete(v17);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_1C5B228E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c35_ZTSNSt3__18weak_ptrI10BootModuleEE(void *a1, void *a2)
{
  uint64_t v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    CFAllocatorRef v5 = a1[5];
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t a1)
{
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(NSObject **)(a1 + 40);
  if (v3)
  {
    dispatch_group_leave(v3);
    uint64_t v4 = *(NSObject **)(a1 + 40);
    if (v4)
    {
      dispatch_release(v4);
    }
  }
}

void ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_32(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void **)(a1 + 32);
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, void *))(*v1 + 80))(&v17, v1);
  unint64_t v2 = v17;
  if (v17)
  {
    uint64_t v3 = (char *)operator new(0x38uLL);
    strcpy(v3, "com.apple.AppleBasebandManager.RadioNotReady.Bootup");
    uint64_t v4 = *(void *)(v2 + 104);
    std::string::__init_copy_ctor_external(&v19, v3, 0x33uLL);
    (*(void (**)(uint64_t, std::string *))(*(void *)v4 + 32))(v4, &v19);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    operator delete(v3);
    unint64_t v5 = v17;
    uint64_t v6 = (char *)operator new(0x38uLL);
    strcpy(v6, "com.apple.AppleBasebandManager.RadioNotReady.Shutdown");
    uint64_t v7 = *(void *)(v5 + 104);
    std::string::__init_copy_ctor_external(&v19, v6, 0x35uLL);
    (*(void (**)(uint64_t, std::string *))(*(void *)v7 + 32))(v7, &v19);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    operator delete(v6);
  }
  uint64_t v8 = v1[60];
  if (v8)
  {
    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 80))(v8);
    unint64_t v10 = v1[11];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      size_t v11 = "failed";
      if (v9) {
        size_t v11 = "successful";
      }
      LODWORD(v19.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v19.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
      _os_log_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_DEFAULT, "#I Baseband poweroff (forced) %s", (uint8_t *)&v19, 0xCu);
    }
  }
  uint64_t v12 = (std::__shared_weak_count *)v1[23];
  v1[22] = 0;
  v1[23] = 0;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  uint64_t v13 = (std::__shared_weak_count *)v1[35];
  v1[34] = 0;
  v1[35] = 0;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  CFMutableDictionaryRef v14 = (std::__shared_weak_count *)v1[61];
  v1[60] = 0;
  v1[61] = 0;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v15 = (std::__shared_weak_count *)v1[59];
  v1[58] = 0;
  v1[59] = 0;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = (std::__shared_weak_count *)v18;
  if (v18)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v18 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_1C5B22D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C5B22D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  operator delete(v16);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1C5B22DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void BootModule::initialize(uint64_t *a1, NSObject **a2)
{
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  v11[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke;
  v11[3] = &__block_descriptor_tmp_67_1;
  uint64_t v3 = *a2;
  v11[4] = a1;
  dispatch_group_t group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(group);
  }
  ctu::SharedSynchronizable<BootModule>::execute_wrapped(a1 + 15, (uint64_t)v11);
  uint64_t v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = operator new(8uLL);
  *uint64_t v8 = a1;
  int v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  unint64_t v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<BootModule>::execute_wrapped<BootModule::initialize(dispatch::group_session)::$_0>(BootModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<BootModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<BootModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  unint64_t v2 = (std::__shared_weak_count *)v1[16];
  if (!v2 || (uint64_t v3 = v1[15], (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (const void *)*MEMORY[0x1E4F4CDC0];
  size_t v7 = strlen((const char *)*MEMORY[0x1E4F4CDC0]);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (long long *)operator new(v10 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v66 = v11 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_12;
  }
  HIBYTE(v66) = v7;
  p_dst = &__dst;
  if (v7) {
LABEL_12:
  }
    memmove(p_dst, v6, v8);
  *((unsigned char *)p_dst + v8) = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_42_2;
  void aBlock[4] = v1;
  void aBlock[5] = v3;
  size_t v63 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = _Block_copy(aBlock);
  size_t v64 = v12;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v64);
  if (v12) {
    _Block_release(v12);
  }
  if (SHIBYTE(v66) < 0) {
    operator delete((void *)__dst);
  }
  uint64_t v13 = (const void *)*MEMORY[0x1E4F4C638];
  size_t v14 = strlen((const char *)*MEMORY[0x1E4F4C638]);
  if (v14 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v15 = v14;
  if (v14 >= 0x17)
  {
    uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v17 = v14 | 7;
    }
    uint64_t v18 = v17 + 1;
    uint64_t v16 = (long long *)operator new(v17 + 1);
    *((void *)&__dst + 1) = v15;
    unint64_t v66 = v18 | 0x8000000000000000;
    *(void *)&long long __dst = v16;
    goto LABEL_24;
  }
  HIBYTE(v66) = v14;
  uint64_t v16 = &__dst;
  if (v14) {
LABEL_24:
  }
    memmove(v16, v13, v15);
  *((unsigned char *)v16 + v15) = 0;
  v59[0] = MEMORY[0x1E4F143A8];
  v59[1] = 1174405120;
  v59[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_43;
  v59[3] = &__block_descriptor_tmp_51_3;
  v59[4] = v1;
  v59[5] = v3;
  xpc_object_t v60 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::string v19 = _Block_copy(v59);
  std::string v61 = v19;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v61);
  if (v19) {
    _Block_release(v19);
  }
  if (SHIBYTE(v66) < 0) {
    operator delete((void *)__dst);
  }
  uint64_t v20 = (const void *)*MEMORY[0x1E4F4CDE8];
  size_t v21 = strlen((const char *)*MEMORY[0x1E4F4CDE8]);
  if (v21 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v22 = v21;
  if (v21 >= 0x17)
  {
    uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v24 = v21 | 7;
    }
    uint64_t v25 = v24 + 1;
    uint64_t v23 = (long long *)operator new(v24 + 1);
    *((void *)&__dst + 1) = v22;
    unint64_t v66 = v25 | 0x8000000000000000;
    *(void *)&long long __dst = v23;
    goto LABEL_36;
  }
  HIBYTE(v66) = v21;
  uint64_t v23 = &__dst;
  if (v21) {
LABEL_36:
  }
    memmove(v23, v20, v22);
  *((unsigned char *)v23 + v22) = 0;
  v56[0] = MEMORY[0x1E4F143A8];
  v56[1] = 1174405120;
  v56[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_52;
  void v56[3] = &__block_descriptor_tmp_53_1;
  v56[4] = v3;
  long long v57 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  CFTypeRef v26 = _Block_copy(v56);
  uint64_t v58 = v26;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v58);
  if (v26) {
    _Block_release(v26);
  }
  if (SHIBYTE(v66) < 0) {
    operator delete((void *)__dst);
  }
  size_t v27 = (const void *)*MEMORY[0x1E4F4C9D8];
  size_t v28 = strlen((const char *)*MEMORY[0x1E4F4C9D8]);
  if (v28 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v29 = v28;
  if (v28 >= 0x17)
  {
    uint64_t v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17) {
      uint64_t v31 = v28 | 7;
    }
    uint64_t v32 = v31 + 1;
    uint64_t v30 = (long long *)operator new(v31 + 1);
    *((void *)&__dst + 1) = v29;
    unint64_t v66 = v32 | 0x8000000000000000;
    *(void *)&long long __dst = v30;
    goto LABEL_48;
  }
  HIBYTE(v66) = v28;
  uint64_t v30 = &__dst;
  if (v28) {
LABEL_48:
  }
    memmove(v30, v27, v29);
  *((unsigned char *)v30 + v29) = 0;
  v53[0] = MEMORY[0x1E4F143A8];
  v53[1] = 1174405120;
  v53[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_54;
  v53[3] = &__block_descriptor_tmp_57_2;
  v53[4] = v1;
  v53[5] = v3;
  long long v54 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v33 = _Block_copy(v53);
  long long v55 = v33;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v55);
  if (v33) {
    _Block_release(v33);
  }
  if (SHIBYTE(v66) < 0) {
    operator delete((void *)__dst);
  }
  unint64_t v51 = 0xAAAAAAAAAAAAAAAALL;
  long long v52 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  std::string v34 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v35 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&__dst, v34);
    long long v36 = __dst;
    long long __dst = 0uLL;
    CFMutableDictionaryRef v37 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v36;
    if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
    char v38 = (std::__shared_weak_count *)*((void *)&__dst + 1);
    if (*((void *)&__dst + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&__dst + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
    uint64_t v35 = off_1EBBDCA08;
  }
  xpc_object_t v39 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  uint64_t v47 = v35;
  uint64_t v48 = *(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v35 + 16))(&v49, v35);
  unint64_t v51 = 0;
  long long v52 = 0;
  if (v50)
  {
    long long v52 = std::__shared_weak_count::lock(v50);
    if (v52) {
      unint64_t v51 = v49;
    }
    if (v50) {
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
    if (!v51) {
      goto LABEL_86;
    }
  }
  else if (!v51)
  {
    goto LABEL_86;
  }
  *(void *)&long long __dst = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&__dst + 1) = 0xAAAAAAAAAAAAAAAALL;
  v45[0] = MEMORY[0x1E4F143A8];
  v45[1] = 1174405120;
  v45[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_58;
  void v45[3] = &__block_descriptor_tmp_64_1;
  v45[4] = v1;
  v45[5] = v3;
  char v46 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  char v40 = _Block_copy(v45);
  long long v41 = v1[17];
  if (v41) {
    dispatch_retain(v41);
  }
  *(void *)&long long __dst = v40;
  *((void *)&__dst + 1) = v41;
  if (!v40)
  {
    std::string::size_type v43 = 0;
    dispatch_object_t object = v41;
    if (!v41) {
      goto LABEL_76;
    }
    goto LABEL_75;
  }
  std::string::size_type v43 = _Block_copy(v40);
  dispatch_object_t object = v41;
  if (v41) {
LABEL_75:
  }
    dispatch_retain(v41);
LABEL_76:
  radio::CommandDriver::watchClientState();
  if (object) {
    dispatch_release(object);
  }
  if (v43) {
    _Block_release(v43);
  }
  if (v41) {
    dispatch_release(v41);
  }
  if (v40) {
    _Block_release(v40);
  }
  if (v46) {
    std::__shared_weak_count::__release_weak(v46);
  }
LABEL_86:
  char v42 = v52;
  if (v52 && !atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
  if (v54) {
    std::__shared_weak_count::__release_weak(v54);
  }
  if (v57) {
    std::__shared_weak_count::__release_weak(v57);
  }
  if (v60) {
    std::__shared_weak_count::__release_weak(v60);
  }
  if (v63) {
    std::__shared_weak_count::__release_weak(v63);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C5B23758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  if (a30) {
    std::__shared_weak_count::__release_weak(a30);
  }
  if (a37) {
    std::__shared_weak_count::__release_weak(a37);
  }
  if (a45) {
    std::__shared_weak_count::__release_weak(a45);
  }
  uint64_t v48 = *(std::__shared_weak_count **)(v46 - 144);
  if (v48)
  {
    std::__shared_weak_count::__release_weak(v48);
    std::__shared_weak_count::__release_weak(v45);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v45);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_2(void *a1, uint64_t a2, void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = a1[4];
    size_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      size_t v8 = v7;
      if (a1[5])
      {
        v10[0] = MEMORY[0x1E4F143A8];
        v10[1] = 1174405120;
        v10[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_3;
        void v10[3] = &__block_descriptor_tmp_38_3;
        v10[4] = v6;
        int v9 = *a3;
        if (*a3) {
          int v9 = _Block_copy(v9);
        }
        aBlocunint64_t k = v9;
        ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v10);
        if (aBlock) {
          _Block_release(aBlock);
        }
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v4 = v3;
  if (v3)
  {
    xpc_object_t xdict = v3;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t xdict = v4;
    if (!v4)
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8795EB0](v4) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v4);
    goto LABEL_9;
  }
  xpc_object_t v5 = xpc_null_create();
LABEL_8:
  xpc_object_t xdict = v5;
LABEL_9:
  xpc_release(v4);
  switch(*(_DWORD *)(v2 + 456))
  {
    case 1:
      xpc_object_t v6 = xpc_string_create((const char *)*MEMORY[0x1E4F4CCD8]);
      if (!v6) {
        xpc_object_t v6 = xpc_null_create();
      }
      break;
    case 3:
      xpc_object_t v6 = xpc_string_create((const char *)*MEMORY[0x1E4F4C958]);
      if (!v6) {
        xpc_object_t v6 = xpc_null_create();
      }
      break;
    case 4:
      xpc_object_t v6 = xpc_string_create((const char *)*MEMORY[0x1E4F4CAE8]);
      if (!v6) {
        xpc_object_t v6 = xpc_null_create();
      }
      break;
    case 6:
      xpc_object_t v6 = xpc_string_create((const char *)*MEMORY[0x1E4F4C6E0]);
      if (!v6) {
        xpc_object_t v6 = xpc_null_create();
      }
      break;
    case 7:
      xpc_object_t v6 = xpc_string_create((const char *)*MEMORY[0x1E4F4CF28]);
      if (!v6) {
        xpc_object_t v6 = xpc_null_create();
      }
      break;
    case 8:
      xpc_object_t v6 = xpc_string_create((const char *)*MEMORY[0x1E4F4CEB8]);
      if (!v6) {
        xpc_object_t v6 = xpc_null_create();
      }
      break;
    default:
      xpc_object_t v6 = xpc_string_create((const char *)*MEMORY[0x1E4F4CBC8]);
      if (!v6) {
        xpc_object_t v6 = xpc_null_create();
      }
      break;
  }
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C688], v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  if (*(unsigned char *)(v2 + 228))
  {
    size_t v8 = (const char *)(v2 + 152);
    if (*(char *)(v2 + 175) < 0) {
      size_t v8 = *(const char **)v8;
    }
    xpc_object_t v9 = xpc_string_create(v8);
    if (!v9) {
      xpc_object_t v9 = xpc_null_create();
    }
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C240], v9);
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
  }
  unsigned int v11 = 0;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), &v11, &xdict);
  xpc_release(xdict);
}

void sub_1C5B23ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_43(void *a1, xpc_object_t *a2, uint64_t *a3)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    xpc_object_t v7 = (uint64_t *)a1[4];
    size_t v8 = std::__shared_weak_count::lock(v4);
    std::string v67 = v8;
    if (v8)
    {
      xpc_object_t v9 = v8;
      if (!a1[5]) {
        goto LABEL_115;
      }
      uint64_t v10 = MEMORY[0x1C8795EB0](*a2);
      uint64_t v11 = MEMORY[0x1E4F14590];
      if (v10 != MEMORY[0x1E4F14590])
      {
        uint64_t v12 = v7[11];
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_error_impl(&dword_1C59C6000, v12, OS_LOG_TYPE_ERROR, "No input is given", (uint8_t *)&buf, 2u);
        }
        goto LABEL_115;
      }
      unint64_t v62 = 0xAAAAAAAAAAAAAAAALL;
      std::string __p = 0;
      uint64_t v64 = 0;
      uint64_t v65 = 0;
      long long buf = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      uint64_t v60 = 0;
      unint64_t v61 = 0xAAAAAAAAAAAAAAAALL;
      ResetInfo::fetchFromDict((void **)&buf, a2);
      if (SBYTE7(v57) < 0)
      {
        std::string::__init_copy_ctor_external(&v55, (const std::string::value_type *)buf, *((std::string::size_type *)&buf + 1));
      }
      else
      {
        *(_OWORD *)&v55.__r_.__value_.__l.__data_ = buf;
        v55.__r_.__value_.__r.__words[2] = v57;
      }
      char v13 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = v55.__r_.__value_.__l.__size_;
      }
      if (size == strlen((const char *)*MEMORY[0x1E4F4C6E8]))
      {
        size_t v15 = (v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v55
            : (std::string *)v55.__r_.__value_.__r.__words[0];
        if (!memcmp(v15, (const void *)*MEMORY[0x1E4F4C6E8], size))
        {
          BOOL v19 = 1;
          if ((v13 & 0x80) == 0)
          {
LABEL_34:
            if (!v19)
            {
              uint64_t v24 = v7[11];
              if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
              {
                if (SBYTE7(v57) < 0)
                {
                  std::string::__init_copy_ctor_external(&v55, (const std::string::value_type *)buf, *((std::string::size_type *)&buf + 1));
                }
                else
                {
                  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = buf;
                  v55.__r_.__value_.__r.__words[2] = v57;
                }
                uint64_t v32 = &v55;
                if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  uint64_t v32 = (std::string *)v55.__r_.__value_.__r.__words[0];
                }
                LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
                _os_log_impl(&dword_1C59C6000, v24, OS_LOG_TYPE_DEFAULT, "#I Invalid reset request [%s] ignoring it", (uint8_t *)&__dst, 0xCu);
                if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v55.__r_.__value_.__l.__data_);
                }
              }
              xpc_object_t v33 = xpc_null_create();
              uint64_t v34 = *a3;
              v55.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
              xpc_object_t v35 = xpc_null_create();
              (*(void (**)(uint64_t, uint64_t, std::string *))(v34 + 16))(v34, 3760250882, &v55);
              xpc_release(v55.__r_.__value_.__l.__data_);
              xpc_release(v35);
LABEL_68:
              if (SHIBYTE(v65) < 0)
              {
                operator delete(__p);
                if ((SHIBYTE(v60) & 0x80000000) == 0)
                {
LABEL_70:
                  if ((SHIBYTE(v58) & 0x80000000) == 0) {
                    goto LABEL_71;
                  }
                  goto LABEL_75;
                }
              }
              else if ((SHIBYTE(v60) & 0x80000000) == 0)
              {
                goto LABEL_70;
              }
              operator delete((void *)v59);
              if ((SHIBYTE(v58) & 0x80000000) == 0)
              {
LABEL_71:
                if ((SBYTE7(v57) & 0x80000000) == 0) {
                  goto LABEL_115;
                }
LABEL_76:
                operator delete((void *)buf);
LABEL_115:
                if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
                  std::__shared_weak_count::__release_weak(v9);
                }
                return;
              }
LABEL_75:
              operator delete(*((void **)&v57 + 1));
              if ((SBYTE7(v57) & 0x80000000) == 0) {
                goto LABEL_115;
              }
              goto LABEL_76;
            }
            if ((*(unsigned int (**)(uint64_t *))(*v7 + 88))(v7))
            {
              memset(&v55, 170, sizeof(v55));
              uint64_t v20 = (const void *)*MEMORY[0x1E4F4C638];
              size_t v21 = strlen((const char *)*MEMORY[0x1E4F4C638]);
              if (v21 >= 0x7FFFFFFFFFFFFFF8) {
                std::string::__throw_length_error[abi:ne180100]();
              }
              std::string::size_type v22 = v21;
              if (v21 >= 0x17)
              {
                uint64_t v26 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v21 | 7) != 0x17) {
                  uint64_t v26 = v21 | 7;
                }
                uint64_t v27 = v26 + 1;
                p_dst = operator new(v26 + 1);
                __dst.__r_.__value_.__l.__size_ = v22;
                __dst.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
              }
              else
              {
                *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v21;
                p_dst = &__dst;
                if (!v21)
                {
LABEL_58:
                  p_dst[v22] = 0;
                  size_t v28 = (char *)operator new(0x28uLL);
                  strcpy(v28, " rejected; ABM is shutting down ");
                  size_t v29 = std::string::append(&__dst, v28, 0x20uLL);
                  long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
                  v55.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v30;
                  v29->__r_.__value_.__l.__size_ = 0;
                  v29->__r_.__value_.__r.__words[2] = 0;
                  v29->__r_.__value_.__r.__words[0] = 0;
                  operator delete(v28);
                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  {
                    operator delete(__dst.__r_.__value_.__l.__data_);
                    uint64_t v31 = v7[11];
                    if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
                    {
LABEL_60:
                      if (!*a3) {
                        goto LABEL_103;
                      }
                      goto LABEL_85;
                    }
                  }
                  else
                  {
                    uint64_t v31 = v7[11];
                    if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
                      goto LABEL_60;
                    }
                  }
                  long long v36 = &v55;
                  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    long long v36 = (std::string *)v55.__r_.__value_.__r.__words[0];
                  }
                  LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
                  _os_log_impl(&dword_1C59C6000, v31, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
                  if (!*a3)
                  {
LABEL_103:
                    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(v55.__r_.__value_.__l.__data_);
                      xpc_object_t v9 = v67;
                      if ((SHIBYTE(v65) & 0x80000000) == 0)
                      {
LABEL_105:
                        if ((SHIBYTE(v60) & 0x80000000) == 0) {
                          goto LABEL_106;
                        }
                        goto LABEL_112;
                      }
                    }
                    else
                    {
                      xpc_object_t v9 = v67;
                      if ((SHIBYTE(v65) & 0x80000000) == 0) {
                        goto LABEL_105;
                      }
                    }
                    operator delete(__p);
                    if ((SHIBYTE(v60) & 0x80000000) == 0)
                    {
LABEL_106:
                      if ((SHIBYTE(v58) & 0x80000000) == 0) {
                        goto LABEL_107;
                      }
                      goto LABEL_113;
                    }
LABEL_112:
                    operator delete((void *)v59);
                    if ((SHIBYTE(v58) & 0x80000000) == 0)
                    {
LABEL_107:
                      if ((SBYTE7(v57) & 0x80000000) == 0) {
                        goto LABEL_108;
                      }
                      goto LABEL_114;
                    }
LABEL_113:
                    operator delete(*((void **)&v57 + 1));
                    if ((SBYTE7(v57) & 0x80000000) == 0)
                    {
LABEL_108:
                      if (!v9) {
                        return;
                      }
                      goto LABEL_115;
                    }
LABEL_114:
                    operator delete((void *)buf);
                    if (!v9) {
                      return;
                    }
                    goto LABEL_115;
                  }
LABEL_85:
                  xpc_object_t v54 = xpc_null_create();
                  std::string::size_type v37 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
                  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    std::string::size_type v37 = v55.__r_.__value_.__l.__size_;
                  }
                  if (!v37) {
                    goto LABEL_102;
                  }
                  xpc_object_t v38 = xpc_dictionary_create(0, 0, 0);
                  xpc_object_t v39 = v38;
                  if (v38)
                  {
                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
                  }
                  else
                  {
                    xpc_object_t v39 = xpc_null_create();
                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
                    if (!v39)
                    {
                      xpc_object_t v40 = xpc_null_create();
                      xpc_object_t v39 = 0;
                      goto LABEL_95;
                    }
                  }
                  if (MEMORY[0x1C8795EB0](v39) == v11)
                  {
                    xpc_retain(v39);
LABEL_96:
                    xpc_release(v39);
                    xpc::dict::operator=(&v54, (xpc_object_t *)&__dst.__r_.__value_.__l.__data_);
                    xpc_release(__dst.__r_.__value_.__l.__data_);
                    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      long long v41 = &v55;
                    }
                    else {
                      long long v41 = (std::string *)v55.__r_.__value_.__r.__words[0];
                    }
                    xpc_object_t v52 = xpc_string_create((const char *)v41);
                    if (!v52) {
                      xpc_object_t v52 = xpc_null_create();
                    }
                    std::string::size_type v42 = *MEMORY[0x1E4F4C240];
                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
                    __dst.__r_.__value_.__l.__size_ = v42;
                    xpc::dict::object_proxy::operator=((uint64_t)&__dst, &v52, &object);
                    xpc_release(object);
                    xpc_object_t object = 0;
                    xpc_release(v52);
                    xpc_object_t v52 = 0;
LABEL_102:
                    LODWORD(__dst.__r_.__value_.__l.__data_) = -534716415;
                    dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, (unsigned int *)&__dst, &v54);
                    xpc_release(v54);
                    goto LABEL_103;
                  }
                  xpc_object_t v40 = xpc_null_create();
LABEL_95:
                  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
                  goto LABEL_96;
                }
              }
              memmove(p_dst, v20, v22);
              goto LABEL_58;
            }
            v43[0] = MEMORY[0x1E4F143A8];
            v43[1] = 1174405120;
            void v43[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_45;
            v43[3] = &__block_descriptor_tmp_48_4;
            v43[4] = v7;
            ResetInfo::ResetInfo(&v44, (const ResetInfo *)&buf);
            uint64_t v25 = (void *)*a3;
            if (*a3) {
              uint64_t v25 = _Block_copy(v25);
            }
            aBlocunint64_t k = v25;
            ctu::SharedSynchronizable<BootModule>::execute_wrapped(v7 + 15, (uint64_t)v43);
            if (aBlock) {
              _Block_release(aBlock);
            }
            if (v50 < 0)
            {
              operator delete(v49);
              if ((v48 & 0x80000000) == 0)
              {
LABEL_49:
                if ((v46 & 0x80000000) == 0) {
                  goto LABEL_50;
                }
                goto LABEL_79;
              }
            }
            else if ((v48 & 0x80000000) == 0)
            {
              goto LABEL_49;
            }
            operator delete(v47);
            if ((v46 & 0x80000000) == 0)
            {
LABEL_50:
              if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_68;
              }
LABEL_80:
              operator delete(v44.__r_.__value_.__l.__data_);
              goto LABEL_68;
            }
LABEL_79:
            operator delete(v45);
            if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_68;
            }
            goto LABEL_80;
          }
LABEL_33:
          operator delete(v55.__r_.__value_.__l.__data_);
          goto LABEL_34;
        }
      }
      if (SBYTE7(v57) < 0)
      {
        std::string::__init_copy_ctor_external(&__dst, (const std::string::value_type *)buf, *((std::string::size_type *)&buf + 1));
      }
      else
      {
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = buf;
        __dst.__r_.__value_.__r.__words[2] = v57;
      }
      int v16 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v17 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v17 = __dst.__r_.__value_.__l.__size_;
      }
      if (v17 == strlen((const char *)*MEMORY[0x1E4F4C6F0]))
      {
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v18 = &__dst;
        }
        else {
          uint64_t v18 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        BOOL v19 = memcmp(v18, (const void *)*MEMORY[0x1E4F4C6F0], v17) == 0;
        if ((v16 & 0x80000000) == 0)
        {
LABEL_32:
          if ((*((unsigned char *)&v55.__r_.__value_.__s + 23) & 0x80) == 0) {
            goto LABEL_34;
          }
          goto LABEL_33;
        }
      }
      else
      {
        BOOL v19 = 0;
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_32;
        }
      }
      operator delete(__dst.__r_.__value_.__l.__data_);
      goto LABEL_32;
    }
  }
}

void sub_1C5B24714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,xpc_object_t object,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,char a40)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_45(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  xpc_object_t v3 = (const ResetInfo *)(a1 + 5);
  ResetInfo::ResetInfo(&v16, (const ResetInfo *)(a1 + 5));
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 1174405120;
  void v6[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_2_46;
  v6[3] = &__block_descriptor_tmp_47_3;
  ResetInfo::ResetInfo(&v7, v3);
  xpc_object_t v4 = (void *)a1[19];
  if (v4) {
    xpc_object_t v4 = _Block_copy(v4);
  }
  size_t v14 = v4;
  aBlocunint64_t k = _Block_copy(v6);
  BootModule::requestReset(v2, (const ResetInfo *)&v16, (uint64_t *)&aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v22 < 0)
  {
    operator delete(__p);
    if ((v20 & 0x80000000) == 0)
    {
LABEL_7:
      if ((v18 & 0x80000000) == 0) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
  }
  else if ((v20 & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(v19);
  if ((v18 & 0x80000000) == 0)
  {
LABEL_8:
    if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
LABEL_14:
    operator delete(v16.__r_.__value_.__l.__data_);
    xpc_object_t v5 = v14;
    if (!v14) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_13:
  operator delete(v17);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_14;
  }
LABEL_9:
  xpc_object_t v5 = v14;
  if (v14) {
LABEL_15:
  }
    _Block_release(v5);
LABEL_16:
  if (v13 < 0)
  {
    operator delete(v12);
    if ((v11 & 0x80000000) == 0)
    {
LABEL_18:
      if ((v9 & 0x80000000) == 0) {
        goto LABEL_19;
      }
      goto LABEL_23;
    }
  }
  else if ((v11 & 0x80000000) == 0)
  {
    goto LABEL_18;
  }
  operator delete(v10);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_19:
    if ((SHIBYTE(v7.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_24:
    operator delete(v7.__r_.__value_.__l.__data_);
    return;
  }
LABEL_23:
  operator delete(v8);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_24;
  }
}

void sub_1C5B249CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *aBlock,void *a29)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a27) {
    _Block_release(a27);
  }
  ResetInfo::~ResetInfo(v29);
  ResetInfo::~ResetInfo(&a29);
  _Unwind_Resume(a1);
}

void sub_1C5B24A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_2_46(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  unsigned int v18 = a2;
  xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v6 = v5;
  if (v5)
  {
    xpc_object_t xdict = v5;
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t xdict = v6;
    if (!v6)
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v6 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8795EB0](v6) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v6);
    goto LABEL_9;
  }
  xpc_object_t v7 = xpc_null_create();
LABEL_8:
  xpc_object_t xdict = v7;
LABEL_9:
  xpc_release(v6);
  if (*((char *)a3 + 23) < 0)
  {
    if (!a3[1]) {
      goto LABEL_17;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (!*((unsigned char *)a3 + 23))
  {
    goto LABEL_17;
  }
  xpc_object_t v8 = xpc_string_create((const char *)a3);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C240], v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
LABEL_17:
  uint64_t v10 = *(void *)(a1 + 104);
  char v11 = operator new(0x38uLL);
  v11[8] = 0;
  *(void *)char v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = v20;
  BOOL v19 = v11;
  v20[0] = v11;
  *((unsigned char *)v11 + 24) = 1;
  v20[1] = (void *)1;
  *((void *)v11 + 5) = v10;
  *((void *)v11 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v19, 0, 9, __p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v19, v20[0]);
  if (v16 >= 0) {
    uint64_t v12 = __p;
  }
  else {
    uint64_t v12 = (void **)__p[0];
  }
  xpc_object_t v13 = xpc_string_create((const char *)v12);
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C4C8], v13);
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>((uint64_t *)(a1 + 144), &v18, &xdict);
  xpc_release(xdict);
}

void sub_1C5B24C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, uint64_t a13, char a14, uint64_t a15)
{
}

void *__copy_helper_block_e8_32c14_ZTS9ResetInfo144c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  ResetInfo::ResetInfo((std::string *)(a1 + 32), (const ResetInfo *)(a2 + 32));
  BOOL result = *(void **)(a2 + 144);
  if (result) {
    BOOL result = _Block_copy(result);
  }
  *(void *)(a1 + 144) = result;
  return result;
}

void __destroy_helper_block_e8_32c14_ZTS9ResetInfo144c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 144);
  if (v2) {
    _Block_release(v2);
  }
  if (*(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    if ((*(char *)(a1 + 103) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(a1 + 79) & 0x80000000) == 0) {
        goto LABEL_6;
      }
LABEL_10:
      operator delete(*(void **)(a1 + 56));
      if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
        return;
      }
      goto LABEL_11;
    }
  }
  else if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0) {
    goto LABEL_10;
  }
LABEL_6:
  if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
    return;
  }
LABEL_11:
  xpc_object_t v3 = *(void **)(a1 + 32);

  operator delete(v3);
}

void *__copy_helper_block_e8_40c14_ZTS9ResetInfo152c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  ResetInfo::ResetInfo((std::string *)(a1 + 40), (const ResetInfo *)(a2 + 40));
  BOOL result = *(void **)(a2 + 152);
  if (result) {
    BOOL result = _Block_copy(result);
  }
  *(void *)(a1 + 152) = result;
  return result;
}

void __destroy_helper_block_e8_40c14_ZTS9ResetInfo152c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 152);
  if (v2) {
    _Block_release(v2);
  }
  if (*(char *)(a1 + 151) < 0)
  {
    operator delete(*(void **)(a1 + 128));
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(a1 + 87) & 0x80000000) == 0) {
        goto LABEL_6;
      }
LABEL_10:
      operator delete(*(void **)(a1 + 64));
      if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
        return;
      }
      goto LABEL_11;
    }
  }
  else if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0) {
    goto LABEL_10;
  }
LABEL_6:
  if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
    return;
  }
LABEL_11:
  xpc_object_t v3 = *(void **)(a1 + 40);

  operator delete(v3);
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_52(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  xpc_object_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4)
  {
    xpc_object_t v6 = std::__shared_weak_count::lock(v4);
    xpc_object_t v14 = v6;
    if (v6)
    {
      if (!*(void *)(a1 + 32))
      {
        xpc_object_t v9 = v6;
LABEL_14:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
      xpc_object_t v8 = v7;
      if (v7)
      {
        xpc_object_t object = v7;
      }
      else
      {
        xpc_object_t v8 = xpc_null_create();
        xpc_object_t object = v8;
        if (!v8)
        {
          xpc_object_t v10 = xpc_null_create();
          xpc_object_t v8 = 0;
          goto LABEL_12;
        }
      }
      if (MEMORY[0x1C8795EB0](v8) == MEMORY[0x1E4F14590])
      {
        xpc_retain(v8);
        goto LABEL_13;
      }
      xpc_object_t v10 = xpc_null_create();
LABEL_12:
      xpc_object_t object = v10;
LABEL_13:
      xpc_release(v8);
      unsigned int v11 = 0;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, &v11, &object);
      xpc_release(object);
      xpc_object_t v9 = v14;
      if (!v14) {
        return;
      }
      goto LABEL_14;
    }
  }
}

void sub_1C5B24F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11)
{
}

uint64_t __copy_helper_block_e8_32c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_54(void *a1, void *a2, void *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  xpc_object_t v7 = (void *)a1[4];
  xpc_object_t v8 = std::__shared_weak_count::lock(v4);
  uint64_t v26 = v8;
  if (!v8) {
    return;
  }
  xpc_object_t v9 = v8;
  if (!a1[5]) {
    goto LABEL_18;
  }
  if (MEMORY[0x1C8795EB0](*a2) != MEMORY[0x1E4F14590])
  {
    xpc_object_t v10 = v7[11];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = *MEMORY[0x1E4F4C9D8];
      *(_DWORD *)xpc_object_t object = 136315138;
      *(void *)&xpc_object_t object[4] = v25;
      _os_log_error_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_ERROR, "No input is given for %s", object, 0xCu);
      if (!*a3)
      {
LABEL_18:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
    }
    else if (!*a3)
    {
      goto LABEL_18;
    }
    xpc_object_t v11 = xpc_null_create();
    uint64_t v12 = (void (**)(const void *, uint64_t, unsigned char *))*a3;
    *(void *)xpc_object_t object = v11;
    xpc_object_t v13 = xpc_null_create();
    v12[2](v12, 3760250880, object);
    xpc_release(*(xpc_object_t *)object);
    xpc_release(v13);
    goto LABEL_18;
  }
  xpc_object_t v14 = (xpc_object_t)*a2;
  if (v14)
  {
    xpc_retain(v14);
    size_t v15 = (void (**)(const void *, uint64_t, unsigned char *))*a3;
    if (*a3) {
      goto LABEL_10;
    }
  }
  else
  {
    xpc_object_t v14 = xpc_null_create();
    size_t v15 = (void (**)(const void *, uint64_t, unsigned char *))*a3;
    if (*a3)
    {
LABEL_10:
      char v16 = _Block_copy(v15);
      size_t v17 = (std::__shared_weak_count *)v7[16];
      if (!v17) {
LABEL_23:
      }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_14;
    }
  }
  char v16 = 0;
  size_t v17 = (std::__shared_weak_count *)v7[16];
  if (!v17) {
    goto LABEL_23;
  }
LABEL_14:
  uint64_t v18 = v7[15];
  BOOL v19 = std::__shared_weak_count::lock(v17);
  if (!v19) {
    goto LABEL_23;
  }
  char v20 = v19;
  size_t v21 = operator new(0x18uLL);
  void *v21 = v7;
  v21[1] = v14;
  xpc_object_t v22 = xpc_null_create();
  v21[2] = v16;
  uint64_t v23 = v7[17];
  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v24 = operator new(0x18uLL);
  void *v24 = v21;
  v24[1] = v18;
  v24[2] = v20;
  dispatch_async_f(v23, v24, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb1_EUb2_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
  if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  xpc_release(v22);
  xpc_object_t v9 = v26;
  if (v26) {
    goto LABEL_18;
  }
}

void sub_1C5B2528C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_58(void *a1, uint64_t a2, ctu **a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = a1[4];
    xpc_object_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      xpc_object_t v9 = v7;
      if (a1[5])
      {
        ctu::cf_to_xpc((uint64_t *)object, *a3, v8);
        xpc_object_t v10 = *(xpc_object_t *)object;
        uint64_t v11 = MEMORY[0x1E4F14590];
        if (*(void *)object && MEMORY[0x1C8795EB0](*(void *)object) == v11) {
          xpc_retain(v10);
        }
        else {
          xpc_object_t v10 = xpc_null_create();
        }
        xpc_release(*(xpc_object_t *)object);
        if (MEMORY[0x1C8795EB0](v10) == v11)
        {
          xpc_object_t value = xpc_dictionary_get_value(v10, (const char *)*MEMORY[0x1E4FB9AB0]);
          *(void *)xpc_object_t object = value;
          if (value) {
            xpc_retain(value);
          }
          else {
            *(void *)xpc_object_t object = xpc_null_create();
          }
          *(unsigned char *)(v6 + 192) = xpc::dyn_cast_or_default((xpc *)object, 0);
          xpc_release(*(xpc_object_t *)object);
          xpc_object_t v13 = *(NSObject **)(v6 + 88);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            if (*(unsigned char *)(v6 + 192)) {
              xpc_object_t v14 = "started";
            }
            else {
              xpc_object_t v14 = "stopped";
            }
            *(_DWORD *)xpc_object_t object = 136315138;
            *(void *)&xpc_object_t object[4] = v14;
            _os_log_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_DEFAULT, "#I Transport client %s", object, 0xCu);
          }
        }
        xpc_release(v10);
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1C5B254CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void BootModule::start(void *a1, dispatch_object_t *a2)
{
  xpc_object_t v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  xpc_object_t v9 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v9);
  }
  xpc_object_t v10 = (std::__shared_weak_count *)a1[16];
  if (!v10 || (v11 = a1[15], (uint64_t v12 = std::__shared_weak_count::lock(v10)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v13 = v12;
  xpc_object_t v14 = operator new(0x20uLL);
  *xpc_object_t v14 = v5;
  v14[1] = v7;
  uint64_t v14[2] = v9;
  void v14[3] = a1;
  size_t v15 = a1[17];
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v16 = operator new(0x18uLL);
  void *v16 = v14;
  v16[1] = v11;
  v16[2] = v13;
  dispatch_async_f(v15, v16, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<BootModule>::execute_wrapped<BootModule::start(dispatch::group_session)::$_0>(BootModule::start(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<BootModule::start(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<BootModule::start(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }

  std::__shared_weak_count::__release_weak(v7);
}

void BootModule::finishInitialization_sync(BootModule *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v2 || (uint64_t v3 = *((void *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (const char *)(*(uint64_t (**)(BootModule *))(*(void *)this + 16))(this);
  size_t v7 = strlen(v6);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    xpc_object_t v9 = (void **)operator new(v10 + 1);
    __dst[1] = v8;
    unint64_t v60 = v11 | 0x8000000000000000;
    __dst[0] = v9;
  }
  else
  {
    HIBYTE(v60) = v7;
    xpc_object_t v9 = __dst;
    if (!v7) {
      goto LABEL_13;
    }
  }
  memmove(v9, v6, (size_t)v8);
LABEL_13:
  *((unsigned char *)v8 + (void)v9) = 0;
  long long v58 = 0;
  AppleBasebandManager::create();
  long long v12 = v61;
  long long v61 = 0uLL;
  xpc_object_t v13 = (std::__shared_weak_count *)*((void *)this + 59);
  *((_OWORD *)this + 29) = v12;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  xpc_object_t v14 = (std::__shared_weak_count *)*((void *)&v61 + 1);
  if (!*((void *)&v61 + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v61 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    size_t v15 = v58;
    if (!v58) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  size_t v15 = v58;
  if (v58) {
LABEL_19:
  }
    CFRelease(v15);
LABEL_20:
  if (SHIBYTE(v60) < 0) {
    operator delete(__dst[0]);
  }
  uint64_t v16 = abm::kEventTransportIsReady[0];
  size_t v17 = strlen(abm::kEventTransportIsReady[0]);
  if (v17 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v18 = (void *)v17;
  if (v17 >= 0x17)
  {
    uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v20 = v17 | 7;
    }
    uint64_t v21 = v20 + 1;
    BOOL v19 = (void **)operator new(v20 + 1);
    v56[1] = v18;
    unint64_t v57 = v21 | 0x8000000000000000;
    v56[0] = v19;
    goto LABEL_29;
  }
  HIBYTE(v57) = v17;
  BOOL v19 = v56;
  if (v17) {
LABEL_29:
  }
    memmove(v19, v16, (size_t)v18);
  *((unsigned char *)v18 + (void)v19) = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule25finishInitialization_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_75_0;
  void aBlock[4] = this;
  void aBlock[5] = v3;
  long long v53 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v22 = _Block_copy(aBlock);
  uint64_t v23 = *((void *)this + 17);
  if (v23) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  xpc_object_t v54 = v22;
  dispatch_object_t v55 = v23;
  AppleBasebandManager::setEventHandler();
  if (v55) {
    dispatch_release(v55);
  }
  if (v54) {
    _Block_release(v54);
  }
  if (SHIBYTE(v57) < 0) {
    operator delete(v56[0]);
  }
  uint64_t v24 = (const void *)*MEMORY[0x1E4F4CC38];
  size_t v25 = strlen((const char *)*MEMORY[0x1E4F4CC38]);
  if (v25 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v26 = (void *)v25;
  if (v25 >= 0x17)
  {
    uint64_t v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17) {
      uint64_t v28 = v25 | 7;
    }
    uint64_t v29 = v28 + 1;
    uint64_t v27 = operator new(v28 + 1);
    __p[1] = v26;
    unint64_t v51 = v29 | 0x8000000000000000;
    __p[0] = v27;
    goto LABEL_45;
  }
  HIBYTE(v51) = v25;
  uint64_t v27 = __p;
  if (v25) {
LABEL_45:
  }
    memmove(v27, v24, (size_t)v26);
  *((unsigned char *)v26 + (void)v27) = 0;
  v46[0] = MEMORY[0x1E4F143A8];
  v46[1] = 1174405120;
  v46[2] = ___ZN10BootModule25finishInitialization_syncEv_block_invoke_76;
  v46[3] = &__block_descriptor_tmp_79_1;
  v46[4] = this;
  void v46[5] = v3;
  uint64_t v47 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  long long v30 = _Block_copy(v46);
  uint64_t v31 = *((void *)this + 17);
  if (v31) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  char v48 = v30;
  dispatch_object_t object = v31;
  AppleBasebandManager::setEventHandler();
  if (object) {
    dispatch_release(object);
  }
  if (v48) {
    _Block_release(v48);
  }
  if (SHIBYTE(v51) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v32 = (const void *)*MEMORY[0x1E4F4D0F8];
  size_t v33 = strlen((const char *)*MEMORY[0x1E4F4D0F8]);
  if (v33 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v34 = (void *)v33;
  if (v33 >= 0x17)
  {
    uint64_t v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17) {
      uint64_t v36 = v33 | 7;
    }
    uint64_t v37 = v36 + 1;
    xpc_object_t v35 = operator new(v36 + 1);
    v44[1] = v34;
    unint64_t v45 = v37 | 0x8000000000000000;
    v44[0] = v35;
    goto LABEL_61;
  }
  HIBYTE(v45) = v33;
  xpc_object_t v35 = v44;
  if (v33) {
LABEL_61:
  }
    memmove(v35, v32, (size_t)v34);
  *((unsigned char *)v34 + (void)v35) = 0;
  v40[0] = MEMORY[0x1E4F143A8];
  v40[1] = 1174405120;
  void v40[2] = ___ZN10BootModule25finishInitialization_syncEv_block_invoke_80;
  v40[3] = &__block_descriptor_tmp_83_0;
  v40[4] = this;
  v40[5] = v3;
  long long v41 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v38 = _Block_copy(v40);
  xpc_object_t v39 = *((void *)this + 17);
  if (v39) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  std::string::size_type v42 = v38;
  dispatch_object_t v43 = v39;
  AppleBasebandManager::setEventHandler();
  if (v43) {
    dispatch_release(v43);
  }
  if (v42) {
    _Block_release(v42);
  }
  if (SHIBYTE(v45) < 0) {
    operator delete(v44[0]);
  }
  AppleBasebandManager::eventsOn(*((AppleBasebandManager **)this + 58));
  if (v41) {
    std::__shared_weak_count::__release_weak(v41);
  }
  if (v47) {
    std::__shared_weak_count::__release_weak(v47);
  }
  if (v53) {
    std::__shared_weak_count::__release_weak(v53);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C5B25CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (a30) {
    std::__shared_weak_count::__release_weak(a30);
  }
  if (a45)
  {
    std::__shared_weak_count::__release_weak(a45);
    std::__shared_weak_count::__release_weak(v45);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v45);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule25finishInitialization_syncEv_block_invoke(void *a1)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (!v2) {
    return;
  }
  uint64_t v3 = (BootModule *)a1[4];
  xpc_object_t v4 = std::__shared_weak_count::lock(v2);
  std::string v44 = v4;
  if (!v4) {
    return;
  }
  uint64_t v5 = v4;
  if (!a1[5]) {
    goto LABEL_58;
  }
  uint64_t v6 = *((int *)v3 + 114);
  if (v6 != 3)
  {
    uint64_t v16 = *((void *)v3 + 11);
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_58;
    }
    if (v6 > 8) {
      size_t v17 = "Unknown";
    }
    else {
      size_t v17 = off_1E651BEF8[v6];
    }
    uint64_t v34 = *MEMORY[0x1E4F4CAE8];
    *(_DWORD *)state = 136315394;
    *(void *)&state[4] = v17;
    *(_WORD *)&state[12] = 2080;
    *(void *)&state[14] = v34;
    _os_log_impl(&dword_1C59C6000, v16, OS_LOG_TYPE_DEFAULT, "#I State is '%s'; don't send '%s' event", state, 0x16u);
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_59:
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      return;
    }
    return;
  }
  dispatch_object_t object = _os_activity_create(&dword_1C59C6000, "Baseband state: transport is ready", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  memset(state, 170, 16);
  os_activity_scope_enter((os_activity_t)object, (os_activity_scope_state_t)state);
  os_activity_scope_leave((os_activity_scope_state_t)state);
  (*(void (**)(BootModule *, uint64_t))(*(void *)v3 + 96))(v3, 4);
  CFTypeRef cf = 0;
  uint64_t v7 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v10 = Mutable;
  if (Mutable) {
    CFTypeRef cf = Mutable;
  }
  uint64_t v11 = (const __CFString **)*MEMORY[0x1E4F4C688];
  *(void *)state = 0;
  ctu::cf::convert_copy((ctu::cf *)state, v11, (const char *)0x8000100, v7, v9);
  long long v12 = (const __CFString **)*MEMORY[0x1E4F4CAE8];
  xpc_object_t v13 = *(const void **)state;
  uint64_t v46 = *(void *)state;
  *(void *)state = 0;
  ctu::cf::convert_copy((ctu::cf *)state, v12, (const char *)0x8000100, v7, v14);
  size_t v15 = *(const void **)state;
  unint64_t v45 = *(__CFDictionary **)state;
  if (v13 && *(void *)state)
  {
    CFDictionarySetValue(v10, v13, *(const void **)state);
  }
  else if (!*(void *)state)
  {
    goto LABEL_15;
  }
  CFRelease(v15);
LABEL_15:
  if (v13) {
    CFRelease(v13);
  }
  unint64_t v45 = (__CFDictionary *)0xAAAAAAAAAAAAAAAALL;
  BootModule::calculateBootStatistics_sync(v3, &v45);
  BOOL v19 = v45;
  if (v45) {
    uint64_t v20 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    uint64_t v20 = 0;
  }
  if (v20)
  {
    uint64_t v21 = (const __CFString **)*MEMORY[0x1E4F4CC50];
    *(void *)state = 0;
    ctu::cf::convert_copy((ctu::cf *)state, v21, (const char *)0x8000100, v7, v18);
    xpc_object_t v22 = *(const void **)state;
    uint64_t v46 = *(void *)state;
    *(void *)state = v19;
    if (v19)
    {
      CFRetain(v19);
      if (v22) {
        CFDictionarySetValue(v10, v22, v19);
      }
      CFRelease(v19);
    }
    if (v22) {
      CFRelease(v22);
    }
  }
  uint64_t v23 = (const void *)*MEMORY[0x1E4F4CEF8];
  size_t v24 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
  if (v24 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v25 = (void *)v24;
  if (v24 >= 0x17)
  {
    uint64_t v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17) {
      uint64_t v27 = v24 | 7;
    }
    uint64_t v28 = v27 + 1;
    uint64_t v26 = (void **)operator new(v27 + 1);
    __dst[1] = v25;
    unint64_t v40 = v28 | 0x8000000000000000;
    __dst[0] = v26;
  }
  else
  {
    HIBYTE(v40) = v24;
    uint64_t v26 = __dst;
    if (!v24) {
      goto LABEL_35;
    }
  }
  memmove(v26, v23, (size_t)v25);
LABEL_35:
  *((unsigned char *)v25 + (void)v26) = 0;
  CFTypeRef v29 = cf;
  if (cf && (CFTypeID v30 = CFGetTypeID(cf), v30 == CFDictionaryGetTypeID()))
  {
    CFTypeRef v38 = v29;
    CFRetain(v29);
  }
  else
  {
    CFTypeRef v38 = 0;
  }
  v35[0] = MEMORY[0x1E4F143A8];
  v35[1] = 1174405120;
  v35[2] = ___ZN10BootModule25finishInitialization_syncEv_block_invoke_2;
  v35[3] = &__block_descriptor_tmp_71_3;
  uint64_t v32 = a1[5];
  uint64_t v31 = (std::__shared_weak_count *)a1[6];
  v35[4] = v3;
  v35[5] = v32;
  uint64_t v36 = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  aBlocunint64_t k = _Block_copy(v35);
  Service::broadcastEvent((uint64_t)v3, (uint64_t)__dst, &v38, (const void **)&aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v38) {
    CFRelease(v38);
  }
  if (SHIBYTE(v40) < 0) {
    operator delete(__dst[0]);
  }
  size_t v33 = *((void *)v3 + 26);
  *((void *)v3 + 26) = 0;
  if (v33)
  {
    dispatch_group_leave(v33);
    dispatch_release(v33);
  }
  if (v36) {
    std::__shared_weak_count::__release_weak(v36);
  }
  if (v45) {
    CFRelease(v45);
  }
  if (v29) {
    CFRelease(v29);
  }
  if (object) {
    os_release(object);
  }
  uint64_t v5 = v44;
  if (v44)
  {
LABEL_58:
    if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
    goto LABEL_59;
  }
}

void sub_1C5B26304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,const void *a24,void *a25,__int16 a26,char a27,char a28)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)(v28 - 80));
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)(v28 - 88));
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v28 - 96));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a24);
  ctu::os::scoped_activity::~scoped_activity(&a25);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void BootModule::calculateBootStatistics_sync(BootModule *this@<X0>, __CFDictionary **a2@<X8>)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  int v4 = TelephonyUtilSystemMachTime();
  uint64_t v5 = *((void *)this + 29);
  unsigned int v6 = v4 - v5;
  int v7 = *((_DWORD *)this + 60);
  xpc_object_t v8 = *((void *)this + 11);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v19[0]) = 67109120;
    HIDWORD(v19[0]) = v4 - v5;
    _os_log_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_DEFAULT, "#I Baseband total boot time = %u millisec", (uint8_t *)v19, 8u);
    xpc_object_t v8 = *((void *)this + 11);
    unsigned int v9 = v7 - v5;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
LABEL_3:
      unsigned int v10 = v4 - v7;
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else
  {
    unsigned int v9 = v7 - v5;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_3;
    }
  }
  LODWORD(v19[0]) = 67109120;
  HIDWORD(v19[0]) = v9;
  _os_log_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_DEFAULT, "#I Baseband image push time = %u millisec", (uint8_t *)v19, 8u);
  xpc_object_t v8 = *((void *)this + 11);
  unsigned int v10 = v4 - v7;
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
LABEL_4:
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_13:
  LODWORD(v19[0]) = 67109120;
  HIDWORD(v19[0]) = v10;
  _os_log_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_DEFAULT, "#I Baseband engage time     = %u millisec", (uint8_t *)v19, 8u);
  xpc_object_t v8 = *((void *)this + 11);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
LABEL_5:
    int v11 = *((_DWORD *)this + 56);
    LODWORD(v19[0]) = 67109120;
    HIDWORD(v19[0]) = v11;
    _os_log_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_DEFAULT, "#I Baseband boot attempts   = %u", (uint8_t *)v19, 8u);
  }
LABEL_6:
  BootModule::submitMetric_sync(this, *((_DWORD *)this + 56), v6, 1);
  *((_DWORD *)this + 56) = 0;
  v19[0] = 0;
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  size_t v15 = Mutable;
  if (Mutable) {
    v19[0] = Mutable;
  }
  ctu::cf::update<char const*,unsigned int>(Mutable, (const __CFString **)*MEMORY[0x1E4F4C550], v6, v12, v14);
  ctu::cf::update<char const*,unsigned int>(v15, (const __CFString **)*MEMORY[0x1E4F4CB48], v9, v12, v16);
  ctu::cf::update<char const*,unsigned int>(v15, (const __CFString **)*MEMORY[0x1E4F4C7A8], v10, v12, v17);
  if (v15)
  {
    CFTypeID v18 = CFGetTypeID(v15);
    if (v18 == CFDictionaryGetTypeID())
    {
      *a2 = v15;
      CFRetain(v15);
    }
    else
    {
      *a2 = 0;
    }
    CFRelease(v15);
  }
  else
  {
    *a2 = 0;
  }
}

void sub_1C5B266D8(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5B266F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void ___ZN10BootModule25finishInitialization_syncEv_block_invoke_2(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        v6[0] = MEMORY[0x1E4F143A8];
        v6[1] = 0x40000000;
        void v6[2] = ___ZN10BootModule25finishInitialization_syncEv_block_invoke_3;
        v6[3] = &__block_descriptor_tmp_68_0;
        void v6[4] = v3;
        ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v3 + 120), (uint64_t)v6);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void ___ZN10BootModule25finishInitialization_syncEv_block_invoke_3(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(int *)(v1 + 456);
  if (v2 == 4)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(unint64_t *__return_ptr))(*(void *)v1 + 80))(&v9);
    unint64_t v3 = v9;
    if (v9)
    {
      int v4 = (char *)operator new(0x38uLL);
      strcpy(v4, "com.apple.AppleBasebandManager.RadioNotReady.Bootup");
      uint64_t v5 = *(void *)(v3 + 104);
      std::string::__init_copy_ctor_external(&v11, v4, 0x33uLL);
      (*(void (**)(uint64_t, std::string *))(*(void *)v5 + 32))(v5, &v11);
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v11.__r_.__value_.__l.__data_);
      }
      operator delete(v4);
    }
    unsigned int v6 = (std::__shared_weak_count *)v10;
    if (v10)
    {
      if (!atomic_fetch_add((atomic_ullong *volatile)(v10 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    int v7 = *(NSObject **)(v1 + 88);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      if (v2 > 8) {
        xpc_object_t v8 = "Unknown";
      }
      else {
        xpc_object_t v8 = off_1E651BF40[v2];
      }
      LODWORD(v11.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v11.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
      _os_log_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_DEFAULT, "#I State is '%s' not releasing power assertion yet", (uint8_t *)&v11, 0xCu);
    }
  }
}

void sub_1C5B269DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  operator delete(v16);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1C5B26A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZN10BootModule25finishInitialization_syncEv_block_invoke_76(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        unsigned int v6 = *(BootController **)(v3 + 480);
        if (v6) {
          BootController::markNonvolatileDataErased(v6);
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1C5B26AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZN10BootModule25finishInitialization_syncEv_block_invoke_80(void *a1, abm::client::Event **a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    unsigned int v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      abm::client::Event::getData((uint64_t *)&cf, *a2);
      CFTypeRef v9 = cf;
      if (cf) {
        unint64_t v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        unint64_t v10 = 0;
      }
      if (v10)
      {
        v12[0] = 0xAAAAAAAAAAAAAAAALL;
        v12[1] = 0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v12, (const __CFDictionary *)cf);
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v14, (const char *)*MEMORY[0x1E4F4CB50]);
        int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v12, v14);
        MEMORY[0x1C8794290](&v14);
        *(_DWORD *)(v5 + 256) = Int;
        MEMORY[0x1C87942E0](v12);
        CFTypeRef v9 = cf;
      }
      if (v9) {
        CFRelease(v9);
      }
    }
  }
}

void BootModule::submitMetric_sync(BootModule *this, unsigned int a2, uint64_t a3, BOOL a4)
{
  uint64_t v8 = *((void *)this + 11);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C59C6000, v8, OS_LOG_TYPE_DEFAULT, "#I Submitting AWD of bootup time", buf, 2u);
  }
  xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
  uint64_t v10 = MEMORY[0x1E4F14590];
  if (v9 || (xpc_object_t v9 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v9) == v10)
    {
      xpc_retain(v9);
      xpc_object_t v11 = v9;
    }
    else
    {
      xpc_object_t v11 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    xpc_object_t v9 = 0;
  }
  xpc_release(v9);
  xpc_object_t v12 = xpc_dictionary_create(0, 0, 0);
  if (v12 || (xpc_object_t v12 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v12) == v10)
    {
      xpc_retain(v12);
      xpc_object_t v13 = v12;
    }
    else
    {
      xpc_object_t v13 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v13 = xpc_null_create();
    xpc_object_t v12 = 0;
  }
  xpc_release(v12);
  xpc_object_t v14 = xpc_int64_create(a2);
  if (!v14) {
    xpc_object_t v14 = xpc_null_create();
  }
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E4F4C3B0], v14);
  xpc_object_t v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  xpc_object_t v16 = xpc_uint64_create(a3);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E4F4C478], v16);
  xpc_object_t v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  xpc_object_t v18 = xpc_BOOL_create(a4);
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E4F4C3B8], v18);
  xpc_object_t v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  xpc_object_t v20 = xpc_string_create((const char *)*MEMORY[0x1E4F4D2D0]);
  if (!v20) {
    xpc_object_t v20 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E4F4C190], v20);
  xpc_object_t v21 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v21);
  xpc_object_t v22 = xpc_int64_create(524384);
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E4F4C258], v22);
  xpc_object_t v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  if (v13)
  {
    xpc_retain(v13);
    xpc_object_t v24 = v13;
  }
  else
  {
    xpc_object_t v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E4F4C188], v24);
  xpc_object_t v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  uint64_t v26 = (const void *)*MEMORY[0x1E4F4C738];
  size_t v27 = strlen((const char *)*MEMORY[0x1E4F4C738]);
  if (v27 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v28 = v27;
  if (v27 >= 0x17)
  {
    uint64_t v30 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17) {
      uint64_t v30 = v27 | 7;
    }
    uint64_t v31 = v30 + 1;
    CFTypeRef v29 = operator new(v30 + 1);
    size_t v35 = v28;
    unint64_t v36 = v31 | 0x8000000000000000;
    *(void *)long long buf = v29;
LABEL_36:
    memmove(v29, v26, v28);
    *((unsigned char *)v29 + v28) = 0;
    xpc_object_t object = v11;
    if (v11) {
      goto LABEL_32;
    }
    goto LABEL_37;
  }
  HIBYTE(v36) = v27;
  CFTypeRef v29 = buf;
  if (v27) {
    goto LABEL_36;
  }
  buf[0] = 0;
  xpc_object_t object = v11;
  if (v11)
  {
LABEL_32:
    xpc_retain(v11);
    goto LABEL_38;
  }
LABEL_37:
  xpc_object_t object = xpc_null_create();
LABEL_38:
  uint64_t v32 = 0;
  Service::runCommand((uint64_t)this, (uint64_t)buf, &object, &v32);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(v36) < 0) {
    operator delete(*(void **)buf);
  }
  xpc_release(v13);
  xpc_release(v11);
}

void sub_1C5B270A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  xpc_release(object);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(v17);
  xpc_release(v16);
  _Unwind_Resume(a1);
}

void BootModule::handleBootFailed_sync(uint64_t a1, const void **a2)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  os_activity_t v99 = _os_activity_create(&dword_1C59C6000, "Baseband state: boot up failed", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  memset(state, 170, 16);
  os_activity_scope_enter(v99, (os_activity_scope_state_t)state);
  os_activity_scope_leave((os_activity_scope_state_t)state);
  memset(v98, 170, sizeof(v98));
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  size_t v6 = v5 + 23;
  memset(state, 170, 24);
  if (v5 + 23 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 >= 0xFFFFFFFFFFFFFFE9)
  {
    int v7 = &state[23];
    state[23] = v5 + 23;
    qmemcpy(state, "modem boot up failure [", 23);
LABEL_10:
    if (v4 >= 0) {
      xpc_object_t v11 = a2;
    }
    else {
      xpc_object_t v11 = *a2;
    }
    memmove(v7, v11, v5);
    goto LABEL_14;
  }
  uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v6 | 7) != 0x17) {
    uint64_t v8 = v6 | 7;
  }
  uint64_t v9 = v8 + 1;
  uint64_t v10 = (char *)operator new(v8 + 1);
  *(void *)&state[8] = v5 + 23;
  *(void *)&state[16] = v9 | 0x8000000000000000;
  *(void *)state = v10;
  qmemcpy(v10, "modem boot up failure [", 23);
  int v7 = v10 + 23;
  if (v5) {
    goto LABEL_10;
  }
LABEL_14:
  v7[v5] = 0;
  xpc_object_t v12 = std::string::append((std::string *)state, "]", 1uLL);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  *(void *)&v98[16] = *((void *)&v12->__r_.__value_.__l + 2);
  *(_OWORD *)unint64_t v98 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((state[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)state);
    if (*(unsigned char *)(a1 + 229)) {
      goto LABEL_19;
    }
  }
  else if (*(unsigned char *)(a1 + 229))
  {
    goto LABEL_19;
  }
  unsigned int v14 = *(_DWORD *)(a1 + 224);
  if (v14 <= *(_DWORD *)(a1 + 196))
  {
    CFTypeRef v38 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)state = 67109120;
      *(_DWORD *)&state[4] = v14;
      _os_log_error_impl(&dword_1C59C6000, v38, OS_LOG_TYPE_ERROR, "Attempting to boot baseband again; attempt=%d",
        state,
        8u);
    }
    *(void *)&long long v39 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v39 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v104 = v39;
    long long v105 = v39;
    long long v102 = v39;
    long long v103 = v39;
    *(_OWORD *)&state[16] = v39;
    long long v101 = v39;
    *(_OWORD *)state = v39;
    unint64_t v40 = (const void *)*MEMORY[0x1E4F4C6E8];
    size_t v41 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
    if (v41 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v42 = v41;
    if (v41 >= 0x17)
    {
      uint64_t v62 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v41 | 7) != 0x17) {
        uint64_t v62 = v41 | 7;
      }
      uint64_t v63 = v62 + 1;
      dispatch_object_t v43 = operator new(v62 + 1);
      *((void *)&v96 + 1) = v42;
      unint64_t v97 = v63 | 0x8000000000000000;
      *(void *)&long long v96 = v43;
    }
    else
    {
      HIBYTE(v97) = v41;
      dispatch_object_t v43 = &v96;
      if (!v41)
      {
LABEL_115:
        v43[v42] = 0;
        uint64_t v64 = (const void *)*MEMORY[0x1E4F4D030];
        size_t v65 = strlen((const char *)*MEMORY[0x1E4F4D030]);
        if (v65 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v66 = v65;
        if (v65 >= 0x17)
        {
          uint64_t v68 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v65 | 7) != 0x17) {
            uint64_t v68 = v65 | 7;
          }
          uint64_t v69 = v68 + 1;
          std::string v67 = operator new(v68 + 1);
          *((void *)&v94 + 1) = v66;
          unint64_t v95 = v69 | 0x8000000000000000;
          *(void *)&long long v94 = v67;
        }
        else
        {
          HIBYTE(v95) = v65;
          std::string v67 = &v94;
          if (!v65)
          {
LABEL_123:
            v67[v66] = 0;
            Timestamp::Timestamp((Timestamp *)&cf);
            Timestamp::asString((uint64_t)&cf, 0, 9, __p);
            char v89 = 0;
            LOBYTE(v88) = 0;
            ResetInfo::ResetInfo((std::string *)state, &v96, &v94, (long long *)v98, (uint64_t)__p, 4, &v88);
            if (v93 < 0)
            {
              operator delete(__p[0]);
              std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&cf, v91);
              if ((SHIBYTE(v95) & 0x80000000) == 0)
              {
LABEL_125:
                if ((SHIBYTE(v97) & 0x80000000) == 0) {
                  goto LABEL_126;
                }
LABEL_139:
                operator delete((void *)v96);
LABEL_126:
                ResetInfo::ResetInfo(&v81, (const ResetInfo *)state);
                xpc_object_t v80 = 0;
                BootModule::requestReset(a1, &v81, &v80);
                if (v80) {
                  _Block_release(v80);
                }
                if (v87 < 0)
                {
                  operator delete(v86);
                  if ((v85 & 0x80000000) == 0)
                  {
LABEL_130:
                    if ((v83 & 0x80000000) == 0) {
                      goto LABEL_131;
                    }
                    goto LABEL_142;
                  }
                }
                else if ((v85 & 0x80000000) == 0)
                {
                  goto LABEL_130;
                }
                operator delete(v84);
                if ((v83 & 0x80000000) == 0)
                {
LABEL_131:
                  if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    goto LABEL_132;
                  }
                  goto LABEL_143;
                }
LABEL_142:
                operator delete(v82);
                if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_132:
                  if ((SHIBYTE(v105) & 0x80000000) == 0) {
                    goto LABEL_133;
                  }
                  goto LABEL_144;
                }
LABEL_143:
                operator delete(v81.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v105) & 0x80000000) == 0)
                {
LABEL_133:
                  if ((SBYTE7(v103) & 0x80000000) == 0) {
                    goto LABEL_134;
                  }
                  goto LABEL_145;
                }
LABEL_144:
                operator delete(*((void **)&v104 + 1));
                if ((SBYTE7(v103) & 0x80000000) == 0)
                {
LABEL_134:
                  if ((SHIBYTE(v101) & 0x80000000) == 0) {
                    goto LABEL_135;
                  }
                  goto LABEL_146;
                }
LABEL_145:
                operator delete((void *)v102);
                if ((SHIBYTE(v101) & 0x80000000) == 0)
                {
LABEL_135:
                  if ((state[23] & 0x80000000) == 0) {
                    goto LABEL_103;
                  }
LABEL_147:
                  operator delete(*(void **)state);
                  goto LABEL_103;
                }
LABEL_146:
                operator delete(*(void **)&state[24]);
                if ((state[23] & 0x80000000) == 0) {
                  goto LABEL_103;
                }
                goto LABEL_147;
              }
            }
            else
            {
              std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&cf, v91);
              if ((SHIBYTE(v95) & 0x80000000) == 0) {
                goto LABEL_125;
              }
            }
            operator delete((void *)v94);
            if ((SHIBYTE(v97) & 0x80000000) == 0) {
              goto LABEL_126;
            }
            goto LABEL_139;
          }
        }
        memmove(v67, v64, v66);
        goto LABEL_123;
      }
    }
    memmove(v43, v40, v42);
    goto LABEL_115;
  }
LABEL_19:
  xpc_object_t v15 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)state = 0;
    _os_log_error_impl(&dword_1C59C6000, v15, OS_LOG_TYPE_ERROR, "Baseband is declared dead; no more boot attempts",
      state,
      2u);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 96))(a1, 6);
  CFTypeRef cf = 0;
  uint64_t v16 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable) {
    CFTypeRef cf = Mutable;
  }
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x1E4F4C688], (const __CFString **)*MEMORY[0x1E4F4C6E0], v16, v18);
  xpc_object_t v19 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v19 || (uint64_t v20 = *(void *)(a1 + 120), (v21 = std::__shared_weak_count::lock(v19)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v22 = v21;
  atomic_fetch_add_explicit(&v21->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v22);
  }
  *(void *)&long long v94 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v94 + 1) = 0xAAAAAAAAAAAAAAAALL;
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  xpc_object_t v23 = (uint64_t *)off_1EBBDC878;
  if (!off_1EBBDC878)
  {
    ABMServer::create_default_global(state);
    long long v24 = *(_OWORD *)state;
    *(void *)state = 0;
    *(void *)&state[8] = 0;
    xpc_object_t v25 = (std::__shared_weak_count *)*(&off_1EBBDC878 + 1);
    off_1EBBDC878 = v24;
    if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    uint64_t v26 = *(std::__shared_weak_count **)&state[8];
    if (*(void *)&state[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&state[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
    xpc_object_t v23 = (uint64_t *)off_1EBBDC878;
  }
  *(void *)&long long v94 = v23;
  *((void *)&v94 + 1) = *(&off_1EBBDC878 + 1);
  if (*(&off_1EBBDC878 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDC878 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  size_t v27 = (const void *)*MEMORY[0x1E4F4CEF8];
  size_t v28 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
  if (v28 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  CFTypeRef v29 = (void *)v28;
  if (v28 >= 0x17)
  {
    uint64_t v32 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17) {
      uint64_t v32 = v28 | 7;
    }
    uint64_t v33 = v32 + 1;
    uint64_t v30 = (void **)operator new(v32 + 1);
    __dst[1] = v29;
    unint64_t v79 = v33 | 0x8000000000000000;
    __dst[0] = v30;
LABEL_45:
    memmove(v30, v27, (size_t)v29);
    *((unsigned char *)v29 + (void)v30) = 0;
    CFTypeRef v31 = cf;
    if (!cf) {
      goto LABEL_48;
    }
    goto LABEL_46;
  }
  HIBYTE(v79) = v28;
  uint64_t v30 = __dst;
  if (v28) {
    goto LABEL_45;
  }
  LOBYTE(__dst[0]) = 0;
  CFTypeRef v31 = cf;
  if (!cf) {
    goto LABEL_48;
  }
LABEL_46:
  CFTypeID v34 = CFGetTypeID(v31);
  if (v34 == CFDictionaryGetTypeID())
  {
    BOOL v77 = v31;
    CFRetain(v31);
    goto LABEL_49;
  }
LABEL_48:
  CFTypeRef v31 = 0;
  BOOL v77 = 0;
LABEL_49:
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule21handleBootFailed_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_88_1;
  void aBlock[4] = a1;
  void aBlock[5] = v20;
  std::string::size_type v75 = v22;
  atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v35 = _Block_copy(aBlock);
  __darwin_time_t v76 = v35;
  ABMServer::broadcast(v23, (uint64_t)__dst, &v77, &v76);
  if (v35) {
    _Block_release(v35);
  }
  if (v31) {
    CFRelease(v31);
  }
  if (SHIBYTE(v79) < 0) {
    operator delete(__dst[0]);
  }
  xpc_object_t v36 = xpc_dictionary_create(0, 0, 0);
  if (v36 || (xpc_object_t v36 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v36) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v36);
      xpc_object_t v37 = v36;
    }
    else
    {
      xpc_object_t v37 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v37 = xpc_null_create();
    xpc_object_t v36 = 0;
  }
  xpc_release(v36);
  xpc_object_t v44 = xpc_int64_create(4);
  if (!v44) {
    xpc_object_t v44 = xpc_null_create();
  }
  xpc_dictionary_set_value(v37, (const char *)*MEMORY[0x1E4F4C180], v44);
  xpc_object_t v45 = xpc_null_create();
  xpc_release(v44);
  xpc_release(v45);
  if (v98[23] >= 0) {
    uint64_t v46 = v98;
  }
  else {
    uint64_t v46 = *(const char **)v98;
  }
  xpc_object_t v47 = xpc_string_create(v46);
  if (!v47) {
    xpc_object_t v47 = xpc_null_create();
  }
  xpc_dictionary_set_value(v37, (const char *)*MEMORY[0x1E4F4CA98], v47);
  xpc_object_t v48 = xpc_null_create();
  xpc_release(v47);
  xpc_release(v48);
  Timestamp::Timestamp((Timestamp *)&v96);
  Timestamp::asString((uint64_t)&v96, 0, 9, state);
  if (state[23] >= 0) {
    unint64_t v49 = state;
  }
  else {
    unint64_t v49 = *(const char **)state;
  }
  xpc_object_t v50 = xpc_string_create(v49);
  if (!v50) {
    xpc_object_t v50 = xpc_null_create();
  }
  xpc_dictionary_set_value(v37, (const char *)*MEMORY[0x1E4F4C4C8], v50);
  xpc_object_t v51 = xpc_null_create();
  xpc_release(v50);
  xpc_release(v51);
  if ((state[23] & 0x80000000) != 0) {
    operator delete(*(void **)state);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v96, *((void **)&v96 + 1));
  xpc_object_t v52 = (const void *)*MEMORY[0x1E4F4C748];
  size_t v53 = strlen((const char *)*MEMORY[0x1E4F4C748]);
  if (v53 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v54 = v53;
  if (v53 >= 0x17)
  {
    uint64_t v56 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v53 | 7) != 0x17) {
      uint64_t v56 = v53 | 7;
    }
    uint64_t v57 = v56 + 1;
    dispatch_object_t v55 = operator new(v56 + 1);
    *(void *)&state[8] = v54;
    *(void *)&state[16] = v57 | 0x8000000000000000;
    *(void *)state = v55;
LABEL_89:
    memmove(v55, v52, v54);
    v55[v54] = 0;
    xpc_object_t object = v37;
    if (v37) {
      goto LABEL_85;
    }
LABEL_90:
    xpc_object_t object = xpc_null_create();
    goto LABEL_91;
  }
  state[23] = v53;
  dispatch_object_t v55 = state;
  if (v53) {
    goto LABEL_89;
  }
  state[0] = 0;
  xpc_object_t object = v37;
  if (!v37) {
    goto LABEL_90;
  }
LABEL_85:
  xpc_retain(v37);
LABEL_91:
  v70[0] = MEMORY[0x1E4F143A8];
  v70[1] = 1174405120;
  v70[2] = ___ZN10BootModule21handleBootFailed_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke_89;
  v70[3] = &__block_descriptor_tmp_93_1;
  v70[4] = a1;
  v70[5] = v20;
  long long v71 = v22;
  atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  long long v58 = _Block_copy(v70);
  unint64_t v72 = v58;
  Service::runCommand(a1, (uint64_t)state, &object, &v72);
  if (v58) {
    _Block_release(v58);
  }
  xpc_release(object);
  xpc_object_t object = 0;
  if ((state[23] & 0x80000000) != 0) {
    operator delete(*(void **)state);
  }
  if (v71) {
    std::__shared_weak_count::__release_weak(v71);
  }
  xpc_release(v37);
  if (v75) {
    std::__shared_weak_count::__release_weak(v75);
  }
  long long v59 = (std::__shared_weak_count *)*((void *)&v94 + 1);
  if (!*((void *)&v94 + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v94 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    std::__shared_weak_count::__release_weak(v22);
    CFTypeRef v60 = cf;
    if (!cf) {
      goto LABEL_103;
    }
    goto LABEL_102;
  }
  ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
  std::__shared_weak_count::__release_weak(v59);
  std::__shared_weak_count::__release_weak(v22);
  CFTypeRef v60 = cf;
  if (cf) {
LABEL_102:
  }
    CFRelease(v60);
LABEL_103:
  if ((v98[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v98);
    os_activity_t v61 = v99;
    if (!v99) {
      return;
    }
  }
  else
  {
    os_activity_t v61 = v99;
    if (!v99) {
      return;
    }
  }
  os_release(v61);
}

void sub_1C5B27DA4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN10BootModule21handleBootFailed_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (!v2) {
    return;
  }
  uint64_t v3 = (void *)a1[4];
  int v4 = std::__shared_weak_count::lock(v2);
  unsigned int v14 = v4;
  if (!v4) {
    return;
  }
  if (!a1[5])
  {
    uint64_t v10 = v4;
    if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_18:
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    return;
  }
  size_t v5 = (std::__shared_weak_count *)v3[23];
  v3[22] = 0;
  v3[23] = 0;
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  unint64_t v11 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, void *))(*v3 + 80))(&v11, v3);
  unint64_t v6 = v11;
  if (v11)
  {
    int v7 = (char *)operator new(0x38uLL);
    strcpy(v7, "com.apple.AppleBasebandManager.RadioNotReady.Bootup");
    uint64_t v8 = *(void *)(v6 + 104);
    std::string::__init_copy_ctor_external(&v15, v7, 0x33uLL);
    (*(void (**)(uint64_t, std::string *))(*(void *)v8 + 32))(v8, &v15);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
    operator delete(v7);
  }
  uint64_t v9 = (std::__shared_weak_count *)v12;
  if (v12 && !atomic_fetch_add((atomic_ullong *volatile)(v12 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_18;
  }
}

void sub_1C5B2826C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  operator delete(v19);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_1C5B282B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule21handleBootFailed_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke_89(void *a1, int a2, xpc_object_t *a3)
{
  int v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    int v7 = (void *)a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = a1[5];
      if (v10)
      {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v11 = *a3;
        if (*a3)
        {
          xpc_retain(*a3);
          unint64_t v12 = (std::__shared_weak_count *)v7[16];
          if (!v12) {
LABEL_17:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v11 = xpc_null_create();
          unint64_t v12 = (std::__shared_weak_count *)v7[16];
          if (!v12) {
            goto LABEL_17;
          }
        }
        uint64_t v13 = v7[15];
        unsigned int v14 = std::__shared_weak_count::lock(v12);
        if (!v14) {
          goto LABEL_17;
        }
        std::string v15 = v14;
        uint64_t v16 = operator new(0x28uLL);
        void *v16 = v7;
        v16[1] = v10;
        v16[2] = v9;
        *((_DWORD *)v16 + 6) = a2;
        v16[4] = v11;
        xpc_object_t v17 = xpc_null_create();
        CFAllocatorRef v18 = v7[17];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v19 = operator new(0x18uLL);
        *xpc_object_t v19 = v16;
        v19[1] = v13;
        void v19[2] = v15;
        dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedIZZNS3_21handleBootFailed_syncENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEUb4_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNS6_10unique_ptrISE_NS6_14default_deleteISE_EEEEENUlPvE_8__invokeESN_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void BootModule::handleReset_sync(uint64_t a1, uint64_t a2, void **a3)
{
  if ((*(char *)(a2 + 71) & 0x80000000) == 0)
  {
    std::string v53 = *(std::string *)(a2 + 48);
    unint64_t v6 = (void **)(a1 + 152);
    if ((*(char *)(a1 + 175) & 0x80000000) == 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  unint64_t v6 = (void **)(a1 + 152);
  if (*(char *)(a1 + 175) < 0) {
LABEL_3:
  }
    operator delete(*v6);
LABEL_4:
  *(std::string *)unint64_t v6 = v53;
  xpc_object_t v52 = 0;
  uint64_t v7 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable) {
    xpc_object_t v52 = Mutable;
  }
  else {
    CFMutableDictionaryRef Mutable = v52;
  }
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x1E4F4C688], (const __CFString **)*MEMORY[0x1E4F4CCD8], v7, v9);
  ResetInfo::addToDict(a2, &v52, v10, v11, v12);
  unint64_t v50 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v51 = 0xAAAAAAAAAAAAAAAALL;
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  unint64_t v13 = off_1EBBDC878;
  if (!off_1EBBDC878)
  {
    ABMServer::create_default_global(&v53);
    long long v14 = *(_OWORD *)&v53.__r_.__value_.__l.__data_;
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = 0uLL;
    std::string v15 = (std::__shared_weak_count *)*(&off_1EBBDC878 + 1);
    off_1EBBDC878 = v14;
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    size_t size = (std::__shared_weak_count *)v53.__r_.__value_.__l.__size_;
    if (v53.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v53.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
    unint64_t v13 = off_1EBBDC878;
  }
  unint64_t v50 = v13;
  unint64_t v51 = *(&off_1EBBDC878 + 1);
  if (*(&off_1EBBDC878 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDC878 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  xpc_object_t v17 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v17 || (uint64_t v18 = *(void *)(a1 + 120), (v19 = std::__shared_weak_count::lock(v17)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v20 = v19;
  atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v20);
  }
  xpc_object_t v21 = (uint64_t *)v50;
  xpc_object_t v22 = (const void *)*MEMORY[0x1E4F4CEF8];
  size_t v23 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
  if (v23 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  long long v24 = (void *)v23;
  if (v23 >= 0x17)
  {
    uint64_t v27 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17) {
      uint64_t v27 = v23 | 7;
    }
    uint64_t v28 = v27 + 1;
    xpc_object_t v25 = (void **)operator new(v27 + 1);
    __dst[1] = v24;
    unint64_t v49 = v28 | 0x8000000000000000;
    __dst[0] = v25;
LABEL_31:
    memmove(v25, v22, (size_t)v24);
    *((unsigned char *)v24 + (void)v25) = 0;
    uint64_t v26 = v52;
    if (!v52) {
      goto LABEL_34;
    }
    goto LABEL_32;
  }
  HIBYTE(v49) = v23;
  xpc_object_t v25 = __dst;
  if (v23) {
    goto LABEL_31;
  }
  LOBYTE(__dst[0]) = 0;
  uint64_t v26 = v52;
  if (!v52) {
    goto LABEL_34;
  }
LABEL_32:
  CFTypeID v29 = CFGetTypeID(v26);
  if (v29 == CFDictionaryGetTypeID())
  {
    xpc_object_t v47 = v26;
    CFRetain(v26);
    goto LABEL_35;
  }
LABEL_34:
  uint64_t v26 = 0;
  xpc_object_t v47 = 0;
LABEL_35:
  v36[0] = MEMORY[0x1E4F143A8];
  v36[1] = 1174405120;
  v36[2] = ___ZN10BootModule16handleReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke;
  v36[3] = &__block_descriptor_tmp_96_3;
  v36[4] = a1;
  v36[5] = v18;
  xpc_object_t v37 = v20;
  atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  ResetInfo::ResetInfo(&v38, (const ResetInfo *)a2);
  uint64_t v30 = *a3;
  if (*a3) {
    uint64_t v30 = _Block_copy(v30);
  }
  aBlocunint64_t k = v30;
  CFTypeRef v31 = _Block_copy(v36);
  uint64_t v46 = v31;
  ABMServer::broadcast(v21, (uint64_t)__dst, (const void **)&v47, &v46);
  if (v31) {
    _Block_release(v31);
  }
  if (v26) {
    CFRelease(v26);
  }
  if (SHIBYTE(v49) < 0)
  {
    operator delete(__dst[0]);
    uint64_t v32 = aBlock;
    if (!aBlock) {
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  uint64_t v32 = aBlock;
  if (aBlock) {
LABEL_45:
  }
    _Block_release(v32);
LABEL_46:
  if (v44 < 0)
  {
    operator delete(__p);
    if ((v42 & 0x80000000) == 0)
    {
LABEL_48:
      if ((v40 & 0x80000000) == 0) {
        goto LABEL_49;
      }
      goto LABEL_59;
    }
  }
  else if ((v42 & 0x80000000) == 0)
  {
    goto LABEL_48;
  }
  operator delete(v41);
  if ((v40 & 0x80000000) == 0)
  {
LABEL_49:
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_50;
    }
LABEL_60:
    operator delete(v38.__r_.__value_.__l.__data_);
    uint64_t v33 = v37;
    if (!v37) {
      goto LABEL_52;
    }
    goto LABEL_51;
  }
LABEL_59:
  operator delete(v39);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_60;
  }
LABEL_50:
  uint64_t v33 = v37;
  if (v37) {
LABEL_51:
  }
    std::__shared_weak_count::__release_weak(v33);
LABEL_52:
  std::__shared_weak_count::__release_weak(v20);
  CFTypeID v34 = (std::__shared_weak_count *)v51;
  if (!v51 || atomic_fetch_add((atomic_ullong *volatile)(v51 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    size_t v35 = v52;
    if (!v52) {
      return;
    }
    goto LABEL_55;
  }
  ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
  std::__shared_weak_count::__release_weak(v34);
  size_t v35 = v52;
  if (v52) {
LABEL_55:
  }
    CFRelease(v35);
}

void sub_1C5B2899C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *aBlock)
{
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v30 - 120));
  _Unwind_Resume(a1);
}

void ___ZN10BootModule16handleReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2) {
    return;
  }
  uint64_t v3 = *(void **)(a1 + 32);
  int v4 = std::__shared_weak_count::lock(v2);
  size_t v23 = v4;
  if (!v4) {
    return;
  }
  size_t v5 = v4;
  if (!*(void *)(a1 + 40)) {
    goto LABEL_27;
  }
  if (*(char *)(a1 + 79) < 0) {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)(a1 + 56), *(void *)(a1 + 64));
  }
  else {
    std::string v21 = *(std::string *)(a1 + 56);
  }
  int v6 = SHIBYTE(v21.__r_.__value_.__r.__words[2]);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v21.__r_.__value_.__l.__size_;
  }
  if (size == strlen((const char *)*MEMORY[0x1E4F4C6F0]))
  {
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v8 = &v21;
    }
    else {
      uint64_t v8 = (std::string *)v21.__r_.__value_.__r.__words[0];
    }
    BOOL v9 = memcmp(v8, (const void *)*MEMORY[0x1E4F4C6F0], size) == 0;
    if ((v6 & 0x80000000) == 0)
    {
LABEL_15:
      uint64_t v10 = v3[11];
      BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      if (v9) {
        goto LABEL_16;
      }
LABEL_32:
      if (v11)
      {
        LOWORD(v21.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_DEFAULT, "#I Request to perform hard reset", (uint8_t *)&v21, 2u);
      }
      ResetInfo::ResetInfo(&v16, (const ResetInfo *)(a1 + 56));
      long long v14 = *(void **)(a1 + 168);
      if (v14) {
        long long v14 = _Block_copy(v14);
      }
      std::string v15 = v14;
      BootModule::hardReset_sync((uint64_t)v3, (uint64_t)&v16, (uint64_t *)&v15);
      if (v15) {
        _Block_release(v15);
      }
      unint64_t v13 = &v16;
      if (v17 < 0) {
        goto LABEL_23;
      }
      goto LABEL_24;
    }
  }
  else
  {
    BOOL v9 = 0;
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_15;
    }
  }
  operator delete(v21.__r_.__value_.__l.__data_);
  uint64_t v10 = v3[11];
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
  if (!v9) {
    goto LABEL_32;
  }
LABEL_16:
  if (v11)
  {
    LOWORD(v21.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_DEFAULT, "#I Request to perform soft reset", (uint8_t *)&v21, 2u);
  }
  ResetInfo::ResetInfo(&v19, (const ResetInfo *)(a1 + 56));
  CFAllocatorRef v12 = *(void **)(a1 + 168);
  if (v12) {
    CFAllocatorRef v12 = _Block_copy(v12);
  }
  aBlocunint64_t k = v12;
  (*(void (**)(void *, std::string *, void **))(*v3 + 104))(v3, &v19, &aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  unint64_t v13 = &v19;
  if (v20 < 0) {
LABEL_23:
  }
    operator delete((void *)v13[3].__r_.__value_.__r.__words[2]);
LABEL_24:
  if ((SHIBYTE(v13[2].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v13[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_26;
    }
LABEL_41:
    operator delete(v13[1].__r_.__value_.__l.__data_);
    if ((SHIBYTE(v13->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_27:
      if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        return;
      }
      goto LABEL_28;
    }
    goto LABEL_42;
  }
  operator delete(v13[2].__r_.__value_.__l.__data_);
  if (SHIBYTE(v13[1].__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_41;
  }
LABEL_26:
  if ((SHIBYTE(v13->__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_27;
  }
LABEL_42:
  operator delete(v13->__r_.__value_.__l.__data_);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_28:
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1C5B28D60(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1 - 80);
  _Unwind_Resume(a1);
}

void sub_1C5B28D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, void *a10)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  ResetInfo::~ResetInfo(&a10);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v10 - 80);
  _Unwind_Resume(a1);
}

void sub_1C5B28DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *aBlock,void *a25)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  ResetInfo::~ResetInfo(&a25);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v25 - 80);
  _Unwind_Resume(a1);
}

void sub_1C5B28DCC(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1 - 80);
  _Unwind_Resume(a1);
}

void BootModule::hardReset_sync(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v47 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v48 = 0xAAAAAAAAAAAAAAAALL;
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  unint64_t v6 = off_1EBBDC878;
  if (!off_1EBBDC878)
  {
    ABMServer::create_default_global(&v46);
    long long v7 = *(_OWORD *)&v46.__r_.__value_.__l.__data_;
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = 0uLL;
    uint64_t v8 = (std::__shared_weak_count *)*(&off_1EBBDC878 + 1);
    off_1EBBDC878 = v7;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    size_t size = (std::__shared_weak_count *)v46.__r_.__value_.__l.__size_;
    if (v46.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v46.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
    unint64_t v6 = off_1EBBDC878;
  }
  unint64_t v47 = v6;
  unint64_t v48 = *(&off_1EBBDC878 + 1);
  if (*(&off_1EBBDC878 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDC878 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  *(unsigned char *)(a1 + 228) = 0;
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string v46 = *(std::string *)(a2 + 24);
  }
  int v10 = SHIBYTE(v46.__r_.__value_.__r.__words[2]);
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v11 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v11 = v46.__r_.__value_.__l.__size_;
  }
  if (v11 == strlen((const char *)*MEMORY[0x1E4F4D030]))
  {
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFAllocatorRef v12 = &v46;
    }
    else {
      CFAllocatorRef v12 = (std::string *)v46.__r_.__value_.__r.__words[0];
    }
    BOOL v13 = memcmp(v12, (const void *)*MEMORY[0x1E4F4D030], v11) == 0;
    if ((v10 & 0x80000000) == 0)
    {
LABEL_22:
      if (v13) {
        goto LABEL_23;
      }
LABEL_28:
      char v17 = *(void **)(a1 + 480);
      if (!v17) {
        goto LABEL_31;
      }
      std::string v16 = (void (**)(void))(*v17 + 64);
      goto LABEL_30;
    }
  }
  else
  {
    BOOL v13 = 0;
    if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
  }
  operator delete(v46.__r_.__value_.__l.__data_);
  if (!v13) {
    goto LABEL_28;
  }
LABEL_23:
  long long v14 = *(NSObject **)(a1 + 88);
  if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    std::string v15 = *(void **)(a1 + 480);
    if (!v15) {
      goto LABEL_31;
    }
    goto LABEL_25;
  }
  LOWORD(v46.__r_.__value_.__l.__data_) = 0;
  _os_log_error_impl(&dword_1C59C6000, v14, OS_LOG_TYPE_ERROR, "Falling back to baseband powercycle as bootup failed", (uint8_t *)&v46, 2u);
  std::string v15 = *(void **)(a1 + 480);
  if (v15)
  {
LABEL_25:
    std::string v16 = (void (**)(void))(*v15 + 72);
LABEL_30:
    (*v16)();
  }
LABEL_31:
  if (*a3)
  {
    LODWORD(v46.__r_.__value_.__l.__data_) = 0;
    dispatch::block<void({block_pointer})(int,std::string)>::operator()<int,char const(&)[1]>(a3, (unsigned int *)&v46, "");
  }
  v46.__r_.__value_.__r.__words[0] = 0;
  uint64_t v18 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  std::string v21 = (const void *)v46.__r_.__value_.__r.__words[0];
  if (Mutable)
  {
    v46.__r_.__value_.__r.__words[0] = (std::string::size_type)Mutable;
    if (v21)
    {
      CFRelease(v21);
      CFMutableDictionaryRef Mutable = (__CFDictionary *)v46.__r_.__value_.__r.__words[0];
    }
  }
  else
  {
    CFMutableDictionaryRef Mutable = (__CFDictionary *)v46.__r_.__value_.__r.__words[0];
  }
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x1E4F4C688], (const __CFString **)*MEMORY[0x1E4F4CBC8], v18, v20);
  ResetInfo::addToDict(a2, (__CFDictionary **)&v46, v22, v23, v24);
  uint64_t v25 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v25 || (uint64_t v26 = *(void *)(a1 + 120), (v27 = std::__shared_weak_count::lock(v25)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v28 = v27;
  atomic_fetch_add_explicit(&v27->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v28);
  }
  CFTypeID v29 = (uint64_t *)v47;
  uint64_t v30 = (const void *)*MEMORY[0x1E4F4CEF8];
  size_t v31 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
  if (v31 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v32 = (void *)v31;
  if (v31 >= 0x17)
  {
    uint64_t v35 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31 | 7) != 0x17) {
      uint64_t v35 = v31 | 7;
    }
    uint64_t v36 = v35 + 1;
    uint64_t v33 = (void **)operator new(v35 + 1);
    __dst[1] = v32;
    unint64_t v45 = v36 | 0x8000000000000000;
    __dst[0] = v33;
LABEL_49:
    memmove(v33, v30, (size_t)v32);
    *((unsigned char *)v32 + (void)v33) = 0;
    CFTypeID v34 = (const void *)v46.__r_.__value_.__r.__words[0];
    if (!v46.__r_.__value_.__r.__words[0]) {
      goto LABEL_52;
    }
    goto LABEL_50;
  }
  HIBYTE(v45) = v31;
  uint64_t v33 = __dst;
  if (v31) {
    goto LABEL_49;
  }
  LOBYTE(__dst[0]) = 0;
  CFTypeID v34 = (const void *)v46.__r_.__value_.__r.__words[0];
  if (!v46.__r_.__value_.__r.__words[0]) {
    goto LABEL_52;
  }
LABEL_50:
  CFTypeID v37 = CFGetTypeID(v34);
  if (v37 == CFDictionaryGetTypeID())
  {
    dispatch_object_t v43 = v34;
    CFRetain(v34);
    goto LABEL_53;
  }
LABEL_52:
  CFTypeID v34 = 0;
  dispatch_object_t v43 = 0;
LABEL_53:
  v40[0] = MEMORY[0x1E4F143A8];
  v40[1] = 1174405120;
  void v40[2] = ___ZN10BootModule14hardReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke;
  v40[3] = &__block_descriptor_tmp_100_2;
  v40[4] = a1;
  v40[5] = v26;
  size_t v41 = v28;
  atomic_fetch_add_explicit(&v28->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::string v38 = _Block_copy(v40);
  char v42 = v38;
  ABMServer::broadcast(v29, (uint64_t)__dst, &v43, &v42);
  if (v38) {
    _Block_release(v38);
  }
  if (v34) {
    CFRelease(v34);
  }
  if (SHIBYTE(v45) < 0) {
    operator delete(__dst[0]);
  }
  if (v41) {
    std::__shared_weak_count::__release_weak(v41);
  }
  std::__shared_weak_count::__release_weak(v28);
  if (v46.__r_.__value_.__r.__words[0]) {
    CFRelease(v46.__r_.__value_.__l.__data_);
  }
  long long v39 = (std::__shared_weak_count *)v48;
  if (v48)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v48 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
}

void sub_1C5B29364(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1 - 80);
  _Unwind_Resume(a1);
}

void sub_1C5B29378(_Unwind_Exception *a1)
{
}

void sub_1C5B293A4(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1 - 80);
  _Unwind_Resume(a1);
}

void sub_1C5B293B8(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1 - 80);
  _Unwind_Resume(a1);
}

void sub_1C5B293CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, const void *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,const void *a24)
{
  if (v25) {
    _Block_release(v25);
  }
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a17);
  if (a23 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_weak(v24);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a24);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v26 - 80);
  _Unwind_Resume(a1);
}

void sub_1C5B2943C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v13 - 80);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule14hardReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      size_t v5 = v4;
      if (a1[5])
      {
        v6[0] = MEMORY[0x1E4F143A8];
        v6[1] = 0x40000000;
        void v6[2] = ___ZN10BootModule14hardReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2;
        v6[3] = &__block_descriptor_tmp_97;
        void v6[4] = v3;
        ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v3 + 120), (uint64_t)v6);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void ___ZN10BootModule14hardReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2(uint64_t a1)
{
}

void BootModule::boot_sync(BootModule *this)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = *((_DWORD *)this + 114) - 2;
  if (v2 <= 6)
  {
    uint64_t v3 = *((void *)this + 11);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = off_1E651BF88[v2];
      LODWORD(v38) = 136315138;
      *(void *)((char *)&v38 + 4) = v4;
      _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Bootup request rejected as we are already in %s state", (uint8_t *)&v38, 0xCu);
    }
    return;
  }
  (*(void (**)(BootModule *, uint64_t))(*(void *)this + 96))(this, 2);
  ++*((_DWORD *)this + 56);
  uint64_t v6 = *((void *)this + 15);
  size_t v5 = (std::__shared_weak_count *)*((void *)this + 16);
  uint64_t v36 = v6;
  if (!v5 || (long long v7 = std::__shared_weak_count::lock(v5), (v37 = v7) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v8 = v7;
  uint64_t v32 = 0;
  uint64_t v33 = &v32;
  uint64_t v34 = 0x2000000000;
  char v35 = 0;
  BOOL v9 = dispatch_group_create();
  *(void *)&long long v38 = 0;
  *((void *)&v38 + 1) = &v38;
  uint64_t v39 = 0x4002000000;
  char v40 = __Block_byref_object_copy__5;
  size_t v41 = __Block_byref_object_dispose__5;
  char v42 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  if (capabilities::abs::shouldBoot((capabilities::abs *)v9))
  {
    global_queue = dispatch_get_global_queue(25, 0);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 1174405120;
    block[2] = ___ZN10BootModule9boot_syncEv_block_invoke;
    block[3] = &unk_1F210DBE8;
    void block[6] = this;
    block[7] = v6;
    size_t v31 = v8;
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    void block[4] = &v32;
    void block[5] = &v38;
    dispatch_group_async(v9, global_queue, block);
    size_t v11 = v31;
    if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    if (v9)
    {
      dispatch_retain(v9);
      dispatch_group_enter(v9);
    }
    CFAllocatorRef v12 = *((void *)this + 11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C59C6000, v12, OS_LOG_TYPE_DEFAULT, "#I Faking bootup", buf, 2u);
    }
    uint64_t v13 = *((void *)this + 22);
    long long v14 = (char *)operator new(0x20uLL);
    uint64_t v27 = v14;
    long long v28 = xmmword_1C5BC8B20;
    strcpy(v14, "Wait for Ready on Fake Boot");
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN10BootModule9boot_syncEv_block_invoke_133;
    aBlock[3] = &__block_descriptor_tmp_134;
    void aBlock[4] = this;
    void aBlock[5] = v6;
    CFAllocatorRef v24 = v8;
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    dispatch_group_t group = v9;
    if (v9)
    {
      dispatch_retain(v9);
      dispatch_group_enter(group);
    }
    std::string v15 = _Block_copy(aBlock);
    uint64_t v26 = v15;
    ResetDetection::add(v13, (uint64_t)&v27, 0, &v26, -1);
    if (v15) {
      _Block_release(v15);
    }
    operator delete(v14);
    *((unsigned char *)v33 + 24) = 1;
    if (group)
    {
      dispatch_group_leave(group);
      if (group) {
        dispatch_release(group);
      }
    }
    std::string v16 = v24;
    if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    if (v9)
    {
      dispatch_group_leave(v9);
      dispatch_release(v9);
    }
  }
  char v17 = *((void *)this + 17);
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 1174405120;
  v20[2] = ___ZN10BootModule9boot_syncEv_block_invoke_135;
  void v20[3] = &unk_1F210DCE0;
  void v20[6] = this;
  v20[7] = v36;
  std::string v21 = v37;
  if (v37) {
    atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v20[4] = &v32;
  dispatch_object_t object = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  v20[5] = &v38;
  dispatch_group_notify(v9, v17, v20);
  if (object) {
    dispatch_release(object);
  }
  uint64_t v18 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    _Block_object_dispose(&v38, 8);
    if ((SHIBYTE(v44) & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  _Block_object_dispose(&v38, 8);
  if (SHIBYTE(v44) < 0) {
LABEL_35:
  }
    operator delete(v42);
LABEL_36:
  if (v9) {
    dispatch_release(v9);
  }
  _Block_object_dispose(&v32, 8);
  std::string v19 = v37;
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
}

void sub_1C5B29B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,dispatch_group_t group)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void BootModule::checkFSSyncStatus_sync(uint64_t a1, void **a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v3 || (uint64_t v5 = *(void *)(a1 + 120), (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = (const void *)*MEMORY[0x1E4F4CDB8];
  size_t v9 = strlen((const char *)*MEMORY[0x1E4F4CDB8]);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v10 = (void *)v9;
  if (v9 >= 0x17)
  {
    uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v12 = v9 | 7;
    }
    uint64_t v13 = v12 + 1;
    size_t v11 = (void **)operator new(v12 + 1);
    __dst[1] = v10;
    unint64_t v24 = v13 | 0x8000000000000000;
    __dst[0] = v11;
    goto LABEL_12;
  }
  HIBYTE(v24) = v9;
  size_t v11 = __dst;
  if (v9) {
LABEL_12:
  }
    memmove(v11, v8, (size_t)v10);
  *((unsigned char *)v10 + (void)v11) = 0;
  xpc_object_t v14 = xpc_null_create();
  xpc_object_t v22 = v14;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule22checkFSSyncStatus_syncEN8dispatch5blockIU13block_pointerFvbbEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_101;
  void aBlock[4] = a1;
  std::string v15 = *a2;
  if (*a2) {
    std::string v15 = _Block_copy(v15);
  }
  uint64_t v18 = v15;
  uint64_t v19 = v5;
  CFAllocatorRef v20 = v7;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::string v16 = _Block_copy(aBlock);
  std::string v21 = v16;
  Service::runCommand(a1, (uint64_t)__dst, &v22, &v21);
  if (v16) {
    _Block_release(v16);
  }
  xpc_release(v14);
  xpc_object_t v22 = 0;
  if (SHIBYTE(v24) < 0) {
    operator delete(__dst[0]);
  }
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  if (v18) {
    _Block_release(v18);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1C5B29DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *aBlock, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (v26) {
    _Block_release(v26);
  }
  if (a17) {
    std::__shared_weak_count::__release_weak(a17);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(v27);
  if (a25 < 0)
  {
    operator delete(__p);
    std::__shared_weak_count::__release_weak(v25);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v25);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule22checkFSSyncStatus_syncEN8dispatch5blockIU13block_pointerFvbbEEE_block_invoke(void *a1, int a2, xpc_object_t *a3)
{
  int v4 = (std::__shared_weak_count *)a1[7];
  if (!v4) {
    return;
  }
  long long v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  size_t v9 = v8;
  if (a1[6])
  {
    xpc_object_t v10 = *a3;
    if (*a3)
    {
      xpc_retain(*a3);
      size_t v11 = (const void *)a1[5];
      if (v11) {
        goto LABEL_6;
      }
    }
    else
    {
      xpc_object_t v10 = xpc_null_create();
      size_t v11 = (const void *)a1[5];
      if (v11)
      {
LABEL_6:
        uint64_t v12 = _Block_copy(v11);
        uint64_t v13 = (std::__shared_weak_count *)v7[16];
        if (!v13) {
LABEL_25:
        }
          std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_10:
        uint64_t v14 = v7[15];
        std::string v15 = std::__shared_weak_count::lock(v13);
        if (!v15) {
          goto LABEL_25;
        }
        std::string v16 = v15;
        char v17 = operator new(0x18uLL);
        *(_DWORD *)char v17 = a2;
        v17[1] = v10;
        xpc_object_t v18 = xpc_null_create();
        if (v12) {
          uint64_t v19 = _Block_copy(v12);
        }
        else {
          uint64_t v19 = 0;
        }
        void v17[2] = v19;
        CFAllocatorRef v20 = v7[17];
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        std::string v21 = operator new(0x18uLL);
        void *v21 = v17;
        v21[1] = v14;
        v21[2] = v16;
        dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedIZZNS3_22checkFSSyncStatus_syncENS_5blockIU13block_pointerFvbbEEEEUb5_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISB_NSG_14default_deleteISB_EEEEENUlPvE_8__invokeESL_);
        if (atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          if (!v12) {
            goto LABEL_19;
          }
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
          if (!v12)
          {
LABEL_19:
            xpc_release(v18);
            goto LABEL_20;
          }
        }
        _Block_release(v12);
        goto LABEL_19;
      }
    }
    uint64_t v12 = 0;
    uint64_t v13 = (std::__shared_weak_count *)v7[16];
    if (!v13) {
      goto LABEL_25;
    }
    goto LABEL_10;
  }
LABEL_20:
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void *__copy_helper_block_e8_40c44_ZTSN8dispatch5blockIU13block_pointerFvbbEEE48c35_ZTSNSt3__18weak_ptrI10BootModuleEE(void *a1, void *a2)
{
  BOOL result = (void *)a2[5];
  if (result) {
    BOOL result = _Block_copy(result);
  }
  uint64_t v6 = a2[6];
  uint64_t v5 = a2[7];
  a1[5] = result;
  a1[6] = v6;
  a1[7] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c44_ZTSN8dispatch5blockIU13block_pointerFvbbEEE48c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t a1)
{
  unsigned int v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

void BootModule::softReset_sync(uint64_t a1, const ResetInfo *a2, void **a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDCD48, memory_order_acquire) & 1) == 0)
  {
    uint64_t v27 = (config::hw *)__cxa_guard_acquire(&qword_1EBBDCD48);
    if (v27)
    {
      int v28 = config::hw::watch(v27);
      uint64_t v29 = 12;
      if (v28) {
        uint64_t v29 = 18;
      }
      _MergedGlobals_4 = v29;
      __cxa_guard_release(&qword_1EBBDCD48);
    }
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v6 || (v7 = *(void *)(a1 + 120), (uint64_t v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v50 = 0;
    xpc_object_t v10 = std::__shared_weak_count::lock(v8);
    unint64_t v51 = v10;
    if (v10)
    {
LABEL_6:
      uint64_t v50 = v7;
      goto LABEL_9;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    uint64_t v50 = 0;
    xpc_object_t v10 = std::__shared_weak_count::lock(v9);
    unint64_t v51 = v10;
    if (v10) {
      goto LABEL_6;
    }
  }
  uint64_t v7 = 0;
LABEL_9:
  unint64_t v48 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v49 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_121_0;
  void aBlock[4] = a1;
  void aBlock[5] = v7;
  uint64_t v39 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  size_t v11 = *a3;
  if (*a3) {
    size_t v11 = _Block_copy(v11);
  }
  char v40 = v11;
  ResetInfo::ResetInfo(&v41, a2);
  uint64_t v12 = _Block_copy(aBlock);
  uint64_t v13 = *(NSObject **)(a1 + 136);
  if (v13) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
  }
  unint64_t v48 = v12;
  dispatch_object_t v49 = v13;
  unint64_t v36 = 0xAAAAAAAAAAAAAAAALL;
  CFTypeID v37 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v14 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v15 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v52, v14);
    long long v16 = v52;
    long long v52 = 0uLL;
    char v17 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v16;
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    xpc_object_t v18 = (std::__shared_weak_count *)*((void *)&v52 + 1);
    if (*((void *)&v52 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v52 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    uint64_t v15 = off_1EBBDCA08;
  }
  uint64_t v19 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  uint64_t v32 = v15;
  uint64_t v33 = *(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v15 + 16))(&v34, v15);
  unint64_t v36 = 0;
  CFTypeID v37 = 0;
  if (v35)
  {
    CFTypeID v37 = std::__shared_weak_count::lock(v35);
    if (v37) {
      unint64_t v36 = v34;
    }
    if (v35) {
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    unint64_t v20 = v36;
    if (!v36) {
      goto LABEL_43;
    }
  }
  else
  {
    unint64_t v20 = v36;
    if (!v36) {
      goto LABEL_43;
    }
  }
  uint64_t v21 = *(void *)(a1 + 480);
  if (v21) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 104))(v21, 5);
  }
  xpc_object_t v22 = v48;
  if (v48) {
    xpc_object_t v22 = _Block_copy(v48);
  }
  uint64_t v30 = v22;
  dispatch_object_t object = v49;
  if (v49) {
    dispatch_retain(v49);
  }
  (*(void (**)(unint64_t, uint64_t, void **))(*(void *)v20 + 56))(v20, 8000000000, &v30);
  if (object) {
    dispatch_release(object);
  }
  if (v30) {
    _Block_release(v30);
  }
LABEL_43:
  uint64_t v23 = v37;
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  if (v49) {
    dispatch_release(v49);
  }
  if (v48) {
    _Block_release(v48);
  }
  if (v47 < 0)
  {
    operator delete(__p);
    if ((v45 & 0x80000000) == 0)
    {
LABEL_52:
      if ((v43 & 0x80000000) == 0) {
        goto LABEL_53;
      }
      goto LABEL_58;
    }
  }
  else if ((v45 & 0x80000000) == 0)
  {
    goto LABEL_52;
  }
  operator delete(v44);
  if ((v43 & 0x80000000) == 0)
  {
LABEL_53:
    if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_59;
  }
LABEL_58:
  operator delete(v42);
  if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_54:
    unint64_t v24 = v40;
    if (!v40) {
      goto LABEL_61;
    }
    goto LABEL_60;
  }
LABEL_59:
  operator delete(v41.__r_.__value_.__l.__data_);
  unint64_t v24 = v40;
  if (v40) {
LABEL_60:
  }
    _Block_release(v24);
LABEL_61:
  uint64_t v25 = v39;
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  uint64_t v26 = v51;
  if (v51 && !atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  std::__shared_weak_count::__release_weak(v9);
}

void sub_1C5B2A67C(_Unwind_Exception *a1)
{
}

void sub_1C5B2A694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *aBlock)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v27 - 112);
  ResetInfo::~ResetInfo(v25);
  if (aBlock) {
    _Block_release(aBlock);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v26 + 40);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v27 - 96);
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke(void *a1, ctu::cf **a2)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[4];
  long long v66 = 0uLL;
  uint64_t v67 = 0;
  if (*a2) {
    int v4 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    int v4 = 0;
  }
  if (!v4)
  {
    uint64_t v7 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_DEFAULT, "#I Soft reset issued; waiting for reset detection",
        buf,
        2u);
    }
    uint64_t v8 = *(void *)(v3 + 176);
    size_t v9 = (char *)operator new(0x20uLL);
    std::string v46 = v9;
    long long v47 = xmmword_1C5BCB070;
    strcpy(v9, "Soft Reset Wait for Reset");
    v35[0] = MEMORY[0x1E4F143A8];
    v35[1] = 1174405120;
    v35[2] = ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_103;
    v35[3] = &__block_descriptor_tmp_117_0;
    uint64_t v11 = a1[5];
    xpc_object_t v10 = (std::__shared_weak_count *)a1[6];
    v35[4] = v3;
    v35[5] = v11;
    unint64_t v36 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = (void *)a1[7];
    if (v12) {
      uint64_t v12 = _Block_copy(v12);
    }
    aBlocunint64_t k = v12;
    ResetInfo::ResetInfo(&v38, (const ResetInfo *)(a1 + 8));
    uint64_t v13 = _Block_copy(v35);
    char v45 = v13;
    dispatch_time_t v14 = dispatch_time(0, 1000000000 * _MergedGlobals_4);
    ResetDetection::add(v8, (uint64_t)&v46, 1, &v45, v14);
    if (v13) {
      _Block_release(v13);
    }
    operator delete(v9);
    if (v44 < 0)
    {
      operator delete(__p);
      if ((v42 & 0x80000000) == 0)
      {
LABEL_20:
        if ((v40 & 0x80000000) == 0) {
          goto LABEL_21;
        }
        goto LABEL_26;
      }
    }
    else if ((v42 & 0x80000000) == 0)
    {
      goto LABEL_20;
    }
    operator delete(v41);
    if ((v40 & 0x80000000) == 0)
    {
LABEL_21:
      if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_22;
      }
      goto LABEL_27;
    }
LABEL_26:
    operator delete(v39);
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_22:
      uint64_t v15 = aBlock;
      if (!aBlock) {
        goto LABEL_29;
      }
      goto LABEL_28;
    }
LABEL_27:
    operator delete(v38.__r_.__value_.__l.__data_);
    uint64_t v15 = aBlock;
    if (!aBlock)
    {
LABEL_29:
      long long v16 = v36;
      if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
        if ((SHIBYTE(v67) & 0x80000000) == 0) {
          return;
        }
        goto LABEL_82;
      }
      goto LABEL_81;
    }
LABEL_28:
    _Block_release(v15);
    goto LABEL_29;
  }
  ctu::cf::show((uint64_t *)buf, *a2, a2);
  if (SHIBYTE(v67) < 0) {
    operator delete((void *)v66);
  }
  long long v66 = *(_OWORD *)buf;
  uint64_t v67 = v69;
  uint64_t v5 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    char v17 = &v66;
    if (v67 < 0) {
      char v17 = (long long *)v66;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v17;
    _os_log_error_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_ERROR, "Soft reset failed; falling back to hard reset: %{public}s",
      buf,
      0xCu);
    uint64_t v6 = a1[7];
    if ((SHIBYTE(v67) & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v6 = a1[7];
    if ((SHIBYTE(v67) & 0x80000000) == 0)
    {
LABEL_9:
      *(_OWORD *)long long buf = v66;
      *(void *)&long long v69 = v67;
      goto LABEL_37;
    }
  }
  std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v66, *((std::string::size_type *)&v66 + 1));
LABEL_37:
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(v6 + 16))(v6, 3760250880, buf);
  if (SBYTE7(v69) < 0)
  {
    operator delete(*(void **)buf);
    uint64_t v18 = v3 + 152;
    if ((long long *)(v3 + 152) == &v66) {
      goto LABEL_52;
    }
  }
  else
  {
    uint64_t v18 = v3 + 152;
    if ((long long *)(v3 + 152) == &v66) {
      goto LABEL_52;
    }
  }
  if (*(char *)(v3 + 175) < 0)
  {
    if (v67 >= 0) {
      uint64_t v19 = &v66;
    }
    else {
      uint64_t v19 = (long long *)v66;
    }
    if (v67 >= 0) {
      size_t v20 = HIBYTE(v67);
    }
    else {
      size_t v20 = *((void *)&v66 + 1);
    }
    std::string::__assign_no_alias<false>((void **)v18, v19, v20);
  }
  else if (v67 < 0)
  {
    std::string::__assign_no_alias<true>((void *)v18, (void *)v66, *((size_t *)&v66 + 1));
  }
  else
  {
    *(_OWORD *)uint64_t v18 = v66;
    *(void *)(v18 + 16) = v67;
  }
LABEL_52:
  uint64_t v21 = *(void *)(v3 + 480);
  if (v21) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 104))(v21, 7);
  }
  *(void *)&long long v22 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v73 = v22;
  long long v74 = v22;
  long long v71 = v22;
  long long v72 = v22;
  long long v69 = v22;
  long long v70 = v22;
  *(_OWORD *)long long buf = v22;
  uint64_t v23 = (const void *)*MEMORY[0x1E4F4C6E8];
  size_t v24 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
  if (v24 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v25 = v24;
  if (v24 >= 0x17)
  {
    uint64_t v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17) {
      uint64_t v27 = v24 | 7;
    }
    uint64_t v28 = v27 + 1;
    p_dst = (long long *)operator new(v27 + 1);
    *((void *)&__dst + 1) = v25;
    unint64_t v65 = v28 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_61;
  }
  HIBYTE(v65) = v24;
  p_dst = &__dst;
  if (v24) {
LABEL_61:
  }
    memmove(p_dst, v23, v25);
  *((unsigned char *)p_dst + v25) = 0;
  uint64_t v29 = (const void *)*MEMORY[0x1E4F4D038];
  size_t v30 = strlen((const char *)*MEMORY[0x1E4F4D038]);
  if (v30 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v31 = v30;
  if (v30 >= 0x17)
  {
    uint64_t v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17) {
      uint64_t v33 = v30 | 7;
    }
    uint64_t v34 = v33 + 1;
    uint64_t v32 = operator new(v33 + 1);
    *((void *)&v62 + 1) = v31;
    unint64_t v63 = v34 | 0x8000000000000000;
    *(void *)&long long v62 = v32;
    goto LABEL_69;
  }
  HIBYTE(v63) = v30;
  uint64_t v32 = &v62;
  if (v30) {
LABEL_69:
  }
    memmove(v32, v29, v31);
  *((unsigned char *)v32 + v31) = 0;
  Timestamp::Timestamp((Timestamp *)v58);
  Timestamp::asString((uint64_t)v58, 0, 9, v60);
  char v57 = 0;
  LOBYTE(v56) = 0;
  ResetInfo::ResetInfo((std::string *)buf, &__dst, &v62, (long long *)v18, (uint64_t)v60, 7, &v56);
  if ((v61 & 0x80000000) == 0)
  {
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v58, v59);
    if ((SHIBYTE(v63) & 0x80000000) == 0) {
      goto LABEL_72;
    }
LABEL_85:
    operator delete((void *)v62);
    if ((SHIBYTE(v65) & 0x80000000) == 0) {
      goto LABEL_73;
    }
    goto LABEL_86;
  }
  operator delete(v60[0]);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v58, v59);
  if (SHIBYTE(v63) < 0) {
    goto LABEL_85;
  }
LABEL_72:
  if ((SHIBYTE(v65) & 0x80000000) == 0) {
    goto LABEL_73;
  }
LABEL_86:
  operator delete((void *)__dst);
LABEL_73:
  ResetInfo::ResetInfo(&v49, (const ResetInfo *)buf);
  unint64_t v48 = 0;
  BootModule::handleReset_sync(v3, (uint64_t)&v49, &v48);
  if (v55 < 0)
  {
    operator delete(v54);
    if ((v53 & 0x80000000) == 0)
    {
LABEL_75:
      if ((v51 & 0x80000000) == 0) {
        goto LABEL_76;
      }
      goto LABEL_89;
    }
  }
  else if ((v53 & 0x80000000) == 0)
  {
    goto LABEL_75;
  }
  operator delete(v52);
  if ((v51 & 0x80000000) == 0)
  {
LABEL_76:
    if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_77;
    }
    goto LABEL_90;
  }
LABEL_89:
  operator delete(v50);
  if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_77:
    if ((SHIBYTE(v74) & 0x80000000) == 0) {
      goto LABEL_78;
    }
    goto LABEL_91;
  }
LABEL_90:
  operator delete(v49.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v74) & 0x80000000) == 0)
  {
LABEL_78:
    if ((SBYTE7(v72) & 0x80000000) == 0) {
      goto LABEL_79;
    }
    goto LABEL_92;
  }
LABEL_91:
  operator delete(*((void **)&v73 + 1));
  if ((SBYTE7(v72) & 0x80000000) == 0)
  {
LABEL_79:
    if ((SHIBYTE(v70) & 0x80000000) == 0) {
      goto LABEL_80;
    }
    goto LABEL_93;
  }
LABEL_92:
  operator delete((void *)v71);
  if (SHIBYTE(v70) < 0)
  {
LABEL_93:
    operator delete(*((void **)&v69 + 1));
    if (SBYTE7(v69) < 0) {
      goto LABEL_94;
    }
LABEL_81:
    if ((SHIBYTE(v67) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_82;
  }
LABEL_80:
  if ((SBYTE7(v69) & 0x80000000) == 0) {
    goto LABEL_81;
  }
LABEL_94:
  operator delete(*(void **)buf);
  if (SHIBYTE(v67) < 0) {
LABEL_82:
  }
    operator delete((void *)v66);
}

void sub_1C5B2AE54(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_103(void *a1, int a2)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[4];
  if (!a2)
  {
    uint64_t v7 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_DEFAULT, "#I Reset detection observed for soft reset", (uint8_t *)&buf, 2u);
    }
    usleep(0x249F0u);
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_104;
    aBlock[3] = &__block_descriptor_tmp_112_2;
    void aBlock[4] = v3;
    uint64_t v8 = (void *)a1[7];
    if (v8) {
      uint64_t v8 = _Block_copy(v8);
    }
    uint64_t v64 = v8;
    ResetInfo::ResetInfo(&v65, (const ResetInfo *)(a1 + 8));
    size_t v9 = (std::__shared_weak_count *)a1[6];
    uint64_t v72 = a1[5];
    long long v73 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    xpc_object_t v10 = _Block_copy(aBlock);
    long long v74 = v10;
    BootModule::checkFSSyncStatus_sync(v3, &v74);
    if (v10) {
      _Block_release(v10);
    }
    uint64_t v11 = v73;
    if (v73 && !atomic_fetch_add(&v73->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if ((v71 & 0x80000000) == 0)
      {
LABEL_22:
        if ((v69 & 0x80000000) == 0) {
          goto LABEL_23;
        }
        goto LABEL_45;
      }
    }
    else if ((v71 & 0x80000000) == 0)
    {
      goto LABEL_22;
    }
    operator delete(__p);
    if ((v69 & 0x80000000) == 0)
    {
LABEL_23:
      if ((v67 & 0x80000000) == 0) {
        goto LABEL_24;
      }
      goto LABEL_46;
    }
LABEL_45:
    operator delete(v68);
    if ((v67 & 0x80000000) == 0)
    {
LABEL_24:
      if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_25;
      }
      goto LABEL_47;
    }
LABEL_46:
    operator delete(v66);
    if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_25:
      uint64_t v12 = v64;
      if (!v64) {
        return;
      }
      goto LABEL_48;
    }
LABEL_47:
    operator delete(v65.__r_.__value_.__l.__data_);
    uint64_t v12 = v64;
    if (!v64) {
      return;
    }
LABEL_48:
    _Block_release(v12);
    return;
  }
  int v4 = (char *)operator new(0x38uLL);
  v62.__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
  *(_OWORD *)&v62.__r_.__value_.__r.__words[1] = xmmword_1C5BC8B10;
  strcpy(v4, "Soft reset failed; timeout waiting for reset detection");
  uint64_t v5 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v4;
    _os_log_error_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
  }
  if (TelephonyUtilIsInternalBuild())
  {
    uint64_t v6 = *(NSObject **)(v3 + 88);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  int IsCarrierBuild = TelephonyUtilIsCarrierBuild();
  uint64_t v6 = *(NSObject **)(v3 + 88);
  BOOL v14 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (IsCarrierBuild)
  {
    if (!v14)
    {
LABEL_7:
      if ((std::string *)(v3 + 152) != &v62)
      {
        if (*(char *)(v3 + 175) < 0)
        {
          if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v16 = &v62;
          }
          else {
            long long v16 = (std::string *)v62.__r_.__value_.__r.__words[0];
          }
          if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t size = HIBYTE(v62.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t size = v62.__r_.__value_.__l.__size_;
          }
          std::string::__assign_no_alias<false>((void **)(v3 + 152), v16, size);
        }
        else if ((*((unsigned char *)&v62.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>((void *)(v3 + 152), v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
        }
        else
        {
          *(std::string *)(v3 + 152) = v62;
        }
      }
      uint64_t v18 = a1[7];
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&buf, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
      }
      else
      {
        long long buf = *(_OWORD *)&v62.__r_.__value_.__l.__data_;
        *(void *)&long long v76 = *((void *)&v62.__r_.__value_.__l + 2);
      }
      (*(void (**)(uint64_t, uint64_t, long long *))(v18 + 16))(v18, 3760250880, &buf);
      if (SBYTE7(v76) < 0) {
        operator delete((void *)buf);
      }
      *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v80 = v19;
      long long v81 = v19;
      long long v78 = v19;
      long long v79 = v19;
      long long v76 = v19;
      long long v77 = v19;
      long long buf = v19;
      size_t v20 = (const void *)*MEMORY[0x1E4F4C6E8];
      size_t v21 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
      if (v21 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v22 = v21;
      if (v21 >= 0x17)
      {
        uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v21 | 7) != 0x17) {
          uint64_t v24 = v21 | 7;
        }
        uint64_t v25 = v24 + 1;
        p_dst = (long long *)operator new(v24 + 1);
        *((void *)&__dst + 1) = v22;
        unint64_t v61 = v25 | 0x8000000000000000;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v61) = v21;
        p_dst = &__dst;
        if (!v21)
        {
LABEL_63:
          *((unsigned char *)p_dst + v22) = 0;
          uint64_t v26 = (const void *)*MEMORY[0x1E4F4D190];
          size_t v27 = strlen((const char *)*MEMORY[0x1E4F4D190]);
          if (v27 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          size_t v28 = v27;
          if (v27 >= 0x17)
          {
            uint64_t v30 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v27 | 7) != 0x17) {
              uint64_t v30 = v27 | 7;
            }
            uint64_t v31 = v30 + 1;
            uint64_t v29 = operator new(v30 + 1);
            *((void *)&v58 + 1) = v28;
            unint64_t v59 = v31 | 0x8000000000000000;
            *(void *)&long long v58 = v29;
          }
          else
          {
            HIBYTE(v59) = v27;
            uint64_t v29 = &v58;
            if (!v27)
            {
LABEL_71:
              v29[v28] = 0;
              Timestamp::Timestamp((Timestamp *)v54);
              Timestamp::asString((uint64_t)v54, 0, 9, v56);
              char v53 = 0;
              LOBYTE(v52) = 0;
              ResetInfo::ResetInfo((std::string *)&buf, &__dst, &v58, (long long *)(v3 + 152), (uint64_t)v56, 7, &v52);
              if (v57 < 0)
              {
                operator delete(v56[0]);
                std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v54, v55);
                if ((SHIBYTE(v59) & 0x80000000) == 0)
                {
LABEL_73:
                  if ((SHIBYTE(v61) & 0x80000000) == 0) {
                    goto LABEL_74;
                  }
LABEL_85:
                  operator delete((void *)__dst);
LABEL_74:
                  ResetInfo::ResetInfo(&v45, (const ResetInfo *)&buf);
                  char v44 = 0;
                  BootModule::handleReset_sync(v3, (uint64_t)&v45, &v44);
                  if (v51 < 0)
                  {
                    operator delete(v50);
                    if ((v49 & 0x80000000) == 0)
                    {
LABEL_76:
                      if ((v47 & 0x80000000) == 0) {
                        goto LABEL_77;
                      }
                      goto LABEL_88;
                    }
                  }
                  else if ((v49 & 0x80000000) == 0)
                  {
                    goto LABEL_76;
                  }
                  operator delete(v48);
                  if ((v47 & 0x80000000) == 0)
                  {
LABEL_77:
                    if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                      goto LABEL_78;
                    }
                    goto LABEL_89;
                  }
LABEL_88:
                  operator delete(v46);
                  if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_78:
                    if ((SHIBYTE(v81) & 0x80000000) == 0) {
                      goto LABEL_79;
                    }
                    goto LABEL_90;
                  }
LABEL_89:
                  operator delete(v45.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(v81) & 0x80000000) == 0)
                  {
LABEL_79:
                    if ((SBYTE7(v79) & 0x80000000) == 0) {
                      goto LABEL_80;
                    }
                    goto LABEL_91;
                  }
LABEL_90:
                  operator delete(*((void **)&v80 + 1));
                  if ((SBYTE7(v79) & 0x80000000) == 0)
                  {
LABEL_80:
                    if ((SHIBYTE(v77) & 0x80000000) == 0) {
                      goto LABEL_81;
                    }
                    goto LABEL_92;
                  }
LABEL_91:
                  operator delete((void *)v78);
                  if ((SHIBYTE(v77) & 0x80000000) == 0)
                  {
LABEL_81:
                    if ((SBYTE7(v76) & 0x80000000) == 0) {
                      goto LABEL_110;
                    }
LABEL_93:
                    operator delete((void *)buf);
                    goto LABEL_110;
                  }
LABEL_92:
                  operator delete(*((void **)&v76 + 1));
                  if ((SBYTE7(v76) & 0x80000000) == 0) {
                    goto LABEL_110;
                  }
                  goto LABEL_93;
                }
              }
              else
              {
                std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v54, v55);
                if ((SHIBYTE(v59) & 0x80000000) == 0) {
                  goto LABEL_73;
                }
              }
              operator delete((void *)v58);
              if ((SHIBYTE(v61) & 0x80000000) == 0) {
                goto LABEL_74;
              }
              goto LABEL_85;
            }
          }
          memmove(v29, v26, v28);
          goto LABEL_71;
        }
      }
      memmove(p_dst, v20, v22);
      goto LABEL_63;
    }
LABEL_6:
    LOWORD(buf) = 0;
    _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#I Dumping logs", (uint8_t *)&buf, 2u);
    goto LABEL_7;
  }
  if (v14)
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_1C59C6000, v6, OS_LOG_TYPE_DEFAULT, "#I Falling back to hard reset", (uint8_t *)&buf, 2u);
  }
  ResetInfo::ResetInfo(&v37, (const ResetInfo *)(a1 + 8));
  v33[0] = MEMORY[0x1E4F143A8];
  v33[1] = 1174405120;
  v33[2] = ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_114;
  v33[3] = &__block_descriptor_tmp_115;
  uint64_t v15 = (void *)a1[7];
  if (v15) {
    uint64_t v15 = _Block_copy(v15);
  }
  uint64_t v34 = v15;
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v35, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
  }
  else {
    std::string v35 = v62;
  }
  unint64_t v36 = _Block_copy(v33);
  BootModule::hardReset_sync(v3, (uint64_t)&v37, (uint64_t *)&v36);
  if (v36) {
    _Block_release(v36);
  }
  if (v43 < 0)
  {
    operator delete(v42);
    if ((v41 & 0x80000000) == 0)
    {
LABEL_99:
      if ((v39 & 0x80000000) == 0) {
        goto LABEL_100;
      }
      goto LABEL_106;
    }
  }
  else if ((v41 & 0x80000000) == 0)
  {
    goto LABEL_99;
  }
  operator delete(v40);
  if ((v39 & 0x80000000) == 0)
  {
LABEL_100:
    if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_101;
    }
    goto LABEL_107;
  }
LABEL_106:
  operator delete(v38);
  if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_101:
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_102;
    }
LABEL_108:
    operator delete(v35.__r_.__value_.__l.__data_);
    uint64_t v32 = v34;
    if (!v34) {
      goto LABEL_110;
    }
    goto LABEL_109;
  }
LABEL_107:
  operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_108;
  }
LABEL_102:
  uint64_t v32 = v34;
  if (v34) {
LABEL_109:
  }
    _Block_release(v32);
LABEL_110:
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
}

void sub_1C5B2B778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, void *a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *__p)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  ResetInfo::~ResetInfo(&a19);
  if (a68 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_104(void *a1, int a2, int a3)
{
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1[4];
  uint64_t v7 = *(NSObject **)(v6 + 88);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = a2;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = a3;
    _os_log_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_DEFAULT, "#I Check FS Sync in progress: %d and sync not started: %d", buf, 0xEu);
  }
  if ((a2 & 1) != 0 || a3)
  {
    if (a2) {
      uint64_t v13 = "Baseband shutdown during baseband filesystem sync";
    }
    else {
      uint64_t v13 = "Baseband never started filesystem sync";
    }
    v79.__r_.__value_.__r.__words[2] = 0x13AAAAAA00AAAAAALL;
    *(_OWORD *)&v79.__r_.__value_.__l.__data_ = *(_OWORD *)"Soft reset failed: ";
    *(_DWORD *)((char *)&v79.__r_.__value_.__r.__words[1] + 7) = 540697701;
    if (a2) {
      std::string::size_type v14 = 49;
    }
    else {
      std::string::size_type v14 = 38;
    }
    std::string::append(&v79, v13, v14);
    if ((std::string *)(v6 + 152) != &v79)
    {
      if (*(char *)(v6 + 175) < 0)
      {
        if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v36 = &v79;
        }
        else {
          unint64_t v36 = (std::string *)v79.__r_.__value_.__r.__words[0];
        }
        if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t size = HIBYTE(v79.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t size = v79.__r_.__value_.__l.__size_;
        }
        std::string::__assign_no_alias<false>((void **)(v6 + 152), v36, size);
      }
      else if ((*((unsigned char *)&v79.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>((void *)(v6 + 152), v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
      }
      else
      {
        *(std::string *)(v6 + 152) = v79;
      }
    }
    std::string v38 = *(NSObject **)(v6 + 88);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      char v40 = &v79;
      if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        char v40 = (std::string *)v79.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v40;
      _os_log_error_impl(&dword_1C59C6000, v38, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
      uint64_t v39 = a1[5];
      if ((*((unsigned char *)&v79.__r_.__value_.__s + 23) & 0x80) == 0) {
        goto LABEL_71;
      }
    }
    else
    {
      uint64_t v39 = a1[5];
      if ((*((unsigned char *)&v79.__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_71:
        *(_OWORD *)long long buf = *(_OWORD *)&v79.__r_.__value_.__l.__data_;
        *(void *)&long long v81 = *((void *)&v79.__r_.__value_.__l + 2);
        goto LABEL_76;
      }
    }
    std::string::__init_copy_ctor_external((std::string *)buf, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
LABEL_76:
    (*(void (**)(uint64_t, uint64_t, uint8_t *))(v39 + 16))(v39, 3760250880, buf);
    if (SBYTE7(v81) < 0)
    {
      operator delete(*(void **)buf);
      uint64_t v41 = *(void *)(v6 + 480);
      if (!v41) {
        goto LABEL_81;
      }
    }
    else
    {
      uint64_t v41 = *(void *)(v6 + 480);
      if (!v41)
      {
LABEL_81:
        *(void *)&long long v42 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v42 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v85 = v42;
        long long v86 = v42;
        long long v83 = v42;
        long long v84 = v42;
        long long v81 = v42;
        long long v82 = v42;
        *(_OWORD *)long long buf = v42;
        char v43 = (const void *)*MEMORY[0x1E4F4C6E8];
        size_t v44 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
        if (v44 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v45 = v44;
        if (v44 >= 0x17)
        {
          uint64_t v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v44 | 7) != 0x17) {
            uint64_t v47 = v44 | 7;
          }
          uint64_t v48 = v47 + 1;
          std::string v46 = (long long *)operator new(v47 + 1);
          *((void *)&v77 + 1) = v45;
          unint64_t v78 = v48 | 0x8000000000000000;
          *(void *)&long long v77 = v46;
        }
        else
        {
          HIBYTE(v78) = v44;
          std::string v46 = &v77;
          if (!v44)
          {
LABEL_89:
            *((unsigned char *)v46 + v45) = 0;
            char v49 = (const void *)*MEMORY[0x1E4F4D240];
            size_t v50 = strlen((const char *)*MEMORY[0x1E4F4D240]);
            if (v50 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            size_t v51 = v50;
            if (v50 >= 0x17)
            {
              uint64_t v53 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v50 | 7) != 0x17) {
                uint64_t v53 = v50 | 7;
              }
              uint64_t v54 = v53 + 1;
              long long v52 = operator new(v53 + 1);
              *((void *)&v75 + 1) = v51;
              unint64_t v76 = v54 | 0x8000000000000000;
              *(void *)&long long v75 = v52;
            }
            else
            {
              HIBYTE(v76) = v50;
              long long v52 = &v75;
              if (!v50)
              {
LABEL_97:
                v52[v51] = 0;
                Timestamp::Timestamp((Timestamp *)v71);
                Timestamp::asString((uint64_t)v71, 0, 9, __p);
                char v70 = 0;
                LOBYTE(v69) = 0;
                ResetInfo::ResetInfo((std::string *)buf, &v77, &v75, (long long *)(v6 + 152), (uint64_t)__p, 7, &v69);
                if (v74 < 0)
                {
                  operator delete(__p[0]);
                  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v71, v72);
                  if ((SHIBYTE(v76) & 0x80000000) == 0)
                  {
LABEL_99:
                    if ((SHIBYTE(v78) & 0x80000000) == 0) {
                      goto LABEL_100;
                    }
LABEL_112:
                    operator delete((void *)v77);
LABEL_100:
                    ResetInfo::ResetInfo(&v62, (const ResetInfo *)buf);
                    unint64_t v61 = 0;
                    BootModule::handleReset_sync(v6, (uint64_t)&v62, &v61);
                    if (v68 < 0)
                    {
                      operator delete(v67);
                      if ((v66 & 0x80000000) == 0)
                      {
LABEL_102:
                        if ((v64 & 0x80000000) == 0) {
                          goto LABEL_103;
                        }
                        goto LABEL_115;
                      }
                    }
                    else if ((v66 & 0x80000000) == 0)
                    {
                      goto LABEL_102;
                    }
                    operator delete(v65);
                    if ((v64 & 0x80000000) == 0)
                    {
LABEL_103:
                      if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                        goto LABEL_104;
                      }
                      goto LABEL_116;
                    }
LABEL_115:
                    operator delete(v63);
                    if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_104:
                      if ((SHIBYTE(v86) & 0x80000000) == 0) {
                        goto LABEL_105;
                      }
                      goto LABEL_117;
                    }
LABEL_116:
                    operator delete(v62.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v86) & 0x80000000) == 0)
                    {
LABEL_105:
                      if ((SBYTE7(v84) & 0x80000000) == 0) {
                        goto LABEL_106;
                      }
                      goto LABEL_118;
                    }
LABEL_117:
                    operator delete(*((void **)&v85 + 1));
                    if ((SBYTE7(v84) & 0x80000000) == 0)
                    {
LABEL_106:
                      if ((SHIBYTE(v82) & 0x80000000) == 0) {
                        goto LABEL_107;
                      }
                      goto LABEL_119;
                    }
LABEL_118:
                    operator delete((void *)v83);
                    if ((SHIBYTE(v82) & 0x80000000) == 0)
                    {
LABEL_107:
                      if ((SBYTE7(v81) & 0x80000000) == 0) {
                        goto LABEL_108;
                      }
                      goto LABEL_120;
                    }
LABEL_119:
                    operator delete(*((void **)&v81 + 1));
                    if ((SBYTE7(v81) & 0x80000000) == 0)
                    {
LABEL_108:
                      if ((SHIBYTE(v79.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                        return;
                      }
                      goto LABEL_121;
                    }
LABEL_120:
                    operator delete(*(void **)buf);
                    if ((SHIBYTE(v79.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                      return;
                    }
LABEL_121:
                    operator delete(v79.__r_.__value_.__l.__data_);
                    return;
                  }
                }
                else
                {
                  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v71, v72);
                  if ((SHIBYTE(v76) & 0x80000000) == 0) {
                    goto LABEL_99;
                  }
                }
                operator delete((void *)v75);
                if ((SHIBYTE(v78) & 0x80000000) == 0) {
                  goto LABEL_100;
                }
                goto LABEL_112;
              }
            }
            memmove(v52, v49, v51);
            goto LABEL_97;
          }
        }
        memmove(v46, v43, v45);
        goto LABEL_89;
      }
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v41 + 104))(v41, 7);
    goto LABEL_81;
  }
  uint64_t v8 = *(void *)(v6 + 480);
  if (v8)
  {
    size_t v9 = (capabilities::ipc *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 104))(v8, 6);
    if (capabilities::ipc::supportsPCI(v9)) {
      (*(void (**)(void))(**(void **)(v6 + 480) + 64))(*(void *)(v6 + 480));
    }
  }
  *(_DWORD *)long long buf = 0;
  dispatch::block<void({block_pointer})(int,std::string)>::operator()<int,char const(&)[1]>(a1 + 5, (unsigned int *)buf, "");
  *(void *)&long long v77 = 0;
  uint64_t v10 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable) {
    *(void *)&long long v77 = Mutable;
  }
  else {
    CFMutableDictionaryRef Mutable = (__CFDictionary *)v77;
  }
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x1E4F4C688], (const __CFString **)*MEMORY[0x1E4F4CBC8], v10, v12);
  ResetInfo::addToDict((uint64_t)(a1 + 6), (__CFDictionary **)&v77, v15, v16, v17);
  v79.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  v79.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  uint64_t v18 = (uint64_t *)off_1EBBDC878;
  if (!off_1EBBDC878)
  {
    ABMServer::create_default_global(buf);
    long long v19 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    size_t v20 = (std::__shared_weak_count *)*(&off_1EBBDC878 + 1);
    off_1EBBDC878 = v19;
    if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    size_t v21 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
    uint64_t v18 = (uint64_t *)off_1EBBDC878;
  }
  v79.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
  v79.__r_.__value_.__l.__size_ = *(&off_1EBBDC878 + 1);
  if (*(&off_1EBBDC878 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDC878 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  size_t v22 = (const void *)*MEMORY[0x1E4F4CEF8];
  size_t v23 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
  if (v23 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v24 = (void *)v23;
  if (v23 >= 0x17)
  {
    uint64_t v27 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17) {
      uint64_t v27 = v23 | 7;
    }
    uint64_t v28 = v27 + 1;
    uint64_t v25 = (void **)operator new(v27 + 1);
    __dst[1] = v24;
    unint64_t v60 = v28 | 0x8000000000000000;
    __dst[0] = v25;
LABEL_39:
    memmove(v25, v22, (size_t)v24);
    *((unsigned char *)v24 + (void)v25) = 0;
    uint64_t v26 = (const void *)v77;
    if (!(void)v77) {
      goto LABEL_42;
    }
    goto LABEL_40;
  }
  HIBYTE(v60) = v23;
  uint64_t v25 = __dst;
  if (v23) {
    goto LABEL_39;
  }
  LOBYTE(__dst[0]) = 0;
  uint64_t v26 = (const void *)v77;
  if (!(void)v77) {
    goto LABEL_42;
  }
LABEL_40:
  CFTypeID v29 = CFGetTypeID(v26);
  if (v29 == CFDictionaryGetTypeID())
  {
    long long v58 = v26;
    CFRetain(v26);
    goto LABEL_43;
  }
LABEL_42:
  uint64_t v26 = 0;
  long long v58 = 0;
LABEL_43:
  v55[0] = MEMORY[0x1E4F143A8];
  v55[1] = 1174405120;
  v55[2] = ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_108;
  v55[3] = &__block_descriptor_tmp_110;
  uint64_t v31 = a1[20];
  uint64_t v30 = (std::__shared_weak_count *)a1[21];
  v55[4] = v6;
  v55[5] = v31;
  long long v56 = v30;
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v32 = _Block_copy(v55);
  char v57 = v32;
  ABMServer::broadcast(v18, (uint64_t)__dst, &v58, &v57);
  if (v32) {
    _Block_release(v32);
  }
  if (v26) {
    CFRelease(v26);
  }
  if (SHIBYTE(v60) < 0) {
    operator delete(__dst[0]);
  }
  uint64_t v33 = v56;
  if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
    uint64_t v34 = (std::__shared_weak_count *)v79.__r_.__value_.__l.__size_;
    if (!v79.__r_.__value_.__l.__size_) {
      goto LABEL_55;
    }
  }
  else
  {
    uint64_t v34 = (std::__shared_weak_count *)v79.__r_.__value_.__l.__size_;
    if (!v79.__r_.__value_.__l.__size_) {
      goto LABEL_55;
    }
  }
  if (!atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
    std::string v35 = (const void *)v77;
    if ((void)v77) {
      goto LABEL_56;
    }
    return;
  }
LABEL_55:
  std::string v35 = (const void *)v77;
  if ((void)v77) {
LABEL_56:
  }
    CFRelease(v35);
}

void sub_1C5B2C264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_108(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 0x40000000;
  v2[2] = ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2;
  v2[3] = &__block_descriptor_tmp_109;
  v2[4] = v1;
  ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v1 + 120), (uint64_t)v2);
}

void ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2(uint64_t a1)
{
}

uint64_t __copy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrI10BootModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrI10BootModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void __copy_helper_block_e8_40c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE48c15_ZTSK9ResetInfo160c38_ZTSNSt3__110shared_ptrI10BootModuleEE(std::string *a1, void *a2)
{
  int v4 = (void *)a2[5];
  if (v4) {
    int v4 = _Block_copy(v4);
  }
  a1[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v4;
  ResetInfo::ResetInfo(a1 + 2, (const ResetInfo *)(a2 + 6));
  std::string::size_type v5 = a2[21];
  a1[6].__r_.__value_.__r.__words[2] = a2[20];
  a1[7].__r_.__value_.__r.__words[0] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_1C5B2C560(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 + 40);
  if (v3) {
    _Block_release(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE48c15_ZTSK9ResetInfo160c38_ZTSNSt3__110shared_ptrI10BootModuleEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 168);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(a1 + 159) & 0x80000000) == 0)
    {
LABEL_4:
      if ((*(char *)(a1 + 119) & 0x80000000) == 0) {
        goto LABEL_5;
      }
      goto LABEL_11;
    }
  }
  else if ((*(char *)(a1 + 159) & 0x80000000) == 0)
  {
    goto LABEL_4;
  }
  operator delete(*(void **)(a1 + 136));
  if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(a1 + 95) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*(void **)(a1 + 96));
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0) {
      goto LABEL_7;
    }
LABEL_13:
    operator delete(*(void **)(a1 + 48));
    uint64_t v3 = *(const void **)(a1 + 40);
    if (!v3) {
      return;
    }
    goto LABEL_14;
  }
LABEL_12:
  operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0) {
    goto LABEL_13;
  }
LABEL_7:
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
LABEL_14:
  }
    _Block_release(v3);
}

void ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_114(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(char *)(a1 + 63) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
  }
  else {
    std::string __p = *(std::string *)(a1 + 40);
  }
  (*(void (**)(uint64_t, uint64_t, std::string *))(v1 + 16))(v1, 3760250880, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5B2C6F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrI10BootModuleEE56c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE64c15_ZTSK9ResetInfo(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[6];
  *(void *)(a1 + 40) = a2[5];
  *(void *)(a1 + 48) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::size_type v5 = (void *)a2[7];
  if (v5) {
    std::string::size_type v5 = _Block_copy(v5);
  }
  *(void *)(a1 + 56) = v5;
  ResetInfo::ResetInfo((std::string *)(a1 + 64), (const ResetInfo *)(a2 + 8));
}

void sub_1C5B2C774(_Unwind_Exception *a1)
{
  uint64_t v4 = *(const void **)(v2 + 56);
  if (v4) {
    _Block_release(v4);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrI10BootModuleEE56c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE64c15_ZTSK9ResetInfo(uint64_t a1)
{
  if (*(char *)(a1 + 175) < 0)
  {
    operator delete(*(void **)(a1 + 152));
    if ((*(char *)(a1 + 135) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 111) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 135) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 112));
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 87) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(*(void **)(a1 + 88));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_5:
    uint64_t v2 = *(const void **)(a1 + 56);
    if (!v2) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*(void **)(a1 + 64));
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
LABEL_11:
  }
    _Block_release(v2);
LABEL_12:
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void BootModule::shutdown_sync(uint64_t a1, void *a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v41 = 0;
  long long v42 = &v41;
  uint64_t v43 = 0x4002000000;
  size_t v44 = __Block_byref_object_copy__5;
  size_t v45 = __Block_byref_object_dispose__5;
  memset(&v46, 0, sizeof(v46));
  if (*(_DWORD *)(a1 + 456) == 8)
  {
    std::string::__assign_external(&v46, "BootModule already in shutdown state", 0x24uLL);
    uint64_t v3 = (void (**)(void *, void, std::string *))*a2;
    if (*((char *)v42 + 63) < 0) {
      std::string::__init_copy_ctor_external(&buf, (const std::string::value_type *)v42[5], v42[6]);
    }
    else {
      std::string buf = *(std::string *)(v42 + 5);
    }
    v3[2](v3, 0, &buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf.__r_.__value_.__l.__data_);
      _Block_object_dispose(&v41, 8);
      if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
      goto LABEL_66;
    }
LABEL_65:
    _Block_object_dispose(&v41, 8);
    if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_66;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  std::string::size_type v5 = *(std::__shared_weak_count **)(a1 + 128);
  uint64_t v39 = v6;
  if (!v5 || (uint64_t v7 = std::__shared_weak_count::lock(v5), (v40 = v7) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  std::string v37 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule13shutdown_syncEN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke;
  aBlock[3] = &unk_1F210DBB0;
  void aBlock[5] = a1;
  void aBlock[6] = v6;
  std::string v35 = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void aBlock[4] = &v41;
  uint64_t v8 = (void (**)(void *, void, std::string *))*a2;
  if (*a2) {
    uint64_t v8 = (void (**)(void *, void, std::string *))_Block_copy(v8);
  }
  unint64_t v36 = v8;
  size_t v9 = _Block_copy(aBlock);
  uint64_t v10 = *(NSObject **)(a1 + 136);
  if (v10) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
  }
  std::string v37 = v9;
  dispatch_object_t object = v10;
  unint64_t v32 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v33 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v11 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v12 = off_1EBBDCA08;
  if (!off_1EBBDCA08)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&buf, v11);
    long long v13 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
    std::string::size_type v14 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
    off_1EBBDCA08 = v13;
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    size_t size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
    if (buf.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(buf.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
    uint64_t v12 = off_1EBBDCA08;
  }
  uint64_t v16 = (std::__shared_weak_count *)*(&off_1EBBDCA08 + 1);
  uint64_t v28 = v12;
  uint64_t v29 = *(&off_1EBBDCA08 + 1);
  if (*(&off_1EBBDCA08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCA08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v12 + 16))(&v30, v12);
  unint64_t v32 = 0;
  uint64_t v33 = 0;
  if (v31)
  {
    uint64_t v33 = std::__shared_weak_count::lock(v31);
    if (v33) {
      unint64_t v32 = v30;
    }
    if (v31) {
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    unint64_t v17 = v32;
    if (!v32) {
      goto LABEL_44;
    }
  }
  else
  {
    unint64_t v17 = v32;
    if (!v32) {
      goto LABEL_44;
    }
  }
  if (*(unsigned char *)(a1 + 192))
  {
    uint64_t v18 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = 10;
      _os_log_impl(&dword_1C59C6000, v18, OS_LOG_TYPE_DEFAULT, "#I Poweroff baseband requested with timeout %llu sec", (uint8_t *)&buf, 0xCu);
    }
    long long v19 = v37;
    if (v37) {
      long long v19 = _Block_copy(v37);
    }
    uint64_t v26 = v19;
    dispatch_object_t v27 = object;
    if (object) {
      dispatch_retain(object);
    }
    (*(void (**)(unint64_t, uint64_t, void **))(*(void *)v17 + 64))(v17, 10000000000, &v26);
    if (v27) {
      dispatch_release(v27);
    }
    if (v26) {
      _Block_release(v26);
    }
    goto LABEL_52;
  }
LABEL_44:
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 96))(a1, 8);
  if (*(void *)(a1 + 480))
  {
    std::string::__assign_external((std::string *)(v42 + 5), "Transport clients are not started yet", 0x25uLL);
    size_t v20 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = v42 + 5;
      if (*((char *)v42 + 63) < 0) {
        uint64_t v25 = (void *)*v25;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v25;
      _os_log_error_impl(&dword_1C59C6000, v20, OS_LOG_TYPE_ERROR, "Poweroff baseband request skipped (powercycle anyway); Error: %s",
        (uint8_t *)&buf,
        0xCu);
    }
    (*(void (**)(void))(**(void **)(a1 + 480) + 72))(*(void *)(a1 + 480));
  }
  size_t v21 = (void (**)(void *, void, std::string *))*a2;
  if (*((char *)v42 + 63) < 0) {
    std::string::__init_copy_ctor_external(&buf, (const std::string::value_type *)v42[5], v42[6]);
  }
  else {
    std::string buf = *(std::string *)(v42 + 5);
  }
  v21[2](v21, 3760250880, &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
LABEL_52:
  size_t v22 = v33;
  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v37) {
    _Block_release(v37);
  }
  if (v36) {
    _Block_release(v36);
  }
  size_t v23 = v35;
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    uint64_t v24 = v40;
    if (!v40) {
      goto LABEL_65;
    }
  }
  else
  {
    uint64_t v24 = v40;
    if (!v40) {
      goto LABEL_65;
    }
  }
  if (atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_65;
  }
  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
  std::__shared_weak_count::__release_weak(v24);
  _Block_object_dispose(&v41, 8);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
LABEL_66:
  }
    operator delete(v46.__r_.__value_.__l.__data_);
}

void sub_1C5B2CF54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *aBlock,char a27,uint64_t a28,char a29)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a27);
  if (aBlock) {
    _Block_release(aBlock);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v29 + 48);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  _Block_object_dispose((const void *)(v30 - 160), 8);
  if (*(char *)(v30 - 97) < 0) {
    operator delete(*(void **)(v30 - 120));
  }
  _Unwind_Resume(a1);
}

void ___ZN10BootModule13shutdown_syncEN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke(void *a1, ctu::cf **a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)a1[5];
  if (*a2) {
    uint64_t v4 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4)
  {
    (*(void (**)(void, uint64_t))(*v3 + 96))(a1[5], 8);
    ctu::cf::show((uint64_t *)&buf, *a2, v6);
    uint64_t v7 = *(void *)(a1[4] + 8);
    uint64_t v8 = (void **)(v7 + 40);
    if (*(char *)(v7 + 63) < 0) {
      operator delete(*v8);
    }
    *(std::string *)uint64_t v8 = buf;
    size_t v9 = v3[11];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = *(void *)(a1[4] + 8);
      uint64_t v24 = (void *)(v23 + 40);
      if (*(char *)(v23 + 63) < 0) {
        uint64_t v24 = (void *)*v24;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
      _os_log_error_impl(&dword_1C59C6000, v9, OS_LOG_TYPE_ERROR, "#I Poweroff baseband request failed; Error: %{public}s",
        (uint8_t *)&buf,
        0xCu);
      uint64_t v10 = v3[60];
      if (!v10) {
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v10 = v3[60];
      if (!v10)
      {
LABEL_10:
        uint64_t v11 = *(void *)(a1[4] + 8);
        uint64_t v12 = a1[8];
        if (*(char *)(v11 + 63) < 0) {
          std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(v11 + 40), *(void *)(v11 + 48));
        }
        else {
          std::string buf = *(std::string *)(v11 + 40);
        }
        (*(void (**)(uint64_t, uint64_t, std::string *))(v12 + 16))(v12, 3760250880, &buf);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        return;
      }
    }
    (*(void (**)(uint64_t))(*(void *)v10 + 72))(v10);
    goto LABEL_10;
  }
  long long v13 = v3[11];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C59C6000, v13, OS_LOG_TYPE_DEFAULT, "#I Poweroff baseband request delivered; waiting for reset detection",
      (uint8_t *)&buf,
      2u);
  }
  uint64_t v14 = v3[22];
  uint64_t v15 = (char *)operator new(0x28uLL);
  uint64_t v29 = v15;
  long long v30 = xmmword_1C5BC27D0;
  strcpy(v15, "Poweroff: Wait for reset detection");
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule13shutdown_syncEN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke_124;
  aBlock[3] = &unk_1F210DB78;
  uint64_t v17 = a1[6];
  uint64_t v16 = (std::__shared_weak_count *)a1[7];
  void aBlock[5] = v3;
  void aBlock[6] = v17;
  uint64_t v26 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = (void *)a1[8];
  if (v18) {
    uint64_t v18 = _Block_copy(v18);
  }
  uint64_t v19 = a1[4];
  dispatch_object_t v27 = v18;
  void aBlock[4] = v19;
  size_t v20 = _Block_copy(aBlock);
  uint64_t v28 = v20;
  dispatch_time_t v21 = dispatch_time(0, 10000000000);
  ResetDetection::add(v14, (uint64_t)&v29, 1, &v28, v21);
  if (v20) {
    _Block_release(v20);
  }
  operator delete(v15);
  if (v27) {
    _Block_release(v27);
  }
  size_t v22 = v26;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
}

void sub_1C5B2D3DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN10BootModule13shutdown_syncEN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke_124(void *a1, int a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)a1[5];
  (*(void (**)(void *, uint64_t))(*v4 + 96))(v4, 8);
  if (a2)
  {
    std::string::size_type v5 = (char *)operator new(0x30uLL);
    strcpy(v5, "Poweroff: Timeout waiting for reset detection");
    uint64_t v6 = *(void *)(a1[4] + 8);
    if (*(char *)(v6 + 63) < 0) {
      operator delete(*(void **)(v6 + 40));
    }
    *(void *)(v6 + 40) = v5;
    *(_OWORD *)(v6 + 48) = xmmword_1C5BCB080;
    uint64_t v7 = v4[11];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)(a1[4] + 8);
      uint64_t v14 = (void *)(v13 + 40);
      if (*(char *)(v13 + 63) < 0) {
        uint64_t v14 = (void *)*v14;
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v14;
      _os_log_error_impl(&dword_1C59C6000, v7, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&__p, 0xCu);
      uint64_t v8 = *(void *)(a1[4] + 8);
      uint64_t v9 = a1[8];
      if ((*(char *)(v8 + 63) & 0x80000000) == 0) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v8 = *(void *)(a1[4] + 8);
      uint64_t v9 = a1[8];
      if ((*(char *)(v8 + 63) & 0x80000000) == 0)
      {
LABEL_6:
        std::string __p = *(std::string *)(v8 + 40);
LABEL_17:
        (*(void (**)(uint64_t, uint64_t, std::string *))(v9 + 16))(v9, 3760250883, &__p);
        goto LABEL_18;
      }
    }
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v8 + 40), *(void *)(v8 + 48));
    goto LABEL_17;
  }
  uint64_t v10 = v4[11];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C59C6000, v10, OS_LOG_TYPE_DEFAULT, "#I Poweroff baseband success", (uint8_t *)&__p, 2u);
  }
  uint64_t v11 = *(void *)(a1[4] + 8);
  uint64_t v12 = a1[8];
  if (*(char *)(v11 + 63) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v11 + 40), *(void *)(v11 + 48));
  }
  else {
    std::string __p = *(std::string *)(v11 + 40);
  }
  (*(void (**)(uint64_t, void, std::string *))(v12 + 16))(v12, 0, &__p);
LABEL_18:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    uint64_t result = v4[60];
    if (!result) {
      return result;
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 72))(result);
  }
  uint64_t result = v4[60];
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 72))(result);
  }
  return result;
}

void sub_1C5B2D6E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_48c38_ZTSNSt3__110shared_ptrI10BootModuleEE64c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(void *a1, void *a2)
{
  uint64_t v3 = a2[7];
  a1[6] = a2[6];
  a1[7] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t result = (void *)a2[8];
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  a1[8] = result;
  return result;
}

void __destroy_helper_block_e8_48c38_ZTSNSt3__110shared_ptrI10BootModuleEE64c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 64);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void ___ZN10BootModule9boot_syncEv_block_invoke(void *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = *(void *)(v2 + 480) != 0;
  if (*(unsigned char *)(*(void *)(a1[4] + 8) + 24)
    || (*(unsigned char *)(v2 + 229) = 1, uint64_t v3 = *(NSObject **)(v2 + 88), !os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)))
  {
    uint64_t v4 = *(void *)(a1[4] + 8);
    if (*(unsigned char *)(v4 + 24)) {
      goto LABEL_4;
    }
LABEL_11:
    *(unsigned char *)(v4 + 24) = 0;
    if (*(unsigned char *)(*(void *)(a1[4] + 8) + 24)) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
  LOWORD(v11) = 0;
  _os_log_error_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_ERROR, "Boot controller object has not been created!", (uint8_t *)&v11, 2u);
  uint64_t v4 = *(void *)(a1[4] + 8);
  if (!*(unsigned char *)(v4 + 24)) {
    goto LABEL_11;
  }
LABEL_4:
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 480)
                                                                                           + 48))(*(void *)(v2 + 480), *(void *)(a1[5] + 8) + 40);
  if (*(unsigned char *)(*(void *)(a1[4] + 8) + 24))
  {
LABEL_5:
    *(void *)(v2 + 232) = TelephonyUtilSystemMachTime();
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 480)
                                                                                             + 56))(*(void *)(v2 + 480), *(void *)(a1[5] + 8) + 40);
    if (!*(unsigned char *)(*(void *)(a1[4] + 8) + 24))
    {
      std::string::size_type v5 = *(NSObject **)(v2 + 88);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        uint64_t v6 = *(void *)(a1[5] + 8);
        uint64_t v7 = (void *)(v6 + 40);
        if (*(char *)(v6 + 63) < 0) {
          uint64_t v7 = (void *)*v7;
        }
        int v11 = 136315138;
        uint64_t v12 = v7;
        uint64_t v8 = "Failed on booting!: Reason: %s";
LABEL_17:
        _os_log_error_impl(&dword_1C59C6000, v5, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v11, 0xCu);
        return;
      }
    }
    return;
  }
LABEL_12:
  *(unsigned char *)(v2 + 229) = 1;
  std::string::size_type v5 = *(NSObject **)(v2 + 88);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    uint64_t v9 = *(void *)(a1[5] + 8);
    uint64_t v10 = (void *)(v9 + 40);
    if (*(char *)(v9 + 63) < 0) {
      uint64_t v10 = (void *)*v10;
    }
    int v11 = 136315138;
    uint64_t v12 = v10;
    uint64_t v8 = "Failed on preparation for booting!: Reason: %s";
    goto LABEL_17;
  }
}

uint64_t __copy_helper_block_e8_56c38_ZTSNSt3__110shared_ptrI10BootModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 64);
  *(void *)(result + 56) = *(void *)(a2 + 56);
  *(void *)(result + 64) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_56c38_ZTSNSt3__110shared_ptrI10BootModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 64);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN10BootModule9boot_syncEv_block_invoke_133(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_1C59C6000, v1, OS_LOG_TYPE_DEFAULT, "#I Recovery detected", v2, 2u);
  }
}

void __copy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrI10BootModuleEE56c30_ZTSN8dispatch13group_sessionE(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a2[7];
  a1[7] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    std::string::size_type v5 = a1[7];
    if (v5)
    {
      dispatch_group_enter(v5);
    }
  }
}

void __destroy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrI10BootModuleEE56c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 56);
    if (v3) {
      dispatch_release(v3);
    }
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void ___ZN10BootModule9boot_syncEv_block_invoke_135(void *a1)
{
  uint64_t v1 = (void *)a1[6];
  if ((*((_DWORD *)v1 + 114) - 7) < 2) {
    return;
  }
  if (*(unsigned char *)(*(void *)(a1[4] + 8) + 24))
  {
    state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v29 = _os_activity_create(&dword_1C59C6000, "Baseband state: booted", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
    state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
    os_activity_scope_enter(v29, &state);
    os_activity_scope_leave(&state);
    uint64_t v3 = v1[11];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(state.opaque[0]) = 0;
      _os_log_impl(&dword_1C59C6000, v3, OS_LOG_TYPE_DEFAULT, "#I Baseband bootup succeeded", (uint8_t *)&state, 2u);
    }
    (*(void (**)(void *, uint64_t))(*v1 + 96))(v1, 3);
    v1[30] = TelephonyUtilSystemMachTime();
    state.opaque[0] = 0;
    uint64_t v4 = *MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable) {
      state.opaque[0] = (uint64_t)Mutable;
    }
    ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x1E4F4C688], (const __CFString **)*MEMORY[0x1E4F4C958], v4, v6);
    uint64_t v7 = (std::__shared_weak_count *)v1[16];
    if (!v7 || (uint64_t v8 = v1[15], (v9 = std::__shared_weak_count::lock(v7)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v10 = v9;
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    BootModule::reportStatisticsBootUpTime_sync((BootModule *)v1);
    int v11 = (const void *)*MEMORY[0x1E4F4CEF8];
    size_t v12 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
    if (v12 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = (void *)v12;
    if (v12 >= 0x17)
    {
      uint64_t v17 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17) {
        uint64_t v17 = v12 | 7;
      }
      uint64_t v18 = v17 + 1;
      uint64_t v14 = (void **)operator new(v17 + 1);
      __dst[1] = v13;
      unint64_t v28 = v18 | 0x8000000000000000;
      __dst[0] = v14;
    }
    else
    {
      HIBYTE(v28) = v12;
      uint64_t v14 = __dst;
      if (!v12)
      {
        LOBYTE(__dst[0]) = 0;
        uint64_t v15 = (const void *)state.opaque[0];
        if (!state.opaque[0]) {
          goto LABEL_25;
        }
LABEL_23:
        CFTypeID v19 = CFGetTypeID(v15);
        if (v19 == CFDictionaryGetTypeID())
        {
          CFTypeRef cf = v15;
          CFRetain(v15);
LABEL_26:
          aBlocunint64_t k = 0;
          Service::broadcastEvent((uint64_t)v1, (uint64_t)__dst, &cf, (const void **)&aBlock);
          if (aBlock) {
            _Block_release(aBlock);
          }
          if (cf) {
            CFRelease(cf);
          }
          if (SHIBYTE(v28) < 0) {
            operator delete(__dst[0]);
          }
          size_t v20 = a1[9];
          dispatch_time_t v21 = v1[17];
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 1174405120;
          block[2] = ___ZN10BootModule9boot_syncEv_block_invoke_136;
          block[3] = &__block_descriptor_tmp_148_0;
          void block[4] = v1;
          void block[5] = v8;
          uint64_t v24 = v10;
          atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          dispatch_group_notify(v20, v21, block);
          if (v24) {
            std::__shared_weak_count::__release_weak(v24);
          }
          std::__shared_weak_count::__release_weak(v10);
          if (v15) {
            CFRelease(v15);
          }
          if (v29) {
            os_release(v29);
          }
          return;
        }
LABEL_25:
        CFTypeRef cf = 0;
        goto LABEL_26;
      }
    }
    memmove(v14, v11, (size_t)v13);
    *((unsigned char *)v13 + (void)v14) = 0;
    uint64_t v15 = (const void *)state.opaque[0];
    if (!state.opaque[0]) {
      goto LABEL_25;
    }
    goto LABEL_23;
  }
  uint64_t v16 = v1[11];
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    LOWORD(state.opaque[0]) = 0;
    _os_log_error_impl(&dword_1C59C6000, v16, OS_LOG_TYPE_ERROR, "Baseband bootup failed", (uint8_t *)&state, 2u);
  }
  (*(void (**)(void *, uint64_t))(*v1 + 96))(v1, 5);
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 0x40000000;
  v22[2] = ___ZN10BootModule9boot_syncEv_block_invoke_149;
  v22[3] = &unk_1E651BE50;
  v22[4] = a1[5];
  v22[5] = v1;
  ctu::SharedSynchronizable<BootModule>::execute_wrapped(v1 + 15, (uint64_t)v22);
}

void sub_1C5B2E0C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *aBlock,const void *a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a24);
  if (a30 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_weak(v30);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v31 - 96));
  ctu::os::scoped_activity::~scoped_activity((void **)(v31 - 104));
  _Unwind_Resume(a1);
}

void BootModule::reportStatisticsBootUpTime_sync(BootModule *this)
{
  uint64_t v2 = *((void *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C59C6000, v2, OS_LOG_TYPE_DEFAULT, "#I Submitting Stats of bootup time", buf, 2u);
  }
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (xpc_object_t v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8795EB0](v3) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v3);
      xpc_object_t v4 = v3;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v3 = 0;
  }
  xpc_release(v3);
  int64_t v5 = time(0);
  xpc_object_t v6 = xpc_int64_create(v5);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E4F4CF20], v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  xpc_object_t object = v4;
  *(void *)std::string buf = operator new(0x20uLL);
  long long v11 = xmmword_1C5BC7120;
  strcpy(*(char **)buf, "CommandUpdateBBBootStats");
  if (v4) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  uint64_t v8 = 0;
  Service::runCommand((uint64_t)this, (uint64_t)buf, &object, &v8);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(v11) < 0) {
    operator delete(*(void **)buf);
  }
  xpc_release(v4);
}

void sub_1C5B2E310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  xpc_release(object);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(v16);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule9boot_syncEv_block_invoke_136(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(void *)(v2 + 176);
  xpc_object_t v4 = (char *)operator new(0x19uLL);
  long long v11 = v4;
  long long v12 = xmmword_1C5BC51F0;
  strcpy(v4, "Baseband Recovered Gate");
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule9boot_syncEv_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_145;
  uint64_t v6 = a1[5];
  int64_t v5 = (std::__shared_weak_count *)a1[6];
  void aBlock[4] = v2;
  void aBlock[5] = v6;
  uint64_t v9 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v7 = _Block_copy(aBlock);
  uint64_t v10 = v7;
  ResetDetection::add(v3, (uint64_t)&v11, 0, &v10, -1);
  if (v7) {
    _Block_release(v7);
  }
  operator delete(v4);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
}

void sub_1C5B2E494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (v17) {
    _Block_release(v17);
  }
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule9boot_syncEv_block_invoke_2(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (BootModule *)a1[4];
    xpc_object_t v4 = std::__shared_weak_count::lock(v2);
    uint64_t v17 = v4;
    if (v4)
    {
      int64_t v5 = v4;
      if (a1[5])
      {
        BootModule::bbResetFlag(v3, 0);
        uint64_t v6 = *((void *)v3 + 22);
        xpc_object_t v7 = (char *)operator new(0x19uLL);
        uint64_t v14 = v7;
        long long v15 = xmmword_1C5BC51F0;
        strcpy(v7, "Baseband Crash Recovery");
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 1174405120;
        aBlock[2] = ___ZN10BootModule9boot_syncEv_block_invoke_3;
        aBlock[3] = &__block_descriptor_tmp_142;
        uint64_t v9 = a1[5];
        uint64_t v8 = (std::__shared_weak_count *)a1[6];
        void aBlock[4] = v3;
        void aBlock[5] = v9;
        long long v12 = v8;
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v10 = _Block_copy(aBlock);
        uint64_t v13 = v10;
        ResetDetection::add(v6, (uint64_t)&v14, 1, &v13, -1);
        if (v10) {
          _Block_release(v10);
        }
        operator delete(v7);
        if (v12) {
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1C5B2E674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (v17) {
    _Block_release(v17);
  }
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  operator delete(v16);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v18 - 64);
  _Unwind_Resume(a1);
}

void sub_1C5B2E6B0(_Unwind_Exception *a1)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1 - 64);
  _Unwind_Resume(a1);
}

void BootModule::bbResetFlag(BootModule *this, char a2)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v3 || (uint64_t v5 = *((void *)this + 15), (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  uint64_t v8 = operator new(0x10uLL);
  *(void *)uint64_t v8 = this;
  v8[8] = a2;
  uint64_t v9 = *((void *)this + 17);
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<BootModule>::execute_wrapped<BootModule::bbResetFlag(BOOL)::$_0>(BootModule::bbResetFlag(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<BootModule::bbResetFlag(BOOL)::$_0,dispatch_queue_s *::default_delete<BootModule::bbResetFlag(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ___ZN10BootModule9boot_syncEv_block_invoke_3(void *a1)
{
  uint64_t v1 = (BootModule *)a1[4];
  if ((*((_DWORD *)v1 + 114) - 7) >= 2)
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[6];
    if (v3)
    {
      xpc_object_t v4 = std::__shared_weak_count::lock(v3);
      char v57 = v4;
      if (v4)
      {
        if (!a1[5])
        {
          uint64_t v10 = v4;
LABEL_62:
          if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
          return;
        }
        BootModule::bbResetFlag(v1, 1);
        *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v54 = v5;
        long long v55 = v5;
        long long v52 = v5;
        long long v53 = v5;
        *(_OWORD *)&v50[16] = v5;
        long long v51 = v5;
        *(_OWORD *)size_t v50 = v5;
        uint64_t v6 = (const void *)*MEMORY[0x1E4F4C6E8];
        size_t v7 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
        if (v7 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v8 = v7;
        if (v7 >= 0x17)
        {
          uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v7 | 7) != 0x17) {
            uint64_t v11 = v7 | 7;
          }
          uint64_t v12 = v11 + 1;
          p_dst = (long long *)operator new(v11 + 1);
          *((void *)&__dst + 1) = v8;
          unint64_t v49 = v12 | 0x8000000000000000;
          *(void *)&long long __dst = p_dst;
        }
        else
        {
          HIBYTE(v49) = v7;
          p_dst = &__dst;
          if (!v7)
          {
LABEL_14:
            *((unsigned char *)p_dst + v8) = 0;
            uint64_t v13 = (const void *)*MEMORY[0x1E4F4D130];
            size_t v14 = strlen((const char *)*MEMORY[0x1E4F4D130]);
            if (v14 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            size_t v15 = v14;
            if (v14 >= 0x17)
            {
              uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v14 | 7) != 0x17) {
                uint64_t v17 = v14 | 7;
              }
              uint64_t v18 = v17 + 1;
              uint64_t v16 = (long long *)operator new(v17 + 1);
              *((void *)&v46 + 1) = v15;
              unint64_t v47 = v18 | 0x8000000000000000;
              *(void *)&long long v46 = v16;
            }
            else
            {
              HIBYTE(v47) = v14;
              uint64_t v16 = &v46;
              if (!v14)
              {
LABEL_22:
                *((unsigned char *)v16 + v15) = 0;
                CFTypeID v19 = (char *)operator new(0x20uLL);
                size_t v44 = v19;
                long long v45 = xmmword_1C5BCB090;
                strcpy(v19, "** baseband crash detected");
                Timestamp::Timestamp((Timestamp *)v40);
                Timestamp::asString((uint64_t)v40, 0, 9, __p);
                char v39 = 0;
                LOBYTE(v38) = 0;
                ResetInfo::ResetInfo((std::string *)v50, &__dst, &v46, (long long *)&v44, (uint64_t)__p, 3, &v38);
                if (v43 < 0) {
                  operator delete(__p[0]);
                }
                std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v40, v41);
                operator delete(v19);
                if (SHIBYTE(v47) < 0) {
                  operator delete((void *)v46);
                }
                if (SHIBYTE(v49) < 0) {
                  operator delete((void *)__dst);
                }
                ResetInfo::ResetInfo(&v31, (const ResetInfo *)v50);
                aBlocunint64_t k = 0;
                BootModule::requestReset(v1, &v31, &aBlock);
                if (aBlock) {
                  _Block_release(aBlock);
                }
                if (v37 < 0)
                {
                  operator delete(v36);
                  if ((v35 & 0x80000000) == 0)
                  {
LABEL_32:
                    if ((v33 & 0x80000000) == 0) {
                      goto LABEL_33;
                    }
                    goto LABEL_55;
                  }
                }
                else if ((v35 & 0x80000000) == 0)
                {
                  goto LABEL_32;
                }
                operator delete(v34);
                if ((v33 & 0x80000000) == 0)
                {
LABEL_33:
                  if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    goto LABEL_34;
                  }
LABEL_56:
                  operator delete(v31.__r_.__value_.__l.__data_);
LABEL_34:
                  size_t v20 = (const void *)*MEMORY[0x1E4F4CD28];
                  size_t v21 = strlen((const char *)*MEMORY[0x1E4F4CD28]);
                  if (v21 > 0x7FFFFFFFFFFFFFF7) {
                    std::string::__throw_length_error[abi:ne180100]();
                  }
                  size_t v22 = (void *)v21;
                  if (v21 >= 0x17)
                  {
                    uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v21 | 7) != 0x17) {
                      uint64_t v24 = v21 | 7;
                    }
                    uint64_t v25 = v24 + 1;
                    uint64_t v23 = operator new(v24 + 1);
                    v28[1] = v22;
                    unint64_t v29 = v25 | 0x8000000000000000;
                    v28[0] = v23;
                  }
                  else
                  {
                    HIBYTE(v29) = v21;
                    uint64_t v23 = v28;
                    if (!v21)
                    {
LABEL_42:
                      *((unsigned char *)v22 + (void)v23) = 0;
                      uint64_t v26 = 0;
                      CFTypeRef cf = 0;
                      Service::broadcastEvent((uint64_t)v1, (uint64_t)v28, &cf, (const void **)&v26);
                      if (v26) {
                        _Block_release(v26);
                      }
                      if (cf) {
                        CFRelease(cf);
                      }
                      if (SHIBYTE(v29) < 0)
                      {
                        operator delete(v28[0]);
                        if ((SHIBYTE(v55) & 0x80000000) == 0)
                        {
LABEL_48:
                          if ((SBYTE7(v53) & 0x80000000) == 0) {
                            goto LABEL_49;
                          }
                          goto LABEL_59;
                        }
                      }
                      else if ((SHIBYTE(v55) & 0x80000000) == 0)
                      {
                        goto LABEL_48;
                      }
                      operator delete(*((void **)&v54 + 1));
                      if ((SBYTE7(v53) & 0x80000000) == 0)
                      {
LABEL_49:
                        if ((SHIBYTE(v51) & 0x80000000) == 0) {
                          goto LABEL_50;
                        }
                        goto LABEL_60;
                      }
LABEL_59:
                      operator delete((void *)v52);
                      if ((SHIBYTE(v51) & 0x80000000) == 0)
                      {
LABEL_50:
                        if ((v50[23] & 0x80000000) == 0) {
                          goto LABEL_51;
                        }
                        goto LABEL_61;
                      }
LABEL_60:
                      operator delete(*(void **)&v50[24]);
                      if ((v50[23] & 0x80000000) == 0)
                      {
LABEL_51:
                        uint64_t v10 = v57;
                        if (!v57) {
                          return;
                        }
                        goto LABEL_62;
                      }
LABEL_61:
                      operator delete(*(void **)v50);
                      uint64_t v10 = v57;
                      if (!v57) {
                        return;
                      }
                      goto LABEL_62;
                    }
                  }
                  memmove(v23, v20, (size_t)v22);
                  goto LABEL_42;
                }
LABEL_55:
                operator delete(v32);
                if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_34;
                }
                goto LABEL_56;
              }
            }
            memmove(v16, v13, v15);
            goto LABEL_22;
          }
        }
        memmove(p_dst, v6, v8);
        goto LABEL_14;
      }
    }
  }
}

void sub_1C5B2EC50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  if (a16 < 0)
  {
    operator delete(__p);
    ResetInfo::~ResetInfo((void **)(v43 - 192));
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v43 - 80);
    _Unwind_Resume(a1);
  }
  ResetInfo::~ResetInfo((void **)(v43 - 192));
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v43 - 80);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule9boot_syncEv_block_invoke_149(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(char *)(v2 + 63) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v2 + 40), *(void *)(v2 + 48));
  }
  else {
    std::string __p = *(std::string *)(v2 + 40);
  }
  BootModule::handleBootFailed_sync(v1, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}