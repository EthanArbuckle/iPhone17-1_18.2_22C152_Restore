BlueFin::GlArray *BlueFin::GlArray::GlArray(BlueFin::GlArray *this, void *a2, int a3, int a4, unsigned __int8 *a5, int a6, unsigned __int8 *a7, unsigned int a8)
{
  *(void *)this = &unk_270EBA640;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = a5;
  *((void *)this + 3) = a7;
  *((_DWORD *)this + 8) = a3;
  *((unsigned char *)this + 36) = a4;
  *((unsigned char *)this + 37) = a6;
  *((unsigned char *)this + 38) = a8;
  if ((a6 | a4 | a8) > 0xFF)
  {
    DeviceFaultNotify("glutl_array.cpp", 41, "GlArray", (char)"(m_ucMinHandle == min_handle) && (m_ucNumHandles == num_handles) && (m_ucNumSlots == num_slots) && (num_slots <= invalid)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_array.cpp", 41, "(m_ucMinHandle == min_handle) && (m_ucNumHandles == num_handles) && (m_ucNumSlots == num_slots) && (num_slots <= invalid)");
  }
  BlueFin::GlArray::Clear((uint64_t)this);
  return this;
}

uint64_t BlueFin::GlMeObjFactory::MakeViterbiDecoderArray(BlueFin::GlMeObjFactory *this)
{
  if (!*((unsigned char *)this + 55)) {
    return (uint64_t)this + 360;
  }
  Memory = BlueFin::GlMemAlloc::glAllocateMemory(23, 40, *((uint64_t (**)(uint64_t))this + 3));
  if (!Memory) {
    return *((void *)this + 29);
  }
  uint64_t v3 = (uint64_t)Memory;
  *((void *)this + 30) = BlueFin::GlMemAlloc::glAllocateMemory(24, 838, *((uint64_t (**)(uint64_t))this + 3));
  *((void *)this + 32) = BlueFin::GlMemAlloc::glAllocateMemory(25, 2, *((uint64_t (**)(uint64_t))this + 3));
  v4 = BlueFin::GlMemAlloc::glAllocateMemory(26, 100, *((uint64_t (**)(uint64_t))this + 3));
  *((void *)this + 31) = v4;
  uint64_t v5 = *((void *)this + 30);
  uint64_t v6 = *((void *)this + 32);
  *(void *)uint64_t v3 = &unk_270EBA640;
  *(void *)(v3 + 8) = v5;
  *(void *)(v3 + 16) = v4;
  *(void *)(v3 + 24) = v6;
  *(_DWORD *)(v3 + 32) = 419;
  *(_WORD *)(v3 + 36) = 25600;
  *(unsigned char *)(v3 + 38) = 2;
  BlueFin::GlArray::Clear(v3);
  *((void *)this + 29) = v3;
  return v3;
}

uint64_t BlueFin::GlMeObjFactory::MakeSniffStateArray(BlueFin::GlMeObjFactory *this)
{
  if (!*((unsigned char *)this + 54)) {
    return (uint64_t)this + 360;
  }
  Memory = BlueFin::GlMemAlloc::glAllocateMemory(19, 40, *((uint64_t (**)(uint64_t))this + 3));
  if (!Memory) {
    return *((void *)this + 25);
  }
  uint64_t v3 = (uint64_t)Memory;
  *((void *)this + 26) = BlueFin::GlMemAlloc::glAllocateMemory(20, 1120, *((uint64_t (**)(uint64_t))this + 3));
  *((void *)this + 28) = BlueFin::GlMemAlloc::glAllocateMemory(21, 20, *((uint64_t (**)(uint64_t))this + 3));
  v4 = BlueFin::GlMemAlloc::glAllocateMemory(22, 100, *((uint64_t (**)(uint64_t))this + 3));
  *((void *)this + 27) = v4;
  uint64_t v5 = *((void *)this + 26);
  uint64_t v6 = *((void *)this + 28);
  *(void *)uint64_t v3 = &unk_270EBA640;
  *(void *)(v3 + 8) = v5;
  *(void *)(v3 + 16) = v4;
  *(void *)(v3 + 24) = v6;
  *(_DWORD *)(v3 + 32) = 56;
  *(_WORD *)(v3 + 36) = 25600;
  *(unsigned char *)(v3 + 38) = 20;
  BlueFin::GlArray::Clear(v3);
  *((void *)this + 25) = v3;
  return v3;
}

void *BlueFin::GlMemAlloc::glAllocateMemory(int a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  if (!a3 || (v4 = a2, (uint64_t v5 = (void *)a3(a2)) == 0))
  {
    if (BlueFin::GlUtils::m_pInstance) {
      GlCustomLog(12, "OOM(%d)\n", a1);
    }
    DeviceFaultNotify("glmem_alloc.cpp", 80, "glAllocateMemory", (char)"ptr != nullptr");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmem_alloc.cpp", 80, "ptr != nullptr");
  }

  return memset(v5, 165, v4);
}

void *BlueFin::GlDbgMemory::Allocate(BlueFin::GlDbgMemory *this)
{
  unsigned int v1 = this;
  v2 = (void *)(*(uint64_t (**)(void))BlueFin::GlDbgMemory::m_pInstance)();
  uint64_t v3 = v2;
  if (v2) {
    memset(v2, 129, v1);
  }
  return v3;
}

void *CbGlOnMemAlloc(size_t size)
{
  return malloc_type_malloc(size, 0xDEB881CuLL);
}

BlueFin::GlBigArray *BlueFin::GlMeObjFactory::MakeSatReportArray(BlueFin::GlMeObjFactory *this)
{
  Memory = (BlueFin::GlBigArray *)BlueFin::GlMemAlloc::glAllocateMemory(15, 40, *((uint64_t (**)(uint64_t))this + 3));
  if (!Memory) {
    return (BlueFin::GlBigArray *)*((void *)this + 21);
  }
  uint64_t v3 = Memory;
  unsigned int v4 = *((unsigned __int8 *)this + 44) + 5;
  *((void *)this + 22) = BlueFin::GlMemAlloc::glAllocateMemory(16, 3744 * v4, *((uint64_t (**)(uint64_t))this + 3));
  *((void *)this + 24) = BlueFin::GlMemAlloc::glAllocateMemory(17, 2 * v4, *((uint64_t (**)(uint64_t))this + 3));
  uint64_t v5 = (unsigned __int16 *)BlueFin::GlMemAlloc::glAllocateMemory(18, 800, *((uint64_t (**)(uint64_t))this + 3));
  *((void *)this + 23) = v5;
  BlueFin::GlBigArray::GlBigArray(v3, *((void **)this + 22), 3744, 0, v5, 0x190u, *((unsigned __int16 **)this + 24), v4);
  *((void *)this + 21) = v3;
  return v3;
}

uint64_t BlueFin::GlMeObjFactory::MakeEstLowTowArray(BlueFin::GlMeObjFactory *this)
{
  if (!*((unsigned char *)this + 56)) {
    return (uint64_t)this + 360;
  }
  Memory = BlueFin::GlMemAlloc::glAllocateMemory(27, 40, *((uint64_t (**)(uint64_t))this + 3));
  if (!Memory) {
    return *((void *)this + 33);
  }
  uint64_t v3 = (uint64_t)Memory;
  *((void *)this + 34) = BlueFin::GlMemAlloc::glAllocateMemory(28, 12096, *((uint64_t (**)(uint64_t))this + 3));
  *((void *)this + 36) = BlueFin::GlMemAlloc::glAllocateMemory(29, 9, *((uint64_t (**)(uint64_t))this + 3));
  unsigned int v4 = BlueFin::GlMemAlloc::glAllocateMemory(30, 100, *((uint64_t (**)(uint64_t))this + 3));
  *((void *)this + 35) = v4;
  uint64_t v5 = *((void *)this + 34);
  uint64_t v6 = *((void *)this + 36);
  *(void *)uint64_t v3 = &unk_270EBA640;
  *(void *)(v3 + 8) = v5;
  *(void *)(v3 + 16) = v4;
  *(void *)(v3 + 24) = v6;
  *(_DWORD *)(v3 + 32) = 1344;
  *(_WORD *)(v3 + 36) = 25600;
  *(unsigned char *)(v3 + 38) = 9;
  BlueFin::GlArray::Clear(v3);
  *((void *)this + 33) = v3;
  return v3;
}

uint64_t BlueFin::GlMeMsmtHolder::GlMeMsmtHolder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  uint64_t v6 = a1 + 17664;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a5;
  *(_OWORD *)(a1 + 44) = 0u;
  *(void *)(a1 + 32) = a1 + 44;
  *(unsigned char *)(a1 + 40) = 19;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_OWORD *)(a1 + 76) = 0u;
  *(_OWORD *)(a1 + 92) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 120) = BlueFin::GlMeObjFactory::MakeMsmtHolderArray((BlueFin::GlMeObjFactory *)BlueFin::GlMeObjFactory::m_ptObjFactory);
  BlueFin::GlMeas::GlMeas(a1 + 128);
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 4) = 0;
  *(void *)(a1 + 17672) = 0;
  *(_OWORD *)(a1 + 17716) = 0u;
  *(_OWORD *)(a1 + 17732) = 0u;
  *(_OWORD *)(a1 + 17748) = 0u;
  *(_OWORD *)(a1 + 17700) = 0u;
  *(unsigned char *)(a1 + 17680) = 0;
  *(void *)(a1 + 17688) = a1 + 17700;
  *(unsigned char *)(v6 + 32) = 19;
  *(_OWORD *)(a1 + 17760) = 0u;
  *(_DWORD *)(v6 + 112) = 100;
  bzero(*(void **)(a1 + 32), ((4 * *(unsigned __int8 *)(a1 + 40) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  BlueFin::GlMeMsmtHolder::Clear((BlueFin::GlMeMsmtHolder *)a1);
  return a1;
}

uint64_t BlueFin::GlMeas::GlMeas(uint64_t this)
{
  *(void *)(this + 62) = 0;
  *(_OWORD *)(this + 32) = 0u;
  *(_OWORD *)(this + 48) = 0u;
  *(_OWORD *)this = 0u;
  *(_OWORD *)(this + 16) = 0u;
  *(_DWORD *)(this + 70) = 65537;
  *(_WORD *)(this + 74) = 2;
  *(_OWORD *)(this + 76) = 0u;
  *(_OWORD *)(this + 92) = 0u;
  *(_DWORD *)(this + 108) = 0;
  *(_WORD *)(this + 112) = 255;
  *(unsigned char *)(this + 114) = 0;
  *(_DWORD *)(this + 116) = 0;
  *(void *)(this + 3072) = this + 128;
  *(void *)(this + 17504) = this + 3104;
  *(void *)(this + 17512) = 0xFFFFFFFFLL;
  *(_DWORD *)(this + 17520) = 12;
  uint64_t v1 = 100;
  uint64_t v2 = 140;
  *(unsigned char *)(this + 17524) = 0;
  do
  {
    uint64_t v3 = (unsigned char *)(*(void *)(this + 17504) + v2);
    *(v3 - 140) = 0;
    *((_DWORD *)v3 - 34) = -1;
    *((_WORD *)v3 - 66) = 575;
    *((_DWORD *)v3 - 32) = 0;
    *((_WORD *)v3 - 62) = -1;
    *(v3 - 122) = 0;
    *(_OWORD *)(v3 - 120) = 0uLL;
    *(_OWORD *)(v3 - 104) = 0uLL;
    *(_OWORD *)(v3 - 84) = 0uLL;
    *(_OWORD *)(v3 - 68) = 0uLL;
    *(_OWORD *)(v3 - 52) = xmmword_263BA9EE0;
    *((_DWORD *)v3 - 9) = 0;
    *((void *)v3 - 4) = 0xBF80000000000000;
    *((_DWORD *)v3 - 6) = 2139095039;
    *(void *)(v3 - 20) = 0;
    *(void *)(v3 - 12) = 0x38D1B71700000000;
    *((_DWORD *)v3 - 1) = 0;
    v2 += 144;
    *uint64_t v3 = 0;
    --v1;
  }
  while (v1);
  uint64_t v4 = *(void *)(this + 3072);
  do
  {
    uint64_t v5 = v4 + v1;
    *(unsigned char *)uint64_t v5 = 0;
    *(_DWORD *)(v5 + 4) = -1;
    *(_WORD *)(v5 + 8) = 575;
    *(_DWORD *)(v5 + 12) = 0;
    v1 += 184;
    *(unsigned char *)(v5 + 16) = 0;
  }
  while (v1 != 2944);
  return this;
}

unsigned __int16 *BlueFin::GlMeObjFactory::MakeMsmtHolderArray(BlueFin::GlMeObjFactory *this)
{
  Memory = (unsigned __int16 *)BlueFin::GlMemAlloc::glAllocateMemory(35, 1192, *((uint64_t (**)(uint64_t))this + 3));
  if (!Memory) {
    return (unsigned __int16 *)*((void *)this + 41);
  }
  uint64_t v3 = Memory;
  unsigned int v4 = *((_DWORD *)this + 11);
  *((void *)this + 42) = BlueFin::GlMemAlloc::glAllocateMemory(36, 160 * v4, *((uint64_t (**)(uint64_t))this + 3));
  uint64_t v5 = (unsigned __int16 *)BlueFin::GlMemAlloc::glAllocateMemory(37, 2 * v4, *((uint64_t (**)(uint64_t))this + 3));
  *((void *)this + 44) = v5;
  BlueFin::GlBigArray::GlBigArray((BlueFin::GlBigArray *)(v3 + 576), *((void **)this + 42), 160, 0, v3, 0x23Fu, v5, v4);
  *((void *)this + 41) = v3;
  return v3;
}

double BlueFin::GlMeMsmtHolder::Clear(BlueFin::GlMeMsmtHolder *this)
{
  uint64_t v3 = (char *)this + 32;
  uint64_t v2 = (const void *)*((void *)this + 4);
  unsigned __int8 v17 = *((unsigned char *)this + 40);
  memcpy(v21, v2, 4 * v17);
  unsigned __int16 v19 = 0;
  unsigned __int8 v18 = 0;
  int v20 = v21[0];
  BlueFin::GlSetIterator::operator++(&v17);
  if (v18 != v17)
  {
    while (1)
    {
      unsigned __int16 v4 = v19;
      if (v19 >= 0x23FuLL) {
        break;
      }
      uint64_t v5 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v19;
      char v6 = *v5;
      LODWORD(v5) = v5[1];
      v14[0] = v6;
      int v15 = (int)v5;
      LOWORD(v16) = v19;
      v7 = *(void (***)(void))BlueFin::GlSignalIdArray::Get(*((void *)this + 15), (uint64_t)v14);
      (*v7)();
      BlueFin::GlBigArray::Remove(*((void *)this + 15) + 1152, (unsigned __int16)v16);
      BlueFin::GlSetBase::Remove((uint64_t)v3, (__int16)v4);
      BlueFin::GlSetIterator::operator++(&v17);
      if (v18 == v17) {
        goto LABEL_4;
      }
    }
    v11 = "usIndex < NUM_SIGNAL_IDS";
    DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
    v12 = "glsignalid.h";
    int v13 = 577;
LABEL_7:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v12, v13, v11);
  }
LABEL_4:
  uint64_t v8 = *((void *)this + 15);
  if (*(unsigned __int16 *)(v8 + 1186) + 1 != *(unsigned __int16 *)(v8 + 1184))
  {
    v11 = "m_otMsmtArray.IsEmpty()";
    DeviceFaultNotify("glme_msmtholder.cpp", 69, "Clear", (char)"m_otMsmtArray.IsEmpty()");
    v12 = "glme_msmtholder.cpp";
    int v13 = 69;
    goto LABEL_7;
  }
  v9 = v3 + 17632;
  BlueFin::GlBigArray::Clear(v8 + 1152);
  *(_DWORD *)v9 = -8388611;
  v9[4] = -1;
  double result = 0.0;
  *((void *)this + 2209) = 0;
  return result;
}

uint64_t BlueFin::GlMeSrdSatMgr::GlMeSrdSatMgr(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  *(_OWORD *)(result + 12) = 0u;
  *(void *)double result = result + 12;
  *(unsigned char *)(result + 8) = 8;
  *(_OWORD *)(result + 28) = 0u;
  *(_WORD *)(result + 48) = 100;
  *(void *)(result + 68) = 0;
  *(void *)(result + 196) = 0;
  *(void *)(result + 56) = result + 68;
  *(_OWORD *)(result + 468) = 0u;
  *(void *)(result + 456) = result + 468;
  *(void *)(result + 504) = result + 516;
  *(void *)(result + 552) = result + 564;
  *(_OWORD *)(result + 612) = 0u;
  *(void *)(result + 600) = result + 612;
  *(_OWORD *)(result + 660) = 0u;
  *(void *)(result + 648) = result + 660;
  *(_OWORD *)(result + 708) = 0u;
  *(void *)(result + 696) = result + 708;
  *(void *)(result + 744) = result + 756;
  *(_OWORD *)(result + 804) = 0u;
  *(void *)(result + 792) = result + 804;
  *(_OWORD *)(result + 852) = 0u;
  *(void *)(result + 840) = result + 852;
  *(unsigned char *)(result + 64) = 4;
  *(void *)(result + 76) = 0;
  *(void *)(result + 100) = 0;
  *(void *)(result + 88) = result + 100;
  *(unsigned char *)(result + 96) = 4;
  *(void *)(result + 108) = 0;
  *(void *)(result + 132) = 0;
  *(void *)(result + 120) = result + 132;
  *(unsigned char *)(result + 128) = 4;
  *(void *)(result + 140) = 0;
  *(void *)(result + 164) = 0;
  *(void *)(result + 152) = result + 164;
  *(unsigned char *)(result + 160) = 4;
  *(void *)(result + 172) = 0;
  *(void *)(result + 228) = 0;
  *(void *)(result + 216) = result + 228;
  *(void *)(result + 260) = 0;
  *(void *)(result + 248) = result + 260;
  *(_OWORD *)(result + 292) = 0u;
  *(void *)(result + 280) = result + 292;
  *(unsigned char *)(result + 288) = 16;
  *(void *)(result + 372) = 0;
  *(void *)(result + 360) = result + 372;
  *(void *)(result + 404) = 0;
  *(void *)(result + 392) = result + 404;
  *(void *)(result + 436) = 0;
  *(void *)(result + 424) = result + 436;
  *(void *)(result + 184) = result + 196;
  *(unsigned char *)(result + 192) = 4;
  *(void *)(result + 204) = 0;
  *(unsigned char *)(result + 224) = 4;
  *(void *)(result + 236) = 0;
  *(unsigned char *)(result + 256) = 4;
  *(void *)(result + 268) = 0;
  *(_OWORD *)(result + 308) = 0u;
  *(_OWORD *)(result + 324) = 0u;
  *(_OWORD *)(result + 340) = 0u;
  *(unsigned char *)(result + 368) = 4;
  *(void *)(result + 380) = 0;
  *(unsigned char *)(result + 400) = 4;
  *(void *)(result + 412) = 0;
  *(unsigned char *)(result + 432) = 4;
  *(void *)(result + 444) = 0;
  *(unsigned char *)(result + 464) = 8;
  *(_OWORD *)(result + 484) = 0u;
  *(unsigned char *)(result + 512) = 8;
  *(_OWORD *)(result + 516) = 0u;
  *(_OWORD *)(result + 532) = 0u;
  *(unsigned char *)(result + 560) = 8;
  *(_OWORD *)(result + 564) = 0u;
  *(_OWORD *)(result + 580) = 0u;
  *(unsigned char *)(result + 608) = 8;
  *(_OWORD *)(result + 628) = 0u;
  *(unsigned char *)(result + 656) = 8;
  *(_OWORD *)(result + 676) = 0u;
  *(unsigned char *)(result + 704) = 8;
  *(_OWORD *)(result + 724) = 0u;
  *(unsigned char *)(result + 752) = 8;
  *(_OWORD *)(result + 756) = 0u;
  *(_OWORD *)(result + 772) = 0u;
  *(unsigned char *)(result + 800) = 8;
  *(_OWORD *)(result + 820) = 0u;
  *(unsigned char *)(result + 848) = 8;
  *(_OWORD *)(result + 868) = 0u;
  do
  {
    uint64_t v4 = result + v3;
    uint64_t v5 = (_OWORD *)(result + v3 + 900);
    *(void *)(v4 + 888) = v5;
    *(unsigned char *)(v4 + 896) = 8;
    *uint64_t v5 = 0uLL;
    v5[1] = 0uLL;
    v3 += 48;
  }
  while (v3 != 192);
  *(void *)(result + 6288) = result + 1088;
  *(unsigned char *)(result + 6296) = 0;
  *(_OWORD *)(result + 6332) = 0u;
  *(_OWORD *)(result + 6348) = 0u;
  *(_OWORD *)(result + 6364) = 0u;
  *(_OWORD *)(result + 6316) = 0u;
  *(void *)(result + 6304) = result + 6316;
  *(unsigned char *)(result + 6312) = 16;
  *(_OWORD *)(result + 6412) = 0u;
  *(_OWORD *)(result + 6428) = 0u;
  *(_OWORD *)(result + 6444) = 0u;
  *(_OWORD *)(result + 6396) = 0u;
  *(void *)(result + 6384) = result + 6396;
  *(unsigned char *)(result + 6392) = 16;
  *(_OWORD *)(result + 6492) = 0u;
  *(_OWORD *)(result + 6508) = 0u;
  *(_OWORD *)(result + 6524) = 0u;
  *(_OWORD *)(result + 6476) = 0u;
  *(void *)(result + 6464) = result + 6476;
  *(unsigned char *)(result + 6472) = 16;
  *(_DWORD *)(result + 6544) = 0;
  *(unsigned char *)(result + 6548) = 0;
  *(void *)(result + 6552) = a2;
  uint64_t v6 = -5200;
  *(void *)(result + 6560) = a3;
  *(_OWORD *)(result + 6568) = 0u;
  do
  {
    uint64_t v7 = *(void *)(result + 6288) + v6;
    *(_DWORD *)(v7 + 5248) = 0;
    *(_OWORD *)(v7 + 5232) = 0uLL;
    *(_OWORD *)(v7 + 5216) = 0uLL;
    *(_OWORD *)(v7 + 5200) = 0uLL;
    v6 += 52;
  }
  while (v6);
  uint64_t v8 = 1;
  do
  {
    uint64_t v9 = 0;
    *(unsigned char *)(*(void *)(result + 6288) + 52 * v6) = 0;
    do
      *(unsigned char *)(*(void *)(result + 6288) + v8 + v9++) = -6;
    while (v9 != 4);
    ++v6;
    v8 += 52;
  }
  while (v6 != 100);
  uint64_t v10 = 1u;
  do
  {
    if (BlueFin::GlSvId::s_aucSvId2gnss[v10] != 7) {
      *(_DWORD *)(*(void *)result + 4 * (v10 >> 5)) |= 1 << v10;
    }
    ++v10;
  }
  while (v10 != 189);
  return result;
}

uint64_t BlueFin::GlMeSrdStats::GlMeSrdStats(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v9 = (_OWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 100) = 0u;
  uint64_t v10 = (_OWORD *)(a1 + 100);
  *(unsigned char *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v11 = a1 + 812;
  *(_OWORD *)(a1 + 40) = 0u;
  v12 = (void *)(a1 + 180);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 116) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_OWORD *)(a1 + 148) = 0u;
  bzero((void *)(a1 + 180), 0x275uLL);
  *(void *)(v11 + 80) = 0;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)uint64_t v11 = 0u;
  *(_DWORD *)(a1 + 928) = 0;
  *(_WORD *)(a1 + 932) = 0;
  *(void *)(a1 + 984) = 0;
  *(void *)(a1 + 936) = 0;
  *(void *)(a1 + 942) = 0;
  *(void *)(a1 + 952) = 0;
  *(void *)(a1 + 958) = 0;
  *(void *)(a1 + 968) = 0;
  *(void *)(a1 + 974) = 0;
  *(void *)(a1 + 1024) = a4;
  *(void *)(a1 + 1032) = a3;
  *(void *)(a1 + 1272) = a1 + 1056;
  *(void *)(a1 + 1496) = a1 + 1280;
  *(void *)(a1 + 1264) = 0;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(void *)(a1 + 1488) = 0;
  *(void *)(a1 + 1548) = 0;
  *(_OWORD *)(a1 + 1532) = 0u;
  *(_WORD *)(a1 + 1528) = 0;
  *(void *)(a1 + 1520) = 0;
  *(_OWORD *)(a1 + 1504) = 0u;
  BlueFin::GlIQSnrStatsMgr::GlIQSnrStatsMgr((void *)(a1 + 1568), a1 + 1024);
  *(void *)(a1 + 41760) = a5;
  *(void *)(a1 + 42920) = a1 + 42960;
  *(void *)(a1 + 42928) = a1 + 41768;
  *(void *)(a1 + 42936) = a1 + 65488;
  *(void *)(a1 + 42944) = 0x23F000000000058;
  *(_WORD *)(a1 + 42952) = 256;
  BlueFin::GlBigArray::Clear(a1 + 42920);
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  _OWORD *v9 = 0u;
  v9[1] = 0u;
  v9[2] = 0u;
  v9[3] = 0u;
  *(_OWORD *)((char *)v9 + 60) = 0u;
  *(unsigned char *)(a1 + 96) = 0;
  *uint64_t v10 = 0u;
  v10[1] = 0u;
  v10[2] = 0u;
  v10[3] = 0u;
  bzero(v12, 0x275uLL);
  *(void *)(v11 + 80) = 0;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)uint64_t v11 = 0u;
  *(void *)(a1 + 168) = a1 + 928;
  *(_DWORD *)(a1 + 224) = -1018691584;
  *(unsigned char *)(a1 + 992) = 0;
  *(void *)(a1 + 904) = 0;
  *(void *)(a1 + 920) = 0;
  *(void *)(a1 + 912) = 0;
  return a1;
}

void sub_26396290C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  *(_DWORD *)(v10 + 928) = 0;
  *(_WORD *)(v10 + 932) = 0;
  *(void *)(v10 + 984) = 0;
  void *v11 = 0;
  *(void *)((char *)v11 + 6) = 0;
  *a9 = 0;
  *(void *)((char *)a9 + 6) = 0;
  *a10 = 0;
  *(void *)((char *)a10 + 6) = 0;
  _Unwind_Resume(a1);
}

void *BlueFin::GlIQSnrStatsMgr::GlIQSnrStatsMgr(void *a1, uint64_t a2)
{
  a1[5020] = a1;
  *((_DWORD *)a1 + 10042) = 0;
  uint64_t v3 = 4;
  a1[5022] = a2;
  uint64_t v4 = (char *)a1;
  do
  {
    v4[10012] = 0;
    *((_DWORD *)v4 + 2504) = -1;
    *((_WORD *)v4 + 5010) = 575;
    *((void *)v4 + 1253) = 0;
    v4[10032] = 0;
    bzero(v4, 0x271CuLL);
    v4 += 10040;
    --v3;
  }
  while (v3);
  return a1;
}

BlueFin::GlMeMsmtMgr *BlueFin::GlMeMsmtMgr::GlMeMsmtMgr(BlueFin::GlMeMsmtMgr *this, BlueFin::GlMeMiniKF *a2, BlueFin::GlPeIf *a3, BlueFin::GlMeWinMgr *a4, char a5, int a6)
{
  *(_OWORD *)((char *)this + 12) = 0u;
  *(void *)this = (char *)this + 12;
  *((unsigned char *)this + 8) = 19;
  *(_OWORD *)((char *)this + 28) = 0u;
  *(_OWORD *)((char *)this + 44) = 0u;
  *(_OWORD *)((char *)this + 60) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 100) = 0u;
  *((void *)this + 11) = (char *)this + 100;
  *((unsigned char *)this + 96) = 19;
  *(_OWORD *)((char *)this + 116) = 0u;
  *(_OWORD *)((char *)this + 132) = 0u;
  *(_OWORD *)((char *)this + 148) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((void *)this + 22) = a3;
  *((void *)this + 23) = a2;
  *((void *)this + 24) = a4;
  *((_DWORD *)this + 50) = 0;
  *((_DWORD *)this + 52) = 0;
  *((void *)this + 27) = 0;
  *((void *)this + 28) = 0;
  *((unsigned char *)this + 240) = 0;
  *((void *)this + 29) = 0;
  *((_DWORD *)this + 61) = -1;
  *((_WORD *)this + 124) = 575;
  *((_DWORD *)this + 63) = 0;
  *((_WORD *)this + 128) = -1;
  *((unsigned char *)this + 258) = 0;
  *(_OWORD *)((char *)this + 260) = 0u;
  *(_OWORD *)((char *)this + 276) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = xmmword_263BA9EE0;
  *((void *)this + 43) = 0;
  *((void *)this + 44) = 0x7F7FFFFFBF800000;
  *((void *)this + 45) = 0;
  *((void *)this + 46) = 0x38D1B71700000000;
  *((_DWORD *)this + 94) = 0;
  *((unsigned char *)this + 380) = 0;
  *((void *)this + 93) = &unk_270EBA640;
  *((void *)this + 94) = (char *)this + 384;
  *((void *)this + 95) = (char *)this + 784;
  *((void *)this + 96) = (char *)this + 803;
  *((_DWORD *)this + 194) = 120;
  *((_WORD *)this + 390) = 4897;
  *((unsigned char *)this + 782) = 3;
  BlueFin::GlArray::Clear((uint64_t)this + 744);
  *(_OWORD *)((char *)this + 836) = 0u;
  *(_OWORD *)((char *)this + 852) = 0u;
  *(_OWORD *)((char *)this + 820) = 0u;
  *(_OWORD *)((char *)this + 868) = 0u;
  *((void *)this + 101) = (char *)this + 820;
  *((unsigned char *)this + 816) = 19;
  *((_OWORD *)this + 55) = 0u;
  *((void *)this + 112) = BlueFin::GlMeObjFactory::MakeMsmtArray((BlueFin::GlMeObjFactory *)BlueFin::GlMeObjFactory::m_ptObjFactory);
  *((unsigned char *)this + 904) = 0;
  *((void *)this + 120) = a3;
  *((_WORD *)this + 468) = 0;
  *(void *)((char *)this + 924) = -1;
  *((_DWORD *)this + 233) = -1;
  *(void *)((char *)this + 940) = -1;
  *(void *)((char *)this + 948) = 0xFFFFFFFFLL;
  *((void *)this + 114) = -1;
  *((_DWORD *)this + 230) = -1;
  *((void *)this + 121) = 0;
  *((unsigned char *)this + 1001) = 0;
  *((unsigned char *)this + 1012) = a5;
  *((_DWORD *)this + 255) = a6;
  *((_DWORD *)this + 256) = *(_DWORD *)(BlueFin::GlMeObjFactory::m_ptObjFactory + 44);
  BlueFin::GlMeMsmtMgr::Clear(this);
  GlCustomLog(127, "Size,m_otMeClkMeas,%u\n", 32);
  GlCustomLog(127, "Size,m_otMeSigMeas,%u\n", 144);
  GlCustomLog(127, "Size,m_otMsmtArray,%u\n", 40);
  GlCustomLog(127, "Size,m_otMsmtWaasArray,%u\n", 40);
  GlCustomLog(127, "Size,m_otMeFrameAidMgr,%u\n", 56);
  return this;
}

BlueFin::GlBigArray *BlueFin::GlMeObjFactory::MakeMsmtArray(BlueFin::GlMeObjFactory *this)
{
  Memory = (BlueFin::GlBigArray *)BlueFin::GlMemAlloc::glAllocateMemory(31, 40, *((uint64_t (**)(uint64_t))this + 3));
  if (!Memory) {
    return (BlueFin::GlBigArray *)*((void *)this + 37);
  }
  uint64_t v3 = Memory;
  unsigned int v4 = *((_DWORD *)this + 11);
  *((void *)this + 38) = BlueFin::GlMemAlloc::glAllocateMemory(32, 1536 * v4, *((uint64_t (**)(uint64_t))this + 3));
  *((void *)this + 40) = BlueFin::GlMemAlloc::glAllocateMemory(33, 2 * v4, *((uint64_t (**)(uint64_t))this + 3));
  uint64_t v5 = (unsigned __int16 *)BlueFin::GlMemAlloc::glAllocateMemory(34, 1150, *((uint64_t (**)(uint64_t))this + 3));
  *((void *)this + 39) = v5;
  BlueFin::GlBigArray::GlBigArray(v3, *((void **)this + 38), 1536, 0, v5, 0x23Fu, *((unsigned __int16 **)this + 40), v4);
  *((void *)this + 37) = v3;
  return v3;
}

void BlueFin::GlMeMsmtMgr::Clear(BlueFin::GlMeMsmtMgr *this)
{
  BlueFin::GlArray::Clear((uint64_t)this + 744);
  BlueFin::GlBigArray::Clear(*((void *)this + 112));
  *((_WORD *)this + 468) = 0;
  *(void *)((char *)this + 924) = -1;
  *((_DWORD *)this + 233) = -1;
  *(void *)((char *)this + 940) = -1;
  *(void *)((char *)this + 948) = 0xFFFFFFFFLL;
  *((void *)this + 114) = -1;
  *((_DWORD *)this + 230) = -1;
  *((_WORD *)this + 502) = 0;
  *((_DWORD *)this + 252) = 0;
  bzero(*(void **)this, ((4 * *((unsigned __int8 *)this + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero(*((void **)this + 11), ((4 * *((unsigned __int8 *)this + 96) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  *((_DWORD *)this + 254) = 0;
  *((_DWORD *)this + 249) = -1020657664;
  *((unsigned char *)this + 1002) = 0;
  *((unsigned char *)this + 1000) = 0;
  *((_DWORD *)this + 244) = BlueFin::scfMaxSigStrength[*((_DWORD *)this + 255) & 3];

  memset_pattern16((char *)this + 976, &memset_pattern_0, 0x14uLL);
}

uint64_t BlueFin::GlRequestImplSyncin::Create(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!result)
  {
    DeviceFaultNotify("glrequest.cpp", 1348, "Create", (char)"pvBuffer != nullptr");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glrequest.cpp", 1348, "pvBuffer != nullptr");
  }
  *(_DWORD *)(result + 16) = 6;
  *(_WORD *)(result + 20) = 1;
  *(_WORD *)(result + 24) = -1;
  *(void *)(result + 28) = -1;
  *(_DWORD *)(result + 36) = -1;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 40) = a3;
  *(_WORD *)(result + 64) = 1;
  *(void *)(result + 72) = 0;
  *(void *)(result + 80) = a5;
  *(void *)double result = &unk_270EC7E60;
  *(void *)(result + 8) = a2;
  *(void *)(result + 88) = a6;
  *(void *)(result + 96) = a7;
  *(void *)(result + 104) = 0;
  *(_WORD *)(result + 112) = 0;
  if (a4 <= 0) {
    __int16 v7 = 30;
  }
  else {
    __int16 v7 = a4;
  }
  *(_WORD *)(result + 22) = v7;
  return result;
}

BOOL BlueFin::GlPeRtiData::Deserialize(BlueFin::GlPeRtiData *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 64) {
    return 0;
  }
  uint64_t v3 = *((unsigned __int8 *)a2 + 12);
  if (v3 > 6) {
    return 0;
  }
  if (v3 > 4) {
    unsigned int U8 = BlueFin::GlSysLogEntry::GetU8(a2);
  }
  else {
    unsigned int U8 = __const__ZN7BlueFin11GlPeRtiData11DeserializeERNS_13GlSysLogEntryE_aiVersionToNumGnss[v3];
  }
  if (U8 >= 9)
  {
    DeviceFaultNotify("glpe_rti_requestor.cpp", 142, "Deserialize", (char)"iNumGnss <= _DIM(m_otRti.ganssInfoAvailList.aullImplGnssMask)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_rti_requestor.cpp", 142, "iNumGnss <= _DIM(m_otRti.ganssInfoAvailList.aullImplGnssMask)");
  }
  *((void *)this + 17) = 0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  unsigned int v7 = *((unsigned __int8 *)a2 + 12);
  if (v7 >= 6)
  {
    if (!U8)
    {
LABEL_22:
      *((_DWORD *)this + 36) = BlueFin::GlSysLogEntry::GetU32(a2);
      goto LABEL_23;
    }
    v12 = (void *)((char *)this + 16);
    uint64_t v13 = U8;
    uint64_t v14 = U8;
    do
    {
      *v12++ = BlueFin::GlSysLogEntry::GetU64(a2);
      --v14;
    }
    while (v14);
    int v15 = (void *)((char *)this + 80);
    do
    {
      *v15++ = BlueFin::GlSysLogEntry::GetU64(a2);
      --v13;
    }
    while (v13);
  }
  else
  {
    if (!U8) {
      goto LABEL_21;
    }
    uint64_t v8 = (void *)((char *)this + 16);
    uint64_t v9 = U8;
    uint64_t v10 = U8;
    do
    {
      *v8++ = BlueFin::GlSysLogEntry::GetU32(a2);
      --v10;
    }
    while (v10);
    uint64_t v11 = (void *)((char *)this + 80);
    do
    {
      *v11++ = BlueFin::GlSysLogEntry::GetU32(a2);
      --v9;
    }
    while (v9);
  }
  unsigned int v7 = *((unsigned __int8 *)a2 + 12);
LABEL_21:
  if (v7 >= 2) {
    goto LABEL_22;
  }
LABEL_23:
  BlueFin::GlSysLogEntry::CheckConsumed(a2, 175);
  return *((unsigned __int8 *)a2 + 12) > 1u;
}

uint64_t BlueFin::GlSysLogEntry::GetU64(BlueFin::GlSysLogEntry *this)
{
  if ((unint64_t)*((unsigned __int16 *)this + 10) + 8 > *((unsigned __int16 *)this + 11))
  {
    DeviceFaultNotify("glutl_slog_codec.cpp", 529, "GetU64", (char)"m_sReadIdx + sizeof(GlIntU64) <= m_sDataSize");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_slog_codec.cpp", 529, "m_sReadIdx + sizeof(GlIntU64) <= m_sDataSize");
  }
  uint64_t v2 = 0;
  uint64_t v6 = 0;
  do
  {
    uint64_t v3 = (*(uint64_t (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 24))(this);
    uint64_t v4 = *((unsigned __int16 *)this + 10);
    *((_WORD *)this + 10) = v4 + 1;
    *((unsigned char *)&v6 + v2++) = *(unsigned char *)(v3 + v4);
  }
  while (v2 != 8);
  return v6;
}

uint64_t BlueFin::GlMeSrdSatReportMgr::ReportHeartbeat(BlueFin::GlMeSrdSatReportMgr *this, int a2)
{
  *((_DWORD *)this + 14) = a2;
  *((_DWORD *)this + 15) = a2;
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 4) + 32))(*((void *)this + 4));
  uint64_t v5 = *((void *)this + 456);
  if (*(unsigned __int16 *)(v5 + 32) > (unsigned __int16)(*(_WORD *)(v5 + 34) + 1))
  {
    uint64_t v6 = (unsigned __int16)(*(_WORD *)(v5 + 34) + 1);
    while (1)
    {
      int v7 = (unsigned __int16)(*(_WORD *)(v5 + 28) + *(_WORD *)(*(void *)(v5 + 16) + 2 * v6));
      uint64_t result = BlueFin::GlBigArray::Has((BlueFin::GlBigArray *)v5, v7);
      if ((result & 1) == 0)
      {
        uint64_t v10 = "m_potArray->Has(handle)";
        DeviceFaultNotify("glinc_array.h", 362, "Next", (char)"m_potArray->Has(handle)");
        int v11 = 362;
        goto LABEL_15;
      }
      uint64_t v8 = *((void *)this + 456);
      if (v7 - *(unsigned __int16 *)(v8 + 28) >= *(unsigned __int16 *)(v8 + 30)) {
        break;
      }
      unsigned int v9 = *(unsigned __int16 *)(*(void *)(v8 + 8) + 2 * (unsigned __int16)(v7 - *(_WORD *)(v8 + 28)));
      if (v9 != 0xFFFF)
      {
        if (*(unsigned __int16 *)(v8 + 32) <= v9)
        {
          uint64_t v10 = "slot < m_usNumSlots";
          DeviceFaultNotify("glinc_array.h", 319, "EnsureValidSlot", (char)"slot < m_usNumSlots");
          int v11 = 319;
LABEL_15:
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glinc_array.h", v11, v10);
        }
        if (*(void *)v8)
        {
          if (a2 - *(_DWORD *)(*(void *)v8 + *(_DWORD *)(v8 + 24) * v9 + 24) >= 5001) {
            uint64_t result = BlueFin::GlMeSrdSatReportMgr::DestroySatReportByHandle(this, v7);
          }
        }
      }
      if (++v6 >= (unint64_t)*(unsigned __int16 *)(v5 + 32)) {
        return result;
      }
    }
    uint64_t v10 = "handle - m_usMinHandle < m_usNumHandles";
    DeviceFaultNotify("glinc_array.h", 313, "EnsureValidHandle", (char)"handle - m_usMinHandle < m_usNumHandles");
    int v11 = 313;
    goto LABEL_15;
  }
  return result;
}

void *BlueFin::GlMeSrdSvIdReportMgr::ReportMeasurements(BlueFin::GlMeSrdSvIdReportMgr *this, int a2)
{
  uint64_t v3 = (char *)this + 6368;
  *((_DWORD *)this + 1593) = a2;
  BlueFin::GlSetBase::operator&=((uint64_t)this + 6448, (uint64_t)this + 6400);
  v109 = v3;
  bzero(*((void **)this + 800), ((4 * v3[40] + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  __src = v159;
  unsigned __int8 v158 = 8;
  memset(v159, 0, 32);
  v154 = v156;
  unsigned __int8 v155 = 8;
  memset(v156, 0, 32);
  v151 = v153;
  char v152 = 19;
  memset(v153, 0, sizeof(v153));
  uint64_t v4 = *((void *)this + 1);
  if (*(unsigned __int16 *)(v4 + 832) > (unsigned __int16)(*(_WORD *)(v4 + 834) + 1))
  {
    unint64_t v5 = (unsigned __int16)(*(_WORD *)(v4 + 834) + 1);
    do
    {
      uint64_t v6 = *((void *)this + 1);
      int v7 = (unsigned __int16)(*(_WORD *)(v4 + 828) + *(_WORD *)(*(void *)(v4 + 816) + 2 * v5));
      if (!BlueFin::GlBigArray::Has((BlueFin::GlBigArray *)(v4 + 800), v7))
      {
LABEL_180:
        v102 = "m_potArray->Has(handle)";
        DeviceFaultNotify("glinc_array.h", 362, "Next", (char)"m_potArray->Has(handle)");
        v103 = "glinc_array.h";
        int v104 = 362;
        goto LABEL_179;
      }
      if (v7 - *(unsigned __int16 *)(v6 + 828) >= *(unsigned __int16 *)(v6 + 830))
      {
LABEL_177:
        v102 = "handle - m_usMinHandle < m_usNumHandles";
        DeviceFaultNotify("glinc_array.h", 313, "EnsureValidHandle", (char)"handle - m_usMinHandle < m_usNumHandles");
        v103 = "glinc_array.h";
        int v104 = 313;
        goto LABEL_179;
      }
      unsigned int v8 = *(unsigned __int16 *)(*(void *)(v6 + 808) + 2 * (unsigned __int16)(v7 - *(_WORD *)(v6 + 828)));
      if (v8 == 0xFFFF)
      {
        uint64_t v9 = 0;
      }
      else
      {
        if (*(unsigned __int16 *)(v6 + 832) <= v8)
        {
LABEL_178:
          v102 = "slot < m_usNumSlots";
          DeviceFaultNotify("glinc_array.h", 319, "EnsureValidSlot", (char)"slot < m_usNumSlots");
          v103 = "glinc_array.h";
          int v104 = 319;
          goto LABEL_179;
        }
        uint64_t v9 = *(void *)(v6 + 800) + *(_DWORD *)(v6 + 824) * v8;
      }
      BlueFin::GlMeSrdSvIdReportMsmtSlot::GetSvId(v9, &v183);
      *(_DWORD *)((char *)__src + (((unint64_t)v183 >> 3) & 0x1C)) |= 1 << (char)v183;
      int v10 = *(_DWORD *)(v9 + 140);
      if ((v10 - 10) < 4 || v10 == 17)
      {
        BlueFin::GlMeSrdSvIdReportMsmtSlot::GetSignalIndex(v9, (uint64_t)&v183);
        *(_DWORD *)&v151[4 * ((__int16)v184 >> 5)] |= 1 << v184;
      }
      ++v5;
    }
    while (v5 < *(unsigned __int16 *)(v4 + 832));
  }
  (*(void (**)(void, unsigned char **))(**((void **)this + 797) + 16))(*((void *)this + 797), &v151);
  unsigned __int8 v146 = v158;
  memcpy(v150, __src, 4 * v158);
  __int16 v148 = 0;
  unsigned __int8 v147 = 0;
  int v149 = v150[0];
  BlueFin::GlSetIterator::operator++(&v146);
  if (v147 == v146)
  {
LABEL_14:
    *((_DWORD *)this + 1624) = 0;
    goto LABEL_15;
  }
  unsigned int v44 = 0;
  unsigned int v45 = 0;
  do
  {
    v121 = &v123;
    char v122 = 4;
    v125 = v127;
    char v126 = 4;
    v128 = v130;
    char v129 = 4;
    *(void *)&v130[5] = v132;
    char v131 = 4;
    *(void *)&v132[5] = v134;
    uint64_t v46 = 22;
    char v133 = 4;
    do
    {
      v47 = &(&v121)[v46];
      *(unsigned char *)v47 = 0;
      *((_DWORD *)v47 + 1) = 0;
      ++v46;
    }
    while (v47 + 1 != (uint64_t **)&v142);
    uint64_t v48 = 24;
    do
    {
      v49 = &(&v121)[v48];
      *(unsigned char *)v49 = 0;
      *((_DWORD *)v49 + 1) = 0;
      ++v48;
    }
    while (v49 + 1 != (void *)((char *)v145 + 4));
    uint64_t v123 = 0;
    uint64_t v124 = 0;
    v127[0] = 0;
    v127[1] = 0;
    *(void *)v130 = 0;
    *(void *)&v130[2] = 0;
    *(void *)v132 = 0;
    *(void *)&v132[2] = 0;
    v134[0] = 0;
    v134[1] = 0;
    uint64_t v137 = 0;
    int v136 = 0;
    int v135 = -1;
    char v140 = 0;
    int v141 = 0;
    char v138 = 0;
    int v139 = 0;
    char v144 = 0;
    char v142 = 0;
    int v143 = 0;
    memset(v145, 0, 21);
    LOBYTE(v183) = v148;
    BlueFin::GlMeSrdSvIdReportMgr::GetMsmtStats((uint64_t)this, &v183, (uint64_t)&v121);
    v118 = v120;
    unsigned __int8 v119 = 4;
    v120[0] = 0;
    v120[1] = 0;
    unsigned int v50 = BlueFin::GlMeSrdSvIdReportMgr::ApplySatSelectionRules((uint64_t)this, (uint64_t)&v121, (uint64_t)&v118);
    LOBYTE(v183) = v119;
    memcpy(&v184, v118, 4 * v119);
    WORD1(v183) = 0;
    BYTE1(v183) = 0;
    HIDWORD(v183) = v184;
    while (1)
    {
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v183);
      if (BYTE1(v183) == v183) {
        break;
      }
      (***((void (****)(void, void))this + 798))(*((void *)this + 798), BYTE2(v183));
    }
    int v51 = 0;
    uint64_t v108 = v50 >> 5;
    uint64_t v107 = 1 << (v50 & 0x1F);
    do
    {
      BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)v116, v50, v51);
      uint64_t v53 = *((void *)this + 1);
      if (v116[0] + 100 * v117 - *(unsigned __int16 *)(v53 + 828) >= *(unsigned __int16 *)(v53 + 830)) {
        goto LABEL_177;
      }
      unsigned int v54 = *(unsigned __int16 *)(*(void *)(v53 + 808)
                                + 2
                                * (unsigned __int16)(v116[0] + 100 * v117 - *(_WORD *)(v53 + 828)));
      if (v54 == 0xFFFF) {
        goto LABEL_168;
      }
      if (*(unsigned __int16 *)(v53 + 832) <= v54) {
        goto LABEL_178;
      }
      uint64_t v55 = *(void *)(v53 + 800);
      if (!v55) {
        goto LABEL_168;
      }
      uint64_t v56 = v55 + *(_DWORD *)(v53 + 824) * v54;
      if (!v51)
      {
        int v62 = *(_DWORD *)(v56 + 164);
        BOOL v63 = v62 == 4 || v62 == 2;
        if (v63 && ((v107 & v128[v108]) != 0 || (v107 & *((_DWORD *)v125 + v108)) != 0))
        {
          if (*(_DWORD *)(v56 + 116) == 1)
          {
            char v57 = 0;
            goto LABEL_66;
          }
          unsigned int v106 = v45;
          int v64 = *(unsigned __int8 *)(v56 + 160);
          uint64_t v65 = *(unsigned __int8 *)(v56 + 100);
          unsigned __int8 v160 = *(unsigned char *)(v56 + 100);
          uint64_t v66 = *(unsigned __int8 *)(v56 + 112);
          if (v66 >= 0x64)
          {
            v102 = "UpdateFrameManager SatId(%d) >= _DIM(%d)";
            DeviceFaultNotify("glmesrd_svid_report_mgr.cpp", 1305, "UpdateFrameManager", (char)"UpdateFrameManager SatId(%d) >= _DIM(%d)");
            v103 = "glmesrd_svid_report_mgr.cpp";
            int v104 = 1305;
            goto LABEL_179;
          }
          if (v65 >= 0xBD)
          {
            v102 = "UpdateFrameManager SvId(%d) >= _DIM(%d)";
            DeviceFaultNotify("glmesrd_svid_report_mgr.cpp", 1308, "UpdateFrameManager", (char)"UpdateFrameManager SvId(%d) >= _DIM(%d)");
            v103 = "glmesrd_svid_report_mgr.cpp";
            int v104 = 1308;
            goto LABEL_179;
          }
          int v67 = *((unsigned __int8 *)this + v66 + 32);
          BOOL v69 = (v67 - 1) < 0xBCu && v67 != v65;
          int v70 = *((unsigned __int8 *)this + v65 + 1336);
          if (v70 != 255 && v70 != v66) {
            BOOL v69 = 1;
          }
          int v72 = *(_DWORD *)(v56 + 84);
          if ((v72 & 0x100) == 0)
          {
            v102 = "otDspMeas.otFlags32.Has(GLME_DSPMEAS_EPOCH_CNT_VALID)";
            DeviceFaultNotify("glmesrd_svid_report_mgr.cpp", 1327, "UpdateFrameManager", (char)"otDspMeas.otFlags32.Has(GLME_DSPMEAS_EPOCH_CNT_VALID)");
            v103 = "glmesrd_svid_report_mgr.cpp";
            int v104 = 1327;
            goto LABEL_179;
          }
          if ((v72 & 0x10) == 0)
          {
            v102 = "otDspMeas.otFlags32.Has(GLME_DSPMEAS_TIMETAG_VALID)";
            DeviceFaultNotify("glmesrd_svid_report_mgr.cpp", 1328, "UpdateFrameManager", (char)"otDspMeas.otFlags32.Has(GLME_DSPMEAS_TIMETAG_VALID)");
            v103 = "glmesrd_svid_report_mgr.cpp";
            int v104 = 1328;
            goto LABEL_179;
          }
          if (!v65)
          {
            v102 = "0";
            DeviceFaultNotify("glmesrd_svid_report_mgr.cpp", 1363, "UpdateFrameManager", (char)"0");
            v103 = "glmesrd_svid_report_mgr.cpp";
            int v104 = 1363;
LABEL_179:
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v103, v104, v102);
          }
          if (v65 >= 0x21)
          {
            if (v65 < 0x34)
            {
              unsigned int v73 = 2;
            }
            else if (v65 >= 0x42)
            {
              if (v65 < 0x4C) {
                goto LABEL_104;
              }
              if (v65 >= 0x8B)
              {
                if (v65 >= 0xAF) {
                  goto LABEL_104;
                }
                unsigned int v73 = 4;
              }
              else if (*(_DWORD *)(v56 + 140) == 11)
              {
                unsigned int v73 = 20;
              }
              else
              {
                unsigned int v73 = 1;
              }
            }
            else if (*(_DWORD *)(v56 + 140) == 12)
            {
              unsigned int v73 = 20;
            }
            else
            {
              unsigned int v73 = 10;
            }
          }
          else
          {
LABEL_104:
            unsigned int v73 = 20;
          }
          double v76 = (float)(*(float *)(v56 + 32) + 1.0);
          if ((v72 & 0x40) == 0) {
            double v76 = 1.0;
          }
          LODWORD(v52) = *(_DWORD *)(v56 + 48);
          v105 = (unsigned int *)((char *)this + 4 * v66 + 132);
          double v77 = (double)v52 - (double)*v105;
          if (v77 < 0.0) {
            BOOL v69 = 1;
          }
          v78 = (double *)((char *)this + 8 * v66);
          if (v69 || fabs(v77 + v76 * (*(double *)(v56 + 24) - v78[67]) * -1000.0) >= (double)v73)
          {
            v183 = (int *)&unk_270EBECD8;
            __int16 v186 = 0;
            uint64_t v187 = 0;
            v188 = 0;
            char v189 = 0;
            long long v190 = 0u;
            long long v191 = 0u;
            long long v192 = 0u;
            long long v193 = 0u;
            long long v194 = 0u;
            long long v195 = 0u;
            memset(v196, 0, sizeof(v196));
            long long v197 = 0u;
            memset(v198, 0, sizeof(v198));
            LOBYTE(v184) = 0;
            v161 = &unk_270EBECD8;
            __int16 v163 = 0;
            uint64_t v164 = 0;
            uint64_t v165 = 0;
            char v166 = 0;
            long long v167 = 0u;
            long long v168 = 0u;
            long long v169 = 0u;
            long long v170 = 0u;
            long long v171 = 0u;
            long long v172 = 0u;
            long long v173 = 0u;
            long long v174 = 0u;
            long long v175 = 0u;
            long long v176 = 0u;
            long long v177 = 0u;
            long long v178 = 0u;
            long long v179 = 0u;
            long long v180 = 0u;
            long long v181 = 0u;
            long long v182 = 0u;
            LOBYTE(v162[0]) = 0;
            BYTE1(v184) = v65;
            BYTE1(v162[0]) = v65;
            int v185 = 6;
            v162[1] = 4;
            if ((v65 + 117) <= 0x23u)
            {
              char v166 = v64;
              char v189 = v64;
            }
            (*(void (**)(void, int **, void **))(**((void **)this + 797) + 48))(*((void *)this + 797), &v183, &v161);
            v78 = (double *)((char *)this + 8 * v66);
          }
          if (v64) {
            BOOL v79 = 0;
          }
          else {
            BOOL v79 = (v65 - 52) > 0xDu;
          }
          if (!v79)
          {
            v80 = v78;
            (*(void (**)(void, unsigned __int8 *, void, double))(**((void **)this + 797) + 40))(*((void *)this + 797), &v160, *(unsigned int *)(v56 + 48), *(double *)(v56 + 24));
            v78 = v80;
            uint64_t v65 = v160;
          }
          char v57 = 0;
          *((unsigned char *)this + v66 + 32) = v65;
          *((unsigned char *)this + v65 + 1336) = v66;
          v78[67] = *(double *)(v56 + 24);
          unsigned int *v105 = *(_DWORD *)(v56 + 48);
          unsigned int v45 = v106;
          goto LABEL_66;
        }
      }
      char v57 = 1;
LABEL_66:
      if (*(_DWORD *)(v56 + 140) != 8) {
        unsigned char *v109 = 1;
      }
      if (!v51)
      {
        BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)&v183, v50, 2);
        uint64_t v58 = *((void *)this + 1);
        if (v183 + 100 * BYTE4(v183) - *(unsigned __int16 *)(v58 + 828) >= *(unsigned __int16 *)(v58 + 830)) {
          goto LABEL_177;
        }
        unsigned int v59 = *(unsigned __int16 *)(*(void *)(v58 + 808)
                                  + 2
                                  * (unsigned __int16)(v183 + 100 * BYTE4(v183) - *(_WORD *)(v58 + 828)));
        if (v59 != 0xFFFF)
        {
          if (*(unsigned __int16 *)(v58 + 832) <= v59) {
            goto LABEL_178;
          }
          uint64_t v60 = *(void *)(v58 + 800);
          if (v60)
          {
            uint64_t v61 = v60 + *(_DWORD *)(v58 + 824) * v59;
            if (*(unsigned char *)(v61 + 162))
            {
              if (*(double *)(v56 + 24) >= 0.0 && *(double *)(v61 + 24) >= 0.0 && *(float *)(v61 + 40) >= 17.0) {
                *(void *)(v56 + 88) = 0x400000004;
              }
            }
            else if (*(_DWORD *)(v56 + 48) {
                   && *(_DWORD *)(v61 + 48)
            }
                   && *(unsigned __int8 *)(v61 + 112) == *(unsigned __int8 *)(v56 + 112))
            {
              double v74 = vabdd_f64(*(double *)(v56 + 24), *(double *)(v61 + 24)) * 1000.0;
              if (v74 <= 0.0)
              {
                double v75 = 0.0;
                if (v74 < 0.0) {
                  double v75 = ceil(v74 + -0.5);
                }
              }
              else
              {
                double v75 = floor(v74 + 0.5);
              }
              double v81 = 20.0;
              if ((*(unsigned char *)(v56 + 100) + 117) < 0x24u) {
                double v81 = 4.0;
              }
              if (fmod(v75, v81) > 0.1) {
                (*(void (**)(void, int **))(**((void **)this + 798) + 72))(*((void *)this + 798), &v183);
              }
            }
          }
        }
      }
      unsigned int v82 = *(_DWORD *)(v56 + 84);
      (*(void (**)(void, uint64_t))(**((void **)this + 797) + 24))(*((void *)this + 797), v56);
      if (v51 == 2
        && (*(unsigned int (**)(void, void))(**((void **)this + 3) + 40))(*((void *)this + 3), *(unsigned __int8 *)(v56 + 112)))
      {
        v83 = (BlueFin::GlMeSrdMultiPeakResults *)(*(uint64_t (**)(void, void))(**((void **)this + 3)
                                                                                            + 16))(*((void *)this + 3), *(unsigned __int8 *)(v56 + 112));
        if (!v83)
        {
          v102 = "potGridSlot != nullptr";
          DeviceFaultNotify("glmesrd_svid_report_mgr.cpp", 1116, "ReportMeasurements", (char)"potGridSlot != nullptr");
          v103 = "glmesrd_svid_report_mgr.cpp";
          int v104 = 1116;
          goto LABEL_179;
        }
        unsigned int v85 = v44;
        unsigned int v86 = v45;
        uint64_t v87 = *((void *)this + 797);
        float v88 = BlueFin::GlMeSrdMultiPeakResults::ToPeGridMeas(v83, (const BlueFin::GlMeDSPMeas *)v56, (uint64_t)&v183, v84);
        v89 = *(void (**)(uint64_t, int **, float))(*(void *)v87 + 32);
        uint64_t v90 = v87;
        unsigned int v45 = v86;
        unsigned int v44 = v85;
        v89(v90, &v183, v88);
      }
      v44 += (v82 >> 11) & 1;
      ++v45;
      if (BYTE4(v145[2])) {
        char v91 = 1;
      }
      else {
        char v91 = v57;
      }
      if ((v91 & 1) == 0)
      {
        unsigned int v92 = v44;
        unsigned int v93 = v45;
        int v94 = *(unsigned __int8 *)(v56 + 100);
        BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)&v183, *(unsigned __int8 *)(v56 + 112), *(_DWORD *)(v56 + 104));
        if (BlueFin::GlBigArray::Has((BlueFin::GlBigArray *)(*((void *)this + 1) + 800), v183 + 100 * BYTE4(v183))&& (*(unsigned int (**)(void, void))(**((void **)this + 2) + 40))(*((void *)this + 2), v183))
        {
          uint64_t v95 = (*(uint64_t (**)(void, void))(**((void **)this + 2) + 16))(*((void *)this + 2), v183);
          BlueFin::GlMeSrdSvIdReportDataBitsSlot::GetSvId(v95, &v161);
          if (v94 != v161)
          {
            v102 = "otSvId == potDataBitSlot->GetSvId()";
            DeviceFaultNotify("glmesrd_svid_report_mgr.cpp", 1224, "SendDataBitsIfAvailable", (char)"otSvId == potDataBitSlot->GetSvId()");
            v103 = "glmesrd_svid_report_mgr.cpp";
            int v104 = 1224;
            goto LABEL_179;
          }
          if (!(*(unsigned __int16 *)(v95 + 16) | *(unsigned __int16 *)(v95 + 320)))
          {
            v102 = "bFllBitsValid || bPllBitsValid";
            DeviceFaultNotify("glmesrd_svid_report_mgr.cpp", 1241, "SendDataBitsIfAvailable", (char)"bFllBitsValid || bPllBitsValid");
            v103 = "glmesrd_svid_report_mgr.cpp";
            int v104 = 1241;
            goto LABEL_179;
          }
          unsigned int v96 = *(_DWORD *)(v95 + 20);
          if (*(_WORD *)(v95 + 16) && *(_WORD *)(v95 + 320) && v96 != *(_DWORD *)(v95 + 324))
          {
            v102 = "potDataBitSlot->m_otFllBits.m_ulEpochCnt == potDataBitSlot->m_otPllBits.m_ulEpochCnt";
            DeviceFaultNotify("glmesrd_svid_report_mgr.cpp", 1246, "SendDataBitsIfAvailable", (char)"potDataBitSlot->m_otFllBits.m_ulEpochCnt == potDataBitSlot->m_otPllBits.m_ulEpochCnt");
            v103 = "glmesrd_svid_report_mgr.cpp";
            int v104 = 1246;
            goto LABEL_179;
          }
          unsigned int v97 = *(_DWORD *)(v56 + 48);
          if (v97 == v96
            || v97 == *(_DWORD *)(v95 + 324)
            || *(unsigned char *)(v95 + 40)
            && (vabds_f32((float)v97, (float)v96) >= 250.0 ? (BOOL v98 = (*(_DWORD *)(v95 + 12) & 0x100) == 0) : (BOOL v98 = 0),
                !v98))
          {
            (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 797) + 48))(*((void *)this + 797), v95, v95 + 304);
          }
        }
        uint64_t v99 = *((void *)this + 797);
        v113[0] = *(unsigned char *)(v56 + 100);
        int v100 = *(_DWORD *)(v56 + 104);
        __int16 v115 = *(_WORD *)(v56 + 108);
        int v114 = v100;
        if ((*(unsigned int (**)(uint64_t, char *))(*(void *)v99 + 64))(v99, v113)) {
          *(_DWORD *)((char *)v154 + (((unint64_t)*(unsigned __int8 *)(v56 + 100) >> 3) & 0x1C)) |= 1 << *(unsigned char *)(v56 + 100);
        }
        unsigned int v45 = v93;
        unsigned int v44 = v92;
      }
LABEL_168:
      ++v51;
    }
    while (v51 != 4);
    BlueFin::GlSetIterator::operator++(&v146);
  }
  while (v147 != v146);
  if (!v45 || (float)((float)v44 / (float)v45) <= 0.1) {
    goto LABEL_14;
  }
  unsigned int v101 = *((_DWORD *)this + 1624) + 1;
  *((_DWORD *)this + 1624) = v101;
  if (v101 >= 3)
  {
    v102 = "m_ulConsecutiveBlockMarginViolations < MAX_NUM_CONSECUTIVE_BLOCK_MARGIN_VIOLATION";
    DeviceFaultNotify("glmesrd_svid_report_mgr.cpp", 1152, "ReportMeasurements", (char)"m_ulConsecutiveBlockMarginViolations < MAX_NUM_CONSECUTIVE_BLOCK_MARGIN_VIOLATION");
    v103 = "glmesrd_svid_report_mgr.cpp";
    int v104 = 1152;
    goto LABEL_179;
  }
LABEL_15:
  unsigned int v11 = 0;
  v12 = (char *)v154 + 4 * v155 - 4;
  do
  {
    if (*v12)
    {
      unsigned int v13 = *v12 - (((*v12 >> 1) & 0x5B6DB6DB) + ((*v12 >> 2) & 0x9249249));
      unsigned int v11 = ((v13 + (v13 >> 3)) & 0xC71C71C7) + v11 - 63 * (((v13 + (v13 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    --v12;
  }
  while (v12 >= v154);
  if ((v11 & 0xFE) != 0)
  {
    LOBYTE(v161) = v155;
    memcpy(v162, v154, 4 * v155);
    WORD1(v161) = 0;
    BYTE1(v161) = 0;
    HIDWORD(v161) = v162[0];
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v161);
    if (BYTE1(v161) != v161)
    {
      uint64_t v14 = &v185;
      int v15 = &v190;
      unsigned int v16 = &v192;
      unsigned __int8 v17 = &v194;
      unsigned __int8 v18 = v196;
      do
      {
        LOBYTE(v118) = BYTE2(v161);
        v183 = v14;
        LOBYTE(v184) = 4;
        v188 = v15;
        char v189 = 4;
        *(void *)((char *)&v191 + 4) = v16;
        BYTE12(v191) = 4;
        *(void *)((char *)&v193 + 4) = v17;
        BYTE12(v193) = 4;
        *(void *)((char *)&v195 + 4) = v18;
        uint64_t v19 = 22;
        BYTE12(v195) = 4;
        do
        {
          int v20 = &(&v183)[v19];
          *(unsigned char *)int v20 = 0;
          *((_DWORD *)v20 + 1) = 0;
          ++v19;
        }
        while (v20 + 1 != (int **)((char *)&v197 + 4));
        uint64_t v21 = 24;
        do
        {
          v22 = &(&v183)[v21];
          *(unsigned char *)v22 = 0;
          *((_DWORD *)v22 + 1) = 0;
          ++v21;
        }
        while (v22 + 1 != (int **)((char *)v198 + 4));
        *(void *)uint64_t v14 = 0;
        *((void *)v14 + 1) = 0;
        v23 = v14;
        *(void *)int v15 = 0;
        *((void *)v15 + 1) = 0;
        v24 = v15;
        *(void *)unsigned int v16 = 0;
        *((void *)v16 + 1) = 0;
        v25 = v16;
        *(void *)unsigned __int8 v17 = 0;
        *((void *)v17 + 1) = 0;
        v26 = v17;
        *unsigned __int8 v18 = 0;
        v18[1] = 0;
        v27 = v18;
        *(void *)((char *)&v196[1] + 12) = 0;
        *(void *)((char *)&v196[1] + 4) = 0xFFFFFFFFLL;
        BYTE12(v196[2]) = 0;
        LODWORD(v197) = 0;
        BYTE4(v196[2]) = 0;
        DWORD2(v196[2]) = 0;
        BYTE12(v197) = 0;
        BYTE4(v197) = 0;
        DWORD2(v197) = 0;
        memset(v198, 0, 21);
        BlueFin::GlMeSrdSvIdReportMgr::GetMsmtStats((uint64_t)this, &v118, (uint64_t)&v183);
        v121 = &v123;
        char v122 = 4;
        uint64_t v123 = 0;
        uint64_t v124 = 0;
        unsigned int v28 = BlueFin::GlMeSrdSvIdReportMgr::ApplySatSelectionRules((uint64_t)this, (uint64_t)&v183, (uint64_t)&v121);
        BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)&v146, v28, 0);
        uint64_t v29 = *((void *)this + 1);
        if (v146 + 100 * v149 - *(unsigned __int16 *)(v29 + 828) >= *(unsigned __int16 *)(v29 + 830)) {
          goto LABEL_177;
        }
        unsigned int v30 = *(unsigned __int16 *)(*(void *)(v29 + 808)
                                  + 2 * (unsigned __int16)(v146 + 100 * v149 - *(_WORD *)(v29 + 828)));
        if (v30 == 0xFFFF)
        {
          uint64_t v31 = 0;
        }
        else
        {
          if (*(unsigned __int16 *)(v29 + 832) <= v30) {
            goto LABEL_178;
          }
          uint64_t v31 = *(void *)(v29 + 800) + *(_DWORD *)(v29 + 824) * v30;
        }
        uint64_t v32 = *((void *)this + 797);
        v110[0] = *(unsigned char *)(v31 + 100);
        int v111 = *(_DWORD *)(v31 + 104);
        __int16 v112 = *(_WORD *)(v31 + 108);
        (*(void (**)(uint64_t, char *))(*(void *)v32 + 72))(v32, v110);
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v161);
        uint64_t v14 = v23;
        int v15 = v24;
        unsigned int v16 = v25;
        unsigned __int8 v17 = v26;
        unsigned __int8 v18 = v27;
      }
      while (BYTE1(v161) != v161);
    }
  }
  uint64_t v33 = 0;
  uint64_t v34 = *((void *)this + 793);
  do
  {
    if (!*(unsigned char *)(v34 + v33) || (char v35 = *(unsigned char *)(v34 + v33) - 1, (*(unsigned char *)(v34 + v33) = v35) == 0)) {
      *(unsigned char *)(v34 + v33 + 1) = 0;
    }
    v33 += 2;
  }
  while (v33 != 200);
  uint64_t v36 = *((void *)this + 1);
  if (*(unsigned __int16 *)(v36 + 832) > (unsigned __int16)(*(_WORD *)(v36 + 834) + 1))
  {
    unint64_t v37 = (unsigned __int16)(*(_WORD *)(v36 + 834) + 1);
    do
    {
      int v38 = (unsigned __int16)(*(_WORD *)(v36 + 828) + *(_WORD *)(*(void *)(v36 + 816) + 2 * v37));
      if (!BlueFin::GlBigArray::Has((BlueFin::GlBigArray *)(v36 + 800), v38)) {
        goto LABEL_180;
      }
      uint64_t v39 = *((void *)this + 1);
      if (v38 - *(unsigned __int16 *)(v39 + 828) >= *(unsigned __int16 *)(v39 + 830)) {
        goto LABEL_177;
      }
      unsigned int v40 = *(unsigned __int16 *)(*(void *)(v39 + 808) + 2 * (unsigned __int16)(v38 - *(_WORD *)(v39 + 828)));
      if (v40 != 0xFFFF && *(unsigned __int16 *)(v39 + 832) <= v40) {
        goto LABEL_178;
      }
      ++v37;
      BlueFin::GlBigArray::Remove(v39 + 800, v38);
    }
    while (v37 < *(unsigned __int16 *)(v36 + 832));
  }
  (*(void (**)(int **__return_ptr))(**((void **)this + 2) + 80))(&v183);
  while (v184 < *((unsigned __int8 *)v183 + 38))
  {
    uint64_t v41 = BlueFin::GlArrayIterator::Next((BlueFin::GlArrayIterator *)&v183);
    (*(void (**)(void, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), v41);
    (*(void (**)(void, uint64_t))(**((void **)this + 2) + 32))(*((void *)this + 2), v41);
  }
  uint64_t result = (*(void *(**)(int **__return_ptr))(**((void **)this + 3) + 80))(&v183);
  while (v184 < *((unsigned __int8 *)v183 + 38))
  {
    uint64_t v43 = BlueFin::GlArrayIterator::Next((BlueFin::GlArrayIterator *)&v183);
    (*(void (**)(void, uint64_t))(**((void **)this + 3) + 16))(*((void *)this + 3), v43);
    uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 3) + 32))(*((void *)this + 3), v43);
  }
  return result;
}

void BlueFin::GlMeDspMeasListener::SetDSPMeas(BlueFin::GlMeMeasAidFilter **this, const BlueFin::GlMeDSPMeas *a2)
{
}

void BlueFin::GlMeMeasAidFilter::SetDSPMeas(BlueFin::GlMeMeasAidFilter *this, const BlueFin::GlMeDSPMeas *a2)
{
  *((_DWORD *)BlueFin::GlMeMeasSelfAidFilter::m_otSetMsmtSignalIds + (*((__int16 *)a2 + 54) >> 5)) |= 1 << *((_WORD *)a2 + 54);
  if (BlueFin::GlMeMeasSelfAidFilter::m_IsSelfAidOn) {
    BOOL v2 = *((_DWORD *)a2 + 35) == 14;
  }
  else {
    BOOL v2 = 0;
  }
  if (!v2)
  {
    BlueFin::GlMeMsmtHolder::SetDSPMeas((BlueFin::GlMeMeasAidFilter *)((char *)this + 11680), a2);
    BlueFin::GlMeMsmtMgr::SetDSPMeas((BlueFin::GlMeMeasAidFilter *)((char *)this + 10624), a2);
  }
}

void BlueFin::GlMeMsmtHolder::SetDSPMeas(BlueFin::GlMeMsmtHolder *this, const BlueFin::GlMeDSPMeas *a2)
{
  v49[0] = *((unsigned char *)a2 + 100);
  int v50 = *((_DWORD *)a2 + 26);
  unsigned __int16 v51 = *((_WORD *)a2 + 54);
  if (v49[0] - 1 > 0xBB) {
    return;
  }
  int v4 = *((_DWORD *)a2 + 35);
  if (v4 == 8)
  {
LABEL_6:
    char v5 = 1;
    goto LABEL_8;
  }
  if (v4 == 9 && v49[0] >= 0x8Bu)
  {
    if (v49[0] > 0xAEu)
    {
      char v5 = 0;
      goto LABEL_9;
    }
    goto LABEL_6;
  }
  char v5 = 0;
LABEL_8:
  if (v49[0] - 33 < 0x13) {
    goto LABEL_10;
  }
LABEL_9:
  if ((*((unsigned char *)a2 + 86) & 1) == 0) {
    goto LABEL_10;
  }
  uint64_t v31 = &off_270EBF450;
  LOBYTE(v32) = 0;
  int v33 = -1;
  __int16 v34 = 575;
  uint64_t v35 = 0;
  int v36 = 0;
  long long v37 = xmmword_263BABE60;
  int v38 = 2139095039;
  double v39 = 0.0;
  float v40 = 3.4028e38;
  __int16 v41 = 0;
  uint64_t v42 = 0x7FEFFFFFFFFFFFFFLL;
  int v43 = -1;
  __int16 v44 = -1;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v45 = 0;
  int v48 = 0;
  uint64_t v7 = *((void *)this + 2);
  double v8 = *((double *)a2 + 3);
  int v30 = 1;
  if (((*(uint64_t (**)(uint64_t, unsigned char *, void (***)(BlueFin::GlMeAcqWin *__hidden), int *, void, void, double, double, double))(*(void *)v7 + 24))(v7, v49, &v31, &v30, 0, 0, v8 * 1000.0, 0.0, 0.0) & 1) == 0)return; {
  if (v49[0] < 0x34u)
  }
  {
    float v9 = v40;
    float v10 = 0.00015152;
LABEL_41:
    if (v9 < v10) {
      goto LABEL_42;
    }
    goto LABEL_10;
  }
  float v9 = v40;
  if (v49[0] >= 0x42u && v40 < 0.00015152)
  {
LABEL_42:
    double v23 = *((double *)a2 + 3) * 1000.0 - floor(*((double *)a2 + 3) * 1000.0) - (v39 * 1000.0 - floor(v39 * 1000.0));
    if (v23 < 0.0) {
      double v23 = -v23;
    }
    if (v23 > 0.0205) {
      char v24 = 1;
    }
    else {
      char v24 = v5;
    }
    if (v24) {
      return;
    }
    goto LABEL_11;
  }
  if (v49[0] <= 0x41u)
  {
    float v10 = 0.00030333;
    goto LABEL_41;
  }
LABEL_10:
  if (v5) {
    return;
  }
LABEL_11:
  if (BlueFin::GlBigArray::Has((BlueFin::GlBigArray *)(*((void *)this + 15) + 1152), v51))
  {
    uint64_t v6 = BlueFin::GlSignalIdArray::Get(*((void *)this + 15), (uint64_t)v49);
LABEL_52:
    BlueFin::GlMeDSPMeas::operator=(v6, (uint64_t)a2);
    *(_DWORD *)(*((void *)this + 4) + 4 * ((__int16)v51 >> 5)) |= 1 << v51;
    float v25 = *((float *)a2 + 9);
    float v26 = BlueFin::GlMeMsmtMgr::CurrentCrossCorrThreshSNR_Get(*((BlueFin::GlMeMsmtMgr **)this + 1));
    int v27 = *(_DWORD *)(v6 + 84);
    if (v25 >= v26) {
      unsigned int v28 = v27 & 0xFFFF7FFF;
    }
    else {
      unsigned int v28 = v27 | 0x8000;
    }
    *(_DWORD *)(v6 + 84) = v28;
    return;
  }
  unsigned int v11 = (unsigned __int16 *)*((void *)this + 15);
  unsigned int v12 = v11[592];
  unsigned __int16 v13 = v11[593];
  if (*((_DWORD *)this + 4444) > (int)(unsigned __int16)(v12 + ~v13))
  {
    uint64_t v14 = BlueFin::GlBigArray::Add((BlueFin::GlBigArray *)(v11 + 576), v51);
    if (!v14)
    {
      DeviceFaultNotify("glme_msmtholder.cpp", 417, "SetDSPMeas", (char)"0");
      int v15 = 417;
      goto LABEL_63;
    }
LABEL_51:
    uint64_t v6 = (uint64_t)v14;
    *(void *)uint64_t v14 = &unk_270EBECA8;
    v14[21] = 0;
    *((unsigned char *)v14 + 100) = 0;
    v14[26] = -1;
    *((_WORD *)v14 + 54) = 575;
    BlueFin::GlMeDSPMeas::init((uint64_t)v14, (uint64_t)v49);
    goto LABEL_52;
  }
  uint64_t v31 = (void (**)(BlueFin::GlMeAcqWin *__hidden))(v11 + 576);
  unsigned __int16 v32 = v13 + 1;
  if (v12 > (unsigned __int16)(v13 + 1))
  {
    int v16 = 0;
    int v17 = 0;
    __int16 v18 = 575;
    double v19 = 4294967300.0;
    do
    {
      BlueFin::GlSignalIdArrayIterator::Next((BlueFin::GlSignalIdArrayIterator *)&v31, (uint64_t)v52);
      uint64_t v20 = BlueFin::GlSignalIdArray::Get(*((void *)this + 15), (uint64_t)v52);
      int v21 = *(_DWORD *)(v20 + 140);
      BOOL v22 = v21 == 14 || v21 == 16;
      if (v22
        || v17 != 14
        && v17 != 16
        && *(_DWORD *)(v20 + 140) <= 0x11u
        && (((1 << v21) & 0x23C00) != 0 || ((1 << v21) & 0x8300) != 0)
        && *(double *)(v20 + 24) < v19)
      {
        int v16 = *(unsigned __int8 *)(v20 + 100);
        __int16 v18 = *(_WORD *)(v20 + 108);
        int v17 = *(_DWORD *)(v20 + 140);
        double v19 = *(double *)(v20 + 24);
      }
    }
    while (v32 < *((unsigned __int16 *)v31 + 16));
    if (v16)
    {
      BlueFin::GlBigArray::Remove(*((void *)this + 15) + 1152, (unsigned __int16)v18);
      BlueFin::GlSetBase::Remove((uint64_t)this + 32, v18);
      uint64_t v14 = BlueFin::GlBigArray::Add((BlueFin::GlBigArray *)(*((void *)this + 15) + 1152), v51);
      if (v14) {
        goto LABEL_51;
      }
      DeviceFaultNotify("glme_msmtholder.cpp", 428, "SetDSPMeas", (char)"0");
      int v15 = 428;
LABEL_63:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_msmtholder.cpp", v15, "0");
    }
  }
  int v29 = *((_DWORD *)a2 + 35);
  if (((v29 - 10) < 4 || v29 == 17) && *((int *)this + 4444) >= 100)
  {
    DeviceFaultNotify("glme_msmtholder.cpp", 440, "SetDSPMeas", (char)"0");
    int v15 = 440;
    goto LABEL_63;
  }
}

void BlueFin::GlMeMsmtMgr::SetDSPMeas(BlueFin::GlMeMsmtMgr *this, const BlueFin::GlMeDSPMeas *a2)
{
  char v5 = (_DWORD *)((char *)a2 + 104);
  int v4 = *((_DWORD *)a2 + 26);
  char v6 = *((unsigned char *)a2 + 100);
  v70[0] = v6;
  int v71 = v4;
  __int16 v72 = *((_WORD *)a2 + 54);
  if ((v6 - 1) > 0xBBu)
  {
LABEL_123:
    if ((*((unsigned char *)a2 + 85) & 0x40) == 0)
    {
      double v65 = *((double *)a2 + 3);
      if (v65 > *((double *)this + 29)) {
        *((double *)this + 29) = v65;
      }
    }
    return;
  }
  int v7 = *((_DWORD *)a2 + 35);
  if ((v7 - 8) >= 2)
  {
    if (v7 == 14)
    {
LABEL_9:
      int v10 = 0;
      goto LABEL_11;
    }
    if (v7 != 15)
    {
      int v10 = 1;
LABEL_11:
      uint64_t MsmtSlotPtr = BlueFin::GlMeMsmtMgr::GetMsmtSlotPtr(this, (const BlueFin::GlSignalId *)v70, 0, v10);
      if (!MsmtSlotPtr) {
        return;
      }
      if (*((unsigned __int8 *)a2 + 100) != v70[0] || *v5 != v71)
      {
        uint64_t v66 = "rMeas.otSignalId == otSignalId";
        DeviceFaultNotify("glme_msmtmgr.cpp", 609, "SetDSPMeas", (char)"rMeas.otSignalId == otSignalId");
        int v67 = "glme_msmtmgr.cpp";
        int v68 = 609;
        goto LABEL_128;
      }
      uint64_t v12 = MsmtSlotPtr;
      *(_DWORD *)(*(void *)this + 4 * (v72 >> 5)) |= 1 << v72;
      *(unsigned char *)(MsmtSlotPtr + 112) = *((unsigned char *)a2 + 112);
      *(void *)(MsmtSlotPtr + 88) = *((void *)a2 + 11);
      *(_DWORD *)(MsmtSlotPtr + 96) = *((_DWORD *)a2 + 24);
      *(_DWORD *)(MsmtSlotPtr + 132) = *((_DWORD *)a2 + 33);
      *(_DWORD *)(MsmtSlotPtr + 136) = *((_DWORD *)a2 + 34);
      *(_DWORD *)(MsmtSlotPtr + 140) = *((_DWORD *)a2 + 35);
      int v13 = *((_DWORD *)a2 + 21);
      if ((v13 & 0x10) == 0)
      {
        uint64_t v66 = "0";
        DeviceFaultNotify("glme_msmtmgr.cpp", 667, "SetDSPMeas", (char)"0");
        int v67 = "glme_msmtmgr.cpp";
        int v68 = 667;
        goto LABEL_128;
      }
      int v14 = *(_DWORD *)(MsmtSlotPtr + 84);
      double v15 = *((double *)a2 + 3);
      double v16 = 0.0;
      if ((v14 & 0x10) != 0)
      {
        double v17 = *((float *)a2 + 16);
        if ((v13 & 0x20) == 0) {
          double v17 = -0.0;
        }
        double v16 = v15 - *(double *)(MsmtSlotPtr + 24) + v17;
        if ((v14 & 0x20) != 0) {
          double v16 = v16 - *(float *)(MsmtSlotPtr + 64);
        }
      }
      *(double *)(MsmtSlotPtr + 24) = v15;
      unsigned int v18 = v14 | 0x10;
      *(_DWORD *)(MsmtSlotPtr + 84) = v14 | 0x10;
      *(_DWORD *)(MsmtSlotPtr + 44) = *((_DWORD *)a2 + 11);
      if ((*((unsigned char *)a2 + 84) & 2) != 0)
      {
        *(_DWORD *)(MsmtSlotPtr + 36) = *((_DWORD *)a2 + 9);
        *(_DWORD *)(MsmtSlotPtr + 84) = v14 | 0x12;
        float v19 = *((float *)a2 + 9);
        if (!*((unsigned char *)this + 1000) || v19 > *((float *)this + 249))
        {
          *((float *)this + 249) = v19;
          *((unsigned char *)this + 1000) = 1;
        }
        unsigned int v18 = *(_DWORD *)(MsmtSlotPtr + 84) & 0xFFFF7FFF | ((v19 < BlueFin::GlMeMsmtMgr::CurrentCrossCorrThreshSNR_Get(this)) << 15);
        *(_DWORD *)(v12 + 84) = v18;
        uint64_t v20 = *((void *)this + 121);
        if (v20)
        {
          (*(void (**)(uint64_t, void, unsigned char *, float))(*(void *)v20 + 40))(v20, *((unsigned __int8 *)a2 + 112), v70, *((float *)a2 + 9));
          unsigned int v18 = *(_DWORD *)(v12 + 84);
        }
      }
      if ((*((unsigned char *)a2 + 86) & 4) != 0)
      {
        *(_DWORD *)(v12 + 40) = *((_DWORD *)a2 + 10);
        v18 |= 0x40000u;
        *(_DWORD *)(v12 + 84) = v18;
        uint64_t v21 = *((void *)this + 121);
        if (v21)
        {
          (*(void (**)(uint64_t, void, unsigned char *, float))(*(void *)v21 + 40))(v21, *((unsigned __int8 *)a2 + 112), v70, *((float *)a2 + 10));
          unsigned int v18 = *(_DWORD *)(v12 + 84);
        }
      }
      unsigned int v22 = v18 & 0xFFFF7FFF | (((*((_DWORD *)a2 + 21) >> 15) & 1) << 15);
      *(_DWORD *)(v12 + 84) = v22;
      unsigned int v23 = v22 & 0xFFFFFEFF | *((_DWORD *)a2 + 21) & 0x100;
      *(int8x8_t *)(v12 + 48) = vand_s8(*(int8x8_t *)((char *)a2 + 48), (int8x8_t)vcgez_s32(vshl_n_s32(vdup_n_s32((*((_DWORD *)a2 + 21) & 0x100) == 0), 0x1FuLL)));
      *(_DWORD *)(v12 + 84) = v23;
      if ((*((unsigned char *)a2 + 84) & 0x40) != 0)
      {
        *(_DWORD *)(v12 + 32) = *((_DWORD *)a2 + 8);
        float v24 = *((float *)a2 + 14);
        *(float *)(v12 + 56) = v24;
        *(void *)(v12 + 148) = *(void *)((char *)a2 + 148);
        v23 |= 0x40u;
        *(_DWORD *)(v12 + 84) = v23;
        unsigned int v25 = *((_DWORD *)a2 + 35);
        if (v25 <= 0x11 && ((1 << v25) & 0x21800) != 0)
        {
          long double v26 = *((double *)a2 + 3);
          double v27 = fmod(v26, 4294967300.0);
          if (v26 <= 4294967300.0) {
            double v27 = v26;
          }
          if (v27 < -4294967300.0) {
            double v27 = -fmod(-v27, 4294967300.0);
          }
          if (v27 < 0.0) {
            unsigned int v28 = --v27;
          }
          else {
            unsigned int v28 = v27;
          }
          *(_DWORD *)(v12 + 172) = v28;
        }
      }
      else if ((v18 & 0x40) != 0)
      {
        float v24 = *(float *)(v12 + 56) * 1.05;
        *(float *)(v12 + 56) = v24;
        *(float *)(v12 + 152) = *(float *)(v12 + 152) * 1.05;
      }
      else
      {
        *(_DWORD *)(v12 + 32) = 0;
        *(_DWORD *)(v12 + 56) = 2139095039;
        *(void *)(v12 + 148) = 0x7F7FFFFF00000000;
        float v24 = 3.4028e38;
      }
      int v29 = *((_DWORD *)a2 + 21);
      if ((v29 & 0x80000) != 0)
      {
        v23 |= 0x80000u;
      }
      else
      {
        if ((v23 & 0x80000) == 0) {
          goto LABEL_48;
        }
        v23 &= ~0x80000u;
      }
      *(_DWORD *)(v12 + 84) = v23;
      int v29 = *((_DWORD *)a2 + 21);
LABEL_48:
      if ((v29 & 0x80) != 0)
      {
        v23 |= 0x80u;
        *(_DWORD *)(v12 + 84) = v23;
        int v29 = *((_DWORD *)a2 + 21);
      }
      else if ((v29 & 0x800000) == 0)
      {
        v23 &= 0xFF7FFF7F;
        *(_DWORD *)(v12 + 84) = v23;
        *(void *)(v12 + 8) = 0;
        int v30 = 0;
        goto LABEL_55;
      }
      if ((v29 & 0x800000) != 0)
      {
        v23 |= 0x800000u;
        *(_DWORD *)(v12 + 84) = v23;
      }
      *(void *)(v12 + 8) = *((void *)a2 + 1);
      int v30 = *((_DWORD *)a2 + 15);
LABEL_55:
      *(_DWORD *)(v12 + 60) = v30;
      double v31 = *((double *)a2 + 15);
      float v32 = *((float *)a2 + 32);
      unsigned int v33 = *((_DWORD *)a2 + 21) & 0x1000000 | v23 & 0xFEFFFFFF;
      if ((*((_DWORD *)a2 + 21) & 0x1000000) == 0)
      {
        double v31 = 0.0;
        float v32 = 0.0;
      }
      *(_DWORD *)(v12 + 84) = v33;
      *(double *)(v12 + 120) = v31;
      *(float *)(v12 + 128) = v32;
      if ((*((unsigned char *)a2 + 84) & 0x20) != 0)
      {
        *(void *)(v12 + 16) = 0;
        *(void *)(v12 + 64) = *((void *)a2 + 8);
        unsigned int v33 = v33 & 0xFFFFFFDB | 0x20;
      }
      else
      {
        if ((v23 & 0x20) == 0)
        {
LABEL_71:
          unsigned int v38 = *(_DWORD *)(v12 + 164);
          if (v38 == -1)
          {
            float v41 = 601.0;
          }
          else
          {
            float v39 = *(double *)(v12 + 24);
            float v40 = (double)v38 * -0.001;
            float v41 = v39 + v40;
          }
          unsigned int v42 = *(_DWORD *)(v12 + 172);
          if (v42 == -1)
          {
            float v44 = 6.0;
          }
          else
          {
            float v43 = *(double *)(v12 + 24);
            float v44 = v43 - (float)v42;
          }
          int v45 = *((_DWORD *)a2 + 21);
          if ((v45 & 8) == 0)
          {
            BOOL v47 = v44 <= 5.0 || *(unsigned char *)(v12 + 169) != 0;
            if ((v45 & 0x400) != 0 && v47 && v41 <= 600.0)
            {
              int v48 = -2098185;
LABEL_119:
              unsigned int v58 = v33 & v48 | 0x408;
              goto LABEL_120;
            }
            if ((v45 & 0x400) != 0 || !*(unsigned char *)(v12 + 169) || v41 > 600.0)
            {
              *(_DWORD *)(v12 + 164) = -1;
              *(_WORD *)(v12 + 168) = 255;
              unsigned int v58 = v33 & 0xFFDFF9F7;
LABEL_120:
              *(_DWORD *)(v12 + 84) = v58;
              unsigned int v64 = *((_DWORD *)a2 + 21);
              if ((v64 & 0x100000) != 0)
              {
                *(void *)(v12 + 72) = *((void *)a2 + 9);
                *(_DWORD *)(v12 + 80) = *((_DWORD *)a2 + 20);
                v58 |= 0x100000u;
                *(_DWORD *)(v12 + 84) = v58;
                unsigned int v64 = *((_DWORD *)a2 + 21);
              }
              *(_DWORD *)(v12 + 84) = v58 & 0xFFFFDFFF | (((v64 >> 13) & 1) << 13);
              goto LABEL_123;
            }
            double v54 = (double)v38 * 0.001
                + (*(double *)(v12 + 24) - (double)v38 * 0.001) * (float)(1.0 - *(float *)(v12 + 32));
            double v69 = *(double *)(v12 + 24);
            double SubEpochTime = BlueFin::GlSystemTime::getSubEpochTime((BlueFin::GlSystemTime *)&v69, (const BlueFin::GlSignalId *)v70, 0);
            double v69 = v54;
            double v56 = BlueFin::GlSystemTime::getSubEpochTime((BlueFin::GlSystemTime *)&v69, (const BlueFin::GlSignalId *)v70, 0);
            if (SubEpochTime - v56 >= 0.0005)
            {
              double v63 = v54 + -0.001;
            }
            else
            {
              if (v56 - SubEpochTime < 0.0005)
              {
                double v57 = floor(v54 * 1000.0) / 1000.0;
LABEL_118:
                double v69 = *(double *)(v12 + 24);
                *(double *)(v12 + 24) = v57
                                      + BlueFin::GlSystemTime::getSubEpochTime((BlueFin::GlSystemTime *)&v69, (const BlueFin::GlSignalId *)v70, 0);
                unsigned int v33 = *(_DWORD *)(v12 + 84);
                int v48 = -2098697;
                goto LABEL_119;
              }
              double v63 = v54 + 0.001;
            }
            double v57 = floor(v63 * 1000.0) / 1000.0;
            goto LABEL_118;
          }
          if ((v45 & 0x400) != 0)
          {
            *(_DWORD *)(v12 + 84) = v33 | 0x408;
            unsigned int v49 = v33 & 0xFFFFF9F7 | 0x408;
            int v50 = v33 | 0x608;
            if ((*((_DWORD *)a2 + 21) & 0x200) == 0) {
              int v50 = v49;
            }
            *(_DWORD *)(v12 + 84) = v50;
            unsigned int v51 = *((_DWORD *)a2 + 35);
            if (v51 <= 0x11 && ((1 << v51) & 0x21800) != 0) {
              *(unsigned char *)(v12 + 169) = 1;
            }
            double v52 = *(double *)(v12 + 24);
            if (v52 * 1000.0 <= 0.0)
            {
              if (v52 * 1000.0 >= 0.0)
              {
                int v59 = 0;
LABEL_107:
                *(_DWORD *)(v12 + 164) = v59;
                double v69 = v52;
                double v60 = BlueFin::GlSystemTime::getSubBitTime((BlueFin::GlSystemTime *)&v69, (const BlueFin::GlSignalId *)v70, 0)* 1000.0;
                double v61 = fmod(v60, 4294967300.0);
                if (v60 <= 4294967300.0) {
                  double v61 = v60;
                }
                if (v61 < -4294967300.0) {
                  double v61 = -fmod(-v61, 4294967300.0);
                }
                if (v61 < 0.0) {
                  unsigned int v62 = --v61;
                }
                else {
                  LOBYTE(v62) = v61;
                }
                *(unsigned char *)(v12 + 168) = v62;
                unsigned int v58 = *(_DWORD *)(v12 + 84) | 0x200000;
                goto LABEL_120;
              }
              double v53 = -0.5;
            }
            else
            {
              double v53 = 0.5;
            }
            int v59 = (int)(v52 * 1000.0 + v53);
            goto LABEL_107;
          }
          uint64_t v66 = "0";
          DeviceFaultNotify("glme_msmtmgr.cpp", 913, "SetDSPMeas", (char)"0");
          int v67 = "glme_msmtmgr.cpp";
          int v68 = 913;
LABEL_128:
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v67, v68, v66);
        }
        *(_DWORD *)(v12 + 64) = 0;
        *(double *)(v12 + 16) = v16 + *(double *)(v12 + 16);
        v33 |= 4u;
        *(_DWORD *)(v12 + 84) = v33;
        if ((v23 & 0x40) != 0)
        {
          float v35 = v16;
          float v36 = *(float *)(v12 + 68) + (float)(fabsf(v35) * v24);
          *(float *)(v12 + 68) = v36;
          if (v70[0] < 0x34u || v70[0] >= 0x42u) {
            float v37 = 0.00015152;
          }
          else {
            float v37 = 0.00030333;
          }
          if (v36 <= v37) {
            goto LABEL_71;
          }
        }
        else
        {
          if (*(unsigned __int16 *)(v12 + 108) >= 0x23Fu)
          {
            uint64_t v66 = "IsValid()";
            DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
            int v67 = "glsignalid.h";
            int v68 = 678;
            goto LABEL_128;
          }
          if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *(int *)(v12 + 104)
                                                                      - *(int *)(v12 + 104)
                                                                      + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)(v12 + 100)]])
          {
            uint64_t v66 = "ucMsPerEpoch != 0";
            DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
            int v67 = "glsignalid.h";
            int v68 = 685;
            goto LABEL_128;
          }
          float v34 = (double)BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *(int *)(v12 + 104)
                                                                                               - *(int *)(v12 + 104)
                                                                                               + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)(v12 + 100)]]
              * 0.001;
          *(float *)(v12 + 68) = v34;
        }
        v33 &= ~0x20u;
      }
      *(_DWORD *)(v12 + 84) = v33;
      goto LABEL_71;
    }
  }
  unsigned int v8 = v7 & 0xFFFFFFFE;
  if ((v6 + 117) > 0x23u || v8 != 8) {
    goto LABEL_9;
  }
}

double BlueFin::GlMeSrdMeasAidFilterEvents::OnMeasSSEvent(BlueFin::GlMeSrdMeasAidFilterEvents *this, float a2, unsigned __int8 a3, const BlueFin::GlSignalId *a4)
{
  if ((*(unsigned char *)a4 + 67) <= 0x43u)
  {
    DeviceFaultNotify("glmesrd_ctrl_sm.h", 157, "OnMeasSSEvent", (char)"IS_SVID(*rotSignalId.GetSvId())");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_ctrl_sm.h", 157, "IS_SVID(*rotSignalId.GetSvId())");
  }
  double result = a2 + 0.5;
  *((_WORD *)this + *((unsigned __int16 *)a4 + 4) + 8) = (int)result;
  return result;
}

float BlueFin::GlMeMsmtMgr::CurrentCrossCorrThreshSNR_Get(BlueFin::GlMeMsmtMgr *this)
{
  if (*((unsigned char *)this + 1002))
  {
    float v1 = *((float *)this + *((unsigned __int8 *)this + 1001) + 244);
  }
  else
  {
    uint64_t v2 = 0;
    float v1 = -171.0;
    do
    {
      float v3 = *((float *)this + v2 + 244);
      if (v1 < v3)
      {
        *((unsigned char *)this + 1001) = v2;
        float v1 = v3;
      }
      ++v2;
    }
    while (v2 != 5);
    if (v1 > -124.0)
    {
      *((_DWORD *)this + *((unsigned __int8 *)this + 1001) + 244) = -1024458752;
      float v1 = -120.0;
    }
    *((unsigned char *)this + 1002) = 1;
  }
  return v1 + -20.0;
}

uint64_t BlueFin::GlArray::Iterator@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = this;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(this + 39) + 1;
  return this;
}

uint64_t BlueFin::GlMeSrdSvIdReportMgr::ApplySatSelectionRules(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned __int8 *)(a2 + 160);
  if (v6 == 255 || BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(a2 + 96)))
  {
    if (BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(a2 + 64)))
    {
      uint64_t v7 = *(unsigned __int8 *)(a2 + 176);
      if (BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(a2 + 64)) >= 2)
      {
        uint64_t v8 = *(void *)(a1 + 8);
        int v9 = *(unsigned __int16 *)(v8 + 828);
        unsigned int v10 = *(unsigned __int16 *)(v8 + 830);
        if (v7 + 100 * *(unsigned __int8 *)(a2 + 180) - v9 < v10)
        {
          uint64_t v11 = *(void *)(v8 + 808);
          unsigned int v12 = *(unsigned __int16 *)(v11 + 2 * (unsigned __int16)(v7 + 100 * *(unsigned __int8 *)(a2 + 180) - v9));
          if (v12 == 0xFFFF)
          {
            uint64_t v13 = 0;
          }
          else
          {
            if (*(unsigned __int16 *)(v8 + 832) <= v12) {
              goto LABEL_109;
            }
            uint64_t v13 = *(void *)(v8 + 800) + *(_DWORD *)(v8 + 824) * v12;
          }
          unsigned int v23 = *(unsigned __int8 *)(a2 + 184) + 100 * *(unsigned __int8 *)(a2 + 188) - v9;
          if (v23 < v10)
          {
            unsigned int v24 = *(unsigned __int16 *)(v11 + 2 * (unsigned __int16)v23);
            if (v24 == 0xFFFF)
            {
              uint64_t v25 = 0;
            }
            else
            {
              if (*(unsigned __int16 *)(v8 + 832) <= v24) {
                goto LABEL_109;
              }
              uint64_t v25 = *(void *)(v8 + 800) + *(_DWORD *)(v8 + 824) * v24;
            }
            BlueFin::GlMeSrdSvIdReportMsmtSlot::GetSvId(v13, v60);
            if (LOBYTE(v60[0]) < 0x8Bu
              || (BlueFin::GlMeSrdSvIdReportMsmtSlot::GetSvId(v13, &v57), v57 > 0xAEu))
            {
              unsigned int v28 = *(_DWORD *)(v13 + 140);
              if (v28 <= 0x11 && ((1 << v28) & 0x21800) != 0 && *(_DWORD *)(v25 + 140) == 10
                || *(_DWORD *)(v13 + 116) == 1)
              {
                goto LABEL_66;
              }
              unsigned int v29 = *(_DWORD *)(v25 + 140);
              if (v29 <= 0x11 && ((1 << v29) & 0x21800) != 0 && v28 == 10)
              {
LABEL_63:
                BOOL v15 = 0;
                uint64_t v7 = *(unsigned __int8 *)(a2 + 184);
                goto LABEL_67;
              }
            }
            else if (*(unsigned char *)(v13 + 160))
            {
              if (!*(unsigned char *)(v25 + 160))
              {
                unsigned int v26 = *(unsigned __int8 *)(v13 + 112);
                int v27 = *(_DWORD *)(v13 + 104);
LABEL_60:
                BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)v60, v26, v27);
                BOOL v15 = 0;
                uint64_t v7 = LOBYTE(v60[0]);
                goto LABEL_67;
              }
            }
            else if (*(unsigned char *)(v25 + 160))
            {
              unsigned int v26 = *(unsigned __int8 *)(v25 + 112);
              int v27 = *(_DWORD *)(v25 + 104);
              goto LABEL_60;
            }
            if (*(_DWORD *)(v13 + 48) >= 0x7D1u
              || *(_DWORD *)(v25 + 48) < 0x7D1u
              && ((float)(*(float *)(a2 + 208) - *(float *)(a2 + 212)) > 2.0
               || *(float *)(v13 + 68) <= *(float *)(v25 + 68)))
            {
LABEL_66:
              BOOL v15 = 0;
              uint64_t v7 = *(unsigned __int8 *)(a2 + 176);
              goto LABEL_67;
            }
            goto LABEL_63;
          }
        }
LABEL_108:
        int v48 = "handle - m_usMinHandle < m_usNumHandles";
        DeviceFaultNotify("glinc_array.h", 313, "EnsureValidHandle", (char)"handle - m_usMinHandle < m_usNumHandles");
        unsigned int v49 = "glinc_array.h";
        int v50 = 313;
        goto LABEL_110;
      }
      goto LABEL_56;
    }
    BOOL HasAny = BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)a2);
    if (HasAny)
    {
      uint64_t v7 = *(unsigned __int8 *)(a2 + 162);
      if (v7 != 255)
      {
        BOOL v15 = 0;
        goto LABEL_69;
      }
    }
    if (BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(a2 + 32)))
    {
      uint64_t v7 = *(unsigned __int8 *)(a2 + 192);
      if (BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(a2 + 32)) < 2) {
        goto LABEL_56;
      }
      uint64_t v17 = *(void *)(a1 + 8);
      int v18 = *(unsigned __int16 *)(v17 + 828);
      unsigned int v19 = *(unsigned __int16 *)(v17 + 830);
      if (v7 + 100 * *(unsigned __int8 *)(a2 + 196) - v18 >= v19) {
        goto LABEL_108;
      }
      uint64_t v20 = *(void *)(v17 + 808);
      unsigned int v21 = *(unsigned __int16 *)(v20 + 2 * (unsigned __int16)(v7 + 100 * *(unsigned __int8 *)(a2 + 196) - v18));
      if (v21 == 0xFFFF)
      {
        uint64_t v22 = 0;
      }
      else
      {
        if (*(unsigned __int16 *)(v17 + 832) <= v21) {
          goto LABEL_109;
        }
        uint64_t v22 = *(void *)(v17 + 800) + *(_DWORD *)(v17 + 824) * v21;
      }
      unsigned int v30 = *(unsigned __int8 *)(a2 + 200) + 100 * *(unsigned __int8 *)(a2 + 204) - v18;
      if (v30 >= v19) {
        goto LABEL_108;
      }
      unsigned int v31 = *(unsigned __int16 *)(v20 + 2 * (unsigned __int16)v30);
      if (*(unsigned __int16 *)(v17 + 832) <= v31) {
        goto LABEL_109;
      }
      uint64_t v32 = *(void *)(v17 + 800) + *(_DWORD *)(v17 + 824) * v31;
      unsigned int v33 = *(_DWORD *)(v22 + 48);
      if (v33 >= *(_DWORD *)(v32 + 48)) {
        unsigned int v33 = *(_DWORD *)(v32 + 48);
      }
      if (vabdd_f64(*(double *)(v22 + 24), *(double *)(v32 + 24)) >= 0.000001
        || vabds_f32(*(float *)(v22 + 32), *(float *)(v32 + 32)) >= 0.00000003)
      {
        BOOL v15 = v33 >> 3 < 0x753;
        goto LABEL_67;
      }
      unsigned int v34 = *(_DWORD *)(v32 + 140);
      BOOL v35 = v34 > 0x11;
      int v36 = (1 << v34) & 0x21800;
      BOOL v37 = v35 || v36 == 0;
      if (v37)
      {
LABEL_56:
        BOOL v15 = 0;
        goto LABEL_67;
      }
      BOOL v15 = 0;
      if (*(_DWORD *)(v22 + 140) == 10) {
        uint64_t v7 = *(unsigned __int8 *)(a2 + 200);
      }
      else {
        uint64_t v7 = v7;
      }
    }
    else if (HasAny)
    {
      BOOL v15 = 0;
      uint64_t v7 = *(unsigned __int8 *)(a2 + 161);
    }
    else
    {
      if (!BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(a2 + 128))) {
        goto LABEL_114;
      }
      BOOL v15 = 0;
      uint64_t v7 = *(unsigned __int8 *)(a2 + 163);
    }
LABEL_67:
    if (v7 != 255)
    {
      LODWORD(v6) = *(unsigned __int8 *)(a2 + 160);
LABEL_69:
      BOOL v16 = v15;
      BOOL v37 = v6 == 255;
      uint64_t v6 = v7;
      if (v37) {
        goto LABEL_71;
      }
      goto LABEL_70;
    }
LABEL_114:
    int v48 = "ucSatToPublish != INVALID_SATID";
    DeviceFaultNotify("glmesrd_svid_report_mgr.cpp", 852, "DecideWhichSatToPublish", (char)"ucSatToPublish != INVALID_SATID");
    unsigned int v49 = "glmesrd_svid_report_mgr.cpp";
    int v50 = 852;
    goto LABEL_110;
  }
  BOOL v16 = 0;
LABEL_70:
  if (!BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(a2 + 96)))
  {
    *(void *)double v60 = &v62;
    char v61 = 4;
    long long v62 = 0uLL;
    BlueFin::GlSetBase::OperatorBinaryOr(a2 + 64, (int **)v60, (int **)(a2 + 128));
    BlueFin::GlSetBase::operator=(a3, (uint64_t)v60);
    *(_OWORD *)(a3 + 12) = v62;
    return v6;
  }
LABEL_71:
  if (!BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(a2 + 64)))
  {
    if (BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(a2 + 32)))
    {
      *(void *)double v60 = &v62;
      char v61 = 4;
      long long v62 = 0uLL;
      BlueFin::GlSetBase::OperatorBinaryOr(a2 + 128, (int **)v60, (int **)(a2 + 32));
      uint64_t v45 = BlueFin::GlSetBase::operator=(a3, (uint64_t)v60);
      *(_OWORD *)(a3 + 12) = v62;
      BlueFin::GlSetBase::Remove(v45, v6);
      if (v16)
      {
        if (BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(a2 + 32)) <= 1)
        {
          int v48 = "otMsmtStats.m_otInvalidTrkMsmts.Cnt() >= 2";
          DeviceFaultNotify("glmesrd_svid_report_mgr.cpp", 921, "DecideWhichSatsToKill", (char)"otMsmtStats.m_otInvalidTrkMsmts.Cnt() >= 2");
          unsigned int v49 = "glmesrd_svid_report_mgr.cpp";
          int v50 = 921;
        }
        else
        {
          int v46 = *(unsigned __int8 *)(a2 + 192);
          if (v46 == 255)
          {
            int v48 = "otMsmtStats.m_otTopTwoCnoInvalidTrkSatid[0].GetSatId() != INVALID_SATID";
            DeviceFaultNotify("glmesrd_svid_report_mgr.cpp", 922, "DecideWhichSatsToKill", (char)"otMsmtStats.m_otTopTwoCnoInvalidTrkSatid[0].GetSatId() != INVALID_SATID");
            unsigned int v49 = "glmesrd_svid_report_mgr.cpp";
            int v50 = 922;
          }
          else
          {
            if (*(unsigned __int8 *)(a2 + 200) != 255)
            {
              BlueFin::GlSetBase::Remove(a3, v46);
              int v47 = *(unsigned __int8 *)(a2 + 200);
              goto LABEL_106;
            }
            int v48 = "otMsmtStats.m_otTopTwoCnoInvalidTrkSatid[1].GetSatId() != INVALID_SATID";
            DeviceFaultNotify("glmesrd_svid_report_mgr.cpp", 923, "DecideWhichSatsToKill", (char)"otMsmtStats.m_otTopTwoCnoInvalidTrkSatid[1].GetSatId() != INVALID_SATID");
            unsigned int v49 = "glmesrd_svid_report_mgr.cpp";
            int v50 = 923;
          }
        }
LABEL_110:
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v49, v50, v48);
      }
      if (*(unsigned __int8 *)(a2 + 162) == v6 || !BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(a2 + 128))) {
        return v6;
      }
      int v47 = *(unsigned __int8 *)(a2 + 163);
      if (v47 == 255)
      {
        int v48 = "otMsmtStats.m_ucMaxSniffCnoSatid != INVALID_SATID";
        DeviceFaultNotify("glmesrd_svid_report_mgr.cpp", 933, "DecideWhichSatsToKill", (char)"otMsmtStats.m_ucMaxSniffCnoSatid != INVALID_SATID");
        unsigned int v49 = "glmesrd_svid_report_mgr.cpp";
        int v50 = 933;
        goto LABEL_110;
      }
    }
    else
    {
      BlueFin::GlSetBase::operator=(a3, a2 + 128);
      *(_OWORD *)(a3 + 12) = *(_OWORD *)(a2 + 140);
      if (!BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(a2 + 128))) {
        return v6;
      }
      int v47 = *(unsigned __int8 *)(a2 + 163);
    }
LABEL_106:
    BlueFin::GlSetBase::Remove(a3, v47);
    return v6;
  }
  double v57 = (int *)v59;
  char v58 = 4;
  v59[1] = 0;
  v59[0] = 0;
  BlueFin::GlSetBase::OperatorBinaryOr(a2 + 64, &v57, (int **)(a2 + 128));
  *(void *)double v60 = &v62;
  char v61 = 4;
  long long v62 = 0uLL;
  BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v57, (int **)v60, (int **)(a2 + 32));
  uint64_t v38 = BlueFin::GlSetBase::operator=(a3, (uint64_t)v60);
  *(_OWORD *)(a3 + 12) = v62;
  BlueFin::GlSetBase::Remove(v38, v6);
  if (BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(a2 + 64)) < 2) {
    return v6;
  }
  uint64_t v39 = *(void *)(a1 + 8);
  int v40 = *(unsigned __int16 *)(v39 + 828);
  unsigned int v41 = *(unsigned __int16 *)(v39 + 830);
  if (*(unsigned __int8 *)(a2 + 176) + 100 * *(unsigned __int8 *)(a2 + 180) - v40 >= v41) {
    goto LABEL_108;
  }
  uint64_t v42 = *(void *)(v39 + 808);
  unsigned int v43 = *(unsigned __int16 *)(v42
                            + 2
                            * (unsigned __int16)(*(unsigned __int8 *)(a2 + 176)
                                               + 100 * *(unsigned __int8 *)(a2 + 180)
                                               - v40));
  if (v43 == 0xFFFF)
  {
    uint64_t v44 = 0;
    goto LABEL_91;
  }
  if (*(unsigned __int16 *)(v39 + 832) <= v43)
  {
LABEL_109:
    int v48 = "slot < m_usNumSlots";
    DeviceFaultNotify("glinc_array.h", 319, "EnsureValidSlot", (char)"slot < m_usNumSlots");
    unsigned int v49 = "glinc_array.h";
    int v50 = 319;
    goto LABEL_110;
  }
  uint64_t v44 = *(void *)(v39 + 800) + *(_DWORD *)(v39 + 824) * v43;
LABEL_91:
  unsigned int v51 = *(unsigned __int8 *)(a2 + 184) + 100 * *(unsigned __int8 *)(a2 + 188) - v40;
  if (v51 >= v41) {
    goto LABEL_108;
  }
  unsigned int v52 = *(unsigned __int16 *)(v42 + 2 * (unsigned __int16)v51);
  if (v52 == 0xFFFF)
  {
    uint64_t v53 = 0;
    goto LABEL_96;
  }
  if (*(unsigned __int16 *)(v39 + 832) <= v52) {
    goto LABEL_109;
  }
  uint64_t v53 = *(void *)(v39 + 800) + *(_DWORD *)(v39 + 824) * v52;
LABEL_96:
  BlueFin::GlMeSrdSvIdReportMsmtSlot::GetSvId(v44, v60);
  if ((LOBYTE(v60[0]) + 117) > 0x23u) {
    return v6;
  }
  if (*(unsigned char *)(v44 + 160))
  {
    if (*(unsigned char *)(v53 + 160)) {
      goto LABEL_99;
    }
LABEL_102:
    BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)v60, *(unsigned __int8 *)(v44 + 112), *(_DWORD *)(v44 + 104));
    BlueFin::GlSetBase::Remove(a3, LOBYTE(v60[0]));
    goto LABEL_104;
  }
  if (*(unsigned char *)(v53 + 160)) {
    goto LABEL_102;
  }
LABEL_99:
  BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)v60, *(unsigned __int8 *)(v44 + 112), *(_DWORD *)(v44 + 104));
  if (LOBYTE(v60[0]) == v6)
  {
    unsigned int v54 = *(unsigned __int8 *)(v44 + 112);
    int v55 = *(_DWORD *)(v44 + 104);
LABEL_105:
    BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)v60, v54, v55);
    int v47 = LOBYTE(v60[0]);
    goto LABEL_106;
  }
  BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)v60, *(unsigned __int8 *)(v53 + 112), *(_DWORD *)(v53 + 104));
  if (LOBYTE(v60[0]) == v6)
  {
LABEL_104:
    unsigned int v54 = *(unsigned __int8 *)(v53 + 112);
    int v55 = *(_DWORD *)(v53 + 104);
    goto LABEL_105;
  }
  return v6;
}

uint64_t BlueFin::GlMeSrdSvIdReportMgr::GetMsmtStats(uint64_t result, unsigned char *a2, uint64_t a3)
{
  *(unsigned char *)(a3 + 224) = 0;
  uint64_t v3 = *(void *)(result + 8);
  if (*(unsigned __int16 *)(v3 + 832) > (unsigned __int16)(*(_WORD *)(v3 + 834) + 1))
  {
    uint64_t v6 = result;
    int v7 = 0;
    unsigned int v34 = (unsigned char *)(a3 + 176);
    BOOL v35 = (unsigned char *)(a3 + 192);
    uint64_t v32 = (unsigned char *)(a3 + 184);
    unsigned int v33 = (unsigned char *)(a3 + 200);
    for (unint64_t i = (unsigned __int16)(*(_WORD *)(v3 + 834) + 1); i < *(unsigned __int16 *)(v3 + 832); ++i)
    {
      uint64_t v9 = *(void *)(v6 + 8);
      int v10 = (unsigned __int16)(*(_WORD *)(v3 + 828) + *(_WORD *)(*(void *)(v3 + 816) + 2 * i));
      if (!BlueFin::GlBigArray::Has((BlueFin::GlBigArray *)(v3 + 800), v10))
      {
        unsigned int v29 = "m_potArray->Has(handle)";
        DeviceFaultNotify("glinc_array.h", 362, "Next", (char)"m_potArray->Has(handle)");
        unsigned int v30 = "glinc_array.h";
        int v31 = 362;
        goto LABEL_51;
      }
      if (v10 - *(unsigned __int16 *)(v9 + 828) >= *(unsigned __int16 *)(v9 + 830))
      {
        unsigned int v29 = "handle - m_usMinHandle < m_usNumHandles";
        DeviceFaultNotify("glinc_array.h", 313, "EnsureValidHandle", (char)"handle - m_usMinHandle < m_usNumHandles");
        unsigned int v30 = "glinc_array.h";
        int v31 = 313;
        goto LABEL_51;
      }
      unsigned int v11 = *(unsigned __int16 *)(*(void *)(v9 + 808) + 2 * (unsigned __int16)(v10 - *(_WORD *)(v9 + 828)));
      if (v11 == 0xFFFF)
      {
        uint64_t v12 = 0;
      }
      else
      {
        if (*(unsigned __int16 *)(v9 + 832) <= v11)
        {
          unsigned int v29 = "slot < m_usNumSlots";
          DeviceFaultNotify("glinc_array.h", 319, "EnsureValidSlot", (char)"slot < m_usNumSlots");
          unsigned int v30 = "glinc_array.h";
          int v31 = 319;
          goto LABEL_51;
        }
        uint64_t v12 = *(void *)(v9 + 800) + *(_DWORD *)(v9 + 824) * v11;
      }
      double result = BlueFin::GlMeSrdSvIdReportMsmtSlot::GetSvId(v12, &v38);
      if (v38 == *a2)
      {
        double result = BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)v36, *(unsigned __int8 *)(v12 + 112), *(_DWORD *)(v12 + 104));
        switch(*(_DWORD *)(v12 + 164))
        {
          case 1:
            char v13 = v36[0];
            *(_DWORD *)(*(void *)a3 + (((unint64_t)v36[0] >> 3) & 0x1C)) |= 1 << v36[0];
            if ((*(unsigned char *)(v12 + 86) & 4) != 0)
            {
              float v28 = *(float *)(v12 + 40);
              if (*(float *)(a3 + 164) < v28)
              {
                *(float *)(a3 + 164) = v28;
                *(unsigned char *)(a3 + 161) = v13;
              }
              int v14 = *(_DWORD *)(v12 + 140);
              if (v14 == 9 && *(float *)(a3 + 168) < v28)
              {
                *(float *)(a3 + 168) = v28;
                *(unsigned char *)(a3 + 162) = v13;
                goto LABEL_42;
              }
            }
            else
            {
              int v14 = *(_DWORD *)(v12 + 140);
            }
            if (v14 == 15) {
              *(unsigned char *)(a3 + 160) = v13;
            }
LABEL_42:
            int v7 = 1;
            break;
          case 2:
            int v15 = v37;
            v7 |= v37 == 0;
            int v16 = *(_DWORD *)(v12 + 84);
            if ((v16 & 0x20) == 0 || (v16 & 0x40) == 0) {
              goto LABEL_15;
            }
            goto LABEL_25;
          case 3:
            if (v37 && v37 != 3)
            {
              unsigned int v29 = "otSatCarrId.GetSignalIndex() == SIGNAL_INDEX_0 || otSatCarrId.GetSignalIndex() == SIGNAL_INDEX_3";
              DeviceFaultNotify("glmesrd_svid_report_mgr.cpp", 603, "GetMsmtStats", (char)"otSatCarrId.GetSignalIndex() == SIGNAL_INDEX_0 || otSatCarrId.GetSignalIndex() == SIGNAL_INDEX_3");
              unsigned int v30 = "glmesrd_svid_report_mgr.cpp";
              int v31 = 603;
LABEL_51:
              __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v30, v31, v29);
            }
            char v20 = v36[0];
            int v7 = 1;
            *(_DWORD *)(*(void *)(a3 + 128) + (((unint64_t)v36[0] >> 3) & 0x1C)) |= 1 << v36[0];
            if ((*(unsigned char *)(v12 + 86) & 4) != 0)
            {
              float v21 = *(float *)(v12 + 40);
              if (*(float *)(a3 + 172) < v21)
              {
                *(float *)(a3 + 172) = v21;
                *(unsigned char *)(a3 + 163) = v20;
              }
            }
            break;
          case 4:
            *(unsigned char *)(a3 + 224) = 1;
            int v15 = v37;
            v7 |= v37 == 0;
            if ((*(_DWORD *)(v12 + 84) & 0x40) != 0)
            {
LABEL_25:
              char v22 = v36[0];
              unint64_t v23 = (unint64_t)v36[0] >> 5;
              int v24 = 1 << v36[0];
              *(_DWORD *)(*(void *)(a3 + 64) + 4 * v23) |= 1 << v36[0];
              unsigned int v25 = *(_DWORD *)(v12 + 140);
              if (v25 <= 0x11 && ((1 << v25) & 0x21800) != 0) {
                *(_DWORD *)(*(void *)(a3 + 96) + 4 * v23) |= v24;
              }
              float v26 = *(float *)(v12 + 40);
              float v27 = *(float *)(a3 + 208);
              if (v26 >= v27)
              {
                *(float *)(a3 + 212) = v27;
                *(unsigned char *)(a3 + 184) = *(unsigned char *)(a3 + 176);
                *(_DWORD *)(a3 + 188) = *(_DWORD *)(a3 + 180);
                if (v34 != v36)
                {
                  *(unsigned char *)(a3 + 176) = v22;
                  *(_DWORD *)(a3 + 180) = v15;
                }
                *(_DWORD *)(a3 + 208) = *(_DWORD *)(v12 + 40);
              }
              else if (v26 >= *(float *)(a3 + 212))
              {
                *(float *)(a3 + 212) = v26;
                if (v32 != v36)
                {
                  *(unsigned char *)(a3 + 184) = v22;
                  *(_DWORD *)(a3 + 188) = v15;
                }
              }
            }
            else
            {
LABEL_15:
              char v17 = v36[0];
              *(_DWORD *)(*(void *)(a3 + 32) + (((unint64_t)v36[0] >> 3) & 0x1C)) |= 1 << v36[0];
              float v18 = *(float *)(v12 + 40);
              float v19 = *(float *)(a3 + 216);
              if (v18 >= v19)
              {
                *(float *)(a3 + 220) = v19;
                *(unsigned char *)(a3 + 200) = *(unsigned char *)(a3 + 192);
                *(_DWORD *)(a3 + 204) = *(_DWORD *)(a3 + 196);
                if (v35 != v36)
                {
                  *(unsigned char *)(a3 + 192) = v17;
                  *(_DWORD *)(a3 + 196) = v15;
                }
                *(_DWORD *)(a3 + 216) = *(_DWORD *)(v12 + 40);
              }
              else if (v18 >= *(float *)(a3 + 220))
              {
                *(float *)(a3 + 220) = v18;
                if (v33 != v36)
                {
                  *(unsigned char *)(a3 + 200) = v17;
                  *(_DWORD *)(a3 + 204) = v15;
                }
              }
            }
            break;
          default:
            unsigned int v29 = "0";
            DeviceFaultNotify("glmesrd_svid_report_mgr.cpp", 670, "GetMsmtStats", (char)"0");
            unsigned int v30 = "glmesrd_svid_report_mgr.cpp";
            int v31 = 670;
            goto LABEL_51;
        }
      }
    }
  }
  return result;
}

uint64_t BlueFin::GlMeSrdSvIdReportMsmtSlot::GetSvId@<X0>(uint64_t this@<X0>, unsigned char *a2@<X8>)
{
  char v2 = *(unsigned char *)(this + 100);
  if ((v2 + 67) <= 0x43u)
  {
    DeviceFaultNotify("glmesrd_svid_report_mgr_slot_types.cpp", 102, "GetSvId", (char)"IS_SVID(*m_otDspMeas.otSignalId.GetSvId())");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_svid_report_mgr_slot_types.cpp", 102, "IS_SVID(*m_otDspMeas.otSignalId.GetSvId())");
  }
  *a2 = v2;
  return this;
}

uint64_t BlueFin::GlMeSrdSvIdReportMsmtSlot::GetSignalIndex@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(this + 100);
  if ((v2 + 67) <= 0x43u)
  {
    DeviceFaultNotify("glmesrd_svid_report_mgr_slot_types.cpp", 111, "GetSignalIndex", (char)"IS_SVID(*m_otDspMeas.otSignalId.GetSvId())");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_svid_report_mgr_slot_types.cpp", 111, "IS_SVID(*m_otDspMeas.otSignalId.GetSvId())");
  }
  *(unsigned char *)a2 = v2;
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(this + 104);
  *(_WORD *)(a2 + 8) = *(_WORD *)(this + 108);
  return this;
}

uint64_t BlueFin::GlMeSrdSatStatusListener::SnapToAidingForNonL1(BlueFin::GlMeSrdSatStatusListener *this, const BlueFin::GlSatCarrId *a2)
{
  return BlueFin::GlMeSrdSatTrackMgr::SnapToAidingForNonL1((BlueFin::GlMeSrdSatTrackMgr *)(*((void *)this + 1) + 14352), a2);
}

BOOL BlueFin::GlMeDspMeasListener::IsTowUnverified(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  v4[0] = *(unsigned char *)a2;
  int v5 = *(_DWORD *)(a2 + 4);
  __int16 v6 = *(_WORD *)(a2 + 8);
  return BlueFin::GlMeMeasAidFilter::IsTowUnverified(v2, (const BlueFin::GlSignalId *)v4);
}

uint64_t BlueFin::GlMeDspMeasListener::SetDSPDataBits(BlueFin::GlMeDspMeasListener *this, const BlueFin::GlMeDSPDataBits *a2, const BlueFin::GlMeDSPDataBits *a3)
{
  return BlueFin::GlMeMsmtMgr::SetDSPDataBits(*((void *)this + 1) + 10624, a2, a3);
}

uint64_t BlueFin::GlMeSrdSatTrackMgr::SnapToAidingForNonL1(BlueFin::GlMeSrdSatTrackMgr *this, const BlueFin::GlSatCarrId *a2)
{
  unsigned int v3 = *(unsigned __int8 *)a2 + 100 * *((unsigned __int8 *)a2 + 4);
  unint64_t v4 = *(unsigned int *)(*((void *)this + 500) + 4 * (v3 >> 5));
  int v5 = (BlueFin::GlMeSrdSatMgr *)*((void *)this + 1);
  if ((v4 >> (v3 & 0x1F)))
  {
    uint64_t result = BlueFin::GlMeSrdSatMgr::GetTrackChannel((uint64_t)v5, (unsigned __int8 *)a2);
    if (result >= 0x7B)
    {
      DeviceFaultNotify("glmesrd_track_mgr.cpp", 509, "SnapToAidingForNonL1", (char)"ucTrackChannel < _DIM(m_aotSatTrackData)");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_track_mgr.cpp", 509, "ucTrackChannel < _DIM(m_aotSatTrackData)");
    }
    *((unsigned char *)this + 32 * result + 57) = 0;
  }
  else
  {
    unsigned int v7 = *(unsigned __int8 *)a2;
    return BlueFin::GlMeSrdSatMgr::IsSatInKillProcess(v5, v7);
  }
  return result;
}

BOOL BlueFin::GlMeMeasAidFilter::IsTowUnverified(uint64_t a1, const BlueFin::GlSignalId *a2)
{
  uint64_t MsmtSlotPtr = BlueFin::GlMeMsmtMgr::GetMsmtSlotPtr((BlueFin::GlMeMsmtMgr *)(a1 + 10624), a2, 1, 1);
  unsigned int v4 = *(unsigned __int8 *)a2;
  if (!*(unsigned char *)a2 || v4 >= 0x21 && (v4 < 0x42 || v4 >= 0x4C && (v4 + 81) > 0xDu)) {
    return 0;
  }
  uint64_t v5 = BlueFin::GlMeSlots::GpsFrameMgr(MsmtSlotPtr, (unsigned __int8 *)a2);
  return BlueFin::GlMeFrameMgr::GetTowMeas(v5, (uint64_t)&v7) == 1;
}

__n128 BlueFin::GlMeDspMeasListener::SetTrkMeasSet(BlueFin::GlMeDspMeasListener *this, BlueFin::GlSignalIdSet *a2)
{
  uint64_t v3 = *((void *)this + 1);
  uint64_t v4 = BlueFin::GlSetBase::operator=(v3 + 11432, (uint64_t)a2);
  *(_OWORD *)(v4 + 12) = *(_OWORD *)((char *)a2 + 12);
  __n128 result = *(__n128 *)((char *)a2 + 28);
  long long v6 = *(_OWORD *)((char *)a2 + 44);
  long long v7 = *(_OWORD *)((char *)a2 + 60);
  *(_OWORD *)(v3 + 11504) = *(_OWORD *)((char *)a2 + 72);
  *(_OWORD *)(v4 + 60) = v7;
  *(_OWORD *)(v4 + 44) = v6;
  *(__n128 *)(v4 + 28) = result;
  return result;
}

uint64_t BlueFin::GlMeObjFactory::MakeSvidReportMsmtArray(BlueFin::GlMeObjFactory *this)
{
  Memory = (unsigned __int16 *)BlueFin::GlMemAlloc::glAllocateMemory(4, 840, *((uint64_t (**)(uint64_t))this + 3));
  if (Memory)
  {
    uint64_t v3 = Memory;
    signed int v4 = *((_DWORD *)this + 11);
    *((void *)this + 10) = BlueFin::GlMemAlloc::glAllocateMemory(5, (176 * v4), *((uint64_t (**)(uint64_t))this + 3));
    uint64_t v5 = (unsigned __int16 *)BlueFin::GlMemAlloc::glAllocateMemory(6, (2 * v4), *((uint64_t (**)(uint64_t))this + 3));
    *((void *)this + 12) = v5;
    BlueFin::GlBigArray::GlBigArray((BlueFin::GlBigArray *)(v3 + 400), *((void **)this + 10), 176, 0, v3, 0x190u, v5, v4);
    *((void *)this + 9) = v3;
    if (v4 >= 1)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 176 * v4;
      do
      {
        BlueFin::GlMeSrdSvIdReportMsmtSlot::GlMeSrdSvIdReportMsmtSlot((BlueFin::GlMeSrdSvIdReportMsmtSlot *)(*((void *)this + 10) + v6));
        v6 += 176;
      }
      while (v7 != v6);
    }
  }
  return *((void *)this + 9);
}

BlueFin::GlMeSrdSvIdReportMsmtSlot *BlueFin::GlMeSrdSvIdReportMsmtSlot::GlMeSrdSvIdReportMsmtSlot(BlueFin::GlMeSrdSvIdReportMsmtSlot *this)
{
  v3[0] = -1;
  int v4 = 0;
  __int16 v5 = 575;
  *(void *)this = &unk_270EBECA8;
  *((_DWORD *)this + 21) = 0;
  *((unsigned char *)this + 100) = 0;
  *((_DWORD *)this + 26) = -1;
  *((_WORD *)this + 54) = 575;
  BlueFin::GlMeDSPMeas::init((uint64_t)this, (uint64_t)v3);
  *((_DWORD *)this + 41) = 0;
  *((unsigned char *)this + 168) = 0;
  *((_WORD *)this + 80) = 0;
  *((unsigned char *)this + 162) = 0;
  return this;
}

double BlueFin::GlMeDSPMeas::init(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 84) = 0;
  *(unsigned char *)(a1 + 112) = -1;
  if (a1 + 100 != a2)
  {
    *(unsigned char *)(a1 + 100) = *(unsigned char *)a2;
    *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 4);
    *(_WORD *)(a1 + 108) = *(_WORD *)(a2 + 8);
  }
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = -1082130432;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_263BB2B70;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 116) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 2139095039;
  *(void *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  double result = 1.40444709e306;
  *(void *)(a1 + 148) = 0x7F7FFFFF00000000;
  return result;
}

uint64_t BlueFin::GlPeRqHdlrGnssMeasData::GlPeRqHdlrGnssMeasData(uint64_t a1, _DWORD *a2, int a3, int a4, uint64_t *a5)
{
  uint64_t v9 = a1 + 48896;
  uint64_t v10 = a1 + 43456;
  unsigned int v11 = (void *)BlueFin::GlPeRqHdlr::GlPeRqHdlr(a1, a2, a3, a4, a5);
  void *v11 = &unk_270EC5468;
  *(void *)uint64_t v10 = v11 + 5440;
  *(void *)(v10 + 8) = v11 + 5288;
  *(void *)(v10 + 16) = v11 + 5940;
  *(void *)(v10 + 24) = 0x23F000000000028;
  *(_WORD *)(v10 + 32) = 100;
  BlueFin::GlBigArray::Clear(v10);
  *(void *)uint64_t v9 = a1 + 48960;
  *(void *)(v9 + 8) = a1 + 47744;
  *(void *)(v9 + 16) = a1 + 52960;
  *(void *)(v9 + 24) = 0x23F000000000028;
  *(_WORD *)(v9 + 32) = 100;
  BlueFin::GlBigArray::Clear(v9);
  BlueFin::GlPeGnssSvsInfoMgr::GlPeGnssSvsInfoMgr((BlueFin::GlPeGnssSvsInfoMgr *)(a1 + 108864), a5[3], a5[2], a5[1], (uint64_t)a2, a1 + 53184, a1 + 108456, a5[7], a5[13], a5[15]);
  *(_DWORD *)(a1 + 175680) = 0;
  *(_DWORD *)(a1 + 175684) = a3;
  *(_DWORD *)(a1 + 175688) = 0;
  *(void *)(a1 + 42272) = 0;
  memset((void *)(a1 + 39968), 255, 0x8FCuLL);
  bzero((void *)(a1 + 64), 0x9BE0uLL);
  bzero((void *)(a1 + 53184), 0xD980uLL);
  return a1;
}

void sub_263966C5C(_Unwind_Exception *a1)
{
  BlueFin::GlPeRqHdlr::~GlPeRqHdlr(v1);
  _Unwind_Resume(a1);
}

BlueFin::GlBigArray *BlueFin::GlBigArray::GlBigArray(BlueFin::GlBigArray *this, void *a2, int a3, unsigned int a4, unsigned __int16 *a5, unsigned int a6, unsigned __int16 *a7, unsigned int a8)
{
  *(void *)this = a2;
  *((void *)this + 1) = a5;
  *((void *)this + 2) = a7;
  *((_DWORD *)this + 6) = a3;
  *((_WORD *)this + 14) = a4;
  *((_WORD *)this + 15) = a6;
  *((_WORD *)this + 16) = a8;
  if (a4 >= 0x10000)
  {
    uint64_t v10 = "m_usMinHandle == min_handle";
    DeviceFaultNotify("glutl_array.cpp", 190, "GlBigArray", (char)"m_usMinHandle == min_handle");
    int v11 = 190;
    goto LABEL_8;
  }
  if (a6 >= 0x10000)
  {
    uint64_t v10 = "m_usNumHandles == num_handles";
    DeviceFaultNotify("glutl_array.cpp", 191, "GlBigArray", (char)"m_usNumHandles == num_handles");
    int v11 = 191;
    goto LABEL_8;
  }
  if (a8 >= 0x10000)
  {
    uint64_t v10 = "m_usNumSlots == num_slots";
    DeviceFaultNotify("glutl_array.cpp", 192, "GlBigArray", (char)"m_usNumSlots == num_slots");
    int v11 = 192;
LABEL_8:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_array.cpp", v11, v10);
  }
  BlueFin::GlBigArray::Clear((uint64_t)this);
  return this;
}

uint64_t BlueFin::GlBigArray::Clear(uint64_t this)
{
  if (*(_WORD *)(this + 30))
  {
    unint64_t v1 = 0;
    uint64_t v2 = *(void *)(this + 8);
    do
      *(_WORD *)(v2 + 2 * v1++) = -1;
    while (v1 < *(unsigned __int16 *)(this + 30));
  }
  if (*(_WORD *)(this + 32))
  {
    unint64_t v3 = 0;
    uint64_t v4 = *(void *)(this + 16);
    do
    {
      *(_WORD *)(v4 + 2 * v3) = v3;
      ++v3;
      unint64_t v5 = *(unsigned __int16 *)(this + 32);
    }
    while (v3 < v5);
    __int16 v6 = v5 - 1;
  }
  else
  {
    __int16 v6 = -1;
  }
  *(_WORD *)(this + 34) = v6;
  return this;
}

BlueFin::GlPeGnssSvsInfoMgr *BlueFin::GlPeGnssSvsInfoMgr::GlPeGnssSvsInfoMgr(BlueFin::GlPeGnssSvsInfoMgr *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = 0;
  *(_DWORD *)this = 0;
  *((void *)this + 4) = a2;
  *((void *)this + 5) = a4;
  *((void *)this + 6) = a5;
  *((void *)this + 7) = a6;
  *((void *)this + 8) = a3;
  *((void *)this + 9) = a8;
  *((void *)this + 10) = a9;
  *((void *)this + 11) = a10;
  *((void *)this + 33) = (char *)this + 96;
  do
  {
    uint64_t v12 = *((void *)this + 33) + v11;
    *(void *)(v12 + 12) = 0;
    *(void *)uint64_t v12 = v12 + 12;
    *(unsigned char *)(v12 + 8) = 2;
    v11 += 24;
  }
  while (v11 != 168);
  uint64_t v13 = 0;
  *((void *)this + 8274) = (char *)this + 320;
  *((void *)this + 8346) = (char *)this + 66208;
  *((void *)this + 8347) = a7;
  *((void *)this + 8348) = a4;
  *((unsigned char *)this + 66792) = 0;
  do
  {
    uint64_t v14 = *((void *)this + 8346) + v13;
    *(_OWORD *)(v14 + 12) = 0uLL;
    *(void *)uint64_t v14 = v14 + 12;
    *(unsigned char *)(v14 + 8) = 8;
    *(_OWORD *)(v14 + 28) = 0uLL;
    *(_DWORD *)(v14 + 48) = -1;
    v13 += 56;
  }
  while (v13 != 560);
  BlueFin::GlPeGnssSvsInfoMgr::Clear(this);
  return this;
}

void BlueFin::GlPeGnssSvsInfoMgr::Clear(BlueFin::GlPeGnssSvsInfoMgr *this)
{
  uint64_t v1 = 0;
  uint64_t v2 = (uint64_t *)((char *)this + 66192);
  uint64_t v3 = *((void *)this + 8274);
  uint64_t v4 = 179;
  do
  {
    unint64_t v5 = (_OWORD *)(v3 + v1);
    v5[21] = 0uLL;
    v5[22] = 0uLL;
    v5[19] = 0uLL;
    v5[20] = 0uLL;
    v5[17] = 0uLL;
    v5[18] = 0uLL;
    v5[15] = 0uLL;
    v5[16] = 0uLL;
    v5[13] = 0uLL;
    v5[14] = 0uLL;
    v5[11] = 0uLL;
    v5[12] = 0uLL;
    v5[9] = 0uLL;
    v5[10] = 0uLL;
    v5[7] = 0uLL;
    v5[8] = 0uLL;
    v5[5] = 0uLL;
    v5[6] = 0uLL;
    v5[3] = 0uLL;
    v5[4] = 0uLL;
    v5[1] = 0uLL;
    v5[2] = 0uLL;
    *unint64_t v5 = 0uLL;
    uint64_t v3 = *v2;
    uint64_t v6 = *v2 + v1;
    *(_DWORD *)uint64_t v6 = 8;
    v1 += 368;
    *(_WORD *)(v6 + 4) = -2048;
    --v4;
  }
  while (v4);
  uint64_t v7 = 0;
  *((_DWORD *)this + 1) = 0;
  int v8 = *(_DWORD *)this;
  do
  {
    v8 |= 1 << LOWORD(BlueFin::GlPeGnssSvsInfoMgr::m_aeSupportedGnss2Impl[v7]);
    *(_DWORD *)this = v8;
    if (v7) {
      *((_DWORD *)this + v7 + 1) = *((_DWORD *)this + (v7 - 1) + 1)
    }
                                 + BlueFin::GlImplGnss::m_aucNumSatsPerImplGnss[BlueFin::GlPeGnssSvsInfoMgr::m_aeSupportedGnss2Impl[(v7 - 1)]];
    ++v7;
  }
  while (v7 != 6);
  uint64_t v9 = 0;
  *((unsigned char *)this + 288) = 0;
  uint64_t v10 = *((void *)this + 33);
  do
  {
    bzero(*(void **)(v10 + v9), ((4 * *(unsigned __int8 *)(v10 + v9 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    v9 += 24;
  }
  while (v9 != 168);
  uint64_t v11 = 0;
  uint64_t v12 = v2[72];
  do
  {
    bzero(*(void **)(v12 + v11), ((4 * *(unsigned __int8 *)(v12 + v11 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    *(_DWORD *)(v12 + v11 + 48) = -1;
    v11 += 56;
  }
  while (v11 != 560);
}

uint64_t BlueFin::GlPeReqBag::SetPlatfStat(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v6 = (unsigned char *)(a1 + 3233);
  char v7 = *(unsigned char *)(a1 + 3233);
  *(unsigned char *)(a1 + 3233) = 0;
  do
  {
    uint64_t result = *(void *)(a1 + v4);
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 144))(result, a2);
    }
    v4 += 8;
  }
  while (v4 != 576);
  *uint64_t v6 = v7;
  return result;
}

void sub_2639670D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned char *a11, char a12)
{
  *a11 = a12;
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlPeFirstFix::ComputeNumDof(unsigned __int8 *a1, float *a2, uint64_t a3, BlueFin::GlSignalIdSet *a4)
{
  int v8 = 0;
  uint64_t result = BlueFin::GlPeSubsets::GetIntegrityGeometry(a2, (uint64_t)a4, &v8);
  if (v8 == 2) {
    return BlueFin::GlPeNavUtil::GetIntegrityGeometry((BlueFin::GlPeNavUtil *)a1, a4, &v8, 15.0, a3, a1[244]);
  }
  return result;
}

uint64_t BlueFin::GlPeNavUtil::GetIntegrityGeometry(BlueFin::GlPeNavUtil *a1, BlueFin::GlSignalIdSet *this, _DWORD *a3, double a4, uint64_t a5, uint64_t a6)
{
  int v11 = 0;
  *a3 = 0;
  while (1)
  {
    int v12 = v11;
    if ((unsigned __int16)v11 > 2u) {
      break;
    }
    BlueFin::GlSignalIdSet::GetSvIdSet(this, (uint64_t)&__src);
    v16[0] = v15;
    memcpy(v19, __src, 4 * v15);
    __int16 v17 = 0;
    v16[1] = 0;
    int v18 = v19[0];
    BlueFin::GlSetIterator::operator++(v16);
    BlueFin::GlSignalIdSet::GetSvIdSet(this, (uint64_t)&__src);
    BlueFin::GlPeNavUtil::RecurseComputeDops(a1, (const BlueFin::GlSvIdSet *)&__src, (uint64_t)v16, a3, a6, (__int16)v12, a4);
    int v11 = v12 + 1;
    if (*a3) {
      return (__int16)(v12 - 1);
    }
  }
  LOWORD(v12) = 3;
  return (__int16)(v12 - 1);
}

BlueFin::GlPeNavUtil *BlueFin::GlPeNavUtil::RecurseComputeDops(BlueFin::GlPeNavUtil *result, const BlueFin::GlSvIdSet *a2, uint64_t a3, _DWORD *a4, uint64_t a5, int a6, double a7)
{
  int v11 = result;
  if (a6 < 1)
  {
    uint64_t result = (BlueFin::GlPeNavUtil *)BlueFin::GlPeNavUtil::ComputeDops(result, a2);
    if (*((float *)&v19 + 3) > a7) {
      *a4 = 1;
    }
  }
  else
  {
    long long v12 = *(_OWORD *)(a3 + 48);
    long long v18 = *(_OWORD *)(a3 + 32);
    long long v19 = v12;
    long long v20 = *(_OWORD *)(a3 + 64);
    int v21 = *(_DWORD *)(a3 + 80);
    long long v13 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)int v16 = *(_OWORD *)a3;
    long long v17 = v13;
    if (HIBYTE(v16[0]) != LOBYTE(v16[0]) && !*a4)
    {
      uint64_t v14 = (__int16)(a6 - 1);
      do
      {
        BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)v22, v23, 8u, (const void **)a2);
        BlueFin::GlSetBase::Remove((uint64_t)v22, LOBYTE(v16[1]));
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)v16);
        uint64_t result = (BlueFin::GlPeNavUtil *)BlueFin::GlPeNavUtil::RecurseComputeDops(v11, v22, v16, a4, a5, v14, a7);
      }
      while (HIBYTE(v16[0]) != LOBYTE(v16[0]) && *a4 == 0);
    }
  }
  return result;
}

uint64_t BlueFin::GlPeNavUtil::ComputeDops(BlueFin::GlPeNavUtil *this, const BlueFin::GlSvIdSet *a2)
{
  uint64_t v3 = *((void *)this + 2);
  int v5 = 0;
  uint64_t v6 = v8;
  char v7 = 8;
  memset(v8, 0, 32);
  *(_OWORD *)&v8[9] = xmmword_263BBA380;
  int32x2_t v9 = vdup_n_s32(0x42C60000u);
  int v10 = 1120272384;
  BlueFin::stDops::stDops((uint64_t)v11, (uint64_t)&v5);
  uint64_t v12 = v3;
  return BlueFin::GlPeDops::GetDops((uint64_t)v11, *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 200));
}

uint64_t gnss::FireGnssDevice::setConfigDutyCycling(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FireDeviceLog::DeviceLogBase(6, "#fgd setConfigDutyCycling isEnabled = %d", a3, a4, a5, a6, a7, a8, a2);
  int v11 = FireMessageHandler::sendAllowGnssDwellDutyCycling(*(FireMessageHandler **)(a1 + 40), a2);

  return std::function<void ()(gnss::Result)>::operator()(a3, v11);
}

uint64_t FireMessageHandler::sendAllowGnssDwellDutyCycling(FireMessageHandler *this, int a2)
{
  DeviceCommon::GetMachContinuousTime(this);
  if (*((unsigned __int8 *)this + 1352) != a2 || v10 - *((double *)this + 168) >= 6.0)
  {
    *((unsigned char *)this + 1352) = a2;
    *((double *)this + 168) = v10;
    FireMessageHandler::send((uint64_t)this, 1073741826, v4, v5, v6, v7, v8, v9);
  }
  return 1;
}

uint64_t BlueFin::GlMeSrdRfInit4777::ProgramArRegs(BlueFin::GlMeSrdRfInit4777 *this)
{
  *((_DWORD *)this + 556) = 0;
  int v2 = *((_DWORD *)this + 554);
  if (v2 == 4)
  {
    int v10 = *(_DWORD *)(*(void *)this + 2184);
    BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 224, 338, 156);
    if (v10 == 4) {
      int v5 = 143;
    }
    else {
      int v5 = 160;
    }
    if (v10 == 4) {
      int v6 = 57;
    }
    else {
      int v6 = 237;
    }
    if (v10 == 4) {
      int v7 = 21;
    }
    else {
      int v7 = 80;
    }
    if (v10 == 4) {
      int v8 = 210;
    }
    else {
      int v8 = 63;
    }
    if (v10 == 4) {
      int v11 = 121;
    }
    else {
      int v11 = 122;
    }
    int v12 = 104;
    int v13 = 52;
    int v14 = 4;
    int v15 = 16;
  }
  else
  {
    if (v2 == 3)
    {
      int v3 = *(_DWORD *)(*(void *)this + 2184);
      BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 224, 338, 78);
      BOOL v4 = v3 == 4;
      if (v3 == 4) {
        int v5 = 143;
      }
      else {
        int v5 = 160;
      }
      if (v3 == 4) {
        int v6 = 57;
      }
      else {
        int v6 = 237;
      }
      if (v3 == 4) {
        int v7 = 21;
      }
      else {
        int v7 = 80;
      }
      if (v3 == 4) {
        int v8 = 210;
      }
      else {
        int v8 = 63;
      }
      int v9 = 121;
    }
    else
    {
      int v16 = *(_DWORD *)(*(void *)this + 2184);
      BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 224, 338, 78);
      BOOL v4 = v16 == 4;
      if (v16 == 4) {
        int v5 = 143;
      }
      else {
        int v5 = 160;
      }
      if (v16 == 4) {
        int v6 = 64;
      }
      else {
        int v6 = 192;
      }
      if (v16 == 4) {
        int v7 = 47;
      }
      else {
        int v7 = 162;
      }
      if (v16 == 4) {
        int v8 = 164;
      }
      else {
        int v8 = 126;
      }
      int v9 = 243;
    }
    if (v4) {
      int v11 = v9;
    }
    else {
      int v11 = v9 + 1;
    }
    int v12 = 52;
    int v13 = 26;
    int v14 = 2;
    int v15 = 8;
  }
  BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 224, 329, v5);
  BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 224, 336, 18);
  BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 224, 277, v6);
  BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 224, 278, v7);
  BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 224, 279, v8);
  BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 224, 280, v11);
  BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 224, 307, v15);
  BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 224, 308, v14);
  BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 224, 324, v13);
  BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 224, 305, v12);
  BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 224, 182, 87);
  if (((*(uint64_t (**)(void))(**(void **)this + 184))() & 0xF000FFFE) == 0x30000014)
  {
    if (*((_DWORD *)this + 554) == 3) {
      int v17 = 38;
    }
    else {
      int v17 = 34;
    }
    BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 224, 18, v17);
    BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 224, 290, 0);
    BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 224, 342, 12);
    BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 224, 312, 128);
    BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 224, 313, 10);
    BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 224, 323, 24);
    BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 224, 341, 129);
  }
  uint64_t result = BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 224, 21, 6);
  if ((*(unsigned char *)(*(void *)this + 1416) & 3) == 0)
  {
    BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 224, 354, 2);
    BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 224, 351, 8);
    BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 224, 87, 24);
    uint64_t result = BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 224, 148, 24);
  }
  int v19 = *((_DWORD *)this + 561);
  if (v19)
  {
    if (*((_DWORD *)this + 2) == 1)
    {
      if ((v19 - 1) >= 2)
      {
        if (v19 == 3)
        {
          long long v20 = "m_eIfTestPoint != IF_TEST_OUTPUT_L5_I";
          DeviceFaultNotify("glmesrd_rfinit_minnow.cpp", 1223, "ProgramArRegsForIfTestPoint", (char)"m_eIfTestPoint != IF_TEST_OUTPUT_L5_I");
          int v21 = 1223;
        }
        else
        {
          if (v19 != 4)
          {
LABEL_61:
            long long v20 = "0";
            DeviceFaultNotify("glmesrd_rfinit_minnow.cpp", 1264, "ProgramArRegsForIfTestPoint", (char)"0");
            int v21 = 1264;
            goto LABEL_62;
          }
          long long v20 = "m_eIfTestPoint != IF_TEST_OUTPUT_L5_Q";
          DeviceFaultNotify("glmesrd_rfinit_minnow.cpp", 1224, "ProgramArRegsForIfTestPoint", (char)"m_eIfTestPoint != IF_TEST_OUTPUT_L5_Q");
          int v21 = 1224;
        }
LABEL_62:
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_rfinit_minnow.cpp", v21, v20);
      }
    }
    else
    {
      if ((v19 - 3) < 2)
      {
        int v25 = 12;
        BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 224, 12, 185);
        __int16 v23 = 136;
        int v24 = 3;
LABEL_75:
        BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 224, 24, 214);
        BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 224, 25, v25);
        BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 224, 409, 2);
        if (*((_DWORD *)this + 561) == v24) {
          int v26 = 15;
        }
        else {
          int v26 = 14;
        }
        return BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 224, v23, v26);
      }
      if ((v19 - 1) > 1) {
        goto LABEL_61;
      }
    }
    if (((*(uint64_t (**)(void))(**(void **)this + 184))() & 0xF0FFFFFF) == 0x30000013
      && (*(unsigned int (**)(void))(**(void **)this + 1176))(*(void *)this) == 3)
    {
      int v22 = 33;
    }
    else
    {
      int v22 = 1;
    }
    BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 224, 8, v22);
    BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 224, 9, 5);
    __int16 v23 = 81;
    int v24 = 1;
    int v25 = 10;
    goto LABEL_75;
  }
  if (*((unsigned char *)this + 2240))
  {
    BlueFin::GlMeSrdRfInit4777::AddOrUpdateInput((uint64_t)this, 63, 1, 1);
    BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 224, 408, 0);
    BlueFin::GlMeSrdRfInit4777::AddOrUpdateInput((uint64_t)this, 409, 7, 4);
    BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 224, 175, 12);
    BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 224, 176, 2);
    return BlueFin::GlMeSrdRfInit4777::AddOrUpdateInput((uint64_t)this, 33, 3, 3);
  }
  return result;
}

uint64_t BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput(uint64_t this, char a2, __int16 a3, int a4)
{
  uint64_t v4 = *(unsigned int *)(this + 2224);
  if (v4 >= 0x100)
  {
    DeviceFaultNotify("glmesrd_rfinit_minnow.cpp", 533, "Add_wOffsetInput", (char)"bIsulApbCount");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_rfinit_minnow.cpp", 533, "bIsulApbCount");
  }
  uint64_t v5 = this + 8 * v4;
  *(unsigned char *)(v5 + 88) = a2;
  *(_WORD *)(v5 + 90) = a3;
  *(_DWORD *)(v5 + 92) = a4;
  *(_DWORD *)(this + 2224) = v4 + 1;
  return this;
}

uint64_t BlueFin::GlMeSrdSatReport::ProcessTrkMsmt(uint64_t a1, uint64_t a2, const BlueFin::GlSignalId *a3, int a4, __int16 a5, uint64_t a6, BlueFin::GlMeSrdStats *a7)
{
  uint64_t v12 = a1 + 24;
  BlueFin::GlMeSrdSatRptTrkMsmtMI::GlMeSrdSatRptTrkMsmtMI((uint64_t)v27, a2, (uint64_t)a3, a1 + 24, **(void **)(a1 + 8), *(void *)a1, a4, a5);
  uint64_t v13 = **(void **)(a1 + 8);
  uint64_t v14 = (*(uint64_t (**)(void))(**(void **)a1 + 16))();
  v23[0] = *(unsigned char *)a3;
  int v24 = *((_DWORD *)a3 + 1);
  __int16 v25 = *((_WORD *)a3 + 4);
  BlueFin::GlMeSrdSatRptNoiseStats::GlMeSrdSatRptNoiseStats((uint64_t)v26, v13, v14, (uint64_t)v23);
  uint64_t v15 = v28;
  int v16 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 24) + 40))(*(void *)(*(void *)(a1 + 8) + 24));
  if (a7 && v16)
  {
    GlCustomLog(15, "SetTrkMsmtIQPower for SvId: %d Index %s PLL I %ul PLL Q %ul\n", *(unsigned __int8 *)a3, BlueFin::GlSignalId::s_ausSignalType2str[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)a3 + 1) - *((int *)a3 + 1) + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a3]]], *(_DWORD *)(a2 + 932), *(_DWORD *)(a2 + 936));
    BlueFin::GlMeSrdStats::SetTrkMsmtIQPower(a7, *(_DWORD *)(a2 + 932), *(_DWORD *)(a2 + 936), a3);
  }
  uint64_t v17 = (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 32))(**(void **)(a1 + 8));
  uint64_t v18 = (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 136))(**(void **)(a1 + 8));
  uint64_t v19 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 8) + 144))(**(void **)(a1 + 8), v15);
  uint64_t v20 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 8) + 168))(**(void **)(a1 + 8), v15);
  uint64_t v21 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 8) + 184))(**(void **)(a1 + 8), v15);
  BlueFin::GlMeSrdSatReport::RunTrkEstimatorAlgorithms(a1, v17, v18, v19, v20, v21, v26, v27, a6);
  return BlueFin::GlMeSrdSatRptTrkMsmtMI::UpdateState(v27, v12);
}

uint64_t BlueFin::GlMeSrdReceiverParameters::GetAllModesTrkParamsFromGearId(BlueFin::GlMeSrdReceiverParameters *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)BlueFin::GlMeSrdReceiverParameters::rRxIfc(this) + 144);

  return v1();
}

uint64_t BlueFin::GlMeRxParamStd::GetAllModesTrkParamsFromGearId(int **this, uint64_t a2)
{
  uint64_t v4 = *((void *)BlueFin::GlMeRxParamStd::rMap(this) + 6);
  return v4 + 208 * (*((unsigned int (**)(int **, uint64_t))*this + 10))(this, a2) + 72;
}

uint64_t BlueFin::GlMeSrdReceiverParameters::GetAllParams(BlueFin::GlMeSrdReceiverParameters *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)BlueFin::GlMeSrdReceiverParameters::rRxIfc(this) + 32);

  return v1();
}

uint64_t BlueFin::GlMeSrdSatRptTrkMsmtMI::UpdateState(int *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  double v5 = (double)*(int *)(*(void *)a1 + 68) * 0.0000000596046448 + (double)*(int *)(*(void *)a1 + 64);
  double v6 = *(double *)(a2 + 8);
  if (vabdd_f64(v6, v5) > 4194304.0)
  {
    int v7 = *(_DWORD *)(a2 + 16);
    if (v6 > v5) {
      int v8 = v7 + 1;
    }
    else {
      int v8 = v7 - 1;
    }
    *(_DWORD *)(a2 + 16) = v8;
  }
  *(double *)(a2 + 8) = v5;
  long double v9 = BlueFin::GlMeSrdAsicUnitConverter::EswUtStructToFinalUserTimeMs((unsigned __int16 *)(v4 + 36), *((unsigned __int8 **)a1 + 4), a1[6]);
  double v10 = fmod(v9, 4294967300.0);
  if (v9 <= 4294967300.0) {
    double v10 = v9;
  }
  if (v10 < -4294967300.0) {
    double v10 = -fmod(-v10, 4294967300.0);
  }
  if (v10 < 0.0) {
    unsigned int v11 = --v10;
  }
  else {
    unsigned int v11 = v10;
  }
  *(_DWORD *)a2 = v11;
  uint64_t result = BlueFin::GlMeSrdSatRptTrkMsmtMIBase::GetEpochCntInBits((BlueFin::GlMeSrdSatRptTrkMsmtMIBase *)a1);
  *(_DWORD *)(a2 + 4) = result;
  if ((*(unsigned char *)(*(void *)a1 + 8) & 0x20) != 0)
  {
    *(_DWORD *)(a2 + 20) = a1[872];
    long long v13 = *(_OWORD *)(a1 + 889);
    long long v14 = *(_OWORD *)(a1 + 893);
    int v15 = a1[897];
    *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 885);
    *(_DWORD *)(a2 + 120) = v15;
    *(_OWORD *)(a2 + 104) = v14;
    *(_OWORD *)(a2 + 88) = v13;
    long long v16 = *(_OWORD *)(a1 + 873);
    long long v17 = *(_OWORD *)(a1 + 877);
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 881);
    *(_OWORD *)(a2 + 40) = v17;
    *(_OWORD *)(a2 + 24) = v16;
  }
  else
  {
    *(_DWORD *)(a2 + 20) = 0;
  }
  return result;
}

uint64_t BlueFin::GlMeRxParamStd::GetAllParams(int **this)
{
  return *((void *)BlueFin::GlMeRxParamStd::rMap(this) + 4);
}

uint64_t BlueFin::GlMeSrdSatRptNoiseStats::GlMeSrdSatRptNoiseStats(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5 = a3;
  float v8 = (*(float (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, a3, a4);
  *(float *)a1 = v8;
  *(_DWORD *)(a1 + 4) = 1065353216;
  if ((v5 & 0xF000FFFE) == 0x30000010) {
    *(float *)(a1 + 4) = v8
  }
                       / (*(float (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, 889192463, a4);
  return a1;
}

uint64_t BlueFin::GlMeSrdSatRptTrkMsmtMI::GlMeSrdSatRptTrkMsmtMI(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, __int16 a8)
{
  uint64_t v13 = a1 + 972;
  uint64_t v14 = BlueFin::GlMeSrdSatRptTrkMsmtMIBase::GlMeSrdSatRptTrkMsmtMIBase(a1, a2, a3, a4, a5, a7);
  *(void *)(v14 + 48) = a6;
  *(unsigned char *)(v14 + 56) = 0;
  v242 = (unsigned char *)(v14 + 56);
  *(unsigned char *)(v14 + 64) = 0;
  uint64_t v15 = v14 + 64;
  *(_DWORD *)(v14 + 60) = 0;
  *(_DWORD *)(v14 + 68) = 0;
  *(_WORD *)(v14 + 72) = 575;
  *(_DWORD *)(v14 + 76) = 0;
  *(_WORD *)(v14 + 80) = 0;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 120) = 0u;
  *(unsigned char *)(v14 + 136) = 0;
  *(int32x2_t *)(v14 + 140) = vdup_n_s32(0x7F7FFFFFu);
  v243 = (unsigned char *)(v14 + 152);
  BlueFin::GlMeSrdAsicCorrVecTrkMsmt::GlMeSrdAsicCorrVecTrkMsmt(v14 + 152, 0);
  v244 = (char *)(a1 + 344);
  BlueFin::GlMeSrdAsicCorrVecTrkMsmt::GlMeSrdAsicCorrVecTrkMsmt(a1 + 344, 1);
  *(unsigned char *)(a1 + 536) = 0;
  *(unsigned char *)(a1 + 544) = 0;
  *(void *)(a1 + 548) = 0x7F7FFFFF7F7FFFFFLL;
  *(int64x2_t *)(a1 + 560) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_DWORD *)(a1 + 576) = -1;
  *(unsigned char *)(a1 + 580) = -1;
  *(unsigned char *)(a1 + 584) = 0;
  *(unsigned char *)(a1 + 608) = 0;
  *(unsigned char *)(a1 + 624) = 0;
  *(unsigned char *)(a1 + 680) = 0;
  *(unsigned char *)(a1 + 732) = 0;
  *(unsigned char *)(a1 + 740) = -1;
  *(_DWORD *)(a1 + 736) = -1;
  *(_WORD *)(a1 + 844) = 0;
  *(unsigned char *)(a1 + 852) = -1;
  *(_DWORD *)(a1 + 848) = -1;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_DWORD *)(a1 + 840) = 0;
  *(_DWORD *)(a1 + 952) = 0;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_WORD *)(a1 + 728) = 0;
  *(_DWORD *)(a1 + 980) = 0;
  *(void *)(a1 + 960) = 0;
  *(_DWORD *)(a1 + 968) = 0;
  *(int32x2_t *)uint64_t v13 = vdup_n_s32(0xFF7FFFFD);
  uint64_t v241 = v13;
  *(int64x2_t *)(v13 + 12) = vdupq_n_s64(0x47EFFFFFA0000000uLL);
  *(unsigned char *)(a1 + 1000) = 0;
  *(_DWORD *)(a1 + 1004) = 0;
  *(unsigned char *)(a1 + 1008) = 0;
  *(void *)(a1 + 1016) = 0x7FEFFFFFFFFFFFFFLL;
  *(unsigned char *)(a1 + 1024) = 0;
  *(void *)(a1 + 1028) = 0;
  *(void *)(a1 + 1036) = 0;
  *(void *)(a1 + 1042) = 0;
  *(unsigned char *)(a1 + 1056) = 0;
  *(_DWORD *)(a1 + 1060) = 0;
  *(unsigned char *)(a1 + 1064) = 0;
  *(_DWORD *)(a1 + 1068) = 0;
  *(_WORD *)(a1 + 1072) = 575;
  *(_DWORD *)(a1 + 1076) = 0;
  *(_WORD *)(a1 + 1080) = 0;
  *(unsigned char *)(a1 + 1136) = 0;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(unsigned char *)(a1 + 1144) = 0;
  *(_WORD *)(a1 + 1816) = -1;
  *(_DWORD *)(a1 + 1146) = -1;
  *(_DWORD *)(a1 + 1536) = -16777216;
  *(unsigned char *)(a1 + 1540) = -1;
  *(_DWORD *)(a1 + 1544) = -1;
  *(_DWORD *)(a1 + 1804) = 0xFFFF;
  *(void *)(a1 + 1808) = -1;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1772) = 0u;
  *(_OWORD *)(a1 + 1788) = 0u;
  *(_OWORD *)(a1 + 1740) = 0u;
  *(_OWORD *)(a1 + 1756) = 0u;
  *(_OWORD *)(a1 + 1708) = 0u;
  *(_OWORD *)(a1 + 1724) = 0u;
  *(_OWORD *)(a1 + 1676) = 0u;
  *(_OWORD *)(a1 + 1692) = 0u;
  *(_OWORD *)(a1 + 1644) = 0u;
  *(_OWORD *)(a1 + 1660) = 0u;
  *(_OWORD *)(a1 + 1612) = 0u;
  *(_OWORD *)(a1 + 1628) = 0u;
  *(_OWORD *)(a1 + 1580) = 0u;
  *(_OWORD *)(a1 + 1596) = 0u;
  *(_OWORD *)(a1 + 1548) = 0u;
  *(_OWORD *)(a1 + 1564) = 0u;
  *(_DWORD *)(a1 + 2156) = 0;
  *(_OWORD *)(a1 + 2124) = 0u;
  *(_OWORD *)(a1 + 2140) = 0u;
  *(_OWORD *)(a1 + 2092) = 0u;
  *(_OWORD *)(a1 + 2108) = 0u;
  *(_OWORD *)(a1 + 2060) = 0u;
  *(_OWORD *)(a1 + 2076) = 0u;
  *(_OWORD *)(a1 + 2028) = 0u;
  *(_OWORD *)(a1 + 2044) = 0u;
  *(_OWORD *)(a1 + 1996) = 0u;
  *(_OWORD *)(a1 + 2012) = 0u;
  *(_OWORD *)(a1 + 1964) = 0u;
  *(_OWORD *)(a1 + 1980) = 0u;
  *(_OWORD *)(a1 + 1932) = 0u;
  *(_OWORD *)(a1 + 1948) = 0u;
  *(_OWORD *)(a1 + 1900) = 0u;
  *(_OWORD *)(a1 + 1916) = 0u;
  *(_OWORD *)(a1 + 1868) = 0u;
  *(_OWORD *)(a1 + 1884) = 0u;
  *(_OWORD *)(a1 + 1836) = 0u;
  *(_OWORD *)(a1 + 1852) = 0u;
  *(_OWORD *)(a1 + 1820) = 0u;
  BlueFin::GlMeSrdGridResults::GlMeSrdGridResults((BlueFin::GlMeSrdGridResults *)(a1 + 2160));
  *(_DWORD *)(a1 + 3472) = a7;
  *(_WORD *)(a1 + 3476) = a8;
  uint64_t v16 = *(void *)(a1 + 16);
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a6 + 16))(a6);
  *(double *)(a1 + 3480) = (*(float (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16 + 48))(v16, v17, a3);
  uint64_t v18 = *(void *)a1;
  int v19 = *(_DWORD *)(*(void *)a1 + 8);
  uint64_t v20 = *(void *)a1;
  if ((*(void *)&v19 & 0x1011ELL) != 0x116)
  {
    uint64_t v20 = *(void *)a1;
    if ((v19 & 0x200000) == 0)
    {
      DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", 185, "CheckRpcBuffer", (char)"(otFlags.Has(FLGS_RECEIVED_ACQ_WIN) && otFlags.Has(FLG_ACQWIN_HAS_COUNT) && otFlags.Has(FLGS_RECEIVED_TRACK) && otFlags.Missing(FLGS_RECEIVED_SEARCH) && otFlags.Missing(FLGS_RECEIVED_SNIFF) && otFlags.Has(FLG_TRACK_HAS_DEBUG)) || otFlags.Has(FLGS_RECEIVED_CW)");
      CrashData();
      uint64_t v20 = *(void *)a1;
    }
  }
  if (!*(_WORD *)(v20 + 324) && (*(unsigned char *)(v18 + 10) & 0x20) == 0)
  {
    DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", 187, "CheckRpcBuffer", (char)"m_rRpcBuffer.GetTrkMsmtRawData().hss.nb_samples > 0 || otFlags.Has(FLGS_RECEIVED_CW)");
    CrashData();
    uint64_t v20 = *(void *)a1;
  }
  uint64_t v21 = 0;
  uint64_t v22 = v20 + 25;
  do
  {
    if (*(unsigned __int8 *)(v22 + v21) != 255)
    {
      int v23 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 80))(*(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 40));
      if (v23 != (*(unsigned int (**)(void, void))(**(void **)(a1 + 16) + 80))(*(void *)(a1 + 16), *(unsigned __int8 *)(v22 + v21)))
      {
        DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", 195, "CheckRpcBuffer", (char)"m_rRxParam.GetCnstl(m_ucFirstBlkGearId) == m_rRxParam.GetCnstl(sAcqWin.id.flags.te.blk_gear_id[i])");
        CrashData();
      }
    }
    ++v21;
  }
  while (v21 != 5);
  if (*(unsigned __int8 *)(a1 + 40) == 255 || *(unsigned __int8 *)(a1 + 41) == 255)
  {
    DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", 198, "CheckRpcBuffer", (char)"m_ucFirstBlkGearId != INVALID_GEAR_ID && m_ucLastBlkGearId != INVALID_GEAR_ID");
    CrashData();
  }
  int v24 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 80))(*(void *)(a1 + 16));
  __int16 v25 = *(unsigned __int8 **)(a1 + 32);
  int v26 = *v25;
  int v27 = BlueFin::GlSvId::s_aucSvId2gnss[*v25];
  switch(v24)
  {
    case 0:
      if ((v27 - 3) >= 4 && v27 != 0)
      {
        unsigned int v29 = "eGnss == GNSS_GPS INC_QZS(|| eGnss == GNSS_QZSS) INC_BDS(|| eGnss == GNSS_BEIDOU) INC_GAL(|| eGnss == GNSS"
              "_GALILEO) INC_NIC(|| eGnss == GNSS_NAVIC)";
        int v30 = 210;
        goto LABEL_32;
      }
      break;
    case 1:
      if (v27 != 2)
      {
        unsigned int v29 = "INC_GLO( eGnss == GNSS_GLONASS) OMIT_GLO(false)";
        int v30 = 213;
        goto LABEL_32;
      }
      break;
    case 2:
      if ((*(unsigned char *)(v18 + 10) & 0x20) == 0 && v27 != 1)
      {
        if (v27 != 4
          || ((v26 - 76) <= 0x3E
            ? (BOOL v31 = ((1 << (v26 - 76)) & 0x7C0000000000001FLL) == 0)
            : (BOOL v31 = 1),
              v31))
        {
          unsigned int v29 = "otFlags.Has(FLGS_RECEIVED_CW) INC_SBS(|| (eGnss == GNSS_SBAS)) INC_BDS(|| (eGnss == GNSS_BEIDOU && m_otS"
                "ignalId.IsBeidouGeo()))";
          int v30 = 218;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      switch(BlueFin::GlSvId::s_aucSvId2gnss[*v25])
      {
        case 0:
        case 3:
        case 5:
          goto LABEL_41;
        case 4:
          if ((v26 - 81) >= 0x35) {
            goto LABEL_35;
          }
          break;
        default:
LABEL_35:
          unsigned int v29 = "eGnss == GNSS_GPS INC_QZS(|| eGnss == GNSS_QZSS) INC_BDS(|| (eGnss == GNSS_BEIDOU && m_otSignalId.IsBeid"
                "ouNonGeo())) INC_GAL(|| (eGnss == GNSS_GALILEO))";
          int v30 = 224;
          goto LABEL_32;
      }
      break;
    case 4:
      if (*((_DWORD *)v25 + 1) == 3)
      {
        switch(BlueFin::GlSvId::s_aucSvId2gnss[*v25])
        {
          case 0:
          case 3:
          case 5:
            goto LABEL_41;
          case 4:
            if ((v26 - 81) >= 0x35) {
              goto LABEL_39;
            }
            break;
          default:
LABEL_39:
            unsigned int v29 = "eGnss == GNSS_GPS INC_QZS(|| eGnss == GNSS_QZSS) INC_BDS(|| (eGnss == GNSS_BEIDOU && m_otSignalId.IsBe"
                  "idouNonGeo())) INC_GAL(|| eGnss == GNSS_GALILEO)";
            int v30 = 232;
            goto LABEL_32;
        }
      }
      else if (v27 != 5)
      {
        unsigned int v29 = "INC_GAL(eGnss == GNSS_GALILEO) OMIT_GAL(false)";
        int v30 = 236;
        goto LABEL_32;
      }
      break;
    default:
      unsigned int v29 = "false";
      int v30 = 240;
LABEL_32:
      DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", v30, "CheckRpcBuffer", (char)v29);
      CrashData();
      break;
  }
LABEL_41:
  int v32 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 41));
  int v33 = *(unsigned char *)(*(void *)a1 + 24) & 0xF;
  switch(v32)
  {
    case 0:
      if ((*(unsigned char *)(*(void *)a1 + 24) & 0xF) != 0)
      {
        unsigned int v34 = "eTrkMode == TRK_PRE_BIT_MODE";
        int v35 = 248;
        goto LABEL_45;
      }
      break;
    case 1:
      if (v33 != 1)
      {
        unsigned int v34 = "eTrkMode == TRK_POST_BIT_MODE";
        int v35 = 249;
        goto LABEL_45;
      }
      break;
    case 2:
      if (v33 != 2)
      {
        unsigned int v34 = "eTrkMode == TRK_POST_FRAME_MODE";
        int v35 = 250;
        goto LABEL_45;
      }
      break;
    case 3:
      if (v33 != 6)
      {
        unsigned int v34 = "eTrkMode == TRK_POST_FRAMENCVEC_MODE";
        int v35 = 251;
        goto LABEL_45;
      }
      break;
    case 4:
      if (v33 != 3)
      {
        unsigned int v34 = "eTrkMode == TRK_DATA_WIPEOFF_MODE";
        int v35 = 252;
        goto LABEL_45;
      }
      break;
    case 5:
      if (v33 != 1)
      {
        unsigned int v34 = "eTrkMode == TRK_POST_BIT_MODE";
        int v35 = 253;
        goto LABEL_45;
      }
      break;
    default:
      unsigned int v34 = "false";
      int v35 = 255;
LABEL_45:
      DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", v35, "CheckRpcBuffer", (char)v34);
      CrashData();
      break;
  }
  uint64_t v36 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 184))(*(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 41));
  uint64_t v37 = *(void *)a1;
  uint64_t v38 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 136))(*(void *)(a1 + 16));
  uint64_t v39 = v38;
  int v40 = *(_DWORD *)(*(void *)a1 + 8);
  if ((~v40 & 0x100002) == 0)
  {
    unsigned int v41 = (*(unsigned __int16 *)(v37 + 3146) >> 1) & 0x1F;
    uint64_t v42 = *(void *)(v38 + 64);
    if (*(unsigned __int8 *)(v42 + 8) <= v41)
    {
      DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", 552, "BuildAcqWindowMsmtInfo", (char)"rTrkGrid.tapcfg.tap_info.bits.cfg_id < (GlIntU8)(stAllCnstlTrkParams.ptrStrTrkGridConfigLUT->nb_configs)");
      CrashData();
      uint64_t v42 = *(void *)(v39 + 64);
      unsigned int v41 = (*(unsigned __int16 *)(v37 + 3146) >> 1) & 0x1F;
    }
LABEL_64:
    uint64_t v43 = v42 + 12 * v41 + 12;
    goto LABEL_65;
  }
  if ((~v40 & 0x40002) == 0)
  {
    unsigned int v41 = *(unsigned __int8 *)(v37 + 1845);
    uint64_t v42 = *(void *)(v38 + 64);
    if (*(unsigned __int8 *)(v42 + 8) <= v41)
    {
      DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", 557, "BuildAcqWindowMsmtInfo", (char)"rTrkGrid.data.cfg < (GlIntU8)(stAllCnstlTrkParams.ptrStrTrkGridConfigLUT->nb_configs)");
      CrashData();
      uint64_t v42 = *(void *)(v39 + 64);
      unsigned int v41 = *(unsigned __int8 *)(v37 + 1845);
    }
    goto LABEL_64;
  }
  if ((~v40 & 0x80002) == 0)
  {
    unsigned int v41 = *(unsigned __int8 *)(v37 + 2913);
    uint64_t v42 = *(void *)(v38 + 64);
    if (*(unsigned __int8 *)(v42 + 8) <= v41)
    {
      DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", 562, "BuildAcqWindowMsmtInfo", (char)"rTrkGrid.msmt.cfg < (GlIntU8)(stAllCnstlTrkParams.ptrStrTrkGridConfigLUT->nb_configs)");
      CrashData();
      uint64_t v42 = *(void *)(v39 + 64);
      unsigned int v41 = *(unsigned __int8 *)(v37 + 2913);
    }
    goto LABEL_64;
  }
  uint64_t v43 = *(void *)(*(void *)(a1 + 8) + 456);
  if (!v43)
  {
    double v44 = 0.0;
    goto LABEL_71;
  }
LABEL_65:
  double v44 = 0.0;
  if ((*(unsigned char *)(*(void *)a1 + 104) & 8) != 0)
  {
    unsigned int v45 = (*(unsigned __int16 *)(v43 + 8) >> 4) & 0x1F;
    if (v45)
    {
      int v46 = *(unsigned __int8 **)(a1 + 32);
      if (*((unsigned __int16 *)v46 + 4) >= 0x23Fu) {
        goto LABEL_323;
      }
      uint64_t v47 = *((int *)v46 + 1);
      uint64_t v48 = BlueFin::GlSvId::s_aucSvId2gnss[*v46];
      unsigned int v49 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v47 - v47 + v48];
      if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v47 - v47 + v48]) {
        goto LABEL_324;
      }
      unsigned int v50 = BlueFin::GlSignalId::s_aulSignalIndexAndGnss2chipsPerEpoch[7 * (int)v47 + v48];
      if (!v50)
      {
LABEL_325:
        v239 = "ucChipsPerEpoch != 0";
        DeviceFaultNotify("glsignalid.h", 784, "GetChipsPerEpoch", (char)"ucChipsPerEpoch != 0");
        int v240 = 784;
LABEL_326:
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v240, v239);
      }
      double v44 = (double)v49 * 0.001 * (double)v45 / (double)v50;
    }
  }
LABEL_71:
  *(unsigned char *)(a1 + 56) = 1;
  *(_DWORD *)(a1 + 60) = 2;
  uint64_t v51 = *(void *)(a1 + 32);
  if (v15 != v51)
  {
    *(unsigned char *)(a1 + 64) = *(unsigned char *)v51;
    *(_DWORD *)(a1 + 68) = *(_DWORD *)(v51 + 4);
    *(_WORD *)(a1 + 72) = *(_WORD *)(v51 + 8);
  }
  *(double *)(a1 + 96) = BlueFin::GlMeSrdAsicUnitConverter::EswUtStructToInitialUserTimeMs(v37 + 36, (unsigned __int8 *)v51, *(_DWORD *)(a1 + 24))* 0.001;
  *(double *)(a1 + 96) = *(double *)(a1 + 96)
                       - (*(float (**)(void, void))(**(void **)(a1 + 16) + 56))(*(void *)(a1 + 16), *(void *)(a1 + 32));
  *(double *)(a1 + 96) = *(double *)(a1 + 96)
                       - BlueFin::GlSignalId::GetInterSignalBiasInMs(*(unsigned __int8 **)(a1 + 32), *(void *)(a1 + 48))* 0.001- v44;
  unsigned int v54 = *(unsigned __int8 **)(a1 + 32);
  if (*((unsigned __int16 *)v54 + 4) >= 0x23Fu) {
    goto LABEL_323;
  }
  uint64_t v55 = *((int *)v54 + 1);
  uint64_t v56 = BlueFin::GlSvId::s_aucSvId2gnss[*v54];
  unsigned int v57 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v55 - v55 + v56];
  if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v55 - v55 + v56]) {
    goto LABEL_324;
  }
  unsigned int v58 = BlueFin::GlSignalId::s_aulSignalIndexAndGnss2chipsPerEpoch[7 * (int)v55 + v56];
  if (!v58) {
    goto LABEL_325;
  }
  unsigned int v59 = *(_DWORD *)(v37 + 44);
  LOWORD(v52) = *(_WORD *)(v37 + 56);
  LODWORD(v53) = BlueFin::GlMeSrdAsicUnitConverter::ulChnTmNcoLsbScale;
  *(double *)&unint64_t v60 = (double)v52 / (double)v53;
  double v61 = *(double *)&v60 + (double)(v59 & (unsigned __int16)BlueFin::GlMeSrdAsicUnitConverter::usChnTmNcoMsbMsk);
  LOBYTE(v60) = BlueFin::GlMeSrdAsicUnitConverter::ucSubChipResolution;
  *(double *)(a1 + 104) = (v61 / (double)v60 + (double)(v59 >> BlueFin::GlMeSrdAsicUnitConverter::ucChnTmNcoMsbSft))
                        * ((double)v57
                         * 0.001)
                        / (double)v58;
  *(double *)(a1 + 120) = BlueFin::GlMeSrdAsicUnitConverter::EswUtStructToFinalUserTimeMs((unsigned __int16 *)(v37 + 36), v54, *(_DWORD *)(a1 + 24))* 0.001;
  *(double *)(a1 + 120) = *(double *)(a1 + 120)
                        - (*(float (**)(void, void))(**(void **)(a1 + 16) + 56))(*(void *)(a1 + 16), *(void *)(a1 + 32));
  *(double *)(a1 + 120) = *(double *)(a1 + 120)
                        - BlueFin::GlSignalId::GetInterSignalBiasInMs(*(unsigned __int8 **)(a1 + 32), *(void *)(a1 + 48))* 0.001- v44;
  unsigned int v64 = *(unsigned __int8 **)(a1 + 32);
  if (*((unsigned __int16 *)v64 + 4) >= 0x23Fu) {
    goto LABEL_323;
  }
  uint64_t v65 = *((int *)v64 + 1);
  uint64_t v66 = BlueFin::GlSvId::s_aucSvId2gnss[*v64];
  unsigned int v67 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v65 - v65 + v66];
  if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v65 - v65 + v66]) {
    goto LABEL_324;
  }
  unsigned int v68 = BlueFin::GlSignalId::s_aulSignalIndexAndGnss2chipsPerEpoch[7 * (int)v65 + v66];
  if (!v68) {
    goto LABEL_325;
  }
  unsigned int v69 = *(_DWORD *)(v37 + 48);
  LOWORD(v62) = *(_WORD *)(v37 + 58);
  LODWORD(v63) = BlueFin::GlMeSrdAsicUnitConverter::ulChnTmNcoLsbScale;
  *(double *)&unint64_t v70 = (double)v62 / (double)v63;
  double v71 = *(double *)&v70 + (double)(v69 & (unsigned __int16)BlueFin::GlMeSrdAsicUnitConverter::usChnTmNcoMsbMsk);
  LOBYTE(v70) = BlueFin::GlMeSrdAsicUnitConverter::ucSubChipResolution;
  *(double *)(a1 + 128) = (v71 / (double)v70 + (double)(v69 >> BlueFin::GlMeSrdAsicUnitConverter::ucChnTmNcoMsbSft))
                        * ((double)v67
                         * 0.001)
                        / (double)v68;
  int EpochCntInMs = BlueFin::GlMeSrdSatRptTrkMsmtMI::GetEpochCntInMs((BlueFin::GlSignalId **)a1);
  int v74 = 0;
  uint64_t v75 = 0;
  *(_DWORD *)(a1 + 76) = EpochCntInMs;
  *(unsigned char *)(a1 + 80) = 0;
  do
  {
    if (*(unsigned __int8 *)(v37 + 25 + v75) != 255) {
      *(unsigned char *)(a1 + 80) = ++v74;
    }
    ++v75;
  }
  while (v75 != 5);
  *(unsigned char *)(a1 + 81) = (*(unsigned char *)(v37 + 30) & 0x10) != 0;
  float v76 = BlueFin::GlMeSrdAsicUnitConverter::EswCarrierNcoIncToCarrFreqInHz((BlueFin::GlMeSrdAsicUnitConverter *)*(unsigned int *)(v37 + 72), *(unsigned __int8 **)(a1 + 32), v73);
  float v77 = BlueFin::GlMeSrdAsicUnitConverter::EswCarrierStructToFinalCarrFreqInHz(v37 + 16, v37 + 64, *(unsigned __int8 **)(a1 + 32));
  *(double *)(a1 + 88) = BlueFin::GlMeSrdAsicUnitConverter::HzToPpu(*(BlueFin::GlMeSrdAsicUnitConverter **)(a1 + 32), v76, v78);
  *(double *)(a1 + 112) = BlueFin::GlMeSrdAsicUnitConverter::HzToPpu(*(BlueFin::GlMeSrdAsicUnitConverter **)(a1 + 32), v77, v79);
  float v80 = BlueFin::GlMeSrdSatRptTrkMsmtMI::BuildCNoMsmt((BlueFin::GlMeSrdSatRptTrkMsmtMI *)a1);
  double v81 = *(BlueFin::GlSignalId **)a1;
  uint64_t v82 = (*(uint64_t (**)(void, void, float))(**(void **)(a1 + 16) + 168))(*(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 41), v80);
  v83 = *(BlueFin::GlSignalId **)a1;
  if (*(unsigned char *)(v82 + 157))
  {
    if ((*((unsigned char *)v83 + 104) & 8) != 0)
    {
      unint64_t v84 = *(unsigned __int8 *)(v82 + 158);
      if (v84 <= 7)
      {
        do
        {
          unsigned int v85 = (char *)v81 + 4 * v84;
          *((_DWORD *)v85 + 90) = 0;
          *((_DWORD *)v85 + 98) = 0;
          ++v84;
        }
        while (v84 != 8);
      }
    }
  }
  BlueFin::GlMeSrdSatRptTrkMsmtMI::BuildCvecMsmt(a1, (uint64_t)v83 + 360, (uint64_t)v83 + 848, 0, (uint64_t)v243, *(unsigned char *)(a1 + 80), *(float *)(v36 + 16));
  if ((*(unsigned char *)(*(void *)a1 + 9) & 2) != 0)
  {
    BlueFin::GlMeSrdAsicCorrVecTrkMsmt::CopyFrom((uint64_t)v244, (uint64_t)v243);
    *(_DWORD *)(a1 + 352) = 1;
  }
  else
  {
    BlueFin::GlMeSrdSatRptTrkMsmtMI::BuildCvecMsmt(a1, *(void *)a1 + 392, *(void *)a1 + 848, 1, (uint64_t)v244, *(unsigned char *)(a1 + 80), *(float *)(v36 + 20));
  }
  unsigned int v86 = *(BlueFin::GlSignalId **)a1;
  float v88 = (float *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 136))(*(void *)(a1 + 16));
  v89 = *(BlueFin::GlSignalId **)a1;
  *(_DWORD *)(a1 + 2156) = *((_DWORD *)v86 + 107);
  uint64_t v90 = 1832;
  uint64_t v91 = 1824;
  do
  {
    BOOL v92 = *((unsigned __int8 *)v89 + v91 - 1799) == 255 || *((unsigned char *)v86 + 424) == 0;
    char v93 = !v92;
    *(unsigned char *)(a1 + v91) = v93;
    if (!v92) {
      *(float *)(a1 + v90) = BlueFin::GlMeSrdAsicUnitConverter::EswCarrierNcoIncToCarrFreqInHz((BlueFin::GlMeSrdAsicUnitConverter *)*(unsigned int *)((char *)v89 + v90 - 1760), *(unsigned __int8 **)(a1 + 32), v87);
    }
    v90 += 4;
    ++v91;
  }
  while (v90 != 1852);
  if (*((unsigned char *)v86 + 424))
  {
    int v94 = *(unsigned __int8 **)(a1 + 32);
    if (*((unsigned __int16 *)v94 + 4) >= 0x23Fu) {
      goto LABEL_323;
    }
    uint64_t v95 = *((int *)v94 + 1);
    uint64_t v96 = BlueFin::GlSvId::s_aucSvId2gnss[*v94];
    unsigned int v97 = &BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v95 - v95];
    unsigned int v98 = v97[v96];
    if (!v97[v96]) {
      goto LABEL_324;
    }
    unsigned int v99 = 0;
    int v100 = (_DWORD *)(a1 + 1852);
    unsigned int v101 = (int *)((char *)v86 + 432);
    int v102 = (int)(*(double *)(a1 + 3480) / ((double)v98 * 0.001) * *v88);
    *(_DWORD *)(a1 + 2152) = v102;
    do
    {
      int v103 = *v101++;
      *v100++ = v103 - v102;
      BOOL v130 = v99++ >= 0x4A;
    }
    while (!v130);
  }
  BlueFin::GlMeSrdSatRptTrkMsmtMI::BuildCarrMsmt((BlueFin::GlMeSrdSatRptTrkMsmtMI *)a1);
  int v104 = *(BlueFin::GlSignalId **)a1;
  if ((*(unsigned char *)(*(void *)a1 + 8) & 0x20) == 0)
  {
    *(unsigned char *)(a1 + 732) = 0;
    goto LABEL_192;
  }
  int v105 = *(_DWORD *)(*(void *)(a1 + 8) + 20);
  unsigned int v106 = *(BlueFin::GlSignalId **)a1;
  if (*((unsigned __int8 *)v104 + 736) >= 0x1Au)
  {
    DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", 1164, "BuildBitPhsMsmt", (char)"rTrkMsmt.hvec.size <= GlMeSrdAsicBitPhsTrkMsmt::MAX_HIST_VEC_LEN");
    CrashData();
    unsigned int v106 = *(BlueFin::GlSignalId **)a1;
  }
  if (*((unsigned char *)v106 + 105) == 8)
  {
    LODWORD(v107) = 0;
    int v108 = -1;
    float v109 = 1.0;
  }
  else
  {
    if (BlueFin::GlMeSrdSatRptTrkMsmtMI::IsBeidouPrebitWithHssSec((BlueFin::GlMeSrdSatRptTrkMsmtMI *)a1)) {
      float v109 = 1.0;
    }
    else {
      float v109 = 47.448;
    }
    if (*(unsigned char *)(*(void *)a1 + 105) == 8
      || (BlueFin::GlMeSrdSatRptTrkMsmtMI::IsBeidouPrebitWithHssSec((BlueFin::GlMeSrdSatRptTrkMsmtMI *)a1) & 1) != 0)
    {
      LODWORD(v107) = 0;
    }
    else
    {
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 48) + 344))(*(void *)(a1 + 48)) >= 0x21)
      {
        DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", 1183, "BuildBitPhsMsmt", (char)"m_rAsicConfigIfc.GetTrkBitHistObsBitWth() <= 32");
        CrashData();
      }
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 48) + 344))(*(void *)(a1 + 48)) == 32) {
        LODWORD(v107) = 0;
      }
      else {
        uint64_t v107 = 1 << (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 344))(*(void *)(a1 + 48));
      }
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 48) + 344))(*(void *)(a1 + 48)) != 32)
      {
        int v108 = ~(-1 << (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 344))(*(void *)(a1 + 48)));
        goto LABEL_119;
      }
    }
    int v108 = -1;
  }
LABEL_119:
  if (*(unsigned char *)(*(void *)a1 + 105) == 8
    || (BlueFin::GlMeSrdSatRptTrkMsmtMI::IsBeidouPrebitWithHssSec((BlueFin::GlMeSrdSatRptTrkMsmtMI *)a1) & 1) != 0)
  {
    LODWORD(v110) = 0;
    LODWORD(v111) = 0;
LABEL_122:
    int v112 = -1;
    goto LABEL_123;
  }
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 48) + 336))(*(void *)(a1 + 48)) >= 0x21)
  {
    DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", 1206, "BuildBitPhsMsmt", (char)"m_rAsicConfigIfc.GetTrkBitHistBitWth() <= 32");
    CrashData();
  }
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 48) + 336))(*(void *)(a1 + 48)) == 32) {
    LODWORD(v110) = 0;
  }
  else {
    uint64_t v110 = 1 << (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 336))(*(void *)(a1 + 48));
  }
  uint64_t v111 = 1 << ((*(unsigned int (**)(void))(**(void **)(a1 + 48) + 336))(*(void *)(a1 + 48)) >> 1);
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 48) + 336))() == 32) {
    goto LABEL_122;
  }
  int v112 = ~(-1 << (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 336))(*(void *)(a1 + 48)));
LABEL_123:
  v113 = *(BlueFin::GlSignalId **)a1;
  if (*(unsigned char *)(*(void *)a1 + 105) == 8)
  {
LABEL_126:
    unsigned int v115 = *((_DWORD *)v113 + 24);
    goto LABEL_134;
  }
  __int16 v114 = *((_WORD *)v104 + 369);
  if (BlueFin::GlMeSrdSatRptTrkMsmtMI::IsBeidouPrebitWithHssSec((BlueFin::GlMeSrdSatRptTrkMsmtMI *)a1))
  {
    v113 = *(BlueFin::GlSignalId **)a1;
    goto LABEL_126;
  }
  unsigned int v115 = v114 & 0x7FFF;
LABEL_134:
  uint64_t v116 = *(void *)(a1 + 8);
  unsigned int v117 = *(_DWORD *)(v116 + 20);
  if ((v117 & v108) <= v115) {
    int v118 = 0;
  }
  else {
    int v118 = v107;
  }
  unsigned int v119 = (v117 & ~v108) + v115 + v118;
  if (*((__int16 *)v104 + 369) < 0) {
    unsigned int v120 = v119;
  }
  else {
    unsigned int v120 = v115;
  }
  if (v117)
  {
    int v121 = 0;
  }
  else
  {
    if (*(unsigned char *)(*(void *)a1 + 105) == 8)
    {
      int v121 = 0;
      unsigned int v117 = 0;
      goto LABEL_147;
    }
    int v121 = BlueFin::GlMeSrdSatRptTrkMsmtMI::IsBeidouPrebitWithHssSec((BlueFin::GlMeSrdSatRptTrkMsmtMI *)a1) ^ 1;
    uint64_t v116 = *(void *)(a1 + 8);
    unsigned int v117 = *(_DWORD *)(v116 + 20);
  }
  if (v120 > 0x31 || !v117)
  {
LABEL_147:
    if (v120 > v117) {
      goto LABEL_149;
    }
  }
  int v121 = 1;
LABEL_149:
  char v122 = *((unsigned char *)v104 + 736);
  if (v122)
  {
    uint64_t v123 = (unsigned int *)((char *)v104 + 740);
    uint64_t v124 = (int *)(v116 + 24);
    uint64_t v125 = *((unsigned __int8 *)v104 + 736);
    while (1)
    {
      int v126 = *v124++;
      unsigned int v127 = v126 & v112;
      unsigned int v128 = *v123++;
      BOOL v130 = v127 >= v128;
      unsigned int v129 = v127 - v128;
      BOOL v130 = v129 == 0 || !v130 || v129 >= v111;
      if (!v130) {
        break;
      }
      if (!--v125) {
        goto LABEL_157;
      }
    }
    int v121 = 1;
  }
LABEL_157:
  if (v105) {
    int v131 = v121;
  }
  else {
    int v131 = 1;
  }
  if (v131) {
    unsigned int v117 = 0;
  }
  unsigned int v132 = v120 - v117;
  BOOL v133 = *(unsigned char *)(*(void *)a1 + 105) == 8 && -1030792151 * v132 > 0xA3D70A3;
  *(unsigned char *)(a1 + 732) = 1;
  *(unsigned char *)(a1 + 740) = v122;
  *(_DWORD *)(a1 + 736) = v120;
  *(unsigned char *)(a1 + 844) = 1;
  if (v133) {
    int v134 = 1;
  }
  else {
    int v134 = v121;
  }
  *(unsigned char *)(a1 + 845) = v134;
  *(unsigned char *)(a1 + 852) = v122;
  *(_DWORD *)(a1 + 848) = v132;
  *(_DWORD *)(a1 + 3488) = v120;
  *(unsigned char *)(a1 + 728) = BlueFin::GlMeSrdSatRptTrkMsmtMI::IsBeidouPrebitWithHssSec((BlueFin::GlMeSrdSatRptTrkMsmtMI *)a1);
  *(unsigned char *)(a1 + 729) = *(unsigned char *)(*(void *)a1 + 105) == 8;
  unsigned int v135 = *(unsigned __int8 *)(a1 + 852);
  if (*(unsigned char *)(a1 + 852))
  {
    unint64_t v136 = 0;
    uint64_t v137 = (char *)v104 + 104;
    if (v105) {
      int v138 = v134;
    }
    else {
      int v138 = 1;
    }
    do
    {
      if (v138)
      {
        unsigned int v139 = *(_DWORD *)&v137[4 * v136 + 636];
        float v140 = (float)v139;
        float v141 = (float)v139;
      }
      else
      {
        unsigned int v142 = *(_DWORD *)(*(void *)(a1 + 8) + 4 * v136 + 24);
        unsigned int v143 = *(_DWORD *)&v137[4 * v136 + 636];
        if ((v142 & v112) <= v143) {
          int v144 = 0;
        }
        else {
          int v144 = v110;
        }
        unsigned int v139 = v143 + (v142 & ~v112) + v144;
        if (*(unsigned char *)(a1 + 729) || *(unsigned char *)(a1 + 728))
        {
          float v140 = (float)v139;
          float v141 = (float)v142 + (float)v139;
        }
        else
        {
          float v140 = (float)v139;
          float v141 = (float)v139 - (float)v142;
        }
        if (v141 < 0.0) {
          float v141 = 0.0;
        }
      }
      unint64_t v145 = a1 + 4 * v136;
      *(float *)(v145 + 856) = v109 * v141;
      *(float *)(v145 + 744) = v109 * v140;
      *(_DWORD *)(v145 + 3492) = v139;
      if (*(unsigned char *)(*(void *)a1 + 105) == 8)
      {
        if (v134) {
          goto LABEL_186;
        }
      }
      else
      {
        int IsBeidouPrebitWithHssSec = BlueFin::GlMeSrdSatRptTrkMsmtMI::IsBeidouPrebitWithHssSec((BlueFin::GlMeSrdSatRptTrkMsmtMI *)a1);
        unsigned int v135 = *(unsigned __int8 *)(a1 + 852);
        if (IsBeidouPrebitWithHssSec & v134)
        {
LABEL_186:
          if (v135)
          {
            uint64_t v147 = v135;
            __int16 v148 = (_DWORD *)(a1 + 744);
            do
            {
              v148[28] = 0;
              *v148++ = 0;
              --v147;
            }
            while (v147);
          }
        }
      }
      ++v136;
    }
    while (v136 < v135);
  }
LABEL_192:
  if (!*v242)
  {
    DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", 1576, "BuildCodePrmMsmt", (char)"m_stAcqWindowMsmtInfo.m_bValid");
    CrashData();
  }
  if (!*v243 || !*v244)
  {
    DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", 1577, "BuildCodePrmMsmt", (char)"m_stNomCvecMsmt.m_bValid && m_stExtCvecMsmt.m_bValid");
    CrashData();
  }
  uint64_t v149 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 136))(*(void *)(a1 + 16));
  uint64_t v150 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 168))(*(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 41));
  uint64_t v151 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 184))(*(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 41));
  char v152 = *(BlueFin::GlSignalId **)a1;
  int v153 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 41));
  int v154 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 80))(*(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 41));
  if (v153) {
    BOOL v157 = 0;
  }
  else {
    BOOL v157 = v154 == 3;
  }
  if (v157)
  {
    *(_OWORD *)((char *)v152 + 392) = *(_OWORD *)((char *)v152 + 360);
    *(_OWORD *)((char *)v152 + 408) = *(_OWORD *)((char *)v152 + 376);
  }
  float v158 = *(float *)v150;
  float v159 = *(float *)(v151 + 20);
  float v160 = *(float *)(v151 + 92);
  unsigned int v161 = *(unsigned __int8 *)(v150 + 156);
  *(unsigned char *)(a1 + 1000) = 1;
  *(unsigned char *)(a1 + 1008) = *((unsigned char *)v152 + 61);
  *(unsigned char *)(a1 + 1024) = 1;
  unsigned int v162 = *((_DWORD *)v152 + 12);
  LOWORD(v155) = *((_WORD *)v152 + 29);
  LODWORD(v156) = BlueFin::GlMeSrdAsicUnitConverter::ulChnTmNcoLsbScale;
  *(double *)&unint64_t v163 = (double)v155 / (double)v156;
  double v164 = *(double *)&v163 + (double)(v162 & (unsigned __int16)BlueFin::GlMeSrdAsicUnitConverter::usChnTmNcoMsbMsk);
  LOBYTE(v163) = BlueFin::GlMeSrdAsicUnitConverter::ucSubChipResolution;
  double v165 = v164 / (double)v163 + (double)(v162 >> BlueFin::GlMeSrdAsicUnitConverter::ucChnTmNcoMsbSft);
  *(double *)(a1 + 1016) = v165;
  *(_DWORD *)(a1 + 1004) = *(_DWORD *)(a1 + 76);
  LOWORD(v165) = *((_WORD *)v152 + 162);
  float v166 = (float)(v158 * (float)LODWORD(v165)) / v159;
  float v167 = (float)(v160 * (float)v161) * 0.5;
  double v168 = v167;
  if (v167 <= 0.0)
  {
    long long v170 = (float *)(a1 + 1028);
    if (v167 < 0.0) {
      int v169 = (int)(v168 + -0.5);
    }
    else {
      LOBYTE(v169) = 0;
    }
  }
  else
  {
    int v169 = (int)(v168 + 0.5);
    long long v170 = (float *)(a1 + 1028);
  }
  unsigned int v171 = 0.5;
  float v172 = v160 * 0.5;
  *(float *)(a1 + 1044) = v172;
  *(unsigned char *)(a1 + 1048) = v169;
  *(unsigned char *)(a1 + 1049) = v161;
  *(float *)(a1 + 1040) = v166;
  unsigned int v173 = *(unsigned __int8 *)(v150 + 153);
  unsigned int v174 = *(unsigned __int8 *)(v150 + 154);
  unsigned int v175 = *(unsigned __int8 *)(v150 + 155);
  if (!*(_DWORD *)(*(void *)(a1 + 32) + 4)
    && (*(unsigned int (**)(void))(**(void **)(a1 + 48) + 256))(*(void *)(a1 + 48))
    && (*(unsigned int (**)(void))(**(void **)(a1 + 48) + 824))(*(void *)(a1 + 48)) <= 0x82
    && *(_DWORD *)(v150 + 148) == 7)
  {
    LOBYTE(v172) = *(unsigned char *)(v149 + 26);
    LOWORD(v171) = *(_WORD *)(v149 + 24);
    unsigned int v173 = 4;
    unsigned int v174 = 1;
    unsigned int v175 = 2;
    float v176 = (float)LODWORD(v172) / (float)v171;
  }
  else
  {
    LOBYTE(v172) = *(unsigned char *)(v149 + 26);
    LOWORD(v171) = *(_WORD *)(v149 + 24);
    float v176 = (float)LODWORD(v172) / (float)v171;
    if (v173 >= 8)
    {
      DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", 1645, "BuildCodePrmMsmt", (char)"ucCvecPromptIdx < _DIM(m_stExtCvecMsmt.m_stMagSqCvec.m_afCvec)");
      CrashData();
    }
  }
  long long v177 = (char *)v152 + 392;
  *(float *)(a1 + 1036) = (float)(v176 * (float)*(unsigned int *)&v177[4 * v173]) / v166;
  int v178 = *(_DWORD *)(*(void *)(a1 + 32) + 4);
  if (v178 && v178 != 3)
  {
    unsigned int v179 = *(_DWORD *)(v150 + 148) - 5;
  }
  else
  {
    unsigned int v179 = *(_DWORD *)(v150 + 148) - 5;
    if (v179 <= 2)
    {
      *long long v170 = (float)(v176 * (float)*(unsigned int *)&v177[4 * v175]) / v166;
      goto LABEL_224;
    }
  }
  *long long v170 = (float)(v176 * (float)*(unsigned int *)&v177[4 * v173 + 4 * v169]) / v166;
  if (v179 >= 3)
  {
    if (v173 < v169)
    {
      DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", 1670, "BuildCodePrmMsmt", (char)"ucCvecPromptIdx >= ucEarlyOrLateCvDlyOffWrtPrompt");
      CrashData();
    }
    if (v173 - v169 >= 8)
    {
      DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", 1671, "BuildCodePrmMsmt", (char)"ucCvecPromptIdx-ucEarlyOrLateCvDlyOffWrtPrompt < _DIM(m_stExtCvecMsmt.m_stMagSqCvec.m_afCvec)");
      CrashData();
    }
  }
LABEL_224:
  int v180 = *(_DWORD *)(*(void *)(a1 + 32) + 4);
  if (v180 != 3 && v180 || (*(_DWORD *)(v150 + 148) - 5) > 2) {
    uint64_t v181 = (int)(v173 - v169);
  }
  else {
    uint64_t v181 = v174;
  }
  *(float *)(a1 + 1032) = (float)(v176 * (float)*(unsigned int *)&v177[4 * v181]) / v166;
  *(unsigned char *)(a1 + 1136) = BlueFin::GlMeSrdSatRptTrkMsmtMI::AidApplied((BlueFin::GlMeSrdSatRptTrkMsmtMI *)a1);
  BlueFin::GlMeSrdAcqWindowMsmtInfo::CopyFrom(a1 + 1056, (uint64_t)v242);
  BlueFin::GlMeSrdSatRptTrkMsmtMI::BuildNavBitMsmt((BlueFin::GlMeSrdSatRptTrkMsmtMI *)a1);
  *(_DWORD *)(a1 + 980) = 0;
  *(void *)(a1 + 960) = 0;
  *(_DWORD *)(a1 + 968) = 0;
  *(int32x2_t *)uint64_t v241 = vdup_n_s32(0xFF7FFFFD);
  *(int64x2_t *)(v241 + 12) = vdupq_n_s64(0x47EFFFFFA0000000uLL);
  long long v182 = *(BlueFin::GlSignalId **)a1;
  if (*(unsigned char *)(*(void *)a1 + 105) != 12 || (*((unsigned char *)v182 + 24) & 0xF) != 1) {
    goto LABEL_274;
  }
  *(_WORD *)(a1 + 960) = 257;
  v183.i32[0] = *(_DWORD *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 168))(*(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 41));
  long long v182 = *(BlueFin::GlSignalId **)a1;
  LOWORD(v184) = *(_WORD *)(*(void *)a1 + 324);
  float v185 = (float)v184;
  float v186 = *(float *)v183.i32 * (float)v184;
  if (*(unsigned char *)(a1 + 152))
  {
    uint64_t v187 = *(unsigned __int8 **)(a1 + 32);
    if (*((unsigned __int16 *)v187 + 4) < 0x23Fu)
    {
      unsigned int v188 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)v187 + 1)
                                                                                    - *((int *)v187 + 1)
                                                                                    + BlueFin::GlSvId::s_aucSvId2gnss[*v187]];
      if (v188)
      {
        float v189 = *(float *)(a1 + 328);
        float v190 = v185 / (float)(v189 / *(float *)v183.i32);
        float v191 = v189 / ((double)v188 * 0.001);
        float v192 = *(double *)(a1 + 3480) * v191;
        *(float *)(a1 + 972) = (float)((float)((float)(v186 / v190)
                                             * *(float *)(a1 + 4 * *(unsigned __int8 *)(a1 + 301) + 172))
                                     - v192)
                             / (float)(v191 * v191);
        goto LABEL_236;
      }
LABEL_324:
      v239 = "ucMsPerEpoch != 0";
      DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
      int v240 = 685;
      goto LABEL_326;
    }
LABEL_323:
    v239 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
    int v240 = 678;
    goto LABEL_326;
  }
  *(unsigned char *)(a1 + 961) = 0;
LABEL_236:
  char v193 = *v244;
  if (!*v244) {
    goto LABEL_241;
  }
  long long v194 = *(unsigned __int8 **)(a1 + 32);
  if (*((unsigned __int16 *)v194 + 4) >= 0x23Fu) {
    goto LABEL_323;
  }
  unsigned int v195 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)v194 + 1)
                                                                                - *((int *)v194 + 1)
                                                                                + BlueFin::GlSvId::s_aucSvId2gnss[*v194]];
  if (!v195) {
    goto LABEL_324;
  }
  float v196 = *(float *)(a1 + 520);
  float v197 = v185 / (float)(v196 / *(float *)v183.i32);
  float v198 = v196 / ((double)v195 * 0.001);
  float v199 = *(double *)(a1 + 3480) * v198;
  float v200 = (float)((float)((float)(v186 / v197) * *(float *)(a1 + 4 * *(unsigned __int8 *)(a1 + 493) + 364)) - v199)
       / (float)(v198 * v198);
  *(float *)(a1 + 976) = v200;
  char v193 = *(unsigned char *)(a1 + 961);
  if (v193)
  {
    *(float *)(a1 + 980) = *(float *)(a1 + 972) / v200;
    char v193 = 1;
  }
LABEL_241:
  if (*(unsigned char *)(a1 + 1144))
  {
    int v201 = *(unsigned __int8 *)(a1 + 1536);
    unsigned int v202 = *(unsigned __int16 *)(a1 + 1146);
    if (*(unsigned char *)(a1 + 1536))
    {
      if (!*(_WORD *)(a1 + 1146))
      {
        unsigned int v202 = *(unsigned __int8 *)(a1 + 1806);
        if (*(unsigned char *)(a1 + 1806))
        {
          LOBYTE(v202) = 0;
LABEL_264:
          char v208 = 1;
LABEL_266:
          char v210 = v193 & v202;
          if (v201) {
            char v211 = 1;
          }
          else {
            char v211 = v208;
          }
          char v209 = v211 & v210;
          goto LABEL_270;
        }
LABEL_265:
        char v208 = 0;
        LOBYTE(v202) = v202 != 0;
        goto LABEL_266;
      }
      float v203 = *(float *)(a1 + 964);
      if (*(_WORD *)(a1 + 1816))
      {
        int v204 = 0;
        do
        {
          int8x8_t v183 = vcnt_s8((int8x8_t)*(unsigned int *)(a1 + 4 * v204 + 1152));
          v183.i16[0] = vaddlv_u8((uint8x8_t)v183);
          float v203 = v203 + (float)v183.u32[0];
          ++v204;
        }
        while (*(unsigned __int16 *)(a1 + 1816) > v204);
      }
      *(float *)(a1 + 964) = v203 / (float)v202;
    }
    if (*(unsigned char *)(a1 + 1806))
    {
      if (v202)
      {
        float v205 = *(float *)(a1 + 968);
        if (*(_WORD *)(a1 + 1816))
        {
          int v206 = 0;
          do
          {
            unsigned int v207 = *(_DWORD *)(a1 + 4 * v206 + 1548);
            v183.i32[0] = v207 ^ (v207 >> 1);
            int8x8_t v183 = vcnt_s8(v183);
            v183.i16[0] = vaddlv_u8((uint8x8_t)v183);
            float v205 = v205 + (float)v183.u32[0];
            ++v206;
          }
          while (*(unsigned __int16 *)(a1 + 1816) > v206);
        }
        *(float *)(a1 + 968) = v205 / (float)v202;
        char v208 = 1;
        LOBYTE(v202) = 1;
        goto LABEL_266;
      }
      goto LABEL_264;
    }
    goto LABEL_265;
  }
  char v209 = 0;
LABEL_270:
  *(unsigned char *)(a1 + 961) = v209;
  if (*(unsigned char *)(a1 + 624))
  {
    *(unsigned char *)(a1 + 962) = *(unsigned char *)(a1 + 658);
    *(void *)(a1 + 984) = *(void *)(a1 + 632);
  }
  if (*(unsigned char *)(a1 + 680))
  {
    *(unsigned char *)(a1 + 963) = *(unsigned char *)(a1 + 706);
    *(void *)(a1 + 992) = *(void *)(a1 + 688);
  }
LABEL_274:
  if ((*((_DWORD *)v182 + 2) & 0x200100) != 0)
  {
    *(unsigned char *)(a1 + 1820) = 1;
    *(unsigned char *)(a1 + 1821) = *((unsigned char *)v182 + 940);
    *(_WORD *)(a1 + 1822) = *(_WORD *)((char *)v182 + 941);
  }
  else
  {
    DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", 1945, "BuildAidStatus", (char)"0");
    CrashData();
    long long v182 = *(BlueFin::GlSignalId **)a1;
  }
  int v212 = *((_DWORD *)v182 + 2);
  if ((~v212 & 0x100002) == 0 || (v212 & 0x40002) == 0x40002 || (v212 & 0x80002) == 0x80002)
  {
    uint64_t v213 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 136))(*(void *)(a1 + 16));
    if ((~*(_DWORD *)(*(void *)a1 + 8) & 0xC0002) == 0)
    {
      if (*((unsigned __int8 *)v182 + 1844) != *((unsigned __int8 *)v182 + 2912))
      {
        DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", 1969, "BuildGridMsmt", (char)"rTrkGrid.data.hw == rTrkGrid.msmt.hw");
        CrashData();
      }
      if (*((unsigned __int8 *)v182 + 1845) != *((unsigned __int8 *)v182 + 2913))
      {
        DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", 1970, "BuildGridMsmt", (char)"rTrkGrid.data.cfg == rTrkGrid.msmt.cfg");
        CrashData();
      }
    }
    if ((~*(_DWORD *)(*(void *)a1 + 8) & 0x140002) == 0)
    {
      unsigned int v214 = *((unsigned __int16 *)v182 + 1573);
      if (((v214 >> 1) & 0x1F) != *((unsigned char *)v182 + 1845))
      {
        DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", 1975, "BuildGridMsmt", (char)"rTrkGrid.tapcfg.tap_info.bits.cfg_id == rTrkGrid.data.cfg");
        CrashData();
        LOWORD(v214) = *((_WORD *)v182 + 1573);
      }
      if ((v214 & 1) != *((unsigned char *)v182 + 1844))
      {
        DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", 1976, "BuildGridMsmt", (char)"rTrkGrid.tapcfg.tap_info.bits.hw_type == rTrkGrid.data.hw");
        CrashData();
      }
    }
    if ((~*(_DWORD *)(*(void *)a1 + 8) & 0x180002) == 0)
    {
      unsigned int v215 = *((unsigned __int16 *)v182 + 1573);
      if (((v215 >> 1) & 0x1F) != *((unsigned char *)v182 + 2913))
      {
        DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", 1981, "BuildGridMsmt", (char)"rTrkGrid.tapcfg.tap_info.bits.cfg_id == rTrkGrid.msmt.cfg");
        CrashData();
        LOWORD(v215) = *((_WORD *)v182 + 1573);
      }
      if ((v215 & 1) != *((unsigned char *)v182 + 1844))
      {
        DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", 1982, "BuildGridMsmt", (char)"rTrkGrid.tapcfg.tap_info.bits.hw_type == rTrkGrid.data.hw");
        CrashData();
      }
    }
    if ((~*(_DWORD *)(*(void *)a1 + 8) & 0x100002) == 0)
    {
      *(unsigned char *)(a1 + 2163) = 1;
      *(unsigned char *)(a1 + 2160) = *((unsigned char *)v182 + 3146) & 1;
      long long v216 = *(_OWORD *)((char *)v182 + 3132);
      *(_OWORD *)(a1 + 3432) = *(_OWORD *)((char *)v182 + 3116);
      *(_OWORD *)(a1 + 3448) = v216;
      unsigned int v217 = (*((unsigned __int16 *)v182 + 1573) >> 1) & 0x1F;
      uint64_t v218 = *(void *)(v213 + 64);
      if (*(unsigned __int8 *)(v218 + 8) <= v217)
      {
        DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", 1991, "BuildGridMsmt", (char)"rTrkGrid.tapcfg.tap_info.bits.cfg_id < (GlIntU8)(stAllCnstlTrkParams.ptrStrTrkGridConfigLUT->nb_configs)");
        CrashData();
        uint64_t v218 = *(void *)(v213 + 64);
        unsigned int v217 = (*((unsigned __int16 *)v182 + 1573) >> 1) & 0x1F;
      }
      *(void *)(a1 + 3464) = v218 + 12 * v217 + 12;
    }
    if (*(unsigned __int8 *)(a1 + 80) >= 5u)
    {
      v219 = *(BlueFin::GlSignalId **)a1;
      int v220 = *(_DWORD *)(*(void *)a1 + 8);
      if ((~v220 & 0x40002) == 0)
      {
        uint64_t v221 = *((unsigned __int8 *)v182 + 1853);
        if (!*((unsigned char *)v182 + 1853)) {
          goto LABEL_308;
        }
        int v222 = 0;
        v223 = (int *)((char *)v182 + 1856);
        uint64_t v224 = *((unsigned __int8 *)v182 + 1853);
        do
        {
          int v225 = *v223++;
          v222 |= v225;
          --v224;
        }
        while (v224);
        if (v222)
        {
          *(unsigned char *)(a1 + 2161) = 1;
          *(unsigned char *)(a1 + 2160) = *((unsigned char *)v182 + 1844);
          *(unsigned char *)(a1 + 2164) = *((unsigned char *)v182 + 1846);
          *(_DWORD *)(a1 + 2166) = *((_DWORD *)v182 + 462);
          *(unsigned char *)(a1 + 2171) = *((unsigned char *)v182 + 1852);
          *(unsigned char *)(a1 + 2170) = v221;
          *(unsigned char *)(a1 + 2172) = (*((unsigned char *)v182 + 1854) >> 2) & 3;
          *(unsigned char *)(a1 + 2173) = (*((unsigned __int16 *)v182 + 927) >> 4) & 0x1F;
          *(unsigned char *)(a1 + 2174) = *((unsigned char *)v182 + 1854) & 3;
          memcpy((void *)(a1 + 2176), (char *)v182 + 1856, 4 * v221);
          memcpy((void *)(a1 + 2208), (char *)v182 + 1888, 4 * *((unsigned __int16 *)v182 + 925));
          unsigned int v226 = *((unsigned __int8 *)v182 + 1845);
          uint64_t v227 = *(void *)(v213 + 64);
          if (*(unsigned __int8 *)(v227 + 8) <= v226)
          {
            DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", 2021, "BuildGridMsmt", (char)"rTrkGrid.data.cfg < (GlIntU8)(stAllCnstlTrkParams.ptrStrTrkGridConfigLUT->nb_configs)");
            CrashData();
            uint64_t v227 = *(void *)(v213 + 64);
            unsigned int v226 = *((unsigned __int8 *)v182 + 1845);
            v219 = *(BlueFin::GlSignalId **)a1;
          }
          *(void *)(a1 + 3464) = v227 + 12 * v226 + 12;
          int v220 = *((_DWORD *)v219 + 2);
        }
        else
        {
LABEL_308:
          *(unsigned char *)(a1 + 2161) = 0;
        }
      }
      if ((~v220 & 0x80002) == 0)
      {
        *(unsigned char *)(a1 + 2162) = 1;
        *(unsigned char *)(a1 + 2160) = *((unsigned char *)v182 + 1844);
        *(unsigned char *)(a1 + 3233) = *((unsigned char *)v182 + 2914);
        *(unsigned char *)(a1 + 3232) = *((unsigned char *)v182 + 2918);
        *(unsigned char *)(a1 + 3235) = *((unsigned char *)v182 + 2917);
        int v228 = *((unsigned __int8 *)v182 + 2916);
        *(unsigned char *)(a1 + 3234) = v228;
        *(unsigned char *)(a1 + 3239) = *((unsigned char *)v182 + 2915);
        *(unsigned char *)(a1 + 3236) = (*((unsigned char *)v182 + 2920) >> 2) & 3;
        *(unsigned char *)(a1 + 3237) = (*((unsigned __int16 *)v182 + 1460) >> 4) & 0x1F;
        *(unsigned char *)(a1 + 3238) = *((unsigned char *)v182 + 2920) & 3;
        if (v228)
        {
          uint64_t v229 = 0;
          unint64_t v230 = 0;
          do
          {
            v231 = (float *)((char *)v182 + v229);
            uint64_t v232 = a1 + v229;
            *(_WORD *)(a1 + v229 + 3240) = *(_WORD *)((char *)v182 + v229 + 2924);
            int v233 = *(_DWORD *)((char *)v182 + v229 + 2928);
            if (*(unsigned char *)(a1 + 3232))
            {
              *(_DWORD *)(v232 + 3244) = v233;
              float v234 = v231[733];
            }
            else
            {
              float v235 = (double)v233 / 1000.0;
              *(float *)(v232 + 3244) = v235;
              float v234 = (double)*((int *)v231 + 733) / 1000.0;
            }
            *(float *)(a1 + v229 + 3248) = v234;
            memcpy((void *)(a1 + v229 + 3252), (char *)v182 + v229 + 2936, 4 * *(unsigned __int8 *)(a1 + 3239));
            ++v230;
            v229 += 48;
          }
          while (v230 < *((unsigned __int8 *)v182 + 2916));
        }
        unsigned int v236 = *((unsigned __int8 *)v182 + 2913);
        uint64_t v237 = *(void *)(v213 + 64);
        if (*(unsigned __int8 *)(v237 + 8) <= v236)
        {
          DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", 2062, "BuildGridMsmt", (char)"rTrkGrid.msmt.cfg < (GlIntU8)(stAllCnstlTrkParams.ptrStrTrkGridConfigLUT->nb_configs)");
          CrashData();
          uint64_t v237 = *(void *)(v213 + 64);
          unsigned int v236 = *((unsigned __int8 *)v182 + 2913);
        }
        *(void *)(a1 + 3464) = v237 + 12 * v236 + 12;
      }
    }
  }
  return a1;
}

float BlueFin::GlMeRxParamStd::GetBandNoisePowerAtCaEpoch(uint64_t a1, int a2, int a3, int a4)
{
  unsigned int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 264))(a1);
  if (v7 < 2)
  {
    signed int v20 = (a2 & 0xF000FFFF) - 805306382;
    if (v20 < 4)
    {
      float v9 = *(float *)&BlueFin::GlMeSrdConstants::_4755_GALILEO_E1_COH_NOI_PWR_AT_CA_EPOCH_INT;
      int v8 = BlueFin::GlMeSrdConstants::_4755_BEIDOU_B1C_COH_NOI_PWR_AT_CA_EPOCH_INT;
      float result = *(float *)&BlueFin::GlMeSrdConstants::_4755_GPS_L1_COH_NOI_PWR_AT_CA_EPOCH_INT;
      float v14 = flt_263BAFE20[v20];
      float v17 = flt_263BAFE30[v20];
      float v18 = *(float *)*(&off_2655D8538 + v20);
      float v16 = *(float *)*(&off_2655D8518 + v20);
      float v19 = 3.062;
      float v15 = 4.244;
      float v12 = 1.915;
      float v10 = 3.8152;
      float v11 = 3.5809;
      goto LABEL_15;
    }
    uint64_t v21 = "0";
    DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 358, "GetBandNoisePowerAtCaEpoch", (char)"0");
    int v22 = 358;
LABEL_36:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_receiver_parameters.cpp", v22, v21);
  }
  if (v7 - 2 >= 2)
  {
    if (v7 == 5)
    {
      if ((a2 & 0xF000FFFF) - 805306383 <= 6)
      {
        int v8 = BlueFin::GlMeSrdConstants::_4777_BEIDOU_B1C_COH_NOI_PWR_AT_CA_EPOCH_INT;
        float v9 = *(float *)&BlueFin::GlMeSrdConstants::_4777_GALILEO_E1_COH_NOI_PWR_AT_CA_EPOCH_INT;
        float v19 = 3.062;
        float v12 = 1.915;
        float v10 = 3.8152;
        float v11 = 3.5809;
        float result = 3.598;
        float v15 = 4.244;
        if (((1 << (a2 - 15)) & 0x54) != 0)
        {
          float v14 = 2.893;
          float v16 = 2.893;
          float v17 = 2.893;
          float v18 = 2.893;
          goto LABEL_15;
        }
        if (((1 << (a2 - 15)) & 0x28) != 0)
        {
          float v19 = 2.8139;
          float v18 = 0.92448;
          float v14 = 2.86;
          float v16 = 2.86;
          float v17 = 2.86;
          goto LABEL_15;
        }
        if ((a2 & 0xF000FFFF) == 0x3000000F)
        {
          float v16 = 4.005;
          float v15 = 4.244;
          float v14 = 3.816;
          float v17 = 3.816;
          float v18 = 4.244;
          goto LABEL_15;
        }
      }
      uint64_t v21 = "0";
      DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 309, "GetBandNoisePowerAtCaEpoch", (char)"0");
      int v22 = 309;
    }
    else
    {
      uint64_t v21 = "0";
      DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 372, "GetBandNoisePowerAtCaEpoch", (char)"0");
      int v22 = 372;
    }
    goto LABEL_36;
  }
  if (a4)
  {
    uint64_t v21 = "eSignalIndex==SIGNAL_INDEX_0";
    DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 369, "GetBandNoisePowerAtCaEpoch", (char)"eSignalIndex==SIGNAL_INDEX_0");
    int v22 = 369;
    goto LABEL_36;
  }
  *(float *)&int v8 = 0.0;
  float v9 = 14.56;
  float v10 = 4.02;
  float v11 = 4.1;
  float v12 = 0.0;
  float result = 4.23;
  float v14 = 0.0;
  float v15 = 0.0;
  float v16 = 0.0;
  float v17 = 0.0;
  float v18 = 0.0;
  float v19 = 0.0;
LABEL_15:
  switch(a3)
  {
    case 0:
      switch(a4)
      {
        case 0:
          return result;
        case 1:
          return v12;
        case 2:
          return v16;
        case 3:
          return *(float *)&v8;
        default:
          uint64_t v21 = "0";
          DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 390, "GetBandNoisePowerAtCaEpoch", (char)"0");
          int v22 = 390;
          goto LABEL_36;
      }
    case 1:
      if (!a4) {
        return result;
      }
      uint64_t v21 = "0";
      DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 400, "GetBandNoisePowerAtCaEpoch", (char)"0");
      int v22 = 400;
      goto LABEL_36;
    case 2:
      float result = v11;
      if (!a4) {
        return result;
      }
      uint64_t v21 = "0";
      DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 410, "GetBandNoisePowerAtCaEpoch", (char)"0");
      int v22 = 410;
      goto LABEL_36;
    case 3:
      switch(a4)
      {
        case 0:
          return result;
        case 1:
          return v12;
        case 2:
          return v16;
        case 3:
          return *(float *)&v8;
        default:
          uint64_t v21 = "0";
          DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 426, "GetBandNoisePowerAtCaEpoch", (char)"0");
          int v22 = 426;
          goto LABEL_36;
      }
    case 4:
      float result = v10;
      switch(a4)
      {
        case 0:
          return result;
        case 1:
          return v15;
        case 2:
          return v14;
        case 3:
          return *(float *)&v8;
        default:
          uint64_t v21 = "0";
          DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 442, "GetBandNoisePowerAtCaEpoch", (char)"0");
          int v22 = 442;
          goto LABEL_36;
      }
    case 5:
      float result = v9;
      if (!a4) {
        return result;
      }
      float result = v17;
      if (a4 == 2) {
        return result;
      }
      float result = v18;
      if (a4 == 1) {
        return result;
      }
      uint64_t v21 = "0";
      DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 456, "GetBandNoisePowerAtCaEpoch", (char)"0");
      int v22 = 456;
      goto LABEL_36;
    case 6:
      float result = v19;
      if (a4)
      {
        uint64_t v21 = "0";
        DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 466, "GetBandNoisePowerAtCaEpoch", (char)"0");
        int v22 = 466;
        goto LABEL_36;
      }
      return result;
    default:
      uint64_t v21 = "0";
      DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 471, "GetBandNoisePowerAtCaEpoch", (char)"0");
      int v22 = 471;
      goto LABEL_36;
  }
}

uint64_t BlueFin::GlMeRxParamStd::GetRxType(int **this)
{
  return *BlueFin::GlMeRxParamStd::rMap(this);
}

uint64_t BlueFin::GlMeSrdAsicCorrVecTrkMsmt::GlMeSrdAsicCorrVecTrkMsmt(uint64_t result, int a2)
{
  *(unsigned char *)float result = 0;
  *(_WORD *)(result + 4) = 0;
  *(unsigned char *)(result + 6) = 0;
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = 1;
  *(_WORD *)(result + 16) = 1281;
  *(_WORD *)(result + 52) = 0;
  *(unsigned char *)(result + 54) = 0;
  *(_DWORD *)(result + 56) = a2;
  *(_DWORD *)(result + 60) = 2;
  *(_WORD *)(result + 64) = 1281;
  *(_WORD *)(result + 100) = 0;
  *(unsigned char *)(result + 102) = 0;
  *(_DWORD *)(result + 104) = a2;
  *(_DWORD *)(result + 108) = 3;
  *(_WORD *)(result + 112) = 1281;
  *(_WORD *)(result + 148) = -1;
  *(unsigned char *)(result + 150) = 0;
  *(unsigned char *)(result + 152) = 0;
  *(_DWORD *)(result + 156) = 0;
  *(_WORD *)(result + 160) = 575;
  *(void *)(result + 172) = 0;
  *(void *)(result + 164) = 0;
  *(void *)(result + 180) = 0;
  return result;
}

void BlueFin::GlMeSrdSatRptTrkMsmtMI::BuildCvecMsmt(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, char a6, float a7)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a1 + 56))
  {
    DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", 725, "BuildCvecMsmt", (char)"m_stAcqWindowMsmtInfo.m_bValid");
    CrashData();
  }
  uint64_t v14 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 168))(*(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 41));
  uint64_t v15 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 136))(*(void *)(a1 + 16));
  uint64_t v16 = 0;
  unint64_t v17 = 0;
  *(unsigned char *)a5 = 1;
  unint64_t v18 = *(unsigned __int8 *)(v14 + 152);
  *(unsigned char *)(a5 + 4) = v18;
  *(unsigned char *)(a5 + 52) = v18;
  *(unsigned char *)(a5 + 100) = v18;
  *(unsigned char *)(a5 + 148) = *(unsigned char *)(v14 + 156);
  *(unsigned char *)(a5 + 17) = a6;
  LOBYTE(v19) = *(unsigned char *)(v15 + 26);
  LOWORD(v20) = *(_WORD *)(v15 + 24);
  *(float *)&unsigned int v21 = (float)v20;
  float v22 = (float)v19 / *(float *)&v21;
  LOWORD(v21) = *(_WORD *)(*(void *)a1 + 324);
  float v23 = *(float *)v14 * (float)v21;
  do
  {
    if (v17 >= v18)
    {
      uint64_t v24 = a5 + v16;
      *(_DWORD *)(a5 + v16 + 20) = 0;
    }
    else
    {
      uint64_t v24 = a5 + v16;
      *(float *)(a5 + v16 + 20) = (float)(v22 * (float)*(unsigned int *)(a2 + 4 * v17)) / v23;
      if (!a4)
      {
        *(float *)(v24 + 68) = (float)(v22 * (float)*(int *)(a3 + v16)) / v23;
        float v25 = (float)(v22 * (float)*(int *)(a3 + 32 + v16)) / v23;
        goto LABEL_9;
      }
    }
    *(_DWORD *)(v24 + 68) = 0;
    float v25 = 0.0;
LABEL_9:
    *(float *)(a5 + v16 + 116) = v25;
    ++v17;
    v16 += 4;
  }
  while (v17 != 8);
  int v26 = *(unsigned __int8 **)(a1 + 32);
  int v27 = *((_DWORD *)v26 + 1);
  if (v27) {
    BOOL v28 = v27 == 3;
  }
  else {
    BOOL v28 = 1;
  }
  if (v28 && (*(_DWORD *)(v14 + 148) - 5) <= 1)
  {
    long long v49 = xmmword_263BAF00C;
    long long v50 = unk_263BAF01C;
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 48) + 256))(*(void *)(a1 + 48))
      && (*(unsigned int (**)(void))(**(void **)(a1 + 48) + 824))(*(void *)(a1 + 48)) <= 0x82)
    {
      long long v49 = xmmword_263BAF02C;
      long long v50 = unk_263BAF03C;
    }
    unint64_t v29 = 0;
    unint64_t v30 = *(unsigned __int8 *)(a5 + 4);
    BOOL v31 = (float *)(a5 + 68);
    do
    {
      if (v29 < v30)
      {
        uint64_t v32 = *((int *)&v49 + v29);
        *(v31 - 12) = (float)(v22 * (float)*(unsigned int *)(a2 + 4 * v32)) / v23;
        float v33 = 0.0;
        float v34 = 0.0;
        if ((a4 & 1) == 0)
        {
          int v35 = (int *)(a3 + 4 * v32);
          float v33 = (float)(v22 * (float)*v35) / v23;
          float v34 = (float)(v22 * (float)v35[8]) / v23;
        }
        *BOOL v31 = v33;
        v31[12] = v34;
      }
      ++v29;
      ++v31;
    }
    while (v29 != 8);
    if (BlueFin::GlUtils::m_ucEnabled) {
      BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x97);
    }
    int v26 = *(unsigned __int8 **)(a1 + 32);
  }
  unsigned int v36 = *((unsigned __int16 *)v26 + 4);
  if (v36 >= 0x23F)
  {
    uint64_t v47 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 692, "GetSecPerEpochWithTrkException", (char)"IsValid()");
    int v48 = 692;
    goto LABEL_56;
  }
  int v37 = *((_DWORD *)v26 + 1);
  uint64_t v38 = *v26;
  if (v37 != 1
    || ((double v39 = 1.5, (v38 - 1) >= 0x20) ? (v40 = (v38 - 66) >= 0xA) : (v40 = 0), v40))
  {
    uint64_t v41 = BlueFin::GlSvId::s_aucSvId2gnss[v38];
    uint64_t v42 = &BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[-v37];
    if (v42[8 * v37 + v41])
    {
      double v39 = (double)v42[8 * v37 + v41] * 0.001;
      goto LABEL_37;
    }
    uint64_t v47 = "ucMsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
    int v48 = 685;
LABEL_56:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v48, v47);
  }
LABEL_37:
  float v43 = *(double *)(a1 + 3480) * v23 / v39;
  *(unsigned char *)(a5 + 150) = *(unsigned char *)(*(void *)a1 + 12);
  if ((unsigned __int8 *)(a5 + 152) != v26)
  {
    *(unsigned char *)(a5 + 152) = v38;
    *(_DWORD *)(a5 + 156) = v37;
    *(_WORD *)(a5 + 160) = v36;
    int v37 = *((_DWORD *)v26 + 1);
  }
  *(float *)(a5 + 176) = a7;
  *(_DWORD *)(a5 + 180) = *(_DWORD *)(v14 + 44);
  *(_DWORD *)(a5 + 164) = *(_DWORD *)(a1 + 76);
  *(void *)(a5 + 168) = *(void *)(a1 + 120);
  *(float *)(a5 + 184) = v43;
  *(unsigned char *)a5 = 1;
  *(unsigned char *)(a5 + 149) = *(unsigned char *)(v14 + 153);
  if (!v37
    && (*(unsigned int (**)(void))(**(void **)(a1 + 48) + 256))(*(void *)(a1 + 48))
    && (*(unsigned int (**)(void))(**(void **)(a1 + 48) + 824))(*(void *)(a1 + 48)) <= 0x82
    && *(_DWORD *)(v14 + 148) == 7)
  {
    *(unsigned char *)(a5 + 149) = 4;
  }
  if ((*(_DWORD *)(v14 + 148) - 5) <= 1) {
    *(unsigned char *)(a5 + 149) = 3;
  }
  char v45 = *(unsigned char *)(v14 + 157);
  *(unsigned char *)(a5 + 5) = v45;
  unsigned int v46 = *(unsigned __int8 *)(v14 + 158);
  *(unsigned char *)(a5 + 6) = v46;
  *(unsigned char *)(a5 + 53) = v45;
  *(unsigned char *)(a5 + 54) = v46;
  *(unsigned char *)(a5 + 101) = v45;
  *(unsigned char *)(a5 + 102) = v46;
  if (v46 >= 8)
  {
    DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", 880, "BuildCvecMsmt", (char)"stCorrVecTrkMsmt.m_stMagSqCvec.m_ucIdxOfFirstVeryEarlySample < _DIM(stCorrVecTrkMsmt.m_stMagSqCvec.m_afCvec)");
    CrashData();
  }
}

uint64_t BlueFin::GlMeReceiverParametersIfc::GetBandNoisePowerAtCaEpoch(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)a1 + 40))(a1, a2, BlueFin::GlSvId::s_aucSvId2gnss[*a3], *((unsigned int *)a3 + 1));
}

uint64_t BlueFin::GlMeSrdSatRptTrkMsmtMI::AidApplied(BlueFin::GlMeSrdSatRptTrkMsmtMI *this)
{
  uint64_t v1 = *(void *)this;
  if ((*(_DWORD *)(*(void *)this + 8) & 0x200100) == 0)
  {
    DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", 422, "AidApplied", (char)"m_rRpcBuffer.GetFlags().Has(FLG_TRACK_HAS_DEBUG) || m_rRpcBuffer.GetFlags().Has(FLGS_RECEIVED_CW)");
    CrashData();
    uint64_t v1 = *(void *)this;
  }
  return (*(unsigned __int8 *)(v1 + 942) >> 4) & 1;
}

uint64_t BlueFin::GlMeSrdSatRptTrkMsmtMIBase::GlMeSrdSatRptTrkMsmtMIBase(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6 = 0;
  uint64_t v7 = 0;
  *(void *)float result = a2;
  *(void *)(result + 8) = a4;
  *(void *)(result + 16) = a5;
  *(_DWORD *)(result + 24) = a6;
  *(void *)(result + 32) = a3;
  *(_WORD *)(result + 40) = -1;
  uint64_t v8 = a2 + 25;
  int v9 = 255;
  *(unsigned char *)(result + 42) = 0;
  do
  {
    if (*(unsigned __int8 *)(v8 + v7) != 255)
    {
      *(unsigned char *)(result + 42) = ++v6;
      *(unsigned char *)(result + 41) = *(unsigned char *)(v8 + v7);
      if (v9 == 255)
      {
        int v9 = *(unsigned __int8 *)(v8 + v7);
        *(unsigned char *)(result + 40) = v9;
      }
    }
    ++v7;
  }
  while (v7 != 5);
  return result;
}

double BlueFin::GlMeSrdAsicUnitConverter::EswUtStructToInitialUserTimeMs(uint64_t a1, unsigned __int8 *a2, int a3)
{
  unsigned int Lms16ToLms32 = BlueFin::GlMeSrdAsicUnitConverter::GetLms16ToLms32((BlueFin::GlMeSrdAsicUnitConverter *)*(unsigned __int16 *)(a1 + 4), a3);
  if (*((unsigned __int16 *)a2 + 4) >= 0x23Fu)
  {
    uint64_t v15 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 806, "GetChipsPerSec", (char)"IsValid()");
    uint64_t v16 = "glsignalid.h";
    int v17 = 806;
    goto LABEL_11;
  }
  uint64_t v7 = BlueFin::GlSvId::s_aucSvId2gnss[*a2];
  uint64_t v8 = *((int *)a2 + 1);
  int v9 = BlueFin::GlSignalId::s_aulSignalIndexAndGnss2chipsPerEpoch[7 * (int)v8 + v7];
  unsigned int v10 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v8 - v8 + v7];
  if (v9) {
    BOOL v11 = v10 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    uint64_t v15 = "ulChipsPerEpoch != 0 && ulMsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 814, "GetChipsPerSec", (char)"ulChipsPerEpoch != 0 && ulMsPerEpoch != 0");
    uint64_t v16 = "glsignalid.h";
    int v17 = 814;
    goto LABEL_11;
  }
  unint64_t v12 = 0x408F400000000000;
  LOBYTE(v12) = BlueFin::GlMeSrdAsicUnitConverter::ucSubChipResolution;
  double v13 = (double)(1000 * v9 / v10) / 1000.0 * (double)v12;
  if (v13 == 0.0)
  {
    uint64_t v15 = "dTwentiethsPerMs != 0";
    DeviceFaultNotify("glmesrd_asic_unit_converter.cpp", 333, "EswUtStructToInitialUserTimeMs", (char)"dTwentiethsPerMs != 0");
    uint64_t v16 = "glmesrd_asic_unit_converter.cpp";
    int v17 = 333;
LABEL_11:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v16, v17, v15);
  }
  LOWORD(v6) = *(_WORD *)(a1 + 6);
  return (double)v6 / v13 + (double)Lms16ToLms32;
}

float BlueFin::GlMeSrdSatRptTrkMsmtMI::BuildCNoMsmt(BlueFin::GlMeSrdSatRptTrkMsmtMI *this)
{
  *((unsigned char *)this + 136) = 1;
  LOWORD(v1) = *(_WORD *)((*(uint64_t (**)(void))(**((void **)this + 2) + 136))(*((void *)this + 2))
                        + 24);
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 2) + 136))(*((void *)this + 2));
  LOWORD(v4) = *(_WORD *)(*(void *)this + 324);
  *(float *)&unsigned int v5 = (float)v4;
  float v6 = (float)*(unsigned int *)(*(void *)this + 108) / *(float *)&v5;
  LOBYTE(v5) = *(unsigned char *)(v3 + 26);
  *((float *)this + 35) = (float)(v6 * (float)v5) / (float)v1;
  float result = *(float *)((*(uint64_t (**)(void, void))(**((void **)this + 2) + 184))(*((void *)this + 2), *((unsigned __int8 *)this + 40))+ 8);
  *((float *)this + 36) = result;
  return result;
}

BlueFin::GlMeSrdGridResults *BlueFin::GlMeSrdGridResults::GlMeSrdGridResults(BlueFin::GlMeSrdGridResults *this)
{
  *((unsigned char *)this + 14) = 0;
  int v2 = (char *)this + 1289;
  *(void *)((char *)this + 6) = 0;
  uint64_t v3 = (char *)this + 1272;
  *(_DWORD *)this = 0;
  *((unsigned char *)this + 4) = 0;
  bzero((char *)this + 16, 0x428uLL);
  uint64_t v4 = 1080;
  do
  {
    unsigned int v5 = (char *)this + v4;
    *(_WORD *)unsigned int v5 = 0;
    *(_OWORD *)(v5 + 4) = 0uLL;
    *(_OWORD *)(v5 + 20) = 0uLL;
    *((_OWORD *)v5 + 2) = 0uLL;
    v4 += 48;
  }
  while (v5 + 48 != v3);
  *(void *)uint64_t v3 = 0;
  *((void *)this + 160) = 0;
  *((unsigned char *)this + 1288) = 0;
  *(void *)int v2 = 0x203020F043F0606;
  *((_DWORD *)v2 + 2) = -16711421;
  *((unsigned char *)this + 1301) = -1;
  *((void *)this + 163) = 0;
  return this;
}

void BlueFin::GlMeSrdSatRptTrkMsmtMI::BuildCarrMsmt(BlueFin::GlMeSrdSatRptTrkMsmtMI *this)
{
  if (!*((unsigned char *)this + 56))
  {
    DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", 886, "BuildCarrMsmt", (char)"m_stAcqWindowMsmtInfo.m_bValid");
    CrashData();
  }
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 2) + 136))(*((void *)this + 2));
  uint64_t v3 = (float *)(*(uint64_t (**)(void, void))(**((void **)this + 2) + 168))(*((void *)this + 2), *((unsigned __int8 *)this + 41));
  uint64_t v4 = (*(uint64_t (**)(void, void))(**((void **)this + 2) + 184))(*((void *)this + 2), *((unsigned __int8 *)this + 41));
  int v5 = (*(uint64_t (**)(void))(**((void **)this + 6) + 16))(*((void *)this + 6)) & 0xF000FFFE;
  float v6 = *(float *)(v4 + 52);
  float v7 = *v3;
  uint64_t v8 = *(void *)this;
  uint64_t v9 = *(void *)this + 16;
  LOWORD(v10) = *(_WORD *)(*(void *)this + 324);
  *(float *)&unsigned int v11 = (float)v10;
  float v12 = *v3 * *(float *)&v11;
  float v13 = v12 / v6;
  LOBYTE(v6) = *(unsigned char *)(v2 + 26);
  LOWORD(v11) = *(_WORD *)(v2 + 24);
  uint64_t v14 = *(void *)this + 64;
  float v15 = (float)LODWORD(v6) / (float)v11;
  *((float *)this + 137) = BlueFin::GlMeSrdAsicUnitConverter::EswCarrierNcoIncToCarrFreqInHz((BlueFin::GlMeSrdAsicUnitConverter *)*(unsigned int *)(*(void *)this + 72), *((unsigned __int8 **)this + 4), v16);
  *((float *)this + 138) = BlueFin::GlMeSrdAsicUnitConverter::EswCarrierStructToFinalCarrFreqInHz(v9, v14, *((unsigned __int8 **)this + 4));
  double v17 = (double)*(int *)(v8 + 68) * 0.0000000596046448 + (double)*(int *)(v8 + 64);
  *((void *)this + 71) = *((void *)this + 15);
  uint64_t v18 = *((void *)this + 1);
  double v19 = *(double *)(v18 + 8);
  if (vabdd_f64(v19, v17) > 4194304.0)
  {
    if (v19 <= v17) {
      double v20 = -8388608.0;
    }
    else {
      double v20 = 8388608.0;
    }
    double v17 = v17 + v20;
  }
  unsigned int v21 = v5 - 805306389;
  uint64_t v22 = v8 + 104;
  float v23 = v15 / v13;
  double v24 = v17 + (double)*(int *)(v18 + 16) * 8388608.0;
  *((double *)this + 70) = v24;
  for (uint64_t i = 576; i != 581; ++i)
  {
    if (*(unsigned __int8 *)(*(void *)this + i - 551) == 255) {
      char v26 = -1;
    }
    else {
      char v26 = (*(uint64_t (**)(void))(**((void **)this + 2) + 112))(*((void *)this + 2));
    }
    *((unsigned char *)this + i) = v26;
  }
  *((unsigned char *)this + 544) = 1;
  uint64_t v27 = *(void *)this;
  if ((*(unsigned char *)(*(void *)this + 9) & 2) != 0)
  {
    if (!BlueFin::GlMeSrdSatRptTrkMsmtMI::IsBeidouPrebitWithHssSec(this))
    {
      *((unsigned char *)this + 584) = 0;
      goto LABEL_37;
    }
    uint64_t v27 = *(void *)this;
  }
  *((unsigned char *)this + 584) = 1;
  if (*(unsigned char *)(v27 + 105) == 8 || BlueFin::GlMeSrdSatRptTrkMsmtMI::IsBeidouPrebitWithHssSec(this))
  {
    if (*(unsigned char *)(v8 + 736))
    {
      unsigned int v28 = 0;
      char v29 = 0;
      unsigned int v30 = 0;
      unsigned int v31 = 0;
      do
      {
        unsigned int v32 = *(_DWORD *)(v22 + 4 * v29 + 636);
        BOOL v33 = v31 >= v32;
        if (v31 <= v32) {
          unsigned int v31 = *(_DWORD *)(v22 + 4 * v29 + 636);
        }
        if (!v33) {
          unsigned int v30 = v28;
        }
        unsigned int v28 = ++v29;
      }
      while (v29 < (int)*(unsigned __int8 *)(v8 + 736));
      uint64_t v34 = v22 + 4 * v30;
      int v35 = *(_DWORD *)(v34 + 120);
      int v36 = *(_DWORD *)(v34 + 20);
    }
    else
    {
      int v36 = *(_DWORD *)(v8 + 112);
      int v35 = *(_DWORD *)(v8 + 116);
      if (BlueFin::GlMeSrdSatRptTrkMsmtMI::IsBeidouPrebitWithHssSec(this)) {
        *((unsigned char *)this + 584) = 0;
      }
    }
  }
  else
  {
    int v36 = *(_DWORD *)(v8 + 112);
    int v35 = *(_DWORD *)(v8 + 116);
  }
  float v37 = v3[12];
  BOOL v38 = v37 <= v7 || v21 >= 0xFFFFFFFB;
  unsigned int v39 = *(unsigned __int16 *)(v8 + 324);
  *((_WORD *)this + 298) = v39;
  *((float *)this + 147) = (float)v36;
  *((float *)this + 148) = (float)v35;
  if (!v38) {
    float v37 = v7;
  }
  if (v37 > v7) {
    *((_WORD *)this + 298) = v39 / llroundf(v37 / v7);
  }
LABEL_37:
  if ((*(_DWORD *)(*(void *)this + 8) & 0x200) != 0)
  {
    *((unsigned char *)this + 608) = 1;
    *((double *)this + 77) = (double)*(int *)(v8 + 356);
    *((unsigned char *)this + 624) = 0;
    goto LABEL_46;
  }
  *((unsigned char *)this + 608) = 0;
  LODWORD(v24) = *(_DWORD *)(v8 + 328);
  *((double *)this + 80) = (double)*(unint64_t *)&v24 * 0.0000000298023224;
  *((double *)this + 79) = BlueFin::GlMeSrdAsicUnitConverter::EswFllOrPllPhiDotToHz((BlueFin::GlMeSrdAsicUnitConverter *)*(unsigned int *)(v8 + 332), v7);
  if ((*(_DWORD *)(*(void *)this + 8) & 0x200100) == 0)
  {
    DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", 1078, "BuildCarrMsmt", (char)"m_rRpcBuffer.GetFlags().Has(FLG_TRACK_HAS_DEBUG) || m_rRpcBuffer.GetFlags().Has(FLGS_RECEIVED_CW)");
    CrashData();
  }
  double v40 = BlueFin::GlMeSrdAsicUnitConverter::EswFllOrPllPhi2DotToHzPerSec((BlueFin::GlMeSrdAsicUnitConverter *)*(unsigned int *)(v8 + 916), v7);
  *((double *)this + 81) = v40;
  *(float *)&double v40 = (float)*(unsigned int *)(v8 + 336);
  *((float *)this + 165) = v23 * *(float *)&v40;
  *((_WORD *)this + 328) = *(_WORD *)(v8 + 734);
  *((unsigned char *)this + 658) = (*(unsigned char *)(v8 + 340) & 1) == 0;
  *((void *)this + 83) = *(void *)(v8 + 920);
  uint64_t v41 = (unsigned __int8 *)*((void *)this + 4);
  if (*((unsigned __int16 *)v41 + 4) >= 0x23Fu)
  {
    uint64_t v47 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
    int v48 = 678;
    goto LABEL_52;
  }
  unsigned int v42 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)v41 + 1)
                                                                               - *((int *)v41 + 1)
                                                                               + BlueFin::GlSvId::s_aucSvId2gnss[*v41]];
  if (!v42)
  {
    uint64_t v47 = "ucMsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
    int v48 = 685;
LABEL_52:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v48, v47);
  }
  *(double *)&unint64_t v43 = (double)v42;
  LOWORD(v43) = *(_WORD *)(v2 + 24);
  float v44 = sqrtf((float)((float)*(int *)(v8 + 112) * (float)*(int *)(v8 + 112))+ (float)((float)*(int *)(v8 + 116) * (float)*(int *)(v8 + 116)))+ *((double *)this + 435) / (double)v42 * (double)v43 * v12 * 62.5;
  if (v3[12] > v7 && *((unsigned char *)this + 580) == 5) {
    float v44 = v44 * 16.0;
  }
  *((float *)this + 150) = v44 / v12;
  *((float *)this + 168) = *(float *)&v40 / v12;
  *((unsigned char *)this + 624) = 1;
  if ((*(_DWORD *)(*(void *)this + 8) & 0x200) == 0)
  {
    LODWORD(v40) = *(_DWORD *)(v8 + 344);
    *((double *)this + 87) = (double)*(unint64_t *)&v40 * 0.0000000298023224;
    *((double *)this + 86) = BlueFin::GlMeSrdAsicUnitConverter::EswFllOrPllPhiDotToHz((BlueFin::GlMeSrdAsicUnitConverter *)*(unsigned int *)(v8 + 348), v7);
    *((_WORD *)this + 352) = *(_WORD *)(v8 + 732);
    *((_DWORD *)this + 177) = *(unsigned __int16 *)(v8 + 352);
    char v45 = 1;
    *((unsigned char *)this + 706) = (*(unsigned char *)(v8 + 354) & 1) == 0;
    *((void *)this + 89) = *(void *)(v8 + 932);
    char v46 = *(unsigned char *)(v8 + 355);
    *((unsigned char *)this + 720) = v46 & 1;
    *((unsigned char *)this + 721) = (v46 & 2) != 0;
    *((unsigned char *)this + 722) = (v46 & 4) != 0;
    goto LABEL_49;
  }
LABEL_46:
  char v45 = 0;
LABEL_49:
  *((unsigned char *)this + 680) = v45;
  *((unsigned char *)this + 536) = 1;
}

void *BlueFin::GlMeSrdSatRptSearchMsmtMI::GlMeSrdSatRptSearchMsmtMI(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v162 = *MEMORY[0x263EF8340];
  *a1 = a5;
  *((unsigned char *)a1 + 16) = 0;
  *((unsigned char *)a1 + 8) = 0;
  *((_DWORD *)a1 + 3) = 0;
  *((_DWORD *)a1 + 5) = 0;
  *((_WORD *)a1 + 12) = 575;
  *((_DWORD *)a1 + 7) = 0;
  *(_OWORD *)(a1 + 5) = 0u;
  float v6 = a1 + 5;
  *((_WORD *)a1 + 16) = 0;
  *((_DWORD *)a1 + 32) = 0;
  *((_WORD *)a1 + 66) = 0;
  *(_OWORD *)((char *)a1 + 92) = 0u;
  *(_OWORD *)((char *)a1 + 108) = 0u;
  *((unsigned char *)a1 + 124) = 0;
  *((unsigned char *)a1 + 136) = 0;
  *(_OWORD *)(a1 + 7) = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  *((unsigned char *)a1 + 176) = 0;
  float v7 = a1 + 22;
  *((_WORD *)a1 + 44) = 0;
  *((unsigned char *)a1 + 137) = -1;
  *((_WORD *)a1 + 86) = -1;
  *((unsigned char *)a1 + 174) = 0;
  *((_DWORD *)a1 + 45) = 0;
  *((_WORD *)a1 + 92) = 575;
  *((_DWORD *)a1 + 47) = 0;
  a1[24] = 0;
  *(_OWORD *)((char *)a1 + 140) = 0u;
  *(_OWORD *)((char *)a1 + 156) = 0u;
  *((unsigned char *)a1 + 200) = 0;
  *(void *)((char *)a1 + 204) = 0x7F7FFFFF00000000;
  *((unsigned char *)a1 + 212) = 0;
  float v159 = (char *)a1 + 212;
  *((_DWORD *)a1 + 54) = -1;
  *((_WORD *)a1 + 110) = -1;
  *((_OWORD *)a1 + 14) = 0u;
  *((_OWORD *)a1 + 15) = 0u;
  *((_OWORD *)a1 + 16) = 0u;
  *((_OWORD *)a1 + 17) = 0u;
  *((_OWORD *)a1 + 18) = 0u;
  *((_WORD *)a1 + 152) = 0;
  a1[39] = 0x7FEFFFFFFFFFFFFFLL;
  *((_WORD *)a1 + 160) = 0;
  *((_WORD *)a1 + 194) = 255;
  *((unsigned char *)a1 + 392) = 0;
  *((_DWORD *)a1 + 99) = 0;
  *((_WORD *)a1 + 200) = 575;
  *(_OWORD *)((char *)a1 + 372) = 0u;
  *(_OWORD *)((char *)a1 + 356) = 0u;
  *(_OWORD *)((char *)a1 + 340) = 0u;
  *(_OWORD *)((char *)a1 + 324) = 0u;
  a1[51] = 0;
  a1[52] = a2;
  a1[53] = a4;
  *((_DWORD *)a1 + 108) = a6;
  *((unsigned char *)a1 + 436) = 0;
  a1[55] = a3;
  if ((*(_DWORD *)(a2 + 8) & 0x1001A) != 0xA)
  {
    unsigned int v132 = "otFlags.Has(FLGS_RECEIVED_ACQ_WIN) && otFlags.Has(FLGS_RECEIVED_SEARCH) && otFlags.Missing(FLGS_RECEIVED_TRAC"
           "K) && otFlags.Missing(FLGS_RECEIVED_SNIFF)";
    DeviceFaultNotify("glmesrd_sat_report_srch_msmt.cpp", 172, "CheckRpcBuffer", (char)"otFlags.Has(FLGS_RECEIVED_ACQ_WIN) && otFlags.Has(FLGS_RECEIVED_SEARCH) && otFlags.Missing(FLGS_RECEIVED_TRACK) && otFlags.Missing(FLGS_RECEIVED_SNIFF)");
    BOOL v133 = "glmesrd_sat_report_srch_msmt.cpp";
    int v134 = 172;
    goto LABEL_128;
  }
  if (*(_DWORD *)(a2 + 20))
  {
    unsigned int v132 = "sAcqWin.id.eng_type == SEARCH_ENGINE_TYPE";
    DeviceFaultNotify("glmesrd_sat_report_srch_msmt.cpp", 178, "CheckRpcBuffer", (char)"sAcqWin.id.eng_type == SEARCH_ENGINE_TYPE");
    BOOL v133 = "glmesrd_sat_report_srch_msmt.cpp";
    int v134 = 178;
    goto LABEL_128;
  }
  uint64_t v9 = a2 + 104 + 108 * *(unsigned __int8 *)(a2 + 104);
  if (*(unsigned __int8 *)(v9 + 16) != *(unsigned __int8 *)(a2 + 110)
    || *(unsigned __int8 *)(v9 + 17) != *(unsigned __int8 *)(a2 + 111))
  {
    unsigned int v132 = "rSearch_max_bin.bin_id == rSearch_info.peak_bin_id && rSearch_max_bin.bit_phase_id == rSearch_info.peak_bit_phase_id";
    DeviceFaultNotify("glmesrd_sat_report_srch_msmt.cpp", 182, "CheckRpcBuffer", (char)"rSearch_max_bin.bin_id == rSearch_info.peak_bin_id && rSearch_max_bin.bit_phase_id == rSearch_info.peak_bit_phase_id");
    BOOL v133 = "glmesrd_sat_report_srch_msmt.cpp";
    int v134 = 182;
    goto LABEL_128;
  }
  *((unsigned char *)a1 + 8) = 1;
  *((_DWORD *)a1 + 3) = 1;
  if (a1 + 2 != (void *)a3)
  {
    *((unsigned char *)a1 + 16) = *(unsigned char *)a3;
    *((_DWORD *)a1 + 5) = *(_DWORD *)(a3 + 4);
    *((_WORD *)a1 + 12) = *(_WORD *)(a3 + 8);
  }
  float v11 = BlueFin::GlMeSrdAsicUnitConverter::EswCarrierStructToFinalCarrFreqInHz(a2 + 16, a2 + 64, (unsigned __int8 *)a3);
  *((double *)a1 + 8) = BlueFin::GlMeSrdAsicUnitConverter::HzToPpu((BlueFin::GlMeSrdAsicUnitConverter *)a1[55], v11, v12);
  *((double *)a1 + 9) = BlueFin::GlMeSrdAsicUnitConverter::EswUtStructToFinalUserTimeMs((unsigned __int16 *)(a2 + 36), (unsigned __int8 *)a1[55], *((_DWORD *)a1 + 108))* 0.001;
  *((double *)a1 + 9) = *((double *)a1 + 9)
                      - (*(float (**)(void, void))(*(void *)a1[53] + 56))(a1[53], a1[55]);
  double InterSignalBiasInMs = BlueFin::GlSignalId::GetInterSignalBiasInMs((unsigned __int8 *)a1[55], *a1);
  double v14 = *((double *)a1 + 9);
  double v15 = v14 - InterSignalBiasInMs * 0.001;
  *((double *)a1 + 9) = v15;
  *((double *)a1 + 9) = BlueFin::GlMeSrdAsicUnitConverter::Esw16thOr20thChipsToSecs((BlueFin::GlMeSrdAsicUnitConverter *)*(char *)(a2 + 113), (unsigned __int8 *)a1[55], v16, v15, v14, v17)+ *((double *)a1 + 9);
  uint64_t v18 = (*(uint64_t (**)(void, void))(*(void *)a1[53] + 248))(a1[53], *(unsigned __int8 *)(a2 + 24));
  LOWORD(v19) = *(_WORD *)(a2 + 32);
  *((double *)a1 + 9) = *((double *)a1 + 9) + (1.0 - *((double *)a1 + 8)) * (float)(*(float *)(v18 + 4) * (float)v19);
  double v20 = (unsigned __int8 *)a1[55];
  if (*((unsigned __int16 *)v20 + 4) >= 0x23Fu)
  {
    unsigned int v132 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
    BOOL v133 = "glsignalid.h";
    int v134 = 678;
    goto LABEL_128;
  }
  uint64_t v21 = *((int *)v20 + 1);
  uint64_t v22 = BlueFin::GlSvId::s_aucSvId2gnss[*v20];
  unsigned int v23 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v21 - v21 + v22];
  if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v21 - v21 + v22])
  {
    unsigned int v132 = "ucMsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
    BOOL v133 = "glsignalid.h";
    int v134 = 685;
    goto LABEL_128;
  }
  unsigned int v24 = BlueFin::GlSignalId::s_aulSignalIndexAndGnss2chipsPerEpoch[7 * (int)v21 + v22];
  if (!v24)
  {
    unsigned int v132 = "ucChipsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 784, "GetChipsPerEpoch", (char)"ucChipsPerEpoch != 0");
    BOOL v133 = "glsignalid.h";
    int v134 = 784;
    goto LABEL_128;
  }
  *((double *)a1 + 10) = (((double)*(unsigned __int16 *)(a2 + 58) * 0.0000152587891
                         + (double)(*(_DWORD *)(a2 + 48) & 0xF))
                        * 0.0625
                        + (double)(*(_DWORD *)(a2 + 48) >> 4))
                       * ((double)v23
                        * 0.001)
                       / (double)v24;
  *((_DWORD *)a1 + 7) = 0;
  v6[1] = 0;
  v6[2] = 0;
  *float v6 = 0;
  uint64_t v25 = a1[52];
  unsigned int v26 = *(unsigned __int8 *)(v25 + 104);
  uint64_t v27 = (*(uint64_t (**)(void, void))(*(void *)a1[53] + 248))(a1[53], *(unsigned __int8 *)(v25 + 24));
  *((unsigned char *)a1 + 89) = 8;
  uint64_t v28 = v25 + 104 + 108 * v26;
  unsigned int v30 = *(unsigned __int8 *)(v28 + 13);
  char v29 = (unsigned __int8 *)(v28 + 13);
  int v31 = (v29[87] >> 5) & 3;
  unsigned int FftPhaseFromCvecSampleIdx = BlueFin::GlMeSrdSatRptSearchMsmtMI::GetFftPhaseFromCvecSampleIdx(0, (v29[87] >> 5) & 3, 3, v30);
  uint64_t v33 = *((unsigned __int8 *)a1 + 89);
  if (*((unsigned char *)a1 + 89))
  {
    uint64_t v34 = 0;
    unsigned int v35 = 0;
    unsigned int v36 = 0;
    uint64_t v37 = FftPhaseFromCvecSampleIdx;
    BOOL v38 = (char *)a1 + 92;
    unsigned int v39 = (unsigned char *)(v25 + 108 * v26 + 206);
    do
    {
      int v40 = *(v39 - 1) << *v39;
      *(_DWORD *)&v38[4 * v34] = v40;
      int v41 = *(_DWORD *)(v25 + 108 * v26 + 4 * v37 + 148);
      v161[v34] = v41;
      BOOL v42 = __CFADD__(v40, v41);
      unsigned int v43 = v40 + v41;
      if (v42)
      {
        unsigned int v132 = "ulCvecVal >= m_stCNoMsmt.aulCvec[i]";
        DeviceFaultNotify("glmesrd_sat_report_srch_msmt.cpp", 297, "BuildCNoMsmt", (char)"ulCvecVal >= m_stCNoMsmt.aulCvec[i]");
        BOOL v133 = "glmesrd_sat_report_srch_msmt.cpp";
        int v134 = 297;
        goto LABEL_128;
      }
      v39 += 2;
      *(_DWORD *)&v38[4 * v34] = v43;
      BOOL v45 = v36 != 3 && v43 == v35 || v43 > v35;
      if (v45) {
        unsigned int v36 = v34;
      }
      if (v43 > v35) {
        unsigned int v35 = v43;
      }
      unsigned int v46 = *v29;
      uint64_t v37 = (v37 + 1) % v46;
      ++v34;
    }
    while (v33 != v34);
    if (v36 == 3)
    {
      int v47 = 3;
      goto LABEL_38;
    }
  }
  else
  {
    unsigned int v35 = 0;
    unsigned int v36 = 0;
    unsigned int v46 = *v29;
  }
  unsigned int v48 = *(_DWORD *)(v25
                  + 108 * v26
                  + 4
                  * BlueFin::GlMeSrdSatRptSearchMsmtMI::GetFftPhaseFromCvecSampleIdx((BlueFin::GlMeSrdSatRptSearchMsmtMI *)3, v31, 3, v46)+ 148);
  if (v48 < 0x801) {
    goto LABEL_31;
  }
  unsigned int v49 = v48 >> 11;
  char v50 = -1;
  do
  {
    ++v50;
    BOOL v45 = v49 > 1;
    v49 >>= 1;
  }
  while (v45);
  unsigned int v51 = *((_DWORD *)a1 + 26) + ~(-2 << v50);
  *((_DWORD *)a1 + 26) = v51;
  if (v51 >= v35)
  {
    int v47 = 3;
  }
  else
  {
LABEL_31:
    uint64_t v52 = v25 + 108 * v26;
    uint64_t v53 = v52 + 2 * v36;
    int v54 = *(unsigned __int8 *)(v53 + 205);
    LOBYTE(v53) = *(unsigned char *)(v53 + 206);
    int v55 = *(unsigned __int8 *)(v52 + 211);
    char v56 = *(unsigned char *)(v52 + 212);
    int v57 = (v54 << v53) + v161[v36] - (v161[3] + (v55 << v56));
    int v58 = 1 << v53;
    if (v55 == 255) {
      int v59 = 2;
    }
    else {
      int v59 = 1;
    }
    if ((v59 << v56) + v58 <= 2 * v57) {
      int v47 = v36;
    }
    else {
      int v47 = 3;
    }
  }
LABEL_38:
  unint64_t v60 = (unsigned char *)a1[52];
  if ((v60[28] & 0xA) == 0 && (v60[10] & 0x20) == 0 && v47 != 3)
  {
    unsigned int v132 = "uiCvecPeakIdx == GlMeSrdAsicCorrVecSrchMsmt::CVEC_PROMPT_IDX";
    DeviceFaultNotify("glmesrd_sat_report_srch_msmt.cpp", 408, "BuildCNoMsmt", (char)"uiCvecPeakIdx == GlMeSrdAsicCorrVecSrchMsmt::CVEC_PROMPT_IDX");
    BOOL v133 = "glmesrd_sat_report_srch_msmt.cpp";
    int v134 = 408;
    goto LABEL_128;
  }
  uint64_t v61 = *v29;
  *((unsigned char *)a1 + 124) = v61;
  if (!*(_WORD *)(v25 + 108 * v26 + 124))
  {
    unsigned int v132 = "0 != rSearch_max_bin.smet.scv_actual_noncoh_count";
    DeviceFaultNotify("glmesrd_sat_report_srch_msmt.cpp", 415, "BuildCNoMsmt", (char)"0 != rSearch_max_bin.smet.scv_actual_noncoh_count");
    BOOL v133 = "glmesrd_sat_report_srch_msmt.cpp";
    int v134 = 415;
    goto LABEL_128;
  }
  *((_WORD *)a1 + 66) = *(_WORD *)(v25 + 108 * v26 + 124);
  unsigned int v62 = *(_DWORD *)(v25 + 108 * v26 + 132);
  *((_DWORD *)a1 + 32) = v62;
  if (v61)
  {
    int v63 = *(unsigned __int16 *)(v27 + 10);
    unsigned int v64 = (int *)(v25 + 108 * v26 + 148);
    uint64_t v65 = v61;
    unsigned int v66 = v62;
    do
    {
      int v67 = *v64++;
      v66 += v67 * v63;
      *((_DWORD *)a1 + 32) = v66;
      --v65;
    }
    while (v65);
    if (v66 < v62)
    {
      unsigned int v132 = "m_stCNoMsmt.ulMagSum >= rSearch_max_bin.smet.scv_mag_sum";
      DeviceFaultNotify("glmesrd_sat_report_srch_msmt.cpp", 427, "BuildCNoMsmt", (char)"m_stCNoMsmt.ulMagSum >= rSearch_max_bin.smet.scv_mag_sum");
      BOOL v133 = "glmesrd_sat_report_srch_msmt.cpp";
      int v134 = 427;
      goto LABEL_128;
    }
  }
  *((unsigned char *)a1 + 88) = 1;
  if (!*((unsigned char *)a1 + 8))
  {
    unsigned int v132 = "m_stAcqWindowMsmtInfo.m_bValid";
    DeviceFaultNotify("glmesrd_sat_report_srch_msmt.cpp", 436, "BuildCorrVecMsmt", (char)"m_stAcqWindowMsmtInfo.m_bValid");
    BOOL v133 = "glmesrd_sat_report_srch_msmt.cpp";
    int v134 = 436;
    goto LABEL_128;
  }
  uint64_t v68 = *((unsigned __int8 *)a1 + 89);
  *((unsigned char *)a1 + 137) = v68;
  if (v68 >= 9)
  {
    unsigned int v132 = "m_stCorrVecMsmt.m_ucCvecLen <= MAX_CVEC_LEN";
    DeviceFaultNotify("glmesrd_sat_report_srch_msmt.cpp", 439, "BuildCorrVecMsmt", (char)"m_stCorrVecMsmt.m_ucCvecLen <= MAX_CVEC_LEN");
    BOOL v133 = "glmesrd_sat_report_srch_msmt.cpp";
    int v134 = 439;
    goto LABEL_128;
  }
  int v69 = v60[104];
  if (v68)
  {
    unint64_t v70 = (float *)a1 + 35;
    do
    {
      *unint64_t v70 = (float)*((unsigned int *)v70 - 12);
      ++v70;
      --v68;
    }
    while (v68);
  }
  *((unsigned char *)a1 + 172) = v61;
  *((unsigned char *)a1 + 173) = (v60[108 * v69 + 204] >> 5) & 3;
  *((unsigned char *)a1 + 174) = v60[12];
  uint64_t v71 = a1[55];
  if (v7 != (void *)v71)
  {
    *((unsigned char *)a1 + 176) = *(unsigned char *)v71;
    *((_DWORD *)a1 + 45) = *(_DWORD *)(v71 + 4);
    *((_WORD *)a1 + 92) = *(_WORD *)(v71 + 8);
  }
  *((_DWORD *)a1 + 47) = 0;
  a1[24] = a1[9];
  *((unsigned char *)a1 + 136) = 1;
  *((unsigned char *)a1 + 200) = 1;
  *((_DWORD *)a1 + 51) = 2;
  *((float *)a1 + 52) = BlueFin::GlMeSrdAsicUnitConverter::EswCarrierStructToFinalCarrFreqInHz((uint64_t)(v60 + 16), (uint64_t)(v60 + 64), (unsigned __int8 *)v71);
  if (!*((unsigned char *)a1 + 88))
  {
    unsigned int v132 = "m_stCNoMsmt.bValid";
    DeviceFaultNotify("glmesrd_sat_report_srch_msmt.cpp", 563, "BuildCodePrmMsmt", (char)"m_stCNoMsmt.bValid");
    BOOL v133 = "glmesrd_sat_report_srch_msmt.cpp";
    int v134 = 563;
    goto LABEL_128;
  }
  uint64_t v73 = a1[52];
  uint64_t v72 = a1[53];
  unsigned int v74 = *(unsigned __int8 *)(v73 + 104);
  *((unsigned char *)a1 + 304) = 1;
  uint64_t v75 = v73 + 104 + 108 * v74;
  unsigned int v76 = *(unsigned __int16 *)(v75 + 20);
  __int16 v77 = *(_WORD *)(v75 + 20 + 2 * (((unint64_t)*(unsigned __int8 *)(v75 + 100) >> 5) & 3) + 16);
  double v78 = *(float *)((*(uint64_t (**)(uint64_t, void))(*(void *)v72 + 248))(v72, *(unsigned __int8 *)(v73 + 24))+ 4)* 1000.0;
  if (v78 <= 0.0)
  {
    if (v78 < 0.0) {
      int v80 = (int)(v78 + -0.5);
    }
    else {
      int v80 = 0;
    }
  }
  else
  {
    int v80 = (int)(v78 + 0.5);
  }
  double v81 = (unsigned __int8 *)a1[55];
  if (*((unsigned __int16 *)v81 + 4) >= 0x23Fu)
  {
    unsigned int v132 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 806, "GetChipsPerSec", (char)"IsValid()");
    BOOL v133 = "glsignalid.h";
    int v134 = 806;
    goto LABEL_128;
  }
  uint64_t v82 = BlueFin::GlSvId::s_aucSvId2gnss[*v81];
  uint64_t v83 = *((int *)v81 + 1);
  int v84 = BlueFin::GlSignalId::s_aulSignalIndexAndGnss2chipsPerEpoch[7 * (int)v83 + v82];
  unsigned int v85 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v83 - v83 + v82];
  if (v84) {
    BOOL v86 = v85 == 0;
  }
  else {
    BOOL v86 = 1;
  }
  if (v86)
  {
    unsigned int v132 = "ulChipsPerEpoch != 0 && ulMsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 814, "GetChipsPerSec", (char)"ulChipsPerEpoch != 0 && ulMsPerEpoch != 0");
    BOOL v133 = "glsignalid.h";
    int v134 = 814;
    goto LABEL_128;
  }
  LOWORD(v79) = *(_WORD *)(v73 + 58);
  *((double *)a1 + 39) = (double)v80 * 0.001 * (double)*(unsigned __int16 *)(v73 + 32) * (double)(1000 * v84 / v85)
                       + (double)v77 / ((double)v76 * 64.0)
                       + ((double)v79 * 0.0000152587891 + (double)(*(_DWORD *)(v73 + 48) & 0xF)) * 0.0625
                       + (double)(*(_DWORD *)(v73 + 48) >> 4);
  *((unsigned char *)a1 + 305) = *(unsigned char *)(v73 + 61);
  if (!*((unsigned char *)a1 + 136))
  {
    unsigned int v132 = "m_stCorrVecMsmt.m_bValid";
    DeviceFaultNotify("glmesrd_sat_report_srch_msmt.cpp", 482, "BuildBitPhsMsmt", (char)"m_stCorrVecMsmt.m_bValid");
    BOOL v133 = "glmesrd_sat_report_srch_msmt.cpp";
    int v134 = 482;
    goto LABEL_128;
  }
  if (!*((unsigned char *)a1 + 8))
  {
    unsigned int v132 = "m_stAcqWindowMsmtInfo.m_bValid";
    DeviceFaultNotify("glmesrd_sat_report_srch_msmt.cpp", 483, "BuildBitPhsMsmt", (char)"m_stAcqWindowMsmtInfo.m_bValid");
    BOOL v133 = "glmesrd_sat_report_srch_msmt.cpp";
    int v134 = 483;
    goto LABEL_128;
  }
  uint64_t v87 = a1[52];
  if ((~*(_DWORD *)(v87 + 8) & 0xA) != 0 || *(unsigned char *)(v87 + 105) != 2)
  {
    *float v159 = 0;
  }
  else
  {
    unsigned int v89 = *(unsigned __int8 *)(v87 + 104);
    uint64_t v88 = v87 + 104;
    int v90 = *(unsigned __int16 *)(v88 + 108 * v89 + 20);
    uint64_t v91 = a1[53];
    LOBYTE(v161[0]) = *(unsigned char *)(v88 - 88);
    unsigned int v92 = *(unsigned __int8 *)((*(uint64_t (**)(uint64_t, _DWORD *))(*(void *)v91 + 160))(v91, v161) + 8);
    uint64_t v87 = a1[52];
    unsigned int v93 = *(unsigned __int8 *)(v87 + 109);
    if (v93 > v92)
    {
      unsigned int v132 = "m_rRpcBuffer.GetBitHistLen() <= ucBitHistLenInCaEpoch";
      DeviceFaultNotify("glmesrd_sat_report_srch_msmt.cpp", 499, "BuildBitPhsMsmt", (char)"m_rRpcBuffer.GetBitHistLen() <= ucBitHistLenInCaEpoch");
      BOOL v133 = "glmesrd_sat_report_srch_msmt.cpp";
      int v134 = 499;
      goto LABEL_128;
    }
    int v94 = v92 / v93;
    if (v92 / v93 * v93 != v92)
    {
      unsigned int v132 = "ucBitHistSpacingInCaEpoch * m_rRpcBuffer.GetBitHistLen() == ucBitHistLenInCaEpoch";
      DeviceFaultNotify("glmesrd_sat_report_srch_msmt.cpp", 504, "BuildBitPhsMsmt", (char)"ucBitHistSpacingInCaEpoch * m_rRpcBuffer.GetBitHistLen() == ucBitHistLenInCaEpoch");
      BOOL v133 = "glmesrd_sat_report_srch_msmt.cpp";
      int v134 = 504;
      goto LABEL_128;
    }
    *((unsigned char *)a1 + 212) = 1;
    *((_DWORD *)a1 + 54) = v90;
    *((unsigned char *)a1 + 220) = v92;
    *((unsigned char *)a1 + 221) = v94;
    unsigned __int8 v95 = *(unsigned char *)(v87 + 108) + *(unsigned char *)(v87 + 109) - 1;
    if (*(unsigned char *)(v87 + 108) + *(unsigned char *)(v87 + 109) != 1)
    {
      char v96 = 0;
      int v97 = *(unsigned __int8 *)(v87 + 110);
      int v98 = *(unsigned __int8 *)(v87 + 104);
      unsigned __int8 v99 = 1;
      while (1)
      {
        char v100 = v95 <= (v96 + v98) ? v95 : 0;
        unsigned __int8 v101 = v96 + v98 - v100;
        if (v98 == v101) {
          break;
        }
        if (v97 == *(unsigned __int8 *)(v87 + 108 * v101 + 120))
        {
          if (*(unsigned __int8 *)(v87 + 108) + *(unsigned __int8 *)(v87 + 109) - 1 <= v101)
          {
            unsigned int v132 = "i<GetNbOfSrchBin()";
            DeviceFaultNotify("glmesrd_sat_report_rpc_buffer.h", 211, "GetSrchBinData", (char)"i<GetNbOfSrchBin()");
            BOOL v133 = "glmesrd_sat_report_rpc_buffer.h";
            int v134 = 211;
            goto LABEL_128;
          }
          uint64_t v110 = v87 + 108 * v101;
          int v111 = *(unsigned __int8 *)(v110 + 205) << *(unsigned char *)(v110 + 206);
          int v112 = &v159[4 * v99];
          *((_DWORD *)v112 + 3) = v111;
          *((_DWORD *)v112 + 3) = v111 + *(_DWORD *)(v110 + 148);
          goto LABEL_85;
        }
LABEL_86:
        if (v92 <= v99) {
          unsigned __int8 v99 = 0;
        }
        if (++v96 >= v95) {
          goto LABEL_91;
        }
      }
      uint64_t v102 = *((unsigned __int8 *)a1 + 137);
      if (*((unsigned char *)a1 + 137))
      {
        int v103 = (char *)a1 + 4 * v99;
        unsigned int v106 = *((_DWORD *)v103 + 56);
        int v104 = (unsigned int *)(v103 + 224);
        unsigned int v105 = v106;
        uint64_t v107 = (unsigned int *)a1 + 23;
        do
        {
          unsigned int v109 = *v107++;
          unsigned int v108 = v109;
          if (v109 > v105)
          {
            *int v104 = v108;
            unsigned int v105 = v108;
          }
          --v102;
        }
        while (v102);
      }
LABEL_85:
      v99 += v94;
      goto LABEL_86;
    }
  }
LABEL_91:
  if (!*((unsigned char *)a1 + 88))
  {
    unsigned int v132 = "m_stCNoMsmt.bValid";
    DeviceFaultNotify("glmesrd_sat_report_srch_msmt.cpp", 608, "BuildAltPkMsmt", (char)"m_stCNoMsmt.bValid");
    BOOL v133 = "glmesrd_sat_report_srch_msmt.cpp";
    int v134 = 608;
    goto LABEL_128;
  }
  if (!*((unsigned char *)a1 + 8))
  {
    unsigned int v132 = "m_stAcqWindowMsmtInfo.m_bValid";
    DeviceFaultNotify("glmesrd_sat_report_srch_msmt.cpp", 609, "BuildAltPkMsmt", (char)"m_stAcqWindowMsmtInfo.m_bValid");
    BOOL v133 = "glmesrd_sat_report_srch_msmt.cpp";
    int v134 = 609;
    goto LABEL_128;
  }
  unsigned int v113 = *(unsigned __int8 *)(v87 + 104);
  uint64_t v114 = v87 + 104 + 108 * *(unsigned __int8 *)(v87 + 104);
  uint64_t v115 = (*(uint64_t (**)(void, void))(*(void *)a1[53] + 248))(a1[53], *(unsigned __int8 *)(v87 + 24));
  *((unsigned char *)a1 + 320) = 1;
  if (*(unsigned char *)(v114 + 12))
  {
    unsigned int v116 = *(unsigned __int8 *)(v87 + 108 * v113 + 164);
    *((unsigned char *)a1 + 321) = v116;
    if (v116)
    {
LABEL_95:
      float v158 = v7;
      uint64_t v117 = 0;
      unsigned int v118 = 0;
      uint64_t v119 = v87 + 108 * v113;
      unsigned int v160 = *(unsigned __int16 *)(v119 + 200);
      uint64_t v120 = *(unsigned __int16 *)(v115 + 10);
      unsigned int v157 = *((unsigned __int8 *)a1 + 124);
      unsigned int v156 = v116;
      uint64_t v121 = 2 * v116;
      unsigned int v122 = v113;
      uint64_t v123 = (float *)a1 + 89;
      uint64_t v124 = (unsigned int *)(v119 + 168);
      do
      {
        unsigned int v125 = *v124++;
        int v126 = (v160 >> v117) & 3;
        uint64_t v127 = v120;
        *uint64_t v123 = (float)((float)v126 / (float)v157)
              + (float)BlueFin::GlMeSrdAsicUnitConverter::FftIdxToWholeChip((BlueFin::GlMeSrdAsicUnitConverter *)(v125 & 0x3FFF), v120);
        float v128 = (float)(v125 >> 14) + (float)*(unsigned int *)(v87 + 108 * v122 + 4 * v126 + 148);
        *(v123 - 8) = v128;
        float v129 = fmodf(v128, 4295000000.0);
        uint64_t v120 = v127;
        if (v128 <= 4295000000.0) {
          float v129 = v128;
        }
        v118 += v129;
        v117 += 2;
        ++v123;
      }
      while (v121 != v117);
      unsigned int v130 = *((_DWORD *)a1 + 32);
      float v7 = v158;
      __int16 v131 = v157;
      unsigned int v116 = v156;
      if (v130 < v118)
      {
        unsigned int v132 = "ulTotalMagSum >= ulSumPeakVec";
        DeviceFaultNotify("glmesrd_sat_report_srch_msmt.cpp", 644, "BuildAltPkMsmt", (char)"ulTotalMagSum >= ulSumPeakVec");
        BOOL v133 = "glmesrd_sat_report_srch_msmt.cpp";
        int v134 = 644;
        goto LABEL_128;
      }
      goto LABEL_103;
    }
  }
  else
  {
    unsigned int v116 = *((unsigned __int8 *)a1 + 321);
    if (*((unsigned char *)a1 + 321)) {
      goto LABEL_95;
    }
  }
  unsigned int v118 = 0;
  unsigned int v130 = *((_DWORD *)a1 + 32);
  __int16 v131 = *((unsigned __int8 *)a1 + 124);
  LOWORD(v120) = *(_WORD *)(v115 + 10);
LABEL_103:
  if (v116)
  {
    float v135 = (float)(v130 - v118) / (float)(__int16)(v120 * v131 - v116);
    uint64_t v136 = v116;
    uint64_t v137 = (float *)a1 + 81;
    uint64_t v138 = v116;
    do
    {
      if (*v137 <= v135) {
        float v139 = 0.0;
      }
      else {
        float v139 = *v137 - v135;
      }
      *v137++ = v139;
      --v138;
    }
    while (v138);
    if (v116 >= 2)
    {
      uint64_t v140 = 0;
      uint64_t v141 = 1;
      do
      {
        uint64_t v142 = v140;
        do
        {
          unsigned int v143 = (float *)a1 + v142;
          float v144 = v143[81];
          unint64_t v145 = (float *)a1 + v142;
          float v146 = v145[82];
          if (v144 >= v146) {
            break;
          }
          v143[81] = v146;
          v145[82] = v144;
          uint64_t v147 = (char *)a1 + 4 * v142;
          int v148 = *((_DWORD *)v147 + 89);
          *((float *)v147 + 89) = v145[90];
          *((_DWORD *)v145 + 90) = v148;
          uint64_t v149 = v142-- + 1;
        }
        while (v149 > 1);
        ++v141;
        ++v140;
      }
      while (v141 != v136);
    }
  }
  *((unsigned char *)a1 + 388) = v131;
  uint64_t v150 = a1[55];
  if (v7 + 27 != (void *)v150)
  {
    *((unsigned char *)a1 + 392) = *(unsigned char *)v150;
    *((_DWORD *)a1 + 99) = *(_DWORD *)(v150 + 4);
    *((_WORD *)a1 + 200) = *(_WORD *)(v150 + 8);
  }
  uint64_t v151 = (unsigned char *)a1[52];
  *((unsigned char *)a1 + 389) = v151[12];
  a1[51] = a1[9];
  if ((v151[28] & 0x10) != 0 && *(unsigned __int16 *)&v151[108 * v151[104] + 126] >= 0xAu)
  {
    if (((*(uint64_t (**)(void))(*(void *)*a1 + 520))(*a1) & 1) == 0)
    {
      unsigned int v132 = "m_rAsicConfigIfc.EnableSearchXcorrTest()";
      DeviceFaultNotify("glmesrd_sat_report_srch_msmt.cpp", 53, "GlMeSrdSatRptSearchMsmtMI", (char)"m_rAsicConfigIfc.EnableSearchXcorrTest()");
      BOOL v133 = "glmesrd_sat_report_srch_msmt.cpp";
      int v134 = 53;
      goto LABEL_128;
    }
    if (!*((unsigned char *)a1 + 436))
    {
      uint64_t v152 = a1[52];
      int v153 = *(_DWORD *)(v152 + 28);
      if (v153)
      {
        if ((v153 & 0x20) != 0)
        {
          unsigned int v132 = "!(m_rRpcBuffer.GetAcqWindowRawData().id.flags.se.search_result & SRCH_FAILURE)";
          DeviceFaultNotify("glmesrd_sat_report_srch_msmt.cpp", 159, "IsSuccessfulSrch", (char)"!(m_rRpcBuffer.GetAcqWindowRawData().id.flags.se.search_result & SRCH_FAILURE)");
          BOOL v133 = "glmesrd_sat_report_srch_msmt.cpp";
          int v134 = 159;
        }
        else
        {
          uint64_t v154 = (*(uint64_t (**)(void, void))(*(void *)a1[53] + 248))(a1[53], *(unsigned __int8 *)(v152 + 24));
          if (*(unsigned char *)(a1[52] + 105) == 2 && (*(_WORD *)(v154 + 24) & 0x100) != 0)
          {
            *((unsigned char *)a1 + 436) = 1;
            return a1;
          }
          unsigned int v132 = "bIs2dBitSrch && bReportOnFailure";
          DeviceFaultNotify("glmesrd_sat_report_srch_msmt.cpp", 66, "GlMeSrdSatRptSearchMsmtMI", (char)"bIs2dBitSrch && bReportOnFailure");
          BOOL v133 = "glmesrd_sat_report_srch_msmt.cpp";
          int v134 = 66;
        }
LABEL_128:
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v133, v134, v132);
      }
    }
  }
  return a1;
}

uint64_t BlueFin::GlMeSrdAsicUnitConverter::FftIdxToWholeChip(BlueFin::GlMeSrdAsicUnitConverter *this, int a2)
{
  if (a2 == 4092)
  {
    unsigned int v5 = 109 * this + (unsigned __int16)(387 * ((unsigned __int16)this % 0x21u));
    return (unsigned __int16)(v5 - 4092 * (((16793617 * (unint64_t)v5) >> 32) >> 4));
  }
  else
  {
    int v2 = (int)(543 * this - 47 * ((unsigned __int16)this % 0x21u)) % 2046;
    unsigned int v3 = 496 * this + 16 * (unsigned __int16)(33 * ((unsigned __int16)this / 0x21u));
    unsigned int v4 = v3 - 1023 * (((67174465 * (unint64_t)v3) >> 32) >> 4);
    if (a2 != 1023) {
      unsigned int v4 = 31 * (int)this % (a2 - 1) + this / (a2 - 1) * (a2 - 1);
    }
    if (a2 != 2046) {
      LOWORD(v2) = v4;
    }
  }
  return (unsigned __int16)v2;
}

float BlueFin::GlMeSrdAsicUnitConverter::EswCarrierNcoIncToCarrFreqInHz(BlueFin::GlMeSrdAsicUnitConverter *this, unsigned __int8 *a2, const BlueFin::GlSignalId *a3)
{
  if (BlueFin::GlMeSrdAsicUnitConverter::bIsMinnowAsicType)
  {
    if (!BlueFin::GlMeSrdAsicUnitConverter::s_aucSignalIndexAndGnss2NcoScaleFactor[8 * *((int *)a2 + 1)
                                                                                  - *((int *)a2 + 1)
                                                                                  + BlueFin::GlSvId::s_aucSvId2gnss[*a2]])
    {
      unsigned int v10 = "ucNcoScaleFactor != 0";
      DeviceFaultNotify("glmesrd_asic_unit_converter.cpp", 526, "EswCarrierNcoIncToCarrFreqInHz", (char)"ucNcoScaleFactor != 0");
      float v11 = "glmesrd_asic_unit_converter.cpp";
      int v12 = 526;
LABEL_14:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v11, v12, v10);
    }
    float v3 = (float)BlueFin::GlMeSrdAsicUnitConverter::s_aucSignalIndexAndGnss2NcoScaleFactor[8 * *((int *)a2 + 1)
                                                                                        - *((int *)a2 + 1)
                                                                                        + BlueFin::GlSvId::s_aucSvId2gnss[*a2]];
  }
  else
  {
    float v3 = 1.0;
  }
  if (*((unsigned __int16 *)a2 + 4) >= 0x23Fu)
  {
    unsigned int v10 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 806, "GetChipsPerSec", (char)"IsValid()");
    float v11 = "glsignalid.h";
    int v12 = 806;
    goto LABEL_14;
  }
  uint64_t v4 = BlueFin::GlSvId::s_aucSvId2gnss[*a2];
  uint64_t v5 = *((int *)a2 + 1);
  int v6 = BlueFin::GlSignalId::s_aulSignalIndexAndGnss2chipsPerEpoch[7 * (int)v5 + v4];
  unsigned int v7 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v5 - v5 + v4];
  if (v6) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    unsigned int v10 = "ulChipsPerEpoch != 0 && ulMsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 814, "GetChipsPerSec", (char)"ulChipsPerEpoch != 0 && ulMsPerEpoch != 0");
    float v11 = "glsignalid.h";
    int v12 = 814;
    goto LABEL_14;
  }
  return (float)((float)((float)(int)this * (float)(1000 * v6 / v7)) * 20.0)
       / (float)(v3 * (float)BlueFin::GlMeSrdAsicUnitConverter::ulFrqNco2HzScale);
}

double BlueFin::GlSignalId::GetInterSignalBiasInMs(unsigned __int8 *a1, uint64_t a2)
{
  if (*((unsigned __int16 *)a1 + 4) >= 0x23Fu)
  {
    unsigned int v10 = "IsValid()";
    DeviceFaultNotify("glsignalid.cpp", 600, "GetInterSignalBiasInMs", (char)"IsValid()");
    int v11 = 600;
    goto LABEL_20;
  }
  unsigned int v2 = BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)a1 + 1)
                                                              - *((int *)a1 + 1)
                                                              + BlueFin::GlSvId::s_aucSvId2gnss[*a1]];
  if (v2 > 0xE)
  {
    unsigned int v10 = "false";
    DeviceFaultNotify("glsignalid.cpp", 631, "GetInterSignalBiasInMs", (char)"false");
    int v11 = 631;
LABEL_20:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.cpp", v11, v10);
  }
  double result = 0.0;
  int v4 = 1 << v2;
  if ((v4 & 0x784B) != 0) {
    return result;
  }
  if ((v4 & 0x1B4) == 0)
  {
    unsigned int v10 = "false";
    DeviceFaultNotify("glsignalid.cpp", 624, "GetInterSignalBiasInMs", (char)"false");
    int v11 = 624;
    goto LABEL_20;
  }
  int v5 = (*(uint64_t (**)(uint64_t, double))(*(void *)a2 + 184))(a2, 0.0);
  BOOL v6 = (v5 & 0xF000FFFF) == 0x30000011 || (v5 & 0xF000FFFF) == 805306383;
  double v7 = -0.0467008798;
  if (v6) {
    double v7 = -0.0470918866;
  }
  double v8 = 0.0250244379;
  BOOL v9 = (v5 & 0xF000FFFE) == 0x30000012 || (v5 & 0xF000FFFE) == 805306388;
  if (!v9 && (v5 & 0xF0FFFFFE) != 0x30000010)
  {
    double v8 = 0.0250244379;
    if ((v5 & 0xF0FFFFFE) != 0x30FF0010) {
      double v8 = 0.0;
    }
  }
  return v7 + v8;
}

float BlueFin::GlMeBbHwInterSysBias::GetBias(BlueFin::GlMeBbHwInterSysBias *this, const BlueFin::GlSignalId *a2)
{
  switch(BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a2])
  {
    case 0:
      switch(*((_DWORD *)a2 + 1))
      {
        case 0:
        case 3:
          return *(float *)this;
        case 1:
          goto LABEL_6;
        case 2:
          goto LABEL_17;
        default:
          DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 156, "GetBias", (char)"0");
          int v4 = 156;
          goto LABEL_30;
      }
    case 1:
      if (!*((_DWORD *)a2 + 1))
      {
        this = (BlueFin::GlMeBbHwInterSysBias *)((char *)this + 4);
        return *(float *)this;
      }
      DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 166, "GetBias", (char)"0");
      int v4 = 166;
      goto LABEL_30;
    case 2:
      if (*((_DWORD *)a2 + 1))
      {
        DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 176, "GetBias", (char)"0");
        int v4 = 176;
LABEL_30:
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_receiver_parameters.cpp", v4, "0");
      }
      this = (BlueFin::GlMeBbHwInterSysBias *)((char *)this + 8);
      return *(float *)this;
    case 3:
      switch(*((_DWORD *)a2 + 1))
      {
        case 0:
        case 3:
          return *(float *)this;
        case 1:
LABEL_6:
          this = (BlueFin::GlMeBbHwInterSysBias *)((char *)this + 20);
          return *(float *)this;
        case 2:
LABEL_17:
          this = (BlueFin::GlMeBbHwInterSysBias *)((char *)this + 32);
          return *(float *)this;
        default:
          DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 191, "GetBias", (char)"0");
          int v4 = 191;
          goto LABEL_30;
      }
    case 4:
      switch(*((_DWORD *)a2 + 1))
      {
        case 0:
          this = (BlueFin::GlMeBbHwInterSysBias *)((char *)this + 12);
          return *(float *)this;
        case 1:
        case 3:
          return *(float *)this;
        case 2:
          this = (BlueFin::GlMeBbHwInterSysBias *)((char *)this + 36);
          return *(float *)this;
        default:
          DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 207, "GetBias", (char)"0");
          int v4 = 207;
          goto LABEL_30;
      }
    case 5:
      int v2 = *((_DWORD *)a2 + 1);
      switch(v2)
      {
        case 2:
          this = (BlueFin::GlMeBbHwInterSysBias *)((char *)this + 40);
          return *(float *)this;
        case 1:
          this = (BlueFin::GlMeBbHwInterSysBias *)((char *)this + 28);
          return *(float *)this;
        case 0:
          this = (BlueFin::GlMeBbHwInterSysBias *)((char *)this + 16);
          return *(float *)this;
      }
      DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 221, "GetBias", (char)"0");
      int v4 = 221;
      goto LABEL_30;
    case 6:
      if (!*((_DWORD *)a2 + 1))
      {
        this = (BlueFin::GlMeBbHwInterSysBias *)((char *)this + 44);
        return *(float *)this;
      }
      DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 231, "GetBias", (char)"0");
      int v4 = 231;
      goto LABEL_30;
    default:
      DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 236, "GetBias", (char)"0");
      int v4 = 236;
      goto LABEL_30;
  }
}

float BlueFin::GlMeSrdAsicUnitConverter::EswCarrierStructToFinalCarrFreqInHz(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  if (*(_DWORD *)(a1 + 4) == 1)
  {
    uint64_t v3 = 0;
    LOBYTE(v4) = 4;
    do
    {
      if (*(unsigned __int8 *)(a1 + 9 + v3) != 0xFF) {
        LOBYTE(v4) = v3;
      }
      ++v3;
    }
    while (v3 != 5);
    uint64_t v4 = v4;
  }
  else
  {
    uint64_t v4 = 4;
  }
  return BlueFin::GlMeSrdAsicUnitConverter::EswCarrierNcoIncToCarrFreqInHz((BlueFin::GlMeSrdAsicUnitConverter *)*(unsigned int *)(a2 + 4 * v4 + 8), a3, (const BlueFin::GlSignalId *)a3);
}

double BlueFin::GlMeSrdAsicUnitConverter::EswUtStructToFinalUserTimeMs(unsigned __int16 *a1, unsigned __int8 *a2, int a3)
{
  unsigned int Lms16ToLms32 = BlueFin::GlMeSrdAsicUnitConverter::GetLms16ToLms32((BlueFin::GlMeSrdAsicUnitConverter *)*a1, a3);
  if (*((unsigned __int16 *)a2 + 4) >= 0x23Fu)
  {
    float v13 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 806, "GetChipsPerSec", (char)"IsValid()");
    double v14 = "glsignalid.h";
    int v15 = 806;
    goto LABEL_11;
  }
  uint64_t v6 = BlueFin::GlSvId::s_aucSvId2gnss[*a2];
  uint64_t v7 = *((int *)a2 + 1);
  int v8 = BlueFin::GlSignalId::s_aulSignalIndexAndGnss2chipsPerEpoch[7 * (int)v7 + v6];
  unsigned int v9 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v7 - v7 + v6];
  if (v8) {
    BOOL v10 = v9 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    float v13 = "ulChipsPerEpoch != 0 && ulMsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 814, "GetChipsPerSec", (char)"ulChipsPerEpoch != 0 && ulMsPerEpoch != 0");
    double v14 = "glsignalid.h";
    int v15 = 814;
    goto LABEL_11;
  }
  unsigned int v11 = 1000 * v8 / v9 * BlueFin::GlMeSrdAsicUnitConverter::ucSubChipResolution;
  if (!v11)
  {
    float v13 = "ulTwentiethPerS != 0";
    DeviceFaultNotify("glmesrd_asic_unit_converter.cpp", 341, "EswUtStructToFinalUserTimeMs", (char)"ulTwentiethPerS != 0");
    double v14 = "glmesrd_asic_unit_converter.cpp";
    int v15 = 341;
LABEL_11:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v14, v15, v13);
  }
  return (double)(1000 * a1[1]) / (double)v11 + (double)Lms16ToLms32;
}

uint64_t BlueFin::GlMeSrdSatRptSearchMsmtMI::GetFftPhaseFromCvecSampleIdx(BlueFin::GlMeSrdSatRptSearchMsmtMI *this, char a2, char a3, unsigned int a4)
{
  if (((a2 + (_BYTE)this - a3 + 4 * (_BYTE)a4) & 0x80) != 0)
  {
    DeviceFaultNotify("glmesrd_sat_report_srch_msmt.cpp", 214, "GetFftPhaseFromCvecSampleIdx", (char)"k >= 0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_report_srch_msmt.cpp", 214, "k >= 0");
  }
  return (a2 + (_BYTE)this - a3 + 4 * a4) % a4;
}

double BlueFin::GlMeSrdAsicUnitConverter::Esw16thOr20thChipsToSecs(BlueFin::GlMeSrdAsicUnitConverter *this, unsigned __int8 *a2, const BlueFin::GlSignalId *a3, double a4, double a5, double a6)
{
  if (*((unsigned __int16 *)a2 + 4) >= 0x23Fu)
  {
    int v12 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 806, "GetChipsPerSec", (char)"IsValid()");
    int v13 = 806;
    goto LABEL_9;
  }
  uint64_t v6 = BlueFin::GlSvId::s_aucSvId2gnss[*a2];
  uint64_t v7 = *((int *)a2 + 1);
  int v8 = BlueFin::GlSignalId::s_aulSignalIndexAndGnss2chipsPerEpoch[7 * (int)v7 + v6];
  unsigned int v9 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v7 - v7 + v6];
  if (v8) {
    BOOL v10 = v9 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    int v12 = "ulChipsPerEpoch != 0 && ulMsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 814, "GetChipsPerSec", (char)"ulChipsPerEpoch != 0 && ulMsPerEpoch != 0");
    int v13 = 814;
LABEL_9:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v13, v12);
  }
  LOBYTE(a6) = BlueFin::GlMeSrdAsicUnitConverter::ucSubChipResolution;
  return (double)(int)this / (double)*(unint64_t *)&a6 / (double)(1000 * v8 / v9);
}

float BlueFin::GlMeSrdAsicUnitConverter::EswFllOrPllPhiDotToHz(BlueFin::GlMeSrdAsicUnitConverter *this, float a2)
{
  if (a2 == 0.0)
  {
    DeviceFaultNotify("glmesrd_asic_unit_converter.cpp", 551, "EswFllOrPllPhiDotToHz", (char)"fAcqCohIntInSec != 0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_unit_converter.cpp", 551, "fAcqCohIntInSec != 0");
  }
  return (double)(int)this * 0.0000000298023224 / a2;
}

uint64_t BlueFin::GlMeSrdSatRptTrkMsmtMI::IsBeidouPrebitWithHssSec(BlueFin::GlMeSrdSatRptTrkMsmtMI *this)
{
  if (*(unsigned char *)(*(void *)this + 105) != 6 || (*(unsigned char *)(*(void *)this + 24) & 0xF) != 0) {
    return 0;
  }
  uint64_t v3 = (BlueFin::GlUtils *)(*(uint64_t (**)(void))(**((void **)this + 6) + 256))(*((void *)this + 6));
  if (v3) {
    return 1;
  }
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)BlueFin::GlUtils::GetAsicConfigIfc(v3) + 264);

  return v4();
}

float BlueFin::GlMeSrdAsicUnitConverter::EswFllOrPllPhi2DotToHzPerSec(BlueFin::GlMeSrdAsicUnitConverter *this, float a2)
{
  if (a2 == 0.0)
  {
    DeviceFaultNotify("glmesrd_asic_unit_converter.cpp", 564, "EswFllOrPllPhi2DotToHzPerSec", (char)"fAcqCohIntInSec != 0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_unit_converter.cpp", 564, "fAcqCohIntInSec != 0");
  }
  return (double)((int)this >> 12) * 0.0000000298023224 / (float)(a2 * a2);
}

void BlueFin::GlMeSrdCtrlSm::UpdateLteFilter(BlueFin::GlMeSrdCtrlSm *this)
{
  if ((*(unsigned int (**)(void))(**((void **)this + 17) + 256))(*((void *)this + 17)))
  {
    int v2 = (*(uint64_t (**)(void))(**((void **)this + 17) + 1080))(*((void *)this + 17));
    int v3 = (*(uint64_t (**)(void))(**((void **)this + 17) + 1032))();
    uint64_t v4 = (_DWORD *)*((void *)this + 17);
    if (v4[90] == 5)
    {
      BOOL v5 = BlueFin::GlMeSrdMeasTimingMgr::GetReportingLms((BlueFin::GlMeSrdCtrlSm *)((char *)this + 3072)) < 0x7D1;
      uint64_t v4 = (_DWORD *)*((void *)this + 17);
    }
    else
    {
      BOOL v5 = 1;
    }
    double v6 = (*(double (**)(_DWORD *, void))(*(void *)v4 + 1264))(v4, 0);
    BOOL v7 = 0;
    int v8 = v6 > 0.0 || v5;
    if (v2 == 1) {
      int v9 = -1;
    }
    else {
      int v9 = v2;
    }
    if (v9 == 2) {
      int v9 = -2;
    }
    if (!v8) {
      int v2 = v9;
    }
    if (v2 == *((_DWORD *)this + 57)) {
      BOOL v7 = *((unsigned __int8 *)this + 224) == v3;
    }
    BOOL v10 = (v2 + 2) > 4 || v2 == 0;
    if (!v10 && !v7)
    {
      uint64_t v11 = *((void *)this + 15);
      if (!v11) {
        uint64_t v11 = *((void *)this + 14);
      }
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 80))(v11);
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      char v19 = 0;
      __int16 v20 = 1;
      uint64_t v21 = v12;
      int v22 = 0;
      __int16 v23 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, 1);
      BlueFin::GlMeSrdAsicinit::BypassLteFilter((uint64_t)this + 1760, (BlueFin::GlMeSrdTransaction *)&v17, v3, v2);
      *((unsigned char *)this + 224) = v3;
      *((_DWORD *)this + 57) = v2;
      BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v17);
    }
  }
  if ((*(unsigned int (**)(void))(**((void **)this + 17) + 264))(*((void *)this + 17)))
  {
    int v13 = (*(uint64_t (**)(void))(**((void **)this + 17) + 1080))(*((void *)this + 17));
    int v14 = (*(uint64_t (**)(void))(**((void **)this + 17) + 1032))();
    if (*((unsigned __int8 *)this + 224) != v14 || v13 != *((_DWORD *)this + 57))
    {
      uint64_t v15 = *((void *)this + 15);
      if (!v15) {
        uint64_t v15 = *((void *)this + 14);
      }
      uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 80))(v15);
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      char v19 = 0;
      __int16 v20 = 1;
      uint64_t v21 = v16;
      int v22 = 0;
      __int16 v23 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, 1);
      BlueFin::GlMeSrdAsicinit::BypassLteFilter((uint64_t)this + 1760, (BlueFin::GlMeSrdTransaction *)&v17, v14, v13);
      *((unsigned char *)this + 224) = v14;
      *((_DWORD *)this + 57) = v13;
      BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v17);
    }
  }
}

void sub_26396E11C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlMeSrdAsicInitCallback::OnAsicStarted(BlueFin::GlMeSrdAsicInitCallback *this, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, double a6)
{
  uint64_t v12 = (BlueFin::GlMeSrdCtrlSm *)*((void *)this + 1);
  *((unsigned char *)v12 + 219) = 1;
  BlueFin::GlMeSrdCtrlSm::ReportSupportedFeatures(v12);
  __int16 v41 = 35;
  uint64_t v13 = *((void *)this + 1);
  uint64_t v14 = *(void *)(v13 + 32);
  unint64_t v15 = *(void *)(v13 + 8);
  *(void *)(v13 + 32) = v15;
  do
  {
    *(void *)&long long v39 = 0;
    if (BlueFin::patch_dispatch(v15, v13, (unsigned __int8 *)&v41, &v39)) {
      unint64_t v15 = v39;
    }
    else {
      unint64_t v15 = (*(uint64_t (**)(uint64_t, __int16 *))(v13 + 32))(v13, &v41);
    }
    *(void *)(v13 + 32) = v15;
  }
  while (v15);
  *(void *)(v13 + 32) = v14;
  (*(void (**)(void, uint64_t, uint64_t, unsigned int *, uint64_t, double))(**(void **)(*((void *)this + 1)
                                                                                                  + 160)
                                                                                    + 80))(*(void *)(*((void *)this + 1) + 160), a2, a3, a4, a5, a6);
  (*(void (**)(void))(**(void **)(*((void *)this + 1) + 128) + 64))(*(void *)(*((void *)this + 1) + 128));
  int v16 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 1) + 136) + 184))(*(void *)(*((void *)this + 1) + 136));
  unsigned int v17 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 1) + 136) + 912))();
  uint64_t v18 = *((void *)this + 1);
  uint64_t v19 = *(void *)(v18 + 136);
  long long v39 = *(_OWORD *)(v19 + 2220);
  int v40 = *(_DWORD *)(v19 + 2236);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(v18 + 160) + 368))();
  if ((v17 & 0xFFFFFFFE) == 0x20)
  {
    uint64_t v33 = "(GL_RF_47520_BRCM_EXT_LNA != eRfType) && (GL_RF_47520_BRCM != eRfType)";
    DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 881, "OnAsicStarted", (char)"(GL_RF_47520_BRCM_EXT_LNA != eRfType) && (GL_RF_47520_BRCM != eRfType)");
    int v34 = 881;
    goto LABEL_69;
  }
  int v21 = 1;
  if (v16 > 872480774)
  {
    BOOL v22 = v16 == 872480775 || v16 == 872611847;
    int v23 = 889126919;
  }
  else
  {
    BOOL v22 = v16 == 805371910 || v16 == 805502982;
    int v23 = 822018054;
  }
  if (!v22 && v16 != v23) {
    int v21 = 0;
  }
  if (v16 > 939720710)
  {
    if ((v16 - 1006829576) >= 2 && v16 != 956235783 && v16 != 939720711)
    {
LABEL_43:
      unsigned int v27 = v16 & 0xF000FFFE;
      BOOL v28 = v17 == 39;
      BOOL v29 = v17 - 39 < 0xFFFFFFFE;
      unsigned int v30 = v16 & 0xF100FFFE;
      BOOL v31 = v17 == 40;
      if (!v21)
      {
        if (v17 <= 0x1E && ((1 << v17) & 0x76000000) != 0)
        {
          uint64_t v33 = "!(b4753RF || b47531RF)";
          DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 934, "OnAsicStarted", (char)"!(b4753RF || b47531RF)");
          int v34 = 934;
          goto LABEL_69;
        }
        goto LABEL_53;
      }
LABEL_31:
      if (v17 - 25 >= 2 && v17 != 28)
      {
        uint64_t v33 = "b4753RF";
        DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 926, "OnAsicStarted", (char)"b4753RF");
        int v34 = 926;
        goto LABEL_69;
      }
      goto LABEL_53;
    }
  }
  else if ((v16 - 805371912) >= 2 && (v16 - 805502984) >= 2 && v16 != 939589639)
  {
    goto LABEL_43;
  }
  unsigned int v27 = v16 & 0xF000FFFE;
  BOOL v28 = v17 == 39;
  BOOL v29 = v17 - 39 < 0xFFFFFFFE;
  unsigned int v30 = v16 & 0xF100FFFE;
  BOOL v31 = v17 == 40;
  if (v21) {
    goto LABEL_31;
  }
  if (v17 > 0x1E || ((1 << v17) & 0x76000000) == 0)
  {
    uint64_t v33 = "b4753RF || b47531RF";
    DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 930, "OnAsicStarted", (char)"b4753RF || b47531RF");
    int v34 = 930;
    goto LABEL_69;
  }
LABEL_53:
  if (v27 == 805306384)
  {
    if (v29)
    {
      uint64_t v33 = "b4776RF";
      DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 944, "OnAsicStarted", (char)"b4776RF");
      int v34 = 944;
      goto LABEL_69;
    }
  }
  else if (v27 == 805306382 && v17 != 34 && v17 != 36)
  {
    uint64_t v33 = "b4755RF";
    DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 939, "OnAsicStarted", (char)"b4755RF");
    int v34 = 939;
    goto LABEL_69;
  }
  if (v30 != 805306386)
  {
    if (v30 != 822083604)
    {
      if (v30 != 805306388) {
        return result;
      }
      goto LABEL_62;
    }
    if (v31) {
      return result;
    }
    uint64_t v33 = "bFMNWRF";
    DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 954, "OnAsicStarted", (char)"bFMNWRF");
    int v34 = 954;
LABEL_69:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_ctrl_sm.cpp", v34, v33);
  }
LABEL_62:
  if (!v28)
  {
    uint64_t v33 = "bMNWRF";
    DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 949, "OnAsicStarted", (char)"bMNWRF");
    int v34 = 949;
    goto LABEL_69;
  }
  return result;
}

unint64_t BlueFin::GlMeSrdEvtListener::OnHeartbeat(BlueFin::GlMeSrdEvtListener *this)
{
  __int16 v4 = 15;
  uint64_t v1 = *((void *)this + 1);
  uint64_t v2 = *(void *)(v1 + 32);
  unint64_t result = *(void *)(v1 + 8);
  *(void *)(v1 + 32) = result;
  do
  {
    unint64_t v5 = 0;
    if (BlueFin::patch_dispatch(result, v1, (unsigned __int8 *)&v4, &v5)) {
      unint64_t result = v5;
    }
    else {
      unint64_t result = (*(uint64_t (**)(uint64_t, __int16 *))(v1 + 32))(v1, &v4);
    }
    *(void *)(v1 + 32) = result;
  }
  while (result);
  *(void *)(v1 + 32) = v2;
  return result;
}

uint64_t (*(*BlueFin::GlMeSrdCtrlSm::wait4init(BlueFin::GlMeSrdCtrlSm *this, unsigned char *a2))(uint64_t a1, unsigned __int8 *a2))()
{
  v12[2] = *MEMORY[0x263EF8340];
  unsigned int v3 = *a2;
  unint64_t result = BlueFin::GlMeSrdCtrlSm::my_top;
  if (v3 <= 0xE)
  {
    if (v3 == 2)
    {
      uint64_t v8 = *((void *)this + 15);
      if (!v8) {
        uint64_t v8 = *((void *)this + 14);
      }
      (*(void (**)(uint64_t, char *))(*(void *)v8 + 120))(v8, (char *)this + 3856);
      *((unsigned char *)this + 224) = (*(uint64_t (**)(void))(**((void **)this + 17) + 1032))();
      *((_DWORD *)this + 57) = (*(uint64_t (**)(void))(**((void **)this + 17) + 1080))();
      *((void *)this + 211) = this;
      BlueFin::GlTimer::arm((BlueFin::GlMeSrdCtrlSm *)((char *)this + 1656), 5, 0, 0x2710u);
      *((unsigned char *)this + 1680) = 1;
      int v9 = (BlueFin::GlMeSrdCtrlSm *)((char *)this + 1760);
      if (*((unsigned char *)this + 220)) {
        BlueFin::GlMeSrdAsicinit::LoadAsicEswFw(v9);
      }
      else {
        BlueFin::GlMeSrdAsicinit::InitializeAsic(v9);
      }
      return 0;
    }
    if (v3 == 3)
    {
      uint64_t v10 = *((void *)this + 25);
      long long v11 = *(_OWORD *)((char *)this + 2504);
      *(void *)(v10 + 920) = *((void *)this + 315);
      *(_OWORD *)(v10 + 904) = v11;
      BlueFin::GlTimer::disarm((uint64_t)this + 1656);
      return 0;
    }
    if (v3 != 5) {
      return result;
    }
    unint64_t v5 = "&GlMeSrdCtrlSm::com_breakdown";
    double v6 = (uint64_t (*)())BlueFin::GlMeSrdCtrlSm::com_breakdown;
  }
  else
  {
    switch(*a2)
    {
      case 0xF:
        BlueFin::GlMeSrdAsicinit::OnHeartbeat((BlueFin::GlMeSrdCtrlSm *)((char *)this + 1760));
        return 0;
      case 0x10:
        BlueFin::GlMeSrdAsicinit::OnSubHeartbeat((BlueFin::GlMeSrdCtrlSm *)((char *)this + 1760));
        return 0;
      case 0x11:
      case 0x12:
      case 0x14:
      case 0x16:
      case 0x18:
      case 0x1A:
        return result;
      case 0x13:
        BlueFin::GlMeSrdAsicinit::OnRtcCapture((BlueFin::GlMeSrdCtrlSm *)((char *)this + 1760));
        return 0;
      case 0x15:
        BlueFin::GlMeSrdAsicinit::StopInit((BlueFin::GlMeSrdCtrlSm *)((char *)this + 1760));
        *((unsigned char *)this + 219) = 1;
        BlueFin::GlMeSrdCtrlSm::ReportSupportedFeatures(this);
        uint64_t v7 = *((unsigned int *)this + 886);
        v12[0] = 0;
        v12[1] = 0;
        (*(void (**)(void, uint64_t, void, void *, void, double))(**((void **)this + 20) + 80))(*((void *)this + 20), v7, 0, v12, 0, 0.0);
        unint64_t v5 = "&GlMeSrdCtrlSm::wait4memdump";
        double v6 = (uint64_t (*)())BlueFin::GlMeSrdCtrlSm::wait4memdump;
        break;
      case 0x17:
        BlueFin::GlMeSrdCtrlSm::GotRadioReport(this);
        return 0;
      case 0x19:
      case 0x1B:
        unint64_t result = 0;
        *((unsigned char *)this + 221) = 1;
        return result;
      default:
        if (v3 != 35) {
          return result;
        }
        unint64_t v5 = "&GlMeSrdCtrlSm::wait4loading";
        double v6 = (uint64_t (*)())BlueFin::GlMeSrdCtrlSm::wait4loading;
        break;
    }
  }
  BlueFin::QHsm::tran(this, v6, (uint64_t)v5);
  return 0;
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetLteFilterSetting(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned int *)this + 133);
}

uint64_t BlueFin::GlMeSrdTransactionManager::RegisterEvents(uint64_t result, uint64_t a2)
{
  if (!a2 || *(void *)(result + 17056))
  {
    DeviceFaultNotify("glmesrd_transaction_handler.cpp", 258, "RegisterEvents", (char)"m_pEventsIf == nullptr && pEventsIf != nullptr");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_handler.cpp", 258, "m_pEventsIf == nullptr && pEventsIf != nullptr");
  }
  *(void *)(result + 17056) = a2;
  return result;
}

unint64_t BlueFin::GlMeSrdAsicinit::InitializeAsic(BlueFin::GlMeSrdAsicinit *this)
{
  __int16 v4 = 24;
  uint64_t v2 = *((void *)this + 4);
  unint64_t result = *((void *)this + 1);
  *((void *)this + 4) = result;
  do
  {
    unint64_t v5 = 0;
    if (BlueFin::patch_dispatch(result, (uint64_t)this, (unsigned __int8 *)&v4, &v5)) {
      unint64_t result = v5;
    }
    else {
      unint64_t result = (*((uint64_t (**)(BlueFin::GlMeSrdAsicinit *, __int16 *))this + 4))(this, &v4);
    }
    *((void *)this + 4) = result;
  }
  while (result);
  *((void *)this + 4) = v2;
  return result;
}

uint64_t BlueFin::GlDbgPeIf::OnSerialNumber(BlueFin::GlDbgPeIf *this, uint64_t a2, unsigned int *a3)
{
  return (*(uint64_t (**)(void, uint64_t, unsigned int *))(**((void **)this + 2) + 368))(*((void *)this + 2), a2, a3);
}

BlueFin::GlDbgCodec *BlueFin::GlDbgPeIf::AsicStarted(BlueFin::GlDbgPeIf *this, uint64_t a2, BOOL a3, unsigned int *a4, BOOL a5, double a6)
{
  int v21 = a2;
  BOOL v20 = a3;
  BOOL v19 = a5;
  double v18 = a6;
  unint64_t result = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (!*((void *)result + 101))
  {
    BlueFin::GlDbgCodec::WriteStart(result, 4610);
    uint64_t v13 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v13 + 120))(v13)) {
      BlueFin::GlDbgCodec::Write(v13, (unsigned int *)&v21);
    }
    uint64_t v14 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v14 + 120))(v14)) {
      BlueFin::GlDbgCodec::Write(v14, &v20);
    }
    unsigned int v17 = 4;
    BlueFin::GlDbgCodec::WriteArray(*((BlueFin::GlDbgCodec **)this + 1), a4, &v17);
    unint64_t v15 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v15 + 120))(v15)) {
      BlueFin::GlDbgCodec::Write(v15, &v19);
    }
    int v16 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v16 + 120))(v16)) {
      BlueFin::GlDbgCodec::Write(v16, &v18);
    }
    (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
    (*(void (**)(void, uint64_t, BOOL, unsigned int *, BOOL, double))(**((void **)this + 2) + 80))(*((void *)this + 2), a2, a3, a4, a5, a6);
    BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 4610);
    return (BlueFin::GlDbgCodec *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  }
  return result;
}

#error "26396F31C: call analysis failed (funcsize=381)"

uint64_t BlueFin::GlPeStartupMgr::update(BlueFin::GlPeStartupMgr *this)
{
  char v1 = *((unsigned char *)this + 25);
  if (!*((unsigned char *)this + 24))
  {
    uint64_t v4 = 84;
    uint64_t v5 = 70;
    if (*((unsigned char *)this + 26)) {
      uint64_t v3 = 84;
    }
    else {
      uint64_t v3 = 70;
    }
    *((_DWORD *)this + 9) = 0;
    double v6 = "Cold";
    if (v1) {
      goto LABEL_30;
    }
LABEL_29:
    uint64_t v4 = 70;
    goto LABEL_30;
  }
  if (!*((unsigned char *)this + 25))
  {
    if (*((unsigned char *)this + 26))
    {
      BOOL v7 = *((unsigned char *)this + 27) || *((unsigned char *)this + 30) || *((unsigned char *)this + 31) || *((unsigned char *)this + 28);
      uint64_t v3 = 84;
    }
    else
    {
      BOOL v7 = 0;
      uint64_t v3 = 70;
    }
    *((_DWORD *)this + 9) = v7;
    double v6 = BlueFin::GlPeStartupMgr::update(void)::acStartTypeImage[v7];
    uint64_t v5 = 84;
    goto LABEL_29;
  }
  if (*((unsigned char *)this + 26))
  {
    if (*((unsigned char *)this + 27) || *((unsigned char *)this + 28) && *((unsigned char *)this + 29))
    {
      int v2 = 3;
    }
    else
    {
      int v2 = 1;
      if (!*((unsigned char *)this + 30))
      {
        if (*((unsigned __int8 *)this + 31) | *((unsigned __int8 *)this + 28)) {
          int v2 = 1;
        }
        else {
          int v2 = 2;
        }
      }
    }
    uint64_t v3 = 84;
  }
  else
  {
    int v2 = 0;
    uint64_t v3 = 70;
  }
  *((_DWORD *)this + 9) = v2;
  double v6 = BlueFin::GlPeStartupMgr::update(void)::acStartTypeImage[v2];
  uint64_t v5 = 84;
  uint64_t v4 = 84;
LABEL_30:
  if (*((unsigned char *)this + 28)) {
    uint64_t v8 = 84;
  }
  else {
    uint64_t v8 = 70;
  }
  if (*((unsigned char *)this + 31)) {
    uint64_t v9 = 84;
  }
  else {
    uint64_t v9 = 70;
  }
  if (*((unsigned char *)this + 30)) {
    uint64_t v10 = 84;
  }
  else {
    uint64_t v10 = 70;
  }
  if (*((unsigned char *)this + 27)) {
    uint64_t v11 = 84;
  }
  else {
    uint64_t v11 = 70;
  }
  return GlCustomLog(12, "    GLL_Startup Type: %s,Tim[%c],Osc[%c],Pos[%c],Eph[%c],Cbee[%c],Lto[%c],AEph[%c]\n", v6, v5, v4, v3, v11, v10, v9, v8);
}

uint64_t BlueFin::GlPeStartupMgr::checkAll(BlueFin::GlPeStartupMgr *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  *((unsigned char *)this + 24) = BlueFin::GlPeStartupMgr::checkTime(this);
  *((unsigned char *)this + 25) = BlueFin::GlPeStartupMgr::checkOsc(this);
  int v41 = *(_DWORD *)(*(void *)this + 100);
  if (*((_DWORD *)this + 12) == -7200001 && v41 != -1) {
    *((_DWORD *)this + 12) = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092) - *((_DWORD *)this + 10);
  }
  *((unsigned char *)this + 26) = v41 != -1;

  return BlueFin::GlPeStartupMgr::checkAllEph(this, (BOOL *)this + 27, (BOOL *)this + 28, (BOOL *)this + 31, v37, v38, v39, v40, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36);
}

uint64_t BlueFin::GlPeStartupMgr::checkTime(BlueFin::GlPeStartupMgr *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (!*(_DWORD *)(v1 + 2576)) {
    return 0;
  }
  unsigned int v3 = BlueFin::GlPeTimeMgrUtil::precUsToUlong(this, *(double *)(v1 + 2632));
  if (v3 >= 0x3938700)
  {
    GlCustomLog(14, "GLL_Startup timeUnc %u\n", v3);
    return 0;
  }
  if (*((_DWORD *)this + 13) == -7200001) {
    *((_DWORD *)this + 13) = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092) - *((_DWORD *)this + 10);
  }
  return 1;
}

uint64_t BlueFin::GlPeStartupMgr::checkOsc(BlueFin::GlPeStartupMgr *this)
{
  uint64_t v1 = *((void *)this + 2);
  int v2 = *(__int16 *)(v1 + 10);
  if (BlueFin::GlUtils::m_ucEnabled) {
    BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
  }
  if (*(_DWORD *)(v1 + 40) != -7200001)
  {
    if ((double)v2 * 0.000000001 < 0.00000599999976) {
      return 1;
    }
    GlCustomLog(14, "GLL_Startup oscUnc %f\n", (double)v2 * 0.000000001);
  }
  return 0;
}

uint64_t BlueFin::GlPeStartupMgr::checkAllEph(BlueFin::GlPeStartupMgr *this, BOOL *a2, BOOL *a3, BOOL *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  uint64_t v40 = 0;
  int v41 = 0;
  a36 = *MEMORY[0x263EF8340];
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  uint64_t v42 = *(void *)this;
  uint64_t v43 = *(void *)(*(void *)this + 120200);
  do
  {
    v41 += BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(v43 + v40));
    v40 += 24;
  }
  while (v40 != 168);
  if (v41 >= 4u) {
    *a2 = 1;
  }
  BlueFin::GlGnssSet::operator|(v42 + 120224, v42 + 120608, (uint64_t)&a9);
  uint64_t v44 = 0;
  int v45 = 0;
  uint64_t v46 = a30;
  do
  {
    v45 += BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(v46 + v44));
    v44 += 24;
  }
  while (v44 != 168);
  if (v45 >= 4u)
  {
    unsigned int v47 = 0;
    int v48 = 0;
    *a3 = 1;
    do
    {
      Mgr = BlueFin::GlPeGnssEphemerisMgr::GetMgr((void *)(*(void *)this + 384), v47);
      if (Mgr)
      {
        char v50 = Mgr;
        uint64_t v51 = BlueFin::GlGnssSet::operator()((uint64_t)&a9, v47);
        unsigned __int8 v57 = *(unsigned char *)(v51 + 8);
        memcpy(&v61, *(const void **)v51, 4 * v57);
        __int16 v59 = 0;
        unsigned __int8 v58 = 0;
        int v60 = v61;
        while (1)
        {
          BlueFin::GlSetIterator::operator++(&v57);
          if (v58 == v57) {
            break;
          }
          char v56 = v59;
          v48 += (*(uint64_t (**)(void *, char *))(*v50 + 264))(v50, &v56);
        }
      }
      ++v47;
    }
    while (v47 != 7);
    if ((__int16)v48 > 3) {
      *((unsigned char *)this + 29) = 1;
    }
  }
  uint64_t v52 = 0;
  unsigned __int8 v53 = 0;
  uint64_t v54 = *(void *)(*(void *)this + 120584);
  do
  {
    uint64_t result = BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(v54 + v52));
    v53 += result;
    v52 += 24;
  }
  while (v52 != 168);
  if (v53 >= 4u) {
    *a4 = 1;
  }
  return result;
}

unint64_t BlueFin::GlPeEphemerisMgr::IsEphSourceNvmem(uint64_t a1, unsigned char *a2)
{
  return ((unint64_t)*(unsigned int *)(*(void *)(a1 + 408)
                                            + (((unint64_t)*a2 >> 3) & 0x1C)) >> (*a2 & 0x1F)) & 1;
}

uint64_t BlueFin::GlPosEng::SendNvMem2MicroNav(uint64_t this)
{
  if (*(void *)(this + 48))
  {
    uint64_t v1 = this;
    if (*(_DWORD *)(this + 324) != -1)
    {
      unint64_t v2 = *(void *)(this + 280);
      unint64_t v3 = *(void *)(this + 288);
      double v4 = (double)*(__int16 *)(this + 162);
      unint64_t v6 = *(void *)(this + 296);
      unint64_t v5 = *(void *)(this + 304);
      int v7 = *(__int16 *)(this + 170);
      if (BlueFin::GlUtils::m_ucEnabled) {
        BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
      }
      double v8 = (double)v7;
      double v9 = v4 * 0.000000001;
      if (*(_DWORD *)(v1 + 123792))
      {
        BlueFin::GlPeTimeManager::GetTime((BlueFin::GlPeTimeManager *)(v1 + 121216), 1, v26);
        unsigned int v27 = &off_270EBC600;
        uint64_t v28 = 0;
        BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v26, (BlueFin::GlGpsTime *)&v27);
        unint64_t v10 = ((unsigned int (*)(void))v27[4])(&v27) / 0x93A80uLL;
        unsigned int v11 = ((uint64_t (*)(void))v27[4])(&v27);
        LODWORD(v12) = v28;
        double v13 = ((double)v12 * 2.32830644e-10 + (double)(v11 % 0x93A80)) * 1000.0;
        double v14 = fmod(v13, 4294967300.0);
        if (v13 <= 4294967300.0) {
          double v14 = v13;
        }
        if (v14 < -4294967300.0) {
          double v14 = -fmod(-v14, 4294967300.0);
        }
        if (v14 < 0.0) {
          uint64_t v15 = --v14;
        }
        else {
          uint64_t v15 = v14;
        }
      }
      else
      {
        uint64_t v15 = 0;
        unint64_t v10 = 0;
      }
      double v16 = v8 * 0.000000001;
      uint64_t v17 = *(void *)(v1 + 48);
      double v18 = fmod(v9 * 1000000000.0, 4294967300.0);
      if (v9 * 1000000000.0 <= 4294967300.0) {
        double v18 = v9 * 1000000000.0;
      }
      if (v18 < -4294967300.0) {
        double v18 = -fmod(-v18, 4294967300.0);
      }
      if (v18 < 0.0) {
        unsigned int v19 = --v18;
      }
      else {
        LOWORD(v19) = v18;
      }
      v20.n128_f64[0] = fmod(v16 * 1000000000.0, 4294967300.0);
      if (v16 * 1000000000.0 <= 4294967300.0) {
        double v24 = v16 * 1000000000.0;
      }
      else {
        double v24 = v20.n128_f64[0];
      }
      if (v24 < -4294967300.0) {
        double v24 = -fmod(-v24, 4294967300.0);
      }
      v20.n128_u64[0] = v2;
      v21.n128_u64[0] = v3;
      v23.n128_u64[0] = v5;
      v22.n128_u64[0] = v6;
      if (v24 < 0.0) {
        unsigned int v25 = --v24;
      }
      else {
        unsigned int v25 = v24;
      }
      return (*(uint64_t (**)(uint64_t, void, void, unint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(void *)v17 + 40))(v17, (__int16)v19, (__int16)v25, v10, v15, v20, v21, v22, v23);
    }
  }
  return this;
}

uint64_t BlueFin::GlPosEng::OnSerialNumber(uint64_t this, uint64_t a2, unsigned int *a3)
{
  uint64_t v3 = *(void *)(this + 32);
  double v4 = *(uint64_t (**)(void, uint64_t, unsigned int *))(v3 + 280);
  if (v4) {
    return v4(*(void *)(v3 + 8), a2, a3);
  }
  return this;
}

#error "26396FD50: call analysis failed (funcsize=148)"

BlueFin::GlPeTimeManagerData *BlueFin::GlPeTimeManager::AsicStarted(BlueFin::GlPeTimeManager *this, unsigned int a2, int a3, double a4, int a5, int a6)
{
  GlCustomLog(14, "GlPeTimeManager::AsicStarted(%u):", a2);
  GlCustomLog(14, "  SleepTime(sec):");
  if (a3)
  {
    *((double *)this + 319) = a4 - (double)a2;
    GlCustomLog(14, "%.3lf");
  }
  else
  {
    *((void *)this + 319) = 0;
    GlCustomLog(14, "<unknown>");
  }
  GlCustomLog(14, "  UnitId:");
  if (a5)
  {
    GlCustomLog(14, "%02x", a6);
    *((unsigned char *)this + 2566) = a6;
    char v12 = 1;
  }
  else
  {
    GlCustomLog(14, "<unknown>");
    char v12 = 0;
  }
  *((unsigned char *)this + 2565) = v12;
  GlCustomLog(14, "\n");
  BlueFin::GlPeTimeManager::SetCurrentAsicLms(this, a2);
  *((unsigned char *)this + 2560) = 1;
  uint64_t result = BlueFin::GlPeTimeManagerData::GlPeTimeManagerData((BlueFin::GlPeTimeManagerData *)&v14);
  v15 |= 8u;
  uint64_t v16 = *((void *)this + 319);
  if (BlueFin::GlUtils::m_pInstance)
  {
    if (*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
      return (BlueFin::GlPeTimeManagerData *)(*(uint64_t (**)(uint64_t *, void, void))(v14 + 24))(&v14, 0, 0);
    }
  }
  return result;
}

uint64_t BlueFin::GlPeTimeManager::SetCurrentAsicLms(BlueFin::GlPeTimeManager *this, int a2)
{
  *((_DWORD *)this + 642) = a2;
  *((_DWORD *)this + 643) = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092);
  BlueFin::GlPeTimeManager::cacheGnssTime((uint64_t)this);
  BlueFin::GlPeTimeManager::handleSpecialTimeEvents(this);
  BlueFin::GlPeTimeManager::outputCurrentLmsAndSources(this);

  return BlueFin::GlPeTimeManager::outputCurrentTime(this);
}

uint64_t BlueFin::GlPeTimeManager::outputCurrentLmsAndSources(BlueFin::GlPeTimeManager *this)
{
  unsigned int v2 = *((_DWORD *)this + 642);
  if (v2 >= 0x3E8 && !*((unsigned char *)this + 2913))
  {
    if (BlueFin::GlUtils::m_ucEnabled)
    {
      BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0xE);
      unsigned int v2 = *((_DWORD *)this + 642);
    }
    GlCustomLog(14, "GlPeTimeManager::recoverFromSleep(%u): Could not recover.  Time not stored in prior session.\n", v2);
    *((unsigned char *)this + 2913) = 1;
    unsigned int v2 = *((_DWORD *)this + 642);
  }
  GlCustomLog(15, "GlPeTimeManager::SetCurrentAsicLms(%u)  TimeSources:{", v2);
  int v3 = *((_DWORD *)this + 686);
  if (*((_DWORD *)this + 644)) {
    v3 |= 1 << *((_DWORD *)this + 644);
  }
  if (v3)
  {
    v6[1] = v3;
    v6[2] = v3;
    v6[0] = 1;
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)v6);
    if (BYTE1(v6[0]) != LOBYTE(v6[0]))
    {
      double v4 = "%s";
      do
      {
        GlCustomLog(15, v4, BlueFin::GlPeTimeManager::m_acTimeSourceImage[SHIWORD(v6[0])]);
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)v6);
        double v4 = ", %s";
      }
      while (BYTE1(v6[0]) != LOBYTE(v6[0]));
    }
  }
  else
  {
    GlCustomLog(15, "%s", "<None>");
  }
  return GlCustomLog(15, "}  VerifySource:%s\n", BlueFin::GlPeTimeManager::m_acTimeSourceImage[*((unsigned int *)this + 645)]);
}

void BlueFin::GlPeTimeManager::handleSpecialTimeEvents(BlueFin::GlPeTimeManager *this)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  int v2 = *((_DWORD *)this + 855);
  if (!v2) {
    int v2 = -7200002;
  }
  unsigned int v3 = v2 - *((_DWORD *)this + 642);
  if (v3 <= 0x4E20)
  {
    if (v3 < 0x3E9)
    {
      GlCustomLog(10, "GlPeTimeManager::handleSpecialTimeEvents(%u):  Error - LMS Rollover has occurred.  Forcing hot-start.\n", *((_DWORD *)this + 642));
      *((unsigned char *)this + 2768) = 1;
    }
    else
    {
      GlCustomLog(10, "GlPeTimeManager::handleSpecialTimeEvents(%u):  Warning - LMS Rollover condition in %d seconds\n", *((_DWORD *)this + 642), (unsigned __int16)v3 / 0x3E8u);
    }
  }
  if (*((unsigned char *)this + 3388))
  {
    BlueFin::GlPeTimeManager::GetTime(this, 1, v39);
    *(void *)__s = &off_270EBC600;
    *(void *)&__s[8] = 0;
    BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v39, (BlueFin::GlGpsTime *)__s);
    unsigned int v4 = (*(uint64_t (**)(char *))(*(void *)__s + 32))(__s);
    LODWORD(v5) = *(_DWORD *)&__s[8];
    double v6 = (double)v5 * 2.32830644e-10 + (double)v4;
    double v7 = fmod(v6, 4294967300.0);
    if (v6 <= 4294967300.0) {
      double v7 = v6;
    }
    if (v7 < -4294967300.0) {
      double v7 = -fmod(-v7, 4294967300.0);
    }
    if (v7 < 0.0) {
      unsigned int v8 = --v7;
    }
    else {
      unsigned int v8 = v7;
    }
    *((_DWORD *)this + 848) = v8;
    if (v8 >= *((_DWORD *)this + 850) && v8 <= *((_DWORD *)this + 851))
    {
      int v46 = 0;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      *(_OWORD *)__s = 0u;
      long long v41 = 0u;
      if (!*((unsigned char *)this + 3412))
      {
        *((unsigned char *)this + 3412) = 1;
        *((_DWORD *)this + 852) |= 1u;
        if (BlueFin::GlUtils::m_ucEnabled)
        {
          if (BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0xE)) {
            BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)__s, (char *)0x64, "Start of blackout period", v23);
          }
        }
      }
      if (*((_DWORD *)this + 848) >= *((_DWORD *)this + 849) && !*((unsigned char *)this + 3413))
      {
        *((unsigned char *)this + 3413) = 1;
        *((_DWORD *)this + 852) |= 2u;
        if (BlueFin::GlUtils::m_ucEnabled)
        {
          if (BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0xE)) {
            BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)__s, (char *)0x64, "New quarter handled.", v29);
          }
        }
      }
      if (*((unsigned char *)this + 3413))
      {
        if (!*((unsigned char *)this + 3415))
        {
          int v24 = *((_DWORD *)this + 648);
          if (v24)
          {
            int v25 = *((_DWORD *)this + 646);
            if (v25 && (*((_DWORD *)this + 654) - 1) <= 1)
            {
              BlueFin::GlPeGnssTime::operator-=((unsigned int *)this + 652, (double)(char)(*((unsigned char *)this + 2596) - *((unsigned char *)this + 2588)));
              int v25 = *((_DWORD *)this + 646);
              int v24 = *((_DWORD *)this + 648);
            }
            *((_DWORD *)this + 650) = v25;
            *((unsigned char *)this + 2604) = *((unsigned char *)this + 2588);
            *((_DWORD *)this + 646) = v24;
            *((unsigned char *)this + 2588) = *((unsigned char *)this + 2596);
            *((_DWORD *)this + 648) = 0;
            *((unsigned char *)this + 2596) = 0x80;
            *((unsigned char *)this + 3415) = 1;
            *((_DWORD *)this + 852) |= 4u;
            if (BlueFin::GlUtils::m_ucEnabled
              && BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0xE))
            {
              size_t v26 = strlen(__s);
              if (*((unsigned __int8 *)this + 2604) == *((unsigned __int8 *)this + 2588)) {
                uint64_t v28 = "No change in Leap Second.";
              }
              else {
                uint64_t v28 = "New Leap Second applied.";
              }
              BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)&__s[v26], (char *)(100 - v26), (unsigned __int8 *)v28, v27);
            }
          }
        }
      }
      if (*((_DWORD *)this + 848) == *((_DWORD *)this + 851))
      {
        *((unsigned char *)this + 3414) = 1;
        *((_DWORD *)this + 852) |= 8u;
        if (BlueFin::GlUtils::m_ucEnabled
          && BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0xE))
        {
          BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)__s, (char *)0x64, "Blackout period ended.", v9);
        }
        unsigned int v10 = BlueFin::GlWeekTowTime::m_ucNextLs;
        if (BlueFin::GlWeekTowTime::m_ulCtFctOfNextLs)
        {
          BlueFin::GlWeekTowTime::m_ulCtFctOfNextLs = 0;
          BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent = 0;
          BlueFin::GlWeekTowTime::m_ucNextLs = 0;
          BlueFin::GlWeekTowTime::m_ucCurrentLs = v10;
          unsigned int v10 = 0;
        }
      }
      else
      {
        unsigned int v10 = BlueFin::GlWeekTowTime::m_ucNextLs;
      }
      unsigned int v30 = &unk_270EC23C8;
      uint64_t v31 = 0;
      BOOL v11 = v10 >= BlueFin::GlWeekTowTime::m_ucCurrentLs;
      if (!BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent) {
        BOOL v11 = 0;
      }
      BOOL v12 = BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent == 0;
      BOOL v13 = v11 && v12;
      if (v11 && v12) {
        int v14 = 431999;
      }
      else {
        int v14 = 432000;
      }
      unsigned int v15 = v14 - BlueFin::GlWeekTowTime::m_ucCurrentLs;
      unsigned __int16 v32 = 1980;
      __int16 v33 = v15 / 0x15180 + 1;
      unsigned __int8 v34 = 1;
      unsigned __int8 v35 = v15 / 0x15180 + 1;
      LOBYTE(v14) = 60;
      if (v13)
      {
        LOBYTE(v16) = 59;
        LOBYTE(v17) = 23;
      }
      else
      {
        unsigned int v17 = v15 % 0x15180 / 0xE10;
        unsigned int v16 = (2185 * (v15 - 3600 * ((1193047 * (unint64_t)v15) >> 32))) >> 17;
        int v14 = v15 - 60 * ((71582789 * (unint64_t)v15) >> 32);
      }
      unsigned __int8 v36 = v17;
      unsigned __int8 v37 = v16;
      char v38 = v14;
      BlueFin::GlPeGnssTime::GetUtc((BlueFin::GlPeGnssTime *)v39, (BlueFin::GlUtcTime *)&v30);
      LOBYTE(v18) = v38;
      LODWORD(v19) = v31;
      double v20 = (double)v19 * 2.32830644e-10 + (double)v18;
      __n128 v21 = "  Event:";
      if (!__s[0]) {
        __n128 v21 = (const char *)&unk_263B6E70D;
      }
      GlCustomLog(14, "GlPeTimeManager::handleSpecialTimeEvents(%u):  UTC:%hd/%02d/%02d %02d:%02d:%012.9lf  TimeLeft:%3u  LeapSec:%u%s%s\n", *((_DWORD *)this + 642), v32, v34, v35, v36, v37, v20, (unsigned __int16)(*((_DWORD *)this + 851) - *((_DWORD *)this + 848)), *((char *)this + 2588), v21, __s);
      unsigned int v8 = *((_DWORD *)this + 848);
    }
    if (v8 == *((_DWORD *)this + 854))
    {
      *((_DWORD *)this + 852) |= 0x10u;
      __int16 v22 = *((unsigned __int8 *)this + 3424) + 1;
      *((unsigned char *)this + 3424) = v22;
      *((_WORD *)this + 1713) = v22 << 10;
    }
  }
}

unint64_t BlueFin::GlMeSrdAsicinit::OnRtcCapture(BlueFin::GlMeSrdAsicinit *this)
{
  __int16 v4 = 1544;
  uint64_t v2 = *((void *)this + 4);
  unint64_t result = *((void *)this + 1);
  *((void *)this + 4) = result;
  do
  {
    unint64_t v5 = 0;
    if (BlueFin::patch_dispatch(result, (uint64_t)this, (unsigned __int8 *)&v4, &v5)) {
      unint64_t result = v5;
    }
    else {
      unint64_t result = (*((uint64_t (**)(BlueFin::GlMeSrdAsicinit *, __int16 *))this + 4))(this, &v4);
    }
    *((void *)this + 4) = result;
  }
  while (result);
  *((void *)this + 4) = v2;
  return result;
}

unint64_t BlueFin::GlMeSrdAsicinit::OnHeartbeat(BlueFin::GlMeSrdAsicinit *this)
{
  __int16 v4 = 1032;
  uint64_t v2 = *((void *)this + 4);
  unint64_t result = *((void *)this + 1);
  *((void *)this + 4) = result;
  do
  {
    unint64_t v5 = 0;
    if (BlueFin::patch_dispatch(result, (uint64_t)this, (unsigned __int8 *)&v4, &v5)) {
      unint64_t result = v5;
    }
    else {
      unint64_t result = (*((uint64_t (**)(BlueFin::GlMeSrdAsicinit *, __int16 *))this + 4))(this, &v4);
    }
    *((void *)this + 4) = result;
  }
  while (result);
  *((void *)this + 4) = v2;
  return result;
}

uint64_t BlueFin::GlMeSrdSatMgr::AsicStarted(BlueFin::GlMeSrdSatMgr *this)
{
  uint64_t v2 = (uint64_t *)((char *)this + 56);
  if (BlueFin::GlSetBase::HasAny((BlueFin::GlMeSrdSatMgr *)((char *)this + 56)))
  {
    BOOL v11 = "!m_otSetSatidAvailable.HasAny()";
    DeviceFaultNotify("glmesrd_sat_mgr.cpp", 71, "AsicStarted", (char)"!m_otSetSatidAvailable.HasAny()");
    int v12 = 71;
    goto LABEL_16;
  }
  if (BlueFin::GlSetBase::HasAny((BlueFin::GlMeSrdSatMgr *)((char *)this + 392)))
  {
    BOOL v11 = "!m_otSupportedSatsList.HasAny()";
    DeviceFaultNotify("glmesrd_sat_mgr.cpp", 72, "AsicStarted", (char)"!m_otSupportedSatsList.HasAny()");
    int v12 = 72;
    goto LABEL_16;
  }
  if ((*(unsigned int (**)(void))(**((void **)this + 819) + 384))(*((void *)this + 819)) >= 0x65)
  {
    BOOL v11 = "m_rAsicConfigIfc.GetMaxNumSats() <= GlMeSrdAsicConfigConstants::GLL_SAT_ARRAY_SIZE";
    DeviceFaultNotify("glmesrd_sat_mgr.cpp", 73, "AsicStarted", (char)"m_rAsicConfigIfc.GetMaxNumSats() <= GlMeSrdAsicConfigConstants::GLL_SAT_ARRAY_SIZE");
    int v12 = 73;
LABEL_16:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_mgr.cpp", v12, v11);
  }
  int v3 = (*(uint64_t (**)(void))(**((void **)this + 819) + 384))(*((void *)this + 819));
  if (v3)
  {
    int v4 = 0;
    int v5 = 0;
    uint64_t v6 = *v2;
    uint64_t v7 = *((void *)this + 49);
    do
    {
      unsigned int v8 = v4 >> 21;
      *(_DWORD *)(v6 + 4 * v8) |= 1 << v5;
      *(_DWORD *)(v7 + 4 * v8) |= 1 << v5++;
      v4 += 0x10000;
    }
    while (v3 != v5);
  }
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 819) + 352))(*((void *)this + 819));
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 819) + 264))(*((void *)this + 819));
    if (!result) {
      return result;
    }
    char v10 = -56;
  }
  else
  {
    char v10 = -1;
  }
  *((unsigned char *)this + 48) = v10;
  return result;
}

uint64_t BlueFin::GlMeSrdAcqMgr::AsicStarted(BlueFin::GlMeSrdAcqMgr *this)
{
  return BlueFin::GlMeSrdSatMgr::AsicStarted((BlueFin::GlMeSrdSatMgr *)(*((void *)this + 1) + 3520));
}

uint64_t BlueFin::GlNvMemImpl::Read(BlueFin::GlNvMemImpl *this)
{
  uint64_t v2 = (char *)this + 11889;
  int v3 = BlueFin::GlNvMemImpl::ChangeState((uint64_t)this, 7);
  BlueFin::GlNvMemImpl::ResetReader((uint64_t)this);
  uint64_t v4 = *((void *)this + 2);
  int v5 = *(void (**)(void, BlueFin::GlNvMemImpl *))(v4 + 136);
  if (v5) {
    v5(*(void *)(v4 + 8), this);
  }
  BlueFin::GlNvMemImpl::ChangeState((uint64_t)this, v3);
  int v6 = *((_DWORD *)this + 2964);
  int v7 = *((_DWORD *)this + 2973);
  if (v6 == 2)
  {
    if (v7 == 1) {
      int v8 = 2;
    }
    else {
      int v8 = 4;
    }
    int v3 = BlueFin::GlNvMemImpl::ChangeState((uint64_t)this, v8);
    BlueFin::GlNvMemImpl::ResetReader((uint64_t)this);
    BlueFin::GlNvMemImpl::DetermineDataToIgnore((uint64_t)this);
    if ((*((unsigned char *)this + 8) & 4) != 0) {
      *(unsigned char *)(*((void *)this + 3) + 2563) = 1;
    }
    if (*((_DWORD *)this + 2973) == 2) {
      BlueFin::GlNvMemImpl::parseSettings((uint64_t)this, *((const BlueFin::GlSettingsImpl **)this + 14));
    }
    uint64_t v9 = *((void *)this + 2);
    char v10 = *(void (**)(void, BlueFin::GlNvMemImpl *))(v9 + 136);
    if (v10) {
      v10(*(void *)(v9 + 8), this);
    }
    v2[28] = 1;
  }
  else
  {
    if ((v7 - 3) >= 3 && *((_DWORD *)this + 39))
    {
      GlCustomLog(11, " NVMEM integrity error detected\n");
      GlCustomLog(11, " NVMEM discarded\n");
      char *v2 = 0;
      int v6 = *((_DWORD *)this + 2964);
    }
    if (!v6)
    {
      if (*((_DWORD *)this + 39)) {
        int v11 = 3;
      }
      else {
        int v11 = 1;
      }
      *((_DWORD *)this + 2964) = v11;
    }
  }
  uint64_t result = BlueFin::GlNvMemImpl::LoadComplete(this);
  if (*((_DWORD *)this + 2964) == 2)
  {
    return BlueFin::GlNvMemImpl::ChangeState((uint64_t)this, v3);
  }
  return result;
}

uint64_t BlueFin::GlNvMemImpl::ChangeState(uint64_t a1, int a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 11892);
  *(_DWORD *)(a1 + 11892) = a2;
  if (v2 != 6)
  {
    BlueFin::GlNvMemImpl::Serialize(a1, 0);
    switch((int)v2)
    {
      case 1:
        int v4 = *(_DWORD *)(a1 + 11892);
        switch(v4)
        {
          case 7:
            GlCustomLog(14, " Start checking integrity of NVMEM ...\n");
            break;
          case 3:
            GlCustomLog(14, " Start writing NVMEM ...\n");
            break;
          case 2:
            GlCustomLog(14, " Start reading NVMEM ...\n");
            break;
        }
        break;
      case 2:
        if (*(_DWORD *)(a1 + 11892) == 1) {
          GlCustomLog(14, " NVMEM reading complete.\n");
        }
        break;
      case 3:
        if (*(_DWORD *)(a1 + 11892) == 1) {
          GlCustomLog(14, " NVMEM writing complete (Clear 0x%04x)\n");
        }
        break;
      case 7:
        if (*(_DWORD *)(a1 + 11892) == 1) {
          GlCustomLog(14, " NVMEM checking integrity complete.\n");
        }
        break;
      default:
        return v2;
    }
  }
  return v2;
}

uint64_t BlueFin::GlNvMemImpl::Serialize(uint64_t result, uint64_t a2)
{
  int v3 = &unk_270EC3038;
  char v4 = 1;
  char v6 = *(unsigned char *)(result + 11890);
  int v5 = *(_DWORD *)(result + 8);
  int v2 = *(_DWORD *)(*(void *)(result + 24) + 2568);
  int v7 = *(_DWORD *)(result + 11892);
  int v8 = v2;
  if (a2 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
    return BlueFin::GlNvMemImplData::SerializeImpl((uint64_t)&v3, a2);
  }
  return result;
}

BlueFin::GlDbgCodec *BlueFin::GlDbgProxyGlEngCbOnNvStgRead(uint64_t a1, BlueFin::GlNvMemImpl *a2)
{
  int v3 = (BlueFin::GlDbgCodec *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 656))(a1);

  return BlueFin::GlDbgProxy::HalGlEngCbOnNvStgRead(v3, a2);
}

uint64_t BlueFin::GlNvMemImpl::ResetReader(uint64_t this)
{
  *(_WORD *)(this + 152) = 0;
  *(_DWORD *)(this + 156) = 0;
  if (*(_DWORD *)(this + 11892) == 7)
  {
    *(_OWORD *)(this + 11760) = xmmword_263BAAD70;
    *(void *)(this + 11776) = 0;
    *(unsigned char *)(this + 11848) = 0;
    *(unsigned char *)(this + 11852) = 0;
    *(_DWORD *)(this + 11856) = 0;
    *(_WORD *)(this + 11860) = 0;
    *(_WORD *)(this + 11888) = 0;
  }
  if (*(_DWORD *)(this + 12) == -1) {
    *(_DWORD *)(this + 12) = 0;
  }
  *(_WORD *)(this + 11926) = 0;
  return this;
}

BlueFin::GlDbgCodec *BlueFin::GlDbgProxy::HalGlEngCbOnNvStgRead(BlueFin::GlDbgCodec *this, BlueFin::GlNvMemImpl *a2)
{
  *((void *)this + 871) = a2;
  if (!*((void *)this + 101))
  {
    int v2 = this;
    BlueFin::GlDbgCodec::WriteStart(this, 515);
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)v2 + 32))(v2, 1);
    int v3 = (void (*)(char *, char *))*((void *)v2 + 93);
    if (v3) {
      v3((char *)v2 + 608, (char *)v2 + 6952);
    }
    BlueFin::GlDbgCodec::WriteFinal(v2, 515);
    char v4 = *(uint64_t (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)v2 + 32);
    return (BlueFin::GlDbgCodec *)v4(v2, 1);
  }
  return this;
}

void FireCallback::GlEngCbOnNvStgRead(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (FireCallback::pInstance)
  {
    uint64_t v9 = *(void *)(FireCallback::pInstance + 536);
    if (v9)
    {
      uint64_t v11 = a2;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 48))(v9, &v11);
      return;
    }
    char v10 = "fcb,fEngCbOnNvStgReadCb,nullptr";
  }
  else
  {
    char v10 = "fcb,GlEngCbOnNvStgRead,nullptr";
  }

  FireDeviceLog::DeviceLogBase(2, v10, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t BlueFin::GlNvMemImpl::DetermineDataToIgnore(uint64_t this)
{
  uint64_t v1 = (BOOL *)(this + 11896);
  *(void *)(this + 11904) = 0x101010101010101;
  *(void *)(this + 11896) = 0x101010101010101;
  *(_DWORD *)(this + 11912) = 16843009;
  int v2 = *(_DWORD *)(this + 8);
  if ((*(_DWORD *)(this + 11892) - 3) > 2)
  {
    BOOL v4 = (*(_DWORD *)(this + 8) & 0x10) != 0;
    *uint64_t v1 = v4;
    *(unsigned char *)(this + 11897) = (v2 & 8) != 0;
    *(unsigned char *)(this + 11898) = (v2 & 2) != 0;
    *(unsigned char *)(this + 11899) = v2 & 1;
    *(unsigned char *)(this + 11900) = 0;
    *(unsigned char *)(this + 11901) = (v2 & 0x20) != 0;
    *(unsigned char *)(this + 11916) = (v2 & 0x200000) != 0;
    *(unsigned char *)(this + 11902) = (v2 & 0x80) != 0;
    *(unsigned char *)(this + 11903) = BYTE1(v2) & 1;
    *(unsigned char *)(this + 11904) = (v2 & 0x400) != 0;
    *(unsigned char *)(this + 11905) = v4;
    *(unsigned char *)(this + 11906) = (v2 & 0x2000) != 0;
    *(unsigned char *)(this + 11907) = (v2 & 0x4000) != 0;
    *(unsigned char *)(this + 11908) = 0;
    *(unsigned char *)(this + 11909) = (v2 & 0x1000) != 0;
    *(_DWORD *)(this + 11910) = 0;
    *(unsigned char *)(this + 11914) = 0;
  }
  else
  {
    BOOL v3 = (v2 & 8) == 0 && *(unsigned char *)(this + 11917) != 0;
    *(unsigned char *)(this + 11897) = v3;
    BOOL v5 = (v2 & 2) == 0 && *(unsigned char *)(this + 11917) != 0;
    *(unsigned char *)(this + 11898) = v5;
    BOOL v6 = (v2 & 1) == 0 && *(unsigned char *)(this + 11917) != 0;
    *(unsigned char *)(this + 11899) = v6;
    BOOL v7 = (v2 & 0x80) == 0;
    uint64_t v8 = *(unsigned __int8 *)(this + 11917);
    BOOL v9 = (v2 & 0x100) == 0;
    if (!*(unsigned char *)(this + 11917)) {
      BOOL v7 = 0;
    }
    *(unsigned char *)(this + 11902) = v7;
    if (!v8) {
      BOOL v9 = 0;
    }
    *(unsigned char *)(this + 11903) = v9;
    *uint64_t v1 = v8;
    *(unsigned char *)(this + 11900) = v8;
    *(unsigned char *)(this + 11901) = 0;
    *(_DWORD *)(this + 11911) = 16843009 * v8;
    *(void *)(this + 11904) = 0x101010101010101 * v8;
  }
  return this;
}

uint64_t BlueFin::GlNvMemImpl::RecoverTimeFromNvRam(uint64_t this, unsigned int a2, double a3, unsigned int *a4)
{
  unsigned int v4 = a4[1];
  if ((v4 & 0x8000) != 0)
  {
    double v6 = a3;
    uint64_t v8 = this;
    LODWORD(a3) = *a4;
    double v9 = (double)*(unint64_t *)&a3 * 0.000140815973;
    __n128 v21 = &off_270EBC600;
    double v10 = fmod(v9, 1.0);
    if (v10 < 0.0 || v10 >= 1.0)
    {
      DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
    }
    double v12 = v10 * 4294967300.0 + 0.5;
    unsigned int v13 = v12;
    if (v12 >= 4294967300.0) {
      unsigned int v13 = -1;
    }
    LODWORD(v22) = v13;
    HIDWORD(v22) = v9 + 604800 * (v4 & 0x3FFF);
    __n128 v21 = &off_270EBC600;
    GlCustomLog(14, "GlPosEng::AsicStarted: LMS:%u  Recovering time  GpsTimeFromLastRun:{Week:%d  TowS:%.3lf}  Elapsed Time(ms):%.0lf\n", a2, HIDWORD(v22) / 0x93A80, (double)v13 * 2.32830644e-10 + (double)(HIDWORD(v22) % 0x93A80), v6);
    double v14 = 200000.0;
    if ((a4[1] & 0x4000) != 0) {
      double v14 = 1.0;
    }
    uint64_t v17 = v22;
    int v18 = 0;
    double v19 = (double)a2;
    double v20 = v14;
    this = BlueFin::GlPeTimeManager::RecoverTimeFromNvRam(*(void *)(v8 + 24), (uint64_t)&v17);
    if (this)
    {
      *(unsigned char *)(v8 + 11919) = 1;
      int v15 = *(_DWORD *)(v8 + 12);
      if (v15 == -1) {
        int v16 = 4;
      }
      else {
        int v16 = v15 | 4;
      }
      *(_DWORD *)(v8 + 12) = v16;
    }
  }
  return this;
}

uint64_t BlueFin::GlNvMemImpl::parseSettings(uint64_t this, const BlueFin::GlSettingsImpl *a2)
{
  uint64_t v15 = this;
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (a2)
  {
    int v3 = *((_DWORD *)a2 + 2890);
    if (v3 >= 1)
    {
      int v4 = 0;
      int v5 = 0;
      do
      {
        this = BlueFin::GlSettingsImpl::GetDbgParam(a2, v4, (char (*)[64])&__s[256], (char (*)[256])__s);
        if (*(void *)&__s[256] == 0x546465776F6C6C61
          && *(void *)&__s[264] == 0x5374696E49656D69
          && *(void *)&__s[271] == 0x736D6574737953)
        {
          this = strlen(__s);
          if (this < 1)
          {
            int v8 = 0;
          }
          else
          {
            int v8 = 0;
            double v9 = &__s[this];
            double v10 = __s;
            do
            {
              if (v10 + 3 <= v9)
              {
                unsigned int v11 = v10[3];
                BOOL v12 = v11 > 0x2C || ((1 << v11) & 0x100100000001) == 0;
                if (!v12 || v11 == 124)
                {
                  for (uint64_t i = 0; i != 6; ++i)
                  {
                    this = strncmp(v10, BlueFin::GlPeTimeManager::m_acTimeSystemImage[i], 3uLL);
                    uint64_t v14 = 1 << i;
                    if (this) {
                      LODWORD(v14) = 0;
                    }
                    v8 |= v14;
                  }
                }
                v10 += 4;
              }
            }
            while (v10 < v9);
          }
          *(_DWORD *)(*(void *)(v15 + 24) + 2712) = v8;
        }
        int v4 = (unsigned __int16)++v5;
      }
      while (v3 > (unsigned __int16)v5);
    }
  }
  return this;
}

#error "263971540: call analysis failed (funcsize=188)"

BOOL BlueFin::GlPeAlmMgr::IsAlmInitialized(BlueFin::GlPeAlmMgr *this)
{
  uint64_t v1 = *((void *)this + 54);
  if (BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(v1 + 24))) {
    return 1;
  }
  unint64_t v3 = 0;
  int v4 = (BlueFin::GlSetBase *)(v1 + 72);
  do
  {
    unint64_t v5 = v3;
    if (v3 == 6) {
      break;
    }
    BOOL HasAny = BlueFin::GlSetBase::HasAny(v4);
    int v4 = (BlueFin::GlSetBase *)((char *)v4 + 48);
    unint64_t v3 = v5 + 1;
  }
  while (!HasAny);
  return v5 < 6;
}

uint64_t BlueFin::GlPeTimeManager::CheckForElapsedTimeConsistency(uint64_t this, double a2, double a3, double a4)
{
  unsigned int v4 = *(_DWORD *)(this + 4680);
  if (v4)
  {
    LODWORD(a2) = *(_DWORD *)(this + 4676);
    LODWORD(a4) = *(_DWORD *)(this + 2568);
    double v5 = (double)*(unint64_t *)&a2 - ((double)v4 + (double)*(unint64_t *)&a4 * 0.001);
    double v6 = *(double *)(this + 2552) * 0.001;
    if (vabdd_f64(v5, v6) > 100.0) {
      return GlCustomLog(11, "GlPeTimeManager::CheckForElapsedTimeConsistency: Discrepancy in elapsed time recovered from NVRAM. Delta of elapsed time from Machtime Vs RTC is %.0lf sec ElapsedTimeBasedOnMachTimeInfo %.0lf sec RTC Sleep time %.0lf sec\n", v5 - v6, v5, v6);
    }
  }
  return this;
}

char *BlueFin::GlDbgCodec::WriteArray(BlueFin::GlDbgCodec *this, unsigned int *a2, unsigned int *a3)
{
  uint64_t result = (char *)(*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 120))(this);
  if (result)
  {
    uint64_t result = (char *)(*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 120))(this);
    if (result) {
      uint64_t result = BlueFin::GlDbgCodec::Write(this, a3);
    }
    if (*a3)
    {
      unint64_t v7 = 0;
      do
      {
        uint64_t result = BlueFin::GlDbgCodec::Write(this, a2);
        ++v7;
        ++a2;
      }
      while (v7 < *a3);
    }
  }
  return result;
}

uint64_t BlueFin::GlPeTimeManager::RecoverTimeFromNvRam(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 2552);
  if (v2 > 0.0)
  {
    unsigned int v4 = (uint64_t *)(a1 + 2776);
    if (a1 + 2776 != a2)
    {
      *(void *)(a1 + 2776) = *(void *)a2;
      *(_DWORD *)(a1 + 2784) = *(_DWORD *)(a2 + 8);
      *(void *)(a1 + 2800) = *(void *)(a2 + 24);
    }
    double v5 = -v2;
    *(double *)(a1 + 2792) = -v2;
    BlueFin::GlPeTimeManagerData::GlPeTimeManagerData((BlueFin::GlPeTimeManagerData *)&v8);
    v9 |= 1u;
    int v10 = 1;
    if (&v11 != v4)
    {
      uint64_t v11 = *(void *)(a1 + 2776);
      int v12 = *(_DWORD *)(a1 + 2784);
      uint64_t v6 = *(void *)(a1 + 2800);
      double v13 = v5;
      uint64_t v14 = v6;
    }
    if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
      (*(void (**)(uint64_t *, void, void))(v8 + 24))(&v8, 0, 0);
    }
  }
  return 0;
}

uint64_t BlueFin::MinnowGllRpcParserImp::Handle_SatRpt_AcquisitionWindow(BlueFin::MinnowGllRpcParserImp *this, BlueFin::GlStream *a2)
{
  uint64_t U08 = BlueFin::GlStream::GetU08(a2);
  int v5 = BlueFin::GlStream::GetU08(a2);
  uint64_t v6 = (char *)&BlueFin::GlImplGnss::m_aucFromImplSvIdToEnabledSvId
     + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion;
  int v7 = v6[v5];
  v47[0] = v6[v5];
  int Bits = BlueFin::GlStream::GetBits(a2, 1u);
  int v48 = Bits;
  if (Bits)
  {
    if (Bits != 1)
    {
      uint64_t v28 = "0";
      DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 2113, "Handle_SatRpt_AcquisitionWindow", (char)"0");
      int v29 = 2113;
LABEL_37:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_decoder_minnow.cpp", v29, v28);
    }
    int v9 = BlueFin::GlStream::GetBits(a2, 4u) & 0xF;
    char v49 = v9 & 0xCF | (16 * (BlueFin::GlStream::GetBits(a2, 3u) & 3));
    char v10 = BlueFin::GlStream::GetBits(a2, 4u) & 0xF;
    v50[5] = v10 & 0xEF | (16 * (BlueFin::GlStream::GetBits(a2, 1u) & 1));
    BlueFin::GlStream::GetBits(a2, 3u);
    if (v9 == 5)
    {
      LOBYTE(v30) = 0;
      HIDWORD(v30) = BlueFin::GlStream::GetU32(a2);
      uint64_t v31 = 0;
      LODWORD(v32) = 0;
      *(_DWORD *)char v50 = -1;
      uint64_t v11 = &v30;
      v50[4] = -1;
    }
    else
    {
      for (uint64_t i = 0; i != 5; ++i)
        v50[i] = BlueFin::GlStream::GetU08(a2);
      uint64_t v11 = 0;
    }
    __int16 U16 = BlueFin::GlStream::GetU16(a2);
    __int16 v16 = BlueFin::GlStream::GetU16(a2);
    __int16 v44 = v16;
    __int16 v45 = BlueFin::GlStream::GetU16(a2);
    __int16 v46 = BlueFin::GlStream::GetU16(a2);
    int v12 = 1;
    __int16 v14 = (2 * v46) | 1;
    __int16 v13 = (2 * v16) | 1;
  }
  else
  {
    *(_DWORD *)&v50[3] = BlueFin::GlStream::GetBits(a2, 7u);
    char v49 = BlueFin::GlStream::GetU08(a2);
    char v52 = BlueFin::GlStream::GetBits(a2, 4u) & 0xF;
    BlueFin::GlStream::GetBits(a2, 4u);
    __int16 U16 = BlueFin::GlStream::GetU16(a2);
    __int16 v44 = 0;
    __int16 v46 = 0;
    uint64_t v11 = 0;
    int v12 = 0;
    __int16 v51 = BlueFin::GlStream::GetU16(a2);
    int v9 = v49 & 0xF;
    __int16 v13 = 1;
    __int16 v14 = 1;
  }
  if ((v7 - 76) <= 0x3E && (v50[5] & 0xF) == 1)
  {
    __int16 v44 = v13;
    __int16 v46 = v14;
  }
  char v42 = BlueFin::GlStream::GetU08(a2);
  if ((v12 & 1) == 0)
  {
    int U24 = BlueFin::GlStream::GetU24(a2);
    int v38 = 0;
    int U32 = U24;
    uint64_t v40 = 0;
    char v41 = 0;
    uint64_t v35 = 0;
LABEL_24:
    unsigned int v23 = BlueFin::GlStream::GetU24(a2);
    if (v23 >= 0x800000) {
      int v24 = -16777216;
    }
    else {
      int v24 = 0;
    }
    int v37 = v24 | v23;
    int32x4_t v36 = vdupq_n_s32(v24 | v23);
    goto LABEL_28;
  }
  int U32 = BlueFin::GlStream::GetU32(a2);
  HIWORD(v40) = BlueFin::GlStream::GetU16(a2);
  LODWORD(v40) = BlueFin::GlStream::GetS32(a2);
  char v41 = BlueFin::GlStream::GetU08(a2);
  int v38 = BlueFin::GlStream::GetU32(a2);
  WORD2(v40) = BlueFin::GlStream::GetU16(a2);
  unsigned int v17 = BlueFin::GlStream::GetU24(a2);
  int v18 = v17 & 0x7FFFFF;
  if (v17 >= 0x800000) {
    int v18 = -v18;
  }
  LODWORD(v35) = v18;
  HIDWORD(v35) = BlueFin::GlStream::GetU32(a2);
  if (v9 == 5) {
    goto LABEL_24;
  }
  for (uint64_t j = 8; j != 28; j += 4)
  {
    unsigned int v20 = BlueFin::GlStream::GetU24(a2);
    if (v20 >= 0x800000) {
      int v21 = -16777216;
    }
    else {
      int v21 = 0;
    }
    *(_DWORD *)((char *)&v35 + j) = v21 | v20;
  }
LABEL_28:
  if (v9 == 5) {
    int v25 = 0;
  }
  else {
    int v25 = v12;
  }
  if (v25 == 1)
  {
    int v33 = BlueFin::GlStream::GetU32(a2);
    char v34 = 0;
    BlueFin::GlStream::GetU32(a2);
    HIDWORD(v32) = -1;
    size_t v26 = (char *)&v32 + 4;
  }
  else
  {
    size_t v26 = 0;
  }
  if (BlueFin::GlStream::GetAvailableSize(a2))
  {
    uint64_t v28 = "otStream.GetAvailableSize() == 0";
    DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 2184, "Handle_SatRpt_AcquisitionWindow", (char)"otStream.GetAvailableSize() == 0");
    int v29 = 2184;
    goto LABEL_37;
  }
  return (*(uint64_t (**)(void, uint64_t, char *, __int16 *, int *, uint64_t *, char *, uint64_t *, uint64_t, uint64_t, uint64_t))(**(void **)(*((void *)this + 1) + 17072) + 48))(*(void *)(*((void *)this + 1) + 17072), U08, v47, &U16, &v38, &v35, v26, v11, v30, v31, v32);
}

uint64_t BlueFin::GlStream::GetU24(BlueFin::GlStream *this)
{
  if (*((_DWORD *)this + 6))
  {
    uint64_t v11 = "m_uiBitOffset == 0";
    DeviceFaultNotify("glutl_stream.h", 110, "GetU24", (char)"m_uiBitOffset == 0");
    int v12 = 110;
    goto LABEL_11;
  }
  if (*((_DWORD *)this + 7))
  {
    uint64_t v11 = "m_uiBitsRemainingInWord == 0";
    DeviceFaultNotify("glutl_stream.h", 111, "GetU24", (char)"m_uiBitsRemainingInWord == 0");
    int v12 = 111;
    goto LABEL_11;
  }
  uint64_t v1 = *(unsigned int *)this;
  int v2 = v1 + 3;
  if ((v1 + 3) > *((_DWORD *)this + 4))
  {
    uint64_t v11 = "m_uiOffset + 3 <= m_uiMaxOffset";
    DeviceFaultNotify("glutl_stream.h", 113, "GetU24", (char)"m_uiOffset + 3 <= m_uiMaxOffset");
    int v12 = 113;
LABEL_11:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_stream.h", v12, v11);
  }
  int v3 = *((unsigned __int8 *)this + 20);
  uint64_t v4 = *((void *)this + 1);
  unsigned int v5 = v1 + 1;
  *(_DWORD *)this = v1 + 1;
  int v6 = *(unsigned __int8 *)(v4 + v1);
  unsigned int v7 = v1 + 2;
  *(_DWORD *)this = v7;
  if (v3)
  {
    int v6 = (v6 << 16) | (*(unsigned __int8 *)(v4 + v5) << 8);
    *(_DWORD *)this = v2;
    int v8 = *(unsigned __int8 *)(v4 + v7);
  }
  else
  {
    int v10 = *(unsigned __int8 *)(v4 + v5);
    *(_DWORD *)this = v2;
    int v8 = (*(unsigned __int8 *)(v4 + v7) << 16) | (v10 << 8);
  }
  return v6 | v8;
}

uint64_t BlueFin::GlMeSrdSatRptRpcBuffer::gll_satrpt_rpc_acquisition_window(uint64_t a1, int a2, long long *a3, void *a4, long long *a5, long long *a6, uint64_t *a7, long long *a8)
{
  BlueFin::GlMeSrdSatRptRpcBuffer::CheckInstanceId(a1, a2);
  int v15 = *(_DWORD *)(a1 + 8);
  if ((v15 & 2) != 0)
  {
    DeviceFaultNotify("glmesrd_sat_report_rpc_buffer.cpp", 451, "gll_satrpt_rpc_acquisition_window", (char)"m_otFlags.Missing(FLGS_RECEIVED_ACQ_WIN)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_report_rpc_buffer.cpp", 451, "m_otFlags.Missing(FLGS_RECEIVED_ACQ_WIN)");
  }
  int v16 = v15 | 2;
  *(_DWORD *)(a1 + 8) = v15 | 2;
  long long v17 = *a3;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a3 + 4);
  *(_OWORD *)(a1 + 16) = v17;
  *(void *)(a1 + 36) = *a4;
  long long v18 = *a5;
  *(_DWORD *)(a1 + 60) = *((_DWORD *)a5 + 4);
  *(_OWORD *)(a1 + 44) = v18;
  long long v19 = *a6;
  *(_OWORD *)(a1 + 76) = *(long long *)((char *)a6 + 12);
  *(_OWORD *)(a1 + 64) = v19;
  if (a7)
  {
    int v16 = v15 | 6;
    *(_DWORD *)(a1 + 8) = v15 | 6;
    uint64_t v20 = *a7;
    *(_DWORD *)(a1 + 100) = *((_DWORD *)a7 + 2);
    *(void *)(a1 + 92) = v20;
  }
  if (a8)
  {
    *(_DWORD *)(a1 + 8) = v16 | 0x10000;
    long long v21 = *a8;
    *(_DWORD *)(a1 + 120) = *((_DWORD *)a8 + 4);
    *(_OWORD *)(a1 + 104) = v21;
  }
  uint64_t v22 = *(uint64_t (**)(void))(**(void **)(a1 + 3152) + 48);

  return v22();
}

uint64_t BlueFin::GlMeSrdSatRptRpcBuffer::CheckInstanceId(uint64_t this, int a2)
{
  if (*(unsigned char *)(this + 8))
  {
    if (*(unsigned __int8 *)(this + 12) != a2)
    {
      DeviceFaultNotify("glmesrd_sat_report_rpc_buffer.cpp", 130, "CheckInstanceId", (char)"m_ucSatId == ucInstanceId");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_report_rpc_buffer.cpp", 130, "m_ucSatId == ucInstanceId");
    }
  }
  else
  {
    *(unsigned char *)(this + 12) = a2;
  }
  return this;
}

void BlueFin::GlMeSrdSatRptRpcListener::gll_satrpt_rpc_acquisition_window(uint64_t a1, unsigned int a2, unsigned __int8 *a3, unsigned __int16 *a4, uint64_t a5, uint64_t a6)
{
  int v11 = *(_DWORD *)(*(void *)(a1 + 8) + 488);
  int v12 = v11 & 0x10002;
  BOOL v13 = (v11 & 0x10002) == 0x10002 || (~v11 & 0x12) == 0;
  uint64_t v14 = 14;
  if (!v13) {
    uint64_t v14 = 18;
  }
  int GlSignalIndex = BlueFin::GlMeSrdAsicUnitConverter::GetGlSignalIndex(*a3, a3[v14] & 0xF);
  uint64_t v16 = *a3;
  v36[0] = *a3;
  int v37 = GlSignalIndex;
  if (GlSignalIndex == -1
    || (v16 + 67) < 0x44u
    || (uint64_t v17 = BlueFin::GlSvId::s_aucSvId2gnss[v16],
        BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * GlSignalIndex
                                                                                - GlSignalIndex
                                                                                + v17] == 255)
    || (unsigned __int16 v38 = BlueFin::GlSignalId::s_ausGnss2signalId[v17]
            + v16
            - BlueFin::GlSvId::s_aucGnss2minSvId[v17]
            + GlSignalIndex * BlueFin::GlSvId::s_aucGnss2numSvId[v17],
        v38 >= 0x23Fu))
  {
    DeviceFaultNotify("glmesrd_sat_report_mgr.cpp", 419, "gll_satrpt_rpc_acquisition_window", (char)"otSignalId.IsValid()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_report_mgr.cpp", 419, "otSignalId.IsValid()");
  }
  BOOL v19 = (~*(_DWORD *)(*(void *)(a1 + 8) + 488) & 0xA) == 0 || v12 == 65538;
  BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)v35, a2, GlSignalIndex);
  BOOL v20 = BlueFin::GlMeSrdSatReportMgr::CheckForTrackReset(*(BlueFin::GlMeSrdSatReportMgr **)(a1 + 8), (const BlueFin::GlSatCarrId *)v35, (const BlueFin::GlSignalId *)v36);
  SatRptSniffStatePtr = (char *)BlueFin::GlMeSrdSatReportMgr::GetSatRptSniffStatePtr(*(BlueFin::GlMeSrdSatReportMgr **)(a1 + 8), (const BlueFin::GlSatCarrId *)v35, (const BlueFin::GlSignalId *)v36);
  v25[0] = 0;
  int v26 = 0;
  char v27 = 0;
  int v28 = 0;
  __int16 v29 = 575;
  int v30 = 0;
  __int16 v31 = 0;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  uint64_t v22 = *(void *)(a1 + 8);
  if (*(void *)(v22 + 3640))
  {
    BlueFin::GlMeSrdStats::setAcqWin(*(void *)(v22 + 3640), v36, (uint64_t)a3, a4, a6, *(_DWORD *)(v22 + 56));
    uint64_t v22 = *(void *)(a1 + 8);
  }
  SatReportPtr = BlueFin::GlMeSrdSatReportMgr::GetSatReportPtr((BlueFin::GlMeSrdSatReportMgr *)v22, (const BlueFin::GlSatCarrId *)v35, (const BlueFin::GlSignalId *)v36, v19 | v20);
  BlueFin::GlMeSrdSatReport::ProcessMsmt((uint64_t)SatReportPtr, *(void *)(a1 + 8) + 480, *(_DWORD *)(*(void *)(a1 + 8) + 56), *(_WORD *)(*(void *)(a1 + 8) + 3684), (uint64_t)v25, (const BlueFin::GlSignalId *)v36, SatRptSniffStatePtr, *(BlueFin::GlMeSrdStats **)(*(void *)(a1 + 8) + 3640));
  uint64_t v24 = *(void *)(a1 + 8);
  if (v19 && ((~*(_DWORD *)(v24 + 488) & 0xA) != 0 || *(unsigned char *)(v24 + 585) != 2))
  {
    BlueFin::GlMeSrdSatReportMgr::DestroySatReport(v24, (const BlueFin::GlSatCarrId *)v35);
    uint64_t v24 = *(void *)(a1 + 8);
  }
  *(_DWORD *)(v24 + 488) = 0;
  *(unsigned char *)(v24 + 492) = -1;
  bzero((void *)(v24 + 496), 0xC3CuLL);
}

uint64_t BlueFin::GlMeSrdStats::setAcqWin(uint64_t result, unsigned __int8 *a2, uint64_t a3, unsigned __int16 *a4, uint64_t a5, int a6)
{
  if (*(_DWORD *)(a3 + 4) == 1 && (*(unsigned char *)(a3 + 8) & 0xF) != 5)
  {
    uint64_t v10 = result;
    if (*(__int16 *)(result + 42954) == -1)
    {
      GlCustomLog(126, "IQDUMP_ACQ WARNING m_otAcqWinArray overflow\n");
      BlueFin::GlBigArray::Clear(v10 + 42920);
    }
    int v11 = BlueFin::GlBigArray::Add((BlueFin::GlBigArray *)(v10 + 42920), *((unsigned __int16 *)a2 + 4));
    if (!v11)
    {
      DeviceFaultNotify("glmesrd_stats.cpp", 876, "setAcqWin", (char)"nullptr != pAcqWin");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_stats.cpp", 876, "nullptr != pAcqWin");
    }
    int v12 = v11;
    GlCustomLog(126, "IQDUMP_ACQ,%d:%s,%d,%d", BlueFin::GlSvId::s_aucSvId2prn[*a2], BlueFin::GlSignalId::s_ausSignalType2str[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)a2 + 1) - *((int *)a2 + 1) + BlueFin::GlSvId::s_aucSvId2gnss[*a2]]], *a4, a4[1]);
    double v14 = BlueFin::GlMeSrdAsicUnitConverter::EswUtStructToFinalUserTimeMs(a4, a2, a6);
    uint64_t v15 = 0;
    void *v12 = (uint64_t)(v14 * 1000000000.0);
    do
    {
      float v16 = BlueFin::GlMeSrdAsicUnitConverter::EswCarrierNcoIncToCarrFreqInHz((BlueFin::GlMeSrdAsicUnitConverter *)*(unsigned int *)(a5 + 8 + 4 * v15), a2, v13);
      float v18 = BlueFin::GlMeSrdAsicUnitConverter::HzToPpu((BlueFin::GlMeSrdAsicUnitConverter *)a2, v16, v17);
      uint64_t v19 = (uint64_t)((float)(1.0 - v18) * 0.2 * 1.0e12);
      BOOL v20 = (double *)&v12[v15];
      *((void *)v20 + 1) = v19;
      double v21 = v18;
      v20[6] = v21 * 299792458.0;
      GlCustomLog(126, ",%.1f ms(%.0f ppb)", (double)v19 / 1000.0 / 1000.0 / 1000.0, v21 * 1000000000.0);
      ++v15;
    }
    while (v15 != 5);
    return GlCustomLog(126, "\n");
  }
  return result;
}

BOOL BlueFin::GlMeSrdSatReportMgr::CheckForTrackReset(BlueFin::GlMeSrdSatReportMgr *this, const BlueFin::GlSatCarrId *a2, const BlueFin::GlSignalId *a3)
{
  int v6 = *((_DWORD *)this + 122);
  if ((v6 & 0x20000) != 0 || (*((_DWORD *)this + 122) & 0x12) == 0x12)
  {
    if (BlueFin::GlBigArray::Missing(*((BlueFin::GlBigArray **)this + 456), *(unsigned __int8 *)a2 + 100 * *((unsigned __int8 *)a2 + 4)))
    {
      return 1;
    }
    uint64_t v8 = *((void *)this + 456);
    if (*(unsigned __int8 *)a2 + 100 * *((unsigned __int8 *)a2 + 4) - *(unsigned __int16 *)(v8 + 28) >= *(unsigned __int16 *)(v8 + 30))
    {
LABEL_22:
      double v14 = "handle - m_usMinHandle < m_usNumHandles";
      DeviceFaultNotify("glinc_array.h", 313, "EnsureValidHandle", (char)"handle - m_usMinHandle < m_usNumHandles");
      int v15 = 313;
      goto LABEL_24;
    }
    unsigned int v9 = *(unsigned __int16 *)(*(void *)(v8 + 8)
                             + 2
                             * (unsigned __int16)(*(unsigned __int8 *)a2
                                                + 100 * *((unsigned __int8 *)a2 + 4)
                                                - *(_WORD *)(v8 + 28)));
    if (*(unsigned __int16 *)(v8 + 32) <= v9)
    {
LABEL_23:
      double v14 = "slot < m_usNumSlots";
      DeviceFaultNotify("glinc_array.h", 319, "EnsureValidSlot", (char)"slot < m_usNumSlots");
      int v15 = 319;
LABEL_24:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glinc_array.h", v15, v14);
    }
    BOOL result = *(unsigned __int8 *)(*(void *)v8 + *(_DWORD *)(v8 + 24) * v9 + 492) != *(unsigned __int8 *)a3;
    int v6 = *((_DWORD *)this + 122);
  }
  else
  {
    BOOL result = 0;
  }
  if (~v6 & 0x12) != 0 || (result) {
    return result;
  }
  if (BlueFin::GlBigArray::Missing(*((BlueFin::GlBigArray **)this + 456), *(unsigned __int8 *)a2 + 100 * *((unsigned __int8 *)a2 + 4)))
  {
    return 0;
  }
  uint64_t v10 = *((void *)this + 456);
  if (*(unsigned __int8 *)a2 + 100 * *((unsigned __int8 *)a2 + 4) - *(unsigned __int16 *)(v10 + 28) >= *(unsigned __int16 *)(v10 + 30)) {
    goto LABEL_22;
  }
  unsigned int v11 = *(unsigned __int16 *)(*(void *)(v10 + 8)
                            + 2
                            * (unsigned __int16)(*(unsigned __int8 *)a2
                                               + 100 * *((unsigned __int8 *)a2 + 4)
                                               - *(_WORD *)(v10 + 28)));
  if (v11 != 0xFFFF)
  {
    if (*(unsigned __int16 *)(v10 + 32) > v11)
    {
      int v12 = (BlueFin::GlMeSrdSatReport *)(*(void *)v10 + *(_DWORD *)(v10 + 24) * v11);
      goto LABEL_19;
    }
    goto LABEL_23;
  }
  int v12 = 0;
LABEL_19:
  int v13 = *((_DWORD *)this + 14);

  return BlueFin::GlMeSrdSatReport::HasTrackReset(v12, (BlueFin::GlMeSrdSatReportMgr *)((char *)this + 480), a3, v13);
}

uint64_t BlueFin::GlMeSrdSatReportMgr::GetSatRptSniffStatePtr(BlueFin::GlMeSrdSatReportMgr *this, const BlueFin::GlSatCarrId *a2, const BlueFin::GlSignalId *a3)
{
  int v3 = *((_DWORD *)a2 + 1);
  uint64_t v4 = (char *)a3 + 4;
  if (v3 != *((_DWORD *)a3 + 1))
  {
    int v12 = "otSatCarrId.GetSignalIndex() == otSignalId.GetSignalIndex()";
    DeviceFaultNotify("glmesrd_sat_report_mgr_sniff.cpp", 37, "GetSatRptSniffStatePtr", (char)"otSatCarrId.GetSignalIndex() == otSignalId.GetSignalIndex()");
    int v13 = 37;
    goto LABEL_27;
  }
  if (v3) {
    return 0;
  }
  uint64_t v8 = *(unsigned __int8 *)a2;
  int v9 = ~*((_DWORD *)this + 122) & 0x10002;
  int v10 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 457) + 40))(*((void *)this + 457), v8);
  if (v9)
  {
    if (!v10) {
      return 0;
    }
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 457) + 16))(*((void *)this + 457), v8);
    if (result)
    {
      (*(void (**)(void, uint64_t))(**((void **)this + 457) + 32))(*((void *)this + 457), v8);
      return 0;
    }
    return result;
  }
  uint64_t v11 = **((void **)this + 457);
  if (!v10)
  {
    if ((*(uint64_t (**)(void))(v11 + 64))())
    {
      (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 457) + 80))(&v19);
      if (v20 >= *(unsigned __int8 *)(v19 + 38)) {
        goto LABEL_30;
      }
      unsigned __int8 v14 = -1;
      float v15 = 3.4028e38;
      do
      {
        unsigned __int8 v16 = BlueFin::GlArrayIterator::Next((BlueFin::GlArrayIterator *)&v19);
        double v17 = *(double *)((*(uint64_t (**)(void, void))(**((void **)this + 457) + 16))(*((void *)this + 457), v16)+ 48);
        if (v17 < v15)
        {
          unsigned __int8 v14 = v16;
          float v15 = v17;
        }
      }
      while (v20 < *(unsigned __int8 *)(v19 + 38));
      if (v14 == 0xFF)
      {
LABEL_30:
        int v12 = "ucInstanceIdOlder != 0xFF";
        DeviceFaultNotify("glmesrd_sat_report_mgr_sniff.cpp", 91, "GetSatRptSniffStatePtr", (char)"ucInstanceIdOlder != 0xFF");
        int v13 = 91;
      }
      else
      {
        (*(void (**)(void, void))(**((void **)this + 457) + 32))(*((void *)this + 457), v14);
        uint64_t result = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 457) + 24))(*((void *)this + 457), v8);
        if (result) {
          goto LABEL_25;
        }
        int v12 = "pstSatRptSniffState != nullptr";
        DeviceFaultNotify("glmesrd_sat_report_mgr_sniff.cpp", 99, "GetSatRptSniffStatePtr", (char)"pstSatRptSniffState != nullptr");
        int v13 = 99;
      }
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 457) + 24))(*((void *)this + 457), v8);
      if (result) {
        goto LABEL_25;
      }
      int v12 = "pstSatRptSniffState != nullptr";
      DeviceFaultNotify("glmesrd_sat_report_mgr_sniff.cpp", 69, "GetSatRptSniffStatePtr", (char)"pstSatRptSniffState != nullptr");
      int v13 = 69;
    }
LABEL_27:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_report_mgr_sniff.cpp", v13, v12);
  }
  uint64_t result = (*(uint64_t (**)(void))(v11 + 16))();
  if (!result)
  {
    int v12 = "pstSatRptSniffState != nullptr";
    DeviceFaultNotify("glmesrd_sat_report_mgr_sniff.cpp", 53, "GetSatRptSniffStatePtr", (char)"pstSatRptSniffState != nullptr");
    int v13 = 53;
    goto LABEL_27;
  }
  if (*(unsigned __int8 *)(result + 28) != *(unsigned __int8 *)a3 || *(_DWORD *)(result + 32) != *(_DWORD *)v4)
  {
    (*(void (**)(void, uint64_t))(**((void **)this + 457) + 32))(*((void *)this + 457), v8);
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 457) + 24))(*((void *)this + 457), v8);
    if (!result)
    {
      int v12 = "pstSatRptSniffState != nullptr";
      DeviceFaultNotify("glmesrd_sat_report_mgr_sniff.cpp", 60, "GetSatRptSniffStatePtr", (char)"pstSatRptSniffState != nullptr");
      int v13 = 60;
      goto LABEL_27;
    }
LABEL_25:
    *(unsigned char *)uint64_t result = 0;
    *(_DWORD *)(result + 4) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(_WORD *)(result + 12) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(unsigned char *)(result + 28) = *(unsigned char *)a3;
    int v18 = *(_DWORD *)v4;
    *(_WORD *)(result + 36) = *((_WORD *)v4 + 2);
    *(_DWORD *)(result + 32) = v18;
    *(void *)(result + 40) = 0;
    *(void *)(result + 48) = 0;
  }
  return result;
}

_DWORD *BlueFin::GlMeSrdSatReportMgr::GetSatReportPtr(BlueFin::GlMeSrdSatReportMgr *this, const BlueFin::GlSatCarrId *a2, const BlueFin::GlSignalId *a3, int a4)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (a4
    && BlueFin::GlBigArray::Has(*((BlueFin::GlBigArray **)this + 456), *(unsigned __int8 *)a2 + 100 * *((unsigned __int8 *)a2 + 4)))
  {
    uint64_t v7 = *((void *)this + 456);
    if (*(unsigned __int8 *)a2 + 100 * *((unsigned __int8 *)a2 + 4) - *(unsigned __int16 *)(v7 + 28) >= *(unsigned __int16 *)(v7 + 30)) {
      goto LABEL_44;
    }
    unsigned int v8 = *(unsigned __int16 *)(*(void *)(v7 + 8)
                             + 2
                             * (unsigned __int16)(*(unsigned __int8 *)a2
                                                + 100 * *((unsigned __int8 *)a2 + 4)
                                                - *(_WORD *)(v7 + 28)));
    if (v8 == 0xFFFF) {
      goto LABEL_11;
    }
    if (*(unsigned __int16 *)(v7 + 32) <= v8) {
      goto LABEL_45;
    }
    if (*(void *)v7
      && (uint64_t v9 = *(void *)v7 + *(_DWORD *)(v7 + 24) * v8, *(unsigned __int8 *)(v9 + 492) == *(unsigned __int8 *)a3)
      && *(_DWORD *)(v9 + 496) == *((_DWORD *)a3 + 1))
    {
      memcpy(__dst, (const void *)(v9 + 152), sizeof(__dst));
      int v10 = 1;
    }
    else
    {
LABEL_11:
      int v10 = 0;
    }
    BlueFin::GlMeSrdSatReportMgr::DestroySatReport((uint64_t)this, a2);
  }
  else
  {
    int v10 = 0;
  }
  BOOL v11 = BlueFin::GlBigArray::Missing(*((BlueFin::GlBigArray **)this + 456), *(unsigned __int8 *)a2 + 100 * *((unsigned __int8 *)a2 + 4));
  uint64_t v12 = *((void *)this + 456);
  if (!v11)
  {
    if (*(unsigned __int8 *)a2 + 100 * *((unsigned __int8 *)a2 + 4) - *(unsigned __int16 *)(v12 + 28) < *(unsigned __int16 *)(v12 + 30))
    {
      unsigned int v22 = *(unsigned __int16 *)(*(void *)(v12 + 8)
                                + 2
                                * (unsigned __int16)(*(unsigned __int8 *)a2
                                                   + 100 * *((unsigned __int8 *)a2 + 4)
                                                   - *(_WORD *)(v12 + 28)));
      if (*(unsigned __int16 *)(v12 + 32) > v22)
      {
        double v21 = (_DWORD *)(*(void *)v12 + *(_DWORD *)(v12 + 24) * v22);
        if (*((unsigned __int8 *)v21 + 492) == *(unsigned __int8 *)a3 && v21[124] == *((_DWORD *)a3 + 1)) {
          goto LABEL_35;
        }
        char v27 = "pSatReport->GetSignalIndex() == otSignalId";
        DeviceFaultNotify("glmesrd_sat_report_mgr.cpp", 225, "GetSatReportPtr", (char)"pSatReport->GetSignalIndex() == otSignalId");
        int v28 = "glmesrd_sat_report_mgr.cpp";
        int v29 = 225;
LABEL_47:
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v28, v29, v27);
      }
LABEL_45:
      char v27 = "slot < m_usNumSlots";
      DeviceFaultNotify("glinc_array.h", 319, "EnsureValidSlot", (char)"slot < m_usNumSlots");
      int v28 = "glinc_array.h";
      int v29 = 319;
      goto LABEL_47;
    }
LABEL_44:
    char v27 = "handle - m_usMinHandle < m_usNumHandles";
    DeviceFaultNotify("glinc_array.h", 313, "EnsureValidHandle", (char)"handle - m_usMinHandle < m_usNumHandles");
    int v28 = "glinc_array.h";
    int v29 = 313;
    goto LABEL_47;
  }
  if (*(__int16 *)(v12 + 34) != -1) {
    goto LABEL_25;
  }
  if (!*(_WORD *)(v12 + 32)) {
    goto LABEL_49;
  }
  unint64_t v13 = 0;
  unsigned __int16 v14 = -1;
  unsigned int v15 = -1;
  do
  {
    int v16 = (unsigned __int16)(*(_WORD *)(v12 + 28) + *(_WORD *)(*(void *)(v12 + 16) + 2 * v13));
    if (!BlueFin::GlBigArray::Has((BlueFin::GlBigArray *)v12, v16))
    {
      char v27 = "m_potArray->Has(handle)";
      DeviceFaultNotify("glinc_array.h", 362, "Next", (char)"m_potArray->Has(handle)");
      int v28 = "glinc_array.h";
      int v29 = 362;
      goto LABEL_47;
    }
    uint64_t v17 = *((void *)this + 456);
    if (v16 - *(unsigned __int16 *)(v17 + 28) >= *(unsigned __int16 *)(v17 + 30)) {
      goto LABEL_44;
    }
    unsigned int v18 = *(unsigned __int16 *)(*(void *)(v17 + 8) + 2 * (unsigned __int16)(v16 - *(_WORD *)(v17 + 28)));
    if (*(unsigned __int16 *)(v17 + 32) <= v18) {
      goto LABEL_45;
    }
    ++v13;
    unsigned int v19 = *(_DWORD *)(*(void *)v17 + *(_DWORD *)(v17 + 24) * v18 + 24);
    if (v19 < v15)
    {
      unsigned __int16 v14 = v16;
      unsigned int v15 = v19;
    }
  }
  while (v13 < *(unsigned __int16 *)(v12 + 32));
  if (v14 == 0xFFFF)
  {
LABEL_49:
    char v27 = "usHandleOlder != 0xFFFF";
    DeviceFaultNotify("glmesrd_sat_report_mgr.cpp", 200, "GetSatReportPtr", (char)"usHandleOlder != 0xFFFF");
    int v28 = "glmesrd_sat_report_mgr.cpp";
    int v29 = 200;
    goto LABEL_47;
  }
  BlueFin::GlMeSrdSatReportMgr::DestroySatReportByHandle(this, v14);
  uint64_t v12 = *((void *)this + 456);
LABEL_25:
  unsigned __int8 v20 = BlueFin::GlBigArray::Add((BlueFin::GlBigArray *)v12, *(unsigned __int8 *)a2 + 100 * *((unsigned __int8 *)a2 + 4));
  if (!v20)
  {
    char v27 = "pSlot != nullptr";
    DeviceFaultNotify("glmesrd_sat_report_mgr.cpp", 206, "GetSatReportPtr", (char)"pSlot != nullptr");
    int v28 = "glmesrd_sat_report_mgr.cpp";
    int v29 = 206;
    goto LABEL_47;
  }
  double v21 = v20;
  BlueFin::GlMeSrdSatReport::GlMeSrdSatReport((uint64_t)v20, (uint64_t)this + 24, *(unsigned char *)a2, (uint64_t)a3, *((void *)this + 1), *((void *)this + 2));
  if (v10) {
    memcpy(v21 + 38, __dst, 0x150uLL);
  }
LABEL_35:
  if (*(unsigned __int8 *)a3 - 33 <= 0x12
    && !(*(uint64_t (**)(void, void))(**((void **)this + 458) + 16))(*((void *)this + 458), *(unsigned __int8 *)a2))
  {
    uint64_t v24 = (*(uint64_t (**)(void, void))(**((void **)this + 458) + 24))(*((void *)this + 458), *(unsigned __int8 *)a2);
    if (v24)
    {
      *(unsigned char *)(v24 + 416) = 0;
      *(_OWORD *)(v24 + 384) = 0u;
      *(_OWORD *)(v24 + 400) = 0u;
      *(_OWORD *)(v24 + 352) = 0u;
      *(_OWORD *)(v24 + 368) = 0u;
      *(_OWORD *)(v24 + 320) = 0u;
      *(_OWORD *)(v24 + 336) = 0u;
      *(_OWORD *)(v24 + 288) = 0u;
      *(_OWORD *)(v24 + 304) = 0u;
      *(_OWORD *)(v24 + 256) = 0u;
      *(_OWORD *)(v24 + 272) = 0u;
      *(_OWORD *)(v24 + 224) = 0u;
      *(_OWORD *)(v24 + 240) = 0u;
      *(_OWORD *)(v24 + 192) = 0u;
      *(_OWORD *)(v24 + 208) = 0u;
      *(_OWORD *)(v24 + 160) = 0u;
      *(_OWORD *)(v24 + 176) = 0u;
      *(_OWORD *)(v24 + 128) = 0u;
      *(_OWORD *)(v24 + 144) = 0u;
      *(_OWORD *)(v24 + 96) = 0u;
      *(_OWORD *)(v24 + 112) = 0u;
      *(_OWORD *)(v24 + 64) = 0u;
      *(_OWORD *)(v24 + 80) = 0u;
      *(_OWORD *)(v24 + 32) = 0u;
      *(_OWORD *)(v24 + 48) = 0u;
      *(_OWORD *)uint64_t v24 = 0u;
      *(_OWORD *)(v24 + 16) = 0u;
      *(_WORD *)(v24 + 417) = 255;
      *((void *)v21 + 433) = v24;
    }
  }
  if (*(unsigned __int8 *)a3 - 1 <= 0x1F
    && !(*(uint64_t (**)(void, void))(**((void **)this + 459) + 16))(*((void *)this + 459), *(unsigned __int8 *)a2))
  {
    int v25 = (BlueFin::GlMeSrdEstLowTow *)(*(uint64_t (**)(void, void))(**((void **)this + 459) + 24))(*((void *)this + 459), *(unsigned __int8 *)a2);
    if (v25) {
      *((void *)v21 + 434) = BlueFin::GlMeSrdEstLowTow::GlMeSrdEstLowTow(v25);
    }
  }
  return v21;
}

BOOL BlueFin::GlBigArray::Missing(BlueFin::GlBigArray *this, int a2)
{
  unsigned int v2 = a2 - *((unsigned __int16 *)this + 14);
  if (v2 >= *((unsigned __int16 *)this + 15))
  {
    DeviceFaultNotify("glinc_array.h", 313, "EnsureValidHandle", (char)"handle - m_usMinHandle < m_usNumHandles");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glinc_array.h", 313, "handle - m_usMinHandle < m_usNumHandles");
  }
  return *(__int16 *)(*((void *)this + 1) + 2 * v2) == -1;
}

uint64_t BlueFin::GlMeSrdSatReport::GlMeSrdSatReport(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = a5;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a6;
  *(_WORD *)(a1 + 152) = 256;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 154) = 0u;
  *(_OWORD *)(a1 + 170) = 0u;
  *(_OWORD *)(a1 + 186) = 0u;
  *(_OWORD *)(a1 + 202) = 0u;
  *(_OWORD *)(a1 + 396) = 0u;
  *(_OWORD *)(a1 + 380) = 0u;
  *(_OWORD *)(a1 + 364) = 0u;
  *(_OWORD *)(a1 + 348) = 0u;
  *(_OWORD *)(a1 + 332) = 0u;
  *(_OWORD *)(a1 + 316) = 0u;
  *(_OWORD *)(a1 + 300) = 0u;
  *(_OWORD *)(a1 + 284) = 0u;
  *(_OWORD *)(a1 + 268) = 0u;
  *(_OWORD *)(a1 + 220) = 0u;
  uint64_t v7 = a1 + 220;
  *(_OWORD *)(a1 + 444) = 0u;
  *(_OWORD *)(a1 + 460) = 0u;
  *(_OWORD *)(a1 + 412) = 0u;
  *(_OWORD *)(a1 + 428) = 0u;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_OWORD *)(a1 + 252) = 0u;
  *(unsigned char *)(a1 + 488) = a3;
  *(unsigned char *)(a1 + 492) = *(unsigned char *)a4;
  int v8 = *(_DWORD *)(a4 + 4);
  *(_WORD *)(a1 + 500) = *(_WORD *)(a4 + 8);
  *(_DWORD *)(a1 + 496) = v8;
  BlueFin::GlMeSrdCorrVecAccumulator::GlMeSrdCorrVecAccumulator(a1 + 512, 10, 0, 1);
  BlueFin::GlMeSrdCorrVecAccumulator::GlMeSrdCorrVecAccumulator(v7 + 804, 10, 1, 1);
  *(void *)(v7 + 1316) = &unk_270EBD1D8;
  *(void *)(v7 + 1324) = 0;
  *(void *)(v7 + 1329) = 0;
  *(_DWORD *)(v7 + 1340) = -1;
  *(_WORD *)(v7 + 1344) = 575;
  *(void *)(v7 + 1484) = v7 + 1380;
  for (uint64_t i = 1600; i != 1700; i += 20)
    *(unsigned char *)(a1 + i) = 0;
  *(void *)(a1 + 1728) = &unk_270EBD160;
  *(void *)(a1 + 1736) = &unk_270EBD248;
  *(unsigned char *)(a1 + 1744) = 0;
  *(unsigned char *)(a1 + 1748) = 0;
  *(_DWORD *)(a1 + 1752) = -1;
  *(_WORD *)(a1 + 1756) = 575;
  *(void *)(a1 + 1760) = &unk_270EBD248;
  *(unsigned char *)(a1 + 1768) = 1;
  *(unsigned char *)(a1 + 1772) = 0;
  *(_DWORD *)(a1 + 1776) = -1;
  *(_WORD *)(a1 + 1780) = 575;
  *(void *)(a1 + 1784) = &unk_270EBD268;
  *(_WORD *)(a1 + 1792) = 0;
  *(void *)(a1 + 1824) = &unk_270EBCFD0;
  BlueFin::GlMeSrdEstBitPhsDeltaHistObsBuf::GlMeSrdEstBitPhsDeltaHistObsBuf(a1 + 1856);
  *(_DWORD *)(a1 + 2656) = 0;
  *(_WORD *)(a1 + 2660) = 0;
  BlueFin::GlMeSrdEstCarrPrm::GlMeSrdEstCarrPrm((BlueFin::GlMeSrdEstCarrPrm *)(a1 + 2688));
  *(void *)(a1 + 3232) = &unk_270EBD078;
  *(unsigned char *)(a1 + 3240) = 0;
  *(_DWORD *)(a1 + 3244) = -1;
  *(_WORD *)(a1 + 3248) = 575;
  *(unsigned char *)(a1 + 3252) = 0;
  *(void *)(a1 + 3256) = 0;
  *(_WORD *)(a1 + 3264) = 0;
  *(_DWORD *)(a1 + 3268) = 0;
  BlueFin::GlMeSrdCodePhsValidity::GlMeSrdCodePhsValidity(a1 + 3272);
  *(_DWORD *)(a1 + 3272) = 0;
  *(void *)(a1 + 3448) = &unk_270EBD320;
  *(unsigned char *)(a1 + 3456) = 0;
  *(_DWORD *)(a1 + 3457) = 0;
  *(_OWORD *)(a1 + 3464) = 0u;
  *(void *)(a1 + 3480) = &unk_270EBD350;
  *(void *)(a1 + 3488) = 0;
  *(_WORD *)(a1 + 3496) = 0;
  *(_DWORD *)(a1 + 3500) = 0;
  *(unsigned char *)(a1 + 3504) = 0;
  *(void *)(a1 + 3508) = 0;
  *(_OWORD *)(a1 + 3544) = 0u;
  *(_OWORD *)(a1 + 3524) = 0u;
  *(_WORD *)(a1 + 3540) = 0;
  BlueFin::GlMeSrdSatRptNonL1VetSm::GlMeSrdSatRptNonL1VetSm((BlueFin::GlMeSrdSatRptNonL1VetSm *)(a1 + 3560));
  return a1;
}

void sub_26397368C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, void *a17, uint64_t a18)
{
  *double v21 = v18;
  *unsigned int v22 = v26;
  *unsigned __int8 v20 = v25;
  void *v24 = &unk_270EBD048;
  *a9 = v23;
  *a11 = a10;
  *a13 = a12;
  *a15 = a14;
  *a17 = a16;
  *unsigned int v19 = a18;
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlMeSrdCorrVecAccumulator::GlMeSrdCorrVecAccumulator(uint64_t result, char a2, int a3, int a4)
{
  uint64_t v4 = 0;
  *(void *)uint64_t result = &unk_270EBD0A8;
  *(_DWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 12) = a4;
  *(unsigned char *)(result + 20) = a2;
  *(unsigned char *)(result + 22) = 0;
  *(void *)(result + 32) = &unk_270EBCF80;
  *(void *)(result + 464) = result + 64;
  do
  {
    uint64_t v5 = *(void *)(result + 464) + v4;
    *(_OWORD *)(v5 + 24) = 0uLL;
    *(_OWORD *)(v5 + 8) = 0uLL;
    *(_DWORD *)uint64_t v5 = 0;
    *(_DWORD *)(v5 + 3) = 0;
    v4 += 40;
  }
  while (v4 != 400);
  *(void *)(result + 480) = *(void *)(result + 464);
  if (!*(unsigned char *)(result + 20))
  {
    int v8 = "m_ucNumVecs > 0";
    DeviceFaultNotify("glmesrd_corrvec_accumulator.cpp", 60, "GlMeSrdCorrVecAccumulator", (char)"m_ucNumVecs > 0");
    int v9 = 60;
    goto LABEL_10;
  }
  if (*(unsigned __int8 *)(result + 20) >= 0xBu)
  {
    int v8 = "m_ucNumVecs <= GlMeSrdCorrvecAccumulatorArrays::SRD_CORRVEC_MAX_VECS";
    DeviceFaultNotify("glmesrd_corrvec_accumulator.cpp", 61, "GlMeSrdCorrVecAccumulator", (char)"m_ucNumVecs <= GlMeSrdCorrvecAccumulatorArrays::SRD_CORRVEC_MAX_VECS");
    int v9 = 61;
LABEL_10:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_corrvec_accumulator.cpp", v9, v8);
  }
  uint64_t v6 = 0;
  *(unsigned char *)(result + 21) = 0;
  *(_DWORD *)(result + 16) = 0;
  do
  {
    uint64_t v7 = *(void *)(result + 480) + v6;
    *(_OWORD *)(v7 + 24) = 0uLL;
    *(_OWORD *)(v7 + 8) = 0uLL;
    *(_DWORD *)uint64_t v7 = 0;
    *(_DWORD *)(v7 + 3) = 0;
    v6 += 40;
  }
  while (v6 != 400);
  *(_WORD *)(result + 488) = 0;
  *(unsigned char *)(result + 22) = 0;
  return result;
}

uint64_t BlueFin::GlMeSrdEstBitPhsDeltaHistObsBuf::GlMeSrdEstBitPhsDeltaHistObsBuf(uint64_t this)
{
  uint64_t v1 = 0;
  *(void *)this = this + 32;
  *(_WORD *)(this + 8) = 1792;
  *(unsigned char *)(this + 10) = 0;
  *(_WORD *)(this + 12) = 108;
  *(void *)(this + 16) = BlueFin::GlMeSrdEstBitPhsHistBuf::Print;
  *(unsigned char *)(this + 24) = 1;
  do
  {
    uint64_t v2 = this + v1;
    *(unsigned char *)(v2 + 32) = 0;
    *(_OWORD *)(v2 + 36) = 0uLL;
    *(_OWORD *)(v2 + 52) = 0uLL;
    *(_OWORD *)(v2 + 68) = 0uLL;
    *(_OWORD *)(v2 + 84) = 0uLL;
    *(_OWORD *)(v2 + 100) = 0uLL;
    *(_OWORD *)(v2 + 116) = 0uLL;
    v1 += 108;
    *(void *)(v2 + 132) = 0;
  }
  while (v1 != 756);
  return this;
}

BlueFin::GlMeSrdSatRptNonL1VetSm *BlueFin::GlMeSrdSatRptNonL1VetSm::GlMeSrdSatRptNonL1VetSm(BlueFin::GlMeSrdSatRptNonL1VetSm *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = "STARTING";
  *((void *)this + 3) = "OFF";
  *((void *)this + 4) = 0;
  *(void *)this = &unk_270EBD510;
  *((unsigned char *)this + 44) = 0;
  *((_DWORD *)this + 12) = 1065353216;
  *((_WORD *)this + 26) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *((_OWORD *)this + 6) = _Q0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((_DWORD *)this + 10) = 1;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((void *)this + 11) = 0xBF80000000000000;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  BlueFin::QHsm::ctor((uint64_t)this, (uint64_t)BlueFin::GlMeSrdSatRptNonL1VetSm::initial);
  BlueFin::QHsm::init((uint64_t)this, 0);
  return this;
}

void *BlueFin::QHsm::init(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (*(uint64_t (**)())(a1 + 8) != BlueFin::QHsm::top || (unint64_t v3 = *(void *)(a1 + 32)) == 0)
  {
    DeviceFaultNotify("glhsm_qhsm.cpp", 42, "init", (char)"myState == &QHsm::top && mySource != 0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glhsm_qhsm.cpp", 42, "myState == &QHsm::top && mySource != 0");
  }
  long long v14 = 0u;
  long long v13 = 0u;
  v11[0] = 0;
  if (!BlueFin::patch_trigger(v3, a1, a2, v11)) {
    (*(void (**)(uint64_t, unsigned __int8 *))(a1 + 32))(a1, a2);
  }
  v11[1] = 0;
  uint64_t v5 = BlueFin::QHsm::top;
  do
  {
    while (1)
    {
      uint64_t v6 = *(void (**)(uint64_t, void *))(a1 + 8);
      uint64_t v12 = v6;
      if (BlueFin::patch_trigger((unint64_t)v6, a1, BlueFin::__pkgStdEvt, &BlueFin::_patched_state)) {
        uint64_t v7 = (uint64_t (*)())BlueFin::_patched_state;
      }
      else {
        uint64_t v7 = (uint64_t (*)())((uint64_t (*)(uint64_t, unsigned __int8 *))v6)(a1, BlueFin::__pkgStdEvt);
      }
      int v8 = &v12;
      if (v7 != v5)
      {
        do
        {
          v8[1] = (void (*)(uint64_t, void *))v7;
          ++v8;
          if (BlueFin::patch_trigger((unint64_t)v7, a1, BlueFin::__pkgStdEvt, &BlueFin::_patched_state)) {
            uint64_t v7 = (uint64_t (*)())BlueFin::_patched_state;
          }
          else {
            uint64_t v7 = (uint64_t (*)())((uint64_t (*)(uint64_t, unsigned __int8 *))v7)(a1, BlueFin::__pkgStdEvt);
          }
        }
        while (v7 != v5);
        uint64_t v6 = *v8;
      }
      do
      {
        if (!BlueFin::patch_trigger((unint64_t)v6, a1, byte_263BAB11C, &BlueFin::_patched_state)) {
          (*v8)(a1, byte_263BAB11C);
        }
        int v9 = *--v8;
        uint64_t v6 = v9;
      }
      while (v9);
      uint64_t v5 = *(uint64_t (**)())(a1 + 8);
      if (!BlueFin::patch_trigger((unint64_t)v5, a1, byte_263BAB11A, &BlueFin::_patched_state)) {
        break;
      }
      uint64_t result = BlueFin::_patched_state;
      if (BlueFin::_patched_state) {
        return result;
      }
    }
    uint64_t result = (void *)((uint64_t (*)(uint64_t, unsigned __int8 *))v5)(a1, byte_263BAB11A);
  }
  while (!result);
  return result;
}

#error "263973BF8: call analysis failed (funcsize=58)"

uint64_t (*BlueFin::GlMeSrdSatRptNonL1VetSm::my_top(uint64_t a1, unsigned __int8 *a2))()
{
  int v2 = *a2;
  if (v2 == 7)
  {
    BlueFin::QHsm::tran((void *)a1, BlueFin::GlMeSrdSatRptNonL1VetSm::grid_search, (uint64_t)"&GlMeSrdSatRptNonL1VetSm::grid_search");
    return 0;
  }
  if (v2 == 3) {
    return 0;
  }
  if (v2 != 2) {
    return BlueFin::QHsm::top;
  }
  uint64_t v3 = 0;
  *(_WORD *)(a1 + 40) = 1;
  return (uint64_t (*)())v3;
}

uint64_t BlueFin::QHsm::ctor(uint64_t result, uint64_t a2)
{
  *(void *)(result + 8) = BlueFin::QHsm::top;
  *(void *)(result + 32) = a2;
  return result;
}

uint64_t (*BlueFin::GlMeSrdCtrlSm::my_top(uint64_t a1, unsigned __int8 *a2))()
{
  unsigned int v3 = *a2;
  if (v3 <= 0x11)
  {
    if (v3 - 2 >= 2)
    {
      if (v3 == 17)
      {
        if (*(unsigned char *)(a1 + 219))
        {
          if (*(unsigned char *)(*(void *)(a1 + 136) + 2136)) {
            (*(void (**)(void, double))(**(void **)(a1 + 152) + 32))(*(void *)(a1 + 152), *(double *)(a1 + 3608));
          }
          *(void *)(a1 + 2784) = *(void *)(a1 + 3608);
          uint64_t v4 = (BlueFin::GlQueue *)(a1 + 2600);
          int v5 = 43;
          goto LABEL_13;
        }
        DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 1243, "my_top", (char)"me->m_bAsicInitDone");
        int v8 = 1243;
        goto LABEL_18;
      }
      return BlueFin::QHsm::top;
    }
    return 0;
  }
  if (v3 == 18)
  {
    if (*(unsigned char *)(a1 + 219))
    {
      __int16 v6 = *(_WORD *)(a1 + 3640);
      *(void *)(a1 + 3032) = *(void *)(a1 + 3632);
      *(_WORD *)(a1 + 3040) = v6;
      uint64_t v4 = (BlueFin::GlQueue *)(a1 + 2856);
      int v5 = 46;
LABEL_13:
      BlueFin::GlQueue::putFIFO(v4, v5, 0);
      return 0;
    }
    DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 1235, "my_top", (char)"me->m_bAsicInitDone");
    int v8 = 1235;
LABEL_18:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_ctrl_sm.cpp", v8, "me->m_bAsicInitDone");
  }
  if (v3 == 38)
  {
    BlueFin::QHsm::tran((void *)a1, (uint64_t (*)())BlueFin::GlMeSrdCtrlSm::com_breakdown, (uint64_t)"com_breakdown");
    return 0;
  }
  return BlueFin::QHsm::top;
}

uint64_t (*BlueFin::GlMeSrdAsicinit::off(uint64_t a1, unsigned __int8 *a2))()
{
  unsigned int v3 = *a2;
  if (v3 > 0x17)
  {
    if (v3 != 24 && v3 != 26) {
      return BlueFin::QHsm::top;
    }
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 128) + 104))(*(void *)(a1 + 128)))
    {
      *(_DWORD *)(a1 + 740) = 1000;
      int v5 = "&GlMeSrdAsicinit::meif_wait4passthrough";
      __int16 v6 = (uint64_t (*)())BlueFin::GlMeSrdAsicinit::meif_wait4passthrough;
    }
    else
    {
      uint64_t v8 = *(void *)(a1 + 128);
      if (*(_DWORD *)(v8 + 8) == 3 && *(unsigned char *)(v8 + 1418))
      {
        int v5 = "&GlMeSrdAsicinit::wait4Mcuversion";
        __int16 v6 = (uint64_t (*)())BlueFin::GlMeSrdAsicinit::wait4Mcuversion;
      }
      else
      {
        int v5 = "&GlMeSrdAsicinit::bri_startup_asic";
        __int16 v6 = (uint64_t (*)())BlueFin::GlMeSrdAsicinit::bri_startup_asic;
      }
    }
    BlueFin::QHsm::tran((void *)a1, v6, (uint64_t)v5);
  }
  else
  {
    if (v3 == 2)
    {
      uint64_t result = 0;
      *(_WORD *)(a1 + 732) = 0;
      *(_WORD *)(a1 + 696) = 0;
      *(unsigned char *)(a1 + 698) = 0;
      *(_WORD *)(a1 + 735) = 256;
      *(unsigned char *)(a1 + 737) = 1;
      *(_DWORD *)(a1 + 636) = 0;
      *(unsigned char *)(*(void *)(a1 + 128) + 1423) = 0;
      return result;
    }
    if (v3 != 3) {
      return BlueFin::QHsm::top;
    }
  }
  return 0;
}

void *BlueFin::GlMeSrdSatRptNonL1VetSm::initial(void *result)
{
  result[1] = BlueFin::GlMeSrdSatRptNonL1VetSm::wait_for_aided_track;
  uint64_t v1 = result[2];
  if (result[3] != v1) {
    result[3] = v1;
  }
  result[2] = "&GlMeSrdSatRptNonL1VetSm::wait_for_aided_track";
  return result;
}

uint64_t BlueFin::GlMeSrdCodePhsValidity::GlMeSrdCodePhsValidity(uint64_t this)
{
  uint64_t v1 = 0;
  *(_DWORD *)this = 0;
  *(_OWORD *)(this + 56) = 0u;
  *(void *)(this + 8) = this + 56;
  *(_WORD *)(this + 16) = 2560;
  *(unsigned char *)(this + 18) = 0;
  *(_WORD *)(this + 20) = 4;
  *(void *)(this + 24) = BlueFin::GlMeSrdEstCodePrm::PrintValidityMagSqrdBufElem;
  *(void *)(this + 32) = this + 96;
  *(_WORD *)(this + 40) = 2560;
  *(unsigned char *)(this + 42) = 0;
  *(_WORD *)(this + 44) = 8;
  *(void *)(this + 48) = BlueFin::GlMeSrdEstCodePrm::PrintValidityEarlyLateBufElem;
  *(_OWORD *)(this + 72) = 0u;
  *(void *)(this + 88) = 0;
  do
  {
    uint64_t v2 = this + v1;
    *(_DWORD *)(v2 + 96) = 0;
    *(_WORD *)(v2 + 100) = 0;
    *(unsigned char *)(v2 + 102) = 0;
    v1 += 8;
  }
  while (v1 != 80);
  return this;
}

double BlueFin::GlMeSrdEstCarrPrm::GlMeSrdEstCarrPrm(BlueFin::GlMeSrdEstCarrPrm *this)
{
  uint64_t v1 = 0;
  *(void *)this = &unk_270EBD048;
  *((_DWORD *)this + 28) = 0;
  *((_OWORD *)this + 9) = 0u;
  *((void *)this + 15) = (char *)this + 144;
  *((_WORD *)this + 64) = 2560;
  *((unsigned char *)this + 130) = 0;
  *((_WORD *)this + 66) = 4;
  *((void *)this + 17) = BlueFin::GlMeSrdEstCarrPrm::PrintValidityMagSqrdBufElem;
  *((_OWORD *)this + 10) = 0u;
  *((void *)this + 22) = 0;
  *((void *)this + 49) = (char *)this + 192;
  *((void *)this + 50) = (char *)this + 192;
  *((_WORD *)this + 204) = 2560;
  *((unsigned char *)this + 410) = 0;
  *((_WORD *)this + 206) = 20;
  *((void *)this + 52) = BlueFin::GlMeSrdEstCarrPrm::PrintValidityMultiSecLagOneBufElem;
  do
  {
    uint64_t v2 = *((void *)this + 49) + v1;
    *(void *)uint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 16) = 0;
    v1 += 20;
  }
  while (v1 != 200);
  *((void *)this + 56) = 0xFFFFFFFF00000000;
  *((unsigned char *)this + 456) = 0;
  *((_DWORD *)this + 115) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((void *)this + 13) = 0;
  *((_WORD *)this + 232) = 575;
  *((_DWORD *)this + 117) = 0;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  return result;
}

void BlueFin::GlMeSrdSatReport::ProcessMsmt(uint64_t a1, uint64_t a2, int a3, __int16 a4, uint64_t a5, const BlueFin::GlSignalId *a6, char *a7, BlueFin::GlMeSrdStats *a8)
{
  int v8 = *(_DWORD *)(a2 + 8);
  if ((~v8 & 0xA) != 0)
  {
    if ((~v8 & 0x12) != 0)
    {
      if ((~v8 & 0x10002) == 0) {
        BlueFin::GlMeSrdSatReport::ProcessSniffMsmt(a1, a2, (uint64_t)a6, a3, a5, a7);
      }
    }
    else
    {
      BlueFin::GlMeSrdSatReport::ProcessTrkMsmt(a1, a2, a6, a3, a4, a5, a8);
    }
  }
  else
  {
    BlueFin::GlMeSrdSatReport::ProcessSrchMsmt(a1, a2, (uint64_t)a6, a3, a5);
  }
}

void BlueFin::GlMeSrdRptCtrl::Run(uint64_t a1, double a2, double a3, double a4, double a5, float a6, float a7, double a8, double a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned char *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,int a21,unsigned __int8 *a22,char a23,int a24,char a25,char a26,char a27,unsigned __int8 a28,unsigned __int8 a29,char a30,char a31,char a32,char a33,char a34,char a35,char a36,unsigned __int8 a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  unsigned __int8 v53 = a22;
  BlueFin::GlMeDSPMeas::init(a39, (uint64_t)a22);
  if (a38) {
    *(_DWORD *)(a39 + 84) |= 0x2000000u;
  }
  int v201 = (BlueFin::GlMeSrdAsicUnitConverter *)(a39 + 100);
  if ((unsigned __int8 *)(a39 + 100) != a22)
  {
    *(unsigned char *)(a39 + 100) = *a22;
    *(_DWORD *)(a39 + 104) = *((_DWORD *)a22 + 1);
    *(_WORD *)(a39 + 108) = *((_WORD *)a22 + 4);
  }
  *(unsigned char *)(a39 + 112) = a23;
  if (a21)
  {
    if (a21 == 1)
    {
      int v54 = 10;
      switch(a24)
      {
        case 0:
          goto LABEL_20;
        case 1:
          int v54 = 11;
          goto LABEL_20;
        case 2:
          int v54 = 12;
          goto LABEL_20;
        case 3:
          int v54 = 13;
          goto LABEL_20;
        case 5:
          BOOL v56 = a25 == 0;
          int v55 = 14;
          int v57 = 16;
          goto LABEL_16;
        case 6:
          int v54 = 17;
LABEL_20:
          *(_DWORD *)(a39 + 140) = v54;
          *(unsigned char *)(a39 + 144) = a32;
          *(_DWORD *)(a39 + 84) |= 0x100u;
          *(_DWORD *)(a39 + 48) = a20;
          *(_DWORD *)(a39 + 52) = a20;
          goto LABEL_21;
        default:
          float v189 = "0";
          DeviceFaultNotify("glmesrd_rptctrl.cpp", 167, "Run", (char)"0");
          float v190 = "glmesrd_rptctrl.cpp";
          int v191 = 167;
          goto LABEL_304;
      }
    }
    float v189 = "0";
    DeviceFaultNotify("glmesrd_rptctrl.cpp", 175, "Run", (char)"0");
    float v190 = "glmesrd_rptctrl.cpp";
    int v191 = 175;
LABEL_304:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v190, v191, v189);
  }
  if (a27) {
    int v55 = 9;
  }
  else {
    int v55 = 8;
  }
  BOOL v56 = a28 == 0;
  int v57 = 15;
LABEL_16:
  if (!v56) {
    int v55 = v57;
  }
  *(_DWORD *)(a39 + 140) = v55;
  *(unsigned char *)(a39 + 144) = a32;
  *(_DWORD *)(a39 + 48) = 0;
LABEL_21:
  if (*(unsigned char *)a11)
  {
    *(_DWORD *)(a39 + 40) = *(_DWORD *)(a11 + 8);
    *(_DWORD *)(a39 + 84) |= 0x40000u;
  }
  if (*((unsigned __int16 *)a22 + 4) >= 0x23Fu)
  {
    float v189 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 806, "GetChipsPerSec", (char)"IsValid()");
    float v190 = "glsignalid.h";
    int v191 = 806;
    goto LABEL_304;
  }
  uint64_t v197 = a16;
  uint64_t v194 = a15;
  uint64_t v58 = BlueFin::GlSvId::s_aucSvId2gnss[*a22];
  uint64_t v59 = *((int *)a22 + 1);
  int v60 = BlueFin::GlSignalId::s_aulSignalIndexAndGnss2chipsPerEpoch[7 * (int)v59 + v58];
  unsigned int v61 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v59 - v59 + v58];
  if (v60) {
    BOOL v62 = v61 == 0;
  }
  else {
    BOOL v62 = 1;
  }
  if (v62)
  {
    float v189 = "ulChipsPerEpoch != 0 && ulMsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 814, "GetChipsPerSec", (char)"ulChipsPerEpoch != 0 && ulMsPerEpoch != 0");
    float v190 = "glsignalid.h";
    int v191 = 814;
    goto LABEL_304;
  }
  unsigned int v198 = v61;
  int EpochPerSymbol = BlueFin::GlSignalId::GetEpochPerSymbol((BlueFin::GlSignalId *)a22);
  if (*((unsigned __int16 *)a22 + 4) >= 0x23Fu) {
    goto LABEL_293;
  }
  if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)a22 + 1)
                                                              - *((int *)a22 + 1)
                                                              + BlueFin::GlSvId::s_aucSvId2gnss[*a22]])
    goto LABEL_294;
  int v65 = EpochPerSymbol;
  unsigned int v195 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)a22 + 1)
                                                                                - *((int *)a22 + 1)
                                                                                + BlueFin::GlSvId::s_aucSvId2gnss[*a22]];
  if (*(unsigned char *)(a13 + 1))
  {
    *(_DWORD *)(a39 + 84) |= 0x40u;
    float v66 = *(double *)(a13 + 8);
    *(float *)(a39 + 32) = BlueFin::GlMeSrdAsicUnitConverter::HzToPpu(v201, v66, v64);
    float v68 = BlueFin::GlMeSrdAsicUnitConverter::HzToPpu(v201, *(float *)(a13 + 16), v67);
    *(float *)(a39 + 56) = v68;
    float v69 = *(float *)(a39 + 32);
    *(_DWORD *)(a39 + 152) = 897988541;
    int v70 = a28;
    if (a28 && v68 >= 0.000000016) {
      *(_DWORD *)(a39 + 56) = 846234791;
    }
    unsigned __int8 v53 = a22;
  }
  else
  {
    float v71 = *(double *)(a13 + 8);
    float v69 = BlueFin::GlMeSrdAsicUnitConverter::HzToPpu(v201, v71, v64);
    *(_DWORD *)(a39 + 56) = 897988541;
    *(_DWORD *)(a39 + 152) = 897988541;
    int v70 = a28;
  }
  float v72 = (a8 + a9) / -299792458.0;
  float v73 = v69 + v72;
  *(float *)(a39 + 32) = v73;
  *(float *)(a39 + 148) = v73;
  int v74 = *(unsigned __int8 *)(a13 + 35);
  uint64_t v75 = &xmmword_263BAB000;
  if (*(unsigned __int8 *)(a13 + 34) | v74)
  {
    if (*(unsigned char *)(a13 + 34)) {
      *(_DWORD *)(a39 + 84) |= 0x80u;
    }
    if (v74) {
      *(_DWORD *)(a39 + 84) |= 0x800000u;
    }
    if (*((unsigned __int16 *)v53 + 4) >= 0x23Fu) {
      goto LABEL_295;
    }
    uint64_t v81 = *v53;
    uint64_t v82 = BlueFin::GlSvId::s_aucSvId2gnss[v81];
    double v83 = BlueFin::GlSignalId::s_adSignalType2ctrFreqHz[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)v53 + 1) - *((int *)v53 + 1) + v82]];
    if (v82 == 2)
    {
      double v84 = (double)(char)(v81 - 59);
      if ((v81 - 52) >= 0xE) {
        double v84 = -8.0;
      }
      double v83 = v83 + v84 * 562500.0;
    }
    double v85 = 299792458.0 / v83;
    double v80 = v85 * -*(double *)(a13 + 40);
    *(double *)(a39 + 8) = v80;
    *(float *)&double v85 = v85 * *(float *)(a13 + 56);
    *(_DWORD *)(a39 + 60) = LODWORD(v85);
    if (*(_DWORD *)(a39 + 48) <= 0x3E8u)
    {
      *(_DWORD *)(a39 + 60) = 2139095039;
      *(_DWORD *)(a39 + 84) = *(_DWORD *)(a39 + 84) & 0xFF7DFF7F | 0x20000;
      *(_DWORD *)(a42 + 100) |= 0x20u;
    }
  }
  else
  {
    if (*((unsigned __int16 *)v53 + 4) >= 0x23Fu) {
      goto LABEL_295;
    }
    uint64_t v76 = *v53;
    uint64_t v77 = BlueFin::GlSvId::s_aucSvId2gnss[v76];
    double v78 = BlueFin::GlSignalId::s_adSignalType2ctrFreqHz[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)v53 + 1) - *((int *)v53 + 1) + v77]];
    if (v77 == 2)
    {
      double v79 = (double)(char)(v76 - 59);
      if ((v76 - 52) >= 0xE) {
        double v79 = -8.0;
      }
      double v78 = v78 + v79 * 562500.0;
    }
    double v80 = 299792458.0 / v78 * -*(double *)(a13 + 40);
    *(double *)(a39 + 8) = v80;
    *(_DWORD *)(a39 + 60) = 2139095039;
    *(_DWORD *)(a39 + 84) = *(_DWORD *)(a39 + 84) & 0xFF7DFF7F | 0x20000;
  }
  if (!*(unsigned char *)(a13 + 36))
  {
    if (*((unsigned __int16 *)v53 + 4) < 0x23Fu)
    {
      uint64_t v96 = *v53;
      uint64_t v97 = BlueFin::GlSvId::s_aucSvId2gnss[v96];
      double v98 = BlueFin::GlSignalId::s_adSignalType2ctrFreqHz[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)v53 + 1) - *((int *)v53 + 1) + v97]];
      if (v97 == 2)
      {
        double v99 = (double)(char)(v96 - 59);
        if ((v96 - 52) >= 0xE) {
          double v99 = -8.0;
        }
        double v98 = v98 + v99 * 562500.0;
      }
      unsigned int v92 = v195;
      unsigned int v93 = v198;
      *(double *)(a39 + 120) = 299792458.0 / v98 * -*(double *)(a13 + 48);
      *(_DWORD *)(a39 + 128) = 2139095039;
      unsigned int v87 = *(_DWORD *)(a39 + 84) & 0xFEFFFFFF;
      goto LABEL_68;
    }
LABEL_295:
    float v189 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 650, "GetRfCarrierFrqHz", (char)"IsValid()");
    float v190 = "glsignalid.h";
    int v191 = 650;
    goto LABEL_304;
  }
  int v86 = *(_DWORD *)(a39 + 84);
  unsigned int v87 = v86 | 0x1000000;
  *(_DWORD *)(a39 + 84) = v86 | 0x1000000;
  if (*((unsigned __int16 *)v53 + 4) >= 0x23Fu) {
    goto LABEL_295;
  }
  uint64_t v88 = *v53;
  uint64_t v89 = BlueFin::GlSvId::s_aucSvId2gnss[v88];
  double v90 = BlueFin::GlSignalId::s_adSignalType2ctrFreqHz[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)v53 + 1) - *((int *)v53 + 1) + v89]];
  if (v89 == 2)
  {
    double v91 = (double)(char)(v88 - 59);
    if ((v88 - 52) >= 0xE) {
      double v91 = -8.0;
    }
    double v90 = v90 + v91 * 562500.0;
  }
  unsigned int v92 = v195;
  unsigned int v93 = v198;
  double v94 = 299792458.0 / v90;
  *(double *)(a39 + 120) = v94 * -*(double *)(a13 + 48);
  float v95 = v94 * *(float *)(a13 + 60);
  *(float *)(a39 + 128) = v95;
  if (*(_DWORD *)(a39 + 48) <= 0x3E8u)
  {
    *(_DWORD *)(a39 + 128) = 2139095039;
    unsigned int v87 = v86 & 0xFEFFFFFF;
LABEL_68:
    *(_DWORD *)(a39 + 84) = v87;
  }
  *(double *)&unint64_t v100 = 1.0 / (double)(1000 * v60 / v93);
  double v101 = v73 + 1.0;
  double v102 = *(double *)&v100 / v101;
  double v103 = (double)v92 * 0.001 / v101;
  LOBYTE(v100) = *(unsigned char *)(a12 + 1);
  double v104 = a2 - v103 * (double)v100 + v103 * (double)*(char *)(a12 + 2);
  if (*(unsigned char *)a12)
  {
    double v105 = (double)(v92 * v65) * 0.001 / v101;
    double v106 = v102 * *(double *)(a12 + 8);
    double v107 = v102 * *(float *)(a12 + 16);
    if (v106 > -v105 && v106 < v105) {
      double v105 = -0.0;
    }
    double v109 = v104 + v105 - v106;
    *(double *)(a39 + 24) = v109;
    float v110 = v107;
    *(float *)(a39 + 68) = v110;
    v87 |= 0x20u;
  }
  else
  {
    double v109 = v104 - a3;
    *(double *)(a39 + 24) = v104 - a3;
    if (*((unsigned __int16 *)v53 + 4) >= 0x23Fu) {
      goto LABEL_293;
    }
    if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)v53 + 1)
                                                                - *((int *)v53 + 1)
                                                                + BlueFin::GlSvId::s_aucSvId2gnss[*v53]])
      goto LABEL_294;
    float v111 = (double)BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)v53 + 1)
                                                                                          - *((int *)v53 + 1)
                                                                                          + BlueFin::GlSvId::s_aucSvId2gnss[*v53]]
         * 0.001;
    *(float *)(a39 + 68) = v111;
  }
  *(double *)(a39 + 8) = v80 + (a8 + a9) * v109;
  *(_DWORD *)(a39 + 64) = 0;
  int v112 = v87 | 0x4000010;
  unsigned int v113 = v87 & 0xFBFFFFEF | 0x10;
  if (*(unsigned char *)(a19 + 2)) {
    unsigned int v114 = v112;
  }
  else {
    unsigned int v114 = v113;
  }
  *(_DWORD *)(a39 + 84) = v114;
  uint64_t v115 = *(unsigned __int8 *)(a19 + 1);
  unsigned int v116 = a14;
  if (*(unsigned char *)(a19 + 1))
  {
    float v117 = (v104 - a3 - v109) / v102;
    unsigned int v118 = (float *)(a19 + 16);
    do
    {
      float *v118 = *v118 + v117;
      v118 += 5;
      --v115;
    }
    while (v115);
  }
  if ((*v53 + 117) >= 0x24u)
  {
    if (a14[8]) {
      BOOL v121 = *a14 == 0;
    }
    else {
      BOOL v121 = 1;
    }
    int v122 = !v121;
    BOOL v123 = !v121 && a14[9] != 0;
    if (a14[8]) {
      int v124 = v70;
    }
    else {
      int v124 = 0;
    }
    int v199 = v124;
    char v125 = BlueFin::GlSignalId::GetEpochPerSymbol(v201);
    if (*(unsigned __int16 *)(a39 + 108) < 0x23Fu)
    {
      uint64_t v126 = *(unsigned __int8 *)(a39 + 100);
      if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *(int *)(a39 + 104)
                                                                  - *(int *)(a39 + 104)
                                                                  + BlueFin::GlSvId::s_aucSvId2gnss[v126]])
        goto LABEL_294;
      int v127 = v199;
      if ((v126 + 81) >= 0xDCu) {
        int v127 = 0;
      }
      int v193 = v127;
      BOOL v196 = v123;
      if ((v126 - 76) > 0x3E)
      {
        unsigned __int8 v129 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *(int *)(a39 + 104)
                                                                     - *(int *)(a39 + 104)
                                                                     + BlueFin::GlSvId::s_aucSvId2gnss[v126]]
             * v125;
        goto LABEL_108;
      }
      char EpochPerBit = BlueFin::GlSignalId::GetEpochPerBit(v201);
      if (*(unsigned __int16 *)(a39 + 108) < 0x23Fu)
      {
        uint64_t v126 = *(unsigned __int8 *)(a39 + 100);
        if (BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *(int *)(a39 + 104)
                                                                   - *(int *)(a39 + 104)
                                                                   + BlueFin::GlSvId::s_aucSvId2gnss[v126]])
        {
          unsigned __int8 v129 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *(int *)(a39 + 104)
                                                                       - *(int *)(a39 + 104)
                                                                       + BlueFin::GlSvId::s_aucSvId2gnss[v126]]
               * EpochPerBit;
LABEL_108:
          unsigned int v130 = *(_DWORD *)(a1 + 20);
          double v109 = *(double *)(a39 + 24);
          if (v130 < 2) {
            goto LABEL_131;
          }
          int v131 = v122;
          double v132 = (v109 - *(double *)(a1 + 8)) * 1000.0;
          int v133 = (int)(v132 + -0.5);
          if (v132 >= 0.0) {
            int v133 = 0;
          }
          if (v132 > 0.0) {
            int v133 = (int)(v132 + 0.5);
          }
          unsigned int v134 = v129;
          double v135 = (double)v129;
          unsigned __int8 v136 = v129;
          double v137 = fmod((double)v133, v135);
          double v138 = -0.0;
          if (v137 < 0.0) {
            double v138 = (double)v134;
          }
          double v139 = v137 + v138;
          if (v139 < 0.0)
          {
            float v189 = "dMsDelta >= 0";
            DeviceFaultNotify("glmesrd_rptctrl.cpp", 861, "UpdatePromptBitState", (char)"dMsDelta >= 0");
            float v190 = "glmesrd_rptctrl.cpp";
            int v191 = 861;
            goto LABEL_304;
          }
          double v140 = 0.0;
          if (v139 > (double)(v136 >> 1)) {
            double v140 = (double)v134;
          }
          double v141 = v139 - v140;
          if (v141 >= v135)
          {
            float v189 = "dMsDelta < ucObservableBitIntInMs";
            DeviceFaultNotify("glmesrd_rptctrl.cpp", 865, "UpdatePromptBitState", (char)"dMsDelta < ucObservableBitIntInMs");
            float v190 = "glmesrd_rptctrl.cpp";
            int v191 = 865;
            goto LABEL_304;
          }
          unsigned __int8 v129 = v136;
          int v122 = v131;
          if (fabs(v141) < 0.5) {
            goto LABEL_131;
          }
          if (v141 <= 0.0)
          {
            if (v141 >= 0.0)
            {
              LOBYTE(v143) = 0;
              goto LABEL_126;
            }
            double v142 = -0.5;
          }
          else
          {
            double v142 = 0.5;
          }
          int v143 = (int)(v141 + v142);
LABEL_126:
          char v144 = *(unsigned char *)(a1 + 24) - v143;
          if ((int)v134 <= v144) {
            unsigned __int8 v145 = v129;
          }
          else {
            unsigned __int8 v145 = 0;
          }
          char v146 = v144 - v145;
          *(unsigned char *)(a1 + 24) = v146;
          if ((signed int)-v134 >= v146) {
            *(unsigned char *)(a1 + 24) = v146 + v129;
          }
LABEL_131:
          *(double *)(a1 + 8) = v109;
          int v120 = a21;
          switch(v130)
          {
            case 0u:
            case 1u:
              if (v122)
              {
                unsigned int v116 = a14;
                LOBYTE(v147) = a14[10];
                *(unsigned char *)(a1 + 24) = v147;
                *(_WORD *)(a1 + 16) = 0;
                if (v196) {
                  int v148 = 3;
                }
                else {
                  int v148 = 2;
                }
LABEL_154:
                *(_DWORD *)(a1 + 20) = v148;
                goto LABEL_189;
              }
              if (v193)
              {
                LOBYTE(v147) = 0;
                *(unsigned char *)(a1 + 24) = 0;
                *(_WORD *)(a1 + 16) = 0;
                int v148 = 2;
LABEL_171:
                *(_DWORD *)(a1 + 20) = v148;
                unsigned int v116 = a14;
                goto LABEL_189;
              }
              char v158 = v199 ^ 1;
              if ((a24 - 1) <= 2) {
                char v158 = 0;
              }
              if ((v158 & 1) == 0)
              {
                LOBYTE(v147) = 0;
                *(unsigned char *)(a1 + 24) = 0;
                int v148 = 1;
                goto LABEL_171;
              }
              unsigned int v116 = a14;
              if (!v130)
              {
                int v148 = 0;
                goto LABEL_192;
              }
              int v148 = 1;
              goto LABEL_188;
            case 2u:
              if (v122)
              {
                if (v196)
                {
                  *(_DWORD *)(a1 + 20) = 3;
                  unsigned int v116 = a14;
                  char v149 = a14[10];
                  int v150 = *(char *)(a1 + 24) - v149;
                  if (v150 < 0) {
                    int v150 = (char)a14[10] - *(char *)(a1 + 24);
                  }
                  if (v150 > 1) {
                    __int16 v151 = -1;
                  }
                  else {
                    __int16 v151 = 1;
                  }
                  *(_WORD *)(a1 + 16) = v151;
                  int v148 = 3;
                }
                else
                {
                  unsigned int v116 = a14;
                  char v149 = a14[10];
                  if (*(char *)(a1 + 24) - v149 >= 0) {
                    unsigned int v159 = *(char *)(a1 + 24) - (char)a14[10];
                  }
                  else {
                    unsigned int v159 = (char)a14[10] - *(char *)(a1 + 24);
                  }
                  __int16 v160 = *(_WORD *)(a1 + 16);
                  if (v159 > 2) {
                    __int16 v161 = v160 - 1;
                  }
                  else {
                    __int16 v161 = v160 + 1;
                  }
                  *(_WORD *)(a1 + 16) = v161;
                  int v148 = 2;
                }
                *(unsigned char *)(a1 + 24) = v149;
                goto LABEL_188;
              }
              BOOL v157 = (v126 - 76) < 5 || (v126 + 122) < 5u;
              int v148 = 2;
              if (a24) {
                goto LABEL_166;
              }
              unsigned int v116 = a14;
              if (!v157) {
                goto LABEL_188;
              }
              int v148 = 0;
              *(_DWORD *)(a1 + 20) = 0;
              goto LABEL_195;
            case 3u:
              if (!v196)
              {
                int v148 = 3;
                goto LABEL_166;
              }
              int v147 = *(unsigned __int8 *)(a1 + 24);
              unsigned int v116 = a14;
              int v152 = a14[10];
              if (v147 == v152)
              {
                int v153 = (__int16)++*(_WORD *)(a1 + 16);
                if (v153 >= 2)
                {
                  int v148 = 4;
                  goto LABEL_154;
                }
              }
              else
              {
                *(_WORD *)(a1 + 16) = 0;
              }
              *(unsigned char *)(a1 + 24) = v152;
              int v148 = 3;
              goto LABEL_188;
            case 4u:
              if (v196)
              {
                unsigned int v116 = a14;
                int v147 = a14[10];
                __int16 v154 = *(_WORD *)(a1 + 16);
                if (*(unsigned __int8 *)(a1 + 24) == v147) {
                  __int16 v155 = v154 + 1;
                }
                else {
                  __int16 v155 = v154 - 1;
                }
                *(_WORD *)(a1 + 16) = v155;
                if (v155 >= 6)
                {
                  *(_WORD *)(a1 + 16) = 5;
LABEL_180:
                  int v148 = 4;
                  goto LABEL_188;
                }
                if ((v155 & 0x80000000) == 0) {
                  goto LABEL_180;
                }
                int v148 = 3;
                *(_DWORD *)(a1 + 20) = 3;
                *(unsigned char *)(a1 + 24) = v147;
              }
              else
              {
                int v148 = 4;
LABEL_166:
                unsigned int v116 = a14;
LABEL_188:
                LOBYTE(v147) = *(unsigned char *)(a1 + 24);
              }
LABEL_189:
              double v162 = v103 * (double)(char)v147;
              double v163 = (double)v129;
              if (v162 >= v163 * 0.5 * 0.001) {
                double v162 = v162 + (1.0 - *(float *)(a39 + 32)) * (v163 * -0.001);
              }
              double v109 = v109 + v162;
              *(double *)(a39 + 16) = v162 + *(double *)(a39 + 16);
              *(double *)(a39 + 24) = v109;
LABEL_192:
              if ((v126 - 52) > 0xD)
              {
LABEL_195:
                int v165 = a24;
                int v164 = *(_DWORD *)(a39 + 84);
              }
              else
              {
                int v164 = *(_DWORD *)(a39 + 84);
                int v165 = a24;
                if (a24 == 2)
                {
                  unsigned int v166 = v164 | 0x80000;
                  goto LABEL_197;
                }
              }
              unsigned int v166 = v164 & 0xFFF7FFFF;
LABEL_197:
              *(_DWORD *)(a39 + 84) = v166;
              switch(v148)
              {
                case 0:
                  unsigned int v119 = v166 & 0xFFFFF9F7;
                  goto LABEL_203;
                case 1:
                  unsigned int v119 = v166 & 0xFFFFF9F7 | 0x400;
                  goto LABEL_203;
                case 2:
                case 3:
                  unsigned int v119 = v166 & 0xFFFFF9F7 | 0x408;
                  goto LABEL_203;
                case 4:
                  *(_DWORD *)(a39 + 84) = v166 | 0x408;
                  if (v165)
                  {
                    unsigned int v119 = v166 | 0x608;
LABEL_203:
                    uint64_t v75 = &xmmword_263BAB000;
                    goto LABEL_204;
                  }
                  unsigned int v119 = v166 & 0xFFFFF9F7 | 0x408;
                  *(_DWORD *)(a39 + 84) = v119;
                  uint64_t v75 = &xmmword_263BAB000;
                  if (*v53 - 76 >= 0x3F) {
                    goto LABEL_212;
                  }
                  break;
                default:
                  float v189 = "0";
                  DeviceFaultNotify("glmesrd_rptctrl.cpp", 1142, "UpdatePromptBitState", (char)"0");
                  float v190 = "glmesrd_rptctrl.cpp";
                  int v191 = 1142;
                  goto LABEL_304;
              }
              goto LABEL_209;
            default:
              float v189 = "0";
              DeviceFaultNotify("glmesrd_rptctrl.cpp", 1065, "UpdatePromptBitState", (char)"0");
              float v190 = "glmesrd_rptctrl.cpp";
              int v191 = 1065;
              goto LABEL_304;
          }
        }
LABEL_294:
        float v189 = "ucMsPerEpoch != 0";
        DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
        float v190 = "glsignalid.h";
        int v191 = 685;
        goto LABEL_304;
      }
    }
LABEL_293:
    float v189 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
    float v190 = "glsignalid.h";
    int v191 = 678;
    goto LABEL_304;
  }
  unsigned int v119 = v114 | 0x608;
  int v120 = a21;
LABEL_204:
  *(_DWORD *)(a39 + 84) = v119;
  if (*v53 - 76 >= 0x3F) {
    goto LABEL_212;
  }
  if (a24)
  {
    if (!v120) {
      goto LABEL_212;
    }
LABEL_211:
    v119 |= 0x608u;
    *(_DWORD *)(a39 + 84) = v119;
    goto LABEL_212;
  }
LABEL_209:
  if (v120 && v116[8]) {
    goto LABEL_211;
  }
LABEL_212:
  *(double *)(a39 + 8) = *(double *)(a39 + 8) + *(float *)(a39 + 32) * -299792458.0 * (v109 - a2);
  *(double *)(a39 + 24) = v109 + v109 * a9 / *((double *)v75 + 489);
  int v167 = *(_DWORD *)(v197 + 4);
  int v168 = *(_DWORD *)(a17 + 4);
  *(_DWORD *)(a39 + 88) = v167;
  *(_DWORD *)(a39 + 92) = v168;
  *(_DWORD *)(a1 + 28) = v167;
  *(_DWORD *)(a1 + 32) = v168;
  *(_DWORD *)(a39 + 136) = *(_DWORD *)(a13 + 96);
  *(_DWORD *)(a39 + 132) = *(_DWORD *)(a13 + 92);
  if (*(unsigned char *)(a18 + 1))
  {
    *(_DWORD *)(a39 + 72) = *(_DWORD *)(a18 + 16);
    double v169 = *(double *)(a18 + 8) * 1000.0;
    double v170 = fmod(v169, 4294967300.0);
    if (v169 <= 4294967300.0) {
      double v170 = v169;
    }
    if (v170 < -4294967300.0) {
      double v170 = -fmod(-v170, 4294967300.0);
    }
    if (v170 < 0.0) {
      unsigned int v171 = --v170;
    }
    else {
      unsigned int v171 = v170;
    }
    *(_DWORD *)(a39 + 76) = v171;
    *(_DWORD *)(a39 + 80) = *(_DWORD *)(a18 + 20);
    *(_DWORD *)(a39 + 84) = v119 | 0x100000;
  }
  if (v120)
  {
    if (a29)
    {
      float v189 = "!bCorrvecIsSaturated";
      DeviceFaultNotify("glmesrd_rptctrl.cpp", 496, "Run", (char)"!bCorrvecIsSaturated");
      float v190 = "glmesrd_rptctrl.cpp";
      int v191 = 496;
      goto LABEL_304;
    }
    if (a30)
    {
      float v189 = "!bIsCcmIntermediateReport";
      DeviceFaultNotify("glmesrd_rptctrl.cpp", 497, "Run", (char)"!bIsCcmIntermediateReport");
      float v190 = "glmesrd_rptctrl.cpp";
      int v191 = 497;
      goto LABEL_304;
    }
    if (a31)
    {
      float v189 = "!bXcorrDetected";
      DeviceFaultNotify("glmesrd_rptctrl.cpp", 498, "Run", (char)"!bXcorrDetected");
      float v190 = "glmesrd_rptctrl.cpp";
      int v191 = 498;
      goto LABEL_304;
    }
    int v172 = a37;
    if (a37) {
      *(_DWORD *)(a39 + 84) |= 0x800u;
    }
    if ((a35 & 1) == 0)
    {
      unsigned int v173 = *(unsigned __int8 *)v201;
      if (v173 >= 0x21 && v173 <= 0x33 && *(_DWORD *)(a39 + 140) == 10)
      {
        *(_DWORD *)(a42 + 100) |= 0x200u;
        int v172 = 1;
      }
    }
    if ((*(unsigned char *)(a39 + 86) & 4) != 0 && *(float *)(a39 + 40) < a6)
    {
      *(_DWORD *)(a42 + 100) |= 4u;
      int v172 = 1;
    }
    if (a33 && *(unsigned char *)a12 && *(unsigned char *)(a12 + 26) && (*(unsigned char *)(a12 + 27) || *(float *)(a12 + 32) > a7))
    {
      *(_DWORD *)(a42 + 100) |= 0x400u;
      int v174 = *(_DWORD *)(a39 + 84);
    }
    else
    {
      int v174 = *(_DWORD *)(a39 + 84);
      if (!v172)
      {
        if ((v174 & 0x40) == 0) {
          goto LABEL_261;
        }
        goto LABEL_258;
      }
    }
    v174 &= 0xFE7FFF1F;
    *(_DWORD *)(a39 + 84) = v174;
    *(_DWORD *)(a39 + 56) = 897988541;
    if ((v174 & 0x40) == 0) {
      goto LABEL_261;
    }
LABEL_258:
    if (*(unsigned char *)(a13 + 28) && !*(unsigned char *)(a13 + 29)) {
      *(_DWORD *)(a39 + 84) = v174 | 0x1000;
    }
    goto LABEL_261;
  }
  int v175 = *(_DWORD *)(a39 + 84);
  BOOL v177 = (v175 & 8) == 0 && *(_DWORD *)(a39 + 140) == 15;
  if ((a29 & ~a36 & 1) != 0 || (a30 & 1) != 0 || (a31 & 1) != 0 || v177)
  {
    unsigned int v178 = v175 & 0xFE7FFF1F;
    unsigned int v179 = v175 & 0xFE7F7F1F | 0x8000;
    if (a31) {
      unsigned int v178 = v179;
    }
    *(_DWORD *)(a39 + 84) = v178;
    *(_DWORD *)(a39 + 56) = 897988541;
  }
LABEL_261:
  *(_OWORD *)(a40 + 44) = 0u;
  *(_WORD *)(a40 + 8) = 0;
  *(_DWORD *)(a40 + 12) = 0;
  *(_WORD *)(a40 + 16) = 0;
  *(void *)(a40 + 20) = 0;
  *(void *)(a40 + 32) = 0;
  *(unsigned char *)(a40 + 40) = 0;
  *(_OWORD *)(a40 + 60) = 0u;
  *(_OWORD *)(a40 + 76) = 0u;
  *(_OWORD *)(a40 + 92) = 0u;
  *(_OWORD *)(a40 + 108) = 0u;
  *(_OWORD *)(a40 + 124) = 0u;
  *(_OWORD *)(a40 + 140) = 0u;
  *(_OWORD *)(a40 + 156) = 0u;
  *(_OWORD *)(a40 + 172) = 0u;
  *(_OWORD *)(a40 + 188) = 0u;
  *(_OWORD *)(a40 + 204) = 0u;
  *(_OWORD *)(a40 + 220) = 0u;
  *(_OWORD *)(a40 + 236) = 0u;
  *(_OWORD *)(a40 + 252) = 0u;
  *(_OWORD *)(a40 + 268) = 0u;
  *(_OWORD *)(a40 + 284) = 0u;
  *(_OWORD *)(a41 + 44) = 0u;
  *(_WORD *)(a41 + 8) = 0;
  *(_DWORD *)(a41 + 12) = 0;
  *(_WORD *)(a41 + 16) = 0;
  *(void *)(a41 + 20) = 0;
  *(void *)(a41 + 32) = 0;
  *(unsigned char *)(a41 + 40) = 0;
  *(_OWORD *)(a41 + 60) = 0u;
  *(_OWORD *)(a41 + 76) = 0u;
  *(_OWORD *)(a41 + 92) = 0u;
  *(_OWORD *)(a41 + 108) = 0u;
  *(_OWORD *)(a41 + 124) = 0u;
  *(_OWORD *)(a41 + 140) = 0u;
  *(_OWORD *)(a41 + 156) = 0u;
  *(_OWORD *)(a41 + 172) = 0u;
  *(_OWORD *)(a41 + 188) = 0u;
  *(_OWORD *)(a41 + 204) = 0u;
  *(_OWORD *)(a41 + 220) = 0u;
  *(_OWORD *)(a41 + 236) = 0u;
  *(_OWORD *)(a41 + 252) = 0u;
  *(_OWORD *)(a41 + 268) = 0u;
  *(_OWORD *)(a41 + 284) = 0u;
  if (v194
    && (*(unsigned __int8 *)v201 - 33 > 0x12 || *(unsigned char *)(v194 + 930))
    && (*(unsigned char *)(a39 + 84) & 0x10) != 0)
  {
    if (*(unsigned __int16 *)(v194 + 2) >= 0x3E9u)
    {
      float v189 = "rNavBitResults.usNumSymInMsmtInt <= 1000";
      DeviceFaultNotify("glmesrd_rptctrl.cpp", 660, "Run", (char)"rNavBitResults.usNumSymInMsmtInt <= 1000");
      float v190 = "glmesrd_rptctrl.cpp";
      int v191 = 660;
      goto LABEL_304;
    }
    if (*(unsigned char *)v194)
    {
      if (BlueFin::GlUtils::m_ucEnabled) {
        BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x3F);
      }
      char v180 = *(unsigned char *)(a39 + 112);
      unsigned int v181 = *(_DWORD *)(a39 + 140);
      if (*(unsigned char *)(v194 + 918))
      {
        BlueFin::GlMeDSPDataBits::Set(a40, v180, v201, v181, *(_WORD *)(v194 + 2), *(_DWORD *)(v194 + 924), *(_DWORD *)(v194 + 924), *(unsigned __int16 *)(v194 + 928), *(double *)(a39 + 24), (int *)(v194 + 660), *(unsigned char *)(v194 + 919), v194 + 788, 1);
        char v180 = *(unsigned char *)(a39 + 112);
        unsigned int v181 = *(_DWORD *)(a39 + 140);
      }
      else
      {
        int v182 = *(_DWORD *)(v194 + 924);
        uint64_t v183 = *(void *)(a39 + 24);
        *(unsigned char *)(a40 + 8) = v180;
        *(unsigned char *)(a40 + 9) = *(unsigned char *)(a39 + 100);
        *(_WORD *)(a40 + 16) = 0;
        *(_DWORD *)(a40 + 20) = v182;
        *(_DWORD *)(a40 + 24) = v182;
        *(void *)(a40 + 32) = v183;
        if (v181 - 12 > 5) {
          int v184 = 16;
        }
        else {
          int v184 = *(_DWORD *)&aP_1[4 * (v181 - 12)];
        }
        *(_DWORD *)(a40 + 12) = v184;
      }
      if (*(unsigned char *)(v194 + 648))
      {
        BlueFin::GlMeDSPDataBits::Set(a41, v180, v201, v181, *(_WORD *)(v194 + 2), *(_DWORD *)(v194 + 924), *(_DWORD *)(v194 + 924), *(unsigned __int16 *)(v194 + 928), *(double *)(a39 + 24), (int *)(v194 + 264), *(unsigned char *)(v194 + 649), v194 + 136, 0);
      }
      else
      {
        int v185 = *(_DWORD *)(v194 + 924);
        uint64_t v186 = *(void *)(a39 + 24);
        *(unsigned char *)(a41 + 8) = v180;
        *(unsigned char *)(a41 + 9) = *(unsigned char *)(a39 + 100);
        *(_WORD *)(a41 + 16) = 0;
        *(_DWORD *)(a41 + 20) = v185;
        *(_DWORD *)(a41 + 24) = v185;
        *(void *)(a41 + 32) = v186;
        if (v181 - 12 > 5) {
          int v187 = 18;
        }
        else {
          int v187 = dword_263BAEE94[v181 - 12];
        }
        *(_DWORD *)(a41 + 12) = v187;
      }
      if ((*(unsigned char *)(a39 + 86) & 4) != 0)
      {
        float v188 = *(float *)(a39 + 40);
        if (v188 > 32.0) {
          *(_DWORD *)(a40 + 12) |= 0x80u;
        }
        if (v188 > 30.0) {
          *(_DWORD *)(a41 + 12) |= 0x80u;
        }
      }
      if ((*(unsigned char *)(a39 + 86) & 2) != 0) {
        *(_DWORD *)(a40 + 12) |= 0x200u;
      }
      if (*(_WORD *)(v194 + 4)) {
        *(_DWORD *)(a41 + 12) |= 0x200u;
      }
    }
  }
}

float BlueFin::GlMeSrdAsicUnitConverter::HzToPpu(BlueFin::GlMeSrdAsicUnitConverter *this, float a2, const BlueFin::GlSignalId *a3)
{
  if (*((unsigned __int16 *)this + 4) >= 0x23Fu)
  {
    DeviceFaultNotify("glsignalid.h", 650, "GetRfCarrierFrqHz", (char)"IsValid()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 650, "IsValid()");
  }
  uint64_t v3 = *(unsigned __int8 *)this;
  uint64_t v4 = BlueFin::GlSvId::s_aucSvId2gnss[v3];
  double v5 = BlueFin::GlSignalId::s_adSignalType2ctrFreqHz[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)this + 1) - *((int *)this + 1) + v4]];
  if (v4 == 2)
  {
    double v6 = (double)(char)(v3 - 59);
    if ((v3 - 52) >= 0xE) {
      double v6 = -8.0;
    }
    double v5 = v5 + v6 * 562500.0;
  }
  float v7 = v5;
  return a2 / v7;
}

uint64_t (*BlueFin::GlMeSrdSyncIn::idle(uint64_t a1, unsigned __int8 *a2))()
{
  double result = 0;
  unsigned int v4 = *a2;
  if (v4 <= 0x27)
  {
    if (v4 - 2 < 2) {
      return result;
    }
    return BlueFin::QHsm::top;
  }
  if (v4 != 40)
  {
    if (v4 == 41) {
      return result;
    }
    if (v4 == 43)
    {
      DeviceFaultNotify("glmesrd_syncin_ctrl.cpp", 108, "idle", (char)"0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_syncin_ctrl.cpp", 108, "0");
    }
    return BlueFin::QHsm::top;
  }
  unsigned int v5 = a2[1];
  int v6 = v5 & 1;
  *(unsigned char *)(a1 + 216) = v5 & 1;
  int v7 = (v5 >> 1) & 1;
  *(unsigned char *)(a1 + 217) = (v5 & 2) != 0;
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 112) + 80))(*(void *)(a1 + 112));
  v14[0] = BlueFin::GlMeSrdSyncIn::OnReliableAck;
  v14[1] = a1;
  __int16 v15 = 256;
  char v16 = 0;
  uint64_t v17 = v8;
  int v18 = 0;
  __int16 v19 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, 1);
  int v12 = v7;
  int v13 = v6;
  uint64_t v11 = 1;
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 48))(v8);
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 40))(v9);
  (*(void (**)(uint64_t, void *, uint64_t *))(*(void *)v10 + 16))(v10, v14, &v11);
  BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v14);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v14);
  BlueFin::QHsm::tran((void *)a1, (uint64_t (*)())BlueFin::GlMeSrdSyncIn::wait4arm, (uint64_t)"&GlMeSrdSyncIn::wait4arm");
  return 0;
}

void sub_263975A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlMeSrdSatReportMgr::DestroySatReport(uint64_t this, const BlueFin::GlSatCarrId *a2)
{
  uint64_t v2 = *(void *)(this + 3648);
  if (*(unsigned __int8 *)a2 + 100 * *((unsigned __int8 *)a2 + 4) - *(unsigned __int16 *)(v2 + 28) >= *(unsigned __int16 *)(v2 + 30))
  {
    int v7 = "handle - m_usMinHandle < m_usNumHandles";
    DeviceFaultNotify("glinc_array.h", 313, "EnsureValidHandle", (char)"handle - m_usMinHandle < m_usNumHandles");
    int v8 = 313;
    goto LABEL_14;
  }
  unsigned int v3 = *(unsigned __int16 *)(*(void *)(v2 + 8)
                           + 2
                           * (unsigned __int16)(*(unsigned __int8 *)a2
                                              + 100 * *((unsigned __int8 *)a2 + 4)
                                              - *(_WORD *)(v2 + 28)));
  if (v3 == 0xFFFF) {
    return this;
  }
  if (*(unsigned __int16 *)(v2 + 32) <= v3)
  {
    int v7 = "slot < m_usNumSlots";
    DeviceFaultNotify("glinc_array.h", 319, "EnsureValidSlot", (char)"slot < m_usNumSlots");
    int v8 = 319;
LABEL_14:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glinc_array.h", v8, v7);
  }
  if (*(void *)v2)
  {
    uint64_t v5 = this;
    BlueFin::GlMeSrdSatReport::~GlMeSrdSatReport((BlueFin::GlMeSrdSatReport *)(*(void *)v2 + *(_DWORD *)(v2 + 24) * v3));
    BlueFin::GlBigArray::Remove(*(void *)(v5 + 3648), *(unsigned __int8 *)a2 + 100 * *((unsigned __int8 *)a2 + 4));
    if ((*(uint64_t (**)(void, void))(**(void **)(v5 + 3664) + 16))(*(void *)(v5 + 3664), *(unsigned __int8 *)a2))
    {
      (*(void (**)(void, void))(**(void **)(v5 + 3664) + 32))(*(void *)(v5 + 3664), *(unsigned __int8 *)a2);
    }
    this = (*(uint64_t (**)(void, void))(**(void **)(v5 + 3672) + 16))(*(void *)(v5 + 3672), *(unsigned __int8 *)a2);
    if (this)
    {
      (**(void (***)(uint64_t))this)(this);
      int v6 = *(uint64_t (**)(void))(**(void **)(v5 + 3672) + 32);
      return v6();
    }
  }
  return this;
}

void BlueFin::GlMeSrdSatReport::~GlMeSrdSatReport(BlueFin::GlMeSrdSatReport *this)
{
  float v2 = *((float *)this + 881);
  if (v2 > 0.0) {
    GlCustomLog(11, "DeferredAssert: Block margin violation, SvId %u SatId %u TimeTagRxSec %.9f - Please update this JIRA: FW4752-589. DO NOT CREATE A NEW JIRA.\n", *((unsigned __int8 *)this + 492), *((unsigned __int8 *)this + 488), v2);
  }
  *((void *)this + 435) = &unk_270EBD350;
  *((void *)this + 431) = &unk_270EBD320;
  *((void *)this + 404) = &unk_270EBD078;
  *((void *)this + 336) = &unk_270EBD048;
  *((void *)this + 228) = &unk_270EBCFD0;
  *((void *)this + 223) = &unk_270EBD268;
  *((void *)this + 220) = &unk_270EBD248;
  *((void *)this + 217) = &unk_270EBD248;
  *((void *)this + 216) = &unk_270EBD160;
  *((void *)this + 192) = &unk_270EBD1D8;
}

void BlueFin::GlMeSrdEstLowTow::~GlMeSrdEstLowTow(BlueFin::GlMeSrdEstLowTow *this)
{
  *(void *)this = &unk_270EBD218;
}

{
  JUMPOUT(0x263E6DD70);
}

uint64_t (*BlueFin::GlMeSrdGeofenceMgr::idle(void *a1, unsigned __int8 *a2))()
{
  int v2 = *a2;
  if ((v2 - 2) >= 2)
  {
    if (v2 != 53)
    {
      if (v2 != 54) {
        return BlueFin::QHsm::top;
      }
      unsigned int v4 = "0";
      DeviceFaultNotify("glmesrd_geofence_mgr.cpp", 287, "idle", (char)"0");
      int v5 = 287;
LABEL_9:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_geofence_mgr.cpp", v5, v4);
    }
    if (a2[1] != 1)
    {
      unsigned int v4 = "e->par == 1";
      DeviceFaultNotify("glmesrd_geofence_mgr.cpp", 280, "idle", (char)"e->par == 1");
      int v5 = 280;
      goto LABEL_9;
    }
    BlueFin::QHsm::tran(a1, (uint64_t (*)())BlueFin::GlMeSrdGeofenceMgr::running, (uint64_t)"&GlMeSrdGeofenceMgr::running");
  }
  return 0;
}

uint64_t (*(*BlueFin::GlPeCntinMgr::idle(void *a1, unsigned __int8 *a2))(void *a1, unsigned __int8 *a2))()
{
  uint64_t v2 = 0;
  int v3 = *a2;
  if ((v3 - 2) >= 2 && v3 != 69)
  {
    if (v3 == 67)
    {
      unsigned int v4 = (void *)(a1[16] + 32028);
      if (*(_DWORD *)v4 > 7u || ((1 << *(_DWORD *)v4) & 0xAC) == 0)
      {
        *(unsigned char *)(a1[16] + 32040) = 1;
        void *v4 = 2;
      }
      BlueFin::QHsm::tran(a1, (uint64_t (*)())BlueFin::GlPeCntinMgr::wai4cntinStart, (uint64_t)"&GlPeCntinMgr::wai4cntinStart");
      return 0;
    }
    else
    {
      return BlueFin::GlPeCntinMgr::on;
    }
  }
  return (uint64_t (*(*)(void *, unsigned __int8 *))())v2;
}

uint64_t (*BlueFin::GlMeSrdCntIn::idle(uint64_t a1, unsigned __int8 *a2))()
{
  double result = 0;
  unsigned int v4 = *a2;
  if (v4 <= 0x2B)
  {
    if (v4 - 2 < 2) {
      return result;
    }
    return BlueFin::QHsm::top;
  }
  if (v4 != 44)
  {
    if (v4 == 45) {
      return result;
    }
    if (v4 == 46)
    {
      DeviceFaultNotify("glmesrd_cntin_ctrl.cpp", 111, "idle", (char)"0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_cntin_ctrl.cpp", 111, "0");
    }
    return BlueFin::QHsm::top;
  }
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 112) + 80))(*(void *)(a1 + 112));
  v14[0] = BlueFin::GlMeSrdCntIn::OnReliableAck;
  v14[1] = a1;
  __int16 v15 = 256;
  char v16 = 0;
  uint64_t v17 = v5;
  int v18 = 0;
  __int16 v19 = 0;
  __n128 v6 = ((__n128 (*)(uint64_t, uint64_t))*(void *)(*(void *)v5 + 16))(v5, 1);
  uint64_t v7 = *(void *)(a1 + 136);
  v6.n128_u32[0] = *(_DWORD *)(v7 + 56);
  LOWORD(v8) = *(_WORD *)(v7 + 62);
  double v9 = (double)v6.n128_u64[0] * ((double)v8 / 1000.0) + 0.5;
  int v10 = (int)v9;
  BOOL v11 = v9 != (double)(int)v9 && v9 < 0.0;
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 40))(v12);
  (*(void (**)(uint64_t, void *, uint64_t, void))(*(void *)v13 + 32))(v13, v14, 3, (v10 - v11));
  BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v14);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v14);
  BlueFin::QHsm::tran((void *)a1, (uint64_t (*)())BlueFin::GlMeSrdCntIn::wait4arm, (uint64_t)"&GlMeSrdCntIn::wait4arm");
  return 0;
}

void sub_2639761C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

uint64_t (*BlueFin::GlPeCntinMgr::on(void *a1, unsigned __int8 *a2))()
{
  unsigned int v3 = *a2;
  if (v3 > 0x43)
  {
    if (v3 == 68)
    {
      uint64_t v11 = a1[17];
      if (*(_DWORD *)(v11 + 8) != 4) {
        return 0;
      }
      uint64_t v12 = a1[16];
      unsigned int v13 = *(_DWORD *)(v12 + 32028);
      BOOL v14 = v13 > 7;
      int v15 = (1 << v13) & 0xB8;
      if (v14 || v15 == 0)
      {
        *(unsigned char *)(v12 + 32040) = 1;
        *(void *)(v12 + 32028) = 0x400000004;
      }
      BlueFin::GlReqSm::SetRefFreqStatus(v12, (long long *)v11);
      goto LABEL_13;
    }
    if (v3 == 69)
    {
      uint64_t v8 = a1[15];
      double v9 = *(void (**)(void, uint64_t))(v8 + 120);
      if (v9) {
        v9(*(void *)(v8 + 8), 5);
      }
      unint64_t v6 = a1[16];
      uint64_t v7 = 5;
      goto LABEL_12;
    }
  }
  else
  {
    if (v3 - 2 < 2) {
      return 0;
    }
    if (v3 == 66)
    {
      uint64_t v4 = a1[15];
      uint64_t v5 = *(void (**)(void, uint64_t))(v4 + 120);
      if (v5) {
        v5(*(void *)(v4 + 8), 5);
      }
      unint64_t v6 = a1[16];
      uint64_t v7 = 4;
LABEL_12:
      BlueFin::GlReqSm::SetCntinMeas(v6, v7, 0.0, 0.0);
LABEL_13:
      BlueFin::QHsm::tran(a1, BlueFin::GlPeCntinMgr::idle, (uint64_t)"&GlPeCntinMgr::idle");
      return 0;
    }
  }
  return BlueFin::QHsm::top;
}

unint64_t BlueFin::GlMeSrdSatRptNonL1VetSm::DebugLog(unint64_t result, const char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  STACK[0x788] = *MEMORY[0x263EF8340];
  if (BlueFin::GlUtils::m_ucEnabled)
  {
    unint64_t v39 = result;
    double result = BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x1C);
    if ((result & 1) != 0
      || BlueFin::GlUtils::m_ucEnabled
      && (double result = BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0xF), result))
    {
      char v40 = *a3;
      char v41 = a3[1];
      if (!strcmp(a2, "wait_for_aided_track"))
      {
        char v42 = 1;
      }
      else if (!strcmp(a2, "los_verification"))
      {
        char v42 = 2;
      }
      else if (!strcmp(a2, "los_verification_pull_in"))
      {
        char v42 = 3;
      }
      else if (!strcmp(a2, "los_tracking"))
      {
        char v42 = 4;
      }
      else if (!strcmp(a2, "mp_tracking"))
      {
        char v42 = 5;
      }
      else if (!strcmp(a2, "snap_to_tap"))
      {
        char v42 = 6;
      }
      else if (!strcmp(a2, "los_sensitivity"))
      {
        char v42 = 7;
      }
      else if (!strcmp(a2, "grid_search"))
      {
        char v42 = 8;
      }
      else if (!strcmp(a2, "snap_to_grid_aid"))
      {
        char v42 = 9;
      }
      else if (!strcmp(a2, "snap_to_grid_detection"))
      {
        char v42 = 10;
      }
      else
      {
        char v42 = 0;
      }
      STACK[0x690] = (unint64_t)&unk_270EBD530;
      LOBYTE(STACK[0x698]) = v40;
      LOBYTE(STACK[0x699]) = v41;
      LOBYTE(STACK[0x69A]) = v42;
      STACK[0x750] = v39;
      uint64_t v44 = *(void *)(v39 + 112);
      long long v43 = *(BlueFin::GlMeSrdDspMeasAux **)(v39 + 120);
      char v45 = *(unsigned char *)(v44 + 100);
      LODWORD(STACK[0x6B8]) = *(_DWORD *)(v44 + 104);
      LOWORD(STACK[0x6BC]) = *(_WORD *)(v44 + 108);
      LOBYTE(STACK[0x6B0]) = -1;
      LOBYTE(STACK[0x6B4]) = v45;
      LOWORD(STACK[0x6C0]) = 0;
      LOBYTE(STACK[0x6C2]) = 0;
      STACK[0x708] = 0;
      LOBYTE(STACK[0x714]) = 0;
      LODWORD(STACK[0x718]) = 0;
      STACK[0x720] = 0;
      LOBYTE(STACK[0x728]) = 0;
      STACK[0x6F8] = 0;
      *(_OWORD *)&STACK[0x6E8] = 0u;
      *(_OWORD *)&STACK[0x6D8] = 0u;
      *(_OWORD *)&STACK[0x6C8] = 0u;
      *(_OWORD *)&STACK[0x73C] = 0u;
      *(_OWORD *)&STACK[0x72C] = 0u;
      LODWORD(STACK[0x700]) = -1;
      LOBYTE(STACK[0x704]) = -1;
      LODWORD(STACK[0x710]) = 0;
      STACK[0x6A0] = (unint64_t)&STACK[0x6B0];
      uint64_t TrkRslts = BlueFin::GlMeSrdDspMeasAux::GetTrkRslts(v43);
      uint64_t v47 = TrkRslts;
      unint64_t v48 = STACK[0x750];
      uint64_t v49 = *(void *)(STACK[0x750] + 112);
      uint64_t v50 = *(void *)((unint64_t)&STACK[0x690] | 0x10);
      *(unsigned char *)uint64_t v50 = *(unsigned char *)(v49 + 112);
      int v51 = LOBYTE(STACK[0x698]);
      *(unsigned char *)(v50 + 16) = v51;
      *(unsigned char *)(v50 + 17) = *(unsigned char *)((unint64_t)&STACK[0x690] | 9);
      int v52 = *(unsigned __int8 *)((unint64_t)&STACK[0x690] | 0xA);
      *(unsigned char *)(v50 + 18) = v52;
      *(_DWORD *)(v50 + 64) = *(_DWORD *)(v48 + 92);
      *(void *)(v50 + 88) = *(void *)(v48 + 96);
      if (v51 == 6) {
        unsigned __int8 v53 = "EVT(MSMT)";
      }
      else {
        unsigned __int8 v53 = "invalid_event!";
      }
      *(void *)(v50 + 24) = v53;
      if ((v52 - 1) > 9) {
        int v54 = "invalid_state!";
      }
      else {
        int v54 = off_2655D84C8[(char)(v52 - 1)];
      }
      *(void *)(v50 + 32) = v54;
      *(double *)(v50 + 48) = *(double *)(v48 + 128) - *(double *)(v48 + 152);
      *(double *)(v50 + 40) = *(double *)(v48 + 128) - *(double *)(v48 + 144);
      *(_DWORD *)(v50 + 68) = *(_DWORD *)(v49 + 40);
      *(void *)(v50 + 56) = *(void *)(v49 + 24);
      *(float *)(v50 + 72) = *(float *)(v49 + 32) * 1000000000.0;
      *(float *)(v50 + 76) = *(float *)(v49 + 56) * 1000000000.0;
      char v55 = *(unsigned char *)(TrkRslts + 28);
      *(_DWORD *)(v50 + 80) = *(_DWORD *)(TrkRslts + 24);
      *(unsigned char *)(v50 + 84) = v55;
      unint64_t v56 = STACK[0x750];
      unsigned int v57 = *(_DWORD *)(v50 + 96) & 0xFFFFFFFE | *(unsigned __int8 *)(STACK[0x750] + 40);
      *(_DWORD *)(v50 + 96) = v57;
      *(_DWORD *)(v50 + 96) = v57 & 0xFFFFFE01 | (2 * ((~*(_DWORD *)(*(void *)(v56 + 112) + 84) & 0x30) == 0)) | (4 * *(unsigned __int8 *)(TrkRslts + 117)) | (8 * *(unsigned __int8 *)(v56 + 42)) | (16 * *(unsigned __int8 *)(v56 + 52)) | (*(unsigned __int8 *)(v56 + 91) >> 1) & 0x60 | (16 * *(unsigned __int8 *)(v56 + 91)) & 0x80 | (16 * (*(unsigned char *)(v56 + 91) & 0x10));
      *(unsigned char *)(v50 + 100) = *(unsigned char *)(TrkRslts + 118);
      unsigned int v58 = *(_DWORD *)(TrkRslts + 64);
      *(_DWORD *)(v50 + 104) = v58;
      Str = BlueFin::GlMeSrdEstMultipath::GetStr(v58);
      int v60 = (unsigned __int8 *)STACK[0x6A0];
      *((void *)v60 + 14) = Str;
      *((void *)v60 + 16) = *(void *)(v47 + 68);
      *((_DWORD *)v60 + 35) = *(_DWORD *)(v47 + 88);
      unint64_t v61 = STACK[0x750];
      uint64_t v62 = *(unsigned __int8 *)(STACK[0x750] + 44);
      v60[120] = v62;
      float v63 = *(float *)(v61 + 48);
      *((float *)v60 + 31) = v63;
      unsigned int v64 = (float *)((char *)&BlueFin::GlMeSrdSatRptNonL1VetSm::afVE_TAP_DETECTION_TRHESHOLD_CVEC_MAGNITUDE + 4 * v62);
      float v65 = *(float *)(v61 + 64);
      if (v65 < 0.0) {
        float v65 = -v65;
      }
      *((float *)v60 + 36) = v65;
      *(void *)(v60 + 148) = 1099431936;
      *((float *)v60 + 34) = *(v64 - 1) / v63;
      if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
      {
        (*(void (**)(unint64_t *, void, void))(STACK[0x690] + 24))(&STACK[0x690], 0, 0);
        int v60 = (unsigned __int8 *)STACK[0x6A0];
      }
      int v66 = *((_DWORD *)v60 + 24);
      if ((v66 & 4) != 0 && *((float *)v60 + 17) >= *((float *)v60 + 37)) {
        int v67 = (const char *)(char)v60[100];
      }
      else {
        int v67 = 0;
      }
      if (v66) {
        float v68 = "VET";
      }
      else {
        float v68 = "vet";
      }
      BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)&a37, (char *)0x190, "meSmNonL1_%s::%s(S:%.2f V:%.2f)::%s(Sat:%i Sv:%i Bd:%s) Lms %.9f Aid %.9f ProbLOS %.1f CNo %.1f Dop[Ppb %.1f U %.2f] Gear[%i %i %i %i %i] Aid[%s:%s:%s:%s/%s:%s] QA[%s:%s Pol:%i CcdMet:%.2f] Cvec[%s] MP[%s] VE[CNo:%.1f Met:%.2f Off:%.2f MetThr:%.1g Freq(Scan):%.1f MaxGear:%i]\n", v67, v68, *((void *)v60 + 4), *((void *)v60 + 6), *((void *)v60 + 5), *((void *)v60 + 3), *v60, v60[4], BlueFin::GlSignalId::s_ausSignalIndex2str[*((int *)v60 + 2)], *((double *)v60 + 7) * 1000.0, *((double *)v60 + 11) * 1000.0);
      return GlCustomLog(15, "%s", &a37);
    }
  }
  return result;
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetMeifPassthroughEnabled(BlueFin::GlMeSrdAsicConfig *this)
{
  if (*((unsigned char *)this + 1422))
  {
    DeviceFaultNotify("glmesrd_asic_config.cpp", 4113, "GetMeifPassthroughEnabled", (char)"!m_bMeIfPassthroughEnabled");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_config.cpp", 4113, "!m_bMeIfPassthroughEnabled");
  }
  return 0;
}

uint64_t BlueFin::GlReqSm::initial(uint64_t result)
{
  if (*(unsigned char *)(result + 6464))
  {
    *(void *)(result + 8) = BlueFin::GlReqSm::processing;
    uint64_t v1 = *(void *)(result + 16);
    if (*(void *)(result + 24) != v1) {
      *(void *)(result + 24) = v1;
    }
    uint64_t v2 = "&GlReqSm::processing";
  }
  else if (*(unsigned char *)(*(void *)(result + 6272) + 25964) && !*(unsigned char *)(result + 110))
  {
    *(void *)(result + 8) = BlueFin::GlReqSm::initialize_location_hub;
    uint64_t v4 = *(void *)(result + 16);
    if (*(void *)(result + 24) != v4) {
      *(void *)(result + 24) = v4;
    }
    uint64_t v2 = "&GlReqSm::initialize_location_hub";
  }
  else
  {
    *(void *)(result + 8) = BlueFin::GlReqSm::retention_check;
    uint64_t v3 = *(void *)(result + 16);
    if (*(void *)(result + 24) != v3) {
      *(void *)(result + 24) = v3;
    }
    uint64_t v2 = "&GlReqSm::retention_check";
  }
  *(void *)(result + 16) = v2;
  return result;
}

void *BlueFin::GlMeSrdPacketManager::initial(void *result)
{
  result[1] = BlueFin::GlMeSrdPacketManager::wait4ack;
  uint64_t v1 = result[2];
  if (result[3] != v1) {
    result[3] = v1;
  }
  result[2] = "&GlMeSrdPacketManager::wait4ack";
  return result;
}

void *BlueFin::GlMeSrdMeasTimingMgr::initial(void *result)
{
  result[1] = BlueFin::GlMeSrdMeasTimingMgr::idle;
  uint64_t v1 = result[2];
  if (result[3] != v1) {
    result[3] = v1;
  }
  result[2] = "&GlMeSrdMeasTimingMgr::idle";
  return result;
}

void *BlueFin::GlMeSrdGeofenceMgr::initial(void *result)
{
  result[1] = BlueFin::GlMeSrdGeofenceMgr::idle;
  uint64_t v1 = result[2];
  if (result[3] != v1) {
    result[3] = v1;
  }
  result[2] = "&GlMeSrdGeofenceMgr::idle";
  return result;
}

void *BlueFin::GlPePwrStateMgr::initial(void *result)
{
  result[1] = BlueFin::GlPePwrStateMgr::SteadyNormalMode;
  uint64_t v1 = result[2];
  if (result[3] != v1) {
    result[3] = v1;
  }
  result[2] = "&GlPePwrStateMgr::SteadyNormalMode";
  return result;
}

void *BlueFin::GlMeSrdAsicinit::initial(void *result)
{
  result[1] = BlueFin::GlMeSrdAsicinit::off;
  uint64_t v1 = result[2];
  if (result[3] != v1) {
    result[3] = v1;
  }
  result[2] = "&GlMeSrdAsicinit::off";
  return result;
}

void *BlueFin::GlMeSrdAcqMgrSm::initial(void *result)
{
  result[1] = BlueFin::GlMeSrdAcqMgrSm::idle;
  uint64_t v1 = result[2];
  if (result[3] != v1) {
    result[3] = v1;
  }
  result[2] = "&GlMeSrdAcqMgrSm::idle";
  return result;
}

void *BlueFin::GlMeSrdSyncIn::initial(void *result)
{
  result[1] = BlueFin::GlMeSrdSyncIn::idle;
  uint64_t v1 = result[2];
  if (result[3] != v1) {
    result[3] = v1;
  }
  result[2] = "&GlMeSrdSyncIn::idle";
  return result;
}

void *BlueFin::GlMeSrdCtrlSm::initial(void *result)
{
  result[1] = BlueFin::GlMeSrdCtrlSm::off;
  uint64_t v1 = result[2];
  if (result[3] != v1) {
    result[3] = v1;
  }
  result[2] = "&GlMeSrdCtrlSm::off";
  return result;
}

void *BlueFin::GlPeCntinMgr::initial(void *result)
{
  result[1] = BlueFin::GlPeCntinMgr::idle;
  uint64_t v1 = result[2];
  if (result[3] != v1) {
    result[3] = v1;
  }
  result[2] = "&GlPeCntinMgr::idle";
  return result;
}

void *BlueFin::GlMeSrdCntIn::initial(void *result)
{
  result[1] = BlueFin::GlMeSrdCntIn::idle;
  uint64_t v1 = result[2];
  if (result[3] != v1) {
    result[3] = v1;
  }
  result[2] = "&GlMeSrdCntIn::idle";
  return result;
}

void BlueFin::GlMeSrdEstCrossCorr::Run(int a1, int a2, int a3, uint64_t a4, BlueFin::GlMeSrdCNoResults *this, uint64_t a6, uint64_t a7)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  if (BlueFin::GlMeSrdCNoResults::isGarbage(this))
  {
    int v51 = "!stCNoResults.isGarbage()";
    DeviceFaultNotify("glmesrd_crosscorr.cpp", 61, "Run", (char)"!stCNoResults.isGarbage()");
    int v52 = "glmesrd_crosscorr.cpp";
    int v53 = 61;
    goto LABEL_67;
  }
  if (*((_DWORD *)this + 1) != 1)
  {
    int v51 = "stCNoResults.m_otMsmtSrc.GetEnum() == GLMESRD_MSMT_SRC_SEARCH";
    DeviceFaultNotify("glmesrd_crosscorr.cpp", 62, "Run", (char)"stCNoResults.m_otMsmtSrc.GetEnum() == GLMESRD_MSMT_SRC_SEARCH");
    int v52 = "glmesrd_crosscorr.cpp";
    int v53 = 62;
LABEL_67:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v52, v53, v51);
  }
  if (!*(unsigned char *)this) {
    goto LABEL_46;
  }
  uint64_t v12 = *(unsigned __int8 *)(a6 + 1);
  if (!*(unsigned char *)(a6 + 1)) {
    goto LABEL_46;
  }
  uint64_t v13 = 0;
  memset(v55, 0, sizeof(v55));
  memset(v54, 0, sizeof(v54));
  float v14 = *((float *)this + 5);
  float v15 = *((float *)this + 6);
  LOWORD(v11) = *(_WORD *)(a4 + 26);
  float v16 = fabsf(v15) * (float)v11;
  float v17 = *(float *)(a6 + 4);
  float v18 = v15 + *(float *)(a6 + 36);
  do
  {
    if (!v13 && (v14 > v17 ? (BOOL v19 = v16 < 1.0) : (BOOL v19 = 0), v19))
    {
      *(float *)char v55 = v14;
      *(float *)int v54 = v18;
    }
    else
    {
      *(_DWORD *)((char *)v55 + v13) = *(_DWORD *)(a6 + v13 + 4);
      *(_DWORD *)((char *)v54 + v13) = *(_DWORD *)(a6 + v13 + 36);
    }
    v13 += 4;
  }
  while (4 * v12 != v13);
  LOWORD(v14) = *(_WORD *)(a4 + 10);
  float v20 = (float)LODWORD(v14) * 0.003;
  float v21 = fmodf(v20, 4295000000.0);
  if (v20 <= 4295000000.0) {
    float v21 = v20;
  }
  if (v21 < -4295000000.0) {
    float v21 = -fmodf(-v21, 4295000000.0);
  }
  if (v21 < 0.0) {
    unsigned int v22 = -(float)-v21;
  }
  else {
    LOBYTE(v22) = v21;
  }
  float v23 = *((float *)this + 4);
  if (v23 <= 0.0 || *(float *)v55 <= 0.0 || v17 <= 0.0)
  {
LABEL_46:
    *(void *)a7 = 0;
    *(void *)(a7 + 8) = 0;
    return;
  }
  uint64_t v24 = 0;
  LOBYTE(v25) = 0;
  float v26 = (float)(*(float *)v55 * 3.0) / v23;
  float v27 = v26 + (float)(v17 * 0.063539);
  float v28 = *(float *)v54;
  unsigned int v29 = *(unsigned __int16 *)(a6 + 80);
  uint64_t v30 = *(unsigned __int8 *)(a6 + 72);
  uint64_t v31 = *(int *)(a6 + 76);
  if (v12 <= 1) {
    uint64_t v32 = 1;
  }
  else {
    uint64_t v32 = v12;
  }
  do
  {
    if (v24 && *((float *)v55 + v24) > *((float *)v55 + (v24 - 1)))
    {
      int v51 = "fPeakMag[ucI] <= fPeakMag[ucI - 1]";
      DeviceFaultNotify("glmesrd_crosscorr.cpp", 185, "Run", (char)"fPeakMag[ucI] <= fPeakMag[ucI - 1]");
      int v52 = "glmesrd_crosscorr.cpp";
      int v53 = 185;
      goto LABEL_67;
    }
    float v33 = *((float *)v54 + v24);
    if ((_BYTE)v25)
    {
      uint64_t v34 = v25;
      char v35 = 1;
      int32x4_t v36 = v56;
      do
      {
        unsigned int v37 = *v36++;
        v35 &= vabds_f32(v33, *((float *)v54 + v37)) > 1.0;
        --v34;
      }
      while (v34);
    }
    else
    {
      char v35 = 1;
    }
    if (v29 >= 0x23F)
    {
      int v51 = "IsValid()";
      DeviceFaultNotify("glsignalid.h", 791, "GetSecondsPerChip", (char)"IsValid()");
      int v52 = "glsignalid.h";
      int v53 = 791;
      goto LABEL_67;
    }
    uint64_t v38 = BlueFin::GlSvId::s_aucSvId2gnss[v30];
    int v39 = BlueFin::GlSignalId::s_aulSignalIndexAndGnss2chipsPerEpoch[7 * (int)v31 + v38];
    unsigned int v40 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v31 - v31 + v38];
    if (v39) {
      BOOL v41 = v40 == 0;
    }
    else {
      BOOL v41 = 1;
    }
    if (v41)
    {
      int v51 = "ulChipsPerEpoch != 0 && ucMsPerEpoch != 0";
      DeviceFaultNotify("glsignalid.h", 799, "GetSecondsPerChip", (char)"ulChipsPerEpoch != 0 && ucMsPerEpoch != 0");
      int v52 = "glsignalid.h";
      int v53 = 799;
      goto LABEL_67;
    }
    float v42 = (double)v40 / (double)(1000 * v39) * 299792458.0;
    if (vabds_f32(v33, v28) <= (float)(2000.0 / v42)) {
      char v35 = 0;
    }
    if (v35)
    {
      v56[v25] = v24;
      LOBYTE(v25) = v25 + 1;
    }
    ++v24;
  }
  while (v24 != v32);
  if (v25 < 3u) {
    goto LABEL_46;
  }
  unsigned __int8 v43 = 0;
  unsigned __int8 v44 = 0;
  uint64_t v25 = v25;
  char v45 = v56;
  do
  {
    unsigned int v46 = *v45++;
    float v47 = *((float *)v55 + v46);
    if (v47 > v26) {
      ++v44;
    }
    if (v47 > v27) {
      ++v43;
    }
    --v25;
  }
  while (v25);
  float v48 = *((float *)v55 + v56[0]) + *((float *)v55 + v56[0]);
  *(unsigned char *)(a7 + 4) = v44;
  *(unsigned char *)(a7 + 5) = v43;
  *(unsigned char *)(a7 + 6) = v22;
  *(unsigned char *)(a7 + 7) = 1;
  *(float *)(a7 + 8) = v26;
  *(float *)(a7 + 12) = v27;
  if (v43 > 1u && v44 > v22) {
    int v50 = 2;
  }
  else {
    int v50 = 1;
  }
  *(_DWORD *)a7 = v50;
  if (v17 > v48)
  {
    *(_DWORD *)a7 = 1;
    *(void *)(a7 + 4) = 0;
    *(_DWORD *)(a7 + 12) = 0;
  }
}

void *BlueFin::GlMeSrdSatReport::ProcessSrchMsmt(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  double result = BlueFin::GlMeSrdSatRptSearchMsmtMI::GlMeSrdSatRptSearchMsmtMI(v12, a2, a3, **(void **)(a1 + 8), *(void *)a1, a4);
  if ((*(unsigned char *)(v13 + 28) & 8) == 0)
  {
    uint64_t v8 = *(unsigned __int8 *)(v13 + 24);
    uint64_t v9 = (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 224))(**(void **)(a1 + 8));
    uint64_t v10 = (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 232))(**(void **)(a1 + 8)) + 1;
    uint64_t v11 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 8) + 248))(**(void **)(a1 + 8), v8);
    return (void *)BlueFin::GlMeSrdSatReport::RunSrchEstimatorAlgorithms((void *)a1, v9, v10, v11, (BlueFin::GlMeSrdSatRptSearchMsmtMI *)v12, a5, 0.24);
  }
  return result;
}

uint64_t BlueFin::GlMeSrdReceiverParameters::GetHostSrchParams(BlueFin::GlMeSrdReceiverParameters *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)BlueFin::GlMeSrdReceiverParameters::rRxIfc(this) + 232);

  return v1();
}

uint64_t BlueFin::GlMeSrdReceiverParameters::GetAllSrchParams(BlueFin::GlMeSrdReceiverParameters *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)BlueFin::GlMeSrdReceiverParameters::rRxIfc(this) + 224);

  return v1();
}

uint64_t BlueFin::GlMeRxParamStd::GetHostSrchParams(int **this)
{
  return *(void *)(*((void *)BlueFin::GlMeRxParamStd::rMap(this) + 3) + 8);
}

uint64_t BlueFin::GlMeRxParamStd::GetAllSrchParams(int **this)
{
  return **((void **)BlueFin::GlMeRxParamStd::rMap(this) + 3);
}

uint64_t BlueFin::GlMeSrdSatReport::RunSrchEstimatorAlgorithms(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, BlueFin::GlMeSrdSatRptSearchMsmtMI *this, uint64_t a6, float a7)
{
  int v14 = *(_DWORD *)(*((void *)this + 52) + 28);
  int IsDebugIntermediaryReport = BlueFin::GlMeSrdSatRptSearchMsmtMI::IsDebugIntermediaryReport(this);
  uint64_t v16 = *((void *)this + 52);
  BOOL v17 = (*(unsigned char *)(v16 + 28) & 0x10) != 0
     && *(unsigned __int16 *)(v16 + 104 + 108 * *(unsigned __int8 *)(v16 + 104) + 22) > 9u;
  uint64_t result = BlueFin::GlMeSrdSatRptSearchMsmtMI::IsFailedSrch(this);
  if (!*((unsigned char *)this + 8))
  {
    char v45 = "stAcqWindowMsmtInfo.m_bValid";
    DeviceFaultNotify("glmesrd_sat_report_srch.cpp", 59, "RunSrchEstimatorAlgorithms", (char)"stAcqWindowMsmtInfo.m_bValid");
    int v46 = 59;
    goto LABEL_65;
  }
  if (result) {
    return result;
  }
  if ((v14 & 2) != 0)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)*a1 + 528))(*a1);
    if (!result) {
      return result;
    }
  }
  if (IsDebugIntermediaryReport)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)*a1 + 536))(*a1);
    if (!result) {
      return result;
    }
  }
  *(void *)&long long v67 = a3;
  HIDWORD(v66) = IsDebugIntermediaryReport;
  BlueFin::GlMeSrdAcqWindowMsmtInfo::CopyFrom(a6, (uint64_t)this + 8);
  int v19 = *((unsigned __int8 *)this + 88);
  int v20 = *((_DWORD *)this + 7);
  double v21 = *((double *)this + 9) * 1000.0;
  v169[0] = *((unsigned char *)a1 + 488);
  v169[1] = *((unsigned char *)a1 + 492);
  int v170 = v20;
  double v171 = v21;
  if (!v19)
  {
    char v45 = "stCNoSrchMsmt.bValid";
    DeviceFaultNotify("glmesrd_sat_report_srch.cpp", 114, "RunSrchEstimatorAlgorithms", (char)"stCNoSrchMsmt.bValid");
    int v46 = 114;
    goto LABEL_65;
  }
  DWORD2(v66) = v17;
  v165[0] = 0;
  int v166 = 0;
  int32x4_t v167 = vdupq_n_s32(0x7F7FFFFFu);
  uint64_t v168 = 2139095039;
  float v22 = (*(float (**)(void, uint64_t))(**(void **)this + 840))(*(void *)this, (uint64_t)a1 + 492);
  BlueFin::GlMeSrdEstCNo::Run((uint64_t)(a1 + 192), v22, (uint64_t)&BlueFin::GlMeSrdConstants::m_stPhysConst, a2, a4, (uint64_t)v174, (unsigned __int8 *)a1 + 492, (uint64_t)this + 88, (uint64_t)v165);
  if (BlueFin::GlMeSrdCNoResults::isGarbage((BlueFin::GlMeSrdCNoResults *)v165))
  {
    char v45 = "!stCNoSrchRslt.isGarbage()";
    DeviceFaultNotify("glmesrd_sat_report_srch.cpp", 134, "RunSrchEstimatorAlgorithms", (char)"!stCNoSrchRslt.isGarbage()");
    int v46 = 134;
    goto LABEL_65;
  }
  if (v165[0] && v166 != 1)
  {
    char v45 = "stCNoSrchRslt.m_otMsmtSrc.GetEnum() == GLMESRD_MSMT_SRC_SEARCH";
    DeviceFaultNotify("glmesrd_sat_report_srch.cpp", 138, "RunSrchEstimatorAlgorithms", (char)"stCNoSrchRslt.m_otMsmtSrc.GetEnum() == GLMESRD_MSMT_SRC_SEARCH");
    int v46 = 138;
    goto LABEL_65;
  }
  if (!*((unsigned char *)this + 136))
  {
    char v45 = "stCorrVecSrchMsmt.m_bValid";
    DeviceFaultNotify("glmesrd_sat_report_srch.cpp", 154, "RunSrchEstimatorAlgorithms", (char)"stCorrVecSrchMsmt.m_bValid");
    int v46 = 154;
    goto LABEL_65;
  }
  memset(v164, 0, 47);
  uint64_t v23 = *((unsigned __int8 *)a1 + 488);
  uint64_t v24 = (*(uint64_t (**)(void))(**(void **)this + 544))(*(void *)this);
  BlueFin::GlMeSrdEstPkFit::Run((uint64_t)(a1 + 196), (uint64_t)&BlueFin::GlMeSrdConstants::m_stPhysConst, (uint64_t)this + 136, (uint64_t)a1 + 492, v23, v24, (uint64_t)v165, (uint64_t)v164, v25, v26, v27, v28, v29, v30, v31, v32, v47, *(float *)&v48, SHIDWORD(v48),
    v50);
  v163[0] = 0;
  v163[1] = 0;
  if (!*((unsigned char *)this + 320))
  {
    char v45 = "stAltPkSrchMsmt.m_bValid";
    DeviceFaultNotify("glmesrd_sat_report_srch.cpp", 181, "RunSrchEstimatorAlgorithms", (char)"stAltPkSrchMsmt.m_bValid");
    int v46 = 181;
    goto LABEL_65;
  }
  BlueFin::GlMeSrdEstCrossCorr::Run(a1 + 1728, (int)&BlueFin::GlMeSrdConstants::m_stPhysConst, a2, a4, (BlueFin::GlMeSrdCNoResults *)v165, (uint64_t)this + 320, (uint64_t)v163);
  LOBYTE(v155) = 0;
  uint64_t v157 = 0;
  uint64_t v158 = 0;
  uint64_t v156 = 0;
  int v159 = 1149222912;
  long long v160 = 0u;
  long long v161 = 0u;
  int v162 = 0;
  BlueFin::GlMeSrdEstMultipath::Run((uint64_t)(a1 + 217), (int)&BlueFin::GlMeSrdConstants::m_stPhysConst, a2, a4, (uint64_t)a1 + 492, (BlueFin::GlMeSrdCNoResults *)v165, (uint64_t)v164, (uint64_t)this + 320, (uint64_t)&v155);
  if (!*((unsigned char *)this + 200))
  {
    char v45 = "stCarrPrmSrchMsmt.bValid";
    DeviceFaultNotify("glmesrd_sat_report_srch.cpp", 219, "RunSrchEstimatorAlgorithms", (char)"stCarrPrmSrchMsmt.bValid");
    int v46 = 219;
    goto LABEL_65;
  }
  __int16 v142 = 0;
  uint64_t v143 = 0x7FEFFFFFFFFFFFFFLL;
  int v144 = 2139095039;
  uint64_t v146 = 0;
  uint64_t v145 = 0;
  char v147 = 0;
  int64x2_t v148 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  int32x2_t v149 = vdup_n_s32(0x7F7FFFFFu);
  uint64_t v150 = 0xFFFFFFFFLL;
  char v151 = 0;
  uint64_t v153 = 0;
  uint64_t v154 = 0;
  uint64_t v152 = 0x7FEFFFFFFFFFFFFFLL;
  if (*((_DWORD *)this + 51) != 2)
  {
    char v45 = "0";
    DeviceFaultNotify("glmesrd_sat_report_srch.cpp", 231, "RunSrchEstimatorAlgorithms", (char)"0");
    int v46 = 231;
    goto LABEL_65;
  }
  BlueFin::GlMeSrdEstCarrPrm::Run((uint64_t)(a1 + 336), (int)&BlueFin::GlMeSrdConstants::m_stPhysConst, a2, a4, (int)&v172, (uint64_t)this + 200, (unsigned __int8 *)a1 + 492, *((unsigned char *)a1 + 488), *((double *)this + 9) * 1000.0, (BlueFin::GlMeSrdCarrPrmResults *)&v142);
  uint64_t v33 = v67;
  if (BlueFin::GlMeSrdCarrPrmResults::isGarbage((BlueFin::GlMeSrdCarrPrmResults *)&v142))
  {
    char v45 = "!stCarrPrmSrchRslt.isGarbage()";
    DeviceFaultNotify("glmesrd_sat_report_srch.cpp", 247, "RunSrchEstimatorAlgorithms", (char)"!stCarrPrmSrchRslt.isGarbage()");
    int v46 = 247;
    goto LABEL_65;
  }
  int v34 = *((unsigned __int8 *)this + 212);
  v138[0] = 0;
  float v139 = -1.0;
  __int16 v140 = 0;
  char v141 = 127;
  if (v34)
  {
    BlueFin::GlMeSrdEstBitPhs::Run((uint64_t)(a1 + 228), (uint64_t)&BlueFin::GlMeSrdConstants::m_stPhysConst, a2, a4, (uint64_t)&v173, (uint64_t)v169, (uint64_t)this + 212, (uint64_t)v165, (uint64_t)v138, v49, v51, v52, v53, v54, v55, v56, v57, *(__int16 *)v58, v58[2],
      v58[3],
      v58[4],
      v59,
      v60,
      v61,
      v62,
      v63,
      v64,
      v66,
      v67,
      v68[0],
      v68[1],
      v69,
      v70,
      v71,
      v72);
    if (v138[0])
    {
      if ((_BYTE)v140 && (v139 < 0.0 || v141 == 127))
      {
        char v45 = "!stBitPhsSrchRslt.isGarbage()";
        DeviceFaultNotify("glmesrd_sat_report_srch.cpp", 304, "RunSrchEstimatorAlgorithms", (char)"!stBitPhsSrchRslt.isGarbage()");
        int v46 = 304;
LABEL_65:
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_report_srch.cpp", v46, v45);
      }
    }
  }
  if (!*((unsigned char *)this + 304))
  {
    char v45 = "stCodePrmSrchMsmt.bValid";
    DeviceFaultNotify("glmesrd_sat_report_srch.cpp", 312, "RunSrchEstimatorAlgorithms", (char)"stCodePrmSrchMsmt.bValid");
    int v46 = 312;
    goto LABEL_65;
  }
  __int16 v131 = 0;
  char v132 = 0;
  double v133 = 1.79769313e308;
  float v134 = 3.4028e38;
  uint64_t v135 = 0;
  char v136 = 0;
  int v137 = 2139095039;
  BlueFin::GlMeSrdEstCodePrm::Run((uint64_t)(a1 + 404), (uint64_t)&BlueFin::GlMeSrdConstants::m_stPhysConst, a2, a4, v33, (unsigned __int8 *)a1 + 492, (uint64_t)this + 304, (uint64_t)v165, (uint64_t)v164, &v155, (uint64_t)&v131);
  v35.n128_f32[0] = v134;
  if ((_BYTE)v131)
  {
    if (v133 == 1.79769313e308 || v134 == 3.4028e38 || !v135)
    {
LABEL_67:
      char v45 = "!stCodePrmSrchRslt.isGarbage()";
      DeviceFaultNotify("glmesrd_sat_report_srch.cpp", 333, "RunSrchEstimatorAlgorithms", (char)"!stCodePrmSrchRslt.isGarbage()");
      int v46 = 333;
      goto LABEL_65;
    }
  }
  else if (v133 != 0.0 || v134 != 0.0 || v135)
  {
    goto LABEL_67;
  }
  __int16 v128 = 0;
  uint64_t v129 = 0x7FEFFFFFFFFFFFFFLL;
  uint64_t v130 = 0x7F7FFFFFFFFFFFFFLL;
  __int16 v126 = 0;
  uint64_t v36 = 4;
  char v127 = 0;
  do
  {
    unsigned int v37 = (char *)&v126 + v36;
    *(void *)unsigned int v37 = 0;
    *((void *)v37 + 1) = 0;
    *((_DWORD *)v37 + 4) = 1176492032;
    v36 += 20;
  }
  while (v37 + 20 != (char *)&v128);
  LOBYTE(v66) = *((unsigned char *)this + 124) == 4;
  uint64_t v38 = *((void *)this + 52);
  uint64_t v39 = *(unsigned __int8 *)(v38 + 24);
  unsigned __int8 v65 = *(unsigned char *)(v38 + 105) == 2;
  int v40 = (*(uint64_t (**)(void, __n128))(**(void **)(a1[1] + 24) + 40))(*(void *)(a1[1] + 24), v35);
  LOBYTE(v96) = -1;
  HIDWORD(v96) = 0;
  __int16 v97 = 575;
  *(void *)&v119[0] = &unk_270EBECA8;
  unsigned int v120 = 0;
  *(void *)&long long v67 = v121;
  v121[0] = 0;
  int v122 = -1;
  __int16 v123 = 575;
  BlueFin::GlMeDSPMeas::init((uint64_t)v119, (uint64_t)&v96);
  uint64_t v96 = &unk_270EBECD8;
  int v98 = 0;
  __int16 v99 = 0;
  uint64_t v100 = 0;
  uint64_t v101 = 0;
  char v102 = 0;
  long long v117 = 0u;
  long long v118 = 0u;
  long long v103 = 0u;
  long long v104 = 0u;
  long long v105 = 0u;
  long long v106 = 0u;
  long long v107 = 0u;
  long long v108 = 0u;
  long long v109 = 0u;
  long long v110 = 0u;
  long long v111 = 0u;
  long long v112 = 0u;
  long long v113 = 0u;
  long long v114 = 0u;
  long long v115 = 0u;
  long long v116 = 0u;
  __int16 v97 = 0;
  float v73 = &unk_270EBECD8;
  int v75 = 0;
  __int16 v76 = 0;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  char v79 = 0;
  long long v94 = 0u;
  long long v95 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  long long v92 = 0u;
  long long v93 = 0u;
  __int16 v74 = 0;
  BlueFin::GlMeSrdRptCtrl::Run((uint64_t)(a1 + 435), *((double *)this + 9), *((double *)this + 10), 0.0, 0.0, 0.0, a7, 0.0, 0.0, (uint64_t)&BlueFin::GlMeSrdConstants::m_stPhysConst, (uint64_t)v165, (uint64_t)&v131, (uint64_t)&v142, v138, 0, (uint64_t)&v155, (uint64_t)&v155, (uint64_t)&v128, (uint64_t)&v126,
    *((_DWORD *)this + 7),
    0,
    (unsigned __int8 *)a1 + 492,
    *((unsigned char *)a1 + 488),
    7,
    0,
    0,
    v66,
    v65,
    (v14 & 2) != 0,
    SBYTE12(v66),
    SBYTE8(v66),
    v39,
    0,
    v40,
    *(_WORD *)(a1[1] + 40),
    HIBYTE(*(_WORD *)(a1[1] + 40)),
    0,
    0,
    (uint64_t)v119,
    (uint64_t)&v96,
    (uint64_t)&v73,
    (uint64_t)&v142);
  HIDWORD(v67) = 1;
  BlueFin::GlMeSrdDspMeasAux::GlMeSrdDspMeasAux((uint64_t)v68, (uint64_t)v121, v124, (_DWORD *)&v67 + 3, v119[3]);
  if (v165[0])
  {
    if (v166 != 1)
    {
      char v45 = "stCNoSrchRslt.m_otMsmtSrc.GetEnum() == GLMESRD_MSMT_SRC_SEARCH";
      DeviceFaultNotify("glmesrd_sat_report_srch.cpp", 431, "RunSrchEstimatorAlgorithms", (char)"stCNoSrchRslt.m_otMsmtSrc.GetEnum() == GLMESRD_MSMT_SRC_SEARCH");
      int v46 = 431;
      goto LABEL_65;
    }
    int v41 = *(_DWORD *)(a4 + 20);
    HIDWORD(v69) = v167.i32[2];
    LODWORD(v70) = v41;
    BYTE8(v69) = 1;
  }
  if (v135 == 4) {
    DWORD2(v70) = HIDWORD(v158);
  }
  if (v125 == 15)
  {
    uint64_t v42 = (*(uint64_t (**)(void, uint64_t))(**(void **)a1[1] + 248))(*(void *)a1[1], v39);
    int v43 = (*(unsigned __int8 *)(v42 + 24) >> 6) & 1;
    BYTE5(v70) = (*(unsigned char *)(v42 + 24) & 0x40) != 0;
    if (v125 == 15)
    {
      if (!v43)
      {
        int v44 = (v120 >> 3) & 1;
        if (v40 | HIDWORD(v66)) {
          LOBYTE(v44) = 1;
        }
        goto LABEL_49;
      }
      if ((~v120 & 0x418) == 0)
      {
        LOBYTE(v44) = 1;
LABEL_49:
        BYTE4(v70) = v44;
      }
    }
  }
  else
  {
    BYTE5(v70) = 0;
  }
  uint64_t result = BlueFin::GlMeSrdDspMeasAux::isGarbage((BlueFin::GlMeSrdDspMeasAux *)v68);
  if (result)
  {
    char v45 = "!otDspMeasAux.isGarbage()";
    DeviceFaultNotify("glmesrd_sat_report_srch.cpp", 471, "RunSrchEstimatorAlgorithms", (char)"!otDspMeasAux.isGarbage()");
    int v46 = 471;
    goto LABEL_65;
  }
  if ((v120 & 0x10) != 0) {
    return (*(uint64_t (**)(void, double *, long long *, void))(**(void **)(a1[1] + 8) + 16))(*(void *)(a1[1] + 8), v119, v68, 0);
  }
  return result;
}

uint64_t BlueFin::GlMeSrdCNoResults::isGarbage(BlueFin::GlMeSrdCNoResults *this)
{
  int v1 = *((_DWORD *)this + 1);
  if (!v1 || *((float *)this + 2) == 3.4028e38 || *((float *)this + 3) == 3.4028e38) {
    return 1;
  }
  switch(v1)
  {
    case 1:
      if (*((float *)this + 4) == 3.4028e38) {
        return 1;
      }
      break;
    case 2:
    case 3:
    case 4:
      if (*((float *)this + 4) != 3.4028e38) {
        return 1;
      }
      break;
    default:
      return 1;
  }
  return 0;
}

BOOL BlueFin::GlMeStateProvider::IsFactoryAidingDetected(BlueFin::GlMeStateProvider *this)
{
  int v1 = (unsigned __int16 *)(*((void *)this + 1) + 9888);
  BOOL result = *v1 - 1 <= 3 && *(unsigned __int8 *)(*((void *)this + 1) + 9890) - 1 < 4;
  *((unsigned char *)v1 + 3) = result;
  return result;
}

double BlueFin::GlMeSrdAcqWindowMsmtInfo::CopyFrom(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  if (a1 != a2)
  {
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
    *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  }
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  double result = *(double *)(a2 + 56);
  *(double *)(a1 + 56) = result;
  return result;
}

BOOL BlueFin::GlMeSrdCarrPrmResults::isGarbage(BlueFin::GlMeSrdCarrPrmResults *this)
{
  if (!*(unsigned char *)this) {
    return 0;
  }
  if (*((unsigned char *)this + 1)) {
    BOOL v1 = *((double *)this + 1) == 1.79769313e308 || *((float *)this + 4) == 3.4028e38 || !*((_DWORD *)this + 5);
  }
  else {
    BOOL v1 = *((_DWORD *)this + 5) != 0;
  }
  if (*((unsigned char *)this + 34) || *((unsigned char *)this + 35))
  {
    if (*((double *)this + 5) == 1.79769313e308 || *((float *)this + 14) == 3.4028e38 || *((_DWORD *)this + 16) == -1) {
      goto LABEL_19;
    }
  }
  else
  {
    if (!*((unsigned char *)this + 36))
    {
      if (*((_DWORD *)this + 17)) {
        BOOL v1 = 1;
      }
      goto LABEL_20;
    }
    if (*((double *)this + 6) == 1.79769313e308 || *((float *)this + 15) == 3.4028e38) {
      goto LABEL_19;
    }
  }
  unsigned int v3 = *((_DWORD *)this + 17);
  if (v3 <= 6 && ((1 << v3) & 0x61) != 0) {
LABEL_19:
  }
    BOOL v1 = 1;
LABEL_20:
  if (!*((unsigned char *)this + 72)) {
    return (*((_DWORD *)this + 22) | v1) != 0;
  }
  if (*((double *)this + 10) == 3.40282347e38) {
    return 1;
  }
  int v4 = *((_DWORD *)this + 22);
  BOOL result = v1;
  if (!v4) {
    return 1;
  }
  return result;
}

void BlueFin::GlMeSrdSvIdReportMgr::SetDSPMeas(BlueFin::GlMeSrdSvIdReportMgr *this, const BlueFin::GlMeDSPMeas *a2, const BlueFin::GlMeSrdDspMeasAux *a3, const BlueFin::GlMeSrdMultiPeakResults *a4)
{
  if (BlueFin::GlMeSrdDspMeasAux::isGarbage(a3))
  {
    long long v82 = "!otDspMeasAux.isGarbage()";
    DeviceFaultNotify("glmesrd_svid_report_mgr.cpp", 81, "SetDSPMeas", (char)"!otDspMeasAux.isGarbage()");
    long long v83 = "glmesrd_svid_report_mgr.cpp";
    int v84 = 81;
    goto LABEL_165;
  }
  (*(void (**)(void, const BlueFin::GlMeDSPMeas *, const BlueFin::GlMeSrdDspMeasAux *))(**((void **)this + 798) + 24))(*((void *)this + 798), a2, a3);
  uint64_t v8 = BlueFin::GlUtils::m_pInstance;
  if (BlueFin::GlUtils::m_pInstance)
  {
    if (!*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)
      || ((*(void (**)(const BlueFin::GlMeDSPMeas *, void, void))(*(void *)a2 + 24))(a2, 0, 0),
          (uint64_t v8 = BlueFin::GlUtils::m_pInstance) != 0))
    {
      if (*(unsigned char *)(v8 + 1122)) {
        (*(void (**)(const BlueFin::GlMeSrdDspMeasAux *, void, void))(*(void *)a3 + 24))(a3, 0, 0);
      }
    }
  }
  int v9 = *((_DWORD *)a2 + 26);
  if (!v9
    || v9 == 3
    || *((unsigned char *)a3 + 34)
    || v9 == 2
    && (((*(uint64_t (**)(void))(**((void **)this + 799) + 1200))(*((void *)this + 799)) & 1) != 0
     || *((_DWORD *)a2 + 35) == 10))
  {
    uint64_t v10 = (char *)a2 + 100;
    int v11 = *((_DWORD *)a2 + 35);
    if ((v11 - 10) >= 3)
    {
      if (v11 == 14)
      {
LABEL_14:
        if (((*(uint64_t (**)(void, void))(**((void **)this + 798) + 8))(*((void *)this + 798), *((unsigned __int8 *)a2 + 112)) & 1) == 0)
        {
          unint64_t v12 = *v10;
          uint64_t v13 = *((void *)this + 806);
          unint64_t v14 = v12 >> 5;
          uint64_t v15 = *(unsigned int *)(v13 + 4 * (v12 >> 5));
          uint64_t v16 = 1 << (v12 & 0x1F);
          if ((v16 & v15) != 0)
          {
            if ((v16 & *(_DWORD *)(*((void *)this + 800) + 4 * v14)) != 0)
            {
              BlueFin::GlSetBase::Remove((uint64_t)this + 6448, v12);
              (***((void (****)(void, void))this + 798))(*((void *)this + 798), *((unsigned __int8 *)a2 + 112));
            }
          }
          else
          {
            *(_DWORD *)(v13 + 4 * v14) = (1 << (v12 & 0x1F)) | v15;
          }
        }
LABEL_23:
        BlueFin::GlMeSrdSvIdMsmtHistoryBuffer::GetMsmtHistorySlot((BlueFin::GlMeSrdSvIdReportMgr *)((char *)this + 1536), (const BlueFin::GlMeDSPMeas *)((char *)a2 + 100));
        BlueFin::GlMeSrdSvIdMsmtHistorySlot::Update(v17, (uint64_t)a2);
        if (BlueFin::GlMeSatIdProbationMgr::Ignoring((uint64_t)this + 6144, *((unsigned __int8 *)a2 + 112), (unsigned __int8 *)a2 + 100))
        {
          goto LABEL_128;
        }
        int v18 = *((_DWORD *)a3 + 9);
        if (v18 != 1) {
          goto LABEL_40;
        }
        uint64_t SrchRslts = BlueFin::GlMeSrdDspMeasAux::GetSrchRslts(a3);
        if (*(float *)(SrchRslts + 16) != 0.0)
        {
          (*(void (**)(void, void))(**((void **)this + 798) + 16))(*((void *)this + 798), *((unsigned __int8 *)a2 + 112));
          (*(void (**)(void, const BlueFin::GlMeDSPMeas *))(**((void **)this + 798) + 64))(*((void *)this + 798), a2);
LABEL_27:
          BlueFin::GlMeSatIdProbationMgr::Ignore((uint64_t)this + 6144, *((unsigned __int8 *)a2 + 112), (unsigned char *)a2 + 100);
          goto LABEL_128;
        }
        uint64_t v20 = SrchRslts;
        if (*((_DWORD *)a2 + 35) == 15)
        {
          if (*(unsigned char *)(BlueFin::GlMeSrdDspMeasAux::GetSrchRslts(a3) + 13)
            || *(unsigned char *)(BlueFin::GlMeSrdDspMeasAux::GetSrchRslts(a3) + 12))
          {
            if (*((_DWORD *)a2 + 35) != 15) {
              goto LABEL_33;
            }
            BlueFin::GlMeSrdSvIdMsmtHistoryBuffer::GetMsmtHistorySlot((BlueFin::GlMeSrdSvIdReportMgr *)((char *)this + 1536), (const BlueFin::GlMeDSPMeas *)((char *)a2 + 100));
            if (BlueFin::GlMeSrdSvIdMsmtHistorySlot::Verify2dBitOkToPublish(v21, a2, 0)) {
              goto LABEL_33;
            }
            v81.n128_f64[0] = BlueFin::GlMeSrdSvIdMsmtHistoryBuffer::GetMsmtHistorySlot((BlueFin::GlMeSrdSvIdReportMgr *)((char *)this + 1536), (const BlueFin::GlMeDSPMeas *)((char *)a2 + 100));
            if ((~*((_DWORD *)a2 + 21) & 0x70) != 0) {
              goto LABEL_27;
            }
          }
          else
          {
            GlCustomLog(14, "GlMeSrdSvIdReportMgr::MsmtIsGood4Saving SvId %u CarrType %s SatId %u - bad ESW controlled 2dbit estimate\n", *((unsigned __int8 *)a2 + 100), BlueFin::GlSignalId::s_ausSignalType2str[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)a2 + 26) - *((int *)a2 + 26) + BlueFin::GlSvId::s_aucSvId2gnss[*((unsigned __int8 *)a2 + 100)]]], *((unsigned __int8 *)a2 + 112));
          }
          (*(void (**)(void, void, __n128))(**((void **)this + 798) + 16))(*((void *)this + 798), *((unsigned __int8 *)a2 + 112), v81);
          goto LABEL_27;
        }
LABEL_33:
        if (*(unsigned char *)(BlueFin::GlMeSrdDspMeasAux::GetSrchRslts(a3) + 13)
          && *(unsigned char *)(BlueFin::GlMeSrdDspMeasAux::GetSrchRslts(a3) + 12))
        {
          (*(void (**)(void, void))(**((void **)this + 798) + 16))(*((void *)this + 798), *((unsigned __int8 *)a2 + 112));
          (*(void (**)(void, const BlueFin::GlMeDSPMeas *))(**((void **)this + 798) + 64))(*((void *)this + 798), a2);
        }
        else if (*(float *)(v20 + 4) < (float)(*(float *)(v20 + 8) * 0.8))
        {
          if (*((_DWORD *)a2 + 35) != 15) {
            (*(void (**)(void, void))(**((void **)this + 798) + 16))(*((void *)this + 798), *((unsigned __int8 *)a2 + 112));
          }
          goto LABEL_128;
        }
        int v18 = *((_DWORD *)a3 + 9);
LABEL_40:
        BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)v91, *((unsigned __int8 *)a2 + 112), *((_DWORD *)a2 + 26));
        if (v18 != 4)
        {
          if (v18 == 3)
          {
LABEL_59:
            BOOL v26 = 1;
            goto LABEL_61;
          }
          if (v18 != 2)
          {
            BOOL v26 = 0;
            goto LABEL_61;
          }
        }
        uint64_t TrkRslts = BlueFin::GlMeSrdDspMeasAux::GetTrkRslts(a3);
        uint64_t v23 = TrkRslts;
        unsigned int v24 = *((_DWORD *)a2 + 35);
        if (v24 <= 0x11 && ((1 << v24) & 0x21800) != 0)
        {
          int v25 = *(_DWORD *)(TrkRslts + 128);
          if ((v25 & 0x200) != 0)
          {
            (*(void (**)(void, unsigned char *))(**((void **)this + 798) + 40))(*((void *)this + 798), v91);
          }
          else if ((v25 & 0x400) != 0)
          {
            (*(void (**)(void, unsigned char *))(**((void **)this + 798) + 56))(*((void *)this + 798), v91);
          }
        }
        if (BlueFin::GlMeSrdDspMeasAuxTrackRslts::ReasonsForRequest::Any((BlueFin::GlMeSrdDspMeasAuxTrackRslts::ReasonsForRequest *)(v23 + 136)))
        {
          uint64_t v27 = *((void *)this + 798);
          if (*(unsigned char *)(v23 + 136))
          {
            (**(void (***)(uint64_t, void))v27)(v27, v91[0]);
            goto LABEL_57;
          }
          double v28 = *(void (**)(void))(*(void *)v27 + 32);
        }
        else
        {
          if (!BlueFin::GlMeSrdDspMeasAuxTrackRslts::ReasonsForRequest::Any((BlueFin::GlMeSrdDspMeasAuxTrackRslts::ReasonsForRequest *)(v23 + 144))) {
            goto LABEL_57;
          }
          double v28 = *(void (**)(void))(**((void **)this + 798) + 32);
        }
        v28();
LABEL_57:
        BOOL v26 = v18 == 3;
        if (v18 == 2)
        {
          int v29 = *((_DWORD *)a2 + 21);
          if ((v29 & 0x20) != 0)
          {
            BOOL v26 = (v29 & 0x40) == 0;
            goto LABEL_61;
          }
          goto LABEL_59;
        }
LABEL_61:
        BOOL v30 = BlueFin::GlBigArray::Has((BlueFin::GlBigArray *)(*((void *)this + 1) + 800), v91[0] + 100 * v92);
        uint64_t v31 = *((void *)this + 1);
        if (!v30) {
          goto LABEL_70;
        }
        if (v91[0] + 100 * v92 - *(unsigned __int16 *)(v31 + 828) >= *(unsigned __int16 *)(v31 + 830)) {
          goto LABEL_155;
        }
        unsigned int v32 = *(unsigned __int16 *)(*(void *)(v31 + 808)
                                  + 2 * (unsigned __int16)(v91[0] + 100 * v92 - *(_WORD *)(v31 + 828)));
        if (*(unsigned __int16 *)(v31 + 832) <= v32) {
          goto LABEL_157;
        }
        uint64_t v33 = *(void *)(v31 + 800) + *(_DWORD *)(v31 + 824) * v32;
        unsigned int v34 = *(_DWORD *)(v33 + 140);
        BOOL v35 = v34 > 0xF;
        int v36 = (1 << v34) & 0x8300;
        BOOL v37 = v35 || v36 == 0;
        if (v37 || (unsigned int v38 = *(_DWORD *)(v33 + 84), (v38 & 0x20) == 0) || (v26 & (v38 >> 6) & 1) == 0)
        {
LABEL_70:
          if (*(__int16 *)(v31 + 834) != -1 || !v26)
          {
            BOOL v40 = BlueFin::GlBigArray::Has((BlueFin::GlBigArray *)(v31 + 800), v91[0] + 100 * v92);
            BOOL v41 = v40;
            uint64_t v42 = *((void *)this + 1);
            if (*(__int16 *)(v42 + 834) != -1 || v40)
            {
LABEL_114:
              uint64_t v59 = (BlueFin::GlMeSrdSvIdReportMsmtSlot *)BlueFin::GlBigArray::Add((BlueFin::GlBigArray *)(v42 + 800), v91[0] + 100 * v92);
              if (v59)
              {
                if (!v41) {
                  uint64_t v59 = BlueFin::GlMeSrdSvIdReportMsmtSlot::GlMeSrdSvIdReportMsmtSlot(v59);
                }
                BlueFin::GlMeSrdSvIdReportMsmtSlot::Save(v59, a2, a3);
                if (!a4 || !*(unsigned char *)a4) {
                  goto LABEL_128;
                }
                if (*((_DWORD *)a2 + 26) == 2)
                {
                  int v60 = (*(uint64_t (**)(void, void))(**((void **)this + 3) + 40))(*((void *)this + 3), *((unsigned __int8 *)a2 + 112));
                  if ((*(unsigned int (**)(void))(**((void **)this + 3) + 64))(*((void *)this + 3))
                    && !v60)
                  {
                    goto LABEL_128;
                  }
                  uint64_t v61 = (*(uint64_t (**)(void, void))(**((void **)this + 3) + 24))(*((void *)this + 3), *((unsigned __int8 *)a2 + 112));
                  if (v61)
                  {
                    if ((v60 & 1) == 0)
                    {
                      *(_WORD *)uint64_t v61 = 0;
                      *(unsigned char *)(v61 + 2) = 0;
                      uint64_t v62 = v61 + 4;
                      int v63 = (unsigned char *)(v61 + 84);
                      do
                      {
                        *(void *)uint64_t v62 = 0;
                        *(void *)(v62 + 8) = 0;
                        *(_DWORD *)(v62 + 16) = 1176492032;
                        v62 += 20;
                      }
                      while ((unsigned char *)v62 != v63);
                      *int v63 = 0;
                    }
                    long long v64 = *((_OWORD *)a4 + 1);
                    *(_OWORD *)uint64_t v61 = *(_OWORD *)a4;
                    *(_OWORD *)(v61 + 16) = v64;
                    long long v65 = *((_OWORD *)a4 + 2);
                    long long v66 = *((_OWORD *)a4 + 3);
                    long long v67 = *((_OWORD *)a4 + 4);
                    *(_DWORD *)(v61 + 80) = *((_DWORD *)a4 + 20);
                    *(_OWORD *)(v61 + 48) = v66;
                    *(_OWORD *)(v61 + 64) = v67;
                    *(_OWORD *)(v61 + 32) = v65;
                    *(unsigned char *)(v61 + 84) = 1;
                    goto LABEL_128;
                  }
                  long long v82 = "potMultiPeakResultsSlot != nullptr";
                  DeviceFaultNotify("glmesrd_svid_report_mgr.cpp", 511, "SaveMsmt", (char)"potMultiPeakResultsSlot != nullptr");
                  long long v83 = "glmesrd_svid_report_mgr.cpp";
                  int v84 = 511;
                }
                else
                {
                  long long v82 = "otDspMeas.otSignalId.GetSignalIndex() == SIGNAL_INDEX_2";
                  DeviceFaultNotify("glmesrd_svid_report_mgr.cpp", 495, "SaveMsmt", (char)"otDspMeas.otSignalId.GetSignalIndex() == SIGNAL_INDEX_2");
                  long long v83 = "glmesrd_svid_report_mgr.cpp";
                  int v84 = 495;
                }
              }
              else
              {
                long long v82 = "potMsmtSlot != nullptr";
                DeviceFaultNotify("glmesrd_svid_report_mgr.cpp", 483, "SaveMsmt", (char)"potMsmtSlot != nullptr");
                long long v83 = "glmesrd_svid_report_mgr.cpp";
                int v84 = 483;
              }
LABEL_165:
              __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v83, v84, v82);
            }
            BOOL v85 = v40;
            long long v86 = a4;
            if (!*(_WORD *)(v42 + 832)) {
              goto LABEL_166;
            }
            unint64_t v43 = 0;
            char v90 = 0;
            char v44 = 0;
            char v45 = 0;
            uint64_t v88 = 0;
            uint64_t v89 = 0;
            unsigned __int8 v87 = 0;
            double v46 = 0.0;
            double v47 = 0.0;
            double v48 = 0.0;
            do
            {
              uint64_t v49 = *((void *)this + 1);
              int v50 = (unsigned __int16)(*(_WORD *)(v42 + 828) + *(_WORD *)(*(void *)(v42 + 816) + 2 * v43));
              if (!BlueFin::GlBigArray::Has((BlueFin::GlBigArray *)(v42 + 800), v50))
              {
                long long v82 = "m_potArray->Has(handle)";
                DeviceFaultNotify("glinc_array.h", 362, "Next", (char)"m_potArray->Has(handle)");
                long long v83 = "glinc_array.h";
                int v84 = 362;
                goto LABEL_165;
              }
              if (v50 - *(unsigned __int16 *)(v49 + 828) >= *(unsigned __int16 *)(v49 + 830)) {
                goto LABEL_155;
              }
              unsigned int v51 = *(unsigned __int16 *)(*(void *)(v49 + 808) + 2 * (unsigned __int16)(v50 - *(_WORD *)(v49 + 828)));
              if (v51 == 0xFFFF)
              {
                uint64_t v52 = 0;
              }
              else
              {
                if (*(unsigned __int16 *)(v49 + 832) <= v51) {
                  goto LABEL_157;
                }
                uint64_t v52 = *(void *)(v49 + 800) + *(_DWORD *)(v49 + 824) * v51;
              }
              BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)v93, *(unsigned __int8 *)(v52 + 112), *(_DWORD *)(v52 + 104));
              int v53 = *(_DWORD *)(v52 + 164);
              switch(v53)
              {
                case 1:
                  if ((v44 & 1) != 0 && v48 < *(double *)(v52 + 24))
                  {
                    char v44 = 1;
                  }
                  else
                  {
                    if (v94)
                    {
                      long long v82 = "otSatCarrId.GetSignalIndex() == SIGNAL_INDEX_0";
                      DeviceFaultNotify("glmesrd_svid_report_mgr.cpp", 1461, "GarbageCollector", (char)"otSatCarrId.GetSignalIndex() == SIGNAL_INDEX_0");
                      long long v83 = "glmesrd_svid_report_mgr.cpp";
                      int v84 = 1461;
                      goto LABEL_165;
                    }
                    double v48 = *(double *)(v52 + 24);
                    char v44 = 1;
                    BYTE4(v88) = v93[0];
                  }
                  break;
                case 2:
                  if ((v90 & (v47 < *(double *)(v52 + 24))) != 0)
                  {
                    char v90 = 1;
                  }
                  else
                  {
                    char v90 = 1;
                    unsigned __int8 v87 = v94;
                    LOBYTE(v88) = v93[0];
                    double v47 = *(double *)(v52 + 24);
                  }
                  break;
                case 3:
                  if ((v45 & 1) != 0 && v46 < *(double *)(v52 + 24))
                  {
                    char v45 = 1;
                  }
                  else
                  {
                    if (v94 && v94 != 3)
                    {
                      long long v82 = "otSatCarrId.GetSignalIndex() == SIGNAL_INDEX_0 || otSatCarrId.GetSignalIndex() == SIGNAL_INDEX_3";
                      DeviceFaultNotify("glmesrd_svid_report_mgr.cpp", 1440, "GarbageCollector", (char)"otSatCarrId.GetSignalIndex() == SIGNAL_INDEX_0 || otSatCarrId.GetSignalIndex() == SIGNAL_INDEX_3");
                      long long v83 = "glmesrd_svid_report_mgr.cpp";
                      int v84 = 1440;
                      goto LABEL_165;
                    }
                    BYTE4(v89) = v94;
                    double v46 = *(double *)(v52 + 24);
                    char v45 = 1;
                    LOBYTE(v89) = v93[0];
                  }
                  break;
              }
              ++v43;
            }
            while (v43 < *(unsigned __int16 *)(v42 + 832));
            unsigned __int8 v54 = v88;
            if (v44) {
              unsigned __int8 v54 = BYTE4(v88);
            }
            unsigned __int8 v55 = v87;
            if (v44) {
              unsigned __int8 v55 = 0;
            }
            if (v45)
            {
              unsigned __int8 v54 = v89;
              unsigned __int8 v55 = BYTE4(v89);
            }
            if ((((v45 | v44) | v90) & 1) == 0)
            {
LABEL_166:
              long long v82 = "0";
              DeviceFaultNotify("glmesrd_svid_report_mgr.cpp", 1493, "GarbageCollector", (char)"0");
              long long v83 = "glmesrd_svid_report_mgr.cpp";
              int v84 = 1493;
              goto LABEL_165;
            }
            a4 = v86;
            BOOL v41 = v85;
            if (v54 == 0xFF)
            {
              long long v82 = "otSatCarrToRemove.GetSatId() != INVALID_SATID";
              DeviceFaultNotify("glmesrd_svid_report_mgr.cpp", 1496, "GarbageCollector", (char)"otSatCarrToRemove.GetSatId() != INVALID_SATID");
              long long v83 = "glmesrd_svid_report_mgr.cpp";
              int v84 = 1496;
              goto LABEL_165;
            }
            uint64_t v56 = *((void *)this + 1);
            int v57 = 100 * v55 + v54;
            if (v57 - *(unsigned __int16 *)(v56 + 828) < *(unsigned __int16 *)(v56 + 830))
            {
              unsigned int v58 = *(unsigned __int16 *)(*(void *)(v56 + 808) + 2 * (unsigned __int16)(v57 - *(_WORD *)(v56 + 828)));
              if (v58 == 0xFFFF || *(unsigned __int16 *)(v56 + 832) > v58)
              {
                BlueFin::GlBigArray::Remove(v56 + 800, v57);
                uint64_t v42 = *((void *)this + 1);
                goto LABEL_114;
              }
LABEL_157:
              long long v82 = "slot < m_usNumSlots";
              DeviceFaultNotify("glinc_array.h", 319, "EnsureValidSlot", (char)"slot < m_usNumSlots");
              long long v83 = "glinc_array.h";
              int v84 = 319;
              goto LABEL_165;
            }
LABEL_155:
            long long v82 = "handle - m_usMinHandle < m_usNumHandles";
            DeviceFaultNotify("glinc_array.h", 313, "EnsureValidHandle", (char)"handle - m_usMinHandle < m_usNumHandles");
            long long v83 = "glinc_array.h";
            int v84 = 313;
            goto LABEL_165;
          }
        }
LABEL_128:
        if (!*((unsigned char *)this + 6368))
        {
          uint64_t v68 = *((void *)this + 1);
          BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)v93, *((unsigned __int8 *)a2 + 112), *((_DWORD *)a2 + 26));
          BOOL v69 = BlueFin::GlBigArray::Has((BlueFin::GlBigArray *)(v68 + 800), v93[0] + 100 * v94);
          int v72 = *((_DWORD *)a2 + 35);
          if (v72 == 15 || v72 == 9)
          {
            unsigned int v73 = *((_DWORD *)a2 + 21);
            if ((v73 & 0x20) != 0 && (v69 & (v73 >> 6)) != 0)
            {
              v71.n128_u32[0] = *((_DWORD *)this + 1593);
              double v74 = *((double *)a2 + 3) + (double)v71.n128_u64[0] * -0.001;
              v71.n128_f64[0] = v74 + 0.2;
              BOOL v35 = v74 <= 0.0;
              v70.n128_u64[0] = 1.0;
              if (!v35 && v71.n128_f64[0] < 1.0)
              {
                *((unsigned char *)this + 6368) = 1;
                if (!*((_DWORD *)a2 + 26))
                {
                  (*(void (**)(void, const BlueFin::GlMeDSPMeas *, __n128, __n128))(**((void **)this + 797)
                                                                                               + 24))(*((void *)this + 797), a2, v70, v71);
                  uint64_t v76 = *((void *)this + 797);
                  double v77 = *((double *)a2 + 3) * 1000.0;
                  double v78 = fmod(v77, 4294967300.0);
                  if (v77 <= 4294967300.0) {
                    double v78 = v77;
                  }
                  if (v78 < -4294967300.0) {
                    double v78 = -fmod(-v78, 4294967300.0);
                  }
                  if (v78 < 0.0) {
                    uint64_t v79 = --v78;
                  }
                  else {
                    uint64_t v79 = v78;
                  }
                  long long v80 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v76 + 56);
                  v80(v76, v79, 1000);
                }
              }
            }
          }
        }
        return;
      }
      if (v11 != 17) {
        goto LABEL_23;
      }
    }
    *(_DWORD *)(*((void *)this + 800) + (((unint64_t)*v10 >> 3) & 0x1C)) |= 1 << *v10;
    if (v11 != 14) {
      goto LABEL_23;
    }
    goto LABEL_14;
  }
}

BOOL BlueFin::GlMeSrdDspMeasAux::isGarbage(BlueFin::GlMeSrdDspMeasAux *this)
{
  switch(*((_DWORD *)this + 9))
  {
    case 1:
      if (*((unsigned char *)this + 64)
        || *((unsigned char *)this + 40) && (*((float *)this + 11) == 3.4028e38 || *((float *)this + 12) == 3.4028e38))
      {
        goto LABEL_16;
      }
      BOOL result = 0;
      break;
    case 2:
    case 4:
      if (*((unsigned char *)this + 40)) {
        goto LABEL_16;
      }
      unsigned int v1 = *((_DWORD *)this + 19);
      if (v1 >= 5 && v1 != 7) {
        goto LABEL_16;
      }
      unsigned int v3 = *((_DWORD *)this + 20);
      if (v3 >= 5 && v3 != 7) {
        goto LABEL_16;
      }
      BOOL result = *((_DWORD *)this + 21) > 2u;
      break;
    case 3:
      if (*((unsigned char *)this + 64)) {
        goto LABEL_16;
      }
      BOOL result = *((unsigned char *)this + 40) != 0;
      break;
    default:
LABEL_16:
      BOOL result = 1;
      break;
  }
  return result;
}

uint64_t BlueFin::GlMeSrdDspMeasAux::GetSrchRslts(BlueFin::GlMeSrdDspMeasAux *this)
{
  if (*((_DWORD *)this + 9) != 1)
  {
    DeviceFaultNotify("glmesrd_dsp_meas_aux.h", 400, "GetSrchRslts", (char)"m_otMsmtSource.GetEnum() == GLMESRD_MSMT_SRC_SEARCH");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_dsp_meas_aux.h", 400, "m_otMsmtSource.GetEnum() == GLMESRD_MSMT_SRC_SEARCH");
  }
  return (uint64_t)this + 40;
}

BOOL BlueFin::GlMeSrdDspMeasAuxTrackRslts::ReasonsForRequest::Any(BlueFin::GlMeSrdDspMeasAuxTrackRslts::ReasonsForRequest *this)
{
  return *(unsigned char *)this
      || *((unsigned char *)this + 1)
      || *((unsigned char *)this + 2)
      || *((unsigned char *)this + 3)
      || *((unsigned char *)this + 4)
      || *((unsigned char *)this + 5)
      || *((unsigned char *)this + 6)
      || *((unsigned char *)this + 7) != 0;
}

double BlueFin::GlMeSrdSvIdMsmtHistorySlot::Update(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 84);
  if ((~v2 & 0x70) == 0)
  {
    int v3 = *(_DWORD *)(a2 + 140);
    if ((v3 - 13) >= 4)
    {
      if (v3 != 10 || (LODWORD(result) = *(_DWORD *)(a2 + 40), *(float *)&result >= 20.0))
      {
        *(unsigned char *)a1 = 1;
        *(_DWORD *)(a1 + 4) = v3;
        *(_DWORD *)(a1 + 8) = v2;
        int v5 = *(_DWORD *)(a2 + 56);
        *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 32);
        *(_DWORD *)(a1 + 16) = v5;
        double result = *(double *)(a2 + 24);
        *(double *)(a1 + 24) = result;
      }
    }
  }
  return result;
}

void BlueFin::GlMeSrdSatStatusListener::MsmtReceived(BlueFin::GlMeSrdSatStatusListener *this, const BlueFin::GlMeDSPMeas *a2, const BlueFin::GlMeSrdDspMeasAux *a3)
{
  unint64_t v6 = *((unsigned __int8 *)a2 + 112);
  if (BlueFin::GlMeSrdSatMgr::IsSatInKillProcess((BlueFin::GlMeSrdSatMgr *)(*((void *)this + 1) + 3520), *((unsigned __int8 *)a2 + 112))|| !BlueFin::GlMeSrdSatMgr::CheckCoherence((void *)(*((void *)this + 1) + 3520), v6, (unsigned char *)a2 + 100))
  {
    return;
  }
  unsigned int v7 = *((_DWORD *)a2 + 35);
  BOOL v8 = v7 > 0xF;
  int v9 = (1 << v7) & 0x8300;
  if (v8 || v9 == 0)
  {
    if (!BlueFin::GlMeSrdSatTrackMgr::HasSat((BlueFin::GlMeSrdSatTrackMgr *)(*((void *)this + 1) + 14352), v6))
    {
      GlCustomLog(12, "Got a TrackMgr for a Sat that is not in Trck... RmReport lost?\n");
      BlueFin::GlMeSrdAcqMgrSm::MoveSatFromSSE2STE(*((BlueFin::GlMeSrdAcqMgrSm **)this + 1), v6);
      uint64_t v23 = (BlueFin::GlMeSrdSatTrackMgr *)(*((void *)this + 1) + 14352);
      BlueFin::GlMeSrdSatTrackMgr::TrackMsmtReceived(v23, a2, a3);
      return;
    }
    BlueFin::GlMeSrdSatTrackMgr::TrackMsmtReceived((BlueFin::GlMeSrdSatTrackMgr *)(*((void *)this + 1) + 14352), a2, a3);
    double v21 = (void *)(*((void *)this + 1) + 48 * *((int *)a2 + 26) + 24672);
    unint64_t v22 = *((unsigned __int8 *)a2 + 100);
    if ((*((unsigned char *)a2 + 87) & 2) != 0) {
      *(_DWORD *)(*v21 + ((v22 >> 3) & 0x1C)) |= 1 << v22;
    }
    else {
      BlueFin::GlSetBase::Remove((uint64_t)v21, v22);
    }
    if (*((_DWORD *)a2 + 35) != 10) {
      BlueFin::GlSetBase::Remove(*((void *)this + 1) + 24632, v6);
    }
    BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)v25, *((unsigned __int8 *)a2 + 112), *((_DWORD *)a2 + 26));
    if (v26 < 1 || *((_DWORD *)a2 + 35) == 14) {
      return;
    }
    if (*(unsigned char *)(BlueFin::GlMeSrdDspMeasAux::GetTrkRslts(a3) + 123))
    {
      if (*(unsigned char *)(BlueFin::GlMeSrdDspMeasAux::GetTrkRslts(a3) + 124)
        || *(unsigned char *)(BlueFin::GlMeSrdDspMeasAux::GetTrkRslts(a3) + 125))
      {
        int v18 = "otDspMeasAux.GetTrkRslts().m_bRequestForNonL1SnapToTap == false && otDspMeasAux.GetTrkRslts().m_bRequestFo"
              "rNonL1SnapToGridSrch == false";
        DeviceFaultNotify("glmesrd_acq_mgr.cpp", 719, "MsmtReceived", (char)"otDspMeasAux.GetTrkRslts().m_bRequestForNonL1SnapToTap == false && otDspMeasAux.GetTrkRslts().m_bRequestForNonL1SnapToGridSrch == false");
        int v19 = 719;
        goto LABEL_42;
      }
      unsigned int v24 = (BlueFin::GlMeSrdSatTrackMgr *)(*((void *)this + 1) + 14352);
      BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)v25, *((unsigned __int8 *)a2 + 112), *((_DWORD *)a2 + 26));
      BlueFin::GlMeSrdSatTrackMgr::SnapToAidingForNonL1(v24, (const BlueFin::GlSatCarrId *)v25);
    }
    if (*(unsigned char *)(BlueFin::GlMeSrdDspMeasAux::GetTrkRslts(a3) + 124))
    {
      if (*(unsigned char *)(BlueFin::GlMeSrdDspMeasAux::GetTrkRslts(a3) + 123)
        || *(unsigned char *)(BlueFin::GlMeSrdDspMeasAux::GetTrkRslts(a3) + 125))
      {
        int v18 = "otDspMeasAux.GetTrkRslts().m_bRequestForNonL1SnapToAid == false && otDspMeasAux.GetTrkRslts().m_bRequestFo"
              "rNonL1SnapToGridSrch==false";
        DeviceFaultNotify("glmesrd_acq_mgr.cpp", 728, "MsmtReceived", (char)"otDspMeasAux.GetTrkRslts().m_bRequestForNonL1SnapToAid == false && otDspMeasAux.GetTrkRslts().m_bRequestForNonL1SnapToGridSrch==false");
        int v19 = 728;
        goto LABEL_42;
      }
      BlueFin::GlMeSrdSatStatusListener::SnapToTap(this, a2, a3);
    }
    if (!*(unsigned char *)(BlueFin::GlMeSrdDspMeasAux::GetTrkRslts(a3) + 125)) {
      return;
    }
    if (!*(unsigned char *)(BlueFin::GlMeSrdDspMeasAux::GetTrkRslts(a3) + 123)
      && !*(unsigned char *)(BlueFin::GlMeSrdDspMeasAux::GetTrkRslts(a3) + 124))
    {
      BlueFin::GlMeSrdSatStatusListener::SnapToGridSrch(this, a2, a3);
      return;
    }
    int v18 = "otDspMeasAux.GetTrkRslts().m_bRequestForNonL1SnapToAid == false && otDspMeasAux.GetTrkRslts().m_bRequestForNon"
          "L1SnapToTap == false";
    DeviceFaultNotify("glmesrd_acq_mgr.cpp", 737, "MsmtReceived", (char)"otDspMeasAux.GetTrkRslts().m_bRequestForNonL1SnapToAid == false && otDspMeasAux.GetTrkRslts().m_bRequestForNonL1SnapToTap == false");
    int v19 = 737;
LABEL_42:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_acq_mgr.cpp", v19, v18);
  }
  uint64_t v11 = *((void *)this + 1);
  unint64_t v12 = v6 >> 5;
  char v13 = v6 & 0x1F;
  uint64_t v14 = 1 << (v6 & 0x1F);
  if ((v14 & *(_DWORD *)(*(void *)(v11 + 13920) + 4 * (v6 >> 5))) != 0)
  {
    int v15 = 1 << v13;
  }
  else
  {
    uint64_t v16 = 0;
    while (1)
    {
      uint64_t v17 = *(void *)(v11 + 22688 + v16);
      if ((v14 & *(_DWORD *)(*(void *)(v17 + 128) + 4 * v12)) != 0) {
        break;
      }
      v16 += 8;
      if (v16 == 80)
      {
        int v18 = "bFound";
        DeviceFaultNotify("glmesrd_acq_mgr.cpp", 685, "MsmtReceived", (char)"bFound");
        int v19 = 685;
        goto LABEL_42;
      }
    }
    (*(void (**)(uint64_t, unint64_t))(*(void *)v17 + 24))(v17, v6);
    int v20 = *(_DWORD *)(v17 + 72);
    int v15 = 1 << v13;
    *(_DWORD *)(*(void *)(v11 + 13920) + 4 * v12) |= 1 << v13;
    *(_DWORD *)(v11 + 13920 + 4 * v6 + 32) = v20;
    uint64_t v11 = *((void *)this + 1);
  }
  *(_DWORD *)(*(void *)(v11 + 24632) + 4 * v12) |= v15;
}

BOOL BlueFin::GlMeSrdSatMgr::IsSatInKillProcess(BlueFin::GlMeSrdSatMgr *this, unsigned int a2)
{
  uint64_t v2 = a2 >> 5;
  uint64_t v3 = 1;
  uint64_t v4 = 1 << (a2 & 0x1F);
  if ((v4 & *(_DWORD *)(*((void *)this + 19) + 4 * v2)) == 0)
  {
    if ((v4 & *(_DWORD *)(*((void *)this + 23) + 4 * v2)) != 0
      || (v4 & *(_DWORD *)(*((void *)this + 27) + 4 * v2)) != 0)
    {
      return 1;
    }
    else
    {
      BlueFin::GlSatCarrIdSet::GetSatIdSetAnyCarrier((BlueFin::GlMeSrdSatMgr *)((char *)this + 6464), (uint64_t)v6);
      return (v4 & *(_DWORD *)(v6[0] + 4 * v2)) != 0;
    }
  }
  return v3;
}

unsigned __int8 *BlueFin::GlSatCarrIdSet::GetSatIdSetAnyCarrier@<X0>(BlueFin::GlSatCarrIdSet *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 12) = 0;
  *(void *)a2 = a2 + 12;
  *(unsigned char *)(a2 + 8) = 4;
  *(void *)(a2 + 20) = 0;
  unsigned __int8 v5 = *((unsigned char *)this + 8);
  memcpy(v9, *(const void **)this, 4 * v5);
  unsigned __int16 v7 = 0;
  unsigned __int8 v6 = 0;
  int v8 = v9[0];
  for (double result = BlueFin::GlSetIterator::operator++(&v5); v6 != v5; double result = BlueFin::GlSetIterator::operator++(&v5))
  {
    BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)v4, v7);
    *(_DWORD *)(*(void *)a2 + (((unint64_t)v4[0] >> 3) & 0x1C)) |= 1 << v4[0];
  }
  return result;
}

BOOL BlueFin::GlMeSatIdProbationMgr::Ignoring(uint64_t a1, unsigned int a2, unsigned __int8 *a3)
{
  if (a2 >= 0x64)
  {
    DeviceFaultNotify("glmesrd_sat_probation_mgr.cpp", 53, "Ignoring", (char)"ucSatId < _DIM(m_astIgnore)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_probation_mgr.cpp", 53, "ucSatId < _DIM(m_astIgnore)");
  }
  uint64_t v3 = *(void *)(a1 + 200);
  return *(unsigned __int8 *)(v3 + 2 * a2 + 1) == *a3 && *(unsigned char *)(v3 + 2 * a2);
}

uint64_t BlueFin::GlMeSrdDspMeasAux::GlMeSrdDspMeasAux(uint64_t a1, uint64_t a2, char a3, _DWORD *a4, double a5)
{
  *(void *)a1 = &unk_270EBD190;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)a2;
  int v7 = *(_DWORD *)(a2 + 4);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = v7;
  *(unsigned char *)(a1 + 20) = a3;
  *(double *)(a1 + 24) = a5;
  *(_WORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 34) = 0;
  *(_DWORD *)(a1 + 36) = *a4;
  *(unsigned char *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 52) = 0;
  *(int32x2_t *)(a1 + 44) = vdup_n_s32(0x7F7FFFFFu);
  *(_DWORD *)(a1 + 56) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 192) = 0;
  BlueFin::GlMeSrdDspMeasAuxTrackRslts::Clear(a1 + 64);
  if (!*a4)
  {
    DeviceFaultNotify("glmesrd_dsp_meas_aux.cpp", 946, "GlMeSrdDspMeasAux", (char)"otMsmtSource.GetEnum() != GLMESRD_MSMT_SRC_INVALID");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_dsp_meas_aux.cpp", 946, "otMsmtSource.GetEnum() != GLMESRD_MSMT_SRC_INVALID");
  }
  return a1;
}

uint64_t BlueFin::GlMeSrdDspMeasAuxTrackRslts::Clear(uint64_t this)
{
  *(unsigned char *)this = 0;
  *(_DWORD *)(this + 4) = 0;
  *(_WORD *)(this + 8) = 0;
  *(_DWORD *)(this + 12) = 0;
  *(_DWORD *)(this + 16) = 0;
  *(void *)(this + 20) = 0xFFFFFFFF00000000;
  *(unsigned char *)(this + 28) = -1;
  *(unsigned char *)(this + 33) = 4;
  *(_DWORD *)(this + 29) = 0;
  *(_DWORD *)(this + 36) = 4;
  *(_DWORD *)(this + 72) = 0;
  *(void *)(this + 64) = 0;
  *(void *)(this + 80) = 0;
  *(_DWORD *)(this + 88) = 0;
  *(unsigned char *)(this + 92) = 0;
  *(void *)(this + 40) = 0;
  *(void *)(this + 48) = 0;
  *(void *)(this + 53) = 0;
  *(void *)(this + 96) = 0;
  *(void *)(this + 104) = 0;
  *(void *)(this + 118) = 0;
  *(void *)(this + 112) = 0;
  return this;
}

double BlueFin::GlMeSrdSvIdMsmtHistoryBuffer::GetMsmtHistorySlot(BlueFin::GlMeSrdSvIdMsmtHistoryBuffer *this, const BlueFin::GlSignalId *a2)
{
  uint64_t v4 = (BlueFin::GlMeSrdSvIdMsmtHistoryBuffer *)((char *)this + 4560);
  if (BlueFin::GlBigArray::Has((BlueFin::GlMeSrdSvIdMsmtHistoryBuffer *)((char *)this + 4560), *((unsigned __int16 *)a2 + 4)))
  {
    BlueFin::GlSignalIdArray::Get((uint64_t)this + 3408, (uint64_t)a2);
  }
  else
  {
    if (*((__int16 *)this + 2297) == -1) {
      BlueFin::GlMeSrdSvIdMsmtHistoryBuffer::MsmtHistoryGarbageCollector(this);
    }
    unsigned __int8 v6 = (char *)BlueFin::GlBigArray::Add(v4, *((unsigned __int16 *)a2 + 4));
    if (!v6)
    {
      DeviceFaultNotify("glmesrd_svid_msmt_history.cpp", 56, "GetMsmtHistorySlot", (char)"potMsmtHistorySlot != nullptr");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_svid_msmt_history.cpp", 56, "potMsmtHistorySlot != nullptr");
    }
    *unsigned __int8 v6 = 0;
    *((_DWORD *)v6 + 1) = 0;
    *((_DWORD *)v6 + 2) = 0;
    double result = 5.33097249e-35;
    *(void *)(v6 + 12) = 0x38D1B71700000000;
    *((void *)v6 + 3) = 0;
  }
  return result;
}

void BlueFin::GlMeSrdSvIdReportMsmtSlot::Save(BlueFin::GlMeSrdSvIdReportMsmtSlot *this, const BlueFin::GlMeDSPMeas *a2, const BlueFin::GlMeSrdDspMeasAux *a3)
{
  BlueFin::GlMeDSPMeas::operator=((uint64_t)this, (uint64_t)a2);
  *((unsigned char *)this + 160) = *((unsigned char *)a3 + 32);
  int v5 = *((_DWORD *)a3 + 9);
  *((_DWORD *)this + 41) = v5;
  if (v5 == 2)
  {
    *((unsigned char *)this + 161) = *(unsigned char *)(BlueFin::GlMeSrdDspMeasAux::GetTrkRslts(a3) + 120);
    char v6 = *(unsigned char *)(BlueFin::GlMeSrdDspMeasAux::GetTrkRslts(a3) + 122);
  }
  else
  {
    char v6 = 0;
    *((unsigned char *)this + 161) = 0;
  }
  *((unsigned char *)this + 162) = v6;
  *((unsigned char *)this + 168) = 1;
}

double BlueFin::GlMeDSPMeas::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(unsigned char *)(a1 + 100) = *(unsigned char *)(a2 + 100);
    *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
    *(_WORD *)(a1 + 108) = *(_WORD *)(a2 + 108);
    *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
    *(_OWORD *)(a1 + 84) = *(_OWORD *)(a2 + 84);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
    *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
    *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
    *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
    *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
    double result = *(double *)(a2 + 148);
    *(double *)(a1 + 148) = result;
  }
  return result;
}

uint64_t BlueFin::GlMeSrdAsicConfig::HasSearchCvecNonuniformSpacingBug(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 1488);
}

uint64_t BlueFin::GlMeSrdSatRptSearchMsmtMI::IsDebugIntermediaryReport(BlueFin::GlMeSrdSatRptSearchMsmtMI *this)
{
  uint64_t v1 = *((void *)this + 52);
  if ((*(_DWORD *)(v1 + 28) & 5) == 4) {
    return (*(unsigned __int16 *)((*(uint64_t (**)(void, void))(**((void **)this + 53) + 248))(*((void *)this + 53), *(unsigned __int8 *)(v1 + 24))+ 24) >> 3) & 1;
  }
  else {
    return 0;
  }
}

uint64_t BlueFin::GlMeSrdSatRptSearchMsmtMI::IsFailedSrch(BlueFin::GlMeSrdSatRptSearchMsmtMI *this)
{
  if (!*((unsigned char *)this + 436))
  {
    int v1 = *(_DWORD *)(*((void *)this + 52) + 28);
    if ((v1 & 0x20) == 0) {
      return 0;
    }
    if (v1)
    {
      DeviceFaultNotify("glmesrd_sat_report_srch_msmt.cpp", 141, "IsFailedSrch", (char)"!(m_rRpcBuffer.GetAcqWindowRawData().id.flags.se.search_result & SRCH_DETECT)");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_report_srch_msmt.cpp", 141, "!(m_rRpcBuffer.GetAcqWindowRawData().id.flags.se.search_result & SRCH_DETECT)");
    }
  }
  return 1;
}

double BlueFin::GlMeSrdAsicConfig::GetSearchFudgeFactorDB(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 12) & 0xF000FFFE;
  if (v2 != 805306388 && v2 != 805306386) {
    return 0.0;
  }
  LODWORD(result) = -1.0;
  if (*(_DWORD *)(a2 + 4) != 2) {
    return 0.0;
  }
  return result;
}

void BlueFin::GlMeSrdEstMultipath::Run(uint64_t a1, int a2, int a3, int a4, uint64_t a5, BlueFin::GlMeSrdCNoResults *this, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (BlueFin::GlMeSrdCNoResults::isGarbage(this))
  {
    int v50 = "!stCNoResults.isGarbage()";
    DeviceFaultNotify("glmesrd_multipath.cpp", 268, "Run", (char)"!stCNoResults.isGarbage()");
    int v51 = 268;
    goto LABEL_51;
  }
  unsigned int v15 = *(unsigned __int16 *)(a5 + 8);
  if (v15 >= 0x23F)
  {
    int v50 = "otSignalId.IsValid()";
    DeviceFaultNotify("glmesrd_multipath.cpp", 269, "Run", (char)"otSignalId.IsValid()");
    int v51 = 269;
    goto LABEL_51;
  }
  if (a1 + 12 != a5)
  {
    *(unsigned char *)(a1 + 12) = *(unsigned char *)a5;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a5 + 4);
    *(_WORD *)(a1 + 20) = v15;
  }
  *(_DWORD *)(a9 + 4) = 0;
  if (!*(unsigned char *)this) {
    return;
  }
  if (!*(unsigned char *)a8 || *(unsigned __int8 *)(a1 + 12) - 33 < 0x13) {
    goto LABEL_23;
  }
  unint64_t v16 = *(unsigned __int8 *)(a8 + 1);
  if (v16 >= 9)
  {
    int v50 = "stAltPkSrchMsmt.m_ucNumPeaks <= MAX_NUM_ALT_PEAKS";
    DeviceFaultNotify("glmesrd_multipath.cpp", 287, "Run", (char)"stAltPkSrchMsmt.m_ucNumPeaks <= MAX_NUM_ALT_PEAKS");
    int v51 = 287;
LABEL_51:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_multipath.cpp", v51, v50);
  }
  if (v16 < 2) {
    goto LABEL_23;
  }
  uint64_t v17 = 0;
  LOBYTE(v14) = *(unsigned char *)(a8 + 68);
  float v18 = *(float *)(a8 + 36);
  float v19 = 1.0 / (float)v14;
  while ((float)(vabds_f32(v18, *(float *)(a8 + 40 + 4 * v17)) - v19) >= 0.00000011921)
  {
    if (v16 - 1 == ++v17)
    {
      unsigned int v20 = 0;
      goto LABEL_15;
    }
  }
  unsigned int v20 = (v17 + 1);
LABEL_15:
  float v21 = *(float *)(a8 + 4);
  uint64_t v22 = 1;
  uint64_t v23 = 11;
  float v24 = v21;
  while (1)
  {
    float v25 = v24;
    uint64_t v26 = a8 + 4 * v22;
    float v24 = *(float *)(v26 + 4);
    if (v24 > v25)
    {
      int v50 = "stAltPkSrchMsmt.m_afPeakMag[ucPeakIdx] <= stAltPkSrchMsmt.m_afPeakMag[ucPeakIdx-1]";
      DeviceFaultNotify("glmesrd_multipath.cpp", 311, "Run", (char)"stAltPkSrchMsmt.m_afPeakMag[ucPeakIdx] <= stAltPkSrchMsmt.m_afPeakMag[ucPeakIdx-1]");
      int v51 = 311;
      goto LABEL_51;
    }
    float v27 = *(float *)(v26 + 36);
    if ((float)(v18 - v27) > 0.5)
    {
      uint64_t v28 = v23;
      do
      {
        if (v28 - 9 >= v16) {
          goto LABEL_22;
        }
        float v29 = vabds_f32(v27, *(float *)(a8 + 4 * v28++)) - v19;
      }
      while (v29 >= 0.00000011921);
      uint64_t v30 = v22;
      if ((_BYTE)v22) {
        break;
      }
    }
LABEL_22:
    ++v22;
    ++v23;
    if (v22 == v16) {
      goto LABEL_23;
    }
  }
  if (v20)
  {
    uint64_t v33 = a8 + 4;
    float v34 = *(float *)(a8 + 4 + 4 * v20);
    float v35 = (float)(v21 + v34) / (float)(2.0 - v19);
    float v36 = v21 - v34;
    if ((float)(v21 - v34) >= (float)(v19 * v35)) {
      float v37 = v21 - v34;
    }
    else {
      float v37 = v19 * v35;
    }
    uint64_t v38 = a8 + 36;
    if (v18 <= *(float *)(a8 + 36 + 4 * v20)) {
      float v39 = v19;
    }
    else {
      float v39 = -v19;
    }
    float v54 = v39;
    float v55 = v37;
    float v40 = *(float *)(v33 + 4 * v30);
    float v41 = *(float *)(v33 + 4 * (v28 - 10));
    float v42 = (float)(v40 + v41) / (float)(2.0 - v19);
    float v43 = v40 - v41;
    if ((float)(v40 - v41) >= (float)(v19 * v42)) {
      float v44 = v40 - v41;
    }
    else {
      float v44 = v19 * v42;
    }
    float v45 = *(float *)(v38 + 4 * v30);
    if (v45 <= *(float *)(v38 + 4 * (v28 - 10))) {
      float v46 = v19;
    }
    else {
      float v46 = -v19;
    }
    float v52 = v46;
    float v53 = v44;
    float v47 = log10f(v35) * 20.0;
    float v48 = (float)(log10f(v42) * 20.0) - v47;
    if (v48 > -8.0)
    {
      float v49 = (float)(v45 + (float)((float)(v52 * 0.5) * (float)(1.0 - (float)(v43 / v53))))
          - (float)(v18 + (float)((float)(v54 * 0.5) * (float)(1.0 - (float)(v36 / v55))));
      if (fabsf(v49 + 2.0) < (float)(v19 + v19))
      {
        *(float *)(a9 + 24) = v49;
        *(float *)(a9 + 28) = v19;
        *(float *)(a9 + 32) = v48 + *((float *)this + 2);
        GlCustomLog(14, "AltPk Found: SvId %u CarrType %s AltPkOffsetFromPromptInChips %lf fAltPeakSigMagDiffInDb %lf\n", *(unsigned __int8 *)(a8 + 72), BlueFin::GlSignalId::s_ausSignalType2str[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *(int *)(a8 + 76) - *(int *)(a8 + 76) + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)(a8 + 72)]]], v49, v48);
      }
    }
  }
LABEL_23:
  if (*(_DWORD *)a7 == 1)
  {
    float v31 = *(float *)(a7 + 8);
    if (*((float *)this + 2) >= 42.5 || fabsf(*(float *)(a7 + 28)) <= 0.4 && v31 <= 0.08)
    {
      int v32 = 2;
      goto LABEL_30;
    }
  }
  else
  {
    float v31 = 1.0;
  }
  int v32 = 4;
LABEL_30:
  *(_DWORD *)(a9 + 4) = v32;
  *(float *)(a9 + 8) = v31;
  *(float *)(a9 + 12) = v31;
}

uint64_t BlueFin::GlMeSrdEstCodePrm::Run(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6, uint64_t a7, uint64_t a8, uint64_t a9, float *a10, uint64_t a11)
{
  if (!*(unsigned char *)a7)
  {
    float v18 = "stAsicCodePrmSrchMsmt.bValid";
    DeviceFaultNotify("glmesrd_codeprm.cpp", 1025, "Run", (char)"stAsicCodePrmSrchMsmt.bValid");
    float v19 = "glmesrd_codeprm.cpp";
    int v20 = 1025;
    goto LABEL_21;
  }
  int v11 = *a6;
  if ((v11 - 1) >= 0xBC)
  {
    float v18 = "otSignalId.GetSvId().isValid()";
    DeviceFaultNotify("glmesrd_codeprm.cpp", 1026, "Run", (char)"otSignalId.GetSvId().isValid()");
    float v19 = "glmesrd_codeprm.cpp";
    int v20 = 1026;
    goto LABEL_21;
  }
  if ((unsigned __int8 *)(result + 8) != a6)
  {
    *(unsigned char *)(result + 8) = v11;
    *(_DWORD *)(result + 12) = *((_DWORD *)a6 + 1);
    *(_WORD *)(result + 16) = *((_WORD *)a6 + 4);
  }
  *(unsigned char *)a11 = 0;
  if (*(_DWORD *)a9 != 1)
  {
    *(unsigned char *)(a11 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *(unsigned char *)(a7 + 1);
    *(void *)(a11 + 8) = 0;
    *(_DWORD *)(a11 + 16) = 0;
    return result;
  }
  if (*(unsigned __int16 *)(result + 16) >= 0x23Fu)
  {
    float v18 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 777, "GetChipsPerEpoch", (char)"IsValid()");
    float v19 = "glsignalid.h";
    int v20 = 777;
    goto LABEL_21;
  }
  unsigned int v12 = BlueFin::GlSignalId::s_aulSignalIndexAndGnss2chipsPerEpoch[7 * *(int *)(result + 12)
                                                                 + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)(result + 8)]];
  if (!v12)
  {
    float v18 = "ucChipsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 784, "GetChipsPerEpoch", (char)"ucChipsPerEpoch != 0");
    float v19 = "glsignalid.h";
    int v20 = 784;
LABEL_21:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v19, v20, v18);
  }
  double v13 = (double)v12;
  double v14 = *(double *)(a7 + 8) - *(float *)(a9 + 28);
  *(_DWORD *)(a11 + 20) = 2;
  *(_DWORD *)(a11 + 16) = *(_DWORD *)(a9 + 12);
  *(unsigned char *)(a11 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *(unsigned char *)(a7 + 1);
  *(unsigned char *)a11 = 1;
  float v15 = a10[7];
  if (v15 < 1.0 && a10[8] > 15.0)
  {
    *(_DWORD *)(a11 + 20) = 4;
    double v14 = v14 - a10[6];
    *(float *)(a11 + 16) = v15;
  }
  BOOL v17 = v14 / v13 < 0.0;
  if (v14 / v13 == (double)(int)(v14 / v13)) {
    BOOL v17 = 0;
  }
  *(double *)(a11 + 8) = v14 - (double)((int)(v14 / v13) - v17) * v13;
  return result;
}

double BlueFin::GlMeSrdEstCarrPrm::Run(uint64_t a1, int a2, int a3, uint64_t a4, int a5, uint64_t a6, unsigned __int8 *a7, char a8, double a9, BlueFin::GlMeSrdCarrPrmResults *a10)
{
  if (!*(unsigned char *)a6)
  {
    double v14 = "stAsicCarrPrmSrchMsmt.bValid";
    DeviceFaultNotify("glmesrd_carrprm.cpp", 1972, "Run", (char)"stAsicCarrPrmSrchMsmt.bValid");
    int v15 = 1972;
    goto LABEL_9;
  }
  int v10 = *a7;
  if ((v10 - 1) >= 0xBC)
  {
    double v14 = "otSignalId.GetSvId().isValid()";
    DeviceFaultNotify("glmesrd_carrprm.cpp", 1973, "Run", (char)"otSignalId.GetSvId().isValid()");
    int v15 = 1973;
    goto LABEL_9;
  }
  if ((unsigned __int8 *)(a1 + 456) != a7)
  {
    *(unsigned char *)(a1 + 456) = v10;
    *(_DWORD *)(a1 + 460) = *((_DWORD *)a7 + 1);
    *(_WORD *)(a1 + 464) = *((_WORD *)a7 + 4);
  }
  *(unsigned char *)(a1 + 468) = a8;
  *(double *)(a1 + 472) = a9;
  memset(v20, 0, sizeof(v20));
  int64x2_t v21 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  int32x2_t v22 = vdup_n_s32(0x7F7FFFFFu);
  uint64_t v23 = 0xFFFFFFFFLL;
  char v24 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = 0x7FEFFFFFFFFFFFFFLL;
  int v11 = *(_DWORD *)(a6 + 4);
  if (v11 != 2)
  {
    double v14 = "0";
    if (v11 == 1)
    {
      DeviceFaultNotify("glmesrd_carrprm.cpp", 282, "EstSrchCarrPrmViaDopplerFocal", (char)"0");
      int v15 = 282;
    }
    else
    {
      DeviceFaultNotify("glmesrd_carrprm.cpp", 1990, "Run", (char)"0");
      int v15 = 1990;
    }
LABEL_9:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_carrprm.cpp", v15, v14);
  }
  float v12 = *(float *)(a6 + 8);
  __int16 v16 = 257;
  int v19 = 5;
  double v17 = v12;
  float v18 = *(float *)(a4 + 16) * 0.5;
  return BlueFin::GlMeSrdEstCarrPrm::SelectPublishedSrchCarrPrmEst((BlueFin::GlMeSrdEstCarrPrm *)a1, (BlueFin::GlMeSrdCarrPrmResults *)&v16, a10);
}

double BlueFin::GlMeSrdEstCarrPrm::SelectPublishedSrchCarrPrmEst(BlueFin::GlMeSrdEstCarrPrm *this, BlueFin::GlMeSrdCarrPrmResults *a2, BlueFin::GlMeSrdCarrPrmResults *a3)
{
  *((unsigned char *)a3 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *((_WORD *)a3 + 17) = 0;
  *((unsigned char *)a3 + 36) = 0;
  *((void *)a3 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *((void *)a3 + 2) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)a3 + 40) = 0u;
  *(_OWORD *)((char *)a3 + 56) = 0u;
  if (*(unsigned char *)a2)
  {
    *(unsigned char *)a3 = 1;
    int v4 = *((unsigned __int8 *)a2 + 1);
    *((unsigned char *)a3 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v4;
    if (v4)
    {
      double result = *((double *)a2 + 1);
      *((double *)a3 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = result;
      LODWORD(result) = *((_DWORD *)a2 + 4);
      *((_DWORD *)a3 + 4) = LODWORD(result);
      *((_DWORD *)a3 + 5) = *((_DWORD *)a2 + 5);
      if (*(float *)&result < 30.0) {
        *((_DWORD *)a3 + 4) = 1106247680;
      }
    }
    int v5 = *((unsigned __int8 *)a2 + 34);
    *((unsigned char *)a3 + 34) = v5;
    if (v5)
    {
      *((void *)a3 + 5) = *((void *)a2 + 5);
      *((_DWORD *)a3 + 14) = *((_DWORD *)a2 + 14);
      double result = *((double *)a2 + 8);
      *((double *)a3 + 8) = result;
    }
  }
  return result;
}

void BlueFin::GlMeSrdEstCNo::Run(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)a8)
  {
    int v57 = "stAsicCNoSrchMsmt.bValid";
    DeviceFaultNotify("glmesrd_estcno.cpp", 174, "Run", (char)"stAsicCNoSrchMsmt.bValid");
    unsigned int v58 = "glmesrd_estcno.cpp";
    int v59 = 174;
    goto LABEL_59;
  }
  int v10 = *a7;
  if ((v10 - 1) >= 0xBC)
  {
    int v57 = "otSignalId.GetSvId().isValid()";
    DeviceFaultNotify("glmesrd_estcno.cpp", 175, "Run", (char)"otSignalId.GetSvId().isValid()");
    unsigned int v58 = "glmesrd_estcno.cpp";
    int v59 = 175;
    goto LABEL_59;
  }
  if ((unsigned __int8 *)(a1 + 20) != a7)
  {
    *(unsigned char *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 24) = *((_DWORD *)a7 + 1);
    *(_WORD *)(a1 + 28) = *((_WORD *)a7 + 4);
  }
  memset(v60, 0, sizeof(v60));
  uint64_t v16 = *(unsigned __int8 *)(a8 + 1);
  if (v16 > 8)
  {
    int v57 = "stAsicCNoSrchMsmt.ucCvecLen <= _DIM(aulCvec)";
    DeviceFaultNotify("glmesrd_estcno.cpp", 186, "Run", (char)"stAsicCNoSrchMsmt.ucCvecLen <= _DIM(aulCvec)");
    unsigned int v58 = "glmesrd_estcno.cpp";
    int v59 = 186;
    goto LABEL_59;
  }
  if (!*(unsigned char *)(a8 + 1)) {
    goto LABEL_60;
  }
  double v17 = (int *)(a8 + 4);
  memcpy(v60, (const void *)(a8 + 4), 4 * v16);
  unsigned int v18 = 0;
  uint64_t v19 = v16;
  do
  {
    int v20 = *v17++;
    v18 += v20;
    --v19;
  }
  while (v19);
  unsigned int v21 = *(_DWORD *)(a8 + 40);
  if (v21 < v18)
  {
    int v57 = "ulTotalMagSum >= ulSumVec";
    DeviceFaultNotify("glmesrd_estcno.cpp", 206, "Run", (char)"ulTotalMagSum >= ulSumVec");
    unsigned int v58 = "glmesrd_estcno.cpp";
    int v59 = 206;
    goto LABEL_59;
  }
  uint64_t v22 = 0;
  unsigned int v23 = 0;
  unsigned __int8 v24 = 0;
  unsigned int v25 = *(unsigned __int8 *)(a8 + 36);
  float v26 = (float)(v21 - v18) / (float)(int)(v25 * *(unsigned __int16 *)(a5 + 10) - v16);
  do
  {
    float v27 = (float)*((unsigned int *)v60 + v22);
    if (v26 <= v27)
    {
      float v28 = v27 - v26;
      double v29 = (float)(v27 - v26);
      if (v28 > 0.0)
      {
        double v30 = v29 + 0.5;
LABEL_17:
        unsigned int v31 = (int)v30;
        goto LABEL_19;
      }
      if (v28 < 0.0)
      {
        double v30 = v29 + -0.5;
        goto LABEL_17;
      }
    }
    unsigned int v31 = 0;
LABEL_19:
    *((_DWORD *)v60 + v22) = v31;
    if (v31 > v23)
    {
      unsigned __int8 v24 = v22;
      unsigned int v23 = v31;
    }
    ++v22;
  }
  while (v16 != v22);
  if (v16 != 8)
  {
LABEL_60:
    int v57 = "stAsicCNoSrchMsmt.ucCvecLen == usExpectedCvecLen";
    DeviceFaultNotify("glmesrd_estcno.cpp", 240, "Run", (char)"stAsicCNoSrchMsmt.ucCvecLen == usExpectedCvecLen");
    unsigned int v58 = "glmesrd_estcno.cpp";
    int v59 = 240;
    goto LABEL_59;
  }
  BOOL v32 = v23 != HIDWORD(v60[0]) || v24 == 3;
  if (!v32) {
    unsigned __int8 v24 = 3;
  }
  int v33 = v24;
  float v34 = (int *)v60 + v24;
  unsigned int v36 = *(v34 - 1);
  int v35 = *v34;
  unsigned int v37 = *((_DWORD *)v60 + (v33 + 1));
  if (v36 <= v37) {
    unsigned int v38 = *((_DWORD *)v60 + (v33 + 1));
  }
  else {
    unsigned int v38 = v36;
  }
  switch(v25)
  {
    case 1u:
      float v39 = 1.0;
      break;
    case 4u:
      uint64_t v40 = *a7;
      if ((v40 + 117) < 0x24u
        || (float v39 = 1.75,
            (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)a7 + 1)
                                                                                  - *((int *)a7 + 1)
                                                                                  + BlueFin::GlSvId::s_aucSvId2gnss[v40]]
                         - 13) <= 1))
      {
        float v39 = 1.25;
      }
      break;
    case 2u:
      float v39 = 1.5;
      break;
    default:
      int v57 = "0";
      DeviceFaultNotify("glmesrd_estcno.cpp", 286, "Run", (char)"0");
      unsigned int v58 = "glmesrd_estcno.cpp";
      int v59 = 286;
LABEL_59:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v58, v59, v57);
  }
  float v41 = (float)(v35 + v38) / v39;
  float v42 = v41 / v26;
  BOOL v32 = v26 == 0.0;
  float v43 = 0.0;
  if (!v32) {
    float v43 = v42;
  }
  float v44 = v43 * (float)(sqrtf((float)*(unsigned __int16 *)(a8 + 44)) * 1.9131);
  (*(void (**)(uint64_t, float))(*(void *)a1 + 16))(a1, v44);
  if (*(unsigned __int16 *)(a1 + 28) >= 0x23Fu)
  {
    int v57 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 692, "GetSecPerEpochWithTrkException", (char)"IsValid()");
    unsigned int v58 = "glsignalid.h";
    int v59 = 692;
    goto LABEL_59;
  }
  float v46 = *(float *)(a5 + 4);
  uint64_t v47 = *(int *)(a1 + 24);
  uint64_t v48 = *(unsigned __int8 *)(a1 + 20);
  if (v47 == 1 && ((v48 - 1) < 0x20 || (v48 - 66) <= 9))
  {
    uint64_t v49 = BlueFin::GlSvId::s_aucSvId2gnss[v48];
    double v50 = 1.5;
    LODWORD(v47) = 1;
  }
  else
  {
    uint64_t v49 = BlueFin::GlSvId::s_aucSvId2gnss[v48];
    if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v47 - v47 + v49])
    {
      int v57 = "ucMsPerEpoch != 0";
      DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
      unsigned int v58 = "glsignalid.h";
      int v59 = 685;
      goto LABEL_59;
    }
    double v50 = (double)BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v47 - v47 + v49] * 0.001;
  }
  __int16 v51 = BlueFin::GlSignalId::s_assSignalIndexAndGnss2epochIndB[7 * (int)v47 + v49];
  if (!v51)
  {
    int v57 = "ssEpochIndB != 0";
    DeviceFaultNotify("glsignalid.h", 718, "GetSecPerEpochIndB", (char)"ssEpochIndB != 0");
    unsigned int v58 = "glsignalid.h";
    int v59 = 718;
    goto LABEL_59;
  }
  float v52 = 0.5;
  if (v36 > v37) {
    float v52 = -0.5;
  }
  float v53 = v52 / (float)v25;
  float v54 = v46 / v50;
  float v55 = v45 / v54;
  float v56 = log10f(v45 / v54);
  *(unsigned char *)a9 = 1;
  *(float *)(a9 + 8) = (float)((float)(v56 * 10.0) - (float)v51) + a2;
  *(float *)(a9 + 12) = v55;
  *(_DWORD *)(a9 + 4) = 1;
  *(float *)(a9 + 16) = v44;
  *(float *)(a9 + 20) = v41;
  *(float *)(a9 + 24) = v53;
  *(_DWORD *)(a1 + 12) = 2;
  *(float *)(a1 + 16) = v55;
}

float BlueFin::GlMeSrdEstCNo::CalcCohSnrFromNonCohSnr(BlueFin::GlMeSrdEstCNo *this, float a2, unsigned int a3)
{
  float v3 = log10f(a2 / sqrtf((float)a3));
  uint64_t v4 = 0;
  float v5 = v3 * 20.0;
  char v6 = (float *)&dword_263BADF6C;
  float v7 = 53.333;
  while (1)
  {
    float v8 = *(v6 - 1);
    if (v8 > v5) {
      break;
    }
    v6 += 2;
    if (--v4 == -281) {
      goto LABEL_13;
    }
  }
  if ((unsigned __int16)-(__int16)v4 != 281)
  {
    if (!(_WORD)v4)
    {
      float v7 = *v6;
      goto LABEL_13;
    }
    int v9 = (float *)((char *)&BlueFin::GlMeSrdEstCNo::m_afMode1ToMode3Table + 8 * ~v4);
    float v10 = v8 - *v9;
    if (v10 <= 0.0)
    {
      int v15 = "fDeltaMode1SnrDb > 0.0";
      DeviceFaultNotify("glmesrd_estcno.cpp", 89, "CalcCohSnrFromNonCohSnr", (char)"fDeltaMode1SnrDb > 0.0");
      int v16 = 89;
    }
    else
    {
      float v11 = v9[1];
      float v12 = *v6 - v11;
      if (v12 <= 0.0)
      {
        int v15 = "fDeltaMode3SnrDb > 0.0";
        DeviceFaultNotify("glmesrd_estcno.cpp", 90, "CalcCohSnrFromNonCohSnr", (char)"fDeltaMode3SnrDb > 0.0");
        int v16 = 90;
      }
      else
      {
        float v13 = v5 - *v9;
        if (v13 < 0.0)
        {
          int v15 = "fOffsetMode1SnrDb >= 0.0";
          DeviceFaultNotify("glmesrd_estcno.cpp", 96, "CalcCohSnrFromNonCohSnr", (char)"fOffsetMode1SnrDb >= 0.0");
          int v16 = 96;
        }
        else
        {
          if (v13 < v10)
          {
            float v7 = v11 + (float)(v13 * (float)(v12 / v10));
            goto LABEL_13;
          }
          int v15 = "fOffsetMode1SnrDb < fDeltaMode1SnrDb";
          DeviceFaultNotify("glmesrd_estcno.cpp", 97, "CalcCohSnrFromNonCohSnr", (char)"fOffsetMode1SnrDb < fDeltaMode1SnrDb");
          int v16 = 97;
        }
      }
    }
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_estcno.cpp", v16, v15);
  }
LABEL_13:

  return __exp10f(v7 / 10.0);
}

uint64_t BlueFin::GlMeSrdSearchMgrBase::ReleaseSatUnaltered(BlueFin::GlMeSrdSearchMgrBase *this, unsigned int a2)
{
  uint64_t v4 = *((void *)this + 16);
  float v3 = (char *)this + 128;
  if ((((unint64_t)*(unsigned int *)(v4 + 4 * (a2 >> 5)) >> (a2 & 0x1F)) & 1) == 0)
  {
    DeviceFaultNotify("glmesrd_search_mgr_base.cpp", 325, "ReleaseSatUnaltered", (char)"m_otSetSatIdInUse.Has(ucSatId)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_search_mgr_base.cpp", 325, "m_otSetSatIdInUse.Has(ucSatId)");
  }
  BlueFin::GlSetBase::Remove((uint64_t)v3, a2);
  BlueFin::GlMeSrdSatMgr::GetSvid(*((void **)this + 2), a2, &v7);
  BlueFin::GlSetBase::Remove((uint64_t)this + 80, v7);
  BlueFin::GlSetBase::Remove((uint64_t)this + 160, a2);
  BlueFin::GlSetBase::Remove((uint64_t)this + 192, a2);

  return BlueFin::GlSetBase::Remove((uint64_t)this + 224, a2);
}

uint64_t BlueFin::GlMeSrdSatTrackMgr::TrackMsmtReceived(BlueFin::GlMeSrdSatTrackMgr *this, const BlueFin::GlMeDSPMeas *a2, const BlueFin::GlMeSrdDspMeasAux *a3)
{
  unsigned int v6 = *((unsigned __int8 *)a2 + 112);
  BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)v28, v6, *((_DWORD *)a2 + 26));
  unsigned int v7 = v28[0] + 100 * v29;
  uint64_t v8 = v7 >> 5;
  if ((((unint64_t)*(unsigned int *)(*((void *)this + 500) + 4 * v8) >> ((v28[0] + 100 * v29) & 0x1F)) & 1) == 0)
  {
    float v26 = "m_otSetSatCarrIdInUse.Has(otSatCarrId)";
    DeviceFaultNotify("glmesrd_track_mgr.cpp", 600, "TrackMsmtReceived", (char)"m_otSetSatCarrIdInUse.Has(otSatCarrId)");
    int v27 = 600;
    goto LABEL_44;
  }
  int v9 = (void *)((char *)this + 4400);
  if ((*((unsigned char *)a2 + 87) & 4) != 0) {
    *(_DWORD *)(*v9 + 4 * v8) |= 1 << (v7 & 0x1F);
  }
  else {
    BlueFin::GlSetBase::Remove((uint64_t)v9, (__int16)v7);
  }
  uint64_t result = BlueFin::GlMeSrdSatMgr::GetTrackChannel(*((void *)this + 1), v28);
  if (result >= 0x7B)
  {
    float v26 = "ucTrackChannel < _DIM(m_aotSatTrackData)";
    DeviceFaultNotify("glmesrd_track_mgr.cpp", 613, "TrackMsmtReceived", (char)"ucTrackChannel < _DIM(m_aotSatTrackData)");
    int v27 = 613;
LABEL_44:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_track_mgr.cpp", v27, v26);
  }
  uint64_t v11 = result;
  uint64_t v12 = *((void *)this + 510);
  uint64_t v13 = v6 >> 5;
  uint64_t v14 = *(unsigned int *)(v12 + 4 * v13);
  char v15 = v6 & 0x1F;
  uint64_t v16 = 1 << (v6 & 0x1F);
  int v17 = *((_DWORD *)a2 + 35);
  BOOL v19 = v17 == 14 || v17 == 16;
  if (((((v16 & v14) != 0) ^ v19) & 1) != 0 || !*((_WORD *)this + 16 * result + 16))
  {
    char v20 = ((v16 & v14) != 0) ^ v19 ^ 1;
    if ((*((unsigned char *)a2 + 100) + 117) > 0x23u) {
      char v20 = 1;
    }
    if ((v20 & 1) != 0 || *((float *)a2 + 10) >= 20.0) {
      *((_WORD *)this + 16 * result + 16) = 0;
    }
    if (v17 == 16 || v17 == 14) {
      *(_DWORD *)(v12 + 4 * v13) = v14 | (1 << v15);
    }
    else {
      uint64_t result = BlueFin::GlSetBase::Remove((uint64_t)this + 4080, v6);
    }
    if (v29 == 2 && *((float *)a2 + 10) > 22.0)
    {
      uint64_t result = BlueFin::GlMeSrdDspMeasAux::GetTrkRslts(a3);
      if ((*(unsigned char *)(result + 31) & 0x10) != 0) {
        *((unsigned char *)this + 32 * v11 + 57) = 1;
      }
    }
  }
  unint64_t v21 = *((unsigned __int8 *)a2 + 100);
  if ((v21 + 117) > 0x23u || v17 == 14 || v17 == 16 || *((unsigned char *)a3 + 32))
  {
    uint64_t result = BlueFin::GlSetBase::Remove((uint64_t)this + 4112, v21);
    LODWORD(v2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *((unsigned __int8 *)a2 + 100);
  }
  else
  {
    *(_DWORD *)(*((void *)this + 514) + ((v21 >> 3) & 0x1C)) |= 1 << v21;
  }
  float v22 = *((float *)a2 + 10);
  if ((v21 - 81) <= 0x34 && v22 > 30.0
    || (v16 & *(_DWORD *)(*((void *)this + 634) + 4 * v13)) != 0 && v22 > 28.0)
  {
    *(_DWORD *)(*((void *)this + 630) + 4 * v13) |= 1 << v15;
  }
  unsigned int v23 = (float *)((char *)this + 32 * v11);
  unsigned int v23[9] = v22;
  int v24 = *((_DWORD *)a2 + 35);
  *((_DWORD *)v23 + 10) = v24;
  ++*((_WORD *)v23 + 16);
  *((void *)v23 + 6) = *((void *)a2 + 3);
  if (v24 == 12)
  {
    uint64_t result = BlueFin::GlMeSrdDspMeasAux::GetTrkRslts(a3);
    int v25 = (*(unsigned __int8 *)(result + 129) >> 5) & 1;
  }
  else
  {
    LOBYTE(v25) = 0;
  }
  *((unsigned char *)v23 + 56) = v25;
  return result;
}

uint64_t BlueFin::GlMeDspMeasListener::MeasurementComplete(void ***this, BlueFin::GlMeMeasSelfAidFilter *a2, int a3)
{
  return BlueFin::GlMeMeasAidFilter::MeasurementComplete(this[1], a2, a3);
}

uint64_t BlueFin::GlMeSrdRpcUtils::gll_utils_rpc_health_profile(uint64_t a1, uint64_t a2)
{
  GlCustomLog(15, "gll_utils_rpc_health_profile1: tcxo_ms_count %u high_speed_ms_count %u cop0_param_stall_counter %u cop0_stall_counter %u cop1_param_stall_counter %u cop1_stall_counter %u \n", *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 44), *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 48), *(_DWORD *)(a2 + 52));
  GlCustomLog(15, "gll_utils_rpc_health_profile2: rf_on_time %u cpu_on_time %u cop0_on_time %u cop1_on_time %u search_on_time %u trk0_on_time %u trk1_on_time %u max_main %u lm_cpu_on_time %u lm_fft_on_time %u min_block_margin %u \n", *(unsigned __int16 *)(a2 + 24), *(unsigned __int16 *)(a2 + 26), *(unsigned __int16 *)(a2 + 28), *(unsigned __int16 *)(a2 + 58), *(unsigned __int16 *)(a2 + 30), *(unsigned __int16 *)(a2 + 32), *(unsigned __int16 *)(a2 + 56), *(unsigned __int8 *)(a2 + 34), *(unsigned __int16 *)(a2 + 40), *(unsigned __int16 *)(a2 + 42), *(unsigned __int8 *)(a2 + 36));
  GlCustomLog(15, "gll_utils_rpc_health_profile3: dma_rx_count %u dma_tx_count %u tl_bytes %u flow_control_status %02x \n", *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16), *(unsigned __int8 *)(a2 + 35));
  if (BlueFin::GlMeSrdAsicConfig::IsMinnowAsicType((BlueFin::GlMeSrdAsicConfig *)(*(void *)(a1 + 8) + 29672)))
  {
    uint64_t v4 = "ASIC";
    if (!*(unsigned char *)(a2 + 72)) {
      uint64_t v4 = "FPGA";
    }
    GlCustomLog(15, "gll_utils_rpc_health_profile4: search_decimators 0x%04x track_decimators 0x%08x temp %0.2f temp_index %u pll_thd_det_monitor %d platform %s eram_owners_bitmap 0x%04x memory_pdas 0x%08x  \n", *(unsigned __int16 *)(a2 + 64), *(_DWORD *)(a2 + 60), (float)((float)*(__int16 *)(a2 + 66) / 100.0), *(unsigned __int8 *)(a2 + 68), *(unsigned __int8 *)(a2 + 69), v4, *(unsigned __int16 *)(a2 + 70), *(_DWORD *)(a2 + 140));
    GlCustomLog(15, "gll_utils_rpc_health_profile5: rtc_ms_count %u rtc_offset_status %u rtc_offset_ppb: %u time_xfer_count %u idle_clock %s dc_idle_clock %s cpu_clk %s dsp_clk %s radio_L1_mode 0x%02x AR_L5_Mode 0x%02x DR_mode 0x%02x radio_enables 0x%02x DR_spare 0x%08x  \n", *(_DWORD *)(a2 + 148), *(unsigned __int8 *)(a2 + 157), *(__int16 *)(a2 + 158), *(unsigned __int16 *)(a2 + 144), off_2655D8428[*(unsigned char *)(a2 + 73) & 0xF], *(char **)((char *)off_2655D8428 + (((unint64_t)*(unsigned __int8 *)(a2 + 73) >> 1) & 0x78)), off_2655D8450[*(unsigned __int8 *)(a2 + 74)], off_2655D8468[*(unsigned __int8 *)(a2 + 75)], *(unsigned __int8 *)(a2 + 76), *(unsigned __int8 *)(a2 + 77), *(unsigned __int8 *)(a2 + 78), *(unsigned __int8 *)(a2 + 79), *(_DWORD *)(a2 + 160));
    int v5 = *(_DWORD *)(a2 + 80);
    int v6 = *(_DWORD *)(a2 + 84);
    int v8 = *(_DWORD *)(a2 + 88);
    int v7 = *(_DWORD *)(a2 + 92);
    unsigned int v9 = v6 + v5 + v8 + v7;
    if (v9)
    {
      int v10 = *(_DWORD *)(a2 + 108);
      int v11 = *(_DWORD *)(a2 + 112);
      int v12 = *(_DWORD *)(a2 + 116);
      int v13 = *(_DWORD *)(a2 + 120);
      unsigned int v14 = v11 + v10 + v12 + v13;
      if (v14)
      {
        unsigned int v15 = 1000 * v5 / v9;
        unsigned int v16 = 1000 * v6 / v9;
        unsigned int v17 = 1000 * v8 / v9;
        unsigned int v18 = 1000 * v10 / v14;
        unsigned int v19 = 1000 * v11 / v14;
        unsigned int v20 = 1000 * v12 / v14;
        if (v14 + v9) {
          unsigned int v21 = 1000 * (v13 + v7) / (v14 + v9);
        }
        else {
          unsigned int v21 = 0;
        }
        GlCustomLog(15, "gll_utils_rpc_health_profile6: tput0 %d mtrk0[gps %d glo %d L5 %d] mtrk1[gps %d glo %d L5 %d] idle %d (%d, %d) total %d (%d, %d)\n", *(unsigned __int16 *)(a2 + 138) + *(unsigned __int16 *)(a2 + 136), v15, v16, v17, v18, v19, v20, v21, v7, v13, v14 + v9, v9, v14);
        GlCustomLog(15, "gll_utils_rpc_health_profile7: tput1 act mtrk0[gps %08x glo %08x L5 %08x] mtrk1[gps %08x glo %08x L5 %08x] tput(%d,%d) \n", *(_DWORD *)(a2 + 96), *(_DWORD *)(a2 + 100), *(_DWORD *)(a2 + 104), *(_DWORD *)(a2 + 124), *(_DWORD *)(a2 + 128), *(_DWORD *)(a2 + 132), *(unsigned __int16 *)(a2 + 136), *(unsigned __int16 *)(a2 + 138));
        if (*(_WORD *)(a2 + 38)) {
          GlCustomLog(15, "gll_utils_rpc_health_profile8: A0_DAGC_FIX: GPS: %d GLO: %d BDS: %d L5: %d\n", *(_WORD *)(a2 + 38) & 0xF, *(_WORD *)(a2 + 38) >> 4, HIBYTE(*(unsigned __int16 *)(a2 + 38)) & 0xF, *(unsigned __int16 *)(a2 + 38) >> 12);
        }
        GlCustomLog(15, "gll_utils_rpc_health_profile9: rpc_buffer_level: block [ %u %u %u %u %u] \n", *(unsigned __int8 *)(a2 + 152), *(unsigned __int8 *)(a2 + 153), *(unsigned __int8 *)(a2 + 154), *(unsigned __int8 *)(a2 + 155), *(unsigned __int8 *)(a2 + 156));
        GlCustomLog(15, "gll_utils_rpc_health_profile10: lm_sbs_received %u lm_sbs_completed %u lm_sbs_deleted %u lm_fft_idle_count %u  lm_total_wait_list_sbs %u lm_prop_iteration_count %u lm_total_miss_count %u lm_queue_full_occurrences %u lm_total_prop_count %u lm_max_prop_iterations %u \n", *(_DWORD *)(a2 + 164), *(_DWORD *)(a2 + 168), *(_DWORD *)(a2 + 172), *(_DWORD *)(a2 + 176), *(_DWORD *)(a2 + 180), *(_DWORD *)(a2 + 184), *(_DWORD *)(a2 + 188), *(_DWORD *)(a2 + 192), *(_DWORD *)(a2 + 196), *(_DWORD *)(a2 + 200));
      }
    }
  }
  uint64_t v22 = BlueFin::GlHealthProfileData::GlHealthProfileData((uint64_t)v24, a2);
  if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
    (*(void (**)(uint64_t, void, void))(v24[0] + 24))(v22, 0, 0);
  }
  return BlueFin::GlMeSrdCtrlSm::SetHealthProfile(*(void *)(a1 + 8) + 75168, a2);
}

uint64_t BlueFin::GlHealthProfileData::GlHealthProfileData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270EBC7A0;
  *(void *)(a1 + 8) = a2;
  double v4 = (double)HIDWORD(*(_OWORD *)(a2 + 80))
     * 100.0
     / (double)vaddvq_s32(*(int32x4_t *)(a2 + 80));
  double v5 = fmod(v4, 4294967300.0);
  if (v4 <= 4294967300.0) {
    double v5 = v4;
  }
  if (v5 < -4294967300.0) {
    double v5 = -fmod(-v5, 4294967300.0);
  }
  if (v5 < 0.0) {
    unsigned int v6 = --v5;
  }
  else {
    LOBYTE(v6) = v5;
  }
  *(unsigned char *)(a1 + 16) = v6;
  double v7 = (double)HIDWORD(*(_OWORD *)(a2 + 108))
     * 100.0
     / (double)vaddvq_s32(*(int32x4_t *)(a2 + 108));
  double v8 = fmod(v7, 4294967300.0);
  if (v7 <= 4294967300.0) {
    double v8 = v7;
  }
  if (v8 < -4294967300.0) {
    double v8 = -fmod(-v8, 4294967300.0);
  }
  if (v8 < 0.0) {
    unsigned int v9 = --v8;
  }
  else {
    LOBYTE(v9) = v8;
  }
  *(unsigned char *)(a1 + 17) = v9;
  return a1;
}

uint64_t BlueFin::GlMeSrdCtrlSm::SetHealthProfile(uint64_t a1, uint64_t a2)
{
  double v4 = (unsigned __int8 *)(a1 + 5280);
  BlueFin::GlMeSrdPwrMeasController::CheckSigAiding(a1 + 5280, (const BlueFin::GlMeSignalAidInfo *)(a1 + 1600));
  memset(v6, 0, sizeof(v6));
  uint64_t v7 = 0x2000100010000;
  long long v8 = 0u;
  long long v9 = 0u;
  int v10 = 0;
  *(_WORD *)int v11 = 255;
  void v11[2] = 0;
  int v12 = 0;
  uint64_t result = BlueFin::GlMeSrdPwrMeasController::SetHealthProfile(v4, a2, (uint64_t)v6);
  *(unsigned char *)(*(void *)(a1 + 200) + 808) = *(unsigned char *)(a2 + 78);
  if (result)
  {
    *(_WORD *)&v11[1] = 256;
    return (*(uint64_t (**)(void, _OWORD *))(**(void **)(a1 + 152) + 16))(*(void *)(a1 + 152), v6);
  }
  return result;
}

uint64_t BlueFin::GlMeSrdPwrMeasController::CheckSigAiding(uint64_t this, const BlueFin::GlMeSignalAidInfo *a2)
{
  *(_WORD *)(this + 24) = 0;
  uint64_t v2 = *((unsigned __int16 *)a2 + 7);
  if (*((_WORD *)a2 + 7))
  {
    uint64_t v3 = *((void *)a2 + 2) + 4;
    do
    {
      if ((*(unsigned char *)(v3 + 1) & 4) != 0) {
        *(unsigned char *)(this + 24) = 1;
      }
      if (*(unsigned __int8 *)(v3 - 4) - 52 <= 0xD) {
        *(unsigned char *)(this + 25) = 1;
      }
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  return this;
}

double BlueFin::GlMeMeasurementListener::SetPowerMeasurment(uint64_t a1, uint64_t a2)
{
  return BlueFin::GlPowerMeas::operator=(*(void *)(a1 + 8) + 11812, a2);
}

unint64_t BlueFin::GlMeSrdRpcMiscAsicInit::gll_misc_rpc_version_number(BlueFin::GlMeSrdRpcMiscAsicInit *this, char a2, char a3, char a4, int a5, unsigned int a6, unsigned int a7, unsigned int a8, const char *a9)
{
  if ((a2 & 1) == 0)
  {
    BOOL v32 = "flags&BIG_ENDIAN_VERSION_FLAG";
    DeviceFaultNotify("glmesrd_asicinit.cpp", 4245, "gll_misc_rpc_version_number", (char)"flags&BIG_ENDIAN_VERSION_FLAG");
    int v33 = 4245;
    goto LABEL_41;
  }
  uint64_t v13 = *(void *)(*((void *)this + 1) + 128);
  int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 184))(v13);
  if (*(unsigned char *)(v13 + 1212)) {
    int v15 = *(_DWORD *)(v13 + 1216);
  }
  else {
    int v15 = v14;
  }
  *(_DWORD *)(v13 + 16) = v15;
  uint64_t v16 = *(void *)(*((void *)this + 1) + 128);
  int v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 184))(v16);
  if (*(unsigned char *)(v16 + 1212)) {
    int v18 = *(_DWORD *)(v16 + 1216);
  }
  else {
    int v18 = v17;
  }
  *(_DWORD *)(v16 + 16) = v18;
  uint64_t v19 = *(void *)(*((void *)this + 1) + 128);
  int v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 184))(v19);
  if (*(unsigned char *)(v19 + 1212)) {
    int v20 = *(_DWORD *)(v19 + 1216);
  }
  *(_DWORD *)(v19 + 16) = v20;
  unsigned int v21 = a5 & 0xF0FFFFFE;
  BOOL v23 = (a5 & 0xF0FFFFFE) == 0x30FF0012 || v21 == 822018068;
  if (a5 == 956235783 && v15 == 889126919 || a5 == 939720711 && v18 == 872611847)
  {
    char v24 = 1;
  }
  else if (v20 != 872480775 || (char v24 = 1, a5 != 805371913) && a5 != 939589639)
  {
    char v24 = 1;
    if (v21 != 822018062 && v21 != 822018064) {
      char v24 = v23;
    }
  }
  uint64_t v25 = *(void *)(*((void *)this + 1) + 128);
  int v26 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 184))(v25);
  if (*(unsigned char *)(v25 + 1212)) {
    int v26 = *(_DWORD *)(v25 + 1216);
  }
  *(_DWORD *)(v25 + 16) = v26;
  if (v26 == a5) {
    char v27 = 1;
  }
  else {
    char v27 = v24;
  }
  if ((v27 & 1) == 0)
  {
    BOOL v32 = "m_rAsicInit.m_rAsicConfig.GetImageAsicVersionWithPossibleUpdate() == asic_version || bAllowVersionCheckException";
    DeviceFaultNotify("glmesrd_asicinit.cpp", 4278, "gll_misc_rpc_version_number", (char)"m_rAsicInit.m_rAsicConfig.GetImageAsicVersionWithPossibleUpdate() == asic_version || bAllowVersionCheckException");
    int v33 = 4278;
LABEL_41:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asicinit.cpp", v33, v32);
  }
  float v28 = (void *)*((void *)this + 1);
  uint64_t v29 = v28[16];
  *(unsigned char *)(v29 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = a3;
  *(unsigned char *)(v29 + 20) = a4;
  __int16 v34 = 776;
  uint64_t v30 = v28[4];
  unint64_t result = v28[1];
  unsigned __int8 v28[4] = result;
  do
  {
    unint64_t v35 = 0;
    if (BlueFin::patch_dispatch(result, (uint64_t)v28, (unsigned __int8 *)&v34, &v35)) {
      unint64_t result = v35;
    }
    else {
      unint64_t result = ((uint64_t (*)(void *, __int16 *))v28[4])(v28, &v34);
    }
    unsigned __int8 v28[4] = result;
  }
  while (result);
  unsigned __int8 v28[4] = v30;
  return result;
}

uint64_t (*(*(*BlueFin::GlMeSrdAsicinit::esw_wait4version(uint64_t a1, unsigned char *a2))(uint64_t a1, unsigned __int8 *a2))(uint64_t a1, unsigned __int8 *a2))()
{
  unint64_t result = BlueFin::GlMeSrdAsicinit::esw_loading;
  switch(*a2)
  {
    case 2:
      double v5 = (BlueFin::GlTimer *)(a1 + 656);
      unsigned int v6 = *(_DWORD *)(a1 + 740) + 500;
      *(void *)(a1 + 688) = a1;
      char v7 = 6;
      goto LABEL_15;
    case 3:
      BlueFin::GlQueue::Remove(a1 + 40, 5);
      BlueFin::GlTimer::disarm(a1 + 656);
      return 0;
    case 5:
      GlCustomLog(11, "GlMeSrdAsicinit::esw_wait4version no version received from ESW, RetainEsw=%d, LoadEsw=%d... could be Overlay was not retained!\n", *(unsigned __int8 *)(*(void *)(a1 + 128) + 555), *(unsigned __int8 *)(*(void *)(a1 + 128) + 556));
      (*(void (**)(void))(**(void **)(a1 + 112) + 16))(*(void *)(a1 + 112));
      long long v8 = "&GlMeSrdAsicinit::off";
      long long v9 = BlueFin::GlMeSrdAsicinit::off;
      goto LABEL_29;
    case 6:
      if (a2[1] <= 3u)
      {
        uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 120) + 80))(*(void *)(a1 + 120));
        uint64_t v28 = 0;
        v29[0] = 0;
        *(_DWORD *)((char *)v29 + 7) = 0;
        uint64_t v30 = v10;
        int v31 = 0;
        __int16 v32 = 0;
        (*(void (**)(uint64_t, void))(*(void *)v10 + 16))(v10, 0);
        GlCustomLog(12, "INIT_STAGE A: Requesting the Asic Version Number trial %u!\n", a2[1] + 1);
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 48))(v30);
        uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v12 + 16))(v12, &v28);
        BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v28);
        unsigned int v13 = a2[1];
        if (v13 >= 2)
        {
          GlCustomLog(12, "INIT_STAGE A: Resending Bri_GetOutOfLegacy %u!\n", v13 - 1);
          BlueFin::GlMeSrdAsicinit::Bri_GetOutOfLegacy((BlueFin::GlMeSrdAsicinit *)a1);
          unsigned int v13 = a2[1];
        }
        unsigned int v14 = *(_DWORD *)(a1 + 740) + 300 * v13 + 50;
        *(void *)(a1 + 688) = a1;
        BlueFin::GlTimer::arm((BlueFin::GlTimer *)(a1 + 656), 6, v13 + 1, v14);
        *(unsigned char *)(a1 + 680) = 1;
        BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v28);
        return 0;
      }
      double v5 = (BlueFin::GlTimer *)(a1 + 656);
      unsigned int v6 = *(_DWORD *)(a1 + 740) + 1000;
      *(void *)(a1 + 688) = a1;
      char v7 = 5;
LABEL_15:
      BlueFin::GlTimer::arm(v5, v7, 0, v6);
      unint64_t result = 0;
      *(unsigned char *)(a1 + 680) = 1;
      return result;
    case 8:
      if (a2[1] == 3)
      {
        int v15 = *(_DWORD *)(a1 + 632);
        *(_DWORD *)(a1 + 632) = v15 | 8;
        if ((v15 & 0x20000) != 0) {
          goto LABEL_25;
        }
        int v16 = (*(uint64_t (**)(void))(**(void **)(a1 + 128) + 248))(*(void *)(a1 + 128));
        uint64_t v17 = **(void **)(a1 + 128);
        if (v16)
        {
          if ((*(unsigned int (**)(void))(v17 + 824))() != 129)
          {
            int v18 = "ERROR: IFC Version from FW not supported\n";
            DeviceFaultNotify("glmesrd_asicinit.cpp", 1710, "esw_wait4version", (char)"ERROR: IFC Version from FW not supported\n");
            int v19 = 1710;
            goto LABEL_32;
          }
          goto LABEL_25;
        }
        int v20 = (*(uint64_t (**)(void))(v17 + 240))();
        uint64_t v21 = **(void **)(a1 + 128);
        if (v20)
        {
          if ((*(unsigned int (**)(void))(v21 + 824))() != 129)
          {
            int v18 = "ERROR: IFC Version from FW not supported\n";
            DeviceFaultNotify("glmesrd_asicinit.cpp", 1714, "esw_wait4version", (char)"ERROR: IFC Version from FW not supported\n");
            int v19 = 1714;
            goto LABEL_32;
          }
LABEL_25:
          uint64_t v24 = *(void *)(a1 + 128);
          int v25 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 184))(v24);
          if (*(unsigned char *)(v24 + 1212)) {
            int v26 = *(_DWORD *)(v24 + 1216);
          }
          else {
            int v26 = v25;
          }
          *(_DWORD *)(v24 + 16) = v26;
          (*(void (**)(void, void, void))(**(void **)(a1 + 128) + 200))(*(void *)(a1 + 128), 0, 0);
          int v27 = (*(uint64_t (**)(void))(**(void **)(a1 + 128) + 824))();
          GlCustomLog(12, "INIT_STAGE A: DONE. Version received: Asic 0x%08X, IFC %u, Radio 0x%02X)\n", v26, v27, *(unsigned __int8 *)(*(void *)(a1 + 128) + 20));
          long long v8 = "&GlMeSrdAsicinit::esw_wait4initasic";
          long long v9 = (uint64_t (*)())BlueFin::GlMeSrdAsicinit::esw_wait4initasic;
LABEL_29:
          BlueFin::QHsm::tran((void *)a1, v9, (uint64_t)v8);
          return 0;
        }
        int v22 = (*(uint64_t (**)(void))(v21 + 264))();
        uint64_t v23 = **(void **)(a1 + 128);
        if (v22)
        {
          if ((*(unsigned int (**)(void))(v23 + 824))() == 143) {
            goto LABEL_25;
          }
          int v18 = "ERROR: IFC Version from FW not supported\n";
          DeviceFaultNotify("glmesrd_asicinit.cpp", 1718, "esw_wait4version", (char)"ERROR: IFC Version from FW not supported\n");
          int v19 = 1718;
        }
        else if ((*(unsigned int (**)(void))(v23 + 256))())
        {
          if ((*(unsigned int (**)(void))(**(void **)(a1 + 128) + 824))(*(void *)(a1 + 128)) == 135) {
            goto LABEL_25;
          }
          int v18 = "ERROR: IFC Version from FW not supported\n";
          DeviceFaultNotify("glmesrd_asicinit.cpp", 1722, "esw_wait4version", (char)"ERROR: IFC Version from FW not supported\n");
          int v19 = 1722;
        }
        else
        {
          int v18 = "ERROR: Unexpected platform for IFC Version check\n";
          DeviceFaultNotify("glmesrd_asicinit.cpp", 1726, "esw_wait4version", (char)"ERROR: Unexpected platform for IFC Version check\n");
          int v19 = 1726;
        }
LABEL_32:
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asicinit.cpp", v19, v18);
      }
      GlCustomLog(12, "INIT_STAGE A: WARNING => Received %u!\n", a2[1]);
      return 0;
    default:
      return result;
  }
}

void sub_26397C1EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

uint64_t (*(*BlueFin::GlMeSrdAsicinit::bri_wait4flowcontrol(BlueFin::GlMeSrdAsicinit *this, unsigned char *a2))(uint64_t a1, unsigned __int8 *a2))()
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  unint64_t result = BlueFin::GlMeSrdAsicinit::loading;
  switch(*a2)
  {
    case 2:
      if (*(_DWORD *)(*((void *)this + 16) + 352) == 2) {
        BlueFin::GlMeSrdAsicinit::Bri_ProgramSwFlowControl(this);
      }
      else {
        BlueFin::GlMeSrdAsicinit::Bri_ProgramHwFlowControl(this);
      }
      uint64_t v12 = (BlueFin::GlMeSrdAsicinit *)((char *)this + 656);
      unsigned int v13 = *((_DWORD *)this + 185) + 300;
      *((void *)this + 86) = this;
      char v14 = 6;
      char v15 = 0;
      goto LABEL_26;
    case 3:
      BlueFin::GlQueue::Remove((uint64_t)this + 40, 6);
      BlueFin::GlQueue::Remove((uint64_t)this + 40, 5);
      BlueFin::GlTimer::disarm((uint64_t)this + 656);
      return 0;
    case 5:
      unsigned int v5 = ++*((unsigned char *)this + 733);
      if (v5 < 2)
      {
        GlCustomLog(12, "GlMeSrdAsicinit::No correct BRI response after retries. Maybe chipset is in ESW mode. Let's try to set it back to BRI\n");
        unsigned int v6 = "&GlMeSrdAsicinit::bri_wait4bri";
        char v7 = (uint64_t (*)())BlueFin::GlMeSrdAsicinit::bri_wait4bri;
      }
      else
      {
        (*(void (**)(void))(**((void **)this + 14) + 16))(*((void *)this + 14));
        unsigned int v6 = "&GlMeSrdAsicinit::off";
        char v7 = BlueFin::GlMeSrdAsicinit::off;
      }
      goto LABEL_22;
    case 6:
      if (a2[1] > 1u)
      {
        uint64_t v12 = (BlueFin::GlMeSrdAsicinit *)((char *)this + 656);
        *((void *)this + 86) = this;
        char v14 = 5;
        char v15 = 0;
        unsigned int v13 = 300;
      }
      else
      {
        memset(v21, 128, sizeof(v21));
        *((unsigned char *)this + 732) = 0;
        BlueFin::GlMeSrdAsicinit::Bri_SendAsicData(this, v21);
        if (*(_DWORD *)(*((void *)this + 16) + 352) == 2) {
          BlueFin::GlMeSrdAsicinit::Bri_ProgramSwFlowControl(this);
        }
        else {
          BlueFin::GlMeSrdAsicinit::Bri_ProgramHwFlowControl(this);
        }
        uint64_t v12 = (BlueFin::GlMeSrdAsicinit *)((char *)this + 656);
        char v16 = a2[1] + 1;
        *((void *)this + 86) = this;
        char v15 = v16;
        char v14 = 6;
        unsigned int v13 = 200;
      }
LABEL_26:
      BlueFin::GlTimer::arm(v12, v14, v15, v13);
      unint64_t result = 0;
      *((unsigned char *)this + 680) = 1;
      return result;
    case 0xC:
      if (a2[1] != 15) {
        return 0;
      }
      uint64_t v8 = *((void *)this + 16);
      int v9 = *(_DWORD *)(v8 + 352);
      int v10 = *((unsigned __int8 *)this + 768);
      if (v9 == 2)
      {
        if (v10 != 2) {
          goto LABEL_36;
        }
        if (!*((unsigned char *)this + 698)) {
          goto LABEL_36;
        }
        unsigned int v11 = *((unsigned __int8 *)this + 769);
        if ((v11 & 0xF) + *((unsigned __int8 *)this + 770) != *((unsigned __int8 *)this + 696)
          || *((unsigned __int8 *)this + 771) + (v11 >> 4) != *((unsigned __int8 *)this + 697)
          || *((unsigned char *)this + 772) && *((unsigned char *)this + 773) != 17)
        {
          goto LABEL_36;
        }
LABEL_35:
        uint64_t v17 = "SW";
        goto LABEL_48;
      }
      if (v10 != 1
        || *((unsigned char *)this + 770) != 14
        || *((unsigned char *)this + 771) != 16
        || *((unsigned char *)this + 769) != 51
        || *((unsigned char *)this + 772) && *((unsigned char *)this + 773) != 17)
      {
LABEL_36:
        if (*((unsigned char *)this + 680))
        {
          int v18 = (BlueFin::GlMeSrdAsicinit *)((char *)this + 656);
          if (v9 == 2) {
            int v19 = "SW";
          }
          else {
            int v19 = "HW";
          }
          GlCustomLog(14, "GlMeSrdAsicinit::%s Flow Control Was not Acked properly. Retrying\n", v19);
          BlueFin::GlTimer::rearm(v18, 0);
        }
        else
        {
          if (v9 == 2) {
            int v20 = "SW";
          }
          else {
            int v20 = "HW";
          }
          GlCustomLog(14, "GlMeSrdAsicinit::%s Flow Control Was not Acked properly. Timer already expired.\n", v20);
        }
        return 0;
      }
      if (*(_DWORD *)(v8 + 8) == 2)
      {
        char v22 = -4;
        *(_OWORD *)uint64_t v21 = xmmword_263BAC58A;
        BlueFin::GlMeSrdAsicinit::Bri_SendAsicData(this, v21);
        ++*((_DWORD *)this + 187);
        if (*(_DWORD *)(*((void *)this + 16) + 352) == 2) {
          goto LABEL_35;
        }
      }
      uint64_t v17 = "HW";
LABEL_48:
      GlCustomLog(14, "GlMeSrdAsicinit::%s Flow Control Set\n", v17);
      unsigned int v6 = "&GlMeSrdAsicinit::bri_wait4version";
      char v7 = (uint64_t (*)())BlueFin::GlMeSrdAsicinit::bri_wait4version;
LABEL_22:
      BlueFin::QHsm::tran(this, v7, (uint64_t)v6);
      return 0;
    default:
      return result;
  }
}

uint64_t BlueFin::GlQueue::Remove(uint64_t this, int a2)
{
  if (*(unsigned char *)this)
  {
    uint64_t v2 = (char *)this;
    int v3 = *(unsigned __int16 *)(this + 42) + 1;
    if ((v3 & 0x10000) == 0)
    {
      int v5 = 0;
      do
      {
        this = (uint64_t)BlueFin::GlQueue::get(v2, v6);
        if (v6[0] != a2) {
          this = BlueFin::GlQueue::putLIFO((BlueFin::GlQueue *)v2, v6[0], v6[1]);
        }
        ++v5;
      }
      while ((unsigned __int16)v5 < (unsigned __int16)v3);
    }
  }
  return this;
}

uint64_t BlueFin::MinnowGllRpcParserImp::Handle_SatRpt_TrkMsmt(BlueFin::MinnowGllRpcParserImp *this, BlueFin::GlStream *a2)
{
  uint64_t U08 = BlueFin::GlStream::GetU08(a2);
  unsigned __int8 v5 = BlueFin::GlStream::GetU08(a2);
  unsigned int v6 = BlueFin::GlStream::GetU08(a2);
  uint64_t v127 = 0;
  long long v126 = 0u;
  uint64_t v7 = v5 & 0xE;
  int v93 = v6 & 1;
  long long v125 = 0u;
  long long v124 = 0u;
  long long v123 = 0u;
  long long v122 = 0u;
  long long v121 = 0u;
  long long v120 = 0u;
  long long v119 = 0u;
  long long v118 = 0u;
  long long v117 = 0u;
  long long v116 = 0u;
  long long v115 = 0u;
  long long v114 = 0u;
  uint64_t v112 = 0;
  uint64_t v111 = 0;
  int v110 = 0;
  uint64_t v109 = 0;
  memset(v108, 0, sizeof(v108));
  long long v106 = 0u;
  long long v107 = 0u;
  memset(v105, 0, 308);
  __int16 v104 = 0;
  int v103 = 0;
  uint64_t v102 = 0;
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  int v99 = 0;
  long long v97 = 0u;
  long long v98 = 0u;
  int v8 = (v5 & 1 | 0xF0) & v5 & 0xFB | (4 * v93);
  int S16 = 0;
  int U16 = BlueFin::GlStream::GetU16(a2);
  unsigned int v113 = ((U16 << 16) & 0xFFE00000) >> U16;
  char v95 = v6;
  if (v6)
  {
    *(void *)&long long v114 = 0;
    WORD2(v127) = BlueFin::GlStream::GetU16(a2);
    uint64_t v112 = 0;
    uint64_t v111 = 0;
    uint64_t v109 = 0;
    int v110 = 0;
    long long v106 = 0u;
    long long v107 = 0u;
    int S16 = BlueFin::GlStream::GetS16(a2);
    p_int S16 = &S16;
    uint64_t v17 = this;
  }
  else
  {
    unsigned int v10 = BlueFin::GlStream::GetU16(a2);
    unsigned int v11 = BlueFin::GlStream::GetU16(a2);
    v12.i32[0] = v10 & 0xFFFF7FFF;
    v12.i32[1] = v11 & 0xFFFF7FFF;
    int32x2_t v13 = (int32x2_t)vshl_u32((uint32x2_t)(*(void *)&vshl_n_s32(v12, 0x10uLL) & 0xFFE0FFFFFFE0FFFFLL), (uint32x2_t)vneg_s32((int32x2_t)vand_s8((int8x8_t)v12, (int8x8_t)0x1F0000001FLL)));
    *(int32x2_t *)&long long v114 = vshl_n_s32((int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshr_n_s32(vshl_n_s32((int32x2_t)__PAIR64__(v11, v10), 0x10uLL), 0x10uLL)), (int8x8_t)vneg_s32(v13), (int8x8_t)v13), 8uLL);
    WORD2(v127) = BlueFin::GlStream::GetU16(a2);
    unsigned int v14 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 1) + 17032) + 824))();
    int v15 = (__int16)BlueFin::GlStream::GetU16(a2);
    unsigned int v16 = v15 << 16;
    uint64_t v17 = this;
    if (v14 < 0x85)
    {
      unsigned int v16 = (v16 & 0x7FE00000) >> v15;
      if (v15 < 0) {
        unsigned int v16 = -v16;
      }
    }
    LODWORD(v11BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v16;
    int v18 = BlueFin::GlStream::GetU16(a2);
    if ((v18 & 0x8000u) == 0) {
      unsigned int v19 = ((v18 << 16) & 0x7FE00000u) >> v18;
    }
    else {
      unsigned int v19 = -(((v18 << 16) & 0x7FE00000u) >> v18);
    }
    HIDWORD(v11BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v19;
    int v20 = BlueFin::GlStream::GetU16(a2);
    LODWORD(v112) = ((v20 << 16) & 0xFFE00000) >> v20;
    unsigned int v21 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 1) + 17032) + 824))();
    int v22 = (__int16)BlueFin::GlStream::GetU16(a2);
    unsigned int v23 = v22 << 16;
    if (v21 < 0x85)
    {
      unsigned int v23 = (v23 & 0x7FE00000) >> v22;
      if (v22 < 0) {
        unsigned int v23 = -v23;
      }
    }
    LODWORD(v109) = v23;
    int v24 = BlueFin::GlStream::GetU16(a2);
    if ((v24 & 0x8000u) == 0) {
      unsigned int v25 = ((v24 << 16) & 0x7FE00000u) >> v24;
    }
    else {
      unsigned int v25 = -(((v24 << 16) & 0x7FE00000u) >> v24);
    }
    HIDWORD(v109) = v25;
    LOWORD(v110) = BlueFin::GlStream::GetBits(a2, 0xAu);
    BYTE2(v110) = BlueFin::GlStream::GetBits(a2, 1u);
    BYTE4(v112) = BlueFin::GlStream::GetBits(a2, 1u);
    HIBYTE(v110) = BlueFin::GlStream::GetBits(a2, 3u);
    BlueFin::GlStream::GetBits(a2, 1u);
    for (uint64_t i = 0; i != 32; i += 4)
    {
      int v27 = BlueFin::GlStream::GetU16(a2);
      *(_DWORD *)((char *)&v106 + i) = ((v27 << 16) & 0xFFE00000) >> v27;
    }
    p_int S16 = 0;
  }
  uint64_t v28 = 0;
  uint64_t v29 = v8 & 0xFFFFFFF7 | (8 * ((v6 >> 2) & 1));
  do
  {
    int v30 = BlueFin::GlStream::GetU16(a2);
    *(_DWORD *)&v108[v28] = ((v30 << 16) & 0xFFE00000) >> v30;
    v28 += 4;
  }
  while (v28 != 32);
  LOBYTE(v105[0]) = (v6 & 2) != 0;
  if ((v6 & 2) != 0)
  {
    if ((*(unsigned int (**)(void))(**(void **)(*((void *)v17 + 1) + 17032) + 824))(*(void *)(*((void *)v17 + 1) + 17032)) > 0x85)
    {
      int v35 = BlueFin::GlStream::CarpGetBits(a2, 3u, 0x20u) & 7;
      int v36 = v35 & 0xFFFFFF07 | (8 * (BlueFin::GlStream::CarpGetBits(a2, 5u, 0x20u) & 0x1F));
      int v37 = v36 & 0xFFFFE0FF | ((BlueFin::GlStream::CarpGetBits(a2, 5u, 0x20u) & 0x1F) << 8);
      char Bits = BlueFin::GlStream::CarpGetBits(a2, 5u, 0x20u);
      int v39 = v37 & 0xFF001FFF | ((Bits & 0x1F) << 13) & 0xFF03FFFF | ((BlueFin::GlStream::CarpGetBits(a2, 6u, 0x20u) & 0x3F) << 18);
      char v40 = BlueFin::GlStream::CarpGetBits(a2, 7u, 0x20u);
      unsigned int v33 = (BlueFin::GlStream::CarpGetBits(a2, 1u, 0x20u) << 31) | ((v40 & 0x7F) << 24) | v39;
      v105[1] = v33;
      if ((Bits & 0x10) != 0)
      {
        uint64_t v89 = "mpf.settings.bits.points <= MAX_MPF_TAPS";
        DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 1328, "Handle_SatRpt_TrkMsmt", (char)"mpf.settings.bits.points <= MAX_MPF_TAPS");
        int v90 = 1328;
LABEL_76:
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_decoder_minnow.cpp", v90, v89);
      }
    }
    else
    {
      unsigned int v32 = 0;
      unsigned int v33 = -1805320152;
      v105[1] = -1805320152;
      do
        BlueFin::GlStream::GetS32(a2);
      while (v32++ < 4);
    }
    unsigned int v91 = v29;
    float v41 = v17;
    uint64_t v42 = v7;
    uint64_t v43 = U08;
    uint64_t v44 = 0;
    uint64_t v45 = (v33 >> 13) & 0x1F;
    int v46 = ((v33 >> 7) & 0x3E) + 10;
    uint64_t v47 = &v105[2];
    do
    {
      uint64_t v48 = v47;
      uint64_t v49 = v45;
      if (v45)
      {
        do
        {
          int v50 = BlueFin::GlStream::GetU16(a2);
          *v48++ = ((v50 << 16) & 0xFFE00000) >> v50 >> v46;
          --v49;
        }
        while (v49);
      }
      ++v44;
      v47 += 15;
    }
    while (v44 != 5);
    int v31 = v105;
    uint64_t U08 = v43;
    uint64_t v7 = v42;
    uint64_t v17 = v41;
    uint64_t v29 = v91;
  }
  else
  {
    int v31 = 0;
  }
  if (v7 == 2)
  {
    LOWORD(v99) = BlueFin::GlStream::GetU16(a2);
    __int16 v51 = BlueFin::GlStream::GetU16(a2);
  }
  else
  {
    LOWORD(v99) = BlueFin::GlStream::GetU08(a2);
    __int16 v51 = BlueFin::GlStream::GetU08(a2);
  }
  HIWORD(v99) = v51;
  if ((v29 & 0x10) == 0)
  {
    float v52 = 0;
    goto LABEL_57;
  }
  if ((0x5055u >> v7))
  {
    unsigned int v53 = byte_263BABB7A[v7];
  }
  else if (v7 == 8)
  {
    unsigned int v53 = 25;
  }
  else
  {
    unsigned int v53 = 0;
  }
  LOBYTE(v101[0]) = v53;
  __int16 v54 = BlueFin::GlStream::GetBits(a2, 0xFu);
  WORD1(v101[0]) = v54 & 0x7FFF | ((unsigned __int16)BlueFin::GlStream::GetBits(a2, 1u) << 15);
  if (v7 != 8
    && (v7 != 6
     || !(*(unsigned int (**)(void))(**(void **)(*((void *)v17 + 1) + 17032) + 664))(*(void *)(*((void *)v17 + 1) + 17032))))
  {
    if (v53)
    {
      uint64_t v70 = 0;
      uint64_t v71 = 4 * v53;
      do
      {
        int v72 = BlueFin::GlStream::GetU16(a2);
        float v52 = v101;
        *(_DWORD *)((char *)v101 + v70 + 4) = ((v72 << 16) & 0xFFE00000) >> v72;
        v70 += 4;
      }
      while (v71 != v70);
      goto LABEL_57;
    }
LABEL_56:
    float v52 = v101;
    goto LABEL_57;
  }
  BYTE8(v114) = v53;
  if (!v53) {
    goto LABEL_56;
  }
  unsigned int v92 = U08;
  uint64_t v55 = 0;
  uint64_t v56 = 4 * v53;
  __asm { FMOV            V11.2S, #16.0 }
  do
  {
    unsigned int v61 = BlueFin::GlStream::GetU16(a2);
    uint64_t v62 = (char *)&v113 + v55;
    unsigned int v63 = BlueFin::GlStream::GetU16(a2);
    v64.i32[0] = v61 & 0xFFFF7FFF;
    v64.i32[1] = v63 & 0xFFFF7FFF;
    int32x2_t v65 = (int32x2_t)vshl_u32((uint32x2_t)(*(void *)&vshl_n_s32(v64, 0x10uLL) & 0xFFE0FFFFFFE0FFFFLL), (uint32x2_t)vneg_s32((int32x2_t)vand_s8((int8x8_t)v64, (int8x8_t)0x1F0000001FLL)));
    int32x2_t v66 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshr_n_s32(vshl_n_s32((int32x2_t)__PAIR64__(v63, v61), 0x10uLL), 0x10uLL)), (int8x8_t)vneg_s32(v65), (int8x8_t)v65);
    *((_DWORD *)v62 + 29) = v66.i32[1];
    *((_DWORD *)v62 + 4) = v66.i32[0];
    float32x2_t v67 = vmul_f32(vcvt_f32_s32(v66), _D11);
    float v68 = sqrtf(vaddv_f32(vmul_f32(v67, v67)));
    float v69 = fmodf(v68, 4295000000.0);
    if (v68 <= 4295000000.0) {
      float v69 = v68;
    }
    float v52 = v101;
    *(_DWORD *)((char *)v101 + v55 + 4) = v69;
    v55 += 4;
  }
  while (v56 != v55);
  uint64_t U08 = v92;
LABEL_57:
  __int16 v104 = 0;
  int v103 = 0;
  if ((v95 & 8) != 0)
  {
    LOBYTE(v103) = 1;
    unsigned int v73 = BlueFin::GlStream::GetU08(a2);
    BYTE1(v103) = v73 & 0xF;
    BYTE2(v103) = v73 >> 4;
    __int16 v104 = BlueFin::GlStream::GetU16(a2);
  }
  if ((v29 & 0x20) != 0)
  {
    LOBYTE(v97) = BlueFin::GlStream::GetU08(a2);
    if (v93)
    {
      unsigned int v87 = 0;
      *((void *)&v97 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
      DWORD1(v97) = 0;
      DWORD1(v98) = 0;
    }
    else
    {
      uint64_t v78 = v29;
      unsigned int v79 = BlueFin::GlStream::GetU16(a2);
      int32x2_t v80 = (int32x2_t)__PAIR64__(BlueFin::GlStream::GetU16(a2), v79);
      uint64_t v29 = v78;
      int32x2_t v81 = vshr_n_s32(vshl_n_s32(v80, 0x10uLL), 0x10uLL);
      int32x2_t v82 = (int32x2_t)vshl_u32((uint32x2_t)(*(void *)&vshl_n_s32((int32x2_t)(*(void *)&v80 & 0xFFFF7FFFFFFF7FFFLL), 0x10uLL) & 0xFFE0FFFFFFE0FFFFLL), (uint32x2_t)vneg_s32((int32x2_t)vand_s8((int8x8_t)(*(void *)&v80 & 0xFFFF7FFFFFFF7FFFLL), (int8x8_t)0x1F0000001FLL)));
      *(int8x8_t *)((char *)&v97 + 4) = vbsl_s8((int8x8_t)vcltz_s32(v81), (int8x8_t)vneg_s32(v82), (int8x8_t)v82);
      int v83 = BlueFin::GlStream::GetU16(a2);
      if ((v83 & 0x8000u) == 0) {
        unsigned int v84 = ((v83 << 16) & 0x7FE00000u) >> v83;
      }
      else {
        unsigned int v84 = -(((v83 << 16) & 0x7FE00000u) >> v83);
      }
      HIDWORD(v97) = v84;
      int v85 = BlueFin::GlStream::GetU16(a2);
      DWORD1(v98) = ((v85 << 16) & 0xFFE00000) >> v85;
      int v86 = BlueFin::GlStream::GetU16(a2);
      unsigned int v87 = ((v86 << 16) & 0xFFE00000) >> v86;
    }
    DWORD2(v98) = v87;
    BYTE12(v98) = BlueFin::GlStream::GetU08(a2);
    BYTE13(v98) = BlueFin::GlStream::GetU08(a2);
    BYTE14(v98) = BlueFin::GlStream::GetU08(a2);
    double v74 = &v97;
    if ((v29 & 0x40) != 0) {
      goto LABEL_61;
    }
LABEL_71:
    double v77 = 0;
    goto LABEL_72;
  }
  double v74 = 0;
  if ((v29 & 0x40) == 0) {
    goto LABEL_71;
  }
LABEL_61:
  uint64_t v75 = v29;
  for (uint64_t j = 0; j != 32; j += 4)
  {
    double v77 = v100;
    *(_DWORD *)((char *)v100 + j) = BlueFin::GlStream::GetS32(a2);
    *(_DWORD *)((char *)&v100[2] + j) = BlueFin::GlStream::GetS32(a2);
  }
  uint64_t v29 = v75;
LABEL_72:
  if (BlueFin::GlStream::GetAvailableSize(a2))
  {
    uint64_t v89 = "otStream.GetAvailableSize() == 0";
    DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 1471, "Handle_SatRpt_TrkMsmt", (char)"otStream.GetAvailableSize() == 0");
    int v90 = 1471;
    goto LABEL_76;
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t *, uint64_t *, int *, unsigned char *, long long *, int *, _DWORD *, _OWORD *, int *, _OWORD *, long long *))(**(void **)(*((void *)v17 + 1) + 17072) + 56))(*(void *)(*((void *)v17 + 1) + 17072), U08, v7, v29, &v113, &v111, &v109, p_S16, v108, &v106, &v99, v31, v52, &v103, v77, v74);
}

uint64_t BlueFin::GlStream::GetS32(BlueFin::GlStream *this)
{
  if (*((_DWORD *)this + 6))
  {
    unsigned int v16 = "m_uiBitOffset == 0";
    DeviceFaultNotify("glutl_stream.h", 160, "GetS32", (char)"m_uiBitOffset == 0");
    int v17 = 160;
    goto LABEL_11;
  }
  if (*((_DWORD *)this + 7))
  {
    unsigned int v16 = "m_uiBitsRemainingInWord == 0";
    DeviceFaultNotify("glutl_stream.h", 161, "GetS32", (char)"m_uiBitsRemainingInWord == 0");
    int v17 = 161;
    goto LABEL_11;
  }
  uint64_t v1 = *(unsigned int *)this;
  int v2 = v1 + 4;
  if ((v1 + 4) > *((_DWORD *)this + 4))
  {
    unsigned int v16 = "m_uiOffset + 4 <= m_uiMaxOffset";
    DeviceFaultNotify("glutl_stream.h", 163, "GetS32", (char)"m_uiOffset + 4 <= m_uiMaxOffset");
    int v17 = 163;
LABEL_11:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_stream.h", v17, v16);
  }
  int v3 = *((unsigned __int8 *)this + 20);
  uint64_t v4 = *((void *)this + 1);
  unsigned int v5 = v1 + 1;
  *(_DWORD *)this = v1 + 1;
  int v6 = *(unsigned __int8 *)(v4 + v1);
  if (v3)
  {
    unsigned int v7 = v1 + 2;
    *(_DWORD *)this = v1 + 2;
    int v8 = *(unsigned __int8 *)(v4 + v5);
    unsigned int v9 = v1 + 3;
    *(_DWORD *)this = v9;
    int v6 = (v6 << 24) | (v8 << 16) | (*(unsigned __int8 *)(v4 + v7) << 8);
    *(_DWORD *)this = v2;
    int v10 = *(unsigned __int8 *)(v4 + v9);
  }
  else
  {
    unsigned int v12 = v1 + 2;
    *(_DWORD *)this = v1 + 2;
    int v13 = *(unsigned __int8 *)(v4 + v5);
    unsigned int v14 = v1 + 3;
    *(_DWORD *)this = v14;
    int v15 = *(unsigned __int8 *)(v4 + v12) << 16;
    *(_DWORD *)this = v2;
    int v10 = v15 | (v13 << 8) | (*(unsigned __int8 *)(v4 + v14) << 24);
  }
  return v6 | v10;
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetIfcVersion(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 21);
}

uint64_t BlueFin::GlMeSrdSatRptRpcBuffer::gll_satrpt_rpc_trk_msmt(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, long long *a5, _OWORD *a6, uint64_t *a7, _DWORD *a8, long long *a9, long long *a10, _DWORD *a11, const void *a12, long long *a13, int *a14, long long *a15, _OWORD *a16)
{
  BlueFin::GlMeSrdSatRptRpcBuffer::CheckInstanceId(a1, a2);
  int v21 = *(_DWORD *)(a1 + 8);
  if ((v21 & 0x10) != 0)
  {
    uint64_t v56 = "m_otFlags.Missing(FLGS_RECEIVED_TRACK)";
    DeviceFaultNotify("glmesrd_sat_report_rpc_buffer.cpp", 329, "gll_satrpt_rpc_trk_msmt", (char)"m_otFlags.Missing(FLGS_RECEIVED_TRACK)");
    int v57 = 329;
    goto LABEL_24;
  }
  if (a4) {
    int v22 = 2097168;
  }
  else {
    int v22 = 16;
  }
  int v23 = v21 | v22;
  *(unsigned char *)(a1 + 104) = a4;
  *(_DWORD *)(a1 + 8) = v23;
  *(unsigned char *)(a1 + 105) = a3;
  long long v24 = *a5;
  *(_OWORD *)(a1 + 124) = a5[1];
  *(_OWORD *)(a1 + 108) = v24;
  long long v25 = a5[2];
  long long v26 = a5[3];
  long long v27 = a5[4];
  *(_OWORD *)(a1 + 188) = a5[5];
  *(_OWORD *)(a1 + 172) = v27;
  *(_OWORD *)(a1 + 156) = v26;
  *(_OWORD *)(a1 + 140) = v25;
  long long v28 = a5[6];
  long long v29 = a5[7];
  long long v30 = a5[8];
  *(_OWORD *)(a1 + 252) = a5[9];
  *(_OWORD *)(a1 + 236) = v30;
  *(_OWORD *)(a1 + 220) = v29;
  *(_OWORD *)(a1 + 204) = v28;
  long long v31 = a5[10];
  long long v32 = a5[11];
  long long v33 = a5[12];
  *(_OWORD *)(a1 + 312) = *(long long *)((char *)a5 + 204);
  *(_OWORD *)(a1 + 300) = v33;
  *(_OWORD *)(a1 + 284) = v32;
  *(_OWORD *)(a1 + 268) = v31;
  __int16 v34 = a6;
  *(_OWORD *)(a1 + 328) = *a6;
  uint64_t v35 = *a7;
  *(_DWORD *)(a1 + 352) = *((_DWORD *)a7 + 2);
  *(void *)(a1 + 344) = v35;
  long long v36 = *a9;
  *(_OWORD *)(a1 + 376) = a9[1];
  *(_OWORD *)(a1 + 360) = v36;
  long long v37 = *a10;
  *(_OWORD *)(a1 + 408) = a10[1];
  *(_OWORD *)(a1 + 392) = v37;
  *(_DWORD *)(a1 + 732) = *a11;
  int v38 = *a14;
  *(_WORD *)(a1 + 844) = *((_WORD *)a14 + 2);
  *(_DWORD *)(a1 + 840) = v38;
  if (a13)
  {
    v23 |= 0x20u;
    *(_DWORD *)(a1 + 8) = v23;
    long long v39 = *a13;
    long long v40 = a13[2];
    *(_OWORD *)(a1 + 752) = a13[1];
    *(_OWORD *)(a1 + 768) = v40;
    *(_OWORD *)(a1 + 736) = v39;
    long long v41 = a13[3];
    long long v42 = a13[4];
    long long v43 = a13[5];
    *(void *)(a1 + 832) = *((void *)a13 + 12);
    *(_OWORD *)(a1 + 800) = v42;
    *(_OWORD *)(a1 + 816) = v43;
    *(_OWORD *)(a1 + 784) = v41;
    uint64_t v45 = a16;
    uint64_t v44 = a8;
    int v46 = a15;
    if (a3 != 12) {
      goto LABEL_9;
    }
    if (*(unsigned char *)(a1 + 736) == 2)
    {
      int32x2_t v47 = *(int32x2_t *)(a1 + 740);
      *(_DWORD *)(a1 + 748) = v47.i32[0];
      *(int32x2_t *)(a1 + 740) = vrev64_s32(v47);
LABEL_9:
      if (!a15) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    uint64_t v56 = "m_otRawdata.u.sTrk.sTrkMsmt.hvec.size == 2 && sizeof(m_otRawdata.u.sTrk.sTrkMsmt.hvec.vec) > 3";
    DeviceFaultNotify("glmesrd_sat_report_rpc_buffer.cpp", 357, "gll_satrpt_rpc_trk_msmt", (char)"m_otRawdata.u.sTrk.sTrkMsmt.hvec.size == 2 && sizeof(m_otRawdata.u.sTrk.sTrkMsmt.hvec.vec) > 3");
    int v57 = 357;
LABEL_24:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_report_rpc_buffer.cpp", v57, v56);
  }
  uint64_t v45 = a16;
  uint64_t v44 = a8;
  int v46 = a15;
  if (a15)
  {
LABEL_10:
    v23 |= 0x80u;
    *(_DWORD *)(a1 + 8) = v23;
    long long v48 = *v46;
    long long v49 = v46[1];
    long long v50 = v46[3];
    *(_OWORD *)(a1 + 880) = v46[2];
    *(_OWORD *)(a1 + 896) = v50;
    *(_OWORD *)(a1 + 848) = v48;
    *(_OWORD *)(a1 + 864) = v49;
  }
LABEL_11:
  if (v45)
  {
    v23 |= 0x100u;
    *(_DWORD *)(a1 + 8) = v23;
    long long v51 = v45[1];
    *(_OWORD *)(a1 + 912) = *v45;
    *(_OWORD *)(a1 + 928) = v51;
  }
  if (v44)
  {
    v23 |= 0x200u;
    *(_DWORD *)(a1 + 8) = v23;
    *(_DWORD *)(a1 + 356) = *v44;
  }
  int v52 = *a14;
  *(_WORD *)(a1 + 844) = *((_WORD *)a14 + 2);
  *(_DWORD *)(a1 + 840) = v52;
  if (a12)
  {
    *(_DWORD *)(a1 + 8) = v23 | 0x40;
    memcpy((void *)(a1 + 424), a12, 0x134uLL);
    uint64_t v44 = a8;
    __int16 v34 = a6;
  }
  uint64_t v53 = *(void *)(a1 + 3152);
  __int16 v54 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, long long *, _OWORD *, uint64_t *, _DWORD *))(*(void *)v53 + 56);

  return v54(v53, a2, a3, a4, a5, v34, a7, v44);
}

uint64_t BlueFin::GlMeSrdAsicConfig::Serialize(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v5 = v4;
  uint64_t v6 = v2;
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (!v4 && (!BlueFin::GlUtils::m_pInstance || !*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))) {
    return 0;
  }
  if (v3) {
    unsigned int v7 = v3;
  }
  else {
    unsigned int v7 = 18;
  }
  if (v7 >= 0x13)
  {
    DeviceFaultNotify("glmesrd_asic_config.cpp", 4180, "Serialize", (char)"ucVersion >= 1 && ucVersion <= 18");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_config.cpp", 4180, "ucVersion >= 1 && ucVersion <= 18");
  }
  int v10 = 73;
  char v11 = v7;
  uint64_t v12 = 0x1000000000000;
  unsigned int v9 = &unk_270EBA550;
  char v13 = v7;
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v9, *(unsigned __int8 *)(v2 + 20));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 21));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v6 + 12));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v6 + 16));
  BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v6 + 8));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 1424));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 1425));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 1426));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 1427));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 1428));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 1429));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 1430));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 1432));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 1433));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 1434));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 1435));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v6 + 1444));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 1448));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v6 + 1452));
  if (v7 >= 2)
  {
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 1456));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 1457));
    if (v7 != 2)
    {
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 1483));
      if (v7 >= 4)
      {
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 1484));
        if (v7 != 4)
        {
          BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 1485));
          if (v7 >= 6)
          {
            BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 1488));
            BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 1489));
            if (v7 != 6)
            {
              BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v6 + 1472));
              BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v6 + 1474));
              if (v7 >= 8)
              {
                BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v6 + 1476));
                BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v6 + 1478));
                if (v7 != 8)
                {
                  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 1480));
                  if (v7 >= 0xA)
                  {
                    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 1481));
                    if (v7 != 10) {
                      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 1482));
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 1458));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 1459));
  BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v6 + 1460));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v6 + 1464));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v6 + 1468));
  if (v7 >= 0xC)
  {
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 1490));
    if (v7 != 12)
    {
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 1491));
      if (v7 >= 0xE)
      {
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 1493));
        if (v7 != 14)
        {
          BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 1601));
          if (v7 >= 0x10)
          {
            BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 2180));
            if (v7 != 16)
            {
              BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 1492));
              if (v7 >= 0x12)
              {
                BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 1212));
                BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v6 + 1216));
              }
            }
          }
        }
      }
    }
  }
  BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v9, v5, 4);
  return 1;
}

uint64_t BlueFin::GlMeSrdPwrMeasController::SetHealthProfile(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(void))(**((void **)a1 + 4) + 760))(*((void *)a1 + 4));
  if (v6)
  {
    int v7 = *(_DWORD *)a2;
    int v8 = *((_DWORD *)a1 + 2);
    *((_DWORD *)a1 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v8 + *(unsigned __int16 *)(a2 + 26);
    *a1 = 1;
    *((_DWORD *)a1 + 2) = v7;
    __int16 v9 = *(_WORD *)(a2 + 24);
    *(_WORD *)a3 = v9;
    *(_WORD *)(a3 + 4) = v9;
    int v10 = (*(uint64_t (**)(void))(**((void **)a1 + 4) + 256))();
    __int16 v11 = *(_WORD *)(a2 + 40);
    if (!v10) {
      __int16 v11 = 0;
    }
    *(_WORD *)(a3 + 8) = v11 + *(_WORD *)(a2 + 26);
    *(_WORD *)(a3 + 48) = *(_WORD *)(a2 + 28);
    *(unsigned char *)(a3 + 108) = *(unsigned char *)(a2 + 36);
    if (((*(uint64_t (**)(void))(**((void **)a1 + 4) + 248))(*((void *)a1 + 4)) & 1) != 0
      || (*(unsigned int (**)(void))(**((void **)a1 + 4) + 240))(*((void *)a1 + 4)))
    {
      char v13 = (_WORD *)(a2 + 30);
    }
    else
    {
      char v13 = (_WORD *)(a2 + 42);
    }
    __int16 v14 = v7 - v8;
    *(_WORD *)(a3 + 50) = *v13;
    *(_WORD *)(a3 + 52) = *(_WORD *)(a2 + 32);
    LODWORD(v12) = *(_DWORD *)(a2 + 16);
    double v15 = (double)v12 / 57.6;
    int v16 = (int)(v15 + 0.5);
    if (v15 <= 0.0) {
      LOWORD(v16) = 0;
    }
    *(_WORD *)(a3 + 54) = v16;
    *(_DWORD *)(a3 + 56) = *(_DWORD *)a2;
    *(_WORD *)(a3 + 60) = *(_WORD *)(a2 + 40);
    HIDWORD(v17) = *(_DWORD *)(a2 + 56);
    LODWORD(v17) = HIDWORD(v17);
    *(_DWORD *)(a3 + 62) = v17 >> 16;
    *(_WORD *)(a3 + 66) = *(unsigned __int8 *)(a2 + 74);
    *(_WORD *)(a3 + 68) = *(unsigned __int8 *)(a2 + 75);
    *(_WORD *)(a3 + 70) = *(unsigned char *)(a2 + 73) & 0xF;
    *(float *)(a3 + 72) = (float)*(__int16 *)(a2 + 66) / 100.0;
    *(_DWORD *)(a3 + 112) = *(_DWORD *)(a2 + 188);
    if ((*(unsigned int (**)(void))(**((void **)a1 + 4) + 264))() && !*(unsigned char *)(a2 + 72))
    {
      *(__int16 *)(a3 + 8) /= 3;
      *(__int16 *)(a3 + 48) /= 3;
      *(_WORD *)(a3 + 52) /= 3u;
      *(__int16 *)(a3 + 60) /= 3;
      *(__int16 *)(a3 + 62) /= 3;
      *(_WORD *)(a3 + 64) /= 3u;
      *(__int16 *)(a3 + 50) /= 3;
    }
    LOWORD(v18) = *a1;
    if (*a1) {
      int v18 = *(_DWORD *)a2 - *((_DWORD *)a1 + 1);
    }
    *(_WORD *)(a3 + 2) = v14 - v18;
    *(_WORD *)(a3 + 4) = v14;
    *(_WORD *)(a3 + 6) = v18;
    *(_WORD *)(a3 + 10) = v14;
    BlueFin::GlMeSrdPwrMeas::mA_Estimate((uint64_t)(a1 + 8), (float *)a3, a2);
    *a1 = 0;
  }
  return v6;
}

BOOL BlueFin::GlMeSrdAsicConfig::IsCarpAsicType(BlueFin::GlMeSrdAsicConfig *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (!v1)
  {
    DeviceFaultNotify("glmesrd_asic_config.cpp", 4430, "IsCarpAsicType", (char)"m_eAsicType != ASIC_TYPE_UNKNOWN");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_config.cpp", 4430, "m_eAsicType != ASIC_TYPE_UNKNOWN");
  }
  return v1 == 2;
}

BOOL BlueFin::GlMeSrdAsicConfig::IsSardineAsicType(BlueFin::GlMeSrdAsicConfig *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (!v1)
  {
    DeviceFaultNotify("glmesrd_asic_config.cpp", 4449, "IsSardineAsicType", (char)"m_eAsicType != ASIC_TYPE_UNKNOWN");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_config.cpp", 4449, "m_eAsicType != ASIC_TYPE_UNKNOWN");
  }
  return v1 == 1;
}

void BlueFin::GlMeSrdPwrMeas::mA_Estimate(uint64_t a1, float *a2, uint64_t a3)
{
  uint64_t v108 = *MEMORY[0x263EF8340];
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 912))(*(void *)(a1 + 8));
  int v7 = *(__int16 *)a2;
  int v8 = *((__int16 *)a2 + 5);
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 264))())
  {
    unsigned __int8 v10 = 0;
    unsigned __int8 v11 = 0;
    unsigned int v12 = 0;
    unsigned int v13 = *(unsigned __int8 *)(a3 + 78);
    __int16 v14 = *(_WORD *)a2;
    int v15 = *((unsigned __int16 *)a2 + 5);
    v106[0] = xmmword_263BAD7F0;
    v106[1] = xmmword_263BAD800;
    uint64_t v107 = 0x3FA60418A0000000;
    uint64_t v105 = 0x3F8CAC0840000000;
    unsigned int v16 = (*(_DWORD *)(a3 + 140) >> 13) & 0x1F;
    unsigned int v17 = *(_DWORD *)(a3 + 140) & 0x1F;
    v104[0] = xmmword_263BAD810;
    v104[1] = xmmword_263BAD820;
    do
    {
      v11 += v16 & 1;
      v16 >>= 1;
      v10 += v17 & 1;
      v17 >>= 1;
    }
    while (v12++ < 4);
    float v19 = (float)(__int16)v15;
    float v20 = (float)v14;
    HIWORD(v2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 17530;
    unsigned int v22 = *(unsigned __int8 *)(a3 + 79);
    uint64_t v23 = (v22 & 0xF) != 0 && v22 > 0xF;
    if ((v22 & 0xF) != 0)
    {
      if (v13) {
        unsigned int v24 = *(unsigned char *)(a3 + 76) & 3;
      }
      else {
        unsigned int v24 = (v13 >> 1) & 3;
      }
    }
    else
    {
      if ((v13 & 0x30) == 0x20)
      {
        unsigned int v24 = 3;
      }
      else
      {
        unsigned int v44 = *(_DWORD *)(a3 + 160);
        if (v44) {
          char v45 = *(unsigned char *)(a3 + 77);
        }
        else {
          char v45 = v44 >> 1;
        }
        unsigned int v24 = v45 & 1;
      }
      uint64_t v23 = 2;
    }
    uint64_t v46 = *(unsigned __int8 *)(a3 + 75);
    float v47 = v20 / v19;
    float v48 = flt_263BAD840[3 * v24 + v23] * v20;
    float v49 = 0.0;
    if (!*(unsigned char *)(a3 + 79)) {
      float v48 = 0.0;
    }
    int v50 = *(_DWORD *)(a3 + 60);
    float v51 = 0.0;
    float v52 = v19 / 1000.0;
    unsigned int v53 = v50 & 0x1F7FFF;
    if ((v50 & 0x1F7FFF) != 0)
    {
      unsigned int v54 = 0;
      unsigned __int8 v55 = 0;
      float v51 = 0.033;
      do
      {
        if (v53)
        {
          float v21 = flt_263BAD8B8[v55];
          float v51 = v51 + v21;
        }
        BOOL v56 = v54 <= 0xC || v54 == 14;
        ++v54;
        if (!v56) {
          ++v55;
        }
        BOOL v57 = v53 > 1;
        v53 >>= 1;
      }
      while (v57);
    }
    LOWORD(v2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *((_WORD *)a2 + 26);
    float v58 = v52 * (float)(v47 * (float)LODWORD(v21));
    LOWORD(v9) = *((_WORD *)a2 + 32);
    float v59 = v47 * (float)v9;
    if ((v50 & 0x8000) != 0) {
      float v49 = (float)(v20 - v58) * flt_263BAD8D4[v46 + 2];
    }
    float v60 = v52 * v59;
    if ((v50 & 0x1000000) != 0) {
      float v49 = v49 + (float)(flt_263BAD8D4[v46 + 2] * (float)(v20 - v60));
    }
    float v61 = 0.0;
    float v62 = 0.0;
    unsigned int v63 = *(_WORD *)(a3 + 64) & 0x3FF;
    if ((*(_WORD *)(a3 + 64) & 0x3FF) != 0)
    {
      do
      {
        if (v63) {
          float v62 = v62 + 0.061;
        }
        BOOL v57 = v63 > 1;
        v63 >>= 1;
      }
      while (v57);
    }
    float v64 = 0.0;
    float v65 = 0.0;
    float v66 = flt_263BAD870[3 * v24 + v23];
    float v67 = 0.0;
    float v68 = 0.0;
    float v69 = 0.0;
    float v70 = 0.0;
    float v71 = 0.0;
    float v72 = 0.0;
    float v73 = 0.0;
    float v74 = 0.0;
    if (v15)
    {
      float v77 = (float)(flt_263BAD7D8[v46] * v20) * (float)v10;
      float v79 = v51 * v20;
      float v80 = flt_263BAD8D4[v46] * (float)(v58 + v60);
      if ((*(_WORD *)(a3 + 64) & 0x400) != 0) {
        float v62 = v62 + 0.661;
      }
      int32x2_t v81 = (float *)((char *)&unk_263BAD830 + 4 * v46);
      float v69 = (float)(v62 * v20) / v19;
      float v70 = (float)(*v81 * v20) / v19;
      float v71 = (float)(v81[2] * (float)*((__int16 *)a2 + 25)) / v19;
      float v67 = v48 / v19;
      float v72 = (float)(flt_263BAD8D4[v46 + 4] * (float)((float)*((__int16 *)a2 + 24) + (float)*((__int16 *)a2 + 31))) / v19;
      unint64_t v76 = *(unsigned __int8 *)(a3 + 73);
      uint64_t v75 = *(unsigned __int8 *)(a3 + 74);
      float v78 = (float)(flt_263BAD8A0[v75] * (float)*((__int16 *)a2 + 4))
          + *((double *)v106 + (v76 & 7)) * (float)(v20 - (float)*((__int16 *)a2 + 4))
          + *((double *)v106 + ((v76 >> 4) & 7)) * (float)(v19 - v20)
          + (float)(flt_263BAD8AC[v75] * (float)*((__int16 *)a2 + 30))
          + *((double *)v104 + (v76 & 7)) * (float)(v20 - (float)*((__int16 *)a2 + 30))
          + *((double *)v104 + ((v76 >> 4) & 7)) * (float)(v19 - v20);
      float v68 = v78 / v19;
      float v61 = (float)(v20 * 0.21) / v19;
      float v64 = (float)(flt_263BAD7D0[v46] * v20) / v19;
      float v74 = (float)((float)((float)((float)(flt_263BAD7E0[v46] * v20) / v19) + (float)(v79 / v19)) + (float)(v80 / v19))
          + (float)(v49 / v19);
      float v73 = v20 / v19;
      float v65 = v77 / v19;
    }
    float v101 = v67;
    float v102 = v72;
    float v103 = v68;
    if (*(unsigned char *)(a3 + 79)) {
      float v82 = v66;
    }
    else {
      float v82 = 0.0;
    }
    float v83 = (float)((float)(v65
                        + (float)(v64
                                + (float)(v61
                                        + (float)(v68
                                                + (float)(v72
                                                        + (float)(v67 + (float)(v71 + (float)(v70 + (float)(v69 + v74)))))))))
                + 0.488)
        + (float)((float)v11 * -0.014);
    float v84 = BlueFin::GlMeSrdPwrMeas::EstimatePMU_Eff((BlueFin::GlMeSrdPwrMeas *)1, v83, v82, v73);
    float v85 = BlueFin::GlMeSrdPwrMeas::EstimatePMU_Eff(0, v83, v82, v73);
    float v86 = (float)(v82 * v73) * (float)(27.027 / v84);
    a2[3] = v86 + (float)((float)(v83 - (float)(v82 * v73)) * (float)(27.027 / v85));
    a2[5] = v74 * (float)(27.027 / v85);
    a2[6] = (float)((float)(v69 + v70) + v71) * (float)(27.027 / v85);
    a2[7] = v86 + (float)((float)(v101 - (float)(v82 * v73)) * (float)(27.027 / v85));
    a2[8] = v102 * (float)(27.027 / v85);
    a2[9] = v103 * (float)(27.027 / v85);
    a2[10] = 0.0;
    a2[19] = v83;
    a2[11] = (float)(27.027 / v85) * 0.488;
    if ((v22 & 0xF) != 0) {
      __int16 v87 = v14;
    }
    else {
      __int16 v87 = 0;
    }
    *((_WORD *)a2 + 8) = v87;
    if (v22 <= 0xF) {
      __int16 v88 = 0;
    }
    else {
      __int16 v88 = v14;
    }
    *((_WORD *)a2 + 9) = v88;
  }
  else
  {
    float v25 = (float)v8;
    *((_WORD *)a2 + 8) = *(_WORD *)a2;
    *((_WORD *)a2 + 9) = 0;
    unsigned int v26 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 152))(*(void *)(a1 + 8));
    if (v26 <= 5 && ((1 << v26) & 0x34) != 0) {
      *((_WORD *)a2 + 9) = *(_WORD *)a2;
    }
    float v27 = (float)v7 / v25;
    float v28 = v25 / 1000.0;
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 256))(*(void *)(a1 + 8)))
    {
      unsigned int v30 = 1.0;
      if (v6 <= 36) {
        float v31 = 1.0;
      }
      else {
        float v31 = 1.5;
      }
      LOWORD(v30) = *((_WORD *)a2 + 26);
      float v32 = v28 * (float)((float)(v27 * (float)v30) * 0.2);
      float v33 = (float)*((__int16 *)a2 + 25) * 16.0;
      int v34 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 152))(*(void *)(a1 + 8));
      float v35 = 0.0;
      float v36 = 0.0;
      unsigned int v37 = v6 & 0xFFFFFFFD;
      switch(v34)
      {
        case 1:
          goto LABEL_27;
        case 2:
          if (*(unsigned char *)(a1 + 16))
          {
            float v38 = flt_263BAD7C0[v6 < 37];
            float v39 = -1.35;
          }
          else
          {
LABEL_27:
            float v38 = 9.6;
            if (v6 >= 37) {
              float v38 = 11.5;
            }
            float v39 = -0.64;
          }
          goto LABEL_70;
        case 3:
          goto LABEL_69;
        case 4:
          if (*(unsigned char *)(a1 + 16))
          {
            float v38 = flt_263BAD7B0[v6 < 37];
            float v39 = -1.09;
          }
          else
          {
LABEL_69:
            float v38 = flt_263BAD7B8[v6 < 37];
            float v39 = -0.3;
          }
LABEL_70:
          float v36 = v38 + v39;
          if (v37 != 36) {
            float v36 = v38;
          }
          break;
        case 5:
          float v36 = flt_263BAD7A8[v37 == 36];
          break;
        default:
          break;
      }
      float v40 = v33 + v32;
      float v42 = v36 + 0.7;
      if (!*(unsigned char *)(a1 + 17)) {
        float v42 = v36;
      }
      float v41 = 8.5;
      float v43 = 0.4;
    }
    else
    {
      LOWORD(v29) = *((_WORD *)a2 + 26);
      float v32 = (float)v29 * 13.5;
      float v33 = v28 * (float)((float)(v27 * (float)*((__int16 *)a2 + 25)) * 37.5);
      float v40 = v32 + v33;
      float v35 = 11.0;
      float v41 = 2.5;
      float v42 = 25.0;
      float v31 = 1.0;
      float v43 = 31.5;
    }
    if (*((_WORD *)a2 + 5))
    {
      float v89 = v42 * (float)*(__int16 *)a2;
      float v90 = v43 * (float)*((__int16 *)a2 + 24);
      float v91 = v41 * (float)*((__int16 *)a2 + 4);
      LOWORD(v4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *((_WORD *)a2 + 27);
      float v92 = v35 * (float)LODWORD(v41);
      float v93 = (float)*((__int16 *)a2 + 5);
      float v94 = (float)((float)((float)((float)(v40 + v89) + v90) + v91) + v92) / v93;
      float v95 = v32 / v93;
      float v96 = v33 / v93;
      float v97 = v89 / v93;
      float v98 = v90 / v93;
      float v99 = v91 / v93;
      float v100 = v92 / v93;
    }
    else
    {
      float v94 = 0.0;
      float v95 = 0.0;
      float v96 = 0.0;
      float v97 = 0.0;
      float v98 = 0.0;
      float v99 = 0.0;
      float v100 = 0.0;
    }
    a2[3] = v31 + v94;
    a2[5] = v95;
    a2[6] = v96;
    a2[7] = v97;
    a2[8] = v98;
    a2[9] = v99;
    a2[10] = v100;
    a2[11] = v31;
  }
}

float BlueFin::GlMeSrdPwrMeas::EstimatePMU_Eff(BlueFin::GlMeSrdPwrMeas *this, float a2, float a3, float a4)
{
  if (this)
  {
    uint64_t v4 = 1;
    float v5 = a3 / 0.9;
  }
  else
  {
    float v5 = (float)(a2 - (float)(a3 * a4)) / 0.67;
    uint64_t v4 = 2;
  }
  uint64_t v6 = 0;
  while (1)
  {
    float v7 = flt_263BAD8EC[v6 + 3];
    if (v5 < v7) {
      break;
    }
    v6 += 3;
    if (v6 == 30) {
      return flt_263BAD8EC[v4 + 30];
    }
  }
  return flt_263BAD8EC[v6 + v4]
       + (float)((float)((float)(v5 - flt_263BAD8EC[v6]) / (float)(v7 - flt_263BAD8EC[v6]))
               * (float)(flt_263BAD8EC[v6 + 3 + v4] - flt_263BAD8EC[v6 + v4]));
}

uint64_t BlueFin::GlMeSrdAsicinit::Bri_ProgramHwFlowControl(BlueFin::GlMeSrdAsicinit *this)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  *((unsigned char *)this + 732) = 0;
  int v2 = *(_DWORD *)(*((void *)this + 16) + 8);
  if ((v2 - 2) < 2)
  {
    *(void *)uint64_t v4 = 0x100E33010FFD00FFLL;
    LOBYTE(v5) = -4;
  }
  else if (v2 == 1)
  {
    *(void *)uint64_t v4 = 0xE33010021FD00FELL;
    LOWORD(v5) = -1008;
  }
  else
  {
    if (v2 != 5)
    {
      DeviceFaultNotify("glmesrd_asicinit.cpp", 3358, "Bri_ProgramHwFlowControl", (char)"0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asicinit.cpp", 3358, "0");
    }
    *(void *)uint64_t v4 = 0x100E33011FFD00FFLL;
    int v5 = 35089;
    char v6 = -4;
  }
  uint64_t result = BlueFin::GlMeSrdAsicinit::Bri_SendAsicData(this, v4);
  ++*((_DWORD *)this + 187);
  return result;
}

void BlueFin::GlMeSrdRfInit4777::ProgramNotchFilter4777x(BlueFin::GlMeSrdRfInit4777 *this, BlueFin::GlMeSrdTransaction *a2)
{
  *(void *)uint64_t v7 = 0;
  BlueFin::GlMeSrdRfInit4777::ProgramNotchFilter4777Band(this, a2, 1, &v7[1], v7);
  BlueFin::GlMeSrdRfInit4777::ProgramNotchFilter4777Band(this, a2, 2, &v7[1], v7);
  BlueFin::GlMeSrdRfInit4777::ProgramNotchFilter4777Band(this, a2, 3, &v7[1], v7);
  BlueFin::GlMeSrdRfInit4777::ProgramNotchFilter4777Band(this, a2, 4, &v7[1], v7);
  BlueFin::GlMeSrdRfInit4777::ProgramNotchFilter4777Band(this, a2, 5, &v7[1], v7);
  if (v7[1])
  {
    int v5 = (BlueFin::GlMeSrdRfInit4777 *)(*(uint64_t (**)(void))(**(void **)this + 1176))(*(void *)this);
    if (v5 == 3) {
      char v6 = 40;
    }
    else {
      char v6 = 36;
    }
    uint64_t v4 = (BlueFin::GlMeSrdRfInit4777 *)BlueFin::GlMeSrdRfInit4777::SendNotchRpc(v5, a2, v6);
  }
  if (v7[0])
  {
    BlueFin::GlMeSrdRfInit4777::SendNotchRpc(v4, a2, 56);
  }
}

void BlueFin::GlMeSrdRfInit4777::ProgramNotchFilter4777Band(void *a1, BlueFin::GlMeSrdTransaction *a2, int a3, _DWORD *a4, _DWORD *a5)
{
  v13[1] = *MEMORY[0x263EF8340];
  v13[0] = 0;
  __int16 v12 = 0;
  unsigned __int8 v11 = 0;
  unsigned int v9 = (unsigned __int8 *)(*(uint64_t (**)(void))(*(void *)*a1 + 1072))(*a1);
  BlueFin::GlMeSrdRfInit4777::GetNotchConfiguration((uint64_t)v9, v9, (uint64_t)v13, (uint64_t)&v12, &v11, a3);
  BlueFin::GlMeSrdRfInit4777::ProgramNotchMinnow(v10, a2, (int *)v13, (uint64_t)&v12, v11, a3, a4, a5);
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetNotchFiltersConfiguration(BlueFin::GlMeSrdAsicConfig *this)
{
  return (uint64_t)this + 76;
}

void BlueFin::GlMeSrdRfInit4777::GetNotchConfiguration(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, unsigned char *a5, int a6)
{
  unint64_t v6 = 0;
  unint64_t v7 = 0;
  do
  {
    if (*a2 == a6)
    {
      unsigned int v8 = a2[1];
      if (v8 >= 0xF)
      {
        DeviceFaultNotify("glmesrd_rfinit_minnow.cpp", 1491, "GetNotchConfiguration", (char)"rstNotches[i].ucLoopCoefficient<15");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_rfinit_minnow.cpp", 1491, "rstNotches[i].ucLoopCoefficient<15");
      }
      *(_DWORD *)(a3 + 4 * v7) = *((_DWORD *)a2 + 1);
      *(unsigned char *)(a4 + v7++) = v8;
    }
    if (v6 > 0x16) {
      break;
    }
    ++v6;
    a2 += 8;
  }
  while (v7 < 2);
  *a5 = v7;
}

void BlueFin::GlMeSrdRfInit4777::ProgramNotchMinnow(uint64_t a1, BlueFin::GlMeSrdTransaction *a2, int *a3, uint64_t a4, unsigned int a5, int a6, _DWORD *a7, _DWORD *a8)
{
  if (a5)
  {
    unsigned int v11 = a6 & 0xFFFFFFFE;
    switch(a6)
    {
      case 1:
        if (a5 == 1) {
          int v12 = 268500992;
        }
        else {
          int v12 = 269549568;
        }
        *a7 |= v12;
        char v13 = 0;
        char v14 = 4;
        char v15 = 8;
        double v16 = -0.0000000088817842;
        break;
      case 2:
        if (a5 == 1) {
          int v17 = 268435712;
        }
        else {
          int v17 = 268439808;
        }
        *a7 |= v17;
        char v13 = 12;
        char v14 = 16;
        char v15 = 20;
        double v16 = -3769597.2;
        break;
      case 3:
        if (a5 == 1) {
          int v18 = 268435457;
        }
        else {
          int v18 = 268435473;
        }
        *a7 |= v18;
        char v13 = 24;
        char v14 = 28;
        char v15 = 32;
        double v16 = 852798.599;
        break;
      case 4:
        char v13 = 44;
        *a7 |= 0x20000000u;
        if (a5 == 1) {
          int v19 = 256;
        }
        else {
          int v19 = 4352;
        }
        *a8 |= v19;
        char v14 = 48;
        char v15 = 52;
        double v16 = -15461453.6;
        break;
      case 5:
        char v13 = 44;
        *a7 |= 0x20000000u;
        if (a5 == 1) {
          int v20 = 256;
        }
        else {
          int v20 = 4352;
        }
        *a8 |= v20;
        char v14 = 48;
        char v15 = 52;
        double v16 = 15228546.4;
        break;
      default:
        DeviceFaultNotify("glmesrd_rfinit_minnow.cpp", 1426, "ProgramNotchMinnow", (char)"0");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_rfinit_minnow.cpp", 1426, "0");
    }
    double v21 = v16 + (double)*a3;
    unsigned int v22 = (BlueFin::GlMeSrdRfInit4777 *)BlueFin::GlMeSrdRfInit4777::FrequencyToNco((BlueFin::GlMeSrdRfInit4777 *)(v11 == 4), -v21);
    uint64_t v23 = (BlueFin::GlMeSrdRfInit4777 *)BlueFin::GlMeSrdRfInit4777::SendNotchRpc(v22, a2, v13);
    if (a5 >= 2)
    {
      unsigned int v24 = (BlueFin::GlMeSrdRfInit4777 *)BlueFin::GlMeSrdRfInit4777::FrequencyToNco((BlueFin::GlMeSrdRfInit4777 *)(v11 == 4), -(v16 + 0.0 - v21 + (double)a3[1]));
      uint64_t v23 = (BlueFin::GlMeSrdRfInit4777 *)BlueFin::GlMeSrdRfInit4777::SendNotchRpc(v24, a2, v14);
    }
    BlueFin::GlMeSrdRfInit4777::SendNotchRpc(v23, a2, v15);
  }
}

uint64_t BlueFin::PikeEswRpcHrmEncImp::esw_hrm_rpc_set(uint64_t a1, uint64_t a2, int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (a3 >= 11)
  {
    char v13 = "eSegment <= ARAD";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_pike.cpp", 691, "esw_hrm_rpc_set", (char)"eSegment <= ARAD");
    int v14 = 691;
    goto LABEL_6;
  }
  char v7 = a3;
  unsigned int v8 = (unsigned __int16 *)a2;
  char v10 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v15, v16, 1800, v10);
  BlueFin::GlStream::PutU08(v15, v7);
  BlueFin::GlStream::PutU32(v15, a4);
  BlueFin::GlStream::PutU32(v15, a5);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v15);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)v8, 2, 1u, v16, Offset);
  LODWORD(v8) = v8[16];
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v8)
  {
    char v13 = "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_pike.cpp", 702, "esw_hrm_rpc_set", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    int v14 = 702;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_pike.cpp", v14, v13);
  }
  return result;
}

uint64_t BlueFin::GlMeSrdRfInit4777::SendNotchRpc(BlueFin::GlMeSrdRfInit4777 *this, BlueFin::GlMeSrdTransaction *a2, char a3)
{
  if ((a3 & 3) != 0)
  {
    DeviceFaultNotify("glmesrd_rfinit_minnow.cpp", 1344, "SendNotchRpc", (char)"(ulAddr & 0x3)==0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_rfinit_minnow.cpp", 1344, "(ulAddr & 0x3)==0");
  }
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)a2 + 3) + 48))(*((void *)a2 + 3));
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 32))(v3) + 24);

  return v4();
}

uint64_t BlueFin::EswRpcEnc::GetEswHrmRpcIf(BlueFin::EswRpcEnc *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (!v2)
  {
    BlueFin::EswRpcEnc::MakeEswRpcEncoderImp(this);
    uint64_t v2 = *((void *)this + 1);
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)v2 + 32);

  return v3();
}

uint64_t BlueFin::MinnowEswRpcEncoderImp::GetEswHrmRpcIf(BlueFin::MinnowEswRpcEncoderImp *this)
{
  return (uint64_t)this + 40;
}

uint64_t BlueFin::GlMeSrdRfInit4777::FrequencyToNco(BlueFin::GlMeSrdRfInit4777 *this, double a2)
{
  double v2 = 16554325.7;
  if (this) {
    double v2 = 99325954.5;
  }
  double v3 = fabs(a2);
  if (v3 >= v2 * 0.5) {
    double v3 = v2 * 0.5;
  }
  if (a2 >= 0.0) {
    double v4 = v3;
  }
  else {
    double v4 = -v3;
  }
  double v5 = v4 * 1048576.0 / v2;
  double v6 = fmod(v5, 4294967300.0);
  if (v5 <= 4294967300.0) {
    double v6 = v5;
  }
  if (v6 < -4294967300.0) {
    double v6 = -fmod(-v6, 4294967300.0);
  }
  if (v6 < 0.0) {
    return --v6;
  }
  else {
    return v6;
  }
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetRadioPerfMode(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 2184);
}

uint64_t BlueFin::GlPeRtiRequestor::OnHeartBeat(BlueFin::GlPeRtiRequestor *this, uint64_t a2)
{
  uint64_t v3 = MEMORY[0x270FA5388](this, a2);
  uint64_t v58 = *MEMORY[0x263EF8340];
  uint64_t result = *(void *)(v3 + 224);
  if (*(_DWORD *)(*(void *)(result + 6288) + 120012) != 1
    && !*(unsigned char *)(result + 31648)
    && !*(unsigned char *)(result + 31688))
  {
    unsigned int v5 = v2;
    uint64_t result = BlueFin::QHsm::isIn(result, (uint64_t (*)(uint64_t, unsigned __int8 *))BlueFin::GlReqSm::warmstandbystate);
    if (!result && !*(unsigned char *)(*(void *)(v3 + 224) + 31744))
    {
      int v6 = BlueFin::GlPeRtiRequestHelper::OnHeartBeat((BlueFin::GlPeRtiRequestHelper *)(v3 + 32), v5);
      if (v6 != 2)
      {
        if (v6 == 1 && *(void *)(v3 + 8))
        {
          GlCustomLog(14, "REQ_RTI\n");
          bzero(&v19, 0x38A8uLL);
          LODWORD(v19) = 32;
          uint64_t v13 = *(void *)(v3 + 8);
          int v14 = *(void (**)(void, void **))(v13 + 128);
          if (v14) {
            v14(*(void *)(v13 + 8), &v19);
          }
        }
        return BlueFin::GlPeSvHealthMgr::OnHeartBeat(*(BlueFin::GlPeSvHealthMgr **)(v3 + 16), v5, v7, v8, v9, v10, v11, v12, (uint64_t)v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1),
                 v25,
                 *((uint64_t *)&v25 + 1),
                 v26,
                 *((uint64_t *)&v26 + 1),
                 *(uint64_t *)v27,
                 *(uint64_t *)&v27[8],
                 *(uint64_t *)&v27[16],
                 *(int *)&v27[24],
                 v28,
                 v29,
                 v30,
                 v31,
                 v32,
                 v33,
                 v34,
                 v35,
                 v36,
                 v37,
                 v38,
                 v39,
                 v40,
                 v41,
                 v42,
                 v43,
                 v44,
                 v45,
                 v46,
                 v47,
                 v48,
                 v49,
                 v50,
                 v51,
                 v52,
                 v53,
                 v54,
                 v55,
                 v56,
                 v57);
      }
      int v19 = &unk_270EC19B8;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      memset(v27, 0, sizeof(v27));
      if (!*(unsigned char *)(v3 + 56) || (void **)(v3 + 64) == &v19)
      {
        if (!*(unsigned char *)(v3 + 56)) {
          return BlueFin::GlPeSvHealthMgr::OnHeartBeat(*(BlueFin::GlPeSvHealthMgr **)(v3 + 16), v5, v7, v8, v9, v10, v11, v12, (uint64_t)v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1),
        }
                   v25,
                   *((uint64_t *)&v25 + 1),
                   v26,
                   *((uint64_t *)&v26 + 1),
                   *(uint64_t *)v27,
                   *(uint64_t *)&v27[8],
                   *(uint64_t *)&v27[16],
                   *(int *)&v27[24],
                   v28,
                   v29,
                   v30,
                   v31,
                   v32,
                   v33,
                   v34,
                   v35,
                   v36,
                   v37,
                   v38,
                   v39,
                   v40,
                   v41,
                   v42,
                   v43,
                   v44,
                   v45,
                   v46,
                   v47,
                   v48,
                   v49,
                   v50,
                   v51,
                   v52,
                   v53,
                   v54,
                   v55,
                   v56,
                   v57);
      }
      else
      {
        long long v15 = *(_OWORD *)(v3 + 152);
        long long v16 = *(_OWORD *)(v3 + 184);
        long long v26 = *(_OWORD *)(v3 + 168);
        *(_OWORD *)float v27 = v16;
        *(void *)&v27[16] = *(void *)(v3 + 200);
        long long v17 = *(_OWORD *)(v3 + 88);
        long long v18 = *(_OWORD *)(v3 + 120);
        long long v22 = *(_OWORD *)(v3 + 104);
        long long v23 = v18;
        long long v24 = *(_OWORD *)(v3 + 136);
        long long v25 = v15;
        long long v20 = *(_OWORD *)(v3 + 72);
        long long v21 = v17;
        *(_DWORD *)&v27[24] = *(_DWORD *)(v3 + 208);
      }
      BlueFin::GlPeSvHealthHelper::OnNewIntegrityInfo((unsigned char *)(*(void *)(v3 + 16) + 32), (uint64_t)&v20, v7, v8, v9, v10, v11, v12, (uint64_t)v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1),
        v25,
        *((uint64_t *)&v25 + 1),
        v26,
        *((uint64_t *)&v26 + 1),
        *(uint64_t *)v27,
        *(uint64_t *)&v27[8],
        *(uint64_t *)&v27[16],
        *(unsigned int *)&v27[24],
        v28);
      return BlueFin::GlPeSvHealthMgr::OnHeartBeat(*(BlueFin::GlPeSvHealthMgr **)(v3 + 16), v5, v7, v8, v9, v10, v11, v12, (uint64_t)v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1),
               v25,
               *((uint64_t *)&v25 + 1),
               v26,
               *((uint64_t *)&v26 + 1),
               *(uint64_t *)v27,
               *(uint64_t *)&v27[8],
               *(uint64_t *)&v27[16],
               *(int *)&v27[24],
               v28,
               v29,
               v30,
               v31,
               v32,
               v33,
               v34,
               v35,
               v36,
               v37,
               v38,
               v39,
               v40,
               v41,
               v42,
               v43,
               v44,
               v45,
               v46,
               v47,
               v48,
               v49,
               v50,
               v51,
               v52,
               v53,
               v54,
               v55,
               v56,
               v57);
    }
  }
  return result;
}

uint64_t BlueFin::GlPeRtiRequestHelper::OnHeartBeat(BlueFin::GlPeRtiRequestHelper *this, int a2)
{
  int v2 = *((_DWORD *)this + 5);
  unsigned int v3 = (a2 - v2) / 0x3E8u;
  *((_DWORD *)this + 5) = v2 + 1000 * v3;
  if (*((unsigned char *)this + 24))
  {
    int v4 = *((_DWORD *)this + 44);
    if (__CFADD__(v4, v3))
    {
      *((unsigned char *)this + 24) = 0;
      *(_OWORD *)((char *)this + 40) = 0u;
      *(_OWORD *)((char *)this + 56) = 0u;
      *(_OWORD *)((char *)this + 72) = 0u;
      *(_OWORD *)((char *)this + 88) = 0u;
      *(_OWORD *)((char *)this + 104) = 0u;
      *(_OWORD *)((char *)this + 120) = 0u;
      *(_OWORD *)((char *)this + 136) = 0u;
      *(_OWORD *)((char *)this + 152) = 0u;
      char v5 = 1;
      *(_OWORD *)((char *)this + 164) = 0u;
    }
    else
    {
      char v5 = 0;
      *((_DWORD *)this + 44) = v4 + v3;
    }
  }
  else
  {
    char v5 = 1;
  }
  if (!*((unsigned char *)this + 9)) {
    *((_WORD *)this + 4) = 257;
  }
  if (*((unsigned char *)this + 11)) {
    BOOL v6 = (a2 - *((_DWORD *)this + 4)) < *((_DWORD *)this + 3);
  }
  else {
    BOOL v6 = 0;
  }
  uint64_t v7 = 0;
  if (*((unsigned char *)this + 8) && !v6)
  {
    if ((v5 & 1) != 0 || *((_DWORD *)this + 44) >= *((_DWORD *)this + 46))
    {
      if (*((unsigned char *)this + 11)) {
        *((_DWORD *)this + 3) = (2 * (*((_DWORD *)this + 3) & 0x7FFFFF)) | 1;
      }
      uint64_t v7 = 1;
      *((unsigned char *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 1;
      *((_DWORD *)this + 4) = a2;
    }
    else
    {
      *((unsigned char *)this + 8) = 0;
      return 2;
    }
  }
  return v7;
}

unint64_t BlueFin::GlMeSrdAcqMgr::NewAidingAvailable(BlueFin::GlMeSrdAcqMgr *this)
{
  if (!*((unsigned char *)this + 104))
  {
    DeviceFaultNotify("glmesrd_acq_mgr.cpp", 432, "NewAidingAvailable", (char)"m_bAllocated");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_acq_mgr.cpp", 432, "m_bAllocated");
  }
  __int16 v4 = 67;
  uint64_t v1 = *((void *)this + 1);
  uint64_t v2 = *(void *)(v1 + 32);
  unint64_t result = *(void *)(v1 + 8);
  *(void *)(v1 + 32) = result;
  do
  {
    unint64_t v5 = 0;
    if (BlueFin::patch_dispatch(result, v1, (unsigned __int8 *)&v4, &v5)) {
      unint64_t result = v5;
    }
    else {
      unint64_t result = (*(uint64_t (**)(uint64_t, __int16 *))(v1 + 32))(v1, &v4);
    }
    *(void *)(v1 + 32) = result;
  }
  while (result);
  *(void *)(v1 + 32) = v2;
  return result;
}

uint64_t BlueFin::GlMeSrdAcqMgrSm::UpdateSignalAiding(BlueFin::GlMeSrdAcqMgrSm *this)
{
  __int16 v8 = 66;
  uint64_t v2 = *((void *)this + 4);
  unint64_t v3 = *((void *)this + 1);
  *((void *)this + 4) = v3;
  do
  {
    unint64_t v9 = 0;
    if (BlueFin::patch_dispatch(v3, (uint64_t)this, (unsigned __int8 *)&v8, &v9)) {
      unint64_t v3 = v9;
    }
    else {
      unint64_t v3 = (*((uint64_t (**)(BlueFin::GlMeSrdAcqMgrSm *, __int16 *))this + 4))(this, &v8);
    }
    *((void *)this + 4) = v3;
  }
  while (v3);
  *((void *)this + 4) = v2;
  v4.n128_f64[0] = BlueFin::GlMeSrdAidingMgr::SetSignalAiding((BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 240), (int **)this + 2847, (const void **)this + 2877, (const void **)this + 2883, (const void **)this + 2889, (const void **)this + 2865, (const void **)this + 2871);
  uint64_t v5 = 0;
  BOOL v6 = (char *)this + 22688;
  do
  {
    uint64_t result = (*(uint64_t (**)(void, __n128))(**(void **)&v6[v5] + 48))(*(void *)&v6[v5], v4);
    v5 += 8;
  }
  while (v5 != 80);
  return result;
}

uint64_t (*BlueFin::GlMeSrdAcqMgrSm::idle(uint64_t a1, unsigned __int8 *a2))()
{
  int v2 = *a2;
  if ((v2 - 2) < 2) {
    return 0;
  }
  if (v2 == 66)
  {
    if (BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(a1 + 22776)))
    {
      *(unsigned char *)(a1 + 10440) = 10;
      *(unsigned char *)(a1 + 10920) = 10;
      uint64_t v5 = (BlueFin::GlSetBase *)(*(uint64_t (**)(void))(**(void **)(a1 + 40) + 64))(*(void *)(a1 + 40));
      BOOL v6 = !BlueFin::GlSetBase::HasAny(v5)
        && ((*(uint64_t (**)(void))(**(void **)(a1 + 64) + 32))(*(void *)(a1 + 64)) & 1) == 0
        && !*(unsigned char *)(a1 + 24665);
      *(unsigned char *)(a1 + 24608) = v6;
      BlueFin::GlMeSrdAcqMgrSm::UpdateSmFirstFixStates((BlueFin::GlMeSrdAcqMgrSm *)a1);
    }
    return 0;
  }
  return BlueFin::QHsm::top;
}

double BlueFin::GlMeSrdAidingMgr::SetSignalAiding(BlueFin::GlMeSrdAidingMgr *this, int **a2, const void **a3, const void **a4, const void **a5, const void **a6, const void **a7)
{
  uint64_t v10 = (char *)this + 1184;
  uint64_t v11 = (char *)this + 784;
  BlueFin::GlSvIdSet::operator~((const void **)this + 98, (uint64_t)v22);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v23, (unsigned int *)v24, 8u, v22);
  char v28 = &v30;
  char v29 = 8;
  long long v30 = 0u;
  long long v31 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v23, (int **)&v28, a2);
  BlueFin::GlSetBase::operator=((uint64_t)&v23, (uint64_t)&v28);
  v24[0] = v30;
  v24[1] = v31;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v25, (unsigned int *)&v26, 8u, &v23);
  char v28 = &v30;
  char v29 = 8;
  long long v30 = 0u;
  long long v31 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v25, (int **)&v28, (int **)this + 154);
  BlueFin::GlSetBase::operator=((uint64_t)&v25, (uint64_t)&v28);
  long long v26 = v30;
  *(_OWORD *)float v27 = v31;
  BlueFin::GlSetBase::Add((uint64_t)v10, &v25);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v25, (unsigned int *)&v26, 8u, (const void **)a2);
  char v28 = &v30;
  char v29 = 8;
  long long v30 = 0u;
  long long v31 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v25, (int **)&v28, (int **)this + 154);
  BlueFin::GlSetBase::operator=((uint64_t)&v25, (uint64_t)&v28);
  long long v26 = v30;
  *(_OWORD *)float v27 = v31;
  BlueFin::GlSetBase::operator=((uint64_t)v11, (uint64_t)&v25);
  *(_OWORD *)(v11 + 12) = v26;
  *(_OWORD *)(v11 + 28) = *(_OWORD *)v27;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v25, (unsigned int *)&v26, 8u, a3);
  char v28 = &v30;
  char v29 = 8;
  long long v30 = 0u;
  long long v31 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v25, (int **)&v28, (int **)this + 154);
  BlueFin::GlSetBase::operator=((uint64_t)&v25, (uint64_t)&v28);
  long long v26 = v30;
  *(_OWORD *)float v27 = v31;
  uint64_t v12 = BlueFin::GlSetBase::operator=((uint64_t)this + 832, (uint64_t)&v25);
  *(_OWORD *)(v12 + 12) = v26;
  *(_OWORD *)(v12 + 28) = *(_OWORD *)v27;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v25, (unsigned int *)&v26, 8u, a4);
  char v28 = &v30;
  char v29 = 8;
  long long v30 = 0u;
  long long v31 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v25, (int **)&v28, (int **)this + 154);
  BlueFin::GlSetBase::operator=((uint64_t)&v25, (uint64_t)&v28);
  long long v26 = v30;
  *(_OWORD *)float v27 = v31;
  uint64_t v13 = BlueFin::GlSetBase::operator=((uint64_t)this + 880, (uint64_t)&v25);
  *(_OWORD *)(v13 + 12) = v26;
  *(_OWORD *)(v13 + 28) = *(_OWORD *)v27;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v25, (unsigned int *)&v26, 8u, a5);
  char v28 = &v30;
  char v29 = 8;
  long long v30 = 0u;
  long long v31 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v25, (int **)&v28, (int **)this + 154);
  BlueFin::GlSetBase::operator=((uint64_t)&v25, (uint64_t)&v28);
  long long v26 = v30;
  *(_OWORD *)float v27 = v31;
  uint64_t v14 = BlueFin::GlSetBase::operator=((uint64_t)this + 928, (uint64_t)&v25);
  *(_OWORD *)(v14 + 12) = v26;
  *(_OWORD *)(v14 + 28) = *(_OWORD *)v27;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v25, (unsigned int *)&v26, 8u, a6);
  char v28 = &v30;
  char v29 = 8;
  long long v30 = 0u;
  long long v31 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v25, (int **)&v28, (int **)this + 154);
  BlueFin::GlSetBase::operator=((uint64_t)&v25, (uint64_t)&v28);
  long long v26 = v30;
  *(_OWORD *)float v27 = v31;
  uint64_t v15 = BlueFin::GlSetBase::operator=((uint64_t)this + 976, (uint64_t)&v25);
  *(_OWORD *)(v15 + 12) = v26;
  *(_OWORD *)(v15 + 28) = *(_OWORD *)v27;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v25, (unsigned int *)&v26, 8u, a7);
  char v28 = &v30;
  char v29 = 8;
  long long v30 = 0u;
  long long v31 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v25, (int **)&v28, (int **)this + 154);
  BlueFin::GlSetBase::operator=((uint64_t)&v25, (uint64_t)&v28);
  long long v26 = v30;
  *(_OWORD *)float v27 = v31;
  uint64_t v16 = BlueFin::GlSetBase::operator=((uint64_t)this + 1024, (uint64_t)&v25);
  *(_OWORD *)(v16 + 12) = v26;
  double result = v27[0];
  *(_OWORD *)(v16 + 28) = *(_OWORD *)v27;
  return result;
}

unint64_t BlueFin::GlMeSrdAcqMgrSm::UpdateStateMachineTransitions(BlueFin::GlMeSrdAcqMgrSm *this)
{
  BlueFin::GlMeSrdAcqMgrSm::UpdateClockModelState(this);
  __int16 v4 = 70;
  uint64_t v2 = *((void *)this + 4);
  unint64_t result = *((void *)this + 1);
  *((void *)this + 4) = result;
  do
  {
    unint64_t v5 = 0;
    if (BlueFin::patch_dispatch(result, (uint64_t)this, (unsigned __int8 *)&v4, &v5)) {
      unint64_t result = v5;
    }
    else {
      unint64_t result = (*((uint64_t (**)(BlueFin::GlMeSrdAcqMgrSm *, __int16 *))this + 4))(this, &v4);
    }
    *((void *)this + 4) = result;
  }
  while (result);
  *((void *)this + 4) = v2;
  return result;
}

uint64_t (*(*BlueFin::GlMeSrdAcqMgrSm::assisted(BlueFin::GlMeSrdAcqMgrSm *this, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm **this, unsigned __int8 *a2))()
{
  unint64_t v3 = (char *)this + 11400;
  unsigned int v4 = *a2;
  unint64_t result = BlueFin::GlMeSrdAcqMgrSm::first_fix;
  if (v4 <= 0x40)
  {
    BOOL v6 = (char *)this + 24628;
    if (v4 == 2)
    {
      *BOOL v6 = 1;
      unint64_t v9 = (BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 11088);
      *unint64_t v3 = 3;
      if ((*(unsigned int (**)(void))(**((void **)this + 8) + 1200))(*((void *)this + 8))) {
        int v10 = 250;
      }
      else {
        int v10 = 84;
      }
      BlueFin::GlMeSrdSearchMgrBase::SetStrategyId((uint64_t)this + 11088, 24, 250, 0xFAu, 0xFAu, 0xFAu, 0xFAu, v10, 0xFAu, 1);
      uint64_t v12 = &v14;
      char v13 = 8;
      long long v14 = 0u;
      long long v15 = 0u;
      uint64_t v11 = (char *)this + 11344;
      BlueFin::GlSetBase::operator=((uint64_t)v11, (uint64_t)&v12);
      *(_OWORD *)(v11 + 12) = v14;
      *(_OWORD *)(v11 + 28) = v15;
      BlueFin::GlMeSrdSearchMgrBase::RemoveInvalidSvId(v9, (BlueFin::GlSvIdSet *)v11);
    }
    else
    {
      if (v4 != 3) {
        return result;
      }
      *BOOL v6 = 0;
      uint64_t v7 = (BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 11088);
      uint64_t v12 = &v14;
      char v13 = 8;
      long long v14 = 0u;
      long long v15 = 0u;
      __int16 v8 = (char *)this + 11344;
      BlueFin::GlSetBase::operator=((uint64_t)v8, (uint64_t)&v12);
      *(_OWORD *)(v8 + 12) = v14;
      *(_OWORD *)(v8 + 28) = v15;
      BlueFin::GlMeSrdSearchMgrBase::RemoveInvalidSvId(v7, (BlueFin::GlSvIdSet *)v8);
      *unint64_t v3 = 0;
      BlueFin::GlMeSrdSearchMgrBase::SetStrategyId((uint64_t)v7, 250, 250, 0xFAu, 0xFAu, 0xFAu, 0xFAu, 250, 0xFAu, 1);
    }
    return 0;
  }
  if (v4 == 65 || v4 == 67)
  {
    if (BlueFin::GlMeSrdAcqMgrSm::IsFirstFix(this) || (v3[13172] & 0x22) == 0) {
      BlueFin::GlMeSrdAcqMgrSm::UpdateSmFirstFixStates(this);
    }
    else {
      BlueFin::GlMeSrdAcqMgrSm::UpdateSmContinuousTrackStates(this);
    }
    return 0;
  }
  return result;
}

uint64_t (*BlueFin::GlMeSrdAcqMgrSm::first_fix(BlueFin::GlMeSrdAcqMgrSm **this, unsigned __int8 *a2))()
{
  unint64_t v3 = (char *)this + 24572;
  unsigned int v4 = *a2;
  unint64_t result = BlueFin::QHsm::top;
  if (v4 <= 0x40)
  {
    if (v4 == 2)
    {
      v3[40] = 0;
      BlueFin::GlMeSrdSearchMgrBase::SetStrategyId((uint64_t)(this + 1506), 250, 250, 0xFAu, 0xFAu, 0xFAu, 0xFAu, 250, 0xFAu, 1);
      BlueFin::GlMeSrdAcqMgrSm::LimitOneTrackPerSv(this[6], 0);
      v3[96] = 1;
    }
    else
    {
      if (v4 != 3) {
        return result;
      }
      BlueFin::GlMeSrdAcqMgrSm::LimitOneTrackPerSv(this[6], 1);
      v3[96] = 0;
    }
    BlueFin::GlMeSrdSearchMgrBase::SetStrategyId((uint64_t)(this + 1623), 25, 46, 0x3Bu, 0x3Cu, 0x47u, 0xFAu, 84, 0x3Bu, 1);
  }
  else
  {
    if (v4 == 65 || v4 == 67)
    {
      if (BlueFin::GlMeSrdAcqMgrSm::IsFirstFix((BlueFin::GlMeSrdAcqMgrSm *)this) || (*v3 & 0x22) == 0)
      {
        BlueFin::GlMeSrdAcqMgrSm::UpdateSmFirstFixStates((BlueFin::GlMeSrdAcqMgrSm *)this);
        return 0;
      }
    }
    else
    {
      if (v4 != 70) {
        return result;
      }
      if (BlueFin::GlMeSrdAcqMgrSm::IsFirstFix((BlueFin::GlMeSrdAcqMgrSm *)this) || (*v3 & 0x22) == 0) {
        return 0;
      }
    }
    BlueFin::GlMeSrdAcqMgrSm::UpdateSmContinuousTrackStates((BlueFin::GlMeSrdAcqMgrSm *)this);
  }
  return 0;
}

uint64_t (*(*(*BlueFin::GlMeSrdAcqMgrSm::assisted_100(uint64_t a1, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm *this, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm **this, unsigned __int8 *a2))()
{
  int v2 = *a2;
  if (v2 == 3) {
    return 0;
  }
  if (v2 == 2)
  {
    int v4 = 90;
    if (((*(uint64_t (**)(void))(**(void **)(a1 + 64) + 1200))(*(void *)(a1 + 64)) & 1) == 0)
    {
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 80) + 40))(*(void *)(a1 + 80))) {
        int v4 = 90;
      }
      else {
        int v4 = 84;
      }
    }
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 64) + 1200))(*(void *)(a1 + 64))) {
      int v5 = 90;
    }
    else {
      int v5 = 84;
    }
    v6.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 10128, 5, 31, 0x32u, 0x3Fu, 0xFAu, 0x2Fu, v5, 0x5Fu, 1);
    if ((*(unsigned int (**)(__n128))(**(void **)(a1 + 64) + 1200))(v6)) {
      int v7 = 250;
    }
    else {
      int v7 = 84;
    }
    double v8 = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 10608, 4, 30, 0x32u, 0x3Fu, 0x49u, 0xFAu, v7, 0xFAu, 1);
    unsigned int v9 = 76;
    if (*(unsigned char *)(a1 + 24669))
    {
      if ((*(unsigned int (**)(void, double))(**(void **)(a1 + 64) + 264))(*(void *)(a1 + 64), v8)) {
        unsigned int v9 = 91;
      }
      else {
        unsigned int v9 = 76;
      }
    }
    BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12360, 14, 33, 0x38u, 0x42u, v9, 0xFAu, v4, 0x57u, 1);
    BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12672, 14, 33, 0x38u, 0x42u, 0x4Cu, 0xFAu, v4, 0x57u, 1);
    return 0;
  }
  return BlueFin::GlMeSrdAcqMgrSm::assisted;
}

BOOL BlueFin::GlMeSrdAcqMgrSm::IsFirstFix(BlueFin::GlMeSrdAcqMgrSm *this)
{
  uint64_t v1 = (unsigned int *)((char *)this + 22768);
  int v2 = *((unsigned __int8 *)this + 24613);
  if (*((unsigned char *)this + 24613))
  {
    if (*v1 < 0x7531)
    {
      int v2 = 1;
    }
    else
    {
      float v15 = 0.0;
      (*(void (**)(void))(**((void **)this + 5) + 48))(*((void *)this + 5));
      float v14 = 0.0;
      (*(void (**)(void, void, float *, uint64_t))(**((void **)this + 5) + 48))(*((void *)this + 5), *v1, &v14, 1);
      v6[0] = &unk_270EBF258;
      v6[1] = 0;
      uint64_t v7 = 0x36A7C5AC00000000;
      uint64_t v8 = 0;
      int v9 = 2139095039;
      uint64_t v10 = 0;
      int v11 = 2139095039;
      uint64_t v12 = 0;
      uint64_t v13 = 0x36A7C5AC7F7FFFFFLL;
      (*(void (**)(void, void *, void))(**((void **)this + 5) + 96))(*((void *)this + 5), v6, *v1);
      BOOL v4 = v14 < 0.00000005 || v15 < 0.00000005;
      if (v4 && *((float *)&v7 + 1) < 0.00000001)
      {
        int v2 = 0;
        *((unsigned char *)v1 + 1845) = 0;
      }
      else
      {
        int v2 = *((unsigned __int8 *)v1 + 1845);
      }
    }
  }
  return v2 != 0;
}

void BlueFin::GlMeSrdAcqMgrSm::UpdateClockModelState(BlueFin::GlMeSrdAcqMgrSm *this)
{
  int v2 = (float *)((char *)this + 24568);
  long long v33 = &unk_270EBF258;
  uint64_t v34 = 0;
  uint64_t v35 = 0x36A7C5AC00000000;
  double v36 = 0.0;
  int v37 = 2139095039;
  double v38 = 0.0;
  int v39 = 2139095039;
  double v40 = 0.0;
  uint64_t v41 = 0x36A7C5AC7F7FFFFFLL;
  (*(void (**)(void, void **, void))(**((void **)this + 5) + 96))(*((void *)this + 5), &v33, *((unsigned int *)this + 5692));
  int v3 = v34;
  LOWORD(v4) = 5000;
  if ((v34 & 0x10) != 0 && *((float *)&v35 + 1) > 0.0 && *((float *)&v35 + 1) < 0.000005)
  {
    float v5 = (float)(*((float *)&v35 + 1) * 1000000000.0) + 0.5;
    float v6 = fmodf(v5, 4295000000.0);
    if (v5 <= 4295000000.0) {
      float v6 = v5;
    }
    if (v6 < -4295000000.0) {
      float v6 = -fmodf(-v6, 4295000000.0);
    }
    unsigned int v4 = v6;
    if (v6 < 0.0) {
      unsigned int v4 = -(float)-v6;
    }
  }
  uint64_t v7 = 0;
  do
  {
    if (v7 == 4)
    {
      int v12 = *(_DWORD *)v2;
      goto LABEL_20;
    }
    int v8 = v7 + 1;
    int v9 = word_263BABE90[++v7];
  }
  while ((__int16)v4 - 10 < v9);
  int v10 = word_263BABE90[*(_DWORD *)v2];
  if ((__int16)v4 > v10 + 20 || (__int16)v4 < v10) {
    int v12 = v8 - 1;
  }
  else {
    int v12 = *(_DWORD *)v2;
  }
LABEL_20:
  int v13 = v35;
  if (*(_DWORD *)v2 && vabds_f32(v2[2], *(float *)&v35) > 0.00000002)
  {
    BlueFin::GlMeSrdSearchMgrBase::RestartSATs((uint64_t)this + 12048, (int **)this + 1522);
    BlueFin::GlMeSrdSearchMgrBase::RestartSATs((uint64_t)this + 12360, (int **)this + 1561);
    BlueFin::GlMeSrdSearchMgrBase::RestartSATs((uint64_t)this + 12672, (int **)this + 1600);
    int v13 = v35;
    int v3 = v34;
  }
  *((_DWORD *)v2 + 2) = v13;
  if ((v3 & 8) != 0)
  {
    if (((_BYTE)v2[1] & 8) != 0)
    {
      double SubEpochTime = BlueFin::GlMeSrdAcqMgrSm::GetSubEpochTime(1u, *((double *)this + 3073) - v36);
      if (SubEpochTime > 0.0000244)
      {
        double v15 = SubEpochTime * 1023000.0 * 3.0;
        double v16 = fmod(v15, 4294967300.0);
        if (v15 <= 4294967300.0) {
          double v16 = v15;
        }
        if (v16 < -4294967300.0) {
          double v16 = -fmod(-v16, 4294967300.0);
        }
        if (v16 < 0.0) {
          unsigned int v17 = --v16;
        }
        else {
          LOWORD(v17) = v16;
        }
        unsigned int v18 = (unsigned __int16)v17;
        BlueFin::GlMeSrdSearchMgr::GetGpsSatWithinZoomWindow((BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 12048), (unsigned __int16)v17, (uint64_t)v32);
        BlueFin::GlMeSrdSearchMgrBase::RestartSATs((uint64_t)this + 12048, v32);
        BlueFin::GlMeSrdSearchMgr::GetGpsSatWithinZoomWindow((BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 12360), v18, (uint64_t)v32);
        BlueFin::GlMeSrdSearchMgrBase::RestartSATs((uint64_t)this + 12360, v32);
      }
    }
    *((double *)this + 3073) = v36;
    int v3 = v34;
    if ((v34 & 0x100) == 0)
    {
LABEL_25:
      if ((v3 & 0x400) == 0) {
        goto LABEL_60;
      }
      goto LABEL_49;
    }
  }
  else if ((v3 & 0x100) == 0)
  {
    goto LABEL_25;
  }
  if (*((unsigned char *)v2 + 5))
  {
    double v19 = BlueFin::GlMeSrdAcqMgrSm::GetSubEpochTime(0x34u, *((double *)this + 3074) - v38);
    if (v19 > 0.0000244)
    {
      double v20 = v19 * 511000.0 * 3.0;
      double v21 = fmod(v20, 4294967300.0);
      if (v20 <= 4294967300.0) {
        double v21 = v20;
      }
      if (v21 < -4294967300.0) {
        double v21 = -fmod(-v21, 4294967300.0);
      }
      if (v21 < 0.0) {
        unsigned int v22 = --v21;
      }
      else {
        LOWORD(v22) = v21;
      }
      unsigned int v23 = (unsigned __int16)v22;
      BlueFin::GlMeSrdSearchMgr::GetGlnsSatWithinZoomWindow((BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 12048), (unsigned __int16)v22, (uint64_t)v32);
      BlueFin::GlMeSrdSearchMgrBase::RestartSATs((uint64_t)this + 12048, v32);
      BlueFin::GlMeSrdSearchMgr::GetGlnsSatWithinZoomWindow((BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 12360), v23, (uint64_t)v32);
      BlueFin::GlMeSrdSearchMgrBase::RestartSATs((uint64_t)this + 12360, v32);
    }
  }
  *((double *)this + 3074) = v38;
  int v3 = v34;
  if ((v34 & 0x400) != 0)
  {
LABEL_49:
    if ((*((unsigned char *)v2 + 5) & 4) != 0)
    {
      double v24 = BlueFin::GlMeSrdAcqMgrSm::GetSubEpochTime(0x8Bu, *((double *)this + 3075) - v40);
      if (v24 > 0.0000244)
      {
        double v25 = v24 * 1023000.0 * 3.0;
        double v26 = fmod(v25, 4294967300.0);
        if (v25 <= 4294967300.0) {
          double v26 = v25;
        }
        if (v26 < -4294967300.0) {
          double v26 = -fmod(-v26, 4294967300.0);
        }
        if (v26 < 0.0) {
          unsigned int v27 = --v26;
        }
        else {
          LOWORD(v27) = v26;
        }
        unsigned int v28 = (unsigned __int16)v27;
        BlueFin::GlMeSrdSearchMgr::GetGalSatWithinZoomWindow((BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 12048), (unsigned __int16)v27, (uint64_t)v32);
        BlueFin::GlMeSrdSearchMgrBase::RestartSATs((uint64_t)this + 12048, v32);
        BlueFin::GlMeSrdSearchMgr::GetGalSatWithinZoomWindow((BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 12360), v28, (uint64_t)v32);
        BlueFin::GlMeSrdSearchMgrBase::RestartSATs((uint64_t)this + 12360, v32);
      }
    }
    *((double *)this + 3075) = v40;
    int v3 = v34;
  }
LABEL_60:
  if (v12 != *(_DWORD *)v2 || *((_DWORD *)v2 + 1) != v3)
  {
    *(_DWORD *)int v2 = v12;
    *((_DWORD *)v2 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v3;
    __int16 v31 = 65;
    uint64_t v29 = *((void *)this + 4);
    long long v30 = (int *)*((void *)this + 1);
    *((void *)this + 4) = v30;
    do
    {
      v32[0] = 0;
      if (BlueFin::patch_dispatch((unint64_t)v30, (uint64_t)this, (unsigned __int8 *)&v31, v32)) {
        long long v30 = v32[0];
      }
      else {
        long long v30 = (int *)(*((uint64_t (**)(BlueFin::GlMeSrdAcqMgrSm *, __int16 *))this + 4))(this, &v31);
      }
      *((void *)this + 4) = v30;
    }
    while (v30);
    *((void *)this + 4) = v29;
  }
}

void *BlueFin::GlMeSrdAcqMgrSm::UpdateSmFirstFixStates(BlueFin::GlMeSrdAcqMgrSm *this)
{
  int v2 = (char *)this + 24568;
  int v3 = (char *)this + 22768;
  uint64_t v4 = *((void *)this + 5);
  int v87 = 4;
  (*(void (**)(unint64_t *__return_ptr))(*(void *)v4 + 72))(&v88);
  uint64_t v5 = *((void *)this + 5);
  int v84 = 46;
  (*(void (**)(char **__return_ptr))(*(void *)v5 + 72))(&v85);
  unsigned int v6 = 0;
  uint64_t v7 = &v85[4 * v86 - 4];
  do
  {
    if (*(_DWORD *)v7)
    {
      unsigned int v8 = *(_DWORD *)v7 - (((*(_DWORD *)v7 >> 1) & 0x5B6DB6DB) + ((*(_DWORD *)v7 >> 2) & 0x9249249));
      unsigned int v6 = ((v8 + (v8 >> 3)) & 0xC71C71C7) + v6 - 63 * (((v8 + (v8 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    v7 -= 4;
  }
  while (v7 >= v85);
  unsigned int v9 = 0;
  int v10 = (_DWORD *)(v88 + 4 * v89 - 4);
  do
  {
    if (*v10)
    {
      unsigned int v11 = *v10 - (((*v10 >> 1) & 0x5B6DB6DB) + ((*v10 >> 2) & 0x9249249));
      unsigned int v9 = ((v11 + (v11 >> 3)) & 0xC71C71C7) + v9 - 63 * (((v11 + (v11 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    --v10;
  }
  while ((unint64_t)v10 >= v88);
  BOOL v12 = 1;
  if ((v9 & 0xFC) == 0 && v6 <= 5u) {
    BOOL v12 = v6 + 1 >= BlueFin::GlSetBase::Cnt((BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 22776));
  }
  v83[0] = xmmword_263BAA87C;
  v83[1] = unk_263BAA88C;
  v80[0] = xmmword_263BAA89C;
  v80[1] = unk_263BAA8AC;
  v77[0] = xmmword_263BAA8DC;
  int32x2_t v81 = (int *)v83;
  char v82 = 8;
  float v78 = (int *)v80;
  char v79 = 8;
  uint64_t v75 = (int *)v77;
  char v76 = 8;
  v77[1] = unk_263BAA8EC;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v71, (unsigned int *)&v73, 8u, (const void **)&v85);
  uint64_t v55 = (int *)&v56[4];
  v56[0] = 8;
  memset(&v56[4], 0, 32);
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v71, &v55, &v81);
  BlueFin::GlSetBase::operator=((uint64_t)&v71, (uint64_t)&v55);
  long long v73 = *(_OWORD *)&v56[4];
  long long v74 = *(_OWORD *)&v56[20];
  if (*v71) {
    goto LABEL_13;
  }
  if (v72 < 2uLL)
  {
    BOOL v13 = 0;
  }
  else
  {
    if (v71[1])
    {
LABEL_13:
      BOOL v13 = 1;
      goto LABEL_23;
    }
    uint64_t v14 = 2;
    while (v72 != v14)
    {
      if (v71[v14++])
      {
        unint64_t v16 = v14 - 1;
        goto LABEL_22;
      }
    }
    unint64_t v16 = v72;
LABEL_22:
    BOOL v13 = v16 < v72;
  }
LABEL_23:
  float v64 = (int *)v66;
  char v65 = 8;
  v66[0] = BlueFin::GlSvIdSet::csm_aulGlSvIdSet[0];
  v66[1] = *(_OWORD *)algn_263BAA84C;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v67, (unsigned int *)&v69, 8u, (const void **)&v64);
  uint64_t v55 = (int *)&v56[4];
  v56[0] = 8;
  memset(&v56[4], 0, 32);
  BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v67, &v55, &v78);
  BlueFin::GlSetBase::operator=((uint64_t)&v67, (uint64_t)&v55);
  long long v69 = *(_OWORD *)&v56[4];
  long long v70 = *(_OWORD *)&v56[20];
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v71, (unsigned int *)&v73, 8u, (const void **)&v85);
  uint64_t v55 = (int *)&v56[4];
  v56[0] = 8;
  memset(&v56[4], 0, 32);
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v71, &v55, (int **)&v67);
  BlueFin::GlSetBase::operator=((uint64_t)&v71, (uint64_t)&v55);
  long long v73 = *(_OWORD *)&v56[4];
  long long v74 = *(_OWORD *)&v56[20];
  if (*v71)
  {
LABEL_24:
    BOOL v17 = 1;
    goto LABEL_34;
  }
  if (v72 < 2uLL)
  {
    BOOL v17 = 0;
  }
  else
  {
    if (v71[1]) {
      goto LABEL_24;
    }
    uint64_t v18 = 2;
    while (v72 != v18)
    {
      if (v71[v18++])
      {
        unint64_t v20 = v18 - 1;
        goto LABEL_33;
      }
    }
    unint64_t v20 = v72;
LABEL_33:
    BOOL v17 = v20 < v72;
  }
LABEL_34:
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v71, (unsigned int *)&v73, 8u, (const void **)&v85);
  uint64_t v55 = (int *)&v56[4];
  v56[0] = 8;
  memset(&v56[4], 0, 32);
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v71, &v55, &v75);
  BlueFin::GlSetBase::operator=((uint64_t)&v71, (uint64_t)&v55);
  long long v73 = *(_OWORD *)&v56[4];
  long long v74 = *(_OWORD *)&v56[20];
  if (*v71)
  {
LABEL_35:
    double v21 = v3;
    BOOL v22 = 1;
    goto LABEL_45;
  }
  if (v72 < 2uLL)
  {
    double v21 = v3;
    BOOL v22 = 0;
  }
  else
  {
    if (v71[1]) {
      goto LABEL_35;
    }
    uint64_t v23 = 2;
    while (v72 != v23)
    {
      if (v71[v23++])
      {
        unint64_t v25 = v23 - 1;
        goto LABEL_44;
      }
    }
    unint64_t v25 = v72;
LABEL_44:
    double v21 = v3;
    BOOL v22 = v25 < v72;
  }
LABEL_45:
  unint64_t v26 = *((unsigned int *)v2 + 1);
  int v53 = *(_DWORD *)v2;
  if ((v26 & 0x22) == 0x22)
  {
    LODWORD(v27) = 1;
    if ((v26 & 8) != 0)
    {
LABEL_57:
      BOOL v30 = (v26 & 0x100) == 0 && v13;
      char v29 = 1;
      LODWORD(v54) = 1;
      if (!v30) {
        goto LABEL_67;
      }
      goto LABEL_61;
    }
  }
  else
  {
    if (v13)
    {
      if (v17)
      {
        BOOL v28 = 0;
        if ((v26 & 8) != 0)
        {
          LODWORD(v27) = 0;
          char v29 = 1;
          LODWORD(v54) = 1;
          if ((v26 & 0x100) != 0) {
            goto LABEL_67;
          }
        }
        else
        {
          char v29 = 0;
        }
        goto LABEL_63;
      }
    }
    else
    {
      uint64_t v27 = (v26 >> 1) & 1;
      if (v17 | (*((_DWORD *)v2 + 1) >> 1) & 1)
      {
        if ((v26 & 8) != 0)
        {
          char v29 = 1;
          LODWORD(v54) = 1;
          goto LABEL_67;
        }
        goto LABEL_56;
      }
    }
    uint64_t v27 = (v26 >> 5) & 1;
    if ((v26 & 8) != 0) {
      goto LABEL_57;
    }
  }
LABEL_56:
  char v29 = 0;
LABEL_61:
  if (v17)
  {
    BOOL v28 = v27;
LABEL_63:
    if (!v22)
    {
      LODWORD(v54) = 0;
      LODWORD(v5BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
      goto LABEL_72;
    }
    LODWORD(v27) = v28;
    goto LABEL_66;
  }
  uint64_t v54 = (v26 >> 8) & 1;
  if (!((*((_DWORD *)v2 + 1) >> 8) & 1 | !v22)) {
LABEL_66:
  }
    uint64_t v54 = (v26 >> 10) & 1;
LABEL_67:
  if (v22) {
    uint64_t v51 = (v26 >> 10) & 1;
  }
  else {
    LODWORD(v5BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  }
  BOOL v28 = v27;
LABEL_72:
  if (((*(unsigned int (**)(void))(**((void **)this + 10) + 32))(*((void *)this + 10)) & v12) == 1)
  {
    BOOL v28 = (v26 & 0x22) != 0;
    if (v29) {
      LODWORD(v54) = 1;
    }
    else {
      uint64_t v54 = (v26 >> 8) & 1;
    }
  }
  BOOL v52 = v12;
  int v31 = v2[101];
  float v63 = 0.0;
  (*(void (**)(void, void, float *, void))(**((void **)this + 5) + 48))(*((void *)this + 5), *v21, &v63, 0);
  int v33 = 0;
  if ((*(unsigned int (**)(void))(**((void **)this + 8) + 552))())
  {
    LODWORD(v32) = *v21;
    int v34 = (*(uint64_t (**)(void, double))(**((void **)this + 5) + 136))(*((void *)this + 5), (double)v32);
    if (v63 < 0.0005) {
      int v33 = 1;
    }
    else {
      int v33 = v34;
    }
  }
  v2[101] = v33;
  if (v31 != v33)
  {
    long long v69 = xmmword_263BAA8DC;
    float v67 = &v69;
    char v68 = 8;
    long long v70 = unk_263BAA8EC;
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v71, (unsigned int *)&v73, 8u, (const void **)&v67);
    uint64_t v55 = (int *)&v56[4];
    v56[0] = 8;
    memset(&v56[4], 0, 32);
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v71, &v55, (int **)this + 2847);
    BlueFin::GlSetBase::operator=((uint64_t)&v71, (uint64_t)&v55);
    long long v73 = *(_OWORD *)&v56[4];
    long long v74 = *(_OWORD *)&v56[20];
    BlueFin::GlMeSrdSatTrackMgr::GetSetSvidListTrackingOrAided((BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 14352), (uint64_t)v60);
    BlueFin::GlSvIdSet::operator~(v60, (uint64_t)&v64);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v61, (unsigned int *)v62, 8u, (const void **)&v71);
    uint64_t v55 = (int *)&v56[4];
    v56[0] = 8;
    memset(&v56[4], 0, 32);
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v61, &v55, &v64);
    BlueFin::GlSetBase::operator=((uint64_t)&v61, (uint64_t)&v55);
    v62[0] = *(_OWORD *)&v56[4];
    v62[1] = *(_OWORD *)&v56[20];
    BlueFin::GlMeSrdAidingMgr::ForceAidingRefresh((uint64_t)this + 240, &v61);
  }
  if (*v21 > 0xAFC7u)
  {
    int v36 = 0;
    int v35 = v54;
  }
  else
  {
    int v35 = v54;
    if (v2[96]) {
      int v36 = v28 & v54;
    }
    else {
      int v36 = 0;
    }
  }
  uint64_t v55 = (int *)&unk_270EBF258;
  *(void *)uint64_t v56 = 0;
  *(void *)&unsigned char v56[8] = 0x36A7C5AC00000000;
  *(void *)&v56[16] = 0;
  *(_DWORD *)&v56[24] = 2139095039;
  *(void *)&v56[32] = 0;
  int v57 = 2139095039;
  uint64_t v58 = 0;
  uint64_t v59 = 0x36A7C5AC7F7FFFFFLL;
  (*(void (**)(void, int **))(**((void **)this + 5) + 96))(*((void *)this + 5), &v55);
  int v37 = 0;
  if (*v21 >> 4 <= 0x270u) {
    int v37 = v28 & (v35 ^ 1);
  }
  if (!v2[98])
  {
    if (v52)
    {
      if (v36)
      {
        if ((v53 - 2) >= 2)
        {
          double v40 = (uint64_t (*)())BlueFin::GlMeSrdAcqMgrSm::assisted_300_fta;
          if (v53 == 1) {
            goto LABEL_134;
          }
          if (v53) {
            goto LABEL_145;
          }
LABEL_125:
          int v39 = v2[297];
          goto LABEL_126;
        }
        uint64_t v44 = (uint64_t (*)())BlueFin::GlMeSrdAcqMgrSm::assisted_100_fta;
      }
      else
      {
        if (!v37)
        {
          double v40 = (uint64_t (*)())BlueFin::GlMeSrdAcqMgrSm::assisted_300;
          switch(v53)
          {
            case 0:
              goto LABEL_125;
            case 1:
              goto LABEL_134;
            case 2:
              uint64_t v44 = (uint64_t (*)())BlueFin::GlMeSrdAcqMgrSm::assisted_100;
              goto LABEL_133;
            case 3:
              BOOL v45 = v51 == 0;
              if ((v28 & v35) == 1)
              {
                uint64_t v46 = BlueFin::GlMeSrdAcqMgrSm::assisted_70_bit_zoom;
                uint64_t v47 = BlueFin::GlMeSrdAcqMgrSm::assisted_70_bit_zoom_WithGal;
              }
              else
              {
                uint64_t v46 = BlueFin::GlMeSrdAcqMgrSm::assisted_100;
                uint64_t v47 = BlueFin::GlMeSrdAcqMgrSm::assisted_100_zoom_Gal;
              }
              goto LABEL_119;
            default:
              goto LABEL_145;
          }
        }
        uint64_t v44 = (uint64_t (*)())BlueFin::GlMeSrdAcqMgrSm::assisted_100_rtc;
        if (v53 >= 4) {
          goto LABEL_145;
        }
      }
    }
    else
    {
      uint64_t v44 = (uint64_t (*)())BlueFin::GlMeSrdAcqMgrSm::autonomous_fast_start_300;
      if (!v2[40])
      {
        if ((v53 - 2) >= 2)
        {
          double v40 = (uint64_t (*)())BlueFin::GlMeSrdAcqMgrSm::autonomous_300;
          if (v53 == 1) {
            goto LABEL_134;
          }
          if (v53) {
            goto LABEL_145;
          }
          goto LABEL_106;
        }
        uint64_t v44 = (uint64_t (*)())BlueFin::GlMeSrdAcqMgrSm::autonomous_100;
      }
    }
LABEL_133:
    double v40 = v44;
    goto LABEL_134;
  }
  if (v53 >= 4)
  {
    uint64_t v49 = "eTcxo < NUM_OF_TCXO_STATES";
    DeviceFaultNotify("glmesrd_acq_mgr_sm.cpp", 1056, "GetNextFarStartState", (char)"eTcxo < NUM_OF_TCXO_STATES");
    int v50 = 1056;
    goto LABEL_144;
  }
  double v38 = (BlueFin::GlSetBase *)(*(uint64_t (**)(void))(**((void **)this + 5) + 64))(*((void *)this + 5));
  if (!BlueFin::GlSetBase::HasAny(v38))
  {
    if ((v53 - 2) >= 2)
    {
      double v40 = (uint64_t (*)())BlueFin::GlMeSrdAcqMgrSm::far_start_positionless_300;
      if (v53 == 1) {
        goto LABEL_134;
      }
      if (v53) {
        goto LABEL_145;
      }
LABEL_106:
      int v39 = v2[297];
      goto LABEL_107;
    }
    uint64_t v44 = (uint64_t (*)())BlueFin::GlMeSrdAcqMgrSm::far_start_positionless_100;
    goto LABEL_133;
  }
  if ((v53 - 2) < 2)
  {
    BOOL v45 = !v28;
    uint64_t v46 = BlueFin::GlMeSrdAcqMgrSm::far_start_assisted_100;
    uint64_t v47 = BlueFin::GlMeSrdAcqMgrSm::far_start_assisted_100_bit;
  }
  else
  {
    if (v53 != 1)
    {
      if (!v53)
      {
        int v39 = v2[297];
        if (v52)
        {
LABEL_126:
          BOOL v41 = v39 == 0;
          uint64_t v42 = (uint64_t (*)())BlueFin::GlMeSrdAcqMgrSm::assisted_6000;
          uint64_t v43 = (uint64_t (*)())BlueFin::GlMeSrdAcqMgrSm::assisted_2000;
LABEL_127:
          if (v41) {
            double v40 = v43;
          }
          else {
            double v40 = v42;
          }
          goto LABEL_134;
        }
LABEL_107:
        BOOL v41 = v39 == 0;
        uint64_t v42 = (uint64_t (*)())BlueFin::GlMeSrdAcqMgrSm::autonomous_6000;
        uint64_t v43 = (uint64_t (*)())BlueFin::GlMeSrdAcqMgrSm::autonomous_2000;
        goto LABEL_127;
      }
LABEL_145:
      uint64_t v49 = "nextState != (QSTATE)&GlMeSrdAcqMgrSm::top";
      DeviceFaultNotify("glmesrd_acq_mgr_sm.cpp", 1318, "UpdateSmFirstFixStates", (char)"nextState != (QSTATE)&GlMeSrdAcqMgrSm::top");
      int v50 = 1318;
LABEL_144:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_acq_mgr_sm.cpp", v50, v49);
    }
    BOOL v45 = !v28;
    uint64_t v46 = BlueFin::GlMeSrdAcqMgrSm::far_start_assisted_300;
    uint64_t v47 = BlueFin::GlMeSrdAcqMgrSm::far_start_assisted_300_bit;
  }
LABEL_119:
  if (v45) {
    double v40 = (uint64_t (*)())v46;
  }
  else {
    double v40 = (uint64_t (*)())v47;
  }
LABEL_134:
  if (v40 == BlueFin::QHsm::top) {
    goto LABEL_145;
  }
  unint64_t result = (void *)BlueFin::QHsm::isIn((uint64_t)this, (uint64_t (*)(uint64_t, unsigned __int8 *))v40);
  if (!result) {
    return BlueFin::QHsm::tran(this, v40, (uint64_t)"UpdateSmFirstFixStates");
  }
  if (v31 != v33)
  {
    unint64_t result = (void *)BlueFin::QHsm::isIn((uint64_t)this, (uint64_t (*)(uint64_t, unsigned __int8 *))BlueFin::GlMeSrdAcqMgrSm::autonomous_fast_start_300);
    if (!result) {
      return BlueFin::QHsm::tran(this, v40, (uint64_t)"UpdateSmFirstFixStates");
    }
  }
  return result;
}

unsigned __int8 *BlueFin::GlMeAcqWindowProvider::GetAidSvLstBySrc@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8) + 352;
  unsigned int v5 = *a2;
  return BlueFin::GlMeSatAidMgr::GetAidSvLstBySrc(v3, &v5, a3);
}

unsigned __int8 *BlueFin::GlMeSatAidMgr::GetAidSvLstBySrc@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 12) = 0u;
  uint64_t v5 = a3 + 12;
  *(void *)a3 = a3 + 12;
  *(unsigned char *)(a3 + 8) = 8;
  *(_OWORD *)(a3 + 28) = 0u;
  unsigned __int8 v13 = *(unsigned char *)(a1 + 8936);
  memcpy(v17, *(const void **)(a1 + 8928), 4 * v13);
  __int16 v15 = 0;
  unsigned __int8 v14 = 0;
  int v16 = v17[0];
  unint64_t result = BlueFin::GlSetIterator::operator++(&v13);
  if (v14 != v13)
  {
    uint64_t v7 = *(unsigned __int8 **)(a1 + 8808);
    int v8 = *v7;
    unint64_t v9 = *a2;
    do
    {
      if (v8 == v15)
      {
        uint64_t v10 = 0;
      }
      else
      {
        uint64_t v10 = 0;
        unsigned int v11 = v7 + 96;
        do
        {
          ++v10;
          int v12 = *v11;
          v11 += 96;
        }
        while (v12 != v15);
      }
      if ((v9 >> *(_WORD *)&v7[96 * v10 + 12])) {
        *(_DWORD *)(v5 + (((unint64_t)v15 >> 3) & 0x1C)) |= 1 << v15;
      }
      unint64_t result = BlueFin::GlSetIterator::operator++(&v13);
    }
    while (v14 != v13);
  }
  return result;
}

void BlueFin::GlMeAcqWindowProvider::GetClkMod(BlueFin::GlMeAcqWindowProvider *this, BlueFin::GlMeClkMod *a2, uint64_t CurrTimeLms)
{
  uint64_t v4 = *((void *)this + 1);
  if (!CurrTimeLms) {
    CurrTimeLms = BlueFin::GlMeMsmtMgr::GetCurrTimeLms((BlueFin::GlMeMsmtMgr *)(v4 + 10624));
  }

  BlueFin::GlMeClkModMgr::GetClkMod((BlueFin::GlMeClkModMgr *)(v4 + 176), a2, CurrTimeLms);
}

uint64_t BlueFin::QHsm::isIn(uint64_t a1, uint64_t (*a2)(uint64_t, unsigned __int8 *))
{
  uint64_t v4 = *(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 8);
  while (v4 != a2)
  {
    if (BlueFin::patch_trigger((unint64_t)v4, a1, BlueFin::__pkgStdEvt, &BlueFin::_patched_state))
    {
      uint64_t v4 = (uint64_t (*)(uint64_t, unsigned __int8 *))BlueFin::_patched_state;
      if (!BlueFin::_patched_state) {
        return 0;
      }
    }
    else
    {
      uint64_t v4 = (uint64_t (*)(uint64_t, unsigned __int8 *))v4(a1, BlueFin::__pkgStdEvt);
      if (!v4) {
        return 0;
      }
    }
  }
  return 1;
}

uint64_t (*(*(*BlueFin::GlReqSm::processing(BlueFin::GlReqSm *this, unsigned char *a2))(uint64_t a1, unsigned __int8 *a2))(BlueFin::GlReqSm *this, const char *a2))()
{
  unint64_t result = 0;
  uint64_t v5 = (char *)this + 6464;
  switch(*a2)
  {
    case 2:
      *((void *)this + 3967) = this;
      BlueFin::GlTimer::arm((BlueFin::GlReqSm *)((char *)this + 31704), 34, 0, 1u);
      *((unsigned char *)this + 31728) = 1;
      int MinimumPeriod = BlueFin::GlPeReqBag::GetMinimumPeriod((BlueFin::GlReqSm *)((char *)this + 10880));
      *((void *)this + 6705) = this;
      BlueFin::GlTimer::arm((BlueFin::GlReqSm *)((char *)this + 53608), 31, 0, MinimumPeriod + 10000);
      *((unsigned char *)this + 53632) = 1;
      unsigned int v11 = *(_DWORD *)(*((void *)this + 784) + 820);
      int v12 = (BlueFin::GlReqSm *)((char *)this + 53976);
      if (v11)
      {
        *((void *)this + 675BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = this;
        BlueFin::GlTimer::arm(v12, 36, 0, v11);
        *((unsigned char *)this + 54000) = 2;
      }
      else
      {
        BlueFin::GlTimer::disarm((uint64_t)v12);
      }
      unint64_t result = *(uint64_t (*(*(**)(uint64_t, unsigned __int8 *))(BlueFin::GlReqSm *, const char *))())(*((void *)this + 783) + 48);
      if (!result) {
        return result;
      }
      (*(void (**)(uint64_t (*(*(*)(uint64_t, unsigned __int8 *))(BlueFin::GlReqSm *, const char *))()))(*(void *)result + 88))(result);
      return 0;
    case 3:
      BlueFin::GlTimer::disarm((uint64_t)this + 53808);
      BlueFin::GlTimer::disarm((uint64_t)this + 31704);
      BlueFin::GlTimer::disarm((uint64_t)this + 53768);
      BlueFin::GlTimer::disarm((uint64_t)this + 53568);
      BlueFin::GlTimer::disarm((uint64_t)this + 53608);
      BlueFin::GlTimer::disarm((uint64_t)this + 53976);
      return 0;
    case 6:
    case 0xB:
    case 0x11:
    case 0x12:
    case 0x15:
    case 0x16:
    case 0x1B:
    case 0x1C:
    case 0x1E:
    case 0x20:
    case 0x21:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
      return result;
    case 7:
      BlueFin::GlReqSm::CreateNewReqFromPend(this);
      return 0;
    case 8:
      BlueFin::GlPeReqBag::TerminateRequest((uint64_t)this + 10880, *((BlueFin::GlRequestImpl **)this + 4148));
      BlueFin::GlPePendingBag::TerminateRequest((uint64_t)this + 6496, *((BlueFin::GlRequestImpl **)this + 4148));
      BlueFin::GlPeReqBag::Cleanup((uint64_t)this + 10880);
      if (BlueFin::GlSetBase::HasAny((BlueFin::GlReqSm *)((char *)this + 11504))) {
        return 0;
      }
      unint64_t result = 0;
      *((_DWORD *)this + 2712) = 0;
      return result;
    case 9:
      int v13 = *((_DWORD *)this + 3048);
      *(void *)uint64_t v51 = v53;
      unsigned __int8 v52 = 3;
      *(_DWORD *)int v53 = v13;
      *(void *)&v53[4] = 0;
      GlCustomLog(14, "GlReqSm: terminate all requests\n");
      BlueFin::GlPeReqBag::TerminateAll((BlueFin::GlReqSm *)((char *)this + 10880));
      BlueFin::GlPePendingBag::TerminateAll((uint64_t)this + 6496);
      *((_DWORD *)this + 2712) = 0;
      BlueFin::GlPeReqBag::Cleanup((uint64_t)this + 10880);
      BlueFin::GlTimer::disarm((uint64_t)this + 31584);
      if (**(_DWORD **)v51) {
        goto LABEL_13;
      }
      if (v52 < 2uLL) {
        goto LABEL_84;
      }
      if (*(_DWORD *)(*(void *)v51 + 4)) {
        goto LABEL_13;
      }
      uint64_t v35 = 2;
      do
      {
        if (v52 == v35) {
          goto LABEL_84;
        }
      }
      while (!*(_DWORD *)(*(void *)v51 + 4 * v35++));
      if (v35 - 1 >= (unint64_t)v52) {
        goto LABEL_84;
      }
LABEL_13:
      if (a2[1])
      {
LABEL_84:
        BlueFin::GlTimer::disarm((uint64_t)this + 31624);
        BlueFin::GlTimer::disarm((uint64_t)this + 31664);
        BlueFin::GlTimer::disarm((uint64_t)this + 31752);
        goto LABEL_85;
      }
      if (**(_DWORD **)v51) {
        BlueFin::GlReqSm::StartWarmStandBy(this);
      }
      return 0;
    case 0xA:
      if ((*((unsigned char *)this + 10850) & 0x20) != 0)
      {
        unsigned int v18 = *((_DWORD *)this + 31);
        if (v18 >= 2) {
          *((_DWORD *)this + 3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v18 >> 1;
        }
      }
      BlueFin::GlReqSm::SetAsstFromPend(this, 1, 0);
      return 0;
    case 0x13:
      if (*v5)
      {
        BlueFin::GlReqSm::ProcessNewMeas(this);
        return 0;
      }
      if (!*((unsigned char *)this + 53968)) {
        goto LABEL_103;
      }
      if (*((unsigned char *)this + 54877) && *(unsigned char *)(*((void *)this + 784) + 26217) == 1)
      {
        *((unsigned char *)this + 53969) = 1;
        unsigned int v39 = 1000;
LABEL_102:
        *((void *)this + 6745) = this;
        BlueFin::GlTimer::arm((BlueFin::GlReqSm *)((char *)this + 53928), 63, 0, v39);
        *((unsigned char *)this + 53952) = 1;
        GlCustomLog(14, "MI2: +++ fire Pos Extrapolation event @Lms: %d +++ \n", *(_DWORD *)(*((void *)this + 785) + 2568));
        goto LABEL_103;
      }
      if (*((unsigned char *)this + 53969) && *((unsigned char *)this + 54878))
      {
        *((unsigned char *)this + 53969) = 0;
        unsigned int v39 = 500;
        goto LABEL_102;
      }
LABEL_103:
      int v40 = BlueFin::GlPeReqBag::GetMinimumPeriod((BlueFin::GlReqSm *)((char *)this + 10880));
      *((void *)this + 6705) = this;
      BlueFin::GlTimer::arm((BlueFin::GlReqSm *)((char *)this + 53608), 31, 0, v40 + 10000);
      *((unsigned char *)this + 53632) = 1;
      if (BlueFin::GlReqSm::ShouldRequestAdcCapture(this))
      {
        *((_DWORD *)this + 13723) = *(_DWORD *)(*((void *)this + 785) + 2568);
        (*(void (**)(void))(**((void **)this + 39) + 752))(*((void *)this + 39));
        ++*((_DWORD *)this + 13724);
      }
      if ((*(uint64_t (**)(void))(**((void **)this + 784) + 1088))(*((void *)this + 784))) {
        goto LABEL_106;
      }
      if (BlueFin::GlReqSm::ShouldTransitionToStandby(this)) {
        goto LABEL_85;
      }
      int InternalWarmStandbyPeriodIfAllowed = BlueFin::GlPeReqBag::GetInternalWarmStandbyPeriodIfAllowed((uint64_t)this + 10880);
      if (BlueFin::GlReqSm::ShouldTransitionToInternalWarmStandby(this, InternalWarmStandbyPeriodIfAllowed))
      {
        int v8 = "&GlReqSm::warmstandbystate";
        unint64_t v9 = (uint64_t (*)())BlueFin::GlReqSm::warmstandbystate;
        goto LABEL_86;
      }
LABEL_106:
      BlueFin::GlReqSm::ProcessNewMeas(this);
      uint64_t v41 = *((void *)this + 783);
      if (*(unsigned char *)(v41 + 181096))
      {
        unsigned int v42 = 2 * *((_DWORD *)this + 31);
        if (v42 >= 0x10) {
          unsigned int v42 = 16;
        }
      }
      else
      {
        unsigned int v42 = 1;
      }
      *((_DWORD *)this + 3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v42;
      uint64_t v44 = *((void *)this + 785);
      if (!*(unsigned char *)(v44 + 2768) || (*(_DWORD *)(v44 + 2568) + 7201002) < 0x3E8) {
        goto LABEL_118;
      }
      int v45 = *(_DWORD *)(*((void *)this + 784) + 32);
      if ((v45 & 0x10000) == 0)
      {
        BlueFin::GlPosEng::SetDeathCause(v41, 2);
        (*(void (**)(void, uint64_t, void))(**((void **)this + 792) + 16))(*((void *)this + 792), 327680, 0);
LABEL_85:
        int v8 = "&GlReqSm::standby";
        unint64_t v9 = (uint64_t (*)())BlueFin::GlReqSm::standby;
LABEL_86:
        BlueFin::QHsm::tran(this, v9, (uint64_t)v8);
        return 0;
      }
      if ((v45 & 0x4000) == 0) {
        (*(void (**)(void, uint64_t, void))(**((void **)this + 792) + 16))(*((void *)this + 792), 0x10000, 0);
      }
LABEL_118:
      if (!BlueFin::GlSetBase::HasAny((BlueFin::GlReqSm *)((char *)this + 11504)) && !*((unsigned char *)this + 31608))
      {
LABEL_50:
        if (!*((unsigned char *)this + 31648) && !*((unsigned char *)this + 31688)) {
          goto LABEL_85;
        }
      }
      return 0;
    case 0x14:
      if (*(_DWORD *)(*((void *)this + 785) + 2568) != -7200001)
      {
        BlueFin::GlReqSm::OnCpuLoadStarted(this);
        unsigned int v19 = *(_DWORD *)(*((void *)this + 785) + 2568);
        int v20 = (*(uint64_t (**)(void))(**((void **)this + 784) + 1040))(*((void *)this + 784));
        if (v19 < 0x3E8) {
          int v21 = 1;
        }
        else {
          int v21 = v20;
        }
        if (v21) {
          uint64_t v22 = v19;
        }
        else {
          uint64_t v22 = v19 + 100;
        }
        BlueFin::GlPeReqBag::SetCurrentTimeLms((BlueFin::GlReqSm *)((char *)this + 10880), v22);
        int v23 = *((_DWORD *)this + 3048);
        BlueFin::GlPeReqBag::SetSIGMeasuement((BlueFin::GlReqSm *)((char *)this + 10880), *((const void ***)this + 790));
        if ((v23 & 0xC) != 0 && !*((unsigned char *)this + 53562)) {
          BlueFin::GlReqSm::UpdateOscAidingFromBit(this, *((const void ***)this + 790));
        }
        BlueFin::GlPeReqBag::Cleanup((uint64_t)this + 10880);
        BlueFin::GlReqSm::OnCpuLoadEnded(this);
      }
      return 0;
    case 0x1A:
      BlueFin::GlTimer::disarm((uint64_t)this + 31584);
      if (!BlueFin::GlSetBase::HasAny((BlueFin::GlReqSm *)((char *)this + 11504))) {
        goto LABEL_50;
      }
      return 0;
    case 0x1D:
      unint64_t result = 0;
      *((unsigned char *)this + 31744) = 1;
      return result;
    case 0x1F:
    case 0x25:
      *((_DWORD *)this + 2712) = 0;
      if (!*v5)
      {
        uint64_t v6 = *((void *)this + 4149);
        if (*(unsigned char *)(v6 + 296))
        {
          uint64_t v7 = *(void (**)(void, void))(v6 + 80);
          if (v7)
          {
            v7(*(void *)(v6 + 8), 0);
            *(unsigned char *)(v6 + 296) = 0;
            uint64_t v6 = *((void *)this + 4149);
          }
        }
        (*(void (**)(uint64_t, uint64_t, void))(*(void *)v6 + 80))(v6, 6, 0);
      }
      GlCustomLog(11, "GlReqSm::communication breakdown at %s: %d. GLL will be restarted!\n", "processing", 4274);
      int v8 = "&GlReqSm::restart";
      unint64_t v9 = (uint64_t (*)())BlueFin::GlReqSm::restart;
      goto LABEL_86;
    case 0x22:
      if (*((__int16 *)this + 5132) >= 1) {
        BlueFin::GlReqSm::CreateNewReqFromPend(this);
      }
      if (*((_DWORD *)this + 2712)) {
        BlueFin::GlReqSm::SetAsstFromPend(this, 1, 0);
      }
      if ((*(unsigned int (**)(void))(**((void **)this + 784) + 1040))(*((void *)this + 784)))
      {
        *((_DWORD *)this + 13505) = -1000;
        *((void *)this + 6700) = this;
        BlueFin::GlTimer::arm((BlueFin::GlReqSm *)((char *)this + 53568), 35, 0, 0x3E8u);
        *((unsigned char *)this + 53592) = 2;
        BlueFin::GlPeTimeManager::AsicStarted(*((BlueFin::GlPeTimeManager **)this + 785), 0, 0, 0.0, 0, 0);
      }
      goto LABEL_60;
    case 0x23:
LABEL_60:
      if ((*(unsigned int (**)(void))(**((void **)this + 784) + 1040))(*((void *)this + 784)))
      {
        int v24 = *((_DWORD *)this + 13505) + 1000;
        *((_DWORD *)this + 13505) = v24;
      }
      else
      {
        if (*a2 != 34)
        {
          uint64_t v46 = "PE2PE_POST_ENTRY_EVENT == e->sig";
          DeviceFaultNotify("glreqsm.cpp", 3873, "processing", (char)"PE2PE_POST_ENTRY_EVENT == e->sig");
          uint64_t v47 = "glreqsm.cpp";
          int v48 = 3873;
LABEL_127:
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v47, v48, v46);
        }
        int v24 = *(_DWORD *)(*((void *)this + 785) + 2568);
      }
      BOOL v30 = (uint64_t (*)(uint64_t))(*(uint64_t (**)(void))(**(void **)(*((void *)this + 783)
                                                                                             + 32)
                                                                               + 88))(*(void *)(*((void *)this + 783)
                                                                                                  + 32));
      int v31 = (void (*)(_DWORD *))(*(uint64_t (**)(void))(**(void **)(*((void *)this + 783)
                                                                                           + 32)
                                                                             + 96))(*(void *)(*((void *)this + 783)
                                                                                                + 32));
      uint64_t v32 = v30(17536);
      if (!v32)
      {
        uint64_t v46 = "m_ptr != nullptr";
        DeviceFaultNotify("glmemalloc.h", 74, "GlStackAlloc", (char)"m_ptr != nullptr");
        uint64_t v47 = "glmemalloc.h";
        int v48 = 74;
        goto LABEL_127;
      }
      int v33 = (_DWORD *)v32;
      int v34 = (BlueFin::GlMeas *)BlueFin::GlMeas::GlMeas(v32);
      BlueFin::GlMeas::init(v34);
      v33[4379] = 0;
      *int v33 = v24;
      (*(void (**)(void, _DWORD *))(**((void **)this + 783) + 16))(*((void *)this + 783), v33);
      v31(v33);
      return 0;
    case 0x24:
      BlueFin::GlNvMemImpl::Write((BlueFin::GlNvMemImpl *)(*((void *)this + 783) + 382416));
      return 0;
    case 0x26:
      v51[0] = 0;
      unint64_t v25 = (BlueFin::GlPosEng *)*((void *)this + 783);
      BOOL Lto = BlueFin::GlPosEng::needToReadLto(v25);
      unsigned int v27 = 0;
      if (Lto)
      {
        BlueFin::GlPosEng::readLtoFile(v25, v51, 0);
        unsigned int v27 = v51[0];
      }
      GlCustomLog(14, "smRq::processing(PE2PE_LTO_REFRESH) %u bytes read\n", v27);
      GlCustomLog(14, "\tLTO %uk\n", (v51[0] + 512) >> 10);
      return 0;
    case 0x29:
      goto LABEL_85;
    case 0x31:
      (*(void (**)(void))(**((void **)this + 784) + 1040))(*((void *)this + 784));
      return 0;
    case 0x32:
      GlCustomLog(14, "Start CNTIN as CW has started\n");
      BlueFin::GlPeCntinMgr::StartCntin(*((BlueFin::GlPeCntinMgr **)this + 791));
      return 0;
    case 0x3F:
      GlCustomLog(14, "MI2: Pos Extrapolation event received @Lms: %d\n", *(_DWORD *)(*((void *)this + 785) + 2568));
      uint64_t v28 = *((void *)this + 3975);
      *(void *)uint64_t v51 = v53;
      unsigned __int8 v52 = 3;
      memset(v53, 0, sizeof(v53));
      BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)v49, v50, 3u, (const void **)v51);
      BlueFin::GlReqSm::DistributeFixStatus((uint64_t)this, 1, v28, (BlueFin::GlSetBase *)v49);
      return 0;
    case 0x44:
      uint64_t v14 = *((void *)this + 784);
      if (a2[1])
      {
        if (!*(unsigned char *)(v14 + 25957)) {
          return 0;
        }
        int v15 = *(_DWORD *)(v14 + 25960);
        if (v15 == 1)
        {
          if (*((_DWORD *)this + 13720) != 1) {
            return 0;
          }
        }
        else if (v15 != 2 || *((_DWORD *)this + 13720) != 2)
        {
          return 0;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14 + 376))(v14, 1, 0xFFFFFFFFLL);
        double v38 = *(void (**)(void))(**((void **)this + 39) + 424);
      }
      else
      {
        if (!*(unsigned char *)(v14 + 25957)) {
          return 0;
        }
        if (*(_DWORD *)(v14 + 25960) != -1) {
          return 0;
        }
        if ((*((_DWORD *)this + 13720) - 1) > 1) {
          return 0;
        }
        uint64_t v37 = *((void *)this + 786);
        if (!v37 || *(_DWORD *)(v37 + 120012) == 2) {
          return 0;
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 376))(v14, 1);
        double v38 = *(void (**)(void))(**((void **)this + 39) + 424);
      }
      v38();
      return 0;
    case 0x47:
      unint64_t result = 0;
      uint64_t v16 = *((void *)this + 784);
      if (*(_DWORD *)(v16 + 25960) > 2u || *(int *)(v16 + 88) < 39) {
        return result;
      }
      (*(void (**)(void, void))(**((void **)this + 39) + 424))(*((void *)this + 39), *(unsigned __int8 *)(v16 + 25957));
      return 0;
    case 0x48:
      uint64_t v29 = *((void *)this + 784);
      if (*(int *)(v29 + 88) <= 38 && *(unsigned char *)(v29 + 917)) {
        (*(void (**)(void, float))(**((void **)this + 39) + 624))(*((void *)this + 39), *(float *)(v29 + 984));
      }
      return 0;
    case 0x49:
      uint64_t v17 = *((void *)this + 784);
      if (*(int *)(v17 + 88) >= 39 && *(unsigned char *)(v17 + 918)) {
        (*(void (**)(void, float))(**((void **)this + 39) + 632))(*((void *)this + 39), *(float *)(v17 + 988));
      }
      return 0;
    default:
      return BlueFin::GlReqSm::host_based_positioning;
  }
}

void sub_26398246C(_Unwind_Exception *a1)
{
  v1(v2);
  _Unwind_Resume(a1);
}

uint64_t BlueFin::QHsm::top()
{
  return 0;
}

double BlueFin::GlMeAcqWindowProvider::GetAidSysTm(BlueFin::GlMeAcqWindowProvider *this, unsigned int a2, float *a3, int a4, double a5, double a6, double a7)
{
  return BlueFin::GlMeSatAidMgr::GetAidSysTm(*((void *)this + 1) + 352, a3, a4, 0, (double)a2, a6, a7);
}

uint64_t BlueFin::GlPeReqBag::GetMinimumPeriod(BlueFin::GlPeReqBag *this)
{
  uint64_t v2 = 0;
  uint64_t v10 = (char *)this + 3233;
  char v11 = *((unsigned char *)this + 3233);
  *((unsigned char *)this + 3233) = 0;
  unsigned int v3 = -1;
  do
  {
    uint64_t v4 = *(void *)((char *)this + v2);
    if (v4)
    {
      uint64_t v5 = *(_DWORD **)(v4 + 8);
      int v6 = v5[4];
      if (v6 == 3 || v6 == 0)
      {
        unsigned int v8 = (*(uint64_t (**)(_DWORD *))(*(void *)v5 + 184))(v5);
        if (v8 < v3) {
          unsigned int v3 = v8;
        }
      }
    }
    v2 += 8;
  }
  while (v2 != 576);
  if (v3 == -1) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = v3;
  }
  *uint64_t v10 = v11;
  return result;
}

void sub_263982578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned char *a11, char a12)
{
  *a11 = a12;
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlMeSrdAsicConfig::ExtCohGalSearchAvailable(BlueFin::GlMeSrdAsicConfig *this)
{
  unsigned int v1 = *((_DWORD *)this + 2);
  if (v1 >= 6)
  {
    DeviceFaultNotify("glmesrd_asic_config.cpp", 5178, "ExtCohGalSearchAvailable", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_config.cpp", 5178, "0");
  }
  return (0x28u >> v1) & 1;
}

BOOL BlueFin::GlMeAcqWindowProvider::GetGalSecDecodeInfo(BlueFin::GlMeAcqWindowProvider *this, double a2)
{
  return BlueFin::GlMeWinMgr::GetGalSecDecodeInfo((BlueFin::GlMeWinMgr *)(*((void *)this + 1) + 32), a2);
}

BOOL BlueFin::GlMeWinMgr::GetGalSecDecodeInfo(BlueFin::GlMeWinMgr *this, double a2)
{
  if (!*((unsigned char *)this + 9848)) {
    return 0;
  }
  double v2 = *((double *)this + 1230) - a2;
  if (v2 < 0.0) {
    double v2 = -v2;
  }
  if (v2 >= 180000.0) {
    return 0;
  }
  v5[0] = 0;
  int v6 = 7;
  char v7 = 0;
  long long v8 = xmmword_263BA9ED0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v15 = 0;
  unint64_t v16 = 0xBF80000000000000;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  BlueFin::GlMeSatAidMgr::GetSatAid((uint64_t)this + 320, (unsigned __int8 *)this + 9832, (uint64_t)v5, a2);
  if (!v3) {
    return 0;
  }
  return *(_DWORD *)(v3 + 12) != 4 && *(float *)(v3 + 40) < 0.001;
}

uint64_t (*(*BlueFin::GlMeSrdCtrlSm::running(BlueFin::GlMeSrdCtrlSm *this, unsigned __int8 *a2))(uint64_t a1, unsigned __int8 *a2))()
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  unsigned int v3 = *a2;
  if (v3 > 0x18)
  {
    if (*a2 > 0x3Bu)
    {
      if (v3 != 60)
      {
        if (v3 == 61)
        {
          uint64_t v13 = *((void *)this + 15);
          if (!v13) {
            uint64_t v13 = *((void *)this + 14);
          }
          uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 80))(v13);
          v21[0] = 0;
          v21[1] = 0;
          char v22 = 0;
          __int16 v23 = 1;
          uint64_t v24 = v14;
          int v25 = 0;
          __int16 v26 = 0;
          (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, 1);
          int v19 = 0;
          unsigned int v20 = 0;
          (*(void (**)(void))(**((void **)this + 17) + 1416))();
          uint64_t v15 = *((void *)this + 15);
          if (!v15) {
            uint64_t v15 = *((void *)this + 14);
          }
          uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 208))(v15);
          uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 32))(v16);
          (*(void (**)(uint64_t, void *, void, void, void, void, void, void *))(*(void *)v17 + 40))(v17, v21, v20, HIBYTE(v19), BYTE2(v19), BYTE1(v19), v19, v27);
          BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v21);
          uint64_t v10 = (BlueFin::GlMeSrdTransaction *)v21;
          goto LABEL_26;
        }
        if (v3 == 62)
        {
          uint64_t v4 = *((void *)this + 15);
          if (!v4) {
            uint64_t v4 = *((void *)this + 14);
          }
          uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 80))(v4);
          v27[0] = 0;
          v27[1] = 0;
          char v28 = 0;
          __int16 v29 = 1;
          uint64_t v30 = v5;
          int v31 = 0;
          __int16 v32 = 0;
          (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, 1);
          uint64_t v6 = *((void *)this + 15);
          if (!v6) {
            uint64_t v6 = *((void *)this + 14);
          }
          uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 208))(v6);
          uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 24))(v7);
          uint64_t v9 = (*(uint64_t (**)(void))(**((void **)this + 17) + 1192))(*((void *)this + 17));
          (*(void (**)(uint64_t, void *, void))(*(void *)v8 + 32))(v8, v27, *(unsigned __int8 *)(v9 + 1));
          BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v27);
          uint64_t v10 = (BlueFin::GlMeSrdTransaction *)v27;
LABEL_26:
          BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction(v10);
          return 0;
        }
        return BlueFin::GlMeSrdCtrlSm::my_top;
      }
LABEL_28:
      BlueFin::GlMeSrdCtrlSm::UpdateLteFilter(this);
      return 0;
    }
    if (v3 != 25)
    {
      if (v3 != 37) {
        return BlueFin::GlMeSrdCtrlSm::my_top;
      }
      BlueFin::GlMeSrdCtrlSm::SetBlankingConfig(this);
      return 0;
    }
    uint64_t v11 = "&GlMeSrdCtrlSm::wait4standby";
    uint64_t v12 = (uint64_t (*)())BlueFin::GlMeSrdCtrlSm::wait4standby;
LABEL_31:
    BlueFin::QHsm::tran(this, v12, (uint64_t)v11);
    return 0;
  }
  if (*a2 > 4u)
  {
    if (v3 == 5)
    {
      uint64_t v11 = "&GlMeSrdCtrlSm::com_breakdown";
      uint64_t v12 = (uint64_t (*)())BlueFin::GlMeSrdCtrlSm::com_breakdown;
    }
    else
    {
      if (v3 != 21) {
        return BlueFin::GlMeSrdCtrlSm::my_top;
      }
      uint64_t v11 = "&GlMeSrdCtrlSm::wait4memdump";
      uint64_t v12 = (uint64_t (*)())BlueFin::GlMeSrdCtrlSm::wait4memdump;
    }
    goto LABEL_31;
  }
  if (v3 == 2)
  {
    BlueFin::GlMeSrdCtrlSm::SetBlankingConfig(this);
    goto LABEL_28;
  }
  if (v3 != 3) {
    return BlueFin::GlMeSrdCtrlSm::my_top;
  }
  return 0;
}

void sub_263982ABC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

uint64_t (*(*(*BlueFin::GlMeSrdCtrlSm::normal(uint64_t a1, unsigned __int8 *a2))(BlueFin::GlMeSrdCtrlSm *this, unsigned __int8 *a2))(uint64_t a1, unsigned __int8 *a2))()
{
  int v3 = *a2;
  if (v3 == 3)
  {
    uint64_t v8 = *(void *)(a1 + 120);
    if (!v8) {
      uint64_t v8 = *(void *)(a1 + 112);
    }
    uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 184) + 16))(*(void *)(a1 + 184));
    (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 144))(v8, v9);
    (*(void (**)(void))(**(void **)(a1 + 128) + 8))(*(void *)(a1 + 128));
  }
  else
  {
    uint64_t result = BlueFin::GlMeSrdCtrlSm::running;
    if (v3 != 2) {
      return result;
    }
    (***(void (****)(void))(a1 + 128))(*(void *)(a1 + 128));
    (*(void (**)(void, void))(**(void **)(a1 + 184) + 32))(*(void *)(a1 + 184), *(unsigned int *)(a1 + 3544));
    uint64_t v5 = *(void *)(a1 + 120);
    if (!v5) {
      uint64_t v5 = *(void *)(a1 + 112);
    }
    uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 184) + 16))(*(void *)(a1 + 184));
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 136))(v5, v6);
    uint64_t v7 = *(unsigned char **)(a1 + 136);
    if (v7[1206])
    {
      __int16 v10 = 0;
      (*(void (**)(unsigned char *, char *, __int16 *))(*(void *)v7 + 216))(v7, (char *)&v10 + 1, &v10);
      BlueFin::GlMeSrdCtrlSm::SetMeasurementIntervalMs(a1, (unsigned __int16)(1000 * HIBYTE(v10)), (unsigned __int16)(1000 * v10));
    }
  }
  return 0;
}

BOOL BlueFin::GlReqSm::ShouldTransitionToStandby(BlueFin::GlReqSm *this)
{
  int v1 = *((_DWORD *)this + 3048);
  if (!*(unsigned char *)(*((void *)this + 784) + 1318)) {
    v1 &= 0xFFFFCFFF;
  }
  return !v1
      && !*((unsigned char *)this + 31608)
      && !*((unsigned char *)this + 31648)
      && !*((unsigned char *)this + 31688)
      && *((unsigned char *)this + 31776) == 0;
}

uint64_t BlueFin::GlReqSm::ShouldTransitionToInternalWarmStandby(BlueFin::GlReqSm *this, int a2)
{
  if (!a2) {
    return 0;
  }
  BOOL v2 = *((unsigned char *)this + 31608) || *((unsigned char *)this + 31648) || *((unsigned char *)this + 31688) || *((unsigned char *)this + 31776) != 0;
  uint64_t v3 = 0;
  if ((*((_DWORD *)this + 13646) + 2000) < *(_DWORD *)(*((void *)this + 785) + 2568) && !v2)
  {
    *((_DWORD *)this + 7948) = a2;
    return 1;
  }
  return v3;
}

BOOL BlueFin::GlReqSm::ShouldRequestAdcCapture(BlueFin::GlReqSm *this)
{
  uint64_t v1 = *((void *)this + 784);
  if (*(unsigned char *)(v1 + 26316))
  {
    unint64_t v2 = *(unsigned int *)(*((void *)this + 785) + 2568);
    unsigned int v3 = *(_DWORD *)(v1 + 26320);
    unsigned int v4 = *(_DWORD *)(v1 + 26324);
    unint64_t v5 = 1000 * v3;
    int v6 = *((_DWORD *)this + 13723);
    int v7 = *((_DWORD *)this + 13724);
    if (v4) {
      BOOL v8 = 1000 * (unint64_t)v4 <= (v2 - *((_DWORD *)this + 13723));
    }
    else {
      BOOL v8 = v7 == 0;
    }
    BOOL v10 = (*(_DWORD *)(v1 + 88) - 39) < 2;
    if (v8) {
      uint64_t v11 = 84;
    }
    else {
      uint64_t v11 = 70;
    }
    BOOL v12 = v5 >= v2;
    BOOL v13 = v5 < v2 && v8;
    if (v12) {
      uint64_t v14 = 70;
    }
    else {
      uint64_t v14 = 84;
    }
    BOOL v9 = v13 && v10;
    int v17 = v3;
    if (v13 && v10) {
      uint64_t v15 = 84;
    }
    else {
      uint64_t v15 = 70;
    }
    GlCustomLog(15, "GlReqSm::ShouldRequestAdcCapture: Lms %u Request %c InitialDelayOk %c PeriodOk %c InitialDelayS %d IntervalS %d LastAdcCaptureLms %u CaptureCount %u\n", v2, v15, v14, v11, v17, v4, v6, v7);
  }
  else
  {
    return 0;
  }
  return v9;
}

uint64_t BlueFin::GlPeReqBag::GetInternalWarmStandbyPeriodIfAllowed(uint64_t this)
{
  uint64_t v1 = (unsigned char *)(this + 3233);
  int v7 = (unsigned char *)(this + 3233);
  char v2 = *(unsigned char *)(this + 3233);
  char v8 = v2;
  *(unsigned char *)(this + 3233) = 0;
  if (*(_DWORD *)(this + 1312) == 1)
  {
    uint64_t v3 = this;
    uint64_t v4 = 0;
    LODWORD(this) = 0;
    __int16 v5 = 0;
    do
    {
      uint64_t v6 = *(void *)(v3 + v4);
      if (v6)
      {
        LODWORD(this) = (*(uint64_t (**)(void))(*(void *)v6 + 224))(*(void *)(v3 + v4));
        ++v5;
      }
      v4 += 8;
    }
    while (v4 != 576);
    if (v5 <= 1) {
      this = this;
    }
    else {
      this = 0;
    }
    char v2 = v8;
    uint64_t v1 = v7;
  }
  else
  {
    this = 0;
  }
  *uint64_t v1 = v2;
  return this;
}

void sub_263982F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned char *a11, char a12)
{
  *a11 = a12;
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlMeSrdTransactionManager::RegisterSatEvt(uint64_t result, uint64_t a2)
{
  if (!a2)
  {
    char v2 = "pSatEvtIf != nullptr";
    DeviceFaultNotify("glmesrd_transaction_handler.cpp", 300, "RegisterSatEvt", (char)"pSatEvtIf != nullptr");
    int v3 = 300;
    goto LABEL_7;
  }
  if (*(void *)(result + 17088))
  {
    if (!*(void *)(result + 17096))
    {
      *(void *)(result + 17096) = a2;
      return result;
    }
    char v2 = "0";
    DeviceFaultNotify("glmesrd_transaction_handler.cpp", 311, "RegisterSatEvt", (char)"0");
    int v3 = 311;
LABEL_7:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_handler.cpp", v3, v2);
  }
  *(void *)(result + 17088) = a2;
  return result;
}

uint64_t BlueFin::GlMeSrdTransactionManager::RegisterSatRpt(uint64_t result, uint64_t a2)
{
  if (!a2 || *(void *)(result + 17072))
  {
    DeviceFaultNotify("glmesrd_transaction_handler.cpp", 272, "RegisterSatRpt", (char)"m_pSatRptIf == nullptr && pSatRptIf != nullptr");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_handler.cpp", 272, "m_pSatRptIf == nullptr && pSatRptIf != nullptr");
  }
  *(void *)(result + 17072) = a2;
  return result;
}

uint64_t BlueFin::GlMeSrdSatReportMgr::GetSatRptRpcIfc(BlueFin::GlMeSrdSatReportMgr *this)
{
  return (uint64_t)this + 480;
}

uint64_t BlueFin::GlMeSrdAcqMgr::AllocateEswResources(BlueFin::GlMeSrdAcqMgr *this)
{
  if (*((unsigned char *)this + 104))
  {
    DeviceFaultNotify("glmesrd_acq_mgr.cpp", 47, "AllocateEswResources", (char)"!m_bAllocated");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_acq_mgr.cpp", 47, "!m_bAllocated");
  }
  *((unsigned char *)this + 104) = 1;
  char v2 = (BlueFin::GlMeSrdAcqMgrSm *)*((void *)this + 1);
  *((void *)v2 + 307BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  BlueFin::GlMeSrdAcqMgrSm::UpdateClockModelState(v2);
  int v3 = *(uint64_t (**)(void))(**(void **)(*((void *)this + 1) + 48) + 168);

  return v3();
}

uint64_t gnss::FireGnssDevice::injectAssistanceTime(FireMessageHandler **a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  DeviceCommon::GetMachContinuousTime((DeviceCommon *)a1);
  uint64_t v11 = (unint64_t)(v10 * 1000000000.0) - a4;
  FireDeviceLog::DeviceLogBase(6, "#fgd injectAssistanceTime gpsNanoSeconds,%llu,uncertaintyNanoSeconds,%llu,machContinuousTimeNanoSeconds,%llu,nowNs,%llu,timeDiff,%llu", v12, v13, v14, v15, v16, v17, a2);
  int v23 = FireMessageHandler::setAssistanceTime(a1[5], v11 + a2, a3, v18, v19, v20, v21, v22);

  return std::function<void ()(gnss::Result)>::operator()(a5, v23);
}

uint64_t BlueFin::GlPeReqBag::UpdateFixStatus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = 0;
  uint64_t v12 = (unsigned char *)(a1 + 3233);
  char v13 = *(unsigned char *)(a1 + 3233);
  *(unsigned char *)(a1 + 3233) = 0;
  do
  {
    uint64_t result = *(void *)(a1 + v10);
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)result + 240))(result, a2, a3, a4, a5);
    }
    v10 += 8;
  }
  while (v10 != 576);
  unsigned char *v12 = v13;
  return result;
}

void sub_2639832AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned char *a11, char a12)
{
  *a11 = a12;
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlPeRqHdlrPosPeriodic::UpdateFixStatus(uint64_t a1, uint64_t a2, char a3, uint64_t a4, int a5)
{
  int v10 = *(unsigned __int8 *)(a2 + 4048);
  *(unsigned char *)(a1 + 168) = v10;
  if (v10 || (*(unsigned char *)(a2 + 4068) & 0x10) != 0 && !*(_DWORD *)(a1 + 96))
  {
    int v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 152))(*(void *)(a1 + 8));
    int v12 = v11;
    if (v11 <= 400) {
      int v13 = 400;
    }
    else {
      int v13 = v11;
    }
    *(_DWORD *)(a1 + 92) = v13;
    __int16 v14 = *(_WORD *)(*(void *)(a1 + 8) + 22);
    uint64_t v15 = *(unsigned int *)(a1 + 72);
    int GllStartupType = BlueFin::GlPeKF::GetGllStartupType(*(BlueFin::GlPeKF **)(*(void *)(a1 + 56) + 16));
    int v17 = GllStartupType;
    if (a3)
    {
      int DynamicAccyMask = 2000;
      GlCustomLog(14, "AccyMask[%hu]PER (server returned position)Periodic %s Current %dm\n", *(unsigned __int16 *)(a1 + 48), off_2655E0310[GllStartupType], 2000);
    }
    else if (v12 == -1)
    {
      *(_DWORD *)int v36 = BlueFin::GlPeKF::GetGllStartupType(*(BlueFin::GlPeKF **)(*(void *)(a1 + 56) + 16));
      int v20 = *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 16) + 1608);
      if (v20 >= 0) {
        unsigned int v21 = *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 16) + 1608);
      }
      else {
        unsigned int v21 = -v20;
      }
      int ReqSmartMaskAccyM_Startup = BlueFin::GlPeRqHdlr::GetReqSmartMaskAccyM_Startup(a1, v36);
      int DynamicAccyMask = ReqSmartMaskAccyM_Startup;
      __int16 v35 = -1;
      int v23 = *(_DWORD *)(a1 + 96);
      int v34 = *(_DWORD *)(a1 + 92);
      if (v23)
      {
        if (*(unsigned char *)(a1 + 108))
        {
          if (!*(unsigned char *)(a1 + 109))
          {
            *(unsigned char *)(a1 + 109) = 1;
            GlCustomLog(14, "AccyMask[%hu]PER SmartMask latched at %dm\n", *(unsigned __int16 *)(a1 + 48), ReqSmartMaskAccyM_Startup);
          }
        }
        else
        {
          int DynamicAccyMask = *(_DWORD *)(a1 + 112);
          GlCustomLog(14, "AccyMask[%hu]PER SmartMask not latched. Holding at %dm\n", *(unsigned __int16 *)(a1 + 48), DynamicAccyMask);
        }
      }
      else
      {
        int v34 = ReqSmartMaskAccyM_Startup;
        int v25 = *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 16) + 27384);
        if (v25 != -7200001)
        {
          int v26 = *(_DWORD *)(a1 + 36);
          if (v26 == -1)
          {
            uint64_t v15 = 1;
          }
          else
          {
            unsigned int v27 = *(_DWORD *)(*(void *)(a1 + 8) + 28);
            int v28 = *(_DWORD *)(a1 + 32);
            unsigned int v29 = v28 + v26;
            BOOL v30 = v29 >= v27;
            unsigned int v31 = v29 - v27;
            if (!v30) {
              unsigned int v31 = 1;
            }
            unsigned int v32 = v28 - v25;
            if (v32 >= v31) {
              uint64_t v15 = v31;
            }
            else {
              uint64_t v15 = v32;
            }
          }
        }
        BlueFin::GlPeRqHdlr::GetDynAccyMask_ToutForSmartphoneFF(a1, v36, v15, &v34, &v35);
        if (v35 == -1) {
          GlCustomLog(14, "AccyMask[%hu]PER before FF Smartphone %s Current %dm\n");
        }
        else {
          GlCustomLog(14, "AccyMask[%hu]PER before FF Smartphone %s Current %dm set at %hds\n");
        }
        *(_DWORD *)(a1 + 112) = DynamicAccyMask;
      }
      if (v21 > 0x5DC
        || (*(unsigned int (**)(uint64_t, void, uint64_t, void))(*(void *)a1 + 16))(a1, v35, v15, 0))
      {
        int DynamicAccyMask = v34;
        *(_DWORD *)(a1 + 112) = v34;
      }
      if (((DynamicAccyMask < 100) & (*(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 56) + 16) + 92344) + 32) >> 29)) != 0) {
        int DynamicAccyMask = 100;
      }
    }
    else if (v12)
    {
      int v24 = *(_DWORD *)(a1 + 88);
      if (v24 != *(_DWORD *)(a1 + 92))
      {
        int v24 = BlueFin::GlPeKF::CheckMinWaitTimeWithFewSats(*(BlueFin::GlPeKF **)(*(void *)(a1 + 56) + 16), v15, v36, *(_DWORD *)(a1 + 96), 1)? 0: v12;
        if ((*(unsigned int (**)(uint64_t, void, uint64_t, void))(*(void *)a1 + 16))(a1, v14, v15, 0))
        {
          int v24 = *(_DWORD *)(a1 + 92);
        }
      }
      GlCustomLog(14, "AccyMask[%hu]PER Periodic %s Current %dm\n", *(unsigned __int16 *)(a1 + 48), off_2655E0310[v17], v24);
      int DynamicAccyMask = v24;
    }
    else
    {
      int DynamicAccyMask = *(_DWORD *)(a1 + 88);
      if (DynamicAccyMask != *(_DWORD *)(a1 + 92))
      {
        int DynamicAccyMask = BlueFin::GlPeKF::GetDynamicAccyMask(*(BlueFin::GlPeKF **)(*(void *)(a1 + 56) + 16), *(_DWORD *)(a1 + 88), v15, *(_DWORD *)(a1 + 96));
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 16))(a1, 30, v15, 0))
        {
          int DynamicAccyMask = *(_DWORD *)(a1 + 92);
        }
      }
      GlCustomLog(14, "AccyMask[%hu]PER PND %s Current %dm\n", *(unsigned __int16 *)(a1 + 48), off_2655E0310[v17], DynamicAccyMask);
    }
    if (*(double *)(a2 + 4144) >= (double)DynamicAccyMask + 0.01)
    {
      int v33 = 0;
      *(unsigned char *)(a1 + 168) = 0;
      *(_DWORD *)(a1 + 88) = DynamicAccyMask;
    }
    else
    {
      *(unsigned char *)(a1 + 168) = 1;
      ++*(_DWORD *)(a1 + 96);
      if ((a3 & 1) == 0)
      {
        ++*(_DWORD *)(a1 + 160);
        if (*(_DWORD *)(a2 + 6912) == 2) {
          ++*(_DWORD *)(a1 + 164);
        }
      }
      if (DynamicAccyMask == *(_DWORD *)(a1 + 92)) {
        *(_DWORD *)(a1 + 88) = v12;
      }
      *(_DWORD *)(a1 + 100) = *(_DWORD *)a2;
      *(_DWORD *)int v36 = BlueFin::GlPeKF::GetGllStartupType(*(BlueFin::GlPeKF **)(*(void *)(a1 + 56) + 16));
      if (*(double *)(a2 + 4144) < (double)(int)BlueFin::GlPeRqHdlr::GetReqSmartMaskAccyM_Startup(a1, v36) + 0.01) {
        *(unsigned char *)(a1 + 108) = 1;
      }
      if (!*(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 56) + 16) + 92368) + 10200)) {
        BlueFin::GlPeFixStatus::UpdateAccumDist(a2, a1 + 120, a4, a5);
      }
      int v33 = *(unsigned __int8 *)(a1 + 168);
    }
    *(_DWORD *)(a1 + 172) = *(_DWORD *)(a1 + 152);
    return BlueFin::GlPeRqHdlr::LogGL007(a1, "PER", a2, DynamicAccyMask, v33);
  }
  else
  {
    uint64_t result = BlueFin::GlPeRqHdlr::LogGL007(a1, "per", a2, *(_DWORD *)(a1 + 88), 0);
    *(_DWORD *)(a1 + 172) = *(_DWORD *)(a1 + 152);
  }
  return result;
}

uint64_t BlueFin::GlPeKF::GetGllStartupType(BlueFin::GlPeKF *this)
{
  uint64_t result = *(unsigned int *)(*((void *)this + 11557) + 36);
  if (!result)
  {
    uint64_t result = BlueFin::GlPeExtLoc::IsPosLocMeasConfHighOrMedOrUnknown((BlueFin::GlPeKF *)((char *)this + 88560));
    if (result) {
      return *(unsigned char *)((*(uint64_t (**)(void))(*((void *)this + 3468) + 240))() + 1) == 0;
    }
  }
  return result;
}

uint64_t BlueFin::GlPeRqHdlr::LogGL007(uint64_t a1, const char *a2, uint64_t a3, int a4, int a5)
{
  int v8 = *(unsigned __int16 *)(a1 + 48);
  long long v14 = *(_OWORD *)(a3 + 4072);
  double v9 = *(double *)(a3 + 4088);
  double v10 = *(double *)(a3 + 4144);
  int v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 152))(*(void *)(a1 + 8));
  int v12 = "Valid";
  if (!a5) {
    int v12 = "Invalid";
  }
  return GlCustomLog(14, "GL007[%hu]%s Lat=%10.6f Lon=%11.6f Alt=%3.0f EstAcc=%3.0f ReqAcc=%3d AccMask=%3u %s\n", v8, a2, *(double *)&v14, *((double *)&v14 + 1), v9, v10, v11, a4, v12);
}

uint64_t BlueFin::GlPeRqHdlr::GetReqSmartMaskAccyM_Startup(uint64_t a1, _DWORD *a2)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 392))(*(void *)(a1 + 8), 1);
  if ((*a2 | 2) == 2)
  {
    __int16 v5 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 392);
    return v5();
  }
  return result;
}

uint64_t BlueFin::GlRequestImplPos::GetSmartMaskAccyM(uint64_t a1, unsigned int a2)
{
  return *(__int16 *)(a1 + 2 * a2 + 84);
}

BOOL BlueFin::GlPeKF::CheckMinWaitTimeWithFewSats(BlueFin::GlPeKF *this, unsigned int a2, __int16 *a3, int a4, char a5)
{
  if (a4 && (a5 & 1) != 0) {
    return 0;
  }
  if (*((unsigned char *)this + 88573)) {
    BOOL v8 = !BlueFin::GlPeExtLoc::IsPosLocMeasConfHighOrMedOrUnknown((BlueFin::GlPeKF *)((char *)this + 88560));
  }
  else {
    BOOL v8 = 1;
  }
  if (a2 >> 3 >= 0x465) {
    BOOL v8 = 0;
  }
  BOOL v7 = *((char *)this + 92868) < 6 && v8;
  int v9 = *(_DWORD *)(*((void *)this + 11551) + 120012);
  int v10 = *(_DWORD *)(*((void *)this + 11543) + 32);
  int v11 = *((unsigned __int8 *)this + 1096);
  int v12 = (char *)this + *(void *)(*((void *)this + 3468) - 24) + 27744;
  int v13 = BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(v12 + 264));
  (*(void (**)(char *))(*(void *)v12 + 16))(v12);
  if ((v10 & 0x4000000) != 0 && v9 == 1 && v13 << 24 <= 117440511) {
    return v14 > 15.0 || v11 == 0 || a2 >> 4 < 0x36B || v7;
  }
  return v7;
}

BOOL BlueFin::GlPeRqHdlrPosPeriodic::CheckAccyMaskTimeout(BlueFin::GlPeRqHdlrPosPeriodic *this, int a2, int a3, int a4)
{
  if (a2 <= 0)
  {
    uint64_t v4 = (char *)this + 64;
  }
  else
  {
    uint64_t v4 = (char *)this + 64;
    if (1000 * (unsigned __int16)a2 - a3 <= *((__int16 *)this + 21) + a4)
    {
      BOOL result = 1;
      unsigned char *v4 = 1;
      return result;
    }
  }
  return *v4 != 0;
}

double BlueFin::GlPeKF::FirstFixSetPosSource(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v4 = a1 + 88564;
  if (*(unsigned char *)(a1 + 189))
  {
    *(_DWORD *)(a2 + 96) = 0;
    uint64_t v5 = *(void *)(a1 + 88696);
    if (v5 && *(unsigned char *)(v5 + 3008))
    {
      double result = *(double *)(v5 + 3040) * *(double *)(v5 + 3040) + *(double *)(v5 + 3048) * *(double *)(v5 + 3048);
      if (result < 160000.0) {
        *(_DWORD *)(a2 + 96) = 4;
      }
    }
    *(unsigned char *)(a2 + 1076) = 2;
  }
  else
  {
    int v9 = (unsigned int **)(a1 + 92416);
    uint64_t v10 = a1 + 88560;
    if (!*(_DWORD *)(a1 + 88568))
    {
      uint64_t v16 = *(void *)(a1 + 88696);
      if (v16)
      {
        if (*(unsigned char *)(v16 + 3008)
          && *(double *)(v16 + 3040) * *(double *)(v16 + 3040) + *(double *)(v16 + 3048) * *(double *)(v16 + 3048) < 160000.0)
        {
          *(_DWORD *)(a1 + 88568) = 2;
          *(unsigned char *)(*(void *)(a1 + 92440) + 3008) = 0;
        }
      }
    }
    int PosHulaSource = BlueFin::GlPeKF::GetPosHulaSource(a1, (uint64_t *)(a1 + 27744));
    int v12 = PosHulaSource;
    *(_DWORD *)(a2 + 96) = PosHulaSource;
    if (a3[504])
    {
      uint64_t v13 = *(void *)(v4 + 132);
      if (v13
        && *(unsigned char *)(v13 + 3008)
        && *(double *)(v13 + 3040) * *(double *)(v13 + 3040) + *(double *)(v13 + 3048) * *(double *)(v13 + 3048) < 160000.0
        || *(unsigned char *)(a1 + 21784))
      {
        *(_DWORD *)(a2 + 96) = PosHulaSource | 4;
        char v14 = BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(a3 + 24));
        if (!a3[508] && v14) {
          *(_DWORD *)(a2 + 96) = v12 | 5;
        }
        int v15 = **v9;
        if (v13) {
          *(unsigned char *)(v13 + 3009) = 1;
        }
        *(_DWORD *)(v4 + 56) = v15;
        *(unsigned char *)(v4 + 9) = 1;
        *(void *)uint64_t v4 = 0x100000001;
      }
    }
    else if (*(unsigned char *)(a2 + 8) && BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(a3 + 24)))
    {
      *(_DWORD *)(a2 + 96) = v12 | 2;
    }
    *(_DWORD *)(a2 + 100) = BlueFin::GlPeKF::GetPosConfidence((BlueFin::GlPeKF *)a1);
    int v31 = 0;
    char v30 = 0;
    (*(void (**)(uint64_t, int *, char *, uint64_t, uint64_t))(*(void *)(a1 + 27744) + 216))(a1 + 27744, &v31, &v30, a1 + 92884, a1 + 92885);
    char v17 = *(unsigned char *)((*(uint64_t (**)(uint64_t))(*(void *)(a1 + 27744) + 240))(a1 + 27744) + 1);
    int IsVdrValid = BlueFin::GlPeKF::IsVdrValid((BlueFin::GlPeKF *)a1);
    if (BlueFin::GlPeExtLoc::GetExtSensStatus(v10, (uint64_t)v26, v17, IsVdrValid, *(unsigned __int8 *)(a1 + 184)))
    {
      long long v19 = v26[1];
      *(_OWORD *)(a2 + 800) = v26[0];
      *(_OWORD *)(a2 + 816) = v19;
      long long v20 = v26[3];
      *(_OWORD *)(a2 + 832) = v26[2];
      *(_OWORD *)(a2 + 848) = v20;
      *(void *)(a2 + 912) = v29;
      long long v21 = v28;
      long long v22 = v26[4];
      double result = *(double *)&v27;
      *(_OWORD *)(a2 + 880) = v27;
      *(_OWORD *)(a2 + 896) = v21;
      *(_OWORD *)(a2 + 864) = v22;
      if (*(unsigned char *)(v4 + 124))
      {
        uint64_t v23 = *(void *)(v4 + 132);
        if (v23)
        {
          if (*(unsigned char *)(v23 + 3008))
          {
            double result = *(double *)(v23 + 3040) * *(double *)(v23 + 3040)
                   + *(double *)(v23 + 3048) * *(double *)(v23 + 3048);
            if (result < 160000.0 && (*(_DWORD *)(v23 + 3072) - 2) <= 3)
            {
              int v24 = v9[3];
              uint64_t v25 = *((void *)v24 + 379);
              *(_OWORD *)(v4 + 60) = *(_OWORD *)(v24 + 754);
              *(void *)(v4 + 76) = v25;
              double result = *((double *)v24 + 383);
              *(_OWORD *)(v4 + 100) = *((_OWORD *)v24 + 190);
              *(double *)(v4 + 116) = result;
              *(void *)(v4 + 84) = **v9;
            }
          }
        }
      }
    }
  }
  return result;
}

unint64_t BlueFin::GlPeKF::IsVdrValid(BlueFin::GlPeKF *this)
{
  int v1 = *((_DWORD *)this + 579);
  if (!v1 || v1 != 1 && (*(unsigned char *)(*(void *)(*((void *)this + 11543) + 160) + 2) & 1) == 0) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 11554);
  if (v2)
  {
    int v3 = *(_DWORD *)(*((void *)this + 11105) + 8);
    if ((v3 - 3) < 4 || v3 == 0) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
    }
    return 0;
  }
  unint64_t v6 = *(unsigned int *)((char *)this + *(void *)(*((void *)this + 3468) - 24) + 28000);
  if ((v6 & 8) == 0) {
    return 0;
  }
  return (v6 >> 2) & 1;
}

BOOL BlueFin::GlPeExtLoc::GetExtSensStatus(uint64_t a1, uint64_t a2, char a3, int a4, int a5)
{
  *(void *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  uint64_t v5 = *(void *)(a1 + 136);
  if (!v5) {
    return v5 != 0;
  }
  if ((*(unsigned char *)(v5 + 3008)
     && *(double *)(v5 + 3040) * *(double *)(v5 + 3040) + *(double *)(v5 + 3048) * *(double *)(v5 + 3048) < 160000.0
     || (int v9 = *(_DWORD *)(a1 + 8), v9 == 4)
     || v9 == 2)
    && (a3 & 1) == 0)
  {
    *(_DWORD *)(a2 + 12) = *(_DWORD *)(v5 + 3072);
    double v11 = *(double *)(v5 + 3032);
    int v10 = 4;
    if (v11 > -990.0 && *(double *)(v5 + 3064) > 0.0)
    {
      *(unsigned char *)(a2 + 8) = 1;
      *(_WORD *)(a2 + 10) = (int)v11;
    }
  }
  else
  {
    int v10 = 0;
  }
  if (*(unsigned char *)(v5 + 1161))
  {
    *(_WORD *)(a2 + 40) = (int)*(double *)(v5 + 1112);
    v10 |= 0x10u;
  }
  uint64_t v12 = *(void *)(a1 + 144);
  if (*(unsigned char *)(v12 + 34) && *(unsigned char *)(v12 + 32))
  {
    float v13 = (1.0 - pow(*(double *)v12 * 100.0 / *(double *)(v12 + 8), 0.190263)) * 44330.77;
    if (v13 <= 0.0)
    {
      if (v13 >= 0.0)
      {
        LOWORD(v16) = 0;
LABEL_21:
        *(_WORD *)(a2 + 92) = v16;
        v10 |= 0x80000u;
        goto LABEL_22;
      }
      double v14 = v13;
      double v15 = -0.5;
    }
    else
    {
      double v14 = v13;
      double v15 = 0.5;
    }
    int v16 = (int)(v14 + v15);
    goto LABEL_21;
  }
LABEL_22:
  if (*(unsigned char *)(v5 + 2985))
  {
    float v17 = *(double *)(v5 + 2944);
    if (v17 <= 0.0)
    {
      if (v17 >= 0.0)
      {
        LOWORD(v20) = 0;
LABEL_29:
        *(_WORD *)(a2 + 44) = v20;
        *(_DWORD *)(a2 + 48) = 2;
        v10 |= 0x20u;
        goto LABEL_30;
      }
      double v18 = v17;
      double v19 = -0.5;
    }
    else
    {
      double v18 = v17;
      double v19 = 0.5;
    }
    int v20 = (int)(v18 + v19);
    goto LABEL_29;
  }
LABEL_30:
  if (*(unsigned char *)(v5 + 4224))
  {
    *(_DWORD *)(a2 + 52) = *(__int16 *)(v5 + 4216);
    v10 |= 0x40u;
  }
  int v21 = v10 | 0x180;
  if (a4)
  {
    *(void *)(a2 + 56) = 0x100000001;
    *(_DWORD *)a2 = v21;
  }
  else
  {
    *(void *)(a2 + 56) = 0;
    *(_DWORD *)a2 = v21;
    if (a5)
    {
      __int16 v22 = *(_WORD *)(v5 + 2986);
      *(_DWORD *)(a2 + 60) = v22 & 1;
      if ((v22 & 2) != 0) {
        *(_DWORD *)(a2 + 56) = 1;
      }
    }
  }
  int v23 = *(unsigned __int8 *)(v5 + 188);
  *(_DWORD *)(a2 + 108) = v23;
  *(_DWORD *)(a2 + 112) = v23;
  if (*(unsigned char *)(v5 + 1225))
  {
    float v24 = *(double *)(v5 + 1184);
    *(float *)(a2 + 64) = v24;
    *(_DWORD *)(a2 + 68) = 2;
    int v21 = v10 | 0x380;
    *(_DWORD *)a2 = v10 | 0x380;
  }
  if (*(unsigned char *)(v5 + 1281))
  {
    float v25 = *(double *)(v5 + 1240);
    *(float *)(a2 + 72) = v25;
    *(_DWORD *)(a2 + 76) = 2;
    v21 |= 0x400u;
    *(_DWORD *)a2 = v21;
  }
  if (*(unsigned char *)(v5 + 4204))
  {
    *(_DWORD *)(a2 + 80) = *(_DWORD *)(v5 + 4200);
    v21 |= 0x1000u;
    *(_DWORD *)a2 = v21;
  }
  if (*(unsigned char *)(v5 + 4177))
  {
    *(_WORD *)(a2 + 84) = (int)*(float *)(v5 + 4144);
    v21 |= 0x2000u;
    *(_DWORD *)a2 = v21;
  }
  int v26 = *(_DWORD *)(v5 + 4264);
  *(_DWORD *)(a2 + 88) = v26;
  if (v26)
  {
    v21 |= 0x4000u;
    *(_DWORD *)a2 = v21;
  }
  int v27 = *(unsigned __int8 *)(v5 + 3231);
  *(unsigned char *)(a2 + 96) = v27;
  if (*(unsigned char *)(v5 + 3230))
  {
    int v28 = *(unsigned __int8 *)(v5 + 3228);
    if (*(unsigned char *)(v5 + 3228)) {
      int v29 = 2;
    }
    else {
      int v29 = v27;
    }
    int v30 = *(unsigned __int8 *)(v5 + 3229);
    if (*(unsigned char *)(v5 + 3229)) {
      int v27 = 2;
    }
    *(_DWORD *)(a2 + 100) = v29;
    *(_DWORD *)(a2 + 104) = v27;
    if (v30 | v28)
    {
      if (v28) {
        v21 |= 0x20000u;
      }
      if (v30) {
        v21 |= 0x40000u;
      }
      *(_DWORD *)a2 = v21;
    }
  }
  else
  {
    *(_DWORD *)(a2 + 100) = 0;
    *(_DWORD *)(a2 + 104) = 0;
  }
  return v5 != 0;
}

uint64_t BlueFin::GlPeKF::GetPosHulaSource(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a1 + 88564;
  uint64_t v5 = *a2;
  uint64_t v6 = (uint64_t)a2 + *(void *)(*a2 - 24);
  unsigned __int8 v7 = BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(v6 + 264));
  unsigned __int8 v8 = BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(v6 + 352));
  unsigned int v9 = (*(uint64_t (**)(uint64_t *))(v5 + 72))(a2);
  unsigned int v28 = 0;
  signed __int8 v27 = 0;
  (*(void (**)(uint64_t *, unsigned int *, signed __int8 *, uint64_t, uint64_t))(*a2 + 216))(a2, &v28, &v27, a1 + 92884, a1 + 92885);
  if (!(v7 | v8) && (v9 >= v28 || (*(unsigned int (**)(uint64_t *))(*a2 + 56))(a2) < 2)
    || *(unsigned char *)(v4 + 52))
  {
    int v10 = 0;
  }
  else if (v7 < v27)
  {
    int v10 = 1;
  }
  else
  {
    int v10 = 2;
  }
  int v11 = *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 256);
  int v12 = (16 * v11) & 0x80 | v10 | (v11 << 6) & 0x100;
  if (*(unsigned char *)(v4 + 12))
  {
    int v13 = v12 | 0x220;
  }
  else if (*(unsigned char *)(a1 + 92884))
  {
    int v13 = v12 | 0x200;
  }
  else if (*(unsigned char *)(a1 + 92885))
  {
    int v13 = v12 | 0x20;
  }
  else
  {
    int v13 = v12;
  }
  uint64_t v14 = *(void *)(v4 + 132);
  if (v14)
  {
    if (*(unsigned char *)(v14 + 3228)) {
      v13 |= 0x20000u;
    }
    if (*(unsigned char *)(v14 + 3229)) {
      v13 |= 0x40000u;
    }
    if (*(unsigned char *)(v14 + 1162))
    {
      if (*(unsigned char *)(v4 + 11)) {
        int v15 = 8;
      }
      else {
        int v15 = 16;
      }
      v13 |= v15;
    }
    if (*(unsigned char *)(v14 + 4224) && !*(unsigned char *)(v14 + 4226))
    {
      if (*(int *)(v14 + 4220) <= 3) {
        int v16 = 64;
      }
      else {
        int v16 = 0x100000;
      }
      v13 |= v16;
    }
    if (*(_DWORD *)(v14 + 4264)) {
      v13 |= 0x4000u;
    }
  }
  if (*(unsigned char *)(v4 + 13)) {
    int v17 = v13 | 0x800000;
  }
  else {
    int v17 = v13;
  }
  if (*(unsigned char *)(*(void *)(a1 + 88840) + 1804)) {
    unsigned int v18 = v17 | 0x400000;
  }
  else {
    unsigned int v18 = v17;
  }
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 27744) + 48))()) {
    uint64_t v19 = v18 | 0x200000;
  }
  else {
    uint64_t v19 = v18;
  }
  uint64_t v20 = *(void *)(v4 + 132);
  if (v20
    && *(unsigned char *)(v20 + 3008)
    && *(double *)(v20 + 3040) * *(double *)(v20 + 3040) + *(double *)(v20 + 3048) * *(double *)(v20 + 3048) < 160000.0)
  {
    int v21 = *(unsigned __int8 *)(v20 + 3009);
    if (*(unsigned char *)(v20 + 3009)) {
      BOOL v22 = 1;
    }
    else {
      BOOL v22 = *(_DWORD *)(v4 + 4) == 2;
    }
    int v25 = (*(uint64_t (**)(uint64_t *))(*a2 + 56))(a2);
    if (v22)
    {
      if (v21)
      {
        uint64_t v19 = v19 | 4;
        int v24 = 1;
        *(_DWORD *)(v4 + 4) = 1;
        goto LABEL_62;
      }
      return v19;
    }
    uint64_t v19 = v19 | 0x8000;
    int v24 = 4;
    *(_DWORD *)(v4 + 4) = 4;
    if (v25 != 1) {
      goto LABEL_62;
    }
    goto LABEL_60;
  }
  int v23 = *(_DWORD *)(v4 + 4);
  if (v23 != 2)
  {
    if (v23 != 4) {
      return v19;
    }
    uint64_t v19 = v19 | 0x8000;
    if ((*(unsigned int (**)(uint64_t *))(*a2 + 56))(a2) != 1)
    {
LABEL_61:
      int v24 = 4;
      goto LABEL_62;
    }
LABEL_60:
    if (*(_DWORD *)v4 == 1) {
      return v19;
    }
    goto LABEL_61;
  }
  uint64_t v19 = v19 | 0x10000;
  if ((*(unsigned int (**)(uint64_t *))(*a2 + 56))(a2) != 1 || *(_DWORD *)v4 != 1)
  {
    int v24 = 2;
LABEL_62:
    *(_DWORD *)uint64_t v4 = v24;
  }
  return v19;
}

uint64_t BlueFin::GlPeNavGnssKF::GetTimeSinceFullFixMs(BlueFin::GlPeNavGnssKF *this)
{
  int v1 = *((_DWORD *)this + 402);
  if (v1) {
    return (*(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 200) - v1);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t BlueFin::GlPeKfPool::GetTimeSinceFullFixMs(BlueFin::GlPeKfPool *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 7265) + 72))();
}

uint64_t BlueFin::GlPeNavGnssKF::GetInfoForPosHulaSource(uint64_t this, unsigned int *a2, unsigned __int8 *a3, BOOL *a4, BOOL *a5)
{
  *a2 = 5000;
  uint64_t v5 = *(void *)(this + 2272);
  if (*(__int16 *)(v5 + 2) < 1 || *(unsigned char *)(v5 + 45))
  {
    if (*(unsigned char *)(*(void *)(this + 2248) + 1989)) {
      LOBYTE(v6) = 1;
    }
    else {
      int v6 = *(_DWORD *)(this + 1800);
    }
  }
  else
  {
    LOBYTE(v6) = 5;
  }
  *a3 = v6;
  *a4 = *(unsigned char *)(this + 2168);
  *a5 = *(unsigned char *)(this + 2169);
  return this;
}

uint64_t BlueFin::GlPeKfPool::GetInfoForPosHulaSource(BlueFin::GlPeKfPool *this, unsigned int *a2, unsigned __int8 *a3, BOOL *a4, BOOL *a5)
{
  return (*(uint64_t (**)(void, unsigned int *, unsigned __int8 *, BOOL *, BOOL *))(**((void **)this + 7265)
                                                                                              + 216))(*((void *)this + 7265), a2, a3, a4, a5);
}

BOOL BlueFin::GlPeNavGnssKF::IsAdrUsed(BlueFin::GlPeNavGnssKF *this)
{
  return BlueFin::GlSetBase::HasAny((BlueFin::GlPeNavGnssKF *)((char *)this + *(void *)(*(void *)this - 24) + 440));
}

uint64_t BlueFin::GlPeKfPool::IsAdrUsed(BlueFin::GlPeKfPool *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 7265) + 48))();
}

uint64_t BlueFin::GlPeKF::GetPosConfidence(BlueFin::GlPeKF *this)
{
  uint64_t v2 = (char *)this + 92868;
  int v3 = (char *)this + 88573;
  __int16 v10 = 0;
  char v9 = 0;
  BlueFin::GlPeNavGnssMeasMgr::CountNewValidGnssMeas((uint64_t)this + 25120, (uint64_t)this + 92868, (unsigned char *)&v10 + 1, &v10, &v9, 1);
  char v4 = v2[5] + *v2;
  if (*((_DWORD *)this + 23084) <= 1u)
  {
    char v5 = *((unsigned char *)this + 1108);
  }
  else
  {
    v4 += v2[3];
    char v5 = *((unsigned char *)this + 1107) - 1;
  }
  int v6 = (char)(v4 - v5);
  if (v6 <= 1 && v3[1]) {
    return 0;
  }
  LODWORD(result) = (!*v3
                  || !BlueFin::GlPeExtLoc::IsPosLocMeasConfHighOrMedOrUnknown((BlueFin::GlPeKF *)((char *)this + 88560)))
                 && *((_DWORD *)this + 193) == *((_DWORD *)this + 192)
                 && BlueFin::GlPeKF::IsGood4Nav(this);
  if (v6 < 2)
  {
    if (v6 >= 0) {
      return 1;
    }
    else {
      return result;
    }
  }
  else if (v6 >= 4 {
         && (int v8 = *v2, v8 >= 1)
  }
         && *((unsigned char *)this + 1110)
         && (float)((float)SHIBYTE(v10) / (float)v8) < 0.15)
  {
    return 3;
  }
  else
  {
    return 2;
  }
}

BOOL BlueFin::GlPeExtLoc::IsPosLocMeasConfHighOrMedOrUnknown(BlueFin::GlPeExtLoc *this)
{
  uint64_t v1 = *((void *)this + 17);
  if (!v1
    || !*(unsigned char *)(v1 + 3008)
    || *(double *)(v1 + 3040) * *(double *)(v1 + 3040) + *(double *)(v1 + 3048) * *(double *)(v1 + 3048) >= 160000.0)
  {
    return 0;
  }
  int v2 = *(_DWORD *)(v1 + 3072);
  return !v2 || (v2 & 0xFFFFFFFE) == 2;
}

unint64_t BlueFin::GlPeNavGnssKF::GetTimeSinceResetS(BlueFin::GlPeNavGnssKF *this)
{
  return (*(unsigned int (**)(BlueFin::GlPeNavGnssKF *))(*(void *)this + 64))(this) / 0x3E8uLL;
}

BOOL BlueFin::GlPeNavGnssKF::IsExtLocAvailable(BlueFin::GlPeNavGnssKF *this, char a2)
{
  char v4 = (BlueFin::GlPeExtLoc *)*((void *)this + 282);
  int v5 = (*(uint64_t (**)(BlueFin::GlPeNavGnssKF *))(*(void *)this + 128))(this);
  int v6 = (*(uint64_t (**)(BlueFin::GlPeNavGnssKF *))(*(void *)this + 160))(this);
  BOOL result = BlueFin::GlPeExtLoc::IsPosLocMeasAvailable(v4, v5, v6, a2);
  if (result)
  {
    uint64_t v8 = *(void *)(*((void *)this + 282) + 136);
    return !v8 || *(unsigned char *)(v8 + 3009) == 0;
  }
  return result;
}

BOOL BlueFin::GlPeNavGnssKF::IsFirstFixConditionForExtLoc(BlueFin::GlPeNavGnssKF *this)
{
  int v2 = (int)(float)((float)(*(unsigned int (**)(BlueFin::GlPeNavGnssKF *))(*(void *)this + 64))(this)
                  / (float)(*((float *)this + 546) * 1000.0));
  int v3 = *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 200);
  unsigned int v4 = (v3 - (*(unsigned int (**)(BlueFin::GlPeNavGnssKF *))(*(void *)this + 80))(this)) >> 4;
  return v2 == 1 || v4 > 0x36A;
}

uint64_t BlueFin::GlPeNavGnssKF::GetTimeSinceResetMs(BlueFin::GlPeNavGnssKF *this)
{
  return (**((_DWORD **)this + 1) - *((_DWORD *)this + 369));
}

uint64_t BlueFin::GlPeNavGnssKF::GetTimeFullFixMs(BlueFin::GlPeNavGnssKF *this)
{
  return *((unsigned int *)this + 402);
}

BOOL BlueFin::GlPeNavGnssKF::IsKFConverged(BlueFin::GlPeNavGnssKF *this)
{
  return (*(float (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 16))((char *)this + *(void *)(*(void *)this - 24)) <= 50.0;
}

float BlueFin::GlPeNavGnssState::GetEstPosErr(BlueFin::GlPeNavGnssState *this)
{
  return *((float *)this + 20);
}

BOOL BlueFin::GlPeExtLoc::IsPosLocMeasAvailable(BlueFin::GlPeExtLoc *this, int a2, int a3, char a4)
{
  uint64_t v4 = *((void *)this + 17);
  return v4
      && *(unsigned char *)(v4 + 3008)
      && *(double *)(v4 + 3040) * *(double *)(v4 + 3040) + *(double *)(v4 + 3048) * *(double *)(v4 + 3048) < 160000.0
      && !BlueFin::GlPeExtLoc::WaitPosLocVerification(this, a2, a3, a4);
}

BOOL BlueFin::GlPeExtLoc::WaitPosLocVerification(BlueFin::GlPeExtLoc *this, int a2, int a3, char a4)
{
  BOOL v4 = (a2 ^ 1 | a3) != 1 || *((unsigned char *)this + 12) == 0;
  BOOL result = 0;
  if (!v4)
  {
    uint64_t v5 = *((void *)this + 17);
    if (v5)
    {
      if (*(unsigned char *)(v5 + 3008))
      {
        if (*(double *)(v5 + 3040) * *(double *)(v5 + 3040) + *(double *)(v5 + 3048) * *(double *)(v5 + 3048) < 160000.0)
        {
          int v6 = *(_DWORD *)(v5 + 3072);
          if (v6 == 1 || v6 == 2 && (a4 & 1) == 0) {
            return 1;
          }
        }
      }
    }
  }
  return result;
}

uint64_t BlueFin::GlPeKfPool::GetTimeSinceResetS(BlueFin::GlPeKfPool *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 7265) + 56))();
}

uint64_t BlueFin::GlPeLsq::LsVel(uint64_t a1, uint64_t a2)
{
  int v2 = (BlueFin::GlPeMsmtMgr **)MEMORY[0x270FA5388](a1, a2);
  double v7 = v6;
  uint64_t v8 = v2;
  uint64_t v9 = 0;
  uint64_t v73 = *MEMORY[0x263EF8340];
  do
  {
    __int16 v10 = (char *)&v59[1] + v9 + 12;
    v10[32] = 0;
    *((_DWORD *)v10 + 9) = -1;
    *((_WORD *)v10 + 20) = 575;
    v9 += 56;
  }
  while (v9 != 896);
  uint64_t v42 = v3;
  uint64_t v43 = v5;
  for (uint64_t i = 0; i != 564; i += 3)
  {
    int v12 = &v65[i];
    *(unsigned char *)int v12 = 0;
    v12[1] = -1;
    *((_WORD *)v12 + 4) = 575;
  }
  int v13 = (int **)((char *)*v2 + 8);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)v52, 0x13u, v4);
  uint64_t v54 = &v56;
  LOBYTE(v55) = 19;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  memset(v59, 0, 28);
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)&v54, v13);
  BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)&v54);
  v52[1] = v57;
  v52[2] = v58;
  *(_OWORD *)int v53 = v59[0];
  *(_OWORD *)&unsigned char v53[12] = *(_OWORD *)((char *)v59 + 12);
  v52[0] = v56;
  LOBYTE(v54) = v51;
  memcpy(&v55, __src, 4 * v51);
  WORD1(v54) = 0;
  BYTE1(v54) = 0;
  HIDWORD(v54) = v55;
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v54);
  unsigned __int8 v15 = 0;
  if (BYTE1(v54) != v54)
  {
    unsigned __int8 v15 = 0;
    while (1)
    {
      __int16 v16 = WORD1(v54);
      if (WORD1(v54) >= 0x23FuLL) {
        break;
      }
      int v17 = *v8;
      unsigned int v18 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * WORD1(v54);
      char v19 = *v18;
      int v20 = v18[1];
      LOBYTE(__src) = *v18;
      HIDWORD(__src) = v20;
      __int16 v51 = WORD1(v54);
      PeMeas = (BlueFin::stPeSigMeasKF *)BlueFin::GlPeMsmtMgr::GetPeMeas(v17, (const BlueFin::GlSignalId *)&__src, 0);
      if (BlueFin::stPeSigMeasKF::IsRRValid(PeMeas))
      {
        BOOL v22 = &v65[3 * v15];
        *(unsigned char *)BOOL v22 = v19;
        v22[1] = v20;
        *((_WORD *)v22 + 4) = v16;
        int v23 = *v8;
        LOBYTE(__src) = v19;
        HIDWORD(__src) = v20;
        __int16 v51 = v16;
        *((_DWORD *)&v62 + v15++) = *((_DWORD *)BlueFin::GlPeMsmtMgr::GetMeMeas(v23, (const BlueFin::GlSignalId *)&__src, 0, 0)+ 25);
      }
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v54);
      if (BYTE1(v54) == v54) {
        goto LABEL_11;
      }
    }
    unsigned int v39 = "usIndex < NUM_SIGNAL_IDS";
    DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
    int v40 = "glsignalid.h";
    int v41 = 577;
LABEL_40:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v40, v41, v39);
  }
LABEL_11:
  uint64_t v24 = v15;
  BlueFin::GlSortFloats((uint64_t)&v62, (const float *)v24, v61, v14);
  if ((v15 & 0xF0) != 0) {
    char v25 = 16;
  }
  else {
    char v25 = v24;
  }
  if (v24)
  {
    uint64_t v26 = 0;
    LOBYTE(v27) = 0;
    do
    {
      unsigned int v28 = &v65[3 * v61[v26]];
      LOBYTE(v54) = *(unsigned char *)v28;
      HIDWORD(v54) = v28[1];
      LOWORD(v55) = *((_WORD *)v28 + 4);
      if (BlueFin::GlPeLsq::PackSkfMeas_RR_SignalId(v8, (uint64_t)&v59[1] + 56 * (char)v27 + 12, (BlueFin::GlSignalId *)&v54))
      {
        int v27 = (char)(v27 + 1);
        if (v27 >= v25) {
          break;
        }
      }
      ++v26;
    }
    while (v15 != v26);
    if ((char)v27 < 3)
    {
      return 0;
    }
    else
    {
      *(_DWORD *)(v43 + 1704) = *(_DWORD *)*v8;
      if ((*(unsigned char *)(v42 + 26) & 2) != 0)
      {
        int v29 = v8[4];
        if (!v29)
        {
          unsigned int v39 = "m_pOscMgr";
          DeviceFaultNotify("glpe_lsq.cpp", 1796, "LsVel", (char)"m_pOscMgr");
          int v40 = "glpe_lsq.cpp";
          int v41 = 1796;
          goto LABEL_40;
        }
        double v30 = (double)*((__int16 *)v29 + 1) * 0.000000001;
        double v31 = (double)*((__int16 *)v29 + 5) * 0.000000001;
        if (BlueFin::GlUtils::m_ucEnabled) {
          BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
        }
        double v32 = v31 * 299792458.0 * (v31 * 299792458.0);
        if (v7 > 0.0) {
          double v32 = v7;
        }
        *(double *)(v43 + 24) = v30 * 299792458.0;
        *(double *)(v43 + 32) = v32;
      }
      *(int64x2_t *)(v43 + 40) = vdupq_n_s64(0x4079000000000000uLL);
      *(_DWORD *)(v43 + 64) = 16;
      uint64_t v33 = *(void *)(v43 + 56);
      *(_OWORD *)(v33 + 120) = 0u;
      *(_OWORD *)(v33 + 104) = 0u;
      *(_OWORD *)(v33 + 88) = 0u;
      *(_OWORD *)(v33 + 72) = 0u;
      *(_OWORD *)(v33 + 56) = 0u;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 24) = 0u;
      *(_OWORD *)(v33 + 8) = 0u;
      LOBYTE(__src) = v27;
      uint64_t v24 = BlueFin::GlPeLsq::rr2Vel((uint64_t)v8, v42);
      if ((*(unsigned char *)(v42 + 24) & 0x40) != 0)
      {
        float v62 = v64;
        char v63 = 19;
        memset(v64, 0, 76);
        if ((char)__src >= 1)
        {
          uint64_t v34 = __src;
          __int16 v35 = &v60;
          do
          {
            if (*v35 == 2) {
              v64[*((__int16 *)v35 - 2) >> 5] |= 1 << *((_WORD *)v35 - 2);
            }
            v35 += 14;
            --v34;
          }
          while (v34);
        }
        int v36 = v8[1];
        int v44 = 0;
        int v45 = v47;
        char v46 = 8;
        memset(v47, 0, 32);
        *(_OWORD *)&v47[9] = xmmword_263BBA380;
        int32x2_t v48 = vdup_n_s32(0x42C60000u);
        int v49 = 1120272384;
        BlueFin::stDops::stDops((uint64_t)v65, (uint64_t)&v44);
        unsigned __int8 v72 = v36;
        uint64_t v37 = *(unsigned int *)*v8;
        BlueFin::GlSignalIdSet::GetSvIdSet((BlueFin::GlSignalIdSet *)&v62, (uint64_t)&v54);
        BlueFin::GlPeDops::GetDops((uint64_t)v65, v37);
        BlueFin::stDops::operator=(v43 + 1712, (uint64_t)v61);
        *(_DWORD *)(v43 + 1712) = v37;
        if (*(float *)(v43 + 1772) < 40.0) {
          return v24;
        }
        else {
          return 0;
        }
      }
      else
      {
        v65[0] = 0;
        float v66 = v68;
        char v67 = 8;
        memset(v68, 0, 32);
        long long v69 = xmmword_263BBA380;
        int32x2_t v70 = vdup_n_s32(0x42C60000u);
        int v71 = 1120272384;
        BlueFin::stDops::operator=(v43 + 1712, (uint64_t)v65);
      }
    }
  }
  return v24;
}

void BlueFin::GlPeLsq::LsPosFinish(unsigned int **a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, unsigned char *a10)
{
  unint64_t v15 = *a4;
  if (*a4 < 1)
  {
    BOOL v16 = 0;
  }
  else if (*(_DWORD *)(a5 + 44) == 3)
  {
    BOOL v16 = 1;
  }
  else
  {
    unint64_t v17 = 0;
    unsigned int v18 = (int *)(a5 + 100);
    while (v15 - 1 != v17)
    {
      int v19 = *v18;
      v18 += 14;
      ++v17;
      if (v19 == 3) {
        goto LABEL_10;
      }
    }
    unint64_t v17 = *a4;
LABEL_10:
    BOOL v16 = v17 < v15;
  }
  char v20 = v15 - 5;
  int v21 = *(unsigned char **)(a2 + 56);
  if (v21)
  {
    if (*v21)
    {
      char v22 = v15 - 7;
      if (v21[72] == 1) {
        char v20 = v22;
      }
    }
  }
  int v44 = *(_DWORD *)(a2 + 48);
  BOOL v23 = v20 < 2;
  uint64_t v24 = a1[1];
  int v49 = 0;
  int v50 = v52;
  char v51 = 8;
  memset(v52, 0, 32);
  long long v53 = xmmword_263BBA380;
  int32x2_t v54 = vdup_n_s32(0x42C60000u);
  int v55 = 1120272384;
  BlueFin::stDops::stDops((uint64_t)v56, (uint64_t)&v49);
  long long v57 = v24;
  if (*((unsigned char *)a1[2] + 48)) {
    int v25 = (*(_DWORD *)(a2 + 48) >> 9) & 1 | 2;
  }
  else {
    int v25 = (*(_DWORD *)(a2 + 48) >> 9) & 1;
  }
  if (*a10) {
    v25 |= 8u;
  }
  if (v16 && v23) {
    int v26 = 16;
  }
  else {
    int v26 = 0;
  }
  int v27 = v25 | v26;
  uint64_t v28 = **a1;
  BlueFin::GlSignalIdSet::GetSvIdSet((BlueFin::GlSignalIdSet *)a3, (uint64_t)v48);
  double v47 = *(double *)(a2 + 32) + *(double *)(*a9 + 40);
  int v46 = v27;
  BlueFin::GlPeDops::GetDops((uint64_t)v56, v28);
  BlueFin::stDops::operator=(a7 + 136, (uint64_t)v45);
  *(_OWORD *)a7 = *(_OWORD *)a8;
  *(void *)(a7 + 16) = *(void *)(a8 + 16);
  uint64_t v29 = *a9;
  *(double *)(a7 + 24) = *(double *)(a2 + 32) + *(double *)(*a9 + 40);
  *(double *)(a7 + 32) = *(double *)(v29 + 64) + (double)*(int *)(a2 + 40) * 0.001;
  *(unsigned char *)(a7 + 224) = 1;
  unsigned int v30 = BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)a3);
  if (!v30)
  {
    DeviceFaultNotify("glpe_lsq.cpp", 1270, "LsPosFinish", (char)"ucCnt > 0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_lsq.cpp", 1270, "ucCnt > 0");
  }
  float v31 = *(float *)(a7 + 196);
  int v32 = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a7 + 40) = (v44 & 0x300) == 512;
  BlueFin::GlSetBase::operator=(a7 + 48, a3);
  *(_OWORD *)(a7 + 60) = *(_OWORD *)(a3 + 12);
  long long v33 = *(_OWORD *)(a3 + 28);
  long long v34 = *(_OWORD *)(a3 + 44);
  long long v35 = *(_OWORD *)(a3 + 60);
  *(_OWORD *)(a7 + 120) = *(_OWORD *)(a3 + 72);
  *(_OWORD *)(a7 + 108) = v35;
  *(_OWORD *)(a7 + 92) = v34;
  *(_OWORD *)(a7 + 76) = v33;
  double RngUncMetric = BlueFin::stLsPosState::GetRngUncMetric((BlueFin::stLsPosState *)a7);
  BOOL v37 = 0;
  if ((v44 & 0x300) == 0x200 && v30 <= 5) {
    BOOL v37 = fabs(*(double *)(a7 + 32)) >= 100.0;
  }
  double v38 = *(float *)(a7 + 196);
  double v39 = RngUncMetric * v38;
  if (*(double *)(a7 + 232) * v38 >= v39) {
    double v39 = *(double *)(a7 + 232) * v38;
  }
  double v40 = 400.0;
  if ((~v32 & 0x140000) == 0) {
    double v40 = 600.0;
  }
  BOOL v41 = v31 >= 40.0;
  if (v39 > v40) {
    BOOL v41 = 1;
  }
  char v42 = ((int)*(double *)(a7 + 16) - 160000) < 0xFFFD8B19 || v41;
  char v43 = (v42 | v37) ^ 1;
  *(unsigned char *)(a7 + 225) = v43;
  *(unsigned char *)(a7 + 226) = v43;
}

uint64_t BlueFin::stDops::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  BlueFin::GlSetBase::operator=(a1 + 8, a2 + 8);
  long long v4 = *(_OWORD *)(a2 + 20);
  *(_OWORD *)(a1 + 36) = *(_OWORD *)(a2 + 36);
  *(_OWORD *)(a1 + 20) = v4;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return a1;
}

unsigned __int8 *BlueFin::GlPeNavGnssMeasMgr::CountNewValidGnssMeas(uint64_t a1, uint64_t a2, unsigned char *a3, unsigned char *a4, unsigned char *a5, int a6)
{
  *a3 = 0;
  *a4 = 0;
  *a5 = 0;
  uint64_t v10 = *(void *)(a1 + 40);
  unsigned int v11 = 19;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v42, v44, 0x13u, (const void **)(*(void *)(a1 + 8) + 184));
  int v12 = v41;
  double v39 = v41;
  unsigned __int8 v40 = 19;
  memset(v41, 0, sizeof(v41));
  unsigned __int8 v34 = v43;
  memcpy(v38, v42, 4 * v43);
  unsigned __int16 v36 = 0;
  unsigned __int8 v35 = 0;
  int v37 = v38[0];
  BlueFin::GlSetIterator::operator++(&v34);
  if (v35 != v34)
  {
    do
    {
      unsigned int v13 = v36;
      if (v36 >= 0x23FuLL)
      {
LABEL_53:
        DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
      }
      if ((!a6
         || BlueFin::GlPeTimeManager::GetSystemConversionUncUs(*(void *)(a1 + 32), BlueFin::GlSvId::s_aucSvId2gnss[*((unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId+ 2 * v36)]) <= 0.01)&& (((unint64_t)*(unsigned int *)(*(void *)(*(void *)(a1 + 8) + 8) + 4 * (v13 >> 5)) >> (v13 & 0x1F)) & 1) != 0)
      {
        *(_DWORD *)&v39[4 * (v13 >> 5)] |= 1 << (v13 & 0x1F);
      }
      BlueFin::GlSetIterator::operator++(&v34);
    }
    while (v35 != v34);
    unsigned int v11 = v40;
    int v12 = v39;
  }
  unsigned __int8 v34 = v11;
  size_t v14 = 4 * v11;
  memcpy(v38, v12, v14);
  unsigned __int16 v36 = 0;
  unsigned __int8 v35 = 0;
  int v37 = v38[0];
  BlueFin::GlSetIterator::operator++(&v34);
  if (v35 != v34)
  {
    do
    {
      if (v36 >= 0x23FuLL) {
        goto LABEL_53;
      }
      unint64_t v15 = (unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v36;
      unsigned __int8 v16 = *v15;
      LODWORD(v15) = (char)v15[1];
      v31[0] = v16;
      int v32 = (int)v15;
      unsigned __int16 v33 = v36;
      PeMeas = (BlueFin::stPeSigMeasKF *)BlueFin::GlPeMsmtMgr::GetPeMeas(*(BlueFin::GlPeMsmtMgr **)(a1 + 8), (const BlueFin::GlSignalId *)v31, 0);
      if (BlueFin::stPeSigMeasKF::IsPRValidForNav(PeMeas))
      {
        if ((*((unsigned char *)PeMeas + 72) & 8) == 0)
        {
          AidBySvId = BlueFin::GlPeSatAidInfo::GetAidBySvId(v10 + 32, v31);
          if (AidBySvId)
          {
            if (*((__int16 *)AidBySvId + 37) <= 25
              && *((float *)BlueFin::GlPeMsmtMgr::GetMeMeas(*(BlueFin::GlPeMsmtMgr **)(a1 + 8), (const BlueFin::GlSignalId *)v31, 0, 0)+ 27) < 35.0)
            {
              ++*a5;
            }
          }
        }
      }
      BlueFin::GlSetIterator::operator++(&v34);
    }
    while (v35 != v34);
    LOBYTE(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v40;
    int v12 = v39;
    size_t v14 = 4 * v40;
  }
  unsigned __int8 v34 = v11;
  memcpy(v38, v12, v14);
  unsigned __int16 v36 = 0;
  unsigned __int8 v35 = 0;
  int v37 = v38[0];
  BOOL result = BlueFin::GlSetIterator::operator++(&v34);
  if (v35 != v34)
  {
    while (1)
    {
      if (v36 >= 0x23FuLL) {
        goto LABEL_53;
      }
      char v20 = (unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v36;
      unsigned __int8 v21 = *v20;
      LODWORD(v20) = (char)v20[1];
      v31[0] = v21;
      int v32 = (int)v20;
      unsigned __int16 v33 = v36;
      char v22 = (BlueFin::stPeSigMeasKF *)BlueFin::GlPeMsmtMgr::GetPeMeas(*(BlueFin::GlPeMsmtMgr **)(a1 + 8), (const BlueFin::GlSignalId *)v31, 0);
      if (BlueFin::stPeSigMeasKF::IsPRValid(v22))
      {
        if ((*((unsigned char *)v22 + 72) & 8) == 0) {
          break;
        }
      }
LABEL_42:
      if (BlueFin::stPeSigMeasKF::IsRRValid(v22)
        && (*((unsigned char *)v22 + 72) & 0x40) == 0
        && (!a6 || BlueFin::stPeSigMeasKF::IsRRValidForNav(v22)))
      {
        ++*(unsigned char *)(a2 + 1);
      }
      BOOL result = BlueFin::GlSetIterator::operator++(&v34);
      if (v35 == v34) {
        return result;
      }
    }
    MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas(*(BlueFin::GlPeMsmtMgr **)(a1 + 8), (const BlueFin::GlSignalId *)v31, 0, 0);
    if (a6)
    {
      if (!BlueFin::stPeSigMeasKF::IsPRValidForNav(v22)) {
        goto LABEL_36;
      }
      ++*(unsigned char *)a2;
      int v24 = *((_DWORD *)MeMeas + 5);
      if (v24 >= 3)
      {
        ++*a3;
        int v24 = *((_DWORD *)MeMeas + 5);
        if (v24 >= 4)
        {
          ++*a4;
          int v24 = *((_DWORD *)MeMeas + 5);
        }
      }
      int v25 = *((_DWORD *)v22 + 18);
      if (v24 > 3 || v24 == 0)
      {
        if ((v25 & 0x80) == 0) {
          goto LABEL_36;
        }
      }
      else if ((v25 & 0x80) == 0)
      {
        ++*(unsigned char *)(a2 + 6);
        float v28 = *((float *)MeMeas + 27);
        if (v28 < *(float *)(a2 + 8)) {
          *(float *)(a2 + 8) = v28;
        }
        goto LABEL_36;
      }
      ++*(unsigned char *)(a2 + 7);
    }
    else
    {
      ++*(unsigned char *)a2;
    }
LABEL_36:
    BOOL v27 = (~*((_DWORD *)MeMeas + 3) & 0x30) != 0 || (*((_DWORD *)MeMeas + 3) & 0xC) == 0;
    if (!v27 && v31[0] - 52 <= 0xFFFFFFEC) {
      ++*(unsigned char *)(a2 + 4);
    }
    goto LABEL_42;
  }
  return result;
}

unint64_t BlueFin::stPeSigMeasKF::IsRRValid(BlueFin::stPeSigMeasKF *this)
{
  if ((*((unsigned char *)this + 72) & 0x10) == 0) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 37);
  if (v2) {
    return BlueFin::stSkfTestParam::UseSigId(*((BlueFin::stSkfTestParam **)this + 37), (BlueFin::stPeSigMeasKF *)((char *)this + 252), (const BlueFin::GlSignalIdSet *)(v2 + 200), (const BlueFin::GlSignalIdSet *)(v2 + 464));
  }
  else {
    return 1;
  }
}

unint64_t BlueFin::stPeSigMeasKF::IsPRValidForNav(BlueFin::stPeSigMeasKF *this)
{
  if ((*((unsigned char *)this + 72) & 4) == 0) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 37);
  if (v2) {
    return BlueFin::stSkfTestParam::UseSigId(*((BlueFin::stSkfTestParam **)this + 37), (BlueFin::stPeSigMeasKF *)((char *)this + 252), (const BlueFin::GlSignalIdSet *)(v2 + 112), (const BlueFin::GlSignalIdSet *)(v2 + 376));
  }
  else {
    return 1;
  }
}

unint64_t BlueFin::stSkfTestParam::UseSigId(BlueFin::stSkfTestParam *this, const BlueFin::GlSignalId *a2, const BlueFin::GlSignalIdSet *a3, const BlueFin::GlSignalIdSet *a4)
{
  if (BlueFin::GlSetBase::HasAny(a3) && BlueFin::stSkfTestParam::InSatCommandedTimeRange(this)) {
    return ((unint64_t)*(unsigned int *)(*(void *)a3 + 4 * (*((__int16 *)a2 + 4) >> 5)) >> (*((_WORD *)a2 + 4) & 0x1F)) & 1;
  }
  if (BlueFin::GlSetBase::HasAny(a4) && BlueFin::stSkfTestParam::InSatCommandedTimeRange(this)) {
    return (((unint64_t)*(unsigned int *)(*(void *)a4 + 4 * (*((__int16 *)a2 + 4) >> 5)) >> (*((_WORD *)a2 + 4) & 0x1F)) & 1) == 0;
  }
  return 1;
}

uint64_t BlueFin::GlSortFloats(uint64_t this, const float *a2, unsigned char *a3, unsigned __int8 *a4)
{
  *a3 = 0;
  if (a2 >= 2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 1;
    do
    {
      float v6 = *(float *)(this + 4 * v5);
      uint64_t v7 = v4;
      while (1)
      {
        uint64_t v8 = a3[v7];
        if (*(float *)(this + 4 * v8) <= v6) {
          break;
        }
        a3[v7 + 1] = v8;
        if (!(unint64_t)v7--)
        {
          unsigned __int8 v10 = 0;
          goto LABEL_8;
        }
      }
      unsigned __int8 v10 = v7 + 1;
LABEL_8:
      a3[v10] = v5++;
      ++v4;
    }
    while (v5 != a2);
  }
  return this;
}

BOOL BlueFin::GlPeLsq::PackSkfMeas_RR_SignalId(BlueFin::GlPeMsmtMgr **a1, uint64_t a2, BlueFin::GlSignalId *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (1 << (*((_WORD *)a3 + 4) & 0x1F)) & *(unsigned int *)(*((void *)v4 + 1) + 4 * (*((__int16 *)a3 + 4) >> 5));
  if (v5)
  {
    MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas(v4, a3, 0, 0);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 32) = 0;
    *(_WORD *)(a2 + 49) = 0;
    *(_DWORD *)(a2 + 36) = -1;
    *(_WORD *)(a2 + 40) = 575;
    *(_DWORD *)(a2 + 44) = 2;
    *(void *)(a2 + 16) = *(unsigned int *)*a1;
    if ((BlueFin::GlSignalId *)(a2 + 32) != a3)
    {
      *(unsigned char *)(a2 + 32) = *(unsigned char *)a3;
      *(_DWORD *)(a2 + 36) = *((_DWORD *)a3 + 1);
      *(_WORD *)(a2 + 40) = *((_WORD *)a3 + 4);
    }
    v9.f32[0] = -*((float *)MeMeas + 24);
    v9.i32[1] = *((_DWORD *)MeMeas + 25);
    *(float64x2_t *)a2 = vmulq_f64(vcvtq_f64_f32(v9), (float64x2_t)vdupq_n_s64(0x41B1DE784A000000uLL));
    *(unsigned char *)(a2 + 48) = 1;
    *(void *)(a2 + 24) = -1;
  }
  return v5 != 0;
}

unint64_t BlueFin::stPeSigMeasKF::IsRRValidForNav(BlueFin::stPeSigMeasKF *this)
{
  if ((*((unsigned char *)this + 72) & 0x20) == 0) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 37);
  if (v2) {
    return BlueFin::stSkfTestParam::UseSigId(*((BlueFin::stSkfTestParam **)this + 37), (BlueFin::stPeSigMeasKF *)((char *)this + 252), (const BlueFin::GlSignalIdSet *)(v2 + 200), (const BlueFin::GlSignalIdSet *)(v2 + 464));
  }
  else {
    return 1;
  }
}

void BlueFin::GlMeSrdAsicConfig::SetHwAsicVersion(BlueFin::GlMeSrdAsicConfig *this, int a2)
{
  *((_DWORD *)this + 3) = a2;
  uint64_t v3 = (*(uint64_t (**)(BlueFin::GlMeSrdAsicConfig *))(*(void *)this + 184))(this);
  if (*((unsigned char *)this + 1212)) {
    uint64_t v4 = (BlueFin::GlMeSrdAsicConfig *)*((unsigned int *)this + 304);
  }
  else {
    uint64_t v4 = (BlueFin::GlMeSrdAsicConfig *)v3;
  }
  *((_DWORD *)this + 4) = v4;
  unint64_t v17 = &v19;
  char v18 = 2;
  uint64_t v19 = 0;
  for (unsigned int i = 1; i != 13; ++i)
  {
    if (BlueFin::GlMeSrdAsicConfig::IsFeatureSupported(i, (int)v4)) {
      *((_DWORD *)v17 + (i >> 5)) |= 1 << i;
    }
    else {
      BlueFin::GlSetBase::Remove((uint64_t)&v17, (__int16)i);
    }
  }
  uint64_t v6 = BlueFin::GlSetBase::operator=((uint64_t)this + 1616, (uint64_t)&v17);
  *(void *)(v6 + 12) = v19;
  int v7 = *((_DWORD *)this + 7);
  if (!v7)
  {
    unint64_t v15 = "m_ulFreqHz > 0";
    DeviceFaultNotify("glmesrd_asic_config.cpp", 1028, "SetHwAsicVersion", (char)"m_ulFreqHz > 0");
    int v16 = 1028;
    goto LABEL_48;
  }
  *((_WORD *)this + 36) = 20;
  *((void *)this + 8) = 0x6400100000006ELL;
  int v8 = *((_DWORD *)this + 3);
  if (v8 == 0x7FFFFFFF)
  {
    *(_OWORD *)((char *)this + 40) = xmmword_263BAC0C0;
    *((_DWORD *)this + 17) = 1179666;
    *((_WORD *)this + 36) = 0;
    *((unsigned char *)this + 268) = 1;
    *((_DWORD *)this + 68) = -1055307858;
    *(_OWORD *)((char *)this + 276) = xmmword_263BAC1C4;
    *(_OWORD *)((char *)this + 292) = unk_263BAC1D4;
    *(_OWORD *)((char *)this + 308) = xmmword_263BAC1E4;
    *(void *)((char *)this + 324) = 0xBF0CCCCD3EB33333;
    goto LABEL_42;
  }
  *((unsigned char *)this + 1488) = 0;
  if ((int)v4 > 822018065)
  {
    if ((int)v4 <= 822083604)
    {
      switch((int)v4)
      {
        case 822018066:
        case 822018068:
          goto LABEL_16;
        case 822018067:
        case 822018069:
          goto LABEL_31;
        default:
          goto LABEL_51;
      }
    }
    if (v4 == 822083605 || v4 == 838795285) {
      goto LABEL_31;
    }
    int v10 = 838729749;
LABEL_30:
    if (v4 == v10)
    {
LABEL_31:
      if (v7 == 52000000 || v7 == 26000000)
      {
        int v12 = (double *)((char *)&unk_263BAC0B0 + 8 * ((v8 & 0xF000FFFE) == 805306386));
        if (*((_DWORD *)this + 546) == 4) {
          int v12 = (double *)((char *)&unk_263BAC0A0 + 8 * ((v8 & 0xF000FFFE) == 805306386));
        }
        double v13 = *v12;
        *((double *)this + 5) = *v12;
        double v11 = v13 / 3.0;
        goto LABEL_38;
      }
      if (v7 == 10000000)
      {
        *((void *)this + 5) = 0x419796AA70000000;
        double v11 = 32979166.7;
LABEL_38:
        *((double *)this + 6) = v11;
        *((_DWORD *)this + 358) = 268441866;
        *((unsigned char *)this + 1480) = 1;
        *((unsigned char *)this + 1493) = BlueFin::GlMeSrdAsicConfig::Is4753A3OrLater(v4);
        *((unsigned char *)this + 1602) = BlueFin::GlMeSrdAsicConfig::PlatformSupportsHealthProfile(v4);
        *((_DWORD *)this + 16) = 211;
        *((_WORD *)this + 34) = 16;
        if (BlueFin::GlMeObjFactory::m_ptObjFactory) {
          int v14 = *(_DWORD *)(BlueFin::GlMeObjFactory::m_ptObjFactory + 44);
        }
        else {
          LOWORD(v14) = 100;
        }
        *((_WORD *)this + 35) = v14;
        *((_WORD *)this + 36) = 0;
        *((unsigned char *)this + 268) = 1;
        *((unsigned char *)this + 22) = 0;
        BlueFin::GlMeSrdAsicConfig::ComputeSignalDelays(this);
        goto LABEL_42;
      }
      unint64_t v15 = "0";
      DeviceFaultNotify("glmesrd_asic_config.cpp", 1144, "SetHwAsicVersion", (char)"0");
      int v16 = 1144;
    }
    else
    {
LABEL_51:
      unint64_t v15 = "0";
      DeviceFaultNotify("glmesrd_asic_config.cpp", 1659, "SetHwAsicVersion", (char)"0");
      int v16 = 1659;
    }
LABEL_48:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_config.cpp", v16, v15);
  }
  switch((int)v4)
  {
    case 805306386:
    case 805306388:
LABEL_16:
      if (v7 == 10000000)
      {
        double v9 = 98937500.0;
      }
      else
      {
        if (v7 != 52000000 && v7 != 26000000)
        {
          unint64_t v15 = "0";
          DeviceFaultNotify("glmesrd_asic_config.cpp", 1195, "SetHwAsicVersion", (char)"0");
          int v16 = 1195;
          goto LABEL_48;
        }
        double v9 = 98962500.0;
      }
      *((double *)this + 5) = v9;
      *((double *)this + 6) = v9 / 3.0;
      *((_DWORD *)this + 358) = 268441866;
      *((unsigned char *)this + 1480) = 1;
      *((unsigned char *)this + 1493) = BlueFin::GlMeSrdAsicConfig::Is4753A3OrLater(v4);
      *((unsigned char *)this + 1602) = BlueFin::GlMeSrdAsicConfig::PlatformSupportsHealthProfile(v4);
      *((void *)this + 8) = 0x1600100000006CLL;
      *((_WORD *)this + 36) = 2;
      *((unsigned char *)this + 268) = 1;
      *((unsigned char *)this + 22) = 1;
      if ((*(uint64_t (**)(BlueFin::GlMeSrdAsicConfig *))(*(void *)this + 40))(this))
      {
        BlueFin::GlMeSrdAsicConfig::ComputeSignalDelays(this);
      }
      else
      {
        *((_DWORD *)this + 68) = 1094713344;
        *(_OWORD *)((char *)this + 276) = 0u;
        *(_OWORD *)((char *)this + 292) = 0u;
        *(_OWORD *)((char *)this + 308) = 0u;
        *(void *)((char *)this + 324) = 0;
        *((_DWORD *)this + 84) = 0;
        (*(void (**)(BlueFin::GlMeSrdAsicConfig *, float))(*(void *)this + 1296))(this, 5.5);
        *((void *)this + 43) = 1085276160;
        *((_DWORD *)this + 83) = 1104150528;
      }
      if (BlueFin::GlUtils::m_ucEnabled) {
        BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0xFF);
      }
LABEL_42:
      if (*((unsigned __int16 *)this + 35) >= 0x65u)
      {
        unint64_t v15 = "m_usMaxNumParallelTrks <= GlMeSrdAsicConfigConstants::DEFAULT_MAX_NUM_PARALLEL_TRKS";
        DeviceFaultNotify("glmesrd_asic_config.cpp", 1681, "SetHwAsicVersion", (char)"m_usMaxNumParallelTrks <= GlMeSrdAsicConfigConstants::DEFAULT_MAX_NUM_PARALLEL_TRKS");
        int v16 = 1681;
        goto LABEL_48;
      }
      if (*((unsigned char *)this + 1204))
      {
        GlCustomLog(12, "GlMeSrdAsicConfig::ApplyDebugSettings:Overwritting Sniff Channels from %u to %u\n", *((unsigned __int16 *)this + 36), *((unsigned __int8 *)this + 1205));
        *((_WORD *)this + 36) = *((unsigned __int8 *)this + 1205);
      }
      return;
    case 805306387:
    case 805306389:
      goto LABEL_31;
    default:
      int v10 = 821952533;
      goto LABEL_30;
  }
}

uint64_t BlueFin::GlMeSrdAsicConfig::IsFeatureSupported(int a1, int a2)
{
  int v2 = a1 - 1;
  uint64_t result = 0;
  switch(v2)
  {
    case 0:
      uint64_t result = 0;
      if ((a2 & 0xF000FFFE) == 0x30000012 || (a2 & 0xF000FFFE) == 0x30000014) {
        return result;
      }
      uint64_t result = 0;
      if (a2 <= 922746896)
      {
        if (a2 != 805502985)
        {
          if (a2 == 922746895) {
            return result;
          }
          goto LABEL_51;
        }
        return 1;
      }
      if (a2 == 922746897 || a2 == 922812431) {
        return result;
      }
      if (a2 == 1006829577) {
        return 1;
      }
LABEL_51:
      unsigned int v4 = a2 & 0xF000FFFF;
      BOOL v5 = (a2 & 0xF000FFFF) == 805306383;
      int v6 = 805306385;
      return v5 || v4 == v6;
    case 1:
    case 3:
      unsigned int v8 = a2 & 0xF000FFFE;
      BOOL v9 = (a2 & 0xF000FFFE) == 0x3000000E || v8 == 805306384;
      goto LABEL_40;
    case 2:
      return (a2 & 0xF000FFFE) - 805306382 < 7 || (a2 & 0xF0FFFFFE) == 805371918;
    case 4:
      unsigned int v8 = a2 & 0xF000FFFE;
      BOOL v9 = a2 == 872480783 || (a2 & 0xF000FFFF) == 805306385;
      goto LABEL_40;
    case 5:
      return result;
    case 6:
      uint64_t result = 1;
      if ((a2 & 0xF000FFFE) != 0x30000012)
      {
        BOOL v12 = (a2 & 0xF0FFFFFE) == 0x30000010 || (a2 & 0xF0FFFFFF) == 805371918 || (a2 & 0xF0FFFFFE) == 822018064;
        return (a2 & 0xF000FFFE) == 0x30000014 || v12;
      }
      return result;
    case 7:
      return (a2 & 0xF0FFFFFE) == 805371918;
    case 8:
      unsigned int v8 = a2 & 0xF000FFFE;
      BOOL v9 = (a2 & 0xF000FFFF) == 805306385;
LABEL_40:
      int v13 = v9;
      if (v8 == 805306388) {
        unsigned int v14 = 1;
      }
      else {
        unsigned int v14 = v13;
      }
      if (v8 == 805306386) {
        return 1;
      }
      else {
        return v14;
      }
    case 9:
    case 10:
    case 11:
      unsigned int v4 = a2 & 0xF000FFFE;
      BOOL v5 = (a2 & 0xF000FFFE) == 805306386;
      int v6 = 805306388;
      return v5 || v4 == v6;
    default:
      DeviceFaultNotify("glmesrd_asic_config.cpp", 875, "IsFeatureSupported", (char)"0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_config.cpp", 875, "0");
  }
}

uint64_t BlueFin::GlMeSrdAsicConfig::PlatformSupportsHealthProfile(BlueFin::GlMeSrdAsicConfig *this)
{
  int v1 = (int)this;
  uint64_t result = 0;
  if (v1 > 872480774)
  {
    if (v1 > 939589638)
    {
      if (v1 == 939589639) {
        return result;
      }
      int v5 = 939720711;
    }
    else
    {
      if (v1 == 872480775) {
        return result;
      }
      int v5 = 872611847;
    }
    if (v1 != v5) {
      return 1;
    }
  }
  else if (((v1 - 805371910) > 3 || v1 == 805371911) && v1 != 805502982)
  {
    return 1;
  }
  return result;
}

uint64_t BlueFin::GlMeSrdAsicConfig::Is4753A3OrLater(BlueFin::GlMeSrdAsicConfig *this)
{
  int v1 = (int)this;
  uint64_t result = 0;
  if (v1 > 805502979)
  {
    if ((v1 - 805502980) < 2 || v1 == 872480775 || v1 == 939589639) {
      return result;
    }
    return 1;
  }
  BOOL v3 = (v1 - 805371910) > 3 || v1 == 805371911;
  unsigned int v4 = v1 - 805437444;
  if (v3 && v4 >= 2) {
    return 1;
  }
  return result;
}

float BlueFin::GlMeSrdAsicConfig::ComputeSignalDelays(BlueFin::GlMeSrdAsicConfig *this)
{
  int v2 = *((_DWORD *)this + 546);
  float v3 = 0.0;
  float v4 = 0.0;
  if (v2 != 4)
  {
    float v3 = -507.07;
    *((void *)this + 43) = 0xC41323FFC41506EBLL;
    float v4 = -564.42;
  }
  float v5 = *((float *)this + 85);
  *((unsigned char *)this + 268) = 1;
  *((float *)this + 68) = v3;
  *((float *)this + 83) = v4;
  if (*((_DWORD *)this + 547) != 4)
  {
    if (!*((unsigned char *)this + 22))
    {
      float v7 = *((float *)this + 87);
      float v10 = *((float *)this + 86);
      float v3 = v3 + -13.5;
      *((float *)this + 68) = v3;
      *(_OWORD *)((char *)this + 276) = xmmword_263BAC0D0;
      *(void *)((char *)this + 292) = 0xC0000000BF800000;
      *(_OWORD *)((char *)this + 300) = 0u;
      *(_OWORD *)((char *)this + 316) = 0u;
      *((float *)this + 83) = v4 + -44.2;
      float v8 = v10 + -66.4;
      float v9 = -17.3;
      goto LABEL_13;
    }
    float v8 = *((float *)this + 86);
    float v7 = *((float *)this + 87);
LABEL_11:
    *(void *)((char *)this + 324) = 0;
    *(_OWORD *)((char *)this + 292) = 0u;
    *(_OWORD *)((char *)this + 308) = 0u;
    *(_OWORD *)((char *)this + 276) = 0u;
    float v3 = v3 + 32.0;
    *((float *)this + 68) = v3;
    *((float *)this + 83) = v4 + 13.0;
    float v8 = v8 + -6.0;
    float v9 = 37.0;
LABEL_13:
    float v7 = v7 + v9;
    goto LABEL_14;
  }
  float v6 = flt_263BAC038[v2 == 0];
  float v7 = -(v6 - dbl_263BAC0E0[v2 == 0] * 299792458.0);
  if (v2)
  {
    float v8 = -v6;
    if (v2 == 4) {
      float v8 = v8 + -67.6;
    }
  }
  else
  {
    float v4 = v4 + -47.2;
    *((float *)this + 83) = v4;
    float v7 = v7 + -21.5;
    float v8 = -694.25;
  }
  if (*((unsigned char *)this + 22)) {
    goto LABEL_11;
  }
LABEL_14:
  *((float *)this + 86) = v5 + v8;
  *((float *)this + 85) = v5 + v8;
  *((float *)this + 87) = v5 + v7;
  if ((*((_DWORD *)this + 3) & 0xF000FFFE) == 0x30000014)
  {
    *(_OWORD *)((char *)this + 276) = xmmword_263BAC1FC;
    *(_OWORD *)((char *)this + 292) = unk_263BAC20C;
    *(_OWORD *)((char *)this + 308) = xmmword_263BAC21C;
    *(void *)((char *)this + 324) = 0x3F451EB83ECCCCCDLL;
    *((float *)this + 68) = v3 + 17.2;
  }
  *(float *)v11.i32 = BlueFin::GlMeSrdAsicConfig::GetNotchGroupDelayPerBand((uint64_t)this, 1, 0);
  *((float *)this + 68) = *((float *)this + 68) - *(float *)v11.i32;
  *(float32x4_t *)((char *)this + 332) = vsubq_f32(*(float32x4_t *)((char *)this + 332), (float32x4_t)vdupq_lane_s32(v11, 0));
  *((float *)this + 87) = *((float *)this + 87) - *(float *)v11.i32;
  int v12 = 249;
  for (uint64_t i = 276; i != 332; i += 4)
    *(float *)((char *)this + i) = BlueFin::GlMeSrdAsicConfig::GetNotchGroupDelayPerBand((uint64_t)this, 2, (char)v12++)
                                 + *(float *)((char *)this + i);
  *((float *)this + 83) = BlueFin::GlMeSrdAsicConfig::GetNotchGroupDelayPerBand((uint64_t)this, 3, 0)
                        + *((float *)this + 83);
  *((float *)this + 85) = BlueFin::GlMeSrdAsicConfig::GetNotchGroupDelayPerBand((uint64_t)this, 4, 0)
                        + *((float *)this + 85);
  *((float *)this + 86) = BlueFin::GlMeSrdAsicConfig::GetNotchGroupDelayPerBand((uint64_t)this, 5, 0)
                        + *((float *)this + 86);
  float result = BlueFin::GlMeSrdAsicConfig::GetNotchGroupDelayPerBand((uint64_t)this, 4, 0) + *((float *)this + 87);
  *((float *)this + 87) = result;
  return result;
}

float BlueFin::GlMeSrdAsicConfig::GetNotchGroupDelayPerBand(uint64_t a1, int a2, int a3)
{
  uint64_t v5 = 0;
  unsigned int v6 = 0;
  uint64_t v19 = *MEMORY[0x263EF8340];
  do
  {
    uint64_t v7 = a1 + v5;
    if (*(unsigned __int8 *)(a1 + v5 + 76) != a2) {
      goto LABEL_6;
    }
    if (*(unsigned __int8 *)(v7 + 77) >= 0xFu)
    {
      int v13 = "m_otNotchFilters[i].ucLoopCoefficient < 15";
      DeviceFaultNotify("glmesrd_asic_config.cpp", 5297, "GetNotchGroupDelayPerBand", (char)"m_otNotchFilters[i].ucLoopCoefficient < 15");
      int v14 = 5297;
      goto LABEL_15;
    }
    if (v6 >= 2)
    {
      int v13 = "ucNotchesEnabled < 2";
      DeviceFaultNotify("glmesrd_asic_config.cpp", 5298, "GetNotchGroupDelayPerBand", (char)"ucNotchesEnabled < 2");
      int v14 = 5298;
LABEL_15:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_config.cpp", v14, v13);
    }
    *(void *)&v15[8 * v6++] = *(void *)(v7 + 76);
LABEL_6:
    v5 += 8;
  }
  while (v5 != 192);
  if (!v6) {
    return 0.0;
  }
  float NotchGroupDelayMinnow = BlueFin::GlMeSrdAsicConfig::GetNotchGroupDelayMinnow(a2, v15[1], v16, 0, a3);
  float v9 = 0.0;
  float v10 = NotchGroupDelayMinnow + 0.0;
  if (v6 != 1) {
    float v9 = BlueFin::GlMeSrdAsicConfig::GetNotchGroupDelayMinnow(a2, v17, v18, 1, a3);
  }
  float v11 = v10 + v9;
  GlCustomLog(14, "GetNotchGroupDelayPerBand %d - %.1f\n", a2, v11);
  return v11;
}

float BlueFin::GlMeSrdAsicConfig::GetNotchGroupDelayMinnow(int a1, unsigned __int8 a2, int a3, int a4, int a5)
{
  float result = 0.0;
  float v7 = 16554000.0;
  switch(a1)
  {
    case 1:
    case 3:
      goto LABEL_4;
    case 2:
      float result = (float)a5 * 562500.0;
      goto LABEL_4;
    case 4:
    case 5:
      float v7 = 99326000.0;
LABEL_4:
      float v8 = (float)((float)((float)a3 - result) * 6.2832) / v7;
      float v9 = 1.0 - ldexpf(1.0, a2 - 14);
      __float2 v11 = __sincosf_stret(v8);
      __float2 v12 = __sincosf_stret(v8 + v8);
      float v13 = 2.0;
      if (a4) {
        float v13 = 1.0;
      }
      float v10 = v9 + 1.0;
      float result = (float)((float)(v13
                             + (float)((float)((float)((float)(v12.__sinval - (float)(v10 * v11.__sinval))
                                                     * (float)((float)(v12.__sinval + v12.__sinval)
                                                             - (float)(v10 * v11.__sinval)))
                                             + (float)((float)((float)(v12.__cosval * -2.0) + (float)(v10 * v11.__cosval))
                                                     * (float)((float)-(float)(v9 - (float)(v10 * v11.__cosval))
                                                             - v12.__cosval)))
                                     / (float)((float)((float)(v12.__sinval - (float)(v10 * v11.__sinval))
                                                     * (float)(v12.__sinval - (float)(v10 * v11.__sinval)))
                                             + (float)((float)((float)-(float)(v9 - (float)(v10 * v11.__cosval))
                                                             - v12.__cosval)
                                                     * (float)((float)-(float)(v9 - (float)(v10 * v11.__cosval))
                                                             - v12.__cosval)))))
                     * 299790000.0)
             / v7;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t BlueFin::GlMeSrdSatReport::UpdateInvalidCounts(BlueFin::GlMeSrdSatReport *this, BlueFin::GlMeDSPMeas *a2, BlueFin::GlMeSrdDspMeasAux *a3)
{
  uint64_t TrkRslts = BlueFin::GlMeSrdDspMeasAux::GetTrkRslts(a3);
  int v6 = *((_DWORD *)a2 + 21);
  uint64_t result = BlueFin::GlMeSrdSatReport::GetMinGearNum((BlueFin::GlMeSrdSatReport *)TrkRslts, v7, v8, v9);
  BOOL v11 = *(unsigned char *)(TrkRslts + 8) == 0;
  int v12 = *(_DWORD *)(TrkRslts + 128);
  BOOL v13 = (v12 & 4) == 0 || *(unsigned char *)(TrkRslts + 8) == 0;
  if ((v12 & 8) == 0) {
    BOOL v11 = 1;
  }
  if (!*(unsigned char *)TrkRslts)
  {
    DeviceFaultNotify("glmesrd_sat_report_validity_chk.cpp", 104, "UpdateInvalidCounts", (char)"rTrkRslts.m_bValid");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_report_validity_chk.cpp", 104, "rTrkRslts.m_bValid");
  }
  unsigned int v14 = *((unsigned __int8 *)this + 3528);
  if ((v6 & 0x20) != 0 || *(unsigned char *)(TrkRslts + 32))
  {
    if (!*((unsigned char *)this + 3528)) {
      goto LABEL_18;
    }
    char v16 = v14 - 1;
    if (result > 2) {
      char v16 = 0;
    }
    goto LABEL_17;
  }
  if ((v6 & 0x4000000) != 0) {
    unsigned int v15 = 100;
  }
  else {
    unsigned int v15 = 10;
  }
  if (v14 <= v15)
  {
    char v16 = v14 + 1;
LABEL_17:
    *((unsigned char *)this + 3528) = v16;
  }
LABEL_18:
  unsigned int v17 = *((unsigned __int8 *)this + 3530);
  if ((v6 & 0x40) != 0)
  {
    if (!*((unsigned char *)this + 3530)) {
      goto LABEL_28;
    }
    char v19 = v17 - 1;
    if (result > 2) {
      char v19 = 0;
    }
    goto LABEL_27;
  }
  if ((*((unsigned char *)a2 + 87) & 4) != 0) {
    unsigned int v18 = 100;
  }
  else {
    unsigned int v18 = 10;
  }
  if (v17 <= v18)
  {
    char v19 = v17 + 1;
LABEL_27:
    *((unsigned char *)this + 3530) = v19;
  }
LABEL_28:
  unsigned int v20 = *((unsigned __int8 *)this + 3531);
  if (v13)
  {
    if (!*((unsigned char *)this + 3531)) {
      goto LABEL_39;
    }
    char v21 = v20 - 1;
    if (result > 2) {
      char v21 = 0;
    }
    goto LABEL_38;
  }
  if ((*((unsigned char *)a2 + 87) & 4) != 0) {
    unsigned int v22 = 100;
  }
  else {
    unsigned int v22 = 10;
  }
  if (v20 <= v22)
  {
    char v21 = v20 + 1;
LABEL_38:
    *((unsigned char *)this + 353BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v21;
  }
LABEL_39:
  unsigned int v23 = *((unsigned __int8 *)this + 3532);
  if (v11)
  {
    if (!*((unsigned char *)this + 3532)) {
      goto LABEL_50;
    }
    char v24 = v23 - 1;
    if (result > 2) {
      char v24 = 0;
    }
    goto LABEL_49;
  }
  if ((*((unsigned char *)a2 + 87) & 4) != 0) {
    unsigned int v25 = 100;
  }
  else {
    unsigned int v25 = 10;
  }
  if (v23 <= v25)
  {
    char v24 = v23 + 1;
LABEL_49:
    *((unsigned char *)this + 3532) = v24;
  }
LABEL_50:
  unsigned int v26 = *((unsigned __int8 *)this + 3533);
  if ((v12 & 0x1000) != 0)
  {
    if ((*((unsigned char *)a2 + 87) & 4) != 0) {
      unsigned int v28 = 100;
    }
    else {
      unsigned int v28 = 10;
    }
    if (v26 <= v28)
    {
      char v27 = v26 + 1;
LABEL_60:
      *((unsigned char *)this + 3533) = v27;
    }
  }
  else if (*((unsigned char *)this + 3533))
  {
    char v27 = v26 - 1;
    if (result > 2) {
      char v27 = 0;
    }
    goto LABEL_60;
  }
  if ((v6 & 8) != 0 || (unsigned int v29 = *((_DWORD *)a2 + 35), v29 <= 0x11) && ((1 << v29) & 0x21800) != 0)
  {
    if (!*((unsigned char *)this + 3529)) {
      return result;
    }
    unsigned int v30 = (char *)this + 3529;
    char v31 = *((unsigned char *)this + 3529) - 1;
    if (result > 2) {
      char v31 = 0;
    }
    goto LABEL_67;
  }
  unsigned int v32 = *((unsigned __int8 *)this + 3529);
  if (v32 <= 8)
  {
    unsigned int v30 = (char *)this + 3529;
    char v31 = v32 + 1;
LABEL_67:
    *unsigned int v30 = v31;
  }
  return result;
}

unint64_t BlueFin::GlMeSrdSatRptNonL1VetSm::SetDspMeasurementReport(uint64_t a1, uint64_t a2, BlueFin::GlMeSrdDspMeasAux *this, unsigned char *a4, char a5, char a6, uint64_t a7)
{
  if (a7)
  {
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, double))(*(void *)a7 + 88))(a7, a2 + 100, 0.0);
    if (v14)
    {
      int v44 = &off_270EBF450;
      char v45 = 0;
      int v46 = -1;
      __int16 v47 = 575;
      uint64_t v48 = 0;
      int v49 = 0;
      long long v50 = xmmword_263BABE60;
      int v51 = 2139095039;
      uint64_t v52 = 0;
      float v53 = 3.4028e38;
      __int16 v54 = 0;
      uint64_t v55 = 0x7FEFFFFFFFFFFFFFLL;
      int v56 = -1;
      __int16 v57 = -1;
      uint64_t v59 = 0;
      uint64_t v60 = 0;
      uint64_t v58 = 0;
      int v61 = 0;
      *(_DWORD *)(a1 + 92) = *(_DWORD *)(v14 + 92);
      if ((*(unsigned int (**)(uint64_t, uint64_t, void, double))(*(void *)a7 + 40))(a7, a2 + 100, 0, *(double *)(a2 + 24) * 1000.0))
      {
        double v15 = *(double *)(a2 + 24);
        int v43 = 1;
        if ((*(unsigned int (**)(uint64_t, uint64_t, void (***)(BlueFin::GlMeAcqWin *__hidden), int *, void, void, double, double, double))(*(void *)a7 + 24))(a7, a2 + 100, &v44, &v43, 0, 0, v15 * 1000.0, 0.0, 0.0))
        {
          if (v53 <= 0.0) {
            double v16 = 0.0;
          }
          else {
            double v16 = v53 * 299792458.0;
          }
          *(void *)(a1 + 96) = v52;
          *(double *)(a1 + 104) = v16;
        }
      }
    }
  }
  *(void *)(a1 + 112) = a2;
  *(void *)(a1 + 120) = this;
  *(unsigned char *)(a1 + 89) |= *a4;
  *(unsigned char *)(a1 + 90) |= a4[1];
  *(unsigned char *)(a1 + 91) |= a4[2];
  *(unsigned char *)(a1 + 43) = a5;
  *(void *)(a1 + 128) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 48) = 1065353216;
  for (uint64_t i = 24; i != 29; ++i)
  {
    if (*(unsigned __int8 *)(BlueFin::GlMeSrdDspMeasAux::GetTrkRslts(this) + i) == 255)
    {
      *(float *)(a1 + 48) = *(float *)(a1 + 48) + -0.2;
    }
    else
    {
      unsigned int v18 = *(unsigned __int8 *)(a1 + 44);
      if (v18 < *(unsigned __int8 *)(BlueFin::GlMeSrdDspMeasAux::GetTrkRslts(this) + i)) {
        *(unsigned char *)(a1 + 44) = *(unsigned char *)(BlueFin::GlMeSrdDspMeasAux::GetTrkRslts(this) + i);
      }
    }
  }
  float v19 = *(float *)(a1 + 48);
  if (v19 < 0.15)
  {
    unsigned __int16 v33 = "m_fDutyCycleScale >= 0.15f";
    DeviceFaultNotify("glmesrd_sat_report_vetting.cpp", 957, "SetDspMeasurementReport", (char)"m_fDutyCycleScale >= 0.15f");
    int v34 = 957;
    goto LABEL_55;
  }
  *(_DWORD *)(a1 + 64) = 0;
  unsigned int v20 = (float *)(a1 + 64);
  *(float *)(a1 + 48) = sqrtf(v19);
  double v21 = *(double *)(a1 + 56);
  double v22 = *(double *)(a2 + 24);
  if (v21 > 0.0)
  {
    double v23 = v22 - v21;
    if (v23 > 0.0 && *(float *)(a2 + 56) <= 0.000000003 && (*(unsigned char *)(a2 + 84) & 0x40) != 0)
    {
      double v35 = v23 * 1000.0;
      if (v23 * 1000.0 <= 0.0)
      {
        double v36 = 0.0;
        if (v23 * 1000.0 < 0.0) {
          double v36 = ceil(v35 + -0.5);
        }
      }
      else
      {
        double v36 = floor(v35 + 0.5);
      }
      uint64_t v37 = 0;
      float v38 = *(float *)(a2 + 32);
      float v39 = 0.0;
      do
      {
        float v40 = *(float *)(a1 + v37 + 80);
        *(float *)(a1 + v37 + 84) = v40;
        float v39 = v39 + v40;
        v37 -= 4;
      }
      while (v37 != -16);
      float v41 = (v36 / 1000.0 - v23 - v36 / 1000.0 * v38) * 299792458.0;
      *(float *)(a1 + 68) = v41;
      float v25 = v39 + v41;
    }
    else
    {
      uint64_t v24 = 0;
      float v25 = 0.0;
      do
      {
        float v25 = v25 + *(float *)(a1 + 68 + v24);
        v24 += 4;
      }
      while (v24 != 20);
    }
    *unsigned int v20 = v25;
  }
  *(double *)(a1 + 56) = v22;
  if ((*(unsigned char *)(a1 + 91) & 0x18) != 0)
  {
    *(void *)unsigned int v20 = 0;
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
  }
  if (*((unsigned char *)this + 156) || *(double *)(a1 + 104) >= 3.40282306e38)
  {
    __int16 v42 = 7;
    uint64_t v26 = *(void *)(a1 + 32);
    unint64_t v27 = *(void *)(a1 + 8);
    *(void *)(a1 + 32) = v27;
    do
    {
      int v44 = 0;
      if (BlueFin::patch_dispatch(v27, a1, (unsigned __int8 *)&v42, &v44)) {
        unint64_t v27 = (unint64_t)v44;
      }
      else {
        unint64_t v27 = (*(uint64_t (**)(uint64_t, __int16 *))(a1 + 32))(a1, &v42);
      }
      *(void *)(a1 + 32) = v27;
    }
    while (v27);
  }
  else
  {
    uint64_t v26 = *(void *)(a1 + 32);
  }
  LOBYTE(v42) = 6;
  HIBYTE(v42) = a6;
  unint64_t result = *(void *)(a1 + 8);
  *(void *)(a1 + 32) = result;
  do
  {
    int v44 = 0;
    if (BlueFin::patch_dispatch(result, a1, (unsigned __int8 *)&v42, &v44)) {
      unint64_t result = (unint64_t)v44;
    }
    else {
      unint64_t result = (*(uint64_t (**)(uint64_t, __int16 *))(a1 + 32))(a1, &v42);
    }
    *(void *)(a1 + 32) = result;
  }
  while (result);
  *(void *)(a1 + 32) = v26;
  char v29 = *(unsigned char *)(a1 + 40);
  if (v29)
  {
    *((_DWORD *)this + 49) |= 0x2000u;
    *(_DWORD *)(a2 + 84) |= 0x400000u;
    char v29 = 1;
  }
  *(_DWORD *)(a1 + 92) = -1082130432;
  *(void *)(a1 + 96) = 0xBFF0000000000000;
  *((unsigned char *)this + 184) = v29;
  *((unsigned char *)this + 186) = *(unsigned char *)(a1 + 41);
  int v30 = *(unsigned __int8 *)(a1 + 42);
  *((unsigned char *)this + 187) = v30;
  int v31 = *(unsigned __int8 *)(a1 + 52);
  *((unsigned char *)this + 188) = v31;
  int v32 = *(unsigned __int8 *)(a1 + 53);
  *((unsigned char *)this + 189) = v32;
  if (!v30)
  {
    if (!v31 || !v32) {
      return result;
    }
    unsigned __int16 v33 = "0";
    DeviceFaultNotify("glmesrd_sat_report_vetting.cpp", 1016, "SetDspMeasurementReport", (char)"0");
    int v34 = 1016;
LABEL_55:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_report_vetting.cpp", v34, v33);
  }
  if (v31)
  {
    unsigned __int16 v33 = "0";
    DeviceFaultNotify("glmesrd_sat_report_vetting.cpp", 1006, "SetDspMeasurementReport", (char)"0");
    int v34 = 1006;
    goto LABEL_55;
  }
  if (v32)
  {
    unsigned __int16 v33 = "0";
    DeviceFaultNotify("glmesrd_sat_report_vetting.cpp", 1011, "SetDspMeasurementReport", (char)"0");
    int v34 = 1011;
    goto LABEL_55;
  }
  return result;
}

uint64_t BlueFin::GlMeSrdDspMeasAux::GetTrkRslts(BlueFin::GlMeSrdDspMeasAux *this)
{
  int v1 = *((_DWORD *)this + 9);
  if (v1 != 2 && v1 != 4)
  {
    DeviceFaultNotify("glmesrd_dsp_meas_aux.h", 411, "GetTrkRslts", (char)"m_otMsmtSource.GetEnum() == GLMESRD_MSMT_SRC_TRACK || m_otMsmtSource.GetEnum() == GLMESRD_MSMT_SRC_SUB_TRACK");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_dsp_meas_aux.h", 411, "m_otMsmtSource.GetEnum() == GLMESRD_MSMT_SRC_TRACK || m_otMsmtSource.GetEnum() == GLMESRD_MSMT_SRC_SUB_TRACK");
  }
  return (uint64_t)this + 64;
}

void BlueFin::GlMeAcqWindowProvider::GetSatAid(uint64_t a1, unsigned __int8 *a2, double a3)
{
}

uint64_t BlueFin::GlMeSrdSatReport::GetMinGearNum(BlueFin::GlMeSrdSatReport *this, const BlueFin::GlMeSrdDspMeasAuxTrackRslts *a2, double a3, uint8x8_t a4)
{
  a4.i32[0] = *(_DWORD *)((char *)this + 25);
  unsigned __int8 v4 = vminv_u16(vmin_u16((uint16x4_t)(*(void *)&vdup_n_s16(*((void *)this + 3)) & 0xFF00FF00FF00FFLL), (uint16x4_t)*(_OWORD *)&vmovl_u8(a4)));
  unsigned __int8 v5 = v4;
  unsigned int v6 = *((unsigned __int8 *)this + 28) + 10 * *((unsigned __int8 *)this + 27);
  if (v6 <= 0x20) {
    unsigned __int8 v7 = v4;
  }
  else {
    unsigned __int8 v7 = 3;
  }
  if (v6 > 0x2B) {
    unsigned __int8 v7 = 4;
  }
  if (v6 < 0x38) {
    return v7;
  }
  return v5;
}

uint64_t BlueFin::GlPeOscMgr::SetAsstOscOffset(uint64_t this, __int16 *a2, double a3, double a4)
{
  if (!*(unsigned char *)(this + 49))
  {
    uint64_t v4 = this;
    *(_WORD *)(this + 2) = (int)a3;
    int v5 = (int)a4;
    if ((int)a4 <= 1) {
      LOWORD(v5) = 1;
    }
    *(_WORD *)(this + 10) = v5;
    if (a2)
    {
      __int16 v6 = *a2;
      int v7 = *((_DWORD *)a2 + 1);
    }
    else
    {
      __int16 v6 = 0;
      int v7 = 0;
    }
    *(_WORD *)(this + 24) = v6;
    *(_DWORD *)(this + 28) = v7;
    this = BlueFin::GlPeOscMgr::Update(this, 1);
    *(unsigned char *)(v4 + 49) = 1;
  }
  return this;
}

uint64_t BlueFin::GlPeOscMgr::Update(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 40) != -7200001 && a2 == 0) {
    return this;
  }
  uint64_t v3 = this;
  int v4 = *(__int16 *)(this + 10);
  unsigned int v5 = *(unsigned __int16 *)(this + 10);
  __int16 v6 = *(BlueFin::GlPeTimeManager **)(this + 16);
  int SleepTimeSec = BlueFin::GlPeTimeManager::GetSleepTimeSec(v6);
  int v9 = SleepTimeSec;
  int v10 = *(unsigned __int16 *)(v3 + 24);
  if (*(_WORD *)(v3 + 24) || *(_DWORD *)(v3 + 28))
  {
    if (*((_DWORD *)v6 + 644))
    {
      LODWORD(v8) = *(_DWORD *)(v3 + 28);
      double v11 = (double)v8 * 0.001;
      v28[0].n128_u64[0] = (unint64_t)&off_270EBC600;
      double v12 = fmod(v11, 1.0);
      if (v12 < 0.0 || v12 >= 1.0)
      {
        DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
      }
      double v14 = v12 * 4294967300.0 + 0.5;
      unsigned int v15 = v14;
      if (v14 >= 4294967300.0) {
        unsigned int v15 = -1;
      }
      v28[0].n128_u32[2] = v15;
      v28[0].n128_u32[3] = v11 + 604800 * v10;
      v28[0].n128_u64[0] = (unint64_t)&off_270EBC600;
      BlueFin::GlPeTimeManager::GetTime(v6, (const BlueFin::GlGpsTime *)v28, 1, (uint64_t)v29);
      BOOL v16 = 0;
      if (v30 != -1 && v31 != 4294967300.0)
      {
        if (*(unsigned __int16 *)(v3 + 10) > 0x62u)
        {
          BOOL v16 = 0;
        }
        else
        {
          BlueFin::GlPeTimeManager::GetTime(*(BlueFin::GlPeTimeManager **)(v3 + 16), 1, v28);
          double v17 = BlueFin::GlPeGnssTime::operator-((unsigned int *)v28, (uint64_t)v29);
          BOOL v16 = v17 > 0.0;
          if (v17 > 0.0)
          {
            double v18 = v17;
            __int16 v19 = 98;
            if (v17 > 900.0)
            {
              if (*(__int16 *)(v3 + 10) <= 98) {
                __int16 v20 = 98;
              }
              else {
                __int16 v20 = *(_WORD *)(v3 + 10);
              }
              double v21 = fmod((v17 + -900.0) * 0.100000001, 4294967300.0);
              if ((v18 + -900.0) * 0.100000001 <= 4294967300.0) {
                double v21 = (v18 + -900.0) * 0.100000001;
              }
              if (v21 < -4294967300.0) {
                double v21 = -fmod(-v21, 4294967300.0);
              }
              if (v21 < 0.0) {
                unsigned int v22 = --v21;
              }
              else {
                LOWORD(v22) = v21;
              }
              int v23 = (__int16)(v20 + v22);
              if (v23 >= 301) {
                LOWORD(v23) = 301;
              }
              __int16 v19 = v23 + 80 * (v18 / 0x24EA00);
            }
            *(_WORD *)(v3 + 10) = v19;
          }
        }
      }
      unsigned int v5 = *(unsigned __int16 *)(v3 + 10);
      if (v16 || (v9 - 900) < 0xFFFFFC7D)
      {
        if (v16) {
          goto LABEL_42;
        }
        goto LABEL_47;
      }
    }
    else if ((SleepTimeSec - 900) < 0xFFFFFC7D)
    {
      goto LABEL_47;
    }
    if (v5 < 0x63) {
      goto LABEL_42;
    }
LABEL_47:
    if ((__int16)v5 <= 301) {
      unsigned __int16 v24 = 301;
    }
    else {
      unsigned __int16 v24 = v5;
    }
    uint64_t v25 = 78;
    goto LABEL_51;
  }
  if ((SleepTimeSec - 1) >= 0xB71) {
    goto LABEL_47;
  }
LABEL_42:
  if ((__int16)v5 <= 98) {
    unsigned __int16 v24 = 98;
  }
  else {
    unsigned __int16 v24 = v5;
  }
  uint64_t v25 = 89;
LABEL_51:
  *(_WORD *)(v3 + 10) = v24;
  uint64_t v26 = *(void *)(v3 + 16);
  unint64_t v27 = (BlueFin::GlPeTimeMgrUtil *)*(unsigned int *)(v26 + 2568);
  if (v27 == -7200001) {
    LODWORD(v27) = BlueFin::GlPeTimeMgrUtil::DoubleToLms(v27, *(double *)(v26 + 2624));
  }
  *(_DWORD *)(v3 + 40) = v27;
  return GlCustomLog(14, "OSC_UPDATE read %hdppb (%hd)(%hd) OscDataFresh %c\n", *(__int16 *)(v3 + 2), v24, v4, v25);
}

uint64_t BlueFin::GlReqSm::CreateMeJob(BlueFin::GlReqSm *this)
{
  int v2 = (char *)this + 53672;
  *((unsigned char *)this + 5457BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 1;
  BlueFin::GlReqSm::SetAsstFromPend(this, 1, 0);
  uint64_t result = BlueFin::GlReqSm::CreateNewReqFromPend(this);
  int v4 = *((_DWORD *)this + 3048);
  if ((v4 & 0x800) != 0) {
    return result;
  }
  unsigned int v5 = (BlueFin::GlReqSm *)((char *)this + 10880);
  if (*(unsigned char *)(*((void *)this + 784) + 136))
  {
    double v6 = (double)*(__int16 *)(*((void *)this + 807) + 10);
    if (BlueFin::GlUtils::m_ucEnabled) {
      BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
    }
    double v7 = v6 * 0.000000001;
    uint64_t CWRequest = BlueFin::GlPeReqBag::GetCWRequest((BlueFin::GlReqSm *)((char *)this + 10880));
    if (CWRequest)
    {
      WORD6(v86) = 0;
      DWORD2(v86) = 0;
      *(void *)&long long v87 = 0xFFFF0100000000;
      memset(v84, 0, sizeof(v84));
      long long v85 = 0u;
      *(void *)&long long v86 = 0;
      (*(void (**)(void))(*(void *)CWRequest + 456))();
    }
    if (v7 <= *(double *)(*((void *)this + 784) + 128) + -0.000000001) {
      goto LABEL_15;
    }
    if ((v4 & 0x100) != 0)
    {
      int FactTestItem = BlueFin::GlPeReqBag::GetFactTestItem((BlueFin::GlReqSm *)((char *)this + 10880));
      uint64_t v9 = v4 & 0x20;
      if ((v4 & 0x20) == 0 && !FactTestItem)
      {
        *((void *)v2 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = this;
        BlueFin::GlTimer::arm((BlueFin::GlReqSm *)((char *)this + 53648), 50, 0, 0x190u);
        char *v2 = 1;
        GlCustomLog(14, "CW and CNTIN both requested\n");
LABEL_15:
        GlCustomLog(14, "CNTIN is in frq plan (%.1f, %.1f)\n", v7 * 1000000000.0, *(double *)(*((void *)this + 784) + 128) * 1000000000.0);
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v9 = v4 & 0x20;
    }
    if (!v9) {
      BlueFin::GlPeCntinMgr::StartCntin(*((BlueFin::GlPeCntinMgr **)this + 791));
    }
    goto LABEL_15;
  }
LABEL_16:
  if ((v4 & 0x100) != 0
    && (uint64_t result = BlueFin::GlPeReqBag::GetFactTestItem((BlueFin::GlReqSm *)((char *)this + 10880)), result == 1))
  {
    uint64_t v11 = *((void *)this + 807);
    int v12 = *(__int16 *)(v11 + 2);
    double v13 = (double)*(__int16 *)(v11 + 10) * 0.000000001;
    if (BlueFin::GlUtils::m_ucEnabled) {
      uint64_t result = BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
    }
    if (v13 > 0.000000098 && v13 < 0.0000005)
    {
      double v14 = (double)v12 * 0.000000001;
      GlCustomLog(14, "OSC Fresh Override for FACTORY TEST\n");
      BlueFin::GlPeOscMgr::SetOscOff(*((BlueFin::GlPeOscMgr **)this + 807), v14, 0.000000098, 0);
      uint64_t result = (*(uint64_t (**)(double, double))(**((void **)this + 39) + 320))(v14, 0.000000098);
    }
  }
  else
  {
    uint64_t result = BlueFin::GlReqSm::SetOscOffsAiding((unint64_t)this, 0);
  }
  if ((v4 & 0xF05F) != 0)
  {
    *(void *)&v84[0] = (char *)v84 + 12;
    BYTE8(v84[0]) = 8;
    memset((char *)v84 + 12, 0, 32);
    *((_WORD *)this + 247BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
    BlueFin::GlReqSm::GenerateInitialDopplerBasedAiding(this);
    uint64_t result = BlueFin::GlReqSm::GenerateAiding(this, *(unsigned int *)(*((void *)this + 785) + 2568), v84, 0, 1);
  }
  if ((v4 & 0x100) == 0) {
    goto LABEL_109;
  }
  *((_WORD *)this + 247BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  uint64_t result = BlueFin::GlPeReqBag::GetFactTestItem((BlueFin::GlReqSm *)((char *)this + 10880));
  int v21 = result;
  if (!result)
  {
LABEL_100:
    BlueFin::GlReqSm::sendMeSignalAiding(this, (BlueFin::GlReqSm *)((char *)this + 4928), v15, v16, v17, v18, v19, v20, v68, v69, v70, (unint64_t)v71, v72, (uint64_t)v73, (uint64_t)v74, v75, v76, v77, v78,
      v79,
      v80,
      v81,
      *(long long *)v82,
      *(long long *)&v82[16],
      *(long long *)&v82[32],
      v83[0],
      v83[1],
      v83[2],
      v83[3],
      v83[4],
      v84[0],
      v84[1],
      v84[2],
      v84[3],
      v84[4],
      v84[5],
      v85,
      v86,
      v87,
      v88,
      v89,
      v90,
      v91,
      v92,
      v93,
      v94,
      v95,
      vars0);
    int v54 = *(__int16 *)(*((void *)this + 807) + 10);
    if (BlueFin::GlUtils::m_ucEnabled) {
      BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
    }
    if (v21 != 4 && (double)v54 * 0.000000001 < 0.0000004) {
      *(unsigned char *)(*((void *)this + 807) + 14) = 1;
    }
    int32x2_t v81 = (long long *)&v82[4];
    v82[0] = 8;
    memset(&v82[4], 0, 32);
    BlueFin::GlSignalIdSet::GlSignalIdSet((uint64_t)v84, (uint64_t)&v81, 0);
    BlueFin::GlPeReqBag::GetFactTestSvIds(v5, (void **)v84);
    v82[44] = BYTE8(v84[0]);
    memcpy((char *)v83 + 4, *(const void **)&v84[0], 4 * BYTE8(v84[0]));
    *(_WORD *)&v82[46] = 0;
    v82[45] = 0;
    LODWORD(v83[0]) = DWORD1(v83[0]);
    BlueFin::GlSetIterator::operator++(&v82[44]);
    if (v82[45] != v82[44])
    {
      while (*(unsigned __int16 *)&v82[46] < 0x23FuLL)
      {
        uint64_t v55 = *((void *)this + 789);
        int v56 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * *(unsigned __int16 *)&v82[46];
        char v57 = *v56;
        LODWORD(v56) = v56[1];
        BYTE4(v77) = v57;
        int v78 = (int)v56;
        __int16 v79 = *(_WORD *)&v82[46];
        BlueFin::GlPeRangeAidGen::MakeFactoryAid(v55, (unsigned __int8 *)&v77 + 4, v21);
        BlueFin::GlSetIterator::operator++(&v82[44]);
        if (v82[45] == v82[44]) {
          goto LABEL_108;
        }
      }
LABEL_140:
      char v65 = "usIndex < NUM_SIGNAL_IDS";
      DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
      float v66 = "glsignalid.h";
      int v67 = 577;
LABEL_141:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v66, v67, v65);
    }
LABEL_108:
    uint64_t result = BlueFin::GlReqSm::sendMeSatAiding(this, (const BlueFin::GlSatAidInfo *)(*((void *)this + 789) + 320));
    goto LABEL_109;
  }
  if (result != 7)
  {
    if (result == 6)
    {
      if ((*(_DWORD *)(*((void *)this + 784) + 88) - 29) > 1)
      {
        int v21 = 6;
      }
      else
      {
        v2[882] = 1;
        (*(void (**)(void, uint64_t))(**((void **)this + 39) + 560))(*((void *)this + 39), 1);
        int v21 = 3;
      }
    }
    goto LABEL_37;
  }
  if ((*(_DWORD *)(*((void *)this + 784) + 88) - 29) > 1)
  {
    int v21 = 7;
LABEL_37:
    uint64_t v76 = (uint64_t)v2;
    *(void *)&v84[0] = (char *)v84 + 12;
    BYTE8(v84[0]) = 19;
    memset((char *)v84 + 12, 0, 64);
    *(long long *)((char *)&v84[4] + 8) = 0u;
    int v71 = (char *)this + 10880;
    BlueFin::GlPeReqBag::GetFactTestSvIds((BlueFin::GlReqSm *)((char *)this + 10880), (void **)v84);
    v82[44] = BYTE8(v84[0]);
    long long v74 = (char *)v83 + 4;
    uint64_t v75 = BYTE8(v84[0]);
    uint64_t v72 = 4 * BYTE8(v84[0]);
    uint64_t v73 = *(const void **)&v84[0];
    memcpy((char *)v83 + 4, *(const void **)&v84[0], v72);
    *(_WORD *)&v82[46] = 0;
    v82[45] = 0;
    LODWORD(v83[0]) = DWORD1(v83[0]);
    BlueFin::GlSetIterator::operator++(&v82[44]);
    uint64_t v24 = *((unsigned __int16 *)this + 2471);
    LODWORD(v77) = 255;
    int v25 = 255;
    int v26 = 255;
    int v27 = 255;
    int v28 = 255;
    int v29 = 255;
    if (v24 > 0x9F)
    {
LABEL_40:
      BOOL v32 = v77 != 255 && v77 == v25 && v25 != 255;
      LODWORD(v77) = v32;
      BOOL v35 = v26 != 255 && v26 == v27 && v27 != 255;
      BOOL v38 = v28 != 255 && v28 == v29 && v29 != 255;
      v82[44] = v75;
      memcpy((char *)v83 + 4, v73, v72);
      *(_WORD *)&v82[46] = 0;
      v82[45] = 0;
      LODWORD(v83[0]) = DWORD1(v83[0]);
      BlueFin::GlSetIterator::operator++(&v82[44]);
      if (v24 <= 0x9F)
      {
        do
        {
          if (v82[45] == v82[44]) {
            break;
          }
          if (*(unsigned __int16 *)&v82[46] >= 0x23FuLL) {
            goto LABEL_140;
          }
          float v39 = (unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * *(unsigned __int16 *)&v82[46];
          uint64_t v40 = *v39;
          int v41 = BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * (char)v39[1]
                                                                                        - (char)v39[1]
                                                                                        + BlueFin::GlSvId::s_aucSvId2gnss[v40]];
          if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * (char)v39[1]
                                                                      - (char)v39[1]
                                                                      + BlueFin::GlSvId::s_aucSvId2gnss[v40]])
          {
            if (v41 == 11 && v35) {
              goto LABEL_86;
            }
            uint64_t v43 = (v24 + 1);
            *((_WORD *)this + 247BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v24 + 1;
            uint64_t v44 = *((void *)this + 618) + 8 * v24;
            *(_WORD *)uint64_t v44 = v40;
            int v45 = *((_DWORD *)v2 + 223);
            unsigned int v46 = v45 | 0x4100;
            *(_DWORD *)(v44 + 4) = v45 | 0x4100;
            __int16 v47 = (_DWORD *)(v44 + 4);
            switch(v41)
            {
              case 1:
              case 4:
                goto LABEL_77;
              case 2:
              case 5:
                unsigned int v46 = v45 | 0x4500;
                *__int16 v47 = v45 | 0x4500;
                if (v41 != 4) {
                  break;
                }
LABEL_77:
                v46 |= 0x200u;
                goto LABEL_92;
              case 6:
                unsigned int v46 = v45 | 0x104100;
                goto LABEL_92;
              case 8:
                unsigned int v46 = v45 | 0x4500;
                *__int16 v47 = v45 | 0x4500;
                uint64_t v51 = *((void *)this + 784);
                if (*(unsigned char *)(v51 + 26286)
                  && *(int *)(v51 + 88) >= 37
                  && (*(unsigned char *)(*(void *)(v51 + 26224) + 1) & 0x10) != 0)
                {
                  goto LABEL_91;
                }
                break;
              case 13:
LABEL_91:
                unsigned int v46 = v46 & 0xFFFEFEFF | 0x10000;
LABEL_92:
                *__int16 v47 = v46;
                break;
              default:
                break;
            }
          }
          else
          {
            char v48 = (char)v77;
            if (BlueFin::GlSvId::s_aucSvId2gnss[v40]) {
              char v48 = 0;
            }
            BOOL v49 = BlueFin::GlSvId::s_aucSvId2gnss[v40] == 3 && v38;
            if ((v48 & 1) != 0 || v49)
            {
LABEL_86:
              uint64_t v43 = v24;
              goto LABEL_98;
            }
            uint64_t v43 = (v24 + 1);
            *((_WORD *)this + 247BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v24 + 1;
            uint64_t v50 = *((void *)this + 618) + 8 * v24;
            *(_WORD *)uint64_t v50 = v40;
            unsigned int v46 = *((_DWORD *)v2 + 223) | 0x4100;
            *(_DWORD *)(v50 + 4) = v46;
            __int16 v47 = (_DWORD *)(v50 + 4);
          }
          int v52 = *((_DWORD *)v2 + 304);
          if (v52 == 2)
          {
            int v53 = -17891585;
            goto LABEL_97;
          }
          if (v52 == 1)
          {
            int v53 = -1025;
LABEL_97:
            *__int16 v47 = v53 & v46;
          }
LABEL_98:
          BlueFin::GlSetIterator::operator++(&v82[44]);
          uint64_t v24 = v43;
        }
        while (v43 < 0xA0);
      }
      unsigned int v5 = (BlueFin::GlReqSm *)((char *)this + 10880);
      goto LABEL_100;
    }
    if (v82[45] == v82[44])
    {
      LODWORD(v77) = 255;
      goto LABEL_40;
    }
    LODWORD(v77) = 255;
    while (1)
    {
      if (*(unsigned __int16 *)&v82[46] >= 0x23FuLL) {
        goto LABEL_140;
      }
      uint64_t v60 = (unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * *(unsigned __int16 *)&v82[46];
      int v61 = *v60;
      uint64_t v62 = BlueFin::GlSvId::s_aucSvId2gnss[*v60];
      int v63 = BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * (char)v60[1]
                                                                                    - (char)v60[1]
                                                                                    + v62];
      if (v63 == 11) {
        break;
      }
      if (v63 != 2)
      {
        if (!v63)
        {
          if (v62)
          {
            int v28 = v61;
            if (v62 != 3)
            {
              char v65 = "0";
              DeviceFaultNotify("glreqsm.cpp", 5710, "CreateMeJob", (char)"0");
              float v66 = "glreqsm.cpp";
              int v67 = 5710;
              goto LABEL_141;
            }
          }
          else
          {
            LODWORD(v77) = v61;
          }
        }
        goto LABEL_129;
      }
      if (v62)
      {
        int v29 = v61;
        if (v62 != 3)
        {
          char v65 = "0";
          DeviceFaultNotify("glreqsm.cpp", 5731, "CreateMeJob", (char)"0");
          float v66 = "glreqsm.cpp";
          int v67 = 5731;
          goto LABEL_141;
        }
      }
      else
      {
        int v25 = v61;
      }
LABEL_131:
      BlueFin::GlSetIterator::operator++(&v82[44]);
      if (v82[45] == v82[44]) {
        goto LABEL_40;
      }
    }
    int v26 = v61;
LABEL_129:
    if (v63 == 5) {
      int v27 = v61;
    }
    goto LABEL_131;
  }
  uint64_t v22 = *((unsigned int *)this + 3049);
  if ((v22 & 0x80000000) != 0)
  {
    if (v22 == -1)
    {
      unsigned __int16 v64 = -1000;
      goto LABEL_139;
    }
    int v23 = *((unsigned __int16 *)this + 7059);
  }
  else
  {
    int v23 = *(unsigned __int16 *)(*(void *)(*((void *)v5 + v22) + 8) + 22);
  }
  if (v23 == 1) {
    goto LABEL_109;
  }
  unsigned __int16 v64 = 1000 * v23;
LABEL_139:
  uint64_t result = (*(uint64_t (**)(void, void))(**((void **)this + 39) + 584))(*((void *)this + 39), v64);
LABEL_109:
  if (*(unsigned char *)(*((void *)this + 784) + 26328))
  {
    v2[1229] = 0;
    uint64_t result = GlCustomLog(14, "GPS_FIX_STA toggle LOW\n");
    uint64_t v58 = *((void *)this + 784);
    int v59 = *(_DWORD *)(v58 + 88);
    if ((v59 - 37) >= 2)
    {
      if (v59 == 40)
      {
        (*(void (**)(void))(**((void **)this + 39) + 568))(*((void *)this + 39));
        return (*(uint64_t (**)(void))(**((void **)this + 39) + 576))();
      }
    }
    else
    {
      uint64_t result = *(void *)(*((void *)this + 783) + 48);
      if (result) {
        return (*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)result + 112))(result, 1, *(unsigned __int8 *)(v58 + 26329), 0);
      }
    }
  }
  return result;
}

#error "2639886C0: call analysis failed (funcsize=75)"

#error "263989370: call analysis failed (funcsize=1159)"

uint64_t BlueFin::GlDbgMeIf::SetFarStartMode(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 496))();
}

uint64_t BlueFin::GlReqSm::GenerateInitialDopplerBasedAiding(BlueFin::GlReqSm *this)
{
  int v2 = (char *)this + 33568;
  uint64_t result = BlueFin::GlPeSatAidInfo::Clear((uint64_t)this + 33568, 1);
  uint64_t v4 = *((void *)this + 790);
  if (!*(unsigned char *)(v4 + 19200)) {
    return result;
  }
  uint64_t result = BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(v4 + 37672));
  if (!result) {
    return result;
  }
  if (*(_DWORD *)v4 >> 5 >= 0x271u && *(_DWORD *)v4 != -7200001) {
    return result;
  }
  uint64_t result = (uint64_t)BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, v58, 0x13u, (const void **)(v4 + 37672));
  if (!*(_DWORD *)__src)
  {
    if (v57 >= 2uLL)
    {
      if (*((_DWORD *)__src + 1)) {
        goto LABEL_9;
      }
      uint64_t v36 = 2;
      while (v57 != v36)
      {
        if (*((_DWORD *)__src + v36++))
        {
          if (v36 - 1 < (unint64_t)v57) {
            goto LABEL_9;
          }
          break;
        }
      }
    }
    *(unsigned char *)(*((void *)this + 790) + 19200) = 0;
    return result;
  }
LABEL_9:
  double v6 = (unsigned int *)*((void *)this + 785);
  unsigned int v7 = v6[642];
  if (v7 <= 0xFF9222FE) {
    double v8 = (double)v7;
  }
  else {
    double v8 = (double)(int)v7;
  }
  double v9 = BlueFin::GlPeTimeManager::lmsToLegacyGlStruct(v6, 0, 1, (uint64_t)v51, v8);
  LODWORD(v9) = v52;
  LOWORD(v10) = v53;
  *(double *)&unint64_t v11 = (double)v10 * 0.000001;
  *(double *)&unint64_t v12 = *(double *)&v11 + (double)*(unint64_t *)&v9 * 0.001;
  LOWORD(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v54;
  double v13 = *(double *)&v12 + (double)v11 * 0.000000001;
  LODWORD(v12) = v55;
  double v14 = (double)v12 * 0.000001;
  double v15 = BlueFin::GlPeTimeManager::lmsToLegacyGlStruct(*((unsigned int **)this + 785), 1u, 1, (uint64_t)v46, v8);
  LODWORD(v15) = v47;
  LOWORD(v16) = v48;
  *(double *)&unint64_t v17 = (double)v16 * 0.000001;
  double v18 = *(double *)&v17 + (double)*(unint64_t *)&v15 * 0.001;
  LOWORD(v17) = v49;
  *(double *)&unint64_t v19 = (double)v17;
  double v20 = v18 + *(double *)&v19 * 0.000000001;
  LODWORD(v19) = v50;
  *((double *)this + 4233) = v13;
  float v21 = v14;
  *((float *)this + 8468) = v21;
  *((double *)this + 4235) = v20;
  *(float *)&double v20 = (double)v19 * 0.000001;
  *((_DWORD *)this + 8472) = LODWORD(v20);
  *((_DWORD *)this + 8473) = v7;
  uint64_t v22 = (unsigned char *)*((void *)this + 5333);
  uint64_t v23 = 91;
  do
  {
    *uint64_t v22 = 0;
    v22 += 96;
    --v23;
  }
  while (v23);
  unsigned __int8 v41 = v57;
  memcpy(v45, __src, 4 * v57);
  unsigned __int16 v43 = 0;
  unsigned __int8 v42 = 0;
  int v44 = v45[0];
  for (uint64_t result = (uint64_t)BlueFin::GlSetIterator::operator++(&v41);
        v42 != v41;
        uint64_t result = (uint64_t)BlueFin::GlSetIterator::operator++(&v41))
  {
    unsigned __int16 v24 = v43;
    if (v43 >= 0x23FuLL)
    {
      DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
    }
    int v25 = (unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v43;
    unsigned __int8 v26 = *v25;
    int v27 = (char)v25[1];
    v38[0] = *v25;
    int v39 = v27;
    unsigned __int16 v40 = v43;
    BlueFin::GlPeSatAidInfo::Add((uint64_t)v2, v38);
    if (v28)
    {
      int v29 = v28;
      *int v28 = v26;
      uint64_t v30 = *((void *)this + 786);
      v38[0] = v26;
      int v39 = v27;
      unsigned __int16 v40 = v24;
      int v59 = 7;
      unsigned __int8 v60 = 0;
      BlueFin::GlPeSvIdConverter::SvId2Gnss((BlueFin::GlPeGloFcnOsnMgr **)(v30 + 119744), v38, (uint64_t)&v59);
      unsigned __int8 v31 = v60;
      *((_DWORD *)v29 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v59;
      unsigned char v29[8] = v31;
      BOOL v32 = (BlueFin::GlPeMsmtMgr *)*((void *)this + 790);
      v38[0] = v26;
      int v39 = v27;
      unsigned __int16 v40 = v24;
      float IniDoppler = BlueFin::GlPeMsmtMgr::GetIniDoppler(v32, (const BlueFin::GlSignalId *)v38);
      *((float *)v29 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = IniDoppler;
      double v34 = (double)BlueFin::GlPeTimeManager::GetSleepTimeSec(*((BlueFin::GlPeTimeManager **)this + 785))
          * 5.0e-10;
      if (v34 < 0.00000001) {
        double v34 = 0.00000001;
      }
      float v35 = v34;
      *((float *)v29 + 12) = v35;
      *((_DWORD *)v29 + 6) = 16;
    }
  }
  return result;
}

uint64_t BlueFin::GlPeTimeManager::GetSleepTimeSec(BlueFin::GlPeTimeManager *this)
{
  double v1 = *((double *)this + 319);
  if (v1 <= 0.0) {
    return 0;
  }
  double v2 = v1 * 0.001 + 0.5;
  double v3 = fmod(v2, 4294967300.0);
  if (v2 <= 4294967300.0) {
    double v3 = v2;
  }
  if (v3 < -4294967300.0) {
    double v3 = -fmod(-v3, 4294967300.0);
  }
  if (v3 < 0.0) {
    unsigned int v4 = --v3;
  }
  else {
    unsigned int v4 = v3;
  }
  if (v4 <= 1) {
    return 1;
  }
  else {
    return v4;
  }
}

double BlueFin::GlPeMsmtMgr::GetIniDoppler(BlueFin::GlPeMsmtMgr *this, const BlueFin::GlSignalId *a2)
{
  double v2 = (unsigned __int8 **)((char *)this + 37664);
  double v3 = (char *)this + 37664;
  uint64_t v5 = *((void *)v3 + 1);
  unsigned int v4 = (BlueFin::GlSetBase *)(v3 + 8);
  if ((((unint64_t)*(unsigned int *)(v5 + 4 * (*((__int16 *)a2 + 4) >> 5)) >> (*((_WORD *)a2 + 4) & 0x1F)) & 1) == 0)
  {
    unint64_t v10 = "m_otIniDopp.otDoppSignalIds.Has(rotSignalId)";
    DeviceFaultNotify("glpe_msmtmgr.cpp", 1101, "GetIniDoppler", (char)"m_otIniDopp.otDoppSignalIds.Has(rotSignalId)");
    int v11 = 1101;
LABEL_10:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_msmtmgr.cpp", v11, v10);
  }
  unsigned __int8 v7 = BlueFin::GlSetBase::Cnt(v4);
  uint64_t v8 = v7;
  if (!v7)
  {
LABEL_7:
    unint64_t v10 = "0";
    DeviceFaultNotify("glpe_msmtmgr.cpp", 1110, "GetIniDoppler", (char)"0");
    int v11 = 1110;
    goto LABEL_10;
  }
  double v9 = *v2;
  while (*v9 != *(unsigned __int8 *)a2 || *((_DWORD *)v9 + 1) != *((_DWORD *)a2 + 1))
  {
    v9 += 32;
    if (!--v8) {
      goto LABEL_7;
    }
  }
  return *((double *)v9 + 2);
}

BlueFin::GlSatAidInfo *BlueFin::GlSatAidInfo::GlSatAidInfo(BlueFin::GlSatAidInfo *this, const BlueFin::GlSatAidInfo *a2)
{
  uint64_t v4 = 0;
  *(void *)this = &unk_270EBA388;
  *((void *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *((void *)a2 + 1);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((void *)this + 3) = *((void *)a2 + 3);
  int v5 = *((_DWORD *)a2 + 8);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)this + 2200) = *((_DWORD *)a2 + 2200);
  *((void *)this + 110BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = (char *)this + 64;
  uint64_t v6 = 91;
  *((_DWORD *)this + 8) = v5;
  do
  {
    BlueFin::GlSatAid::GlSatAid(*((void *)this + 1101) + v4, *((void *)a2 + 1101) + v4);
    v4 += 96;
    --v6;
  }
  while (v6);
  return this;
}

float BlueFin::GlSatAid::GlSatAid(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 76) = *(_OWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  for (uint64_t i = 56; i != 72; i += 4)
  {
    float result = *(float *)(a2 + i);
    *(float *)(a1 + i) = result;
  }
  return result;
}

uint64_t BlueFin::GlDineCtrl::SetFarStartMode(BlueFin::GlDineCtrl *this, int a2)
{
  double v3 = (char *)this + 74201;
  uint64_t v4 = "Disabled";
  if (a2) {
    uint64_t v4 = "Enabled";
  }
  uint64_t result = GlCustomLog(14, "GlDineCtrl::SetFarStartMode(%s)\n", v4);
  v3[1] = a2;
  if (a2) {
    *double v3 = 1;
  }
  return result;
}

uint64_t BlueFin::stPeSigEnv::Deserialize(BlueFin::stPeSigEnv *this, BlueFin::GlSysLogEntry *a2)
{
  BOOL v2 = *((unsigned __int8 *)a2 + 12) - 1 < 2 && *((_DWORD *)a2 + 2) == 58;
  uint64_t v3 = v2;
  if (v2)
  {
    *((float *)this + 2) = BlueFin::GlSysLogEntry::GetF32(a2);
    int v6 = *((unsigned __int8 *)a2 + 12);
    float F32 = BlueFin::GlSysLogEntry::GetF32(a2);
    if (v6 == 1) {
      float F32 = F32 + 174.0;
    }
    *((float *)this + 3) = F32;
    if (*((unsigned __int16 *)a2 + 11) != *((unsigned __int16 *)a2 + 10))
    {
      DeviceFaultNotify("glpe_msmtmgr.cpp", 418, "Deserialize", (char)"otEntry.DataSize() == otEntry.ReadIdx()");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_msmtmgr.cpp", 418, "otEntry.DataSize() == otEntry.ReadIdx()");
    }
  }
  return v3;
}

uint64_t BlueFin::GlPeGlnTimeData::Deserialize(BlueFin::GlPeGlnTimeData *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 31) {
    return 0;
  }
  int v3 = *((unsigned __int8 *)a2 + 12);
  if ((v3 - 4) < 0xFFFFFFFD) {
    return 0;
  }
  if (v3 == 1)
  {
    *((_WORD *)a2 + 10) = *((_WORD *)a2 + 11);
  }
  else
  {
    *((unsigned char *)this + 8) = BlueFin::GlSysLogEntry::GetU8(a2);
    *((_WORD *)this + 5) = BlueFin::GlSysLogEntry::GetU16(a2);
    if (*((unsigned __int8 *)a2 + 12) < 3u) {
      int U8 = 3;
    }
    else {
      int U8 = BlueFin::GlSysLogEntry::GetU8(a2);
    }
    *((_DWORD *)this + 3) = U8;
    *((unsigned char *)this + 16) = BlueFin::GlSysLogEntry::GetU8(a2) != 0;
    *((double *)this + 3) = BlueFin::GlSysLogEntry::GetD64(a2);
    *((unsigned char *)this + 32) = BlueFin::GlSysLogEntry::GetU8(a2) != 0;
    *((double *)this + 5) = BlueFin::GlSysLogEntry::GetD64(a2);
    *((unsigned char *)this + 48) = BlueFin::GlSysLogEntry::GetU8(a2) != 0;
    *((unsigned char *)this + 49) = BlueFin::GlSysLogEntry::GetS8(a2);
    *((unsigned char *)this + 50) = BlueFin::GlSysLogEntry::GetU8(a2) != 0;
    *((float *)this + 13) = BlueFin::GlSysLogEntry::GetF32(a2);
    *((float *)this + 14) = BlueFin::GlSysLogEntry::GetF32(a2);
  }
  BlueFin::GlSysLogEntry::CheckConsumed(a2, 151);
  return 1;
}

uint64_t BlueFin::GlPeEnvMonitorData::Deserialize(BlueFin::GlPeEnvMonitorData *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 68 || *((unsigned __int8 *)a2 + 12) - 3 < 0xFFFFFFFE) {
    return 0;
  }
  *((_DWORD *)this + 2) = BlueFin::GlSysLogEntry::GetU8(a2);
  *((float *)this + 3) = BlueFin::GlSysLogEntry::GetF32(a2);
  *((float *)this + 4) = BlueFin::GlSysLogEntry::GetF32(a2);
  *((float *)this + 5) = BlueFin::GlSysLogEntry::GetF32(a2);
  *((float *)this + 6) = BlueFin::GlSysLogEntry::GetF32(a2);
  *((double *)this + 5) = BlueFin::GlSysLogEntry::GetD64(a2);
  if (*((unsigned __int8 *)a2 + 12) >= 2u) {
    *((double *)this + 4) = BlueFin::GlSysLogEntry::GetD64(a2);
  }
  BlueFin::GlSysLogEntry::CheckConsumed(a2, 530);
  return 1;
}

float BlueFin::GlSysLogEntry::GetF32(BlueFin::GlSysLogEntry *this)
{
  if ((unint64_t)*((unsigned __int16 *)this + 10) + 4 > *((unsigned __int16 *)this + 11))
  {
    DeviceFaultNotify("glutl_slog_codec.cpp", 650, "GetF32", (char)"m_sReadIdx + sizeof(fValue) <= m_sDataSize");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_slog_codec.cpp", 650, "m_sReadIdx + sizeof(fValue) <= m_sDataSize");
  }
  uint64_t v2 = 0;
  float v6 = 0.0;
  do
  {
    uint64_t v3 = (*(uint64_t (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 24))(this);
    uint64_t v4 = *((unsigned __int16 *)this + 10);
    *((_WORD *)this + 10) = v4 + 1;
    *((unsigned char *)&v6 + v2++) = *(unsigned char *)(v3 + v4);
  }
  while (v2 != 4);
  return v6;
}

uint64_t BlueFin::GlPeTimeManager::getLeapSecFromHardcodedSchedule(BlueFin::GlPeTimeManager *this, const BlueFin::GlPeGnssTime *a2, signed __int8 *a3)
{
  unsigned __int8 v5 = 0;
  uint64_t v6 = 0;
  do
  {
    switch(*((_DWORD *)this + 2))
    {
      case 0:
        uint64_t v6 = *((void *)BlueFin::GlPeSpecialTimeEvents::GetKnownLeapSeconds((BlueFin::GlPeSpecialTimeEvents *)v5) + 2);
        break;
      case 1:
        uint64_t v6 = *((void *)BlueFin::GlPeSpecialTimeEvents::GetKnownLeapSeconds((BlueFin::GlPeSpecialTimeEvents *)v5) + 4);
        break;
      case 2:
        uint64_t v6 = *((void *)BlueFin::GlPeSpecialTimeEvents::GetKnownLeapSeconds((BlueFin::GlPeSpecialTimeEvents *)v5) + 6);
        break;
      case 3:
        uint64_t v6 = *((void *)BlueFin::GlPeSpecialTimeEvents::GetKnownLeapSeconds((BlueFin::GlPeSpecialTimeEvents *)v5) + 10);
        break;
      case 4:
        uint64_t v6 = *((void *)BlueFin::GlPeSpecialTimeEvents::GetKnownLeapSeconds((BlueFin::GlPeSpecialTimeEvents *)v5) + 12);
        break;
      case 5:
        uint64_t v6 = *((void *)BlueFin::GlPeSpecialTimeEvents::GetKnownLeapSeconds((BlueFin::GlPeSpecialTimeEvents *)v5) + 14);
        break;
      default:
        break;
    }
    unsigned int v7 = *((_DWORD *)this + 1);
    unsigned int v8 = HIDWORD(v6);
    if (v7 < HIDWORD(v6)
      || ((unsigned int v9 = v6, v7 == HIDWORD(v6)) ? (v10 = *(_DWORD *)this >= v6) : (v10 = 1), !v10))
    {
      KnownLeapSeconds = BlueFin::GlPeSpecialTimeEvents::GetKnownLeapSeconds((BlueFin::GlPeSpecialTimeEvents *)v5);
      LOBYTE(v17) = 0;
      *(unsigned char *)a2 = *KnownLeapSeconds - 1;
      return v17;
    }
    unsigned int v11 = v5++;
  }
  while (v11 < 5);
  *(unsigned char *)a2 = byte_26B4343F0 - 1;
  int v12 = *((_DWORD *)this + 2);
  unint64_t v22 = 0;
  BlueFin::GlPeGnssTime::getDateTime((double *)this, v12, &v22);
  unsigned int v13 = v22;
  unsigned int v14 = HIDWORD(v22);
  char v15 = v8 | v9;
  if (v8 | v9)
  {
    if (v22 < __PAIR64__(v8, v9))
    {
      unsigned int v14 = (__PAIR64__(v8, v9) - v22) >> 32;
      unsigned int v13 = v9 - v22;
      char v15 = 1;
    }
    else
    {
      char v15 = 0;
      unsigned int v14 = (v22 - __PAIR64__(v8, v9)) >> 32;
      unsigned int v13 = v22 - v9;
    }
  }
  double v18 = (double)v13 * 2.32830644e-10 + (double)v14;
  if ((v15 & ((v14 | v13) != 0)) != 0) {
    double v18 = -v18;
  }
  double v19 = ceil(v18 / 63115200.0);
  double v20 = fmod(v19, 4294967300.0);
  if (v19 <= 4294967300.0) {
    double v20 = v19;
  }
  if (v20 < -4294967300.0) {
    double v20 = -fmod(-v20, 4294967300.0);
  }
  if (v20 < 0.0) {
    return --v20;
  }
  else {
    LOBYTE(v17) = v20;
  }
  return v17;
}

char *BlueFin::GlPeSpecialTimeEvents::GetKnownLeapSeconds(BlueFin::GlPeSpecialTimeEvents *this)
{
  if (this >= 6)
  {
    DeviceFaultNotify("glpe_timemgr.cpp", 1816, "GetKnownLeapSeconds", (char)"ucIdx < _DIM(m_aotKnownLeapSeconds)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timemgr.cpp", 1816, "ucIdx < _DIM(m_aotKnownLeapSeconds)");
  }
  return &BlueFin::GlPeSpecialTimeEvents::m_aotKnownLeapSeconds[120 * this];
}

uint64_t gnss::FireGnssDevice::stopTimeTransferSession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FireDeviceLog::DeviceLogBase(6, "#fgd stopTimeTransferSession", a3, a4, a5, a6, a7, a8, v10);

  return std::function<void ()(gnss::Result)>::operator()(a2, 1);
}

uint64_t BlueFin::GlMeSrdEstPkFit::Run(float a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char a11, unsigned __int8 a12, unsigned __int8 *a13, uint64_t a14, uint64_t a15, char a16, char a17, uint64_t a18, unsigned __int8 *a19, unsigned __int8 *a20)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)a15)
  {
    float v66 = "stCNoResults.bValid";
    DeviceFaultNotify("glmesrd_pkfit.cpp", 362, "Run", (char)"stCNoResults.bValid");
    int v67 = "glmesrd_pkfit.cpp";
    int v68 = 362;
    goto LABEL_63;
  }
  if (*a13 - 1 >= 0xBC)
  {
    float v66 = "otSignalId.GetSvId().isValid()";
    DeviceFaultNotify("glmesrd_pkfit.cpp", 363, "Run", (char)"otSignalId.GetSvId().isValid()");
    int v67 = "glmesrd_pkfit.cpp";
    int v68 = 363;
    goto LABEL_63;
  }
  unsigned int v20 = a8;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int8 *, uint64_t, void))(*(void *)a4 + 24))(a4, a7, a8, a20, a9, 0);
  if (a11)
  {
    if (a20[13] < v20 && *(float *)(a15 + 8) < 32.0)
    {
      *(_DWORD *)a18 = 0;
      return result;
    }
  }
  if (*a20 >= 9u)
  {
    float v66 = "stAvgdMagSqCvec.m_ucCvecLen <= MAX_CVEC_LEN";
    DeviceFaultNotify("glmesrd_pkfit.cpp", 381, "Run", (char)"stAvgdMagSqCvec.m_ucCvecLen <= MAX_CVEC_LEN");
    int v67 = "glmesrd_pkfit.cpp";
    int v68 = 381;
    goto LABEL_63;
  }
  if (a19 != a20) {
    BlueFin::GlMeSrdSatReportTrkCorrVec::CopyFrom((uint64_t)a19, a20);
  }
  uint64_t v26 = *a19;
  if (*a19)
  {
    int v27 = (float *)(a19 + 16);
    uint64_t v28 = *a19;
    do
    {
      float v29 = *v27++;
      float v30 = v29;
      if (v29 < a1) {
        a1 = v30;
      }
      --v28;
    }
    while (v28);
    unsigned __int8 v31 = (float *)(a19 + 16);
    do
    {
      *unsigned __int8 v31 = sqrtf(*v31 - a1);
      ++v31;
      --v26;
    }
    while (v26);
  }
  *((_DWORD *)a19 + 2) = 0;
  if (BlueFin::GlUtils::m_ucEnabled) {
    BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x97);
  }
  int v32 = *((_DWORD *)a13 + 1);
  int v33 = (v32 == 3 || !v32) && (*(_DWORD *)a5 - 5) < 2;
  uint64_t result = BlueFin::GlMeSrdEstPkFit::CheckForUsableCorrvec((float *)a19 + 4, *a19, a19[1], a19[2], v33, (unsigned char *)(a18 + 46), a12, (uint64_t)a5, a17);
  *(_DWORD *)a18 = result;
  if (result != 1) {
    return result;
  }
  if (*((unsigned __int16 *)a13 + 4) >= 0x23Fu) {
    goto LABEL_61;
  }
  uint64_t v34 = BlueFin::GlSvId::s_aucSvId2gnss[*a13];
  uint64_t v35 = *((int *)a13 + 1);
  int v36 = BlueFin::GlSignalId::s_aulSignalIndexAndGnss2chipsPerEpoch[7 * (int)v35 + v34];
  unsigned int v37 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v35 - v35 + v34];
  if (v36) {
    BOOL v38 = v37 == 0;
  }
  else {
    BOOL v38 = 1;
  }
  if (v38)
  {
LABEL_62:
    float v66 = "ulChipsPerEpoch != 0 && ulMsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 814, "GetChipsPerSec", (char)"ulChipsPerEpoch != 0 && ulMsPerEpoch != 0");
    int v67 = "glsignalid.h";
    int v68 = 814;
LABEL_63:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v67, v68, v66);
  }
  *(float *)(a18 + 12) = (float)(1000 * v36 / v37) * 0.00000033333;
  if (*(unsigned char *)a15 && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 48))(a4) >= 3)
  {
    float v39 = 0.2728
        / (float)(*(float *)(a15 + 12) * (float)(*(unsigned int (**)(uint64_t))(*(void *)a4 + 48))(a4));
    *(float *)(a18 + 12) = v39;
    if (*((unsigned __int16 *)a13 + 4) < 0x23Fu)
    {
      uint64_t v40 = BlueFin::GlSvId::s_aucSvId2gnss[*a13];
      uint64_t v41 = *((int *)a13 + 1);
      int v42 = BlueFin::GlSignalId::s_aulSignalIndexAndGnss2chipsPerEpoch[7 * (int)v41 + v40];
      if (v42)
      {
        unsigned int v43 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v41 - v41 + v40];
        if (v43)
        {
          float v44 = (float)(1000 * v42 / v43) * 0.0000000066713;
          if (v39 < v44) {
            *(float *)(a18 + 12) = v44;
          }
          goto LABEL_39;
        }
      }
      goto LABEL_62;
    }
LABEL_61:
    float v66 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 806, "GetChipsPerSec", (char)"IsValid()");
    int v67 = "glsignalid.h";
    int v68 = 806;
    goto LABEL_63;
  }
LABEL_39:
  uint64_t result = (uint64_t)BlueFin::GlMeTrkCvecTapConfig::GetTrackCvecDelayOffsetArray(a5, v74, *a19);
  *(void *)(a18 + 16) = 0;
  if (a20[1])
  {
    uint64_t v45 = a20[2];
    if (a20[2])
    {
      uint64_t v46 = 0;
      uint64_t v47 = 4 * v45;
      float v48 = 0.0;
      do
      {
        if (*(float *)&a20[v46 + 16] > v48) {
          float v48 = *(float *)&a20[v46 + 16];
        }
        v46 += 4;
      }
      while (v47 != v46);
      if (v48 > 0.0)
      {
        uint64_t v49 = *a20;
        float v50 = 0.0;
        int v51 = 0;
        int v52 = 0;
        if (v45 < v49)
        {
          uint64_t v53 = v49 - v45;
          __int16 v54 = &v74[v45];
          uint64_t v55 = v47 + 16;
          int v56 = &a19[v47 + 16];
          unsigned __int8 v57 = (float *)&a20[v55];
          do
          {
            if ((float)(*v57 / v48) > v50)
            {
              int v51 = *(_DWORD *)v56;
              int v52 = *(_DWORD *)v54;
              float v50 = *v57 / v48;
            }
            ++v54;
            v56 += 4;
            ++v57;
            --v53;
          }
          while (v53);
        }
        if (*((_DWORD *)a13 + 1))
        {
          *(_DWORD *)(a18 + 16) = v51;
        }
        else
        {
          *(float *)(a18 + 16) = v50;
          if (v50 > 0.9)
          {
            *(_DWORD *)a18 = 4;
            return result;
          }
        }
        *(_DWORD *)(a18 + 20) = v52;
      }
    }
  }
  unsigned int v58 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 40))(a4);
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  float v71 = 0.0;
  int v59 = (const float *)*a19;
  double v60 = (*(double (**)(uint64_t))(*(void *)a4 + 48))(a4);
  BYTE5(v69) = v33;
  BYTE4(v69) = a10;
  LODWORD(v69) = *((_DWORD *)a13 + 1);
  uint64_t result = (uint64_t)BlueFin::GlMeSrdEstPkFit::LeastSquaresPeakFit((BlueFin::GlMeSrdEstPkFit *)(a19 + 16), v74, v59, v61, a19[1], a19[2], v58, *a13, v60, v69, (float *)&v73 + 1, (float *)&v73, (float *)&v72 + 1, (float *)&v72, &v71, v70);
  float v62 = *((float *)&v73 + 1);
  float v63 = v74[v58] - v74[0];
  int v65 = HIDWORD(v72);
  int v64 = v73;
  *(float *)(a18 + 4) = *(float *)&v73 + *((float *)&v72 + 1);
  *(_DWORD *)(a18 + 24) = v72;
  *(float *)(a18 + 28) = v62;
  *(float *)(a18 + 32) = v63 + v62;
  *(_DWORD *)(a18 + 36) = v64;
  *(_DWORD *)(a18 + 40) = v65;
  *(_WORD *)(a18 + 44) = *((_WORD *)a19 + 6);
  *(float *)(a18 + 8) = v71;
  return result;
}

uint64_t BlueFin::GlMeSrdCorrVecAccumulator::GetDelaysPerChip(BlueFin::GlMeSrdCorrVecAccumulator *this)
{
  return *((unsigned __int8 *)this + 16);
}

uint64_t BlueFin::GlMeSrdCorrVecAccumulator::CalcAvgCvec(uint64_t a1, unsigned int a2, unsigned int a3, unsigned char *a4, char a5, int a6)
{
  if (a2 >= 0xB)
  {
    unsigned __int16 v24 = "ucMinNumCvecsToAverage <= GlMeSrdCorrvecAccumulatorArrays::SRD_CORRVEC_MAX_VECS";
    DeviceFaultNotify("glmesrd_corrvec_accumulator.cpp", 173, "CalcAvgCvec", (char)"ucMinNumCvecsToAverage <= GlMeSrdCorrvecAccumulatorArrays::SRD_CORRVEC_MAX_VECS");
    int v25 = 173;
    goto LABEL_40;
  }
  LODWORD(v6) = *(unsigned __int8 *)(a1 + 21);
  if (!*(unsigned char *)(a1 + 21))
  {
    unsigned __int16 v24 = "m_ucCorrVecLen > 0";
    DeviceFaultNotify("glmesrd_corrvec_accumulator.cpp", 174, "CalcAvgCvec", (char)"m_ucCorrVecLen > 0");
    int v25 = 174;
    goto LABEL_40;
  }
  unsigned int v7 = *(unsigned __int8 *)(a1 + 20);
  if (v7 < a2)
  {
    unsigned __int16 v24 = "ucMinNumCvecsToAverage <= m_ucNumVecs";
    DeviceFaultNotify("glmesrd_corrvec_accumulator.cpp", 175, "CalcAvgCvec", (char)"ucMinNumCvecsToAverage <= m_ucNumVecs");
    int v25 = 175;
    goto LABEL_40;
  }
  unsigned int v8 = *(unsigned __int8 *)(a1 + 488);
  if (!*(unsigned char *)(a1 + 488)) {
    unsigned int v8 = *(unsigned __int8 *)(a1 + 20);
  }
  signed int v9 = v8 - 1;
  uint64_t v10 = *(void *)(a1 + 480);
  if (!*(_DWORD *)(v10 + 40 * (int)(v8 - 1)))
  {
    unsigned __int16 v24 = "m_otCorrVecArray[ssSampInd].m_ulTimeStamp != 0";
    DeviceFaultNotify("glmesrd_corrvec_accumulator.cpp", 184, "CalcAvgCvec", (char)"m_otCorrVecArray[ssSampInd].m_ulTimeStamp != 0");
    int v25 = 184;
    goto LABEL_40;
  }
  int v11 = *(unsigned __int8 *)(v10 + 40 * v9 + 5);
  if (a6)
  {
    if (*(unsigned char *)(a1 + 18))
    {
      LODWORD(v6) = *(unsigned __int8 *)(a1 + 19);
      if (!*(unsigned char *)(a1 + 19))
      {
        unsigned __int16 v24 = "m_ucIdxOfFirstVeryEarlySample > 0";
        DeviceFaultNotify("glmesrd_corrvec_accumulator.cpp", 193, "CalcAvgCvec", (char)"m_ucIdxOfFirstVeryEarlySample > 0");
        int v25 = 193;
        goto LABEL_40;
      }
    }
  }
  uint64_t v12 = 0;
  uint64_t v6 = v6;
  uint64_t v13 = v10 + 40 * v8 - 32;
  do
  {
    *(_DWORD *)&a4[4 * v12 + 16] = *(_DWORD *)(v13 + 4 * v12);
    ++v12;
  }
  while (v6 != v12);
  unsigned __int8 v14 = *(unsigned char *)(v10 + 40 * v9 + 4);
  if (v7 < 2)
  {
    LOBYTE(v7) = 1;
  }
  else
  {
    int v15 = v11 + 8;
    unsigned __int16 v16 = 1;
    while (a2 > v16 || a3 > v14)
    {
      signed int v9 = (v7 & ((__int16)(v9 - 1) >> 15)) + v9 - 1;
      if (!*(_DWORD *)(v10 + 40 * (__int16)v9)
        || (a5 & 1) == 0 && *(unsigned __int8 *)(v10 + 40 * (__int16)v9 + 5) > v15)
      {
        break;
      }
      int v17 = (float *)(v10 + 8 + 40 * (__int16)v9);
      double v18 = (float *)(a4 + 16);
      uint64_t v19 = v6;
      do
      {
        float v20 = *v17++;
        *double v18 = v20 + *v18;
        ++v18;
        --v19;
      }
      while (v19);
      ++v16;
      v14 += *(unsigned char *)(v10 + 40 * (__int16)v9 + 4);
      if (v7 <= v16) {
        goto LABEL_25;
      }
    }
    LOBYTE(v7) = v16;
  }
LABEL_25:
  *a4 = v6;
  if (a6 && *(unsigned char *)(a1 + 18))
  {
    char v21 = 0;
    a4[1] = 0;
  }
  else
  {
    a4[1] = *(unsigned char *)(a1 + 18);
    char v21 = *(unsigned char *)(a1 + 19);
  }
  a4[2] = v21;
  uint64_t result = v7;
  if (v7 != 1)
  {
    if ((_BYTE)v7)
    {
      uint64_t v23 = (float *)(a4 + 16);
      do
      {
        float *v23 = *v23 / (float)v7;
        ++v23;
        --v6;
      }
      while (v6);
      goto LABEL_33;
    }
    unsigned __int16 v24 = "ucNumCvecsAveraged > 0";
    DeviceFaultNotify("glmesrd_corrvec_accumulator.cpp", 257, "CalcAvgCvec", (char)"ucNumCvecsAveraged > 0");
    int v25 = 257;
LABEL_40:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_corrvec_accumulator.cpp", v25, v24);
  }
LABEL_33:
  a4[12] = v7;
  a4[13] = v14;
  return result;
}

uint64_t BlueFin::GlMeSrdEstPkFit::Run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, float *a17, float a18, int a19, long long a20)
{
  MEMORY[0x270FA5388](a1, a2);
  STACK[0x13B8] = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)v12)
  {
    uint64_t v49 = "stAsicCorrVecMsmt.m_bValid";
    DeviceFaultNotify("glmesrd_pkfit.cpp", 192, "Run", (char)"stAsicCorrVecMsmt.m_bValid");
    float v50 = "glmesrd_pkfit.cpp";
    int v51 = 192;
    goto LABEL_49;
  }
  uint64_t v17 = v12;
  if (!*(unsigned char *)(v12 + 36))
  {
    uint64_t v49 = "stAsicCorrVecMsmt.m_ucDelaysPerChip > 0";
    DeviceFaultNotify("glmesrd_pkfit.cpp", 193, "Run", (char)"stAsicCorrVecMsmt.m_ucDelaysPerChip > 0");
    float v50 = "glmesrd_pkfit.cpp";
    int v51 = 193;
    goto LABEL_49;
  }
  unsigned int v18 = *(unsigned __int8 *)(v12 + 1);
  if (v18 >= 9)
  {
    uint64_t v49 = "stAsicCorrVecMsmt.m_ucCvecLen <= MAX_CVEC_LEN";
    DeviceFaultNotify("glmesrd_pkfit.cpp", 194, "Run", (char)"stAsicCorrVecMsmt.m_ucCvecLen <= MAX_CVEC_LEN");
    float v50 = "glmesrd_pkfit.cpp";
    int v51 = 194;
    goto LABEL_49;
  }
  uint64_t v19 = v13;
  if (*v13 - 1 >= 0xBC)
  {
    uint64_t v49 = "otSignalId.GetSvId().isValid()";
    DeviceFaultNotify("glmesrd_pkfit.cpp", 195, "Run", (char)"otSignalId.GetSvId().isValid()");
    float v50 = "glmesrd_pkfit.cpp";
    int v51 = 195;
    goto LABEL_49;
  }
  uint64_t v20 = v16;
  uint64_t v21 = v15;
  int v22 = v14;
  uint64_t result = BlueFin::GlMeSrdEstPkFit::CheckForUsableCorrvec((float *)(v12 + 4), v18, 0, 0, 0, (unsigned char *)(v16 + 46), 0, 0, 0);
  *(_DWORD *)uint64_t v20 = result;
  if (result != 1) {
    goto LABEL_30;
  }
  uint64_t vars0 = 0;
  uint64_t vars8 = 0;
  v54[1] = 0.0;
  unsigned __int16 v24 = (const float *)*(unsigned __int8 *)(v17 + 1);
  if (v24 != 8)
  {
    uint64_t v49 = "usVecLen == 8";
    DeviceFaultNotify("glmesrd_pkfit.cpp", 1239, "GetSearchCvecDelayOffsetArray", (char)"usVecLen == 8");
    float v50 = "glmesrd_pkfit.cpp";
    int v51 = 1239;
    goto LABEL_49;
  }
  unsigned int v25 = *(unsigned __int8 *)(v17 + 36);
  char v26 = *v19;
  if (v25 != 2 || !v22)
  {
    if (v25 == 1)
    {
      long long v27 = xmmword_263BAEDA0;
      uint64_t v28 = (float *)0xC0000000C0400000;
      float v29 = -1.0;
      goto LABEL_22;
    }
    if (v25 == 4)
    {
      long long v27 = xmmword_263BAEDB0;
      uint64_t v28 = (float *)0xBF000000BF400000;
      goto LABEL_20;
    }
    if (v25 != 2)
    {
      uint64_t v49 = "0";
      DeviceFaultNotify("glmesrd_pkfit.cpp", 1310, "GetSearchCvecDelayOffsetArray", (char)"0");
      float v50 = "glmesrd_pkfit.cpp";
      int v51 = 1310;
      goto LABEL_49;
    }
LABEL_17:
    long long v27 = xmmword_263BAEDC0;
    uint64_t v28 = (float *)0xBF800000BFC00000;
    float v29 = -0.5;
    goto LABEL_22;
  }
  if ((v26 - 1) >= 0x20u && (v26 + 117) > 0x23u) {
    goto LABEL_17;
  }
  if (*(unsigned char *)(v17 + 37))
  {
    if (*(unsigned char *)(v17 + 37) == 1)
    {
      long long v27 = xmmword_263BAEDE0;
      uint64_t v28 = (float *)0xBF800000BFA00000;
LABEL_20:
      float v29 = -0.25;
      goto LABEL_22;
    }
    uint64_t v49 = "0";
    DeviceFaultNotify("glmesrd_pkfit.cpp", 1271, "GetSearchCvecDelayOffsetArray", (char)"0");
    float v50 = "glmesrd_pkfit.cpp";
    int v51 = 1271;
LABEL_49:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v50, v51, v49);
  }
  long long v27 = xmmword_263BAEDD0;
  uint64_t v28 = (float *)0xBF800000BFE00000;
  float v29 = -0.75;
LABEL_22:
  a17 = v28;
  a18 = v29;
  a19 = 0;
  a20 = v27;
  WORD2(v52) = 0;
  LODWORD(v52) = *((_DWORD *)v19 + 1);
  uint64_t result = (uint64_t)BlueFin::GlMeSrdEstPkFit::LeastSquaresPeakFit((BlueFin::GlMeSrdEstPkFit *)(v17 + 4), (const float *)&a17, v24, v25, 0, 0, 3u, v26, *(double *)&v27, v52, (float *)&vars8 + 1, (float *)&vars8, (float *)&vars0 + 1, (float *)&vars0, &v54[1], v28);
  if (*((unsigned __int16 *)v19 + 4) >= 0x23Fu)
  {
    uint64_t v49 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 806, "GetChipsPerSec", (char)"IsValid()");
    float v50 = "glsignalid.h";
    int v51 = 806;
    goto LABEL_49;
  }
  uint64_t v30 = BlueFin::GlSvId::s_aucSvId2gnss[*v19];
  uint64_t v31 = *((int *)v19 + 1);
  int v32 = BlueFin::GlSignalId::s_aulSignalIndexAndGnss2chipsPerEpoch[7 * (int)v31 + v30];
  if (!v32
    || (unsigned int v33 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v31 - v31 + v30]) == 0)
  {
    uint64_t v49 = "ulChipsPerEpoch != 0 && ulMsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 814, "GetChipsPerSec", (char)"ulChipsPerEpoch != 0 && ulMsPerEpoch != 0");
    float v50 = "glsignalid.h";
    int v51 = 814;
    goto LABEL_49;
  }
  float v34 = (float)(1000 * v32 / v33);
  *(float *)(v20 + 12) = v34 * 0.00000033333;
  if (*(unsigned char *)v21)
  {
    if (*(unsigned __int8 *)(v17 + 36) >= 3u)
    {
      float v35 = 0.75 / *(float *)(v21 + 16);
      *(float *)(v20 + 12) = v35;
      float v36 = v34 * 0.0000000066713;
      if (v35 < v36) {
        *(float *)(v20 + 12) = v36;
      }
    }
  }
  float v37 = *((float *)&vars0 + 1);
  uint64_t v38 = vars8;
  *(_DWORD *)(v20 + 24) = vars0;
  *(_DWORD *)(v20 + 28) = HIDWORD(v38);
  *(void *)(v20 + 16) = 0;
  *(float *)(v20 + 32) = (float)(0.0 - v53) + *((float *)&v38 + 1);
  *(_DWORD *)(v20 + 36) = v38;
  *(float *)(v20 + 40) = v37;
  float v39 = v54[1];
  *(float *)(v20 + 4) = *(float *)&v38 + v37;
  *(float *)(v20 + 8) = v39;
LABEL_30:
  if (!BlueFin::GlUtils::m_pInstance || !*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
    return result;
  }
  BlueFin::GlMeCorrVecContainer::GlMeCorrVecContainer((uint64_t)&a17, v17 + 40, *(unsigned char *)(v17 + 38), *(_DWORD *)(v17 + 52), *(double *)(v17 + 56));
  uint64_t v40 = STACK[0x348];
  unsigned int v41 = *(unsigned __int8 *)(v17 + 1);
  int SrchCvecType = BlueFin::GlMeCorrVecAndParams::GetSrchCvecType((BlueFin::GlMeCorrVecAndParams *)*(unsigned __int8 *)(v17 + 36));
  BlueFin::GlMeCorrVecAndParams::SetCorrVec(v40, v41, SrchCvecType, 1, 0, 0, (int *)(v17 + 4));
  unint64_t v43 = STACK[0x348];
  uint64_t result = BlueFin::GlMePkFitParams::SetParams(STACK[0x348] + 48, *(float *)(v20 + 4), *(float *)(v20 + 32), *(float *)(v20 + 24), *(unsigned char *)v20);
  *(unsigned char *)(v43 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 1;
  float v44 = *(float *)(v20 + 8) * 10000.0;
  if (v44 <= 0.0)
  {
    if (v44 >= 0.0)
    {
      LOWORD(v47) = 0;
      goto LABEL_38;
    }
    double v45 = v44;
    double v46 = -0.5;
  }
  else
  {
    double v45 = v44;
    double v46 = 0.5;
  }
  int v47 = (int)(v45 + v46);
LABEL_38:
  unint64_t v48 = STACK[0x348];
  *(_WORD *)(v48 + 64) = v47;
  *(unsigned char *)(v48 + 2) = 1;
  if (BlueFin::GlUtils::m_pInstance)
  {
    if (*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
      return (*((uint64_t (**)(float **, void, void))a17 + 3))(&a17, 0, 0);
    }
  }
  return result;
}

uint64_t BlueFin::GlMeSrdEstPkFit::CheckForUsableCorrvec(float *a1, unsigned int a2, int a3, unsigned int a4, int a5, unsigned char *a6, int a7, uint64_t a8, char a9)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (a3) {
    uint64_t v9 = a4;
  }
  else {
    uint64_t v9 = a2;
  }
  uint64_t v10 = a1;
  if (a2 >= 7)
  {
    uint64_t v10 = a1;
    if (a8)
    {
      uint64_t v10 = a1;
      if (*(_DWORD *)a8 == 7)
      {
        if (v9 >= 9)
        {
          float v34 = "ucVecLenExcludingVeryEarlyDelay <= _DIM(afCorrVecReordered)";
          DeviceFaultNotify("glmesrd_pkfit.cpp", 68, "CheckForUsableCorrvec", (char)"ucVecLenExcludingVeryEarlyDelay <= _DIM(afCorrVecReordered)");
          int v35 = 68;
          goto LABEL_67;
        }
        int v11 = (char *)&unk_263BAEE28;
        if (a9) {
          int v11 = (char *)&unk_263BAEE20;
        }
        if (!v9)
        {
          unsigned __int8 v13 = 0;
          uint64_t v10 = (float *)v36;
          goto LABEL_23;
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          uint64_t v10 = (float *)v36;
          v36[i] = LODWORD(a1[v11[i]]);
        }
      }
    }
  }
  if (v9 < 2)
  {
    unsigned __int8 v13 = 0;
  }
  else
  {
    unsigned __int8 v13 = 0;
    float v14 = *v10;
    unsigned __int8 v15 = *v10 == 0.0;
    for (uint64_t j = 1; j != v9; ++j)
    {
      float v17 = v10[j];
      if (v17 == 0.0) {
        ++v15;
      }
      if (v17 > v14)
      {
        float v14 = v10[j];
        unsigned __int8 v13 = j;
      }
    }
    if (v15 > 2u) {
      return 7;
    }
  }
LABEL_23:
  *a6 = 0;
  if (!v13 || v13 + 1 >= v9)
  {
    if (v13) {
      char v31 = 127;
    }
    else {
      char v31 = -127;
    }
    if ((a7 & 1) == 0) {
      return 2;
    }
    goto LABEL_62;
  }
  if (!a8) {
    goto LABEL_49;
  }
  if (!a7) {
    goto LABEL_49;
  }
  uint64_t v19 = *(unsigned __int8 *)(a8 + 5);
  int v20 = v19 - 2;
  if (v19 < 2) {
    goto LABEL_49;
  }
  BOOL v21 = a1[*(unsigned __int8 *)(a8 + 5)] > a1[v20];
  *a6 = v21;
  uint64_t v22 = v19 + 2;
  if (a1[v19 + 2] <= a1[v19]) {
    char v23 = v21;
  }
  else {
    char v23 = v21 + 1;
  }
  *a6 = v23;
  if (a1[v22] > a1[v19 + 1]) {
    ++v23;
  }
  *a6 = v23;
  char v24 = v23 - (a1[v19] < a1[v20]);
  *a6 = v24;
  char v25 = v24 - (a1[v22] < a1[v19]);
  *a6 = v25;
  uint64_t v26 = (v19 - 1);
  *a6 = v25 - (a1[v20] > a1[v26]);
  float v27 = a1[v19];
  float v28 = a1[v20];
  if (v27 > v28)
  {
    float v29 = a1[v22];
    if (v29 > v27 && v29 > a1[v19 + 1]) {
      return 2;
    }
  }
  if (v28 <= v27 || v27 <= a1[v22])
  {
LABEL_49:
    if (!a5) {
      return 1;
    }
    goto LABEL_50;
  }
  float v30 = a1[v26];
  if (v28 <= v30) {
    uint64_t result = 1;
  }
  else {
    uint64_t result = 2;
  }
  if (v28 <= v30 && (a5 & 1) != 0)
  {
LABEL_50:
    if (v9 > 5)
    {
      if (v13 == 5)
      {
        if (!a7) {
          return 2;
        }
      }
      else
      {
        float v32 = v10[6];
        float v33 = v10[3];
        if (v32 < v33) {
          uint64_t result = 1;
        }
        else {
          uint64_t result = 2;
        }
        if (v32 < v33 || (a7 & 1) == 0) {
          return result;
        }
      }
      char v31 = 64;
LABEL_62:
      *a6 = v31;
      return 2;
    }
    float v34 = "ucVecLenExcludingVeryEarlyDelay >= GlMeSrdTrkCvecTapConfig::ucBocPrnPromptIdx";
    DeviceFaultNotify("glmesrd_pkfit.cpp", 162, "CheckForUsableCorrvec", (char)"ucVecLenExcludingVeryEarlyDelay >= GlMeSrdTrkCvecTapConfig::ucBocPrnPromptIdx");
    int v35 = 162;
LABEL_67:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_pkfit.cpp", v35, v34);
  }
  return result;
}

float *BlueFin::GlMeSrdEstPkFit::LeastSquaresPeakFit(BlueFin::GlMeSrdEstPkFit *this, const float *a2, const float *a3, unsigned int a4, int a5, unsigned int a6, unsigned int a7, char a8, double a9, const BlueFin::GlSignalId *a10, float *a11, float *a12, float *a13, float *a14, float *a15, float *a16)
{
  uint64_t v126 = *MEMORY[0x263EF8340];
  if (a3 <= 3)
  {
    long long v120 = "usVecLen >= 4";
    DeviceFaultNotify("glmesrd_pkfit.cpp", 608, "LeastSquaresPeakFit", (char)"usVecLen >= 4");
    int v121 = 608;
    goto LABEL_162;
  }
  if (a3 >= 9)
  {
    long long v120 = "usVecLen <= MAX_CVEC_LEN";
    DeviceFaultNotify("glmesrd_pkfit.cpp", 609, "LeastSquaresPeakFit", (char)"usVecLen <= MAX_CVEC_LEN");
    int v121 = 609;
    goto LABEL_162;
  }
  if (!a4)
  {
    long long v120 = "ucDelaysPerChip > 0";
    DeviceFaultNotify("glmesrd_pkfit.cpp", 610, "LeastSquaresPeakFit", (char)"ucDelaysPerChip > 0");
    int v121 = 610;
    goto LABEL_162;
  }
  if (a7 >= 8)
  {
    long long v120 = "ucPromptIdxInDelays < MAX_CVEC_LEN";
    DeviceFaultNotify("glmesrd_pkfit.cpp", 611, "LeastSquaresPeakFit", (char)"ucPromptIdxInDelays < MAX_CVEC_LEN");
    int v121 = 611;
    goto LABEL_162;
  }
  if (a5) {
    uint64_t v17 = a6;
  }
  else {
    uint64_t v17 = a3;
  }
  BOOL v20 = (a8 + 117) < 0x24u && a10 == 0 || a10 == 3;
  if (v17 <= 0x11) {
    size_t v24 = 72 - 4 * v17;
  }
  else {
    size_t v24 = 0;
  }
  bzero((char *)__dst + 4 * v17, v24);
  memcpy(__dst, this, 4 * v17);
  memcpy(v123, a2, 4 * v17);
  LOWORD(v124) = v17;
  BYTE2(v124) = a4;
  BYTE3(v124) = a7;
  BYTE4(v124) = v20;
  BYTE5(v124) = BYTE5(a10);
  BYTE6(v124) = a10 == 2;
  HIBYTE(v124) = BYTE4(a10);
  uint64_t result = (float *)memcmp(&xmmword_26B4345E0, __dst, 0x48uLL);
  if (!result)
  {
    *(_DWORD *)a11 = _MergedGlobals_1;
    *(_DWORD *)a12 = dword_26B4345D4;
    *(_DWORD *)a13 = dword_26B4345D8;
    *(_DWORD *)a15 = dword_26B4345DC;
    *a14 = *a12 / (float)a4;
    return result;
  }
  float v26 = 0.0;
  float v27 = 0.0;
  uint64_t result = a11;
  if ((BYTE4(a10) & 1) == 0)
  {
    if (v17)
    {
      float v28 = (float *)__dst;
      uint64_t v29 = v17;
      do
      {
        float v30 = *v28++;
        float v27 = v27 + v30;
        --v29;
      }
      while (v29);
    }
    *a12 = 0.0;
    *a13 = 0.0;
    float v31 = (float)v17;
    float v32 = -0.5;
    float v33 = 1000000.0;
    float v34 = 1.0;
    while (1)
    {
      if (v20)
      {
        if (v17)
        {
          float v35 = 0.0;
          float v36 = 1.0;
          unsigned int v37 = -5;
          uint64_t v38 = (float *)v123;
          uint64_t v39 = v17;
          float v40 = 0.0;
          float v41 = 0.0;
          float v42 = 0.0;
          float v43 = 0.0;
          float v44 = 0.0;
          float v45 = 0.0;
          while (1)
          {
            float v46 = *(v38 - 8);
            float v47 = v32 + *v38;
            if (v47 < 0.0) {
              break;
            }
            if (v47 < 0.5)
            {
              if (v37 <= 0xFFFFFFFC && (BYTE5(a10) & 1) != 0)
              {
                float v49 = 0.0;
                float v50 = 1.0;
                float v51 = 0.5;
              }
              else
              {
                if (v47 >= 0.33333) {
                  float v51 = 0.5;
                }
                else {
                  float v51 = 0.33333;
                }
                if (v47 >= 0.33333) {
                  float v50 = 3.0;
                }
                else {
                  float v50 = -3.0;
                }
                if (v47 >= 0.33333) {
                  float v49 = -1.0;
                }
                else {
                  float v49 = 1.0;
                }
              }
              goto LABEL_60;
            }
            float v50 = -1.0;
            float v51 = 1.0;
            float v49 = 1.0;
            if (v47 < 1.0) {
              goto LABEL_60;
            }
LABEL_63:
            ++v37;
            ++v38;
            if (!--v39) {
              goto LABEL_100;
            }
          }
          if (v47 >= -1.0)
          {
            float v50 = 1.0;
            float v51 = -0.5;
            float v49 = 1.0;
            if (v47 >= -0.5)
            {
              if (v37 <= 0xFFFFFFFC && (BYTE5(a10) & 1) != 0)
              {
                float v50 = -1.0;
                float v51 = 0.0;
                float v49 = 0.0;
              }
              else
              {
                if (v47 >= -0.33333) {
                  float v51 = 0.0;
                }
                else {
                  float v51 = -0.33333;
                }
                if (v47 >= -0.33333) {
                  float v50 = 3.0;
                }
                else {
                  float v50 = -3.0;
                }
                if (v47 >= -0.33333) {
                  float v49 = 1.0;
                }
                else {
                  float v49 = -1.0;
                }
              }
            }
LABEL_60:
            float v52 = v49 + (float)(*v38 * v50);
            float v45 = v45 + (float)(v52 * v52);
            float v44 = v44 + v52;
            float v43 = v43 + (float)(v52 * v50);
            float v42 = v42 + v50;
            float v41 = v41 + (float)(v50 * v50);
            float v40 = v40 + (float)(v46 * v52);
            float v35 = v35 + (float)(v46 * v50);
            float v48 = v51 - v47;
          }
          else
          {
            float v48 = -1.0 - v47;
          }
          if (v36 >= v48) {
            float v36 = v48;
          }
          goto LABEL_63;
        }
LABEL_102:
        float v40 = 0.0;
        float v36 = 1.0;
        float v41 = 0.0;
        float v35 = 0.0;
        float v45 = 0.0;
        float v44 = 0.0;
        float v42 = 0.0;
        float v43 = 0.0;
        goto LABEL_103;
      }
      if (a10 == 2)
      {
        if (!v17) {
          goto LABEL_102;
        }
        float v36 = 1.0;
        float v35 = 0.0;
        float v53 = (float *)v123;
        uint64_t v54 = v17;
        float v40 = 0.0;
        float v41 = 0.0;
        float v42 = 0.0;
        float v43 = 0.0;
        float v44 = 0.0;
        float v45 = 0.0;
        while (2)
        {
          float v55 = *(v53 - 8);
          float v56 = v32 + *v53;
          if (v56 >= 0.0)
          {
            float v58 = 0.25;
            if (v56 >= 0.25)
            {
              float v60 = -1.0;
              float v58 = 1.0;
              float v59 = 1.0;
              if (v56 >= 1.0) {
                goto LABEL_86;
              }
            }
            else
            {
              float v59 = 0.875;
              float v60 = -0.5;
            }
          }
          else
          {
            if (v56 < -1.0)
            {
              float v57 = -1.0 - v56;
LABEL_84:
              if (v36 >= v57) {
                float v36 = v57;
              }
LABEL_86:
              ++v53;
              if (!--v54) {
                goto LABEL_100;
              }
              continue;
            }
            if (v56 >= -0.25) {
              float v58 = 0.0;
            }
            else {
              float v58 = -0.25;
            }
            if (v56 >= -0.25) {
              float v60 = 0.5;
            }
            else {
              float v60 = 1.0;
            }
            if (v56 >= -0.25) {
              float v59 = 0.875;
            }
            else {
              float v59 = 1.0;
            }
          }
          break;
        }
        float v61 = v59 + (float)(*v53 * v60);
        float v45 = v45 + (float)(v61 * v61);
        float v44 = v44 + v61;
        float v43 = v43 + (float)(v61 * v60);
        float v42 = v42 + v60;
        float v41 = v41 + (float)(v60 * v60);
        float v40 = v40 + (float)(v55 * v61);
        float v35 = v35 + (float)(v55 * v60);
        float v57 = v58 - v56;
        goto LABEL_84;
      }
      if (!v17) {
        goto LABEL_102;
      }
      float v35 = 0.0;
      float v36 = 1.0;
      float v62 = (float *)v123;
      uint64_t v63 = v17;
      float v40 = 0.0;
      float v41 = 0.0;
      float v42 = 0.0;
      float v43 = 0.0;
      float v44 = 0.0;
      float v45 = 0.0;
      do
      {
        float v64 = *(v62 - 8);
        float v65 = v32 + *v62;
        if (v65 >= 0.0)
        {
          float v67 = -1.0;
          float v68 = 1.0;
          if (v65 >= 1.0) {
            goto LABEL_99;
          }
        }
        else
        {
          if (v65 < -1.0)
          {
            float v66 = -1.0 - v65;
            goto LABEL_97;
          }
          float v67 = 1.0;
          float v68 = 0.0;
        }
        float v69 = (float)(*v62 * v67) + 1.0;
        float v45 = v45 + (float)(v69 * v69);
        float v44 = v44 + v69;
        float v43 = v43 + (float)(v69 * v67);
        float v42 = v42 + v67;
        float v41 = v41 + (float)(v67 * v67);
        float v40 = v40 + (float)(v64 * v69);
        float v35 = v35 + (float)(v64 * v67);
        float v66 = v68 - v65;
LABEL_97:
        if (v36 >= v66) {
          float v36 = v66;
        }
LABEL_99:
        ++v62;
        --v63;
      }
      while (v63);
LABEL_100:
      if (v36 < 0.0025)
      {
        float v70 = v32 + 0.0025;
        goto LABEL_120;
      }
LABEL_103:
      float v70 = fminf(v32 + v36, 0.5);
      float v71 = (float)(v31 * v41) - (float)(v42 * v42);
      float v72 = (float)(v43 * v42) - (float)(v44 * v41);
      float v73 = (float)(v44 * v42) - (float)(v43 * v31);
      float v74 = (float)((float)(v44 * v72) + (float)(v45 * v71)) + (float)(v43 * v73);
      if (fabsf(v74) >= 0.000001)
      {
        float v75 = (float)((float)((float)(v27 * v72) + (float)(v71 * v40)) + (float)(v73 * v35)) / v74;
        if (v75 > 0.0)
        {
          float v76 = (float)((float)((float)((float)(v27 * (float)((float)(v44 * v43) - (float)(v45 * v42)))
                                      + (float)(v73 * v40))
                              + (float)((float)((float)(v44 * (float)-v44) + (float)(v45 * v31)) * v35))
                      / v74)
              / v75;
          if (v32 < v76) {
            float v32 = v76;
          }
          if (v32 >= v70) {
            float v77 = v70;
          }
          else {
            float v77 = v32;
          }
          float v78 = v77 / 0.0025;
          if (v78 > 0.0)
          {
            double v79 = v78 + 0.5;
            goto LABEL_115;
          }
          if (v78 < 0.0)
          {
            double v79 = v78 + -0.5;
LABEL_115:
            int v80 = (int)v79;
          }
          else
          {
            int v80 = 0;
          }
          float v81 = (float)v80 * 0.0025;
          if (v81 != v34)
          {
            float v82 = v45 + (float)(v81 * (float)((float)(v43 + v43) + (float)(v81 * v41)));
            float v83 = v44 + (float)(v81 * v42);
            float v84 = (float)(v82 * v31) - (float)(v83 * v83);
            if (fabsf(v84) >= 0.000001)
            {
              float v85 = -(float)(v44 + (float)(v81 * v42));
              float v86 = v40 + (float)(v81 * v35);
              float v87 = (float)((float)(v27 * v85) + (float)(v31 * v86)) / v84;
              float v88 = (float)((float)(v27 * v82) + (float)(v85 * v86)) / v84;
              float v89 = (float)(v88 * (float)((float)(v27 * -2.0) + (float)(v31 * v88)))
                  + (float)(v87
                          * (float)((float)((float)-(float)(v86 - (float)(v88 * v83)) - (float)(v86 - (float)(v88 * v83)))
                                  + (float)(v87 * v82)));
              if (v89 < v33)
              {
                *a12 = v87;
                *a13 = v88;
                float v33 = v89;
                float v34 = (float)v80 * 0.0025;
              }
            }
          }
        }
      }
LABEL_120:
      float v32 = v70;
      if (v70 >= 0.5)
      {
        float v27 = 0.0;
        if (v34 < 1.0) {
          float v27 = -v34;
        }
        break;
      }
    }
  }
  *a11 = v27;
  float v90 = 1.0e-10;
  if (!v17)
  {
    float v100 = NAN;
    float v105 = NAN;
    float v102 = 1.0e-10;
    goto LABEL_144;
  }
  uint64_t v91 = 0;
  float v92 = 0.0;
  do
  {
    float v93 = vabds_f32(*((float *)v123 + v91), v27);
    if (v93 >= 0.5)
    {
      float v94 = 0.0;
      if (v93 >= 1.0) {
        goto LABEL_136;
      }
LABEL_131:
      float v94 = 1.0 - v93;
      goto LABEL_136;
    }
    if (v20)
    {
      if (unsigned __int16)v91 - 5 <= 0xFFFFFFFC && (BYTE5(a10)) {
        float v94 = v93;
      }
      else {
        float v94 = fabsf((float)(v93 * -3.0) + 1.0);
      }
    }
    else
    {
      if (a10 != 2 || v93 >= 0.25) {
        goto LABEL_131;
      }
      float v94 = (float)(v93 * -0.5) + 0.875;
    }
LABEL_136:
    v125[v91] = v94;
    float v92 = v92 + v94;
    ++v91;
  }
  while (v17 != v91);
  float v95 = (float)v17;
  float v96 = 0.0;
  float v97 = (float *)this;
  uint64_t v98 = v17;
  do
  {
    float v99 = *v97++;
    float v96 = v96 + v99;
    --v98;
  }
  while (v98);
  float v100 = v92 / v95;
  float v26 = 0.0;
  float v101 = v125;
  float v102 = 1.0e-10;
  float v103 = (float *)this;
  uint64_t v104 = v17;
  float v105 = v96 / v95;
  do
  {
    float v106 = *v101++;
    float v107 = v106 - v100;
    float v102 = v102 + (float)(v107 * v107);
    float v108 = *v103++;
    float v26 = v26 + (float)(v107 * (float)(v108 - v105));
    --v104;
  }
  while (v104);
LABEL_144:
  float v109 = v26 / v102;
  BOOL v110 = v26 <= 0.0;
  float v111 = 0.0;
  if (v110) {
    float v109 = 0.0;
  }
  *a12 = v109;
  *a13 = v105 - (float)(v109 * v100);
  *a14 = *a12 / (float)a4;
  if (v17)
  {
    uint64_t v112 = a7;
    unsigned int v113 = v125;
    float v90 = 1.0e-10;
    do
    {
      if (v112) {
        float v114 = 1.0;
      }
      else {
        float v114 = 3.0;
      }
      float v115 = *v113++;
      float v116 = v115 - v100;
      float v117 = *a12 * (float)(v115 - v100);
      float v118 = *(float *)this;
      this = (BlueFin::GlMeSrdEstPkFit *)((char *)this + 4);
      float v111 = v111
           + (float)((float)((float)((float)(v118 - v105) + (float)((float)-*a12 * v116))
                           * (float)((float)(v118 - v105) + (float)((float)-*a12 * v116)))
                   * v114);
      float v90 = v90 + (float)((float)(v117 * v117) * v114);
      --v112;
      --v17;
    }
    while (v17);
    if (v90 == 0.0)
    {
      long long v120 = "fXX != 0";
      DeviceFaultNotify("glmesrd_pkfit.cpp", 716, "LeastSquaresPeakFit", (char)"fXX != 0");
      int v121 = 716;
LABEL_162:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_pkfit.cpp", v121, v120);
    }
  }
  float v119 = v111 / v90;
  if (v119 > 1.0) {
    float v119 = 1.0;
  }
  *a15 = v119;
  _MergedGlobals_1 = *(_DWORD *)a11;
  dword_26B4345D4 = *(_DWORD *)a12;
  dword_26B4345D8 = *(_DWORD *)a13;
  dword_26B4345DC = LODWORD(v119);
  xmmword_26B434600 = v123[0];
  unk_26B434610 = v123[1];
  qword_26B434620 = v124;
  xmmword_26B4345E0 = __dst[0];
  unk_26B4345F0 = __dst[1];
  return result;
}

unsigned char *BlueFin::GlMeTrkCvecTapConfig::GetTrackCvecDelayOffsetArray(unsigned char *this, float *a2, unsigned int a3)
{
  if (this[4] != a3)
  {
    unsigned int v7 = "usExpectedVecLen == ucCvecLen";
    DeviceFaultNotify("glmesrd_receiver_parameters_track.cpp", 233, "GetTrackCvecDelayOffsetArray", (char)"usExpectedVecLen == ucCvecLen");
    int v8 = 233;
    goto LABEL_9;
  }
  if (!this[8])
  {
    unsigned int v7 = "ucNumSamplesPerChip > 0";
    DeviceFaultNotify("glmesrd_receiver_parameters_track.cpp", 234, "GetTrackCvecDelayOffsetArray", (char)"ucNumSamplesPerChip > 0");
    int v8 = 234;
LABEL_9:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_receiver_parameters_track.cpp", v8, v7);
  }
  if (a3)
  {
    float v3 = (float)this[8];
    uint64_t v4 = a3;
    unsigned __int8 v5 = this + 11;
    do
    {
      int v6 = *v5++;
      *a2++ = (float)v6 / v3;
      --v4;
    }
    while (v4);
  }
  return this;
}

float BlueFin::GlMeSrdSatReportTrkCorrVec::CopyFrom(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)a1 = v2;
  *(_WORD *)(a1 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *(_WORD *)(a2 + 1);
  uint64_t v3 = *(void *)(a2 + 4);
  *(void *)(a1 + 4) = v3;
  *(_WORD *)(a1 + 12) = *((_WORD *)a2 + 6);
  if (v2)
  {
    uint64_t v4 = (_DWORD *)(a1 + 16);
    unsigned __int8 v5 = (int *)(a2 + 16);
    do
    {
      int v6 = *v5++;
      LODWORD(v3) = v6;
      *v4++ = v6;
      --v2;
    }
    while (v2);
  }
  return *(float *)&v3;
}

uint64_t BlueFin::GlMeSrdCorrVecAccumulator::GetCvecPromptIdx(BlueFin::GlMeSrdCorrVecAccumulator *this)
{
  return *((unsigned __int8 *)this + 17);
}

uint64_t BlueFin::GlPeFirstFix::ValidateExtLocWithLs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 56)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 80);
  long long v17 = *(_OWORD *)(a1 + 64);
  uint64_t v18 = v6;
  BlueFin::lla2ned((double *)a2, (double *)&v17, 0, &v19);
  double v7 = sqrt(v20 * v20 + v19 * v19);
  float v8 = *(float *)(a2 + 128);
  double v9 = v8;
  double v10 = 400.0;
  if (v8 >= 400.0) {
    double v10 = v8;
  }
  if (v7 <= v10)
  {
    double v13 = 75.0;
    if (*(unsigned char *)(a1 + 244)) {
      double v13 = 50.0;
    }
    BOOL v14 = v7 <= 50.0;
    if (v13 <= v9) {
      BOOL v14 = 1;
    }
    double v15 = *(double *)(a3 + 32);
    double v16 = v7
        / sqrt(fmax((v15 * v15 + *(double *)(a3 + 40) * *(double *)(a3 + 40)) * 0.5 + (float)(v8 * v8), 2.22044605e-16));
    if (v15 > v9) {
      double v9 = *(double *)(a3 + 32);
    }
    if (v9 < 200.0) {
      double v9 = 200.0;
    }
    if (v10 >= v9) {
      double v10 = v9;
    }
    if (v16 < 1.5) {
      BOOL v14 = 1;
    }
    if (v7 < v10 && v14) {
      return 1;
    }
    int v11 = (unsigned char *)(a3 + 72);
  }
  else
  {
    *(unsigned char *)(a3 + 72) = 2;
    int v11 = (unsigned char *)(*(void *)(a1 + 40) + 48);
  }
  uint64_t result = 0;
  unsigned char *v11 = 0;
  return result;
}

uint64_t BlueFin::GlPeKfPool::ResetFlagExtAlongTrkSpeedAndPdrUsedInKF(BlueFin::GlPeKfPool *this)
{
  uint64_t v1 = 0;
  uint64_t v2 = (char *)this + 58096;
  do
  {
    uint64_t v3 = *(void *)&v2[v1];
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 384))(v3);
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 144))(v3);
    }
    v1 += 8;
  }
  while (v1 != 24);
  return result;
}

BOOL BlueFin::GlPeKF::IsDrEnabled(BlueFin::GlPeKF *this)
{
  BlueFin::GlPeKF::SensorMask((uint64_t)this, (uint64_t)&v6);
  if (!*v6)
  {
    if (v7 < 2uLL) {
      return 0;
    }
    if (!v6[1])
    {
      uint64_t v4 = 2;
      while (v7 != v4)
      {
        if (v6[v4++])
        {
          if (v4 - 1 < (unint64_t)v7) {
            goto LABEL_2;
          }
          return 0;
        }
      }
      return 0;
    }
  }
LABEL_2:
  int v2 = *((_DWORD *)this + 579);
  return v2 && (v2 == 1 || (*(unsigned char *)(*(void *)(*((void *)this + 11543) + 160) + 2) & 1) != 0);
}

uint64_t BlueFin::GlPosEng::SetExtSensInfo(uint64_t a1, __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8, double a9, double a10)
{
  int v12 = *a2;
  if (v12 >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    double v15 = (void (*)(uint64_t, uint64_t))off_270EC3330;
    uint64_t v16 = BlueFin::GlUtils::m_pInstance;
    do
    {
      uint64_t v17 = *((void *)a2 + 1) + v13;
      v19[0] = &unk_270EC3318;
      v19[1] = v17;
      if (v16 && *(unsigned char *)(v16 + 1122))
      {
        v15((uint64_t)v19, 0);
        uint64_t v16 = BlueFin::GlUtils::m_pInstance;
        LOWORD(v12) = *a2;
      }
      ++v14;
      v13 += 3560;
    }
    while (v14 < (__int16)v12);
  }
  return BlueFin::GlPosEng::InjectExtSensInfo(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t BlueFin::GlPosEng::InjectExtSensInfo(uint64_t a1, __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8, double a9, double a10)
{
  if (*a2 >= 1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = a1 + 394656;
    uint64_t v14 = a1 + 184416;
    do
    {
      uint64_t v15 = *((void *)a2 + 1);
      BlueFin::GlPeHula::SetLmsFromSensorInput(v13, v15 + v11, a9, a10, a3, a4, a5, a6, a7, a8);
      BlueFin::GlExtSensDataIf::OutputDebugMsg((BlueFin::GlExtSensDataIf *)(v15 + v11));
      int v16 = *(_DWORD *)(v15 + v11);
      BlueFin::GlPeKF::SensorMask(v14, (uint64_t)v18);
      if (((unint64_t)*(unsigned int *)(v18[0] + 4 * (v16 >> 5)) >> (v16 & 0x1F)))
      {
        BlueFin::GlPeHula::Update(v13, v15 + v11, a9, a10);
        BlueFin::GlPeKF::SetExtSensInfo(v14, v15 + v11);
      }
      ++v12;
      v11 += 3560;
    }
    while (v12 < *a2);
  }
  return 1;
}

uint64_t BlueFin::GlPeKF::SensorMask@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = this + 92416;
  if (*(void *)(this + 92440))
  {
    uint64_t v4 = this;
    unsigned __int8 v5 = (int **)(this + 1640);
    uint64_t v6 = (_OWORD *)(a2 + 12);
    this = (uint64_t)BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)a2, (unsigned int *)(a2 + 12), 5u, (const void **)(this + 1640));
    unsigned int v7 = *(_DWORD *)(v4 + 2280);
    if (v7 || *(_DWORD *)(v4 + 2284))
    {
      unsigned int v8 = **(_DWORD **)v3;
      if (v7 <= v8 && v8 <= *(_DWORD *)(v4 + 2284))
      {
        if (!*(unsigned char *)(v4 + 3337))
        {
          *(unsigned char *)(v4 + 3337) = 1;
          BlueFin::GlPeHula::GetSensorValidityMask(*(void *)(v3 + 24), (uint64_t)&v13);
          double v9 = (const void **)(v4 + 3344);
          if ((long long **)(v4 + 3344) != &v13)
          {
            BlueFin::GlSetBase::operator=(v4 + 3344, (uint64_t)&v13);
            *(_OWORD *)(v4 + 3356) = v15;
            *(_DWORD *)(v4 + 3372) = v16;
          }
          double v10 = *(BlueFin::GlPeHula **)(v3 + 24);
          BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v11, v12, 5u, v9);
          uint64_t v13 = &v15;
          char v14 = 5;
          long long v15 = 0uLL;
          int v16 = 0;
          BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v11, (int **)&v13, v5);
          return BlueFin::GlPeHula::SetSensorValidityMask(v10, &v11);
        }
      }
      else
      {
        if (*(unsigned char *)(v4 + 3337))
        {
          *(unsigned char *)(v4 + 3337) = 0;
          this = BlueFin::GlPeHula::SetSensorValidityMask(*(BlueFin::GlPeHula **)(v3 + 24), (int **)(v4 + 3344));
        }
        BlueFin::GlPeExtSensorSet::getAllSensorSet((BlueFin::GlPeExtSensorSet *)this);
        this = BlueFin::GlSetBase::operator=(a2, (uint64_t)&BlueFin::GlPeExtSensorSet::getAllSensorSet(void)const::s_otAllSensorSet);
        *uint64_t v6 = xmmword_26B434594;
        *(_DWORD *)(a2 + 28) = dword_26B4345A4;
      }
    }
  }
  else
  {
    *(void *)(a2 + 12) = 0;
    *(void *)a2 = a2 + 12;
    *(unsigned char *)(a2 + 8) = 5;
    *(void *)(a2 + 20) = 0;
    *(_DWORD *)(a2 + 28) = 0;
  }
  return this;
}

uint64_t BlueFin::GlExtSensDataIf::OutputDebugMsg(BlueFin::GlExtSensDataIf *this)
{
  GlCustomLog(14, "Sens%d %d", *(_DWORD *)this, *((_DWORD *)this + 1));
  switch(*((_DWORD *)this + 1))
  {
    case 0:
      GlCustomLog(14, "(%u)");
      break;
    case 1:
      GlCustomLog(14, "(%04hu/%02hu/%02hu %02hu:%02hu%02hu.%03hu%03hu)", *((unsigned __int16 *)this + 4));
      break;
    case 3:
    case 5:
    case 6:
      GlCustomLog(14, "(%u%08u)");
      break;
    case 4:
      GlCustomLog(14, "(%04hu:%09u.%03hu.%03hu :%06u)");
      break;
    default:
      break;
  }
  GlCustomLog(14, " [%d]", *((__int16 *)this + 16));
  int v2 = *(_DWORD *)this;
  unsigned int v3 = *(_DWORD *)this;
  if (v3 <= 0x63)
  {
    switch(*(_DWORD *)this)
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
        int v4 = *((__int16 *)this + 16);
        if (v4 >= 1)
        {
          uint64_t v5 = 0;
          uint64_t v6 = (float *)((char *)this + 48);
          do
          {
            int v7 = *((__int16 *)v6 - 4);
            float v8 = *v6;
            v6 += 22;
            GlCustomLog(14, ",%d,%.3f", v7, v8);
            ++v5;
          }
          while (v5 < *((__int16 *)this + 16));
          LOWORD(v4) = *((_WORD *)this + 16);
          int v2 = *(_DWORD *)this;
        }
        BOOL v10 = ((v2 << 16) - 131073) >= 0x3FFFF;
        unsigned int v9 = (v2 << 16) - 1638401;
        BOOL v10 = v10 && v9 >= 0x3FFFF;
        int v11 = !v10;
        if ((__int16)v4 >= 1 && v11 != 0) {
          GlCustomLog(14, ",%f", *((float *)this + 22 * (unsigned __int16)(v4 - 1) + 22));
        }
        goto LABEL_87;
      case 8u:
        if (*((__int16 *)this + 16) >= 1)
        {
          uint64_t v23 = 0;
          size_t v24 = (double *)((char *)this + 56);
          do
          {
            GlCustomLog(14, ",%d,%f,%f,%f,%f,%f,%f,%f,%f", *((__int16 *)v24 - 8), *(v24 - 1), *v24, v24[1], v24[2], v24[4], v24[5], v24[6], v24[7]);
            ++v23;
            v24 += 11;
          }
          while (v23 < *((__int16 *)this + 16));
        }
        goto LABEL_87;
      case 9u:
        if (*((__int16 *)this + 16) >= 1)
        {
          uint64_t v25 = 0;
          float v26 = (double *)((char *)this + 56);
          do
          {
            GlCustomLog(14, ",%d,%f,%f,%f,%f,%f,%f,%f", *((__int16 *)v26 - 8), *(v26 - 1), *v26, v26[1], v26[4], v26[5], v26[6], v26[7]);
            ++v25;
            v26 += 11;
          }
          while (v25 < *((__int16 *)this + 16));
        }
        goto LABEL_87;
      case 0xAu:
      case 0x21u:
        if (*((__int16 *)this + 16) >= 1)
        {
          uint64_t v21 = 0;
          uint64_t v22 = (double *)((char *)this + 64);
          do
          {
            GlCustomLog(14, ",%d,%f,%f,%f,%f,%f,%f,%f,%d", *((__int16 *)v22 - 12), *(v22 - 2), *(v22 - 1), *v22, v22[3], v22[4], v22[5], v22[6], *((_DWORD *)v22 + 14));
            ++v21;
            v22 += 11;
          }
          while (v21 < *((__int16 *)this + 16));
        }
        goto LABEL_87;
      case 0xBu:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
        if (*((__int16 *)this + 16) >= 1)
        {
          uint64_t v13 = 0;
          char v14 = (float *)((char *)this + 48);
          do
          {
            GlCustomLog(14, ",%d,%.2f,%.2f", *((__int16 *)v14 - 4), *v14, v14[10]);
            ++v13;
            v14 += 22;
          }
          while (v13 < *((__int16 *)this + 16));
        }
        goto LABEL_87;
      case 0x11u:
        if (*((__int16 *)this + 16) >= 1)
        {
          uint64_t v27 = 0;
          float v28 = (int *)((char *)this + 120);
          do
          {
            GlCustomLog(14, ",%d,%d", *((__int16 *)v28 - 40), *(v28 - 18));
            int v29 = *v28;
            v28 += 22;
            GlCustomLog(14, ",%d", v29);
            ++v27;
          }
          while (v27 < *((__int16 *)this + 16));
        }
        goto LABEL_87;
      case 0x12u:
        if (*((__int16 *)this + 16) >= 1)
        {
          uint64_t v30 = 0;
          float v31 = (int *)((char *)this + 48);
          do
          {
            int v32 = *((__int16 *)v31 - 4);
            int v33 = *v31;
            v31 += 22;
            GlCustomLog(14, ",%d,%d", v32, v33);
            ++v30;
          }
          while (v30 < *((__int16 *)this + 16));
        }
        goto LABEL_87;
      case 0x13u:
        if (*((__int16 *)this + 16) >= 1)
        {
          uint64_t v34 = 0;
          float v35 = (int *)((char *)this + 48);
          do
          {
            int v36 = *((__int16 *)v35 - 4);
            int v37 = *v35;
            v35 += 22;
            GlCustomLog(14, ",%d,%d", v36, v37);
            ++v34;
          }
          while (v34 < *((__int16 *)this + 16));
        }
        goto LABEL_87;
      case 0x14u:
      case 0x18u:
        goto LABEL_87;
      case 0x15u:
        if (*((__int16 *)this + 16) >= 1)
        {
          uint64_t v38 = 0;
          uint64_t v39 = (float *)((char *)this + 48);
          do
          {
            int v40 = *((__int16 *)v39 - 4);
            double v41 = v39[10];
            int v42 = *(_DWORD *)v39;
            int v43 = *((_DWORD *)v39 + 1);
            v39 += 22;
            GlCustomLog(14, ",%d,%d,%d,%.2f", v40, v42, v43, v41);
            ++v38;
          }
          while (v38 < *((__int16 *)this + 16));
        }
        goto LABEL_87;
      case 0x16u:
        if (*((__int16 *)this + 16) >= 1)
        {
          uint64_t v44 = 0;
          float v45 = (float *)((char *)this + 48);
          do
          {
            int v46 = *((__int16 *)v45 - 4);
            double v47 = v45[1];
            double v48 = v45[10];
            int v49 = *(_DWORD *)v45;
            v45 += 22;
            GlCustomLog(14, ",%d,%d,%.2f,%.2f", v46, v49, v47, v48);
            ++v44;
          }
          while (v44 < *((__int16 *)this + 16));
        }
        goto LABEL_87;
      case 0x17u:
        if (*((__int16 *)this + 16) >= 1)
        {
          uint64_t v50 = 0;
          float v51 = (double *)((char *)this + 48);
          do
          {
            GlCustomLog(14, ",%d,%f,%f,%.2f,%.2f,%.3f,%.1f,%.2f", *((__int16 *)v51 - 4), *v51, v51[1], *((float *)v51 + 4), *((float *)v51 + 5), *((float *)v51 + 6), *((float *)v51 + 7), *((float *)v51 + 10));
            ++v50;
            v51 += 11;
          }
          while (v50 < *((__int16 *)this + 16));
        }
        goto LABEL_87;
      case 0x1Du:
        if (*((__int16 *)this + 16) < 1) {
          goto LABEL_87;
        }
        uint64_t v52 = 0;
        float v53 = (char *)this + 76;
        break;
      default:
        goto LABEL_92;
    }
    while (1)
    {
      GlCustomLog(14, ",%d,%d,%lld", *((__int16 *)v53 - 18), *(v53 - 20), *(void *)(v53 - 28));
      int v54 = *((_DWORD *)v53 - 5);
      if (v54 == 2)
      {
        GlCustomLog(14, ",%d,%d,%d,%.9f");
      }
      else if (v54 == 1)
      {
        GlCustomLog(14, ",%d,%d,%.9f");
      }
      else
      {
        if (v54)
        {
          float v60 = "false";
          DeviceFaultNotify("glpe_hula.cpp", 1196, "OutputDebugMsg", (char)"false");
          int v61 = 1196;
          goto LABEL_91;
        }
        GlCustomLog(14, ",%d,%d,%d,%d,%d,%d,%.6f");
      }
      v53 += 88;
      if (++v52 >= *((__int16 *)this + 16)) {
        goto LABEL_87;
      }
    }
  }
  switch(v3)
  {
    case 'd':
      if (*((__int16 *)this + 16) >= 1)
      {
        uint64_t v55 = 0;
        float v56 = (_DWORD *)((char *)this + 48);
        do
        {
          GlCustomLog(14, ",%d,%d,%d", *((__int16 *)v56 - 4), *v56, v56[10]);
          ++v55;
          v56 += 22;
        }
        while (v55 < *((__int16 *)this + 16));
      }
      break;
    case 'e':
      if (*((__int16 *)this + 16) >= 1)
      {
        uint64_t v57 = 0;
        float v58 = (unsigned __int8 *)this + 48;
        do
        {
          GlCustomLog(14, ",%d,%d,%d,%d", *((__int16 *)v58 - 4), *v58, v58[1], v58[40]);
          ++v57;
          v58 += 88;
        }
        while (v57 < *((__int16 *)this + 16));
      }
      break;
    case 'f':
      if (*((__int16 *)this + 16) >= 1)
      {
        uint64_t v15 = 0;
        int v16 = (double *)((char *)this + 64);
        do
        {
          int v17 = *((__int16 *)v16 - 12);
          double v18 = *(v16 - 2);
          double v19 = *(v16 - 1);
          int v20 = *(unsigned __int8 *)v16;
          v16 += 11;
          GlCustomLog(14, ",%d,%.1lf,%.1lf,%d", v17, v18, v19, v20);
          ++v15;
        }
        while (v15 < *((__int16 *)this + 16));
      }
      break;
    default:
LABEL_92:
      float v60 = "0";
      DeviceFaultNotify("glpe_hula.cpp", 1202, "OutputDebugMsg", (char)"0");
      int v61 = 1202;
LABEL_91:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_hula.cpp", v61, v60);
  }
LABEL_87:

  return GlCustomLog(14, "\n");
}

double BlueFin::GlPeHula::Update(uint64_t a1, uint64_t a2, double result, double a4)
{
  if (*(__int16 *)(a2 + 32) < 1) {
    return result;
  }
  unsigned int v6 = *(unsigned __int16 *)(a2 + 32);
  unsigned int v7 = *(_DWORD *)a2;
  int v8 = *(_DWORD *)a2;
  if (v8 < 0x22 || (v8 - 100) <= 2)
  {
    if (v8 == 19)
    {
LABEL_7:
      uint64_t result = (double)*(__int16 *)(a2 + 40 + 88 * (v6 - 1)) / 1000.0;
      *(double *)(a1 + 4256) = result;
      *(_DWORD *)(a1 + 4264) = *(_DWORD *)(a2 + 40 + 88 * v6 - 80);
      return result;
    }
    *(unsigned char *)(a1 + 1076) = 1;
  }
  if (v8 <= 99)
  {
    switch(v8)
    {
      case 0:
      case 1:
      case 2:
        if (v7 <= 2)
        {
          unsigned int v14 = *(_DWORD *)(*(void *)(a1 + 1008) + 576);
          *(unsigned char *)(a1 + 188) = 1;
          return BlueFin::GlPeSensStats::ProcessSensData(a1, v14, a2, (float64x2_t *)(a1 + 96 * v7 + 200));
        }
        return result;
      case 3:
      case 4:
      case 5:
      case 26:
      case 27:
      case 28:
        if (*(unsigned char *)(a1 + 1025))
        {
          unsigned int v10 = -1;
        }
        else
        {
          unsigned int v10 = -1;
          if (v7 <= 0x1C)
          {
            if (((1 << v7) & 0x4000008) != 0)
            {
              unsigned int v10 = 0;
            }
            else if (((1 << v7) & 0x8000010) != 0)
            {
              unsigned int v10 = 1;
            }
            else if (((1 << v7) & 0x10000020) != 0)
            {
              unsigned int v10 = 2;
            }
          }
        }
        unsigned int v11 = *(_DWORD *)(*(void *)(a1 + 1008) + 576);
        return BlueFin::GlPeSensStats::updateGyr(a1, v11, v10, a2, result);
      case 6:
      case 33:
        return result;
      case 7:
        uint64_t v15 = (double *)(a1 + 1088);
        return BlueFin::GlPeHula::TempData::Update(v15, (__int16)v6, (float *)(a2 + 40));
      case 9:
        uint64_t v16 = a1 + 4088;
        int v17 = *(BlueFin::GlPeTimeManager **)(a1 + 1080);
        BlueFin::GlPeHula::DeltaPos::Update(v16, a2, v17);
        return result;
      case 10:
        uint64_t v28 = a1 + 3000;
        BlueFin::GlPeHula::PosLocationData::Update(v28, a2);
        return result;
      case 11:
        uint64_t v18 = a1 + 1112;
        double v19 = *(BlueFin::GlPeTimeManager **)(a1 + 1080);
        BlueFin::GlPeHula::AltData::Update(v18, a2, v19, result, a4);
        return result;
      case 13:
        uint64_t v20 = a1 + 1184;
        uint64_t v21 = *(BlueFin::GlPeTimeManager **)(a1 + 1080);
        goto LABEL_43;
      case 14:
        uint64_t v20 = a1 + 1240;
        uint64_t v21 = *(BlueFin::GlPeTimeManager **)(a1 + 1080);
LABEL_43:
        BlueFin::GlPeHula::CrossTrkSpeedData::Update(v20, a2, v21, result, a4);
        return result;
      case 15:
        uint64_t v29 = a1 + 1296;
        uint64_t v30 = *(BlueFin::GlPeTimeManager **)(a1 + 1080);
        BlueFin::GlPeHula::HdgData::Update(v29, a2, v30, result, a4);
        return result;
      case 16:
        uint64_t v22 = a1 + 4144;
        BlueFin::GlPeHula::TurningRateSensorData::Update(v22, a2);
        return result;
      case 17:
        uint64_t v23 = a1 + 4208;
        BlueFin::GlPeHula::MovingStateSensorData::Update(v23, a2);
        return result;
      case 18:
        uint64_t result = (double)*(__int16 *)(a2 + 40 + 88 * (v6 - 1)) / 1000.0;
        *(double *)(a1 + 4192) = result;
        int v24 = *(_DWORD *)(a2 + 40 + 88 * v6 - 80);
        *(unsigned char *)(a1 + 4204) = 1;
        *(_DWORD *)(a1 + 4200) = v24;
        return result;
      case 19:
        goto LABEL_7;
      case 21:
        BlueFin::GlPeHula::UpdateAuxInfo(a1, a2);
        return result;
      case 22:
        float v31 = (_DWORD *)(a1 + 3136);
        BlueFin::GlPeHula::ExtSensTempData::Update(v31, a2);
        return result;
      case 23:
        uint64_t v32 = a1 + 3168;
        BlueFin::GlPeHula::TravelAssistData::Update(v32, a2);
        return result;
      case 29:
        if (v6 >= 2) {
          GlCustomLog(12, "GlPeHula::Update: Monotonic time only uses 1st sample; other samples are ignored\n");
        }
        *(unsigned char *)(a1 + 1060) = 1;
        int v25 = *(_DWORD *)(a2 + 56);
        if (v25 == 2)
        {
          LODWORD(result) = *(_DWORD *)(a2 + 64);
          LOWORD(a4) = *(_WORD *)(a2 + 68);
          *(double *)&unint64_t v38 = (double)*(unint64_t *)&a4 * 0.000001;
          double v39 = *(double *)&v38 + (double)*(unint64_t *)&result * 0.001;
          LOWORD(v38) = *(_WORD *)(a2 + 70);
          BlueFin::GlGlnsTime::GlGlnsTime((uint64_t)v44, *(unsigned __int8 *)(a2 + 60), *(unsigned __int16 *)(a2 + 62), v39 + (double)v38 * 0.000000001);
          BlueFin::GlPeTimeManager::GetTime(*(BlueFin::GlPeTimeManager **)(a1 + 1080), (const BlueFin::GlGlnsTime *)v44, 1, (uint64_t)v46);
        }
        else
        {
          if (v25 != 1)
          {
            if (v25)
            {
              DeviceFaultNotify("glpe_hula.cpp", 1838, "Update", (char)"0");
              __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_hula.cpp", 1838, "0");
            }
            BlueFin::GlUtcTime::GlUtcTime((BlueFin::GlUtcTime *)v46, (unsigned __int16 *)(a2 + 60), result, a4);
            BlueFin::GlPeTimeManager::GetTime(*(BlueFin::GlPeTimeManager **)(a1 + 1080), (const BlueFin::GlUtcTime *)v46, 1, (uint64_t)v44);
            double v26 = v45;
            int v27 = *(_DWORD *)(a2 + 76);
LABEL_84:
            *(_DWORD *)(a1 + 1072) = v27;
            unsigned int v42 = *(_DWORD *)(*(void *)(a1 + 1080) + 2568);
            double v43 = (double)(int)v42;
            if (v42 <= 0xFF9222FE) {
              double v43 = (double)v42;
            }
            uint64_t result = v43 - v26;
            *(double *)(a1 + 1064) = result;
            return result;
          }
          LODWORD(result) = *(_DWORD *)(a2 + 64);
          LOWORD(a4) = *(_WORD *)(a2 + 68);
          *(double *)&unint64_t v40 = (double)*(unint64_t *)&a4 * 0.000001;
          double v41 = *(double *)&v40 + (double)*(unint64_t *)&result * 0.001;
          LOWORD(v40) = *(_WORD *)(a2 + 70);
          BlueFin::GlGpsTime::GlGpsTime((BlueFin::GlGpsTime *)v44, *(unsigned __int16 *)(a2 + 60), v41 + (double)v40 * 0.000000001);
          BlueFin::GlPeTimeManager::GetTime(*(BlueFin::GlPeTimeManager **)(a1 + 1080), (const BlueFin::GlGpsTime *)v44, 1, (uint64_t)v46);
        }
        double v26 = v47;
        int v27 = *(_DWORD *)(a2 + 72);
        goto LABEL_84;
      default:
        goto LABEL_22;
    }
  }
  switch(v8)
  {
    case 'd':
      uint64_t v33 = a2 + 88 * (unsigned __int16)(v6 - 1);
      int v34 = *(__int16 *)(v33 + 40);
      int v35 = *(_DWORD *)(v33 + 48);
      LODWORD(v33) = *(_DWORD *)(v33 + 88);
      uint64_t result = (double)v34 / 1000.0;
      *(double *)(a1 + 4272) = result;
      *(_DWORD *)(a1 + 4280) = v35;
      *(_DWORD *)(a1 + 4284) = v33;
      *(unsigned char *)(a1 + 4288) = 1;
      break;
    case 'e':
      int v36 = (BlueFin::GlPeGloFcnOsnMgr *)(a1 + 4296);
      int v37 = *(_DWORD *)(*(void *)(a1 + 1080) + 2568);
      BlueFin::GlPeHula::LosStateData::Update(v36, a2, v37);
      break;
    case 'f':
      uint64_t v12 = (_DWORD *)(a1 + 5120);
      int v13 = *(_DWORD *)(*(void *)(a1 + 1080) + 2568);
      BlueFin::GlPeHula::ExtConstraintData::Update(v12, a2, v13);
      break;
    default:
LABEL_22:
      GlCustomLog(12, "GlPeHula::Update: Unsupported sensor type %d\n", v7);
      break;
  }
  return result;
}

void BlueFin::GlPeHula::SetLmsFromSensorInput(uint64_t a1, uint64_t a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10)
{
  switch(*(_DWORD *)(a2 + 4))
  {
    case 0:
      double v12 = *(double *)(a1 + 1032);
      HIDWORD(v13) = -1050970305;
      if (v12 != -7199999.0)
      {
        LODWORD(v13) = *(_DWORD *)(a2 + 8);
        *(double *)(a1 + 1048) = v12 + (double)v13;
        int v16 = *(_DWORD *)(a1 + 1040);
        goto LABEL_83;
      }
      GlCustomLog(12, "GlPeHula::Update: No PPS received so PPS-relative time stamp not possible. Using time of reception.\n");
LABEL_4:
      unsigned int v14 = *(_DWORD *)(*(void *)(a1 + 1080) + 2568);
      double v15 = (double)(int)v14;
      if (v14 <= 0xFF9222FE) {
        double v15 = (double)v14;
      }
      goto LABEL_6;
    case 1:
      LOWORD(a4) = *(_WORD *)(a2 + 20);
      *(double *)&unint64_t v28 = (double)*(unint64_t *)&a4;
      double v29 = (double)(3600 * *(unsigned __int16 *)(a2 + 14)
                   + 60 * *(unsigned __int16 *)(a2 + 16)
                   + (unint64_t)*(unsigned __int16 *)(a2 + 18))
          + *(double *)&v28 * 0.001;
      LOWORD(v28) = *(_WORD *)(a2 + 22);
      BlueFin::GlUtcTime::GlUtcTime((BlueFin::GlUtcTime *)&v84, *(unsigned __int16 *)(a2 + 8), *(unsigned __int8 *)(a2 + 10), *(unsigned __int8 *)(a2 + 12), v29 + (double)v28 * 0.000001);
      BlueFin::GlPeTimeManager::GetTime(*(BlueFin::GlPeTimeManager **)(a1 + 1080), (const BlueFin::GlUtcTime *)&v84, 1, (uint64_t)&v80);
      long double v26 = v83;
      *(double *)(a1 + 1048) = v82;
      int v27 = *(_DWORD *)(a2 + 24);
      goto LABEL_16;
    case 2:
      goto LABEL_4;
    case 3:
      if (*(unsigned char *)(a1 + 1060))
      {
        GlCustomLog(12, "GlPeHula::Update: No monotonic-relationship established. Using time of reception.\n");
        unsigned int v32 = *(_DWORD *)(*(void *)(a1 + 1080) + 2568);
        double v33 = (double)(int)v32;
        if (v32 <= 0xFF9222FE) {
          double v33 = (double)v32;
        }
        *(double *)(a1 + 1048) = v33;
        int v16 = *(_DWORD *)(a1 + 1072);
      }
      else
      {
        double v15 = *(double *)(a1 + 1064) + (double)*(unint64_t *)(a2 + 8);
LABEL_6:
        *(double *)(a1 + 1048) = v15;
        int v16 = 10000;
      }
LABEL_83:
      *(_DWORD *)(a1 + 1056) = v16;
      return;
    case 4:
      int v17 = *(unsigned __int8 *)(a2 + 8);
      LODWORD(a3) = *(_DWORD *)(a2 + 12);
      unint64_t v18 = 0x3F50624DD2F1A9FCLL;
      LOWORD(v18) = *(_WORD *)(a2 + 16);
      *(double *)&unint64_t v19 = (double)v18;
      double v20 = (double)*(unint64_t *)&a3 * 0.001 + *(double *)&v19 * 0.000001;
      LOWORD(v19) = *(_WORD *)(a2 + 18);
      double v21 = v20 + (double)v19 * 0.000000001;
      int v80 = &off_270EBC600;
      double v22 = fmod(v21, 1.0);
      if (v22 < 0.0 || v22 >= 1.0)
      {
        float v69 = "dFracSec >= 0.0 && dFracSec < 1.0";
        DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
        float v70 = "glpe_timepoint.h";
        int v71 = 173;
LABEL_86:
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v70, v71, v69);
      }
      double v24 = v22 * 4294967300.0 + 0.5;
      unsigned int v25 = v24;
      if (v24 >= 4294967300.0) {
        unsigned int v25 = -1;
      }
      LODWORD(v8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v25;
      HIDWORD(v8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v21 + 604800 * v17;
      int v80 = &off_270EBC600;
      BlueFin::GlPeTimeManager::GetTime(*(BlueFin::GlPeTimeManager **)(a1 + 1080), (const BlueFin::GlGpsTime *)&v80, 1, (uint64_t)&v84);
      long double v26 = v86;
      *(double *)(a1 + 1048) = v85;
      int v27 = *(_DWORD *)(a2 + 20);
LABEL_16:
      double v30 = fmod(v26, 4294967300.0);
      if (v26 <= 4294967300.0) {
        double v30 = v26;
      }
      if (v30 < -4294967300.0) {
        double v30 = -fmod(-v30, 4294967300.0);
      }
      if (v30 < 0.0) {
        unsigned int v31 = --v30;
      }
      else {
        unsigned int v31 = v30;
      }
      int v16 = v31 + v27;
      goto LABEL_83;
    case 5:
      BlueFin::GlPeTimeManager::GetTime(*(BlueFin::GlPeTimeManager **)(a1 + 1080), 1, &v84);
      int v80 = &off_270EBC600;
      uint64_t v81 = 0;
      BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)&v84, (BlueFin::GlGpsTime *)&v80);
      unsigned int v34 = ((uint64_t (*)(void))v80[4])(&v80);
      unsigned int v35 = ((uint64_t (*)(void))v80[4])(&v80);
      unsigned int v36 = v34 / 0x93A80;
      LODWORD(v37) = v81;
      double v38 = (double)v37 * 2.32830644e-10 + (double)(v35 % 0x93A80);
      double v39 = (double)*(unint64_t *)(a2 + 8) / 1000000000.0;
      if (v38 - v39 <= 302400.0)
      {
        if (v39 - v38 > 302400.0) {
          LOBYTE(v36) = v36 + 1;
        }
      }
      else
      {
        LOBYTE(v36) = v36 - 1;
      }
      int64_t v72 = (int64_t)&off_270EBC600;
      double v54 = fmod(v39, 1.0);
      if (v54 < 0.0 || v54 >= 1.0)
      {
        DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
      }
      double v56 = v54 * 4294967300.0 + 0.5;
      unsigned int v57 = v56;
      if (v56 >= 4294967300.0) {
        unsigned int v57 = -1;
      }
      unsigned int v73 = v57;
      unsigned int v74 = v39 + 604800 * v36;
      int64_t v72 = (int64_t)&off_270EBC600;
      BlueFin::GlPeTimeManager::GetTime(*(BlueFin::GlPeTimeManager **)(a1 + 1080), (const BlueFin::GlGpsTime *)&v72, 1, (uint64_t)&v84);
      unsigned int v58 = *(_DWORD *)(*(void *)(a1 + 1080) + 2568);
      double v59 = (double)v58;
      if (v58 > 0xFF9222FE) {
        double v59 = (double)(int)v58;
      }
      double v60 = v85;
      goto LABEL_81;
    case 6:
      unsigned __int16 v79 = 1970;
      *(_WORD *)float v78 = 1;
      *(_WORD *)float v77 = 1;
      *(_WORD *)float v76 = 0;
      *(_DWORD *)float v75 = 0;
      int64_t v72 = *(void *)(a2 + 8) / 0xF4240uLL;
      BlueFin::GlUtcTime::MakeRelativeToGps0(&v79, (unsigned __int16 *)v78, (unsigned __int16 *)v77, (unsigned __int16 *)v76, (unsigned __int16 *)&v75[2], (unsigned __int16 *)v75, (unsigned __int16 *)&v72, a10);
      LOWORD(v40) = *(_WORD *)v75;
      BlueFin::GlUtcTime::GlUtcTime((BlueFin::GlUtcTime *)&v84, v79, v78[0], v77[0], v76[0], v75[2], (double)v40);
      double v41 = (double)(*(void *)(a2 + 8) % 0xF4240uLL + 1000000 * (v72 % 1000)) * 0.000000001 + 0.0;
      if (v41 >= 1.0)
      {
        DeviceFaultNotify("glpe_timepoint.h", 191, "GlTimeFracSec", (char)"(static_cast<DOUBLE>(ulMilliSec * 1000000UL + ulNanoSec) * 1e-9 + static_cast<DOUBLE>(ullFemtoSec) * 1e-15) < 1.0");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 191, "(static_cast<DOUBLE>(ulMilliSec * 1000000UL + ulNanoSec) * 1e-9 + static_cast<DOUBLE>(ullFemtoSec) * 1e-15) < 1.0");
      }
      double v42 = v41 * 4294967300.0 + 0.5;
      uint64_t v43 = v42;
      if (v42 >= 4294967300.0) {
        uint64_t v43 = 0xFFFFFFFFLL;
      }
      uint64_t v44 = v43 + v84.n128_u32[2];
      unsigned int v45 = v84.n128_u32[3] + v72 / 1000 + HIDWORD(v44);
      v84.n128_u64[1] = __PAIR64__(v45, v44);
      int v46 = BlueFin::GlWeekTowTime::m_ucNextLs;
      BOOL v49 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
         && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent != 0
         && v45 == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
      if (BlueFin::GlWeekTowTime::m_ulCtFctOfNextLs - 1 >= v45) {
        int v46 = BlueFin::GlWeekTowTime::m_ucCurrentLs;
      }
      unsigned int v50 = v45 - v49 - v46 + 432000;
      unsigned int v51 = v50 % 0x7861F80;
      unsigned int v52 = v50 % 0x7861F80 / 0x15180;
      if (v50 % 0x7861F80 > 0x5A4EBFF)
      {
        int v53 = 3;
      }
      else if (v51 <= 0x3C3B87F)
      {
        int v53 = v51 > 0x1E284FF;
      }
      else
      {
        int v53 = 2;
      }
      int v61 = v53;
      float v62 = &BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v53];
      if (v52 >= v62[9])
      {
        int v63 = 9;
      }
      else if (v52 >= BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v53 + 6])
      {
        int v63 = 6;
      }
      else if (v52 >= BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v53 + 3])
      {
        int v63 = 3;
      }
      else
      {
        int v63 = 0;
      }
      LOWORD(v85) = (v61 | (4 * (v50 / 0x7861F80))) + 1980;
      WORD1(v85) = v52 - *v62 + 1;
      if (v52 >= BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v61 + v63 + 2])
      {
        int v64 = 3;
      }
      else if (v52 < BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v61 + v63 + 1])
      {
        int v64 = 1;
      }
      else
      {
        int v64 = 2;
      }
      int v65 = v64 + v63;
      BYTE4(v85) = v65;
      BYTE5(v85) = v52 - BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v61 + v65 - 1] + 1;
      LOBYTE(v52) = 60;
      if (v49)
      {
        LOBYTE(v66) = 59;
        LOBYTE(v67) = 23;
      }
      else
      {
        unint64_t v67 = (1193047 * (unint64_t)(v50 % 0x15180)) >> 32;
        unsigned int v66 = (2185 * (v50 % 0xE10)) >> 17;
        unsigned int v52 = v50 % 0x3C;
      }
      BYTE6(v85) = v67;
      HIBYTE(v85) = v66;
      LOBYTE(v86) = v52;
      BlueFin::GlPeTimeManager::GetTime(*(BlueFin::GlPeTimeManager **)(a1 + 1080), (const BlueFin::GlUtcTime *)&v84, 1, (uint64_t)&v80);
      unsigned int v68 = *(_DWORD *)(*(void *)(a1 + 1080) + 2568);
      double v59 = (double)v68;
      if (v68 > 0xFF9222FE) {
        double v59 = (double)(int)v68;
      }
      double v60 = v82;
LABEL_81:
      if (v60 + v59 < 0.0) {
        return;
      }
      *(double *)(a1 + 1048) = v60;
      int v16 = 1000000;
      goto LABEL_83;
    default:
      float v69 = "0";
      DeviceFaultNotify("glpe_hula.cpp", 4234, "SetLmsFromSensorInput", (char)"0");
      float v70 = "glpe_hula.cpp";
      int v71 = 4234;
      goto LABEL_86;
  }
}

uint64_t BlueFin::GlPeBaro::SetExtSensInfo(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = 0;
  *(_DWORD *)(result + 40) = 0;
  *(unsigned char *)(result + 32) = 0;
  if (*(_DWORD *)a2 == 6 && *(__int16 *)(a2 + 32) >= 1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = *(unsigned __int16 *)(a2 + 32);
    int v4 = (float *)(a2 + 48);
    double v5 = 0.0;
    do
    {
      if (v2) {
        double v5 = (*v4 + (double)v2 * v5) / (double)(v2 + 1);
      }
      else {
        double v5 = *v4;
      }
      ++v2;
      *(double *)uint64_t result = v5;
      *(_DWORD *)(result + 40) = v2;
      v4 += 22;
    }
    while (v3 != v2);
    if (v5 > 0.0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  return result;
}

uint64_t BlueFin::GlPeKF::SetExtSensInfo(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 2316);
  if (v4 && (v4 == 1 || (*(unsigned char *)(*(void *)(*(void *)(a1 + 92344) + 160) + 2) & 1) != 0)) {
    (*(void (**)(void))(*(void *)(a1 + 27744) + 248))();
  }

  return BlueFin::GlPeBaro::SetExtSensInfo(a1 + 17360, a2);
}

uint64_t BlueFin::GlPeKfPool::SetExtSensInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a1 + 58096;
  do
  {
    uint64_t v7 = *(void *)(v6 + v5);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 384))(v7);
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 248))(v7, a2, a3);
    }
    v5 += 8;
  }
  while (v5 != 24);
  return result;
}

uint64_t BlueFin::GlPeNavGnssKF::IsKFEnabled(BlueFin::GlPeNavGnssKF *this)
{
  return *((unsigned __int8 *)this + 1320);
}

uint64_t non-virtual thunk to'BlueFin::GlPePrawnKf::IsKFEnabled(BlueFin::GlPePrawnKf *this)
{
  return *((unsigned __int8 *)this + 15673);
}

uint64_t BlueFin::GlPeHula::MovingStateSensorData::Update(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v30 = *MEMORY[0x263EF8340];
  int v3 = *(__int16 *)(a2 + 32);
  if ((((_WORD)v3 - 1) & 0x8000) != 0)
  {
    *(_DWORD *)(result + 8) = 0;
    return result;
  }
  int v5 = *(__int16 *)(a2 + 88 * (unsigned __int16)(v3 - 1) + 40);
  *(double *)uint64_t result = (double)v5 / 1000.0;
  uint64_t v6 = *(void *)(result + 40);
  if (v6) {
    LODWORD(v6) = *(_DWORD *)(v6 + 576);
  }
  int v7 = v6 + v5;
  if (v3 < 1)
  {
    int v24 = 0;
    *(_DWORD *)(result + 28) = v7;
    int v21 = *(_DWORD *)(result + 8);
    int v22 = *(_DWORD *)(result + 12);
LABEL_18:
    int v11 = v22;
    int v23 = v21;
    goto LABEL_19;
  }
  int v28 = v6 + v5;
  int v8 = 0;
  unsigned __int8 v9 = 0;
  __int16 v10 = 0;
  int v11 = 0;
  do
  {
    unsigned int v12 = v9;
    uint64_t v13 = a2 + 88 * v9;
    int v16 = *(_DWORD *)(v13 + 120);
    double v15 = (int *)(v13 + 120);
    int v14 = v16;
    if (v16 <= 3)
    {
      uint64_t v17 = a2 + 88 * v12;
      int v19 = *(_DWORD *)(v17 + 48);
      unint64_t v18 = (_DWORD *)(v17 + 48);
      GlCustomLog(14, "Motion update %d: state: %d, confidence: %d\n", v8, v19, v14);
      int v20 = *v15;
      if (*v15 <= v11)
      {
        if (v20 == v11) {
          v29[v10++] = *v18;
        }
      }
      else
      {
        v29[0] = *v18;
        __int16 v10 = 1;
        int v11 = v20;
      }
    }
    unsigned __int8 v9 = v12 + 1;
    int v8 = (v12 + 1);
  }
  while (v8 < *(__int16 *)(a2 + 32));
  int v21 = *(_DWORD *)(v2 + 8);
  int v7 = v28;
  *(_DWORD *)(v2 + 28) = v28;
  int v22 = *(_DWORD *)(v2 + 12);
  if (v10 != 1)
  {
    int v24 = v10;
    if (v10 >= 2)
    {
      int v25 = 0;
      int v23 = 0;
      int v11 = 0;
      *(_WORD *)(v2 + 16) = 0;
      *(void *)(v2 + 8) = 0;
      goto LABEL_33;
    }
    goto LABEL_18;
  }
  int v23 = v29[0];
  *(_DWORD *)(v2 + 8) = v29[0];
  *(_DWORD *)(v2 + 12) = v11;
  *(_WORD *)(v2 + 16) = 257;
  int v24 = 1;
LABEL_19:
  if (v23 == 6)
  {
LABEL_22:
    BOOL v27 = v21 != 1 || v22 != 3;
    if (v21 == 6 || !v27) {
      return GlCustomLog(15, "Motion update conclusion at lms %u: state: %d, confidence: %d numSamples: %d\n", v7, v23, v11, v24);
    }
    int v25 = v7;
    goto LABEL_33;
  }
  if (v23 == 1)
  {
    if (v11 != 3)
    {
      int v23 = 1;
      return GlCustomLog(15, "Motion update conclusion at lms %u: state: %d, confidence: %d numSamples: %d\n", v7, v23, v11, v24);
    }
    goto LABEL_22;
  }
  int v25 = 0;
LABEL_33:
  *(_DWORD *)(v2 + 32) = v25;
  return GlCustomLog(15, "Motion update conclusion at lms %u: state: %d, confidence: %d numSamples: %d\n", v7, v23, v11, v24);
}

void BlueFin::GlPeHula::PosLocationData::Update(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int16 *)(a2 + 32) - 1 <= 0x27)
  {
    uint64_t v3 = a2 + 88 * (unsigned __int16)(*(_WORD *)(a2 + 32) - 1);
    int v4 = (long long *)(v3 + 48);
    int v5 = (float64x2_t *)(v3 + 88);
    unsigned int v6 = *(_DWORD *)(*(void *)a1 + 576);
    if (v6 <= 1) {
      unsigned int v6 = 1;
    }
    *(_DWORD *)(a1 + 120) = v6;
    if (*(unsigned char *)(a1 + 8))
    {
      uint64_t v7 = *(void *)(v3 + 64);
      long long v51 = *v4;
      uint64_t v52 = v7;
      int v8 = (_OWORD *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 32);
      long long v49 = *(_OWORD *)(a1 + 16);
      uint64_t v50 = v9;
      BlueFin::lla2ned((double *)&v49, (double *)&v51, 0, v53.f64);
      float v10 = sqrt(v53.f64[1] * v53.f64[1] + v53.f64[0] * v53.f64[0]);
      float32x2_t v11 = vcvt_f32_f64(vmulq_f64(*v5, *v5));
      float32x2_t v12 = vcvt_f32_f64(vmulq_f64(*(float64x2_t *)(a1 + 40), *(float64x2_t *)(a1 + 40)));
      if (vaddv_f32(vadd_f32((float32x2_t)vzip1_s32((int32x2_t)v11, (int32x2_t)v12), (float32x2_t)vzip2_s32((int32x2_t)v11, (int32x2_t)v12)))* 4.0 <= (float)(v10 * v10))
      {
        if (*(_DWORD *)(v3 + 120) < *(_DWORD *)(a1 + 72)) {
          return;
        }
        long long v26 = *v4;
        *(void *)(a1 + 32) = *(void *)(v3 + 64);
        *int v8 = v26;
        float64x2_t v27 = *v5;
        long long v28 = *(_OWORD *)(v3 + 104);
        *(void *)(a1 + 72) = *(void *)(v3 + 120);
        *(_OWORD *)(a1 + 56) = v28;
      }
      else
      {
        float32x2_t v13 = vadd_f32(v11, v12);
        float32x2_t v14 = vdiv_f32(v12, v13);
        double v15 = *(double *)(v3 + 64);
        if (v15 < -998.0 && *(double *)(a1 + 32) < -998.0
          || (double v16 = *(double *)(v3 + 112), v16 <= 0.0) && *(double *)(a1 + 64) <= 0.0)
        {
          double v19 = 0.0;
          char v18 = 1;
        }
        else if (*(double *)(a1 + 32) < -998.0 || (double v17 = *(double *)(a1 + 64), v17 <= 0.0))
        {
          char v18 = 0;
          *(double *)(a1 + 64) = v16;
          double v19 = 1.0;
        }
        else
        {
          char v18 = 0;
          double v19 = 0.0;
          if (v15 >= -998.0 && v16 > 0.0)
          {
            char v18 = 0;
            float v20 = v16 * v16;
            float v21 = v17 * v17;
            float v22 = v21 / (float)(v20 + v21);
            *(double *)(a1 + 64) = sqrtf(v22 * v20);
            double v19 = v22;
          }
        }
        BlueFin::lla2ned((double *)&v51, (double *)&v49, 0, v53.f64);
        float64x2_t v45 = vmulq_f64(v53, vcvtq_f64_f32(v14));
        float64x2_t v46 = v53;
        float64x2_t v53 = v45;
        double v54 = v19 * v54;
        BlueFin::ned2lla((double *)&v49, v53.f64, (double *)&v47);
        *int v8 = v47;
        if ((v18 & 1) == 0) {
          *(void *)(a1 + 32) = v48;
        }
        int v29 = *(_DWORD *)(v3 + 120);
        if (v29 > *(_DWORD *)(a1 + 72)) {
          *(_DWORD *)(a1 + 72) = v29;
        }
        float64x2_t v30 = vsubq_f64(v46, v45);
        float32x2_t v31 = vcvt_f32_f64(vaddq_f64(vdivq_f64(vmulq_f64(v45, v45), vcvtq_f64_f32(v12)), vdivq_f64(vmulq_f64(v30, v30), vcvtq_f64_f32(v11))));
        __asm { FMOV            V1.2S, #1.0 }
        float64x2_t v27 = vcvtq_f64_f32(vsqrt_f32(vdiv_f32(vmul_f32(vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(_D1, v31), (int8x8_t)_D1, (int8x8_t)v31), v12), v11), v13)));
      }
      *(float64x2_t *)(a1 + 40) = v27;
    }
    else
    {
      long long v23 = *v4;
      *(void *)(a1 + 32) = *(void *)(v3 + 64);
      *(_OWORD *)(a1 + 16) = v23;
      float64x2_t v24 = *v5;
      long long v25 = *(_OWORD *)(v3 + 104);
      *(void *)(a1 + 72) = *(void *)(v3 + 120);
      *(_OWORD *)(a1 + 56) = v25;
      *(float64x2_t *)(a1 + 40) = v24;
    }
    unint64_t v37 = (void *)(a1 + 40);
    double v38 = *(double *)(a1 + 40);
    if (v38 > 0.0)
    {
      double v39 = *(double *)(a1 + 48);
      if (v39 > 0.0)
      {
        unsigned int v40 = *(_DWORD *)(a1 + 72) - 2;
        double v41 = 10.0;
        if (v38 >= 10.0 || v40 <= 1)
        {
          if (v40 <= 1)
          {
            double v41 = 1.0;
            if (v38 < 1.0)
            {
              *unint64_t v37 = 0x3FF0000000000000;
              double v38 = 1.0;
            }
          }
        }
        else
        {
          *unint64_t v37 = 0x4024000000000000;
          double v38 = 10.0;
        }
        if (v39 < v41) {
          *(double *)(a1 + 48) = v41;
        }
      }
    }
    if (!*(_DWORD *)(a1 + 72)) {
      *(_DWORD *)(a1 + 72) = 1;
    }
    unsigned int v42 = *(_DWORD *)(*(void *)a1 + 576);
    if (v42 <= 1) {
      unsigned int v42 = 1;
    }
    *(_DWORD *)(a1 + 120) = v42;
    *(double *)(a1 + 128) = (double)*(__int16 *)(v3 + 40) / 1000.0;
    *(void *)(a1 + 112) = *(void *)(a1 + 72);
    long long v43 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v37;
    *(_OWORD *)(a1 + 96) = v43;
    BOOL v44 = v38 > 0.0;
    if (v38 >= 10000.0) {
      BOOL v44 = 0;
    }
    *(unsigned char *)(a1 + 8) = v44;
    if (v44) {
      *(unsigned char *)(a1 + 9) = 0;
    }
  }
}

uint64_t BlueFin::GlPeNavGnssKF::ResetFlagExtAlongTrkSpeedAndPdrUsedInKF(uint64_t this)
{
  *(_WORD *)(this + 2168) = 0;
  return this;
}

void BlueFin::GlPeFiltPos::UpdateFiltPos(int *a1, int a2, long long *a3, uint64_t *a4, char a5, int a6, int a7, char a8)
{
  uint64_t v239 = *MEMORY[0x263EF8340];
  if (*((float *)a3 + 7) <= 0.0) {
    return;
  }
  uint64_t v236 = 0x200000002;
  long long __src = xmmword_263BBBCC0;
  long long v230 = xmmword_263BBA050;
  BlueFin::lla2ned((double *)a1 + 2, (double *)a3, 0, (double *)v226);
  int v16 = *a1;
  float v17 = *((float *)a1 + 12);
  float v18 = *((float *)a1 + 15);
  float v19 = sqrtf(v18);
  if (v19 >= v17) {
    float v20 = v19;
  }
  else {
    float v20 = *((float *)a1 + 12);
  }
  float v21 = *((float *)a3 + 9);
  if (v21 >= 1000000.0)
  {
    float v20 = fmaxf(v20, 20.0);
  }
  else
  {
    if (*((float *)a3 + 8) >= v20) {
      float v20 = *((float *)a3 + 8);
    }
    float v22 = sqrtf(v21);
    if (v22 >= v20) {
      float v20 = v22;
    }
  }
  BOOL v23 = 0;
  float v24 = (float)(a2 - v16) * 0.001;
  float v25 = fmaxf(v20, 10.0);
  if ((a5 & 1) == 0 && v24 > 6.0) {
    BOOL v23 = *((unsigned char *)a3 + 64) == 0;
  }
  float v26 = *((float *)a1 + 10) + (float)(v25 * v24);
  double v27 = sqrt(*((double *)v226 + 1) * *((double *)v226 + 1) + *(double *)v226 * *(double *)v226);
  float v28 = *((float *)a3 + 6);
  double v29 = v28 * 3.0;
  if (v29 < 400.0) {
    double v29 = 400.0;
  }
  if (a6)
  {
    float v30 = 400.0;
    if (v28 >= 400.0) {
      float v30 = *((float *)a3 + 6);
    }
    if (!a7) {
      float v28 = v30;
    }
    if (v26 >= v28) {
      float v28 = v26;
    }
    float v31 = v28 * 3.0;
    if (v31 < 200.0) {
      float v31 = 200.0;
    }
    BOOL v32 = v27 > v31;
  }
  else
  {
    BOOL v32 = 0;
  }
  double v33 = v26;
  float v34 = *((float *)a3 + 8);
  if (v34 > 10.0) {
    char v35 = a5;
  }
  else {
    char v35 = 0;
  }
  if (v21 >= 9.0) {
    char v35 = 0;
  }
  float v36 = v17 - v34;
  if (v36 < 0.0) {
    float v36 = -v36;
  }
  float v37 = sqrtf(v18 + fmaxf(v21, 9.0)) * 3.0;
  double v38 = *((double *)a1 + 4) - *((double *)a3 + 2);
  if (v38 < 0.0) {
    double v38 = -v38;
  }
  double v39 = (float)(sqrtf((float)(*((float *)a1 + 11) * *((float *)a1 + 11)) + (float)(*((float *)a3 + 7)
                                                                                 * *((float *)a3 + 7)))
              * 3.0);
  char v40 = v23 | v35;
  double v41 = (const char *)&unk_263B6E70D;
  if (v23) {
    unsigned int v42 = "T";
  }
  else {
    unsigned int v42 = (const char *)&unk_263B6E70D;
  }
  if (v40)
  {
LABEL_57:
    float64x2_t v46 = "U";
    if (v29 >= v33) {
      float64x2_t v46 = (const char *)&unk_263B6E70D;
    }
    if (v32) {
      long long v47 = "P";
    }
    else {
      long long v47 = (const char *)&unk_263B6E70D;
    }
    uint64_t v48 = "M";
    if (!a7) {
      uint64_t v48 = (const char *)&unk_263B6E70D;
    }
    long long v49 = "S";
    if (v36 <= v37) {
      long long v49 = (const char *)&unk_263B6E70D;
    }
    if (v38 > v39) {
      double v41 = "A";
    }
    GlCustomLog(14, "Reset GlPeFiltPos %s%s%s%s%s%s\n", v42, v46, v47, v48, v49, v41);
    GlCustomLog(15, "GlPeFiltPos:fdt,%.1f;dPosDif,%.1f;fHorzUncProp,%.1f;m_fPosSigma,%.1f;\n",
      v24,
      v27,
      v33,
      *((float *)a3 + 6));
    int v50 = 1;
    if (!*a1) {
      goto LABEL_72;
    }
    goto LABEL_71;
  }
  int v43 = v29 < v33 || v32;
  if (v43 == 1)
  {
    unsigned int v42 = (const char *)&unk_263B6E70D;
    if (!*((unsigned char *)a3 + 65) || (a8 & 1) != 0) {
      goto LABEL_57;
    }
    if (v36 > v37 || v38 > v39) {
      goto LABEL_57;
    }
  }
  else if (v36 > v37 || v38 > v39)
  {
    unsigned int v42 = (const char *)&unk_263B6E70D;
    goto LABEL_57;
  }
  int v50 = 0;
  if (!v16)
  {
LABEL_72:
    *a1 = a2;
    *((_OWORD *)a1 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *a3;
    *((void *)a1 + 4) = *((void *)a3 + 2);
    float v51 = *((float *)a3 + 6);
    *((float *)a1 + 10) = v51;
    float32x2_t v52 = *(float32x2_t *)((char *)a3 + 28);
    *(float32x2_t *)(a1 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v52;
    float v53 = *((float *)a3 + 10);
    *((float *)a1 + 13) = v53;
    a1[14] = 0;
    float v54 = *((float *)a3 + 9);
    if (*((unsigned char *)a3 + 64)) {
      float v54 = 0.1;
    }
    *((float *)a1 + 15) = v54;
    *((float *)a1 + 17) = v54;
    a1[16] = *((_DWORD *)a3 + 11);
    *((void *)a1 + 12) = 0;
    *((void *)a1 + 15) = 0;
    double v55 = (float)(v51 * v51);
    *((double *)a1 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v55;
    double v56 = v54;
    *((double *)a1 + 16) = v56;
    *((void *)a1 + 29) = 0;
    *((void *)a1 + 32) = 0;
    *((void *)a1 + 27) = 0x200000002;
    *((double *)a1 + 28) = v55;
    *((double *)a1 + 33) = v56;
    *((void *)a1 + 46) = 0;
    *((void *)a1 + 49) = 0;
    *((void *)a1 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0x200000002;
    *((void *)a1 + 44) = 0x200000002;
    *((double *)a1 + 45) = vmul_f32(v52, v52).f32[0];
    *((double *)a1 + 50) = v56;
    a1[18] = *((_DWORD *)a3 + 12);
    float32x2_t v57 = *(float32x2_t *)((char *)a3 + 52);
    *(int32x2_t *)(a1 + 19) = vrev64_s32((int32x2_t)v57);
    float v58 = *((float *)a3 + 15);
    *((float *)a1 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v58;
    *((void *)a1 + 63) = 0;
    *((void *)a1 + 66) = 0;
    *((void *)a1 + 78) = 0x200000002;
    *((double *)a1 + 62) = vmul_f32(v57, v57).f32[0];
    *((double *)a1 + 67) = v58;
    int v59 = 0;
    if (*((float *)a3 + 6) < 200.0) {
      *((unsigned char *)a1 + 8) = 1;
    }
    goto LABEL_107;
  }
LABEL_71:
  if (((*((unsigned char *)a1 + 8) != 0) & ~v50) == 0) {
    goto LABEL_72;
  }
  __float2 v60 = __sincosf_stret(*((float *)a1 + 13));
  v226[0] = __src;
  v226[1] = v229;
  v226[2] = v230;
  v226[3] = v231;
  uint64_t v227 = 0x200000002;
  v223[1] = 0;
  v223[0] = 0;
  uint64_t v225 = 0x200000002;
  int v61 = a1[1];
  uint64_t v224 = 0;
  v223[4] = 0;
  if (v61) {
    float v62 = (float)(a2 - v61) * 0.001;
  }
  else {
    float v62 = v24;
  }
  int v63 = *((unsigned __int8 *)a3 + 64);
  if (*((unsigned char *)a3 + 65) && !*((unsigned char *)a3 + 64) || (*a1 = a2, !v63) || (double v64 = 0.0, v62 > 1.0))
  {
    double v64 = v62;
    if ((a5 & 1) == 0) {
      *((double *)v226 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v62;
    }
    v223[0] = 0x3FE0000000000000;
    uint64_t v224 = 0x4000000000000000;
  }
  long long v221 = *((_OWORD *)a1 + 1);
  uint64_t v222 = *((void *)a1 + 4);
  float v65 = *((float *)a1 + 12);
  double v66 = (float)(v60.__sinval * v65);
  float v67 = *((float *)a1 + 14);
  double v68 = v67;
  double v149 = (float)(v60.__cosval * v65);
  double v212 = v64 * v149;
  double v213 = v64 * v66;
  double v214 = v64 * v67;
  BlueFin::ned2lla((double *)&v221, &v212, (double *)&v218);
  uint64_t v70 = *((void *)&v218 + 1);
  uint64_t v69 = v218;
  long long v221 = v218;
  uint64_t v71 = v219;
  uint64_t v222 = v219;
  LODWORD(v72) = a1[18];
  float v73 = *((float *)a1 + 19);
  float v74 = *(float *)&v72 + v73;
  uint64_t v220 = 0;
  BlueFin::Matrix::mult((BlueFin::Matrix *)&v218, (const BlueFin::Matrix *)(a1 + 22), 1, (const BlueFin::Matrix *)v226, v72);
  uint64_t v75 = BlueFin::Matrix::mult((uint64_t)(a1 + 22), (const BlueFin::Matrix *)v226, (const BlueFin::Matrix *)&v218);
  BlueFin::Matrix::operator+=(v75, (uint64_t)v223);
  float v76 = (long long *)(a1 + 56);
  BlueFin::Matrix::mult((BlueFin::Matrix *)&v218, (const BlueFin::Matrix *)(a1 + 56), 1, (const BlueFin::Matrix *)v226, v77);
  uint64_t v78 = BlueFin::Matrix::mult((uint64_t)(a1 + 56), (const BlueFin::Matrix *)v226, (const BlueFin::Matrix *)&v218);
  BlueFin::Matrix::operator+=(v78, (uint64_t)v223);
  unsigned __int16 v79 = (long long *)(a1 + 90);
  BlueFin::Matrix::mult((BlueFin::Matrix *)&v218, (const BlueFin::Matrix *)(a1 + 90), 1, (const BlueFin::Matrix *)v226, v80);
  uint64_t v81 = BlueFin::Matrix::mult((uint64_t)(a1 + 90), (const BlueFin::Matrix *)v226, (const BlueFin::Matrix *)&v218);
  BlueFin::Matrix::operator+=(v81, (uint64_t)v223);
  double v82 = (long long *)(a1 + 124);
  BlueFin::Matrix::mult((BlueFin::Matrix *)&v218, (const BlueFin::Matrix *)(a1 + 124), 1, (const BlueFin::Matrix *)v226, v83);
  uint64_t v84 = BlueFin::Matrix::mult((uint64_t)(a1 + 124), (const BlueFin::Matrix *)v226, (const BlueFin::Matrix *)&v218);
  BlueFin::Matrix::operator+=(v84, (uint64_t)v223);
  a1[1] = a2;
  if (!*((unsigned char *)a3 + 65))
  {
    double v213 = 0.0;
    uint64_t v215 = 0;
    double v86 = (float)(*((float *)a3 + 6) * *((float *)a3 + 6));
    double v212 = v86;
    double v87 = *((float *)a3 + 9);
    uint64_t v217 = 0x200000002;
    double v216 = v87;
    v209[1] = 0.0;
    v209[4] = 0.0;
    v209[0] = v86;
    uint64_t v211 = 0x200000002;
    double v210 = v87;
    if (*((unsigned char *)a3 + 64))
    {
      double v212 = v86 * 5.0;
      double v216 = v87 * 5.0;
      v209[0] = v86 * 5.0;
      double v210 = v87 * 5.0;
    }
    v203[1] = 0.0;
    long long v204 = v238;
    uint64_t v205 = 0;
    long long v207 = v237;
    float v88 = *((float *)a3 + 7) * *((float *)a3 + 7);
    long long v198 = v238;
    v197[1] = 0.0;
    uint64_t v199 = 0;
    long long v201 = v237;
    uint64_t v208 = 0x200000002;
    v203[0] = v88;
    float v89 = *((float *)a3 + 14);
    v197[0] = (float)(*((float *)a3 + 13) * *((float *)a3 + 13));
    double v90 = *((float *)a3 + 15);
    uint64_t v202 = 0x200000002;
    double v200 = v90;
    double v206 = v87;
    __float2 v91 = __sincosf_stret(*((float *)a3 + 10));
    long long v195 = *a3;
    uint64_t v196 = *((void *)a3 + 2);
    float v92 = *((float *)a3 + 8);
    double v93 = (float)(v91.__cosval * v92);
    double v94 = (float)(v91.__sinval * v92);
    BlueFin::lla2ned((double *)&v195, (double *)&v221, 0, v194);
    *(double *)int v193 = v194[0];
    *(double *)&v193[1] = v93 - v149;
    v193[16] = 0x200000001;
    *(double *)float v192 = v194[1];
    *(double *)&v192[1] = v94 - v66;
    v192[16] = 0x200000001;
    *(double *)int v191 = v194[2];
    *(double *)&v191[1] = 0.0 - v68;
    v191[16] = 0x200000001;
    float v95 = *((float *)a3 + 12);
    float v96 = v95 - v74;
    double v97 = (float)(v95 - v74);
    if (v97 <= 149896.229)
    {
      if (v97 >= -149896.229)
      {
LABEL_95:
        double v101 = (float)(v89 - *((float *)a1 + 19));
        v190[0] = v96;
        v190[1] = v101;
        *(void *)&v190[16] = 0x200000001;
        unsigned int v102 = a1[54];
        if (v102) {
          memcpy(&__dst, a1 + 22, 32 * (int)v102);
        }
        unint64_t v189 = __PAIR64__(a1[55], v102);
        BlueFin::Matrix::operator+=((uint64_t)&__dst, (uint64_t)&v212);
        v179[16] = 0x200000002;
        v179[0] = *((void *)&v183 + 1);
        *(double *)&v179[1] = -*((double *)&__dst + 1);
        *(double *)&v179[4] = -*(double *)&v183;
        v179[5] = __dst;
        BlueFin::Matrix::operator/=((uint64_t)v179, *(double *)&__dst * *((double *)&v183 + 1) - *((double *)&__dst + 1) * *(double *)&v183);
        BlueFin::Matrix::operator*((uint64_t)(a1 + 22), (uint64_t)v179, (uint64_t)v180);
        if (&__dst != v76)
        {
          long long v103 = *((_OWORD *)a1 + 19);
          long long v185 = *((_OWORD *)a1 + 18);
          long long v186 = v103;
          long long v104 = *((_OWORD *)a1 + 21);
          long long v187 = *((_OWORD *)a1 + 20);
          long long v188 = v104;
          long long v105 = *((_OWORD *)a1 + 15);
          long long __dst = *v76;
          long long v182 = v105;
          long long v106 = *((_OWORD *)a1 + 17);
          long long v183 = *((_OWORD *)a1 + 16);
          long long v184 = v106;
          unint64_t v189 = *((void *)a1 + 44);
        }
        BlueFin::Matrix::operator+=((uint64_t)&__dst, (uint64_t)v209);
        v178[16] = 0x200000002;
        v178[0] = *((void *)&v183 + 1);
        *(double *)&v178[1] = -*((double *)&__dst + 1);
        *(double *)&v178[4] = -*(double *)&v183;
        v178[5] = __dst;
        BlueFin::Matrix::operator/=((uint64_t)v178, *(double *)&__dst * *((double *)&v183 + 1) - *((double *)&__dst + 1) * *(double *)&v183);
        BlueFin::Matrix::operator*((uint64_t)(a1 + 56), (uint64_t)v178, (uint64_t)v179);
        if (&__dst != v79)
        {
          long long v107 = *(_OWORD *)(a1 + 110);
          long long v185 = *(_OWORD *)(a1 + 106);
          long long v186 = v107;
          long long v108 = *(_OWORD *)(a1 + 118);
          long long v187 = *(_OWORD *)(a1 + 114);
          long long v188 = v108;
          long long v109 = *(_OWORD *)(a1 + 94);
          long long __dst = *v79;
          long long v182 = v109;
          long long v110 = *(_OWORD *)(a1 + 102);
          long long v183 = *(_OWORD *)(a1 + 98);
          long long v184 = v110;
          unint64_t v189 = *((void *)a1 + 61);
        }
        BlueFin::Matrix::operator+=((uint64_t)&__dst, (uint64_t)v203);
        v177[16] = 0x200000002;
        v177[0] = *((void *)&v183 + 1);
        *(double *)&v177[1] = -*((double *)&__dst + 1);
        *(double *)&v177[4] = -*(double *)&v183;
        v177[5] = __dst;
        BlueFin::Matrix::operator/=((uint64_t)v177, *(double *)&__dst * *((double *)&v183 + 1) - *((double *)&__dst + 1) * *(double *)&v183);
        BlueFin::Matrix::operator*((uint64_t)(a1 + 90), (uint64_t)v177, (uint64_t)v178);
        if (&__dst != v82)
        {
          long long v111 = *((_OWORD *)a1 + 36);
          long long v185 = *((_OWORD *)a1 + 35);
          long long v186 = v111;
          long long v112 = *((_OWORD *)a1 + 38);
          long long v187 = *((_OWORD *)a1 + 37);
          long long v188 = v112;
          long long v113 = *((_OWORD *)a1 + 32);
          long long __dst = *v82;
          long long v182 = v113;
          long long v114 = *((_OWORD *)a1 + 34);
          long long v183 = *((_OWORD *)a1 + 33);
          long long v184 = v114;
          unint64_t v189 = *((void *)a1 + 78);
        }
        BlueFin::Matrix::operator+=((uint64_t)&__dst, (uint64_t)v197);
        uint64_t v176 = 0x200000002;
        v173[0] = *((void *)&v183 + 1);
        *(double *)&v173[1] = -*((double *)&__dst + 1);
        double v174 = -*(double *)&v183;
        uint64_t v175 = __dst;
        BlueFin::Matrix::operator/=((uint64_t)v173, *(double *)&__dst * *((double *)&v183 + 1) - *((double *)&__dst + 1) * *(double *)&v183);
        BlueFin::Matrix::operator*((uint64_t)(a1 + 124), (uint64_t)v173, (uint64_t)v177);
        double v116 = BlueFin::Matrix::mult((BlueFin::Matrix *)v173, (const BlueFin::Matrix *)v180, 1, (const BlueFin::Matrix *)v193, v115);
        double v117 = BlueFin::Matrix::mult((BlueFin::Matrix *)v172, (const BlueFin::Matrix *)v179, 1, (const BlueFin::Matrix *)v192, v116);
        double v118 = BlueFin::Matrix::mult((BlueFin::Matrix *)v171, (const BlueFin::Matrix *)v178, 1, (const BlueFin::Matrix *)v191, v117);
        BlueFin::Matrix::mult((BlueFin::Matrix *)v170, (const BlueFin::Matrix *)v177, 1, (const BlueFin::Matrix *)v190, v118);
        int v119 = v236;
        if (v236) {
          memcpy(&v160, &__src, 32 * (int)v236);
        }
        int v120 = HIDWORD(v236);
        int v168 = v119;
        int v169 = HIDWORD(v236);
        BlueFin::Matrix::operator-=((uint64_t)&v160, (uint64_t)v180);
        BlueFin::Matrix::operator*((uint64_t)&v160, (uint64_t)(a1 + 22), (uint64_t)&v151);
        long long v121 = v156;
        *(_OWORD *)(a1 + 38) = v155;
        *(_OWORD *)(a1 + 42) = v121;
        long long v122 = v158;
        *(_OWORD *)(a1 + 46) = v157;
        *(_OWORD *)(a1 + 50) = v122;
        long long v123 = v152;
        *(_OWORD *)(a1 + 22) = v151;
        *(_OWORD *)(a1 + 26) = v123;
        long long v124 = v154;
        *(_OWORD *)(a1 + 30) = v153;
        *(_OWORD *)(a1 + 34) = v124;
        *((void *)a1 + 27) = v159;
        long long v166 = v234;
        long long v167 = v235;
        long long v164 = v232;
        long long v165 = v233;
        long long v162 = v230;
        long long v163 = v231;
        long long v160 = __src;
        long long v161 = v229;
        int v168 = v119;
        int v169 = v120;
        BlueFin::Matrix::operator-=((uint64_t)&v160, (uint64_t)v179);
        BlueFin::Matrix::operator*((uint64_t)&v160, (uint64_t)(a1 + 56), (uint64_t)&v151);
        long long v125 = v156;
        *((_OWORD *)a1 + 18) = v155;
        *((_OWORD *)a1 + 19) = v125;
        long long v126 = v158;
        *((_OWORD *)a1 + 20) = v157;
        *((_OWORD *)a1 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v126;
        long long v127 = v152;
        *float v76 = v151;
        *((_OWORD *)a1 + 15) = v127;
        long long v128 = v154;
        *((_OWORD *)a1 + 16) = v153;
        *((_OWORD *)a1 + 17) = v128;
        *((void *)a1 + 44) = v159;
        long long v166 = v234;
        long long v167 = v235;
        long long v164 = v232;
        long long v165 = v233;
        long long v162 = v230;
        long long v163 = v231;
        long long v160 = __src;
        long long v161 = v229;
        int v168 = v119;
        int v169 = v120;
        BlueFin::Matrix::operator-=((uint64_t)&v160, (uint64_t)v178);
        BlueFin::Matrix::operator*((uint64_t)&v160, (uint64_t)(a1 + 90), (uint64_t)&v151);
        long long v129 = v156;
        *(_OWORD *)(a1 + 106) = v155;
        *(_OWORD *)(a1 + 110) = v129;
        long long v130 = v158;
        *(_OWORD *)(a1 + 114) = v157;
        *(_OWORD *)(a1 + 118) = v130;
        long long v131 = v152;
        *unsigned __int16 v79 = v151;
        *(_OWORD *)(a1 + 94) = v131;
        long long v132 = v154;
        *(_OWORD *)(a1 + 98) = v153;
        *(_OWORD *)(a1 + 102) = v132;
        *((void *)a1 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v159;
        long long v166 = v234;
        long long v167 = v235;
        long long v164 = v232;
        long long v165 = v233;
        long long v162 = v230;
        long long v163 = v231;
        long long v160 = __src;
        long long v161 = v229;
        int v168 = v119;
        int v169 = v120;
        BlueFin::Matrix::operator-=((uint64_t)&v160, (uint64_t)v177);
        BlueFin::Matrix::operator*((uint64_t)&v160, (uint64_t)(a1 + 124), (uint64_t)&v151);
        long long v133 = v156;
        *((_OWORD *)a1 + 35) = v155;
        *((_OWORD *)a1 + 36) = v133;
        long long v134 = v158;
        *((_OWORD *)a1 + 37) = v157;
        *((_OWORD *)a1 + 38) = v134;
        long long v135 = v152;
        *double v82 = v151;
        *((_OWORD *)a1 + 32) = v135;
        long long v136 = v154;
        *((_OWORD *)a1 + 33) = v153;
        *((_OWORD *)a1 + 34) = v136;
        *((void *)a1 + 78) = v159;
        v150[0] = *(double *)v173;
        v150[1] = *(double *)v172;
        v150[2] = *(double *)v171;
        BlueFin::ned2lla((double *)&v221, v150, (double *)&v151);
        uint64_t v70 = *((void *)&v151 + 1);
        uint64_t v69 = v151;
        uint64_t v71 = v152;
        double v85 = v174 + v149;
        double v66 = *(double *)&v172[4] + v66;
        float v137 = v170[0];
        float v74 = v74 + v137;
        float v138 = v170[4];
        float v73 = v73 + v138;
        float v67 = *(double *)&v171[4] + v68;
        goto LABEL_106;
      }
      double v98 = v74;
      double v99 = -299792.458;
    }
    else
    {
      double v98 = v74;
      double v99 = 299792.458;
    }
    float v100 = v98 + v99;
    float v74 = v100;
    float v96 = v95 - v100;
    goto LABEL_95;
  }
  double v85 = v149;
LABEL_106:
  *((void *)a1 + 2) = v69;
  *((void *)a1 + 3) = v70;
  *((void *)a1 + 4) = v71;
  float v139 = sqrt(*((double *)a1 + 11) + *((double *)a1 + 28));
  float v140 = sqrt(*((double *)a1 + 45));
  *((float *)a1 + 10) = v139;
  *((float *)a1 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v140;
  float v141 = sqrt(v85 * v85 + v66 * v66);
  *((float *)a1 + 12) = v141;
  float v53 = atan2(v66, v85);
  *((float *)a1 + 13) = v53;
  *((float *)a1 + 14) = v67;
  float v142 = *((double *)a1 + 16) + *((double *)a1 + 33);
  *((float *)a1 + 15) = v142;
  a1[16] = 0;
  float v143 = *((double *)a1 + 50);
  *((float *)a1 + 17) = v143;
  *((float *)a1 + 18) = v74;
  float v144 = sqrt(*((double *)a1 + 62));
  *((float *)a1 + 19) = v73;
  *((float *)a1 + 20) = v144;
  float v145 = *((double *)a1 + 67);
  *((float *)a1 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v145;
  int v59 = 1;
LABEL_107:
  uint64_t v146 = *a4;
  *(_OWORD *)uint64_t v146 = *((_OWORD *)a1 + 1);
  *(void *)(v146 + 16) = *((void *)a1 + 4);
  *(float *)a4[1] = v53;
  *(_DWORD *)a4[3] = a1[12];
  *(_DWORD *)a4[2] = a1[18];
  if (*((unsigned char *)a3 + 65))
  {
    char v147 = (float *)a4[4];
    *char v147 = *((float *)a1 + 10) * 1.5;
    *(_DWORD *)a4[5] = a1[11];
    float v148 = *v147;
  }
  else
  {
    float v148 = *(float *)a4[4];
    if (v59)
    {
      if (v148 >= (float)(*((float *)a1 + 10) * 1.5)) {
        float v148 = *((float *)a1 + 10) * 1.5;
      }
    }
  }
  *(float *)a4[6] = v148;
}

void BlueFin::lla2ned(double *a1@<X0>, double *a2@<X1>, int a3@<W2>, double *a4@<X8>)
{
  if (a3)
  {
    BlueFin::lla2ecef(a1, (uint64_t)&v33);
    double v7 = v33;
    double v8 = v34;
    double v9 = cosval;
    BlueFin::lla2ecef(a2, (uint64_t)&v33);
    double v10 = v33;
    double v11 = v34;
    double v12 = cosval;
    v46[0] = (v7 + v33) * 0.5;
    v46[1] = (v8 + v34) * 0.5;
    v46[2] = (v9 + cosval) * 0.5;
    double v43 = 0.0;
    double v44 = 0.0;
    uint64_t v45 = 0;
    BOOL v13 = BlueFin::ecef2lla(v46, (uint64_t)&v43);
    double v14 = 0.0;
    double v15 = 0.0;
    if (v13)
    {
      double v30 = v7;
      double v16 = v44 * 0.0174532925;
      __double2 v17 = __sincos_stret(v43 * 0.0174532925);
      __double2 v18 = __sincos_stret(v16);
      double v33 = -(v17.__sinval * v18.__cosval);
      double v34 = -(v17.__sinval * v18.__sinval);
      double cosval = v17.__cosval;
      double v36 = -v18.__sinval;
      double v37 = v18.__cosval;
      uint64_t v38 = 0;
      double v39 = -(v17.__cosval * v18.__cosval);
      double v40 = -(v17.__cosval * v18.__sinval);
      uint64_t v42 = 0x300000003;
      double v41 = -v17.__sinval;
      v32[0] = v30 - v10;
      v32[1] = v8 - v11;
      *(void *)&v32[16] = 0x300000001;
      v32[2] = v9 - v12;
      BlueFin::Matrix::mult((BlueFin::Matrix *)v31, (const BlueFin::Matrix *)&v33, 1, (const BlueFin::Matrix *)v32, v30 - v10);
      double v15 = *(double *)v31;
      double v14 = *(double *)&v31[4];
    }
    double v19 = a1[2];
    double v20 = a2[2];
  }
  else
  {
    double v21 = *a1;
    double v22 = a1[1];
    double v23 = *a2;
    double v24 = a2[1];
    double v19 = a1[2];
    double v20 = a2[2];
    double v25 = ((v19 + v20) * 0.5 + 6367426.73) * 0.0174532925;
    double v26 = cos((*a1 + *a2) * 0.5 * 0.0174532925) * v25;
    double v27 = v22 - v24;
    if (v22 - v24 > 180.0 || v27 < -180.0)
    {
      double v28 = v27 / 360.0;
      if (v27 / 360.0 <= 0.0)
      {
        double v29 = 0.0;
        if (v27 / 360.0 < 0.0) {
          double v29 = ceil(v28 + -0.5);
        }
      }
      else
      {
        double v29 = floor(v28 + 0.5);
      }
      double v27 = v27 + v29 * -360.0;
    }
    double v15 = (v21 - v23) * v25;
    double v14 = v26 * v27;
  }
  *a4 = v15;
  a4[1] = v14;
  a4[2] = v20 - v19;
}

uint64_t BlueFin::Matrix::operator*@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 128) = 0;
  uint64_t v3 = *(unsigned int *)(result + 132);
  if (v3 != *(_DWORD *)(a2 + 128))
  {
    DeviceFaultNotify("glpe_matrix.cpp", 285, "operator*", (char)"bCond");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.cpp", 285, "bCond");
  }
  uint64_t v4 = *(unsigned int *)(result + 128);
  uint64_t v5 = *(unsigned int *)(a2 + 132);
  if ((int)v4 >= 1)
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      if ((int)v5 >= 1)
      {
        uint64_t v7 = 0;
        double v8 = (double *)a2;
        do
        {
          double v9 = 0.0;
          if ((int)v3 >= 1)
          {
            double v10 = (double *)result;
            double v11 = v8;
            uint64_t v12 = v3;
            do
            {
              double v13 = *v10++;
              double v14 = v13;
              double v15 = *v11;
              v11 += 4;
              double v9 = v9 + v14 * v15;
              --v12;
            }
            while (v12);
          }
          *(double *)(a3 + 32 * i + 8 * v7++) = v9;
          ++v8;
        }
        while (v7 != v5);
      }
      result += 32;
    }
  }
  *(_DWORD *)(a3 + 128) = v4;
  *(_DWORD *)(a3 + 132) = v5;
  return result;
}

uint64_t BlueFin::Matrix::operator+=(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 132);
  if (v2 != *(_DWORD *)(result + 132)
    || (uint64_t v3 = *(unsigned int *)(a2 + 128), v3 != *(_DWORD *)(result + 128)))
  {
    DeviceFaultNotify("glpe_matrix.cpp", 473, "operator+=", (char)"otMatrix.m_NbCols == m_NbCols && otMatrix.m_NbRows == m_NbRows");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.cpp", 473, "otMatrix.m_NbCols == m_NbCols && otMatrix.m_NbRows == m_NbRows");
  }
  if ((int)v3 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (double *)result;
    do
    {
      unsigned int v6 = (double *)a2;
      uint64_t v7 = v5;
      uint64_t v8 = v2;
      if ((int)v2 >= 1)
      {
        do
        {
          double v9 = *v6++;
          *uint64_t v7 = v9 + *v7;
          ++v7;
          --v8;
        }
        while (v8);
      }
      ++v4;
      v5 += 4;
      a2 += 32;
    }
    while (v4 != v3);
  }
  return result;
}

uint64_t BlueFin::Matrix::operator-=(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 132);
  if (v2 != *(_DWORD *)(result + 132)
    || (uint64_t v3 = *(unsigned int *)(a2 + 128), v3 != *(_DWORD *)(result + 128)))
  {
    DeviceFaultNotify("glpe_matrix.cpp", 500, "operator-=", (char)"otMatrix.m_NbCols == m_NbCols && otMatrix.m_NbRows == m_NbRows");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.cpp", 500, "otMatrix.m_NbCols == m_NbCols && otMatrix.m_NbRows == m_NbRows");
  }
  if ((int)v3 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (double *)result;
    do
    {
      unsigned int v6 = (double *)a2;
      uint64_t v7 = v5;
      uint64_t v8 = v2;
      if ((int)v2 >= 1)
      {
        do
        {
          double v9 = *v6++;
          *uint64_t v7 = *v7 - v9;
          ++v7;
          --v8;
        }
        while (v8);
      }
      ++v4;
      v5 += 4;
      a2 += 32;
    }
    while (v4 != v3);
  }
  return result;
}

uint64_t BlueFin::Matrix::operator/=(uint64_t result, double a2)
{
  if (a2 == 0.0)
  {
    DeviceFaultNotify("glpe_matrix.cpp", 568, "operator/=", (char)"dValue != 0.0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.cpp", 568, "dValue != 0.0");
  }
  uint64_t v2 = *(unsigned int *)(result + 128);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(unsigned int *)(result + 132);
    uint64_t v5 = (double *)result;
    double v6 = 1.0 / a2;
    do
    {
      uint64_t v7 = v5;
      uint64_t v8 = v4;
      if ((int)v4 >= 1)
      {
        do
        {
          *uint64_t v7 = v6 * *v7;
          ++v7;
          --v8;
        }
        while (v8);
      }
      ++v3;
      v5 += 4;
    }
    while (v3 != v2);
  }
  return result;
}

uint64_t BlueFin::Matrix::mult(uint64_t this, const BlueFin::Matrix *a2, const BlueFin::Matrix *a3)
{
  uint64_t v3 = *((unsigned int *)a2 + 33);
  if (v3 != *((_DWORD *)a3 + 32))
  {
    DeviceFaultNotify("glpe_matrix.cpp", 322, "mult", (char)"mLeft.m_NbCols == mRight.m_NbRows");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.cpp", 322, "mLeft.m_NbCols == mRight.m_NbRows");
  }
  uint64_t v4 = *((unsigned int *)a2 + 32);
  uint64_t v5 = *((unsigned int *)a3 + 33);
  if ((int)v4 >= 1)
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      if ((int)v5 >= 1)
      {
        uint64_t v7 = 0;
        uint64_t v8 = a3;
        do
        {
          double v9 = 0.0;
          if ((int)v3 >= 1)
          {
            double v10 = a2;
            double v11 = (double *)v8;
            uint64_t v12 = v3;
            do
            {
              double v13 = *(double *)v10;
              double v10 = (const BlueFin::Matrix *)((char *)v10 + 8);
              double v14 = v13;
              double v15 = *v11;
              v11 += 4;
              double v9 = v9 + v14 * v15;
              --v12;
            }
            while (v12);
          }
          *(double *)(this + 32 * i + 8 * v7++) = v9;
          uint64_t v8 = (const BlueFin::Matrix *)((char *)v8 + 8);
        }
        while (v7 != v5);
      }
      a2 = (const BlueFin::Matrix *)((char *)a2 + 32);
    }
  }
  *(_DWORD *)(this + 128) = v4;
  *(_DWORD *)(this + 132) = v5;
  return this;
}

uint64_t BlueFin::GlPeHula::GetSensorValidityMask@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = this;
  *(void *)(a2 + 12) = 0;
  *(void *)a2 = a2 + 12;
  *(unsigned char *)(a2 + 8) = 5;
  *(void *)(a2 + 20) = 0;
  *(_DWORD *)(a2 + 28) = 0;
  if (*(unsigned char *)(this + 1024))
  {
    BlueFin::GlPeExtSensorSet::GlPeExtSensorSet((uint64_t)v8, 0, 1u, 2u, 0x22u, 0x22u, 0x22u);
    this = BlueFin::GlSetBase::operator|=(a2, (uint64_t)v8);
  }
  if (*(unsigned char *)(v2 + 584))
  {
    BlueFin::GlPeExtSensorSet::GlPeExtSensorSet((uint64_t)v8, 3u, 4u, 5u, 0x1Au, 0x1Bu, 0x1Cu);
    this = BlueFin::GlSetBase::operator|=(a2, (uint64_t)v8);
  }
  if (*(unsigned char *)(v2 + 3008)) {
    **(_DWORD **)a2 |= 0x400u;
  }
  if (*(unsigned char *)(v2 + 1161)) {
    **(_DWORD **)a2 |= 0x800u;
  }
  if (*(unsigned char *)(v2 + 1225)) {
    **(_DWORD **)a2 |= 0x2000u;
  }
  if (*(unsigned char *)(v2 + 1281)) {
    **(_DWORD **)a2 |= 0x4000u;
  }
  if (*(unsigned char *)(v2 + 2985)) {
    **(_DWORD **)a2 |= 0x8000u;
  }
  if (*(unsigned char *)(v2 + 4177)) {
    **(_DWORD **)a2 |= 0x10000u;
  }
  if (*(unsigned char *)(v2 + 4224)) {
    **(_DWORD **)a2 |= 0x20000u;
  }
  if (*(unsigned char *)(v2 + 3216)) {
    **(_DWORD **)a2 |= 0x800000u;
  }
  int v4 = *(_DWORD *)(v2 + 4200);
  if (v4)
  {
    uint64_t v5 = *(void *)a2;
    **(_DWORD **)a2 |= 0x40000u;
    if (v4 == 2) {
      *(_DWORD *)(v5 + 4) |= 8u;
    }
  }
  int v6 = *(_DWORD *)(v2 + 4264);
  if (v6)
  {
    uint64_t v7 = *(void *)a2;
    **(_DWORD **)a2 |= 0x80000u;
    if (v6 == 2) {
      *(_DWORD *)(v7 + 4) |= 0x10u;
    }
  }
  if (*(unsigned char *)(v2 + 3160)) {
    **(_DWORD **)a2 |= 0x400000u;
  }
  if (*(unsigned char *)(v2 + 3161)) {
    **(_DWORD **)a2 |= 0x1000000u;
  }
  return this;
}

void BlueFin::GlPeLsq::AddPMeas(BlueFin::GlPeLsq *this, BlueFin::SKFVector *a2, BlueFin::SKFVector *a3, BlueFin::SKFVector *a4, BlueFin::BigMatrix *a5, double a6)
{
  if (*((_DWORD *)this + 2) >= *((_DWORD *)this + 3))
  {
    DeviceFaultNotify("glpe_lsq.cpp", 1762, "AddPMeas", (char)"rotz.GetLen() < rotz.GetMaxLen()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_lsq.cpp", 1762, "rotz.GetLen() < rotz.GetMaxLen()");
  }
  int v6 = (int)a5;
  BlueFin::SKFVector::AddLen((uint64_t)this);
  *(void *)(*(void *)this + 8 * *((int *)this + 2)) = 0;
  BlueFin::SKFVector::AddLen((uint64_t)a2);
  *(void *)(*(void *)a2 + 8 * *((int *)a2 + 2)) = 0;
  BlueFin::SKFVector::AddLen((uint64_t)a3);
  *(double *)(*(void *)a3 + 8 * *((int *)a3 + 2)) = a6;
  BlueFin::BigMatrix::AddRow(a4);
  *(void *)(*(void *)(*((void *)a4 + 1) + 8 * *((int *)a4 + 4)) + 8 * v6) = 0x3FF0000000000000;
}

double BlueFin::GlPeNavUtil::ComputeBc(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  char v8 = a5;
  long long v15 = *a3;
  uint64_t v16 = *((void *)a3 + 2);
  double v9 = 0.0;
  BlueFin::GlPeNavUtil::ComputeRangeResidVec(a1, a2, (uint64_t)&v15, a4, a5, a6, a7, 1, a8, 1);
  if ((v8 & 1) == 0 && v18)
  {
    double v10 = (double *)(v17 + 8);
    double v11 = 0.0;
    uint64_t v12 = v18;
    do
    {
      double v13 = *v10++;
      double v11 = v11 + v13;
      --v12;
    }
    while (v12);
    return v11 / (double)v18;
  }
  return v9;
}

void BlueFin::GlPeNavUtil::ComputeRangeResidVec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10)
{
  uint64_t v10 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  int v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v31 = v10;
  double v33 = v32;
  v75[695] = *MEMORY[0x263EF8340];
  if (v34) {
    int v35 = 1225;
  }
  else {
    int v35 = 1217;
  }
  if (!v12) {
    v35 &= ~0x40u;
  }
  if (a10) {
    int v36 = v35;
  }
  else {
    int v36 = v35 & 0x3FF;
  }
  long long v49 = v11;
  if (BlueFin::GlSetBase::Cnt(v11) >= 0x65)
  {
    uint64_t v45 = "otThisSignals.Cnt() <= GL_CHANNELS";
    DeviceFaultNotify("glpe_navutil.cpp", 736, "ComputeRangeResidVec", (char)"otThisSignals.Cnt() <= GL_CHANNELS");
    float64x2_t v46 = "glpe_navutil.cpp";
    int v47 = 736;
    goto LABEL_27;
  }
  double v37 = v75;
  uint64_t v38 = 100;
  do
  {
    *((unsigned char *)v37 - 8) = 0;
    *((_DWORD *)v37 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = -1;
    *double v37 = 575;
    v37 += 28;
    --v38;
  }
  while (v38);
  LODWORD(v7BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *((unsigned __int8 *)v49 + 8);
  memcpy(&v72, *(const void **)v49, 4 * v71);
  HIDWORD(v7BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v72;
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v71);
  uint64_t v48 = v14;
  int v39 = 0;
  if (BYTE1(v71) != v71)
  {
    while (1)
    {
      __int16 v40 = WORD1(v71);
      if (WORD1(v71) >= 0x23FuLL) {
        break;
      }
      double v41 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * WORD1(v71);
      char v42 = *v41;
      LODWORD(v4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v41[1];
      LOBYTE(v68) = v42;
      HIDWORD(v68) = v41;
      LOWORD(v69) = WORD1(v71);
      if (BlueFin::GlPeNavUtil::PackSkfMeas_PR_SignalId(v31, (uint64_t)&v74[7 * v39], (BlueFin::GlSignalId *)&v68, a9))
      {
        if (LODWORD(v74[7 * v39 + 3]) == -1) {
          v36 |= 0x40000u;
        }
        ++v39;
      }
      else
      {
        BlueFin::GlSetBase::Remove((uint64_t)v49, v40);
      }
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v71);
      if (BYTE1(v71) == v71) {
        goto LABEL_20;
      }
    }
    uint64_t v45 = "usIndex < NUM_SIGNAL_IDS";
    DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
    float64x2_t v46 = "glsignalid.h";
    int v47 = 577;
LABEL_27:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v46, v47, v45);
  }
LABEL_20:
  uint64_t v71 = v73;
  uint64_t v72 = 0x6400000000;
  bzero(v73, 0x328uLL);
  double v68 = v70;
  uint64_t v69 = 0x6400000000;
  bzero(v70, 0x328uLL);
  v66[0] = v67;
  v66[1] = 0x6400000000;
  bzero(v67, 0x328uLL);
  v54[0] = v66;
  v54[1] = v20;
  float v54[2] = v30;
  int v55 = v18;
  int v56 = 0;
  int v57 = v36;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v58 = 0;
  uint64_t v61 = v28;
  uint64_t v62 = v26;
  uint64_t v63 = v24;
  uint64_t v64 = v22;
  long long v65 = xmmword_263BBC830;
  v53[0] = &v71;
  v53[1] = &v68;
  v53[2] = 0;
  v53[3] = 0;
  v53[4] = v48;
  v53[5] = v16;
  memset(&v53[6], 0, 24);
  int v50 = v52;
  char v51 = 4;
  v52[1] = 0;
  v52[0] = 0;
  BlueFin::GlSetBase::SetAllLower(&v50, v39);
  int v43 = (*(uint64_t (**)(void, void *, void *, void *, void **))(**(void **)(v31 + 16) + 16))(*(void *)(v31 + 16), v54, v53, v74, &v50);
  v33[1] = 0x6400000000;
  bzero(v33 + 2, 0x328uLL);
  *double v33 = v33 + 2;
  if (v43)
  {
    bzero(*(void **)v49, ((4 * *((unsigned __int8 *)v49 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  }
  else if ((_BYTE)v39)
  {
    uint64_t v44 = 1;
    do
    {
      BlueFin::SKFVector::AddLen((uint64_t)v33);
      *(double *)(*v33 + 8 * v44) = *(double *)&v71[8 * v44] - *(double *)&v68[8 * v44];
      ++v44;
    }
    while (v44 - v39 != 1);
  }
}

uint64_t BlueFin::SKFVector::AddLen(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 8);
  if (v1 >= *(_DWORD *)(this + 12))
  {
    DeviceFaultNotify("glpe_matrix.h", 443, "AddLen", (char)"m_Len < m_MaxLen");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.h", 443, "m_Len < m_MaxLen");
  }
  *(_DWORD *)(this + 8) = v1 + 1;
  return this;
}

BOOL BlueFin::GlPeNavUtil::PackSkfMeas_PR_SignalId(uint64_t a1, uint64_t a2, BlueFin::GlSignalId *a3, char a4)
{
  uint64_t v5 = *(BlueFin::GlPeMsmtMgr **)(a1 + 8);
  uint64_t v6 = (1 << (*((_WORD *)a3 + 4) & 0x1F)) & *(unsigned int *)(*((void *)v5 + 1) + 4 * (*((__int16 *)a3 + 4) >> 5));
  if (v6)
  {
    int v10 = -7200001;
    uint64_t PeMeas = BlueFin::GlPeMsmtMgr::GetPeMeas(v5, a3, 0);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 24) = -1;
    *(_WORD *)(a2 + 48) = 0;
    *(unsigned char *)(a2 + 50) = 0;
    *(unsigned char *)(a2 + 32) = 0;
    *(_DWORD *)(a2 + 36) = -1;
    *(_WORD *)(a2 + 40) = 575;
    *(_DWORD *)(a2 + 44) = 0;
    int v12 = *(BlueFin::GlPeMsmtMgr **)(a1 + 8);
    int v13 = *(_DWORD *)v12;
    *(_DWORD *)(a2 + 16) = *(_DWORD *)v12;
    if (v13 != -7200001)
    {
      int v14 = *((_DWORD *)v12 + 1);
      int v15 = v13 - v14;
      if (v14 == -7200001) {
        int v10 = -7200001;
      }
      else {
        int v10 = v15;
      }
    }
    *(_DWORD *)(a2 + 20) = v10;
    if ((BlueFin::GlSignalId *)(a2 + 32) != a3)
    {
      *(unsigned char *)(a2 + 32) = *(unsigned char *)a3;
      *(_DWORD *)(a2 + 36) = *((_DWORD *)a3 + 1);
      *(_WORD *)(a2 + 40) = *((_WORD *)a3 + 4);
    }
    if ((a4 & 1) != 0 || *(unsigned char *)(PeMeas + 264))
    {
      *(double *)a2 = *(double *)PeMeas * 299792.458;
      double v17 = *((float *)BlueFin::GlPeMsmtMgr::GetMeMeas(v12, a3, 0, 0) + 22) * 299792458.0;
      uint64_t v16 = (double *)a2;
    }
    else
    {
      uint64_t v16 = (double *)(PeMeas + 32);
      double v17 = *(double *)(PeMeas + 40);
    }
    *(double *)a2 = *v16 + 0.0;
    *(double *)(a2 + 8) = v17;
    *(unsigned char *)(a2 + 48) = 1;
    *(void *)(a2 + 24) = *(void *)(PeMeas + 64);
    *(unsigned char *)(a2 + 49) = *(unsigned char *)(PeMeas + 264);
  }
  return v6 != 0;
}

void BlueFin::BigMatrix::AddRow(BlueFin::BigMatrix *this)
{
  int v1 = *((_DWORD *)this + 4);
  if (v1 >= *((_DWORD *)this + 6))
  {
    DeviceFaultNotify("glpe_matrix.cpp", 965, "AddRow", (char)"bCond");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.cpp", 965, "bCond");
  }
  int v2 = v1 + 1;
  uint64_t v3 = *(void *)(*((void *)this + 1) + 8 * v2);
  *((_DWORD *)this + 4) = v2;
  size_t v4 = 8 * *((int *)this + 5);

  bzero((void *)(v3 + 8), v4);
}

uint64_t BlueFin::GlReqSm::DistributeFixStatus(uint64_t a1, int a2, uint64_t a3, BlueFin::GlSetBase *a4)
{
  long long v65 = (unsigned char *)(a1 + 54026);
  uint64_t v7 = (void *)(a1 + 33136);
  uint64_t v8 = a1 + 31548;
  BOOL v69 = 0;
  double v9 = (BlueFin::GlPeReqBag *)(a1 + 10880);
  if (BlueFin::GlPeReqBag::NeedInterpolation((BlueFin::GlPeReqBag *)(a1 + 10880), &v69))
  {
    if (!a3)
    {
      DeviceFaultNotify("glreqsm.cpp", 2128, "InterpolateFixStatus", (char)"potFixStatus != nullptr");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glreqsm.cpp", 2128, "potFixStatus != nullptr");
    }
    BOOL v67 = v69;
    long long v86 = 0u;
    long long v87 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    long long v83 = 0u;
    unsigned int v10 = *(_DWORD *)v8 / 0x12Eu - 1;
    while (1)
    {
      unsigned int v11 = v10;
      if (v10 == -1) {
        break;
      }
      BOOL PreviousPosition = BlueFin::GlPeReqBag::ReadPreviousPosition((uint64_t)v9, v10, (uint64_t)&v83);
      unsigned int v10 = v11 - 1;
      if (PreviousPosition && BYTE1(v83))
      {
        if (!*(unsigned char *)(a3 + 4048) || *(double *)(a3 + 4144) >= 50.0)
        {
          if (!v67) {
            BlueFin::GlPeReqBag::ResetInterpolation((uint64_t)v9);
          }
          goto LABEL_75;
        }
        break;
      }
    }
    BlueFin::GlPeReqBag::ResetInterpolation((uint64_t)v9);
    long long v81 = 0uLL;
    uint64_t v82 = 0;
    long long v13 = *(_OWORD *)(a3 + 4072);
    uint64_t v80 = *(void *)(a3 + 4088);
    long long v86 = 0u;
    long long v87 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    long long v83 = 0u;
    long long v78 = 0u;
    long long v79 = v13;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v75 = 0u;
    if (*(_DWORD *)v8 >= 0x12Eu)
    {
      uint64_t v63 = v7;
      uint64_t v64 = a3;
      uint64_t v62 = a4;
      unsigned int v14 = 0;
      unsigned int v15 = *(_DWORD *)v8 / 0x12Eu - 1;
      while (1)
      {
        if (BlueFin::GlPeReqBag::ReadPreviousPosition((uint64_t)v9, v15, (uint64_t)&v83))
        {
          unsigned int v16 = *(_DWORD *)(a1 + 14132) + *(_DWORD *)a3 - DWORD2(v83);
          unsigned int v17 = v16 / 0x3E8;
          BOOL v19 = v16 > 0x3E7 && v16 % 0x3E8 < 0x1F4;
          unsigned int v14 = v17 - v19;
          if (v11 == -1)
          {
LABEL_21:
            BOOL v34 = v11 == -1;
            uint64_t v7 = v63;
            uint64_t v20 = (unsigned __int8 *)(a1 + 31077);
            if (!v34) {
              goto LABEL_75;
            }
            double v21 = 0.0;
            BOOL v22 = !v14 || v14 >= 0x14;
            double v23 = 0.0;
            if (v22) {
              goto LABEL_75;
            }
            goto LABEL_36;
          }
          if (BYTE1(v83)) {
            break;
          }
        }
        if (--v15 == -1) {
          goto LABEL_21;
        }
      }
      long long v81 = v84;
      uint64_t v82 = v85;
      double v23 = 0.0;
      if (BYTE2(v83))
      {
        double v21 = 0.0;
        uint64_t v7 = v63;
        uint64_t v20 = (unsigned __int8 *)(a1 + 31077);
        if (BYTE3(v83))
        {
          double v24 = *((double *)&v85 + 1) / 1.9438445;
          __double2 v25 = __sincos_stret(*(double *)&v86 * 0.0174532925);
          double v23 = v25.__cosval * v24;
          double v21 = v25.__sinval * v24;
        }
      }
      else
      {
        double v21 = 0.0;
        uint64_t v7 = v63;
        uint64_t v20 = (unsigned __int8 *)(a1 + 31077);
      }
      if (v14 - 1 <= 0x12)
      {
LABEL_36:
        int v26 = v20[1];
        if (v26 | BYTE5(v83))
        {
          BYTE6(v75) = 1;
          if (v26 && BYTE5(v83))
          {
            float v27 = (float)(*(float *)(v20 + 51) + *((float *)&v87 + 2)) * 0.5;
          }
          else if (BYTE5(v83))
          {
            float v27 = *((float *)&v87 + 2);
          }
          else
          {
            float v27 = *(float *)(v20 + 51);
          }
          *((float *)&v78 + 2) = v27;
        }
        int v28 = *v20;
        if (v28 | BYTE4(v83))
        {
          BYTE5(v75) = 1;
          if (v28 && BYTE4(v83))
          {
            float v66 = (float)(*(float *)(v20 + 39) - *((float *)&v86 + 3)) / (float)v14;
            uint64_t v30 = v87;
            unint64_t v29 = (*(void *)(a1 + 31120) - (void)v87) / (unint64_t)v14;
            *((float *)&v77 + 2) = (float)(*(float *)(v20 + 35) + *((float *)&v86 + 2)) * 0.5;
            HIDWORD(v77) = HIDWORD(v86);
          }
          else
          {
            unint64_t v29 = 0;
            if (BYTE4(v83))
            {
              float v66 = *((float *)&v86 + 2);
              *((void *)&v77 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *((void *)&v86 + 1);
              uint64_t v30 = v87;
            }
            else
            {
              float v66 = -COERCE_FLOAT(*(void *)(a1 + 31112));
              *((void *)&v77 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *(void *)(a1 + 31112);
              uint64_t v30 = *(void *)(a1 + 31120);
            }
          }
          *(void *)&long long v78 = v30;
        }
        else
        {
          unint64_t v29 = 0;
          float v66 = 0.0;
        }
        BlueFin::lla2ned((double *)&v79, (double *)&v81, 0, &v72);
        double v31 = (double)(v14 + 1);
        double v32 = v72 / v31;
        double v33 = v73 / v31;
        if (BYTE2(v83)) {
          BOOL v34 = BYTE3(v83) == 0;
        }
        else {
          BOOL v34 = 1;
        }
        int v35 = v34;
        int v36 = DWORD2(v83) + 1000;
        int v37 = -1000 * v14;
        double v38 = v74 / v31;
        double v39 = 1.0;
        do
        {
          *((float *)&v77 + 3) = v66 + *((float *)&v77 + 3);
          *(void *)&long long v78 = v78 + v29;
          double v40 = 1.0 / v39;
          if (v35) {
            double v40 = 0.0;
          }
          double v72 = (v32 * (1.0 - v40) + v23 * v40) * v39;
          double v73 = (v33 * (1.0 - v40) + v21 * v40) * v39;
          double v74 = v38 * v39;
          BlueFin::ned2lla((double *)&v81, &v72, (double *)&v70);
          uint64_t v41 = *(void *)(a1 + 31800);
          uint64_t v42 = v71;
          *(_OWORD *)(v41 + 4072) = v70;
          *(void *)(v41 + 4088) = v42;
          unsigned int v43 = v37 + *(_DWORD *)v41;
          *(_DWORD *)uint64_t v41 = v43;
          double v44 = (double)(int)v43;
          if (v43 <= 0xFF9222FE) {
            double v44 = (double)v43;
          }
          BlueFin::GlPeTimeManager::lmsToLegacyGlStruct(*(unsigned int **)(v41 + 7840), 2u, 1, v41 + 4, v44);
          BlueFin::GlPeReqBag::SetInterPolateFixStatus((uint64_t)v9, *(void *)(a1 + 31800));
          if (a2)
          {
            uint64_t v45 = *(void *)(*(void *)(a1 + 6304) + 92440);
            if (v45) {
              LOBYTE(v45) = *(unsigned char *)(v45 + 1076) != 0;
            }
            *long long v65 = v45;
            BlueFin::GlReqSm::GenerateNMEA(a1);
            if (*(unsigned char *)(v8 + 492))
            {
              *(unsigned char *)(v8 + 492) = 0;
              *uint64_t v63 = 0;
            }
            int v46 = *(_DWORD *)(v8 + 476);
            *(_DWORD *)(v8 + 476) = 1;
            if (v46 != 1) {
              *(unsigned char *)(v8 + 492) = 1;
            }
          }
          double v39 = v39 + 1.0;
          v36 += 1000;
          v37 += 1000;
          --v14;
        }
        while (v14);
        uint64_t v47 = *(void *)(a1 + 31800);
        uint64_t v48 = v80;
        *(_OWORD *)(v47 + 4072) = v79;
        *(void *)(v47 + 4088) = v48;
        double v49 = (double)*(int *)v47;
        if (*(_DWORD *)v47 <= 0xFF9222FE) {
          double v49 = (double)*(unsigned int *)v47;
        }
        BlueFin::GlPeTimeManager::lmsToLegacyGlStruct(*(unsigned int **)(v47 + 7840), 2u, 1, v47 + 4, v49);
        a4 = v62;
        uint64_t v7 = v63;
        a3 = v64;
      }
    }
  }
LABEL_75:
  uint64_t result = BlueFin::GlPeReqBag::NeedInterpolation(v9, &v69);
  if ((result & 1) == 0)
  {
    if (a2)
    {
      uint64_t v51 = *(void *)(*(void *)(a1 + 6304) + 92440);
      if (v51) {
        LOBYTE(v5BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *(unsigned char *)(v51 + 1076) != 0;
      }
      *long long v65 = v51;
      BlueFin::GlReqSm::GenerateNMEA(a1);
      if (*(unsigned char *)(v8 + 492))
      {
        *(unsigned char *)(v8 + 492) = 0;
        *uint64_t v7 = 0;
      }
      int v52 = *(_DWORD *)(v8 + 476);
      *(_DWORD *)(v8 + 476) = 1;
      if (v52 != 1) {
        *(unsigned char *)(v8 + 492) = 1;
      }
    }
    BlueFin::GlPeReqBag::SetFixStatus((uint64_t)v9, a3);
    if ((*(unsigned char *)(a1 + 12193) & 0x80) != 0)
    {
      GlCustomLog(14, "Active Request: GL_REQ_GNSS_MEAS_DATA\n");
      uint64_t v55 = 0;
      uint64_t v56 = v7[7];
      while (1)
      {
        uint64_t v57 = *(void *)((char *)v9 + v55);
        if (v57)
        {
          if (*(_DWORD *)(*(void *)(v57 + 8) + 16) == 15) {
            break;
          }
        }
        v55 += 8;
        if (v55 == 576)
        {
          uint64_t v58 = 0;
          goto LABEL_92;
        }
      }
      uint64_t v58 = v57 + 64;
LABEL_92:
      uint64_t v59 = *(void (**)(void, uint64_t, uint64_t))(v56 + 160);
      if (v59) {
        v59(*(void *)(v56 + 8), a3, v58);
      }
    }
    else
    {
      uint64_t v53 = v7[7];
      float v54 = *(void (**)(void, uint64_t, void))(v53 + 160);
      if (v54) {
        v54(*(void *)(v53 + 8), a3, 0);
      }
    }
    uint64_t v60 = v7[7];
    uint64_t v61 = *(void (**)(void, uint64_t))(v60 + 216);
    if (v61) {
      v61(*(void *)(v60 + 8), *(void *)(a1 + 6320) + 56520);
    }
    uint64_t result = BlueFin::GlSetBase::HasAny(a4);
    if ((result & 1) == 0) {
      return BlueFin::GlPeReqBag::InitializeReqIdReportingSet((uint64_t)v9, a3, (uint64_t)a4);
    }
  }
  return result;
}

BOOL BlueFin::GlPeReqBag::NeedInterpolation(BlueFin::GlPeReqBag *this, BOOL *a2)
{
  unint64_t v4 = 0;
  *a2 = 0;
  BOOL v5 = 1;
  while (1)
  {
    uint64_t v6 = *((void *)this + v4);
    if (v6)
    {
      if ((*(unsigned int (**)(void))(**(void **)(v6 + 8) + 496))(*(void *)(v6 + 8))) {
        break;
      }
    }
    BOOL v5 = v4++ < 0x47;
    if (v4 == 72) {
      return 0;
    }
  }
  uint64_t v7 = *(void *)(*((void *)this + v4) + 8);
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 472))(v7);
  return v5;
}

uint64_t BlueFin::GlRequestImpl::GetInterpolationNeeded(BlueFin::GlRequestImpl *this)
{
  return 0;
}

uint64_t BlueFin::GlPeReqBag::SetFixStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  unint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = v2;
  uint64_t v113 = *MEMORY[0x263EF8340];
  double v73 = (char *)(v5 + 4192);
  long long v78 = &unk_270EC4BC0;
  long long v79 = (unsigned char *)(v2 + 3233);
  uint64_t v8 = v2 + 20128;
  char v80 = *(unsigned char *)(v2 + 3233);
  *(unsigned char *)(v2 + 3233) = 0;
  bzero(v81, 0x1CF0uLL);
  uint64_t v9 = 0;
  char v10 = 0;
  memset(v87, 248, sizeof(v87));
  long long v88 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  long long v92 = 0u;
  long long v93 = 0u;
  long long v94 = 0u;
  long long v95 = 0u;
  long long v96 = 0u;
  long long v97 = 0u;
  long long v98 = 0u;
  long long v99 = 0u;
  long long v100 = 0u;
  long long v101 = 0u;
  long long v102 = 0u;
  long long v103 = 0u;
  long long v104 = 0u;
  long long v105 = 0u;
  long long v106 = 0u;
  long long v107 = 0u;
  long long v108 = 0u;
  long long v109 = 0u;
  long long v110 = 0u;
  long long v111 = 0u;
  long long v112 = 0u;
  do
  {
    uint64_t v11 = *(void *)(v7 + v9);
    if (v11)
    {
      uint64_t v12 = *(void *)(v11 + 8);
      if (*(_DWORD *)(v12 + 16) == 12) {
        v10 |= (unint64_t)*(unsigned int *)(*(void *)v4 + 4 * (*(__int16 *)(v12 + 24) >> 5)) >> (*(_WORD *)(v12 + 24) & 0x1F);
      }
    }
    v9 += 8;
  }
  while (v9 != 576);
  for (uint64_t i = 0; i != 576; i += 8)
  {
    unsigned int v14 = *(void **)(v7 + i);
    if (v14)
    {
      uint64_t v15 = v14[1];
      if (!BlueFin::GlSetBase::HasAny(v4)
        || (((unint64_t)*(unsigned int *)(*(void *)v4 + 4 * (*(__int16 *)(v15 + 24) >> 5)) >> (*(_WORD *)(v15 + 24) & 0x1F)) & 1) != 0
        || (v10 & 1) != 0 && *(_DWORD *)(v15 + 16) == 12)
      {
        (*(void (**)(void *, uint64_t))(*v14 + 24))(v14, v6);
      }
      if (*(_DWORD *)(v15 + 16) == 13)
      {
        (*(void (**)(void, _DWORD *, uint64_t))(**(void **)(v7 + i) + 248))(*(void *)(v7 + i), v81, v6);
        unsigned int v16 = *(void **)(v7 + i);
        int v17 = *(_DWORD *)(v16[1] + 172);
        if (!*(unsigned char *)(v8 + 128))
        {
          if ((v17 & 0x38) != 0) {
            continue;
          }
          if ((v17 & 8) != 0)
          {
LABEL_16:
            (*(void (**)(void *, uint64_t, void))(*v16 + 72))(v16, v8, 0);
            continue;
          }
          goto LABEL_22;
        }
        if ((v17 & 8) != 0 || (v17 & 0x38) == 0)
        {
          if ((v17 & 8) != 0) {
            goto LABEL_16;
          }
LABEL_22:
          long long v18 = *(_OWORD *)(v8 + 16);
          long long v74 = *(_OWORD *)v8;
          long long v75 = v18;
          long long v19 = *(_OWORD *)(v8 + 48);
          long long v76 = *(_OWORD *)(v8 + 32);
          long long v77 = v19;
          BYTE4(v74) = 0;
          long long v75 = 0uLL;
          *((void *)&v74 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
          LOWORD(v76) = -1;
          DWORD1(v76) = 0;
          (*(void (**)(void *, long long *, void))(*v16 + 72))(v16, &v74, 0);
          continue;
        }
      }
    }
  }
  if (v6)
  {
    uint64_t v20 = (uint64_t *)(v7 + 20640);
    unsigned int v21 = *(_DWORD *)(v8 + 540);
    if (*(_DWORD *)(v8 + 536) - v21 <= 0x12D)
    {
      uint64_t v22 = BlueFin::GlBitBuffer::Limit((uint64_t)v20, v21);
      uint64_t v20 = (uint64_t *)BlueFin::GlBitBuffer::Position(v22, 0x12Eu);
      int v23 = *(_DWORD *)(v8 + 540);
      unsigned int v24 = *(_DWORD *)(v8 + 548) + v23;
      *(_DWORD *)(v8 + 548) = v24;
      unsigned int v25 = *(_DWORD *)(v8 + 532);
      BOOL v26 = v24 >= v25;
      unsigned int v27 = v24 - v25;
      if (v26) {
        *(_DWORD *)(v8 + 548) = v27;
      }
      *(_DWORD *)(v8 + 540) = *(_DWORD *)(v8 + 536) - v23;
      *(_DWORD *)(v8 + 536) = v25;
      *(unsigned char *)(v8 + 552) = 0;
    }
    int v28 = BlueFin::GlBitBuffer::PutU(v20, 1u, 1u);
    unint64_t v29 = BlueFin::GlBitBuffer::PutU(v28, *(char *)(v6 + 4048), 1u);
    uint64_t v30 = BlueFin::GlBitBuffer::PutU(v29, *v73, 1u);
    double v31 = BlueFin::GlBitBuffer::PutU(v30, v73[16], 1u);
    double v32 = BlueFin::GlBitBuffer::PutU(v31, *(_DWORD *)(v7 + 3252) + *(_DWORD *)v6, 0x20u);
    double v33 = *(double *)(v6 + 4144);
    if (v33 > 0.0)
    {
      double v34 = 0.5;
      goto LABEL_35;
    }
    if (v33 < 0.0)
    {
      double v34 = -0.5;
LABEL_35:
      unsigned int v35 = (int)(v33 + v34);
    }
    else
    {
      unsigned int v35 = 0;
    }
    int v36 = BlueFin::GlBitBuffer::PutU(v32, v35, 0x10u);
    double v37 = *(double *)(v6 + 4072) * 23860929.0;
    if (v37 > 0.0)
    {
      double v38 = 0.5;
      goto LABEL_41;
    }
    if (v37 < 0.0)
    {
      double v38 = -0.5;
LABEL_41:
      unsigned int v39 = (int)(v37 + v38);
    }
    else
    {
      unsigned int v39 = 0;
    }
    double v40 = BlueFin::GlBitBuffer::PutU(v36, v39, 0x20u);
    double v41 = *(double *)(v6 + 4080) * 11930464.0;
    if (v41 > 0.0)
    {
      double v42 = 0.5;
      goto LABEL_47;
    }
    if (v41 < 0.0)
    {
      double v42 = -0.5;
LABEL_47:
      unsigned int v43 = (int)(v41 + v42);
    }
    else
    {
      unsigned int v43 = 0;
    }
    double v44 = BlueFin::GlBitBuffer::PutU(v40, v43, 0x20u);
    double v45 = *(double *)(v6 + 4088);
    if (v45 > 0.0)
    {
      double v46 = 0.5;
      goto LABEL_53;
    }
    if (v45 < 0.0)
    {
      double v46 = -0.5;
LABEL_53:
      int v47 = (int)(v45 + v46);
    }
    else
    {
      int v47 = 0;
    }
    uint64_t v48 = BlueFin::GlBitBuffer::PutU(v44, v47 + 0x10000, 0x10u);
    double v49 = *(double *)(v6 + 4200) * 63.0;
    if (v49 > 0.0)
    {
      double v50 = 0.5;
      goto LABEL_59;
    }
    if (v49 < 0.0)
    {
      double v50 = -0.5;
LABEL_59:
      unsigned int v51 = (int)(v49 + v50);
    }
    else
    {
      unsigned int v51 = 0;
    }
    int v52 = BlueFin::GlBitBuffer::PutU(v48, v51, 0x10u);
    double v53 = *(double *)(v6 + 4216) * 91.0;
    if (v53 > 0.0)
    {
      double v54 = 0.5;
      goto LABEL_65;
    }
    if (v53 < 0.0)
    {
      double v54 = -0.5;
LABEL_65:
      int v55 = (int)(v53 + v54);
    }
    else
    {
      int v55 = 0;
    }
    uint64_t v56 = BlueFin::GlBitBuffer::PutU(v52, v55 + 0x10000, 0x10u);
    uint64_t v57 = BlueFin::GlBitBuffer::PutU(v56, *(unsigned __int8 *)(v8 + 70), 1u);
    uint64_t v58 = BlueFin::GlBitBuffer::PutU(v57, *(unsigned __int8 *)(v8 + 69), 1u);
    float v59 = *(float *)(v8 + 104) * 100.0;
    double v60 = v59;
    if (v59 > 0.0)
    {
      double v61 = 0.5;
      goto LABEL_71;
    }
    if (v59 < 0.0)
    {
      double v61 = -0.5;
LABEL_71:
      unsigned int v62 = (int)(v60 + v61);
    }
    else
    {
      unsigned int v62 = 0;
    }
    uint64_t v63 = BlueFin::GlBitBuffer::PutU(v58, v62, 0x10u);
    uint64_t v64 = BlueFin::GlBitBuffer::PutU(v63, *(float *)(v8 + 108), 0x20u);
    long long v65 = BlueFin::GlBitBuffer::PutU(v64, *(_DWORD *)(v7 + 20244), 0x20u);
    float v66 = BlueFin::GlBitBuffer::PutU(v65, *(_DWORD *)(v7 + 20240), 0x20u);
    float v67 = *(float *)(v8 + 120) * 1000.0;
    double v68 = v67;
    if (v67 > 0.0)
    {
      double v69 = 0.5;
      goto LABEL_77;
    }
    if (v67 < 0.0)
    {
      double v69 = -0.5;
LABEL_77:
      int v70 = (int)(v68 + v69);
    }
    else
    {
      int v70 = 0;
    }
    BlueFin::GlBitBuffer::PutU(v66, v70 + 2000000, 0x18u);
    GlCustomLog(15, "AppendPreviousPosition %d\n", *(_DWORD *)v6);
  }
  if (*(unsigned char *)(v8 + 128))
  {
    *(_OWORD *)(v8 + 32) = 0u;
    *(_OWORD *)(v8 + 48) = 0u;
    *(_OWORD *)uint64_t v8 = 0u;
    *(_OWORD *)(v8 + 16) = 0u;
    *(unsigned char *)(v8 + 128) = 0;
  }
  *(unsigned char *)(v8 + 4) = v82 != 0;
  *(void *)(v7 + 20136) = v83;
  *(_OWORD *)(v7 + 20144) = v84;
  uint64_t result = BlueFin::GlPeReqBag::GetAvgOfTop4Cn0((uint64_t)v81);
  *(_WORD *)(v8 + 32) = result;
  *(_DWORD *)(v8 + 36) = 0;
  if (v85)
  {
    float v72 = v86 / 1.9438445;
    *(float *)(v8 + 36) = v72;
  }
  *(_DWORD *)uint64_t v8 = *(_DWORD *)(v7 + 3252) + v81[0];
  *(unsigned char *)(v8 + 128) = 1;
  *long long v79 = v80;
  return result;
}

void sub_2639919C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unsigned char *a20,char a21)
{
  *a20 = a21;
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlPeReqBag::GetAvgOfTop4Cn0(uint64_t a1)
{
  v17[1] = *(int16x4_t *)MEMORY[0x263EF8340];
  v17[0] = (int16x4_t)-1;
  int v1 = *(unsigned __int16 *)(a1 + 44);
  if ((__int16)v1 >= 1)
  {
    uint64_t v2 = 0;
    unsigned int v3 = v1 - 1;
    if (v3 >= 0x63) {
      unsigned int v3 = 99;
    }
    uint64_t v4 = v3 + 1;
    while (1)
    {
      uint64_t v5 = a1 + 40 * v2;
      if (*(unsigned __int8 *)(v5 + 50) <= 7u && *(unsigned char *)(a1 + 40 * v2 + 51) && *(unsigned char *)(v5 + 48)) {
        break;
      }
LABEL_21:
      if (++v2 == v4) {
        goto LABEL_22;
      }
    }
    float v6 = *(float *)(a1 + 40 * v2 + 68);
    double v7 = v6;
    if (v6 <= 0.0)
    {
      if (v6 >= 0.0)
      {
        LOWORD(v9) = 0;
        goto LABEL_14;
      }
      double v8 = v7 + -0.5;
    }
    else
    {
      double v8 = v7 + 0.5;
    }
    int v9 = (int)v8;
LABEL_14:
    for (uint64_t i = 0; i != 4; ++i)
    {
      int v11 = v17[0].i16[i];
      if ((__int16)v9 <= v11) {
        __int16 v12 = v17[0].i16[i];
      }
      else {
        __int16 v12 = v9;
      }
      v17[0].i16[i] = v12;
      if ((__int16)v9 >= v11) {
        LOWORD(v9) = v11;
      }
    }
    goto LABEL_21;
  }
LABEL_22:
  int8x8_t v13 = (int8x8_t)vcgtz_s16(v17[0]);
  if (vmaxv_u16((uint16x4_t)v13))
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)(vaddv_s16((int16x4_t)vand_s8(v13, (int8x8_t)0x8000400020001)) & 0xF));
    v14.i16[0] = vaddlv_u8(v14);
    int v15 = vaddv_s16(vmax_s16(v17[0], 0)) / v14.i32[0];
  }
  else
  {
    LOWORD(v15) = -1;
  }
  return (__int16)v15;
}

uint64_t BlueFin::GlReqSm::GenerateNMEA(uint64_t a1)
{
  uint64_t v2 = (int *)(a1 + 32024);
  uint64_t v3 = *(void *)(*(void *)(a1 + 6304) + 92440);
  if (v3) {
    LOBYTE(v3) = *(unsigned char *)(v3 + 1076) != 0;
  }
  *(unsigned char *)(a1 + 54026) = v3;
  uint64_t result = BlueFin::GlPeReqBag::GenerateNMEA(a1 + 10880, a1 + 31808);
  uint64_t v5 = *(void *)(a1 + 6320) + 56400;
  *(void *)(v5 + 80) = 0;
  *(void *)(v5 + 88) = 0;
  *(_DWORD *)(v5 + 104) = 0;
  *(void *)(v5 + 96) = 0;
  if (*((unsigned char *)v2 + 16))
  {
    *((unsigned char *)v2 + 16) = 0;
    *((void *)v2 + 139) = 0;
  }
  int v6 = *v2;
  int *v2 = 1;
  if (v6 != 1) {
    *((unsigned char *)v2 + 16) = 1;
  }
  return result;
}

uint64_t BlueFin::GlPeRqHdlrGnssMeasData::SetFixStatus(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = (_DWORD *)(a1 + 175680);
  uint64_t v5 = *(void **)(a1 + 8);
  if (*(_DWORD *)(a1 + 175688))
  {
    unsigned int v6 = *v4 + 300;
    uint64_t result = (*(uint64_t (**)(void))(*v5 + 184))(*(void *)(a1 + 8));
    if (v6 <= result) {
      return result;
    }
    int v8 = v4[2] + 1;
  }
  else
  {
    int v8 = 1;
  }
  v4[2] = v8;
  unsigned int v9 = *a2;
  v4[1] = *a2;
  uint64_t v10 = *(unsigned int *)(a1 + 68);
  if ((int)v10 >= 1)
  {
    for (uint64_t i = 0; i != v10; ++i)
    {
      if (*(unsigned char *)(a1 + 392 * i + 82) == 3)
      {
        uint64_t v12 = 0;
        uint64_t v13 = a1 + 392 * i;
        __int16 v16 = *(_WORD *)(v13 + 80);
        uint8x8_t v14 = (_WORD *)(v13 + 80);
        __int16 v15 = v16;
        unsigned __int8 v17 = v16 - 41;
        while (BYTE1(a2[v12 + 12]) != v17 || LOWORD(a2[v12 + 13]) - 1 > 0x59)
        {
          v12 += 10;
          if (v12 == 1000) {
            goto LABEL_14;
          }
        }
        *uint8x8_t v14 = v15 | (HIBYTE(a2[v12 + 12]) << 8);
      }
LABEL_14:
      ;
    }
  }
  long long v18 = *(unsigned int **)(*(void *)(a1 + 56) + 8);
  if (v18[644])
  {
    long long v19 = (_WORD *)(a1 + 39276);
    double v31 = &off_270EBC600;
    uint64_t v32 = 0;
    BlueFin::GlPeTimeManager::GetTime(v18, v9, 1, (uint64_t)v30);
    BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v30, (BlueFin::GlGpsTime *)&v31);
    double v21 = v20;
    unint64_t v22 = ((unsigned int (*)(void))v31[4])(&v31) / 0x93A80uLL;
    __n128 v23 = ((__n128 (*)(void))v31[4])(&v31);
    v23.n128_u32[0] = v32;
    unint64_t v25 = 0x41CDCD6500000000;
    *(void *)(a1 + 39312) = 0;
    *(double *)(a1 + 39320) = v21 * 1000.0;
    int64_t v26 = -604800000000000 * v22
        - 1000000000 * (v24 % 0x93A80)
        - (unint64_t)((double)v23.n128_u64[0] * 2.32830644e-10 * 1000000000.0)
        + 1000000 * *a2;
    *(void *)(a1 + 39304) = v26;
    if (v26 >= 1)
    {
      DeviceFaultNotify("glpe_reqhdlr_gnss_meas_data.cpp", 1071, "SetFixStatus", (char)"m_oMeasData.otClock.sllFullBiasNs<=0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_reqhdlr_gnss_meas_data.cpp", 1071, "m_oMeasData.otClock.sllFullBiasNs<=0");
    }
    *long long v19 = 28;
    if (*((unsigned char *)a2 + 4272))
    {
      double v27 = (double)(int)a2[1056];
      LOWORD(v25) = *((_WORD *)a2 + 2128);
      double v28 = (double)v25;
      *long long v19 = 124;
    }
    else
    {
      double v27 = 0.0;
      double v28 = 0.0;
    }
    *(double *)(a1 + 39328) = v27;
    *(double *)(a1 + 39336) = v28;
  }
  if (v5[12]) {
    BlueFin::GlPeGnssSvsInfoMgr::Report((BlueFin::GlPeGnssSvsInfoMgr *)(a1 + 108864));
  }
  if (BlueFin::GlPeRqHdlrGnssMeasData::UpdateAgcInfo((BlueFin::GlPeRqHdlrGnssMeasData *)a1))
  {
    unint64_t v29 = (void (*)(void *, uint64_t))v5[13];
    if (v29) {
      v29(v5, a1 + 39808);
    }
  }
  return BlueFin::GlRequestImplGnssMeasData::OnMeasData((uint64_t)v5, a1 + 64);
}

BOOL BlueFin::GlPeRqHdlrGnssMeasData::UpdateAgcInfo(BlueFin::GlPeRqHdlrGnssMeasData *this)
{
  int v1 = (float *)(*(void *)(*((void *)this + 7) + 88) + 32060);
  int v2 = *(_DWORD *)(*(void *)(*((void *)this + 7) + 88) + 32152);
  *((_DWORD *)this + 9952) = 0;
  if (v2)
  {
    double v3 = (float)(*v1 + v1[1]);
    *((double *)this + 4978) = v3;
    *((_DWORD *)this + 9954) = 0;
    double v4 = (float)(v1[6] + v1[7]);
    *((double *)this + 4980) = v4;
    *((_DWORD *)this + 9958) = 1;
    *((double *)this + 4982) = (float)(v1[2] + v1[3]);
    *((_DWORD *)this + 9962) = 2;
    *((double *)this + 4988) = (float)(v1[4] + v1[5]);
    *((_DWORD *)this + 9974) = 5;
    *((double *)this + 4984) = v3;
    *((_DWORD *)this + 9966) = 3;
    *((double *)this + 4986) = v4;
    *((_DWORD *)this + 9970) = 4;
    *((double *)this + 4990) = v3;
    *((_DWORD *)this + 9978) = 6;
    *((double *)this + 4992) = v4;
    *((_DWORD *)this + 9982) = 7;
    *((_DWORD *)this + 9952) = 8;
  }
  return v2 != 0;
}

uint64_t BlueFin::GlRequestImplGnssMeasData::OnMeasData(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  v5[0] = &unk_270EC5620;
  v5[1] = a2;
  if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
    uint64_t result = off_270EC5638((uint64_t)v5, 0);
  }
  double v4 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 80);
  if (v4) {
    return v4(v3, a2);
  }
  return result;
}

uint64_t BlueFin::GlDbgProxyGlReqOnGnssMeasData(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  uint64_t v4 = *(void *)(v3 + 8);

  return BlueFin::GlDbgProxy::HalGlReqOnGnssMeasData(v4, (uint64_t (**)(BlueFin::GlDbgRequest *, unsigned int *))v3, a2);
}

uint64_t BlueFin::GlPeRqHdlrPosPeriodic::SetFixStatus(uint64_t a1, uint64_t a2)
{
  uint64_t result = MEMORY[0x270FA5388](a1, a2);
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (v3)
  {
    uint64_t v4 = result;
    if (!*(unsigned char *)(result + 20))
    {
      uint64_t v5 = v3;
      uint64_t result = BlueFin::GlPeRqHdlrPosPeriodic::IsPeriodExpired(result);
      if (result)
      {
        ++*(_DWORD *)(v4 + 76);
        bzero(__dst, 0x1CF0uLL);
        memset(&__dst[926], 248, 24);
        HIDWORD(v6) = 0;
        memset(v17, 0, sizeof(v17));
        if (__dst != v5)
        {
          memcpy(__dst, v5, sizeof(__dst));
          memcpy(v17, v5 + 929, sizeof(v17));
        }
        int v7 = *(unsigned __int8 *)(v4 + 168);
        LODWORD(v6) = *(_DWORD *)(v4 + 72);
        __dst[863] = (double)v6;
        LODWORD(__dst[877]) = *(_DWORD *)(v4 + 172);
        if (v7)
        {
          ++*(_DWORD *)(v4 + 80);
          *(unsigned char *)(v4 + 64) = 0;
          *(_WORD *)(v4 + 42) = 300;
          *(unsigned char *)(*(void *)(*(void *)(v4 + 56) + 16) + 92896) = 0;
          LOBYTE(v7) = 1;
        }
        else
        {
          memset(&__dst[535], 0, 64);
          memset(&__dst[607], 0, 256);
          memset(&__dst[671], 0, 256);
        }
        LOBYTE(__dst[506]) = v7;
        if ((*(int (**)(void))(**(void **)(v4 + 8) + 168))(*(void *)(v4 + 8)) < 1)
        {
          BOOL v9 = 0;
        }
        else
        {
          int v8 = *(_DWORD *)(v4 + 76);
          BOOL v9 = v8 >= (*(int (**)(void))(**(void **)(v4 + 8) + 168))(*(void *)(v4 + 8));
        }
        if ((*(int (**)(void))(**(void **)(v4 + 8) + 160))(*(void *)(v4 + 8)) < 1)
        {
          BOOL v11 = 0;
        }
        else
        {
          int v10 = *(_DWORD *)(v4 + 80);
          BOOL v11 = v10 >= (*(int (**)(void))(**(void **)(v4 + 8) + 160))(*(void *)(v4 + 8));
        }
        uint64_t result = *(void *)(v4 + 8);
        uint64_t v12 = *(uint64_t (**)(void))(result + 48);
        if (v12) {
          uint64_t result = v12();
        }
        if (v9 || v11)
        {
          if (!*(_DWORD *)(v4 + 80)) {
            BlueFin::GlPeRqHdlrPosPeriodic::SendPglorFix(v4, (uint64_t)v5);
          }
          uint64_t v13 = 84;
          if (*(unsigned char *)(v4 + 23)) {
            uint64_t v14 = 84;
          }
          else {
            uint64_t v14 = 70;
          }
          if (v11) {
            uint64_t v15 = 84;
          }
          else {
            uint64_t v15 = 70;
          }
          if (!v9) {
            uint64_t v13 = 70;
          }
          GlCustomLog(13, "REQ Complete: TF=%c VF=%c TOUT=%c\n", v13, v15, v14);
          *(unsigned char *)(v4 + 24) = 1;
          uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v4 + 272))(v4, *(unsigned int *)(v4 + 160), *(unsigned int *)(v4 + 164));
        }
        *(_DWORD *)(v4 + 84) = *(_DWORD *)v5;
      }
    }
  }
  return result;
}

uint64_t BlueFin::GlPeGnssSvsInfoMgr::Report(BlueFin::GlPeGnssSvsInfoMgr *this)
{
  int v2 = (void *)((char *)this + 66192);
  uint64_t v3 = (_DWORD *)*((void *)this + 7);
  *uint64_t v3 = 0;
  bzero(v3 + 2, 0xD7A0uLL);
  uint64_t v4 = 0;
  uint64_t v5 = *((void *)this + 7);
  *(_DWORD *)(v5 + 55208) = -1;
  *(_OWORD *)(v5 + 55216) = 0u;
  *(_OWORD *)(v5 + 55232) = 0u;
  *(_OWORD *)(v5 + 55248) = 0u;
  *(void *)(*((void *)this + 7) + 55264) = 0;
  float64x2_t v45 = (float64x2_t)vdupq_n_s64(0x41CDCD6500000000uLL);
  float64x2_t v46 = (float64x2_t)vdupq_n_s64(0x41B1DE784A000000uLL);
  while (1)
  {
    int v47 = *(_DWORD *)(*((void *)this + 5) + 2568);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, v55, 8u, (const void **)(v2[72] + 56 * v4));
    unsigned __int8 v48 = v54;
    memcpy(v52, __src, 4 * v54);
    __int16 v50 = 0;
    unsigned __int8 v49 = 0;
    int v51 = v52[0];
    BlueFin::GlSetIterator::operator++(&v48);
    if (v49 != v48) {
      break;
    }
LABEL_40:
    if (++v4 == 10) {
      goto LABEL_43;
    }
  }
  uint64_t v44 = v4;
  while (1)
  {
    unint64_t v6 = (_DWORD *)(*v2 + 368 * v50);
    if (*v6 != 8)
    {
      memcpy((void *)(*((void *)this + 7) + 368 * **((unsigned int **)this + 7) + 8), v6, 0x170uLL);
      int v7 = (unsigned int *)*((void *)this + 7);
      unsigned int v8 = *v7;
      uint64_t v9 = *(void *)(*((void *)this + 8) + 92368);
      if (v9)
      {
        if (*(unsigned char *)(v9 + 4048))
        {
          if (*(double *)(v9 + 6952) < 40000.0)
          {
            int v10 = &v7[92 * v8];
            int v13 = *((unsigned __int8 *)v10 + 212);
            BOOL v11 = (unsigned __int8 *)(v10 + 53);
            unsigned __int8 v12 = v13;
            if (v13)
            {
              unint64_t v14 = 0;
              uint64_t v15 = &v7[92 * v8 + 2];
              __int16 v16 = &v7[92 * v8];
              unsigned __int8 v17 = (unsigned __int8 *)(v16 + 3);
              uint64_t v18 = (float64x2_t *)(v16 + 58);
              do
              {
                if (!BYTE4(v18[-1].f64[0]))
                {
                  int v19 = BlueFin::GlImplGnss::m_aucImplGnssTable[*v15];
                  float v58 = 0.0;
                  int v59 = v19;
                  unsigned __int8 v60 = *v17;
                  if (BlueFin::GlPeGnssSvsInfoMgr::getSvAzEl(*(void *)(*((void *)this + 8) + 92368), v19, v60, &v58, &v57))
                  {
                    if (v58 > 0.0)
                    {
                      BlueFin::GlPeSvIdConverter::Gnss2SvId((BlueFin::GlPeGloFcnOsnMgr *)(*((void *)this + 4) + 119744), (unsigned int *)&v59, &v56);
                      uint64_t v20 = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(void *)(*((void *)this + 8)
                                                                                              + 17416)
                                                                                  + 112))(*((void *)this + 8) + 17416, &v56);
                      if (v20)
                      {
                        float v21 = *(_DWORD *)v20
                            ? (float)(*(float *)(v20 + 20) * (float)(v47 - *(_DWORD *)v20)) * 0.001
                            : 0.0;
                        int v22 = *(_DWORD *)(v20 + 4);
                        if (v22)
                        {
                          if (*(unsigned char *)(v20 + 9))
                          {
                            double v23 = 1.0;
                            switch(LODWORD(v18[-1].f64[0]))
                            {
                              case 2:
                                double v23 = 1.64694444;
                                break;
                              case 3:
                              case 6:
                              case 8:
                              case 0xA:
                                double v23 = 1.79327032;
                                break;
                              case 4:
                                if ((v56 + 67) < 0x44u
                                  || (uint64_t v27 = BlueFin::GlSvId::s_aucSvId2gnss[v56],
                                      uint64_t v28 = BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v27],
                                      v28 == -1)
                                  || (unsigned __int16)(BlueFin::GlSignalId::s_ausGnss2signalId[v27]
                                                      + v56
                                                      - BlueFin::GlSvId::s_aucGnss2minSvId[v27]) >= 0x23Fu)
                                {
                                  DeviceFaultNotify("glsignalid.h", 650, "GetRfCarrierFrqHz", (char)"IsValid()");
                                  __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 650, "IsValid()");
                                }
                                double v29 = BlueFin::GlSignalId::s_adSignalType2ctrFreqHz[v28];
                                if (v27 == 2)
                                {
                                  double v30 = (double)(char)(v56 - 59);
                                  if (v56 - 52 >= 0xE) {
                                    double v30 = -8.0;
                                  }
                                  double v29 = v29 + v30 * 562500.0;
                                }
                                double v23 = 2.48194818e18 / (v29 * v29);
                                break;
                              case 5:
                                double v23 = 1.01843279;
                                break;
                              default:
                                break;
                            }
                            v24.f64[0] = *(float *)(v20 + 12);
                            v24.f64[1] = v23 * (float)(v21 + *(float *)(v20 + 16));
                            *uint64_t v18 = vmulq_f64(vdivq_f64(v24, v46), v45);
                            unsigned int v25 = v22 - 2;
                            if (v25 > 8) {
                              int v26 = 0;
                            }
                            else {
                              int v26 = dword_263BBD3C8[v25];
                            }
                            LODWORD(v18[-1].f64[1]) = v26;
                            BYTE4(v18[-1].f64[0]) = 1;
                          }
                        }
                      }
                      unsigned __int8 v12 = *v11;
                    }
                  }
                }
                ++v14;
                uint64_t v18 = (float64x2_t *)((char *)v18 + 40);
              }
              while (v14 < v12);
              int v7 = (unsigned int *)*((void *)this + 7);
              unsigned int v8 = *v7;
              uint64_t v4 = v44;
            }
          }
        }
      }
      unsigned int v31 = v8 + 1;
      *int v7 = v31;
      if (v31 >= 0x96) {
        break;
      }
    }
    BlueFin::GlSetIterator::operator++(&v48);
    if (v49 == v48) {
      goto LABEL_40;
    }
  }
  GlCustomLog(11, "GlPeGnssSvsInfoMgr reports SvInfo array full (%d >= %d), no more output.\n", v31, 150);
LABEL_43:
  uint64_t v32 = (_DWORD *)*((void *)this + 4);
  uint64_t v33 = *((void *)this + 7);
  int v34 = v32[29935];
  if ((v34 & 8) != 0 && v32[17838])
  {
    unsigned int v35 = v32 + 17824;
    int v36 = 1;
  }
  else
  {
    unsigned int v35 = v32 + 17808;
    if ((v34 & 0x40) != 0)
    {
      int v37 = v32[17886];
      BOOL v38 = v37 == 0;
      unsigned int v39 = v32 + 17872;
      int v36 = 2 * (v37 != 0);
      if (!v38) {
        unsigned int v35 = v39;
      }
    }
    else
    {
      int v36 = 0;
    }
  }
  uint64_t v40 = 0;
  *(_DWORD *)(v33 + 55208) = v36;
  do
  {
    *(void *)(v33 + 55216 + v40 * 4) = *(void *)&v35[v40 + 2];
    v40 += 2;
  }
  while (v40 != 8);
  for (uint64_t i = 0; i != 4; ++i)
    *(_DWORD *)(v33 + 55248 + i * 4) = v35[i + 10];
  *(void *)(v33 + 55264) = 1000000000 * v35[15];
  uint64_t result = *((void *)this + 6);
  unsigned int v43 = *(uint64_t (**)(void))(result + 96);
  if (v43) {
    return v43();
  }
  return result;
}

uint64_t BlueFin::GlPeGnssSvsInfoMgr::getSvAzEl(uint64_t result, int a2, unsigned __int8 a3, float *a4, float *a5)
{
  if (result)
  {
    if (*(__int16 *)(result + 44) < 1)
    {
      return 0;
    }
    else
    {
      uint64_t v5 = *(unsigned __int16 *)(result + 44);
      for (uint64_t i = (__int16 *)(result + 54);
            BlueFin::GlImplGnss::m_aucEnabledGnssTable[a2] != *((unsigned char *)i - 4) || *((unsigned __int8 *)i - 3) != a3;
            i += 20)
      {
        if (!--v5) {
          return 0;
        }
      }
      *a4 = (float)*(i - 1);
      *a5 = (float)*i;
      return 1;
    }
  }
  return result;
}

uint64_t BlueFin::GlDbgProxyGlReqOnGnssSvInfoData(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  uint64_t v6 = *(void *)(v5 + 8);

  return BlueFin::GlDbgProxy::HalGlReqOnGnssSvInfoData(v6, (uint64_t (**)(BlueFin::GlDbgRequest *, uint64_t, unsigned __int16 *))v5, a2, a3);
}

uint64_t BlueFin::GlPeReqBag::InitializeReqIdReportingSet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  bzero(*(void **)a3, ((4 * *(unsigned __int8 *)(a3 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  for (uint64_t i = 0; i != 576; i += 8)
  {
    uint64_t result = *(void *)(a1 + i);
    if (result)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 344))(result, a2);
      if (result)
      {
        int v8 = *(__int16 *)(*(void *)(a1 + i) + 48);
        *(_DWORD *)(*(void *)a3 + 4 * (v8 >> 5)) |= 1 << v8;
      }
    }
  }
  return result;
}

uint64_t BlueFin::GlPeRqHdlr::ShouldFixStatusBeBatched()
{
  return 0;
}

uint64_t BlueFin::GlPeReqBag::GenerateNMEA(uint64_t a1, uint64_t a2)
{
  uint64_t result = MEMORY[0x270FA5388](a1, a2);
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v11 = result;
  uint64_t v47 = *MEMORY[0x263EF8340];
  int v19 = (unsigned char *)(result + 3233);
  char v20 = *(unsigned char *)(result + 3233);
  *(unsigned char *)(result + 3233) = 0;
  if (!v3) {
    uint64_t v4 = *(void *)(*(void *)(result + 20088) + 31800);
  }
  for (uint64_t i = 0; i != 72; ++i)
  {
    int v13 = *(void **)(v11 + 8 * i);
    if (v13)
    {
      unsigned int v14 = *(_DWORD *)(v13[1] + 16);
      BOOL v15 = v14 > 0xD;
      int v16 = (1 << v14) & 0x291F;
      if (!v15 && v16 != 0)
      {
        bzero(v21, 0x1CF0uLL);
        memset(&v21[7408], 248, 24);
        long long v22 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        uint64_t v18 = (unsigned int *)(*(uint64_t (**)(void *, unsigned char *, uint64_t))(*v13 + 248))(v13, v21, v4);
        uint64_t result = BlueFin::GlPeReqBag::GenerateNMEAForReqHdlr(v11, v18, v10, v8, v6, i);
      }
    }
  }
  *int v19 = v20;
  return result;
}

void sub_263992DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned char *a10, char a11)
{
  *a10 = a11;
  _Unwind_Resume(a1);
}

char *BlueFin::GlPeRqHdlrPosPeriodic::GetFixStatus(uint64_t a1, char *__dst, char *__src, double a4)
{
  if (__dst != __src)
  {
    memcpy(__dst, __src, 0x1CF0uLL);
    uint64_t v7 = *((void *)__src + 928);
    *((_OWORD *)__dst + 463) = *((_OWORD *)__src + 463);
    *((void *)__dst + 928) = v7;
    memcpy(__dst + 7432, __src + 7432, 0x190uLL);
  }
  int v8 = *(unsigned __int8 *)(a1 + 168);
  __dst[4048] = v8;
  LODWORD(a4) = *(_DWORD *)(a1 + 72);
  *((double *)__dst + 863) = (double)*(unint64_t *)&a4;
  *((_DWORD *)__dst + 1754) = *(_DWORD *)(a1 + 172);
  if (!v8)
  {
    __dst[4048] = 0;
    *(_OWORD *)(__dst + 4280) = 0u;
    *(_OWORD *)(__dst + 4296) = 0u;
    *(_OWORD *)(__dst + 4312) = 0u;
    *(_OWORD *)(__dst + 4328) = 0u;
    *(_OWORD *)(__dst + 4856) = 0u;
    *(_OWORD *)(__dst + 4872) = 0u;
    *(_OWORD *)(__dst + 4888) = 0u;
    *(_OWORD *)(__dst + 4904) = 0u;
    *(_OWORD *)(__dst + 4920) = 0u;
    *(_OWORD *)(__dst + 4936) = 0u;
    *(_OWORD *)(__dst + 4952) = 0u;
    *(_OWORD *)(__dst + 4968) = 0u;
    *(_OWORD *)(__dst + 4984) = 0u;
    *(_OWORD *)(__dst + 5000) = 0u;
    *(_OWORD *)(__dst + 5016) = 0u;
    *(_OWORD *)(__dst + 5032) = 0u;
    *(_OWORD *)(__dst + 5048) = 0u;
    *(_OWORD *)(__dst + 5064) = 0u;
    *(_OWORD *)(__dst + 5080) = 0u;
    *(_OWORD *)(__dst + 5096) = 0u;
    *(_OWORD *)(__dst + 5592) = 0u;
    *(_OWORD *)(__dst + 5608) = 0u;
    *(_OWORD *)(__dst + 5560) = 0u;
    *(_OWORD *)(__dst + 5576) = 0u;
    *(_OWORD *)(__dst + 5528) = 0u;
    *(_OWORD *)(__dst + 5544) = 0u;
    *(_OWORD *)(__dst + 5496) = 0u;
    *(_OWORD *)(__dst + 5512) = 0u;
    *(_OWORD *)(__dst + 5464) = 0u;
    *(_OWORD *)(__dst + 5480) = 0u;
    *(_OWORD *)(__dst + 5432) = 0u;
    *(_OWORD *)(__dst + 5448) = 0u;
    *(_OWORD *)(__dst + 5400) = 0u;
    *(_OWORD *)(__dst + 5416) = 0u;
    *(_OWORD *)(__dst + 5368) = 0u;
    *(_OWORD *)(__dst + 5384) = 0u;
  }
  return __dst;
}

uint64_t BlueFin::GlDbgProxy::HalGlReqOnGnssSvInfoData(uint64_t a1, uint64_t (**this)(BlueFin::GlDbgRequest *, uint64_t, unsigned __int16 *), uint64_t a3, unsigned __int16 *a4)
{
  uint64_t result = BlueFin::GlDbgRequest::Id((BlueFin::GlDbgRequest *)this, 0);
  int v11 = result;
  if (!*(void *)(a1 + 808))
  {
    *(unsigned char *)(a1 + 580) = 1;
    if (*(_DWORD *)(a1 + 576) == 1)
    {
      BlueFin::GlDbgCodec::WriteStart((BlueFin::GlDbgCodec *)a1, 563);
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
        BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, (unsigned int *)&v11);
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1))
      {
        *(_DWORD *)(a1 + 572) = 2;
        BlueFin::GlDbgCodec::Rvw((BlueFin::GlDbgCodec *)a1, a3);
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1))
      {
        *(_DWORD *)(a1 + 572) = 2;
        BlueFin::GlDbgCodec::Rvw((BlueFin::GlDbgCodec *)a1, a4);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 1);
    }
    uint64_t v9 = this[7];
    if (v9) {
      uint64_t result = v9((BlueFin::GlDbgRequest *)this, a3, a4);
    }
    *(unsigned char *)(a1 + 580) = 1;
    if (*(_DWORD *)(a1 + 576) == 1)
    {
      BlueFin::GlDbgCodec::WriteFinal((BlueFin::GlDbgCodec *)a1, 563);
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
        BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, (unsigned int *)&v11);
      }
      uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32);
      return v10(a1, 1);
    }
  }
  return result;
}

uint64_t BlueFin::GlDbgProxy::HalGlReqOnGnssMeasData(uint64_t a1, uint64_t (**this)(BlueFin::GlDbgRequest *, unsigned int *), unsigned int *a3)
{
  uint64_t result = BlueFin::GlDbgRequest::Id((BlueFin::GlDbgRequest *)this, 0);
  int v9 = result;
  if (!*(void *)(a1 + 808))
  {
    *(unsigned char *)(a1 + 580) = 1;
    if (*(_DWORD *)(a1 + 576) == 1)
    {
      BlueFin::GlDbgCodec::WriteStart((BlueFin::GlDbgCodec *)a1, 561);
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
        BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, (unsigned int *)&v9);
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1))
      {
        *(_DWORD *)(a1 + 572) = 2;
        BlueFin::GlDbgCodec::Rvw((BlueFin::GlDbgCodec *)a1, a3);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 1);
    }
    uint64_t v7 = this[5];
    if (v7) {
      uint64_t result = v7((BlueFin::GlDbgRequest *)this, a3);
    }
    *(unsigned char *)(a1 + 580) = 1;
    if (*(_DWORD *)(a1 + 576) == 1)
    {
      BlueFin::GlDbgCodec::WriteFinal((BlueFin::GlDbgCodec *)a1, 561);
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
        BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, (unsigned int *)&v9);
      }
      int v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32);
      return v8(a1, 1);
    }
  }
  return result;
}

void FireCallback::GlReqOnGnssSvInfoData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (FireCallback::pInstance)
  {
    uint64_t v9 = *(void *)(FireCallback::pInstance + 312);
    if (v9)
    {
      uint64_t v11 = a3;
      uint64_t v12 = a2;
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v9 + 48))(v9, &v12, &v11);
      return;
    }
    uint64_t v10 = "fcb,fReqOnGnssSvInfoDataCb,nullptr";
  }
  else
  {
    uint64_t v10 = "fcb,GlReqOnGnssSvInfoData,nullptr";
  }

  FireDeviceLog::DeviceLogBase(2, v10, a3, a4, a5, a6, a7, a8, a9);
}

void std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_3,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_3>,void ()(BlueFin::GlGnssSvInfoData const*,BlueFin::GlTimeConversionInfo const*)>::operator()(uint64_t a1, unsigned int **a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9 = *(void *)(a1 + 8);
  if (*(void *)(v9 + 184) && *(unsigned char *)(v9 + 153))
  {
    uint64_t v10 = *a2;
    long long v106 = (unsigned char *)*a3;
    FireDeviceLog::DeviceLogBase(6, "handleSvInfoResponse", (uint64_t)a3, a4, a5, a6, a7, a8, v105);
    long long v107 = (void *)v9;
    uint64_t v19 = v9 + 128;
    uint64_t v18 = *(void **)(v9 + 128);
    for (uint64_t i = *(void **)(v19 + 8); i != v18; std::allocator<gnss::SvInfo>::destroy[abi:ne180100](i))
      i -= 17;
    v107[17] = v18;
    if (*v10)
    {
      unint64_t v20 = 0;
      long long v121 = v10;
      do
      {
        switch(v10[92 * v20 + 2])
        {
          case 0u:
            int v21 = 0;
            char v120 = v10[92 * v20 + 3];
            char v122 = 1;
            char v117 = 127;
            char v118 = 0;
            int v119 = 1;
            goto LABEL_22;
          case 2u:
            long long v23 = &v10[92 * v20];
            char v24 = *((unsigned char *)v23 + 12);
            char v25 = *((unsigned char *)v23 + 13);
            char v120 = v24;
            if ((v25 - 7) > 0xF1u)
            {
              int v21 = 0;
              int v119 = 2;
              char v117 = v25;
              char v118 = 1;
              char v122 = 1;
            }
            else
            {
              int v119 = 2;
              FireDeviceLog::DeviceLogBase(2, "svinfo,forcing slot %d to unhealthy due to out-of-range FCN %d", v11, v12, v13, v14, v15, v16, v24);
              char v117 = 0;
              char v118 = 1;
              char v122 = 1;
              int v21 = 1;
              uint64_t v10 = v121;
            }
            goto LABEL_22;
          case 3u:
            char v118 = 0;
            int v21 = 0;
            char v120 = LOBYTE(v10[92 * v20 + 3]) - 64;
            int v22 = 16;
            goto LABEL_20;
          case 5u:
            char v118 = 0;
            int v21 = 0;
            char v120 = v10[92 * v20 + 3];
            int v22 = 4;
            goto LABEL_20;
          case 6u:
            char v118 = 0;
            int v21 = 0;
            char v120 = v10[92 * v20 + 3];
            int v22 = 8;
LABEL_20:
            int v119 = v22;
            char v122 = 1;
            goto LABEL_21;
          case 7u:
            char v122 = 0;
            int v21 = 0;
            char v120 = v10[92 * v20 + 3];
            char v118 = 0;
            int v119 = 32;
LABEL_21:
            char v117 = 127;
LABEL_22:
            long long v26 = 0;
            long long v27 = 0;
            long long v28 = 0;
            long long v29 = 0;
            long long v30 = 0;
            uint64_t v31 = 0;
            unint64_t v32 = v10[92 * v20 + 4];
            if (v32 >= 6) {
              char v33 = 0;
            }
            else {
              char v33 = 0x30004020100uLL >> (8 * v32);
            }
            char v116 = v33;
            do
            {
              uint64_t v34 = (uint64_t)&v10[92 * v20 + 8 * v31];
              uint64_t v35 = *(void *)(v34 + 32);
              double v36 = *(double *)(v34 + 24) * 1000000000.0;
              uint64_t v38 = *(void *)(v34 + 40);
              uint64_t v37 = *(void *)(v34 + 48);
              if (v30 >= v29)
              {
                uint64_t v39 = ((char *)v30 - (char *)v28) >> 5;
                unint64_t v40 = v39 + 1;
                if ((unint64_t)(v39 + 1) >> 59) {
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v41 = (char *)v29 - (char *)v28;
                if (v41 >> 4 > v40) {
                  unint64_t v40 = v41 >> 4;
                }
                if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFE0) {
                  unint64_t v42 = 0x7FFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v42 = v40;
                }
                if (v42)
                {
                  if (v42 >> 59) {
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  }
                  long long v43 = (char *)operator new(32 * v42);
                }
                else
                {
                  long long v43 = 0;
                }
                long long v44 = &v43[32 * v39];
                *(double *)long long v44 = v36;
                *((void *)v44 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v35;
                *((void *)v44 + 2) = v38;
                *((void *)v44 + 3) = v37;
                if (v30 == v28)
                {
                  long long v27 = &v43[32 * v39];
                }
                else
                {
                  long long v45 = &v43[32 * v39];
                  do
                  {
                    long long v46 = *((_OWORD *)v30 - 1);
                    long long v27 = v45 - 32;
                    *((_OWORD *)v45 - 2) = *((_OWORD *)v30 - 2);
                    *((_OWORD *)v45 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v46;
                    v30 -= 4;
                    v45 -= 32;
                  }
                  while (v30 != v28);
                }
                long long v26 = &v43[32 * v42];
                long long v30 = (double *)(v44 + 32);
                if (v28) {
                  operator delete(v28);
                }
                long long v28 = (double *)v27;
                long long v29 = (double *)v26;
              }
              else
              {
                *long long v30 = v36;
                *((void *)v30 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v35;
                *((void *)v30 + 2) = v38;
                *((void *)v30 + 3) = v37;
                v30 += 4;
              }
              ++v31;
            }
            while (v31 != 4);
            uint64_t v47 = &v10[92 * v20];
            unsigned int v48 = v47[46];
            unsigned int v49 = v47[47];
            if (v48 == 2) {
              char v50 = 2;
            }
            else {
              char v50 = v48 == 1;
            }
            char v112 = v50;
            char v51 = v49 == 1;
            if (v49 == 2) {
              char v51 = 2;
            }
            char v114 = v51;
            unsigned int v53 = v47[48];
            unsigned int v52 = v47[49];
            char v54 = v53 == 1;
            if (v53 == 2) {
              char v54 = 2;
            }
            char v111 = v54;
            if (v52 == 2) {
              char v55 = 2;
            }
            else {
              char v55 = v52 == 1;
            }
            char v113 = v55;
            unsigned int v56 = v47[50];
            char v57 = v56 == 1;
            if (*((unsigned char *)v47 + 204)) {
              char v58 = v21;
            }
            else {
              char v58 = 1;
            }
            if (v58)
            {
              char v110 = 0;
            }
            else
            {
              BOOL v59 = v53 == 2;
              char v60 = v122;
              if (!v59) {
                char v60 = 0;
              }
              if (v60)
              {
                char v61 = 2;
              }
              else
              {
                unsigned int v62 = v10[92 * v20 + 52];
                if (v62 == 2) {
                  char v61 = 2;
                }
                else {
                  char v61 = v62 == 1;
                }
              }
              char v110 = v61;
            }
            double v115 = v26;
            uint64_t v64 = *((void *)v47 + 19);
            uint64_t v63 = *((void *)v47 + 20);
            uint64_t v65 = *((void *)v47 + 21);
            int v66 = v47[44];
            int v108 = v47[45];
            if (v56 == 2) {
              int v67 = 1;
            }
            else {
              int v67 = v21;
            }
            if (v67) {
              char v57 = 2;
            }
            long long v123 = &v10[92 * v20 + 53];
            char v109 = v57;
            double v68 = 0;
            double v69 = 0;
            int v70 = 0;
            if (*(unsigned char *)v123)
            {
              uint64_t v71 = 0;
              while (2)
              {
                switch(v10[92 * v20 + 54 + 10 * v71])
                {
                  case 0u:
                  case 9u:
                    FireDeviceLog::DeviceLogBase(3, "#Warning,sv band corr,unexpected band,%d", v11, v12, v13, v14, v15, v16, v10[92 * v20 + 54 + 10 * v71]);
                    uint64_t v10 = v121;
                    goto LABEL_121;
                  case 1u:
                    char v72 = 1;
                    goto LABEL_90;
                  case 2u:
                    char v72 = 2;
                    goto LABEL_90;
                  case 3u:
                    char v72 = 3;
                    goto LABEL_90;
                  case 4u:
                    char v72 = 4;
                    goto LABEL_90;
                  case 5u:
                    char v72 = 5;
                    goto LABEL_90;
                  case 6u:
                    char v72 = 7;
                    goto LABEL_90;
                  case 7u:
                    char v72 = 8;
                    goto LABEL_90;
                  case 8u:
                    char v72 = 9;
                    goto LABEL_90;
                  case 0xAu:
                    char v72 = 10;
                    goto LABEL_90;
                  case 0xBu:
                    char v72 = 6;
                    goto LABEL_90;
                  default:
                    char v72 = 0;
LABEL_90:
                    if (LOBYTE(v10[92 * v20 + 55 + 10 * v71]))
                    {
                      unsigned int v73 = v10[92 * v20 + 56 + 10 * v71];
                      if (v73 - 3 >= 6)
                      {
                        if (v73 - 1 >= 2)
                        {
                          if (v73 == 9) {
                            int v74 = 2;
                          }
                          else {
                            int v74 = 0;
                          }
                        }
                        else
                        {
                          int v74 = 1;
                        }
                      }
                      else
                      {
                        FireDeviceLog::DeviceLogBase(2, "svinfo,unexpected IonoSrc,%d", v11, v12, v13, v14, v15, v16, v10[92 * v20 + 56 + 10 * v71]);
                        int v74 = 0;
                        uint64_t v10 = v121;
                      }
                      uint64_t v77 = (uint64_t)&v10[92 * v20 + 10 * v71];
                      uint64_t v75 = *(void *)(v77 + 232);
                      uint64_t v76 = *(void *)(v77 + 240);
                    }
                    else
                    {
                      int v74 = 0;
                      uint64_t v75 = 0x7FF8000000000000;
                      uint64_t v76 = 0x7FF8000000000000;
                    }
                    uint64_t v78 = *(void *)&v10[92 * v20 + 62 + 10 * v71];
                    if (v69 >= v70)
                    {
                      uint64_t v79 = (v69 - v68) >> 5;
                      unint64_t v80 = v79 + 1;
                      if ((unint64_t)(v79 + 1) >> 59) {
                        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                      }
                      if ((v70 - v68) >> 4 > v80) {
                        unint64_t v80 = (v70 - v68) >> 4;
                      }
                      if ((unint64_t)(v70 - v68) >= 0x7FFFFFFFFFFFFFE0) {
                        unint64_t v81 = 0x7FFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v81 = v80;
                      }
                      if (v81)
                      {
                        if (v81 >> 59) {
                          std::__throw_bad_array_new_length[abi:ne180100]();
                        }
                        char v82 = (char *)operator new(32 * v81);
                      }
                      else
                      {
                        char v82 = 0;
                      }
                      uint64_t v83 = &v82[32 * v79];
                      char *v83 = v72;
                      *((_DWORD *)v83 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v74;
                      *((void *)v83 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v75;
                      *((void *)v83 + 2) = v76;
                      *((void *)v83 + 3) = v78;
                      if (v69 == v68)
                      {
                        double v86 = &v82[32 * v79];
                        uint64_t v10 = v121;
                      }
                      else
                      {
                        long long v84 = &v82[32 * v79];
                        uint64_t v10 = v121;
                        do
                        {
                          long long v85 = *((_OWORD *)v69 - 1);
                          double v86 = v84 - 32;
                          *((_OWORD *)v84 - 2) = *((_OWORD *)v69 - 2);
                          *((_OWORD *)v84 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v85;
                          v69 -= 32;
                          v84 -= 32;
                        }
                        while (v69 != v68);
                      }
                      int v70 = &v82[32 * v81];
                      double v69 = v83 + 32;
                      if (v68) {
                        operator delete(v68);
                      }
                      double v68 = v86;
                    }
                    else
                    {
                      *double v69 = v72;
                      *((_DWORD *)v69 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v74;
                      *((void *)v69 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v75;
                      *((void *)v69 + 2) = v76;
                      *((void *)v69 + 3) = v78;
                      v69 += 32;
                    }
LABEL_121:
                    if (++v71 >= (unint64_t)*(unsigned __int8 *)v123) {
                      break;
                    }
                    continue;
                }
                break;
              }
            }
            long long v88 = (int *)v107[17];
            unint64_t v87 = v107[18];
            if ((unint64_t)v88 >= v87)
            {
              long long v91 = (int *)v107[16];
              unint64_t v92 = 0xF0F0F0F0F0F0F0F1 * (((char *)v88 - (char *)v91) >> 3) + 1;
              if (v92 > 0x1E1E1E1E1E1E1E1) {
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v93 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v87 - (void)v91) >> 3);
              if (2 * v93 > v92) {
                unint64_t v92 = 2 * v93;
              }
              if (v93 >= 0xF0F0F0F0F0F0F0) {
                unint64_t v94 = 0x1E1E1E1E1E1E1E1;
              }
              else {
                unint64_t v94 = v92;
              }
              if (v94 > 0x1E1E1E1E1E1E1E1) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              long long v95 = (char *)operator new(136 * v94);
              long long v96 = &v95[8 * (((char *)v88 - (char *)v91) >> 3)];
              *(_DWORD *)long long v96 = v119;
              v96[4] = v120;
              v96[5] = v118;
              v96[6] = v117;
              *((void *)v96 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0x7FF8000000000000;
              v96[16] = v116;
              *((void *)v96 + 3) = v27;
              *((void *)v96 + 4) = v30;
              *((void *)v96 + 5) = v115;
              *((void *)v96 + 6) = 0;
              *((void *)v96 + 7) = v64;
              *((void *)v96 + 8) = v63;
              *((void *)v96 + 9) = v65;
              *((void *)v96 + 10) = 0x7FF8000000000000;
              *((_DWORD *)v96 + 22) = v66;
              *((_DWORD *)v96 + 23) = v108;
              v96[96] = v112;
              v96[97] = 0;
              v96[98] = v114;
              v96[99] = 0;
              v96[100] = v111;
              v96[101] = v110;
              v96[102] = v113;
              v96[103] = 0;
              v96[104] = v109;
              v96[105] = 0;
              *((void *)v96 + 14) = v68;
              *((void *)v96 + 15) = 0;
              *((void *)v96 + 15) = v69;
              *((void *)v96 + 16) = 0;
              *((void *)v96 + 16) = v70;
              if (v88 == v91)
              {
                long long v89 = v96 + 136;
                long long v90 = v107;
                v107[16] = v96;
                v107[17] = v96 + 136;
                v107[18] = &v95[136 * v94];
              }
              else
              {
                long long v97 = &v95[8 * (((char *)v88 - (char *)v91) >> 3)];
                long long v90 = v107;
                do
                {
                  long long v98 = *(_OWORD *)(v88 - 34);
                  *(v97 - 120) = *((unsigned char *)v88 - 120);
                  *(_OWORD *)(v97 - 136) = v98;
                  *((_OWORD *)v97 - 7) = *((_OWORD *)v88 - 7);
                  *((void *)v97 - 12) = *((void *)v88 - 12);
                  uint64_t v99 = *((void *)v88 - 11);
                  *((_OWORD *)v88 - 7) = 0uLL;
                  *((_OWORD *)v88 - 6) = 0uLL;
                  *((void *)v97 - 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v99;
                  long long v100 = *((_OWORD *)v88 - 5);
                  long long v101 = *((_OWORD *)v88 - 4);
                  long long v102 = *((_OWORD *)v88 - 3);
                  *((_WORD *)v97 - 16) = *((_WORD *)v88 - 16);
                  *((_OWORD *)v97 - 4) = v101;
                  *((_OWORD *)v97 - 3) = v102;
                  *((_OWORD *)v97 - 5) = v100;
                  *(_OWORD *)(v97 - 24) = *(_OWORD *)(v88 - 6);
                  *((void *)v97 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *((void *)v88 - 1);
                  v97 -= 136;
                  *((void *)v88 - 3) = 0;
                  *((void *)v88 - 2) = 0;
                  *((void *)v88 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
                  v88 -= 34;
                }
                while (v88 != v91);
                long long v88 = (int *)v107[16];
                long long v103 = (int *)v107[17];
                long long v89 = v96 + 136;
                v107[16] = v97;
                v107[17] = v96 + 136;
                v107[18] = &v95[136 * v94];
                while (v103 != v88)
                {
                  v103 -= 34;
                  std::allocator<gnss::SvInfo>::destroy[abi:ne180100](v103);
                }
              }
              if (v88) {
                operator delete(v88);
              }
            }
            else
            {
              *long long v88 = v119;
              *((unsigned char *)v88 + 4) = v120;
              *((unsigned char *)v88 + 5) = v118;
              *((unsigned char *)v88 + 6) = v117;
              *((void *)v88 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0x7FF8000000000000;
              *((unsigned char *)v88 + 16) = v116;
              *((void *)v88 + 3) = v27;
              *((void *)v88 + 4) = v30;
              *((void *)v88 + 5) = v115;
              *((void *)v88 + 6) = 0;
              *((void *)v88 + 7) = v64;
              *((void *)v88 + 8) = v63;
              *((void *)v88 + 9) = v65;
              *((void *)v88 + 10) = 0x7FF8000000000000;
              v88[22] = v66;
              v88[23] = v108;
              *((unsigned char *)v88 + 96) = v112;
              *((unsigned char *)v88 + 97) = 0;
              *((unsigned char *)v88 + 98) = v114;
              *((unsigned char *)v88 + 99) = 0;
              *((unsigned char *)v88 + 100) = v111;
              *((unsigned char *)v88 + 10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v110;
              *((unsigned char *)v88 + 102) = v113;
              *((unsigned char *)v88 + 103) = 0;
              *((unsigned char *)v88 + 104) = v109;
              *((unsigned char *)v88 + 105) = 0;
              *((void *)v88 + 14) = v68;
              *((void *)v88 + 15) = v69;
              *((void *)v88 + 16) = v70;
              long long v89 = v88 + 34;
              v107[17] = v88 + 34;
              long long v90 = v107;
            }
            v90[17] = v89;
            break;
          default:
            FireDeviceLog::DeviceLogBase(2, "svinfo,unexpected constellation,%d", v11, v12, v13, v14, v15, v16, v10[92 * v20 + 2]);
            break;
        }
        ++v20;
        uint64_t v10 = v121;
      }
      while (v20 < *v121);
    }
    long long v104 = v10 + 13802;
    if (*v106) {
      operator new();
    }
    FireDeviceLog::DeviceLogBase(6, "klobuchar,%d,time,ns,%llu,alpha,%.3e,%.3e,%.3e,%.3e,beta,%d,%d,%d,%d", v11, v12, v13, v14, v15, v16, *v104);
    if ((*v104 - 1) <= 1) {
      operator new();
    }
  }
  else
  {
    FireDeviceLog::DeviceLogBase(2, "handleSvInfoResponse,null", (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  }
}

void sub_26399419C(_Unwind_Exception *exception_object)
{
  if (v2) {
    operator delete(v2);
  }
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::allocator<gnss::SvInfo>::destroy[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[6];
  a1[6] = 0;
  if (v3) {
    MEMORY[0x263E6DD80](v3, 0x1000C40AC4F46D1);
  }
  uint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
}

uint64_t BlueFin::GlRequestImplPosPeriodic::GetMaxValidFixCount(BlueFin::GlRequestImplPosPeriodic *this)
{
  return *((unsigned int *)this + 28);
}

uint64_t BlueFin::GlRequestImplPosPeriodic::GetMaxTotalFixCount(BlueFin::GlRequestImplPosPeriodic *this)
{
  return *((unsigned int *)this + 29);
}

uint64_t BlueFin::GlDbgProxyGlReqOnResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  uint64_t v4 = *(void *)(v3 + 8);

  return BlueFin::GlDbgProxy::HalGlReqOnResponse(v4, (uint64_t (**)(BlueFin::GlDbgRequest *, uint64_t))v3, a2);
}

void BlueFin::GlPeRqHdlrSyncin::SetFixStatus(uint64_t a1, int *a2)
{
  if (!*(unsigned char *)(a1 + 20) && !*(unsigned char *)(a1 + 19))
  {
    double v3 = (double)*a2;
    uint64_t v4 = *(unsigned int **)(*(void *)(a1 + 56) + 8);
    if (*a2 <= 0xFF9222FE) {
      double v3 = (double)*a2;
    }
    BlueFin::GlPeTimeManager::lmsToLegacyGlStruct(v4, 0, 1, (uint64_t)v7, v3);
    if ((*(unsigned char *)(a1 + 112) & 2) != 0 && v11 <= 0x14)
    {
      double v5 = *(double *)(a1 + 72);
      if (*(unsigned char *)(a1 + 22))
      {
        double v5 = v5 + 0.042;
        *(double *)(a1 + 72) = v5;
      }
      BlueFin::GlPeTimeManager::lmsToLegacyGlStruct(*(unsigned int **)(*(void *)(a1 + 56) + 8), 0, 1, (uint64_t)v7, v5);
      GlCustomLog(14, "Syncin::SetFixStatus(), GpsWeek=%d, WeekMs=%u.%d%d(Unc:%uUs), PulseLms = %.6f\n", v7[0], v8, v9, v10, v11, *(double *)(a1 + 72));
      uint64_t v6 = *(void (**)(void))(*(void *)(a1 + 104) + 80);
      if (v6) {
        v6();
      }
      *(unsigned char *)(a1 + 19) = 1;
    }
  }
}

uint64_t BlueFin::GlDbgProxy::HalGlReqOnResponse(uint64_t a1, uint64_t (**this)(BlueFin::GlDbgRequest *, uint64_t), uint64_t a3)
{
  uint64_t result = BlueFin::GlDbgRequest::Id((BlueFin::GlDbgRequest *)this, 0);
  int v9 = result;
  if (!*(void *)(a1 + 808))
  {
    *(unsigned char *)(a1 + 580) = 1;
    if (*(_DWORD *)(a1 + 576) == 1)
    {
      BlueFin::GlDbgCodec::WriteStart((BlueFin::GlDbgCodec *)a1, 543);
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
        BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, (unsigned int *)&v9);
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1))
      {
        *(_DWORD *)(a1 + 572) = 2;
        BlueFin::GlDbgCodec::Rvw((BlueFin::GlDbgCodec *)a1, a3);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 1);
    }
    uint64_t v7 = this[8];
    if (v7) {
      uint64_t result = v7((BlueFin::GlDbgRequest *)this, a3);
    }
    *(unsigned char *)(a1 + 580) = 1;
    if (*(_DWORD *)(a1 + 576) == 1)
    {
      BlueFin::GlDbgCodec::WriteFinal((BlueFin::GlDbgCodec *)a1, 543);
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
        BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, (unsigned int *)&v9);
      }
      int v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32);
      return v8(a1, 1);
    }
  }
  return result;
}

uint64_t BlueFin::GlRequestImplGnssMeasData::GetPeriodMs(BlueFin::GlRequestImplGnssMeasData *this)
{
  return *((unsigned int *)this + 30);
}

uint64_t BlueFin::GlDbgProxyGlReqOnGnssAgcInfoData(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  uint64_t v4 = *(void *)(v3 + 8);

  return BlueFin::GlDbgProxy::HalGlReqOnGnssAgcInfoData(v4, (uint64_t (**)(BlueFin::GlDbgRequest *, unsigned int *))v3, a2);
}

uint64_t BlueFin::GlDbgProxy::HalGlReqOnGnssAgcInfoData(uint64_t a1, uint64_t (**this)(BlueFin::GlDbgRequest *, unsigned int *), unsigned int *a3)
{
  uint64_t result = BlueFin::GlDbgRequest::Id((BlueFin::GlDbgRequest *)this, 0);
  int v9 = result;
  if (!*(void *)(a1 + 808))
  {
    *(unsigned char *)(a1 + 580) = 1;
    if (*(_DWORD *)(a1 + 576) == 1)
    {
      BlueFin::GlDbgCodec::WriteStart((BlueFin::GlDbgCodec *)a1, 570);
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
        BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, (unsigned int *)&v9);
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1))
      {
        *(_DWORD *)(a1 + 572) = 2;
        BlueFin::GlDbgCodec::Rvw((BlueFin::GlDbgCodec *)a1, a3);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 1);
    }
    uint64_t v7 = this[15];
    if (v7) {
      uint64_t result = v7((BlueFin::GlDbgRequest *)this, a3);
    }
    *(unsigned char *)(a1 + 580) = 1;
    if (*(_DWORD *)(a1 + 576) == 1)
    {
      BlueFin::GlDbgCodec::WriteFinal((BlueFin::GlDbgCodec *)a1, 570);
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
        BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, (unsigned int *)&v9);
      }
      int v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32);
      return v8(a1, 1);
    }
  }
  return result;
}

uint64_t BlueFin::GlPeReqBag::SetCurrentTimeLms(BlueFin::GlPeReqBag *this, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v6 = (char *)this + 3233;
  char v7 = *((unsigned char *)this + 3233);
  *((unsigned char *)this + 3233) = 0;
  do
  {
    uint64_t result = *(void *)((char *)this + v4);
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 152))(result, a2);
    }
    v4 += 8;
  }
  while (v4 != 576);
  *uint64_t v6 = v7;
  return result;
}

void sub_26399488C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned char *a11, char a12)
{
  *a11 = a12;
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlPeRqHdlrGnssMeasData::SetCurrentTimeLms(BlueFin::GlPeRqHdlrGnssMeasData *this, int a2)
{
  uint64_t v4 = (int *)((char *)this + 175680);
  uint64_t result = BlueFin::GlPeRqHdlr::SetCurrentTimeLms(this, a2);
  if (v4[2])
  {
    int v6 = a2 - v4[1];
  }
  else
  {
    int v7 = *((_DWORD *)this + 9);
    if (v7 == -1)
    {
      int v6 = 1;
    }
    else
    {
      unsigned int v8 = *(_DWORD *)(*((void *)this + 1) + 28);
      unsigned int v9 = *((_DWORD *)this + 8) + v7;
      BOOL v10 = v9 >= v8;
      int v6 = v9 - v8;
      if (!v10) {
        int v6 = 1;
      }
    }
  }
  int *v4 = v6;
  return result;
}

uint64_t BlueFin::GlPeRqHdlr::SetCurrentTimeLms(BlueFin::GlPeRqHdlr *this, int a2)
{
  *((_DWORD *)this + 8) = a2;
  uint64_t result = *((void *)this + 1);
  int v4 = *((_DWORD *)this + 9);
  unsigned int v5 = 1001;
  if (v4 != -1)
  {
    unsigned int v6 = *(_DWORD *)(result + 28);
    unsigned int v7 = v4 + a2;
    BOOL v8 = v7 >= v6;
    int v9 = v7 - v6 + 1000;
    if (v8) {
      unsigned int v5 = v9;
    }
    else {
      unsigned int v5 = 1001;
    }
  }
  unsigned int v10 = 1000 * *(__int16 *)(result + 22);
  unsigned int v11 = 1000 * *(_DWORD *)(result + 36);
  if (*(_DWORD *)(result + 16) == 8)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 360))(result);
    if (result == 7)
    {
      v10 += 6000;
      v11 += 6000;
    }
  }
  if (v5 > v10)
  {
    *((unsigned char *)this + 23) = 1;
    BlueFin::GlPeFirstFix::m_bReqTimeOutReached = 1;
  }
  if (v5 > v11) {
    *((unsigned char *)this + 24) = 1;
  }
  return result;
}

uint64_t BlueFin::GlPeRqHdlrPosPeriodic::SetCurrentTimeLms(BlueFin::GlPeRqHdlrPosPeriodic *this, int a2)
{
  uint64_t result = BlueFin::GlPeRqHdlr::SetCurrentTimeLms(this, a2);
  if (*((_DWORD *)this + 19))
  {
    int v5 = a2 - *((_DWORD *)this + 21);
    int v6 = a2 - *((_DWORD *)this + 25);
  }
  else
  {
    int v7 = *((_DWORD *)this + 9);
    if (v7 == -1)
    {
      int v6 = 1;
      int v5 = 1;
    }
    else
    {
      unsigned int v8 = *(_DWORD *)(*((void *)this + 1) + 28);
      unsigned int v9 = *((_DWORD *)this + 8) + v7;
      BOOL v10 = v9 >= v8;
      int v6 = v9 - v8;
      if (!v10) {
        int v6 = 1;
      }
      int v5 = v6;
    }
  }
  *((_DWORD *)this + 17) = v5;
  *((_DWORD *)this + 18) = v6;
  return result;
}

void BlueFin::GlPeGlnTimeMgr::SetAsst(uint64_t a1, int a2, char *a3)
{
  unsigned int v8 = &unk_270EC9610;
  char v12 = 0;
  double v13 = 0.0;
  char v14 = 0;
  int v16 = 0;
  int v17 = 0;
  memset(v15, 0, sizeof(v15));
  char v9 = *a3;
  __int16 v10 = *((_WORD *)a3 + 1);
  int v11 = a2;
  int v3 = *((_DWORD *)a3 + 1);
  if (v3 != 0x7FFFFFFF)
  {
    char v12 = 1;
    double v13 = (double)v3 * 4.65661287e-10;
  }
  int v4 = *((_DWORD *)a3 + 2);
  if (v4 != 0x7FFFFFFF)
  {
    char v14 = 1;
    *(double *)uint64_t v15 = (double)v4 * 9.31322575e-10;
  }
  if (a3[12])
  {
    unsigned int v15[8] = 1;
    v15[9] = a3[13];
  }
  if (a3[14])
  {
    double v5 = (double)*((__int16 *)a3 + 8) * 0.0009765625;
    double v6 = (double)*((__int16 *)a3 + 9) * 0.0000152587891;
    v15[10] = 1;
    *(float *)&double v5 = v5;
    *(float *)&double v6 = v6;
    int v16 = LODWORD(v5);
    int v17 = LODWORD(v6);
  }
  double v7 = BlueFin::GlPeGlnTimeMgr::initializeTimeData(a1, (uint64_t)&v8, 0);
  if (BlueFin::GlUtils::m_pInstance)
  {
    if (*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
      (*((void (**)(void **, void, void, double))v8 + 3))(&v8, 0, 0, v7);
    }
  }
}

double BlueFin::GlPeGlnTimeMgr::initializeTimeData(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (*(unsigned char *)(a2 + 8))
  {
    __int16 v6 = *(_WORD *)(a2 + 10);
    if (v6)
    {
      *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 8);
      *(_WORD *)(a1 + 58) = v6;
      *(unsigned char *)(a1 + 56) = 1;
    }
  }
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 12);
  if (*(unsigned char *)(a2 + 16))
  {
    BlueFin::GlPeGlnTimeMgr::stTauMgr::Update(a1 + 192, a3, **(_DWORD **)(a1 + 8), *(double *)(a2 + 24));
    *(unsigned char *)(a1 + 28) |= 2u;
  }
  if (*(unsigned char *)(a2 + 32)) {
    BlueFin::GlPeGlnTimeMgr::TauGpsMgr::Update(a1 + 136, a3, **(_DWORD **)(a1 + 8), *(double *)(a2 + 40));
  }
  if (*(unsigned char *)(a2 + 48))
  {
    if (*(unsigned char *)(a1 + 240))
    {
      int v8 = *(unsigned __int8 *)(a1 + 241);
      int v9 = *(unsigned __int8 *)(a2 + 49);
      if (v8 == v9) {
        goto LABEL_14;
      }
    }
    else
    {
      LOBYTE(v9) = *(unsigned char *)(a2 + 49);
    }
    *(unsigned char *)(a1 + 243) = 1;
    LOBYTE(v8) = v9;
LABEL_14:
    *(unsigned char *)(a1 + 240) = 1;
    *(unsigned char *)(a1 + 24BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v8;
    *(unsigned char *)(a1 + 29) |= 2u;
  }
  if (*(unsigned char *)(a2 + 50))
  {
    *(unsigned char *)(a1 + 244) = 1;
    double result = *(double *)(a2 + 52);
    *(double *)(a1 + 248) = result;
  }
  return result;
}

uint64_t BlueFin::GlPeGlnTimeMgr::stTauMgr::Update(uint64_t result, int a2, int a3, double a4)
{
  uint64_t v5 = result;
  if (!a2)
  {
    *(_WORD *)double result = 768;
    *(_WORD *)(result + 16) = 257;
    *(double *)(result + 8) = a4;
    *(double *)(result + 24) = a4;
    *(_DWORD *)(result + 32) = a3;
    return GlCustomLog(15, "GlPeGlnTimeMgr::UpdateTau%s:  Set from assistance   Tau%s:%.1fns\n", (const char *)(result + 36), (const char *)(result + 36), a4 * 1000000000.0);
  }
  int v6 = *(unsigned __int8 *)(result + 16);
  if (!*(unsigned char *)result)
  {
    double v8 = *(double *)(result + 8);
    if (vabdd_f64(a4, v8) * 1000000000.0 <= 50.0)
    {
      double v8 = a4 * 0.3 + v8 * 0.7;
      *(double *)(result + 8) = v8;
      unsigned int v10 = *(unsigned __int8 *)(result + 1);
      if (v10 <= 2) {
        *(unsigned char *)(result + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v10 + 1;
      }
    }
    else if (!*(unsigned char *)(result + 1) || (char v9 = *(unsigned char *)(result + 1) - 1, (*(unsigned char *)(result + 1) = v9) == 0))
    {
      *(double *)(result + 8) = a4;
      *(unsigned char *)(result + 16) = 0;
      return result;
    }
    *(unsigned char *)(result + 16) = 1;
    if (!v6) {
      goto LABEL_15;
    }
LABEL_14:
    if (vabdd_f64(*(double *)(v5 + 24), v8) * 1000000000.0 < 5.0) {
      return result;
    }
    goto LABEL_15;
  }
  *(unsigned char *)(result + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *(double *)(result + 8) = a4;
  double result = GlCustomLog(15, "GlPeGlnTimeMgr::UpdateTau%s:  Initialized  Tau%s:%.1fns\n", (const char *)(result + 36), (const char *)(result + 36), a4 * 1000000000.0);
  *(unsigned char *)uint64_t v5 = 0;
  int v7 = *(unsigned __int8 *)(v5 + 1);
  *(unsigned char *)(v5 + 16) = *(unsigned char *)(v5 + 1) != 0;
  if (!v7) {
    return result;
  }
  double v8 = *(double *)(v5 + 8);
  if (v6) {
    goto LABEL_14;
  }
LABEL_15:
  *(unsigned char *)(v5 + 17) = 1;
  *(double *)(v5 + 24) = v8;
  *(_DWORD *)(v5 + 32) = a3;
  return result;
}

uint64_t BlueFin::GlPeGlnTimeMgr::TauGpsMgr::Update(uint64_t result, unsigned int a2, int a3, double a4)
{
  if (*(unsigned char *)(result + 46))
  {
    return BlueFin::GlPeGlnTimeMgr::stTauMgr::Update(result, a2, a3, a4);
  }
  else if (a2 <= 2)
  {
    int v4 = (int)(a4 * 1000000000.0);
    *(unsigned char *)(result + 46) = 1;
    *(_WORD *)(result + 48) = v4;
    double v5 = (double)v4 * 0.000000001;
    *(_WORD *)double result = 768;
    *(double *)(result + 8) = v5;
    *(_WORD *)(result + 16) = 257;
    *(double *)(result + 24) = v5;
    *(_DWORD *)(result + 32) = a3;
    return GlCustomLog(15, "GlPeGlnTimeMgr::Update TauGps initialized  InitialValue:%.1fns\n", v5 * 1000000000.0);
  }
  return result;
}

unint64_t BlueFin::GlPePwrStateMgr::UpdatePwrState(BlueFin::GlPePwrStateMgr *this, char a2, unsigned int a3, int a4)
{
  if (!*((unsigned char *)this + 256))
  {
    unsigned int v8 = *((_DWORD *)this + 63);
    if (v8)
    {
      if (*(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092) >= v8) {
        *((unsigned char *)this + 256) = 1;
      }
    }
  }
  BlueFin::GlPePwrStateMgr::NewMeas((uint64_t)this, a2, a3, a4);
  v9[0] = 47;
  v9[1] = a2;
  uint64_t v6 = *((void *)this + 4);
  unint64_t result = *((void *)this + 1);
  *((void *)this + 4) = result;
  do
  {
    unint64_t v10 = 0;
    if (BlueFin::patch_dispatch(result, (uint64_t)this, v9, &v10)) {
      unint64_t result = v10;
    }
    else {
      unint64_t result = (*((uint64_t (**)(BlueFin::GlPePwrStateMgr *, unsigned __int8 *))this + 4))(this, v9);
    }
    *((void *)this + 4) = result;
  }
  while (result);
  *((void *)this + 4) = v6;
  return result;
}

uint64_t BlueFin::GlPePwrStateMgr::NewMeas(uint64_t this, char a2, unsigned int a3, int a4)
{
  *(unsigned char *)(this + 213) = a2;
  unsigned int v4 = (a2 & 0xF) - 12;
  if (v4 <= 3) {
    *(unsigned char *)(this + 210) = 0x1010000u >> (8 * v4);
  }
  *(unsigned char *)(this + 258) = a3 > 7;
  if (a4)
  {
    unsigned int v5 = *(_DWORD *)(this + 244);
    if (!v5)
    {
      unsigned int v5 = 30;
      *(_DWORD *)(this + 244) = 30;
    }
    unsigned int v6 = *(_DWORD *)(this + 240) + 1;
    *(_DWORD *)(this + 240) = v6;
    *(unsigned char *)(this + 257) = 0;
    if (v6 > v5)
    {
      *(_DWORD *)(this + 244) = 6;
      *(unsigned char *)(this + 257) = 1;
    }
  }
  else
  {
    *(_DWORD *)(this + 240) = 0;
    *(unsigned char *)(this + 257) = 0;
  }
  return this;
}

unint64_t BlueFin::GlReqSm::EnableLowPower(BlueFin::GlReqSm *this, int a2, int a3)
{
  char v4 = a2;
  unsigned int v6 = "False";
  if (a2) {
    unsigned int v6 = "True";
  }
  GlCustomLog(14, "GlReqSm::EnableLowPower %s\n", v6);
  uint64_t v7 = *((void *)this + 784);
  int v8 = *(_DWORD *)(v7 + 48);
  BOOL v9 = (v8 - 4) < 5 || v8 == 2;
  if (v9 || (v4 & 1) == 0)
  {
    BlueFin::GlPePwrStateMgr::EnableLowPower((BlueFin::GlReqSm *)((char *)this + 33216), 0);
    unint64_t v10 = "GlReqSm::EnableLowPower False(L5 or user interface)\n";
LABEL_9:
    return GlCustomLog(14, v10);
  }
  if ((*(char *)(v7 + 26217) & 0x80000000) == 0)
  {
    unint64_t v10 = "GlReqSm::EnableLowPower False(PowerMode)\n";
    goto LABEL_9;
  }
  GlCustomLog(14, "GlReqSm::EnableLowPower %s, MaxRfOnTimeMs %d\n", "True", a3);
  if (a3 == -1)
  {
    return BlueFin::GlPePwrStateMgr::EnableLowPower((BlueFin::GlReqSm *)((char *)this + 33216), 1u);
  }
  else
  {
    if (*(unsigned char *)(*((void *)this + 784) + 11565))
    {
      unint64_t v10 = "GlReqSm::EnableLowPower. xml value exisiting discarding command\n";
      goto LABEL_9;
    }
    uint64_t v12 = *((void *)this + 39);
    if (!v12)
    {
      unint64_t v10 = "GlReqSm::EnableLowPower. m_ptMeasEng is equal to null. Discarding command\n";
      goto LABEL_9;
    }
    double v13 = *(uint64_t (**)(void))(*(void *)v12 + 616);
    return v13();
  }
}

unint64_t BlueFin::GlPePwrStateMgr::EnableLowPower(BlueFin::GlPePwrStateMgr *this, unsigned __int8 a2)
{
  v5[0] = 48;
  v5[1] = a2;
  uint64_t v3 = *((void *)this + 4);
  unint64_t result = *((void *)this + 1);
  *((void *)this + 4) = result;
  do
  {
    unint64_t v6 = 0;
    if (BlueFin::patch_dispatch(result, (uint64_t)this, v5, &v6)) {
      unint64_t result = v6;
    }
    else {
      unint64_t result = (*((uint64_t (**)(BlueFin::GlPePwrStateMgr *, unsigned __int8 *))this + 4))(this, v5);
    }
    *((void *)this + 4) = result;
  }
  while (result);
  *((void *)this + 4) = v3;
  return result;
}

uint64_t (*(*BlueFin::GlPePwrStateMgr::SteadyNormalMode(unint64_t a1, unsigned __int8 *a2))(BlueFin::GlPePwrStateMgr *a1, unsigned __int8 *a2))()
{
  int v2 = *a2;
  if ((v2 - 2) >= 2)
  {
    if (v2 != 47) {
      return BlueFin::GlPePwrStateMgr::NormalMode;
    }
    if (*(unsigned char *)(a1 + 208))
    {
      if (*(unsigned char *)(a1 + 256))
      {
        *(unsigned char *)(a1 + 248) = 0;
        int v9 = 0;
        memset(v7, 0, 13);
        _WORD v7[2] = 0;
        v8[0] = 0;
        *(void *)((char *)v8 + 6) = 0;
        BlueFin::GlPeKF::GetDataForLowPowerDecision(*(void *)(a1 + 152), (uint64_t)v7);
        *(unsigned char *)(a1 + 248) = BlueFin::GlPePwrStateMgr::LowPowerAllowed(a1, 1, *(unsigned __int8 *)(a1 + 209), *(unsigned __int8 *)(a1 + 210), *(unsigned __int8 *)(a1 + 211), (unsigned __int8 *)v7);
        int v4 = BlueFin::GlPePwrStateMgr::ComputeLowPowerState((BlueFin::GlPePwrStateMgr *)a1);
        char v5 = v4;
        BlueFin::GlPePwrStateMgr::Print(a1, "Entry", v4);
        if (v5)
        {
          *(unsigned char *)(*(void *)(a1 + 120) + 54844) = 1;
          BlueFin::QHsm::tran((void *)a1, (uint64_t (*)())BlueFin::GlPePwrStateMgr::Wait4Me, (uint64_t)"&GlPePwrStateMgr::Wait4Me");
        }
      }
      else if (*(_DWORD *)(a1 + 252))
      {
        GlCustomLog(15, "PMM::pe -LpEntry (%u.%03us remain)\n");
      }
      else
      {
        GlCustomLog(15, "PMM::pe -LpEntry (not tracking)\n");
      }
    }
    else
    {
      GlCustomLog(15, "PMM::pe -LpEntry disabled\n");
    }
  }
  return 0;
}

uint64_t (*BlueFin::GlPePwrStateMgr::NormalMode(BlueFin::GlPePwrStateMgr *a1, unsigned __int8 *a2))()
{
  int v2 = *a2;
  if (v2 == 48)
  {
    uint64_t v3 = 0;
    *((unsigned char *)a1 + 208) = a2[1] != 0;
  }
  else
  {
    if (v2 != 3)
    {
      if (v2 != 2) {
        return BlueFin::QHsm::top;
      }
      *((unsigned char *)a1 + 21BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
      BlueFin::GlPePwrStateMgr::ComputeLowPowerState(a1);
    }
    return 0;
  }
  return (uint64_t (*)())v3;
}

uint64_t BlueFin::GlPePwrStateMgr::ComputeLowPowerState(BlueFin::GlPePwrStateMgr *this)
{
  int v4 = &v6;
  char v5 = 3;
  uint64_t v6 = 0;
  int v7 = 0;
  if (*((unsigned char *)this + 257) && *((unsigned char *)this + 248) && *((unsigned char *)this + 208) && *((unsigned char *)this + 258))
  {
    LODWORD(v6) = 2;
    uint64_t v2 = 1;
  }
  else
  {
    uint64_t v2 = 0;
  }
  if (!BlueFin::GlSetBase::operator==((uint64_t)this + 216, (uint64_t)&v4))
  {
    *((unsigned char *)this + 212) = 1;
    BlueFin::GlSetBase::operator=((uint64_t)this + 216, (uint64_t)&v4);
    *(void *)((char *)this + 228) = v6;
    *((_DWORD *)this + 59) = v7;
  }
  return v2;
}

void BlueFin::GlMeSrdAcqMgr::ProcessPending(BlueFin::GlMeSrdAcqMgr *this, int a2)
{
  if (!*((unsigned char *)this + 104))
  {
    DeviceFaultNotify("glmesrd_acq_mgr.cpp", 102, "ProcessPending", (char)"m_bAllocated");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_acq_mgr.cpp", 102, "m_bAllocated");
  }
  uint64_t v4 = *((void *)this + 1);
  *(_DWORD *)(v4 + 22768) = a2;
  BlueFin::GlMeSrdAcqMgrSm::UpdateSvidControl((const void **)v4);
  BlueFin::GlMeSrdSatTrackMgr::UpdateState((BlueFin::GlMeSrdSatTrackMgr *)(*((void *)this + 1) + 14352));
  BlueFin::GlMeSrdAcqMgrSm::UpdateDeferredKill(*((BlueFin::GlMeSrdAcqMgrSm **)this + 1));
  BlueFin::GlMeSrdAcqMgrSm::UpdateStateMachineTransitions(*((BlueFin::GlMeSrdAcqMgrSm **)this + 1));
  BlueFin::GlMeSrdAcqMgrSm::UpdatePostSearchMgr(*((BlueFin::GlMeSrdAcqMgrSm **)this + 1));
  BlueFin::GlMeSrdAcqMgrSm::UpdateSvidToSearchForMgrs(*((BlueFin::GlMeSrdAcqMgrSm **)this + 1));
  BlueFin::GlMeSrdAcqMgrSm::UpdateAidingMgr(*((BlueFin::GlMeSrdAcqMgrSm **)this + 1));
  uint64_t v5 = *((void *)this + 1);
  int v6 = *(_DWORD *)(v5 + 22768);
  int v7 = (void *)(v5 + 14352);
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(v5 + 48) + 80))(*(void *)(v5 + 48));
  BlueFin::GlMeSrdSatTrackMgr::ProcessPending(v7, v6, v8);
  uint64_t v9 = 0;
  uint64_t v10 = *((void *)this + 1);
  int v11 = (unsigned int *)(v10 + 22768);
  uint64_t v12 = v10 + 22688;
  do
  {
    (*(void (**)(void, void))(**(void **)(v12 + v9) + 56))(*(void *)(v12 + v9), *v11);
    v9 += 8;
  }
  while (v9 != 80);
  uint64_t v13 = *((void *)this + 1);
  uint64_t v14 = v13 + 3520;
  uint64_t v15 = (*(uint64_t (**)(void))(**(void **)(v13 + 48) + 80))(*(void *)(v13 + 48));
  BlueFin::GlMeSrdSatMgr::ProcessPending(v14, a2, v15, *(unsigned __int8 *)(*((void *)this + 1) + 24864));
  uint64_t v16 = *((void *)this + 1);
  uint64_t v17 = v16 + 240;
  BlueFin::GlMeSrdSatMgr::GetLowLevelAllocatedSvidList((BlueFin::GlMeSrdSatMgr *)(v16 + 3520), (uint64_t)v19);
  BlueFin::GlMeSrdSatMgr::GetRecentlyKilledWaiting4AckSvIdList((BlueFin::GlMeSrdSatMgr *)(*((void *)this + 1) + 3520), (uint64_t)&v18);
  BlueFin::GlMeSrdAidingMgr::CleanupUnusedAidIds(v17, (uint64_t)v19);
  BlueFin::GlMeSrdAcqMgrSm::UpdateResources(*((const void ***)this + 1));
}

unint64_t BlueFin::GlMeSrdSharedSatSearchMgr::ProcessPending(BlueFin::GlMeSrdSharedSatSearchMgr *this)
{
  uint64_t v2 = (const void **)((char *)this + 80);
  uint64_t v3 = (const void **)((char *)this + 256);
  BlueFin::GlSvIdSet::operator~((const void **)this + 32, (uint64_t)&v38);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v31, (unsigned int *)v33, 8u, v2);
  uint64_t v34 = &v36;
  LOBYTE(v35) = 8;
  long long v36 = 0u;
  long long v37 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v31, (int **)&v34, &v38);
  BlueFin::GlSetBase::operator=((uint64_t)&v31, (uint64_t)&v34);
  v33[0] = v36;
  v33[1] = v37;
  uint64_t v4 = v31;
  int v5 = *v31;
  if (*v31) {
    goto LABEL_2;
  }
  if (v32 >= 2uLL)
  {
    if (v31[1]) {
      goto LABEL_2;
    }
    uint64_t v13 = 2;
    do
    {
      if (v32 == v13) {
        goto LABEL_28;
      }
    }
    while (!v31[v13++]);
    if (v13 - 1 < (unint64_t)v32)
    {
LABEL_2:
      LOBYTE(v34) = *((unsigned char *)this + 136);
      memcpy(&v35, *((const void **)this + 16), 4 * v34);
      WORD1(v34) = 0;
      BYTE1(v34) = 0;
      HIDWORD(v34) = v35;
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v34);
      if (BYTE1(v34) != v34)
      {
        do
        {
          uint64_t v4 = v31;
          if (!*v31)
          {
            if (v32 < 2uLL) {
              goto LABEL_15;
            }
            if (!v31[1])
            {
              uint64_t v6 = 2;
              do
              {
                if (v32 == v6) {
                  goto LABEL_15;
                }
              }
              while (!v31[v6++]);
              if (v6 - 1 >= (unint64_t)v32) {
                goto LABEL_15;
              }
            }
          }
          unsigned int v8 = BYTE2(v34);
          BlueFin::GlMeSrdSatMgr::GetSvid(*((void **)this + 2), BYTE2(v34), &v38);
          if (((unint64_t)*(unsigned int *)((char *)v31 + (((unint64_t)v38 >> 3) & 0x1C)) >> (v38 & 0x1F)))
          {
            BlueFin::GlSetBase::Remove((uint64_t)&v31, v38);
            BlueFin::GlMeSrdSearchMgrBase::StopSat(this, v8);
          }
          BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v34);
        }
        while (BYTE1(v34) != v34);
        uint64_t v4 = v31;
        int v5 = *v31;
      }
      if (!v5)
      {
LABEL_15:
        if (v32 < 2uLL) {
          goto LABEL_28;
        }
        if (!v4[1])
        {
          uint64_t v9 = 2;
          do
          {
            if (v32 == v9) {
              goto LABEL_28;
            }
          }
          while (!v4[v9++]);
          if (v9 - 1 >= (unint64_t)v32) {
            goto LABEL_28;
          }
        }
      }
      int v11 = "otSvidStopScan.IsEmpty()";
      DeviceFaultNotify("glmesrd_shared_sat_search_mgr.cpp", 257, "RemoveSvidFromScan", (char)"otSvidStopScan.IsEmpty()");
      int v12 = 257;
      goto LABEL_65;
    }
  }
LABEL_28:
  if (*((unsigned char *)this + 416))
  {
    BlueFin::GlSvIdSet::operator~((const void **)this + 40, (uint64_t)&v28);
    uint64_t v15 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v38, (unsigned int *)&v40, 8u, v3);
    uint64_t v34 = &v36;
    LOBYTE(v35) = 8;
    long long v36 = 0u;
    long long v37 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v15, (int **)&v34, (int **)&v28);
    BlueFin::GlSetBase::operator=((uint64_t)&v38, (uint64_t)&v34);
    long long v40 = v36;
    long long v41 = v37;
    BlueFin::GlSetBase::operator|=((uint64_t)this + 368, (uint64_t)&v38);
  }
  BlueFin::GlSetBase::operator=((uint64_t)this + 320, (uint64_t)v3);
  *(_OWORD *)((char *)this + 332) = *(_OWORD *)((char *)this + 268);
  *(_OWORD *)((char *)this + 348) = *(_OWORD *)((char *)this + 284);
  BlueFin::GlSetBase::operator&=((uint64_t)this + 368, (uint64_t)this + 320);
  BlueFin::GlSetBase::operator&=((uint64_t)this + 424, (uint64_t)this + 320);
  BlueFin::GlMeSrdSharedSatSearchMgr::StopSats(this, *((const void **)this + 20), *((unsigned char *)this + 168), 1);
  if (BlueFin::GlSetBase::HasAny((BlueFin::GlMeSrdSharedSatSearchMgr *)((char *)this + 192)))
  {
    BlueFin::GlMeSrdSatMgr::GetSvidSetFromSatidSet(*((void **)this + 2), (uint64_t)this + 192, (uint64_t)&v38);
    BlueFin::GlMeSrdSharedSatSearchMgr::StopSats(this, *((const void **)this + 24), *((unsigned char *)this + 200), 0);
    BlueFin::GlMeSrdSharedSatSearchMgr::AddSvidToScan(this, (BlueFin::GlSvIdSet *)&v38);
    if (*v38) {
      goto LABEL_32;
    }
    if (v39 < 2u) {
      goto LABEL_41;
    }
    if (v38[1])
    {
LABEL_32:
      LOBYTE(v34) = v39;
      memcpy(&v35, v38, 4 * v39);
      WORD1(v34) = 0;
      BYTE1(v34) = 0;
      HIDWORD(v34) = v35;
      while (1)
      {
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v34);
        if (BYTE1(v34) == v34) {
          break;
        }
        BlueFin::GlMeSrdSharedSatSearchMgr::MarkSvidAsScanned((uint64_t)this, BYTE2(v34));
      }
    }
    else
    {
      uint64_t v16 = 2;
      while (v39 != v16)
      {
        if (v38[v16++])
        {
          if (v16 - 1 < (unint64_t)v39) {
            goto LABEL_32;
          }
          break;
        }
      }
    }
  }
LABEL_41:
  int v18 = *((unsigned __int8 *)this + 416);
  if (*((unsigned char *)this + 416) || !BlueFin::GlSetBase::HasAny((BlueFin::GlMeSrdSharedSatSearchMgr *)((char *)this + 320)))
  {
LABEL_47:
    if (v18 && BlueFin::GlSetBase::operator==((uint64_t)this + 320, (uint64_t)this + 368))
    {
      *((unsigned char *)this + 416) = 0;
      bzero(*((void **)this + 46), ((4 * *((unsigned __int8 *)this + 376) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
      BlueFin::GlSetBase::Add((uint64_t)this + 368, (int **)this + 53);
      bzero(*((void **)this + 53), ((4 * *((unsigned __int8 *)this + 432) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
      ++*((_DWORD *)this + 118);
      (*(void (**)(void, BlueFin::GlMeSrdSharedSatSearchMgr *))(**((void **)this + 38) + 24))(*((void *)this + 38), this);
    }
    goto LABEL_50;
  }
  uint64_t v19 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v38, (unsigned int *)&v40, 8u, (const void **)this + 46);
  uint64_t v34 = &v36;
  LOBYTE(v35) = 8;
  long long v36 = 0u;
  long long v37 = 0u;
  BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)v19, (int **)&v34, (int **)v2);
  BlueFin::GlSetBase::operator=((uint64_t)&v38, (uint64_t)&v34);
  long long v40 = v36;
  long long v41 = v37;
  if (!BlueFin::GlSetBase::operator==((uint64_t)this + 320, (uint64_t)&v38))
  {
    int v18 = *((unsigned __int8 *)this + 416);
    goto LABEL_47;
  }
  if (BlueFin::GlSetBase::HasAny((BlueFin::GlMeSrdSharedSatSearchMgr *)((char *)this + 424)))
  {
    int v11 = "m_otSvidNextRotationScanned.IsEmpty()";
    DeviceFaultNotify("glmesrd_shared_sat_search_mgr.cpp", 139, "UpdateRotationStatus", (char)"m_otSvidNextRotationScanned.IsEmpty()");
    int v12 = 139;
    goto LABEL_65;
  }
  *((unsigned char *)this + 416) = 1;
  (*(void (**)(void, BlueFin::GlMeSrdSharedSatSearchMgr *))(**((void **)this + 38) + 16))(*((void *)this + 38), this);
LABEL_50:
  if (!BlueFin::GlSetBase::operator==((uint64_t)this + 320, (uint64_t)v3))
  {
    BlueFin::GlSetBase::operator&=((uint64_t)this + 320, (uint64_t)v3);
    BlueFin::GlSetBase::operator&=((uint64_t)this + 368, (uint64_t)this + 320);
    BlueFin::GlSetBase::operator&=((uint64_t)this + 424, (uint64_t)this + 320);
  }
  BlueFin::GlSvIdSet::operator~((const void **)this + 46, (uint64_t)&v26);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v28, (unsigned int *)&v29, 8u, (const void **)this + 40);
  uint64_t v34 = &v36;
  LOBYTE(v35) = 8;
  long long v36 = 0u;
  long long v37 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v28, (int **)&v34, (int **)&v26);
  BlueFin::GlSetBase::operator=((uint64_t)&v28, (uint64_t)&v34);
  long long v29 = v36;
  long long v30 = v37;
  BlueFin::GlSvIdSet::operator~(v2, (uint64_t)v25);
  unint64_t v20 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v38, (unsigned int *)&v40, 8u, &v28);
  uint64_t v34 = &v36;
  LOBYTE(v35) = 8;
  long long v36 = 0u;
  long long v37 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v20, (int **)&v34, v25);
  BlueFin::GlSetBase::operator=((uint64_t)&v38, (uint64_t)&v34);
  long long v40 = v36;
  long long v41 = v37;
  if (*((unsigned char *)this + 416))
  {
    if (!*v38)
    {
      if (v39 < 2uLL) {
        goto LABEL_60;
      }
      if (!v38[1])
      {
        uint64_t v21 = 2;
        do
        {
          if (v39 == v21) {
            goto LABEL_60;
          }
        }
        while (!v38[v21++]);
        if (v21 - 1 >= (unint64_t)v39)
        {
LABEL_60:
          BlueFin::GlSvIdSet::operator~((const void **)this + 53, (uint64_t)v25);
          BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v26, (unsigned int *)v27, 8u, (const void **)this + 40);
          uint64_t v34 = &v36;
          LOBYTE(v35) = 8;
          long long v36 = 0u;
          long long v37 = 0u;
          BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v26, (int **)&v34, v25);
          BlueFin::GlSetBase::operator=((uint64_t)&v26, (uint64_t)&v34);
          v27[0] = v36;
          v27[1] = v37;
          BlueFin::GlSvIdSet::operator~(v2, (uint64_t)v24);
          BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v28, (unsigned int *)&v29, 8u, &v26);
          uint64_t v34 = &v36;
          LOBYTE(v35) = 8;
          long long v36 = 0u;
          long long v37 = 0u;
          BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v28, (int **)&v34, v24);
          BlueFin::GlSetBase::operator=((uint64_t)&v28, (uint64_t)&v34);
          long long v29 = v36;
          long long v30 = v37;
          BlueFin::GlSetBase::operator=((uint64_t)&v38, (uint64_t)&v28);
          long long v40 = v29;
          long long v41 = v30;
          goto LABEL_61;
        }
      }
    }
    int v11 = "otSvidToStart.IsEmpty()";
    DeviceFaultNotify("glmesrd_shared_sat_search_mgr.cpp", 104, "ProcessPending", (char)"otSvidToStart.IsEmpty()");
    int v12 = 104;
LABEL_65:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_shared_sat_search_mgr.cpp", v12, v11);
  }
LABEL_61:
  unint64_t result = BlueFin::GlMeSrdSharedSatSearchMgr::AddSvidToScan(this, (BlueFin::GlSvIdSet *)&v38);
  if (BlueFin::GlUtils::m_ucEnabled) {
    return BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x4F);
  }
  return result;
}

unsigned __int8 *BlueFin::GlMeSrdSharedSatSearchMgr::StopSats(BlueFin::GlMeSrdSearchMgrBase *a1, const void *a2, unsigned __int8 a3, int a4)
{
  unsigned __int8 v9 = a3;
  memcpy(v13, a2, 4 * a3);
  __int16 v11 = 0;
  unsigned __int8 v10 = 0;
  int v12 = v13[0];
  while (1)
  {
    unint64_t result = BlueFin::GlSetIterator::operator++(&v9);
    if (v10 == v9) {
      break;
    }
    unsigned int v7 = v11;
    BlueFin::GlMeSrdSatMgr::GetSvid(*((void **)a1 + 2), v11, &v8);
    if (a4) {
      BlueFin::GlMeSrdSharedSatSearchMgr::MarkSvidAsScanned((uint64_t)a1, v8);
    }
    BlueFin::GlMeSrdSearchMgrBase::StopSat(a1, v7);
  }
  return result;
}

uint64_t BlueFin::GlMeSrdSharedSatSearchMgr::AddSvidToScan(BlueFin::GlMeSrdSharedSatSearchMgr *this, BlueFin::GlSvIdSet *a2)
{
  int v4 = *((unsigned __int8 *)this + 312);
  uint64_t result = BlueFin::GlSetBase::Cnt((BlueFin::GlMeSrdSharedSatSearchMgr *)((char *)this + 80));
  int v6 = v4 - result;
  uint64_t v7 = *((void *)this + 1);
  if (*(_WORD *)(v7 + 14)) {
    BOOL v8 = v6 < 1;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 1;
    while (1)
    {
      uint64_t result = BlueFin::GlSetBase::HasAny(a2);
      if (!result) {
        return result;
      }
      unint64_t v11 = *(unsigned __int16 *)(*(void *)(v7 + 16) + v9);
      if ((*(unsigned int *)(*(void *)a2 + ((v11 >> 3) & 0x1C)) >> (v11 & 0x1F))) {
        break;
      }
LABEL_57:
      v9 += 8;
      if (v10++ >= *(unsigned __int16 *)(v7 + 14) || v6 <= 0) {
        return result;
      }
    }
    uint64_t result = BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(*((void *)this + 2) + 56));
    if (!result) {
      return result;
    }
    unsigned __int8 v39 = v11;
    if (((*(uint64_t (**)(void, unsigned __int8 *))(**((void **)this + 4) + 472))(*((void *)this + 4), &v39) & 1) == 0)goto LABEL_54; {
    if (v39 - 1 < 0x20 || v39 - 66 < 0xA)
    }
    {
      int v13 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 4) + 832))(*((void *)this + 4), 10);
      uint64_t v12 = *((void *)this + 1);
      if (v13)
      {
        uint64_t v14 = *(void *)(v12 + 16);
        if (*(unsigned char *)(v14 + v9 + 7))
        {
          int v28 = *(unsigned __int8 *)(v14 + v9);
LABEL_55:
          uint64_t result = BlueFin::GlSetBase::Remove((uint64_t)a2, v28);
          goto LABEL_56;
        }
      }
    }
    else
    {
      uint64_t v12 = *((void *)this + 1);
    }
    v36[0] = 1;
    int v15 = *(_DWORD *)(*(void *)(v12 + 16) + v9 + 4);
    if ((v15 & 0x200) != 0) {
      unint64_t v16 = ((unint64_t)*(unsigned int *)(*(void *)(*((void *)this + 3) + 880)
    }
                                               + (((unint64_t)v39 >> 3) & 0x1C)) >> (v39 & 0x1F)) & 1;
    else {
      LOBYTE(v16) = 0;
    }
    v36[1] = v16;
    if ((v15 & 0x400) != 0) {
      unint64_t v17 = ((unint64_t)*(unsigned int *)(*(void *)(*((void *)this + 3) + 928)
    }
                                               + (((unint64_t)v39 >> 3) & 0x1C)) >> (v39 & 0x1F)) & 1;
    else {
      LOBYTE(v17) = 0;
    }
    char v37 = v17;
    if ((*(unsigned int (**)(void))(**((void **)this + 4) + 1200))(*((void *)this + 4))) {
      BOOL v18 = v37 == 0;
    }
    else {
      BOOL v18 = 1;
    }
    if (!v18)
    {
      v33[0] = 1;
      int v34 = 2;
      __int16 v35 = 64;
      uint64_t result = BlueFin::GlMeSrdSearchMgrBase::GetStrategyId(this, (const BlueFin::GlSignalId *)v33);
      if (result == 250) {
        goto LABEL_56;
      }
    }
    int v19 = *(_DWORD *)(*(void *)(*((void *)this + 1) + 16) + v9 + 4);
    if ((v19 & 0x10000) == 0)
    {
      BOOL v20 = 0;
      if ((v19 & 0x1000000) == 0)
      {
        BOOL v21 = 0;
LABEL_43:
        int v23 = v39;
        goto LABEL_45;
      }
      int v23 = v39;
      if ((((unint64_t)*(unsigned int *)(*(void *)(*((void *)this + 3) + 1024)
                                               + (((unint64_t)v39 >> 3) & 0x1C)) >> (v39 & 0x1F)) & 1) == 0)
      {
LABEL_44:
        BOOL v21 = 0;
        goto LABEL_45;
      }
      goto LABEL_41;
    }
    uint64_t v22 = *((void *)this + 3);
    int v23 = v39;
    unint64_t v24 = (unint64_t)v39 >> 5;
    uint64_t v25 = 1 << (v39 & 0x1F);
    uint64_t v26 = v25 & *(_DWORD *)(*(void *)(v22 + 976) + 4 * v24);
    if ((v19 & 0x1000000) != 0)
    {
      BOOL v20 = v26 != 0;
      uint64_t v27 = v25 & *(_DWORD *)(*(void *)(v22 + 1024) + 4 * v24);
      BOOL v21 = v27 != 0;
      if (!v26)
      {
        BOOL v20 = 0;
        if (!v27) {
          goto LABEL_44;
        }
LABEL_41:
        BOOL v21 = 1;
        goto LABEL_42;
      }
    }
    else
    {
      BOOL v21 = 0;
      if ((v25 & *(_DWORD *)(*(void *)(v22 + 976) + 4 * v24)) == 0)
      {
        BOOL v20 = 0;
LABEL_45:
        if ((v23 - 76) >= 0x3F) {
          BOOL v29 = v21;
        }
        else {
          BOOL v29 = v20;
        }
        BOOL v38 = v29;
        if (v29)
        {
          int v30 = 3;
        }
        else if ((*(unsigned int (**)(void))(**((void **)this + 4) + 1200))(*((void *)this + 4)))
        {
          int v30 = 2;
        }
        else
        {
          int v30 = 0;
        }
        v33[0] = *(unsigned char *)(*(void *)(*((void *)this + 1) + 16) + v9);
        BlueFin::GlMeSrdSearchMgrBase::CreateSatAndStartSat((uint64_t)this, v33, v30, v36);
        --v6;
LABEL_54:
        int v28 = *(unsigned __int8 *)(*(void *)(*((void *)this + 1) + 16) + v9);
        goto LABEL_55;
      }
      BOOL v20 = 1;
    }
    if ((v19 & 0x100000) != 0 && v39 - 76 <= 0x3E)
    {
      DeviceFaultNotify("glmesrd_shared_sat_search_mgr.cpp", 211, "AddSvidToScan", (char)"!m_rSigAid.signals[i].EnableBdsB1I()");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_shared_sat_search_mgr.cpp", 211, "!m_rSigAid.signals[i].EnableBdsB1I()");
    }
LABEL_42:
    v33[0] = 1;
    int v34 = 3;
    __int16 v35 = 96;
    uint64_t result = BlueFin::GlMeSrdSearchMgrBase::GetStrategyId(this, (const BlueFin::GlSignalId *)v33);
    if (result == 250)
    {
LABEL_56:
      uint64_t v7 = *((void *)this + 1);
      goto LABEL_57;
    }
    goto LABEL_43;
  }
  return result;
}

unsigned __int8 *BlueFin::GlMeSrdSatMgr::GetRecentlyKilledWaiting4AckSvIdList@<X0>(BlueFin::GlMeSrdSatMgr *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 12) = 0u;
  uint64_t v3 = a2 + 12;
  *(void *)a2 = a2 + 12;
  *(unsigned char *)(a2 + 8) = 8;
  *(_OWORD *)(a2 + 28) = 0u;
  unsigned __int8 v7 = *((unsigned char *)this + 192);
  memcpy(v11, *((const void **)this + 23), 4 * v7);
  __int16 v9 = 0;
  unsigned __int8 v8 = 0;
  int v10 = v11[0];
  uint64_t result = BlueFin::GlSetIterator::operator++(&v7);
  if (v8 != v7)
  {
    uint64_t v5 = *((void *)this + 786);
    do
    {
      unint64_t v6 = *(unsigned __int8 *)(v5 + 52 * v9);
      *(_DWORD *)(v3 + ((v6 >> 3) & 0x1C)) |= 1 << v6;
      uint64_t result = BlueFin::GlSetIterator::operator++(&v7);
    }
    while (v8 != v7);
  }
  return result;
}

unsigned __int8 *BlueFin::GlMeSrdSatMgr::GetLowLevelAllocatedSvidList@<X0>(BlueFin::GlMeSrdSatMgr *this@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v8 = (int *)v10;
  LOBYTE(v9) = 4;
  int v4 = (char *)this + 392;
  v10[1] = 0;
  v10[0] = 0;
  BlueFin::GlSetBase::OperatorBinaryInversion((uint64_t)this + 56, &v8);
  unint64_t v11 = (int *)v13;
  unsigned __int8 v12 = 4;
  v13[1] = 0;
  v13[0] = 0;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v4, &v11, &v8);
  *(_OWORD *)(a2 + 12) = 0u;
  *(void *)a2 = a2 + 12;
  *(unsigned char *)(a2 + 8) = 8;
  *(_OWORD *)(a2 + 28) = 0u;
  LOBYTE(v8) = v12;
  memcpy(&v9, v11, 4 * v12);
  WORD1(v8) = 0;
  BYTE1(v8) = 0;
  HIDWORD(v8) = v9;
  uint64_t result = BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v8);
  if (BYTE1(v8) != v8)
  {
    uint64_t v6 = *((void *)this + 786);
    do
    {
      unint64_t v7 = *(unsigned __int8 *)(v6 + 52 * SWORD1(v8));
      *(_DWORD *)(a2 + 12 + ((v7 >> 3) & 0x1C)) |= 1 << v7;
      uint64_t result = BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v8);
    }
    while (BYTE1(v8) != v8);
  }
  return result;
}

unsigned __int8 *BlueFin::GlMeSrdSatTrackMgr::UpdateState(BlueFin::GlMeSrdSatTrackMgr *this)
{
  unsigned __int8 v25 = *((unsigned char *)this + 4248);
  memcpy(v29, *((const void **)this + 530), 4 * v25);
  unsigned __int16 v27 = 0;
  unsigned __int8 v26 = 0;
  int v28 = v29[0];
  BlueFin::GlSetIterator::operator++(&v25);
  while (v26 != v25)
  {
    BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)v23, v27);
    uint64_t v2 = *(void *)this;
    BlueFin::GlMeSrdSatMgr::GetSignalIndex(*((void **)this + 1), v23, (uint64_t)v21);
    LODWORD(v3) = *((_DWORD *)this + 1812);
    double v4 = (double)v3;
    uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 3) + 992))();
    int v6 = (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t, double))(*(void *)v2 + 40))(v2, v21, v5, v4);
    unsigned int v7 = v23[0] + 100 * v24;
    unsigned __int8 v8 = (char *)this + 4560;
    if (v6)
    {
      *(_DWORD *)(*((void *)this + 540) + 4 * (v7 >> 5)) |= 1 << v7;
      unsigned __int8 v8 = (char *)this + 4640;
    }
    BlueFin::GlSetBase::Remove((uint64_t)v8, (__int16)v7);
    BlueFin::GlSetIterator::operator++(&v25);
  }
  unsigned __int8 v25 = *((unsigned char *)this + 4088);
  memcpy(v29, *((const void **)this + 510), 4 * v25);
  unsigned __int16 v27 = 0;
  unsigned __int8 v26 = 0;
  int v28 = v29[0];
  for (uint64_t result = BlueFin::GlSetIterator::operator++(&v25); v26 != v25; uint64_t result = BlueFin::GlSetIterator::operator++(&v25))
  {
    unsigned __int8 v10 = v27;
    unsigned int v11 = v27;
    BlueFin::GlMeSrdSatMgr::GetSvid(*((void **)this + 1), v27, v21);
    if ((v21[0] + 117) < 0xC1u)
    {
LABEL_10:
      BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)v23, v11, 0);
    }
    else
    {
      unsigned __int8 v12 = 0;
      while (BlueFin::GlMeSrdSatMgr::GetNumSignals(*((BlueFin::GlMeSrdSatMgr **)this + 1), v10) > v12)
      {
        if (!BlueFin::GlMeSrdSatMgr::GetSignalIndex(*((BlueFin::GlMeSrdSatMgr **)this + 1), v10, v12++)) {
          goto LABEL_10;
        }
      }
      BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)v23, v10, 0);
      BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)v21, v10, 3);
      v23[0] = v21[0];
      int v24 = v22;
    }
    BlueFin::GlMeSrdSatMgr::GetSvid(*((void **)this + 1), v10, v21);
    if (v21[0] - 1 < 0x20
      || (BlueFin::GlMeSrdSatMgr::GetSvid(*((void **)this + 1), v10, &v20), v20 - 66 < 0xA))
    {
      unsigned __int8 v14 = 0;
      while (BlueFin::GlMeSrdSatMgr::GetNumSignals(*((BlueFin::GlMeSrdSatMgr **)this + 1), v10) > v14)
      {
        if (!BlueFin::GlMeSrdSatMgr::GetSignalIndex(*((BlueFin::GlMeSrdSatMgr **)this + 1), v10, v14++)) {
          goto LABEL_19;
        }
      }
      BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)v21, v10, 3);
      v23[0] = v21[0];
      int v24 = v22;
    }
LABEL_19:
    if (*((unsigned __int16 *)this
         + 16 * BlueFin::GlMeSrdSatMgr::GetTrackChannel(*((void *)this + 1), v23)
         + 16) >= 4u)
    {
      uint64_t v16 = *(void *)this;
      BlueFin::GlMeSrdSatMgr::GetSignalIndex(*((void **)this + 1), v23, (uint64_t)v21);
      LODWORD(v17) = *((_DWORD *)this + 1812);
      double v18 = (double)v17;
      uint64_t v19 = (*(uint64_t (**)(void))(**((void **)this + 3) + 992))();
      if (((*(uint64_t (**)(uint64_t, unsigned char *, uint64_t, double))(*(void *)v16 + 40))(v16, v21, v19, v18) & 1) == 0) {
        *(_DWORD *)(*((void *)this + 580) + 4 * ((v23[0] + 100 * v24) >> 5)) |= 1 << (v23[0] + 100 * v24);
      }
    }
  }
  return result;
}

unsigned __int8 *BlueFin::GlMeSrdAcqMgrSm::UpdatePostSearchMgr(BlueFin::GlMeSrdAcqMgrSm *this)
{
  uint64_t v2 = (char *)this + 13928;
  unsigned __int8 v6 = *((unsigned char *)this + 13928);
  memcpy(v10, *((const void **)this + 1740), 4 * v6);
  unsigned __int16 v8 = 0;
  unsigned __int8 v7 = 0;
  int v9 = v10[0];
  uint64_t result = BlueFin::GlSetIterator::operator++(&v6);
  if (v7 != v6)
  {
    while (1)
    {
      unsigned int v4 = v8;
      if ((((unint64_t)*(unsigned int *)(*((void *)this + 485) + (((unint64_t)v8 >> 3) & 0x1C)) >> (v8 & 0x1F)) & 1) != 0
        || !BlueFin::GlMeSrdSatMgr::GetLastActiveMs((BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 3520), v8))
      {
        break;
      }
      int v5 = *((_DWORD *)v2 + 2210);
      if ((int)(v5 - BlueFin::GlMeSrdSatMgr::GetLastActiveMs((BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 3520), v4)) > 8000)
      {
        GlCustomLog(12, "SatId %u in PostSearchMgr for too GlIntS32, killing\n");
LABEL_9:
        BlueFin::GlSetBase::Remove((uint64_t)this + 13920, v4);
        BlueFin::GlMeSrdSatMgr::KillSat((BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 3520), v4);
      }
LABEL_10:
      uint64_t result = BlueFin::GlSetIterator::operator++(&v6);
      if (v7 == v6) {
        return result;
      }
    }
    if ((v2[10644] & 2) == 0
      || BlueFin::GlMeSrdSatPostSearchMgr::GetSearchMgrSource((BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 13920), v4))
    {
      goto LABEL_10;
    }
    GlCustomLog(12, "SatId %u kill GPS 2DBIT due to clock model update.\n");
    goto LABEL_9;
  }
  return result;
}

unsigned __int8 *BlueFin::GlMeSrdAcqMgrSm::UpdateDeferredKill(BlueFin::GlMeSrdAcqMgrSm *this)
{
  uint64_t v19 = v21;
  uint64_t v2 = (char *)this + 22768;
  char v20 = 4;
  v21[1] = 0;
  v21[0] = 0;
  uint64_t v16 = v18;
  char v17 = 4;
  v18[1] = 0;
  v18[0] = 0;
  LODWORD(v14) = *((unsigned __int8 *)this + 24544);
  unint64_t v3 = (void *)*((void *)this + 3067);
  size_t v4 = 4 * v14;
  memcpy(v15, v3, v4);
  HIDWORD(v14) = v15[0];
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v14);
  if (BYTE1(v14) != v14)
  {
    do
    {
      unint64_t v5 = BYTE2(v14);
      if (BlueFin::GlMeSrdSatTrackMgr::HasSat((BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 14352), BYTE2(v14)))
      {
        *(_DWORD *)((char *)v19 + ((v5 >> 3) & 0x1C)) |= 1 << v5;
      }
      else
      {
        uint64_t v6 = v5 >> 5;
        uint64_t v7 = 1 << (v5 & 0x1F);
        if ((v7 & *(_DWORD *)(*((void *)this + 1740) + 4 * v6)) != 0)
        {
          *((_DWORD *)v16 + v6) |= 1 << (v5 & 0x1F);
        }
        else
        {
          uint64_t v8 = 0;
          while (1)
          {
            int v9 = *(void **)((char *)this + v8 + 22688);
            if ((v7 & *(_DWORD *)(v9[16] + 4 * v6)) != 0) {
              break;
            }
            v8 += 8;
            if (v8 == 80) {
              goto LABEL_11;
            }
          }
          (*(void (**)(void *, unint64_t))(*v9 + 24))(v9, v5);
          BlueFin::GlMeSrdSatMgr::KillSat((BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 3520), v5);
        }
      }
LABEL_11:
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v14);
    }
    while (BYTE1(v14) != v14);
    unint64_t v3 = (void *)*((void *)this + 3067);
    size_t v4 = 4 * v2[1776];
  }
  bzero(v3, ((v4 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  BlueFin::GlMeSrdAcqMgrSm::KillAndReleaseSatInPostSearch((uint64_t)this, (BlueFin::GlSetBase *)&v16);
  BlueFin::GlMeSrdSatTrackMgr::GetSetSatIdToKill((BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 14352), (uint64_t)&v14);
  unsigned int v11 = (int *)v13;
  char v12 = 4;
  v13[1] = 0;
  v13[0] = 0;
  BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v19, &v11, &v14);
  return BlueFin::GlMeSrdAcqMgrSm::KillAndReleaseSatInTrack((uint64_t)this, (BlueFin::GlSetBase *)&v11);
}

unint64_t BlueFin::GlMeSrdSatTrackMgr::GetSetSatIdToKill@<X0>(BlueFin::GlMeSrdSatTrackMgr *this@<X0>, uint64_t a2@<X8>)
{
  size_t v4 = (char *)this + 4640;
  BlueFin::GlSatCarrIdSet::GetSatIdSetAnyCarrier((BlueFin::GlMeSrdSatTrackMgr *)((char *)this + 4640), a2);
  if (BlueFin::GlUtils::m_ucEnabled) {
    BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x57);
  }
  unint64_t v5 = (BlueFin::GlMeSrdSatTrackMgr *)((char *)this + 4400);
  unint64_t result = (unint64_t)BlueFin::GlSatCarrIdSet::GetSatIdSetAnyCarrier((BlueFin::GlMeSrdSatTrackMgr *)((char *)this + 4400), (uint64_t)&v26);
  if (*v26) {
    goto LABEL_4;
  }
  if (v27 <= 1uLL) {
    return result;
  }
  if (v26[1])
  {
LABEL_4:
    BlueFin::GlSatCarrIdSet::GetSatIdSetAnyCarrier((BlueFin::GlMeSrdSatTrackMgr *)((char *)this + 4400), (uint64_t)&v26);
    if (BlueFin::GlUtils::m_ucEnabled) {
      BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x57);
    }
    uint64_t v7 = (char *)this + 4000;
    BlueFin::GlSatCarrIdSet::GetSatIdSetSignalIndex((uint64_t)v7, 0, (uint64_t)&v22);
    BlueFin::GlSatCarrIdSet::GetSatIdSetSignalIndex((uint64_t)v7, 2, (uint64_t)&v19);
    unsigned __int8 v26 = (int *)v28;
    unsigned __int8 v27 = 4;
    v28[1] = 0;
    v28[0] = 0;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v22, &v26, &v19);
    BlueFin::GlSatCarrIdSet::GetSatIdSetSignalIndex((uint64_t)v7, 2, (uint64_t)&v19);
    BlueFin::GlSatCarrIdSet::GetSatIdSetSignalIndex((uint64_t)v7, 3, (uint64_t)&v15);
    int v22 = &v24;
    char v23 = 4;
    uint64_t v25 = 0;
    uint64_t v24 = 0;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v19, (int **)&v22, (int **)&v15);
    BlueFin::GlSetBase::operator|=((uint64_t)&v26, (uint64_t)&v22);
    BlueFin::GlSatCarrIdSet::GetSatIdSetAnyCarrier(v5, (uint64_t)&v19);
    int v22 = &v24;
    char v23 = 4;
    uint64_t v25 = 0;
    uint64_t v24 = 0;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v26, (int **)&v22, &v19);
    BlueFin::GlSatCarrIdSet::GetSatIdSetSignalIndex((uint64_t)v4, 0, (uint64_t)&v15);
    BlueFin::GlSatCarrIdSet::GetSatIdSetSignalIndex((uint64_t)v4, 2, (uint64_t)&v11);
    uint64_t v19 = (int *)v21;
    char v20 = 4;
    v21[1] = 0;
    v21[0] = 0;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v15, &v19, (int **)&v11);
    BlueFin::GlSatCarrIdSet::GetSatIdSetSignalIndex((uint64_t)v4, 2, (uint64_t)&v11);
    BlueFin::GlSatCarrIdSet::GetSatIdSetSignalIndex((uint64_t)v4, 3, (uint64_t)v10);
    int v15 = &v17;
    char v16 = 4;
    uint64_t v18 = 0;
    uint64_t v17 = 0;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v11, (int **)&v15, v10);
    BlueFin::GlSetBase::operator|=((uint64_t)&v19, (uint64_t)&v15);
    unsigned int v11 = &v13;
    char v12 = 4;
    uint64_t v14 = 0;
    uint64_t v13 = 0;
    BlueFin::GlSetBase::OperatorBinaryInversion((uint64_t)&v19, (int **)&v11);
    int v15 = &v17;
    char v16 = 4;
    uint64_t v18 = 0;
    uint64_t v17 = 0;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v22, (int **)&v15, (int **)&v11);
    unsigned int v11 = &v13;
    char v12 = 4;
    uint64_t v14 = 0;
    uint64_t v13 = 0;
    BlueFin::GlSetBase::OperatorBinaryInversion((uint64_t)&v15, (int **)&v11);
    unint64_t result = BlueFin::GlSetBase::operator&=(a2, (uint64_t)&v11);
    if (BlueFin::GlUtils::m_ucEnabled) {
      return BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x57);
    }
  }
  else
  {
    uint64_t v8 = 2;
    while (v27 != v8)
    {
      if (v26[v8++])
      {
        if (v8 - 1 < (unint64_t)v27) {
          goto LABEL_4;
        }
        return result;
      }
    }
  }
  return result;
}

unsigned __int8 *BlueFin::GlMeSrdAcqMgrSm::KillAndReleaseSatInPostSearch(uint64_t a1, BlueFin::GlSetBase *this)
{
  unint64_t result = (unsigned __int8 *)BlueFin::GlSetBase::HasAny(this);
  if (result)
  {
    unsigned __int8 v8 = *((unsigned char *)this + 8);
    memcpy(v12, *(const void **)this, 4 * v8);
    __int16 v10 = 0;
    unsigned __int8 v9 = 0;
    int v11 = v12[0];
    unint64_t result = BlueFin::GlSetIterator::operator++(&v8);
    if (v9 != v8)
    {
      uint64_t v5 = a1 + 13920;
      uint64_t v6 = (BlueFin::GlMeSrdSatMgr *)(a1 + 3520);
      do
      {
        unsigned int v7 = v10;
        BlueFin::GlSetBase::Remove(v5, v10);
        BlueFin::GlMeSrdSatMgr::KillSat(v6, v7);
        unint64_t result = BlueFin::GlSetIterator::operator++(&v8);
      }
      while (v9 != v8);
    }
  }
  return result;
}

unsigned __int8 *BlueFin::GlMeSrdAcqMgrSm::KillAndReleaseSatInTrack(uint64_t a1, BlueFin::GlSetBase *this)
{
  unint64_t result = (unsigned __int8 *)BlueFin::GlSetBase::HasAny(this);
  if (result)
  {
    unsigned __int8 v8 = *((unsigned char *)this + 8);
    memcpy(v12, *(const void **)this, 4 * v8);
    *(_WORD *)__int16 v10 = 0;
    unsigned __int8 v9 = 0;
    int v11 = v12[0];
    unint64_t result = BlueFin::GlSetIterator::operator++(&v8);
    if (v9 != v8)
    {
      uint64_t v5 = (BlueFin::GlMeSrdSatMgr **)(a1 + 14352);
      uint64_t v6 = (BlueFin::GlMeSrdSatMgr *)(a1 + 3520);
      do
      {
        unsigned int v7 = v10[0];
        BlueFin::GlMeSrdSatTrackMgr::RemoveSat(v5, v10[0]);
        BlueFin::GlMeSrdSatMgr::KillSat(v6, v7);
        unint64_t result = BlueFin::GlSetIterator::operator++(&v8);
      }
      while (v9 != v8);
    }
  }
  return result;
}

uint64_t BlueFin::GlMeSrdAcqMgrSm::UpdateSvidControl(const void **this)
{
  uint64_t v2 = (unsigned int *)(this + 2846);
  if (BlueFin::GlMeSrdAcqMgrSm::IsFirstFix((BlueFin::GlMeSrdAcqMgrSm *)this))
  {
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v47, v52, 8u, this + 2847);
    char v54 = &v55[4];
    v55[0] = 8;
    *(_OWORD *)&v55[4] = xmmword_263BAA8BC;
    *(_OWORD *)&v55[20] = unk_263BAA8CC;
    BlueFin::GlSvIdSet::operator~((const void **)&v54, (uint64_t)&v30);
    BlueFin::GlSetBase::operator&=((uint64_t)&v47, (uint64_t)&v30);
    char v23 = (BlueFin::GlMeSrdSatMgr *)(this + 440);
    BlueFin::GlMeSrdSatMgr::SetBitHistogramEnabled((BlueFin::GlMeSrdSatMgr *)(this + 440), (const BlueFin::GlSvIdSet *)&v47);
    char v82 = &v84;
    char v83 = 8;
    long long v84 = 0u;
    long long v85 = 0u;
    uint64_t v78 = &v80;
    char v79 = 8;
    long long v80 = 0u;
    long long v81 = 0u;
    int v74 = &v76;
    char v75 = 8;
    long long v76 = 0u;
    long long v77 = 0u;
    int v70 = &v72;
    char v71 = 8;
    long long v72 = 0u;
    long long v73 = 0u;
    int v66 = &v68;
    char v67 = 8;
    long long v68 = 0u;
    long long v69 = 0u;
    unsigned int v62 = &v64;
    char v63 = 8;
    long long v64 = 0u;
    long long v65 = 0u;
    LOBYTE(v30) = *((unsigned char *)v2 + 16);
    memcpy(v31, this[2847], 4 * v30);
    WORD1(v30) = 0;
    BYTE1(v30) = 0;
    HIDWORD(v30) = v31[0];
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v30);
    if (BYTE1(v30) != v30)
    {
      unint64_t v3 = this[2877];
      size_t v4 = this[2883];
      uint64_t v5 = this[2889];
      uint64_t v6 = this[2865];
      unsigned int v7 = this[2871];
      do
      {
        unint64_t v8 = (unint64_t)BYTE2(v30) >> 5;
        uint64_t v9 = 1 << (BYTE2(v30) & 0x1F);
        int v10 = 1 << (BYTE2(v30) & 0x1F);
        if ((v9 & v3[v8]) != 0)
        {
          int v11 = this[2859];
          if ((BYTE2(v30) + 117) > 0x23u || (v9 & v11[v8]) != 0)
          {
            *((_DWORD *)&v80 + v8) |= v10;
            if ((v9 & v11[v8]) != 0) {
              *((_DWORD *)&v84 + v8) |= v10;
            }
          }
        }
        if ((v9 & v4[v8]) != 0) {
          *((_DWORD *)&v76 + v8) |= v10;
        }
        if ((v9 & v5[v8]) != 0) {
          *((_DWORD *)&v72 + v8) |= v10;
        }
        if ((v9 & v6[v8]) != 0) {
          *((_DWORD *)&v68 + v8) |= v10;
        }
        if ((v9 & v7[v8]) != 0) {
          *((_DWORD *)&v64 + v8) |= v10;
        }
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v30);
      }
      while (BYTE1(v30) != v30);
    }
    char v12 = (BlueFin::GlMeSrdSatMgr *)(this + 440);
    BlueFin::GlMeSrdSatMgr::SetDataFrmsEnabled(v23, (const BlueFin::GlSvIdSet *)&v82);
    BlueFin::GlMeSrdSatMgr::SetDataBitsEnabled(v23, (const BlueFin::GlSvIdSet *)&v78);
    BlueFin::GlMeSrdSatMgr::SetL2Enabled(v23, (const BlueFin::GlSvIdSet *)&v74);
    BlueFin::GlMeSrdSatMgr::SetL5Enabled(v23, (const BlueFin::GlSvIdSet *)&v70);
    BlueFin::GlMeSrdSatMgr::SetB1CEnabled(v23, (const BlueFin::GlSvIdSet *)&v66);
    uint64_t v13 = (const BlueFin::GlSvIdSet *)&v62;
  }
  else
  {
    char v82 = &v84;
    char v83 = 8;
    long long v84 = 0u;
    long long v85 = 0u;
    uint64_t v78 = &v80;
    char v79 = 8;
    long long v80 = 0u;
    long long v81 = 0u;
    int v74 = &v76;
    char v75 = 8;
    long long v76 = 0u;
    long long v77 = 0u;
    int v70 = &v72;
    char v71 = 8;
    long long v72 = 0u;
    long long v73 = 0u;
    int v66 = &v68;
    char v67 = 8;
    long long v68 = 0u;
    long long v69 = 0u;
    unsigned int v62 = &v64;
    char v63 = 8;
    long long v64 = 0u;
    long long v65 = 0u;
    BOOL v59 = v61;
    char v60 = 8;
    memset(v61, 0, 32);
    char v54 = &unk_270EBF258;
    *(void *)char v55 = 0;
    *(void *)&v55[8] = 0x36A7C5AC00000000;
    *(void *)&v55[16] = 0;
    *(void *)&v55[32] = 0;
    *(_DWORD *)&v55[24] = 2139095039;
    int v56 = 2139095039;
    uint64_t v57 = 0;
    uint64_t v58 = 0x36A7C5AC7F7FFFFFLL;
    (*(void (**)(const void *, unsigned char **, void))(*(void *)this[5] + 96))(this[5], &v54, *v2);
    int v53 = 0;
    char v14 = (*(uint64_t (**)(const void *, void, int *))(*(void *)this[5] + 16))(this[5], *v2, &v53);
    uint64_t v24 = v2;
    unsigned __int8 v47 = *((unsigned char *)v2 + 16);
    memcpy(&v51, this[2847], 4 * v47);
    __int16 v49 = 0;
    unsigned __int8 v48 = 0;
    int v50 = v51;
    BlueFin::GlSetIterator::operator++(&v47);
    while (v48 != v47)
    {
      int v15 = v49;
      int v30 = &off_270EBF450;
      LOBYTE(v31[0]) = 0;
      v31[1] = -1;
      __int16 v32 = 575;
      uint64_t v33 = 0;
      int v34 = 0;
      HIDWORD(v16) = 0;
      long long v35 = xmmword_263BABE60;
      int v36 = 2139095039;
      uint64_t v37 = 0;
      int v38 = 2139095039;
      __int16 v39 = 0;
      uint64_t v40 = 0x7FEFFFFFFFFFFFFFLL;
      int v41 = -1;
      __int16 v42 = -1;
      uint64_t v44 = 0;
      uint64_t v45 = 0;
      uint64_t v43 = 0;
      int v46 = 0;
      v27[0] = v49;
      int v28 = 0;
      __int16 v29 = 575;
      if ((v49 + 67) >= 0x44u)
      {
        uint64_t v17 = BlueFin::GlSvId::s_aucSvId2gnss[v49];
        if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v17] == 255) {
          int v28 = -1;
        }
        else {
          __int16 v29 = BlueFin::GlSignalId::s_ausGnss2signalId[v17]
        }
              + v49
              - BlueFin::GlSvId::s_aucGnss2minSvId[v17];
      }
      char v26 = v14;
      uint64_t v18 = v49 >> 5;
      uint64_t v19 = 1 << (v49 & 0x1F);
      int v20 = 1 << (v49 & 0x1F);
      if ((v19 & *((_DWORD *)this[2877] + v18)) != 0)
      {
        if (v49 - 52 <= 0xD) {
          char v26 = v14 & ((v53 & 0x80) >> 7);
        }
        BOOL v21 = this[5];
        int v25 = 0;
        LODWORD(v16) = *v24;
        (*(void (**)(const void *, char *, void (***)(BlueFin::GlMeAcqWin *__hidden), int *, unsigned char **, char *, double, double, double))(*(void *)v21 + 24))(v21, v27, &v30, &v25, &v54, &v26, (double)v16, 0.0, 0.0);
        if ((v15 - 76) >= 0x3F && (v34 & 8) == 0) {
          *((_DWORD *)v82 + v18) |= v20;
        }
        if (((v19 & *((_DWORD *)this[2853] + v18)) != 0 || (v34 & 0x100) == 0)
          && ((v15 + 117) > 0x23u || (v19 & *((_DWORD *)this[2859] + v18)) != 0))
        {
          *((_DWORD *)v78 + v18) |= v20;
        }
        if ((v19 & *((_DWORD *)this[2859] + v18)) != 0) {
          *((_DWORD *)v74 + v18) |= v20;
        }
      }
      if ((v19 & *((_DWORD *)this[2883] + v18)) != 0) {
        *((_DWORD *)v70 + v18) |= v20;
      }
      if ((v19 & *((_DWORD *)this[2889] + v18)) != 0) {
        *((_DWORD *)v66 + v18) |= v20;
      }
      if ((v19 & *((_DWORD *)this[2865] + v18)) != 0) {
        *((_DWORD *)v62 + v18) |= v20;
      }
      if ((v19 & *((_DWORD *)this[2871] + v18)) != 0) {
        *(_DWORD *)&v59[4 * v18] |= v20;
      }
      BlueFin::GlSetIterator::operator++(&v47);
    }
    char v12 = (BlueFin::GlMeSrdSatMgr *)(this + 440);
    BlueFin::GlMeSrdSatMgr::SetBitHistogramEnabled((BlueFin::GlMeSrdSatMgr *)(this + 440), (const BlueFin::GlSvIdSet *)&v82);
    BlueFin::GlMeSrdSatMgr::SetDataBitsEnabled((BlueFin::GlMeSrdSatMgr *)(this + 440), (const BlueFin::GlSvIdSet *)&v78);
    BlueFin::GlMeSrdSatMgr::SetDataFrmsEnabled((BlueFin::GlMeSrdSatMgr *)(this + 440), (const BlueFin::GlSvIdSet *)&v74);
    BlueFin::GlMeSrdSatMgr::SetL2Enabled((BlueFin::GlMeSrdSatMgr *)(this + 440), (const BlueFin::GlSvIdSet *)&v70);
    BlueFin::GlMeSrdSatMgr::SetL5Enabled((BlueFin::GlMeSrdSatMgr *)(this + 440), (const BlueFin::GlSvIdSet *)&v66);
    BlueFin::GlMeSrdSatMgr::SetB1CEnabled((BlueFin::GlMeSrdSatMgr *)(this + 440), (const BlueFin::GlSvIdSet *)&v62);
    uint64_t v13 = (const BlueFin::GlSvIdSet *)&v59;
  }
  BlueFin::GlMeSrdSatMgr::SetL1CEnabled(v12, v13);
  return BlueFin::GlMeSrdSatMgr::SetGridIqDumpEnabled((BlueFin::GlMeSrdSatMgr *)(this + 440), this + 3084);
}

__n128 BlueFin::GlMeSrdSatMgr::SetDataFrmsEnabled(BlueFin::GlMeSrdSatMgr *this, const BlueFin::GlSvIdSet *a2)
{
  unint64_t v3 = (char *)this + 648;
  if (!BlueFin::GlSetBase::operator==((uint64_t)a2, (uint64_t)this + 648))
  {
    BlueFin::GlSetBase::operator=((uint64_t)v3, (uint64_t)a2);
    __n128 result = *(__n128 *)((char *)a2 + 12);
    *(_OWORD *)(v3 + 28) = *(_OWORD *)((char *)a2 + 28);
    *(__n128 *)(v3 + 12) = result;
  }
  return result;
}

BOOL BlueFin::GlMeSrdAcqMgrSm::UpdateAidingMgr(BlueFin::GlMeSrdAcqMgrSm *this)
{
  uint64_t v2 = (int **)((char *)this + 240);
  *((_DWORD *)this + 66) = *((_DWORD *)this + 5692);
  BlueFin::GlSatCarrIdSet::GetSatIdSetAnyCarrier((BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 18352), (uint64_t)&v10);
  BlueFin::GlMeSrdSatMgr::GetSvidSetFromSatidSet(*((void **)this + 1795), (uint64_t)&v10, (uint64_t)v5);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v6, (unsigned int *)v7, 8u, v5);
  int v10 = &v12;
  char v11 = 8;
  long long v12 = 0u;
  long long v13 = 0u;
  BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v6, (int **)&v10, (int **)this + 1418);
  BlueFin::GlSetBase::operator=((uint64_t)&v6, (uint64_t)&v10);
  v7[0] = v12;
  v7[1] = v13;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v8, (unsigned int *)v9, 8u, &v6);
  int v10 = &v12;
  char v11 = 8;
  long long v12 = 0u;
  long long v13 = 0u;
  BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v8, (int **)&v10, (int **)this + 1655);
  BlueFin::GlSetBase::operator=((uint64_t)&v8, (uint64_t)&v10);
  v9[0] = v12;
  v9[1] = v13;
  BlueFin::GlMeSrdAidingMgr::ForceAidingRefresh((uint64_t)v2, &v8);
  uint64_t v3 = *((void *)this + 6);
  BlueFin::GlMeSrdAidingMgr::SelectAiding2Refresh(v2);
  return BlueFin::GlMeSrdAidingMgr::RefreshAiding((uint64_t)v2, v3);
}

uint64_t BlueFin::GlMeSrdAidingMgr::SelectAiding2Refresh(int **this)
{
  BlueFin::GlMeSrdAidingMgr::SelectRefreshDue2ClockModel(this);
  BlueFin::GlMeSrdAidingMgr::SelectRefreshDue2AidingChanges((BlueFin::GlMeSrdAidingMgr *)this);
  BlueFin::GlMeSrdAidingMgr::SelectRefreshDue2Time((unsigned __int8 *)this);
  BlueFin::GlMeSrdAidingMgr::SelectRefreshDue2AidingOverride((BlueFin::GlMeSrdAidingMgr *)this);
  BlueFin::GlMeSrdAidingMgr::SelectRefreshDue2AidIdUnMap(this);

  return BlueFin::GlSetBase::operator&=((uint64_t)(this + 148), (uint64_t)(this + 98));
}

void BlueFin::GlMeSrdAidingMgr::SelectRefreshDue2AidingOverride(BlueFin::GlMeSrdAidingMgr *this)
{
  uint64_t v2 = (const void **)((char *)this + 1280);
  BlueFin::GlSvIdSet::operator~((const void **)this + 160, (uint64_t)&v6);
  BlueFin::GlSetBase::operator&=((uint64_t)this + 1184, (uint64_t)&v6);
  BlueFin::GlSvIdSet::operator~(v2, (uint64_t)v3);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v4, (unsigned int *)v5, 8u, v3);
  uint64_t v6 = &v8;
  char v7 = 8;
  long long v8 = 0u;
  long long v9 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v4, (int **)&v6, (int **)this + 166);
  BlueFin::GlSetBase::operator=((uint64_t)&v4, (uint64_t)&v6);
  v5[0] = v8;
  v5[1] = v9;
  BlueFin::GlSvIdSet::operator~(&v4, (uint64_t)&v6);
  BlueFin::GlSetBase::operator&=((uint64_t)this + 1184, (uint64_t)&v6);
  BlueFin::GlSvIdSet::operator~(&v4, (uint64_t)&v6);
  BlueFin::GlSetBase::operator&=((uint64_t)this + 1328, (uint64_t)&v6);
  bzero(*((void **)this + 160), ((4 * *((unsigned __int8 *)this + 1288) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
}

double BlueFin::GlMeSrdAidingMgr::SelectRefreshDue2AidingChanges(BlueFin::GlMeSrdAidingMgr *this)
{
  int v1 = this;
  uint64_t v2 = (const void **)(*(uint64_t (**)(void))(**(void **)this + 64))(*(void *)this);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v8, (unsigned int *)&v9, 8u, v2);
  char v11 = &v13;
  char v12 = 8;
  long long v13 = 0u;
  long long v14 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v8, (int **)&v11, (int **)v1 + 98);
  BlueFin::GlSetBase::operator=((uint64_t)&v8, (uint64_t)&v11);
  long long v9 = v13;
  *(_OWORD *)int v10 = v14;
  uint64_t v3 = (uint64_t)v1 + 1184;
  int v1 = (BlueFin::GlMeSrdAidingMgr *)((char *)v1 + 1120);
  BlueFin::GlSvIdSet::operator~((const void **)v1, (uint64_t)v5);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v6, (unsigned int *)v7, 8u, v5);
  char v11 = &v13;
  char v12 = 8;
  long long v13 = 0u;
  long long v14 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v6, (int **)&v11, &v8);
  BlueFin::GlSetBase::operator=((uint64_t)&v6, (uint64_t)&v11);
  v7[0] = v13;
  v7[1] = v14;
  BlueFin::GlSetBase::Add(v3, &v6);
  BlueFin::GlSetBase::operator=((uint64_t)v1, (uint64_t)&v8);
  *(_OWORD *)((char *)v1 + 12) = v9;
  double result = v10[0];
  *(_OWORD *)((char *)v1 + 28) = *(_OWORD *)v10;
  return result;
}

uint64_t BlueFin::GlMeSrdAidingMgr::SelectRefreshDue2ClockModel(int **this)
{
  uint64_t v2 = (const void **)(*(uint64_t (**)(int *))(*(void *)*this + 64))(*this);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v10, (unsigned int *)v11, 8u, v2);
  uint64_t v5 = (int *)&v6[4];
  v6[0] = 8;
  memset(&v6[4], 0, 32);
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v10, &v5, this + 98);
  BlueFin::GlSetBase::operator=((uint64_t)&v10, (uint64_t)&v5);
  v11[0] = *(_OWORD *)&v6[4];
  v11[1] = *(_OWORD *)&v6[20];
  uint64_t v5 = (int *)&unk_270EBF258;
  *(void *)uint64_t v6 = 0;
  *(void *)&v6[8] = 0x36A7C5AC00000000;
  *(void *)&v6[16] = 0;
  *(_DWORD *)&v6[24] = 2139095039;
  *(void *)&v6[32] = 0;
  int v7 = 2139095039;
  uint64_t v8 = 0;
  uint64_t v9 = 0x36A7C5AC7F7FFFFFLL;
  uint64_t result = (*(uint64_t (**)(int *, int **, void))(*(void *)*this + 96))(*this, &v5, *((unsigned int *)this + 6));
  int v4 = *(_DWORD *)v6;
  if (vabds_f32(*((float *)this + 292), *(float *)&v6[8]) > 0.00000001 || *(_DWORD *)v6 != *((_DWORD *)this + 293))
  {
    *((_DWORD *)this + 292) = *(_DWORD *)&v6[8];
    *((_DWORD *)this + 293) = v4;
    *((unsigned char *)this + 1176) = 1;
    return BlueFin::GlSetBase::Add((uint64_t)(this + 148), &v10);
  }
  return result;
}

void BlueFin::GlMeSrdAidingMgr::SelectRefreshDue2AidIdUnMap(int **this)
{
  uint64_t v2 = (const void **)(*(uint64_t (**)(int *))(*(void *)*this + 64))(*this);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v5, (unsigned int *)v6, 8u, v2);
  int v7 = &v9;
  char v8 = 8;
  long long v9 = 0u;
  long long v10 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v5, (int **)&v7, this + 98);
  BlueFin::GlSetBase::operator=((uint64_t)&v5, (uint64_t)&v7);
  v6[0] = v9;
  v6[1] = v10;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)v3, (unsigned int *)v4, 8u, (const void **)this + 172);
  int v7 = &v9;
  char v8 = 8;
  long long v9 = 0u;
  long long v10 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v3, (int **)&v7, &v5);
  BlueFin::GlSetBase::operator=((uint64_t)v3, (uint64_t)&v7);
  v4[0] = v9;
  v4[1] = v10;
  BlueFin::GlSetBase::operator|=((uint64_t)(this + 148), (uint64_t)v3);
  bzero(this[172], ((4 * *((unsigned __int8 *)this + 1384) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
}

uint64_t BlueFin::GlMeAcqWindowProvider::GetAidSvsLst(BlueFin::GlMeAcqWindowProvider *this)
{
  return *((void *)this + 1) + 9280;
}

unsigned __int8 *BlueFin::GlMeSrdAidingMgr::SelectRefreshDue2Time(unsigned __int8 *this)
{
  int v1 = *((_DWORD *)this + 6);
  if (v1 != *((_DWORD *)this + 356))
  {
    uint64_t v2 = this;
    *((_DWORD *)this + 356) = v1;
    uint64_t v3 = (const void **)(this + 784);
    int v4 = (const void **)(this + 1184);
    BlueFin::GlSvIdSet::operator~((const void **)this + 148, (uint64_t)&v9);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v13, 8u, v3);
    int v15 = &v17;
    LOBYTE(v16) = 8;
    long long v17 = 0u;
    long long v18 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)&v15, (int **)&v9);
    BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)&v15);
    long long v13 = v17;
    long long v14 = v18;
    LOBYTE(v15) = v12;
    memcpy(&v16, __src, 4 * v12);
    WORD1(v15) = 0;
    BYTE1(v15) = 0;
    HIDWORD(v15) = v16;
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v15);
    while (BYTE1(v15) != v15)
    {
      if ((*((_DWORD *)v2 + 6) - *(_DWORD *)&v2[4 * BYTE2(v15) + 28]) >> 7 >= 0x7D) {
        *((_DWORD *)*v4 + (BYTE2(v15) >> 5)) |= 1 << SBYTE2(v15);
      }
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v15);
    }
    BlueFin::GlSvIdSet::operator~((const void **)v2 + 179, (uint64_t)v8);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v9, (unsigned int *)v10, 8u, v3);
    int v15 = &v17;
    LOBYTE(v16) = 8;
    long long v17 = 0u;
    long long v18 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v9, (int **)&v15, v8);
    BlueFin::GlSetBase::operator=((uint64_t)&v9, (uint64_t)&v15);
    v10[0] = v17;
    v10[1] = v18;
    BlueFin::GlSvIdSet::operator~(v4, (uint64_t)v7);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v13, 8u, &v9);
    int v15 = &v17;
    LOBYTE(v16) = 8;
    long long v17 = 0u;
    long long v18 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)&v15, v7);
    BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)&v15);
    long long v13 = v17;
    long long v14 = v18;
    unsigned __int8 v5 = BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)v3);
    LOBYTE(v15) = v12;
    memcpy(&v16, __src, 4 * v12);
    WORD1(v15) = 0;
    BYTE1(v15) = 0;
    HIDWORD(v15) = v16;
    this = BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v15);
    if (BYTE1(v15) != v15)
    {
      unsigned int v6 = v5 / 0xFu + 1;
      do
      {
        if (!(_BYTE)v6) {
          break;
        }
        this = (unsigned __int8 *)BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)v4);
        if (this >= 5u) {
          break;
        }
        LOBYTE(v6) = v6 - 1;
        *(_DWORD *)((char *)*v4 + (((unint64_t)WORD1(v15) >> 3) & 0x1C)) |= 1 << SBYTE2(v15);
        this = BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v15);
      }
      while (BYTE1(v15) != v15);
    }
  }
  return this;
}

uint64_t BlueFin::GlMeSrdAidingMgr::ForceAidingRefresh(uint64_t a1, const void **a2)
{
  uint64_t v2 = a1 + 1184;
  uint64_t v3 = (int **)(a1 + 784);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v5, (unsigned int *)v6, 8u, a2);
  int v7 = &v9;
  char v8 = 8;
  long long v9 = 0u;
  long long v10 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v5, (int **)&v7, v3);
  BlueFin::GlSetBase::operator=((uint64_t)&v5, (uint64_t)&v7);
  v6[0] = v9;
  v6[1] = v10;
  return BlueFin::GlSetBase::Add(v2, &v5);
}

__n128 BlueFin::GlMeSrdSatMgr::SetBitHistogramEnabled(BlueFin::GlMeSrdSatMgr *this, const BlueFin::GlSvIdSet *a2)
{
  int v4 = (char *)this + 600;
  if (!BlueFin::GlSetBase::operator==((uint64_t)a2, (uint64_t)this + 600))
  {
    *((unsigned char *)this + 6296) = 1;
    BlueFin::GlSetBase::operator=((uint64_t)v4, (uint64_t)a2);
    __n128 result = *(__n128 *)((char *)a2 + 12);
    *(_OWORD *)(v4 + 28) = *(_OWORD *)((char *)a2 + 28);
    *(__n128 *)(v4 + 12) = result;
  }
  return result;
}

uint64_t BlueFin::GlMeSrdSatMgr::SetGridIqDumpEnabled(BlueFin::GlMeSrdSatMgr *this, const void **a2)
{
  uint64_t v3 = 0;
  int v15 = (char *)this + 6296;
  do
  {
    int v4 = (char *)this + 48 * v3 + 888;
    unsigned __int8 v5 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v24, (unsigned int *)v26, 8u, &a2[6 * v3]);
    BlueFin::GlSetBase::operator&=((uint64_t)v5, (uint64_t)v4);
    unsigned int v6 = 0;
    int v7 = &v24[v25 - 1];
    do
    {
      if (*v7)
      {
        unsigned int v8 = *v7 - (((*v7 >> 1) & 0x5B6DB6DB) + ((*v7 >> 2) & 0x9249249));
        unsigned int v6 = ((v8 + (v8 >> 3)) & 0xC71C71C7) + v6 - 63 * (((v8 + (v8 >> 3)) & 0xC71C71C7) / 0x3F);
      }
      --v7;
    }
    while (v7 >= v24);
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 819) + 696))(*((void *)this + 819));
    if (result > v6)
    {
      BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)v23, 8u, &a2[6 * v3]);
      long long v17 = &v19;
      LOBYTE(v18) = 8;
      long long v19 = 0u;
      long long v20 = 0u;
      BlueFin::GlSetBase::OperatorBinaryXor((uint64_t)&__src, (int **)&v17, &v24);
      BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)&v17);
      v23[0] = v19;
      v23[1] = v20;
      LOBYTE(v17) = v22;
      memcpy(&v18, __src, 4 * v22);
      WORD1(v17) = 0;
      BYTE1(v17) = 0;
      HIDWORD(v17) = v18;
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v17);
      if (BYTE1(v17) != v17)
      {
        long long v10 = v24;
        do
        {
          unsigned int v11 = 0;
          unsigned __int8 v12 = &v10[v25 - 1];
          do
          {
            if (*v12)
            {
              unsigned int v13 = *v12 - (((*v12 >> 1) & 0x5B6DB6DB) + ((*v12 >> 2) & 0x9249249));
              unsigned int v11 = ((v13 + (v13 >> 3)) & 0xC71C71C7) + v11 - 63 * (((v13 + (v13 >> 3)) & 0xC71C71C7) / 0x3F);
            }
            --v12;
          }
          while (v12 >= v10);
          if ((*(unsigned int (**)(void))(**((void **)this + 819) + 696))(*((void *)this + 819)) <= v11) {
            break;
          }
          long long v10 = v24;
          *(int *)((char *)v24 + (((unint64_t)WORD1(v17) >> 3) & 0x1C)) |= 1 << SBYTE2(v17);
          BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v17);
        }
        while (BYTE1(v17) != v17);
      }
      uint64_t result = BlueFin::GlSetBase::operator==((uint64_t)&v24, (uint64_t)v4);
      if ((result & 1) == 0)
      {
        *int v15 = 1;
        uint64_t result = BlueFin::GlSetBase::operator=((uint64_t)v4, (uint64_t)&v24);
        long long v14 = v26[1];
        *(_OWORD *)((char *)this + 48 * v3 + 900) = v26[0];
        *(_OWORD *)((char *)this + 48 * v3 + 916) = v14;
      }
    }
    ++v3;
  }
  while (v3 != 4);
  return result;
}

BOOL BlueFin::GlSetBase::operator==(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int8 *)(a2 + 8);
  if (v2 != *(unsigned __int8 *)(a1 + 8))
  {
    DeviceFaultNotify("glutl_set.cpp", 215, "operator==", (char)"otRightOperand.m_ucUlongSize == m_ucUlongSize");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_set.cpp", 215, "otRightOperand.m_ucUlongSize == m_ucUlongSize");
  }
  if (!*(unsigned char *)(a2 + 8)) {
    return 1;
  }
  if (**(_DWORD **)a1 != **(_DWORD **)a2) {
    return 0;
  }
  uint64_t v3 = 1;
  do
  {
    unint64_t v4 = v3;
    if (v2 == v3) {
      break;
    }
    int v5 = *(_DWORD *)(*(void *)a1 + 4 * v3);
    int v6 = *(_DWORD *)(*(void *)a2 + 4 * v3++);
  }
  while (v5 == v6);
  return v4 >= v2;
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetTstGridIqMaxSvs(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 1611);
}

uint64_t BlueFin::GlGnssSet::operator^@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = 0;
  *(void *)(a3 + 168) = a3;
  do
  {
    uint64_t v7 = *(void *)(a3 + 168) + v6;
    *(void *)(v7 + 12) = 0;
    *(void *)uint64_t v7 = v7 + 12;
    *(unsigned char *)(v7 + 8) = 2;
    v6 += 24;
  }
  while (v6 != 168);
  for (uint64_t i = 0; i != 168; i += 24)
  {
    long long v9 = (int **)(*(void *)(a2 + 168) + i);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)v11, v12, 2u, (const void **)(*(void *)(a1 + 168) + i));
    unsigned int v13 = &v15;
    char v14 = 2;
    uint64_t v15 = 0;
    BlueFin::GlSetBase::OperatorBinaryXor((uint64_t)v11, (int **)&v13, v9);
    BlueFin::GlSetBase::operator=((uint64_t)v11, (uint64_t)&v13);
    *(void *)unsigned __int8 v12 = v15;
    uint64_t result = BlueFin::GlSetBase::operator=(*(void *)(a3 + 168) + i, (uint64_t)v11);
    *(void *)(result + 12) = *(void *)v12;
  }
  return result;
}

uint64_t BlueFin::GlSetBase::OperatorBinaryXor(uint64_t this, int **a2, int **a3)
{
  uint64_t v3 = *(unsigned __int8 *)(this + 8);
  int v4 = *((unsigned __int8 *)a3 + 8);
  if (v3 != v4 || *((unsigned __int8 *)a2 + 8) != v4)
  {
    DeviceFaultNotify("glutl_set.cpp", 517, "OperatorBinaryXor", (char)"m_ucUlongSize == otRightOperand.m_ucUlongSize && otResult.m_ucUlongSize == otRightOperand.m_ucUlongSize");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_set.cpp", 517, "m_ucUlongSize == otRightOperand.m_ucUlongSize && otResult.m_ucUlongSize == otRightOperand.m_ucUlongSize");
  }
  if (*(unsigned char *)(this + 8))
  {
    uint64_t v6 = *(int **)this;
    uint64_t v7 = *a3;
    unsigned int v8 = *a2;
    do
    {
      int v10 = *v6++;
      int v9 = v10;
      int v11 = *v7++;
      *v8++ = v11 ^ v9;
      --v3;
    }
    while (v3);
  }
  return this;
}

__n128 BlueFin::GlMeSrdSatMgr::SetDataBitsEnabled(BlueFin::GlMeSrdSatMgr *this, const BlueFin::GlSvIdSet *a2)
{
  int v4 = (char *)this + 552;
  if (!BlueFin::GlSetBase::operator==((uint64_t)a2, (uint64_t)this + 552))
  {
    *((unsigned char *)this + 6296) = 1;
    BlueFin::GlSetBase::operator=((uint64_t)v4, (uint64_t)a2);
    __n128 result = *(__n128 *)((char *)a2 + 12);
    *(_OWORD *)(v4 + 28) = *(_OWORD *)((char *)a2 + 28);
    *(__n128 *)(v4 + 12) = result;
  }
  return result;
}

unint64_t BlueFin::GlMeSrdSatMgr::SetL1CEnabled(BlueFin::GlMeSrdSatMgr *this, const BlueFin::GlSvIdSet *a2)
{
  uint64_t v3 = (char *)this + 840;
  unint64_t result = BlueFin::GlSetBase::operator==((uint64_t)a2, (uint64_t)this + 840);
  if ((result & 1) == 0)
  {
    unint64_t result = BlueFin::GlSetBase::operator=((uint64_t)v3, (uint64_t)a2);
    long long v5 = *(_OWORD *)((char *)a2 + 12);
    *(_OWORD *)(v3 + 28) = *(_OWORD *)((char *)a2 + 28);
    *(_OWORD *)(v3 + 12) = v5;
    if (BlueFin::GlUtils::m_ucEnabled)
    {
      return BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x4F);
    }
  }
  return result;
}

unint64_t BlueFin::GlMeSrdSatMgr::SetB1CEnabled(BlueFin::GlMeSrdSatMgr *this, const BlueFin::GlSvIdSet *a2)
{
  uint64_t v3 = (char *)this + 792;
  unint64_t result = BlueFin::GlSetBase::operator==((uint64_t)a2, (uint64_t)this + 792);
  if ((result & 1) == 0)
  {
    unint64_t result = BlueFin::GlSetBase::operator=((uint64_t)v3, (uint64_t)a2);
    long long v5 = *(_OWORD *)((char *)a2 + 12);
    *(_OWORD *)(v3 + 28) = *(_OWORD *)((char *)a2 + 28);
    *(_OWORD *)(v3 + 12) = v5;
    if (BlueFin::GlUtils::m_ucEnabled)
    {
      return BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x4F);
    }
  }
  return result;
}

unint64_t BlueFin::GlMeSrdSatMgr::SetL5Enabled(BlueFin::GlMeSrdSatMgr *this, const BlueFin::GlSvIdSet *a2)
{
  uint64_t v3 = (char *)this + 744;
  unint64_t result = BlueFin::GlSetBase::operator==((uint64_t)a2, (uint64_t)this + 744);
  if ((result & 1) == 0)
  {
    unint64_t result = BlueFin::GlSetBase::operator=((uint64_t)v3, (uint64_t)a2);
    long long v5 = *(_OWORD *)((char *)a2 + 12);
    *(_OWORD *)(v3 + 28) = *(_OWORD *)((char *)a2 + 28);
    *(_OWORD *)(v3 + 12) = v5;
    if (BlueFin::GlUtils::m_ucEnabled)
    {
      return BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x4F);
    }
  }
  return result;
}

unint64_t BlueFin::GlMeSrdSatMgr::SetL2Enabled(BlueFin::GlMeSrdSatMgr *this, const BlueFin::GlSvIdSet *a2)
{
  uint64_t v3 = (char *)this + 696;
  unint64_t result = BlueFin::GlSetBase::operator==((uint64_t)a2, (uint64_t)this + 696);
  if ((result & 1) == 0)
  {
    unint64_t result = BlueFin::GlSetBase::operator=((uint64_t)v3, (uint64_t)a2);
    long long v5 = *(_OWORD *)((char *)a2 + 12);
    *(_OWORD *)(v3 + 28) = *(_OWORD *)((char *)a2 + 28);
    *(_OWORD *)(v3 + 12) = v5;
    if (BlueFin::GlUtils::m_ucEnabled)
    {
      return BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x4F);
    }
  }
  return result;
}

unsigned char *BlueFin::GlMeSrdObsBuf::SumVecFcnWithExit(unsigned char *this, void *a2, void *a3, uint64_t (*a4)(void *, void *, unint64_t))
{
  uint64_t v4 = 9;
  if (!this[8]) {
    uint64_t v4 = 10;
  }
  int v5 = this[v4];
  if (this[v4])
  {
    uint64_t v9 = (uint64_t)this;
    unsigned int v10 = this[9];
    if (v10 > (this[10] - 1)) {
      LOBYTE(v10) = 0;
    }
    unsigned __int8 v11 = v10 + this[10] - 1;
    do
    {
      this = (unsigned char *)a4(a2, a3, *(void *)v9 + *(unsigned __int16 *)(v9 + 12) * (unint64_t)v11);
      if (!this) {
        break;
      }
      unsigned int v12 = *(unsigned __int8 *)(v9 + 9);
      if (v12 > (v11 - 1)) {
        LOBYTE(v12) = 0;
      }
      unsigned __int8 v11 = v12 + v11 - 1;
      --v5;
    }
    while ((_BYTE)v5);
  }
  return this;
}

BOOL BlueFin::GlMeSrdEstCarrPrm::AccumulateMultiSecondCplxSummand(BlueFin::GlMeSrdEstCarrPrm *this, char *a2, float32x2_t *a3, void *a4)
{
  if (!this)
  {
    unsigned int v13 = "potBufParam != nullptr";
    DeviceFaultNotify("glmesrd_carrprm.cpp", 2632, "AccumulateMultiSecondCplxSummand", (char)"potBufParam != nullptr");
    int v14 = 2632;
    goto LABEL_8;
  }
  if (!a2)
  {
    unsigned int v13 = "potAccBufElem != nullptr";
    DeviceFaultNotify("glmesrd_carrprm.cpp", 2636, "AccumulateMultiSecondCplxSummand", (char)"potAccBufElem != nullptr");
    int v14 = 2636;
    goto LABEL_8;
  }
  if (!a3)
  {
    unsigned int v13 = "potBufElem != nullptr";
    DeviceFaultNotify("glmesrd_carrprm.cpp", 2640, "AccumulateMultiSecondCplxSummand", (char)"potBufElem != nullptr");
    int v14 = 2640;
LABEL_8:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_carrprm.cpp", v14, v13);
  }
  float v7 = (a3[2].f32[0] - *((double *)this + 1)) * 6.28318531 * *(float *)this;
  __float2 v8 = __sincosf_stret(v7);
  v9.f64[0] = -v8.__sinval;
  float64x2_t v10 = vcvtq_f64_f32(a3[1]);
  v9.f64[1] = v8.__sinval;
  *(float64x2_t *)(a2 + 8) = vaddq_f64(*(float64x2_t *)(a2 + 8), vmlaq_n_f64(vmulq_f64((float64x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL), v9), v10, v8.__cosval));
  float v11 = a3->f32[1] + *(float *)a2;
  *(float *)a2 = v11;
  return v11 < (float)*((unsigned int *)this + 4);
}

uint64_t BlueFin::GlPeIONXMgr::SetIONXFromLto(float32x2_t *a1, uint64_t a2, unsigned int a3)
{
  if (a2) {
    BOOL v3 = a1[3].i8[1] == 0;
  }
  else {
    BOOL v3 = 1;
  }
  BOOL v4 = !v3 && a3 - 5 >= 0xFFFFFFFC;
  int v5 = !v4;
  if (v4)
  {
    int v25 = v5;
    float64x2_t v9 = a1 + 5772;
    if (!*(_DWORD *)(a2 + 64))
    {
      v10.f64[0] = *(float64_t *)(a2 + 56);
      uint64_t v11 = *(void *)(a2 + 11496);
      v10.f64[1] = *(float64_t *)(v11 + 24);
      a1[9] = vmul_f32(vcvt_f32_f64(v10), (float32x2_t)vdup_n_s32(0x447A0000u));
      a1[8].f32[1] = __exp10f((float)*(__int16 *)(v11 + 32));
      a1[4].i16[0] = a3;
      unsigned int v12 = *(_DWORD *)(a2 + 68);
      a1[4].i32[1] = v12;
      unsigned int v13 = *(unsigned __int16 *)(*(void *)(a2 + 11496) + 34);
      a1[5].i32[0] = v13;
      a1[3].i32[1] = *(_DWORD *)(a2 + 11520) - *(_DWORD *)a2;
      double v14 = *(double *)(a2 + 8);
      float32_t v15 = v14;
      a1[5].f32[1] = v15;
      double v16 = *(double *)(a2 + 16);
      double v17 = v14 + v16 * (double)v12;
      *(float *)&double v16 = v16;
      *(float *)&double v17 = v17;
      a1[6].i32[0] = LODWORD(v17);
      a1[6].i32[1] = LODWORD(v16);
      double v18 = *(double *)(a2 + 24);
      *(float *)&double v16 = v18;
      a1[7].i32[0] = LODWORD(v16);
      double v19 = *(double *)(a2 + 32);
      *(float *)&double v16 = v19;
      *(float *)&double v18 = v18 + v19 * (double)v13;
      a1[7].i32[1] = LODWORD(v18);
      a1[8].i32[0] = LODWORD(v16);
    }
    uint64_t v20 = 0;
    uint64_t v21 = a3;
    do
    {
      if (!*(_DWORD *)(a2 + v20 + 64))
      {
        BlueFin::stIonex::operator=(*(void *)v9 + v20, a2 + v20);
        if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
          (*(void (**)(float32x2_t *, void, void))(*(void *)a1 + 24))(a1, 0, 0);
        }
        ++v9[1].i8[0];
        float32x2_t v22 = *v9;
        unsigned int v23 = *(_DWORD *)(*(void *)v9 + v20);
        if (fmod((double)(v23 % 0x93A80), 1.0) >= 1.0)
        {
          DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
        }
        GlCustomLog(14, "IONX::SetIONXFromLto TOW %u, StartLatDeg %.2f, DelLatDeg %.2f, EndLat %.2f, StartLonDeg %.2f, DelLonDeg %.2f, EndLon %.2f\n", v23 % 0x93A80, *(double *)(*(void *)&v22 + v20 + 8), *(double *)(*(void *)&v22 + v20 + 16), a1[6].f32[0], *(double *)(*(void *)&v22 + v20 + 24), *(double *)(*(void *)&v22 + v20 + 32), a1[7].f32[1]);
      }
      v20 += 11520;
      --v21;
    }
    while (v21);
    a1[3].i8[0] = 1;
    v9[1].i8[0] = 0;
    int v5 = v25;
  }
  return v5 ^ 1u;
}

void BlueFin::stIonex::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    BlueFin::stIonexHeader::operator=(a1, a2);
    uint64_t v4 = 0;
    uint64_t v5 = 57;
    do
    {
      uint64_t v6 = *(void *)(a2 + 11496);
      uint64_t v7 = *(void *)(v3 + 11496);
      if (v7 != v6)
      {
        uint64_t v8 = v6 + v4;
        uint64_t v9 = v7 + v4;
        *(_OWORD *)uint64_t v9 = *(_OWORD *)v8;
        *(_OWORD *)(v9 + 16) = *(_OWORD *)(v8 + 16);
        *(_DWORD *)(v9 + 32) = *(_DWORD *)(v8 + 32);
        long long v10 = *(_OWORD *)(v8 + 36);
        *(_OWORD *)(v9 + 52) = *(_OWORD *)(v8 + 52);
        *(_OWORD *)(v9 + 36) = v10;
        long long v11 = *(_OWORD *)(v8 + 68);
        long long v12 = *(_OWORD *)(v8 + 84);
        long long v13 = *(_OWORD *)(v8 + 100);
        *(_OWORD *)(v9 + 116) = *(_OWORD *)(v8 + 116);
        *(_OWORD *)(v9 + 100) = v13;
        *(_OWORD *)(v9 + 84) = v12;
        *(_OWORD *)(v9 + 68) = v11;
        long long v14 = *(_OWORD *)(v8 + 132);
        long long v15 = *(_OWORD *)(v8 + 148);
        long long v16 = *(_OWORD *)(v8 + 164);
        *(_OWORD *)(v9 + 180) = *(_OWORD *)(v8 + 180);
        *(_OWORD *)(v9 + 164) = v16;
        *(_OWORD *)(v9 + 148) = v15;
        *(_OWORD *)(v9 + 132) = v14;
      }
      v4 += 200;
      --v5;
    }
    while (v5);
  }
}

double BlueFin::stIonexHeader::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    double result = *(double *)(a2 + 64);
    *(double *)(a1 + 64) = result;
  }
  return result;
}

uint64_t BlueFin::GlPeLtoMgr::deserializeLtoSysTime(BlueFin::GlPeLtoMgr *this, BlueFin::GlSysLogEntry *a2)
{
  uint64_t v3 = (char *)this + 26460;
  unsigned int v4 = *((_DWORD *)this + 6615);
  long long v13 = &unk_270EC1548;
  unsigned int v14 = 7;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v17 = 0;
  uint64_t result = BlueFin::GlPeLtoSysTimeDataInterface::Deserialize((BlueFin::GlPeLtoSysTimeDataInterface *)&v13, a2);
  if (!result) {
    return result;
  }
  if (v14 > 6) {
    uint64_t v6 = "INV";
  }
  else {
    uint64_t v6 = off_2655DF758[v14];
  }
  GlCustomLog(14, "LtoMgr: read LTO SysTime (%s) from NVMEM!\n", v6);
  switch(v14)
  {
    case 5u:
      long long v10 = &off_270EBF538;
      double v7 = fmod((double)(v4 % 0x93A80), 1.0);
      if (v7 < 1.0)
      {
        double v8 = v7 * 4294967300.0 + 0.5;
        unsigned int v9 = v8;
        if (v8 >= 4294967300.0) {
          unsigned int v9 = -1;
        }
        unsigned int v11 = v9;
        unsigned int v12 = v4 % 0x93A80 + 604800 * (unsigned __int16)(v4 / 0x93A80 - 1024) + 619315200;
        long long v10 = &off_270EBF538;
        BlueFin::GlPeLtoMgr::UpdateGalSysTimeOffsets((uint64_t)this, (int *)&v16 + 1, &v10);
        return 1;
      }
      goto LABEL_18;
    case 4u:
      if (fmod((double)v4, 1.0) < 1.0)
      {
        BlueFin::GlPeLtoMgr::UpdateBdsSysTimeOffsets((uint64_t)this, SHIWORD(v17), v4 - 820108814, (uint64_t)&v16 + 10);
        return 1;
      }
LABEL_18:
      DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
    case 2u:
      BlueFin::GlPeTimeManager::SetGlnsAsst(*((BlueFin::GlPeTimeManager **)this + 11), 3, (char *)&v15);
      *((_OWORD *)this + 125BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v15;
      *((_DWORD *)this + 5008) = v16;
      *((_DWORD *)v3 + 1) |= 0x20u;
      return 1;
  }
  return 0;
}

uint64_t BlueFin::GlPeLtoSysTimeDataInterface::Deserialize(BlueFin::GlPeLtoSysTimeDataInterface *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 123 || *((unsigned char *)a2 + 12) != 1) {
    return 0;
  }
  int v5 = BlueFin::GlImplGnss::m_aucImplGnssTable[BlueFin::GlSysLogEntry::GetU8(a2)];
  *((_DWORD *)this + 2) = v5;
  switch(v5)
  {
    case 5:
      *((_WORD *)this + 16) = BlueFin::GlSysLogEntry::GetS16(a2);
      *((_WORD *)this + 17) = BlueFin::GlSysLogEntry::GetS16(a2);
      *((unsigned char *)this + 36) = BlueFin::GlSysLogEntry::GetU8(a2);
      *((unsigned char *)this + 37) = BlueFin::GlSysLogEntry::GetU8(a2);
      break;
    case 4:
      *((_WORD *)this + 19) = BlueFin::GlSysLogEntry::GetS16(a2);
      *((_WORD *)this + 20) = BlueFin::GlSysLogEntry::GetS16(a2);
      *((_WORD *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = BlueFin::GlSysLogEntry::GetS16(a2);
      *((_WORD *)this + 22) = BlueFin::GlSysLogEntry::GetS16(a2);
      *((_WORD *)this + 23) = BlueFin::GlSysLogEntry::GetS16(a2);
      *((_WORD *)this + 24) = BlueFin::GlSysLogEntry::GetS16(a2);
      *((_WORD *)this + 25) = BlueFin::GlSysLogEntry::GetU16(a2);
      break;
    case 2:
      *((unsigned char *)this + 12) = BlueFin::GlSysLogEntry::GetU8(a2);
      *((_WORD *)this + 7) = BlueFin::GlSysLogEntry::GetU16(a2);
      *((_DWORD *)this + 4) = BlueFin::GlSysLogEntry::GetS32(a2);
      *((_DWORD *)this + 5) = BlueFin::GlSysLogEntry::GetS32(a2);
      *((unsigned char *)this + 24) = BlueFin::GlSysLogEntry::GetU8(a2);
      *((unsigned char *)this + 25) = BlueFin::GlSysLogEntry::GetS8(a2);
      *((unsigned char *)this + 26) = BlueFin::GlSysLogEntry::GetU8(a2);
      *((_WORD *)this + 14) = BlueFin::GlSysLogEntry::GetS16(a2);
      *((_WORD *)this + 15) = BlueFin::GlSysLogEntry::GetS16(a2);
      break;
    default:
      return 0;
  }
  return 1;
}

unint64_t BlueFin::GlPeLtoMgr::UpdateGalSysTimeOffsets(uint64_t a1, int *a2, _DWORD *a3)
{
  unsigned int v14 = &unk_270EC9558;
  __int16 v16 = 0;
  int v6 = *a2;
  unsigned int v17 = 0;
  int v18 = v6;
  __int16 v19 = *((_WORD *)a2 + 2);
  int v15 = 3;
  __int16 v16 = (*(unsigned int (**)(_DWORD *))(*(void *)a3 + 32))(a3) / 0x93A80;
  unsigned int v7 = (*(uint64_t (**)(_DWORD *))(*(void *)a3 + 32))(a3);
  LODWORD(v8) = a3[2];
  double v9 = ((double)v8 * 2.32830644e-10 + (double)(v7 % 0x93A80)) * 1000.0;
  double v10 = fmod(v9, 4294967300.0);
  if (v9 <= 4294967300.0) {
    double v10 = v9;
  }
  if (v10 < -4294967300.0) {
    double v10 = -fmod(-v10, 4294967300.0);
  }
  if (v10 < 0.0) {
    unsigned int v11 = --v10;
  }
  else {
    unsigned int v11 = v10;
  }
  unsigned int v17 = v11;
  unint64_t result = BlueFin::GlPeTimeManager::SetGalGpsSystemOffset(*(BlueFin::GlPeTimeManager **)(a1 + 88), (const BlueFin::GlPeGalGpsOffsetData *)&v14, 0);
  int v13 = *a2;
  *(_WORD *)(a1 + 20040) = *((_WORD *)a2 + 2);
  *(_DWORD *)(a1 + 20036) = v13;
  *(_DWORD *)(a1 + 26464) |= 8u;
  return result;
}

unint64_t BlueFin::GlPeTimeManager::SetGalGpsSystemOffset(BlueFin::GlPeTimeManager *this, const BlueFin::GlPeGalGpsOffsetData *a2, int a3)
{
  unint64_t result = BlueFin::GlPeGalTimeMgr::SetGpsOffset((BlueFin::GlPeTimeManager *)((char *)this + 2336), a2);
  int v7 = *((unsigned __int8 *)this + 2432);
  *((unsigned char *)this + 2432) = 0;
  if (v7)
  {
    unint64_t result = BlueFin::GlPeTimeManager::updateConversionTable(this);
    if ((a3 & 1) == 0 && BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
      unint64_t result = (*(uint64_t (**)(const BlueFin::GlPeGalGpsOffsetData *, void, void))(*(void *)a2 + 24))(a2, 0, 0);
    }
  }
  uint64_t v8 = *((unsigned int *)a2 + 2);
  if (v8)
  {
    int v9 = *((unsigned __int16 *)a2 + 10);
    int v10 = *((unsigned __int16 *)a2 + 11);
    unsigned int v11 = *((unsigned __int8 *)a2 + 24);
    BOOL v12 = v9 == 0xFFFF && v10 == 0xFFFF;
    if (!v12 || v11 != 255 || *((unsigned char *)a2 + 25) != 63)
    {
      int v13 = *((_DWORD *)this + 642);
      if (v13 == -7200001) {
        int v13 = 0;
      }
      unsigned int v14 = BlueFin::GlPeTimeManager::m_acNavDataSourceImage[v8];
      double v17 = (double)(__int16)v10 * 4.4408921e-16 * 1000000000.0;
      uint64_t v15 = 78;
      if (a3) {
        uint64_t v16 = 89;
      }
      else {
        uint64_t v16 = 78;
      }
      if (v7) {
        uint64_t v15 = 89;
      }
      return GlCustomLog(15, "GlPeTimeManager::SetGalGpsSystemOffset(%u): Updated:%c  FromNvMem:%c  Source:%s  GalWeek:%d  GalTowS:%u  GPS{A0(ns):%.1lf  A1(ns/s):%.1lf  WN:%d  Tog(s):%.0lf}\n", v13, v15, v16, v14, *((unsigned __int16 *)a2 + 6), *((_DWORD *)a2 + 4) / 0x3E8u, (double)(__int16)v9 * 2.91038305e-11 * 1000000000.0, v17, *((unsigned __int8 *)a2 + 25), (double)v11 * 3600.0);
    }
  }
  return result;
}

uint64_t BlueFin::GlPeGalTimeMgr::SetGpsOffset(BlueFin::GlPeGalTimeMgr *this, const BlueFin::GlPeGalGpsOffsetData *a2)
{
  int v2 = *((_DWORD *)a2 + 2);
  if (!v2) {
    return 0;
  }
  int v5 = (char *)a2 + 20;
  BOOL v6 = *((__int16 *)a2 + 10) == -1 && *((unsigned __int16 *)a2 + 11) == 0xFFFF;
  if (v6 && *((unsigned __int8 *)a2 + 24) == 255 && *((unsigned char *)a2 + 25) == 63) {
    return 0;
  }
  int v7 = *((unsigned __int16 *)a2 + 6);
  unsigned int v8 = *((_DWORD *)a2 + 4);
  int v9 = *((_DWORD *)this + 18);
  if (v9)
  {
    if (v2 >= v9
      && v8 / 0x3E8 + 604800 * v7 <= *((_DWORD *)this + 20) / 0x3E8u + 604800 * *((unsigned __int16 *)this + 38))
    {
      return 0;
    }
  }
  int v10 = (BlueFin::GlPeGalTimeMgr *)((char *)this + 64);
  if (BlueFin::GlPeGalGpsOffsetData::operator==((uint64_t)this + 64, (uint64_t)a2)) {
    return 0;
  }
  if (v10 != a2)
  {
    *((_DWORD *)this + 18) = v2;
    *((_WORD *)this + 38) = v7;
    *((_DWORD *)this + 20) = v8;
    int v12 = *(_DWORD *)v5;
    *((_WORD *)this + 44) = *((_WORD *)v5 + 2);
    *((_DWORD *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v12;
  }
  uint64_t result = 1;
  *((unsigned char *)this + 96) = 1;
  return result;
}

BOOL BlueFin::GlPeGalGpsOffsetData::operator==(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
      && *(unsigned __int16 *)(a1 + 20) == *(unsigned __int16 *)(a2 + 20)
      && *(unsigned __int16 *)(a1 + 22) == *(unsigned __int16 *)(a2 + 22)
      && *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24)
      && *(unsigned __int8 *)(a1 + 25) == *(unsigned __int8 *)(a2 + 25);
}

double BlueFin::GlPeLtoMgr::UpdateBdsSysTimeOffsets(uint64_t a1, __int16 a2, int a3, uint64_t a4)
{
  uint64_t v7 = a1 + 20042;
  BlueFin::GlPeTimeManager::SetBdsSystemOffsets(*(int8x8_t **)(a1 + 88), 3, a2, a3, (uint64_t *)a4, 0);
  __int16 v8 = *(_WORD *)(a4 + 8);
  __int16 v9 = *(_WORD *)(a4 + 10);
  double result = *(double *)a4;
  *(void *)uint64_t v7 = *(void *)a4;
  *(_WORD *)(v7 + 8) = v8;
  *(_WORD *)(v7 + 10) = v9;
  *(_WORD *)(v7 + 12) = a2;
  *(_DWORD *)(a1 + 26464) |= 0x10u;
  return result;
}

uint64_t BlueFin::GlPeTimeManager::SetBdsSystemOffsets(int8x8_t *a1, int a2, __int16 a3, int a4, uint64_t *a5, char a6)
{
  if (a2 == 4) {
    return GlCustomLog(15, "GlPeTimeManager::SetBdsSystemOffsets(%u): Hardcoded values disallowed. GPS_A0(ns):%.1lf  GLO_A0(ns):%.1lf\n");
  }
  int v10 = &unk_270EC9428;
  uint64_t v14 = 0;
  int v15 = 0;
  __int16 v11 = a3;
  int v12 = a4;
  int v13 = a2;
  if (&v14 != a5)
  {
    uint64_t v14 = *a5;
    int v15 = *((_DWORD *)a5 + 2);
  }
  BlueFin::GlPeBdsTimeMgr::SetSystemOffsets(a1 + 268, (const BlueFin::GlPeBdsSysOffsetsData *)&v10);
  __int32 v9 = a1[269].i32[1];
  a1[269].i32[1] = v9 & 0xFFFFFFE3;
  if ((v9 & 0x1C) != 0)
  {
    BlueFin::GlPeTimeManager::updateConversionTable((BlueFin::GlPeTimeManager *)a1);
    if ((a6 & 1) == 0)
    {
      if (BlueFin::GlUtils::m_pInstance)
      {
        if (*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
          (*((void (**)(void **, void, void))v10 + 3))(&v10, 0, 0);
        }
      }
    }
  }
  return GlCustomLog(15, "GlPeTimeManager::SetBdsSystemOffsets(%u): Updated:%c  FromNvMem:%c  Source:%s  BdsWeek:%d  BdsFctS:%u  GPS{A0(ns):%.1lf  A1(ns/s):%.1lf}  GLO{A0(ns):%.1lf  A1(ns/s):%.1lf}  GAL{A0(ns):%.1lf  A1(ns/s):%.1lf}\n");
}

void BlueFin::GlPeBdsTimeMgr::SetSystemOffsets(int8x8_t *this, const BlueFin::GlPeBdsSysOffsetsData *a2)
{
  int8x8_t v8 = (int8x8_t)&unk_270EC9458;
  uint64_t v4 = *(void *)((char *)a2 + 12);
  __int16 v10 = *((_WORD *)a2 + 4);
  int v9 = 2;
  double v5 = (double)*((__int16 *)a2 + 11) * 1.0e-10;
  uint64_t v11 = v4;
  double v12 = v5;
  double v13 = (double)*((__int16 *)a2 + 10) * 1.0e-10;
  BlueFin::GlPeBdsTimeMgr::SetSystemOffset(this, &v8);
  int v9 = 3;
  int v6 = *((__int16 *)a2 + 12);
  double v12 = (double)*((__int16 *)a2 + 13) * 1.0e-10;
  double v13 = (double)v6 * 1.0e-10;
  BlueFin::GlPeBdsTimeMgr::SetSystemOffset(this, &v8);
  int v9 = 4;
  int v7 = *((__int16 *)a2 + 14);
  double v12 = (double)*((__int16 *)a2 + 15) * 1.0e-10;
  double v13 = (double)v7 * 1.0e-10;
  BlueFin::GlPeBdsTimeMgr::SetSystemOffset(this, &v8);
}

unint64_t BlueFin::GlPeTimeManager::SetBdsSystemOffset(int8x8_t *this, int8x8_t *a2)
{
  BlueFin::GlPeBdsTimeMgr::SetSystemOffset(this + 268, a2);
  unint64_t result = BlueFin::GlPeBdsTimeMgr::timeSystemToDataType(v4, a2[1].i32[0]);
  uint64_t v6 = this[269].u32[1];
  this[269].i32[1] = v6 & ~(1 << result);
  if (((1 << result) & v6) != 0)
  {
    return BlueFin::GlPeTimeManager::updateConversionTable((BlueFin::GlPeTimeManager *)this);
  }
  return result;
}

int8x8_t BlueFin::GlPeBdsTimeMgr::SetSystemOffset(int8x8_t *this, int8x8_t *a2)
{
  __int32 v2 = a2[2].i32[1];
  if (!v2)
  {
    uint64_t v14 = "rotCandidateSysOffset.etSrc != GLPE_NAV_DATA_FROM_NONE";
    DeviceFaultNotify("glpe_bdstimemgr.cpp", 542, "acceptSystemOffsetUpdate", (char)"rotCandidateSysOffset.etSrc != GLPE_NAV_DATA_FROM_NONE");
    int v15 = 542;
LABEL_38:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_bdstimemgr.cpp", v15, v14);
  }
  if (this[2].i8[0]) {
    BOOL v5 = this[2].i8[1] == 0;
  }
  else {
    BOOL v5 = 1;
  }
  int8x8_t result = a2[3];
  BOOL v7 = *(double *)&result == 0.0 && v5;
  if (*(double *)&a2[4] != 0.0) {
    BOOL v7 = 0;
  }
  BOOL v8 = v2 == 1 && v5;
  if (!v8 && !v7)
  {
    uint64_t v9 = BlueFin::GlPeBdsTimeMgr::timeSystemToDataType(0, a2[1].i32[0]);
    switch((int)v9)
    {
      case 2:
        __int16 v10 = this + 9;
        goto LABEL_20;
      case 3:
        __int16 v10 = this + 14;
        goto LABEL_20;
      case 4:
        __int16 v10 = this + 19;
        goto LABEL_20;
      case 5:
        __int16 v10 = this + 4;
LABEL_20:
        if ((((unint64_t)this[1].u32[0] >> v9) & 1) == 0
          || (__int32 v11 = a2[2].i32[1], v12 = v10[2].i32[1], v11 < v12)
          || v11 == v12 && a2[2].i32[0] >= (unsigned __int32)v10[2].i32[0])
        {
          switch(a2[1].i32[0])
          {
            case 1:
              if (&this[4] == a2) {
                goto LABEL_35;
              }
              this[5].i32[0] = 1;
              this[5].i16[2] = a2[1].i16[2];
              this[6] = a2[2];
              double v13 = this + 7;
              break;
            case 2:
              if (&this[9] == a2) {
                goto LABEL_35;
              }
              this[10].i32[0] = 2;
              this[10].i16[2] = a2[1].i16[2];
              this[11] = a2[2];
              double v13 = this + 12;
              break;
            case 3:
              if (&this[14] == a2) {
                goto LABEL_35;
              }
              this[15].i32[0] = 3;
              this[15].i16[2] = a2[1].i16[2];
              this[16] = a2[2];
              double v13 = this + 17;
              break;
            case 4:
              if (&this[19] == a2) {
                goto LABEL_35;
              }
              this[20].i32[0] = 4;
              this[20].i16[2] = a2[1].i16[2];
              this[21] = a2[2];
              double v13 = this + 22;
              break;
            default:
              uint64_t v14 = "false";
              DeviceFaultNotify("glpe_bdstimemgr.cpp", 646, "SetSystemOffset", (char)"false");
              int v15 = 646;
              goto LABEL_38;
          }
          *(_OWORD *)v13->i8 = *(_OWORD *)a2[3].i8;
LABEL_35:
          int8x8_t result = vorr_s8(this[1], (int8x8_t)vdup_n_s32(1 << BlueFin::GlPeBdsTimeMgr::timeSystemToDataType(v9, a2[1].i32[0])));
          this[1] = result;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t BlueFin::GlPeBdsTimeMgr::timeSystemToDataType(uint64_t a1, int a2)
{
  if ((a2 - 1) >= 4)
  {
    DeviceFaultNotify("glpe_bdstimemgr.cpp", 1134, "timeSystemToDataType", (char)"false");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_bdstimemgr.cpp", 1134, "false");
  }
  return dword_263BBE010[a2 - 1];
}

#error "26399A504: call analysis failed (funcsize=823)"

void BlueFin::GlReqSm::SetAsstFromPend(BlueFin::GlReqSm *this, int a2, int a3)
{
  uint64_t v149 = *MEMORY[0x263EF8340];
  uint64_t v6 = (char *)this + 54024;
  BOOL v7 = (char *)this + 9944;
  *((_DWORD *)this + 13652) |= *((_DWORD *)this + 2712);
  BlueFin::GlReqSm::PrepareToWaitForRequest(this, 1);
  unsigned int v9 = *((_DWORD *)this + 2712);
  if ((v9 & 0x100000) != 0)
  {
    BlueFin::GlPeGloFcnOsnMgr::SetAsst(*(void *)(*((void *)this + 786) + 48), (long long *)this + 620);
    unsigned int v9 = *((_DWORD *)this + 2712) & 0xFFEFFFFF;
    *((_DWORD *)this + 2712) = v9;
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *((void *)this + 784) + 1008;
    do
    {
      v141[v10] = *(unsigned char *)(v11 + v10);
      ++v10;
    }
    while (v10 != 32);
    LODWORD(v12) = *v7;
    if (*v7)
    {
      unint64_t v13 = 0;
      char v14 = 0;
LABEL_8:
      int v15 = (char *)this + 2 * v13 + 9946;
      do
      {
        unint64_t v16 = *(v15 - 1);
        if (v16 <= 0x1F)
        {
          int v17 = v141[v16];
          if (v17 != 3 && (*v15 & 0x10) != 0)
          {
            v141[v16] = 3;
            GlCustomLog(14, "Signal type changed for GPS SV(%d) old(%d) new(%d)\n", v16, v17, 3);
            unint64_t v12 = *v7;
            ++v13;
            char v14 = 1;
            if (v13 < v12) {
              goto LABEL_8;
            }
            goto LABEL_17;
          }
        }
        ++v13;
        v15 += 2;
      }
      while (v13 < v12);
      if ((v14 & 1) == 0) {
        goto LABEL_18;
      }
LABEL_17:
      (*(void (**)(void, unsigned char *, uint64_t))(**((void **)this + 784) + 240))(*((void *)this + 784), v141, 32);
    }
LABEL_18:
    unsigned int v9 = *((_DWORD *)this + 2712) & 0xFFFFFFFE;
    *((_DWORD *)this + 2712) = v9;
  }
  if ((v9 & 4) != 0)
  {
    Mgr = BlueFin::GlPeGnssEphemerisMgr::GetMgr((void *)(*((void *)this + 786) + 384), *((unsigned __int8 *)this + 6496) >> 4);
    if (Mgr)
    {
      LOBYTE(Mgr) = (*(uint64_t (**)(void *, char *, uint64_t, uint64_t))(*Mgr + 224))(Mgr, (char *)this + 6496, 1, 1);
      unsigned int v9 = *((_DWORD *)this + 2712);
    }
    v9 &= ~4u;
    *((_DWORD *)this + 2712) = v9;
    *((_DWORD *)v6 + 131) &= ~2u;
    char v18 = a2 & Mgr;
    if ((v9 & 2) == 0)
    {
LABEL_21:
      if ((v9 & 0x20000) == 0) {
        goto LABEL_22;
      }
      goto LABEL_52;
    }
  }
  else
  {
    char v18 = 0;
    if ((v9 & 2) == 0) {
      goto LABEL_21;
    }
  }
  int v147 = 7;
  char v148 = 0;
  *(_DWORD *)float v141 = -65536;
  *(void *)&v141[8] = 0;
  *(_DWORD *)&v141[16] = 0;
  memset(&v141[24], 0, 32);
  long long v142 = 0u;
  long long v143 = 0u;
  __int16 v144 = 0;
  int v145 = -1;
  char v146 = 0;
  BlueFin::GlPeAlmanac::Import((uint64_t)v141, (unsigned __int8 *)this + 6784, 0, 0, 0.0);
  BlueFin::GlPeAlmMgr::SetAsstAlm((BlueFin::GlPeAlmMgr *)(*((void *)this + 786) + 34112), (const BlueFin::GlPeAlmanac *)v141);
  unsigned int v9 = *((_DWORD *)this + 2712) & 0xFFFFFFFD;
  *((_DWORD *)this + 2712) = v9;
  *((_DWORD *)v6 + 131) &= ~8u;
  if ((v9 & 0x20000) == 0)
  {
LABEL_22:
    if ((v9 & 0x1000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_53;
  }
LABEL_52:
  BlueFin::GlPeAlmMgr::SetAsstAlm(*((void *)this + 786) + 34112, (unsigned __int16 *)this + 3410, 0);
  int v32 = *((_DWORD *)this + 2712);
  unsigned int v9 = v32 & 0xFFFDFFFF;
  *((_DWORD *)this + 2712) = v32 & 0xFFFDFFFF;
  if ((v32 & 0x1000000) == 0)
  {
LABEL_23:
    if ((v9 & 0x10) == 0) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
LABEL_53:
  BlueFin::GlPeAlmMgr::SetAsstAlm((BlueFin::GlPeTimeManager **)(*((void *)this + 786) + 34112), (unsigned __int8 *)this + 6852, 0);
  int v33 = *((_DWORD *)this + 2712);
  unsigned int v9 = v33 & 0xFEFFFFFF;
  *((_DWORD *)this + 2712) = v33 & 0xFEFFFFFF;
  if ((v33 & 0x10) != 0)
  {
LABEL_24:
    v9 &= ~0x10u;
    *((_DWORD *)this + 2712) = v9;
  }
LABEL_25:
  if ((v9 & 0x20) != 0)
  {
    __int16 v19 = (BlueFin::GlPeTimeManager *)*((void *)this + 785);
    *(void *)float v141 = &unk_270EC96B0;
    *(_DWORD *)&v141[8] = 2;
    v141[12] = 0;
    *(void *)&v141[16] = &off_270EBC600;
    *(void *)&v141[24] = 0;
    *(_OWORD *)&v141[32] = *((_OWORD *)this + 435);
    BlueFin::GlPeTimeManager::SetGpsUtcModel(v19, (const BlueFin::GlPeGpsUtcModel *)v141);
    unsigned int v9 = *((_DWORD *)this + 2712) & 0xFFFFFFDF;
    *((_DWORD *)this + 2712) = v9;
  }
  if ((v9 & 0x40000) != 0)
  {
    BlueFin::GlPeTimeManager::SetGlnsAsst(*((BlueFin::GlPeTimeManager **)this + 785), 2, (char *)this + 6976);
    unsigned int v9 = *((_DWORD *)this + 2712) & 0xFFFBFFFF;
    *((_DWORD *)this + 2712) = v9;
  }
  if (a2)
  {
    int v135 = *(_DWORD *)(*((void *)this + 785) + 2576);
    if ((v9 & 0x10000) != 0 && v7[176])
    {
      *((void *)this + 6852) = *((void *)this + 1282);
      *((_OWORD *)this + 3423) = *((_OWORD *)this + 638);
      *((_OWORD *)this + 3424) = *((_OWORD *)this + 639);
      *((_OWORD *)this + 3425) = *((_OWORD *)this + 640);
      *((_OWORD *)this + 3419) = *((_OWORD *)this + 634);
      *((_OWORD *)this + 3420) = *((_OWORD *)this + 635);
      *((_OWORD *)this + 342BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *((_OWORD *)this + 636);
      *((_OWORD *)this + 3422) = *((_OWORD *)this + 637);
      *((_OWORD *)this + 3418) = *((_OWORD *)this + 633);
      v6[800] = 1;
      v7[176] = 0;
    }
    if ((v9 & 0x200000) != 0)
    {
      BlueFin::GlPeRtiRequestor::OnRtiReceived(*((void *)this + 783) + 181056, (char *)this + 9768);
      unsigned int v9 = *((_DWORD *)this + 2712) & 0xFFDFFFFF;
      *((_DWORD *)this + 2712) = v9;
    }
    unint64_t v138 = 0;
    int v139 = -1;
    double v20 = -7199999.0;
    long long v140 = xmmword_263BB40A0;
    if ((v9 & 0x400) != 0) {
      int v21 = a3;
    }
    else {
      int v21 = 1;
    }
    if (v21)
    {
LABEL_128:
      int v64 = v21 ^ 1;
      if ((v9 & 0x200) != 0 && (a3 & 1) == 0)
      {
        int v65 = *((unsigned __int16 *)this + 4146);
        LODWORD(v20) = *((_DWORD *)this + 2072);
        double v66 = (double)*(unint64_t *)&v20 * 0.001;
        *(void *)float v141 = &off_270EBC600;
        double v67 = fmod(v66, 1.0);
        if (v67 < 0.0 || v67 >= 1.0)
        {
          DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
        }
        double v68 = v67 * 4294967300.0 + 0.5;
        if (v68 >= 4294967300.0) {
          unsigned int v69 = -1;
        }
        else {
          unsigned int v69 = v68;
        }
        unsigned int v70 = v66 + 604800 * v65;
        *(void *)&v141[8] = __PAIR64__(v70, v69);
        *(void *)float v141 = &off_270EBC600;
        int v71 = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092);
        double v72 = (double)(v71 - *((_DWORD *)this + 2519)) * 0.001;
        double v73 = fmod(v72, 1.0);
        double v74 = v73 * 4294967300.0 + 0.5;
        LODWORD(v75) = v74;
        if (v74 >= 4294967300.0) {
          uint64_t v75 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v75 = v75;
        }
        if (v73 < 0.0 || v73 >= 1.0)
        {
          long long v129 = "dFracSec >= 0.0 && dFracSec < 1.0";
          int v130 = 173;
          long long v131 = "glpe_timepoint.h";
          DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
          goto LABEL_257;
        }
        unsigned int v77 = v72;
        if (v72 < 0.0)
        {
          unsigned int v79 = v70 - v77;
          if (v70 > v77 || (v70 == v77 ? (BOOL v80 = v69 >= v75) : (BOOL v80 = 0), v80))
          {
            BOOL v34 = v69 >= v75;
            LODWORD(v75) = v69 - v75;
            int v82 = !v34;
            int v78 = v79 - v82;
          }
          else
          {
            if (v77 - v70 != v69 > v75 || v69 != v75)
            {
              long long v129 = "!tDelta.isNegative()";
              int v130 = 425;
              long long v131 = "glpe_datetime.h";
              DeviceFaultNotify("glpe_datetime.h", 425, "operator+=", (char)"!tDelta.isNegative()");
LABEL_257:
              __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v131, v130, v129);
            }
            int v78 = 0;
            LODWORD(v75) = 0;
          }
        }
        else
        {
          v75 += v69;
          int v78 = v70 + v77 + HIDWORD(v75);
        }
        *(void *)&v141[8] = __PAIR64__(v78, v75);
        unsigned int v83 = *(_DWORD *)(*((void *)this + 785) + 2568);
        if (v83 == -7200001)
        {
          double v20 = -7200001.0;
        }
        else
        {
          int v84 = *((_DWORD *)this + 1617);
          if (v84) {
            unsigned int v83 = v83 + v71 - v84;
          }
          if (v83 <= 0xFF9222FE) {
            double v20 = (double)v83;
          }
          else {
            double v20 = (double)(int)v83;
          }
        }
        unsigned int v85 = 1000 * *((_DWORD *)this + 2141);
        if (v85 <= 0x30D40) {
          unsigned int v85 = 200000;
        }
        double v8 = (double)v85;
        unint64_t v138 = __PAIR64__(v78, v75);
        int v139 = 0;
        *(double *)&long long v140 = v20;
        *((double *)&v140 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = (double)v85;
        if (*((unsigned char *)this + 8294))
        {
          BlueFin::GlPeTowAssistMgr::SetAsstTime(*((void *)this + 806), *((unsigned __int8 *)this + 8294), (uint64_t)this + 8296);
          unsigned int v9 = *((_DWORD *)this + 2712);
        }
        v9 &= ~0x200u;
        *((_DWORD *)this + 2712) = v9;
        int v64 = 1;
      }
      if ((v9 & 0x80000) != 0 && (a3 & 1) == 0)
      {
        BlueFin::GlPeTimeManager::SetGnssTimeModel(*((BlueFin::GlPeTimeManager **)this + 785), (unsigned __int8 *)this + 9904, 4295000000.0);
        unsigned int v9 = *((_DWORD *)this + 2712) & 0xFFF7FFFF;
        *((_DWORD *)this + 2712) = v9;
      }
      unsigned int v86 = v9;
      if ((v9 & 0x40) != 0)
      {
        BlueFin::GlPeRangeAidGen::SetAsstAcqAid(*((void *)this + 789), (__int16 *)this + 3498);
        char v18 = 1;
        *uint64_t v6 = 1;
        unsigned int v86 = *((_DWORD *)this + 2712) & 0xFFFFFFBF;
        *((_DWORD *)this + 2712) = v86;
      }
      int v87 = (v9 >> 6) & 1;
      if ((v86 & 0x80) != 0 && *(unsigned char *)(*(void *)(*((void *)this + 786) + 48) + 1224))
      {
        BlueFin::GlPeRangeAidGen::SetAsstAcqAid(*((void *)this + 789), (int *)this + 1835);
        int v88 = *((__int16 *)this + 3673);
        if (v88 >= 14) {
          LOBYTE(v88) = 14;
        }
        uint64_t v89 = v88;
        if ((_BYTE)v88)
        {
          int v90 = 0;
          long long v91 = (__int16 *)((char *)this + 7348);
          do
          {
            __int16 v92 = *v91;
            v91 += 11;
            v90 |= 1 << (v92 + 1);
            --v89;
          }
          while (v89);
        }
        else
        {
          int v90 = 0;
        }
        uint64_t v93 = *(void *)(*((void *)this + 786) + 48);
        *(_DWORD *)(v93 + 1216) = *(_DWORD *)(*(void *)(v93 + 16) + 2568);
        *(_DWORD *)(v93 + 1220) = v90;
        LOBYTE(v87) = 1;
        *uint64_t v6 = 1;
        unsigned int v86 = *((_DWORD *)this + 2712) & 0xFFFFFF7F;
        *((_DWORD *)this + 2712) = v86;
        char v18 = 1;
      }
      if ((v86 & 0x8000000) != 0)
      {
        BlueFin::GlPeRangeAidGen::SetAsstAcqAid(*((void *)this + 789), (int *)this + 1914);
        LOBYTE(v87) = 1;
        *uint64_t v6 = 1;
        unsigned int v86 = *((_DWORD *)this + 2712) & 0xF7FFFFFF;
        *((_DWORD *)this + 2712) = v86;
        char v18 = 1;
      }
      if ((v86 & 0x10000000) != 0)
      {
        BlueFin::GlPeRangeAidGen::SetAsstAcqAid(*((void *)this + 789), (int *)this + 1993);
        LOBYTE(v87) = 1;
        *uint64_t v6 = 1;
        unsigned int v86 = *((_DWORD *)this + 2712) & 0xEFFFFFFF;
        *((_DWORD *)this + 2712) = v86;
        char v18 = 1;
      }
      if ((v86 & 0x100) != 0)
      {
        *(_DWORD *)&v141[48] = -1;
        v141[52] = 0;
        LODWORD(v142) = 0;
        memset(v141, 0, 48);
        while (BlueFin::GlPeAsstPosReqDataFifo::Get((uint64_t)this + 8608, (uint64_t)v141))
        {
          int v94 = (int)((double)(*(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092) - (int)v142) * 0.001);
          if (v94 <= 60)
          {
            *(_DWORD *)&v141[40] += v94;
            uint64_t v95 = *((void *)this + 786);
            v136[0] = *(_OWORD *)v141;
            v136[1] = *(_OWORD *)&v141[16];
            uint64_t v137 = *(void *)&v141[32];
            BlueFin::GlPeAsstPosMgr::SetAsstPos(v95 + 56, (uint64_t)v136, *(int *)&v141[48], *(int *)&v141[44], 0, (unsigned int *)&v141[40], v141[52]);
            BlueFin::GlPeStartupMgr::Update(*((BlueFin::GlPeStartupMgr **)this + 805));
            BlueFin::GlPosEng::SetInitialPosMicroNav(*((void **)this + 783), (double *)v141);
            char v18 = 1;
          }
        }
        unsigned int v86 = *((_DWORD *)this + 2712) & 0xFFFFFEFF;
        *((_DWORD *)this + 2712) = v86;
        *((_DWORD *)v6 + 131) &= ~1u;
      }
      if (v86 & 0x1000) == 0 || (a3)
      {
        if (!v64)
        {
          int v100 = 0;
          if ((v86 & 0x2000) != 0) {
            goto LABEL_234;
          }
          goto LABEL_205;
        }
      }
      else
      {
        int v96 = *((unsigned __int16 *)this + 4874);
        unsigned int v97 = *((_DWORD *)this + 2438);
        if (*((_WORD *)this + 4874) || v97)
        {
          double v101 = (double)v97 * 0.001;
          *(void *)float v141 = &off_270EBC600;
          double v102 = fmod(v101, 1.0);
          if (v102 < 0.0 || v102 >= 1.0)
          {
            DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
          }
          double v104 = v102 * 4294967300.0 + 0.5;
          unsigned int v105 = v104;
          if (v104 >= 4294967300.0) {
            unsigned int v105 = -1;
          }
          unsigned int v106 = *(_DWORD *)(*((void *)this + 785) + 2568);
          if (v106 == -7200001)
          {
            double v99 = -7200001.0;
          }
          else
          {
            int v108 = *((_DWORD *)this + 1617);
            if (v108) {
              unsigned int v106 = v106 - v108 + *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092);
            }
            if (v106 <= 0xFF9222FE) {
              double v99 = (double)v106;
            }
            else {
              double v99 = (double)(int)v106;
            }
          }
          int v111 = *((_DWORD *)this + 2440);
          if (v111 <= 200000) {
            int v111 = 200000;
          }
          double v110 = (double)v111;
          LODWORD(v138) = v105;
          HIDWORD(v138) = v101 + 604800 * v96;
          int v139 = 0;
        }
        else
        {
          LOWORD(v20) = *((_WORD *)this + 4869);
          LOWORD(v8) = *((_WORD *)this + 4870);
          BlueFin::GlUtcTime::GlUtcTime((BlueFin::GlUtcTime *)v141, *((unsigned __int16 *)this + 4864), *((unsigned __int8 *)this + 9730), *((unsigned __int8 *)this + 9732), *((unsigned __int8 *)this + 9734), *((unsigned __int8 *)this + 9736), (double)*(unint64_t *)&v20 + (double)*(unint64_t *)&v8 * 0.001);
          unsigned int v98 = *(_DWORD *)(*((void *)this + 785) + 2568);
          if (v98 == -7200001)
          {
            double v99 = -7200001.0;
          }
          else
          {
            int v107 = *((_DWORD *)this + 1617);
            if (v107) {
              unsigned int v98 = v98 - v107 + *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092);
            }
            if (v98 <= 0xFF9222FE) {
              double v99 = (double)v98;
            }
            else {
              double v99 = (double)(int)v98;
            }
          }
          int v109 = *((_DWORD *)this + 2436);
          if (v109 <= 200000) {
            int v109 = 200000;
          }
          double v110 = (double)v109;
          unint64_t v138 = *(void *)&v141[8];
          int v139 = 2;
        }
        *(double *)&long long v140 = v99;
        *((double *)&v140 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v110;
        *(void *)&v136[0] = &off_270EBC600;
        *((void *)&v136[0] + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
        BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)&v138, (BlueFin::GlGpsTime *)v136);
        uint64_t v112 = *((void *)this + 786);
        long long v113 = *(_OWORD *)((char *)this + 9704);
        *(_OWORD *)float v141 = *(_OWORD *)((char *)this + 9688);
        *(_OWORD *)&v141[16] = v113;
        *(void *)&v141[32] = *((void *)this + 1215);
        BlueFin::GlPeAsstPosMgr::SetAsstPos(v112 + 56, (uint64_t)v141, 2, 0, (uint64_t)v136, 0, 0);
        BlueFin::GlPeGnssTime::operator+=((unsigned int *)&v138, (double)(*(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092) - *((_DWORD *)this + 2523)) * 0.001);
        *((_DWORD *)this + 2712) &= ~0x1000u;
      }
      char v114 = (BlueFin::GlPeTimeManager *)*((void *)this + 785);
      v141[0] = 0;
      BlueFin::GlPeTimeManager::SetTime(v114, (BlueFin::GlPeGnssTime *)&v138, 2u, v141);
      *((_DWORD *)v6 + 131) &= ~4u;
      unsigned int v86 = *((_DWORD *)this + 2712);
      int v100 = 1;
      char v18 = v135 == 0;
      if ((v86 & 0x2000) != 0)
      {
LABEL_234:
        BlueFin::GlPeOscMgr::SetAsstOscOffset(*((void *)this + 807), (__int16 *)this + 5052, (double)*((int *)this + 2524), (double)*((int *)this + 2525));
        BlueFin::GlPeStartupMgr::Update(*((BlueFin::GlPeStartupMgr **)this + 805));
        unsigned int v115 = *((_DWORD *)this + 2712) & 0xFFFFDFFF;
        *((_DWORD *)this + 2712) = v115;
        char v18 = 1;
        if ((v115 & 0x800) != 0) {
          goto LABEL_235;
        }
        goto LABEL_241;
      }
LABEL_205:
      if ((v86 & 0x800) != 0)
      {
LABEL_235:
        uint64_t v116 = *((void *)this + 807);
        int v117 = *(__int16 *)(v116 + 2);
        int v118 = *(__int16 *)(v116 + 10);
        if (BlueFin::GlUtils::m_ucEnabled) {
          BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
        }
        double v119 = (double)v118 * 0.000000001;
        unsigned int v120 = *((unsigned __int16 *)this + 4834);
        double v121 = (double)v120 * 0.000000001;
        unsigned int v122 = *((_DWORD *)this + 2420);
        double v123 = (double)v122 * 0.000000001 * 1000.0 / 31556952.0;
        double v124 = v121 + v123;
        if (v121 + v123 >= v119)
        {
          GlCustomLog(14, "Ignored RefFreqStatus(%d, %hu)  %us (%dppb) was (%d, %d)\n", *((_DWORD *)this + 2416), v120, v122, (int)(v124 * 1000000000.0 + 0.5), (int)((double)v117 * 0.000000001 * 1000000000.0 + 0.5), (int)(v119 * 1000000000.0 + 0.5));
        }
        else
        {
          BlueFin::GlPeOscMgr::SetOscOff(*((BlueFin::GlPeOscMgr **)this + 807), (double)*((int *)this + 2416) * 0.000000001, v121 + v123, 0);
          GlCustomLog(14, "Applied RefFreqStatus(%d, %hu) %us (%dppb)\n", *((_DWORD *)this + 2416), *((unsigned __int16 *)this + 4834), *((_DWORD *)this + 2420), (int)(v124 * 1000000000.0 + 0.5));
          char v18 = 1;
        }
        BlueFin::GlPeStartupMgr::Update(*((BlueFin::GlPeStartupMgr **)this + 805));
        *((_DWORD *)this + 2712) &= ~0x800u;
      }
LABEL_241:
      if (!(v87 & 1 | ((v18 & 1) == 0)))
      {
        long long v125 = (int *)(*((void *)this + 789) + 19352);
        if (*v125 <= 1) {
          int *v125 = 2;
        }
        v6[529] = 1;
      }
      if (v100)
      {
        if (v135) {
          GlCustomLog(14, "Already had time\n");
        }
        else {
          BlueFin::GlPosEng::OnInitialTime(*((BlueFin::GlPosEng **)this + 783));
        }
      }
      if (v18)
      {
        if (*(unsigned char *)(*((void *)this + 786) + 368))
        {
          BlueFin::GlPosEng::SendNvMem2MicroNav(*((void *)this + 783));
          *(unsigned char *)(*((void *)this + 786) + 368) = 0;
        }
      }
      return;
    }
    LOWORD(v20) = *((_WORD *)this + 4281);
    BlueFin::GlUtcTime::GlUtcTime((BlueFin::GlUtcTime *)v141, *((unsigned __int16 *)this + 4276), *((unsigned __int8 *)this + 8554), *((unsigned __int8 *)this + 8556), *((unsigned __int8 *)this + 8558), *((unsigned __int8 *)this + 8560), (double)*(unint64_t *)&v20);
    double v22 = (double)*((uint64_t *)this + 1071) * 0.001;
    double v23 = fabs(v22);
    double v24 = fmod(v23, 1.0);
    double v25 = v24 * 4294967300.0 + 0.5;
    unsigned int v26 = v25;
    if (v25 >= 4294967300.0) {
      unsigned int v26 = -1;
    }
    if (v24 < 0.0 || v24 >= 1.0)
    {
      long long v126 = "dFracSec >= 0.0 && dFracSec < 1.0";
      int v127 = 173;
      long long v128 = "glpe_timepoint.h";
      DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
      goto LABEL_255;
    }
    unsigned int v28 = v23;
    if (v22 < 0.0)
    {
      if (*(_DWORD *)&v141[12] > v28
        || (*(_DWORD *)&v141[12] == v28 ? (BOOL v34 = *(_DWORD *)&v141[8] >= v26) : (BOOL v34 = 0), v34))
      {
        unsigned int v30 = (__PAIR64__(*(_DWORD *)&v141[12] - v28, *(unsigned int *)&v141[8]) - v26) >> 32;
        LODWORD(v29) = *(_DWORD *)&v141[8] - v26;
      }
      else
      {
        if (v28 - *(_DWORD *)&v141[12] != *(_DWORD *)&v141[8] > v26 || v26 != *(_DWORD *)&v141[8])
        {
          long long v126 = "!tDelta.isNegative()";
          int v127 = 1078;
          long long v128 = "glpe_datetime.h";
          DeviceFaultNotify("glpe_datetime.h", 1078, "operator+=", (char)"!tDelta.isNegative()");
LABEL_255:
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v128, v127, v126);
        }
        unsigned int v30 = 0;
        LODWORD(v29) = 0;
      }
    }
    else
    {
      unint64_t v29 = *(unsigned int *)&v141[8] + (unint64_t)v26;
      unsigned int v30 = *(_DWORD *)&v141[12] + v28 + HIDWORD(v29);
    }
    *(void *)&v141[8] = __PAIR64__(v30, v29);
    int v36 = BlueFin::GlWeekTowTime::m_ucNextLs;
    BOOL v38 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
       && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent != 0;
    BOOL v39 = v30 == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent && v38;
    if (BlueFin::GlWeekTowTime::m_ulCtFctOfNextLs - 1 >= v30) {
      int v36 = BlueFin::GlWeekTowTime::m_ucCurrentLs;
    }
    unsigned int v40 = v30 - v39 + 432000 - v36;
    unsigned int v41 = v40 % 0x7861F80;
    unsigned int v42 = v40 % 0x7861F80 / 0x15180;
    if (v40 % 0x7861F80 >= 0x5A4EC00)
    {
      int v43 = 3;
    }
    else if (v41 < 0x3C3B880)
    {
      int v43 = v41 > 0x1E284FF;
    }
    else
    {
      int v43 = 2;
    }
    int v44 = v43;
    uint64_t v45 = &BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v43];
    if (v42 >= v45[9])
    {
      int v46 = 9;
    }
    else if (v42 >= BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v43 + 6])
    {
      int v46 = 6;
    }
    else if (v42 >= BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v43 + 3])
    {
      int v46 = 3;
    }
    else
    {
      int v46 = 0;
    }
    *(_WORD *)&v141[16] = (v44 | (4 * (v40 / 0x7861F80))) + 1980;
    *(_WORD *)&v141[18] = v42 - *v45 + 1;
    if (v42 >= BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v44 + v46 + 2])
    {
      int v47 = 3;
    }
    else if (v42 < BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v44 + v46 + 1])
    {
      int v47 = 1;
    }
    else
    {
      int v47 = 2;
    }
    int v48 = v47 + v46;
    v141[20] = v48;
    v141[21] = v42 - BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v44 + v48 - 1] + 1;
    LOBYTE(v42) = 60;
    if (v39)
    {
      LOBYTE(v49) = 59;
      LOBYTE(v50) = 23;
    }
    else
    {
      unint64_t v50 = (1193047 * (unint64_t)(v40 % 0x15180)) >> 32;
      unsigned int v49 = (2185 * (v40 % 0xE10)) >> 17;
      unsigned int v42 = v40 % 0x3C;
    }
    v141[22] = v50;
    v141[23] = v49;
    v141[24] = v42;
    int v51 = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092);
    double v52 = (double)(v51 - *((_DWORD *)this + 2520)) * 0.001;
    double v53 = fmod(v52, 1.0);
    double v54 = v53 * 4294967300.0 + 0.5;
    LODWORD(v55) = v54;
    if (v54 >= 4294967300.0) {
      uint64_t v55 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v55 = v55;
    }
    if (v53 < 0.0 || v53 >= 1.0)
    {
      long long v132 = "dFracSec >= 0.0 && dFracSec < 1.0";
      int v133 = 173;
      long long v134 = "glpe_timepoint.h";
      DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
    }
    else
    {
      unsigned int v56 = v52;
      if (v52 >= 0.0)
      {
        v55 += v29;
        int v57 = v30 + v56 + HIDWORD(v55);
LABEL_118:
        unsigned int v61 = *(_DWORD *)(*((void *)this + 785) + 2568);
        if (v61 == -7200001)
        {
          double v20 = -7200001.0;
        }
        else
        {
          int v62 = *((_DWORD *)this + 1617);
          if (v62) {
            unsigned int v61 = v61 + v51 - v62;
          }
          if (v61 <= 0xFF9222FE) {
            double v20 = (double)v61;
          }
          else {
            double v20 = (double)(int)v61;
          }
        }
        unsigned int v63 = 1000 * *((_DWORD *)this + 2144);
        if (v63 <= 0x30D40) {
          unsigned int v63 = 200000;
        }
        double v8 = (double)v63;
        unint64_t v138 = __PAIR64__(v57, v55);
        int v139 = 2;
        *(double *)&long long v140 = v20;
        *((double *)&v140 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = (double)v63;
        unsigned int v9 = *((_DWORD *)this + 2712) & 0xFFFFFBFF;
        *((_DWORD *)this + 2712) = v9;
        goto LABEL_128;
      }
      unsigned int v58 = v30 - v56;
      if (v30 > v56 || v30 == v56 && v29 >= v55)
      {
        BOOL v34 = v29 >= v55;
        LODWORD(v55) = v29 - v55;
        int v59 = !v34;
        int v57 = v58 - v59;
        goto LABEL_118;
      }
      if (v56 - v30 == v29 > v55 && v29 == v55)
      {
        int v57 = 0;
        LODWORD(v55) = 0;
        goto LABEL_118;
      }
      long long v132 = "!tDelta.isNegative()";
      int v133 = 1078;
      long long v134 = "glpe_datetime.h";
      DeviceFaultNotify("glpe_datetime.h", 1078, "operator+=", (char)"!tDelta.isNegative()");
    }
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v134, v133, v132);
  }
}

uint64_t BlueFin::GlReqSm::PrepareToWaitForRequest(BlueFin::GlReqSm *this, int a2)
{
  if ((*((_WORD *)this + 6096) & 0xF90F) != 0
    || BlueFin::GlPePendingBag::HasReq((uint64_t)this + 6496, 0)
    || BlueFin::GlPePendingBag::HasReq((uint64_t)this + 6496, 14)
    || BlueFin::GlPePendingBag::HasReq((uint64_t)this + 6496, 15)
    || BlueFin::GlPePendingBag::HasReq((uint64_t)this + 6496, 1)
    || BlueFin::GlPePendingBag::HasReq((uint64_t)this + 6496, 2)
    || BlueFin::GlPePendingBag::HasReq((uint64_t)this + 6496, 3)
    || BlueFin::GlPePendingBag::HasReq((uint64_t)this + 6496, 11)
    || BlueFin::GlPePendingBag::HasReq((uint64_t)this + 6496, 8)
    || BlueFin::GlPePendingBag::HasReq((uint64_t)this + 6496, 13)
    || (uint64_t result = BlueFin::GlPePendingBag::HasReq((uint64_t)this + 6496, 12), result))
  {
    return BlueFin::GlTimer::disarm((uint64_t)this + 31584);
  }
  else if (a2)
  {
    unsigned int v5 = *(_DWORD *)(*((void *)this + 784) + 844);
    *((void *)this + 3952) = this;
    uint64_t result = BlueFin::GlTimer::arm((BlueFin::GlReqSm *)((char *)this + 31584), 26, 0, v5);
    *((unsigned char *)this + 31608) = 1;
  }
  return result;
}

uint64_t BlueFin::GlPeReqBag::Cleanup(uint64_t this)
{
  if (*(unsigned char *)(this + 3233))
  {
    uint64_t v1 = this;
    uint64_t v2 = 0;
    uint64_t v3 = (unsigned char *)(this + 3233);
    BOOL v34 = (unsigned char *)(this + 3233);
    int v32 = *(_DWORD *)(this + 1312);
    uint64_t v4 = this + 624;
    *(unsigned char *)(this + 3233) = 0;
    int v33 = (_DWORD *)(this + 20688);
    do
    {
      uint64_t v5 = *(void *)(v1 + 8 * v2);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 288))(v5);
        int v36 = &unk_270EC4BC0;
        uint64_t v37 = v3;
        LOBYTE(v38) = *(unsigned char *)(v1 + 3233);
        *(unsigned char *)(v1 + 3233) = 0;
        uint64_t v6 = *(void *)(v1 + 8 * (int)v2);
        if (v6)
        {
          if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 296))(v6))
          {
            int v7 = *(_DWORD *)(*(void *)(*(void *)(v1 + 8 * (int)v2) + 8) + 16);
            BlueFin::GlSetBase::Remove(v4, (__int16)v2);
            GlCustomLog(13, "RequestDone ");
            uint64_t v8 = *(void *)(*(void *)(v1 + 8 * (int)v2) + 8);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 136))(v8, 13);
            unsigned int v9 = *(void **)(v1 + 8 * (int)v2);
            uint64_t v10 = (_DWORD *)v9[1];
            int v11 = v10[4];
            if (v11 == 1)
            {
              int v12 = (*(uint64_t (**)(void))(*(void *)v10 + 400))(v9[1]);
              unsigned int v9 = *(void **)(v1 + 8 * (int)v2);
              if (v12)
              {
                (*(void (**)(void))(*(void *)v9[1] + 408))(v9[1]);
                BOOL v13 = 0;
                unsigned int v9 = *(void **)(v1 + 8 * (int)v2);
              }
              else
              {
                BOOL v13 = 0;
              }
              BOOL v14 = 1;
            }
            else
            {
              BOOL v14 = v11 == 2;
              BOOL v13 = v11 == 0;
            }
            if ((*(uint64_t (**)(void *))(*v9 + 328))(v9)) {
              *(void *)(v1 + 3264) = 0;
            }
            (***(void (****)(void))(v1 + 8 * (int)v2))(*(void *)(v1 + 8 * (int)v2));
            if (v7 == 12)
            {
              int v15 = (_DWORD *)BlueFin::GlUtils::m_pInstance;
              ++*(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1088);
              int v16 = (*(uint64_t (**)(void))(**(void **)v15 + 48))();
              v15[273] = v16;
              *int v33 = v16;
            }
            uint64_t v17 = *(void *)(v1 + 8 * (int)v2);
            char v18 = (void (*)(uint64_t))(*(uint64_t (**)(void))(**(void **)(v1 + 616) + 96))(*(void *)(v1 + 616));
            if (v18) {
              v18(v17);
            }
            uint64_t v19 = 0;
            *(void *)(v1 + 8 * (int)v2) = 0;
            int v20 = *(_DWORD *)(v1 + 1312);
            *(_DWORD *)(v1 + 1312) = v20 & ~(1 << v7);
            while (1)
            {
              uint64_t v21 = *(void *)(v1 + v19);
              if (v21)
              {
                if (*(_DWORD *)(*(void *)(v21 + 8) + 16) == v7) {
                  break;
                }
              }
              v19 += 8;
              if (v19 == 576) {
                goto LABEL_25;
              }
            }
            *(_DWORD *)(v1 + 1312) = v20 | (1 << v7);
          }
          else
          {
            BOOL v14 = 0;
            BOOL v13 = 0;
          }
LABEL_25:
          BlueFin::GlPeReqBag::DetermineEarliestPositionRequestTimeout(v1);
          if (v14)
          {
            __int16 v35 = 45;
            uint64_t v22 = *(void *)(v1 + 584);
            uint64_t v23 = *(void *)(v22 + 32);
            unint64_t v24 = *(void *)(v22 + 8);
            *(void *)(v22 + 32) = v24;
            do
            {
              unint64_t v39 = 0;
              if (BlueFin::patch_dispatch(v24, v22, (unsigned __int8 *)&v35, &v39)) {
                unint64_t v24 = v39;
              }
              else {
                unint64_t v24 = (*(uint64_t (**)(uint64_t, __int16 *))(v22 + 32))(v22, &v35);
              }
              *(void *)(v22 + 32) = v24;
            }
            while (v24);
            *(void *)(v22 + 32) = v23;
          }
          if (v13)
          {
            __int16 v35 = 65;
            uint64_t v25 = *(void *)(v1 + 584);
            uint64_t v26 = *(void *)(v25 + 32);
            unint64_t v27 = *(void *)(v25 + 8);
            *(void *)(v25 + 32) = v27;
            do
            {
              unint64_t v39 = 0;
              if (BlueFin::patch_dispatch(v27, v25, (unsigned __int8 *)&v35, &v39)) {
                unint64_t v27 = v39;
              }
              else {
                unint64_t v27 = (*(uint64_t (**)(uint64_t, __int16 *))(v25 + 32))(v25, &v35);
              }
              *(void *)(v25 + 32) = v27;
            }
            while (v27);
            *(void *)(v25 + 32) = v26;
          }
        }
        *uint64_t v37 = v38;
      }
      ++v2;
    }
    while (v2 != 72);
    this = (*(uint64_t (**)(void))(**(void **)(v1 + 576) + 1072))(*(void *)(v1 + 576));
    if (this)
    {
      this = (*(uint64_t (**)(void))(**(void **)(v1 + 576) + 1088))(*(void *)(v1 + 576));
      unsigned int v28 = *(_DWORD *)(v1 + 1312);
      if ((this & 1) == 0)
      {
        BOOL v29 = (v28 & 0x2000) != 0 || (v28 & 0x1000) != 0;
        goto LABEL_48;
      }
    }
    else
    {
      unsigned int v28 = *(_DWORD *)(v1 + 1312);
    }
    BOOL v29 = 1;
LABEL_48:
    if ((v32 & 0xC) == 0 || (v28 & 4) != 0 || v29 | (v28 >> 3) & 1)
    {
      if (v32 == v28) {
        goto LABEL_61;
      }
      int v36 = (_DWORD *)&v37 + 1;
      LOBYTE(v37) = 3;
      HIDWORD(v37) = v28;
      uint64_t v38 = 0;
      BlueFin::GlSetBase::Remove((uint64_t)&v36, 12);
      this = BlueFin::GlSetBase::Remove((uint64_t)&v36, 13);
      if ((v32 & 1) == 0 || *v36) {
        goto LABEL_61;
      }
      if (v37 >= 2uLL)
      {
        if (v36[1])
        {
LABEL_61:
          *BOOL v34 = 1;
          return this;
        }
        uint64_t v30 = 2;
        while (v37 != v30)
        {
          if (v36[v30++])
          {
            if (v30 - 1 < (unint64_t)v37) {
              goto LABEL_61;
            }
            break;
          }
        }
      }
    }
    this = BlueFin::GlReqSm::StartWarmStandBy(*(BlueFin::GlReqSm **)(v1 + 584));
    goto LABEL_61;
  }
  return this;
}

void sub_26399CA54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned char *a12, char a13)
{
  *a12 = a13;
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlPeReqBag::DetermineEarliestPositionRequestTimeout(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = 0;
  uint64_t v30 = (unsigned char *)(this + 3233);
  char v31 = *(unsigned char *)(this + 3233);
  unsigned int v3 = -1;
  *(unsigned char *)(this + 3233) = 0;
  *(_DWORD *)(this + 1316) = -1;
  int v4 = -1;
  unsigned int v5 = -1;
  do
  {
    uint64_t v6 = *(void *)(v1 + 8 * v2);
    if (!v6) {
      goto LABEL_37;
    }
    this = *(void *)(v6 + 8);
    unsigned int v7 = *(_DWORD *)(this + 16);
    if (v7 > 0xD) {
      goto LABEL_22;
    }
    int v8 = 1 << v7;
    if ((v8 & 0x10F) != 0)
    {
      if (*(unsigned char *)(v1 + 3236) && *(_DWORD *)(v1 + 3252) == -1)
      {
        unsigned int v18 = 1000 * *(__int16 *)(this + 22);
        unsigned int v19 = *(_DWORD *)(this + 28);
        BOOL v12 = v18 >= v19;
        unsigned int v20 = v18 - v19;
        if (v12) {
          unsigned int v17 = v20;
        }
        else {
          unsigned int v17 = 0;
        }
      }
      else
      {
        int v9 = *(_DWORD *)(v6 + 36);
        if (v9 == -1)
        {
          int v13 = -1;
        }
        else
        {
          unsigned int v10 = *(_DWORD *)(this + 28);
          unsigned int v11 = *(_DWORD *)(v6 + 32) + v9;
          BOOL v12 = v10 >= v11;
          int v13 = v10 - v11;
          if (v13 != 0 && v12) {
            int v13 = -1;
          }
        }
        int v16 = v13 + 1000 * *(__int16 *)(this + 22);
        unsigned int v17 = v16 & ~(v16 >> 31);
      }
      if (v17 < v5)
      {
        *(_DWORD *)(v1 + 1316) = v2;
        this = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)this + 136))(this, 143);
        unsigned int v5 = v17;
      }
      goto LABEL_37;
    }
    if ((v8 & 0x3000) != 0)
    {
      if (*(unsigned char *)(v1 + 3236) && *(_DWORD *)(v1 + 3252) == -1)
      {
        unsigned int v25 = 1000 * *(__int16 *)(this + 22);
        unsigned int v26 = *(_DWORD *)(this + 28);
        BOOL v12 = v25 >= v26;
        unsigned int v27 = v25 - v26;
        if (v12) {
          unsigned int v15 = v27;
        }
        else {
          unsigned int v15 = 0;
        }
      }
      else
      {
        int v14 = *(_DWORD *)(this + 28)
            - *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092)
            + 1000 * *(__int16 *)(this + 22);
        unsigned int v15 = v14 & ~(v14 >> 31);
      }
      if (v15 < v5 && v15 != 0)
      {
        *(_DWORD *)(v1 + 1316) = v2;
        this = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)this + 136))(this, 14);
        unsigned int v5 = v15;
      }
    }
    else
    {
LABEL_22:
      int v21 = *(_DWORD *)(v6 + 36);
      if (v21 == -1)
      {
        int v24 = -1;
      }
      else
      {
        unsigned int v22 = *(_DWORD *)(this + 28);
        unsigned int v23 = *(_DWORD *)(v6 + 32) + v21;
        BOOL v12 = v22 >= v23;
        int v24 = v22 - v23;
        if (v24 != 0 && v12) {
          int v24 = -1;
        }
      }
      unsigned int v29 = (v24 + 1000 * *(__int16 *)(this + 22)) & ~((v24 + 1000 * *(__int16 *)(this + 22)) >> 31);
      if (v29 < v3)
      {
        int v4 = v2;
        unsigned int v3 = v29;
      }
    }
LABEL_37:
    ++v2;
  }
  while (v2 != 72);
  if ((*(_DWORD *)(v1 + 1316) & 0x80000000) != 0 && v4 != -1) {
    *(_DWORD *)(v1 + 1316) = v4;
  }
  *uint64_t v30 = v31;
  return this;
}

void sub_26399CCE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned char *a11, char a12)
{
  *a11 = a12;
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlRequestImplPosPeriodic::Print(uint64_t this, unsigned __int8 a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (BlueFin::GlUtils::m_ucEnabled)
  {
    unint64_t v3 = this;
    this = BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)a2);
    if (this)
    {
      if (((1 << (a2 >> 3)) & 0x2000800E) != 0)
      {
        BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)v5, (char *)0x14, " per=%u", v4, *(unsigned int *)(v3 + 108));
        return BlueFin::GlRequestImplPos::Print(v3, a2, v5);
      }
    }
  }
  return this;
}

uint64_t BlueFin::GlPeRqHdlr::bIsComplete(BlueFin::GlPeRqHdlr *this)
{
  return *((unsigned __int8 *)this + 19);
}

uint64_t BlueFin::GlPeRqHdlr::Cleanup(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(this + 20) || *(unsigned char *)(this + 19))
  {
    *(unsigned char *)(this + 19) = 1;
    int v11 = 0;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    *(_OWORD *)__s = 0u;
    long long v6 = 0u;
    BlueFin::GlPeNmeaGen::FormatNmeaEND(**(BlueFin::GlPeNmeaGen ***)(this + 56), *(const BlueFin::GlRequestImpl **)(this + 8), *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092) - *(_DWORD *)(*(void *)(this + 8) + 28), *(_DWORD *)(this + 32), *(unsigned __int16 *)(this + 48), (BlueFin::GlFormat *)__s, 100);
    GlCustomLog(20, "GL_NMEA[%d][%s", *(unsigned __int16 *)(v1 + 48), __s);
    __int16 v2 = strlen(__s);
    BlueFin::GlPeRqHdlr::OnNmea((BlueFin::GlPeRqHdlr *)v1, __s, v2, v3);
    this = *(void *)(v1 + 8);
    int v4 = *(uint64_t (**)(void))(this + 56);
    if (v4) {
      this = v4();
    }
    BlueFin::GlPeFirstFix::m_bReqTimeOutReached = 0;
  }
  return this;
}

uint64_t BlueFin::GlSettingsImpl::IsInDualMeMode(BlueFin::GlSettingsImpl *this)
{
  return *((unsigned __int8 *)this + 25966);
}

unint64_t BlueFin::GlReqSm::ProcessNewRequest(BlueFin::GlReqSm *this, BlueFin::GlRequestImpl *a2)
{
  int v4 = (char *)this + 54564;
  unsigned int v5 = (char *)this + 6464;
  int v6 = *((_DWORD *)a2 + 4);
  if (v6 == 15)
  {
    if (*((unsigned char *)this + 54902)) {
      BOOL v7 = 1;
    }
    else {
      BOOL v7 = *((void *)a2 + 14) != 0;
    }
    *((unsigned char *)this + 54902) = v7;
  }
  int v8 = *(_DWORD *)(*((void *)this + 785) + 2568);
  if (v8 == -7200001)
  {
    int v8 = 0;
    *((_DWORD *)a2 + 8) = 0;
    if (!*v5) {
      goto LABEL_13;
    }
LABEL_19:
    *((_DWORD *)a2 + 7) = v8;
    goto LABEL_20;
  }
  *((_DWORD *)a2 + 8) = v8;
  if (*v5)
  {
    if (v8 == -1)
    {
      if (BlueFin::GlUtils::m_pInstance) {
        int v8 = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092);
      }
      else {
        int v8 = -1;
      }
    }
    goto LABEL_19;
  }
LABEL_13:
  GlCustomLog(15, "GlReqSm::ProcessNewRequest(%u): New req received:%d timeoutS:%hd\n", v8, v6, *((__int16 *)a2 + 11));
  int v9 = *((_DWORD *)a2 + 7);
  if (v9 == -1)
  {
    if (BlueFin::GlUtils::m_pInstance) {
      int v9 = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092);
    }
    else {
      int v9 = -1;
    }
  }
  *((_DWORD *)a2 + 7) = v9;
  int v6 = *((_DWORD *)a2 + 4);
LABEL_20:
  if ((v6 & 0xFFFFFFFE) == 2) {
    *(_DWORD *)v4 |= 0x8000u;
  }
  int v10 = *((_DWORD *)this + 3048);
  int v36 = &v38;
  unsigned __int8 v37 = 3;
  int v38 = v10;
  uint64_t v39 = 0;
  if ((v10 & 0x100) != 0)
  {
    BOOL HasReq = 1;
    if ((v10 & 0x800) != 0)
    {
LABEL_27:
      GlCustomLog(14, "GlReqSm: %s%s test already started, do not accept other requests!\n");
LABEL_28:
      int v13 = (void (*)(BlueFin::GlRequestImpl *, uint64_t))*((void *)a2 + 5);
      if (!v13) {
        goto LABEL_31;
      }
      int v14 = a2;
      uint64_t v15 = 2;
      goto LABEL_30;
    }
  }
  else
  {
    BOOL HasReq = BlueFin::GlPePendingBag::HasReq((uint64_t)this + 6496, 8);
    if ((*v36 & 0x800) != 0) {
      goto LABEL_27;
    }
  }
  BOOL v12 = BlueFin::GlPePendingBag::HasReq((uint64_t)this + 6496, 11);
  if (HasReq || v12) {
    goto LABEL_27;
  }
  switch(*((_DWORD *)a2 + 4))
  {
    case 0:
      if (*(_DWORD *)(*((void *)this + 784) + 88) == 39
        || (*(unsigned int (**)(BlueFin::GlRequestImpl *))(*(void *)a2 + 184))(a2) < 0x15F91)
      {
        goto LABEL_63;
      }
      int v21 = BlueFin::GlRequestImpl::GlRequestTypeToString(a2);
      int v22 = (*(uint64_t (**)(BlueFin::GlRequestImpl *))(*(void *)a2 + 184))(a2);
      GlCustomLog(14, "GlReqSm: %s period (%ums) exceeds maximum allowed (%ums)!\n", v21, v22, 90000);
      goto LABEL_49;
    case 3:
      if ((*(unsigned int (**)(BlueFin::GlRequestImpl *))(*(void *)a2 + 184))(a2) < 0x7531) {
        goto LABEL_63;
      }
      unsigned int v23 = BlueFin::GlRequestImpl::GlRequestTypeToString(a2);
      int v24 = (*(uint64_t (**)(BlueFin::GlRequestImpl *))(*(void *)a2 + 184))(a2);
      GlCustomLog(14, "GlReqSm: %s period (%ums) exceeds maximum allowed (%ums)!\n", v23, v24, 30000);
LABEL_49:
      int v13 = (void (*)(BlueFin::GlRequestImpl *, uint64_t))*((void *)a2 + 5);
      if (!v13) {
        goto LABEL_31;
      }
      int v14 = a2;
      uint64_t v15 = 5;
      goto LABEL_30;
    case 5:
      if (*(unsigned char *)(*((void *)this + 784) + 136)) {
        goto LABEL_63;
      }
      GlCustomLog(14, "GlReqSm: GL_REQ_QUERY_CNTIN incompatible because CNTIN is not specified in the freq plan!\n");
      goto LABEL_28;
    case 6:
      uint64_t v25 = *((void *)this + 784);
      *(_WORD *)(v25 + 138) = 1000;
      if (*(unsigned char *)(v25 + 136))
      {
        uint64_t v26 = *((void *)this + 39);
        uint64_t v27 = *(unsigned int *)(v25 + 120);
        double v28 = *(double *)(v25 + 128) * 1000000000.0 + 0.5;
        double v29 = fmod(v28, 4294967300.0);
        if (v28 <= 4294967300.0) {
          double v29 = v28;
        }
        if (v29 < -4294967300.0) {
          double v29 = -fmod(-v29, 4294967300.0);
        }
        if (v29 < 0.0) {
          unsigned int v30 = --v29;
        }
        else {
          unsigned int v30 = v29;
        }
        (*(void (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)v26 + 48))(v26, v27, (unsigned __int16)v30, 1000);
      }
      GlCustomLog(14, "GlReqSm: SYNCIN request detected setting CNTIN duration to %hu ms\n", 1000);
      goto LABEL_63;
    case 8:
    case 0xB:
      if (*((__int16 *)v5 + 1900) > 0 || *v36) {
        goto LABEL_28;
      }
      if (v37 < 2uLL) {
        goto LABEL_63;
      }
      if (v36[1]) {
        goto LABEL_28;
      }
      uint64_t v19 = 2;
      break;
    case 0xC:
      goto LABEL_28;
    default:
      goto LABEL_63;
  }
  while (v37 != v19)
  {
    if (v36[v19++])
    {
      if (v19 - 1 < (unint64_t)v37) {
        goto LABEL_28;
      }
      break;
    }
  }
LABEL_63:
  uint64_t v31 = *((unsigned __int16 *)v5 + 1900);
  if (v31 > 0x47)
  {
    int v13 = (void (*)(BlueFin::GlRequestImpl *, uint64_t))*((void *)a2 + 5);
    if (!v13) {
      goto LABEL_31;
    }
    int v14 = a2;
    uint64_t v15 = 3;
LABEL_30:
    v13(v14, v15);
LABEL_31:
    int v16 = BlueFin::GlRequestImpl::GlRequestTypeToString(a2);
    GlCustomLog(14, "GlReqSm: add pend req %s %s\n", v16, "err");
    unsigned int v17 = (void (*)(BlueFin::GlRequestImpl *))*((void *)a2 + 7);
    if (v17) {
      v17(a2);
    }
    return BlueFin::GlRequestBase::Destroy((uint64_t)a2);
  }
  *((void *)this + v31 + 1284) = a2;
  *((_WORD *)v5 + 1900) = v31 + 1;
  if (!*((unsigned char *)a2 + 21))
  {
    int v32 = (void (*)(BlueFin::GlRequestImpl *, void))*((void *)a2 + 5);
    if (v32) {
      v32(a2, 0);
    }
    *((unsigned char *)a2 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 1;
  }
  int v33 = BlueFin::GlRequestImpl::GlRequestTypeToString(a2);
  GlCustomLog(14, "GlReqSm: add pend req %s %s\n", v33, "ok");
  if (v4[7])
  {
    __int16 v35 = 7;
    uint64_t v34 = *((void *)this + 4);
    unint64_t result = *((void *)this + 1);
    *((void *)this + 4) = result;
    do
    {
      unint64_t v40 = 0;
      if (BlueFin::patch_dispatch(result, (uint64_t)this, (unsigned __int8 *)&v35, &v40)) {
        unint64_t result = v40;
      }
      else {
        unint64_t result = (*((uint64_t (**)(BlueFin::GlReqSm *, __int16 *))this + 4))(this, &v35);
      }
      *((void *)this + 4) = result;
    }
    while (result);
    *((void *)this + 4) = v34;
  }
  else
  {
    unint64_t result = BlueFin::GlQueue::putFIFO((BlueFin::GlReqSm *)((char *)this + 40), 7, 0);
    unsigned char v4[4] = 0;
  }
  return result;
}

BOOL BlueFin::GlPePendingBag::HasReq(uint64_t a1, int a2)
{
  unint64_t v2 = *(unsigned __int16 *)(a1 + 3768);
  if (v2 > 0x47)
  {
    DeviceFaultNotify("glpe_pendingbag.cpp", 364, "HasReq", (char)"m_sReqNum < _DIM(m_aptReqList)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_pendingbag.cpp", 364, "m_sReqNum < _DIM(m_aptReqList)");
  }
  if (*(_WORD *)(a1 + 3768))
  {
    uint64_t v3 = 0;
    BOOL v4 = 1;
    do
    {
      uint64_t v5 = *(void *)(a1 + 3776 + 8 * v3);
      if (v5 && *(_DWORD *)(v5 + 16) == a2) {
        break;
      }
      BOOL v4 = ++v3 < v2;
    }
    while (v2 != v3);
  }
  else
  {
    return 0;
  }
  return v4;
}

uint64_t (*BlueFin::GlReqSm::retention_check(BlueFin::GlReqSm *this, const char *a2))()
{
  unint64_t result = 0;
  BOOL v4 = (char *)this + 54568;
  switch(*a2)
  {
    case 2:
      int v9 = (int *)*((void *)this + 784);
      if (v9[22] >= 34
        && (*(unsigned int (**)(int *))(*(void *)v9 + 1072))(v9)
        && (((*(uint64_t (**)(void))(**((void **)this + 784) + 1088))(*((void *)this + 784)) & 1) != 0
         || ((*(uint64_t (**)(void))(**((void **)this + 784) + 1088))(*((void *)this + 784)) & 1) == 0
         && (*(unsigned int (**)(void))(**((void **)this + 784) + 1104))(*((void *)this + 784))))
      {
        (*(void (**)(void, void))(**((void **)this + 784) + 1096))(*((void *)this + 784), 0);
        if ((*(unsigned int (**)(void))(**((void **)this + 784) + 1072))())
        {
          if (*((void *)this + 39)) {
            BlueFin::GlPosEng::ReinitMeasEng(*((BlueFin::GlPosEng **)this + 783), v10);
          }
        }
        int v11 = (BlueFin::GlReqSm *)((char *)this + 40);
        int v12 = 60;
      }
      else
      {
        int v11 = (BlueFin::GlReqSm *)((char *)this + 40);
        int v12 = 59;
      }
      BlueFin::GlQueue::putFIFO(v11, v12, 0);
      goto LABEL_34;
    case 3:
      BlueFin::GlTimer::disarm((uint64_t)this + 53608);
      BlueFin::GlTimer::disarm((uint64_t)this + 53848);
      goto LABEL_34;
    case 6:
    case 0xB:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x26:
    case 0x29:
    case 0x32:
    case 0x33:
    case 0x35:
    case 0x36:
      return result;
    case 7:
      unint64_t result = 0;
      unsigned char *v4 = 1;
      return result;
    case 8:
      BlueFin::GlPePendingBag::TerminateRequest((uint64_t)this + 6496, *((BlueFin::GlRequestImpl **)this + 4148));
      goto LABEL_34;
    case 9:
      BlueFin::GlPePendingBag::TerminateAll((uint64_t)this + 6496);
      BlueFin::GlPeReqBag::TerminateAll((BlueFin::GlReqSm *)((char *)this + 10880));
      unint64_t result = 0;
      unsigned char *v4 = 0;
      return result;
    case 0xA:
    case 0x31:
      BlueFin::GlReqSm::SetAsstFromPend(this, 0, 0);
      goto LABEL_34;
    case 0xC:
      BlueFin::GlReqSm::ProcessChipData((__int16 *)this, a2);
      goto LABEL_34;
    case 0x1F:
    case 0x25:
      int v5 = *((_DWORD *)this + 3048);
      int v14 = &v16;
      char v15 = 3;
      int v16 = v5;
      uint64_t v17 = 0;
      if ((v5 & 0x100) != 0 || BlueFin::GlPePendingBag::HasReq((uint64_t)this + 6496, 8))
      {
        int v6 = (const BlueFin::GlMePlatfStat *)*((void *)this + 4131);
        GlCustomLog(14, "GlReqSm::wait4me calling HandleFactoryTestFailure\n");
        if ((*((unsigned char *)v14 + 1) & 1) == 0) {
          BlueFin::GlReqSm::CreateNewReqFromPend(this);
        }
        BlueFin::GlPeReqBag::HandleFactoryTestFailure((BlueFin::GlReqSm *)((char *)this + 10880), v6);
        BlueFin::GlPeReqBag::TerminateAll((BlueFin::GlReqSm *)((char *)this + 10880));
        BlueFin::GlPeReqBag::Cleanup((uint64_t)this + 10880);
      }
      BlueFin::GlPosEng::SetDeathCause(*((void *)this + 783), 1);
      BlueFin::GlPePendingBag::TerminateAll((uint64_t)this + 6496);
      *((_DWORD *)this + 2712) = 0;
      BOOL v7 = "&GlReqSm::restart";
      int v8 = (uint64_t (*)())BlueFin::GlReqSm::restart;
      goto LABEL_29;
    case 0x3B:
      BlueFin::GlPePendingBag::GetPendingRequestTypes((uint64_t)this + 6496, &v14);
      if ((v14 & 0xFFFFCFFF) == 0 && ((unsigned __int16)v14 & 0x3000) != 0) {
        goto LABEL_26;
      }
      goto LABEL_28;
    case 0x3C:
LABEL_26:
      BlueFin::GlReqSm::SetAsicParams(this);
      (*(void (**)(void))(**((void **)this + 39) + 216))(*((void *)this + 39));
      goto LABEL_34;
    case 0x3D:
      (*(void (**)(void, uint64_t))(**((void **)this + 784) + 1096))(*((void *)this + 784), 1);
      GlCustomLog(12, "GlReqSm::EswPatchLoaded!\n");
LABEL_28:
      BOOL v7 = "&GlReqSm::idle";
      int v8 = (uint64_t (*)())BlueFin::GlReqSm::idle;
LABEL_29:
      BlueFin::QHsm::tran(this, v8, (uint64_t)v7);
LABEL_34:
      unint64_t result = 0;
      break;
    default:
      unint64_t result = BlueFin::QHsm::top;
      break;
  }
  return result;
}

char *BlueFin::GlRequestImpl::GlRequestTypeToString(BlueFin::GlRequestImpl *this)
{
  uint64_t v1 = *((int *)this + 4);
  if (v1 >= 0x11)
  {
    DeviceFaultNotify("glrequest.cpp", 1030, "GlRequestTypeToString", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glrequest.cpp", 1030, "0");
  }
  return off_2655E0450[v1];
}

uint64_t BlueFin::GlDbgProxyGlReqOnStart(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  BOOL v4 = *(BlueFin::GlDbgCodec **)(v3 + 8);

  return BlueFin::GlDbgProxy::HalGlReqOnStart(v4, (void (**)(BlueFin::GlDbgRequest *, uint64_t))v3, a2);
}

uint64_t BlueFin::GlDbgProxy::HalGlReqOnStart(BlueFin::GlDbgCodec *a1, void (**this)(BlueFin::GlDbgRequest *, uint64_t), uint64_t a3)
{
  uint64_t result = BlueFin::GlDbgRequest::Id((BlueFin::GlDbgRequest *)this, 0);
  int v10 = result;
  if (!*((void *)a1 + 101))
  {
    BlueFin::GlDbgCodec::WriteStart(a1, 544);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 120))(a1)) {
      BlueFin::GlDbgCodec::Write(a1, (unsigned int *)&v10);
    }
    int v9 = a3;
    BlueFin::GlDbgCodec::Write(a1, (unsigned int *)&v9);
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)a1 + 32))(a1, 1);
    BOOL v7 = this[9];
    if (v7) {
      v7((BlueFin::GlDbgRequest *)this, a3);
    }
    BlueFin::GlDbgCodec::WriteFinal(a1, 544);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 120))(a1)) {
      BlueFin::GlDbgCodec::Write(a1, (unsigned int *)&v10);
    }
    int v8 = *(uint64_t (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)a1 + 32);
    return v8(a1, 1);
  }
  return result;
}

void FireCallback::GlReqOnStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (FireCallback::pInstance)
  {
    uint64_t v10 = *(void *)(FireCallback::pInstance + 24);
    if (v10)
    {
      uint64_t v13 = a1;
      int v12 = a2;
      (*(void (**)(uint64_t, uint64_t *, int *))(*(void *)v10 + 48))(v10, &v13, &v12);
      return;
    }
    int v11 = "fcb,fReqOnStartCb,nullptr";
  }
  else
  {
    int v11 = "fcb,GlReqOnStart,nullptr";
  }

  FireDeviceLog::DeviceLogBase(2, v11, a3, a4, a5, a6, a7, a8, a9);
}

void std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_7,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_7>,void ()(BlueFin::GlRequest *,BlueFin::GL_REQ_START_CODE)>::operator()(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  int v9 = *(void **)(a1 + 8);
  if ((*a3 - 1) >= 5)
  {
    if (!*a3) {
      FireDeviceLog::DeviceLogBase(3, "GlReqOnStart,request,ok,%p,size,%zu", (uint64_t)a3, a4, a5, a6, a7, a8, *a2);
    }
  }
  else
  {
    FireDeviceLog::DeviceLogBase(2, "GlReqOnStart,request,failed,%p,code,%d", (uint64_t)a3, a4, a5, a6, a7, a8, *a2);
    FireMessageHandler::eraseRequest(v9, v8, v10, v11, v12, v13, v14, v15);
  }
}

uint64_t BlueFin::GlPeRqHdlrPosPeriodic::Cleanup(BlueFin::GlPeRqHdlrPosPeriodic *this)
{
  if (*((unsigned char *)this + 20) || *((unsigned char *)this + 24))
  {
    *((unsigned char *)this + 19) = 1;
    (*(void (**)(BlueFin::GlPeRqHdlrPosPeriodic *, void, void))(*(void *)this + 272))(this, *((unsigned int *)this + 40), *((unsigned int *)this + 41));
    uint64_t v3 = &unk_270EC4DB8;
    __int16 v4 = *((_WORD *)this + 24);
    if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
      off_270EC4DD0((uint64_t)&v3, 0);
    }
  }
  return BlueFin::GlPeRqHdlr::Cleanup((uint64_t)this);
}

uint64_t BlueFin::GlPeRqHdlrGnssMeasData::Cleanup(uint64_t this)
{
  if (*(unsigned char *)(this + 20) || *(unsigned char *)(this + 24)) {
    *(unsigned char *)(this + 19) = 1;
  }
  return BlueFin::GlPeRqHdlr::Cleanup(this);
}

uint64_t BlueFin::GlDbgMeIf::Enable5HzSubTrk(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 400))();
}

BOOL BlueFin::GlPeAsstPosReqDataFifo::Get(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 1032);
  if (*(unsigned char *)(a1 + 1032))
  {
    uint64_t v3 = *(long long **)(a1 + 1024);
    if (v3 != (long long *)a2)
    {
      long long v4 = *v3;
      long long v5 = v3[1];
      *(void *)(a2 + 32) = *((void *)v3 + 4);
      *(_OWORD *)a2 = v4;
      *(_OWORD *)(a2 + 16) = v5;
      *(void *)(a2 + 40) = *((void *)v3 + 5);
      *(_DWORD *)(a2 + 48) = *((_DWORD *)v3 + 12);
      *(unsigned char *)(a2 + 52) = *((unsigned char *)v3 + 52);
      *(_DWORD *)(a2 + 56) = *((_DWORD *)v3 + 14);
    }
    unsigned __int8 v6 = *(unsigned char *)(a1 + 1032) - 1;
    *(unsigned char *)(a1 + 1032) = v6;
    if (v6) {
      memmove(*(void **)(a1 + 1024), (const void *)(*(void *)(a1 + 1024) + 64), (unint64_t)v6 << 6);
    }
  }
  return v2 != 0;
}

uint64_t BlueFin::GlPeReqBag::GetTimeTillTimeoutMs(BlueFin::GlPeReqBag *this, char a2)
{
  uint64_t v2 = *((unsigned int *)this + 329);
  if ((v2 & 0x80000000) != 0)
  {
    if (v2 != -1) {
      uint64_t v2 = *((unsigned int *)this + 810);
    }
  }
  else
  {
    uint64_t v3 = *((void *)this + v2);
    uint64_t v4 = *(void *)(v3 + 8);
    if (*(__int16 *)(v4 + 22) < 1)
    {
      uint64_t v2 = 0xFFFFFFFFLL;
    }
    else
    {
      unsigned int v5 = 1000 * *(unsigned __int16 *)(v4 + 22);
      if (a2)
      {
        unsigned int v6 = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092) - *(_DWORD *)(v4 + 28);
      }
      else
      {
        int v7 = *(_DWORD *)(v3 + 36);
        if (v7 == -1)
        {
          unsigned int v6 = 1;
        }
        else
        {
          unsigned int v8 = *(_DWORD *)(v4 + 28);
          unsigned int v9 = *(_DWORD *)(v3 + 32) + v7;
          BOOL v10 = v9 >= v8;
          unsigned int v6 = v9 - v8;
          if (!v10) {
            unsigned int v6 = 1;
          }
        }
      }
      BOOL v10 = v5 >= v6;
      LODWORD(v2) = v5 - v6;
      if (v10) {
        uint64_t v2 = v2;
      }
      else {
        uint64_t v2 = 0;
      }
    }
  }
  *((unsigned char *)this + 3233) = *((unsigned char *)this + 3233);
  return v2;
}

uint64_t BlueFin::GlPeReqBag::GetAccuracyMaskForKf(BlueFin::GlPeReqBag *this)
{
  int v7 = (char *)this + 3233;
  char v8 = *((unsigned char *)this + 3233);
  *((unsigned char *)this + 3233) = 0;
  if (*((unsigned char *)this + 1312))
  {
    uint64_t v3 = 0;
    uint64_t Accuracymask = 0xFFFFFFFFLL;
    do
    {
      uint64_t v4 = *(void *)((char *)this + v3);
      if (v4)
      {
        unsigned int v5 = *(_DWORD **)(v4 + 8);
        if (!v5[4])
        {
          uint64_t Accuracymask = (*(uint64_t (**)(_DWORD *))(*(void *)v5 + 152))(v5);
          GlCustomLog(14, "GlPeReqBag::GetAccuracyMaskForKf  using periodic accuracy %d\n", Accuracymask);
        }
      }
      v3 += 8;
    }
    while (v3 != 576);
  }
  else
  {
    uint64_t Accuracymask = BlueFin::GlPeReqBag::GetAccuracymask(this);
  }
  *int v7 = v8;
  return Accuracymask;
}

void sub_26399DFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned char *a11, char a12)
{
  *a11 = a12;
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlRequestImplPos::GetAccuracyMeters(BlueFin::GlRequestImplPos *this)
{
  return *((unsigned int *)this + 20);
}

BOOL BlueFin::GlPeReqBag::IsRareFixMode(BlueFin::GlPeReqBag *this)
{
  BOOL result = 0;
  char v6 = *((unsigned char *)this + 3233);
  *((unsigned char *)this + 3233) = 0;
  if ((*((unsigned char *)this + 1312) & 1) == 0)
  {
    uint64_t v3 = *((unsigned int *)this + 329);
    if ((v3 & 0x80000000) == 0)
    {
      uint64_t v4 = *(void *)(*((void *)this + v3) + 8);
      if ((*(_DWORD *)(v4 + 16) - 1) <= 1 && *(__int16 *)(v4 + 22) >= 2)
      {
        GlCustomLog(14, "RareFixMode enabled by single shot request\n");
        BOOL result = 1;
        goto LABEL_12;
      }
LABEL_11:
      BOOL result = 0;
      goto LABEL_12;
    }
    if (v3 == -1) {
      goto LABEL_11;
    }
    if (*((unsigned char *)this + 3237)) {
      unsigned int v5 = "true";
    }
    else {
      unsigned int v5 = "false";
    }
    GlCustomLog(14, "RareFixMode set to %s\n", v5);
    BOOL result = *((unsigned char *)this + 3237) != 0;
  }
LABEL_12:
  *((unsigned char *)this + 3233) = v6;
  return result;
}

void sub_26399E10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned char *a11, char a12)
{
  *a11 = a12;
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlDineCtrl::Enable5HzSubTrk(BlueFin::GlDineCtrl *this, int a2)
{
  *((unsigned char *)this + 31277) = a2;
  uint64_t v2 = "Disabled";
  if (a2) {
    uint64_t v2 = "Enabled";
  }
  return GlCustomLog(14, "GlDineCtrl::Enable5HzSubTrk is %s \n", v2);
}

uint64_t BlueFin::GlPeRqHdlrSyncin::Cleanup(BlueFin::GlPeRqHdlrSyncin *this)
{
  if (*((unsigned char *)this + 20) || *((unsigned char *)this + 19) || *((unsigned char *)this + 23))
  {
    *((unsigned char *)this + 19) = 1;
    BlueFin::GlReqSm::SetSyncinEvent(*(void *)(*((void *)this + 7) + 88), 6, 0.0);
    if (*((unsigned char *)this + 20))
    {
      uint64_t v2 = *(void (**)(void))(*((void *)this + 13) + 88);
      if (!v2) {
        goto LABEL_11;
      }
    }
    else
    {
      if (!*((unsigned char *)this + 23) && (*((unsigned char *)this + 112) & 0x20) == 0) {
        goto LABEL_11;
      }
      uint64_t v2 = *(void (**)(void))(*((void *)this + 13) + 88);
      if (!v2) {
        goto LABEL_11;
      }
    }
    v2();
  }
LABEL_11:

  return BlueFin::GlPeRqHdlr::Cleanup((uint64_t)this);
}

uint64_t BlueFin::GlRequestImpl::IsEnhancedEmergencyRequest(BlueFin::GlRequestImpl *this)
{
  return 0;
}

void *BlueFin::GlPosEng::SetInitialPosMicroNav(void *result, double *a2)
{
  if ((**(unsigned char **)(result[2] + 26224) & 2) != 0)
  {
    BOOL result = (void *)result[6];
    if (result) {
      return (void *)(*(uint64_t (**)(double, double, double, double))(*result + 64))(*a2, a2[1], a2[2], a2[3]);
    }
  }
  return result;
}

uint64_t BlueFin::GlPeAsstPosMgr::SetAsstPos(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, unsigned int *a6, int a7)
{
  __int16 v35 = &off_270EBC600;
  uint64_t v36 = 0;
  if (a5) {
    uint64_t v36 = *(void *)(a5 + 8);
  }
  if (a6) {
    unsigned int v12 = *a6;
  }
  else {
    unsigned int v12 = 0;
  }
  BlueFin::stTimeOfAsstPos::stTimeOfAsstPos((BlueFin::stTimeOfAsstPos *)v34, *(BlueFin::GlPeTimeManager **)(a1 + 296), (const BlueFin::GlGpsTime *)&v35, v12);
  if (!*(unsigned char *)(a1 + 314) || a3 != 2 || *(unsigned char *)(a1 + 313)) {
    return BlueFin::GlPeAsstPosMgr::processAssistance(a1, (long long *)a2, a4, a3, (BlueFin::stTimeOfAsstPos *)v34, 0, a7);
  }
  GlCustomLog(14, "GlPeAsstPosMgr:: Calling addRandomPosError from SetAsstPos\n");
  int v24 = &unk_270EBF9E0;
  uint64_t v30 = 0;
  uint64_t v28 = 0;
  double v29 = &off_270EBC600;
  uint64_t v26 = *(void *)(a2 + 16);
  long long v25 = *(_OWORD *)a2;
  uint64_t v27 = *(void *)(a2 + 24);
  int v31 = a4;
  int v32 = 2;
  char v33 = a7;
  uint64_t v14 = &unk_270EBF9E0;
  long long v15 = v25;
  uint64_t v16 = v26;
  uint64_t v17 = v27;
  uint64_t v20 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = &off_270EBC600;
  int v21 = a4;
  int v22 = 2;
  char v23 = a7;
  return BlueFin::GlPeAsstPosMgr::addRandomPosError(a1, (uint64_t)&v14, v12, 0);
}

uint64_t BlueFin::GlPeRqHdlr::GetHdlrStats(BlueFin::GlPeRqHdlr *this)
{
  return 0;
}

uint64_t BlueFin::GlDbgProxyGlReqOnStop(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  uint64_t v2 = *(BlueFin::GlDbgProxy **)(v1 + 8);

  return BlueFin::GlDbgProxy::HalGlReqOnStop(v2, (void (**)(BlueFin::GlDbgRequest *))v1);
}

char *BlueFin::GlPeNmeaGen::FormatNmeaEND(BlueFin::GlPeNmeaGen *this, const BlueFin::GlRequestImpl *a2, unsigned int a3, unsigned int a4, int a5, BlueFin::GlFormat *a6, int a7)
{
  uint64_t v36 = 0;
  uint64_t v35 = 0;
  long long v33 = 0u;
  long long v34 = 0u;
  v31[0] = 1;
  int v32 = a5;
  BlueFin::GlPeNmeaGen::GetRequestParams((uint64_t)this, a2, &v36, v31);
  BlueFin::GlPeNmeaGen::FormatTimeTag(this, a4, v13, v14);
  uint64_t v16 = (char *)a6 + a7 - 1;
  if (v16 > (char *)a6) {
    uint64_t v17 = (char *)(v16 - (char *)a6 + 1);
  }
  else {
    uint64_t v17 = 0;
  }
  if (*((_DWORD *)a2 + 4) == 8) {
    unsigned int v18 = BlueFin::GlFormat::glsnprintf(a6, v17, "$PGLOR,%d,END,%s,%.1f", v15, 2, (char *)this + 1767, (float)a3 * 0.001);
  }
  else {
    unsigned int v18 = BlueFin::GlFormat::glsnprintf(a6, v17, "$PGLOR,%d,END,%s,%s,%.1f", v15, 2, (char *)this + 1799, (char *)this + 1767, (float)a3 * 0.001);
  }
  uint64_t v21 = v31[0];
  if (v31[0])
  {
    int v22 = v36;
    char v23 = (BlueFin::GlFormat *)((char *)a6 + v18);
    int v24 = (unsigned int *)&v32;
    while (v22)
    {
      long long v25 = *v22;
      if (!*v22)
      {
        double v29 = "*acNmeaNewList";
        DeviceFaultNotify("glpe_nmeagen.cpp", 4895, "FormatNmeaEND", (char)"*acNmeaNewList");
        int v30 = 4895;
LABEL_20:
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_nmeagen.cpp", v30, v29);
      }
      if (v16 <= (char *)v23) {
        uint64_t v26 = 0;
      }
      else {
        uint64_t v26 = (char *)(v16 + 1 - (char *)v23);
      }
      ++v22;
      unsigned int v27 = *v24++;
      char v23 = (BlueFin::GlFormat *)((char *)v23
                                + BlueFin::GlFormat::glsnprintf(v23, v26, ",%s,%d", v20, v25, v27));
      if (!--v21) {
        goto LABEL_15;
      }
    }
    double v29 = "acNmeaNewList";
    DeviceFaultNotify("glpe_nmeagen.cpp", 4894, "FormatNmeaEND", (char)"acNmeaNewList");
    int v30 = 4894;
    goto LABEL_20;
  }
LABEL_15:

  return BlueFin::GlPeNmeaGen::nmeaAddChksum(a6, v16, v19);
}

uint64_t BlueFin::GlDbgProxy::HalGlReqOnStop(BlueFin::GlDbgProxy *this, void (**a2)(BlueFin::GlDbgRequest *))
{
  uint64_t result = BlueFin::GlDbgRequest::Id((BlueFin::GlDbgRequest *)a2, 0);
  int v7 = result;
  if (!*((void *)this + 101))
  {
    BlueFin::GlDbgCodec::WriteStart(this, 545);
    if ((*(unsigned int (**)(BlueFin::GlDbgProxy *))(*(void *)this + 120))(this)) {
      BlueFin::GlDbgCodec::Write(this, (unsigned int *)&v7);
    }
    (*(void (**)(BlueFin::GlDbgProxy *, uint64_t))(*(void *)this + 32))(this, 1);
    unsigned int v5 = a2[10];
    if (v5) {
      v5((BlueFin::GlDbgRequest *)a2);
    }
    BlueFin::GlDbgCodec::WriteFinal(this, 545);
    if ((*(unsigned int (**)(BlueFin::GlDbgProxy *))(*(void *)this + 120))(this)) {
      BlueFin::GlDbgCodec::Write(this, (unsigned int *)&v7);
    }
    char v6 = *(uint64_t (**)(BlueFin::GlDbgProxy *, uint64_t))(*(void *)this + 32);
    return v6(this, 1);
  }
  return result;
}

uint64_t BlueFin::GlPeLsq::rr2Vel(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  v190[5] = *MEMORY[0x263EF8340];
  if (!v4)
  {
    unsigned int v115 = "pastMeasIn";
    DeviceFaultNotify("glpe_lsq.cpp", 1446, "rr2Vel", (char)"pastMeasIn");
    int v116 = 1446;
    goto LABEL_119;
  }
  char v8 = v7;
  uint64_t v9 = v6;
  int v10 = v5;
  uint64_t v11 = v4;
  unsigned int v12 = v3;
  uint64_t v13 = v2;
  if ((*((unsigned char *)v3 + 26) & 8) != 0)
  {
    int v14 = (char)*v7;
    if (v14 >= 8) {
      LOBYTE(v14) = 8;
    }
    *int v7 = v14;
  }
  uint64_t v15 = *(void *)(v6 + 56);
  uint64_t v16 = *((char *)v3 + 20);
  *(_DWORD *)(v6 + 64) = v16;
  bzero((void *)(v15 + 8), 8 * v16);
  uint64_t v17 = (char)*v8;
  *(_DWORD *)(v9 + 888) = v17;
  bzero((void *)(*(void *)(v9 + 880) + 8), 8 * v17);
  if ((char)*v8 < 2) {
    return 0;
  }
  v177[1] = 0x400000004;
  memset(v178, 0, 32);
  v177[0] = v178;
  int v18 = *((_DWORD *)v12 + 6);
  if ((v18 & 0x200000) == 0)
  {
    *(_OWORD *)&v178[1] = *(_OWORD *)v9;
    v178[3] = *(void *)(v9 + 16);
  }
  double v19 = *(double *)(v9 + 24);
  if ((v18 & 8) != 0) {
    double v19 = 0.0;
  }
  *(double *)&v178[4] = v19;
  uint64_t v20 = (char *)&v174 + 8;
  long long v174 = xmmword_263BBC430;
  char v172 = &v175;
  char v173 = &v176;
  uint64_t v176 = 0;
  for (uint64_t i = 1; i != 21; ++i)
  {
    v173[i] = (uint64_t)v20;
    v20 += 32;
  }
  int v168 = v170;
  *(void *)int v169 = 0x1400000000;
  memset(v170, 0, sizeof(v170));
  uint64_t v171 = 0;
  long long v164 = v166;
  *(void *)long long v165 = 0x1400000000;
  memset(v166, 0, sizeof(v166));
  uint64_t v167 = 0;
  v161[0] = v162;
  v161[1] = 0x1400000000;
  memset(v162, 0, sizeof(v162));
  uint64_t v163 = 0;
  int v22 = v18 & 1 | 0x4C0;
  uint64_t v23 = *v12;
  uint64_t v24 = v12[1];
  int v25 = *((_DWORD *)v12 + 4);
  v152[0] = v177;
  v152[1] = v23;
  v152[2] = v24;
  int v153 = v25;
  int v154 = 2;
  int v155 = v22;
  long long v156 = 0u;
  long long v157 = 0u;
  long long v158 = 0u;
  long long v159 = 0u;
  uint64_t v160 = 0x4008000000000000;
  v148[0] = &v164;
  v148[1] = v161;
  v148[2] = &v172;
  v148[3] = &v168;
  long long v149 = 0u;
  long long v150 = 0u;
  uint64_t v151 = 0;
  int v145 = v147;
  char v146 = 4;
  v147[1] = 0;
  v147[0] = 0;
  BlueFin::GlSetBase::SetAllLower(&v145, (char)*v8);
  if ((char)*v8 > v10)
  {
    unsigned int v115 = "cNbRr <= lMeasInMaxNum";
    DeviceFaultNotify("glpe_lsq.cpp", 1492, "rr2Vel", (char)"cNbRr <= lMeasInMaxNum");
    int v116 = 1492;
    goto LABEL_119;
  }
  if ((*(unsigned int (**)(void, void *, void *, uint64_t, void **))(**(void **)(v13 + 8) + 16))(*(void *)(v13 + 8), v152, v148, v11, &v145))
  {
    return 0;
  }
  uint64_t v117 = v13;
  float v141 = v144;
  memset(v144, 0, sizeof(v144));
  if (v165[0] >= (char)*v8) {
    int v27 = (char)*v8;
  }
  else {
    int v27 = v165[0];
  }
  int v28 = (char)*v8;
  int v143 = 16;
  int v142 = v27;
  double v29 = (double *)&v144[1];
  bzero(&v144[1], 8 * v27);
  if (v27 >= 1)
  {
    uint64_t v31 = (v27 + 1) - 1;
    int v32 = (double *)(v161[0] + 8);
    long long v33 = (double *)(v164 + 8);
    do
    {
      double v34 = *v33++;
      double v35 = v34;
      double v36 = *v32++;
      *v29++ = v35 - v36;
      --v31;
    }
    while (v31);
  }
  int v37 = *((char *)v12 + 20);
  BOOL v38 = v37 >= 1 && v37 < v28;
  if (v38)
  {
    uint64_t v39 = 0;
    do
    {
      float v40 = *(double *)&v144[v39 + 1];
      *(float *)&v179[v39++] = fabsf(v40);
    }
    while ((unsigned __int16)v28 != v39);
    BlueFin::GlSortFloats((uint64_t)v179, (const float *)v28, &v186, v30);
    *char v8 = v37;
    BlueFin::SKFVectorDim<16>::SKFVectorDim((uint64_t)&v124, v37);
    if ((char)*v8 >= 1)
    {
      uint64_t v41 = 0;
      unsigned int v42 = v164;
      int v43 = v124 + 1;
      do
      {
        v43[v41] = *(void *)&v42[8 * *((unsigned __int8 *)&v186 + v41) + 8];
        ++v41;
      }
      while (v41 < (char)*v8);
    }
    BlueFin::SKFVectorDim<20>::SKFVectorDim((BlueFin::SKFVector *)&v135, (const BlueFin::SKFVector *)&v124);
    BlueFin::SKFVector::Clone((BlueFin::SKFVector *)&v164, (const BlueFin::SKFVector *)&v135);
    if ((char)*v8 >= 1)
    {
      uint64_t v44 = 0;
      uint64_t v45 = v161[0];
      int v46 = v124 + 1;
      do
      {
        v46[v44] = *(void *)(v45 + 8 * *((unsigned __int8 *)&v186 + v44) + 8);
        ++v44;
      }
      while (v44 < (char)*v8);
    }
    BlueFin::SKFVectorDim<20>::SKFVectorDim((BlueFin::SKFVector *)&v135, (const BlueFin::SKFVector *)&v124);
    BlueFin::SKFVector::Clone((BlueFin::SKFVector *)v161, (const BlueFin::SKFVector *)&v135);
    if ((char)*v8 >= 1)
    {
      uint64_t v47 = 0;
      int v48 = v141;
      unsigned int v49 = v124 + 1;
      do
      {
        v49[v47] = v48[*((unsigned __int8 *)&v186 + v47) + 1];
        ++v47;
      }
      while (v47 < (char)*v8);
    }
    BlueFin::SKFVector::Clone((BlueFin::SKFVector *)&v141, (const BlueFin::SKFVector *)&v124);
    if ((char)*v8 >= 1)
    {
      uint64_t v50 = 0;
      int v51 = v168;
      double v52 = v124 + 1;
      do
      {
        v52[v50] = *(void *)&v51[8 * *((unsigned __int8 *)&v186 + v50) + 8];
        ++v50;
      }
      while (v50 < (char)*v8);
    }
    BlueFin::SKFVectorDim<20>::SKFVectorDim((BlueFin::SKFVector *)&v135, (const BlueFin::SKFVector *)&v124);
    BlueFin::SKFVector::Clone((BlueFin::SKFVector *)&v168, (const BlueFin::SKFVector *)&v135);
    double v53 = (char *)&v131 + 8;
    long long v131 = xmmword_263BBA450;
    long long v129 = v132;
    int v130 = &v133;
    uint64_t v133 = 0;
    for (uint64_t j = 1; j != 17; ++j)
    {
      v130[j] = (uint64_t)v53;
      v53 += 32;
    }
    BlueFin::BigMatrix::Null((BlueFin::BigMatrix *)&v129, (char)*v8, SDWORD1(v174));
    int v55 = (char)*v8;
    if (v55 >= 1)
    {
      int v56 = DWORD1(v131);
      int v57 = v173;
      unsigned int v58 = v130;
      uint64_t v59 = (DWORD1(v131) + 1) - 1;
      uint64_t v60 = 1;
      do
      {
        if (v56 >= 1)
        {
          unsigned int v61 = (void *)(v58[v60] + 8);
          int v62 = (uint64_t *)(v57[*((unsigned __int8 *)&v186 + v60 - 1) + 1] + 8);
          uint64_t v63 = v59;
          do
          {
            uint64_t v64 = *v62++;
            *v61++ = v64;
            --v63;
          }
          while (v63);
          LOBYTE(v55) = *v8;
        }
        BOOL v38 = v60++ < (char)v55;
      }
      while (v38);
    }
    int v65 = (char *)&v137 + 8;
    long long v137 = xmmword_263BBC430;
    int v135 = v138;
    long long v136 = &v139;
    uint64_t v139 = 0;
    for (uint64_t k = 1; k != 21; ++k)
    {
      v136[k] = (uint64_t)v65;
      v65 += 32;
    }
    BlueFin::BigMatrix::Clone(&v135, (const BlueFin::BigMatrix *)&v129);
    BlueFin::BigMatrix::Clone(&v172, (const BlueFin::BigMatrix *)&v135);
  }
  int v67 = *((_DWORD *)v12 + 6);
  if ((v67 & 0x200000) != 0)
  {
    BlueFin::GlPeLsq::AddPMeas((BlueFin::GlPeLsq *)&v164, (BlueFin::SKFVector *)v161, (BlueFin::SKFVector *)&v168, (BlueFin::SKFVector *)&v172, (BlueFin::BigMatrix *)2, 0.0225);
    BlueFin::GlPeLsq::AddPMeas((BlueFin::GlPeLsq *)&v164, (BlueFin::SKFVector *)v161, (BlueFin::SKFVector *)&v168, (BlueFin::SKFVector *)&v172, (BlueFin::BigMatrix *)1, 0.0225);
    int v67 = *((_DWORD *)v12 + 6);
  }
  if ((v67 & 8) == 0 && ((v67 & 4) != 0 || (char)*v8 <= 4))
  {
    BlueFin::GlPeLsq::AddPMeas((BlueFin::GlPeLsq *)&v164, (BlueFin::SKFVector *)v161, (BlueFin::SKFVector *)&v168, (BlueFin::SKFVector *)&v172, (BlueFin::BigMatrix *)3, 0.0225);
    int v67 = *((_DWORD *)v12 + 6);
  }
  if ((v67 & 0xA) == 2 && (int)v174 <= 15) {
    BlueFin::GlPeLsq::AddPMeas((BlueFin::GlPeLsq *)&v164, (BlueFin::SKFVector *)v161, (BlueFin::SKFVector *)&v168, (BlueFin::SKFVector *)&v172, (BlueFin::BigMatrix *)4, *(double *)(v9 + 32));
  }
  int v69 = v169[0];
  unsigned int v70 = (char *)&v137 + 8;
  long long v137 = xmmword_263BBC440;
  int v135 = v138;
  long long v136 = &v140;
  uint64_t v140 = 0;
  for (uint64_t m = 1; m != 21; ++m)
  {
    v136[m] = (uint64_t)v70;
    v70 += 160;
  }
  BlueFin::BigMatrix::Clone((BlueFin::BigMatrix *)&v135, v69, v69);
  if (v69 >= 1)
  {
    double v72 = v136;
    int v73 = *((_DWORD *)v12 + 6);
    __int16 v74 = 1;
    uint64_t v75 = v168;
    do
    {
      uint64_t v76 = v72[v74];
      *(void *)(v76 + 8 * v74) = 0x3FF0000000000000;
      if ((v73 & 0x10) != 0) {
        *(double *)(v76 + 8 * v74) = 1.0 / *(double *)&v75[8 * v74];
      }
      ++v74;
    }
    while (v69 >= v74);
  }
  int v77 = v174;
  int v78 = DWORD1(v174);
  unsigned int v79 = (char *)&v131 + 8;
  long long v131 = xmmword_263BBC430;
  long long v129 = v132;
  int v130 = &v134;
  uint64_t v134 = 0;
  for (uint64_t n = 1; n != 21; ++n)
  {
    v130[n] = (uint64_t)v79;
    v79 += 32;
  }
  BlueFin::BigMatrix::Clone((BlueFin::BigMatrix *)&v129, v77, v78);
  if (v77 >= 1)
  {
    long long v81 = v173;
    int v82 = v130;
    for (iuint64_t i = 1; ii <= v77; ++ii)
    {
      if (v78 >= 1)
      {
        int v84 = (void *)(v82[ii] + 8);
        unsigned int v85 = (uint64_t *)(v81[ii] + 8);
        uint64_t v86 = (v78 + 1) - 1;
        do
        {
          uint64_t v87 = *v85++;
          *v84++ = v87;
          --v86;
        }
        while (v86);
      }
    }
  }
  int v88 = (char *)&v126 + 8;
  long long v126 = xmmword_263BBC450;
  double v124 = &v127;
  long long v125 = &v128;
  uint64_t v128 = 0;
  for (juint64_t j = 1; jj != 5; ++jj)
  {
    v125[jj] = (uint64_t)v88;
    v88 += 160;
  }
  BlueFin::BigMatrix::mult((uint64_t)&v124, 1, (const BlueFin::BigMatrix *)&v129, (const BlueFin::BigMatrix *)&v135);
  int v90 = (char *)&v188 + 8;
  long long v188 = xmmword_263BBA470;
  long long v186 = &v189;
  long long v187 = v190;
  v190[0] = 0;
  for (kuint64_t k = 1; kk != 5; ++kk)
  {
    v187[kk] = v90;
    v90 += 32;
  }
  BlueFin::BigMatrix::mult_sym((uint64_t)&v186, (const BlueFin::BigMatrix *)&v124, (const BlueFin::BigMatrix *)&v129);
  BlueFin::BigMatrix::Null((BlueFin::BigMatrix *)&v135, v165[0], 1);
  int v92 = v165[0];
  if (v165[0] >= 1)
  {
    uint64_t v93 = v164;
    uint64_t v94 = v161[0];
    int v95 = 1;
    int v96 = v136;
    do
    {
      *(double *)(v96[(__int16)v95] + 8) = *(double *)&v93[8 * (__int16)v95] - *(double *)(v94 + 8 * (__int16)v95);
      ++v95;
    }
    while (v92 >= (__int16)v95);
  }
  uint64_t v97 = 0;
  long long v121 = xmmword_263BBC460;
  double v119 = &v122;
  unsigned int v120 = &v123;
  uint64_t v123 = 0;
  do
  {
    v120[v97 + 1] = (uint64_t)&v121 + v97 * 8 + 8;
    ++v97;
  }
  while (v97 != 4);
  BlueFin::BigMatrix::mult((uint64_t)&v119, (const BlueFin::BigMatrix *)&v124, (const BlueFin::BigMatrix *)&v135);
  uint64_t v98 = 0;
  double v99 = v120 + 1;
  do
  {
    *(void *)((char *)&v183 + v98 * 8) = *(void *)(v99[v98] + 8);
    ++v98;
  }
  while (v98 != 4);
  double v118 = 0.0;
  BOOL v100 = BlueFin::BigMatrix::cholsl((BlueFin::BigMatrix *)&v186, (double *)&v183, v180.f64, &v118, 0);
  uint64_t result = 0;
  if (v100 && v118 >= 0.0001)
  {
    *(float64x2_t *)uint64_t v9 = vaddq_f64(v180, *(float64x2_t *)v9);
    *(double *)(v9 + 16) = v181 + *(double *)(v9 + 16);
    if ((v12[3] & 8) == 0) {
      *(double *)(v9 + 24) = v182 + *(double *)(v9 + 24);
    }
    BlueFin::SKFVectorDim<100>::SKFVectorDim((BlueFin::SKFVector *)v179, (const BlueFin::SKFVector *)&v141);
    BlueFin::SKFVector::Clone((BlueFin::SKFVector *)(v9 + 56), (const BlueFin::SKFVector *)v179);
    *(_DWORD *)(v9 + 1704) = *(_DWORD *)(v11 + 16);
    int v101 = *((_DWORD *)v12 + 6);
    if ((v101 & 0x80) != 0)
    {
      long long v183 = 0x3FF0000000000000uLL;
      uint64_t v185 = 0;
      uint64_t v184 = 0;
      BOOL v105 = BlueFin::BigMatrix::cholsl((BlueFin::BigMatrix *)&v186, (double *)&v183, v180.f64, 0, 0);
      double v102 = v180.f64[0];
      long long v183 = xmmword_263BBA050;
      uint64_t v185 = 0;
      uint64_t v184 = 0;
      BOOL v106 = BlueFin::BigMatrix::cholsl((BlueFin::BigMatrix *)&v186, (double *)&v183, v180.f64, 0, 0);
      long long v183 = 0uLL;
      uint64_t v184 = 0;
      uint64_t v185 = 0x3FF0000000000000;
      if (!v105) {
        double v102 = 400.0;
      }
      if (v106) {
        double v103 = v180.f64[1];
      }
      else {
        double v103 = 400.0;
      }
      BOOL v107 = BlueFin::BigMatrix::cholsl((BlueFin::BigMatrix *)&v186, (double *)&v183, v180.f64, 0, 0);
      double v104 = v182;
      if (!v107) {
        double v104 = 400.0;
      }
      int v101 = *((_DWORD *)v12 + 6);
    }
    else
    {
      double v102 = 1000000.0;
      double v103 = 1000000.0;
      double v104 = 1000000.0;
    }
    *(double *)(v9 + 40) = v102;
    *(double *)(v9 + 48) = v103;
    *(double *)(v9 + 32) = v104;
    if ((v101 & 0x800) == 0)
    {
      *(_DWORD *)(v9 + 888) = 0;
      return 1;
    }
    uint64_t v108 = v177[0];
    *(void *)(v177[0] + 8) = *(void *)v9;
    *(void *)(v108 + 16) = *(void *)(v9 + 8);
    *(void *)(v108 + 24) = *(void *)(v9 + 16);
    double v109 = *(double *)(v9 + 24);
    if ((v101 & 8) != 0) {
      double v109 = 0.0;
    }
    *(double *)(v108 + 32) = v109;
    if ((int)BlueFin::GlSetBase::Highest((BlueFin::GlSetBase *)&v145) < v10)
    {
      if ((*(unsigned int (**)(void, void *, void *, uint64_t, void **))(**(void **)(v117 + 8)
                                                                                          + 16))(*(void *)(v117 + 8), v152, v148, v11, &v145))
      {
        return 0;
      }
      int v110 = *(_DWORD *)(v9 + 888);
      if (v110 >= 1)
      {
        int v111 = v164;
        uint64_t v112 = v161[0];
        int v113 = 1;
        uint64_t v114 = *(void *)(v9 + 880);
        do
        {
          *(double *)(v114 + 8 * (__int16)v113) = (*(double *)&v111[8 * (__int16)v113]
                                                   - *(double *)(v112 + 8 * (__int16)v113))
                                                  * 100.0;
          ++v113;
        }
        while (v110 >= (__int16)v113);
      }
      return 1;
    }
    unsigned int v115 = "otMeasSet.Highest() < lMeasInMaxNum";
    DeviceFaultNotify("glpe_lsq.cpp", 1727, "rr2Vel", (char)"otMeasSet.Highest() < lMeasInMaxNum");
    int v116 = 1727;
LABEL_119:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_lsq.cpp", v116, v115);
  }
  return result;
}

uint64_t BlueFin::BigMatrix::mult(uint64_t this, BOOL a2, const BlueFin::BigMatrix *a3, const BlueFin::BigMatrix *a4)
{
  if ((const BlueFin::BigMatrix *)this == a3)
  {
    uint64_t v21 = "this != &mLeft";
    DeviceFaultNotify("glpe_matrix_olympic.cpp", 172, "mult", (char)"this != &mLeft");
    int v22 = 172;
    goto LABEL_17;
  }
  if ((const BlueFin::BigMatrix *)this == a4)
  {
    uint64_t v21 = "this != &mRight";
    DeviceFaultNotify("glpe_matrix_olympic.cpp", 173, "mult", (char)"this != &mRight");
    int v22 = 173;
    goto LABEL_17;
  }
  if (*((_DWORD *)a3 + 4) != *((_DWORD *)a4 + 4))
  {
    uint64_t v21 = "mLeft.m_NbRows == mRight.m_NbRows";
    DeviceFaultNotify("glpe_matrix_olympic.cpp", 176, "mult", (char)"mLeft.m_NbRows == mRight.m_NbRows");
    int v22 = 176;
LABEL_17:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix_olympic.cpp", v22, v21);
  }
  int v4 = *((_DWORD *)a4 + 5);
  *(_DWORD *)(this + 16) = *((_DWORD *)a3 + 5);
  *(_DWORD *)(this + 20) = v4;
  uint64_t v5 = *((unsigned int *)a3 + 5);
  if ((int)v5 >= 1)
  {
    int v6 = *((_DWORD *)a3 + 4);
    int v7 = *((_DWORD *)a4 + 5);
    uint64_t v8 = v5 + 1;
    uint64_t v9 = 1;
    do
    {
      if (v7 >= 1)
      {
        uint64_t v10 = *(void *)(*(void *)(this + 8) + 8 * v9);
        uint64_t v11 = *((void *)a4 + 1) + 8;
        uint64_t v12 = *((void *)a3 + 1) + 8;
        uint64_t v13 = 1;
        do
        {
          double v14 = 0.0;
          if (v6 >= 1)
          {
            uint64_t v15 = (uint64_t *)v12;
            uint64_t v16 = (uint64_t *)v11;
            uint64_t v17 = (v6 + 1) - 1;
            do
            {
              uint64_t v18 = *v15++;
              double v19 = *(double *)(v18 + 8 * v9);
              uint64_t v20 = *v16++;
              double v14 = v14 + v19 * *(double *)(v20 + 8 * v13);
              --v17;
            }
            while (v17);
          }
          *(double *)(v10 + 8 * v13++) = v14;
        }
        while (v13 != v7 + 1);
      }
      ++v9;
    }
    while (v9 != v8);
  }
  return this;
}

uint64_t BlueFin::BigMatrix::mult_sym(uint64_t this, const BlueFin::BigMatrix *a2, const BlueFin::BigMatrix *a3)
{
  if ((const BlueFin::BigMatrix *)this == a2)
  {
    double v19 = "this != &mLeft";
    DeviceFaultNotify("glpe_matrix.cpp", 1065, "mult_sym", (char)"this != &mLeft");
    int v20 = 1065;
    goto LABEL_24;
  }
  if ((const BlueFin::BigMatrix *)this == a3)
  {
    double v19 = "this != &mRight";
    DeviceFaultNotify("glpe_matrix.cpp", 1066, "mult_sym", (char)"this != &mRight");
    int v20 = 1066;
    goto LABEL_24;
  }
  int v3 = *((_DWORD *)a2 + 5);
  if (v3 != *((_DWORD *)a3 + 4))
  {
    double v19 = "mLeft.m_NbCols == mRight.m_NbRows";
    DeviceFaultNotify("glpe_matrix.cpp", 1069, "mult_sym", (char)"mLeft.m_NbCols == mRight.m_NbRows");
    int v20 = 1069;
    goto LABEL_24;
  }
  unint64_t v4 = *((unsigned int *)a2 + 4);
  if (v4 != *((_DWORD *)a3 + 5))
  {
    double v19 = "mLeft.m_NbRows == mRight.m_NbCols";
    DeviceFaultNotify("glpe_matrix.cpp", 1071, "mult_sym", (char)"mLeft.m_NbRows == mRight.m_NbCols");
    int v20 = 1071;
LABEL_24:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.cpp", v20, v19);
  }
  if ((int)v4 > *(_DWORD *)(this + 24) || (int)v4 > *(_DWORD *)(this + 28))
  {
    double v19 = "mLeft.m_NbRows <= m_NbMaxRows && mRight.m_NbCols <= m_NbMaxCols";
    DeviceFaultNotify("glpe_matrix.cpp", 1072, "mult_sym", (char)"mLeft.m_NbRows <= m_NbMaxRows && mRight.m_NbCols <= m_NbMaxCols");
    int v20 = 1072;
    goto LABEL_24;
  }
  if ((int)v4 >= 1)
  {
    unint64_t v5 = v4 + 1;
    unint64_t v6 = 1;
    do
    {
      if (v6 <= v4)
      {
        uint64_t v7 = *((void *)a2 + 1);
        uint64_t v8 = *(void *)(this + 8);
        uint64_t v9 = *(void *)(v8 + 8 * v6);
        uint64_t v10 = *((void *)a3 + 1) + 8;
        unint64_t v11 = v6;
        do
        {
          if (v3 < 1)
          {
            double v13 = 0.0;
          }
          else
          {
            uint64_t v12 = (double *)(*(void *)(v7 + 8 * v6) + 8);
            double v13 = 0.0;
            double v14 = (uint64_t *)v10;
            uint64_t v15 = (v3 + 1) - 1;
            do
            {
              double v16 = *v12++;
              double v17 = v16;
              uint64_t v18 = *v14++;
              double v13 = v13 + v17 * *(double *)(v18 + 8 * v11);
              --v15;
            }
            while (v15);
          }
          *(double *)(v9 + 8 * v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v13;
          *(double *)(*(void *)(v8 + 8 * v11++) + 8 * v6) = v13;
        }
        while (v11 != v5);
      }
      ++v6;
    }
    while (v6 != v5);
  }
  *(_DWORD *)(this + 16) = v4;
  *(_DWORD *)(this + 20) = v4;
  return this;
}

uint64_t *BlueFin::GlPeKfPool::GlPeKfPool(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v15 = (int64x2_t *)(a1 + 7467);
  double v16 = a1 + 7262;
  int v25 = a1 + 4426;
  BlueFin::GlPeNavGnssState::GlPeNavGnssState((BlueFin::GlPeNavGnssState *)(a1 + 7470));
  double v17 = BlueFin::GlPeNavGnssKFIf::GlPeNavGnssKFIf(a1, (uint64_t *)off_270EC3E18, a2, a3);
  *double v17 = (uint64_t)&unk_270EC3C50;
  v15[1].i64[1] = (uint64_t)&unk_270EC3DF8;
  BlueFin::GlPePrawnKf::GlPePrawnKf((uint64_t)(v17 + 3), a2, a3, a4, a9, a8, a5, a6, a7, a10);
  BlueFin::GlPeNavGnssSpiderKF::GlPeNavGnssSpiderKF(a1 + 2764, a2, a3, a4, a5, a6, a7, a8, a9, a10, 0);
  BlueFin::GlPeNavGnssSpiderKF::GlPeNavGnssSpiderKF(a1 + 5013, a2, a3, a4, a5, a6, a7, a8, a9, a10, 2);
  uint64_t v18 = 0;
  v16[3] = (uint64_t)(a1 + 2764);
  v16[4] = 0;
  *((_DWORD *)v16 + 10) = 0;
  v16[6] = a6;
  do
  {
    BlueFin::GlPeNavGnssState::GlPeNavGnssState((BlueFin::GlPeNavGnssState *)&a1[v18 + 7269]);
    v18 += 66;
  }
  while (v18 != 198);
  *double v16 = (uint64_t)(a1 + 2764);
  v16[1] = (uint64_t)(a1 + 734);
  unsigned __int8 v16[2] = (uint64_t)(a1 + 5013);
  unsigned char *v25 = 0;
  v25[73] = 0;
  *uint64_t v15 = vdupq_n_s64(0x40C3880000000000uLL);
  (*(void (**)(void))(a1[734] + 376))();
  (*(void (**)(void))(*(void *)*v16 + 376))();
  (*(void (**)(void))(*(void *)v16[2] + 376))();
  return a1;
}

uint64_t BlueFin::GlPeNavGnssSpiderKF::GlPeNavGnssSpiderKF(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11)
{
  BlueFin::GlPeNavGnssState::GlPeNavGnssState((BlueFin::GlPeNavGnssState *)(a1 + 2183));
  uint64_t result = BlueFin::GlPeNavGnssKF::GlPeNavGnssKF((uint64_t)a1, (uint64_t *)off_270EC37C8, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 1);
  *a1 = &unk_270EC35F8;
  a1[2183] = &unk_270EC37A8;
  return result;
}

uint64_t BlueFin::GlPeNavGnssKF::GlPeNavGnssKF(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, char a13)
{
  uint64_t v28 = a1 + 16976;
  double v19 = (unsigned char *)(a1 + 12084);
  uint64_t v26 = a1 + 2936;
  int v20 = BlueFin::GlPeNavGnssKFIf::GlPeNavGnssKFIf((uint64_t *)a1, a2 + 1, a3, a4);
  uint64_t v21 = *a2;
  *int v20 = *a2;
  *(void *)(a1 + *(void *)(v21 - 24)) = a2[5];
  *(_WORD *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 26) = a13;
  uint64_t v22 = a1 + 56;
  *(_OWORD *)(a1 + 48) = xmmword_263BBC4D0;
  *(void *)(a1 + 32) = a1 + 64;
  *(void *)(a1 + 40) = a1 + 1216;
  *(void *)(a1 + 1216) = 0;
  for (uint64_t i = 8; i != 104; i += 8)
  {
    *(void *)(*(void *)(a1 + 40) + i) = v22;
    v22 += 96;
  }
  *(unsigned char *)(a1 + 1320) = 0;
  *(void *)(a1 + 1324) = 0;
  *(void *)(a1 + 1464) = 0;
  *(void *)(a1 + 1480) = 0;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(void *)(a1 + 1568) = 0xFF9222FF00000000;
  *(unsigned char *)(a1 + 1560) = 0;
  *(_OWORD *)(a1 + 1512) = 0u;
  *(_OWORD *)(a1 + 1528) = 0u;
  *(_OWORD *)(a1 + 1544) = 0u;
  *(void *)(a1 + 1576) = 0;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1644) = 0u;
  *(_OWORD *)(a1 + 1660) = 0u;
  *(_OWORD *)(a1 + 1676) = 0u;
  *(_OWORD *)(a1 + 1688) = 0u;
  *(_OWORD *)(a1 + 1628) = 0u;
  *(void *)(a1 + 1616) = a1 + 1628;
  *(unsigned char *)(a1 + 1624) = 19;
  *(_OWORD *)(a1 + 1732) = 0u;
  *(_OWORD *)(a1 + 1748) = 0u;
  *(_OWORD *)(a1 + 1764) = 0u;
  *(_OWORD *)(a1 + 1780) = 0u;
  *(_OWORD *)(a1 + 1716) = 0u;
  *(void *)(a1 + 1704) = a1 + 1716;
  *(unsigned char *)(a1 + 1712) = 19;
  *(void *)(a1 + 1796) = 0x342200000;
  *(_OWORD *)(a1 + 1828) = 0u;
  *(unsigned char *)(a1 + 1808) = 0;
  *(void *)(a1 + 1816) = a1 + 1828;
  *(unsigned char *)(a1 + 1824) = 19;
  *(_OWORD *)(a1 + 1844) = 0u;
  *(_OWORD *)(a1 + 1860) = 0u;
  *(_OWORD *)(a1 + 1876) = 0u;
  *(_OWORD *)(a1 + 1888) = 0u;
  *(void *)(a1 + 1904) = a1 + 1916;
  *(_OWORD *)(a1 + 1916) = 0u;
  *(_OWORD *)(a1 + 2004) = 0u;
  *(unsigned char *)(a1 + 1912) = 19;
  *(_OWORD *)(a1 + 1976) = 0u;
  *(_OWORD *)(a1 + 1964) = 0u;
  *(_OWORD *)(a1 + 1948) = 0u;
  *(_OWORD *)(a1 + 1932) = 0u;
  *(void *)(a1 + 1992) = a1 + 2004;
  *(unsigned char *)(a1 + 2000) = 19;
  *(_OWORD *)(a1 + 2064) = 0u;
  *(_OWORD *)(a1 + 2020) = 0u;
  *(_OWORD *)(a1 + 2036) = 0u;
  *(_OWORD *)(a1 + 2108) = 0u;
  *(_OWORD *)(a1 + 2124) = 0u;
  *(_OWORD *)(a1 + 2140) = 0u;
  *(_OWORD *)(a1 + 2154) = 0u;
  *(_OWORD *)(a1 + 2092) = 0u;
  *(_OWORD *)(a1 + 2052) = 0u;
  *(void *)(a1 + 2080) = a1 + 2092;
  *(unsigned char *)(a1 + 2088) = 19;
  *(void *)(a1 + 2232) = 0;
  *(_OWORD *)(a1 + 2216) = 0u;
  *(void *)(a1 + 2240) = a5;
  *(void *)(a1 + 2248) = a7;
  *(void *)(a1 + 2256) = a8;
  *(void *)(a1 + 2264) = a9;
  *(void *)(a1 + 2272) = a10;
  *(void *)(a1 + 2296) = 0;
  *(void *)(a1 + 2288) = 0;
  *(void *)(a1 + 2304) = 0;
  *(void *)(a1 + 2312) = -1;
  *(void *)(a1 + 2328) = 0;
  *(void *)(a1 + 2320) = 0;
  *(_DWORD *)(a1 + 2344) = 0;
  *(void *)(a1 + 2336) = 0;
  *(_OWORD *)(a1 + 2576) = 0u;
  *(_OWORD *)(a1 + 2560) = 0u;
  *(_OWORD *)(a1 + 2544) = 0u;
  *(_OWORD *)(a1 + 2528) = 0u;
  *(_OWORD *)(a1 + 2512) = 0u;
  *(_OWORD *)(a1 + 2496) = 0u;
  *(_OWORD *)(a1 + 2480) = 0u;
  *(_OWORD *)(a1 + 2464) = 0u;
  *(_OWORD *)(a1 + 2448) = 0u;
  *(_OWORD *)(a1 + 2432) = 0u;
  *(_OWORD *)(a1 + 2416) = 0u;
  *(_OWORD *)(a1 + 2400) = 0u;
  *(_OWORD *)(a1 + 2384) = 0u;
  *(_OWORD *)(a1 + 2368) = 0u;
  *(_OWORD *)(a1 + 2352) = 0u;
  *(void *)(a1 + 2592) = a11;
  *(void *)(a1 + 2600) = a6;
  *(void *)(a1 + 2608) = a7;
  *(_WORD *)(a1 + 2280) = 0;
  *(_DWORD *)(a1 + 2284) = -7200001;
  *(_OWORD *)(a1 + 2648) = 0u;
  *(_OWORD *)(a1 + 2664) = 0u;
  *(_OWORD *)(a1 + 2616) = 0u;
  *(_OWORD *)(a1 + 2632) = 0u;
  *(void *)(a1 + 2680) = 0x4103880000000000;
  *(void *)(a1 + 2688) = 0;
  *(_DWORD *)(a1 + 2696) = 0;
  *(_OWORD *)(a1 + 2704) = xmmword_263BBC4E0;
  *(unsigned char *)(a1 + 2720) = 0;
  *(void *)(a1 + 2728) = 0;
  *(_WORD *)(a1 + 2736) = 0;
  *(void *)(a1 + 2744) = 0;
  *(void *)(a1 + 2752) = 0x40DFA40000000000;
  *(unsigned char *)(a1 + 2760) = 0;
  *(_WORD *)(a1 + 2800) = 0;
  *(_OWORD *)(a1 + 2784) = 0u;
  *(_OWORD *)(a1 + 2768) = 0u;
  *(unsigned char *)(a1 + 2808) = 0;
  *(_WORD *)(a1 + 2848) = 0;
  *(_OWORD *)(a1 + 2832) = 0u;
  *(_OWORD *)(a1 + 2816) = 0u;
  *(void *)(a1 + 2856) = a3;
  *(void *)(a1 + 2864) = a4;
  *(void *)(a1 + 2952) = a1 + 2964;
  *(unsigned char *)(a1 + 2960) = 19;
  *(void *)(a1 + 2880) = 0;
  *(void *)(a1 + 2872) = 0;
  *(void *)(a1 + 2888) = 0;
  *(void *)(a1 + 2904) = 0x4082C00000000000;
  *(int64x2_t *)(a1 + 2912) = vdupq_n_s64(0x4082C00000000000uLL);
  *(unsigned char *)(a1 + 2932) = 0;
  *(_OWORD *)uint64_t v26 = xmmword_263BBA440;
  *(_DWORD *)(a1 + 2896) = 0;
  *(_DWORD *)(a1 + 2928) = 1142285679;
  *(_OWORD *)(a1 + 3024) = 0u;
  *(_OWORD *)(a1 + 3012) = 0u;
  *(_OWORD *)(a1 + 2996) = 0u;
  *(_OWORD *)(a1 + 2980) = 0u;
  *(_OWORD *)(a1 + 2964) = 0u;
  *(_DWORD *)(a1 + 4560) = 1064514355;
  bzero((void *)(a1 + 3040), 0x5F0uLL);
  *(_OWORD *)(a1 + 4600) = 0u;
  *(_OWORD *)(a1 + 4616) = 0u;
  *(_OWORD *)(a1 + 4632) = 0u;
  *(_OWORD *)(a1 + 4648) = 0u;
  *(_OWORD *)(a1 + 4664) = 0u;
  *(_OWORD *)(a1 + 4680) = 0u;
  *(_OWORD *)(a1 + 4696) = 0u;
  *(_OWORD *)(a1 + 4584) = 0u;
  *(void *)(a1 + 4568) = a1 + 4584;
  *(void *)(a1 + 4576) = 0x1000000000;
  *(void *)(a1 + 4712) = 0;
  *(void *)(a1 + 4776) = a10;
  *(void *)(a1 + 4784) = a7;
  *(_OWORD *)(a1 + 4720) = 0u;
  *(_OWORD *)(a1 + 4736) = 0u;
  *(_DWORD *)(a1 + 4752) = 1092479462;
  *(void *)(a1 + 4760) = 0;
  *(_DWORD *)(a1 + 4768) = 0;
  *(void *)(a1 + 4792) = a6;
  *(void *)(a1 + 4800) = a3;
  *(void *)(a1 + 4808) = a7;
  *(_OWORD *)(a1 + 4816) = xmmword_263BBC4F0;
  *(void *)(a1 + 4832) = 0;
  *(unsigned char *)(v26 + 1904) = 0;
  *(_DWORD *)(a1 + 4844) = 0;
  *(_OWORD *)(a1 + 4848) = xmmword_263BBC500;
  *(void *)(a1 + 4864) = 0x300002710;
  *(_DWORD *)(a1 + 4872) = 0;
  *(unsigned char *)(v26 + 1940) = 0;
  BlueFin::GlPeNavGnssResidMon::GlPeNavGnssResidMon(a1 + 4880, a3);
  *(void *)(a1 + 11664) = 0;
  *(void *)(a1 + 11800) = 0;
  *(void *)(a1 + 11936) = 0;
  *(void *)(a1 + 12072) = 0;
  *(void *)(a1 + 11448) = 0;
  *(unsigned char *)(a1 + 11456) = 0;
  *(_OWORD *)(a1 + 11464) = 0u;
  *(_OWORD *)(a1 + 11480) = 0u;
  *(_OWORD *)(a1 + 11496) = 0u;
  *(_OWORD *)(a1 + 11512) = 0u;
  *(void *)(a1 + 11528) = 0;
  *(_DWORD *)(a1 + 12080) = -7200001;
  *double v19 = 0;
  *(_DWORD *)(a1 + 12088) = -7200001;
  *(void *)(a1 + 12092) = 0;
  *(void *)(a1 + 12104) = 0;
  v19[28] = 0;
  *(void *)(a1 + 12120) = 0;
  *(_DWORD *)(a1 + 12128) = 0;
  BlueFin::GlPeNavGnssState::GlPeNavGnssState((BlueFin::GlPeNavGnssState *)(a1 + 12136));
  BlueFin::GlPeNavGnssState::GlPeNavGnssState((BlueFin::GlPeNavGnssState *)(a1 + 12664));
  *(_DWORD *)(a1 + 13200) = 0;
  *(void *)(a1 + 13192) = 0;
  *(_OWORD *)(a1 + 13236) = 0u;
  *(_OWORD *)(a1 + 13252) = 0u;
  *(_OWORD *)(a1 + 13268) = 0u;
  *(_OWORD *)(a1 + 13220) = 0u;
  *(void *)(a1 + 13208) = a1 + 13220;
  v19[1132] = 19;
  *(_OWORD *)(a1 + 13280) = 0u;
  v19[1212] = 1;
  *(void *)(a1 + 13304) = a6;
  BlueFin::GlPePolaroid::GlPePolaroid(a1 + 13312, a3, a4, a5, a7, a1 + 4792, a1 + 4880, *(unsigned char *)(a1 + 26), 1);
  *(_DWORD *)(a1 + 15876) = a12;
  *(void *)(a1 + 15880) = 0;
  *(void *)(a1 + 15888) = 0x415854A640000000;
  *(unsigned char *)uint64_t v28 = 8;
  *(_OWORD *)(a1 + 16856) = 0u;
  *(_OWORD *)(a1 + 16872) = 0u;
  *(_OWORD *)(a1 + 16888) = 0u;
  *(_OWORD *)(a1 + 16904) = 0u;
  *(_OWORD *)(a1 + 16920) = 0u;
  *(_OWORD *)(a1 + 16936) = 0u;
  *(_OWORD *)(a1 + 16952) = 0u;
  *(void *)(a1 + 16968) = 0;
  *(void *)(a1 + 16992) = 0;
  *(void *)(a1 + 17008) = 0;
  *(void *)(a1 + 17000) = 0;
  *(_OWORD *)(a1 + 17112) = v31;
  *(_OWORD *)(a1 + 17128) = v32;
  *(_OWORD *)(a1 + 17144) = v33;
  *(_OWORD *)(a1 + 17160) = v34;
  *(_OWORD *)(a1 + 17048) = 0uLL;
  *(_OWORD *)(a1 + 17064) = v29;
  *(_OWORD *)(a1 + 17080) = 0uLL;
  *(_OWORD *)(a1 + 17096) = v30;
  *(void *)(a1 + 17176) = 0x200000002;
  *(void *)(a1 + 17184) = 0;
  *(void *)(a1 + 17216) = 0;
  *(void *)(a1 + 17312) = 0x100000002;
  *(void *)(a1 + 17320) = 0;
  *(void *)(a1 + 17352) = 0;
  *(void *)(a1 + 17448) = 0x100000002;
  *(unsigned char *)(v28 + 64) = 0;
  *(void *)(a1 + 17032) = 0x3FB99999A0000000;
  *(_WORD *)(v28 + 8) = 0;
  GlCustomLog(14, "%s sizeof(FLOAT_KF)=%d\n", "<NAVGNSSKF>", 8);
  BlueFin::GlPeNavGnssKF::Reset((uint64_t *)a1, 3);
  *(void *)(a1 + 12120) = 0;
  *(_DWORD *)(a1 + 12128) = 0;
  return a1;
}

double BlueFin::GlPeNavGnssState::GlPeNavGnssState(BlueFin::GlPeNavGnssState *this)
{
  double result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 10) = 0x481C40004AC2A532;
  *((void *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *((_DWORD *)this + 24) = 1217552911;
  *((int32x4_t *)this + 8) = vdupq_n_s32(0x44160000u);
  *((_DWORD *)this + 36) = 0;
  *((void *)this + 19) = 0;
  *((_DWORD *)this + 40) = 1161518795;
  *((void *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0x3FE7FBBFDF65C4CCLL;
  *((_OWORD *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = xmmword_263BBA120;
  *((_DWORD *)this + 48) = 1070141403;
  *(void *)((char *)this + 204) = 0;
  *(void *)((char *)this + 196) = 0;
  *(_OWORD *)((char *)this + 212) = xmmword_263BBA130;
  *(void *)((char *)this + 228) = 1077936128;
  *((unsigned char *)this + 244) = 0;
  *((_DWORD *)this + 59) = 1077936128;
  *((_DWORD *)this + 60) = 0;
  *((void *)this + 3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0x481C40004AC2A532;
  *((_DWORD *)this + 64) = 0;
  *(_OWORD *)((char *)this + 292) = 0u;
  *(_OWORD *)((char *)this + 308) = 0u;
  *(_OWORD *)((char *)this + 324) = 0u;
  *(_OWORD *)((char *)this + 276) = 0u;
  *((void *)this + 33) = (char *)this + 276;
  *((unsigned char *)this + 272) = 19;
  *((_OWORD *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
  *(_OWORD *)((char *)this + 380) = 0u;
  *(_OWORD *)((char *)this + 396) = 0u;
  *(_OWORD *)((char *)this + 412) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 364) = 0u;
  *((void *)this + 44) = (char *)this + 364;
  *((unsigned char *)this + 360) = 19;
  *(_OWORD *)((char *)this + 468) = 0u;
  *(_OWORD *)((char *)this + 484) = 0u;
  *(_OWORD *)((char *)this + 500) = 0u;
  *(_OWORD *)((char *)this + 452) = 0u;
  *((void *)this + 55) = (char *)this + 452;
  *((unsigned char *)this + 448) = 19;
  *((_OWORD *)this + 32) = 0u;
  *(void *)this = &unk_270EC2FA8;
  *((void *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  return result;
}

uint64_t BlueFin::GlPeNavGnssResidMon::GlPeNavGnssResidMon(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = a1 + 6544;
  *(void *)a1 = 0x3FC999999999999ALL;
  do
  {
    BlueFin::stResidBcMonArray::stResidBcMonArray(a1 + v4 + 112);
    v4 += 3224;
  }
  while (v4 != 6448);
  *(void *)(a1 + 6560) = a2;
  __asm { FMOV            V0.2D, #20.0 }
  *(_OWORD *)(a1 + 8) = _Q0;
  *(_OWORD *)(a1 + 24) = xmmword_263BBCDD0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = xmmword_263BBCDD0;
  *(void *)(a1 + 3312) = 0;
  *(unsigned char *)(a1 + 3320) = 0;
  *(_DWORD *)(a1 + 3324) = 0;
  *(_WORD *)(a1 + 3328) = 0;
  *(void *)(a1 + 6536) = 0;
  *(unsigned char *)uint64_t v5 = 0;
  *(_DWORD *)(a1 + 6548) = 0;
  *(_WORD *)(v5 + 8) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  return a1;
}

uint64_t BlueFin::stResidBcMonArray::stResidBcMonArray(uint64_t this)
{
  for (uint64_t i = 0; i != 3200; i += 32)
  {
    uint64_t v2 = this + i;
    *(void *)uint64_t v2 = 0;
    *(_DWORD *)(v2 + 8) = 1315859240;
    *(_WORD *)(v2 + 12) = 0;
    *(_DWORD *)(v2 + 16) = 0;
    *(unsigned char *)(v2 + 20) = 0;
    *(_DWORD *)(v2 + 24) = -1;
    *(_WORD *)(v2 + 28) = 575;
  }
  *(void *)(this + 3200) = 0;
  *(unsigned char *)(this + 3208) = 0;
  *(_DWORD *)(this + 3212) = 0;
  *(_WORD *)(this + 3216) = 0;
  return this;
}

uint64_t *BlueFin::GlPeNavGnssKFIf::GlPeNavGnssKFIf(uint64_t *result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2[1];
  *double result = v4;
  *(uint64_t *)((char *)result + *(void *)(v4 - 24)) = a2[2];
  result[1] = a3;
  result[2] = a4;
  uint64_t v5 = *a2;
  *double result = *a2;
  *(uint64_t *)((char *)result + *(void *)(v5 - 24)) = a2[3];
  return result;
}

void BlueFin::GlPeNavGnssKF::Reset(uint64_t *a1, int a2)
{
  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 176) = 0;
  *(_OWORD *)(a1 + 167) = 0u;
  a1[169] = 0;
  uint64_t v4 = (char *)a1 + 12085;
  a1[171] = 0;
  *((_OWORD *)a1 + 86) = 0u;
  a1[175] = 0;
  *((_OWORD *)a1 + 88) = 0u;
  a1[183] = 0x300000003;
  *((_DWORD *)a1 + 368) = 1232348160;
  BlueFin::BigMatrix::Null((BlueFin::BigMatrix *)(a1 + 4), *((_DWORD *)a1 + 12), *((_DWORD *)a1 + 13));
  a1[196] = 0xFF9222FF00000000;
  *((unsigned char *)a1 + 1600) = 0;
  *((_OWORD *)a1 + 99) = 0u;
  a1[197] = 0;
  *(uint64_t *)((char *)a1 + 1604) = 0;
  uint64_t v5 = *a1;
  *((_DWORD *)a1 + 369) = *(_DWORD *)a1[1];
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24) + 88) = 0;
  *(_DWORD *)((char *)a1 + *(void *)(v5 - 24) + 96) = 1217552911;
  *(_DWORD *)((char *)a1 + *(void *)(v5 - 24) + 196) = a2;
  a1[187] = 0;
  *(_OWORD *)(a1 + 185) = 0u;
  *((_DWORD *)a1 + 376) = 1137180672;
  *((_OWORD *)a1 + 296) = 0u;
  *((_OWORD *)a1 + 295) = 0u;
  *((_DWORD *)a1 + 1188) = 1092479462;
  a1[595] = 0;
  *((_DWORD *)a1 + 1192) = 0;
  a1[272] = 0;
  a1[273] = 1065353216;
  *((unsigned char *)a1 + 2192) = 0;
  *((_DWORD *)a1 + 549) = 0;
  *((unsigned char *)a1 + 2200) = 0;
  *(uint64_t *)((char *)a1 + 2204) = 0;
  *((_DWORD *)a1 + 543) = 0;
  a1[191] = 0;
  *(_OWORD *)(a1 + 189) = 0u;
  *((int64x2_t *)a1 + 96) = vdupq_n_s64(0x4103880000000000uLL);
  a1[194] = 0x4103880000000000;
  *((_OWORD *)a1 + 165) = 0u;
  *((_OWORD *)a1 + 166) = 0u;
  a1[334] = 0;
  a1[335] = 0x4103880000000000;
  a1[336] = 0;
  *((_DWORD *)a1 + 674) = 0;
  *((_OWORD *)a1 + 169) = xmmword_263BBC4E0;
  *((unsigned char *)a1 + 2720) = 0;
  unsigned char *v4 = 0;
  v4[3787] = 0;
  a1[1515] = 0;
  *((_DWORD *)a1 + 3032) = 0;
  BlueFin::GlPeNavGnssState::GlPeNavGnssState((BlueFin::GlPeNavGnssState *)v7);
  BlueFin::GlPeNavGnssState::operator=((uint64_t)(a1 + 1517), (uint64_t)v7);
  BlueFin::GlPeNavGnssState::GlPeNavGnssState((BlueFin::GlPeNavGnssState *)v7);
  BlueFin::GlPeNavGnssState::operator=((uint64_t)(a1 + 1583), (uint64_t)v7);
  *((_DWORD *)a1 + 3300) = 0;
  a1[1649] = 0;
  uint64_t v6 = *a1;
  bzero(*(void **)((char *)a1 + *(void *)(*a1 - 24) + 352), ((4 * *((unsigned __int8 *)a1 + *(void *)(*a1 - 24) + 360) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero(*(void **)((char *)a1 + *(void *)(v6 - 24) + 264), ((4 * *((unsigned __int8 *)a1 + *(void *)(v6 - 24) + 272) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
}

uint64_t BlueFin::GlPeNavGnssState::operator=(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v4;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  *(unsigned char *)(a1 + 244) = *(unsigned char *)(a2 + 244);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 196) = *(void *)(a2 + 196);
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
  uint64_t v5 = a2 + 264;
  uint64_t v6 = BlueFin::GlSetBase::operator=(a1 + 264, a2 + 264);
  *(_OWORD *)(v6 + 12) = *(_OWORD *)(v5 + 12);
  long long v7 = *(_OWORD *)(v5 + 28);
  long long v8 = *(_OWORD *)(v5 + 44);
  long long v9 = *(_OWORD *)(v5 + 60);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(v6 + 60) = v9;
  *(_OWORD *)(v6 + 44) = v8;
  *(_OWORD *)(v6 + 28) = v7;
  uint64_t v10 = BlueFin::GlSetBase::operator=(a1 + 352, a2 + 352);
  *(_OWORD *)(v10 + 12) = *(_OWORD *)(a2 + 364);
  long long v11 = *(_OWORD *)(a2 + 380);
  long long v12 = *(_OWORD *)(a2 + 396);
  long long v13 = *(_OWORD *)(a2 + 412);
  *(_OWORD *)(v10 + 72) = *(_OWORD *)(a2 + 424);
  *(_OWORD *)(v10 + 60) = v13;
  *(_OWORD *)(v10 + 44) = v12;
  *(_OWORD *)(v10 + 28) = v11;
  uint64_t v14 = BlueFin::GlSetBase::operator=(a1 + 440, a2 + 440);
  *(_OWORD *)(v14 + 12) = *(_OWORD *)(a2 + 452);
  long long v15 = *(_OWORD *)(a2 + 468);
  long long v16 = *(_OWORD *)(a2 + 484);
  long long v17 = *(_OWORD *)(a2 + 500);
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
  *(_OWORD *)(v14 + 60) = v17;
  *(_OWORD *)(v14 + 44) = v16;
  *(_OWORD *)(v14 + 28) = v15;
  return a1;
}

uint64_t BlueFin::GlPeNavGnssKF::SetKFEnabled(uint64_t this, char a2)
{
  *(unsigned char *)(this + 1320) = a2;
  return this;
}

uint64_t BlueFin::GlPePolaroid::GlPePolaroid(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9)
{
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)a1 = &unk_270EC4188;
  *(void *)(a1 + 2032) = &unk_270EC41C0;
  *(void *)(a1 + 24) = a4;
  *(void *)(a1 + 32) = a5;
  *(void *)(a1 + 40) = a6;
  *(void *)(a1 + 48) = a7;
  *(unsigned char *)(a1 + 56) = a8;
  *(unsigned char *)(a1 + 57) = a9;
  *(_DWORD *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 100) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 87) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 109) = 0;
  bzero((void *)(a1 + 128), 0x4B0uLL);
  *(_DWORD *)(a1 + 123) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 1932) = 0u;
  *(_OWORD *)(a1 + 1948) = 0u;
  *(_OWORD *)(a1 + 1964) = 0u;
  *(_OWORD *)(a1 + 1976) = 0u;
  *(_OWORD *)(a1 + 1916) = 0u;
  *(void *)(a1 + 1904) = a1 + 1916;
  *(unsigned char *)(a1 + 1912) = 19;
  *(_OWORD *)(a1 + 2008) = 0u;
  *(void *)(a1 + 2024) = 0x3FF0000000000000;
  *(void *)(a1 + 1992) = 0;
  *(_WORD *)(a1 + 200BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *(unsigned char *)(a1 + 2000) = 0;
  return a1;
}

uint64_t non-virtual thunk to'BlueFin::GlPePrawnKf::SetKFEnabled(uint64_t this, char a2)
{
  *(unsigned char *)(this + 15673) = a2;
  return this;
}

uint64_t BlueFin::GlPePrawnKf::GlPePrawnKf(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17 = a1 + 19216;
  BlueFin::GlPeNavGnssState::GlPeNavGnssState((BlueFin::GlPeNavGnssState *)(a1 + 21560));
  BlueFin::GlPeShrimpKf::GlPeShrimpKf(a1, (uint64_t *)&off_270EC46C8, a7, a8, a6, a5, a2);
  BlueFin::GlPeNavGnssKFIf::GlPeNavGnssKFIf((uint64_t *)(a1 + 5848), (uint64_t *)off_270EC46D8, a2, a3);
  *(void *)a1 = &unk_270EC4328;
  *(void *)(a1 + 21560) = &unk_270EC46A8;
  *(void *)(a1 + 5848) = &unk_270EC4500;
  *(void *)(a1 + 5872) = a4;
  *(unsigned char *)(a1 + 5880) = 0;
  BlueFin::GlPeNavGnssResidMon::GlPeNavGnssResidMon(a1 + 5888, a2);
  *(void *)(a1 + 12456) = a9;
  *(_OWORD *)(a1 + 12464) = 0u;
  *(_OWORD *)(a1 + 12480) = 0u;
  *(void *)(a1 + 12496) = 0;
  *(void *)(a1 + 12504) = 0x4103880000000000;
  *(void *)(a1 + 12512) = 0;
  *(_DWORD *)(a1 + 12520) = 0;
  *(_OWORD *)(a1 + 12528) = xmmword_263BBC4E0;
  *(unsigned char *)(a1 + 12544) = 0;
  *(void *)(a1 + 12552) = a2;
  *(void *)(a1 + 12560) = a3;
  *(void *)(a1 + 12568) = a8;
  BlueFin::GlPeNavGnssResidMon::GlPeNavGnssResidMon(a1 + 12576, a2);
  *(void *)(a1 + 19144) = a4;
  *(void *)(a1 + 19152) = a1 + 656;
  *(_OWORD *)(a1 + 19160) = 0u;
  *(_OWORD *)(a1 + 19176) = 0u;
  *(_DWORD *)(a1 + 19192) = 0;
  *(void *)(a1 + 19200) = 0;
  *(_DWORD *)(a1 + 19208) = 0;
  *(void *)(a1 + 19224) = 0;
  *(void *)(a1 + 19240) = 0;
  *(void *)(a1 + 19232) = 0;
  *(void *)(a1 + 19248) = -1;
  *(void *)(a1 + 19256) = 0;
  *(void *)(a1 + 19272) = 0;
  *(void *)(a1 + 19264) = 0;
  *(_DWORD *)(v17 + 64) = 0;
  *(_OWORD *)(v17 + 72) = 0u;
  *(_OWORD *)(v17 + 88) = 0u;
  *(_OWORD *)(v17 + 104) = 0u;
  *(_OWORD *)(v17 + 120) = 0u;
  *(_OWORD *)(v17 + 136) = 0u;
  *(_OWORD *)(v17 + 152) = 0u;
  *(_OWORD *)(v17 + 168) = 0u;
  *(_OWORD *)(v17 + 184) = 0u;
  *(_OWORD *)(v17 + 200) = 0u;
  *(_OWORD *)(v17 + 216) = 0u;
  *(_OWORD *)(v17 + 232) = 0u;
  *(_OWORD *)(v17 + 248) = 0u;
  *(_OWORD *)(a1 + 19480) = 0u;
  *(_OWORD *)(a1 + 19496) = 0u;
  *(_OWORD *)(a1 + 19512) = 0u;
  *(void *)(a1 + 19528) = a10;
  *(void *)(a1 + 19536) = a7;
  *(void *)(a1 + 19544) = a8;
  *(_WORD *)uint64_t v17 = 0;
  *(_DWORD *)(v17 + 4) = -7200001;
  bzero((void *)(a1 + 19552), 0x690uLL);
  *(_DWORD *)(v17 + 2016) = 63;
  *(void *)(a1 + 21236) = 0;
  *(void *)(a1 + 2124BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *(_OWORD *)(a1 + 21284) = 0u;
  *(_OWORD *)(a1 + 21300) = 0u;
  *(_OWORD *)(a1 + 21316) = 0u;
  *(_OWORD *)(a1 + 21372) = 0u;
  *(_OWORD *)(a1 + 21388) = 0u;
  *(_OWORD *)(a1 + 21404) = 0u;
  *(_OWORD *)(a1 + 21416) = 0u;
  *(_OWORD *)(a1 + 21268) = 0u;
  *(void *)(a1 + 21256) = a1 + 21268;
  *(unsigned char *)(v17 + 2048) = 19;
  *(_OWORD *)(a1 + 21356) = 0u;
  *(void *)(a1 + 21344) = a1 + 21356;
  *(unsigned char *)(v17 + 2136) = 19;
  *(_OWORD *)(a1 + 21328) = 0u;
  *(void *)(a1 + 21432) = a1 + 21444;
  *(unsigned char *)(v17 + 2224) = 19;
  *(_OWORD *)(a1 + 21504) = 0u;
  *(_OWORD *)(a1 + 21492) = 0u;
  *(_OWORD *)(a1 + 21476) = 0u;
  *(_OWORD *)(a1 + 21460) = 0u;
  *(_OWORD *)(a1 + 21444) = 0u;
  *(_WORD *)(v17 + 2304) = 1;
  *(void *)(a1 + 21528) = 0;
  *(_DWORD *)(v17 + 2320) = 0;
  *(_DWORD *)(v17 + 2336) = 0;
  return a1;
}

uint64_t BlueFin::GlPeShrimpKf::GlPeShrimpKf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v8 - 24)) = a2[1];
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = xmmword_263BBCD00;
  *(unsigned char *)(a1 + 32) = 3;
  *(void *)(a1 + 40) = 0x4054D33340000000;
  *(unsigned char *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 116) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 200) = 0x3FF0000000000000;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0x3FF0000000000000;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 272) = 0x1500000000;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(void *)(a1 + 264) = a1 + 280;
  *(_WORD *)(a1 + 456) = 0;
  *(void *)(a1 + 520) = 0;
  *(void *)(a1 + 528) = 0;
  *(_WORD *)(a1 + 536) = 0;
  *(_DWORD *)(a1 + 51BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_DWORD *)(a1 + 652) = 0;
  *(_OWORD *)(a1 + 634) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  uint64_t v9 = a1 + 680;
  *(_OWORD *)(a1 + 672) = xmmword_263BBC540;
  *(void *)(a1 + 656) = a1 + 688;
  *(void *)(a1 + 664) = a1 + 4216;
  uint64_t v10 = 8;
  *(void *)(a1 + 4216) = 0;
  do
  {
    *(void *)(*(void *)(a1 + 664) + v10) = v9;
    v9 += 168;
    v10 += 8;
  }
  while (v10 != 176);
  *(_OWORD *)(a1 + 4424) = 0u;
  *(_OWORD *)(a1 + 4440) = 0u;
  *(_OWORD *)(a1 + 4456) = 0u;
  *(_OWORD *)(a1 + 4472) = 0u;
  *(_OWORD *)(a1 + 4488) = 0u;
  *(_OWORD *)(a1 + 4504) = 0u;
  *(_OWORD *)(a1 + 4520) = 0u;
  *(_OWORD *)(a1 + 4536) = 0u;
  *(_OWORD *)(a1 + 4552) = 0u;
  *(_OWORD *)(a1 + 4568) = 0u;
  *(_OWORD *)(a1 + 4584) = 0u;
  *(_OWORD *)(a1 + 4600) = 0u;
  *(_OWORD *)(a1 + 4616) = 0u;
  *(_OWORD *)(a1 + 4632) = 0u;
  *(_OWORD *)(a1 + 4408) = 0u;
  *(void *)(a1 + 4392) = a1 + 4408;
  *(void *)(a1 + 4400) = 0x1500000000;
  *(void *)(a1 + 4664) = 0;
  *(_OWORD *)(a1 + 4672) = 0u;
  *(void *)(a1 + 4648) = 0;
  *(void *)(a1 + 4688) = 0x3FF0000000000000;
  *(void *)(a1 + 4712) = 0;
  *(_OWORD *)(a1 + 4696) = 0u;
  *(void *)(a1 + 4720) = 0x3FF0000000000000;
  *(void *)(a1 + 4744) = 0;
  *(_OWORD *)(a1 + 4728) = 0u;
  *(void *)(a1 + 4752) = 0x3FF0000000000000;
  *(void *)(a1 + 4776) = 0;
  *(_OWORD *)(a1 + 4760) = 0u;
  *(void *)(a1 + 4784) = 0x3FF0000000000000;
  *(void *)(a1 + 4808) = 0;
  *(_OWORD *)(a1 + 4792) = 0u;
  *(void *)(a1 + 4816) = 0x3FF0000000000000;
  *(void *)(a1 + 4840) = 0;
  *(_OWORD *)(a1 + 4824) = 0u;
  *(_DWORD *)(a1 + 4856) = 0;
  *(_OWORD *)(a1 + 4872) = 0u;
  *(void *)(a1 + 4888) = 0;
  *(void *)(a1 + 5072) = 0;
  *(_OWORD *)(a1 + 5056) = 0u;
  *(_OWORD *)(a1 + 4920) = 0u;
  *(_OWORD *)(a1 + 4936) = 0u;
  *(_OWORD *)(a1 + 4952) = 0u;
  *(_OWORD *)(a1 + 4968) = 0u;
  *(_OWORD *)(a1 + 4984) = 0u;
  *(_OWORD *)(a1 + 5000) = 0u;
  *(void *)(a1 + 5080) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 5088) = 0u;
  *(_OWORD *)(a1 + 5104) = 0u;
  *(_OWORD *)(a1 + 5120) = 0u;
  *(void *)(a1 + 5136) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 5144) = 0u;
  *(_OWORD *)(a1 + 5160) = 0u;
  *(_OWORD *)(a1 + 5176) = 0u;
  *(_OWORD *)(a1 + 5192) = 0u;
  *(void *)(a1 + 5208) = 0;
  *(void *)(a1 + 5232) = a4;
  *(void *)(a1 + 5240) = a3;
  *(void *)(a1 + 5248) = a6;
  *(void *)(a1 + 5256) = a5;
  *(void *)(a1 + 5264) = a6 + 144;
  *(void *)(a1 + 5272) = a1 + 5288;
  *(void *)(a1 + 5280) = 0x300000000;
  *(_OWORD *)(a1 + 5288) = 0u;
  *(_OWORD *)(a1 + 5304) = 0u;
  *(void *)(a1 + 5376) = 0;
  *(_OWORD *)(a1 + 5360) = 0u;
  *(_DWORD *)(a1 + 5576) = 0;
  *(_OWORD *)(a1 + 5584) = xmmword_263BBCD10;
  *(void *)(a1 + 5600) = 0x40048F5C28F5C28FLL;
  *(_WORD *)(a1 + 5392) = 0;
  *(unsigned char *)(a1 + 5394) = 0;
  *(void *)(a1 + 5560) = 0;
  *(_DWORD *)(a1 + 5568) = 0;
  *(unsigned char *)(a1 + 5572) = 0;
  *(_DWORD *)(a1 + 5792) = 1;
  *(void *)(a1 + 5800) = 0x403735C28F5C28F6;
  *(_OWORD *)(a1 + 5808) = xmmword_263BBCD20;
  *(_WORD *)(a1 + 5608) = 0;
  *(unsigned char *)(a1 + 5610) = 0;
  *(void *)(a1 + 5776) = 0;
  *(_DWORD *)(a1 + 5784) = 0;
  *(unsigned char *)(a1 + 5788) = 0;
  *(void *)(a1 + 5840) = a7;
  BlueFin::GlPeShrimpKf::ResetINS((uint64_t *)a1, 0);
  return a1;
}

uint64_t BlueFin::GlPeShrimpKf::ResetINS(uint64_t *a1, int a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (BlueFin::GlUtils::m_ucEnabled) {
    BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
  }
  GlCustomLog(15, "GlPeShrimpKf::Reset @ lms %d, type %d\n", *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 200), a2);
  int v4 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 200);
  BlueFin::GlPeNavGnssState::GlPeNavGnssState((BlueFin::GlPeNavGnssState *)&v14);
  BlueFin::GlPeNavGnssState::operator=((uint64_t)a1 + *(void *)(*a1 - 24), (uint64_t)&v14);
  uint64_t v5 = *a1;
  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 200) = v4;
  *(_DWORD *)((char *)a1 + *(void *)(v5 - 24) + 196) = a2;
  *((_DWORD *)a1 + 2) = 0;
  long long v16 = 0u;
  memset(v17, 0, 28);
  long long v14 = 0u;
  long long v15 = 0u;
  memset(&v17[32], 0, 64);
  uint64_t v18 = 0x3FF0000000000000;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0x3FF0000000000000;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  v26[1] = 0x1500000000;
  memset(v27, 0, sizeof(v27));
  v26[0] = v27;
  __int16 v28 = 0;
  a1[15] = 0;
  *(_OWORD *)(a1 + 13) = 0u;
  *(_OWORD *)(a1 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  *(_OWORD *)(a1 + 7) = 0u;
  long long v6 = *(_OWORD *)&v17[24];
  a1[18] = *(void *)&v17[40];
  *((_OWORD *)a1 + 8) = v6;
  *(_OWORD *)(a1 + 23) = 0u;
  *(_OWORD *)(a1 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
  *(_OWORD *)(a1 + 19) = 0u;
  a1[25] = 0x3FF0000000000000;
  a1[26] = 0;
  a1[27] = 0;
  a1[28] = 0;
  a1[29] = 0x3FF0000000000000;
  a1[30] = 0;
  a1[31] = 0;
  a1[32] = 0;
  BlueFin::SKFVector::Clone((BlueFin::SKFVector *)(a1 + 33), (const BlueFin::SKFVector *)v26);
  *((_WORD *)a1 + 228) = v28;
  long long v14 = 0u;
  long long v15 = 0u;
  memset(&v17[16], 0, 42);
  long long v7 = *(_OWORD *)v17;
  *((_OWORD *)a1 + 36) = v16;
  *((_OWORD *)a1 + 37) = v7;
  long long v8 = *(_OWORD *)&v17[32];
  *((_OWORD *)a1 + 38) = *(_OWORD *)&v17[16];
  *((_OWORD *)a1 + 39) = v8;
  *(_OWORD *)((char *)a1 + 636) = *(_OWORD *)&v17[44];
  long long v9 = v15;
  *((_OWORD *)a1 + 34) = v14;
  *((_OWORD *)a1 + 35) = v9;
  *((_DWORD *)a1 + 163) = 0;
  BlueFin::BigMatrix::Null((BlueFin::BigMatrix *)(a1 + 82), *((_DWORD *)a1 + 168), *((_DWORD *)a1 + 169));
  BlueFin::BigMatrix::Null((BlueFin::BigMatrix *)(a1 + 82), 21, 21);
  uint64_t v10 = (void *)a1[83];
  *(void *)(v10[1] + 8) = 0x4059000000000000;
  *(void *)(v10[2] + 16) = 0x4059000000000000;
  *(void *)(v10[3] + 24) = 0x4059000000000000;
  *(void *)(v10[4] + 32) = 0x3FF0000000000000;
  *(void *)(v10[5] + 40) = 0x3FF0000000000000;
  *(void *)(v10[6] + 48) = 0x3FF0000000000000;
  *(void *)(v10[7] + 56) = 0x4059000000000000;
  *(void *)(v10[8] + 64) = 0x3FF0000000000000;
  *(void *)(v10[9] + 72) = 0x3F9F315CE64F7180;
  *(void *)(v10[10] + 80) = 0x3F9F315CE64F7180;
  *(void *)(v10[11] + 88) = 0x3F9F315CE64F7180;
  *(void *)(v10[12] + 96) = 0x3F847AE147AE147CLL;
  *(void *)(v10[13] + 104) = 0x3F847AE147AE147CLL;
  *(void *)(v10[14] + 112) = 0x3F847AE147AE147CLL;
  *(void *)(v10[15] + 120) = 0x3F9F315CE64F7180;
  *(void *)(v10[16] + 128) = 0x3F9F315CE64F7180;
  *(void *)(v10[17] + 136) = 0x3EC98D9BF9B35BC1;
  *(void *)(v10[18] + 144) = 0x3EC98D9BF9B35BC1;
  *(void *)(v10[19] + 152) = 0x3EC98D9BF9B35BC1;
  *(void *)(v10[20] + 160) = 0x3FA47AE147AE147CLL;
  *(void *)(v10[21] + 168) = 0x4030000000000000;
  if (BlueFin::GlUtils::m_ucEnabled) {
    BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
  }
  uint64_t result = BlueFin::CheckCovMat((BlueFin *)(a1 + 82), (const BlueFin::BigMatrix *)0x6F);
  if ((result & 1) == 0)
  {
    DeviceFaultNotify("glpe_shrimpkf.cpp", 271, "ResetINS", (char)"CheckCovMat(m_P)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_shrimpkf.cpp", 271, "CheckCovMat(m_P)");
  }
  *((_DWORD *)a1 + 1100) = 21;
  uint64_t v12 = a1[549];
  *(void *)(v12 + 168) = 0;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 8) = 0u;
  a1[585] = 0;
  *(_OWORD *)(a1 + 58BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
  *(_OWORD *)(a1 + 583) = 0u;
  *(_OWORD *)(a1 + 577) = 0u;
  *(_OWORD *)(a1 + 579) = 0u;
  *(_OWORD *)(a1 + 573) = 0u;
  *(_OWORD *)(a1 + 575) = 0u;
  a1[586] = 0x3FF0000000000000;
  a1[587] = 0;
  a1[589] = 0;
  a1[588] = 0;
  a1[590] = 0x3FF0000000000000;
  a1[591] = 0;
  a1[593] = 0;
  a1[592] = 0;
  a1[594] = 0x3FF0000000000000;
  a1[597] = 0;
  a1[595] = 0;
  a1[596] = 0;
  a1[598] = 0x3FF0000000000000;
  a1[601] = 0;
  a1[599] = 0;
  a1[600] = 0;
  if (a2 != 10)
  {
    a1[602] = 0x3FF0000000000000;
    a1[603] = 0;
    a1[605] = 0;
    a1[604] = 0;
    *((_DWORD *)a1 + 1212) = 0;
  }
  *((_WORD *)a1 + 2426) = 0;
  *(_OWORD *)(a1 + 607) = 0uLL;
  *(_OWORD *)(a1 + 609) = 0uLL;
  *(_OWORD *)(a1 + 61BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0uLL;
  *((unsigned char *)a1 + 4904) = 0;
  *((_DWORD *)a1 + 1258) = 0;
  a1[630] = 0;
  *((_DWORD *)a1 + 1262) = 0;
  a1[632] = 0;
  a1[634] = 0;
  a1[633] = 0;
  *((_OWORD *)a1 + 307) = 0uLL;
  *((_OWORD *)a1 + 308) = 0uLL;
  *((_OWORD *)a1 + 309) = 0uLL;
  *((_OWORD *)a1 + 310) = 0uLL;
  *((_OWORD *)a1 + 31BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0uLL;
  *((_OWORD *)a1 + 312) = 0uLL;
  *(_OWORD *)((char *)a1 + 5004) = 0uLL;
  a1[635] = 0x3FF0000000000000;
  *((_OWORD *)a1 + 318) = 0uLL;
  *((_OWORD *)a1 + 319) = 0uLL;
  *((_OWORD *)a1 + 320) = 0uLL;
  a1[642] = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 643) = 0uLL;
  *(_OWORD *)(a1 + 645) = 0uLL;
  *(_OWORD *)(a1 + 647) = 0uLL;
  *(_OWORD *)(a1 + 649) = 0uLL;
  *(_OWORD *)(a1 + 65BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0uLL;
  a1[653] = 0;
  *((_DWORD *)a1 + 1320) = 3;
  long long v13 = (void *)a1[659];
  v13[1] = 0;
  void v13[2] = 0;
  v13[3] = 0;
  *(void *)(a1[659] + 8) = 0;
  a1[666] = 0;
  *((unsigned char *)a1 + 5336) = 0;
  *((_DWORD *)a1 + 1335) = 0;
  *((unsigned char *)a1 + 5344) = 0;
  *((_DWORD *)a1 + 1330) = 0;
  *(uint64_t *)((char *)a1 + 5348) = 0;
  *(_DWORD *)((char *)a1 + 5355) = 0;
  *((_OWORD *)a1 + 335) = *(_OWORD *)(a1 + 573);
  a1[672] = a1[575];
  *((unsigned char *)a1 + 5384) = 0;
  *((_WORD *)a1 + 2696) = 0;
  *((unsigned char *)a1 + 5394) = 0;
  a1[695] = 0;
  *((_DWORD *)a1 + 1392) = 0;
  *((unsigned char *)a1 + 5572) = 0;
  *((_WORD *)a1 + 2804) = 0;
  *((unsigned char *)a1 + 5610) = 0;
  a1[722] = 0;
  *((_DWORD *)a1 + 1446) = 0;
  *((unsigned char *)a1 + 5788) = 0;
  a1[65] = 0;
  a1[66] = 0;
  *((_WORD *)a1 + 268) = 0;
  *((_DWORD *)a1 + 1458) = 0;
  *((_DWORD *)a1 + 1259) = 0;
  *((_OWORD *)a1 + 29) = 0uLL;
  *((_OWORD *)a1 + 30) = 0uLL;
  *((_OWORD *)a1 + 3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0uLL;
  *(_DWORD *)((char *)a1 + 51BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *((unsigned char *)a1 + 5828) = 0;
  *((_DWORD *)a1 + 1456) = 0;
  return result;
}

BlueFin::SKFVector *BlueFin::GlPeHula::GetHulaMeas(uint64_t a1, int *a2, uint64_t a3)
{
  long long v6 = (long long *)(a1 + 3016);
  unsigned int v7 = a2[14];
  double v8 = *((double *)a2 + 11);
  unsigned int v9 = a2[24];
  long long v11 = *(unsigned char **)(a3 + 8);
  uint64_t v10 = *(unsigned char **)(a3 + 16);
  if (!*(unsigned char *)(a1 + 3008)) {
    goto LABEL_14;
  }
  double v12 = *(double *)(a1 + 3040);
  double v13 = *(double *)(a1 + 3048);
  if (v12 * v12 + v13 * v13 >= 160000.0) {
    goto LABEL_14;
  }
  if (v12 >= 0.0 && v13 >= 0.0)
  {
    double v14 = *(double *)(a1 + 3016);
    BOOL v15 = v14 == 0.0;
    double v16 = *(double *)(a1 + 3024);
    if (v16 != 0.0) {
      BOOL v15 = 0;
    }
    if (fabs(v14) <= 90.0 && !v15)
    {
      int v17 = *v10;
      if (fabs(v16) > 180.0 || v17 != 0) {
        goto LABEL_31;
      }
LABEL_14:
      int v19 = *a2;
      if ((~*a2 & 0xC0) == 0 && *(int *)(a1 + 3072) >= 2)
      {
        *uint64_t v10 = 0;
        goto LABEL_49;
      }
      if ((v19 & 0x44) == 0x40)
      {
        unsigned int v20 = *(_DWORD *)(a1 + 3120);
        if (v20 < 0x1F5)
        {
          unsigned int v23 = 0;
        }
        else
        {
          unsigned int v21 = v7 - v20;
          BOOL v22 = v20 >= v7;
          unsigned int v23 = v20 - v7;
          if (!v22) {
            unsigned int v23 = v21;
          }
          int v24 = *(_DWORD *)(a1 + 4216);
          if (v24 != 1 && v24 != 6)
          {
            unsigned int v25 = (v19 & 0x100) != 0 ? 2011 : 12000;
            if ((v19 & 0x4000) == 0 && v23 >= v25) {
              goto LABEL_48;
            }
          }
        }
        double v26 = *(double *)(a1 + 3040);
        double v27 = *(double *)(a1 + 3048);
        long long v84 = *(_OWORD *)(a1 + 3056);
        if ((~(_WORD)v19 & 0x401) != 0) {
          double v8 = 0.0;
        }
        if (v23 >= 0x3E8) {
          unsigned int v23 = 1000;
        }
        double v28 = v8 * (double)v23 / 1000.0;
        double v29 = v26 + v28;
        double v30 = v27 + v28;
        if ((v19 & 8) != 0) {
          goto LABEL_45;
        }
        if (v29 > *(double *)(a1 + 3080) * 3.0)
        {
LABEL_48:
          *(unsigned char *)(a1 + 3008) = 0;
          *(int64x2_t *)(a1 + 3040) = vdupq_n_s64(0x412E848000000000uLL);
          unsigned char *v11 = 0;
          *uint64_t v10 = 1;
          goto LABEL_49;
        }
        if (v9 > 0xA || *(void *)(a1 + 3072) - 4 >= 0xFFFFFFFE)
        {
LABEL_45:
          *(double *)(a1 + 3040) = v29;
          *(double *)(a1 + 3048) = v30;
        }
        else
        {
          uint64_t v79 = *(void *)(a1 + 3072);
          uint64_t v31 = *(void *)(a1 + 3032);
          long long v86 = *v6;
          uint64_t v87 = v31;
          BlueFin::lla2ned((double *)a2 + 13, (double *)&v86, 0, &v88);
          float v32 = sqrt(v89 * v89 + v88 * v88);
          *(double *)(a1 + 3040) = v29;
          *(double *)(a1 + 3048) = v30;
          *(_OWORD *)(a1 + 3056) = v84;
          *(void *)(a1 + 3072) = v79;
          if (v32 > 200.0) {
            goto LABEL_48;
          }
        }
        *uint64_t v10 = 0;
        int v19 = *a2;
      }
      else
      {
        *uint64_t v10 = 0;
        *(unsigned char *)(a1 + 3008) = 0;
      }
      unsigned char *v11 = 1;
      if ((v19 & 4) == 0) {
        goto LABEL_49;
      }
      goto LABEL_48;
    }
  }
  int v17 = *v10;
LABEL_31:
  if (!v17) {
    GlCustomLog(14, "WARNING: INVALID External location input is REJECTED: lla (%.6lf,%.6lf,%.1lf) unc (%.1lf,%.1lf)\n", *(double *)(a1 + 3016), *(double *)(a1 + 3024), *(double *)(a1 + 3032), *(double *)(a1 + 3040), v13);
  }
  *(unsigned char *)(a1 + 3008) = 0;
  *(int64x2_t *)(a1 + 3040) = vdupq_n_s64(0x412E848000000000uLL);
  *uint64_t v10 = 1;
  unsigned char *v11 = 0;
LABEL_49:
  int v33 = a2[14];
  unsigned int v34 = *a2;
  double v78 = *((double *)a2 + 17);
  double v80 = *((double *)a2 + 16);
  BlueFin::SKFVectorDim<100>::SKFVectorDim((BlueFin::SKFVector *)&v88, (const BlueFin::SKFVector *)(a1 + 1296));
  uint64_t result = BlueFin::SKFVectorDim<100>::SKFVectorDim((BlueFin::SKFVector *)&v86, (const BlueFin::SKFVector *)(a1 + 2120));
  uint64_t v36 = LODWORD(v89);
  if (LODWORD(v89) != DWORD2(v86))
  {
    DeviceFaultNotify("glpe_hula.cpp", 3529, "HulaHdgMeasQA", (char)"otInputHdgDeg.GetLen() == otInputHdgRmseDeg.GetLen()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_hula.cpp", 3529, "otInputHdgDeg.GetLen() == otInputHdgRmseDeg.GetLen()");
  }
  *(unsigned char *)(a1 + 2985) = 0;
  *(_DWORD *)(a1 + 2128) = 0;
  *(_DWORD *)(a1 + 1304) = 0;
  if ((v34 & 1) != 0 && v36 && v33 - *(_DWORD *)(a1 + 2960) <= *(_DWORD *)(a1 + 5136))
  {
    *(void *)&long long v84 = v85;
    *((void *)&v84 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0x6400000000;
    bzero(v85, 0x328uLL);
    long long v81 = v83;
    uint64_t v82 = 0x6400000000;
    bzero(v83, 0x328uLL);
    if ((int)v36 >= 1)
    {
      uint64_t v37 = v36 + 1;
      uint64_t v38 = 1;
      do
      {
        double v39 = *(double *)(v86 + 8 * v38);
        if (v39 >= 0.0)
        {
          double v40 = *(double *)(*(void *)&v88 + 8 * v38) - floor(*(double *)(*(void *)&v88 + 8 * v38) / 360.0) * 360.0;
          if ((v34 & 0x800) == 0 || ((v39 <= 30.0) & (v34 >> 5)) != 0) {
            goto LABEL_66;
          }
          for (double i = v40 * 0.0174532925 - v80; i > 3.14159265; double i = i + -6.28318531)
            ;
          while (i <= -3.14159265)
            double i = i + 6.28318531;
          double v42 = v39 * v39 + v78 * 3282.80635;
          double v43 = v42 * 16.0;
          double v44 = i * 57.2957795 * (i * 57.2957795);
          BOOL v45 = v42 <= 9.0;
          double v46 = 144.0;
          if (!v45) {
            double v46 = v43;
          }
          if (v44 <= v46)
          {
LABEL_66:
            BlueFin::SKFVector::AddLen((uint64_t)&v84);
            *(double *)(v84 + 8 * SDWORD2(v84)) = v40;
            uint64_t v47 = *(void *)(v86 + 8 * v38);
            BlueFin::SKFVector::AddLen((uint64_t)&v81);
            *(void *)&v81[8 * (int)v82] = v47;
          }
        }
        ++v38;
      }
      while (v38 != v37);
    }
    uint64_t result = (BlueFin::SKFVector *)BlueFin::GlPeHula::HulaHdgCombine((BlueFin::GlPeHula *)a1, (const BlueFin::SKFVector *)&v84, (const BlueFin::SKFVector *)&v81);
    *(unsigned char *)(a1 + 2985) = (_BYTE)result;
  }
  int v48 = a2[14];
  double v49 = *((double *)a2 + 1);
  double v50 = *((double *)a2 + 10);
  int v51 = *a2;
  double v52 = *((double *)a2 + 4);
  float v53 = *((float *)a2 + 10);
  *(unsigned char *)(a1 + 116BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  double v54 = *(double *)(a1 + 1120);
  if (v54 >= 0.0)
  {
    if ((v48 - *(_DWORD *)(a1 + 1136)) >= 0x2BF21)
    {
      *(void *)(a1 + 1120) = 0xBFF0000000000000;
      *(unsigned char *)(a1 + 1162) = 0;
      int v55 = (unsigned char *)(a1 + 1163);
LABEL_99:
      *int v55 = 0;
      goto LABEL_100;
    }
    if ((v51 & 4) != 0) {
      goto LABEL_100;
    }
    if ((v51 & 0x2000) != 0)
    {
      double v58 = v53 + v53;
      if (v54 >= v58 || (v51 & 8) != 0) {
        double v58 = *(double *)(a1 + 1120);
      }
      if ((v51 & 0x8000) != 0) {
        double v58 = *(double *)(a1 + 1120);
      }
      if (v53 < 25.0) {
        float v53 = 25.0;
      }
      double v66 = (float)(v53 * v53) + v58 * v58;
      double v56 = *(double *)(a1 + 1112);
      double v67 = v56 - v52;
      if (v67 * v67 < v66 * 9.0) {
        goto LABEL_96;
      }
      if ((v51 & 0x10) != 0 || v67 <= 0.0 || v67 >= 1000.0) {
        goto LABEL_100;
      }
      uint64_t v57 = (unsigned __int16)v51 & 0x8000;
    }
    else
    {
      double v56 = *(double *)(a1 + 1112);
      uint64_t v57 = (unsigned __int16)v51 & 0x8000;
      double v58 = *(double *)(a1 + 1120);
    }
    double v59 = v56 - v50;
    double v60 = 100.0;
    if (v58 >= 100.0 || (v51 & 8) != 0) {
      double v60 = v58;
    }
    if (!v57) {
      double v58 = v60;
    }
    double v62 = v49 * 1.9 * (v49 * 1.9) + v58 * v58;
    int v63 = *(_DWORD *)(a1 + 1176) - 1;
    double v64 = 0.0;
    if (v63 <= 2) {
      double v64 = dbl_263BBC198[v63];
    }
    if (v59 * v59 >= v62 * v64) {
      goto LABEL_100;
    }
LABEL_96:
    *(unsigned char *)(a1 + 116BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 1;
    if (a2[24])
    {
      uint64_t v68 = *(void *)(a3 + 24);
      *(void *)uint64_t v68 = *(void *)(a1 + 1112);
      *(double *)(v68 + 8) = v54;
      *(_DWORD *)(v68 + 44) = 3;
      *(_DWORD *)(v68 + 16) = *(_DWORD *)(a1 + 1136);
      *(unsigned char *)(v68 + 48) = 1;
      *(unsigned char *)(a1 + 1162) = 1;
    }
    int v55 = *(unsigned char **)a3;
    goto LABEL_99;
  }
LABEL_100:
  double v69 = *((double *)a2 + 11);
  double v70 = *((double *)a2 + 18);
  *(unsigned char *)(a1 + 1225) = 0;
  if (v51)
  {
    double v71 = *(double *)(a1 + 1192);
    if (v71 > 0.00001 && (v48 - *(_DWORD *)(a1 + 1200)) <= *(_DWORD *)(a1 + 5136))
    {
      if ((v51 & 0x800) == 0) {
        goto LABEL_109;
      }
      double v72 = v70 + v71 * v71;
      double v73 = (*(double *)(a1 + 1184) - v69) * (*(double *)(a1 + 1184) - v69);
      double v74 = v72 * 9.0;
      if (v73 <= v72 * 9.0) {
        goto LABEL_109;
      }
      BOOL v75 = v72 < 0.25;
      double v76 = 2.25;
      if (!v75) {
        double v76 = v74;
      }
      if ((v51 & 0x1000) != 0 || v73 <= v76) {
LABEL_109:
      }
        *(unsigned char *)(a1 + 1225) = 1;
    }
  }
  *(unsigned char *)(a1 + 128BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  if (v51)
  {
    if (*(double *)(a1 + 1248) >= 0.0 && v48 - *(_DWORD *)(a1 + 1256) <= *(_DWORD *)(a1 + 5136)) {
      *(unsigned char *)(a1 + 128BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 1;
    }
    *((unsigned char *)v6 + 116BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
    if (*(float *)(a1 + 4148) >= 0.0 && v48 - *(_DWORD *)(a1 + 4152) <= *(_DWORD *)(a1 + 5136))
    {
      float v77 = *(float *)(a1 + 4144);
      if (v77 >= -120.0 && v77 <= 120.0) {
        *((unsigned char *)v6 + 116BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 1;
      }
    }
  }
  else
  {
    *((unsigned char *)v6 + 116BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  }
  return result;
}

BlueFin::SKFVector *BlueFin::SKFVectorDim<100>::SKFVectorDim(BlueFin::SKFVector *a1, const BlueFin::SKFVector *a2)
{
  int v2 = *((_DWORD *)a2 + 2);
  *(void *)a1 = (char *)a1 + 16;
  *((_DWORD *)a1 + 2) = v2;
  *((_DWORD *)a1 + 3) = 100;
  if (*((int *)a2 + 2) >= 101)
  {
    DeviceFaultNotify("glpe_matrix.h", 510, "SKFVectorDim", (char)"LEN >= rotSrc.GetLen()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.h", 510, "LEN >= rotSrc.GetLen()");
  }
  BlueFin::SKFVector::Clone(a1, a2);
  return a1;
}

{
  int v2;

  int v2 = *((_DWORD *)a2 + 2);
  *(void *)a1 = (char *)a1 + 16;
  *((_DWORD *)a1 + 2) = v2;
  *((_DWORD *)a1 + 3) = 100;
  if (*((int *)a2 + 2) >= 101)
  {
    DeviceFaultNotify("glpe_matrix.h", 505, "SKFVectorDim", (char)"LEN >= rotSrc.GetLen()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.h", 505, "LEN >= rotSrc.GetLen()");
  }
  BlueFin::SKFVector::Clone(a1, a2);
  return a1;
}

void *BlueFin::SKFVector::Clone(BlueFin::SKFVector *this, const BlueFin::SKFVector *a2)
{
  if (*((_DWORD *)this + 3) < *((_DWORD *)this + 2))
  {
    DeviceFaultNotify("glpe_matrix.cpp", 2114, "Clone", (char)"m_MaxLen >= m_Len");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.cpp", 2114, "m_MaxLen >= m_Len");
  }
  uint64_t v2 = *((int *)a2 + 2);
  *((_DWORD *)this + 2) = v2;
  int v3 = (void *)(*(void *)this + 8);
  int v4 = (const void *)(*(void *)a2 + 8);

  return memcpy(v3, v4, 8 * v2);
}

uint64_t BlueFin::CheckCovMat(BlueFin *this, const BlueFin::BigMatrix *a2)
{
  unsigned int v2 = *((_DWORD *)this + 4);
  if (!v2) {
    return 1;
  }
  unsigned int v3 = *((_DWORD *)this + 5);
  uint64_t v4 = *((void *)this + 1);
  unsigned int v5 = 1;
  while (1)
  {
    signed int v6 = v5++;
    if (v5 <= v3) {
      break;
    }
LABEL_8:
    if (v5 > v2) {
      return 1;
    }
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v4 + 8 * v6);
  double v9 = *(double *)(v8 + 8 * v6);
  signed int v10 = v5;
  while (1)
  {
    double v11 = *(double *)(v8 + 8 * v10);
    uint64_t v12 = *(void *)(v4 + 8 * v10);
    if (v11 * v11 > v9 * *(double *)(v12 + 8 * v10) || vabdd_f64(v11, *(double *)(v12 + 8 * v7)) > 0.000000001) {
      return 0;
    }
    if (++v10 > v3) {
      goto LABEL_8;
    }
  }
}

BOOL BlueFin::GlMeSrdAsicInitPatchLoader::Init(BlueFin::GlMeSrdAsicInitPatchLoader *this, int a2, unsigned int a3, const char *a4, int a5, int a6)
{
  if (a3 <= 7)
  {
    unsigned int v20 = "usMaxSizePerBlock >= 8";
    DeviceFaultNotify("glmesrd_asicinit_patchloader.cpp", 68, "Init", (char)"usMaxSizePerBlock >= 8");
    int v21 = 68;
    goto LABEL_9;
  }
  *((_DWORD *)this + 10) = 0;
  uint64_t v8 = (int *)((char *)this + 40);
  *((_DWORD *)this + 8) = a2;
  *((void *)this + 6) = 0;
  double v9 = (unsigned int *)((char *)this + 48);
  *((_WORD *)this + 18) = a3;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((unsigned char *)this + 72) = 0;
  *(void *)((char *)this + 84) = 0;
  *(void *)((char *)this + 76) = 0;
  *((_DWORD *)this + 104) = 0;
  *(_DWORD *)((char *)this + 419) = 0;
  *((unsigned char *)this + 423) = (_BYTE)a4;
  *((_DWORD *)this + 106) = a5;
  if (a5 != 5)
  {
    unsigned int v20 = "0";
    DeviceFaultNotify("glmesrd_asicinit_patchloader.cpp", 133, "Init", (char)"0");
    int v21 = 133;
    goto LABEL_9;
  }
  if ((a2 & 0xF000FFFE) != 0x30000012 && (a2 & 0xF000FFFE) != 0x30000014)
  {
    unsigned int v20 = "IS_ANY_MINNOW(ulAsicVersion)";
    DeviceFaultNotify("glmesrd_asicinit_patchloader.cpp", 125, "Init", (char)"IS_ANY_MINNOW(ulAsicVersion)");
    int v21 = 125;
LABEL_9:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asicinit_patchloader.cpp", v21, v20);
  }
  PlatformName = (BlueFin *)BlueFin::GlMeSrdAsicInitPatchLoader::GetPlatformName(this, a6);
  *((void *)this + 7) = PlatformName;
  BOOL PatchInfoMinnow = BlueFin::GetPatchInfoMinnow(PlatformName, a4, v8, v9, v11);
  if (PatchInfoMinnow) {
    BlueFin::GlMeSrdAsicInitPatchLoader::InitSegment(this, v12, v13, v14, v15, v16, v17);
  }
  return PatchInfoMinnow;
}

BOOL BlueFin::GlMeSrdAsicInitPatchLoader::InitSegment(BlueFin::GlMeSrdAsicInitPatchLoader *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  *((_DWORD *)this + 17) = 0;
  int v7 = *((_DWORD *)this + 106);
  if (v7 != 5)
  {
    if ((v7 - 2) >= 2)
    {
      signed int v10 = "0";
      DeviceFaultNotify("glmesrd_asicinit_patchloader.cpp", 248, "InitSegment", (char)"0");
      int v11 = 248;
LABEL_8:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asicinit_patchloader.cpp", v11, v10);
    }
    *(void *)((char *)this + 84) = 0;
    *(void *)((char *)this + 76) = 0;
LABEL_7:
    signed int v10 = "bSuccess";
    DeviceFaultNotify("glmesrd_asicinit_patchloader.cpp", 252, "InitSegment", (char)"bSuccess");
    int v11 = 252;
    goto LABEL_8;
  }
  uint64_t v8 = (_DWORD *)((char *)this + 88);
  BOOL result = BlueFin::GetPatchSegmentMinnow(*((BlueFin **)this + 7), (const char *)*((unsigned __int8 *)this + 423), *((_DWORD *)this + 16), (_DWORD *)this + 19, (unsigned int *)this + 20, (const unsigned __int8 **)this + 11, a7);
  if (!result) {
    goto LABEL_7;
  }
  if (*v8 <= 3u)
  {
    signed int v10 = "m_ulSegmentSize >= 4";
    DeviceFaultNotify("glmesrd_asicinit_patchloader.cpp", 253, "InitSegment", (char)"m_ulSegmentSize >= 4");
    int v11 = 253;
    goto LABEL_8;
  }
  return result;
}

BOOL BlueFin::GetPatchSegmentMinnow(BlueFin *this, const char *a2, unsigned int a3, _DWORD *a4, unsigned int *a5, const unsigned __int8 **a6, unsigned int *a7)
{
  int v11 = (int)a2;
  uint64_t v12 = (char *)BlueFin::aMNW_B0_ImageSegments;
  if (!BlueFin::aMNW_B0_ImageSegments)
  {
    uint64_t v12 = (char *)&BlueFin::_aMNW_B0_ImageSegments;
    BlueFin::aMNW_B0_ImageSegments = (uint64_t)&BlueFin::_aMNW_B0_ImageSegments;
  }
  unsigned int v13 = BlueFin::uiMNW_B0_NumSegments;
  BOOL result = !strncmp((const char *)this, "MNW_B0", 7uLL) && v13 + 1 > a3;
  if (result)
  {
    if (v13 <= a3)
    {
      *a4 = 393200;
      *(_DWORD *)a6 = 12;
      if (v11) {
        int v17 = &BlueFin::pROMEnableRetain;
      }
      else {
        int v17 = &BlueFin::pROMEnableNoRetain;
      }
      *(void *)a5 = v17;
    }
    else
    {
      uint64_t v16 = &v12[24 * a3];
      *a4 = *(_DWORD *)v16;
      *(void *)a5 = *((void *)v16 + 1);
      *(_DWORD *)a6 = *(_DWORD *)(BlueFin::aMNW_B0_ImageSegments + 24 * a3 + 16);
    }
  }
  else
  {
    *a4 = 0;
    *(void *)a5 = 0;
    *(_DWORD *)a6 = 0;
  }
  return result;
}

const char *BlueFin::GlMeSrdAsicInitPatchLoader::GetPlatformName(BlueFin::GlMeSrdAsicInitPatchLoader *this, int a2)
{
  int v2 = *((_DWORD *)this + 8);
  unsigned int v3 = v2 & 0xF0FFFFFE;
  BOOL result = "4775_FF";
  if ((int)(v2 & 0xF0FFFFFE) <= 821952529)
  {
    switch(v3)
    {
      case 0x3000000Eu:
        return result;
      case 0x3000000Fu:
      case 0x30000011u:
      case 0x30000013u:
        goto LABEL_21;
      case 0x30000010u:
        return "4776_A0";
      case 0x30000012u:
LABEL_6:
        unsigned int v5 = v2 & 0xF000FFFF;
        BOOL v7 = (v5 == 805306388 || v5 == 805306386) && a2 == 0;
        uint64_t v8 = "MNW_FF";
        goto LABEL_36;
      case 0x30000014u:
        unsigned int v13 = v2 & 0xF000FFFF;
        BOOL v7 = (v13 == 805306388 || v13 == 805306386) && a2 == 0;
        uint64_t v8 = "MNW_B0";
LABEL_36:
        if (v7) {
          BOOL result = "MNW_FF_HVR";
        }
        else {
          BOOL result = v8;
        }
        break;
      default:
        if (v3 == 805371918)
        {
          BOOL result = "4775_B1";
        }
        else
        {
LABEL_21:
          unsigned int v10 = v2 - 805371912;
          unsigned int v11 = v2 - 805502984;
          if ((v2 - 1006829576) <= 1) {
            uint64_t v12 = "4773_A3";
          }
          else {
            uint64_t v12 = (const char *)&str_19_4;
          }
          if (v11 < 2) {
            uint64_t v12 = "4774_A1";
          }
          if (v10 >= 2) {
            BOOL result = v12;
          }
          else {
            BOOL result = "47531_A1";
          }
        }
        break;
    }
  }
  else
  {
    switch(v3)
    {
      case 0x30FF000Eu:
        return result;
      case 0x30FF000Fu:
      case 0x30FF0011u:
      case 0x30FF0013u:
        goto LABEL_21;
      case 0x30FF0010u:
        BOOL result = "4776_FF";
        break;
      case 0x30FF0012u:
      case 0x30FF0014u:
        goto LABEL_6;
      default:
        if (v3 != 821952530 && v3 != 821952532) {
          goto LABEL_21;
        }
        BOOL result = "MNW_FE";
        break;
    }
  }
  return result;
}

BOOL BlueFin::GetPatchInfoMinnow(BlueFin *this, const char *a2, int *a3, unsigned int *a4, const char **a5)
{
  BOOL v7 = (const char *)BlueFin::pcMNW_B0_patch_signature;
  if (!BlueFin::pcMNW_B0_patch_signature)
  {
    BOOL v7 = "make-minnow:://depot/client/core/rel/Olympic/OSX_20.24.559185.v8.0/proprietary/deliverables/esw4_dev:MNW_B0@607776_MNW_B0";
    BlueFin::pcMNW_B0_patch_signature = (uint64_t)"make-minnow:://depot/client/core/rel/Olympic/OSX_20.24.559185.v8.0/prop"
                                                 "rietary/deliverables/esw4_dev:MNW_B0@607776_MNW_B0";
  }
  BOOL v8 = strncmp((const char *)this, "MNW_B0", 7uLL) == 0;
  BOOL result = v8;
  if (v8) {
    int v10 = BlueFin::uiMNW_B0_NumSegments + 1;
  }
  else {
    int v10 = 0;
  }
  if (v8) {
    unsigned int v11 = v7;
  }
  else {
    unsigned int v11 = 0;
  }
  *a3 = v10;
  *(void *)a4 = v11;
  return result;
}

void BlueFin::GlMeSrdCtrlSm::SetBlankingConfig(BlueFin::GlMeSrdCtrlSm *this)
{
  uint64_t v2 = *((void *)this + 15);
  if (!v2) {
    uint64_t v2 = *((void *)this + 14);
  }
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 80))(v2);
  v32[0] = 0;
  v32[1] = 0;
  char v33 = 0;
  __int16 v34 = 1;
  uint64_t v35 = v3;
  int v36 = 0;
  __int16 v37 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 16))(v3, 1);
  int v28 = 0;
  uint64_t v27 = 0;
  GlCustomLog(14, "SetBlankingConfig\n");
  if (!(*(unsigned int (**)(void))(**((void **)this + 17) + 264))(*((void *)this + 17)))
  {
    int v26 = 1782;
    DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 1782, "SetBlankingConfig", (char)"0");
    goto LABEL_19;
  }
  uint64_t v4 = *((void *)this + 17);
  int v5 = *(unsigned __int16 *)(v4 + 380);
  int v6 = *(unsigned __int16 *)(v4 + 382);
  if (!*(_WORD *)(v4 + 382)) {
    int v6 = 6;
  }
  if (!*(_WORD *)(v4 + 380)) {
    int v5 = 40;
  }
  int v7 = v5 | (v6 << 16);
  int v8 = *(_DWORD *)(v4 + 376);
  if (!v8) {
    int v8 = 7500;
  }
  int v30 = v7;
  int v31 = v8;
  GlCustomLog(14, "BlankingThresholdConfig: PwrThres %u\n", v8);
  uint64_t v29 = 0x1E848000000001;
  double v9 = (int *)*((void *)this + 17);
  v9[375] = 2000000;
  int v10 = v9[91];
  if (v10)
  {
    if (v10 == 1)
    {
      char v11 = 0;
      goto LABEL_14;
    }
    int v26 = 1801;
    DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 1801, "SetBlankingConfig", (char)"0");
LABEL_19:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_ctrl_sm.cpp", v26, "0");
  }
  char v11 = 4;
LABEL_14:
  LOBYTE(v27) = v11;
  HIDWORD(v27) = 0;
  BlueFin::GlMeSrdCtrlSm::GetBlankingConfigs((uint64_t)this, v9[90], (uint64_t)&v27);
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 48))(v35);
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
  (*(void (**)(uint64_t, void *, uint64_t *))(*(void *)v13 + 136))(v13, v32, &v27);
  HIDWORD(v27) = 2;
  BlueFin::GlMeSrdCtrlSm::GetBlankingConfigs((uint64_t)this, *(_DWORD *)(*((void *)this + 17) + 384), (uint64_t)&v27);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 48))(v35);
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 16))(v14);
  (*(void (**)(uint64_t, void *, uint64_t *))(*(void *)v15 + 136))(v15, v32, &v27);
  HIDWORD(v27) = 1;
  BlueFin::GlMeSrdCtrlSm::GetBlankingConfigs((uint64_t)this, *(_DWORD *)(*((void *)this + 17) + 408), (uint64_t)&v27);
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 48))(v35);
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 16))(v16);
  (*(void (**)(uint64_t, void *, uint64_t *))(*(void *)v17 + 136))(v17, v32, &v27);
  HIDWORD(v27) = 3;
  BlueFin::GlMeSrdCtrlSm::GetBlankingConfigs((uint64_t)this, *(_DWORD *)(*((void *)this + 17) + 432), (uint64_t)&v27);
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 48))(v35);
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
  (*(void (**)(uint64_t, void *, uint64_t *))(*(void *)v19 + 136))(v19, v32, &v27);
  if ((*(unsigned int (**)(void))(**((void **)this + 17) + 256))(*((void *)this + 17)))
  {
    HIDWORD(v27) = 4;
    BlueFin::GlMeSrdCtrlSm::GetBlankingConfigs((uint64_t)this, *(_DWORD *)(*((void *)this + 17) + 456), (uint64_t)&v27);
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 48))(v35);
    uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 16))(v20);
    (*(void (**)(uint64_t, void *, uint64_t *))(*(void *)v21 + 136))(v21, v32, &v27);
    HIDWORD(v27) = 5;
    BlueFin::GlMeSrdCtrlSm::GetBlankingConfigs((uint64_t)this, *(_DWORD *)(*((void *)this + 17) + 480), (uint64_t)&v27);
    uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 48))(v35);
    uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 16))(v22);
    (*(void (**)(uint64_t, void *, uint64_t *))(*(void *)v23 + 136))(v23, v32, &v27);
    HIDWORD(v27) = 6;
    BlueFin::GlMeSrdCtrlSm::GetBlankingConfigs((uint64_t)this, *(_DWORD *)(*((void *)this + 17) + 504), (uint64_t)&v27);
    uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 48))(v35);
    uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 16))(v24);
    (*(void (**)(uint64_t, void *, uint64_t *))(*(void *)v25 + 136))(v25, v32, &v27);
  }
  BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v32);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v32);
}

void sub_2639A2F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

unint64_t BlueFin::GlMeSrdRpcMiscAsicInit::gll_misc_rpc_echo_response(BlueFin::GlMeSrdRpcMiscAsicInit *this, int a2, unsigned __int8 *a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 1) + 120) + 80))(*(void *)(*((void *)this + 1) + 120));
  char v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6);
  BlueFin::GlStream::GlStream((uint64_t)v29, a3, a2, v7);
  if (BlueFin::GlStream::GetU32((BlueFin::GlStream *)v29) != -87053062) {
    goto LABEL_41;
  }
  int U32 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)v29);
  int v9 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)v29);
  unsigned int v10 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)v29);
  BlueFin::GlStream::GetU32((BlueFin::GlStream *)v29);
  BlueFin::GlStream::GetU32((BlueFin::GlStream *)v29);
  BlueFin::GlStream::GetU32((BlueFin::GlStream *)v29);
  BlueFin::GlStream::GetU32((BlueFin::GlStream *)v29);
  int v11 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)v29);
  int v12 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)v29);
  int v13 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)v29);
  int v14 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)v29);
  if (((*(uint64_t (**)(void))(**(void **)(*((void *)this + 1) + 128) + 184))(*(void *)(*((void *)this + 1) + 128)) & 0xF100FFFE) != 0x31000014)
  {
    if (((*(uint64_t (**)(void))(**(void **)(*((void *)this + 1) + 128) + 184))(*(void *)(*((void *)this + 1) + 128)) & 0xF100FFFE) != 0x30000012
      && ((*(uint64_t (**)(void))(**(void **)(*((void *)this + 1) + 128) + 184))(*(void *)(*((void *)this + 1) + 128)) & 0xF100FFFE) != 0x30000014)
    {
      DeviceFaultNotify("glmesrd_asicinit.cpp", 4204, "gll_misc_rpc_echo_response", (char)"false");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asicinit.cpp", 4204, "false");
    }
    if (v10 == -1 || v9 == -1 || (U32 + 1) < 2 || !v10)
    {
      GlCustomLog(12, "AsicId: Invalid Information(%08X %08X %08X) - Wafer Sort\n");
LABEL_35:
      if ((U32 - 1) <= 0xFFFFFFFD && v10 && v9 != -1 && v10 != -1)
      {
        uint64_t v23 = *(void *)(*((void *)this + 1) + 128);
        *(unsigned char *)(v23 + 2220) = 3;
        *(_DWORD *)(v23 + 2224) = U32;
        *(_DWORD *)(v23 + 2228) = v9;
        *(_DWORD *)(v23 + 2232) = v10;
      }
      goto LABEL_40;
    }
    char v15 = 0;
    unsigned int v16 = 0;
    char v31 = 0;
    unsigned int v17 = 16;
    while (1)
    {
      unsigned int v18 = (U32 & 0x1FFFF | ((v10 & 1) << 17)) >> v15;
      if (v16 >= 3) {
        LOBYTE(v18) = v10 >> 1 >> (v15 - 18);
      }
      unsigned int v19 = v18 & 0x3F;
      if (v19 <= 9) {
        break;
      }
      if (v19 <= 0x24)
      {
        char v20 = v19 + 55;
        goto LABEL_20;
      }
      if (v19 == 37)
      {
        *((unsigned char *)v30 + v17 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 67;
        char v20 = 66;
        int v21 = -2;
        goto LABEL_21;
      }
      if (v19 == 63)
      {
LABEL_33:
        GlCustomLog(14, "AsicId: Information(%08X %08X %08X) - Wafer Sort\n", U32, v9, v10);
        GlCustomLog(14, "AsicId: LotId=%s, WaferNum=%u, WaferX=%u, WaferY=%u\n");
        goto LABEL_35;
      }
LABEL_22:
      ++v16;
      v15 += 6;
      if (v16 == 8) {
        goto LABEL_33;
      }
    }
    char v20 = v19 + 48;
LABEL_20:
    int v21 = -1;
LABEL_21:
    v17 += v21;
    *((unsigned char *)v30 + v17) = v20;
    goto LABEL_22;
  }
  if (v11 && v12 && v14 | v13)
  {
    GlCustomLog(14, "AsicId: Information(%08X %08X %08X %08X) - Final Sort\n", v11, v12, v13, v14);
    GlCustomLog(14, "AsicId: ECID hash: 0x%08X%08X\n");
  }
  else
  {
    GlCustomLog(14, "AsicId: Invalid Information(%08X %08X %08X %08X) - Final Sort\n");
  }
  if (v11 && v12 && v13 | v14)
  {
    uint64_t v22 = *(void *)(*((void *)this + 1) + 128);
    *(unsigned char *)(v22 + 2220) = 4;
    *(_DWORD *)(v22 + 2224) = v11;
    *(_DWORD *)(v22 + 2228) = v12;
    *(_DWORD *)(v22 + 2232) = v13;
    *(_DWORD *)(v22 + 2236) = v14;
  }
LABEL_40:
  int v24 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)v29);
  GlCustomLog(14, "CoreOtpData: 0x%08X\n", v24);
LABEL_41:
  __int16 v28 = 8;
  uint64_t v25 = *((void *)this + 1);
  uint64_t v26 = *(void *)(v25 + 32);
  unint64_t result = *(void *)(v25 + 8);
  *(void *)(v25 + 32) = result;
  do
  {
    v30[0] = 0;
    if (BlueFin::patch_dispatch(result, v25, (unsigned __int8 *)&v28, v30)) {
      unint64_t result = v30[0];
    }
    else {
      unint64_t result = (*(uint64_t (**)(uint64_t, __int16 *))(v25 + 32))(v25, &v28);
    }
    *(void *)(v25 + 32) = result;
  }
  while (result);
  *(void *)(v25 + 32) = v26;
  return result;
}

uint64_t (*(*(*BlueFin::GlMeSrdAsicinit::esw_wait4initasic(uint64_t a1, uint64_t a2))(uint64_t a1, unsigned __int8 *a2))(uint64_t a1, unsigned __int8 *a2))()
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v4 = v2;
  uint64_t v153 = *MEMORY[0x263EF8340];
  unsigned int v5 = *v3;
  if (v5 <= 7)
  {
    if (v5 != 2)
    {
      if (v5 != 3) {
        return BlueFin::GlMeSrdAsicinit::esw_loading;
      }
      return 0;
    }
    uint64_t v12 = *(void *)(v2 + 128);
    if (*(_DWORD *)(v12 + 8) == 1)
    {
      uint64_t v13 = (*(uint64_t (**)(void))(*(void *)v12 + 1072))(*(void *)(v2 + 128));
      uint64_t v14 = 0;
      char v15 = 0;
      do
      {
        if (*(unsigned char *)(v13 + v14))
        {
          (*(void (**)(void))(**(void **)(v4 + 128) + 88))(*(void *)(v4 + 128));
          ++v15;
        }
        v14 += 8;
      }
      while (v14 != 192);
      if (v15)
      {
        (*(void (**)(void))(**(void **)(v4 + 128) + 88))(*(void *)(v4 + 128));
        if (v15 == 2) {
          (*(void (**)(void))(**(void **)(v4 + 128) + 88))(*(void *)(v4 + 128));
        }
      }
      uint64_t v12 = *(void *)(v4 + 128);
    }
    if (*(unsigned char *)(v12 + 560))
    {
      uint64_t v16 = (*(uint64_t (**)(void))(**(void **)(v4 + 120) + 80))(*(void *)(v4 + 120));
      uint64_t v148 = 0;
      int v147 = 0;
      v149[0] = 0;
      *(_WORD *)&v149[1] = 1;
      uint64_t v150 = v16;
      int v151 = 0;
      __int16 v152 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, 1);
      uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 48))(v16);
      uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 32))(v17);
      (*(void (**)(uint64_t, unint64_t (**)(BlueFin::GlMeSrdAsicinit *, void *), uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, &v147, 9, 3221228116, 128, 128);
      BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v147);
      BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v147);
      uint64_t v12 = *(void *)(v4 + 128);
    }
    int v19 = *(_DWORD *)(v12 + 8);
    if (v19 == 5)
    {
      BlueFin::GlMeSrdRfInit4777::GlMeSrdRfInit4777((BlueFin::GlMeSrdRfInit4777 *)v106, (const BlueFin::GlMeSrdAsicConfig *)v12);
      GlCustomLog(12, "INIT_STAGE B: Programming RF type and switch to high speed clock! If no ACK comes back, check your frequency plan!\n");
      uint64_t v20 = (*(uint64_t (**)(void))(**(void **)(v4 + 120) + 80))(*(void *)(v4 + 120));
      int v147 = BlueFin::GlMeSrdAsicinit::OnReliableAck;
      uint64_t v148 = v4;
      *(_WORD *)long long v149 = 264;
      v149[2] = 0;
      uint64_t v150 = v20;
      int v151 = 0;
      __int16 v152 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 16))(v20, 1);
      *(_DWORD *)((char *)&v136 + 7) = -2140897180;
      *(void *)&long long v136 = 0x648064806480640ALL;
      LODWORD(v130[0]) = 0;
      uint64_t v21 = *(void *)(v4 + 128);
      int v22 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 184))(v21);
      if (*(unsigned char *)(v21 + 1212)) {
        int v22 = *(_DWORD *)(v21 + 1216);
      }
      *(_DWORD *)(v21 + 16) = v22;
      uint64_t v23 = *(void *)(v4 + 128);
      if (*(unsigned char *)(v23 + 1417))
      {
        DeviceFaultNotify("glmesrd_asicinit.cpp", 2205, "ProgramRfFrequencyPlanMinnow", (char)"DR LP Hybrid mode is not supported on this platform\n");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asicinit.cpp", 2205, "DR LP Hybrid mode is not supported on this platform\n");
      }
      char v24 = *(unsigned char *)(v23 + 558);
      BlueFin::GlMeSrdRfInit4777::GetESWRadioMode((uint64_t)v106, v130);
      uint64_t v25 = *(unsigned char **)(v4 + 128);
      if (v25[20] != 3 && v25[20])
      {
        unsigned __int8 v27 = 0;
        __int16 v28 = 0;
        uint64_t RfInit = 0;
      }
      else
      {
        uint64_t RfInit = BlueFin::GlMeSrdRfInit4777::GetRfInit((BlueFin::GlMeSrdRfInit4777 *)v106, 3);
        BlueFin::GlMeSrdRfInit4777::ProgramArRegs((BlueFin::GlMeSrdRfInit4777 *)v106);
        unsigned __int8 v27 = v111;
        if (v111 > 0xFF)
        {
          DeviceFaultNotify("glmesrd_asicinit.cpp", 2224, "ProgramRfFrequencyPlanMinnow", (char)"ulApbCommandLength < 256");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asicinit.cpp", 2224, "ulApbCommandLength < 256");
        }
        __int16 v28 = v110;
        *(void *)((char *)&v136 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 3496214528;
        *(_WORD *)((char *)&v136 + 9) = 0;
        uint64_t v25 = *(unsigned char **)(v4 + 128);
      }
      double v37 = (double)(*(unsigned int (**)(unsigned char *))(*(void *)v25 + 96))(v25) / 1000000.0;
      double v38 = fmod(v37, 4294967300.0);
      if (v37 <= 4294967300.0) {
        double v38 = v37;
      }
      LOBYTE(v136) = v38;
      double v39 = *(unsigned char **)(v4 + 128);
      if (v39[1644])
      {
        uint64_t v40 = v39[1968];
        if (v40 + v27 >= 0x100)
        {
          DeviceFaultNotify("glmesrd_asicinit.cpp", 2255, "ProgramRfFrequencyPlanMinnow", (char)"bIsMaxNumApbCommands");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asicinit.cpp", 2255, "bIsMaxNumApbCommands");
        }
        uint64_t v41 = v39 + 1648;
        if (v28)
        {
          unsigned __int8 v42 = 0;
          if (v40)
          {
            do
            {
              int v43 = *v41;
              if (v43 != 192)
              {
                double v44 = &v28[v27 + v42];
                *(unsigned char *)double v44 = v43;
                *((_WORD *)v44 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *((_WORD *)v41 + 1);
                *((_DWORD *)v44 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *((_DWORD *)v41 + 1);
                if (!*v41) {
                  *(unsigned char *)double v44 = -32;
                }
                ++v42;
              }
              v41 += 8;
              --v40;
            }
            while (v40);
          }
          v27 += v42;
        }
        else
        {
          unsigned __int8 v27 = v40;
          __int16 v28 = v41;
        }
      }
      if (!RfInit)
      {
        DeviceFaultNotify("glmesrd_asicinit.cpp", 2287, "ProgramRfFrequencyPlanMinnow", (char)"rf_init_ptrMNW");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asicinit.cpp", 2287, "rf_init_ptrMNW");
      }
      uint64_t v57 = (*(uint64_t (**)(uint64_t))(*(void *)v150 + 48))(v150);
      uint64_t v58 = (*(uint64_t (**)(uint64_t))(*(void *)v57 + 16))(v57);
      (*(void (**)(uint64_t, unint64_t (**)(BlueFin::GlMeSrdAsicinit *, void *), uint64_t, long long *, void, void *, void, void, char))(*(void *)v58 + 40))(v58, &v147, RfInit, &v136, v27, v28, LODWORD(v130[0]), *(unsigned __int8 *)(*(void *)(v4 + 128) + 557), v24);
      BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v147);
      BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v147);
      double v59 = *(_DWORD **)(v4 + 128);
      if (v59[2] != 5)
      {
        DeviceFaultNotify("glmesrd_asicinit.cpp", 4831, "ProgramDRRegistersMinnow", (char)"m_rAsicConfig.GetAsicType() == ASIC_MINNOW");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asicinit.cpp", 4831, "m_rAsicConfig.GetAsicType() == ASIC_MINNOW");
      }
      int v146 = 0;
      __int16 v145 = 0;
      uint64_t v144 = 0;
      uint64_t v143 = 0;
      uint64_t v142 = 0;
      if ((*(unsigned int (**)(void))(*(void *)v59 + 784))())
      {
        char v112 = HIBYTE(v146);
        char v113 = BYTE2(v146);
        int v118 = HIDWORD(v144);
        int v119 = v144;
      }
      if ((*(unsigned int (**)(void, char *, int *, char *, __int16 *, char *, uint64_t *, char *, uint64_t *))(**(void **)(v4 + 128) + 792))(*(void *)(v4 + 128), (char *)&v146 + 1, &v146, (char *)&v145 + 1, &v145, (char *)&v143 + 4, &v143, (char *)&v142 + 4, &v142))
      {
        char v114 = BYTE1(v146);
        char v115 = v146;
        char v116 = HIBYTE(v145);
        char v117 = v145;
        int v120 = HIDWORD(v143);
        int v121 = v143;
        int v122 = HIDWORD(v142);
        int v123 = v142;
      }
      BlueFin::GlMeSrdRfInit4777::ProgramDrRegs((BlueFin::GlMeSrdRfInit4777 *)v106);
      unsigned int v60 = v111;
      if (v111 >= 0x100)
      {
        DeviceFaultNotify("glmesrd_asicinit.cpp", 4866, "ProgramDRRegistersMinnow", (char)"ulApbCommandLength < 256");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asicinit.cpp", 4866, "ulApbCommandLength < 256");
      }
      uint64_t v61 = *(void *)(v4 + 128);
      if (*(unsigned char *)(v61 + 1644))
      {
        uint64_t v62 = *(unsigned __int8 *)(v61 + 1968);
        if (v111 + v62 > 0xFF)
        {
          DeviceFaultNotify("glmesrd_asicinit.cpp", 4880, "ProgramDRRegistersMinnow", (char)"bIsMaxNumApbCommands");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asicinit.cpp", 4880, "bIsMaxNumApbCommands");
        }
        unsigned __int8 v63 = 0;
        if (*(unsigned char *)(v61 + 1968))
        {
          double v64 = (_DWORD *)(v61 + 1652);
          do
          {
            if (*((unsigned __int8 *)v64 - 4) == 192)
            {
              int v65 = &v110[v60 + v63];
              *(unsigned char *)int v65 = -64;
              *((_WORD *)v65 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *((_WORD *)v64 - 1);
              *((_DWORD *)v65 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *v64;
              ++v63;
            }
            v64 += 2;
            --v62;
          }
          while (v62);
        }
        LOBYTE(v60) = v60 + v63;
      }
      uint64_t v66 = (*(uint64_t (**)(void))(**(void **)(v4 + 120) + 80))(*(void *)(v4 + 120));
      *(void *)&long long v136 = BlueFin::GlMeSrdAsicinit::OnReliableAck;
      *((void *)&v136 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v4;
      __int16 v137 = 282;
      char v138 = 0;
      uint64_t v139 = v66;
      int v140 = 0;
      __int16 v141 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v66 + 16))(v66, 1);
      uint64_t v67 = (*(uint64_t (**)(uint64_t))(*(void *)v66 + 48))(v66);
      uint64_t v68 = (*(uint64_t (**)(uint64_t))(*(void *)v67 + 16))(v67);
      (*(void (**)(uint64_t, long long *, void, void, void, void, void, void *))(*(void *)v68 + 56))(v68, &v136, v60, 0, *(unsigned int *)(*(void *)(v4 + 128) + 2184), *(unsigned int *)(*(void *)(v4 + 128) + 2188), *(unsigned int *)(*(void *)(v4 + 128) + 2192), v110);
      BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v136);
      uint64_t v69 = (*(uint64_t (**)(void))(**(void **)(v4 + 120) + 80))(*(void *)(v4 + 120));
      v130[0] = BlueFin::GlMeSrdAsicinit::OnReliableAck;
      v130[1] = v4;
      __int16 v131 = 282;
      char v132 = 0;
      uint64_t v133 = v69;
      int v134 = 0;
      __int16 v135 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v69 + 16))(v69, 1);
      int v70 = (*(uint64_t (**)(void))(**(void **)(v4 + 128) + 1032))(*(void *)(v4 + 128));
      int v71 = (*(uint64_t (**)(void))(**(void **)(v4 + 128) + 1080))(*(void *)(v4 + 128));
      BlueFin::GlMeSrdAsicinit::BypassLteFilter(v4, (BlueFin::GlMeSrdTransaction *)v130, v70, v71);
      uint64_t v72 = (*(uint64_t (**)(void))(**(void **)(v4 + 120) + 80))(*(void *)(v4 + 120));
      v124[0] = BlueFin::GlMeSrdAsicinit::OnReliableAck;
      v124[1] = v4;
      __int16 v125 = 282;
      char v126 = 0;
      uint64_t v127 = v72;
      int v128 = 0;
      __int16 v129 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v72 + 16))(v72, 1);
      BlueFin::GlMeSrdRfInit4777::GlMeSrdRfInit4777((BlueFin::GlMeSrdRfInit4777 *)&v147, *(const BlueFin::GlMeSrdAsicConfig **)(v4 + 128));
      BlueFin::GlMeSrdRfInit4777::ProgramNotchFilter4777x((BlueFin::GlMeSrdRfInit4777 *)&v147, (BlueFin::GlMeSrdTransaction *)v124);
      BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v124);
      BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v124);
      BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v130);
      BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v136);
      uint64_t v12 = *(void *)(v4 + 128);
      int v19 = *(_DWORD *)(v12 + 8);
    }
    BOOL v73 = v19 == 5 || v19 == 3;
    if (v73
      && *(unsigned char *)(v12 + 1973)
      && ((*(uint64_t (**)(uint64_t))(*(void *)v12 + 248))(v12) & 1) == 0
      && ((*(uint64_t (**)(void))(**(void **)(v4 + 128) + 240))(*(void *)(v4 + 128)) & 1) == 0)
    {
      uint64_t v74 = (*(uint64_t (**)(void))(**(void **)(v4 + 120) + 80))(*(void *)(v4 + 120));
      uint64_t v148 = 0;
      int v147 = 0;
      *(_WORD *)long long v149 = 256;
      v149[2] = 0;
      uint64_t v150 = v74;
      int v151 = 0;
      __int16 v152 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v74 + 16))(v74, 1);
      uint64_t v75 = (*(uint64_t (**)(uint64_t))(*(void *)v74 + 48))(v74);
      uint64_t v76 = (*(uint64_t (**)(uint64_t))(*(void *)v75 + 40))(v75);
      (*(void (**)(uint64_t, unint64_t (**)(BlueFin::GlMeSrdAsicinit *, void *), uint64_t))(*(void *)v76 + 96))(v76, &v147, v12 + 1972);
      BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v147);
      BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v147);
    }
    GlCustomLog(12, "INIT_STAGE C: Starting Hearbeat, RTC capture, NvRam Read, ...\n");
    uint64_t v77 = (*(uint64_t (**)(void))(**(void **)(v4 + 120) + 80))(*(void *)(v4 + 120));
    int v147 = BlueFin::GlMeSrdAsicinit::OnReliableAck;
    uint64_t v148 = v4;
    *(_WORD *)long long v149 = 266;
    v149[2] = 0;
    uint64_t v150 = v77;
    int v151 = 0;
    __int16 v152 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v77 + 16))(v77, 1);
    uint64_t v78 = (*(uint64_t (**)(uint64_t))(*(void *)v150 + 48))(v150);
    uint64_t v79 = (*(uint64_t (**)(uint64_t))(*(void *)v78 + 40))(v78);
    (*(void (**)(uint64_t, unint64_t (**)(BlueFin::GlMeSrdAsicinit *, void *), uint64_t, void, uint64_t))(*(void *)v79 + 80))(v79, &v147, 1, 0, 5);
    uint64_t v80 = (*(uint64_t (**)(uint64_t))(*(void *)v150 + 48))(v150);
    uint64_t v81 = (*(uint64_t (**)(uint64_t))(*(void *)v80 + 16))(v80);
    (*(void (**)(uint64_t, unint64_t (**)(BlueFin::GlMeSrdAsicinit *, void *), void, uint64_t))(*(void *)v81 + 128))(v81, &v147, 0, 6);
    long long v136 = xmmword_263BAC4E0;
    uint64_t v82 = (*(uint64_t (**)(uint64_t))(*(void *)v150 + 48))(v150);
    uint64_t v83 = (*(uint64_t (**)(uint64_t))(*(void *)v82 + 40))(v82);
    (*(void (**)(uint64_t, unint64_t (**)(BlueFin::GlMeSrdAsicinit *, void *), long long *))(*(void *)v83 + 16))(v83, &v147, &v136);
    uint64_t v84 = *(void *)(v4 + 128);
    if (*(unsigned char *)(v84 + 23))
    {
      v106[0] = 1;
      *(void *)&v106[4] = 0x100000002;
      *(_DWORD *)&v106[12] = 0;
      int v85 = *(_DWORD *)(v84 + 8);
      if (v85 == 3)
      {
        char v90 = *(unsigned char *)(v84 + 1416);
        if (v90)
        {
          uint64_t v91 = (*(uint64_t (**)(uint64_t))(*(void *)v150 + 48))(v150);
          uint64_t v92 = (*(uint64_t (**)(uint64_t))(*(void *)v91 + 16))(v91);
          (*(void (**)(uint64_t, unint64_t (**)(BlueFin::GlMeSrdAsicinit *, void *), unsigned char *))(*(void *)v92 + 144))(v92, &v147, v106);
        }
        if ((v90 & 2) == 0) {
          goto LABEL_111;
        }
        int v89 = 5;
      }
      else
      {
        if (v85 != 5)
        {
          uint64_t v95 = (*(uint64_t (**)(uint64_t))(*(void *)v150 + 48))(v150);
          uint64_t v96 = (*(uint64_t (**)(uint64_t))(*(void *)v95 + 16))(v95);
          (*(void (**)(uint64_t, unint64_t (**)(BlueFin::GlMeSrdAsicinit *, void *), unsigned char *))(*(void *)v96 + 144))(v96, &v147, v106);
          goto LABEL_111;
        }
        char v86 = *(unsigned char *)(v84 + 1416);
        if (v86)
        {
          *(_DWORD *)&v106[4] = 6;
          uint64_t v87 = (*(uint64_t (**)(uint64_t))(*(void *)v150 + 48))(v150);
          uint64_t v88 = (*(uint64_t (**)(uint64_t))(*(void *)v87 + 16))(v87);
          (*(void (**)(uint64_t, unint64_t (**)(BlueFin::GlMeSrdAsicinit *, void *), unsigned char *))(*(void *)v88 + 144))(v88, &v147, v106);
        }
        if ((v86 & 2) == 0) {
          goto LABEL_111;
        }
        int v89 = 7;
      }
      *(_DWORD *)&v106[12] = 1;
      *(_DWORD *)&v106[4] = v89;
      uint64_t v93 = (*(uint64_t (**)(uint64_t))(*(void *)v150 + 48))(v150);
      uint64_t v94 = (*(uint64_t (**)(uint64_t))(*(void *)v93 + 16))(v93);
      (*(void (**)(uint64_t, unint64_t (**)(BlueFin::GlMeSrdAsicinit *, void *), unsigned char *))(*(void *)v94 + 144))(v94, &v147, v106);
    }
LABEL_111:
    LODWORD(v130[0]) = 0;
    uint64_t v97 = (*(uint64_t (**)(uint64_t))(*(void *)v150 + 48))(v150);
    uint64_t v98 = (*(uint64_t (**)(uint64_t))(*(void *)v97 + 16))(v97);
    (*(void (**)(uint64_t, unint64_t (**)(BlueFin::GlMeSrdAsicinit *, void *), uint64_t, uint64_t))(*(void *)v98 + 128))(v98, &v147, 7, 1);
    uint64_t v99 = (*(uint64_t (**)(uint64_t))(*(void *)v150 + 48))(v150);
    uint64_t v100 = (*(uint64_t (**)(uint64_t))(*(void *)v99 + 16))(v99);
    (*(void (**)(uint64_t, unint64_t (**)(BlueFin::GlMeSrdAsicinit *, void *), uint64_t, uint64_t, void *))(*(void *)v100 + 120))(v100, &v147, 7, 1, v130);
    BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v147);
    uint64_t v101 = *(void *)(v4 + 128);
    if (*(unsigned char *)(v101 + 76))
    {
LABEL_112:
      if ((*(_DWORD *)(v101 + 8) & 0xFFFFFFFE) == 2)
      {
        uint64_t v102 = (*(uint64_t (**)(void))(**(void **)(v4 + 120) + 80))(*(void *)(v4 + 120));
        *(void *)BOOL v106 = 0;
        *(void *)&v106[8] = 0;
        *(_DWORD *)&v106[15] = 0;
        uint64_t v107 = v102;
        int v108 = 0;
        __int16 v109 = 0;
        (*(void (**)(uint64_t, void))(*(void *)v102 + 16))(v102, 0);
        BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v106);
        BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v106);
      }
    }
    else
    {
      double v103 = (unsigned __int8 *)(v101 + 84);
      unint64_t v104 = -1;
      while (v104 != 22)
      {
        int v105 = *v103;
        v103 += 8;
        ++v104;
        if (v105)
        {
          if (v104 <= 0x16) {
            goto LABEL_112;
          }
          break;
        }
      }
    }
    BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v147);
    return 0;
  }
  if (v5 != 8 && v5 != 13) {
    return BlueFin::GlMeSrdAsicinit::esw_loading;
  }
  char v7 = v3;
  int v8 = v3[1];
  if (v8 == 8)
  {
    GlCustomLog(12, "INIT_STAGE B: ACK\n");
    *(_DWORD *)(v4 + 632) |= 0x100u;
    int v8 = v7[1];
  }
  int v9 = 1024;
  unsigned int v10 = "INIT_STAGE C: ACK\n";
  switch(v8)
  {
    case 1:
      int v9 = 2;
      GlCustomLog(12, "INIT_STAGE C: Received NvRAM\n");
      goto LABEL_40;
    case 4:
      int v9 = 16;
      GlCustomLog(12, "INIT_STAGE C: Received Heartbeat\n");
      goto LABEL_40;
    case 5:
      int v9 = 32;
      GlCustomLog(12, "INIT_STAGE C: Received Sub-Heartbeat\n");
      goto LABEL_40;
    case 6:
      int v9 = 64;
      unsigned int v10 = "INIT_STAGE C: Received Rtc\n";
      goto LABEL_39;
    case 9:
      int v29 = (*(unsigned char *)(v4 + 699))++ + 1;
      if (v29 != 3) {
        break;
      }
      int v9 = 512;
      GlCustomLog(12, "INIT_STAGE B1: ACK\n");
      goto LABEL_40;
    case 10:
LABEL_39:
      GlCustomLog(12, v10);
LABEL_40:
      *(_DWORD *)(v4 + 632) |= v9;
      break;
    default:
      break;
  }
  int v30 = *(_DWORD *)(v4 + 632);
  if ((~v30 & 0x52) == 0 && ((v30 & 0x400) != 0 || !*(unsigned char *)(*(void *)(v4 + 128) + 23)))
  {
    GlCustomLog(12, "INIT_STAGE: COMPLETE!\n");
    uint64_t v148 = 0;
    int v147 = 0;
    if (!*(unsigned char *)(v4 + 168)) {
      goto LABEL_50;
    }
    if ((BlueFin::GlMeSrdNvRamReader::IsInvalidateFlagSet((BlueFin::GlMeSrdNvRamReader *)(v4 + 168)) & 1) == 0)
    {
      LODWORD(v147) = BlueFin::GlMeSrdNvRamReader::GetDataReg1((BlueFin::GlMeSrdNvRamReader *)(v4 + 168));
      HIDWORD(v147) = BlueFin::GlMeSrdNvRamReader::GetDataReg2((BlueFin::GlMeSrdNvRamReader *)(v4 + 168));
      LODWORD(v148) = BlueFin::GlMeSrdNvRamReader::GetDataReg3((BlueFin::GlMeSrdNvRamReader *)(v4 + 168));
      double RtcLsb = (double)BlueFin::GlMeSrdNvRamReader::GetRtcLsb((BlueFin::GlMeSrdNvRamReader *)(v4 + 168));
      double v46 = RtcLsb
          + (double)BlueFin::GlMeSrdNvRamReader::GetRtc11bitsMsb((BlueFin::GlMeSrdNvRamReader *)(v4 + 168))
          * 4294967300.0;
      double v36 = v46 / 32.768;
      GlCustomLog(14, "AsicInit: NvRam captured  RtcCnt:%.0lf  RtcMs:%.3lf  Reg1:%08x  Reg2:%08x  Reg3:%08x\n", v46, v46 / 32.768, v147, HIDWORD(v147), v148);
      goto LABEL_66;
    }
    if (*(unsigned char *)(v4 + 168))
    {
      int IsInvalidateFlagSet = BlueFin::GlMeSrdNvRamReader::IsInvalidateFlagSet((BlueFin::GlMeSrdNvRamReader *)(v4 + 168));
      uint64_t v32 = "F";
      if (IsInvalidateFlagSet) {
        uint64_t v32 = "T";
      }
      uint64_t v33 = 84;
    }
    else
    {
LABEL_50:
      uint64_t v32 = "N/A";
      uint64_t v33 = 70;
    }
    GlCustomLog(14, "AsicInit: NvRam NOT captured  IsValid:%c  Invalidate:%s\n", v33, v32);
    double v36 = 0.0;
LABEL_66:
    uint64_t v47 = *(void *)(v4 + 144);
    double v48 = *(double *)(v47 + 224);
    LODWORD(v34) = *(_DWORD *)(v47 + 232);
    LOWORD(v35) = *(_WORD *)(v47 + 236);
    LODWORD(v47) = *(_DWORD *)(v47 + 152);
    double v49 = (double)v34 + (double)v35 * 4294967300.0 + ((double)v47 - v48) * 32.768;
    double v50 = v49 / 32.768;
    GlCustomLog(14, "AsicInit: Rtc Recovered  Lms:%u  RtcCnt:%.0lf  RtcMs:%.3lf\n", v47, v49, v49 / 32.768);
    BOOL v51 = v36 != 0.0;
    BOOL v52 = v50 > v36;
    double v53 = v50 - v36;
    double v54 = "INVALID";
    if (v50 > v36) {
      double v54 = "Valid";
    }
    uint64_t v55 = v51 & v52;
    if (v51 && v52) {
      double v56 = v50 - v36;
    }
    else {
      double v56 = 0.0;
    }
    GlCustomLog(14, "AsicInit: Elapsed Time %s  ElapsedTimeMs:%.3lf\n", v54, v53);
    (*(void (**)(void, void, void, unint64_t (**)(BlueFin::GlMeSrdAsicinit *, void *), uint64_t, double))(**(void **)(v4 + 112) + 32))(*(void *)(v4 + 112), *(unsigned int *)(*(void *)(v4 + 144) + 152), *(unsigned __int8 *)(v4 + 168), &v147, v55, v56);
    BlueFin::QHsm::tran((void *)v4, BlueFin::GlMeSrdAsicinit::off, (uint64_t)"&GlMeSrdAsicinit::off");
  }
  return 0;
}

void sub_2639A4B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&STACK[0x9D8]);
  _Unwind_Resume(a1);
}

uint64_t BlueFin::EswRpcEnc::GetEswGcmRpcIf(BlueFin::EswRpcEnc *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (!v2)
  {
    BlueFin::EswRpcEnc::MakeEswRpcEncoderImp(this);
    uint64_t v2 = *((void *)this + 1);
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)v2 + 16);

  return v3();
}

uint64_t BlueFin::MinnowEswRpcEncoderImp::GetEswGcmRpcIf(BlueFin::MinnowEswRpcEncoderImp *this)
{
  return (uint64_t)this + 8;
}

uint64_t BlueFin::MinnowEswRpcGcmEncImp::esw_gcm_rpc_set_blanking(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  char v6 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v10, v11, 1800, v6);
  BlueFin::GlStream::CarpPutBits(v10, *a3 & 3, 2u, 8u);
  BlueFin::GlStream::CarpPutBits(v10, (*a3 >> 2) & 1, 1u, 8u);
  BlueFin::GlStream::CarpPutBits(v10, (*a3 >> 3) & 1, 1u, 8u);
  BlueFin::GlStream::CarpPutBits(v10, (*a3 >> 4) & 3, 2u, 8u);
  BlueFin::GlStream::CarpPutBits(v10, *a3 >> 6, 2u, 8u);
  BlueFin::GlStream::PutU08(v10, a3[4]);
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 912))() == 40)
  {
    BlueFin::GlStream::CarpPutBits(v10, a3[8] & 7, 3u, 8u);
    BlueFin::GlStream::CarpPutBits(v10, (a3[8] >> 3) & 7, 3u, 8u);
    BlueFin::GlStream::CarpPutBits(v10, 0, 2u, 8u);
  }
  else
  {
    BlueFin::GlStream::PutU08(v10, 0);
  }
  BlueFin::GlStream::PutU08(v10, 0);
  BlueFin::GlStream::PutU32(v10, *((_DWORD *)a3 + 3));
  BlueFin::GlStream::PutU32(v10, *((_DWORD *)a3 + 4));
  BlueFin::GlStream::PutU32(v10, *((_DWORD *)a3 + 5));
  BlueFin::GlStream::PutU32(v10, *((_DWORD *)a3 + 6));
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v10);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)a2, 0, 0xBu, v11, Offset);
  unsigned int v8 = *(unsigned __int16 *)(a2 + 32);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v8)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_minnow.cpp", 663, "esw_gcm_rpc_set_blanking", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_minnow.cpp", 663, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetRfType(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned int *)this + 352);
}

uint64_t BlueFin::GlMeSrdCtrlSm::GetBlankingConfigs(uint64_t a1, int a2, uint64_t a3)
{
  switch(a2)
  {
    case 0:
      *(unsigned char *)a3 &= 0xF4u;
      if (((*(uint64_t (**)(void))(**(void **)(a1 + 136) + 256))(*(void *)(a1 + 136)) & 1) == 0) {
        (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 264))(*(void *)(a1 + 136));
      }
      GlCustomLog(14, "GlMeSrdCtrlSm:: Blanking disabled in %s band\n");
      break;
    case 1:
      *(unsigned char *)a3 |= 0x3Bu;
      if (((*(uint64_t (**)(void))(**(void **)(a1 + 136) + 256))(*(void *)(a1 + 136)) & 1) == 0) {
        (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 264))(*(void *)(a1 + 136));
      }
      GlCustomLog(14, "GlMeSrdCtrlSm:: Exernal blanking enabled in %s band\n");
      break;
    case 2:
      *(unsigned char *)a3 = *(unsigned char *)a3 & 0xC4 | 0x19;
      if (((*(uint64_t (**)(void))(**(void **)(a1 + 136) + 256))(*(void *)(a1 + 136)) & 1) == 0) {
        (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 264))(*(void *)(a1 + 136));
      }
      GlCustomLog(14, "GlMeSrdCtrlSm:: Internal (auto)blanking enabled in %s band\n");
      break;
    case 3:
      *(unsigned char *)a3 = *(unsigned char *)a3 & 0xC4 | 0x2A;
      if (((*(uint64_t (**)(void))(**(void **)(a1 + 136) + 256))(*(void *)(a1 + 136)) & 1) == 0) {
        (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 264))(*(void *)(a1 + 136));
      }
      GlCustomLog(14, "GlMeSrdCtrlSm:: Conditional blanking enabled in %s band\n");
      break;
    case 4:
      *(unsigned char *)a3 = *(unsigned char *)a3 & 0xC4 | 0x18;
      uint64_t v6 = *(void *)(a1 + 136);
      int v7 = *(_DWORD *)(v6 + 376);
      unsigned int v8 = *(unsigned __int16 *)(v6 + 380);
      unsigned int v9 = *(unsigned __int16 *)(v6 + 382);
      if (*(_DWORD *)(v6 + 368)) {
        unsigned int v10 = *(_DWORD *)(v6 + 368);
      }
      else {
        unsigned int v10 = 1000000;
      }
      char v11 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 264))(v6);
      double v12 = 0.5;
      if ((v11 & 1) == 0)
      {
        int v13 = (*(uint64_t (**)(void, double))(**(void **)(a1 + 136) + 256))(*(void *)(a1 + 136), 0.5);
        double v12 = 0.0303;
        if (v13) {
          double v12 = 0.5;
        }
      }
      double v14 = (double)v10 / v12;
      double v15 = fmod(v14, 4294967300.0);
      if (v14 <= 4294967300.0) {
        double v15 = v14;
      }
      *(_DWORD *)(a3 + 12) = v15;
      *(_DWORD *)(a3 + 16) = v15;
      if (v8 && v9 && v8 > v9) {
        *(_DWORD *)(a3 + 20) = v8 | (v9 << 16);
      }
      if (v7) {
        *(_DWORD *)(a3 + 24) = v7;
      }
      uint64_t v16 = *(_DWORD **)(a1 + 136);
      v16[374] = v15;
      if (((*(uint64_t (**)(_DWORD *))(*(void *)v16 + 256))(v16) & 1) == 0) {
        (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 264))(*(void *)(a1 + 136));
      }
      GlCustomLog(14, "GlMeSrdCtrlSm:: Monitor blanking enabled in %s band. Settings: WindUs %u, WindCycles %u PwrThres %u\n");
      break;
    case 5:
      *(unsigned char *)a3 = *(unsigned char *)a3 & 0xC4 | 0x38;
      uint64_t v17 = *(void *)(a1 + 136);
      int v18 = *(_DWORD *)(v17 + 376);
      unsigned int v19 = *(unsigned __int16 *)(v17 + 380);
      unsigned int v20 = *(unsigned __int16 *)(v17 + 382);
      if (*(_DWORD *)(v17 + 368)) {
        unsigned int v21 = *(_DWORD *)(v17 + 368);
      }
      else {
        unsigned int v21 = 1000000;
      }
      char v22 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 256))(v17);
      double v23 = 0.5;
      if ((v22 & 1) == 0)
      {
        int v24 = (*(uint64_t (**)(void, double))(**(void **)(a1 + 136) + 264))(*(void *)(a1 + 136), 0.5);
        double v23 = 0.0303;
        if (v24) {
          double v23 = 0.5;
        }
      }
      double v25 = (double)v21 / v23;
      double v26 = fmod(v25, 4294967300.0);
      if (v25 <= 4294967300.0) {
        double v26 = v25;
      }
      *(_DWORD *)(a3 + 12) = v26;
      *(_DWORD *)(a3 + 16) = v26;
      if (v19 && v20 && v19 > v20) {
        *(_DWORD *)(a3 + 20) = v19 | (v20 << 16);
      }
      if (v18) {
        *(_DWORD *)(a3 + 24) = v18;
      }
      unsigned __int8 v27 = *(_DWORD **)(a1 + 136);
      v27[374] = v26;
      if (((*(uint64_t (**)(_DWORD *))(*(void *)v27 + 256))(v27) & 1) == 0) {
        (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 264))(*(void *)(a1 + 136));
      }
      GlCustomLog(14, "GlMeSrdCtrlSm:: External LTE filter control enabled in %s band. Settings: WindUs %u, WindCycles %u PwrThres %u\n");
      break;
    default:
      break;
  }
  *(unsigned char *)(a3 + 8) = *(unsigned char *)(a3 + 8) & 0xC0 | *(unsigned char *)a3 & 3 | (*(unsigned char *)a3 >> 1) & 0x18;
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 912))();
  if (result == 40)
  {
    if (a2 == 6)
    {
      char v29 = 32;
      char v30 = -60;
      char v31 = 4;
      uint64_t v32 = "GlMeSrdCtrlSm:: LTE detector blanking enabled in %s band\n";
    }
    else
    {
      if (a2 != 7) {
        return result;
      }
      char v29 = 40;
      char v30 = -59;
      char v31 = 5;
      uint64_t v32 = "GlMeSrdCtrlSm:: L1 RSSI detector blanking enabled in %s band\n";
    }
    char v33 = *(unsigned char *)(a3 + 8) & 0xC0 | v31;
    *(unsigned char *)a3 |= 8u;
    *(unsigned char *)(a3 + 8) = v33 & v30 | v29;
    return GlCustomLog(14, v32, off_2655D83A8[*(_DWORD *)(a3 + 4) & 7]);
  }
  return result;
}

uint64_t BlueFin::EswRpcEnc::GetEswTimRpcIf(BlueFin::EswRpcEnc *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (!v2)
  {
    BlueFin::EswRpcEnc::MakeEswRpcEncoderImp(this);
    uint64_t v2 = *((void *)this + 1);
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)v2 + 40);

  return v3();
}

uint64_t BlueFin::MinnowEswRpcEncoderImp::GetEswTimRpcIf(BlueFin::MinnowEswRpcEncoderImp *this)
{
  return (uint64_t)this + 56;
}

BlueFin::GlMeSrdRfInit4777 *BlueFin::GlMeSrdRfInit4777::GlMeSrdRfInit4777(BlueFin::GlMeSrdRfInit4777 *this, const BlueFin::GlMeSrdAsicConfig *a2)
{
  *(void *)this = a2;
  *((_DWORD *)this + 2) = (*(uint64_t (**)(const BlueFin::GlMeSrdAsicConfig *))(*(void *)a2 + 152))(a2);
  *((unsigned char *)this + 2220) = 0;
  *((_DWORD *)this + 556) = 0;
  *((unsigned char *)this + 2228) = 24;
  *((_DWORD *)this + 56BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *((unsigned char *)this + 2240) = 0;
  *((void *)this + 279) = 0;
  uint64_t v4 = *(unsigned char **)this;
  *((unsigned char *)this + 2248) = *(unsigned char *)(*(void *)this + 1416);
  *((unsigned char *)this + 2249) = v4[558];
  *((double *)this + 282) = (*(double (**)(unsigned char *))(*(void *)v4 + 88))(v4);
  *((_DWORD *)this + 566) = 0;
  *(_DWORD *)((char *)this + 2267) = 0;
  *((void *)this + 284) = 0xD4FEEB00000000;
  *((_DWORD *)this + 570) = (*(uint64_t (**)(void))(**(void **)this + 1272))();
  *((unsigned char *)this + 2284) = (*(uint64_t (**)(void))(**(void **)this + 960))();
  *((_DWORD *)this + 554) = 0;
  *(_DWORD *)((char *)this + 2285) = 0;
  *(_WORD *)((char *)this + 2289) = 0;
  *(void *)((char *)this + 2300) = 0;
  *(void *)((char *)this + 2308) = 0;
  *(void *)((char *)this + 2292) = 0;
  if (!(*(unsigned int (**)(void))(**(void **)this + 32))())
  {
    int v5 = (*(uint64_t (**)(const BlueFin::GlMeSrdAsicConfig *))(*(void *)a2 + 184))(a2) & 0xF000FFFE;
    if (v5 == 805306388)
    {
      if ((*(unsigned int (**)(const BlueFin::GlMeSrdAsicConfig *))(*(void *)a2 + 96))(a2) == 52000000) {
        int v6 = 4;
      }
      else {
        int v6 = 3;
      }
    }
    else
    {
      if (v5 != 805306386)
      {
        DeviceFaultNotify("glmesrd_rfinit_minnow.cpp", 127, "GlMeSrdRfInit4777", (char)"0");
        int v15 = 127;
        goto LABEL_31;
      }
      int v6 = 2;
    }
    goto LABEL_14;
  }
  if ((*(unsigned int (**)(void))(**(void **)this + 96))() != 26000000)
  {
    DeviceFaultNotify("glmesrd_rfinit_minnow.cpp", 104, "GlMeSrdRfInit4777", (char)"0");
    int v15 = 104;
    goto LABEL_31;
  }
  if (!(*(unsigned int (**)(void))(**(void **)this + 40))())
  {
    if ((*(unsigned int (**)(void))(**(void **)this + 936))(*(void *)this)) {
      int v6 = 1;
    }
    else {
      int v6 = 5;
    }
LABEL_14:
    *((_DWORD *)this + 554) = v6;
    goto LABEL_15;
  }
  *((_DWORD *)this + 554) = 6;
  GlCustomLog(15, "Set MNW Radio Version to Saturnas\n");
LABEL_15:
  uint64_t v7 = 0;
  *(_OWORD *)((char *)this + 7BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
  *(_OWORD *)((char *)this + 60) = 0u;
  *(_OWORD *)((char *)this + 44) = 0u;
  *(_OWORD *)((char *)this + 28) = 0u;
  *(_OWORD *)((char *)this + 12) = 0u;
  do
  {
    unsigned int v8 = (char *)this + v7;
    *((_WORD *)v8 + 45) = 0;
    v8[88] = 0;
    *((_DWORD *)v8 + 23) = 0;
    v7 += 8;
  }
  while (v7 != 2048);
  for (uint64_t i = 0; i != 80; i += 8)
  {
    unsigned int v10 = (char *)this + i;
    *((_WORD *)v10 + 1069) = 0;
    v10[2136] = 0;
    *((_DWORD *)v10 + 535) = 0;
  }
  uint64_t v11 = *(void *)this;
  unsigned int v12 = *(_DWORD *)(*(void *)this + 548);
  if (v12)
  {
    *((unsigned char *)this + 2240) = 0;
    if (v12 < 7 && ((0x39u >> (v12 - 1)) & 1) != 0)
    {
      *((_DWORD *)this + 56BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = dword_263BAB0E0[v12 - 1];
      return this;
    }
    DeviceFaultNotify("glmesrd_rfinit_minnow.cpp", 1011, "SetIfTestPoint", (char)"0");
    int v15 = 1011;
LABEL_31:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_rfinit_minnow.cpp", v15, "0");
  }
  *((_DWORD *)this + 56BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  if (*(unsigned char *)(v11 + 1391))
  {
    *((unsigned char *)this + 2228) = *(unsigned char *)(v11 + 1392);
    *((_DWORD *)this + 558) = *(_DWORD *)(v11 + 1396);
    *((unsigned char *)this + 2236) = *(unsigned char *)(v11 + 1389);
    *((unsigned char *)this + 2237) = *(unsigned char *)(v11 + 1390);
    *((unsigned char *)this + 2238) = *(unsigned char *)(v11 + 1400);
    *((unsigned char *)this + 2239) = *(unsigned char *)(v11 + 1401);
    BOOL v13 = *(unsigned char *)(v11 + 1391) != 0;
  }
  else
  {
    BOOL v13 = 0;
  }
  *((unsigned char *)this + 2240) = v13;
  return this;
}

double BlueFin::GlMeSrdAsicConfig::GetSampleClockHz(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((double *)this + 6);
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetRfMode(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned int *)this + 353);
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetClockFrequencyHz(BlueFin::GlMeSrdAsicConfig *this)
{
  uint64_t result = *((unsigned int *)this + 7);
  if (!result)
  {
    DeviceFaultNotify("glmesrd_asic_config.cpp", 1831, "GetClockFrequencyHz", (char)"m_ulFreqHz > 0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_config.cpp", 1831, "m_ulFreqHz > 0");
  }
  return result;
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetRfxbarCtrl(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned int *)this + 535);
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetGlns16MHz(BlueFin::GlMeSrdAsicConfig *this)
{
  if (*((unsigned char *)this + 1421)) {
    return (*(uint64_t (**)(void))(*(void *)this + 264))();
  }
  else {
    return 0;
  }
}

uint64_t BlueFin::CarpEswRpcGcmEncImp::esw_gcm_rpc_enable_external_LNA_control(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = (unsigned __int16 *)a2;
  uint64_t v11 = *MEMORY[0x263EF8340];
  char v6 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v9, v10, 1800, v6);
  BlueFin::GlStream::PutU08(v9, *a3);
  BlueFin::GlStream::PutU08(v9, a3[4]);
  BlueFin::GlStream::PutU08(v9, a3[8]);
  BlueFin::GlStream::PutU08(v9, a3[12]);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v9);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)v4, 0, 0xCu, v10, Offset);
  LODWORD(v4) = v4[16];
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v4)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 213, "esw_gcm_rpc_enable_external_LNA_control", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", 213, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::CarpEswRpcGcmEncImp::esw_gcm_rpc_get_nvram(BlueFin::CarpEswRpcGcmEncImp *this, BlueFin::GlMeSrdTransaction *a2, int a3, int a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if ((a4 + a3) >= 9)
  {
    uint64_t v11 = "(offset + size) <= NVRAM_SIZE";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 146, "esw_gcm_rpc_get_nvram", (char)"(offset + size) <= NVRAM_SIZE");
    int v12 = 146;
    goto LABEL_6;
  }
  char v4 = a4;
  char v5 = a3;
  char v6 = (unsigned __int16 *)a2;
  char v8 = (*(uint64_t (**)(void))(**((void **)a2 + 3) + 40))(*((void *)a2 + 3));
  BlueFin::GlStream::GlStream((uint64_t)v13, v14, 1800, v8);
  BlueFin::GlStream::PutU08(v13, v5);
  BlueFin::GlStream::PutU08(v13, v4);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v13);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)v6, 0, 0xAu, v14, Offset);
  LODWORD(v6) = v6[16];
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 416))();
  if (result < v6)
  {
    uint64_t v11 = "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 157, "esw_gcm_rpc_get_nvram", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    int v12 = 157;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", v12, v11);
  }
  return result;
}

void BlueFin::GlMeSrdAidingMgr::SendAidingBatch(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    unsigned int v8 = 0;
    unsigned int v9 = a2;
    do
    {
      unsigned int v10 = v9 - 32;
      if (v9 >= 0x20) {
        unsigned __int8 v11 = 32;
      }
      else {
        unsigned __int8 v11 = v9;
      }
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(a1);
      uint64_t v15 = 0;
      v16[0] = 0;
      *(_DWORD *)((char *)v16 + 7) = 0;
      uint64_t v17 = v12;
      int v18 = 0;
      __int16 v19 = 0;
      (*(void (**)(uint64_t, void))(*(void *)v12 + 16))(v12, 0);
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 48))(v17);
      uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 48))(v13);
      (*(void (**)(uint64_t, uint64_t *, void, uint64_t, uint64_t))(*(void *)v14 + 72))(v14, &v15, v11, a3 + v8, a4 + 36 * v8);
      BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v15);
      BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v15);
      v8 += 32;
      unsigned int v9 = v10;
    }
    while (v8 < a2);
  }
}

void sub_2639A60A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlMeSrdTransactionManager::GetTransactionBuilderIfc(BlueFin::GlMeSrdTransactionManager *this)
{
  return (uint64_t)this + 32;
}

uint64_t BlueFin::GlMeSrdPacketManager::StartPacket(BlueFin::GlMeSrdPacketManager *this)
{
  if (*((unsigned char *)this + 13872))
  {
    DeviceFaultNotify("glmesrd_packet_manager.cpp", 564, "StartPacket", (char)"!m_bPacketStarted");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_packet_manager.cpp", 564, "!m_bPacketStarted");
  }
  *((unsigned char *)this + 13872) = 1;
  *((unsigned char *)this + 6515) = BlueFin::GlUtlCrc::ucCrcTable[*((unsigned __int8 *)this + 6515)];

  return BlueFin::GlMeSrdPacketManager::EscapeAndAppend((uint64_t)this, 0);
}

uint64_t BlueFin::CarpEswRpcTimEncImp::esw_tim_rpc_time_capture_arm(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (*(int *)a3 >= 4)
  {
    unsigned int v9 = "capture->port <= CAPTURE_PORT_CNTIN";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 1118, "esw_tim_rpc_time_capture_arm", (char)"capture->port <= CAPTURE_PORT_CNTIN");
    int v10 = 1118;
    goto LABEL_6;
  }
  char v4 = (unsigned __int16 *)a2;
  char v6 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v11, v12, 1800, v6);
  BlueFin::GlStream::PutU08(v11, *a3);
  BlueFin::GlStream::PutU08(v11, a3[4]);
  BlueFin::GlStream::PutU08(v11, a3[8]);
  BlueFin::GlStream::PutU08(v11, a3[12]);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v11);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)v4, 3, 0, v12, Offset);
  LODWORD(v4) = v4[16];
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v4)
  {
    unsigned int v9 = "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 1131, "esw_tim_rpc_time_capture_arm", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    int v10 = 1131;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", v10, v9);
  }
  return result;
}

uint64_t BlueFin::MinnowEswRpcGcmEncImp::esw_gcm_rpc_rf_set_frequency_plan_multi_carr_minnow(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, int a5, uint64_t a6, char a7, char a8, char a9)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  char v17 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v21, v22, 1800, v17);
  BlueFin::GlStream::PutU32(v21, *(_DWORD *)a3);
  BlueFin::GlStream::PutU32(v21, *(_DWORD *)(a3 + 4));
  BlueFin::GlStream::PutU32(v21, *(_DWORD *)(a3 + 8));
  BlueFin::GlStream::PutU32(v21, *(_DWORD *)(a3 + 12));
  BlueFin::GlStream::PutU32(v21, *(_DWORD *)(a3 + 16));
  BlueFin::GlStream::PutU32(v21, *(_DWORD *)(a3 + 20));
  BlueFin::GlStream::PutU32(v21, *(_DWORD *)(a3 + 24));
  BlueFin::GlStream::PutU32(v21, *(_DWORD *)(a3 + 28));
  BlueFin::GlStream::PutU32(v21, *(_DWORD *)(a3 + 32));
  BlueFin::GlStream::PutU32(v21, *(_DWORD *)(a3 + 36));
  BlueFin::GlStream::PutU32(v21, *(_DWORD *)(a3 + 40));
  BlueFin::GlStream::PutU32(v21, *(_DWORD *)(a3 + 44));
  BlueFin::GlStream::PutU32(v21, *(_DWORD *)(a3 + 48));
  BlueFin::GlStream::PutU32(v21, *(_DWORD *)(a3 + 52));
  BlueFin::GlStream::PutU32(v21, *(_DWORD *)(a3 + 56));
  BlueFin::GlStream::PutU32(v21, *(_DWORD *)(a3 + 60));
  BlueFin::GlStream::PutU32(v21, *(_DWORD *)(a3 + 64));
  BlueFin::GlStream::PutU32(v21, *(_DWORD *)(a3 + 68));
  BlueFin::GlStream::PutU16(v21, *(unsigned __int16 *)(a3 + 72));
  BlueFin::GlStream::PutU08(v21, *(unsigned char *)(a3 + 74));
  BlueFin::GlStream::PutU08(v21, 0);
  BlueFin::GlStream::PutU08(v21, *a4);
  BlueFin::GlStream::PutU08(v21, 0);
  BlueFin::GlStream::PutU08(v21, 0);
  BlueFin::GlStream::PutU08(v21, 0);
  BlueFin::GlStream::PutU08(v21, a4[1]);
  BlueFin::GlStream::PutU08(v21, a4[2]);
  BlueFin::GlStream::PutU08(v21, 0);
  BlueFin::GlStream::PutU08(v21, 0);
  BlueFin::GlStream::PutU08(v21, a4[3]);
  BlueFin::GlStream::PutU08(v21, a4[4]);
  BlueFin::GlStream::PutU08(v21, 0);
  BlueFin::GlStream::PutU08(v21, 0);
  BlueFin::GlStream::PutU08(v21, a4[5]);
  BlueFin::GlStream::PutU08(v21, a4[6]);
  BlueFin::GlStream::PutU08(v21, 0);
  BlueFin::GlStream::PutU08(v21, 0);
  BlueFin::GlStream::PutU08(v21, a4[7]);
  BlueFin::GlStream::PutU08(v21, a4[8]);
  BlueFin::GlStream::PutU08(v21, 0);
  BlueFin::GlStream::PutU08(v21, 0);
  BlueFin::GlStream::PutU08(v21, a4[9]);
  BlueFin::GlStream::PutU08(v21, a4[10]);
  BlueFin::GlStream::PutU08(v21, 0);
  BlueFin::GlStream::PutU08(v21, 0);
  BlueFin::GlStream::PutU08(v21, a5);
  BlueFin::GlStream::PutU08(v21, a7);
  BlueFin::GlStream::PutU08(v21, a8);
  BlueFin::GlStream::PutU08(v21, a9);
  for (; a5; --a5)
  {
    BlueFin::GlStream::PutU08(v21, *(unsigned char *)a6);
    BlueFin::GlStream::PutU08(v21, 0);
    BlueFin::GlStream::PutU16(v21, *(unsigned __int16 *)(a6 + 2));
    BlueFin::GlStream::PutU32(v21, *(_DWORD *)(a6 + 4));
    a6 += 8;
  }
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v21);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)a2, 0, 0x12u, v22, Offset);
  unsigned int v19 = *(unsigned __int16 *)(a2 + 32);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v19)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_minnow.cpp", 392, "esw_gcm_rpc_rf_set_frequency_plan_multi_carr_minnow", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_minnow.cpp", 392, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::GlMeSrdNvRamReader::GetRtcLsb(BlueFin::GlMeSrdNvRamReader *this)
{
  if (!*(unsigned char *)this)
  {
    DeviceFaultNotify("glmesrd_nvram.cpp", 170, "GetRtcLsb", (char)"m_bValid");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_nvram.cpp", 170, "m_bValid");
  }
  return *((unsigned int *)this + 2);
}

uint64_t BlueFin::GlMeSrdNvRamReader::IsInvalidateFlagSet(BlueFin::GlMeSrdNvRamReader *this)
{
  if (!*(unsigned char *)this)
  {
    DeviceFaultNotify("glmesrd_nvram.cpp", 155, "IsInvalidateFlagSet", (char)"m_bValid");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_nvram.cpp", 155, "m_bValid");
  }
  return (*((unsigned __int8 *)this + 4) >> 1) & 1;
}

uint64_t BlueFin::GlMeSrdNvRamReader::GetRtc11bitsMsb(BlueFin::GlMeSrdNvRamReader *this)
{
  if (!*(unsigned char *)this)
  {
    DeviceFaultNotify("glmesrd_nvram.cpp", 162, "GetRtc11bitsMsb", (char)"m_bValid");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_nvram.cpp", 162, "m_bValid");
  }
  return *((unsigned __int16 *)this + 2) >> 5;
}

uint64_t BlueFin::GlMeSrdNvRamReader::GetDataReg3(BlueFin::GlMeSrdNvRamReader *this)
{
  if (!*(unsigned char *)this)
  {
    DeviceFaultNotify("glmesrd_nvram.cpp", 194, "GetDataReg3", (char)"m_bValid");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_nvram.cpp", 194, "m_bValid");
  }
  return *((unsigned int *)this + 5);
}

uint64_t BlueFin::GlMeSrdNvRamReader::GetDataReg2(BlueFin::GlMeSrdNvRamReader *this)
{
  if (!*(unsigned char *)this)
  {
    DeviceFaultNotify("glmesrd_nvram.cpp", 186, "GetDataReg2", (char)"m_bValid");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_nvram.cpp", 186, "m_bValid");
  }
  return *((unsigned int *)this + 4);
}

uint64_t BlueFin::GlMeSrdNvRamReader::GetDataReg1(BlueFin::GlMeSrdNvRamReader *this)
{
  if (!*(unsigned char *)this)
  {
    DeviceFaultNotify("glmesrd_nvram.cpp", 178, "GetDataReg1", (char)"m_bValid");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_nvram.cpp", 178, "m_bValid");
  }
  return *((unsigned int *)this + 3);
}

BOOL BlueFin::GlMeSrdAsicConfig::GetDagcGain4777(BlueFin::GlMeSrdAsicConfig *this, BOOL *a2, BOOL *a3, BOOL *a4, BOOL *a5, unsigned int *a6, unsigned int *a7, unsigned int *a8, unsigned int *a9)
{
  *a2 = *((unsigned char *)this + 1368);
  *a3 = *((unsigned char *)this + 1369);
  *a4 = *((unsigned char *)this + 1370);
  char v9 = *((unsigned char *)this + 1371);
  *a5 = v9;
  *a6 = *((_DWORD *)this + 343);
  *a7 = *((_DWORD *)this + 344);
  *a8 = *((_DWORD *)this + 345);
  *a9 = *((_DWORD *)this + 346);
  return ((*a2 || *a3) | (*a4 | v9)) != 0;
}

BOOL BlueFin::GlMeSrdAsicConfig::GetAagcGain4777(BlueFin::GlMeSrdAsicConfig *this, BOOL *a2, BOOL *a3, unsigned int *a4, unsigned int *a5)
{
  *a2 = *((unsigned char *)this + 1356);
  char v5 = *((unsigned char *)this + 1357);
  *a3 = v5;
  *a4 = *((_DWORD *)this + 340);
  *a5 = *((_DWORD *)this + 341);
  return (*a2 | v5) != 0;
}

uint64_t BlueFin::EswRpcEnc::MakeEswRpcEncoderImp(BlueFin::EswRpcEnc *this)
{
  if (((*(uint64_t (**)(void))(**((void **)this + 2) + 264))(*((void *)this + 2)) & 1) == 0)
  {
    char v4 = "bIsAsicConfigConsistent";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder.cpp", 58, "MakeEswRpcEncoderImp", (char)"bIsAsicConfigConsistent");
    int v5 = 58;
    goto LABEL_5;
  }
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 264))(*((void *)this + 2));
  if (!result)
  {
    char v4 = "0";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder.cpp", 79, "MakeEswRpcEncoderImp", (char)"0");
    int v5 = 79;
LABEL_5:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder.cpp", v5, v4);
  }
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 3) = &unk_270EBE340;
  *((void *)this + 4) = &unk_270EC1F38;
  *((void *)this + 5) = v3;
  *((void *)this + 6) = &unk_270EC2038;
  *((void *)this + 7) = v3;
  *((void *)this + 8) = &unk_270EC2088;
  *((void *)this + 9) = v3;
  *((void *)this + 10) = &unk_270EC20F8;
  *((void *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v3;
  *((void *)this + 12) = &unk_270EC2238;
  *((void *)this + 13) = v3;
  *((void *)this + 14) = &unk_270EC2308;
  *((void *)this + 15) = v3;
  *((void *)this + 16) = &unk_270EC2188;
  *((void *)this + 17) = v3;
  *((void *)this + 18) = &unk_270EBE3B8;
  *((void *)this + 19) = v3;
  *((void *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = (char *)this + 24;
  return result;
}

uint64_t BlueFin::MinnowEswRpcTimEncImp::esw_tim_rpc_set_duty_cycling(BlueFin::MinnowEswRpcTimEncImp *this, BlueFin::GlMeSrdTransaction *a2, char a3, unsigned int a4, char a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if ((a3 & 0xFu) - 11 <= 0xFFFFFFF5)
  {
    uint64_t v13 = "((interval & 0x0F) > 0) && ((interval & 0x0F) <= MAX_DUTY_CYCLE_INTERVAL)";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_minnow.cpp", 399, "esw_tim_rpc_set_duty_cycling", (char)"((interval & 0x0F) > 0) && ((interval & 0x0F) <= MAX_DUTY_CYCLE_INTERVAL)");
    int v14 = 399;
    goto LABEL_8;
  }
  char v5 = a4;
  if (a4 >= 6)
  {
    uint64_t v13 = "min_active_blocks <= MAX_DUTY_CYCLE_MIN_ACTIVE_BLOCKS";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_minnow.cpp", 400, "esw_tim_rpc_set_duty_cycling", (char)"min_active_blocks <= MAX_DUTY_CYCLE_MIN_ACTIVE_BLOCKS");
    int v14 = 400;
    goto LABEL_8;
  }
  unsigned int v8 = (unsigned __int16 *)a2;
  char v10 = (*(uint64_t (**)(void))(**((void **)a2 + 3) + 40))(*((void *)a2 + 3));
  BlueFin::GlStream::GlStream((uint64_t)v15, v16, 1800, v10);
  BlueFin::GlStream::PutU08(v15, a3);
  BlueFin::GlStream::PutU08(v15, v5);
  BlueFin::GlStream::PutU08(v15, a5);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v15);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)v8, 3, 8u, v16, Offset);
  LODWORD(v8) = v8[16];
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 416))();
  if (result < v8)
  {
    uint64_t v13 = "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_minnow.cpp", 410, "esw_tim_rpc_set_duty_cycling", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    int v14 = 410;
LABEL_8:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_minnow.cpp", v14, v13);
  }
  return result;
}

uint64_t BlueFin::CarpEswRpcGcmEncImp::esw_gcm_rpc_set_nvram(BlueFin::CarpEswRpcGcmEncImp *this, BlueFin::GlMeSrdTransaction *a2, int a3, int a4, unsigned int *a5)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if ((a4 + a3) >= 9)
  {
    uint64_t v15 = "(offset + size) <= NVRAM_SIZE";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 124, "esw_gcm_rpc_set_nvram", (char)"(offset + size) <= NVRAM_SIZE");
    int v16 = 124;
    goto LABEL_9;
  }
  LODWORD(v6) = a4;
  char v7 = a3;
  char v10 = (*(uint64_t (**)(void))(**((void **)a2 + 3) + 40))(*((void *)a2 + 3));
  BlueFin::GlStream::GlStream((uint64_t)v17, v18, 1800, v10);
  BlueFin::GlStream::PutU08(v17, v7);
  BlueFin::GlStream::PutU08(v17, v6);
  if (v6)
  {
    uint64_t v6 = v6;
    do
    {
      unsigned int v11 = *a5++;
      BlueFin::GlStream::PutU32(v17, v11);
      --v6;
    }
    while (v6);
  }
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v17);
  BlueFin::GlMeSrdTransaction::Add(a2, 0, 9u, v18, Offset);
  unsigned int v13 = *((unsigned __int16 *)a2 + 16);
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 416))();
  if (result < v13)
  {
    uint64_t v15 = "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 139, "esw_gcm_rpc_set_nvram", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    int v16 = 139;
LABEL_9:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", v16, v15);
  }
  return result;
}

uint64_t BlueFin::GlMeSrdRfInit4777::GetRfInit(BlueFin::GlMeSrdRfInit4777 *this, char a2)
{
  int v2 = *((_DWORD *)this + 554);
  switch(v2)
  {
    case 1:
    case 5:
      *(void *)((char *)this + 12) = 0xC1EA77167EC6A954;
      *((_DWORD *)this + 5) = 1388646378;
      *((int8x8_t *)this + 3) = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(*((unsigned char *)this + 2284) == 0), 0x1FuLL)), (int8x8_t)0x45D83A39030BC80, (int8x8_t)0x8BB074620617900);
      *((_OWORD *)this + 2) = xmmword_263BAB0B0;
      *((_OWORD *)this + 3) = xmmword_263BAB0C0;
      *((_OWORD *)this + 4) = xmmword_263BAB0D0;
      *((_DWORD *)this + 20) = 7258400;
      if (v2 == 5) {
        __int16 v3 = 25752;
      }
      else {
        __int16 v3 = 21245;
      }
      goto LABEL_5;
    case 2:
      unsigned int v12 = *((_DWORD *)this + 2);
      if (v12 > 8) {
        goto LABEL_44;
      }
      if (((1 << v12) & 0x1C6) != 0)
      {
        if (*(_DWORD *)(*(void *)this + 2184) == 4)
        {
          *(_OWORD *)((char *)this + 28) = xmmword_263BAB070;
          *(_OWORD *)((char *)this + 12) = xmmword_263BAB080;
          *(_OWORD *)((char *)this + 44) = xmmword_263BAB090;
          *(_OWORD *)((char *)this + 60) = xmmword_263BAB0A0;
          *(void *)((char *)this + 76) = 0x1B5BC0020B00F9;
          __int16 v3 = 8608;
        }
        else
        {
          *(_OWORD *)((char *)this + 28) = xmmword_263BAB030;
          *(_OWORD *)((char *)this + 12) = xmmword_263BAB040;
          *(_OWORD *)((char *)this + 44) = xmmword_263BAB050;
          *(_OWORD *)((char *)this + 60) = xmmword_263BAB060;
          *(void *)((char *)this + 76) = 0x22A9C0020B00F9;
          __int16 v3 = 8577;
        }
LABEL_5:
        *((_WORD *)this + 42) = v3;
        *((unsigned char *)this + 86) = a2;
        return (uint64_t)this + 12;
      }
      if (v12)
      {
LABEL_44:
        DeviceFaultNotify("glmesrd_rfinit_minnow.cpp", 303, "GetRfInit", (char)"0");
        int v15 = 303;
      }
      else
      {
        DeviceFaultNotify("glmesrd_rfinit_minnow.cpp", 245, "GetRfInit", (char)"0");
        int v15 = 245;
      }
      goto LABEL_46;
    case 3:
    case 6:
      unsigned int v5 = *((_DWORD *)this + 2);
      if (v5 > 8) {
        goto LABEL_39;
      }
      if (((1 << v5) & 0x1C6) == 0)
      {
        if (v5)
        {
LABEL_39:
          DeviceFaultNotify("glmesrd_rfinit_minnow.cpp", 369, "GetRfInit", (char)"0");
          int v15 = 369;
        }
        else
        {
          DeviceFaultNotify("glmesrd_rfinit_minnow.cpp", 312, "GetRfInit", (char)"0");
          int v15 = 312;
        }
LABEL_46:
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_rfinit_minnow.cpp", v15, "0");
      }
      if (*(_DWORD *)(*(void *)this + 2184) == 4) {
        int v6 = 2126588388;
      }
      else {
        int v6 = 2119165741;
      }
      if (*(_DWORD *)(*(void *)this + 2184) == 4) {
        int v7 = 526608417;
      }
      else {
        int v7 = 40069154;
      }
      if (*(_DWORD *)(*(void *)this + 2184) == 4) {
        int v8 = 129925046;
      }
      else {
        int v8 = 197033989;
      }
      if (*(_DWORD *)(*(void *)this + 2184) == 4) {
        int v9 = 4555641;
      }
      else {
        int v9 = 7117668;
      }
      if (*(_DWORD *)(*(void *)this + 2184) == 4) {
        __int16 v10 = 8608;
      }
      else {
        __int16 v10 = 8577;
      }
      int8x16_t v11 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(*(_DWORD *)(*(void *)this + 2184) == 4)), 0x1FuLL));
      *(int8x16_t *)((char *)this + 20) = vbslq_s8(v11, (int8x16_t)xmmword_263BAAFD0, (int8x16_t)xmmword_263BAAF90);
      *((_DWORD *)this + 3) = v6;
      *((_DWORD *)this + 4) = 0;
      *(int8x16_t *)((char *)this + 36) = vbslq_s8(v11, (int8x16_t)xmmword_263BAB020, (int8x16_t)xmmword_263BAB010);
      *((_DWORD *)this + 13) = v7;
      *((void *)this + 7) = 0x1000201070108;
      *((_DWORD *)this + 16) = 12336;
      *((_DWORD *)this + 17) = v8;
      *((void *)this + 9) = 0x20B00F9010501F3;
      *((_DWORD *)this + 20) = v9;
      *((_WORD *)this + 42) = v10;
      *((unsigned char *)this + 86) = a2;
      if (v2 == 6) {
        *((_WORD *)this + 42) = 3 * v10;
      }
      return (uint64_t)this + 12;
    case 4:
      unsigned int v13 = *((_DWORD *)this + 2);
      if (v13 > 8) {
        goto LABEL_45;
      }
      if (((1 << v13) & 0x1C6) != 0)
      {
        int v14 = *(_DWORD *)(*(void *)this + 2184);
        *((_DWORD *)this + 4) = 0;
        if (v14 == 4)
        {
          *(_OWORD *)((char *)this + 20) = xmmword_263BAAFD0;
          *((_DWORD *)this + 3) = 2126588388;
          *(_OWORD *)((char *)this + 36) = xmmword_263BAAFE0;
          *(_OWORD *)((char *)this + 52) = xmmword_263BAAFF0;
          *(_OWORD *)((char *)this + 68) = xmmword_263BAB000;
          __int16 v3 = 17215;
        }
        else
        {
          *(_OWORD *)((char *)this + 20) = xmmword_263BAAF90;
          *((_DWORD *)this + 3) = 2119165741;
          *(_OWORD *)((char *)this + 36) = xmmword_263BAAFA0;
          *(_OWORD *)((char *)this + 52) = xmmword_263BAAFB0;
          *(_OWORD *)((char *)this + 68) = xmmword_263BAAFC0;
          __int16 v3 = 17155;
        }
        goto LABEL_5;
      }
      if (v13)
      {
LABEL_45:
        DeviceFaultNotify("glmesrd_rfinit_minnow.cpp", 438, "GetRfInit", (char)"0");
        int v15 = 438;
      }
      else
      {
        DeviceFaultNotify("glmesrd_rfinit_minnow.cpp", 381, "GetRfInit", (char)"0");
        int v15 = 381;
      }
      goto LABEL_46;
    default:
      DeviceFaultNotify("glmesrd_rfinit_minnow.cpp", 443, "GetRfInit", (char)"0");
      int v15 = 443;
      goto LABEL_46;
  }
}

uint64_t BlueFin::GlMeSrdRfInit4777::LockAgcs(uint64_t this)
{
  uint64_t v1 = this;
  if (*(unsigned char *)(this + 2285))
  {
    unsigned int v2 = *(_DWORD *)(this + 2292) & 0x3F | 0xC0511000;
    unsigned int v3 = *(_DWORD *)(this + 2292) & 0x3F | 0xC0B11000;
    BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput(this, 192, 67, 0);
    BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput(v1, 192, 68, v2);
    BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput(v1, 192, 69, 0);
    BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput(v1, 192, 70, v3);
    BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput(v1, 192, 65, 0);
    this = BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput(v1, 192, 66, v2);
  }
  if (*(unsigned char *)(v1 + 2286))
  {
    unsigned int v4 = *(_DWORD *)(v1 + 2296) & 0x3F | 0xC0511000;
    BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput(v1, 192, 72, 0);
    this = BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput(v1, 192, 73, v4);
  }
  if (*(unsigned char *)(v1 + 2287))
  {
    __int16 v5 = BlueFin::GlMeSrdRfInit4777::EncodeDagcGain((BlueFin::GlMeSrdRfInit4777 *)this, (float)*(unsigned int *)(v1 + 2300));
    this = BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput(v1, 192, 75, v5 & 0x3FF);
  }
  if (*(unsigned char *)(v1 + 2288))
  {
    __int16 v6 = BlueFin::GlMeSrdRfInit4777::EncodeDagcGain((BlueFin::GlMeSrdRfInit4777 *)this, (float)*(unsigned int *)(v1 + 2304));
    this = BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput(v1, 192, 77, v6 & 0x3FF);
  }
  if (*(unsigned char *)(v1 + 2289))
  {
    __int16 v7 = BlueFin::GlMeSrdRfInit4777::EncodeDagcGain((BlueFin::GlMeSrdRfInit4777 *)this, (float)*(unsigned int *)(v1 + 2308));
    this = BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput(v1, 192, 79, v7 & 0x3FF);
  }
  if (*(unsigned char *)(v1 + 2290))
  {
    int v8 = BlueFin::GlMeSrdRfInit4777::EncodeDagcGain((BlueFin::GlMeSrdRfInit4777 *)this, (float)*(unsigned int *)(v1 + 2312)) & 0x3FF;
    return BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput(v1, 192, 81, v8);
  }
  return this;
}

uint64_t BlueFin::GlMeSrdRfInit4777::GetESWRadioMode(uint64_t result, _DWORD *a2)
{
  int v2 = *(_DWORD *)(result + 8) - 1;
  if (v2 >= 8 || ((0xE3u >> v2) & 1) == 0)
  {
    DeviceFaultNotify("glmesrd_rfinit_minnow.cpp", 1335, "GetESWRadioMode", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_rfinit_minnow.cpp", 1335, "0");
  }
  *a2 = dword_263BAB0F8[v2];
  return result;
}

uint64_t BlueFin::GlMeSrdRfInit4777::ProgramDrRegs(BlueFin::GlMeSrdRfInit4777 *this)
{
  *((_DWORD *)this + 556) = 0;
  unsigned int v1 = *((_DWORD *)this + 554);
  if (v1 > 6)
  {
LABEL_20:
    __int16 v7 = "0";
    DeviceFaultNotify("glmesrd_rfinit_minnow.cpp", 969, "ProgramDrRegs", (char)"0");
    int v8 = 969;
    goto LABEL_22;
  }
  if (((1 << v1) & 0x5C) == 0)
  {
    if (((1 << v1) & 0x22) != 0)
    {
      BlueFin::GlMeSrdRfInit4777::Add((uint64_t)this, 192, 0x10u, 3);
      BlueFin::GlMeSrdRfInit4777::Add((uint64_t)this, 192, 0x300u, 12582928);
      BlueFin::GlMeSrdRfInit4777::Add((uint64_t)this, 192, 0x304u, 327680);
      BlueFin::GlMeSrdRfInit4777::Add((uint64_t)this, 192, 0x318u, 12582928);
      BlueFin::GlMeSrdRfInit4777::Add((uint64_t)this, 192, 0x31Cu, 327680);
      BlueFin::GlMeSrdRfInit4777::Add((uint64_t)this, 192, 0x30Cu, 12582928);
      BlueFin::GlMeSrdRfInit4777::Add((uint64_t)this, 192, 0x310u, 327680);
      BlueFin::GlMeSrdRfInit4777::Add((uint64_t)this, 192, 0x324u, 12582928);
      BlueFin::GlMeSrdRfInit4777::Add((uint64_t)this, 192, 0x328u, 327680);
      BlueFin::GlMeSrdRfInit4777::Add((uint64_t)this, 192, 0x330u, 12582928);
      BlueFin::GlMeSrdRfInit4777::Add((uint64_t)this, 192, 0x334u, 327680);
      BlueFin::GlMeSrdRfInit4777::Add((uint64_t)this, 192, 0x33Cu, 12582928);
      BlueFin::GlMeSrdRfInit4777::Add((uint64_t)this, 192, 0x340u, 327680);
      BlueFin::GlMeSrdRfInit4777::Add((uint64_t)this, 192, 0x360u, 11141136);
      BlueFin::GlMeSrdRfInit4777::Add((uint64_t)this, 192, 0x364u, 327680);
      BlueFin::GlMeSrdRfInit4777::Add((uint64_t)this, 192, 0x348u, 12582928);
      BlueFin::GlMeSrdRfInit4777::Add((uint64_t)this, 192, 0x34Cu, 327680);
      BlueFin::GlMeSrdRfInit4777::Add((uint64_t)this, 192, 0xFFCu, *((_DWORD *)this + 570));
      goto LABEL_15;
    }
    goto LABEL_20;
  }
  unsigned int v3 = *((_DWORD *)this + 2);
  if (v3 > 8 || ((1 << v3) & 0x1C6) == 0)
  {
    __int16 v7 = "IsValidMinnowRFMode(m_eRFModeConfig)";
    DeviceFaultNotify("glmesrd_rfinit_minnow.cpp", 814, "ProgramDrRegs", (char)"IsValidMinnowRFMode(m_eRFModeConfig)");
    int v8 = 814;
LABEL_22:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_rfinit_minnow.cpp", v8, v7);
  }
  if (v1 - 3 < 2)
  {
    BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 192, 80, 233488);
    __int16 v5 = 81;
LABEL_13:
    BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 192, v5, 458752);
    goto LABEL_14;
  }
  if (v1 == 2)
  {
    BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 192, 80, 163856);
    BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 192, 81, 458752);
    BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 192, 78, 434192);
    __int16 v5 = 79;
    goto LABEL_13;
  }
LABEL_14:
  BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 192, 74, 201719824);
  BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 192, 75, 458752);
  BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 192, 76, 256352272);
  BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 192, 77, 458752);
  BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 192, 64, 1879064320);
  BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 192, 71, 268451584);
  BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 192, 66, -1068429275);
  BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 192, 68, -1065213936);
  BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 192, 69, 1074006017);
  BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 192, 70, -1062137819);
  BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 192, 73, -1068429275);
  BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 192, 20, -65281);
  BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 192, 128, 6316032);
  BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 192, 7, 23);
LABEL_15:
  if (*((unsigned char *)this + 2240)) {
    BlueFin::GlMeSrdRfInit4777::ProgramRegsForVDACCtrl(this);
  }

  return BlueFin::GlMeSrdRfInit4777::LockAgcs((uint64_t)this);
}

void *std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_12,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_12>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  unsigned int v1 = *(void **)(*(void *)(a1 + 8) + 936);
  v1[7] = 0x7FEFFFFFFFFFFFFFLL;
  uint64_t result = (void *)v1[3];
  if (result) {
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 48))(result);
  }
  unsigned int v3 = (void *)v1[4];
  unsigned int v4 = (void *)v1[5];
  if (v3 != v4)
  {
    do
    {
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v6, (uint64_t)v3);
      if (!v7) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t))(*(void *)v7 + 48))(v7);
      uint64_t result = std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v6);
      v3 += 4;
    }
    while (v3 != v4);
    __int16 v5 = (void *)v1[4];
    unsigned int v3 = (void *)v1[5];
    if (v3 != v5)
    {
      do
      {
        v3 -= 4;
        uint64_t result = std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v3);
      }
      while (v3 != v5);
      unsigned int v3 = v5;
    }
  }
  v1[5] = v3;
  return result;
}

void sub_2639A7CD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void std::__function::__func<FireMessageHandler::createGlEngine(void)::$_0,std::allocator<FireMessageHandler::createGlEngine(void)::$_0>,void ()(void)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 8);
  FireMessageHandler::ExclusiveEntryCheck::enter((unsigned int *)(v8 + 1008), 0, a3, a4, a5, a6, a7, a8);
  (*(void (**)(void))(**(void **)(v8 + 1296) + 176))(*(void *)(v8 + 1296));

  FireMessageHandler::ExclusiveEntryCheck::exit((FireMessageHandler::ExclusiveEntryCheck *)(v8 + 1008));
}

#error "2639A7DB4: call analysis failed (funcsize=41)"

uint64_t BlueFin::GlEngineImplStd::Tick(BlueFin::GlEngineImplStd *this, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int *a11, BlueFin::GlPePendingBag *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void (**a17)(BlueFin::GlGpsTime *__hidden this), unint64_t a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25,long long a26,uint64_t a27,uint64_t a28,BlueFin::GlRequestImpl *a29,int a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,char a54,int a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (*((unsigned char *)this + 33)) {
    BlueFin::GlEngineImplStd::DisposeComponents(this, (const char *)1, a3, a4);
  }
  BlueFin::GlPeTimerMgr::Tick((char *)this + 600);
  if (*((unsigned char *)this + 32))
  {
    *(unsigned char *)(*((void *)this + 3) + 179704) = 0;
    return BlueFin::GlEngineImplStd::CommonAPIcode((uint64_t)this, v64, v65, v66, v67, v68, v69, v70, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42,
             a43,
             a44,
             a45,
             a46,
             a47,
             a48,
             a49,
             a50,
             a51,
             a52,
             a53,
             a54,
             a55,
             a56,
             a57,
             a58,
             a59,
             a60,
             a61,
             a62,
             a63);
  }
  else if (*((void *)this + 546))
  {
    uint64_t v72 = (_DWORD *)BlueFin::GlUtils::m_pInstance;
    ++*(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1088);
    v72[273] = (*(uint64_t (**)(void))(**(void **)v72 + 48))();
    return BlueFin::GlComStressTestMgr::Tick((uint64_t)this + 696);
  }
  else
  {
    return BlueFin::GlPeTimerMgr::UpdateExpirationTime((uint64_t)this + 600, 100000000, 0);
  }
}

char *BlueFin::GlPeTimerMgr::Tick(char *this)
{
  if (!this[88])
  {
    uint64_t v1 = (uint64_t)this;
    this[88] = 1;
    this[8] = 0;
    if (*((_DWORD *)this + 4))
    {
      int v2 = (_DWORD *)BlueFin::GlUtils::m_pInstance;
      if (BlueFin::GlUtils::m_pInstance)
      {
        ++*(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1088);
        this = (char *)(*(uint64_t (**)(void))(**(void **)v2 + 48))();
        v2[273] = this;
      }
      while (*(int *)(v1 + 16) >= 1)
      {
        uint64_t v3 = *(void *)(v1 + 24);
        int v4 = *(_DWORD *)(v3 + 28);
        int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 184))(v3);
        this = BlueFin::GlUtils::m_pInstance
             ? (char *)*(unsigned int *)(BlueFin::GlUtils::m_pInstance + 1092)
             : (char *)(*(uint64_t (**)(void))(**(void **)v1 + 56))();
        if (v5 + v4 - (int)this > 0) {
          break;
        }
        *(unsigned char *)(v1 + 89) = 0;
        __int16 v6 = *(void (**)(uint64_t))(v3 + 64);
        if (!v6 || (v6(v3), !*(unsigned char *)(v1 + 89)))
        {
          unsigned int v12 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 192))(v3);
          if (v12 < 2)
          {
            int v15 = *(void (**)(uint64_t))(v3 + 56);
            if (v15) {
              v15(v3);
            }
            BlueFin::GlRequestBase::Destroy(v3);
            *(void *)(v1 + 24) = 0;
          }
          else
          {
            (*(void (**)(uint64_t, void))(*(void *)v3 + 376))(v3, v12 - 1);
            int v13 = *(_DWORD *)(v3 + 28);
            int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 184))(v3) + v13;
            if (v14 == -1)
            {
              if (BlueFin::GlUtils::m_pInstance) {
                int v14 = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092);
              }
              else {
                int v14 = -1;
              }
            }
            *(_DWORD *)(v3 + 28) = v14;
          }
        }
        this = BlueFin::GlPeTimerMgr::Sort((BlueFin::GlPeTimerMgr *)v1, v7, v8, v9, v10, v11);
      }
    }
    *(unsigned char *)(v1 + 88) = 0;
  }
  return this;
}

void sub_2639A8124(_Unwind_Exception *a1)
{
  *(unsigned char *)(v1 + 88) = 0;
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  int v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

uint64_t std::__function::__func<FireMessageHandler::EngineSerialNumberImpl(BlueFin::GlEngine *,unsigned int,unsigned int *,unsigned char)::$_0,std::allocator<FireMessageHandler::EngineSerialNumberImpl(BlueFin::GlEngine *,unsigned int,unsigned int *,unsigned char)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270EB97A8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<FireMessageHandler::EngineSerialNumberImpl(BlueFin::GlEngine *,unsigned int,unsigned int *,unsigned char)::$_0,std::allocator<FireMessageHandler::EngineSerialNumberImpl(BlueFin::GlEngine *,unsigned int,unsigned int *,unsigned char)::$_0>,void ()(void)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 8);
  FireDeviceLog::DeviceLogBase(6, "postStartCompleted,pending,size,%zu", a3, a4, a5, a6, a7, a8, *(void *)(v8 + 1120));
  uint64_t v15 = *(void *)(v8 + 1120);
  if (v15)
  {
    v19[0] = *(_OWORD *)(v8 + 1080);
    *(_OWORD *)(v8 + 1080) = 0u;
    v19[1] = *(_OWORD *)(v8 + 1096);
    *(_OWORD *)(v8 + 1096) = 0u;
    unint64_t v16 = *(void *)(v8 + 1112);
    unint64_t v20 = v16;
    uint64_t v21 = v15;
    *(_OWORD *)(v8 + 1112) = 0u;
    do
    {
      FireMessageHandler::send(v8, *(_DWORD *)(*(void *)(*((void *)&v19[0] + 1) + ((v16 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v16 & 0x3FF)), v9, v10, v11, v12, v13, v14);
      unint64_t v17 = v20;
      uint64_t v18 = v21 - 1;
      unint64_t v16 = v20 + 1;
      unint64_t v20 = v16;
      --v21;
      if (v16 >= 0x800)
      {
        operator delete(**((void ***)&v19[0] + 1));
        unint64_t v16 = v17 - 1023;
        *((void *)&v19[0] + 1) += 8;
        unint64_t v20 = v17 - 1023;
      }
    }
    while (v18);
    std::deque<FireMessageHandler::Message>::~deque[abi:ne180100]((uint64_t)v19);
  }
}

void sub_2639A82D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::deque<FireMessageHandler::Message>::~deque[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlPePendingBag::GetPendingRequestTypes@<X0>(uint64_t this@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2 = *(unsigned __int16 *)(this + 3768);
  if (v2 >= 0x48)
  {
    int v5 = "m_sReqNum < _DIM(m_aptReqList)";
    DeviceFaultNotify("glpe_pendingbag.cpp", 343, "GetPendingRequestTypes", (char)"m_sReqNum < _DIM(m_aptReqList)");
    int v6 = 343;
    goto LABEL_8;
  }
  *a2 = 0;
  if (v2)
  {
    int v3 = 0;
    for (uint64_t i = this + 3776; *(void *)i; i += 8)
    {
      v3 |= 1 << *(_WORD *)(*(void *)i + 16);
      *a2 = v3;
      if (!--v2) {
        return this;
      }
    }
    int v5 = "pReq != nullptr";
    DeviceFaultNotify("glpe_pendingbag.cpp", 350, "GetPendingRequestTypes", (char)"pReq != nullptr");
    int v6 = 350;
LABEL_8:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_pendingbag.cpp", v6, v5);
  }
  return this;
}

uint64_t BlueFin::GlPeLtoMgr::deserializeLtoGnssSigType(BlueFin::GlPeLtoMgr *this, BlueFin::GlSysLogEntry *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  int v6 = &unk_270EC1740;
  unsigned int v7 = 7;
  memset(v8, 0, 62);
  uint64_t result = BlueFin::GlPeLtoGnssSignalTypeInterface::Deserialize((BlueFin::GlPeLtoGnssSignalTypeInterface *)&v6, a2);
  if (result)
  {
    if (v7 > 6) {
      int v4 = "INV";
    }
    else {
      int v4 = off_2655DF758[v7];
    }
    GlCustomLog(14, "LtoMgr: read LTO %s Signal Type Info from NVMEM!\n", v4);
    int v5 = v7;
    if (v7 == 4)
    {
      (*(void (**)(void, _OWORD *, uint64_t))(**((void **)this + 14) + 248))(*((void *)this + 14), v8, 63);
      goto LABEL_9;
    }
    if (!v7)
    {
      (*(void (**)(void, _OWORD *, uint64_t))(**((void **)this + 14) + 240))(*((void *)this + 14), v8, 32);
LABEL_9:
      BlueFin::GlPeLtoFileContentStorageMgr::UpdateLtoToStore((uint64_t)this + 1648, v5, (char *)v8);
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t BlueFin::GlPeLtoGnssSignalTypeInterface::Deserialize(BlueFin::GlPeLtoGnssSignalTypeInterface *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 130 || *((unsigned char *)a2 + 12) != 1) {
    return 0;
  }
  int U8 = BlueFin::GlSysLogEntry::GetU8(a2);
  int v6 = BlueFin::GlImplGnss::m_aucImplGnssTable[U8];
  *((_DWORD *)this + 2) = v6;
  if ((v6 | 4) != 4) {
    return 0;
  }
  if (U8 == 5) {
    unsigned int v7 = 63;
  }
  else {
    unsigned int v7 = 0;
  }
  if (U8) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 32;
  }
  if (v8)
  {
    uint64_t v9 = (char *)this + 12;
    do
    {
      *v9++ = BlueFin::GlSysLogEntry::GetU8(a2);
      --v8;
    }
    while (v8);
  }
  return 1;
}

uint64_t BlueFin::GlPeLtoFileContentStorageMgr::UpdateLtoToStore(uint64_t result, int a2, char *a3)
{
  uint64_t v3 = 0;
  uint64_t v16 = *MEMORY[0x263EF8340];
  int v9 = 0;
  __int16 v10 = 32;
  uint64_t v11 = result + 24700;
  v12[0] = 26;
  v12[2] = 4;
  __int16 v13 = 63;
  uint64_t v14 = result + 24732;
  int v15 = 27;
  for (char i = 1; ; char i = 0)
  {
    char v5 = i;
    if (*(&v9 + 6 * v3) == a2) {
      break;
    }
    uint64_t v3 = 1;
    if ((v5 & 1) == 0) {
      return result;
    }
  }
  uint64_t v6 = *((unsigned __int16 *)&v9 + 12 * v3 + 2);
  if (*((_WORD *)&v9 + 12 * v3 + 2))
  {
    unsigned int v7 = *(unsigned char **)&v12[6 * v3 - 2];
    do
    {
      char v8 = *a3++;
      *v7++ = v8;
      --v6;
    }
    while (v6);
  }
  *(_DWORD *)(result + 24816) |= 1 << LOWORD(v12[6 * v3]);
  return result;
}

uint64_t BlueFin::GlSettingsImpl::SetGpsSignalType(uint64_t this, const unsigned __int8 *a2, int a3)
{
  if (a3 != 32)
  {
    DeviceFaultNotify("glsettings.cpp", 1143, "SetGpsSignalType", (char)"ucNumPrns == NUM_GPS_PRNS");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsettings.cpp", 1143, "ucNumPrns == NUM_GPS_PRNS");
  }
  uint64_t v3 = 0;
  *(unsigned char *)(this + 924) = 1;
  do
  {
    *(unsigned char *)(this + 1008 + v3) = a2[v3];
    ++v3;
  }
  while (v3 != 32);
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetBdsSignalType(uint64_t this, const unsigned __int8 *a2, int a3)
{
  if (a3 != 63)
  {
    DeviceFaultNotify("glsettings.cpp", 1133, "SetBdsSignalType", (char)"ucNumPrns == NUM_BEIDOU_PRNS");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsettings.cpp", 1133, "ucNumPrns == NUM_BEIDOU_PRNS");
  }
  uint64_t v3 = 0;
  *(unsigned char *)(this + 925) = 1;
  do
  {
    *(unsigned char *)(this + 1040 + v3) = a2[v3];
    ++v3;
  }
  while (v3 != 63);
  return this;
}

#error "2639A9D54: call analysis failed (funcsize=3479)"

uint64_t BlueFin::GlMeStateProvider::IsL5MsbEnabled(BlueFin::GlMeStateProvider *this)
{
  return *((unsigned __int8 *)this + 17);
}

uint64_t BlueFin::GlMeStateProvider::IsSimulatorMode(BlueFin::GlMeStateProvider *this)
{
  return *((unsigned __int8 *)this + 18);
}

double BlueFin::GlMeSrdAsicConfig::GetCodeNcoDrift(_DWORD *a1, uint64_t a2)
{
  if ((*(uint64_t (**)(_DWORD *))(*(void *)a1 + 256))(a1)) {
    return 0.000581992;
  }
  unsigned int v5 = a1[3] & 0xF000FFFE;
  if (v5 == 805306386)
  {
    if (a1[547] == 4 && (*(_DWORD *)(a2 + 4) - 1) < 2) {
      return -0.000555118;
    }
    if (a1[546] != 4) {
      return -0.000232172;
    }
    int v9 = *(_DWORD *)(a2 + 4);
    if (v9) {
      BOOL v7 = v9 == 3;
    }
    else {
      BOOL v7 = 1;
    }
    double result = -0.000232172;
    double v8 = -0.000555118;
  }
  else
  {
    double result = 0.0;
    if (v5 != 805306388) {
      return result;
    }
    if (a1[547] == 4 && (*(_DWORD *)(a2 + 4) - 1) < 2) {
      return -0.011247561;
    }
    if (a1[546] != 4) {
      return -0.024885477;
    }
    int v6 = *(_DWORD *)(a2 + 4);
    if (v6) {
      BOOL v7 = v6 == 3;
    }
    else {
      BOOL v7 = 1;
    }
    double result = -0.024885477;
    double v8 = -0.011247561;
  }
  if (v7) {
    return v8;
  }
  return result;
}

uint64_t BlueFin::GlMeSrdReceiverParameters::GetGearNumber(BlueFin::GlMeSrdReceiverParameters *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)BlueFin::GlMeSrdReceiverParameters::rRxIfc(this) + 112);

  return v1();
}

uint64_t BlueFin::GlMeRxParamStd::GetGearNumber(int **this, unsigned int a2)
{
  return (BlueFin::GlMeRxParamStd::GetGearIndexNotGearId(this, a2) + 1);
}

uint64_t BlueFin::GlMeSrdAsicCorrVecTrkMsmt::AddMagSqCvecToAccumulator(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)a1)
  {
    int v4 = "m_bValid";
    DeviceFaultNotify("glmesrd_estimators_input_trk.cpp", 369, "AddMagSqCvecToAccumulator", (char)"m_bValid");
    int v5 = 369;
    goto LABEL_14;
  }
  if (!*(unsigned char *)(a1 + 148))
  {
    int v4 = "m_ucDelaysPerChip > 0";
    DeviceFaultNotify("glmesrd_estimators_input_trk.cpp", 370, "AddMagSqCvecToAccumulator", (char)"m_ucDelaysPerChip > 0");
    int v5 = 370;
    goto LABEL_14;
  }
  if (*(unsigned __int8 *)(a1 + 4) >= 9u)
  {
    int v4 = "m_stMagSqCvec.m_ucCvecLen <= MAX_CVEC_LEN";
    DeviceFaultNotify("glmesrd_estimators_input_trk.cpp", 371, "AddMagSqCvecToAccumulator", (char)"m_stMagSqCvec.m_ucCvecLen <= MAX_CVEC_LEN");
    int v5 = 371;
LABEL_14:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_estimators_input_trk.cpp", v5, v4);
  }
  double v2 = *(float *)(a1 + 176) * 1000.0;
  double v3 = 0.5;
  if (v2 > 0.0 || (double v3 = -0.5, v2 < 0.0))
  {
    if ((int)(v2 + v3) >= 0x100)
    {
      int v4 = "ucCvCohIntInMs == slCvCohIntInMs";
      DeviceFaultNotify("glmesrd_estimators_input_trk.cpp", 375, "AddMagSqCvecToAccumulator", (char)"ucCvCohIntInMs == slCvCohIntInMs");
      int v5 = 375;
      goto LABEL_14;
    }
  }
  int v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 16);

  return v6(a2, a1 + 4);
}

BOOL BlueFin::GlMeSrdSatRptTrkMsmtMI::IsGridRunning(BlueFin::GlMeSrdSatRptTrkMsmtMI *this)
{
  if ((*(unsigned char *)(*(void *)this + 104) & 8) == 0) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 433);
  if (*((unsigned char *)this + 2163)) {
    BOOL v3 = v2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  BOOL v4 = v3;
  if (*((unsigned char *)this + 2163)) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v2 == 0;
  }
  if (!v5) {
    BOOL v4 = !*((unsigned char *)this + 2161) && !*((unsigned char *)this + 2162);
  }
  return !v4;
}

uint64_t BlueFin::GlMeSrdAsicConfig::EnableVeryEarlyDlyMultipathCheck(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 1481);
}

uint64_t BlueFin::GlMeSrdCorrVecAccumulator::AddVec(uint64_t result, unsigned __int8 *a2, char a3, int a4, unsigned int a5, char a6, unsigned int a7, float a8)
{
  LODWORD(v8) = *a2;
  if (v8 >= 9)
  {
    unint64_t v34 = "stCorrVec.m_ucCvecLen <= _DIM(stCorrVec.m_afCvec)";
    DeviceFaultNotify("glmesrd_corrvec_accumulator.cpp", 93, "AddVec", (char)"stCorrVec.m_ucCvecLen <= _DIM(stCorrVec.m_afCvec)");
    int v35 = 93;
    goto LABEL_58;
  }
  if (*((_DWORD *)a2 + 1) != *(_DWORD *)(result + 8))
  {
    unint64_t v34 = "stCorrVec.m_etNominalOrExtendedCvec == m_etNominalOrExtendedCvec";
    DeviceFaultNotify("glmesrd_corrvec_accumulator.cpp", 94, "AddVec", (char)"stCorrVec.m_etNominalOrExtendedCvec == m_etNominalOrExtendedCvec");
    int v35 = 94;
    goto LABEL_58;
  }
  if (*((_DWORD *)a2 + 2) != *(_DWORD *)(result + 12))
  {
    unint64_t v34 = "stCorrVec.m_etCvecNonlinearityType == m_etCvecNonlinearityType";
    DeviceFaultNotify("glmesrd_corrvec_accumulator.cpp", 95, "AddVec", (char)"stCorrVec.m_etCvecNonlinearityType == m_etCvecNonlinearityType");
    int v35 = 95;
    goto LABEL_58;
  }
  int v9 = *(unsigned __int8 *)(result + 21);
  if (v9 == 4)
  {
    BOOL v11 = v8 == 8;
  }
  else
  {
    if (!*(unsigned char *)(result + 21))
    {
      *(unsigned char *)(result + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v8;
      *(_WORD *)(result + 18) = *(_WORD *)(a2 + 1);
      *(unsigned char *)(result + 16) = a3;
      __int16 v10 = (unsigned char *)(result + 17);
LABEL_25:
      *__int16 v10 = a4;
      goto LABEL_26;
    }
    BOOL v11 = 0;
  }
  if (v9 != v8 && !v11)
  {
    unint64_t v34 = "m_ucCorrVecLen == stCorrVec.m_ucCvecLen || bAssertException";
    DeviceFaultNotify("glmesrd_corrvec_accumulator.cpp", 113, "AddVec", (char)"m_ucCorrVecLen == stCorrVec.m_ucCvecLen || bAssertException");
    int v35 = 113;
    goto LABEL_58;
  }
  int v12 = a2[1];
  char v13 = *(unsigned __int8 *)(result + 18) == v12 || v11;
  if ((v13 & 1) == 0)
  {
    unint64_t v34 = "m_bHaveVeryEarlySample == stCorrVec.m_bHaveVeryEarlySample || bAssertException";
    DeviceFaultNotify("glmesrd_corrvec_accumulator.cpp", 114, "AddVec", (char)"m_bHaveVeryEarlySample == stCorrVec.m_bHaveVeryEarlySample || bAssertException");
    int v35 = 114;
    goto LABEL_58;
  }
  int v14 = a2[2];
  char v15 = *(unsigned __int8 *)(result + 19) == v14 || v11;
  if ((v15 & 1) == 0)
  {
    unint64_t v34 = "m_ucIdxOfFirstVeryEarlySample == stCorrVec.m_ucIdxOfFirstVeryEarlySample || bAssertException";
    DeviceFaultNotify("glmesrd_corrvec_accumulator.cpp", 115, "AddVec", (char)"m_ucIdxOfFirstVeryEarlySample == stCorrVec.m_ucIdxOfFirstVeryEarlySample || bAssertException");
    int v35 = 115;
    goto LABEL_58;
  }
  __int16 v10 = (unsigned char *)(result + 17);
  char v16 = *(unsigned __int8 *)(result + 17) == a4 || v11;
  if ((v16 & 1) == 0)
  {
    unint64_t v34 = "m_ucCvecPromptIdx == ucCvecPromptIdx || bAssertException";
    DeviceFaultNotify("glmesrd_corrvec_accumulator.cpp", 117, "AddVec", (char)"m_ucCvecPromptIdx == ucCvecPromptIdx || bAssertException");
    int v35 = 117;
LABEL_58:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_corrvec_accumulator.cpp", v35, v34);
  }
  if (v11)
  {
    *(unsigned char *)(result + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v8;
    *(unsigned char *)(result + 18) = v12;
    *(unsigned char *)(result + 19) = v14;
    *(unsigned char *)(result + 16) = a3;
    goto LABEL_25;
  }
LABEL_26:
  if (*(unsigned char *)(result + 489) || *(unsigned char *)(result + 488))
  {
    unsigned int v17 = *(_DWORD *)(*(void *)(result + 480) + 40 * *(unsigned __int8 *)(result + 489));
    BOOL v18 = a5 >= v17;
    unsigned int v19 = a5 - v17;
    if (!v19) {
      return result;
    }
    if (!v18)
    {
      for (uint64_t i = 0; i != 400; i += 40)
      {
        uint64_t v21 = *(void *)(result + 480) + i;
        *(_OWORD *)(v21 + 24) = 0uLL;
        *(_OWORD *)(v21 + 8) = 0uLL;
        *(_DWORD *)uint64_t v21 = 0;
        *(_DWORD *)(v21 + 3) = 0;
      }
LABEL_36:
      unsigned int v24 = 0;
      *(unsigned char *)(result + 22) = 0;
      LODWORD(v8) = *a2;
      goto LABEL_39;
    }
    if (v19 > a7)
    {
      for (uint64_t j = 0; j != 400; j += 40)
      {
        uint64_t v23 = *(void *)(result + 480) + j;
        *(_OWORD *)(v23 + 24) = 0uLL;
        *(_OWORD *)(v23 + 8) = 0uLL;
        *(_DWORD *)uint64_t v23 = 0;
        *(_DWORD *)(v23 + 3) = 0;
      }
      goto LABEL_36;
    }
    unsigned int v24 = *(unsigned __int8 *)(result + 488);
  }
  else
  {
    unsigned int v24 = 0;
  }
LABEL_39:
  uint64_t v25 = *(void *)(result + 480);
  if (v8)
  {
    uint64_t v8 = v8;
    double v26 = (_DWORD *)(v25 + 40 * v24 + 8);
    unsigned __int8 v27 = (int *)(a2 + 16);
    do
    {
      int v28 = *v27++;
      *v26++ = v28;
      --v8;
    }
    while (v8);
  }
  uint64_t v29 = v25 + 40 * v24;
  *(_DWORD *)uint64_t v29 = a5;
  *(unsigned char *)(v29 + 4) = a2[13];
  double v30 = a8;
  if (a8 <= 0.0)
  {
    if (a8 >= 0.0)
    {
      LOBYTE(v32) = 0;
      goto LABEL_48;
    }
    double v31 = -0.5;
  }
  else
  {
    double v31 = 0.5;
  }
  int v32 = (int)(v30 + v31);
LABEL_48:
  uint64_t v33 = v25 + 40 * v24;
  *(unsigned char *)(v33 + 5) = v32;
  *(unsigned char *)(v33 + 6) = a6;
  *(unsigned char *)(result + 488) = v24 + 1;
  *(unsigned char *)(result + 489) = v24;
  if (*(unsigned __int8 *)(result + 20) <= (v24 + 1))
  {
    *(unsigned char *)(result + 488) = 0;
    *(unsigned char *)(result + 22) = 1;
  }
  return result;
}

uint64_t BlueFin::GlMeSrdEstMultipath::Run(uint64_t a1, int a2, uint64_t a3, int a4, unsigned __int8 *a5, BlueFin::GlMeSrdCNoResults *this, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14, unsigned __int8 a15, char a16, char a17, unsigned __int8 a18, uint64_t a19)
{
  unsigned int v19 = this;
  uint64_t result = BlueFin::GlMeSrdCNoResults::isGarbage(this);
  if (result)
  {
    uint64_t v82 = "!stCNoResults.isGarbage()";
    DeviceFaultNotify("glmesrd_multipath.cpp", 75, "Run", (char)"!stCNoResults.isGarbage()");
    uint64_t v83 = "glmesrd_multipath.cpp";
    int v84 = 75;
    goto LABEL_102;
  }
  unsigned int v24 = *((unsigned __int16 *)a5 + 4);
  if (v24 >= 0x23F)
  {
    uint64_t v82 = "otSignalId.IsValid()";
    DeviceFaultNotify("glmesrd_multipath.cpp", 76, "Run", (char)"otSignalId.IsValid()");
    uint64_t v83 = "glmesrd_multipath.cpp";
    int v84 = 76;
    goto LABEL_102;
  }
  if ((unsigned __int8 *)(a1 + 12) != a5)
  {
    *(unsigned char *)(a1 + 12) = *a5;
    *(_DWORD *)(a1 + 16) = *((_DWORD *)a5 + 1);
    *(_WORD *)(a1 + 20) = v24;
  }
  if (!*(unsigned char *)v19)
  {
    *(_DWORD *)(a19 + 4) = 0;
    return result;
  }
  uint64_t v25 = a13;
  float v26 = *(float *)(*(void *)(a3 + 24) + 4);
  float v27 = BlueFin::GlMeSrdEstMultipath::Run(BlueFin::GlMeSrdPhysConst const&,BlueFin::GlMeSrdGlbTrkParams const&,BlueFin::GlMeGearTrkParams const&,BlueFin::GlSignalId const&,BlueFin::GlMeSrdCNoResults const&,BlueFin::GlMeSrdTrkAidStatus const&,BOOL,unsigned int,BlueFin::GlMeSrdAsicCorrVecTrkMsmt const&,BlueFin::GlMeSrdAsicCorrVecTrkMsmt const&,BlueFin::GlMeSrdPkFitResults const&,BlueFin::GlMeSrdPkFitResults const&,unsigned char,unsigned char,BOOL,BOOL,BOOL,BlueFin::GlMeSrdMultipathResults &)::fVeryLowThreshholds[4 * BlueFin::GlSvId::s_aucSvId2gnss[*a5] + *((int *)a5 + 1)];
  if (*(_DWORD *)a12 == 1) {
    int PkFitMultipathIndicator = BlueFin::GlMeSrdEstMultipath::GetPkFitMultipathIndicator((BlueFin::GlMeSrdEstMultipath *)*(unsigned __int8 *)(a12 + 44), *((float *)v19 + 2), *(float *)(a12 + 8), *(float *)(a12 + 28), *(unsigned __int8 *)(a12 + 45), a14, a15, a18, *(float *)(*(void *)(a3 + 24) + 4), BlueFin::GlMeSrdEstMultipath::Run(BlueFin::GlMeSrdPhysConst const&,BlueFin::GlMeSrdGlbTrkParams const&,BlueFin::GlMeGearTrkParams const&,BlueFin::GlSignalId const&,BlueFin::GlMeSrdCNoResults const&,BlueFin::GlMeSrdTrkAidStatus const&,BOOL,unsigned int,BlueFin::GlMeSrdAsicCorrVecTrkMsmt const&,BlueFin::GlMeSrdAsicCorrVecTrkMsmt const&,BlueFin::GlMeSrdPkFitResults const&,BlueFin::GlMeSrdPkFitResults const&,unsigned char,unsigned char,BOOL,BOOL,BOOL,BlueFin::GlMeSrdMultipathResults &)::fVeryLowThreshholds[4 * BlueFin::GlSvId::s_aucSvId2gnss[*a5] + *((int *)a5 + 1)]);
  }
  else {
    int PkFitMultipathIndicator = 0;
  }
  *(_DWORD *)(a19 + 8) = *(_DWORD *)(a12 + 8);
  *(float *)(a19 + 16) = *(float *)(a12 + 40) / *(float *)(a12 + 36);
  if (*(_DWORD *)a13 == 1) {
    uint64_t result = BlueFin::GlMeSrdEstMultipath::GetPkFitMultipathIndicator((BlueFin::GlMeSrdEstMultipath *)*(unsigned __int8 *)(a13 + 44), *((float *)v19 + 2), *(float *)(a13 + 8), *(float *)(a13 + 28), *(unsigned __int8 *)(a13 + 45), a14, a15, a18, v26, v27);
  }
  else {
    uint64_t result = 0;
  }
  float v29 = *(float *)(a13 + 8);
  *(float *)(a19 + 12) = v29;
  *(float *)(a19 + 20) = *(float *)(a13 + 40) / *(float *)(a13 + 36);
  if (result)
  {
    *(_DWORD *)(a19 + 4) = result;
  }
  else
  {
    if (!PkFitMultipathIndicator)
    {
      BOOL v30 = 0;
      *(_DWORD *)(a19 + 4) = 0;
      goto LABEL_18;
    }
    *(_DWORD *)(a19 + 4) = PkFitMultipathIndicator;
    float v29 = *(float *)(a12 + 8);
  }
  BOOL v30 = v29 > 0.5;
LABEL_18:
  int v31 = 0;
  *(unsigned char *)a19 = v30;
  int v32 = *(unsigned __int8 *)(a1 + 8);
  if (!*(unsigned char *)(a1 + 8))
  {
    if (a16)
    {
      int v31 = 0;
      *(_DWORD *)(a19 + 44) = 1135869952;
      if (*(unsigned char *)v19)
      {
        if (*((float *)v19 + 2) >= 30.0)
        {
          uint64_t v33 = a10;
          uint64_t v34 = *(unsigned int *)(a10 + 156);
          float v35 = *(float *)(a10 + 176) * 1000.0;
          double v36 = 0.5;
          if (v35 <= 0.0 && (double v36 = -0.5, v35 >= 0.0)
            || (int)(v36 + v35) <= 4
            && (v34 != 2 || (double v60 = 0.5, v35 <= 0.0) && (double v60 = -0.5, v35 >= 0.0) || (int)(v60 + v35) < 4))
          {
            int v31 = 0;
            goto LABEL_70;
          }
          uint64_t v37 = *(unsigned __int8 *)(a10 + 52);
          if (*(unsigned char *)(a10 + 52))
          {
            int v85 = v32;
            unsigned int v86 = result;
            unint64_t v38 = 0;
            int v39 = *(unsigned __int8 *)(a10 + 53);
            unint64_t v40 = *(unsigned __int8 *)(a10 + 54);
            BOOL v43 = (*(unsigned char *)(a10 + 152) + 117) < 0x24u && v34 == 0 || v34 == 3;
            double v44 = -1000000.0;
            double v45 = 1000000.0;
            uint64_t v87 = a1;
            do
            {
              BOOL v47 = v34 == 2 && v38 > 4;
              BOOL v48 = v38 < v40 || v39 == 0;
              if (v48 && !v47 && (v38 - 5 >= 0xFFFFFFFD || !v43))
              {
                unint64_t v50 = v33 + 4 * v38;
                float v51 = *(float *)(v50 + 68);
                float v52 = *(float *)(v50 + 116);
                if (v51 != 0.0 || (double v53 = 0.0, v52 != 0.0))
                {
                  double v54 = v19;
                  uint64_t v55 = v33;
                  uint64_t v56 = v34;
                  BOOL v57 = v43;
                  float v58 = atan2f(v52, v51);
                  BOOL v43 = v57;
                  uint64_t v34 = v56;
                  uint64_t v25 = a13;
                  a1 = v87;
                  uint64_t v33 = v55;
                  unsigned int v19 = v54;
                  double v53 = (float)(v58 * 360.0) / 6.28318531;
                }
                if (v53 < v45) {
                  double v45 = v53;
                }
                if (v53 > v44) {
                  double v44 = v53;
                }
              }
              ++v38;
            }
            while (v37 != v38);
            float v59 = v44 - v45;
            *(float *)(a19 + 44) = v59;
            int v32 = v85;
            uint64_t result = v86;
            if (v44 - v45 > 50.0)
            {
              int v31 = 4;
              *(_DWORD *)(a19 + 4) = 4;
              goto LABEL_70;
            }
          }
          else
          {
            *(_DWORD *)(a19 + 44) = -906746880;
          }
          int v31 = 2;
        }
      }
    }
  }
LABEL_70:
  *(_DWORD *)(a19 + 48) = v31;
  *(_DWORD *)(a19 + 52) = 0;
  float v61 = *(float *)(v25 + 16);
  int v62 = *(_DWORD *)(v25 + 20);
  *(float *)(a19 + 56) = v61;
  *(_DWORD *)(a19 + 60) = 0;
  *(_DWORD *)(a19 + 64) = v62;
  if (!v32 && a17 && result && !*((_DWORD *)a5 + 1))
  {
    if (*(unsigned __int16 *)(a1 + 20) >= 0x23Fu)
    {
      uint64_t v82 = "IsValid()";
      DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
      uint64_t v83 = "glsignalid.h";
      int v84 = 678;
      goto LABEL_102;
    }
    if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *(int *)(a1 + 16)
                                                                - *(int *)(a1 + 16)
                                                                + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)(a1 + 12)]])
    {
      uint64_t v82 = "ucMsPerEpoch != 0";
      DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
      uint64_t v83 = "glsignalid.h";
      int v84 = 685;
      goto LABEL_102;
    }
    float v63 = *(float *)(a11 + 176);
    if ((float)(v63 * 1000.0) <= 0.0)
    {
      if ((float)(v63 * 1000.0) >= 0.0)
      {
        int v65 = 0;
        goto LABEL_82;
      }
      double v64 = -0.5;
    }
    else
    {
      double v64 = 0.5;
    }
    int v65 = (int)((float)(v63 * 1000.0) + v64);
LABEL_82:
    if (v65 < 5 || !*(unsigned char *)v19 || *((float *)v19 + 2) < 20.0)
    {
LABEL_98:
      *(float *)(a19 + 56) = v61;
      return result;
    }
    float v66 = (float)((float)*(unsigned __int8 *)(v25 + 45) * 0.2) / v63;
    double v67 = 0.5;
    if (v66 > 0.0 || (double v67 = -0.5, v66 < 0.0))
    {
      unsigned int v68 = (int)(v67 + v66);
      if (v68)
      {
        float v69 = (double)BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *(int *)(a1 + 16)
                                                                                             - *(int *)(a1 + 16)
                                                                                             + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)(a1 + 12)]]
            * 0.001;
        float v70 = (float)(v63 / v69) * *((float *)v19 + 3);
        float v71 = v70 + 1.0;
        float v72 = (float)((float)((float)((float)(v70 * 2.0) + 1.0) * 13.831) / (float)v68) - (float)(v71 * v71);
        float v73 = v71 + v71;
        float v74 = (float)((float)((float)(13.831 / (float)v68) + -1.0) * (float)(v72 * -4.0)) + (float)(v73 * v73);
        if (v74 >= 0.0)
        {
          float v75 = -v73;
          float v76 = sqrtf(v74);
          float v77 = v72 + v72;
          float v78 = (float)(v76 - v73) / v77;
          float v79 = (float)(v75 - v76) / v77;
          if (v79 < v78) {
            float v79 = v78;
          }
          if (v79 < 0.1) {
            float v79 = 0.1;
          }
          if (v79 < 0.8)
          {
            if (v61 <= v79)
            {
              int v80 = 2;
            }
            else
            {
              int v80 = 4;
              *(_DWORD *)(a19 + 4) = 4;
            }
            *(_DWORD *)(a19 + 52) = v80;
            float v61 = *(float *)(v25 + 16);
            int v81 = *(_DWORD *)(v25 + 20);
            *(float *)(a19 + 60) = v79;
            *(_DWORD *)(a19 + 64) = v81;
          }
        }
        goto LABEL_98;
      }
    }
    uint64_t v82 = "ulNumCohIntervals > 0";
    DeviceFaultNotify("glmesrd_multipath.cpp", 606, "GetVeryEarlyThreshold", (char)"ulNumCohIntervals > 0");
    uint64_t v83 = "glmesrd_multipath.cpp";
    int v84 = 606;
LABEL_102:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v83, v84, v82);
  }
  return result;
}

uint64_t BlueFin::GlMeSrdEstMultipath::GetPkFitMultipathIndicator(BlueFin::GlMeSrdEstMultipath *this, float a2, float a3, float a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned __int8 a8, float a9, float a10)
{
  if (!this)
  {
    DeviceFaultNotify("glmesrd_multipath.cpp", 440, "GetPkFitMultipathIndicator", (char)"ucNumCvecsAveraged > 0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_multipath.cpp", 440, "ucNumCvecsAveraged > 0");
  }
  unsigned int v10 = this;
  uint64_t result = 0;
  if (v10 >= a6 && a5 >= a7)
  {
    if (a2 >= 42.5) {
      goto LABEL_10;
    }
    if (fabsf(a4) > 0.4) {
      return 4;
    }
    float v12 = 1.0;
    if (((a6 == 10) & a8) != 0) {
      float v12 = 4.0;
    }
    if ((float)(v12 * a9) >= a3)
    {
LABEL_10:
      if (a3 < a10) {
        return 1;
      }
      else {
        return 2;
      }
    }
    else
    {
      return 4;
    }
  }
  return result;
}

void BlueFin::GlMeSrdEstCarrPrm::Run(uint64_t a1, double *a2, uint64_t a3, float *a4, float *a5, uint64_t a6, double a7, uint64_t a8, float *a9, uint64_t a10, char a11, unsigned __int8 a12, unsigned __int8 a13, unsigned __int8 a14, char a15, unsigned __int8 a16, unsigned __int16 a17, unsigned __int8 a18, unsigned __int8 a19, char a20,char a21,uint64_t a22,uint64_t a23,unsigned __int8 *a24,char a25,unsigned int a26,uint64_t a27,unsigned char *a28,unsigned __int8 a29,float *a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (!*(unsigned char *)a22)
  {
    double v67 = "stAsicCarrPrmTrkMsmt.bValid";
    DeviceFaultNotify("glmesrd_carrprm.cpp", 1719, "Run", (char)"stAsicCarrPrmTrkMsmt.bValid");
    int v68 = 1719;
    goto LABEL_63;
  }
  int v33 = *a24;
  if ((v33 - 1) >= 0xBC)
  {
    double v67 = "otSignalId.GetSvId().isValid()";
    DeviceFaultNotify("glmesrd_carrprm.cpp", 1720, "Run", (char)"otSignalId.GetSvId().isValid()");
    int v68 = 1720;
    goto LABEL_63;
  }
  uint64_t v34 = (uint64_t)a9;
  float v35 = a4;
  unsigned int v38 = a26;
  if ((unsigned __int8 *)(a1 + 456) != a24)
  {
    *(unsigned char *)(a1 + 456) = v33;
    *(_DWORD *)(a1 + 460) = *((_DWORD *)a24 + 1);
    *(_WORD *)(a1 + 464) = *((_WORD *)a24 + 4);
  }
  *(unsigned char *)(a1 + 468) = a25;
  *(double *)(a1 + 472) = a7;
  BOOL v40 = a13 < 5u && a26 > 0x3E8;
  int v41 = *(unsigned char *)(a22 + 122) != 0;
  if ((a15 & 1) == 0)
  {
    if (*(unsigned char *)(a22 + 122)) {
      int v41 = !v40;
    }
    else {
      int v41 = 0;
    }
  }
  char v42 = a21 & ~a12;
  if (*(float *)(a27 + 176) <= 0.002) {
    char v42 = 0;
  }
  *(float *)&double v43 = *(float *)(a27 + 4 * *(unsigned __int8 *)(a27 + 149) + 20) * (float)a17;
  char v44 = *(unsigned char *)(a22 + 8);
  if (v44)
  {
    uint64_t v45 = *(void *)(a22 + 24);
    double v46 = *(float *)(a22 + 12);
    float v47 = 1.0 / (float)(*a4 + *a4);
    char v44 = 1;
  }
  else
  {
    float v47 = 0.0;
    uint64_t v45 = 0;
    double v46 = 0.0;
  }
  char v48 = v42 & (a14 ^ 1);
  *(unsigned char *)a33 = v44;
  *(void *)(a33 + 8) = v45;
  *(_DWORD *)(a33 + 16) = 0;
  *(unsigned char *)(a33 + 20) = v44;
  *(double *)(a33 + 24) = v46;
  *(float *)(a33 + 32) = v47;
  float v49 = *(float *)&v43 / (float)a16;
  if (*(unsigned char *)(a22 + 48))
  {
    uint64_t v50 = a3;
    char v53 = v42 & (a14 ^ 1);
    BlueFin::GlMeSrdEstCarrPrm::EstTrkCarrPrmViaOpenLpLagOne(a1, a2, a3, a6, a22, a9, a30, a33, *a4, v49, a16, a17, a11, a12, v40, v40 | a11 | a14, a18, v48);
    char v48 = v53;
    unsigned int v38 = a26;
    uint64_t v34 = (uint64_t)a9;
    float v35 = a4;
    a3 = v50;
  }
  float v69 = a2;
  if (*(unsigned char *)(a22 + 72))
  {
    *(_DWORD *)(a33 + 11BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
    *(_OWORD *)(a33 + 80) = 0u;
    *(_OWORD *)(a33 + 96) = 0u;
    double v43 = *(double *)(a22 + 80);
    double v54 = *(double *)(a22 + 24) + 0.0;
    double v55 = v43 + *(float *)(a22 + 16);
    *(double *)(a33 + 88) = v43;
    *(double *)(a33 + 96) = v55;
    *(double *)(a33 + 80) = v54;
    *(_DWORD *)(a33 + 104) = 1102053376;
    *(_WORD *)(a33 + 113) = 257;
  }
  if (*(unsigned char *)(a22 + 88))
  {
    uint64_t v56 = a3;
    int v57 = v41;
    float v58 = v35;
    BlueFin::GlMeSrdEstCarrPrm::EstTrkCarrPrmViaClosedLpFll(a1, v34, a3, a5, a6, a22, v57, a19, *v35, v49, v40, a20, v48, v38, a29, (uint64_t)a30, a33);
    float v35 = v58;
    a3 = v56;
  }
  if (*(unsigned char *)(a22 + 144))
  {
    if (*(unsigned char *)(a22 + 170)) {
      int v59 = !v40;
    }
    else {
      int v59 = 0;
    }
    BlueFin::GlMeSrdEstCarrPrm::EstTrkCarrPrmViaClosedLpPll(a1, a3, a22, a23, v59, a29, (uint64_t)a30, a33, v69[1], *v35, a5[8]);
  }
  if ((a20 & 1) == 0) {
    BlueFin::GlMeSrdEstCarrPrm::CrossCheckTrkCarrPrmEst(a6, a33, *(float *)&v43);
  }
  BlueFin::GlMeSrdEstCarrPrm::SelectPublishedTrkCarrPrmEst(a6, (unsigned __int8 *)a33, a14, a29, a32);
  if (!*(unsigned char *)(a22 + 8))
  {
    double v67 = "stAsicCarrPrmTrkMsmt.stAcqPrm.bValid";
    DeviceFaultNotify("glmesrd_carrprm.cpp", 1842, "Run", (char)"stAsicCarrPrmTrkMsmt.stAcqPrm.bValid");
    int v68 = 1842;
LABEL_63:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_carrprm.cpp", v68, v67);
  }
  int v60 = *(_DWORD *)(a31 + 20);
  *(_DWORD *)(a32 + 92) = v60;
  *(_DWORD *)(a32 + 96) = *(_DWORD *)(a31 + 8);
  if (v60 == 3)
  {
    if (!*(unsigned char *)(a32 + 1)) {
      goto LABEL_41;
    }
    uint64_t v61 = *(char *)(a31 + 16);
    if (v61 == -1) {
      goto LABEL_41;
    }
    uint64_t v62 = a31 + 4 * v61;
    if (*(float *)(v62 + 24) >= 0.2) {
      goto LABEL_41;
    }
    float v63 = *(double *)(a32 + 8);
    float v64 = *(float *)(v62 + 44) - v63;
    if (v64 < 0.0) {
      float v64 = -v64;
    }
    if (v64 >= 3.0)
    {
LABEL_41:
      *(unsigned char *)(a32 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
      *(_WORD *)(a32 + 34) = 0;
      *(unsigned char *)(a32 + 36) = 0;
      *(_DWORD *)(a32 + 20) = 0;
      *(_DWORD *)(a32 + 68) = 0;
    }
  }
  if (*(unsigned char *)(a22 + 88))
  {
    *(unsigned char *)(a32 + 28) = 1;
    *(unsigned char *)(a32 + 29) = *(unsigned char *)(a33 + 121) ^ 1;
    *(unsigned char *)(a32 + 3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 1;
    *(unsigned char *)(a32 + 32) = *(unsigned char *)(a33 + 160) ^ 1;
    *(unsigned char *)(a32 + 33) = *(unsigned char *)(a33 + 196) ^ 1;
  }
  BlueFin::GlMeSrdEstCarrPrm::OverrideTrkCarrPrmRmse(a1, (const BlueFin::GlSignalId *)*(unsigned __int8 *)a30, a32, a30[2]);
  if (fabsf(a5[5] + -0.02) < 0.00000011921
    && fabsf(a5[4] + -0.005) < 0.00000011921
    && *a28
    && (*(unsigned char *)(a1 + 456) + 117) >= 0x24u
    && *(unsigned char *)a27
    && *(unsigned char *)a30
    && a30[2] >= 20.0
    && (float)(*(float *)&a28[4 * a28[149] + 20]
             / *(float *)(a27 + 4 * *(unsigned __int8 *)(a27 + 149) + 20)) <= 1.122)
  {
    *(unsigned char *)(a32 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
    float v65 = *(float *)(a32 + 16);
    if (v65 < 1000.0) {
      float v65 = 1000.0;
    }
    *(float *)(a32 + 16) = v65;
    *(_DWORD *)(a32 + 20) = 0;
  }
  if (*(_DWORD *)(a31 + 20) == 2 && *(unsigned char *)(a32 + 1))
  {
    float v66 = *(float *)(a31 + 8);
    if (*(float *)(a32 + 16) < v66)
    {
      *(_WORD *)(a32 + 34) = 0;
      *(unsigned char *)(a32 + 36) = 0;
      *(_DWORD *)(a32 + 68) = 0;
      *(float *)(a32 + 16) = v66;
    }
  }
}

uint64_t BlueFin::GlMeSrdAsicNavBitTrkMsmt::isGarbage(BlueFin::GlMeSrdAsicNavBitTrkMsmt *this)
{
  uint64_t v1 = *(unsigned __int8 *)this;
  if (*(unsigned char *)this)
  {
    uint64_t v1 = *((unsigned __int8 *)this + 394);
    if (*((unsigned char *)this + 394)) {
      uint64_t v1 = *((unsigned __int8 *)this + 396) == 255 || *((unsigned __int8 *)this + 395) == 255;
    }
    if (*((__int16 *)this + 2) == -1
      || *((_DWORD *)this + 100) == -1
      || *((__int16 *)this + 330) == -1
      || *((_DWORD *)this + 166) == -1
      || *((__int16 *)this + 336) == -1
      || *((_DWORD *)this + 167) == -1)
    {
      return 1;
    }
  }
  return v1;
}

uint64_t BlueFin::GlMeSrdAsicConfig::EnableIdcMultipathCheck(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 1480);
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetMIAdjustmentLimits(uint64_t this, __int16 *a2, __int16 *a3)
{
  *a2 = *(_WORD *)(this + 1476);
  *a3 = *(_WORD *)(this + 1478);
  return this;
}

double BlueFin::GlMeSrdAsicConfig::GetCarrierNcoDrift(BlueFin::GlMeSrdAsicConfig *this, const BlueFin::GlSignalId *a2)
{
  BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1);
  int v4 = *((_DWORD *)this + 3);
  if ((v4 & 0xF000FFFE) == 0x30000014) {
    goto LABEL_12;
  }
  if ((v4 & 0xF000FFFE) != 0x30000012)
  {
    double result = 0.0;
    if ((v4 & 0xF100FFFE) != 0x31000014) {
      return result;
    }
LABEL_12:
    uint64_t v9 = *(unsigned __int8 *)a2;
    double result = 0.0;
    if (!*(unsigned char *)a2) {
      return result;
    }
    if (v9 >= 0x21)
    {
      if (v9 < 0x42)
      {
        if (v9 >= 0x34)
        {
          uint64_t v11 = (v9 << 56) - 0x3B00000000000000;
          int v12 = *((_DWORD *)this + 546);
          char v13 = (char *)&BlueFin::GlMeSrdAsicConfig::GetCarrierNcoDrift(BlueFin::GlSignalId const&)const::dGlnCphDriftRateMinnowLp;
          int v14 = (char *)&BlueFin::GlMeSrdAsicConfig::GetCarrierNcoDrift(BlueFin::GlSignalId const&)const::dGlnCphDriftRateMinnowVlp;
          goto LABEL_32;
        }
      }
      else if (v9 >= 0x4C)
      {
        if (v9 < 0x8B)
        {
          int v17 = BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)a2 + 1)
                                                                       - *((int *)a2 + 1)
                                                                       + BlueFin::GlSvId::s_aucSvId2gnss[v9]];
          if (v17 == 13) {
            goto LABEL_40;
          }
          if (v17 == 8) {
            goto LABEL_17;
          }
          if (v17 != 7)
          {
            BOOL v7 = *((_DWORD *)this + 546) == 4;
            uint64_t v8 = (double *)&unk_263BAC170;
            return v8[v7];
          }
          goto LABEL_39;
        }
        if (v9 > 0xAE)
        {
          if (v9 > 0xBC) {
            return result;
          }
          BOOL v7 = *((_DWORD *)this + 547) == 4;
          uint64_t v8 = (double *)&unk_263BAC180;
          return v8[v7];
        }
      }
    }
    int v10 = BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)a2 + 1)
                                                                 - *((int *)a2 + 1)
                                                                 + BlueFin::GlSvId::s_aucSvId2gnss[v9]];
    if (v10 == 5)
    {
LABEL_17:
      BOOL v7 = *((_DWORD *)this + 547) == 4;
      uint64_t v8 = (double *)&unk_263BAC150;
      return v8[v7];
    }
    if (v10 != 4)
    {
      if (v10 == 2) {
        goto LABEL_17;
      }
LABEL_40:
      BOOL v7 = *((_DWORD *)this + 546) == 4;
      uint64_t v8 = (double *)&unk_263BAC140;
      return v8[v7];
    }
LABEL_39:
    BOOL v7 = *((_DWORD *)this + 547) == 4;
    uint64_t v8 = (double *)&unk_263BAC160;
    return v8[v7];
  }
  uint64_t v5 = *(unsigned __int8 *)a2;
  double result = 0.0;
  if (!*(unsigned char *)a2) {
    return result;
  }
  if (v5 < 0x21) {
    goto LABEL_27;
  }
  if (v5 >= 0x42)
  {
    if (v5 >= 0x4C)
    {
      if (v5 < 0x8B)
      {
        int v18 = BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)a2 + 1)
                                                                     - *((int *)a2 + 1)
                                                                     + BlueFin::GlSvId::s_aucSvId2gnss[v5]];
        if (v18 == 13) {
          goto LABEL_45;
        }
        if (v18 == 8) {
          goto LABEL_30;
        }
        if (v18 != 7)
        {
          BOOL v7 = *((_DWORD *)this + 546) == 4;
          uint64_t v8 = (double *)&unk_263BAC120;
          return v8[v7];
        }
        goto LABEL_44;
      }
      if (v5 > 0xAE)
      {
        if (v5 > 0xBC) {
          return result;
        }
        BOOL v7 = *((_DWORD *)this + 547) == 4;
        uint64_t v8 = (double *)&unk_263BAC130;
        return v8[v7];
      }
    }
LABEL_27:
    int v15 = BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)a2 + 1)
                                                                 - *((int *)a2 + 1)
                                                                 + BlueFin::GlSvId::s_aucSvId2gnss[v5]];
    if (v15 == 5)
    {
LABEL_30:
      BOOL v7 = *((_DWORD *)this + 547) == 4;
      uint64_t v8 = (double *)&unk_263BAC100;
      return v8[v7];
    }
    if (v15 != 4)
    {
      if (v15 == 2) {
        goto LABEL_30;
      }
LABEL_45:
      BOOL v7 = *((_DWORD *)this + 546) == 4;
      uint64_t v8 = (double *)&unk_263BAC0F0;
      return v8[v7];
    }
LABEL_44:
    BOOL v7 = *((_DWORD *)this + 547) == 4;
    uint64_t v8 = (double *)&unk_263BAC110;
    return v8[v7];
  }
  if (v5 < 0x34) {
    goto LABEL_27;
  }
  uint64_t v11 = (v5 << 56) - 0x3B00000000000000;
  int v12 = *((_DWORD *)this + 546);
  char v13 = (char *)&BlueFin::GlMeSrdAsicConfig::GetCarrierNcoDrift(BlueFin::GlSignalId const&)const::dGlnCphDriftRateMinnowLp;
  int v14 = (char *)&BlueFin::GlMeSrdAsicConfig::GetCarrierNcoDrift(BlueFin::GlSignalId const&)const::dGlnCphDriftRateMinnowVlp;
LABEL_32:
  if (v12 == 4) {
    char v16 = v14;
  }
  else {
    char v16 = v13;
  }
  return *(double *)&v16[(v11 >> 53) + 56];
}

BOOL BlueFin::GlMeSrdAsicConfig::IsDcFllSupported(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((_DWORD *)this + 2) != 1;
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetADRMode(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 2128);
}

BlueFin::GlMeSrdMPFResults *BlueFin::GlMeSrdMPFResults::GlMeSrdMPFResults(BlueFin::GlMeSrdMPFResults *this)
{
  *(void *)this = 0;
  *((void *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *((unsigned char *)this + 16) = -1;
  *((_DWORD *)this + 5) = 0;
  memset_pattern16((char *)this + 24, &memset_pattern, 0x14uLL);
  *(void *)((char *)this + 52) = 0;
  *(void *)((char *)this + 44) = 0;
  uint64_t v2 = 64;
  *((_DWORD *)this + 15) = 0;
  do
  {
    *(_DWORD *)((char *)this + v2) = 0;
    v2 += 4;
  }
  while (v2 != 84);
  return this;
}

uint64_t BlueFin::GlMeSrdEstCarrPrm::SelectPublishedTrkCarrPrmEst(uint64_t result, unsigned __int8 *a2, int a3, int a4, uint64_t a5)
{
  *(_WORD *)a5 = 1;
  *(_WORD *)(a5 + 34) = 0;
  *(unsigned char *)(a5 + 36) = 0;
  *(void *)(a5 + 80) = 0;
  *(_DWORD *)(a5 + 88) = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(_OWORD *)(a5 + 40) = 0u;
  *(_OWORD *)(a5 + 56) = 0u;
  *(unsigned char *)(a5 + 72) = 0;
  if (*(_DWORD *)result == 4)
  {
    if (a2[113])
    {
      *(unsigned char *)(a5 + 72) = 1;
      uint64_t v5 = a2 + 88;
      int v6 = 7;
      goto LABEL_7;
    }
  }
  else
  {
    if (*(_DWORD *)result != 3)
    {
      DeviceFaultNotify("glmesrd_carrprm.cpp", 1354, "SelectPublishedTrkCarrPrmEst", (char)"0");
      int v49 = 1354;
LABEL_72:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_carrprm.cpp", v49, "0");
    }
    if (a2[73])
    {
      *(unsigned char *)(a5 + 72) = 1;
      uint64_t v5 = a2 + 48;
      int v6 = 3;
LABEL_7:
      *(void *)(a5 + 80) = *v5;
      *(_DWORD *)(a5 + 88) = v6;
    }
  }
  *(unsigned char *)(a5 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  uint64_t v7 = *((void *)a2 + 3);
  *(void *)(a5 + 8) = v7;
  uint64_t v8 = *((void *)a2 + 21);
  uint64_t v9 = *((void *)a2 + 16);
  *(void *)(a5 + 40) = v8;
  *(void *)(a5 + 48) = v9;
  *(_DWORD *)(a5 + 20) = 0;
  int v10 = *((_DWORD *)a2 + 50);
  *(_DWORD *)(a5 + 100) = v10;
  int v11 = *(_DWORD *)(result + 4);
  int v12 = v11 != 0;
  if (!v11 && !a3)
  {
    int v13 = 0;
    char v14 = 0;
    goto LABEL_63;
  }
  int v13 = 0;
  int v15 = 0;
  char v14 = 0;
  int v16 = 0;
  int v53 = *a2;
  uint64_t v17 = *((void *)a2 + 1);
  int v18 = *((_DWORD *)a2 + 4);
  int v19 = a2[20];
  unsigned int v20 = *(_DWORD *)(result + 32);
  int v51 = a2[121];
  int v21 = *(unsigned __int8 *)(result + 84);
  BOOL v22 = *(unsigned char *)(result + 84) != 0;
  int v23 = a2[160];
  int v24 = *((_DWORD *)a2 + 44);
  int v52 = a2[120];
  int v25 = *((_DWORD *)a2 + 34);
  unsigned int v26 = *(_DWORD *)(result + 64);
  int v50 = a2[196];
  int v27 = a2[72];
  uint64_t v28 = *((void *)a2 + 5);
  int v29 = *((_DWORD *)a2 + 17);
  int v30 = a2[74];
  int v31 = a2[112];
  uint64_t v32 = *((void *)a2 + 10);
  int v33 = *((_DWORD *)a2 + 27);
  int v34 = v10;
  int v35 = a2[114];
  while (2)
  {
    if (a3) {
      int v36 = 3;
    }
    else {
      int v36 = 0;
    }
    if ((v12 & 1) == 0) {
      int v11 = v36;
    }
    BOOL v37 = v11 != 3;
    switch(v11)
    {
      case 1:
        if (v20 > 1 || !v51) {
          goto LABEL_56;
        }
        int v43 = 1;
        *(unsigned char *)(a5 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 1;
        *(void *)(a5 + 8) = *((void *)a2 + 18);
        char v44 = a2 + 152;
        goto LABEL_62;
      case 2:
        unsigned int v38 = *((_DWORD *)a2 + 45);
        unsigned int v39 = *(_DWORD *)(result + 88);
        if (!v21) {
          v34 |= 0x100u;
        }
        if (v22 && v38 >= v39) {
          v34 |= 2u;
        }
        if (!v21 || v22 && v38 >= v39)
        {
          *(_DWORD *)(a5 + 100) = v34;
          int v10 = v34;
        }
        int v40 = a2[204];
        if (v23 | v40)
        {
          *(unsigned char *)(a5 + 34) = v23;
          *(void *)(a5 + 40) = v8;
          *(_DWORD *)(a5 + 56) = v24;
          if (!v21 || (char v14 = v23, v38 >= v39))
          {
            char v14 = 0;
            *(unsigned char *)(a5 + 34) = 0;
          }
          *(_DWORD *)(a5 + 64) = v38;
        }
        BOOL v41 = v40 != 0;
        if (!a4) {
          BOOL v41 = v14;
        }
        *(unsigned char *)(a5 + 35) = v41;
        if (v41 | v14)
        {
          int v13 = 2;
          *(_DWORD *)(a5 + 68) = 2;
          int v16 = 2;
        }
        if ((a4 & 2) != 0)
        {
          if (v52)
          {
            if (a2[121])
            {
              *(unsigned char *)(a5 + 36) = 1;
              *(void *)(a5 + 48) = v9;
              *(_DWORD *)(a5 + 60) = v25;
              if (v16 != 2)
              {
                int v13 = 1;
                *(_DWORD *)(a5 + 68) = 1;
                int v16 = 1;
              }
            }
          }
        }
        if (v26 > 1 || !v50) {
          goto LABEL_56;
        }
        *(unsigned char *)(a5 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 1;
        *(void *)(a5 + 8) = *((void *)a2 + 23);
        char v44 = a2 + 192;
        int v43 = 2;
        goto LABEL_62;
      case 3:
        if (v27)
        {
          char v14 = 1;
          *(unsigned char *)(a5 + 34) = 1;
          *(void *)(a5 + 40) = v28;
          *(_DWORD *)(a5 + 56) = v29;
          int v13 = 3;
          *(_DWORD *)(a5 + 68) = 3;
          int v16 = 3;
        }
        if (!v30) {
          goto LABEL_56;
        }
        *(unsigned char *)(a5 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 1;
        *(void *)(a5 + 8) = *((void *)a2 + 7);
        char v44 = a2 + 64;
        int v43 = 3;
        goto LABEL_62;
      case 4:
        if (v31)
        {
          char v14 = 1;
          *(unsigned char *)(a5 + 34) = 1;
          *(void *)(a5 + 40) = v32;
          *(_DWORD *)(a5 + 56) = v33;
          int v13 = 7;
          *(_DWORD *)(a5 + 68) = 7;
          int v16 = 7;
        }
        if (!v35) {
          goto LABEL_56;
        }
        *(unsigned char *)(a5 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 1;
        *(void *)(a5 + 8) = *((void *)a2 + 12);
        char v44 = a2 + 104;
        int v43 = 7;
        goto LABEL_62;
      case 5:
        if (v53)
        {
          char v14 = 1;
          *(unsigned char *)(a5 + 34) = 1;
          *(void *)(a5 + 40) = v17;
          *(_DWORD *)(a5 + 56) = v18;
          int v13 = 4;
          *(_DWORD *)(a5 + 68) = 4;
          int v16 = 4;
        }
        if (!v19)
        {
LABEL_56:
          v15 += v12;
          LOBYTE(a3) = v12 & a3 & v37;
          int v11 = *(_DWORD *)(result + 4 * v15 + 4);
          int v12 = v11 != 0;
          if (v11) {
            char v42 = 1;
          }
          else {
            char v42 = a3;
          }
          if ((v42 & 1) == 0) {
            goto LABEL_63;
          }
          continue;
        }
        *(unsigned char *)(a5 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 1;
        *(void *)(a5 + 8) = v7;
        char v44 = a2 + 32;
        int v43 = 4;
LABEL_62:
        *(_DWORD *)(a5 + 16) = *v44;
        *(_DWORD *)(a5 + 20) = v43;
LABEL_63:
        if (!v14 && v13 != 2) {
          *(_DWORD *)(a5 + 100) = v10 | 0x80;
        }
        unsigned __int8 v45 = a2[156];
        if (v45)
        {
          unsigned __int8 v45 = a2[157];
          unsigned __int8 v46 = a2[158];
          char v47 = 1;
          unsigned __int8 v48 = a2[159];
        }
        else
        {
          char v47 = 0;
          unsigned __int8 v46 = 0;
          unsigned __int8 v48 = 0;
        }
        *(unsigned char *)(a5 + 24) = v47;
        *(unsigned char *)(a5 + 25) = v45;
        *(unsigned char *)(a5 + 26) = v46;
        *(unsigned char *)(a5 + 27) = v48;
        *(unsigned char *)(a5 + 30) = a2[122];
        return result;
      default:
        DeviceFaultNotify("glmesrd_carrprm.cpp", 1566, "SelectPublishedTrkCarrPrmEst", (char)"0");
        int v49 = 1566;
        goto LABEL_72;
    }
  }
}

void BlueFin::GlMeSrdEstCarrPrm::EstTrkCarrPrmViaOpenLpLagOne(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, float *a6, float *a7, uint64_t a8, float a9, float a10, unsigned __int8 a11, unsigned __int16 a12, char a13, unsigned __int8 a14, char a15, char a16, unsigned __int8 a17, char a18)
{
  int v25 = a17;
  *(_DWORD *)(a8 + 72) = 0;
  *(_OWORD *)(a8 + 56) = 0u;
  *(_OWORD *)(a8 + 40) = 0u;
  uint64_t v26 = *(void *)(a3 + 24);
  if (*(float *)(v26 + 48) <= a9) {
    int v25 = 1;
  }
  if (v25) {
    float v27 = *(float *)(v26 + 48);
  }
  else {
    float v27 = a9;
  }
  *(float *)long long __src = a7[2];
  int v86 = *(_DWORD *)(a5 + 12);
  uint64_t v85 = *(void *)(a5 + 52);
  HIWORD(v28) = WORD1(v85);
  LOWORD(v28) = *(_WORD *)(a5 + 60);
  float v29 = v27 * (float)v28;
  if (!a13 || *(unsigned __int8 *)(a1 + 456) - 81 > 0x34)
  {
    int v32 = *(_DWORD *)(v26 + 52);
    if ((v32 - 1) < 2)
    {
      float v31 = v29 / v27;
      goto LABEL_15;
    }
    if (!v32)
    {
      float v31 = v29 * (float)((float)(1.0 / v27) - (float)(1.0 / *(float *)(v26 + 44)));
      goto LABEL_15;
    }
    float v72 = "0";
    DeviceFaultNotify("glmesrd_carrprm.cpp", 2684, "CalcNumberOfLagOneProd", (char)"0");
    float v73 = "glmesrd_carrprm.cpp";
    int v74 = 2684;
LABEL_96:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v73, v74, v72);
  }
  int EpochPerBit = BlueFin::GlSignalId::GetEpochPerBit((BlueFin::GlSignalId *)(a1 + 456));
  if (*(unsigned __int16 *)(a1 + 464) >= 0x23Fu)
  {
    float v72 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
    float v73 = "glsignalid.h";
    int v74 = 678;
    goto LABEL_96;
  }
  if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *(int *)(a1 + 460)
                                                              - *(int *)(a1 + 460)
                                                              + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)(a1 + 456)]])
    goto LABEL_93;
  float v31 = ((float)(1.0 / v27)
       + -1.0
       / ((double)(BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *(int *)(a1 + 460) - *(int *)(a1 + 460) + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)(a1 + 456)]]
                 * EpochPerBit)
        * 0.001))
      * v29;
LABEL_15:
  *(float *)&__src[1] = v31;
  memcpy((void *)(*(void *)(a1 + 400) + *(unsigned __int16 *)(a1 + 412) * (unint64_t)*(unsigned __int8 *)(a1 + 410)), __src, *(unsigned __int16 *)(a1 + 412));
  unsigned __int8 v33 = *(unsigned char *)(a1 + 410) + 1;
  *(unsigned char *)(a1 + 410) = v33;
  if (*(unsigned __int8 *)(a1 + 409) <= v33)
  {
    *(unsigned char *)(a1 + 408) = 1;
    *(unsigned char *)(a1 + 410) = 0;
  }
  uint64_t v34 = 0;
  uint64_t v35 = *(void *)(a3 + 16);
  float v36 = a7[2];
  while (*(float *)(v35 + v34 + 64) > v36)
  {
    v34 += 8;
    if (v34 == 96)
    {
      int v37 = -1;
      goto LABEL_22;
    }
  }
  int v37 = *(_DWORD *)(v35 + v34 + 68);
LABEL_22:
  if (v36 <= 16.0) {
    int v38 = -1;
  }
  else {
    int v38 = 20;
  }
  if (v36 <= 30.0) {
    int v39 = v38;
  }
  else {
    int v39 = 10;
  }
  if (v27 > a9) {
    unsigned int v40 = v39;
  }
  else {
    unsigned int v40 = v37;
  }
  float v81 = 0.0;
  double v82 = 0.0;
  double v83 = 0.0;
  uint64_t v41 = 409;
  if (!*(unsigned char *)(a1 + 408)) {
    uint64_t v41 = 410;
  }
  if (*(unsigned char *)(a1 + v41))
  {
    unsigned int v80 = v40;
    float v78 = v27;
    double v79 = *(float *)(a5 + 12);
    BlueFin::GlMeSrdObsBuf::SumVecFcnWithExit((unsigned char *)(a1 + 400), &v78, &v81, (uint64_t (*)(void *, void *, unint64_t))BlueFin::GlMeSrdEstCarrPrm::AccumulateMultiSecondCplxSummand);
    float v42 = v81;
    if (v81 >= (float)v40)
    {
      char v43 = 0;
      float v44 = v82;
      float v45 = v83;
      float v46 = 0.0;
      if (v45 == 0.0 || v44 == 0.0) {
        goto LABEL_57;
      }
      float v47 = v83;
      float v48 = v82;
      float v46 = atan2f(v47, v48);
      if (*(unsigned __int16 *)(a1 + 464) >= 0x23Fu)
      {
LABEL_94:
        float v72 = "IsValid()";
        DeviceFaultNotify("glsignalid.h", 692, "GetSecPerEpochWithTrkException", (char)"IsValid()");
        float v73 = "glsignalid.h";
        int v74 = 692;
        goto LABEL_96;
      }
      uint64_t v49 = *(int *)(a1 + 460);
      uint64_t v50 = *(unsigned __int8 *)(a1 + 456);
      if (v49 == 1)
      {
        float v51 = 1.5;
        if ((v50 - 1) < 0x20 || (v50 - 66) < 0xA)
        {
LABEL_43:
          float v53 = a7[7];
          if (v53 == 0.0)
          {
            float v55 = 1.0;
          }
          else
          {
            float v54 = *a2;
            float v55 = (float)((float)((float)((float)(sqrtf((float)(v44 * v44) + (float)(v45 * v45)) / v42) * (float)a11)
                                / (float)a12)
                        + (float)(v54 + (float)((float)(v27 / v51) * *a6)))
                / v53;
            if (v49 == 3) {
              float v55 = v55 * 4.0;
            }
          }
          char v43 = 0;
          if ((a14 & 1) == 0 && (a16 & 1) == 0 && v27 <= a9 && (a15 & 1) == 0)
          {
            float v56 = a7[2];
            double v57 = v55;
            if (v56 > 30.0 && v57 < 0.86) {
              goto LABEL_56;
            }
            if (v56 > 23.0 && v57 < 0.7) {
              goto LABEL_56;
            }
            BOOL v71 = v57 >= 0.6 || v56 <= 20.0;
            if (!v71 || v55 > 1.5) {
              goto LABEL_56;
            }
            char v43 = a18;
            if (!a18) {
              goto LABEL_62;
            }
            if ((float)(*(float *)(a5 + 136) / a10) >= 1.2) {
              char v43 = 0;
            }
            else {
LABEL_56:
            }
              char v43 = 1;
          }
LABEL_57:
          if (v27 > a9)
          {
            if (a18)
            {
              if ((a16 & 1) == 0)
              {
                char v43 = (float)(*(float *)(a5 + 64) / a10) < 1.2;
                if ((float)(*(float *)(a5 + 136) / a10) < 1.2) {
                  char v43 = 1;
                }
              }
            }
          }
LABEL_62:
          double v58 = (float)(v46 / (float)(v27 * 6.2832));
          float v59 = *(float *)(a5 + 12);
          double v60 = v58 - (float)(*(float *)(a5 + 16) - v59);
          double v61 = *(double *)(a5 + 24) + 0.0;
          *(double *)(a8 + 48) = v60;
          *(double *)(a8 + 56) = v58 + v59;
          *(double *)(a8 + 40) = v61;
          if (*(unsigned __int16 *)(a1 + 464) < 0x23Fu)
          {
            uint64_t v62 = *(int *)(a1 + 460);
            uint64_t v63 = *(unsigned __int8 *)(a1 + 456);
            if (v62 == 1)
            {
              double v64 = 1.5;
              if ((v63 - 1) < 0x20u || (v63 - 66) < 0xAu) {
                goto LABEL_68;
              }
            }
            unsigned int v65 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v62
                                                                                         - v62
                                                                                         + BlueFin::GlSvId::s_aucSvId2gnss[v63]];
            if (v65)
            {
              double v64 = (double)v65 * 0.001;
LABEL_68:
              float v66 = v27 / v64 * a7[3];
              *(float *)(a8 + 64) = *(float *)(a4 + 24) / sqrtf(v42 * v66);
              *(_DWORD *)(a8 + 68) = 0;
              if (a13)
              {
                BOOL v67 = v27 >= 0.01 || (v63 + 117) >= 0x24u;
                double v68 = 0.1;
                if (!v67) {
                  double v68 = 0.3;
                }
              }
              else
              {
                double v68 = 0.1;
              }
              if (v27 > a9)
              {
                *(unsigned char *)(a8 + 75) = 1;
                double v68 = 0.3;
              }
              if ((a14 & ((v63 - 52) < 0xEu)) != 0) {
                double v68 = 0.5;
              }
              float v69 = v60;
              char v70 = (v68 > fabsf(v27 * v69)) & ~v43;
              *(unsigned char *)(a8 + 72) = 0;
              if (v44 == 0.0) {
                char v70 = 0;
              }
              *(unsigned char *)(a8 + 73) = v70;
              *(unsigned char *)(a8 + 74) = v70;
              return;
            }
            goto LABEL_93;
          }
          goto LABEL_94;
        }
      }
      unsigned int v52 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v49
                                                                                   - v49
                                                                                   + BlueFin::GlSvId::s_aucSvId2gnss[v50]];
      if (v52)
      {
        float v51 = (double)v52 * 0.001;
        goto LABEL_43;
      }
LABEL_93:
      float v72 = "ucMsPerEpoch != 0";
      DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
      float v73 = "glsignalid.h";
      int v74 = 685;
      goto LABEL_96;
    }
  }
}

void BlueFin::GlMeSrdEstCarrPrm::EstTrkCarrPrmViaClosedLpPll(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, double a9, float a10, float a11)
{
  if (*(unsigned char *)a3) {
    BOOL v12 = *(unsigned char *)(a3 + 144) == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12)
  {
    *(_DWORD *)(a8 + 200) |= 0x40u;
    *(unsigned char *)(a8 + 160) = 0;
    *(unsigned char *)(a8 + 204) = 0;
    *(void *)(a8 + 176) = 0;
    *(void *)(a8 + 184) = 0;
    *(void *)(a8 + 168) = 0;
    *(void *)(a8 + 189) = 0;
    return;
  }
  double v22 = *(double *)(a1 + 8);
  double v23 = *(double *)(a3 + 160);
  if (v22 - v23 > 63.5)
  {
    int v24 = *(_DWORD *)(a1 + 108) + 1;
LABEL_11:
    *(_DWORD *)(a1 + 108) = v24;
    goto LABEL_12;
  }
  int v24 = *(_DWORD *)(a1 + 108);
  if (v23 - v22 > 63.5)
  {
    --v24;
    goto LABEL_11;
  }
LABEL_12:
  *(double *)(a1 + 8) = v23;
  if (*(unsigned __int16 *)(a1 + 464) >= 0x23Fu) {
    goto LABEL_66;
  }
  double v25 = v23 + (double)v24 * 128.0;
  uint64_t v26 = *(unsigned __int8 *)(a1 + 456);
  uint64_t v27 = BlueFin::GlSvId::s_aucSvId2gnss[v26];
  double v28 = BlueFin::GlSignalId::s_adSignalType2ctrFreqHz[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *(int *)(a1 + 460) - *(int *)(a1 + 460) + v27]];
  if (v27 == 2)
  {
    double v29 = (double)(char)(v26 - 59);
    if ((v26 - 52) >= 0xE) {
      double v29 = -8.0;
    }
    double v28 = v28 + v29 * 562500.0;
  }
  float v30 = __exp10f(*(float *)(a7 + 8) / 10.0);
  double v31 = v25 + *(double *)(a3 + 24);
  *(double *)(a8 + 168) = v31;
  if (*(unsigned __int16 *)(a1 + 464) >= 0x23Fu)
  {
LABEL_66:
    DeviceFaultNotify("glsignalid.h", 650, "GetRfCarrierFrqHz", (char)"IsValid()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 650, "IsValid()");
  }
  float v32 = v28;
  float v33 = a9;
  double v34 = (float)((float)((float)(v33 / v32) * sqrtf((float)((float)(1.0 / (float)(v30 * a10)) * a11) * a10)) / 6.2832);
  uint64_t v35 = *(unsigned __int8 *)(a1 + 456);
  uint64_t v36 = BlueFin::GlSvId::s_aucSvId2gnss[v35];
  double v37 = BlueFin::GlSignalId::s_adSignalType2ctrFreqHz[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *(int *)(a1 + 460) - *(int *)(a1 + 460) + v36]];
  double v38 = v37;
  if (v36 == 2)
  {
    double v39 = (double)(char)(v35 - 59);
    if ((v35 - 52) >= 0xE) {
      double v39 = -8.0;
    }
    double v38 = v37 + v39 * 562500.0;
  }
  float v40 = v34 / (299792458.0 / v38);
  *(float *)(a8 + 176) = v40;
  int v41 = *(_DWORD *)(a3 + 172);
  *(_DWORD *)(a8 + 180) = v41;
  double v42 = *(double *)(a3 + 152) + *(float *)(a3 + 16);
  *(double *)(a8 + 184) = v42;
  if (v36 == 2)
  {
    double v43 = (double)(char)(v35 - 59);
    if ((v35 - 52) >= 0xE) {
      double v43 = -8.0;
    }
    double v37 = v37 + v43 * 562500.0;
  }
  float v44 = -100.0 / (299792458.0 / v37);
  *(float *)(a8 + 192) = v44;
  if (*(unsigned char *)a7 && *(float *)(a7 + 8) >= *(float *)(*(void *)(a2 + 24) + 68))
  {
    int v45 = 1;
  }
  else
  {
    int v45 = 0;
    *(_DWORD *)(a8 + 200) |= 4u;
  }
  if (*(unsigned char *)(a3 + 184) && *(unsigned char *)(a3 + 185)) {
    *(_DWORD *)(a8 + 200) |= 0x10u;
  }
  double v46 = *(double *)(a8 + 128);
  double v47 = *(double *)(a8 + 144);
  double v48 = *(double *)(a1 + 472);
  if (v48 - *(double *)(a1 + 480) > 1500.0)
  {
    LOBYTE(v49) = 0;
LABEL_36:
    *(unsigned char *)(a1 + 469) = v49 + 1;
    goto LABEL_37;
  }
  unsigned int v49 = *(unsigned __int8 *)(a1 + 469);
  if (v49 <= 4) {
    goto LABEL_36;
  }
LABEL_37:
  double v50 = v46
      - *(double *)(a1 + 488)
      + (v47 + *(double *)(a1 + 504)) * -0.1
      - (v31
       - *(double *)(a1 + 496)
       + (v42 + *(double *)(a1 + 512)) * -0.1);
  *(double *)(a1 + 480) = v48;
  *(double *)(a1 + 488) = v46;
  *(double *)(a1 + 496) = v31;
  *(double *)(a1 + 504) = v47;
  *(double *)(a1 + 512) = v42;
  if (v50 != 1.5 && v41) {
    *(_DWORD *)(a8 + 200) |= 0x1000u;
  }
  if ((a5 & 1) == 0) {
    *(_DWORD *)(a8 + 200) |= 1u;
  }
  if (a6) {
    *(unsigned char *)(a8 + 204) = (*(_DWORD *)(a8 + 200) & 0x1000) == 0;
  }
  if (v45 & a5)
  {
    char v51 = 1;
  }
  else
  {
    char v51 = 0;
    *(_DWORD *)(a8 + 192) = 0;
  }
  *(unsigned char *)(a8 + 160) = v51;
  *(unsigned char *)(a8 + 196) = v51;
  if (*(unsigned __int16 *)(a1 + 464) >= 0x23Fu) {
    goto LABEL_66;
  }
  uint64_t v52 = *(unsigned __int8 *)(a1 + 456);
  uint64_t v53 = BlueFin::GlSvId::s_aucSvId2gnss[v52];
  double v54 = BlueFin::GlSignalId::s_adSignalType2ctrFreqHz[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *(int *)(a1 + 460) - *(int *)(a1 + 460) + v53]];
  if (v53 == 2)
  {
    double v55 = (double)(char)(v52 - 59);
    if ((v52 - 52) >= 0xE) {
      double v55 = -8.0;
    }
    double v54 = v54 + v55 * 562500.0;
  }
  unsigned __int16 v56 = *(_WORD *)(a1 + 470);
  uint64_t v57 = a1 + 8 * (v56 % 5u);
  *(double *)(v57 + 56) = *(double *)(a1 + 472) * 0.001;
  unsigned __int16 v58 = v56 + 1;
  *(_WORD *)(a1 + 470) = v58;
  *(double *)(v57 + 16) = v31 * (299792458.0 / v54);
  if (v58 >= 0x15u && !(v58 % 5u))
  {
    unsigned __int16 v58 = 5;
    *(_WORD *)(a1 + 470) = 5;
LABEL_56:
    LOWORD(v59) = v58 - 5;
    unsigned int v60 = v58 - 3;
    double v61 = 0.0;
    if (v60 > (unsigned __int16)(v58 - 5))
    {
      uint64_t v59 = (unsigned __int16)v59;
      unint64_t v62 = (unsigned __int16)v59 + 2;
      unint64_t v63 = (unsigned __int16)v59 + 1;
      do
      {
        unint64_t v64 = a1 - 40 * (v63 / 5) + 8 * v59;
        uint64_t v65 = a1 + 8 * ((unsigned __int16)v59 % 5u);
        double v66 = *(double *)(v64 + 64);
        double v67 = *(double *)(v65 + 56);
        double v68 = v66 - v67;
        unint64_t v69 = a1 - 40 * (v62 / 5) + 8 * v59;
        double v70 = *(double *)(v69 + 72) - v66;
        double v71 = v66 + v70 * 0.5 - (v67 + (v66 - v67) * 0.5);
        double v61 = v61
            + (*(double *)(v69 + 32) - *(double *)(v64 + 24)) / (v70 * v71)
            - (*(double *)(v64 + 24) - *(double *)(v65 + 16)) / (v68 * v71);
        ++v62;
        ++v59;
        ++v63;
      }
      while ((int)v60 > (int)v59);
      double v61 = v61 * 0.333333333;
    }
    unsigned int v72 = (v58 - 2) % 5;
    double v73 = *(double *)(a1 + 16 + 8 * v72);
    unsigned int v74 = v60 % 5;
    double v75 = *(double *)(a1 + 56 + 8 * v72);
    double v76 = *(double *)(a1 + 56 + 8 * v74);
    double v77 = v75 - v76;
    unsigned int v78 = (v58 - 1) % 5;
    double v79 = *(double *)(a1 + 56 + 8 * v78) - v75;
    double v80 = v75 + v79 * 0.5 - (v76 + (v75 - v76) * 0.5);
    if (vabdd_f64(v61, (*(double *)(a1 + 16 + 8 * v78) - v73) / (v79 * v80)- (v73 - *(double *)(a1 + 16 + 8 * v74)) / (v77 * v80)) > 100.0)
    {
      *(_WORD *)(a1 + 470) = 0;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_DWORD *)(a8 + 200) |= 8u;
    }
    goto LABEL_62;
  }
  if (v58 >= 5u) {
    goto LABEL_56;
  }
LABEL_62:
  if (*(unsigned char *)(a4 + 663))
  {
    if (*(unsigned __int16 *)(a4 + 660) > 2 * (*(unsigned __int16 *)(a4 + 2) / 5u))
    {
      *(_DWORD *)(a8 + 200) |= 0x800u;
      *(unsigned char *)(a8 + 160) = 0;
    }
  }
}

void BlueFin::GlMeSrdEstCarrPrm::EstTrkCarrPrmViaClosedLpFll(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, uint64_t a5, uint64_t a6, int a7, int a8, float a9, float a10, char a11, char a12, char a13, unsigned int a14, char a15, uint64_t a16, uint64_t a17)
{
  if (!*(unsigned char *)a6 || !*(unsigned char *)(a6 + 88))
  {
    *(_WORD *)(a17 + 120) = 0;
    *(void *)(a17 + 128) = 0;
    *(_DWORD *)(a17 + 136) = 0;
    *(void *)(a17 + 144) = 0;
    *(void *)(a17 + 152) = 0;
    return;
  }
  double v25 = *(double *)(a1 + 96);
  double v26 = *(double *)(a6 + 104);
  if (v25 - v26 <= 63.5)
  {
    int v27 = *(_DWORD *)(a1 + 104);
    if (v26 - v25 <= 63.5) {
      goto LABEL_9;
    }
    --v27;
  }
  else
  {
    int v27 = *(_DWORD *)(a1 + 104) + 1;
  }
  *(_DWORD *)(a1 + 104) = v27;
LABEL_9:
  *(double *)(a1 + 96) = v26;
  double v90 = v26 + (double)v27 * 128.0;
  float v88 = a4[13];
  float v89 = a4[15];
  float v28 = a4[18];
  float v29 = v88 / a9;
  float v30 = __exp10f(*(float *)(a16 + 8) / 10.0) * a9;
  float v31 = (float)((float)(v28 * 0.5) * 6.2832) * a9;
  __float2 v32 = __sincosf_stret(v31 * 0.5);
  float v33 = sinf((float)((float)(v88 / a9) * v31) * 0.5) / v32.__sinval;
  float v34 = sinf((float)(v88 / a9) * v31);
  float v35 = v34 / sinf(v31);
  float v36 = (float)((float)(a9 + a9) * (float)(v32.__cosval / v32.__sinval))
      * (float)((float)(v33 * v33) - (float)((float)(v88 / a9) * v35));
  float v37 = (float)((float)(v88 * (float)(v89 + v89))
              * (float)((float)((float)((float)((float)(v29 * v29) - (float)(v35 * v35))
                                      + (float)((float)(v29 * v29) - (float)(v35 * v35)))
                              + (float)((float)(v33 * (float)((float)(v30 * 4.0) * v33)) * (float)(v29 - v35)))
                      / (float)(v36 * (float)((float)(v30 * v30) * v36))))
      / 39.4784176;
  *(double *)(a17 + 128) = v90 + *(double *)(a6 + 24);
  *(_DWORD *)(a17 + 136) = 1092616192;
  *(double *)(a17 + 144) = *(double *)(a6 + 96) + *(float *)(a6 + 16);
  *(float *)(a17 + 152) = sqrtf(v37);
  float v38 = a4[17];
  if (((v38 > 0.0) & a7) != 0) {
    int v39 = 2;
  }
  else {
    int v39 = 0;
  }
  unsigned int v40 = *(unsigned __int8 *)(a5 + 36);
  uint64_t v87 = a3;
  if (*(unsigned char *)(a5 + 36))
  {
    int v41 = *(float **)(a3 + 24);
    float v42 = *(float *)(a2 + 4);
    if (v38 <= 0.0) {
      int v43 = 1;
    }
    else {
      int v43 = 3;
    }
    unsigned __int8 v44 = 4;
    int v85 = a7;
    while (1)
    {
      unsigned int v45 = *(unsigned __int8 *)(a6 + v44 + 40);
      if (v45 != 255) {
        break;
      }
      if (!--v44)
      {
        unsigned __int8 v44 = 0;
        unsigned int v45 = *(unsigned __int8 *)(a6 + 40);
        break;
      }
    }
    uint64_t v46 = a6 + v44;
    float v47 = a4[13] / *v41;
    if (v45 <= 3) {
      float v48 = 1.0;
    }
    else {
      float v48 = a4[13] / *v41;
    }
    float v49 = v47 * v48;
    float v50 = (float)(v42 * *(float *)(a5 + 48)) * (float)(v47 * v48);
    float v51 = *(float *)(a1 + 112);
    float v52 = v51 - v50;
    if ((float)(v51 - v50) < 0.0) {
      float v52 = -(float)(v51 - v50);
    }
    if (v52 >= 1.0 || v51 == 0.0 && v50 != 0.0)
    {
      *(float *)(a1 + 112) = v50;
      float __src = v50;
      *(unsigned char *)(a1 + 130) = 0;
      *(unsigned char *)(a1 + 128) = 1;
      if (*(unsigned char *)(a1 + 129))
      {
        unint64_t v53 = 0;
        do
        {
          memcpy((void *)(*(void *)(a1 + 120) + v53 * *(unsigned __int16 *)(a1 + 132)), &__src, *(unsigned __int16 *)(a1 + 132));
          ++v53;
        }
        while (v53 < *(unsigned __int8 *)(a1 + 129));
      }
    }
    double v54 = (unsigned __int8 *)(v46 + 40);
    float v55 = *(float *)(a6 + 124);
    float __src = v55;
    if (a8)
    {
      unsigned int v56 = *v54;
      if (v56 == 3)
      {
        float v57 = 1.2;
      }
      else
      {
        if (v56 > 2) {
          goto LABEL_39;
        }
        float v57 = 1.5;
      }
      float __src = v55 * v57;
    }
LABEL_39:
    memcpy((void *)(*(void *)(a1 + 120) + *(unsigned __int16 *)(a1 + 132)* (unint64_t)*(unsigned __int8 *)(a1 + 130)), &__src, *(unsigned __int16 *)(a1 + 132));
    unsigned __int8 v58 = *(unsigned char *)(a1 + 130) + 1;
    *(unsigned char *)(a1 + 130) = v58;
    if (*(unsigned __int8 *)(a1 + 129) <= v58)
    {
      *(unsigned char *)(a1 + 128) = 1;
      *(unsigned char *)(a1 + 130) = 0;
    }
    float v59 = v49 * (float)(v42 * *(float *)(a5 + 52));
    float v60 = BlueFin::GlMeSrdObsBuf::SumFcn((BlueFin::GlMeSrdObsBuf *)(a1 + 120), v40, 0, (double (*)(void *, void *))BlueFin::GlMeSrdEstCarrPrm::CalcMagSqrdFllValidityTestStatSummand)/ (double)v40;
    if (a13)
    {
      unsigned int v61 = *v54;
      float v62 = flt_263BADD88[v61 == 2];
      if (v61 > 2) {
        float v62 = 1.4;
      }
      int v63 = v85;
      if (v59 > v60) {
        int v63 = 0;
      }
      if ((float)(*(float *)(a6 + 136) / a10) <= v62) {
        goto LABEL_51;
      }
    }
    else
    {
      int v63 = v85;
      if (v59 > v60) {
        int v63 = 0;
      }
    }
    v39 |= v63;
    goto LABEL_51;
  }
  if (v38 <= 0.0)
  {
    double v82 = "!otEstValidityChkBitMsk32.IsEmpty()";
    DeviceFaultNotify("glmesrd_carrprm.cpp", 2172, "DetermineFllValidity", (char)"!otEstValidityChkBitMsk32.IsEmpty()");
    double v83 = "glmesrd_carrprm.cpp";
    int v84 = 2172;
    goto LABEL_97;
  }
  int v43 = 2;
LABEL_51:
  if ((v39 & ~v43) != 0)
  {
    double v82 = "otValRslt.IsEmpty()";
    DeviceFaultNotify("glmesrd_carrprm.cpp", 2178, "DetermineFllValidity", (char)"otValRslt.IsEmpty()");
    double v83 = "glmesrd_carrprm.cpp";
    int v84 = 2178;
    goto LABEL_97;
  }
  if (BlueFin::GlUtils::m_ucEnabled) {
    BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x3F);
  }
  *(unsigned char *)(a17 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v43 == v39;
  *(unsigned char *)(a17 + 120) = 0;
  if ((a15 & 2) != 0)
  {
    float v64 = *(float *)(*(void *)(v87 + 24) + 68) + -5.0;
    if (v64 <= 21.0) {
      float v64 = 21.0;
    }
    *(unsigned char *)(a17 + 120) = v64 < *(float *)(a16 + 8);
    if (*(unsigned __int16 *)(a1 + 464) < 0x23Fu)
    {
      uint64_t v65 = *(unsigned __int8 *)(a1 + 456);
      uint64_t v66 = BlueFin::GlSvId::s_aucSvId2gnss[v65];
      double v67 = BlueFin::GlSignalId::s_adSignalType2ctrFreqHz[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *(int *)(a1 + 460) - *(int *)(a1 + 460) + v66]];
      if (v66 == 2)
      {
        double v68 = (double)(char)(v65 - 59);
        if ((v65 - 52) >= 0xE) {
          double v68 = -8.0;
        }
        double v67 = v67 + v68 * 562500.0;
      }
      float v69 = 0.5 / (299792458.0 / v67);
      *(float *)(a17 + 136) = v69;
      goto LABEL_63;
    }
    double v82 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 650, "GetRfCarrierFrqHz", (char)"IsValid()");
    double v83 = "glsignalid.h";
    int v84 = 650;
LABEL_97:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v83, v84, v82);
  }
LABEL_63:
  *(_DWORD *)(a17 + 156) = 1;
  double v70 = 0.04;
  if (!a8) {
    double v70 = a4[13];
  }
  double v71 = 1.0;
  if (a12)
  {
    double v71 = 3.0;
    if (*(unsigned __int8 *)(a6 + 44) >= 3u)
    {
      float v72 = **(float **)(v87 + 24);
      if (v72 == 0.004) {
        double v70 = 0.008;
      }
      if (v72 == 0.005) {
        double v70 = 0.01;
      }
    }
  }
  float v73 = *(double *)(a6 + 96);
  float v74 = v70;
  if (v71 * 0.3 <= fabsf(v74 * v73))
  {
    *(_WORD *)(a17 + 120) = 0;
    *(unsigned char *)(a17 + 157) = 1;
  }
  float v75 = *(double *)(a6 + 112);
  if (v71 * 51.5 < fabsf(v75))
  {
    *(_WORD *)(a17 + 120) = 0;
    *(unsigned char *)(a17 + 158) = 1;
  }
  if (a14 >= 0x1389 && (a11 & 1) == 0)
  {
    double v76 = *(double *)(a1 + 472);
    unsigned int v77 = *(_DWORD *)(a1 + 452);
    float v78 = 0.0;
    if (v77 == -1)
    {
      int v79 = 0;
    }
    else
    {
      int v79 = 0;
      double v80 = v76 - (double)v77;
      if (v80 > 0.0 && v80 <= 2000.0)
      {
        float v78 = (float)(v75 - *(float *)(a1 + 448)) / (v80 / 1000.0);
        int v79 = 1;
      }
    }
    *(float *)(a1 + 448) = v75;
    if (v76 < 0.0)
    {
      *(_DWORD *)(a1 + 452) = -1;
      return;
    }
    if (v76 <= 0.0)
    {
      if (v76 >= 0.0)
      {
        *(_DWORD *)(a1 + 452) = 0;
        if (!v79) {
          return;
        }
        goto LABEL_91;
      }
      double v81 = -0.5;
    }
    else
    {
      double v81 = 0.5;
    }
    *(_DWORD *)(a1 + 452) = (int)(v76 + v81);
    if ((v79 & 1) == 0) {
      return;
    }
LABEL_91:
    if (v71 * 50.0 < fabsf(v78))
    {
      *(_WORD *)(a17 + 120) = 0;
      *(_WORD *)(a17 + 157) = 257;
      *(unsigned char *)(a17 + 159) = 1;
    }
  }
}

float BlueFin::GlMeSrdEstCarrPrm::CrossCheckTrkCarrPrmEst(uint64_t a1, uint64_t a2, float result)
{
  *(unsigned char *)(a2 + 122) = 0;
  int v3 = *(unsigned __int8 *)(a2 + 74);
  if (*(unsigned char *)(a1 + 28)) {
    BOOL v4 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4 && v3 != 0)
  {
    if (*(unsigned char *)(a2 + 121))
    {
      float v6 = *(double *)(a2 + 56);
      float v7 = *(double *)(a2 + 144);
      double result = vabds_f32(v6, v7);
      if (result > *(float *)(a1 + 60))
      {
        *(_WORD *)(a2 + 120) = 0;
        *(unsigned char *)(a2 + 122) = 1;
      }
    }
  }
  if (*(unsigned char *)(a1 + 68))
  {
    double v8 = *(double *)(a2 + 184) - *(double *)(a2 + 56);
    if (!v3) {
      double v8 = 0.0;
    }
    double v9 = -v8;
    if (v8 >= 0.0) {
      double v9 = v8;
    }
    double result = *(float *)(a1 + 72);
    if (v9 > result)
    {
      *(unsigned char *)(a2 + 196) = 0;
      *(unsigned char *)(a2 + 160) = 0;
      *(unsigned char *)(a2 + 204) = 0;
      double result = result + result;
      *(float *)(a2 + 192) = result;
    }
  }
  if (*(unsigned char *)(a1 + 76))
  {
    double v10 = *(double *)(a2 + 184) - *(double *)(a2 + 144);
    if (!*(unsigned char *)(a2 + 121)) {
      double v10 = 0.0;
    }
    double v11 = -v10;
    if (v10 >= 0.0) {
      double v11 = v10;
    }
    double result = *(float *)(a1 + 80);
    if (v11 > result)
    {
      *(unsigned char *)(a2 + 196) = 0;
      *(unsigned char *)(a2 + 160) = 0;
      *(unsigned char *)(a2 + 204) = 0;
      double result = result + result;
      *(float *)(a2 + 192) = result;
    }
  }
  return result;
}

uint64_t BlueFin::GlMeSrdSatReport::PerformFinalValidityChecks(uint64_t this, BlueFin::GlMeDSPMeas *a2, BlueFin::GlMeSrdDspMeasAux *a3)
{
  if (*((unsigned __int8 *)a2 + 100) - 1 >= 0xBC)
  {
    double v8 = "IS_SVID(*otDspMeas.otSignalId.GetSvId())";
    DeviceFaultNotify("glmesrd_sat_report_validity_chk.cpp", 41, "PerformFinalValidityChecks", (char)"IS_SVID(*otDspMeas.otSignalId.GetSvId())");
    int v9 = 41;
    goto LABEL_20;
  }
  if (*((float *)a2 + 14) < 0.0)
  {
    double v8 = "otDspMeas.fDopplerUncPpu >= 0.0";
    DeviceFaultNotify("glmesrd_sat_report_validity_chk.cpp", 44, "PerformFinalValidityChecks", (char)"otDspMeas.fDopplerUncPpu >= 0.0");
    int v9 = 44;
    goto LABEL_20;
  }
  if (*((float *)a2 + 15) < 0.0)
  {
    double v8 = "otDspMeas.fCarPhaseUncM >= 0.0";
    DeviceFaultNotify("glmesrd_sat_report_validity_chk.cpp", 45, "PerformFinalValidityChecks", (char)"otDspMeas.fCarPhaseUncM >= 0.0");
    int v9 = 45;
    goto LABEL_20;
  }
  if (*((float *)a2 + 17) < 0.0)
  {
    double v8 = "otDspMeas.fPeakOffUncS >= 0.0";
    DeviceFaultNotify("glmesrd_sat_report_validity_chk.cpp", 46, "PerformFinalValidityChecks", (char)"otDspMeas.fPeakOffUncS >= 0.0");
    int v9 = 46;
LABEL_20:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_report_validity_chk.cpp", v9, v8);
  }
  int v5 = *((_DWORD *)a3 + 9);
  if (v5 == 4) {
    return this;
  }
  float v6 = (BlueFin::GlMeSrdSatReport *)this;
  if (v5 != 2) {
    goto LABEL_10;
  }
  int v7 = *((_DWORD *)a2 + 26);
  if (v7 != 3)
  {
    if (v7 == 2)
    {
      if ((*((unsigned char *)a2 + 87) & 4) == 0) {
        return this;
      }
    }
    else if (v7)
    {
LABEL_10:
      *(_WORD *)(this + 3532) = 0;
      *(_DWORD *)(this + 3528) = 0;
      return this;
    }
  }
  BlueFin::GlMeSrdSatReport::UpdateInvalidCounts((BlueFin::GlMeSrdSatReport *)this, a2, a3);
  BlueFin::GlMeSrdSatReport::GenerateAcqMgrRequests(v6, a2, a3);

  return BlueFin::GlMeSrdSatReport::UpdateMsmtCensorshipStatus(v6, a2, a3);
}

void BlueFin::GlMeSrdEstCNo::Run(uint64_t a1, double *a2, __n128 a3, uint64_t a4, float *a5, uint64_t a6, float *a7, unsigned __int8 *a8, uint64_t a9, float *a10, uint64_t a11)
{
  if (!*(unsigned char *)a9)
  {
    int v21 = "stAsicCNoTrkMsmt.bValid";
    DeviceFaultNotify("glmesrd_estcno.cpp", 123, "Run", (char)"stAsicCNoTrkMsmt.bValid");
    double v22 = "glmesrd_estcno.cpp";
    int v23 = 123;
    goto LABEL_23;
  }
  int v11 = *a8;
  if ((v11 - 1) >= 0xBC)
  {
    int v21 = "otSignalId.GetSvId().isValid()";
    DeviceFaultNotify("glmesrd_estcno.cpp", 124, "Run", (char)"otSignalId.GetSvId().isValid()");
    double v22 = "glmesrd_estcno.cpp";
    int v23 = 124;
    goto LABEL_23;
  }
  if ((unsigned __int8 *)(a1 + 20) == a8)
  {
    unsigned int v13 = *(unsigned __int16 *)(a1 + 28);
  }
  else
  {
    *(unsigned char *)(a1 + 20) = v11;
    *(_DWORD *)(a1 + 24) = *((_DWORD *)a8 + 1);
    unsigned int v13 = *((unsigned __int16 *)a8 + 4);
    *(_WORD *)(a1 + 28) = v13;
  }
  if (v13 >= 0x23F)
  {
    int v21 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 692, "GetSecPerEpochWithTrkException", (char)"IsValid()");
    double v22 = "glsignalid.h";
    int v23 = 692;
    goto LABEL_23;
  }
  uint64_t v14 = *(int *)(a1 + 24);
  uint64_t v15 = *(unsigned __int8 *)(a1 + 20);
  if (v14 != 1 || (a3.n128_u32[0] = 1.5, (v15 - 1) >= 0x20) && (v15 - 66) >= 0xA)
  {
    unsigned int v16 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v14
                                                                                 - v14
                                                                                 + BlueFin::GlSvId::s_aucSvId2gnss[v15]];
    if (!v16)
    {
      int v21 = "ucMsPerEpoch != 0";
      DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
      double v22 = "glsignalid.h";
      int v23 = 685;
LABEL_23:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v22, v23, v21);
    }
    a3.n128_f64[0] = (double)v16 * 0.001;
    a3.n128_f32[0] = a3.n128_f64[0];
  }
  float v17 = *a2;
  *(unsigned char *)a11 = (*(uint64_t (**)(uint64_t, unsigned char *, unsigned char *, __n128, float, float, float, float, float, float))(*(void *)a1 + 24))(a1, v26, v24, a3, *a10, *(float *)(a9 + 8), *a5, v17, *(float *)(a9 + 4), *a7);
  float v18 = v25;
  *(float *)(a11 + 12) = v25;
  if (*(unsigned __int16 *)(a1 + 28) >= 0x23Fu)
  {
    int v21 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 711, "GetSecPerEpochIndB", (char)"IsValid()");
    double v22 = "glsignalid.h";
    int v23 = 711;
    goto LABEL_23;
  }
  __int16 v19 = BlueFin::GlSignalId::s_assSignalIndexAndGnss2epochIndB[7 * *(int *)(a1 + 24)
                                                             + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)(a1 + 20)]];
  if (!v19)
  {
    int v21 = "ssEpochIndB != 0";
    DeviceFaultNotify("glsignalid.h", 718, "GetSecPerEpochIndB", (char)"ssEpochIndB != 0");
    double v22 = "glsignalid.h";
    int v23 = 718;
    goto LABEL_23;
  }
  float v20 = -(float)((float)v19 - (float)(log10f(v18) * 10.0));
  if (v20 < 7.0) {
    float v20 = 7.0;
  }
  *(float *)(a11 + 8) = v20;
  *(_DWORD *)(a11 + 4) = 2;
  *(_DWORD *)(a1 + 12) = 1;
}

uint64_t BlueFin::GlMeSrdEstCNo::GetCNoEstimate(uint64_t a1, float *a2, float *a3, float a4, float a5, float a6, float a7, float a8, float a9, float a10)
{
  float v10 = floorf((float)(a6 / a7) + 0.5);
  *a2 = a6;
  a2[1] = v10;
  float v11 = floorf((float)(a6 / a4) + 0.5);
  a2[2] = v11;
  a2[3] = v11 * a5;
  float v12 = (float)(v10 * a9) - a8;
  float v13 = v12 - (float)(v11 * a5);
  if (v13 <= 0.0) {
    float v13 = 0.000000001;
  }
  a2[4] = v12;
  a2[5] = v13;
  float v14 = (float)((float)(v13 * a4) * a4) / (float)(a6 * a6);
  a2[6] = a5;
  a2[7] = v14;
  float v15 = v14 + a5;
  a2[8] = v15;
  int v16 = *(_DWORD *)(a1 + 12);
  if (v16 == 2)
  {
    float v17 = (float)(*(float *)(a1 + 16) + 1.0) * a5;
    *(float *)(a1 + 8) = v17;
  }
  else
  {
    float v17 = *(float *)(a1 + 8);
  }
  *a3 = a10;
  float v18 = (float)((float)(1.0 - a10) * v15) + (float)(a10 * v17);
  a3[2] = v18;
  if (!v16) {
    float v18 = a2[8];
  }
  *(float *)(a1 + 8) = v18;
  float v19 = v18 - a5;
  if (v19 <= 0.0) {
    float v19 = 0.000000001;
  }
  a3[1] = v19;
  if (v19 <= 0.0)
  {
    DeviceFaultNotify("glmesrd_estcno.cpp", 471, "GetCNoEstimate", (char)"closedLpMsmt.fCaEpochCohSigPwr > 0.0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_estcno.cpp", 471, "closedLpMsmt.fCaEpochCohSigPwr > 0.0");
  }
  a3[3] = v19 / a5;
  return 1;
}

void BlueFin::GlMeSrdEstCarrPrm::OverrideTrkCarrPrmRmse(uint64_t a1, const BlueFin::GlSignalId *a2, uint64_t a3, float a4)
{
  if (*(unsigned char *)(a3 + 1)) {
    BOOL v4 = *(_DWORD *)(a3 + 20) == 7;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4 && a2 != 0)
  {
    if (a4 <= 40.0)
    {
      if (a4 >= 10.0) {
        float v6 = (float)((float)((float)(a4 + -10.0) * -0.15) + 5.0) * 0.000000001;
      }
      else {
        float v6 = 0.000000005;
      }
    }
    else
    {
      float v6 = 5.0e-10;
    }
    *(float *)(a3 + 16) = BlueFin::GlMeSrdAsicUnitConverter::PpuToHz((BlueFin::GlMeSrdAsicUnitConverter *)(a1 + 456), v6, a2);
  }
}

uint64_t BlueFin::GlMeSrdNavBitResults::isGarbage(BlueFin::GlMeSrdNavBitResults *this)
{
  uint64_t v1 = *(unsigned __int8 *)this;
  if (*(unsigned char *)this)
  {
    uint64_t v1 = *((unsigned __int8 *)this + 650);
    if (*((unsigned char *)this + 650)) {
      uint64_t v1 = *((unsigned __int8 *)this + 652) == 255 || *((unsigned __int8 *)this + 651) == 255;
    }
    if (*((__int16 *)this + 2) == -1
      || *((_DWORD *)this + 164) == -1
      || *((__int16 *)this + 458) == -1
      || *((_DWORD *)this + 230) == -1
      || *((_DWORD *)this + 231) == -1)
    {
      return 1;
    }
  }
  return v1;
}

uint64_t BlueFin::GlMeStateProvider::IsL5MsaEnabled(BlueFin::GlMeStateProvider *this)
{
  return *((unsigned __int8 *)this + 16);
}

void BlueFin::GlMeSrdEstCodePrm::OverrideTrkCodePrmRmsev2022(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, uint64_t a6)
{
  if (!*(unsigned char *)a6) {
    return;
  }
  float v10 = __exp10f(*(float *)(a4 + 8) / 10.0);
  uint64_t v11 = *(int *)(a1 + 12);
  float v12 = sqrtf((float)((float)(a5[22] * a5[23])* (float)((float)(2.0 / (float)(v10 * (float)(a5[5] * (float)(2.0 - a5[23])))) + 1.0))/ (float)(v10 + v10));
  if (v11 == 2) {
    float v12 = v12 * 2.5;
  }
  *(float *)(a6 + 16) = v12;
  if (!v11 && *(float *)(a4 + 8) < 22.0)
  {
    float v12 = v12 * 1.5;
    *(float *)(a6 + 16) = v12;
  }
  if (*(unsigned __int16 *)(a1 + 16) >= 0x23Fu)
  {
    float v18 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 806, "GetChipsPerSec", (char)"IsValid()");
    int v19 = 806;
    goto LABEL_22;
  }
  uint64_t v13 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v14 = BlueFin::GlSvId::s_aucSvId2gnss[v13];
  int v15 = BlueFin::GlSignalId::s_aulSignalIndexAndGnss2chipsPerEpoch[7 * (int)v11 + v14];
  if (!v15 || !BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v11 - v11 + v14])
  {
    float v18 = "ulChipsPerEpoch != 0 && ulMsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 814, "GetChipsPerSec", (char)"ulChipsPerEpoch != 0 && ulMsPerEpoch != 0");
    int v19 = 814;
LABEL_22:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v19, v18);
  }
  float v16 = flt_263BADE50[(v13 - 52) < 0xE]
      * (float)(1000
              * v15
              / BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v11 - v11 + v14]);
  unsigned int v17 = BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v11 - v11 + v14];
  if ((v17 > 8 || ((1 << v17) & 0x134) == 0)
    && ((v13 - 76) <= 0x3E && ((1 << (v13 - 76)) & 0x7C0000000000001FLL) != 0
     || (v13 - 33) <= 0x12))
  {
    float v12 = v12 + v12;
    *(float *)(a6 + 16) = v12;
  }
  if (v12 < v16) {
    *(float *)(a6 + 16) = v16;
  }
}

void BlueFin::GlMeSrdEstCodePrm::OverrideTrkCodePrmRmse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!*(unsigned char *)a6) {
    return;
  }
  if (*(unsigned __int16 *)(a1 + 16) >= 0x23Fu)
  {
    int v21 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 806, "GetChipsPerSec", (char)"IsValid()");
    int v22 = 806;
    goto LABEL_20;
  }
  uint64_t v7 = BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)(a1 + 8)];
  uint64_t v8 = *(int *)(a1 + 12);
  int v9 = BlueFin::GlSignalId::s_aulSignalIndexAndGnss2chipsPerEpoch[7 * (int)v8 + v7];
  unsigned int v10 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v8 - v8 + v7];
  if (v9) {
    BOOL v11 = v10 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    int v21 = "ulChipsPerEpoch != 0 && ulMsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 814, "GetChipsPerSec", (char)"ulChipsPerEpoch != 0 && ulMsPerEpoch != 0");
    int v22 = 814;
LABEL_20:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v22, v21);
  }
  float v14 = (float)(1000 * v9 / v10);
  float v15 = __exp10f((float)(*(float *)(a4 + 8) * 0.7) / 10.0);
  float v16 = sqrtf((float)(fmaxf(*(float *)(a5 + 88), 0.4) * fmaxf(*(float *)(a5 + 92), 0.5)) / (float)(v15 + v15));
  int v17 = *(unsigned __int8 *)(a1 + 8);
  float v18 = flt_263BADE50[(v17 - 52) < 0xE];
  *(float *)(a6 + 16) = v16;
  float v19 = v18 * v14;
  unsigned int v20 = BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *(int *)(a1 + 12)
                                                               - *(int *)(a1 + 12)
                                                               + BlueFin::GlSvId::s_aucSvId2gnss[v17]];
  if (v20 <= 8 && ((1 << v20) & 0x134) != 0)
  {
    float v19 = v19 * 0.5;
  }
  else if ((v17 - 76) <= 0x3E && ((1 << (v17 - 76)) & 0x7C0000000000001FLL) != 0 {
         || (v17 - 33) <= 0x12)
  }
  {
    float v16 = v16 + v16;
    *(float *)(a6 + 16) = v16;
  }
  if (v16 < v19) {
    *(float *)(a6 + 16) = v19;
  }
}

uint64_t BlueFin::GlMeSrdSatReport::UpdateMsmtCensorshipStatus(BlueFin::GlMeSrdSatReport *this, BlueFin::GlMeDSPMeas *a2, BlueFin::GlMeSrdDspMeasAux *a3)
{
  int v6 = *((_DWORD *)a2 + 21);
  int v7 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 1) + 24) + 40))(*(void *)(*((void *)this + 1) + 24));
  if (v7)
  {
    uint64_t v8 = 0;
    while (*((unsigned __int8 *)a3 + v8 + 88) != 255)
    {
      if (++v8 == 5) {
        goto LABEL_7;
      }
    }
    *((_DWORD *)a2 + 21) &= ~0x20u;
  }
LABEL_7:
  if (*((unsigned char *)this + 3534))
  {
    uint64_t TrkRslts = (BlueFin::GlMeSrdSatReport *)BlueFin::GlMeSrdDspMeasAux::GetTrkRslts(a3);
    uint64_t result = BlueFin::GlMeSrdSatReport::GetMinGearNum(TrkRslts, v10, v11, v12);
    if ((~v6 & 0x40060) != 0 || *((unsigned char *)a3 + 180) != 0) {
      goto LABEL_25;
    }
    int v15 = *((char *)this + 3535);
    if (v15 >= 1)
    {
      *((unsigned char *)this + 3535) = v15 - 1;
      LOBYTE(v15) = v15 - 1;
    }
    if ((result - 1) > 1)
    {
      if (result != 3)
      {
        if ((result & 0xFE) != 4)
        {
          DeviceFaultNotify("glmesrd_sat_report_validity_chk.cpp", 399, "UpdateMsmtCensorshipStatus", (char)"0");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_report_validity_chk.cpp", 399, "0");
        }
        if ((*((_DWORD *)a2 + 22) - 1) <= 2) {
          goto LABEL_44;
        }
        goto LABEL_42;
      }
      int v16 = *((_DWORD *)a2 + 22);
      if ((v16 - 1) <= 2)
      {
        LOBYTE(v15) = 0;
        *((_WORD *)this + 1767) = 0;
      }
    }
    else
    {
      int v16 = *((_DWORD *)a2 + 22);
    }
    if ((v16 | 4) == 4)
    {
LABEL_25:
      *((unsigned char *)this + 3535) = 3;
      goto LABEL_37;
    }
LABEL_42:
    char v20 = *((unsigned char *)this + 3534);
    if (!v20) {
      goto LABEL_39;
    }
    if ((char)v15 > 0) {
      goto LABEL_38;
    }
LABEL_44:
    char v20 = 0;
    *((_WORD *)this + 1767) = 0;
    goto LABEL_39;
  }
  if (BlueFin::GlMeSrdDspMeasAuxTrackRslts::ReasonsForRequest::Any((BlueFin::GlMeSrdDspMeasAux *)((char *)a3 + 200))
    || (uint64_t result = BlueFin::GlMeSrdDspMeasAuxTrackRslts::ReasonsForRequest::Any((BlueFin::GlMeSrdDspMeasAux *)((char *)a3 + 208)),
        result))
  {
    BOOL v17 = BlueFin::GlMeSrdDspMeasAuxTrackRslts::ReasonsForRequest::AnyExcludingCodeAndDoppler((BlueFin::GlMeSrdDspMeasAux *)((char *)a3 + 200))
       || BlueFin::GlMeSrdDspMeasAuxTrackRslts::ReasonsForRequest::AnyExcludingCodeAndDoppler((BlueFin::GlMeSrdDspMeasAux *)((char *)a3 + 208));
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 1) + 24) + 48))(*(void *)(*((void *)this + 1) + 24));
    if ((result & 1) == 0)
    {
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 1) + 24) + 32))(*(void *)(*((void *)this + 1) + 24));
      if ((result & 1) == 0)
      {
        uint64_t result = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 1) + 24) + 16))(*(void *)(*((void *)this + 1) + 24));
        BOOL v18 = (*(void *)&v6 & 0x40060) != 0x40060 || v17;
        if ((v7 | result) != 1 && v18)
        {
          *((_WORD *)this + 1767) = 769;
          char v20 = 1;
LABEL_38:
          *((_DWORD *)a2 + 21) &= 0xFFFFFF1F;
          *((_DWORD *)a3 + 49) |= 0x1000u;
          *((_DWORD *)a2 + 21) &= 0xFFFFFDF7;
          *((_DWORD *)a2 + 14) = 897988541;
          goto LABEL_39;
        }
      }
    }
  }
LABEL_37:
  char v20 = *((unsigned char *)this + 3534);
  if (v20) {
    goto LABEL_38;
  }
LABEL_39:
  *((unsigned char *)a3 + 184) = v20;
  *((unsigned char *)a3 + 185) = *((unsigned char *)this + 3535);
  return result;
}

BOOL BlueFin::GlMeSrdSatReport::GenerateAcqMgrRequests(BlueFin::GlMeSrdSatReport *this, BlueFin::GlMeDSPMeas *a2, BlueFin::GlMeSrdDspMeasAux *a3)
{
  unsigned int v3 = *((unsigned __int8 *)a3 + 97);
  if ((*((unsigned char *)a2 + 87) & 4) != 0) {
    unsigned int v4 = 100;
  }
  else {
    unsigned int v4 = 10;
  }
  if (v4 < v3)
  {
    DeviceFaultNotify("glmesrd_sat_report_validity_chk.cpp", 190, "GenerateAcqMgrRequests", (char)"ucMaxInvalidCountBeforeStartingSearch <= ucMaxInvalidCountBeforeKillingTrack");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_report_validity_chk.cpp", 190, "ucMaxInvalidCountBeforeStartingSearch <= ucMaxInvalidCountBeforeKillingTrack");
  }
  if (*((unsigned __int8 *)a3 + 8) - 81 >= 0x35) {
    unsigned int v5 = 8;
  }
  else {
    unsigned int v5 = 2;
  }
  unsigned int v6 = *((unsigned __int8 *)this + 3529);
  unsigned int v7 = *((_DWORD *)a3 + 48) & 0x800;
  unsigned int v8 = *((unsigned __int8 *)this + 3528);
  unsigned int v9 = *((unsigned __int8 *)this + 3530);
  unsigned int v10 = *((unsigned __int8 *)this + 3531);
  BOOL v11 = v10 > 1;
  unsigned int v12 = *((unsigned __int8 *)this + 3532);
  unsigned int v13 = *((unsigned __int8 *)this + 3533);
  BOOL v14 = v13 > 1;
  int v15 = (*((_DWORD *)a3 + 48) >> 11) & 1;
  BOOL v16 = v8 > v3;
  BOOL v17 = v9 > v3;
  BOOL v18 = v12 > v3;
  if (v5 < v6 || v4 < v8 || v4 < v9 || v4 < v10 || v4 < v12 || v7 != 0 || v4 < v13)
  {
    BOOL v14 = 0;
    LOBYTE(v15) = 0;
    BOOL v18 = 0;
    BOOL v11 = 0;
    BOOL v17 = 0;
    BOOL v16 = 0;
  }
  BOOL result = v4 < v13;
  *((unsigned char *)a3 + 200) = v5 < v6;
  *((unsigned char *)a3 + 20BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v4 < v8;
  *((unsigned char *)a3 + 202) = v4 < v9;
  *((unsigned char *)a3 + 203) = v4 < v10;
  *((unsigned char *)a3 + 204) = v4 < v12;
  *((unsigned char *)a3 + 205) = v7 >> 11;
  *((unsigned char *)a3 + 206) = result;
  *(_WORD *)((char *)a3 + 207) = 0;
  *((unsigned char *)a3 + 209) = v16;
  *((unsigned char *)a3 + 210) = v17;
  *((unsigned char *)a3 + 21BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v11;
  *((unsigned char *)a3 + 212) = v18;
  *((unsigned char *)a3 + 213) = v15;
  *((unsigned char *)a3 + 214) = v14;
  *((unsigned char *)a3 + 215) = 0;
  return result;
}

uint64_t BlueFin::GlMeSrdEstNavBit::Run(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float *a6, unsigned char *a7, float *a8, unsigned char *a9, uint64_t a10, uint64_t a11)
{
  if (!*(unsigned char *)a5)
  {
    float v59 = "stAsicNavBitTrkMsmt.bValid";
    DeviceFaultNotify("glmesrd_navbit.cpp", 63, "Run", (char)"stAsicNavBitTrkMsmt.bValid");
    int v60 = 63;
    goto LABEL_64;
  }
  unsigned int v12 = *(unsigned __int16 *)(a5 + 2);
  *(_WORD *)(a11 + 2) = v12;
  unsigned int v13 = *(unsigned __int16 *)(a5 + 672);
  if (v13 >= 0x21)
  {
    float v59 = "stAsicNavBitTrkMsmt.usNumWords <= GlMeSrdAsicNavBitTrkMsmt::MAX_NUM_TRK_DATA_WORDS";
    DeviceFaultNotify("glmesrd_navbit.cpp", 67, "Run", (char)"stAsicNavBitTrkMsmt.usNumWords <= GlMeSrdAsicNavBitTrkMsmt::MAX_NUM_TRK_DATA_WORDS");
    int v60 = 67;
    goto LABEL_64;
  }
  uint64_t v17 = result;
  uint64_t v18 = 0;
  *(_WORD *)(a11 + 928) = v13;
  *(_WORD *)(a11 + 4) = *(_WORD *)(a5 + 4);
  do
  {
    float v19 = (_DWORD *)(a11 + v18);
    _OWORD v19[2] = *(_DWORD *)(a5 + v18 + 8);
    v19[34] = *(_DWORD *)(a5 + v18 + 136);
    v19[165] = *(_DWORD *)(a5 + v18 + 404);
    v19[197] = *(_DWORD *)(a5 + v18 + 532);
    v18 += 4;
  }
  while (v18 != 128);
  if (*(unsigned char *)(a5 + 392))
  {
    *(_OWORD *)(a11 + 360) = 0u;
    *(_OWORD *)(a11 + 376) = 0u;
    *(_OWORD *)(a11 + 328) = 0u;
    *(_OWORD *)(a11 + 344) = 0u;
    *(_OWORD *)(a11 + 296) = 0u;
    *(_OWORD *)(a11 + 312) = 0u;
    *(_OWORD *)(a11 + 264) = 0u;
    *(_OWORD *)(a11 + 280) = 0u;
    if (v12)
    {
      unsigned __int8 v20 = 0;
      int v21 = *(unsigned __int8 *)(result + 8);
      unsigned __int16 v22 = v12;
      do
      {
        int v23 = 0;
        if ((v22 & 0xFFE0) != 0) {
          int v24 = 32;
        }
        else {
          int v24 = v22;
        }
        uint64_t v25 = v20;
        int v26 = *(_DWORD *)(a11 + 4 * v20 + 8);
        int v27 = v24;
        do
        {
          if (v26 < 0)
          {
            v21 ^= 1u;
            *(unsigned char *)(result + 8) = v21;
          }
          v26 *= 2;
          int v23 = v21 + 2 * v23;
          --v27;
        }
        while (v27);
        v22 -= v24;
        unsigned __int8 v20 = v25 + 1;
        *(_DWORD *)(a11 + 4 * v25 + 264) = v23 << -(char)v24;
      }
      while (v22);
    }
    BOOL result = *(void *)(result + 16);
    if (result && a8[2] > a6[3])
    {
      BOOL result = BlueFin::GlMeSrdViterbiDecoder::RunViterbi((BlueFin::GlMeSrdViterbiDecoder *)result, v12, (unsigned int *)(a11 + 660), (unsigned int *)(a11 + 788), 0);
      *(_WORD *)(a11 + 928) >>= 1;
      unsigned int v12 = *(unsigned __int16 *)(a11 + 2) >> 1;
      *(_WORD *)(a11 + 2) >>= 1;
      *(unsigned char *)(a11 + 930) = 1;
    }
  }
  if (*(unsigned char *)(a5 + 394))
  {
    uint64_t v28 = 0;
    uint64_t v29 = a11 + 392;
    uint64_t v30 = a5 + 264;
    do
    {
      for (uint64_t i = 0; i != 32; i += 4)
        *(_DWORD *)(v29 + i) = *(_DWORD *)(v30 + i);
      ++v28;
      v29 += 32;
      v30 += 32;
    }
    while (v28 != 4);
    uint64_t v32 = 0;
    while (1)
    {
      float v33 = (_OWORD *)(a11 + 32 * v32 + 520);
      *float v33 = 0uLL;
      v33[1] = 0uLL;
      if (v12) {
        break;
      }
LABEL_35:
      if (++v32 == 4)
      {
        char v43 = *(unsigned char *)(a5 + 394);
        goto LABEL_38;
      }
    }
    uint64_t v34 = 0;
    int v35 = *(unsigned __int8 *)(v17 + v32 + 9);
    unsigned __int16 v36 = v12;
    while (1)
    {
      int v37 = v36;
      if ((v36 & 0xFFE0) != 0) {
        int v37 = 32;
      }
      if (v34 == 8) {
        break;
      }
      int v38 = 0;
      v36 -= v37;
      int v39 = *(_DWORD *)(a11 + 32 * v32 + 4 * v34 + 392);
      int v40 = v37;
      do
      {
        if (v39 < 0)
        {
          v35 ^= 1u;
          *(unsigned char *)(v17 + v32 + 9) = v35;
        }
        v39 *= 2;
        int v38 = v35 + 2 * v38;
        --v40;
      }
      while (v40);
      int v41 = v38 << -(char)v37;
      uint64_t v42 = a11 + 32 * v32 + 4 * v34++;
      *(_DWORD *)(v42 + 520) = v41;
      if (!v36) {
        goto LABEL_35;
      }
    }
    float v59 = "ucWordOffset < GlMeSrdAsicNavBitTrkMsmt::MAX_NUM_TRK_LOW_TOW_DATA_WORDS";
    DeviceFaultNotify("glmesrd_navbit.cpp", 165, "Run", (char)"ucWordOffset < GlMeSrdAsicNavBitTrkMsmt::MAX_NUM_TRK_LOW_TOW_DATA_WORDS");
    int v60 = 165;
LABEL_64:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_navbit.cpp", v60, v59);
  }
  char v43 = 0;
LABEL_38:
  *(unsigned char *)a11 = 1;
  char v44 = *(unsigned char *)(a5 + 392);
  *(unsigned char *)(a11 + 648) = v44;
  char v45 = *(unsigned char *)(a5 + 393);
  *(unsigned char *)(a11 + 649) = v45;
  *(unsigned char *)(a11 + 650) = v43;
  *(_WORD *)(a11 + 65BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *(_WORD *)(a5 + 395);
  *(_DWORD *)(a11 + 656) = *(_DWORD *)(a5 + 400);
  *(_WORD *)(a11 + 916) = *(_WORD *)(a5 + 660);
  char v46 = *(unsigned char *)(a5 + 662);
  *(unsigned char *)(a11 + 918) = v46;
  char v47 = *(unsigned char *)(a5 + 663);
  *(unsigned char *)(a11 + 919) = v47;
  *(void *)(a11 + 920) = *(void *)(a5 + 664);
  unsigned int v48 = (*a7 + 117);
  if (v48 < 0x24 || a9[28] == 0) {
    char v50 = 0;
  }
  else {
    char v50 = a9[29];
  }
  int v51 = *(unsigned __int8 *)a8;
  BOOL v53 = a8[2] < a6[15] && v51 != 0;
  char v54 = (v50 | v53) ^ 1;
  *(unsigned char *)(a11 + 648) = v54 & v44;
  *(unsigned char *)(a11 + 649) = v54 & v45;
  *(unsigned char *)(a11 + 650) = v54 & v43;
  char v55 = a9[31];
  if (v55)
  {
    if (a9[33]) {
      char v55 = 1;
    }
    else {
      char v55 = a9[32];
    }
  }
  if (v48 < 0x24) {
    char v55 = 0;
  }
  BOOL v57 = a8[2] < a6[18] && v51 != 0;
  char v58 = (v55 | v57) ^ 1;
  *(unsigned char *)(a11 + 918) = v58 & v46;
  *(unsigned char *)(a11 + 919) = v58 & v47;
  return result;
}

void BlueFin::GlMeSrdSatRptTrkMsmtMI::BuildNavBitMsmt(BlueFin::GlMeSrdSatRptTrkMsmtMI *this)
{
  *((unsigned char *)this + 1144) = 0;
  uint64_t v1 = *(void *)this;
  if ((*(unsigned char *)(*(void *)this + 9) & 4) != 0)
  {
    uint64_t v3 = (*(uint64_t (**)(void, void))(**((void **)this + 2) + 144))(*((void *)this + 2), *((unsigned __int8 *)this + 41));
    uint64_t v4 = *(void *)this;
    int v5 = *(unsigned __int16 *)(*(void *)this + 946);
    if (*(_WORD *)(*(void *)this + 946)) {
      unsigned __int16 v6 = ((v5 - 1) >> 5) + 1;
    }
    else {
      unsigned __int16 v6 = 0;
    }
    if (v6 >= 0x21u)
    {
      DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", 1779, "BuildNavBitMsmt", (char)"usNumWords <= GlMeSrdAsicNavBitTrkMsmt::MAX_NUM_TRK_DATA_WORDS");
      CrashData();
    }
    *((_WORD *)this + 573) = v5;
    *((_WORD *)this + 574) = *(_WORD *)(v4 + 734);
    *((_WORD *)this + 902) = *(_WORD *)(v4 + 732);
    *((_DWORD *)this + 386) = BlueFin::GlMeSrdSatRptTrkMsmtMIBase::GetEpochCntInBits(this);
    *((_DWORD *)this + 452) = BlueFin::GlMeSrdSatRptTrkMsmtMIBase::GetEpochCntInBits(this);
    *((unsigned char *)this + 1540) = *(unsigned char *)(v4 + 948);
    *((_WORD *)this + 908) = v6;
    *((unsigned char *)this + 1539) = *(unsigned char *)(v3 + 28);
    *((_DWORD *)this + 453) = BlueFin::GlMeSrdSatRptTrkMsmtMI::GetEpochCntInMs((BlueFin::GlSignalId **)this);
    int v7 = v5 & 0x1F;
    char v8 = 32 - v7;
    *((unsigned char *)this + 1144) = 1;
    int v9 = *(_DWORD *)(v1 + 8);
    if (v6) {
      BOOL v10 = (*(_DWORD *)(v1 + 8) & 0x800) == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10)
    {
      *((unsigned char *)this + 1536) = 0;
    }
    else
    {
      if (v6 >= 0x11u)
      {
        DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", 1809, "BuildNavBitMsmt", (char)"usNumWords <= _DIM(rTrkBits.u.sBits.fll_bvec.word)");
        CrashData();
      }
      BOOL v11 = (int *)(v4 + 952);
      if (v6 <= 1u) {
        uint64_t v12 = 1;
      }
      else {
        uint64_t v12 = v6;
      }
      unsigned int v13 = (_DWORD *)((char *)this + 1152);
      do
      {
        int v14 = *v11++;
        *v13++ = v14;
        --v12;
      }
      while (v12);
      if (v7) {
        *((_DWORD *)this + v6 + 287) <<= v8;
      }
      *((unsigned char *)this + 1536) = 1;
      int v9 = *(_DWORD *)(v1 + 8);
    }
    if (v6 && (v9 & 0x1000) != 0)
    {
      if (v6 >= 0x11u)
      {
        DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", 1836, "BuildNavBitMsmt", (char)"usNumWords <= _DIM(rTrkBits.u.sBits.fll_mvec.word)");
        CrashData();
      }
      int v15 = (int *)(v4 + 1080);
      if (v6 <= 1u) {
        uint64_t v16 = 1;
      }
      else {
        uint64_t v16 = v6;
      }
      uint64_t v17 = (_DWORD *)((char *)this + 1280);
      do
      {
        int v18 = *v15++;
        *v17++ = v18;
        --v16;
      }
      while (v16);
      if (v7) {
        *((_DWORD *)this + v6 + 319) <<= v8;
      }
      *((unsigned char *)this + 1537) = 1;
      int v9 = *(_DWORD *)(v1 + 8);
    }
    else
    {
      *((unsigned char *)this + 1537) = 0;
    }
    if (v6 && (v9 & 0x2000) != 0)
    {
      if (v6 >= 0x11u)
      {
        DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", 1860, "BuildNavBitMsmt", (char)"usNumWords <= _DIM(rTrkBits.u.sBits.pll_bvec.word)");
        CrashData();
      }
      float v19 = (int *)(v4 + 1016);
      if (v6 <= 1u) {
        uint64_t v20 = 1;
      }
      else {
        uint64_t v20 = v6;
      }
      int v21 = (_DWORD *)((char *)this + 1548);
      do
      {
        int v22 = *v19++;
        *v21++ = v22;
        --v20;
      }
      while (v20);
      if (v7) {
        *((_DWORD *)this + v6 + 386) <<= v8;
      }
      *((unsigned char *)this + 1806) = 1;
      int v9 = *(_DWORD *)(v1 + 8);
    }
    else
    {
      *((unsigned char *)this + 1806) = 0;
    }
    if (v6 && (v9 & 0x4000) != 0)
    {
      if (v6 >= 0x11u)
      {
        DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", 1884, "BuildNavBitMsmt", (char)"usNumWords <= _DIM(rTrkBits.u.sBits.pll_mvec.word)");
        CrashData();
      }
      int v23 = (int *)(v4 + 1144);
      if (v6 <= 1u) {
        uint64_t v24 = 1;
      }
      else {
        uint64_t v24 = v6;
      }
      uint64_t v25 = (_DWORD *)((char *)this + 1676);
      do
      {
        int v26 = *v23++;
        *v25++ = v26;
        --v24;
      }
      while (v24);
      if (v7) {
        *((_DWORD *)this + v6 + 418) <<= v8;
      }
      *((unsigned char *)this + 1807) = 1;
      int v9 = *(_DWORD *)(v1 + 8);
    }
    else
    {
      *((unsigned char *)this + 1807) = 0;
    }
    if (v6 && (v9 & 0x8000) != 0)
    {
      *((unsigned char *)this + 1538) = 1;
      *((_OWORD *)this + 88) = 0u;
      *((_OWORD *)this + 89) = 0u;
      *((_OWORD *)this + 90) = 0u;
      *((_OWORD *)this + 9BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
      *((_OWORD *)this + 92) = 0u;
      *((_OWORD *)this + 93) = 0u;
      *((_OWORD *)this + 94) = 0u;
      *((_OWORD *)this + 95) = 0u;
      uint64_t v27 = *(unsigned __int8 *)((*(uint64_t (**)(void, void))(**((void **)this + 2) + 144))(*((void *)this + 2), *((unsigned __int8 *)this + 41))+ 28);
      if (v27 >= 5)
      {
        DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", 1912, "BuildNavBitMsmt", (char)"ucNumFllLowTowPhases <= GlMeSrdAsicNavBitTrkMsmt::MAX_NUM_TRK_LOW_TOW_FLL_PHASES");
        CrashData();
      }
      uint64_t v28 = *(void *)this;
      if ((*(unsigned char *)(*(void *)this + 9) & 4) == 0)
      {
        DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", 531, "GetNumLowTowPhaseFromRpc", (char)"m_rRpcBuffer.GetFlags().Has(FLGS_RECEIVED_TRACKBITS)");
        CrashData();
        uint64_t v28 = *(void *)this;
      }
      if ((*(unsigned char *)(v28 + 944) & 0x40) != 0) {
        int v29 = 4;
      }
      else {
        int v29 = 2;
      }
      if (v27 == v29
        || (DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", 1913, "BuildNavBitMsmt", (char)"ucNumFllLowTowPhases == GetNumLowTowPhaseFromRpc()"), CrashData(), v27))
      {
        uint64_t v30 = 0;
        float v31 = (int *)(v4 + 952);
        if (v6 <= 1u) {
          uint64_t v32 = 1;
        }
        else {
          uint64_t v32 = v6;
        }
        float v33 = (char *)this + 1408;
        do
        {
          uint64_t v34 = v31;
          int v35 = v33;
          uint64_t v36 = v32;
          do
          {
            int v37 = *v34++;
            *v35++ = v37;
            --v36;
          }
          while (v36);
          if (v7)
          {
            if (v6 >= 9u)
            {
              DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", 1924, "BuildNavBitMsmt", (char)"usNumWords <= GlMeSrdAsicNavBitTrkMsmt::MAX_NUM_TRK_LOW_TOW_DATA_WORDS");
              CrashData();
            }
            *((_DWORD *)this + 8 * v30 + v6 + 351) <<= v8;
          }
          ++v30;
          v33 += 32;
          v31 += 16;
        }
        while (v30 != v27);
      }
    }
    else
    {
      *((unsigned char *)this + 1538) = 0;
    }
  }
}

uint64_t BlueFin::GlMeSrdSatRptTrkMsmtMI::GetEpochCntInMs(BlueFin::GlSignalId **this)
{
  uint64_t result = *((unsigned int *)*this + 23);
  if (result != -1) {
    return result;
  }
  uint64_t v3 = this[4];
  char EpochPerSymbol = BlueFin::GlSignalId::GetEpochPerSymbol(v3);
  if (*((unsigned __int16 *)v3 + 4) >= 0x23Fu) {
    goto LABEL_17;
  }
  char v5 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)v3 + 1)
                                                             - *((int *)v3 + 1)
                                                             + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)v3]];
  if (!v5)
  {
LABEL_18:
    BOOL v11 = "ucMsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
    int v12 = 685;
LABEL_19:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v12, v11);
  }
  unsigned __int16 v6 = this[4];
  uint64_t v7 = *(unsigned __int8 *)v6;
  if ((v7 - 81) > 0x34)
  {
    unsigned __int8 v9 = v5 * EpochPerSymbol;
    goto LABEL_12;
  }
  if ((*((unsigned char *)*this + 24) & 0xF) == 0)
  {
    if (*((unsigned __int16 *)v6 + 4) < 0x23Fu)
    {
      unsigned __int8 v9 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)v6 + 1)
                                                                 - *((int *)v6 + 1)
                                                                 + BlueFin::GlSvId::s_aucSvId2gnss[v7]];
      if (v9) {
        goto LABEL_12;
      }
      goto LABEL_18;
    }
LABEL_17:
    BOOL v11 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
    int v12 = 678;
    goto LABEL_19;
  }
  char EpochPerBit = BlueFin::GlSignalId::GetEpochPerBit(this[4]);
  if (*((unsigned __int16 *)v6 + 4) >= 0x23Fu) {
    goto LABEL_17;
  }
  if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)v6 + 1)
                                                              - *((int *)v6 + 1)
                                                              + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)v6]])
    goto LABEL_18;
  unsigned __int8 v9 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)v6 + 1)
                                                             - *((int *)v6 + 1)
                                                             + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)v6]]
     * EpochPerBit;
  unsigned __int16 v6 = this[4];
  LODWORD(v7) = *(unsigned __int8 *)v6;
LABEL_12:
  if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)v6 + 1)
                                                              - *((int *)v6 + 1)
                                                              + BlueFin::GlSvId::s_aucSvId2gnss[v7]] == 1)
    unsigned __int8 v10 = 20;
  else {
    unsigned __int8 v10 = v9;
  }
  return BlueFin::GlMeSrdSatRptTrkMsmtMIBase::GetEpochCntInBits((BlueFin::GlMeSrdSatRptTrkMsmtMIBase *)this)
       * v10;
}

uint64_t BlueFin::GlMeSrdSatRptTrkMsmtMIBase::GetEpochCntInBits(BlueFin::GlMeSrdSatRptTrkMsmtMIBase *this)
{
  uint64_t v2 = *(void *)this;
  if ((*(unsigned char *)(*(void *)this + 8) & 4) != 0)
  {
    uint64_t result = *(unsigned int *)(v2 + 96);
    if (*(unsigned char *)(v2 + 100))
    {
      unsigned int v4 = *(_DWORD *)(*((void *)this + 1) + 4);
      unsigned int v5 = (v4 & 0xFFFF8000) + result;
      if (v5 >= v4) {
        uint64_t result = v5;
      }
      else {
        uint64_t result = v5 + 0x8000;
      }
    }
  }
  else
  {
    uint64_t result = 0;
  }
  if ((*(unsigned char *)(v2 + 24) & 0xF) == 2)
  {
    unsigned __int16 v6 = (unsigned __int8 *)*((void *)this + 4);
    int v7 = *v6;
    if ((v7 + 117) > 0x23u)
    {
      if ((v7 - 81) > 0x34)
      {
        if ((v7 - 52) <= 0xD)
        {
          int v8 = *(_DWORD *)(*((void *)this + 1) + 4);
          double v9 = floor((double)(result - v8) * 0.5);
          return (v8 + (int)(v9 + v9));
        }
      }
      else if (*((_DWORD *)v6 + 1) == 2)
      {
        return (100 * result);
      }
      else
      {
        return result;
      }
    }
    else if ((*((_DWORD *)v6 + 1) - 1) >= 2)
    {
      return result;
    }
    else
    {
      return (100 * result);
    }
  }
  return result;
}

BlueFin::GlMeWinMgr *BlueFin::GlMeWinMgr::GlMeWinMgr(BlueFin::GlMeWinMgr *this, BlueFin::GlMeMsmtMgr *a2, int a3)
{
  *(void *)this = &unk_270EBF4B0;
  *((void *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = a2;
  *((void *)this + 8) = a2;
  *((void *)this + 9) = 0;
  unsigned int v5 = (char *)this + 9152;
  *((void *)this + 5) = -1;
  *((void *)this + 6) = -1;
  *((unsigned char *)this + 56) = 0;
  *((_DWORD *)this + 15) = 4;
  *((void *)this + 2) = &unk_270EBF420;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 32) = 1;
  *((_WORD *)this + 17) = 0;
  *((unsigned char *)this + 36) = 0;
  unsigned __int16 v6 = (char *)this + 320;
  *((_WORD *)this + 42) = 0;
  *((_DWORD *)this + 33) = 0;
  *((_DWORD *)this + 34) = 0;
  *((_DWORD *)this + 20) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((void *)this + 15) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 32) = 1;
  *((void *)this + 12) = 0x7FEFFFFFFFFFFFFFLL;
  int v7 = (char *)this + 144;
  int v8 = (char *)this + 9312;
  BlueFin::GlMeClkModMgr::GlMeClkModMgr((uint64_t)this + 144, (uint64_t)a2, (uint64_t)this, (uint64_t)this + 9312);
  BlueFin::GlSatAidInfo::GlSatAidInfo((uint64_t)v6);
  *unsigned int v5 = 0;
  *((_DWORD *)this + 2289) = 7;
  v5[8] = 0;
  *(_OWORD *)(v5 + 12) = xmmword_263BA9ED0;
  *((void *)this + 1148) = 0;
  *((void *)this + 1150) = 0;
  *((void *)this + 1149) = 0;
  *((void *)this + 1154) = 0;
  *((void *)this + 1153) = 0;
  *((void *)this + 1155) = 0xBF80000000000000;
  *((void *)this + 1152) = 0;
  *((void *)this + 115BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *(_OWORD *)((char *)this + 9276) = 0u;
  *(_OWORD *)((char *)this + 9260) = 0u;
  *((void *)this + 1156) = (char *)this + 9260;
  v5[104] = 8;
  BlueFin::GlMeMiniKF::GlMeMiniKF((uint64_t)v8, (uint64_t)v7);
  *((unsigned char *)this + 9808) = 0;
  *((void *)this + 1227) = 0;
  *((unsigned char *)this + 9824) = 0;
  *((unsigned char *)this + 9832) = 0;
  *((void *)this + 1230) = 0;
  *((unsigned char *)this + 9848) = 0;
  *((_DWORD *)this + 2464) = 0;
  *((_WORD *)this + 4930) = 0;
  *((_DWORD *)this + 2466) = a3;
  *((void *)this + 1300) = 0xBFF0000000000000;
  *((_OWORD *)this + 655) = 0u;
  *(_OWORD *)((char *)this + 10436) = 0u;
  *(_OWORD *)((char *)this + 10452) = 0u;
  *(_OWORD *)((char *)this + 10468) = 0u;
  *(_OWORD *)((char *)this + 10420) = 0u;
  *((void *)this + 130BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = (char *)this + 10420;
  *((unsigned char *)this + 10416) = 19;
  *((void *)this + 1312) = (char *)this + 10508;
  *((unsigned char *)this + 10504) = 19;
  *(_OWORD *)((char *)this + 10508) = 0u;
  *(_OWORD *)((char *)this + 10524) = 0u;
  *(_OWORD *)((char *)this + 10540) = 0u;
  *(_OWORD *)((char *)this + 10556) = 0u;
  *(_OWORD *)((char *)this + 10568) = 0u;
  *((_OWORD *)this + 634) = 0u;
  *((_OWORD *)this + 635) = 0u;
  *((_OWORD *)this + 636) = 0u;
  *((_OWORD *)this + 637) = 0u;
  *((_OWORD *)this + 638) = 0u;
  *((_OWORD *)this + 639) = 0u;
  *((_OWORD *)this + 640) = 0u;
  *((_OWORD *)this + 64BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
  *((_OWORD *)this + 642) = 0u;
  *((_OWORD *)this + 643) = 0u;
  *((_OWORD *)this + 644) = 0u;
  *((_OWORD *)this + 645) = 0u;
  *((_OWORD *)this + 646) = 0u;
  *((_OWORD *)this + 647) = 0u;
  *((_OWORD *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 10380) = 0u;
  *(_OWORD *)((char *)this + 10022) = 0u;
  *(_OWORD *)((char *)this + 9996) = 0u;
  *(_OWORD *)((char *)this + 10012) = 0u;
  *(_OWORD *)((char *)this + 9964) = 0u;
  *(_OWORD *)((char *)this + 9980) = 0u;
  *(_OWORD *)((char *)this + 9932) = 0u;
  *(_OWORD *)((char *)this + 9948) = 0u;
  *(_OWORD *)((char *)this + 9900) = 0u;
  *(_OWORD *)((char *)this + 9916) = 0u;
  *(_OWORD *)((char *)this + 9868) = 0u;
  *(_OWORD *)((char *)this + 9884) = 0u;
  *(void *)((char *)this + 10135) = 0;
  *(_OWORD *)((char *)this + 10104) = 0u;
  *(_OWORD *)((char *)this + 10120) = 0u;
  *(_OWORD *)((char *)this + 10072) = 0u;
  *(_OWORD *)((char *)this + 10088) = 0u;
  *(_OWORD *)((char *)this + 10040) = 0u;
  *(_OWORD *)((char *)this + 10056) = 0u;
  return this;
}

void sub_2639B1668(_Unwind_Exception *a1)
{
  void *v2 = v1;
  _Unwind_Resume(a1);
}

int32x2_t BlueFin::GlMeClkModMgr::GlMeClkModMgr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = &unk_270EBF1C8;
  *(void *)(a1 + 8) = &unk_270EBF258;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0x36A7C5AC00000000;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 2139095039;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 2139095039;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0x36A7C5AC7F7FFFFFLL;
  *(_WORD *)(a1 + 80) = -1;
  int32x2_t result = vdup_n_s32(0x36A7C5ACu);
  *(int32x2_t *)(a1 + 84) = result;
  *(_DWORD *)(a1 + 92) = 916964780;
  *(unsigned char *)(a1 + 96) = 0;
  *(void *)(a1 + 100) = -1;
  *(void *)(a1 + 108) = -1;
  *(void *)(a1 + 116) = 0xFFFFFFFFLL;
  *(void *)(a1 + 128) = a4;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = a3;
  return result;
}

uint64_t BlueFin::GlMeMiniKF::GlMeMiniKF(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270EBF288;
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = a1 + 16;
  double v4 = (*(double (**)(uint64_t))(*(void *)a2 + 48))(a2);
  double v5 = v4 * (*(double (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
  double v6 = (*(double (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
  double v7 = (*(double (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
  *(double *)(a1 + 72) = v5;
  *(void *)(a1 + 80) = 0x3D75FD7FE0000000;
  *(double *)(a1 + 88) = v6 * v7;
  *(void *)(a1 + 96) = 0x3D023D5504170729;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(double *)(a1 + 40) = v5;
  *(_DWORD *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 68) = 1;
  *(_OWORD *)(a1 + 48) = xmmword_263BB3260;
  *(void *)(a1 + 16) = &unk_270EBF318;
  *(_DWORD *)(a1 + 104) = 0;
  double v8 = (*(double (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
  *(void *)(a1 + 168) = 0x3E90C6F7A0B5ED8DLL;
  *(double *)(a1 + 176) = v8 / 1000.0;
  *(_OWORD *)(a1 + 184) = xmmword_263BB3270;
  *(void *)(a1 + 216) = -1;
  *(void *)(a1 + 224) = -1;
  *(void *)(a1 + 112) = &unk_270EBF3B8;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0x3E90C6F7A0B5ED8DLL;
  *(_DWORD *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 164) = 1;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0xBFF0000000000000;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = v3;
  *(unsigned char *)(a1 + 232) = 1;
  double v9 = (*(double (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
  *(void *)(a1 + 296) = 0x3E90C6F7A0B5ED8DLL;
  *(double *)(a1 + 304) = v9 / 1000.0;
  *(_OWORD *)(a1 + 312) = xmmword_263BB3270;
  *(void *)(a1 + 344) = -1;
  *(void *)(a1 + 352) = -1;
  *(void *)(a1 + 240) = &unk_270EBF3B8;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0x3E90C6F7A0B5ED8DLL;
  *(_DWORD *)(a1 + 288) = 0;
  *(unsigned char *)(a1 + 292) = 1;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0xBFF0000000000000;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = v3;
  *(unsigned char *)(a1 + 360) = 1;
  double v10 = (*(double (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
  *(void *)(a1 + 424) = 0x3E90C6F7A0B5ED8DLL;
  *(double *)(a1 + 432) = v10 / 1000.0;
  *(void *)(a1 + 440) = 0x3E90C6F7A0B5ED8DLL;
  *(void *)(a1 + 448) = 0xBFF0000000000000;
  *(void *)(a1 + 464) = v3;
  *(void *)(a1 + 472) = -1;
  *(void *)(a1 + 480) = -1;
  *(void *)(a1 + 368) = &unk_270EBF3B8;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0x3E90C6F7A0B5ED8DLL;
  *(_DWORD *)(a1 + 416) = 0;
  *(unsigned char *)(a1 + 420) = 1;
  *(_OWORD *)(a1 + 400) = xmmword_263BA7BB0;
  *(void *)(a1 + 456) = 0;
  *(unsigned char *)(a1 + 488) = 1;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = *(void *)(a1 + 168);
  *(void *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 164) = 1;
  *(void *)(a1 + 152) = *(void *)(a1 + 192);
  *(_DWORD *)(a1 + 200) = 0;
  *(unsigned char *)(a1 + 232) = 1;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = *(void *)(a1 + 296);
  *(void *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 288) = 0;
  *(unsigned char *)(a1 + 292) = 1;
  *(void *)(a1 + 280) = *(void *)(a1 + 320);
  *(_DWORD *)(a1 + 328) = 0;
  *(unsigned char *)(a1 + 360) = 1;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = *(void *)(a1 + 72);
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 68) = 1;
  *(void *)(a1 + 56) = *(void *)(a1 + 96);
  *(_DWORD *)(a1 + 104) = 0;
  return a1;
}

double BlueFin::GlMeClkModMgr::GetMaxClkModUncPpu(BlueFin::GlMeClkModMgr *this)
{
  return *((float *)this + 21);
}

void FireCallback::GlEngCbOnSerialNumber(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (FireCallback::pInstance)
  {
    uint64_t v10 = *(void *)(FireCallback::pInstance + 664);
    if (v10)
    {
      uint64_t v15 = a1;
      int v14 = a2;
      uint64_t v13 = a3;
      char v12 = a4;
      (*(void (**)(uint64_t, uint64_t *, int *, uint64_t *, char *))(*(void *)v10 + 48))(v10, &v15, &v14, &v13, &v12);
      return;
    }
    BOOL v11 = "fcb,fEngCbOnSerialNumberCb,nullptr";
  }
  else
  {
    BOOL v11 = "fcb,GlEngCbOnSerialNumber,nullptr";
  }

  FireDeviceLog::DeviceLogBase(2, v11, a3, a4, a5, a6, a7, a8, a9);
}

void std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_6,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_6>,void ()(BlueFin::GlEngine *,unsigned int,unsigned int *,unsigned char)>::operator()(uint64_t a1, uint64_t a2, int *a3, gnss::fire **a4, unsigned __int8 *a5)
{
  v61[4] = *MEMORY[0x263EF8340];
  int v5 = *a3;
  uint64_t v6 = *(void *)(a1 + 8);
  gnss::fire::charToHex(*a4, (const unsigned __int8 *)(4 * *a5), 0, &v54);
  if (v5 == 805306389) {
    double v7 = "FIRE7.B0";
  }
  else {
    double v7 = "FIRE7.Unknown";
  }
  if (v5 == 805306387) {
    double v8 = "FIRE7.A0";
  }
  else {
    double v8 = (char *)v7;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v8);
  if (v53 >= 0) {
    uint64_t v15 = __p;
  }
  else {
    LOBYTE(v15) = __p[0];
  }
  FireDeviceLog::DeviceLogBase(6, "#fmh,EngineSerialNumberImpl,ver,%s,id,%s", v9, v10, v11, v12, v13, v14, (char)v15);
  if (!FireResourceMgr::fInstance) {
    operator new();
  }
  (*(void (**)(void, void **, std::string *))(**(void **)(FireResourceMgr::fInstance + 40) + 24))(*(void *)(FireResourceMgr::fInstance + 40), __p, &v54);
  FireDeviceLog::DeviceLogBase(5, "EngineState,update,state,%d,new,%d", v16, v17, v18, v19, v20, v21, *(_DWORD *)(v6 + 1356));
  if (*(_DWORD *)(v6 + 1356) != 3) {
    *(_DWORD *)(v6 + 1356) = 3;
  }
  if (*(void *)(v6 + 968))
  {
    FireDeviceLog::DeviceLogBase(6, "#fmh,ocstart,completed", v22, v23, v24, v25, v26, v27, v51);
    std::function<void ()(gnss::Result)>::operator()(v6 + 944, 1);
    std::__function::__value_func<void ()(gnss::Result)>::operator=[abi:ne180100]((void *)(v6 + 944));
  }
  uint64_t v28 = *(void *)(v6 + 936);
  v61[0] = &unk_270EB97A8;
  v61[1] = v6;
  v61[3] = v61;
  FireMessageHandler::Tick::appendCallback(v28, (uint64_t)v61, 10);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v61);
  if (*(unsigned char *)(v6 + 1064))
  {
    if (!FireResourceMgr::fInstance) {
      operator new();
    }
    (*(void (**)(char **__return_ptr))(**(void **)(FireResourceMgr::fInstance + 24) + 64))(&v59);
    int v35 = v59;
    if (v60 - v59 == 22)
    {
      FireDeviceLog::DeviceLogBase(6, "#fmh,sendAsstOscOffsetSimulator,slOscOffsetPpb,%d,usOscOffsetUncPpb,%u,ulPrecUsec,%u,ulWeekMs,%u,usGpsWeek,%u,usMicrosec,%u,usNanosec,%u,", v29, v30, v31, v32, v33, v34, *(_DWORD *)v59);
      (*(void (**)(void, void, void, void))(**(void **)(v6 + 1296) + 600))(*(void *)(v6 + 1296), *(unsigned int *)v35, *((unsigned int *)v35 + 1), 0);
    }
    else if (v60 == v59)
    {
      FireDeviceLog::DeviceLogBase(3, "#fmh,#Warning,tcxoNvItemSimulator is not available or not retreivable", v29, v30, v31, v32, v33, v34, v51);
    }
    else
    {
      FireDeviceLog::DeviceLogBase(2, "#fmh,tcxoNvItemSimulator,Size Mismatch OscOffsetInfo,NvSize,%zu,OscOffsetInfo,%zu", v29, v30, v31, v32, v33, v34, (_BYTE)v60 - (_BYTE)v59);
      if (!FireResourceMgr::fInstance) {
        operator new();
      }
      (*(void (**)(void, uint64_t))(**(void **)(FireResourceMgr::fInstance + 24) + 80))(*(void *)(FireResourceMgr::fInstance + 24), 4);
    }
  }
  else
  {
    if (!FireResourceMgr::fInstance) {
      operator new();
    }
    (*(void (**)(char **__return_ptr))(**(void **)(FireResourceMgr::fInstance + 24) + 64))(&v59);
    uint64_t v42 = (unsigned int *)v59;
    if (v60 - v59 == 22)
    {
      FireDeviceLog::DeviceLogBase(6, "#fmh,sendAsstOscOffset,slOscOffsetPpb,%d,usOscOffsetUncPpb,%u,ulPrecUsec,%u,ulWeekMs,%u,usGpsWeek,%u,usMicrosec,%u,usNanosec,%u,", v36, v37, v38, v39, v40, v41, *(_DWORD *)v59);
      unsigned int v58 = v42[3];
      unsigned int v43 = v42[2];
      v55[0] = *((_WORD *)v42 + 8);
      int v44 = *(unsigned int *)((char *)v42 + 18);
      unsigned int v56 = v43;
      int v57 = v44;
      char v45 = (DeviceCommon *)(*(uint64_t (**)(void, void, void, __int16 *))(**(void **)(v6 + 1296)
                                                                                         + 600))(*(void *)(v6 + 1296), *v42, v42[1], v55);
      DeviceCommon::GetMachContinuousTime(v45);
      LOWORD(v46) = *((_WORD *)v42 + 8);
      LODWORD(v47) = v42[2];
      int v48 = *(unsigned __int8 *)(v6 + 2240);
      v49.i64[0] = (int)*(void *)v42;
      v49.i64[1] = (int)HIDWORD(*(void *)v42);
      *(void *)(v6 + 2208) = v50;
      *(double *)(v6 + 2216) = (double)v47 * 0.001 + (double)v46 * 604800.0;
      *(float64x2_t *)(v6 + 2224) = vcvtq_f64_s64(v49);
      if (!v48) {
        *(unsigned char *)(v6 + 2240) = 1;
      }
    }
    else if (v60 == v59)
    {
      FireDeviceLog::DeviceLogBase(3, "#fmh,#Warning,tcxoNvItem is not available or not retreivable", v36, v37, v38, v39, v40, v41, v51);
    }
    else
    {
      FireDeviceLog::DeviceLogBase(2, "#fmh,Size Mismatch OscOffsetInfo,NvSize,%zu,OscOffsetInfo,%zu", v36, v37, v38, v39, v40, v41, (_BYTE)v60 - (_BYTE)v59);
      if (!FireResourceMgr::fInstance) {
        operator new();
      }
      (*(void (**)(void, uint64_t))(**(void **)(FireResourceMgr::fInstance + 24) + 80))(*(void *)(FireResourceMgr::fInstance + 24), 1);
    }
  }
  if (v59)
  {
    int v60 = v59;
    operator delete(v59);
  }
  if (v53 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
}

void sub_2639B20E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v30 = *(void **)(v28 - 96);
  if (v30)
  {
    *(void *)(v28 - 88) = v30;
    operator delete(v30);
  }
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__value_func<void ()(gnss::Result)>::operator=[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void gnss::fire::charToHex(gnss::fire *this@<X0>, const unsigned __int8 *a2@<X1>, int __c@<W2>, std::string *a4@<X8>)
{
  memset(&v9, 0, sizeof(v9));
  if (a2)
  {
    for (uint64_t i = 0; i != a2; ++i)
    {
      if (__c)
      {
        if (i) {
          std::string::push_back(&v9, __c);
        }
      }
      std::string::push_back(&v9, gnss::fire::charToHex(unsigned char const*,unsigned long,char)::charmap[(unint64_t)i[(void)this] >> 4]);
      std::string::push_back(&v9, gnss::fire::charToHex(unsigned char const*,unsigned long,char)::charmap[i[(void)this] & 0xF]);
    }
    *a4 = v9;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a4, "EmptyBuffer");
  }
}

void sub_2639B22CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BlueFin::GlDbgEngine::SetAsstOscOffset(uint64_t a1, uint64_t a2, uint64_t a3, BOOL *a4)
{
  int v19 = a3;
  int v20 = a2;
  BlueFin::GlDbgCodec::WriteStart(*(BlueFin::GlDbgCodec **)(a1 + 8), 1606);
  double v8 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v8 + 120))(v8)) {
    BlueFin::GlDbgCodec::Write(v8, (unsigned int *)&v20);
  }
  std::string v9 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v9 + 120))(v9)) {
    BlueFin::GlDbgCodec::Write(v9, (unsigned int *)&v19);
  }
  if (a4)
  {
    uint64_t v10 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if (!(*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v10 + 120))(v10)) {
      goto LABEL_11;
    }
    *((_DWORD *)v10 + 143) = 2;
    uint64_t v11 = v10;
    uint64_t v12 = a4;
  }
  else
  {
    *(void *)uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v13 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if (!(*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v13 + 120))(v13)) {
      goto LABEL_11;
    }
    *((_DWORD *)v13 + 143) = 2;
    uint64_t v12 = v17;
    uint64_t v11 = v13;
  }
  BlueFin::GlDbgCodec::Rvw(v11, (uint64_t)v12);
LABEL_11:
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  uint64_t v14 = BlueFin::GlEngineImplStd::SetAsstOscOffset(a1 + 368, a2, a3, a4);
  v17[0] = v14;
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1606);
  uint64_t v15 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v15 + 120))(v15)) {
    BlueFin::GlDbgCodec::Write(v15, v17);
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  return v14;
}

#error "2639B2614: call analysis failed (funcsize=74)"

uint64_t BlueFin::GlReqSm::SetAsstOscOffset(uint64_t a1, int a2, int a3, _OWORD *a4)
{
  *(_DWORD *)(a1 + 10848) |= 0x2000u;
  *(_DWORD *)(a1 + 10096) = a2;
  *(_DWORD *)(a1 + 10100) = a3;
  int v5 = (_OWORD *)(a1 + 10104);
  if (a4)
  {
    *int v5 = *a4;
  }
  else
  {
    *(void *)int v5 = 0;
    *(void *)(a1 + 10112) = 0;
  }
  __int16 v9 = 10;
  uint64_t v6 = *(void *)(a1 + 32);
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 32) = v7;
  do
  {
    unint64_t v10 = 0;
    if (BlueFin::patch_dispatch(v7, a1, (unsigned __int8 *)&v9, &v10)) {
      unint64_t v7 = v10;
    }
    else {
      unint64_t v7 = (*(uint64_t (**)(uint64_t, __int16 *))(a1 + 32))(a1, &v9);
    }
    *(void *)(a1 + 32) = v7;
  }
  while (v7);
  *(void *)(a1 + 32) = v6;
  return 1;
}

uint64_t gnss::FireGnssDevice::startTimeTransferSession(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v25[3] = *MEMORY[0x263EF8340];
  FireDeviceLog::DeviceLogBase(6, "#fgd startTimeTransferSession", a3, a4, a5, a6, a7, a8, v23[0]);
  uint64_t v12 = (void *)a2[3];
  if (v12)
  {
    if (v12 == a2)
    {
      uint64_t v24 = v23;
      (*(void (**)(void *, char *))(*a2 + 24))(a2, v23);
    }
    else
    {
      uint64_t v24 = (char *)(*(uint64_t (**)(void *))(*v12 + 16))(v12);
    }
  }
  else
  {
    uint64_t v24 = 0;
  }
  uint64_t v13 = a1 + 1;
  if (v23 != (char *)(a1 + 1))
  {
    uint64_t v14 = v24;
    uint64_t v15 = (void *)a1[4];
    if (v24 == v23)
    {
      if (v15 == v13)
      {
        (*(void (**)(char *, void *))(*(void *)v23 + 24))(v23, v25);
        (*(void (**)(char *))(*(void *)v24 + 32))(v24);
        uint64_t v24 = 0;
        (*(void (**)(void, char *))(*(void *)a1[4] + 24))(a1[4], v23);
        (*(void (**)(void))(*(void *)a1[4] + 32))(a1[4]);
        a1[4] = 0;
        uint64_t v24 = v23;
        (*(void (**)(void *, void *))(v25[0] + 24))(v25, a1 + 1);
        (*(void (**)(void *))(v25[0] + 32))(v25);
      }
      else
      {
        (*(void (**)(char *, void *))(*(void *)v23 + 24))(v23, a1 + 1);
        (*(void (**)(char *))(*(void *)v24 + 32))(v24);
        uint64_t v24 = (char *)a1[4];
      }
      a1[4] = v13;
    }
    else if (v15 == v13)
    {
      (*(void (**)(void *, char *))(*v13 + 24))(a1 + 1, v23);
      (*(void (**)(void))(*(void *)a1[4] + 32))(a1[4]);
      a1[4] = v24;
      uint64_t v24 = v23;
    }
    else
    {
      uint64_t v24 = (char *)a1[4];
      a1[4] = v14;
    }
  }
  std::__function::__value_func<void ()(gnss::Result,gnss::TimeTransferData)>::~__value_func[abi:ne180100](v23);
  FireMessageHandler::send(a1[5], 1073741837, v16, v17, v18, v19, v20, v21);
  std::function<void ()(gnss::Result)>::operator()(a3, 1);

  return std::function<void ()(gnss::Result)>::operator()(a4, 1);
}

void sub_2639B2A38(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<void ()(gnss::Result,gnss::TimeTransferData)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void FireCallback::GlEngCbOnLTOFileRead(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (FireCallback::pInstance)
  {
    uint64_t v10 = *(void *)(FireCallback::pInstance + 632);
    if (v10)
    {
      uint64_t v14 = a1;
      uint64_t v13 = a2;
      char v12 = a3;
      (*(void (**)(uint64_t, uint64_t *, uint64_t *, char *))(*(void *)v10 + 48))(v10, &v14, &v13, &v12);
      return;
    }
    uint64_t v11 = "fcb,fEngCbOnLTOFileReadCb,nullptr";
  }
  else
  {
    uint64_t v11 = "fcb,GlEngCbOnLTOFileRead,nullptr";
  }

  FireDeviceLog::DeviceLogBase(2, v11, a3, a4, a5, a6, a7, a8, a9);
}

void std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_5,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_5>,void ()(BlueFin::GlEngine *,BlueFin::GlLTOFileReader *,BOOL)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9 = *a3;
  if (*a3)
  {
    char v10 = *a4;
    uint64_t v11 = *(void *)(a1 + 8);
    if (*a4) {
      unsigned __int8 v12 = 3;
    }
    else {
      unsigned __int8 v12 = 4;
    }
    unsigned __int8 v29 = v12;
    uint64_t v30 = &v29;
    uint64_t v13 = std::__hash_table<std::__hash_value_type<gnss::SvPositionSource,std::vector<unsigned char>>,std::__unordered_map_hasher<gnss::SvPositionSource,std::__hash_value_type<gnss::SvPositionSource,std::vector<unsigned char>>,std::hash<gnss::SvPositionSource>,std::equal_to<gnss::SvPositionSource>,true>,std::__unordered_map_equal<gnss::SvPositionSource,std::__hash_value_type<gnss::SvPositionSource,std::vector<unsigned char>>,std::equal_to<gnss::SvPositionSource>,std::hash<gnss::SvPositionSource>,true>,std::allocator<std::__hash_value_type<gnss::SvPositionSource,std::vector<unsigned char>>>>::__emplace_unique_key_args<gnss::SvPositionSource,std::piecewise_construct_t const&,std::tuple<gnss::SvPositionSource const&>,std::tuple<>>((uint64_t *)(v11 + 2152), &v29, (uint64_t)&std::piecewise_construct, &v30);
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v26 = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v26, (const void *)v13[3], v13[4], v13[4] - v13[3]);
    if (v26 == v27)
    {
      FireDeviceLog::DeviceLogBase(6, "EngineLtoFileReadImpl,noData,bRTO,%d", v14, v15, v16, v17, v18, v19, v10);
      uint64_t v20 = v26;
      if (!v26) {
        return;
      }
      goto LABEL_13;
    }
    FireDeviceLog::DeviceLogBase(6, "EngineLtoFileReadImpl,size,%zu,bRTO,%d", v14, v15, v16, v17, v18, v19, (_BYTE)v27 - (_BYTE)v26);
    (*(void (**)(uint64_t, void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char)))(*(void *)v9 + 16))(v9, FireCallback::GlEngineOnLtoFileErrReport);
    (*(void (**)(uint64_t, void (*)(uint64_t, int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char)))(*(void *)v9 + 8))(v9, FireCallback::GlLTOFileGpsPredictionTimestampReport);
    uint64_t v20 = v26;
    uint64_t v21 = v27 - v26;
    if (v27 != v26)
    {
      uint64_t v22 = 0;
      unint64_t v23 = 0;
      do
      {
        unint64_t v24 = v21 + v22;
        if (v24 >= 0x2000) {
          uint64_t v25 = 0x2000;
        }
        else {
          uint64_t v25 = v24;
        }
        (**(void (***)(uint64_t, char *, uint64_t))v9)(v9, &v20[v23], v25);
        v23 += 0x2000;
        uint64_t v20 = v26;
        uint64_t v21 = v27 - v26;
        v22 -= 0x2000;
      }
      while (v23 < v27 - v26);
    }
    if (v20)
    {
LABEL_13:
      uint64_t v27 = v20;
      operator delete(v20);
    }
  }
  else
  {
    FireDeviceLog::DeviceLogBase(2, "EngineLtoFileReadImpl,pLTOFileReader,nullptr", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
  }
}

void sub_2639B2D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BlueFin::GlDbgLTOFileReader::FromLTOFileToGll(BlueFin::GlDbgLTOFileReader *this, char *a2, unsigned int a3)
{
  int v8 = a3;
  if (a2)
  {
    if (a3 > 0x2000) {
      (*(void (**)(void, uint64_t, const char *))(**((void **)this + 1) + 104))(*((void *)this + 1), 1, "/Library/Caches/com.apple.xbs/Sources/FIREGPS7/proprietary/deliverables/gll_dev/gldebug/src/gldebug_ltofilereader.cpp:44");
    }
    BlueFin::GlDbgCodec::WriteStart(*((BlueFin::GlDbgCodec **)this + 1), 2049);
    BlueFin::GlDbgCodec::WriteArray(*((BlueFin::GlDbgCodec **)this + 1), a2, (unsigned int *)&v8);
    (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
    (***((void (****)(void))this + 2))();
    BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 2049);
    int v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);
    return v5();
  }
  else
  {
    unint64_t v7 = *(uint64_t (**)(void))(**((void **)this + 1) + 104);
    return v7();
  }
}

uint64_t BlueFin::GlPeLtoReaderBase::FromLTOFileToGll(uint64_t this, const char *__src, unsigned int a3)
{
  if (!__src)
  {
    DeviceFaultNotify("glpe_ltoreader.cpp", 4471, "FromLTOFileToGll", (char)"nullptr != pcBuff");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ltoreader.cpp", 4471, "nullptr != pcBuff");
  }
  unsigned int v3 = a3;
  double v4 = __src;
  int v5 = (_DWORD *)this;
  if (*(unsigned char *)(this + 10784))
  {
    uint64_t v6 = *(unsigned int *)(this + 9748);
    if (v6 > 0x1B)
    {
      int v8 = (_DWORD *)(this + 9852);
    }
    else
    {
      if (v6 + a3 < 0x1D) {
        goto LABEL_8;
      }
      uint64_t v7 = 28 - v6;
      int v8 = (_DWORD *)(this + 9852);
      __src += v7;
      a3 -= v7;
    }
    this = (uint64_t)BlueFin::GlCryptoMd5::update(v8, (uint64_t)__src, a3);
  }
LABEL_8:
  if (v3)
  {
    do
    {
      if (v5[2] == 65) {
        break;
      }
      uint64_t v9 = v5[2435];
      unsigned int v10 = v5[2434] - v9;
      size_t v11 = v3 >= v10 ? v10 : v3;
      memcpy((char *)v5 + v9 + 16, v4, v11);
      v5[2435] += v11;
      this = BlueFin::GlPeLtoReaderBase::processBlock((uint64_t)v5, v12, v13, v14);
      v3 -= v11;
      v5[2437] += v11;
      v4 += v11;
    }
    while (v11 && v3 != 0);
  }
  return this;
}

void gnss::FireGnssDevice::injectRtiFile(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5 = *(const void **)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  size_t v8 = v6 - (void)v5;
  if ((const void *)v6 == v5 || v8 > 0xFFF)
  {
    std::function<void ()(gnss::Result)>::operator()(a4, 4);
  }
  else
  {
    __p = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v5, v6, v8);
    int v16 = FireMessageHandler::setAssistanceRti(*(void *)(a1 + 40), (char **)&__p, v10, v11, v12, v13, v14, v15);
    std::function<void ()(gnss::Result)>::operator()(a4, v16);
    if (__p)
    {
      uint64_t v18 = __p;
      operator delete(__p);
    }
  }
}

void sub_2639B30E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    int32x2_t result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      int32x2_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2639B3160(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  int32x2_t result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

uint64_t FireMessageHandler::setAssistanceRti(uint64_t a1, char **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = (char **)(a1 + 1936);
  if (v9 != a2) {
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v9, *a2, a2[1], a2[1] - *a2);
  }
  FireMessageHandler::send(a1, 1073741829, a3, a4, a5, a6, a7, a8);
  return 1;
}

void *std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(void *result, char *__src, char *a3, unint64_t a4)
{
  uint64_t v7 = result;
  unint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      _OWORD v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    int32x2_t result = std::vector<unsigned char>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v9 = (char *)v7[1];
    goto LABEL_17;
  }
  uint64_t v12 = (unsigned char *)result[1];
  size_t v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    size_t v16 = a3 - __src;
    if (v16) {
      int32x2_t result = memmove(v9, __src, v16);
    }
    uint64_t v15 = &v9[v16];
    goto LABEL_20;
  }
  uint64_t v14 = &__src[v13];
  if (v12 != v9)
  {
    int32x2_t result = memmove((void *)*result, __src, v13);
    uint64_t v9 = (char *)v7[1];
  }
  if (a3 != v14) {
    int32x2_t result = memmove(v9, v14, a3 - v14);
  }
  uint64_t v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

uint64_t BlueFin::GlDbgLTOFileReader::SetCbOnLtoFileGpsTimestampReport(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = a2;
  BlueFin::GlDbgCodec::WriteStart(*(BlueFin::GlDbgCodec **)(a1 + 8), 2050);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  (*(void (**)(void, BlueFin::GlDbgCodec *(*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)))(**(void **)(a1 + 16) + 8))(*(void *)(a1 + 16), BlueFin::GlDbgProxyLtoFileGpsTimestampsReport);
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 2050);
  unsigned int v3 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);

  return v3();
}

uint64_t BlueFin::GlDbgLTOFileReader::SetCbOnLtoFileErrReport(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))();
}

uint64_t BlueFin::GlPeLtoReaderBase::SetCbOnLtoFileGpsTimestampReport(uint64_t result, uint64_t a2)
{
  *(void *)(result + 10824) = a2;
  return result;
}

uint64_t BlueFin::GlPeLtoReaderBase::SetCbOnLtoFileErrReport(uint64_t result, uint64_t a2)
{
  *(void *)(result + 10800) = a2;
  return result;
}

uint64_t gnss::FireGnssDevice::start(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v39[4] = *MEMORY[0x263EF8340];
  *(unsigned char *)(a1 + 360) = 0;
  FireDeviceLog::DeviceLogBase(5, "Version %s, build at %s", a3, a4, a5, a6, a7, a8, (char)"FIRE@98.0.4 GLL@612249");
  FireDeviceLog::DeviceLogBase(5, "#fgd,start,coexConfig,0x%llx", v12, v13, v14, v15, v16, v17, a2);
  uint64_t v18 = *(void *)(a1 + 40);
  *(void *)(v18 + 2192) = a2;
  FireMessageHandler::send(v18, 1073741840, v19, v20, v21, v22, v23, v24);
  uint64_t v25 = *(void *)(a1 + 40);
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v39, a4);
  std::function<void ()(gnss::Result)>::operator=((void *)(v25 + 944), (uint64_t)v39);
  FireDeviceLog::DeviceLogBase(6, "#fmh,setOnEngineStartCompleted,%p", v26, v27, v28, v29, v30, v31, (char)v39);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v39);
  FireMessageHandler::send(*(void *)(a1 + 40), 0x40000000, v32, v33, v34, v35, v36, v37);
  return std::function<void ()(gnss::Result)>::operator()(a3, 1);
}

void sub_2639B353C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::function<void ()(gnss::Result)>::operator=(void *a1, uint64_t a2)
{
  unsigned char v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(gnss::Result)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void *std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  double v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(gnss::Result)>::swap[abi:ne180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    double v4 = (void *)result[3];
    int v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        int32x2_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        int32x2_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      int32x2_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2639B3948(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t gnss::FireGnssDevice::setAssistanceSignalEnvironment(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  bzero(v25, 0xDD8uLL);
  __src[0] = 0x300000064;
  DeviceCommon::GetMachContinuousTime(v6);
  unint64_t v14 = (unint64_t)(v13 * 1000.0);
  __src[1] = v14;
  v25[8] = 1;
  int v27 = 2;
  switch(a2)
  {
    case 0:
      int v26 = 0;
      break;
    case 1:
      int v15 = 1;
      goto LABEL_10;
    case 2:
      int v15 = 2;
      goto LABEL_10;
    case 3:
      int v15 = 3;
      goto LABEL_10;
    case 4:
      int v15 = 4;
      goto LABEL_10;
    case 5:
      int v15 = 5;
      goto LABEL_10;
    case 6:
      int v15 = 6;
LABEL_10:
      int v26 = v15;
      break;
    default:
      FireDeviceLog::DeviceLogBase(2, "#fgd Unexpected SignalEnvironmentType %d", v7, v8, v9, v10, v11, v12, a2);
      std::function<void ()(gnss::Result)>::operator()(a3, 4);
      break;
  }
  FireDeviceLog::DeviceLogBase(6, "feeding,device,SignalEnvironment,machMs,%llu,state,%d", v7, v8, v9, v10, v11, v12, v14);
  uint64_t v16 = *(void *)(a1 + 40);
  std::deque<BlueFin::GlExtSensData>::push_back((void *)(v16 + 1744), __src);
  FireMessageHandler::send(v16, 1073741831, v17, v18, v19, v20, v21, v22);
  return std::function<void ()(gnss::Result)>::operator()(a3, 1);
}

uint64_t gnss::FireGnssDevice::setAssistanceMotionActivityContext(uint64_t a1, unint64_t a2, unsigned int a3, int a4, int a5, uint64_t a6)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  bzero(v30, 0xDD8uLL);
  __src[0] = 0x300000011;
  unint64_t v18 = a2 / 0xF4240;
  __src[1] = v18;
  v30[8] = 1;
  if (a5 <= 24)
  {
    int v19 = a5;
    if (!a5) {
      goto LABEL_11;
    }
    if (a5 == 10) {
      goto LABEL_5;
    }
    goto LABEL_8;
  }
  switch(a5)
  {
    case 75:
      int v19 = 3;
      break;
    case 50:
      int v19 = 2;
      break;
    case 25:
LABEL_5:
      int v19 = 1;
      break;
    default:
LABEL_8:
      FireDeviceLog::DeviceLogBase(3, "#Warning,defaultCase,motionReliability,%d", v12, v13, v14, v15, v16, v17, a5);
      int v19 = 0;
      break;
  }
LABEL_11:
  int v32 = v19;
  int v20 = a4;
  switch(a4)
  {
    case 0:
      break;
    case 1:
      int v20 = 6;
      break;
    case 2:
      int v20 = 1;
      break;
    case 3:
      if (a3 >= 9)
      {
        FireDeviceLog::DeviceLogBase(3, "#Warning,defaultCase,context,%d", v12, v13, v14, v15, v16, v17, a3);
        goto LABEL_18;
      }
      int v20 = dword_263BA7B68[a3];
      break;
    default:
      FireDeviceLog::DeviceLogBase(3, "#Warning,defaultCase,MovingState,%d", v12, v13, v14, v15, v16, v17, a4);
LABEL_18:
      int v20 = 0;
      break;
  }
  int v31 = v20;
  FireDeviceLog::DeviceLogBase(6, "feeding,device,MotionActivityContext,machMs,%llu,state,%d,%d,relia,%d,%d", v12, v13, v14, v15, v16, v17, v18);
  uint64_t v21 = *(void *)(a1 + 40);
  std::deque<BlueFin::GlExtSensData>::push_back((void *)(v21 + 1744), __src);
  FireMessageHandler::send(v21, 1073741831, v22, v23, v24, v25, v26, v27);
  return std::function<void ()(gnss::Result)>::operator()(a6, 1);
}

uint64_t gnss::FireGnssDevice::setAssistanceMountState(uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  bzero(v25, 0xDD8uLL);
  __src[0] = 0x300000013;
  unint64_t v14 = a2 / 0xF4240;
  __src[1] = v14;
  int v27 = 0;
  v25[8] = 1;
  if (a3 >= 3)
  {
    FireDeviceLog::DeviceLogBase(3, "#Warning,defaultCase,mountState,%d", v8, v9, v10, v11, v12, v13, a3);
    int v15 = 0;
  }
  else
  {
    int v15 = dword_263BA7B8C[a3];
  }
  int v26 = v15;
  FireDeviceLog::DeviceLogBase(6, "feeding,device,MountState,machMs,%llu,state,%d", v8, v9, v10, v11, v12, v13, v14);
  uint64_t v16 = *(void *)(a1 + 40);
  std::deque<BlueFin::GlExtSensData>::push_back((void *)(v16 + 1744), __src);
  FireMessageHandler::send(v16, 1073741831, v17, v18, v19, v20, v21, v22);
  return std::function<void ()(gnss::Result)>::operator()(a4, 1);
}

void *std::deque<BlueFin::GlExtSensData>::push_back(void *a1, void *__src)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 2 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<BlueFin::GlExtSensData>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  int32x2_t result = memcpy((void *)(*(void *)(v5 + ((v7 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 3560 * (v7 & 0xF)), __src, 0xDE8uLL);
  ++a1[5];
  return result;
}

uint64_t gnss::FireGnssDevice::injectAssistancePosition(DeviceCommon *a1, int a2, int a3, unint64_t a4, int a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, uint64_t a13, uint64_t a14)
{
  uint64_t v87 = *MEMORY[0x263EF8340];
  DeviceCommon::GetMachContinuousTime(a1);
  if ((a5 - 1) < 2)
  {
    long long v85 = 0u;
    long long v86 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    long long v81 = 0u;
    long long v82 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    if (a5 == 2) {
      int v34 = 33;
    }
    else {
      int v34 = 10;
    }
    long long __src = 0uLL;
    long long v56 = 0uLL;
    CLGnssFire::initGlExtSensData(v34, 3, a4, (uint64_t)&__src);
    *(double *)&long long v58 = a6;
    *((double *)&v58 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = a7;
    *(void *)&long long v59 = 0xC08F380000000000;
    *(void *)&long long v62 = 0xBFF0000000000000;
    if (a2)
    {
      *(double *)&long long v59 = a8;
      *(double *)&long long v62 = a9;
    }
    *(double *)&long long v61 = a11;
    *((double *)&v61 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = a12;
    *((double *)&v60 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = a10;
    if (a3 <= 24)
    {
      if (!a3)
      {
        DWORD2(v62) = 0;
        goto LABEL_20;
      }
      if (a3 != 10) {
        goto LABEL_20;
      }
    }
    else if (a3 != 25)
    {
      if (a3 == 50)
      {
        int v51 = 2;
      }
      else
      {
        if (a3 != 75) {
          goto LABEL_20;
        }
        int v51 = 3;
      }
      goto LABEL_19;
    }
    int v51 = 1;
LABEL_19:
    DWORD2(v62) = v51;
LABEL_20:
    FireDeviceLog::DeviceLogBase(6, "#fgd feeding SFTC position,lat,%.8lf,lon,%.8lf,altitudeValid,%d,alt,%.1lf,altunc,%lf,uncSemiMajor,%lf,uncSemiMinor,%lf,confidence,%d,isTepa,%d", v35, v36, v37, v38, v39, v40, SLOBYTE(a6));
    uint64_t v53 = *((void *)a1 + 5);
    std::deque<BlueFin::GlExtSensData>::push_back((void *)(v53 + 1744), &__src);
    int v50 = 1073741831;
    uint64_t v49 = v53;
    goto LABEL_21;
  }
  if (!a5)
  {
    double v41 = v33 - (double)(a4 / 0x3B9ACA00);
    FireDeviceLog::DeviceLogBase(6, "#fgd feeding reference location lat,%.8lf,lon,%.8lf,altitudeValid,%d,alt,%.1lf,hunc,%lf,ageSec,%lf", v27, v28, v29, v30, v31, v32, SLOBYTE(a6));
    uint64_t v42 = *((void *)a1 + 5);
    *(double *)&long long __src = a6;
    *((double *)&__src + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = a7;
    *((void *)&v56 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = sqrt(a11 * a11 + a10 * a10);
    *(double *)&long long v57 = a9;
    *(double *)&long long v56 = a8;
    DWORD2(v57) = v41;
    std::deque<FireMessageHandler::GLRefPositionExtended>::push_back((void *)(v42 + 1696), (uint64_t)&__src);
    uint64_t v49 = v42;
    int v50 = 1073741828;
LABEL_21:
    FireMessageHandler::send(v49, v50, v43, v44, v45, v46, v47, v48);
    int v52 = 1;
    return std::function<void ()(gnss::Result)>::operator()(a14, v52);
  }
  int v52 = 0;
  return std::function<void ()(gnss::Result)>::operator()(a14, v52);
}

uint64_t std::function<void ()(gnss::Result)>::operator()(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void CLGnssFire::initGlExtSensData(int a1@<W0>, int a2@<W1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (unint64_t *)(a4 + 8);
  bzero((void *)(a4 + 8), 0xDE0uLL);
  *(_DWORD *)a4 = a1;
  *(_DWORD *)(a4 + 4) = a2;
  if (a2 == 3) {
    *uint64_t v8 = a3 / 0xF4240;
  }
  if (a1 <= 22)
  {
    switch(a1)
    {
      case 10:
        goto LABEL_10;
      case 11:
        *(_WORD *)(a4 + 32) = 1;
        *(_DWORD *)(a4 + 48) = 0;
        goto LABEL_13;
      case 17:
      case 19:
        *(_WORD *)(a4 + 32) = 1;
        *(_DWORD *)(a4 + 48) = 0;
        goto LABEL_11;
      default:
        goto LABEL_15;
    }
  }
  switch(a1)
  {
    case 33:
LABEL_10:
      *(_WORD *)(a4 + 32) = 1;
      *(void *)(a4 + 56) = 0;
      *(void *)(a4 + 64) = 0;
      *(void *)(a4 + 48) = 0;
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)(a4 + 88) = _Q0;
      *(_OWORD *)(a4 + 104) = xmmword_263BA7BB0;
LABEL_11:
      *(_DWORD *)(a4 + 120) = 0;
      break;
    case 29:
      *(_WORD *)(a4 + 32) = 1;
      break;
    case 23:
      *(_WORD *)(a4 + 32) = 1;
      *(_DWORD *)(a4 + 64) = -998653952;
LABEL_13:
      *(_DWORD *)(a4 + 88) = -1082130432;
      break;
    default:
LABEL_15:
      FireDeviceLog::DeviceLogBase(2, "#Warning unhandled,%d", v9, v10, v11, v12, v13, v14, a1);
      break;
  }
}

__n128 std::deque<FireMessageHandler::GLRefPositionExtended>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 85 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<FireMessageHandler::GLRefPositionExtended>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x55)) + 48 * (v7 % 0x55);
  __n128 result = *(__n128 *)a2;
  long long v10 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v8 + 32) = v10;
  *(__n128 *)unint64_t v8 = result;
  ++a1[5];
  return result;
}

void std::deque<BlueFin::GlExtSensData>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x10;
  unint64_t v4 = v2 - 16;
  if (v3)
  {
    a1[4] = v4;
    uint64_t v5 = (void *)a1[1];
    uint64_t v6 = (char *)a1[2];
    uint64_t v9 = *v5;
    unint64_t v7 = (char *)(v5 + 1);
    uint64_t v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3]) {
      goto LABEL_41;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v38 = 1;
      }
      else {
        unint64_t v38 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FireMessageHandler::Message *>>(v38);
      uint64_t v40 = &v39[8 * (v38 >> 2)];
      uint64_t v42 = &v39[8 * v41];
      uint64_t v43 = (uint64_t *)a1[1];
      uint64_t v6 = v40;
      uint64_t v44 = a1[2] - (void)v43;
      if (v44)
      {
        uint64_t v6 = &v40[v44 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v45 = 8 * (v44 >> 3);
        uint64_t v46 = &v39[8 * (v38 >> 2)];
        do
        {
          uint64_t v47 = *v43++;
          *(void *)uint64_t v46 = v47;
          v46 += 8;
          v45 -= 8;
        }
        while (v45);
      }
      goto LABEL_29;
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    BOOL v12 = v10 >> 3 < -1;
    uint64_t v13 = (v10 >> 3) + 2;
    if (v12) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = v11 + 1;
    }
    uint64_t v15 = -(v14 >> 1);
    uint64_t v16 = v14 >> 1;
    uint64_t v17 = &v7[-8 * v16];
    int64_t v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      unint64_t v7 = (char *)a1[1];
    }
    uint64_t v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  uint64_t v20 = (char *)a1[2];
  uint64_t v19 = (char *)a1[3];
  uint64_t v21 = (char *)*a1;
  uint64_t v22 = (char *)a1[1];
  unint64_t v23 = (v20 - v22) >> 3;
  uint64_t v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    uint64_t v25 = operator new(0xDE80uLL);
    int v26 = v25;
    if (v19 != v20)
    {
      *(void *)uint64_t v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22) {
        unint64_t v49 = 1;
      }
      else {
        unint64_t v49 = (v19 - v22) >> 2;
      }
      uint64_t v50 = 2 * v49;
      int v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FireMessageHandler::Message *>>(v49);
      uint64_t v22 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v53 = (uint64_t *)a1[1];
      std::string v54 = v22;
      uint64_t v55 = a1[2] - (void)v53;
      if (v55)
      {
        std::string v54 = &v22[v55 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v56 = 8 * (v55 >> 3);
        long long v57 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          uint64_t v58 = *v53++;
          *(void *)long long v57 = v58;
          v57 += 8;
          v56 -= 8;
        }
        while (v56);
      }
      long long v59 = (char *)*a1;
      *a1 = v51;
      a1[1] = v22;
      a1[2] = v54;
      a1[3] = &v51[8 * v52];
      if (v59)
      {
        operator delete(v59);
        uint64_t v22 = (char *)a1[1];
      }
    }
    *((void *)v22 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v26;
    unint64_t v7 = (char *)a1[1];
    uint64_t v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    uint64_t v8 = *((void *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(void *)uint64_t v6 = v8;
      goto LABEL_42;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v82 = 1;
      }
      else {
        unint64_t v82 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FireMessageHandler::Message *>>(v82);
      uint64_t v40 = &v39[8 * (v82 >> 2)];
      uint64_t v42 = &v39[8 * v83];
      long long v84 = (uint64_t *)a1[1];
      uint64_t v6 = v40;
      uint64_t v85 = a1[2] - (void)v84;
      if (v85)
      {
        uint64_t v6 = &v40[v85 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v86 = 8 * (v85 >> 3);
        uint64_t v87 = &v39[8 * (v82 >> 2)];
        do
        {
          uint64_t v88 = *v84++;
          *(void *)uint64_t v87 = v88;
          v87 += 8;
          v86 -= 8;
        }
        while (v86);
      }
LABEL_29:
      uint64_t v48 = (char *)*a1;
      *a1 = v39;
      a1[1] = v40;
      a1[2] = v6;
      a1[3] = v42;
      if (v48)
      {
        operator delete(v48);
        uint64_t v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  uint64_t v27 = v24 >> 2;
  if (v19 == v21) {
    unint64_t v28 = 1;
  }
  else {
    unint64_t v28 = v27;
  }
  uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FireMessageHandler::Message *>>(v28);
  uint64_t v31 = v30;
  uint64_t v32 = operator new(0xDE80uLL);
  double v33 = &v29[8 * v23];
  int v34 = &v29[8 * v31];
  if (v23 == v31)
  {
    uint64_t v35 = 8 * v23;
    if (v20 - v22 < 1)
    {
      uint64_t v60 = v35 >> 2;
      if (v20 == v22) {
        unint64_t v61 = 1;
      }
      else {
        unint64_t v61 = v60;
      }
      long long v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FireMessageHandler::Message *>>(v61);
      double v33 = &v62[8 * (v61 >> 2)];
      int v34 = &v62[8 * v63];
      if (v29) {
        operator delete(v29);
      }
      uint64_t v29 = v62;
    }
    else
    {
      uint64_t v36 = v35 >> 3;
      if (v36 >= -1) {
        unint64_t v37 = v36 + 1;
      }
      else {
        unint64_t v37 = v36 + 2;
      }
      v33 -= 8 * (v37 >> 1);
    }
  }
  *(void *)double v33 = v32;
  long long v64 = v33 + 8;
  for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
  {
    if (v33 == v29)
    {
      if (v64 >= v34)
      {
        if (v34 == v29) {
          unint64_t v70 = 1;
        }
        else {
          unint64_t v70 = (v34 - v29) >> 2;
        }
        long long v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FireMessageHandler::Message *>>(v70);
        long long v73 = v71;
        double v33 = &v71[(2 * v70 + 6) & 0xFFFFFFFFFFFFFFF8];
        uint64_t v75 = v64 - v29;
        BOOL v74 = v64 == v29;
        long long v64 = v33;
        if (!v74)
        {
          long long v64 = &v33[v75 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v76 = 8 * (v75 >> 3);
          long long v77 = v33;
          long long v78 = (uint64_t *)v29;
          do
          {
            uint64_t v79 = *v78++;
            *(void *)long long v77 = v79;
            v77 += 8;
            v76 -= 8;
          }
          while (v76);
        }
        int v34 = &v71[8 * v72];
        if (v29) {
          operator delete(v29);
        }
        uint64_t v29 = v73;
      }
      else
      {
        uint64_t v66 = (v34 - v64) >> 3;
        if (v66 >= -1) {
          uint64_t v67 = v66 + 1;
        }
        else {
          uint64_t v67 = v66 + 2;
        }
        uint64_t v68 = v67 >> 1;
        double v33 = &v29[8 * (v67 >> 1)];
        long long v69 = v29;
        if (v64 != v29)
        {
          memmove(v33, v29, v64 - v29);
          long long v69 = v64;
        }
        long long v64 = &v69[8 * v68];
      }
    }
    uint64_t v80 = *(void *)(i - 8);
    *((void *)v33 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v80;
    v33 -= 8;
  }
  long long v81 = (char *)*a1;
  *a1 = v29;
  a1[1] = v33;
  a1[2] = v64;
  a1[3] = v34;
  if (v81)
  {
    operator delete(v81);
  }
}

void sub_2639B47CC(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t gnss::FireGnssDevice::injectAssistanceFile(uint64_t *a1, __n128 *a2, unsigned __int8 a3, void *a4, uint64_t a5)
{
  v23[3] = *MEMORY[0x263EF8340];
  uint64_t v9 = (void *)a4[3];
  if (v9)
  {
    if (v9 == a4)
    {
      uint64_t v22 = v21;
      (*(void (**)(void *, void *))(*a4 + 24))(a4, v21);
    }
    else
    {
      uint64_t v22 = (void *)(*(uint64_t (**)(void *))(*v9 + 16))(v9);
    }
  }
  else
  {
    uint64_t v22 = 0;
  }
  uint64_t v10 = a1 + 33;
  if (v21 != a1 + 33)
  {
    uint64_t v11 = v22;
    uint64_t v12 = a1[36];
    if (v22 == v21)
    {
      if ((uint64_t *)v12 == v10)
      {
        (*(void (**)(void *, void *))(v21[0] + 24))(v21, v23);
        (*(void (**)(void *))(*v22 + 32))(v22);
        uint64_t v22 = 0;
        (*(void (**)(uint64_t, void *))(*(void *)a1[36] + 24))(a1[36], v21);
        (*(void (**)(uint64_t))(*(void *)a1[36] + 32))(a1[36]);
        a1[36] = 0;
        uint64_t v22 = v21;
        (*(void (**)(void *, uint64_t *))(v23[0] + 24))(v23, a1 + 33);
        (*(void (**)(void *))(v23[0] + 32))(v23);
      }
      else
      {
        (*(void (**)(void *, uint64_t *))(v21[0] + 24))(v21, a1 + 33);
        (*(void (**)(void *))(*v22 + 32))(v22);
        uint64_t v22 = (void *)a1[36];
      }
      a1[36] = (uint64_t)v10;
    }
    else if ((uint64_t *)v12 == v10)
    {
      (*(void (**)(uint64_t *, void *))(*v10 + 24))(a1 + 33, v21);
      (*(void (**)(uint64_t))(*(void *)a1[36] + 32))(a1[36]);
      a1[36] = (uint64_t)v22;
      uint64_t v22 = v21;
    }
    else
    {
      uint64_t v22 = (void *)a1[36];
      a1[36] = (uint64_t)v11;
    }
  }
  std::__function::__value_func<void ()(gnss::DecodedExtendedEphemeris &&)>::~__value_func[abi:ne180100](v21);
  FireDeviceLog::DeviceLogBase(6, "injectAssistanceFile,size,%zu,type,%d", v13, v14, v15, v16, v17, v18, a2->n128_u8[8] - a2->n128_u8[0]);
  int v19 = FireMessageHandler::sendInjectAssistanceFile(a1[5], a3, a2);

  return std::function<void ()(gnss::Result)>::operator()(a5, v19);
}

void sub_2639B4B54(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<void ()(gnss::DecodedExtendedEphemeris &&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t FireMessageHandler::sendInjectAssistanceFile(uint64_t a1, unsigned __int8 a2, __n128 *a3)
{
  unsigned __int8 v13 = a2;
  uint64_t v14 = &v13;
  uint64_t v5 = std::__hash_table<std::__hash_value_type<gnss::SvPositionSource,std::vector<unsigned char>>,std::__unordered_map_hasher<gnss::SvPositionSource,std::__hash_value_type<gnss::SvPositionSource,std::vector<unsigned char>>,std::hash<gnss::SvPositionSource>,std::equal_to<gnss::SvPositionSource>,true>,std::__unordered_map_equal<gnss::SvPositionSource,std::__hash_value_type<gnss::SvPositionSource,std::vector<unsigned char>>,std::equal_to<gnss::SvPositionSource>,std::hash<gnss::SvPositionSource>,true>,std::allocator<std::__hash_value_type<gnss::SvPositionSource,std::vector<unsigned char>>>>::__emplace_unique_key_args<gnss::SvPositionSource,std::piecewise_construct_t const&,std::tuple<gnss::SvPositionSource const&>,std::tuple<>>((uint64_t *)(a1 + 2152), &v13, (uint64_t)&std::piecewise_construct, &v14);
  std::vector<unsigned char>::__move_assign((uint64_t)(v5 + 3), a3);
  FireMessageHandler::send(a1, 1073741830, v6, v7, v8, v9, v10, v11);
  return 1;
}

void *std::__hash_table<std::__hash_value_type<gnss::SvPositionSource,std::vector<unsigned char>>,std::__unordered_map_hasher<gnss::SvPositionSource,std::__hash_value_type<gnss::SvPositionSource,std::vector<unsigned char>>,std::hash<gnss::SvPositionSource>,std::equal_to<gnss::SvPositionSource>,true>,std::__unordered_map_equal<gnss::SvPositionSource,std::__hash_value_type<gnss::SvPositionSource,std::vector<unsigned char>>,std::equal_to<gnss::SvPositionSource>,std::hash<gnss::SvPositionSource>,true>,std::allocator<std::__hash_value_type<gnss::SvPositionSource,std::vector<unsigned char>>>>::__emplace_unique_key_args<gnss::SvPositionSource,std::piecewise_construct_t const&,std::tuple<gnss::SvPositionSource const&>,std::tuple<>>(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, unsigned char **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = a1[1];
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  unsigned __int8 v13 = a1 + 2;
  uint64_t v11 = operator new(0x30uLL);
  void *v11 = 0;
  v11[1] = v7;
  *((unsigned char *)v11 + 16) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  unsigned char v11[3] = 0;
  float v14 = (float)(unint64_t)(a1[3] + 1);
  float v15 = *((float *)a1 + 8);
  if (v8 && (float)(v15 * (float)v8) >= v14)
  {
    unint64_t v7 = v4;
    goto LABEL_64;
  }
  BOOL v16 = 1;
  if (v8 >= 3) {
    BOOL v16 = (v8 & (v8 - 1)) != 0;
  }
  unint64_t v17 = v16 | (2 * v8);
  unint64_t v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18) {
    int8x8_t prime = (int8x8_t)v18;
  }
  else {
    int8x8_t prime = (int8x8_t)v17;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v8 = a1[1];
  }
  if (*(void *)&prime <= v8)
  {
    if (*(void *)&prime >= v8) {
      goto LABEL_60;
    }
    unint64_t v26 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v8 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
    {
      unint64_t v26 = std::__next_prime(v26);
    }
    else
    {
      uint64_t v28 = 1 << -(char)__clz(v26 - 1);
      if (v26 >= 2) {
        unint64_t v26 = v28;
      }
    }
    if (*(void *)&prime <= v26) {
      int8x8_t prime = (int8x8_t)v26;
    }
    if (*(void *)&prime >= v8)
    {
      unint64_t v8 = a1[1];
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      uint64_t v35 = (void *)*a1;
      *a1 = 0;
      if (v35) {
        operator delete(v35);
      }
      unint64_t v8 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v20 = operator new(8 * *(void *)&prime);
  uint64_t v21 = (void *)*a1;
  *a1 = (uint64_t)v20;
  if (v21) {
    operator delete(v21);
  }
  uint64_t v22 = 0;
  a1[1] = (uint64_t)prime;
  do
    *(void *)(*a1 + 8 * v22++) = 0;
  while (*(void *)&prime != v22);
  unint64_t v23 = (void *)*v13;
  if (*v13)
  {
    unint64_t v24 = v23[1];
    uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      if (v24 >= *(void *)&prime) {
        v24 %= *(void *)&prime;
      }
    }
    else
    {
      v24 &= *(void *)&prime - 1;
    }
    *(void *)(*a1 + 8 * v24) = v13;
    uint64_t v29 = (void *)*v23;
    if (*v23)
    {
      do
      {
        unint64_t v30 = v29[1];
        if (v25.u32[0] > 1uLL)
        {
          if (v30 >= *(void *)&prime) {
            v30 %= *(void *)&prime;
          }
        }
        else
        {
          v30 &= *(void *)&prime - 1;
        }
        if (v30 != v24)
        {
          if (!*(void *)(*a1 + 8 * v30))
          {
            *(void *)(*a1 + 8 * v30) = v23;
            goto LABEL_56;
          }
          void *v23 = *v29;
          *uint64_t v29 = **(void **)(*a1 + 8 * v30);
          **(void **)(*a1 + 8 * v30) = v29;
          uint64_t v29 = v23;
        }
        unint64_t v30 = v24;
LABEL_56:
        unint64_t v23 = v29;
        uint64_t v29 = (void *)*v29;
        unint64_t v24 = v30;
      }
      while (v29);
    }
  }
  unint64_t v8 = (unint64_t)prime;
LABEL_60:
  if ((v8 & (v8 - 1)) != 0)
  {
    if (v8 <= v7) {
      v7 %= v8;
    }
  }
  else
  {
    unint64_t v7 = (v8 - 1) & v7;
  }
LABEL_64:
  uint64_t v31 = *a1;
  uint64_t v32 = *(void **)(*a1 + 8 * v7);
  if (v32)
  {
    void *v11 = *v32;
LABEL_72:
    *uint64_t v32 = v11;
    goto LABEL_73;
  }
  void *v11 = *v13;
  *unsigned __int8 v13 = v11;
  *(void *)(v31 + 8 * v7) = v13;
  if (*v11)
  {
    unint64_t v33 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v33 >= v8) {
        v33 %= v8;
      }
    }
    else
    {
      v33 &= v8 - 1;
    }
    uint64_t v32 = (void *)(*a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return v11;
}

void sub_2639B5050(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gnss::SvPositionSource,std::vector<unsigned char>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

__n128 std::vector<unsigned char>::__move_assign(uint64_t a1, __n128 *a2)
{
  unint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

unint64_t BlueFin::GlMeSrdMeasTimingMgr::SetHeartBeat(BlueFin::GlMeSrdMeasTimingMgr *this, unsigned int a2)
{
  if (*((_DWORD *)this + 73) >= a2)
  {
    DeviceFaultNotify("glmesrd_meas_timing_mgr.cpp", 78, "SetHeartBeat", (char)"ulLms > m_ulPreviousHeartbeatMs");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_meas_timing_mgr.cpp", 78, "ulLms > m_ulPreviousHeartbeatMs");
  }
  int v3 = *((_DWORD *)this + 72);
  *((_DWORD *)this + 73) = v3;
  *((_DWORD *)this + 75) = v3;
  *((_DWORD *)this + 72) = a2;
  __int16 v6 = 47;
  uint64_t v4 = *((void *)this + 4);
  unint64_t result = *((void *)this + 1);
  *((void *)this + 4) = result;
  do
  {
    unint64_t v7 = 0;
    if (BlueFin::patch_dispatch(result, (uint64_t)this, (unsigned __int8 *)&v6, &v7)) {
      unint64_t result = v7;
    }
    else {
      unint64_t result = (*((uint64_t (**)(BlueFin::GlMeSrdMeasTimingMgr *, __int16 *))this + 4))(this, &v6);
    }
    *((void *)this + 4) = result;
  }
  while (result);
  *((void *)this + 4) = v4;
  return result;
}

uint64_t (*BlueFin::GlMeSrdMeasTimingMgr::idle(uint64_t a1, unsigned __int8 *a2))()
{
  unsigned int v2 = *a2;
  if (v2 <= 0x30)
  {
    if (v2 == 2)
    {
      BlueFin::GlQueue::putFIFO((BlueFin::GlQueue *)(a1 + 40), 49, 0);
    }
    else if (v2 != 3)
    {
      return BlueFin::QHsm::top;
    }
    return 0;
  }
  if (v2 == 49)
  {
    if (*(unsigned char *)(a1 + 252))
    {
      *(unsigned char *)(a1 + 252) = 0;
      if (*(unsigned __int16 *)(a1 + 260) == *(unsigned __int16 *)(a1 + 284)
        && *(unsigned __int8 *)(a1 + 263) == *(unsigned __int8 *)(a1 + 286)
        && *(unsigned __int8 *)(a1 + 264) == *(unsigned __int8 *)(a1 + 312))
      {
        return 0;
      }
      *(_OWORD *)(a1 + 268) = *(_OWORD *)(a1 + 252);
      *(_DWORD *)(a1 + 272) = *(_DWORD *)(a1 + 288);
      *(unsigned char *)(a1 + 268) = 1;
      uint64_t v4 = "&GlMeSrdMeasTimingMgr::wait4dutycyle_programming";
      uint64_t v5 = (uint64_t (*)())BlueFin::GlMeSrdMeasTimingMgr::wait4dutycyle_programming;
    }
    else
    {
      if (!*(unsigned char *)(a1 + 240)) {
        return 0;
      }
      *(unsigned char *)(a1 + 240) = 0;
      unsigned int v7 = *(_DWORD *)(a1 + 288);
      if (*(_DWORD *)(a1 + 244) % 0x3E8u != v7 % 0x3E8) {
        return 0;
      }
      signed int v8 = *(__int16 *)(a1 + 248);
      if (v8 <= -901 && *(_WORD *)(a1 + 284) == 1000)
      {
        LOWORD(v8) = v8 + 1000;
        *(_WORD *)(a1 + 248) = v8;
      }
      if ((__int16)v8 < 1)
      {
        if ((__int16)v8 < -19)
        {
          int v9 = 20 * (((__int16)v8 - 19) / 20);
          *(_WORD *)(a1 + 234) = 20 * (((__int16)v8 - 19) / 20);
          LOBYTE(v8) = v8 - v9;
        }
        else
        {
          LOWORD(v9) = 0;
          *(_WORD *)(a1 + 234) = 0;
        }
        *(unsigned char *)(a1 + 236) = v8;
      }
      else
      {
        int v9 = 20 * ((__int16)v8 / 0x14u);
        signed int v8 = (__int16)v8 % 0x14u;
        *(unsigned char *)(a1 + 236) = v8;
        *(_WORD *)(a1 + 234) = v9;
      }
      *(_DWORD *)(a1 + 228) = v7;
      *(unsigned char *)(a1 + 224) = (unsigned __int16)v9 != 0;
      *(unsigned char *)(a1 + 225) = v8 != 0;
      *(_DWORD *)(a1 + 308) = v7 + (char)v8 + (__int16)v9 + *(unsigned __int16 *)(a1 + 284);
      uint64_t v4 = "&GlMeSrdMeasTimingMgr::wait4miadjustment_programming";
      uint64_t v5 = (uint64_t (*)())BlueFin::GlMeSrdMeasTimingMgr::wait4miadjustment_programming;
    }
    BlueFin::QHsm::tran((void *)a1, v5, (uint64_t)v4);
    return 0;
  }
  if (v2 != 50) {
    return BlueFin::QHsm::top;
  }
  uint64_t v3 = 0;
  *(unsigned char *)(a1 + 240) = 0;
  return (uint64_t (*)())v3;
}

#error "2639B5500: call analysis failed (funcsize=212)"

void sub_2639B56F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  *(void *)a16 = &unk_270EBC5B8;
  *(unsigned char *)(a16 + 24) = 0;
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlPeGnssEphemerisMgr::GlPeGnssEphemerisMgr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  *(void *)a1 = &unk_270EBE970;
  BlueFin::GlPeGpsEphMgr::GlPeGpsEphMgr(a1 + 8, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  *(_OWORD *)(a1 + 7008) = 0u;
  *(_OWORD *)(a1 + 6992) = 0u;
  *(_OWORD *)(a1 + 6976) = 0u;
  *(unsigned char *)(a1 + 7024) = 1;
  *(void *)(a1 + 6976) = BlueFin::GlPeObjFactory::MakeSbasEphMgr(BlueFin::GlPeObjFactory::m_potGlPeObjFactory, a2, a3, a4, a5, a6, a7, a8, a9, *((unint64_t *)&a9 + 1));
  *((void *)&v23 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = a11;
  *(void *)&long long v23 = *((void *)&a9 + 1);
  *(void *)(a1 + 6984) = BlueFin::GlPeObjFactory::MakeGloEphMgr(BlueFin::GlPeObjFactory::m_potGlPeObjFactory, a2, a3, a4, a5, a6, a7, a8, a13, a9, v23);
  *(void *)(a1 + 6992) = BlueFin::GlPeObjFactory::MakeQzssEphMgr(BlueFin::GlPeObjFactory::m_potGlPeObjFactory, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  *(void *)(a1 + 7000) = BlueFin::GlPeObjFactory::MakeBdsEphMgr(BlueFin::GlPeObjFactory::m_potGlPeObjFactory, a2, a3, a4, a5, a6, a7, a8, a12, a9, a10, a11);
  *(void *)(a1 + 7008) = BlueFin::GlPeObjFactory::MakeGalEphMgr(BlueFin::GlPeObjFactory::m_potGlPeObjFactory, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  int v20 = 0;
  *(void *)(a1 + 7016) = BlueFin::GlPeObjFactory::MakeNicEphMgr(BlueFin::GlPeObjFactory::m_potGlPeObjFactory, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  do
  {
    Mgr = BlueFin::GlPeGnssEphemerisMgr::GetMgr((void *)a1, v20);
    if (Mgr) {
      *((unsigned char *)Mgr + 533) = *(unsigned char *)(a1 + 7024);
    }
    ++v20;
  }
  while (v20 != 7);
  return a1;
}

uint64_t BlueFin::GlPeObjFactory::MakeGloFcnOsnMgr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!*(unsigned char *)(a1 + 24)) {
    return 0;
  }
  Memory = BlueFin::GlMemAlloc::glAllocateMemory(66, 1280, *(uint64_t (**)(uint64_t))a1);
  if (!Memory) {
    return *(void *)(a1 + 104);
  }
  uint64_t result = BlueFin::GlPeGloFcnOsnMgr::GlPeGloFcnOsnMgr((uint64_t)Memory, a2, a3, a4, a5);
  *(void *)(a1 + 104) = result;
  return result;
}

uint64_t BlueFin::GlPeGloFcnOsnMgr::GlPeGloFcnOsnMgr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = 0;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a5;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a4;
  *(void *)(a1 + 424) = a1 + 32;
  *(unsigned char *)(a1 + 712) = 0;
  *(_DWORD *)(a1 + 1104) = -7200001;
  *(unsigned char *)(a1 + 1108) = 0;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_DWORD *)(a1 + 1160) = 6367;
  *(unsigned char *)(a1 + 1164) = 0;
  *(void *)(a1 + 1168) = 0;
  *(_DWORD *)(a1 + 1176) = -1;
  *(_OWORD *)(a1 + 1184) = xmmword_263BB40A0;
  *(void *)(a1 + 1200) = &off_270EBC600;
  *(_OWORD *)(a1 + 1208) = xmmword_263BB4CC0;
  *(unsigned char *)(a1 + 1224) = 0;
  *(unsigned char *)(a1 + 1249) = 0;
  int32x2_t v7 = vdup_n_s32(0xFF9222FF);
  do
  {
    uint64_t v8 = *(void *)(a1 + 424) + v6;
    *(_WORD *)uint64_t v8 = 0;
    *(unsigned char *)(v8 + 2) = 0;
    *(int32x2_t *)(v8 + 4) = v7;
    memset_pattern16((void *)(v8 + 12), &unk_263BB4CD0, 0xCuLL);
    *(unsigned char *)(v8 + 26) = 0;
    *(_WORD *)(v8 + 24) = 0;
    v6 += 28;
  }
  while (v6 != 392);
  uint64_t v9 = 0;
  int32x2_t v10 = vdup_n_s32(0xFF9222FF);
  do
  {
    uint64_t v11 = (int32x2_t *)(a1 + v9);
    v11[54] = v10;
    v11[55].i8[0] = 0;
    v11[55].i32[1] = 0;
    v11[56].i8[0] = 0;
    v9 += 20;
  }
  while (v9 != 280);
  uint64_t v12 = 0;
  int32x2_t v13 = vdup_n_s32(0xFF9222FF);
  do
  {
    uint64_t v14 = a1 + v12;
    *(int32x2_t *)(a1 + v12 + 716) = v13;
    *(unsigned char *)(v14 + 728) = -8;
    *(_DWORD *)(v14 + 724) = 0;
    v12 += 16;
  }
  while (v12 != 384);
  memset((void *)(a1 + 1225), 248, 24);
  return a1;
}

void *BlueFin::GlPeObjFactory::MakeSbasEphMgr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  if (!*(unsigned char *)(a1 + 27)) {
    return 0;
  }
  uint64_t result = BlueFin::GlMemAlloc::glAllocateMemory(62, 3952, *(uint64_t (**)(uint64_t))a1);
  if (result)
  {
    uint64_t result = BlueFin::GlPeSbasMgr::GlPeSbasMgr(result, a2, a3, a4, a5, a6, a7, a8, a9, a10);
    *(void *)(a1 + 112) = result;
  }
  return result;
}

uint64_t BlueFin::GlPeObjFactory::MakeQzssEphMgr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, uint64_t a10, uint64_t a11)
{
  if (!*(unsigned char *)(a1 + 28)) {
    return 0;
  }
  uint64_t result = (uint64_t)BlueFin::GlMemAlloc::glAllocateMemory(63, 2496, *(uint64_t (**)(uint64_t))a1);
  if (result)
  {
    uint64_t result = BlueFin::GlPeQzssEphMgr::GlPeQzssEphMgr(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
    *(void *)(a1 + 128) = result;
  }
  return result;
}

uint64_t BlueFin::GlPeQzssEphMgr::GlPeQzssEphMgr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, uint64_t a10, uint64_t a11)
{
  *(void *)a1 = &unk_270EC09C0;
  uint64_t v12 = a1 + 584;
  uint64_t v13 = a1 + 588;
  uint64_t v14 = a1 + 940;
  *(void *)&v26[24] = a11;
  *(_OWORD *)&unsigned char v26[8] = a9;
  *(void *)unint64_t v26 = a8;
  float v15 = (void *)BlueFin::GlPeEphemerisMgr::GlPeEphemerisMgr(a1, 3, a2, a3, a4, a5, a6, a7, *(long long *)v26, *(long long *)&v26[16], a10, 10, 28, a1 + 952);
  *float v15 = &unk_270EC0660;
  *(void *)(a1 + 544) = &unk_270EBA640;
  *(void *)(a1 + 552) = v13;
  *(void *)(a1 + 560) = v14;
  *(void *)(a1 + 568) = v12;
  *(_DWORD *)(a1 + 576) = 88;
  *(_WORD *)(a1 + 580) = 2561;
  *(unsigned char *)(a1 + 582) = 4;
  BlueFin::GlArray::Clear((uint64_t)(v15 + 68));
  *(void *)a1 = &unk_270EC09C0;
  uint64_t v16 = 588;
  do
  {
    uint64_t v17 = a1 + v16;
    *(_DWORD *)uint64_t v17 = 7;
    *(unsigned char *)(v17 + 4) = 0;
    *(_DWORD *)(v17 + 8) = -7200001;
    *(_OWORD *)(v17 + 24) = 0uLL;
    *(_OWORD *)(v17 + 40) = 0uLL;
    *(_OWORD *)(v17 + 56) = 0uLL;
    *(_OWORD *)(v17 + 72) = 0uLL;
    *(void *)(v17 + 12) = 0;
    v16 += 88;
    *(unsigned char *)(v17 + 20) = 0;
  }
  while (v17 + 88 != v14);
  uint64_t v18 = 2072;
  do
  {
    uint64_t v19 = a1 + v18;
    *(unsigned char *)uint64_t v19 = -1;
    *(_DWORD *)(v19 + 4) = -1;
    *(void *)(v19 + 8) = 0;
    *(void *)(v19 + 16) = 0;
    *(_DWORD *)(v19 + 23) = 0;
    *(_DWORD *)(v19 + 28) = 0;
    v18 += 36;
    *(_WORD *)(v19 + 32) = 0;
  }
  while (v19 + 36 != a1 + 2432);
  uint64_t v20 = 2432;
  do
  {
    uint64_t v21 = a1 + v20;
    *(unsigned char *)uint64_t v21 = -1;
    *(_DWORD *)(v21 + 2) = 0;
    v20 += 6;
  }
  while (v21 + 6 != a1 + 2492);
  for (uint64_t i = 0; i != 360; i += 36)
  {
    uint64_t v23 = a1 + i;
    *(unsigned char *)(v23 + 2072) = -1;
    *(_DWORD *)(v23 + 2076) = -1;
    *(_OWORD *)(v23 + 2080) = 0uLL;
    *(_DWORD *)(a1 + i + 2095) = 0;
    *(_DWORD *)(v23 + 2100) = 0;
    *(_WORD *)(v23 + 2104) = 0;
  }
  for (uint64_t j = 0; j != 60; j += 6)
  {
    *(unsigned char *)(a1 + j + 2072) = -1;
    *(_DWORD *)(a1 + j + 2074) = 0;
  }
  return a1;
}

uint64_t BlueFin::GlPeObjFactory::MakeNicEphMgr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, uint64_t a10, uint64_t a11)
{
  if (!*(unsigned char *)(a1 + 29)) {
    return 0;
  }
  uint64_t result = (uint64_t)BlueFin::GlMemAlloc::glAllocateMemory(51, 2848, *(uint64_t (**)(uint64_t))a1);
  if (result)
  {
    uint64_t result = BlueFin::GlPeNicEphMgr::GlPeNicEphMgr(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
    *(void *)(a1 + 152) = result;
  }
  return result;
}

void *BlueFin::GlPeObjFactory::MakeGloEphMgr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long a11)
{
  if (!*(unsigned char *)(a1 + 24)) {
    return 0;
  }
  Memory = BlueFin::GlMemAlloc::glAllocateMemory(64, 8000, *(uint64_t (**)(uint64_t))a1);
  if (!Memory) {
    return *(void **)(a1 + 120);
  }
  uint64_t result = BlueFin::GlPeGloEphMgr::GlPeGloEphMgr(Memory, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  *(void *)(a1 + 120) = result;
  return result;
}

uint64_t BlueFin::GlPeObjFactory::MakeGalEphMgr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, uint64_t a10, uint64_t a11)
{
  if (!*(unsigned char *)(a1 + 26)) {
    return 0;
  }
  uint64_t result = (uint64_t)BlueFin::GlMemAlloc::glAllocateMemory(67, 7768, *(uint64_t (**)(uint64_t))a1);
  if (result)
  {
    uint64_t result = BlueFin::GlPeGalEphMgr::GlPeGalEphMgr(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
    *(void *)(a1 + 144) = result;
  }
  return result;
}

void *BlueFin::GlPeObjFactory::MakeBdsEphMgr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, long long a10, uint64_t a11, uint64_t a12)
{
  if (!*(unsigned char *)(a1 + 25)) {
    return 0;
  }
  uint64_t result = BlueFin::GlMemAlloc::glAllocateMemory(49, 18696, *(uint64_t (**)(uint64_t))a1);
  if (result)
  {
    uint64_t result = BlueFin::GlPeBdsEphMgr::GlPeBdsEphMgr(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
    *(void *)(a1 + 136) = result;
  }
  return result;
}

uint64_t *BlueFin::GlPeObjFactory::MakeBdIFMgr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!*(unsigned char *)(a1 + 25)) {
    return 0;
  }
  Memory = (uint64_t *)BlueFin::GlMemAlloc::glAllocateMemory(50, 23872, *(uint64_t (**)(uint64_t))a1);
  if (!Memory) {
    return *(uint64_t **)(a1 + 96);
  }
  uint64_t result = BlueFin::GlPeBdIFMgr::GlPeBdIFMgr(Memory, a2, a3, a4, a5, a6);
  *(void *)(a1 + 96) = result;
  return result;
}

double BlueFin::GlPeAsstPosMgr::GlPeAsstPosMgr(BlueFin::GlPeAsstPosMgr *this, BlueFin::GlPeKF *a2, BlueFin::GlPeTimeManager *a3, BlueFin::GlSettingsImpl *a4)
{
  *((void *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
  *((unsigned char *)this + 48) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 8) = 0xC15B773FC0000000;
  *((void *)this + 9) = &off_270EBC600;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((void *)this + 22) = 0;
  *((_OWORD *)this + 9) = 0u;
  *((unsigned char *)this + 192) = 0;
  *((_DWORD *)this + 50) = 0;
  *((void *)this + 26) = 0xC15B773FC0000000;
  *((void *)this + 28) = 0;
  *((void *)this + 27) = &off_270EBC600;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((void *)this + 36) = a2;
  *((void *)this + 37) = a3;
  *((void *)this + 38) = a4;
  *((_WORD *)this + 156) = 0;
  *((unsigned char *)this + 314) = 0;
  double result = NAN;
  *((void *)this + 5) = 0xFFFFFFFF00000000;
  *((unsigned char *)this + 136) = 0;
  *((void *)this + 23) = 0xFFFFFFFF00000000;
  *((unsigned char *)this + 280) = 0;
  return result;
}

uint64_t BlueFin::GlPeNicEphMgr::GlPeNicEphMgr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, uint64_t a10, uint64_t a11)
{
  *(void *)a1 = &unk_270EBEEA0;
  *(void *)&v16[24] = a11;
  *(_OWORD *)&__int16 v16[8] = a9;
  *(void *)uint64_t v16 = a8;
  uint64_t v12 = (void *)BlueFin::GlPeEphemerisMgr::GlPeEphemerisMgr(a1, 6, a2, a3, a4, a5, a6, a7, *(long long *)v16, *(long long *)&v16[16], a10, 14, 28, a1 + 540);
  void *v12 = &unk_270EBEEA0;
  *(void *)(a1 + 2112) = &unk_270EBA640;
  *(void *)(a1 + 2120) = a1 + 2176;
  *(void *)(a1 + 2128) = a1 + 2152;
  *(void *)(a1 + 2136) = a1 + 2166;
  *(_DWORD *)(a1 + 2144) = 84;
  *(_WORD *)(a1 + 2148) = 3585;
  *(unsigned char *)(a1 + 2150) = 8;
  BlueFin::GlArray::Clear((uint64_t)(v12 + 264));
  uint64_t v13 = 2176;
  do
  {
    uint64_t v14 = a1 + v13;
    *(_DWORD *)uint64_t v14 = 7;
    *(unsigned char *)(v14 + 4) = 0;
    *(_DWORD *)(v14 + 8) = -7200001;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_OWORD *)(v14 + 40) = 0uLL;
    *(_OWORD *)(v14 + 56) = 0uLL;
    *(_OWORD *)(v14 + 68) = 0uLL;
    *(void *)(v14 + 12) = 0;
    v13 += 84;
    *(unsigned char *)(v14 + 20) = 0;
  }
  while (v14 + 84 != a1 + 2848);
  return a1;
}

uint64_t BlueFin::GlPeGpsEphMgr::GlPeGpsEphMgr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, uint64_t a10, uint64_t a11)
{
  *(void *)a1 = &unk_270EC0810;
  uint64_t v12 = a1 + 584;
  uint64_t v13 = a1 + 600;
  uint64_t v14 = a1 + 2008;
  *(void *)&v27[24] = a11;
  *(_OWORD *)&v27[8] = a9;
  *(void *)uint8x8_t v27 = a8;
  float v15 = (void *)BlueFin::GlPeEphemerisMgr::GlPeEphemerisMgr(a1, 0, a2, a3, a4, a5, a6, a7, *(long long *)v27, *(long long *)&v27[16], a10, 32, 28, a1 + 2040);
  *float v15 = &unk_270EC0660;
  *(void *)(a1 + 544) = &unk_270EBA640;
  *(void *)(a1 + 552) = v13;
  *(void *)(a1 + 560) = v14;
  *(void *)(a1 + 568) = v12;
  *(_DWORD *)(a1 + 576) = 88;
  *(_WORD *)(a1 + 580) = 8193;
  *(unsigned char *)(a1 + 582) = 16;
  BlueFin::GlArray::Clear((uint64_t)(v15 + 68));
  *(void *)a1 = &unk_270EC0810;
  uint64_t v16 = 600;
  do
  {
    uint64_t v17 = a1 + v16;
    *(_DWORD *)uint64_t v17 = 7;
    *(unsigned char *)(v17 + 4) = 0;
    *(_DWORD *)(v17 + 8) = -7200001;
    *(_OWORD *)(v17 + 24) = 0uLL;
    *(_OWORD *)(v17 + 40) = 0uLL;
    *(_OWORD *)(v17 + 56) = 0uLL;
    *(_OWORD *)(v17 + 72) = 0uLL;
    *(void *)(v17 + 12) = 0;
    v16 += 88;
    *(unsigned char *)(v17 + 20) = 0;
  }
  while (v17 + 88 != v14);
  uint64_t v18 = 5624;
  uint64_t v19 = a1 + 5624;
  do
  {
    uint64_t v20 = a1 + v18;
    *(unsigned char *)uint64_t v20 = -1;
    *(_DWORD *)(v20 + 4) = -1;
    *(void *)(v20 + 8) = 0;
    *(void *)(v20 + 16) = 0;
    *(_DWORD *)(v20 + 23) = 0;
    *(_DWORD *)(v20 + 28) = 0;
    v18 += 36;
    *(_WORD *)(v20 + 32) = 0;
  }
  while (v20 + 36 != a1 + 6776);
  uint64_t v21 = 6776;
  do
  {
    uint64_t v22 = a1 + v21;
    *(unsigned char *)uint64_t v22 = -1;
    *(_DWORD *)(v22 + 2) = 0;
    v21 += 6;
  }
  while (v22 + 6 != a1 + 6968);
  uint64_t v23 = 32;
  do
  {
    *(unsigned char *)uint64_t v19 = -1;
    *(_DWORD *)(v19 + 4) = -1;
    *(void *)(v19 + 8) = 0;
    *(void *)(v19 + 16) = 0;
    *(_DWORD *)(v19 + 23) = 0;
    *(_DWORD *)(v19 + 28) = 0;
    *(_WORD *)(v19 + 32) = 0;
    v19 += 36;
    --v23;
  }
  while (v23);
  for (uint64_t i = 0; i != 192; i += 6)
  {
    uint8x8_t v25 = (_DWORD *)(a1 + 5626 + i);
    *((unsigned char *)v25 - 2) = -1;
    _DWORD *v25 = 0;
  }
  return a1;
}

void *BlueFin::GlPeGloEphMgr::GlPeGloEphMgr(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long a11)
{
  uint64_t v12 = a1 + 996;
  *a1 = &unk_270EC10A8;
  *((void *)&v20 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = a10;
  *(void *)&long long v20 = a8;
  uint64_t v13 = (void *)BlueFin::GlPeEphemerisMgr::GlPeEphemerisMgr((uint64_t)a1, 2, a2, a3, a4, a5, a6, a7, v20, a11, 0, 24, 28, (uint64_t)(a1 + 70));
  uint64_t v14 = 0;
  *uint64_t v13 = &unk_270EC10A8;
  v13[68] = a9;
  v13[69] = *((void *)&a11 + 1);
  v13[730] = v13 + 408;
  v13[731] = 0xFF9222FF00000000;
  uint64_t v15 = (uint64_t)(v13 + 732);
  do
  {
    *(unsigned char *)(v15 + v14 * 8) = -1;
    a1[v14 + 733] = 0;
    v14 += 11;
  }
  while (v14 != 264);
  for (uint64_t i = 0; i != 154; i += 11)
  {
    LOBYTE(a1[i + 732]) = -1;
    a1[i + 733] = 0;
  }
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  _WORD *v12 = 0;
  do
  {
    BlueFin::GlPeGloEphMgr::Stitcher::Stitcher(a1[730] + v17, v15, (char)(v18++ - 7));
    v17 += 184;
  }
  while (v18 != 14);
  return a1;
}

uint64_t BlueFin::GlPeGloEphMgr::Stitcher::Stitcher(uint64_t a1, uint64_t a2, int a3)
{
  *(unsigned char *)(a1 + 9) = 10;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 16) = a1 + 32;
  int32x2_t v5 = vdup_n_s32(0xFF9222FF);
  *(int32x2_t *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)a1 = &unk_270EC0F88;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = a2;
  uint64_t v6 = (BlueFin::GlPeGloEphemeris *)(a1 + 80);
  *(_OWORD *)(a1 + 112) = 0u;
  *(_WORD *)(a1 + 88) = 2593;
  *(void *)(a1 + 96) = a1 + 112;
  *(int32x2_t *)(a1 + 104) = v5;
  *(_OWORD *)(a1 + 128) = 0u;
  *(void *)(a1 + 80) = &unk_270EC0F88;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = a2;
  *(void *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 8) = 32;
  BlueFin::GlPeGloEphemeris::PutCmpSignedField((BlueFin::GlPeGloEphemeris *)a1, 4, a3);
  *(unsigned char *)(a1 + 88) &= 0xF0u;
  BlueFin::GlPeGloEphemeris::PutCmpSignedField(v6, 4, a3);
  *(int64x2_t *)(a1 + 168) = vdupq_n_s64(0xC15B773FC0000000);
  return a1;
}

uint64_t BlueFin::GlPeEphemerisMgr::GlPeEphemerisMgr(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10, uint64_t a11, char a12, char a13, uint64_t a14)
{
  *(void *)a1 = &unk_270EBFFD0;
  *(_WORD *)(a1 + 8) = -257;
  *(_DWORD *)(a1 + 12) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a4;
  *(void *)(a1 + 32) = a5;
  *(void *)(a1 + 40) = a6;
  *(void *)(a1 + 48) = a7;
  *(void *)(a1 + 56) = a8;
  *(_OWORD *)(a1 + 64) = a9;
  *(_OWORD *)(a1 + 80) = a10;
  *(void *)(a1 + 96) = a11;
  *(unsigned char *)(a1 + 104) = a12;
  *(void *)(a1 + 360) = a1 + 372;
  *(unsigned char *)(a1 + 368) = 2;
  *(void *)(a1 + 372) = 0;
  *(void *)(a1 + 396) = 0;
  *(void *)(a1 + 384) = a1 + 396;
  *(unsigned char *)(a1 + 392) = 2;
  *(void *)(a1 + 420) = 0;
  *(void *)(a1 + 408) = a1 + 420;
  *(unsigned char *)(a1 + 416) = 2;
  *(void *)(a1 + 444) = 0;
  *(void *)(a1 + 432) = a1 + 444;
  *(unsigned char *)(a1 + 440) = 2;
  *(unsigned char *)(a1 + 456) = a13;
  *(void *)(a1 + 492) = 0;
  *(void *)(a1 + 464) = a14;
  *(void *)(a1 + 472) = 0x41EFFFFFFFE00000;
  *(void *)(a1 + 480) = a1 + 492;
  *(unsigned char *)(a1 + 488) = 2;
  *(void *)(a1 + 516) = 0;
  *(void *)(a1 + 504) = a1 + 516;
  *(unsigned char *)(a1 + 512) = 2;
  *(_DWORD *)(a1 + 528) = 0;
  *(_WORD *)(a1 + 532) = 0;
  *(_DWORD *)(a1 + 536) = -1;
  *(_OWORD *)(a1 + 252) = 0u;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_OWORD *)(a1 + 220) = 0u;
  *(_OWORD *)(a1 + 204) = 0u;
  *(_OWORD *)(a1 + 188) = 0u;
  *(_OWORD *)(a1 + 172) = 0u;
  *(_OWORD *)(a1 + 156) = 0u;
  *(_OWORD *)(a1 + 140) = 0u;
  *(_OWORD *)(a1 + 124) = 0u;
  *(_OWORD *)(a1 + 108) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 316) = 0u;
  *(_OWORD *)(a1 + 332) = 0u;
  *(_OWORD *)(a1 + 284) = 0u;
  *(_OWORD *)(a1 + 300) = 0u;
  *(_OWORD *)(a1 + 268) = 0u;
  BlueFin::GlPeEphemerisMgr::Clear((void **)a1);
  return a1;
}

void BlueFin::GlPeEphemerisMgr::Clear(void **this)
{
  bzero(this[45], ((4 * *((unsigned __int8 *)this + 368) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero(this[48], ((4 * *((unsigned __int8 *)this + 392) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero(this[60], ((4 * *((unsigned __int8 *)this + 488) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero(this[63], ((4 * *((unsigned __int8 *)this + 512) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero(this[54], ((4 * *((unsigned __int8 *)this + 440) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero(this[51], ((4 * *((unsigned __int8 *)this + 416) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  this[59] = (void *)0xC15B773FC0000000;
  if (*((unsigned char *)this + 104))
  {
    unsigned int v2 = 0;
    int32x2_t v3 = vdup_n_s32(0xFF9222FF);
    do
    {
      char v5 = ++v2;
      WritableEphemerisObuint64_t j = BlueFin::GlPeEphemerisMgr::GetWritableEphemerisObj((uint64_t)this, &v5);
      *(_OWORD *)(WritableEphemerisObj + 32) = 0u;
      *(void *)(WritableEphemerisObj + 16) = WritableEphemerisObj + 32;
      *(int32x2_t *)(WritableEphemerisObj + 24) = v3;
      *(_OWORD *)(WritableEphemerisObj + 92) = 0u;
      *(_OWORD *)(WritableEphemerisObj + 64) = 0u;
      *(_OWORD *)(WritableEphemerisObj + 80) = 0u;
      *(_OWORD *)(WritableEphemerisObj + 48) = 0u;
      *(void *)WritableEphemerisObuint64_t j = &unk_270EC0528;
      *(_WORD *)(WritableEphemerisObj + 8) = 4976;
    }
    while (v2 < *((unsigned __int8 *)this + 104));
  }
}

uint64_t BlueFin::GlPeGalEphMgr::GlPeGalEphMgr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12 = a1 + 4612;
  *(void *)a1 = &unk_270EC0DA8;
  *(void *)&v19[24] = a11;
  *(_OWORD *)&v19[8] = a9;
  *(void *)uint64_t v19 = a8;
  uint64_t v13 = (void *)BlueFin::GlPeEphemerisMgr::GlPeEphemerisMgr(a1, 5, a2, a3, a4, a5, a6, a7, *(long long *)v19, *(long long *)&v19[16], a10, 36, 28, a1 + 540);
  *uint64_t v13 = &unk_270EC0DA8;
  *(void *)(a1 + 4576) = &unk_270EBA640;
  *(void *)(a1 + 4584) = a1 + 4672;
  *(void *)(a1 + 4592) = a1 + 4616;
  *(void *)(a1 + 4600) = a1 + 4652;
  *(_DWORD *)(a1 + 4608) = 108;
  *(_WORD *)(a1 + 4612) = 9217;
  *(unsigned char *)(v12 + 2) = 18;
  BlueFin::GlArray::Clear((uint64_t)(v13 + 572));
  uint64_t v14 = 6616;
  do
  {
    uint64_t v15 = a1 + v14;
    *(unsigned char *)uint64_t v15 = -1;
    *(_DWORD *)(v15 + 4) = -1;
    *(void *)(v15 + 8) = 0;
    *(void *)(v15 + 16) = 0;
    *(void *)(v15 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
    v14 += 32;
  }
  while (v15 + 32 != a1 + 7768);
  bzero((void *)(a1 + 4672), 0x798uLL);
  for (uint64_t i = 0; i != 1152; i += 32)
  {
    *(unsigned char *)(a1 + 6616 + i) = -1;
    uint64_t v17 = a1 + i;
    *(_DWORD *)(v17 + 6620) = -1;
    *(_OWORD *)(v17 + 6624) = 0uLL;
    *(void *)(a1 + i + 6637) = 0;
  }
  return a1;
}

void *BlueFin::GlPeBdsEphMgr::GlPeBdsEphMgr(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, long long a10, uint64_t a11, uint64_t a12)
{
  *a1 = &unk_270EBFB98;
  *(void *)&v38[24] = a12;
  *(_OWORD *)&v38[8] = a10;
  *(void *)unint64_t v38 = a8;
  double result = (void *)BlueFin::GlPeEphemerisMgr::GlPeEphemerisMgr((uint64_t)a1, 4, a2, a3, a4, a5, a6, a7, *(long long *)v38, *(long long *)&v38[16], a11, 63, 28, (uint64_t)(a1 + 69));
  *double result = &unk_270EBFB98;
  result[68] = a9;
  uint64_t v13 = 951;
  do
  {
    uint64_t v14 = &result[v13];
    *uint64_t v14 = &unk_270EBFB48;
    *((unsigned char *)v14 + 8) = 0;
    void v14[2] = 0;
    v13 += 3;
  }
  while (v14 + 3 != result + 1140);
  for (uint64_t i = 0; i != 63; ++i)
    result[i + 1140] = &unk_270EBFB70;
  uint64_t v16 = 0;
  uint64_t v17 = result + 819;
  int32x2_t v18 = vdup_n_s32(0xFF9222FF);
  do
  {
    uint64_t v19 = &v17[v16];
    *((unsigned char *)v19 + 3080) = 65;
    *((unsigned char *)v19 + 308BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 18;
    long long v20 = &result[v16];
    v20[1205] = &v17[v16 + 388];
    uint64_t v21 = &result[v16 + 1207];
    v20[1206] = v18;
    v20[1215] = 0;
    *uint64_t v21 = 0uLL;
    v21[1] = 0uLL;
    void v21[2] = 0uLL;
    void v21[3] = 0uLL;
    v16 += 13;
    v20[1203] = &unk_270EBFA28;
  }
  while (v16 != 819);
  uint64_t v22 = 16176;
  do
  {
    uint64_t v23 = (char *)result + v22;
    char *v23 = -1;
    *(void *)(v23 + 4) = 0;
    *(void *)(v23 + 9) = 0;
    v22 += 20;
  }
  while (v23 + 20 != (char *)result + 17436);
  uint64_t v24 = 17436;
  do
  {
    uint8x8_t v25 = (char *)result + v24;
    char *v25 = -1;
    *(void *)(v25 + 4) = 0;
    *(void *)(v25 + 9) = 0;
    v24 += 20;
  }
  while (v25 + 20 != (char *)(result + 2337));
  uint64_t v26 = 0;
  uint64_t v27 = 1;
  do
  {
    uint64_t v28 = &result[v26];
    v28[951] = &unk_270EBFB48;
    LOBYTE(result[v26 + 952]) = v27;
    v28[953] = result;
    v26 += 3;
    ++v27;
  }
  while (v26 != 189);
  for (uint64_t j = 0; j != 63; ++j)
    result[j + 1140] = &unk_270EBFB70;
  uint64_t v30 = 0x1FFFFFFFFFFFFCCDLL;
  uint64_t v31 = 1207;
  uint64_t v32 = 9633;
  uint64_t v33 = 1204;
  int32x2_t v34 = vdup_n_s32(0xFF9222FF);
  do
  {
    LOBYTE(result[v33]) = 65;
    *((unsigned char *)result + v32) = 18;
    uint64_t v35 = &result[v30];
    v35[2024] = &result[v31];
    v35[2025] = v34;
    *((_OWORD *)v35 + 1013) = 0uLL;
    *((_OWORD *)v35 + 1014) = 0uLL;
    *((_OWORD *)v35 + 1015) = 0uLL;
    *((_OWORD *)v35 + 1016) = 0uLL;
    v35[2034] = 0;
    v35[2022] = &unk_270EBFA28;
    v31 += 13;
    v32 += 104;
    v33 += 13;
    v30 += 13;
  }
  while (v30 * 8);
  uint64_t v36 = -1260;
  do
  {
    *((unsigned char *)result + v36 + 17436) = -1;
    *(void *)((char *)result + v36 + 17440) = 0;
    *(void *)((char *)result + v36 + 17445) = 0;
    v36 += 20;
  }
  while (v36);
  for (uint64_t k = 0; k != 1260; k += 20)
  {
    *((unsigned char *)result + k + 17436) = -1;
    *(void *)((char *)result + k + 17440) = 0;
    *(void *)((char *)result + k + 17445) = 0;
  }
  return result;
}

void *BlueFin::GlPeSbasMgr::GlPeSbasMgr(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  *a1 = &unk_270EC1D40;
  *((void *)&v13 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = a9;
  *(void *)&long long v13 = a8;
  uint64_t v11 = BlueFin::GlPeEphemerisMgr::GlPeEphemerisMgr((uint64_t)a1, 1, a2, a3, a4, a5, a6, a7, v13, a10, 0, 19, 28, (uint64_t)(a1 + 227));
  *(void *)uint64_t v11 = &unk_270EC1D40;
  *(unsigned char *)(v11 + 1464) = 0;
  *(unsigned char *)(v11 + 3944) = 0;
  *(_OWORD *)(v11 + 1484) = 0u;
  *(_OWORD *)(v11 + 1500) = 0u;
  *(_OWORD *)(v11 + 1516) = 0u;
  *(_OWORD *)(v11 + 1532) = 0u;
  *(_OWORD *)(v11 + 1548) = 0u;
  *(_OWORD *)(v11 + 1564) = 0u;
  *(_OWORD *)(v11 + 1580) = 0u;
  *(_OWORD *)(v11 + 1596) = 0u;
  *(_OWORD *)(v11 + 1612) = 0u;
  *(_OWORD *)(v11 + 1628) = 0u;
  *(_OWORD *)(v11 + 1644) = 0u;
  *(_OWORD *)(v11 + 1660) = 0u;
  *(_OWORD *)(v11 + 1676) = 0u;
  *(_OWORD *)(v11 + 1692) = 0u;
  *(_OWORD *)(v11 + 1708) = 0u;
  *(_OWORD *)(v11 + 1800) = 0u;
  *(_OWORD *)(v11 + 1468) = 0u;
  *(_OWORD *)(v11 + 1724) = 0u;
  *(_OWORD *)(v11 + 1740) = 0u;
  *(_OWORD *)(v11 + 1756) = 0u;
  *(_OWORD *)(v11 + 1772) = 0u;
  *(_OWORD *)(v11 + 1788) = 0u;
  *(_DWORD *)(v11 + 3948) = -1;
  *(_OWORD *)(v11 + 540) = 0u;
  *(_OWORD *)(v11 + 556) = 0u;
  *(_OWORD *)(v11 + 572) = 0u;
  *(_OWORD *)(v11 + 588) = 0u;
  *(_OWORD *)(v11 + 604) = 0u;
  *(_OWORD *)(v11 + 620) = 0u;
  *(_OWORD *)(v11 + 636) = 0u;
  *(_OWORD *)(v11 + 652) = 0u;
  *(_OWORD *)(v11 + 668) = 0u;
  *(void *)(v11 + 684) = 0;
  memcpy((void *)(v11 + 692), &BlueFin::GlPeSbasMgr::m_InitIonoData, 0x300uLL);
  return a1;
}

uint64_t BlueFin::GlPeIonoMgr::GlPeIonoMgr(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = 0;
  uint64_t v6 = a1 + 48488;
  do
  {
    uint64_t v7 = a1 + v5;
    *(void *)uint64_t v7 = &unk_270EC13F0;
    *(_OWORD *)(v7 + 8) = 0uLL;
    *(_OWORD *)(v7 + 24) = 0uLL;
    *(_OWORD *)(v7 + 40) = 0uLL;
    *(void *)(v7 + 56) = 0;
    v5 += 64;
  }
  while (v5 != 320);
  *(void *)(a1 + 332) = 0;
  *(void *)(a1 + 320) = a1 + 332;
  *(unsigned char *)(a1 + 328) = 3;
  *(_DWORD *)(a1 + 340) = 0;
  *(_DWORD *)(a1 + 344) = a2;
  *(void *)(a1 + 352) = a3;
  BlueFin::GlPeIONXMgr::GlPeIONXMgr(a1 + 384, a3, a4);
  *(void *)uint64_t v6 = &unk_270EC1420;
  *(void *)(v6 + 8) = a1;
  *(_DWORD *)(v6 + 20) = 0;
  BlueFin::GlPeIonoMgr::Clear((BlueFin::GlPeIonoMgr *)a1);
  *(_OWORD *)(a1 + 8) = xmmword_263BB89F0;
  *(_OWORD *)(a1 + 24) = xmmword_263BB8A00;
  *(_OWORD *)(a1 + 40) = xmmword_263BB8A10;
  *(void *)(a1 + 56) = 0x4E82101400000000;
  GlCustomLog(15, "IONO(DEF): ");
  double v8 = *(double *)(a1 + 8) * 1073741820.0;
  double v9 = fmod(v8, 4294967300.0);
  if (v8 <= 4294967300.0) {
    double v9 = v8;
  }
  if (v9 < -4294967300.0) {
    double v9 = -fmod(-v9, 4294967300.0);
  }
  if (v9 < 0.0) {
    unsigned int v10 = --v9;
  }
  else {
    unsigned int v10 = v9;
  }
  double v11 = *(double *)(a1 + 16) * 134217728.0;
  double v12 = fmod(v11, 4294967300.0);
  if (v11 <= 4294967300.0) {
    double v12 = v11;
  }
  if (v12 < -4294967300.0) {
    double v12 = -fmod(-v12, 4294967300.0);
  }
  if (v12 < 0.0) {
    unsigned int v13 = --v12;
  }
  else {
    unsigned int v13 = v12;
  }
  double v14 = *(double *)(a1 + 24) * 16777216.0;
  double v15 = fmod(v14, 4294967300.0);
  if (v14 <= 4294967300.0) {
    double v15 = v14;
  }
  if (v15 < -4294967300.0) {
    double v15 = -fmod(-v15, 4294967300.0);
  }
  if (v15 < 0.0) {
    unsigned int v16 = --v15;
  }
  else {
    unsigned int v16 = v15;
  }
  double v17 = *(double *)(a1 + 32) * 16777216.0;
  double v18 = fmod(v17, 4294967300.0);
  if (v17 <= 4294967300.0) {
    double v18 = v17;
  }
  if (v18 < -4294967300.0) {
    double v18 = -fmod(-v18, 4294967300.0);
  }
  if (v18 < 0.0) {
    unsigned int v19 = --v18;
  }
  else {
    unsigned int v19 = v18;
  }
  GlCustomLog(15, "%d, %d, %d, %d, ", v10, v13, v16, v19);
  GlCustomLog(15, "%d, %d, %d, %d, ", *(_DWORD *)(a1 + 40) / 2048, *(_DWORD *)(a1 + 44) / 0x4000, *(_DWORD *)(a1 + 48) / 0x10000, *(_DWORD *)(a1 + 52) / 0x10000);
  GlCustomLog(15, "\n");
  return a1;
}

void sub_2639B7568(_Unwind_Exception *a1)
{
  *(void *)(v1 + 384) = &unk_270EBC5B8;
  *(unsigned char *)(v1 + 408) = 0;
  _Unwind_Resume(a1);
}

double BlueFin::GlPeIonoMgr::Clear(BlueFin::GlPeIonoMgr *this)
{
  *((unsigned char *)this + 48480) = 0;
  *((unsigned char *)this + 48504) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((void *)this + 15) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((void *)this + 23) = 0;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((void *)this + 3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  double result = 0.0;
  *(_OWORD *)((char *)this + 296) = 0u;
  *((void *)this + 39) = 0;
  return result;
}

double BlueFin::GlPeIONXMgr::GlPeIONXMgr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  *(void *)a1 = &unk_270EBC5B8;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 46176) = a1 + 96;
  *(unsigned char *)(a1 + 46184) = 0;
  *(_OWORD *)(a1 + 46280) = xmmword_263BACF5C;
  *(_OWORD *)(a1 + 46296) = unk_263BACF6C;
  *(_OWORD *)(a1 + 46312) = xmmword_263BACF7C;
  *(_OWORD *)(a1 + 46328) = unk_263BACF8C;
  *(_OWORD *)(a1 + 46216) = constinit;
  *(_OWORD *)(a1 + 46232) = unk_263BACF2C;
  *(_OWORD *)(a1 + 46248) = xmmword_263BACF3C;
  *(_OWORD *)(a1 + 46264) = unk_263BACF4C;
  *(_OWORD *)(a1 + 46408) = xmmword_263BACFDC;
  *(_OWORD *)(a1 + 46424) = unk_263BACFEC;
  *(_OWORD *)(a1 + 46440) = xmmword_263BACFFC;
  *(_OWORD *)(a1 + 46456) = unk_263BAD00C;
  *(_OWORD *)(a1 + 46344) = constinit_1;
  *(_OWORD *)(a1 + 46360) = unk_263BACFAC;
  *(_OWORD *)(a1 + 46376) = xmmword_263BACFBC;
  *(_OWORD *)(a1 + 46392) = unk_263BACFCC;
  *(_OWORD *)(a1 + 46504) = xmmword_263BAD03C;
  *(_OWORD *)(a1 + 46520) = unk_263BAD04C;
  *(_OWORD *)(a1 + 46472) = constinit_2;
  *(_OWORD *)(a1 + 46488) = *(_OWORD *)algn_263BAD02C;
  *(_OWORD *)(a1 + 46568) = xmmword_263BAD07C;
  *(_OWORD *)(a1 + 46584) = unk_263BAD08C;
  *(_OWORD *)(a1 + 46536) = xmmword_263BAD05C;
  *(_OWORD *)(a1 + 46552) = unk_263BAD06C;
  *(_OWORD *)(a1 + 46632) = xmmword_263BAD0BC;
  *(_OWORD *)(a1 + 46648) = unk_263BAD0CC;
  *(_OWORD *)(a1 + 46600) = *(_OWORD *)"1\b|@";
  *(_OWORD *)(a1 + 46616) = unk_263BAD0AC;
  *(_OWORD *)(a1 + 46696) = xmmword_263BAD0FC;
  *(_OWORD *)(a1 + 46712) = unk_263BAD10C;
  *(_OWORD *)(a1 + 46664) = xmmword_263BAD0DC;
  *(_OWORD *)(a1 + 46680) = unk_263BAD0EC;
  *(void *)(a1 + 46760) = 0;
  *(_OWORD *)(a1 + 46728) = constinit_4;
  *(_OWORD *)(a1 + 46744) = *(_OWORD *)algn_263BAD12C;
  *(void *)(a1 + 46800) = 0;
  *(_OWORD *)(a1 + 46784) = *(_OWORD *)algn_263BAD154;
  *(_OWORD *)(a1 + 46768) = constinit_5;
  *(void *)(a1 + 46840) = 0;
  *(_OWORD *)(a1 + 46808) = constinit_6;
  *(_OWORD *)(a1 + 46824) = *(_OWORD *)algn_263BAD17C;
  *(_OWORD *)(a1 + 46896) = unk_263BAD1C4;
  *(_OWORD *)(a1 + 46880) = xmmword_263BAD1B4;
  *(_OWORD *)(a1 + 46864) = unk_263BAD1A4;
  *(_OWORD *)(a1 + 46848) = constinit_7;
  *(_OWORD *)(a1 + 46960) = unk_263BAD204;
  *(_OWORD *)(a1 + 46944) = xmmword_263BAD1F4;
  *(_OWORD *)(a1 + 46928) = unk_263BAD1E4;
  *(_OWORD *)(a1 + 46912) = xmmword_263BAD1D4;
  *(_OWORD *)(a1 + 47024) = unk_263BAD244;
  *(_OWORD *)(a1 + 47008) = xmmword_263BAD234;
  *(_OWORD *)(a1 + 46992) = unk_263BAD224;
  *(_OWORD *)(a1 + 46976) = xmmword_263BAD214;
  *(_OWORD *)(a1 + 47084) = *(long long *)((char *)&xmmword_263BAD274 + 12);
  *(_OWORD *)(a1 + 47072) = xmmword_263BAD274;
  *(_OWORD *)(a1 + 47056) = unk_263BAD264;
  *(_OWORD *)(a1 + 47292) = xmmword_263BAD350;
  *(_OWORD *)(a1 + 47308) = unk_263BAD360;
  *(_OWORD *)(a1 + 47324) = xmmword_263BAD370;
  *(_OWORD *)(a1 + 47336) = *(long long *)((char *)&xmmword_263BAD370 + 12);
  *(_OWORD *)(a1 + 47228) = xmmword_263BAD310;
  *(_OWORD *)(a1 + 47244) = unk_263BAD320;
  *(_OWORD *)(a1 + 47260) = xmmword_263BAD330;
  *(_OWORD *)(a1 + 47276) = unk_263BAD340;
  *(_OWORD *)(a1 + 47164) = xmmword_263BAD2D0;
  *(_OWORD *)(a1 + 47180) = unk_263BAD2E0;
  *(_OWORD *)(a1 + 47196) = xmmword_263BAD2F0;
  *(_OWORD *)(a1 + 47212) = unk_263BAD300;
  *(_OWORD *)(a1 + 47100) = constinit_8;
  *(_OWORD *)(a1 + 47116) = unk_263BAD2A0;
  *(_OWORD *)(a1 + 47132) = xmmword_263BAD2B0;
  *(_OWORD *)(a1 + 47148) = unk_263BAD2C0;
  *(_OWORD *)(a1 + 47544) = xmmword_263BAD44C;
  *(_OWORD *)(a1 + 47560) = unk_263BAD45C;
  *(_OWORD *)(a1 + 47576) = xmmword_263BAD46C;
  *(_OWORD *)(a1 + 47588) = *(long long *)((char *)&xmmword_263BAD46C + 12);
  *(_OWORD *)(a1 + 47480) = xmmword_263BAD40C;
  *(_OWORD *)(a1 + 47496) = unk_263BAD41C;
  *(_OWORD *)(a1 + 47512) = xmmword_263BAD42C;
  *(_OWORD *)(a1 + 47528) = unk_263BAD43C;
  *(_OWORD *)(a1 + 47416) = xmmword_263BAD3CC;
  *(_OWORD *)(a1 + 47432) = unk_263BAD3DC;
  *(_OWORD *)(a1 + 47448) = xmmword_263BAD3EC;
  *(_OWORD *)(a1 + 47464) = unk_263BAD3FC;
  *(_OWORD *)(a1 + 47352) = constinit_9;
  *(_OWORD *)(a1 + 47368) = *(_OWORD *)algn_263BAD39C;
  *(_OWORD *)(a1 + 47384) = xmmword_263BAD3AC;
  *(_OWORD *)(a1 + 47400) = unk_263BAD3BC;
  *(_OWORD *)(a1 + 47700) = xmmword_263BAD4E8;
  *(_OWORD *)(a1 + 47716) = unk_263BAD4F8;
  *(_OWORD *)(a1 + 47732) = xmmword_263BAD508;
  *(_OWORD *)(a1 + 47636) = xmmword_263BAD4A8;
  *(_OWORD *)(a1 + 47652) = unk_263BAD4B8;
  *(_OWORD *)(a1 + 47668) = xmmword_263BAD4C8;
  *(_OWORD *)(a1 + 47684) = unk_263BAD4D8;
  *(_OWORD *)(a1 + 47604) = constinit_10;
  *(_OWORD *)(a1 + 47620) = unk_263BAD498;
  *(_OWORD *)(a1 + 47844) = xmmword_263BAD578;
  *(_OWORD *)(a1 + 47860) = unk_263BAD588;
  *(_OWORD *)(a1 + 47876) = xmmword_263BAD598;
  *(_OWORD *)(a1 + 47780) = xmmword_263BAD538;
  *(_OWORD *)(a1 + 47796) = unk_263BAD548;
  *(_OWORD *)(a1 + 47812) = xmmword_263BAD558;
  *(_OWORD *)(a1 + 47828) = unk_263BAD568;
  *(_OWORD *)(a1 + 47748) = constinit_11;
  *(_OWORD *)(a1 + 47924) = xmmword_263BAD5C8;
  *(_OWORD *)(a1 + 47940) = unk_263BAD5D8;
  *(_OWORD *)(a1 + 47956) = xmmword_263BAD5E8;
  *(_OWORD *)(a1 + 47972) = unk_263BAD5F8;
  *(_OWORD *)(a1 + 47892) = constinit_12;
  *(_OWORD *)(a1 + 47908) = unk_263BAD5B8;
  *(_OWORD *)(a1 + 48020) = xmmword_263BAD628;
  *(_OWORD *)(a1 + 48036) = unk_263BAD638;
  *(_OWORD *)(a1 + 48052) = xmmword_263BAD648;
  *(_OWORD *)(a1 + 48068) = unk_263BAD658;
  *(_OWORD *)(a1 + 47988) = constinit_13;
  *(_OWORD *)(a1 + 48004) = unk_263BAD618;
  *(_OWORD *)(a1 + 47040) = xmmword_263BAD254;
  do
  {
    uint64_t v4 = *(void *)(a1 + 46176) + 11520 * v3;
    *(_DWORD *)uint64_t v4 = 0;
    *(_OWORD *)(v4 + 8) = 0uLL;
    *(_OWORD *)(v4 + 24) = 0uLL;
    *(_OWORD *)(v4 + 40) = 0uLL;
    *(void *)(v4 + 56) = 0;
    *(void *)(v4 + 64) = 0xFFFFFFFFLL;
    uint64_t v5 = (void *)(v4 + 11496);
    *(void *)(v4 + 11496) = v4 + 96;
    uint64_t v6 = -11400;
    do
    {
      uint64_t v7 = *v5 + v6;
      *(_DWORD *)(v7 + 11592) = 0;
      *(_OWORD *)(v7 + 11560) = 0uLL;
      *(_OWORD *)(v7 + 11576) = 0uLL;
      *(_OWORD *)(v7 + 11528) = 0uLL;
      *(_OWORD *)(v7 + 11544) = 0uLL;
      *(_OWORD *)(v7 + 11496) = 0uLL;
      *(_OWORD *)(v7 + 11512) = 0uLL;
      *(_OWORD *)(v7 + 11464) = 0uLL;
      *(_OWORD *)(v7 + 11480) = 0uLL;
      *(_OWORD *)(v7 + 11432) = 0uLL;
      *(_OWORD *)(v7 + 11448) = 0uLL;
      *(_OWORD *)(v7 + 11400) = 0uLL;
      *(_OWORD *)(v7 + 11416) = 0uLL;
      v6 += 200;
    }
    while (v6);
    ++v3;
  }
  while (v3 != 4);
  *(_DWORD *)(a1 + 76) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(void *)(a1 + 46196) = 0;
  *(void *)(a1 + 46204) = 0;
  *(void *)(a1 + 46188) = 0;
  *(_DWORD *)(a1 + 46212) = 0;
  return result;
}

uint64_t *BlueFin::GlPeBdIFMgr::GlPeBdIFMgr(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
  uint64_t v7 = a1 + 2839;
  a1[4] = a6;
  a1[5] = (uint64_t)&unk_270EBA640;
  a1[6] = (uint64_t)(a1 + 12);
  a1[7] = (uint64_t)(a1 + 2830);
  a1[8] = (uint64_t)(a1 + 2828);
  *((_DWORD *)a1 + 18) = 1408;
  *((_WORD *)a1 + 38) = 16129;
  *((unsigned char *)a1 + 78) = 16;
  BlueFin::GlArray::Clear((uint64_t)(a1 + 5));
  a1[2838] = (uint64_t)v7 + 4;
  *(unsigned char *)uint64_t v7 = 2;
  a1[2970] = (uint64_t)(a1 + 2844);
  uint64_t v8 = *a1;
  a1[2971] = (uint64_t)&unk_270EBFE10;
  a1[2972] = v8;
  a1[2973] = (uint64_t)&unk_270EBFE60;
  a1[2974] = v8;
  *((_WORD *)v7 + 548) = 0;
  *(uint64_t *)((char *)a1 + 23812) = -1;
  a1[2975] = (uint64_t)&unk_270EBFEB0;
  a1[2978] = v8;
  *((_WORD *)v7 + 564) = 0;
  *(uint64_t *)((char *)a1 + 23844) = -1;
  a1[2979] = (uint64_t)&unk_270EBFF00;
  a1[2982] = v8;
  bzero(a1 + 2844, 0x3F0uLL);
  *(uint64_t *)((char *)v7 + 4) = 0;
  return a1;
}

BlueFin::GlPeLtoMgr *BlueFin::GlPeLtoMgr::GlPeLtoMgr(BlueFin::GlPeLtoMgr *this, BlueFin::GlPeAsstMgr *a2, BlueFin::GlPeTimeManager *a3, BlueFin::GlPeKF *a4, BlueFin::GlPeClkCalibrateMgr *a5, BlueFin::GlSettingsImpl *a6, BlueFin::GlPeSvHealthMgr *a7)
{
  *((unsigned char *)this + 64) = 0;
  *((void *)this + 9) = "LTO";
  *((void *)this + 10) = a2;
  *((void *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = a3;
  *((void *)this + 12) = a4;
  *((void *)this + 13) = a5;
  *((void *)this + 14) = a6;
  *((void *)this + 15) = a7;
  BlueFin::GlPeLtoData::GlPeLtoData((uint64_t)this + 128);
  uint64_t v8 = 0;
  *((void *)this + 93) = (char *)this + 576;
  do
  {
    uint64_t v9 = *((void *)this + 93) + v8;
    *(void *)(v9 + 12) = 0;
    *(void *)uint64_t v9 = v9 + 12;
    *(unsigned char *)(v9 + 8) = 2;
    v8 += 24;
  }
  while (v8 != 168);
  uint64_t v10 = 0;
  *((void *)this + 117) = (char *)this + 768;
  do
  {
    uint64_t v11 = *((void *)this + 117) + v10;
    *(void *)(v11 + 12) = 0;
    *(void *)uint64_t v11 = v11 + 12;
    *(unsigned char *)(v11 + 8) = 2;
    v10 += 24;
  }
  while (v10 != 168);
  uint64_t v12 = 0;
  *((void *)this + 149) = (char *)this + 1024;
  do
  {
    uint64_t v13 = *((void *)this + 149) + v12;
    *(void *)(v13 + 12) = 0;
    *(void *)uint64_t v13 = v13 + 12;
    *(unsigned char *)(v13 + 8) = 2;
    v12 += 24;
  }
  while (v12 != 168);
  uint64_t v14 = 0;
  *((void *)this + 173) = (char *)this + 1216;
  do
  {
    uint64_t v15 = *((void *)this + 173) + v14;
    *(void *)(v15 + 12) = 0;
    *(void *)uint64_t v15 = v15 + 12;
    *(unsigned char *)(v15 + 8) = 2;
    v14 += 24;
  }
  while (v14 != 168);
  uint64_t v16 = 0;
  *((void *)this + 197) = (char *)this + 1408;
  do
  {
    uint64_t v17 = *((void *)this + 197) + v16;
    *(void *)(v17 + 12) = 0;
    *(void *)uint64_t v17 = v17 + 12;
    *(unsigned char *)(v17 + 8) = 2;
    v16 += 24;
  }
  while (v16 != 168);
  *(void *)((char *)this + 1636) = 0;
  *((_OWORD *)this + 100) = 0u;
  *((_OWORD *)this + 10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
  *((_WORD *)this + 816) = 0;
  BlueFin::GlPeLtoFileContentStorageMgr::GlPeLtoFileContentStorageMgr((BlueFin::GlPeLtoMgr *)((char *)this + 1648));
  uint64_t v18 = 0;
  *((void *)this + 3333) = (char *)this + 26496;
  do
  {
    uint64_t v19 = *((void *)this + 3333) + v18;
    *(void *)(v19 + 12) = 0;
    *(void *)uint64_t v19 = v19 + 12;
    *(unsigned char *)(v19 + 8) = 2;
    v18 += 24;
  }
  while (v18 != 168);
  *((void *)this + 126) = 0;
  *((_OWORD *)this + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
  *((_OWORD *)this + 62) = 0u;
  *((_OWORD *)this + 60) = 0u;
  BlueFin::GlPeLtoMgr::Clear(this, 0);
  return this;
}

BlueFin::GlPeLtoFileContentStorageMgr *BlueFin::GlPeLtoFileContentStorageMgr::GlPeLtoFileContentStorageMgr(BlueFin::GlPeLtoFileContentStorageMgr *this)
{
  unsigned int v2 = (char *)this + 18432;
  *(_DWORD *)this = 0;
  *((_DWORD *)this + 614) = 0;
  bzero((char *)this + 8, 0x988uLL);
  *((void *)this + 308) = (char *)this + 16;
  BlueFin::GlPeLtoSlice::Clear((uint64_t)this + 2448);
  bzero((char *)this + 2472, 0x720uLL);
  *((_DWORD *)this + 1076) = 2;
  *((void *)this + 539) = (char *)this + 2472;
  BlueFin::GlPeLtoSlice::Clear((uint64_t)this + 4296);
  bzero((char *)this + 4320, 0x2F8uLL);
  *((_DWORD *)this + 1272) = 3;
  *((void *)this + 637) = (char *)this + 4320;
  BlueFin::GlPeLtoSlice::Clear((uint64_t)this + 5080);
  bzero((char *)this + 5104, 0x12B4uLL);
  *((_DWORD *)this + 2476) = 4;
  *((void *)this + 1239) = (char *)this + 5104;
  BlueFin::GlPeLtoSlice::Clear((uint64_t)this + 9896);
  bzero((char *)this + 9920, 0xAB0uLL);
  *((_DWORD *)this + 3166) = 5;
  *((void *)this + 1584) = (char *)this + 9920;
  BlueFin::GlPeLtoSlice::Clear((uint64_t)this + 12656);
  *(void *)((char *)this + 18342) = 0;
  *((void *)this + 2292) = 0;
  *(void *)((char *)this + 18394) = 0;
  *((void *)this + 2300) = 0;
  *(_WORD *)unsigned int v2 = 0;
  *(void *)(v2 + 4) = 0;
  *((_WORD *)v2 + 6) = 0;
  *((void *)this + 2306) = 0;
  *((_WORD *)v2 + 12) = 0;
  uint64_t v3 = 18468;
  *(void *)(v2 + 28) = 0;
  do
  {
    uint64_t v4 = (char *)this + v3;
    char *v4 = -1;
    *(void *)(v4 + 4) = 0xFFFFFFFFLL;
    v3 += 12;
  }
  while (v4 + 12 != (char *)this + 18852);
  uint64_t v5 = 18852;
  do
  {
    uint64_t v6 = (char *)this + v5;
    *uint64_t v6 = -1;
    *(void *)(v6 + 4) = 0xFFFFFFFFLL;
    v5 += 12;
  }
  while (v6 + 12 != (char *)this + 18972);
  uint64_t v7 = 18972;
  do
  {
    uint64_t v8 = (char *)this + v7;
    *uint64_t v8 = -1;
    *(void *)(v8 + 4) = 0xFFFFFFFFLL;
    v7 += 12;
  }
  while (v8 + 12 != (char *)this + 19728);
  uint64_t v9 = 19728;
  do
  {
    uint64_t v10 = (char *)this + v9;
    *uint64_t v10 = -1;
    *(void *)(v10 + 4) = 0xFFFFFFFFLL;
    v9 += 12;
  }
  while (v10 + 12 != (char *)this + 20160);
  uint64_t v11 = 20164;
  do
  {
    uint64_t v12 = (char *)this + v11;
    char *v12 = -1;
    *((_DWORD *)v12 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = -1;
    *((_DWORD *)v12 + 7) = 0;
    *((void *)v12 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
    *((void *)v12 + 2) = 0;
    *(_DWORD *)(v12 + 23) = 0;
    v11 += 32;
  }
  while (v12 + 32 != (char *)this + 21188);
  uint64_t v13 = 21188;
  do
  {
    uint64_t v14 = (char *)this + v13;
    *uint64_t v14 = -1;
    *((_WORD *)v14 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
    v13 += 4;
  }
  while (v14 + 4 != (char *)this + 21316);
  uint64_t v15 = 21316;
  do
  {
    uint64_t v16 = (char *)this + v15;
    *uint64_t v16 = -1;
    *((_DWORD *)v16 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = -1;
    *((_DWORD *)v16 + 7) = 0;
    *((void *)v16 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
    *((void *)v16 + 2) = 0;
    *(_DWORD *)(v16 + 23) = 0;
    v15 += 32;
  }
  while (v16 + 32 != (char *)this + 21636);
  uint64_t v17 = 21636;
  do
  {
    uint64_t v18 = (char *)this + v17;
    *uint64_t v18 = -1;
    *((_WORD *)v18 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
    v17 += 4;
  }
  while (v18 + 4 != (char *)this + 21676);
  uint64_t v19 = 21676;
  do
  {
    long long v20 = (char *)this + v19;
    *long long v20 = -1;
    *(void *)(v20 + 4) = 0;
    *((_DWORD *)v20 + 3) = 0;
    v19 += 16;
  }
  while (v20 + 16 != (char *)this + 22684);
  uint64_t v21 = 22684;
  do
  {
    uint64_t v22 = (char *)this + v21;
    *uint64_t v22 = -1;
    *(void *)(v22 + 4) = 0;
    *((_DWORD *)v22 + 3) = 0;
    v21 += 16;
  }
  while (v22 + 16 != (char *)this + 23692);
  uint64_t v23 = 23692;
  do
  {
    uint64_t v24 = (char *)this + v23;
    char *v24 = -1;
    *((_DWORD *)v24 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = -1;
    *((void *)v24 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
    *((void *)v24 + 2) = 0;
    *((_DWORD *)v24 + 6) = 0;
    v23 += 28;
  }
  while (v24 + 28 != (char *)this + 24700);
  *(_OWORD *)((char *)this + 24795) = 0u;
  *((_DWORD *)v2 + 1596) = 0;
  uint64_t v26 = &v28;
  char v27 = 3;
  uint64_t v28 = -1;
  int v29 = -1;
  BlueFin::GlPeLtoFileContentStorageMgr::Clear((uint64_t)this, (int **)&v26);
  return this;
}

double BlueFin::GlPeLtoFileContentStorageMgr::Clear(uint64_t a1, int **a2)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v4 = (_DWORD *)(a1 + 20160);
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v5 = *a2;
  int v6 = **a2;
  if ((v6 & 4) != 0)
  {
    for (int i = 0; i != 7; ++i)
    {
      uint64_t v8 = a1 + 2448;
      switch(i)
      {
        case 0:
          goto LABEL_14;
        case 2:
          uint64_t v8 = a1 + 4296;
          goto LABEL_14;
        case 3:
          uint64_t v8 = a1 + 5080;
          goto LABEL_14;
        case 4:
          uint64_t v8 = a1 + 9896;
          goto LABEL_14;
        case 5:
          uint64_t v8 = a1 + 12656;
LABEL_14:
          BlueFin::GlPeLtoSlice::Clear(v8);
          break;
        default:
          continue;
      }
    }
    uint64_t v5 = *a2;
    int v6 = **a2;
    if ((v6 & 0x10) == 0)
    {
LABEL_3:
      if ((v6 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_39;
    }
  }
  else if ((v6 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v10 = 0;
  uint64_t v45 = a1 + 12680;
  __int16 v46 = 32;
  uint64_t v47 = a1 + 14600;
  __int16 v48 = 10;
  uint64_t v49 = a1 + 14960;
  __int16 v50 = 63;
  do
  {
    unsigned int v11 = *((unsigned __int16 *)&v45 + 8 * v10 + 4);
    if (*((_WORD *)&v45 + 8 * v10 + 4))
    {
      int v12 = 0;
      uint64_t v13 = *(&v45 + 2 * v10);
      do
      {
        uint64_t v14 = v13 + 36 * v12;
        *(_DWORD *)(v14 + 32) = 0;
        *(_OWORD *)uint64_t v14 = 0uLL;
        *(_OWORD *)(v14 + 16) = 0uLL;
        *(unsigned char *)uint64_t v14 = -1;
        ++v12;
      }
      while (v11 > v12);
    }
    ++v10;
  }
  while (v10 != 3);
  for (uint64_t j = 0; j != 864; j += 24)
  {
    uint64_t v16 = (void *)(a1 + 17228 + j);
    *uint64_t v16 = 0;
    v16[1] = 0;
    void v16[2] = 0;
    *(unsigned char *)uint64_t v16 = -1;
  }
  bzero((void *)(a1 + 13832), 0x300uLL);
  *(_DWORD *)(a1 + 18316) = 0;
  *(_OWORD *)(a1 + 18284) = 0u;
  *(_OWORD *)(a1 + 18300) = 0u;
  *(_OWORD *)(a1 + 18252) = 0u;
  *(_OWORD *)(a1 + 18268) = 0u;
  *(_OWORD *)(a1 + 18220) = 0u;
  *(_OWORD *)(a1 + 18236) = 0u;
  *(_OWORD *)(a1 + 18188) = 0u;
  *(_OWORD *)(a1 + 18204) = 0u;
  *(_OWORD *)(a1 + 18156) = 0u;
  *(_OWORD *)(a1 + 18172) = 0u;
  *(_OWORD *)(a1 + 18124) = 0u;
  *(_OWORD *)(a1 + 18140) = 0u;
  *(_OWORD *)(a1 + 18092) = 0u;
  *(_OWORD *)(a1 + 18108) = 0u;
  *(void *)(a1 + 18342) = 0;
  int v17 = v4[1164];
  *(void *)(a1 + 18336) = 0;
  *(void *)(a1 + 18328) = 0;
  *(void *)(a1 + 18320) = 0;
  unsigned int v18 = v17 & 0xFFFFF800;
  *(_OWORD *)(a1 + 18352) = 0u;
  *(_OWORD *)(a1 + 18368) = 0u;
  *(_OWORD *)(a1 + 18384) = 0u;
  *(_OWORD *)(a1 + 18400) = 0u;
  *(_OWORD *)(a1 + 18416) = 0u;
  *(_OWORD *)(a1 + 18432) = 0u;
  *(_DWORD *)(a1 + 18464) = 0;
  uint64_t v19 = (char *)v4 + 34;
  v4[1164] = v18;
  uint64_t v20 = 32;
  *(_OWORD *)(a1 + 18448) = 0u;
  do
  {
    *(v19 - 30) = -1;
    *(_DWORD *)(v19 - 26) = -1;
    *(_DWORD *)(v19 - 2) = 0;
    *(void *)(v19 - 14) = 0;
    *(void *)(v19 - 22) = 0;
    *(_DWORD *)(v19 - 7) = 0;
    v19 += 32;
    --v20;
  }
  while (v20);
  int v21 = v4[1164];
  uint64_t v22 = (_WORD *)v4 + 515;
  uint64_t v23 = 32;
  do
  {
    *((unsigned char *)v22 - 2) = -1;
    *uint64_t v22 = 0;
    v22 += 2;
    --v23;
  }
  while (v23);
  uint64_t v24 = a1 + 23700;
  uint64_t v25 = 36;
  do
  {
    *(unsigned char *)(v24 - 8) = -1;
    *(_DWORD *)(v24 - 4) = -1;
    *(void *)uint64_t v24 = 0;
    *(void *)(v24 + 8) = 0;
    *(_DWORD *)(v24 + 16) = 0;
    v24 += 28;
    --v25;
  }
  while (v25);
  v4[1164] = v21 & 0xFEFAFFFF;
  uint64_t v26 = (char *)v4 + 1186;
  uint64_t v27 = 10;
  do
  {
    *(v26 - 30) = -1;
    *(_DWORD *)(v26 - 26) = -1;
    *(_DWORD *)(v26 - 2) = 0;
    *(void *)(v26 - 14) = 0;
    *(void *)(v26 - 22) = 0;
    *(_DWORD *)(v26 - 7) = 0;
    v26 += 32;
    --v27;
  }
  while (v27);
  int v28 = v4[1164];
  int v29 = (_WORD *)v4 + 739;
  uint64_t v30 = 10;
  do
  {
    *((unsigned char *)v29 - 2) = -1;
    *int v29 = 0;
    v29 += 2;
    --v30;
  }
  while (v30);
  v4[1164] = v28 & 0xFFD7FFFF;
  uint64_t v31 = a1 + 21680;
  uint64_t v32 = 63;
  do
  {
    *(unsigned char *)(v31 - 4) = -1;
    *(void *)uint64_t v31 = 0;
    *(_DWORD *)(v31 + 8) = 0;
    v31 += 16;
    --v32;
  }
  while (v32);
  v4[1164] &= ~0x400000u;
  uint64_t v33 = a1 + 22688;
  uint64_t v34 = 63;
  do
  {
    *(unsigned char *)(v33 - 4) = -1;
    *(void *)uint64_t v33 = 0;
    *(_DWORD *)(v33 + 8) = 0;
    v33 += 16;
    --v34;
  }
  while (v34);
  unsigned int v35 = v4[1164] & 0xF37FFFFF;
  double result = 0.0;
  *(_OWORD *)(a1 + 24700) = 0u;
  *(_OWORD *)(a1 + 24716) = 0u;
  *(_OWORD *)(a1 + 24732) = 0u;
  *(_OWORD *)(a1 + 24748) = 0u;
  *(_OWORD *)(a1 + 24764) = 0u;
  *(_OWORD *)(a1 + 24779) = 0u;
  v4[1164] = v35;
  uint64_t v5 = *a2;
  int v6 = **a2;
  if ((v6 & 8) == 0)
  {
LABEL_4:
    if ((v6 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_48;
  }
LABEL_39:
  uint64_t v36 = 32;
  uint64_t v37 = a1 + 18478;
  do
  {
    *(unsigned char *)(v37 - 10) = -1;
    *(void *)(v37 - 6) = 0xFFFFFFFFLL;
    v37 += 12;
    --v36;
  }
  while (v36);
  int v38 = v4[1164];
  uint64_t v39 = a1 + 18862;
  uint64_t v40 = 10;
  do
  {
    *(unsigned char *)(v39 - 10) = -1;
    *(void *)(v39 - 6) = 0xFFFFFFFFLL;
    v39 += 12;
    --v40;
  }
  while (v40);
  uint64_t v41 = a1 + 18982;
  uint64_t v42 = 63;
  do
  {
    *(unsigned char *)(v41 - 10) = -1;
    *(void *)(v41 - 6) = 0xFFFFFFFFLL;
    v41 += 12;
    --v42;
  }
  while (v42);
  uint64_t v43 = a1 + 19738;
  uint64_t v44 = 36;
  do
  {
    *(unsigned char *)(v43 - 10) = -1;
    *(void *)(v43 - 6) = 0xFFFFFFFFLL;
    v43 += 12;
    --v44;
  }
  while (v44);
  _DWORD *v4 = 0;
  v4[1164] = v38 & 0xFFFF07FF;
  int v6 = *v5;
  if ((*v5 & 1) == 0)
  {
LABEL_5:
    if ((v6 & 2) == 0) {
      return result;
    }
    goto LABEL_6;
  }
LABEL_48:
  double result = 0.0;
  *(_OWORD *)(a1 + 24795) = 0u;
  if ((**a2 & 2) == 0) {
    return result;
  }
LABEL_6:
  v4[1163] = 0;
  return result;
}

uint64_t BlueFin::GlPeLtoSlice::Clear(uint64_t this)
{
  uint64_t v1 = 0;
  unint64_t v2 = 0;
  *(_DWORD *)this = 0;
  *(_WORD *)(this + 4) = 0;
  while (1)
  {
    uint64_t v3 = *(int *)(this + 8);
    unint64_t v4 = v3 > 6 ? 0 : *(void *)&asc_263BB8D60[8 * v3];
    if (v2 >= v4) {
      break;
    }
    uint64_t v5 = (_OWORD *)(*(void *)(this + 16) + v1);
    *(_OWORD *)((char *)v5 + 60) = 0uLL;
    _OWORD v5[2] = 0uLL;
    v5[3] = 0uLL;
    *uint64_t v5 = 0uLL;
    v5[1] = 0uLL;
    ++v2;
    v1 += 76;
  }
  return this;
}

void BlueFin::GlPeLtoMgr::Clear(BlueFin::GlPeLtoMgr *this, char a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = *((void *)this + 93);
  do
  {
    bzero(*(void **)(v5 + v4), ((4 * *(unsigned __int8 *)(v5 + v4 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    v4 += 24;
  }
  while (v4 != 168);
  uint64_t v6 = 0;
  uint64_t v7 = *((void *)this + 117);
  do
  {
    bzero(*(void **)(v7 + v6), ((4 * *(unsigned __int8 *)(v7 + v6 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    v6 += 24;
  }
  while (v6 != 168);
  if ((a2 & 1) == 0)
  {
    BlueFin::GlPeLtoData::GlPeLtoData((uint64_t)&v14);
    BlueFin::GlPeLtoData::operator=((uint64_t)this + 128, (uint64_t)&v14);
    uint64_t v8 = 0;
    uint64_t v9 = *((void *)this + 173);
    do
    {
      bzero(*(void **)(v9 + v8), ((4 * *(unsigned __int8 *)(v9 + v8 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
      v8 += 24;
    }
    while (v8 != 168);
    uint64_t v10 = 0;
    uint64_t v11 = *((void *)this + 197);
    do
    {
      bzero(*(void **)(v11 + v10), ((4 * *(unsigned __int8 *)(v11 + v10 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
      v10 += 24;
    }
    while (v10 != 168);
    uint64_t v14 = &v16;
    char v15 = 3;
    uint64_t v16 = -1;
    int v17 = -1;
    BlueFin::GlPeLtoFileContentStorageMgr::Clear((uint64_t)this + 1648, (int **)&v14);
    uint64_t v12 = 0;
    uint64_t v13 = *((void *)this + 3333);
    do
    {
      bzero(*(void **)(v13 + v12), ((4 * *(unsigned __int8 *)(v13 + v12 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
      v12 += 24;
    }
    while (v12 != 168);
  }
}

uint64_t BlueFin::GlPeLtoData::GlPeLtoData(uint64_t this)
{
  uint64_t v1 = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = &unk_270EC1488;
  *(void *)(this + 200) = this + 32;
  do
  {
    uint64_t v2 = *(void *)(this + 200) + v1;
    *(void *)(v2 + 12) = 0;
    *(void *)uint64_t v2 = v2 + 12;
    *(unsigned char *)(v2 + 8) = 2;
    v1 += 24;
  }
  while (v1 != 168);
  uint64_t v3 = 0;
  *(void *)(this + 392) = this + 224;
  do
  {
    uint64_t v4 = *(void *)(this + 392) + v3;
    *(void *)(v4 + 12) = 0;
    *(void *)uint64_t v4 = v4 + 12;
    *(unsigned char *)(v4 + 8) = 2;
    v3 += 24;
  }
  while (v3 != 168);
  *(_DWORD *)(this + 416) = -7200001;
  return this;
}

uint64_t BlueFin::GlPeLtoData::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    BlueFin::GlGnssSet::operator=(a1 + 32, a2 + 32);
    BlueFin::GlGnssSet::operator=(a1 + 224, a2 + 224);
    *(_DWORD *)(a1 + 416) = *(_DWORD *)(a2 + 416);
  }
  return a1;
}

uint64_t BlueFin::GlGnssSet::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    for (uint64_t i = 12; i != 180; i += 24)
    {
      uint64_t v5 = (void *)(*(void *)(a2 + 168) + i);
      uint64_t v6 = (void *)(*(void *)(a1 + 168) + i);
      BlueFin::GlSetBase::operator=((uint64_t)v6 - 12, (uint64_t)v5 - 12);
      *uint64_t v6 = *v5;
    }
  }
  return a1;
}

uint64_t BlueFin::GlPeAlmMgr::GlPeAlmMgr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,unsigned int a49,unsigned __int8 a50,unsigned int a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  a58 = *MEMORY[0x263EF8340];
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = "ALM";
  *(void *)(a1 + 432) = a1 + 96;
  *(void *)(a1 + 440) = a2;
  *(void *)(a1 + 448) = a3;
  *(void *)(a1 + 456) = a4;
  long long v59 = (void *)(a1 + 26480);
  *(void *)(a1 + 464) = a5;
  *(void *)(a1 + 4064) = a1 + 480;
  *(void *)(a1 + 5216) = a1 + 4096;
  *(void *)(a1 + 7936) = a1 + 5248;
  *(void *)(a1 + 17216) = a1 + 16256;
  *(void *)(a1 + 19376) = a1 + 17248;
  *(void *)(a1 + 26448) = a1 + 19392;
  *(void *)(a1 + 26456) = &unk_270EBF8F8;
  *(void *)(a1 + 26484) = 0;
  uint64_t v60 = a1 + 34688;
  *(void *)(a1 + 26464) = a1;
  *(void *)(a1 + 26472) = a1 + 26484;
  *(void *)(a1 + 26508) = 0;
  *(unsigned char *)(a1 + 26480) = 2;
  *(void *)(a1 + 26496) = a1 + 26508;
  *(unsigned char *)(a1 + 26504) = 2;
  *(void *)(a1 + 26520) = &unk_270EBF920;
  *(void *)(a1 + 26528) = a1;
  *(void *)(a1 + 34624) = a1 + 26560;
  *(void *)(a1 + 34632) = a1 + 30592;
  *(void *)(a1 + 34700) = 0;
  *(void *)(a1 + 34688) = a1 + 34700;
  *(unsigned char *)(a1 + 34696) = 2;
  *(void *)(a1 + 36288) = a1 + 34720;
  *(void *)(a1 + 36296) = 0;
  *(void *)(a1 + 36704) = a1 + 36320;
  *(void *)(a1 + 36720) = a1 + 36732;
  *(unsigned char *)(a1 + 36728) = 8;
  *(_OWORD *)(a1 + 36748) = 0u;
  *(void *)(a1 + 36960) = a1 + 36768;
  *(_OWORD *)(a1 + 36996) = 0u;
  *(_OWORD *)(a1 + 36928) = 0u;
  *(_OWORD *)(a1 + 36940) = 0u;
  *(_OWORD *)(a1 + 36980) = 0u;
  *(_OWORD *)(a1 + 36732) = 0u;
  *(void *)(a1 + 36968) = a1 + 36980;
  *(unsigned char *)(a1 + 36976) = 8;
  *(_OWORD *)(a1 + 36768) = 0u;
  *(_OWORD *)(a1 + 36784) = 0u;
  *(_OWORD *)(a1 + 36800) = 0u;
  *(_OWORD *)(a1 + 36816) = 0u;
  *(_OWORD *)(a1 + 36832) = 0u;
  *(_OWORD *)(a1 + 36848) = 0u;
  *(_OWORD *)(a1 + 36864) = 0u;
  *(_OWORD *)(a1 + 36880) = 0u;
  *(_OWORD *)(a1 + 36896) = 0u;
  *(_OWORD *)(a1 + 36912) = 0u;
  *(unsigned char *)(a1 + 37024) = 0;
  *(_OWORD *)(a1 + 37044) = 0u;
  *(void *)(a1 + 37032) = a1 + 37044;
  *(unsigned char *)(a1 + 37040) = 8;
  *(_OWORD *)(a1 + 37060) = 0u;
  *(_DWORD *)(a1 + 7944) = -7200001;
  bzero((void *)(a1 + 7948), 0x1B12uLL);
  bzero((void *)(a1 + 14880), 0x55CuLL);
  for (uint64_t i = 108; i != 3692; i += 112)
  {
    long long v62 = (unsigned char *)(*(void *)(a1 + 4064) + i);
    *((_DWORD *)v62 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 7;
    *long long v62 = 0;
    *((_DWORD *)v62 - 27) = -65536;
    *(void *)(v62 - 100) = 0;
    *((_DWORD *)v62 - 23) = 0;
    *(_OWORD *)(v62 - 84) = 0uLL;
    *(_OWORD *)(v62 - 68) = 0uLL;
    *(_OWORD *)(v62 - 52) = 0uLL;
    *(_OWORD *)(v62 - 36) = 0uLL;
    *((_WORD *)v62 - 10) = 0;
    *((_DWORD *)v62 - 4) = -1;
    *(v62 - 12) = 0;
  }
  for (uint64_t j = 108; j != 1228; j += 112)
  {
    long long v64 = (unsigned char *)(*(void *)(a1 + 5216) + j);
    *((_DWORD *)v64 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 7;
    *long long v64 = 0;
    *((_DWORD *)v64 - 27) = -65536;
    *(void *)(v64 - 100) = 0;
    *((_DWORD *)v64 - 23) = 0;
    *(_OWORD *)(v64 - 84) = 0uLL;
    *(_OWORD *)(v64 - 68) = 0uLL;
    *(_OWORD *)(v64 - 52) = 0uLL;
    *(_OWORD *)(v64 - 36) = 0uLL;
    *((_WORD *)v64 - 10) = 0;
    *((_DWORD *)v64 - 4) = -1;
    *(v64 - 12) = 0;
  }
  for (uint64_t k = 0; k != 960; k += 40)
  {
    uint64_t v66 = *(void *)(a1 + 17216) + k;
    *(void *)(v66 + 32) = 0;
    *(_OWORD *)uint64_t v66 = 0uLL;
    *(_OWORD *)(v66 + 16) = 0uLL;
  }
  for (uint64_t m = 108; m != 2796; m += 112)
  {
    uint64_t v68 = (unsigned char *)(*(void *)(a1 + 7936) + m);
    *((_DWORD *)v68 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 7;
    *uint64_t v68 = 0;
    *((_DWORD *)v68 - 27) = -65536;
    *(void *)(v68 - 100) = 0;
    *((_DWORD *)v68 - 23) = 0;
    *(_OWORD *)(v68 - 84) = 0uLL;
    *(_OWORD *)(v68 - 68) = 0uLL;
    *(_OWORD *)(v68 - 52) = 0uLL;
    *(_OWORD *)(v68 - 36) = 0uLL;
    *((_WORD *)v68 - 10) = 0;
    *((_DWORD *)v68 - 4) = -1;
    *(v68 - 12) = 0;
  }
  for (uint64_t n = 108; n != 2236; n += 112)
  {
    unint64_t v70 = (unsigned char *)(*(void *)(a1 + 19376) + n);
    *((_DWORD *)v70 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 7;
    *unint64_t v70 = 0;
    *((_DWORD *)v70 - 27) = -65536;
    *(void *)(v70 - 100) = 0;
    *((_DWORD *)v70 - 23) = 0;
    *(_OWORD *)(v70 - 84) = 0uLL;
    *(_OWORD *)(v70 - 68) = 0uLL;
    *(_OWORD *)(v70 - 52) = 0uLL;
    *(_OWORD *)(v70 - 36) = 0uLL;
    *((_WORD *)v70 - 10) = 0;
    *((_DWORD *)v70 - 4) = -1;
    *(v70 - 12) = 0;
  }
  uint64_t v71 = 63;
  uint64_t v72 = 108;
  do
  {
    long long v73 = (unsigned char *)(*(void *)(a1 + 26448) + v72);
    *((_DWORD *)v73 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 7;
    *long long v73 = 0;
    *((_DWORD *)v73 - 27) = -65536;
    *(void *)(v73 - 100) = 0;
    *((_DWORD *)v73 - 23) = 0;
    *(_OWORD *)(v73 - 84) = 0uLL;
    *(_OWORD *)(v73 - 68) = 0uLL;
    *(_OWORD *)(v73 - 52) = 0uLL;
    *(_OWORD *)(v73 - 36) = 0uLL;
    *((_WORD *)v73 - 10) = 0;
    *((_DWORD *)v73 - 4) = -1;
    v72 += 112;
    *(v73 - 12) = 0;
    --v71;
  }
  while (v71);
  for (iuint64_t i = 108; ii != 4140; ii += 112)
  {
    uint64_t v75 = (unsigned char *)(v59[1018] + ii);
    *((_DWORD *)v75 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 7;
    *uint64_t v75 = 0;
    *((_DWORD *)v75 - 27) = -65536;
    *(void *)(v75 - 100) = 0;
    *((_DWORD *)v75 - 23) = 0;
    *(_OWORD *)(v75 - 84) = 0uLL;
    *(_OWORD *)(v75 - 68) = 0uLL;
    *(_OWORD *)(v75 - 52) = 0uLL;
    *(_OWORD *)(v75 - 36) = 0uLL;
    *((_WORD *)v75 - 10) = 0;
    *((_DWORD *)v75 - 4) = -1;
    *(v75 - 12) = 0;
  }
  for (juint64_t j = 108; jj != 4140; jj += 112)
  {
    long long v77 = (unsigned char *)(v59[1019] + jj);
    *((_DWORD *)v77 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 7;
    *long long v77 = 0;
    *((_DWORD *)v77 - 27) = -65536;
    *(void *)(v77 - 100) = 0;
    *((_DWORD *)v77 - 23) = 0;
    *(_OWORD *)(v77 - 84) = 0uLL;
    *(_OWORD *)(v77 - 68) = 0uLL;
    *(_OWORD *)(v77 - 52) = 0uLL;
    *(_OWORD *)(v77 - 36) = 0uLL;
    *((_WORD *)v77 - 10) = 0;
    *((_DWORD *)v77 - 4) = -1;
    *(v77 - 12) = 0;
  }
  for (kuint64_t k = 36; kk != 372; kk += 48)
  {
    uint64_t v79 = (void *)(*(void *)(a1 + 432) + kk);
    *(v79 - 3) = 0;
    *(void *)((char *)v79 - 36) = v79 - 3;
    *((unsigned char *)v79 - 28) = 2;
    *(void *)((char *)v79 - 12) = v79;
    *((unsigned char *)v79 - 4) = 2;
    *uint64_t v79 = 0;
  }
  for (muint64_t m = 0; mm != 384; mm += 64)
  {
    uint64_t v81 = *(void *)(v60 + 2016) + mm;
    *(void *)(v81 + 8) = v81;
    *(void *)(v81 + 16) = 0;
    *(void *)(v81 + 24) = 0;
    *(void *)(v81 + 32) = 0;
    *(unsigned char *)(v81 + 40) = 0;
  }
  BlueFin::GlPeAlmMgr::Clear((BlueFin::GlPeAlmMgr *)a1);
  v59[1020] = 0xFFFCFFFDFFFEFFFFLL;
  *(void *)(a1 + 34648) = 0;
  *(_WORD *)(a1 + 34656) = 0;
  *(void *)(a1 + 34660) = -1;
  *(void *)(a1 + 34668) = -1;
  *(_WORD *)(v60 + 24) = 0;
  v59[1025] = 0;
  bzero(*(void **)v60, ((4 * *(unsigned __int8 *)(v60 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  for (nuint64_t n = 0; nn != 168; nn += 24)
  {
    uint64_t v83 = (char *)&v102 + nn;
    *(void *)&v104[nn] = 0;
    *(void *)uint64_t v83 = &v104[nn];
    v83[8] = 2;
  }
  for (unsigned int i1 = 0; i1 != 7; ++i1)
    BlueFin::GlGnssSet::SetAll((uint64_t)&v102, i1);
  BlueFin::GlGnssSetIterator::GlGnssSetIterator((BlueFin::GlGnssSetIterator *)&a25, (const BlueFin::GlGnssSet *)&v102);
  unsigned int v85 = a49;
  BOOL v86 = a49 == 6;
  for (int i2 = a50; a49 != 6 || a50 != 14; int i2 = a50)
  {
    a51 = v85;
    a52 = i2;
    unsigned int v100 = v85;
    char v101 = i2;
    DefaultAluint64_t m = BlueFin::GlPeAlmMgr::GetDefaultAlm(&v100);
    if (DefaultAlm)
    {
      int v90 = *(_DWORD *)DefaultAlm;
      uint64_t v91 = *((void *)DefaultAlm + 1);
      int v92 = *((_DWORD *)DefaultAlm + 4);
      long long v93 = *(_OWORD *)(DefaultAlm + 12);
      long long v94 = *(_OWORD *)(DefaultAlm + 20);
      uint64_t v102 = &unk_270EBF948;
      int v103 = v90;
      uint64_t v105 = v91;
      LODWORD(v106) = v92;
      long long v107 = v93;
      long long vars0 = v94;
      if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
        BlueFin::GlPeAlmanacData::SerializeImpl();
      }
      uint64_t v95 = "BDS";
      uint64_t v96 = "GPS";
      switch(v85)
      {
        case 0u:
          break;
        case 1u:
          uint64_t v96 = "SBAS";
          break;
        case 2u:
          uint64_t v96 = "GLNS";
          break;
        case 3u:
          uint64_t v96 = "QZSS";
          break;
        case 4u:
          goto LABEL_40;
        default:
          uint64_t v97 = "<->";
          if (v86) {
            uint64_t v97 = "NIC";
          }
          uint64_t v95 = "GAL";
          if (v85 != 5) {
            uint64_t v95 = v97;
          }
LABEL_40:
          uint64_t v96 = v95;
          break;
      }
      GlCustomLog(14, "Serialize Hardcoded Almanac for:%s %02d\n", v96, i2);
    }
    BlueFin::GlGnssSetIterator::operator++((uint64_t)&a25);
    unsigned int v85 = a49;
    BOOL v86 = a49 == 6;
  }
  return a1;
}

void BlueFin::GlPeAlmMgr::Clear(BlueFin::GlPeAlmMgr *this)
{
  uint64_t v2 = 0;
  uint64_t v3 = (char *)this + 36712;
  uint64_t v4 = (unsigned __int8 *)this + 26480;
  uint64_t v5 = *((void *)this + 54);
  do
  {
    bzero(*(void **)(v5 + v2 + 24), ((4 * *(unsigned __int8 *)(v5 + v2 + 32) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    bzero(*(void **)(v5 + v2), ((4 * *(unsigned __int8 *)(v5 + v2 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    v2 += 48;
  }
  while (v2 != 336);
  *uint64_t v3 = 0;
  bzero(*((void **)this + 3309), ((4 * *v4 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  uint64_t v6 = (void *)*((void *)this + 3312);
  size_t v7 = ((4 * v4[24] + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4;

  bzero(v6, v7);
}

uint64_t BlueFin::GlPeLtoMgr::deserializeLtoIono(BlueFin::GlPeLtoMgr *this, BlueFin::GlSysLogEntry *a2)
{
  uint64_t v8 = &unk_270EC1590;
  uint64_t v9 = 7;
  uint64_t v10 = 0;
  uint64_t result = BlueFin::GlPeLtoIonoDataInterface::Deserialize((BlueFin::GlPeLtoIonoDataInterface *)&v8, a2);
  if (result)
  {
    if (v9 > 6) {
      uint64_t v4 = "INV";
    }
    else {
      uint64_t v4 = off_2655DF758[(int)v9];
    }
    GlCustomLog(14, "LtoMgr: read LTO (%s) IONO from NVMEM!\n", v4);
    if (v9 == 5)
    {
      int v7 = HIDWORD(v9);
      GlCustomLog(15, "GAL IONO(%s): ", "LTO");
      GlCustomLog(15, "%d, %d, %d\n", (unsigned __int16)v10, SWORD1(v10), SWORD2(v10));
      *((_DWORD *)this + 5017) = v10;
      *((_WORD *)this + 10036) = WORD2(v10);
      *((_DWORD *)this + 5019) = v7;
      int v6 = 128;
      goto LABEL_9;
    }
    if (!v9)
    {
      int v5 = HIDWORD(v9);
      BlueFin::GlPeIonoMgr::SetLtoIono(*((void *)this + 10) + 71232, (char *)&v10, HIDWORD(v9), 0);
      *((void *)this + 2507) = v10;
      *((_DWORD *)this + 5016) = v5;
      int v6 = 64;
LABEL_9:
      *((_DWORD *)this + 6616) |= v6;
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t BlueFin::GlPeLtoIonoDataInterface::Deserialize(BlueFin::GlPeLtoIonoDataInterface *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 124 || *((unsigned char *)a2 + 12) != 1) {
    return 0;
  }
  *((_DWORD *)this + 2) = BlueFin::GlImplGnss::m_aucImplGnssTable[BlueFin::GlSysLogEntry::GetU8(a2)];
  *((_DWORD *)this + 3) = BlueFin::GlSysLogEntry::GetU32(a2);
  int v5 = *((_DWORD *)this + 2);
  if (v5 == 5)
  {
    *((_WORD *)this + 8) = BlueFin::GlSysLogEntry::GetS16(a2);
    *((_WORD *)this + 9) = BlueFin::GlSysLogEntry::GetS16(a2);
    *((_WORD *)this + 10) = BlueFin::GlSysLogEntry::GetS16(a2);
  }
  else
  {
    if (v5) {
      return 0;
    }
    *((unsigned char *)this + 16) = BlueFin::GlSysLogEntry::GetS8(a2);
    *((unsigned char *)this + 17) = BlueFin::GlSysLogEntry::GetS8(a2);
    *((unsigned char *)this + 18) = BlueFin::GlSysLogEntry::GetS8(a2);
    *((unsigned char *)this + 19) = BlueFin::GlSysLogEntry::GetS8(a2);
    *((unsigned char *)this + 20) = BlueFin::GlSysLogEntry::GetS8(a2);
    *((unsigned char *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = BlueFin::GlSysLogEntry::GetS8(a2);
    *((unsigned char *)this + 22) = BlueFin::GlSysLogEntry::GetS8(a2);
    *((unsigned char *)this + 23) = BlueFin::GlSysLogEntry::GetS8(a2);
  }
  return 1;
}

uint64_t BlueFin::GlPeIonoMgr::SetLtoIono(uint64_t a1, char *a2, unsigned int a3, int a4)
{
  if (*(_DWORD *)(a1 + 120) && *(_DWORD *)(a1 + 124) > a3)
  {
    int v7 = "LTO";
    if (a4) {
      int v7 = "RTO";
    }
    return GlCustomLog(15, "current GPS IONO is newer, no update from %s.\n", v7);
  }
  else
  {
    uint64_t v9 = a1 + 64;
    uint64_t v10 = "LTO";
    if (a4) {
      uint64_t v10 = "RTO";
    }
    GlCustomLog(15, "IONO(%s): ", v10);
    GlCustomLog(15, "%d, %d, %d, %d, ", *a2, a2[1], a2[2], a2[3]);
    GlCustomLog(15, "%d, %d, %d, %d  ", a2[4], a2[5], a2[6], a2[7]);
    GlCustomLog(15, "\n");
    double v11 = (double)a2[1] * 0.0000000074505806;
    *(double *)&long long v15 = (double)*a2 * 9.31322575e-10;
    *((double *)&v15 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v11;
    double v12 = (double)a2[2] * 0.0000000596046448;
    double v13 = (double)a2[3];
    uint64_t v14 = &unk_270EC13F0;
    *(double *)&long long v16 = v12;
    *((double *)&v16 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v13 * 0.0000000596046448;
    LODWORD(v12) = *((_DWORD *)a2 + 1);
    uint32x4_t v17 = vshlq_u32((uint32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&v12)), (uint32x4_t)xmmword_263BB8A30);
    int v18 = 5;
    unsigned int v19 = a3;
    uint64_t result = BlueFin::GlPeIonoModel::operator!=((uint64_t)&v14, a1 + 64);
    *(unsigned char *)(a1 + 48504) = result;
    *(_OWORD *)(a1 + 72) = v15;
    *(_OWORD *)(a1 + 88) = v16;
    *(uint32x4_t *)(a1 + 104) = v17;
    *(_DWORD *)(a1 + 120) = 5;
    *(_DWORD *)(a1 + 124) = a3;
    if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
      return (*(uint64_t (**)(uint64_t, void, void))(*(void *)v9 + 24))(a1 + 64, 0, 0);
    }
  }
  return result;
}

BOOL BlueFin::GlPeIonoModel::operator!=(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56)
    || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60)
    || *(double *)(a1 + 8) != *(double *)(a2 + 8)
    || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
  {
    return 1;
  }
  uint64_t v2 = 11;
  uint64_t v3 = 16;
  do
  {
    uint64_t v4 = v2;
    if (v2 == 14) {
      break;
    }
    if (*(double *)(a1 + v3) != *(double *)(a2 + v3)) {
      break;
    }
    int v5 = *(_DWORD *)(a1 + 4 * v2);
    int v6 = *(_DWORD *)(a2 + 4 * v2++);
    v3 += 8;
  }
  while (v5 == v6);
  return (unint64_t)(v4 - 11) < 3;
}

void BlueFin::GlMeSrdReceiverParametersProgrammer::ProgramResourceManager(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 80))(a2);
  v21[0] = 0;
  v21[1] = 0;
  char v22 = 0;
  __int16 v23 = 1;
  uint64_t v24 = v5;
  int v25 = 0;
  __int16 v26 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, 1);
  if (*(unsigned char *)(a1 + 103)) {
    goto LABEL_30;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a3 + 16))(a3) != 872480775
    && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 16))(a3) != 872611847
    && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 16))(a3) != 889126919
    && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 16))(a3) != 939589639
    && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 16))(a3) != 939720711
    && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 16))(a3) != 956235783
    && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 16))(a3) != 805371913
    && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 16))(a3) != 1006829577
    && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 16))(a3) != 805502985
    && ((*(uint64_t (**)(uint64_t))(*(void *)a3 + 16))(a3) & 0xF000FFFF) != 0x3000000F
    && ((*(uint64_t (**)(uint64_t))(*(void *)a3 + 16))(a3) & 0xF000FFFF) != 0x30000011
    && ((*(uint64_t (**)(uint64_t))(*(void *)a3 + 16))(a3) & 0xF000FFFF) != 0x30000013
    && ((*(uint64_t (**)(uint64_t))(*(void *)a3 + 16))(a3) & 0xF000FFFF) != 0x30000015)
  {
    if (!*(unsigned char *)(a1 + 103) && !(*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3))
    {
      *(void *)(a1 + 30) = 0x1204120F6E6ELL;
      *(void *)(a1 + 25) = 0xF6E6E6E6E013903;
      goto LABEL_22;
    }
LABEL_30:
    DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 1765, "ProgramResourceManager", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_receiver_parameters_programmer.cpp", 1765, "0");
  }
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 808))(*(void *)(a1 + 16))) {
    char v6 = 5;
  }
  else {
    char v6 = 3;
  }
  char v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 1096))(*(void *)(a1 + 16));
  char v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 1104))(*(void *)(a1 + 16));
  char v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 1112))(*(void *)(a1 + 16));
  char v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 1120))(*(void *)(a1 + 16));
  char v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 1128))(*(void *)(a1 + 16));
  char v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 1136))(*(void *)(a1 + 16));
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 1088))(*(void *)(a1 + 16))) {
    __int16 v13 = 0x4000;
  }
  else {
    __int16 v13 = 0;
  }
  *(unsigned char *)(a1 + 25) = v6;
  *(_WORD *)(a1 + 26) = 270;
  *(_DWORD *)(a1 + 28) = 1819044972;
  *(_DWORD *)(a1 + 32) = 134744079;
  *(_WORD *)(a1 + 36) = v7 & 3 | (4 * (v8 & 3)) & 0xCF | (16 * (v9 & 3)) | ((v10 & 7) << 8) & 0xC7FF | ((v11 & 7) << 11) | ((v12 & 3) << 6) | v13;
LABEL_22:
  *(unsigned char *)(a1 + 24) = 1;
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 48))(v24);
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 56))(v14);
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v15 + 24))(v15, v21, a1 + 25);
  RmPivot = BlueFin::GlMeSrdReceiverParametersProgrammer::GetRmPivot(a1, a3);
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 48))(v24);
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 56))(v17);
  (*(void (**)(uint64_t, void *, void *))(*(void *)v18 + 48))(v18, v21, RmPivot);
  if ((((*(uint64_t (**)(void))(**(void **)(a1 + 16) + 184))(*(void *)(a1 + 16)) & 0xF000FFFE) == 0x30000012
     || ((*(uint64_t (**)(void))(**(void **)(a1 + 16) + 184))(*(void *)(a1 + 16)) & 0xF000FFFE) == 0x30000014)
    && ((*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))(*(void *)(a1 + 16)) & 1) == 0)
  {
    int v27 = 84215085;
    __int16 v28 = 1290;
    char v29 = 10;
    int v30 = 0;
    char v31 = 0;
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 48))(v24);
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 48))(v19);
    (*(void (**)(uint64_t, void *, int *))(*(void *)v20 + 160))(v20, v21, &v27);
  }
  BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v21);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v21);
}

void sub_2639B9F28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

uint64_t BlueFin::EswRpcEnc::GetEswRmRpcIf(BlueFin::EswRpcEnc *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (!v2)
  {
    BlueFin::EswRpcEnc::MakeEswRpcEncoderImp(this);
    uint64_t v2 = *((void *)this + 1);
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)v2 + 56);

  return v3();
}

uint64_t BlueFin::MinnowEswRpcEncoderImp::GetEswRmRpcIf(BlueFin::MinnowEswRpcEncoderImp *this)
{
  return (uint64_t)this + 88;
}

uint64_t BlueFin::MinnowEswRpcJdEncImp::esw_jd_rpc_tm_set_iq_dump_buffer(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  char v6 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v11, v12, 1800, v6);
  BlueFin::GlStream::PutU08(v11, *a3);
  for (uint64_t i = 1; i != 6; ++i)
    BlueFin::GlStream::PutU08(v11, a3[i]);
  BlueFin::GlStream::PutU08(v11, a3[6]);
  BlueFin::GlStream::PutU08(v11, a3[7]);
  BlueFin::GlStream::PutU08(v11, a3[8]);
  BlueFin::GlStream::PutU08(v11, a3[9]);
  BlueFin::GlStream::PutU08(v11, a3[10]);
  BlueFin::GlStream::PutU08(v11, a3[11]);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v11);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)a2, 4, 0x13u, v12, Offset);
  unsigned int v9 = *(unsigned __int16 *)(a2 + 32);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v9)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_minnow.cpp", 483, "esw_jd_rpc_tm_set_iq_dump_buffer", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_minnow.cpp", 483, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::CarpEswRpcRmEncImp::esw_rm_rpc_set_search_pivot(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  char v6 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v13, v14, 1800, v6);
  BlueFin::GlStream::PutU08(v13, *a3);
  BlueFin::GlStream::PutU08(v13, 0);
  BlueFin::GlStream::PutU08(v13, 0);
  BlueFin::GlStream::PutU08(v13, 0);
  BlueFin::GlStream::PutU08(v13, a3[1]);
  for (uint64_t i = 2; i != 22; ++i)
    BlueFin::GlStream::PutU08(v13, a3[i]);
  BlueFin::GlStream::PutU08(v13, 0);
  BlueFin::GlStream::PutU08(v13, 0);
  BlueFin::GlStream::PutU08(v13, 0);
  BlueFin::GlStream::PutU08(v13, a3[22]);
  uint64_t v8 = 0;
  unsigned int v9 = a3 + 23;
  do
    BlueFin::GlStream::PutU08(v13, v9[v8++]);
  while (v8 != 20);
  BlueFin::GlStream::PutU08(v13, 0);
  BlueFin::GlStream::PutU08(v13, 0);
  BlueFin::GlStream::PutU08(v13, 0);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v13);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)a2, 5, 4u, v14, Offset);
  unsigned int v11 = *(unsigned __int16 *)(a2 + 32);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v11)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 1410, "esw_rm_rpc_set_search_pivot", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", 1410, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::GlMeSrdAsicConfig::IsMiniMe(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 553);
}

uint64_t BlueFin::MinnowEswRpcRmEncImp::esw_rm_rpc_set_limits(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  char v6 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v11, v12, 1800, v6);
  BlueFin::GlStream::PutU08(v11, *(unsigned char *)a3);
  BlueFin::GlStream::PutU08(v11, *(unsigned char *)(a3 + 1));
  BlueFin::GlStream::PutU08(v11, *(unsigned char *)(a3 + 2));
  for (uint64_t i = 0; i != 4; ++i)
    BlueFin::GlStream::PutU08(v11, *(unsigned char *)(a3 + 3 + i));
  BlueFin::GlStream::PutU08(v11, *(unsigned char *)(a3 + 7));
  BlueFin::GlStream::PutU08(v11, *(unsigned char *)(a3 + 8));
  BlueFin::GlStream::PutU08(v11, *(unsigned char *)(a3 + 9));
  BlueFin::GlStream::PutU08(v11, *(unsigned char *)(a3 + 10));
  BlueFin::GlStream::PutU08(v11, 0);
  BlueFin::GlStream::CarpPutBits(v11, *(_WORD *)(a3 + 11) & 3, 2u, 8u);
  BlueFin::GlStream::CarpPutBits(v11, (*(unsigned __int16 *)(a3 + 11) >> 2) & 3, 2u, 8u);
  BlueFin::GlStream::CarpPutBits(v11, (*(unsigned __int16 *)(a3 + 11) >> 4) & 3, 2u, 8u);
  BlueFin::GlStream::CarpPutBits(v11, *(_WORD *)(a3 + 11) >> 6, 2u, 8u);
  BlueFin::GlStream::CarpPutBits(v11, *(unsigned char *)(a3 + 12) & 7, 3u, 8u);
  BlueFin::GlStream::CarpPutBits(v11, (*(unsigned __int16 *)(a3 + 11) >> 11) & 7, 3u, 8u);
  BlueFin::GlStream::CarpPutBits(v11, (*(unsigned __int16 *)(a3 + 11) >> 14) & 1, 1u, 8u);
  BlueFin::GlStream::CarpPutBits(v11, 0, 1u, 8u);
  BlueFin::GlStream::PutU08(v11, 0);
  BlueFin::GlStream::PutU08(v11, 0);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v11);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)a2, 5, 1u, v12, Offset);
  unsigned int v9 = *(unsigned __int16 *)(a2 + 32);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v9)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_minnow.cpp", 319, "esw_rm_rpc_set_limits", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_minnow.cpp", 319, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetDcCpuIdleModeSetting(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned int *)this + 542);
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetCpuActiveModeSetting(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned int *)this + 540);
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetCpuIdleModeSetting(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned int *)this + 541);
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetMtrkXcorrOverride(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 2144);
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetMtrkModeSetting(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned int *)this + 537);
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetCopModeSetting(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned int *)this + 538);
}

uint64_t BlueFin::GlMeSrdCtrlSm::ReportSupportedFeatures(BlueFin::GlMeSrdCtrlSm *this)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  *(void *)char v10 = 0;
  int v11 = 0;
  int v12 = 0;
  __int16 v19 = 0;
  long long v18 = 0u;
  long long v17 = 0u;
  uint64_t v20 = &v22;
  char v21 = 2;
  uint64_t v22 = 0;
  __int16 v23 = 0;
  char v25 = 0;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v16 = 0;
  *(_DWORD *)&v10[7] = 0;
  memset(v24, 0, 13);
  __int16 v2 = (*(uint64_t (**)(void))(**((void **)this + 17) + 80))(*((void *)this + 17));
  *(void *)char v10 = (unsigned __int16)((*(uint64_t (**)(void))(**((void **)this + 17) + 72))(*((void *)this + 17))
                                    + v2);
  *(_WORD *)&_OWORD v10[2] = 1;
  if ((*(unsigned int (**)(void))(**((void **)this + 17) + 464))()) {
    *(_WORD *)&v10[2] |= 2u;
  }
  if ((*(unsigned int (**)(void, uint64_t))(**((void **)this + 17) + 464))(*((void *)this + 17), 2)) {
    *(_WORD *)&v10[2] |= 4u;
  }
  uint64_t v3 = (unsigned char *)*((void *)this + 17);
  if (!v3[268])
  {
    DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 1121, "ReportSupportedFeatures", (char)"m_rAsicConfig.GetGlnsDelaysValid()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_ctrl_sm.cpp", 1121, "m_rAsicConfig.GetGlnsDelaysValid()");
  }
  if ((*(unsigned int (**)(unsigned char *, uint64_t))(*(void *)v3 + 464))(v3, 3)) {
    *(_WORD *)&v10[2] |= 8u;
  }
  if ((*(unsigned int (**)(void, uint64_t))(**((void **)this + 17) + 464))(*((void *)this + 17), 6)) {
    *(_WORD *)&v10[2] |= 0x80u;
  }
  if ((*(unsigned int (**)(void, uint64_t))(**((void **)this + 17) + 464))(*((void *)this + 17), 4)) {
    *(_WORD *)&v10[2] |= 0x20u;
  }
  (*(void (**)(void, unsigned char *))(**((void **)this + 17) + 480))(*((void *)this + 17), &v10[4]);
  if (((*(uint64_t (**)(void))(**((void **)this + 17) + 832))() & 1) == 0) {
    unsigned int v10[8] = 1;
  }
  if ((*(unsigned int (**)(void, uint64_t))(**((void **)this + 17) + 464))(*((void *)this + 17), 5)) {
    *(_WORD *)&v10[2] |= 0x40u;
  }
  LODWORD(v18) = (*(uint64_t (**)(void))(**((void **)this + 17) + 184))(*((void *)this + 17));
  DWORD1(v18) = (*(uint64_t (**)(void))(**((void **)this + 17) + 16))(*((void *)this + 17));
  DWORD2(v18) = (*(uint64_t (**)(void))(**((void **)this + 17) + 912))();
  HIDWORD(v18) = (*(uint64_t (**)(void))(**((void **)this + 17) + 152))(*((void *)this + 17));
  uint64_t v4 = *((void *)this + 17);
  LOBYTE(v19) = *(unsigned char *)(v4 + 1416);
  unsigned char v24[12] = *(unsigned char *)(v4 + 2196);
  uint64_t v5 = v4 + 1616;
  BlueFin::GlSetBase::operator=((uint64_t)&v20, v4 + 1616);
  uint64_t v22 = *(void *)(v5 + 12);
  (*(void (**)(void))(**((void **)this + 17) + 1352))();
  (*(void (**)(void))(**((void **)this + 17) + 1336))();
  uint64_t v6 = *((void *)this + 17);
  int v7 = *(_DWORD *)(v6 + 332);
  int v11 = *(_DWORD *)(v6 + 272);
  int v12 = v7;
  long long v17 = *(_OWORD *)(v6 + 336);
  long long v8 = *(_OWORD *)(v6 + 292);
  long long v13 = *(_OWORD *)(v6 + 276);
  long long v14 = v8;
  long long v15 = *(_OWORD *)(v6 + 308);
  uint64_t v16 = *(void *)(v6 + 324);
  HIBYTE(v19) = (*(uint64_t (**)(void))(*(void *)v6 + 1016))();
  v24[13] = (*(uint64_t (**)(void))(**((void **)this + 17) + 712))();
  (*(void (**)(void))(**((void **)this + 17) + 1384))();
  char v25 = (*(uint64_t (**)(void))(**((void **)this + 17) + 600))();
  return (*(uint64_t (**)(void, unsigned char *))(**((void **)this + 20) + 96))(*((void *)this + 20), v10);
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetMaxNumParallelSnfs(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int16 *)this + 36);
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetSignalSupported(uint64_t this, unsigned __int8 *a2)
{
  for (uint64_t i = 0; i != 7; ++i)
    a2[i] = *(unsigned char *)(this + 1436 + i);
  return this;
}

BlueFin::GlDbgCodec *BlueFin::GlDbgPeIf::SetAsicCfg(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (!*((void *)result + 101))
  {
    BlueFin::GlDbgCodec::WriteStart(result, 4616);
    uint64_t v5 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5))
    {
      *((_DWORD *)v5 + 143) = 2;
      BlueFin::GlDbgCodec::Rvw(v5, a2);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 16) + 96))(*(void *)(a1 + 16), a2);
    BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 4616);
    uint64_t v6 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return (BlueFin::GlDbgCodec *)v6();
  }
  return result;
}

uint64_t BlueFin::GlMeSrdReceiverParametersProgrammer::ProgramCommonJobManagers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v15 = 16385;
  char v16 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 72))(a3);
  char v17 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 80))(a3);
  char v18 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 72))(a3);
  uint64_t v6 = (char *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId
     + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion;
  char v19 = v6[76];
  char v20 = v6[139];
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 48))(*(void *)(a2 + 24));
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 48))(v7);
  (*(void (**)(uint64_t, uint64_t, __int16 *))(*(void *)v8 + 32))(v8, a2, &v15);
  if (*(unsigned char *)(a1 + 103) || (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3))
  {
    long long v13 = "0";
    DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 1849, "ProgramCommonJobManagers", (char)"0");
    int v14 = 1849;
    goto LABEL_22;
  }
  *(_OWORD *)(a1 + 39) = xmmword_263BAFEC0;
  *(_OWORD *)(a1 + 55) = xmmword_263BAFED0;
  *(_OWORD *)(a1 + 7BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = xmmword_263BAFEE0;
  *(_WORD *)(a1 + 87) = 1792;
  *(_DWORD *)(a1 + 89) = 0;
  *(_WORD *)(a1 + 93) = 0;
  *(unsigned char *)(a1 + 95) = 8;
  *(_DWORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 100) = 256;
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 808))())
  {
    *(unsigned char *)(a1 + 44) = 4;
    *(unsigned char *)(a1 + 58) = 4;
    *(unsigned char *)(a1 + 65) = 4;
    *(unsigned char *)(a1 + 79) = 3;
    *(unsigned char *)(a1 + 86) = 3;
  }
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 1208))(*(void *)(a1 + 16))) {
    *(_WORD *)(a1 + 63) = 27756;
  }
  for (uint64_t i = 0; i != 63; i += 7)
  {
    if (v15 == 2)
    {
      if (*(unsigned __int8 *)(a1 + i + 39) - 7 >= 2)
      {
        if (*(unsigned char *)(a1 + i + 41))
        {
          if (*(unsigned __int8 *)(a1 + i + 41) < 0x1Cu) {
            goto LABEL_18;
          }
          long long v13 = "m_aotSmLimits[i].priority <= 27";
          DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 1915, "ProgramCommonJobManagers", (char)"m_aotSmLimits[i].priority <= 27");
          int v14 = 1915;
        }
        else
        {
          long long v13 = "m_aotSmLimits[i].priority >= 1";
          DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 1914, "ProgramCommonJobManagers", (char)"m_aotSmLimits[i].priority >= 1");
          int v14 = 1914;
        }
      }
      else
      {
        if (!*(unsigned char *)(a1 + i + 41)) {
          goto LABEL_18;
        }
        long long v13 = "m_aotSmLimits[i].priority == 0";
        DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 1919, "ProgramCommonJobManagers", (char)"m_aotSmLimits[i].priority == 0");
        int v14 = 1919;
      }
LABEL_22:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_receiver_parameters_programmer.cpp", v14, v13);
    }
    if (v15 != 1)
    {
      long long v13 = "0";
      DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 1923, "ProgramCommonJobManagers", (char)"0");
      int v14 = 1923;
      goto LABEL_22;
    }
    if (HIBYTE(v15) >= 3u && *(unsigned __int8 *)(a1 + i + 41) * HIBYTE(v15) >= 0x200)
    {
      long long v13 = "(GlIntU32) m_aotSmLimits[i].priority * otTmParam.hysteresis < 512";
      DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 1908, "ProgramCommonJobManagers", (char)"(GlIntU32) m_aotSmLimits[i].priority * otTmParam.hysteresis < 512");
      int v14 = 1908;
      goto LABEL_22;
    }
LABEL_18:
    uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 48))(*(void *)(a2 + 24));
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 48))(v10);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11 + 48))(v11, a2, a1 + i + 39);
    *(unsigned char *)(a1 + 38) = 1;
  }
  return result;
}

uint64_t BlueFin::CarpEswRpcJdEncImp::esw_jd_rpc_sm_set_all(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unsigned int v6 = *a3;
  if (v6 >= (*(unsigned int (**)(void))(**(void **)(a1 + 8) + 448))(*(void *)(a1 + 8)))
  {
    uint64_t v11 = "sm_param_ptr->sm_id < m_rAsicConfigIfc.GetMaxSearchManagerIndex()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 834, "esw_jd_rpc_sm_set_all", (char)"sm_param_ptr->sm_id < m_rAsicConfigIfc.GetMaxSearchManagerIndex()");
    int v12 = 834;
    goto LABEL_6;
  }
  char v7 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v13, v14, 1800, v7);
  BlueFin::GlStream::PutU08(v13, *a3);
  BlueFin::GlStream::PutU08(v13, 0);
  BlueFin::GlStream::PutU08(v13, a3[1]);
  BlueFin::GlStream::PutU08(v13, a3[2]);
  BlueFin::GlStream::PutU08(v13, a3[3]);
  BlueFin::GlStream::PutU08(v13, a3[4]);
  BlueFin::GlStream::PutU08(v13, a3[5]);
  BlueFin::GlStream::PutU08(v13, a3[6]);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v13);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)a2, 4, 4u, v14, Offset);
  unsigned int v9 = *(unsigned __int16 *)(a2 + 32);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v9)
  {
    uint64_t v11 = "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 853, "esw_jd_rpc_sm_set_all", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    int v12 = 853;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", v12, v11);
  }
  return result;
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetMaxNumParallelTrks(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int16 *)this + 35);
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetWideAcquisitionFlag(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 2216);
}

void BlueFin::GlMeSrdAcqMgrSm::UpdateResources(const void **this)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  uint64_t v66 = (int *)v68;
  char v67 = 8;
  v68[0] = xmmword_263BAA89C;
  v68[1] = unk_263BAA8AC;
  uint64_t v63 = (int *)v65;
  char v64 = 8;
  v65[0] = xmmword_263BAA8BC;
  v65[1] = unk_263BAA8CC;
  uint64_t v60 = (int *)v62;
  char v61 = 8;
  v62[0] = xmmword_263BAA8DC;
  v62[1] = unk_263BAA8EC;
  uint64_t v52 = &v54;
  char v53 = 8;
  long long v54 = BlueFin::GlSvIdSet::csm_aulGlSvIdSet[0];
  long long v55 = *(_OWORD *)algn_263BAA84C;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v56, (unsigned int *)&v58, 8u, (const void **)&v52);
  long long v69 = (int *)v70 + 1;
  LOBYTE(v70[0]) = 8;
  memset((char *)v70 + 4, 0, 32);
  BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v56, &v69, &v66);
  BlueFin::GlSetBase::operator=((uint64_t)&v56, (uint64_t)&v69);
  long long v58 = *(_OWORD *)((char *)v70 + 4);
  long long v59 = *(_OWORD *)((char *)&v70[2] + 4);
  uint64_t v1 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)v71, (unsigned int *)&v71[12], 8u, this + 1538);
  long long v69 = (int *)v70 + 1;
  LOBYTE(v70[0]) = 8;
  memset((char *)v70 + 4, 0, 32);
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v1, &v69, (int **)&v56);
  BlueFin::GlSetBase::operator=((uint64_t)v71, (uint64_t)&v69);
  unsigned int v2 = 0;
  *(_OWORD *)&v71[12] = *(_OWORD *)((char *)v70 + 4);
  *(_OWORD *)&v71[28] = *(_OWORD *)((char *)&v70[2] + 4);
  uint64_t v3 = (_DWORD *)(*(void *)v71 + 4 * v71[8] - 4);
  do
  {
    if (*v3)
    {
      unsigned int v4 = *v3 - (((*v3 >> 1) & 0x5B6DB6DB) + ((*v3 >> 2) & 0x9249249));
      unsigned int v2 = ((v4 + (v4 >> 3)) & 0xC71C71C7) + v2 - 63 * (((v4 + (v4 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    --v3;
  }
  while ((unint64_t)v3 >= *(void *)v71);
  uint64_t v52 = &v54;
  char v53 = 8;
  long long v54 = BlueFin::GlSvIdSet::csm_aulGlSvIdSet[0];
  long long v55 = *(_OWORD *)algn_263BAA84C;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v56, (unsigned int *)&v58, 8u, (const void **)&v52);
  long long v69 = (int *)v70 + 1;
  LOBYTE(v70[0]) = 8;
  memset((char *)v70 + 4, 0, 32);
  BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v56, &v69, &v66);
  BlueFin::GlSetBase::operator=((uint64_t)&v56, (uint64_t)&v69);
  long long v58 = *(_OWORD *)((char *)v70 + 4);
  long long v59 = *(_OWORD *)((char *)&v70[2] + 4);
  uint64_t v5 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)v71, (unsigned int *)&v71[12], 8u, this + 1577);
  long long v69 = (int *)v70 + 1;
  LOBYTE(v70[0]) = 8;
  memset((char *)v70 + 4, 0, 32);
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v5, &v69, (int **)&v56);
  BlueFin::GlSetBase::operator=((uint64_t)v71, (uint64_t)&v69);
  unsigned int v6 = 0;
  *(_OWORD *)&v71[12] = *(_OWORD *)((char *)v70 + 4);
  *(_OWORD *)&v71[28] = *(_OWORD *)((char *)&v70[2] + 4);
  char v7 = (_DWORD *)(*(void *)v71 + 4 * v71[8] - 4);
  do
  {
    if (*v7)
    {
      unsigned int v8 = *v7 - (((*v7 >> 1) & 0x5B6DB6DB) + ((*v7 >> 2) & 0x9249249));
      unsigned int v6 = ((v8 + (v8 >> 3)) & 0xC71C71C7) + v6 - 63 * (((v8 + (v8 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    --v7;
  }
  while ((unint64_t)v7 >= *(void *)v71);
  uint64_t v52 = &v54;
  char v53 = 8;
  long long v54 = BlueFin::GlSvIdSet::csm_aulGlSvIdSet[0];
  long long v55 = *(_OWORD *)algn_263BAA84C;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v56, (unsigned int *)&v58, 8u, (const void **)&v52);
  long long v69 = (int *)v70 + 1;
  LOBYTE(v70[0]) = 8;
  memset((char *)v70 + 4, 0, 32);
  BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v56, &v69, &v66);
  BlueFin::GlSetBase::operator=((uint64_t)&v56, (uint64_t)&v69);
  long long v58 = *(_OWORD *)((char *)v70 + 4);
  long long v59 = *(_OWORD *)((char *)&v70[2] + 4);
  unsigned int v9 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)v71, (unsigned int *)&v71[12], 8u, this + 1733);
  long long v69 = (int *)v70 + 1;
  LOBYTE(v70[0]) = 8;
  memset((char *)v70 + 4, 0, 32);
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v9, &v69, (int **)&v56);
  BlueFin::GlSetBase::operator=((uint64_t)v71, (uint64_t)&v69);
  unsigned int v10 = 0;
  *(_OWORD *)&v71[12] = *(_OWORD *)((char *)v70 + 4);
  *(_OWORD *)&v71[28] = *(_OWORD *)((char *)&v70[2] + 4);
  uint64_t v11 = (_DWORD *)(*(void *)v71 + 4 * v71[8] - 4);
  do
  {
    if (*v11)
    {
      unsigned int v12 = *v11 - (((*v11 >> 1) & 0x5B6DB6DB) + ((*v11 >> 2) & 0x9249249));
      unsigned int v10 = ((v12 + (v12 >> 3)) & 0xC71C71C7) + v10 - 63 * (((v12 + (v12 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    --v11;
  }
  while ((unint64_t)v11 >= *(void *)v71);
  uint64_t v56 = &v58;
  char v57 = 8;
  long long v58 = BlueFin::GlSvIdSet::csm_aulGlSvIdSet[0];
  long long v59 = *(_OWORD *)algn_263BAA84C;
  long long v13 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)v71, (unsigned int *)&v71[12], 8u, this + 1733);
  long long v69 = (int *)v70 + 1;
  LOBYTE(v70[0]) = 8;
  memset((char *)v70 + 4, 0, 32);
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v13, &v69, (int **)&v56);
  BlueFin::GlSetBase::operator=((uint64_t)v71, (uint64_t)&v69);
  *(_OWORD *)&v71[12] = *(_OWORD *)((char *)v70 + 4);
  *(_OWORD *)&v71[28] = *(_OWORD *)((char *)&v70[2] + 4);
  if (BlueFin::GlUtils::m_ucEnabled) {
    BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x4F);
  }
  int v14 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)v71, (unsigned int *)&v71[12], 8u, this + 1577);
  long long v69 = (int *)v70 + 1;
  LOBYTE(v70[0]) = 8;
  memset((char *)v70 + 4, 0, 32);
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v14, &v69, &v60);
  BlueFin::GlSetBase::operator=((uint64_t)v71, (uint64_t)&v69);
  unsigned int v15 = 0;
  unsigned int v50 = v10 + v6;
  *(_OWORD *)&v71[12] = *(_OWORD *)((char *)v70 + 4);
  *(_OWORD *)&v71[28] = *(_OWORD *)((char *)&v70[2] + 4);
  char v16 = (_DWORD *)(*(void *)v71 + 4 * v71[8] - 4);
  do
  {
    if (*v16)
    {
      unsigned int v17 = *v16 - (((*v16 >> 1) & 0x5B6DB6DB) + ((*v16 >> 2) & 0x9249249));
      unsigned int v15 = ((v17 + (v17 >> 3)) & 0xC71C71C7) + v15 - 63 * (((v17 + (v17 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    --v16;
  }
  while ((unint64_t)v16 >= *(void *)v71);
  char v18 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)v71, (unsigned int *)&v71[12], 8u, this + 1358);
  long long v69 = (int *)v70 + 1;
  LOBYTE(v70[0]) = 8;
  memset((char *)v70 + 4, 0, 32);
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v18, &v69, &v60);
  BlueFin::GlSetBase::operator=((uint64_t)v71, (uint64_t)&v69);
  unsigned int v19 = 0;
  *(_OWORD *)&v71[12] = *(_OWORD *)((char *)v70 + 4);
  *(_OWORD *)&v71[28] = *(_OWORD *)((char *)&v70[2] + 4);
  char v20 = (_DWORD *)(*(void *)v71 + 4 * v71[8] - 4);
  do
  {
    if (*v20)
    {
      unsigned int v21 = *v20 - (((*v20 >> 1) & 0x5B6DB6DB) + ((*v20 >> 2) & 0x9249249));
      unsigned int v19 = ((v21 + (v21 >> 3)) & 0xC71C71C7) + v19 - 63 * (((v21 + (v21 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    --v20;
  }
  while ((unint64_t)v20 >= *(void *)v71);
  uint64_t v22 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)v71, (unsigned int *)&v71[12], 8u, this + 1538);
  long long v69 = (int *)v70 + 1;
  LOBYTE(v70[0]) = 8;
  memset((char *)v70 + 4, 0, 32);
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v22, &v69, &v63);
  BlueFin::GlSetBase::operator=((uint64_t)v71, (uint64_t)&v69);
  unsigned int v23 = 0;
  *(_OWORD *)&v71[12] = *(_OWORD *)((char *)v70 + 4);
  *(_OWORD *)&v71[28] = *(_OWORD *)((char *)&v70[2] + 4);
  uint64_t v24 = (_DWORD *)(*(void *)v71 + 4 * v71[8] - 4);
  do
  {
    if (*v24)
    {
      unsigned int v25 = *v24 - (((*v24 >> 1) & 0x5B6DB6DB) + ((*v24 >> 2) & 0x9249249));
      unsigned int v23 = ((v25 + (v25 >> 3)) & 0xC71C71C7) + v23 - 63 * (((v25 + (v25 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    --v24;
  }
  while ((unint64_t)v24 >= *(void *)v71);
  *(_OWORD *)uint64_t v71 = xmmword_263BABE70;
  *(_OWORD *)&v71[16] = xmmword_263BABE80;
  *(_DWORD *)&v71[32] = 268435464;
  unsigned int v26 = *((_DWORD *)this + 6142);
  if ((*(unsigned int (**)(void))(*(void *)this[8] + 808))()) {
    BOOL v27 = v26 >= 2;
  }
  else {
    BOOL v27 = 0;
  }
  if (v27)
  {
    v71[3] = v71[3] & 0xF0 | 4;
    v71[11] = v71[11] & 0xF0 | 4;
    v71[15] = v71[15] & 0xF0 | 4;
    *(_WORD *)&v71[9] = 12850;
    v71[23] = v71[23] & 0xF0 | 3;
    v71[27] = v71[27] & 0xF0 | 3;
  }
  if (10 * v23 >= 0xA) {
    char v28 = 10;
  }
  else {
    char v28 = 10 * v23;
  }
  char v29 = (*(uint64_t (**)(const void *))(*(void *)this[8] + 32))(this[8]);
  int v30 = this;
  if (v29) {
    goto LABEL_59;
  }
  if (*((unsigned char *)this + 24616))
  {
    v71[6] = 0;
    v71[14] = 0;
    v71[26] = 0;
    char v31 = 8;
  }
  else
  {
    if ((*(unsigned int (**)(const void *))(*(void *)this[10] + 40))(this[10]))
    {
      v71[14] = 55;
      int v30 = this;
      goto LABEL_59;
    }
    if (*((unsigned char *)this + 24611))
    {
      int v30 = this;
      if (*((unsigned char *)this + 24612))
      {
        if (v2 >= 9u) {
          char v32 = 45;
        }
        else {
          char v32 = 35;
        }
        v71[6] = v32 + v28;
        v71[14] = 10;
        v71[22] = 30;
        v71[10] = 20;
        if (v50 < 5
          || (_BYTE)v19
          || (char v33 = (*(uint64_t (**)(const void *))(*(void *)this[8] + 1224))(this[8]),
              int v30 = this,
              (v33 & 1) != 0))
        {
          char v34 = 108;
        }
        else
        {
          char v34 = 70;
        }
        v71[26] = v34;
        goto LABEL_59;
      }
      char v31 = 108;
      v71[14] = 108;
    }
    else
    {
      int v30 = this;
      if (*((unsigned char *)this + 24608))
      {
        char v31 = 108;
        v71[14] = 108;
        v71[6] = 108;
      }
      else
      {
        if (!*((unsigned char *)this + 24667))
        {
          if (*((unsigned char *)this + 24865) && !v26)
          {
            v71[14] = 108;
            goto LABEL_59;
          }
          if (v2 >= 9u) {
            char v44 = 55;
          }
          else {
            char v44 = 40;
          }
          v71[6] = v44 + v28;
          if ((*(unsigned int (**)(void))(*(void *)this[8] + 264))() && *((_DWORD *)this + 5692) >> 4 > 0x270u)
          {
            (*(void (**)(const void *))(*(void *)this[8] + 264))(this[8]);
            BOOL v45 = v50 > 7;
            char v46 = 60;
            char v47 = 70;
          }
          else
          {
            BOOL v45 = v15 > 2u || v50 > 7;
            char v46 = 99;
            char v47 = 108;
          }
          if (v45) {
            char v46 = v47;
          }
          int v30 = this;
          v71[14] = v46;
          if ((_BYTE)v19
            || (v48 = (*(uint64_t (**)(const void *))(*(void *)this[8] + 1224))(this[8]), int v30 = this, v48))
          {
            char v49 = 108;
          }
          else
          {
            char v49 = 70;
          }
          v71[26] = v49;
          char v31 = 40;
          goto LABEL_39;
        }
        v71[14] = 60;
        v71[10] = 5;
        v71[6] = 0;
        char v31 = 108;
      }
    }
    v71[26] = 108;
  }
LABEL_39:
  v71[22] = v31;
LABEL_59:
  uint64_t v35 = (*(uint64_t (**)(const void *))(*(void *)v30[6] + 80))(v30[6]);
  long long v69 = 0;
  v70[0] = 0;
  *(_DWORD *)((char *)v70 + 7) = 0;
  v70[2] = v35;
  LODWORD(v70[3]) = 0;
  WORD2(v70[3]) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v35 + 16))(v35, 0);
  uint64_t v36 = 0;
  uint64_t v37 = v71;
  do
  {
    if (v36 != *v37)
    {
      uint64_t v42 = "aSmLimits[i].sm_id == i";
      int v43 = 3597;
      DeviceFaultNotify("glmesrd_acq_mgr_sm.cpp", 3597, "UpdateResources", (char)"aSmLimits[i].sm_id == i");
LABEL_72:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_acq_mgr_sm.cpp", v43, v42);
    }
    if (v36 || !*((unsigned char *)this + 24864))
    {
      if ((v36 - 1) <= 5)
      {
        v37[1] = v37[2];
        uint64_t v40 = (*(uint64_t (**)(void))(*(void *)v70[2] + 48))(v70[2]);
        uint64_t v41 = (*(uint64_t (**)(uint64_t))(*(void *)v40 + 48))(v40);
        (*(void (**)(uint64_t, int **, uint64_t, unsigned __int8 *))(*(void *)v41 + 128))(v41, &v69, 1, v37);
      }
    }
    else
    {
      v71[1] = v71[2];
      uint64_t v38 = (*(uint64_t (**)(void))(*(void *)v70[2] + 48))(v70[2]);
      uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)v38 + 48))(v38);
      (*(void (**)(uint64_t, int **, uint64_t, unsigned __int8 *))(*(void *)v39 + 128))(v39, &v69, 1, v37);
      if (((*(uint64_t (**)(const void *))(*(void *)this[8] + 264))(this[8]) & 1) == 0)
      {
        uint64_t v42 = "m_rAsicConfigIfc.IsMinnowAsicType()";
        int v43 = 3603;
        DeviceFaultNotify("glmesrd_acq_mgr_sm.cpp", 3603, "UpdateResources", (char)"m_rAsicConfigIfc.IsMinnowAsicType()");
        goto LABEL_72;
      }
    }
    ++v36;
    v37 += 4;
  }
  while (v36 != 9);
  BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v69);
  if (*((unsigned char *)this + 24864))
  {
    (**(void (***)(const void *, const void *, const void *))this[9])(this[9], this[6], this[8]);
    *((unsigned char *)this + 24864) = 0;
  }
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v69);
}

void sub_2639BC390(_Unwind_Exception *a1)
{
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)(v1 - 208));
  _Unwind_Resume(a1);
}

uint64_t BlueFin::CarpEswRpcJdEncImp::esw_jd_rpc_sm_set_limits(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  LODWORD(v5) = a3;
  uint64_t v19 = *MEMORY[0x263EF8340];
  char v8 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v17, v18, 1800, v8);
  BlueFin::GlStream::PutU08(v17, v5);
  if (v5)
  {
    uint64_t v5 = v5;
    unsigned int v9 = (unsigned char *)(a4 + 3);
    while (1)
    {
      unsigned int v10 = *(v9 - 3);
      if (v10 >= (*(unsigned int (**)(void))(**(void **)(a1 + 8) + 448))(*(void *)(a1 + 8))) {
        break;
      }
      BlueFin::GlStream::PutU08(v17, *(v9 - 3));
      BlueFin::GlStream::PutU08(v17, *(v9 - 2));
      BlueFin::GlStream::PutU08(v17, *(v9 - 1));
      BlueFin::GlStream::CarpPutBits(v17, *v9 & 0xF, 4u, 8u);
      unsigned int v11 = *v9;
      v9 += 4;
      BlueFin::GlStream::CarpPutBits(v17, v11 >> 4, 4u, 8u);
      if (!--v5) {
        goto LABEL_5;
      }
    }
    unsigned int v15 = "array_sm_limits_ptr[i].sm_id < m_rAsicConfigIfc.GetMaxSearchManagerIndex()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 868, "esw_jd_rpc_sm_set_limits", (char)"array_sm_limits_ptr[i].sm_id < m_rAsicConfigIfc.GetMaxSearchManagerIndex()");
    int v16 = 868;
LABEL_8:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", v16, v15);
  }
LABEL_5:
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v17);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)a2, 4, 0xAu, v18, Offset);
  unsigned int v13 = *(unsigned __int16 *)(a2 + 32);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v13)
  {
    unsigned int v15 = "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 878, "esw_jd_rpc_sm_set_limits", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    int v16 = 878;
    goto LABEL_8;
  }
  return result;
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetMaxSearchManagerIndex(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 1428);
}

uint64_t BlueFin::GlMeSrdAsicConfig::IsB1CSearchEnabled(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 2218);
}

BOOL BlueFin::GlMeSrdAsicConfig::IsGloShortDecimatorEnabled(BlueFin::GlMeSrdAsicConfig *this)
{
  int v1 = (*(uint64_t (**)(BlueFin::GlMeSrdAsicConfig *))(*(void *)this + 16))(this);
  BOOL result = 1;
  if (v1 > 956235782)
  {
    BOOL v3 = v1 == 956235783;
    int v4 = 1006829577;
  }
  else
  {
    BOOL v3 = v1 == 805502985;
    int v4 = 889126919;
  }
  if (!v3 && v1 != v4) {
    return (v1 & 0xF000FFFE) - 805306382 < 8;
  }
  return result;
}

uint64_t BlueFin::CarpEswRpcJdEncImp::esw_jd_rpc_tm_set_all(uint64_t a1, uint64_t a2, char *a3)
{
  int v4 = (unsigned __int16 *)a2;
  uint64_t v11 = *MEMORY[0x263EF8340];
  char v6 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v9, v10, 1800, v6);
  BlueFin::GlStream::PutU08(v9, *a3);
  BlueFin::GlStream::PutU08(v9, a3[1]);
  BlueFin::GlStream::PutU08(v9, a3[2]);
  BlueFin::GlStream::PutU08(v9, a3[3]);
  BlueFin::GlStream::PutU08(v9, a3[4]);
  BlueFin::GlStream::PutU08(v9, a3[5]);
  BlueFin::GlStream::PutU08(v9, a3[6]);
  BlueFin::GlStream::PutU08(v9, 0);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v9);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)v4, 4, 2u, v10, Offset);
  LODWORD(v4) = v4[16];
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v4)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 826, "esw_jd_rpc_tm_set_all", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", 826, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetGpsSignalType(uint64_t this, unsigned __int8 *a2)
{
  for (uint64_t i = 0; i != 32; ++i)
    a2[i] = *(unsigned char *)(this + 565 + i);
  return this;
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetBdsSignalType(uint64_t this, unsigned __int8 *a2)
{
  for (uint64_t i = 0; i != 63; ++i)
    a2[i] = *(unsigned char *)(this + 597 + i);
  return this;
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetPpsParam(uint64_t this, BOOL *a2, BOOL *a3, int *a4, unsigned int *a5, unsigned int *a6)
{
  *a2 = *(unsigned char *)(this + 660);
  *a3 = *(unsigned char *)(this + 661);
  *a4 = *(_DWORD *)(this + 664);
  *a5 = *(_DWORD *)(this + 668);
  *a6 = *(_DWORD *)(this + 672);
  return this;
}

unsigned char *BlueFin::GlPeKF::InvalidateHulaLocMeas(BlueFin::GlPeKF *this)
{
  unsigned int v2 = (char *)this + 92440;
  BOOL v3 = (char *)this + 88564;
  uint64_t v4 = *((void *)this + 11555);
  if (*(unsigned char *)(v4 + 3008)
    && *(double *)(v4 + 3040) * *(double *)(v4 + 3040) + *(double *)(v4 + 3048) * *(double *)(v4 + 3048) < 160000.0
    && !*(unsigned char *)((*(uint64_t (**)(void))(*((void *)this + 3468) + 240))() + 1)
    && (*((_DWORD *)v3 + 943) || *(_DWORD *)v3 != 1))
  {
    *(_DWORD *)BOOL v3 = 2;
  }
  *(unsigned char *)(*(void *)v2 + 3008) = 0;
  if (v3[11]) {
    v2[168] = 0;
  }
  if (*(unsigned char *)((*(uint64_t (**)(char *))(*((void *)this + 3468) + 240))((char *)this + 27744) + 1)
    && (*(_DWORD *)(*(void *)v2 + 3072) & 0xFFFFFFFE) == 2)
  {
    *(_DWORD *)(*(void *)v2 + 3072) = 1;
  }
  *(unsigned char *)((*(uint64_t (**)(char *))(*((void *)this + 3468) + 240))((char *)this + 27744) + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  if (*(void *)v2) {
    *(unsigned char *)(*(void *)v2 + 2988) = 0;
  }
  uint64_t result = (unsigned char *)(*(uint64_t (**)(char *))(*((void *)this + 3468) + 240))((char *)this + 27744);
  *uint64_t result = 0;
  v3[9] = 0;
  v3[11] = 0;
  v3[13] = 0;
  return result;
}

uint64_t BlueFin::GlPeKF::GlPeKF(uint64_t a1, BlueFin::GlSettingsImpl *a2, const BlueFin::GlPeMsmtMgr *a3, uint64_t a4, uint64_t a5, uint64_t a6, const BlueFin::GlPeTimeManager *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v43 = a1 + 93072;
  uint64_t v35 = a1 + 92488;
  uint64_t v36 = a1 + 92760;
  uint64_t v22 = a1 + 92072;
  uint64_t v37 = a1 + 88848;
  uint64_t v33 = a1 + 88560;
  uint64_t v23 = a1 + 88032;
  *(void *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v40 = (unsigned char *)(a1 + 27332);
  uint64_t v24 = a1 + 22816;
  uint64_t v41 = a1 + 17396;
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 0;
  *(int32x2_t *)(a1 + 64) = vdup_n_s32(0x44FA0000u);
  *(_DWORD *)(a1 + 72) = -1;
  *(void *)(a1 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(void *)(a1 + 136) = &off_270EBC600;
  *(_OWORD *)(a1 + 144) = xmmword_263BB3BC0;
  *(_DWORD *)(a1 + 16BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = -1;
  *(unsigned char *)(a1 + 176) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 178) = 0;
  *(_DWORD *)(a1 + 186) = 0;
  BlueFin::stSkfStatus::stSkfStatus(a1 + 192);
  BlueFin::stSkfTestParam::stSkfTestParam((BlueFin::stSkfTestParam *)(a1 + 1632));
  *(unsigned char *)(a1 + 3744) = 1;
  *(void *)(a1 + 3752) = 0;
  *(int64x2_t *)(a1 + 376BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(void *)(a1 + 3776) = 0x7FFFFFFFFFFFFFFFLL;
  BlueFin::GlPeCST::init((BlueFin::GlPeCST *)a1, a2, a7);
  *(_WORD *)(a1 + 3808) = 0;
  *(void *)&long long v32 = a2;
  *((void *)&v32 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = a15;
  BlueFin::GlPeNavAid::GlPeNavAid(a1 + 3840, a9, a8, (uint64_t)a3, a1 + 17416, a14, (uint64_t)a7, a5, v32, a18);
  *(void *)(a1 + 17344) = a11;
  *(void *)(a1 + 17352) = a3;
  *(void *)uint64_t v41 = 0;
  *(_OWORD *)(a1 + 1736BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 17376) = 0u;
  *(_DWORD *)(a1 + 1739BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *(_WORD *)(v41 + 12) = -1;
  *(unsigned char *)(v41 + 14) = 1;
  BlueFin::GlPeComputeZRH::GlPeComputeZRH(a1 + 17416, (uint64_t)a3, a5, a9, (uint64_t)a7, a1 + 88792, (uint64_t)a2, a17);
  *(_WORD *)(a1 + 21784) = 0;
  *(_OWORD *)(a1 + 21792) = 0u;
  *(_OWORD *)(a1 + 21808) = 0u;
  *(_OWORD *)(a1 + 21824) = 0u;
  *(_OWORD *)(a1 + 2184BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(void *)(a1 + 21856) = 0;
  *(void *)(a1 + 22672) = a11;
  bzero((void *)(a1 + 21864), 0x322uLL);
  *(void *)(a1 + 22709) = 0;
  *(_OWORD *)(a1 + 2268BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 22696) = 0u;
  *(void *)(a1 + 2272BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a3;
  *(void *)(a1 + 22728) = a1 + 17416;
  *(void *)(a1 + 22736) = a1 + 92560;
  *(void *)(a1 + 22744) = a9 + 392;
  *(void *)(a1 + 22752) = a18;
  BlueFin::GlPeNavGnssState::GlPeNavGnssState((BlueFin::GlPeNavGnssState *)(a1 + 23176));
  *(void *)(a1 + 22768) = a3;
  *(void *)(a1 + 22776) = a1 + 17416;
  *(void *)(a1 + 2276BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = &unk_270EC3440;
  *(void *)(a1 + 23176) = &unk_270EC3478;
  *(void *)(a1 + 22784) = a7;
  uint64_t v25 = v41 + 12;
  *(void *)(a1 + 22792) = v41 + 12;
  *(void *)(a1 + 2280BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 92560;
  *(void *)(a1 + 22808) = a18;
  *(unsigned char *)uint64_t v24 = 0;
  *(_WORD *)(v24 + 72) = 0;
  *(void *)(a1 + 22824) = 0;
  *(void *)(a1 + 2284BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 22832) = 0;
  *(void *)(a1 + 22856) = 0;
  *(void *)(a1 + 22872) = 0;
  *(void *)(a1 + 22864) = 0;
  *(_DWORD *)(a1 + 2288BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 22896) = a3;
  *(void *)(a1 + 22904) = a1 + 17416;
  uint64_t v42 = (_OWORD *)(a1 + 92560);
  *(void *)(a1 + 22912) = a1 + 92560;
  *(void *)(a1 + 2292BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 22928) = a18;
  *(unsigned char *)(a1 + 2294BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_DWORD *)(a1 + 22936) = 0;
  *(void *)(a1 + 22944) = 0x412E848000000000;
  *(_OWORD *)(a1 + 22952) = 0u;
  *(_OWORD *)(a1 + 22968) = 0u;
  *(_OWORD *)(a1 + 22977) = 0u;
  *(void *)(a1 + 2300BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(unsigned char *)(a1 + 23008) = 0;
  *(void *)(a1 + 23016) = 0;
  *(void *)(a1 + 23024) = 0;
  *(unsigned char *)(v24 + 216) = 1;
  *(_DWORD *)(v24 + 24BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  memset_pattern16((void *)(a1 + 23034), &memset_pattern_2, 6uLL);
  *(unsigned char *)(a1 + 23042) = 0;
  *(_WORD *)(a1 + 2304BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 23044) = 0;
  *(_DWORD *)(a1 + 23052) = 0;
  *(_DWORD *)(v24 + 256) = 0;
  *(_WORD *)(v24 + 26BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 2306BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_OWORD *)(a1 + 23108) = 0u;
  *(_OWORD *)(a1 + 23124) = 0u;
  *(_OWORD *)(a1 + 2314BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 23092) = 0u;
  *(unsigned char *)(a1 + 23068) = 0;
  *(void *)(a1 + 2308BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 23092;
  *(unsigned char *)(v24 + 272) = 19;
  *(_OWORD *)(a1 + 23152) = 0u;
  *(void *)(a1 + 23168) = a13;
  *(void *)(a1 + 2392BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 24056) = 0;
  *(void *)(a1 + 24192) = 0;
  *(unsigned char *)(a1 + 23712) = 0;
  *(void *)(a1 + 23704) = 0;
  *(_OWORD *)(a1 + 2372BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 23736) = 0u;
  *(_OWORD *)(a1 + 23752) = 0u;
  *(_OWORD *)(a1 + 23768) = 0u;
  *(void *)(a1 + 23784) = 0;
  *(_OWORD *)(a1 + 24328) = 0u;
  *(_OWORD *)(a1 + 24344) = 0u;
  *(_DWORD *)(v24 + 1544) = 6367427;
  *(_OWORD *)(a1 + 24364) = 0u;
  *(_OWORD *)(a1 + 2438BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 24392) = 0u;
  *(_OWORD *)(a1 + 24436) = 0u;
  *(_OWORD *)(a1 + 24452) = 0u;
  *(_OWORD *)(a1 + 24468) = 0u;
  *(_OWORD *)(a1 + 24524) = 0u;
  *(_OWORD *)(a1 + 2454BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 24556) = 0u;
  *(_OWORD *)(a1 + 24568) = 0u;
  *(void *)(a1 + 24752) = 0;
  *(void *)(a1 + 25056) = a1 + 24336;
  *(_OWORD *)(a1 + 2442BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(void *)(a1 + 24408) = a1 + 24420;
  *(unsigned char *)(v24 + 160BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 19;
  *(_OWORD *)(a1 + 2448BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 24508) = 0u;
  *(void *)(a1 + 24496) = a1 + 24508;
  *(unsigned char *)(v24 + 1688) = 19;
  *(void *)(a1 + 24584) = 0x41584A30AEF9DB23;
  *(void *)(a1 + 24592) = 0x41584A30AEF9DB23;
  *(void *)(a1 + 24604) = 0;
  *(unsigned char *)(v24 + 1784) = 0;
  *(void *)(a1 + 24632) = 0;
  *(void *)(a1 + 24616) = 0;
  *(void *)(a1 + 24624) = 0;
  *(void *)(a1 + 2464BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 24656;
  *(void *)(a1 + 24648) = 0x700000000;
  *(_OWORD *)(a1 + 24704) = 0u;
  *(_OWORD *)(a1 + 24688) = 0u;
  *(_OWORD *)(a1 + 24672) = 0u;
  *(_OWORD *)(a1 + 24656) = 0u;
  *(void *)(a1 + 2474BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 24732) = 0;
  *(void *)(a1 + 2472BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 24732;
  *(unsigned char *)(v24 + 1912) = 4;
  *(void *)(a1 + 2476BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 17416;
  *(void *)(a1 + 24768) = v25;
  *(void *)(a1 + 24784) = 0;
  *(void *)(a1 + 24776) = 0;
  *(void *)(a1 + 24792) = 0;
  *(_DWORD *)(v24 + 1984) = 6367427;
  *(_OWORD *)(a1 + 24832) = 0u;
  *(_OWORD *)(a1 + 2482BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 24804) = 0u;
  *(void *)(a1 + 24848) = a1 + 24860;
  *(unsigned char *)(v24 + 204BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 19;
  *(_OWORD *)(a1 + 2492BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 24908) = 0u;
  *(_OWORD *)(a1 + 24892) = 0u;
  *(_OWORD *)(a1 + 24876) = 0u;
  *(_OWORD *)(a1 + 2486BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(void *)(a1 + 24936) = a1 + 24948;
  *(unsigned char *)(v24 + 2128) = 19;
  *(_OWORD *)(a1 + 25008) = 0u;
  *(_OWORD *)(a1 + 24996) = 0u;
  *(_OWORD *)(a1 + 2498BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 24964) = 0u;
  *(_OWORD *)(a1 + 24948) = 0u;
  *(int64x2_t *)(a1 + 25024) = vdupq_n_s64(0x41584A30AEF9DB23uLL);
  *(unsigned char *)(v24 + 2224) = 0;
  *(void *)(a1 + 25044) = 0;
  *(_DWORD *)(v24 + 2248) = 0;
  *(void *)(a1 + 25072) = a7;
  *(void *)(a1 + 2508BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a3;
  *(unsigned char *)(v24 + 2272) = 0;
  *(void *)(a1 + 25096) = a3;
  BlueFin::GlPeNavGnssMeasMgr::GlPeNavGnssMeasMgr(a1 + 25120, (uint64_t)a2, (uint64_t)a3, a9, a9 + 7424, a7, a8, a1 + 17416, a11, a15, a18);
  uint64_t v34 = a1 + 27744;
  BlueFin::GlPeKfPool::GlPeKfPool((uint64_t *)(a1 + 27744), (uint64_t)a3, a1 + 17416, a1 + 88792, a11, a14, v33, a1 + 17344, v22, v22 + 232);
  *(_OWORD *)(v23 + 12) = 0u;
  *(void *)uint64_t v23 = v23 + 12;
  *(unsigned char *)(v23 + 8) = 8;
  *(_OWORD *)(v23 + 28) = 0u;
  *(void *)(v23 + 48) = 0;
  *(_DWORD *)(v23 + 56) = 0;
  *(unsigned char *)(v23 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_WORD *)(v23 + 64) = -256;
  *(unsigned char *)(v23 + 66) = 0;
  *(_OWORD *)(v23 + 68) = 0u;
  *(_OWORD *)(v23 + 84) = 0u;
  *(_OWORD *)(v23 + 10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(v23 + 116) = 0u;
  *(_OWORD *)(v23 + 132) = 0u;
  *(_OWORD *)(v23 + 148) = 0u;
  *(_OWORD *)(v23 + 164) = 0u;
  *(_OWORD *)(v23 + 18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(v23 + 196) = 0u;
  *(_OWORD *)(v23 + 212) = 0u;
  *(_OWORD *)(v23 + 228) = 0u;
  *(_OWORD *)(v23 + 244) = 0u;
  *(_DWORD *)(v23 + 308) = 0;
  *(_OWORD *)(v23 + 26BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(v23 + 276) = 0u;
  *(_OWORD *)(v23 + 292) = 0u;
  *(_OWORD *)(v23 + 352) = 0u;
  *(_OWORD *)(v23 + 368) = 0u;
  *(void *)(v23 + 384) = 0;
  *(void *)(v23 + 392) = 0x4059000000000000;
  *(_WORD *)(v23 + 40BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_DWORD *)(v23 + 416) = 0;
  *(_WORD *)(v23 + 42BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(v23 + 404) = 0;
  *(_DWORD *)(v23 + 41BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *(void *)(v23 + 432) = 0;
  *(void *)(v23 + 44BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(v23 + 424) = 0;
  *(unsigned char *)(v23 + 448) = 0;
  *(void *)(v23 + 472) = 0;
  *(void *)(v23 + 48BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0xBF80000000000000;
  *(void *)(v23 + 456) = 0;
  *(void *)(v23 + 464) = 0;
  *(void *)(v23 + 488) = 0x1100000001;
  *(void *)(v23 + 496) = a9;
  *(void *)(v23 + 504) = a11;
  *(void *)(v23 + 512) = v22;
  *(void *)(v23 + 52BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 17416;
  *(_WORD *)uint64_t v33 = 0;
  *(_DWORD *)(v33 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(unsigned char *)(v33 + 24) = 0;
  *(void *)(v33 + 32) = 0;
  *(void *)(v33 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(v33 + 4) = 0;
  *(_WORD *)(v33 + 56) = 0;
  *(void *)(v33 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(v33 + 48) = 0;
  *(_OWORD *)(v33 + 76) = 0u;
  *(_OWORD *)(v33 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_DWORD *)(v33 + 92) = 10;
  *(unsigned char *)(v33 + 96) = 0;
  *(int64x2_t *)(v33 + 104) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(void *)(v33 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0x7FEFFFFFFFFFFFFFLL;
  *(unsigned char *)(v33 + 128) = 0;
  *(void *)(v33 + 136) = a11;
  *(void *)(v33 + 144) = a1 + 17360;
  *(void *)(v33 + 152) = &unk_270EBF9E0;
  *(_OWORD *)(v33 + 16BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(v33 + 176) = 0u;
  *(void *)(v33 + 192) = 0;
  *(void *)(v33 + 20BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = &off_270EBC600;
  *(_OWORD *)(v33 + 208) = xmmword_263BB3BC0;
  *(unsigned char *)(v33 + 224) = 0;
  BlueFin::GlPeCoarseTime::GlPeCoarseTime((BlueFin::GlPeCoarseTime *)(a1 + 88792), a7, a3, (const BlueFin::GlPeSatAidInfo *)(a8 + 32));
  *(void *)(v33 + 28BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a14;
  *(void *)uint64_t v37 = &unk_270EC3360;
  *(void *)(v37 + 8) = 0;
  *(unsigned char *)(v37 + 16) = 0;
  uint64_t v26 = 88872;
  do
  {
    uint64_t v27 = a1 + v26;
    *(unsigned char *)uint64_t v27 = 0;
    *(_DWORD *)(v27 + 4) = -1;
    *(_WORD *)(v27 + 8) = 575;
    *(void *)(v27 + 16) = 0;
    *(void *)(v27 + 24) = 0;
    v26 += 32;
  }
  while (v27 + 32 != v22);
  *(void *)(a1 + 92104) = 0;
  *(_OWORD *)(a1 + 92088) = 0u;
  *(void *)(v22 + 84) = 0;
  *(_DWORD *)(v22 + 92) = 0;
  *(void *)(v22 + 96) = 300000;
  *(_DWORD *)(v22 + 104) = 1145569280;
  *(_DWORD *)(v22 + 116) = 0;
  *(_WORD *)(v22 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(v22 + 124) = 0x40B1999A41333333;
  *(_WORD *)(v22 + 132) = 256;
  *(void *)(v22 + 136) = 0x40B1999A4131999ALL;
  *(void *)(a1 + 92264) = 0;
  *(_OWORD *)(a1 + 92272) = 0u;
  *(_OWORD *)(a1 + 92244) = 0u;
  *(_OWORD *)(a1 + 92216) = 0u;
  *(_OWORD *)(a1 + 92232) = 0u;
  *(_DWORD *)(v22 + 216) = 1120403456;
  *(void *)(v22 + 108) = 0;
  *(_DWORD *)uint64_t v22 = 0;
  *(_WORD *)(v22 + 4) = 20;
  *(unsigned char *)(v22 + 6) = 0;
  *(void *)(v22 + 8) = 0xBB800000000;
  *(_DWORD *)(v22 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_WORD *)(v22 + 44) = 0;
  *(_DWORD *)(v22 + 48) = 0;
  *(void *)(v22 + 56) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 92136) = 0u;
  *(_WORD *)(a1 + 92152) = 0;
  *(_DWORD *)(v22 + 252) = 256;
  *(_DWORD *)(v22 + 248) = 0;
  *(void *)(v22 + 224) = a14;
  *(void *)(v22 + 232) = &aotRegionsEmpty;
  *(void *)(v22 + 24BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = &aotCityEmpty;
  *(_DWORD *)(v22 + 256) = 15;
  *(_DWORD *)(v22 + 264) = 0;
  *(unsigned char *)(v22 + 268) = 0;
  *(void *)(v22 + 272) = a2;
  *(void *)(v22 + 28BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a5;
  *(void *)(v22 + 288) = a9 + 56;
  *(void *)(v22 + 296) = a6;
  *(void *)(v22 + 304) = a7;
  *(void *)(v22 + 312) = a18;
  *(void *)(v22 + 32BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a8;
  *(void *)(v22 + 328) = a9 + 7424;
  *(void *)(v22 + 336) = a9;
  *(void *)(v22 + 344) = a3;
  *(void *)(v22 + 352) = a4;
  *(void *)(v22 + 36BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a10;
  *(void *)(v22 + 368) = a11;
  *(void *)(v22 + 376) = a15;
  *(void *)(v22 + 384) = a16;
  *(void *)(v22 + 392) = a17;
  *(void *)(v22 + 40BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a12;
  *(void *)(v22 + 408) = 0;
  *(_WORD *)uint64_t v35 = 1;
  *(_OWORD *)(v35 + 4) = xmmword_263BBC1C0;
  *(_DWORD *)(v35 + 32) = 9;
  *(void *)(v35 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = &BlueFin::GlPeNegAltRegions::m_aotRegions;
  *(_DWORD *)(v35 + 48) = 89;
  *(void *)(v35 + 56) = &BlueFin::GlPeNegAltRegions::m_aotIndex;
  *(_DWORD *)(v35 + 64) = -51;
  *(void *)(v35 + 24) = &unk_270EC32B0;
  *uint64_t v42 = 0u;
  *(_DWORD *)(v35 + 116) = -1;
  *(_OWORD *)(v35 + 88) = xmmword_263BB9FD0;
  *(_WORD *)(v35 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(unsigned char *)(v35 + 122) = 0;
  *(unsigned char *)(v35 + 104) = 0;
  *(_DWORD *)(v35 + 108) = -1;
  *(_WORD *)(v35 + 112) = 575;
  *(_DWORD *)(v35 + 128) = 0;
  *(unsigned char *)(v35 + 132) = 0;
  *(void *)(v35 + 136) = a1 + 92636;
  *(unsigned char *)(v35 + 144) = 19;
  *(_OWORD *)(a1 + 92696) = 0u;
  *(_OWORD *)(a1 + 92684) = 0u;
  *(_OWORD *)(a1 + 92668) = 0u;
  *(_OWORD *)(a1 + 92652) = 0u;
  *(_OWORD *)(a1 + 92636) = 0u;
  *(_OWORD *)(a1 + 92724) = 0u;
  *(void *)(v35 + 224) = a1 + 92724;
  *(unsigned char *)(v35 + 232) = 8;
  *(_OWORD *)(a1 + 9274BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 92772) = 0u;
  *(void *)uint64_t v36 = a1 + 92772;
  *(unsigned char *)(v36 + 8) = 8;
  *(_OWORD *)(a1 + 92788) = 0u;
  *(_OWORD *)(a1 + 9282BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(void *)(v36 + 48) = a1 + 92820;
  *(unsigned char *)(v36 + 56) = 8;
  *(_OWORD *)(a1 + 92836) = 0u;
  *(_WORD *)(v36 + 124) = 0;
  *(_WORD *)(v36 + 128) = 0;
  *(_DWORD *)(v36 + 132) = 0;
  *(_WORD *)(v36 + 136) = 0;
  *(void *)(v36 + 14BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(unsigned char *)(v36 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(v36 + 112) = 0;
  *(_OWORD *)(v36 + 96) = 0u;
  *(_DWORD *)(v36 + 148) = 0;
  *(_DWORD *)(v36 + 152) = 1;
  *(_WORD *)(v36 + 156) = 0;
  *(_DWORD *)(v36 + 16BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(unsigned char *)(a1 + 92952) = 0;
  *(_OWORD *)(a1 + 92928) = 0u;
  *(void *)(a1 + 92944) = 0;
  *(_DWORD *)(v36 + 296) = 0;
  *(void *)(v36 + 30BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0x451C400000000000;
  *(unsigned char *)(v36 + 308) = 0;
  *(void *)uint64_t v43 = &unk_270EBB880;
  *(void *)(v43 + 20BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = &unk_270EBA640;
  *(void *)(v43 + 208) = a1 + 93314;
  *(void *)(v43 + 216) = a1 + 93080;
  *(void *)(v43 + 224) = a1 + 93346;
  *(_DWORD *)(v43 + 232) = 2;
  *(_WORD *)(v43 + 236) = -17407;
  *(unsigned char *)(v43 + 238) = 16;
  BlueFin::GlArray::Clear(v43 + 200);
  *(unsigned char *)(v43 + 24BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_DWORD *)(v43 + 292) = 0;
  *(unsigned char *)(v43 + 296) = 0;
  *(void *)(v43 + 304) = a13;
  *(void *)(v22 + 408) = 0;
  *(unsigned char *)(v22 + 45) = 0;
  *(unsigned char *)(v24 + 2272) = 0;
  *uint64_t v40 = 0;
  *(void *)(a1 + 1584) = 0;
  *(_DWORD *)(v35 + 128) = *(_DWORD *)(v35 + 128) & 0xFFD02745 | 0x245822;
  *(unsigned char *)(v23 + 414) = 1;
  *(unsigned char *)((*(uint64_t (**)(uint64_t))(*(void *)(a1 + 27744) + 240))(v34) + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  uint64_t v28 = *(void *)(v22 + 368);
  if (v28) {
    *(unsigned char *)(v28 + 2988) = 0;
  }
  *(unsigned char *)(*(uint64_t (**)(uint64_t))(*(void *)(a1 + 27744) + 240))(v34) = 0;
  *(unsigned char *)(a1 + 1604) = 0;
  *(_DWORD *)(a1 + 158BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_DWORD *)(a1 + 160BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  __int16 v29 = *(_WORD *)(*(void *)(v22 + 312) + 10);
  if (BlueFin::GlUtils::m_ucEnabled) {
    BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
  }
  float v30 = (double)v29 * 0.000000001 * 1000000000.0;
  *(float *)(a1 + 24) = v30;
  *(unsigned char *)(a1 + 1086) = *(_DWORD *)(a1 + 152) != 1;
  bzero(*(void **)v23, ((4 * *(unsigned __int8 *)(v23 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  *(void *)(a1 + 92873) = 0;
  *(void *)(a1 + 92868) = 0;
  *(_DWORD *)(v33 + 12) = 1;
  *(_WORD *)(v33 + 16) = 0;
  bzero(*(void **)(v35 + 224), ((4 * *(unsigned __int8 *)(v35 + 232) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero(*(void **)v36, ((4 * *(unsigned __int8 *)(v36 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero(*(void **)(v36 + 48), ((4 * *(unsigned __int8 *)(v36 + 56) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  *(void *)(v36 + 96) = 0;
  *(_DWORD *)(v36 + 104) = 0;
  *(_WORD *)(v36 + 128) = 0;
  *(_DWORD *)(v36 + 132) = 0;
  bzero(*(void **)(v35 + 136), ((4 * *(unsigned __int8 *)(v35 + 144) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  *(_WORD *)(v36 + 136) = 1;
  *(_DWORD *)(v36 + 144) = 0;
  *(_WORD *)uint64_t v22 = 0;
  *(_DWORD *)(v22 + 2) = 1310720;
  *(unsigned char *)(v22 + 6) = 0;
  *(void *)(v22 + 8) = 0xBB800000000;
  *(_DWORD *)(v22 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_WORD *)(v22 + 44) = 0;
  *(_DWORD *)(v22 + 48) = 0;
  *(void *)(v22 + 56) = 0x3FF0000000000000;
  *(void *)(a1 + 92136) = 0;
  *(void *)(a1 + 92144) = 0;
  *(_WORD *)(a1 + 92152) = 0;
  *(_WORD *)(a1 + 3808) = 0;
  *(_WORD *)(v22 + 269) = 0;
  *(unsigned char *)(v22 + 27BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *(_WORD *)uint64_t v33 = 0;
  *(void *)(v33 + 4) = 0;
  *(unsigned char *)(v33 + 96) = 0;
  *(_OWORD *)(a1 + 93024) = 0u;
  *(_OWORD *)(a1 + 9304BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 92992) = 0u;
  *(_OWORD *)(a1 + 93008) = 0u;
  *(_OWORD *)(a1 + 9296BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 92976) = 0u;
  *(void *)uint64_t v42 = 0;
  *(void *)(a1 + 92568) = 0;
  *(void *)(v33 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(v33 + 48) = 0;
  *(void *)(v33 + 32) = 0;
  *(_WORD *)(v33 + 56) = 0;
  *(_DWORD *)(v35 + 116) = -1;
  *(_OWORD *)(v35 + 88) = xmmword_263BB9FD0;
  *(_WORD *)(v35 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(unsigned char *)(v35 + 122) = 0;
  *(unsigned char *)(v35 + 104) = 0;
  *(_DWORD *)(v35 + 108) = -1;
  *(_WORD *)(v35 + 112) = 575;
  GlCustomLog(127, "Size,GlPeKF,%u\n", 93408);
  GlCustomLog(127, "    ->Size,GlPeCST,%u\n", 3808);
  GlCustomLog(127, "    ->Size,GlPeNavAid,%u\n", 13504);
  GlCustomLog(127, "    ->Size,GlPeComputeZRH,%u\n", 4368);
  GlCustomLog(127, "    ->Size,stRtdMgr,%u\n", 856);
  GlCustomLog(127, "    ->Size,GlPeLsq,%u\n", 40);
  GlCustomLog(127, "    ->Size,GlPeFirstFix,%u\n", 944);
  GlCustomLog(127, "    ->Size,GlPeFiltPos,%u\n", 632);
  GlCustomLog(127, "    ->Size,GlPeDnavMgr,%u\n", 752);
  GlCustomLog(127, "    ->Size,GlPeIntegers,%u\n", 16);
  GlCustomLog(127, "    ->Size,GlPeNavGnssMeasMgr,%u\n", 2624);
  GlCustomLog(127, "    ->Size,GlPePosInfo,%u\n", 528);
  GlCustomLog(127, "    ->Size,GlPeExtLoc,%u\n", 232);
  GlCustomLog(127, "    ->Size,GlPeCoarseTime,%u\n", 48);
  GlCustomLog(127, "    ->Size,GlPeContextMgr,%u\n", 2016);
  GlCustomLog(127, "    ->Size,GlPeGnssNavUpa,%u\n", 336);
  GlCustomLog(127, "    ->Size,GlPeGeoid,%u\n", 72);
  GlCustomLog(127, "    ->Size,stSKFMeas,%u\n", 56);
  GlCustomLog(127, "    ->Size,GlPeVlss,%u\n", 1272);
  GlCustomLog(127, "    ->Size,GL_MEIF_PWR_STATE,%u\n", 4);
  GlCustomLog(127, "    ->Size,stNumMeas,%u\n", 16);
  GlCustomLog(127, "    ->Size,stFlightModeMgr,%u\n", 8);
  if (!*(void *)(v43 + 304))
  {
    DeviceFaultNotify("glpe_kf.cpp", 475, "GlPeKF", (char)"m_pcbCallBacks !=nullptr");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_kf.cpp", 475, "m_pcbCallBacks !=nullptr");
  }
  return a1;
}

uint64_t BlueFin::GlPeNavGnssKF::GetGnssNavUpa(BlueFin::GlPeNavGnssKF *this)
{
  return (uint64_t)this + 2280;
}

uint64_t BlueFin::GlPeKfPool::GetGnssNavUpa(BlueFin::GlPeKfPool *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 7265) + 240))();
}

__n128 BlueFin::GlPeCST::init(BlueFin::GlPeCST *this, BlueFin::GlSettingsImpl *a2, const BlueFin::GlPeTimeManager *a3)
{
  uint64_t v198 = *MEMORY[0x263EF8340];
  *((void *)this + 5) = 0;
  char v6 = (void *)((char *)this + 40);
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
  *((_DWORD *)this + 8) = 0;
  *((int32x2_t *)this + 8) = vdup_n_s32(0x44FA0000u);
  *((_DWORD *)this + 18) = -1;
  *((void *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  char v7 = (char *)this + 80;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *((void *)this + 12) = 0;
  *((_DWORD *)this + 26) = 0;
  *((void *)this + 17) = &off_270EBC600;
  *((_OWORD *)this + 9) = xmmword_263BB3BC0;
  *((_DWORD *)this + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = -1;
  *((unsigned char *)this + 176) = 0;
  *((void *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *(void *)((char *)this + 178) = 0;
  *(_DWORD *)((char *)this + 186) = 0;
  BlueFin::stSkfStatus::stSkfStatus((uint64_t)this + 192);
  BlueFin::stSkfTestParam::stSkfTestParam((BlueFin::GlPeCST *)((char *)this + 1632));
  *((unsigned char *)this + 3744) = 1;
  *((void *)this + 469) = 0;
  *((int64x2_t *)this + 235) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *((void *)this + 472) = 0x7FFFFFFFFFFFFFFFLL;
  if (!a2)
  {
    long long v54 = "pSettings != nullptr";
    DeviceFaultNotify("glpe_cst.cpp", 233, "init", (char)"pSettings != nullptr");
    int v55 = 233;
LABEL_132:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_cst.cpp", v55, v54);
  }
  char v57 = v7;
  *((void *)this + 466) = a3;
  bzero(&v138, 0x2A8uLL);
  uint64_t v95 = (char *)this + 1632;
  uint64_t v96 = (char *)this + 1633;
  uint64_t v97 = (char *)this + 1634;
  uint64_t v98 = (char *)this + 1737;
  uint64_t v99 = (char *)this + 1736;
  unsigned int v100 = (char *)this + 1738;
  char v101 = (char *)this + 1740;
  uint64_t v102 = (char *)this + 1739;
  long long v69 = 0u;
  long long v70 = 0u;
  int v103 = (char *)this + 2272;
  unint64_t v104 = (char *)this + 2276;
  uint64_t v105 = (char *)this + 2280;
  uint64_t v106 = (char *)this + 2284;
  long long v107 = (char *)this + 1672;
  int v108 = (char *)this + 1704;
  __int16 v109 = (char *)this + 1744;
  int v110 = (char *)this + 1744;
  long long v71 = 0u;
  long long v72 = 0u;
  unsigned int v111 = (char *)this + 1832;
  char v112 = (char *)this + 1832;
  char v113 = (char *)this + 1920;
  char v114 = (char *)this + 2008;
  char v115 = (char *)this + 2008;
  char v116 = (char *)this + 2096;
  char v117 = (char *)this + 2096;
  int v118 = (char *)this + 2184;
  long long v73 = 0u;
  long long v74 = 0u;
  int v119 = (char *)this + 1640;
  int v120 = (char *)this + 1640;
  int v121 = (char *)this + 1640;
  int v122 = (char *)this + 1640;
  int v123 = (char *)this + 1640;
  double v124 = (char *)this + 1640;
  __int16 v125 = (char *)this + 1640;
  char v126 = (char *)this + 1640;
  long long v75 = xmmword_263BBA390;
  long long v76 = xmmword_263BBA3A0;
  uint64_t v127 = (char *)this + 1640;
  int v128 = (char *)this + 1640;
  __int16 v129 = (char *)this + 1640;
  int v130 = (char *)this + 1640;
  __int16 v131 = (char *)this + 1640;
  char v132 = (char *)this + 1640;
  uint64_t v133 = (char *)this + 1640;
  int v134 = (char *)this + 1640;
  long long v77 = xmmword_263BBA3B0;
  long long v78 = xmmword_263BBA3C0;
  __int16 v135 = (char *)this + 1640;
  long long v136 = (char *)this + 1640;
  __int16 v137 = (char *)this + 1640;
  char v138 = (char *)this + 1640;
  uint64_t v139 = (char *)this + 1640;
  int v140 = (char *)this + 1640;
  __int16 v141 = (char *)this + 1640;
  uint64_t v142 = (char *)this + 1640;
  long long v79 = xmmword_263BBA3D0;
  long long v80 = xmmword_263BBA3E0;
  uint64_t v143 = (char *)this + 1640;
  uint64_t v144 = (char *)this + 1640;
  __int16 v145 = (char *)this + 1640;
  int v146 = (char *)this + 1640;
  int v147 = (char *)this + 2288;
  uint64_t v148 = (char *)this + 2289;
  long long v149 = (char *)this + 2290;
  uint64_t v150 = (char *)this + 2291;
  long long v81 = xmmword_263BBA3F0;
  long long v82 = 0u;
  int v151 = (char *)this + 2292;
  __int16 v152 = (char *)this + 3148;
  uint64_t v153 = (char *)this + 3149;
  int v154 = (char *)this + 3150;
  int v155 = (char *)this + 3151;
  long long v156 = (char *)this + 3152;
  long long v157 = (char *)this + 3153;
  long long v158 = (char *)this + 3154;
  long long v83 = 0u;
  long long v84 = 0u;
  long long v159 = (char *)this + 3155;
  uint64_t v160 = (char *)this + 3156;
  long long v161 = (char *)this + 2293;
  long long v162 = (char *)this + 2294;
  uint64_t v163 = (char *)this + 2296;
  long long v164 = (char *)this + 2300;
  long long v165 = (char *)this + 2304;
  long long v166 = (char *)this + 2320;
  long long v85 = 0u;
  long long v86 = 0u;
  uint64_t v167 = (char *)this + 2323;
  int v168 = (char *)this + 2308;
  int v169 = (char *)this + 2312;
  int v170 = (char *)this + 2316;
  uint64_t v171 = (char *)this + 2835;
  char v172 = (char *)this + 2836;
  char v173 = (char *)this + 2840;
  long long v174 = (char *)this + 2321;
  long long v87 = 0u;
  long long v88 = 0u;
  uint64_t v175 = (char *)this + 2322;
  uint64_t v176 = (char *)this + 2579;
  BOOL v177 = (char *)this + 3160;
  unsigned int v178 = (char *)this + 3248;
  unsigned int v179 = (char *)this + 3336;
  float64x2_t v180 = (char *)this + 2844;
  double v181 = (char *)this + 2845;
  double v182 = (char *)this + 2848;
  long long v89 = 0u;
  long long v90 = 0u;
  long long v183 = (char *)this + 2852;
  uint64_t v184 = (char *)this + 3112;
  uint64_t v185 = (char *)this + 3116;
  long long v186 = (char *)this + 3120;
  long long v187 = (char *)this + 3124;
  long long v188 = (char *)this + 3128;
  uint64_t v189 = (char *)this + 3132;
  float v190 = (char *)this + 3136;
  long long v91 = 0u;
  long long v92 = 0u;
  int v191 = (char *)this + 3140;
  float v192 = (char *)this + 3144;
  int v193 = (char *)this + 3108;
  uint64_t v194 = (char *)this + 2305;
  long long v93 = 0u;
  long long v195 = (char *)this + 3464;
  uint64_t v196 = (char *)this + 3468;
  memset(v94, 0, sizeof(v94));
  uint64_t v197 = (char *)this + 3472;
  int v58 = *((_DWORD *)a2 + 2890);
  if (v58 >= 1)
  {
    int v8 = 0;
    while (1)
    {
      unsigned int v9 = a2;
      BlueFin::GlSettingsImpl::GetDbgParam(a2, v8, (char (*)[64])&__source[256], (char (*)[256])__source);
      uint64_t v10 = 0;
      int v11 = __source[256];
      unsigned int v12 = &dword_2655DFA48;
      while (1)
      {
        unsigned int v13 = (const char *)*((void *)v12 - 1);
        int v14 = *(unsigned __int8 *)v13;
        char v15 = (v14 - 97) >= 0x1A ? *v13 : v14 - 32;
        unsigned __int8 v16 = (v14 - 65) <= 0x19 ? v14 + 32 : v15;
        if (v11 == v14 || v11 == v16)
        {
          unsigned int v17 = (BlueFin::GlPeExtSensorSet *)strcmp(&__source[257], v13 + 1);
          if (!v17) {
            break;
          }
        }
        ++v10;
        v12 += 4;
        if (v10 == 103) {
          goto LABEL_15;
        }
      }
      switch(*v12)
      {
        case 0:
          if (!(*(_DWORD *)__source ^ 0x65757274 | __source[4]) || *(unsigned __int16 *)__source == 49)
          {
            char v19 = 1;
          }
          else
          {
            BOOL v18 = *(_DWORD *)__source == 1936482662 && *(unsigned __int16 *)&__source[4] == 101;
            if (!v18 && *(unsigned __int16 *)__source != 48)
            {
              DeviceFaultNotify("glpe_cst.cpp", 773, "Init", (char)"false");
              __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_cst.cpp", 773, "false");
            }
            char v19 = 0;
          }
          *(&v95)[v10] = v19;
          goto LABEL_15;
        case 1:
          char v25 = atol(__source);
          if (!v25 && __source[0] != 48)
          {
            DeviceFaultNotify("glpe_cst.cpp", 780, "Init", (char)"ucTmp != 0 || acValue[0] == '0'");
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_cst.cpp", 780, "ucTmp != 0 || acValue[0] == '0'");
          }
          *(&v95)[v10] = v25;
          goto LABEL_15;
        case 2:
          int v23 = atol(__source);
          if (!v23 && __source[0] != 48)
          {
            DeviceFaultNotify("glpe_cst.cpp", 787, "Init", (char)"ulTmp != 0 || acValue[0] == '0'");
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_cst.cpp", 787, "ulTmp != 0 || acValue[0] == '0'");
          }
          *(_DWORD *)(&v95)[v10] = v23;
          goto LABEL_15;
        case 3:
          float v24 = atof(__source);
          *(float *)(&v95)[v10] = v24;
          goto LABEL_15;
        case 4:
          uint64_t v20 = (uint64_t)(&v95)[v10];
          if (*(_DWORD *)__source ^ 0x65757274 | __source[4] && *(unsigned __int16 *)__source != 49)
          {
            BOOL v21 = *(_DWORD *)__source == 1936482662 && *(unsigned __int16 *)&__source[4] == 101;
            if (!v21 && *(unsigned __int16 *)__source != 48)
            {
              DeviceFaultNotify("glpe_cst.cpp", 844, "Init", (char)"false");
              __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_cst.cpp", 844, "false");
            }
            int v22 = *((_DWORD *)&v69 + v10);
            if (v22 == -1)
            {
LABEL_93:
              bzero(*(void **)v20, ((4 * *(unsigned __int8 *)(v20 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
              goto LABEL_15;
            }
            if (v22)
            {
              BlueFin::GlSetBase::Remove((uint64_t)(&v95)[v10], (__int16)v22);
              goto LABEL_15;
            }
LABEL_98:
            BlueFin::GlPeExtSensorSet::getAllSensorSet(v17);
            BlueFin::GlSetBase::operator=(v20, (uint64_t)&BlueFin::GlPeExtSensorSet::getAllSensorSet(void)const::s_otAllSensorSet);
            long long v40 = xmmword_26B434594;
            *(_DWORD *)(v20 + 28) = dword_26B4345A4;
            *(_OWORD *)(v20 + 12) = v40;
            goto LABEL_15;
          }
          int v39 = *((_DWORD *)&v69 + v10);
          if (v39 == -1) {
            goto LABEL_98;
          }
          if (!v39) {
            goto LABEL_93;
          }
          BlueFin::GlPeExtSensorSet::Add((&v95)[v10], v39);
LABEL_15:
          ++v8;
          a2 = v9;
          if (v8 == v58) {
            goto LABEL_101;
          }
          break;
        case 5:
          uint64_t v26 = (&v95)[v10];
          long long __src = v67;
          unsigned __int8 v66 = 8;
          memset(v67, 0, 32);
          if (BlueFin::GlSvIdSet::SetStr(&__src, __source))
          {
            unsigned __int8 v60 = v66;
            memcpy(v64, __src, 4 * v66);
            __int16 v62 = 0;
            unsigned __int8 v61 = 0;
            int v63 = v64[0];
            BlueFin::GlSetIterator::operator++(&v60);
            if (v61 != v60)
            {
              uint64_t v27 = *(void *)v26;
              do
              {
                __int16 v28 = v62;
                uint64_t v29 = BlueFin::GlSvId::s_aucSvId2gnss[v62];
                uint64_t v30 = BlueFin::GlSignalId::s_aucGnss2numSignals[v29];
                if (BlueFin::GlSignalId::s_aucGnss2numSignals[v29])
                {
                  uint64_t v31 = 0;
                  long long v32 = &BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v29];
                  do
                  {
                    if ((v28 + 67) < 0x44u || *v32 == 255) {
                      __int16 v33 = 575;
                    }
                    else {
                      __int16 v33 = BlueFin::GlSignalId::s_ausGnss2signalId[v29]
                    }
                          + v28
                          - BlueFin::GlSvId::s_aucGnss2minSvId[v29]
                          + BlueFin::GlSvId::s_aucGnss2numSvId[v29] * (_WORD)v31;
                    *(_DWORD *)(v27 + 4 * (v33 >> 5)) |= 1 << v33;
                    ++v31;
                    v32 += 7;
                  }
                  while (v30 != v31);
                }
                BlueFin::GlSetIterator::operator++(&v60);
              }
              while (v61 != v60);
            }
          }
          goto LABEL_15;
        case 6:
          uint64_t v34 = (&v95)[v10];
          if (!(*(_DWORD *)__source ^ 0x65757274 | __source[4]) || *(unsigned __int16 *)__source == 49)
          {
            *(_DWORD *)uint64_t v34 = 1;
          }
          else
          {
            BOOL v35 = *(_DWORD *)__source == 1936482662 && *(unsigned __int16 *)&__source[4] == 101;
            if (v35 || *(unsigned __int16 *)__source == 48)
            {
              *(_DWORD *)uint64_t v34 = 0;
            }
            else
            {
              if (*(void *)__source != 0x746C7561666564)
              {
                DeviceFaultNotify("glpe_cst.cpp", 873, "Init", (char)"false");
                __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_cst.cpp", 873, "false");
              }
              *(_DWORD *)uint64_t v34 = 2;
            }
          }
          goto LABEL_15;
        case 7:
          strlcpy((&v95)[v10], __source, 0x100uLL);
          goto LABEL_15;
        case 8:
          uint64_t v36 = (int *)(&v95)[v10];
          *uint64_t v36 = 0;
          uint64_t v37 = strstr(__source, "ALL");
          if (v37) {
            int v38 = -1;
          }
          else {
            int v38 = 0;
          }
          *uint64_t v36 = v38;
          if (strstr(__source, "GPS") && !strstr(__source, "HC_GPS"))
          {
            if (v37) {
              int v38 = -1;
            }
            else {
              int v38 = 12;
            }
            *uint64_t v36 = v38;
          }
          if (strstr(__source, "HC_GPS"))
          {
            v38 |= 4u;
            *uint64_t v36 = v38;
          }
          if (strstr(__source, "BDS"))
          {
            v38 |= 0x10u;
            *uint64_t v36 = v38;
          }
          if (strstr(__source, "QZSS"))
          {
            v38 |= 0x20u;
            *uint64_t v36 = v38;
          }
          if (strstr(__source, "SBAS"))
          {
            v38 |= 0x80u;
            *uint64_t v36 = v38;
          }
          if (strstr(__source, "ASST"))
          {
            v38 |= 0x40u;
            *uint64_t v36 = v38;
          }
          if (strstr(__source, "GAL") && !strstr(__source, "HC_GAL"))
          {
            v38 |= 0x500u;
            *uint64_t v36 = v38;
          }
          if (strstr(__source, "HC_GAL"))
          {
            v38 |= 0x400u;
            *uint64_t v36 = v38;
          }
          if (strstr(__source, "IONEX"))
          {
            *uint64_t v36 = v38 | 0x200;
            *((unsigned char *)this + 2304) = 1;
          }
          goto LABEL_15;
        default:
          DeviceFaultNotify("glpe_cst.cpp", 878, "Init", (char)"false");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_cst.cpp", 878, "false");
      }
    }
  }
LABEL_101:
  uint64_t v56 = a2;
  if (BlueFin::GlSetBase::HasAny((BlueFin::GlPeCST *)((char *)this + 1744))
    || BlueFin::GlSetBase::HasAny((BlueFin::GlPeCST *)((char *)this + 1832))
    || BlueFin::GlSetBase::HasAny((BlueFin::GlPeCST *)((char *)this + 1920))
    || BlueFin::GlSetBase::HasAny((BlueFin::GlPeCST *)((char *)this + 2008))
    || BlueFin::GlSetBase::HasAny((BlueFin::GlPeCST *)((char *)this + 2096)))
  {
    BOOL HasAny = 1;
    uint64_t v42 = (char *)this + 2184;
  }
  else
  {
    uint64_t v42 = (char *)this + 2184;
    BOOL HasAny = BlueFin::GlSetBase::HasAny((BlueFin::GlPeCST *)((char *)this + 2184));
  }
  *((unsigned char *)this + 3736) = HasAny;
  *((unsigned char *)this + 3784) = v58 != 0;
  bzero(&v139, 0x2A0uLL);
  uint64_t v43 = 0;
  uint64_t v95 = (char *)this + 1632;
  uint64_t v96 = (char *)this + 1633;
  uint64_t v97 = (char *)this + 1634;
  uint64_t v98 = (char *)this + 1737;
  uint64_t v99 = (char *)this + 1736;
  unsigned int v100 = (char *)this + 1738;
  char v101 = (char *)this + 1740;
  uint64_t v102 = (char *)this + 1739;
  int v103 = (char *)this + 2272;
  unint64_t v104 = (char *)this + 2276;
  uint64_t v105 = (char *)this + 2280;
  uint64_t v106 = (char *)this + 2284;
  long long v107 = (char *)this + 1672;
  int v108 = (char *)this + 1704;
  char v113 = (char *)this + 1920;
  int v118 = v42;
  int v147 = (char *)this + 2288;
  uint64_t v148 = (char *)this + 2289;
  long long v149 = (char *)this + 2290;
  uint64_t v150 = (char *)this + 2291;
  int v151 = (char *)this + 2292;
  __int16 v152 = (char *)this + 3148;
  uint64_t v153 = (char *)this + 3149;
  int v154 = (char *)this + 3150;
  int v155 = (char *)this + 3151;
  long long v156 = (char *)this + 3152;
  long long v157 = (char *)this + 3153;
  long long v158 = (char *)this + 3154;
  long long v159 = (char *)this + 3155;
  uint64_t v160 = (char *)this + 3156;
  long long v161 = (char *)this + 2293;
  long long v162 = (char *)this + 2294;
  uint64_t v163 = (char *)this + 2296;
  long long v164 = (char *)this + 2300;
  long long v165 = (char *)this + 2304;
  long long v166 = (char *)this + 2320;
  uint64_t v167 = (char *)this + 2323;
  int v168 = (char *)this + 2308;
  int v169 = (char *)this + 2312;
  int v170 = (char *)this + 2316;
  uint64_t v171 = (char *)this + 2835;
  char v172 = (char *)this + 2836;
  char v173 = (char *)this + 2840;
  long long v69 = 0u;
  long long v70 = 0u;
  __int16 v109 = (char *)this + 1744;
  int v110 = (char *)this + 1744;
  long long v71 = 0u;
  long long v72 = 0u;
  unsigned int v111 = (char *)this + 1832;
  char v112 = (char *)this + 1832;
  char v114 = (char *)this + 2008;
  char v115 = (char *)this + 2008;
  char v116 = (char *)this + 2096;
  char v117 = (char *)this + 2096;
  long long v73 = 0u;
  long long v74 = 0u;
  int v119 = (char *)this + 1640;
  int v120 = (char *)this + 1640;
  int v121 = (char *)this + 1640;
  int v122 = (char *)this + 1640;
  int v123 = (char *)this + 1640;
  double v124 = (char *)this + 1640;
  __int16 v125 = (char *)this + 1640;
  char v126 = (char *)this + 1640;
  long long v75 = xmmword_263BBA390;
  long long v76 = xmmword_263BBA3A0;
  uint64_t v127 = (char *)this + 1640;
  int v128 = (char *)this + 1640;
  __int16 v129 = (char *)this + 1640;
  int v130 = (char *)this + 1640;
  __int16 v131 = (char *)this + 1640;
  char v132 = (char *)this + 1640;
  uint64_t v133 = (char *)this + 1640;
  int v134 = (char *)this + 1640;
  long long v77 = xmmword_263BBA3B0;
  long long v78 = xmmword_263BBA3C0;
  __int16 v135 = (char *)this + 1640;
  long long v136 = (char *)this + 1640;
  __int16 v137 = (char *)this + 1640;
  char v138 = (char *)this + 1640;
  long long v79 = xmmword_263BBA3D0;
  uint64_t v139 = (char *)this + 1640;
  int v140 = (char *)this + 1640;
  __int16 v141 = (char *)this + 1640;
  uint64_t v142 = (char *)this + 1640;
  long long v80 = xmmword_263BBA3E0;
  uint64_t v143 = (char *)this + 1640;
  uint64_t v144 = (char *)this + 1640;
  __int16 v145 = (char *)this + 1640;
  int v146 = (char *)this + 1640;
  long long v81 = xmmword_263BBA3F0;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v174 = (char *)this + 2321;
  long long v88 = 0u;
  uint64_t v175 = (char *)this + 2322;
  uint64_t v176 = (char *)this + 2579;
  BOOL v177 = (char *)this + 3160;
  unsigned int v178 = (char *)this + 3248;
  long long v89 = 0u;
  unsigned int v179 = (char *)this + 3336;
  float64x2_t v180 = (char *)this + 2844;
  double v181 = (char *)this + 2845;
  double v182 = (char *)this + 2848;
  long long v90 = 0u;
  long long v183 = (char *)this + 2852;
  uint64_t v184 = (char *)this + 3112;
  uint64_t v185 = (char *)this + 3116;
  long long v186 = (char *)this + 3120;
  long long v91 = 0u;
  long long v187 = (char *)this + 3124;
  long long v188 = (char *)this + 3128;
  uint64_t v189 = (char *)this + 3132;
  float v190 = (char *)this + 3136;
  long long v92 = 0u;
  int v191 = (char *)this + 3140;
  float v192 = (char *)this + 3144;
  int v193 = (char *)this + 3108;
  uint64_t v194 = (char *)this + 2305;
  long long v93 = 0u;
  memset(v94, 0, sizeof(v94));
  long long v195 = (char *)this + 3464;
  uint64_t v196 = (char *)this + 3468;
  v94[0] = 0;
  uint64_t v197 = (char *)this + 3472;
  LODWORD(v94[1]) = 0;
  while (2)
  {
    switch(LODWORD((&BlueFin::stSkfTestParam::aotSetting)[2 * v43 + 1]))
    {
      case 0:
        goto LABEL_125;
      case 1:
      case 2:
        GlCustomLog(111, "testParam: %s=%u\n");
        goto LABEL_126;
      case 3:
        GlCustomLog(111, "testParam: %s=%.1f\n");
        goto LABEL_126;
      case 4:
        char v44 = (unsigned __int8 *)(&v95)[v43];
        int v45 = *((_DWORD *)&v69 + v43);
        if (v45 == -1)
        {
          if (v44[8] && **(_DWORD **)v44 == -1)
          {
            uint64_t v46 = 0;
            do
            {
              if (v44[8] - 1 == v46) {
                break;
              }
              int v47 = *(_DWORD *)(*(void *)v44 + 4 + 4 * v46++);
            }
            while (v47 == -1);
          }
        }
        else if (!v45)
        {
          BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)v44);
        }
LABEL_125:
        GlCustomLog(111, "testParam: %s='%s'\n");
        goto LABEL_126;
      case 5:
        if (BlueFin::GlUtils::m_ucEnabled) {
          BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
        }
        goto LABEL_126;
      case 6:
        goto LABEL_126;
      case 7:
      case 8:
        GlCustomLog(111, "testParam: %s=%s\n");
LABEL_126:
        if (++v43 != 103) {
          continue;
        }
        v57[1] = 0;
        v57[2] = 0;
        *char v57 = 0;
        *((_DWORD *)this + 26) = 1161527296;
        *((_DWORD *)this + 38) = 0;
        v6[1] = 0;
        _OWORD v6[2] = 0;
        *char v6 = 0;
        *((int32x2_t *)this + 8) = vdup_n_s32(0x44FA0000u);
        *((unsigned char *)this + 173) = 1;
        *(_DWORD *)((char *)this + 178) = 13107227;
        HIDWORD(v48) = 1077936128;
        *(void *)((char *)this + 28) = 0x404000003E4CCCCDLL;
        int v49 = *((_DWORD *)v56 + 25);
        *((unsigned char *)this + 172) = v49 == 2;
        *((_DWORD *)this + 42) = v49;
        LODWORD(v48) = *((_DWORD *)v56 + 7);
        *(double *)this = (double)v48;
        *((unsigned char *)this + 1086) = 0;
        *((_DWORD *)this + 194) = 0;
        *((_WORD *)this + 544) = 0;
        *((void *)this + 36) = 0x40C3880000000000;
        bzero(*((void **)this + 39), ((4 * *((unsigned __int8 *)this + 320) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
        uint64_t v50 = 0;
        *((_WORD *)this + 152) = -200;
        *((unsigned char *)this + 109BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
        *((_DWORD *)this + 273) = 0;
        *((_DWORD *)this + 77) = 0;
        *((_WORD *)this + 548) = 256;
        *((_WORD *)this + 542) = 0;
        *(_DWORD *)((char *)this + 1105) = 67436544;
        *((unsigned char *)this + 111BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
        *((_DWORD *)this + 278) = 0;
        *((_DWORD *)this + 378) = 0;
        *((unsigned char *)this + 1516) = 0;
        *((unsigned char *)this + 804) = 0;
        *((_DWORD *)this + 20BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
        *((void *)this + 14BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
        *((void *)this + 142) = 0;
        *((void *)this + 14BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
        *((_DWORD *)this + 286) = 0;
        *((void *)this + 99) = 0x461C400000000000;
        *((void *)this + 10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0x461C400000000000;
        *((void *)this + 37) = 0x3F00000000000000;
        *((unsigned char *)this + 456) = 0;
        uint64_t v51 = *((void *)this + 84);
        do
        {
          uint64_t v52 = v51 + v50;
          *(_DWORD *)uint64_t v52 = 0;
          *(unsigned char *)(v52 + 4) = 0;
          *(_DWORD *)(v52 + 8) = -1;
          *(_WORD *)(v52 + 12) = 575;
          v50 += 16;
        }
        while (v50 != 192);
        bzero(*((void **)this + 85), ((4 * *((unsigned __int8 *)this + 688) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
        *((_OWORD *)this + 12) = *((_OWORD *)this + 5);
        *((void *)this + 26) = *((void *)this + 12);
        *((_DWORD *)this + 54) = 1161527296;
        *((_OWORD *)this + 14) = *((_OWORD *)this + 7);
        *((void *)this + 3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *((void *)this + 16);
        *((void *)this + 32) = *((void *)this + 18);
        *((_DWORD *)this + 66) = 0;
        bzero(*((void **)this + 51), ((4 * *((unsigned __int8 *)this + 416) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
        *((void *)this + 35) = 0;
        *((void *)this + 102) = 0;
        *((void *)this + 104) = 0;
        *((void *)this + 103) = 0;
        *((void *)this + 11BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
        *((_DWORD *)this + 21BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1254248837;
        *((_DWORD *)this + 222) = 0;
        *(void *)((char *)this + 78BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
        *((_DWORD *)this + 226) = 0;
        bzero(*((void **)this + 114), ((4 * *((unsigned __int8 *)this + 920) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
        int32x4_t v59 = vdupq_n_s32(0x42C60000u);
        *(int32x4_t *)((char *)this + 964) = v59;
        *(void *)((char *)this + 98BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0x42C6000042C60000;
        *((_DWORD *)this + 27BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1120272384;
        *((_DWORD *)this + 248) = 0;
        bzero(*((void **)this + 125), ((4 * *((unsigned __int8 *)this + 1008) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
        __n128 result = (__n128)v59;
        *(int32x4_t *)((char *)this + 1052) = v59;
        *(void *)((char *)this + 1068) = 0x42C6000042C60000;
        *((_WORD *)this + 759) = 0;
        return result;
      default:
        long long v54 = "false";
        DeviceFaultNotify("glpe_cst.cpp", 983, "OutputToLog", (char)"false");
        int v55 = 983;
        goto LABEL_132;
    }
  }
}

BlueFin::stSkfTestParam *BlueFin::stSkfTestParam::stSkfTestParam(BlueFin::stSkfTestParam *this)
{
  *(_WORD *)this = 0;
  *(_OWORD *)((char *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  unsigned int v2 = (long long *)((char *)this + 20);
  *((void *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = (char *)this + 20;
  BOOL v3 = (char *)this + 8;
  *((unsigned char *)this + 2) = 0;
  *((unsigned char *)this + 16) = 5;
  *(_OWORD *)((char *)this + 52) = 0u;
  uint64_t v4 = (_OWORD *)((char *)this + 52);
  *((_DWORD *)this + 9) = 0;
  *((void *)this + 5) = (char *)this + 52;
  uint64_t v5 = (char *)this + 40;
  *((unsigned char *)this + 48) = 5;
  *((_DWORD *)this + 17) = 0;
  *(_OWORD *)((char *)this + 84) = 0u;
  char v6 = (_OWORD *)((char *)this + 84);
  *((void *)this + 9) = (char *)this + 84;
  char v7 = (char *)this + 72;
  *((unsigned char *)this + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 5;
  *((_DWORD *)this + 25) = 0;
  *((_DWORD *)this + 26) = 251723777;
  *((unsigned char *)this + 108) = 10;
  *((void *)this + 14) = (char *)this + 124;
  *((unsigned char *)this + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 19;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 172) = 0u;
  *(_OWORD *)((char *)this + 156) = 0u;
  *(_OWORD *)((char *)this + 14BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 212) = 0u;
  *(_OWORD *)((char *)this + 124) = 0u;
  *((void *)this + 25) = (char *)this + 212;
  *((unsigned char *)this + 208) = 19;
  *(_OWORD *)((char *)this + 228) = 0u;
  *(_OWORD *)((char *)this + 244) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *(_OWORD *)((char *)this + 26BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 316) = 0u;
  *(_OWORD *)((char *)this + 332) = 0u;
  *(_OWORD *)((char *)this + 348) = 0u;
  *(_OWORD *)((char *)this + 36BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 30BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *((void *)this + 36) = (char *)this + 300;
  *((unsigned char *)this + 296) = 19;
  *(_OWORD *)((char *)this + 404) = 0u;
  *(_OWORD *)((char *)this + 42BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 436) = 0u;
  *(_OWORD *)((char *)this + 388) = 0u;
  *((void *)this + 47) = (char *)this + 388;
  *((unsigned char *)this + 384) = 19;
  *(_OWORD *)((char *)this + 492) = 0u;
  *(_OWORD *)((char *)this + 508) = 0u;
  *(_OWORD *)((char *)this + 524) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 476) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((void *)this + 58) = (char *)this + 476;
  *((unsigned char *)this + 472) = 19;
  *(_OWORD *)((char *)this + 628) = 0u;
  *(_OWORD *)((char *)this + 612) = 0u;
  *(_OWORD *)((char *)this + 596) = 0u;
  *(_OWORD *)((char *)this + 58BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 564) = 0u;
  *((void *)this + 69) = (char *)this + 564;
  *((unsigned char *)this + 56BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 19;
  *((_DWORD *)this + 16BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = -1;
  *((void *)this + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0xFFFFFFFF00000000;
  *((_DWORD *)this + 164) = 0x10000;
  *((_WORD *)this + 33BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
  *((unsigned char *)this + 662) = 0;
  *((void *)this + 83) = 0x200000002;
  *((_WORD *)this + 336) = 1;
  *((_DWORD *)this + 169) = 2;
  *((void *)this + 85) = 0x200000002;
  *((_WORD *)this + 344) = 0;
  *((unsigned char *)this + 69BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((unsigned char *)this + 1203) = 0;
  *(void *)((char *)this + 1204) = 0x200000002;
  *((_WORD *)this + 606) = 257;
  *((_DWORD *)this + 304) = 2;
  *((unsigned char *)this + 1476) = 0;
  *((void *)this + 185) = 0x200000002;
  *((_DWORD *)this + 372) = 2;
  *((_DWORD *)this + 379) = 0;
  *(void *)((char *)this + 1508) = 0;
  *(_OWORD *)((char *)this + 1492) = 0u;
  *((unsigned char *)this + 152BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
  *(_DWORD *)((char *)this + 152BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *(_OWORD *)((char *)this + 1556) = 0u;
  *(_OWORD *)((char *)this + 1572) = 0u;
  *(_OWORD *)((char *)this + 1588) = 0u;
  *(_OWORD *)((char *)this + 154BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *((void *)this + 19BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = (char *)this + 1540;
  *((unsigned char *)this + 1536) = 19;
  *((_OWORD *)this + 10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 1644) = 0u;
  *(_OWORD *)((char *)this + 166BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 1676) = 0u;
  *(_OWORD *)((char *)this + 169BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 1628) = 0u;
  *((void *)this + 202) = (char *)this + 1628;
  *((unsigned char *)this + 1624) = 19;
  *(void *)((char *)this + 1732) = 0;
  *(void *)((char *)this + 1724) = 0;
  *((void *)this + 214) = (char *)this + 1724;
  *((unsigned char *)this + 172BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 5;
  *((_DWORD *)this + 435) = 0;
  *(_OWORD *)((char *)this + 1772) = 0u;
  *(_OWORD *)((char *)this + 1788) = 0u;
  *(_OWORD *)((char *)this + 1804) = 0u;
  *(_OWORD *)((char *)this + 1816) = 0u;
  *(_OWORD *)((char *)this + 1756) = 0u;
  *((void *)this + 218) = (char *)this + 1756;
  *((unsigned char *)this + 1752) = 19;
  *((void *)this + 229) = 0x20000020CLL;
  *((void *)this + 262) = 0;
  *((unsigned char *)this + 2104) = 0;
  BlueFin::GlPeExtSensorSet::getAllSensorSet(this);
  int v8 = (BlueFin::GlPeExtSensorSet *)BlueFin::GlSetBase::operator=((uint64_t)v3, (uint64_t)&BlueFin::GlPeExtSensorSet::getAllSensorSet(void)const::s_otAllSensorSet);
  long long v9 = xmmword_26B434594;
  *((_DWORD *)this + 9) = dword_26B4345A4;
  long long *v2 = v9;
  BlueFin::GlPeExtSensorSet::getAllSensorSet(v8);
  uint64_t v10 = (BlueFin::GlPeExtSensorSet *)BlueFin::GlSetBase::operator=((uint64_t)v5, (uint64_t)&BlueFin::GlPeExtSensorSet::getAllSensorSet(void)const::s_otAllSensorSet);
  _OWORD *v4 = xmmword_26B434594;
  *((_DWORD *)this + 17) = dword_26B4345A4;
  BlueFin::GlPeExtSensorSet::getAllSensorSet(v10);
  BlueFin::GlSetBase::operator=((uint64_t)v7, (uint64_t)&BlueFin::GlPeExtSensorSet::getAllSensorSet(void)const::s_otAllSensorSet);
  *char v6 = xmmword_26B434594;
  *((_DWORD *)this + 25) = dword_26B4345A4;
  *(_OWORD *)((char *)this + 122BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 1236) = 0u;
  *(_OWORD *)((char *)this + 1252) = 0u;
  *(_OWORD *)((char *)this + 1268) = 0u;
  *(_OWORD *)((char *)this + 1284) = 0u;
  *(_OWORD *)((char *)this + 130BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 1316) = 0u;
  *(_OWORD *)((char *)this + 1332) = 0u;
  *(_OWORD *)((char *)this + 1348) = 0u;
  *(_OWORD *)((char *)this + 1364) = 0u;
  *(_OWORD *)((char *)this + 138BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 1396) = 0u;
  *(_OWORD *)((char *)this + 1412) = 0u;
  *(_OWORD *)((char *)this + 1428) = 0u;
  *(_OWORD *)((char *)this + 1444) = 0u;
  *(_OWORD *)((char *)this + 146BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *((_OWORD *)this + 13BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *((_OWORD *)this + 129) = 0u;
  *((_OWORD *)this + 128) = 0u;
  *((_OWORD *)this + 127) = 0u;
  *((_OWORD *)this + 126) = 0u;
  *((_OWORD *)this + 125) = 0u;
  *((_OWORD *)this + 124) = 0u;
  *((_OWORD *)this + 123) = 0u;
  *((_OWORD *)this + 122) = 0u;
  *((_OWORD *)this + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
  *((_OWORD *)this + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *((_OWORD *)this + 119) = 0u;
  *((_OWORD *)this + 118) = 0u;
  *((_OWORD *)this + 117) = 0u;
  *((_OWORD *)this + 116) = 0u;
  *((_OWORD *)this + 115) = 0u;
  *(_OWORD *)((char *)this + 69BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
  *(_OWORD *)((char *)this + 707) = 0u;
  *(_OWORD *)((char *)this + 723) = 0u;
  *(_OWORD *)((char *)this + 739) = 0u;
  *(_OWORD *)((char *)this + 755) = 0u;
  *(_OWORD *)((char *)this + 77BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
  *(_OWORD *)((char *)this + 787) = 0u;
  *(_OWORD *)((char *)this + 803) = 0u;
  *(_OWORD *)((char *)this + 819) = 0u;
  *(_OWORD *)((char *)this + 835) = 0u;
  *(_OWORD *)((char *)this + 85BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
  *(_OWORD *)((char *)this + 867) = 0u;
  *(_OWORD *)((char *)this + 883) = 0u;
  *(_OWORD *)((char *)this + 899) = 0u;
  *(_OWORD *)((char *)this + 915) = 0u;
  *(_OWORD *)((char *)this + 93BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
  *(_OWORD *)((char *)this + 947) = 0u;
  *(_OWORD *)((char *)this + 963) = 0u;
  *(_OWORD *)((char *)this + 979) = 0u;
  *(_OWORD *)((char *)this + 995) = 0u;
  *(_OWORD *)((char *)this + 101BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
  *(_OWORD *)((char *)this + 1027) = 0u;
  *(_OWORD *)((char *)this + 1043) = 0u;
  *(_OWORD *)((char *)this + 1059) = 0u;
  *(_OWORD *)((char *)this + 1075) = 0u;
  *(_OWORD *)((char *)this + 109BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
  *(_OWORD *)((char *)this + 1107) = 0u;
  *(_OWORD *)((char *)this + 1123) = 0u;
  *(_OWORD *)((char *)this + 1139) = 0u;
  *(_OWORD *)((char *)this + 1155) = 0u;
  *(_OWORD *)((char *)this + 117BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
  *(_OWORD *)((char *)this + 1187) = 0u;
  return this;
}

uint64_t *BlueFin::GlPeExtSensorSet::getAllSensorSet(BlueFin::GlPeExtSensorSet *this)
{
  {
    BlueFin::GlPeExtSensorSet::getAllSensorSet(void)const::s_otAllSensorSet = (uint64_t)&xmmword_26B434594;
    byte_26B434590 = 5;
    xmmword_26B434594 = 0uLL;
    dword_26B4345A4 = 0;
  }
  if (!BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)&BlueFin::GlPeExtSensorSet::getAllSensorSet(void)const::s_otAllSensorSet))
  {
    unsigned int v1 = 0;
    uint64_t v2 = BlueFin::GlPeExtSensorSet::getAllSensorSet(void)const::s_otAllSensorSet;
    do
    {
      *(_DWORD *)(v2 + 4 * (v1 >> 5)) |= 1 << v1;
      ++v1;
    }
    while (v1 != 34);
    *(_DWORD *)(v2 + 12) |= 0x70u;
    *(_DWORD *)(v2 + 4) |= 0x18u;
  }
  return &BlueFin::GlPeExtSensorSet::getAllSensorSet(void)const::s_otAllSensorSet;
}

uint64_t BlueFin::stSkfStatus::stSkfStatus(uint64_t this)
{
  uint64_t v1 = 0;
  *(_OWORD *)(this + 32) = 0u;
  *(void *)this = 0;
  *(_OWORD *)(this + 8) = 0u;
  *(_DWORD *)(this + 24) = 0;
  *(void *)(this + 48) = 0;
  *(void *)(this + 56) = &off_270EBC600;
  *(_OWORD *)(this + 64) = xmmword_263BB3BC0;
  *(_DWORD *)(this + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = -1;
  *(_DWORD *)(this + 116) = 0;
  *(void *)(this + 88) = 0;
  *(_OWORD *)(this + 96) = 0u;
  *(_WORD *)(this + 112) = 0;
  *(_OWORD *)(this + 132) = 0u;
  *(void *)(this + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = this + 132;
  *(unsigned char *)(this + 128) = 8;
  *(_OWORD *)(this + 148) = 0u;
  *(void *)(this + 168) = this + 180;
  *(unsigned char *)(this + 176) = 8;
  *(_OWORD *)(this + 228) = 0u;
  *(_OWORD *)(this + 18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(this + 196) = 0u;
  *(void *)(this + 216) = this + 228;
  *(unsigned char *)(this + 224) = 8;
  *(_OWORD *)(this + 244) = 0u;
  *(unsigned char *)(this + 264) = 0;
  *(void *)(this + 48BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = this + 288;
  *(_OWORD *)(this + 50BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(void *)(this + 488) = this + 500;
  *(unsigned char *)(this + 496) = 19;
  *(void *)(this + 672) = 0;
  *(_OWORD *)(this + 656) = 0u;
  *(_DWORD *)(this + 648) = 0;
  *(_OWORD *)(this + 616) = 0u;
  *(_OWORD *)(this + 632) = 0u;
  *(unsigned char *)(this + 612) = 0;
  *(_OWORD *)(this + 58BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(this + 596) = 0u;
  *(_OWORD *)(this + 548) = 0u;
  *(_OWORD *)(this + 564) = 0u;
  *(_OWORD *)(this + 516) = 0u;
  *(_OWORD *)(this + 532) = 0u;
  *(void *)(this + 68BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = &off_270EBC600;
  *(_OWORD *)(this + 688) = xmmword_263BB3BC0;
  *(_DWORD *)(this + 704) = -1;
  *(_DWORD *)(this + 712) = 0;
  *(_OWORD *)(this + 748) = 0u;
  *(_OWORD *)(this + 732) = 0u;
  *(void *)(this + 72BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = this + 732;
  *(unsigned char *)(this + 728) = 8;
  *(_OWORD *)(this + 768) = xmmword_263BBA380;
  int32x2_t v2 = vdup_n_s32(0x42C60000u);
  *(int32x2_t *)(this + 784) = v2;
  *(_DWORD *)(this + 792) = 1120272384;
  *(_DWORD *)(this + 80BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_OWORD *)(this + 82BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(void *)(this + 808) = this + 820;
  *(unsigned char *)(this + 816) = 8;
  *(_OWORD *)(this + 836) = 0u;
  *(_OWORD *)(this + 856) = xmmword_263BBA380;
  *(int32x2_t *)(this + 872) = v2;
  *(_DWORD *)(this + 88BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1120272384;
  *(_DWORD *)(this + 903) = 0;
  *(_OWORD *)(this + 888) = 0u;
  *(_DWORD *)(this + 908) = 0;
  *(_DWORD *)(this + 91BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *(_DWORD *)(this + 915) = 1029;
  *(_DWORD *)(this + 92BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(this + 944) = 0;
  *(_DWORD *)(this + 952) = 0;
  *(_OWORD *)(this + 928) = 0u;
  *(unsigned char *)(this + 96BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_OWORD *)(this + 98BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(void *)(this + 968) = this + 980;
  *(unsigned char *)(this + 976) = 19;
  *(_OWORD *)(this + 996) = 0u;
  *(_OWORD *)(this + 1012) = 0u;
  *(_OWORD *)(this + 1028) = 0u;
  *(_OWORD *)(this + 104BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(void *)(this + 1056) = this + 1068;
  *(unsigned char *)(this + 1064) = 19;
  *(_OWORD *)(this + 1068) = 0u;
  *(_OWORD *)(this + 1156) = 0u;
  *(_OWORD *)(this + 1128) = 0u;
  *(_OWORD *)(this + 1116) = 0u;
  *(_OWORD *)(this + 110BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(this + 1084) = 0u;
  *(void *)(this + 1144) = this + 1156;
  *(unsigned char *)(this + 1152) = 19;
  *(_OWORD *)(this + 1216) = 0u;
  *(_OWORD *)(this + 1204) = 0u;
  *(_OWORD *)(this + 1172) = 0u;
  *(_OWORD *)(this + 1188) = 0u;
  *(void *)(this + 1232) = this + 1244;
  *(unsigned char *)(this + 124BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 19;
  *(_DWORD *)(this + 1376) = 0;
  *(_WORD *)(this + 138BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(unsigned char *)(this + 1384) = 0;
  *(_OWORD *)(this + 1388) = 0u;
  *(void *)(this + 1404) = 0;
  *(unsigned char *)(this + 1412) = 0;
  *(_WORD *)(this + 1372) = 0;
  *(_OWORD *)(this + 1356) = 0u;
  *(_OWORD *)(this + 134BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(this + 1324) = 0u;
  *(_OWORD *)(this + 1308) = 0u;
  *(_OWORD *)(this + 1292) = 0u;
  *(_OWORD *)(this + 1276) = 0u;
  *(_OWORD *)(this + 126BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(this + 1244) = 0u;
  *(_DWORD *)(this + 1416) = 1000;
  *(unsigned char *)(this + 142BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  do
  {
    uint64_t v3 = this + v1;
    *(_DWORD *)(v3 + 288) = 0;
    *(unsigned char *)(v3 + 292) = 0;
    *(_DWORD *)(v3 + 296) = -1;
    *(_WORD *)(v3 + 30BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 575;
    v1 += 16;
  }
  while (v1 != 192);
  return this;
}

uint64_t BlueFin::GlPeNavGnssMeasMgr::GlPeNavGnssMeasMgr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, BlueFin::GlPeTimeManager *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14 = 0;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  *(void *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a7;
  *(void *)(a1 + 48) = a8;
  *(void *)(a1 + 56) = a10;
  *(void *)(a1 + 64) = a11;
  do
  {
    uint64_t v15 = a1 + v14;
    *(unsigned char *)(v15 + 72) = 0;
    *(_DWORD *)(v15 + 76) = -1;
    *(_WORD *)(v15 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 575;
    *(_DWORD *)(v15 + 104) = 0;
    *(void *)(v15 + 92) = 0;
    *(void *)(v15 + 84) = 0;
    v14 += 36;
    *(_WORD *)(v15 + 10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  }
  while (v14 != 432);
  *(void *)(a1 + 504) = a3;
  BlueFin::GlPeSvVisibilityCache::GlPeSvVisibilityCache((BlueFin::GlPeSvVisibilityCache *)(a1 + 512), a6);
  uint64_t v16 = 0;
  *(_DWORD *)(a1 + 2208) = 0;
  *(unsigned char *)(a1 + 2212) = 0;
  *(void *)(a1 + 224BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a3;
  *(void *)(a1 + 2248) = a8;
  *(void *)(a1 + 2256) = a9;
  *(void *)(a1 + 256BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 2272;
  do
  {
    unsigned int v17 = (void *)(*(void *)(a1 + 2560) + v16);
    *(void *)((char *)v17 + 7) = 0;
    *unsigned int v17 = 0;
    v16 += 16;
  }
  while (v16 != 288);
  for (uint64_t i = 0; i != 288; i += 16)
  {
    char v19 = (void *)(*(void *)(a1 + 2560) + i);
    *(void *)((char *)v19 + 7) = 0;
    *char v19 = 0;
  }
  *(_DWORD *)(a1 + 2264) = -7200001;
  *(unsigned char *)(a1 + 2268) = 0;
  *(_DWORD *)(a1 + 2592) = -1;
  return a1;
}

__n128 BlueFin::GlPeCoarseTime::GlPeCoarseTime(BlueFin::GlPeCoarseTime *this, const BlueFin::GlPeTimeManager *a2, const BlueFin::GlPeMsmtMgr *a3, const BlueFin::GlPeSatAidInfo *a4)
{
  *((void *)this + 3) = a2;
  *((void *)this + 4) = a3;
  *((void *)this + 5) = a4;
  if (!a4)
  {
    DeviceFaultNotify("glpe_coarsetime.cpp", 65, "GlPeCoarseTime", (char)"m_potSatAidInfo != nullptr");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_coarsetime.cpp", 65, "m_potSatAidInfo != nullptr");
  }
  result.n128_u64[0] = 0xFFFFFFFF00000000;
  result.n128_u64[1] = 0xFFFFFFFF00000000;
  *(__n128 *)this = result;
  *((_DWORD *)this + 4) = -7200001;
  *((_WORD *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  return result;
}

uint64_t BlueFin::GlPeNavAid::GlPeNavAid(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, uint64_t a10)
{
  uint64_t v11 = 0;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  *(void *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a7;
  *(void *)(a1 + 48) = a8;
  *(_OWORD *)(a1 + 56) = a9;
  *(void *)(a1 + 72) = a10;
  *(unsigned char *)(a1 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_WORD *)(a1 + 82) = 0;
  *(void *)(a1 + 264) = a1 + 96;
  do
  {
    uint64_t v12 = *(void *)(a1 + 264) + v11;
    *(void *)(v12 + 12) = 0;
    *(void *)uint64_t v12 = v12 + 12;
    *(unsigned char *)(v12 + 8) = 2;
    v11 += 24;
  }
  while (v11 != 168);
  BlueFin::GlPeNavSatAidMgr::GlPeNavSatAidMgr(a1 + 288);
  *(void *)(a1 + 1348BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 8384;
  *(_DWORD *)(a1 + 13488) = 0;
  *(_WORD *)(a1 + 13492) = 0;
  uint64_t v13 = -5096;
  do
  {
    uint64_t v14 = *(void *)(a1 + 13480) + v13;
    *(void *)(v14 + 5144) = 0;
    *(_OWORD *)(v14 + 5096) = 0uLL;
    *(_OWORD *)(v14 + 5112) = 0uLL;
    *(_OWORD *)(v14 + 5125) = 0uLL;
    v13 += 56;
  }
  while (v13);
  uint64_t v15 = 0;
  uint64_t v16 = *(void *)(a1 + 264);
  do
  {
    bzero(*(void **)(v16 + v15), ((4 * *(unsigned __int8 *)(v16 + v15 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    v15 += 24;
  }
  while (v15 != 168);
  return a1;
}

uint64_t BlueFin::GlPeNavSatAidMgr::GlPeNavSatAidMgr(uint64_t this)
{
  uint64_t v1 = 0;
  *(void *)(this + 8008) = this;
  *(unsigned char *)(this + 8016) = 0;
  *(_OWORD *)(this + 8052) = 0u;
  *(_OWORD *)(this + 8036) = 0u;
  *(void *)(this + 8024) = this + 8036;
  *(unsigned char *)(this + 8032) = 8;
  uint64_t v2 = 91;
  do
  {
    uint64_t v3 = *(void *)(this + 8008) + v1;
    *(_DWORD *)uint64_t v3 = 1;
    *(void *)(v3 + 32) = 0;
    *(void *)(v3 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
    *(void *)(v3 + 45) = 0;
    *(void *)(v3 + 56) = 0;
    *(void *)(v3 + 64) = 0;
    *(_DWORD *)(v3 + 72) = 0;
    *(void *)(v3 + 76) = -1;
    *(unsigned char *)(v3 + 84) = 0;
    *(void *)(v3 + 16) = 0;
    *(void *)(v3 + 24) = 0;
    *(void *)(v3 + 8) = 0;
    v1 += 88;
    *(_DWORD *)(v3 + 32) = 0;
    --v2;
  }
  while (v2);
  return this;
}

uint64_t BlueFin::GlPeSvVisibilityCache::Deserialize(BlueFin::GlPeSvVisibilityCache *this, BlueFin::GlSysLogEntry *a2)
{
  BlueFin::GlPeSvVisibilityCacheData::GlPeSvVisibilityCacheData(&v6);
  BlueFin::GlPeSvVisibilityCacheData::Deserialize((BlueFin::GlPeSvVisibilityCacheData *)&v6, a2);
  uint64_t result = BlueFin::GlPeSvVisibilityCache::SetSvVisibilityArrayElmt((uint64_t)this, (uint64_t)&v6);
  *((_WORD *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = -1;
  *((unsigned char *)this + 16) = 0;
  uint64_t v5 = *((void *)this + 210);
  *(_WORD *)(v5 + 8) = 0;
  *(void *)uint64_t v5 = 0;
  return result;
}

uint64_t BlueFin::GlPeSvVisibilityCacheData::operator=(uint64_t result, uint64_t a2)
{
  uint64_t v2 = 0;
  *(void *)(result + 16) = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 128);
  uint64_t v4 = *(void *)(result + 128);
  do
  {
    uint64_t v5 = v4 + v2;
    *(_WORD *)uint64_t v5 = *(_WORD *)(v3 + v2);
    *(_DWORD *)(v5 + 4) = *(_DWORD *)(v3 + v2 + 4);
    v2 += 8;
  }
  while (v2 != 96);
  return result;
}

uint64_t BlueFin::GlPeSvVisibilityCacheData::Deserialize(BlueFin::GlPeSvVisibilityCacheData *this, BlueFin::GlSysLogEntry *a2)
{
  BOOL v2 = *((_DWORD *)a2 + 2) == 84 && *((unsigned char *)a2 + 12) == 1;
  uint64_t v3 = v2;
  if (!v2) {
    return v3;
  }
  int U8 = BlueFin::GlSysLogEntry::GetU8(a2);
  if (U8)
  {
    int v7 = U8;
    int v8 = 0;
    do
    {
      int v9 = *((unsigned __int8 *)&BlueFin::GlImplGnss::m_aucFromImplSvIdToEnabledSvId
           + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion
           + BlueFin::GlSysLogEntry::GetU8(a2));
      char v10 = BlueFin::GlSysLogEntry::GetU8(a2);
      int U32 = BlueFin::GlSysLogEntry::GetU32(a2);
      if (v9) {
        BOOL v12 = v8 == 12;
      }
      else {
        BOOL v12 = 1;
      }
      if (!v12)
      {
        uint64_t v13 = *((void *)this + 16) + 8 * v8;
        *(unsigned char *)uint64_t v13 = v9;
        *(unsigned char *)(v13 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v10;
        *(_DWORD *)(v13 + 4) = U32;
        ++v8;
      }
      --v7;
    }
    while (v7);
  }
  unsigned __int16 v14 = BlueFin::GlSysLogEntry::GetU32(a2);
  double v15 = (double)BlueFin::GlSysLogEntry::GetU32(a2) * 0.001;
  double v16 = fmod(v15, 1.0);
  if (v16 < 0.0 || v16 >= 1.0)
  {
    BOOL v21 = "dFracSec >= 0.0 && dFracSec < 1.0";
    DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
    int v22 = "glpe_timepoint.h";
    int v23 = 173;
    goto LABEL_27;
  }
  double v18 = v16 * 4294967300.0 + 0.5;
  unsigned int v19 = v18;
  if (v18 >= 4294967300.0) {
    unsigned int v19 = -1;
  }
  *((_DWORD *)this + 4) = v19;
  *((_DWORD *)this + 5) = v15 + 604800 * v14;
  if (*((unsigned __int16 *)a2 + 11) != *((unsigned __int16 *)a2 + 10))
  {
    BOOL v21 = "otEntry.DataSize() == otEntry.ReadIdx()";
    DeviceFaultNotify("glpe_svvisibilitycache.cpp", 201, "Deserialize", (char)"otEntry.DataSize() == otEntry.ReadIdx()");
    int v22 = "glpe_svvisibilitycache.cpp";
    int v23 = 201;
LABEL_27:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v22, v23, v21);
  }
  return v3;
}

uint64_t BlueFin::GlPeSvVisibilityCache::SetSvVisibilityArrayElmt(uint64_t a1, uint64_t a2)
{
  int v4 = *(__int16 *)(a1 + 18);
  if (v4 < 0)
  {
LABEL_6:
    if ((__int16)v4 < 9) {
      __int16 v13 = v4 + 1;
    }
    else {
      __int16 v13 = 0;
    }
    *(_WORD *)(a1 + 18) = v13;
    uint64_t v14 = *(void *)(a1 + 1632) + 160 * v13;
    return BlueFin::GlPeSvVisibilityCacheData::operator=(v14, a2);
  }
  else
  {
    uint64_t v5 = 0;
    while (1)
    {
      uint64_t v6 = *(void *)(a1 + 1632) + v5;
      uint64_t v7 = *(void *)(v6 + 8);
      v6 += 8;
      unsigned int v8 = (*(uint64_t (**)(uint64_t))(v7 + 32))(v6);
      LODWORD(v9) = *(_DWORD *)(v6 + 8);
      double v10 = (double)v9 * 2.32830644e-10 + (double)v8;
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(a2 + 8) + 32))(a2 + 8);
      LODWORD(v12) = *(_DWORD *)(a2 + 16);
      if (vabdd_f64(v10, (double)v12 * 2.32830644e-10 + (double)result) < 1.0) {
        break;
      }
      v5 += 160;
      if (v5 == 1600)
      {
        LOWORD(v4) = *(_WORD *)(a1 + 18);
        goto LABEL_6;
      }
    }
  }
  return result;
}

BlueFin::GlPeSvVisibilityCache *BlueFin::GlPeSvVisibilityCache::GlPeSvVisibilityCache(BlueFin::GlPeSvVisibilityCache *this, BlueFin::GlPeTimeManager *a2)
{
  uint64_t v3 = 0;
  *(unsigned char *)this = 1;
  *((void *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = a2;
  *((unsigned char *)this + 16) = 0;
  *(_DWORD *)((char *)this + 18) = -1;
  *((void *)this + 204) = (char *)this + 32;
  *((void *)this + 21BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = (char *)this + 1664;
  *((void *)this + 208) = 0;
  *((_DWORD *)this + 418) = 0;
  do
  {
    BlueFin::GlPeSvVisibilityCacheData::GlPeSvVisibilityCacheData((void *)(*((void *)this + 204) + v3));
    v3 += 160;
  }
  while (v3 != 1600);
  return this;
}

void *BlueFin::GlPeSvVisibilityCacheData::GlPeSvVisibilityCacheData(void *this)
{
  uint64_t v1 = 0;
  *this = &unk_270EC1BA8;
  this[1] = &off_270EBC600;
  this[2] = 0;
  this[16] = this + 4;
  do
  {
    BOOL v2 = &this[v1];
    *((_WORD *)v2 + 16) = -256;
    *((_DWORD *)v2 + 9) = 0;
    ++v1;
  }
  while (v1 != 12);
  return this;
}

uint64_t BlueFin::GlPeLtoMgr::deserializeLtoGnssGpsTimeoffs(BlueFin::GlPeLtoMgr *this, BlueFin::GlSysLogEntry *a2)
{
  double v15 = &unk_270EC15D8;
  unsigned int v16 = 7;
  __int16 v17 = 0;
  uint64_t v18 = 0;
  int v3 = BlueFin::GlPeLtoGnssGpsTimeoffsDataInterface::Deserialize((BlueFin::GlPeLtoGnssGpsTimeoffsDataInterface *)&v15, a2);
  uint64_t result = 0;
  if (v3)
  {
    if (v16 == 3)
    {
      *(_WORD *)unsigned int v19 = v17;
      *(void *)&v19[4] = v18;
      BlueFin::GlPeLtoMgr::UpdateGnssGpsTimeOffsetsJavd((uint64_t)this, (unsigned __int16 *)v19, 0);
    }
    else
    {
      if (v16 == 4)
      {
        __int16 v10 = v17;
        int v11 = v18;
        int v12 = HIDWORD(v18);
        __int16 v13 = (_DWORD *)*((void *)this + 11);
        *(void *)unsigned int v19 = 0x400000000;
        *(_WORD *)&v19[8] = v17;
        uint64_t v20 = v18;
        BlueFin::GlPeTimeManager::SetUncmprsdSystemOffset(v13, (int *)v19);
        *((_WORD *)this + 10052) = v10;
        *((_DWORD *)this + 5027) = v11;
        *((_DWORD *)this + 5028) = v12;
        int v9 = *((_DWORD *)this + 6616) | 0x400;
      }
      else
      {
        if (v16 != 5) {
          return 0;
        }
        __int16 v5 = v17;
        int v6 = v18;
        int v7 = HIDWORD(v18);
        unsigned int v8 = (_DWORD *)*((void *)this + 11);
        *(void *)unsigned int v19 = 0x300000000;
        *(_WORD *)&v19[8] = v17;
        uint64_t v20 = v18;
        BlueFin::GlPeTimeManager::SetUncmprsdSystemOffset(v8, (int *)v19);
        *((_WORD *)this + 1004BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v5;
        *((_DWORD *)this + 502BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v6;
        *((_DWORD *)this + 5022) = v7;
        int v9 = *((_DWORD *)this + 6616) | 0x100;
      }
      *((_DWORD *)this + 6616) = v9;
    }
    if (v16 > 6) {
      uint64_t v14 = "INV";
    }
    else {
      uint64_t v14 = off_2655DF758[v16];
    }
    GlCustomLog(14, "LtoMgr: read LTO %s to GPS Timeoffsets from NVMEM!\n", v14);
    return 1;
  }
  return result;
}

uint64_t BlueFin::GlPeLtoGnssGpsTimeoffsDataInterface::Deserialize(BlueFin::GlPeLtoGnssGpsTimeoffsDataInterface *this, BlueFin::GlSysLogEntry *a2)
{
  BOOL v2 = *((_DWORD *)a2 + 2) == 125 && *((unsigned char *)a2 + 12) == 1;
  uint64_t v3 = v2;
  if (v2)
  {
    *((_DWORD *)this + 2) = BlueFin::GlImplGnss::m_aucImplGnssTable[BlueFin::GlSysLogEntry::GetU8(a2)];
    *((_WORD *)this + 6) = BlueFin::GlSysLogEntry::GetU16(a2);
    *((_DWORD *)this + 4) = BlueFin::GlSysLogEntry::GetU32(a2);
    *((_DWORD *)this + 5) = BlueFin::GlSysLogEntry::GetS32(a2);
  }
  return v3;
}

uint64_t BlueFin::GlPeLtoMgr::UpdateGnssGpsTimeOffsetsJavd(uint64_t a1, unsigned __int16 *a2, char a3)
{
  uint64_t result = *(void *)(a1 + 88);
  if (*(_DWORD *)(result + 2576))
  {
    BlueFin::GlPeTimeManager::GetTime((BlueFin::GlPeTimeManager *)result, 1, v20);
    BOOL v21 = &off_270EBC600;
    unint64_t v22 = 0;
    BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v20, (BlueFin::GlGpsTime *)&v21);
    int v7 = *a2;
    unsigned int v8 = *((_DWORD *)a2 + 1);
    v20[0].n128_u64[0] = (unint64_t)&off_270EBC600;
    double v9 = fmod((double)v8, 1.0);
    if (v9 >= 1.0)
    {
      DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
    }
    double v10 = v9 * 4294967300.0 + 0.5;
    unsigned int v11 = v10;
    if (v10 >= 4294967300.0) {
      unsigned int v11 = -1;
    }
    v20[0].n128_u32[2] = v11;
    v20[0].n128_u32[3] = v8 + 604800 * v7;
    v20[0].n128_u64[0] = (unint64_t)&off_270EBC600;
    unint64_t v24 = __PAIR64__(v20[0].n128_u32[3], v11);
    unsigned int v12 = ((uint64_t (*)(void))v21[4])(&v21);
    v23[0] = v22;
    v23[1] = v12;
    BlueFin::GlTimePoint::resolveAmbiguity((unsigned int *)&v24, v23, 0x24EA0000u);
    uint64_t result = ((uint64_t (*)(void (***)(BlueFin::GlGpsTime *__hidden), void))v21[3])(&v21, HIDWORD(v24));
    unsigned int v13 = v22;
    unsigned int v14 = HIDWORD(v22);
    char v15 = result | v24;
    if (result | v24)
    {
      if (v22 < __PAIR64__(result, v24))
      {
        unsigned int v14 = (__PAIR64__((int)result - HIDWORD(v22), v24) - v22) >> 32;
        unsigned int v13 = v24 - v22;
        char v15 = 1;
      }
      else
      {
        char v15 = 0;
        unsigned int v14 = (v22 - __PAIR64__(result, v24)) >> 32;
        unsigned int v13 = v22 - v24;
      }
    }
    double v16 = (double)v13 * 2.32830644e-10 + (double)v14;
    if ((v15 & ((v14 | v13) != 0)) != 0) {
      double v16 = -v16;
    }
    if (v16 <= 1512000.0)
    {
      float v17 = (float)*((int *)a2 + 2) / 100.0;
      uint64_t v18 = *(void *)(a1 + 112);
      *(unsigned char *)(v18 + 92BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
      *(float *)(v18 + 996) = v17;
    }
  }
  if ((a3 & 1) == 0)
  {
    uint64_t v19 = *(void *)a2;
    *(_DWORD *)(a1 + 2010BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *((_DWORD *)a2 + 2);
    *(void *)(a1 + 20092) = v19;
    *(_DWORD *)(a1 + 26464) |= 0x200u;
  }
  return result;
}

uint64_t BlueFin::GlDbgEngine::SetAsstPos(uint64_t a1, double *a2, uint64_t a3, BOOL a4)
{
  int v17 = a3;
  BOOL v16 = a4;
  __int16 v5 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (a2)
  {
    BlueFin::GlDbgCodec::WriteStart(v5, 1556);
    double v9 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v9 + 120))(v9))
    {
      *((_DWORD *)v9 + 143) = 2;
      BlueFin::GlDbgCodec::Rvw(v9, a2);
    }
    double v10 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v10 + 120))(v10)) {
      BlueFin::GlDbgCodec::Write(v10, (unsigned int *)&v17);
    }
    unsigned int v11 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v11 + 120))(v11)) {
      BlueFin::GlDbgCodec::Write(v11, &v16);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
    uint64_t v12 = BlueFin::GlEngineImplStd::SetAsstPos(a1 + 368, a2, a3, a4);
    BOOL v15 = v12;
    BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1556);
    unsigned int v13 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v13 + 120))(v13)) {
      BlueFin::GlDbgCodec::Write(v13, &v15);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  }
  else
  {
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t, const char *))(*(void *)v5 + 104))(v5, 1, "/Library/Caches/com.apple.xbs/Sources/FIREGPS7/proprietary/deliverables/gll_dev/gldebug/src/gldebug_engine.cpp:777");
    return 0;
  }
  return v12;
}

#error "2639C085C: call analysis failed (funcsize=125)"

uint64_t BlueFin::GlPosEng::SetAsstPos(uint64_t a1, uint64_t a2, int a3, int a4, int a5, char a6)
{
  *(unsigned char *)(a1 + 382024) = 1;
  if (*(double *)(a2 + 24) <= 115000.0) {
    return BlueFin::GlReqSm::SetAsstPos(a1 + 126144, a2, a3, a4, a5, a6);
  }
  if (*(double *)(a2 + 32) <= 100.0)
  {
    *(unsigned char *)(a1 + 184592) = 1;
    *(void *)(a1 + 184424) = *(void *)(a2 + 16);
    *(void *)(a1 + 184432) = *(void *)(a2 + 32);
  }
  return 1;
}

uint64_t BlueFin::GlReqSm::SetAsstPos(uint64_t a1, uint64_t a2, int a3, int a4, int a5, char a6)
{
  int v7 = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092);
  long long v8 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v8;
  uint64_t v14 = *(void *)(a2 + 32);
  int v15 = a3;
  int v16 = a4;
  int v17 = a5;
  char v18 = a6;
  int v19 = v7;
  *(_DWORD *)(a1 + 10848) |= 0x100u;
  BlueFin::GlPeAsstPosReqDataFifo::Put(a1 + 8608, v13);
  __int16 v12 = 10;
  uint64_t v9 = *(void *)(a1 + 32);
  unint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + 32) = v10;
  do
  {
    unint64_t v20 = 0;
    if (BlueFin::patch_dispatch(v10, a1, (unsigned __int8 *)&v12, &v20)) {
      unint64_t v10 = v20;
    }
    else {
      unint64_t v10 = (*(uint64_t (**)(uint64_t, __int16 *))(a1 + 32))(a1, &v12);
    }
    *(void *)(a1 + 32) = v10;
  }
  while (v10);
  *(void *)(a1 + 32) = v9;
  return 1;
}

double BlueFin::GlPeAsstPosReqDataFifo::Put(uint64_t a1, long long *a2)
{
  unint64_t v4 = *(unsigned __int8 *)(a1 + 1032);
  if (v4 > 0xF)
  {
    uint64_t v9 = (v4 - 1);
    memmove(*(void **)(a1 + 1024), (const void *)(*(void *)(a1 + 1024) + 64), v9 << 6);
    uint64_t v10 = *(void *)(a1 + 1024) + (v9 << 6);
    if ((long long *)v10 != a2)
    {
      long long v11 = *a2;
      long long v12 = a2[1];
      *(void *)(v10 + 32) = *((void *)a2 + 4);
      *(_OWORD *)uint64_t v10 = v11;
      *(_OWORD *)(v10 + 16) = v12;
      double result = *((double *)a2 + 5);
      *(double *)(v10 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = result;
      *(_DWORD *)(v10 + 48) = *((_DWORD *)a2 + 12);
      *(unsigned char *)(v10 + 52) = *((unsigned char *)a2 + 52);
      *(_DWORD *)(v10 + 56) = *((_DWORD *)a2 + 14);
    }
  }
  else
  {
    unint64_t v5 = *(void *)(a1 + 1024) + (v4 << 6);
    if ((long long *)v5 != a2)
    {
      long long v6 = *a2;
      long long v7 = a2[1];
      *(void *)(v5 + 32) = *((void *)a2 + 4);
      *(_OWORD *)unint64_t v5 = v6;
      *(_OWORD *)(v5 + 16) = v7;
      double result = *((double *)a2 + 5);
      *(double *)(v5 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = result;
      *(_DWORD *)(v5 + 48) = *((_DWORD *)a2 + 12);
      *(unsigned char *)(v5 + 52) = *((unsigned char *)a2 + 52);
      *(_DWORD *)(v5 + 56) = *((_DWORD *)a2 + 14);
      LOBYTE(v4) = *(unsigned char *)(a1 + 1032);
    }
    *(unsigned char *)(a1 + 1032) = v4 + 1;
  }
  return result;
}

uint64_t FireCallback::GlEngineOnStart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (FireCallback::pInstance)
  {
    uint64_t v9 = *(void *)(FireCallback::pInstance + 376);
    if (v9)
    {
      uint64_t v12 = a2;
      uint64_t v13 = a1;
      return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v9 + 48))(v9, &v13, &v12);
    }
    long long v11 = "fcb,fEngineOnStartCb,nullptr";
  }
  else
  {
    long long v11 = "fcb,GlEngineOnStart,nullptr";
  }
  FireDeviceLog::DeviceLogBase(2, v11, a3, a4, a5, a6, a7, a8, v12);
  return 0;
}

uint64_t std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_0,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_0>,short ()(BlueFin::GlEngine *,BlueFin::GlSettings *)>::operator()(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v47[2] = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a1 + 8);
  if ((*(_DWORD *)(v8 + 1356) & 0xFFFFFFFE) == 2)
  {
    FireDeviceLog::DeviceLogBase(2, "EngineAlreadyInRun,engine,%p,reqSize,%zu", (uint64_t)a3, a4, a5, a6, a7, a8, *a2);
    return -1;
  }
  uint64_t v9 = *a3;
  FireDeviceLog::DeviceLogBase(3, "#fmh,GlEngineOnStart+,%p", (uint64_t)a3, a4, a5, a6, a7, a8, *a2);
  if (!FireResourceMgr::fInstance) {
    operator new();
  }
  uint64_t v10 = *(void *)FireResourceMgr::fInstance;
  (*(void (**)(void))(**(void **)FireResourceMgr::fInstance + 16))(*(void *)FireResourceMgr::fInstance);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v10 + 32))(v10) & 1) == 0)
  {
    FireDeviceLog::DeviceLogBase(2, "EngineOnStartImpl,failToOpen", v11, v12, v13, v14, v15, v16, v46);
    return -1;
  }
  v47[0] = 0x8080808080808080;
  v47[1] = 0x8080808080808080;
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v10 + 96))(v10, v47, 16);
  FireConfig::setEngine((uint64_t *)(v8 + 1048), v9, v17, v18, v19, v20, v21, v22);
  FireMessageHandler::EngineState::update((int *)(v8 + 1356), 2, v23, v24, v25, v26, v27, v28);
  FireDeviceLog::DeviceLogBase(3, "#fmh,GlEngineOnStart-", v29, v30, v31, v32, v33, v34, v46);
  (*(void (**)(void, void (*)(uint64_t, int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char)))(**(void **)(v8 + 1296) + 72))(*(void *)(v8 + 1296), FireCallback::GlEngineOnTimerSet);
  BOOL v35 = (DeviceCommon *)(*(uint64_t (**)(void, void (*)(uint64_t, int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char)))(**(void **)(v8 + 1296) + 824))(*(void *)(v8 + 1296), FireCallback::GlEngCbOnSerialNumber);
  DeviceCommon::GetMachContinuousTime(v35);
  unint64_t v37 = (unint64_t)(v36 * 1000000000.0);
  (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v8 + 1296) + 672))(*(void *)(v8 + 1296), v37, 80);
  FireDeviceLog::DeviceLogBase(5, "#fmh,SetThermalRiskState,time,%llu,ns,pass,%d,level,%d", v38, v39, v40, v41, v42, v43, v37);
  return 0;
}

void FireMessageHandler::EngineState::update(int *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FireDeviceLog::DeviceLogBase(5, "EngineState,update,state,%d,new,%d", a3, a4, a5, a6, a7, a8, *a1);
  if (a2 == 1)
  {
    int v16 = *a1;
    if ((*a1 - 1) < 3) {
      goto LABEL_9;
    }
    int v16 = 1;
    goto LABEL_7;
  }
  if (a2 == 2)
  {
    int v16 = *a1;
    if ((*a1 & 0xFFFFFFFE) == 2) {
      goto LABEL_9;
    }
    int v16 = 2;
LABEL_7:
    *a1 = v16;
    goto LABEL_9;
  }
  int v16 = *a1;
LABEL_9:
  if (v16 != a2) {
    FireDeviceLog::DeviceLogBase(3, "EngineState,update,noChange,state,%d,new,%d", v10, v11, v12, v13, v14, v15, v16);
  }
}

uint64_t BlueFin::GlDbgEngine::SetThermalRiskState(BlueFin::GlDbgCodec **this, unint64_t a2, unsigned int a3)
{
  uint64_t v11 = a2;
  BOOL v10 = a3;
  if (a3 > 0x64) {
    return 0;
  }
  unsigned __int8 v4 = a3;
  BlueFin::GlDbgCodec::WriteStart(this[1], 1629);
  BlueFin::GlDbgCodec::Write(this[1], (unint64_t *)&v11);
  BlueFin::GlDbgCodec::Write(this[1], &v10);
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  uint64_t v3 = BlueFin::GlEngineImplStd::SetThermalRiskState((BlueFin::GlEngineImplStd *)(this + 46), a2, v4);
  BOOL v9 = v3;
  BlueFin::GlDbgCodec::WriteFinal(this[1], 1629);
  long long v7 = this[1];
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v7 + 120))(v7)) {
    BlueFin::GlDbgCodec::Write(v7, &v9);
  }
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  return v3;
}

uint64_t BlueFin::GlDbgEngine::ForceReadLTOFile(BlueFin::GlDbgCodec **this)
{
  BlueFin::GlDbgCodec::WriteStart(this[1], 1542);
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  uint64_t LTOFile = BlueFin::GlEngineImplStd::ForceReadLTOFile((BlueFin::GlEngineImplStd *)(this + 46));
  BlueFin::GlDbgCodec::WriteFinal(this[1], 1542);
  uint64_t v3 = this[1];
  BOOL v5 = LTOFile;
  BlueFin::GlDbgCodec::Write(v3, &v5);
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  return LTOFile;
}

char *BlueFin::GlDbgCodec::Write(BlueFin::GlDbgCodec *this, const BOOL *a2)
{
  double result = (char *)(*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 120))(this);
  if (result)
  {
    unsigned __int8 v5 = *a2;
    return BlueFin::GlDbgCodecBase::Encode((char *)this, (char *)&v5, 1, 0, 0);
  }
  return result;
}

{
  char *result;
  uint64_t vars8;

  double result = (char *)(*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 120))(this);
  if (result)
  {
    return BlueFin::GlDbgCodec::Write(this, a2);
  }
  return result;
}

{
  char *result;
  uint64_t vars8;

  double result = (char *)(*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 120))(this);
  if (result)
  {
    return BlueFin::GlDbgCodec::Write(this, a2);
  }
  return result;
}

{
  char *result;
  uint64_t vars8;

  double result = (char *)(*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 120))(this);
  if (result)
  {
    return BlueFin::GlDbgCodec::Write(this, a2);
  }
  return result;
}

{
  char *result;
  uint64_t vars8;

  double result = (char *)(*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 120))(this);
  if (result)
  {
    return BlueFin::GlDbgCodec::Write(this, a2);
  }
  return result;
}

#error "2639C123C: call analysis failed (funcsize=86)"

uint64_t BlueFin::GlPosEng::ReadLTOFile(BlueFin::GlPosEng *this, unsigned int *a2, int a3, int a4)
{
  if (a3)
  {
    uint64_t LtoFile = BlueFin::GlPosEng::readLtoFile(this, a2, 1);
    if (!LtoFile)
    {
      if (!BlueFin::GlPosEng::needToReadLto(this) && !a4) {
        return 0;
      }
      *((void *)this + 22493) = (char *)this + 126144;
      BlueFin::GlTimer::arm((BlueFin::GlPosEng *)((char *)this + 179912), 38, 0, 0x1F4u);
      uint64_t LtoFile = 0;
      *((unsigned char *)this + 179936) = 1;
      return LtoFile;
    }
  }
  else
  {
    uint64_t LtoFile = 3;
  }
  if (!BlueFin::GlPosEng::needToReadLto(this) && !a4) {
    return LtoFile;
  }

  return BlueFin::GlPosEng::readLtoFile(this, a2, 0);
}

uint64_t BlueFin::GlPosEng::readLtoFile(BlueFin::GlPosEng *this, unsigned int *a2, uint64_t a3)
{
  if (a2) {
    *a2 = 0;
  }
  if (!BlueFin::GlPeTimeManager::TimeKnown((uint64_t)this + 121216, 0, 0x3938700u)
    || (long long v6 = (char *)this + 406720, *((unsigned char *)this + 406721)))
  {
    unsigned int v7 = 0;
    uint64_t result = 1;
    if (!a2) {
      return result;
    }
    goto LABEL_6;
  }
  if ((*(unsigned char *)(*((void *)this + 2) + 829) & 0x20) != 0)
  {
    uint64_t v25 = "LTO";
    if (a3) {
      uint64_t v25 = "RTO";
    }
    GlCustomLog(14, "%s file is ignored\n", v25);
    return 2;
  }
  *((unsigned char *)this + 40672BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 1;
  if (!*v6)
  {
    BOOL v9 = "LTO";
    if (a3) {
      BOOL v9 = "RTO";
    }
    GlCustomLog(14, " Start reading %s ...\n", v9);
  }
  BlueFin::GlPeTimeManager::GetTime((BlueFin::GlPosEng *)((char *)this + 121216), 1, v32);
  uint64_t v33 = &off_270EBC600;
  uint64_t v34 = 0;
  BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v32, (BlueFin::GlGpsTime *)&v33);
  unsigned int v10 = ((uint64_t (*)(void))v33[4])(&v33);
  LODWORD(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v34;
  double v12 = (double)v11 * 2.32830644e-10 + (double)v10;
  double v13 = fmod(v12, 4294967300.0);
  if (v12 > 4294967300.0) {
    double v12 = v13;
  }
  if (v12 < -4294967300.0) {
    double v12 = -fmod(-v12, 4294967300.0);
  }
  uint64_t v14 = (BlueFin::GlSettingsImpl *)*((void *)this + 2);
  unsigned int v15 = ((uint64_t (*)(void))v33[4])(&v33);
  BlueFin::GlSettingsImpl::UpdateLtOcbeeQaData(v14, v15 / 0x93A80);
  int v31 = 6;
  int v16 = (uint64_t (*)(uint64_t))(*(uint64_t (**)(void))(**((void **)this + 4) + 88))(*((void *)this + 4));
  v32[0].n128_u64[1] = (*(uint64_t (**)(void))(**((void **)this + 4) + 96))(*((void *)this + 4));
  uint64_t v17 = v16(102560);
  v32[0].n128_u64[0] = v17;
  if (!v17)
  {
    DeviceFaultNotify("glmemalloc.h", 74, "GlStackAlloc", (char)"m_ptr != nullptr");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmemalloc.h", 74, "m_ptr != nullptr");
  }
  uint64_t v18 = v17;
  if (v12 < 0.0) {
    int v19 = --v12;
  }
  else {
    int v19 = v12;
  }
  BlueFin::GlPeLtoReader::GlPeLtoReader(v17, (uint64_t)this + 7648, 0, v19, &v31, *(void *)(*((void *)this + 4) + 8), (uint64_t)this + 224, (uint64_t)this + 121216, *((void *)this + 4), (uint64_t)this + 382416, (uint64_t)this + 295744, (uint64_t)this + 181312, (uint64_t)this + 181056, (uint64_t)this + 56, (uint64_t)this + 404896, (uint64_t)this + 160);
  if (*(_WORD *)(*((void *)this + 2) + 26012)) {
    *(_WORD *)(v18 + 50704) = *(_WORD *)(*((void *)this + 2) + 26012);
  }
  uint64_t v20 = *((void *)this + 4);
  uint64_t v21 = *(void (**)(void, uint64_t, uint64_t))(v20 + 152);
  if (v21) {
    v21(*(void *)(v20 + 8), v18, a3);
  }
  uint64_t v22 = (int *)((char *)this + 158164);
  uint64_t v23 = (_DWORD *)((char *)this + 123784);
  unsigned int v7 = *(_DWORD *)(v18 + 9748);
  BlueFin::GlStackAlloc<BlueFin::GlPeLtoReader>::~GlStackAlloc(v32);
  int v24 = v31;
  if (*v6) {
    GlCustomLog(14, "readLtoFile::%s reading complete  Pass:%c  NumBytes:%u\n");
  }
  else {
    GlCustomLog(14, "readLtoFile::%s reading complete  Pass:%c  NumBytes:%u LMS: %u\n");
  }
  if (!v24)
  {
    if (a3)
    {
      if (!*((unsigned char *)this + 9281)) {
        goto LABEL_44;
      }
      uint64_t v27 = 0;
      char v28 = 1;
      do
      {
        while ((v28 & 1) == 0)
        {
          char v28 = 0;
          if (++v27 == 7) {
            goto LABEL_43;
          }
        }
        BOOL HasAny = BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(*((void *)this + 1129) + 24 * v27));
        char v28 = !HasAny;
        ++v27;
      }
      while (v27 != 7);
      if (!HasAny) {
        goto LABEL_44;
      }
    }
    else if (*((_DWORD *)this + 101682) != -7200001 && !*((unsigned char *)this + 9264))
    {
      goto LABEL_44;
    }
LABEL_43:
    *((_DWORD *)this + 101682) = *v23;
LABEL_44:
    uint64_t result = 0;
    if (v7) {
      int v26 = 1;
    }
    else {
      int v26 = 2;
    }
    goto LABEL_47;
  }
  unsigned int v7 = 0;
  int v26 = 2;
  uint64_t result = 3;
LABEL_47:
  int v30 = *v22;
  *uint64_t v22 = v26;
  if (v30 != v26) {
    *((unsigned char *)this + 158184) = 1;
  }
  *((_DWORD *)this + 31564) = *v23;
  *((unsigned char *)this + 40672BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  if (a2) {
LABEL_6:
  }
    *a2 = v7;
  return result;
}

void sub_2639C1840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  BlueFin::GlStackAlloc<BlueFin::GlPeLtoReader>::~GlStackAlloc((uint64_t *)va);
  _Unwind_Resume(a1);
}

void FireMessageHandler::startRequest(uint64_t a1, int a2, uint64_t a3)
{
  int v21 = a2;
  long long v6 = (float *)(a1 + 1304);
  unsigned int v7 = std::__hash_table<std::__hash_value_type<FireMessageHandler::Request,BlueFin::GlRequest *>,std::__unordered_map_hasher<FireMessageHandler::Request,std::__hash_value_type<FireMessageHandler::Request,BlueFin::GlRequest *>,std::hash<FireMessageHandler::Request>,std::equal_to<FireMessageHandler::Request>,true>,std::__unordered_map_equal<FireMessageHandler::Request,std::__hash_value_type<FireMessageHandler::Request,BlueFin::GlRequest *>,std::equal_to<FireMessageHandler::Request>,std::hash<FireMessageHandler::Request>,true>,std::allocator<std::__hash_value_type<FireMessageHandler::Request,BlueFin::GlRequest *>>>::find<FireMessageHandler::Request>((void *)(a1 + 1304), a2);
  uint64_t v8 = std::__hash_table<std::__hash_value_type<FireMessageHandler::Request,BlueFin::GlRequest *>,std::__unordered_map_hasher<FireMessageHandler::Request,std::__hash_value_type<FireMessageHandler::Request,BlueFin::GlRequest *>,std::hash<FireMessageHandler::Request>,std::equal_to<FireMessageHandler::Request>,true>,std::__unordered_map_equal<FireMessageHandler::Request,std::__hash_value_type<FireMessageHandler::Request,BlueFin::GlRequest *>,std::equal_to<FireMessageHandler::Request>,std::hash<FireMessageHandler::Request>,true>,std::allocator<std::__hash_value_type<FireMessageHandler::Request,BlueFin::GlRequest *>>>::__emplace_unique_key_args<FireMessageHandler::Request,std::piecewise_construct_t const&,std::tuple<FireMessageHandler::Request const&>,std::tuple<>>(v6, a2, &v21);
  if (v7)
  {
    FireDeviceLog::DeviceLogBase(2, "#fmh,startRequest,%p,%d,alreadyExist", v9, v10, v11, v12, v13, v14, v8[3]);
  }
  else
  {
    v8[3] = a3;
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 1296) + 248))(*(void *)(a1 + 1296), a3);
    FireDeviceLog::DeviceLogBase(6, "fmh,StartRequest,request,%p,%d,size,%zu", v15, v16, v17, v18, v19, v20, a3);
  }
}

void *std::__hash_table<std::__hash_value_type<FireMessageHandler::Request,BlueFin::GlRequest *>,std::__unordered_map_hasher<FireMessageHandler::Request,std::__hash_value_type<FireMessageHandler::Request,BlueFin::GlRequest *>,std::hash<FireMessageHandler::Request>,std::equal_to<FireMessageHandler::Request>,true>,std::__unordered_map_equal<FireMessageHandler::Request,std::__hash_value_type<FireMessageHandler::Request,BlueFin::GlRequest *>,std::equal_to<FireMessageHandler::Request>,std::hash<FireMessageHandler::Request>,true>,std::allocator<std::__hash_value_type<FireMessageHandler::Request,BlueFin::GlRequest *>>>::__emplace_unique_key_args<FireMessageHandler::Request,std::piecewise_construct_t const&,std::tuple<FireMessageHandler::Request const&>,std::tuple<>>(float *a1, int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = operator new(0x20uLL);
  *uint64_t v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[3] = 0;
  float v12 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v13 = a1[8];
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      int8x8_t prime = (int8x8_t)v16;
    }
    else {
      int8x8_t prime = (int8x8_t)v15;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v7 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v7) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (*(void *)&prime <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v18 = operator new(8 * *(void *)&prime);
          uint64_t v19 = *(void **)a1;
          *(void *)a1 = v18;
          if (v19) {
            operator delete(v19);
          }
          uint64_t v20 = 0;
          *((int8x8_t *)a1 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v20++) = 0;
          while (*(void *)&prime != v20);
          int v21 = (void *)*((void *)a1 + 2);
          if (v21)
          {
            unint64_t v22 = v21[1];
            uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(void *)&prime) {
                v22 %= *(void *)&prime;
              }
            }
            else
            {
              v22 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v22) = a1 + 4;
            uint64_t v27 = (void *)*v21;
            if (*v21)
            {
              do
              {
                unint64_t v28 = v27[1];
                if (v23.u32[0] > 1uLL)
                {
                  if (v28 >= *(void *)&prime) {
                    v28 %= *(void *)&prime;
                  }
                }
                else
                {
                  v28 &= *(void *)&prime - 1;
                }
                if (v28 != v22)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v28))
                  {
                    *(void *)(*(void *)a1 + 8 * v28) = v21;
                    goto LABEL_55;
                  }
                  *int v21 = *v27;
                  void *v27 = **(void **)(*(void *)a1 + 8 * v28);
                  **(void **)(*(void *)a1 + 8 * v28) = v27;
                  uint64_t v27 = v21;
                }
                unint64_t v28 = v22;
LABEL_55:
                int v21 = v27;
                uint64_t v27 = (void *)*v27;
                unint64_t v22 = v28;
              }
              while (v27);
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        uint64_t v33 = *(void **)a1;
        *(void *)a1 = 0;
        if (v33) {
          operator delete(v33);
        }
        unint64_t v7 = 0;
        *((void *)a1 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v29 = *(void **)a1;
  int v30 = *(void **)(*(void *)a1 + 8 * v3);
  if (v30)
  {
    *uint64_t v10 = *v30;
LABEL_72:
    *int v30 = v10;
    goto LABEL_73;
  }
  *uint64_t v10 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v10;
  v29[v3] = a1 + 4;
  if (*v10)
  {
    unint64_t v31 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7) {
        v31 %= v7;
      }
    }
    else
    {
      v31 &= v7 - 1;
    }
    int v30 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
  return v10;
}

void sub_2639C1CFC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<FireMessageHandler::Request,BlueFin::GlRequest *>,std::__unordered_map_hasher<FireMessageHandler::Request,std::__hash_value_type<FireMessageHandler::Request,BlueFin::GlRequest *>,std::hash<FireMessageHandler::Request>,std::equal_to<FireMessageHandler::Request>,true>,std::__unordered_map_equal<FireMessageHandler::Request,std::__hash_value_type<FireMessageHandler::Request,BlueFin::GlRequest *>,std::equal_to<FireMessageHandler::Request>,std::hash<FireMessageHandler::Request>,true>,std::allocator<std::__hash_value_type<FireMessageHandler::Request,BlueFin::GlRequest *>>>::find<FireMessageHandler::Request>(void *a1, int a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (v2 <= a2) {
      unint64_t v4 = a2 % v2;
    }
  }
  else
  {
    unint64_t v4 = (v2 - 1) & a2;
  }
  unsigned __int8 v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (uint64_t result = *v5; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2) {
          v7 %= v2;
        }
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

#error "2639C1E20: call analysis failed (funcsize=141)"

#error "2639C21DC: call analysis failed (funcsize=148)"

uint64_t BlueFin::GlEngineImplStd::LoadComponents(BlueFin::GlEngineImplStd *this, int a2)
{
  if (*((unsigned char *)this + 32)) {
    return *((unsigned __int8 *)this + 32);
  }
  if (*((void *)this + 2) || *((void *)this + 3))
  {
    unint64_t v16 = "m_ptGlEventPump == nullptr && m_ptGlPosEng == nullptr";
    DeviceFaultNotify("glengine_std.cpp", 538, "LoadComponents", (char)"m_ptGlEventPump == nullptr && m_ptGlPosEng == nullptr");
    int v17 = 538;
    goto LABEL_44;
  }
  unint64_t v4 = (char *)this + 4408;
  unsigned __int8 v5 = (uint64_t (**)(uint64_t))((char *)this + 72);
  BlueFin::GlPeObjFactory::m_potGlPeObjFactory = (uint64_t)this + 72;
  uint64_t v6 = *((void *)this + 1);
  if (v6) {
    goto LABEL_6;
  }
  GlSettingImpl = BlueFin::GlPeObjFactory::MakeGlSettingImpl((uint64_t (**)(uint64_t))this + 9);
  *((void *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = GlSettingImpl;
  *((unsigned char *)this + 4409) = 1;
  int v20 = *((_DWORD *)this + 1232);
  if (v20 != 2)
  {
    if (v20)
    {
      (*(void (**)(BlueFin::GlSettingsImpl *, uint64_t))(*(void *)GlSettingImpl + 416))(GlSettingImpl, 48);
      BlueFin::GlSetBase::Remove(*((void *)this + 1) + 26224, 1);
      uint64_t v21 = *((void *)this + 1);
      goto LABEL_31;
    }
    unint64_t v16 = "m_eEngineType != GL_ENGINE_TYPE_UNSET";
    DeviceFaultNotify("glengine_std.cpp", 551, "LoadComponents", (char)"m_eEngineType != GL_ENGINE_TYPE_UNSET");
    int v17 = 551;
LABEL_44:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glengine_std.cpp", v17, v16);
  }
  if (a2) {
    *((unsigned char *)this + 593) = 0;
  }
  (*(void (**)(BlueFin::GlSettingsImpl *, uint64_t))(*(void *)GlSettingImpl + 1064))(GlSettingImpl, 1);
  (*(void (**)(void))(**((void **)this + 1) + 1096))();
  (*(void (**)(void))(**((void **)this + 1) + 416))();
  uint64_t v21 = *((void *)this + 1);
  **(_DWORD **)(v21 + 26224) |= 2u;
LABEL_31:
  unint64_t v22 = (unsigned int (*)(void, uint64_t))*((void *)this + 35);
  if (!v22 || v22(*((void *)this + 34), v21)) {
    goto LABEL_36;
  }
LABEL_6:
  if (!*((unsigned char *)this + 560) && !*(unsigned char *)(*((void *)this + 1) + 25964))
  {
    uint8x8_t v23 = (unsigned int (*)(void, void))*((void *)this + 42);
    if (v23)
    {
      if (v23(*((void *)this + 34), 0))
      {
LABEL_36:
        unint64_t v24 = (void (*)(void, uint64_t, void))*((void *)this + 36);
        if (v24) {
          v24(*((void *)this + 34), 1, 0);
        }
        if (*((unsigned char *)this + 4409))
        {
          uint8x8_t v25 = (void (*)(void, uint64_t))*((void *)this + 10);
          if (v25) {
            v25(*((void *)this + 1), v21);
          }
          *((void *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
          *((unsigned char *)this + 4409) = 0;
        }
        return *((unsigned __int8 *)this + 32);
      }
      *((unsigned char *)this + 56BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
    }
  }
  GlCustomLog(14, "PE SIZE %d\n", 585608);
  if (!BlueFin::GlUtils::m_pInstance)
  {
    BlueFin::GlUtils::m_pInstance = (uint64_t)BlueFin::GlPeObjFactory::MakeGlUtils((uint64_t (**)(uint64_t))this + 9, *((BlueFin::GlSettingsImpl **)this + 1), (BlueFin::GlEngineImplStd *)((char *)this + 264));
    unsigned char *v4 = 1;
  }
  GlCustomLog(14, "GlEngineImplStd::verifyCpuWordSizeAndEndian: GLL is built as Little Endian running on a Little Endian CPU\n");
  int v7 = *((_DWORD *)this + 1231) + 1;
  *((_DWORD *)this + 123BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v7;
  uint8x8_t v8 = (BlueFin::GlSettingsImpl *)*((void *)this + 1);
  *((_DWORD *)v8 + 6542) = v7;
  BlueFin::GlSettingsImpl::Print(v8);
  uint64_t v9 = (void *)*((void *)this + 1);
  if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    (*(void (**)(void *, void, void))(v9[1] + 24))(v9 + 1, 0, 0);
    uint64_t v9 = (void *)*((void *)this + 1);
  }
  uint64_t v10 = (*(uint64_t (**)(void *))(*v9 + 1104))(v9);
  (*(void (**)(void *, uint64_t))(*v9 + 1080))(v9, v10);
  Memory = (BlueFin::GlEventPump *)BlueFin::GlMemAlloc::glAllocateMemory(1, 112, *v5);
  if (Memory)
  {
    *((_OWORD *)Memory + 5) = 0u;
    *((_OWORD *)Memory + 6) = 0u;
    *((_OWORD *)Memory + 3) = 0u;
    *((_OWORD *)Memory + 4) = 0u;
    *((_OWORD *)Memory + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
    *((_OWORD *)Memory + 2) = 0u;
    *(_OWORD *)Memory = 0u;
  }
  *((void *)this + 2) = Memory;
  *((void *)this + 3) = BlueFin::GlPeObjFactory::MakePosEng((uint64_t (**)(uint64_t))this + 9, (uint64_t)this, *((BlueFin::GlSettingsImpl **)this + 1), Memory, (BlueFin::GlEngineImplStd *)((char *)this + 264), *((unsigned char *)this + 4410));
  *((unsigned char *)this + 32) = 1;
  if (!v6)
  {
    int v12 = (*(uint64_t (**)(void))(**((void **)this + 1) + 1088))(*((void *)this + 1));
    float v13 = "host";
    if (v12) {
      float v13 = "chip";
    }
    GlCustomLog(13, "GlEngineImplStd::LoadComponents: Starting with ME on-%s\n", v13);
  }
  GlCustomLog(15, "GlEngineImplStd::LoadComponents: Finished loading components\n");
  BOOL v14 = (void (*)(void))*((void *)this + 41);
  if (v14) {
    v14(*((void *)this + 34));
  }
  if (*((_DWORD *)this + 1232) == 2)
  {
    unsigned int v15 = *(_DWORD *)(*((void *)this + 1) + 88);
    if (v15 > 0x26 || ((1 << v15) & 0x7460000000) == 0)
    {
      unint64_t v16 = "(etRfType == GL_RF_47531_BRCM) || (etRfType == GL_RF_47531_BRCM_EXT_LNA) || (etRfType == GL_RF_4776_BRCM) ||"
            " (etRfType == GL_RF_4776_BRCM_1P3V) || (etRfType == GL_RF_4755_BRCM) || (etRfType == GL_RF_4755_BRCM_1P3V)";
      DeviceFaultNotify("glengine_std.cpp", 645, "LoadComponents", (char)"(etRfType == GL_RF_47531_BRCM) || (etRfType == GL_RF_47531_BRCM_EXT_LNA) || (etRfType == GL_RF_4776_BRCM) || (etRfType == GL_RF_4776_BRCM_1P3V) || (etRfType == GL_RF_4755_BRCM) || (etRfType == GL_RF_4755_BRCM_1P3V)");
      int v17 = 645;
      goto LABEL_44;
    }
  }
  return *((unsigned __int8 *)this + 32);
}

uint64_t BlueFin::GlEngineImplStd::setOnChipMeSetting(uint64_t result, int *a2, char a3)
{
  if (*(_DWORD *)(result + 4928) != 1)
  {
    uint64_t v4 = result;
    int v5 = *a2;
    uint64_t v6 = *(void *)(result + 24);
    if (v6)
    {
      BlueFin::GlPeReqBag::GetNonInstantaneousRequests(v6 + 137024, &v21);
      int v7 = v21;
      BlueFin::GlPePendingBag::GetNonInstantaneousRequests(*(void *)(v4 + 24) + 132640, &v20);
      v5 |= v7 | v20;
    }
    if (v5 || (a3 & 1) != 0)
    {
      uint64_t v10 = *(void *)(v4 + 24);
      if (!v10 || !*(unsigned char *)(v10 + 157792) && !*(unsigned char *)(v10 + 157832)) {
        goto LABEL_19;
      }
      uint64_t v11 = 0;
      LOBYTE(v12) = 0;
      uint64_t v13 = v10 + 137024;
      do
      {
        uint64_t v14 = *(void *)(v13 + v11);
        if (v14)
        {
          uint64_t v15 = *(void *)(v14 + 8);
          if (*(_DWORD *)(v15 + 16) == 13) {
            int v12 = *(unsigned __int8 *)(v15 + 172) >> 7;
          }
        }
        v11 += 8;
      }
      while (v11 != 576);
      if (v12) {
        BOOL v16 = 0;
      }
      else {
LABEL_19:
      }
        BOOL v16 = v5 == 4096 || (v5 & 0xFFFFEFFF) == 0x2000;
      if (*(void *)(v4 + 8))
      {
        int v17 = "FALSE";
        if (v16) {
          int v17 = "TRUE";
        }
        GlCustomLog(15, "GlEngineImplStd::ShouldBeUsingOnChipMe %s\n", v17);
        uint64_t v18 = *(uint64_t (**)(void))(**(void **)(v4 + 8) + 1096);
        return v18();
      }
      else
      {
        uint64_t v19 = "FALSE";
        if (v16) {
          uint64_t v19 = "TRUE";
        }
        uint64_t result = GlCustomLog(15, "GlEngineImplStd:: Store ShouldBeUsingOnChipMe %s\n", v19);
        *(unsigned char *)(v4 + 593) = v16;
      }
    }
    else
    {
      int v8 = (*(uint64_t (**)(void))(**(void **)(v4 + 8) + 1088))(*(void *)(v4 + 8));
      uint64_t v9 = "host";
      if (v8) {
        uint64_t v9 = "chip";
      }
      return GlCustomLog(15, "Remain in on-%s mode\n", v9);
    }
  }
  return result;
}

uint64_t BlueFin::GlPosEng::StartRequest(uint64_t a1, BlueFin::GlRequestImpl **a2)
{
  uint64_t v4 = *a2;
  int v5 = *((unsigned __int16 *)*a2 + 11);
  GlCustomLog(12, "StartRequest ");
  (*(void (**)(BlueFin::GlRequestImpl *, uint64_t))(*(void *)v4 + 136))(v4, 12);
  (*(void (**)(BlueFin::GlRequestImpl *, uint64_t))(*(void *)v4 + 144))(v4, 12);
  BlueFin::GlReqSm::ProcessNewRequest((BlueFin::GlReqSm *)(a1 + 126144), v4);
  if (!v5) {
    *a2 = 0;
  }
  return 0;
}

void *BlueFin::GlDbgCodec::Write(BlueFin::GlDbgCodec *this, const BlueFin::GlRequestImpl *a2)
{
  uint64_t result = (void *)(*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 120))(this);
  if (result)
  {
    *((_DWORD *)this + 143) = 2;
    int v5 = a2;
    return BlueFin::GlDbgCodec::Rvw(this, &v5);
  }
  return result;
}

unint64_t BlueFin::GlRequestImplGnssMeasData::Print(unint64_t this, unsigned __int8 a2)
{
  if (BlueFin::GlUtils::m_ucEnabled)
  {
    uint64_t v3 = this;
    this = BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)a2);
    if (this)
    {
      if (((1 << (a2 >> 3)) & 0x2000800E) != 0)
      {
        return BlueFin::GlRequestImplNmea::Print(v3, a2, (const char *)&str_8_26);
      }
    }
  }
  return this;
}

uint64_t BlueFin::GlSettingsImpl::ShouldBeUsingOnChipMe(BlueFin::GlSettingsImpl *this)
{
  return *((unsigned __int8 *)this + 26052);
}

_DWORD *BlueFin::GlRequestImplPos::PrintDetails(_DWORD *this, unsigned __int8 a2)
{
  if (this[20] == -1)
  {
    uint64_t v3 = this;
    uint64_t v4 = BlueFin::GlRequestImpl::GlRequestTypeToString((BlueFin::GlRequestImpl *)this);
    GlCustomLog(a2, "%s SmartMask", v4);
    uint64_t v5 = 0;
    uint64_t v6 = 123;
    do
    {
      uint64_t v7 = v5 + 1;
      GlCustomLog(a2, "%csmA%d,%hd", v6, v5 + 1, *((__int16 *)v3 + v5 + 42));
      uint64_t v6 = 44;
      uint64_t v5 = v7;
    }
    while (v7 != 4);
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = v8 + 1;
      GlCustomLog(a2, ",smT%d,%d", v8 + 1, *((__int16 *)v3 + v8 + 46));
      uint64_t v8 = v9;
    }
    while (v9 != 7);
    return (_DWORD *)GlCustomLog(a2, "}\n");
  }
  return this;
}

uint64_t BlueFin::GlDbgProxyGlEngineOnStart(uint64_t a1, BlueFin::GlSettingsImpl *a2)
{
  uint64_t v3 = (BlueFin::GlDbgProxy *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 656))(a1);

  return BlueFin::GlDbgProxy::HalGlEngineOnStart(v3, a2);
}

#error "2639C2D88: call analysis failed (funcsize=63)"

uint64_t BlueFin::GlSettingsImpl::Print(BlueFin::GlSettingsImpl *this)
{
  v24[4] = *MEMORY[0x263EF8340];
  v24[0] = "UNKN";
  v24[1] = "OCXO";
  _OWORD v24[2] = "GSM";
  void v24[3] = "TCXO";
  GlCustomLog(14, "SetLogFacMask(0x%08X)\n", *((_DWORD *)this + 36));
  GlCustomLog(14, "SetLogPriMask(0x%08X)\n", *((_DWORD *)this + 37));
  GlCustomLog(14, "SetGulpLogFacMask(0x%08X)\n", *((_DWORD *)this + 38));
  GlCustomLog(14, "SetGulpLogPriMask(0x%08X)\n", *((_DWORD *)this + 39));
  uint64_t v2 = 71;
  if (!*((unsigned char *)this + 136)) {
    uint64_t v2 = 45;
  }
  GlCustomLog(14, "GL_RF_TYPE(%d) GL_FREQ_PLAN(%d) - %u,%d,%d,%c,%u,%s, %d dB %.1lf dB\n", *((_DWORD *)this + 22), *((_DWORD *)this + 4), *((_DWORD *)this + 26) / 0x3E8u, (int)(*((double *)this + 14) * 1000000000.0 + 0.5), (int)(*((double *)this + 16) * 1000000000.0 + 0.5), v2, *((_DWORD *)this + 30) / 0x3E8u, (const char *)v24[*((unsigned int *)this + 25)], *((_DWORD *)this + 24), *((float *)this + 10));
  GlCustomLog(14, "DYN_MODE(%c)\n", aApvb[*((unsigned int *)this + 5)]);
  GlCustomLog(14, "FeatureSet ");
  BlueFin::GlSetBase::Print((uint64_t)this + 160, 0xEu);
  GlCustomLog(14, "\n");
  int v3 = *((_DWORD *)this + 8);
  GlCustomLog(14, "PSF 0x%x\n", v3);
  int v4 = *((_DWORD *)this + 8);
  if ((v4 & 3) != 0)
  {
    long long v10 = xmmword_263BBDD64;
    long long v11 = unk_263BBDD74;
    long long v12 = xmmword_263BBDD84;
    long long v13 = unk_263BBDD94;
    long long v8 = *(_OWORD *)"reference";
    long long v9 = unk_263BBDD54;
    GlCustomLog(14, "PSF SS %s\n", (const char *)&v8 + 32 * (v4 & 3));
    int v4 = *((_DWORD *)this + 8);
  }
  if ((v4 & 0x18) != 0)
  {
    long long v10 = xmmword_263BBDDC4;
    long long v11 = unk_263BBDDD4;
    long long v12 = xmmword_263BBDDE4;
    long long v13 = unk_263BBDDF4;
    long long v8 = *(_OWORD *)"reference";
    long long v9 = unk_263BBDDB4;
    GlCustomLog(14, "PSF Clk Variations %s\n", (const char *)&v8 + 32 * ((v4 & 0x18) >> 3));
  }
  if ((v3 & 0x80) != 0) {
    GlCustomLog(14, "PSF expecting large clock offset\n");
  }
  int v5 = *((_DWORD *)this + 8);
  if ((v5 & 0x40) != 0)
  {
    GlCustomLog(14, "PSF DISABLE SERIALIZING LARGE TCXO OFFSET IF UPDATE ONLY FROM CNTIN \n");
    int v5 = *((_DWORD *)this + 8);
  }
  unsigned int v6 = v5 & 0x700;
  if (v6)
  {
    long long v20 = xmmword_263BBDEC4;
    long long v21 = unk_263BBDED4;
    long long v22 = xmmword_263BBDEE4;
    long long v23 = unk_263BBDEF4;
    long long v16 = xmmword_263BBDE84;
    long long v17 = unk_263BBDE94;
    long long v18 = xmmword_263BBDEA4;
    long long v19 = unk_263BBDEB4;
    long long v12 = xmmword_263BBDE44;
    long long v13 = unk_263BBDE54;
    long long v14 = xmmword_263BBDE64;
    long long v15 = unk_263BBDE74;
    long long v8 = *(_OWORD *)"disabled";
    long long v9 = unk_263BBDE14;
    long long v10 = xmmword_263BBDE24;
    long long v11 = unk_263BBDE34;
    GlCustomLog(14, "PSF analog IF output: %s\n", (const char *)&v8 + 32 * (v6 >> 8));
  }
  if ((v3 & 0x20) != 0)
  {
    GlCustomLog(14, "PSF enabling pedestrian virtual DR\n");
    if ((v3 & 0x40000000) == 0)
    {
LABEL_15:
      if ((v3 & 0x800) == 0) {
        goto LABEL_16;
      }
      goto LABEL_27;
    }
  }
  else if ((v3 & 0x40000000) == 0)
  {
    goto LABEL_15;
  }
  GlCustomLog(14, "PSF enabling Stringent pedestrian virtual DR\n");
  if ((v3 & 0x800) == 0)
  {
LABEL_16:
    if ((v3 & 0x20000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_28;
  }
LABEL_27:
  GlCustomLog(14, "PSF disable internal motion/no motion detector\n");
  if ((v3 & 0x20000) == 0)
  {
LABEL_17:
    if ((v3 & 0x80000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_29;
  }
LABEL_28:
  GlCustomLog(14, "PSF enable StrictAssert\n");
  if ((v3 & 0x80000) == 0)
  {
LABEL_18:
    if ((v3 & 0x100000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_30;
  }
LABEL_29:
  GlCustomLog(14, "PSF disable clamping\n");
  if ((v3 & 0x100000) == 0)
  {
LABEL_19:
    if ((v3 & 0x20000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_31;
  }
LABEL_30:
  GlCustomLog(14, "PSF timing application\n");
  if ((v3 & 0x20000000) == 0)
  {
LABEL_20:
    if ((v3 & 0x1000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_32;
  }
LABEL_31:
  GlCustomLog(14, "PSF watch application\n");
  if ((v3 & 0x1000) == 0)
  {
LABEL_21:
    if ((v3 & 0x2000) == 0) {
      goto LABEL_22;
    }
LABEL_33:
    GlCustomLog(14, "PSF Enable Map Integration Optimisation\n");
    if ((v3 & 4) == 0) {
      return GlCustomLog(14, "Build FCT(%u)\n", *((_DWORD *)this + 7));
    }
    goto LABEL_23;
  }
LABEL_32:
  GlCustomLog(14, "PSF Disable Secondary Pedestrian Smoothing\n");
  if ((v3 & 0x2000) != 0) {
    goto LABEL_33;
  }
LABEL_22:
  if ((v3 & 4) != 0) {
LABEL_23:
  }
    GlCustomLog(14, "PSF disable tunnel logic\n");
  return GlCustomLog(14, "Build FCT(%u)\n", *((_DWORD *)this + 7));
}

uint64_t BlueFin::GlSetBase::Print(uint64_t this, unsigned __int8 a2)
{
  if (BlueFin::GlUtils::m_ucEnabled)
  {
    uint64_t v3 = this;
    this = BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)a2);
    if (this)
    {
      if (((1 << (a2 >> 3)) & 0x2000800E) != 0)
      {
        int v4 = *(unsigned __int8 *)(v3 + 8);
        if (*(unsigned char *)(v3 + 8))
        {
          int v5 = 0;
          unsigned int v6 = 0;
          do
          {
            if (((unint64_t)*(unsigned int *)(*(void *)v3 + 4 * (v5 >> 21)) >> (v6 & 0x1F)))
            {
              this = GlCustomLog(a2, "%02d ", v6);
              int v4 = *(unsigned __int8 *)(v3 + 8);
            }
            ++v6;
            v5 += 0x10000;
          }
          while (v6 < 32 * v4);
        }
      }
    }
  }
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetBreadcrumbMaxLocsToStore(uint64_t this, int a2)
{
  *(_DWORD *)(this + 25972) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetUsingOnChipMe(uint64_t this, char a2)
{
  *(unsigned char *)(this + 25967) = a2;
  *(unsigned char *)(this + 25968) = 1;
  return this;
}

void *BlueFin::GlPeObjFactory::MakeGlUtils(uint64_t (**this)(uint64_t), BlueFin::GlSettingsImpl *a2, BlueFin::GlPeEngineCallBacks *a3)
{
  if (!a2)
  {
    long long v9 = "potGlSettingsImpl != nullptr";
    DeviceFaultNotify("glpeobjfact.cpp", 706, "MakeGlUtils", (char)"potGlSettingsImpl != nullptr");
    int v10 = 706;
    goto LABEL_11;
  }
  if (!a3)
  {
    long long v9 = "pcbCallBacks != nullptr";
    DeviceFaultNotify("glpeobjfact.cpp", 707, "MakeGlUtils", (char)"pcbCallBacks != nullptr");
    int v10 = 707;
LABEL_11:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpeobjfact.cpp", v10, v9);
  }
  Memory = BlueFin::GlMemAlloc::glAllocateMemory(42, 1624, *this);
  unsigned int v6 = Memory;
  if (Memory)
  {
    BlueFin::GlUtils::GlUtils(Memory, (uint64_t)a3 + 184);
    if (!*((unsigned char *)v6 + 29))
    {
      *((unsigned char *)v6 + 17) = *((_DWORD *)a2 + 37);
      BlueFin::GlUtils::m_ucEnabled = 2;
      *((unsigned char *)v6 + 1122) = BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x1C);
      *((unsigned char *)v6 + 16) = 1;
      if (!*((unsigned char *)v6 + 29))
      {
        *((_DWORD *)v6 + 5) = *((_DWORD *)a2 + 36);
        BlueFin::GlUtils::m_ucEnabled = 2;
        *((unsigned char *)v6 + 1122) = BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x1C);
        *((unsigned char *)v6 + 18) = 1;
      }
    }
    int v7 = *((_DWORD *)a2 + 38);
    *((unsigned char *)v6 + 28) = *((_DWORD *)a2 + 39);
    *((_DWORD *)v6 + 6) = v7;
  }
  return v6;
}

unint64_t BlueFin::GlUtils::IsSysLogEnabledCompleteCheck(BlueFin::GlUtils *this)
{
  uint64_t v1 = BlueFin::GlUtils::m_pInstance;
  if (!BlueFin::GlUtils::m_pInstance)
  {
    unint64_t result = 0;
    BlueFin::GlUtils::m_ucEnabled = 2;
    return result;
  }
  if (!BlueFin::GlUtils::m_ucEnabled) {
    return 0;
  }
  unsigned int v2 = this;
  if (BlueFin::GlUtils::m_ucEnabled != 2) {
    goto LABEL_10;
  }
  if (!*(void *)BlueFin::GlUtils::m_pInstance) {
    goto LABEL_10;
  }
  int v3 = (*(uint64_t (**)(void))(**(void **)BlueFin::GlUtils::m_pInstance + 16))(*(void *)BlueFin::GlUtils::m_pInstance);
  uint64_t v1 = BlueFin::GlUtils::m_pInstance;
  if (!v3 || !*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 16) || !*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 18)) {
    goto LABEL_10;
  }
  if (*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 17))
  {
    int v4 = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 20);
    BlueFin::GlUtils::m_ucEnabled = v4 != 0;
    if (!v4) {
      return 0;
    }
LABEL_10:
    if (((unint64_t)*(unsigned __int8 *)(v1 + 17) >> (v2 & 7))) {
      return ((unint64_t)*(unsigned int *)(v1 + 20) >> (v2 >> 3)) & 1;
    }
    return 0;
  }
  unint64_t result = 0;
  BlueFin::GlUtils::m_ucEnabled = 0;
  return result;
}

BOOL BlueFin::GlPeEngineCallBacks::IsSysLogLineSet(BlueFin::GlPeEngineCallBacks *this)
{
  return *((void *)this + 14) != 0;
}

uint64_t BlueFin::GlPeUtilsCallbacks::IsSysLogEnabled(BlueFin::GlPeUtilsCallbacks *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 24))();
}

void *BlueFin::GlUtils::GlUtils(void *a1, uint64_t a2)
{
  a1[138] = 0;
  *((_DWORD *)a1 + 278) = 0;
  *a1 = a2;
  a1[1] = 0;
  *(_DWORD *)((char *)a1 + 15) = 0;
  *(void *)((char *)a1 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((_WORD *)a1 + 14) = 0;
  *(_OWORD *)((char *)a1 + 1082) = 0u;
  *(_DWORD *)((char *)a1 + 1097) = 0;
  *((_WORD *)a1 + 56BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
  *((unsigned char *)a1 + 1122) = 0;
  *(_OWORD *)((char *)a1 + 1124) = 0u;
  *(_OWORD *)((char *)a1 + 114BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)a1 + 1156) = 0u;
  *(_OWORD *)((char *)a1 + 1172) = 0u;
  *(_OWORD *)((char *)a1 + 1188) = 0u;
  *(_OWORD *)((char *)a1 + 1204) = 0u;
  *(_OWORD *)((char *)a1 + 1213) = 0u;
  a1[154] = 0;
  a1[155] = "initGLL";
  *((_OWORD *)a1 + 98) = 0u;
  BlueFin::GlUtils::m_ucEnabled = 2;
  BlueFin::GlUtils::m_pInstance = (uint64_t)a1;
  *((_DWORD *)a1 + 272) = 1;
  int v3 = (*(uint64_t (**)(void))(*(void *)*a1 + 48))(*a1);
  *((_DWORD *)a1 + 273) = v3;
  *((_DWORD *)a1 + 396) = v3;
  bzero((char *)a1 + 30, 0x41BuLL);
  *((_OWORD *)a1 + 97) = 0u;
  *((_OWORD *)a1 + 96) = 0u;
  *((_OWORD *)a1 + 95) = 0u;
  *((_OWORD *)a1 + 94) = 0u;
  *((_OWORD *)a1 + 93) = 0u;
  *((_OWORD *)a1 + 92) = 0u;
  *((_OWORD *)a1 + 9BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
  *((_OWORD *)a1 + 9BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *((_OWORD *)a1 + 89) = 0u;
  *((_OWORD *)a1 + 88) = 0u;
  *((_OWORD *)a1 + 87) = 0u;
  *((_OWORD *)a1 + 86) = 0u;
  *((_OWORD *)a1 + 85) = 0u;
  *((_OWORD *)a1 + 84) = 0u;
  *((_OWORD *)a1 + 83) = 0u;
  *((_OWORD *)a1 + 82) = 0u;
  *((_OWORD *)a1 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
  *((_OWORD *)a1 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *((_OWORD *)a1 + 79) = 0u;
  *((_OWORD *)a1 + 78) = 0u;
  uint64_t v4 = BlueFin::GlUtils::m_pInstance;
  int v5 = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092);
  *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1236) = v5;
  *(_DWORD *)(v4 + 1232) = v5 + 59950;
  *(_OWORD *)(a1 + 199) = 0u;
  *(_OWORD *)(a1 + 20BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
  return a1;
}

uint64_t BlueFin::GlDbgEngine::SetCbOnSerialNumber(uint64_t result, uint64_t a2)
{
  *(void *)(result + 912) = a2;
  return result;
}

uint64_t BlueFin::GlDbgEngine::SetCbOnTimerSet(uint64_t a1, uint64_t (*a2)(uint64_t a1, uint64_t a2, uint64_t a3, BOOL a4))
{
  if (a2 != BlueFin::GlDbgProxyGlEngineOnTimerSet) {
    *(void *)(a1 + 304) = a2;
  }
  BlueFin::GlDbgCodec::WriteStart(*(BlueFin::GlDbgCodec **)(a1 + 8), 1576);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  *(void *)(a1 + 728) = BlueFin::GlDbgProxyGlEngineOnTimerSet;
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1576);
  int v3 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);

  return v3();
}

#error "2639C384C: call analysis failed (funcsize=150)"

void FireDeviceLog::DeviceLogLine(FireDeviceLog *this, const char *a2)
{
  FireDeviceLog::GetLineLeading((DeviceCommon *)0x53, 3, &v12);
  if (!FireResourceMgr::fInstance) {
    operator new();
  }
  uint64_t v3 = *(void *)(FireResourceMgr::fInstance + 16);
  int v4 = SHIBYTE(v12.__r_.__value_.__r.__words[2]);
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v12.__r_.__value_.__l.__size_;
  }
  size_t v6 = strlen((const char *)this);
  int v7 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, size + v6);
  if (v11 < 0) {
    int v7 = (void **)__p[0];
  }
  if (size)
  {
    if (v4 >= 0) {
      long long v8 = &v12;
    }
    else {
      long long v8 = (std::string *)v12.__r_.__value_.__r.__words[0];
    }
    memmove(v7, v8, size);
  }
  long long v9 = (char *)v7 + size;
  if (v6) {
    memmove(v9, this, v6);
  }
  v9[v6] = 0;
  (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v3 + 16))(v3, 3, __p);
  if ((v11 & 0x80000000) == 0)
  {
    if ((v4 & 0x80000000) == 0) {
      return;
    }
LABEL_19:
    operator delete(v12.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (v4 < 0) {
    goto LABEL_19;
  }
}

void sub_2639C3B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    size_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

void FireDeviceLog::GetLineLeading(DeviceCommon *a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  std::string::value_type v4 = (char)a1;
  DeviceCommon::GetMachContinuousTime(a1);
  std::to_string(&v8, v6);
  std::string::push_back(&v8, 32);
  std::string v9 = v8;
  memset(&v8, 0, sizeof(v8));
  std::string::push_back(&v9, v4);
  std::string v10 = v9;
  memset(&v9, 0, sizeof(v9));
  if ((a2 - 1) > 8) {
    std::string::value_type v7 = 78;
  }
  else {
    std::string::value_type v7 = aFewmiddvv[a2 - 1];
  }
  std::string::push_back(&v10, v7);
  std::string v11 = v10;
  memset(&v10, 0, sizeof(v10));
  std::string::push_back(&v11, 32);
  *a3 = v11;
  memset(&v11, 0, sizeof(v11));
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
}

void sub_2639C3D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void CbGlEngineOnSysLogLine(int a1, FireDeviceLog *this)
{
}

char *BlueFin::GlDbgCodec::Write(BlueFin::GlDbgCodec *this, unint64_t *a2)
{
  v5[1] = *MEMORY[0x263EF8340];
  unint64_t result = (char *)(*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 120))(this);
  if (result)
  {
    v5[0] = bswap64(*a2);
    return BlueFin::GlDbgCodecBase::Encode((char *)this, (char *)v5, 8, 0, 0);
  }
  return result;
}

{
  char *result;
  uint64_t vars8;

  unint64_t result = (char *)(*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 120))(this);
  if (result)
  {
    return BlueFin::GlDbgCodec::Write(this, a2);
  }
  return result;
}

{
  char *result;
  uint64_t vars8;

  unint64_t result = (char *)(*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 120))(this);
  if (result)
  {
    return BlueFin::GlDbgCodec::Write(this, a2);
  }
  return result;
}

BlueFin::GlDbgCodec *BlueFin::GlDbgProxyGlEngCbOnLTOFileRead(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (BlueFin::GlDbgCodec *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 656))(a1);

  return BlueFin::GlDbgProxy::HalGlEngCbOnLTOFileRead(v5, a2, a3);
}

void BlueFin::GlSettingsImpl::UpdateLtOcbeeQaData(BlueFin::GlSettingsImpl *this, unsigned int a2)
{
  unsigned int v3 = *((unsigned __int8 *)this + 856);
  std::string::value_type v4 = (unsigned char *)*((void *)this + 109);
  if (*((unsigned char *)this + 856))
  {
    if (*v4) {
      return;
    }
    srand(a2);
    uint64_t v5 = (char *)&BlueFin::GlSettingsImpl::UpdateLtOcbeeQaData::astSvIdPairs
       + 4 * (int)((double)rand() / 2147483650.0 * 6.0);
    double v6 = (unsigned char *)*((void *)this + 109);
    *double v6 = *v5;
    v6[1] = v5[2];
    int v7 = (int)((double)rand() / 2147483650.0 * 3.0);
    int v8 = rand();
    std::string v9 = &BlueFin::GlSettingsImpl::UpdateLtOcbeeQaData::astErrRangeIn100M[2 * v7];
    LOWORD(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v9[1];
    LOWORD(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *v9;
    double v12 = ((double)v11 + (double)v8 / 2147483650.0 * (double)v10) * 100.0;
    double v13 = fmod(v12, 4294967300.0);
    if (v12 <= 4294967300.0) {
      double v13 = v12;
    }
    if (v13 < -4294967300.0) {
      double v13 = -fmod(-v13, 4294967300.0);
    }
    if (v13 < 0.0) {
      unsigned int v3 = --v13;
    }
    else {
      unsigned int v3 = v13;
    }
  }
  else
  {
    *(_WORD *)std::string::value_type v4 = 0;
  }
  *((_DWORD *)this + 22BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v3;
}

uint64_t BlueFin::GlPeLtoReader::GlPeLtoReader(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  *(void *)a1 = &unk_270EC1860;
  uint64_t v17 = a1 + 9716;
  *(unsigned char *)(a1 + 9716) = 0;
  *(_OWORD *)(a1 + 974BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 9756) = 0u;
  *(_OWORD *)(a1 + 9772) = 0u;
  *(_OWORD *)(a1 + 9784) = 0u;
  *(_OWORD *)(a1 + 996BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(void *)(a1 + 9808) = -1;
  *(_OWORD *)(a1 + 9816) = 0u;
  *(_OWORD *)(a1 + 9832) = 0u;
  *(_OWORD *)(a1 + 9848) = 0u;
  *(_OWORD *)(a1 + 9864) = 0u;
  long long v18 = (void *)(a1 + 99968);
  *(_OWORD *)(a1 + 988BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 9896) = 0u;
  char v126 = (void *)(a1 + 99072);
  uint64_t v127 = (void *)(a1 + 99520);
  __int16 v125 = (void *)(a1 + 98624);
  *(_OWORD *)(a1 + 9912) = 0u;
  *(_OWORD *)(a1 + 9928) = 0u;
  long long v19 = (void *)(a1 + 97856);
  *(_OWORD *)(a1 + 994BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
  *(_OWORD *)(a1 + 10184) = 0u;
  long long v20 = (void *)(a1 + 11432);
  *(void *)(a1 + 1020BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 11432;
  *(void *)(a1 + 10208) = a1 + 16040;
  uint64_t v123 = a1 + 17216;
  *(void *)(a1 + 10216) = a1 + 17216;
  uint64_t v122 = a1 + 18272;
  *(void *)(a1 + 10224) = a1 + 18272;
  *(void *)(a1 + 1024BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 21864;
  uint64_t v21 = a1 + 22632;
  *(void *)(a1 + 10248) = a1 + 22632;
  *(void *)(a1 + 10264) = a1 + 26184;
  long long v22 = (void *)(a1 + 97088);
  *(void *)(a1 + 10272) = a1 + 10284;
  *(unsigned char *)(a1 + 1028BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 2;
  *(void *)(a1 + 10328) = a1 + 10340;
  uint64_t v23 = a1 + 50648;
  *(unsigned char *)(a1 + 10336) = 2;
  *(void *)(a1 + 10352) = a1 + 36044;
  *(void *)(a1 + 10384) = a1 + 45572;
  *(void *)(a1 + 10408) = a1 + 48556;
  uint64_t v24 = a1 + 48632;
  *(void *)(a1 + 10416) = a1 + 48632;
  uint64_t v25 = a1 + 11104;
  *(void *)(a1 + 10424) = a1 + 11104;
  *(void *)(a1 + 10472) = a1 + 11168;
  *(void *)(a1 + 10496) = a1 + 11176;
  *(_OWORD *)(a1 + 10504) = xmmword_263BB8E30;
  uint64_t v26 = a1 + 47480;
  int v110 = (void *)(a1 + 96800);
  *(void *)(a1 + 10552) = a1 + 96832;
  *(void *)(a1 + 10568) = a1 + 97344;
  uint64_t v27 = a1 + 40376;
  *(void *)(a1 + 10576) = a1 + 97600;
  *(void *)(a1 + 10592) = a1 + 98048;
  uint64_t v28 = a1 + 26960;
  *(void *)(a1 + 1060BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 98240;
  *(void *)(a1 + 10608) = a1 + 98368;
  uint64_t v29 = (void *)(a1 + 18408);
  *(void *)(a1 + 10616) = a1 + 98496;
  *(void *)(a1 + 10656) = a1 + 100224;
  *(void *)(a1 + 1072BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 102492;
  *(void *)(a1 + 10736) = a1 + 11404;
  *(void *)(a1 + 10744) = a1 + 50660;
  *(void *)(a1 + 10752) = a1 + 11280;
  *(void *)(a1 + 1076BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 11312;
  int v30 = (void *)(a1 + 24744);
  *(void *)(a1 + 10768) = v23 + 32;
  *(unsigned char *)(v17 + 1068) = 1;
  *(void *)(a1 + 10816) = a6;
  *(void *)(a1 + 10848) = v21;
  *(void *)(a1 + 1088BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v24;
  *(void *)(a1 + 10888) = v25;
  *(_OWORD *)(a1 + 11032) = 0u;
  int v118 = v29;
  *(void *)(a1 + 10232) = v29;
  *(void *)(a1 + 10256) = v30;
  *(void *)(v17 + 568) = 0;
  *(void *)(a1 + 10296) = a1 + 26560;
  *(void *)(a1 + 10304) = a1 + 26912;
  *(void *)(a1 + 10312) = v28;
  *(void *)(a1 + 1032BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 26972;
  *(void *)(v17 + 624) = 0;
  *(void *)(a1 + 1036BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 38336;
  *(void *)(a1 + 10368) = a1 + 39360;
  *(void *)(a1 + 10376) = a1 + 40388;
  *(void *)(a1 + 10392) = a1 + 46464;
  *(void *)(a1 + 1040BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 47492;
  *(void *)(a1 + 10432) = a1 + 11084;
  *(void *)(a1 + 1044BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 11120;
  *(void *)(a1 + 10448) = a1 + 11136;
  *(void *)(a1 + 10456) = v27;
  *(void *)(a1 + 10464) = a1 + 11152;
  *(void *)(a1 + 1048BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v26;
  *(void *)(a1 + 10488) = v23;
  *(int32x2_t *)(a1 + 1052BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = vdup_n_s32(0xFEEDBEEF);
  *(unsigned char *)(v17 + 812) = 0;
  *(_WORD *)(v17 + 814) = 0;
  *(void *)(a1 + 10536) = a1 + 50720;
  *(_DWORD *)(a1 + 10544) = -1;
  char v114 = v22;
  *(void *)(a1 + 1056BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v22;
  char v112 = v19;
  *(void *)(a1 + 10584) = v19;
  *(void *)(a1 + 10624) = v125;
  *(void *)(a1 + 10632) = v126;
  *(void *)(a1 + 1064BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v127;
  int v120 = v18;
  *(void *)(a1 + 10648) = v18;
  *(void *)(a1 + 10664) = a1 + 100480;
  *(void *)(a1 + 10672) = a1 + 100544;
  *(void *)(a1 + 1068BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 100960;
  *(void *)(a1 + 10688) = a1 + 101088;
  *(void *)(a1 + 10696) = a1 + 101856;
  *(void *)(a1 + 10704) = a1 + 102304;
  *(void *)(a1 + 10712) = a1 + 102480;
  *(void *)(a1 + 10728) = a1 + 11376;
  *(void *)(a1 + 10776) = a2;
  *(void *)(a1 + 10792) = a5;
  *(void *)(a1 + 1080BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_DWORD *)(a1 + 10808) = 0;
  *(void *)(a1 + 10824) = 0;
  *(void *)(a1 + 10832) = 0xFFFFFFFF00000000;
  int v119 = v20;
  *(void *)(a1 + 1084BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v20;
  char v117 = v30;
  *(void *)(a1 + 10856) = v30;
  *(void *)(a1 + 10864) = a1 + 26972;
  *(void *)(a1 + 10872) = a1 + 40388;
  *(void *)(a1 + 10896) = a1 + 11084;
  uint64_t v113 = v26;
  *(void *)(a1 + 10904) = v26;
  *(void *)(a1 + 10912) = v28;
  *(void *)(a1 + 1092BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v27;
  uint64_t v111 = v23;
  *(void *)(a1 + 10928) = v23;
  *(void *)(a1 + 10936) = v123;
  *(void *)(a1 + 10944) = v122;
  *(void *)(a1 + 10952) = a1 + 26560;
  *(void *)(a1 + 1096BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 26912;
  *(void *)(a1 + 10968) = a1 + 38336;
  *(void *)(a1 + 10976) = a1 + 39360;
  *(void *)(a1 + 10984) = a1 + 100544;
  *(void *)(a1 + 10992) = a1 + 100960;
  *(void *)(a1 + 1100BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 101088;
  *(void *)(a1 + 11008) = a1 + 101856;
  *(void *)(a1 + 11016) = a1 + 102304;
  *(void *)(a1 + 11024) = a1 + 102480;
  *(_DWORD *)(a1 + 11048) = 0;
  *(void *)(a1 + 11064) = a2;
  *(unsigned char *)(v17 + 1356) = 0;
  LODWORD(v18) = a4;
  *(_DWORD *)(a1 + 11052) = a4;
  *(_DWORD *)(a1 + 11056) = -1;
  *(unsigned char *)(v17 + 1364) = 0;
  bzero((void *)(a1 + 16), 0x25E4uLL);
  *(void *)(a1 + 8) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + 9717) = 0u;
  *(_OWORD *)(a1 + 9976) = 0u;
  *(_OWORD *)(a1 + 9992) = 0u;
  *(_OWORD *)(a1 + 10008) = 0u;
  *(_OWORD *)(a1 + 10024) = 0u;
  *(_OWORD *)(a1 + 1004BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 10056) = 0u;
  *(_OWORD *)(a1 + 10072) = 0u;
  *(_OWORD *)(a1 + 10088) = 0u;
  *(_OWORD *)(a1 + 10104) = 0u;
  *(_OWORD *)(a1 + 1012BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 10136) = 0u;
  *(_OWORD *)(a1 + 10152) = 0u;
  *(_OWORD *)(a1 + 10164) = 0u;
  *(_DWORD *)(a1 + 980BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v18;
  *(_DWORD *)(a1 + 9804) = -1;
  *(_DWORD *)(a1 + 9736) = 9700;
  *(_OWORD *)(v17 + 152) = xmmword_263BAAD70;
  *(void *)(a1 + 9884) = 0;
  *(unsigned char *)(v17 + 24BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  uint64_t v31 = *(void *)(a1 + 10192);
  if (v31) {
    *(_WORD *)(v31 + 4) = 0;
  }
  uint64_t v32 = (unsigned char *)(a1 + 22692);
  if (a5) {
    *a5 = 0;
  }
  uint64_t v33 = 0;
  *(void *)a1 = &unk_270EC18A0;
  *(_DWORD *)(a1 + 10808) = 0;
  *(void *)(a1 + 1112BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 11126) = 0;
  *(void *)(a1 + 11136) = 0;
  *(void *)(a1 + 11142) = 0;
  *(void *)(a1 + 11176) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 11184) = 0;
  *(void *)(a1 + 11192) = a3;
  *(void *)(a1 + 1120BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a7;
  *(void *)(a1 + 11208) = a8;
  *(void *)(a1 + 11216) = a9;
  *(void *)(a1 + 11224) = a10;
  *(void *)(a1 + 11232) = a11;
  *(void *)(a1 + 1124BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a12;
  *(void *)(a1 + 11248) = a13;
  *(void *)(a1 + 11256) = a14;
  *(void *)(a1 + 11264) = a15;
  *(void *)(a1 + 11272) = a16;
  *(void *)(a1 + 1824BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v123;
  *(void *)(a1 + 1840BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v122;
  *(void *)(a1 + 2688BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 26560;
  *(void *)(a1 + 26952) = a1 + 26912;
  *(_WORD *)uint64_t v28 = 0;
  *(void *)(v28 + 4) = 0;
  *(void *)(v28 + 12384) = a1 + 38336;
  *(void *)(v28 + 13408) = a1 + 39360;
  *(_WORD *)uint64_t v27 = 0;
  *(void *)(v27 + 4) = 0;
  *(void *)(v27 + 7096) = a1 + 46464;
  *(_WORD *)uint64_t v113 = 0;
  *(void *)(v113 + 4) = 0;
  *(_WORD *)uint64_t v111 = 0;
  *(void *)(v111 + 4) = 0;
  *(_DWORD *)(v111 + 44) = 2048;
  *(void *)(v111 + 32) = v111 + 44;
  *(unsigned char *)(v111 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 3;
  *(void *)(v111 + 48) = 0;
  *(_WORD *)(v111 + 56) = 3;
  *int v110 = a1 + 50720;
  char v110[4] = 0xFFFFFFFF00000000;
  v110[32] = a1 + 96864;
  do
  {
    uint64_t v34 = a1 + 96866 + v33;
    *(_WORD *)(v34 - 2) = 0;
    *(unsigned char *)uint64_t v34 = 0;
    *(_WORD *)(v34 + 2) = 0;
    v33 += 6;
  }
  while (v33 != 192);
  uint64_t v35 = 0;
  *char v114 = 0xFFFFFFFF00000000;
  v114[28] = a1 + 97120;
  do
  {
    uint64_t v36 = a1 + 97122 + v35;
    *(_WORD *)(v36 - 2) = 0;
    *(unsigned char *)uint64_t v36 = 0;
    *(_WORD *)(v36 + 2) = 0;
    v35 += 6;
  }
  while (v35 != 192);
  uint64_t v37 = 0;
  v114[32] = 0xFFFFFFFF00000000;
  v114[60] = a1 + 97376;
  do
  {
    uint64_t v38 = a1 + 97378 + v37;
    *(_WORD *)(v38 - 2) = 0;
    *(unsigned char *)uint64_t v38 = 0;
    *(_WORD *)(v38 + 2) = 0;
    v37 += 6;
  }
  while (v37 != 192);
  uint64_t v39 = 0;
  v114[64] = 0xFFFFFFFF00000000;
  v114[92] = a1 + 97632;
  do
  {
    uint64_t v40 = a1 + 97634 + v39;
    *(_WORD *)(v40 - 2) = 0;
    *(unsigned char *)uint64_t v40 = 0;
    *(_WORD *)(v40 + 2) = 0;
    v39 += 6;
  }
  while (v39 != 192);
  uint64_t v41 = 0;
  *char v112 = 0xFFFFFFFF00000000;
  v112[22] = a1 + 97888;
  do
  {
    uint64_t v42 = a1 + 97890 + v41;
    *(_WORD *)(v42 - 2) = 0;
    *(unsigned char *)uint64_t v42 = 0;
    *(_WORD *)(v42 + 2) = 0;
    v41 += 6;
  }
  while (v41 != 144);
  uint64_t v43 = 0;
  v112[24] = 0xFFFFFFFF00000000;
  v112[46] = a1 + 98080;
  do
  {
    uint64_t v44 = a1 + 98082 + v43;
    *(_WORD *)(v44 - 2) = 0;
    *(unsigned char *)uint64_t v44 = 0;
    *(_WORD *)(v44 + 2) = 0;
    v43 += 6;
  }
  while (v43 != 144);
  uint64_t v45 = 0;
  v112[48] = 0xFFFFFFFF00000000;
  v112[60] = a1 + 98272;
  do
  {
    uint64_t v46 = a1 + 98274 + v45;
    *(_WORD *)(v46 - 2) = 0;
    *(unsigned char *)uint64_t v46 = 0;
    *(_WORD *)(v46 + 2) = 0;
    v45 += 6;
  }
  while (v45 != 60);
  uint64_t v47 = 0;
  v112[64] = 0xFFFFFFFF00000000;
  v112[76] = a1 + 98400;
  do
  {
    uint64_t v48 = a1 + 98402 + v47;
    *(_WORD *)(v48 - 2) = 0;
    *(unsigned char *)uint64_t v48 = 0;
    *(_WORD *)(v48 + 2) = 0;
    v47 += 6;
  }
  while (v47 != 60);
  uint64_t v49 = 0;
  v112[80] = 0xFFFFFFFF00000000;
  v112[92] = a1 + 98528;
  do
  {
    uint64_t v50 = a1 + 98530 + v49;
    *(_WORD *)(v50 - 2) = 0;
    *(unsigned char *)uint64_t v50 = 0;
    *(_WORD *)(v50 + 2) = 0;
    v49 += 6;
  }
  while (v49 != 60);
  uint64_t v51 = 0;
  void *v125 = 0xFFFFFFFF00000000;
  v125[52] = a1 + 98656;
  do
  {
    uint64_t v52 = a1 + 98658 + v51;
    *(_WORD *)(v52 - 2) = 0;
    *(unsigned char *)uint64_t v52 = 0;
    *(_WORD *)(v52 + 2) = 0;
    v51 += 6;
  }
  while (v51 != 378);
  uint64_t v53 = 0;
  *char v126 = 0xFFFFFFFF00000000;
  v126[52] = a1 + 99104;
  do
  {
    uint64_t v54 = a1 + 99106 + v53;
    *(_WORD *)(v54 - 2) = 0;
    *(unsigned char *)uint64_t v54 = 0;
    *(_WORD *)(v54 + 2) = 0;
    v53 += 6;
  }
  while (v53 != 378);
  uint64_t v55 = 0;
  *uint64_t v127 = 0xFFFFFFFF00000000;
  v127[52] = a1 + 99552;
  do
  {
    uint64_t v56 = a1 + 99554 + v55;
    *(_WORD *)(v56 - 2) = 0;
    *(unsigned char *)uint64_t v56 = 0;
    *(_WORD *)(v56 + 2) = 0;
    v55 += 6;
  }
  while (v55 != 378);
  uint64_t v57 = 0;
  *int v120 = 0xFFFFFFFF00000000;
  v120[31] = a1 + 100000;
  do
  {
    uint64_t v58 = a1 + 100002 + v57;
    *(_WORD *)(v58 - 2) = 0;
    *(unsigned char *)uint64_t v58 = 0;
    *(_WORD *)(v58 + 2) = 0;
    v57 += 6;
  }
  while (v57 != 216);
  uint64_t v59 = 0;
  v120[32] = 0xFFFFFFFF00000000;
  v120[63] = a1 + 100256;
  do
  {
    uint64_t v60 = a1 + 100258 + v59;
    *(_WORD *)(v60 - 2) = 0;
    *(unsigned char *)uint64_t v60 = 0;
    *(_WORD *)(v60 + 2) = 0;
    v59 += 6;
  }
  while (v59 != 216);
  v120[120] = a1 + 100544;
  v120[139] = a1 + 100960;
  v120[235] = a1 + 101088;
  v120[290] = a1 + 101856;
  v120[313] = a1 + 102304;
  GlCustomLog(15, "LTO under license to '%s', license #%u\n", "ice", 10);
  GlCustomLog(15, "%s\n", "LTO_LICENSEE=ice");
  bzero(v117, 0x5A0uLL);
  *(_DWORD *)(a1 + 11116) = 0;
  *(_OWORD *)(a1 + 11084) = 0u;
  *(_OWORD *)(a1 + 1110BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  bzero(v119, 0x1680uLL);
  bzero(v118, 0x1080uLL);
  bzero((void *)(a1 + 26972), 0x2C4CuLL);
  bzero((void *)(a1 + 40388), 0x17A0uLL);
  bzero((void *)(a1 + 47492), 0xC54uLL);
  for (uint64_t i = 0; i != 1024; i += 32)
  {
    uint64_t v62 = *(void *)(a1 + 18240) + i;
    *(unsigned char *)uint64_t v62 = -1;
    *(_DWORD *)(v62 + 4) = -1;
    *(_DWORD *)(v62 + 28) = 0;
    *(void *)(v62 + 8) = 0;
    *(void *)(v62 + 16) = 0;
    *(_DWORD *)(v62 + 23) = 0;
  }
  uint64_t v63 = 0;
  uint64_t v64 = *(void *)(a1 + 18400);
  do
  {
    uint64_t v65 = v64 + v63;
    *(unsigned char *)uint64_t v65 = -1;
    *(_WORD *)(v65 + 2) = 0;
    v63 += 4;
  }
  while (v63 != 128);
  for (uint64_t j = 0; j != 1008; j += 28)
  {
    uint64_t v67 = *(void *)(v27 + 7096) + j;
    *(unsigned char *)uint64_t v67 = -1;
    *(_DWORD *)(v67 + 4) = -1;
    *(void *)(v67 + 8) = 0;
    *(void *)(v67 + 16) = 0;
    *(_DWORD *)(v67 + 24) = 0;
  }
  for (uint64_t k = 0; k != 320; k += 32)
  {
    uint64_t v69 = *(void *)(a1 + 26880) + k;
    *(unsigned char *)uint64_t v69 = -1;
    *(_DWORD *)(v69 + 4) = -1;
    *(_DWORD *)(v69 + 28) = 0;
    *(void *)(v69 + 8) = 0;
    *(void *)(v69 + 16) = 0;
    *(_DWORD *)(v69 + 23) = 0;
  }
  uint64_t v70 = 0;
  uint64_t v71 = *(void *)(a1 + 26952);
  do
  {
    uint64_t v72 = v71 + v70;
    *(unsigned char *)uint64_t v72 = -1;
    *(_WORD *)(v72 + 2) = 0;
    v70 += 4;
  }
  while (v70 != 40);
  for (uint64_t m = 0; m != 1008; m += 16)
  {
    uint64_t v74 = *(void *)(v28 + 12384) + m;
    *(unsigned char *)uint64_t v74 = -1;
    *(void *)(v74 + 4) = 0;
    *(_DWORD *)(v74 + 12) = 0;
  }
  for (uint64_t n = 0; n != 1008; n += 16)
  {
    uint64_t v76 = *(void *)(v28 + 13408) + n;
    *(unsigned char *)uint64_t v76 = -1;
    *(void *)(v76 + 4) = 0;
    *(_DWORD *)(v76 + 12) = 0;
  }
  for (iuint64_t i = 0; ii != 4; ++ii)
  {
    uint64_t v78 = *v110 + 11520 * ii;
    *(_DWORD *)uint64_t v78 = 0;
    *(_OWORD *)(v78 + 8) = 0uLL;
    *(_OWORD *)(v78 + 24) = 0uLL;
    *(_OWORD *)(v78 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0uLL;
    *(void *)(v78 + 56) = 0;
    *(void *)(v78 + 64) = 0xFFFFFFFFLL;
    long long v79 = (void *)(v78 + 11496);
    *(void *)(v78 + 11496) = v78 + 96;
    uint64_t v80 = -11400;
    do
    {
      uint64_t v81 = *v79 + v80;
      *(_DWORD *)(v81 + 11592) = 0;
      *(_OWORD *)(v81 + 1156BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0uLL;
      *(_OWORD *)(v81 + 11576) = 0uLL;
      *(_OWORD *)(v81 + 11528) = 0uLL;
      *(_OWORD *)(v81 + 11544) = 0uLL;
      *(_OWORD *)(v81 + 11496) = 0uLL;
      *(_OWORD *)(v81 + 11512) = 0uLL;
      *(_OWORD *)(v81 + 11464) = 0uLL;
      *(_OWORD *)(v81 + 1148BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0uLL;
      *(_OWORD *)(v81 + 11432) = 0uLL;
      *(_OWORD *)(v81 + 11448) = 0uLL;
      *(_OWORD *)(v81 + 1140BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0uLL;
      *(_OWORD *)(v81 + 11416) = 0uLL;
      v80 += 200;
    }
    while (v80);
  }
  uint64_t v82 = 0;
  uint64_t v83 = v120[120];
  do
  {
    uint64_t v84 = v83 + v82;
    *(unsigned char *)uint64_t v84 = -1;
    *(void *)(v84 + 4) = 0xFFFFFFFFLL;
    v82 += 12;
  }
  while (v82 != 384);
  uint64_t v85 = 0;
  uint64_t v86 = v120[139];
  do
  {
    uint64_t v87 = v86 + v85;
    *(unsigned char *)uint64_t v87 = -1;
    *(void *)(v87 + 4) = 0xFFFFFFFFLL;
    v85 += 12;
  }
  while (v85 != 120);
  uint64_t v88 = 0;
  uint64_t v89 = v120[235];
  do
  {
    uint64_t v90 = v89 + v88;
    *(unsigned char *)uint64_t v90 = -1;
    *(void *)(v90 + 4) = 0xFFFFFFFFLL;
    v88 += 12;
  }
  while (v88 != 756);
  uint64_t v91 = 0;
  uint64_t v92 = v120[290];
  do
  {
    uint64_t v93 = v92 + v91;
    *(unsigned char *)uint64_t v93 = -1;
    *(void *)(v93 + 4) = 0xFFFFFFFFLL;
    v91 += 12;
  }
  while (v91 != 432);
  uint64_t v94 = 0;
  uint64_t v95 = v120[313];
  do
  {
    uint64_t v96 = v95 + v94;
    *(unsigned char *)uint64_t v96 = -1;
    *(void *)(v96 + 4) = 0xFFFFFFFFLL;
    v94 += 12;
  }
  while (v94 != 168);
  if (a2 | a3)
  {
    int v97 = 0;
  }
  else
  {
    GlCustomLog(14, "LTO error in initialization\n");
    int v97 = 65;
  }
  *(_DWORD *)(a1 + 8) = v97;
  uint64_t v98 = -4608;
  uint64_t v99 = 16040;
  do
  {
    *(_DWORD *)(a1 + v98 + 1604BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 255;
    *(unsigned char *)(a1 + v99) = -1;
    v99 += 36;
    v98 += 144;
  }
  while (v98);
  uint64_t v100 = 18408;
  do
  {
    *(_DWORD *)(a1 + v10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 255;
    *(unsigned char *)(a1 + 21866 + v98) = 0;
    *uint64_t v32 = -1;
    v32 += 88;
    v98 += 32;
    v100 += 144;
  }
  while (v98 != 768);
  uint64_t v101 = 0;
  uint64_t v102 = a1 + 26184;
  do
  {
    *(_DWORD *)(v102 + 4 * v101 - 144BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 255;
    uint64_t v103 = v102 + v101;
    *(_DWORD *)(v103 + 32) = 0;
    *(_OWORD *)uint64_t v103 = 0uLL;
    *(_OWORD *)(v103 + 16) = 0uLL;
    *(unsigned char *)uint64_t v103 = -1;
    v101 += 36;
  }
  while (v101 != 360);
  for (juint64_t j = 0; jj != 2268; jj += 36)
  {
    *(_DWORD *)(a1 + 26972 + 4 * jj) = 255;
    *(unsigned char *)(a1 + 36044 + jj) = -1;
  }
  uint64_t v105 = 0;
  uint64_t v106 = 40388;
  do
  {
    *(_DWORD *)(a1 + v106) = 255;
    *(unsigned char *)(a1 + 45572 + v105) = -1;
    v105 += 24;
    v106 += 144;
  }
  while (v105 != 864);
  uint64_t v107 = 0;
  *(void *)(a1 + 11152) = 0;
  *(void *)(a1 + 1116BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 11166) = 0;
  do
  {
    *(unsigned char *)(a1 + 47492 + v107) = -1;
    v107 += 56;
  }
  while (v107 != 1064);
  uint64_t v108 = 0;
  *(_DWORD *)(a1 + 9844) = a4;
  *(_DWORD *)(a1 + 9848) = -1;
  do
  {
    *(_DWORD *)(a1 + 48632 + v108) = 255;
    v108 += 144;
  }
  while (v108 != 2016);
  *(_OWORD *)(a1 + 100512) = 0u;
  *(_OWORD *)(a1 + 100528) = 0u;
  *(_OWORD *)(a1 + 10048BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 100496) = 0u;
  *(_OWORD *)(a1 + 11376) = 0u;
  *(_OWORD *)(a1 + 11392) = 0u;
  *(_OWORD *)(a1 + 11408) = 0u;
  *(void *)(a1 + 11424) = 0;
  *(_OWORD *)(a1 + 10248BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 102496) = 0u;
  *(_OWORD *)(a1 + 102512) = 0u;
  *(_DWORD *)(a1 + 102528) = 0;
  return a1;
}

BlueFin::GlDbgCodec *BlueFin::GlDbgProxy::HalGlEngCbOnLTOFileRead(BlueFin::GlDbgCodec *result, uint64_t a2, uint64_t a3)
{
  *((void *)result + 867) = a2;
  if (!*((void *)result + 101))
  {
    std::string::value_type v4 = result;
    BlueFin::GlDbgCodec::WriteStart(result, 514);
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)v4 + 32))(v4, 1);
    uint64_t v5 = (void (*)(char *, char *, uint64_t))*((void *)v4 + 92);
    if (v5) {
      v5((char *)v4 + 608, (char *)v4 + 6920, a3);
    }
    BlueFin::GlDbgCodec::WriteFinal(v4, 514);
    double v6 = *(uint64_t (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)v4 + 32);
    return (BlueFin::GlDbgCodec *)v6(v4, 1);
  }
  return result;
}

unint64_t BlueFin::GlDineCtrl::TurnAsicOn(BlueFin::GlDineCtrl *this)
{
  GlCustomLog(14, "TurnAsicOn::GLL @%u\n", 612249);
  BlueFin::GlMeReceiverParametersLogger::ToSlog((BlueFin::GlDineCtrl *)((char *)this + 31912), v2);
  GlCustomLog(14, "GlDineCtrl::TurnAsicOn()\n");

  return BlueFin::GlMeSrdCtrlSm::TurnAsicOn((BlueFin::GlDineCtrl *)((char *)this + 75168));
}

uint64_t BlueFin::GlMeReceiverParametersLogger::ToSlog(BlueFin::GlMeReceiverParametersLogger *this, const BlueFin::GlMeReceiverParametersIfc *a2)
{
  int v3 = (*(uint64_t (**)(BlueFin::GlMeReceiverParametersLogger *, const BlueFin::GlMeReceiverParametersIfc *))(*(void *)this + 16))(this, a2);
  uint64_t result = (*(uint64_t (**)(BlueFin::GlMeReceiverParametersLogger *))(*(void *)this + 24))(this);
  if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    int v6 = result;
    BlueFin::GlMeReceiverParametersLogger::AllParamsToSlog(this, v5);
    BlueFin::GlMeReceiverParametersLogger::SrchSpParamsToSlog(this, v7);
    std::string v9 = (BlueFin::GlMeReceiverParametersLogger *)BlueFin::GlMeReceiverParametersLogger::SrchBsParamsToSlog(this, v8);
    BlueFin::GlMeReceiverParametersLogger::SrchHostParamsToSlog(v9, v10);
    if (v3)
    {
      uint64_t v12 = 0;
      do
      {
        if (v6)
        {
          uint64_t v13 = 0;
          do
          {
            if ((*(unsigned int (**)(BlueFin::GlMeReceiverParametersLogger *, uint64_t, uint64_t))(*(void *)this + 120))(this, v12, v13))
            {
              BlueFin::GlMeReceiverParametersLogger::ModeTrkParamToSlog((uint64_t)this, v12);
            }
            uint64_t v13 = (v13 + 1);
          }
          while (v6 != v13);
        }
        uint64_t v12 = (v12 + 1);
      }
      while (v12 != v3);
    }
    return BlueFin::GlMeReceiverParametersLogger::GsLoopupToSlog(this, v11);
  }
  return result;
}

uint64_t BlueFin::GlMeSrdReceiverParameters::GetNumModes(BlueFin::GlMeSrdReceiverParameters *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)BlueFin::GlMeSrdReceiverParameters::rRxIfc(this) + 24);

  return v1();
}

uint64_t BlueFin::GlMeSrdReceiverParameters::GetNumCnstl(BlueFin::GlMeSrdReceiverParameters *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)BlueFin::GlMeSrdReceiverParameters::rRxIfc(this) + 16);

  return v1();
}

uint64_t BlueFin::GlMeRxParamStd::GetNumModes(BlueFin::GlMeRxParamStd *this)
{
  return 6;
}

uint64_t BlueFin::GlMeRxParamStd::GetNumCnstl(BlueFin::GlMeRxParamStd *this)
{
  return BlueFin::GlMeRxParamLimits::GetMaxAllowedCnstls(**((_DWORD **)this + 1));
}

uint64_t BlueFin::GlPeReqBag::SendSyncinImmediateReportCb(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v14 = 0;
  long long v16 = (unsigned char *)(a1 + 3233);
  char v17 = *(unsigned char *)(a1 + 3233);
  *(unsigned char *)(a1 + 3233) = 0;
  do
  {
    uint64_t result = *(void *)(a1 + v14);
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))(*(void *)result + 216))(result, a2, a3, a4, a5, a6, a7);
    }
    v14 += 8;
  }
  while (v14 != 576);
  *long long v16 = v17;
  return result;
}

void sub_2639C52F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned char *a11, char a12)
{
  *a11 = a12;
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlPeRqHdlrSyncin::SendSyncinImmediateReport(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 104);
  int v3 = *(uint64_t (**)(void))(result + 104);
  if (v3) {
    uint64_t result = v3();
  }
  *(unsigned char *)(a1 + 19) = 1;
  return result;
}

uint64_t BlueFin::GlDbgProxyGlReqOnSyncinReportCurrentTime(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, BOOL a5, BOOL a6, double a7)
{
  uint64_t v13 = (BlueFin::GlDbgRequest *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  uint64_t v14 = *((void *)v13 + 1);

  return BlueFin::GlDbgProxy::HalGlReqOnSyncinReportCurrentTime(v14, v13, a2, a3, a4, a5, a6, a7);
}

uint64_t BlueFin::GlDbgEngine::SetBandsConstraints(uint64_t a1, _DWORD *a2)
{
  BlueFin::GlDbgCodec::WriteStart(*(BlueFin::GlDbgCodec **)(a1 + 8), 1634);
  BlueFin::GlDbgCodec::Write(*(BlueFin::GlDbgCodec **)(a1 + 8), a2);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  BOOL v6 = 0;
  BlueFin::GlEngineImplStd::SetBandsConstraints(a1 + 368, a2);
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1634);
  std::string::value_type v4 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v6);
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  return 0;
}

#error "2639C55B4: call analysis failed (funcsize=68)"

uint64_t BlueFin::GlDbgProxy::HalGlReqOnSyncinReportCurrentTime(uint64_t a1, BlueFin::GlDbgRequest *this, unsigned int a3, uint64_t a4, unsigned int a5, BOOL a6, BOOL a7, double a8)
{
  unsigned int v21 = a5;
  unsigned int v22 = a3;
  double v20 = a8;
  BOOL v19 = a6;
  BOOL v18 = a7;
  uint64_t result = BlueFin::GlDbgRequest::Id(this, 0);
  int v17 = result;
  if (!*(void *)(a1 + 808))
  {
    BlueFin::GlDbgCodec::WriteStart((BlueFin::GlDbgCodec *)a1, 560);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
      BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, (unsigned int *)&v17);
    }
    BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, &v22);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1))
    {
      *(_DWORD *)(a1 + 572) = 2;
      BlueFin::GlDbgCodec::Rvw((BlueFin::GlDbgCodec *)a1, a4);
    }
    BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, &v21);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
      BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, &v20);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
      BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, &v19);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
      BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, &v18);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 1);
    long long v15 = (void (*)(BlueFin::GlDbgRequest *, void, uint64_t, void, BOOL, BOOL, double))*((void *)this + 14);
    if (v15) {
      v15(this, v22, a4, v21, a6, a7, a8);
    }
    BlueFin::GlDbgCodec::WriteFinal((BlueFin::GlDbgCodec *)a1, 560);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
      BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, (unsigned int *)&v17);
    }
    long long v16 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32);
    return v16(a1, 1);
  }
  return result;
}

BlueFin::GlDbgCodec *BlueFin::GlDbgPeIf::SetSyncinEvent(uint64_t a1, unsigned int a2, double a3)
{
  unsigned int v9 = a2;
  double v8 = a3;
  uint64_t result = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (!*((void *)result + 101))
  {
    BlueFin::GlDbgCodec::WriteStart(result, 4625);
    BlueFin::GlDbgCodec::Write(*(BlueFin::GlDbgCodec **)(a1 + 8), &v9);
    BOOL v6 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6)) {
      BlueFin::GlDbgCodec::Write(v6, &v8);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
    (*(void (**)(void, void, double))(**(void **)(a1 + 16) + 184))(*(void *)(a1 + 16), v9, a3);
    BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 4625);
    int v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return (BlueFin::GlDbgCodec *)v7();
  }
  return result;
}

uint64_t BlueFin::GlDbgCodec::Write(BlueFin::GlDbgCodec *a1, _DWORD *a2)
{
  uint64_t result = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 120))(a1);
  if (result)
  {
    *((_DWORD *)a1 + 143) = 2;
    unsigned __int8 v5 = *a2;
    uint64_t result = BlueFin::GlDbgCodec::Rvw(a1, &v5);
    if (!*((_DWORD *)a1 + 143)) {
      *a2 = v5;
    }
  }
  return result;
}

{
  uint64_t result;
  unsigned __int16 v5;

  uint64_t result = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 120))(a1);
  if (result)
  {
    *((_DWORD *)a1 + 143) = 2;
    unsigned __int8 v5 = *a2;
    uint64_t result = BlueFin::GlDbgCodec::Rvw(a1, &v5);
    if (!*((_DWORD *)a1 + 143)) {
      *a2 = v5;
    }
  }
  return result;
}

uint64_t BlueFin::GlReqSm::SetSyncinEvent(uint64_t a1, uint64_t a2, double a3)
{
  int v4 = a2;
  uint64_t result = BlueFin::GlPeReqBag::SetSyncinEvent(a1 + 10880, a2, a3);
  if (v4 == 1)
  {
    uint64_t v8 = *(void *)(a1 + 6272);
    int v9 = *(_DWORD *)(v8 + 88);
    int v10 = *(unsigned __int8 *)(v8 + 26290);
    BOOL v11 = v9 >= 39 && v10 == 0;
    double v12 = 0.00007794;
    if (!v11) {
      double v12 = 0.00007594;
    }
    if (v9 <= 33) {
      double v12 = 0.000042;
    }
    double v7 = a3 + v12 * 1000.0;
  }
  else
  {
    if (v4 != 6) {
      return result;
    }
    uint64_t result = *(void *)(a1 + 312);
    double v7 = 0.0;
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)result + 344))(result, 0, *(unsigned __int8 *)(*(void *)(a1 + 6272) + 25956));
    }
  }
  *(double *)(a1 + 5460BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v7;
  return result;
}

uint64_t BlueFin::GlPeReqBag::SetSyncinEvent(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6 = 0;
  uint64_t v8 = (unsigned char *)(a1 + 3233);
  char v9 = *(unsigned char *)(a1 + 3233);
  *(unsigned char *)(a1 + 3233) = 0;
  do
  {
    uint64_t result = *(void *)(a1 + v6);
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, double))(*(void *)result + 192))(result, a2, a3);
    }
    v6 += 8;
  }
  while (v6 != 576);
  *uint64_t v8 = v9;
  return result;
}

void sub_2639C5C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned char *a11, char a12)
{
  *a11 = a12;
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlPeRqHdlrSyncin::ProcessSyncInEvent(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 112);
  if ((v1 & 2) != 0)
  {
    uint64_t v2 = this;
    if (*(unsigned char *)(this + 21))
    {
      *(unsigned char *)(*(void *)(*(void *)(this + 56) + 88) + 54558) = 1;
    }
    else if ((v1 & 4) != 0)
    {
      *(_DWORD *)(this + 112) = v1 & 0xFFFFFFFB;
      uint64_t v3 = *(void *)(this + 72);
      int v4 = *(_DWORD *)(this + 80);
      uint64_t v5 = *(void *)(this + 96);
      uint64_t v8 = *(void *)(this + 84);
      int v9 = v4;
      uint64_t v10 = v3;
      uint64_t v11 = v5;
      uint64_t v6 = *(BlueFin::GlPeTimeManager **)(*(void *)(this + 56) + 8);
      unsigned __int8 v7 = 0;
      this = BlueFin::GlPeTimeManager::SetTime(v6, (BlueFin::GlPeGnssTime *)&v8, 3u, &v7);
      if ((*(unsigned char *)(v2 + 112) & 8) != 0) {
        *(unsigned char *)(v2 + 19) = 1;
      }
    }
  }
  return this;
}

uint64_t BlueFin::GlPeRqHdlrSyncin::SetSyncinEvent(uint64_t this, int a2, double a3)
{
  if (!*(unsigned char *)(this + 20))
  {
    uint64_t v3 = this;
    if (!*(unsigned char *)(this + 19))
    {
      if (a2 == 1)
      {
        *(double *)(this + 72) = a3;
        *(_DWORD *)(this + 112) |= 2u;
        uint64_t v5 = *(void (**)(void))(*(void *)(this + 104) + 96);
        if (v5) {
          v5();
        }
      }
      else
      {
        uint64_t v6 = *(void (**)(void))(*(void *)(this + 104) + 88);
        if (v6) {
          v6();
        }
        if ((a2 - 3) <= 1)
        {
          *(_DWORD *)(v3 + 112) |= 0x20u;
          *(unsigned char *)(v3 + 19) = 1;
        }
      }
      return BlueFin::GlPeRqHdlrSyncin::ProcessSyncInEvent(v3);
    }
  }
  return this;
}

uint64_t BlueFin::GlPosEng::SetSyncinEvent(uint64_t a1, uint64_t a2, double a3)
{
  return BlueFin::GlReqSm::SetSyncinEvent(a1 + 126144, a2, a3);
}

uint64_t BlueFin::GlDbgMeIf::ArmSYNCIN(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 344))();
}

unsigned char *BlueFin::GlDineCtrl::ArmSYNCIN(BlueFin::GlDineCtrl *this, int a2, int a3)
{
  uint64_t v6 = 70;
  if (a3) {
    uint64_t v7 = 84;
  }
  else {
    uint64_t v7 = 70;
  }
  if (a2) {
    uint64_t v6 = 84;
  }
  GlCustomLog(14, "GlDineCtrl::ArmSYNCIN(%c,%c)\n", v6, v7);
  uint64_t result = BlueFin::GlMeSrdCtrlSm::ArmSYNCIN((unsigned char *)this + 75168, a2, a3);
  if (a2) {
    *((unsigned char *)this + 7420BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
  }
  return result;
}

uint64_t BlueFin::GlQueue::putLIFO(BlueFin::GlQueue *this, int a2, char a3)
{
  if (!a2)
  {
    DeviceFaultNotify("glhsm_queue.cpp", 115, "putLIFO", (char)"sig != 0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glhsm_queue.cpp", 115, "sig != 0");
  }
  char v3 = *(unsigned char *)this;
  if (!*(unsigned char *)this)
  {
    *(unsigned char *)this = a2;
    *((unsigned char *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = a3;
    *((unsigned char *)this + 47) |= *((unsigned char *)this + 46);
    return 1;
  }
  unsigned int v4 = *((unsigned __int16 *)this + 21);
  if (v4 < *((unsigned __int16 *)this + 20))
  {
    *((_WORD *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v4 + 1;
    if (v4 >= *((unsigned __int16 *)this + 22)) {
      *((_WORD *)this + 22) = v4 + 1;
    }
    uint64_t v5 = (unsigned char *)(*((void *)this + 4) - 2);
    *((void *)this + 4) = v5;
    if ((unint64_t)v5 < *((void *)this + 1))
    {
      uint64_t v5 = (unsigned char *)(*((void *)this + 2) - 2);
      *((void *)this + 4) = v5;
    }
    *uint64_t v5 = v3;
    v5[1] = *((unsigned char *)this + 1);
    *(unsigned char *)this = a2;
    *((unsigned char *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = a3;
    return 1;
  }
  return 0;
}

unsigned char *BlueFin::GlMeSrdCtrlSm::ArmSYNCIN(unsigned char *this, int a2, int a3)
{
  if (!this[5576])
  {
    if (!this[219])
    {
      DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 286, "ArmSYNCIN", (char)"0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_ctrl_sm.cpp", 286, "0");
    }
    char v3 = (BlueFin::GlQueue *)(this + 2600);
    if (a3) {
      char v4 = 2;
    }
    else {
      char v4 = 0;
    }
    if (a2) {
      int v5 = 40;
    }
    else {
      int v5 = 41;
    }
    return (unsigned char *)BlueFin::GlQueue::putLIFO(v3, v5, v4);
  }
  return this;
}

uint64_t BlueFin::GlDbgProxyGlReqOnSyncInLatched(uint64_t a1, unsigned int a2, double a3)
{
  int v5 = (BlueFin::GlDbgRequest *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  uint64_t v6 = (BlueFin::GlDbgCodec *)*((void *)v5 + 1);

  return BlueFin::GlDbgProxy::HalGlReqOnSyncInLatched(v6, v5, a2, a3);
}

uint64_t BlueFin::GlDbgProxyGlReqOnSyncInStatus(uint64_t a1, unsigned int a2)
{
  char v3 = (BlueFin::GlDbgRequest *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  char v4 = (BlueFin::GlDbgCodec *)*((void *)v3 + 1);

  return BlueFin::GlDbgProxy::HalGlReqOnSyncInStatus(v4, v3, a2);
}

uint64_t BlueFin::GlDbgProxy::HalGlReqOnSyncInLatched(BlueFin::GlDbgCodec *a1, BlueFin::GlDbgRequest *this, unsigned int a3, double a4)
{
  unsigned int v12 = a3;
  double v11 = a4;
  uint64_t result = BlueFin::GlDbgRequest::Id(this, 0);
  int v10 = result;
  if (!*((void *)a1 + 101))
  {
    BlueFin::GlDbgCodec::WriteStart(a1, 546);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 120))(a1)) {
      BlueFin::GlDbgCodec::Write(a1, (unsigned int *)&v10);
    }
    BlueFin::GlDbgCodec::Write(a1, &v12);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 120))(a1)) {
      BlueFin::GlDbgCodec::Write(a1, &v11);
    }
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)a1 + 32))(a1, 1);
    uint64_t v8 = (void (*)(void, void, double))*((void *)this + 5);
    if (v8) {
      v8(this, v12, a4);
    }
    BlueFin::GlDbgCodec::WriteFinal(a1, 546);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 120))(a1)) {
      BlueFin::GlDbgCodec::Write(a1, (unsigned int *)&v10);
    }
    int v9 = *(uint64_t (**)(void, void))(*(void *)a1 + 32);
    return v9(a1, 1);
  }
  return result;
}

uint64_t BlueFin::GlDbgProxy::HalGlReqOnSyncInStatus(BlueFin::GlDbgCodec *a1, BlueFin::GlDbgRequest *this, unsigned int a3)
{
  unsigned int v9 = a3;
  uint64_t result = BlueFin::GlDbgRequest::Id(this, 0);
  int v8 = result;
  if (!*((void *)a1 + 101))
  {
    BlueFin::GlDbgCodec::WriteStart(a1, 548);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 120))(a1)) {
      BlueFin::GlDbgCodec::Write(a1, (unsigned int *)&v8);
    }
    BlueFin::GlDbgCodec::Write(a1, &v9);
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)a1 + 32))(a1, 1);
    uint64_t v6 = (void (*)(BlueFin::GlDbgRequest *, void))*((void *)this + 12);
    if (v6) {
      v6(this, v9);
    }
    BlueFin::GlDbgCodec::WriteFinal(a1, 548);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 120))(a1)) {
      BlueFin::GlDbgCodec::Write(a1, (unsigned int *)&v8);
    }
    uint64_t v7 = *(uint64_t (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)a1 + 32);
    return v7(a1, 1);
  }
  return result;
}

void FireCallback::GlReqOnSyncInLatched(double a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  if (FireCallback::pInstance)
  {
    uint64_t v10 = *(void *)(FireCallback::pInstance + 856);
    if (v10)
    {
      int v13 = a3;
      double v12 = a1;
      (*(void (**)(uint64_t, int *, double *))(*(void *)v10 + 48))(v10, &v13, &v12);
      return;
    }
    double v11 = "fcb,fReqOnSyncInLatchedCb,nullptr";
  }
  else
  {
    double v11 = "fcb,GlReqOnSyncInLatched,nullptr";
  }

  FireDeviceLog::DeviceLogBase(2, v11, a4, a5, a6, a7, a8, a9, a10);
}

void std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_8,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_8>,void ()(BlueFin::GL_SYNCIN_STATUS,double)>::operator()(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = *a2;
  uint64_t v9 = *(void *)(a1 + 8);
  FireDeviceLog::DeviceLogBase(6, "#tt,syncInLatch,status,%d,time,%.3f", a3, a4, a5, a6, a7, a8, *a2);
  if (v8 == 1)
  {
    uint64_t v16 = *(void *)(*(void *)(v9 + 40) + 1296);
    FireDeviceLog::DeviceLogBase(6, "#tt,latch,status,%d", v10, v11, v12, v13, v14, v15, 1);
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)v16 + 376))(v16, v17, 2);
  }
}

uint64_t BlueFin::GlDbgEngine::SetAsstPreciseTime(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = a2;
  unsigned int v10 = a3;
  int v5 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (a2)
  {
    BlueFin::GlDbgCodec::WriteStart(v5, 1557);
    uint64_t v6 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6))
    {
      *((_DWORD *)v6 + 143) = 2;
      BlueFin::GlDbgCodec::Rvw(v6, v3);
    }
    BlueFin::GlDbgCodec::Write(*(BlueFin::GlDbgCodec **)(a1 + 8), &v10);
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
    uint64_t v3 = BlueFin::GlEngineImplStd::SetAsstPreciseTime(a1 + 368, v3, v10);
    BOOL v9 = v3;
    BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1557);
    uint64_t v7 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v7 + 120))(v7)) {
      BlueFin::GlDbgCodec::Write(v7, &v9);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  }
  else
  {
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t, const char *))(*(void *)v5 + 104))(v5, 1, "/Library/Caches/com.apple.xbs/Sources/FIREGPS7/proprietary/deliverables/gll_dev/gldebug/src/gldebug_engine.cpp:798");
  }
  return v3;
}

{
  uint64_t v3;
  BlueFin::GlDbgCodec *v5;
  BlueFin::GlDbgCodec *v6;
  BlueFin::GlDbgCodec *v7;
  BOOL v9;
  unsigned int v10;

  uint64_t v3 = a2;
  unsigned int v10 = a3;
  int v5 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (a2)
  {
    BlueFin::GlDbgCodec::WriteStart(v5, 1558);
    uint64_t v6 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6))
    {
      *((_DWORD *)v6 + 143) = 2;
      BlueFin::GlDbgCodec::Rvw(v6, v3);
    }
    BlueFin::GlDbgCodec::Write(*(BlueFin::GlDbgCodec **)(a1 + 8), &v10);
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
    uint64_t v3 = BlueFin::GlEngineImplStd::SetAsstPreciseTime(a1 + 368, v3, v10);
    BOOL v9 = v3;
    BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1558);
    uint64_t v7 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v7 + 120))(v7)) {
      BlueFin::GlDbgCodec::Write(v7, &v9);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  }
  else
  {
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t, const char *))(*(void *)v5 + 104))(v5, 1, "/Library/Caches/com.apple.xbs/Sources/FIREGPS7/proprietary/deliverables/gll_dev/gldebug/src/gldebug_engine.cpp:818");
  }
  return v3;
}

#error "2639C6768: call analysis failed (funcsize=74)"

uint64_t BlueFin::GlPosEng::SetAsstPreciseTime(uint64_t a1, unsigned __int16 *a2, uint64_t a3, double a4, double a5)
{
  *(unsigned char *)(a1 + 382024) = 1;
  double v20 = &off_270EBC600;
  uint64_t v21 = 0;
  LOWORD(a4) = a2[4];
  LOWORD(a5) = a2[5];
  *(double *)&unint64_t v8 = (double)*(unint64_t *)&a5 * 0.000001;
  double v9 = *(double *)&v8 + (double)*(unint64_t *)&a4 * 0.001;
  int v10 = *a2;
  LODWORD(v8) = *((_DWORD *)a2 + 1);
  double v11 = (v9 + (double)v8) * 0.001;
  double v12 = fmod(v11, 1.0);
  if (v12 < 0.0 || v12 >= 1.0)
  {
    DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
  }
  double v14 = v12 * 4294967300.0 + 0.5;
  unsigned int v15 = v14;
  if (v14 >= 4294967300.0) {
    unsigned int v15 = -1;
  }
  LODWORD(v14) = *((_DWORD *)a2 + 3);
  v17[0] = v15;
  v17[1] = v11 + 604800 * v10;
  int16x4_t v17[2] = 0;
  uint64_t v18 = 0x41EFF2445FE00000;
  double v19 = (double)*(unint64_t *)&v14;
  BlueFin::GlReqSm::SetSyncinPulseTime(a1 + 126144, (uint64_t)v17, a3);
  return 1;
}

{
  BOOL v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  char v16;
  char v17;
  unint64_t v18;
  double v19;
  unint64_t v20;
  void v22[4];
  uint64_t v23;
  int v24;
  uint64_t v25;
  double v26;
  void *v27;
  uint64_t v28;
  __int16 v29;
  __int16 v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;

  *(unsigned char *)(a1 + 382024) = 1;
  uint64_t v27 = &unk_270EC23C8;
  uint64_t v28 = 0;
  unint64_t v8 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs;
  if (!BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent) {
    unint64_t v8 = 0;
  }
  double v9 = v8 && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent == 0;
  if (v9) {
    int v10 = 431999;
  }
  else {
    int v10 = 432000;
  }
  double v11 = v10 - BlueFin::GlWeekTowTime::m_ucCurrentLs;
  uint64_t v29 = 1980;
  int v30 = v11 / 0x15180 + 1;
  uint64_t v31 = 1;
  uint64_t v32 = v11 / 0x15180 + 1;
  double v12 = v11 % 0x15180 / 0xE10;
  uint64_t v13 = (2185 * (v11 - 3600 * ((1193047 * (unint64_t)v11) >> 32))) >> 17;
  double v14 = v11 - 60 * ((71582789 * (unint64_t)v11) >> 32);
  unsigned int v15 = (v9 & 1) == 0;
  if (v9)
  {
    LOBYTE(v12) = 23;
    uint64_t v16 = 59;
  }
  else
  {
    uint64_t v16 = v13;
  }
  if (v15) {
    int v17 = v14;
  }
  else {
    int v17 = 60;
  }
  uint64_t v33 = v12;
  uint64_t v34 = v16;
  uint64_t v35 = v17;
  LOWORD(a4) = a2[5];
  LOWORD(a5) = a2[6];
  *(double *)&uint64_t v18 = (double)*(unint64_t *)&a5;
  double v19 = (double)*(unint64_t *)&a4 + *(double *)&v18 * 0.001;
  LOWORD(v18) = a2[7];
  BlueFin::GlUtcTime::GlUtcTime((BlueFin::GlUtcTime *)v22, *a2, *((unsigned __int8 *)a2 + 2), *((unsigned __int8 *)a2 + 4), *((unsigned __int8 *)a2 + 6), *((unsigned __int8 *)a2 + 8), v19 + (double)v18 * 0.000001);
  LODWORD(v2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *((_DWORD *)a2 + 4);
  uint64_t v23 = v22[1];
  uint64_t v24 = 2;
  uint64_t v25 = 0x41EFF2445FE00000;
  uint64_t v26 = (double)v20;
  BlueFin::GlReqSm::SetSyncinPulseTime(a1 + 126144, (uint64_t)&v23, a3);
  return 1;
}

uint64_t BlueFin::GlReqSm::SetSyncinPulseTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = a3;
  int v5 = *(_DWORD *)(*(void *)(a1 + 6280) + 2576);
  uint64_t result = BlueFin::GlPeReqBag::SetSyncinPulseTime(a1 + 10880, a2, a3);
  if (*(_DWORD *)(*(void *)(a1 + 6280) + 2576)) {
    BOOL v7 = v3 == 1;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7 && v5 == 0)
  {
    double v9 = *(BlueFin::GlPosEng **)(a1 + 6264);
    return BlueFin::GlPosEng::OnInitialTime(v9);
  }
  return result;
}

uint64_t BlueFin::GlPeReqBag::SetSyncinPulseTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  unint64_t v8 = (unsigned char *)(a1 + 3233);
  char v9 = *(unsigned char *)(a1 + 3233);
  *(unsigned char *)(a1 + 3233) = 0;
  do
  {
    uint64_t result = *(void *)(a1 + v6);
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)result + 200))(result, a2, a3);
    }
    v6 += 8;
  }
  while (v6 != 576);
  *unint64_t v8 = v9;
  return result;
}

void sub_2639C6AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned char *a11, char a12)
{
  *a11 = a12;
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlPeRqHdlrSyncin::SetSyncinPulseTime(uint64_t result, uint64_t a2, int a3)
{
  if (!*(unsigned char *)(result + 20))
  {
    uint64_t v3 = result;
    if (!*(unsigned char *)(result + 19))
    {
      unsigned int v6 = *(_DWORD *)(*(void *)(*(void *)(result + 56) + 8) + 2568);
      double v7 = (double)(int)v6;
      if (v6 <= 0xFF9222FE) {
        double v7 = (double)v6;
      }
      unint64_t v8 = "GL_UPLINK_REPORT_CURRENT";
      if (!a3) {
        unint64_t v8 = "GL_UPLINK";
      }
      if (a3 == 1) {
        unint64_t v8 = "GL_DOWNLINK";
      }
      GlCustomLog(14, "SyncinPulseTime(Lms: %0.1f, Prec: %.1f, %s)\n", v7, *(double *)(a2 + 24), v8);
      if (a3)
      {
        if (a3 == 2)
        {
          *(unsigned char *)(v3 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 1;
          return BlueFin::GlPeRqHdlrSyncin::ProcessSyncInEvent(v3);
        }
      }
      else
      {
        *(unsigned char *)(v3 + 22) = 1;
      }
      *(_DWORD *)(v3 + 112) |= 4u;
      int v9 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(v3 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v9;
      if (v9 == 2)
      {
        int v17 = (void (**)(BlueFin::GlGpsTime *__hidden))&unk_270EC23C8;
        uint64_t v18 = 0;
        BOOL v10 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs;
        if (!BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent) {
          BOOL v10 = 0;
        }
        BOOL v11 = BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent == 0;
        BOOL v12 = v10 && v11;
        if (v10 && v11) {
          int v13 = 431999;
        }
        else {
          int v13 = 432000;
        }
        unsigned int v14 = v13 - BlueFin::GlWeekTowTime::m_ucCurrentLs;
        __int16 v19 = 1980;
        __int16 v20 = v14 / 0x15180 + 1;
        char v21 = 1;
        char v22 = v14 / 0x15180 + 1;
        LOBYTE(v13) = 60;
        if (v12)
        {
          LOBYTE(v15) = 59;
          LOBYTE(v16) = 23;
        }
        else
        {
          unsigned int v16 = v14 % 0x15180 / 0xE10;
          unsigned int v15 = (2185 * (v14 - 3600 * ((1193047 * (unint64_t)v14) >> 32))) >> 17;
          int v13 = v14 - 60 * ((71582789 * (unint64_t)v14) >> 32);
        }
        char v23 = v16;
        char v24 = v15;
        char v25 = v13;
        BlueFin::GlPeGnssTime::GetUtc((BlueFin::GlPeGnssTime *)a2, (BlueFin::GlUtcTime *)&v17);
      }
      else if (v9 == 1)
      {
        int v17 = &off_270EBF4E8;
        uint64_t v18 = 0;
        BlueFin::GlPeGnssTime::GetGlns((BlueFin::GlPeGnssTime *)a2, (BlueFin::GlGlnsTime *)&v17);
      }
      else
      {
        if (v9)
        {
          DeviceFaultNotify("glpe_reqhdlr_syncin.cpp", 153, "SetSyncinPulseTime", (char)"0");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_reqhdlr_syncin.cpp", 153, "0");
        }
        int v17 = &off_270EBC600;
        uint64_t v18 = 0;
        BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)a2, (BlueFin::GlGpsTime *)&v17);
      }
      *(void *)(v3 + 84) = v18;
      *(void *)(v3 + 96) = *(void *)(a2 + 24);
      if (a3 == 1) {
        *(_DWORD *)(v3 + 112) |= 8u;
      }
      return BlueFin::GlPeRqHdlrSyncin::ProcessSyncInEvent(v3);
    }
  }
  return result;
}

void FireCallback::GlReqOnSyncInStatus(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (FireCallback::pInstance)
  {
    uint64_t v9 = *(void *)(FireCallback::pInstance + 824);
    if (v9)
    {
      int v11 = a2;
      (*(void (**)(uint64_t, int *))(*(void *)v9 + 48))(v9, &v11);
      return;
    }
    BOOL v10 = "fcb,fReqOnSyncInStatusCb,nullptr";
  }
  else
  {
    BOOL v10 = "fcb,GlReqOnSyncInStatus,nullptr";
  }

  FireDeviceLog::DeviceLogBase(2, v10, a3, a4, a5, a6, a7, a8, a9);
}

void std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_7,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_7>,void ()(BlueFin::GL_SYNCIN_STATUS)>::operator()(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = *a2;
  FireDeviceLog::DeviceLogBase(6, "#tt,syncInArm,status,%d", a3, a4, a5, a6, a7, a8, *a2);
  if (!v8)
  {
    if (!FireResourceMgr::fInstance) {
      operator new();
    }
    (*(void (**)(void *__return_ptr))(**(void **)FireResourceMgr::fInstance + 144))(v15);
    FireDeviceLog::DeviceLogBase(3, "#tt,pulse_sent,status,%d", v9, v10, v11, v12, v13, v14, 0);
  }
}

void FireCallback::GlReqOnSyncinReportCurrentTime(double a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  if (FireCallback::pInstance)
  {
    uint64_t v10 = *(void *)(FireCallback::pInstance + 920);
    if (v10)
    {
      int v17 = a3;
      uint64_t v16 = a4;
      int v15 = a5;
      double v14 = a1;
      char v13 = a6;
      char v12 = a7;
      (*(void (**)(uint64_t, int *, uint64_t *, int *, double *, char *, char *))(*(void *)v10 + 48))(v10, &v17, &v16, &v15, &v14, &v13, &v12);
      return;
    }
    uint64_t v11 = "fcb,fReqOnSyncinReportCurrentTimeCb,nullptr";
  }
  else
  {
    uint64_t v11 = "fcb,GlReqOnSyncinReportCurrentTime,nullptr";
  }

  FireDeviceLog::DeviceLogBase(2, v11, a4, a5, a6, a7, a8, a9, a10);
}

void std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_9,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_9>,void ()(BlueFin::GL_SYNCIN_STATUS,BlueFin::GL_TIME const*,BlueFin::GL_TIME_VALIDITY,double,BOOL,signed char)>::operator()(uint64_t a1, int *a2, unsigned int **a3, int *a4, double *a5, char *a6, char *a7, uint64_t a8, char a9)
{
  uint64_t v9 = *a3;
  if (*a3)
  {
    int v10 = *a2;
    int v11 = *a4;
    double v12 = *a5;
    char v13 = *a6;
    int v14 = *a7;
    uint64_t v15 = *(void *)(a1 + 8);
    FireDeviceLog::DeviceLogBase(6, "#tt,report,status,%d,valid,%d,tow,%d,lms,%6.1f", (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, *a2);
    if (*(void *)(v15 + 32))
    {
      char v16 = 0;
      int v17 = 0;
      switch(v11)
      {
        case 0:
        case 1:
          break;
        case 2:
        case 3:
        case 4:
          char v16 = 0;
          int v17 = v11;
          break;
        case 5:
        case 6:
          int v17 = 5;
          char v16 = 1;
          break;
        default:
          FireDeviceLog::DeviceLogBase(2, "#tt,failed to convert,status,%d,valid,%d", (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, v10);
          char v16 = 0;
          int v17 = 0;
          break;
      }
      FireDeviceLog::DeviceLogBase(6, "#tt,Gltime,status,%d,valid,%d,week,%u,tow,%u,%u,%u,prec,%u", (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, v10);
      uint64_t v19 = 604800000000000 * *(unsigned __int16 *)v9
          + 1000000 * v9[1]
          + 1000 * *((unsigned __int16 *)v9 + 4)
          + *((unsigned __int16 *)v9 + 5);
      float v20 = (float)v9[3] * 1000.0;
      v22[0] = v16;
      uint64_t v23 = v19;
      float v24 = v20;
      char v25 = v13;
      int v26 = v14;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      unint64_t v27 = (unint64_t)(v12 * 1000000.0 + 0.5);
      int v30 = v17;
      uint64_t v32 = 0;
      uint64_t v31 = 0;
      int v33 = 0;
      uint64_t v21 = *(void *)(v15 + 32);
      int v34 = 1;
      if (!v21) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, int *, char *))(*(void *)v21 + 48))(v21, &v34, v22);
      return;
    }
    uint64_t v18 = "#tt,handleTimeTransferData,nullptr";
  }
  else
  {
    uint64_t v18 = "SyncinReport,pGlTime,nullptr";
  }

  FireDeviceLog::DeviceLogBase(2, v18, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, a9);
}

uint64_t BlueFin::GlReqSm::SetAsicParams(BlueFin::GlReqSm *this)
{
  int v1 = this;
  uint64_t v83 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 39);
  uint64_t v3 = *((void *)this + 784);
  uint64_t v4 = *(unsigned int *)(v3 + 104);
  double v5 = *(double *)(v3 + 112) * 1000000000.0 + 0.5;
  double v6 = fmod(v5, 4294967300.0);
  if (v5 <= 4294967300.0) {
    double v6 = v5;
  }
  if (v6 < -4294967300.0) {
    double v6 = -fmod(-v6, 4294967300.0);
  }
  if (v6 < 0.0) {
    unsigned int v7 = --v6;
  }
  else {
    LOWORD(v7) = v6;
  }
  double v8 = *(double *)(v3 + 128) * 1000000000.0 + 0.5;
  double v9 = fmod(v8, 4294967300.0);
  if (v8 <= 4294967300.0) {
    double v9 = v8;
  }
  if (v9 < -4294967300.0) {
    double v9 = -fmod(-v9, 4294967300.0);
  }
  if (v9 < 0.0) {
    unsigned int v10 = --v9;
  }
  else {
    LOWORD(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v9;
  }
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)v2 + 56))(v2, v4, (unsigned __int16)v7, (unsigned __int16)v10);
  uint64_t v11 = *((void *)v1 + 784);
  if (*(unsigned char *)(v11 + 26056))
  {
    unsigned int v12 = *(_DWORD *)(v11 + 48);
    BOOL v13 = v12 > 8;
    unsigned int v14 = (0x1F4u >> v12) & 1;
    if (v13) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = v14;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  (*(void (**)(void, uint64_t))(**((void **)v1 + 39) + 520))(*((void *)v1 + 39), v15);
  uint64_t v16 = *((void *)v1 + 784);
  if (*(unsigned char *)(v16 + 26057))
  {
    unsigned int v17 = *(_DWORD *)(v16 + 48);
    BOOL v13 = v17 > 8;
    unsigned int v18 = (0x1F4u >> v17) & 1;
    if (v13) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = v18;
    }
  }
  else
  {
    uint64_t v19 = 0;
  }
  (*(void (**)(void, uint64_t))(**((void **)v1 + 39) + 528))(*((void *)v1 + 39), v19);
  (*(void (**)(void))(**((void **)v1 + 39) + 536))();
  (*(void (**)(void, void))(**((void **)v1 + 39) + 72))(*((void *)v1 + 39), *(unsigned int *)(*((void *)v1 + 784) + 48));
  (*(void (**)(void, void))(**((void **)v1 + 39) + 80))(*((void *)v1 + 39), *(unsigned __int8 *)(*((void *)v1 + 784) + 92));
  (*(void (**)(void, void))(**((void **)v1 + 39) + 64))(*((void *)v1 + 39), *(unsigned int *)(*((void *)v1 + 784) + 88));
  (*(void (**)(void, void))(**((void **)v1 + 39) + 88))(*((void *)v1 + 39), *(unsigned __int8 *)(*((void *)v1 + 784) + 26290));
  v71[4] = 1000;
  v71[3] = 1000;
  v71[2] = 1000;
  v71[1] = 1000;
  (*(void (**)(void))(**((void **)v1 + 784) + 1016))();
  (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**((void **)v1 + 39) + 136))(*((void *)v1 + 39), 1000, 1000, 1000, 1000);
  (*(void (**)(void, void))(**((void **)v1 + 39) + 24))(*((void *)v1 + 39), *(unsigned int *)(*((void *)v1 + 784) + 96));
  (*(void (**)(void, void))(**((void **)v1 + 39) + 32))(*((void *)v1 + 39), *(unsigned __int8 *)(*((void *)v1 + 784) + 283));
  (*(void (**)(void, void, void, void))(**((void **)v1 + 39) + 160))(*((void *)v1 + 39), *(unsigned int *)(*((void *)v1 + 784) + 1312), *(unsigned __int8 *)(*((void *)v1 + 784) + 1316), *(unsigned __int8 *)(*((void *)v1 + 784) + 1317));
  uint64_t v20 = *((void *)v1 + 784);
  if (*(unsigned char *)(v20 + 136))
  {
    uint64_t v21 = *((void *)v1 + 39);
    uint64_t v22 = *(unsigned int *)(v20 + 120);
    double v23 = *(double *)(v20 + 128) * 1000000000.0 + 0.5;
    double v24 = fmod(v23, 4294967300.0);
    if (v23 <= 4294967300.0) {
      double v24 = v23;
    }
    if (v24 < -4294967300.0) {
      double v24 = -fmod(-v24, 4294967300.0);
    }
    if (v24 < 0.0) {
      unsigned int v25 = --v24;
    }
    else {
      LOWORD(v25) = v24;
    }
    (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)v21 + 48))(v21, v22, (unsigned __int16)v25, *(unsigned __int16 *)(v20 + 138));
    uint64_t v20 = *((void *)v1 + 784);
  }
  uint64_t v70 = (char *)v1 + 54596;
  (*(void (**)(void, void))(**((void **)v1 + 39) + 376))(*((void *)v1 + 39), (**(_DWORD **)(v20 + 160) >> 6) & 1);
  (*(void (**)(void))(**((void **)v1 + 39) + 384))();
  (*(void (**)(void))(**((void **)v1 + 39) + 392))();
  BlueFin::GlPePwrStateMgr::EnablePedestrianLowPower((BlueFin::GlReqSm *)((char *)v1 + 33216), (**(_DWORD **)(*((void *)v1 + 784) + 160) >> 5) & 1);
  (*(void (**)(void))(**((void **)v1 + 39) + 416))();
  (*(void (**)(void))(**((void **)v1 + 39) + 440))();
  (*(void (**)(void))(**((void **)v1 + 39) + 448))();
  uint64_t CWRequest = BlueFin::GlPePendingBag::GetCWRequest((BlueFin::GlReqSm *)((char *)v1 + 6496));
  if (CWRequest)
  {
    __int16 v80 = 0;
    int v79 = 0;
    int v81 = 0;
    int v82 = 16776961;
    memset(__endptr, 0, sizeof(__endptr));
    long long v73 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    uint64_t v78 = 0;
    (*(void (**)(void))(*(void *)CWRequest + 456))();
    (*(void (**)(void, void))(**((void **)v1 + 39) + 592))(*((void *)v1 + 39), *(unsigned __int8 *)(*((void *)v1 + 784) + 26014));
    (*(void (**)(void))(**((void **)v1 + 39) + 600))();
    (*(void (**)(void, void))(**((void **)v1 + 39) + 608))(*((void *)v1 + 39), 0);
  }
  BreadcrumbDCMiuint64_t n = BlueFin::GlPePendingBag::GetBreadcrumbDCMin((BlueFin::GlReqSm *)((char *)v1 + 6496));
  if (BreadcrumbDCMin)
  {
    unsigned __int8 v28 = BreadcrumbDCMin;
    GlCustomLog(14, "Customer::SetConfigParameters with Min DC %u Max DC %u\n", BreadcrumbDCMin, 5);
    (*(void (**)(void, uint64_t, void, uint64_t))(**((void **)v1 + 39) + 144))(*((void *)v1 + 39), 1, v28, 5);
  }
  (*(void (**)(void, uint64_t))(**((void **)v1 + 39) + 104))(*((void *)v1 + 39), *((void *)v1 + 784) + 284);
  *uint64_t v70 = 0;
  uint64_t v29 = *((void *)v1 + 784);
  int v30 = (const char *)(v29 + 284);
  int64_t v31 = strlen((const char *)(v29 + 284));
  if (v31 >= 1)
  {
    uint64_t v32 = (uint64_t)v1 + 33504;
    int v33 = &v30[v31];
    uint64_t v69 = v1;
    do
    {
      if (!strncmp(v30, "meif_4771:1;", 0xDuLL))
      {
        *uint64_t v70 = 1;
      }
      else if (!strncmp(v30, "iqdump:", 7uLL))
      {
        __endptr[0] = 0;
        int v34 = strtol(v30 + 7, __endptr, 0);
        uint64_t v35 = __endptr[0];
        if (__endptr[0] != v30 + 7)
        {
          int v36 = v34;
          do
          {
            if (!memchr(",;", *v35, 3uLL)) {
              break;
            }
            if (v36 == -1)
            {
              v70[306] = 1;
            }
            else if (v36 == 123456)
            {
              memset(*(void **)v32, 255, 4 * *(unsigned __int8 *)(v32 + 8));
              int ULong = BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)v32, 0);
              BlueFin::GlSetBase::SetULong(v32, 0, ULong & 0xFFFFFFFE);
              unsigned int v38 = (unsigned __int16)(32 * (*(unsigned char *)(v32 + 8) & 0x3F) - 1);
              if (v38 >= 0xBE)
              {
                unsigned int v39 = 189;
                char v40 = -67;
                do
                {
                  __int16 v41 = v40 & 0x1F;
                  if ((v40 & 0x1F) != 0)
                  {
                    int v42 = BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)v32, (v39 >> 5));
                    BlueFin::GlSetBase::SetULong(v32, (v39 >> 5), v42 & ~(-1 << v41));
                    LOWORD(v39) = v39 - v41;
                  }
                  else
                  {
                    BlueFin::GlSetBase::SetULong(v32, (v39 >> 5), 0);
                  }
                  char v40 = v39 + 32;
                  unsigned int v39 = (unsigned __int16)(v39 + 32);
                }
                while (v39 < v38);
              }
            }
            else
            {
              *(_DWORD *)(*(void *)v32 + 4 * (v36 >> 5)) |= 1 << v36;
            }
            uint64_t v43 = v35 + 1;
            __endptr[0] = 0;
            int v36 = strtol(v35 + 1, __endptr, 0);
            uint64_t v35 = __endptr[0];
          }
          while (__endptr[0] != v43);
        }
        if (BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)v32))
        {
          __endptr[0] = (char *)&__endptr[1] + 4;
          LOBYTE(__endptr[1]) = 3;
          *(char **)((char *)&__endptr[1] + 4) = 0;
          HIDWORD(__endptr[2]) = 0;
          (*(void (**)(void, uint64_t, char **))(**((void **)v69 + 39) + 784))(*((void *)v69 + 39), v32, __endptr);
        }
      }
      do
      {
        BOOL v44 = v30 == v33;
        int v46 = *(unsigned __int8 *)v30++;
        int v45 = v46;
      }
      while (!v44 && v45 != 59);
    }
    while (v30 < v33);
    int v1 = v69;
    uint64_t v29 = *((void *)v69 + 784);
  }
  (*(void (**)(void, void))(**((void **)v1 + 39) + 168))(*((void *)v1 + 39), *(unsigned __int8 *)(v29 + 1318));
  uint64_t v47 = *((void *)v1 + 784);
  uint64_t v48 = (_DWORD *)(v47 + 25996);
  int v49 = *(_DWORD *)(v47 + 26020);
  if (v49 == 4)
  {
    uint64_t v50 = &unk_263BBD740;
LABEL_71:
    memset_pattern16(__endptr, v50, 0x1CuLL);
    uint64_t v53 = *(void (**)(void))(**((void **)v1 + 39) + 120);
    goto LABEL_93;
  }
  int v51 = **(_DWORD **)(v47 + 160);
  if ((v51 & 0x80) != 0)
  {
    uint64_t v50 = &unk_263BBD730;
    goto LABEL_71;
  }
  memset(__endptr, 0, 28);
  if ((v51 & 0x40) != 0)
  {
LABEL_72:
    int v52 = 2;
LABEL_73:
    LODWORD(__endptr[0]) = v52;
  }
  else
  {
    switch(v49)
    {
      case 1:
        int v52 = 1;
        goto LABEL_73;
      case 2:
        goto LABEL_72;
      case 3:
        int v52 = 3;
        goto LABEL_73;
      case 5:
        int v52 = 6;
        goto LABEL_73;
      case 6:
        int v52 = 7;
        goto LABEL_73;
      default:
        break;
    }
  }
  int v54 = v48[7] - 1;
  if v54 <= 5 && ((0x37u >> v54)) {
    HIDWORD(__endptr[0]) = dword_263BBD718[v54];
  }
  int v55 = v48[8] - 1;
  if v55 <= 5 && ((0x37u >> v55)) {
    LODWORD(__endptr[1]) = dword_263BBD718[v55];
  }
  int v56 = v48[9] - 1;
  if v56 <= 5 && ((0x37u >> v56)) {
    HIDWORD(__endptr[1]) = dword_263BBD718[v56];
  }
  int v57 = v48[10] - 1;
  if v57 <= 5 && ((0x37u >> v57)) {
    LODWORD(__endptr[2]) = dword_263BBD718[v57];
  }
  int v58 = v48[11] - 1;
  if v58 <= 5 && ((0x37u >> v58)) {
    HIDWORD(__endptr[2]) = dword_263BBD718[v58];
  }
  int v59 = v48[12] - 1;
  if v59 <= 5 && ((0x37u >> v59)) {
    LODWORD(__endptr[3]) = dword_263BBD718[v59];
  }
  uint64_t v53 = *(void (**)(void))(**((void **)v1 + 39) + 120);
LABEL_93:
  v53();
  uint64_t v60 = *((void *)v1 + 784);
  if (*(int *)(v60 + 88) < 39)
  {
    (*(void (**)(void, void, void))(**((void **)v1 + 39) + 424))(*((void *)v1 + 39), *(unsigned __int8 *)(v60 + 25957), *(unsigned int *)(v60 + 25960));
    uint64_t v64 = *((void *)v1 + 784);
    *((_DWORD *)v70 + 7BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *(_DWORD *)(v64 + 25960);
    goto LABEL_106;
  }
  LOBYTE(__endptr[0]) = 0;
  v71[0] = 0;
  int v61 = (*(uint64_t (**)(void, char **, char *, _WORD *))(**((void **)v1 + 39) + 432))(*((void *)v1 + 39), __endptr, (char *)v71 + 1, v71);
  int v62 = *(_DWORD *)(*((void *)v1 + 784) + 25960);
  if (!v61) {
    goto LABEL_104;
  }
  if (!*(unsigned char *)(*((void *)v1 + 784) + 25957))
  {
    if (LOBYTE(__endptr[0]) == 5 || LOBYTE(__endptr[0]) == 3)
    {
      uint64_t v63 = *(void (**)(void))(**((void **)v1 + 39) + 424);
      goto LABEL_103;
    }
LABEL_104:
    (*(void (**)(void, BOOL, void))(**((void **)v1 + 39) + 424))(*((void *)v1 + 39), *(unsigned char *)(*((void *)v1 + 784) + 25957) != 0, *(unsigned int *)(*((void *)v1 + 784) + 25960));
    goto LABEL_105;
  }
  if (LOBYTE(__endptr[0]) == 3 || LOBYTE(__endptr[0]) == 5) {
    goto LABEL_104;
  }
  uint64_t v63 = *(void (**)(void))(**((void **)v1 + 39) + 424);
LABEL_103:
  v63();
  *((_DWORD *)v70 + 7BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v62;
LABEL_105:
  uint64_t v64 = *((void *)v1 + 784);
LABEL_106:
  (*(void (**)(void, void))(**((void **)v1 + 39) + 640))(*((void *)v1 + 39), *(unsigned __int8 *)(v64 + 26048));
  (*(void (**)(void))(**((void **)v1 + 39) + 656))();
  uint64_t v65 = *((void *)v1 + 784);
  if ((*(unsigned char *)(*(void *)(v65 + 160) + 2) & 2) != 0)
  {
    (*(void (**)(void, uint64_t))(**((void **)v1 + 39) + 664))(*((void *)v1 + 39), v65 + 26160);
    uint64_t v65 = *((void *)v1 + 784);
  }
  if (*(unsigned char *)(v65 + 917))
  {
    (*(void (**)(void, float))(**((void **)v1 + 39) + 624))(*((void *)v1 + 39), *(float *)(v65 + 984));
    uint64_t v65 = *((void *)v1 + 784);
  }
  if (*(unsigned char *)(v65 + 918))
  {
    (*(void (**)(void, float))(**((void **)v1 + 39) + 632))(*((void *)v1 + 39), *(float *)(v65 + 988));
    uint64_t v65 = *((void *)v1 + 784);
  }
  if (*(unsigned char *)(v65 + 26172))
  {
    (*(void (**)(void, uint64_t))(**((void **)v1 + 39) + 408))(*((void *)v1 + 39), 1);
    uint64_t v65 = *((void *)v1 + 784);
  }
  if (*(unsigned char *)(v65 + 26211))
  {
    (*(void (**)(void, uint64_t))(**((void **)v1 + 39) + 688))(*((void *)v1 + 39), 1);
    uint64_t v65 = *((void *)v1 + 784);
  }
  if (*(unsigned char *)(v65 + 26212))
  {
    (*(void (**)(void, uint64_t))(**((void **)v1 + 39) + 696))(*((void *)v1 + 39), 1);
    uint64_t v65 = *((void *)v1 + 784);
  }
  if ((*(_DWORD *)(v65 + 88) - 37) <= 1 && *(_WORD *)(v65 + 26252))
  {
    (*(void (**)(void))(**((void **)v1 + 39) + 704))(*((void *)v1 + 39));
    uint64_t v65 = *((void *)v1 + 784);
  }
  if (*(unsigned char *)(v65 + 26284))
  {
    (*(void (**)(void, uint64_t))(**((void **)v1 + 39) + 712))(*((void *)v1 + 39), 1);
    uint64_t v65 = *((void *)v1 + 784);
  }
  (*(void (**)(void, void))(**((void **)v1 + 39) + 720))(*((void *)v1 + 39), *(unsigned __int8 *)(v65 + 26288));
  uint64_t v66 = *((void *)v1 + 784);
  if (*(unsigned char *)(v66 + 26296)) {
    *(unsigned char *)(*((void *)v1 + 785) + 4875) = 1;
  }
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**((void **)v1 + 39) + 744))(*((void *)v1 + 39), v66 + 26316);
  uint64_t v68 = *((void *)v1 + 784);
  if (*(unsigned char *)(v68 + 26332) && *(int *)(v68 + 88) >= 39)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(**((void **)v1 + 39) + 768))(*((void *)v1 + 39), 1);
    uint64_t v68 = *((void *)v1 + 784);
  }
  if (*(unsigned char *)(v68 + 26333)) {
    return (*(uint64_t (**)(void, uint64_t))(**((void **)v1 + 39) + 776))(*((void *)v1 + 39), 1);
  }
  return result;
}

uint64_t BlueFin::GlMeSrdAsicConfig::UpdatePerformanceModes(uint64_t this)
{
  if (*(unsigned char *)(this + 2196))
  {
    int v1 = 0;
    int v2 = 4;
    int v3 = 4;
LABEL_3:
    *(_DWORD *)(this + 2184) = v2;
    *(_DWORD *)(this + 2188) = v3;
    *(_DWORD *)(this + 2192) = v1;
    return this;
  }
  int v4 = *(_DWORD *)(this + 1412) - 1;
  if v4 <= 7 && ((0xE3u >> v4))
  {
    int v2 = dword_263BAC450[v4];
    int v3 = dword_263BAC470[v4];
    int v1 = v3;
    goto LABEL_3;
  }
  return this;
}

uint64_t BlueFin::GlDbgMeIf::GetRadioPerfMode(BlueFin::GlDbgMeIf *this, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  return (*(uint64_t (**)(void, unsigned __int8 *, unsigned __int8 *, unsigned __int8 *))(**((void **)this + 2) + 432))(*((void *)this + 2), a2, a3, a4);
}

uint64_t BlueFin::GlDineCtrl::GetRadioPerfMode(BlueFin::GlDineCtrl *this, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  *a2 = *((_DWORD *)this + 7964);
  *a3 = *((_DWORD *)this + 7965);
  *a4 = *((_DWORD *)this + 7966);
  return *((unsigned __int8 *)this + 31869);
}

uint64_t BlueFin::GlDbgMeIf::SetRfType(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 64))();
}

uint64_t BlueFin::GlDbgMeIf::SetRfMode(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))();
}

uint64_t BlueFin::GlDbgMeIf::SetPadNum(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 32))();
}

uint64_t BlueFin::GlDbgMeIf::EnableMPF(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 392))();
}

uint64_t BlueFin::GlDbgMeIf::SetRfAtt(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))();
}

uint64_t BlueFin::GlDbgMeIf::SetNotchFiltersConfiguration(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 416))();
}

uint64_t BlueFin::GlDbgMeIf::SetUartFlowControlSettings(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 160))();
}

uint64_t BlueFin::GlDbgMeIf::EnableInternalBlanking(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 376))();
}

uint64_t BlueFin::GlDbgMeIf::EnableMonitorBlanking(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 384))();
}

uint64_t BlueFin::GlDbgMeIf::SetExtSuspendEnabled(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 720))();
}

uint64_t BlueFin::GlDbgMeIf::SetThermalRiskState(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 536))();
}

uint64_t BlueFin::GlDbgMeIf::SetConfigParameters(BlueFin::GlDbgMeIf *this, const char *a2)
{
  return (*(uint64_t (**)(void, const char *))(**((void **)this + 2) + 104))(*((void *)this + 2), a2);
}

uint64_t BlueFin::GlDbgMeIf::SetGeofenceSupport(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 168))();
}

uint64_t BlueFin::GlDbgMeIf::SetRefClockParams(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 56))();
}

uint64_t BlueFin::GlDbgMeIf::SetL5DeltaExtBias(BlueFin::GlDbgMeIf *this, float a2)
{
  return (*(uint64_t (**)(float))(**((void **)this + 2) + 632))(a2);
}

uint64_t BlueFin::GlDbgMeIf::SetBlankingConfig(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120))(*(void *)(a1 + 16));
}

uint64_t BlueFin::GlDbgMeIf::SetAGCFreezeState(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 440))();
}

uint64_t BlueFin::GlDbgMeIf::SetAGCForceValue(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 448))();
}

uint64_t BlueFin::GlDbgMeIf::SetL5MsbEnabled(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 528))();
}

uint64_t BlueFin::GlDbgMeIf::SetL5MsaEnabled(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 520))();
}

uint64_t BlueFin::GlDbgMeIf::SetPMMSettings(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 136))();
}

uint64_t BlueFin::GlDbgMeIf::EnableSearch3G(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 656))();
}

uint64_t BlueFin::GlDbgMeIf::SetSwTrackAgc(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 640))();
}

uint64_t BlueFin::GlDbgMeIf::SetAdcCapture(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 744))();
}

uint64_t BlueFin::GlDbgMeIf::SetLTEFilter(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 424))();
}

uint64_t BlueFin::GlDbgMeIf::SetEnableVLP(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 88))();
}

uint64_t BlueFin::GlDbgMeIf::SetLnaMask(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 80))();
}

float BlueFin::GlMeMafSettingsListener::SetRefClockParams(BlueFin::GlMeMafSettingsListener *this, unsigned int a2, unsigned int a3)
{
  int v3 = (float *)*((void *)this + 1);
  float v4 = (float)((float)a2 + 0.5) * 0.000000001;
  v3[65] = v4;
  v3[67] = v4;
  v3[63] = v4;
  float result = (float)((float)a3 + 0.5) * 0.000000001;
  v3[66] = result;
  return result;
}

uint64_t BlueFin::GlMeSrdAsicConfig::SetNotchFiltersConfiguration(uint64_t result, void *a2, unsigned int a3)
{
  if (a3 > 0x18)
  {
    unsigned int v10 = "ucNumNotches <= NUM_NOTCH_FILTERS";
    DeviceFaultNotify("glmesrd_asic_config.cpp", 1889, "SetNotchFiltersConfiguration", (char)"ucNumNotches <= NUM_NOTCH_FILTERS");
    int v11 = 1889;
LABEL_17:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_config.cpp", v11, v10);
  }
  if (a3)
  {
    unsigned int v3 = 0;
    for (uint64_t i = a3; i; --i)
    {
      if (*(unsigned char *)a2)
      {
        unsigned int v5 = v3 + 1;
        unsigned int v6 = *(_DWORD *)(result + 8);
        BOOL v7 = v6 > 5;
        int v8 = (1 << v6) & 0x2C;
        if (v7 || v8 == 0)
        {
          if (v5 >= 3)
          {
            unsigned int v10 = "ulNumFilters <= 2";
            DeviceFaultNotify("glmesrd_asic_config.cpp", 1899, "SetNotchFiltersConfiguration", (char)"ulNumFilters <= 2");
            int v11 = 1899;
            goto LABEL_17;
          }
        }
        else if (v5 >= 0x19)
        {
          unsigned int v10 = "ulNumFilters <= NUM_NOTCH_FILTERS";
          DeviceFaultNotify("glmesrd_asic_config.cpp", 1903, "SetNotchFiltersConfiguration", (char)"ulNumFilters <= NUM_NOTCH_FILTERS");
          int v11 = 1903;
          goto LABEL_17;
        }
        *(void *)(result + 8 * v3++ + 76) = *a2;
      }
      ++a2;
    }
  }
  return result;
}

uint64_t BlueFin::GlMeSrdAsicConfig::SetGeofenceSupport(uint64_t this, int a2)
{
  *(unsigned char *)(this + 528) = a2;
  if (a2)
  {
    if (!*(unsigned char *)(this + 529))
    {
      DeviceFaultNotify("glmesrd_asic_config.cpp", 1880, "SetGeofenceSupport", (char)"m_bIsGeofenceSupportedByChip");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_config.cpp", 1880, "m_bIsGeofenceSupportedByChip");
    }
  }
  return this;
}

unint64_t BlueFin::GlPePwrStateMgr::EnablePedestrianLowPower(BlueFin::GlPePwrStateMgr *this, int a2)
{
  *((unsigned char *)this + 209) = a2;
  float v4 = "False";
  if (a2) {
    float v4 = "True";
  }
  unint64_t result = GlCustomLog(14, "GlPePwrStateMgr::EnablePedestrianLowPower %s\n", v4);
  if (a2)
  {
    return BlueFin::GlPePwrStateMgr::EnableLowPower(this, 1u);
  }
  return result;
}

_WORD *BlueFin::GlSettingsImpl::GetPMMSettings(_WORD *this, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4, unsigned __int16 *a5)
{
  *a2 = this[649];
  *a3 = this[650];
  *a4 = this[651];
  *a5 = this[652];
  return this;
}

uint64_t BlueFin::GlPePendingBag::GetBreadcrumbDCMin(BlueFin::GlPePendingBag *this)
{
  uint64_t v1 = *((unsigned __int16 *)this + 1884);
  if (v1 > 0x47)
  {
    DeviceFaultNotify("glpe_pendingbag.cpp", 522, "GetBreadcrumbDCMin", (char)"m_sReqNum < _DIM(m_aptReqList)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_pendingbag.cpp", 522, "m_sReqNum < _DIM(m_aptReqList)");
  }
  if (!*((_WORD *)this + 1884)) {
    return 0;
  }
  uint64_t result = 0;
  float v4 = (uint64_t *)((char *)this + 3776);
  do
  {
    uint64_t v5 = *v4;
    if (*v4 && *(_DWORD *)(v5 + 16) == 13)
    {
      int v6 = *(_DWORD *)(v5 + 172);
      if ((v6 & 0x20000) != 0)
      {
        uint64_t result = 3;
      }
      else if ((v6 & 0x40000) != 0)
      {
        uint64_t result = 4;
      }
      else if ((v6 & 0x80000) != 0)
      {
        uint64_t result = 5;
      }
      else
      {
        uint64_t result = result;
      }
    }
    ++v4;
    --v1;
  }
  while (v1);
  return result;
}

_DWORD *BlueFin::GlPePendingBag::GetCWRequest(BlueFin::GlPePendingBag *this)
{
  unsigned int v1 = *((unsigned __int16 *)this + 1884);
  if (v1 > 0x47)
  {
    DeviceFaultNotify("glpe_pendingbag.cpp", 449, "GetCWRequest", (char)"m_sReqNum < _DIM(m_aptReqList)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_pendingbag.cpp", 449, "m_sReqNum < _DIM(m_aptReqList)");
  }
  if (*((_WORD *)this + 1884))
  {
    uint64_t v3 = 0;
    float v4 = (char *)this + 3776;
    do
    {
      uint64_t v5 = *(_DWORD **)&v4[8 * v3];
      if (v5[4] == 8)
      {
        if (!(*(unsigned int (**)(void))(*(void *)v5 + 360))(*(void *)&v4[8 * v3])) {
          return v5;
        }
        LOWORD(vBlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *((_WORD *)this + 1884);
      }
      ++v3;
    }
    while (v3 < (__int16)v1);
  }
  return 0;
}

unint64_t BlueFin::GlMeSrdCtrlSm::BlankingConfigUpdated(BlueFin::GlMeSrdCtrlSm *this)
{
  __int16 v4 = 37;
  uint64_t v2 = *((void *)this + 4);
  unint64_t result = *((void *)this + 1);
  *((void *)this + 4) = result;
  do
  {
    unint64_t v5 = 0;
    if (BlueFin::patch_dispatch(result, (uint64_t)this, (unsigned __int8 *)&v4, &v5)) {
      unint64_t result = v5;
    }
    else {
      unint64_t result = (*((uint64_t (**)(BlueFin::GlMeSrdCtrlSm *, __int16 *))this + 4))(this, &v4);
    }
    *((void *)this + 4) = result;
  }
  while (result);
  *((void *)this + 4) = v2;
  return result;
}

uint64_t BlueFin::GlDineCtrl::SetRfType(uint64_t a1, int a2)
{
  GlCustomLog(14, "GlDineCtrl::SetRfType(%d)\n", a2);
  BlueFin::GlMeSrdAsicConfig::SetRfType(a1 + 29672, a2);
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 240))(*(void *)(a1 + 8), a1 + 31912);
  *(_DWORD *)(a1 + 120064) = a2;
  return result;
}

BlueFin::GlDbgCodec *BlueFin::GlDbgPeIf::SetReceiverParameters(BlueFin::GlDbgPeIf *this, BlueFin::GlMeReceiverParametersIfc *a2)
{
  uint64_t result = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (!*((void *)result + 101))
  {
    BlueFin::GlDbgCodec::WriteStart(result, 4628);
    unint64_t v5 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5))
    {
      *((_DWORD *)v5 + 143) = 2;
      BlueFin::GlDbgCodec::Rvw(v5, (uint64_t)a2);
    }
    (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
    BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 4628);
    int v6 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);
    return (BlueFin::GlDbgCodec *)v6();
  }
  return result;
}

uint64_t BlueFin::GlMeSrdAsicUnitConverter::SetAsicConfigIfc(uint64_t a1)
{
  BlueFin::GlMeSrdAsicUnitConverter::bIsMinnowAsicType = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 264))(a1);
  BlueFin::GlMeSrdAsicUnitConverter::ucSubChipResolutiouint64_t n = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 320))(a1);
  BlueFin::GlMeSrdAsicUnitConverter::ucChnTmNcoMsbSft = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 288))(a1);
  BlueFin::GlMeSrdAsicUnitConverter::usChnTmNcoMsbMsuint64_t k = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 296))(a1);
  BlueFin::GlMeSrdAsicUnitConverter::ulChnTmNcoLsbScale = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 304))(a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 328))(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 312))(a1);
  BlueFin::GlMeSrdAsicUnitConverter::ulFrqNco2HzScale = result;
  return result;
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetChnTmNcoLsbScale(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned int *)this + 366);
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetFrqNco2HzScale(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned int *)this + 367);
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetChnTmNcoMsbSft(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 1459);
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetChnTmNcoMsbMsk(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int16 *)this + 730);
}

uint64_t BlueFin::GlMeSrdAsicConfig::SetRfType(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 1408) = a2;
  *(_DWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 23) = 0;
  *(unsigned char *)(a1 + 529) = 0;
  if ((a2 - 39) >= 2)
  {
    switch(a2)
    {
      case 18:
        int v4 = 4;
        goto LABEL_18;
      case 21:
      case 32:
        int v4 = 1;
        goto LABEL_18;
      case 22:
      case 33:
        *(_DWORD *)(a1 + 8) = 1;
        goto LABEL_20;
      case 23:
        *(_DWORD *)(a1 + 8) = 1;
        goto LABEL_25;
      case 24:
        *(_DWORD *)(a1 + 8) = 1;
        goto LABEL_24;
      case 25:
        int v4 = 2;
LABEL_18:
        *(_DWORD *)(a1 + 8) = v4;
        break;
      case 26:
        *(_DWORD *)(a1 + 8) = 2;
        goto LABEL_20;
      case 28:
        *(_DWORD *)(a1 + 8) = 2;
        *(_WORD *)(a1 + 23) = 257;
        break;
      case 29:
        *(_DWORD *)(a1 + 8) = 2;
        goto LABEL_25;
      case 30:
        *(_DWORD *)(a1 + 8) = 2;
LABEL_24:
        *(unsigned char *)(a1 + 23) = 1;
LABEL_25:
        *(unsigned char *)(a1 + 529) = 1;
        break;
      case 34:
      case 36:
      case 37:
      case 38:
        *(_DWORD *)(a1 + 8) = 3;
        *(unsigned char *)(a1 + 529) = 1;
        *(unsigned char *)(a1 + 555) = 1;
        if (*(unsigned char *)(a1 + 1416)) {
LABEL_20:
        }
          *(unsigned char *)(a1 + 23) = 1;
        break;
      default:
        break;
    }
    DeviceFaultNotify("glmesrd_asic_config.cpp", 662, "SetRfType", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_config.cpp", 662, "0");
  }
  *(_DWORD *)(a1 + 8) = 5;
  *(unsigned char *)(a1 + 555) = 0;
  if (*(unsigned char *)(a1 + 1416)) {
    *(unsigned char *)(a1 + 23) = 1;
  }
  uint64_t v2 = 0;
  *(void *)(a1 + 1424) = 0x3CB640E5AA05A8CLL;
  *(_DWORD *)(a1 + 1468) = 1342177280;
  *(unsigned char *)(a1 + 1459) = 4;
  *(_WORD *)(a1 + 146BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 15;
  *(_DWORD *)(a1 + 1444) = 21845;
  do
  {
    *(unsigned char *)(a1 + v2 + 1436) = (1 << BlueFin::GlSignalId::s_aucGnss2numSignals[v2]) - 1;
    ++v2;
  }
  while (v2 != 7);
  *(unsigned char *)(a1 + 1458) = 16;
  *(unsigned char *)(a1 + 1448) = 52;
  *(_DWORD *)(a1 + 1452) = 1796;
  *(_WORD *)(a1 + 1456) = 3864;
  *(_WORD *)(a1 + 148BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 1;
  *(_DWORD *)(a1 + 1483) = 16843009;
  *(void *)(a1 + 1472) = 0x118FD44012BFD44;
  *(_DWORD *)(a1 + 1489) = 436471251;
  *(unsigned char *)(a1 + 160BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 1;

  return BlueFin::GlMeSrdAsicUnitConverter::SetAsicConfigIfc(a1);
}

uint64_t BlueFin::GlDineCtrl::SetRfMode(uint64_t a1, int a2)
{
  GlCustomLog(14, "GlDineCtrl::SetRfMode(%d)\n", a2);
  *(_DWORD *)(a1 + 31084) = a2;

  return BlueFin::GlMeSrdAsicConfig::UpdatePerformanceModes(a1 + 29672);
}

uint64_t BlueFin::GlDineCtrl::EnableMPF(BlueFin::GlDineCtrl *this, int a2)
{
  *((unsigned char *)this + 30208) = a2;
  uint64_t v2 = "Disabled";
  if (a2) {
    uint64_t v2 = "Enabled";
  }
  return GlCustomLog(14, "GlDineCtrl::EnableMPF is %s \n", v2);
}

uint64_t BlueFin::GlDineCtrl::SetNotchFiltersConfiguration(uint64_t a1, void *a2, unsigned int a3)
{
  return BlueFin::GlMeSrdAsicConfig::SetNotchFiltersConfiguration(a1 + 29672, a2, a3);
}

uint64_t BlueFin::GlDineCtrl::SetUartFlowControlSettings(uint64_t result, int a2, char a3, char a4)
{
  *(_DWORD *)(result + 30024) = a2;
  if (a2 != 2) {
    a3 = 17;
  }
  if (a2 != 2) {
    a4 = 19;
  }
  *(unsigned char *)(result + 30028) = a3;
  *(unsigned char *)(result + 30029) = a4;
  return result;
}

uint64_t BlueFin::GlDineCtrl::SetExtSuspendEnabled(uint64_t this, char a2)
{
  *(unsigned char *)(this + 31809) = a2;
  return this;
}

uint64_t BlueFin::GlDineCtrl::SetThermalRiskState(uint64_t this, char a2)
{
  *(unsigned char *)(this + 30236) = a2;
  return this;
}

uint64_t BlueFin::GlDineCtrl::SetGeofenceSupport(BlueFin::GlDineCtrl *this, int a2)
{
  return BlueFin::GlMeSrdAsicConfig::SetGeofenceSupport((uint64_t)this + 29672, a2);
}

uint64_t BlueFin::GlDineCtrl::SetRefClockParams(BlueFin::GlDineCtrl *this, int a2, unsigned int a3, int a4)
{
  GlCustomLog(14, "GlDineCtrl::SetRefClockParams(%u, %u, %u):\n", a2, a3, a4);
  BlueFin::GlMeSrdAsicConfig::SetClockFrequency((uint64_t)this + 29672, a2, a3);
  BOOL v7 = *(uint64_t (**)(void))(*((void *)this + 3697) + 24);

  return v7();
}

uint64_t BlueFin::GlMeSrdAsicConfig::SetClockFrequency(uint64_t this, int a2, unsigned int a3)
{
  *(_DWORD *)(this + 28) = a2;
  *(_WORD *)(this + 32) = a3;
  if (a3 >= 0xBB9)
  {
    uint64_t v3 = this;
    this = (*(uint64_t (**)(uint64_t))(*(void *)this + 1112))(this);
    if (this != 1)
    {
      DeviceFaultNotify("glmesrd_asic_config.cpp", 1823, "SetClockFrequency", (char)"GetDspModeSetting()== GLME_DSP_MODE_FORCE_200");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_config.cpp", 1823, "GetDspModeSetting()== GLME_DSP_MODE_FORCE_200");
    }
    *(unsigned char *)(v3 + 2216) = 1;
  }
  return this;
}

uint64_t BlueFin::GlDineCtrl::SetL5DeltaExtBias(BlueFin::GlDineCtrl *this, float a2)
{
  uint64_t result = BlueFin::GlMeSrdAsicConfig::IsMinnowAsicType((BlueFin::GlDineCtrl *)((char *)this + 29672));
  if (result)
  {
    *((float *)this + 7503) = a2;
    *((unsigned char *)this + 29942) = 1;
    return GlCustomLog(14, "GlDineCtrl::SetL5DeltaExtBias(m) is %f \n", a2);
  }
  return result;
}

unint64_t BlueFin::GlDineCtrl::SetBlankingConfig(uint64_t a1, _DWORD *a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  __int16 v8 = a8;
  __int16 v9 = a7;
  GlCustomLog(14, "GlDineCtrl::SetBlankingConfig(%d %d %u %u %u %d %d)\n", *a2, a3, a4, a5, a6, a7, a8);
  uint64_t v16 = 0;
  unsigned int v17 = (_WORD *)(a1 + 30054);
  do
  {
    *(_DWORD *)(v17 - 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = a2[v16];
    *(_DWORD *)(v17 - 9) = a3;
    *(_DWORD *)(v17 - 7) = a4;
    *(_DWORD *)(v17 - 5) = a5;
    *(_DWORD *)(v17 - 3) = a6;
    *(v17 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v9;
    *unsigned int v17 = v8;
    v17 += 12;
    ++v16;
  }
  while (v16 != 7);

  return BlueFin::GlMeSrdCtrlSm::BlankingConfigUpdated((BlueFin::GlMeSrdCtrlSm *)(a1 + 75168));
}

uint64_t BlueFin::GlDineCtrl::SetAGCFreezeState(uint64_t this, char a2)
{
  *(unsigned char *)(this + 30209) = a2;
  return this;
}

uint64_t BlueFin::GlDineCtrl::SetAGCForceValue(uint64_t this, char a2, int a3)
{
  *(unsigned char *)(this + 3021BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a2;
  *(_DWORD *)(this + 30212) = a3;
  return this;
}

uint64_t BlueFin::GlDineCtrl::SetL5MsbEnabled(BlueFin::GlDineCtrl *this, char a2)
{
  uint64_t result = (*(uint64_t (**)(void))(*((void *)this + 3692) + 80))();
  *((unsigned char *)this + 30235) = a2;
  *((unsigned char *)this + 1156BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a2;
  return result;
}

uint64_t BlueFin::GlMeStateProvider::SetL5MsbEnabled(uint64_t this, char a2)
{
  *(unsigned char *)(this + 17) = a2;
  return this;
}

uint64_t BlueFin::GlDineCtrl::SetL5MsaEnabled(BlueFin::GlDineCtrl *this, char a2)
{
  uint64_t result = (*(uint64_t (**)(void))(*((void *)this + 3692) + 72))();
  *((unsigned char *)this + 30234) = a2;
  return result;
}

uint64_t BlueFin::GlMeStateProvider::SetL5MsaEnabled(uint64_t this, char a2)
{
  *(unsigned char *)(this + 16) = a2;
  return this;
}

uint64_t BlueFin::GlDineCtrl::SetPMMSettings(BlueFin::GlDineCtrl *this, unsigned int a2)
{
  uint64_t v2 = (char *)this + 30848;
  unint64_t v3 = 21474837 * a2;
  unint64_t v4 = HIDWORD(v3);
  if (BYTE4(v3) - 1 >= 2) {
    int v5 = 3;
  }
  else {
    int v5 = BYTE4(v3);
  }
  uint64_t result = GlCustomLog(14, "GlDineCtrl::SetPMMSettings:SetDutyCycleBlockParams(Min %d,Max %d)\n", v5, BYTE4(v3));
  char *v2 = 1;
  v2[1] = v5;
  v2[2] = v4;
  *(_WORD *)(v2 + 3) = 6408;
  return result;
}

uint64_t BlueFin::GlDineCtrl::EnableSearch3G(uint64_t this, char a2)
{
  *(unsigned char *)(this + 74154) = a2;
  return this;
}

uint64_t BlueFin::GlDineCtrl::SetSwTrackAgc(uint64_t this, char a2)
{
  *(unsigned char *)(this + 31276) = 1;
  *(unsigned char *)(this + 31275) = a2;
  return this;
}

double BlueFin::GlDineCtrl::SetAdcCapture(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a1 + 31876) = *(_WORD *)a2;
  double result = *(double *)(a2 + 4);
  *(double *)(a1 + 3188BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = result;
  return result;
}

uint64_t BlueFin::GlDineCtrl::SetLTEFilter(BlueFin::GlDineCtrl *this, int a2, int a3)
{
  if (a3 == -10) {
    int v6 = -1;
  }
  else {
    int v6 = a3;
  }
  *((unsigned char *)this + 30203) = a2;
  *((_DWORD *)this + 755BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v6;
  if ((*(unsigned int (**)(void))(*((void *)this + 3709) + 256))())
  {
    BOOL v7 = v6 > 0;
    float v8 = 13.735;
    if ((v7 & a2) != 0) {
      float v8 = 6.992;
    }
    float v9 = 34.544;
    if ((v7 & a2) != 0) {
      float v9 = 17.58;
    }
    BlueFin::GlMeSrdConstants::_4755_GALILEO_E1_COH_NOI_PWR_AT_CA_EPOCH_INT = LODWORD(v8);
    BlueFin::GlMeSrdConstants::_4755_BEIDOU_B1C_COH_NOI_PWR_AT_CA_EPOCH_INT = LODWORD(v9);
  }
  BlueFin::GlMeSrdCtrlSm::LteFilterSettingsUpdated((BlueFin::GlDineCtrl *)((char *)this + 75168));
  if (a3 == -10) {
    return GlCustomLog(14, "Auto Detect (%s,%d)\n");
  }
  else {
    return GlCustomLog(14, "GlDineCtrl::SetLTEFilter is %s LteFilterSetting = %d\n");
  }
}

unint64_t BlueFin::GlMeSrdCtrlSm::LteFilterSettingsUpdated(BlueFin::GlMeSrdCtrlSm *this)
{
  __int16 v4 = 60;
  uint64_t v2 = *((void *)this + 4);
  unint64_t result = *((void *)this + 1);
  *((void *)this + 4) = result;
  do
  {
    unint64_t v5 = 0;
    if (BlueFin::patch_dispatch(result, (uint64_t)this, (unsigned __int8 *)&v4, &v5)) {
      unint64_t result = v5;
    }
    else {
      unint64_t result = (*((uint64_t (**)(BlueFin::GlMeSrdCtrlSm *, __int16 *))this + 4))(this, &v4);
    }
    *((void *)this + 4) = result;
  }
  while (result);
  *((void *)this + 4) = v2;
  return result;
}

unint64_t BlueFin::GlMeSrdCtrlSm::TurnAsicOn(BlueFin::GlMeSrdCtrlSm *this)
{
  *((unsigned char *)this + 22BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  __int16 v4 = 24;
  uint64_t v2 = *((void *)this + 4);
  unint64_t result = *((void *)this + 1);
  *((void *)this + 4) = result;
  do
  {
    unint64_t v5 = 0;
    if (BlueFin::patch_dispatch(result, (uint64_t)this, (unsigned __int8 *)&v4, &v5)) {
      unint64_t result = v5;
    }
    else {
      unint64_t result = (*((uint64_t (**)(BlueFin::GlMeSrdCtrlSm *, __int16 *))this + 4))(this, &v4);
    }
    *((void *)this + 4) = result;
  }
  while (result);
  *((void *)this + 4) = v2;
  return result;
}

uint64_t (*(*BlueFin::GlMeSrdCtrlSm::off(uint64_t a1, unsigned __int8 *a2, double a3))(uint64_t a1, unsigned __int8 *a2))()
{
  unsigned int v4 = *a2;
  if (v4 > 0x18)
  {
    if (v4 == 25)
    {
      BlueFin::GlMeSrdStats::ReportStats(*(BlueFin::GlMeSrdStats **)(a1 + 200), a3);
      (*(void (**)(void))(**(void **)(a1 + 160) + 104))(*(void *)(a1 + 160));
      return 0;
    }
    if (v4 != 26) {
      return BlueFin::GlMeSrdCtrlSm::my_top;
    }
    goto LABEL_7;
  }
  if (v4 - 2 >= 2)
  {
    if (v4 != 24) {
      return BlueFin::GlMeSrdCtrlSm::my_top;
    }
LABEL_7:
    BlueFin::QHsm::tran((void *)a1, (uint64_t (*)())BlueFin::GlMeSrdCtrlSm::wait4init, (uint64_t)"&GlMeSrdCtrlSm::wait4init");
  }
  return 0;
}

uint64_t BlueFin::GlDineCtrl::SetEnableVLP(BlueFin::GlDineCtrl *this, int a2)
{
  char v2 = a2;
  unsigned int v4 = "AUTO";
  if (a2) {
    unsigned int v4 = "VLP";
  }
  GlCustomLog(14, "GlDineCtrl::SetEnableVLP(%s)\n", v4);
  *((unsigned char *)this + 31868) = v2;

  return BlueFin::GlMeSrdAsicConfig::UpdatePerformanceModes((uint64_t)this + 29672);
}

uint64_t BlueFin::GlDineCtrl::SetLnaMask(BlueFin::GlDineCtrl *this, int a2)
{
  unint64_t v3 = (char *)this + 29695;
  uint64_t result = GlCustomLog(14, "GlDineCtrl::SetLnaMask(%d)\n", a2);
  v3[1393] = a2;
  if (a2) {
    *unint64_t v3 = 1;
  }
  return result;
}

void FireCallback::GlReqOnFixStatus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (FireCallback::pInstance)
  {
    uint64_t v9 = *(void *)(FireCallback::pInstance + 88);
    if (v9)
    {
      uint64_t v11 = a2;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 48))(v9, &v11);
      return;
    }
    unsigned int v10 = "fcb,fReqOnFixStatusCb,nullptr";
  }
  else
  {
    unsigned int v10 = "fcb,GlReqOnFixStatus,nullptr";
  }

  FireDeviceLog::DeviceLogBase(2, v10, a3, a4, a5, a6, a7, a8, a9);
}

void std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_0,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_0>,void ()(BlueFin::GL_FIX_STATUS const*)>::operator()(DeviceCommon *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *a2 + 4072;
  uint64_t v4 = *((void *)a1 + 1);
  DeviceCommon::GetMachContinuousTime(a1);
  double v12 = v11;
  if (*(unsigned char *)(v2 + 4048))
  {
    if ((*(_DWORD *)(v2 + 7008) & 7) == 4)
    {
      FireDeviceLog::DeviceLogBase(6, "#fgd,ParrotedHULA,NOGNSS,lat,%.8lf,lon.%.8lf,alt,%.1lf,discarded", v5, v6, v7, v8, v9, v10, *(_OWORD *)(v2 + 4072));
      int v13 = 0;
    }
    else
    {
      int v13 = 1;
    }
    if (*(double *)(v2 + 4144) <= 0.0)
    {
      FireDeviceLog::DeviceLogBase(6, "#fgd,fix.bPosValid,%d,fix.dEstErr,%.3lf", v5, v6, v7, v8, v9, v10, *(unsigned char *)(v2 + 4048));
      int v13 = 0;
    }
    if (*(double *)(v2 + 4160) <= 0.0)
    {
      FireDeviceLog::DeviceLogBase(6, "#fgd,fix.bPosValid,%d,fix.dEstErrAlt,%.3lf", v5, v6, v7, v8, v9, v10, *(unsigned char *)(v2 + 4048));
      int v13 = 0;
    }
    if (*(double *)(v3 + 2880) <= 0.0)
    {
      FireDeviceLog::DeviceLogBase(6, "#fgd,fix.bPosValid,%d,fix.dPosUncertaintySemiMajorAxis,%.3lf", v5, v6, v7, v8, v9, v10, *(unsigned char *)(v2 + 4048));
      int v13 = 0;
    }
    if (*(double *)(v2 + 6960) <= 0.0)
    {
      FireDeviceLog::DeviceLogBase(6, "#fgd,fix.bPosValid,%d,fix.dPosUncertaintySemiMinorAxis,%.3lf", v5, v6, v7, v8, v9, v10, *(unsigned char *)(v2 + 4048));
      int v13 = 0;
    }
    double v15 = *(double *)(v2 + 4072);
    double v16 = *(double *)(v2 + 4080);
    if (fabs(v15) < 0.0000001 && fabs(v16) < 0.0000001)
    {
      FireDeviceLog::DeviceLogBase(6, "#fgd,NullIsland,fix.dLat,%.7lf,fix.dLon,%.7lf", v5, v6, v7, v8, v9, v10, *(void *)(v2 + 4072));
      int v13 = 0;
      double v15 = *(double *)(v2 + 4072);
      double v16 = *(double *)(v2 + 4080);
    }
    if (v16 < -180.0 || v16 > 180.0 || v15 > 90.0 || v15 < -90.0)
    {
      FireDeviceLog::DeviceLogBase(6, "#fgd,fix.dLat,%.7lf,fix.dLon,%.7lf", v5, v6, v7, v8, v9, v10, SLOBYTE(v15));
      double v17 = *(double *)(v2 + 4088);
      if (v17 > -500.0 && v17 < 1000000.0) {
        goto LABEL_30;
      }
    }
    else
    {
      double v17 = *(double *)(v2 + 4088);
      if (v17 > -500.0 && v17 < 1000000.0)
      {
        if (v13)
        {
          if ((*(unsigned char *)(v2 + 7008) & 3) != 0)
          {
            *(double *)(v4 + 328) = v12;
            FireDeviceLog::DeviceLogBase(6, "#fgd,received GPS fix,fLastFixWithGnssContentTime,%f", v5, v6, v7, v8, v9, v10, SLOBYTE(v12));
            goto LABEL_33;
          }
          if (vabdd_f64(v12, *(double *)(v4 + 328)) <= 6.0) {
LABEL_33:
          }
            operator new();
          FireDeviceLog::DeviceLogBase(6, "#fgd,Drop DR fix, as its outside the propogation window,kFixProgationTime,%.2f,fLastFixWithGnssContentTime,%.2f,currentMct,%.2f", v5, v6, v7, v8, v9, v10, 0);
        }
LABEL_30:
        operator new();
      }
    }
    char v18 = LOBYTE(v17);
    unsigned int v14 = "#fgd,fix.dAlt,%.3lf";
  }
  else
  {
    unsigned int v14 = "#fgd,no fix";
  }
  FireDeviceLog::DeviceLogBase(6, v14, v5, v6, v7, v8, v9, v10, v18);
  goto LABEL_30;
}

void sub_2639CADF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  if (v28) {
    MEMORY[0x263E6DD80](v28, 0x1000C4043D32D5CLL);
  }
  _Unwind_Resume(exception_object);
}

void FireCallback::GlReqOnGnssMeasData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (FireCallback::pInstance)
  {
    uint64_t v9 = *(void *)(FireCallback::pInstance + 248);
    if (v9)
    {
      uint64_t v11 = a2;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 48))(v9, &v11);
      return;
    }
    uint64_t v10 = "fcb,fReqOnGnssMeasDataCb,nullptr";
  }
  else
  {
    uint64_t v10 = "fcb,GlReqOnGnssMeasData,nullptr";
  }

  FireDeviceLog::DeviceLogBase(2, v10, a3, a4, a5, a6, a7, a8, a9);
}

void std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_2,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_2>,void ()(BlueFin::GlGnssData const*)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9 = *(void *)(a1 + 8);
  if (*(void *)(v9 + 184) && *(unsigned char *)(v9 + 153))
  {
    FireDeviceLog::DeviceLogBase(6, "handleRawMeasResponse", a3, a4, a5, a6, a7, a8, v10);
    operator new();
  }
  FireDeviceLog::DeviceLogBase(2, "handleRawMeasResponse,nullptr", a3, a4, a5, a6, a7, a8, a9);
}

void sub_2639CD2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t *a63)
{
  if (a62) {
    MEMORY[0x263E6DD80](a62, 0x1000C400A747E1ELL);
  }
  if (a63) {
    std::default_delete<gnss::TimeConversionInfo>::operator()[abi:ne180100](a63);
  }
  std::unique_ptr<gnss::MeasurementReport>::reset[abi:ne180100](&a64, 0);
  uint64_t v66 = *(void *)(v64 - 176);
  *(void *)(v64 - 176) = 0;
  if (v66) {
    MEMORY[0x263E6DD80](v66, 0x1000C4043D32D5CLL);
  }
  std::__tree<std::__value_type<std::pair<gnss::SatelliteSystem,unsigned short>,gnss::FireGnssDevice::PhaseTrackingState>,std::__map_value_compare<std::pair<gnss::SatelliteSystem,unsigned short>,std::__value_type<std::pair<gnss::SatelliteSystem,unsigned short>,gnss::FireGnssDevice::PhaseTrackingState>,std::less<std::pair<gnss::SatelliteSystem,unsigned short>>,true>,std::allocator<std::__value_type<std::pair<gnss::SatelliteSystem,unsigned short>,gnss::FireGnssDevice::PhaseTrackingState>>>::destroy(*(void **)(v64 - 248));
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::pair<gnss::SatelliteSystem,unsigned short>,gnss::FireGnssDevice::PhaseTrackingState>,std::__map_value_compare<std::pair<gnss::SatelliteSystem,unsigned short>,std::__value_type<std::pair<gnss::SatelliteSystem,unsigned short>,gnss::FireGnssDevice::PhaseTrackingState>,std::less<std::pair<gnss::SatelliteSystem,unsigned short>>,true>,std::allocator<std::__value_type<std::pair<gnss::SatelliteSystem,unsigned short>,gnss::FireGnssDevice::PhaseTrackingState>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::pair<gnss::SatelliteSystem,unsigned short>,gnss::FireGnssDevice::PhaseTrackingState>,std::__map_value_compare<std::pair<gnss::SatelliteSystem,unsigned short>,std::__value_type<std::pair<gnss::SatelliteSystem,unsigned short>,gnss::FireGnssDevice::PhaseTrackingState>,std::less<std::pair<gnss::SatelliteSystem,unsigned short>>,true>,std::allocator<std::__value_type<std::pair<gnss::SatelliteSystem,unsigned short>,gnss::FireGnssDevice::PhaseTrackingState>>>::destroy(*a1);
    std::__tree<std::__value_type<std::pair<gnss::SatelliteSystem,unsigned short>,gnss::FireGnssDevice::PhaseTrackingState>,std::__map_value_compare<std::pair<gnss::SatelliteSystem,unsigned short>,std::__value_type<std::pair<gnss::SatelliteSystem,unsigned short>,gnss::FireGnssDevice::PhaseTrackingState>,std::less<std::pair<gnss::SatelliteSystem,unsigned short>>,true>,std::allocator<std::__value_type<std::pair<gnss::SatelliteSystem,unsigned short>,gnss::FireGnssDevice::PhaseTrackingState>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

uint64_t *std::unique_ptr<gnss::MeasurementReport>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 112);
    if (v3)
    {
      uint64_t v4 = *(void *)(v2 + 120);
      uint64_t v5 = *(void **)(v2 + 112);
      if (v4 != v3)
      {
        do
        {
          uint64_t v6 = *(void **)(v4 - 16);
          *(void *)(v4 - 16) = 0;
          if (v6) {
            std::default_delete<gnss::MeasurementExtension>::operator()[abi:ne180100](v6);
          }
          v4 -= 176;
        }
        while (v4 != v3);
        uint64_t v5 = *(void **)(v2 + 112);
      }
      *(void *)(v2 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v3;
      operator delete(v5);
    }
    JUMPOUT(0x263E6DD80);
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<gnss::ReceiverBandCorrections>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a1);
}

void FireConfig::LearnedL5GroupDelay::injectCurrentEstimate(FireConfig::LearnedL5GroupDelay *this, double a2, double a3, int a4)
{
  double v6 = -662.517;
  if (a4) {
    double v6 = -648.985;
  }
  double v7 = a2 - v6;
  if (!FireResourceMgr::fInstance) {
    operator new();
  }
  (*(void (**)(void))(**(void **)(FireResourceMgr::fInstance + 40) + 104))(*(void *)(FireResourceMgr::fInstance + 40));
  FireDeviceLog::DeviceLogBase(4, "#nv_group_delay,incoming estimate,%.2f,%.2f,static,%.2f, L5 NF enabled,%d", v8, v9, v10, v11, v12, v13, SLOBYTE(v7));
  if (a3 < 0.25 && a3 >= 0.0)
  {
    if (!FireResourceMgr::fInstance) {
      operator new();
    }
    double v14 = (*(double (**)(void))(**(void **)(FireResourceMgr::fInstance + 8) + 40))(*(void *)(FireResourceMgr::fInstance + 8));
    FireDeviceLog::DeviceLogBase(6, "#ca,L5GD,update,%d,valid,%d,%d", v15, v16, v17, v18, v19, v20, *((unsigned char *)this + 24));
    if (!*((unsigned char *)this + 24) && a3 > 0.0 && *((double *)this + 2) > 0.0)
    {
      double v22 = *(double *)this;
      double v21 = *((double *)this + 1);
      double v66 = v7;
      double v67 = v21;
      LODWORD(v68) = (int)(v14 - v22 + 0.5) & ~((int)(v14 - v22 + 0.5) >> 31);
      if (!FireResourceMgr::fInstance) {
        operator new();
      }
      (*(void (**)(void, double *))(**(void **)(FireResourceMgr::fInstance + 40) + 48))(*(void *)(FireResourceMgr::fInstance + 40), &v66);
      FireDeviceLog::DeviceLogBase(5, "#ca,L5GD,val,%.2f,recall,%.2f,m,age,%d,sec", v23, v24, v25, v26, v27, v28, SLOBYTE(v66));
      *((unsigned char *)this + 24) = 1;
    }
    if (!FireResourceMgr::fInstance) {
      operator new();
    }
    uint64_t v29 = (FireConfig::LearnedL5GroupDelay *)(*(uint64_t (**)(void))(**(void **)(FireResourceMgr::fInstance
                                                                                             + 40)
                                                                               + 104))(*(void *)(FireResourceMgr::fInstance + 40));
    if (FireConfig::LearnedL5GroupDelay::passesCrossCheckToCalibration(v29, v7, a3, v37, v30, v31, v32, v33, v34, v35, v36))
    {
      double v44 = *((double *)this + 2);
      if (v44 <= 0.0
        || ((double v45 = v14 - *(double *)this, v45 >= 0.0) ? (v46 = v45 / 3600.0) : (v46 = 0.0),
            double v47 = v44 + v46 * 0.1,
            double v61 = v47,
            FireDeviceLog::DeviceLogBase(4, "#nv_group_delay,aged unc,%.2f,hrs,%.2f", v38, v39, v40, v41, v42, v43, SLOBYTE(v61)), v47 > a3))
      {
        FireDeviceLog::DeviceLogBase(4, "#nv_group_delay,updating store,old,%.2f,%.2f,%.2f,new,%.2f,%.2f,%.2f,oldAgeHours,%.3f", v38, v39, v40, v41, v42, v43, *((void *)this + 1));
        *(double *)this = v14;
        *((double *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v7;
        *((double *)this + 2) = a3;
        if (a3 <= 0.0)
        {
          FireDeviceLog::DeviceLogBase(1, "#nv_group_delay,tried to store invalid data", v48, v49, v50, v51, v52, v53, v62);
          DeviceFaultNotify("FireConfig.cpp", 419, "storeToNv", (char)"#nv_group_delay,tried to store invalid data");
        }
        else
        {
          uint64_t v71 = 0;
          long long v70 = 0u;
          long long v69 = 0u;
          double v66 = v14;
          double v67 = v7;
          double v68 = a3;
          if (!FireResourceMgr::fInstance) {
            operator new();
          }
          uint64_t v54 = *(void *)(FireResourceMgr::fInstance + 24);
          __p = 0;
          uint64_t v64 = 0;
          uint64_t v65 = 0;
          std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&__p, &v66, (uint64_t)&v72, 0x40uLL);
          (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v54 + 32))(v54, 3, &__p);
          if (__p)
          {
            uint64_t v64 = __p;
            operator delete(__p);
          }
        }
      }
    }
    else
    {
      if (!FireResourceMgr::fInstance) {
        operator new();
      }
      (*(void (**)(void))(**(void **)(FireResourceMgr::fInstance + 40) + 104))(*(void *)(FireResourceMgr::fInstance + 40));
      FireDeviceLog::DeviceLogBase(4, "#nv_group_delay,estimate fails cross-check to calibration,estimate,%.2f,%.2f,calibration,%.2f", v55, v56, v57, v58, v59, v60, SLOBYTE(v7));
    }
  }
}

void sub_2639CD960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<gnss::SvInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unsigned int v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 17;
        std::allocator<gnss::SvInfo>::destroy[abi:ne180100](v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), uint64_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            uint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            uint64_t v9 = (uint64_t **)v2[1];
            uint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              _OWORD v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }
            _OWORD v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            unsigned int *v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *uint64_t v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), uint64_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *uint64_t v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t BlueFin::GlPeAsstMgr::DumpAidRequest(const char *a1, const char *a2, int *a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v19 = a3 + 38;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  int v4 = *a3;
  uint64_t v5 = 77;
  if ((*a3 & 0x10) == 0) {
    uint64_t v5 = 109;
  }
  uint64_t v17 = v5;
  uint64_t v6 = 84;
  if ((v4 & 8) == 0) {
    uint64_t v6 = 116;
  }
  uint64_t v7 = 78;
  if ((v4 & 4) == 0) {
    uint64_t v7 = 110;
  }
  uint64_t v16 = v6;
  uint64_t v8 = 80;
  if ((v4 & 2) == 0) {
    uint64_t v8 = 112;
  }
  uint64_t v9 = 65;
  if ((*a3 & 1) == 0) {
    uint64_t v9 = 97;
  }
  GlCustomLog(13, "<glAid> REQUEST(%s,%s) {%c%c%c%c%c}\n", a1, a2, v9, v8, v7, v16, v17);
  uint64_t v13 = (const char *)BlueFin::GnssConstellationMaskPrinter::Print((BlueFin::GnssConstellationMaskPrinter *)&v19, v10, v11, v12);
  GlCustomLog(13, "<glAid> need  %s\n", v13);
  GlCustomLog(13, "<glAid> OSC %d+/-%huppb\n", a3[54], *((unsigned __int16 *)a3 + 110));
  BlueFin::GlOrbitInfoValidityPrinter::FormatTime((BlueFin::GlOrbitInfoValidityPrinter *)v18, (char *)0x40, a3[4], v14);
  GlCustomLog(13, "<glAid> LLA %.6f,%.6f,%.1f +/-%.1fm(H) %.1fm(V) %s\n", *((double *)a3 + 3), *((double *)a3 + 4), *((double *)a3 + 5), *((double *)a3 + 6), *((double *)a3 + 7), v18);
  GlCustomLog(13, "<glAid> TIME %huw:%ums +/-%uus\n", *((unsigned __int16 *)a3 + 66), a3[34], a3[36]);
  BlueFin::GlPeAsstMgr::DumpAsstEph((unsigned int *)a3 + 56);
  BlueFin::GlPeAsstMgr::DumpAsstEph((unsigned int *)a3 + 1484);
  BlueFin::GlPeAsstMgr::DumpAsstEph((unsigned int *)a3 + 2198);
  BlueFin::GlPeAsstMgr::DumpAsstEph((unsigned int *)a3 + 770);
  return GlCustomLog(13, "</glAid>\n");
}

unsigned int *BlueFin::GlPeAsstMgr::DumpAsstEph(unsigned int *result)
{
  if (result)
  {
    unsigned int v1 = result;
    uint64_t v2 = *result;
    uint64_t v3 = (int)v2 <= 4 ? BlueFin::AidSourceName[v2] : "GL_AID_SOURCE_unknown";
    GlCustomLog(13, "<glAid> %s[%d]", v3, *((unsigned __int8 *)result + 4));
    if (!*((unsigned char *)v1 + 4)) {
      goto LABEL_20;
    }
    unint64_t v4 = (unint64_t)(v1 + 2);
    unint64_t v5 = (unint64_t)&v1[4 * *((unsigned __int8 *)v1 + 4) + 2];
    int v6 = 1;
    int v7 = 8;
    do
    {
      for (v4 += 16; ; v4 += 16)
      {
        if (!v6) {
          GlCustomLog(13, "<glAid> +");
        }
        unint64_t v8 = v4 - 16;
        int v9 = *(unsigned __int8 *)(v4 - 16);
        if (v7 != v9) {
          break;
        }
        uint64_t result = (unsigned int *)GlCustomLog(13, " %d", *(unsigned __int8 *)(v4 - 15));
        if (v6 <= 14) {
          goto LABEL_18;
        }
        uint64_t result = (unsigned int *)GlCustomLog(13, "\n");
        int v6 = 0;
        if (v8 + 16 >= v5) {
          return result;
        }
      }
      if (v6 <= 7) {
        uint64_t v10 = " ";
      }
      else {
        uint64_t v10 = "\n<glAid> +";
      }
      uint64_t v11 = BlueFin::GnssConstellationMaskPrinter::constellation2string(*(unsigned __int8 *)(v4 - 16));
      GlCustomLog(13, "%s%s", v10, v11);
      uint64_t result = (unsigned int *)GlCustomLog(13, " %d", *(unsigned __int8 *)(v4 - 15));
      int v6 = 2;
      int v7 = v9;
LABEL_18:
      ++v6;
    }
    while (v4 < v5);
    if (v6)
    {
LABEL_20:
      return (unsigned int *)GlCustomLog(13, "\n");
    }
  }
  return result;
}

uint64_t BlueFin::GlOrbitInfoValidityPrinter::FormatTime(BlueFin::GlOrbitInfoValidityPrinter *this, char *a2, uint64_t a3, const char *a4)
{
  if ((a3 - 0x7FFFFFFF) > 1)
  {
    if ((a3 & 0x80000000) != 0)
    {
      return BlueFin::GlOrbitInfoValidityPrinter::FormatTime(this, (size_t)a2, a3, a4);
    }
    else
    {
      if (a3 > 0x6A4)
      {
        double v5 = (double)a3 / 3600.0;
        BOOL v6 = v5 < 50.4;
        if (v5 >= 50.4) {
          double v5 = v5 / 24.0;
        }
        uint64_t v7 = 100;
        if (v6) {
          uint64_t v7 = 104;
        }
        BlueFin::GlFormat::glsnprintf(this, (char *)a2, "%4.1f%c", a4, *(void *)&v5, v7);
      }
      else
      {
        BlueFin::GlFormat::glsnprintf(this, (char *)a2, "%us", a4, a3);
      }
      return 1;
    }
  }
  else
  {
    strlcpy((char *)this, "invalid", a2);
    return 0;
  }
}

unsigned __int8 *BlueFin::GlPeNavGnssMeasMgr::UpdateNavMeas(int32x2_t *a1, uint64_t a2, uint64_t a3)
{
  BOOL v6 = (_DWORD *)*a1;
  unsigned __int32 v8 = **(_DWORD **)&a1[1];
  uint64_t v99 = v101;
  char v100 = 8;
  memset(v101, 0, 32);
  if ((*(unsigned int (**)(_DWORD *))(*(void *)v6 + 1032))(v6))
  {
    memset(v93, 0, 24);
    int32x2_t v9 = a1[2];
    if (*(_DWORD *)(*(void *)&v9 + 100) != -1)
    {
      *(_OWORD *)long long v73 = *(_OWORD *)(*(void *)&v9 + 144);
      *(void *)&v73[16] = *(void *)(*(void *)&v9 + 160);
      if (BlueFin::ecef2lla((double *)v73, (uint64_t)v93)) {
        BlueFin::GlPeAlmMgr::Invisible(*(void *)&a1[2] + 34112, 0, v8, (double *)v93, (uint64_t)&v99, 0, v10, v11, v71, v72, *(int *)v73, *(uint64_t *)&v73[8], *(uint64_t *)&v73[16], *(unint64_t *)&v73[24], *(int *)&v73[32], *(uint64_t *)&v73[40], *(int *)&v73[48], *(long long *)&v73[56], *(long long *)&v73[72],
      }
          v74,
          v75,
          v76,
          v77,
          v78,
          v79,
          v80,
          v81,
          v82,
          v83,
          v84,
          v85,
          v86,
          v87,
          v88,
          v89,
          v90,
          v91,
          v92,
          *(long long *)v93,
          *(long long *)&v93[16],
          *(long long *)&v93[32],
          *(long long *)&v93[48],
          *(long long *)&v93[64],
          *(long long *)&v93[80],
          v94,
          v95[0],
          v95[1]);
    }
  }
  BlueFin::GlSignalIdSet::GetSvIdSet((BlueFin::GlSignalIdSet *)a2, (uint64_t)v93);
  int32x2_t v12 = a1[1];
  v73[0] = *(unsigned char *)(*(void *)&v12 + 104);
  memcpy(&v73[8], *(const void **)(*(void *)&v12 + 96), 4 * v73[0]);
  *(_WORD *)&v73[2] = 0;
  v73[1] = 0;
  *(_DWORD *)&v73[4] = *(_DWORD *)&v73[8];
  uint64_t result = BlueFin::GlSetIterator::operator++(v73);
  if (v73[1] != v73[0])
  {
    while (*(unsigned __int16 *)&v73[2] < 0x23FuLL)
    {
      double v14 = (BlueFin::GlPeMsmtMgr *)a1[1];
      uint64_t v15 = (unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * *(unsigned __int16 *)&v73[2];
      unsigned __int8 v16 = *v15;
      LODWORD(v15) = (char)v15[1];
      unsigned __int8 v112 = v16;
      int v115 = (int)v15;
      LOWORD(v116[0]) = *(_WORD *)&v73[2];
      BlueFin::GlPeMsmtMgr::GetMeMeas(v14, (const BlueFin::GlSignalId *)&v112, 0, 1u);
      uint64_t result = BlueFin::GlSetIterator::operator++(v73);
      if (v73[1] == v73[0]) {
        goto LABEL_8;
      }
    }
LABEL_86:
    double v68 = "usIndex < NUM_SIGNAL_IDS";
    DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
    long long v69 = "glsignalid.h";
    int v70 = 577;
    goto LABEL_87;
  }
LABEL_8:
  if ((*(unsigned char *)(*(void *)(*(void *)a1 + 160) + 1) & 1) == 0 || (*(unsigned char *)(a2 + 189) & 4) == 0)
  {
    *((void *)&v72 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = a1 + 280;
    BlueFin::GlPeNavMeasUtil::processNewMeas(&a1[280], a2, a3);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, v98, 0x13u, (const void **)(*(void *)&a1[1] + 184));
    unsigned __int8 v112 = v97;
    memcpy(v116, __src, 4 * v97);
    unsigned __int16 v114 = 0;
    unsigned __int8 v113 = 0;
    int v115 = v116[0];
    uint64_t result = BlueFin::GlSetIterator::operator++(&v112);
    if (v113 != v112)
    {
      uint64_t v17 = (float64x2_t *)(a2 + 88);
      do
      {
        if (v114 >= 0x23FuLL) {
          goto LABEL_86;
        }
        uint64_t v18 = a2;
        uint64_t v19 = a3;
        long long v20 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v114;
        char v21 = *v20;
        LODWORD(v2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v20[1];
        LOBYTE(v104) = v21;
        int v105 = (int)v20;
        LOWORD(v106) = v114;
        MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas(*(BlueFin::GlPeMsmtMgr **)&a1[1], (const BlueFin::GlSignalId *)&v104, 0, 0);
        v93[0] = *MeMeas;
        int v23 = *((_DWORD *)MeMeas + 1);
        *(_WORD *)&v93[8] = *((_WORD *)MeMeas + 4);
        *(_DWORD *)&unsigned char v93[4] = v23;
        *(_DWORD *)&v93[12] = *((_DWORD *)MeMeas + 3);
        long long v24 = *((_OWORD *)MeMeas + 4);
        long long v26 = *((_OWORD *)MeMeas + 1);
        long long v25 = *((_OWORD *)MeMeas + 2);
        *(_OWORD *)&v93[48] = *((_OWORD *)MeMeas + 3);
        *(_OWORD *)&v93[64] = v24;
        *(_OWORD *)&v93[16] = v26;
        *(_OWORD *)&v93[32] = v25;
        long long v28 = *((_OWORD *)MeMeas + 6);
        long long v27 = *((_OWORD *)MeMeas + 7);
        long long v29 = *((_OWORD *)MeMeas + 5);
        *(_OWORD *)((char *)&v95[1] + 5) = *(_OWORD *)(MeMeas + 125);
        long long v94 = v28;
        *(_OWORD *)uint64_t v95 = v27;
        *(_OWORD *)&v93[80] = v29;
        uint64_t PeMeas = BlueFin::GlPeMsmtMgr::GetPeMeas(*(BlueFin::GlPeMsmtMgr **)&a1[1], (const BlueFin::GlSignalId *)&v104, 0);
        BlueFin::stPeSigMeasKF::stPeSigMeasKF((uint64_t)v73, PeMeas);
        if ((*(unsigned int (**)(void))(**(void **)a1 + 1032))())
        {
          uint64_t v31 = (1 << (v104 & 0x1F)) & *(unsigned int *)&v99[((unint64_t)v104 >> 3) & 0x1C];
          uint64_t v32 = "NOT Visible!";
          if (v31)
          {
            uint64_t v33 = 10;
          }
          else
          {
            uint64_t v32 = "Visible";
            uint64_t v33 = 15;
          }
          GlCustomLog(v33, "StrictAssert:  SVID %d is %s\n", v104, v32);
          if (v31)
          {
            double v68 = "bIsVisible";
            DeviceFaultNotify("glpe_navgnssmeasmgr.cpp", 126, "UpdateNavMeas", (char)"bIsVisible");
            long long v69 = "glpe_navgnssmeasmgr.cpp";
            int v70 = 126;
LABEL_87:
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v69, v70, v68);
          }
        }
        LOWORD(v102) = 0;
        a3 = v19;
        LOWORD(v102) = **(_WORD **)(v19 + 32);
        v103[0] = 0.0;
        a2 = v18;
        BlueFin::GlPeNavMeasUtil::processEl(*((uint64_t *)&v72 + 1), (uint64_t)&v104, v18, &v102, v103);
        if (v34 <= 0.0)
        {
          if (v34 >= 0.0)
          {
            LOWORD(v36) = 0;
            goto LABEL_24;
          }
          double v35 = v34 + -0.5;
        }
        else
        {
          double v35 = v34 + 0.5;
        }
        int v36 = (int)v35;
LABEL_24:
        *(_WORD *)&v73[78] = v36;
        if (v103[0] <= 0.0)
        {
          if (v103[0] >= 0.0)
          {
            LOWORD(v38) = 0;
            goto LABEL_30;
          }
          double v37 = v103[0] + -0.5;
        }
        else
        {
          double v37 = v103[0] + 0.5;
        }
        int v38 = (int)v37;
LABEL_30:
        *(_WORD *)&v73[80] = v38;
        uint64_t v39 = *(__int16 **)(a3 + 32);
        if ((__int16)v102 > *v39
          && *((float *)&v94 + 1) < 0.0000000149999995
          && (v93[12] & 2) != 0
          && *(_DWORD *)&v93[40])
        {
          *uint64_t v39 = v102;
        }
        if (v34 < 5.0 && *(_DWORD *)(v18 + 176) >> 5 <= 0x752u)
        {
          *(_DWORD *)&v73[72] &= 0xFFFFFFC9;
          LOWORD(v92) = 1285;
          BYTE10(v88) = 0;
        }
        BlueFin::GlPeProbation::UpdateProbationInfo(a1 + 9, (int32x2_t *)v93, (double *)v73, v17, v8);
        BlueFin::GlPeSvVisibilityCache::UpdateVisibilityInfo((BlueFin::GlPeSvVisibilityCache *)&a1[64], (float *)v93, (double *)v73, v8, v40, v41, v42, v43, v71, *((uint64_t *)&v71 + 1), v72, *((uint64_t *)&v72 + 1), *(uint64_t *)v73, *(uint64_t *)&v73[8], *(uint64_t *)&v73[16], *(uint64_t *)&v73[24]);
        if (BlueFin::GlPeTimeManager::GetSystemConversionUncUs(*(void *)&a1[4], BlueFin::GlSvId::s_aucSvId2gnss[v104]) > 0.01)
        {
          *(_DWORD *)&v73[72] &= ~4u;
          if (!(_BYTE)v92) {
            LOBYTE(v92) = 19;
          }
        }
        BlueFin::GlPeMsmtMgr::SetPeMeas(*(void *)&a1[1], (uint64_t)v73, 0);
        uint64_t result = BlueFin::GlSetIterator::operator++(&v112);
      }
      while (v113 != v112);
    }
    int v44 = *(_DWORD *)(a2 + 188);
    if ((v44 & 0x1000) != 0)
    {
      *(void *)long long v73 = &v73[12];
      v73[8] = 19;
      memset(&v73[12], 0, 76);
      BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)v93, (unsigned int *)&v93[12], 0x13u, (const void **)(*(void *)&a1[1] + 8));
      unsigned __int8 v112 = v93[8];
      memcpy(v116, *(const void **)v93, 4 * v93[8]);
      unsigned __int16 v114 = 0;
      unsigned __int8 v113 = 0;
      int v115 = v116[0];
      uint64_t result = BlueFin::GlSetIterator::operator++(&v112);
      if (v113 == v112) {
        goto LABEL_91;
      }
      int v45 = 0;
      do
      {
        if (v114 >= 0x23FuLL) {
          goto LABEL_86;
        }
        double v46 = (unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v114;
        uint64_t v47 = *v46;
        LODWORD(v46) = (char)v46[1];
        LOBYTE(v104) = v47;
        int v105 = (int)v46;
        LOWORD(v106) = v114;
        if (BlueFin::GlSvId::s_aucSvId2gnss[v47] == 4)
        {
          *(_DWORD *)(*(void *)v73 + (((unint64_t)v114 >> 3) & 0x1FFC)) |= 1 << v114;
        }
        else
        {
          uint64_t v48 = (BlueFin::stPeSigMeasKF *)BlueFin::GlPeMsmtMgr::AccessPeMeas(*(BlueFin::GlPeMsmtMgr **)&a1[1], (const BlueFin::GlSignalId *)&v104, 0);
          v45 += BlueFin::stPeSigMeasKF::IsPRValidForNav(v48);
        }
        uint64_t result = BlueFin::GlSetIterator::operator++(&v112);
      }
      while (v113 != v112);
      if (v45 < 6u)
      {
LABEL_91:
        if (**(_DWORD **)v73) {
          goto LABEL_92;
        }
        if (v73[8] >= 2uLL)
        {
          if (*(_DWORD *)(*(void *)v73 + 4)) {
            goto LABEL_92;
          }
          uint64_t v52 = 2;
          do
          {
            if (v73[8] == v52) {
              goto LABEL_63;
            }
          }
          while (!*(_DWORD *)(*(void *)v73 + 4 * v52++));
          if (v52 - 1 < (unint64_t)v73[8])
          {
LABEL_92:
            uint64_t result = (unsigned __int8 *)BlueFin::GlSetBase::operator==((uint64_t)v73, (uint64_t)v93);
            if ((result & 1) == 0)
            {
              unsigned __int8 v112 = v73[8];
              memcpy(v116, *(const void **)v73, 4 * v73[8]);
              unsigned __int16 v114 = 0;
              unsigned __int8 v113 = 0;
              int v115 = v116[0];
              uint64_t result = BlueFin::GlSetIterator::operator++(&v112);
              if (v113 != v112)
              {
                while (v114 < 0x23FuLL)
                {
                  uint64_t v49 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v114;
                  char v50 = *v49;
                  LODWORD(v49) = v49[1];
                  LOBYTE(v104) = v50;
                  int v105 = (int)v49;
                  LOWORD(v106) = v114;
                  uint64_t v51 = BlueFin::GlPeMsmtMgr::AccessPeMeas(*(BlueFin::GlPeMsmtMgr **)&a1[1], (const BlueFin::GlSignalId *)&v104, 0);
                  *(_DWORD *)(v51 + 72) &= 0xFFFFFFC9;
                  *(_WORD *)(v51 + 304) = 7967;
                  uint64_t result = BlueFin::GlSetIterator::operator++(&v112);
                  if (v113 == v112) {
                    goto LABEL_63;
                  }
                }
                goto LABEL_86;
              }
            }
          }
        }
      }
LABEL_63:
      int v44 = *(_DWORD *)(a2 + 188);
    }
    if ((v44 & 0x80000) != 0 && *(_DWORD *)(a2 + 176) <= 0x7CFu)
    {
      *(void *)uint64_t v93 = &v93[12];
      v93[8] = 19;
      memset(&v93[12], 0, 76);
      int32x2_t v54 = a1[1];
      v73[0] = *(unsigned char *)(*(void *)&v54 + 16);
      memcpy(&v73[8], *(const void **)(*(void *)&v54 + 8), 4 * v73[0]);
      *(_WORD *)&v73[2] = 0;
      v73[1] = 0;
      *(_DWORD *)&v73[4] = *(_DWORD *)&v73[8];
      BlueFin::GlSetIterator::operator++(v73);
      while (v73[1] != v73[0])
      {
        unint64_t v55 = *(unsigned __int16 *)&v73[2];
        if (*(unsigned __int16 *)&v73[2] >= 0x23FuLL) {
          goto LABEL_86;
        }
        uint64_t v56 = (BlueFin::GlPeMsmtMgr *)a1[1];
        uint64_t v57 = (unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * *(unsigned __int16 *)&v73[2];
        unsigned __int8 v58 = *v57;
        LODWORD(v57) = (char)v57[1];
        unsigned __int8 v112 = v58;
        int v115 = (int)v57;
        LOWORD(v116[0]) = *(_WORD *)&v73[2];
        uint64_t v59 = (BlueFin::stPeSigMeasKF *)BlueFin::GlPeMsmtMgr::GetPeMeas(v56, (const BlueFin::GlSignalId *)&v112, 0);
        if (BlueFin::stPeSigMeasKF::IsPRValidForNav(v59)) {
          *(_DWORD *)(*(void *)v93 + ((v55 >> 3) & 0x1FFC)) |= 1 << v55;
        }
        BlueFin::GlSetIterator::operator++(v73);
      }
      int32x2_t v60 = a1[6];
      int v104 = 0;
      uint64_t v106 = v108;
      char v107 = 8;
      memset(v108, 0, 32);
      long long v109 = xmmword_263BBA380;
      int32x2_t v110 = vdup_n_s32(0x42C60000u);
      int v111 = 1120272384;
      BlueFin::stDops::stDops((uint64_t)v73, (uint64_t)&v104);
      *(int32x2_t *)&long long v74 = v60;
      uint64_t v61 = **(unsigned int **)&a1[1];
      BlueFin::GlSignalIdSet::GetSvIdSetBySignalIndex((BlueFin::GlSetBase *)v93, 2, (uint64_t)v103);
      int v102 = 0;
      BlueFin::GlPeDops::GetDops((uint64_t)v73, v61);
      float v62 = *(float *)&v116[13];
      uint64_t result = BlueFin::GlSignalIdSet::GetSvIdSetBySignalIndex((BlueFin::GlSetBase *)v93, 2, (uint64_t)v73);
      unsigned int v63 = 0;
      uint64_t v64 = (_DWORD *)(*(void *)v73 + 4 * v73[8] - 4);
      do
      {
        if (*v64)
        {
          unsigned int v65 = *v64 - (((*v64 >> 2) & 0x9249249) + ((*v64 >> 1) & 0x5B6DB6DB));
          unsigned int v63 = ((v65 + (v65 >> 3)) & 0xC71C71C7) + v63 - 63 * (((v65 + (v65 >> 3)) & 0xC71C71C7) / 0x3F);
        }
        --v64;
      }
      while ((unint64_t)v64 >= *(void *)v73);
      if (v62 < 3.0 && v63 > 5u) {
        int v67 = 2;
      }
      else {
        int v67 = 0;
      }
      *(_DWORD *)(*(void *)a1 + 26292) = v67;
    }
    else
    {
      *(_DWORD *)(*(void *)a1 + 26292) = 0;
    }
    if (**(_WORD **)(a3 + 32)) {
      return (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(**(void **)&a1[6] + 56))(*(void *)&a1[6]);
    }
  }
  return result;
}

double BlueFin::GlPeMsmtMgr::SetPeMeas(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = BlueFin::GlSignalIdArray::Get(*(void *)(a1 + 19176), a2 + 252);
  if (!v6
    || (((unint64_t)*(unsigned int *)(*(void *)(a1 + 8) + 4 * (*(__int16 *)(a2 + 260) >> 5)) >> (*(_WORD *)(a2 + 260) & 0x1F)) & 1) == 0
    && (a3 & 1) == 0)
  {
    DeviceFaultNotify("glpe_msmtmgr.cpp", 949, "SetPeMeas", (char)"potMePeMeas != nullptr && (m_otValidMeasSignalIds.Has(rotPeMeas.oSignalid) || bAllowInvalidMeas)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_msmtmgr.cpp", 949, "potMePeMeas != nullptr && (m_otValidMeasSignalIds.Has(rotPeMeas.oSignalid) || bAllowInvalidMeas)");
  }
  uint64_t v7 = v6 + 144;

  return BlueFin::stPeSigMeasKF::operator=(v7, a2);
}

double BlueFin::stPeSigMeasKF::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(void *)(a2 + 60);
    *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
    *(unsigned char *)(a1 + 76) = *(unsigned char *)(a2 + 76);
    *(_WORD *)(a1 + 78) = *(_WORD *)(a2 + 78);
    *(_WORD *)(a1 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_WORD *)(a2 + 80);
    *(void *)(a1 + 84) = *(void *)(a2 + 84);
    long long v2 = *(_OWORD *)(a2 + 96);
    long long v3 = *(_OWORD *)(a2 + 112);
    long long v4 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v4;
    *(_OWORD *)(a1 + 96) = v2;
    *(_OWORD *)(a1 + 112) = v3;
    long long v5 = *(_OWORD *)(a2 + 160);
    long long v6 = *(_OWORD *)(a2 + 176);
    long long v7 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v7;
    *(_OWORD *)(a1 + 16BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v5;
    *(_OWORD *)(a1 + 176) = v6;
    *(void *)(a1 + 224) = *(void *)(a2 + 224);
    *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
    *(unsigned char *)(a1 + 252) = *(unsigned char *)(a2 + 252);
    *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
    *(_WORD *)(a1 + 26BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_WORD *)(a2 + 260);
    *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
    *(unsigned char *)(a1 + 304) = *(unsigned char *)(a2 + 304);
    *(unsigned char *)(a1 + 305) = *(unsigned char *)(a2 + 305);
    *(void *)(a1 + 296) = *(void *)(a2 + 296);
    double result = *(double *)(a2 + 288);
    *(double *)(a1 + 288) = result;
  }
  return result;
}

uint64_t BlueFin::GlSettingsImpl::IsStrictAssert(BlueFin::GlSettingsImpl *this)
{
  return (*((unsigned __int8 *)this + 34) >> 1) & 1;
}

void BlueFin::GlPeSvVisibilityCache::UpdateVisibilityInfo(BlueFin::GlPeSvVisibilityCache *this, float *a2, double *a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (!a2)
  {
    uint64_t v59 = "pMeSigMeas";
    DeviceFaultNotify("glpe_svvisibilitycache.cpp", 440, "UpdateVisibilityInfo", (char)"pMeSigMeas");
    int v60 = 440;
    goto LABEL_58;
  }
  if (!a3)
  {
    uint64_t v59 = "pSkfMeas";
    DeviceFaultNotify("glpe_svvisibilitycache.cpp", 441, "UpdateVisibilityInfo", (char)"pSkfMeas");
    int v60 = 441;
    goto LABEL_58;
  }
  int v18 = *(unsigned __int8 *)a2;
  if (!*(unsigned char *)a2)
  {
    uint64_t v59 = "*pMeSigMeas->m_otSignalId.GetSvId()";
    DeviceFaultNotify("glpe_svvisibilitycache.cpp", 442, "UpdateVisibilityInfo", (char)"*pMeSigMeas->m_otSignalId.GetSvId()");
    int v60 = 442;
    goto LABEL_58;
  }
  uint64_t v20 = *((void *)this + 1);
  if (!v20) {
    return;
  }
  int v21 = *(_DWORD *)(v20 + 2576);
  if ((v18 - 76) < 0x63 || v21 == 0) {
    return;
  }
  int v23 = *((unsigned __int16 *)this + 10);
  if (v23 == 0xFFFF)
  {
    if ((int)BlueFin::GlPeSvVisibilityCache::GetSvVisibilityArraySize(this) > 8)
    {
      LOWORD(v23) = 0;
      *((_WORD *)this + 9) = 0;
      uint64_t v48 = -1600;
      double v49 = 1.79769313e308;
      while (1)
      {
        uint64_t v50 = *((void *)this + 204) + v48;
        if ((*(unsigned int (**)(uint64_t))(*(void *)(v50 + 1608) + 32))(v50 + 1608) < 0x93A80) {
          break;
        }
        unsigned int v51 = (*(uint64_t (**)(uint64_t))(*(void *)(v50 + 1608) + 32))(v50 + 1608);
        LODWORD(v52) = *(_DWORD *)(v50 + 1616);
        if ((double)v52 * 2.32830644e-10 + (double)(v51 % 0x93A80) == 0.0) {
          break;
        }
        uint64_t v53 = *((void *)this + 204) + v48;
        unsigned int v54 = (*(uint64_t (**)(void))(*(void *)(v53 + 1608) + 32))();
        LODWORD(v55) = *(_DWORD *)(v53 + 1616);
        if ((double)v55 * 2.32830644e-10 + (double)v54 < v49)
        {
          uint64_t v56 = *((void *)this + 204) + v48;
          double v57 = (double)(*(unsigned int (**)(void))(*(void *)(v56 + 1608) + 32))();
          LODWORD(v58) = *(_DWORD *)(v56 + 1616);
          double v49 = (double)v58 * 2.32830644e-10 + v57;
          *((_WORD *)this + 9) = v23;
        }
        LOWORD(v23) = v23 + 1;
        v48 += 160;
        if (!v48)
        {
          LOWORD(v23) = *((_WORD *)this + 9);
          goto LABEL_13;
        }
      }
    }
    else
    {
      LOWORD(v23) = *((_WORD *)this + 9) + 1;
    }
    *((_WORD *)this + 9) = v23;
LABEL_13:
    *((_WORD *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v23;
  }
  if ((unsigned __int16)v23 >= 0xAu)
  {
    uint64_t v59 = "m_sUpdateIdx >= 0 && m_sUpdateIdx < MAX_SVVISIBILITY_CACHE_SIZE";
    DeviceFaultNotify("glpe_svvisibilitycache.cpp", 465, "UpdateVisibilityInfo", (char)"m_sUpdateIdx >= 0 && m_sUpdateIdx < MAX_SVVISIBILITY_CACHE_SIZE");
    int v60 = 465;
LABEL_58:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_svvisibilitycache.cpp", v60, v59);
  }
  BlueFin::GlPeTimeManager::GetTime(*((BlueFin::GlPeTimeManager **)this + 1), 1, &v63);
  uint64_t v61 = &off_270EBC600;
  uint64_t v62 = 0;
  BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)&v63, (BlueFin::GlGpsTime *)&v61);
  uint64_t v24 = *((void *)this + 204);
  int v25 = *((__int16 *)this + 10);
  if (v62 != *(void *)(v24 + 160 * *((__int16 *)this + 10) + 16))
  {
    for (uint64_t i = 0; i != 96; i += 8)
    {
      long long v27 = (char *)&v63 + i;
      *(_WORD *)long long v27 = -256;
      *((_DWORD *)v27 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
    }
    unint64_t v28 = 0;
    uint64_t v29 = *(void *)(v24 + 160 * v25 + 128);
    do
    {
      uint64_t v30 = v29 + v28;
      *(_WORD *)uint64_t v30 = v63.n128_u16[v28 / 2];
      *(_DWORD *)(v30 + 4) = v63.n128_u32[v28 / 4 + 1];
      v28 += 8;
    }
    while (v28 != 96);
  }
  BlueFin::GlPeTimeManager::GetTime(*((BlueFin::GlPeTimeManager **)this + 1), 1, &v63);
  uint64_t v61 = &off_270EBC600;
  uint64_t v62 = 0;
  BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)&v63, (BlueFin::GlGpsTime *)&v61);
  uint64_t v31 = *((void *)this + 204);
  int v32 = *((__int16 *)this + 10);
  *(void *)(v31 + 160 * v32 + 16) = v62;
  double v33 = a2[27] + 0.5;
  double v34 = fmod(v33, 4294967300.0);
  if (v33 <= 4294967300.0) {
    double v34 = v33;
  }
  if (v34 < -4294967300.0) {
    double v34 = -fmod(-v34, 4294967300.0);
  }
  if (v34 < 0.0) {
    unsigned int v35 = --v34;
  }
  else {
    LOBYTE(v35) = v34;
  }
  double v36 = a3[4];
  double v37 = -v36;
  double v38 = -(v36 - *a3 * 299792.458);
  if (v38 >= 0.0) {
    double v39 = v38;
  }
  else {
    double v39 = -(v37 + *a3 * 299792.458);
  }
  double v40 = fmod(v39, 4294967300.0);
  if (v39 <= 4294967300.0) {
    double v40 = v39;
  }
  if (v40 < -4294967300.0) {
    double v40 = -fmod(-v40, 4294967300.0);
  }
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  if (v40 < 0.0) {
    unsigned int v43 = --v40;
  }
  else {
    unsigned int v43 = v40;
  }
  uint64_t v44 = *(void *)(v31 + 160 * v32 + 128);
  int v45 = (unsigned __int8 *)(v44 + 1);
  while (*(v45 - 1) && *(v45 - 1) != v18)
  {
    unsigned int v46 = *v45;
    v45 += 8;
    if (v46 < (unint64_t)*(unsigned __int8 *)(v44 + 8 * v42 + 1)) {
      uint64_t v42 = v41;
    }
    if (++v41 == 12) {
      goto LABEL_45;
    }
  }
  uint64_t v42 = v41;
LABEL_45:
  uint64_t v47 = v44 + 8 * v42;
  *(unsigned char *)uint64_t v47 = v18;
  *(unsigned char *)(v47 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v35;
  *(_DWORD *)(v47 + 4) = v43;
}

uint64_t BlueFin::GlPeNavMeasUtil::processEl(uint64_t result, uint64_t a2, uint64_t a3, _WORD *a4, _DWORD *a5)
{
  float v32 = 90.0;
  if ((*(_DWORD *)(a3 + 184) | 4) != 4)
  {
    int32x2_t v9 = (unsigned int **)result;
    if (*(_DWORD *)(a3 + 156)
      && (double result = (*(uint64_t (**)(void, uint64_t))(**(void **)(result + 8) + 64))(*(void *)(result + 8), a2)) != 0)
    {
      *a5 = *(_DWORD *)(result + 8);
    }
    else
    {
      int v31 = 0;
      uint64_t v30 = 0;
      memset(v28, 0, sizeof(v28));
      int v29 = 0;
      char v26 = 0;
      long long v25 = 0u;
      long long v24 = 0u;
      long long v23 = 0u;
      long long v22 = 0u;
      long long v21 = 0u;
      long long v20 = 0u;
      long long v19 = 0u;
      long long v18 = 0u;
      uint64_t v27 = 0x4008000000000000;
      long long v16 = *(_OWORD *)(a3 + 88);
      uint64_t v17 = *(void *)(a3 + 104);
      BlueFin::lla2ecef((double *)&v16, (uint64_t)&v14);
      long long v18 = v14;
      uint64_t v10 = *(void *)(a3 + 136);
      uint64_t v11 = *(void *)(a3 + 144);
      *(void *)&long long v19 = v15;
      *((void *)&v19 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v10;
      double v12 = (double)*(int *)(a3 + 152) * 0.001;
      *((void *)&v23 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v11;
      *(double *)&long long v20 = v12;
      double result = (*(uint64_t (**)(unsigned int *, uint64_t, void, long long *, _OWORD *, uint64_t, void, void, void))(*(void *)v9[1] + 24))(v9[1], a2, **v9, &v16, v28, 1, 0, 0, 0);
      if (!result)
      {
        uint64_t v13 = (*(uint64_t (**)(unsigned int *))(*(void *)v9[1] + 48))(v9[1]);
        double result = (*(uint64_t (**)(uint64_t, _OWORD *, long long *, long long *, void, void, int *, float *))(*(void *)v13 + 80))(v13, v28, &v18, &v16, 0, 0, &v31, &v32);
        if (v32 < -2.0 && !*(_DWORD *)(a3 + 156)) {
          ++*a4;
        }
        *a5 = v31;
      }
    }
  }
  return result;
}

uint64_t BlueFin::GlPeComputeZRH::GetSatPos(BlueFin::GlPeComputeZRH *this)
{
  return *((void *)this + 533);
}

float BlueFin::GlPeProbation::UpdateProbationInfo(int32x2_t *a1, int32x2_t *a2, double *a3, float64x2_t *a4, __int32 a5)
{
  if (!a2)
  {
    uint64_t v11 = "pMeSigMeas";
    DeviceFaultNotify("glpe_probation.cpp", 208, "UpdateProbationInfo", (char)"pMeSigMeas");
    int v12 = 208;
    goto LABEL_25;
  }
  if (!a3)
  {
    uint64_t v11 = "pSkfMeas";
    DeviceFaultNotify("glpe_probation.cpp", 209, "UpdateProbationInfo", (char)"pSkfMeas");
    int v12 = 209;
    goto LABEL_25;
  }
  int v5 = a2->u8[0];
  if (!a2->i8[0])
  {
    uint64_t v11 = "*pMeSigMeas->m_otSignalId.GetSvId()";
    DeviceFaultNotify("glpe_probation.cpp", 210, "UpdateProbationInfo", (char)"*pMeSigMeas->m_otSignalId.GetSvId()");
    int v12 = 210;
LABEL_25:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_probation.cpp", v12, v11);
  }
  if ((a2[2].i32[1] - 1) >= 2)
  {
    uint64_t v6 = 0;
    while (1)
    {
      if (a1->u8[v6 * 4] == v5)
      {
        long long v7 = (int32x2_t *)((char *)a1 + v6 * 4);
        if (a1->i32[v6 + 1] == a2->i32[1]) {
          break;
        }
      }
      v6 += 9;
      if (v6 == 108)
      {
        for (uint64_t i = 0; i != 432; i += 36)
        {
          if (!a1->i8[i])
          {
            long long v7 = (int32x2_t *)((char *)a1 + i);
            goto LABEL_18;
          }
        }
        uint64_t v9 = 0;
        long long v7 = a1;
        do
        {
          if (v7[1].i32[1] > (unsigned __int32)a1[6].i32[v9]) {
            long long v7 = (int32x2_t *)((char *)a1 + v9 * 4 + 36);
          }
          v9 += 9;
        }
        while (v9 != 99);
        break;
      }
    }
LABEL_18:
    if (v7 != a2)
    {
      v7->i8[0] = v5;
      v7->i32[1] = a2->i32[1];
      v7[1].i16[0] = a2[1].i16[0];
    }
    v7[1].i32[1] = a5;
    _OWORD v7[2] = vmovn_s64(vcvtq_s64_f64(vmulq_f64(*a4, (float64x2_t)vdupq_n_s64(0x412E848000000000uLL))));
    v7[3].i32[0] = (int)-(a3[4] - *a3 * 299792.458);
    float result = *(float *)&a2[13].i32[1];
    v7[3].i16[2] = (int)result;
    v7[4].i32[0] = a2[5].i32[0];
  }
  return result;
}

uint64_t BlueFin::GlPeSvVisibilityCache::GetSvVisibilityArraySize(BlueFin::GlPeSvVisibilityCache *this)
{
  uint64_t v1 = *((__int16 *)this + 9);
  if (v1 >= 0) {
    __int16 v2 = v1 + 1;
  }
  else {
    __int16 v2 = 0;
  }
  __int16 v3 = v2;
  if (v2 >= 1)
  {
    if ((int)v1 > 8)
    {
      return (__int16)(v1 + 1);
    }
    else if ((*(unsigned int (**)(void))(*(void *)(*((void *)this + 204) + 160 * *((__int16 *)this + 9) + 168) {
                                        + 32))() >= 0x93A80)
    }
    {
      return 10;
    }
  }
  return v3;
}

uint64_t BlueFin::GlMeMsmtMgr::SetDSPDataBits(uint64_t this, const BlueFin::GlMeDSPDataBits *a2, const BlueFin::GlMeDSPDataBits *a3)
{
  uint64_t v3 = *((unsigned __int8 *)a2 + 9);
  if (v3 != *((unsigned __int8 *)a3 + 9))
  {
    double v40 = "rFllDataBits.m_otSvId == rPllDataBits.m_otSvId";
    DeviceFaultNotify("glme_msmtmgr.cpp", 1282, "SetDSPDataBits", (char)"rFllDataBits.m_otSvId == rPllDataBits.m_otSvId");
    uint64_t v41 = "glme_msmtmgr.cpp";
    int v42 = 1282;
    goto LABEL_69;
  }
  if ((*((unsigned char *)a2 + 12) & 2) == 0 || (*((unsigned char *)a3 + 12) & 2) != 0)
  {
    double v40 = "(rFllDataBits.m_otFlags32.Has(GLME_DSPDATABIT_nPLL_FLL)) && (rPllDataBits.m_otFlags32.Missing(GLME_DSPDATABIT_nPLL_FLL))";
    DeviceFaultNotify("glme_msmtmgr.cpp", 1283, "SetDSPDataBits", (char)"(rFllDataBits.m_otFlags32.Has(GLME_DSPDATABIT_nPLL_FLL)) && (rPllDataBits.m_otFlags32.Missing(GLME_DSPDATABIT_nPLL_FLL))");
    uint64_t v41 = "glme_msmtmgr.cpp";
    int v42 = 1283;
    goto LABEL_69;
  }
  unsigned __int8 v51 = *((unsigned char *)a2 + 9);
  if (!v3 || v3 == 255) {
    return this;
  }
  uint64_t v6 = this;
  uint64_t v7 = BlueFin::GlUtils::m_pInstance;
  if (BlueFin::GlUtils::m_pInstance)
  {
    if (!*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)
      || (this = (*(uint64_t (**)(const BlueFin::GlMeDSPDataBits *, void, void))(*(void *)a2 + 24))(a2, 0, 0), (uint64_t v7 = BlueFin::GlUtils::m_pInstance) != 0))
    {
      if (*(unsigned char *)(v7 + 1122)) {
        this = (*(uint64_t (**)(const BlueFin::GlMeDSPDataBits *, void, void))(*(void *)a3 + 24))(a3, 0, 0);
      }
    }
  }
  uint64_t v8 = BlueFin::GlSvId::s_aucSvId2gnss[v3];
  switch(BlueFin::GlSvId::s_aucSvId2gnss[v3])
  {
    case 0:
    case 3:
      v46[0] = v3;
      int v47 = 0;
      __int16 v48 = 575;
      if ((v3 + 67) >= 0x44u)
      {
        if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v8] == 255) {
          int v47 = -1;
        }
        else {
          __int16 v48 = BlueFin::GlSignalId::s_ausGnss2signalId[v8]
        }
              + v3
              - BlueFin::GlSvId::s_aucGnss2minSvId[v8];
      }
      uint64_t MsmtSlotPtr = BlueFin::GlMeMsmtMgr::GetMsmtSlotPtr((BlueFin::GlMeMsmtMgr *)v6, (const BlueFin::GlSignalId *)v46, 0, 1);
      if (!MsmtSlotPtr)
      {
        double v40 = "pMeSlot != NULL_PTR";
        DeviceFaultNotify("glme_msmtmgr.cpp", 1304, "SetDSPDataBits", (char)"pMeSlot != NULL_PTR");
        uint64_t v41 = "glme_msmtmgr.cpp";
        int v42 = 1304;
        goto LABEL_69;
      }
      uint64_t v14 = MsmtSlotPtr;
      int v31 = (unsigned __int8 *)BlueFin::GlMeSlots::GpsFrameMgr(MsmtSlotPtr, &v51);
      if (v3 != v31[408])
      {
        double v40 = "otSvId == otFrameMgr.GetSvId()";
        DeviceFaultNotify("glme_msmtmgr.cpp", 1307, "SetDSPDataBits", (char)"otSvId == otFrameMgr.GetSvId()");
        uint64_t v41 = "glme_msmtmgr.cpp";
        int v42 = 1307;
LABEL_69:
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v41, v42, v40);
      }
      float v32 = (BlueFin::GlMeFrameMgr *)v31;
      BlueFin::GlMeFrameMgr::Update((BlueFin::GlMeFrameMgr *)v31, a2);
      this = BlueFin::GlMeFrameMgr::Update(v32, a3);
LABEL_60:
      v13.i32[0] = *(_DWORD *)(v14 + 40);
      uint64_t v34 = (int)*(float *)v13.i32;
      if (v34)
      {
        BlueFin::GlMeDSPDataBits::CheckLowTransitionCount((uint64_t)a2, (int)*(float *)v13.i32, v13);
        return BlueFin::GlMeDSPDataBits::CheckLowTransitionCount((uint64_t)a3, v34, v35);
      }
      return this;
    case 1:
      BlueFin::GlArray::EnsureValidHandle(v6 + 744, v3);
      int v9 = *(unsigned __int8 *)(*(void *)(v6 + 760) + v3 - *(unsigned __int8 *)(v6 + 780));
      uint64_t v10 = (int8x16_t *)BlueFin::GlArray::Add((BlueFin::GlArray *)(v6 + 744), v3);
      if (v10)
      {
        if (v9 == 255)
        {
          unint64_t v11 = 0;
          v10[6].i32[1] = -1;
          v10[6].i16[4] = -256;
          v10[6].i8[10] = 0;
          do
          {
            v10[2].i32[v11] = 0;
            if (v11 <= 7) {
              v10->i32[v11] = 0;
            }
            ++v11;
          }
          while (v11 != 17);
          v10[7].i64[0] = *(void *)(v6 + 176);
        }
        BlueFin::GlMeWaasFrameMgr::Update(v10, a3);
      }
      v46[0] = v3;
      int v47 = 0;
      if ((v3 + 67) >= 0x44u) {
        __int16 v12 = v3 + 95;
      }
      else {
        __int16 v12 = 575;
      }
      __int16 v48 = v12;
      this = BlueFin::GlMeMsmtMgr::GetMsmtSlotPtr((BlueFin::GlMeMsmtMgr *)v6, (const BlueFin::GlSignalId *)v46, 1, 1);
      uint64_t v14 = this;
      if (!this) {
        return this;
      }
      goto LABEL_60;
    case 2:
      v46[0] = v3;
      int v47 = 0;
      if ((v3 + 67) >= 0x44u) {
        __int16 v15 = v3 + 95;
      }
      else {
        __int16 v15 = 575;
      }
      __int16 v48 = v15;
      uint64_t v14 = BlueFin::GlMeMsmtMgr::GetMsmtSlotPtr((BlueFin::GlMeMsmtMgr *)v6, (const BlueFin::GlSignalId *)v46, 0, 1);
      uint64_t v16 = BlueFin::GlMeSlots::GlonassFrameMgr(v14, &v51);
      this = BlueFin::GlMeGlonassFrameMgr::Update(v16, a2, a3);
      goto LABEL_60;
    case 4:
      v46[0] = v3;
      int v47 = 0;
      if ((v3 + 67) >= 0x44u) {
        __int16 v17 = v3 + 125;
      }
      else {
        __int16 v17 = 575;
      }
      __int16 v48 = v17;
      uint64_t v18 = BlueFin::GlMeMsmtMgr::GetMsmtSlotPtr((BlueFin::GlMeMsmtMgr *)v6, (const BlueFin::GlSignalId *)v46, 0, 1);
      if (v18 && *(void *)(v6 + 176))
      {
        uint64_t v19 = BlueFin::GlMeSlots::BeidouBitDecoder(v18, &v51);
        this = BlueFin::GlMeBeidouDecodeMgr::SetDSPDataBits(v19, *(void *)(v6 + 176), *(void *)(v6 + 968), (uint64_t)a2, (uint64_t)a3);
        int v20 = *((unsigned __int16 *)a3 + 8);
        if (!*((_WORD *)a3 + 8)) {
          return this;
        }
        uint64_t v21 = *((unsigned __int8 *)a3 + 9);
        v46[0] = v21;
        __int16 v48 = v20;
        v43[0] = v21;
        int v44 = 0;
        unsigned __int16 v45 = 575;
        if ((v21 + 67) >= 0x44u)
        {
          uint64_t v22 = BlueFin::GlSvId::s_aucSvId2gnss[v21];
          if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v22] == 255) {
            int v44 = -1;
          }
          else {
            unsigned __int16 v45 = BlueFin::GlSignalId::s_ausGnss2signalId[v22]
          }
                + v21
                - BlueFin::GlSvId::s_aucGnss2minSvId[v22];
        }
        int v36 = *((_DWORD *)a3 + 6);
        int EpochPerBit = BlueFin::GlSignalId::GetEpochPerBit((BlueFin::GlSignalId *)v43);
        if (v45 >= 0x23Fu)
        {
          double v40 = "IsValid()";
          DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
          uint64_t v41 = "glsignalid.h";
          int v42 = 678;
        }
        else
        {
          uint64_t v38 = BlueFin::GlSvId::s_aucSvId2gnss[v43[0]];
          double v39 = &BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[-v44];
          if (v39[8 * v44 + v38])
          {
            int v47 = v36 - EpochPerBit * v20 * v39[8 * v44 + v38];
            uint64_t v49 = *(void *)((char *)a3 + 44);
            uint64_t v50 = *(void *)((char *)a3 + 172);
            return (*(uint64_t (**)(void, unsigned char *))(**(void **)(v6 + 176) + 72))(*(void *)(v6 + 176), v46);
          }
          double v40 = "ucMsPerEpoch != 0";
          DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
          uint64_t v41 = "glsignalid.h";
          int v42 = 685;
        }
      }
      else
      {
        double v40 = "pMeSlot && m_posEngInterface";
        DeviceFaultNotify("glme_msmtmgr.cpp", 1389, "SetDSPDataBits", (char)"pMeSlot && m_posEngInterface");
        uint64_t v41 = "glme_msmtmgr.cpp";
        int v42 = 1389;
      }
      goto LABEL_69;
    case 5:
      v46[0] = v3;
      int v47 = 0;
      if ((v3 + 67) >= 0x44u) {
        __int16 v23 = v3 + 314;
      }
      else {
        __int16 v23 = 575;
      }
      __int16 v48 = v23;
      uint64_t v24 = BlueFin::GlMeMsmtMgr::GetMsmtSlotPtr((BlueFin::GlMeMsmtMgr *)v6, (const BlueFin::GlSignalId *)v46, 0, 1);
      uint64_t v14 = v24;
      if (*((unsigned char *)a2 + 13))
      {
        unint64_t v28 = (BlueFin::GlMeGalileoPilotSecCodeDecoder *)BlueFin::GlMeSlots::GalileoPilotSecCodeDecoder(v24, &v51);
        BlueFin::GlMeGalileoPilotSecCodeDecoder::SetDSPDataBits(v28, a2, a3);
      }
      else
      {
        long long v25 = (unsigned char *)BlueFin::GlMeSlots::GalileoINavDecoder(v24, &v51);
        BlueFin::GlMeGalileoINavDecoder::SetDSPDataBits(v25, *(void *)(v6 + 968), a2, a3);
      }
      this = BlueFin::GlMeSlots::GalileoINavDecoder(v14, &v51);
      if (*(unsigned char *)(this + 376))
      {
        int v29 = (unsigned int *)(this + 392);
      }
      else
      {
        if (!*(unsigned char *)(this + 752)) {
          goto LABEL_60;
        }
        int v29 = (unsigned int *)(this + 768);
      }
      unsigned int v33 = *v29;
      this = BlueFin::GlMeSlots::GalileoPilotSecCodeDecoder(v14, &v51);
      *(unsigned char *)(this + 8) = 1;
      *(_DWORD *)(this + 4) = v33 % 0x64;
      goto LABEL_60;
    case 6:
      v46[0] = v3;
      int v47 = 0;
      if ((v3 + 67) >= 0x44u) {
        __int16 v26 = v3 + 386;
      }
      else {
        __int16 v26 = 575;
      }
      __int16 v48 = v26;
      uint64_t v14 = BlueFin::GlMeMsmtMgr::GetMsmtSlotPtr((BlueFin::GlMeMsmtMgr *)v6, (const BlueFin::GlSignalId *)v46, 0, 1);
      uint64_t v27 = (unsigned char *)BlueFin::GlMeSlots::NavICDecoder(v14, &v51);
      this = BlueFin::GlMeNavICDecoder::SetDSPDataBits(v27, *(void *)(v6 + 968), a2, a3);
      goto LABEL_60;
    default:
      return this;
  }
}

#error "2639CFF1C: call analysis failed (funcsize=95)"

uint64_t BlueFin::GlMeFrameMgr::Search(BlueFin::GlMeFrameMgr *this, BlueFin::GlMeDSPDataBits *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, BlueFin::GlMeFrameSearchBuffer *a10, BlueFin::GlMeFrameSearchBuffer *a11, uint64_t a12, int a13, unsigned int a14, unsigned int a15, __int16 a16, char a17, unsigned __int8 a18, uint64_t a19, uint64_t a20,__int16 a21,char a22,unsigned __int8 a23,unsigned int a24,uint64_t a25,unsigned int a26,long long a27,long long a28,int a29,int a30,char a31,int a32,unsigned int a33,long long a34,long long a35,int a36,int a37,char a38,int a39,unsigned int a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,unsigned int a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  long long v71 = a2;
  STACK[0x9B8] = *MEMORY[0x263EF8340];
  int v73 = *((_DWORD *)a2 + 3);
  if ((v73 & 2) != 0)
  {
    unsigned int v74 = *((unsigned __int16 *)a2 + 8);
    BOOL v75 = v74 >= 0x20 && 20 * v74 == *((_DWORD *)a2 + 5);
    if (v75 && *((_DWORD *)a2 + 43) == 0x80000000) {
      *((_DWORD *)a2 + 43) = 0;
    }
  }
  if ((v73 & 4) != 0) {
    BlueFin::GlMeFrameMgr::SetState((uint64_t)this, 0);
  }
  if (*(unsigned char *)this)
  {
LABEL_207:
    long long v201 = "SEARCH == putStateMem->ucState";
    DeviceFaultNotify("glme_framemgr.h", 515, "GetSearch", (char)"SEARCH == putStateMem->ucState");
    uint64_t v202 = "glme_framemgr.h";
    int v203 = 515;
    goto LABEL_213;
  }
  unint64_t v76 = *((unsigned int *)v71 + 3);
  if ((v76 & 2) != 0) {
    uint64_t v77 = 16;
  }
  else {
    uint64_t v77 = 72;
  }
  if ((v76 & 2) != 0) {
    char v78 = (char *)this + 16;
  }
  else {
    char v78 = (char *)this + 72;
  }
  long long v207 = (long long *)((char *)v71 + 44);
  STACK[0x7F0] = (unint64_t)v71 + 44;
  STACK[0x7F8] = 0;
  LOBYTE(STACK[0x800]) = 0;
  LODWORD(STACK[0x814]) = 0;
  *(_OWORD *)&STACK[0x804] = xmmword_263BB2530;
  LOBYTE(STACK[0x818]) = 0;
  BlueFin::GlBitBuffer::Limit((uint64_t)&STACK[0x7F0], *((unsigned __int16 *)v71 + 8));
  double v206 = (long long *)((char *)v71 + 172);
  STACK[0x7C0] = (unint64_t)v71 + 172;
  STACK[0x7C8] = 0;
  LOBYTE(STACK[0x7D0]) = 0;
  LODWORD(STACK[0x7E4]) = 0;
  *(_OWORD *)&STACK[0x7D4] = xmmword_263BB2530;
  LOBYTE(STACK[0x7E8]) = 0;
  BlueFin::GlBitBuffer::Limit((uint64_t)&STACK[0x7C0], *((unsigned __int16 *)v71 + 8));
  unsigned int v79 = *((_DWORD *)v71 + 5) - 20 * *((unsigned __int16 *)v71 + 8);
  unsigned int v80 = *(_DWORD *)((char *)this + v77);
  if (!*((unsigned char *)this + 804) && v79 < v80)
  {
    long long v201 = "SvId=%d expected %d <= %d\n";
    DeviceFaultNotify("glme_framemgr.cpp", 1569, "Search", (char)"SvId=%d expected %d <= %d\n");
    uint64_t v202 = "glme_framemgr.cpp";
    int v203 = 1569;
    goto LABEL_213;
  }
  unsigned int v81 = v79 - v80;
  unint64_t v211 = (v79 - v80) / 0x14uLL;
  unsigned int v82 = *((unsigned __int16 *)v78 + 18);
  if ((v82 & 0x1F) <= 2) {
    int v83 = 0;
  }
  else {
    int v83 = (v82 & 0x1F) - 3;
  }
  uint64_t v204 = (uint64_t)v78;
  if (v81 >= 0x14)
  {
    LOBYTE(v87) = 0;
    LODWORD(v89) = 0;
    LODWORD(STACK[0x7BC]) = 0;
    unint64_t v92 = v76;
  }
  else
  {
    long long v84 = (BlueFin::GlMeFrameSearchBuffer *)(v78 + 8);
    int v85 = v83 + 29 * (v82 >> 5);
    unsigned int v86 = (unsigned __int16)(v83 + 29 * (*((_WORD *)v78 + 18) >> 5));
    if (v86 >= 0x1F) {
      unsigned int v87 = 31;
    }
    else {
      unsigned int v87 = (unsigned __int16)(v83 + 29 * (*((_WORD *)v78 + 18) >> 5));
    }
    long long v88 = (BlueFin::GlMeFrameSearchBuffer *)BlueFin::GlMeFrameSearchBuffer::Position((BlueFin::GlMeFrameSearchBuffer *)(v78 + 8), (unsigned __int16)v86 - (unsigned __int16)v87);
    LODWORD(STACK[0x820]) = 0;
    a40 = 0;
    a33 = 0;
    LODWORD(v89) = BlueFin::GlMeFrameSearchBuffer::GetU(v88, v87, (unsigned int *)&STACK[0x820], &a40, &a33);
    int v90 = STACK[0x820];
    if (v87) {
      BOOL v91 = v90 == 0;
    }
    else {
      BOOL v91 = 1;
    }
    unint64_t v92 = v76;
    if (v91)
    {
LABEL_33:
      LOBYTE(v87) = 0;
      LODWORD(STACK[0x7BC]) = 0;
    }
    else
    {
      while ((~v90 & ~(-1 << v87)) != 0)
      {
        LOBYTE(v87) = v87 - 1;
        if (!(_BYTE)v87) {
          goto LABEL_33;
        }
      }
      LODWORD(STACK[0x7BC]) = 0;
      if (v87 > 0x1Eu)
      {
        if ((unsigned __int16)v85 >= 0x3Du) {
          LOWORD(v85) = 61;
        }
        double v200 = (BlueFin::GlMeFrameSearchBuffer *)BlueFin::GlMeFrameSearchBuffer::Position(v84, (unsigned __int16)v86 - (unsigned __int16)v85);
        LODWORD(STACK[0x820]) = 0;
        a40 = 0;
        BlueFin::GlMeFrameSearchBuffer::GetU(v200, (v85 - 30), (unsigned int *)&STACK[0x7BC], (unsigned int *)&STACK[0x820], &a40);
        BlueFin::GlMeFrameSearchBuffer::Position(v84, v86);
        goto LABEL_39;
      }
    }
  }
  if (LODWORD(STACK[0x808]) - LODWORD(STACK[0x80C]) >= (v87 ^ 0x1Fu)) {
    unsigned int v93 = v87 ^ 0x1F;
  }
  else {
    unsigned int v93 = LODWORD(STACK[0x808]) - LODWORD(STACK[0x80C]);
  }
  LODWORD(v89) = (v89 << v93) | BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)&STACK[0x7F0], v93);
LABEL_39:
  long long vars0 = &a56;
  unint64_t v205 = v92;
  while (LODWORD(STACK[0x808]) != LODWORD(STACK[0x80C]))
  {
    int v94 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)&STACK[0x7F0], 1u);
    int v95 = STACK[0x808];
    int v96 = STACK[0x80C];
    long long v89 = (BlueFin::GPSFrameMgrUtils *)(v94 | (2 * v89));
    LODWORD(STACK[0x7B8]) = 0;
    STACK[0x7B0] = 0;
    uint64_t result = BlueFin::GPSFrameMgrUtils::Parity(v89);
    int v98 = 0;
    if (!result) {
      goto LABEL_188;
    }
    int v99 = v95 - v96;
    int v100 = v95 - v96 + 30;
    unsigned int v101 = *((_DWORD *)this + 1);
    if ((v89 & 0xFFC00000) == 0x22C00000) {
      int v102 = (int)v89;
    }
    else {
      int v102 = ~v89;
    }
    unsigned int v103 = v102 & 0xFFC00000;
    if ((v102 & 0xFFC00000) == 0x22C00000)
    {
      unsigned int v104 = *((_DWORD *)v71 + 5) / 0x14u - v100 + 300;
      *((_DWORD *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v104;
      if ((*((unsigned char *)v71 + 12) & 2) == 0)
      {
        if ((v89 & 0xFFC00000) == 0xDD000000) {
          int v105 = 2;
        }
        else {
          int v105 = 1;
        }
        *((_DWORD *)this + 20BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v105;
      }
      int v106 = *((_DWORD *)this + 2);
      unsigned int v107 = *((unsigned __int8 *)this + 408) - 1;
      if (v107 <= 0x1F)
      {
        double v108 = *((double *)v71 + 4);
        int v109 = v99 + 30;
        int vars8_4a = v99;
        unsigned int v110 = v102 & 0xFFC00000;
        int v111 = v100;
        unsigned __int8 v112 = v71;
        unint64_t v113 = v92;
        int v114 = (int)v89;
        unsigned int v115 = v101;
        uint64_t result = BlueFin::GlMeFrameAidMgr::FoundTLM(*((BlueFin::GlMeFrameAidMgr **)this + 49), v108, v109);
        unsigned int v101 = v115;
        LODWORD(v89) = v114;
        unint64_t v92 = v113;
        long long v71 = v112;
        int v100 = v111;
        unsigned int v103 = v110;
        int v99 = vars8_4a;
      }
      if (v106 != -1 && *((_DWORD *)this + 2) <= *((_DWORD *)this + 1) && !((int)(v104 - v106) % 300))
      {
        unsigned int v116 = *((_DWORD *)this + 3) + (int)(v104 - v106) / 300;
LABEL_91:
        memcpy(&STACK[0x820], this, 0x180uLL);
        memcpy(&a40, this, 0x180uLL);
        if (*(unsigned char *)this)
        {
          long long v201 = "SEARCH == m_utStateMem.ucState";
          DeviceFaultNotify("glme_framemgr.h", 521, "GetSearchElem", (char)"SEARCH == m_utStateMem.ucState");
          uint64_t v202 = "glme_framemgr.h";
          int v203 = 521;
          goto LABEL_213;
        }
        a33 = *((_DWORD *)this + 4);
        a34 = *(_OWORD *)((char *)this + 24);
        LOBYTE(a35) = *((unsigned char *)this + 40);
        *(long long *)((char *)&a35 + 4) = *(_OWORD *)((char *)this + 44);
        a37 = *((_DWORD *)this + 15);
        a38 = *((unsigned char *)this + 64);
        a26 = *((_DWORD *)this + 18);
        a27 = *((_OWORD *)this + 5);
        LOBYTE(a28) = *((unsigned char *)this + 96);
        *(long long *)((char *)&a28 + 4) = *(_OWORD *)((char *)this + 100);
        a30 = *((_DWORD *)this + 29);
        a31 = *((unsigned char *)this + 120);
        if ((_BYTE)a40) {
          goto LABEL_207;
        }
        BlueFin::GlMeFrameSearchBuffer::Relocate((BlueFin::GlMeFrameSearchBuffer *)&a34, &a56);
        BlueFin::GlMeFrameSearchBuffer::Relocate((BlueFin::GlMeFrameSearchBuffer *)&a27, &a71);
        *((_DWORD *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
        *(_DWORD *)this = 1;
        *((_DWORD *)this + 3) = 0;
        *(void *)((char *)this + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = -1;
        *(_DWORD *)((char *)this + 5) = 0;
        --*(unsigned char *)(*((void *)this + 49) + 43);
        if (*(unsigned char *)this != 1)
        {
          long long v201 = "SYNCED == m_utStateMem.ucState";
          DeviceFaultNotify("glme_framemgr.h", 532, "GetSynced", (char)"SYNCED == m_utStateMem.ucState");
          uint64_t v202 = "glme_framemgr.h";
          int v203 = 532;
          goto LABEL_213;
        }
        if (v116 > 0x189BF) {
          v116 %= 0x189C0u;
        }
        int v127 = *((_DWORD *)v71 + 5);
        unsigned int v128 = v127 - 20 * v100 + 6000;
        unsigned int v129 = v128 % 0x1770;
        unsigned int v130 = 6000 * (v128 / 0x1770) + 3000;
        if (v130 >= 0x240C8400) {
          unsigned int v131 = v130 / 0x1770 % 0x189C0;
        }
        else {
          unsigned int v131 = v130 / 0x1770;
        }
        *((_DWORD *)this + 13) = v129;
        long double v132 = *((double *)v71 + 4);
        double v133 = fmod(v132 * 1000.0, 4294967300.0);
        if (v132 * 1000.0 <= 4294967300.0) {
          double v133 = v132 * 1000.0;
        }
        if (v133 < -4294967300.0) {
          double v133 = -fmod(-v133, 4294967300.0);
        }
        if (v133 < 0.0) {
          unsigned int v134 = --v133;
        }
        else {
          unsigned int v134 = v133;
        }
        *((_DWORD *)this + 14) = v129 - v127 + v134;
        int v135 = v116 - v131;
        if (v116 <= v131) {
          int v135 = v116 - v131 + 100800;
        }
        *((_DWORD *)this + 12) = v135;
        double v136 = fmod(v132, 4294967300.0);
        if (v132 <= 4294967300.0) {
          double v136 = v132;
        }
        if (v136 < -4294967300.0) {
          double v136 = -fmod(-v136, 4294967300.0);
        }
        if (v136 < 0.0) {
          unsigned int v137 = --v136;
        }
        else {
          unsigned int v137 = v136;
        }
        *((_DWORD *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v137;
        a25 = 0;
        a24 = 0;
        a23 = 0;
        a19 = 0;
        a20 = 0;
        a18 = 0;
        a15 = 0;
        *((void *)&a35 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = HIDWORD(a35);
        a38 = 0;
        *((void *)&a28 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = HIDWORD(a28);
        a31 = 0;
        if ((BYTE8(a35) & 0x1Fu) <= 2) {
          __int16 v138 = 0;
        }
        else {
          __int16 v138 = (BYTE8(a35) & 0x1F) - 3;
        }
        unsigned int v139 = (unsigned __int16)(v138 + 29 * (WORD4(a35) >> 5));
        unsigned int v140 = 20 * v139 - a33;
        if (20 * v139 < a33) {
          unsigned int v140 = 0;
        }
        unsigned int v141 = a33 - 20 * v139;
        unsigned int v142 = v141 + v140;
        unsigned int v143 = 600 * ((v141 + v140) / 0x258) + (unsigned __int16)(v129 + 560) % 0x258u;
        if (v143 >= v142) {
          unsigned int v144 = v143;
        }
        else {
          unsigned int v144 = v143 + 600;
        }
        unsigned int v145 = (v144 - v141) / 0x14;
        if (v139 >= v145) {
          unsigned __int16 v146 = v145;
        }
        else {
          unsigned __int16 v146 = v139;
        }
        BlueFin::GlMeFrameSearchBuffer::Position((BlueFin::GlMeFrameSearchBuffer *)&a34, v146);
        unsigned int v147 = BYTE8(a28) & 0x1F;
        if (v147 <= 2) {
          __int16 v148 = 0;
        }
        else {
          __int16 v148 = v147 - 3;
        }
        unsigned int v149 = (unsigned __int16)(v148 + 29 * (WORD4(a28) >> 5));
        unsigned int v150 = 20 * v149 - a26;
        if (20 * v149 < a26) {
          unsigned int v150 = 0;
        }
        unsigned int v151 = a26 - 20 * v149;
        unsigned int v152 = (*((_DWORD *)this + 13) + 560) % 0x258u + 600 * ((v151 + v150) / 0x258);
        if (v152 < v151 + v150) {
          v152 += 600;
        }
        unsigned int v153 = (v152 - v151) / 0x14;
        if (v149 >= v153) {
          unsigned __int16 v154 = v153;
        }
        else {
          unsigned __int16 v154 = v148 + 29 * (WORD4(a28) >> 5);
        }
        BlueFin::GlMeFrameSearchBuffer::Position((BlueFin::GlMeFrameSearchBuffer *)&a27, v154);
LABEL_137:
        BlueFin::GlMeFrameMgr::GetNextSearchWord((unsigned __int16 *)&a33, (_DWORD *)&a25 + 1, (_DWORD *)&a20 + 1, (unsigned int *)&a25, &a24, &a23);
LABEL_138:
        int v155 = &a26;
        long long v156 = &a20;
        long long v157 = &a15;
        long long v158 = (unsigned int *)&a19 + 1;
        long long v159 = (unsigned int *)&a19;
        uint64_t v160 = &a18;
LABEL_139:
        BlueFin::GlMeFrameMgr::GetNextSearchWord((unsigned __int16 *)v155, v156, v157, v158, v159, v160);
        while (a23 | a18)
        {
          if (a23 && a18)
          {
            unsigned int v161 = HIDWORD(a20);
            unsigned int v162 = HIDWORD(a20) - a15;
            if (HIDWORD(a20) == a15)
            {
              if (!BlueFin::GlMeFrameMgr::AddBestWord(this, HIDWORD(a20), (BlueFin::GPSFrameMgrUtils *)HIDWORD(a25), a25, a24, (BlueFin::GPSFrameMgrUtils *)a20, HIDWORD(a19), a19))goto LABEL_170; {
              goto LABEL_137;
              }
            }
            if (HIDWORD(a20) < a15)
            {
              HIDWORD(v168) = -1775253149 * (a15 - HIDWORD(a20));
              LODWORD(v168) = HIDWORD(v168);
              if ((v168 >> 3) >= 0x6D3A07)
              {
                long long v201 = "0 == ((ulPllEpochCnt - ulFllEpochCnt) % 600)";
                DeviceFaultNotify("glme_framemgr.cpp", 1787, "Search", (char)"0 == ((ulPllEpochCnt - ulFllEpochCnt) % 600)");
                uint64_t v202 = "glme_framemgr.cpp";
                int v203 = 1787;
                goto LABEL_213;
              }
LABEL_162:
              if (!BlueFin::GlMeFrameMgr::AddBestWord(this, v161, (BlueFin::GPSFrameMgrUtils *)HIDWORD(a25), a25, a24, (BlueFin::GPSFrameMgrUtils *)0x4BADC0DE, 0, 0))goto LABEL_170; {
LABEL_163:
              }
              int v155 = &a33;
              long long v156 = (uint64_t *)((char *)&a25 + 4);
              long long v157 = (unsigned int *)&a20 + 1;
              long long v158 = (unsigned int *)&a25;
              long long v159 = &a24;
              uint64_t v160 = &a23;
              goto LABEL_139;
            }
            if (a15 < HIDWORD(a20))
            {
              HIDWORD(v173) = -1775253149 * v162;
              LODWORD(v173) = -1775253149 * v162;
              if ((v173 >> 3) < 0x6D3A07)
              {
                unsigned int v170 = HIDWORD(a19);
                int v169 = (BlueFin::GPSFrameMgrUtils *)a20;
                unsigned __int32 v171 = a19;
                char v172 = this;
                unsigned int v163 = a15;
                goto LABEL_167;
              }
              long long v201 = "0 == ((ulFllEpochCnt - ulPllEpochCnt) % 600)";
              DeviceFaultNotify("glme_framemgr.cpp", 1797, "Search", (char)"0 == ((ulFllEpochCnt - ulPllEpochCnt) % 600)");
              uint64_t v202 = "glme_framemgr.cpp";
              int v203 = 1797;
LABEL_213:
              __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v202, v203, v201);
            }
          }
          else
          {
            if (a23)
            {
              unsigned int v161 = HIDWORD(a20);
              unsigned int v166 = *((_DWORD *)v71 + 5);
              BOOL v167 = a26 >= HIDWORD(a20) || a26 >= v166;
              if (!v167 && (*((unsigned char *)v71 + 12) & 2) == 0)
              {
                BlueFin::GlMeFrameMgr::AppendSyncedSearchBits((uint64_t)this, v211, (uint64_t)&STACK[0x7C0], (BlueFin::GlBitBuffer *)&STACK[0x7F0], (v92 >> 4) & 1, (uint64_t)&a26, v166);
                goto LABEL_138;
              }
              goto LABEL_162;
            }
            if (a18)
            {
              unsigned int v163 = a15;
              unsigned int v164 = *((_DWORD *)v71 + 5);
              BOOL v165 = a33 >= a15 || a33 >= v164;
              if (!v165 && (*((unsigned char *)v71 + 12) & 2) != 0)
              {
                BlueFin::GlMeFrameMgr::AppendSyncedSearchBits((uint64_t)this, v211, (uint64_t)&STACK[0x7C0], (BlueFin::GlBitBuffer *)&STACK[0x7F0], (v92 >> 4) & 1, (uint64_t)&a33, v164);
                goto LABEL_163;
              }
              unsigned int v170 = HIDWORD(a19);
              int v169 = (BlueFin::GPSFrameMgrUtils *)a20;
              unsigned __int32 v171 = a19;
              char v172 = this;
LABEL_167:
              if (!BlueFin::GlMeFrameMgr::AddBestWord(v172, v163, (BlueFin::GPSFrameMgrUtils *)0x4BADC0DE, 0, 0, v169, v170, v171))
              {
LABEL_170:
                uint64_t result = (uint64_t)memcpy(this, &STACK[0x820], 0x180uLL);
                int v98 = 6;
                goto LABEL_188;
              }
              goto LABEL_138;
            }
          }
        }
        a14 = 0;
        unsigned int v174 = BYTE8(a35) & 0x1F;
        if (v174 <= 2) {
          char v175 = 0;
        }
        else {
          char v175 = v174 - 3;
        }
        unsigned int v176 = BYTE12(a35) & 0x1F;
        if (v176 <= 2) {
          char v177 = 0;
        }
        else {
          char v177 = 3 - v176;
        }
        int v178 = BlueFin::GlMeFrameSearchBuffer::GetU((BlueFin::GlMeFrameSearchBuffer *)&a34, (v177 + v175 + 29 * ((WORD4(a35) >> 5) - (WORD6(a35) >> 5))), (unsigned int *)this + 5, (unsigned int *)this + 6, &a14);
        unsigned int v179 = *((_DWORD *)this + 5) & a14;
        *((_DWORD *)this + 4) = v178;
        *((_DWORD *)this + 5) = v179;
        unsigned int v180 = BYTE8(a28) & 0x1F;
        if (v180 <= 2) {
          char v181 = 0;
        }
        else {
          char v181 = v180 - 3;
        }
        unsigned int v182 = BYTE12(a28) & 0x1F;
        if (v182 <= 2) {
          char v183 = 0;
        }
        else {
          char v183 = 3 - v182;
        }
        uint64_t result = BlueFin::GlMeFrameSearchBuffer::GetU((BlueFin::GlMeFrameSearchBuffer *)&a27, (v183 + v181 + 29 * ((WORD4(a28) >> 5) - (WORD6(a28) >> 5))), (unsigned int *)this + 8, (unsigned int *)this + 9, &a14);
        unsigned int v184 = *((_DWORD *)this + 8) & a14;
        *((_DWORD *)this + 7) = result;
        *((_DWORD *)this + 8) = v184;
        unsigned int v185 = a33;
        if (a26 > a33) {
          unsigned int v185 = a26;
        }
        *((_DWORD *)this + 17) = v185;
        *((_DWORD *)this + 18) = *((_DWORD *)v71 + 5);
        char v186 = *((unsigned char *)v71 + 16);
        if ((v92 & 0x10) == 0) {
          char v186 = 0;
        }
        *((unsigned char *)this + 4) = v186;
        *((_DWORD *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *((_DWORD *)v71 + 3);
        long long v187 = v207[4];
        long long v188 = v207[5];
        long long v189 = v207[7];
        *(_OWORD *)((char *)this + 18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v207[6];
        *(_OWORD *)((char *)this + 196) = v189;
        *(_OWORD *)((char *)this + 148) = v187;
        *(_OWORD *)((char *)this + 164) = v188;
        long long v190 = *v207;
        long long v191 = v207[1];
        long long v192 = v207[3];
        *(_OWORD *)((char *)this + 116) = v207[2];
        *(_OWORD *)((char *)this + 132) = v192;
        *(_OWORD *)((char *)this + 84) = v190;
        *(_OWORD *)((char *)this + 10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v191;
        long long v193 = v206[7];
        long long v195 = v206[4];
        long long v194 = v206[5];
        *(_OWORD *)((char *)this + 308) = v206[6];
        *(_OWORD *)((char *)this + 324) = v193;
        *(_OWORD *)((char *)this + 276) = v195;
        *(_OWORD *)((char *)this + 292) = v194;
        long long v196 = *v206;
        long long v197 = v206[1];
        long long v198 = v206[3];
        *(_OWORD *)((char *)this + 244) = v206[2];
        *(_OWORD *)((char *)this + 26BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v198;
        *(_OWORD *)((char *)this + 212) = v196;
        *(_OWORD *)((char *)this + 228) = v197;
        int v98 = 1;
        goto LABEL_188;
      }
      if (v107 > 0x1F)
      {
        unsigned int v116 = 0;
        int v98 = 0;
      }
      else
      {
        unsigned int v117 = v101;
        uint64_t result = BlueFin::GlMeFrameAidMgr::GetAiding(*((BlueFin::GlMeFrameAidMgr **)this + 49), *((double *)v71 + 4), (unsigned int *)&STACK[0x7B4], (int *)&STACK[0x7B8], (unsigned int *)&STACK[0x7B0]);
        if (result)
        {
          int v118 = LODWORD(STACK[0x7B8]) - v100;
          if (v118 < 0) {
            int v118 = v100 - LODWORD(STACK[0x7B8]);
          }
          BOOL v119 = v118 > LODWORD(STACK[0x7B0]);
          int v98 = v118 <= LODWORD(STACK[0x7B0]);
          if (v119) {
            unsigned int v116 = 0;
          }
          else {
            unsigned int v116 = STACK[0x7B4];
          }
        }
        else
        {
          unsigned int v116 = 0;
          int v98 = 0;
        }
        unsigned int v101 = v117;
      }
    }
    else
    {
      unsigned int v116 = 0;
      int v98 = 0;
    }
    if ((~v89 & 3) != 0) {
      unsigned int v120 = v89;
    }
    else {
      unsigned int v120 = ~v89;
    }
    if ((v120 & 0x40000000) != 0) {
      v120 ^= 0x3FFFFFC0u;
    }
    if ((v120 & 3) != 0
      || (unsigned int v121 = (v120 >> 13) & 0x1FFFF, v121 >= 0x189C0)
      || (v121 + 4 - 5 * ((858993460 * (unint64_t)(v121 + 4)) >> 32) + 1 == ((v120 >> 8) & 7)
        ? (BOOL v122 = v98 == 0)
        : (BOOL v122 = 0),
          !v122))
    {
      if (!v98) {
        goto LABEL_188;
      }
      goto LABEL_91;
    }
    int vars8_4 = (int)v89;
    int v100 = v99 + 60;
    unsigned int v123 = *((_DWORD *)v71 + 5) / 0x14u - (v99 + 60) + 300;
    *((_DWORD *)this + 2) = v123;
    *((_DWORD *)this + 3) = v121;
    int v124 = *((_DWORD *)this + 1);
    unsigned int v125 = *((unsigned __int8 *)this + 408) - 33;
    if (v125 >= 0xFFFFFFE0)
    {
      unsigned int v126 = v101;
      uint64_t result = BlueFin::GlMeFrameAidMgr::FoundHOW(*((BlueFin::GlMeFrameAidMgr **)this + 49), *((double *)v71 + 4), v100, v121);
      unsigned int v101 = v126;
    }
    if (v124 != -1 && *((_DWORD *)this + 1) <= *((_DWORD *)this + 2) && !((v123 - v124) % 0x12C)
      || v103 == 583008256 && v101 != -1 && v101 <= *((_DWORD *)this + 2) && !((v123 - v101) % 0x12C))
    {
      unsigned int v116 = *((_DWORD *)this + 3);
      unint64_t v92 = v205;
      LODWORD(v89) = vars8_4;
      goto LABEL_91;
    }
    int v98 = 0;
    if (v125 < 0xFFFFFFE0)
    {
      unint64_t v92 = v205;
      LODWORD(v89) = vars8_4;
    }
    else
    {
      unint64_t v92 = v205;
      LODWORD(v89) = vars8_4;
      if (v124 == -1)
      {
        uint64_t result = BlueFin::GlMeFrameAidMgr::GetAiding(*((BlueFin::GlMeFrameAidMgr **)this + 49), *((double *)v71 + 4), (unsigned int *)&STACK[0x7B4], (int *)&STACK[0x7B8], (unsigned int *)&STACK[0x7B0]);
        if (!result) {
          goto LABEL_196;
        }
        int v199 = LODWORD(STACK[0x7B8]) - v100;
        if (v199 < 0) {
          int v199 = v100 - LODWORD(STACK[0x7B8]);
        }
        if (v199 <= LODWORD(STACK[0x7B0]))
        {
          int v98 = v121 == LODWORD(STACK[0x7B4]);
          if (v121 == LODWORD(STACK[0x7B4]))
          {
            unsigned int v116 = STACK[0x7B4];
            goto LABEL_91;
          }
        }
        else
        {
LABEL_196:
          int v98 = 0;
        }
      }
    }
LABEL_188:
    if (v98)
    {
      if (v98 != 6) {
        return result;
      }
      return BlueFin::GlMeFrameMgr::AppendSearchBits(v211, (uint64_t)&STACK[0x7C0], (BlueFin::GlBitBuffer *)&STACK[0x7F0], (v92 >> 4) & 1, v204, *((_DWORD *)v71 + 5));
    }
  }
  return BlueFin::GlMeFrameMgr::AppendSearchBits(v211, (uint64_t)&STACK[0x7C0], (BlueFin::GlBitBuffer *)&STACK[0x7F0], (v92 >> 4) & 1, v204, *((_DWORD *)v71 + 5));
}

uint64_t BlueFin::GlMeFrameMgr::SetState(uint64_t result, char a2)
{
  *(unsigned char *)uint64_t result = a2;
  if (a2 == 1)
  {
    *(_DWORD *)(result + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
    *(unsigned char *)(result + 3) = 0;
    *(_WORD *)(result + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
    *(_DWORD *)(result + 12) = 0;
    *(void *)(result + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = -1;
    *(_DWORD *)(result + 5) = 0;
    char v2 = -1;
  }
  else
  {
    if (a2) {
      return result;
    }
    *(void *)(result + 24) = result + 128;
    *(void *)(result + 32) = 0;
    *(unsigned char *)(result + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
    *(_DWORD *)(result + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
    *(_OWORD *)(result + 44) = xmmword_263BB2530;
    *(unsigned char *)(result + 64) = 0;
    *(_OWORD *)(result + 4) = xmmword_263BB2900;
    *(void *)(result + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = result + 256;
    *(void *)(result + 88) = 0;
    *(unsigned char *)(result + 96) = 0;
    *(_DWORD *)(result + 116) = 0;
    *(_OWORD *)(result + 10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = xmmword_263BB2530;
    *(unsigned char *)(result + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
    char v2 = 1;
    *(_DWORD *)(result + 72) = 0;
  }
  *(unsigned char *)(*(void *)(result + 392) + 43) += v2;
  return result;
}

uint64_t BlueFin::GlBitBuffer::Limit(uint64_t this, unsigned int a2)
{
  if (*(_DWORD *)(this + 20) < a2)
  {
    DeviceFaultNotify("glutl_bitbuffer.cpp", 116, "Limit", (char)"ulNewLimit <= m_ulCapacity");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_bitbuffer.cpp", 116, "ulNewLimit <= m_ulCapacity");
  }
  *(_DWORD *)(this + 24) = a2;
  unsigned int v2 = *(_DWORD *)(this + 28);
  if (v2 > a2)
  {
    *(_DWORD *)(this + 28) = a2;
    unsigned int v2 = a2;
  }
  if (*(unsigned char *)(this + 40)) {
    BOOL v3 = *(_DWORD *)(this + 32) <= v2;
  }
  else {
    BOOL v3 = 0;
  }
  *(unsigned char *)(this + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v3;
  return this;
}

uint64_t BlueFin::GlMeFrameSearchBuffer::Position(BlueFin::GlMeFrameSearchBuffer *this, unsigned __int16 a2)
{
  unsigned int v3 = BlueFin::GlMeFrameSearchBuffer::Logical2RealPos((BlueFin::GlMeFrameSearchBuffer *)a2);
  if ((v3 & 0x1C) != 0 || *((_DWORD *)this + 6) >= v3) {
    unsigned int v5 = v3;
  }
  else {
    unsigned int v5 = v3 & 0xFFE0;
  }

  return BlueFin::GlBitBuffer::Position((uint64_t)this, v5);
}

uint64_t BlueFin::GlMeFrameSearchBuffer::Logical2RealPos(BlueFin::GlMeFrameSearchBuffer *this)
{
  if ((((unsigned __int16)this % 0x1Du) | (32 * ((18079 * this) >> 19))) >= 0xFFFD)
  {
    DeviceFaultNotify("glme_framemgr.cpp", 350, "Logical2RealPos", (char)"((GlIntU16)ulResult) == ulResult");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_framemgr.cpp", 350, "((GlIntU16)ulResult) == ulResult");
  }
  return (unsigned __int16)((((unsigned __int16)this % 0x1Du) | (32 * ((unsigned __int16)this / 0x1Du))) + 3);
}

uint64_t BlueFin::GlMeFrameSearchBuffer::GetU(BlueFin::GlMeFrameSearchBuffer *this, unsigned int a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  *a3 = 0;
  *a4 = 0;
  if (!a2) {
    return 0;
  }
  unsigned int v8 = a2;
  unsigned int v10 = 0;
  LODWORD(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  do
  {
    unsigned int v12 = *((_DWORD *)this + 7) & 0xFFE0;
    if ((*((_DWORD *)this + 7) & 0x1C) != 0) {
      int v13 = *((_DWORD *)this + 7) & 0x1F;
    }
    else {
      int v13 = 3;
    }
    int v28 = v12 | v13;
    int v14 = 32 - v13;
    if (v14 >= (int)(v8 - v10)) {
      char v15 = v8 - v10;
    }
    else {
      char v15 = v14;
    }
    uint64_t v16 = (BlueFin::GlBitBuffer *)BlueFin::GlBitBuffer::Position((uint64_t)this, v12);
    int v27 = BlueFin::GlBitBuffer::GetU(v16, 1u);
    int v17 = BlueFin::GlBitBuffer::GetU(this, 1u);
    int v18 = BlueFin::GlBitBuffer::GetU(this, 1u);
    *a3 <<= v15;
    *a4 <<= v15;
    *a5 <<= v15;
    uint64_t v19 = (BlueFin::GlBitBuffer *)BlueFin::GlBitBuffer::Position((uint64_t)this, v28);
    uint64_t v11 = BlueFin::GlBitBuffer::GetU(v19, v15 & 0x1F) | (v11 << v15);
    int v20 = -1 << v15;
    if (v27) {
      int v21 = 0;
    }
    else {
      int v21 = ~v20;
    }
    *a3 |= v21;
    if (v17) {
      int v22 = 0;
    }
    else {
      int v22 = ~v20;
    }
    unsigned int v23 = *a4 | v22;
    unsigned int v8 = a2;
    *a4 = v23;
    if (v18) {
      int v24 = 0;
    }
    else {
      int v24 = ~v20;
    }
    *a5 |= v24;
    unsigned int v10 = ((v15 & 0x1F) + v10);
  }
  while (v10 < a2);
  return v11;
}

uint64_t BlueFin::GlMeFrameMgr::AppendSearchBits(uint64_t result, uint64_t a2, BlueFin::GlBitBuffer *this, int a4, uint64_t a5, int a6)
{
  uint64_t v10 = a5 + 8;
  int v11 = *(_DWORD *)(a5 + 28);
  if ((v11 & 0x1Fu) <= 2) {
    __int16 v12 = 0;
  }
  else {
    __int16 v12 = (v11 & 0x1F) - 3;
  }
  if (result <= (unsigned __int16)(v12 + 29 * ((unsigned __int16)v11 >> 5)))
  {
    for (unsigned int i = result; i; i -= v14)
    {
      if (i >= 0x20) {
        unsigned int v14 = 32;
      }
      else {
        unsigned int v14 = i;
      }
      uint64_t result = BlueFin::GlMeFrameSearchBuffer::PutU(v10, 0, v14, 0, 0, 0);
    }
  }
  else
  {
    *(_DWORD *)(a5 + 44) = 0;
    *(_DWORD *)(a5 + 32) = v11;
    *(_DWORD *)(a5 + 36) = 0;
    *(unsigned char *)(a5 + 48) = 0;
  }
  *((_DWORD *)this + 7) = 0;
  *((unsigned char *)this + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_DWORD *)(a2 + 28) = 0;
  *(unsigned char *)(a2 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  int v15 = *((_DWORD *)this + 6);
  for (int j = *((_DWORD *)this + 7); v15 != j; int j = *((_DWORD *)this + 7))
  {
    unsigned int v17 = *(unsigned __int16 *)(a5 + 32);
    unsigned int v18 = v17 >> 5;
    unsigned int v19 = v17 & 0x1F;
    if (v19 <= 2) {
      unsigned int v20 = 0;
    }
    else {
      unsigned int v20 = v19 - 3;
    }
    unsigned int v21 = *(unsigned __int16 *)(a5 + 36);
    if ((v21 & 0x1F) <= 2) {
      int v22 = 0;
    }
    else {
      int v22 = 3 - (v21 & 0x1F);
    }
    int v23 = v22 + v20 + 29 * (v18 - (v21 >> 5));
    if ((unsigned __int16)v23 > 0x1Eu) {
      v23 -= 30 * ((unsigned __int16)v23 / 0x1Eu);
    }
    if (!(_WORD)v23) {
      LOWORD(v23) = 30;
    }
    unsigned int v24 = v15 - j;
    if ((unsigned __int16)v23 < v24) {
      LOBYTE(v24) = v23;
    }
    unsigned int v25 = v24;
    unsigned int v26 = BlueFin::GlBitBuffer::GetU(this, v24);
    BOOL v27 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)a2, v25) == 0;
    uint64_t result = BlueFin::GlMeFrameSearchBuffer::PutU(v10, v26, v25, 1, v27, a4);
    int v15 = *((_DWORD *)this + 6);
  }
  *(_DWORD *)a5 = a6;
  return result;
}

unsigned __int8 *BlueFin::GlMeMsmtHolder::MsmtsCompleteInit(BlueFin::GlMeMsmtHolder *this, unsigned int a2, int a3)
{
  unsigned int v5 = (char *)this + 17644;
  char v209 = (unsigned int *)((char *)this + 128);
  BlueFin::GlMeas::init((BlueFin::GlMeMsmtHolder *)((char *)this + 128));
  *(_DWORD *)unsigned int v5 = a3 != 1000;
  long long v237 = v239;
  char v238 = 19;
  memset(v239, 0, sizeof(v239));
  long long v234 = v236;
  char v235 = 16;
  memset(v236, 0, 64);
  long long v231 = v233;
  unsigned __int8 v232 = 8;
  memset(v233, 0, 32);
  int v6 = BlueFin::GlSetBase::Cnt((BlueFin::GlMeMsmtHolder *)((char *)this + 32));
  GlCustomLog(15, "QDPN_MsmtsComplete_CNT %i\n", v6);
  unsigned __int8 v226 = *((unsigned char *)this + 40);
  memcpy(v230, *((const void **)this + 4), 4 * v226);
  unsigned __int16 v228 = 0;
  unsigned __int8 v227 = 0;
  int v229 = v230[0];
  BlueFin::GlSetIterator::operator++(&v226);
  if (v227 != v226)
  {
    unint64_t v19 = 0;
    double v210 = (BlueFin::GlMeMsmtHolder *)((char *)this + 17688);
    double v211 = (double)a2 * 0.001;
    while (1)
    {
      if (v228 >= 0x23FuLL) {
        goto LABEL_373;
      }
      unsigned int v20 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v228;
      char v21 = *v20;
      LODWORD(v2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v20[1];
      v223[0] = v21;
      int v224 = (int)v20;
      LOWORD(v225) = v228;
      uint64_t v22 = BlueFin::GlSignalIdArray::Get(*((void *)this + 15), (uint64_t)v223);
      if (!v22)
      {
        long long v198 = "pMeDspMeas != nullptr";
        DeviceFaultNotify("glme_msmtholder.cpp", 574, "GetSigMeas", (char)"pMeDspMeas != nullptr");
        int v199 = "glme_msmtholder.cpp";
        int v200 = 574;
        goto LABEL_372;
      }
      uint64_t v23 = v22;
      char v215 = 0;
      int v218 = -1;
      LOWORD(v219) = 575;
      *(_DWORD *)uint64_t v220 = 0;
      *(_WORD *)&v220[4] = -1;
      v220[6] = 0;
      memset(&v220[8], 0, 32);
      memset(&v220[44], 0, 32);
      *(_OWORD *)&v220[76] = xmmword_263BA9EE0;
      *(void *)long long v221 = 0xBF80000000000000;
      *(_DWORD *)&v220[92] = 0;
      *(_DWORD *)&v221[8] = 2139095039;
      *(void *)&v221[12] = 0;
      *(void *)&v221[20] = 0x38D1B71700000000;
      *(_DWORD *)&v221[28] = 0;
      unsigned int v24 = (BlueFin::GlSignalId *)(v22 + 100);
      char v222 = 0;
      BlueFin::GlSigMeas::init((uint64_t)&v215, v22 + 100);
      *(_WORD *)&v220[4] = *(unsigned __int8 *)(v23 + 112);
      int v25 = *(_DWORD *)(v23 + 140);
      if ((v25 - 8) < 2) {
        goto LABEL_33;
      }
      if (v25 == 15) {
        break;
      }
      unsigned int v26 = *(_DWORD *)v220 & 0xFFFF7FFF;
LABEL_35:
      unsigned int v27 = *(_DWORD *)(v23 + 84);
      *(_DWORD *)uint64_t v220 = (v27 >> 4) & 0x800 | v26 & 0xFFFAF7FF | (((v27 >> 12) & 1) << 16) | (v27 >> 4) & 0x40000;
      *(void *)&v220[8] = *(void *)(v23 + 88);
      int v28 = *(_DWORD *)(v23 + 132);
      *(_DWORD *)&v220[16] = *(_DWORD *)(v23 + 96);
      *(_DWORD *)&v220[20] = v28;
      *(_DWORD *)&v220[24] = *(_DWORD *)(v23 + 136);
      unsigned int v29 = (v27 >> 4) & 0x800 | v26 & 0xFFBAF7BF | (((v27 >> 12) & 1) << 16) & 0xFFBFFFBF | (v27 >> 4) & 0x40000 | ((v25 == 14) << 22);
      if ((v27 & 0x800080) != 0)
      {
        int v30 = v29 | (v27 >> 11) & 0x40 | 0x1000;
        unsigned int v31 = v29 | 0x1040;
        if ((v27 & 0x80) != 0) {
          unsigned int v31 = v30;
        }
        double v32 = -*(double *)(v23 + 8);
        *(_DWORD *)&v220[80] = *(_DWORD *)(v23 + 60);
      }
      else
      {
        double v32 = -*(double *)(v23 + 8);
        unsigned int v31 = v29 & 0xFFFFEFBF | 0x40;
      }
      double v33 = *(double *)(v23 + 120);
      if ((v27 & 0x1000000) != 0)
      {
        unsigned int v34 = v31 | 0x100000;
        *(_DWORD *)&v221[8] = *(_DWORD *)(v23 + 128);
      }
      else
      {
        unsigned int v34 = v31 & 0xFFEFFFFF;
      }
      double v35 = (v32 + 262144.0) * 0.00000190734863;
      double v36 = floor(v35);
      double v37 = ceil(v35);
      if (v35 < 0.0) {
        double v36 = v37;
      }
      double v38 = -v33;
      double v39 = (v35 - v36) * 524288.0;
      if (v39 < 0.0) {
        double v39 = v39 + 524288.0;
      }
      *(double *)&v221[12] = v38;
      *(double *)&v220[68] = v39 + -262144.0;
      *(_DWORD *)&v221[4] = *(_DWORD *)(v23 + 44);
      unsigned int v40 = *(_DWORD *)(v23 + 84);
      if ((v40 & 0x40000) != 0)
      {
        v34 |= 0x4000u;
        *(_DWORD *)uint64_t v220 = v34;
        *(_DWORD *)long long v221 = *(_DWORD *)(v23 + 40);
      }
      *(void *)&v220[28] = *(void *)(v23 + 48);
      int v41 = v40 & 0x100 | v34;
      if ((v40 & 4) != 0)
      {
        *(_DWORD *)&v220[92] = (int)(*(double *)(v23 + 16) * 1000.0);
        v41 |= 0x400u;
      }
      *(_DWORD *)&v220[84] = *(_DWORD *)(v23 + 32);
      *(_DWORD *)&v220[88] = *(_DWORD *)(v23 + 56);
      *(void *)&v221[20] = *(void *)(v23 + 148);
      *(_DWORD *)&v220[76] = *(_DWORD *)(v23 + 68);
      double v42 = *(double *)(v23 + 24);
      float v43 = *(float *)(v23 + 64);
      unsigned int v44 = (v40 >> 4) & 2 | (v40 >> 6) & 0x80 | v41 & 0xFFF7FFFD | ((*(_DWORD *)(v23 + 116) == 1) << 19);
      *(_DWORD *)uint64_t v220 = v44;
      if ((~(_WORD)v40 & 0x208) == 0)
      {
        if ((v40 & 0x400) == 0)
        {
          long long v198 = "pMeDspMeas->otFlags32.Has(GLME_DSPMEAS_TIMETAG_BIT_ALIGNED)";
          DeviceFaultNotify("glme_msmtholder.cpp", 768, "GetSigMeas", (char)"pMeDspMeas->otFlags32.Has(GLME_DSPMEAS_TIMETAG_BIT_ALIGNED)");
          int v199 = "glme_msmtholder.cpp";
          int v200 = 768;
          goto LABEL_372;
        }
        int v45 = BYTE2(v40) & 8;
        if (*(unsigned __int8 *)v24 - 52 >= 0xE) {
          int v45 = 8;
        }
        *(_DWORD *)uint64_t v220 = v44 | v45 | 4;
      }
      double v46 = v42 + v43;
      uint64_t MsmtSlotPtr = BlueFin::GlMeMsmtMgr::GetMsmtSlotPtr(*((BlueFin::GlMeMsmtMgr **)this + 1), (const BlueFin::GlSignalId *)v223, 1, 1);
      v261[0] = 0.0;
      unsigned int v48 = *(_DWORD *)v220 & 0xFFFDFFCF;
      if (!BlueFin::GlSignalId::s_aucSignalType2halfCycleAmbiguity[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v224 - v224 + BlueFin::GlSvId::s_aucSvId2gnss[v223[0]]]]) {
        unsigned int v48 = *(_DWORD *)v220 & 0xFFDDFFCF | 0x20000;
      }
      *(_DWORD *)uint64_t v220 = v48;
      unsigned int v49 = -1;
      double v50 = 0.0;
      if (!MsmtSlotPtr || (v48 & 0x100) == 0) {
        goto LABEL_162;
      }
      LOBYTE(v24BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
      if (!v223[0]) {
        goto LABEL_149;
      }
      uint64_t v51 = MsmtSlotPtr;
      if (v223[0] < 0x21u) {
        goto LABEL_64;
      }
      if (v223[0] < 0x42u)
      {
        if (v223[0] < 0x34u) {
          goto LABEL_149;
        }
        uint64_t v260 = 0;
        int v258 = 0;
        int v259 = 0;
        int v60 = (BlueFin::GlMeGlonassFrameMgr *)BlueFin::GlMeSlots::GlonassFrameMgr(MsmtSlotPtr, (unsigned __int8 *)v223);
        if (!BlueFin::GlMeGlonassFrameMgr::GetSystemTime(v60, (_DWORD *)&v260 + 1, &v260, (unsigned char *)&v259 + 3, (unsigned char *)&v259 + 2, (unsigned char *)&v259 + 1, &v259, &v258)|| !HIBYTE(v259))
        {
          goto LABEL_149;
        }
        unsigned int v49 = v260;
        LODWORD(v6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *(_DWORD *)&v220[28];
        LODWORD(v62) = HIDWORD(v260);
        double v63 = (double)v61 - (double)v62;
        if ((_BYTE)v259)
        {
          double v50 = fmod(v63 + (double)v260, 30000.0) * 0.001;
          v261[0] = v50;
          *(_DWORD *)v220 |= 0x10u;
        }
        if (!BYTE2(v259)) {
          goto LABEL_149;
        }
        HIDWORD(v64) = 1062232653;
        double v50 = ((double)v49 + 86400000.0 + v63) * 0.001;
        v261[0] = v50;
        if (BYTE1(v259))
        {
LABEL_332:
          *(_DWORD *)v220 |= 0x20u;
        }
        else
        {
          uint64_t v65 = *((void *)this + 2);
          if (*(float *)(v65 + 352) >= 43200.0) {
            goto LABEL_331;
          }
          float v206 = *(float *)(v65 + 352);
          double v204 = (double)v49 + 86400000.0 + v63;
          LODWORD(v64) = *(_DWORD *)(v65 + 356);
          float v66 = v46 + (double)v64 * -0.001;
          float v67 = *(double *)(v65 + 344) + (float)((float)(*(float *)(v23 + 32) + 1.0) * v66);
          float v201 = *(float *)(v23 + 56);
          float v202 = v66;
          float v68 = fmodf(v67, 86400.0);
          if (v67 < 86400.0) {
            float v68 = v67;
          }
          if (v68 < 0.0) {
            float v68 = 86400.0 - fmodf(-v68, 86400.0);
          }
          double v69 = v68 * 1000.0;
          if (v69 > 0.0)
          {
            double v70 = 0.5;
            goto LABEL_309;
          }
          if (v69 < 0.0)
          {
            double v70 = -0.5;
LABEL_309:
            unsigned int v174 = (int)(v69 + v70);
          }
          else
          {
            unsigned int v174 = 0;
          }
          double v175 = (float)(v206 + (float)(fabsf(v202) * v201)) * 1000.0 + 73.0 + 11.0 + 4.0;
          if (v175 > 0.0)
          {
            double v176 = 0.5;
            goto LABEL_319;
          }
          if (v175 < 0.0)
          {
            double v176 = -0.5;
LABEL_319:
            int v177 = (int)(v175 + v176);
          }
          else
          {
            int v177 = 0;
          }
          double v178 = 0.5;
          if (v204 <= 0.0 && (double v178 = -0.5, v204 >= 0.0))
          {
            unsigned int v179 = 0;
          }
          else
          {
            unsigned int v179 = (int)(v204 + v178);
            if (v179 > 0x5265BFF) {
              v179 -= 86400000;
            }
          }
          unsigned int v180 = v179 - v174;
          BOOL v14 = v174 >= v179;
          unsigned int v181 = v174 - v179;
          if (!v14) {
            unsigned int v181 = v180;
          }
          if (v181 > 0x2932E00) {
            unsigned int v181 = 86400000 - v181;
          }
          if (v181 < 10 * v177)
          {
LABEL_331:
            BYTE1(v259) = 1;
            goto LABEL_332;
          }
        }
        uint64_t v182 = BlueFin::GlSvId::s_aucSvId2gnss[v223[0]];
        uint64_t v183 = BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v224 - v224 + v182];
        if (!BlueFin::GlSignalId::s_aucSignalType2halfCycleAmbiguity[v183] || !v258) {
          goto LABEL_149;
        }
        unsigned int v151 = *(_DWORD *)v220;
        int v184 = *(_DWORD *)v220 | 0x20000;
        *(_DWORD *)v220 |= 0x20000u;
        if (v258 == 2)
        {
          if ((unsigned __int16)v225 >= 0x23Fu)
          {
LABEL_385:
            long long v198 = "IsValid()";
            DeviceFaultNotify("glsignalid.h", 650, "GetRfCarrierFrqHz", (char)"IsValid()");
            int v199 = "glsignalid.h";
            int v200 = 650;
            goto LABEL_372;
          }
          double v185 = BlueFin::GlSignalId::s_adSignalType2ctrFreqHz[v183];
          if (v182 == 2)
          {
            double v186 = (double)(char)(v223[0] - 59);
            if (v223[0] - 52 >= 0xE) {
              double v186 = -8.0;
            }
            double v185 = v185 + v186 * 562500.0;
          }
          *(double *)&v220[68] = *(double *)&v220[68] + -299792458.0 / v185 * 0.5;
          int v152 = 2228224;
LABEL_342:
          unsigned int v165 = v151 | v152;
        }
        else
        {
          unsigned int v165 = v184 & 0xFFDFFFFF;
        }
LABEL_344:
        *(_DWORD *)uint64_t v220 = v165;
        goto LABEL_149;
      }
      if (v223[0] <= 0x4Bu)
      {
LABEL_64:
        uint64_t v52 = BlueFin::GlMeSlots::GpsFrameMgr(MsmtSlotPtr, (unsigned __int8 *)v223);
        int TowMeas = BlueFin::GlMeFrameMgr::GetTowMeas(v52, (uint64_t)&v240);
        if (BlueFin::GlSignalId::s_aucSignalType2halfCycleAmbiguity[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v224 - v224 + BlueFin::GlSvId::s_aucSvId2gnss[v223[0]]]]
          && *(_DWORD *)(BlueFin::GlMeSlots::GpsFrameMgr(v51, (unsigned __int8 *)v223) + 800))
        {
          *(_DWORD *)v220 |= 0x20000u;
          if (*(_DWORD *)(BlueFin::GlMeSlots::GpsFrameMgr(v51, (unsigned __int8 *)v223) + 800) == 2)
          {
            if ((unsigned __int16)v225 >= 0x23Fu) {
              goto LABEL_385;
            }
            uint64_t v56 = BlueFin::GlSvId::s_aucSvId2gnss[v223[0]];
            double v57 = BlueFin::GlSignalId::s_adSignalType2ctrFreqHz[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v224 - v224 + v56]];
            if (v56 == 2)
            {
              double v58 = (double)(char)(v223[0] - 59);
              if (v223[0] - 52 >= 0xE) {
                double v58 = -8.0;
              }
              double v57 = v57 + v58 * 562500.0;
            }
            HIDWORD(v55) = *(_DWORD *)&v220[72];
            double v54 = *(double *)&v220[68] + -299792458.0 / v57 * 0.5;
            *(double *)&v220[68] = v54;
            unsigned int v59 = *(_DWORD *)v220 | 0x200000;
          }
          else
          {
            unsigned int v59 = *(_DWORD *)v220 & 0xFFDFFFFF;
          }
          *(_DWORD *)uint64_t v220 = v59;
        }
        if (v224 == 3) {
          *(_DWORD *)uint64_t v220 = *(_DWORD *)v220 & 0xFFDDFFFF | 0x20000;
        }
        if (TowMeas)
        {
          if (v223[0] != LOBYTE(v240))
          {
            long long v198 = "rotSignalId.GetSvId() == stTowMeas.otSvId";
            DeviceFaultNotify("glme_msmtholder.cpp", 837, "GetSigMeas", (char)"rotSignalId.GetSvId() == stTowMeas.otSvId");
            int v199 = "glme_msmtholder.cpp";
            int v200 = 837;
            goto LABEL_372;
          }
          LODWORD(v54) = *(_DWORD *)&v220[28];
          LODWORD(v55) = HIDWORD(v240);
          double v50 = ((double)*(unint64_t *)&v54 - (double)v55) * 0.001 + (double)(v241 + 604800);
          v261[0] = v50;
          long double SubBitTime = BlueFin::GlSystemTime::getSubBitTime((BlueFin::GlSystemTime *)v261, (const BlueFin::GlSignalId *)v223, 0);
          double v85 = fmod(SubBitTime, 4294967300.0);
          if (SubBitTime > 4294967300.0) {
            long double SubBitTime = v85;
          }
          double v86 = SubBitTime;
          if (SubBitTime < -4294967300.0) {
            double v86 = -fmod(-SubBitTime, 4294967300.0);
          }
          if (v86 < 0.0) {
            unsigned int v87 = --v86;
          }
          else {
            unsigned int v87 = v86;
          }
          if (v87)
          {
            if (SubBitTime < -4294967300.0) {
              long double SubBitTime = -fmod(-SubBitTime, 4294967300.0);
            }
            if (SubBitTime < 0.0) {
              unsigned int v88 = --SubBitTime;
            }
            else {
              unsigned int v88 = SubBitTime;
            }
            int EpochPerBit = BlueFin::GlSignalId::GetEpochPerBit(v24);
            if (*(unsigned __int16 *)(v23 + 108) >= 0x23Fu)
            {
              long long v198 = "IsValid()";
              DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
              int v199 = "glsignalid.h";
              int v200 = 678;
              goto LABEL_372;
            }
            if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *(int *)(v23 + 104)
                                                                        - *(int *)(v23 + 104)
                                                                        + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)(v23 + 100)]])
            {
              long long v198 = "ucMsPerEpoch != 0";
              DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
              int v199 = "glsignalid.h";
              int v200 = 685;
              goto LABEL_372;
            }
            double v90 = (double)(BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *(int *)(v23 + 104) - *(int *)(v23 + 104) + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)(v23 + 100)]]
                         * EpochPerBit)
                * 0.001;
            double v91 = fmod(v90, 4294967300.0);
            if (v90 <= 4294967300.0) {
              double v91 = v90;
            }
            if (v91 < -4294967300.0) {
              double v91 = -fmod(-v91, 4294967300.0);
            }
            unsigned int v92 = v91 < 0.0 ? --v91 : v91;
            if (v88 != v92)
            {
              long long v198 = "REAL_TO_INT(dSubBitTime)==0 || REAL_TO_INT(dSubBitTime)==REAL_TO_INT(pMeDspMeas->otSignalId.GetMsPe"
                     "rBit()*SEC_PER_MS)";
              DeviceFaultNotify("glme_msmtholder.cpp", 849, "GetSigMeas", (char)"REAL_TO_INT(dSubBitTime)==0 || REAL_TO_INT(dSubBitTime)==REAL_TO_INT(pMeDspMeas->otSignalId.GetMsPerBit()*SEC_PER_MS)");
              int v199 = "glme_msmtholder.cpp";
              int v200 = 849;
              goto LABEL_372;
            }
          }
          int v93 = *(_DWORD *)v220;
          *(_DWORD *)v220 |= 0x10u;
          if (TowMeas == 2)
          {
            unsigned int v94 = v93 | 0x30;
            goto LABEL_147;
          }
        }
LABEL_148:
        unsigned int v49 = -1;
        goto LABEL_149;
      }
      if (v223[0] > 0x8Au)
      {
        if (v223[0] > 0xAEu)
        {
          if (v223[0] <= 0xBCu)
          {
            uint64_t v153 = BlueFin::GlMeSlots::NavICDecoder(MsmtSlotPtr, (unsigned __int8 *)v223);
            if (*(unsigned __int8 *)(v153 + 368) | *(unsigned __int8 *)(v153 + 744)) {
              *(_DWORD *)v220 |= 0x10u;
            }
            unsigned __int16 v154 = (unsigned char *)BlueFin::GlMeSlots::NavICDecoder(v51, (unsigned __int8 *)v223);
            if (v154[368] && v154[369])
            {
              long long v157 = v154 + 380;
              long long v158 = v154 + 376;
            }
            else
            {
              if (!v154[744] || !v154[745]) {
                goto LABEL_149;
              }
              long long v157 = v154 + 756;
              long long v158 = v154 + 752;
            }
            LODWORD(v155) = *(_DWORD *)&v220[28];
            LODWORD(v156) = *v157;
            *(double *)&unint64_t v166 = (double)v156;
            double v167 = (double)v155 - *(double *)&v166;
            *(_DWORD *)v220 |= 0x20u;
            LODWORD(v166) = *v158;
            double v50 = (double)v166 * 0.001 + v167 * 0.001;
            v261[0] = v50;
          }
          goto LABEL_149;
        }
        if ((v224 - 1) >= 2)
        {
          if (v224) {
            goto LABEL_149;
          }
          uint64_t v159 = BlueFin::GlMeSlots::GalileoINavDecoder(MsmtSlotPtr, (unsigned __int8 *)v223);
          if (*(unsigned char *)(v159 + 752) && *(unsigned char *)(v159 + 753))
          {
            uint64_t v160 = (int *)(v159 + 764);
            unsigned int v161 = (int *)(v159 + 760);
            int v162 = 1;
            int v163 = 1;
            char v164 = 1;
          }
          else
          {
            uint64_t v160 = (int *)(v159 + 388);
            unsigned int v161 = (int *)(v159 + 384);
            int v162 = *(unsigned __int8 *)(v159 + 376);
            int v163 = *(unsigned __int8 *)(v159 + 377);
            if (*(unsigned char *)(v159 + 376)) {
              BOOL v168 = v163 == 0;
            }
            else {
              BOOL v168 = 1;
            }
            char v164 = !v168;
          }
          uint64_t v169 = *v161;
          int v170 = *v160;
          if (BlueFin::GlSignalId::s_aucSignalType2halfCycleAmbiguity[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v224 - v224 + BlueFin::GlSvId::s_aucSvId2gnss[v223[0]]]])
          {
            int v171 = *(_DWORD *)(v159 + 756);
            int v172 = *(_DWORD *)v220;
            *(_DWORD *)v220 &= ~0x20000u;
            if (v171 == 2)
            {
              *(_DWORD *)uint64_t v220 = v172 | 0x220000;
              int v207 = v163;
              uint64_t v205 = v169;
              int v203 = v170;
              double RfCarrierWavelengthM = BlueFin::GlSignalId::GetRfCarrierWavelengthM((BlueFin::GlSignalId *)v223);
              int v170 = v203;
              uint64_t v169 = v205;
              int v163 = v207;
              *(double *)&v220[68] = *(double *)&v220[68] + RfCarrierWavelengthM * -0.5;
            }
            else if (v171 == 1 || (unsigned int v173 = *(_DWORD *)(v23 + 140), v173 <= 0x11) && ((1 << v173) & 0x23000) != 0)
            {
              *(_DWORD *)uint64_t v220 = v172 & 0xFFDDFFFF | 0x20000;
            }
          }
          char v188 = v164 ^ 1;
          if (!v162) {
            char v188 = 1;
          }
          if (v188)
          {
            uint64_t v191 = BlueFin::GlMeSlots::GalileoPilotSecCodeDecoder(v51, (unsigned __int8 *)v223);
            if (!*(unsigned char *)(v191 + 8)) {
              goto LABEL_148;
            }
            double v189 = (double)((*(_DWORD *)&v220[28] - *(_DWORD *)(v191 + 4)) % 100);
            int v190 = 16;
          }
          else
          {
            if (!v163) {
              goto LABEL_148;
            }
            double v189 = (double)(v169 + *(_DWORD *)&v220[28] - v170 + 604800000);
            int v190 = 48;
          }
          double v50 = v189 * 0.001;
          v261[0] = v189 * 0.001;
          unsigned int v94 = *(_DWORD *)v220 | v190;
          goto LABEL_147;
        }
LABEL_277:
        unsigned int v151 = v48 & 0xFFDDFFCF;
        *(_DWORD *)uint64_t v220 = v48 & 0xFFDDFFCF | 0x20000;
        if ((v48 & 2) != 0)
        {
          int v152 = 131088;
          goto LABEL_342;
        }
        goto LABEL_149;
      }
      if ((v224 - 1) < 2) {
        goto LABEL_277;
      }
      if (v224 == 3)
      {
        unsigned int v165 = v48 & 0xFFDDFFCF | 0x20000;
        goto LABEL_344;
      }
      if (!v224)
      {
        uint64_t v260 = 0;
        long long v71 = (BlueFin::GlMeBeidouDecodeMgr *)BlueFin::GlMeSlots::BeidouBitDecoder(MsmtSlotPtr, (unsigned __int8 *)v223);
        if (!BlueFin::GlMeBeidouDecodeMgr::GetSecondOfWeek(v71, (unsigned __int8 *)v223, (int *)&v260 + 1, (unsigned int *)&v260))goto LABEL_148; {
        LODWORD(v72) = *(_DWORD *)&v220[28];
        }
        LODWORD(v73) = HIDWORD(v260);
        double v50 = ((double)v72 - (double)v73) * 0.001 + (double)(v260 + 604800);
        v261[0] = v50;
        long double v74 = BlueFin::GlSystemTime::getSubBitTime((BlueFin::GlSystemTime *)v261, (const BlueFin::GlSignalId *)v223, 0);
        double v75 = fmod(v74, 4294967300.0);
        if (v74 > 4294967300.0) {
          long double v74 = v75;
        }
        double v76 = v74;
        if (v74 < -4294967300.0) {
          double v76 = -fmod(-v74, 4294967300.0);
        }
        if (v76 < 0.0) {
          unsigned int v77 = --v76;
        }
        else {
          unsigned int v77 = v76;
        }
        if (v77)
        {
          if (v74 < -4294967300.0) {
            long double v74 = -fmod(-v74, 4294967300.0);
          }
          if (v74 < 0.0) {
            unsigned int v78 = --v74;
          }
          else {
            unsigned int v78 = v74;
          }
          double v79 = (double)BlueFin::GlSignalId::GetMsPerBit(v24) * 0.001;
          double v80 = fmod(v79, 4294967300.0);
          if (v79 <= 4294967300.0) {
            double v80 = v79;
          }
          if (v80 < -4294967300.0) {
            double v80 = -fmod(-v80, 4294967300.0);
          }
          unsigned int v81 = v80 < 0.0 ? --v80 : v80;
          if (v78 != v81)
          {
            long long v198 = "REAL_TO_INT(dSubBitTime)==0 || REAL_TO_INT(dSubBitTime) == REAL_TO_INT(pMeDspMeas->otSignalId.GetMsPe"
                   "rBit()*SEC_PER_MS)";
            DeviceFaultNotify("glme_msmtholder.cpp", 971, "GetSigMeas", (char)"REAL_TO_INT(dSubBitTime)==0 || REAL_TO_INT(dSubBitTime) == REAL_TO_INT(pMeDspMeas->otSignalId.GetMsPerBit()*SEC_PER_MS)");
            int v199 = "glme_msmtholder.cpp";
            int v200 = 971;
            goto LABEL_372;
          }
        }
        *(_DWORD *)v220 |= 0x30u;
        LOBYTE(v258) = 1;
        if (!BlueFin::GlSignalId::s_aucSignalType2halfCycleAmbiguity[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v224 - v224 + BlueFin::GlSvId::s_aucSvId2gnss[v223[0]]]]) {
          goto LABEL_148;
        }
        uint64_t v82 = BlueFin::GlMeSlots::BeidouBitDecoder(v51, (unsigned __int8 *)v223);
        unsigned int v83 = v223[0] - 81 > 0x34
            ? *(_DWORD *)&v220[28] >> 1
            : *(_DWORD *)&v220[28] / 0x14u;
        if (!BlueFin::GlMeBeidouPolarityMgr::GetPolarity(v82, 1u, v83, (char *)&v258)) {
          goto LABEL_148;
        }
        if (!(_BYTE)v258)
        {
          *(_DWORD *)v220 |= 0x220000u;
          double v192 = BlueFin::GlSignalId::GetRfCarrierWavelengthM((BlueFin::GlSignalId *)v223);
          *(double *)&v220[68] = *(double *)&v220[68] + v192 * -0.5;
          goto LABEL_148;
        }
        unsigned int v94 = *(_DWORD *)v220 & 0xFFDDFFFF | 0x20000;
LABEL_147:
        *(_DWORD *)uint64_t v220 = v94;
        goto LABEL_148;
      }
LABEL_149:
      unsigned __int8 v95 = v223[0] - 76;
      if (v223[0] < 0x4Cu)
      {
        if (!v223[0]) {
          goto LABEL_162;
        }
        if (v223[0] >= 0x21u)
        {
          unsigned __int8 v100 = v223[0] - 66;
          if (v223[0] < 0x42u) {
            goto LABEL_162;
          }
          if (v224 != 3) {
            goto LABEL_162;
          }
          uint64_t v101 = *((void *)this + 2);
          if (!*(unsigned char *)(v101 + v100 + 10028)) {
            goto LABEL_162;
          }
          uint64_t v97 = v101 + 4 * v100;
          uint64_t v98 = 10040;
        }
        else
        {
          uint64_t v99 = *((void *)this + 2);
          if (!*(unsigned char *)(v99 + (v223[0] - 1) + 9868)) {
            goto LABEL_162;
          }
          uint64_t v97 = v99 + 4 * (v223[0] - 1);
          uint64_t v98 = 9900;
        }
      }
      else
      {
        if (v223[0] >= 0x8Bu) {
          goto LABEL_162;
        }
        uint64_t v96 = *((void *)this + 2);
        if (!*(unsigned char *)(v96 + v95 + 10080)) {
          goto LABEL_162;
        }
        uint64_t v97 = v96 + 4 * v95;
        uint64_t v98 = 10144;
      }
      int v102 = *(_DWORD *)&v220[28] - *(_DWORD *)(v97 + v98);
      double v50 = (double)(v102 % (int)BlueFin::GlSignalId::GetMsPerSecFrame((BlueFin::GlSignalId *)v223)) * 0.001;
      *(_DWORD *)v220 |= 0x10u;
LABEL_162:
      if ((v215 - 52 < 0xE || v215 - 76 <= 0x3E && !v218)
        && (~*(_DWORD *)v220 & 0x32) == 0
        && (~*(_DWORD *)v220 & 0xC) != 0
        && (*(_DWORD *)(v23 + 84) & 0x400) != 0)
      {
        *(_DWORD *)v220 |= 0xCu;
      }
      double v103 = v211 - v46;
      int v104 = (int)((v211 - v46) * 1000.0);
      if (v104 >= 0) {
        unsigned int v105 = (int)((v211 - v46) * 1000.0);
      }
      else {
        unsigned int v105 = -v104;
      }
      int v106 = *(_DWORD *)&v220[92];
      if (v105 >= 0x7D0)
      {
        int v106 = *(_DWORD *)&v220[92] + v104;
        *(_DWORD *)&v220[92] += v104;
      }
      if (v106 < 0) {
        int v106 = -v106;
      }
      if (v106 >= 0x1F4) {
        *(_DWORD *)v220 |= 0x400u;
      }
      double v107 = fabs(v103);
      float v108 = v107 * dbl_263BB2AD0[*(unsigned char *)(*((void *)this + 2) + 32) == 0];
      *(float *)&v220[88] = *(float *)&v220[88] + v108;
      float v109 = v107 * *(float *)(v23 + 56);
      *(float *)&v220[76] = *(float *)&v220[76] + v109;
      double v110 = *(float *)(v23 + 32);
      *(double *)&v220[68] = *(double *)&v220[68] + v110 * 299792458.0 * v103;
      double v111 = 1.0 / (1.0 - v110);
      double v112 = v103 * v111;
      double SubBitAndEpochTime = v50 + v103 * v111;
      double v240 = SubBitAndEpochTime;
      if (v223[0] < 0x8Bu)
      {
        if ((v223[0] > 0x4Bu || v223[0] && v223[0] - 66 <= 0xFFFFFFDE)
          && v224 == 3
          && (v220[0] & 0x10) != 0)
        {
          unsigned int MsPerSecFrame = BlueFin::GlSignalId::GetMsPerSecFrame((BlueFin::GlSignalId *)v223);
          double v116 = fmod(SubBitAndEpochTime, (double)((8389 * (MsPerSecFrame >> 3)) >> 20));
          if (v116 < 0.0) {
            double v116 = v116
          }
                 + (double)((8389
                           * (BlueFin::GlSignalId::GetMsPerSecFrame((BlueFin::GlSignalId *)v223) >> 3)) >> 20);
          double SubBitAndEpochTime = v116 + 604800.0;
          goto LABEL_192;
        }
      }
      else if (v223[0] <= 0xAEu && (v220[0] & 0x30) == 0x10)
      {
        double v114 = fmod(v50 + v103 * v111, 0.1);
        if (v114 < 0.0) {
          double v114 = v114 + 0.1;
        }
        double SubBitAndEpochTime = v114 + 604800.0;
LABEL_192:
        double v240 = SubBitAndEpochTime;
      }
      if (v49 == -1) {
        goto LABEL_199;
      }
      if (v49 >= 0xA4CF69) {
        goto LABEL_197;
      }
      if (SubBitAndEpochTime < 97199.0)
      {
        if (v49 < 0xA4C798) {
          goto LABEL_199;
        }
LABEL_197:
        if (SubBitAndEpochTime > 97201.0) {
          goto LABEL_199;
        }
      }
      double v240 = v112;
      *(_DWORD *)v220 &= 0xFFFFFFCF;
      double SubBitAndEpochTime = v112;
LABEL_199:
      if (v112 * 1000.0 > 0.0)
      {
        double v117 = 0.5;
LABEL_204:
        unsigned int v118 = (int)(v112 * 1000.0 + v117);
        goto LABEL_205;
      }
      if (v112 * 1000.0 < 0.0)
      {
        double v117 = -0.5;
        goto LABEL_204;
      }
      unsigned int v118 = 0;
LABEL_205:
      *(int32x2_t *)&v220[28] = vadd_s32(*(int32x2_t *)&v220[28], vdup_n_s32(v118));
      int v119 = *(_DWORD *)(v23 + 140);
      if (v119 <= 0xFu && ((1 << v119) & 0x8300) != 0)
      {
        *(_DWORD *)&v220[28] = 0;
        *(_DWORD *)v220 &= ~0x100u;
      }
      if (SubBitAndEpochTime >= 0.0)
      {
        *(double *)&v220[44] = SubBitAndEpochTime;
        if (v119 == 16 || v119 == 14)
        {
          double SubBitAndEpochTime = floor(v46) + SubBitAndEpochTime;
          *(double *)&v220[44] = SubBitAndEpochTime;
        }
      }
      else
      {
        double SubBitAndEpochTime = BlueFin::GlSystemTime::getSubBitAndEpochTime((BlueFin::GlSystemTime *)&v240, (const BlueFin::GlSignalId *)v223, 1u);
        *(double *)&v220[44] = SubBitAndEpochTime;
        if (v223[0] - 52 >= 0xE) {
          unsigned int v120 = *(_DWORD *)v220 & 0xFFFFFFCF;
        }
        else {
          unsigned int v120 = *(_DWORD *)v220;
        }
        *(_DWORD *)uint64_t v220 = v120 & 0xFFFFFFDF;
      }
      if (!v223[0]) {
        goto LABEL_228;
      }
      if (v223[0] < 0x21u) {
        goto LABEL_220;
      }
      if (v223[0] >= 0x42u)
      {
        if (v223[0] > 0xBCu) {
          goto LABEL_228;
        }
LABEL_220:
        if (SubBitAndEpochTime >= 604800.0)
        {
          double v121 = SubBitAndEpochTime + -604800.0;
LABEL_222:
          *(double *)&v220[44] = v121;
          goto LABEL_228;
        }
        goto LABEL_228;
      }
      if (v223[0] >= 0x34u)
      {
        if (SubBitAndEpochTime >= 86400.0)
        {
          double SubBitAndEpochTime = SubBitAndEpochTime + -86400.0;
          *(double *)&v220[44] = SubBitAndEpochTime;
        }
        if ((v220[0] & 0x30) == 0x10)
        {
          double v121 = fmod(SubBitAndEpochTime, 30.0);
          goto LABEL_222;
        }
      }
LABEL_228:
      if ((*(unsigned char *)(v23 + 84) & 0x40) == 0)
      {
        if (v104)
        {
          if (((*(uint64_t (**)(void))(**((void **)this + 3) + 48))(*((void *)this + 3)) & 1) == 0)
          {
            double v240 = COERCE_DOUBLE(&off_270EBF450);
            LOBYTE(v24BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
            int v242 = -1;
            __int16 v243 = 575;
            uint64_t v244 = 0;
            long long v246 = xmmword_263BABE60;
            int v245 = 0;
            int v247 = 2139095039;
            uint64_t v248 = 0;
            int v249 = 2139095039;
            __int16 v250 = 0;
            uint64_t v251 = 0x7FEFFFFFFFFFFFFFLL;
            int v252 = -1;
            __int16 v253 = -1;
            uint64_t v255 = 0;
            uint64_t v256 = 0;
            uint64_t v254 = 0;
            int v257 = 0;
            uint64_t v122 = *((void *)this + 2);
            HIDWORD(v26BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
            if (!(*(unsigned int (**)(uint64_t, BlueFin::GlSignalId *, double *, char *, void, void, double, double, double))(*(void *)v122 + 24))(v122, v24, &v240, (char *)&v260 + 4, 0, 0, (double)a2, 0.0, 0.0)|| *((float *)&v246 + 2) >= 0.000000016|| v105 > 0x63|| vabds_f32(*((float *)&v246 + 1), *(float *)(v23 + 32)) >= 0.0000001)
            {
              *(_DWORD *)v220 &= 0xFFFFEFD5;
            }
          }
        }
      }
      int v123 = *(_DWORD *)(v23 + 140) - 10;
      if v123 < 8 && ((0xDFu >> v123))
      {
        *(_DWORD *)&v221[28] = dword_263BB2B48[v123];
        char v222 = *(unsigned char *)(v23 + 144);
      }
      else
      {
        *(_DWORD *)&v221[28] = 0;
      }
      if (*(float *)&v220[88] < 0.0)
      {
        long long v198 = "otMeSigMeas.m_fDopplerUncPpu >= 0.0";
        DeviceFaultNotify("glme_msmtholder.cpp", 116, "MsmtsCompleteInit", (char)"otMeSigMeas.m_fDopplerUncPpu >= 0.0");
        int v199 = "glme_msmtholder.cpp";
        int v200 = 116;
        goto LABEL_372;
      }
      if (*(float *)&v220[76] < 0.0)
      {
        long long v198 = "otMeSigMeas.m_fRcvdSysTimeUncS >= 0.0";
        DeviceFaultNotify("glme_msmtholder.cpp", 117, "MsmtsCompleteInit", (char)"otMeSigMeas.m_fRcvdSysTimeUncS >= 0.0");
        int v199 = "glme_msmtholder.cpp";
        int v200 = 117;
        goto LABEL_372;
      }
      if (*(float *)&v220[80] < 0.0)
      {
        long long v198 = "otMeSigMeas.m_fAccPhaseUncM >= 0.0";
        DeviceFaultNotify("glme_msmtholder.cpp", 118, "MsmtsCompleteInit", (char)"otMeSigMeas.m_fAccPhaseUncM >= 0.0");
        int v199 = "glme_msmtholder.cpp";
        int v200 = 118;
        goto LABEL_372;
      }
      int v124 = *(_DWORD *)&v220[92];
      uint64_t v125 = BlueFin::GlSignalIdArray::Get(*((void *)this + 15), (uint64_t)v223);
      uint64_t v126 = v125;
      if (v124 <= a3)
      {
        if ((v220[0] & 0x30) == 0x30)
        {
          if ((*(unsigned char *)(v125 + 86) & 0x10) != 0
            && (((unint64_t)*(unsigned int *)&v231[((unint64_t)v223[0] >> 3) & 0x1C] >> (v223[0] & 0x1F)) & 1) != 0)
          {
            BlueFin::GlSetBase::Remove((uint64_t)&v231, v223[0]);
          }
        }
        else if ((v220[0] & 0x30) == 0 && (*(unsigned char *)(v125 + 86) & 0x10) != 0 && *(float *)(v125 + 40) < 30.0)
        {
          *(_DWORD *)&v231[((unint64_t)v223[0] >> 3) & 0x1C] |= 1 << v223[0];
        }
        uint64_t v128 = *((void *)this + 2204);
        uint64_t v129 = v128 + 144 * v19;
        if ((char *)v129 != &v215)
        {
          *(unsigned char *)uint64_t v129 = v215;
          *(_DWORD *)(v129 + 4) = v218;
          *(_WORD *)(v129 + 8) = v219;
        }
        uint64_t v130 = v128 + 144 * v19;
        *(_OWORD *)(v130 + 12) = *(_OWORD *)v220;
        long long v131 = *(_OWORD *)&v220[16];
        long long v132 = *(_OWORD *)&v220[32];
        long long v133 = *(_OWORD *)&v220[48];
        *(_OWORD *)(v130 + 76) = *(_OWORD *)&v220[64];
        *(_OWORD *)(v130 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v133;
        *(_OWORD *)(v130 + 44) = v132;
        *(_OWORD *)(v130 + 28) = v131;
        long long v134 = *(_OWORD *)&v220[80];
        long long v135 = *(_OWORD *)v221;
        long long v136 = *(_OWORD *)&v221[16];
        *(unsigned char *)(v130 + 14BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v222;
        *(_OWORD *)(v130 + 124) = v136;
        *(_OWORD *)(v130 + 108) = v135;
        *(_OWORD *)(v130 + 92) = v134;
        int v137 = *(_DWORD *)(v126 + 140);
        if (v137 == 14 || v137 == 16)
        {
          uint64_t v138 = *((void *)this + 2204);
          *(_DWORD *)(v138 + 144 * v19 + 12) = 4210688;
        }
        else
        {
          uint64_t v138 = *((void *)this + 2204);
        }
        uint64_t v139 = v138 + 144 * v19;
        *(unsigned char *)(v139 + 18) = 0;
        BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)&v240, *(unsigned __int8 *)(v139 + 16), *(_DWORD *)(v139 + 4));
        unsigned int v140 = LOBYTE(v240) + 100 * BYTE4(v240);
        uint64_t v141 = v140 >> 5;
        unint64_t v142 = *(unsigned int *)&v234[4 * v141];
        char v143 = v140 & 0x1F;
        if (((v142 >> v143) & 1) == 0)
        {
          *(_DWORD *)&v234[4 * v141] = (1 << v143) | v142;
          *(_DWORD *)&v237[4 * ((__int16)v219 >> 5)] |= 1 << v219;
          if (v19 >= 0x64)
          {
            long long v198 = "ucChnIdx < GL_CHANNELS";
            DeviceFaultNotify("glme_msmtholder.cpp", 177, "MsmtsCompleteInit", (char)"ucChnIdx < GL_CHANNELS");
            int v199 = "glme_msmtholder.cpp";
            int v200 = 177;
            goto LABEL_372;
          }
          ++v19;
        }
        __int16 v144 = v219;
        if (((unint64_t)*(unsigned int *)(*(void *)v210 + 4 * ((__int16)v219 >> 5)) >> (v219 & 0x1F)))
        {
          uint64_t v145 = 0;
          uint64_t v146 = *((void *)this + 400);
          unsigned int v147 = (double *)(v146 + 24);
          while (1)
          {
            __int16 v148 = (unsigned __int8 *)(v146 + 184 * v145);
            if (*v148 == v215 && *((_DWORD *)v148 + 1) == v218) {
              break;
            }
            ++v145;
            v147 += 23;
            if (v145 == 16) {
              goto LABEL_272;
            }
          }
          uint64_t v149 = *(unsigned __int8 *)(v146 + 184 * v145 + 16);
          if (v149)
          {
            double v150 = *(double *)&v220[44];
            do
            {
              *unsigned int v147 = v150 - *v147;
              v147 += 5;
              --v149;
            }
            while (v149);
          }
          BlueFin::GlSetBase::Remove((uint64_t)v210, v144);
        }
LABEL_272:
        int v127 = **(void (***)(void))BlueFin::GlSignalIdArray::Get(*((void *)this + 15), (uint64_t)v223);
      }
      else
      {
        int v127 = **(void (***)(void))v125;
      }
      v127();
      BlueFin::GlBigArray::Remove(*((void *)this + 15) + 1152, (unsigned __int16)v225);
      BlueFin::GlSetBase::Remove((uint64_t)this + 32, (__int16)v225);
      BlueFin::GlSetIterator::operator++(&v226);
      if (v227 == v226) {
        goto LABEL_2;
      }
    }
    *(_DWORD *)(v23 + 84) &= 0xFFFFFF9F;
LABEL_33:
    unsigned int v26 = *(_DWORD *)v220 | 0x8000;
    goto LABEL_35;
  }
LABEL_2:
  if (*(unsigned __int16 *)(*((void *)this + 15) + 1186) + 1 != *(unsigned __int16 *)(*((void *)this + 15)
                                                                                         + 1184))
  {
    long long v198 = "m_otMsmtArray.IsEmpty()";
    DeviceFaultNotify("glme_msmtholder.cpp", 207, "MsmtsCompleteInit", (char)"m_otMsmtArray.IsEmpty()");
    int v199 = "glme_msmtholder.cpp";
    int v200 = 207;
    goto LABEL_372;
  }
  *char v209 = a2;
  if (*(_DWORD *)v231) {
    goto LABEL_4;
  }
  if (v232 < 2uLL) {
    goto LABEL_361;
  }
  if (*((_DWORD *)v231 + 1))
  {
LABEL_4:
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, v214, 8u, (const void **)&v231);
    uint64_t v7 = __src;
    uint64_t v8 = v213;
    v5[24] = -1;
    *((_DWORD *)v5 + 7) = 0;
    *((_DWORD *)v5 + 8) = 0;
    char v215 = v8;
    memcpy(&v219, v7, 4 * v8);
    unsigned __int16 v217 = 0;
    char v216 = 0;
    int v218 = v219;
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v215);
    while (v216 != v215)
    {
      int v9 = (BlueFin::GlMeMsmtMgr *)*((void *)this + 1);
      LOBYTE(v24BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v217;
      HIDWORD(v24BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
      LOWORD(v24BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 575;
      if ((v217 + 67) >= 0x44u)
      {
        uint64_t v10 = BlueFin::GlSvId::s_aucSvId2gnss[v217];
        if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v10] == 255) {
          HIDWORD(v24BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = -1;
        }
        else {
          LOWORD(v24BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = BlueFin::GlSignalId::s_ausGnss2signalId[v10]
        }
                       + v217
                       - BlueFin::GlSvId::s_aucGnss2minSvId[v10];
      }
      uint64_t v11 = BlueFin::GlMeMsmtMgr::GetMsmtSlotPtr(v9, (const BlueFin::GlSignalId *)&v240, 1, 1);
      if (v11)
      {
        if ((*(unsigned char *)(v11 + 86) & 0x10) != 0)
        {
          float v12 = *(float *)(v11 + 80);
          if (*((float *)v5 + 5) < v12)
          {
            *((float *)v5 + 5) = v12;
            unsigned int v13 = *(unsigned __int8 *)(v11 + 100);
            if (!*(unsigned char *)(v11 + 100) || (v13 >= 0x21 ? (BOOL v14 = v13 - 52 >= 0xE) : (BOOL v14 = 0), v14))
            {
              long long v198 = "IS_GPS_SVID(*pMeDspMeas->otSignalId.GetSvId()) INC_GLO(|| IS_GLONASS_SVID(*pMeDspMeas->otSignalId.GetSvId()))";
              DeviceFaultNotify("glme_msmtholder.cpp", 299, "PickBestSvId4FrameSyncOnly", (char)"IS_GPS_SVID(*pMeDspMeas->otSignalId.GetSvId()) INC_GLO(|| IS_GLONASS_SVID(*pMeDspMeas->otSignalId.GetSvId()))");
              int v199 = "glme_msmtholder.cpp";
              int v200 = 299;
              goto LABEL_372;
            }
            v5[24] = v13;
            *(void *)(v5 + 28) = *(void *)(v11 + 72);
          }
        }
      }
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v215);
    }
    int v15 = (double *)(*((void *)this + 2204) + 56);
    unsigned __int16 v16 = 6000;
    uint64_t v17 = 100;
    do
    {
      int v18 = *((unsigned __int8 *)v15 - 56);
      if ((v18 - 1) > 0xBB) {
        break;
      }
      if (v18 == v5[24])
      {
        if ((v18 - 52) < 0xE) {
          unsigned __int16 v16 = 2000;
        }
        *int v15 = *v15 + (double)((*v209 - *((_DWORD *)v5 + 8)) % v16 + *((_DWORD *)v5 + 7)) / 1000.0;
        *((_DWORD *)v15 - 11) |= 0x10u;
      }
      v15 += 18;
      --v17;
    }
    while (v17);
  }
  else
  {
    uint64_t v193 = 2;
    while (v232 != v193)
    {
      if (*(_DWORD *)&v231[4 * v193++])
      {
        if (v193 - 1 < (unint64_t)v232) {
          goto LABEL_4;
        }
        break;
      }
    }
  }
LABEL_361:
  char v215 = v5[52];
  memcpy(&v219, *((const void **)this + 2211), 4 * v215);
  unsigned __int16 v217 = 0;
  char v216 = 0;
  int v218 = v219;
  uint64_t result = BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v215);
  if (v216 != v215)
  {
    while (v217 <= 0x23EuLL)
    {
      uint64_t v196 = 0;
      uint64_t v197 = *((void *)this + 400);
      while (*((unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v217) != *(unsigned __int8 *)(v197 + v196)
           || *(_DWORD *)(v197 + v196 + 4) != *((char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v217 + 1))
      {
        v196 += 184;
        if (v196 == 2944) {
          goto LABEL_369;
        }
      }
      *(unsigned char *)(v197 + v196 + 16) = 0;
LABEL_369:
      uint64_t result = BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v215);
      if (v216 == v215) {
        return result;
      }
    }
LABEL_373:
    long long v198 = "usIndex < NUM_SIGNAL_IDS";
    DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
    int v199 = "glsignalid.h";
    int v200 = 577;
LABEL_372:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v199, v200, v198);
  }
  return result;
}

uint64_t BlueFin::GlMeSlots::GpsFrameMgr(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 1504);
  int v3 = *a2;
  BOOL v4 = v2 != v3 || v3 == 0;
  if (v4 || v2 >= 0x21 && (v2 < 0x42 || v2 >= 0x4C && (v2 + 67) <= 0xF1u))
  {
    DeviceFaultNotify("glme_msmtmgr.cpp", 89, "GpsFrameMgr", (char)"(m_otSignalId.GetSvId() == rotSvId) && ((IS_GPS_SVID(*rotSvId)) INC_QZS(|| IS_QZSS_SVID(*rotSvId)) INC_NIC(|| IS_NAVIC_SVID(*rotSvId)))");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_msmtmgr.cpp", 89, "(m_otSignalId.GetSvId() == rotSvId) && ((IS_GPS_SVID(*rotSvId)) INC_QZS(|| IS_QZSS_SVID(*rotSvId)) INC_NIC(|| IS_NAVIC_SVID(*rotSvId)))");
  }
  return a1 + 192;
}

uint64_t BlueFin::GlMeFrameMgr::GetTowMeas(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  *(unsigned char *)a2 = *(unsigned char *)(a1 + 408);
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 4) = 0;
  if (*(unsigned char *)a1 == 1)
  {
    int v3 = 6 * *(_DWORD *)(a1 + 48);
    unsigned int v4 = *(unsigned __int8 *)(a1 + 5);
    if (v4 >= 3)
    {
      int v5 = *(_DWORD *)(a1 + 52);
      int v8 = *(_DWORD *)(a1 + 60);
    }
    else
    {
      int v5 = *(_DWORD *)(a1 + 52);
      unsigned int v6 = *(_DWORD *)(a1 + 56);
      if ((int)(v6 / 0x3E8 - *(_DWORD *)(a1 + 44)) >= 0) {
        unsigned int v7 = v6 / 0x3E8 - *(_DWORD *)(a1 + 44);
      }
      else {
        unsigned int v7 = *(_DWORD *)(a1 + 44) - v6 / 0x3E8;
      }
      int v8 = *(_DWORD *)(a1 + 60);
      if ((v5 - v8) >> 4 <= 0x176 && !*(unsigned char *)(a1 + 6))
      {
        *(unsigned char *)(a1 + 5) = v4 + 1;
        *(unsigned char *)(a1 + 6) = 1;
      }
      uint64_t v9 = *(void *)(a1 + 384);
      if (*(float *)(v9 + 336) < 60.0)
      {
        int v10 = (int)*(double *)(v9 + 328) - v3;
        uint64_t v11 = -274877907 * (int)(*(_DWORD *)(v9 + 356) - v6);
        int v12 = (v11 >> 38) + ((unint64_t)v11 >> 63);
        int v13 = v10 - 604800;
        int v14 = v10 + 604800;
        if (v10 >= -302400) {
          int v14 = v10;
        }
        if (v10 <= 302400) {
          int v13 = v14;
        }
        int v15 = v13 + v12;
        if (v15 < 0) {
          int v15 = -v15;
        }
        if (v15 >= 0x65)
        {
          if (v7 < 0x1F) {
            return 0;
          }
          goto LABEL_25;
        }
        if (v7 >= 0x3D)
        {
LABEL_25:
          BlueFin::GlMeFrameMgr::SetState(a1, 0);
          return 0;
        }
      }
    }
    *(_DWORD *)(a2 + 8) = v3;
    *(_DWORD *)(a2 + 12) = v8;
    *(_DWORD *)(a2 + 4) = v5;
    if (*(unsigned char *)(a1 + 1) == 1) {
      return 2;
    }
    else {
      return 1;
    }
  }
  return v2;
}

uint64_t BlueFin::GlMeStateProvider::IsLowSignalStrengthMode(BlueFin::GlMeStateProvider *this)
{
  return *((unsigned __int8 *)this + 19);
}

uint64_t BlueFin::GlMeDSPDataBits::CheckLowTransitionCount(uint64_t this, uint64_t a2, int8x8_t a3)
{
  uint64_t v3 = *(unsigned __int8 *)(this + 9);
  if (v3 <= 0x33)
  {
    if (v3 > 0x20) {
      return this;
    }
    unsigned int v4 = 100;
  }
  else if (v3 >= 0x42)
  {
    unsigned int v4 = 100;
  }
  else
  {
    unsigned int v4 = 200;
  }
  unsigned int v5 = *(unsigned __int16 *)(this + 16);
  if (v5 >= v4 >> 1)
  {
    if ((__int16)v5 < 1)
    {
      signed int v6 = 0;
    }
    else
    {
      signed int v6 = 0;
      unsigned int v7 = (int *)(this + 44);
      int v8 = *(_DWORD *)(this + 44) >> 31;
      unsigned int v9 = *(unsigned __int16 *)(this + 16);
      do
      {
        int v11 = *v7++;
        int v10 = v11;
        char v12 = 32 - v9;
        if (v9 > 0x20) {
          char v12 = 0;
        }
        unsigned int v13 = v10 << v12;
        int v14 = 1 << -(char)v9;
        if ((v13 & v14) != 0) {
          int v15 = v13 | (v14 - 1);
        }
        else {
          int v15 = v13 & -v14;
        }
        if ((v9 & 0xFFE0) != 0) {
          int v15 = v13;
        }
        a3.i32[0] = v15 ^ (v15 >> 31) ^ ((v15 ^ (v15 >> 31)) >> 1);
        a3 = vcnt_s8(a3);
        a3.i16[0] = vaddlv_u8((uint8x8_t)a3);
        v6 += (v8 ^ (v13 >> 31)) + a3.i32[0];
        int v8 = v13 & 1;
        BOOL v16 = v9 >= 0x20;
        v9 -= 32;
      }
      while (v9 != 0 && v16);
    }
    unsigned int v17 = v6 + 2;
    if ((int)a2 >= 32) {
      unsigned int v17 = v6;
    }
    if (v17 >= 6)
    {
      if (v6 >= (int)(v5 >> 4)) {
        return this;
      }
      LOBYTE(v18) = 15;
    }
    else
    {
      unint64_t v18 = 0xE0E0D0D0C0CuLL >> (8 * v17);
    }
    if ((*(_DWORD *)(this + 12) & 2) != 0) {
      uint64_t v19 = 70;
    }
    else {
      uint64_t v19 = 80;
    }
    if ((v3 - 52) > 0xD) {
      return GlCustomLog(v18, "LowTransitionCount sv%02d C/No:%hd %cLL.%c %s %d/%d/%d 0x%08X:%08X\n", v3, a2);
    }
    else {
      return GlCustomLog(v18, "LowTransitionCount sv%02d C/No:%hd %cLL.%c %s %d/%d/%d 0x%08X:%08X:%08X\n", v3, a2, v19);
    }
  }
  return this;
}

uint64_t BlueFin::GlPeLtoMgr::deserializeLtoUtc(BlueFin::GlPeLtoMgr *this, BlueFin::GlSysLogEntry *a2)
{
  unsigned int v3 = *((_DWORD *)this + 6615);
  char v12 = &unk_270EC1500;
  unsigned int v13 = 7;
  __n128 v14 = 0uLL;
  memset(v15, 0, 14);
  uint64_t result = BlueFin::GlPeLtoUtcDataInterface::Deserialize((BlueFin::GlPeLtoUtcDataInterface *)&v12, a2);
  if (result)
  {
    if (v13 > 6) {
      unsigned int v5 = "INV";
    }
    else {
      unsigned int v5 = off_2655DF758[v13];
    }
    GlCustomLog(14, "LtoMgr: read LTO UTC (%s) from NVMEM!\n", v5);
    switch(v13)
    {
      case 5u:
        goto LABEL_8;
      case 4u:
        BlueFin::GlPeLtoMgr::UpdateBdsUtcModel((uint64_t)this, WORD2(v15[1]), (uint64_t)v15);
        return 1;
      case 0u:
LABEL_8:
        unsigned int v9 = &off_270EBC600;
        double v6 = fmod((double)(v3 % 0x93A80), 1.0);
        if (v6 >= 1.0)
        {
          DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
        }
        double v7 = v6 * 4294967300.0 + 0.5;
        unsigned int v8 = v7;
        if (v7 >= 4294967300.0) {
          unsigned int v8 = -1;
        }
        unsigned int v10 = v8;
        unsigned int v11 = v3;
        unsigned int v9 = &off_270EBC600;
        BlueFin::GlPeLtoMgr::UpdateUtcModel((uint64_t)this, &v14, (uint64_t)&v9, 0);
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t BlueFin::GlPeLtoUtcDataInterface::Deserialize(BlueFin::GlPeLtoUtcDataInterface *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 122 || *((unsigned char *)a2 + 12) != 1) {
    return 0;
  }
  int v6 = BlueFin::GlImplGnss::m_aucImplGnssTable[BlueFin::GlSysLogEntry::GetU8(a2)];
  *((_DWORD *)this + 2) = v6;
  if (v6 != 5)
  {
    if (v6 == 4)
    {
      *((_DWORD *)this + 7) = BlueFin::GlSysLogEntry::GetS32(a2);
      *((_DWORD *)this + 8) = BlueFin::GlSysLogEntry::GetS32(a2);
      *((unsigned char *)this + 36) = BlueFin::GlSysLogEntry::GetS8(a2);
      *((unsigned char *)this + 37) = BlueFin::GlSysLogEntry::GetU8(a2);
      *((unsigned char *)this + 38) = BlueFin::GlSysLogEntry::GetU8(a2);
      *((unsigned char *)this + 39) = BlueFin::GlSysLogEntry::GetS8(a2);
      *((_WORD *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlSysLogEntry::GetU16(a2);
      return 1;
    }
    if (v6) {
      return 0;
    }
  }
  *((_DWORD *)this + 3) = BlueFin::GlSysLogEntry::GetS32(a2);
  *((_DWORD *)this + 4) = BlueFin::GlSysLogEntry::GetS32(a2);
  *((unsigned char *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlSysLogEntry::GetU8(a2);
  *((unsigned char *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = BlueFin::GlSysLogEntry::GetU8(a2);
  *((unsigned char *)this + 22) = BlueFin::GlSysLogEntry::GetS8(a2);
  *((unsigned char *)this + 23) = BlueFin::GlSysLogEntry::GetU8(a2);
  *((unsigned char *)this + 24) = BlueFin::GlSysLogEntry::GetS8(a2);
  *((unsigned char *)this + 25) = BlueFin::GlSysLogEntry::GetS8(a2);
  return 1;
}

double BlueFin::GlPeLtoMgr::UpdateBdsUtcModel(uint64_t a1, int a2, uint64_t a3)
{
  __int16 v4 = a2;
  uint64_t v6 = a1 + 19992;
  BlueFin::GlPeTimeManager::SetBdsUtcModel(*(BlueFin::GlPeTimeManager **)(a1 + 88), 3, a2, (uint64_t *)a3, 0);
  double result = *(double *)a3;
  *(void *)(a1 + 19984) = *(void *)a3;
  *(_DWORD *)uint64_t v6 = *(_DWORD *)(a3 + 8);
  *(_WORD *)(v6 + 4) = v4;
  *(_DWORD *)(v6 + 6472) |= 4u;
  return result;
}

uint64_t BlueFin::GlPeTimeManager::SetBdsUtcModel(BlueFin::GlPeTimeManager *a1, int a2, int a3, uint64_t *a4, int a5)
{
  int v15 = &unk_270EC93F8;
  uint64_t v18 = 0;
  int v19 = 0;
  __int16 v16 = a3;
  int v17 = a2;
  if (&v18 != a4)
  {
    uint64_t v18 = *a4;
    int v19 = *((_DWORD *)a4 + 2);
  }
  BlueFin::GlPeBdsTimeMgr::SetUtcModel((uint64_t)a1 + 2144, (uint64_t)&v15);
  int v10 = *((_DWORD *)a1 + 539);
  *((_DWORD *)a1 + 539) = v10 & 0xFFFFFF9F;
  if ((v10 & 0x20) != 0)
  {
    BlueFin::GlPeTimeManager::updateConversionTable(a1);
    if ((a5 & 1) == 0 && BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
      (*((void (**)(void **, void, void))v15 + 3))(&v15, 0, 0);
    }
    uint64_t v11 = 89;
  }
  else
  {
    uint64_t v11 = 78;
  }
  int v12 = *((_DWORD *)a1 + 642);
  if (v12 == -7200001) {
    int v12 = 0;
  }
  uint64_t v13 = 78;
  if (a5) {
    uint64_t v13 = 89;
  }
  return GlCustomLog(15, "GlPeTimeManager::SetBdsUtcModel(%u): Updated:%c  FromNvMem:%c  Source:%s  BdsWeek:%d  A0(ns):%.1lf  A1(ns/s):%.1lf  DeltaTls:%d  DeltaTlsf:%d  DN:%d  WNlsf:%d\n", v12, v11, v13, BlueFin::GlPeTimeManager::m_acNavDataSourceImage[a2], a3, (double)*((int *)a4 + 1) * 9.31322575e-10 * 1000000000.0, (double)*(int *)a4 * 8.8817842e-16 * 1000000000.0, *((char *)a4 + 8), *((char *)a4 + 11), *((unsigned __int8 *)a4 + 10), *((unsigned __int8 *)a4 + 9));
}

uint64_t BlueFin::GlPeBdsTimeMgr::SetUtcModel(uint64_t result, uint64_t a2)
{
  double v2 = (double)*(int *)(a2 + 20) * 9.31322575e-10;
  double v3 = (double)*(int *)(a2 + 16) * 8.8817842e-16;
  int v4 = *(_DWORD *)(result + 8);
  if ((v4 & 0x20) == 0 || v2 != *(double *)(result + 56) || v3 != *(double *)(result + 64))
  {
    *(_DWORD *)(result + 52) = *(_DWORD *)(a2 + 12);
    *(_WORD *)(result + 44) = *(_WORD *)(a2 + 8);
    *(double *)(result + 56) = v2;
    *(double *)(result + 64) = v3;
    v4 |= 0x20u;
    int v5 = *(_DWORD *)(result + 12) | 0x20;
    *(_DWORD *)(result + 8) = v4;
    *(_DWORD *)(result + 12) = v5;
  }
  int v6 = *(unsigned __int8 *)(a2 + 24);
  int v7 = *(unsigned __int8 *)(a2 + 27);
  BOOL v8 = v6 != *(unsigned __int8 *)(result + 24)
    || v7 != *(unsigned __int8 *)(result + 27)
    || *(unsigned __int8 *)(a2 + 26) != *(unsigned __int8 *)(result + 26)
    || *(unsigned __int8 *)(a2 + 25) != *(unsigned __int8 *)(result + 25);
  if (*(unsigned char *)(a2 + 24))
  {
    if (*(unsigned char *)(a2 + 27))
    {
      char v9 = *(unsigned char *)(a2 + 26);
      if (v9)
      {
        if ((v4 & 0x40) == 0) {
          BOOL v8 = 1;
        }
        if (v8)
        {
          char v10 = *(unsigned char *)(a2 + 25);
          if (v10)
          {
            *(unsigned char *)(result + 24) = v6;
            *(unsigned char *)(result + 27) = v7;
            *(unsigned char *)(result + 26) = v9;
            *(unsigned char *)(result + 25) = v10;
            *(_WORD *)(result + 28) = *(_WORD *)(a2 + 8);
            int v11 = *(_DWORD *)(result + 12) | 0x40;
            *(_DWORD *)(result + 8) = v4 | 0x40;
            *(_DWORD *)(result + 12) = v11;
          }
        }
      }
    }
  }
  return result;
}

__n128 BlueFin::GlPeLtoMgr::UpdateUtcModel(uint64_t a1, __n128 *a2, uint64_t a3, int a4)
{
  char v4 = a4;
  if (a4) {
    int v7 = 2;
  }
  else {
    int v7 = 3;
  }
  BOOL v8 = *(BlueFin::GlPeTimeManager **)(a1 + 88);
  char v10 = &unk_270EC96B0;
  int v11 = v7;
  char v12 = 0;
  uint64_t v13 = &off_270EBC600;
  uint64_t v14 = *(void *)(a3 + 8);
  __n128 v15 = *a2;
  BlueFin::GlPeTimeManager::SetGpsUtcModel(v8, (const BlueFin::GlPeGpsUtcModel *)&v10);
  if ((v4 & 1) == 0)
  {
    *(_DWORD *)(a1 + 26464) |= 1u;
    __n128 result = *a2;
    *(__n128 *)(a1 + 19968) = *a2;
  }
  return result;
}

uint64_t BlueFin::GlPeTimeManager::SetGpsUtcModel(BlueFin::GlPeTimeManager *this, const BlueFin::GlPeGpsUtcModel *a2)
{
  uint64_t result = BlueFin::GlPeGpsTimeMgr::updateModelIfBetter((BlueFin::GlPeTimeManager *)((char *)this + 64), a2, 0);
  int v4 = *((unsigned __int8 *)this + 176);
  *((unsigned char *)this + 176) = 0;
  if (v4)
  {
    return BlueFin::GlPeTimeManager::UpdateLeapSecFromGpsUtcModel(this);
  }
  return result;
}

uint64_t BlueFin::GlPeGpsTimeMgr::updateModelIfBetter(BlueFin::GlPeGpsTimeMgr *this, const BlueFin::GlPeGpsUtcModel *a2, const BlueFin::GlGpsTime *a3)
{
  unsigned int v31 = &unk_270EC96B0;
  int v4 = *((_DWORD *)a2 + 2);
  int v32 = v4;
  unsigned __int8 v33 = *((unsigned char *)a2 + 12);
  unsigned int v5 = *((_DWORD *)a2 + 7);
  LODWORD(v35) = *((_DWORD *)a2 + 6);
  HIDWORD(v35) = v5;
  unsigned int v34 = &off_270EBC600;
  long long v36 = *((_OWORD *)a2 + 2);
  if (v5 < 0x93A80)
  {
    if (a3)
    {
      uint64_t v35 = *((void *)a3 + 1);
    }
    else
    {
      __int16 v6 = *((_WORD *)this + 57);
      if (v6)
      {
        int v7 = v6 - BYTE9(v36);
        if (v7 >= 0) {
          __int16 v8 = v7;
        }
        else {
          __int16 v8 = BYTE9(v36) - v6;
        }
        __int16 v9 = v7 + 256;
        if (v7 >= -127) {
          __int16 v9 = v6 - BYTE9(v36);
        }
        if (v7 >= 128) {
          __int16 v10 = v7 - 256;
        }
        else {
          __int16 v10 = v9;
        }
        if (v8 == 128) {
          __int16 v11 = 0;
        }
        else {
          __int16 v11 = v10;
        }
        int v12 = BYTE8(v36) << 12;
        double v13 = fmod((double)v12, 1.0);
        if (v13 < 0.0 || v13 >= 1.0)
        {
          DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
        }
        double v15 = v13 * 4294967300.0 + 0.5;
        unsigned int v16 = v15;
        if (v15 >= 4294967300.0) {
          unsigned int v16 = -1;
        }
        LODWORD(v35) = v16;
        HIDWORD(v35) = v12 + 604800 * (unsigned __int16)(v11 + v6);
      }
    }
  }
  int v17 = *((_DWORD *)this + 18);
  if (!v17 || *((unsigned char *)this + 76) || v4 < v17) {
    goto LABEL_57;
  }
  if (v4 != v17
    || (void)v36 == *((void *)this + 12)
    && BYTE10(v36) == *((unsigned __int8 *)this + 106)
    && __PAIR64__(BYTE9(v36), BYTE8(v36)) == __PAIR64__(*((unsigned __int8 *)this + 105), *((unsigned __int8 *)this + 104))&& __PAIR64__(BYTE12(v36), BYTE11(v36)) == __PAIR64__(*((unsigned __int8 *)this + 108), *((unsigned __int8 *)this + 107))&& BYTE13(v36) == *((unsigned __int8 *)this + 109))
  {
    return 0;
  }
  unsigned int v18 = (*(unsigned int (**)(char *))(*((void *)this + 10) + 32))((char *)this + 80) / 0x93A80;
  unsigned int v19 = ((unsigned int (*)(void))v34[4])(&v34) / 0x93A80;
  if (!((unsigned __int16)v18 | (unsigned __int16)v19)) {
    goto LABEL_57;
  }
  if ((_WORD)v18) {
    LOBYTE(v19) = v18;
  }
  int v20 = v19 - BYTE9(v36);
  if (v20 >= 0) {
    __int16 v21 = v20;
  }
  else {
    __int16 v21 = BYTE9(v36) - v19;
  }
  __int16 v22 = v20 + 256;
  if (v20 >= -127) {
    __int16 v22 = v19 - BYTE9(v36);
  }
  if (v20 >= 128) {
    __int16 v23 = v20 - 256;
  }
  else {
    __int16 v23 = v22;
  }
  if (v21 == 128) {
    __int16 v23 = 0;
  }
  int v24 = v19 - *((unsigned __int8 *)this + 105);
  if (v24 >= 0) {
    LOWORD(v25) = v24;
  }
  else {
    int v25 = -v24;
  }
  __int16 v26 = v24 + 256;
  if (v24 >= -127) {
    __int16 v26 = v24;
  }
  if (v24 >= 128) {
    __int16 v27 = v24 - 256;
  }
  else {
    __int16 v27 = v26;
  }
  if ((unsigned __int16)v25 == 128) {
    __int16 v27 = 0;
  }
  if ((BYTE8(v36) << 12) + 604800 * v23 <= 604800 * v27 + (*((unsigned __int8 *)this + 104) << 12)) {
    return 0;
  }
LABEL_57:
  if ((void **)((char *)this + 64) == &v31)
  {
    int v28 = *((unsigned __int8 *)this + 76);
  }
  else
  {
    *((_DWORD *)this + 18) = v32;
    int v28 = v33;
    *((unsigned char *)this + 76) = v33;
    *((void *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v35;
    *((_OWORD *)this + 6) = v36;
  }
  uint64_t v29 = 1;
  *((unsigned char *)this + 112) = 1;
  if (!v28)
  {
    if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
      (*(void (**)(char *, void, void))(*((void *)this + 8) + 24))((char *)this + 64, 0, 0);
    }
    return 1;
  }
  return v29;
}

void BlueFin::GlPeLtoMgr::UpdateDigest(BlueFin::GlPeLtoMgr *a1)
{
  if ((BlueFin::GlPeLtoMgr::MakeNvMemDataActive(a1, 0) & 1) == 0)
  {
    uint64_t v2 = 0;
    uint64_t v3 = *((void *)a1 + 93);
    do
    {
      bzero(*(void **)(v3 + v2), ((4 * *(unsigned __int8 *)(v3 + v2 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
      v2 += 24;
    }
    while (v2 != 168);
    uint64_t v4 = 0;
    uint64_t v5 = *((void *)a1 + 117);
    do
    {
      bzero(*(void **)(v5 + v4), ((4 * *(unsigned __int8 *)(v5 + v4 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
      v4 += 24;
    }
    while (v4 != 168);
  }
}

uint64_t BlueFin::GlPeLtoMgr::MakeNvMemDataActive(BlueFin::GlPeLtoMgr *this, int a2)
{
  if (*((_OWORD *)this + 100) == 0 || *(_OWORD *)((char *)this + 136) == 0)
  {
    if (!a2) {
      return 0;
    }
  }
  else
  {
    BOOL v3 = *((void *)this + 200) == *((void *)this + 17) && *((void *)this + 201) == *((void *)this + 18);
    if (!v3 && (a2 & 1) == 0) {
      return 0;
    }
  }
  for (uint64_t i = 12; i != 180; i += 24)
  {
    __int16 v6 = (void *)(*((void *)this + 41) + i);
    int v7 = (void *)(*((void *)this + 93) + i);
    BlueFin::GlSetBase::operator=((uint64_t)v7 - 12, (uint64_t)v6 - 12);
    *int v7 = *v6;
  }
  for (uint64_t j = 12; j != 180; j += 24)
  {
    __int16 v9 = (void *)(*((void *)this + 65) + j);
    __int16 v10 = (void *)(*((void *)this + 117) + j);
    BlueFin::GlSetBase::operator=((uint64_t)v10 - 12, (uint64_t)v9 - 12);
    *__int16 v10 = *v9;
  }
  int v11 = *((_DWORD *)this + 409);
  if ((~(_BYTE)v11 & 3) != 0)
  {
    if ((v11 & 2) != 0)
    {
      uint64_t v16 = 0;
      uint64_t v17 = *((void *)this + 117);
      do
      {
        bzero(*(void **)(v17 + v16), ((4 * *(unsigned __int8 *)(v17 + v16 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
        v16 += 24;
      }
      while (v16 != 168);
      BlueFin::GlSetBase::GetULong(*((BlueFin::GlSetBase **)this + 65), 0);
      BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)(*((void *)this + 65) + 48), 0);
      BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)(*((void *)this + 65) + 24), 0);
      BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)(*((void *)this + 65) + 72), 0);
      GlCustomLog(14, "LtoMgr: clearing high residual flags  OrgFlags: G:%08x R:%07x S:%05x Q:%01x\n");
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v13 = *((void *)this + 93);
    do
    {
      bzero(*(void **)(v13 + v12), ((4 * *(unsigned __int8 *)(v13 + v12 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
      v12 += 24;
    }
    while (v12 != 168);
    uint64_t v14 = 0;
    uint64_t v15 = *((void *)this + 117);
    do
    {
      bzero(*(void **)(v15 + v14), ((4 * *(unsigned __int8 *)(v15 + v14 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
      v14 += 24;
    }
    while (v14 != 168);
    BlueFin::GlSetBase::GetULong(*((BlueFin::GlSetBase **)this + 41), 0);
    BlueFin::GlSetBase::GetULong(*((BlueFin::GlSetBase **)this + 65), 0);
    BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)(*((void *)this + 41) + 48), 0);
    BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)(*((void *)this + 65) + 48), 0);
    BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)(*((void *)this + 41) + 24), 0);
    BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)(*((void *)this + 65) + 24), 0);
    BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)(*((void *)this + 41) + 72), 0);
    BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)(*((void *)this + 65) + 72), 0);
    GlCustomLog(14, "LtoMgr: clearing bad SV flags  OrgFlags: G:%08x R:%07x S:%05x Q:%01x\n");
  }
  return 1;
}

uint64_t BlueFin::GlPeLtoReaderBase::processBlock(uint64_t this, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t j = this;
  uint64_t v577 = *MEMORY[0x263EF8340];
  uint64_t v522 = this + 9716;
  v535 = (int *)(this + 8);
  v510 = (void *)(this + 9717);
  v516 = (BlueFin::GlPeRtoReader *)(this + 10832);
  v520 = (unsigned __int8 *)(this + 16);
  v515 = (int *)(this + 10808);
  v506 = (uint64_t *)(this + 10704);
  v505 = (uint64_t *)(this + 10696);
  v504 = (uint64_t *)(this + 10688);
  v503 = (uint64_t *)(this + 10680);
  v509 = (uint64_t *)(this + 10672);
  v533 = (int *)(this + 10544);
  v508 = (_DWORD *)(this + 9776);
  v534 = (_WORD *)(this + 10120);
  v513 = (_DWORD *)(this + 9792);
  v521 = (_WORD *)(this + 9976);
  uint64_t v501 = this + 10272;
  uint64_t v502 = this + 10328;
  v512 = (void *)(this + 10208);
  v514 = (void *)(this + 10264);
  v511 = (_OWORD *)(this + 28);
  v507 = (_OWORD *)(this + 9960);
  v536 = (BlueFin::GlPeLtoReaderBase *)this;
  while (2)
  {
    int v5 = *v535;
    switch(*v535)
    {
      case 0:
        if (*(_DWORD *)(v522 + 24) < 0x1Cu) {
          return this;
        }
        *(_OWORD *)v540 = *v511;
        if (*(_DWORD *)v520 == 14600959 && *(_DWORD *)(j + 24) == 1)
        {
          *(_DWORD *)(j + 9752) = *(_DWORD *)(j + 20);
          _OWORD *v507 = *v511;
          uint64_t v205 = *(void *)(j + 10184);
          if (v205)
          {
            *(_DWORD *)uint64_t v205 = 1;
            *(_OWORD *)(v205 + 4) = *(_OWORD *)v540;
            ***(_DWORD ***)(j + 10768) |= 0x1000u;
          }
          *(_DWORD *)(j + 9744) = 28;
          float v206 = v535;
        }
        else
        {
          GlCustomLog(11, "%s error code %d.%d (%s)\n", "LTO", 0, 2225, "header");
          BlueFin::GlSetBase::Remove(*(void *)(j + 10768), 11);
          *(_DWORD *)(j + 8) = 65;
          v318 = *(_DWORD **)(j + 10792);
          float v206 = v515;
          if (v318)
          {
            _DWORD *v318 = 1;
            float v206 = v515;
          }
        }
        *float v206 = 1;
        long long v561 = 0u;
        long long v562 = 0u;
        long long v559 = 0u;
        long long v560 = 0u;
        memset(v558, 0, sizeof(v558));
        unsigned int v320 = BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)v558, (char *)0x80, "LTO file id=0x", a4);
        if (v320 <= 0x7E)
        {
          unint64_t v345 = 0;
          do
          {
            int v346 = BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)((char *)v558 + v320), (char *)(128 - v320), "%02x", v319, *((unsigned __int8 *)v540 + v345));
            if (v345 > 0xE) {
              break;
            }
            v320 += v346;
            ++v345;
          }
          while (v320 < 0x7F);
        }
        this = GlCustomLog(14, "%s\n", (const char *)v558);
        uint64_t j = (uint64_t)v536;
        continue;
      case 1:
        uint64_t v6 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v6);
        if (v7 <= 7) {
          goto LABEL_907;
        }
        *(void *)(j + 9756) = *(unsigned int *)(j + 16 + (v6 + 4));
        int v204 = *(_DWORD *)(j + 16 + v6);
        if (v204 > 12320511)
        {
          if (v204 > 286357366)
          {
            if (v204 <= 806727328)
            {
              if (v204 > 447584623)
              {
                switch(v204)
                {
                  case 447584624:
                    BOOL v349 = *(void *)(j + 10480) == 0;
                    int v350 = 43;
                    break;
                  case 447592816:
                    BOOL v349 = *(void *)(j + 10456) == 0;
                    int v350 = 45;
                    break;
                  case 538291873:
                    *(_DWORD *)(j + 12) = 3;
                    uint64_t v477 = *(void *)(j + 10680);
                    goto LABEL_842;
                  default:
                    goto LABEL_847;
                }
              }
              else
              {
                switch(v204)
                {
                  case 286357367:
                    BOOL v349 = *(void *)(j + 10464) == 0;
                    int v350 = 28;
                    break;
                  case 286361736:
                    BOOL v349 = *(void *)(j + 10472) == 0;
                    int v350 = 29;
                    break;
                  case 447547760:
                    BOOL v349 = *(void *)(j + 10312) == 0;
                    int v350 = 44;
                    goto LABEL_843;
                  default:
                    goto LABEL_847;
                }
              }
              goto LABEL_843;
            }
            if (v204 > 1343598240)
            {
              if (v204 != 1343598241)
              {
                if (v204 == 1438362197)
                {
                  BOOL v349 = *(void *)(j + 10408) == 0;
                  int v350 = 10;
                  goto LABEL_843;
                }
                if (v204 == 1537563557)
                {
                  BOOL v349 = *(void *)(j + 10400) == 0;
                  int v350 = 12;
                  goto LABEL_843;
                }
                goto LABEL_847;
              }
              *(_DWORD *)(j + 12) = 7;
              uint64_t v477 = *(void *)(j + 10704);
            }
            else
            {
              switch(v204)
              {
                case 806727329:
                  *(_DWORD *)(j + 12) = 5;
                  uint64_t v477 = *(void *)(j + 10688);
                  break;
                case 1075162785:
                  *(_DWORD *)(j + 12) = 6;
                  uint64_t v477 = *(void *)(j + 10696);
                  break;
                case 1128756537:
                  BOOL v349 = *(void *)(j + 10664) == 0;
                  int v350 = 49;
                  goto LABEL_843;
                default:
                  goto LABEL_847;
              }
            }
LABEL_842:
            BOOL v349 = v477 == 0;
            int v350 = 50;
            goto LABEL_843;
          }
          if (v204 > 269592555)
          {
            if (v204 <= 286344259)
            {
              switch(v204)
              {
                case 269592556:
                  goto LABEL_789;
                case 269856417:
                  *(_DWORD *)(j + 12) = 0;
                  uint64_t v477 = *(void *)(j + 10672);
                  goto LABEL_842;
                case 286339891:
                  BOOL v349 = *(void *)(j + 10424) == 0;
                  int v350 = 19;
                  goto LABEL_843;
              }
              goto LABEL_847;
            }
            switch(v204)
            {
              case 286344260:
                BOOL v349 = *(void *)(j + 10432) == 0;
                int v350 = 18;
                goto LABEL_843;
              case 286348629:
                BOOL v349 = *(void *)(j + 10440) == 0;
                int v350 = 23;
                goto LABEL_843;
              case 286352998:
                BOOL v349 = *(void *)(j + 10448) == 0;
                int v350 = 24;
                goto LABEL_843;
            }
            goto LABEL_847;
          }
          if (v204 > 269549935)
          {
            switch(v204)
            {
              case 269549936:
                BOOL v349 = *(void *)(j + 10712) == 0;
                int v350 = 51;
                goto LABEL_843;
              case 269551596:
LABEL_789:
                *(_DWORD *)(j + 10504) = 0;
                *(unsigned char *)(v522 + 812) = v204 == 269592556;
                BOOL v349 = *(void *)(j + 10536) == 0;
                int v350 = 46;
                goto LABEL_843;
              case 269552033:
                BOOL v349 = *(void *)(j + 10720) == 0;
                int v350 = 53;
                goto LABEL_843;
            }
            goto LABEL_847;
          }
          if (v204 != 12320512 && v204 != 12320546)
          {
            if (v204 == 123342309)
            {
              int v324 = 15;
              goto LABEL_846;
            }
            goto LABEL_847;
          }
          int v324 = 5;
          *(_DWORD *)(j + 12) = 5;
          this = BlueFin::GlPeLtoReaderBase::IsLtoEphEnabledAndRequested((BlueFin::GlPeLtoReaderBase *)j);
          if ((this & 1) == 0)
          {
            v325 = *(_DWORD **)(j + 10192);
            int v324 = 64;
            if (v325)
            {
              BOOL v326 = *v325 == 4;
              goto LABEL_861;
            }
          }
        }
        else
        {
          if (v204 <= -1144210661)
          {
            if (v204 > -1441682741)
            {
              if (v204 <= -1144221100)
              {
                if (v204 != -1441682740)
                {
                  if (v204 == -1440568645) {
                    goto LABEL_751;
                  }
                  if (v204 == -1160651099)
                  {
                    BOOL v349 = *(void *)(j + 10744) == 0;
                    int v350 = 33;
                    goto LABEL_843;
                  }
                  goto LABEL_847;
                }
                BOOL v349 = *v512 == 0;
                int v350 = 3;
                goto LABEL_843;
              }
              switch(v204)
              {
                case -1144221099:
                  BOOL v349 = *(void *)(j + 10296) == 0;
                  int v350 = 38;
                  goto LABEL_843;
                case -1144214356:
                  BOOL v349 = *(void *)(j + 10760) == 0;
                  int v350 = 35;
                  goto LABEL_843;
                case -1144210758:
                  BOOL v349 = *(void *)(j + 10216) == 0;
                  int v350 = 36;
                  goto LABEL_843;
              }
            }
            else
            {
              if (v204 <= -1581604423)
              {
                switch(v204)
                {
                  case -1860394660:
                    BOOL v349 = *(void *)(j + 10304) == 0;
                    int v350 = 42;
                    break;
                  case -1582521940:
                    BOOL v349 = *(void *)(j + 10240) == 0;
                    int v350 = 20;
                    break;
                  case -1582128718:
                    goto LABEL_790;
                  default:
                    goto LABEL_847;
                }
LABEL_843:
                if (v349) {
                  int v324 = 64;
                }
                else {
                  int v324 = v350;
                }
                goto LABEL_846;
              }
              switch(v204)
              {
                case -1581604422:
                  BOOL v349 = *(void *)(j + 10384) == 0;
                  int v350 = 26;
                  goto LABEL_843;
                case -1581407811:
LABEL_790:
                  BOOL v349 = *(void *)(j + 10352) == 0;
                  int v350 = 21;
                  goto LABEL_843;
                case -1441682757:
LABEL_751:
                  BOOL v349 = *v514 == 0;
                  int v350 = 25;
                  goto LABEL_843;
              }
            }
LABEL_847:
            this = BlueFin::GlPeLtoReaderBase::isDcb((void *)j, v204, v533);
            if (this)
            {
              int v324 = 52;
              goto LABEL_846;
            }
            if (BlueFin::GlPeRtoReader::IsRtoEphSection(v516, v204))
            {
              this = BlueFin::GlPeRtoReader::CheckRtoEnabled(v516, v204);
              BOOL v487 = this == 0;
              int v488 = 54;
              goto LABEL_904;
            }
            this = BlueFin::GlPeRtoReader::IsRtoSystSection(v516, v204);
            if (this)
            {
              this = BlueFin::GlPeRtoReader::CheckRtoEnabled(v516, v204);
              BOOL v487 = this == 0;
              int v488 = 57;
              goto LABEL_904;
            }
            int v324 = 64;
            if (v204 > 352366240)
            {
              if (v204 <= 355708576)
              {
                if (v204 != 352366241)
                {
                  int v493 = 354594465;
                  goto LABEL_902;
                }
              }
              else if (v204 != 355708577 && v204 != 356822689)
              {
                int v493 = 357936801;
LABEL_902:
                if (v204 != v493) {
                  goto LABEL_846;
                }
              }
              this = BlueFin::GlPeRtoReader::CheckRtoEnabled(v516, v204);
              BOOL v487 = this == 0;
              int v488 = 62;
LABEL_904:
              if (v487) {
                int v324 = 64;
              }
              else {
                int v324 = v488;
              }
              goto LABEL_846;
            }
            if (v204 <= 13417243)
            {
              if (v204 == 13406805 || v204 == 13417146)
              {
LABEL_899:
                this = BlueFin::GlPeRtoReader::CheckRtoEnabled(v516, v204);
                BOOL v487 = this == 0;
                int v488 = 61;
                goto LABEL_904;
              }
            }
            else
            {
              if (v204 == 13417244 || v204 == 13417258) {
                goto LABEL_899;
              }
              if (v204 == 269552240)
              {
                this = BlueFin::GlPeRtoReader::CheckRtoEnabled(v516, 269552240);
                if (this) {
                  int v324 = 63;
                }
                else {
                  int v324 = 64;
                }
              }
            }
            goto LABEL_846;
          }
          if (v204 <= -3342389)
          {
            if (v204 <= -1144200732)
            {
              switch(v204)
              {
                case -1144210660:
                  BOOL v349 = *(void *)(j + 10368) == 0;
                  int v350 = 40;
                  break;
                case -1144210646:
                  BOOL v349 = *(void *)(j + 10360) == 0;
                  int v350 = 39;
                  break;
                case -1144206646:
                  BOOL v349 = *(void *)(j + 10752) == 0;
                  int v350 = 34;
                  goto LABEL_843;
                default:
                  goto LABEL_847;
              }
              goto LABEL_843;
            }
            switch(v204)
            {
              case -1144200731:
                BOOL v349 = *(void *)(j + 10392) == 0;
                int v350 = 37;
                goto LABEL_843;
              case -569374191:
                BOOL v349 = *(void *)(j + 10496) == 0;
                int v350 = 32;
                goto LABEL_843;
              case -245624374:
                BOOL v349 = *(void *)(j + 10224) == 0;
                int v350 = 41;
                goto LABEL_843;
            }
            goto LABEL_847;
          }
          if (v204 <= 12311807)
          {
            switch(v204)
            {
              case -3342388:
                int v324 = 4;
                goto LABEL_846;
              case 12298752:
                *(_DWORD *)(j + 12) = 6;
                this = BlueFin::GlPeLtoReaderBase::IsLtoEphEnabledAndRequested((BlueFin::GlPeLtoReaderBase *)j);
                if (this) {
                  goto LABEL_840;
                }
                v482 = *(int **)(j + 10192);
                int v324 = 64;
                if (!v482) {
                  goto LABEL_846;
                }
                int v483 = *v482;
                BOOL v326 = v483 == 5;
                goto LABEL_862;
              case 12307456:
                *(_DWORD *)(j + 12) = 0;
                this = BlueFin::GlPeLtoReaderBase::IsLtoEphEnabledAndRequested((BlueFin::GlPeLtoReaderBase *)j);
                if (this) {
                  goto LABEL_840;
                }
                v415 = *(_DWORD **)(j + 10192);
                int v324 = 64;
                if (!v415) {
                  goto LABEL_846;
                }
                BOOL v326 = *v415 == 0;
LABEL_861:
                int v483 = 5;
LABEL_862:
                if (v326) {
                  int v324 = v483;
                }
                else {
                  int v324 = 64;
                }
                goto LABEL_846;
            }
            goto LABEL_847;
          }
          if (v204 != 12311808)
          {
            if (v204 == 12316160 || v204 == 12316194)
            {
              *(_DWORD *)(j + 12) = 3;
              this = BlueFin::GlPeLtoReaderBase::IsLtoEphEnabledAndRequested((BlueFin::GlPeLtoReaderBase *)j);
              if (this) {
                goto LABEL_840;
              }
              v478 = *(_DWORD **)(j + 10192);
              int v324 = 64;
              if (!v478) {
                goto LABEL_846;
              }
              BOOL v326 = *v478 == 3;
              goto LABEL_861;
            }
            goto LABEL_847;
          }
          *(_DWORD *)(j + 12) = 2;
          this = BlueFin::GlPeLtoReaderBase::IsLtoEphEnabledAndRequested((BlueFin::GlPeLtoReaderBase *)j);
          if (this)
          {
LABEL_840:
            int v324 = 5;
            goto LABEL_846;
          }
          v486 = *(_DWORD **)(j + 10192);
          int v324 = 64;
          if (v486)
          {
            BOOL v326 = *v486 == 2;
            goto LABEL_861;
          }
        }
LABEL_846:
        *(_DWORD *)(j + 8) = v324;
        *(_DWORD *)(j + 9744) += 8;
        continue;
      case 3:
      case 25:
        uint64_t v6 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v6);
        if (v7 < 4) {
          goto LABEL_907;
        }
        __int16 v8 = (unsigned int *)(j + v6 + 16);
        unsigned int v9 = bswap32(*v8) + 4;
        if (v7 < v9) {
          goto LABEL_907;
        }
        *(void *)&v540[2] = j + v6 + 16;
        *(void *)&long long v541 = 0;
        v540[0] = 0;
        if (v5 == 25) {
          __int16 v10 = v514;
        }
        else {
          __int16 v10 = v512;
        }
        if (!*v10) {
          goto LABEL_35;
        }
        LODWORD(v54BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = BlueFin::GlPeBitReader::getword((BlueFin::GlPeBitReader *)v540);
        *(void *)&v540[2] = v8 + 1;
        __int16 v11 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v540, 0x10u);
        DWORD1(v54BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 32 * (DWORD1(v541) == 32);
        __int16 v12 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v540, 8u);
        this = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v540, 6u);
        int v13 = this;
        DWORD1(v54BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 32 * (DWORD1(v541) == 32);
        BOOL v14 = (int)this + 1 > 32 && v5 != 25;
        BOOL v15 = (int)this + 1 > 10 && v5 == 25;
        if (v11 != 4 || v14 || v15) {
          goto LABEL_35;
        }
        if (this > 0x7FFFFFFE) {
          goto LABEL_31;
        }
        int v16 = 0;
        if (v5 == 25) {
          unsigned int v17 = 10;
        }
        else {
          unsigned int v17 = 32;
        }
        while (1)
        {
          for (uint64_t i = 0; i != 12; ++i)
          {
            unsigned int v19 = BlueFin::GlPeLtoReaderBase::almanac_elements[i * 4];
            BOOL v20 = (v19 & 1) == 0;
            unsigned int v21 = v19 >> 1;
            this = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v540, v19 >> 1);
            int v22 = (int)(this << -(char)v21) >> -(char)v21;
            if (v20) {
              int v22 = this;
            }
            v558[i] = v22;
          }
          __int16 v23 = v558[1];
          char v24 = v558[2];
          __int16 v25 = v558[3];
          __int16 v26 = v558[4];
          __int16 v27 = v558[5];
          long long v28 = *(_OWORD *)&v558[6];
          __int16 v29 = v558[10];
          __int16 v30 = v558[11];
          DWORD1(v54BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 32 * (DWORD1(v541) == 32);
          if (v17 <= LOBYTE(v558[0])) {
            break;
          }
          if (*v10)
          {
            uint64_t v31 = *v10 + 36 * LOBYTE(v558[0]);
            *(unsigned char *)uint64_t v31 = v558[0];
            *(_WORD *)(v31 + 2) = v23;
            *(unsigned char *)(v31 + 4) = v24;
            *(_WORD *)(v31 + 6) = v25;
            *(_WORD *)(v31 + 8) = v26;
            *(_OWORD *)(v31 + 12) = v28;
            *(_WORD *)(v31 + 28) = v30;
            *(_WORD *)(v31 + 3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v29;
            *(_WORD *)(v31 + 32) = v12;
            *(_WORD *)(v31 + 34) = v27;
          }
          BOOL v73 = v16++ == v13;
          if (v73)
          {
LABEL_31:
            if (v5 == 25) {
              int v32 = 0x40000;
            }
            else {
              int v32 = 0x4000;
            }
            ***((_DWORD ***)v536 + 1346) |= v32;
            break;
          }
        }
LABEL_35:
        uint64_t j = (uint64_t)v536;
        *((_DWORD *)v536 + 2436) += v9;
        unsigned int v33 = *((_DWORD *)v536 + 2440) + v9;
        goto LABEL_427;
      case 4:
        uint64_t v177 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v177);
        unsigned int v105 = (unsigned int *)(j + v177 + 16);
        if (v7 <= 3) {
          goto LABEL_909;
        }
        unsigned int v178 = *v105;
        *(_DWORD *)(j + 9812) = *v105;
        unsigned int v179 = *(_DWORD *)(j + 9800);
        unsigned int v180 = v179 - v178;
        BOOL v275 = v178 >= v179;
        unsigned int v181 = v178 - v179;
        if (!v275) {
          unsigned int v181 = v180;
        }
        *(_DWORD *)(j + 9808) = v181;
        int v123 = v177 + 4;
        int v124 = 1;
        goto LABEL_219;
      case 5:
        uint64_t v207 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v207);
        unsigned int v105 = (unsigned int *)(j + v207 + 16);
        if (v7 <= 0xF) {
          goto LABEL_909;
        }
        *(_DWORD *)(j + 9764) = *v105;
        int v208 = *(_DWORD *)(j + (v207 + 4) + 16);
        *(_DWORD *)(j + 9768) = v208;
        if (!v208)
        {
          *(_DWORD *)(j + 9788) = *(_DWORD *)(j + (v207 + 12) + 16);
          int v210 = 16;
          goto LABEL_492;
        }
        int v209 = *(_DWORD *)(j + (v207 + 8) + 16);
        if (*(_DWORD *)(j + 12))
        {
          *(_DWORD *)(j + 9788) = v209;
          int v210 = 12;
LABEL_492:
          int v347 = 7;
          v348 = v513;
          goto LABEL_524;
        }
        *(_DWORD *)(j + 9772) = v209;
        int v210 = 12;
        int v347 = 6;
        v348 = v508;
LABEL_524:
        _DWORD *v348 = 0;
        *(_DWORD *)(j + 8) = v347;
        *(_DWORD *)(j + 9744) = v210 + v207;
        *(_DWORD *)(j + 9760) += v210;
        BlueFin::GlSetBase::Remove(*(void *)(j + 10768), 7);
        *(_DWORD *)(j + 9804) = -1;
LABEL_525:
        this = BlueFin::GlSetBase::Remove(*(void *)(j + 10768), 10);
        continue;
      case 6:
        uint64_t v133 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v133);
        unsigned int v105 = (unsigned int *)(j + v133 + 16);
        if (v7 < 0xC) {
          goto LABEL_909;
        }
        if (*v105 == 10) {
          *(_DWORD *)(j + 978BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_DWORD *)(j + (v133 + 4) + 16);
        }
        *(_DWORD *)(j + 9744) = v133 + 8;
        int v134 = *(_DWORD *)(j + 9760);
        *(_DWORD *)(j + 976BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v134 + 8;
        int v135 = *(_DWORD *)(j + 9772);
        int v136 = *(_DWORD *)(j + 9776) + 1;
        *(_DWORD *)(j + 9776) = v136;
        if (v135 == v136)
        {
          *(_DWORD *)(j + 9776) = 0;
          *(void *)(j + 9788) = *(unsigned int *)(j + (v133 + 8) + 16);
          *(_DWORD *)(j + 9744) = v133 + 12;
          *(_DWORD *)(j + 976BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v134 + 12;
          *(_DWORD *)(j + 8) = 7;
        }
        continue;
      case 7:
        uint64_t v158 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v158);
        unsigned int v105 = (unsigned int *)(j + v158 + 16);
        if (v7 < 8) {
          goto LABEL_909;
        }
        unsigned int v159 = *v105;
        unsigned int v160 = *(_DWORD *)(j + 9800);
        if (v160 <= *v105) {
          unsigned int v161 = *v105;
        }
        else {
          unsigned int v161 = *(_DWORD *)(j + 9800);
        }
        if (v159 < v160) {
          unsigned int v160 = *v105;
        }
        unsigned int v162 = v161 - v160;
        unsigned int v163 = (v161 ^ 0x7FFFFFFF) + v160 - 0x7FFFFFFF;
        if (v162 >= v163) {
          unsigned int v164 = v163;
        }
        else {
          unsigned int v164 = v162;
        }
        unsigned int v165 = "<->";
        int v166 = 1;
        uint64_t v167 = 7;
        switch(*(_DWORD *)(j + 12))
        {
          case 0:
          case 1:
          case 2:
          case 3:
            int v166 = 0;
            uint64_t v167 = *(unsigned int *)(j + 12);
            break;
          case 5:
            int v166 = 0;
            uint64_t v167 = 4;
            break;
          case 6:
            int v166 = 0;
            unsigned int v165 = "GAL";
            uint64_t v167 = 5;
            break;
          case 7:
            int v166 = 0;
            unsigned int v165 = "NIC";
            uint64_t v167 = 6;
            break;
          default:
            break;
        }
        uint64_t v409 = *(void *)(j + 10192);
        if (v409)
        {
          if (*(_DWORD *)v409 == v167)
          {
            uint64_t v410 = *(unsigned __int16 *)(v409 + 4);
            if (v410 <= 0x95)
            {
              *(_DWORD *)(v409 + 4 * v410 + 8) = v159;
              *(_WORD *)(v409 + 4) = v410 + 1;
            }
          }
        }
        v411 = **(int ***)(j + 10768);
        int v412 = *v411;
        if ((*v411 & 0x400) == 0)
        {
          int *v411 = v412 | 0x400;
          v413 = "BDS";
          v414 = "GPS";
          switch(v167)
          {
            case 0:
              break;
            case 1:
              v414 = "SBAS";
              break;
            case 2:
              v414 = "GLNS";
              break;
            case 3:
              v414 = "QZSS";
              break;
            case 4:
              goto LABEL_685;
            default:
              v413 = v165;
LABEL_685:
              v414 = v413;
              break;
          }
          this = GlCustomLog(12, "%s LTO age %d.%dd (%us)\n", v414, (v164 + 4320) / 0x15180, (v164 + 4320) / 0x21C0 - 10 * ((429496730 * (unint64_t)((v164 + 4320) / 0x21C0)) >> 32), v164);
          v411 = **(int ***)(j + 10768);
          int v412 = *v411;
        }
        if ((v166 | ((v412 & 0x80) >> 7)))
        {
          if (v166) {
            goto LABEL_699;
          }
          uint64_t v454 = *(void *)(j + 10776);
        }
        else
        {
          uint64_t v454 = *(void *)(j + 10776);
          if (v454)
          {
            *(_DWORD *)(v454 + 4 * v167 + 96BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v159;
            int v412 = *v411;
          }
          int *v411 = v412 | 0x80;
          uint64_t v455 = *(void *)(j + 10728);
          if (v455) {
            *(_DWORD *)(v455 + 4 * v167) = v159;
          }
        }
        if (v454)
        {
          uint64_t v456 = v454 + 4 * v167;
          if (*(_DWORD *)(v456 + 988) < v159) {
            *(_DWORD *)(v456 + 988) = v159;
          }
        }
        uint64_t v457 = *(void *)(j + 10736);
        if (v457) {
          *(_DWORD *)(v457 + 4 * v167) = v159;
        }
LABEL_699:
        unsigned int v458 = *(_DWORD *)(j + 9804);
        int v459 = *(_DWORD *)(j + 9744);
        if (v164 < v458)
        {
          *(_DWORD *)(j + 9804) = v164;
          *(_DWORD *)(j + 9796) = *(_DWORD *)(j + (v459 + 4) + 16);
          unsigned int v458 = v164;
        }
        *(_DWORD *)(j + 9744) = v459 + 8;
        *(_DWORD *)(j + 9760) += 8;
        int v460 = *(_DWORD *)(j + 9788);
        int v461 = *(_DWORD *)(j + 9792) + 1;
        *(_DWORD *)(j + 9792) = v461;
        if (v460 == v461)
        {
          _DWORD *v513 = 0;
          if (v458 < 0x2A31)
          {
            if (*(_DWORD *)(j + 9768) == 1 && !*(_DWORD *)(j + 12)) {
              int v464 = 8;
            }
            else {
              int v464 = 9;
            }
            int *v535 = v464;
          }
          else
          {
            GlCustomLog(11, "%s error code %d.%d (%s)\n", "LTO", *(_DWORD *)(j + 8), 3139, "expired");
            BlueFin::GlSetBase::Remove(*(void *)(j + 10768), 11);
            v462 = *(_DWORD **)(j + 10792);
            if (v462) {
              _DWORD *v462 = 2;
            }
            int *v515 = 2;
            int *v535 = 64;
            v463 = "GPS";
            switch(v167)
            {
              case 0:
                break;
              case 1:
                v463 = "SBAS";
                break;
              case 2:
                v463 = "GLNS";
                break;
              case 3:
                v463 = "QZSS";
                break;
              default:
                v463 = "BDS";
                break;
            }
            this = GlCustomLog(12, "%s LTO expired (required %ds, min delta %ds)\n", v463, 10800, *(_DWORD *)(j + 9804));
          }
          uint64_t v479 = *(void *)(j + 10192);
          if (v479 && *(_WORD *)(v479 + 4)) {
            ***(_DWORD ***)(j + 10768) |= 0x800000u;
          }
        }
        continue;
      case 8:
        uint64_t v6 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v6);
        if (v7 < 4) {
          goto LABEL_907;
        }
        unsigned int v244 = *(_DWORD *)(j + v6 + 16);
        unsigned int v245 = v244 + 4;
        if (v7 < v244 + 4) {
          goto LABEL_907;
        }
        int v246 = *(_DWORD *)(j + 9760);
        if (*(unsigned char *)v522 || *(_DWORD *)(j + 9780) != v246) {
          goto LABEL_309;
        }
        unsigned int v537 = 0;
        BlueFin::GlCryptoDes::des_set_key(qword_263BB37A4, (uint64_t)&v572, v7, (unsigned __int8 *)a4);
        uint64_t v575 = 0x5B61B6B36832FBFBLL;
        char v576 = 0;
        BlueFin::GlCryptoDes::decrypt_update((uint64_t)&v572, v540, &v537, (uint64_t)&qword_263BB37A4[2] + 4, 0x118u);
        v537 -= *((unsigned __int8 *)v540 + v537 - 1);
        BlueFin::GlCryptoRsa::bin2key((uint64_t)v558, v540, 0x118u);
        this = (uint64_t)BlueFin::GlCryptoRsa::decrypt(v558, (uint64_t)v538, &v537, (uint64_t)v536 + (*((_DWORD *)v536 + 2436) + 4) + 16, v244);
        uint64_t v557 = 0;
        long long v555 = 0u;
        long long v556 = 0u;
        long long v553 = 0u;
        long long v554 = 0u;
        long long v551 = 0u;
        long long v552 = 0u;
        long long v549 = 0u;
        long long v550 = 0u;
        long long v547 = 0u;
        long long v548 = 0u;
        long long v545 = 0u;
        long long v546 = 0u;
        long long v543 = 0u;
        long long v544 = 0u;
        long long v541 = 0u;
        long long v542 = 0u;
        *(_OWORD *)v540 = 0u;
        long long v570 = 0u;
        memset(v571, 0, sizeof(v571));
        long long v568 = 0u;
        long long v569 = 0u;
        long long v566 = 0u;
        long long v567 = 0u;
        long long v564 = 0u;
        long long v565 = 0u;
        long long v562 = 0u;
        long long v563 = 0u;
        long long v560 = 0u;
        long long v561 = 0u;
        long long v559 = 0u;
        memset(v558, 0, sizeof(v558));
        if (v537 != 16)
        {
          GlCustomLog(11, "%s error code %d.%d (%s)\n", "LTO", *((_DWORD *)v536 + 2), 3215, "license");
          this = BlueFin::GlSetBase::Remove(*((void *)v536 + 1346), 11);
          goto LABEL_676;
        }
        *(_OWORD *)(v522 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *(_OWORD *)v538;
        *(unsigned char *)uint64_t v522 = 1;
        uint64_t j = (uint64_t)v536;
        LODWORD(v6) = *((_DWORD *)v536 + 2436);
        int v246 = *((_DWORD *)v536 + 2440);
LABEL_309:
        *(_DWORD *)(j + 9744) = v6 + v245;
        *(_DWORD *)(j + 976BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v246 + v245;
        int v247 = *(_DWORD *)(j + 9772);
        int v248 = *(_DWORD *)(j + 9776) + 1;
        *(_DWORD *)(j + 9776) = v248;
        if (v247 == v248)
        {
          int v108 = 9;
          goto LABEL_882;
        }
        continue;
      case 9:
        uint64_t v265 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v265);
        if (v7 < 4) {
          goto LABEL_913;
        }
        unsigned int v266 = *(_DWORD *)(j + v265 + 16);
        unsigned int v267 = v266 + 4;
        if (v7 < v266 + 4) {
          goto LABEL_913;
        }
        int v268 = *(_DWORD *)(j + 9764);
        if (v268 == 2) {
          goto LABEL_511;
        }
        if (v268 == 3)
        {
          if (*(_DWORD *)(j + 12) != 5) {
            goto LABEL_512;
          }
        }
        else if (v268 != 4 || *(_DWORD *)(j + 12) != 6)
        {
          goto LABEL_512;
        }
LABEL_511:
        if (!*v513)
        {
LABEL_513:
          unsigned int v537 = 0;
          if (*(_DWORD *)(j + 9768) == 1)
          {
            BlueFin::GlCryptoDes::des_set_key(v510, (uint64_t)v558, v7, (unsigned __int8 *)a4);
            *(void *)&long long v563 = *(void *)(v522 + 9);
            LOBYTE(v564) = 0;
            v352 = (unsigned char *)(j + (v265 + 4) + 16);
            BlueFin::GlCryptoDes::decrypt_update((uint64_t)v558, v352, &v537, (uint64_t)v352, v266);
            v537 -= v352[v537 - 1];
            if (v266 < v537 || v266 - v537 >= 9)
            {
              int v276 = *(_DWORD *)(j + 8);
              int v277 = 3305;
              goto LABEL_520;
            }
            LODWORD(v265) = *(_DWORD *)(j + 9744);
            int v268 = *(_DWORD *)(j + 9764);
          }
          else
          {
            unsigned int v537 = v266;
          }
          uint64_t v573 = j + (v265 + 4) + 16;
          uint64_t v574 = 0;
          int v572 = 1;
          if (v268 != 2)
          {
            if (v268 == 3)
            {
              if (*(_DWORD *)(j + 12) != 5) {
                goto LABEL_664;
              }
            }
            else if (v268 != 4 || *(_DWORD *)(j + 12) != 6)
            {
LABEL_664:
              if (!BlueFin::GlPeLtoReaderBase::IsLtoEphEnabledAndRequested((BlueFin::GlPeLtoReaderBase *)j)) {
                goto LABEL_669;
              }
              unsigned __int16 v448 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)&v572, 5u);
              this = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)&v572, 0x1Bu);
              int v449 = this;
              if ((v448 & 0x8000) != 0)
              {
                uint64_t j = (uint64_t)v536;
              }
              else
              {
                char v450 = 0;
                int v451 = v448 + 1;
                uint64_t j = (uint64_t)v536;
                do
                {
                  this = BlueFin::GlPeLtoReaderBase::parseNavModelSat(j, (unsigned __int8 *)v558, (BlueFin::GlPeBitReader *)&v572);
                  v450 |= this == 0;
                  --v451;
                  uint64_t j = (uint64_t)v536;
                }
                while (v451);
                if (v450)
                {
LABEL_669:
                  GlCustomLog(11, "%s error code %d.%d (%s)\n", "LTO", *(_DWORD *)(j + 8), 3331, "internal");
                  goto LABEL_670;
                }
              }
              int v474 = *(_DWORD *)(j + 9764);
              if (v474 != 2)
              {
                if (v474 == 3)
                {
                  if (*(_DWORD *)(j + 12) != 5) {
                    goto LABEL_745;
                  }
                }
                else if (v474 != 4 || *(_DWORD *)(j + 12) != 6)
                {
LABEL_745:
                  if (v449)
                  {
                    BlueFin::GlPeLtoReaderBase::readDynamicRange((BlueFin::GlPeBitReader *)&v572, v521, 36);
                    uint64_t j = (uint64_t)v536;
                    goto LABEL_806;
                  }
                  goto LABEL_873;
                }
              }
              if (*(_DWORD *)(j + 9796) != *(_DWORD *)(j + 9760) || v449)
              {
                this = BlueFin::GlPeLtoReaderBase::readDynamicRange((BlueFin::GlPeBitReader *)&v572, v521, 36);
                uint64_t j = (uint64_t)v536;
                if (v449)
                {
LABEL_806:
                  if (!BlueFin::GlPeLtoReaderBase::IsLtoEphEnabledAndRequested((BlueFin::GlPeLtoReaderBase *)j)) {
                    goto LABEL_810;
                  }
                  char v481 = 0;
                  HIDWORD(v574) = 32 * (HIDWORD(v574) == 32);
                  long long v562 = 0u;
                  long long v563 = 0u;
                  long long v560 = 0u;
                  long long v561 = 0u;
                  long long v559 = 0u;
                  memset(v558, 0, sizeof(v558));
                  do
                  {
                    this = BlueFin::GlPeLtoReaderBase::parseNavModelSat(j, (unsigned __int8 *)v558, (BlueFin::GlPeBitReader *)&v572);
                    v481 |= this == 0;
                    --v449;
                    uint64_t j = (uint64_t)v536;
                  }
                  while (v449);
                  if (v481)
                  {
LABEL_810:
                    v475 = (BlueFin::GlPeLtoReaderBase *)j;
                    int v476 = 3345;
                    goto LABEL_811;
                  }
                }
              }
LABEL_873:
              int v351 = *(_DWORD *)(j + 9760);
              if (*(_DWORD *)(j + 9796) == v351)
              {
                uint64_t v492 = *(int *)(j + 12);
                if (v492 > 6)
                {
                  int v351 = *(_DWORD *)(j + 9796);
                }
                else
                {
                  int v351 = *(_DWORD *)(j + 9796);
                  if ((0x6Du >> v492))
                  {
                    ***(_DWORD ***)(j + 10768) |= dword_263BB90C0[v492];
                    int v351 = *(_DWORD *)(j + 9760);
                  }
                }
              }
              LODWORD(v265) = *(_DWORD *)(j + 9744);
              goto LABEL_879;
            }
          }
          if (!*v513) {
            goto LABEL_664;
          }
          if (!BlueFin::GlPeLtoReaderBase::IsLtoEphEnabledAndRequested((BlueFin::GlPeLtoReaderBase *)j))
          {
            v475 = (BlueFin::GlPeLtoReaderBase *)j;
            int v476 = 3320;
LABEL_811:
            this = BlueFin::GlPeLtoReaderBase::reportError(v475, v476, v419);
            goto LABEL_671;
          }
          __int16 v420 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)&v572, 5u);
          this = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)&v572, 0x1Bu);
          uint64_t j = (uint64_t)v536;
          uint64_t v421 = *((int *)v536 + 3);
          if (v421 > 7 || ((0xEFu >> v421) & 1) == 0) {
            goto LABEL_873;
          }
          int v422 = v420 + this;
          uint64_t v423 = (int)dword_263BB9064[v421];
          *(void *)v538 = &v538[12];
          v538[8] = 2;
          *(void *)&v538[12] = 0;
          if (v422 < 0)
          {
LABEL_661:
            if (v423 == 3)
            {
              BlueFin::GlSetBase::operator|=((uint64_t)v538, v501);
              LOBYTE(v447) = 10;
            }
            else if (v423 == 4)
            {
              BlueFin::GlSetBase::operator|=((uint64_t)v538, v502);
              LOBYTE(v447) = 63;
            }
            else
            {
              uint64_t v447 = qword_263BB9088[v423];
            }
            uint64_t ULong = BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)v538, 1u);
            uint64_t v490 = (2 * ~(-1 << v447)) & ~((ULong << 32) | BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)v538, 0));
            BlueFin::GlGnssIdSet::GlGnssIdSet((BlueFin::GlGnssIdSet *)v540, SBYTE4(v490), v490);
            LOBYTE(v558[0]) = v540[2];
            memcpy(&v558[2], *(const void **)v540, 4 * LOBYTE(v540[2]));
            HIWORD(v558[0]) = 0;
            BYTE1(v558[0]) = 0;
            v558[1] = v558[2];
            this = (uint64_t)BlueFin::GlSetIterator::operator++((unsigned __int8 *)v558);
            for (uint64_t j = (uint64_t)v536;
                  BYTE1(v558[0]) != LOBYTE(v558[0]);
                  this = (uint64_t)BlueFin::GlSetIterator::operator++((unsigned __int8 *)v558))
            {
              LtoUncmprsdEphBuffer = (_DWORD *)BlueFin::GlPeLtoReaderBase::getLtoUncmprsdEphBuffer(v536, v423, BYTE2(v558[0]));
              if (LtoUncmprsdEphBuffer) {
                _DWORD *LtoUncmprsdEphBuffer = 255;
              }
            }
            goto LABEL_873;
          }
          int v424 = 0;
          while (1)
          {
            for (unint64_t k = 0; k != 144; k += 4)
              BlueFin::GlPeLtoReaderBase::uncompress_field((unsigned __int16)v521[k / 2], (BlueFin::GlPeBitReader *)&v572, (int *)&v558[k / 4]);
            long long v525 = *(_OWORD *)&v558[8];
            long long v528 = *(_OWORD *)&v558[4];
            long long v519 = *(_OWORD *)&v558[12];
            long long v499 = v560;
            long long v500 = v559;
            long long v497 = v562;
            long long v498 = v561;
            uint64_t v426 = v563;
            unsigned int v427 = DWORD2(v563);
            unsigned int v428 = WORD6(v563);
            long long v532 = *(_OWORD *)v558;
            unsigned __int8 v429 = v558[0];
            unsigned __int8 v430 = LOBYTE(v558[0]) + 1;
            v431 = v536;
            uint64_t v432 = *((void *)v536 + 1347);
            if (!v432
              || (v433 = (const void **)BlueFin::GlGnssSet::operator()(v432 + 1024, v423),
                  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)v558, &v558[3], 2u, v433),
                  uint64_t v434 = 1 << (v430 & 0x1F),
                  (v434 & *(_DWORD *)(*(void *)v558 + 4 * (v430 >> 5))) == 0)
              && (BlueFin::GlPeLtoMgr::GetBadSvSet(*((void *)v536 + 1347), v423, 0, v540),
                  (v434 & *(_DWORD *)(*(void *)v540 + 4 * (v430 >> 5))) == 0)
              && (int v435 = BlueFin::GlAidMask::AllowSV(*((void *)v536 + 1347), v423, v430), v431 = v536, v435))
            {
              uint64_t v436 = BlueFin::GlPeLtoReaderBase::getLtoUncmprsdEphBuffer(v431, v423, v430);
              if (v436)
              {
                if (*(_DWORD *)v436 != 255) {
                  break;
                }
              }
            }
LABEL_659:
            BOOL v73 = v424++ == v422;
            if (v73) {
              goto LABEL_661;
            }
          }
          if (v429 >= 0x3Fu)
          {
            DeviceFaultNotify("glgnss.h", 115, "Add", (char)"rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glgnss.h", 115, "rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
          }
          *(_DWORD *)(*(void *)v538 + 4 * (v430 >> 5)) |= 1 << v430;
          v437 = (void *)v502;
          if (v423 != 4)
          {
            if (v423 != 3) {
              goto LABEL_652;
            }
            v437 = (void *)v501;
          }
          *(_DWORD *)(*v437 + 4 * (v430 >> 5)) |= 1 << v430;
LABEL_652:
          unint64_t v438 = 0;
          long long v439 = *(_OWORD *)(v436 + 16);
          *(_OWORD *)v558 = *(_OWORD *)v436;
          *(_OWORD *)&v558[4] = v439;
          long long v440 = *(_OWORD *)(v436 + 48);
          *(_OWORD *)&v558[8] = *(_OWORD *)(v436 + 32);
          *(_OWORD *)&v558[12] = v440;
          long long v441 = *(_OWORD *)(v436 + 80);
          long long v559 = *(_OWORD *)(v436 + 64);
          long long v560 = v441;
          long long v442 = *(_OWORD *)(v436 + 112);
          long long v561 = *(_OWORD *)(v436 + 96);
          long long v562 = v442;
          uint64_t v443 = *(void *)(v436 + 128);
          int v444 = *(unsigned __int16 *)(v436 + 140);
          DWORD2(v563) = *(_DWORD *)(v436 + 136);
          HIDWORD(v563) = v444;
          *(void *)&long long v563 = v443;
          *(_OWORD *)v540 = v532;
          long long v541 = v528;
          long long v542 = v525;
          long long v543 = v519;
          long long v544 = v500;
          long long v545 = v499;
          long long v546 = v498;
          long long v547 = v497;
          *(void *)&long long v548 = v426;
          *((void *)&v548 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = __PAIR64__(v428, v427);
          do
          {
            __int16 v445 = v521[v438 / 2];
            if (v445)
            {
              unsigned int v446 = v540[v438 / 4];
              if ((v445 & 2) != 0) {
                v446 += v558[v438 / 4];
              }
              v558[v438 / 4] = v446;
            }
            v438 += 4;
          }
          while (v438 != 144);
          BlueFin::GlPeLtoReaderBase::eph_element_array_to_structure(v558, v436);
          goto LABEL_659;
        }
LABEL_512:
        int v351 = *(_DWORD *)(j + 9760);
        if (*(_DWORD *)(j + 9796) != v351)
        {
LABEL_879:
          *(_DWORD *)(j + 9744) = v265 + v267;
          *(_DWORD *)(j + 976BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v351 + v267;
          int v252 = *(_DWORD *)(j + 9788);
          int v253 = *(_DWORD *)(j + 9792) + 1;
          *(_DWORD *)(j + 9792) = v253;
          goto LABEL_880;
        }
        goto LABEL_513;
      case 10:
        uint64_t v125 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v125);
        unsigned int v105 = (unsigned int *)(j + v125 + 16);
        if (v7 <= 3) {
          goto LABEL_909;
        }
        *(_DWORD *)(v522 + 108) = *v105;
        int v123 = v125 + 4;
        int v124 = 11;
        goto LABEL_219;
      case 11:
        uint64_t v6 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v6);
        uint64_t v221 = *(unsigned __int16 *)(v522 + 110);
        if ((int)v7 < 4 * (int)v221) {
          goto LABEL_907;
        }
        if (!*(_WORD *)(v522 + 110)) {
          goto LABEL_881;
        }
        uint64_t v222 = 0;
        uint64_t v223 = *(void *)(j + 10408);
        unsigned __int16 v224 = v221 - 1;
        uint64_t v225 = 4 * v221;
        do
        {
          if (v223) {
            *(_DWORD *)(v223 + v222) = *(_DWORD *)(j + (v222 + *(_DWORD *)(j + 9744)) + 16);
          }
          v222 += 4;
        }
        while (v225 != v222);
        int v226 = *(_DWORD *)(j + 9744) + 4 * v224 + 4;
        goto LABEL_433;
      case 12:
        uint64_t v257 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v257);
        unsigned int v105 = (unsigned int *)(j + v257 + 16);
        if (v7 <= 7) {
          goto LABEL_909;
        }
        *(_DWORD *)(j + 9828) = *v105;
        *(_DWORD *)(j + 9832) = *(_DWORD *)(j + (v257 + 4) + 16);
        *(_DWORD *)(j + 9836) = 0;
        *(_DWORD *)(j + 8) = 13;
        int v258 = v257 + 8;
        int v259 = *(_DWORD *)(j + 9760) + 8;
        goto LABEL_437;
      case 13:
        uint64_t v227 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v227);
        unsigned int v105 = (unsigned int *)(j + v227 + 16);
        if (v7 < 8) {
          goto LABEL_909;
        }
        unsigned int v228 = *v105;
        unsigned int v229 = *(_DWORD *)(j + 9844);
        if (v229 <= *v105) {
          unsigned int v230 = *v105;
        }
        else {
          unsigned int v230 = *(_DWORD *)(j + 9844);
        }
        if (v228 < v229) {
          unsigned int v229 = *v105;
        }
        unsigned int v231 = v230 - v229;
        unsigned int v232 = (v230 ^ 0x7FFFFFFF) + v229 - 0x7FFFFFFF;
        if (v231 < v232) {
          unsigned int v232 = v231;
        }
        long long v233 = **(int ***)(j + 10768);
        int v234 = *v233;
        uint64_t v235 = *(void *)(j + 10776);
        if ((*v233 & 0x100) == 0)
        {
          if (v235)
          {
            *(_DWORD *)(v235 + 964) = v228;
            int v234 = *v233;
          }
          *long long v233 = v234 | 0x100;
          if (*(void *)(j + 10736)) {
            *(_DWORD *)(*(void *)(j + 10728) + 4) = v228;
          }
        }
        if (v235 && *(_DWORD *)(v235 + 992) < v228) {
          *(_DWORD *)(v235 + 992) = v228;
        }
        uint64_t v236 = *(void *)(j + 10736);
        if (v236) {
          *(_DWORD *)(v236 + 4) = v228;
        }
        unsigned int v237 = *(_DWORD *)(j + 9848);
        int v238 = *(_DWORD *)(j + 9744);
        if (v232 < v237)
        {
          *(_DWORD *)(j + 9848) = v232;
          *(_DWORD *)(j + 984BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_DWORD *)(j + (v238 + 4) + 16);
          unsigned int v237 = v232;
        }
        *(_DWORD *)(j + 9744) = v238 + 8;
        *(_DWORD *)(j + 9760) += 8;
        int v239 = *(_DWORD *)(j + 9832);
        int v240 = *(_DWORD *)(j + 9836) + 1;
        *(_DWORD *)(j + 9836) = v240;
        if (v239 != v240) {
          continue;
        }
        *(_DWORD *)(j + 9836) = 0;
        if (v237 < 0xE11)
        {
          int v108 = 14;
          goto LABEL_882;
        }
        GlCustomLog(11, "%s error code %d.%d (%s)\n", "LTO", 13, 3737, "expired");
        this = BlueFin::GlSetBase::Remove(*(void *)(j + 10768), 11);
        unsigned int v241 = *(_DWORD **)(j + 10792);
        if (v241) {
          *unsigned int v241 = 2;
        }
        int v242 = 2;
        goto LABEL_680;
      case 14:
        uint64_t v265 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v265);
        if (v7 < 4 || (unsigned int v270 = *(_DWORD *)(j + v265 + 16), v271 = v270 + 4, v7 < v270 + 4))
        {
LABEL_913:
          uint64_t v494 = j + v265;
          goto LABEL_908;
        }
        int v272 = *(_DWORD *)(j + 9828);
        if (v272 != 2 || *(_DWORD *)(j + 9836))
        {
          int v273 = *(_DWORD *)(j + 9760);
          if (*(_DWORD *)(j + 9840) != v273) {
            goto LABEL_857;
          }
        }
        unsigned int v537 = 0;
        if (*(_DWORD *)(j + 9772))
        {
          BlueFin::GlCryptoDes::des_set_key(v510, (uint64_t)v558, v7, (unsigned __int8 *)a4);
          *(void *)&long long v563 = *(void *)(v522 + 9);
          LOBYTE(v564) = 0;
          v274 = (unsigned char *)(j + (v265 + 4) + 16);
          BlueFin::GlCryptoDes::decrypt_update((uint64_t)v558, v274, &v537, (uint64_t)v274, v270);
          v537 -= v274[v537 - 1];
          BOOL v275 = v270 < v537 || v270 - v537 >= 9;
          if (v275)
          {
            int v276 = *(_DWORD *)(j + 8);
            int v277 = 3783;
LABEL_520:
            GlCustomLog(11, "%s error code %d.%d (%s)\n", "LTO", v276, v277, "license");
            this = BlueFin::GlSetBase::Remove(*(void *)(j + 10768), 11);
LABEL_677:
            v453 = *(_DWORD **)(j + 10792);
            if (v453) {
              _DWORD *v453 = 3;
            }
            int v242 = 3;
            goto LABEL_680;
          }
          LODWORD(v265) = *(_DWORD *)(j + 9744);
          int v272 = *(_DWORD *)(j + 9828);
        }
        else
        {
          unsigned int v537 = v270;
        }
        uint64_t v573 = j + (v265 + 4) + 16;
        uint64_t v574 = 0;
        int v572 = 1;
        if (v272 != 2)
        {
          uint64_t v366 = *(void *)(j + 10400);
LABEL_558:
          if (!v366) {
            goto LABEL_587;
          }
          this = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)&v572, 5u);
          HIDWORD(v574) = 32 * (HIDWORD(v574) == 32);
          if ((this & 0x8000) == 0)
          {
            int v383 = 0;
            int v384 = (unsigned __int16)this;
            while (1)
            {
              for (uint64_t m = 0; m != 15; ++m)
              {
                unsigned int v386 = BlueFin::GlPeLtoReaderBase::sbaseph_elements[m * 4];
                BOOL v387 = (v386 & 1) == 0;
                unsigned int v388 = v386 >> 1;
                this = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)&v572, v386 >> 1);
                int v389 = (int)(this << -(char)v388) >> -(char)v388;
                if (v387) {
                  int v389 = this;
                }
                v558[m] = v389;
              }
              unsigned int v390 = LOBYTE(v558[0]) - 33;
              __int16 v391 = v558[1];
              unsigned int v392 = v558[2];
              long long v393 = *(_OWORD *)&v558[4];
              long long v394 = *(_OWORD *)&v558[8];
              uint64_t v395 = *(void *)&v558[12];
              char v396 = v558[3];
              unsigned int v397 = v558[14];
              uint64_t j = (uint64_t)v536;
              BOOL v398 = HIDWORD(v574) == 32 || *((_DWORD *)v536 + 2457) == 2;
              int v399 = v398 ? HIDWORD(v574) : 0;
              HIDWORD(v574) = v399;
              if (v390 > 0x12) {
                break;
              }
              uint64_t v400 = *((void *)v536 + 1300) + 56 * (LOBYTE(v558[0]) - 33);
              *(unsigned char *)uint64_t v400 = v390;
              *(_WORD *)(v400 + 2) = v391;
              *(_DWORD *)(v400 + 4) = v392;
              *(unsigned char *)(v400 + 8) = v396;
              *(_OWORD *)(v400 + 12) = v393;
              *(_OWORD *)(v400 + 28) = v394;
              *(void *)(v400 + 44) = v395;
              *(_DWORD *)(v400 + 52) = v397;
              BOOL v73 = v383++ == v384;
              if (v73) {
                goto LABEL_574;
              }
            }
LABEL_587:
            GlCustomLog(11, "%s error code %d.%d (%s)\n", "LTO", *(_DWORD *)(j + 8), 3808, "internal");
            this = BlueFin::GlSetBase::Remove(*(void *)(j + 10768), 11);
            goto LABEL_681;
          }
LABEL_574:
          uint64_t j = (uint64_t)v536;
          if (*((_DWORD *)v536 + 2457) == 2 && *((_DWORD *)v536 + 2460) != *((_DWORD *)v536 + 2440))
          {
            this = BlueFin::GlPeLtoReaderBase::readDynamicRange((BlueFin::GlPeBitReader *)&v572, v534, 15);
            uint64_t j = (uint64_t)v536;
          }
          goto LABEL_856;
        }
        uint64_t v366 = *(void *)(j + 10400);
        if (!*(_DWORD *)(j + 9836)) {
          goto LABEL_558;
        }
        if (!v366) {
          goto LABEL_858;
        }
        this = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)&v572, 5u);
        HIDWORD(v574) = 32 * (HIDWORD(v574) == 32);
        v367 = &v538[12];
        *(void *)v538 = &v538[12];
        v538[8] = 3;
        *(void *)&v538[12] = 0;
        int v539 = 0;
        if ((this & 0x8000) != 0)
        {
          int v382 = 1;
          uint64_t j = (uint64_t)v536;
        }
        else
        {
          int v368 = 0;
          int v369 = (unsigned __int16)this;
          while (1)
          {
            for (unint64_t n = 0; n != 60; n += 4)
              this = BlueFin::GlPeLtoReaderBase::uncompress_field((unsigned __int16)v534[n / 2], (BlueFin::GlPeBitReader *)&v572, (int *)&v558[n / 4]);
            int8x8_t v371 = *(int8x8_t *)v558;
            if ((LOBYTE(v558[0]) - 33) > 0x12u) {
              break;
            }
            uint64_t v372 = *((void *)v536 + 1300);
            if (*(unsigned __int8 *)(v372 + 56 * (LOBYTE(v558[0]) - 33)) != 255)
            {
              unint64_t v373 = 0;
              unsigned int v374 = v558[2];
              unsigned int v375 = LOBYTE(v558[3]);
              long long v376 = *(_OWORD *)&v558[4];
              long long v377 = *(_OWORD *)&v558[8];
              uint64_t v378 = *(void *)&v558[12];
              unsigned int v379 = v558[14];
              v558[0] = (*(unsigned char *)(v372 - 56) + 33);
              v558[1] = *(unsigned __int16 *)(v372 - 54);
              v558[2] = *(_DWORD *)(v372 - 52);
              v558[3] = *(unsigned __int8 *)(v372 - 48);
              *(_OWORD *)&v558[4] = *(_OWORD *)(v372 - 44);
              *(_OWORD *)&v558[8] = *(_OWORD *)(v372 - 28);
              *(void *)&v558[12] = *(void *)(v372 - 12);
              v558[14] = *(_DWORD *)(v372 - 4);
              *(int8x8_t *)v540 = vand_s8(v371, (int8x8_t)0xFFFF000000FFLL);
              v540[2] = v374;
              v540[3] = v375;
              long long v541 = v376;
              long long v542 = v377;
              *(void *)&long long v543 = v378;
              DWORD2(v543) = v379;
              do
              {
                __int16 v380 = v534[v373 / 2];
                if (v380)
                {
                  unsigned int v381 = v540[v373 / 4];
                  if ((v380 & 2) != 0) {
                    v381 += v558[v373 / 4];
                  }
                  v558[v373 / 4] = v381;
                }
                v373 += 4;
              }
              while (v373 != 60);
              *(unsigned char *)(v372 - 56) = LOBYTE(v558[0]) - 33;
              *(_WORD *)(v372 - 54) = v558[1];
              *(_DWORD *)(v372 - 52) = v558[2];
              *(unsigned char *)(v372 - 48) = v558[3];
              *(_OWORD *)(v372 - 44) = *(_OWORD *)&v558[4];
              *(_OWORD *)(v372 - 28) = *(_OWORD *)&v558[8];
              *(void *)(v372 - 12) = *(void *)&v558[12];
              *(_DWORD *)(v372 - 4) = v558[14];
              *(_DWORD *)(*(void *)v538 + 0x3FFFFFFFCLL) |= 0x80000000;
            }
            BOOL v73 = v368++ == v369;
            if (v73)
            {
              int v382 = 1;
              goto LABEL_850;
            }
          }
          int v382 = 0;
LABEL_850:
          uint64_t j = (uint64_t)v536;
          v367 = *(unsigned char **)v538;
        }
        uint64_t v484 = 0;
        unsigned int v485 = 0;
        do
        {
          if ((((unint64_t)*(unsigned int *)&v367[4 * (v485 >> 5)] >> v485) & 1) == 0) {
            *(unsigned char *)(*(void *)(j + 10400) + v484) = -1;
          }
          ++v485;
          v484 += 56;
        }
        while (v484 != 1064);
        if (!v382)
        {
LABEL_858:
          this = BlueFin::GlPeLtoReaderBase::reportError((BlueFin::GlPeLtoReaderBase *)j, 3798, (const char *)v7);
          uint64_t j = (uint64_t)v536;
          goto LABEL_671;
        }
LABEL_856:
        LODWORD(v265) = *(_DWORD *)(j + 9744);
        int v273 = *(_DWORD *)(j + 9760);
LABEL_857:
        *(_DWORD *)(j + 9744) = v265 + v271;
        *(_DWORD *)(j + 976BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v273 + v271;
        int v252 = *(_DWORD *)(j + 9832);
        int v253 = *(_DWORD *)(j + 9836) + 1;
        *(_DWORD *)(j + 9836) = v253;
        goto LABEL_880;
      case 15:
        uint64_t v264 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v264);
        unsigned int v105 = (unsigned int *)(j + v264 + 16);
        if (v7 <= 3) {
          goto LABEL_909;
        }
        *(_DWORD *)(j + 9772) = *v105;
        *(_DWORD *)(j + 9776) = 0;
        *(_DWORD *)(j + 8) = 16;
        int v258 = v264 + 4;
        int v259 = *(_DWORD *)(j + 9760) + 4;
        goto LABEL_437;
      case 16:
        uint64_t v104 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v104);
        unsigned int v105 = (unsigned int *)(j + v104 + 16);
        if (v7 < 0xC) {
          goto LABEL_909;
        }
        if (*v105 == 10) {
          *(_DWORD *)(j + 9784) = *(_DWORD *)(j + (v104 + 4) + 16);
        }
        *(_DWORD *)(j + 9744) = v104 + 8;
        *(_DWORD *)(j + 9760) += 8;
        int v106 = *(_DWORD *)(j + 9772);
        int v107 = *(_DWORD *)(j + 9776) + 1;
        *(_DWORD *)(j + 9776) = v107;
        if (v106 != v107) {
          continue;
        }
        _DWORD *v508 = 0;
        int v108 = 17;
        goto LABEL_882;
      case 17:
        uint64_t v6 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v6);
        if (v7 < 4) {
          goto LABEL_907;
        }
        unsigned int v249 = *(_DWORD *)(j + v6 + 16);
        unsigned int v250 = v249 + 4;
        if (v7 < v249 + 4) {
          goto LABEL_907;
        }
        int v251 = *(_DWORD *)(j + 9760);
        if (*(unsigned char *)v522 || *(_DWORD *)(j + 9784) != v251) {
          goto LABEL_317;
        }
        unsigned int v537 = 0;
        BlueFin::GlCryptoDes::des_set_key(qword_263BB37A4, (uint64_t)&v572, v7, (unsigned __int8 *)a4);
        uint64_t v575 = 0x5B61B6B36832FBFBLL;
        char v576 = 0;
        BlueFin::GlCryptoDes::decrypt_update((uint64_t)&v572, v540, &v537, (uint64_t)&qword_263BB37A4[2] + 4, 0x118u);
        v537 -= *((unsigned __int8 *)v540 + v537 - 1);
        BlueFin::GlCryptoRsa::bin2key((uint64_t)v558, v540, 0x118u);
        this = (uint64_t)BlueFin::GlCryptoRsa::decrypt(v558, (uint64_t)v538, &v537, (uint64_t)v536 + (*((_DWORD *)v536 + 2436) + 4) + 16, v249);
        uint64_t v557 = 0;
        long long v555 = 0u;
        long long v556 = 0u;
        long long v553 = 0u;
        long long v554 = 0u;
        long long v551 = 0u;
        long long v552 = 0u;
        long long v549 = 0u;
        long long v550 = 0u;
        long long v547 = 0u;
        long long v548 = 0u;
        long long v545 = 0u;
        long long v546 = 0u;
        long long v543 = 0u;
        long long v544 = 0u;
        long long v541 = 0u;
        long long v542 = 0u;
        *(_OWORD *)v540 = 0u;
        long long v570 = 0u;
        memset(v571, 0, sizeof(v571));
        long long v568 = 0u;
        long long v569 = 0u;
        long long v566 = 0u;
        long long v567 = 0u;
        long long v564 = 0u;
        long long v565 = 0u;
        long long v562 = 0u;
        long long v563 = 0u;
        long long v560 = 0u;
        long long v561 = 0u;
        long long v559 = 0u;
        memset(v558, 0, sizeof(v558));
        if (v537 == 16)
        {
          *(_OWORD *)(v522 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *(_OWORD *)v538;
          *(unsigned char *)uint64_t v522 = 1;
          uint64_t j = (uint64_t)v536;
          LODWORD(v6) = *((_DWORD *)v536 + 2436);
          int v251 = *((_DWORD *)v536 + 2440);
LABEL_317:
          *(_DWORD *)(j + 9744) = v6 + v250;
          *(_DWORD *)(j + 976BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v251 + v250;
          int v252 = *(_DWORD *)(j + 9772);
          int v253 = *(_DWORD *)(j + 9776) + 1;
          *(_DWORD *)(j + 9776) = v253;
          goto LABEL_880;
        }
        GlCustomLog(11, "%s error code %d.%d (%s)\n", "LTO", *((_DWORD *)v536 + 2), 4252, "license");
        this = BlueFin::GlSetBase::Remove(*((void *)v536 + 1346), 11);
LABEL_676:
        uint64_t j = (uint64_t)v536;
        goto LABEL_677;
      case 18:
        uint64_t v111 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v111);
        unsigned int v112 = *(_DWORD *)(j + 9756);
        if (v7 < v112)
        {
          uint64_t v494 = j + v111;
          goto LABEL_908;
        }
        if (*(void *)(j + 10432))
        {
          *(void *)&v558[2] = j + v111 + 16;
          *(void *)&v558[4] = 0;
          v558[0] = 0;
          ***(_DWORD ***)(j + 10768) |= 2u;
          **((unsigned char **)v536 + 1304) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 5u);
          *(_WORD *)(*((void *)v536 + 1304) + 2) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0xBu);
          int v113 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x16u);
          uint64_t v114 = *((void *)v536 + 1304);
          *(_DWORD *)(v114 + 8) = v113 << 10 >> 10;
          *(unsigned char *)(v114 + 12) = 1;
          this = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 2u);
          uint64_t v111 = *((void *)v536 + 1304);
          *(unsigned char *)(v111 + 13) = (int)(this << 30) >> 30;
          uint64_t j = (uint64_t)v536;
          unsigned int v112 = *((_DWORD *)v536 + 2439);
          if (v112 < 6)
          {
            *(_DWORD *)(v111 + 4) = 0;
          }
          else
          {
            this = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x20u);
            uint64_t j = (uint64_t)v536;
            uint64_t v111 = *((void *)v536 + 1304);
            *(_DWORD *)(v111 + 4) = this;
            unsigned int v112 = *((_DWORD *)v536 + 2439);
          }
          *(unsigned char *)(v111 + 14) = 0;
          *(_DWORD *)(v111 + 16) = 0;
          LODWORD(v11BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *(_DWORD *)(j + 9744);
        }
        int v226 = v112 + v111;
        goto LABEL_433;
      case 19:
        uint64_t v6 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v6);
        if (v7 <= 0xC) {
          goto LABEL_907;
        }
        if (*(void *)(j + 10424))
        {
          *(void *)&v558[2] = j + v6 + 16;
          *(void *)&v558[4] = 0;
          v558[0] = 0;
          ***(_DWORD ***)(j + 10768) |= 4u;
          **((_DWORD **)v536 + 1303) = (int)(BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x18u) << 8) >> 8;
          uint64_t v256 = (char *)v536 + 10424;
          *(_DWORD *)(*((void *)v536 + 1303) + 4) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x20u);
          *(unsigned char *)(*(void *)v256 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 8u);
          *(unsigned char *)(*(void *)v256 + 8) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 8u);
          *(unsigned char *)(*(void *)v256 + 9) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 8u);
          *(unsigned char *)(*(void *)v256 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 8u);
          *(unsigned char *)(*(void *)v256 + 12) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 8u);
          this = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 8u);
          *(unsigned char *)(*(void *)v256 + 13) = this;
          uint64_t j = (uint64_t)v536;
          LODWORD(v6) = *((_DWORD *)v536 + 2436);
        }
        int v226 = v6 + 13;
        goto LABEL_433;
      case 20:
        uint64_t v6 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v6);
        unsigned int v38 = *(_DWORD *)(j + 9756);
        unsigned int v105 = (unsigned int *)(j + v6 + 16);
        if (v7 < v38) {
          goto LABEL_909;
        }
        *(void *)&v540[2] = j + v6 + 16;
        *(void *)&long long v541 = 0;
        v540[0] = 0;
        if (!*(void *)(j + 10240)) {
          goto LABEL_426;
        }
        this = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v540, 8u);
        int v139 = this;
        if ((int)this >= 1)
        {
          int v140 = 0;
          do
          {
            for (iuint64_t i = 0; ii != 14; ++ii)
            {
              unsigned int v142 = BlueFin::GlPeLtoReaderBase::glns_almanac_elements[ii * 4];
              BOOL v143 = (v142 & 1) == 0;
              unsigned int v144 = v142 >> 1;
              this = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v540, v142 >> 1);
              int v145 = (int)(this << -(char)v144) >> -(char)v144;
              if (v143) {
                int v145 = this;
              }
              v558[ii] = v145;
            }
            char v146 = v558[1];
            uint64_t v147 = LOBYTE(v558[1]) - 1;
            if (v147 <= 0x17)
            {
              char v148 = v558[2];
              int v149 = SLOBYTE(v558[2]);
              if ((v558[2] & 0xF0) != 0) {
                int v149 = SLOBYTE(v558[2]) - 32;
              }
              if ((v149 + 7) <= 0xD)
              {
                long long v150 = *(_OWORD *)&v558[3];
                char v151 = v558[7];
                __int16 v152 = v558[8];
                __int16 v153 = v558[9];
                char v154 = v558[10];
                __int16 v155 = v558[11];
                char v156 = v558[12];
                this = *((void *)v536 + 1280);
                uint64_t v157 = this + 32 * v147;
                *(_WORD *)uint64_t v157 = v558[0];
                *(unsigned char *)(v157 + 2) = v146;
                *(unsigned char *)(v157 + 3) = v148;
                *(_OWORD *)(v157 + 4) = v150;
                *(unsigned char *)(v157 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v151;
                *(_WORD *)(v157 + 22) = v152;
                *(_WORD *)(v157 + 24) = v153;
                *(_WORD *)(v157 + 26) = v155;
                *(unsigned char *)(v157 + 28) = v156;
                *(unsigned char *)(v157 + 29) = 1;
                *(unsigned char *)(v157 + 3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v154;
              }
            }
            ++v140;
          }
          while (v140 != v139);
        }
        uint64_t j = (uint64_t)v536;
        int v45 = (unsigned int *)**((void **)v536 + 1346);
        unsigned int v46 = *v45 | 0x10000;
        goto LABEL_404;
      case 21:
        uint64_t v137 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v137);
        unsigned int v105 = (unsigned int *)(j + v137 + 16);
        if (v7 <= 3) {
          goto LABEL_909;
        }
        unsigned int v138 = *v105;
        *(_WORD *)(v522 + 10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *v105;
        *(_WORD *)(v522 + 102) = HIWORD(v138) + 1;
        int v123 = v137 + 4;
        int v124 = 22;
        goto LABEL_219;
      case 22:
        unsigned int v254 = *(unsigned __int16 *)(v522 + 102);
        uint64_t v183 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v183);
        unsigned int v105 = (unsigned int *)(j + v183 + 16);
        if (v7 < 24 * v254) {
          goto LABEL_909;
        }
        int v184 = 24 * v254;
        *(void *)&v540[2] = j + v183 + 16;
        *(void *)&long long v541 = 0;
        v540[0] = 0;
        if (v254 > 0x3F || *(void *)(j + 10352) == 0) {
          goto LABEL_324;
        }
        if (!v254) {
          goto LABEL_470;
        }
        int v327 = 0;
        while (1)
        {
          for (juint64_t j = 0; jj != 13; ++jj)
          {
            unsigned int v329 = BlueFin::GlPeLtoReaderBase::bds_almanac_elements[jj * 4];
            BOOL v330 = (v329 & 1) == 0;
            unsigned int v331 = v329 >> 1;
            this = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v540, v329 >> 1);
            int v332 = (int)(this << -(char)v331) >> -(char)v331;
            if (v330) {
              int v332 = this;
            }
            v558[jj] = v332;
          }
          __int16 v333 = v558[1];
          char v334 = v558[2];
          __int16 v335 = v558[3];
          __int16 v336 = v558[4];
          long long v337 = *(_OWORD *)&v558[5];
          DWORD1(v54BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 32 * (DWORD1(v541) == 32);
          uint64_t j = (uint64_t)v536;
          if (LOBYTE(v558[0]) > 0x3Eu) {
            goto LABEL_472;
          }
          int16x4_t v338 = vmovn_s32(*(int32x4_t *)&v558[9]);
          uint64_t v339 = *((void *)v536 + 1294) + 36 * LOBYTE(v558[0]);
          *(unsigned char *)uint64_t v339 = v558[0];
          *(_WORD *)(v339 + 2) = v333;
          *(unsigned char *)(v339 + 4) = v334;
          *(_WORD *)(v339 + 6) = v335;
          *(_WORD *)(v339 + 8) = v336;
          *(_OWORD *)(v339 + 12) = v337;
          LODWORD(v34BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = vrev32_s16(v338).u32[0];
          HIDWORD(v34BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v338.i32[1];
          *(void *)(v339 + 28) = v340;
          if (++v327 == v254)
          {
LABEL_470:
            int v199 = **(int ***)(j + 10768);
            int v200 = *v199 | 0x100000;
LABEL_471:
            *int v199 = v200;
            goto LABEL_472;
          }
        }
      case 23:
        uint64_t v6 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v6);
        unsigned int v81 = *(_DWORD *)(j + 9756);
        if (v7 < v81) {
          goto LABEL_907;
        }
        if (!*(void *)(j + 10440)) {
          goto LABEL_410;
        }
        *(void *)&v558[2] = j + v6 + 16;
        *(void *)&v558[4] = 0;
        v558[0] = 0;
        ***(_DWORD ***)(j + 10768) |= 8u;
        **((_DWORD **)v536 + 1305) = (int)(BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x18u) << 8) >> 8;
        char v280 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 8u);
        v281 = (char *)v536 + 10440;
        *(_DWORD *)(*((void *)v536 + 1305) + 4) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x20u);
        *(unsigned char *)(*(void *)v281 + 8) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 8u);
        *(unsigned char *)(*(void *)v281 + 9) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 8u);
        *(unsigned char *)(*(void *)v281 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 8u);
        this = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 8u);
        *(unsigned char *)(*(void *)v281 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = this;
        if (!v280) {
          goto LABEL_409;
        }
        this = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0xDu);
        uint64_t v110 = *((void *)v536 + 1305);
LABEL_379:
        *(_WORD *)(v110 + 12) = this;
        goto LABEL_409;
      case 24:
        uint64_t v6 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v6);
        unsigned int v81 = *(_DWORD *)(j + 9756);
        if (v7 < v81) {
          goto LABEL_907;
        }
        if (!*(void *)(j + 10448)) {
          goto LABEL_410;
        }
        *(void *)&v558[2] = j + v6 + 16;
        *(void *)&v558[4] = 0;
        v558[0] = 0;
        ***(_DWORD ***)(j + 10768) |= 0x10u;
        **((_WORD **)v536 + 1306) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x10u);
        float v109 = (char *)v536 + 10448;
        *(_WORD *)(*((void *)v536 + 1306) + 2) = (__int16)(4
                                                             * BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0xEu)) >> 2;
        v558[5] = 32 * (v558[5] == 32);
        *(_WORD *)(*(void *)v109 + 4) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x10u);
        *(_WORD *)(*(void *)v109 + 6) = (__int16)(4
                                                    * BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0xEu)) >> 2;
        v558[5] = 32 * (v558[5] == 32);
        *(_WORD *)(*(void *)v109 + 8) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x10u);
        *(_WORD *)(*(void *)v109 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = (__int16)(4
                                                     * BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0xEu)) >> 2;
        v558[5] = 32 * (v558[5] == 32);
        this = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0xDu);
        uint64_t v110 = *((void *)v536 + 1306);
        goto LABEL_379;
      case 26:
        uint64_t v121 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v121);
        unsigned int v105 = (unsigned int *)(j + v121 + 16);
        if (v7 <= 3) {
          goto LABEL_909;
        }
        unsigned int v122 = *v105;
        *(_WORD *)(v522 + 104) = *v105;
        *(_WORD *)(v522 + 106) = HIWORD(v122) + 1;
        int v123 = v121 + 4;
        int v124 = 27;
LABEL_219:
        *(_DWORD *)(j + 8) = v124;
        *(_DWORD *)(j + 9744) = v123;
        continue;
      case 27:
        unsigned int v182 = *(unsigned __int16 *)(v522 + 106);
        uint64_t v183 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v183);
        unsigned int v105 = (unsigned int *)(j + v183 + 16);
        if (v7 < 20 * v182) {
          goto LABEL_909;
        }
        int v184 = 20 * v182;
        *(void *)&v540[2] = j + v183 + 16;
        *(void *)&long long v541 = 0;
        v540[0] = 0;
        if (v182 > 0x24 || *(void *)(j + 10384) == 0)
        {
LABEL_324:
          int v226 = v183 + v184;
        }
        else
        {
          if (!v182)
          {
LABEL_233:
            int v199 = **(int ***)(j + 10768);
            int v200 = *v199 | 0x400000;
            goto LABEL_471;
          }
          int v186 = 0;
          while (1)
          {
            for (kunint64_t k = 0; kk != 13; ++kk)
            {
              unsigned int v188 = BlueFin::GlPeLtoReaderBase::gal_almanac_elements[kk * 4];
              BOOL v189 = (v188 & 1) == 0;
              unsigned int v190 = v188 >> 1;
              this = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v540, v188 >> 1);
              int v191 = (int)(this << -(char)v190) >> -(char)v190;
              if (v189) {
                int v191 = this;
              }
              v558[kk] = v191;
            }
            __int16 v192 = v558[9];
            int16x8_t v193 = *(int16x8_t *)&v558[5];
            int16x8_t v194 = *(int16x8_t *)&v558[1];
            __int16 v195 = v558[10];
            char v196 = v558[11];
            char v197 = v558[12];
            DWORD1(v54BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 32 * (DWORD1(v541) == 32);
            uint64_t j = (uint64_t)v536;
            if (LOBYTE(v558[0]) > 0x23u) {
              break;
            }
            uint64_t v198 = *((void *)v536 + 1298) + 24 * LOBYTE(v558[0]);
            *(unsigned char *)uint64_t v198 = v558[0];
            *(int16x8_t *)(v198 + 2) = vuzp1q_s16(v194, v193);
            *(_WORD *)(v198 + 18) = v195;
            *(_WORD *)(v198 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v192;
            *(unsigned char *)(v198 + 22) = v196;
            *(unsigned char *)(v198 + 23) = v197;
            if (++v186 == v182) {
              goto LABEL_233;
            }
          }
LABEL_472:
          int v226 = *(_DWORD *)(j + 9744) + v184;
        }
        goto LABEL_433;
      case 28:
        uint64_t v6 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v6);
        unsigned int v81 = *(_DWORD *)(j + 9756);
        if (v7 < v81) {
          goto LABEL_907;
        }
        if (!*(void *)(j + 10464)) {
          goto LABEL_410;
        }
        *(void *)&v558[2] = j + v6 + 16;
        *(void *)&v558[4] = 0;
        v558[0] = 0;
        ***(_DWORD ***)(j + 10768) |= 0x20u;
        **((_DWORD **)v536 + 1308) = (int)(BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x18u) << 8) >> 8;
        BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 8u);
        v303 = (char *)v536 + 10464;
        *(_DWORD *)(*((void *)v536 + 1308) + 4) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x20u);
        *(unsigned char *)(*(void *)v303 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 8u);
        *(unsigned char *)(*(void *)v303 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 8u);
        *(unsigned char *)(*(void *)v303 + 12) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 3u);
        *(unsigned char *)(*(void *)v303 + 13) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 8u);
        v558[5] = 32 * (v558[5] == 32);
        *(unsigned char *)(*(void *)v303 + 8) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 8u);
        this = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 8u);
        *(unsigned char *)(*(void *)v303 + 9) = this;
        goto LABEL_409;
      case 29:
        uint64_t v6 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v6);
        unsigned int v81 = *(_DWORD *)(j + 9756);
        if (v7 < v81) {
          goto LABEL_907;
        }
        if (!*(void *)(j + 10472)) {
          goto LABEL_410;
        }
        *(void *)&v558[2] = j + v6 + 16;
        *(void *)&v558[4] = 0;
        v558[0] = 0;
        ***(_DWORD ***)(j + 10768) |= 0x40u;
        *(_WORD *)(*((void *)v536 + 1309) + 2) = (__int16)(16
                                                             * BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0xCu)) >> 4;
        BOOL v168 = (char *)v536 + 10472;
        **((_WORD **)v536 + 1309) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x10u);
        v558[5] = 32 * (v558[5] == 32);
        *(unsigned char *)(*(void *)v168 + 4) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 8u);
        this = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 6u);
        *(unsigned char *)(*(void *)v168 + 5) = this;
        goto LABEL_409;
      case 32:
        uint64_t v6 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v6);
        unsigned int v81 = *(_DWORD *)(j + 9756);
        if (v7 < v81) {
          goto LABEL_907;
        }
        if (!*(void *)(j + 10496)) {
          goto LABEL_410;
        }
        *(void *)&v558[2] = j + v6 + 16;
        *(void *)&v558[4] = 0;
        v558[0] = 0;
        **((_DWORD **)v536 + 1312) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x20u);
        *(_DWORD *)(*((void *)v536 + 1312) + 4) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x20u);
        this = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x20u);
        *(_DWORD *)(*((void *)v536 + 1312) + 8) = this;
        goto LABEL_409;
      case 33:
        uint64_t v6 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v6);
        unsigned int v81 = *(_DWORD *)(j + 9756);
        if (v7 < v81) {
          goto LABEL_907;
        }
        if (!*(void *)(j + 10744)) {
          goto LABEL_410;
        }
        *(void *)&v558[2] = j + v6 + 16;
        *(void *)&v558[4] = 0;
        v558[0] = 0;
        ***(_DWORD ***)(j + 10768) |= 0x200u;
        **((_DWORD **)v536 + 1343) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x20u);
        v282 = (char *)v536 + 10744;
        *(_DWORD *)(*((void *)v536 + 1343) + 4) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x20u);
        *(_DWORD *)(*(void *)v282 + 8) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x20u);
        this = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x20u);
        *(_DWORD *)(*(void *)v282 + 12) = this;
LABEL_409:
        uint64_t j = (uint64_t)v536;
        unsigned int v81 = *((_DWORD *)v536 + 2439);
        LODWORD(v6) = *((_DWORD *)v536 + 2436);
LABEL_410:
        int v226 = v81 + v6;
        goto LABEL_433;
      case 34:
        uint64_t v6 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v6);
        unsigned int v38 = *(_DWORD *)(j + 9756);
        if (v7 < v38) {
          goto LABEL_907;
        }
        if (!*(void *)(j + 10752)) {
          goto LABEL_426;
        }
        *(void *)&v558[2] = j + v6 + 16;
        *(void *)&v558[4] = 0;
        v558[0] = 0;
        BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x10u);
        uint64_t v243 = 0;
        v558[5] = 32 * (v558[5] == 32);
        do
        {
          this = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 4u);
          *(unsigned char *)(*((void *)v536 + 1344) + v243++) = this;
        }
        while (v243 != 32);
        uint64_t j = (uint64_t)v536;
        int v45 = (unsigned int *)**((void **)v536 + 1346);
        unsigned int v46 = *v45 | 0x1000000;
        goto LABEL_404;
      case 35:
        uint64_t v6 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v6);
        unsigned int v38 = *(_DWORD *)(j + 9756);
        if (v7 < v38) {
          goto LABEL_907;
        }
        if (!*(void *)(j + 10760)) {
          goto LABEL_426;
        }
        *(void *)&v558[2] = j + v6 + 16;
        *(void *)&v558[4] = 0;
        v558[0] = 0;
        BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x10u);
        uint64_t v44 = 0;
        v558[5] = 32 * (v558[5] == 32);
        do
        {
          this = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 4u);
          *(unsigned char *)(*((void *)v536 + 1345) + v44++) = this;
        }
        while (v44 != 63);
        uint64_t j = (uint64_t)v536;
        int v45 = (unsigned int *)**((void **)v536 + 1346);
        unsigned int v46 = *v45 | 0x2000000;
        goto LABEL_404;
      case 36:
        uint64_t v6 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v6);
        unsigned int v38 = *(_DWORD *)(j + 9756);
        if (v7 < v38) {
          goto LABEL_907;
        }
        if (!*(void *)(j + 10216)) {
          goto LABEL_426;
        }
        *(void *)&v558[2] = j + v6 + 16;
        *(void *)&v558[4] = 0;
        v558[0] = 0;
        __int16 v288 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x10u);
        unsigned __int16 v524 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x10u);
        int v289 = 0;
        char v518 = 0;
        int v527 = v288 & 0xFFFE;
        do
        {
          unsigned __int8 v290 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 6u);
          int v291 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 1u);
          int v531 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x1Au);
          int v292 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x14u);
          int v293 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0xAu);
          __int16 v294 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0xBu);
          __int16 v295 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0xDu);
          __int16 v296 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0xDu);
          this = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0xAu);
          __int16 v297 = this;
          if (v527)
          {
            this = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0xDu);
            int v298 = (int)(this << 19) >> 19;
            char v299 = 1;
          }
          else
          {
            char v299 = 0;
            LOWORD(v298) = 0;
          }
          v558[5] = 32 * (v558[5] == 32);
          if (v291 == 1 && v290 <= 0x1Fu)
          {
            uint64_t v300 = *((void *)v536 + 1277);
            if (v300)
            {
              uint64_t v301 = v300 + 32 * v290;
              *(unsigned char *)uint64_t v301 = v290;
              *(_DWORD *)(v301 + 4) = 1;
              *(_DWORD *)(v301 + 8) = v531 << 6 >> 6;
              *(_DWORD *)(v301 + 12) = v292 << 12 >> 12;
              *(_DWORD *)(v301 + 16) = v293 << 22 >> 22;
              *(_WORD *)(v301 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v294;
              *(_WORD *)(v301 + 22) = (__int16)(8 * v295) >> 3;
              *(_WORD *)(v301 + 24) = (__int16)(8 * v296) >> 3;
              *(unsigned char *)(v301 + 26) = v299;
              *(_WORD *)(v301 + 28) = v298;
              ++v518;
              *(_WORD *)(v301 + 3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v297;
            }
          }
          ++v289;
        }
        while ((unsigned __int16)v289 <= v524);
        uint64_t j = (uint64_t)v536;
        if (!v518) {
          goto LABEL_405;
        }
        int v45 = (unsigned int *)**((void **)v536 + 1346);
        unsigned int v46 = *v45 | 0x4000000;
        goto LABEL_404;
      case 37:
        uint64_t v6 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v6);
        unsigned int v38 = *(_DWORD *)(j + 9756);
        if (v7 < v38) {
          goto LABEL_907;
        }
        if (!*(void *)(j + 10392)) {
          goto LABEL_426;
        }
        *(void *)&v558[2] = j + v6 + 16;
        *(void *)&v558[4] = 0;
        v558[0] = 0;
        BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x10u);
        unsigned __int16 v82 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x10u);
        int v83 = 0;
        char v530 = 0;
        do
        {
          unsigned __int8 v84 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 6u);
          int v85 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 1u);
          int v86 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x1Fu);
          int v87 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x15u);
          int v88 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 6u);
          __int16 v89 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0xEu);
          __int16 v90 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0xAu);
          __int16 v91 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0xAu);
          this = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0xCu);
          v558[5] = 32 * (v558[5] == 32);
          if (v85 == 1 && v84 <= 0x23u)
          {
            uint64_t v92 = *((void *)v536 + 1299);
            if (v92)
            {
              uint64_t v93 = v92 + 28 * v84;
              *(unsigned char *)uint64_t v93 = v84;
              *(_DWORD *)(v93 + 4) = 1;
              *(_DWORD *)(v93 + 8) = (2 * v86) >> 1;
              *(_DWORD *)(v93 + 12) = v87 << 11 >> 11;
              *(_DWORD *)(v93 + 16) = v88 << 26 >> 26;
              *(_WORD *)(v93 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v89;
              *(_WORD *)(v93 + 22) = (__int16)(v90 << 6) >> 6;
              *(_WORD *)(v93 + 24) = (__int16)(v91 << 6) >> 6;
              *(_WORD *)(v93 + 26) = this;
              ++v530;
            }
          }
          ++v83;
        }
        while ((unsigned __int16)v83 <= v82);
        uint64_t j = (uint64_t)v536;
        if (!v530) {
          goto LABEL_405;
        }
        int v45 = (unsigned int *)**((void **)v536 + 1346);
        unsigned int v46 = *v45 | 0x8000000;
        goto LABEL_404;
      case 38:
        uint64_t v6 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v6);
        unsigned int v38 = *(_DWORD *)(j + 9756);
        if (v7 < v38) {
          goto LABEL_907;
        }
        if (!*(void *)(j + 10296)) {
          goto LABEL_426;
        }
        *(void *)&v558[2] = j + v6 + 16;
        *(void *)&v558[4] = 0;
        v558[0] = 0;
        __int16 v47 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x10u);
        unsigned __int16 v523 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x10u);
        int v48 = 0;
        char v517 = 0;
        int v526 = v47 & 0xFFFE;
        do
        {
          unsigned __int8 v49 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 6u);
          int v50 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 1u);
          int v529 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x1Au);
          int v51 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x14u);
          int v52 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0xAu);
          __int16 v53 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0xBu);
          __int16 v54 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0xDu);
          __int16 v55 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0xDu);
          this = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0xAu);
          __int16 v56 = this;
          if (v526)
          {
            this = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0xDu);
            int v57 = (int)(this << 19) >> 19;
            char v58 = 1;
          }
          else
          {
            char v58 = 0;
            LOWORD(v57) = 0;
          }
          v558[5] = 32 * (v558[5] == 32);
          if (v50 == 1 && v49 <= 9u)
          {
            uint64_t v59 = *((void *)v536 + 1287);
            if (v59)
            {
              uint64_t v60 = v59 + 32 * v49;
              *(unsigned char *)uint64_t v60 = v49;
              *(_DWORD *)(v60 + 4) = 1;
              *(_DWORD *)(v60 + 8) = v529 << 6 >> 6;
              *(_DWORD *)(v60 + 12) = v51 << 12 >> 12;
              *(_DWORD *)(v60 + 16) = v52 << 22 >> 22;
              *(_WORD *)(v60 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v53;
              *(_WORD *)(v60 + 22) = (__int16)(8 * v54) >> 3;
              *(_WORD *)(v60 + 24) = (__int16)(8 * v55) >> 3;
              *(unsigned char *)(v60 + 26) = v58;
              *(_WORD *)(v60 + 28) = v57;
              ++v517;
              *(_WORD *)(v60 + 3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v56;
            }
          }
          ++v48;
        }
        while ((unsigned __int16)v48 <= v523);
        uint64_t j = (uint64_t)v536;
        if (!v517) {
          goto LABEL_405;
        }
        int v45 = (unsigned int *)**((void **)v536 + 1346);
        unsigned int v46 = *v45 | 0x10000000;
        goto LABEL_404;
      case 39:
        uint64_t v6 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v6);
        unsigned int v38 = *(_DWORD *)(j + 9756);
        if (v7 < v38) {
          goto LABEL_907;
        }
        if (!*(void *)(j + 10360)) {
          goto LABEL_426;
        }
        *(void *)&v558[2] = j + v6 + 16;
        *(void *)&v558[4] = 0;
        v558[0] = 0;
        BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x10u);
        unsigned __int16 v94 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x10u);
        int v95 = 0;
        char v96 = 0;
        do
        {
          unsigned __int8 v97 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 6u);
          int v98 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 3u);
          __int16 v99 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0xBu);
          __int16 v100 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0xCu);
          __int16 v101 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0xCu);
          this = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0xDu);
          v558[5] = 32 * (v558[5] == 32);
          if (v98 == 1 && v97 <= 0x3Eu)
          {
            uint64_t v102 = *((void *)v536 + 1295);
            if (v102)
            {
              uint64_t v103 = v102 + 16 * v97;
              *(unsigned char *)uint64_t v103 = v97;
              *(_DWORD *)(v103 + 4) = 1;
              *(_WORD *)(v103 + 8) = v99;
              *(_WORD *)(v103 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = (__int16)(16 * v100) >> 4;
              *(_WORD *)(v103 + 12) = (__int16)(16 * v101) >> 4;
              *(_WORD *)(v103 + 14) = this;
              ++v96;
            }
          }
          ++v95;
        }
        while ((unsigned __int16)v95 <= v94);
        uint64_t j = (uint64_t)v536;
        if (!v96) {
          goto LABEL_405;
        }
        int v45 = (unsigned int *)**((void **)v536 + 1346);
        unsigned int v46 = *v45 | 0x20000000;
        goto LABEL_404;
      case 40:
        uint64_t v6 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v6);
        unsigned int v38 = *(_DWORD *)(j + 9756);
        if (v7 < v38) {
          goto LABEL_907;
        }
        if (!*(void *)(j + 10368)) {
          goto LABEL_426;
        }
        *(void *)&v558[2] = j + v6 + 16;
        *(void *)&v558[4] = 0;
        v558[0] = 0;
        BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x10u);
        unsigned __int16 v211 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x10u);
        int v212 = 0;
        char v213 = 0;
        do
        {
          unsigned __int8 v214 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 6u);
          int v215 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 3u);
          __int16 v216 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0xBu);
          __int16 v217 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0xCu);
          __int16 v218 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0xCu);
          this = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0xDu);
          v558[5] = 32 * (v558[5] == 32);
          if (v215 == 2 && v214 <= 0x3Eu)
          {
            uint64_t v219 = *((void *)v536 + 1296);
            if (v219)
            {
              uint64_t v220 = v219 + 16 * v214;
              *(unsigned char *)uint64_t v220 = v214;
              *(_DWORD *)(v220 + 4) = 2;
              *(_WORD *)(v220 + 8) = v216;
              *(_WORD *)(v220 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = (__int16)(16 * v217) >> 4;
              *(_WORD *)(v220 + 12) = (__int16)(16 * v218) >> 4;
              *(_WORD *)(v220 + 14) = this;
              ++v213;
            }
          }
          ++v212;
        }
        while ((unsigned __int16)v212 <= v211);
        uint64_t j = (uint64_t)v536;
        if (!v213) {
          goto LABEL_405;
        }
        int v45 = (unsigned int *)**((void **)v536 + 1346);
        unsigned int v46 = *v45 | 0x40000000;
        goto LABEL_404;
      case 41:
        uint64_t v6 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v6);
        unsigned int v38 = *(_DWORD *)(j + 9756);
        if (v7 < v38) {
          goto LABEL_907;
        }
        if (!*(void *)(j + 10224)) {
          goto LABEL_426;
        }
        *(void *)&v558[2] = j + v6 + 16;
        *(void *)&v558[4] = 0;
        v558[0] = 0;
        BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x10u);
        unsigned __int16 v283 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x10u);
        int v284 = 0;
        char v285 = 0;
        do
        {
          unsigned __int8 v286 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 6u);
          this = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0xDu);
          v558[5] = 32 * (v558[5] == 32);
          if (v286 <= 0x1Fu)
          {
            uint64_t v287 = *((void *)v536 + 1278) + 4 * v286;
            *(unsigned char *)uint64_t v287 = v286;
            *(_WORD *)(v287 + 2) = (__int16)(8 * this) >> 3;
            ++v285;
          }
          ++v284;
        }
        while ((unsigned __int16)v284 <= v283);
        uint64_t j = (uint64_t)v536;
        if (!v285) {
          goto LABEL_405;
        }
        int v45 = (unsigned int *)**((void **)v536 + 1346);
        unsigned int v46 = *v45 | 0x80000000;
LABEL_404:
        *int v45 = v46;
        goto LABEL_405;
      case 42:
        uint64_t v6 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v6);
        unsigned int v38 = *(_DWORD *)(j + 9756);
        if (v7 < v38) {
          goto LABEL_907;
        }
        if (!*(void *)(j + 10304)) {
          goto LABEL_426;
        }
        *(void *)&v558[2] = j + v6 + 16;
        *(void *)&v558[4] = 0;
        v558[0] = 0;
        BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x10u);
        unsigned __int16 v126 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x10u);
        int v127 = 0;
        char v128 = 0;
        do
        {
          unsigned __int8 v129 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 6u);
          this = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0xDu);
          v558[5] = 32 * (v558[5] == 32);
          if (v129 <= 9u)
          {
            uint64_t v130 = *((void *)v536 + 1288) + 4 * v129;
            *(unsigned char *)uint64_t v130 = v129;
            *(_WORD *)(v130 + 2) = (__int16)(8 * this) >> 3;
            ++v128;
          }
          ++v127;
        }
        while ((unsigned __int16)v127 <= v126);
        uint64_t j = (uint64_t)v536;
        if (!v128) {
          goto LABEL_405;
        }
        uint64_t v131 = **((void **)v536 + 1346);
        int v132 = *(_DWORD *)(v131 + 4) | 1;
        goto LABEL_739;
      case 43:
        uint64_t v6 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v6);
        unsigned int v38 = *(_DWORD *)(j + 9756);
        if (v7 < v38) {
          goto LABEL_907;
        }
        if (!*(void *)(j + 10480)) {
          goto LABEL_426;
        }
        *(void *)&v558[2] = j + v6 + 16;
        *(void *)&v558[4] = 0;
        v558[0] = 0;
        BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x10u);
        **((_WORD **)v536 + 131BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x10u);
        *(_DWORD *)(*((void *)v536 + 1310) + 4) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x20u);
        this = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x20u);
        uint64_t v269 = *((void *)v536 + 1310);
        *(_DWORD *)(v269 + 8) = this;
        if (*(unsigned char *)(v522 + 1364)) {
          *(_DWORD *)(v269 + 8) = -(int)this;
        }
        uint64_t j = (uint64_t)v536;
        uint64_t v6 = **((void **)v536 + 1346);
        int v43 = *(_DWORD *)(v6 + 4) | 2;
        goto LABEL_425;
      case 44:
        uint64_t v6 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v6);
        unsigned int v38 = *(_DWORD *)(j + 9756);
        if (v7 < v38) {
          goto LABEL_907;
        }
        if (!*(void *)(j + 10312)) {
          goto LABEL_426;
        }
        *(void *)&v558[2] = j + v6 + 16;
        *(void *)&v558[4] = 0;
        v558[0] = 0;
        BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x10u);
        **((_WORD **)v536 + 1289) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x10u);
        *(_DWORD *)(*((void *)v536 + 1289) + 4) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x20u);
        this = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x20u);
        uint64_t v278 = *((void *)v536 + 1289);
        *(_DWORD *)(v278 + 8) = this;
        if (*(unsigned char *)(v522 + 1364)) {
          *(_DWORD *)(v278 + 8) = -(int)this;
        }
        uint64_t j = (uint64_t)v536;
        uint64_t v6 = **((void **)v536 + 1346);
        int v43 = *(_DWORD *)(v6 + 4) | 4;
        goto LABEL_425;
      case 45:
        uint64_t v6 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v6);
        unsigned int v38 = *(_DWORD *)(j + 9756);
        if (v7 < v38) {
          goto LABEL_907;
        }
        if (!*(void *)(j + 10456)) {
          goto LABEL_426;
        }
        *(void *)&v558[2] = j + v6 + 16;
        *(void *)&v558[4] = 0;
        v558[0] = 0;
        BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x10u);
        **((_WORD **)v536 + 1307) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x10u);
        *(_DWORD *)(*((void *)v536 + 1307) + 4) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x20u);
        this = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x20u);
        uint64_t v308 = *((void *)v536 + 1307);
        *(_DWORD *)(v308 + 8) = this;
        if (*(unsigned char *)(v522 + 1364)) {
          *(_DWORD *)(v308 + 8) = -(int)this;
        }
        uint64_t j = (uint64_t)v536;
        uint64_t v6 = **((void **)v536 + 1346);
        int v43 = *(_DWORD *)(v6 + 4) | 8;
        goto LABEL_425;
      case 46:
        uint64_t v279 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v279);
        unsigned int v105 = (unsigned int *)(j + v279 + 16);
        if (v7 <= 7) {
          goto LABEL_909;
        }
        *(_DWORD *)(j + 10508) = *v105;
        *(_DWORD *)(j + 10512) = *(_DWORD *)(j + (v279 + 4) + 16);
        *(_DWORD *)(j + 10516) = 0;
        if (!*(_DWORD *)(j + 10504)) {
          *(_WORD *)(v522 + 814) = 0;
        }
        *(int32x2_t *)(j + 1052BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = vdup_n_s32(0xFEEDBEEF);
        *(_DWORD *)(j + 8) = 47;
        *(_DWORD *)(j + 9744) = v279 + 8;
        *(_DWORD *)(j + 9760) += 8;
        continue;
      case 47:
        uint64_t v304 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v304);
        unsigned int v105 = (unsigned int *)(j + v304 + 16);
        if (v7 < 8) {
          goto LABEL_909;
        }
        int v305 = *(_DWORD *)(j + 10524);
        if (*v105 <= *(_DWORD *)(j + 9800))
        {
          if (v305 == -17973521)
          {
            *(_DWORD *)(j + 1052BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_DWORD *)(j + (v304 + 4) + 16);
            int v305 = -17973521;
          }
        }
        else if (v305 == -17973521)
        {
          int v305 = *(_DWORD *)(j + 10520);
          if (v305 == -17973521) {
            int v305 = *(_DWORD *)(j + (v304 + 4) + 16);
          }
          *(_DWORD *)(j + 10524) = v305;
        }
        *(_DWORD *)(j + 9744) = v304 + 8;
        *(_DWORD *)(j + 9760) += 8;
        int v341 = *(_DWORD *)(j + 10512);
        int v342 = *(_DWORD *)(j + 10516) + 1;
        *(_DWORD *)(j + 10516) = v342;
        if (v341 != v342) {
          continue;
        }
        *(_DWORD *)(j + 10516) = 0;
        if (v305 != -17973521)
        {
          int v108 = 48;
          goto LABEL_882;
        }
        if (*(unsigned char *)(v522 + 812)) {
          v343 = "RTO";
        }
        else {
          v343 = "LTO";
        }
        int v496 = 5382;
        int v344 = 47;
        goto LABEL_490;
      case 48:
        uint64_t v6 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v6);
        if (v7 < 4) {
          goto LABEL_907;
        }
        unsigned int v115 = *(_DWORD *)(j + v6 + 16) + 4;
        if (v7 < v115) {
          goto LABEL_907;
        }
        unsigned int v116 = *(_DWORD *)(j + 9760);
        if (v116 < *(_DWORD *)(j + 10524)) {
          goto LABEL_143;
        }
        if (*(_DWORD *)(j + 10504))
        {
          v558[0] = *(unsigned __int8 *)(v522 + 812);
LABEL_487:
          v343 = "RTO";
          if (!*(unsigned char *)(v522 + 812)) {
            v343 = "LTO";
          }
          uint64_t j = (uint64_t)v536;
          int v344 = *((_DWORD *)v536 + 2);
          int v496 = 5422;
LABEL_490:
          GlCustomLog(11, "%s error code %d.%d (%s)\n", v343, v344, v496, "internal");
          goto LABEL_670;
        }
        unint64_t v354 = *(unsigned __int16 *)(v522 + 814);
        if (v354 <= 3)
        {
          unsigned int v355 = *(unsigned __int8 *)(v522 + 812);
          *(void *)&v558[2] = j + (v6 + 4) + 16;
          *(void *)&v558[4] = 0;
          v558[0] = v355;
          uint64_t v356 = *(void *)(j + 10536);
          if (!v356) {
            goto LABEL_487;
          }
          uint64_t v357 = v356 + 11520 * v354;
          *(_DWORD *)(v357 + 64) = 0;
          *(_DWORD *)uint64_t v357 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x20u);
          *(double *)(v357 + 56) = (double)(int)BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x20u)
                                 * 0.1;
          *(double *)(v357 + 8) = (double)(int)BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x20u) * 0.1;
          *(double *)(v357 + 16) = (double)(int)BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x20u)
                                 * 0.1;
          *(double *)(v357 + 24) = (double)(int)BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x20u)
                                 * 0.1;
          *(double *)(v357 + 32) = (double)(int)BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x20u)
                                 * 0.1;
          *(double *)(v357 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = (double)(int)BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x20u)
                                 * 0.1;
          *(double *)(v357 + 48) = (double)(int)BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x20u)
                                 * 0.1;
          int v358 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x20u);
          *(_DWORD *)(v357 + 68) = v358;
          if ((v358 - 57) < 0xFFFFFFC6) {
            goto LABEL_487;
          }
          unsigned int v359 = 0;
          v360 = (uint64_t *)(v356 + 11520 * v354 + 11496);
          do
          {
            uint64_t v361 = *v360;
            *(double *)(v361 + 200 * v359) = (double)(int)BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x20u)* 0.1;
            *(double *)(v361 + 200 * v359 + 8) = (double)(int)BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x20u)* 0.1;
            *(double *)(v361 + 200 * v359 + 16) = (double)(int)BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x20u)* 0.1;
            *(double *)(v361 + 200 * v359 + 24) = (double)(int)BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x20u)* 0.1;
            *(_WORD *)(v361 + 200 * v359 + 32) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x10u);
            __int16 v362 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x10u);
            uint64_t v363 = v361 + 200 * v359;
            *(_WORD *)(v363 + 34) = v362;
            v364 = (unsigned __int16 *)(v363 + 34);
            if ((v362 & 0xFFF0u) > 0x4F) {
              goto LABEL_487;
            }
            int v365 = 0;
            do
            {
              this = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x10u);
              *(_WORD *)(v361 + 200 * v359 + 2 * (unsigned __int16)v365++ + 36) = this;
            }
            while (*v364 >= (unsigned __int16)v365);
            v558[5] = 32 * (v558[5] == 32);
            ++v359;
          }
          while (v359 <= *(_DWORD *)(v357 + 68));
          uint64_t j = (uint64_t)v536;
          if (!*((_DWORD *)v536 + 2626)) {
            ++*(_WORD *)(v522 + 814);
          }
          LODWORD(v6) = *((_DWORD *)v536 + 2436);
          unsigned int v116 = *((_DWORD *)v536 + 2440);
        }
LABEL_143:
        *(_DWORD *)(j + 9744) = v6 + v115;
        *(_DWORD *)(j + 976BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v116 + v115;
        int v117 = *(_DWORD *)(j + 10512);
        int v118 = *(_DWORD *)(j + 10516) + 1;
        *(_DWORD *)(j + 10516) = v118;
        if (v117 != v118) {
          continue;
        }
        if (!*(_DWORD *)(j + 10504) && *(_WORD *)(v522 + 814))
        {
          uint64_t v119 = 8;
          if (*(unsigned char *)(v522 + 812))
          {
            int v120 = 0x80000;
          }
          else
          {
            uint64_t v119 = 4;
            int v120 = 16;
          }
          *(_DWORD *)(**(void **)(j + 10768) + v119) |= v120;
        }
        goto LABEL_881;
      case 49:
        uint64_t v6 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v6);
        unsigned int v38 = *(_DWORD *)(j + 9756);
        if (v7 < v38) {
          goto LABEL_907;
        }
        if (!*(void *)(j + 10664)) {
          goto LABEL_426;
        }
        unsigned int v169 = *(_DWORD *)(j + 16 + (v6 + 8));
        unsigned int v170 = v6 + 12;
        if (!*(_DWORD *)(j + 16 + (v6 + 4))) {
          goto LABEL_208;
        }
        v540[0] = 0;
        BlueFin::GlCryptoDes::des_set_key(v510, (uint64_t)v558, v7, (unsigned __int8 *)a4);
        *(void *)&long long v563 = *(void *)(v522 + 9);
        LOBYTE(v564) = 0;
        int v171 = (unsigned char *)(j + v170 + 16);
        this = BlueFin::GlCryptoDes::decrypt_update((uint64_t)v558, v171, v540, (uint64_t)v171, v169);
        unsigned int v172 = v540[0] - v171[v540[0] - 1];
        if (v169 < v172 || v169 - v172 > 8) {
          goto LABEL_681;
        }
        unsigned int v169 = v540[0] - v171[v540[0] - 1];
LABEL_208:
        if (v169 >= 0x41) {
          goto LABEL_681;
        }
        *(void *)&v558[2] = j + v170 + 16;
        *(void *)&v558[4] = 0;
        v558[0] = 0;
        if (v169)
        {
          uint64_t v174 = 0;
          uint64_t v175 = v169;
          do
          {
            this = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 8u);
            uint64_t j = (uint64_t)v536;
            *(unsigned char *)(*((void *)v536 + 1333) + v174++) = this;
          }
          while (v169 != v174);
        }
        else
        {
          uint64_t v175 = 0;
        }
        *(unsigned char *)(*(void *)(j + 10664) + v175) = 0;
        uint64_t v131 = **(void **)(j + 10768);
        int v132 = *(_DWORD *)(v131 + 4) | 0x40;
LABEL_739:
        *(_DWORD *)(v131 + 4) = v132;
        goto LABEL_405;
      case 50:
        uint64_t v6 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v6);
        unsigned int v38 = *(_DWORD *)(j + 9756);
        if (v7 < v38) {
          goto LABEL_907;
        }
        unsigned int v306 = 32;
        v307 = v509;
        switch(*(_DWORD *)(j + 12))
        {
          case 0:
            break;
          case 3:
            unsigned int v306 = 10;
            v307 = v503;
            break;
          case 5:
            unsigned int v306 = 63;
            v307 = v504;
            break;
          case 6:
            unsigned int v306 = 36;
            v307 = v505;
            break;
          case 7:
            unsigned int v306 = 14;
            v307 = v506;
            break;
          default:
            goto LABEL_426;
        }
        uint64_t v401 = *v307;
        if (!*v307) {
          goto LABEL_426;
        }
        *(void *)&v558[2] = j + v6 + 16;
        *(void *)&v558[4] = 0;
        v558[0] = 0;
        BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x10u);
        unsigned __int16 v402 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x10u);
        int v403 = 0;
        __int16 v404 = 0;
        do
        {
          unsigned __int8 v405 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 6u);
          int v406 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 2u);
          __int16 v407 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0xBu);
          this = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0xDu);
          v558[5] = 32 * (v558[5] == 32);
          if (v306 > v405)
          {
            uint64_t v408 = v401 + 12 * v405;
            *(unsigned char *)uint64_t v408 = v405;
            *(_DWORD *)(v408 + 4) = v406 != 0;
            *(_WORD *)(v408 + 8) = v407;
            *(_WORD *)(v408 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = this;
            ++v404;
          }
          ++v403;
        }
        while ((unsigned __int16)v403 <= v402);
        uint64_t j = (uint64_t)v536;
        if (!v404) {
          goto LABEL_405;
        }
        uint64_t v131 = **((void **)v536 + 1346);
        int v132 = *(_DWORD *)(v131 + 4) | 0x80;
        goto LABEL_739;
      case 51:
        uint64_t v6 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v6);
        unsigned int v38 = *(_DWORD *)(j + 9756);
        if (v7 < v38) {
          goto LABEL_907;
        }
        if (!*(void *)(j + 10712)) {
          goto LABEL_426;
        }
        *(void *)&v558[2] = j + v6 + 16;
        *(void *)&v558[4] = 0;
        v558[0] = 0;
        BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x10u);
        unsigned __int16 v39 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x10u);
        int v40 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x20u);
        **((unsigned char **)v536 + 1339) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 8u);
        int v41 = (char *)v536 + 10712;
        *(unsigned char *)(*((void *)v536 + 1339) + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 8u);
        *(unsigned char *)(*(void *)v41 + 2) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 8u);
        *(unsigned char *)(*(void *)v41 + 3) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 8u);
        *(unsigned char *)(*(void *)v41 + 4) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 8u);
        *(unsigned char *)(*(void *)v41 + 5) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 8u);
        *(unsigned char *)(*(void *)v41 + 6) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 8u);
        this = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 8u);
        uint64_t v42 = *((void *)v536 + 1339);
        *(unsigned char *)(v42 + 7) = this;
        *(_DWORD *)(v42 + 8) = v40 + 604800 * v39;
        uint64_t j = (uint64_t)v536;
        uint64_t v6 = **((void **)v536 + 1346);
        int v43 = *(_DWORD *)(v6 + 4) | 0x100;
        goto LABEL_425;
      case 52:
        uint64_t v6 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v6);
        if (v7 < *(_DWORD *)(j + 9756)) {
          goto LABEL_907;
        }
        int v61 = *(_DWORD *)(j + 16 + (v6 + 4));
        *(void *)&v540[2] = j + 16 + (v6 + 8);
        *(void *)&long long v541 = 0;
        v540[0] = 0;
        unsigned __int8 v62 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v540, 6u);
        int v63 = 0;
        DWORD1(v54BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 32 * (DWORD1(v541) == 32);
        do
        {
          char v64 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v540, 6u);
          int v65 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v540, 0xCu);
          char v66 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v540, 1u);
          unsigned __int16 v67 = 0;
          unsigned __int8 v68 = v64 + 1;
          int v69 = v65 << 20;
          signed int v70 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v540, 0xCu) << 20;
          DWORD1(v54BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 32 * (DWORD1(v541) == 32);
          int v71 = *v533;
          while (1)
          {
            v558[4] = -1;
            v558[6] = 7;
            unsigned int v72 = v67;
            if (BlueFin::GlPeLtoReaderBase::getGnssDcbInfo(v536, (uint64_t)v558, v67) && v558[4] == v71)
            {
              BOOL v73 = v558[6] > 6 || v68 == 0;
              if (!v73 && ((0xE243F0A181320uLL >> (8 * LOBYTE(v558[6]))) & 0x3F) >= v68) {
                break;
              }
            }
            ++v67;
            if (v72 >= 0xD) {
              goto LABEL_72;
            }
          }
          switch(v71)
          {
            case 0:
              uint64_t v74 = *((void *)v536 + 1319);
              if (v74) {
                goto LABEL_92;
              }
              break;
            case 1:
              uint64_t v74 = *((void *)v536 + 1320);
              if (v74) {
                goto LABEL_92;
              }
              break;
            case 2:
              uint64_t v74 = *((void *)v536 + 1321);
              if (v74) {
                goto LABEL_92;
              }
              break;
            case 3:
              uint64_t v74 = *((void *)v536 + 1322);
              if (v74)
              {
LABEL_92:
                uint64_t v79 = *(void *)(v74 + 224);
                goto LABEL_103;
              }
              break;
            case 4:
              uint64_t v76 = *((void *)v536 + 1323);
              if (v76) {
                goto LABEL_94;
              }
              break;
            case 5:
              uint64_t v76 = *((void *)v536 + 1324);
              if (v76)
              {
LABEL_94:
                uint64_t v79 = *(void *)(v76 + 176);
                goto LABEL_103;
              }
              break;
            case 6:
              uint64_t v78 = *((void *)v536 + 1325);
              if (v78) {
                goto LABEL_102;
              }
              break;
            case 7:
              uint64_t v78 = *((void *)v536 + 1326);
              if (v78) {
                goto LABEL_102;
              }
              break;
            case 8:
              uint64_t v78 = *((void *)v536 + 1327);
              if (v78)
              {
LABEL_102:
                uint64_t v79 = *(void *)(v78 + 96);
                goto LABEL_103;
              }
              break;
            case 9:
              uint64_t v75 = *((void *)v536 + 1328);
              if (v75) {
                goto LABEL_100;
              }
              break;
            case 10:
              uint64_t v75 = *((void *)v536 + 1329);
              if (v75) {
                goto LABEL_100;
              }
              break;
            case 11:
              uint64_t v75 = *((void *)v536 + 1330);
              if (v75)
              {
LABEL_100:
                uint64_t v79 = *(void *)(v75 + 416);
                goto LABEL_103;
              }
              break;
            case 12:
              uint64_t v77 = *((void *)v536 + 1331);
              if (v77) {
                goto LABEL_96;
              }
              break;
            case 13:
              uint64_t v77 = *((void *)v536 + 1332);
              if (v77)
              {
LABEL_96:
                uint64_t v79 = *(void *)(v77 + 248);
LABEL_103:
                uint64_t v80 = v79 + 6 * (unsigned __int16)(v68 - 1);
                if (v80)
                {
                  *(_WORD *)uint64_t v80 = v69 >> 20;
                  *(unsigned char *)(v80 + 2) = v66;
                  *(_WORD *)(v80 + 4) = v70 >> 20;
                }
              }
              break;
            default:
              break;
          }
LABEL_72:
          ++v63;
        }
        while (v63 <= v62);
        unsigned __int16 v316 = 0;
        uint64_t j = (uint64_t)v536;
        while (1)
        {
          *(void *)&v558[2] = 0;
          *(void *)&v558[4] = 0x54FFFFFFFFLL;
          unsigned int v317 = v316;
          this = BlueFin::GlPeLtoReaderBase::getGnssDcbInfo(v536, (uint64_t)v558, v316);
          if (this)
          {
            if (v558[4] == v71) {
              break;
            }
          }
          ++v316;
          if (v317 >= 0xD) {
            goto LABEL_405;
          }
        }
        uint64_t v321 = *(void *)&v558[2];
        if (*(void *)&v558[2])
        {
          __int16 v322 = v558[5];
          **(_DWORD **)&v558[2] = v61;
          *(_DWORD *)(v321 + 4) = v71;
          *(_DWORD *)(**((void **)v536 + 1346) + 4 * (v322 >> 5)) |= 1 << v322;
        }
LABEL_405:
        int v302 = *(_DWORD *)(j + 9756);
        *(_DWORD *)(j + 9744) += v302;
        unsigned int v33 = *(_DWORD *)(j + 9760) + v302;
LABEL_427:
        *(_DWORD *)(j + 976BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v33;
        goto LABEL_434;
      case 53:
        uint64_t v6 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v6);
        unsigned int v38 = *(_DWORD *)(j + 9756);
        if (v7 < v38) {
          goto LABEL_907;
        }
        if (!*(void *)(j + 10720)) {
          goto LABEL_426;
        }
        *(void *)&v558[2] = j + v6 + 16;
        *(void *)&v558[4] = 0;
        v558[0] = 0;
        BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x10u);
        unsigned __int16 v201 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x10u);
        int v202 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0x20u);
        **((_WORD **)v536 + 134BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0xBu);
        *(_WORD *)(*((void *)v536 + 1340) + 2) = (__int16)(32
                                                             * BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0xBu)) >> 5;
        this = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)v558, 0xEu);
        uint64_t v203 = *((void *)v536 + 1340);
        *(_WORD *)(v203 + 4) = (__int16)(4 * this) >> 2;
        *(_DWORD *)(v203 + 8) = v202 + 604800 * v201;
        uint64_t j = (uint64_t)v536;
        uint64_t v6 = **((void **)v536 + 1346);
        int v43 = *(_DWORD *)(v6 + 4) | 0x800000;
LABEL_425:
        *(_DWORD *)(v6 + 4) = v43;
        unsigned int v38 = *(_DWORD *)(j + 9756);
        LODWORD(v6) = *(_DWORD *)(j + 9744);
LABEL_426:
        *(_DWORD *)(j + 9744) = v38 + v6;
        unsigned int v33 = *(_DWORD *)(j + 9760) + v38;
        goto LABEL_427;
      case 54:
        uint64_t v6 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v6);
        if (v7 <= 0xB) {
          goto LABEL_907;
        }
        *(_DWORD *)(j + 11032) = *(_DWORD *)&v520[v6];
        *(_DWORD *)(j + 11036) = *(_DWORD *)&v520[(v6 + 4)];
        *(_DWORD *)(j + 1104BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_DWORD *)&v520[(v6 + 8)];
        *(_DWORD *)(j + 11044) = 0;
        *(_DWORD *)(j + 11056) = -1;
        *(_DWORD *)(j + 9744) = v6 + 12;
        *(_DWORD *)(j + 9760) += 12;
        *(_DWORD *)(j + 8) = 55;
        BlueFin::GlSetBase::Remove(*(void *)(j + 10768), 7);
        goto LABEL_525;
      case 55:
        uint64_t v34 = *(unsigned int *)(j + 9744);
        size_t v35 = (*(_DWORD *)(j + 9740) - v34);
        if (v35 <= 0xB) {
          goto LABEL_912;
        }
        v558[0] = 0;
        v540[0] = 0;
        v538[0] = 0;
        this = BlueFin::GlPeRtoReader::ParseEphFctTbl(v516, v520, v34, v558, v540, v538);
        int v313 = this;
        uint64_t j = (uint64_t)v536;
        int v314 = 1;
        uint64_t v315 = 7;
        switch(*((_DWORD *)v536 + 2709))
        {
          case 0:
          case 1:
          case 2:
          case 3:
            int v314 = 0;
            uint64_t v315 = *((unsigned int *)v536 + 2709);
            break;
          case 5:
            int v314 = 0;
            uint64_t v315 = 4;
            break;
          case 6:
            int v314 = 0;
            uint64_t v315 = 5;
            break;
          case 7:
            int v314 = 0;
            uint64_t v315 = 6;
            break;
          default:
            break;
        }
        v416 = (int *)**((void **)v536 + 1346);
        int v417 = *v416;
        if ((*v416 & 0x400) == 0)
        {
          int *v416 = v417 | 0x400;
          v418 = "GPS";
          switch(v315)
          {
            case 0:
              break;
            case 1:
              v418 = "SBAS";
              break;
            case 2:
              v418 = "GLNS";
              break;
            case 3:
              v418 = "QZSS";
              break;
            default:
              v418 = "BDS";
              break;
          }
          this = GlCustomLog(12, "%s RTO age %d.%dd (%us)\n", v418, (v540[0] + 4320) / 0x15180, (v540[0] + 4320) / 0x21C0 - 10 * ((429496730 * (unint64_t)((v540[0] + 4320) / 0x21C0)) >> 32), v540[0]);
          v416 = (int *)**((void **)v536 + 1346);
          int v417 = *v416;
        }
        if ((v314 | ((v417 & 0x80) >> 7)))
        {
          if (v314) {
            goto LABEL_727;
          }
          uint64_t v465 = *((void *)v536 + 1347);
        }
        else
        {
          uint64_t v465 = *((void *)v536 + 1347);
          if (v465)
          {
            *(_DWORD *)(v465 + 4 * v315 + 96BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v558[0];
            int v417 = *v416;
          }
          int *v416 = v417 | 0x80;
          uint64_t v466 = *((void *)v536 + 1341);
          if (v466) {
            *(_DWORD *)(v466 + 4 * v315) = v558[0];
          }
        }
        if (v465)
        {
          uint64_t v467 = v465 + 4 * v315;
          if (*(_DWORD *)(v467 + 988) < v558[0]) {
            *(_DWORD *)(v467 + 988) = v558[0];
          }
        }
        uint64_t v468 = *((void *)v536 + 1342);
        if (v468) {
          *(_DWORD *)(v468 + 4 * v315) = v558[0];
        }
LABEL_727:
        if (v538[0])
        {
          if (*((_DWORD *)v536 + 2709) == 2) {
            unsigned int v469 = 2500;
          }
          else {
            unsigned int v469 = 7200;
          }
          if (v469 >= *((_DWORD *)v536 + 2764))
          {
            int *v535 = 56;
          }
          else
          {
            GlCustomLog(11, "%s error code %d.%d (%s)\n", "RTO", *((_DWORD *)v536 + 2), 6280, "expired");
            BlueFin::GlSetBase::Remove(*((void *)v536 + 1346), 11);
            v470 = (_DWORD *)*((void *)v536 + 1349);
            if (v470) {
              _DWORD *v470 = 2;
            }
            *((_DWORD *)v536 + 2702) = 2;
            *((_DWORD *)v536 + 2) = 64;
            int v471 = *((_DWORD *)v536 + 2709);
            v472 = "<->";
            v473 = "BDS";
            switch(v471)
            {
              case 0:
                v473 = "GPS";
                goto LABEL_797;
              case 1:
                v473 = "SBAS";
                goto LABEL_797;
              case 2:
                v473 = "GLNS";
                goto LABEL_797;
              case 3:
                v473 = "QZSS";
                goto LABEL_797;
              case 5:
                goto LABEL_797;
              case 6:
                v472 = "GAL";
                goto LABEL_793;
              case 7:
                v472 = "NIC";
                goto LABEL_793;
              default:
LABEL_793:
                v473 = v472;
LABEL_797:
                BOOL v73 = v471 == 2;
                int v480 = 7200;
                if (v73) {
                  int v480 = 2500;
                }
                this = GlCustomLog(12, "%s RTO expired (required %ds, min delta %ds)\n", v473, v480, *((_DWORD *)v536 + 2764));
                break;
            }
          }
        }
        *((_DWORD *)v536 + 2436) += v313;
        *((_DWORD *)v536 + 2440) += v313;
        continue;
      case 56:
        uint64_t v6 = *(unsigned int *)(j + 9744);
        size_t v7 = (*(_DWORD *)(j + 9740) - v6);
        if (v7 >= 4)
        {
          a4 = (char *)*(unsigned int *)(j + v6 + 16);
          int v260 = a4 + 8;
          if (v7 >= (int)a4 + 8)
          {
            int v261 = *(_DWORD *)(j + 9760);
            if (*(_DWORD *)(j + 11048) == v261)
            {
              v558[0] = 0;
              this = BlueFin::GlPeRtoReader::ParseEph(v516, (uint64_t)v520, v6 + 4, (int)a4, v558);
              if (this)
              {
                uint64_t j = (uint64_t)v536;
                v262 = (_DWORD *)**((void **)v536 + 1346);
                v262[SLOWORD(v558[0]) >> 5] |= 1 << SLOBYTE(v558[0]);
                uint64_t v263 = *((int *)v536 + 2709);
                if v263 <= 6 && ((0x6Du >> v263)) {
                  *v262 |= dword_263BB90C0[v263];
                }
                LODWORD(v6) = *((_DWORD *)v536 + 2436);
                int v261 = *((_DWORD *)v536 + 2440);
                goto LABEL_339;
              }
              uint64_t j = (uint64_t)v536;
              GlCustomLog(11, "%s error code %d.%d (%s)\n", "RTO", *((_DWORD *)v536 + 2), 6324, "internal");
LABEL_670:
              this = BlueFin::GlSetBase::Remove(*(void *)(j + 10768), 11);
LABEL_671:
              v452 = *(_DWORD **)(j + 10792);
              if (v452) {
                _DWORD *v452 = 4;
              }
              int v242 = 4;
LABEL_680:
              int *v515 = v242;
LABEL_681:
              int v108 = 64;
LABEL_882:
              int *v535 = v108;
            }
            else
            {
LABEL_339:
              *(_DWORD *)(j + 9744) = v6 + v260;
              *(_DWORD *)(j + 976BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v261 + v260;
              int v252 = *(_DWORD *)(j + 11040);
              int v253 = *(_DWORD *)(j + 11044) + 1;
              *(_DWORD *)(j + 11044) = v253;
LABEL_880:
              if (v252 == v253)
              {
LABEL_881:
                int v108 = 1;
                goto LABEL_882;
              }
            }
            continue;
          }
        }
LABEL_907:
        uint64_t v494 = j + v6;
LABEL_908:
        unsigned int v105 = (unsigned int *)(v494 + 16);
LABEL_909:
        v495 = v520;
LABEL_910:
        this = (uint64_t)memmove(v495, v105, v7);
        *(void *)(j + 974BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = (*(_DWORD *)(j + 9740) - *(_DWORD *)(j + 9744));
        return this;
      case 57:
        uint64_t v34 = *(unsigned int *)(j + 9744);
        size_t v35 = (*(_DWORD *)(j + 9740) - v34);
        unsigned int v309 = *(_DWORD *)(j + 9756);
        if (v35 < v309) {
          goto LABEL_912;
        }
        this = BlueFin::GlPeRtoReader::ParseSyst(v516, v520, v34, v309);
        goto LABEL_430;
      case 58:
      case 59:
      case 60:
        continue;
      case 61:
        uint64_t v34 = *(unsigned int *)(j + 9744);
        size_t v35 = (*(_DWORD *)(j + 9740) - v34);
        unsigned int v36 = *(_DWORD *)(j + 9756);
        if (v35 < v36) {
          goto LABEL_912;
        }
        this = BlueFin::GlPeRtoReader::ParseClkErrTgd(v516, v520, v34, v36);
        goto LABEL_430;
      case 62:
        uint64_t v34 = *(unsigned int *)(j + 9744);
        size_t v35 = (*(_DWORD *)(j + 9740) - v34);
        unsigned int v176 = *(_DWORD *)(j + 9756);
        if (v35 < v176) {
          goto LABEL_912;
        }
        this = BlueFin::GlPeRtoReader::ParseL5Health(v516, v520, v34, v176);
        goto LABEL_430;
      case 63:
        uint64_t v34 = *(unsigned int *)(j + 9744);
        size_t v35 = (*(_DWORD *)(j + 9740) - v34);
        unsigned int v37 = *(_DWORD *)(j + 9756);
        if (v35 < v37)
        {
LABEL_912:
          unsigned int v105 = (unsigned int *)(j + v34 + 16);
          v495 = v520;
          size_t v7 = v35;
          goto LABEL_910;
        }
        this = BlueFin::GlPeRtoReader::ParseGpsIonoModel(v516, v520, v34, v37);
LABEL_430:
        if (this != 84) {
          *(_DWORD *)(**(void **)(j + 10768) + 4 * ((__int16)this >> 5)) |= 1 << this;
        }
        int v226 = *(_DWORD *)(j + 9744) + *(_DWORD *)(j + 9756);
LABEL_433:
        *(_DWORD *)(j + 9744) = v226;
LABEL_434:
        *(_DWORD *)(j + 8) = 1;
        continue;
      case 64:
        int v310 = *(_DWORD *)(j + 9744);
        unsigned int v311 = *(_DWORD *)(j + 9740) - v310;
        int v259 = *(_DWORD *)(j + 9756);
        int v312 = *(_DWORD *)(j + 9760);
        if (v311 < v259 - v312)
        {
          *(_DWORD *)(j + 976BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v312 + v311;
          *(void *)(v522 + 24) = 0;
          return this;
        }
        *(_DWORD *)(j + 8) = 1;
        int v258 = v259 - v312 + v310;
LABEL_437:
        *(_DWORD *)(j + 976BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v259;
        *(_DWORD *)(j + 9744) = v258;
        continue;
      default:
        return this;
    }
  }
}

uint64_t BlueFin::GlPeRtoReader::IsRtoEphSection(BlueFin::GlPeRtoReader *this, int a2)
{
  uint64_t result = 1;
  if (a2 <= 12316349)
  {
    if (a2 > 12307645)
    {
      if (a2 == 12307646) {
        return result;
      }
      unsigned __int16 v3 = -8770;
    }
    else
    {
      if (a2 == 12284350) {
        return result;
      }
      unsigned __int16 v3 = -21826;
    }
    goto LABEL_10;
  }
  if (a2 <= 582741693)
  {
    if (a2 == 12316350) {
      return result;
    }
    unsigned __int16 v3 = -66;
LABEL_10:
    int v4 = v3 | 0xBB0000;
    goto LABEL_13;
  }
  if (a2 == 582741694) {
    return result;
  }
  int v4 = 582746046;
LABEL_13:
  if (a2 != v4) {
    return 0;
  }
  return result;
}

uint64_t BlueFin::GlPeRtoReader::CheckRtoEnabled(BlueFin::GlPeRtoReader *this, int a2)
{
  uint64_t result = 0;
  if (a2 > 286344381)
  {
    if (a2 <= 447547837)
    {
      if (a2 > 355708576)
      {
        switch(a2)
        {
          case 355708577:
            if (*((void *)this + 21)) {
              goto LABEL_50;
            }
            break;
          case 356822689:
            if (*((void *)this + 22)) {
              goto LABEL_50;
            }
            break;
          case 357936801:
            if (*((void *)this + 23)) {
              goto LABEL_50;
            }
            break;
          default:
            return result;
        }
      }
      else
      {
        switch(a2)
        {
          case 286344382:
            if (*((void *)this + 8)) {
              goto LABEL_50;
            }
            break;
          case 352366241:
            if (*((void *)this + 19)) {
              goto LABEL_50;
            }
            break;
          case 354594465:
            if (*((void *)this + 20)) {
              goto LABEL_50;
            }
            break;
          default:
            return result;
        }
      }
      return 0;
    }
    if (a2 <= 447592893)
    {
      switch(a2)
      {
        case 447547838:
          if (*((void *)this + 10)) {
            goto LABEL_50;
          }
          break;
        case 447574462:
          if (*((void *)this + 12)) {
            goto LABEL_50;
          }
          break;
        case 447584702:
          if (*((void *)this + 9)) {
            goto LABEL_50;
          }
          break;
        default:
          return result;
      }
      return 0;
    }
    if (a2 == 447592894)
    {
      if (*((void *)this + 11)) {
        goto LABEL_50;
      }
      return 0;
    }
    if (a2 != 582741694)
    {
      int v6 = 582746046;
      goto LABEL_44;
    }
LABEL_46:
    int v7 = 3;
    goto LABEL_49;
  }
  if (a2 > 13406804)
  {
    if (a2 > 13417257)
    {
      switch(a2)
      {
        case 13417258:
          if (*((void *)this + 17)) {
            goto LABEL_50;
          }
          break;
        case 269552240:
          if (*((void *)this + 24)) {
            goto LABEL_50;
          }
          break;
        case 286340030:
          if (*((void *)this + 7)) {
            goto LABEL_50;
          }
          break;
        default:
          return result;
      }
    }
    else
    {
      switch(a2)
      {
        case 13406805:
          if (*((void *)this + 15) || *((void *)this + 16)) {
            goto LABEL_50;
          }
          break;
        case 13417146:
          if (*((void *)this + 13) || *((void *)this + 14)) {
            goto LABEL_50;
          }
          break;
        case 13417244:
          if (*((void *)this + 18)) {
            goto LABEL_50;
          }
          break;
        default:
          return result;
      }
    }
    return 0;
  }
  if (a2 > 12311997)
  {
    if (a2 == 12311998)
    {
      *((_DWORD *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 2;
      if (*((void *)this + 2)) {
        goto LABEL_50;
      }
      return 0;
    }
    if (a2 != 12316350)
    {
      int v6 = 12320702;
LABEL_44:
      if (a2 != v6) {
        return result;
      }
      int v7 = 5;
LABEL_49:
      *((_DWORD *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v7;
      if (BlueFin::GlPeRtoReader::isRtoEphEnabledAndRequested(this))
      {
LABEL_50:
        *(_DWORD *)this = a2;
        return 1;
      }
      return 0;
    }
    goto LABEL_46;
  }
  switch(a2)
  {
    case 12284350:
      int v7 = 7;
      goto LABEL_49;
    case 12298942:
      int v7 = 6;
      goto LABEL_49;
    case 12307646:
      *((_DWORD *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
      BOOL isRtoEphEnabledAndRequested = BlueFin::GlPeRtoReader::isRtoEphEnabledAndRequested(this);
      uint64_t result = 0;
      if (isRtoEphEnabledAndRequested) {
        goto LABEL_50;
      }
      break;
  }
  return result;
}

uint64_t BlueFin::GlPeRtoReader::IsRtoSystSection(BlueFin::GlPeRtoReader *this, int a2)
{
  uint64_t result = 1;
  if (a2 > 447574461)
  {
    if (a2 != 447574462 && a2 != 447584702)
    {
      unsigned __int16 v3 = -17986;
LABEL_8:
      if (a2 != (v3 | 0x1AAD0000)) {
        return 0;
      }
    }
  }
  else if (a2 != 286340030 && a2 != 286344382)
  {
    unsigned __int16 v3 = 2494;
    goto LABEL_8;
  }
  return result;
}

uint64_t BlueFin::GlPeRtoReader::ParseEphFctTbl(BlueFin::GlPeRtoReader *this, unsigned __int8 *a2, int a3, unsigned int *a4, unsigned int *a5, BOOL *a6)
{
  *a6 = 0;
  unsigned int v6 = *(_DWORD *)&a2[a3];
  *a4 = v6;
  unsigned int v7 = *((_DWORD *)this + 55);
  if (v7 <= v6) {
    unsigned int v8 = v6;
  }
  else {
    unsigned int v8 = *((_DWORD *)this + 55);
  }
  if (v6 >= v7) {
    unsigned int v6 = *((_DWORD *)this + 55);
  }
  unsigned int v9 = v8 - v6;
  unsigned int v10 = (v8 ^ 0x7FFFFFFF) + v6 - 0x7FFFFFFF;
  if (v9 < v10) {
    unsigned int v10 = v9;
  }
  *a5 = v10;
  if (v10 < *((_DWORD *)this + 56))
  {
    *((_DWORD *)this + 56) = v10;
    *((_DWORD *)this + 54) = *(_DWORD *)&a2[a3 + 4];
  }
  int v11 = *((_DWORD *)this + 52);
  int v12 = *((_DWORD *)this + 53) + 1;
  *((_DWORD *)this + 53) = v12;
  if (v11 == v12)
  {
    *((_DWORD *)this + 53) = 0;
    int v13 = a3 + 12;
    *a6 = 1;
  }
  else
  {
    int v13 = a3 + 8;
  }
  return (v13 - a3);
}

uint64_t BlueFin::GlPeRtoReader::ParseSyst(BlueFin::GlPeRtoReader *this, unsigned __int8 *a2, int a3, int a4)
{
  if (!a2)
  {
    DeviceFaultNotify("glpe_rtoreader.cpp", 1721, "ParseSyst", (char)"pucBuffer != nullptr");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_rtoreader.cpp", 1721, "pucBuffer != nullptr");
  }
  int v4 = &a2[a3];
  int v12 = 1;
  int v13 = v4;
  uint64_t v14 = 0;
  if (a4 - 4 < 1)
  {
    unsigned int v6 = 0;
  }
  else
  {
    int v5 = 0;
    unsigned int v6 = 0;
    do
    {
      v6 ^= *v4;
      int v7 = 8;
      do
      {
        if (v6) {
          unsigned int v6 = (v6 >> 1) ^ 0x48;
        }
        else {
          v6 >>= 1;
        }
        --v7;
      }
      while (v7);
      ++v4;
      ++v5;
    }
    while (v5 != a4 - 4);
  }
  int v8 = *(_DWORD *)this;
  uint64_t v9 = 84;
  if (*(int *)this > 447574461)
  {
    switch(v8)
    {
      case 447574462:
        return BlueFin::GlPeRtoReader::parseNgto(this, (BlueFin::GlPeBitReader *)&v12, v6);
      case 447584702:
        return BlueFin::GlPeRtoReader::parseGgto(this, (BlueFin::GlPeBitReader *)&v12, v6);
      case 447592894:
        return BlueFin::GlPeRtoReader::parseBgto(this, (BlueFin::GlPeBitReader *)&v12, v6);
    }
  }
  else
  {
    switch(v8)
    {
      case 286340030:
        return BlueFin::GlPeRtoReader::parseGpsUtc(this, (BlueFin::GlPeBitReader *)&v12, v6);
      case 286344382:
        return BlueFin::GlPeRtoReader::parseGloSyst(this, (BlueFin::GlPeBitReader *)&v12, v6);
      case 447547838:
        return BlueFin::GlPeRtoReader::parseQgto(this, (BlueFin::GlPeBitReader *)&v12, v6);
    }
  }
  return v9;
}

uint64_t BlueFin::GlPeRtoReader::ParseClkErrTgd(BlueFin::GlPeRtoReader *this, unsigned __int8 *a2, int a3, int a4)
{
  if (!a2)
  {
    DeviceFaultNotify("glpe_rtoreader.cpp", 1932, "ParseClkErrTgd", (char)"pucBuffer != nullptr");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_rtoreader.cpp", 1932, "pucBuffer != nullptr");
  }
  int v4 = &a2[a3];
  int v13 = 1;
  uint64_t v14 = v4;
  uint64_t v15 = 0;
  if (a4 - 4 < 1)
  {
    unsigned int v6 = 0;
  }
  else
  {
    int v5 = 0;
    unsigned int v6 = 0;
    do
    {
      v6 ^= *v4;
      int v7 = 8;
      do
      {
        if (v6) {
          unsigned int v6 = (v6 >> 1) ^ 0x48;
        }
        else {
          v6 >>= 1;
        }
        --v7;
      }
      while (v7);
      ++v4;
      ++v5;
    }
    while (v5 != a4 - 4);
  }
  int v8 = *(_DWORD *)this;
  uint64_t v9 = 84;
  if (*(int *)this > 13417243)
  {
    if (v8 == 13417244)
    {
      BOOL v10 = !BlueFin::GlPeRtoReader::parseClkErrTgd((int)this, (BlueFin::GlPeBitReader *)&v13, *((void *)this + 18), v6, 0x3Fu);
      unsigned int v11 = 76;
    }
    else
    {
      if (v8 != 13417258) {
        return v9;
      }
      BOOL v10 = !BlueFin::GlPeRtoReader::parseClkErrTgd((int)this, (BlueFin::GlPeBitReader *)&v13, *((void *)this + 17), v6, 0x3Fu);
      unsigned int v11 = 75;
    }
  }
  else if (v8 == 13406805)
  {
    BOOL v10 = !BlueFin::GlPeRtoReader::parseClkErrTgd((int)this, (BlueFin::GlPeBitReader *)&v13, *((void *)this + 15), *((void *)this + 16), v6, 0xAu);
    unsigned int v11 = 74;
  }
  else
  {
    if (v8 != 13417146) {
      return v9;
    }
    BOOL v10 = !BlueFin::GlPeRtoReader::parseClkErrTgd((int)this, (BlueFin::GlPeBitReader *)&v13, *((void *)this + 13), *((void *)this + 14), v6, 0x20u);
    unsigned int v11 = 73;
  }
  if (v10) {
    return 84;
  }
  else {
    return v11;
  }
}

BOOL BlueFin::GlPeRtoReader::parseClkErrTgd(int a1, BlueFin::GlPeBitReader *this, uint64_t a3, uint64_t a4, int a5, unsigned int a6)
{
  if (!(a3 | a4)) {
    return 0;
  }
  BlueFin::GlPeBitReader::uint(this, 0x10u);
  unsigned __int16 v26 = BlueFin::GlPeBitReader::uint(this, 0x10u);
  int v8 = 0;
  int v9 = 0;
  uint64_t v25 = a4;
  do
  {
    unsigned __int8 v10 = BlueFin::GlPeBitReader::uint(this, 6u);
    int v11 = BlueFin::GlPeBitReader::uint(this, 4u);
    int v12 = v11;
    int v32 = v9;
    if (v11 == 1) {
      goto LABEL_6;
    }
    if (!v11)
    {
      int v12 = -1;
LABEL_6:
      unsigned __int8 v13 = v10;
      goto LABEL_8;
    }
    int v12 = -1;
    unsigned __int8 v13 = -1;
LABEL_8:
    int v31 = BlueFin::GlPeBitReader::uint(this, 0x1Au);
    int v30 = BlueFin::GlPeBitReader::uint(this, 0x14u);
    int v29 = BlueFin::GlPeBitReader::uint(this, 0xAu);
    __int16 v14 = BlueFin::GlPeBitReader::uint(this, 0xBu);
    __int16 v15 = BlueFin::GlPeBitReader::uint(this, 0xDu);
    __int16 v16 = BlueFin::GlPeBitReader::uint(this, 0xDu);
    __int16 v17 = BlueFin::GlPeBitReader::uint(this, 0xDu);
    __int16 v18 = BlueFin::GlPeBitReader::uint(this, 0xDu);
    __int16 v19 = BlueFin::GlPeBitReader::uint(this, 0xAu);
    if (*((_DWORD *)this + 5) != 32) {
      *((_DWORD *)this + 5) = 0;
    }
    if (a3 && v10 < a6)
    {
      uint64_t v20 = a3 + 32 * v10;
      *(unsigned char *)uint64_t v20 = v10;
      *(_DWORD *)(v20 + 4) = v12;
      *(_DWORD *)(v20 + 8) = v31 << 6 >> 6;
      *(_DWORD *)(v20 + 12) = v30 << 12 >> 12;
      *(_DWORD *)(v20 + 16) = v29 << 22 >> 22;
      *(_WORD *)(v20 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v14;
      *(_WORD *)(v20 + 22) = (__int16)(8 * v15) >> 3;
      *(_WORD *)(v20 + 24) = (__int16)(8 * v16) >> 3;
      *(unsigned char *)(v20 + 26) = 1;
      *(_WORD *)(v20 + 28) = (__int16)(8 * v17) >> 3;
      *(_WORD *)(v20 + 3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v19;
      int v9 = v32 + 1;
      uint64_t v21 = v25;
      if (!v25) {
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v21 = v25;
      int v9 = v32;
      if (!v25) {
        goto LABEL_17;
      }
    }
    if (v13 < a6)
    {
      uint64_t v22 = v21 + 4 * v13;
      *(unsigned char *)uint64_t v22 = v13;
      *(_WORD *)(v22 + 2) = (__int16)(8 * v18) >> 3;
      ++v9;
    }
LABEL_17:
    ++v8;
  }
  while ((unsigned __int16)v8 <= v26);
  if (BlueFin::GlPeBitReader::uint(this, 0x20u) == a5) {
    return (unsigned __int16)v9 != 0;
  }
  GlCustomLog(11, "RTO Clk Err TGD section integrity check failure!\n");
  return 0;
}

uint64_t BlueFin::GlPeRtoReader::parseQgto(BlueFin::GlPeRtoReader *this, BlueFin::GlPeBitReader *a2, int a3)
{
  if (*((void *)this + 10))
  {
    BlueFin::GlPeBitReader::uint(a2, 0x10u);
    **((_WORD **)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlPeBitReader::uint(a2, 0x10u);
    *(_DWORD *)(*((void *)this + 10) + 4) = BlueFin::GlPeBitReader::uint(a2, 0x20u);
    int v6 = BlueFin::GlPeBitReader::uint(a2, 0x20u);
    uint64_t v7 = *((void *)this + 10);
    *(_DWORD *)(v7 + 8) = v6;
    if (*((unsigned char *)this + 240)) {
      *(_DWORD *)(v7 + 8) = -v6;
    }
    if (BlueFin::GlPeBitReader::uint(a2, 0x20u) == a3) {
      return 65;
    }
    GlCustomLog(11, "RTO Qzs Sys Time section integrity check failure!\n");
  }
  return 84;
}

uint64_t BlueFin::GlPeRtoReader::parseNgto(BlueFin::GlPeRtoReader *this, BlueFin::GlPeBitReader *a2, int a3)
{
  if (*((void *)this + 12))
  {
    BlueFin::GlPeBitReader::uint(a2, 0x10u);
    **((_WORD **)this + 12) = BlueFin::GlPeBitReader::uint(a2, 0x10u);
    *(_DWORD *)(*((void *)this + 12) + 4) = BlueFin::GlPeBitReader::uint(a2, 0x20u);
    int v6 = BlueFin::GlPeBitReader::uint(a2, 0x20u);
    uint64_t v7 = *((void *)this + 12);
    *(_DWORD *)(v7 + 8) = v6;
    if (*((unsigned char *)this + 240)) {
      *(_DWORD *)(v7 + 8) = -v6;
    }
    if (BlueFin::GlPeBitReader::uint(a2, 0x20u) == a3) {
      return 67;
    }
    GlCustomLog(11, "RTO Nic Sys Time section integrity check failure!\n");
  }
  return 84;
}

uint64_t BlueFin::GlPeRtoReader::parseGgto(BlueFin::GlPeRtoReader *this, BlueFin::GlPeBitReader *a2, int a3)
{
  if (*((void *)this + 9))
  {
    BlueFin::GlPeBitReader::uint(a2, 0x10u);
    **((_WORD **)this + 9) = BlueFin::GlPeBitReader::uint(a2, 0x10u);
    *(_DWORD *)(*((void *)this + 9) + 4) = BlueFin::GlPeBitReader::uint(a2, 0x20u);
    int v6 = BlueFin::GlPeBitReader::uint(a2, 0x20u);
    uint64_t v7 = *((void *)this + 9);
    *(_DWORD *)(v7 + 8) = v6;
    if (*((unsigned char *)this + 240)) {
      *(_DWORD *)(v7 + 8) = -v6;
    }
    if (BlueFin::GlPeBitReader::uint(a2, 0x20u) == a3) {
      return 63;
    }
    GlCustomLog(11, "RTO Gal Sys Time section integrity check failure!\n");
  }
  return 84;
}

uint64_t BlueFin::GlPeRtoReader::parseBgto(BlueFin::GlPeRtoReader *this, BlueFin::GlPeBitReader *a2, int a3)
{
  if (*((void *)this + 11))
  {
    BlueFin::GlPeBitReader::uint(a2, 0x10u);
    **((_WORD **)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = BlueFin::GlPeBitReader::uint(a2, 0x10u);
    *(_DWORD *)(*((void *)this + 11) + 4) = BlueFin::GlPeBitReader::uint(a2, 0x20u);
    int v6 = BlueFin::GlPeBitReader::uint(a2, 0x20u);
    uint64_t v7 = *((void *)this + 11);
    *(_DWORD *)(v7 + 8) = v6;
    if (*((unsigned char *)this + 240)) {
      *(_DWORD *)(v7 + 8) = -v6;
    }
    if (BlueFin::GlPeBitReader::uint(a2, 0x20u) == a3) {
      return 64;
    }
    GlCustomLog(11, "RTO Bds Sys Time section integrity check failure!\n");
  }
  return 84;
}

uint64_t BlueFin::GlPeRtoReader::ParseGpsIonoModel(BlueFin::GlPeRtoReader *this, unsigned __int8 *a2, int a3, int a4)
{
  if (!a2)
  {
    DeviceFaultNotify("glpe_rtoreader.cpp", 2074, "ParseGpsIonoModel", (char)"pucBuffer != nullptr");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_rtoreader.cpp", 2074, "pucBuffer != nullptr");
  }
  int v5 = &a2[a3];
  int v14 = 1;
  __int16 v15 = v5;
  uint64_t v16 = 0;
  if (a4 - 4 < 1)
  {
    unsigned int v7 = 0;
  }
  else
  {
    int v6 = 0;
    unsigned int v7 = 0;
    do
    {
      v7 ^= *v5;
      int v8 = 8;
      do
      {
        if (v7) {
          unsigned int v7 = (v7 >> 1) ^ 0x48;
        }
        else {
          v7 >>= 1;
        }
        --v8;
      }
      while (v8);
      ++v5;
      ++v6;
    }
    while (v6 != a4 - 4);
  }
  if (*(_DWORD *)this == 269552240 && *((void *)this + 24))
  {
    BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)&v14, 0x10u);
    unsigned __int16 v9 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)&v14, 0x10u);
    int v10 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)&v14, 0x20u);
    **((unsigned char **)this + 24) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)&v14, 8u);
    *(unsigned char *)(*((void *)this + 24) + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)&v14, 8u);
    *(unsigned char *)(*((void *)this + 24) + 2) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)&v14, 8u);
    *(unsigned char *)(*((void *)this + 24) + 3) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)&v14, 8u);
    *(unsigned char *)(*((void *)this + 24) + 4) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)&v14, 8u);
    *(unsigned char *)(*((void *)this + 24) + 5) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)&v14, 8u);
    *(unsigned char *)(*((void *)this + 24) + 6) = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)&v14, 8u);
    char v11 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)&v14, 8u);
    uint64_t v12 = *((void *)this + 24);
    *(unsigned char *)(v12 + 7) = v11;
    HIDWORD(v16) = 32 * (HIDWORD(v16) == 32);
    *(_DWORD *)(v12 + 8) = v10 + 604800 * v9;
    if (BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)&v14, 0x20u) == v7) {
      return 82;
    }
    GlCustomLog(11, "RTO Gps IONO section integrity check failure!\n");
  }
  return 84;
}

uint64_t BlueFin::GlPeRtoReader::parseGloSyst(BlueFin::GlPeRtoReader *this, BlueFin::GlPeBitReader *a2, int a3)
{
  if (*((void *)this + 8))
  {
    BlueFin::GlPeBitReader::uint(a2, 0x20u);
    **((unsigned char **)this + 8) = BlueFin::GlPeBitReader::uint(a2, 5u);
    *(_WORD *)(*((void *)this + 8) + 2) = BlueFin::GlPeBitReader::uint(a2, 0xBu);
    int v6 = BlueFin::GlPeBitReader::uint(a2, 0x16u);
    uint64_t v7 = *((void *)this + 8);
    *(_DWORD *)(v7 + 8) = v6 << 10 >> 10;
    *(unsigned char *)(v7 + 12) = 1;
    *(unsigned char *)(*((void *)this + 8) + 13) = (int)(BlueFin::GlPeBitReader::uint(a2, 2u) << 30) >> 30;
    int v8 = BlueFin::GlPeBitReader::uint(a2, 0x20u);
    uint64_t v9 = *((void *)this + 8);
    *(_DWORD *)(v9 + 4) = v8;
    *(unsigned char *)(v9 + 14) = 1;
    *(_WORD *)(*((void *)this + 8) + 16) = (__int16)(32 * BlueFin::GlPeBitReader::uint(a2, 0xBu)) >> 5;
    *(_WORD *)(*((void *)this + 8) + 18) = (__int16)((unsigned __int16)BlueFin::GlPeBitReader::uint(a2, 0xAu) << 6) >> 6;
    if (*((_DWORD *)a2 + 5) != 32) {
      *((_DWORD *)a2 + 5) = 0;
    }
    if (BlueFin::GlPeBitReader::uint(a2, 0x20u) == a3) {
      return 62;
    }
    GlCustomLog(11, "RTO Glo Sys Time section integrity check failure!\n");
  }
  return 84;
}

uint64_t BlueFin::GlPeRtoReader::parseGpsUtc(BlueFin::GlPeRtoReader *this, BlueFin::GlPeBitReader *a2, int a3)
{
  if (*((void *)this + 7))
  {
    BlueFin::GlPeBitReader::uint(a2, 0x20u);
    **((_DWORD **)this + 7) = (int)(BlueFin::GlPeBitReader::uint(a2, 0x18u) << 8) >> 8;
    *(_DWORD *)(*((void *)this + 7) + 4) = BlueFin::GlPeBitReader::uint(a2, 0x20u);
    *(unsigned char *)(*((void *)this + 7) + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlPeBitReader::uint(a2, 8u);
    *(unsigned char *)(*((void *)this + 7) + 8) = BlueFin::GlPeBitReader::uint(a2, 8u);
    *(unsigned char *)(*((void *)this + 7) + 9) = BlueFin::GlPeBitReader::uint(a2, 8u);
    *(unsigned char *)(*((void *)this + 7) + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = BlueFin::GlPeBitReader::uint(a2, 8u);
    *(unsigned char *)(*((void *)this + 7) + 12) = BlueFin::GlPeBitReader::uint(a2, 8u);
    *(unsigned char *)(*((void *)this + 7) + 13) = BlueFin::GlPeBitReader::uint(a2, 8u);
    if (*((_DWORD *)a2 + 5) != 32) {
      *((_DWORD *)a2 + 5) = 0;
    }
    if (BlueFin::GlPeBitReader::uint(a2, 0x20u) == a3) {
      return 61;
    }
    GlCustomLog(11, "RTO Gps Utc section integrity check failure!\n");
  }
  return 84;
}

unint64_t BlueFin::GlPeFirstFix::SelectBase(uint64_t a1, uint64_t a2, uint64_t a3, void *__src, unsigned __int8 a5, unsigned int a6, int a7)
{
  int v69 = v71;
  uint64_t v12 = 19;
  unsigned __int8 v70 = 19;
  memset(v71, 0, 76);
  int v63 = &v65;
  unsigned __int8 v64 = 19;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  memset(v68, 0, sizeof(v68));
  uint64_t v60 = v62;
  unsigned __int8 v61 = 19;
  memset(v62, 0, sizeof(v62));
  __int16 v56 = v58;
  unsigned __int8 v57 = 19;
  memset(v58, 0, sizeof(v58));
  *(_OWORD *)uint64_t v59 = 0u;
  *(_OWORD *)(a1 + 12) = 0u;
  unsigned __int8 v13 = (_OWORD *)(a1 + 12);
  *(_OWORD *)&v59[12] = 0u;
  *(void *)a1 = a1 + 12;
  *(unsigned char *)(a1 + 8) = 19;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  unsigned __int8 v44 = a5;
  *(_OWORD *)(a1 + 72) = 0u;
  memcpy(&v48, __src, 4 * a5);
  unsigned __int16 v46 = 0;
  unsigned __int8 v45 = 0;
  int v47 = v48;
  BlueFin::GlSetIterator::operator++(&v44);
  if (v45 != v44)
  {
    unsigned int v43 = a6;
    while (1)
    {
      if (v46 >= 0x23FuLL)
      {
        DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
      }
      __int16 v15 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v46;
      char v16 = *v15;
      LODWORD(v15) = v15[1];
      v53[0] = v16;
      int v54 = (int)v15;
      signed __int16 v55 = v46;
      int v17 = *((_DWORD *)BlueFin::GlPeMsmtMgr::GetMeMeas(*(BlueFin::GlPeMsmtMgr **)(a2 + 8), (const BlueFin::GlSignalId *)v53, 0, 0)+ 6);
      int v18 = v55;
      unsigned int v19 = BlueFin::GlPeRepeatedIsol::GetCount(a2 + 272, v55) ? 4 : v17;
      int v20 = 1 << v18;
      unsigned int v21 = v18 >> 5;
      if (!v19) {
        break;
      }
      if (v19 <= 2) {
        *((_DWORD *)v63 + v21) |= v20;
      }
      if (v19 == 3)
      {
        uint64_t v22 = &v60;
        goto LABEL_16;
      }
      if (v19 == 4)
      {
        uint64_t v22 = &v56;
LABEL_16:
        *(_DWORD *)(*v22 + 4 * v21) |= v20;
      }
      BlueFin::GlSetIterator::operator++(&v44);
      if (v45 == v44)
      {
        int v14 = v63;
        uint64_t v12 = v64;
        a6 = v43;
        goto LABEL_19;
      }
    }
    uint64_t v22 = &v69;
    goto LABEL_16;
  }
  int v14 = &v65;
LABEL_19:
  unsigned int v23 = 0;
  char v24 = (long long *)((char *)v14 + 4 * v12 - 4);
  do
  {
    if (*(_DWORD *)v24)
    {
      unsigned int v25 = *(_DWORD *)v24 - (((*(_DWORD *)v24 >> 1) & 0x5B6DB6DB) + ((*(_DWORD *)v24 >> 2) & 0x9249249));
      unsigned int v23 = ((v25 + (v25 >> 3)) & 0xC71C71C7) + v23 - 63 * (((v25 + (v25 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    char v24 = (long long *)((char *)v24 - 4);
  }
  while (v24 >= v14);
  if (a6 >= (unsigned __int16)v23)
  {
    BlueFin::GlSetBase::operator=(a1, (uint64_t)&v63);
    long long v29 = *(_OWORD *)v68;
    long long v13[2] = v67;
    v13[3] = v29;
    *(_OWORD *)((char *)v13 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_OWORD *)&v68[12];
    long long v28 = v65;
    long long v26 = v66;
  }
  else
  {
    BlueFin::GlPeFirstFix::GetHighestEl((uint64_t)&v44, (BlueFin::GlSetBase *)&v63, a3, a6);
    BlueFin::GlSetBase::operator=(a1, (uint64_t)&v44);
    long long v26 = v50;
    long long v27 = v52[0];
    long long v13[2] = v51;
    v13[3] = v27;
    *(_OWORD *)((char *)v13 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_OWORD *)((char *)v52 + 12);
    long long v28 = v49;
  }
  *unsigned __int8 v13 = v28;
  v13[1] = v26;
  unint64_t result = BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)a1);
  if (result < a6)
  {
    unsigned int v31 = 0;
    int v32 = &v60[4 * v61 - 4];
    do
    {
      if (*v32)
      {
        unsigned int v33 = *v32 - (((*v32 >> 1) & 0x5B6DB6DB) + ((*v32 >> 2) & 0x9249249));
        unsigned int v31 = ((v33 + (v33 >> 3)) & 0xC71C71C7) + v31 - 63 * (((v33 + (v33 >> 3)) & 0xC71C71C7) / 0x3F);
      }
      --v32;
    }
    while (v32 >= (_DWORD *)v60);
    if (result + (unsigned __int16)v31 <= a6)
    {
      uint64_t v34 = (int **)&v60;
    }
    else
    {
      BlueFin::GlPeFirstFix::GetHighestEl((uint64_t)&v44, (BlueFin::GlSetBase *)&v60, a3, (unsigned __int16)(a6 - result));
      uint64_t v34 = (int **)&v44;
    }
    BlueFin::GlSetBase::Add(a1, v34);
    unint64_t result = BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)a1);
  }
  if (result < a6)
  {
    unsigned int v35 = 0;
    unsigned int v36 = &v69[4 * v70 - 4];
    do
    {
      if (*v36)
      {
        unsigned int v37 = *v36 - (((*v36 >> 1) & 0x5B6DB6DB) + ((*v36 >> 2) & 0x9249249));
        unsigned int v35 = ((v37 + (v37 >> 3)) & 0xC71C71C7) + v35 - 63 * (((v37 + (v37 >> 3)) & 0xC71C71C7) / 0x3F);
      }
      --v36;
    }
    while (v36 >= (_DWORD *)v69);
    if (result + (unsigned __int16)v35 <= a6)
    {
      unsigned int v38 = (int **)&v69;
    }
    else
    {
      BlueFin::GlPeFirstFix::GetHighestEl((uint64_t)&v44, (BlueFin::GlSetBase *)&v69, a3, (unsigned __int16)(a6 - result));
      unsigned int v38 = (int **)&v44;
    }
    BlueFin::GlSetBase::Add(a1, v38);
    unint64_t result = BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)a1);
  }
  if (result < a6 && a7)
  {
    unsigned int v39 = 0;
    int v40 = (_DWORD *)v56 + v57 - 1;
    do
    {
      if (*v40)
      {
        unsigned int v41 = *v40 - (((*v40 >> 1) & 0x5B6DB6DB) + ((*v40 >> 2) & 0x9249249));
        unsigned int v39 = ((v41 + (v41 >> 3)) & 0xC71C71C7) + v39 - 63 * (((v41 + (v41 >> 3)) & 0xC71C71C7) / 0x3F);
      }
      --v40;
    }
    while (v40 >= (_DWORD *)v56);
    if (result + (unsigned __int16)v39 <= a6)
    {
      uint64_t v42 = (int **)&v56;
    }
    else
    {
      BlueFin::GlPeFirstFix::GetHighestEl((uint64_t)&v44, (BlueFin::GlSetBase *)&v56, a3, (unsigned __int16)(a6 - result));
      uint64_t v42 = (int **)&v44;
    }
    unint64_t result = BlueFin::GlSetBase::Add(a1, v42);
  }
  if (BlueFin::GlUtils::m_ucEnabled) {
    return BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
  }
  return result;
}

uint64_t BlueFin::GlPeFirstFix::IsMeasUsable(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  if (a3) {
    int v4 = 0;
  }
  else {
    int v4 = (v3 & 0x8000) != 0 || *(float *)(a2 + 100) * 1000000000.0 > 999.0;
  }
  BOOL v5 = *(float *)(a2 + 88) * 299792458.0 < 600.0;
  int Count = BlueFin::GlPeRepeatedIsol::GetCount(a1 + 272, *(_WORD *)(a2 + 8));
  uint64_t v7 = 0x4000;
  if (!BlueFin::GlPeFirstFix::m_bReqTimeOutReached) {
    uint64_t v7 = 2;
  }
  unsigned int v8 = v5 & ((BlueFin::GlPeFirstFix::m_bReqTimeOutReached != 0) | ~v4);
  if ((v7 & v3) == 0) {
    unsigned int v8 = 0;
  }
  if (Count) {
    return 0;
  }
  else {
    return v8;
  }
}

uint64_t BlueFin::GlPeRepeatedIsol::GetCount(uint64_t a1, unsigned __int16 a2)
{
  if (!*(unsigned char *)a1) {
    return 0;
  }
  uint64_t v2 = 0;
  uint64_t v3 = a1 + 8;
  while (*(unsigned __int16 *)(v3 + 2 * v2 - 6) != a2
       || (*(_DWORD *)(a1 + 24) - *(_DWORD *)(v3 + 4 * v2 + 4)) >> 5 > 0x270)
  {
    if (++v2 == 3) {
      return 0;
    }
  }
  return *(unsigned __int8 *)(a1 + v2 + 8);
}

uint64_t BlueFin::GlPosEng::SetAsicCfg(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  int v4 = *(_DWORD *)(*(void *)(a1 + 16) + 11560);
  if (v4 >= 1)
  {
    int v5 = 0;
    int v6 = 0;
    while (1)
    {
      BlueFin::GlSettingsImpl::GetDbgParam(*(BlueFin::GlSettingsImpl **)(a1 + 16), v5, (char (*)[64])__dst, (char (*)[256])v44);
      if (*(void *)__dst == 0x6E6E61684378614DLL && *(_DWORD *)&__dst[8] == 7564389) {
        break;
      }
      int v5 = (unsigned __int16)++v6;
      if (v4 <= (unsigned __int16)v6) {
        goto LABEL_10;
      }
    }
    uint64_t v8 = *(void *)(a1 + 16);
    *(_DWORD *)(v8 + 272) = atoi(v44);
  }
LABEL_10:
  *(void *)unsigned __int8 v44 = &unk_270EC2BC0;
  *(void *)&v44[8] = 0;
  memset(&v44[116], 0, 98);
  *(void *)&v44[216] = &v44[228];
  v44[224] = 2;
  *(_DWORD *)&v44[232] = 0;
  *(_DWORD *)&v44[228] = 0;
  *(_WORD *)&v44[240] = 0;
  v44[258] = 0;
  *(_DWORD *)&v44[15] = 0;
  *(void *)&v44[244] = 0;
  *(void *)&v44[249] = 0;
  BlueFin::GlPeIf::stAsicCfg::operator=((uint64_t)&v44[8], (uint64_t)a2);
  if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
    (*(void (**)(char *, void, void))(*(void *)v44 + 24))(v44, 0, 0);
  }
  uint64_t v9 = *(void *)(a1 + 16);
  BlueFin::GlSetBase::operator=(v9 + 26224, (uint64_t)(a2 + 104));
  *(void *)(v9 + 26236) = *(void *)(a2 + 110);
  long long __src = v33;
  unsigned __int8 v32 = 8;
  memset(v33, 0, sizeof(v33));
  unsigned __int16 v10 = a2[1];
  if (v10)
  {
    *(void *)long long __dst = &__dst[12];
    __dst[8] = 8;
    *(_OWORD *)&__dst[12] = BlueFin::GlSvIdSet::csm_aulGlSvIdSet[0];
    *(_OWORD *)&__dst[28] = *(_OWORD *)algn_263BAA84C;
    BlueFin::GlSetBase::Add((uint64_t)&__src, (int **)__dst);
    unsigned __int16 v10 = a2[1];
  }
  if ((v10 & 2) != 0)
  {
    *(void *)long long __dst = &__dst[12];
    __dst[8] = 8;
    *(_OWORD *)&__dst[12] = xmmword_263BAA85C;
    *(_OWORD *)&__dst[28] = *(_OWORD *)algn_263BAA86C;
    BlueFin::GlSetBase::Add((uint64_t)&__src, (int **)__dst);
    unsigned __int16 v10 = a2[1];
  }
  if ((v10 & 4) != 0 && (*(unsigned char *)(*(void *)(*(void *)(a1 + 16) + 160) + 3) & 4) != 0)
  {
    *(void *)long long __dst = &__dst[12];
    __dst[8] = 8;
    *(_OWORD *)&__dst[12] = xmmword_263BAA87C;
    *(_OWORD *)&__dst[28] = unk_263BAA88C;
    BlueFin::GlSetBase::Add((uint64_t)&__src, (int **)__dst);
    unsigned __int16 v10 = a2[1];
  }
  if ((v10 & 8) != 0)
  {
    *(void *)long long __dst = &__dst[12];
    __dst[8] = 8;
    *(_OWORD *)&__dst[12] = xmmword_263BAA89C;
    *(_OWORD *)&__dst[28] = unk_263BAA8AC;
    BlueFin::GlSetBase::Add((uint64_t)&__src, (int **)__dst);
    unsigned __int16 v10 = a2[1];
  }
  uint64_t v11 = *(void *)(a1 + 16);
  if ((v10 & 0x20) != 0 && (*(unsigned char *)(*(void *)(v11 + 160) + 1) & 2) != 0)
  {
    *(void *)long long __dst = &__dst[12];
    __dst[8] = 8;
    *(_OWORD *)&__dst[12] = xmmword_263BAA8BC;
    *(_OWORD *)&__dst[28] = unk_263BAA8CC;
    BlueFin::GlSetBase::Add((uint64_t)&__src, (int **)__dst);
    unsigned __int16 v10 = a2[1];
    uint64_t v11 = *(void *)(a1 + 16);
  }
  if ((v10 & 0x40) != 0 && (*(unsigned char *)(*(void *)(v11 + 160) + 1) & 4) != 0)
  {
    *(void *)long long __dst = &__dst[12];
    __dst[8] = 8;
    *(_OWORD *)&__dst[12] = xmmword_263BAA8DC;
    *(_OWORD *)&__dst[28] = unk_263BAA8EC;
    BlueFin::GlSetBase::Add((uint64_t)&__src, (int **)__dst);
    unsigned __int16 v10 = a2[1];
    uint64_t v11 = *(void *)(a1 + 16);
  }
  if ((v10 & 0x80) != 0 && (*(unsigned char *)(*(void *)(v11 + 160) + 2) & 4) != 0)
  {
    *(void *)long long __dst = &__dst[12];
    __dst[8] = 8;
    *(_OWORD *)&__dst[12] = xmmword_263BAA8FC;
    *(_OWORD *)&__dst[28] = unk_263BAA90C;
    BlueFin::GlSetBase::Add((uint64_t)&__src, (int **)__dst);
    uint64_t v11 = *(void *)(a1 + 16);
  }
  if ((*(unsigned char *)(*(void *)(v11 + 160) + 2) & 8) != 0)
  {
    bzero(__src, ((4 * v32 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    *(void *)long long __dst = &__dst[12];
    __dst[8] = 8;
    *(_OWORD *)&__dst[12] = BlueFin::GlSvIdSet::csm_aulGlSvIdSet[0];
    *(_OWORD *)&__dst[28] = *(_OWORD *)algn_263BAA84C;
    BlueFin::GlSetBase::Add((uint64_t)&__src, (int **)__dst);
    *(void *)long long __dst = &__dst[12];
    __dst[8] = 8;
    *(_OWORD *)&__dst[12] = xmmword_263BAA8DC;
    *(_OWORD *)&__dst[28] = unk_263BAA8EC;
    BlueFin::GlSetBase::Add((uint64_t)&__src, (int **)__dst);
  }
  unsigned int v12 = BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion;
  if (BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion != 1)
  {
    __dst[0] = v32;
    memcpy(&__dst[8], __src, 4 * v32);
    *(_WORD *)&_OWORD __dst[2] = 0;
    __dst[1] = 0;
    *(_DWORD *)&__dst[4] = *(_DWORD *)&__dst[8];
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)__dst);
    while (__dst[1] != __dst[0])
    {
      if (!*((unsigned char *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId
            + 256 * (unint64_t)v12
            + __dst[2]))
      {
        BlueFin::GlSetBase::Remove((uint64_t)&__src, __dst[2]);
        unsigned int v12 = BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion;
      }
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)__dst);
    }
  }
  BlueFin::GlSvIdSet::GetStr((BlueFin::GlSvIdSet *)&__src, __dst, 256, 44, 1);
  GlCustomLog(13, "GLL Supported SVIDs:[%s]\n", __dst);
  BlueFin::GlSetBase::operator&=((uint64_t)&__src, *(void *)(a1 + 16) + 208);
  BlueFin::GlSettingsImpl::SetSvIdSupported(*(BlueFin::GlSettingsImpl **)(a1 + 16), (const BlueFin::GlSvIdSet *)&__src);
  float v14 = *((float *)a2 + 27);
  float v13 = *((float *)a2 + 28);
  float v16 = *((float *)a2 + 43);
  float v15 = *((float *)a2 + 44);
  float v18 = *((float *)a2 + 45);
  int v17 = *((_DWORD *)a2 + 46);
  uint64_t v19 = *(void *)(a1 + 16);
  long long v20 = *(_OWORD *)(v19 + 944);
  long long v39 = *(_OWORD *)(v19 + 928);
  long long v40 = v20;
  long long v41 = *(_OWORD *)(v19 + 960);
  uint64_t v42 = *(void *)(v19 + 976);
  if (*(unsigned char *)(v19 + 916))
  {
    int v21 = 3;
    float v14 = 0.0;
  }
  else
  {
    long long v22 = *(_OWORD *)(a2 + 66);
    long long v39 = *(_OWORD *)(a2 + 58);
    long long v40 = v22;
    long long v41 = *(_OWORD *)(a2 + 74);
    uint64_t v42 = *(void *)(a2 + 82);
    int v21 = 1;
  }
  if ((*((_DWORD *)a2 + 49) - 39) >= 2 && *(unsigned char *)(v19 + 917) && !*(unsigned char *)(v19 + 25957))
  {
    float v15 = *(float *)(v19 + 984);
    int v21 = 3;
    float v18 = v15;
  }
  v34[0] = 0.0;
  v34[1] = v16;
  v34[2] = v15;
  v34[3] = v14;
  v34[4] = v18;
  v34[5] = v15;
  v34[6] = v13;
  v34[7] = 0.0;
  v34[8] = v15;
  uint64_t v35 = 0;
  int v36 = 0;
  int v37 = v17;
  uint64_t v38 = 0;
  BlueFin::GlPeGnssHwBiasMgr::Initialize(*(void *)(a1 + 126112), v21, v34, &v39);
  unsigned int v23 = *(_DWORD **)(a1 + 16);
  if (*((_DWORD *)a2 + 49) && (*(unsigned char *)(a1 + 406720) || !v23[22]))
  {
    (*(void (**)(_DWORD *))(*(void *)v23 + 16))(v23);
    uint64_t v24 = *((unsigned int *)a2 + 50);
    unsigned int v25 = *(unsigned int **)(a1 + 16);
    if (!v24) {
      uint64_t v24 = v25[12];
    }
    (*(void (**)(unsigned int *, uint64_t))(*(void *)v25 + 24))(v25, v24);
    (*(void (**)(void, void))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), *((unsigned __int8 *)a2 + 204));
    (*(void (**)(void, void))(**(void **)(a1 + 16) + 904))(*(void *)(a1 + 16), *((unsigned __int8 *)a2 + 248));
    unsigned int v23 = *(_DWORD **)(a1 + 16);
  }
  for (uint64_t i = 0; i != 7; ++i)
    *((unsigned char *)v23 + i + 256) = *((unsigned char *)a2 + i + 4);
  long long v27 = *(_DWORD **)(a1 + 16);
  int v28 = *a2;
  if (v27[68] > v28) {
    v27[68] = v28;
  }
  uint64_t result = (*(uint64_t (**)(_DWORD *, void))(*(void *)v27 + 1008))(v27, *((unsigned int *)a2 + 47));
  int v30 = (unsigned char *)(*(void *)(a1 + 16) + 26297);
  *int v30 = *((unsigned char *)a2 + 249);
  unsigned char v30[32] = *((unsigned char *)a2 + 250);
  return result;
}

uint64_t BlueFin::GlSetBase::Add(uint64_t this, int **a2)
{
  uint64_t v2 = *(unsigned __int8 *)(this + 8);
  if (v2 != *((unsigned __int8 *)a2 + 8))
  {
    DeviceFaultNotify("glutl_set.cpp", 573, "Add", (char)"m_ucUlongSize == otSet.m_ucUlongSize");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_set.cpp", 573, "m_ucUlongSize == otSet.m_ucUlongSize");
  }
  if (*(unsigned char *)(this + 8))
  {
    uint64_t v3 = *a2;
    int v4 = *(_DWORD **)this;
    do
    {
      int v5 = *v3++;
      *v4++ |= v5;
      --v2;
    }
    while (v2);
  }
  return this;
}

char *BlueFin::GlSvIdSet::GetStr(BlueFin::GlSvIdSet *this, char *a2, int a3, char a4, int a5)
{
  unsigned int v9 = BlueFin::GlSetBase::Cnt(this);
  v40[0] = *((unsigned char *)this + 8);
  uint64_t v38 = this;
  memcpy(v43, *(const void **)this, 4 * v40[0]);
  __int16 v41 = 0;
  v40[1] = 0;
  int v42 = v43[0];
  BlueFin::GlSetIterator::operator++(v40);
  uint64_t v34 = a2;
  if (v9)
  {
    unsigned __int16 v10 = &a2[a3 - 1];
    if (v10 > a2)
    {
      int v11 = 0;
      unsigned int v12 = &a2[a3];
      uint64_t v35 = v12 - 1;
      int v36 = v12 - 2;
      do
      {
        unsigned __int8 v13 = v41;
        memset(v39, 0, 5);
        int v14 = v41;
        if (v41 < 0x64u)
        {
          float v15 = v39;
          if (v41 % 0x64u < 0xA) {
            goto LABEL_8;
          }
        }
        else
        {
          v39[0] = (v41 / 0x64u) | 0x30;
          float v15 = &v39[1];
        }
        *v15++ = (v41 % 0x64u / 0xA) | 0x30;
LABEL_8:
        *float v15 = (v13 - 10 * ((205 * v14) >> 11)) | 0x30;
        if (a2 >= v10)
        {
          BOOL v21 = 0;
        }
        else
        {
          char v16 = v39[0];
          if (v39[0])
          {
            uint64_t v17 = v36 - a2;
            float v18 = &v39[1];
            while (1)
            {
              uint64_t v19 = a2;
              *a2++ = v16;
              if (!v17) {
                break;
              }
              int v20 = *v18++;
              char v16 = v20;
              --v17;
              if (!v20) {
                goto LABEL_17;
              }
            }
            a2 = v35;
LABEL_17:
            BOOL v21 = v19 + 1 < v10;
          }
          else
          {
            BOOL v21 = 1;
          }
        }
        BlueFin::GlSetIterator::operator++(v40);
        if (!a5
          || (int v22 = v13,
              unint64_t v23 = v13 + 1,
              uint64_t v24 = *(void *)v38,
              ((*(unsigned int *)(*(void *)v38 + ((v23 >> 3) & 0x3C)) >> (v23 & 0x1F)) & 1) == 0)
          || (((unint64_t)*(unsigned int *)(v24 + 4 * ((v22 + 2) >> 5)) >> ((v22 + 2) & 0x1F)) & 1) == 0)
        {
          if (v9 <= (unsigned __int16)++v11 || !v21) {
            continue;
          }
          goto LABEL_29;
        }
        v11 += 2;
        BlueFin::GlSetIterator::operator++(v40);
        unsigned __int8 v25 = v22 + 1;
        if (((unint64_t)*(unsigned int *)(v24 + 4 * (((v22 + 1) + 1) >> 5)) >> ((v22 + 2) & 0x1F)))
        {
          do
          {
            ++v11;
            BlueFin::GlSetIterator::operator++(v40);
            ++v25;
          }
          while ((((unint64_t)*(unsigned int *)(v24 + 4 * ((v25 + 1) >> 5)) >> ((v25 + 1) & 0x1F)) & 1) != 0);
        }
        __n128 v39[2] = 0;
        *(_WORD *)&v39[3] = 0;
        strcpy(v39, ":");
        unsigned int v26 = *((unsigned __int8 *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId
              + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion
              + v25);
        unsigned int v27 = *((unsigned char *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId
              + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion
              + v25)
            % 0x64u;
        if (v26 >= 0x64)
        {
          v39[1] = (*((unsigned char *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId
                    + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion
                    + v25)
                  / 0x64u) | 0x30;
          int v28 = &v39[2];
LABEL_34:
          *v28++ = ((205 * v27) >> 11) | 0x30;
          goto LABEL_35;
        }
        int v28 = &v39[1];
        if (v27 >= 0xA) {
          goto LABEL_34;
        }
LABEL_35:
        *int v28 = (v26 - 10 * ((205 * v26) >> 11)) | 0x30;
        if (a2 >= v10) {
          continue;
        }
        uint64_t v30 = v35 - a2;
        unsigned int v31 = v39;
        while (1)
        {
          char v32 = *v31;
          if (!*v31) {
            break;
          }
          ++v31;
          *a2++ = v32;
          if (!--v30)
          {
            a2 = v35;
            goto LABEL_30;
          }
        }
        if (v9 <= (unsigned __int16)v11) {
          continue;
        }
LABEL_29:
        *a2++ = a4;
LABEL_30:
        ;
      }
      while (v9 > (unsigned __int16)v11 && a2 < v10);
    }
  }
  *a2 = 0;
  return v34;
}

uint64_t BlueFin::GlPeIf::stAsicCfg::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 108) = *(void *)(a2 + 108);
  for (uint64_t i = 116; i != 172; i += 4)
    *(_DWORD *)(a1 + i) = *(_DWORD *)(a2 + i);
  *(_OWORD *)(a1 + 172) = *(_OWORD *)(a2 + 172);
  *(void *)(a1 + 188) = *(void *)(a2 + 188);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(unsigned char *)(a1 + 205) = *(unsigned char *)(a2 + 205);
  BlueFin::GlSetBase::operator=(a1 + 208, a2 + 208);
  *(void *)(a1 + 22BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(void *)(a2 + 220);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(unsigned char *)(a1 + 233) = *(unsigned char *)(a2 + 233);
  *(void *)(a1 + 236) = *(void *)(a2 + 236);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
  *(unsigned char *)(a1 + 25BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(unsigned char *)(a2 + 250);
  return a1;
}

uint64_t BlueFin::GlPeGnssHwBiasMgr::Initialize(uint64_t result, int a2, float *a3, long long *a4)
{
  int v4 = *(_DWORD *)(result + 8);
  if (a2 == 4
    && (v4 | 2) == 3
    && (vabds_f32(*a3, *(float *)(result + 12)) > 0.00000011921
     || vabds_f32(a3[3], *(float *)(result + 24)) > 0.00000011921
     || vabds_f32(a3[6], *(float *)(result + 36)) > 0.00000011921
     || vabds_f32(a3[11], *(float *)(result + 56)) > 0.00000011921
     || vabds_f32(a3[2], *(float *)(result + 20)) > 20.0
     || vabds_f32(a3[4], *(float *)(result + 28)) > 20.0
     || vabds_f32(a3[5], *(float *)(result + 32)) > 20.0
     || vabds_f32(a3[8], *(float *)(result + 44)) > 20.0
     || vabds_f32(a3[12], *(float *)(result + 60)) > 20.0))
  {
    return GlCustomLog(15, "NVMEM HWBIAS values ignored due to suspected Notch Filter Or LTE filter configuration change/enabled.\n");
  }
  if (v4 <= a2)
  {
    *(_DWORD *)(result + 8) = a2;
    long long v5 = *(_OWORD *)a3;
    long long v6 = *((_OWORD *)a3 + 1);
    long long v7 = *((_OWORD *)a3 + 2);
    *(_OWORD *)(result + 56) = *(_OWORD *)(a3 + 11);
    *(_OWORD *)(result + 44) = v7;
    *(_OWORD *)(result + 28) = v6;
    *(_OWORD *)(result + 12) = v5;
    long long v8 = *a4;
    long long v9 = a4[1];
    long long v10 = a4[2];
    *(void *)(result + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *((void *)a4 + 6);
    *(_OWORD *)(result + 104) = v10;
    *(_OWORD *)(result + 88) = v9;
    *(_OWORD *)(result + 72) = v8;
    if (BlueFin::GlUtils::m_pInstance)
    {
      if (*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
        return (*(uint64_t (**)(uint64_t, void, void))(*(void *)result + 24))(result, 0, 0);
      }
    }
  }
  return result;
}

uint64_t BlueFin::GlSettingsImpl::SetSvIdSupported(BlueFin::GlSettingsImpl *this, const BlueFin::GlSvIdSet *a2)
{
  int v4 = (const void **)((char *)this + 208);
  BlueFin::GlSetBase::operator=((uint64_t)this + 208, (uint64_t)a2);
  uint64_t v5 = 0;
  long long v6 = *(_OWORD *)((char *)a2 + 12);
  *(_OWORD *)((char *)this + 236) = *(_OWORD *)((char *)a2 + 28);
  *(_OWORD *)((char *)this + 22BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v6;
  int v23 = *(_DWORD *)((char *)this + 263);
  char v24 = *((unsigned char *)this + 268);
  char v25 = *((unsigned char *)this + 267);
  char v26 = *((unsigned char *)this + 269);
  do
  {
    if (*((unsigned char *)&v23 + v5))
    {
      long long v7 = &BlueFin::GlSvIdSet::csm_aulGlSvIdSet[2 * v5];
      uint64_t v19 = &v21;
      unsigned __int8 v20 = 8;
      long long v8 = v7[1];
      long long v21 = *v7;
      long long v22 = v8;
      BlueFin::GlSvIdSet::operator~((const void **)&v19, (uint64_t)&v27);
      BlueFin::GlSetBase::operator&=((uint64_t)v4, (uint64_t)&v27);
    }
    long long v9 = &BlueFin::GlSvIdSet::csm_aulGlSvIdSet[2 * v5];
    char v16 = (int *)v18;
    char v17 = 8;
    long long v10 = v9[1];
    v18[0] = *v9;
    v18[1] = v10;
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v19, (unsigned int *)&v21, 8u, v4);
    unsigned int v27 = &v29;
    char v28 = 8;
    long long v29 = 0u;
    long long v30 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v19, (int **)&v27, &v16);
    uint64_t result = BlueFin::GlSetBase::operator=((uint64_t)&v19, (uint64_t)&v27);
    long long v21 = v29;
    long long v22 = v30;
    if (*(_DWORD *)v19)
    {
LABEL_5:
      BOOL v12 = 1;
      goto LABEL_15;
    }
    if (v20 < 2uLL)
    {
      BOOL v12 = 0;
    }
    else
    {
      if (*((_DWORD *)v19 + 1)) {
        goto LABEL_5;
      }
      uint64_t v13 = 2;
      while (v20 != v13)
      {
        if (*((_DWORD *)v19 + v13++))
        {
          unint64_t v15 = v13 - 1;
          goto LABEL_14;
        }
      }
      unint64_t v15 = v20;
LABEL_14:
      BOOL v12 = v15 < v20;
    }
LABEL_15:
    *((unsigned char *)this + v5++ + 276) = v12;
  }
  while (v5 != 7);
  return result;
}

uint64_t BlueFin::GlSettingsImpl::SetHwAsicVersion(uint64_t this, int a2)
{
  *(_DWORD *)(this + 14BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a2;
  return this;
}

uint64_t BlueFin::GlPeFirstFix::GetHighestEl(uint64_t a1, BlueFin::GlSetBase *this, uint64_t a3, unsigned int a4)
{
  if (BlueFin::GlSetBase::Cnt(this) <= a4)
  {
    char v17 = "rotSigs.Cnt() > usCount";
    DeviceFaultNotify("glpe_firstfix.cpp", 665, "GetHighestEl", (char)"rotSigs.Cnt() > usCount");
    float v18 = "glpe_firstfix.cpp";
    int v19 = 665;
    goto LABEL_18;
  }
  uint64_t result = (uint64_t)BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, v27, 0x13u, (const void **)this);
  *(_OWORD *)(a1 + 12) = 0u;
  *(void *)a1 = a1 + 12;
  *(unsigned char *)(a1 + 8) = 19;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  if (a4)
  {
    int v9 = 0;
    while (1)
    {
      unsigned __int8 v20 = v26;
      memcpy(v24, __src, 4 * v26);
      unsigned __int16 v22 = 0;
      unsigned __int8 v21 = 0;
      int v23 = v24[0];
      BlueFin::GlSetIterator::operator++(&v20);
      if (v21 != v20) {
        break;
      }
      int v10 = 0;
      __int16 v11 = 575;
      int v12 = -1;
LABEL_12:
      if (!v10 && v12 == -1)
      {
        char v17 = "otHighestElSignalId != GlSignalId()";
        DeviceFaultNotify("glpe_firstfix.cpp", 686, "GetHighestEl", (char)"otHighestElSignalId != GlSignalId()");
        float v18 = "glpe_firstfix.cpp";
        int v19 = 686;
        goto LABEL_18;
      }
      *(_DWORD *)(*(void *)a1 + 4 * ((unsigned __int16)v11 >> 5)) |= 1 << v11;
      uint64_t result = BlueFin::GlSetBase::Remove((uint64_t)&__src, v11);
      if (++v9 >= a4) {
        return result;
      }
    }
    int v10 = 0;
    int v12 = -1;
    __int16 v11 = 575;
    float v13 = -91.0;
    while (1)
    {
      if (v22 >= 0x23FuLL)
      {
        char v17 = "usIndex < NUM_SIGNAL_IDS";
        DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
        float v18 = "glsignalid.h";
        int v19 = 577;
        goto LABEL_18;
      }
      uint64_t v14 = *(unsigned __int8 *)(a3 + v22);
      if (v14 == 255) {
        break;
      }
      float v15 = *(float *)(a3 + 4 * v14 + 1088);
      if (v15 > v13)
      {
        char v16 = (unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v22;
        int v12 = (char)v16[1];
        int v10 = *v16;
        __int16 v11 = v22;
        float v13 = v15;
      }
      BlueFin::GlSetIterator::operator++(&v20);
      if (v21 == v20) {
        goto LABEL_12;
      }
    }
    char v17 = "ucArrIdx != stSvAzEl::INVALID_INDEX";
    DeviceFaultNotify("glpe_firstfix.cpp", 678, "GetHighestEl", (char)"ucArrIdx != stSvAzEl::INVALID_INDEX");
    float v18 = "glpe_firstfix.cpp";
    int v19 = 678;
LABEL_18:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v18, v19, v17);
  }
  return result;
}

uint64_t BlueFin::GlPeKfPool::AdjustBc(BlueFin::GlPeKfPool *this, float a2)
{
  uint64_t v3 = (uint64_t (***)(void, float))*((void *)this + 7265);
  uint64_t v4 = (**v3)(v3, a2);
  if (v4)
  {
    uint64_t v5 = 0;
    long long v6 = (char *)this + 58096;
    do
    {
      long long v7 = *(uint64_t (****)(void, float))&v6[v5];
      if (v7 != v3 && ((unsigned int (*)(uint64_t (***)(void, float)))(*v7)[48])(v7))
      {
        uint64_t v8 = *(void *)&v6[v5] + *(void *)(**(void **)&v6[v5] - 24);
        *(double *)(v8 + 88) = *(double *)(v8 + 88) + (double)(int)v4 * 299792.458;
      }
      v5 += 8;
    }
    while (v5 != 24);
    *(void *)((char *)this + *(void *)(*(void *)this - 24) + 88) = *(void *)((char *)*(*v3 - 3)
                                                                                     + (void)v3
                                                                                     + 88);
  }
  return v4;
}

double BlueFin::GlPeNavUtil::AdjustBc(BlueFin::GlPeNavUtil *this, float a2)
{
  if (a2 <= -0.00000011921)
  {
    DeviceFaultNotify("glpe_navutil.cpp", 1136, "AdjustBc", (char)"fMaxAbsBc > 0.0 - FLT_EPSILON");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_navutil.cpp", 1136, "fMaxAbsBc > 0.0 - FLT_EPSILON");
  }
  double v2 = a2;
  uint64_t v3 = (double *)((char *)this + *(void *)(*(void *)this - 24));
  double v4 = v3[11] / 299792.458;
  double result = (float)-a2;
  if (v4 < result || v4 >= v2)
  {
    if (v4 <= 0.0)
    {
      double v7 = 0.0;
      if (v4 < 0.0) {
        double v7 = ceil(v4 + -0.5);
      }
    }
    else
    {
      double v7 = floor(v4 + 0.5);
    }
    double result = (v4 - v7) * 299792.458;
    v3[11] = result;
  }
  return result;
}

uint64_t BlueFin::GlPeReqBag::SetSIGMeasuement(BlueFin::GlPeReqBag *this, const void **a2)
{
  int v37 = &unk_270EC4BC0;
  uint64_t v38 = (char *)this + 3233;
  char v39 = *((unsigned char *)this + 3233);
  *((unsigned char *)this + 3233) = 0;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, v36, 0x13u, a2 + 12);
  int v4 = *(_DWORD *)a2;
  int v5 = *((_DWORD *)this + 328);
  if ((v5 & 0xC) != 0)
  {
    BlueFin::GlPeMeasStatus::SetSIGMeasuement((BlueFin::GlPeReqBag *)((char *)this + 3296), (BlueFin::GlPeMsmtMgr *)a2);
    int v5 = *((_DWORD *)this + 328);
  }
  if ((v5 & 4) == 0)
  {
    if ((v5 & 8) != 0)
    {
      uint64_t v6 = *((unsigned int *)this + 329);
      if ((v6 & 0x80000000) != 0)
      {
        if (v6 == -1) {
          goto LABEL_34;
        }
        double v7 = (__int16 *)((char *)this + 3238);
      }
      else
      {
        double v7 = (__int16 *)(*(void *)(*((void *)this + v6) + 8) + 22);
      }
      if (*v7 >= 10) {
        goto LABEL_10;
      }
    }
LABEL_34:
    BlueFin::GlArray::Clear((uint64_t)this + 1272);
    goto LABEL_35;
  }
LABEL_10:
  unsigned __int8 v29 = v35;
  memcpy(v33, __src, 4 * v35);
  unsigned __int16 v31 = 0;
  unsigned __int8 v30 = 0;
  int v32 = v33[0];
  BlueFin::GlSetIterator::operator++(&v29);
  if (v30 != v29)
  {
    while (1)
    {
      if (v31 >= 0x23FuLL)
      {
        DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
      }
      uint64_t v8 = (unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v31;
      int v9 = *v8;
      LODWORD(v8) = (char)v8[1];
      LOBYTE(v27) = v9;
      HIDWORD(v27) = v8;
      unsigned __int16 v28 = v31;
      int v10 = BlueFin::GlPeMsmtMgr::AccessMeMeas((BlueFin::GlPeMsmtMgr *)a2, (const BlueFin::GlSignalId *)&v27, 0, 1u);
      if ((v10[14] & 8) != 0) {
        goto LABEL_23;
      }
      uint64_t v11 = BlueFin::GlArray::Get((BlueFin::GlPeReqBag *)((char *)this + 1272), v9);
      if (v11) {
        goto LABEL_16;
      }
      uint64_t v11 = (uint64_t)BlueFin::GlArray::Add((BlueFin::GlPeReqBag *)((char *)this + 1272), v9);
      if (v11) {
        goto LABEL_15;
      }
      unsigned int v27 = (char *)this + 1272;
      LOBYTE(v28) = *((unsigned char *)this + 1311) + 1;
      if (*((unsigned __int8 *)this + 1310) > v28) {
        break;
      }
LABEL_23:
      BlueFin::GlSetIterator::operator++(&v29);
      if (v30 == v29) {
        goto LABEL_35;
      }
    }
    while (1)
    {
      unsigned __int8 v15 = BlueFin::GlArrayIterator::Next((BlueFin::GlArrayIterator *)&v27);
      if ((v15 + 67) < 0x44u
        || (uint64_t v16 = BlueFin::GlSvId::s_aucSvId2gnss[v15],
            BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v16] == 255))
      {
        __int16 v17 = 575;
      }
      else
      {
        __int16 v17 = v15
            + BlueFin::GlSignalId::s_ausGnss2signalId[v16]
            - BlueFin::GlSvId::s_aucGnss2minSvId[v16];
      }
      if ((((unint64_t)*((unsigned int *)__src + (v17 >> 5)) >> (v17 & 0x1F)) & 1) == 0)
      {
        BlueFin::GlArray::Remove((BlueFin::GlPeReqBag *)((char *)this + 1272), v15);
        uint64_t v11 = (uint64_t)BlueFin::GlArray::Add((BlueFin::GlPeReqBag *)((char *)this + 1272), v9);
        if (v11) {
          break;
        }
      }
      if (v28 >= v27[38]) {
        goto LABEL_23;
      }
    }
LABEL_15:
    *(void *)uint64_t v11 = 0;
    *(_DWORD *)(v11 + 8) = 0;
    *(unsigned char *)(v11 + 12) = 0;
    *(_DWORD *)(v11 + 16) = 1;
    *(void *)(v11 + 24) = 0;
    *(_DWORD *)(v11 + 32) = 0;
    *(unsigned char *)(v11 + 36) = 0;
LABEL_16:
    int v12 = *((_DWORD *)v10 + 3);
    if ((~(_WORD)v12 & 0x102) != 0)
    {
      BlueFin::GlPeMeasFilter::UpdateRng(v11, *((_DWORD *)v10 + 10), v10, v4, 0, 1, *((double *)v10 + 7), *((double *)v10 + 10) / 299792458.0);
    }
    else
    {
      if ((v12 & 0x1000) != 0) {
        double v13 = *((double *)v10 + 10) / 299792458.0;
      }
      else {
        double v13 = *((float *)v10 + 24);
      }
      BlueFin::GlPeMeasFilter::UpdateRng(v11, *((_DWORD *)v10 + 10), v10, v4, (v12 & 0x1000) == 0, 0, *((double *)v10 + 7), v13);
    }
    *((_DWORD *)v10 + 12) = *(_DWORD *)(v11 + 16);
    double v14 = *((double *)v10 + 7) * 1000.0;
    *((void *)v10 + 8) = *(void *)v11;
    *((double *)v10 + 9) = v14;
    goto LABEL_23;
  }
LABEL_35:
  unsigned int v18 = 0;
  int v19 = (char *)__src + 4 * v35 - 4;
  do
  {
    if (*v19)
    {
      unsigned int v20 = *v19 - (((*v19 >> 1) & 0x5B6DB6DB) + ((*v19 >> 2) & 0x9249249));
      unsigned int v18 = ((v20 + (v20 >> 3)) & 0xC71C71C7) + v18 - 63 * (((v20 + (v20 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    --v19;
  }
  while (v19 >= __src);
  int v21 = (unsigned __int16)v18;
  int v22 = BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(a2 + 1));
  int v23 = BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(a2 + 23));
  int v24 = BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(a2 + 181));
  GlCustomLog(14, "GlPeReqBag::SetSIGMeasuement time=%d cnt=%d %d %d %d \n", v4, v21, v22, v23, v24);
  for (uint64_t i = 0; i != 576; i += 8)
  {
    uint64_t result = *(void *)((char *)this + i);
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t, const void **))(*(void *)result + 96))(result, a2);
    }
  }
  *uint64_t v38 = v39;
  return result;
}

void sub_2639DCDB4(_Unwind_Exception *a1)
{
  **(unsigned char **)(v1 - 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(unsigned char *)(v1 - 112);
  _Unwind_Resume(a1);
}

void BlueFin::GlPeRqHdlrGnssMeasData::SetSIGMeasuement(BlueFin::GlPeRqHdlrGnssMeasData *this, const void **a2)
{
  bzero((char *)this + 64, 0x9B40uLL);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v275, v276, 0x13u, a2 + 7078);
  unsigned __int8 v270 = *((unsigned char *)a2 + 16);
  unsigned int v250 = (BlueFin::GlPeMsmtMgr *)a2;
  memcpy(v274, a2[1], 4 * v270);
  unsigned __int16 v272 = 0;
  unsigned __int8 v271 = 0;
  int v273 = v274[0];
  BlueFin::GlSetIterator::operator++(&v270);
  if (v271 != v270)
  {
    unsigned int v5 = *((_DWORD *)this + 17);
    unsigned int v245 = (uint64_t *)(a2 + 7089);
    unsigned int v244 = (char *)this + 304;
    float64x2_t v246 = (float64x2_t)vdupq_n_s64(0x41CDCD6500000000uLL);
    double v6 = 0.5;
    int64x2_t v4 = vdupq_n_s64(0x41B1DE784A000000uLL);
    double v7 = -8.0;
    float64x2_t v249 = (float64x2_t)v4;
    while (2)
    {
      if (v5 <= 0x63)
      {
        unint64_t v8 = v272;
        if (v272 >= 0x23FuLL)
        {
          unsigned int v241 = "usIndex < NUM_SIGNAL_IDS";
          DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
          int v242 = "glsignalid.h";
          int v243 = 577;
          goto LABEL_397;
        }
        int v9 = (unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v272;
        unsigned __int8 v10 = *v9;
        int v11 = (char)v9[1];
        v277[0] = *v9;
        int v278 = v11;
        __int16 v279 = v272;
        MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas(v250, (const BlueFin::GlSignalId *)v277, 0, 0);
        double v13 = MeMeas;
        unsigned int v14 = *((_DWORD *)this + 17);
        unsigned __int8 v15 = (char *)this + 392 * v14;
        unsigned int v16 = *MeMeas;
        *((_WORD *)v15 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v16;
        __int16 v17 = v15 + 80;
        *((void *)v17 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 392;
        if (v16)
        {
          if (v16 <= 0x20)
          {
            *((unsigned char *)this + 392 * v14 + 82) = 1;
            goto LABEL_23;
          }
          if (v16 <= 0x33)
          {
            *((unsigned char *)this + 392 * v14 + 82) = 2;
            __int16 v18 = v16 + 87;
LABEL_14:
            *__int16 v17 = v18;
            goto LABEL_23;
          }
          if (v16 <= 0x41)
          {
            *((unsigned char *)this + 392 * v14 + 82) = 3;
            __int16 v18 = v16 + 41;
            goto LABEL_14;
          }
          if (v16 <= 0x4B)
          {
            *((unsigned char *)this + 392 * v14 + 82) = 4;
            __int16 v18 = v16 + 127;
            goto LABEL_14;
          }
          if (v16 < 0x8B)
          {
            *__int16 v17 = v16 - 75;
            int v19 = (char *)this + 392 * v14;
            char v20 = 5;
            goto LABEL_19;
          }
          __int16 v18 = v16 - 174;
          if (v16 <= 0xAE)
          {
            *__int16 v17 = v16 - 138;
            int v19 = (char *)this + 392 * v14;
            char v20 = 6;
LABEL_19:
            v19[82] = v20;
            goto LABEL_23;
          }
          if (v16 <= 0xBC)
          {
            *((unsigned char *)this + 392 * v14 + 82) = 7;
            goto LABEL_14;
          }
        }
        *__int16 v17 = 0;
        *((unsigned char *)this + 392 * v14 + 82) = 0;
LABEL_23:
        int v21 = 0;
        int v22 = (char *)this + 392 * v14;
        *((_DWORD *)v22 + 24) = 0;
        int v23 = (int *)(v22 + 96);
        *((void *)v23 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
        int v24 = *((_DWORD *)MeMeas + 1);
        unsigned int v25 = (v16 + 117);
        BOOL v27 = v25 < 0x24 || v24 > 0;
        int v28 = *((_DWORD *)MeMeas + 3);
        if ((v28 & 2) != 0)
        {
          if (v25 > 0x23 || v24)
          {
            if (v24 == 2 && (v16 + 81) >= 0xEu) {
              int v21 = 65537;
            }
            else {
              int v21 = 1;
            }
          }
          else
          {
            int v21 = 1024;
          }
          int *v23 = v21;
        }
        if ((v28 & 4) != 0)
        {
          v21 |= 0x20u;
          int *v23 = v21;
        }
        char v30 = (v28 & 8) == 0 || v27;
        if ((v30 & 1) == 0)
        {
          if (v16 - 81 > 0x34 || v24)
          {
            unsigned int v32 = v16 - 76;
            if (v32 <= 0x3E && ((1 << v32) & 0x7C0000000000001FLL) != 0) {
              int v31 = 256;
            }
            else {
              int v31 = 2;
            }
          }
          else
          {
            int v31 = 65538;
          }
          int *v23 = v31 | v21;
        }
        int v33 = *((_DWORD *)MeMeas + 3);
        if ((v33 & 0xC) != 0)
        {
          uint64_t v34 = *((void *)this + 7);
          unsigned __int8 v35 = (BlueFin::GlPeSatAidInfo *)(*(void *)(v34 + 48) + 32);
          BlueFin::GlPeTimeManager::GetTime(*(unsigned int **)(v34 + 8), *(_DWORD *)v250, 1, (uint64_t)v277);
          double v268 = 1000000.0;
          double v266 = 0.0;
          if (BlueFin::GlPeSatAidInfo::GetAidRcvdSysTimeS(v35, (const BlueFin::GlSignalId *)v13, (const BlueFin::GlPeGnssTime *)v277, &v266, &v268)&& v268 < 0.1)
          {
            double v36 = *((double *)v13 + 7);
            double v37 = v266;
            if ((v13[12] & 4) != 0) {
              int EpochPerSymbol = BlueFin::GlSignalId::GetEpochPerSymbol((BlueFin::GlSignalId *)v13);
            }
            else {
              int EpochPerSymbol = BlueFin::GlSignalId::GetEpochPerBit((BlueFin::GlSignalId *)v13);
            }
            if (*((unsigned __int16 *)v13 + 4) >= 0x23Fu) {
              goto LABEL_394;
            }
            int v39 = BlueFin::GlSvId::s_aucSvId2gnss[*v13];
            if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)v13 + 1)
                                                                        - *((int *)v13 + 1)
                                                                        + BlueFin::GlSvId::s_aucSvId2gnss[*v13]])
              goto LABEL_395;
            double v40 = v36 * 1000.0;
            long double v41 = floor(v37 * 1000.0);
            long double v42 = floor(v36 * 1000.0);
            double v43 = v37 * 1000.0 - v41;
            double v44 = v40 - v42;
            long double v45 = (double)(BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)v13 + 1) - *((int *)v13 + 1) + BlueFin::GlSvId::s_aucSvId2gnss[*v13]]
                         * EpochPerSymbol);
            double v46 = fmod(v41, v45);
            double v47 = fmod(v42, v45);
            double v48 = v46 + 1.0;
            if (v44 - v43 >= -0.5) {
              double v48 = v46;
            }
            double v49 = v46 + -1.0;
            double v6 = 0.5;
            if (v44 - v43 >= 0.5) {
              double v48 = v49;
            }
            double v50 = dbl_263BBD1C0[v39 == 2];
            double v51 = v48 - v47;
            double v52 = v51 / v50;
            if (v51 / v50 <= 0.0)
            {
              double v53 = 0.0;
              double v7 = -8.0;
              if (v51 / v50 < 0.0) {
                double v53 = ceil(v52 + -0.5);
              }
            }
            else
            {
              double v53 = floor(v52 + 0.5);
              double v7 = -8.0;
            }
            if (fabs(v51 - v53 * v50) > 2.22044605e-16)
            {
              int v54 = (char *)this + 392 * *((unsigned int *)this + 17);
              *((_DWORD *)v54 + 24) |= 0x80000000;
            }
          }
          int v33 = *((_DWORD *)v13 + 3);
        }
        char v55 = (v33 & 0x10) == 0 || v27;
        float64x2_t v56 = v249;
        if ((v55 & 1) == 0)
        {
          int v57 = *v13;
          if ((v57 - 52) > 0xD)
          {
            if ((v57 - 76) <= 0x3E && ((1 << (v57 - 76)) & 0x7C0000000000001FLL) != 0)
            {
              int v58 = *v23 | 0x200;
            }
            else if ((v57 + 117) > 0x23u)
            {
              int v58 = *v23 | 4;
            }
            else
            {
              int v190 = *v23;
              if ((v33 & 0x20) != 0) {
                int v58 = v190 | 0x1000;
              }
              else {
                int v58 = v190 | 0x10800;
              }
            }
          }
          else
          {
            int v58 = *v23 | 0x40;
          }
          int *v23 = v58;
        }
        if ((v33 & 0x20) != 0)
        {
          if (*v13 - 52 >= 0xE) {
            int v60 = 8;
          }
          else {
            int v60 = 128;
          }
          int v59 = v60 | *v23;
          int *v23 = v59;
          if ((v33 & 0x30) != 0)
          {
LABEL_90:
            v61.f64[0] = *((float64_t *)v13 + 7);
            unsigned __int8 v62 = (int64x2_t *)((char *)this + 392 * v14 + 72);
            v61.f64[1] = *((float *)v13 + 22);
            _OWORD v62[2] = vcvtq_s64_f64(vmulq_f64(v61, v246));
            int v63 = v62 + 2;
            if ((*((unsigned char *)this + 392 * *((unsigned int *)this + 17) + 96) & 0x88) != 0)
            {
LABEL_125:
              if ((*(unsigned int *)(v275 + ((v8 >> 3) & 0x1FFC)) >> (v8 & 0x1F)))
              {
                v277[0] = v10;
                int v278 = v11;
                __int16 v279 = v8;
                uint64_t v84 = BlueFin::GlSignalIdArray::Get(*v245, (uint64_t)v277);
                if (!v84)
                {
                  unsigned int v241 = "potGridMeas";
                  DeviceFaultNotify("glpe_reqhdlr_gnss_meas_data.cpp", 687, "SetSIGMeasuement", (char)"potGridMeas");
                  int v242 = "glpe_reqhdlr_gnss_meas_data.cpp";
                  int v243 = 687;
                  goto LABEL_397;
                }
                unsigned int v85 = *(unsigned __int8 *)(v84 + 16) >= 4u ? 4 : *(unsigned __int8 *)(v84 + 16);
                *((unsigned char *)this + 392 * v14 + 30BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v85;
                float64x2_t v56 = v249;
                if (v85)
                {
                  uint64_t v86 = 0;
                  uint64_t v87 = v63->i64[0] - (uint64_t)(*((double *)v13 + 7) * 1000000000.0);
                  uint64_t v88 = 40 * v85;
                  __int16 v89 = (char *)this + 392 * v14;
                  while (1)
                  {
                    __int16 v90 = &v89[v86];
                    *((void *)v90 + 38) = v87 + (uint64_t)(*(double *)(v84 + v86 + 24) * 1000000000.0);
                    uint64_t v91 = (uint64_t)(*(float *)(v84 + v86 + 44) * 1000000000.0);
                    *((void *)v90 + 39) = v91;
                    if (v91 < 1) {
                      break;
                    }
                    if (HIDWORD(v91))
                    {
                      uint64_t v92 = 0xFFFFFFFFLL;
LABEL_136:
                      *((void *)v90 + 39) = v92;
                    }
                    v93.f32[0] = -*(float *)(v84 + v86 + 40);
                    unsigned __int16 v94 = (float64x2_t *)&v89[v86];
                    v93.i32[1] = *(_DWORD *)(v84 + v86 + 52);
                    v94[20] = vmulq_f64(vcvtq_f64_f32(v93), v249);
                    v94[21].f64[0] = *(float *)(v84 + v86 + 56);
                    v86 += 40;
                    if (v88 == v86) {
                      goto LABEL_138;
                    }
                  }
                  uint64_t v92 = 1;
                  goto LABEL_136;
                }
              }
LABEL_138:
              uint64_t v95 = 56;
              if (!*((_DWORD *)v13 + 1)) {
                uint64_t v95 = 52;
              }
              float v96 = *(float *)(*(void *)(*((void *)this + 7) + 56) + v95);
              if (v96 < 0.0) {
                float v96 = 0.0;
              }
              float v97 = *((float *)v13 + 27);
              int v98 = (float64x2_t *)((char *)this + 392 * v14);
              v98[7].f64[1] = (float)(v97 + v96);
              v98[17].f64[1] = v97;
              v99.f32[0] = -*((float *)v13 + 24);
              v99.i32[1] = *((_DWORD *)v13 + 25);
              v98[8] = vmulq_f64(vcvtq_f64_f32(v99), v56);
              unsigned int v100 = *((_DWORD *)v13 + 3);
              if ((v100 & 2) == 0)
              {
                *((void *)this + 49 * v14 + 17) = 0x41B1DE784A000000;
                v63->i64[1] = 1000000000;
              }
              int v102 = *((_DWORD *)v17 - 1);
              __int16 v101 = (int *)(v17 - 2);
              *__int16 v101 = v102 | 0x40000;
              uint64_t v103 = (char *)this + 392 * v14;
              int v104 = (v100 >> 4) & 4 | (v100 >> 12) & 1;
              *((_WORD *)v103 + 72) = (v100 >> 4) & 4 | (v100 >> 12) & 1;
              unsigned int v105 = v103 + 144;
              if ((v100 & 0x100) == 0 || *((_DWORD *)v13 + 10) < *((_DWORD *)this + v8 + 9992))
              {
                LOWORD(v104) = v104 | 2;
                _WORD *v105 = v104;
              }
              if ((v100 & 0x20000) != 0) {
                _WORD *v105 = v104 | 8;
              }
              int v106 = (char *)this + 392 * v14;
              int v107 = (v100 >> 20) & 1;
              *((_WORD *)v106 + 84) = (v100 >> 20) & 1;
              int v108 = v106 + 168;
              int v247 = v105;
              int v248 = &v63->i64[1];
              if ((v100 & 0x100) != 0)
              {
                unsigned int v109 = *((_DWORD *)v13 + 10);
                if (v109 < *((_DWORD *)this + v8 + 9992)) {
                  *int v108 = v107 | 2;
                }
              }
              else
              {
                *int v108 = v107 | 2;
                unsigned int v109 = *((_DWORD *)v13 + 10);
              }
              *((_DWORD *)this + v8 + 9992) = v109;
              uint64_t v110 = (char *)this + 392 * v14;
              *((_DWORD *)v110 + 74) = *((_DWORD *)v13 + 10);
              v277[0] = v10;
              int v278 = v11;
              __int16 v279 = v8;
              int v111 = *(_DWORD *)v250;
              double v268 = -*((double *)v13 + 10);
              double v266 = *((float *)v13 + 23);
              BlueFin::GlMeasData_ADRState::UpdateCarrierPhaseM((BlueFin::GlPeRqHdlrGnssMeasData *)((char *)this + 42304), (const BlueFin::GlSignalId *)v277, v111, &v268, &v266);
              double v112 = *((float *)v13 + 23);
              *((double *)v110 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v112;
              int v113 = (double *)(v110 + 160);
              *((void *)v113 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v114;
              if ((v13[14] & 2) == 0)
              {
                if (*((unsigned __int16 *)v13 + 4) >= 0x23Fu) {
                  goto LABEL_391;
                }
                uint64_t v115 = *v13;
                uint64_t v116 = BlueFin::GlSvId::s_aucSvId2gnss[v115];
                double v117 = BlueFin::GlSignalId::s_adSignalType2ctrFreqHz[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)v13 + 1) - *((int *)v13 + 1) + v116]];
                if (v116 == 2)
                {
                  double v118 = (double)(char)(v115 - 59);
                  if ((v115 - 52) >= 0xE) {
                    double v118 = v7;
                  }
                  double v117 = v117 + v118 * 562500.0;
                }
                double v119 = 299792458.0 / v117;
                if (v119 * v6 > v112) {
                  double *v113 = v112 + v119 * v6;
                }
              }
              v277[0] = v10;
              int v278 = v11;
              __int16 v279 = v8;
              int v120 = *(_DWORD *)v250;
              double v268 = -*((double *)v13 + 15);
              double v266 = *((float *)v13 + 29);
              BlueFin::GlMeasData_ADRState::UpdateCarrierPhaseM((BlueFin::GlPeRqHdlrGnssMeasData *)((char *)this + 47744), (const BlueFin::GlSignalId *)v277, v120, &v268, &v266);
              uint64_t v121 = (char *)this + 392 * v14;
              *((void *)v121 + 22) = v122;
              *((double *)v121 + 23) = *((float *)v13 + 29);
              if (*((unsigned __int16 *)v13 + 4) < 0x23Fu)
              {
                uint64_t v123 = *v13;
                uint64_t v124 = BlueFin::GlSvId::s_aucSvId2gnss[v123];
                double v125 = BlueFin::GlSignalId::s_adSignalType2ctrFreqHz[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)v13 + 1) - *((int *)v13 + 1) + v124]];
                if (v124 == 2)
                {
                  double v126 = (double)(char)(v123 - 59);
                  if ((v123 - 52) >= 0xE) {
                    double v126 = v7;
                  }
                  double v125 = v125 + v126 * 562500.0;
                }
                float v127 = v125;
                char v128 = (void *)((char *)this + 392 * v14);
                v128[26] = 0;
                v128[27] = 0;
                v128[25] = 0;
                int v129 = *((_DWORD *)v13 + 5);
                v128[30] = 0;
                uint64_t v130 = (float *)(v128 + 30);
                *(v130 - 12) = v127;
                *v101 |= 0x200u;
                *((unsigned char *)v130 - 16) = v129 == 4;
                *((void *)v130 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
                if (!*((_DWORD *)this + 9952) && !BlueFin::GlPeRqHdlrGnssMeasData::UpdateAgcInfo(this))
                {
                  int v131 = *((_DWORD *)v13 + 1);
                  goto LABEL_187;
                }
                int v131 = *((_DWORD *)v13 + 1);
                unsigned int v132 = *v13;
                if (v131 == 2)
                {
                  if (!*v13) {
                    goto LABEL_191;
                  }
                  uint64_t v133 = (char *)this + 39840;
                  if (v132 < 0x21) {
                    goto LABEL_186;
                  }
                  if (v132 >= 0x8B)
                  {
                    uint64_t v133 = (char *)this + 39840;
                    if (v132 >= 0xAF) {
                      goto LABEL_191;
                    }
                    goto LABEL_186;
                  }
                  uint64_t v133 = (char *)this + 39840;
                  if (v132 <= 0x41)
                  {
LABEL_185:
                    uint64_t v133 = (char *)this + 39856;
                    if (v132 < 0x34) {
                      goto LABEL_187;
                    }
                  }
                }
                else
                {
                  if (!*v13) {
                    goto LABEL_187;
                  }
                  uint64_t v133 = (char *)this + 39824;
                  if (v132 < 0x21) {
                    goto LABEL_186;
                  }
                  if (v132 < 0x8B)
                  {
                    if (v132 < 0x42) {
                      goto LABEL_185;
                    }
                    uint64_t v133 = (char *)this + 39824;
                    if (v132 >= 0x4C) {
                      uint64_t v133 = (char *)this + 39904;
                    }
                  }
                  else
                  {
                    uint64_t v133 = (char *)this + 39824;
                    if (v132 >= 0xAF)
                    {
LABEL_187:
                      if (v131 != 2)
                      {
                        if (v131 == 3)
                        {
                          int v134 = (char *)this + 392 * v14 + 83;
                          if (BlueFin::GlSvId::s_aucSvId2gnss[*v13] == 4) {
                            LOBYTE(v135) = 8;
                          }
                          else {
                            LOBYTE(v135) = 5;
                          }
                        }
                        else
                        {
                          int v135 = BlueFin::GlSvId::s_aucSvId2gnss[*v13];
                          int v134 = (char *)this + 392 * v14 + 83;
                          if (v135 != 4) {
                            LOBYTE(v135) = 3;
                          }
                        }
                        *int v134 = v135;
LABEL_196:
                        int v136 = (double *)((char *)this + 392 * v14);
                        BlueFin::GlPeRangeAidGen::GetSatelliteInterSignalBiasNs(*(BlueFin::GlPeRangeAidGen **)(*((void *)this + 7) + 48), (const BlueFin::GlSignalId *)v13, 1, v136 + 33, v136 + 34);
                        int v137 = *v101;
                        v136[31] = v136[33];
                        uint64_t v138 = *((int *)v13 + 1);
                        if (v138 == 2
                          || (int v139 = BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v138 - v138 + BlueFin::GlSvId::s_aucSvId2gnss[*v13]],
                              v139 == 12))
                        {
                          float v140 = *(float *)(*(void *)(*((void *)this + 7) + 120) + 136);
                        }
                        else
                        {
                          BOOL v141 = v139 != 6 || *v13 - 76 >= 0x3F;
                          float v140 = 1.0;
                          if (v141) {
                            float v140 = 0.0;
                          }
                        }
                        unsigned int v142 = (double *)((char *)this + 392 * v14);
                        v142[32] = v136[34] + v140 / 299792.458 * 1000000.0;
                        *__int16 v101 = v137 | 0xF00000;
                        switch(*((unsigned char *)v142 + 82))
                        {
                          case 0:
                            goto LABEL_371;
                          case 1:
                          case 4:
                            int v143 = *v23;
                            if ((*v23 & 0x4008) != 0)
                            {
                              v63->i64[0] %= 0x2260FF9290000uLL;
                              uint64_t v144 = *((unsigned __int8 *)this + 392 * v14 + 300);
                              if (*((unsigned char *)this + 392 * v14 + 300))
                              {
                                int v145 = &v244[392 * v14];
                                do
                                {
                                  *(void *)v145 %= 0x2260FF9290000uLL;
                                  v145 += 40;
                                  --v144;
                                }
                                while (v144);
                              }
                            }
                            else if ((v143 & 4) != 0)
                            {
                              v63->i64[0] %= 0x165A0BC00uLL;
                              uint64_t v174 = *((unsigned __int8 *)this + 392 * v14 + 300);
                              if (*((unsigned char *)this + 392 * v14 + 300))
                              {
                                uint64_t v175 = &v244[392 * v14];
                                do
                                {
                                  *(void *)v175 %= 0x165A0BC00uLL;
                                  v175 += 40;
                                  --v174;
                                }
                                while (v174);
                              }
                            }
                            else if ((v143 & 2) != 0)
                            {
                              v63->i64[0] %= 0x1312D00uLL;
                              uint64_t v178 = *((unsigned __int8 *)this + 392 * v14 + 300);
                              if (*((unsigned char *)this + 392 * v14 + 300))
                              {
                                unsigned int v179 = &v244[392 * v14];
                                do
                                {
                                  *(void *)v179 %= 0x1312D00uLL;
                                  v179 += 40;
                                  --v178;
                                }
                                while (v178);
                              }
                            }
                            else if ((v143 & 0x10000) != 0)
                            {
                              v63->i64[0] %= 0x1312D00uLL;
                              uint64_t v191 = *((unsigned __int8 *)this + 392 * v14 + 300);
                              if (*((unsigned char *)this + 392 * v14 + 300))
                              {
                                __int16 v192 = &v244[392 * v14];
                                do
                                {
                                  *(void *)v192 %= 0x1312D00uLL;
                                  v192 += 40;
                                  --v191;
                                }
                                while (v191);
                              }
                            }
                            else if (v143)
                            {
                              v63->i64[0] %= 0xF4240uLL;
                              uint64_t v161 = *((unsigned __int8 *)this + 392 * v14 + 300);
                              if (*((unsigned char *)this + 392 * v14 + 300))
                              {
                                unsigned int v162 = &v244[392 * v14];
                                do
                                {
                                  *(void *)v162 %= 0xF4240uLL;
                                  v162 += 40;
                                  --v161;
                                }
                                while (v161);
                              }
                            }
                            goto LABEL_371;
                          case 2:
                            int v146 = *v23;
                            if ((*v23 & 0x2000) != 0)
                            {
                              v63->i64[0] %= 0x3B9ACA00uLL;
                              uint64_t v163 = *((unsigned __int8 *)this + 392 * v14 + 300);
                              if (*((unsigned char *)this + 392 * v14 + 300))
                              {
                                unsigned int v164 = &v244[392 * v14];
                                do
                                {
                                  *(void *)v164 %= 0x3B9ACA00uLL;
                                  v164 += 40;
                                  --v163;
                                }
                                while (v163);
                              }
                            }
                            else if ((v146 & 0x20) != 0)
                            {
                              v63->i64[0] %= 0x1E8480uLL;
                              uint64_t v176 = *((unsigned __int8 *)this + 392 * v14 + 300);
                              if (*((unsigned char *)this + 392 * v14 + 300))
                              {
                                uint64_t v177 = &v244[392 * v14];
                                do
                                {
                                  *(void *)v177 %= 0x1E8480uLL;
                                  v177 += 40;
                                  --v176;
                                }
                                while (v176);
                              }
                            }
                            else if (v146)
                            {
                              v63->i64[0] %= 0xF4240uLL;
                              uint64_t v147 = *((unsigned __int8 *)this + 392 * v14 + 300);
                              if (*((unsigned char *)this + 392 * v14 + 300))
                              {
                                char v148 = &v244[392 * v14];
                                do
                                {
                                  *(void *)v148 %= 0xF4240uLL;
                                  v148 += 40;
                                  --v147;
                                }
                                while (v147);
                              }
                            }
                            goto LABEL_371;
                          case 3:
                            int v149 = *v23;
                            if ((*v23 & 0x8080) != 0)
                            {
                              v63->i64[0] %= 0x4E94914F0000uLL;
                              uint64_t v150 = *((unsigned __int8 *)this + 392 * v14 + 300);
                              if (*((unsigned char *)this + 392 * v14 + 300))
                              {
                                char v151 = &v244[392 * v14];
                                do
                                {
                                  *(void *)v151 %= 0x4E94914F0000uLL;
                                  v151 += 40;
                                  --v150;
                                }
                                while (v150);
                              }
                            }
                            else if ((v149 & 0x40) != 0)
                            {
                              v63->i64[0] %= 0x77359400uLL;
                              uint64_t v180 = *((unsigned __int8 *)this + 392 * v14 + 300);
                              if (*((unsigned char *)this + 392 * v14 + 300))
                              {
                                unsigned int v181 = &v244[392 * v14];
                                do
                                {
                                  *(void *)v181 %= 0x77359400uLL;
                                  v181 += 40;
                                  --v180;
                                }
                                while (v180);
                              }
                            }
                            else if ((v149 & 2) != 0)
                            {
                              v63->i64[0] %= 0x1312D00uLL;
                              uint64_t v193 = *((unsigned __int8 *)this + 392 * v14 + 300);
                              if (*((unsigned char *)this + 392 * v14 + 300))
                              {
                                int16x8_t v194 = &v244[392 * v14];
                                do
                                {
                                  *(void *)v194 %= 0x1312D00uLL;
                                  v194 += 40;
                                  --v193;
                                }
                                while (v193);
                              }
                            }
                            else if ((v149 & 0x20) != 0)
                            {
                              v63->i64[0] %= 0x989680uLL;
                              uint64_t v203 = *((unsigned __int8 *)this + 392 * v14 + 300);
                              if (*((unsigned char *)this + 392 * v14 + 300))
                              {
                                int v204 = &v244[392 * v14];
                                do
                                {
                                  *(void *)v204 %= 0x989680uLL;
                                  v204 += 40;
                                  --v203;
                                }
                                while (v203);
                              }
                            }
                            else if (v149)
                            {
                              v63->i64[0] %= 0xF4240uLL;
                              uint64_t v165 = *((unsigned __int8 *)this + 392 * v14 + 300);
                              if (*((unsigned char *)this + 392 * v14 + 300))
                              {
                                int v166 = &v244[392 * v14];
                                do
                                {
                                  *(void *)v166 %= 0xF4240uLL;
                                  v166 += 40;
                                  --v165;
                                }
                                while (v165);
                              }
                            }
                            goto LABEL_371;
                          case 5:
                            int v152 = *v23;
                            if ((*v23 & 0x4008) != 0)
                            {
                              v63->i64[0] %= 0x2260FF9290000uLL;
                              uint64_t v153 = *((unsigned __int8 *)this + 392 * v14 + 300);
                              if (*((unsigned char *)this + 392 * v14 + 300))
                              {
                                char v154 = &v244[392 * v14];
                                do
                                {
                                  *(void *)v154 %= 0x2260FF9290000uLL;
                                  v154 += 40;
                                  --v153;
                                }
                                while (v153);
                              }
                            }
                            else
                            {
                              int v167 = *((_DWORD *)v13 + 1);
                              if ((v152 & 4) != 0)
                              {
                                unint64_t v182 = v63->i64[0];
                                uint64_t v183 = (char *)this + 392 * v14 + 300;
                                if (v167 == 2)
                                {
                                  v63->i64[0] = v182 % 0x5F5E100;
                                  uint64_t v184 = *v183;
                                  if (*v183)
                                  {
                                    double v185 = &v244[392 * v14];
                                    do
                                    {
                                      *(void *)v185 %= 0x5F5E100uLL;
                                      v185 += 40;
                                      --v184;
                                    }
                                    while (v184);
                                  }
                                }
                                else
                                {
                                  v63->i64[0] = v182 % 0x165A0BC00;
                                  uint64_t v201 = *v183;
                                  if (*v183)
                                  {
                                    int v202 = &v244[392 * v14];
                                    do
                                    {
                                      *(void *)v202 %= 0x165A0BC00uLL;
                                      v202 += 40;
                                      --v201;
                                    }
                                    while (v201);
                                  }
                                }
                              }
                              else if ((v152 & 0x200) != 0)
                              {
                                v63->i64[0] %= 0x23C34600uLL;
                                uint64_t v195 = *((unsigned __int8 *)this + 392 * v14 + 300);
                                if (*((unsigned char *)this + 392 * v14 + 300))
                                {
                                  char v196 = &v244[392 * v14];
                                  do
                                  {
                                    *(void *)v196 %= 0x23C34600uLL;
                                    v196 += 40;
                                    --v195;
                                  }
                                  while (v195);
                                }
                              }
                              else if ((v152 & 0x10000) != 0)
                              {
                                unint64_t v205 = v63->i64[0];
                                float v206 = (char *)this + 392 * v14 + 300;
                                if (v167 == 2)
                                {
                                  v63->i64[0] = v205 % 0x5F5E100;
                                  uint64_t v207 = *v206;
                                  if (*v206)
                                  {
                                    int v208 = &v244[392 * v14];
                                    do
                                    {
                                      *(void *)v208 %= 0x5F5E100uLL;
                                      v208 += 40;
                                      --v207;
                                    }
                                    while (v207);
                                  }
                                }
                                else
                                {
                                  v63->i64[0] = v205 % 0x1312D00;
                                  uint64_t v215 = *v206;
                                  if (*v206)
                                  {
                                    __int16 v216 = &v244[392 * v14];
                                    do
                                    {
                                      *(void *)v216 %= 0x1312D00uLL;
                                      v216 += 40;
                                      --v215;
                                    }
                                    while (v215);
                                  }
                                }
                              }
                              else if ((v152 & 2) != 0)
                              {
                                unint64_t v211 = v63->i64[0];
                                int v212 = (char *)this + 392 * v14 + 300;
                                if (v167 == 2)
                                {
                                  v63->i64[0] = v211 % 0xF4240;
                                  uint64_t v213 = *v212;
                                  if (*v212)
                                  {
                                    unsigned __int8 v214 = &v244[392 * v14];
                                    do
                                    {
                                      *(void *)v214 %= 0xF4240uLL;
                                      v214 += 40;
                                      --v213;
                                    }
                                    while (v213);
                                  }
                                }
                                else
                                {
                                  v63->i64[0] = v211 % 0x1312D00;
                                  uint64_t v219 = *v212;
                                  if (*v212)
                                  {
                                    uint64_t v220 = &v244[392 * v14];
                                    do
                                    {
                                      *(void *)v220 %= 0x1312D00uLL;
                                      v220 += 40;
                                      --v219;
                                    }
                                    while (v219);
                                  }
                                }
                              }
                              else if ((v152 & 0x100) != 0)
                              {
                                v63->i64[0] %= 0x1E8480uLL;
                                uint64_t v217 = *((unsigned __int8 *)this + 392 * v14 + 300);
                                if (*((unsigned char *)this + 392 * v14 + 300))
                                {
                                  __int16 v218 = &v244[392 * v14];
                                  do
                                  {
                                    *(void *)v218 %= 0x1E8480uLL;
                                    v218 += 40;
                                    --v217;
                                  }
                                  while (v217);
                                }
                              }
                              else if (v152)
                              {
                                v63->i64[0] %= 0xF4240uLL;
                                uint64_t v168 = *((unsigned __int8 *)this + 392 * v14 + 300);
                                if (*((unsigned char *)this + 392 * v14 + 300))
                                {
                                  unsigned int v169 = &v244[392 * v14];
                                  do
                                  {
                                    *(void *)v169 %= 0xF4240uLL;
                                    v169 += 40;
                                    --v168;
                                  }
                                  while (v168);
                                }
                              }
                            }
                            goto LABEL_371;
                          case 6:
                            int v155 = *v23;
                            if ((*v23 & 0x4008) != 0)
                            {
                              v63->i64[0] %= 0x2260FF9290000uLL;
                              uint64_t v156 = *((unsigned __int8 *)this + 392 * v14 + 300);
                              if (*((unsigned char *)this + 392 * v14 + 300))
                              {
                                uint64_t v157 = &v244[392 * v14];
                                do
                                {
                                  *(void *)v157 %= 0x2260FF9290000uLL;
                                  v157 += 40;
                                  --v156;
                                }
                                while (v156);
                              }
                            }
                            else if ((v155 & 0x1000) != 0)
                            {
                              v63->i64[0] %= 0x77359400uLL;
                              uint64_t v186 = *((unsigned __int8 *)this + 392 * v14 + 300);
                              if (*((unsigned char *)this + 392 * v14 + 300))
                              {
                                long long v187 = &v244[392 * v14];
                                do
                                {
                                  *(void *)v187 %= 0x77359400uLL;
                                  v187 += 40;
                                  --v186;
                                }
                                while (v186);
                              }
                            }
                            else if ((v155 & 0x800) != 0)
                            {
                              v63->i64[0] %= 0x5F5E100uLL;
                              uint64_t v197 = *((unsigned __int8 *)this + 392 * v14 + 300);
                              if (*((unsigned char *)this + 392 * v14 + 300))
                              {
                                uint64_t v198 = &v244[392 * v14];
                                do
                                {
                                  *(void *)v198 %= 0x5F5E100uLL;
                                  v198 += 40;
                                  --v197;
                                }
                                while (v197);
                              }
                            }
                            else if ((v155 & 0x10000) != 0)
                            {
                              v63->i64[0] %= 0x5F5E100uLL;
                              uint64_t v209 = *((unsigned __int8 *)this + 392 * v14 + 300);
                              if (*((unsigned char *)this + 392 * v14 + 300))
                              {
                                int v210 = &v244[392 * v14];
                                do
                                {
                                  *(void *)v210 %= 0x5F5E100uLL;
                                  v210 += 40;
                                  --v209;
                                }
                                while (v209);
                              }
                            }
                            else if ((v155 & 0x400) != 0)
                            {
                              v63->i64[0] %= 0x3D0900uLL;
                              uint64_t v170 = *((unsigned __int8 *)this + 392 * v14 + 300);
                              if (*((unsigned char *)this + 392 * v14 + 300))
                              {
                                int v171 = &v244[392 * v14];
                                do
                                {
                                  *(void *)v171 %= 0x3D0900uLL;
                                  v171 += 40;
                                  --v170;
                                }
                                while (v170);
                              }
                            }
                            goto LABEL_371;
                          case 7:
                            int v158 = *v23;
                            if ((*v23 & 0x4008) != 0)
                            {
                              v63->i64[0] %= 0x2260FF9290000uLL;
                              uint64_t v159 = *((unsigned __int8 *)this + 392 * v14 + 300);
                              if (*((unsigned char *)this + 392 * v14 + 300))
                              {
                                unsigned int v160 = &v244[392 * v14];
                                do
                                {
                                  *(void *)v160 %= 0x2260FF9290000uLL;
                                  v160 += 40;
                                  --v159;
                                }
                                while (v159);
                              }
                            }
                            else if ((v158 & 4) != 0)
                            {
                              v63->i64[0] %= 0x165A0BC00uLL;
                              uint64_t v188 = *((unsigned __int8 *)this + 392 * v14 + 300);
                              if (*((unsigned char *)this + 392 * v14 + 300))
                              {
                                BOOL v189 = &v244[392 * v14];
                                do
                                {
                                  *(void *)v189 %= 0x165A0BC00uLL;
                                  v189 += 40;
                                  --v188;
                                }
                                while (v188);
                              }
                            }
                            else if ((v158 & 2) != 0)
                            {
                              v63->i64[0] %= 0x1312D00uLL;
                              uint64_t v199 = *((unsigned __int8 *)this + 392 * v14 + 300);
                              if (*((unsigned char *)this + 392 * v14 + 300))
                              {
                                int v200 = &v244[392 * v14];
                                do
                                {
                                  *(void *)v200 %= 0x1312D00uLL;
                                  v200 += 40;
                                  --v199;
                                }
                                while (v199);
                              }
                            }
                            else if (v158)
                            {
                              v63->i64[0] %= 0xF4240uLL;
                              uint64_t v172 = *((unsigned __int8 *)this + 392 * v14 + 300);
                              if (*((unsigned char *)this + 392 * v14 + 300))
                              {
                                unsigned int v173 = &v244[392 * v14];
                                do
                                {
                                  *(void *)v173 %= 0xF4240uLL;
                                  v173 += 40;
                                  --v172;
                                }
                                while (v172);
                              }
                            }
LABEL_371:
                            if (*v248 < 1)
                            {
                              uint64_t v222 = 1;
                              uint64_t v221 = v247;
                            }
                            else
                            {
                              uint64_t v221 = v247;
                              if (!HIDWORD(*v248)) {
                                goto LABEL_376;
                              }
                              uint64_t v222 = 0xFFFFFFFFLL;
                            }
                            *int v248 = v222;
LABEL_376:
                            if ((*v23 & 0x88) != 0) {
                              *v23 |= (*v23 << 8) & 0x8000 | (((*v23 >> 3) & 1) << 14);
                            }
                            if ((*v221 & 1) == 0) {
                              *uint64_t v221 = 0;
                            }
                            uint64_t v223 = (char *)this + 392 * v14;
                            *((_DWORD *)v223 + 72) = *((_DWORD *)v13 + 34);
                            v223[292] = v13[140];
                            BlueFin::GlSetIterator::operator++(&v270);
                            unsigned int v5 = *((_DWORD *)this + 17) + 1;
                            *((_DWORD *)this + 17) = v5;
                            if (v271 == v270) {
                              goto LABEL_381;
                            }
                            continue;
                          default:
                            unsigned int v241 = "rGnssMeas.constellation == GL_GNSS_CONSTELLATION_UNKNOWN";
                            DeviceFaultNotify("glpe_reqhdlr_gnss_meas_data.cpp", 1561, "CheckValidRSTRange", (char)"rGnssMeas.constellation == GL_GNSS_CONSTELLATION_UNKNOWN");
                            int v242 = "glpe_reqhdlr_gnss_meas_data.cpp";
                            int v243 = 1561;
                            goto LABEL_397;
                        }
                      }
LABEL_191:
                      *((unsigned char *)this + 392 * v14 + 83) = 9;
                      goto LABEL_196;
                    }
                  }
                }
LABEL_186:
                *(void *)uint64_t v130 = *(void *)v133;
                *v101 |= 0x80000u;
                goto LABEL_187;
              }
LABEL_391:
              unsigned int v241 = "IsValid()";
              DeviceFaultNotify("glsignalid.h", 650, "GetRfCarrierFrqHz", (char)"IsValid()");
              int v242 = "glsignalid.h";
              int v243 = 650;
              goto LABEL_397;
            }
            uint64_t v64 = *((void *)this + 7);
            long long v65 = (BlueFin::GlPeSatAidInfo *)(*(void *)(v64 + 48) + 32);
            BlueFin::GlPeTimeManager::GetTime(*(unsigned int **)(v64 + 8), *(_DWORD *)v250, 1, (uint64_t)v277);
            double v268 = 1000000.0;
            double v266 = 0.0;
            if (!BlueFin::GlPeSatAidInfo::GetAidRcvdSysTimeS(v65, (const BlueFin::GlSignalId *)v13, (const BlueFin::GlPeGnssTime *)v277, &v266, &v268)|| v268 >= 0.1)
            {
LABEL_124:
              float64x2_t v56 = v249;
              goto LABEL_125;
            }
            int v66 = *((_DWORD *)v13 + 1);
            if (v66 == 3)
            {
              if (*((unsigned __int16 *)v13 + 4) >= 0x23Fu) {
                goto LABEL_394;
              }
              unsigned __int8 v68 = &BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[BlueFin::GlSvId::s_aucSvId2gnss[*v13]];
              unsigned int MsPerSecFrame = v68[21];
              if (v68[21]) {
                goto LABEL_111;
              }
            }
            else
            {
              if (v66)
              {
                int v67 = *((_DWORD *)v13 + 3);
                if ((v67 & 2) != 0)
                {
                  unsigned int MsPerSecFrame = BlueFin::GlSignalId::GetMsPerSecFrame((BlueFin::GlSignalId *)v13);
                  goto LABEL_111;
                }
              }
              else
              {
                int v67 = *((_DWORD *)v13 + 3);
              }
              if ((v67 & 8) != 0)
              {
                int EpochPerBit = BlueFin::GlSignalId::GetEpochPerBit((BlueFin::GlSignalId *)v13);
              }
              else
              {
                if ((v67 & 4) == 0)
                {
                  if (*((unsigned __int16 *)v13 + 4) < 0x23Fu)
                  {
                    uint64_t v70 = BlueFin::GlSvId::s_aucSvId2gnss[*v13];
                    int v71 = &BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v66 - v66];
                    unsigned int MsPerSecFrame = v71[v70];
                    if (!v71[v70]) {
                      goto LABEL_395;
                    }
LABEL_111:
                    double v73 = 1000.0 / (double)MsPerSecFrame;
                    double v74 = v266 * v73;
                    double v75 = *((double *)v13 + 7) * v73 - floor(*((double *)v13 + 7) * v73);
                    double v76 = v75 - (v74 - floor(v74));
                    if (v76 >= v6)
                    {
                      double v77 = -1.0;
                    }
                    else
                    {
                      if (v76 >= -0.5)
                      {
LABEL_116:
                        double v78 = (v75 + floor(v74)) * (double)MsPerSecFrame;
                        double v79 = dbl_263BBD1C0[BlueFin::GlSvId::s_aucSvId2gnss[*v13] == 2];
                        if (BlueFin::GlSvId::s_aucSvId2gnss[*v13] == 2) {
                          int v80 = 0x8000;
                        }
                        else {
                          int v80 = 0x4000;
                        }
                        double v81 = -0.0;
                        if (v78 < 0.0) {
                          double v81 = dbl_263BBD1C0[BlueFin::GlSvId::s_aucSvId2gnss[*v13] == 2];
                        }
                        double v82 = v78 + v81;
                        if (v82 < v79) {
                          double v79 = 0.0;
                        }
                        int v83 = (char *)this + 392 * *((unsigned int *)this + 17);
                        *((void *)v83 + 13) = (uint64_t)((v82 - v79) * 1000000.0);
                        *((_DWORD *)v83 + 24) = *((_DWORD *)v83 + 24) & 0xFFFFFFEF | v80;
                        goto LABEL_124;
                      }
                      double v77 = 1.0;
                    }
                    double v74 = v74 + v77;
                    goto LABEL_116;
                  }
LABEL_394:
                  unsigned int v241 = "IsValid()";
                  DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
                  int v242 = "glsignalid.h";
                  int v243 = 678;
                  goto LABEL_397;
                }
                int EpochPerBit = BlueFin::GlSignalId::GetEpochPerSymbol((BlueFin::GlSignalId *)v13);
              }
              if (*((unsigned __int16 *)v13 + 4) >= 0x23Fu) {
                goto LABEL_394;
              }
              if (BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)v13 + 1)
                                                                         - *((int *)v13 + 1)
                                                                         + BlueFin::GlSvId::s_aucSvId2gnss[*v13]])
              {
                unsigned int MsPerSecFrame = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)v13 + 1) - *((int *)v13 + 1) + BlueFin::GlSvId::s_aucSvId2gnss[*v13]]
                              * EpochPerBit;
                goto LABEL_111;
              }
            }
LABEL_395:
            unsigned int v241 = "ucMsPerEpoch != 0";
            DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
            int v242 = "glsignalid.h";
            int v243 = 685;
LABEL_397:
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v242, v243, v241);
          }
        }
        else
        {
          if ((v33 & 0x10) != 0) {
            goto LABEL_90;
          }
          int v59 = *v23;
        }
        int *v23 = v59 | 0x10;
        goto LABEL_90;
      }
      break;
    }
  }
LABEL_381:
  *((void *)this + 4909) = 104;
  *((unsigned char *)this + 3928BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
  v4.i32[0] = *(_DWORD *)v250;
  *((void *)this + 491BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = (uint64_t)((double)v4.u64[0] * 1000000.0);
  *((_OWORD *)this + 2458) = 0u;
  *((_OWORD *)this + 2457) = 0u;
  *((_OWORD *)this + 2456) = 0u;
  uint64_t v224 = *((void *)this + 7);
  *((_DWORD *)this + 9836) = *(_DWORD *)(*(void *)(v224 + 56) + 26168);
  *((unsigned char *)this + 39352) = 1;
  *((void *)this + 492BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0x41D779C018000000;
  *((unsigned char *)this + 39368) = 8;
  uint64_t v225 = (_DWORD *)((char *)this + 39392);
  uint64_t v226 = 18;
  do
  {
    *((void *)v225 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
    *uint64_t v225 = 1084227584;
    v225 += 6;
    --v226;
  }
  while (v226);
  unsigned __int8 v270 = 1;
  int v273 = 0;
  LOWORD(v274[0]) = 0;
  *((double *)this + 4923) = BlueFin::GlPeGnssHwBiasMgr::GetInterSystemHwBiasM(*(void *)(v224 + 120), &v270, 1, 0)
                           / 299792.458
                           * 1000000.0;
  uint64_t v227 = *(void *)(*((void *)this + 7) + 120);
  *((_DWORD *)this + 9848) = 0;
  v277[0] = 76;
  int v278 = 3;
  __int16 v279 = 390;
  *((double *)this + 4923) = BlueFin::GlPeGnssHwBiasMgr::GetInterSystemHwBiasM(v227, v277, 1, 0)
                           / 299792.458
                           * 1000000.0;
  uint64_t v228 = *(void *)(*((void *)this + 7) + 120);
  *((_DWORD *)this + 9848) = 0;
  LOBYTE(v268) = -117;
  HIDWORD(v268) = 0;
  __int16 v269 = 453;
  *((double *)this + 4923) = BlueFin::GlPeGnssHwBiasMgr::GetInterSystemHwBiasM(v228, (unsigned __int8 *)&v268, 1, 0)
                           / 299792.458
                           * 1000000.0;
  uint64_t v229 = *(void *)(*((void *)this + 7) + 120);
  *((_DWORD *)this + 9848) = 0;
  LOBYTE(v266) = 33;
  HIDWORD(v266) = 0;
  __int16 v267 = 128;
  *((double *)this + 4923) = BlueFin::GlPeGnssHwBiasMgr::GetInterSystemHwBiasM(v229, (unsigned __int8 *)&v266, 1, 0)
                           / 299792.458
                           * 1000000.0;
  uint64_t v230 = *(void *)(*((void *)this + 7) + 120);
  *((_DWORD *)this + 9848) = 0;
  v263[0] = 66;
  int v264 = 0;
  __int16 v265 = 161;
  unsigned int v231 = (double *)((char *)this + 39464);
  *((double *)this + 4923) = BlueFin::GlPeGnssHwBiasMgr::GetInterSystemHwBiasM(v230, v263, 1, 0)
                           / 299792.458
                           * 1000000.0;
  *((_DWORD *)this + 9848) = 0;
  uint64_t v232 = 0x34u;
  do
  {
    v260[0] = v232;
    int v261 = 0;
    __int16 v262 = 575;
    uint64_t v233 = BlueFin::GlSvId::s_aucSvId2gnss[v232];
    if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v233] == 255) {
      int v261 = -1;
    }
    else {
      __int16 v262 = BlueFin::GlSignalId::s_ausGnss2signalId[v233]
    }
           + v232
           - BlueFin::GlSvId::s_aucGnss2minSvId[v233];
    *(v231 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = BlueFin::GlPeGnssHwBiasMgr::GetInterSystemHwBiasM(*(void *)(*((void *)this + 7) + 120), v260, 1, 0)/ 299792.458* 1000000.0;
    *(_DWORD *)unsigned int v231 = 1084227584;
    v231 += 3;
    ++v232;
  }
  while (v232 != 66);
  v260[0] = 1;
  int v261 = 2;
  __int16 v262 = 64;
  *((double *)this + 4929) = BlueFin::GlPeGnssHwBiasMgr::GetInterSystemHwBiasM(*(void *)(*((void *)this + 7) + 120), v260, 1, 1)/ 299792.458* 1000000.0;
  uint64_t v234 = *(void *)(*((void *)this + 7) + 120);
  float v235 = *(float *)(v234 + 136) / 299792.458 * 1000000.0;
  *((float *)this + 986BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v235;
  v257[0] = -117;
  int v258 = 2;
  __int16 v259 = 525;
  *((double *)this + 4929) = BlueFin::GlPeGnssHwBiasMgr::GetInterSystemHwBiasM(v234, v257, 1, 1)
                           / 299792.458
                           * 1000000.0;
  uint64_t v236 = *(void *)(*((void *)this + 7) + 120);
  float v237 = *(float *)(v236 + 136) / 299792.458 * 1000000.0;
  *((float *)this + 986BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v237;
  v254[0] = 76;
  int v255 = 2;
  __int16 v256 = 327;
  *((double *)this + 4929) = BlueFin::GlPeGnssHwBiasMgr::GetInterSystemHwBiasM(v236, v254, 1, 1)
                           / 299792.458
                           * 1000000.0;
  uint64_t v238 = *(void *)(*((void *)this + 7) + 120);
  float v239 = *(float *)(v238 + 136) / 299792.458 * 1000000.0;
  *((float *)this + 986BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v239;
  v251[0] = -81;
  int v252 = 0;
  __int16 v253 = 561;
  *((double *)this + 4974) = BlueFin::GlPeGnssHwBiasMgr::GetInterSystemHwBiasM(v238, v251, 1, 1)
                           / 299792.458
                           * 1000000.0;
  float v240 = *(float *)(*(void *)(*((void *)this + 7) + 120) + 136) / 299792.458 * 1000000.0;
  *((float *)this + 995BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v240;
  if (*(void *)(*((void *)this + 1) + 96)) {
    BlueFin::GlPeGnssSvsInfoMgr::Generate((BlueFin::GlPeRqHdlrGnssMeasData *)((char *)this + 108864), v250);
  }
}

void BlueFin::GlMeasData_ADRState::UpdateCarrierPhaseM(BlueFin::GlMeasData_ADRState *this, const BlueFin::GlSignalId *a2, int a3, double *a4, const double *a5)
{
  BlueFin::GlMeasData_ADRState::Get(this, a2);
  int v11 = v10;
  BlueFin::GlMeasData_ADRState::Get(this, a2);
  double v13 = *(double *)(v12 + 8);
  double v14 = *(double *)(v12 + 16);
  int v15 = *(_DWORD *)v11;
  double v16 = *a4;
  if (!*(_DWORD *)v11)
  {
    if (*((unsigned __int16 *)a2 + 4) >= 0x23Fu)
    {
      DeviceFaultNotify("glsignalid.h", 650, "GetRfCarrierFrqHz", (char)"IsValid()");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 650, "IsValid()");
    }
    uint64_t v20 = *(unsigned __int8 *)a2;
    uint64_t v21 = BlueFin::GlSvId::s_aucSvId2gnss[v20];
    double v22 = BlueFin::GlSignalId::s_adSignalType2ctrFreqHz[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)a2 + 1) - *((int *)a2 + 1) + v21]];
    double v23 = v22;
    if (v21 == 2)
    {
      double v24 = (double)(char)(v20 - 59);
      if ((v20 - 52) >= 0xE) {
        double v24 = -8.0;
      }
      double v23 = v22 + v24 * 562500.0;
    }
    double v25 = v16 / (299792458.0 / v23);
    if (v25 <= 0.0)
    {
      if (v25 >= 0.0)
      {
        int v27 = 0;
LABEL_18:
        if (v21 == 2)
        {
          double v28 = (double)(char)(v20 - 59);
          if ((v20 - 52) >= 0xE) {
            double v28 = -8.0;
          }
          double v22 = v22 + v28 * 562500.0;
        }
        v11[1] = 299792458.0 / v22 * (double)v27;
        v11[4] = 1.0;
        goto LABEL_23;
      }
      double v26 = -0.5;
    }
    else
    {
      double v26 = 0.5;
    }
    int v27 = (int)(v25 + v26);
    goto LABEL_18;
  }
  double v17 = v11[2] - v16;
  if (v17 <= 262144.0)
  {
    if (v17 >= -262144.0) {
      goto LABEL_23;
    }
    double v18 = v11[1];
    double v19 = -524288.0;
  }
  else
  {
    double v18 = v11[1];
    double v19 = 524288.0;
  }
  v11[1] = v18 + v19;
LABEL_23:
  *(_DWORD *)int v11 = a3;
  _OWORD v11[2] = *a4;
  BlueFin::GlMeasData_ADRState::Get(this, a2);
  if (*(_DWORD *)v11)
  {
    unsigned char v11[3] = (*(double *)(v29 + 8) + *(double *)(v29 + 16) - (v13 + v14))
           / ((double)(a3 - v15)
            * 0.001)
           / 299792458.0;
    v11[4] = (*a5 + *a5) / 299792458.0;
  }
}

double BlueFin::GlMeasData_ADRState::Get(BlueFin::GlMeasData_ADRState *this, const BlueFin::GlSignalId *a2)
{
  if (!BlueFin::GlSignalIdArray::Get((uint64_t)this, (uint64_t)a2))
  {
    unsigned int v5 = (char *)BlueFin::GlBigArray::Add((BlueFin::GlMeasData_ADRState *)((char *)this + 1152), *((unsigned __int16 *)a2 + 4));
    if (!v5)
    {
      int v15 = (char *)this + 1152;
      unsigned __int16 v16 = *((_WORD *)this + 593) + 1;
      if (*((unsigned __int16 *)this + 592) <= v16) {
        goto LABEL_15;
      }
      char v6 = 0;
      unsigned __int16 v7 = 575;
      unsigned int v8 = -1;
      do
      {
        BlueFin::GlSignalIdArrayIterator::Next((BlueFin::GlSignalIdArrayIterator *)&v15, (uint64_t)v13);
        unsigned int v9 = *(_DWORD *)BlueFin::GlSignalIdArray::Get((uint64_t)this, (uint64_t)v13);
        BOOL v10 = v9 <= v8;
        if (v9 <= v8) {
          unsigned __int16 v7 = v14;
        }
        if (v9 < v8) {
          unsigned int v8 = v9;
        }
        v6 |= v10;
      }
      while (v16 < *((unsigned __int16 *)v15 + 16));
      if (v6)
      {
        BlueFin::GlBigArray::Remove((uint64_t)this + 1152, v7);
        unsigned int v5 = (char *)BlueFin::GlBigArray::Add((BlueFin::GlMeasData_ADRState *)((char *)this + 1152), *((unsigned __int16 *)a2 + 4));
        if (v5) {
          goto LABEL_12;
        }
        int v11 = "pAccPhase";
        DeviceFaultNotify("glpe_adrutil.cpp", 86, "Get", (char)"pAccPhase");
        int v12 = 86;
      }
      else
      {
LABEL_15:
        int v11 = "bHaveSignalIdToRemove";
        DeviceFaultNotify("glpe_adrutil.cpp", 79, "Get", (char)"bHaveSignalIdToRemove");
        int v12 = 79;
      }
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_adrutil.cpp", v12, v11);
    }
LABEL_12:
    *(_DWORD *)unsigned int v5 = 0;
    double result = 0.0;
    *(_OWORD *)(v5 + 8) = 0u;
    *(_OWORD *)(v5 + 24) = 0u;
  }
  return result;
}

uint64_t BlueFin::GlPeSatAidInfo::GetAidRcvdSysTimeS(BlueFin::GlPeSatAidInfo *this, const BlueFin::GlSignalId *a2, const BlueFin::GlPeGnssTime *a3, double *a4, double *a5)
{
  unsigned __int8 v24 = *(unsigned char *)a2;
  uint64_t v8 = *((int *)a2 + 1);
  int v9 = BlueFin::GlSvId::s_aucSvId2gnss[v24];
  uint64_t result = (uint64_t)BlueFin::GlPeSatAidInfo::GetAidBySvId((uint64_t)this, &v24);
  if (result)
  {
    uint64_t v11 = result;
    if ((*(_DWORD *)(result + 12) | 4) == 4 || *(float *)(result + 40) >= 0.0005)
    {
      return 0;
    }
    else
    {
      double v12 = *(float *)(result + 4 * v8 + 56) / 299792458.0;
      switch(v9)
      {
        case 0:
        case 1:
        case 3:
          double v22 = &off_270EBC600;
          uint64_t v23 = 0;
          BlueFin::GlPeGnssTime::GetGps(a3, (BlueFin::GlGpsTime *)&v22);
          goto LABEL_13;
        case 2:
          double v22 = &off_270EBF4E8;
          uint64_t v23 = 0;
          BlueFin::GlPeGnssTime::GetGlns(a3, (BlueFin::GlGlnsTime *)&v22);
          *(void *)a5 = v15;
          double v14 = v12 + BlueFin::GlGlnsTime::getTodS((BlueFin::GlGlnsTime *)&v22) + *(double *)(v11 + 32);
          *a4 = v14;
          double v16 = 86400.0;
          goto LABEL_15;
        case 4:
          double v22 = &off_270EBF588;
          uint64_t v23 = 0;
          BlueFin::GlPeGnssTime::GetBds(a3, (BlueFin::GlBdsTime *)&v22);
          goto LABEL_13;
        case 5:
          double v22 = &off_270EBF538;
          uint64_t v23 = 0;
          BlueFin::GlPeGnssTime::GetGal(a3, (BlueFin::GlGalTime *)&v22);
          goto LABEL_13;
        case 6:
          double v22 = &off_270EBF080;
          uint64_t v23 = 0;
          BlueFin::GlPeGnssTime::GetNic(a3, (BlueFin::GlNicTime *)&v22);
LABEL_13:
          *(void *)a5 = v13;
          unsigned int v17 = ((uint64_t (*)(void))v22[4])(&v22);
          LODWORD(v18) = v23;
          double v14 = v12 + *(double *)(v11 + 32) + (double)v18 * 2.32830644e-10 + (double)(v17 % 0x93A80);
          *a4 = v14;
          break;
        default:
          double v14 = *a4;
          break;
      }
      double v16 = 604800.0;
LABEL_15:
      BOOL v19 = v14 < 0.0;
      double v20 = -0.0;
      if (v14 < 0.0) {
        double v20 = v16;
      }
      double v21 = v14 + v20;
      if (v19 || v21 >= v16)
      {
        if (v21 < v16) {
          double v16 = 0.0;
        }
        *a4 = v21 - v16;
      }
      return 1;
    }
  }
  return result;
}

uint64_t gnss::FireGnssDevice::setConfigEnableGnssConstellations(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FireDeviceLog::DeviceLogBase(6, "#fgd,setConfigEnableGnssConstellations,enableFlags,0x%x", a3, a4, a5, a6, a7, a8, a2);
  if (a2)
  {
    uint64_t v17 = *(void *)(a1 + 40);
    if ((*(_DWORD *)(v17 + 1356) & 0xFFFFFFFE) == 2)
    {
      FireMessageHandler::setAssistanceNWRti((FireMessageHandler *)v17, a2, v11, v12, v13, v14, v15, v16);
      int v18 = 1;
    }
    else
    {
      *(_DWORD *)(v17 + 1056) = a2;
      int v18 = 1;
      *(unsigned char *)(v17 + 106BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
    }
  }
  else
  {
    int v18 = 4;
  }

  return std::function<void ()(gnss::Result)>::operator()(a3, v18);
}

BlueFin::GlPosEng *BlueFin::GlPeObjFactory::MakePosEng(uint64_t (**a1)(uint64_t), uint64_t a2, BlueFin::GlSettingsImpl *a3, BlueFin::GlEventPump *a4, BlueFin::GlPeEngineCallBacks *a5, char a6)
{
  if (!a2)
  {
    uint64_t v16 = "potEngine != nullptr";
    DeviceFaultNotify("glpeobjfact.cpp", 669, "MakePosEng", (char)"potEngine != nullptr");
    int v17 = 669;
    goto LABEL_12;
  }
  if (!a3)
  {
    uint64_t v16 = "potGlSettingsImpl != nullptr";
    DeviceFaultNotify("glpeobjfact.cpp", 670, "MakePosEng", (char)"potGlSettingsImpl != nullptr");
    int v17 = 670;
    goto LABEL_12;
  }
  if (!a4)
  {
    uint64_t v16 = "potGlEventPump != nullptr";
    DeviceFaultNotify("glpeobjfact.cpp", 671, "MakePosEng", (char)"potGlEventPump != nullptr");
    int v17 = 671;
    goto LABEL_12;
  }
  if (!a5)
  {
    uint64_t v16 = "pcbCallBacks != nullptr";
    DeviceFaultNotify("glpeobjfact.cpp", 672, "MakePosEng", (char)"pcbCallBacks != nullptr");
    int v17 = 672;
LABEL_12:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpeobjfact.cpp", v17, v16);
  }
  Memory = (BlueFin::GlPosEng *)BlueFin::GlMemAlloc::glAllocateMemory(41, 407040, *a1);
  if (Memory)
  {
    uint64_t v12 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 656))(a2);
    BlueFin::GlPosEng::GlPosEng(Memory, v12, a3, a4, a5, v13, v14, a6);
  }
  return Memory;
}

BlueFin::GlPosEng *BlueFin::GlPosEng::GlPosEng(BlueFin::GlPosEng *this, void *a2, BlueFin::GlSettingsImpl *a3, BlueFin::GlEventPump *a4, BlueFin::GlPeEngineCallBacks *a5, void *(*a6)(unsigned int), void (*a7)(void *), char a8)
{
  BOOL v10 = (void *)((char *)this + 277824);
  *(void *)this = &unk_270EC2A18;
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 2) = a3;
  *((void *)this + 3) = a4;
  *((void *)this + 4) = a5;
  *((void *)this + 5) = 0;
  uint64_t v29 = (void *)((char *)this + 40);
  uint64_t v11 = (BlueFin::GlPosEng *)((char *)this + 224);
  *((void *)this + 7) = (char *)this + 224;
  uint64_t v12 = (char *)this + 56;
  uint64_t v13 = (BlueFin::GlPosEng *)((char *)this + 121216);
  uint64_t v14 = (BlueFin::GlPosEng *)((char *)this + 160);
  *((void *)this + 6) = 0;
  *((void *)this + 8) = (char *)this + 121216;
  *((void *)this + 9) = (char *)this + 160;
  int v15 = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092);
  *((void *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((unsigned char *)this + 88) = 0;
  *(int32x2_t *)((char *)this + 10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = vdup_n_s32(0xFF9222FF);
  *((_DWORD *)this + 27) = -7200001;
  *((_DWORD *)this + 23) = 0;
  *((_DWORD *)this + 24) = v15;
  memset_pattern16((char *)this + 112, &unk_263BB4CD0, 0x30uLL);
  double v16 = BlueFin::GlPeOscMgr::GlPeOscMgr(v14, *((double *)a3 + 14), v13);
  unsigned __int8 v35 = (BlueFin::GlPosEng *)((char *)this + 404896);
  BlueFin::GlPeAsstMgr::GlPeAsstMgr(v11, v13, v16);
  int v17 = (*(uint64_t (**)(BlueFin::GlSettingsImpl *))(*(void *)a3 + 1048))(a3);
  double v44 = (BlueFin::GlPosEng *)((char *)this + 315136);
  BlueFin::GlPeTimeManager::GlPeTimeManager((unint64_t)v13, v17, (uint64_t)this + 315136, (uint64_t)this + 295744, (uint64_t)v14, (uint64_t)this + 119968, (uint64_t)v12, (uint64_t)this + 181312, (uint64_t)this + 382416);
  double v43 = (BlueFin::GlPosEng *)((char *)this + 181312);
  long double v41 = (char *)this + 295744;
  GnssHwBiasMgr = BlueFin::GlPeObjFactory::MakeGnssHwBiasMgr((uint64_t (**)(uint64_t))BlueFin::GlPeObjFactory::m_potGlPeObjFactory, v13, a3, v11);
  double v37 = (uint64_t *)((char *)this + 126112);
  *((void *)this + 15764) = GnssHwBiasMgr;
  uint64_t v34 = (char *)this + 382176;
  int v39 = (char *)this + 371872;
  long double v42 = (BlueFin::GlPosEng *)((char *)this + 126144);
  BlueFin::GlReqSm::GlReqSm((uint64_t)this + 126144, 127, a4, a3, (uint64_t)this, v13, (uint64_t)v11, (uint64_t)v10, (uint64_t)this + 184416, (uint64_t)this + 295744, (uint64_t)this + 315136, (uint64_t)this + 371872, (uint64_t)this + 382416, (uint64_t)this + 394368, *((void *)this + 4), (uint64_t)this + 382176, (uint64_t)this + 295720, (uint64_t)this + 181312, (uint64_t)v12,
    (uint64_t)this + 404480,
    (uint64_t)GnssHwBiasMgr,
    (uint64_t)v14,
    a8);
  double v36 = (BlueFin::GlPosEng *)((char *)this + 382416);
  if ((*((unsigned char *)a3 + 34) & 4) != 0) {
    BOOL v19 = 0;
  }
  else {
    BOOL v19 = (BlueFin::GlPeEngineCallBacks *)*((void *)this + 4);
  }
  BlueFin::GlPeRtiRequestor::GlPeRtiRequestor((BlueFin::GlPosEng *)((char *)this + 181056), v43, (BlueFin::GlPosEng *)((char *)this + 7648), v19, v42, *((_DWORD *)a3 + 6570));
  BlueFin::GlPeSvHealthMgr::GlPeSvHealthMgr((uint64_t)v43, a3, (uint64_t)this + 119968, (uint64_t)this + 181056, (uint64_t)v13);
  int v31 = (BlueFin::GlPosEng *)((char *)this + 402464);
  char v30 = (BlueFin::GlPosEng *)((char *)this + 394656);
  BlueFin::GlPeKF::GlPeKF((uint64_t)this + 184416, a3, v44, (uint64_t)this + 137024, (uint64_t)v10, (uint64_t)v39, v13, (uint64_t)v41, (uint64_t)v11, 0, (uint64_t)this + 394656, (uint64_t)v36, *((void *)this + 4), (uint64_t)this + 402464, (uint64_t)v43, (uint64_t)v12, *v37, (uint64_t)v14);
  *BOOL v10 = &unk_270EC4248;
  BlueFin::GlPeMiniEphMgr::GlPeMiniEphMgr((uint64_t)this + 277832, (uint64_t)v11, (uint64_t)v13);
  v10[2215] = v11;
  v10[2216] = v13;
  *((void *)this + 3696BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0x300000003;
  *((void *)this + 36945) = 0x3FF0000000000000;
  *((void *)this + 36947) = 0;
  *((void *)this + 36946) = 0;
  *(_OWORD *)((char *)this + 295592) = xmmword_263BBA050;
  *((void *)this + 3695BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *((void *)this + 36954) = 0;
  *((void *)this + 36953) = 0;
  *((void *)this + 36955) = 0x3FF0000000000000;
  *((void *)this + 36962) = 0;
  *((void *)this + 36964) = 0;
  *((void *)this + 36963) = 0;
  BlueFin::GlPeRangeAidGen::GlPeRangeAidGen((uint64_t)v41, (uint64_t)v13, (uint64_t)v10, (uint64_t)v11, *((void *)this + 2), (uint64_t)v12, (uint64_t)this + 201832);
  if (*((unsigned char *)this + 188200)) {
    double v20 = (BlueFin::GlPosEng *)((char *)this + 186048);
  }
  else {
    double v20 = 0;
  }
  BlueFin::GlPeMsmtMgr::GlPeMsmtMgr(v44, v14, v20, *((const BlueFin::GlSettingsImpl **)this + 2));
  BlueFin::GlPeFixStatus::GlPeFixStatus((uint64_t)v39, (uint64_t)v41, (uint64_t)v13, (uint64_t)v14, *((void *)this + 34157) + 8, (uint64_t)v11, (uint64_t)a3, (uint64_t)v43, (uint64_t)v12);
  *((void *)this + 47773) = 0;
  *((void *)this + 47774) = "STARTING";
  *((void *)this + 47775) = "OFF";
  *((void *)this + 47776) = 0;
  *((_WORD *)this + 191108) = 0;
  *((void *)this + 47784) = 0;
  *((_DWORD *)this + 9557BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((_OWORD *)this + 23889) = 0u;
  *((_OWORD *)this + 2389BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 382249) = 0u;
  *((void *)this + 47772) = &unk_270EC4AE0;
  *((void *)this + 47786) = a5;
  *((void *)this + 47787) = this;
  *((void *)this + 47788) = a3;
  *((void *)this + 4779BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((void *)this + 4779BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *((void *)this + 47789) = 0;
  *(_DWORD *)((char *)this + 382335) = 0;
  *((void *)this + 47793) = 0;
  *((void *)this + 47794) = &unk_270EC4A20;
  *((void *)this + 47795) = v34;
  *((void *)this + 47796) = 0;
  *((unsigned char *)this + 382376) = 1;
  *(void *)((char *)this + 38238BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((unsigned char *)this + 382388) = 0;
  *((void *)&v28 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = (char *)this + 71456;
  *(void *)&long long v28 = v14;
  BlueFin::GlNvMemImpl::GlNvMemImpl(v36, v13, v11, (BlueFin::GlPosEng *)((char *)this + 280), (BlueFin::GlPosEng *)((char *)this + 210048), v21, (BlueFin::GlPosEng *)((char *)this + 34336), (BlueFin::GlPosEng *)((char *)this + 7648), v28, v44, a5, *((BlueFin::GlSettingsImpl **)this + 2), v31, (BlueFin::GlPosEng *)((char *)this + 400032), *((const BlueFin::GlSettingsImpl **)this + 2), v43, (BlueFin::GlPosEng *)((char *)this + 181056), (BlueFin::GlPeGnssHwBiasMgr *)*v37, v35);
  BlueFin::GlPeCntinMgr::GlPeCntinMgr((BlueFin::GlPosEng *)((char *)this + 394368), 0x7Fu, a4, this, v42, *((BlueFin::GlPeEngineCallBacks **)this + 4));
  BlueFin::GlPeHula::GlPeHula(v30, v13, v11, v31, (BlueFin::GlPosEng *)((char *)this + 184608), (const BOOL *)this + 186049, v22);
  uint64_t v23 = *((void *)this + 2);
  *((void *)this + 49998) = &unk_270EC28F8;
  *((void *)this + 49999) = a5;
  *((void *)this + 5000BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v34;
  *((void *)this + 5000BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v23;
  *((void *)this + 50002) = &unk_270EC8D40;
  *((void *)this + 50003) = this;
  BlueFin::GlPeSensorsMgr::GlPeSensorsMgr((uint64_t)this + 400032, (uint64_t)this + 400016, (uint64_t)v31, *((void *)this + 4), (uint64_t)v44);
  *((void *)this + 50306) = &unk_270EC2C68;
  BlueFin::GlPeContextMgr::GlPeContextMgr(v31, v30, 1);
  *((void *)this + 5056BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v13;
  *((void *)this + 5056BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = &unk_270EBA478;
  *((void *)this + 50562) = &unk_270EBA640;
  *((void *)this + 50563) = (char *)this + 404536;
  *((void *)this + 50564) = (char *)this + 404824;
  *((void *)this + 50565) = (char *)this + 404792;
  *((_DWORD *)this + 101132) = 8;
  *((_WORD *)this + 202266) = 8193;
  *((unsigned char *)this + 404534) = 32;
  BlueFin::GlArray::Clear((uint64_t)this + 404496);
  *((void *)this + 50607) = 0x240C84007FFFFFFFLL;
  *((_DWORD *)this + 101216) = 0x7FFFFFFF;
  *(_OWORD *)((char *)this + 404536) = 0u;
  *(_OWORD *)((char *)this + 404552) = 0u;
  *(_OWORD *)((char *)this + 404568) = 0u;
  *(_OWORD *)((char *)this + 404584) = 0u;
  *(_OWORD *)((char *)this + 40460BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 404616) = 0u;
  *(_OWORD *)((char *)this + 404632) = 0u;
  *(_OWORD *)((char *)this + 404648) = 0u;
  *(_OWORD *)((char *)this + 404664) = 0u;
  *(_OWORD *)((char *)this + 40468BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 404696) = 0u;
  *(_OWORD *)((char *)this + 404712) = 0u;
  *(_OWORD *)((char *)this + 404728) = 0u;
  *(_OWORD *)((char *)this + 404744) = 0u;
  *(_OWORD *)((char *)this + 40476BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 404776) = 0u;
  BlueFin::GlPeClkCalibrateMgr::GlPeClkCalibrateMgr(v35, v13, a3);
  *((_OWORD *)this + 25418) = 0u;
  *((_OWORD *)this + 25419) = 0u;
  *((_OWORD *)this + 25416) = 0u;
  *((_OWORD *)this + 25417) = 0u;
  *((_OWORD *)this + 25414) = 0u;
  *((_OWORD *)this + 25415) = 0u;
  BlueFin::GlPeConvUtilCache::m_potThis = (uint64_t)this + 406624;
  *((unsigned char *)this + 40672BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a8;
  *(_WORD *)((char *)this + 40672BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 256;
  *(_DWORD *)((char *)this + 406723) = 0;
  *((unsigned char *)this + 406727) = 0;
  *((_DWORD *)this + 101682) = -7200001;
  *((_OWORD *)this + 2542BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
  *((_OWORD *)this + 25422) = 0u;
  *((_OWORD *)this + 25423) = 0u;
  *((_OWORD *)this + 25424) = 0u;
  *((_OWORD *)this + 25425) = 0u;
  *((_OWORD *)this + 25426) = 0u;
  *((_OWORD *)this + 25427) = 0u;
  *((_OWORD *)this + 25428) = 0u;
  *((_OWORD *)this + 25429) = 0u;
  *((_OWORD *)this + 2543BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *((_OWORD *)this + 2543BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
  *((_OWORD *)this + 25432) = 0u;
  *((_OWORD *)this + 25433) = 0u;
  *((_OWORD *)this + 25434) = 0u;
  *((_OWORD *)this + 25435) = 0u;
  *((_OWORD *)this + 25436) = 0u;
  *((_OWORD *)this + 25437) = 0u;
  *((void *)this + 50876) = a2;
  *((unsigned char *)this + 407016) = 0;
  *((_DWORD *)this + 101757) = 0;
  *((unsigned char *)this + 407032) = 0;
  if (!*((void *)this + 4))
  {
    DeviceFaultNotify("glposeng.cpp", 216, "GlPosEng", (char)"m_pcbCallBacks");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glposeng.cpp", 216, "m_pcbCallBacks");
  }
  *((void *)this + 4775BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = (char *)this + 157952;
  BlueFin::GlPosEng::InitMeasEng(this, v24);
  if (*v29) {
    double v25 = "Created GlPosEng\n";
  }
  else {
    double v25 = "Couldn't allocate memory for the PE\n";
  }
  if (*v29) {
    uint64_t v26 = 127;
  }
  else {
    uint64_t v26 = 11;
  }
  GlCustomLog(v26, v25);
  GlCustomLog(127, "Size,GlPosEng,%u\n", 407040);
  GlCustomLog(127, "    ->Size,GlPeRangeAidGen,%u\n", 19392);
  GlCustomLog(127, "    ->Size,GlPeMsmtMgr,%u\n", 56736);
  GlCustomLog(127, "    ->Size,GlPeFixStatus,%u\n", 10304);
  GlCustomLog(127, "    ->Size,GlReqSm,%u\n", 54912);
  GlCustomLog(127, "    ->Size,GlNvMemImpl,%u\n", 11928);
  GlCustomLog(127, "    ->Size,GlPeCntinMgr,%u\n", 288);
  GlCustomLog(127, "    ->Size,GlPeHula,%u\n", 5328);
  GlCustomLog(127, "    ->Size,GlPeSensListener,%u\n", 16);
  GlCustomLog(127, "    ->Size,GlPeSensorsMgr,%u\n", 2416);
  GlCustomLog(127, "    ->Size,GlPeMeIfDummy,%u\n", 8);
  *(void *)((char *)this + 40702BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  return this;
}

void sub_2639E0198(_Unwind_Exception *a1)
{
  BlueFin::GlReqSm::~GlReqSm(*(BlueFin::GlReqSm **)(v2 - 120));
  *(void *)(v1 + 7184BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = &unk_270EBC5B8;
  *(unsigned char *)(v1 + 71864) = 0;
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlSettingsImpl::GetMinGpsWeekNumber(BlueFin::GlSettingsImpl *this)
{
  return *((__int16 *)this + 34);
}

uint64_t BlueFin::GlPosEng::InitMeasEng(BlueFin::GlPosEng *this, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](this, a2);
  __dst[1785] = *(uint64_t (**)(uint64_t))MEMORY[0x263EF8340];
  if ((*(unsigned int (**)(void))(**(void **)(v2 + 16) + 1040))(*(void *)(v2 + 16)))
  {
    uint64_t v3 = v2 + 402448;
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 407008);
    unsigned int v5 = *(uint64_t (**)(uint64_t))(v2 + 24);
    char v6 = (uint64_t (*)(uint64_t))(*(uint64_t (**)(void))(**(void **)(v2 + 32) + 88))(*(void *)(v2 + 32));
    unsigned __int16 v7 = (uint64_t (*)(uint64_t))(*(uint64_t (**)(void))(**(void **)(v2 + 32) + 96))(*(void *)(v2 + 32));
    char v8 = *(unsigned char *)(v2 + 406720);
    uint64_t v9 = *(void *)(v2 + 16);
    unsigned int v10 = *(_DWORD *)(v9 + 32);
    *(void *)(v4 + 6536) = v2;
    BOOL v11 = *(void *)(v4 + 808) != 0;
    LODWORD(v9) = *(_DWORD *)(v9 + 272);
    __dst[0] = v5;
    __dst[1] = (uint64_t (*)(uint64_t))(v4 + 6520);
    _OWORD __dst[2] = v6;
    __dst[3] = v7;
    __dst[4] = (uint64_t (*)(uint64_t))__PAIR64__(v9, v10);
    LODWORD(__dst[5]) = 188;
    BYTE4(__dst[5]) = v11;
    BYTE5(__dst[5]) = v8;
    HIWORD(__dst[5]) = 257;
    LOBYTE(__dst[6]) = 1;
    uint64_t v12 = BlueFin::GlMeIf::Instance(__dst);
    uint64_t v3 = v4 + 6544;
    *(void *)(v4 + 656BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v12;
  }
  *(void *)(v2 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v3;
  *(void *)(v2 + 126456) = v3;
  *(void *)(v2 + 132536) = v3;
  *(void *)(v2 + 121224) = v3;
  *(void *)(v2 + 276896) = v3;
  uint64_t v13 = *(void *)(v2 + 16);
  int v14 = *(unsigned __int8 *)(v13 + 11564);
  int v15 = *(__int16 *)(v13 + 26054);
  int v16 = *(unsigned __int8 *)(v13 + 11567);
  uint64_t v17 = *(unsigned __int8 *)(v13 + 11568);
  int v18 = *(_DWORD *)(v13 + 11572);
  uint64_t v19 = *(unsigned int *)(v13 + 11576);
  unsigned int v20 = *(_DWORD *)(v13 + 11580);
  int v21 = *(unsigned __int8 *)(v13 + 11584);
  int v23 = *(unsigned __int8 *)(v13 + 11585);
  memcpy(__dst, (const void *)(v13 + 11588), 0x37C8uLL);
  BlueFin::GlReqSm::EnableLowPower((BlueFin::GlReqSm *)(v2 + 126144), v14, v15);
  BlueFin::GlPePpsGen::SetPpsSettings((BlueFin::GlPePpsGen *)(v2 + 132488), v16, v17, v18, v19, v20);
  BlueFin::GlPosEng::SetFlightMode((unsigned char *)v2, v21, 1);
  BlueFin::GlPeAsstMgr::SetAidMask((_OWORD *)(v2 + 224), v23, (unsigned int *)__dst);
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)v2 + 400))(v2, *(void *)(*(void *)(v2 + 16) + 26304), *(unsigned __int8 *)(*(void *)(v2 + 16) + 26312));
}

uint64_t BlueFin::GlPosEng::SetThermalRiskState(BlueFin::GlPosEng *this, unint64_t a2, int a3)
{
  *((unsigned char *)this + 277484) = a3;
  if (a3 == 100) {
    *((unsigned char *)this + 276757) = 1;
  }
  return 1;
}

unsigned char *BlueFin::GlPosEng::SetFlightMode(unsigned char *this, int a2, int a3)
{
  this[277304] = a2;
  this[277305] = a3;
  if (!this[406720])
  {
    if (a3) {
      int v3 = 2;
    }
    else {
      int v3 = 0;
    }
    uint64_t v4 = &unk_270EC2C20;
    int v5 = 1;
    int v6 = v3 | a2;
    if (BlueFin::GlUtils::m_pInstance)
    {
      if (*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
        return (unsigned char *)BlueFin::GlPeModeChange::SerializeImpl((uint64_t)&v4, 0);
      }
    }
  }
  return this;
}

BlueFin::GlPeHula *BlueFin::GlPeHula::GlPeHula(BlueFin::GlPeHula *this, BlueFin::GlPeTimeManager *a2, const BlueFin::GlPeAsstMgr *a3, const BlueFin::GlPeContextMgr *a4, BlueFin::stSkfStatus *a5, const BOOL *a6, const BOOL *a7)
{
  *(void *)this = 0x1117000020001;
  *(_OWORD *)((char *)this + 8) = xmmword_263BBC0F0;
  *(_OWORD *)((char *)this + 24) = xmmword_263BBC100;
  uint64_t v13 = (char *)this + 5144;
  *(_OWORD *)((char *)this + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = xmmword_263BBC110;
  int v14 = (char *)this + 4128;
  *(_OWORD *)((char *)this + 56) = xmmword_263BBC120;
  *((void *)this + 9) = 0x404000003DCCCCCDLL;
  *((unsigned char *)this + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 3;
  *(_OWORD *)((char *)this + 88) = xmmword_263BBC130;
  *(_OWORD *)((char *)this + 104) = xmmword_263BBC140;
  *(_OWORD *)((char *)this + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = xmmword_263BBC150;
  *(_OWORD *)((char *)this + 136) = xmmword_263BBC160;
  *((_DWORD *)this + 38) = 1;
  *((void *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((void *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0xFFFFFFFF00000000;
  *((_WORD *)this + 292) = 0;
  *((unsigned char *)this + 586) = 0;
  *((_DWORD *)this + 147) = 0;
  *((unsigned char *)this + 592) = 0;
  *(_OWORD *)((char *)this + 856) = 0u;
  *(_OWORD *)((char *)this + 872) = 0u;
  *(_OWORD *)((char *)this + 824) = 0u;
  *(_OWORD *)((char *)this + 84BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 792) = 0u;
  *(_OWORD *)((char *)this + 808) = 0u;
  *(_OWORD *)((char *)this + 76BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 68BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 60BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(void *)((char *)this + 182) = 0;
  *((void *)this + 22) = 0;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *((_OWORD *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((void *)this + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  BlueFin::GlPeSensStats::reset((uint64_t)this);
  *((void *)this + 126) = a5;
  *((void *)this + 127) = a6;
  *((_WORD *)this + 512) = 0;
  *((void *)this + 129) = 0xC15B773FC0000000;
  *((_DWORD *)this + 26BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((void *)this + 13BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0xC15B773FC0000000;
  *((_DWORD *)this + 264) = 0;
  *((unsigned char *)this + 106BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((void *)this + 133) = 0;
  *((_DWORD *)this + 268) = 0;
  *((unsigned char *)this + 1076) = 0;
  *((void *)this + 135) = a2;
  *((_OWORD *)this + 68) = 0u;
  *((_OWORD *)this + 69) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  *((_OWORD *)this + 7BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = _Q0;
  *((_DWORD *)this + 284) = 0;
  *((_DWORD *)this + 29BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((void *)this + 146) = a5;
  *((_DWORD *)this + 294) = 0;
  *((_DWORD *)this + 289) = 0;
  *(_OWORD *)((char *)this + 114BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *((_OWORD *)this + 74) = xmmword_263BA7BB0;
  *((_DWORD *)this + 30BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((_WORD *)this + 612) = 0;
  *((void *)this + 154) = a5;
  *((_DWORD *)this + 305) = 0;
  *(_OWORD *)((char *)this + 1204) = 0u;
  *((void *)this + 155) = 0;
  *((void *)this + 156) = 0xBFF0000000000000;
  *((_DWORD *)this + 314) = 0;
  *((_WORD *)this + 64BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((void *)this + 16BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = a5;
  *((_DWORD *)this + 319) = 0;
  *(_OWORD *)((char *)this + 126BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *((void *)this + 162) = (char *)this + 1312;
  *((void *)this + 163) = 0x6400000000;
  bzero((char *)this + 1312, 0x328uLL);
  *((void *)this + 265) = (char *)this + 2136;
  *((void *)this + 266) = 0x6400000000;
  bzero((char *)this + 2136, 0x330uLL);
  *((void *)this + 369) = 0xBFF0000000000000;
  *((_DWORD *)this + 74BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((unsigned char *)this + 2988) = 0;
  *((void *)this + 374) = a5;
  *(_OWORD *)((char *)this + 2964) = 0u;
  *(void *)((char *)this + 298BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((void *)this + 375) = a5;
  *((_WORD *)this + 1504) = 0;
  *((_DWORD *)this + 78BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((void *)this + 39BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *(_OWORD *)((char *)this + 3048) = 0u;
  *(_OWORD *)((char *)this + 3064) = 0u;
  *(_OWORD *)((char *)this + 3016) = 0u;
  *(_OWORD *)((char *)this + 3032) = 0u;
  int64x2_t v20 = vdupq_n_s64(0x412E848000000000uLL);
  *((int64x2_t *)this + 19BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v20;
  *((int64x2_t *)this + 19BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v20;
  *(_OWORD *)((char *)this + 308BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 3096) = 0u;
  *((_DWORD *)this + 778) = 0;
  *((void *)this + 392) = a5;
  *((_DWORD *)this + 79BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *((_WORD *)this + 158BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_OWORD *)((char *)this + 3144) = 0u;
  *((void *)this + 396) = a5;
  *((unsigned char *)this + 3216) = 0;
  *((_DWORD *)this + 805) = -1082130432;
  *((void *)this + 40BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *(_OWORD *)((char *)this + 3192) = 0u;
  *(_OWORD *)((char *)this + 3176) = 0u;
  *((void *)this + 403) = 0;
  *((_WORD *)this + 1616) = 0;
  *(void *)((char *)this + 3236) = 0;
  *((_DWORD *)this + 81BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *((void *)this + 456) = 0;
  *((_DWORD *)this + 914) = 22;
  *((_OWORD *)this + 227) = 0u;
  *((_OWORD *)this + 226) = 0u;
  *((_OWORD *)this + 225) = 0u;
  *((_OWORD *)this + 224) = 0u;
  *((_OWORD *)this + 223) = 0u;
  *((_OWORD *)this + 222) = 0u;
  *((_OWORD *)this + 22BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
  *((_OWORD *)this + 22BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *((_OWORD *)this + 219) = 0u;
  *((_OWORD *)this + 218) = 0u;
  *((_OWORD *)this + 217) = 0u;
  *((_OWORD *)this + 216) = 0u;
  *((_OWORD *)this + 215) = 0u;
  *((_OWORD *)this + 214) = 0u;
  *((_OWORD *)this + 213) = 0u;
  *((_OWORD *)this + 212) = 0u;
  *((_OWORD *)this + 21BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
  *((_OWORD *)this + 21BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *((_OWORD *)this + 209) = 0u;
  *((_OWORD *)this + 208) = 0u;
  *((_OWORD *)this + 207) = 0u;
  *((_OWORD *)this + 206) = 0u;
  *((_OWORD *)this + 205) = 0u;
  *((_OWORD *)this + 204) = 0u;
  *((_OWORD *)this + 203) = 0u;
  *((_WORD *)this + 183BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((void *)this + 458) = 0;
  *((_DWORD *)this + 918) = 0;
  *((_DWORD *)this + 1019) = 0;
  *((void *)this + 51BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0x1600000000;
  *(_OWORD *)((char *)this + 3676) = 0u;
  *(_OWORD *)((char *)this + 3692) = 0u;
  *(_OWORD *)((char *)this + 3708) = 0u;
  *(_OWORD *)((char *)this + 3724) = 0u;
  *(_OWORD *)((char *)this + 374BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 3756) = 0u;
  *(_OWORD *)((char *)this + 3772) = 0u;
  *(_OWORD *)((char *)this + 3788) = 0u;
  *(_OWORD *)((char *)this + 3804) = 0u;
  *(_OWORD *)((char *)this + 382BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 3836) = 0u;
  *(_OWORD *)((char *)this + 3852) = 0u;
  *(_OWORD *)((char *)this + 3868) = 0u;
  *(_OWORD *)((char *)this + 3884) = 0u;
  *(_OWORD *)((char *)this + 390BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 3916) = 0u;
  *(_OWORD *)((char *)this + 3932) = 0u;
  *(_OWORD *)((char *)this + 3948) = 0u;
  *(_OWORD *)((char *)this + 3964) = 0u;
  *(_OWORD *)((char *)this + 398BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 3996) = 0u;
  *(_OWORD *)((char *)this + 4012) = 0u;
  *(_OWORD *)((char *)this + 4028) = 0u;
  *(_OWORD *)((char *)this + 4044) = 0u;
  *(_OWORD *)((char *)this + 406BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *((void *)this + 51BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *((void *)this + 512) = 0x408F400000000000;
  *((_DWORD *)this + 1026) = 0;
  *((_WORD *)this + 2064) = 0;
  *((void *)this + 517) = a5;
  *(_OWORD *)((char *)this + 4108) = 0u;
  *((_DWORD *)this + 103BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *((void *)this + 518) = 0;
  *((_DWORD *)this + 1038) = 0;
  *((_WORD *)this + 2088) = 0;
  *((void *)this + 523) = a5;
  *(_OWORD *)((char *)this + 4156) = 0u;
  *((_DWORD *)this + 1043) = 0;
  *((void *)this + 524) = 0;
  *((_DWORD *)this + 105BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  v14[76] = 0;
  *(_DWORD *)((char *)this + 4223) = 0;
  *((_OWORD *)this + 263) = 0u;
  *(_OWORD *)((char *)this + 4228) = 0u;
  *((void *)this + 53BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = a5;
  *((void *)this + 532) = 0;
  *((_DWORD *)this + 1066) = 0;
  *((unsigned char *)this + 4288) = 0;
  *((void *)this + 537) = a3;
  uint64_t v21 = 4632;
  *((_OWORD *)this + 267) = 0u;
  do
  {
    double v22 = (char *)this + v21;
    *double v22 = 0;
    *((_DWORD *)v22 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = -1;
    *((_WORD *)v22 + 4) = 575;
    v21 += 12;
  }
  while (v22 + 12 != (char *)this + 5112);
  *((_DWORD *)this + 1076) = -7200001;
  *(_OWORD *)((char *)this + 4312) = 0u;
  *(_OWORD *)((char *)this + 4328) = 0u;
  *(_OWORD *)((char *)this + 4344) = 0u;
  *(_OWORD *)((char *)this + 436BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 4376) = 0u;
  *(_OWORD *)((char *)this + 4392) = 0u;
  *(_OWORD *)((char *)this + 4408) = 0u;
  *(_OWORD *)((char *)this + 4424) = 0u;
  *(_OWORD *)((char *)this + 444BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 4456) = 0u;
  *(_OWORD *)((char *)this + 4472) = 0u;
  *(_OWORD *)((char *)this + 4488) = 0u;
  *(_OWORD *)((char *)this + 4504) = 0u;
  *(_OWORD *)((char *)this + 452BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 4536) = 0u;
  *(_OWORD *)((char *)this + 4552) = 0u;
  *(_OWORD *)((char *)this + 4568) = 0u;
  *(_OWORD *)((char *)this + 4584) = 0u;
  *(_OWORD *)((char *)this + 460BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 4616) = 0u;
  *((void *)this + 639) = a4;
  *((void *)this + 64BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 4287767295;
  *((_DWORD *)this + 1282) = 0;
  *((_WORD *)this + 2566) = 0;
  *((_DWORD *)this + 1284) = 0;
  *uint64_t v13 = 0;
  *((void *)this + 645) = 0;
  *((void *)this + 644) = 0;
  *((_DWORD *)this + 1292) = -1;
  *((void *)this + 647) = 0xC15B773FC0000000;
  *((void *)this + 648) = 0x41EFFFFFFFE00000;
  *((void *)this + 649) = a5;
  *((_WORD *)v13 + 28) = 0;
  *((_DWORD *)this + 1328) = 0;
  *((void *)this + 665) = 0;
  *(_OWORD *)((char *)this + 524BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 5256) = 0u;
  int64x2_t v23 = vdupq_n_s64(0x412E848000000000uLL);
  *(_OWORD *)((char *)this + 5208) = 0u;
  *(_OWORD *)((char *)this + 5224) = 0u;
  *((int64x2_t *)this + 327) = v23;
  *((int64x2_t *)this + 328) = v23;
  *((_DWORD *)this + 1326) = 0;
  *(_OWORD *)((char *)this + 5272) = 0u;
  *(_OWORD *)((char *)this + 5288) = 0u;
  BlueFin::GlPeSensStats::reset((uint64_t)this);
  return this;
}

uint64_t BlueFin::GlPeSensStats::reset(uint64_t this)
{
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  *(void *)(this + 16BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(this + 168) = 0xFFFFFFFF00000000;
  *(void *)(this + 192) = 0;
  *(_WORD *)(this + 584) = 0;
  *(unsigned char *)(this + 586) = 0;
  *(_DWORD *)(this + 588) = 0;
  *(unsigned char *)(this + 592) = 0;
  *(void *)(this + 176) = 0;
  *(void *)(this + 182) = 0;
  uint64_t v3 = 488;
  uint64_t v4 = *(void *)(this + 8);
  uint64_t v5 = *(void *)(this + 16);
  do
  {
    uint64_t v6 = this + v2;
    *(_OWORD *)(v6 + 232) = 0uLL;
    *(_OWORD *)(v6 + 216) = 0uLL;
    *(_OWORD *)(v6 + 20BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0uLL;
    *(void *)(v6 + 248) = 0;
    *(void *)(v6 + 256) = 0x3FF0000000000000;
    unsigned __int16 v7 = (_OWORD *)(this + v2 + 264);
    *unsigned __int16 v7 = 0uLL;
    v7[1] = 0uLL;
    char v8 = (void *)(this + v3);
    *char v8 = 0;
    v8[3] = v4;
    v8[6] = v4;
    v8[9] = v4;
    uint64_t v9 = (_OWORD *)(this + v2 + 600);
    *(void *)(v6 + 648) = 0;
    v9[1] = 0uLL;
    _OWORD v9[2] = 0uLL;
    _OWORD *v9 = 0uLL;
    *(void *)(v6 + 656) = 0x3FF0000000000000;
    unsigned int v10 = (_OWORD *)(this + v2 + 664);
    *unsigned int v10 = 0uLL;
    v10[1] = 0uLL;
    BOOL v11 = (_DWORD *)(this + v1);
    v11[222] = 0;
    v8[52] = v5;
    v8[55] = v5;
    v8[58] = 0;
    v2 += 96;
    v11[244] = 0;
    v1 += 4;
    v3 += 8;
    v11[247] = 0;
  }
  while (v2 != 288);
  *(_WORD *)(this + 100BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  return this;
}

BlueFin::GlDineCtrl *BlueFin::GlMeIf::Instance(uint64_t (**a1)(uint64_t))
{
  int HeapSize = BlueFin::GlMeObjFactory::GetHeapSize((uint64_t)a1);
  GlCustomLog(14, "ME SIZE %d\n", HeapSize);
  uint64_t v3 = (BlueFin::GlMeObjFactory *)BlueFin::GlMeObjFactory::Instance(a1);

  return BlueFin::GlMeObjFactory::MakeGlDineCtrl(v3);
}

BlueFin::GlPeClkCalibrateMgr *BlueFin::GlPeClkCalibrateMgr::GlPeClkCalibrateMgr(BlueFin::GlPeClkCalibrateMgr *this, BlueFin::GlPeTimeManager *a2, BlueFin::GlSettingsImpl *a3)
{
  uint64_t v4 = 0;
  *((unsigned char *)this + 64) = 0;
  *((void *)this + 9) = "CAL";
  *((void *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a2;
  *((void *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = a3;
  *((void *)this + 14BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = (char *)this + 96;
  *((void *)this + 165) = (char *)this + 1152;
  do
  {
    uint64_t v5 = *((void *)this + 165) + v4;
    *(void *)(v5 + 12) = 0;
    *(void *)uint64_t v5 = v5 + 12;
    *(unsigned char *)(v5 + 8) = 2;
    v4 += 24;
  }
  while (v4 != 168);
  uint64_t v6 = 0;
  *((void *)this + 189) = (char *)this + 1344;
  do
  {
    uint64_t v7 = *((void *)this + 189) + v6;
    *(void *)(v7 + 12) = 0;
    *(void *)uint64_t v7 = v7 + 12;
    *(unsigned char *)(v7 + 8) = 2;
    v6 += 24;
  }
  while (v6 != 168);
  uint64_t v8 = 0;
  *((void *)this + 213) = (char *)this + 1536;
  do
  {
    uint64_t v9 = *((void *)this + 213) + v8;
    *(void *)(v9 + 12) = 0;
    *(void *)uint64_t v9 = v9 + 12;
    *(unsigned char *)(v9 + 8) = 2;
    v8 += 24;
  }
  while (v8 != 168);
  BlueFin::GlPeClkCalibrateMgr::Clear(this);
  return this;
}

void BlueFin::GlPeClkCalibrateMgr::Clear(BlueFin::GlPeClkCalibrateMgr *this)
{
  for (uint64_t i = 0; i != 8; ++i)
    *((void *)v13 + i) = ~(-1 << BlueFin::GlImplGnss::m_aucNumSatsPerImplGnss[i]);
  uint64_t v3 = 0;
  long long v4 = v13[1];
  *(_OWORD *)this = v13[0];
  *((_OWORD *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v4;
  long long v5 = v13[3];
  *((_OWORD *)this + 2) = v13[2];
  *((_OWORD *)this + 3) = v5;
  *((unsigned char *)this + 64) = 0;
  do
  {
    uint64_t v6 = *((void *)this + 140) + v3;
    *(void *)uint64_t v6 = &unk_270EBFF50;
    *(_DWORD *)(v6 + 8) = 7;
    *(unsigned char *)(v6 + 12) = 0;
    *(void *)(v6 + 16) = 0;
    *(void *)(v6 + 24) = 0;
    v3 += 32;
  }
  while (v3 != 1024);
  uint64_t v7 = 0;
  uint64_t v8 = *((void *)this + 165);
  do
  {
    bzero(*(void **)(v8 + v7), ((4 * *(unsigned __int8 *)(v8 + v7 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    v7 += 24;
  }
  while (v7 != 168);
  uint64_t v9 = 0;
  uint64_t v10 = *((void *)this + 189);
  do
  {
    bzero(*(void **)(v10 + v9), ((4 * *(unsigned __int8 *)(v10 + v9 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    v9 += 24;
  }
  while (v9 != 168);
  uint64_t v11 = 0;
  uint64_t v12 = *((void *)this + 213);
  do
  {
    bzero(*(void **)(v12 + v11), ((4 * *(unsigned __int8 *)(v12 + v11 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    v11 += 24;
  }
  while (v11 != 168);
}

BlueFin::GlPeRtiRequestor *BlueFin::GlPeRtiRequestor::GlPeRtiRequestor(BlueFin::GlPeRtiRequestor *this, BlueFin::GlPeSvHealthMgr *a2, BlueFin::GlPeLtoMgr *a3, BlueFin::GlPeEngineCallBacks *a4, BlueFin::GlReqSm *a5, int a6)
{
  *(void *)this = &unk_270EC1A18;
  *((void *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = a4;
  *((void *)this + 2) = a2;
  *((void *)this + 3) = a3;
  *((void *)this + 4) = &unk_270EC1A68;
  *((void *)this + 8) = &unk_270EC19B8;
  *((_DWORD *)this + 54) = a6;
  *((void *)this + 5) = 0x271000000000;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 196) = 0u;
  *((void *)this + 6) = 0;
  *((unsigned char *)this + 56) = 0;
  GlCustomLog(14, "GlPeRtiRequestHelper: RTICacheTO=%d\n", a6);
  *((void *)this + 28) = a5;
  return this;
}

uint64_t BlueFin::GlPeSvHealthMgr::GlPeSvHealthMgr(uint64_t a1, const BlueFin::GlSettingsImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = &unk_270EC1B48;
  BlueFin::GlPeSvHealthHelper::GlPeSvHealthHelper((BlueFin::GlPeSvHealthHelper *)(a1 + 32), a2);
  uint64_t v10 = 0;
  *(void *)(a1 + 272BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a2;
  *(void *)(a1 + 2728) = a3;
  *(void *)(a1 + 2736) = a4;
  *(void *)(a1 + 2744) = a5;
  *(void *)(a1 + 292BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 2752;
  do
  {
    uint64_t v11 = *(void *)(a1 + 2920) + v10;
    *(void *)(v11 + 12) = 0;
    *(void *)uint64_t v11 = v11 + 12;
    *(unsigned char *)(v11 + 8) = 2;
    v10 += 24;
  }
  while (v10 != 168);
  unsigned int v12 = 0;
  *(_OWORD *)(a1 + 2956) = 0u;
  *(_OWORD *)(a1 + 2972) = 0u;
  *(void *)(a1 + 2944) = a1 + 2956;
  *(unsigned char *)(a1 + 2952) = 8;
  *(_OWORD *)(a1 + 302BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 3004) = 0u;
  *(void *)(a1 + 2992) = a1 + 3004;
  *(unsigned char *)(a1 + 300BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 8;
  *(_OWORD *)(a1 + 3068) = 0u;
  *(_OWORD *)(a1 + 3052) = 0u;
  *(void *)(a1 + 304BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 3052;
  *(unsigned char *)(a1 + 3048) = 8;
  do
    BlueFin::GlGnssSet::SetAll(a1 + 2752, v12++);
  while (v12 != 7);
  return a1;
}

BlueFin::GlPeSvHealthHelper *BlueFin::GlPeSvHealthHelper::GlPeSvHealthHelper(BlueFin::GlPeSvHealthHelper *this, const BlueFin::GlSettingsImpl *a2)
{
  long long v4 = BlueFin::GlPeSvHealthData::GlPeSvHealthData(this);
  uint64_t v5 = 0;
  *(void *)long long v4 = &unk_270EC1AF8;
  *((void *)v4 + 283) = a2;
  *((void *)v4 + 309) = (char *)v4 + 2304;
  do
  {
    uint64_t v6 = *((void *)this + 309) + v5;
    *(void *)(v6 + 12) = 0;
    *(void *)uint64_t v6 = v6 + 12;
    *(unsigned char *)(v6 + 8) = 2;
    v5 += 24;
  }
  while (v5 != 168);
  uint64_t v7 = 0;
  *((void *)this + 333) = (char *)this + 2496;
  do
  {
    uint64_t v8 = *((void *)this + 333) + v7;
    *(void *)(v8 + 12) = 0;
    *(void *)uint64_t v8 = v8 + 12;
    *(unsigned char *)(v8 + 8) = 2;
    v7 += 24;
  }
  while (v7 != 168);
  BlueFin::GlPeSvHealthHelper::Clear(this);
  for (unsigned int i = 0; i != 7; ++i)
    BlueFin::GlGnssSet::SetAll((uint64_t)&BlueFin::GlPeSvHealthHelper::s_otAllSvs, i);
  return this;
}

BlueFin::GlPeSvHealthData *BlueFin::GlPeSvHealthData::GlPeSvHealthData(BlueFin::GlPeSvHealthData *this)
{
  *(void *)this = &unk_270EC1AA8;
  if ((BlueFin::GlPeSvHealthData::s_bGnssBaseIndexInit & 1) == 0)
  {
    uint64_t v2 = 0;
    int v3 = 0;
    BlueFin::GlPeSvHealthData::s_auiGnssBaseIndex[0] = 0;
    do
    {
      v3 += BlueFin::GlImplGnss::m_aucNumSatsPerImplGnss[v2];
      BlueFin::GlPeSvHealthData::s_auiGnssBaseIndex[++v2] = v3;
    }
    while (v2 != 7);
    BlueFin::GlPeSvHealthData::s_bGnssBaseIndexInit = 1;
  }
  bzero((char *)this + 8, 0x8B8uLL);
  *((_OWORD *)this + 14BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *((_DWORD *)this + 564) = 0;
  return this;
}

void BlueFin::GlPeSvHealthHelper::Clear(BlueFin::GlPeSvHealthHelper *this)
{
  *((_WORD *)this + 1136) = 0;
  *((unsigned char *)this + 2274) = 0;
  *((_DWORD *)this + 569) = 0;
  bzero((char *)this + 8, 0x8B8uLL);
  uint64_t v2 = 0;
  *((_OWORD *)this + 14BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *((void *)this + 282) = 0;
  uint64_t v3 = *((void *)this + 309);
  do
  {
    bzero(*(void **)(v3 + v2), ((4 * *(unsigned __int8 *)(v3 + v2 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    v2 += 24;
  }
  while (v2 != 168);
  uint64_t v4 = 0;
  uint64_t v5 = *((void *)this + 333);
  do
  {
    bzero(*(void **)(v5 + v4), ((4 * *(unsigned __int8 *)(v5 + v4 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    v4 += 24;
  }
  while (v4 != 168);
}

uint64_t BlueFin::GlPeRangeAidGen::GlPeRangeAidGen(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = a1 + 18072;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  BlueFin::GlPeSatAidInfo::GlPeSatAidInfo((BlueFin::GlPeSatAidInfo *)(a1 + 32));
  BlueFin::GlSatAidInfo::GlSatAidInfo(a1 + 9216);
  uint64_t v13 = 0;
  *(void *)(a1 + 18048) = a4;
  *(void *)(a1 + 18056) = a5;
  *(void *)(a1 + 18064) = a6;
  *(_DWORD *)uint64_t v12 = 7;
  *(unsigned char *)(v12 + 4) = 0;
  *(void *)(a1 + 18248) = a1 + 18080;
  do
  {
    uint64_t v14 = *(void *)(a1 + 18248) + v13;
    *(void *)(v14 + 12) = 0;
    *(void *)uint64_t v14 = v14 + 12;
    *(unsigned char *)(v14 + 8) = 2;
    v13 += 24;
  }
  while (v13 != 168);
  uint64_t v15 = 0;
  *(_OWORD *)(a1 + 1906BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 19044) = 0u;
  *(void *)(a1 + 19032) = a1 + 19044;
  *(unsigned char *)(v12 + 968) = 8;
  *(_WORD *)(v12 + 1012) = 0;
  *(void *)(a1 + 19272) = a1 + 19104;
  do
  {
    uint64_t v16 = *(void *)(a1 + 19272) + v15;
    *(void *)(v16 + 12) = 0;
    *(void *)uint64_t v16 = v16 + 12;
    *(unsigned char *)(v16 + 8) = 2;
    v15 += 24;
  }
  while (v15 != 168);
  *(_DWORD *)(v12 + 1224) = 0;
  *(_OWORD *)(a1 + 19332) = 0u;
  *(_OWORD *)(a1 + 19316) = 0u;
  *(void *)(a1 + 19304) = a1 + 19316;
  *(unsigned char *)(v12 + 124BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 8;
  *(_DWORD *)(v12 + 128BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(unsigned char *)(v12 + 1284) = 0;
  *(void *)(a1 + 1936BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a7;
  BlueFin::GlPeRangeAidGen::clear((BlueFin::GlPeRangeAidGen *)a1, 0);
  bzero(*(void **)(a1 + 19304), ((4 * *(unsigned __int8 *)(v12 + 1240) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  return a1;
}

uint64_t BlueFin::GlPeSensorsMgr::GlPeSensorsMgr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(unsigned char *)a1 = 1;
  *(_DWORD *)(a1 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *(void *)(a1 + 5) = 16842752;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = 257;
  *(unsigned char *)(a1 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 24) = &unk_270EC8C40;
  *(void *)(a1 + 32) = a1;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 44) = 0;
  *(_OWORD *)(a1 + 14BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 156) = 0u;
  *(_WORD *)(a1 + 172) = 0;
  *(void *)(a1 + 176) = 0x6400000000;
  *(void *)(a1 + 284) = 0;
  *(unsigned char *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 189) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 20BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_WORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = 0u;
  *(_OWORD *)(a1 + 228) = 0u;
  *(_OWORD *)(a1 + 244) = 0u;
  *(_OWORD *)(a1 + 26BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(void *)(a1 + 275) = 0;
  BlueFin::SensorsData::SensorsData((BlueFin::SensorsData *)(a1 + 296));
  *(void *)(a1 + 2264) = &unk_270EC8D68;
  *(void *)(a1 + 2272) = a1;
  *(_DWORD *)(a1 + 2292) = 0;
  *(void *)(a1 + 228BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(unsigned char *)(a1 + 2288) = 0;
  *(void *)(a1 + 2296) = a2;
  *(void *)(a1 + 2304) = a3;
  *(void *)(a1 + 2312) = a4;
  *(void *)(a1 + 232BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a5;
  *(_DWORD *)(a1 + 2376) = 0;
  *(unsigned char *)(a1 + 238BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 2384) = 0;
  *(void *)(a1 + 240BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 2392) = 0;
  *(_DWORD *)(a1 + 2408) = 0;
  return a1;
}

uint64_t (*BlueFin::GlPeObjFactory::MakeGnssHwBiasMgr(uint64_t (**this)(uint64_t), const BlueFin::GlPeTimeManager *a2, const BlueFin::GlSettingsImpl *a3, const BlueFin::GlPeAsstMgr *a4))(uint64_t)
{
  uint64_t result = (uint64_t (*)(uint64_t))BlueFin::GlMemAlloc::glAllocateMemory(65, 2568, *this);
  if (!result) {
    return this[20];
  }
  *(_OWORD *)((char *)result + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)result + 104) = 0u;
  *(_OWORD *)((char *)result + 88) = 0u;
  *(_OWORD *)((char *)result + 72) = 0u;
  *(_OWORD *)((char *)result + 56) = 0u;
  *(_OWORD *)((char *)result + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)result + 24) = 0u;
  *(_OWORD *)((char *)result + 8) = 0u;
  *((_DWORD *)result + 34) = 1077936128;
  *(void *)uint64_t result = &unk_270EC1318;
  *((void *)result + 18) = a2;
  *((void *)result + 19) = a3;
  *((void *)result + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a4;
  *((unsigned char *)result + 168) = 0;
  *((_DWORD *)result + 43) = 0;
  *(_OWORD *)((char *)result + 2508) = 0u;
  *(_OWORD *)((char *)result + 2524) = 0u;
  *(_OWORD *)((char *)result + 254BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)result + 2552) = 0u;
  *(_OWORD *)((char *)result + 2492) = 0u;
  *((void *)result + 31BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = (char *)result + 2492;
  *((unsigned char *)result + 2488) = 19;
  this[20] = result;
  return result;
}

uint64_t BlueFin::GlPeMiniEphMgr::GlPeMiniEphMgr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = -7200001;
  *(void *)(a1 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 8) = a1 + 20;
  *(unsigned char *)(a1 + 16) = 3;
  *(_DWORD *)(a1 + 28) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 17504);
  uint64_t v5 = 32;
  do
  {
    uint64_t v6 = a1 + v5;
    *(unsigned char *)uint64_t v6 = 0;
    *(_DWORD *)(v6 + 4) = 7;
    *(unsigned char *)(v6 + 8) = 0;
    *(_DWORD *)(v6 + 12) = 0;
    *(_DWORD *)(v6 + 16) = 0;
    *(void *)(v6 + 24) = 0xC15B773FC0000000;
    *(_OWORD *)(v6 + 32) = 0uLL;
    *(_OWORD *)(v6 + 48) = 0uLL;
    *(_OWORD *)(v6 + 64) = 0uLL;
    *(_OWORD *)(v6 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0uLL;
    *(_OWORD *)(v6 + 96) = 0uLL;
    *(_OWORD *)(v6 + 112) = 0uLL;
    *(_OWORD *)(v6 + 128) = 0uLL;
    *(_OWORD *)(v6 + 144) = 0uLL;
    v5 += 192;
    *(_OWORD *)(v6 + 16BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0uLL;
    *(_OWORD *)(v6 + 176) = 0uLL;
  }
  while ((_OWORD *)(v6 + 192) != v4);
  *(void *)(a1 + 17696) = a2;
  *(void *)(a1 + 17704) = a3;
  bzero(*(void **)(a1 + 8), ((4 * *(unsigned __int8 *)(a1 + 16) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  *(void *)&long long v7 = 0x5B5B5B5B5B5B5B5BLL;
  *((void *)&v7 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0x5B5B5B5B5B5B5B5BLL;
  *(_OWORD *)((char *)v4 + 173) = v7;
  v4[9] = v7;
  v4[10] = v7;
  v4[7] = v7;
  unsigned __int8 v4[8] = v7;
  void v4[5] = v7;
  v4[6] = v7;
  v4[3] = v7;
  unsigned char v4[4] = v7;
  v4[1] = v7;
  _OWORD v4[2] = v7;
  _OWORD *v4 = v7;
  return a1;
}

BlueFin::GlPeContextMgr *BlueFin::GlPeContextMgr::GlPeContextMgr(BlueFin::GlPeContextMgr *this, BlueFin::GlPeHula *a2, char a3)
{
  *(_OWORD *)((char *)this + 8) = xmmword_263BB9C30;
  *(_OWORD *)((char *)this + 24) = xmmword_263BB9C30;
  BlueFin::GlPeEnvironmentMonitor::GlPeEnvironmentMonitor((BlueFin::GlPeContextMgr *)((char *)this + 64));
  *((unsigned char *)this + 1805) = a3;
  *((void *)this + 227) = a2;
  *((_DWORD *)this + 464) = 0;
  *((unsigned char *)this + 186BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((_DWORD *)this + 476) = 0;
  *((_WORD *)this + 954) = 0;
  *((_DWORD *)this + 478) = 0;
  *((_WORD *)this + 958) = 0;
  *((void *)this + 228) = 0;
  *((_DWORD *)this + 458) = 0;
  *((unsigned char *)this + 1944) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
  *(_OWORD *)((char *)this + 1864) = 0u;
  *(_OWORD *)((char *)this + 188BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(void *)((char *)this + 1894) = 0;
  *((_OWORD *)this + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *((_DWORD *)this + 484) = 0;
  *(void *)((char *)this + 1845) = 0;
  *((void *)this + 23BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)((char *)this + 1982) = 0;
  *((_OWORD *)this + 123) = 0u;
  *((_OWORD *)this + 122) = 0u;
  *((void *)this + 224) = 0x100000000;
  *((_DWORD *)this + 45BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((unsigned char *)this + 1804) = 0;
  *((void *)this + 226) = 0;
  *((unsigned char *)this + 199BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  return this;
}

BlueFin::GlPeEnvironmentMonitor *BlueFin::GlPeEnvironmentMonitor::GlPeEnvironmentMonitor(BlueFin::GlPeEnvironmentMonitor *this)
{
  *(void *)this = 0;
  *((_DWORD *)this + 3) = 0;
  uint64_t v2 = (char *)this + 28;
  *((void *)this + 2) = v2;
  *((unsigned char *)this + 24) = 19;
  *((void *)this + 157) = 1109393408;
  *((_DWORD *)this + 316) = 0;
  bzero(v2, 0x4CAuLL);
  uint64_t v3 = 0;
  *((_DWORD *)this + 2) = 1101004800;
  *(_OWORD *)((char *)this + 1288) = 0u;
  *(_OWORD *)((char *)this + 1304) = 0u;
  *((_DWORD *)this + 33BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((void *)this + 21BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = (char *)this + 1344;
  *(_OWORD *)((char *)this + 1272) = 0u;
  *(_OWORD *)((char *)this + 1688) = 0u;
  *(_DWORD *)((char *)this + 1703) = 0;
  do
  {
    uint64_t v4 = *((void *)this + 210) + v3;
    *(unsigned char *)uint64_t v4 = 0;
    *(void *)(v4 + 4) = 0;
    *(void *)(v4 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
    *(void *)(v4 + 12) = 0;
    v3 += 28;
  }
  while (v3 != 336);
  return this;
}

uint64_t BlueFin::GlMeObjFactory::Instance(uint64_t (**a1)(uint64_t))
{
  uint64_t v1 = BlueFin::GlMeObjFactory::m_ptObjFactory;
  if (!BlueFin::GlMeObjFactory::m_ptObjFactory)
  {
    if (a1)
    {
      Memory = (char *)BlueFin::GlMemAlloc::glAllocateMemory(3, 400, a1[2]);
      if (!Memory)
      {
        DeviceFaultNotify("glmeobjfact.cpp", 146, "Instance", (char)"pBuf != nullptr");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmeobjfact.cpp", 146, "pBuf != nullptr");
      }
      uint64_t v1 = (uint64_t)Memory;
      *((void *)Memory + 49) = 0xA5A5A5A5A5A5A5A5;
      *(void *)&long long v4 = 0xA5A5A5A5A5A5A5A5;
      *((void *)&v4 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0xA5A5A5A5A5A5A5A5;
      *(_OWORD *)(Memory + 248) = v4;
      *(_OWORD *)(Memory + 232) = v4;
      *(_OWORD *)(Memory + 216) = v4;
      *(_OWORD *)(Memory + 20BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v4;
      *(_OWORD *)(Memory + 184) = v4;
      *(_OWORD *)(Memory + 168) = v4;
      *(_OWORD *)(Memory + 152) = v4;
      *(_OWORD *)(Memory + 136) = v4;
      *(_OWORD *)(Memory + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v4;
      *(_OWORD *)(Memory + 104) = v4;
      *(_OWORD *)(Memory + 88) = v4;
      *(_OWORD *)(Memory + 72) = v4;
      *(_OWORD *)(Memory + 56) = v4;
      *(_OWORD *)(Memory + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v4;
      *(_OWORD *)(Memory + 8) = v4;
      *(_OWORD *)(Memory + 24) = v4;
      *(_OWORD *)(Memory + 36BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v4;
      *(_OWORD *)(Memory + 376) = v4;
      *(_OWORD *)(Memory + 328) = v4;
      *(_OWORD *)(Memory + 344) = v4;
      *(_OWORD *)(Memory + 296) = v4;
      *(_OWORD *)(Memory + 312) = v4;
      *(_OWORD *)(Memory + 264) = v4;
      *(_OWORD *)(Memory + 28BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v4;
      *(void *)Memory = &unk_270EBC998;
      long long v5 = *(_OWORD *)a1;
      long long v6 = *((_OWORD *)a1 + 1);
      long long v7 = *((_OWORD *)a1 + 2);
      *((void *)Memory + 7) = a1[6];
      *(_OWORD *)(Memory + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v7;
      *(_OWORD *)(Memory + 24) = v6;
      *(_OWORD *)(Memory + 8) = v5;
      *((_OWORD *)Memory + 4) = 0u;
      *((_OWORD *)Memory + 5) = 0u;
      *((_OWORD *)Memory + 6) = 0u;
      *((_OWORD *)Memory + 7) = 0u;
      *((_OWORD *)Memory + 8) = 0u;
      *((_OWORD *)Memory + 9) = 0u;
      *((_OWORD *)Memory + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
      *((_OWORD *)Memory + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
      *((_OWORD *)Memory + 12) = 0u;
      *((_OWORD *)Memory + 13) = 0u;
      *((_OWORD *)Memory + 14) = 0u;
      *((_OWORD *)Memory + 15) = 0u;
      *((_OWORD *)Memory + 16) = 0u;
      *((_OWORD *)Memory + 17) = 0u;
      *((_OWORD *)Memory + 18) = 0u;
      *((_OWORD *)Memory + 19) = 0u;
      *((_OWORD *)Memory + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
      *((_OWORD *)Memory + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
      *((void *)Memory + 44) = 0;
      *((void *)Memory + 45) = &unk_270EBA640;
      *((void *)Memory + 46) = 0;
      *((void *)Memory + 47) = 0;
      *((void *)Memory + 48) = 0;
      *(void *)(Memory + 39BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
      BlueFin::GlArray::Clear((uint64_t)(Memory + 360));
      *(void *)(v1 + 36BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = &unk_270EBC9C8;
      BlueFin::GlMeObjFactory::m_ptObjFactory = v1;
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

BlueFin::GlDineCtrl *BlueFin::GlMeObjFactory::MakeGlDineCtrl(BlueFin::GlMeObjFactory *this)
{
  Memory = (BlueFin::GlDineCtrl *)BlueFin::GlMemAlloc::glAllocateMemory(2, 186112, *((uint64_t (**)(uint64_t))this + 3));
  if (!Memory) {
    return (BlueFin::GlDineCtrl *)*((void *)this + 8);
  }
  uint64_t result = BlueFin::GlDineCtrl::GlDineCtrl(Memory, *((BlueFin::GlEventPump **)this + 1), *((BlueFin::GlPeIf **)this + 2), v3, v4, *((unsigned char *)this + 53), *((_DWORD *)this + 10), *((unsigned char *)this + 52));
  *((void *)this + 8) = result;
  return result;
}

uint64_t BlueFin::GlMeObjFactory::GetHeapSize(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 36);
  if (*(unsigned char *)(a1 + 46)) {
    int v2 = 2088;
  }
  else {
    int v2 = 800;
  }
  unsigned int v3 = ((v1 + 7) & 0xFFFFFFF8)
     + 792 * v1
     + 3744 * (v1 + 5)
     + ((2 * v1 + 7) & 0xFFFFFFF8)
     + v2
     + ((2 * (v1 + 5) + 7) & 0xFFFFFFF8);
  unsigned int v4 = v3 + 187624;
  unsigned int v5 = v3 + 188616;
  if (!*(unsigned char *)(a1 + 47)) {
    unsigned int v5 = v4;
  }
  if (*(unsigned char *)(a1 + 48)) {
    v5 += 12256;
  }
  return ((4 * v1 + 14) & 0xFFFFFFF0) + 1696 * v1 + v5 + 4040;
}

uint64_t BlueFin::GlPeFixStatus::GlPeFixStatus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17 = a1 + 7152;
  bzero((void *)a1, 0x1CF0uLL);
  memset((void *)(a1 + 7408), 248, 24);
  *(_OWORD *)(a1 + 7432) = 0u;
  *(_OWORD *)(a1 + 7448) = 0u;
  *(_OWORD *)(a1 + 7464) = 0u;
  *(_OWORD *)(a1 + 748BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 7496) = 0u;
  *(_OWORD *)(a1 + 7512) = 0u;
  *(_OWORD *)(a1 + 7528) = 0u;
  *(_OWORD *)(a1 + 7544) = 0u;
  *(_OWORD *)(a1 + 756BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 7576) = 0u;
  *(_OWORD *)(a1 + 7592) = 0u;
  *(_OWORD *)(a1 + 7608) = 0u;
  *(_OWORD *)(a1 + 7624) = 0u;
  *(_OWORD *)(a1 + 764BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 7656) = 0u;
  *(_OWORD *)(a1 + 7672) = 0u;
  *(_OWORD *)(a1 + 7688) = 0u;
  *(_OWORD *)(a1 + 7704) = 0u;
  *(_OWORD *)(a1 + 772BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 7736) = 0u;
  *(_OWORD *)(a1 + 7752) = 0u;
  *(_OWORD *)(a1 + 7768) = 0u;
  *(_OWORD *)(a1 + 7784) = 0u;
  *(_OWORD *)(a1 + 780BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 7816) = 0u;
  *(void *)(a1 + 7832) = a2;
  *(void *)(a1 + 784BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a3;
  *(void *)(a1 + 7848) = a4;
  *(void *)(a1 + 7856) = a5;
  *(void *)(a1 + 9024) = a1 + 9088;
  *(void *)(a1 + 9032) = a1 + 7872;
  *(void *)(a1 + 904BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 9888;
  *(void *)(a1 + 9048) = 0x23F000000000008;
  *(_WORD *)(v17 + 1904) = 100;
  BlueFin::GlBigArray::Clear(a1 + 9024);
  *(void *)(a1 + 10088) = a1;
  *(void *)(a1 + 10096) = a5;
  *(void *)(a1 + 10112) = a6;
  *(void *)(a1 + 1012BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a7;
  *(void *)(a1 + 10128) = 0;
  *(void *)(a1 + 10136) = a8;
  *(void *)(a1 + 10144) = a9;
  *(unsigned char *)(v17 + 300BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(unsigned char *)(v17 + 3048) = 1;
  *(_WORD *)(v17 + 3132) = 0;
  *(void *)(a1 + 10288) = 0xA00000000;
  *(unsigned char *)(v17 + 3144) = 1;
  *(_OWORD *)(a1 + 10204) = 0u;
  *(_OWORD *)(a1 + 1022BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 10236) = 0u;
  *(_OWORD *)(a1 + 10252) = 0u;
  *(_OWORD *)(a1 + 10268) = 0u;
  BlueFin::GlPeFixStatus::InitFixStatus(a1);
  *(unsigned char *)uint64_t v17 = 0;
  *(void *)(v17 + 76) = 0;
  *(_WORD *)(a1 + 7236) = 0;
  *(void *)(a1 + 724BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 716BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 7176) = 0;
  *(void *)(a1 + 7168) = 0;
  *(unsigned char *)(v17 + 32) = 0;
  *(void *)(v17 + 36) = 0;
  *(void *)(v17 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *(void *)(v17 + 52) = 0;
  *(unsigned char *)(v17 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 7216) = 0;
  *(unsigned char *)(v17 + 72) = 0;
  *(void *)(a1 + 10168) = 0;
  *(void *)(a1 + 10184) = 0;
  *(void *)(a1 + 10176) = 0;
  *(_DWORD *)(a1 + 1016BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = -7200001;
  *(void *)(a1 + 10192) = 0;
  return a1;
}

double BlueFin::GlPeFixStatus::InitFixStatus(uint64_t a1)
{
  if (a1)
  {
    int v2 = (unsigned char *)(a1 + 4176);
    bzero((void *)a1, 0x1CF0uLL);
    memset((void *)(a1 + 7408), 248, 24);
    *(_OWORD *)(a1 + 7432) = 0u;
    *(_OWORD *)(a1 + 7448) = 0u;
    *(_OWORD *)(a1 + 7464) = 0u;
    *(_OWORD *)(a1 + 748BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
    *(_OWORD *)(a1 + 7496) = 0u;
    *(_OWORD *)(a1 + 7512) = 0u;
    *(_OWORD *)(a1 + 7528) = 0u;
    *(_OWORD *)(a1 + 7544) = 0u;
    *(_OWORD *)(a1 + 756BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
    *(_OWORD *)(a1 + 7576) = 0u;
    *(_OWORD *)(a1 + 7592) = 0u;
    *(_OWORD *)(a1 + 7608) = 0u;
    *(_OWORD *)(a1 + 7624) = 0u;
    *(_OWORD *)(a1 + 764BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
    *(_OWORD *)(a1 + 7656) = 0u;
    *(_OWORD *)(a1 + 7672) = 0u;
    *(_OWORD *)(a1 + 7688) = 0u;
    *(_OWORD *)(a1 + 7704) = 0u;
    *(_OWORD *)(a1 + 772BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
    *(_OWORD *)(a1 + 7736) = 0u;
    *(_OWORD *)(a1 + 7752) = 0u;
    *(_OWORD *)(a1 + 7768) = 0u;
    *(_OWORD *)(a1 + 7784) = 0u;
    *(_OWORD *)(a1 + 780BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
    *(_OWORD *)(a1 + 7816) = 0u;
    *(unsigned char *)(a1 + 4048) = 0;
    v2[16] = 0;
    v2[32] = 0;
    bzero((void *)(a1 + 4280), 0x340uLL);
    uint64_t v3 = -256;
    do
    {
      unsigned int v4 = (_OWORD *)(a1 + v3 + 5368);
      _OWORD v4[2] = 0uLL;
      v4[3] = 0uLL;
      _OWORD *v4 = 0uLL;
      v4[1] = 0uLL;
      unsigned int v5 = (_OWORD *)(a1 + v3 + 5624);
      *unsigned int v5 = 0uLL;
      v5[1] = 0uLL;
      void v5[2] = 0uLL;
      v5[3] = 0uLL;
      long long v6 = (_OWORD *)(a1 + v3 + 6072);
      *long long v6 = 0uLL;
      v6[1] = 0uLL;
      _OWORD v6[2] = 0uLL;
      void v6[3] = 0uLL;
      v3 += 64;
    }
    while (v3);
    *(_OWORD *)(a1 + 5656) = 0u;
    *(_OWORD *)(a1 + 5672) = 0u;
    *(_OWORD *)(a1 + 5624) = 0u;
    *(_OWORD *)(a1 + 564BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
    *(_DWORD *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
    *(_DWORD *)(a1 + 406BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
    *(_DWORD *)(a1 + 4224) = 0;
    *(_DWORD *)(a1 + 4168) = 0;
    *(void *)(a1 + 412BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0x4058C00000000000;
    *(int64x2_t *)(a1 + 4128) = vdupq_n_s64(0x4058C00000000000uLL);
    *(_DWORD *)(a1 + 6912) = 0;
    *(int64x2_t *)(a1 + 4144) = vdupq_n_s64(0x40C3878000000000uLL);
    v2[82] = 0;
    *(_DWORD *)(a1 + 426BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
    v2[88] = 0;
    *(_DWORD *)(a1 + 4268) = 0;
    v2[96] = 0;
    *(void *)(a1 + 6952) = 0x40C3878000000000;
    *(_OWORD *)(a1 + 696BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = xmmword_263BBCE00;
    *(void *)(a1 + 6976) = 0x4066800000000000;
    *(_DWORD *)(a1 + 7016) = 0;
    *(_OWORD *)(a1 + 6984) = 0u;
    *(void *)(a1 + 700BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
    *(_WORD *)(a1 + 7296) = -1;
    *(_DWORD *)(a1 + 730BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
    *(unsigned char *)(a1 + 405BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
    unsigned char *v2 = 0;
    __asm { FMOV            V0.2S, #-1.0 }
    *(double *)(a1 + 7352) = result;
    v2[3184] = 0;
  }
  return result;
}

BlueFin::GlPeCntinMgr *BlueFin::GlPeCntinMgr::GlPeCntinMgr(BlueFin::GlPeCntinMgr *this, unsigned int a2, BlueFin::GlEventPump *a3, BlueFin::GlPosEng *a4, BlueFin::GlReqSm *a5, BlueFin::GlPeEngineCallBacks *a6)
{
  *((void *)this + 3) = "OFF";
  *((void *)this + 4) = 0;
  *((void *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *((void *)this + 2) = "STARTING";
  *((_WORD *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((void *)this + 12) = 0;
  *((_DWORD *)this + 26) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 73) = 0u;
  *(void *)this = &unk_270EBFF98;
  *((void *)this + 14) = a4;
  *((void *)this + 15) = a6;
  *((void *)this + 16) = a5;
  *((void *)this + 17) = 0;
  *((void *)this + 32) = 0;
  *((void *)this + 28) = 0;
  *((void *)this + 29) = 0;
  *(_DWORD *)((char *)this + 247) = 0;
  *((void *)this + 3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = (char *)this + 192;
  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;
  BlueFin::QHsm::ctor((uint64_t)this, (uint64_t)BlueFin::GlPeCntinMgr::initial);
  uint64_t v8 = *((void *)this + 27);
  *((unsigned char *)this + 88) = 2;
  *((void *)this + 6) = v8;
  *((void *)this + 7) = v8 + 24;
  *((void *)this + 8) = v8;
  *((void *)this + 9) = v8;
  *((void *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0x100000000000CLL;
  *((unsigned char *)this + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  BlueFin::QHsm::init((uint64_t)this, 0);
  BlueFin::GlEventPump::AddActive((uint64_t)a3, this);
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  return this;
}

BlueFin::SensorsData *BlueFin::SensorsData::SensorsData(BlueFin::SensorsData *this)
{
  *(void *)this = &unk_270EC8DD0;
  *((void *)this + 104) = 0;
  int v2 = (_OWORD *)((char *)this + 8);
  *((unsigned char *)this + 84BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((_DWORD *)this + 21BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *((unsigned char *)this + 848) = 0;
  *((_DWORD *)this + 213) = 0;
  *((void *)this + 107) = 0;
  *((_DWORD *)this + 206) = 0;
  v2[50] = 0u;
  *((_DWORD *)this + 216) = 1120403456;
  bzero(v2, 0x320uLL);
  *((_OWORD *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 868) = 0u;
  *(_OWORD *)((char *)this + 884) = 0u;
  *((void *)this + 217) = 0;
  *((unsigned char *)this + 1744) = 0;
  *((_DWORD *)this + 437) = 0;
  *((unsigned char *)this + 1752) = 0;
  *((_DWORD *)this + 439) = 0;
  *((void *)this + 22BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((_OWORD *)this + 107) = 0u;
  *((_DWORD *)this + 432) = 0;
  *((_DWORD *)this + 442) = 1120403456;
  bzero((char *)this + 912, 0x320uLL);
  *(_OWORD *)((char *)this + 180BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 1772) = 0u;
  *(_OWORD *)((char *)this + 1788) = 0u;
  off_270EC8DE0(this);
  return this;
}

BOOL BlueFin::GlPeSensorsMgr::PrepareData(BlueFin::GlPeSensorsMgr *this, unsigned int a2)
{
  unsigned int v3 = *((_DWORD *)this + 594);
  if (v3 < a2)
  {
    BlueFin::GlPeSensorsMgr::PublishData(this);
    *((_DWORD *)this + 594) = a2;
    (*(void (**)(void))(*((void *)this + 37) + 16))();
  }
  return v3 < a2;
}

uint64_t BlueFin::SensorsData::reset(BlueFin::SensorsData *this)
{
  uint64_t result = (*(uint64_t (**)(BlueFin::SensorsData *))(*(void *)this + 216))(this);
  *((_DWORD *)this + 49BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((_DWORD *)this + 457) = 0;
  *((_DWORD *)this + 488) = 0;
  return result;
}

uint64_t BlueFin::SensorsData::ResetOverflowFlags(uint64_t this)
{
  *(_WORD *)(this + 1956) = 0;
  return this;
}

uint64_t BlueFin::GlPeSensorsMgr::PublishData(BlueFin::GlPeSensorsMgr *this)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  if (BlueFin::GlUtils::m_ucEnabled) {
    BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0xE6);
  }
  uint64_t v2 = *(void *)(*((void *)this + 288) + 1816);
  *(unsigned char *)(v2 + 188) = 0;
  *(unsigned char *)(v2 + 585) = 0;
  uint64_t v39 = *((void *)this + 287);
  __int16 v37 = 0;
  uint64_t v38 = &v28;
  if (*((unsigned char *)this + 1) || *((unsigned char *)this + 2) || *((unsigned char *)this + 3))
  {
    (*(void (**)(char *))(*((void *)this + 3) + 64))((char *)this + 24);
    (*(void (**)(char *, uint64_t *))(*((void *)this + 3) + 56))((char *)this + 24, &v28);
  }
  if (*((unsigned char *)this + 7))
  {
    unsigned int v3 = (char *)this + 296;
    (*(void (**)(char *, void))(*((void *)this + 37) + 56))((char *)this + 296, **((unsigned int **)this + 290));
    int v4 = (*(uint64_t (**)(char *, void))(*((void *)this + 37) + 64))((char *)this + 296, **((unsigned int **)this + 290));
    int v5 = (*(uint64_t (**)(char *, void))(*((void *)this + 37) + 72))((char *)this + 296, **((unsigned int **)this + 290));
    if (v4 >= v5) {
      int v6 = v5;
    }
    else {
      int v6 = v4;
    }
    if (v6 >= 1)
    {
      int v7 = v5;
      unsigned int v8 = 50
         * (((*(unsigned int (**)(char *, void))(*(void *)v3 + 128))((char *)this + 296, 0) + 25)
          / 0x32);
      unsigned int v9 = 50
         * (((*(unsigned int (**)(char *, void))(*(void *)v3 + 136))((char *)this + 296, 0) + 25)
          / 0x32);
      unsigned int v10 = v9 - v8;
      if (v8 >= v9) {
        unsigned int v10 = v8 - v9;
      }
      if (v10 >= 0x65) {
        *((unsigned char *)this + 238BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
      }
      if (v8 == v9) {
        goto LABEL_27;
      }
      do
      {
        if (v8 <= v9)
        {
          if (v9 <= v8)
          {
            DeviceFaultNotify("glpe_sensmgr.cpp", 476, "FillInfoAccGyr", (char)"0");
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_sensmgr.cpp", 476, "0");
          }
          (*(void (**)(char *, uint64_t))(*(void *)v3 + 168))((char *)this + 296, 1);
          --v4;
          unsigned int v8 = 50
             * (((*(unsigned int (**)(char *, void))(*(void *)v3 + 128))((char *)this + 296, 0) + 25)
              / 0x32);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(*(void *)v3 + 176))((char *)this + 296, 1);
          --v7;
          unsigned int v9 = 50
             * (((*(unsigned int (**)(char *, void))(*(void *)v3 + 136))((char *)this + 296, 0) + 25)
              / 0x32);
        }
        if (v4 >= v7) {
          int v6 = v7;
        }
        else {
          int v6 = v4;
        }
      }
      while (v6 >= 1 && v8 != v9);
      if (v6 >= 1)
      {
LABEL_27:
        if (v6 >= 40) {
          uint64_t v11 = 40;
        }
        else {
          uint64_t v11 = v6;
        }
        if ((*(uint64_t (**)(char *))(*(void *)v3 + 192))((char *)this + 296))
        {
          float v12 = -998.0;
        }
        else if (*((unsigned char *)this + 2380))
        {
          float v12 = -999.0;
        }
        else
        {
          float v12 = -1.0;
        }
        uint64_t v13 = 0;
        *((unsigned char *)this + 238BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
        do
        {
          uint64_t v14 = 0;
          __int16 v37 = 1;
          *((_DWORD *)v38 + 2) = 0;
          __int16 v30 = v11;
          uint64_t v28 = v13 | 0x200000000;
          uint64_t v15 = v32;
          do
          {
            if (!v14) {
              int v29 = (*(uint64_t (**)(char *, void))(*(void *)v3 + 128))((char *)this + 296, 0);
            }
            __int16 v16 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v3 + 128))((char *)this + 296, v14);
            *((_WORD *)v15 - 4) = v16 - v29;
            *(float *)uint64_t v15 = (*(float (**)(char *, uint64_t, uint64_t))(*(void *)v3 + 96))((char *)this + 296, v14, v13);
            v15[10] = -1082130432;
            ++v14;
            v15 += 22;
          }
          while (v11 != v14);
          if (v37) {
            (*(void (**)(uint64_t, __int16 *))(*(void *)v39 + 16))(v39, &v37);
          }
          uint64_t v13 = (v13 + 1);
        }
        while (v13 != 3);
        uint64_t v17 = 0;
        do
        {
          uint64_t v18 = 0;
          __int16 v37 = 1;
          *((_DWORD *)v38 + 2) = 0;
          __int16 v30 = v11;
          LODWORD(v28) = v17 + 3;
          HIDWORD(v28) = 2;
          uint64_t v19 = (float *)v32;
          do
          {
            if (!v18) {
              int v29 = (*(uint64_t (**)(char *, void))(*(void *)v3 + 136))((char *)this + 296, 0);
            }
            __int16 v20 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v3 + 136))((char *)this + 296, v18);
            *((_WORD *)v19 - 4) = v20 - v29;
            *uint64_t v19 = (*(float (**)(char *, uint64_t, uint64_t))(*(void *)v3 + 104))((char *)this + 296, v18, v17);
            *uint64_t v19 = (*(float (**)(char *, uint64_t, uint64_t))(*(void *)v3 + 104))((char *)this + 296, v18, v17);
            v19[10] = v12;
            ++v18;
            v19 += 22;
          }
          while (v11 != v18);
          if (v37) {
            (*(void (**)(uint64_t, __int16 *))(*(void *)v39 + 16))(v39, &v37);
          }
          uint64_t v17 = (v17 + 1);
        }
        while (v17 != 3);
        (*(void (**)(char *, uint64_t))(*(void *)v3 + 168))((char *)this + 296, v11);
        (*(void (**)(char *, uint64_t))(*(void *)v3 + 176))((char *)this + 296, v11);
      }
    }
    if ((*(int (**)(char *))(*(void *)v3 + 80))((char *)this + 296) >= 1)
    {
      __int16 v37 = 1;
      *((_DWORD *)v38 + 2) = 0;
      uint64_t v28 = 0x200000016;
      __int16 v30 = 2;
      __int16 v31 = 0;
      v32[0] = 3;
      v32[1] = (*(float (**)(char *, void, void))(*(void *)v3 + 112))((char *)this + 296, 0, 0);
      v32[10] = -1082130432;
      __int16 v33 = 0;
      int v34 = 24;
      float v35 = (*(float (**)(char *, void, uint64_t))(*(void *)v3 + 112))((char *)this + 296, 0, 1);
      int v36 = -1082130432;
      if (v37) {
        (*(void (**)(uint64_t, __int16 *))(*(void *)v39 + 16))(v39, &v37);
      }
    }
    (*(void (**)(char *))(*(void *)v3 + 216))((char *)this + 296);
  }
  if (*((unsigned char *)this + 8))
  {
    uint64_t v21 = (char *)this + 296;
    int v22 = (*(uint64_t (**)(char *))(*((void *)this + 37) + 88))((char *)this + 296);
    if (v22 >= 1)
    {
      __int16 v37 = 1;
      *((_DWORD *)v38 + 2) = 0;
      __int16 v30 = v22;
      uint64_t v28 = 0x200000006;
      if (v22 << 16 >= 1)
      {
        uint64_t v23 = 0;
        uint64_t v24 = v32;
        do
        {
          if (!v23) {
            int v29 = (*(uint64_t (**)(char *, void))(*(void *)v21 + 144))((char *)this + 296, 0);
          }
          __int16 v25 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v21 + 144))((char *)this + 296, v23);
          *((_WORD *)v24 - 4) = v25 - v29;
          float v26 = (*(double (**)(char *, uint64_t))(*(void *)v21 + 120))((char *)this + 296, v23);
          *(float *)uint64_t v24 = v26;
          v24[10] = -1082130432;
          ++v23;
          v24 += 22;
        }
        while (v23 < v30);
      }
      if (v37) {
        (*(void (**)(uint64_t, __int16 *))(*(void *)v39 + 16))(v39, &v37);
      }
      (*(void (**)(char *))(*(void *)v21 + 184))((char *)this + 296);
    }
  }
  (*(void (**)(char *))(*((void *)this + 283) + 32))((char *)this + 2264);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t *))(*((void *)this + 283) + 24))((char *)this + 2264, &v28);
  *((void *)this + 298) = 0;
  *((void *)this + 30BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((void *)this + 299) = 0;
  *((_DWORD *)this + 602) = 0;
  return result;
}

uint64_t BlueFin::SensorWheelInfo::fillInfo(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 24)) {
    return 0;
  }
  *(_WORD *)(a2 + 356BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
  *(_DWORD *)(*(void *)(a2 + 3568) + 8) = 0;
  *(_WORD *)(a2 + 32) = 1;
  *(void *)a2 = 0x20000000DLL;
  *(_WORD *)(a2 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a2 + 88) = 1036831949;
  if (*(_WORD *)(a2 + 3560)) {
    (*(void (**)(void, uint64_t))(**(void **)(a2 + 3576) + 16))(*(void *)(a2 + 3576), a2 + 3560);
  }
  *(unsigned char *)(a1 + 24) = 0;
  return 1;
}

uint64_t BlueFin::SensorWheelInfo::timeout(BlueFin::SensorWheelInfo *this)
{
  return 1;
}

uint64_t BlueFin::SensorsData::getNtemp(BlueFin::SensorsData *this)
{
  return *((unsigned int *)this + 490);
}

uint64_t BlueFin::SensorsData::getNgyr(BlueFin::SensorsData *this)
{
  return *((unsigned int *)this + 428);
}

uint64_t BlueFin::SensorsData::getNacc(BlueFin::SensorsData *this)
{
  return *((unsigned int *)this + 202);
}

unsigned int *BlueFin::SensorsData::check(BlueFin::SensorsData *this)
{
  BlueFin::SensorsDownsampleFilt::Flush((unsigned int *)this + 2);
  uint64_t result = BlueFin::SensorsDownsampleFilt::Flush((unsigned int *)this + 228);
  int v3 = *((_DWORD *)this + 202) - *((_DWORD *)this + 428);
  if (v3 < 0) {
    int v3 = *((_DWORD *)this + 428) - *((_DWORD *)this + 202);
  }
  if (v3 >= 5)
  {
    *((_DWORD *)this + 21BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
    *((void *)this + 104) = 0;
    *((unsigned char *)this + 84BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
    *((unsigned char *)this + 848) = 0;
    *((void *)this + 10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
    *((void *)this + 102) = 0;
    *((_DWORD *)this + 206) = 0;
    *((_DWORD *)this + 437) = 0;
    *((void *)this + 217) = 0;
    *((unsigned char *)this + 1744) = 0;
    *((unsigned char *)this + 1752) = 0;
    *((void *)this + 214) = 0;
    *((void *)this + 215) = 0;
    *((_DWORD *)this + 432) = 0;
  }
  *((_DWORD *)this + 457) = 1;
  return result;
}

unsigned int *BlueFin::SensorsDownsampleFilt::Flush(unsigned int *this)
{
  uint64_t v1 = this[204];
  if (v1)
  {
    uint64_t v2 = this;
    if (v1 <= this[200])
    {
      this = (unsigned int *)memmove(this, &this[4 * v1], 16 * (50 - v1));
      v2[200] -= v2[204];
    }
    else
    {
      this[209] = 0;
      *((void *)this + 103) = 0;
      *((unsigned char *)this + 832) = 0;
      *((unsigned char *)this + 84BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
      *((void *)this + 10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
      *((void *)this + 10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
    }
    v2[204] = 0;
  }
  return this;
}

uint64_t BlueFin::SensorsData::getNpressure(BlueFin::SensorsData *this)
{
  return *((unsigned int *)this + 488);
}

BlueFin::GlPeMsmtMgr *BlueFin::GlPeMsmtMgr::GlPeMsmtMgr(BlueFin::GlPeMsmtMgr *this, BlueFin::GlPeOscMgr *a2, const BlueFin::stSkfTestParam *a3, const BlueFin::GlSettingsImpl *a4)
{
  *(int32x2_t *)this = vdup_n_s32(0xFF9222FF);
  *(_OWORD *)((char *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *((void *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = (char *)this + 20;
  *((unsigned char *)this + 16) = 19;
  *(_OWORD *)((char *)this + 36) = 0u;
  unsigned int v8 = (char *)this + 56466;
  *(_OWORD *)((char *)this + 52) = 0u;
  unsigned int v9 = (char *)this + 37792;
  *(_OWORD *)((char *)this + 68) = 0u;
  unsigned int v10 = (char *)this + 19168;
  *((_OWORD *)this + 5) = 0u;
  *(_OWORD *)((char *)this + 108) = 0u;
  *((void *)this + 12) = (char *)this + 108;
  *((unsigned char *)this + 104) = 19;
  *(_OWORD *)((char *)this + 124) = 0u;
  *(_OWORD *)((char *)this + 14BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 156) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 196) = 0u;
  *((void *)this + 23) = (char *)this + 196;
  *((unsigned char *)this + 192) = 19;
  *(_OWORD *)((char *)this + 212) = 0u;
  *(_OWORD *)((char *)this + 228) = 0u;
  *(_OWORD *)((char *)this + 244) = 0u;
  *((_OWORD *)this + 16) = 0u;
  BlueFin::stPePropSigMeas::stPePropSigMeas((BlueFin::GlPeMsmtMgr *)((char *)this + 288));
  *(_DWORD *)unsigned int v10 = 0;
  *((void *)this + 2397) = BlueFin::GlPeObjFactory::MakeMePeSigMeasArray((BlueFin::GlPeObjFactory *)BlueFin::GlPeObjFactory::m_potGlPeObjFactory);
  v10[16] = 0;
  *((void *)this + 2399) = a2;
  v10[32] = 0;
  BlueFin::stPeStoredDoppler::stPeStoredDoppler((uint64_t)this + 19232);
  *(_DWORD *)unsigned int v9 = -1;
  BlueFin::stPeStoredDoppler::stPeStoredDoppler((uint64_t)this + 37824);
  *((void *)v9 + 2324) = &unk_270EC29B8;
  *(_OWORD *)((char *)this + 56392) = 0u;
  *(_OWORD *)((char *)this + 56408) = 0u;
  *(_OWORD *)((char *)this + 56424) = 0u;
  *(_OWORD *)((char *)this + 5644BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 5645BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_DWORD *)unsigned int v8 = 65537;
  *((_WORD *)v8 + 2) = 2;
  *(_OWORD *)((char *)this + 56472) = 0u;
  *(_OWORD *)((char *)this + 56488) = 0u;
  *((_DWORD *)this + 14126) = 0;
  *((_WORD *)v8 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 255;
  v8[44] = 0;
  *(_DWORD *)(v8 + 46) = 0;
  *((_WORD *)v8 + 67) = 0;
  *(void *)(v8 + 142) = a3;
  *(void *)(v8 + 15BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a4;
  *(void *)(v8 + 158) = (char *)this + 56636;
  v8[166] = 19;
  *(_OWORD *)((char *)this + 56636) = 0u;
  *(_OWORD *)((char *)this + 56652) = 0u;
  *(_OWORD *)((char *)this + 56668) = 0u;
  *(_OWORD *)((char *)this + 56684) = 0u;
  *(_OWORD *)((char *)this + 56696) = 0u;
  *(void *)(v8 + 246) = BlueFin::GlPeObjFactory::MakePeGridMeasArray((BlueFin::GlPeObjFactory *)BlueFin::GlPeObjFactory::m_potGlPeObjFactory);
  *(_OWORD *)((char *)this + 5652BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 56536) = 0u;
  *(_OWORD *)((char *)this + 56552) = 0u;
  *(_OWORD *)((char *)this + 56568) = 0u;
  *(_OWORD *)((char *)this + 56584) = 0u;
  GlCustomLog(127, "Size,GlPeMsmtMgr,%u\n", 56736);
  GlCustomLog(127, "    ->Size,GlMeas,%u\n", 17536);
  GlCustomLog(127, "    ->Size,stPePropSigMeas,%u\n", 18880);
  GlCustomLog(127, "    ->Size,stPeStoredDoppler,%u\n", 18560);
  GlCustomLog(127, "    ->Size,stPeSigEnv,%u\n", 16);
  GlCustomLog(127, "    ->Size,GlPowerMeas,%u\n", 116);
  return this;
}

uint64_t BlueFin::stPeStoredDoppler::stPeStoredDoppler(uint64_t this)
{
  *(void *)this = &unk_270EC2988;
  *(unsigned char *)(this + 18448) = 19;
  *(_OWORD *)(this + 18468) = 0u;
  *(_OWORD *)(this + 18484) = 0u;
  *(_OWORD *)(this + 1850BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(this + 18516) = 0u;
  *(_DWORD *)(this + 18532) = 0;
  *(_OWORD *)(this + 18452) = 0u;
  *(void *)(this + 18432) = this + 32;
  *(void *)(this + 1844BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = this + 18452;
  uint64_t v1 = (_DWORD *)(this + 56);
  uint64_t v2 = 575;
  do
  {
    *((unsigned char *)v1 - 24) = 0;
    *(v1 - 5) = -1;
    *((_WORD *)v1 - 8) = 575;
    *((_WORD *)v1 - 6) = 0;
    *((void *)v1 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
    *uint64_t v1 = 0;
    v1 += 8;
    --v2;
  }
  while (v2);
  return this;
}

BlueFin::stPePropSigMeas *BlueFin::stPePropSigMeas::stPePropSigMeas(BlueFin::stPePropSigMeas *this)
{
  PropSigMeasArray = BlueFin::GlPeObjFactory::MakePropSigMeasArray((BlueFin::GlPeObjFactory *)BlueFin::GlPeObjFactory::m_potGlPeObjFactory);
  *(_OWORD *)((char *)this + 1188) = 0u;
  *(_OWORD *)((char *)this + 1204) = 0u;
  *(_OWORD *)((char *)this + 122BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 1172) = 0u;
  *(void *)this = PropSigMeasArray;
  *((void *)this + 145) = (char *)this + 1172;
  *((unsigned char *)this + 1168) = 19;
  *((_OWORD *)this + 77) = 0u;
  BlueFin::GlMeas::GlMeas((uint64_t)this + 1248);
  *((unsigned char *)this + 18792) = 19;
  *(_OWORD *)((char *)this + 18812) = 0u;
  *(_OWORD *)((char *)this + 18828) = 0u;
  *(_OWORD *)((char *)this + 18844) = 0u;
  *(_OWORD *)((char *)this + 18856) = 0u;
  *(_OWORD *)((char *)this + 18796) = 0u;
  *((void *)this + 2348) = (char *)this + 18796;
  bzero((char *)this + 8, 0x47EuLL);
  return this;
}

unsigned __int16 *BlueFin::GlPeObjFactory::MakePropSigMeasArray(BlueFin::GlPeObjFactory *this)
{
  Memory = (unsigned __int16 *)BlueFin::GlMemAlloc::glAllocateMemory(55, 1192, *(uint64_t (**)(uint64_t))this);
  if (!Memory) {
    return (unsigned __int16 *)*((void *)this + 7);
  }
  int v3 = Memory;
  unsigned int v4 = *((_DWORD *)this + 4) + 1;
  *((void *)this + 8) = BlueFin::GlMemAlloc::glAllocateMemory(56, 144 * v4, *(uint64_t (**)(uint64_t))this);
  int v5 = (unsigned __int16 *)BlueFin::GlMemAlloc::glAllocateMemory(57, 2 * v4, *(uint64_t (**)(uint64_t))this);
  *((void *)this + 9) = v5;
  BlueFin::GlBigArray::GlBigArray((BlueFin::GlBigArray *)(v3 + 576), *((void **)this + 8), 144, 0, v3, 0x23Fu, v5, v4);
  *((void *)this + 7) = v3;
  return v3;
}

unsigned __int16 *BlueFin::GlPeObjFactory::MakeMePeSigMeasArray(BlueFin::GlPeObjFactory *this)
{
  Memory = (unsigned __int16 *)BlueFin::GlMemAlloc::glAllocateMemory(52, 1192, *(uint64_t (**)(uint64_t))this);
  if (!Memory) {
    return (unsigned __int16 *)*((void *)this + 4);
  }
  int v3 = Memory;
  unsigned int v4 = *((_DWORD *)this + 4) + 1;
  *((void *)this + 5) = BlueFin::GlMemAlloc::glAllocateMemory(53, 456 * v4, *(uint64_t (**)(uint64_t))this);
  int v5 = (unsigned __int16 *)BlueFin::GlMemAlloc::glAllocateMemory(54, 2 * v4, *(uint64_t (**)(uint64_t))this);
  *((void *)this + 6) = v5;
  BlueFin::GlBigArray::GlBigArray((BlueFin::GlBigArray *)(v3 + 576), *((void **)this + 5), 456, 0, v3, 0x23Fu, v5, v4);
  *((void *)this + 4) = v3;
  return v3;
}

unsigned __int16 *BlueFin::GlPeObjFactory::MakePeGridMeasArray(BlueFin::GlPeObjFactory *this)
{
  Memory = (unsigned __int16 *)BlueFin::GlMemAlloc::glAllocateMemory(68, 1192, *(uint64_t (**)(uint64_t))this);
  if (!Memory) {
    return (unsigned __int16 *)*((void *)this + 21);
  }
  int v3 = Memory;
  unsigned int v4 = *((_DWORD *)this + 4) + 1;
  *((void *)this + 22) = BlueFin::GlMemAlloc::glAllocateMemory(69, 208 * v4, *(uint64_t (**)(uint64_t))this);
  int v5 = (unsigned __int16 *)BlueFin::GlMemAlloc::glAllocateMemory(70, 2 * v4, *(uint64_t (**)(uint64_t))this);
  *((void *)this + 23) = v5;
  BlueFin::GlBigArray::GlBigArray((BlueFin::GlBigArray *)(v3 + 576), *((void **)this + 22), 208, 0, v3, 0x23Fu, v5, v4);
  *((void *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v3;
  return v3;
}

uint64_t BlueFin::GlPeAsstMgr::SetAidMask(_OWORD *a1, int a2, unsigned int *a3)
{
  int v6 = 0;
  int v36 = a1 + 2136;
  int v34 = (_OWORD **)a1 + 14987;
  float v35 = a1 + 468;
  int v7 = a1 + 24;
  do
  {
    Mgr = BlueFin::GlPeGnssEphemerisMgr::GetMgr(v7, v6);
    if (Mgr) {
      (*(void (**)(void *, void))(*Mgr + 248))(Mgr, 0);
    }
    ++v6;
  }
  while (v6 != 7);
  *int v36 = 0;
  *float v35 = 0;
  if (a2)
  {
    uint64_t v9 = 0;
    unsigned int v10 = a1 + 2132;
    uint64_t v11 = a1 + 464;
    float v12 = a3;
    do
    {
      uint64_t v13 = *v12;
      uint64_t v14 = "GL_AID_SOURCE_unknown";
      if ((int)v13 <= 4) {
        uint64_t v14 = BlueFin::AidSourceName[v13];
      }
      uint64_t v15 = &a3[714 * v9];
      uint64_t result = GlCustomLog(15, "SetAidMask(%s %d)\n", v14, *((unsigned __int8 *)v15 + 4));
      if (*((unsigned char *)v15 + 4))
      {
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        if (*((unsigned char *)v12 + 4))
        {
          uint64_t v17 = (unsigned __int8 *)(v12 + 2);
          unint64_t v18 = (unint64_t)&v12[4 * *((unsigned __int8 *)v12 + 4) + 2];
          do
          {
            char v19 = v17[1] - 1;
            unsigned int v20 = *v17;
            v17 += 16;
            *((void *)&v37 + v20) |= 1 << v19;
          }
          while ((unint64_t)v17 < v18);
        }
        switch(*v12)
        {
          case 0u:
            for (uint64_t i = 0; i != 7; ++i)
            {
              uint64_t result = (uint64_t)BlueFin::GlPeGnssEphemerisMgr::GetMgr(v7, i);
              if (result) {
                uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)result + 248))(result, *((void *)&v37 + BlueFin::GlImplGnss::m_aucEnabledGnssTable[i]));
              }
            }
            break;
          case 1u:
            uint64_t v22 = 0;
            *int v36 = 0;
            long long v23 = v38;
            *unsigned int v10 = v37;
            a1[2133] = v23;
            long long v24 = v40;
            a1[2134] = v39;
            a1[2135] = v24;
            do
            {
              if (*(void *)((char *)v10 + v22))
              {
                __int16 v31 = v36;
                goto LABEL_33;
              }
              v22 += 8;
            }
            while (v22 != 64);
            break;
          case 2u:
            uint64_t v25 = 0;
            *float v35 = 0;
            long long v26 = v38;
            _OWORD *v11 = v37;
            a1[465] = v26;
            long long v27 = v40;
            a1[466] = v39;
            a1[467] = v27;
            do
            {
              if (*(void *)((char *)v11 + v25))
              {
                __int16 v31 = v35;
                goto LABEL_33;
              }
              v25 += 8;
            }
            while (v25 != 64);
            break;
          case 4u:
            uint64_t v28 = 0;
            int v29 = *v34;
            __int16 v30 = *v34;
            *((unsigned char *)v30 + 64) = 0;
            __int16 v31 = v30 + 4;
            long long v32 = v38;
            *int v29 = v37;
            v29[1] = v32;
            long long v33 = v40;
            void v29[2] = v39;
            v29[3] = v33;
            while (!*(void *)((char *)v29 + v28))
            {
              v28 += 8;
              if (v28 == 64) {
                goto LABEL_34;
              }
            }
LABEL_33:
            *__int16 v31 = 1;
            break;
          default:
            break;
        }
      }
LABEL_34:
      ++v9;
      float v12 = &a3[714 * v9];
    }
    while (v9 != 5);
  }
  else
  {
    return GlCustomLog(15, "SetAidMask(0)\n");
  }
  return result;
}

uint64_t BlueFin::GlPeEphemerisMgr::SetAidMask(uint64_t this, int a2)
{
  *(_DWORD *)(this + 528) = a2;
  return this;
}

uint64_t BlueFin::GlPePpsGen::SetPpsSettings(BlueFin::GlPePpsGen *this, int a2, uint64_t a3, int a4, uint64_t a5, unsigned int a6)
{
  *((unsigned char *)this + 56) = a2;
  *((double *)this + 8) = (double)a4 * 0.000001;
  *((double *)this + 9) = (double)a6 * 0.001;
  uint64_t result = *((void *)this + 6);
  if (result) {
    BOOL v7 = a2 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, void))(*(void *)result + 672))(result, 1, a3, 0, a5, 0);
  }
  return result;
}

double BlueFin::GlPeOscMgr::GlPeOscMgr(BlueFin::GlPeOscMgr *this, double a2, BlueFin::GlPeTimeManager *a3)
{
  *((_DWORD *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *((unsigned char *)this + 8) = 0;
  double v3 = a2 * 1000000000.0;
  if (v3 > 0.0)
  {
    double v4 = 0.5;
LABEL_6:
    int v5 = (int)(v3 + v4);
    goto LABEL_7;
  }
  if (v3 < 0.0)
  {
    double v4 = -0.5;
    goto LABEL_6;
  }
  LOWORD(v5) = 0;
LABEL_7:
  *((_WORD *)this + 6) = v5;
  *((void *)this + 2) = a3;
  *((_WORD *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *((_WORD *)this + 5) = v5;
  *((unsigned char *)this + 14) = 0;
  *(unsigned char *)this = 0;
  *(void *)&double result = 4287767295;
  *((void *)this + 5) = 4287767295;
  *((_WORD *)this + 12) = 0;
  *((_DWORD *)this + 7) = 0;
  *((unsigned char *)this + 49) = 0;
  return result;
}

BlueFin::GlDbgCodec *BlueFin::GlDbgRequest::SetOnResponse(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 64) = a2;
  double v3 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (v3)
  {
    BlueFin::GlDbgCodec::WriteStart(v3, 3078);
    double v4 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    int v9 = BlueFin::GlDbgRequest::Id((BlueFin::GlDbgRequest *)a1, 0);
    BlueFin::GlDbgCodec::Write(v4, (unsigned int *)&v9);
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  }
  (*(void (**)(void, uint64_t (*)(uint64_t, uint64_t)))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24), BlueFin::GlDbgProxyGlReqOnResponse);
  double result = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (result)
  {
    BlueFin::GlDbgCodec::WriteFinal(result, 3078);
    int v6 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    int v8 = BlueFin::GlDbgRequest::Id((BlueFin::GlDbgRequest *)a1, 0);
    BlueFin::GlDbgCodec::Write(v6, (unsigned int *)&v8);
    BOOL v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return (BlueFin::GlDbgCodec *)v7();
  }
  return result;
}

uint64_t BlueFin::GlRequestImpl::SetOnResponse(uint64_t result, uint64_t a2)
{
  *(void *)(result + 48) = a2;
  return result;
}

uint64_t BlueFin::GlMeSrdCtrlSm::GlMeSrdCtrlSm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = "STARTING";
  *(void *)(a1 + 24) = "OFF";
  *(void *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 73) = 0u;
  *(void *)a1 = &unk_270EBC288;
  *(unsigned char *)(a1 + 108) = 0;
  *(void *)(a1 + 112) = a5;
  *(void *)(a1 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 128) = a7;
  *(void *)(a1 + 136) = a6;
  *(void *)(a1 + 144) = a8;
  *(void *)(a1 + 152) = a4;
  *(void *)(a1 + 16BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a2;
  *(void *)(a1 + 168) = a9;
  *(void *)(a1 + 176) = a11;
  *(void *)(a1 + 184) = a10;
  *(void *)(a1 + 192) = a12;
  *(void *)(a1 + 20BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a14;
  *(void *)(a1 + 208) = a3;
  *(void *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 228) = 0;
  *(unsigned char *)(a1 + 232) = 0;
  *(void *)(a1 + 24BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(unsigned char *)(a1 + 248) = 0;
  uint64_t v20 = a1 + 256;
  *(unsigned char *)(a1 + 224) = 0;
  *(void *)(a1 + 256) = &unk_270EBC320;
  *(void *)(a1 + 264) = a1;
  uint64_t v21 = a1 + 304;
  *(void *)(a1 + 304) = &unk_270EBC3A8;
  *(void *)(a1 + 312) = a1;
  BlueFin::GlMeSignalAidInfo::GlMeSignalAidInfo(a1 + 1600, 0xA0u, a1 + 320);
  *(void *)(a1 + 1648) = a1 + 1632;
  *(void *)(a1 + 1656) = 0;
  *(void *)(a1 + 1672) = 0;
  *(void *)(a1 + 1664) = 0;
  *(_DWORD *)(a1 + 1679) = 0;
  *(void *)(a1 + 1728) = 0;
  *(_OWORD *)(a1 + 1688) = 0u;
  *(_OWORD *)(a1 + 1704) = 0u;
  *(_DWORD *)(a1 + 1719) = 0;
  BlueFin::GlMeSrdAsicinit::GlMeSrdAsicinit(a1 + 1760, v20, a5, a6, a8, a1 + 3392);
  BlueFin::GlMeSrdSyncIn::GlMeSrdSyncIn(a1 + 2560, a5, a2, a8);
  BlueFin::GlMeSrdCntIn::GlMeSrdCntIn(a1 + 2816, a5, a2, a8, a6);
  BlueFin::GlMeSrdMeasTimingMgr::GlMeSrdMeasTimingMgr(a1 + 3072, a8, a5, a6);
  BlueFin::GlMeSrdEvtCtrl::GlMeSrdEvtCtrl(a1 + 3392, v21, a6);
  uint64_t v22 = 0;
  *(void *)(a1 + 3904) = &unk_270EBC2A8;
  *(void *)(a1 + 3912) = a1;
  *(void *)(a1 + 4064) = a1 + 3936;
  *(_DWORD *)(a1 + 4072) = 0;
  do
  {
    *(void *)(*(void *)(a1 + 4064) + v22) = 0;
    v22 += 8;
  }
  while (v22 != 128);
  *(void *)(a1 + 4096) = &unk_270EBC430;
  *(void *)(a1 + 4104) = a1;
  *(void *)(a1 + 4112) = &unk_270EBC2D8;
  *(void *)(a1 + 412BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1;
  bzero((void *)(a1 + 4128), 0x47EuLL);
  *(unsigned char *)(a1 + 528BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 5284) = 0;
  *(void *)(a1 + 5296) = a6;
  *(_WORD *)(a1 + 5304) = 0;
  *(void *)(a1 + 5312) = a6;
  *(void *)(a1 + 532BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = &unk_270EBC4C8;
  *(void *)(a1 + 5328) = a1;
  *(void *)(a1 + 5336) = 0;
  *(_WORD *)(a1 + 5344) = 0;
  *(_OWORD *)(a1 + 5352) = 0u;
  *(_OWORD *)(a1 + 5368) = 0u;
  *(_OWORD *)(a1 + 5384) = 0u;
  *(_DWORD *)(a1 + 540BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 5408) = &unk_270EBC480;
  *(void *)(a1 + 5416) = 0;
  *(_DWORD *)(a1 + 5424) = 0;
  *(unsigned char *)(a1 + 5428) = 0;
  *(_DWORD *)(a1 + 543BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_DWORD *)(a1 + 544BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_DWORD *)(a1 + 5572) = 0;
  *(unsigned char *)(a1 + 5576) = 0;
  *(_DWORD *)(a1 + 3450BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_WORD *)(a1 + 34504) = 0;
  *(unsigned char *)(a1 + 34512) = 0;
  *(_OWORD *)(a1 + 3424BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 34256) = 0u;
  *(_OWORD *)(a1 + 34272) = 0u;
  *(_OWORD *)(a1 + 34288) = 0u;
  *(_OWORD *)(a1 + 34304) = 0u;
  *(_OWORD *)(a1 + 3432BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 34336) = 0u;
  *(_OWORD *)(a1 + 34352) = 0u;
  *(_OWORD *)(a1 + 34368) = 0u;
  *(_OWORD *)(a1 + 34384) = 0u;
  *(_OWORD *)(a1 + 3440BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 34416) = 0u;
  *(_OWORD *)(a1 + 34432) = 0u;
  *(_OWORD *)(a1 + 34448) = 0u;
  *(_OWORD *)(a1 + 34464) = 0u;
  *(_OWORD *)(a1 + 3448BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_DWORD *)(a1 + 34495) = 0;
  *(_DWORD *)(a1 + 34514) = 65537000;
  *(_DWORD *)(a1 + 34518) = 0;
  *(_DWORD *)(a1 + 3452BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *(_OWORD *)(a1 + 34528) = 0u;
  *(unsigned char *)(a1 + 34544) = 0;
  *(_OWORD *)(a1 + 34592) = xmmword_263BACCF0;
  int64x2_t v23 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(unsigned char *)(a1 + 34608) = 0;
  *(int64x2_t *)(a1 + 34616) = v23;
  *(int64x2_t *)(a1 + 34632) = v23;
  *(int64x2_t *)(a1 + 34648) = v23;
  *(_DWORD *)(a1 + 34664) = 0;
  uint64_t v24 = *(void *)(a1 + 1648);
  *(_WORD *)(v24 + 8) = 0;
  *(void *)uint64_t v24 = 0;
  *(unsigned char *)(a1 + 5444) = 0;
  *(_OWORD *)(a1 + 34552) = 0u;
  *(_OWORD *)(a1 + 34568) = 0u;
  *(void *)(a1 + 34584) = 0;
  *(void *)(a1 + 28BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  BlueFin::QHsm::ctor(a1, (uint64_t)BlueFin::GlMeSrdCtrlSm::initial);
  uint64_t v25 = *(void *)(a1 + 1648);
  *(unsigned char *)(a1 + 88) = 12;
  *(void *)(a1 + 48) = v25;
  *(void *)(a1 + 56) = v25 + 10;
  *(void *)(a1 + 64) = v25;
  *(void *)(a1 + 72) = v25;
  *(void *)(a1 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0x1000000000005;
  *(unsigned char *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  BlueFin::QHsm::init(a1, 0);
  BlueFin::GlEventPump::AddActive(*(void *)(a1 + 144), (BlueFin::GlActive *)a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 16))(a3, a1 + 4112);
  (*(void (**)(void, unint64_t (*)(BlueFin::GlMeSrdCtrlSm *, void *), uint64_t))(**(void **)(a1 + 128) + 72))(*(void *)(a1 + 128), BlueFin::GlMeSrdCtrlSm::EswIsIdle, a1);
  return a1;
}

void sub_2639E3CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, BlueFin::GlMeSrdCntIn *a10, BlueFin::GlMeSrdSyncIn *a11, BlueFin::GlMeSrdAsicinit *a12)
{
  BlueFin::GlMeSrdMeasTimingMgr::~GlMeSrdMeasTimingMgr(v12);
  BlueFin::GlMeSrdCntIn::~GlMeSrdCntIn(a10);
  BlueFin::GlMeSrdSyncIn::~GlMeSrdSyncIn(a11);
  BlueFin::GlMeSrdAsicinit::~GlMeSrdAsicinit(a12);
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlMeMafSettingsListener::SetEventsCallback(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void **)(result + 8);
  v2[39] = a2;
  v2[13] = a2;
  v2[1449] = a2;
  return result;
}

uint64_t BlueFin::GlMeSrdMeasTimingMgr::GlMeSrdMeasTimingMgr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = "STARTING";
  *(void *)(a1 + 24) = "OFF";
  *(void *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 73) = 0u;
  *(void *)a1 = &unk_270EBC768;
  *(void *)(a1 + 112) = a2;
  *(void *)(a1 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a3;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = a4;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 176) = a1 + 160;
  *(void *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 207) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 20BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_WORD *)(a1 + 284) = 1000;
  *(unsigned char *)(a1 + 286) = 0;
  *(_DWORD *)(a1 + 308) = 0;
  *(unsigned char *)(a1 + 312) = 0;
  *(_WORD *)(a1 + 314) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(unsigned char *)(a1 + 304) = 0;
  *(void *)(a1 + 16BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_WORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 24BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 268) = 0u;
  BlueFin::QHsm::ctor(a1, (uint64_t)BlueFin::GlMeSrdMeasTimingMgr::initial);
  uint64_t v5 = *(void *)(a1 + 176);
  *(unsigned char *)(a1 + 88) = 11;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v5 + 10;
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 72) = v5;
  *(void *)(a1 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0x1000000000005;
  *(unsigned char *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  BlueFin::QHsm::init(a1, 0);
  BlueFin::GlEventPump::AddActive(*(void *)(a1 + 112), (BlueFin::GlActive *)a1);
  return a1;
}

uint64_t BlueFin::GlMeSrdAsicinit::GlMeSrdAsicinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = "STARTING";
  *(void *)(a1 + 24) = "OFF";
  *(void *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 73) = 0u;
  *(void *)a1 = &unk_270EBC170;
  *(void *)(a1 + 112) = a2;
  *(void *)(a1 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a3;
  *(void *)(a1 + 128) = a4;
  *(void *)(a1 + 136) = a5;
  *(void *)(a1 + 144) = a6;
  *(void *)(a1 + 152) = &unk_270EBC190;
  *(void *)(a1 + 16BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1;
  *(_WORD *)(a1 + 168) = 0;
  *(void *)(a1 + 18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 172) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 228) = 0;
  *(_DWORD *)(a1 + 232) = -1;
  *(_WORD *)(a1 + 236) = 0;
  *(_DWORD *)(a1 + 24BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 248) = 0;
  *(unsigned char *)(a1 + 272) = 0;
  *(void *)(a1 + 276) = 0;
  *(void *)(a1 + 284) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 36BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 44BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 52BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 60BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 612) = 0u;
  *(void *)(a1 + 632) = 0;
  *(void *)(a1 + 648) = a1 + 640;
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 664) = 0;
  *(_DWORD *)(a1 + 679) = 0;
  *(_DWORD *)(a1 + 64BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_WORD *)(a1 + 732) = 0;
  *(unsigned char *)(a1 + 735) = 0;
  *(void *)(a1 + 688) = 0;
  *(_DWORD *)(a1 + 696) = 0;
  *(void *)(a1 + 748) = 0;
  *(void *)(a1 + 756) = 0;
  *(void *)(a1 + 74BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_DWORD *)(a1 + 764) = 0;
  *(_WORD *)(a1 + 736) = 257;
  BlueFin::QHsm::ctor(a1, (uint64_t)BlueFin::GlMeSrdAsicinit::initial);
  uint64_t v7 = *(void *)(a1 + 648);
  *(unsigned char *)(a1 + 88) = 8;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v7 + 4;
  *(void *)(a1 + 64) = v7;
  *(void *)(a1 + 72) = v7;
  *(void *)(a1 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0x1000000000002;
  *(unsigned char *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  BlueFin::QHsm::init(a1, 0);
  BlueFin::GlEventPump::AddActive(*(void *)(a1 + 136), (BlueFin::GlActive *)a1);
  return a1;
}

uint64_t BlueFin::GlMeSrdEvtCtrl::GlMeSrdEvtCtrl(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = "STARTING";
  *(void *)(result + 24) = "OFF";
  *(void *)(result + 32) = 0;
  *(_WORD *)(result + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(result + 96) = 0;
  *(_DWORD *)(result + 104) = 0;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 73) = 0u;
  *(void *)double result = &unk_270EBC718;
  *(void *)(result + 112) = a2;
  *(void *)(result + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a3;
  *(void *)(result + 128) = &unk_270EBE5B8;
  *(_OWORD *)(result + 136) = 0u;
  *(_OWORD *)(result + 152) = 0u;
  *(_DWORD *)(result + 167) = 0;
  *(void *)(result + 184) = 0;
  *(void *)(result + 192) = 0;
  *(void *)(result + 176) = &unk_270EBE5E8;
  *(_DWORD *)(result + 20BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(result + 208) = 0;
  *(void *)(result + 216) = 0;
  *(void *)(result + 456) = result + 448;
  *(void *)(result + 464) = &unk_270EBC6A0;
  *(void *)(result + 472) = result;
  *(void *)(result + 48BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a3;
  *(_DWORD *)(result + 448) = 0;
  *(void *)(result + 336) = 0;
  *(_OWORD *)(result + 304) = 0u;
  *(_OWORD *)(result + 32BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(result + 272) = 0u;
  *(_OWORD *)(result + 288) = 0u;
  *(_OWORD *)(result + 24BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(result + 256) = 0u;
  *(_OWORD *)(result + 224) = 0u;
  do
  {
    uint64_t v4 = result + v3;
    *(void *)(v4 + 352) = 0xBFF0000000000000;
    *(_DWORD *)(v4 + 36BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
    v3 += 16;
  }
  while (v3 != 64);
  *(void *)(result + 416) = 0;
  *(_WORD *)(result + 344) = 0;
  return result;
}

uint64_t BlueFin::GlMeSrdSyncIn::GlMeSrdSyncIn(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = "STARTING";
  *(void *)(a1 + 24) = "OFF";
  *(void *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 73) = 0u;
  *(void *)a1 = &unk_270EBC7E8;
  *(void *)(a1 + 112) = a2;
  *(void *)(a1 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a3;
  *(void *)(a1 + 128) = a4;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 168) = a1 + 160;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 199) = 0;
  *(_WORD *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 16BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  BlueFin::QHsm::ctor(a1, (uint64_t)BlueFin::GlMeSrdSyncIn::initial);
  uint64_t v5 = *(void *)(a1 + 168);
  *(unsigned char *)(a1 + 88) = 10;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v5 + 4;
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 72) = v5;
  *(void *)(a1 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0x1000000000002;
  *(unsigned char *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  BlueFin::QHsm::init(a1, 0);
  BlueFin::GlEventPump::AddActive(*(void *)(a1 + 128), (BlueFin::GlActive *)a1);
  return a1;
}

uint64_t BlueFin::GlMeSrdAcqMgr::SetEswIsIdleCallback(uint64_t this, void (*a2)(void *), void *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(v3 + 10088) = a2;
  *(void *)(v3 + 10096) = a3;
  return this;
}

uint64_t BlueFin::GlMeSrdCntIn::GlMeSrdCntIn(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a1 + 24) = "OFF";
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = "STARTING";
  *(_WORD *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 73) = 0u;
  *(void *)a1 = &unk_270EBC250;
  *(void *)(a1 + 112) = a2;
  *(void *)(a1 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a3;
  *(void *)(a1 + 128) = a4;
  *(void *)(a1 + 136) = a5;
  *(void *)(a1 + 168) = a1 + 160;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 199) = 0;
  *(_DWORD *)(a1 + 16BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(_WORD *)(a1 + 224) = 0;
  BlueFin::QHsm::ctor(a1, (uint64_t)BlueFin::GlMeSrdCntIn::initial);
  uint64_t v6 = *(void *)(a1 + 168);
  *(unsigned char *)(a1 + 88) = 9;
  *(void *)(a1 + 48) = v6;
  *(void *)(a1 + 56) = v6 + 4;
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = v6;
  *(void *)(a1 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0x1000000000002;
  *(unsigned char *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  BlueFin::QHsm::init(a1, 0);
  BlueFin::GlEventPump::AddActive(*(void *)(a1 + 128), (BlueFin::GlActive *)a1);
  return a1;
}

uint64_t BlueFin::GlEventPump::AddActive(uint64_t this, BlueFin::GlActive *a2)
{
  unint64_t v2 = *((unsigned __int8 *)a2 + 88);
  if (v2 >= 0xE)
  {
    uint64_t v3 = "a->myPrio < _DIM(pkgActive)";
    DeviceFaultNotify("glhsm_eventpump.cpp", 66, "AddActive", (char)"a->myPrio < _DIM(pkgActive)");
    int v4 = 66;
    goto LABEL_6;
  }
  if (*(void *)(this + 8 * v2))
  {
    uint64_t v3 = "pkgActive[ a->myPrio ] == nullptr";
    DeviceFaultNotify("glhsm_eventpump.cpp", 68, "AddActive", (char)"pkgActive[ a->myPrio ] == nullptr");
    int v4 = 68;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glhsm_eventpump.cpp", v4, v3);
  }
  *(void *)(this + 8 * v2) = a2;
  return this;
}

BOOL BlueFin::GlPeRtiRequestor::OnRtiFromNvMem(BlueFin::GlPeRtiRequestor *this, const BlueFin::GlPeRtiData *a2, int a3)
{
  BOOL v4 = BlueFin::GlPeRtiRequestHelper::OnRtiFromNvMem((uint64_t)this + 32, (uint64_t)a2, a3);
  if (v4 && *((unsigned char *)this + 56)) {
    BlueFin::GlPeRtiRequestor::onRtiAccepted(this);
  }
  return v4;
}

BOOL BlueFin::GlPeRtiRequestHelper::OnRtiFromNvMem(uint64_t a1, uint64_t a2, int a3)
{
  if (*(unsigned char *)(a1 + 10)) {
    return 0;
  }
  *(unsigned char *)(a1 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
  if (a3 == -1
    || (int v3 = *(_DWORD *)(a2 + 144), __CFADD__(v3, a3))
    || (unsigned int v4 = v3 + a3, *(unsigned char *)(a1 + 24)) && v4 >= *(_DWORD *)(a1 + 176))
  {
    int v11 = 0;
  }
  else
  {
    *(_OWORD *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_OWORD *)(a2 + 8);
    long long v5 = *(_OWORD *)(a2 + 24);
    long long v6 = *(_OWORD *)(a2 + 40);
    long long v7 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v7;
    *(_OWORD *)(a1 + 72) = v6;
    *(_OWORD *)(a1 + 56) = v5;
    long long v8 = *(_OWORD *)(a2 + 88);
    long long v9 = *(_OWORD *)(a2 + 104);
    long long v10 = *(_OWORD *)(a2 + 120);
    *(void *)(a1 + 168) = *(void *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v10;
    *(_OWORD *)(a1 + 136) = v9;
    *(_OWORD *)(a1 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v8;
    *(_DWORD *)(a1 + 176) = v4;
    int v11 = 1;
    *(unsigned char *)(a1 + 24) = 1;
  }
  *(unsigned char *)(a1 + 9) = 1;
  if (!*(unsigned char *)(a1 + 24) || *(_DWORD *)(a1 + 176) >= *(_DWORD *)(a1 + 184)) {
    *(unsigned char *)(a1 + 8) = 1;
  }
  return v11 && *(unsigned char *)(a1 + 8) == 0;
}

uint64_t BlueFin::GlPeMsmtMgr::SetStrdDopps(BlueFin::GlPeMsmtMgr *this, const BlueFin::stPeStoredDoppler *a2)
{
  BlueFin::stPeStoredDoppler::operator=((uint64_t)this + 19232, (uint64_t)a2);
  uint64_t result = BlueFin::GlSetBase::Cnt((BlueFin::GlPeMsmtMgr *)((char *)this + 37672));
  if (!result) {
    *((unsigned char *)this + 1920BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  }
  return result;
}

uint64_t BlueFin::stPeStoredDoppler::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 18440;
  uint64_t v5 = BlueFin::GlSetBase::operator=(a1 + 18440, a2 + 18440);
  uint64_t v6 = 0;
  *(_OWORD *)(v5 + 12) = *(_OWORD *)(v4 + 12);
  long long v7 = *(_OWORD *)(v4 + 28);
  long long v8 = *(_OWORD *)(v4 + 44);
  long long v9 = *(_OWORD *)(v4 + 60);
  *(_OWORD *)(a1 + 18512) = *(_OWORD *)(a2 + 18512);
  *(_OWORD *)(v5 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v9;
  *(_OWORD *)(v5 + 44) = v8;
  *(_OWORD *)(v5 + 28) = v7;
  *(void *)(a1 + 18528) = *(void *)(a2 + 18528);
  uint64_t v10 = *(void *)(a2 + 18432);
  uint64_t v11 = *(void *)(a1 + 18432);
  uint64_t v12 = 575;
  do
  {
    if (v11 != v10)
    {
      uint64_t v13 = v11 + v6;
      *(unsigned char *)uint64_t v13 = *(unsigned char *)(v10 + v6);
      *(_DWORD *)(v13 + 4) = *(_DWORD *)(v10 + v6 + 4);
      *(_WORD *)(v13 + 8) = *(_WORD *)(v10 + v6 + 8);
    }
    uint64_t v14 = v11 + v6;
    *(_WORD *)(v14 + 12) = *(_WORD *)(v10 + v6 + 12);
    *(void *)(v14 + 16) = *(void *)(v10 + v6 + 16);
    *(_DWORD *)(v14 + 24) = *(_DWORD *)(v10 + v6 + 24);
    v6 += 32;
    --v12;
  }
  while (v12);
  return a1;
}

#error "2639E54F4: call analysis failed (funcsize=2170)"

uint64_t BlueFin::GlSettingsImpl::IsGpsMeasurementEngineDisabled(BlueFin::GlSettingsImpl *this)
{
  return *((unsigned __int8 *)this + 896);
}

void BlueFin::GlPeKF::SetAsstPos(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a1 + 92360;
  uint64_t v5 = (BlueFin::stTimeOfAsstPos *)(a2 + 7);
  unsigned int AgeS = BlueFin::stTimeOfAsstPos::GetAgeS((BlueFin::stTimeOfAsstPos *)(a2 + 7), *(BlueFin::GlPeTimeManager **)(a1 + 92376));
  BlueFin::stTimeOfAsstPos::GetTime(v5, *(BlueFin::GlPeTimeManager **)(v4 + 16), (uint64_t)v28);
  BlueFin::GlPeTimeManager::GetTime(*(BlueFin::GlPeTimeManager **)(v4 + 16), 1, v25);
  long long v26 = &off_270EBC600;
  unint64_t v27 = 0;
  BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v25, (BlueFin::GlGpsTime *)&v26);
  unsigned int v7 = v27;
  unsigned int v8 = HIDWORD(v27);
  unsigned int v10 = *(_DWORD *)(a1 + 144);
  unsigned int v9 = *(_DWORD *)(a1 + 148);
  if (*(void *)(a1 + 144))
  {
    unsigned int v11 = HIDWORD(v27) - v9;
    if (v27 < __PAIR64__(v9, v10))
    {
      unsigned int v8 = (__PAIR64__(v9 - HIDWORD(v27), v10) - v27) >> 32;
      unsigned int v7 = v10 - v27;
      char v12 = 1;
    }
    else
    {
      char v12 = 0;
      unsigned int v8 = (__PAIR64__(v11, v27) - v10) >> 32;
      unsigned int v7 = v27 - v10;
    }
  }
  else
  {
    char v12 = 0;
  }
  if ((v12 & ((v8 | v7) != 0)) != 0) {
    double v13 = -((double)v7 * 2.32830644e-10 + (double)v8);
  }
  else {
    double v13 = (double)v7 * 2.32830644e-10 + (double)v8;
  }
  double v14 = fmod(v13, 4294967300.0);
  if (v13 <= 4294967300.0) {
    double v14 = v13;
  }
  if (v14 < -4294967300.0) {
    double v14 = -fmod(-v14, 4294967300.0);
  }
  if (v14 < 0.0) {
    unsigned int v15 = --v14;
  }
  else {
    unsigned int v15 = v14;
  }
  if (*(_DWORD *)(a1 + 160) != 1 || v15 >= 0x259)
  {
    if (AgeS <= 0xE0F)
    {
      if (*((unsigned char *)a2 + 48))
      {
        *(unsigned char *)(v4 + 536) = 0;
      }
      else if (*((_DWORD *)a2 + 11) == 2)
      {
        *(unsigned char *)(v4 + 537) = 1;
      }
    }
    uint64_t v16 = *a2;
    *(void *)(a1 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *a2;
    uint64_t v17 = a2[1];
    *(void *)(a1 + 88) = v17;
    uint64_t v18 = a2[2];
    *(void *)(a1 + 96) = v18;
    float v19 = *((double *)a2 + 3);
    if (v19 < 3000.0) {
      float v19 = 3000.0;
    }
    *(float *)(a1 + 104) = v19;
    if (v19 >= 100000.0)
    {
      int v20 = 0;
      int v21 = *((_DWORD *)a2 + 11);
      if (v21 == 1) {
        int v21 = 2;
      }
    }
    else
    {
      if (AgeS < 0xE10) {
        int v20 = 1;
      }
      else {
        int v20 = 3;
      }
      int v21 = *((_DWORD *)a2 + 11);
    }
    *(_DWORD *)(a1 + 152) = v20;
    *(_DWORD *)(a1 + 16BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v21;
    *(void *)(a1 + 144) = v29;
    *(_DWORD *)(a1 + 156) = *((_DWORD *)a2 + 10);
    *(void *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v16;
    *(void *)(a1 + 48) = v17;
    *(void *)(a1 + 56) = v18;
    float v22 = *((double *)a2 + 4);
    if (v22 > 100.0) {
      float v22 = 100.0;
    }
    *(float *)(a1 + 64) = v22;
    int v23 = *((_DWORD *)a2 + 11);
    *(_DWORD *)(a1 + 72) = v23;
    if (v23 == 2)
    {
      BlueFin::GlPeKF::AdjustAltSigmaForSimulation(a1);
      int v20 = *(_DWORD *)(a1 + 152);
    }
    *(unsigned char *)(a1 + 1086) = v20 != 1;
    int v24 = *(_DWORD *)(*(void *)v4 + 40);
    *(unsigned char *)(a1 + 1098) = v24 == 2;
    *(unsigned char *)(a1 + 109BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v24 == 3;
  }
}

uint64_t BlueFin::GlPeAsstPosMgr::Deserialize(BlueFin::GlPeTimeManager **this, BlueFin::GlSysLogEntry *a2, int a3, unsigned int a4)
{
  uint64_t v16 = &unk_270EBF9E0;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v19 = 0;
  int v20 = &off_270EBC600;
  long long v21 = xmmword_263BB3BC0;
  unsigned __int8 v22 = 0;
  if ((BlueFin::GlPeAsstPosData::Deserialize((BlueFin::GlPeAsstPosData *)&v16, a2) & 1) == 0)
  {
    DeviceFaultNotify("glpe_asstposmgr.cpp", 601, "Deserialize", (char)"otAsstPosData.Deserialize(rtEntry)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_asstposmgr.cpp", 601, "otAsstPosData.Deserialize(rtEntry)");
  }
  BlueFin::stTimeOfAsstPos::stTimeOfAsstPos((BlueFin::stTimeOfAsstPos *)v15, this[37], (const BlueFin::GlGpsTime *)&v20, 0);
  if (a3 && !*((unsigned char *)this + 313))
  {
    GlCustomLog(14, "GlPeAsstPosMgr:: Calling addRandomPosError from Deserialize\n");
    unsigned int v8 = &unk_270EBF9E0;
    long long v9 = v17;
    long long v10 = v18;
    uint64_t v11 = v19;
    char v12 = &off_270EBC600;
    long long v13 = v21;
    unsigned __int8 v14 = v22;
    return BlueFin::GlPeAsstPosMgr::addRandomPosError((uint64_t)this, (uint64_t)&v8, a4, 1);
  }
  else
  {
    if (a4)
    {
      BlueFin::stTimeOfAsstPos::operator+=((uint64_t)v15, -(double)a4);
      GlCustomLog(14, "GlPeAsstPosMgr::processAssistance - forced age %u seconds\n", a4);
    }
    return BlueFin::GlPeAsstPosMgr::processAssistance((uint64_t)this, &v17, SDWORD2(v21), SHIDWORD(v21), (BlueFin::stTimeOfAsstPos *)v15, 1, v22);
  }
}

BOOL BlueFin::GlPeAsstPosMgr::processAssistance(uint64_t a1, long long *a2, int a3, int a4, BlueFin::stTimeOfAsstPos *this, char a6, int a7)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  memset(v49, 0, sizeof(v49));
  int v53 = 0;
  unint64_t v54 = 0xC15B773FC0000000;
  char v55 = &off_270EBC600;
  uint64_t v56 = 0;
  long long v57 = 0u;
  memset(v58, 0, sizeof(v58));
  if (v49 == (unsigned char *)a2)
  {
    *(void *)&long long v10 = 0;
  }
  else
  {
    *(void *)&v49[16] = *((void *)a2 + 2);
    *(_OWORD *)double v49 = *a2;
    long long v10 = *(long long *)((char *)a2 + 24);
    *(_OWORD *)&v49[24] = v10;
  }
  int v50 = a3;
  int v51 = a4;
  char v52 = a6;
  if (&v53 != (int *)this)
  {
    int v53 = *(_DWORD *)this;
    uint64_t v11 = *((void *)this + 3);
    unint64_t v54 = *((void *)this + 1);
    uint64_t v56 = v11;
  }
  char v59 = a7;
  if (a4 == 2 && (a6 & 1) == 0)
  {
    long long v67 = 0u;
    long long v68 = 0u;
    int v66 = &unk_270EBF9E0;
    uint64_t v71 = 0;
    uint64_t v69 = 0;
    uint64_t v70 = &off_270EBC600;
    char v74 = 0;
    if (&v67 != a2)
    {
      long long v12 = a2[1];
      long long v67 = *a2;
      long long v68 = v12;
      uint64_t v69 = *((void *)a2 + 4);
    }
    int v72 = a3;
    int v73 = 2;
    BlueFin::stTimeOfAsstPos::GetTime(this, *(BlueFin::GlPeTimeManager **)(a1 + 296), (uint64_t)&v60);
    uint64_t v71 = *((void *)&v60 + 1);
    char v74 = a7;
    if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
      (*((void (**)(void **, void, void))v66 + 3))(&v66, 0, 0);
    }
    *(void *)&long long v10 = *(void *)&v49[24];
  }
  if (*(_DWORD *)(*(void *)(a1 + 296) + 2568) == -7200001) {
    int v13 = 0;
  }
  else {
    int v13 = *(_DWORD *)(*(void *)(a1 + 296) + 2568);
  }
  if (*(double *)&v10 <= 0.0)
  {
    *(void *)&v49[24] = 0x40A7700000000000;
    GlCustomLog(12, "GlPeAsstPosMgr(%u): New position: Warning: Using default horizontal accuracy (%.1lfkm)\n", v13, 3.0);
  }
  if (*(double *)&v49[32] <= 0.0)
  {
    *(void *)&v49[32] = 0x4072C00000000000;
    GlCustomLog(12, "GlPeAsstPosMgr(%u): New position: Warning: Using default vertical accuracy (%.1lfkm)\n", v13, 0.3);
  }
  int AgeS = BlueFin::stTimeOfAsstPos::GetAgeS((BlueFin::stTimeOfAsstPos *)&v53, *(BlueFin::GlPeTimeManager **)(a1 + 296));
  int v16 = AgeS;
  double v17 = *(double *)&v49[24];
  if (AgeS != -1)
  {
    double v18 = *(double *)&v49[24] + (double)(25 * AgeS);
    *(double *)&v49[24] = v18;
    double v17 = 540000.0;
    if (v18 <= 540000.0)
    {
      double v17 = v18;
    }
    else
    {
      GlCustomLog(13, "GlPeAsstPosMgr(%u): New position: Aged HorAcc (%.1lfkm) being capped at %dkm\n", v13, v18 * 0.001, 540);
      *(void *)&v49[24] = 0x41207AC000000000;
    }
    double v19 = *(double *)&v49[32] + (double)(5 * v16);
    *(double *)&v49[32] = v19;
    if (v19 > 30000.0)
    {
      GlCustomLog(13, "GlPeAsstPosMgr(%u): New position: Aged VerAcc (%.1lfkm) being capped at %dkm\n", v13, v19 * 0.001, 30);
      *(void *)&v49[32] = 0x40DD4C0000000000;
      double v17 = *(double *)&v49[24];
    }
  }
  *(_OWORD *)((char *)v58 + 8) = *(_OWORD *)v49;
  *((void *)&v58[1] + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *(void *)&v49[16];
  int v20 = v51;
  BOOL v22 = v17 >= 400.0 || v51 != 1;
  int v23 = *(_DWORD *)(a1 + 44);
  BOOL v24 = 1;
  if (v23 != -1 && v22) {
    BOOL v24 = v17 <= *(double *)(a1 + 24);
  }
  if (v51 == 2 && (a6 & 1) == 0)
  {
    BlueFin::stProcessedAsstPos::operator=(a1 + 144, (uint64_t)v49);
    int v23 = *(_DWORD *)(a1 + 44);
  }
  if (v24)
  {
    if (v23 == -1)
    {
      long long v37 = "Accepted because this is the first position into the manager";
    }
    else
    {
      if (v23 == 2)
      {
        char v25 = !v22;
        if (v20 == 2) {
          char v25 = 1;
        }
        if ((v25 & 1) == 0)
        {
          BlueFin::lla2ned((double *)(a1 + 112), (double *)v58 + 1, 0, (double *)&v60);
          double v27 = sqrt(*(double *)&v60 * *(double *)&v60 + *((double *)&v60 + 1) * *((double *)&v60 + 1));
          double v28 = *(double *)(a1 + 24);
          uint64_t v29 = "Rejected";
          BOOL v30 = *(double *)&v49[24] + v27 <= v28;
          if (*(double *)&v49[24] + v27 <= v28) {
            uint64_t v29 = "Accepted";
          }
          __int16 v31 = "outside";
          if (*(double *)&v49[24] + v27 <= v28) {
            __int16 v31 = "within";
          }
          BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)&v66, (char *)0x78, "%s because new region is %s current AGNSS region (HorzDelta:%.1lfkm, CurHorAcc:%.1lfkm)", v26, v29, v31, v27 * 0.001, v28 * 0.001);
          goto LABEL_64;
        }
      }
      if (v22)
      {
        BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)&v66, (char *)0x78, "Accepted because the HorAcc <= current HorAcc (%.1lfkm)", v15, *(double *)(a1 + 24) * 0.001);
LABEL_63:
        BOOL v30 = 1;
        goto LABEL_64;
      }
      long long v37 = "Accepted because position is from KF and HorAcc < 400m";
    }
    BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)&v66, (char *)0x78, (unsigned __int8 *)v37, v15);
    goto LABEL_63;
  }
  if (v20 != 2 || v23 == 2)
  {
    BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)&v66, (char *)0x78, "Rejected because new HorAcc is not improved over current HorAcc (%.1lfkm)", v15, *(double *)(a1 + 24) * 0.001);
    BOOL v30 = 0;
  }
  else
  {
    BlueFin::lla2ned((double *)(a1 + 112), (double *)v58 + 1, 0, (double *)&v60);
    double v33 = sqrt(*(double *)&v60 * *(double *)&v60 + *((double *)&v60 + 1) * *((double *)&v60 + 1));
    double v34 = *(double *)(a1 + 24);
    float v35 = "Rejected";
    BOOL v30 = v34 + v33 > *(double *)&v49[24];
    if (v34 + v33 > *(double *)&v49[24]) {
      float v35 = "Accepted";
    }
    int v36 = "within";
    if (v34 + v33 > *(double *)&v49[24]) {
      int v36 = "outside";
    }
    BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)&v66, (char *)0x78, "%s because current region is %s new AGNSS region (HorzDelta:%.1lfkm, CurHorAcc:%.1lfkm)", v32, v35, v36, v33 * 0.001, v34 * 0.001);
  }
LABEL_64:
  if (*(_DWORD *)(*(void *)(a1 + 296) + 2568) == -7200001) {
    int v38 = 0;
  }
  else {
    int v38 = *(_DWORD *)(*(void *)(a1 + 296) + 2568);
  }
  GlCustomLog(14, "GlPeAsstPosMgr(%u): New position: LLA:[%+.5lf %+.5lf %.0lf]  HorzUnc:%.1lfkm  VertUnc:%.1lfkm\n", v38, *(double *)v49, *(double *)&v49[8], *(double *)&v49[16], *(double *)&v49[24] * 0.001, *(double *)&v49[32] * 0.001);
  uint64_t v64 = &off_270EBC600;
  uint64_t v65 = 0;
  if (v53 == 1)
  {
    uint64_t v39 = v56;
  }
  else
  {
    long long v40 = *(unsigned int **)(a1 + 296);
    if (!v40[644]) {
      goto LABEL_72;
    }
    BlueFin::GlPeTimeManager::GetTime(v40, -7199999.0, 1, (uint64_t)&v60);
    unsigned __int8 v62 = &off_270EBC600;
    uint64_t v63 = 0;
    BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)&v60, (BlueFin::GlGpsTime *)&v62);
    uint64_t v39 = v63;
  }
  uint64_t v65 = v39;
LABEL_72:
  GlCustomLog(14, "GlPeAsstPosMgr(%u): New position: TimeTagOfUpdate:[", v38);
  unsigned int v41 = ((uint64_t (*)(void))v64[4])(&v64);
  LODWORD(v42) = v65;
  if ((double)v42 * 2.32830644e-10 + (double)v41 <= 0.0)
  {
    GlCustomLog(14, "GpsTime:<unknown>");
  }
  else
  {
    unsigned int v43 = ((uint64_t (*)(void))v64[4])(&v64);
    unsigned int v44 = ((uint64_t (*)(void))v64[4])(&v64);
    LODWORD(v45) = v65;
    GlCustomLog(14, "GpsWk:%d  GpsTowS:%.1lf", v43 / 0x93A80, (double)v45 * 2.32830644e-10 + (double)(v44 % 0x93A80));
  }
  GlCustomLog(14, "]");
  unsigned int v46 = BlueFin::stTimeOfAsstPos::GetAgeS((BlueFin::stTimeOfAsstPos *)&v53, *(BlueFin::GlPeTimeManager **)(a1 + 296));
  GlCustomLog(14, "  Age:");
  if (v46 == -1)
  {
    GlCustomLog(14, "<unknown>");
  }
  else if (v46 > 0xE0F)
  {
    if (v46 >> 7 >= 0x2A3) {
      GlCustomLog(14, "%.1fdays");
    }
    else {
      GlCustomLog(14, "%.1fhrs");
    }
  }
  else
  {
    GlCustomLog(14, "%us", v46);
  }
  GlCustomLog(14, "  UserDyn:%s  Src:%s\n", __const__ZN7BlueFin14GlPeAsstPosMgr10SetUserDynENS_9GlUserDynE_acUserDynImage[v50 + 1], off_2655DF670[v51 + 1]);
  GlCustomLog(14, "GlPeAsstPosMgr(%u): New position: Result: %s\n", v38, (const char *)&v66);
  BlueFin::lla2ecef((double *)v58 + 1, (uint64_t)&v60);
  long long v57 = v60;
  *(void *)&v58[0] = v61;
  if (a7)
  {
    if (v51 != 2)
    {
      DeviceFaultNotify("glpe_asstposmgr.cpp", 796, "processAssistance", (char)"otNewPos.m_eSrc == GLPE_ASST_POS_SRC_ASST");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_asstposmgr.cpp", 796, "otNewPos.m_eSrc == GLPE_ASST_POS_SRC_ASST");
    }
    uint64_t v47 = *(void *)(a1 + 288) + 88720;
    if ((unsigned char *)v47 != v49)
    {
      *(_OWORD *)uint64_t v47 = *(_OWORD *)v49;
      *(_OWORD *)(v47 + 16) = *(_OWORD *)&v49[16];
      *(void *)(v47 + 32) = *(void *)&v49[32];
    }
    *(void *)(v47 + 48) = v56;
    *(_DWORD *)(v47 + 56) = v50;
    *(_DWORD *)(v47 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 2;
    *(unsigned char *)(v47 + 64) = v59;
  }
  if (v30)
  {
    BlueFin::stProcessedAsstPos::operator=(a1, (uint64_t)v49);
    if (v51 != 1 && v51 != 4) {
      *(unsigned char *)(a1 + 312) = 1;
    }
    BlueFin::GlPeKF::SetAsstPos(*(void *)(a1 + 288), (uint64_t *)a1);
  }
  return v30;
}

uint64_t BlueFin::stTimeOfAsstPos::GetAgeS(BlueFin::stTimeOfAsstPos *this, BlueFin::GlPeTimeManager *a2)
{
  if (*(_DWORD *)this != 1)
  {
    if (*(_DWORD *)this == 2)
    {
      unsigned int v3 = *((_DWORD *)a2 + 642);
      if (v3 != -7200001)
      {
        double v4 = (double)(int)v3;
        if (v3 <= 0xFF9222FE) {
          double v4 = (double)v3;
        }
        double v5 = (v4 - *((double *)this + 1)) * 0.001;
        goto LABEL_17;
      }
    }
    return 0xFFFFFFFFLL;
  }
  if (!*((_DWORD *)a2 + 644)) {
    return 0xFFFFFFFFLL;
  }
  BlueFin::GlPeTimeManager::GetTime(a2, 1, v14);
  unsigned int v15 = &off_270EBC600;
  unint64_t v16 = 0;
  BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v14, (BlueFin::GlGpsTime *)&v15);
  unsigned int v6 = v16;
  unsigned int v7 = HIDWORD(v16);
  unsigned int v9 = *((_DWORD *)this + 6);
  unsigned int v8 = *((_DWORD *)this + 7);
  if (*((void *)this + 3))
  {
    unsigned int v10 = HIDWORD(v16) - v8;
    if (v16 < __PAIR64__(v8, v9))
    {
      unsigned int v7 = (__PAIR64__(v8 - HIDWORD(v16), v9) - v16) >> 32;
      unsigned int v6 = v9 - v16;
      char v11 = 1;
    }
    else
    {
      char v11 = 0;
      unsigned int v7 = (__PAIR64__(v10, v16) - v9) >> 32;
      unsigned int v6 = v16 - v9;
    }
  }
  else
  {
    char v11 = 0;
  }
  if ((v11 & ((v7 | v6) != 0)) != 0) {
    double v5 = -((double)v6 * 2.32830644e-10 + (double)v7);
  }
  else {
    double v5 = (double)v6 * 2.32830644e-10 + (double)v7;
  }
LABEL_17:
  if (v5 < 0.0) {
    return 0;
  }
  double v13 = fmod(v5, 4294967300.0);
  if (v5 <= 4294967300.0) {
    double v13 = v5;
  }
  if (v13 < -4294967300.0) {
    double v13 = -fmod(-v13, 4294967300.0);
  }
  if (v13 < 0.0) {
    return --v13;
  }
  else {
    return v13;
  }
}

BlueFin::stTimeOfAsstPos *BlueFin::stTimeOfAsstPos::stTimeOfAsstPos(BlueFin::stTimeOfAsstPos *this, BlueFin::GlPeTimeManager *a2, const BlueFin::GlGpsTime *a3, unsigned int a4)
{
  *(_DWORD *)this = 0;
  *((void *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0xC15B773FC0000000;
  *((void *)this + 2) = &off_270EBC600;
  *((void *)this + 3) = 0;
  if ((*(unsigned int (**)(const BlueFin::GlGpsTime *))(*(void *)a3 + 32))(a3) < 0x93A80
    || (unsigned int v8 = (*(uint64_t (**)(const BlueFin::GlGpsTime *))(*(void *)a3 + 32))(a3),
        unsigned int v9 = *((_DWORD *)a3 + 2),
        (double)v9 * 2.32830644e-10 + (double)(v8 % 0x93A80) == 0.0))
  {
    *((void *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
    if ((*(unsigned int (**)(const BlueFin::GlGpsTime *))(*(void *)a3 + 32))(a3) < 0x93A80
      && (unsigned int v11 = (*(uint64_t (**)(const BlueFin::GlGpsTime *))(*(void *)a3 + 32))(a3),
          LODWORD(v12) = *((_DWORD *)a3 + 2),
          (double)v12 * 2.32830644e-10 + (double)(v11 % 0x93A80) == 0.0)
      && (unsigned int v13 = *((_DWORD *)a2 + 642), v13 != -7200001))
    {
      double v10 = (double)(int)v13;
      if (v13 <= 0xFF9222FE) {
        double v10 = (double)v13;
      }
    }
    else
    {
      unsigned int v14 = (*(uint64_t (**)(const BlueFin::GlGpsTime *))(*(void *)a3 + 32))(a3);
      LODWORD(v15) = *((_DWORD *)a3 + 2);
      double v10 = *((double *)this + 1) + ((double)v15 * 2.32830644e-10 + (double)v14) * 1000.0;
    }
  }
  else
  {
    if (!*((_DWORD *)a2 + 644))
    {
      *((_DWORD *)this + 6) = v9;
      *((_DWORD *)this + 7) = *((_DWORD *)a3 + 3);
      *(_DWORD *)this = 1;
      double v10 = *((double *)this + 1);
      goto LABEL_10;
    }
    BlueFin::GlPeTimeManager::GetTime(a2, a3, 1, (uint64_t)v17);
    double v10 = *(double *)&v17[2];
  }
  *(_DWORD *)this = 2;
LABEL_10:
  *((double *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v10 - (double)(1000 * (unint64_t)a4);
  return this;
}

__n128 BlueFin::stProcessedAsstPos::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(void *)(a2 + 40);
    *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    uint64_t v2 = *(void *)(a2 + 88);
    *(void *)(a1 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = v2;
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    __n128 result = *(__n128 *)(a2 + 120);
    *(__n128 *)(a1 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = result;
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  }
  return result;
}

uint64_t BlueFin::GlPeAsstPosData::Deserialize(BlueFin::GlPeAsstPosData *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 45) {
    return 0;
  }
  unsigned int v3 = *((unsigned __int8 *)a2 + 12);
  if (v3 - 9 < 0xFFFFFFF8) {
    return 0;
  }
  if (v3 >= 7) {
    BlueFin::GlSysLogEntry::GetU32(a2);
  }
  *((double *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = BlueFin::GlSysLogEntry::GetD64(a2);
  *((double *)this + 2) = BlueFin::GlSysLogEntry::GetD64(a2);
  *((double *)this + 3) = BlueFin::GlSysLogEntry::GetD64(a2);
  *((double *)this + 4) = BlueFin::GlSysLogEntry::GetD64(a2);
  *((double *)this + 5) = BlueFin::GlSysLogEntry::GetD64(a2);
  unsigned __int16 S32 = BlueFin::GlSysLogEntry::GetS32(a2);
  unsigned int U32 = BlueFin::GlSysLogEntry::GetU32(a2);
  if (BlueFin::GlSysLogEntry::GetU32(a2) - 1 <= 0x3FE)
  {
    unsigned int v13 = "ulGpsWeekMod == 0 || ulGpsWeekMod >= 1024";
    DeviceFaultNotify("glpe_asstposmgr.cpp", 188, "Deserialize", (char)"ulGpsWeekMod == 0 || ulGpsWeekMod >= 1024");
    unsigned int v14 = "glpe_asstposmgr.cpp";
    int v15 = 188;
    goto LABEL_23;
  }
  double v8 = fmod((double)U32 * 0.001, 1.0);
  if (v8 < 0.0 || v8 >= 1.0)
  {
    unsigned int v13 = "dFracSec >= 0.0 && dFracSec < 1.0";
    DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
    unsigned int v14 = "glpe_timepoint.h";
    int v15 = 173;
    goto LABEL_23;
  }
  double v10 = v8 * 4294967300.0 + 0.5;
  unsigned int v11 = v10;
  if (v10 >= 4294967300.0) {
    unsigned int v11 = -1;
  }
  *((_DWORD *)this + 14) = v11;
  *(void *)((char *)this + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = ((double)U32 * 0.001) + 604800 * S32;
  if (*((unsigned __int8 *)a2 + 12) < 3u
    || (*((_DWORD *)this + 16) = BlueFin::GlSysLogEntry::GetU16(a2), *((unsigned __int8 *)a2 + 12) <= 3u))
  {
    *((_DWORD *)this + 17) = 1;
    *((unsigned char *)this + 72) = 0;
  }
  else
  {
    *((_DWORD *)this + 17) = BlueFin::GlSysLogEntry::GetU16(a2);
    unsigned int v12 = *((unsigned __int8 *)a2 + 12);
    *((unsigned char *)this + 72) = 0;
    if (v12 >= 8) {
      *((unsigned char *)this + 72) = BlueFin::GlSysLogEntry::GetU16(a2) != 0;
    }
  }
  if (*((unsigned __int16 *)a2 + 11) != *((unsigned __int16 *)a2 + 10))
  {
    unsigned int v13 = "otEntry.DataSize() == otEntry.ReadIdx()";
    DeviceFaultNotify("glpe_asstposmgr.cpp", 215, "Deserialize", (char)"otEntry.DataSize() == otEntry.ReadIdx()");
    unsigned int v14 = "glpe_asstposmgr.cpp";
    int v15 = 215;
LABEL_23:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v14, v15, v13);
  }
  return 1;
}

void BlueFin::stTimeOfAsstPos::GetTime(BlueFin::stTimeOfAsstPos *this@<X0>, BlueFin::GlPeTimeManager *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = &off_270EBC600;
  *(void *)(a3 + 8) = 0;
  if (*(_DWORD *)this == 1)
  {
    uint64_t v4 = *((void *)this + 3);
    goto LABEL_6;
  }
  if (*(_DWORD *)this != 2) {
    return;
  }
  if (*((_DWORD *)a2 + 644))
  {
    BlueFin::GlPeTimeManager::GetTime((unsigned int *)a2, *((double *)this + 1), 1, (uint64_t)v13);
    unsigned int v14 = &off_270EBC600;
    uint64_t v15 = 0;
    BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v13, (BlueFin::GlGpsTime *)&v14);
    uint64_t v4 = v15;
LABEL_6:
    *(void *)(a3 + 8) = v4;
    return;
  }
  double v5 = *((double *)this + 1);
  if (v5 < 604800000.0)
  {
    double v6 = v5 * 0.001;
    double v7 = fmod(v5 * 0.001, 604800.0);
    if (v7 >= 0.0) {
      double v8 = v7;
    }
    else {
      double v8 = v7 + 604800.0;
    }
    v13[0] = &off_270EBC600;
    double v9 = fmod(v8, 1.0);
    if (v9 < 0.0 || v9 >= 1.0)
    {
      DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
    }
    double v11 = v9 * 4294967300.0 + 0.5;
    unsigned int v12 = v11;
    if (v11 >= 4294967300.0) {
      unsigned int v12 = -1;
    }
    *(_DWORD *)(a3 + 8) = v12;
    *(_DWORD *)(a3 + 12) = v8 + 604800 * (unsigned __int16)((int)(v6 / 604800.0) - (v7 < 0.0));
  }
}

void BlueFin::GlReqSm::GenerateTowAssist(BlueFin::GlReqSm *this)
{
  int v2 = *((_DWORD *)this + 3048);
  unsigned int v13 = &v15;
  char v14 = 3;
  int v15 = v2;
  uint64_t v16 = 0;
  uint64_t v3 = *((void *)this + 785);
  int v4 = *(_DWORD *)(v3 + 2568);
  if (BlueFin::GlPeTimeManager::TimeKnown(v3, 0, 0x200B20u))
  {
    unsigned int v5 = v4 - 89;
    double v6 = (double)(int)v5;
    if (v5 <= 0xFF9222FE) {
      double v6 = (double)v5;
    }
    v7.n128_f64[0] = BlueFin::GlPeTimeManager::lmsToLegacyGlStruct(*((unsigned int **)this + 785), 0, 0, (uint64_t)v10, v6);
    unsigned int v8 = v12;
    if (v12 != -1)
    {
      uint64_t v9 = *((void *)this + 806);
      *(_DWORD *)(v9 + 376) = v11;
      *(_DWORD *)(v9 + 384) = v5;
      *(_DWORD *)(v9 + 38BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v8 / 0x3E8;
      if ((v2 & 0xC) != 0 || *(unsigned __int8 *)(v9 + 54) != (*(unsigned char *)(v9 + 55) + 1)) {
        (*(void (**)(void, uint64_t, __n128))(**((void **)this + 39) + 264))(*((void *)this + 39), v9 + 8, v7);
      }
    }
  }
}

unint64_t BlueFin::GlReqSm::SetOscOffsAiding(unint64_t this, int a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(unsigned int *)(*(void *)(this + 6280) + 2568);
  uint64_t v5 = *(void *)(this + 6456);
  int v6 = *(__int16 *)(v5 + 2);
  int v7 = *(__int16 *)(v5 + 10);
  if (BlueFin::GlUtils::m_ucEnabled) {
    this = BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
  }
  int v8 = *(_DWORD *)(v5 + 40);
  if (*(_DWORD *)(v3 + 53544) != v8 || a2 != 0)
  {
    this = (*(uint64_t (**)(void, uint64_t, void, double, double))(**(void **)(v3 + 312) + 320))(*(void *)(v3 + 312), v4, 0, (double)v6 * 0.000000001, (double)v7 * 0.000000001);
    *(_DWORD *)(v3 + 53544) = v8;
  }
  return this;
}

uint64_t BlueFin::GlPeKF::AdjustAltSigmaForSimulation(uint64_t this)
{
  int v1 = *(_DWORD *)(*(void *)(this + 92408) + 120012);
  if (v1)
  {
    if (v1 == 1 && *(_DWORD *)(this + 72) == 2 && *(float *)(this + 64) >= 50.0) {
      *(_DWORD *)(this + 64) = 1112014848;
    }
    *(_DWORD *)(this + 92616) |= 0x10000u;
  }
  return this;
}

BOOL BlueFin::GlPeStartupMgr::hasAssistRtoOrLtoOrbit(BlueFin::GlPeStartupMgr *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,BlueFin::GlSetBase *a24)
{
  BlueFin::GlGnssSet::operator|(*(void *)this + 120224, *(void *)this + 120608, (uint64_t)&v30);
  if (BlueFin::GlSetBase::HasAny(a24))
  {
    if (BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)((char *)a24 + 120))
      && BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)((char *)a24 + 96)))
    {
      return 1;
    }
    uint64_t v25 = *(void *)this;
    if (*(_DWORD *)(*(void *)this + 120012) == 1) {
      return 1;
    }
  }
  else
  {
    uint64_t v25 = *(void *)this;
  }
  uint64_t v27 = 0;
  int v28 = 0;
  uint64_t v29 = *(void *)(v25 + 120584);
  do
  {
    v28 += BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(v29 + v27));
    v27 += 24;
  }
  while (v27 != 168);
  return v28 > 3u;
}

uint64_t BlueFin::GlDbgMeIf::MeasureRefTime(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 352))();
}

uint64_t BlueFin::GlReqSm::OnCpuLoadStarted(BlueFin::GlReqSm *this)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  int v2 = (char *)this + 54612;
  int v3 = (*(uint64_t (**)(void))(**((void **)this + 4149) + 56))(*((void *)this + 4149));
  int v4 = *((_DWORD *)v2 + 2);
  *(_DWORD *)int v2 = v3 - *((_DWORD *)v2 + 3) + 1000 * v2[4];
  uint64_t result = GlCustomLog(15, "PredProcessingStart %d\n", v4);
  int v6 = *((_DWORD *)v2 + 2);
  v9[0] = 12648430;
  v9[1] = v6;
  uint64_t v7 = *((void *)this + 4149);
  int v8 = *(uint64_t (**)(void, _DWORD *, uint64_t))(v7 + 248);
  if (v8) {
    return v8(*(void *)(v7 + 8), v9, 8);
  }
  return result;
}

uint64_t BlueFin::GlReqSm::OnCpuLoadEnded(BlueFin::GlReqSm *this)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t result = GlCustomLog(15, "PredProcessingEnd %d\n", *((_DWORD *)this + 13653));
  int v3 = *((_DWORD *)this + 13653);
  v6[0] = 14600959;
  v6[1] = v3;
  uint64_t v4 = *((void *)this + 4149);
  uint64_t v5 = *(uint64_t (**)(void, _DWORD *, uint64_t))(v4 + 248);
  if (v5) {
    return v5(*(void *)(v4 + 8), v6, 8);
  }
  return result;
}

#error "2639E85E4: call analysis failed (funcsize=56)"

void BlueFin::GlPeKF::UpdateKFAidingImpl(BlueFin::GlPeKF *this, BlueFin::GlPeNavGnssState *a2)
{
  int v2 = a2;
  uint64_t v4 = (char *)this + 88696;
  uint64_t v5 = (_DWORD *)((char *)this + 17328);
  if (!a2 && **((_DWORD **)this + 11552) == *v5) {
    return;
  }
  if (!*(unsigned char *)(*((void *)this + 11551) + 120021))
  {
    if (*(void *)v4)
    {
      long long v32 = (void *)((char *)this + 27744);
      uint64_t v33 = *((void *)this + 3468);
      if (*(unsigned char *)(*(void *)v4 + 3009))
      {
        BOOL v34 = 1;
        goto LABEL_18;
      }
    }
    else
    {
      long long v32 = (void *)((char *)this + 27744);
      uint64_t v33 = *((void *)this + 3468);
    }
    BOOL v34 = *(float *)((char *)this + *(void *)(v33 - 24) + 27824) < 400.0;
LABEL_18:
    unsigned int v35 = (*(uint64_t (**)(void *))(v33 + 72))(v32);
    unsigned int v36 = v35;
    int v37 = *(_DWORD *)(*((void *)v4 + 468) + 4216);
    if (v37 == 1)
    {
      BOOL v38 = v35 != 0;
      goto LABEL_20;
    }
    BOOL v38 = v35 != 0;
    if (v37 == 6 || v35 == 0)
    {
      if (v37 != 6 && v35 == 0)
      {
LABEL_39:
        unsigned int v39 = 20000;
        if (v2) {
          goto LABEL_21;
        }
        goto LABEL_40;
      }
    }
    else
    {
      uint64_t v43 = *((void *)v4 + 18);
      if (*(unsigned char *)(v43 + 1764)) {
        unsigned int v44 = 60;
      }
      else {
        unsigned int v44 = 180;
      }
      if (*(float *)(v43 + 1328) <= 4.0
        || *(float *)(v43 + 1320) >= 20.0
        || *(_DWORD *)(v43 + 76) < v44
        || !*(unsigned char *)(v43 + 1764) && *(_DWORD *)(v43 + 64) != 1)
      {
        goto LABEL_39;
      }
    }
LABEL_20:
    unsigned int v39 = 90000;
    if (v2)
    {
LABEL_21:
      BOOL v40 = 1;
      goto LABEL_48;
    }
LABEL_40:
    uint64_t v45 = *((void *)v4 + 456);
    if (*(unsigned char *)(v45 + 26286))
    {
      BOOL v40 = 0;
      char v46 = !v38;
      if (*(int *)(v45 + 88) < 37) {
        char v46 = 1;
      }
      if ((v46 & 1) == 0 && v35 < v39) {
        BOOL v40 = v4[3645] == 0;
      }
    }
    else
    {
      BOOL v40 = 0;
    }
    if (!v34 && !v40) {
      return;
    }
LABEL_48:
    BOOL v47 = 0;
    int v48 = *((_DWORD *)this + 70);
    if (v48 && v35 >> 6 <= 0x752)
    {
      if (v4[3377]) {
        BOOL v47 = sqrt(*(double *)((char *)v32 + *(void *)(*v32 - 24) + 112)* *(double *)((char *)v32 + *(void *)(*v32 - 24) + 112)+ *(double *)((char *)v32 + *(void *)(*v32 - 24) + 104)* *(double *)((char *)v32 + *(void *)(*v32 - 24) + 104)) > 13.8;
      }
      else {
        BOOL v47 = 0;
      }
    }
    BOOL v49 = BlueFin::GlPeKF::InFlightMode(this);
    int v50 = v47 | 2;
    if (!v49) {
      int v50 = v47;
    }
    if (*((unsigned char *)this + 1091)) {
      int v51 = v50 | 4;
    }
    else {
      int v51 = v50;
    }
    if (!*(unsigned char *)(*((void *)v4 + 464) + 120021)) {
      v51 |= 8 * ((*((_DWORD *)this + 192) - v48) < 0x7D1);
    }
    if (v4[3645]) {
      int v52 = 1;
    }
    else {
      int v52 = v40;
    }
    if (v52) {
      int v53 = 32;
    }
    else {
      int v53 = 0;
    }
    if (v40) {
      int v54 = 16;
    }
    else {
      int v54 = 0;
    }
    int v55 = v51 | v54 | v53;
    if (v2)
    {
      unsigned int v56 = v55 | 0x40;
LABEL_74:
      uint64_t v57 = *((void *)v4 + 456) + 208;
      char v58 = BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)((char *)v32
                                                         + *(void *)(*((void *)this + 3468) - 24)
                                                         + 352));
      uint64_t v63 = v2;
      *(void *)&long long v64 = v57;
      BYTE8(v64) = v58;
      HIDWORD(v64) = v56;
      uint64_t v30 = (char *)this + 3840;
      __int16 v31 = (uint64_t *)&v63;
LABEL_75:
      BlueFin::GlPeNavAid::Generate((uint64_t)v30, (uint64_t)v31, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v59, (uint64_t)v60, v61,
        v62,
        (uint64_t)v63,
        v64,
        *((uint64_t *)&v64 + 1),
        v65,
        v66,
        v67,
        v68,
        v69,
        v70,
        v71,
        v72,
        v73,
        v74,
        v75,
        v76,
        *(uint64_t *)&v77[4],
        v78,
        v79,
        v80,
        v81,
        v82,
        v83,
        v84,
        v85,
        v86,
        v87,
        v88,
        v89,
        v90,
        v91,
        v92,
        v93,
        v94,
        v95,
        v96,
        v97,
        v98,
        v99,
        v100,
        v101,
        v102,
        v103,
        v104);
      return;
    }
    int v2 = (BlueFin::GlPeNavGnssState *)((char *)v32 + *(void *)(*v32 - 24));
    if (*(unsigned char *)(*((void *)v4 + 464) + 120021))
    {
      unsigned int v56 = v55 & 0xFFFFFFF7;
      if (!v40) {
        goto LABEL_74;
      }
    }
    else
    {
      unsigned int v56 = v55 & 0xFFFFFFF7 | (8 * ((*((_DWORD *)this + 192) - v48) < 0x7D1));
      if (!v40) {
        goto LABEL_74;
      }
    }
    *((float *)v2 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = fminf(*((float *)v2 + 40), 1.0);
    GlCustomLog(14, "Position Gap %d\n", v36);
    goto LABEL_74;
  }
  if ((*((unsigned char *)this + 92616) & 8) != 0 || *v5 < **((_DWORD **)this + 11552))
  {
    if (BlueFin::GlPeKF::InFlightMode(this)) {
      int v6 = 2;
    }
    else {
      int v6 = 0;
    }
    if (*((unsigned char *)this + 1091)) {
      int v7 = v6 | 4;
    }
    else {
      int v7 = v6;
    }
    BlueFin::GlPeNavGnssState::GlPeNavGnssState((BlueFin::GlPeNavGnssState *)&v63);
    unsigned int v8 = **((_DWORD **)v4 + 465);
    uint64_t v9 = *((void *)this + 3468);
    uint64_t v10 = (char *)this + *(void *)(v9 - 24) + 27744;
    uint64_t v11 = *((void *)v10 + 11);
    uint64_t v12 = *((void *)v10 + 19);
    int v13 = *((_DWORD *)v10 + 40);
    long long v64 = *(_OWORD *)(v10 + 8);
    uint64_t v65 = *((void *)v10 + 3);
    BlueFin::GlPeNavGnssState::NormalizePos((BlueFin::GlPeNavGnssState *)&v63);
    *(void *)&long long v73 = 0;
    *((void *)&v73 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v11;
    *(void *)&long long v82 = v8 | 0x100000000;
    memset(v77, 0, sizeof(v77));
    LODWORD(v74) = 0;
    long long v75 = 0uLL;
    *((void *)&v74 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
    int v76 = 0;
    *((void *)&v78 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v12;
    LODWORD(v79) = v13;
    *(void *)&long long v80 = 0;
    DWORD2(v8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
    *(void *)&long long v81 = 1148846080;
    DWORD2(v8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
    *(void *)&long long v85 = 0;
    uint64_t v14 = *((void *)v4 + 456) + 208;
    char v15 = BlueFin::GlSetBase::Cnt((BlueFin::GlPeKF *)((char *)this + *(void *)(v9 - 24) + 28096));
    long long v60 = (uint64_t *)&v63;
    uint64_t v61 = v14;
    LOBYTE(v62) = v15;
    HIDWORD(v62) = v7;
    uint64_t v30 = (char *)this + 3840;
    __int16 v31 = (uint64_t *)&v60;
    goto LABEL_75;
  }
}

uint64_t BlueFin::GlPePlatfStatMgr::SetOscOff(uint64_t this, double a2, double a3)
{
  int v3 = *(unsigned __int8 *)(this + 1313);
  if (a2 >= 0.000000002)
  {
    int v5 = 0;
  }
  else
  {
    if (*(unsigned char *)(this + 1313))
    {
      *(unsigned char *)(this + 1312) = 1;
      double v4 = (a2 - *(double *)(this + 1320)) * (a2 - *(double *)(this + 1320)) * 0.5;
      if (v4 > *(double *)(this + 1328)) {
        *(double *)(this + 1328) = v4;
      }
    }
    *(double *)(this + 132BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a2;
    int v5 = 1;
  }
  *(unsigned char *)(this + 1313) = v5;
  uint64_t v6 = *(void *)(this + 1240);
  if (v6)
  {
    float v7 = *(double *)(v6 + 80);
    *(float *)(this + 20BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v7;
    int v8 = *(unsigned __int8 *)(v6 + 221);
    if (*(unsigned __int8 *)(this + 196) != v8)
    {
      *(unsigned char *)(this + 196) = v8;
      *(unsigned char *)(this + 232) = 1;
    }
  }
  if (v5 != v3) {
    *(unsigned char *)(this + 232) = 1;
  }
  return this;
}

uint64_t BlueFin::GlPePlatfStatMgr::SetSIGMeasuement(BlueFin::GlPePlatfStatMgr *this, BlueFin::GlPeMsmtMgr *a2)
{
  int v53 = v55;
  char v54 = 8;
  memset(v55, 0, 32);
  int v50 = v52;
  char v51 = 8;
  memset(v52, 0, sizeof(v52));
  unsigned __int8 v45 = *((unsigned char *)a2 + 16);
  memcpy(v49, *((const void **)a2 + 1), 4 * v45);
  unsigned __int16 v47 = 0;
  unsigned __int8 v46 = 0;
  int v48 = v49[0];
  BlueFin::GlSetIterator::operator++(&v45);
  while (v46 != v45)
  {
    if (v47 >= 0x23FuLL)
    {
      DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
    }
    double v4 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v47;
    char v5 = *v4;
    LODWORD(v4) = v4[1];
    LOBYTE(v42[0]) = v5;
    int v43 = (int)v4;
    unsigned __int16 v44 = v47;
    MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas(a2, (const BlueFin::GlSignalId *)v42, 0, 0);
    float v7 = *((float *)MeMeas + 27);
    if (v7 <= 35.0)
    {
      BlueFin::GlSetBase::Remove((uint64_t)this + 1256, LOBYTE(v42[0]));
      float v7 = *((float *)MeMeas + 27);
    }
    else
    {
      *(_DWORD *)(*((void *)this + 157) + (((unint64_t)LOBYTE(v42[0]) >> 3) & 0x1C)) |= 1 << SLOBYTE(v42[0]);
    }
    if (v7 > *((float *)this + 334)) {
      *((float *)this + 334) = v7;
    }
    if ((MeMeas[12] & 2) != 0) {
      *(_DWORD *)&v53[((unint64_t)LOBYTE(v42[0]) >> 3) & 0x1C] |= 1 << SLOBYTE(v42[0]);
    }
    if (*((float *)MeMeas + 25) < 0.0000000158999995) {
      *(_DWORD *)((char *)v50 + (((unint64_t)LOBYTE(v42[0]) >> 3) & 0x1C)) |= 1 << SLOBYTE(v42[0]);
    }
    BlueFin::GlSetIterator::operator++(&v45);
  }
  int v8 = (int32x2_t *)*((void *)this + 155);
  if (v8)
  {
    int32x2_t v9 = v8[4];
    *((int32x2_t *)this + 2) = vsub_s32(v9, *(int32x2_t *)((char *)this + 1340));
    *(int32x2_t *)((char *)this + 134BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v9;
  }
  unsigned int v10 = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092);
  unsigned int v11 = *(_DWORD *)a2;
  unsigned int v12 = *((_DWORD *)this + 341);
  BOOL v13 = v10 >= v12;
  unsigned int v14 = v10 - v12;
  if (v14 != 0 && v13)
  {
    unsigned int v15 = *((_DWORD *)this + 340);
    BOOL v13 = v15 >= v11;
    unsigned int v16 = v15 - v11;
    if (!v13)
    {
      unsigned int v17 = v16 + v14;
      *((_DWORD *)this + 40) += v17;
      if ((unsigned __int16)v11 <= 0xFA00u) {
        int v18 = *((_DWORD *)this + 342);
      }
      else {
        int v18 = 0;
      }
      int v19 = v18 + v17;
      *((_DWORD *)this + 342) = v19;
      if (v19 < 0) {
        int v19 = -v19;
      }
      if (v19 < 0x1771)
      {
        if (v19 >= 0xBB9) {
          GlCustomLog(12, "Warning: High latency detected, see HATMD in PGLOR,n,SIO sentence.\n");
        }
      }
      else
      {
        GlCustomLog(11, "Error: High latency detected, see HATMD in PGLOR,n,SIO sentence.\n");
      }
    }
  }
  *((_DWORD *)this + 34BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v10;
  *((_DWORD *)this + 34BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v11;
  *((_DWORD *)this + 6) = v10 - *((_DWORD *)this + 337);
  *((_DWORD *)this + 337) = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092);
  uint64_t v20 = (int32x2_t *)*((void *)this + 155);
  if (v20)
  {
    int32x2_t v21 = vadd_s32(v20[3], v20[2]);
    *((_WORD *)this + 3) = v21.i16[2];
    *((_WORD *)this + 2) = v21.i16[0];
    *((_DWORD *)this + 3) = v20->i32[1];
    double v22 = (BlueFin::GlPfaStat *)v20[20];
    if (v22) {
      BlueFin::GlPfaStat::SetPfaData(v22, (const BlueFin::GlSvIdSet *)&v53, (const BlueFin::GlSvIdSet *)&v50);
    }
  }
  if (*(_DWORD *)a2 <= *((_DWORD *)this + 312)) {
    return 0;
  }
  unsigned int v23 = *((_DWORD *)this + 326);
  if (!v23) {
    return 0;
  }
  GlCustomLog(199, "HWDEBUG: LMS = %u, WER=%.2f\n", *(_DWORD *)a2, (float)((float)(100 * (unint64_t)(v23 - *((_DWORD *)this + 327))) / (float)v23));
  int v24 = *(_DWORD *)this;
  uint64_t v25 = *((void *)this + 155);
  if (v25)
  {
    int v26 = *(_DWORD *)(v25 + 8);
    if (!v26) {
      goto LABEL_49;
    }
    int v26 = *(_DWORD *)(v25 + 12);
    if (!v26) {
      goto LABEL_49;
    }
    unint64_t v27 = 0;
    unsigned int v28 = 0;
    unsigned int v29 = 0;
    unsigned int v30 = 0;
    uint64_t v31 = v25 + 40;
    do
    {
      if (v27 >= 5) {
        int v32 = 0;
      }
      else {
        int v32 = *(_DWORD *)(v31 + 4 * v27);
      }
      v29 += v32;
      if (v27 >= 5) {
        int v33 = *(_DWORD *)(v31 + 4 * v27);
      }
      else {
        int v33 = 0;
      }
      v28 += v33;
      v30 += *(_DWORD *)(v31 + 4 * v27++);
    }
    while (v27 != 9);
    if (v30)
    {
      *((_WORD *)this + 4) = (int)((double)v29 * 100.0 / (double)v30 + 0.5);
      double v34 = (double)v28 * 100.0 / (double)v30 + 0.5;
      *((_WORD *)this + 5) = (int)v34;
      if ((int)v34 || *((__int16 *)this + 2) > 1)
      {
        int v26 = 2;
      }
      else if (*((__int16 *)this + 3) <= 1)
      {
        int v26 = 1;
      }
      else
      {
        int v26 = 2;
      }
      goto LABEL_49;
    }
  }
  int v26 = 0;
LABEL_49:
  *(_DWORD *)this = v26;
  if (v24 != v26) {
    *((unsigned char *)this + 232) = 1;
  }
  int v36 = (int)(float)(*((float *)this + 334) + 0.5);
  *((_WORD *)this + 84) = v36;
  unsigned int v37 = *((_DWORD *)this + 326);
  if (v37 >= 0x65)
  {
    if (!*((unsigned char *)this + 170)) {
      *((unsigned char *)this + 232) = 1;
    }
    *((unsigned char *)this + 17BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
    *((float *)this + 44) = (float)(100 * (unint64_t)(v37 - *((_DWORD *)this + 327))) / (float)v37;
  }
  int v38 = *((unsigned __int8 *)this + 1312);
  if (*((unsigned char *)this + 1312))
  {
    if (!*((unsigned char *)this + 188)) {
      *((unsigned char *)this + 232) = 1;
    }
    *((unsigned char *)this + 188) = 1;
    float v39 = sqrt(*((double *)this + 166)) * 1000000000.0;
    *((float *)this + 48) = v39;
  }
  if (v36 >= -126)
  {
    int v40 = 0;
    int v41 = *((_DWORD *)this + 41);
    if (v38 && *((unsigned char *)this + 170))
    {
      if (*((_DWORD *)this + 327) == v37 && *((float *)this + 48) < 2.0) {
        int v40 = 1;
      }
      else {
        int v40 = 2;
      }
    }
    *((_DWORD *)this + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v40;
    if (v41 != v40) {
      *((unsigned char *)this + 232) = 1;
    }
  }
  *((_DWORD *)this + 312) = *(_DWORD *)a2 + 60000;
  return 1;
}

double BlueFin::GlPePlatfStatMgr::ResetEpoch(BlueFin::GlPePlatfStatMgr *this)
{
  *((_DWORD *)this + 13) += *((_DWORD *)this + 9);
  unsigned int v1 = *((_DWORD *)this + 7);
  if (v1 > *((_DWORD *)this + 11)) {
    *((_DWORD *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v1;
  }
  *((_DWORD *)this + 14) += *((_DWORD *)this + 10);
  unsigned int v2 = *((_DWORD *)this + 8);
  if (v2 > *((_DWORD *)this + 12)) {
    *((_DWORD *)this + 12) = v2;
  }
  double result = NAN;
  *((void *)this + 169) = -1;
  *((_DWORD *)this + 9) = 0;
  *((_DWORD *)this + 7) = 0;
  return result;
}

uint64_t BlueFin::GlPeReqBag::ToSlog(uint64_t this)
{
  if (!BlueFin::GlUtils::m_pInstance || !*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
    return this;
  }
  uint64_t v1 = this;
  unsigned int v12 = &unk_270EC4B78;
  uint64_t v2 = *(unsigned int *)(this + 1316);
  if ((v2 & 0x80000000) != 0)
  {
    if (v2 == -2)
    {
      char v13 = -2;
      __int16 v14 = *(_WORD *)(this + 3238);
      uint64_t v15 = *(void *)(this + 3240);
      int v16 = *(_DWORD *)(this + 3248);
      char v11 = *(unsigned char *)(this + 3237);
LABEL_16:
      char v17 = v11;
      goto LABEL_19;
    }
    char v13 = -1;
    __int16 v14 = -1;
    uint64_t v15 = 0;
    int v16 = -1;
  }
  else
  {
    char v13 = -2;
    uint64_t v3 = *(void *)(this + 8 * v2);
    uint64_t v4 = *(void *)(v3 + 8);
    __int16 v14 = *(_WORD *)(v4 + 22);
    int v5 = 1000 * v14;
    int v6 = *(_DWORD *)(v3 + 36);
    if (v6 == -1)
    {
      if (v5 <= 1) {
        int v5 = 1;
      }
      LODWORD(v15) = v5 - 1;
      int v10 = 1;
    }
    else
    {
      unsigned int v7 = *(_DWORD *)(v4 + 28);
      unsigned int v8 = *(_DWORD *)(v3 + 32) + v6;
      int v9 = v7 - v8;
      if (v7 > v8) {
        int v9 = -1;
      }
      LODWORD(v15) = (v9 + v5) & ~((v9 + v5) >> 31);
      int v10 = v8 - v7;
      if (v8 < v7) {
        int v10 = 1;
      }
    }
    HIDWORD(v15) = v10;
    this = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 152))(v4);
    int v16 = this;
    if ((*(_DWORD *)(*(void *)(*(void *)(v1 + 8 * *(int *)(v1 + 1316)) + 8) + 16) - 1) <= 1)
    {
      char v11 = 1;
      goto LABEL_16;
    }
  }
  char v17 = 0;
LABEL_19:
  if (BlueFin::GlUtils::m_pInstance)
  {
    if (*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
      return (*((uint64_t (**)(void **, void, void))v12 + 3))(&v12, 0, 0);
    }
  }
  return this;
}

uint64_t BlueFin::GlPeReqBag::GetTimeSinceFirstPosReqMs(BlueFin::GlPeReqBag *this)
{
  if ((*((unsigned char *)this + 1312) & 3) != 0)
  {
    uint64_t v1 = 0;
    uint64_t v2 = 0;
    do
    {
      uint64_t v3 = *(void *)((char *)this + v1);
      if (v3)
      {
        uint64_t v4 = *(void *)(v3 + 8);
        if (*(_DWORD *)(v4 + 16) <= 1u)
        {
          unsigned int v5 = *(_DWORD *)(v3 + 32) - *(_DWORD *)(v4 + 32);
          if (v5 <= v2) {
            uint64_t v2 = v2;
          }
          else {
            uint64_t v2 = v5;
          }
        }
      }
      v1 += 8;
    }
    while (v1 != 576);
  }
  else
  {
    uint64_t v2 = 0;
  }
  *((unsigned char *)this + 3233) = *((unsigned char *)this + 3233);
  return v2;
}

BOOL BlueFin::GlPePpsGen::UpdatePps(BlueFin::GlPePpsGen *this)
{
  if (!*((unsigned char *)this + 56) || *((double *)this + 9) == 4294967300.0) {
    return 0;
  }
  BOOL v2 = *(unsigned char *)(*((void *)this + 1) + 7274) != 0;
  if (*(unsigned char *)(*((void *)this + 1) + 7274))
  {
    uint64_t v3 = *((void *)this + 2);
    uint64_t v4 = *(void (**)(void))(v3 + 240);
    if (v4) {
      v4(*(void *)(v3 + 8));
    }
    uint64_t v5 = 0x1000000000000;
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (*((_DWORD *)this + 10) != -1)
  {
    uint64_t v6 = *((void *)this + 1);
    long long v7 = *(_OWORD *)((char *)this + 24);
    *(_DWORD *)(v6 + 7264) = *((_DWORD *)this + 10);
    *(_OWORD *)(v6 + 7248) = v7;
    *((_DWORD *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = -1;
  }
  if (!*((void *)this + 6))
  {
    DeviceFaultNotify("glpe_ppsgen.cpp", 88, "UpdatePps", (char)"m_potMeasEng != nullptr");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ppsgen.cpp", 88, "m_potMeasEng != nullptr");
  }
  unsigned int v8 = *(_DWORD *)(*(void *)this + 2568);
  BlueFin::GlPeTimeManager::GetTime(*(unsigned int **)this, v8, 1, (uint64_t)v30);
  double UncUs = BlueFin::GlPeGnssTime::GetUncUs((uint64_t)v30, 0);
  double v28 = COERCE_DOUBLE(&off_270EBC600);
  uint64_t v29 = 0;
  BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v30, (BlueFin::GlGpsTime *)&v28);
  unsigned int v10 = (*(uint64_t (**)(double *))(*(void *)&v28 + 32))(&v28);
  LODWORD(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v29;
  double v12 = ((double)v11 * 2.32830644e-10 + (double)(v10 % 0x93A80)) * 1000.0;
  double v13 = v12 / 1000.0;
  if (v12 / 1000.0 <= 0.0)
  {
    double v14 = 0.0;
    if (v12 / 1000.0 < 0.0) {
      double v14 = ceil(v13 + -0.5);
    }
  }
  else
  {
    double v14 = floor(v13 + 0.5);
  }
  uint64_t v15 = 0;
  if (UncUs >= *((double *)this + 9))
  {
    uint64_t v17 = 0;
  }
  else
  {
    double v16 = v12 + v14 * -1000.0;
    uint64_t v17 = 0;
    if (fabs(v16) <= 0.5)
    {
      double v18 = v16 + 0.076036 + *((double *)this + 8);
      double v19 = v18 / 1000.0;
      if (v18 / 1000.0 <= 0.0)
      {
        double v20 = 0.0;
        if (v18 / 1000.0 < 0.0) {
          double v20 = ceil(v19 + -0.5);
        }
      }
      else
      {
        double v20 = floor(v19 + 0.5);
      }
      double v21 = v18 - v20 * 1000.0;
      double v22 = -(v18 + -v20 * 1000.0);
      double v28 = 0.0;
      if (v8 <= 0xFF9222FE) {
        double v23 = (double)v8;
      }
      else {
        double v23 = (double)(int)v8;
      }
      BlueFin::GlPeTimeManager::GetDtsS(*(void *)this, v23, 0, 0, &v28, 0);
      GlCustomLog(15, "PPS::SetPpsAiding(timestamp:%u  deltaMs:%+.6lf  periodMs:%.6lf PpsLms %.6lf)\n", v8, v22, (v28 + 1.0) * 1000.0, (double)v8 - v21);
      v24.n128_f64[0] = (v28 + 1.0) * 1000.0;
      (*(void (**)(double, __n128))(**((void **)this + 6) + 272))(v22, v24);
      BlueFin::GlPeTimeManager::lmsToLegacyGlStruct(*(unsigned int **)this, 2u, 0, (uint64_t)this + 24, v23);
      double v25 = UncUs * 1000.0 + 0.5;
      double v26 = fmod(v25, 4294967300.0);
      if (v25 <= 4294967300.0) {
        double v26 = v25;
      }
      if (v26 < -4294967300.0) {
        double v26 = -fmod(-v26, 4294967300.0);
      }
      LODWORD(v17) = v26;
      if (v26 < 0.0) {
        uint64_t v17 = --v26;
      }
      else {
        uint64_t v17 = v17;
      }
      uint64_t v15 = 0x100000000;
    }
  }
  *(void *)(*((void *)this + 1) + 7268) = v15 | v5 | v17;
  return v2;
}

uint64_t BlueFin::GlDbgMeIf::SetOscOffsAiding(BlueFin::GlDbgMeIf *this, double a2, double a3)
{
  return (*(uint64_t (**)(double, double))(**((void **)this + 2) + 320))(a2, a3);
}

void BlueFin::GlMeAidingListener::SetOscOffsAiding(BlueFin::GlMeAidingListener *this, uint64_t a2, float a3, float a4, int a5)
{
}

uint64_t BlueFin::GlDineCtrl::SetOscOffsAiding(BlueFin::GlDineCtrl *this, int a2, double a3, double a4, int a5)
{
  double v7 = fabs(a3 * 1000000.0);
  double v8 = a3 * 1000000000.0;
  double v9 = a4 * 1000000000.0;
  if (a5) {
    uint64_t v10 = 84;
  }
  else {
    uint64_t v10 = 70;
  }
  if (v7 > 6.9000001) {
    return GlCustomLog(14, "GlDineCtrl::SetOscOffsAiding(%u, %.1f, %.1f, %c) - Rejected!  Oscillator offset out of range. \n", a2, v8, v9, v10);
  }
  GlCustomLog(15, "GlDineCtrl::SetOscOffsAiding(%u, %.1f, %.1f, %c)\n", a2, v8, v9, v10);
  uint64_t v15 = *(uint64_t (**)(__n128, __n128))(*((void *)this + 3695) + 32);

  v13.n128_f32[0] = a3;
  v14.n128_f32[0] = a4;
  return v15(v13, v14);
}

uint64_t BlueFin::GlReqSm::RequestAiding(BlueFin::GlReqSm *this, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](this, a2);
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v3 = (int *)(v2 + 54548);
  uint64_t v4 = v2 + 33192;
  int v5 = *(_DWORD *)(v2 + 12192);
  BOOL v6 = (*(unsigned char *)(v2 + 10849) & 0x80) != 0 && *(void *)(*(void *)v4 + 128) != 0;
  bzero(&v11, 0x38A8uLL);
  if ((v5 & 0x200) != 0 || v6)
  {
    BlueFin::GlPeAsstMgr::GetAsstStat(*(uint64_t **)(v2 + 6288), &v11, *v3);
    int Accuracymask = BlueFin::GlPeReqBag::GetAccuracymask((BlueFin::GlPeReqBag *)(v2 + 10880));
    __int16 v12 = (int)BlueFin::GlPeReqBag::GetTimeTillTimeoutMs((BlueFin::GlPeReqBag *)(v2 + 10880), 0) / 1000;
    __int16 v14 = 0;
    *uint64_t v3 = 0;
    if ((v5 & 0x200) != 0)
    {
      BlueFin::GlPeReqBag::SetAsstStat(v2 + 10880, (uint64_t)&v11);
      double v7 = "REQ";
      goto LABEL_10;
    }
  }
  else
  {
    BlueFin::GlPeAsstMgr::InitAidRequest(&v11, *v3);
    *uint64_t v3 = 0;
  }
  double v7 = "!req";
LABEL_10:
  double v8 = *(void (**)(void, int *))(*(void *)v4 + 128);
  if (v8)
  {
    v8(*(void *)(*(void *)v4 + 8), &v11);
    double v9 = "CB";
  }
  else
  {
    double v9 = "!cb";
  }
  return BlueFin::GlPeAsstMgr::DumpAidRequest(v7, v9, &v11);
}

void BlueFin::GlPeAsstMgr::InitAidRequest(_DWORD *a1, int a2)
{
  uint64_t v4 = a1 + 2913;
  int v5 = a1 + 1485;
  bzero(a1, 0x38A8uLL);
  if (a2)
  {
    if ((a2 & 7) != 0) {
      *a1 = 2 * (a2 & 7);
    }
    GlCustomLog(14, "<glAid> WarmStart(need 0x%x) ulAidMask 0x%x\n", a2, 2 * (a2 & 7));
  }
  uint64_t v6 = 0;
  *((unsigned char *)a1 + 67) = 2;
  *((int64x2_t *)a1 + 3) = vdupq_n_s64(0x4197D783FF99999AuLL);
  a1[4] = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 38) = 0u;
  *(_OWORD *)(a1 + 42) = 0u;
  *(_OWORD *)(a1 + 46) = 0u;
  *(_OWORD *)(a1 + 5BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  a1[56] = 0;
  *((unsigned char *)a1 + 228) = 0;
  do
  {
    double v7 = &a1[v6];
    *((_WORD *)v7 + 116) = 8;
    *(void *)(v7 + 59) = 0x8000000080000000;
    v7[61] = 0x7FFFFFFF;
    v6 += 4;
  }
  while (v6 != 712);
  uint64_t v8 = 0;
  a1[770] = 1;
  *((unsigned char *)a1 + 3084) = 0;
  do
  {
    double v9 = &a1[v8];
    *((_WORD *)v9 + 1544) = 8;
    *(void *)&a1[v8 + 773] = 0x8000000080000000;
    v9[775] = 0x7FFFFFFF;
    v8 += 4;
  }
  while (v8 != 712);
  a1[1484] = 2;
  *int v5 = 0;
  uint64_t v10 = v5 + 4;
  uint64_t v11 = 178;
  do
  {
    *(_WORD *)uint64_t v10 = 8;
    *(void *)(v10 + 4) = 0x8000000080000000;
    *((_DWORD *)v10 + 3) = 0x7FFFFFFF;
    v10 += 16;
    --v11;
  }
  while (v11);
  a1[2198] = 3;
  v5[2856] = 0;
  __int16 v12 = v5 + 2860;
  uint64_t v13 = 178;
  do
  {
    *(_WORD *)__int16 v12 = 8;
    *(void *)(v12 + 4) = 0x8000000080000000;
    *((_DWORD *)v12 + 3) = 0x7FFFFFFF;
    v12 += 16;
    --v13;
  }
  while (v13);
  a1[2912] = 4;
  unsigned char *v4 = 0;
  __int16 v14 = v4 + 4;
  uint64_t v15 = 178;
  do
  {
    *(_WORD *)__int16 v14 = 8;
    *(void *)(v14 + 4) = 0x8000000080000000;
    *((_DWORD *)v14 + 3) = 0x7FFFFFFF;
    v14 += 16;
    --v15;
  }
  while (v15);
}

unsigned __int8 *BlueFin::GlPfaStat::SetPfaData(BlueFin::GlPfaStat *this, const BlueFin::GlSvIdSet *a2, const BlueFin::GlSvIdSet *a3)
{
  unsigned __int8 v8 = *((unsigned char *)a2 + 8);
  memcpy(v12, *(const void **)a2, 4 * v8);
  __int16 v10 = 0;
  unsigned __int8 v9 = 0;
  int v11 = v12[0];
  BlueFin::GlSetIterator::operator++(&v8);
  while (v9 != v8)
  {
    if ((_BYTE)v10)
    {
      if (v10 >= 0x21u)
      {
        if (v10 < 0x34u) {
          goto LABEL_11;
        }
        uint64_t v6 = (BlueFin::GlPfaStat *)((char *)this + 16);
        if (v10 >= 0x42u)
        {
          if (v10 < 0x4Cu) {
            goto LABEL_11;
          }
          uint64_t v6 = (BlueFin::GlPfaStat *)((char *)this + 32);
          if (v10 >= 0x8Bu)
          {
            uint64_t v6 = (BlueFin::GlPfaStat *)((char *)this + 48);
            if (v10 >= 0xAFu) {
              goto LABEL_11;
            }
          }
        }
      }
      else
      {
        uint64_t v6 = this;
        if (!this) {
          goto LABEL_11;
        }
      }
      ++*((_DWORD *)v6 + 2);
    }
LABEL_11:
    BlueFin::GlSetIterator::operator++(&v8);
  }
  unsigned __int8 v8 = *((unsigned char *)a3 + 8);
  memcpy(v12, *(const void **)a3, 4 * v8);
  __int16 v10 = 0;
  unsigned __int8 v9 = 0;
  int v11 = v12[0];
  for (double result = BlueFin::GlSetIterator::operator++(&v8); v9 != v8; double result = BlueFin::GlSetIterator::operator++(&v8))
  {
    if ((_BYTE)v10)
    {
      if (v10 >= 0x21u)
      {
        if (v10 < 0x34u) {
          continue;
        }
        double v7 = (BlueFin::GlPfaStat *)((char *)this + 16);
        if (v10 >= 0x42u)
        {
          if (v10 < 0x4Cu) {
            continue;
          }
          double v7 = (BlueFin::GlPfaStat *)((char *)this + 32);
          if (v10 >= 0x8Bu)
          {
            double v7 = (BlueFin::GlPfaStat *)((char *)this + 48);
            if (v10 >= 0xAFu) {
              continue;
            }
          }
        }
      }
      else
      {
        double v7 = this;
        if (!this) {
          continue;
        }
      }
      ++*((_DWORD *)v7 + 3);
    }
  }
  return result;
}

BOOL BlueFin::GlMeSrdAidingMgr::RefreshAiding(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v6 = (int **)(v2 + 784);
  double v7 = (int **)(v2 + 1432);
  uint64_t v8 = BlueFin::GlSetBase::operator&=(v2 + 1432, v2 + 784);
  BlueFin::GlSetBase::operator|=(v8, v5 + 1184);
  int v9 = BlueFin::GlMeSrdAidingMgr::PackTcxoAiding(v5, v14, (uint64_t)v15);
  unsigned int v10 = BlueFin::GlMeSrdAidingMgr::PackSvIdAiding(v5, (uint64_t)&v14[v9], (uint64_t)&v15[9 * v9]) + v9;
  if (v10 >= 0xCC)
  {
    __int16 v12 = "ulNumAiding <= _DIM(otaAiding_l)";
    DeviceFaultNotify("glmesrd_aiding_mgr.cpp", 333, "RefreshAiding", (char)"ulNumAiding <= _DIM(otaAiding_l)");
    int v13 = 333;
    goto LABEL_12;
  }
  if (v10 > (*(unsigned int (**)(void))(**(void **)(v5 + 16) + 392))(*(void *)(v5 + 16)))
  {
    __int16 v12 = "ulNumAiding <= m_rAsicConfigIfc.GetMaxAidIndex()";
    DeviceFaultNotify("glmesrd_aiding_mgr.cpp", 334, "RefreshAiding", (char)"ulNumAiding <= m_rAsicConfigIfc.GetMaxAidIndex()");
    int v13 = 334;
LABEL_12:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_aiding_mgr.cpp", v13, v12);
  }
  if (v10) {
    BlueFin::GlMeSrdAidingMgr::SendAidingBatch(v4, v10, (uint64_t)v14, (uint64_t)v15);
  }
  if (BlueFin::GlSetBase::HasAll(v7, v6)
    && (BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)v6) || BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)v7)))
  {
    bzero(*(void **)(v5 + 1432), ((4 * *(unsigned __int8 *)(v5 + 1440) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  }
  return v10 != 0;
}

BOOL BlueFin::GlPeKFAltAsst::Update(__int16 *a1, double *a2, double a3, float a4)
{
  if (!*((unsigned char *)a1 + 2)) {
    return 0;
  }
  if (*a1 == -1)
  {
    double v10 = *a2;
LABEL_17:
    double v16 = a2[1];
    goto LABEL_18;
  }
  uint64_t v5 = (unsigned __int16 *)(qword_26B434048 + 12 * *a1);
  unsigned int v6 = *v5;
  *(float *)&unsigned int v7 = (float)(char)((v6 >> 9) - 50);
  LOWORD(a4) = v5[1];
  float v8 = *(float *)&v7 + (float)((float)LODWORD(a4) * 0.0001);
  LOWORD(v7) = v5[3];
  float v9 = v8 + (float)((float)v7 * 0.0001);
  double v10 = *a2;
  double v11 = v8;
  double v12 = v9;
  if (*a2 < v11 || v10 > v12) {
    goto LABEL_17;
  }
  LOWORD(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v5[4];
  *(float *)&double v11 = (float)LODWORD(v11);
  LOWORD(v12) = v5[2];
  float v14 = (float)*v5 + (float)((float)LODWORD(v12) * 0.0001);
  float v15 = -v14;
  if ((v6 & 0x100) == 0) {
    float v15 = v14;
  }
  double v16 = a2[1];
  double v17 = (float)(v15 + (float)(*(float *)&v11 * 0.0001));
  if (v16 >= v15 && v16 <= v17) {
    return 1;
  }
LABEL_18:
  float v20 = v10;
  float v21 = v16;
  Regiounint64_t n = BlueFin::GlPeLatLonRegionSet::findRegion((BlueFin::GlPeLatLonRegionSet *)&BlueFin::GlPeKFAltAsst::m_otCityFine, v20, v21);
  *a1 = Region;
  if (Region != -1) {
    return *((unsigned char *)a1 + 2) != 0;
  }
  return 0;
}

#error "2639EA7F8: call analysis failed (funcsize=499)"

uint64_t BlueFin::GlPeKF::GetResetSignalIdSet@<X0>(BlueFin::GlPeKF *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 12) = 0u;
  uint64_t v4 = (_OWORD *)(a2 + 12);
  *(void *)a2 = a2 + 12;
  *(unsigned char *)(a2 + 8) = 19;
  *(_OWORD *)(a2 + 28) = 0u;
  *(_OWORD *)(a2 + 44) = 0u;
  *(_OWORD *)(a2 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  if (*((char *)this + 1152) >= 5 && *((_DWORD *)this + 192) >= 0xEA61u)
  {
    BlueFin::GlSetBase::operator=(a2, (uint64_t)this + 1160);
    long long v6 = *(_OWORD *)((char *)this + 1188);
    long long v7 = *(_OWORD *)((char *)this + 1220);
    _OWORD v4[2] = *(_OWORD *)((char *)this + 1204);
    v4[3] = v7;
    *(_OWORD *)((char *)v4 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *((_OWORD *)this + 77);
    _OWORD *v4 = *(_OWORD *)((char *)this + 1172);
    v4[1] = v6;
    *((unsigned char *)this + 1152) = 0;
    bzero(*((void **)this + 145), ((4 * *((unsigned __int8 *)this + 1168) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  }
  BlueFin::GlSetBase::operator|=(a2, (uint64_t)this + 1248);
  bzero(*((void **)this + 156), ((4 * *((unsigned __int8 *)this + 1256) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  BlueFin::GlSetBase::operator|=(a2, (uint64_t)this + 1424);
  bzero(*((void **)this + 178), ((4 * *((unsigned __int8 *)this + 1432) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  uint64_t result = BlueFin::GlPeKF::InFlightMode(this);
  if (result)
  {
    float v9 = (uint64_t *)((char *)this + 92480);
    if (!*((unsigned char *)this + 92889))
    {
      BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)v10, (unsigned int *)v11, 0x13u, (const void **)this + 11578);
      int v13 = &v15;
      char v14 = 19;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      memset(v18, 0, sizeof(v18));
      BlueFin::GlSetBase::OperatorBinaryInversion((uint64_t)v10, (int **)&v13);
      BlueFin::GlSetBase::operator=((uint64_t)v10, (uint64_t)&v13);
      v11[1] = v16;
      _OWORD v11[2] = v17;
      *(_OWORD *)double v12 = *(_OWORD *)v18;
      *(_OWORD *)&v12[12] = *(_OWORD *)&v18[12];
      v11[0] = v15;
      BlueFin::GlSignalIdSet::setSignalIdLimits((BlueFin::GlSignalIdSet *)v10);
      BlueFin::GlSetBase::operator|=(a2, (uint64_t)v10);
    }
    uint64_t result = *v9;
    if (*v9) {
      return (*(uint64_t (**)(uint64_t, uint64_t, double))(*(void *)result + 96))(result, 84, 0.0);
    }
  }
  return result;
}

BOOL BlueFin::GlPeKF::InFlightMode(BlueFin::GlPeKF *this)
{
  int v1 = *((_DWORD *)this + 23223);
  BOOL v2 = v1 == 2;
  uint64_t v3 = *((void *)this + 11555);
  if (v3)
  {
    BOOL v2 = *(_DWORD *)(v3 + 4216) == 10 && *(unsigned char *)(v3 + 4224) && *(unsigned __int8 *)(v3 + 4226) == 0;
    if (v1 == 2) {
      BOOL v2 = 1;
    }
  }
  if (*((unsigned char *)this + 92888)) {
    BOOL v4 = v1 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  return v4 || v2;
}

uint64_t BlueFin::GlPeKFAltAsst::altAsstFirstFix(uint64_t a1, uint64_t a2, double *a3, unsigned int a4)
{
  if (!*(unsigned char *)(a1 + 2)) {
    return 0;
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 1157234688;
  float v7 = *a3;
  float v8 = a3[1];
  if (BlueFin::GlPeLatLonRegionSet::disabledRegion((BlueFin::GlPeLatLonRegionSet *)&BlueFin::GlPeKFAltAsst::m_otCityFine, v7, v8))return 0; {
  Regiounint64_t n = BlueFin::GlPeLatLonRegionSet::findRegion((BlueFin::GlPeLatLonRegionSet *)&BlueFin::GlPeKFAltAsst::m_otCityFine, v7, v8);
  }
  unsigned __int16 v11 = Region;
  if (Region << 16 > -65536)
  {
    if ((Region & 0x8000) == 0)
    {
      unsigned int v12 = *(unsigned __int16 *)(qword_26B434048 + 12 * (unsigned __int16)Region + 10);
      float v13 = (float)(char)(5 * (v12 & 0xF) + 5);
      double v14 = *a3;
      goto LABEL_48;
    }
    return 0;
  }
  double v14 = *a3;
  double v15 = 0.5;
  if (*a3 <= 0.0 && (double v15 = -0.5, v14 >= 0.0))
  {
    unsigned int v17 = 39;
  }
  else
  {
    unsigned int v16 = ((int)(v14 + v15) << 16) + 2555904;
    if (v16 > 0x650000) {
      return 0;
    }
    unsigned int v17 = HIWORD(v16);
  }
  __int16 v18 = *(_WORD *)(qword_26B434058 + 4 * v17);
  if (!v18) {
    return 0;
  }
  float v19 = (float)a4 * 0.0000089993;
  unsigned int v20 = *(unsigned __int16 *)(qword_26B434058 + 4 * v17 + 2);
  if (v20 > (unsigned __int16)(v18 - 1))
  {
    unsigned int v21 = (unsigned __int16)(v18 - 1);
    uint64_t v22 = qword_26B434048;
    double v23 = floor(fabs(v14) / 15.0);
    double v24 = fmod(v23, 4294967300.0);
    if (v23 <= 4294967300.0) {
      double v24 = v23;
    }
    uint64_t v27 = (int)v24;
    double v28 = (_WORD *)(v22 + 12 * v21 + 4);
    do
    {
      unsigned int v29 = (unsigned __int16)*(v28 - 2);
      int v30 = *(v28 - 2);
      LOWORD(v25) = *(v28 - 1);
      *(float *)&unsigned int v31 = (float)LODWORD(v25);
      float v32 = (float)(char)((v29 >> 9) - 50) + (float)(*(float *)&v31 * 0.0001);
      LOWORD(v3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v28[1];
      float v25 = v32 + (float)((float)v31 * 0.0001);
      LOWORD(v26) = *v28;
      float v33 = (float)LODWORD(v26);
      float v34 = -(float)((float)v30 + (float)(v33 * 0.0001));
      if ((v29 & 0x100) == 0) {
        float v34 = (float)v30 + (float)(v33 * 0.0001);
      }
      LOWORD(v33) = v28[2];
      float v26 = v34 + (float)((float)LODWORD(v33) * 0.0001);
      if (v34 >= v8 || v26 <= v8)
      {
        if (v32 >= v7 || v25 <= v7)
        {
          float v37 = v7 - v25;
          if (v32 <= v7) {
            float v38 = v37;
          }
          else {
            float v38 = v32 - v7;
          }
          float v39 = v34 - v8;
          float v40 = v8 - v26;
          if (v34 <= v8) {
            float v39 = v40;
          }
          float v25 = v39 * flt_263BBC360[v27];
          float v26 = v25 + (float)(v38 * 0.4);
          if (v38 <= v25) {
            float v41 = v25 + (float)(v38 * 0.4);
          }
          else {
            float v41 = v38 + (float)(v25 * 0.4);
          }
        }
        else
        {
          float v42 = v34 - v8;
          if (v34 <= v8) {
            float v42 = v8 - v26;
          }
          float v25 = flt_263BBC360[v27];
          float v41 = v42 * v25;
        }
      }
      else if (v25 >= v7)
      {
        float v41 = v32 - v7;
      }
      else
      {
        float v41 = v7 - v25;
      }
      v28 += 6;
      if (v41 < v19)
      {
        unsigned __int16 v11 = v21;
        float v19 = v41;
      }
      LOWORD(v2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v21 + 1;
    }
    while (v20 != (unsigned __int16)v21);
  }
  if ((v11 & 0x8000) != 0) {
    return 0;
  }
  unsigned int v12 = *(unsigned __int16 *)(qword_26B434048 + 12 * v11 + 10);
  float v13 = fminf((float)(char)(5 * (v12 & 0xF) + 5) + (float)((float)(v19 * 111120.0) * 0.067), 400.0);
LABEL_48:
  uint64_t v43 = *((void *)a3 + 1);
  *(double *)a2 = v14;
  *(void *)(a2 + 8) = v43;
  *(double *)(a2 + 16) = (double)(int)((v12 >> 4) - 100);
  *(float *)(a2 + 24) = v13;
  return 1;
}

uint64_t BlueFin::GlPeLatLonRegionSet::disabledRegion(BlueFin::GlPeLatLonRegionSet *this, float a2, float a3)
{
  double v6 = a2;
  if (a2 > 0.0)
  {
    double v7 = 0.5;
LABEL_6:
    int v8 = (int)(v6 + v7);
    goto LABEL_7;
  }
  if (a2 < 0.0)
  {
    double v7 = -0.5;
    goto LABEL_6;
  }
  int v8 = 0;
LABEL_7:
  int v9 = v8 - *((_DWORD *)this + 10);
  if ((v9 & 0x8000) != 0) {
    return 0;
  }
  uint64_t v10 = (__int16)v9;
  if ((int)v10 >= *((_DWORD *)this + 6)) {
    return 0;
  }
  __int16 v11 = *(_WORD *)(*(uint64_t (**)(BlueFin::GlPeLatLonRegionSet *, uint64_t))(*(void *)this + 40))(this, v10);
  if (!v11) {
    return 0;
  }
  unsigned int v12 = *(unsigned __int16 *)((*(uint64_t (**)(BlueFin::GlPeLatLonRegionSet *, uint64_t))(*(void *)this + 40))(this, v10)+ 2);
  if (v12 <= (unsigned __int16)(v11 - 1)) {
    return 0;
  }
  uint64_t v15 = (unsigned __int16)(v11 - 1) + 1;
  for (uint64_t i = (_WORD *)(*((void *)this + 2) + 12 * (unsigned __int16)(v11 - 1) + 6); ; i += 6)
  {
    unsigned int v17 = (unsigned __int16)*(i - 3);
    int v18 = *(i - 3);
    LOWORD(v13) = *(i - 2);
    *(float *)&unsigned int v19 = (float)LODWORD(v13);
    float v20 = (float)(char)((v17 >> 9) - 50) + (float)(*(float *)&v19 * 0.0001);
    LOWORD(v19) = *i;
    float v13 = v20 + (float)((float)v19 * 0.0001);
    LOWORD(v14) = *(i - 1);
    float v21 = (float)LODWORD(v14);
    float v22 = -(float)((float)v18 + (float)(v21 * 0.0001));
    if ((v17 & 0x100) == 0) {
      float v22 = (float)v18 + (float)(v21 * 0.0001);
    }
    LOWORD(v2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = i[1];
    float v14 = v22 + (float)((float)LODWORD(v21) * 0.0001);
    BOOL v23 = v22 >= a3 || v14 <= a3;
    BOOL v24 = !v23 && v20 < a2;
    BOOL v25 = !v24 || v13 <= a2;
    if (!v25 && (~(unsigned __int16)i[2] & 0xF) == 0) {
      break;
    }
    if (v12 == (unsigned __int16)v15++) {
      return 0;
    }
  }
  return 1;
}

uint64_t BlueFin::GlPeLatLonRegionSet::findRegion(BlueFin::GlPeLatLonRegionSet *this, float a2, float a3)
{
  double v6 = a2;
  if (a2 > 0.0)
  {
    double v7 = 0.5;
LABEL_6:
    int v8 = (int)(v6 + v7);
    goto LABEL_7;
  }
  if (a2 < 0.0)
  {
    double v7 = -0.5;
    goto LABEL_6;
  }
  int v8 = 0;
LABEL_7:
  int v9 = v8 - *((_DWORD *)this + 10);
  if ((v9 & 0x8000) != 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v10 = (__int16)v9;
  if ((int)v10 >= *((_DWORD *)this + 6)) {
    return 0xFFFFFFFFLL;
  }
  __int16 v11 = *(_WORD *)(*(uint64_t (**)(BlueFin::GlPeLatLonRegionSet *, uint64_t))(*(void *)this + 40))(this, v10);
  if (!v11) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v12 = *(unsigned __int16 *)((*(uint64_t (**)(BlueFin::GlPeLatLonRegionSet *, uint64_t))(*(void *)this + 40))(this, v10)+ 2);
  if (v12 <= (unsigned __int16)(v11 - 1)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = (unsigned __int16)(v11 - 1);
  for (uint64_t i = (_WORD *)(*((void *)this + 2) + 12 * result + 4); ; i += 6)
  {
    unsigned int v17 = (unsigned __int16)*(i - 2);
    int v18 = *(i - 2);
    LOWORD(v13) = *(i - 1);
    *(float *)&unsigned int v19 = (float)LODWORD(v13);
    float v20 = (float)(char)((v17 >> 9) - 50) + (float)(*(float *)&v19 * 0.0001);
    LOWORD(v19) = i[1];
    float v13 = v20 + (float)((float)v19 * 0.0001);
    LOWORD(v14) = *i;
    float v21 = (float)LODWORD(v14);
    float v22 = -(float)((float)v18 + (float)(v21 * 0.0001));
    if ((v17 & 0x100) == 0) {
      float v22 = (float)v18 + (float)(v21 * 0.0001);
    }
    LOWORD(v2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = i[2];
    float v14 = v22 + (float)((float)LODWORD(v21) * 0.0001);
    BOOL v23 = v22 >= a3 || v14 <= a3;
    BOOL v24 = !v23 && v20 < a2;
    if (v24 && v13 > a2) {
      break;
    }
    if (v12 == (unsigned __int16)++result) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t BlueFin::GlPeLatLonRegionSet::getIndex(BlueFin::GlPeLatLonRegionSet *this, int a2)
{
  return *((void *)this + 4) + 4 * a2;
}

BOOL BlueFin::GlPeExtLoc::GetExtLocMeasCount(BlueFin::GlPeExtLoc *this)
{
  uint64_t v1 = *((void *)this + 17);
  if (!v1) {
    return 0;
  }
  if (!*(unsigned char *)(v1 + 3008)) {
    return 0;
  }
  double v2 = *(double *)(v1 + 3040);
  double v3 = *(double *)(v1 + 3048);
  if (v2 * v2 + v3 * v3 >= 160000.0 || *(unsigned char *)(v1 + 3009) && !*((unsigned char *)this + 13)) {
    return 0;
  }
  BOOL result = 0;
  if (v2 > 0.0 && v2 < 100000.0 && v3 > 0.0) {
    return v3 < 100000.0;
  }
  return result;
}

uint64_t (*(*(*BlueFin::GlMeSrdAcqMgrSm::assisted_2000(uint64_t a1, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm *this, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm **this, unsigned __int8 *a2))()
{
  int v2 = *a2;
  if (v2 != 3)
  {
    if (v2 != 2) {
      return BlueFin::GlMeSrdAcqMgrSm::assisted;
    }
    uint64_t v4 = a1 + 10128;
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 64) + 1200))(*(void *)(a1 + 64))) {
      int v5 = 88;
    }
    else {
      int v5 = 84;
    }
    v6.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(v4, 5, 27, 0x33u, 0x3Du, 0xFAu, 0x2Fu, v5, 0x55u, 1);
    if ((*(unsigned int (**)(__n128))(**(void **)(a1 + 64) + 1200))(v6)) {
      int v7 = 250;
    }
    else {
      int v7 = 84;
    }
    double v8 = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 10608, 4, 26, 0x33u, 0x3Du, 0xFAu, 0xFAu, v7, 0xFAu, 1);
    int v9 = (*(uint64_t (**)(void, double))(**(void **)(a1 + 80) + 40))(*(void *)(a1 + 80), v8);
    uint64_t v10 = **(void **)(a1 + 64);
    if (v9)
    {
      if ((*(unsigned int (**)(void))(v10 + 1200))()) {
        int v11 = 89;
      }
      else {
        int v11 = 84;
      }
      v12.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12360, 3, 32, 0x45u, 0x3Du, 0x48u, 0xFAu, v11, 0x56u, 1);
      if ((*(unsigned int (**)(__n128))(**(void **)(a1 + 64) + 1200))(v12)) {
        int v13 = 89;
      }
      else {
        int v13 = 84;
      }
      BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12672, 3, 32, 0x45u, 0x3Du, 0x48u, 0xFAu, v13, 0x56u, 1);
    }
    else
    {
      if ((*(unsigned int (**)(void))(v10 + 264))()) {
        unsigned int v15 = 92;
      }
      else {
        unsigned int v15 = 72;
      }
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 64) + 1200))()) {
        int v16 = 89;
      }
      else {
        int v16 = 84;
      }
      v17.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12360, 2, 34, 0x37u, 0x3Du, v15, 0xFAu, v16, 0x56u, 1);
      if ((*(unsigned int (**)(__n128))(**(void **)(a1 + 64) + 264))(v17)) {
        unsigned int v18 = 92;
      }
      else {
        unsigned int v18 = 72;
      }
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 64) + 1200))()) {
        int v19 = 89;
      }
      else {
        int v19 = 84;
      }
      BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12672, 2, 34, 0x37u, 0x3Du, v18, 0xFAu, v19, 0x56u, 1);
    }
  }
  return 0;
}

double BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, int a8, unsigned int a9, char a10)
{
  unsigned int v18 = a9;
  int v19 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 264))(*(void *)(a1 + 32));
  if (!a10) {
    goto LABEL_24;
  }
  int v57 = v19;
  unsigned int v65 = a4;
  unsigned int v62 = a5;
  v68[0] = 1;
  *(_DWORD *)&v68[4] = 0;
  LOWORD(v69) = 0;
  uint64_t StrategyId = BlueFin::GlMeSrdSearchMgrBase::GetStrategyId((BlueFin::GlMeSrdSearchMgrBase *)a1, (const BlueFin::GlSignalId *)v68);
  v68[0] = 52;
  *(_DWORD *)&v68[4] = 0;
  LOWORD(v69) = 147;
  int v66 = BlueFin::GlMeSrdSearchMgrBase::GetStrategyId((BlueFin::GlMeSrdSearchMgrBase *)a1, (const BlueFin::GlSignalId *)v68);
  v83[0] = BlueFin::GlSvIdSet::csm_aulBeidouGeoSvIds;
  v83[1] = unk_263BAA92C;
  v77[0] = xmmword_263BAA8BC;
  long long v81 = v83;
  unsigned __int8 v82 = 8;
  long long v75 = (int *)v77;
  LOBYTE(v76) = 8;
  v77[1] = unk_263BAA8CC;
  BlueFin::GlSvIdSet::operator~((const void **)&v81, (uint64_t)&v72);
  float v21 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v78, (unsigned int *)v80, 8u, (const void **)&v75);
  *(void *)int v68 = &v70;
  LOBYTE(v69) = 8;
  long long v70 = 0u;
  long long v71 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v21, (int **)v68, &v72);
  BlueFin::GlSetBase::operator=((uint64_t)&v78, (uint64_t)v68);
  v80[0] = v70;
  v80[1] = v71;
  v68[0] = v79;
  memcpy(&v69, v78, 4 * v79);
  *(_WORD *)&_OWORD v68[2] = 0;
  v68[1] = 0;
  *(_DWORD *)&v68[4] = v69;
  BlueFin::GlSetIterator::operator++(v68);
  LOBYTE(v75) = v68[2];
  HIDWORD(v75) = 0;
  __int16 v76 = 575;
  if ((v68[2] + 67) >= 0x44u)
  {
    uint64_t v22 = BlueFin::GlSvId::s_aucSvId2gnss[v68[2]];
    if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v22] == 255) {
      HIDWORD(v75) = -1;
    }
    else {
      __int16 v76 = BlueFin::GlSignalId::s_ausGnss2signalId[v22]
    }
          + v68[2]
          - BlueFin::GlSvId::s_aucGnss2minSvId[v22];
  }
  int v63 = BlueFin::GlMeSrdSearchMgrBase::GetStrategyId((BlueFin::GlMeSrdSearchMgrBase *)a1, (const BlueFin::GlSignalId *)&v75);
  v68[0] = v82;
  memcpy(&v69, v81, 4 * v82);
  *(_WORD *)&_OWORD v68[2] = 0;
  v68[1] = 0;
  *(_DWORD *)&v68[4] = v69;
  BlueFin::GlSetIterator::operator++(v68);
  LOBYTE(v75) = v68[2];
  HIDWORD(v75) = 0;
  __int16 v76 = 575;
  if ((v68[2] + 67) >= 0x44u)
  {
    uint64_t v23 = BlueFin::GlSvId::s_aucSvId2gnss[v68[2]];
    if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v23] == 255) {
      HIDWORD(v75) = -1;
    }
    else {
      __int16 v76 = BlueFin::GlSignalId::s_ausGnss2signalId[v23]
    }
          + v68[2]
          - BlueFin::GlSvId::s_aucGnss2minSvId[v23];
  }
  int v61 = BlueFin::GlMeSrdSearchMgrBase::GetStrategyId((BlueFin::GlMeSrdSearchMgrBase *)a1, (const BlueFin::GlSignalId *)&v75);
  v68[0] = -117;
  *(_DWORD *)&v68[4] = 0;
  LOWORD(v69) = 453;
  int v60 = BlueFin::GlMeSrdSearchMgrBase::GetStrategyId((BlueFin::GlMeSrdSearchMgrBase *)a1, (const BlueFin::GlSignalId *)v68);
  v68[0] = 33;
  *(_DWORD *)&v68[4] = 0;
  LOWORD(v69) = 128;
  int v59 = BlueFin::GlMeSrdSearchMgrBase::GetStrategyId((BlueFin::GlMeSrdSearchMgrBase *)a1, (const BlueFin::GlSignalId *)v68);
  v68[0] = v79;
  memcpy(&v69, v78, 4 * v79);
  *(_WORD *)&_OWORD v68[2] = 0;
  v68[1] = 0;
  *(_DWORD *)&v68[4] = v69;
  BlueFin::GlSetIterator::operator++(v68);
  LOBYTE(v75) = v68[2];
  HIDWORD(v75) = 3;
  __int16 v76 = 575;
  if ((v68[2] + 67) >= 0x44u)
  {
    uint64_t v24 = BlueFin::GlSvId::s_aucSvId2gnss[v68[2]];
    if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v24 + 21] == 255) {
      HIDWORD(v75) = -1;
    }
    else {
      __int16 v76 = BlueFin::GlSignalId::s_ausGnss2signalId[v24]
    }
          + v68[2]
          - BlueFin::GlSvId::s_aucGnss2minSvId[v24]
          + 3 * BlueFin::GlSvId::s_aucGnss2numSvId[v24];
  }
  int v64 = BlueFin::GlMeSrdSearchMgrBase::GetStrategyId((BlueFin::GlMeSrdSearchMgrBase *)a1, (const BlueFin::GlSignalId *)&v75);
  if (StrategyId != a2
    || v66 != a3
    || v59 != a7
    || v63 != v65
    || v61 != a5
    || v60 != a6
    || v64 != a9)
  {
    unsigned int v58 = a6;
    unsigned int v56 = a7;
    long long v75 = (int *)v77;
    LOBYTE(v76) = 4;
    v77[0] = 0uLL;
    long long v72 = (int *)v74;
    char v73 = 4;
    v74[1] = 0;
    v74[0] = 0;
    v68[0] = *(unsigned char *)(a1 + 136);
    memcpy(&v69, *(const void **)(a1 + 128), 4 * v68[0]);
    *(_WORD *)&_OWORD v68[2] = 0;
    v68[1] = 0;
    *(_DWORD *)&v68[4] = v69;
    BlueFin::GlSetIterator::operator++(v68);
    if (v68[1] == v68[0])
    {
LABEL_22:
      BlueFin::GlSetBase::operator|=(a1 + 192, (uint64_t)&v75);
      BlueFin::GlSetBase::operator|=(a1 + 224, (uint64_t)&v72);
      a7 = v56;
      a6 = v58;
      unsigned int v18 = a9;
      a5 = v62;
      goto LABEL_23;
    }
    uint64_t v27 = BlueFin::GlSvId::s_aucSvId2gnss;
    while (1)
    {
      unint64_t v28 = v68[2];
      BlueFin::GlMeSrdSatMgr::GetSvid(*(void **)(a1 + 16), v68[2], &v67);
      int v29 = v67;
      unsigned int v30 = v27[v67];
      if (StrategyId == a2 || (v30 <= 6 ? (BOOL v31 = ((1 << v30) & 0x49) == 0) : (BOOL v31 = 1), v31))
      {
        if (v66 == a3 || v30 != 2)
        {
          uint64_t v39 = StrategyId;
          float v40 = v27;
          unsigned int v41 = v67 - 81;
          if (v63 != v65
            && v41 <= 0x34
            && !BlueFin::GlMeSrdSatMgr::GetSignalIndex(*(BlueFin::GlMeSrdSatMgr **)(a1 + 16), v28, 0))
          {
            uint64_t StartupBsId = BlueFin::GlMeSrdSatMgr::GetStartupBsId(*(BlueFin::GlMeSrdSatMgr **)(a1 + 16), v28);
            int v43 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, v28, StartupBsId, v65);
LABEL_64:
            if (v43) {
              int v52 = v72;
            }
            else {
              int v52 = v75;
            }
            float v38 = &v52[v28 >> 5];
            uint64_t v27 = v40;
            goto LABEL_74;
          }
          if (v64 != a9
            && v41 <= 0x34
            && BlueFin::GlMeSrdSatMgr::GetSignalIndex(*(BlueFin::GlMeSrdSatMgr **)(a1 + 16), v28, 0) == 3)
          {
            uint64_t v42 = BlueFin::GlMeSrdSatMgr::GetStartupBsId(*(BlueFin::GlMeSrdSatMgr **)(a1 + 16), v28);
            int v43 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, v28, v42, a9);
            goto LABEL_64;
          }
          if (v61 != v62
            && (v29 - 76) <= 0x3E
            && ((1 << (v29 - 76)) & 0x7C0000000000001FLL) != 0
            && !BlueFin::GlMeSrdSatMgr::GetSignalIndex(*(BlueFin::GlMeSrdSatMgr **)(a1 + 16), v28, 0))
          {
            uint64_t v54 = BlueFin::GlMeSrdSatMgr::GetStartupBsId(*(BlueFin::GlMeSrdSatMgr **)(a1 + 16), v28);
            int v55 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, v28, v54, v62);
            uint64_t v46 = v28 >> 5;
            uint64_t v27 = v40;
            if (!v55)
            {
LABEL_72:
              unsigned __int16 v47 = v75;
LABEL_73:
              float v38 = &v47[v46];
LABEL_74:
              uint64_t StrategyId = v39;
              goto LABEL_75;
            }
LABEL_58:
            unsigned __int16 v47 = v72;
            goto LABEL_73;
          }
          uint64_t v27 = v40;
          if (v64 != a9
            && (v29 - 76) <= 0x3E
            && ((1 << (v29 - 76)) & 0x7C0000000000001FLL) != 0
            && BlueFin::GlMeSrdSatMgr::GetSignalIndex(*(BlueFin::GlMeSrdSatMgr **)(a1 + 16), v28, 0) == 3)
          {
            uint64_t v44 = BlueFin::GlMeSrdSatMgr::GetStartupBsId(*(BlueFin::GlMeSrdSatMgr **)(a1 + 16), v28);
            int v45 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, v28, v44, a9);
            uint64_t v46 = v28 >> 5;
            if (!v45) {
              goto LABEL_72;
            }
            goto LABEL_58;
          }
          if (v60 != v58 && v30 == 5)
          {
            uint64_t v48 = BlueFin::GlMeSrdSatMgr::GetStartupBsId(*(BlueFin::GlMeSrdSatMgr **)(a1 + 16), v28);
            int v49 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, v28, v48, v58);
            uint64_t v50 = v28 >> 5;
            uint64_t StrategyId = v39;
            if (v49) {
              float v38 = &v72[v50];
            }
            else {
              float v38 = &v75[v50];
            }
            goto LABEL_75;
          }
          uint64_t StrategyId = v39;
          if (v59 == v56 || v30 != 1) {
            goto LABEL_76;
          }
          uint64_t v53 = BlueFin::GlMeSrdSatMgr::GetStartupBsId(*(BlueFin::GlMeSrdSatMgr **)(a1 + 16), v28);
          int v37 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, v28, v53, v56);
        }
        else
        {
          uint64_t v36 = BlueFin::GlMeSrdSatMgr::GetStartupBsId(*(BlueFin::GlMeSrdSatMgr **)(a1 + 16), v28);
          int v37 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(void *)a1 + 64))(a1, v28, v36, a3);
        }
        unint64_t v34 = v28 >> 5;
        if (!v37)
        {
LABEL_40:
          unsigned int v35 = v75;
          goto LABEL_41;
        }
      }
      else
      {
        uint64_t v32 = BlueFin::GlMeSrdSatMgr::GetStartupBsId(*(BlueFin::GlMeSrdSatMgr **)(a1 + 16), v28);
        int v33 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(void *)a1 + 64))(a1, v28, v32, a2);
        unint64_t v34 = v28 >> 5;
        if (!v33) {
          goto LABEL_40;
        }
      }
      unsigned int v35 = v72;
LABEL_41:
      float v38 = &v35[v34];
LABEL_75:
      *v38 |= 1 << v28;
LABEL_76:
      BlueFin::GlSetIterator::operator++(v68);
      if (v68[1] == v68[0]) {
        goto LABEL_22;
      }
    }
  }
LABEL_23:
  int v19 = v57;
  a4 = v65;
LABEL_24:
  if (v19) {
    int v25 = a8;
  }
  else {
    int v25 = 250;
  }
  *(_DWORD *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a2;
  *(_DWORD *)(a1 + 44) = a3;
  *(_DWORD *)(a1 + 48) = a4;
  *(_DWORD *)(a1 + 52) = a5;
  *(_DWORD *)(a1 + 56) = a6;
  *(_DWORD *)(a1 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a7;
  *(_DWORD *)(a1 + 64) = v25;
  *(_DWORD *)(a1 + 68) = v18;
  return BlueFin::GlMeSrdSearchMgrBase::RemoveInvalidSvId((BlueFin::GlMeSrdSearchMgrBase *)a1, (BlueFin::GlSvIdSet *)(a1 + 256));
}

BOOL BlueFin::GlReqSm::ConstellationAware(BlueFin::GlReqSm *this, ...)
{
  va_start(va, this);
  uint64_t v1 = (char *)this + 54556;
  if (*((unsigned char *)this + 54556)) {
    return 1;
  }
  uint64_t v4 = 0;
  int v5 = *(_DWORD *)(*((void *)this + 786) + 120012);
  BOOL v6 = v5 == 1;
  BOOL v7 = v5 != 1;
  if (v6) {
    int v8 = 10;
  }
  else {
    int v8 = 22;
  }
  if (v6) {
    unsigned int v9 = 10;
  }
  else {
    unsigned int v9 = 30;
  }
  int v10 = *(unsigned __int8 *)(*((void *)this + 784) + 278);
  v21[0] = v9;
  if (v10) {
    unsigned int v11 = v8;
  }
  else {
    unsigned int v11 = 0;
  }
  v21[1] = 4 * v7;
  void v21[2] = v11;
  int v22 = 0;
  do
  {
    __n128 v12 = (char *)&v23 + v4;
    *(uint64_t *)((char *)&v23 + v4 + 12) = 0;
    *(void *)__n128 v12 = (char *)&v23 + v4 + 12;
    v12[8] = 2;
    v4 += 24;
  }
  while (v4 != 168);
  for (unsigned int i = 0; i != 7; ++i)
  {
    BlueFin::GlPeAlmMgr::GetValidity((uint64_t *)(*((void *)this + 786) + 34112), i, 0, (uint64_t)&v20);
    uint64_t v14 = BlueFin::GlGnssSet::operator()((uint64_t)&v23, i);
    BlueFin::GlSetBase::operator|=(v14, (uint64_t)&v20);
  }
  uint64_t v15 = 0;
  int v16 = (void *)(*((void *)this + 786) + 120968);
  do
  {
    BlueFin::GlSetBase::operator|=((uint64_t)&v23 + v15, *v16 + v15);
    v15 += 24;
  }
  while (v15 != 168);
  uint64_t v17 = 0;
  *uint64_t v1 = 1;
  while (1)
  {
    unsigned int v18 = (BlueFin::GlSetBase *)BlueFin::GlGnssSet::operator()((uint64_t)&v23, v17);
    if (v21[v17] > BlueFin::GlSetBase::Cnt(v18)) {
      break;
    }
    if (++v17 == 7) {
      goto LABEL_23;
    }
  }
  *uint64_t v1 = 0;
LABEL_23:
  BOOL v19 = v9 <= BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)&v23)
     && v11 <= BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)va);
  v1[1] = v19;
  return *v1 != 0;
}

uint64_t BlueFin::GlSetBase::operator|=(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(result + 8);
  if (v2 != *(unsigned __int8 *)(a2 + 8))
  {
    DeviceFaultNotify("glutl_set.cpp", 712, "operator|=", (char)"m_ucUlongSize == otRightOperand.m_ucUlongSize");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_set.cpp", 712, "m_ucUlongSize == otRightOperand.m_ucUlongSize");
  }
  if (*(unsigned char *)(result + 8))
  {
    double v3 = *(int **)a2;
    uint64_t v4 = *(_DWORD **)result;
    do
    {
      int v5 = *v3++;
      *v4++ |= v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

__n128 BlueFin::stInitPos::stInitPos(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = &off_270EBC600;
  __n128 result = *(__n128 *)(a2 + 64);
  *(__n128 *)(a1 + 64) = result;
  *(_DWORD *)(a1 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_DWORD *)(a2 + 80);
  return result;
}

uint64_t BlueFin::GlPeFirstFix::FirstFixMgr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, uint64_t a17, BlueFin::GlPeSubsets *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,long long a25,double a26,long long a27,long long a28,long long a29,long long a30,uint64_t a31,long long a32,long long a33,long long a34,uint64_t a35,long long a36,long long a37,long long a38,char *a39,long long a40,long long a41,long long a42,long long a43,long long a44,long long a45,int32x4_t a46,uint64_t a47,int a48,unint64_t a49,long long a50,long long a51,long long a52,long long a53,long long a54,long long a55,long long a56)
{
  uint64_t v56 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v529 = v58;
  uint64_t v59 = v56;
  STACK[0x1658] = *MEMORY[0x263EF8340];
  uint64_t v60 = *(void *)v56;
  uint64_t v61 = v56 + *(void *)(*(void *)v56 - 24);
  unsigned int v62 = (_OWORD *)*v57;
  *(_OWORD *)(v61 + 8) = *(_OWORD *)*v57;
  *(void *)(v61 + 24) = *((void *)v62 + 2);
  *(void *)(v56 + *(void *)(v60 - 24) + 88) = v57[3];
  *(_DWORD *)(v56 + *(void *)(v60 - 24) + 96) = 1217552911;
  uint64_t v63 = *(void *)(v56 + 8);
  LODWORD(v62) = *(_DWORD *)v63;
  *(_DWORD *)(v56 + *(void *)(v60 - 24) + 20BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_DWORD *)v63;
  *(_DWORD *)(v56 + 296) = v62;
  uint64_t v64 = v57[1];
  if (*(unsigned char *)v64)
  {
    uint64_t v65 = *(void *)(v64 + 56);
    int v66 = *(_DWORD *)(v64 + 64);
    *(_WORD *)(v56 + 128) = 0;
    long long v67 = *(_OWORD *)(v64 + 24);
    long long v68 = *(_OWORD *)(v64 + 40);
    *(_OWORD *)(v56 + 64) = *(_OWORD *)(v64 + 8);
    *(_OWORD *)(v56 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v67;
    *(_OWORD *)(v56 + 96) = v68;
    *(void *)(v56 + 112) = v65;
    *(_DWORD *)(v56 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v66;
    char v69 = 1;
  }
  else
  {
    char v69 = 0;
  }
  *(unsigned char *)(v56 + 56) = v69;
  *(_DWORD *)(v56 + 24BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *((_DWORD *)v57 + 4);
  int v70 = *((_DWORD *)v57 + 11);
  *(unsigned char *)(v56 + 244) = v70 & 1;
  *(unsigned char *)(v56 + 245) = (v70 & 2) != 0;
  unint64_t v71 = v70 & 8;
  *(unsigned char *)(v56 + 246) = v71 != 0;
  *(unsigned char *)(v56 + 247) = (v70 & 4) != 0;
  unsigned int v72 = v70 & 0xF | *(_DWORD *)(v56 + 264) & 0xFFFFFF90 | (BlueFin::GlPeFirstFix::m_bReqTimeOutReached << 6);
  *(_DWORD *)(v56 + 264) = v72 | 0x20;
  unsigned int v73 = v72 & 0xFFFFFBDF | 0x20;
  int v74 = v72 | 0x420;
  if ((*((_DWORD *)v57 + 11) & 0x40) == 0) {
    int v74 = v73;
  }
  v516 = (unsigned char *)(v56 + 56);
  *(_DWORD *)(v56 + 264) = v74;
  if ((*((unsigned char *)v57 + 44) & 0x10) == 0) {
    *(unsigned char *)(v56 + 272) = 0;
  }
  if (!(v71 >> 3)) {
    BlueFin::GlPeFirstFix::m_bReqTimeOutReached = 0;
  }
  *(unsigned char *)(v56 + 248) = 0;
  if ((*((_DWORD *)v57 + 10) | 2) == 2) {
    *(unsigned char *)(v56 + 248) = 1;
  }
  *(void *)(v56 + 256) = v58 + 336;
  long long v75 = (unsigned __int8 *)v57[1];
  __int16 v76 = (_DWORD *)(v56 + 176);
  int v523 = *v75;
  v513 = (char *)(v56 + 176);
  if (*v75)
  {
    uint64_t v77 = *((void *)v75 + 4);
    *(unsigned char *)(v56 + 18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
    *__int16 v76 = 0;
    *(_OWORD *)(v56 + 192) = 0u;
    *(_OWORD *)(v56 + 208) = 0u;
    *(void *)(v56 + 224) = 0;
    *(_OWORD *)(v56 + 208) = *(_OWORD *)(v75 + 8);
    *(void *)(v56 + 224) = *((void *)v75 + 3);
    *(_OWORD *)(v56 + 192) = xmmword_263BBBD50;
    *(unsigned char *)(v56 + 18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
    *(unsigned char *)(v56 + 178) = 1;
    BOOL v521 = (*(_DWORD *)(v57[1] + 64) & 0xFFFFFFFE) == 2;
  }
  else
  {
    BOOL v521 = 0;
    *(unsigned char *)(v56 + 18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
    *__int16 v76 = 0;
    *(_OWORD *)(v56 + 192) = 0u;
    *(_OWORD *)(v56 + 208) = 0u;
    *(void *)(v56 + 224) = 0;
    uint64_t v77 = 0x412E848000000000;
  }
  *(void *)(v56 + 184) = v77;
  int v527 = v57;
  uint64_t v78 = v57[1];
  v509 = (BlueFin::GlPeRepeatedIsol *)(v56 + 272);
  if (*(unsigned char *)v78) {
    BOOL v515 = *(_DWORD *)(v78 + 64) > 1;
  }
  else {
    BOOL v515 = 0;
  }
  int v79 = *((_DWORD *)v57 + 11);
  STACK[0x448] = (unint64_t)&STACK[0x454];
  LOBYTE(STACK[0x450]) = 19;
  *(_OWORD *)&STACK[0x454] = 0u;
  *(_OWORD *)&STACK[0x464] = 0u;
  *(_OWORD *)&STACK[0x474] = 0u;
  *(_OWORD *)&STACK[0x484] = 0u;
  *(_OWORD *)&STACK[0x490] = 0u;
  STACK[0x3A0] = (unint64_t)&STACK[0x3AC];
  LOBYTE(STACK[0x3A8]) = 8;
  *(_OWORD *)&STACK[0x3AC] = 0u;
  *(_OWORD *)&STACK[0x3BC] = 0u;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&STACK[0x8D0], (unsigned int *)&STACK[0x8DC], 0x13u, (const void **)(v63 + 184));
  uint64_t v80 = LOBYTE(STACK[0x8D8]);
  LOBYTE(STACK[0x4A0]) = v80;
  memcpy(&STACK[0x4A8], (const void *)STACK[0x8D0], 4 * v80);
  LOWORD(STACK[0x4A2]) = 0;
  LOBYTE(STACK[0x4A1]) = 0;
  LODWORD(STACK[0x4A4]) = STACK[0x4A8];
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)&STACK[0x4A0]);
  if (LOBYTE(STACK[0x4A1]) != LOBYTE(STACK[0x4A0]))
  {
    int v81 = v515 | ((v79 & 0x20) >> 5);
    while (1)
    {
      unint64_t v82 = LOWORD(STACK[0x4A2]);
      if (v82 >= 0x23F)
      {
        DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
      }
      long long v83 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v82;
      char v84 = *v83;
      LODWORD(v83) = v83[1];
      LOBYTE(STACK[0x7D8]) = v84;
      LODWORD(STACK[0x7DC]) = v83;
      LOWORD(STACK[0x7E0]) = v82;
      MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas(*(BlueFin::GlPeMsmtMgr **)(v59 + 8), (const BlueFin::GlSignalId *)&STACK[0x7D8], 0, 0);
      uint64_t PeMeas = (BlueFin::stPeSigMeasKF *)BlueFin::GlPeMsmtMgr::GetPeMeas(*(BlueFin::GlPeMsmtMgr **)(v59 + 8), (const BlueFin::GlSignalId *)&STACK[0x7D8], 0);
      if (!BlueFin::GlPeFirstFix::IsMeasUsable(v59, (uint64_t)MeMeas, v81)) {
        goto LABEL_50;
      }
      if (!BlueFin::stPeSigMeasKF::IsPRValid(PeMeas)) {
        goto LABEL_50;
      }
      if ((*((unsigned char *)PeMeas + 72) & 8) != 0) {
        goto LABEL_50;
      }
      LOBYTE(STACK[0x870]) = STACK[0x7D8];
      BlueFin::GlSignalIdSet::GetSignalIdSetForSv((char *)&STACK[0x8D0], (unsigned __int8 *)&STACK[0x870], (uint64_t)&STACK[0x1060]);
      if (((unint64_t)*(unsigned int *)(STACK[0x3A0] + (((unint64_t)LOBYTE(STACK[0x7D8]) >> 3) & 0x1C)) >> (STACK[0x7D8] & 0x1F))) {
        goto LABEL_50;
      }
      float v87 = *((float *)MeMeas + 22);
      BlueFin::GlSetBase::Remove((uint64_t)&STACK[0x1060], SLOWORD(STACK[0x7E0]));
      char v88 = (_DWORD *)STACK[0x1060];
      unint64_t v89 = LOBYTE(STACK[0x1068]);
      if (*(_DWORD *)STACK[0x1060]) {
        break;
      }
      if (v89 >= 2)
      {
        if (v88[1]) {
          break;
        }
        uint64_t v96 = 2;
        while (v89 != v96)
        {
          if (v88[v96++])
          {
            if (v96 - 1 < v89) {
              goto LABEL_26;
            }
            break;
          }
        }
      }
LABEL_49:
      *(_DWORD *)(STACK[0x3A0] + (((unint64_t)LOBYTE(STACK[0x7D8]) >> 3) & 0x1C)) |= 1 << LOBYTE(STACK[0x7D8]);
      *(_DWORD *)(STACK[0x448] + 4 * (SLOWORD(STACK[0x7E0]) >> 5)) |= 1 << LOWORD(STACK[0x7E0]);
LABEL_50:
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&STACK[0x4A0]);
      if (LOBYTE(STACK[0x4A1]) == LOBYTE(STACK[0x4A0])) {
        goto LABEL_51;
      }
    }
LABEL_26:
    LOBYTE(a25) = STACK[0x1068];
    memcpy((char *)&a25 + 8, v88, 4 * v89);
    WORD1(a25) = 0;
    BYTE1(a25) = 0;
    DWORD1(a25) = DWORD2(a25);
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&a25);
    if (BYTE1(a25) != a25)
    {
      double v90 = v87 * 299792458.0;
      while (1)
      {
        __int16 v91 = WORD1(a25);
        if (WORD1(a25) >= 0x23FuLL)
        {
          DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
        }
        __int16 v92 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * WORD1(a25);
        char v93 = *v92;
        LODWORD(v92) = v92[1];
        LOBYTE(STACK[0x1000]) = v93;
        LODWORD(STACK[0x1004]) = v92;
        LOWORD(STACK[0x1008]) = v91;
        unsigned __int8 v94 = BlueFin::GlPeMsmtMgr::GetMeMeas(*(BlueFin::GlPeMsmtMgr **)(v59 + 8), (const BlueFin::GlSignalId *)&STACK[0x1000], 0, 0);
        uint64_t v95 = BlueFin::GlPeMsmtMgr::AccessPeMeas(*(BlueFin::GlPeMsmtMgr **)(v59 + 8), (const BlueFin::GlSignalId *)&STACK[0x1000], 0);
        if (BlueFin::GlPeFirstFix::IsMeasUsable(v59, (uint64_t)v94, v81))
        {
          if ((*(unsigned char *)(v95 + 72) & 8) == 0
            && v90 > *((float *)v94 + 22) * 299792458.0
            && *((float *)MeMeas + 27) + -10.0 < *((float *)v94 + 27))
          {
            break;
          }
        }
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)&a25);
        if (BYTE1(a25) == a25) {
          goto LABEL_49;
        }
      }
      if (*((int *)v94 + 1) < 1) {
        goto LABEL_50;
      }
      double v98 = *(double *)v95 - *(double *)PeMeas;
      if (v98 <= 0.5)
      {
        if (v98 < -0.5) {
          double v98 = v98 + 1.0;
        }
      }
      else
      {
        double v98 = v98 + -1.0;
      }
      if (v98 * 299792.458 <= 40.0) {
        goto LABEL_50;
      }
      *(double *)(v95 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(double *)(v95 + 40) + v98 * 299792.458;
      BlueFin::GlPeMsmtMgr::SetPeMeas(*(void *)(v59 + 8), v95, 0);
    }
    goto LABEL_49;
  }
LABEL_51:
  unint64_t v99 = STACK[0x448];
  if (*(_DWORD *)STACK[0x448]) {
    goto LABEL_52;
  }
  unint64_t v101 = LOBYTE(STACK[0x450]);
  if (v101 < 2)
  {
LABEL_61:
    int v100 = 0;
    goto LABEL_62;
  }
  if (!*(_DWORD *)(v99 + 4))
  {
    uint64_t v102 = 2;
    while (v101 != v102)
    {
      if (*(_DWORD *)(v99 + 4 * v102++))
      {
        if (v102 - 1 < v101) {
          goto LABEL_52;
        }
        goto LABEL_61;
      }
    }
    goto LABEL_61;
  }
LABEL_52:
  if (!*(_DWORD *)(v59 + 268)) {
    *(_DWORD *)(v59 + 268) = *(_DWORD *)(v59 + *(void *)(*(void *)v59 - 24) + 200);
  }
  int v100 = 1;
LABEL_62:
  int v104 = 0;
  *(void *)(v59 + 30BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0x42C8000000000000;
  *(_OWORD *)&STACK[0x3A0] = 0uLL;
  LOBYTE(STACK[0x3C0]) = 19;
  STACK[0x3B0] = 0;
  STACK[0x3B8] = (unint64_t)&STACK[0x3C4];
  *(_OWORD *)&STACK[0x3C4] = 0u;
  *(_OWORD *)&STACK[0x3D4] = 0u;
  *(_OWORD *)&STACK[0x3E4] = 0u;
  *(_OWORD *)&STACK[0x3F4] = 0u;
  *(_OWORD *)&STACK[0x404] = 0u;
  int32x4_t v105 = vdupq_n_s32(0x43C80000u);
  *(_OWORD *)&STACK[0x410] = 0u;
  *(int32x4_t *)&STACK[0x420] = v105;
  *(int32x4_t *)&STACK[0x430] = v105;
  LOBYTE(STACK[0x440]) = 0;
  if (!v100) {
    goto LABEL_553;
  }
  int v106 = (uint64_t (*)(uint64_t))(*(uint64_t (**)(void))(**(void **)(v59 + 408) + 88))(*(void *)(v59 + 408));
  v507 = (void (*)(BlueFin::GlPeSubsets *))(*(uint64_t (**)(void))(**(void **)(v59 + 408) + 96))(*(void *)(v59 + 408));
  int v107 = (BlueFin::GlPeSubsets *)v106(28184);
  if (!v107)
  {
    DeviceFaultNotify("glmemalloc.h", 74, "GlStackAlloc", (char)"m_ptr != nullptr");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmemalloc.h", 74, "m_ptr != nullptr");
  }
  vars8a = (BlueFin::GlSetBase *)&STACK[0x3B8];
  int v108 = (char *)v107 + 28184;
  *(void *)int v107 = (char *)v107 + 24;
  *((void *)v107 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = (char *)v107 + 24;
  v508 = (void *)((char *)v107 + 24);
  *((void *)v107 + 2) = (char *)v107 + 28184;
  uint64_t v109 = 24;
  int32x4_t v110 = vdupq_n_s32(0x43C80000u);
  do
  {
    int v111 = (void *)((char *)v107 + v109);
    *int v111 = 0;
    v111[1] = 0;
    *(_OWORD *)((char *)v107 + v109 + 36) = 0uLL;
    v111[2] = 0;
    v111[3] = (char *)v107 + v109 + 36;
    *((unsigned char *)v111 + 32) = 19;
    *(_OWORD *)((char *)v111 + 52) = 0uLL;
    *(_OWORD *)((char *)v111 + 68) = 0uLL;
    *(_OWORD *)((char *)v111 + 84) = 0uLL;
    *(_OWORD *)((char *)v111 + 10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0uLL;
    *((_OWORD *)v111 + 7) = 0uLL;
    *((int32x4_t *)v111 + 8) = v110;
    v109 += 160;
    *((int32x4_t *)v111 + 9) = v110;
  }
  while (v111 + 20 != (void *)v108);
  uint64_t v522 = v107;
  STACK[0x1308] = (unint64_t)&STACK[0x12A0];
  *(_OWORD *)&STACK[0x12A0] = 0u;
  *(_OWORD *)&STACK[0x12B0] = 0u;
  *(_OWORD *)&STACK[0x12C0] = 0u;
  *(_OWORD *)&STACK[0x12D0] = 0u;
  *(_OWORD *)&STACK[0x12E0] = 0u;
  *(_OWORD *)&STACK[0x12F0] = 0u;
  LODWORD(STACK[0x1300]) = 0;
  bzero(&STACK[0x1310], 0x320uLL);
  memset(&STACK[0x1060], 255, 0x23FuLL);
  unsigned int v112 = 0;
  int v113 = (_DWORD *)STACK[0x448];
  uint64_t v114 = LOBYTE(STACK[0x450]);
  uint64_t v115 = (_DWORD *)(STACK[0x448] + 4 * v114 - 4);
  do
  {
    if (*v115)
    {
      unsigned int v116 = *v115 - (((*v115 >> 1) & 0x5B6DB6DB) + ((*v115 >> 2) & 0x9249249));
      unsigned int v112 = ((v116 + (v116 >> 3)) & 0xC71C71C7) + v112 - 63 * (((v116 + (v116 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    --v115;
  }
  while (v115 >= v113);
  if ((unsigned __int16)v112 >= 0x65u)
  {
    long long v497 = "rotAll.Cnt() <= GLPE_FIRSTFIX_MAX_RNGS_FROM_ME";
    int v498 = 596;
    long long v499 = "glpe_firstfix.cpp";
    DeviceFaultNotify("glpe_firstfix.cpp", 596, "ComputeAzElInt", (char)"rotAll.Cnt() <= GLPE_FIRSTFIX_MAX_RNGS_FROM_ME");
    goto LABEL_634;
  }
  v510 = v108;
  if (*(unsigned char *)(v59 + 246)) {
    int v117 = 0;
  }
  else {
    int v117 = 5;
  }
  LOBYTE(STACK[0x4A0]) = v114;
  memcpy(&STACK[0x4A8], v113, 4 * v114);
  LOWORD(STACK[0x4A2]) = 0;
  LOBYTE(STACK[0x4A1]) = 0;
  LODWORD(STACK[0x4A4]) = STACK[0x4A8];
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)&STACK[0x4A0]);
  if (LOBYTE(STACK[0x4A1]) != LOBYTE(STACK[0x4A0]))
  {
    int v118 = 0;
    while (1)
    {
      LODWORD(STACK[0x7D8]) = 0;
      LODWORD(STACK[0x1000]) = 0;
      unint64_t v119 = LOWORD(STACK[0x4A2]);
      if (v119 > 0x23E) {
        break;
      }
      uint64_t v120 = v59 + *(void *)(*(void *)v59 - 24);
      double v121 = *(double *)(v120 + 88);
      STACK[0x8D0] = (unint64_t)&STACK[0x8DC];
      *(_OWORD *)&STACK[0x8DC] = 0u;
      *(_OWORD *)&STACK[0x8EC] = 0u;
      *(_OWORD *)&STACK[0x8FC] = 0u;
      *(_OWORD *)&STACK[0x90C] = 0u;
      *(_OWORD *)&STACK[0x918] = 0u;
      *((_DWORD *)&STACK[0x8DC] + (v119 >> 5)) |= 1 << v119;
      LOBYTE(STACK[0x8D8]) = 19;
      a25 = *(_OWORD *)(v120 + 8);
      a26 = *(double *)(v120 + 24);
      double v122 = BlueFin::GlPeNavUtil::ComputeBc(v59, (uint64_t)&STACK[0x8D0], &a25, *(unsigned int *)(v59 + 240), 0, (uint64_t)&STACK[0x1000], (uint64_t)&STACK[0x7D8], 0);
      if (fabs(v121) < 1.0) {
        *(double *)(v59 + 88 + *(void *)(*(void *)v59 - 24)) = v122;
      }
      if ((*(unsigned int *)(STACK[0x8D0] + 4 * (v119 >> 5)) >> (v119 & 0x1F)))
      {
        float v123 = *(float *)&STACK[0x7D8];
        double v124 = *(float *)&STACK[0x7D8];
        int v125 = (int)(v124 + -0.5);
        if (*(float *)&STACK[0x7D8] >= 0.0) {
          int v125 = 0;
        }
        if (v123 > 0.0) {
          int v125 = (int)(v124 + 0.5);
        }
        if (v125 < v117)
        {
          BlueFin::GlSetBase::Remove((uint64_t)&STACK[0x448], (__int16)v119);
          float v123 = *(float *)&STACK[0x7D8];
        }
        *(unsigned char *)(STACK[0x1308] + v118) = *((unsigned char *)&BlueFin::GlSignalId::s_aotIndex2signalId
                                                            + 2 * v119);
        double v126 = (float *)&STACK[0x1060] + v118;
        v126[272] = v123;
        v126[172] = *(float *)&STACK[0x1000];
        *((unsigned char *)&STACK[0x1060] + v119) = v118++;
      }
      else
      {
        BlueFin::GlSetBase::Remove((uint64_t)&STACK[0x448], (__int16)v119);
      }
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&STACK[0x4A0]);
      if (LOBYTE(STACK[0x4A1]) == LOBYTE(STACK[0x4A0])) {
        goto LABEL_89;
      }
    }
LABEL_633:
    long long v497 = "usIndex < NUM_SIGNAL_IDS";
    int v498 = 577;
    long long v499 = "glsignalid.h";
    DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
LABEL_634:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v499, v498, v497);
  }
LABEL_89:
  float v127 = v108;
  if (BlueFin::GlUtils::m_ucEnabled) {
    BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
  }
  if (*(_DWORD *)(*v527 + 72) == 1 && *(float *)(*v527 + 24) <= 3000.0)
  {
    char v128 = *(unsigned char *)(v59 + 247);
    char v129 = *(unsigned char *)(v59 + 244);
    uint64_t v130 = *(unsigned int *)(v59 + 240);
    uint64_t v131 = v59 + *(void *)(*(void *)v59 - 24);
    *(_OWORD *)&STACK[0x340] = *(_OWORD *)(v131 + 8);
    STACK[0x350] = *(void *)(v131 + 24);
    BlueFin::GlPeNavUtil::ComputeRangeResidVec(v59, (uint64_t)&STACK[0x448], (uint64_t)&STACK[0x340], v130, 0, 0, 0, 1, 0, 1);
    int v135 = STACK[0x8D8];
    if (SLODWORD(STACK[0x8D8]) >= (v129 - v128 + 5))
    {
      if (!*(unsigned char *)(v59 + 244)) {
        goto LABEL_116;
      }
      if (v135 >= 8) {
        int v136 = 8;
      }
      else {
        int v136 = STACK[0x8D8];
      }
      LODWORD(STACK[0x4AC]) = 8;
      LODWORD(STACK[0x4A8]) = v136;
      *(_OWORD *)&STACK[0x4B0] = 0u;
      *(_OWORD *)&STACK[0x4C0] = 0u;
      *(_OWORD *)&STACK[0x4D0] = 0u;
      *(_OWORD *)&STACK[0x4E0] = 0u;
      STACK[0x4F0] = 0;
      STACK[0x4A0] = (unint64_t)&STACK[0x4B0];
      if (v136 >= 1)
      {
        uint64_t v137 = 0;
        float v138 = (float)v136;
        unint64_t v139 = STACK[0x8D0];
        uint64_t v140 = (v136 + 1) - 1;
        do
        {
          uint64_t v141 = v137 + 1;
          double v142 = *(double *)(v139 + 8 * (int)(float)((float)((float)v135 * (float)(v137 + 1)) / v138));
          if (v142 < 0.0) {
            double v142 = -v142;
          }
          *((double *)&STACK[0x4B8] + v137++) = v142;
        }
        while (v140 != v141);
      }
      if (BlueFin::SKFVector::Median((BlueFin::SKFVector *)&STACK[0x4A0], v132, v133, v134) <= 200.0) {
        goto LABEL_116;
      }
      unint64_t v143 = *(void *)(v59 + 40);
      uint64_t v144 = v59 + *(void *)(*(void *)v59 - 24);
      uint64_t v145 = *(void *)(v144 + 88);
      int v146 = *(_DWORD *)(v59 + 264);
      *(void *)&a25 = v522;
      *(long long *)((char *)&a25 + 8) = *(_OWORD *)(v59 + 8);
      *(void *)&a28 = 0;
      a27 = v143;
      DWORD2(a28) = v146;
      *(void *)&a29 = 0;
      *(long long *)((char *)&a29 + 8) = *(_OWORD *)(v144 + 8);
      *((void *)&a30 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *(void *)(v144 + 24);
      a31 = v145;
      LODWORD(a32) = v130;
      *((void *)&a32 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = (char *)&a33 + 4;
      LOBYTE(a33) = 8;
      *(long long *)((char *)&a34 + 4) = 0u;
      *(long long *)((char *)&a33 + 4) = 0u;
      BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&STACK[0x7D8], (unsigned int *)&STACK[0x7E4], 0x13u, (const void **)&STACK[0x448]);
      unsigned int v147 = 0;
      char v148 = (_DWORD *)(STACK[0x7D8] + 4 * LOBYTE(STACK[0x7E0]) - 4);
      do
      {
        if (*v148)
        {
          unsigned int v149 = *v148 - (((*v148 >> 2) & 0x9249249) + ((*v148 >> 1) & 0x5B6DB6DB));
          unsigned int v147 = ((v149 + (v149 >> 3)) & 0xC71C71C7) + v147 - 63 * (((v149 + (v149 >> 3)) & 0xC71C71C7) / 0x3F);
        }
        --v148;
      }
      while ((unint64_t)v148 >= STACK[0x7D8]);
      if ((unsigned __int16)v147 >= 0x11u)
      {
        BlueFin::GlPeFirstFix::SelectBase((uint64_t)&STACK[0x4A0], v59, (uint64_t)&STACK[0x1060], (void *)STACK[0x448], STACK[0x450], 0x10u, 1);
        BlueFin::GlSetBase::operator=((uint64_t)&STACK[0x7D8], (uint64_t)&STACK[0x4A0]);
        long long v150 = *(_OWORD *)&STACK[0x4BC];
        long long v151 = *(_OWORD *)&STACK[0x4DC];
        *(_OWORD *)&STACK[0x804] = *(_OWORD *)&STACK[0x4CC];
        *(_OWORD *)&STACK[0x814] = v151;
        *(_OWORD *)&STACK[0x820] = *(_OWORD *)&STACK[0x4E8];
        *(_OWORD *)&STACK[0x7E4] = *(_OWORD *)&STACK[0x4AC];
        *(_OWORD *)&STACK[0x7F4] = v150;
      }
      BOOL v152 = BlueFin::GlPeLsqSubsets::RunLsqSubset((uint64_t *)&a25, (uint64_t)&STACK[0x7D8], 3, 1, *(void *)(v59 + 256), 0);
      unint64_t v153 = BlueFin::GlPeSubsets::Find(v522, (const BlueFin::GlSignalIdSet *)&STACK[0x7D8]);
      if (v153) {
        BOOL v154 = v152;
      }
      else {
        BOOL v154 = 0;
      }
      if (v154)
      {
        uint64_t v155 = (int)(*(float *)(v153 + 120) * 1000.0);
        if (*(_DWORD *)(v59 + 240) != v155)
        {
          uint64_t v156 = v59 + *(void *)(*(void *)v59 - 24);
          *(_OWORD *)&STACK[0x2E0] = *(_OWORD *)(v156 + 8);
          STACK[0x2F0] = *(void *)(v156 + 24);
          BlueFin::GlPeNavUtil::ComputeRangeResidVec(v59, (uint64_t)&STACK[0x448], (uint64_t)&STACK[0x2E0], v155, 0, 0, 0, 1, 0, 1);
          BlueFin::SKFVector::Clone((BlueFin::SKFVector *)&STACK[0x8D0], (const BlueFin::SKFVector *)&STACK[0x4A0]);
          int v135 = STACK[0x8D8];
        }
LABEL_116:
        STACK[0x7D8] = (unint64_t)&STACK[0x7E4];
        LOBYTE(STACK[0x7E0]) = 19;
        *(_OWORD *)&STACK[0x7E4] = 0u;
        *(_OWORD *)&STACK[0x7F4] = 0u;
        *(_OWORD *)&STACK[0x804] = 0u;
        *(_OWORD *)&STACK[0x814] = 0u;
        *(_OWORD *)&STACK[0x820] = 0u;
        STACK[0x1000] = (unint64_t)&STACK[0x100C];
        LOBYTE(STACK[0x1008]) = 19;
        *(_OWORD *)&STACK[0x100C] = 0u;
        *(_OWORD *)&STACK[0x101C] = 0u;
        *(_OWORD *)&STACK[0x102C] = 0u;
        *(_OWORD *)&STACK[0x103C] = 0u;
        *(_OWORD *)&STACK[0x1048] = 0u;
        STACK[0x4A0] = (unint64_t)&STACK[0x4B0];
        STACK[0x4A8] = 0x6400000000;
        bzero(&STACK[0x4B0], 0x328uLL);
        double v163 = BlueFin::SKFVector::Median((BlueFin::SKFVector *)&STACK[0x8D0], v157, v158, v159);
        if (v135 >= 1)
        {
          uint64_t v164 = (v135 + 1) - 1;
          uint64_t v165 = (double *)(STACK[0x8D0] + 8);
          do
          {
            double v166 = *v165 - v163;
            if (v166 < 0.0) {
              double v166 = -v166;
            }
            *v165++ = v166;
            --v164;
          }
          while (v164);
        }
        double v167 = BlueFin::SKFVector::Median((BlueFin::SKFVector *)&STACK[0x8D0], v160, v161, v162);
        LOBYTE(a25) = STACK[0x450];
        memcpy((char *)&a25 + 8, (const void *)STACK[0x448], 4 * a25);
        WORD1(a25) = 0;
        BYTE1(a25) = 0;
        DWORD1(a25) = DWORD2(a25);
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)&a25);
        if (BYTE1(a25) != a25)
        {
          double v171 = fmax(v167 * 1.4826, 0.001);
          uint64_t v172 = 8;
          do
          {
            double v173 = *(double *)(STACK[0x8D0] + v172);
            BlueFin::SKFVector::AddLen((uint64_t)&STACK[0x4A0]);
            *(double *)(STACK[0x4A0] + 8 * SLODWORD(STACK[0x4A8])) = v173 / v171;
            if (v173 / v171 > 4.0)
            {
              double v174 = *(double *)(STACK[0x8D0] + v172);
              if (v174 > 150.0)
              {
                if (v173 / v171 <= 7.5 || v174 <= 400.0)
                {
                  if (WORD1(a25) > 0x23Eu) {
                    goto LABEL_633;
                  }
                  unint64_t v176 = (unint64_t)WORD1(a25) >> 5;
                  int v177 = 1 << SBYTE2(a25);
                }
                else
                {
                  if (WORD1(a25) > 0x23Eu) {
                    goto LABEL_633;
                  }
                  unint64_t v176 = (unint64_t)WORD1(a25) >> 5;
                  int v177 = 1 << SBYTE2(a25);
                  *(_DWORD *)(STACK[0x7D8] + 4 * v176) |= 1 << SBYTE2(a25);
                }
                *(_DWORD *)(STACK[0x1000] + 4 * v176) |= v177;
                float v127 = v510;
              }
            }
            BlueFin::GlSetIterator::operator++((unsigned __int8 *)&a25);
            v172 += 8;
          }
          while (BYTE1(a25) != a25);
        }
        if (BlueFin::SKFVector::Median((BlueFin::SKFVector *)&STACK[0x4A0], v168, v169, v170) < 1.0)
        {
          BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&STACK[0x870], (unsigned int *)&STACK[0x87C], 0x13u, (const void **)&STACK[0x1000]);
          *(void *)&a25 = (char *)&a25 + 12;
          BYTE8(a25) = 19;
          *(long long *)((char *)&a25 + 12) = 0u;
          *(long long *)((char *)&a27 + 4) = 0u;
          *(long long *)((char *)&a28 + 4) = 0u;
          *(long long *)((char *)&a29 + 4) = 0u;
          a30 = 0u;
          BlueFin::GlSetBase::OperatorBinaryInversion((uint64_t)&STACK[0x870], (int **)&a25);
          BlueFin::GlSetBase::operator=((uint64_t)&STACK[0x870], (uint64_t)&a25);
          long long v178 = *(long long *)((char *)&a29 + 4);
          *(_OWORD *)&STACK[0x89C] = *(long long *)((char *)&a28 + 4);
          *(_OWORD *)&STACK[0x8AC] = v178;
          *(_OWORD *)&STACK[0x8B8] = a30;
          long long v179 = *(long long *)((char *)&a27 + 4);
          *(_OWORD *)&STACK[0x87C] = *(long long *)((char *)&a25 + 12);
          *(_OWORD *)&STACK[0x88C] = v179;
          BlueFin::GlSignalIdSet::setSignalIdLimits((BlueFin::GlSignalIdSet *)&STACK[0x870]);
          BlueFin::GlSetBase::operator&=((uint64_t)&STACK[0x448], (uint64_t)&STACK[0x870]);
          BlueFin::GlPeRepeatedIsol::Submit(v509, (const BlueFin::GlSignalIdSet *)STACK[0x7D8], STACK[0x7E0]);
        }
      }
    }
    *(void *)uint64_t v522 = v508;
    *((void *)v522 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v508;
    *((void *)v522 + 2) = v127;
    int32x4_t v180 = vdupq_n_s32(0x43C80000u);
    unsigned int v181 = v508;
    do
    {
      *unsigned int v181 = 0;
      v181[1] = 0;
      *(_OWORD *)((char *)v181 + 36) = 0uLL;
      v181[2] = 0;
      v181[3] = (char *)v181 + 36;
      *((unsigned char *)v181 + 32) = 19;
      *(_OWORD *)((char *)v181 + 52) = 0uLL;
      *(_OWORD *)((char *)v181 + 68) = 0uLL;
      *(_OWORD *)((char *)v181 + 84) = 0uLL;
      *(_OWORD *)((char *)v181 + 10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0uLL;
      *((_OWORD *)v181 + 7) = 0uLL;
      *((int32x4_t *)v181 + 8) = v180;
      *((int32x4_t *)v181 + 9) = v180;
      v181 += 20;
    }
    while (v181 != (void *)v127);
  }
  int v182 = *(unsigned __int8 *)(v59 + 176);
  if (*(unsigned char *)(v59 + 248) && *(unsigned char *)(v59 + 176))
  {
    unsigned int v183 = 0;
    uint64_t v184 = (_DWORD *)(STACK[0x448] + 4 * LOBYTE(STACK[0x450]) - 4);
    do
    {
      if (*v184)
      {
        unsigned int v185 = *v184 - (((*v184 >> 1) & 0x5B6DB6DB) + ((*v184 >> 2) & 0x9249249));
        unsigned int v183 = ((v185 + (v185 >> 3)) & 0xC71C71C7) + v183 - 63 * (((v185 + (v185 >> 3)) & 0xC71C71C7) / 0x3F);
      }
      --v184;
    }
    while ((unint64_t)v184 >= STACK[0x448]);
    if (*(unsigned char *)(v59 + 244)) {
      unsigned __int8 v186 = 9;
    }
    else {
      unsigned __int8 v186 = 8;
    }
    if (*(unsigned char *)(v59 + 244)) {
      BOOL v187 = 0;
    }
    else {
      BOOL v187 = v183 > 6u;
    }
    if (!v187 && v186 > v183 || !*(unsigned char *)(v59 + 177)) {
      goto LABEL_159;
    }
    int v182 = 0;
    char *v513 = 0;
  }
  BOOL v188 = v182 == 0;
  int v189 = v515;
  if (!v188) {
    int v189 = 1;
  }
  if (v189 != 1) {
    goto LABEL_220;
  }
LABEL_159:
  STACK[0x4A8] = 0;
  STACK[0x4A0] = 0;
  STACK[0x4B0] = 0;
  STACK[0x4B8] = (unint64_t)&STACK[0x4C4];
  LOBYTE(STACK[0x4C0]) = 19;
  *(_OWORD *)&STACK[0x4C4] = 0u;
  *(_OWORD *)&STACK[0x4D4] = 0u;
  *(_OWORD *)&STACK[0x4E4] = 0u;
  *(_OWORD *)&STACK[0x4F4] = 0u;
  *(_OWORD *)&STACK[0x504] = 0u;
  int32x4_t v190 = vdupq_n_s32(0x43C80000u);
  *(_OWORD *)&STACK[0x510] = 0u;
  *(int32x4_t *)&STACK[0x520] = v190;
  *(int32x4_t *)&STACK[0x530] = v190;
  unint64_t v191 = *(void *)(v59 + 40);
  uint64_t v192 = v59 + *(void *)(*(void *)v59 - 24);
  v190.i64[0] = *(void *)(v192 + 88);
  int v193 = *(_DWORD *)(v59 + 240);
  int v194 = *(_DWORD *)(v59 + 264);
  *(void *)&a25 = v522;
  *(long long *)((char *)&a25 + 8) = *(_OWORD *)(v59 + 8);
  *(void *)&a28 = 0;
  a27 = v191;
  DWORD2(a28) = v194;
  *(void *)&a29 = 0;
  *(long long *)((char *)&a29 + 8) = *(_OWORD *)(v192 + 8);
  *((void *)&a30 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *(void *)(v192 + 24);
  a31 = v190.i64[0];
  LODWORD(a32) = v193;
  *((void *)&a32 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = (char *)&a33 + 4;
  LOBYTE(a33) = 8;
  *(long long *)((char *)&a34 + 4) = 0u;
  *(long long *)((char *)&a33 + 4) = 0u;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&STACK[0x7D8], (unsigned int *)&STACK[0x7E4], 0x13u, (const void **)&STACK[0x448]);
  unsigned int v195 = 16;
  if (*(unsigned char *)(v59 + 244)) {
    unsigned int v196 = 16;
  }
  else {
    unsigned int v196 = 8;
  }
  if (*(unsigned char *)(v59 + 56))
  {
    if (*(unsigned char *)(v59 + 178))
    {
      uint64_t v197 = LOBYTE(STACK[0x7E0]);
      uint64_t v198 = (_DWORD *)STACK[0x7D8];
    }
    else
    {
      unsigned int v200 = 0;
      uint64_t v198 = (_DWORD *)STACK[0x7D8];
      uint64_t v197 = LOBYTE(STACK[0x7E0]);
      uint64_t v201 = (_DWORD *)(STACK[0x7D8] + 4 * v197 - 4);
      do
      {
        if (*v201)
        {
          unsigned int v202 = *v201 - (((*v201 >> 2) & 0x9249249) + ((*v201 >> 1) & 0x5B6DB6DB));
          unsigned int v200 = ((v202 + (v202 >> 3)) & 0xC71C71C7) + v200 - 63 * (((v202 + (v202 >> 3)) & 0xC71C71C7) / 0x3F);
        }
        --v201;
      }
      while (v201 >= v198);
      if (v196 <= (unsigned __int16)v200)
      {
        *(unsigned char *)(v59 + 56) = 0;
        *(unsigned char *)(v59 + 128) = 0;
        BOOL v199 = 1;
        unsigned int v195 = 16;
        goto LABEL_187;
      }
    }
    uint64_t v203 = *(BlueFin::GlPeMsmtMgr **)(v59 + 8);
    double v204 = *(double *)(v59 + 88);
    double v205 = *(double *)(v59 + 96);
    LOBYTE(STACK[0x8D0]) = v197;
    memcpy(&STACK[0x8D8], v198, 4 * v197);
    LOWORD(STACK[0x8D2]) = 0;
    LOBYTE(STACK[0x8D1]) = 0;
    LODWORD(STACK[0x8D4]) = STACK[0x8D8];
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&STACK[0x8D0]);
    double v206 = 0.0;
    if (LOBYTE(STACK[0x8D1]) == LOBYTE(STACK[0x8D0]))
    {
      double v207 = 1000.0;
    }
    else
    {
      double v207 = 1000.0;
      do
      {
        unint64_t v208 = LOWORD(STACK[0x8D2]);
        if (v208 >= 0x23F)
        {
          DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
        }
        uint64_t v209 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v208;
        char v210 = *v209;
        LODWORD(v209) = v209[1];
        LOBYTE(STACK[0x1000]) = v210;
        LODWORD(STACK[0x1004]) = v209;
        LOWORD(STACK[0x1008]) = v208;
        if ((*(unsigned int *)(*((void *)v203 + 1) + ((v208 >> 3) & 0x1FFC)) >> (v208 & 0x1F)))
        {
          uint64_t v211 = BlueFin::GlPeMsmtMgr::GetPeMeas(v203, (const BlueFin::GlSignalId *)&STACK[0x1000], 0);
          double v212 = *(double *)(v211 + 40);
          if (v212 > v206) {
            double v206 = *(double *)(v211 + 40);
          }
          if (v212 < v207) {
            double v207 = *(double *)(v211 + 40);
          }
        }
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)&STACK[0x8D0]);
      }
      while (LOBYTE(STACK[0x8D1]) != LOBYTE(STACK[0x8D0]));
    }
    double v213 = (v204 * v204 + v205 * v205) * 0.5;
    if (v213 < v207 * v207 * 0.5 || v213 > v206 * v206 + v206 * v206)
    {
      int v215 = *(_DWORD *)(v59 + 264) | 0x100;
      *(_DWORD *)(v59 + 264) = v215;
      DWORD2(a28) = v215;
    }
    *(void *)&a29 = v516;
    BOOL v199 = *(unsigned char *)(v59 + 178) == 0;
    unsigned int v195 = 13;
  }
  else
  {
    BOOL v199 = 1;
  }
LABEL_187:
  unsigned int v216 = 0;
  uint64_t v217 = (_DWORD *)(STACK[0x7D8] + 4 * LOBYTE(STACK[0x7E0]) - 4);
  do
  {
    if (*v217)
    {
      unsigned int v218 = *v217 - (((*v217 >> 2) & 0x9249249) + ((*v217 >> 1) & 0x5B6DB6DB));
      unsigned int v216 = ((v218 + (v218 >> 3)) & 0xC71C71C7) + v216 - 63 * (((v218 + (v218 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    --v217;
  }
  while ((unint64_t)v217 >= STACK[0x7D8]);
  if (v195 < (unsigned __int16)v216)
  {
    BlueFin::GlPeFirstFix::SelectBase((uint64_t)&STACK[0x8D0], v59, (uint64_t)&STACK[0x1060], (void *)STACK[0x448], STACK[0x450], v195, 1);
    BlueFin::GlSetBase::operator=((uint64_t)&STACK[0x7D8], (uint64_t)&STACK[0x8D0]);
    long long v219 = *(_OWORD *)&STACK[0x8EC];
    long long v220 = *(_OWORD *)&STACK[0x90C];
    *(_OWORD *)&STACK[0x804] = *(_OWORD *)&STACK[0x8FC];
    *(_OWORD *)&STACK[0x814] = v220;
    *(_OWORD *)&STACK[0x820] = *(_OWORD *)&STACK[0x918];
    *(_OWORD *)&STACK[0x7E4] = *(_OWORD *)&STACK[0x8DC];
    *(_OWORD *)&STACK[0x7F4] = v219;
  }
  BlueFin::GlPeLsqSubsets::RunLsqSubsets((uint64_t)&a25, (BlueFin::GlSetBase *)&STACK[0x7D8], 1u, *(void *)(v59 + 256), 0);
  *(_DWORD *)(v59 + 264) &= ~0x100u;
  unint64_t v221 = BlueFin::GlPeSubsets::Find(v522, (const BlueFin::GlSignalIdSet *)&STACK[0x7D8]);
  uint64_t v222 = v221;
  if (!v221)
  {
    BlueFin::GlSignalIdSet::Print((BlueFin::GlSignalIdSet *)&STACK[0x7D8], 0x6Fu);
    if (*(unsigned char *)(v59 + 128) == 1) {
      *(unsigned char *)(v59 + 128) = 0;
    }
    goto LABEL_211;
  }
  uint64_t v223 = v59 + *(void *)(*(void *)v59 - 24);
  *(_OWORD *)(v223 + 8) = *(_OWORD *)v221;
  *(void *)(v223 + 24) = *(void *)(v221 + 16);
  if (*(unsigned char *)(v59 + 264)) {
    *(_DWORD *)(v59 + 24BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = (int)(*(float *)(v221 + 120) * 1000.0);
  }
  *(_OWORD *)&STACK[0x8E0] = 0u;
  *(_OWORD *)&STACK[0x8D0] = 0u;
  *(int64x2_t *)&STACK[0x8F0] = vdupq_n_s64(0x4079000000000000uLL);
  STACK[0x900] = 0x4079000000000000;
  STACK[0x910] = 0x6400000000;
  bzero(&STACK[0x918], 0x328uLL);
  STACK[0x908] = (unint64_t)&STACK[0x918];
  STACK[0xC48] = 0x6400000000;
  bzero(&STACK[0xC50], 0x328uLL);
  *(_OWORD *)&STACK[0xFB8] = xmmword_263BBA380;
  STACK[0xC40] = (unint64_t)&STACK[0xC50];
  LODWORD(STACK[0xF78]) = 0;
  LODWORD(STACK[0xF80]) = 0;
  *(_OWORD *)&STACK[0xFA4] = 0u;
  *(_OWORD *)&STACK[0xF94] = 0u;
  STACK[0xF88] = (unint64_t)&STACK[0xF94];
  LOBYTE(STACK[0xF90]) = 8;
  STACK[0xFC8] = (unint64_t)vdup_n_s32(0x42C60000u);
  LODWORD(STACK[0xFD0]) = 1120272384;
  unint64_t v224 = STACK[0x4B8];
  if (!*(_DWORD *)STACK[0x4B8])
  {
    unint64_t v225 = LOBYTE(STACK[0x4C0]);
    if (v225 < 2)
    {
LABEL_203:
      if (*v516) {
        char v228 = v199;
      }
      else {
        char v228 = 1;
      }
      if ((v228 & 1) == 0 && BlueFin::GlPeFirstFix::ValidateExtLocWithLs(v59, v222, (uint64_t)v516)) {
        BlueFin::stSubset::operator=((uint64_t)&STACK[0x4A0], v222);
      }
      goto LABEL_211;
    }
    if (!*(_DWORD *)(v224 + 4))
    {
      uint64_t v226 = 2;
      while (v225 != v226)
      {
        if (*(_DWORD *)(v224 + 4 * v226++))
        {
          if (v226 - 1 < v225) {
            goto LABEL_211;
          }
          goto LABEL_203;
        }
      }
      goto LABEL_203;
    }
  }
LABEL_211:
  unint64_t v229 = STACK[0x4B8];
  if (*(_DWORD *)STACK[0x4B8]) {
    goto LABEL_212;
  }
  unint64_t v230 = LOBYTE(STACK[0x4C0]);
  if (v230 < 2) {
    goto LABEL_220;
  }
  if (*(_DWORD *)(v229 + 4))
  {
LABEL_212:
    if (*(float *)&STACK[0x520] < *(float *)&STACK[0x420])
    {
      BlueFin::stSubset::operator=((uint64_t)&STACK[0x3A0], (uint64_t)&STACK[0x4A0]);
      LOBYTE(STACK[0x440]) = 1;
    }
  }
  else
  {
    uint64_t v231 = 2;
    while (v230 != v231)
    {
      if (*(_DWORD *)(v229 + 4 * v231++))
      {
        if (v231 - 1 < v230) {
          goto LABEL_212;
        }
        break;
      }
    }
  }
LABEL_220:
  unsigned int v233 = 0;
  uint64_t v234 = (_DWORD *)STACK[0x448];
  uint64_t v235 = LOBYTE(STACK[0x450]);
  uint64_t v236 = (_DWORD *)(STACK[0x448] + 4 * v235 - 4);
  do
  {
    if (*v236)
    {
      unsigned int v237 = *v236 - (((*v236 >> 1) & 0x5B6DB6DB) + ((*v236 >> 2) & 0x9249249));
      unsigned int v233 = ((v237 + (v237 >> 3)) & 0xC71C71C7) + v233 - 63 * (((v237 + (v237 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    --v236;
  }
  while (v236 >= v234);
  if (*(unsigned char *)(v59 + 244)) {
    unsigned int v238 = 9;
  }
  else {
    unsigned int v238 = 8;
  }
  if (v238 <= v233
    || v233 >= 7u && !*(unsigned char *)(v59 + 244) && *(unsigned char *)(v59 + 248) && *v513)
  {
    unint64_t v239 = STACK[0x3B8];
    if (!*(_DWORD *)STACK[0x3B8])
    {
      unint64_t v240 = LOBYTE(STACK[0x3C0]);
      if (v240 < 2) {
        goto LABEL_239;
      }
      if (!*(_DWORD *)(v239 + 4))
      {
        uint64_t v241 = 2;
        while (v240 != v241)
        {
          if (*(_DWORD *)(v239 + 4 * v241++))
          {
            if (v241 - 1 < v240) {
              goto LABEL_261;
            }
            break;
          }
        }
LABEL_239:
        unint64_t v243 = *(void *)(v59 + 40);
        uint64_t v244 = v59 + *(void *)(*(void *)v59 - 24);
        uint64_t v245 = *(void *)(v244 + 88);
        int v246 = *(_DWORD *)(v59 + 240);
        int v247 = *(_DWORD *)(v59 + 264);
        *(void *)&a25 = v522;
        *(long long *)((char *)&a25 + 8) = *(_OWORD *)(v59 + 8);
        *(void *)&a28 = 0;
        a27 = v243;
        DWORD2(a28) = v247;
        *(long long *)((char *)&a29 + 8) = *(_OWORD *)(v244 + 8);
        *((void *)&a30 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *(void *)(v244 + 24);
        a31 = v245;
        LODWORD(a32) = v246;
        *((void *)&a32 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = (char *)&a33 + 4;
        LOBYTE(a33) = 8;
        *(long long *)((char *)&a34 + 4) = 0u;
        *(long long *)((char *)&a33 + 4) = 0u;
        *(void *)&a29 = v516;
        BlueFin::GlPeFirstFix::RunPreIsolationFixRanges((uint64_t)&STACK[0x4A0], v59, (BlueFin::GlSetBase *)&STACK[0x448], v522, (uint64_t)&STACK[0x1060], (uint64_t)&a25);
        int v248 = (_DWORD *)STACK[0x4B8];
        if (*(_DWORD *)STACK[0x4B8]) {
          goto LABEL_240;
        }
        unint64_t v249 = LOBYTE(STACK[0x4C0]);
        if (v249 >= 2)
        {
          if (v248[1]) {
            goto LABEL_240;
          }
          uint64_t v250 = 2;
          while (v249 != v250)
          {
            if (v248[v250++])
            {
              if (v250 - 1 < v249) {
                goto LABEL_240;
              }
              break;
            }
          }
        }
        if (!*v516)
        {
LABEL_240:
          if (!*v248)
          {
            unint64_t v259 = LOBYTE(STACK[0x4C0]);
            if (v259 < 2)
            {
LABEL_260:
              uint64_t v234 = (_DWORD *)STACK[0x448];
              uint64_t v235 = LOBYTE(STACK[0x450]);
              goto LABEL_261;
            }
            if (!v248[1])
            {
              uint64_t v260 = 2;
              while (v259 != v260)
              {
                if (v248[v260++])
                {
                  if (v260 - 1 < v259) {
                    goto LABEL_241;
                  }
                  goto LABEL_260;
                }
              }
              goto LABEL_260;
            }
          }
LABEL_241:
          if (*(float *)&STACK[0x520] < *(float *)&STACK[0x420])
          {
            BlueFin::stSubset::operator=((uint64_t)&STACK[0x3A0], (uint64_t)&STACK[0x4A0]);
            LOBYTE(STACK[0x440]) = 0;
          }
          goto LABEL_260;
        }
        unint64_t v252 = *(void *)(v59 + 40);
        uint64_t v253 = v59 + *(void *)(*(void *)v59 - 24);
        unint64_t v254 = *(void *)(v253 + 88);
        int v255 = *(_DWORD *)(v59 + 240);
        int v256 = *(_DWORD *)(v59 + 264);
        *(_OWORD *)&STACK[0x7E0] = *(_OWORD *)(v59 + 8);
        STACK[0x7D8] = (unint64_t)v522;
        STACK[0x7F0] = v252;
        STACK[0x800] = 0;
        STACK[0x7F8] = 0;
        LODWORD(STACK[0x808]) = v256;
        STACK[0x810] = 0;
        *(_OWORD *)&STACK[0x818] = *(_OWORD *)(v253 + 8);
        STACK[0x828] = *(void *)(v253 + 24);
        STACK[0x830] = v254;
        LODWORD(STACK[0x838]) = v255;
        STACK[0x840] = (unint64_t)&STACK[0x84C];
        LOBYTE(STACK[0x848]) = 8;
        *(_OWORD *)&STACK[0x85C] = 0u;
        *(_OWORD *)&STACK[0x84C] = 0u;
        BlueFin::GlPeFirstFix::RunPreIsolationFixRanges((uint64_t)&STACK[0x8D0], v59, (BlueFin::GlSetBase *)&STACK[0x448], v522, (uint64_t)&STACK[0x1060], (uint64_t)&STACK[0x7D8]);
        unint64_t v257 = STACK[0x8E8];
        if (!*(_DWORD *)STACK[0x8E8])
        {
          unint64_t v500 = LOBYTE(STACK[0x8F0]);
          if (v500 < 2)
          {
LABEL_646:
            int v248 = (_DWORD *)STACK[0x4B8];
            goto LABEL_240;
          }
          if (!*(_DWORD *)(v257 + 4))
          {
            uint64_t v501 = 2;
            while (v500 != v501)
            {
              if (*(_DWORD *)(v257 + 4 * v501++))
              {
                if (v501 - 1 < v500) {
                  goto LABEL_252;
                }
                goto LABEL_646;
              }
            }
            goto LABEL_646;
          }
        }
LABEL_252:
        if (*v516)
        {
          unint64_t v258 = *(void *)(v59 + 80);
          *(_OWORD *)&STACK[0x870] = *(_OWORD *)(v59 + 64);
          STACK[0x880] = v258;
        }
        else
        {
          *(_OWORD *)&STACK[0x870] = 0uLL;
          STACK[0x880] = 0;
        }
        BlueFin::lla2ned((double *)&STACK[0x870], (double *)&STACK[0x8D0], 0, (double *)&STACK[0x1000]);
        float v503 = sqrt(*(double *)&STACK[0x1008] * *(double *)&STACK[0x1008]+ *(double *)&STACK[0x1000] * *(double *)&STACK[0x1000]);
        if (v503 > 400.0) {
          BlueFin::stSubset::operator=((uint64_t)&STACK[0x4A0], (uint64_t)&STACK[0x8D0]);
        }
        goto LABEL_646;
      }
    }
  }
LABEL_261:
  unsigned int v262 = 0;
  STACK[0x340] = (unint64_t)&STACK[0x34C];
  LOBYTE(STACK[0x348]) = 19;
  *(_OWORD *)&STACK[0x34C] = 0u;
  *(_OWORD *)&STACK[0x35C] = 0u;
  *(_OWORD *)&STACK[0x36C] = 0u;
  *(_OWORD *)&STACK[0x37C] = 0u;
  uint64_t v263 = &v234[v235 - 1];
  *(_OWORD *)&STACK[0x388] = 0u;
  do
  {
    if (*v263)
    {
      unsigned int v264 = *v263 - (((*v263 >> 1) & 0x5B6DB6DB) + ((*v263 >> 2) & 0x9249249));
      unsigned int v262 = ((v264 + (v264 >> 3)) & 0xC71C71C7) + v262 - 63 * (((v264 + (v264 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    --v263;
  }
  while (v263 >= v234);
  if (*(unsigned char *)(v59 + 244)) {
    unsigned int v265 = 9;
  }
  else {
    unsigned int v265 = 8;
  }
  if (v265 <= v262
    || v262 >= 7u && !*(unsigned char *)(v59 + 244) && *(unsigned char *)(v59 + 248)
    || !*v513
    || *(unsigned char *)(v59 + 177) && *(unsigned char *)(v59 + 179))
  {
    if ((unsigned __int16)v262 >= 0xAu) {
      unsigned int v266 = 10;
    }
    else {
      unsigned int v266 = (unsigned __int16)v262;
    }
    for (unsigned __int8 i = 9; ; ++i)
    {
      BlueFin::GlPeFirstFix::SelectBase((uint64_t)&STACK[0x8D0], v59, (uint64_t)&STACK[0x1060], v234, v235, i, 1);
      BlueFin::GlSetBase::operator=((uint64_t)&STACK[0x340], (uint64_t)&STACK[0x8D0]);
      unsigned int v268 = 0;
      long long v269 = *(_OWORD *)&STACK[0x90C];
      *(_OWORD *)&STACK[0x36C] = *(_OWORD *)&STACK[0x8FC];
      *(_OWORD *)&STACK[0x37C] = v269;
      *(_OWORD *)&STACK[0x388] = *(_OWORD *)&STACK[0x918];
      long long v270 = *(_OWORD *)&STACK[0x8EC];
      *(_OWORD *)&STACK[0x34C] = *(_OWORD *)&STACK[0x8DC];
      *(_OWORD *)&STACK[0x35C] = v270;
      unsigned __int8 v271 = (_DWORD *)(STACK[0x340] + 4 * LOBYTE(STACK[0x348]) - 4);
      do
      {
        if (*v271)
        {
          unsigned int v272 = *v271 - (((*v271 >> 1) & 0x5B6DB6DB) + ((*v271 >> 2) & 0x9249249));
          unsigned int v268 = ((v272 + (v272 >> 3)) & 0xC71C71C7) + v268 - 63 * (((v272 + (v272 >> 3)) & 0xC71C71C7) / 0x3F);
        }
        --v271;
      }
      while ((unint64_t)v271 >= STACK[0x340]);
      BlueFin::GlSignalIdSet::GetSvIdSet((BlueFin::GlSignalIdSet *)&STACK[0x340], (uint64_t)&STACK[0x4A0]);
      BlueFin::GlPeNavUtil::ComputeDops((BlueFin::GlPeNavUtil *)v59, (const BlueFin::GlSvIdSet *)&STACK[0x4A0]);
      BOOL v273 = *(float *)&STACK[0x918] <= 2.0 && *(float *)&STACK[0x90C] <= 2.0;
      if (v273 || v266 <= (unsigned __int16)v268) {
        break;
      }
      uint64_t v234 = (_DWORD *)STACK[0x448];
      LOBYTE(v235) = STACK[0x450];
    }
    *(_DWORD *)(v59 + 264) |= 0x800u;
    *(void *)uint64_t v522 = v508;
    *((void *)v522 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v508;
    v274 = v510;
    *((void *)v522 + 2) = v510;
    uint64_t v275 = 24;
    int32x4_t v276 = vdupq_n_s32(0x43C80000u);
    do
    {
      int v277 = (char *)v522 + v275;
      *(void *)int v277 = 0;
      *((void *)v277 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
      *(_OWORD *)((char *)v522 + v275 + 36) = 0uLL;
      *((void *)v277 + 2) = 0;
      *((void *)v277 + 3) = (char *)v522 + v275 + 36;
      v277[32] = 19;
      *(_OWORD *)(v277 + 52) = 0uLL;
      *(_OWORD *)(v277 + 68) = 0uLL;
      *(_OWORD *)(v277 + 84) = 0uLL;
      *(_OWORD *)(v277 + 10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0uLL;
      *((_OWORD *)v277 + 7) = 0uLL;
      *((int32x4_t *)v277 + 8) = v276;
      v275 += 160;
      *((int32x4_t *)v277 + 9) = v276;
    }
    while (v277 + 160 != v510);
    unint64_t v278 = *(void *)(v59 + 40);
    uint64_t v279 = v59 + *(void *)(*(void *)v59 - 24);
    unint64_t v280 = *(void *)(v279 + 88);
    int v281 = *(_DWORD *)(v59 + 240);
    int v282 = *(_DWORD *)(v59 + 264);
    *(_OWORD *)&STACK[0x8D8] = *(_OWORD *)(v59 + 8);
    STACK[0x8D0] = (unint64_t)v522;
    STACK[0x8E8] = v278;
    *(_OWORD *)&STACK[0x8F0] = 0uLL;
    LODWORD(STACK[0x900]) = v282;
    STACK[0x908] = 0;
    *(_OWORD *)&STACK[0x910] = *(_OWORD *)(v279 + 8);
    STACK[0x920] = *(void *)(v279 + 24);
    STACK[0x928] = v280;
    LODWORD(STACK[0x930]) = v281;
    STACK[0x938] = (unint64_t)&STACK[0x944];
    LOBYTE(STACK[0x940]) = 8;
    *(_OWORD *)&STACK[0x954] = 0u;
    *(_OWORD *)&STACK[0x944] = 0u;
    BlueFin::GlPeLsqSubsets::RunLsqSubsets((uint64_t)&STACK[0x8D0], (BlueFin::GlSetBase *)&STACK[0x340], 3u, *(void *)(v59 + 256), (*(unsigned __int8 *)(v59 + 246) | *((_DWORD *)v527 + 11) & 0x80) == 0);
    *(_DWORD *)(v59 + 264) &= ~0x800u;
    unint64_t v283 = BlueFin::GlPeSubsets::Find(v522, (const BlueFin::GlSignalIdSet *)&STACK[0x340]);
    if (v283)
    {
      uint64_t v284 = v59 + *(void *)(*(void *)v59 - 24);
      *(_OWORD *)(v284 + 8) = *(_OWORD *)v283;
      *(void *)(v284 + 24) = *(void *)(v283 + 16);
      if (*(unsigned char *)(v59 + 264)) {
        *(_DWORD *)(v59 + 24BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = (int)(*(float *)(v283 + 120) * 1000.0);
      }
    }
    else if (BlueFin::GlUtils::m_ucEnabled)
    {
      BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
    }
    uint64_t v234 = (_DWORD *)STACK[0x448];
    uint64_t v235 = LOBYTE(STACK[0x450]);
  }
  else
  {
    v274 = v510;
  }
  unsigned int v285 = 0;
  unsigned __int8 v286 = &v234[v235 - 1];
  do
  {
    if (*v286)
    {
      unsigned int v287 = *v286 - (((*v286 >> 1) & 0x5B6DB6DB) + ((*v286 >> 2) & 0x9249249));
      unsigned int v285 = ((v287 + (v287 >> 3)) & 0xC71C71C7) + v285 - 63 * (((v287 + (v287 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    --v286;
  }
  while (v286 >= v234);
  if (*(unsigned char *)(v59 + 244)) {
    unsigned int v288 = 9;
  }
  else {
    unsigned int v288 = 8;
  }
  if (v288 <= v285
    || v285 >= 7u && !*(unsigned char *)(v59 + 244) && *(unsigned char *)(v59 + 248) && *v513)
  {
    goto LABEL_310;
  }
  unint64_t v289 = STACK[0x3B8];
  if (*(_DWORD *)STACK[0x3B8]) {
    goto LABEL_310;
  }
  unint64_t v394 = LOBYTE(STACK[0x3C0]);
  if (v394 >= 2)
  {
    if (*(_DWORD *)(v289 + 4)) {
      goto LABEL_310;
    }
    uint64_t v395 = 2;
    while (v394 != v395)
    {
      if (*(_DWORD *)(v289 + 4 * v395++))
      {
        if (v395 - 1 < v394) {
          goto LABEL_310;
        }
        break;
      }
    }
  }
  if (!*v513 || *(unsigned char *)(v59 + 177) && *(unsigned char *)(v59 + 179))
  {
    BlueFin::GlPeFirstFix::ClassicFix((BlueFin::GlPeFirstFix *)&STACK[0x8D0], (const BlueFin::GlSignalIdSet *)v59, (BlueFin::GlPeSubsets *)&STACK[0x340], v522, *((unsigned __int8 *)v527 + 32));
    unint64_t v397 = STACK[0x8E8];
    if (!*(_DWORD *)STACK[0x8E8])
    {
      unint64_t v491 = LOBYTE(STACK[0x8F0]);
      if (v491 < 2)
      {
LABEL_620:
        uint64_t v234 = (_DWORD *)STACK[0x448];
        uint64_t v235 = LOBYTE(STACK[0x450]);
        goto LABEL_310;
      }
      if (!*(_DWORD *)(v397 + 4))
      {
        uint64_t v492 = 2;
        while (v491 != v492)
        {
          if (*(_DWORD *)(v397 + 4 * v492++))
          {
            if (v492 - 1 < v491) {
              goto LABEL_453;
            }
            goto LABEL_620;
          }
        }
        goto LABEL_620;
      }
    }
LABEL_453:
    if (*(float *)&STACK[0x950] < *(float *)&STACK[0x420])
    {
      BlueFin::stSubset::operator=((uint64_t)&STACK[0x3A0], (uint64_t)&STACK[0x8D0]);
      LOBYTE(STACK[0x440]) = 0;
    }
    goto LABEL_620;
  }
LABEL_310:
  unsigned int v290 = 0;
  LOBYTE(STACK[0x2E8]) = 19;
  *(_OWORD *)&STACK[0x2EC] = 0u;
  *(_OWORD *)&STACK[0x2FC] = 0u;
  *(_OWORD *)&STACK[0x30C] = 0u;
  *(_OWORD *)&STACK[0x31C] = 0u;
  *(_OWORD *)&STACK[0x328] = 0u;
  int v291 = &v234[v235 - 1];
  STACK[0x2E0] = (unint64_t)&STACK[0x2EC];
  do
  {
    if (*v291)
    {
      unsigned int v292 = *v291 - (((*v291 >> 1) & 0x5B6DB6DB) + ((*v291 >> 2) & 0x9249249));
      unsigned int v290 = ((v292 + (v292 >> 3)) & 0xC71C71C7) + v290 - 63 * (((v292 + (v292 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    --v291;
  }
  while (v291 >= v234);
  if (*(unsigned char *)(v59 + 244)) {
    unsigned int v293 = 9;
  }
  else {
    unsigned int v293 = 8;
  }
  if (v293 <= v290
    || v290 >= 7u && !*(unsigned char *)(v59 + 244) && *(unsigned char *)(v59 + 248) && *v513)
  {
    BlueFin::GlPeFirstFix::IsolationFix((BlueFin::GlPeFirstFix *)&STACK[0x8D0], (const BlueFin::GlSignalIdSet *)v59, (BlueFin::GlPeSubsets *)&STACK[0x340], (unint64_t *)v522);
    unint64_t v294 = STACK[0x8E8];
    if (*(_DWORD *)STACK[0x8E8]) {
      goto LABEL_323;
    }
    unint64_t v314 = LOBYTE(STACK[0x8F0]);
    if (v314 >= 2)
    {
      if (*(_DWORD *)(v294 + 4))
      {
LABEL_323:
        BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&a25, (unsigned int *)&a25 + 3, 0x13u, (const void **)&STACK[0x340]);
        STACK[0x4A0] = (unint64_t)&STACK[0x4AC];
        LOBYTE(STACK[0x4A8]) = 19;
        *(_OWORD *)&STACK[0x4AC] = 0u;
        *(_OWORD *)&STACK[0x4BC] = 0u;
        *(_OWORD *)&STACK[0x4CC] = 0u;
        *(_OWORD *)&STACK[0x4DC] = 0u;
        *(_OWORD *)&STACK[0x4E8] = 0u;
        BlueFin::GlSetBase::OperatorBinaryXor((uint64_t)&a25, (int **)&STACK[0x4A0], (int **)&STACK[0x8E8]);
        BlueFin::GlSetBase::operator=((uint64_t)&a25, (uint64_t)&STACK[0x4A0]);
        long long v295 = *(_OWORD *)&STACK[0x4DC];
        *(long long *)((char *)&a28 + 4) = *(_OWORD *)&STACK[0x4CC];
        *(long long *)((char *)&a29 + 4) = v295;
        a30 = *(_OWORD *)&STACK[0x4E8];
        long long v296 = *(_OWORD *)&STACK[0x4BC];
        *(long long *)((char *)&a25 + 12) = *(_OWORD *)&STACK[0x4AC];
        *(long long *)((char *)&a27 + 4) = v296;
        BlueFin::GlSetBase::operator=((uint64_t)&STACK[0x2E0], (uint64_t)&a25);
        long long v297 = *(long long *)((char *)&a29 + 4);
        *(_OWORD *)&STACK[0x30C] = *(long long *)((char *)&a28 + 4);
        *(_OWORD *)&STACK[0x31C] = v297;
        *(_OWORD *)&STACK[0x328] = a30;
        long long v298 = *(long long *)((char *)&a27 + 4);
        *(_OWORD *)&STACK[0x2EC] = *(long long *)((char *)&a25 + 12);
        *(_OWORD *)&STACK[0x2FC] = v298;
        BlueFin::GlPeRepeatedIsol::Submit(v509, (const BlueFin::GlSignalIdSet *)STACK[0x2E0], STACK[0x2E8]);
        if (*(float *)&STACK[0x950] >= *(float *)&STACK[0x420]) {
          goto LABEL_325;
        }
        goto LABEL_324;
      }
      uint64_t v315 = 2;
      while (v314 != v315)
      {
        if (*(_DWORD *)(v294 + 4 * v315++))
        {
          if (v315 - 1 < v314) {
            goto LABEL_323;
          }
          break;
        }
      }
    }
    memset_pattern16((void *)(v59 + 274), &memset_pattern_2, 6uLL);
    *(unsigned char *)(v59 + 282) = 0;
    *(_WORD *)(v59 + 28BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
    *(void *)(v59 + 284) = 0;
    *(_DWORD *)(v59 + 292) = 0;
    BlueFin::GlPeFirstFix::SelectBase((uint64_t)&STACK[0x7D8], v59, (uint64_t)&STACK[0x1060], (void *)STACK[0x340], STACK[0x348], 0x10u, 0);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&a25, (unsigned int *)&a25 + 3, 0x13u, (const void **)&STACK[0x7D8]);
    STACK[0x4A0] = (unint64_t)&STACK[0x4AC];
    LOBYTE(STACK[0x4A8]) = 19;
    *(_OWORD *)&STACK[0x4AC] = 0u;
    *(_OWORD *)&STACK[0x4BC] = 0u;
    *(_OWORD *)&STACK[0x4CC] = 0u;
    *(_OWORD *)&STACK[0x4DC] = 0u;
    *(_OWORD *)&STACK[0x4E8] = 0u;
    BlueFin::GlSetBase::OperatorBinaryXor((uint64_t)&a25, (int **)&STACK[0x4A0], (int **)&STACK[0x340]);
    BlueFin::GlSetBase::operator=((uint64_t)&a25, (uint64_t)&STACK[0x4A0]);
    unsigned int v317 = 0;
    long long v318 = *(_OWORD *)&STACK[0x4DC];
    *(long long *)((char *)&a28 + 4) = *(_OWORD *)&STACK[0x4CC];
    *(long long *)((char *)&a29 + 4) = v318;
    a30 = *(_OWORD *)&STACK[0x4E8];
    long long v319 = *(_OWORD *)&STACK[0x4BC];
    *(long long *)((char *)&a25 + 12) = *(_OWORD *)&STACK[0x4AC];
    *(long long *)((char *)&a27 + 4) = v319;
    unsigned int v320 = (_DWORD *)(a25 + 4 * BYTE8(a25) - 4);
    do
    {
      if (*v320)
      {
        unsigned int v321 = *v320 - (((*v320 >> 1) & 0x5B6DB6DB) + ((*v320 >> 2) & 0x9249249));
        unsigned int v317 = ((v321 + (v321 >> 3)) & 0xC71C71C7) + v317 - 63 * (((v321 + (v321 >> 3)) & 0xC71C71C7) / 0x3F);
      }
      --v320;
    }
    while ((unint64_t)v320 >= (unint64_t)a25);
    if ((_WORD)v317)
    {
      *(void *)uint64_t v522 = v508;
      *((void *)v522 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v508;
      *((void *)v522 + 2) = v274;
      uint64_t v322 = 24;
      int32x4_t v323 = vdupq_n_s32(0x43C80000u);
      do
      {
        int v324 = (char *)v522 + v322;
        *(void *)int v324 = 0;
        *((void *)v324 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
        *(_OWORD *)((char *)v522 + v322 + 36) = 0uLL;
        *((void *)v324 + 2) = 0;
        *((void *)v324 + 3) = (char *)v522 + v322 + 36;
        v324[32] = 19;
        *(_OWORD *)(v324 + 52) = 0uLL;
        *(_OWORD *)(v324 + 68) = 0uLL;
        *(_OWORD *)(v324 + 84) = 0uLL;
        *(_OWORD *)(v324 + 10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0uLL;
        *((_OWORD *)v324 + 7) = 0uLL;
        *((int32x4_t *)v324 + 8) = v323;
        v322 += 160;
        *((int32x4_t *)v324 + 9) = v323;
      }
      while (v324 + 160 != v274);
      unint64_t v325 = *(void *)(v59 + 40);
      uint64_t v326 = v59 + *(void *)(*(void *)v59 - 24);
      uint64_t v327 = *(void *)(v326 + 88);
      int v328 = *(_DWORD *)(v59 + 240);
      int v329 = *(_DWORD *)(v59 + 264);
      *(void *)&a25 = v522;
      *(long long *)((char *)&a25 + 8) = *(_OWORD *)(v59 + 8);
      *(void *)&a28 = 0;
      a27 = v325;
      DWORD2(a28) = v329;
      *(void *)&a29 = 0;
      *(long long *)((char *)&a29 + 8) = *(_OWORD *)(v326 + 8);
      *((void *)&a30 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *(void *)(v326 + 24);
      a31 = v327;
      LODWORD(a32) = v328;
      *((void *)&a32 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = (char *)&a33 + 4;
      LOBYTE(a33) = 8;
      *(long long *)((char *)&a34 + 4) = 0u;
      *(long long *)((char *)&a33 + 4) = 0u;
      BlueFin::GlPeLsqSubsets::RunLsqSubsets((uint64_t)&a25, (BlueFin::GlSetBase *)&STACK[0x340], 1u, *(void *)(v59 + 256), *(unsigned char *)(v59 + 246) == 0);
      unsigned int v330 = 0;
      unsigned int v331 = (_DWORD *)(STACK[0x7D8] + 4 * LOBYTE(STACK[0x7E0]) - 4);
      do
      {
        if (*v331)
        {
          unsigned int v332 = *v331 - (((*v331 >> 1) & 0x5B6DB6DB) + ((*v331 >> 2) & 0x9249249));
          unsigned int v330 = ((v332 + (v332 >> 3)) & 0xC71C71C7) + v330 - 63 * (((v332 + (v332 >> 3)) & 0xC71C71C7) / 0x3F);
        }
        --v331;
      }
      while ((unint64_t)v331 >= STACK[0x7D8]);
      if (*(unsigned char *)(v59 + 244)) {
        unsigned int v333 = 9;
      }
      else {
        unsigned int v333 = 8;
      }
      if (v333 <= v330
        || v330 >= 7u && !*(unsigned char *)(v59 + 244) && *(unsigned char *)(v59 + 248) && *v513)
      {
        BlueFin::GlPeFirstFix::IsolationFix((BlueFin::GlPeFirstFix *)&STACK[0x4A0], (const BlueFin::GlSignalIdSet *)v59, (BlueFin::GlPeSubsets *)&STACK[0x7D8], (unint64_t *)v522);
        BlueFin::stSubset::operator=((uint64_t)&STACK[0x8D0], (uint64_t)&STACK[0x4A0]);
        unint64_t v334 = STACK[0x8E8];
        if (*(_DWORD *)STACK[0x8E8])
        {
LABEL_372:
          BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&STACK[0x1000], (unsigned int *)&STACK[0x100C], 0x13u, (const void **)&STACK[0x7D8]);
          STACK[0x4A0] = (unint64_t)&STACK[0x4AC];
          LOBYTE(STACK[0x4A8]) = 19;
          *(_OWORD *)&STACK[0x4AC] = 0u;
          *(_OWORD *)&STACK[0x4BC] = 0u;
          *(_OWORD *)&STACK[0x4CC] = 0u;
          *(_OWORD *)&STACK[0x4DC] = 0u;
          *(_OWORD *)&STACK[0x4E8] = 0u;
          BlueFin::GlSetBase::OperatorBinaryXor((uint64_t)&STACK[0x1000], (int **)&STACK[0x4A0], (int **)&STACK[0x8E8]);
          BlueFin::GlSetBase::operator=((uint64_t)&STACK[0x1000], (uint64_t)&STACK[0x4A0]);
          long long v335 = *(_OWORD *)&STACK[0x4DC];
          *(_OWORD *)&STACK[0x102C] = *(_OWORD *)&STACK[0x4CC];
          *(_OWORD *)&STACK[0x103C] = v335;
          *(_OWORD *)&STACK[0x1048] = *(_OWORD *)&STACK[0x4E8];
          long long v336 = *(_OWORD *)&STACK[0x4BC];
          *(_OWORD *)&STACK[0x100C] = *(_OWORD *)&STACK[0x4AC];
          *(_OWORD *)&STACK[0x101C] = v336;
          BlueFin::GlSetBase::operator=((uint64_t)&STACK[0x2E0], (uint64_t)&STACK[0x1000]);
          long long v337 = *(_OWORD *)&STACK[0x103C];
          *(_OWORD *)&STACK[0x30C] = *(_OWORD *)&STACK[0x102C];
          *(_OWORD *)&STACK[0x31C] = v337;
          *(_OWORD *)&STACK[0x328] = *(_OWORD *)&STACK[0x1048];
          long long v338 = *(_OWORD *)&STACK[0x101C];
          *(_OWORD *)&STACK[0x2EC] = *(_OWORD *)&STACK[0x100C];
          *(_OWORD *)&STACK[0x2FC] = v338;
          BlueFin::GlPeRepeatedIsol::Submit(v509, (const BlueFin::GlSignalIdSet *)STACK[0x2E0], STACK[0x2E8]);
          goto LABEL_373;
        }
        unint64_t v494 = LOBYTE(STACK[0x8F0]);
        if (v494 >= 2)
        {
          if (*(_DWORD *)(v334 + 4)) {
            goto LABEL_372;
          }
          uint64_t v495 = 2;
          while (v494 != v495)
          {
            if (*(_DWORD *)(v334 + 4 * v495++))
            {
              if (v495 - 1 < v494) {
                goto LABEL_372;
              }
              break;
            }
          }
        }
      }
LABEL_373:
      unint64_t v339 = STACK[0x8E8];
      if (*(_DWORD *)STACK[0x8E8]) {
        goto LABEL_374;
      }
      unint64_t v481 = LOBYTE(STACK[0x8F0]);
      if (v481 >= 2)
      {
        if (*(_DWORD *)(v339 + 4)) {
          goto LABEL_607;
        }
        uint64_t v482 = 2;
        while (v481 != v482)
        {
          if (*(_DWORD *)(v339 + 4 * v482++))
          {
            if (v482 - 1 < v481) {
              goto LABEL_607;
            }
            break;
          }
        }
      }
      unsigned int v484 = 0;
      unsigned int v485 = (_DWORD *)(STACK[0x7D8] + 4 * LOBYTE(STACK[0x7E0]) - 4);
      do
      {
        if (*v485)
        {
          unsigned int v486 = *v485 - (((*v485 >> 1) & 0x5B6DB6DB) + ((*v485 >> 2) & 0x9249249));
          unsigned int v484 = ((v486 + (v486 >> 3)) & 0xC71C71C7) + v484 - 63 * (((v486 + (v486 >> 3)) & 0xC71C71C7) / 0x3F);
        }
        --v485;
      }
      while ((unint64_t)v485 >= STACK[0x7D8]);
      unsigned int v487 = *((unsigned __int8 *)v527 + 32);
      if (v487 < (unsigned __int16)v484)
      {
        BlueFin::GlPeFirstFix::ClassicFix((BlueFin::GlPeFirstFix *)&STACK[0x4A0], (const BlueFin::GlSignalIdSet *)v59, (BlueFin::GlPeSubsets *)&STACK[0x7D8], v522, v487);
        BlueFin::stSubset::operator=((uint64_t)&STACK[0x8D0], (uint64_t)&STACK[0x4A0]);
        unint64_t v339 = STACK[0x8E8];
        if (*(_DWORD *)STACK[0x8E8])
        {
LABEL_374:
          if (*(float *)&STACK[0x950] < *(float *)&STACK[0x420])
          {
LABEL_324:
            BlueFin::stSubset::operator=((uint64_t)&STACK[0x3A0], (uint64_t)&STACK[0x8D0]);
            LOBYTE(STACK[0x440]) = 0;
            goto LABEL_325;
          }
          goto LABEL_325;
        }
      }
LABEL_607:
      unint64_t v488 = LOBYTE(STACK[0x8F0]);
      if (v488 < 2) {
        goto LABEL_325;
      }
      if (!*(_DWORD *)(v339 + 4))
      {
        uint64_t v489 = 2;
        while (v488 != v489)
        {
          if (*(_DWORD *)(v339 + 4 * v489++))
          {
            if (v489 - 1 >= v488) {
              goto LABEL_325;
            }
            goto LABEL_374;
          }
        }
        goto LABEL_325;
      }
      goto LABEL_374;
    }
  }
LABEL_325:
  unint64_t v299 = STACK[0x3B8];
  if (!*(_DWORD *)STACK[0x3B8])
  {
    unint64_t v311 = LOBYTE(STACK[0x3C0]);
    if (v311 < 2) {
      goto LABEL_549;
    }
    if (!*(_DWORD *)(v299 + 4))
    {
      uint64_t v312 = 2;
      while (v311 != v312)
      {
        if (*(_DWORD *)(v299 + 4 * v312++))
        {
          if (v312 - 1 < v311) {
            goto LABEL_326;
          }
          goto LABEL_549;
        }
      }
      goto LABEL_549;
    }
  }
LABEL_326:
  int v524 = BlueFin::GlPeFirstFix::ComputeNumDof((unsigned __int8 *)v59, (float *)v522, (uint64_t)&STACK[0x3A0], (BlueFin::GlSignalIdSet *)&STACK[0x3B8]);
  uint64_t v504 = *v527;
  int v300 = LOBYTE(STACK[0x440]);
  a25 = 0uLL;
  a26 = 0.0;
  *(void *)&a27 = (char *)&a27 + 12;
  BYTE8(a27) = 19;
  *(long long *)((char *)&a27 + 12) = 0u;
  *(long long *)((char *)&a28 + 12) = 0u;
  *(long long *)((char *)&a29 + 12) = 0u;
  *(long long *)((char *)&a30 + 12) = 0u;
  a32 = 0u;
  *(void *)&a33 = (char *)&a33 + 12;
  BYTE8(a33) = 19;
  *(long long *)((char *)&a33 + 12) = 0u;
  *(long long *)((char *)&a34 + 12) = 0u;
  *(long long *)((char *)&a36 + 4) = 0u;
  *(long long *)((char *)&a37 + 4) = 0u;
  a38 = 0u;
  a39 = (char *)&a40 + 4;
  LOBYTE(a4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 19;
  *(long long *)((char *)&a43 + 4) = 0u;
  *(long long *)((char *)&a44 + 4) = 0u;
  *(long long *)((char *)&a40 + 4) = 0u;
  *(long long *)((char *)&a41 + 4) = 0u;
  *(long long *)((char *)&a42 + 4) = 0u;
  a45 = 0u;
  a46 = vdupq_n_s32(0x44480000u);
  a47 = 0x4270000044480000;
  a48 = 1137180672;
  a49 = (unint64_t)&a49 | 0xC;
  LOBYTE(a5BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 19;
  *(long long *)((char *)&a50 + 4) = 0u;
  *(long long *)((char *)&a51 + 4) = 0u;
  *(long long *)((char *)&a52 + 4) = 0u;
  *(long long *)((char *)&a53 + 4) = 0u;
  *(long long *)((char *)&a54 + 4) = 0u;
  *(long long *)((char *)&a55 + 4) = 0u;
  *(long long *)((char *)&a56 + 4) = 0u;
  *(_OWORD *)&STACK[0x2AA] = 0u;
  STACK[0x2C0] = 0x4974240000000000;
  LOBYTE(STACK[0x2C8]) = 0;
  STACK[0x2CC] = 0x4974240000000000;
  STACK[0x2D4] = 4294901760;
  LOBYTE(STACK[0x2DC]) = 0;
  int v511 = v300;
  if (v300 && !*v516)
  {
    LOBYTE(v343) = 0;
    float v505 = 0.0;
    goto LABEL_590;
  }
  unsigned int v301 = 0;
  STACK[0x8D0] = (unint64_t)&STACK[0x8E8];
  STACK[0x8D8] = (unint64_t)&STACK[0x8E8];
  *(_OWORD *)&STACK[0x8E0] = (unint64_t)&STACK[0x988];
  *(_OWORD *)&STACK[0x8F0] = 0uLL;
  STACK[0x900] = (unint64_t)&STACK[0x90C];
  LOBYTE(STACK[0x908]) = 19;
  *(_OWORD *)&STACK[0x90C] = 0uLL;
  *(_OWORD *)&STACK[0x91C] = 0uLL;
  *(_OWORD *)&STACK[0x92C] = 0uLL;
  *(_OWORD *)&STACK[0x93C] = 0uLL;
  *(_OWORD *)&STACK[0x94C] = 0uLL;
  *(_OWORD *)&STACK[0x958] = 0uLL;
  int32x4_t v302 = vdupq_n_s32(0x43C80000u);
  *(int32x4_t *)&STACK[0x968] = v302;
  unint64_t v303 = STACK[0x3B8];
  uint64_t v304 = (_DWORD *)(STACK[0x3B8] + 4 * LOBYTE(STACK[0x3C0]) - 4);
  *(int32x4_t *)&STACK[0x978] = v302;
  do
  {
    if (*v304)
    {
      unsigned int v305 = *v304 - (((*v304 >> 1) & 0x5B6DB6DB) + ((*v304 >> 2) & 0x9249249));
      unsigned int v301 = ((v305 + (v305 >> 3)) & 0xC71C71C7) + v301 - 63 * (((v305 + (v305 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    --v304;
  }
  while ((unint64_t)v304 >= v303);
  if ((unsigned __int16)v301 < 0xEu || !*v516)
  {
    STACK[0x4A8] = 0;
    STACK[0x4A0] = 0;
    STACK[0x4B0] = 0;
    STACK[0x4B8] = (unint64_t)vdup_n_s32(0x44FA0000u);
    LODWORD(STACK[0x4C0]) = -1;
    int Fix = BlueFin::GlPeKFAltAsst::altAsstFirstFix(*(void *)(v59 + 32), (uint64_t)&STACK[0x4A0], (double *)&STACK[0x3A0], 0x3E8u);
    unint64_t v307 = *(void *)(v59 + 40);
    if (Fix)
    {
      double v310 = *(float *)&STACK[0x4B8];
      if (!*(unsigned char *)(v307 + 48) || *(double *)(v307 + 8) > v310)
      {
        *(unsigned char *)(v307 + 48) = 1;
        *(double *)(v307 + 8) = v310;
        *(void *)unint64_t v307 = STACK[0x4B0];
        *(_DWORD *)(v307 + 44) = 3;
      }
    }
    else if (!*(unsigned char *)(v307 + 48))
    {
      unsigned int v306 = *(_DWORD *)(v59 + 264);
      goto LABEL_378;
    }
    unsigned int v306 = *(_DWORD *)(v59 + 264) | 4;
LABEL_378:
    int v308 = *v516;
    goto LABEL_379;
  }
  unsigned int v306 = *(_DWORD *)(v59 + 264) & 0xFFFFFFFB;
  unint64_t v307 = *(void *)(v59 + 40);
  int v308 = 1;
LABEL_379:
  int v340 = v306 | 0x300;
  *(_DWORD *)(v59 + 264) = v340;
  *(double *)&unint64_t v341 = *(float *)&STACK[0x41C];
  int v342 = *(_DWORD *)(v59 + 240);
  *(_OWORD *)&STACK[0x4A8] = *(_OWORD *)(v59 + 8);
  STACK[0x4A0] = (unint64_t)&STACK[0x8D0];
  STACK[0x4B8] = v307;
  *(_OWORD *)&STACK[0x4C0] = 0uLL;
  LODWORD(STACK[0x4D0]) = v340;
  STACK[0x4D8] = 0;
  *(_OWORD *)&STACK[0x4E0] = *(_OWORD *)&STACK[0x3A0];
  STACK[0x4F0] = STACK[0x3B0];
  STACK[0x4F8] = v341;
  LODWORD(STACK[0x500]) = v342;
  STACK[0x508] = (unint64_t)&STACK[0x514];
  LOBYTE(STACK[0x510]) = 8;
  *(_OWORD *)&STACK[0x524] = 0u;
  *(_OWORD *)&STACK[0x514] = 0u;
  if (v308
    && *(unsigned char *)(v59 + 128) != 2
    && BlueFin::GlPeFirstFix::ValidateExtLocWithLs(v59, (uint64_t)&STACK[0x3A0], (uint64_t)v516))
  {
    STACK[0x4D8] = (unint64_t)v516;
    int v343 = 1;
  }
  else
  {
    int v343 = 0;
  }
  BlueFin::GlPeLsqSubsets::RunLsqSubset((uint64_t *)&STACK[0x4A0], (uint64_t)&STACK[0x3B8], 3, 0, *(void *)(v59 + 256), 1);
  unint64_t v344 = BlueFin::GlPeSubsets::Find((BlueFin::GlPeSubsets *)&STACK[0x8D0], (const BlueFin::GlSignalIdSet *)&STACK[0x3B8]);
  unint64_t v345 = v344;
  *(_DWORD *)(v59 + 264) &= 0xFFFFFCFF;
  if (!v344)
  {
    LOBYTE(v343) = 0;
    float v505 = 0.0;
    goto LABEL_590;
  }
  float v505 = *(float *)(v344 + 152);
  if (!v343) {
    goto LABEL_388;
  }
  if (*(unsigned char *)(v59 + 128) == 2)
  {
    LOBYTE(v343) = 0;
    goto LABEL_388;
  }
  if (*v516)
  {
    unint64_t v416 = *(void *)(v59 + 80);
    *(_OWORD *)&STACK[0x1000] = *(_OWORD *)(v59 + 64);
    STACK[0x1010] = v416;
  }
  else
  {
    *(_OWORD *)&STACK[0x1000] = 0uLL;
    STACK[0x1010] = 0;
  }
  BlueFin::lla2ned((double *)v344, (double *)&STACK[0x1000], 0, (double *)&STACK[0x7D8]);
  float v474 = sqrt(*(double *)&STACK[0x7E0] * *(double *)&STACK[0x7E0] + *(double *)&STACK[0x7D8] * *(double *)&STACK[0x7D8]);
  double v475 = v474;
  if (v474 > 200.0) {
    GlCustomLog(14, "Reject WLSQ in GlPeFirstFix::Finalise %.2f\n", v474);
  }
  char v476 = 1;
  if (v511
    && (*(_DWORD *)(v59 + 120) & 0xFFFFFFFE) != 2
    && *(float *)&STACK[0x420] + *(float *)&STACK[0x420] < *(float *)(v345 + 128))
  {
    GlCustomLog(14, "Reject WLSQ in GlPeFirstFix::Finalise due to large EA\n");
    char v476 = 0;
  }
  if (v474 > 200.0)
  {
    LOBYTE(v343) = 0;
    goto LABEL_590;
  }
  if ((*(_DWORD *)(v59 + 120) & 0xFFFFFFFE) != 2)
  {
    LOBYTE(v343) = 0;
    if ((v476 & 1) == 0) {
      goto LABEL_590;
    }
LABEL_388:
    a25 = *(_OWORD *)v345;
    double v346 = *(double *)(v345 + 16);
    HIDWORD(a45) = *(_DWORD *)(v345 + 124);
    uint64_t v347 = *(void *)(v345 + 112);
    a26 = v346;
    *(void *)&a45 = v347;
    int v348 = 1;
    if (v343) {
      goto LABEL_390;
    }
    goto LABEL_389;
  }
  float v477 = *(float *)&STACK[0x420];
  double v478 = *(float *)&STACK[0x420];
  if (v474 > 30.0) {
    double v475 = (v475 + -30.0)
  }
         * v475
         / (sqrt(*(double *)(v59 + 88) * *(double *)(v59 + 88) + *(double *)(v59 + 96) * *(double *)(v59 + 96)) + v475)
         + 30.0;
  double v479 = v478 * 5.0;
  if (v475 < v478 * 5.0) {
    double v479 = v475;
  }
  if (v479 >= v478) {
    float v477 = v479;
  }
  *(float *)a46.i32 = v477;
  *(float *)&a46.i32[3] = v477 * 0.7;
  *(float *)&a46.i32[2] = v477 * 0.7;
  LOBYTE(v343) = 1;
  if (v476) {
    goto LABEL_388;
  }
LABEL_590:
  GlCustomLog(14, "Not WLSQ in GlPeFirstFix::Finalise\n");
  a25 = *(_OWORD *)&STACK[0x3A0];
  HIDWORD(a45) = STACK[0x41C];
  unint64_t v480 = STACK[0x410];
  a26 = *(double *)&STACK[0x3B0];
  *(void *)&a45 = v480;
  if (*(unsigned char *)(v59 + 128) == 1)
  {
    int v348 = 0;
    *(unsigned char *)(v59 + 128) = 0;
    if (v343) {
      goto LABEL_390;
    }
LABEL_389:
    a46.i32[0] = STACK[0x420];
    a46.i64[1] = STACK[0x428];
    goto LABEL_390;
  }
  int v348 = 0;
  if ((v343 & 1) == 0) {
    goto LABEL_389;
  }
LABEL_390:
  int v349 = STACK[0x430];
  a46.i32[1] = STACK[0x424];
  LODWORD(a47) = v349;
  BlueFin::GlSetBase::operator=((uint64_t)&a27, (uint64_t)&STACK[0x3B8]);
  long long v350 = *(_OWORD *)&STACK[0x3F4];
  *(long long *)((char *)&a29 + 12) = *(_OWORD *)&STACK[0x3E4];
  *(long long *)((char *)&a30 + 12) = v350;
  a32 = *(_OWORD *)&STACK[0x400];
  long long v351 = *(_OWORD *)&STACK[0x3D4];
  *(long long *)((char *)&a27 + 12) = *(_OWORD *)&STACK[0x3C4];
  *(long long *)((char *)&a28 + 12) = v351;
  STACK[0x8D0] = (unint64_t)&STACK[0x8DC];
  LOBYTE(STACK[0x8D8]) = 19;
  *(_OWORD *)&STACK[0x8DC] = 0u;
  *(_OWORD *)&STACK[0x8EC] = 0u;
  *(_OWORD *)&STACK[0x8FC] = 0u;
  *(_OWORD *)&STACK[0x90C] = 0u;
  *(_OWORD *)&STACK[0x918] = 0u;
  BlueFin::GlSetBase::operator=((uint64_t)&a39, (uint64_t)&STACK[0x8D0]);
  long long v352 = *(_OWORD *)&STACK[0x90C];
  *(long long *)((char *)&a42 + 4) = *(_OWORD *)&STACK[0x8FC];
  *(long long *)((char *)&a43 + 4) = v352;
  a44 = *(_OWORD *)&STACK[0x918];
  long long v353 = *(_OWORD *)&STACK[0x8EC];
  *(long long *)((char *)&a40 + 4) = *(_OWORD *)&STACK[0x8DC];
  *(long long *)((char *)&a41 + 4) = v353;
  float v354 = *(float *)&STACK[0x418];
  DWORD2(a45) = STACK[0x418];
  if (*(unsigned char *)(v59 + 244)) {
    HIDWORD(a47) = fmaxf(*(float *)&STACK[0x434], 0.5);
  }
  char v355 = *v513;
  if (*v513)
  {
    if (*(unsigned char *)(v59 + 179)) {
      char v355 = 0;
    }
    else {
      char v355 = *(unsigned char *)(v59 + 177) == 0;
    }
  }
  LOBYTE(STACK[0x2D9]) = v355;
  LOWORD(STACK[0x2D6]) = v524;
  uint64_t v356 = *(void *)(v59 + 48);
  int v357 = *(__int16 *)(v356 + 2);
  int v358 = *(__int16 *)(v356 + 10);
  if (BlueFin::GlUtils::m_ucEnabled)
  {
    BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
    float v354 = *((float *)&a45 + 2);
  }
  *(double *)&unint64_t v359 = *((float *)&a45 + 3);
  STACK[0xFE0] = (unint64_t)&a25;
  STACK[0xFE8] = v359;
  LODWORD(STACK[0xFF0]) = (int)(v354 * 1000.0);
  LOBYTE(STACK[0xFF4]) = 12;
  LODWORD(STACK[0xFF8]) = 133330;
  *(_OWORD *)&STACK[0x8E0] = 0u;
  *(_OWORD *)&STACK[0x8D0] = 0u;
  *(int64x2_t *)&STACK[0x8F0] = vdupq_n_s64(0x4079000000000000uLL);
  STACK[0x900] = 0x4079000000000000;
  STACK[0x910] = 0x6400000000;
  bzero(&STACK[0x918], 0x328uLL);
  STACK[0x908] = (unint64_t)&STACK[0x918];
  STACK[0xC48] = 0x6400000000;
  bzero(&STACK[0xC50], 0x328uLL);
  *(_OWORD *)&STACK[0xFB8] = xmmword_263BBA380;
  STACK[0xC40] = (unint64_t)&STACK[0xC50];
  LODWORD(STACK[0xF78]) = 0;
  LODWORD(STACK[0xF80]) = 0;
  *(_OWORD *)&STACK[0xFA4] = 0u;
  *(_OWORD *)&STACK[0xF94] = 0u;
  STACK[0xF88] = (unint64_t)&STACK[0xF94];
  LOBYTE(STACK[0xF90]) = 8;
  STACK[0xFC8] = (unint64_t)vdup_n_s32(0x42C60000u);
  LODWORD(STACK[0xFD0]) = 1120272384;
  double v517 = (double)v357 * 0.000000001;
  double v360 = (double)v358 * 0.000000001;
  if (!BlueFin::GlPeLsq::LsVel(v59 + 136, (uint64_t)&STACK[0xFE0])) {
    goto LABEL_413;
  }
  long double v361 = *(double *)&STACK[0x8D8];
  long double v362 = *(double *)&STACK[0x8D0];
  double v363 = v361 * v361;
  double v364 = v362 * v362;
  float v365 = v361 * v361 + v362 * v362;
  float v366 = sqrtf(v365);
  double v367 = *(double *)&STACK[0x900];
  double v368 = *(double *)&STACK[0x8F8];
  float v369 = *(double *)&STACK[0x900] + *(double *)&STACK[0x8F8];
  if ((*(unsigned char *)(v59 + 264) & 2) == 0)
  {
    double v370 = fabs(*(double *)&STACK[0x8E0]);
    if (v370 >= v366 && v370 >= 5.0) {
      goto LABEL_413;
    }
  }
  if (v369 < 25.0)
  {
    LOBYTE(STACK[0x2D4]) = 1;
    LOBYTE(STACK[0x2C8]) = 1;
    *(float *)&STACK[0x2CC] = v366;
    float v372 = atan2(v361, v362);
    *(float *)&STACK[0x2C0] = v372;
    *(float *)&STACK[0x2D0] = v369;
    float v373 = (v367 * v364 + v368 * v363) / (float)((float)(v366 * v366) * (float)(v366 * v366));
    *(float *)&STACK[0x2C4] = v373;
    if (v360 * 1000000000.0 > 97.0 && v360 > sqrt(*(double *)&STACK[0x8F0]) * 3.33564095 * 0.000000001 && v366 < 25.0)
    {
      double v374 = *(double *)&STACK[0x8E8] * 3.33564095 * 0.000000001;
      if (fabs(v374) < 0.00001) {
        BlueFin::GlPeOscMgr::SetOscOff(*(BlueFin::GlPeOscMgr **)(v59 + 48), v374, 0.000000098, 0);
      }
    }
  }
  else
  {
LABEL_413:
    if (*(double *)&STACK[0x8F0] >= 1000000.0)
    {
      v375.f64[0] = (double)v357 * 0.000000001;
      v375.f64[1] = v360 * 1000000000.0;
      float64x2_t v376 = vmulq_f64(v375, (float64x2_t)xmmword_263BBBD60);
      v375.f64[1] = v376.f64[1];
      v375.f64[0] = 0.299792458;
      *(float64x2_t *)&STACK[0x8E8] = vmulq_f64(v376, v375);
    }
    STACK[0x8D8] = 0;
    STACK[0x8D0] = 0;
    STACK[0x8E0] = 0;
  }
  if (*(unsigned char *)(v59 + 246)) {
    goto LABEL_417;
  }
  float v386 = *(float *)&STACK[0x410];
  if (*v513 && !*(unsigned char *)(v59 + 179) && !*(unsigned char *)(v59 + 178)) {
    goto LABEL_571;
  }
  STACK[0x4A8] = 0;
  STACK[0x4A0] = 0;
  STACK[0x4B0] = 0;
  STACK[0x4B8] = (unint64_t)vdup_n_s32(0x44FA0000u);
  LODWORD(STACK[0x4C0]) = -1;
  if (BlueFin::GlPeKFAltAsst::altAsstFirstFix(*(void *)(v59 + 32), (uint64_t)&STACK[0x4A0], (double *)&STACK[0x3A0], 0x3E8u))
  {
    char v377 = 1;
    *(unsigned char *)(v59 + 308) = 1;
    *(_DWORD *)(v59 + 312) = *(_DWORD *)(v59 + *(void *)(*(void *)v59 - 24) + 200);
    goto LABEL_418;
  }
  if (!*(unsigned char *)(v59 + 308))
  {
    if (v386 <= 10.0) {
      goto LABEL_417;
    }
LABEL_571:
    char v377 = 1;
    goto LABEL_418;
  }
  if (v386 > 10.0
    || (*(_DWORD *)(v59 + *(void *)(*(void *)v59 - 24) + 200) - *(_DWORD *)(v59 + 312)) >> 3 < 0x753)
  {
    goto LABEL_571;
  }
LABEL_417:
  char v377 = 0;
LABEL_418:
  STACK[0x1000] = (unint64_t)&STACK[0x100C];
  uint64_t v378 = &STACK[0x2C0];
  LOBYTE(STACK[0x1008]) = 19;
  *(_OWORD *)&STACK[0x100C] = 0u;
  *(_OWORD *)&STACK[0x101C] = 0u;
  *(_OWORD *)&STACK[0x102C] = 0u;
  *(_OWORD *)&STACK[0x103C] = 0u;
  unsigned int v379 = 147;
  *(_OWORD *)&STACK[0x1048] = 0u;
  do
  {
    *((_DWORD *)&STACK[0x100C] + (v379 >> 5)) |= 1 << v379;
    ++v379;
  }
  while (v379 != 161);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&STACK[0x7D8], (unsigned int *)&STACK[0x7E4], 0x13u, (const void **)&STACK[0x1000]);
  STACK[0x4A0] = (unint64_t)&STACK[0x4AC];
  LOBYTE(STACK[0x4A8]) = 19;
  *(_OWORD *)&STACK[0x4AC] = 0u;
  *(_OWORD *)&STACK[0x4BC] = 0u;
  *(_OWORD *)&STACK[0x4CC] = 0u;
  *(_OWORD *)&STACK[0x4DC] = 0u;
  *(_OWORD *)&STACK[0x4E8] = 0u;
  BlueFin::GlSetBase::OperatorBinaryInversion((uint64_t)&STACK[0x7D8], (int **)&STACK[0x4A0]);
  BlueFin::GlSetBase::operator=((uint64_t)&STACK[0x7D8], (uint64_t)&STACK[0x4A0]);
  long long v380 = *(_OWORD *)&STACK[0x4DC];
  *(_OWORD *)&STACK[0x804] = *(_OWORD *)&STACK[0x4CC];
  *(_OWORD *)&STACK[0x814] = v380;
  *(_OWORD *)&STACK[0x820] = *(_OWORD *)&STACK[0x4E8];
  long long v381 = *(_OWORD *)&STACK[0x4BC];
  *(_OWORD *)&STACK[0x7E4] = *(_OWORD *)&STACK[0x4AC];
  *(_OWORD *)&STACK[0x7F4] = v381;
  BlueFin::GlSignalIdSet::setSignalIdLimits((BlueFin::GlSignalIdSet *)&STACK[0x7D8]);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&STACK[0x870], (unsigned int *)&STACK[0x87C], 0x13u, (const void **)&STACK[0x3B8]);
  STACK[0x4A0] = (unint64_t)&STACK[0x4AC];
  LOBYTE(STACK[0x4A8]) = 19;
  *(_OWORD *)&STACK[0x4AC] = 0u;
  *(_OWORD *)&STACK[0x4BC] = 0u;
  *(_OWORD *)&STACK[0x4CC] = 0u;
  *(_OWORD *)&STACK[0x4DC] = 0u;
  *(_OWORD *)&STACK[0x4E8] = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&STACK[0x870], (int **)&STACK[0x4A0], (int **)&STACK[0x7D8]);
  BlueFin::GlSetBase::operator=((uint64_t)&STACK[0x870], (uint64_t)&STACK[0x4A0]);
  long long v382 = *(_OWORD *)&STACK[0x4DC];
  *(_OWORD *)&STACK[0x89C] = *(_OWORD *)&STACK[0x4CC];
  *(_OWORD *)&STACK[0x8AC] = v382;
  *(_OWORD *)&STACK[0x8B8] = *(_OWORD *)&STACK[0x4E8];
  long long v383 = *(_OWORD *)&STACK[0x4BC];
  *(_OWORD *)&STACK[0x87C] = *(_OWORD *)&STACK[0x4AC];
  *(_OWORD *)&STACK[0x88C] = v383;
  if (v511)
  {
    unint64_t v384 = STACK[0x870];
    if (*(_DWORD *)STACK[0x870]) {
      goto LABEL_422;
    }
    unint64_t v387 = LOBYTE(STACK[0x878]);
    if (v387 < 2) {
      goto LABEL_436;
    }
    if (*(_DWORD *)(v384 + 4))
    {
LABEL_422:
      BOOL v385 = 1;
    }
    else
    {
      uint64_t v388 = 2;
      while (v387 != v388)
      {
        if (*(_DWORD *)(v384 + 4 * v388++))
        {
          unint64_t v390 = v388 - 1;
          goto LABEL_631;
        }
      }
      unint64_t v390 = LOBYTE(STACK[0x878]);
LABEL_631:
      BOOL v385 = v390 < v387;
    }
    if (v348 & v385)
    {
LABEL_535:
      int v424 = LOBYTE(STACK[0x2D4]);
      goto LABEL_536;
    }
  }
LABEL_436:
  int v391 = v524;
  char v392 = v377 ^ 1;
  float v393 = 5.0;
  if (v524 > 1) {
    char v392 = 1;
  }
  if ((v392 & 1) == 0)
  {
    if (v524 < 0)
    {
      double v398 = *(double *)(*(void *)(v59 + 40) + 8);
      if (v398 < 100.0) {
        double v398 = 100.0;
      }
      float v393 = v398;
    }
    else
    {
      float v393 = 50.0;
      if (v524) {
        float v393 = 10.0;
      }
    }
  }
  unsigned int v399 = 0;
  STACK[0x4A0] = (unint64_t)&STACK[0x4AC];
  LOBYTE(STACK[0x4A8]) = 19;
  *(_OWORD *)&STACK[0x4AC] = 0u;
  *(_OWORD *)&STACK[0x4BC] = 0u;
  *(_OWORD *)&STACK[0x4CC] = 0u;
  *(_OWORD *)&STACK[0x4DC] = 0u;
  *(_OWORD *)&STACK[0x4E8] = 0u;
  do
  {
    *((_DWORD *)&STACK[0x4AC] + (v399 >> 5)) |= 1 << v399;
    ++v399;
  }
  while (v399 != 128);
  if (LOBYTE(STACK[0x3C0]) >= 0x13u) {
    unint64_t v400 = 19;
  }
  else {
    unint64_t v400 = LOBYTE(STACK[0x3C0]);
  }
  if (v400)
  {
    if ((STACK[0x4AC] & *(_DWORD *)STACK[0x3B8]) != 0) {
      goto LABEL_491;
    }
    unint64_t v401 = 0;
    while (v400 - 1 != v401)
    {
      int v402 = *(_DWORD *)(STACK[0x3B8] + 4 + 4 * v401);
      int v403 = *((_DWORD *)&STACK[0x4B0] + v401++);
      if ((v403 & v402) != 0)
      {
        if (v401 < v400) {
          goto LABEL_491;
        }
        break;
      }
    }
  }
  STACK[0x7D8] = (unint64_t)&STACK[0x7E4];
  LOBYTE(STACK[0x7E0]) = 19;
  *(_OWORD *)&STACK[0x7E4] = 0u;
  *(_OWORD *)&STACK[0x7F4] = 0u;
  *(_OWORD *)&STACK[0x804] = 0u;
  *(_OWORD *)&STACK[0x814] = 0u;
  unsigned int v404 = 453;
  *(_OWORD *)&STACK[0x820] = 0u;
  do
  {
    *((_DWORD *)&STACK[0x7E4] + (v404 >> 5)) |= 1 << v404;
    ++v404;
  }
  while (v404 != 561);
  if (v400)
  {
    if ((STACK[0x7E4] & *(_DWORD *)STACK[0x3B8]) != 0) {
      goto LABEL_491;
    }
    unint64_t v405 = 0;
    while (v400 - 1 != v405)
    {
      int v406 = *(_DWORD *)(STACK[0x3B8] + 4 + 4 * v405);
      int v407 = *((_DWORD *)&STACK[0x7E8] + v405++);
      if ((v407 & v406) != 0)
      {
        if (v405 < v400) {
          goto LABEL_491;
        }
        break;
      }
    }
  }
  STACK[0x1000] = (unint64_t)&STACK[0x100C];
  LOBYTE(STACK[0x1008]) = 19;
  *(_OWORD *)&STACK[0x100C] = 0u;
  *(_OWORD *)&STACK[0x101C] = 0u;
  *(_OWORD *)&STACK[0x102C] = 0u;
  *(_OWORD *)&STACK[0x103C] = 0u;
  unsigned int v408 = 201;
  *(_OWORD *)&STACK[0x1048] = 0u;
  do
  {
    *((_DWORD *)&STACK[0x100C] + (v408 >> 5)) |= 1 << v408;
    ++v408;
  }
  while (v408 != 453);
  if (v400)
  {
    if ((STACK[0x100C] & *(_DWORD *)STACK[0x3B8]) != 0) {
      goto LABEL_491;
    }
    unint64_t v409 = 0;
    while (v400 - 1 != v409)
    {
      int v410 = *(_DWORD *)(STACK[0x3B8] + 4 + 4 * v409);
      int v411 = *((_DWORD *)&STACK[0x1000] + v409++ + 4);
      if ((v411 & v410) != 0)
      {
        if (v409 < v400) {
          goto LABEL_491;
        }
        break;
      }
    }
  }
  float v393 = v393 * 5.0;
LABEL_491:
  float v412 = *(float *)a46.i32;
  float v413 = v393 * *(float *)&a45;
  if (v413 < *(float *)a46.i32) {
    float v413 = *(float *)a46.i32;
  }
  if (v505 > 400.0) {
    float v413 = 400.0;
  }
  *(float *)a46.i32 = v413;
  if (v412 < 400.0 && (float)(*(float *)&STACK[0x2CC] * *(float *)&STACK[0x2CC]) < *(float *)&STACK[0x2D0])
  {
    unint64_t v414 = STACK[0x870];
    if (*(_DWORD *)STACK[0x870]) {
      goto LABEL_498;
    }
    unint64_t v417 = LOBYTE(STACK[0x878]);
    if (v417 < 2) {
      goto LABEL_513;
    }
    if (*(_DWORD *)(v414 + 4))
    {
LABEL_498:
      if (!BlueFin::GlPeFirstFix::m_bReqTimeOutReached)
      {
        BOOL v415 = BlueFin::GlSetBase::operator==(v59 + 320, *(void *)(v59 + 8) + 184);
        int v391 = v524;
        if (!v415) {
          goto LABEL_513;
        }
        float v413 = *(float *)a46.i32;
      }
      if (v413 > 399.0) {
        float v413 = 399.0;
      }
      *(float *)a46.i32 = v413;
    }
    else
    {
      uint64_t v418 = 2;
      while (v417 != v418)
      {
        if (*(_DWORD *)(v414 + 4 * v418++))
        {
          if (v418 - 1 < v417) {
            goto LABEL_498;
          }
          break;
        }
      }
    }
  }
LABEL_513:
  if (v391) {
    goto LABEL_529;
  }
  if (a26 > 18288.0)
  {
    float v420 = *(float *)a46.i32;
    float v421 = a26;
LABEL_516:
    if (v420 > v421) {
      float v421 = v420;
    }
    *(float *)a46.i32 = v421;
    goto LABEL_527;
  }
  if (*(_DWORD *)(v504 + 72) == 1 && *(float *)(v504 + 24) < 4000.0)
  {
    BlueFin::GlPeTimeManager::GetTime(*(BlueFin::GlPeTimeManager **)(v59 + 24), 1, (__n128 *)&STACK[0x4A0]);
    STACK[0x7E0] = 0;
    STACK[0x7D8] = (unint64_t)&off_270EBC600;
    BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)&STACK[0x4A0], (BlueFin::GlGpsTime *)&STACK[0x7D8]);
    if (((__PAIR64__(LODWORD(STACK[0x7E4]) - *(_DWORD *)(v504 + 68), STACK[0x7E0])
                       - *(unsigned int *)(v504 + 64)) >> 32) <= 0x257)
    {
      BlueFin::lla2ned((double *)v504, (double *)&a25, 0, (double *)&STACK[0x4A0]);
      float v421 = sqrt(*(double *)&STACK[0x4A8] * *(double *)&STACK[0x4A8] + *(double *)&STACK[0x4A0]
                                                                      * *(double *)&STACK[0x4A0]);
      if (v421 > 4000.0)
      {
        float v420 = *(float *)a46.i32;
        goto LABEL_516;
      }
    }
  }
LABEL_527:
  if (*(float *)a46.i32 > *(float *)(v504 + 24))
  {
    uint64_t v423 = *(void *)(v59 + 256);
    *(_OWORD *)(v423 + 12) = 0u;
    *(void *)uint64_t v423 = v423 + 12;
    *(unsigned char *)(v423 + 8) = 19;
    *(_OWORD *)(v423 + 28) = 0u;
    *(_OWORD *)(v423 + 44) = 0u;
    *(_OWORD *)(v423 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
    *(_OWORD *)(v423 + 76) = 0u;
    *(_OWORD *)(v423 + 92) = 0u;
    *(_OWORD *)(v423 + 108) = 0u;
    *(_OWORD *)(v423 + 122) = 0u;
  }
LABEL_529:
  int v424 = LOBYTE(STACK[0x2D4]);
  if (LOBYTE(STACK[0x2D4])) {
    BOOL v425 = *(float *)&STACK[0x2CC] <= 36.0;
  }
  else {
    BOOL v425 = 1;
  }
  if (!v425)
  {
    if ((*(_DWORD *)(v59 + 264) & 3) == 1)
    {
      STACK[0x4A8] = 0;
      STACK[0x4A0] = 0;
      STACK[0x4B0] = 0;
      STACK[0x4B8] = (unint64_t)&STACK[0x4C4];
      LOBYTE(STACK[0x4C0]) = 19;
      *(_OWORD *)&STACK[0x4C4] = 0u;
      *(_OWORD *)&STACK[0x4D4] = 0u;
      *(_OWORD *)&STACK[0x4E4] = 0u;
      *(_OWORD *)&STACK[0x4F4] = 0u;
      *(_OWORD *)&STACK[0x500] = 0u;
      STACK[0x510] = (unint64_t)&STACK[0x51C];
      LOBYTE(STACK[0x518]) = 19;
      *(_OWORD *)&STACK[0x51C] = 0u;
      *(_OWORD *)&STACK[0x52C] = 0u;
      *(_OWORD *)&STACK[0x53C] = 0u;
      *(_OWORD *)&STACK[0x54C] = 0u;
      *(_OWORD *)&STACK[0x558] = 0u;
      STACK[0x568] = (unint64_t)&STACK[0x574];
      LOBYTE(STACK[0x570]) = 19;
      *(_OWORD *)&STACK[0x5B4] = 0u;
      *(_OWORD *)&STACK[0x5A4] = 0u;
      *(_OWORD *)&STACK[0x594] = 0u;
      *(_OWORD *)&STACK[0x584] = 0u;
      *(_OWORD *)&STACK[0x574] = 0u;
      *(_OWORD *)&STACK[0x5C0] = 0u;
      *(int32x4_t *)&STACK[0x5D0] = vdupq_n_s32(0x44480000u);
      STACK[0x5E0] = 0x4270000044480000;
      *(_OWORD *)&STACK[0x60C] = 0u;
      *(_OWORD *)&STACK[0x61C] = 0u;
      *(_OWORD *)&STACK[0x62C] = 0u;
      *(_OWORD *)&STACK[0x63C] = 0u;
      *(_OWORD *)&STACK[0x64C] = 0u;
      *(_OWORD *)&STACK[0x65C] = 0u;
      *(_OWORD *)&STACK[0x66A] = 0u;
      *(_OWORD *)&STACK[0x5FC] = 0u;
      LODWORD(STACK[0x5E8]) = 1137180672;
      STACK[0x5F0] = (unint64_t)&STACK[0x5FC];
      LOBYTE(STACK[0x5F8]) = 19;
      STACK[0x680] = 0x4974240000000000;
      LOBYTE(STACK[0x688]) = 0;
      STACK[0x68C] = 0x4974240000000000;
      STACK[0x694] = 4294901760;
      LOBYTE(STACK[0x69C]) = 0;
      BlueFin::GlPeFirstFix::stFirstFixReturn::operator=((uint64_t)&a25, (uint64_t)&STACK[0x4A0]);
      STACK[0x8E0] = 0;
      STACK[0x8D0] = 0;
      STACK[0x8D8] = 0;
    }
    goto LABEL_535;
  }
LABEL_536:
  if (v424)
  {
    double v518 = *(double *)&STACK[0x8E8];
    double v426 = sqrt(*(double *)&STACK[0x8F0]);
    __int32 v525 = a46.i32[0];
    float v514 = 1.0;
    __int32 vars8 = a46.i32[1];
    float v427 = sqrtf(*(float *)&STACK[0x2D0]);
  }
  else
  {
    float v427 = *(float *)a46.i32;
    double v518 = v517 * 1000000000.0 * 0.299792458;
    double v426 = v360 * 1000000000.0 * 0.299792458;
    __int32 vars8 = a46.i32[1];
    float v514 = *(float *)&a46.i32[1];
    __int32 v525 = a46.i32[0];
  }
  uint64_t v428 = *(void *)(*(void *)v59 - 24);
  int v429 = **(_DWORD **)(v59 + 8);
  unint64_t v430 = STACK[0x8D0];
  unint64_t v431 = STACK[0x8D8];
  unint64_t v432 = STACK[0x8E0];
  int v506 = a47;
  if (LOBYTE(STACK[0x2C8]))
  {
    float v433 = sqrtf(*(float *)&STACK[0x2C4]);
  }
  else
  {
    uint64_t v378 = (unint64_t *)(v59 + v428 + 176);
    float v433 = *(float *)(v59 + v428 + 184);
  }
  float v512 = v433;
  int v434 = *(_DWORD *)v378;
  float v435 = v426;
  double v436 = *((float *)&a45 + 3);
  uint64_t v437 = v59 + v428;
  *(_OWORD *)(v437 + 8) = a25;
  *(double *)(v437 + 24) = a26;
  uint64_t v438 = *(void *)(v59 + v428 + 188);
  BlueFin::GlPeNavGnssState::NormalizePos((BlueFin::GlPeNavGnssState *)(v59 + v428));
  *(_DWORD *)(v437 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v525;
  *(_DWORD *)(v437 + 84) = vars8;
  *(double *)(v437 + 88) = v436;
  *(_DWORD *)(v437 + 96) = v506;
  *(void *)(v437 + 104) = v430;
  *(void *)(v437 + 112) = v431;
  *(void *)(v437 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v432;
  *(float *)(v437 + 128) = v427;
  *(float *)(v437 + 132) = v427;
  *(float *)(v437 + 136) = v427;
  *(float *)(v437 + 14BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v514;
  *(double *)(v437 + 152) = v518;
  *(float *)(v437 + 16BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v435;
  *(void *)(v437 + 168) = 0x3FF0000000000000;
  *(_DWORD *)(v437 + 20BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v429;
  *(_DWORD *)(v437 + 204) = 1;
  *(_DWORD *)(v437 + 176) = v434;
  *(float *)(v437 + 184) = v512;
  *(void *)(v437 + 188) = v438;
  *(_DWORD *)(v437 + 248) = v525;
  *(_DWORD *)(v437 + 252) = vars8;
  if (BlueFin::GlUtils::m_ucEnabled) {
    BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
  }
  uint64_t v439 = *(void *)(v59 + 256);
  BlueFin::GlSetBase::operator=((uint64_t)&a49, v439);
  *(_OWORD *)((unint64_t)&a49 | 0xC) = *(_OWORD *)(v439 + 12);
  long long v440 = *(_OWORD *)(v439 + 28);
  long long v441 = *(_OWORD *)(v439 + 44);
  long long v442 = *(_OWORD *)(v439 + 60);
  *(_OWORD *)(((unint64_t)&a49 | 0xC) + 0x3C) = *(_OWORD *)(v439 + 72);
  *(_OWORD *)(((unint64_t)&a49 | 0xC) + 0x2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v441;
  *(_OWORD *)(((unint64_t)&a49 | 0xC) + 0x3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v442;
  *(_OWORD *)(((unint64_t)&a49 | 0xC) + 0x1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v440;
  a55 = *(_OWORD *)(v439 + 88);
  a56 = *(_OWORD *)(v439 + 104);
  *(_OWORD *)&STACK[0x2A8] = *(_OWORD *)(v439 + 120);
  LOWORD(STACK[0x2B8]) = *(_WORD *)(v439 + 136);
  BlueFin::GlPeFirstFix::stFirstFixReturn::operator=(v529, (uint64_t)&a25);
  float v443 = *(float *)(v529 + 304);
  double v444 = 0.5;
  if (v443 <= 0.0 && (double v444 = -0.5, v443 >= 0.0) || (int)(v444 + v443) <= 399)
  {
    BlueFin::GlSetBase::operator=(v529 + 112, (uint64_t)&STACK[0x2E0]);
    long long v445 = *(_OWORD *)&STACK[0x2EC];
    *(_OWORD *)(v529 + 14BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_OWORD *)&STACK[0x2FC];
    long long v446 = *(_OWORD *)&STACK[0x31C];
    *(_OWORD *)(v529 + 156) = *(_OWORD *)&STACK[0x30C];
    *(_OWORD *)(v529 + 172) = v446;
    *(_OWORD *)(v529 + 184) = *(_OWORD *)&STACK[0x328];
    *(_OWORD *)(v529 + 124) = v445;
    char v447 = v523;
    if (v523)
    {
      char v447 = *(unsigned char *)(v59 + 128);
      char v448 = *(unsigned char *)(v59 + 129);
    }
    else
    {
      char v448 = 0;
    }
    int v449 = v522;
    *(unsigned char *)(v529 + 506) = v447;
    *(unsigned char *)(v529 + 507) = v448;
    int v104 = 1;
    goto LABEL_552;
  }
LABEL_549:
  int v104 = 0;
  int v449 = v522;
LABEL_552:
  v507(v449);
LABEL_553:
  if (v523)
  {
    if (sqrt(*(double *)(v527[1] + 32) * *(double *)(v527[1] + 32) + *(double *)(v527[1] + 40)
                                                                    * *(double *)(v527[1] + 40)) < *(float *)(v529 + 304))
      int v450 = v104;
    else {
      int v450 = 0;
    }
    if (v521) {
      int v451 = v104 ^ 1 | v450;
    }
    else {
      int v451 = 0;
    }
  }
  else
  {
    int v451 = 0;
    if (*(float *)(v529 + 304) > 0.0) {
      LOBYTE(v45BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v104;
    }
    else {
      LOBYTE(v45BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
    }
  }
  BlueFin::GlSignalIdSet::GetSvIdSet((BlueFin::GlSignalIdSet *)&STACK[0x448], (uint64_t)&STACK[0x1060]);
  BlueFin::GlPeNavUtil::ComputeDops((BlueFin::GlPeNavUtil *)v59, (const BlueFin::GlSvIdSet *)&STACK[0x1060]);
  if ((((*(float *)&STACK[0x90C] >= 4.0) | ~((v523 != 0) & v104 & v521)) & v451) == 1)
  {
    uint64_t v452 = v527[1];
    uint64_t v453 = *(void *)(v452 + 8);
    *(void *)uint64_t v529 = v453;
    uint64_t v454 = *(void *)(v452 + 16);
    *(void *)(v529 + 8) = v454;
    uint64_t v455 = *(void *)(v452 + 24);
    *(void *)(v529 + 16) = v455;
    int32x2_t v456 = (int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v452 + 32));
    __int32 v528 = v456.i32[0];
    *(int32x2_t *)(v529 + 312) = vrev64_s32(v456);
    *(_DWORD *)(v529 + 304) = v456.i32[0];
    float v457 = *(double *)(v452 + 56);
    *(float *)(v529 + 308) = v457;
    uint64_t v458 = 1;
    *(unsigned char *)(v529 + 504) = 1;
    *(unsigned char *)(v529 + 508) = v450;
    *(unsigned char *)(v529 + 506) = 1;
    uint64_t v459 = v59 + *(void *)(*(void *)v59 - 24);
    int v460 = **(_DWORD **)(v59 + 8);
    int v461 = *(_DWORD *)(v459 + 136);
    uint64_t v462 = *(void *)(v459 + 88);
    int v463 = *(_DWORD *)(v459 + 96);
    uint64_t v464 = *(void *)(v459 + 152);
    int v465 = *(_DWORD *)(v459 + 160);
    int v526 = *(_DWORD *)(v459 + 176);
    int v530 = *(_DWORD *)(v459 + 192);
    *(void *)(v459 + 8) = v453;
    *(void *)(v459 + 16) = v454;
    *(void *)(v459 + 24) = v455;
    uint64_t v466 = *(void *)(v459 + 128);
    uint64_t v467 = *(void *)(v459 + 184);
    BlueFin::GlPeNavGnssState::NormalizePos((BlueFin::GlPeNavGnssState *)v459);
    *(_DWORD *)(v459 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v528;
    *(float *)(v459 + 84) = v457;
    *(_DWORD *)(v459 + 136) = v461;
    *(void *)(v459 + 88) = v462;
    *(_DWORD *)(v459 + 96) = v463;
    *(void *)(v459 + 128) = v466;
    *(_DWORD *)(v459 + 14BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1065353216;
    *(void *)(v459 + 152) = v464;
    *(_DWORD *)(v459 + 16BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v465;
    *(void *)(v459 + 168) = 0x3FF0000000000000;
    *(_DWORD *)(v459 + 20BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v460;
    *(_DWORD *)(v459 + 204) = 1;
    *(_DWORD *)(v459 + 176) = v526;
    *(void *)(v459 + 184) = v467;
    *(_DWORD *)(v459 + 192) = v530;
    *(_DWORD *)(v459 + 248) = v528;
    *(float *)(v459 + 252) = v457;
    if (BlueFin::GlUtils::m_ucEnabled) {
      BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
    }
  }
  else if (v104)
  {
    uint64_t v458 = 1;
  }
  else
  {
    uint64_t v458 = 0;
    *(_DWORD *)(v529 + 296) = *(_DWORD *)(v59 + 300);
    *(_DWORD *)(v529 + 324) = *(_DWORD *)(v59 + 304);
  }
  uint64_t v468 = *(_OWORD **)(v59 + 8);
  uint64_t v469 = BlueFin::GlSetBase::operator=(v59 + 320, (uint64_t)v468 + 184);
  *(_OWORD *)(v469 + 12) = *(_OWORD *)((char *)v468 + 196);
  long long v470 = *(_OWORD *)((char *)v468 + 212);
  long long v471 = *(_OWORD *)((char *)v468 + 228);
  long long v472 = *(_OWORD *)((char *)v468 + 244);
  *(_OWORD *)(v469 + 72) = v468[16];
  *(_OWORD *)(v469 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v472;
  *(_OWORD *)(v469 + 44) = v471;
  *(_OWORD *)(v469 + 28) = v470;
  return v458;
}